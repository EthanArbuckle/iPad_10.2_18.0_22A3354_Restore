float64x2_t *sub_20F576E60(float64x2_t *result, int a2, float64x2_t *__src, double a4, double a5, double a6, double a7, double a8, float64x2_t a9, float64x2_t a10, float64x2_t *a11, int a12)
{
  float64x2_t *v14;
  float64x2_t *v15;
  float64x2_t *v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v54;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v62;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  double v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v334;
  float64x2_t v336;
  float64x2_t v339;
  float64x2_t v344;
  float64x2_t v346;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v355;
  float64x2_t v357;
  float64x2_t v359;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v551;
  float64x2_t v553;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v568;
  float64x2_t v570;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  unint64_t i;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t *v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  double v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  _QWORD *v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v756;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773[115];
  float64_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  double v789;
  double v790;
  double v791;
  double v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v810[45];
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814;
  float64x2_t v815;
  float64x2_t v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  float64x2_t v824;
  float64_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t v835;
  float64x2_t v836;
  float64x2_t v837;
  float64x2_t v838;
  float64x2_t v839;
  float64_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  float64x2_t v851;
  float64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  float64_t v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  float64x2_t v867;
  float64x2_t v868;
  float64x2_t v869;
  float64_t v870;
  float64x2_t v871;
  float64x2_t v872;
  float64x2_t v873;
  float64x2_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  float64_t v878;
  uint64_t v879;

  v879 = *MEMORY[0x24BDAC8D0];
  v14 = __src + 17;
  switch(a12)
  {
    case 0:
      v15 = a11 + 1;
      if (&__src[45] > &a11[1] && (float64x2_t *)&a11[113].f64[1] > __src)
      {
        MEMORY[0x24BDAC7A8](result);
        result = (float64x2_t *)memcpy(v773, v15, 0x708uLL);
        v15 = v773;
      }
      MEMORY[0x24BDAC7A8](result);
      v16 = &v773[-45];
      memcpy(&v773[-45], __src, 0x2D0uLL);
      v17 = v15[1];
      v18 = *(float64x2_t *)((char *)v15 + 136);
      v19 = *(float64x2_t *)((char *)v15 + 120);
      v21 = v15[15];
      v20 = v15[16];
      v22 = *(float64x2_t *)((char *)v15 + 376);
      v23 = *(float64x2_t *)((char *)v15 + 360);
      v24 = v773[-44];
      v25 = *(float64x2_t *)((char *)&v773[-37] + 8);
      v26 = *(float64x2_t *)((char *)&v773[-38] + 8);
      v27 = v773[-30];
      v28 = *(float64x2_t *)((char *)&v773[-22] + 8);
      v29 = *(float64x2_t *)((char *)&v773[-23] + 8);
      _Q24 = v773[-45];
      v31 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v16->f64[0]), v19, *v16, 1), v21, v24.f64[0]), v23, v24, 1);
      v32 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v16->f64[0]), v18, *v16, 1), v20, v24.f64[0]), v22, v24, 1);
      v33 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v26.f64[0]), v19, v26, 1), v21, v25.f64[0]), v23, v25, 1);
      v34 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v26.f64[0]), v18, v26, 1), v20, v25.f64[0]), v22, v25, 1);
      _Q20 = v27;
      v36 = v773[-29];
      v37 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v27.f64[0]), v19, v27, 1), v21, v36.f64[0]), v23, v36, 1);
      v38 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v27.f64[0]), v18, v27, 1), v20, v36.f64[0]), v22, v36, 1);
      v39 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v29.f64[0]), v19, v29, 1), v21, v28.f64[0]), v23, v28, 1);
      v40 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v29.f64[0]), v18, v29, 1), v20, v28.f64[0]), v22, v28, 1);
      v42 = v15[30];
      v41 = v15[31];
      v44 = *(float64x2_t *)((char *)v15 + 600);
      v43 = *(float64x2_t *)((char *)v15 + 616);
      v46 = v15[45];
      v45 = v15[46];
      v48 = *(float64x2_t *)((char *)v15 + 840);
      v47 = *(float64x2_t *)((char *)v15 + 856);
      v49 = *(float64x2_t *)((char *)&v773[-35] + 8);
      v50 = *(float64x2_t *)((char *)&v773[-36] + 8);
      v51 = *(float64x2_t *)((char *)&v773[-20] + 8);
      v52 = *(float64x2_t *)((char *)&v773[-21] + 8);
      _Q1 = v773[-44];
      v54 = v773[-43];
      _Q2 = v54;
      v56 = v773[-42];
      v57 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v31, v42, v54.f64[0]), v44, v54, 1), v46, v56.f64[0]), v48, v56, 1);
      v58 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v32, v41, v54.f64[0]), v43, v54, 1), v45, v56.f64[0]), v47, v56, 1);
      v59 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v33, v42, v50.f64[0]), v44, v50, 1), v46, v49.f64[0]), v48, v49, 1);
      v60 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v34, v41, v50.f64[0]), v43, v50, 1), v45, v49.f64[0]), v47, v49, 1);
      _Q4 = v773[-29];
      v62 = v773[-28];
      _Q3 = v62;
      v64 = v773[-27];
      v65 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v37, v42, v62.f64[0]), v44, v62, 1), v46, v64.f64[0]), v48, v64, 1);
      v66 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v38, v41, v62.f64[0]), v43, v62, 1), v45, v64.f64[0]), v47, v64, 1);
      v67 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v39, v42, v52.f64[0]), v44, v52, 1), v46, v51.f64[0]), v48, v51, 1);
      v68 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v40, v41, v52.f64[0]), v43, v52, 1), v45, v51.f64[0]), v47, v51, 1);
      v70 = v15[60];
      v69 = v15[61];
      v72 = *(float64x2_t *)((char *)v15 + 1080);
      v71 = *(float64x2_t *)((char *)v15 + 1096);
      v73 = v15[76];
      v74 = v15[75];
      v75 = *(float64x2_t *)((char *)v15 + 1320);
      v76 = *(float64x2_t *)((char *)v15 + 1336);
      v77 = *(float64x2_t *)((char *)&v773[-33] + 8);
      v78 = *(float64x2_t *)((char *)&v773[-34] + 8);
      v79 = *(float64x2_t *)((char *)&v773[-18] + 8);
      v80 = *(float64x2_t *)((char *)&v773[-19] + 8);
      _Q5 = v773[-42];
      _Q7 = v773[-41];
      v83 = v773[-40];
      v84 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v57, v70, _Q7.f64[0]), v72, _Q7, 1), v74, v83.f64[0]), v75, v83, 1);
      v85 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v58, v69, _Q7.f64[0]), v71, _Q7, 1), v73, v83.f64[0]), v76, v83, 1);
      v86 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v59, v70, v78.f64[0]), v72, v78, 1), v74, v77.f64[0]), v75, v77, 1);
      v87 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v60, v69, v78.f64[0]), v71, v78, 1), v73, v77.f64[0]), v76, v77, 1);
      _Q18 = v773[-27];
      _Q6 = v773[-26];
      v90 = v773[-25];
      v91 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v65, v70, _Q6.f64[0]), v72, _Q6, 1), v74, v90.f64[0]), v75, v90, 1);
      v92 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v66, v69, _Q6.f64[0]), v71, _Q6, 1), v73, v90.f64[0]), v76, v90, 1);
      v93 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v67, v70, v80.f64[0]), v72, v80, 1), v74, v79.f64[0]), v75, v79, 1);
      v94 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v68, v69, v80.f64[0]), v71, v80, 1), v73, v79.f64[0]), v76, v79, 1);
      v95 = v15[91];
      v96 = v15[90];
      v98 = *(float64x2_t *)((char *)v15 + 1560);
      v97 = *(float64x2_t *)((char *)v15 + 1576);
      v99 = v15[106];
      v100 = v15[105];
      v69.f64[0] = v773[-38].f64[0];
      v75.f64[0] = v773[-31].f64[1];
      v101 = *(float64x2_t *)((char *)&v773[-32] + 8);
      _Q17 = v773[-40];
      v102 = v773[-39];
      v104 = vmlaq_laneq_f64(vmlaq_n_f64(v84, v96, v102.f64[0]), v98, v102, 1);
      v105 = vmlaq_laneq_f64(vmlaq_n_f64(v85, v95, v102.f64[0]), v97, v102, 1);
      v102.f64[0] = v773[-23].f64[0];
      v106 = vmlaq_n_f64(v104, v100, v69.f64[0]);
      v107 = vmlaq_n_f64(v105, v99, v69.f64[0]);
      v108 = v773[-16].f64[1];
      v109 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v86, v96, v101.f64[0]), v98, v101, 1), v100, v75.f64[0]);
      v110 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v87, v95, v101.f64[0]), v97, v101, 1), v99, v75.f64[0]);
      _Q16 = v773[-25];
      v111 = v773[-24];
      v113 = vmlaq_laneq_f64(vmlaq_n_f64(v91, v96, v111.f64[0]), v98, v111, 1);
      v114 = vmlaq_laneq_f64(vmlaq_n_f64(v92, v95, v111.f64[0]), v97, v111, 1);
      v115 = *(float64x2_t *)((char *)&v773[-17] + 8);
      *__src = v106;
      __src[1] = v107;
      *(float64x2_t *)((char *)__src + 136) = v110;
      *(float64x2_t *)((char *)__src + 120) = v109;
      __src[15] = vmlaq_n_f64(v113, v100, v102.f64[0]);
      __src[16] = vmlaq_n_f64(v114, v99, v102.f64[0]);
      *(float64x2_t *)((char *)v14 + 104) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v94, v95, v115.f64[0]), v97, v115, 1), v99, v108);
      *(float64x2_t *)((char *)v14 + 88) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v93, v96, v115.f64[0]), v98, v115, 1), v100, v108);
      v116 = v15[2];
      v117 = v15[3];
      v118 = *(float64x2_t *)((char *)v15 + 168);
      v119 = *(float64x2_t *)((char *)v15 + 152);
      v121 = v15[17];
      v120 = v15[18];
      v122 = *(float64x2_t *)((char *)v15 + 408);
      v123 = *(float64x2_t *)((char *)v15 + 392);
      v124 = v773[-44];
      v125 = *(float64x2_t *)((char *)&v773[-37] + 8);
      v126 = *(float64x2_t *)((char *)&v773[-38] + 8);
      v128 = v773[-30];
      v127 = v773[-29];
      v129 = *(float64x2_t *)((char *)&v773[-22] + 8);
      v130 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, v16->f64[0]), v119, *v16, 1), v121, v124.f64[0]), v123, v124, 1);
      v131 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v117, v16->f64[0]), v118, *v16, 1), v120, v124.f64[0]), v122, v124, 1);
      v132 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, v126.f64[0]), v119, v126, 1), v121, v125.f64[0]), v123, v125, 1);
      v133 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v117, v126.f64[0]), v118, v126, 1), v120, v125.f64[0]), v122, v125, 1);
      v134 = vmlaq_laneq_f64(vmulq_n_f64(v116, v128.f64[0]), v119, v128, 1);
      v135 = vmlaq_laneq_f64(vmulq_n_f64(v117, v128.f64[0]), v118, v128, 1);
      v136 = *(float64x2_t *)((char *)&v773[-23] + 8);
      v137 = vmlaq_laneq_f64(vmlaq_n_f64(v134, v121, v127.f64[0]), v123, v127, 1);
      v138 = vmlaq_laneq_f64(vmlaq_n_f64(v135, v120, v127.f64[0]), v122, v127, 1);
      v139 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, v136.f64[0]), v119, v136, 1), v121, v129.f64[0]), v123, v129, 1);
      v140 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v117, v136.f64[0]), v118, v136, 1), v120, v129.f64[0]), v122, v129, 1);
      v142 = v15[32];
      v141 = v15[33];
      v144 = *(float64x2_t *)((char *)v15 + 632);
      v143 = *(float64x2_t *)((char *)v15 + 648);
      v146 = v15[47];
      v145 = v15[48];
      v148 = *(float64x2_t *)((char *)v15 + 872);
      v147 = *(float64x2_t *)((char *)v15 + 888);
      v149 = v773[-43];
      v150 = vmlaq_laneq_f64(vmlaq_n_f64(v130, v142, v149.f64[0]), v144, v149, 1);
      v151 = vmlaq_laneq_f64(vmlaq_n_f64(v131, v141, v149.f64[0]), v143, v149, 1);
      v152 = v773[-42];
      v153 = vmlaq_laneq_f64(vmlaq_n_f64(v150, v146, v152.f64[0]), v148, v152, 1);
      v154 = vmlaq_laneq_f64(vmlaq_n_f64(v151, v145, v152.f64[0]), v147, v152, 1);
      v155 = *(float64x2_t *)((char *)&v773[-36] + 8);
      v156 = vmlaq_laneq_f64(vmlaq_n_f64(v132, v142, v155.f64[0]), v144, v155, 1);
      v157 = vmlaq_laneq_f64(vmlaq_n_f64(v133, v141, v155.f64[0]), v143, v155, 1);
      v158 = *(float64x2_t *)((char *)&v773[-35] + 8);
      v159 = vmlaq_laneq_f64(vmlaq_n_f64(v156, v146, v158.f64[0]), v148, v158, 1);
      v160 = vmlaq_laneq_f64(vmlaq_n_f64(v157, v145, v158.f64[0]), v147, v158, 1);
      v161 = v773[-28];
      v162 = vmlaq_laneq_f64(vmlaq_n_f64(v137, v142, v161.f64[0]), v144, v161, 1);
      v163 = vmlaq_laneq_f64(vmlaq_n_f64(v138, v141, v161.f64[0]), v143, v161, 1);
      v164 = v773[-27];
      v165 = vmlaq_laneq_f64(vmlaq_n_f64(v162, v146, v164.f64[0]), v148, v164, 1);
      v166 = vmlaq_laneq_f64(vmlaq_n_f64(v163, v145, v164.f64[0]), v147, v164, 1);
      v167 = *(float64x2_t *)((char *)&v773[-21] + 8);
      v168 = vmlaq_n_f64(v139, v142, v167.f64[0]);
      v169 = *(float64x2_t *)((char *)&v773[-20] + 8);
      v170 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v168, v144, v167, 1), v146, v169.f64[0]), v148, v169, 1);
      v171 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v140, v141, v167.f64[0]), v143, v167, 1), v145, v169.f64[0]), v147, v169, 1);
      v173 = v15[62];
      v172 = v15[63];
      v175 = *(float64x2_t *)((char *)v15 + 1112);
      v174 = *(float64x2_t *)((char *)v15 + 1128);
      v176 = v15[78];
      v177 = v15[77];
      v179 = *(float64x2_t *)((char *)v15 + 1352);
      v178 = *(float64x2_t *)((char *)v15 + 1368);
      v180 = v773[-41];
      v181 = vmlaq_laneq_f64(vmlaq_n_f64(v153, v173, v180.f64[0]), v175, v180, 1);
      v182 = vmlaq_laneq_f64(vmlaq_n_f64(v154, v172, v180.f64[0]), v174, v180, 1);
      v183 = v773[-40];
      v184 = vmlaq_laneq_f64(vmlaq_n_f64(v181, v177, v183.f64[0]), v179, v183, 1);
      v185 = vmlaq_laneq_f64(vmlaq_n_f64(v182, v176, v183.f64[0]), v178, v183, 1);
      v186 = *(float64x2_t *)((char *)&v773[-34] + 8);
      v187 = vmlaq_laneq_f64(vmlaq_n_f64(v159, v173, v186.f64[0]), v175, v186, 1);
      v188 = vmlaq_laneq_f64(vmlaq_n_f64(v160, v172, v186.f64[0]), v174, v186, 1);
      v189 = *(float64x2_t *)((char *)&v773[-33] + 8);
      v190 = vmlaq_laneq_f64(vmlaq_n_f64(v187, v177, v189.f64[0]), v179, v189, 1);
      v191 = vmlaq_laneq_f64(vmlaq_n_f64(v188, v176, v189.f64[0]), v178, v189, 1);
      v192 = v773[-26];
      v193 = vmlaq_laneq_f64(vmlaq_n_f64(v165, v173, v192.f64[0]), v175, v192, 1);
      v194 = vmlaq_laneq_f64(vmlaq_n_f64(v166, v172, v192.f64[0]), v174, v192, 1);
      v195 = v773[-25];
      v196 = vmlaq_laneq_f64(vmlaq_n_f64(v193, v177, v195.f64[0]), v179, v195, 1);
      v197 = vmlaq_laneq_f64(vmlaq_n_f64(v194, v176, v195.f64[0]), v178, v195, 1);
      v198 = *(float64x2_t *)((char *)&v773[-19] + 8);
      v199 = vmlaq_n_f64(v170, v173, v198.f64[0]);
      v200 = *(float64x2_t *)((char *)&v773[-18] + 8);
      v201 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v199, v175, v198, 1), v177, v200.f64[0]), v179, v200, 1);
      v202 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v171, v172, v198.f64[0]), v174, v198, 1), v176, v200.f64[0]), v178, v200, 1);
      v203 = v15[93];
      v204 = v15[92];
      v206 = *(float64x2_t *)((char *)v15 + 1592);
      v205 = *(float64x2_t *)((char *)v15 + 1608);
      v207 = v15[108];
      v208 = v15[107];
      v178.f64[0] = v773[-38].f64[0];
      v209 = v773[-39];
      v198.f64[0] = v773[-31].f64[1];
      v210 = vmlaq_laneq_f64(vmlaq_n_f64(v184, v204, v209.f64[0]), v206, v209, 1);
      v211 = vmlaq_laneq_f64(vmlaq_n_f64(v185, v203, v209.f64[0]), v205, v209, 1);
      v212 = *(float64x2_t *)((char *)&v773[-32] + 8);
      v213 = vmlaq_n_f64(v210, v208, v178.f64[0]);
      v214 = vmlaq_n_f64(v211, v207, v178.f64[0]);
      v178.f64[0] = v773[-23].f64[0];
      v215 = vmlaq_laneq_f64(vmlaq_n_f64(v190, v204, v212.f64[0]), v206, v212, 1);
      v216 = vmlaq_laneq_f64(vmlaq_n_f64(v191, v203, v212.f64[0]), v205, v212, 1);
      v217 = v773[-24];
      v218 = vmlaq_n_f64(v215, v208, v198.f64[0]);
      v219 = vmlaq_n_f64(v216, v207, v198.f64[0]);
      v198.f64[0] = v773[-16].f64[1];
      v220 = vmlaq_laneq_f64(vmlaq_n_f64(v196, v204, v217.f64[0]), v206, v217, 1);
      v221 = vmlaq_laneq_f64(vmlaq_n_f64(v197, v203, v217.f64[0]), v205, v217, 1);
      v222 = *(float64x2_t *)((char *)&v773[-17] + 8);
      __src[2] = v213;
      __src[3] = v214;
      *(float64x2_t *)((char *)__src + 168) = v219;
      *(float64x2_t *)((char *)__src + 152) = v218;
      *v14 = vmlaq_n_f64(v220, v208, v178.f64[0]);
      v14[1] = vmlaq_n_f64(v221, v207, v178.f64[0]);
      *(float64x2_t *)((char *)v14 + 136) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v202, v203, v222.f64[0]), v205, v222, 1), v207, v198.f64[0]);
      *(float64x2_t *)((char *)v14 + 120) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v201, v204, v222.f64[0]), v206, v222, 1), v208, v198.f64[0]);
      v223 = v15[4];
      v224 = v15[5];
      v225 = *(float64x2_t *)((char *)v15 + 200);
      v226 = *(float64x2_t *)((char *)v15 + 184);
      v228 = v15[19];
      v227 = v15[20];
      v229 = *(float64x2_t *)((char *)v15 + 440);
      v230 = *(float64x2_t *)((char *)v15 + 424);
      v231 = v773[-44];
      v232 = *(float64x2_t *)((char *)&v773[-37] + 8);
      v233 = *(float64x2_t *)((char *)&v773[-38] + 8);
      v235 = v773[-30];
      v234 = v773[-29];
      v236 = *(float64x2_t *)((char *)&v773[-22] + 8);
      v237 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v223, v16->f64[0]), v226, *v16, 1), v228, v231.f64[0]), v230, v231, 1);
      v238 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v224, v16->f64[0]), v225, *v16, 1), v227, v231.f64[0]), v229, v231, 1);
      v239 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v223, v233.f64[0]), v226, v233, 1), v228, v232.f64[0]), v230, v232, 1);
      v240 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v224, v233.f64[0]), v225, v233, 1), v227, v232.f64[0]), v229, v232, 1);
      v241 = vmlaq_laneq_f64(vmulq_n_f64(v223, v235.f64[0]), v226, v235, 1);
      v242 = vmlaq_laneq_f64(vmulq_n_f64(v224, v235.f64[0]), v225, v235, 1);
      v243 = *(float64x2_t *)((char *)&v773[-23] + 8);
      v244 = vmlaq_laneq_f64(vmlaq_n_f64(v241, v228, v234.f64[0]), v230, v234, 1);
      v245 = vmlaq_laneq_f64(vmlaq_n_f64(v242, v227, v234.f64[0]), v229, v234, 1);
      v246 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v223, v243.f64[0]), v226, v243, 1), v228, v236.f64[0]), v230, v236, 1);
      v247 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v224, v243.f64[0]), v225, v243, 1), v227, v236.f64[0]), v229, v236, 1);
      v249 = v15[34];
      v248 = v15[35];
      result = (float64x2_t *)((char *)v15 + 664);
      v251 = *(float64x2_t *)((char *)v15 + 664);
      v250 = *(float64x2_t *)((char *)v15 + 680);
      v253 = v15[49];
      v252 = v15[50];
      v255 = *(float64x2_t *)((char *)v15 + 904);
      v254 = *(float64x2_t *)((char *)v15 + 920);
      v256 = v773[-43];
      v257 = vmlaq_laneq_f64(vmlaq_n_f64(v237, v249, v256.f64[0]), v251, v256, 1);
      v258 = vmlaq_laneq_f64(vmlaq_n_f64(v238, v248, v256.f64[0]), v250, v256, 1);
      v259 = v773[-42];
      v260 = vmlaq_laneq_f64(vmlaq_n_f64(v257, v253, v259.f64[0]), v255, v259, 1);
      v261 = vmlaq_laneq_f64(vmlaq_n_f64(v258, v252, v259.f64[0]), v254, v259, 1);
      v262 = *(float64x2_t *)((char *)&v773[-36] + 8);
      v263 = vmlaq_laneq_f64(vmlaq_n_f64(v239, v249, v262.f64[0]), v251, v262, 1);
      v264 = vmlaq_laneq_f64(vmlaq_n_f64(v240, v248, v262.f64[0]), v250, v262, 1);
      v265 = *(float64x2_t *)((char *)&v773[-35] + 8);
      v266 = vmlaq_laneq_f64(vmlaq_n_f64(v263, v253, v265.f64[0]), v255, v265, 1);
      v267 = vmlaq_laneq_f64(vmlaq_n_f64(v264, v252, v265.f64[0]), v254, v265, 1);
      v268 = v773[-28];
      v269 = vmlaq_laneq_f64(vmlaq_n_f64(v244, v249, v268.f64[0]), v251, v268, 1);
      v270 = vmlaq_laneq_f64(vmlaq_n_f64(v245, v248, v268.f64[0]), v250, v268, 1);
      v271 = v773[-27];
      v272 = vmlaq_laneq_f64(vmlaq_n_f64(v269, v253, v271.f64[0]), v255, v271, 1);
      v273 = vmlaq_laneq_f64(vmlaq_n_f64(v270, v252, v271.f64[0]), v254, v271, 1);
      v274 = *(float64x2_t *)((char *)&v773[-21] + 8);
      v275 = vmlaq_n_f64(v246, v249, v274.f64[0]);
      v276 = *(float64x2_t *)((char *)&v773[-20] + 8);
      v277 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v275, v251, v274, 1), v253, v276.f64[0]), v255, v276, 1);
      v278 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v247, v248, v274.f64[0]), v250, v274, 1), v252, v276.f64[0]), v254, v276, 1);
      v279 = v15[65];
      v280 = v15[64];
      v282 = *(float64x2_t *)((char *)v15 + 1144);
      v281 = *(float64x2_t *)((char *)v15 + 1160);
      v283 = v15[80];
      v284 = v15[79];
      v286 = *(float64x2_t *)((char *)v15 + 1384);
      v285 = *(float64x2_t *)((char *)v15 + 1400);
      v287 = v773[-41];
      v288 = vmlaq_laneq_f64(vmlaq_n_f64(v260, v280, v287.f64[0]), v282, v287, 1);
      v289 = vmlaq_laneq_f64(vmlaq_n_f64(v261, v279, v287.f64[0]), v281, v287, 1);
      v290 = v773[-40];
      v291 = vmlaq_laneq_f64(vmlaq_n_f64(v288, v284, v290.f64[0]), v286, v290, 1);
      v292 = vmlaq_laneq_f64(vmlaq_n_f64(v289, v283, v290.f64[0]), v285, v290, 1);
      v293 = *(float64x2_t *)((char *)&v773[-34] + 8);
      v294 = vmlaq_laneq_f64(vmlaq_n_f64(v266, v280, v293.f64[0]), v282, v293, 1);
      v295 = vmlaq_laneq_f64(vmlaq_n_f64(v267, v279, v293.f64[0]), v281, v293, 1);
      v296 = *(float64x2_t *)((char *)&v773[-33] + 8);
      v297 = vmlaq_laneq_f64(vmlaq_n_f64(v294, v284, v296.f64[0]), v286, v296, 1);
      v298 = vmlaq_laneq_f64(vmlaq_n_f64(v295, v283, v296.f64[0]), v285, v296, 1);
      v299 = v773[-26];
      v300 = vmlaq_laneq_f64(vmlaq_n_f64(v272, v280, v299.f64[0]), v282, v299, 1);
      v301 = vmlaq_laneq_f64(vmlaq_n_f64(v273, v279, v299.f64[0]), v281, v299, 1);
      v302 = v773[-25];
      v303 = vmlaq_laneq_f64(vmlaq_n_f64(v300, v284, v302.f64[0]), v286, v302, 1);
      v304 = vmlaq_laneq_f64(vmlaq_n_f64(v301, v283, v302.f64[0]), v285, v302, 1);
      v305 = *(float64x2_t *)((char *)&v773[-19] + 8);
      v306 = vmlaq_laneq_f64(vmlaq_n_f64(v277, v280, v305.f64[0]), v282, v305, 1);
      v307 = *(float64x2_t *)((char *)&v773[-18] + 8);
      v308 = vmlaq_laneq_f64(vmlaq_n_f64(v306, v284, v307.f64[0]), v286, v307, 1);
      _Q27 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v278, v279, v305.f64[0]), v281, v305, 1), v283, v307.f64[0]), v285, v307, 1);
      v310 = v15[95];
      v311 = v15[94];
      _Q31 = *(float64x2_t *)((char *)v15 + 1624);
      v312 = *(float64x2_t *)((char *)v15 + 1640);
      v314 = v15[110];
      v315 = v15[109];
      v316 = v773[-39];
      v317 = vmlaq_laneq_f64(vmlaq_n_f64(v291, v311, v316.f64[0]), _Q31, v316, 1);
      v318 = vmlaq_laneq_f64(vmlaq_n_f64(v292, v310, v316.f64[0]), v312, v316, 1);
      v316.f64[0] = v773[-38].f64[0];
      v319 = vmlaq_n_f64(v317, v315, v316.f64[0]);
      v320 = vmlaq_n_f64(v318, v314, v316.f64[0]);
      v321 = *(float64x2_t *)((char *)&v773[-32] + 8);
      v322 = vmlaq_laneq_f64(vmlaq_n_f64(v297, v311, v321.f64[0]), _Q31, v321, 1);
      v323 = vmlaq_laneq_f64(vmlaq_n_f64(v298, v310, v321.f64[0]), v312, v321, 1);
      v321.f64[0] = v773[-31].f64[1];
      v324 = vmlaq_n_f64(v322, v315, v321.f64[0]);
      _Q22 = vmlaq_n_f64(v323, v314, v321.f64[0]);
      v326 = v773[-24];
      v327 = vmlaq_laneq_f64(vmlaq_n_f64(v303, v311, v326.f64[0]), _Q31, v326, 1);
      v328 = vmlaq_laneq_f64(vmlaq_n_f64(v304, v310, v326.f64[0]), v312, v326, 1);
      v326.f64[0] = v773[-23].f64[0];
      _Q23 = vmlaq_n_f64(v327, v315, v326.f64[0]);
      v330 = vmlaq_n_f64(v328, v314, v326.f64[0]);
      v331 = *(float64x2_t *)((char *)&v773[-17] + 8);
      v332 = vmlaq_laneq_f64(vmlaq_n_f64(v308, v311, v331.f64[0]), _Q31, v331, 1);
      v311.f64[0] = v773[-16].f64[1];
      __src[4] = v319;
      __src[5] = v320;
      *(float64x2_t *)((char *)__src + 200) = _Q22;
      *(float64x2_t *)((char *)__src + 184) = v324;
      v14[2] = _Q23;
      v14[3] = v330;
      *(float64x2_t *)((char *)v14 + 168) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q27, v310, v331.f64[0]), v312, v331, 1), v314, v311.f64[0]);
      *(float64x2_t *)((char *)v14 + 152) = vmlaq_n_f64(v332, v315, v311.f64[0]);
      _Q26 = v15[6];
      _Q27.f64[0] = v15[14].f64[1];
      v334 = *(float64x2_t *)((char *)v15 + 216);
      _Q30 = v15[21];
      _Q31.f64[0] = v15[29].f64[1];
      v336 = *(float64x2_t *)((char *)v15 + 456);
      _Q19 = *(float64x2_t *)((char *)&v773[-37] + 8);
      _Q21 = *(float64x2_t *)((char *)&v773[-38] + 8);
      v339 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q24.f64[0]), v334, _Q24, 1), _Q30, _Q1.f64[0]), v336, _Q1, 1);
      __asm
      {
        FMLA            D23, D27, V24.D[1]
        FMLA            D23, D31, V1.D[1]
      }
      v344 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q21.f64[0]), v334, _Q21, 1), _Q30, _Q19.f64[0]), v336, _Q19, 1);
      __asm
      {
        FMLA            D22, D27, V21.D[1]
        FMLA            D22, D31, V19.D[1]
        FMLA            D21, D27, V20.D[1]
      }
      _Q24 = *(float64x2_t *)((char *)&v773[-22] + 8);
      v346 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q20.f64[0]), v334, _Q20, 1), _Q30, _Q4.f64[0]), v336, _Q4, 1);
      __asm { FMLA            D21, D31, V4.D[1] }
      _Q9 = *(float64x2_t *)((char *)&v773[-23] + 8);
      v348 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q9.f64[0]), v334, _Q9, 1), _Q30, _Q24.f64[0]), v336, _Q24, 1);
      __asm
      {
        FMLA            D20, D27, V9.D[1]
        FMLA            D20, D31, V24.D[1]
      }
      v349 = v15[36];
      _Q26.f64[0] = v15[44].f64[1];
      v350 = *(float64x2_t *)((char *)v15 + 696);
      v351 = v15[51];
      _Q30.f64[0] = v15[59].f64[1];
      v352 = *(float64x2_t *)((char *)v15 + 936);
      v353 = vmlaq_laneq_f64(vmlaq_n_f64(v339, v349, _Q2.f64[0]), v350, _Q2, 1);
      __asm { FMLA            D23, D26, V2.D[1] }
      _Q2 = *(float64x2_t *)((char *)&v773[-35] + 8);
      v355 = vmlaq_laneq_f64(vmlaq_n_f64(v353, v351, _Q5.f64[0]), v352, _Q5, 1);
      __asm { FMLA            D23, D30, V5.D[1] }
      _Q5 = *(float64x2_t *)((char *)&v773[-36] + 8);
      v357 = vmlaq_laneq_f64(vmlaq_n_f64(v344, v349, _Q5.f64[0]), v350, _Q5, 1);
      __asm { FMLA            D22, D26, V5.D[1] }
      _Q5 = *(float64x2_t *)((char *)&v773[-20] + 8);
      v359 = vmlaq_laneq_f64(vmlaq_n_f64(v357, v351, _Q2.f64[0]), v352, _Q2, 1);
      __asm { FMLA            D22, D30, V2.D[1] }
      _Q2 = *(float64x2_t *)((char *)&v773[-21] + 8);
      v361 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v346, v349, _Q3.f64[0]), v350, _Q3, 1), v351, _Q18.f64[0]), v352, _Q18, 1);
      __asm
      {
        FMLA            D21, D26, V3.D[1]
        FMLA            D21, D30, V18.D[1]
      }
      v362 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v348, v349, _Q2.f64[0]), v350, _Q2, 1), v351, _Q5.f64[0]), v352, _Q5, 1);
      __asm
      {
        FMLA            D20, D26, V2.D[1]
        FMLA            D20, D30, V5.D[1]
      }
      v363 = v15[66];
      _Q5.f64[0] = v15[74].f64[1];
      v364 = *(float64x2_t *)((char *)v15 + 1176);
      v365 = v15[81];
      _Q26.f64[0] = v15[89].f64[1];
      v366 = *(float64x2_t *)((char *)v15 + 1416);
      _Q28 = *(float64x2_t *)((char *)&v773[-33] + 8);
      _Q29 = *(float64x2_t *)((char *)&v773[-34] + 8);
      _Q30 = *(float64x2_t *)((char *)&v773[-18] + 8);
      _Q31 = *(float64x2_t *)((char *)&v773[-19] + 8);
      v371 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v355, v363, _Q7.f64[0]), v364, _Q7, 1), v365, _Q17.f64[0]), v366, _Q17, 1);
      __asm
      {
        FMLA            D23, D5, V7.D[1]
        FMLA            D23, D26, V17.D[1]
      }
      v372 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v359, v363, _Q29.f64[0]), v364, _Q29, 1), v365, _Q28.f64[0]), v366, _Q28, 1);
      __asm
      {
        FMLA            D22, D5, V29.D[1]
        FMLA            D22, D26, V28.D[1]
      }
      v373 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v361, v363, _Q6.f64[0]), v364, _Q6, 1), v365, _Q16.f64[0]), v366, _Q16, 1);
      __asm
      {
        FMLA            D21, D5, V6.D[1]
        FMLA            D21, D26, V16.D[1]
      }
      v374 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v362, v363, _Q31.f64[0]), v364, _Q31, 1), v365, _Q30.f64[0]), v366, _Q30, 1);
      __asm
      {
        FMLA            D20, D5, V31.D[1]
        FMLA            D20, D26, V30.D[1]
      }
      v375 = v15[96];
      _Q5.f64[0] = v15[104].f64[1];
      v376 = *(float64x2_t *)((char *)v15 + 1656);
      _Q7.f64[0] = v15[112].f64[0];
      v377 = v15[111];
      _Q17.f64[0] = v773[-38].f64[0];
      _Q18 = v773[-39];
      _Q24.f64[0] = v773[-31].f64[1];
      _Q25 = *(float64x2_t *)((char *)&v773[-32] + 8);
      _Q26.f64[0] = v773[-23].f64[0];
      _Q27 = v773[-24];
      _Q28.f64[0] = v773[-16].f64[1];
      _Q29 = *(float64x2_t *)((char *)&v773[-17] + 8);
      __asm
      {
        FMLA            D23, D5, V18.D[1]
        FMLA            D22, D5, V25.D[1]
        FMLA            D21, D5, V27.D[1]
        FMLA            D20, D5, V29.D[1]
      }
      __src[7].f64[0] = _Q23.f64[0] + _Q7.f64[0] * _Q17.f64[0];
      __src[6] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v371, v375, _Q18.f64[0]), v376, _Q18, 1), v377, _Q17.f64[0]);
      __src[14].f64[1] = _Q22.f64[0] + _Q7.f64[0] * _Q24.f64[0];
      *(float64x2_t *)((char *)__src + 216) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v372, v375, _Q25.f64[0]), v376, _Q25, 1), v377, _Q24.f64[0]);
      v14[5].f64[0] = _Q21.f64[0] + _Q7.f64[0] * _Q26.f64[0];
      v14[4] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v373, v375, _Q27.f64[0]), v376, _Q27, 1), v377, _Q26.f64[0]);
      v14[12].f64[1] = _Q20.f64[0] + _Q7.f64[0] * _Q28.f64[0];
      *(float64x2_t *)((char *)v14 + 184) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v374, v375, _Q29.f64[0]), v376, _Q29, 1), v377, _Q28.f64[0]);
      v382 = v15[1];
      v383 = *(float64x2_t *)((char *)v15 + 136);
      v384 = *(float64x2_t *)((char *)v15 + 120);
      v386 = v15[15];
      v385 = v15[16];
      v387 = *(float64x2_t *)((char *)v15 + 376);
      v388 = *(float64x2_t *)((char *)v15 + 360);
      v389 = v773[-14];
      v390 = *(float64x2_t *)((char *)&v773[-4] + 8);
      v391 = v773[-15];
      v392 = *(float64x2_t *)((char *)&v773[-8] + 8);
      v393 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v391.f64[0]), v384, v391, 1), v386, v389.f64[0]), v388, v389, 1);
      v394 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v382, v391.f64[0]), v383, v391, 1), v385, v389.f64[0]), v387, v389, 1);
      v395 = vmlaq_laneq_f64(vmulq_n_f64(*v15, v392.f64[0]), v384, v392, 1);
      _Q20 = v392;
      v396 = *(float64x2_t *)((char *)&v773[-7] + 8);
      v398 = vmlaq_laneq_f64(vmlaq_n_f64(v395, v386, v396.f64[0]), v388, v396, 1);
      v399 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v382, v392.f64[0]), v383, v392, 1), v385, v396.f64[0]), v387, v396, 1);
      v400 = v15[30];
      v401 = v15[31];
      v403 = *(float64x2_t *)((char *)v15 + 600);
      v402 = *(float64x2_t *)((char *)v15 + 616);
      v405 = v15[45];
      v404 = v15[46];
      v407 = *(float64x2_t *)((char *)v15 + 840);
      v406 = *(float64x2_t *)((char *)v15 + 856);
      v408 = v773[-12];
      v409 = v773[-13];
      v410 = *(float64x2_t *)((char *)&v773[-6] + 8);
      v411 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v393, v400, v409.f64[0]), v403, v409, 1), v405, v408.f64[0]), v407, v408, 1);
      v412 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v394, v401, v409.f64[0]), v402, v409, 1), v404, v408.f64[0]), v406, v408, 1);
      v413 = vmlaq_laneq_f64(vmlaq_n_f64(v398, v400, v410.f64[0]), v403, v410, 1);
      _Q4 = v410;
      v415 = *(float64x2_t *)((char *)&v773[-5] + 8);
      v416 = vmlaq_laneq_f64(vmlaq_n_f64(v413, v405, v415.f64[0]), v407, v415, 1);
      v417 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v399, v401, v410.f64[0]), v402, v410, 1), v404, v415.f64[0]), v406, v415, 1);
      v418 = v15[60];
      v419 = v15[61];
      v421 = *(float64x2_t *)((char *)v15 + 1080);
      v420 = *(float64x2_t *)((char *)v15 + 1096);
      v422 = v15[76];
      v423 = v15[75];
      v425 = *(float64x2_t *)((char *)v15 + 1320);
      v424 = *(float64x2_t *)((char *)v15 + 1336);
      v426 = v773[-10];
      v427 = v773[-11];
      v428 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v411, v418, v427.f64[0]), v421, v427, 1), v423, v426.f64[0]), v425, v426, 1);
      v429 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v412, v419, v427.f64[0]), v420, v427, 1), v422, v426.f64[0]), v424, v426, 1);
      v430 = vmlaq_laneq_f64(vmlaq_n_f64(v416, v418, v390.f64[0]), v421, v390, 1);
      _Q5 = v390;
      v432 = *(float64x2_t *)((char *)&v773[-3] + 8);
      v433 = vmlaq_laneq_f64(vmlaq_n_f64(v430, v423, v432.f64[0]), v425, v432, 1);
      v434 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v417, v419, v390.f64[0]), v420, v390, 1), v422, v432.f64[0]), v424, v432, 1);
      v435 = v15[91];
      v436 = v15[90];
      v438 = *(float64x2_t *)((char *)v15 + 1560);
      v437 = *(float64x2_t *)((char *)v15 + 1576);
      v439 = v15[106];
      v440 = v15[105];
      v390.f64[0] = v773[-8].f64[0];
      v441 = v773[-9];
      v426.f64[0] = v773[-1].f64[1];
      v442 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v428, v436, v441.f64[0]), v438, v441, 1), v440, v390.f64[0]);
      v443 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v429, v435, v441.f64[0]), v437, v441, 1), v439, v390.f64[0]);
      _Q3 = *(float64x2_t *)((char *)&v773[-3] + 8);
      v445 = *(float64x2_t *)((char *)&v773[-2] + 8);
      __src[30] = v442;
      __src[31] = v443;
      *(float64x2_t *)((char *)v14 + 328) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v433, v436, v445.f64[0]), v438, v445, 1), v440, v426.f64[0]);
      *(float64x2_t *)((char *)v14 + 344) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v434, v435, v445.f64[0]), v437, v445, 1), v439, v426.f64[0]);
      v447 = v15[2];
      v446 = v15[3];
      v448 = *(float64x2_t *)((char *)v15 + 168);
      v449 = *(float64x2_t *)((char *)v15 + 152);
      v451 = v15[17];
      v450 = v15[18];
      v452 = *(float64x2_t *)((char *)v15 + 408);
      v453 = *(float64x2_t *)((char *)v15 + 392);
      v454 = v773[-14];
      v455 = v773[-15];
      v457 = *(float64x2_t *)((char *)&v773[-8] + 8);
      v456 = *(float64x2_t *)((char *)&v773[-7] + 8);
      v458 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v447, v455.f64[0]), v449, v455, 1), v451, v454.f64[0]), v453, v454, 1);
      v459 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v446, v455.f64[0]), v448, v455, 1), v450, v454.f64[0]), v452, v454, 1);
      v460 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v447, v457.f64[0]), v449, v457, 1), v451, v456.f64[0]), v453, v456, 1);
      v461 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v446, v457.f64[0]), v448, v457, 1), v450, v456.f64[0]), v452, v456, 1);
      v463 = v15[32];
      v462 = v15[33];
      v465 = *(float64x2_t *)((char *)v15 + 632);
      v464 = *(float64x2_t *)((char *)v15 + 648);
      v467 = v15[47];
      v466 = v15[48];
      v469 = *(float64x2_t *)((char *)v15 + 872);
      v468 = *(float64x2_t *)((char *)v15 + 888);
      v470 = v773[-12];
      v471 = v773[-13];
      v473 = *(float64x2_t *)((char *)&v773[-6] + 8);
      v472 = *(float64x2_t *)((char *)&v773[-5] + 8);
      v474 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v458, v463, v471.f64[0]), v465, v471, 1), v467, v470.f64[0]), v469, v470, 1);
      v475 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v459, v462, v471.f64[0]), v464, v471, 1), v466, v470.f64[0]), v468, v470, 1);
      v476 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v460, v463, v473.f64[0]), v465, v473, 1), v467, v472.f64[0]), v469, v472, 1);
      v477 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v461, v462, v473.f64[0]), v464, v473, 1), v466, v472.f64[0]), v468, v472, 1);
      v479 = v15[62];
      v478 = v15[63];
      v481 = *(float64x2_t *)((char *)v15 + 1112);
      v480 = *(float64x2_t *)((char *)v15 + 1128);
      v482 = v15[78];
      v483 = v15[77];
      v485 = *(float64x2_t *)((char *)v15 + 1352);
      v484 = *(float64x2_t *)((char *)v15 + 1368);
      v486 = v773[-10];
      v487 = v773[-11];
      v489 = *(float64x2_t *)((char *)&v773[-4] + 8);
      v488 = *(float64x2_t *)((char *)&v773[-3] + 8);
      v490 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v474, v479, v487.f64[0]), v481, v487, 1), v483, v486.f64[0]), v485, v486, 1);
      v491 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v475, v478, v487.f64[0]), v480, v487, 1), v482, v486.f64[0]), v484, v486, 1);
      v492 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v476, v479, v489.f64[0]), v481, v489, 1), v483, v488.f64[0]), v485, v488, 1);
      v493 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v477, v478, v489.f64[0]), v480, v489, 1), v482, v488.f64[0]), v484, v488, 1);
      v494 = v15[93];
      v495 = v15[92];
      v497 = *(float64x2_t *)((char *)v15 + 1592);
      v496 = *(float64x2_t *)((char *)v15 + 1608);
      v498 = v15[108];
      v499 = v15[107];
      v484.f64[0] = v773[-8].f64[0];
      v500 = v773[-9];
      v486.f64[0] = v773[-1].f64[1];
      v501 = *(float64x2_t *)((char *)&v773[-2] + 8);
      __src[32] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v490, v495, v500.f64[0]), v497, v500, 1), v499, v484.f64[0]);
      __src[33] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v491, v494, v500.f64[0]), v496, v500, 1), v498, v484.f64[0]);
      *(float64x2_t *)((char *)v14 + 360) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v492, v495, v501.f64[0]), v497, v501, 1), v499, v486.f64[0]);
      *(float64x2_t *)((char *)v14 + 376) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v493, v494, v501.f64[0]), v496, v501, 1), v498, v486.f64[0]);
      v503 = v15[4];
      v502 = v15[5];
      v504 = *(float64x2_t *)((char *)v15 + 200);
      v505 = *(float64x2_t *)((char *)v15 + 184);
      v507 = v15[19];
      v506 = v15[20];
      v508 = *(float64x2_t *)((char *)v15 + 440);
      v509 = *(float64x2_t *)((char *)v15 + 424);
      v510 = v773[-14];
      v511 = v773[-15];
      v513 = *(float64x2_t *)((char *)&v773[-8] + 8);
      v512 = *(float64x2_t *)((char *)&v773[-7] + 8);
      v514 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v503, v511.f64[0]), v505, v511, 1), v507, v510.f64[0]), v509, v510, 1);
      v515 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v502, v511.f64[0]), v504, v511, 1), v506, v510.f64[0]), v508, v510, 1);
      v516 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v503, v513.f64[0]), v505, v513, 1), v507, v512.f64[0]), v509, v512, 1);
      v517 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v502, v513.f64[0]), v504, v513, 1), v506, v512.f64[0]), v508, v512, 1);
      v519 = v15[34];
      v518 = v15[35];
      v521 = *(float64x2_t *)((char *)v15 + 664);
      v520 = *(float64x2_t *)((char *)v15 + 680);
      v523 = v15[49];
      v522 = v15[50];
      v525 = *(float64x2_t *)((char *)v15 + 904);
      v524 = *(float64x2_t *)((char *)v15 + 920);
      v526 = v773[-12];
      v527 = v773[-13];
      v529 = *(float64x2_t *)((char *)&v773[-6] + 8);
      v528 = *(float64x2_t *)((char *)&v773[-5] + 8);
      v530 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v514, v519, v527.f64[0]), v521, v527, 1), v523, v526.f64[0]), v525, v526, 1);
      v531 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v515, v518, v527.f64[0]), v520, v527, 1), v522, v526.f64[0]), v524, v526, 1);
      v532 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v516, v519, v529.f64[0]), v521, v529, 1), v523, v528.f64[0]), v525, v528, 1);
      v533 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v517, v518, v529.f64[0]), v520, v529, 1), v522, v528.f64[0]), v524, v528, 1);
      v534 = v15[65];
      v535 = v15[64];
      v537 = *(float64x2_t *)((char *)v15 + 1144);
      v536 = *(float64x2_t *)((char *)v15 + 1160);
      v538 = v15[80];
      v539 = v15[79];
      v541 = *(float64x2_t *)((char *)v15 + 1384);
      v540 = *(float64x2_t *)((char *)v15 + 1400);
      v542 = v773[-10];
      v543 = v773[-11];
      v545 = *(float64x2_t *)((char *)&v773[-4] + 8);
      v544 = *(float64x2_t *)((char *)&v773[-3] + 8);
      _Q24 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v530, v535, v543.f64[0]), v537, v543, 1), v539, v542.f64[0]), v541, v542, 1);
      v547 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v531, v534, v543.f64[0]), v536, v543, 1), v538, v542.f64[0]), v540, v542, 1);
      v548 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v532, v535, v545.f64[0]), v537, v545, 1), v539, v544.f64[0]), v541, v544, 1);
      _Q0 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v533, v534, v545.f64[0]), v536, v545, 1), v538, v544.f64[0]), v540, v544, 1);
      _Q2 = v15[95];
      v551 = v15[94];
      v553 = *(float64x2_t *)((char *)v15 + 1624);
      _Q7 = *(float64x2_t *)((char *)v15 + 1640);
      _Q17 = v15[110];
      v555 = v15[109];
      v540.f64[0] = v773[-8].f64[0];
      v556 = v773[-9];
      v542.f64[0] = v773[-1].f64[1];
      v557 = *(float64x2_t *)((char *)&v773[-2] + 8);
      __src[34] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q24, v551, v556.f64[0]), v553, v556, 1), v555, v540.f64[0]);
      __src[35] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v547, _Q2, v556.f64[0]), _Q7, v556, 1), _Q17, v540.f64[0]);
      *(float64x2_t *)((char *)v14 + 392) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v548, v551, v557.f64[0]), v553, v557, 1), v555, v542.f64[0]);
      *(float64x2_t *)((char *)v14 + 408) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q0, _Q2, v557.f64[0]), _Q7, v557, 1), _Q17, v542.f64[0]);
      v558 = v15[6];
      _Q2.f64[0] = v15[14].f64[1];
      v559 = *(float64x2_t *)((char *)v15 + 216);
      v560 = v15[21];
      _Q17.f64[0] = v15[29].f64[1];
      v561 = *(float64x2_t *)((char *)v15 + 456);
      _Q19 = v773[-14];
      _Q21 = v773[-15];
      _Q22 = *(float64x2_t *)((char *)&v773[-7] + 8);
      v565 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v558, _Q21.f64[0]), v559, _Q21, 1), v560, _Q19.f64[0]), v561, _Q19, 1);
      __asm
      {
        FMLA            D24, D2, V21.D[1]
        FMLA            D24, D17, V19.D[1]
      }
      v566 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v558, _Q20.f64[0]), v559, _Q20, 1), v560, _Q22.f64[0]), v561, _Q22, 1);
      __asm
      {
        FMLA            D0, D2, V20.D[1]
        FMLA            D0, D17, V22.D[1]
      }
      _Q6 = v15[36];
      _Q7.f64[0] = v15[44].f64[1];
      v568 = *(float64x2_t *)((char *)v15 + 696);
      _Q18 = v15[51];
      _Q19.f64[0] = v15[59].f64[1];
      v570 = *(float64x2_t *)((char *)v15 + 936);
      _Q21 = v773[-12];
      _Q22 = v773[-13];
      _Q25 = *(float64x2_t *)((char *)&v773[-5] + 8);
      v574 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v565, _Q6, _Q22.f64[0]), v568, _Q22, 1), _Q18, _Q21.f64[0]), v570, _Q21, 1);
      __asm
      {
        FMLA            D24, D7, V22.D[1]
        FMLA            D24, D19, V21.D[1]
      }
      v575 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v566, _Q6, _Q4.f64[0]), v568, _Q4, 1), _Q18, _Q25.f64[0]), v570, _Q25, 1);
      __asm
      {
        FMLA            D0, D7, V4.D[1]
        FMLA            D0, D19, V25.D[1]
      }
      _Q4 = v15[66];
      _Q6.f64[0] = v15[74].f64[1];
      v577 = *(float64x2_t *)((char *)v15 + 1176);
      v578 = v15[81];
      _Q18.f64[0] = v15[89].f64[1];
      v579 = *(float64x2_t *)((char *)v15 + 1416);
      _Q20 = v773[-10];
      _Q21 = v773[-11];
      v582 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v574, _Q4, _Q21.f64[0]), v577, _Q21, 1), v578, _Q20.f64[0]), v579, _Q20, 1);
      __asm
      {
        FMLA            D24, D6, V21.D[1]
        FMLA            D24, D18, V20.D[1]
      }
      v583 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v575, _Q4, _Q5.f64[0]), v577, _Q5, 1), v578, _Q3.f64[0]), v579, _Q3, 1);
      __asm
      {
        FMLA            D0, D6, V5.D[1]
        FMLA            D0, D18, V3.D[1]
      }
      v584 = v15[96];
      _Q4.f64[0] = v15[104].f64[1];
      v585 = *(float64x2_t *)((char *)v15 + 1656);
      _Q6.f64[0] = v15[112].f64[0];
      v586 = v15[111];
      v568.f64[0] = v773[-8].f64[0];
      _Q17 = v773[-9];
      _Q18.f64[0] = v773[-1].f64[1];
      _Q19 = *(float64x2_t *)((char *)&v773[-2] + 8);
      __asm
      {
        FMLA            D24, D4, V17.D[1]
        FMLA            D0, D4, V19.D[1]
      }
      v14[20].f64[0] = _Q24.f64[0] + _Q6.f64[0] * v568.f64[0];
      v14[19] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v582, v584, _Q17.f64[0]), v585, _Q17, 1), v586, v568.f64[0]);
      v14[27].f64[1] = _Q0.f64[0] + _Q6.f64[0] * _Q18.f64[0];
      *(float64x2_t *)((char *)v14 + 424) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v583, v584, _Q19.f64[0]), v585, _Q19, 1), v586, _Q18.f64[0]);
      break;
    case 1:
      for (i = 0; i != 720; i += 120)
      {
        v590 = *(float64x2_t *)((char *)__src + i + 32);
        v591 = *(float64x2_t *)((char *)__src + i + 48);
        v592 = *(float64x2_t *)((char *)__src + i + 64);
        v593 = *(float64x2_t *)((char *)__src + i + 80);
        v594 = *(float64x2_t *)((char *)__src + i + 96);
        a9.f64[0] = __src[7].f64[i / 8];
        a10.f64[0] = a11[8].f64[0];
        v595 = a11[3];
        v596 = a11[4];
        v597 = a11[5];
        v598 = a11[6];
        v599 = a11[7];
        v809 = vmulq_f64(a9, a10);
        v808 = vmulq_f64(v594, v599);
        v807 = vmulq_f64(v593, v598);
        v805 = vmulq_f64(v591, v596);
        v806 = vmulq_f64(v592, v597);
        v600 = vmulq_f64(v590, v595);
        v601 = *(float64x2_t *)((char *)__src + i);
        v602 = a11[1];
        v803 = vmulq_f64(*(float64x2_t *)((char *)__src + i + 16), a11[2]);
        v804 = v600;
        v802 = vmulq_f64(v601, v602);
        result = (float64x2_t *)memcpy(v810, __src, sizeof(v810));
        v603 = (float64x2_t *)((char *)v810 + i);
        v604 = v803;
        *v603 = v802;
        v603[1] = v604;
        v605 = v805;
        v603[2] = v804;
        v603[3] = v605;
        v606 = v807;
        v603[4] = v806;
        v603[5] = v606;
        v603[6] = v808;
        v603[7].f64[0] = v809.f64[0];
        v607 = v810[44];
        v608 = v810[42];
        __src[43] = v810[43];
        __src[44] = v607;
        v609 = v810[40];
        __src[41] = v810[41];
        __src[42] = v608;
        v610 = v810[38];
        __src[39] = v810[39];
        __src[40] = v609;
        v611 = v810[36];
        __src[37] = v810[37];
        __src[38] = v610;
        v612 = v810[34];
        __src[35] = v810[35];
        __src[36] = v611;
        v613 = v810[32];
        __src[33] = v810[33];
        __src[34] = v612;
        v614 = v810[30];
        __src[31] = v810[31];
        __src[32] = v613;
        v615 = v810[28];
        __src[29] = v810[29];
        __src[30] = v614;
        v616 = v810[26];
        __src[27] = v810[27];
        __src[28] = v615;
        v617 = v810[24];
        __src[25] = v810[25];
        __src[26] = v616;
        v618 = v810[22];
        __src[23] = v810[23];
        __src[24] = v617;
        v619 = v810[20];
        __src[21] = v810[21];
        __src[22] = v618;
        v620 = v810[18];
        __src[19] = v810[19];
        __src[20] = v619;
        v621 = v810[16];
        __src[17] = v810[17];
        __src[18] = v620;
        v622 = v810[14];
        __src[15] = v810[15];
        __src[16] = v621;
        v623 = v810[12];
        __src[13] = v810[13];
        __src[14] = v622;
        v624 = v810[10];
        __src[11] = v810[11];
        __src[12] = v623;
        v625 = v810[8];
        __src[9] = v810[9];
        __src[10] = v624;
        v626 = v810[6];
        __src[7] = v810[7];
        __src[8] = v625;
        v627 = v810[4];
        __src[5] = v810[5];
        __src[6] = v626;
        v628 = v810[2];
        __src[3] = v810[3];
        __src[4] = v627;
        v629 = v810[0];
        __src[1] = v810[1];
        __src[2] = v628;
        *__src = v629;
      }
      break;
    case 2:
      v630 = a11[1].f64[0];
      v632 = __src[29];
      v631 = __src[30];
      v634 = __src[27];
      v633 = __src[28];
      v636 = __src[25];
      v635 = __src[26];
      v638 = __src[23];
      v637 = __src[24];
      v640 = __src[21];
      v639 = __src[22];
      v642 = __src[19];
      v641 = __src[20];
      v644 = __src[17];
      v643 = __src[18];
      v646 = __src[15];
      v645 = __src[16];
      v648 = __src[13];
      v647 = __src[14];
      v649 = __src[11];
      v650 = __src[12];
      v651 = __src[9];
      v652 = __src[10];
      v653 = __src[7];
      v654 = __src[8];
      v655 = __src[5];
      v656 = __src[6];
      v657 = __src[3];
      v658 = __src[4];
      v659 = __src[1];
      v660 = __src[2];
      v809 = vmulq_n_f64(*__src, v630);
      v808 = vmulq_n_f64(v659, v630);
      v807 = vmulq_n_f64(v660, v630);
      v805 = vmulq_n_f64(v658, v630);
      v806 = vmulq_n_f64(v657, v630);
      v803 = vmulq_n_f64(v656, v630);
      v804 = vmulq_n_f64(v655, v630);
      v801 = vmulq_n_f64(v654, v630);
      v802 = vmulq_n_f64(v653, v630);
      v799 = vmulq_n_f64(v652, v630);
      v800 = vmulq_n_f64(v651, v630);
      v797 = vmulq_n_f64(v650, v630);
      v798 = vmulq_n_f64(v649, v630);
      v796 = vmulq_n_f64(v648, v630);
      v661 = vmulq_n_f64(__src[31], v630);
      v662 = vmulq_n_f64(__src[32], v630);
      v663 = vmulq_n_f64(__src[33], v630);
      v664 = vmulq_n_f64(__src[34], v630);
      v665 = vmulq_n_f64(__src[35], v630);
      v666 = vmulq_n_f64(__src[36], v630);
      v667 = vmulq_n_f64(__src[37], v630);
      v668 = vmulq_n_f64(__src[38], v630);
      v669 = vmulq_n_f64(__src[39], v630);
      v670 = vmulq_n_f64(__src[40], v630);
      v671 = vmulq_n_f64(__src[41], v630);
      v672 = vmulq_n_f64(__src[42], v630);
      v673 = __src[44];
      __src[43] = vmulq_n_f64(__src[43], v630);
      __src[44] = vmulq_n_f64(v673, v630);
      __src[41] = v671;
      __src[42] = v672;
      __src[39] = v669;
      __src[40] = v670;
      __src[37] = v667;
      __src[38] = v668;
      __src[35] = v665;
      __src[36] = v666;
      __src[33] = v663;
      __src[34] = v664;
      __src[31] = v661;
      __src[32] = v662;
      __src[29] = vmulq_n_f64(v632, v630);
      __src[30] = vmulq_n_f64(v631, v630);
      __src[27] = vmulq_n_f64(v634, v630);
      __src[28] = vmulq_n_f64(v633, v630);
      __src[25] = vmulq_n_f64(v636, v630);
      __src[26] = vmulq_n_f64(v635, v630);
      __src[23] = vmulq_n_f64(v638, v630);
      __src[24] = vmulq_n_f64(v637, v630);
      __src[21] = vmulq_n_f64(v640, v630);
      __src[22] = vmulq_n_f64(v639, v630);
      __src[19] = vmulq_n_f64(v642, v630);
      __src[20] = vmulq_n_f64(v641, v630);
      __src[17] = vmulq_n_f64(v644, v630);
      __src[18] = vmulq_n_f64(v643, v630);
      __src[15] = vmulq_n_f64(v646, v630);
      __src[16] = vmulq_n_f64(v645, v630);
      __src[13] = v796;
      __src[14] = vmulq_n_f64(v647, v630);
      __src[12] = v797;
      __src[11] = v798;
      __src[10] = v799;
      __src[9] = v800;
      __src[8] = v801;
      __src[7] = v802;
      __src[6] = v803;
      __src[5] = v804;
      __src[4] = v805;
      __src[3] = v806;
      __src[2] = v807;
      __src[1] = v808;
      *__src = v809;
      break;
    case 4:
      v674 = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&a11->f64[0] + 56))(v810, a11);
      MEMORY[0x24BDAC7A8](v674);
      memcpy(&v773[68], __src, 0x2D0uLL);
      v800 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[0], v773[68].f64[0]), *(float64x2_t *)((char *)&v810[7] + 8), v773[68], 1), v810[15], v773[69].f64[0]),
                                     *(float64x2_t *)((char *)&v810[22] + 8),
                                     v773[69],
                                     1),
                                   v810[30],
                                   v773[70].f64[0]),
                                 *(float64x2_t *)((char *)&v810[37] + 8),
                                 v773[70],
                                 1),
                               v811,
                               v773[71].f64[0]),
                             v818,
                             v773[71],
                             1),
                           v826,
                           v773[72].f64[0]),
                         v833,
                         v773[72],
                         1),
                       v841,
                       v773[73].f64[0]),
                     v848,
                     v773[73],
                     1),
                   v856,
                   v773[74].f64[0]),
                 v863,
                 v773[74],
                 1),
               v871,
               v773[75].f64[0]);
      v801 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[1], v773[75].f64[1]), *(float64x2_t *)((char *)&v810[8] + 8), *(float64x2_t *)((char *)&v773[75] + 8), 1), v810[16], v773[76].f64[1]),
                                     *(float64x2_t *)((char *)&v810[23] + 8),
                                     *(float64x2_t *)((char *)&v773[76] + 8),
                                     1),
                                   v810[31],
                                   v773[77].f64[1]),
                                 *(float64x2_t *)((char *)&v810[38] + 8),
                                 *(float64x2_t *)((char *)&v773[77] + 8),
                                 1),
                               v812,
                               v773[78].f64[1]),
                             v819,
                             *(float64x2_t *)((char *)&v773[78] + 8),
                             1),
                           v827,
                           v773[79].f64[1]),
                         v834,
                         *(float64x2_t *)((char *)&v773[79] + 8),
                         1),
                       v842,
                       v773[80].f64[1]),
                     v849,
                     *(float64x2_t *)((char *)&v773[80] + 8),
                     1),
                   v857,
                   v773[81].f64[1]),
                 v864,
                 *(float64x2_t *)((char *)&v773[81] + 8),
                 1),
               v872,
               v773[82].f64[1]);
      v802 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[0], v773[83].f64[0]), *(float64x2_t *)((char *)&v810[7] + 8), v773[83], 1), v810[15], v773[84].f64[0]),
                                     *(float64x2_t *)((char *)&v810[22] + 8),
                                     v773[84],
                                     1),
                                   v810[30],
                                   v773[85].f64[0]),
                                 *(float64x2_t *)((char *)&v810[37] + 8),
                                 v773[85],
                                 1),
                               v811,
                               v773[86].f64[0]),
                             v818,
                             v773[86],
                             1),
                           v826,
                           v773[87].f64[0]),
                         v833,
                         v773[87],
                         1),
                       v841,
                       v773[88].f64[0]),
                     v848,
                     v773[88],
                     1),
                   v856,
                   v773[89].f64[0]),
                 v863,
                 v773[89],
                 1),
               v871,
               v773[90].f64[0]);
      v803 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[0], v773[75].f64[1]), *(float64x2_t *)((char *)&v810[7] + 8), *(float64x2_t *)((char *)&v773[75] + 8), 1), v810[15], v773[76].f64[1]),
                                     *(float64x2_t *)((char *)&v810[22] + 8),
                                     *(float64x2_t *)((char *)&v773[76] + 8),
                                     1),
                                   v810[30],
                                   v773[77].f64[1]),
                                 *(float64x2_t *)((char *)&v810[37] + 8),
                                 *(float64x2_t *)((char *)&v773[77] + 8),
                                 1),
                               v811,
                               v773[78].f64[1]),
                             v818,
                             *(float64x2_t *)((char *)&v773[78] + 8),
                             1),
                           v826,
                           v773[79].f64[1]),
                         v833,
                         *(float64x2_t *)((char *)&v773[79] + 8),
                         1),
                       v841,
                       v773[80].f64[1]),
                     v848,
                     *(float64x2_t *)((char *)&v773[80] + 8),
                     1),
                   v856,
                   v773[81].f64[1]),
                 v863,
                 *(float64x2_t *)((char *)&v773[81] + 8),
                 1),
               v871,
               v773[82].f64[1]);
      v798 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[1], v773[68].f64[0]), *(float64x2_t *)((char *)&v810[8] + 8), v773[68], 1), v810[16], v773[69].f64[0]),
                                     *(float64x2_t *)((char *)&v810[23] + 8),
                                     v773[69],
                                     1),
                                   v810[31],
                                   v773[70].f64[0]),
                                 *(float64x2_t *)((char *)&v810[38] + 8),
                                 v773[70],
                                 1),
                               v812,
                               v773[71].f64[0]),
                             v819,
                             v773[71],
                             1),
                           v827,
                           v773[72].f64[0]),
                         v834,
                         v773[72],
                         1),
                       v842,
                       v773[73].f64[0]),
                     v849,
                     v773[73],
                     1),
                   v857,
                   v773[74].f64[0]),
                 v864,
                 v773[74],
                 1),
               v872,
               v773[75].f64[0]);
      v799 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[1], v773[83].f64[0]), *(float64x2_t *)((char *)&v810[8] + 8), v773[83], 1), v810[16], v773[84].f64[0]),
                                     *(float64x2_t *)((char *)&v810[23] + 8),
                                     v773[84],
                                     1),
                                   v810[31],
                                   v773[85].f64[0]),
                                 *(float64x2_t *)((char *)&v810[38] + 8),
                                 v773[85],
                                 1),
                               v812,
                               v773[86].f64[0]),
                             v819,
                             v773[86],
                             1),
                           v827,
                           v773[87].f64[0]),
                         v834,
                         v773[87],
                         1),
                       v842,
                       v773[88].f64[0]),
                     v849,
                     v773[88],
                     1),
                   v857,
                   v773[89].f64[0]),
                 v864,
                 v773[89],
                 1),
               v872,
               v773[90].f64[0]);
      v796 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[1], v773[90].f64[1]), *(float64x2_t *)((char *)&v810[8] + 8), *(float64x2_t *)((char *)&v773[90] + 8), 1), v810[16], v773[91].f64[1]),
                                     *(float64x2_t *)((char *)&v810[23] + 8),
                                     *(float64x2_t *)((char *)&v773[91] + 8),
                                     1),
                                   v810[31],
                                   v773[92].f64[1]),
                                 *(float64x2_t *)((char *)&v810[38] + 8),
                                 *(float64x2_t *)((char *)&v773[92] + 8),
                                 1),
                               v812,
                               v773[93].f64[1]),
                             v819,
                             *(float64x2_t *)((char *)&v773[93] + 8),
                             1),
                           v827,
                           v773[94].f64[1]),
                         v834,
                         *(float64x2_t *)((char *)&v773[94] + 8),
                         1),
                       v842,
                       v773[95].f64[1]),
                     v849,
                     *(float64x2_t *)((char *)&v773[95] + 8),
                     1),
                   v857,
                   v773[96].f64[1]),
                 v864,
                 *(float64x2_t *)((char *)&v773[96] + 8),
                 1),
               v872,
               v773[97].f64[1]);
      v797 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[0], v773[90].f64[1]), *(float64x2_t *)((char *)&v810[7] + 8), *(float64x2_t *)((char *)&v773[90] + 8), 1), v810[15], v773[91].f64[1]),
                                     *(float64x2_t *)((char *)&v810[22] + 8),
                                     *(float64x2_t *)((char *)&v773[91] + 8),
                                     1),
                                   v810[30],
                                   v773[92].f64[1]),
                                 *(float64x2_t *)((char *)&v810[37] + 8),
                                 *(float64x2_t *)((char *)&v773[92] + 8),
                                 1),
                               v811,
                               v773[93].f64[1]),
                             v818,
                             *(float64x2_t *)((char *)&v773[93] + 8),
                             1),
                           v826,
                           v773[94].f64[1]),
                         v833,
                         *(float64x2_t *)((char *)&v773[94] + 8),
                         1),
                       v841,
                       v773[95].f64[1]),
                     v848,
                     *(float64x2_t *)((char *)&v773[95] + 8),
                     1),
                   v856,
                   v773[96].f64[1]),
                 v863,
                 *(float64x2_t *)((char *)&v773[96] + 8),
                 1),
               v871,
               v773[97].f64[1]);
      v788 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[2], v773[68].f64[0]), *(float64x2_t *)((char *)&v810[9] + 8), v773[68], 1), v810[17], v773[69].f64[0]),
                                     *(float64x2_t *)((char *)&v810[24] + 8),
                                     v773[69],
                                     1),
                                   v810[32],
                                   v773[70].f64[0]),
                                 *(float64x2_t *)((char *)&v810[39] + 8),
                                 v773[70],
                                 1),
                               v813,
                               v773[71].f64[0]),
                             v820,
                             v773[71],
                             1),
                           v828,
                           v773[72].f64[0]),
                         v835,
                         v773[72],
                         1),
                       v843,
                       v773[73].f64[0]),
                     v850,
                     v773[73],
                     1),
                   v858,
                   v773[74].f64[0]),
                 v865,
                 v773[74],
                 1),
               v873,
               v773[75].f64[0]);
      v675 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[3], v773[68].f64[0]), *(float64x2_t *)((char *)&v810[10] + 8), v773[68], 1), v810[18], v773[69].f64[0]),
                                     *(float64x2_t *)((char *)&v810[25] + 8),
                                     v773[69],
                                     1),
                                   v810[33],
                                   v773[70].f64[0]),
                                 *(float64x2_t *)((char *)&v810[40] + 8),
                                 v773[70],
                                 1),
                               v814,
                               v773[71].f64[0]),
                             v821,
                             v773[71],
                             1),
                           v829,
                           v773[72].f64[0]),
                         v836,
                         v773[72],
                         1),
                       v844,
                       v773[73].f64[0]),
                     v851,
                     v773[73],
                     1),
                   v859,
                   v773[74].f64[0]),
                 v866,
                 v773[74],
                 1),
               v874,
               v773[75].f64[0]);
      v676 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[2], v773[75].f64[1]), *(float64x2_t *)((char *)&v810[9] + 8), *(float64x2_t *)((char *)&v773[75] + 8), 1), v810[17], v773[76].f64[1]),
                                     *(float64x2_t *)((char *)&v810[24] + 8),
                                     *(float64x2_t *)((char *)&v773[76] + 8),
                                     1),
                                   v810[32],
                                   v773[77].f64[1]),
                                 *(float64x2_t *)((char *)&v810[39] + 8),
                                 *(float64x2_t *)((char *)&v773[77] + 8),
                                 1),
                               v813,
                               v773[78].f64[1]),
                             v820,
                             *(float64x2_t *)((char *)&v773[78] + 8),
                             1),
                           v828,
                           v773[79].f64[1]),
                         v835,
                         *(float64x2_t *)((char *)&v773[79] + 8),
                         1),
                       v843,
                       v773[80].f64[1]),
                     v850,
                     *(float64x2_t *)((char *)&v773[80] + 8),
                     1),
                   v858,
                   v773[81].f64[1]),
                 v865,
                 *(float64x2_t *)((char *)&v773[81] + 8),
                 1),
               v873,
               v773[82].f64[1]);
      v677 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[3], v773[75].f64[1]), *(float64x2_t *)((char *)&v810[10] + 8), *(float64x2_t *)((char *)&v773[75] + 8), 1), v810[18], v773[76].f64[1]),
                                     *(float64x2_t *)((char *)&v810[25] + 8),
                                     *(float64x2_t *)((char *)&v773[76] + 8),
                                     1),
                                   v810[33],
                                   v773[77].f64[1]),
                                 *(float64x2_t *)((char *)&v810[40] + 8),
                                 *(float64x2_t *)((char *)&v773[77] + 8),
                                 1),
                               v814,
                               v773[78].f64[1]),
                             v821,
                             *(float64x2_t *)((char *)&v773[78] + 8),
                             1),
                           v829,
                           v773[79].f64[1]),
                         v836,
                         *(float64x2_t *)((char *)&v773[79] + 8),
                         1),
                       v844,
                       v773[80].f64[1]),
                     v851,
                     *(float64x2_t *)((char *)&v773[80] + 8),
                     1),
                   v859,
                   v773[81].f64[1]),
                 v866,
                 *(float64x2_t *)((char *)&v773[81] + 8),
                 1),
               v874,
               v773[82].f64[1]);
      v678 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[2], v773[83].f64[0]), *(float64x2_t *)((char *)&v810[9] + 8), v773[83], 1), v810[17], v773[84].f64[0]),
                                     *(float64x2_t *)((char *)&v810[24] + 8),
                                     v773[84],
                                     1),
                                   v810[32],
                                   v773[85].f64[0]),
                                 *(float64x2_t *)((char *)&v810[39] + 8),
                                 v773[85],
                                 1),
                               v813,
                               v773[86].f64[0]),
                             v820,
                             v773[86],
                             1),
                           v828,
                           v773[87].f64[0]),
                         v835,
                         v773[87],
                         1),
                       v843,
                       v773[88].f64[0]),
                     v850,
                     v773[88],
                     1),
                   v858,
                   v773[89].f64[0]),
                 v865,
                 v773[89],
                 1),
               v873,
               v773[90].f64[0]);
      v679 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[3], v773[83].f64[0]), *(float64x2_t *)((char *)&v810[10] + 8), v773[83], 1), v810[18], v773[84].f64[0]),
                                     *(float64x2_t *)((char *)&v810[25] + 8),
                                     v773[84],
                                     1),
                                   v810[33],
                                   v773[85].f64[0]),
                                 *(float64x2_t *)((char *)&v810[40] + 8),
                                 v773[85],
                                 1),
                               v814,
                               v773[86].f64[0]),
                             v821,
                             v773[86],
                             1),
                           v829,
                           v773[87].f64[0]),
                         v836,
                         v773[87],
                         1),
                       v844,
                       v773[88].f64[0]),
                     v851,
                     v773[88],
                     1),
                   v859,
                   v773[89].f64[0]),
                 v866,
                 v773[89],
                 1),
               v874,
               v773[90].f64[0]);
      v680 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[2], v773[90].f64[1]), *(float64x2_t *)((char *)&v810[9] + 8), *(float64x2_t *)((char *)&v773[90] + 8), 1), v810[17], v773[91].f64[1]),
                                     *(float64x2_t *)((char *)&v810[24] + 8),
                                     *(float64x2_t *)((char *)&v773[91] + 8),
                                     1),
                                   v810[32],
                                   v773[92].f64[1]),
                                 *(float64x2_t *)((char *)&v810[39] + 8),
                                 *(float64x2_t *)((char *)&v773[92] + 8),
                                 1),
                               v813,
                               v773[93].f64[1]),
                             v820,
                             *(float64x2_t *)((char *)&v773[93] + 8),
                             1),
                           v828,
                           v773[94].f64[1]),
                         v835,
                         *(float64x2_t *)((char *)&v773[94] + 8),
                         1),
                       v843,
                       v773[95].f64[1]),
                     v850,
                     *(float64x2_t *)((char *)&v773[95] + 8),
                     1),
                   v858,
                   v773[96].f64[1]),
                 v865,
                 *(float64x2_t *)((char *)&v773[96] + 8),
                 1),
               v873,
               v773[97].f64[1]);
      v681 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[3], v773[90].f64[1]), *(float64x2_t *)((char *)&v810[10] + 8), *(float64x2_t *)((char *)&v773[90] + 8), 1), v810[18], v773[91].f64[1]),
                                     *(float64x2_t *)((char *)&v810[25] + 8),
                                     *(float64x2_t *)((char *)&v773[91] + 8),
                                     1),
                                   v810[33],
                                   v773[92].f64[1]),
                                 *(float64x2_t *)((char *)&v810[40] + 8),
                                 *(float64x2_t *)((char *)&v773[92] + 8),
                                 1),
                               v814,
                               v773[93].f64[1]),
                             v821,
                             *(float64x2_t *)((char *)&v773[93] + 8),
                             1),
                           v829,
                           v773[94].f64[1]),
                         v836,
                         *(float64x2_t *)((char *)&v773[94] + 8),
                         1),
                       v844,
                       v773[95].f64[1]),
                     v851,
                     *(float64x2_t *)((char *)&v773[95] + 8),
                     1),
                   v859,
                   v773[96].f64[1]),
                 v866,
                 *(float64x2_t *)((char *)&v773[96] + 8),
                 1),
               v874,
               v773[97].f64[1]);
      v786 = v810[5];
      v787 = v810[4];
      v785 = v810[19];
      result = (float64x2_t *)&v810[41].f64[1];
      v783 = v810[34];
      v784 = v810[35];
      v782 = *(float64x2_t *)((char *)&v810[41] + 8);
      v780 = v822;
      v781 = v815;
      v779 = v837;
      v777 = v852;
      v778 = v845;
      v776 = v867;
      v682 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[4], v773[68].f64[0]), *(float64x2_t *)((char *)&v810[11] + 8), v773[68], 1), v810[19], v773[69].f64[0]),
                                     *(float64x2_t *)((char *)&v810[26] + 8),
                                     v773[69],
                                     1),
                                   v810[34],
                                   v773[70].f64[0]),
                                 *(float64x2_t *)((char *)&v810[41] + 8),
                                 v773[70],
                                 1),
                               v815,
                               v773[71].f64[0]),
                             v822,
                             v773[71],
                             1),
                           v830,
                           v773[72].f64[0]),
                         v837,
                         v773[72],
                         1),
                       v845,
                       v773[73].f64[0]),
                     v852,
                     v773[73],
                     1),
                   v860,
                   v773[74].f64[0]),
                 v867,
                 v773[74],
                 1),
               v875,
               v773[75].f64[0]);
      v683 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[5], v773[68].f64[0]), *(float64x2_t *)((char *)&v810[12] + 8), v773[68], 1), v810[20], v773[69].f64[0]),
                                     *(float64x2_t *)((char *)&v810[27] + 8),
                                     v773[69],
                                     1),
                                   v810[35],
                                   v773[70].f64[0]),
                                 *(float64x2_t *)((char *)&v810[42] + 8),
                                 v773[70],
                                 1),
                               v816,
                               v773[71].f64[0]),
                             v823,
                             v773[71],
                             1),
                           v831,
                           v773[72].f64[0]),
                         v838,
                         v773[72],
                         1),
                       v846,
                       v773[73].f64[0]),
                     v853,
                     v773[73],
                     1),
                   v861,
                   v773[74].f64[0]),
                 v868,
                 v773[74],
                 1),
               v876,
               v773[75].f64[0]);
      v684 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[4], v773[75].f64[1]), *(float64x2_t *)((char *)&v810[11] + 8), *(float64x2_t *)((char *)&v773[75] + 8), 1), v810[19], v773[76].f64[1]),
                                     *(float64x2_t *)((char *)&v810[26] + 8),
                                     *(float64x2_t *)((char *)&v773[76] + 8),
                                     1),
                                   v810[34],
                                   v773[77].f64[1]),
                                 *(float64x2_t *)((char *)&v810[41] + 8),
                                 *(float64x2_t *)((char *)&v773[77] + 8),
                                 1),
                               v815,
                               v773[78].f64[1]),
                             v822,
                             *(float64x2_t *)((char *)&v773[78] + 8),
                             1),
                           v830,
                           v773[79].f64[1]),
                         v837,
                         *(float64x2_t *)((char *)&v773[79] + 8),
                         1),
                       v845,
                       v773[80].f64[1]),
                     v852,
                     *(float64x2_t *)((char *)&v773[80] + 8),
                     1),
                   v860,
                   v773[81].f64[1]),
                 v867,
                 *(float64x2_t *)((char *)&v773[81] + 8),
                 1),
               v875,
               v773[82].f64[1]);
      v685 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[5], v773[75].f64[1]), *(float64x2_t *)((char *)&v810[12] + 8), *(float64x2_t *)((char *)&v773[75] + 8), 1), v810[20], v773[76].f64[1]),
                                     *(float64x2_t *)((char *)&v810[27] + 8),
                                     *(float64x2_t *)((char *)&v773[76] + 8),
                                     1),
                                   v810[35],
                                   v773[77].f64[1]),
                                 *(float64x2_t *)((char *)&v810[42] + 8),
                                 *(float64x2_t *)((char *)&v773[77] + 8),
                                 1),
                               v816,
                               v773[78].f64[1]),
                             v823,
                             *(float64x2_t *)((char *)&v773[78] + 8),
                             1),
                           v831,
                           v773[79].f64[1]),
                         v838,
                         *(float64x2_t *)((char *)&v773[79] + 8),
                         1),
                       v846,
                       v773[80].f64[1]),
                     v853,
                     *(float64x2_t *)((char *)&v773[80] + 8),
                     1),
                   v861,
                   v773[81].f64[1]),
                 v868,
                 *(float64x2_t *)((char *)&v773[81] + 8),
                 1),
               v876,
               v773[82].f64[1]);
      v686 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[4], v773[83].f64[0]), *(float64x2_t *)((char *)&v810[11] + 8), v773[83], 1), v810[19], v773[84].f64[0]),
                                     *(float64x2_t *)((char *)&v810[26] + 8),
                                     v773[84],
                                     1),
                                   v810[34],
                                   v773[85].f64[0]),
                                 *(float64x2_t *)((char *)&v810[41] + 8),
                                 v773[85],
                                 1),
                               v815,
                               v773[86].f64[0]),
                             v822,
                             v773[86],
                             1),
                           v830,
                           v773[87].f64[0]),
                         v837,
                         v773[87],
                         1),
                       v845,
                       v773[88].f64[0]),
                     v852,
                     v773[88],
                     1),
                   v860,
                   v773[89].f64[0]),
                 v867,
                 v773[89],
                 1),
               v875,
               v773[90].f64[0]);
      v687 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[5], v773[83].f64[0]), *(float64x2_t *)((char *)&v810[12] + 8), v773[83], 1), v810[20], v773[84].f64[0]),
                                     *(float64x2_t *)((char *)&v810[27] + 8),
                                     v773[84],
                                     1),
                                   v810[35],
                                   v773[85].f64[0]),
                                 *(float64x2_t *)((char *)&v810[42] + 8),
                                 v773[85],
                                 1),
                               v816,
                               v773[86].f64[0]),
                             v823,
                             v773[86],
                             1),
                           v831,
                           v773[87].f64[0]),
                         v838,
                         v773[87],
                         1),
                       v846,
                       v773[88].f64[0]),
                     v853,
                     v773[88],
                     1),
                   v861,
                   v773[89].f64[0]),
                 v868,
                 v773[89],
                 1),
               v876,
               v773[90].f64[0]);
      v688 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[4], v773[90].f64[1]), *(float64x2_t *)((char *)&v810[11] + 8), *(float64x2_t *)((char *)&v773[90] + 8), 1), v810[19], v773[91].f64[1]),
                                     *(float64x2_t *)((char *)&v810[26] + 8),
                                     *(float64x2_t *)((char *)&v773[91] + 8),
                                     1),
                                   v810[34],
                                   v773[92].f64[1]),
                                 *(float64x2_t *)((char *)&v810[41] + 8),
                                 *(float64x2_t *)((char *)&v773[92] + 8),
                                 1),
                               v815,
                               v773[93].f64[1]),
                             v822,
                             *(float64x2_t *)((char *)&v773[93] + 8),
                             1),
                           v830,
                           v773[94].f64[1]),
                         v837,
                         *(float64x2_t *)((char *)&v773[94] + 8),
                         1),
                       v845,
                       v773[95].f64[1]),
                     v852,
                     *(float64x2_t *)((char *)&v773[95] + 8),
                     1),
                   v860,
                   v773[96].f64[1]),
                 v867,
                 *(float64x2_t *)((char *)&v773[96] + 8),
                 1),
               v875,
               v773[97].f64[1]);
      v689 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[5], v773[90].f64[1]), *(float64x2_t *)((char *)&v810[12] + 8), *(float64x2_t *)((char *)&v773[90] + 8), 1), v810[20], v773[91].f64[1]),
                                     *(float64x2_t *)((char *)&v810[27] + 8),
                                     *(float64x2_t *)((char *)&v773[91] + 8),
                                     1),
                                   v810[35],
                                   v773[92].f64[1]),
                                 *(float64x2_t *)((char *)&v810[42] + 8),
                                 *(float64x2_t *)((char *)&v773[92] + 8),
                                 1),
                               v816,
                               v773[93].f64[1]),
                             v823,
                             *(float64x2_t *)((char *)&v773[93] + 8),
                             1),
                           v831,
                           v773[94].f64[1]),
                         v838,
                         *(float64x2_t *)((char *)&v773[94] + 8),
                         1),
                       v846,
                       v773[95].f64[1]),
                     v853,
                     *(float64x2_t *)((char *)&v773[95] + 8),
                     1),
                   v861,
                   v773[96].f64[1]),
                 v868,
                 *(float64x2_t *)((char *)&v773[96] + 8),
                 1),
               v876,
               v773[97].f64[1]);
      v775 = v810[6];
      _V4.D[1] = v773[83].f64[1];
      _V1.D[1] = v773[68].f64[1];
      _D5 = v810[14].f64[1];
      v774 = v810[14].f64[1];
      __asm { FMLA            D2, D5, V1.D[1] }
      _V1.D[1] = v773[76].f64[0];
      __asm
      {
        FMLA            D3, D5, V1.D[1]
        FMLA            D1, D5, V4.D[1]
      }
      _V4.D[1] = v773[91].f64[0];
      __asm { FMLA            D0, D5, V4.D[1] }
      v795 = v810[20];
      _V4.D[1] = v773[69].f64[1];
      _D5 = v810[29].f64[1];
      __asm { FMLA            D2, D5, V4.D[1] }
      _V4.D[1] = v773[77].f64[0];
      __asm { FMLA            D3, D5, V4.D[1] }
      _V4.D[1] = v773[84].f64[1];
      __asm { FMLA            D1, D5, V4.D[1] }
      _V4.D[1] = v773[92].f64[0];
      __asm { FMLA            D0, D5, V4.D[1] }
      _V18.D[1] = v773[70].f64[1];
      _D7 = v810[44].f64[1];
      __asm { FMLA            D2, D7, V18.D[1] }
      _V18.D[1] = v773[78].f64[0];
      __asm { FMLA            D3, D7, V18.D[1] }
      _V18.D[1] = v773[85].f64[1];
      __asm { FMLA            D1, D7, V18.D[1] }
      _V18.D[1] = v773[93].f64[0];
      __asm { FMLA            D0, D7, V18.D[1] }
      v794 = v816;
      _V18.D[1] = v773[71].f64[1];
      _D7 = v825;
      __asm { FMLA            D2, D7, V18.D[1] }
      _V18.D[1] = v773[79].f64[0];
      __asm { FMLA            D3, D7, V18.D[1] }
      _V18.D[1] = v773[86].f64[1];
      __asm { FMLA            D1, D7, V18.D[1] }
      _V18.D[1] = v773[94].f64[0];
      __asm { FMLA            D0, D7, V18.D[1] }
      _V18.D[1] = v773[72].f64[1];
      _D7 = v840;
      __asm { FMLA            D2, D7, V18.D[1] }
      _V18.D[1] = v773[80].f64[0];
      __asm { FMLA            D3, D7, V18.D[1] }
      _V18.D[1] = v773[87].f64[1];
      __asm { FMLA            D1, D7, V18.D[1] }
      _V18.D[1] = v773[95].f64[0];
      __asm { FMLA            D0, D7, V18.D[1] }
      v793 = v846;
      _V18.D[1] = v773[73].f64[1];
      _D7 = v855;
      __asm { FMLA            D2, D7, V18.D[1] }
      _V18.D[1] = v773[81].f64[0];
      __asm { FMLA            D3, D7, V18.D[1] }
      _V18.D[1] = v773[88].f64[1];
      __asm { FMLA            D1, D7, V18.D[1] }
      _V18.D[1] = v773[96].f64[0];
      __asm { FMLA            D0, D7, V18.D[1] }
      _V5.D[1] = v773[74].f64[1];
      _D18 = v870;
      __asm { FMLA            D2, D18, V5.D[1] }
      _V5.D[1] = v773[82].f64[0];
      __asm { FMLA            D3, D18, V5.D[1] }
      _V5.D[1] = v773[89].f64[1];
      __asm { FMLA            D1, D18, V5.D[1] }
      _V5.D[1] = v773[97].f64[0];
      __asm { FMLA            D0, D18, V5.D[1] }
      _Q20 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[6], v773[68].f64[0]), *(float64x2_t *)((char *)&v810[13] + 8), v773[68], 1), v810[21], v773[69].f64[0]),
                                     *(float64x2_t *)((char *)&v810[28] + 8),
                                     v773[69],
                                     1),
                                   v810[36],
                                   v773[70].f64[0]),
                                 *(float64x2_t *)((char *)&v810[43] + 8),
                                 v773[70],
                                 1),
                               v817,
                               v773[71].f64[0]),
                             v824,
                             v773[71],
                             1),
                           v832,
                           v773[72].f64[0]),
                         v839,
                         v773[72],
                         1),
                       v847,
                       v773[73].f64[0]),
                     v854,
                     v773[73],
                     1),
                   v862,
                   v773[74].f64[0]),
                 v869,
                 v773[74],
                 1),
               v877,
               v773[75].f64[0]);
      v792 = _D2 + v878 * v773[75].f64[0];
      _Q19 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[6], v773[75].f64[1]), *(float64x2_t *)((char *)&v810[13] + 8), *(float64x2_t *)((char *)&v773[75] + 8), 1), v810[21], v773[76].f64[1]),
                                     *(float64x2_t *)((char *)&v810[28] + 8),
                                     *(float64x2_t *)((char *)&v773[76] + 8),
                                     1),
                                   v810[36],
                                   v773[77].f64[1]),
                                 *(float64x2_t *)((char *)&v810[43] + 8),
                                 *(float64x2_t *)((char *)&v773[77] + 8),
                                 1),
                               v817,
                               v773[78].f64[1]),
                             v824,
                             *(float64x2_t *)((char *)&v773[78] + 8),
                             1),
                           v832,
                           v773[79].f64[1]),
                         v839,
                         *(float64x2_t *)((char *)&v773[79] + 8),
                         1),
                       v847,
                       v773[80].f64[1]),
                     v854,
                     *(float64x2_t *)((char *)&v773[80] + 8),
                     1),
                   v862,
                   v773[81].f64[1]),
                 v869,
                 *(float64x2_t *)((char *)&v773[81] + 8),
                 1),
               v877,
               v773[82].f64[1]);
      v791 = _D3 + v878 * v773[82].f64[1];
      _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[6], v773[83].f64[0]), *(float64x2_t *)((char *)&v810[13] + 8), v773[83], 1), v810[21], v773[84].f64[0]),
                                     *(float64x2_t *)((char *)&v810[28] + 8),
                                     v773[84],
                                     1),
                                   v810[36],
                                   v773[85].f64[0]),
                                 *(float64x2_t *)((char *)&v810[43] + 8),
                                 v773[85],
                                 1),
                               v817,
                               v773[86].f64[0]),
                             v824,
                             v773[86],
                             1),
                           v832,
                           v773[87].f64[0]),
                         v839,
                         v773[87],
                         1),
                       v847,
                       v773[88].f64[0]),
                     v854,
                     v773[88],
                     1),
                   v862,
                   v773[89].f64[0]),
                 v869,
                 v773[89],
                 1),
               v877,
               v773[90].f64[0]);
      v790 = _D1 + v878 * v773[90].f64[0];
      v756 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[6], v773[90].f64[1]), *(float64x2_t *)((char *)&v810[13] + 8), *(float64x2_t *)((char *)&v773[90] + 8), 1), v810[21], v773[91].f64[1]),
                                     *(float64x2_t *)((char *)&v810[28] + 8),
                                     *(float64x2_t *)((char *)&v773[91] + 8),
                                     1),
                                   v810[36],
                                   v773[92].f64[1]),
                                 *(float64x2_t *)((char *)&v810[43] + 8),
                                 *(float64x2_t *)((char *)&v773[92] + 8),
                                 1),
                               v817,
                               v773[93].f64[1]),
                             v824,
                             *(float64x2_t *)((char *)&v773[93] + 8),
                             1),
                           v832,
                           v773[94].f64[1]),
                         v839,
                         *(float64x2_t *)((char *)&v773[94] + 8),
                         1),
                       v847,
                       v773[95].f64[1]),
                     v854,
                     *(float64x2_t *)((char *)&v773[95] + 8),
                     1),
                   v862,
                   v773[96].f64[1]),
                 v869,
                 *(float64x2_t *)((char *)&v773[96] + 8),
                 1),
               v877,
               v773[97].f64[1]);
      v789 = _D0 + v878 * v773[97].f64[1];
      v808 = *(float64x2_t *)((char *)&v773[105] + 8);
      v809 = *(float64x2_t *)((char *)&v773[107] + 8);
      v807 = *(float64x2_t *)((char *)&v773[109] + 8);
      v806 = *(float64x2_t *)((char *)&v773[110] + 8);
      _Q7 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[0], v773[98].f64[0]), *(float64x2_t *)((char *)&v810[7] + 8), v773[98], 1), v810[15], v773[99].f64[0]),
                                    *(float64x2_t *)((char *)&v810[22] + 8),
                                    v773[99],
                                    1),
                                  v810[30],
                                  v773[100].f64[0]),
                                *(float64x2_t *)((char *)&v810[37] + 8),
                                v773[100],
                                1),
                              v811,
                              v773[101].f64[0]),
                            v818,
                            v773[101],
                            1),
                          v826,
                          v773[102].f64[0]),
                        v833,
                        v773[102],
                        1),
                      v841,
                      v773[103].f64[0]),
                    v848,
                    v773[103],
                    1),
                  v856,
                  v773[104].f64[0]),
                v863,
                v773[104],
                1),
              v871,
              v773[105].f64[0]);
      _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[1], v773[98].f64[0]), *(float64x2_t *)((char *)&v810[8] + 8), v773[98], 1), v810[16], v773[99].f64[0]),
                                    *(float64x2_t *)((char *)&v810[23] + 8),
                                    v773[99],
                                    1),
                                  v810[31],
                                  v773[100].f64[0]),
                                *(float64x2_t *)((char *)&v810[38] + 8),
                                v773[100],
                                1),
                              v812,
                              v773[101].f64[0]),
                            v819,
                            v773[101],
                            1),
                          v827,
                          v773[102].f64[0]),
                        v834,
                        v773[102],
                        1),
                      v842,
                      v773[103].f64[0]),
                    v849,
                    v773[103],
                    1),
                  v857,
                  v773[104].f64[0]),
                v864,
                v773[104],
                1),
              v872,
              v773[105].f64[0]);
      _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[0], v773[105].f64[1]), *(float64x2_t *)((char *)&v810[7] + 8), *(float64x2_t *)((char *)&v773[105] + 8), 1), v810[15], v773[106].f64[1]),
                                    *(float64x2_t *)((char *)&v810[22] + 8),
                                    *(float64x2_t *)((char *)&v773[106] + 8),
                                    1),
                                  v810[30],
                                  v773[107].f64[1]),
                                *(float64x2_t *)((char *)&v810[37] + 8),
                                *(float64x2_t *)((char *)&v773[107] + 8),
                                1),
                              v811,
                              v773[108].f64[1]),
                            v818,
                            *(float64x2_t *)((char *)&v773[108] + 8),
                            1),
                          v826,
                          v773[109].f64[1]),
                        v833,
                        *(float64x2_t *)((char *)&v773[109] + 8),
                        1),
                      v841,
                      v773[110].f64[1]),
                    v848,
                    *(float64x2_t *)((char *)&v773[110] + 8),
                    1),
                  v856,
                  v773[111].f64[1]),
                v863,
                *(float64x2_t *)((char *)&v773[111] + 8),
                1),
              v871,
              v773[112].f64[1]);
      v760 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[1], v773[105].f64[1]), *(float64x2_t *)((char *)&v810[8] + 8), *(float64x2_t *)((char *)&v773[105] + 8), 1), v810[16], v773[106].f64[1]),
                                     *(float64x2_t *)((char *)&v810[23] + 8),
                                     *(float64x2_t *)((char *)&v773[106] + 8),
                                     1),
                                   v810[31],
                                   v773[107].f64[1]),
                                 *(float64x2_t *)((char *)&v810[38] + 8),
                                 *(float64x2_t *)((char *)&v773[107] + 8),
                                 1),
                               v812,
                               v773[108].f64[1]),
                             v819,
                             *(float64x2_t *)((char *)&v773[108] + 8),
                             1),
                           v827,
                           v773[109].f64[1]),
                         v834,
                         *(float64x2_t *)((char *)&v773[109] + 8),
                         1),
                       v842,
                       v773[110].f64[1]),
                     v849,
                     *(float64x2_t *)((char *)&v773[110] + 8),
                     1),
                   v857,
                   v773[111].f64[1]),
                 v864,
                 *(float64x2_t *)((char *)&v773[111] + 8),
                 1),
               v872,
               v773[112].f64[1]);
      v761 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[2], v773[98].f64[0]), *(float64x2_t *)((char *)&v810[9] + 8), v773[98], 1), v810[17], v773[99].f64[0]),
                                     *(float64x2_t *)((char *)&v810[24] + 8),
                                     v773[99],
                                     1),
                                   v810[32],
                                   v773[100].f64[0]),
                                 *(float64x2_t *)((char *)&v810[39] + 8),
                                 v773[100],
                                 1),
                               v813,
                               v773[101].f64[0]),
                             v820,
                             v773[101],
                             1),
                           v828,
                           v773[102].f64[0]),
                         v835,
                         v773[102],
                         1),
                       v843,
                       v773[103].f64[0]),
                     v850,
                     v773[103],
                     1),
                   v858,
                   v773[104].f64[0]),
                 v865,
                 v773[104],
                 1),
               v873,
               v773[105].f64[0]);
      _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[3], v773[98].f64[0]), *(float64x2_t *)((char *)&v810[10] + 8), v773[98], 1), v810[18], v773[99].f64[0]),
                                     *(float64x2_t *)((char *)&v810[25] + 8),
                                     v773[99],
                                     1),
                                   v810[33],
                                   v773[100].f64[0]),
                                 *(float64x2_t *)((char *)&v810[40] + 8),
                                 v773[100],
                                 1),
                               v814,
                               v773[101].f64[0]),
                             v821,
                             v773[101],
                             1),
                           v829,
                           v773[102].f64[0]),
                         v836,
                         v773[102],
                         1),
                       v844,
                       v773[103].f64[0]),
                     v851,
                     v773[103],
                     1),
                   v859,
                   v773[104].f64[0]),
                 v866,
                 v773[104],
                 1),
               v874,
               v773[105].f64[0]);
      _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[2], v773[105].f64[1]), *(float64x2_t *)((char *)&v810[9] + 8), *(float64x2_t *)((char *)&v773[105] + 8), 1), v810[17], v773[106].f64[1]),
                                    *(float64x2_t *)((char *)&v810[24] + 8),
                                    *(float64x2_t *)((char *)&v773[106] + 8),
                                    1),
                                  v810[32],
                                  v773[107].f64[1]),
                                *(float64x2_t *)((char *)&v810[39] + 8),
                                *(float64x2_t *)((char *)&v773[107] + 8),
                                1),
                              v813,
                              v773[108].f64[1]),
                            v820,
                            *(float64x2_t *)((char *)&v773[108] + 8),
                            1),
                          v828,
                          v773[109].f64[1]),
                        v835,
                        *(float64x2_t *)((char *)&v773[109] + 8),
                        1),
                      v843,
                      v773[110].f64[1]),
                    v850,
                    *(float64x2_t *)((char *)&v773[110] + 8),
                    1),
                  v858,
                  v773[111].f64[1]),
                v865,
                *(float64x2_t *)((char *)&v773[111] + 8),
                1),
              v873,
              v773[112].f64[1]);
      _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[3], v773[105].f64[1]), *(float64x2_t *)((char *)&v810[10] + 8), *(float64x2_t *)((char *)&v773[105] + 8), 1), v810[18], v773[106].f64[1]),
                                     *(float64x2_t *)((char *)&v810[25] + 8),
                                     *(float64x2_t *)((char *)&v773[106] + 8),
                                     1),
                                   v810[33],
                                   v773[107].f64[1]),
                                 *(float64x2_t *)((char *)&v810[40] + 8),
                                 *(float64x2_t *)((char *)&v773[107] + 8),
                                 1),
                               v814,
                               v773[108].f64[1]),
                             v821,
                             *(float64x2_t *)((char *)&v773[108] + 8),
                             1),
                           v829,
                           v773[109].f64[1]),
                         v836,
                         *(float64x2_t *)((char *)&v773[109] + 8),
                         1),
                       v844,
                       v773[110].f64[1]),
                     v851,
                     *(float64x2_t *)((char *)&v773[110] + 8),
                     1),
                   v859,
                   v773[111].f64[1]),
                 v866,
                 *(float64x2_t *)((char *)&v773[111] + 8),
                 1),
               v874,
               v773[112].f64[1]);
      v765 = v798;
      *__src = v800;
      __src[1] = v765;
      *(float64x2_t *)((char *)__src + 136) = v801;
      *(float64x2_t *)((char *)__src + 120) = v803;
      v766 = v799;
      __src[15] = v802;
      __src[16] = v766;
      *(float64x2_t *)((char *)v14 + 104) = v796;
      *(float64x2_t *)((char *)v14 + 88) = v797;
      __src[2] = v788;
      __src[3] = v675;
      *(float64x2_t *)((char *)__src + 168) = v677;
      *(float64x2_t *)((char *)__src + 152) = v676;
      *v14 = v678;
      v14[1] = v679;
      *(float64x2_t *)((char *)v14 + 136) = v681;
      *(float64x2_t *)((char *)v14 + 120) = v680;
      __src[4] = v682;
      __src[5] = v683;
      *(float64x2_t *)((char *)__src + 200) = v685;
      *(float64x2_t *)((char *)__src + 184) = v684;
      v14[2] = v686;
      v14[3] = v687;
      *(float64x2_t *)((char *)v14 + 168) = v689;
      *(float64x2_t *)((char *)v14 + 152) = v688;
      __src[6] = _Q20;
      __src[7].f64[0] = v792;
      *(float64x2_t *)((char *)__src + 216) = _Q19;
      __src[14].f64[1] = v791;
      v14[4] = _Q17;
      v14[5].f64[0] = v790;
      *(float64x2_t *)((char *)v14 + 184) = v756;
      v14[12].f64[1] = v789;
      __src[30] = _Q7;
      __src[31] = _Q2;
      *(float64x2_t *)((char *)v14 + 328) = _Q3;
      *(float64x2_t *)((char *)v14 + 344) = v760;
      __src[32] = v761;
      __src[33] = _Q18;
      *(float64x2_t *)((char *)v14 + 360) = _Q0;
      *(float64x2_t *)((char *)v14 + 376) = _Q21;
      v767 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v786, v773[98].f64[0]), *(float64x2_t *)((char *)&v810[12] + 8), v773[98], 1), v795, v773[99].f64[0]),
                                     *(float64x2_t *)((char *)&v810[27] + 8),
                                     v773[99],
                                     1),
                                   v784,
                                   v773[100].f64[0]),
                                 *(float64x2_t *)((char *)&v810[42] + 8),
                                 v773[100],
                                 1),
                               v794,
                               v773[101].f64[0]),
                             v823,
                             v773[101],
                             1),
                           v831,
                           v773[102].f64[0]),
                         v838,
                         v773[102],
                         1),
                       v793,
                       v773[103].f64[0]),
                     v853,
                     v773[103],
                     1),
                   v861,
                   v773[104].f64[0]),
                 v868,
                 v773[104],
                 1),
               v876,
               v773[105].f64[0]);
      _Q5 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v787, v773[105].f64[1]), *(float64x2_t *)((char *)&v810[11] + 8), *(float64x2_t *)((char *)&v773[105] + 8), 1), v785, v773[106].f64[1]),
                                    *(float64x2_t *)((char *)&v810[26] + 8),
                                    *(float64x2_t *)((char *)&v773[106] + 8),
                                    1),
                                  v783,
                                  v773[107].f64[1]),
                                v782,
                                *(float64x2_t *)((char *)&v773[107] + 8),
                                1),
                              v781,
                              v773[108].f64[1]),
                            v780,
                            *(float64x2_t *)((char *)&v773[108] + 8),
                            1),
                          v830,
                          v773[109].f64[1]),
                        v779,
                        *(float64x2_t *)((char *)&v773[109] + 8),
                        1),
                      v778,
                      v773[110].f64[1]),
                    v777,
                    *(float64x2_t *)((char *)&v773[110] + 8),
                    1),
                  v860,
                  v773[111].f64[1]),
                v776,
                *(float64x2_t *)((char *)&v773[111] + 8),
                1),
              v875,
              v773[112].f64[1]);
      _Q6 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v786, v773[105].f64[1]), *(float64x2_t *)((char *)&v810[12] + 8), *(float64x2_t *)((char *)&v773[105] + 8), 1), v795, v773[106].f64[1]),
                                    *(float64x2_t *)((char *)&v810[27] + 8),
                                    *(float64x2_t *)((char *)&v773[106] + 8),
                                    1),
                                  v784,
                                  v773[107].f64[1]),
                                *(float64x2_t *)((char *)&v810[42] + 8),
                                *(float64x2_t *)((char *)&v773[107] + 8),
                                1),
                              v794,
                              v773[108].f64[1]),
                            v823,
                            *(float64x2_t *)((char *)&v773[108] + 8),
                            1),
                          v831,
                          v773[109].f64[1]),
                        v838,
                        *(float64x2_t *)((char *)&v773[109] + 8),
                        1),
                      v793,
                      v773[110].f64[1]),
                    v853,
                    *(float64x2_t *)((char *)&v773[110] + 8),
                    1),
                  v861,
                  v773[111].f64[1]),
                v868,
                *(float64x2_t *)((char *)&v773[111] + 8),
                1),
              v876,
              v773[112].f64[1]);
      __src[34] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v787, v773[98].f64[0]), *(float64x2_t *)((char *)&v810[11] + 8), v773[98], 1), v785, v773[99].f64[0]),
                                          *(float64x2_t *)((char *)&v810[26] + 8),
                                          v773[99],
                                          1),
                                        v783,
                                        v773[100].f64[0]),
                                      v782,
                                      v773[100],
                                      1),
                                    v781,
                                    v773[101].f64[0]),
                                  v780,
                                  v773[101],
                                  1),
                                v830,
                                v773[102].f64[0]),
                              v779,
                              v773[102],
                              1),
                            v778,
                            v773[103].f64[0]),
                          v777,
                          v773[103],
                          1),
                        v860,
                        v773[104].f64[0]),
                      v776,
                      v773[104],
                      1),
                    v875,
                    v773[105].f64[0]);
      __src[35] = v767;
      *(float64x2_t *)((char *)v14 + 392) = _Q5;
      *(float64x2_t *)((char *)v14 + 408) = _Q6;
      _Q3.f64[0] = v810[29].f64[1];
      _Q5.f64[1] = v773[99].f64[1];
      _Q6.f64[1] = v773[98].f64[1];
      _Q7.f64[1] = v773[107].f64[0];
      _Q20.f64[0] = v774;
      __asm
      {
        FMLA            D17, D20, V6.D[1]
        FMLA            D17, D3, V5.D[1]
      }
      _Q6.f64[1] = v808.f64[1];
      __asm
      {
        FMLA            D0, D20, V6.D[1]
        FMLA            D0, D3, V7.D[1]
      }
      _Q3.f64[0] = v810[44].f64[1];
      _Q18.f64[0] = v825;
      _Q20.f64[1] = v773[101].f64[1];
      _Q21.f64[1] = v773[100].f64[1];
      _V22.D[1] = v773[109].f64[0];
      __asm
      {
        FMLA            D17, D3, V21.D[1]
        FMLA            D17, D18, V20.D[1]
      }
      _Q20.f64[1] = v809.f64[1];
      __asm
      {
        FMLA            D0, D3, V20.D[1]
        FMLA            D0, D18, V22.D[1]
      }
      _Q3.f64[0] = v840;
      _Q18.f64[0] = v855;
      _Q20.f64[1] = v773[103].f64[1];
      _Q21.f64[1] = v773[102].f64[1];
      __asm
      {
        FMLA            D17, D3, V21.D[1]
        FMLA            D17, D18, V20.D[1]
      }
      _Q20.f64[1] = v807.f64[1];
      _Q2.f64[1] = v806.f64[1];
      __asm
      {
        FMLA            D0, D3, V20.D[1]
        FMLA            D0, D18, V2.D[1]
      }
      _Q3.f64[0] = v870;
      _Q6.f64[0] = v878;
      v771 = v877;
      _Q18.f64[0] = v773[105].f64[0];
      _Q19.f64[1] = v773[104].f64[1];
      _Q20.f64[0] = v773[112].f64[1];
      _Q21.f64[1] = v773[112].f64[0];
      __asm { FMLA            D17, D3, V19.D[1] }
      v772 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v775, v808.f64[0]), *(float64x2_t *)((char *)&v810[13] + 8), v808, 1), v810[21], v773[106].f64[1]), *(float64x2_t *)((char *)&v810[28] + 8),
                                   *(float64x2_t *)((char *)&v773[106] + 8),
                                   1),
                                 v810[36],
                                 v809.f64[0]),
                               *(float64x2_t *)((char *)&v810[43] + 8),
                               v809,
                               1),
                             v817,
                             v773[108].f64[1]),
                           v824,
                           *(float64x2_t *)((char *)&v773[108] + 8),
                           1),
                         v832,
                         v807.f64[0]),
                       v839,
                       v807,
                       1),
                     v847,
                     v806.f64[0]),
                   v854,
                   v806,
                   1),
                 v862,
                 v773[111].f64[1]),
               v869,
               *(float64x2_t *)((char *)&v773[111] + 8),
               1);
      v14[19] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v775, v773[98].f64[0]), *(float64x2_t *)((char *)&v810[13] + 8), v773[98], 1), v810[21], v773[99].f64[0]),
                                        *(float64x2_t *)((char *)&v810[28] + 8),
                                        v773[99],
                                        1),
                                      v810[36],
                                      v773[100].f64[0]),
                                    *(float64x2_t *)((char *)&v810[43] + 8),
                                    v773[100],
                                    1),
                                  v817,
                                  v773[101].f64[0]),
                                v824,
                                v773[101],
                                1),
                              v832,
                              v773[102].f64[0]),
                            v839,
                            v773[102],
                            1),
                          v847,
                          v773[103].f64[0]),
                        v854,
                        v773[103],
                        1),
                      v862,
                      v773[104].f64[0]),
                    v869,
                    v773[104],
                    1),
                  v877,
                  v773[105].f64[0]);
      v14[20].f64[0] = _Q17.f64[0] + _Q6.f64[0] * _Q18.f64[0];
      *(float64x2_t *)((char *)v14 + 424) = vmlaq_n_f64(v772, v771, _Q20.f64[0]);
      __asm { FMLA            D0, D3, V21.D[1] }
      v14[27].f64[1] = _Q0.f64[0] + _Q6.f64[0] * _Q20.f64[0];
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_20F579B34(uint64_t a1, uint64_t a2, float64x2_t *a3, double a4, double a5, double a6, int64x2_t a7, double a8, int64x2_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  float64x2_t *v17;
  int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  double v28;
  double v29;
  double v30;
  float64x2_t v31;
  float64x2_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  float64x2_t v48;
  __int128 v49;
  __int128 v52;
  __int128 v56;
  float64x2_t v71;

  v12 = a1 + 5168;
  v13 = a1 + 5016;
  v14 = sub_20F579CE4(a1, (_QWORD *)(a1 + 5016), a1 + 5168, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  *(_BYTE *)(v12 + 128) = v14;
  v15 = 0.0;
  if ((_DWORD)v14)
  {
    v16 = *(_QWORD *)(a1 + 5304);
    if (v16)
    {
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v16 + 24))(v16, v12, 0.0);
      v17 = *(float64x2_t **)(a1 + 5304);
      v18 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v17->f64[0] + 16))(v17);
      sub_20F585344(&v71, v13, a3, v19, v20, v21, v22, v23, v24, v25, v17, v18);
      sub_20F580FCC(&v71, v26, v27, v28, v29, v30, v31, v32, v13, a3, v17, v18);
      sub_20F57E2F4(v71.f64, v33, v34, v35, v36, v37, v38, v39, v40, v13, (uint64_t)a3, v17, v18);
      sub_20F579F98(&v71, v41, v42, v43, v44, v45, v46, v47, v48, v13, (uint64_t)a3, v17, v18);
    }
    *(_QWORD *)(a1 + 5160) = *(_QWORD *)(v12 + 112);
    v49 = *(_OWORD *)(v12 + 16);
    _Q2 = *(_OWORD *)v12;
    _V4.D[1] = *((_QWORD *)&v49 + 1);
    *(_OWORD *)(a1 + 5048) = *(_OWORD *)v12;
    *(_OWORD *)(a1 + 5064) = v49;
    _Q1 = *(_OWORD *)(v12 + 32);
    v52 = *(_OWORD *)(v12 + 48);
    _V7.D[1] = *((_QWORD *)&v52 + 1);
    *(_OWORD *)(a1 + 5080) = _Q1;
    *(_OWORD *)(a1 + 5096) = v52;
    _Q3 = *(_OWORD *)(v12 + 80);
    *(_OWORD *)(a1 + 5144) = *(_OWORD *)(v12 + 96);
    _Q5 = *(_OWORD *)(v12 + 64);
    v56 = *(_OWORD *)(v12 + 80);
    *(_OWORD *)(a1 + 5112) = _Q5;
    *(_OWORD *)(a1 + 5128) = v56;
    _D17 = *((_QWORD *)&_Q2 + 1);
    __asm { FMLA            D16, D17, V2.D[1] }
    *(_QWORD *)&_Q2 = _V4.D[1];
    __asm { FMLA            D16, D2, V4.D[1] }
    *(_QWORD *)&_Q2 = *((_QWORD *)&_Q1 + 1);
    __asm { FMLA            D16, D2, V1.D[1] }
    *(_QWORD *)&_Q1 = _V7.D[1];
    __asm { FMLA            D16, D1, V7.D[1] }
    *(_QWORD *)&_Q1 = *((_QWORD *)&_Q5 + 1);
    __asm { FMLA            D16, D1, V5.D[1] }
    *(_QWORD *)&_Q1 = *((_QWORD *)&_Q3 + 1);
    __asm { FMLA            D16, D1, V3.D[1] }
    *(_QWORD *)&_Q1 = *(_QWORD *)(v12 + 104);
    __asm { FMLA            D16, D1, V6.D[1] }
    v15 = *(double *)(a2 + 8) * (_D16 + *(double *)(v12 + 112) * *(double *)(v12 + 112));
  }
  *(double *)(a1 + 5288) = v15;
  return v14;
}

uint64_t sub_20F579CE4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, int64x2_t a8, double a9, int64x2_t _Q5)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float64x2_t *v16;
  uint64_t v17;
  float64x2_t *v18;
  int64x2_t v19;
  float64x2_t v20;
  float64x2_t v23;
  int8x16_t v24;
  float64x2_t v25;
  double v26;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v43;
  float64x2_t v44;
  int64x2_t v47;
  int64x2_t v48;
  double v49;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  int8x16_t v55;
  float64x2_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _OWORD v61[7];
  float64_t v62;
  uint64_t v63;
  _OWORD v64[7];
  uint64_t v65;
  uint64_t v66;
  _OWORD v67[7];
  uint64_t v68;
  float64x2_t *v69;
  int v70;
  float64x2_t *v71;
  int v72;
  float64x2_t *v73;
  int v74;
  float64x2_t *v75;
  int v76;
  float64x2_t *v77;
  int v78;
  float64x2_t *v79;
  int v80;

  v11 = *a2;
  v12 = a2[1];
  v13 = a2[2];
  v14 = a2[3];
  if (*(_BYTE *)(*a2 + 20))
    v15 = a4;
  else
    v15 = 0;
  if (*(_BYTE *)(v12 + 20))
    v16 = (float64x2_t *)(a4 + 720);
  else
    v16 = 0;
  if (*(_BYTE *)(v13 + 20))
    v17 = a4 + 1800;
  else
    v17 = 0;
  if (*(_BYTE *)(v14 + 20))
    v18 = (float64x2_t *)(a4 + 2520);
  else
    v18 = 0;
  v79 = (float64x2_t *)(v12 + 56);
  v80 = 3;
  v77 = (float64x2_t *)(v12 + 80);
  v78 = 6;
  v75 = (float64x2_t *)(v14 + 56);
  v76 = 3;
  v73 = (float64x2_t *)(v14 + 80);
  v74 = 6;
  v71 = (float64x2_t *)(v12 + 32);
  v72 = 0;
  v69 = (float64x2_t *)(v14 + 32);
  v70 = 0;
  a8.i64[0] = *(_QWORD *)(v11 + 48);
  v19 = *(int64x2_t *)(v11 + 32);
  _Q5.i64[0] = *(_QWORD *)(v11 + 72);
  v20 = *(float64x2_t *)(v11 + 56);
  _D1 = *(double *)(v11 + 96);
  _Q7 = *(float64x2_t *)(v11 + 80);
  v23 = (float64x2_t)vzip2q_s64(v19, (int64x2_t)v20);
  v24 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q7, 1);
  v25 = (float64x2_t)vzip1q_s64(a8, _Q5);
  v26 = *(double *)(v11 + 120);
  _Q16 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v19, (int64x2_t)v20), *(double *)(v11 + 104)), v23, *(float64x2_t *)(v11 + 104), 1), v25, v26);
  _D21 = *(_QWORD *)(v11 + 112);
  __asm { FMLA            D22, D21, V7.D[1] }
  _D21 = *(_QWORD *)(v11 + 88);
  _D20 = _D22 + _D1 * v26;
  _Q18 = (float64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v23.f64[0], 0), (int8x16_t)vdupq_laneq_s64((int64x2_t)v23, 1), 8uLL);
  v37 = (float64x2_t)vzip1q_s64(v19, (int64x2_t)_Q18);
  v38 = (float64x2_t)vzip1q_s64((int64x2_t)v37, (int64x2_t)v20);
  v20.f64[1] = _Q18.f64[1];
  v39.f64[0] = *(float64_t *)(v11 + 80);
  *(_QWORD *)&v39.f64[1] = v24.i64[0];
  _Q4 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v37, vnegq_f64(_Q16).f64[0]), v20, _Q16, 1), v39, _D20, 0);
  __asm
  {
    FMLS            D3, D5, V16.D[1]
    FMLS            D3, D1, V20.D[0]
  }
  v43 = vnegq_f64(_Q4);
  v44 = (float64x2_t)vextq_s8((int8x16_t)_Q18, v24, 8uLL);
  _Q16 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v38, v43.f64[0]), _Q18, _Q4, 1), v25, _D3, 0);
  _Q5 = vmulq_f64(_Q7, v43);
  __asm
  {
    FMLS            D5, D21, V4.D[1]
    FMLS            D5, D1, V3.D[0]
  }
  v23.f64[1] = v44.f64[0];
  v64[5] = *(unint64_t *)&_D1;
  v64[4] = v25;
  v64[3] = *(unint64_t *)&v44.f64[1];
  v64[2] = v23;
  v64[1] = *(unint64_t *)&v39.f64[0];
  v64[0] = v38;
  v64[6] = vnegq_f64(_Q16);
  v65 = *(_OWORD *)&vnegq_f64(_Q5);
  v66 = 0x3FF0000000000000;
  v23.f64[0] = *(float64_t *)(v13 + 48);
  v47 = *(int64x2_t *)(v13 + 32);
  v48 = *(int64x2_t *)(v13 + 56);
  v49 = *(double *)(v13 + 96);
  _Q4 = *(int64x2_t *)(v13 + 80);
  v51 = (float64x2_t)vzip1q_s64(v47, v48);
  v52 = (float64x2_t)vzip2q_s64(v47, v48);
  v23.f64[1] = *(float64_t *)(v13 + 72);
  v44.f64[0] = *(float64_t *)(v13 + 120);
  v53 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v51, *(double *)(v13 + 104)), v52, *(float64x2_t *)(v13 + 104), 1), v23, v44.f64[0]);
  _Q16.f64[0] = *(float64_t *)(v13 + 112);
  __asm { FMLA            D18, D16, V4.D[1] }
  v44.f64[0] = _Q18.f64[0] + v49 * v44.f64[0];
  v54 = vnegq_f64(v53);
  v53.f64[0] = *(float64_t *)(v13 + 80);
  v55 = vextq_s8((int8x16_t)v52, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
  *(_QWORD *)&v52.f64[1] = v55.i64[0];
  v56 = vnegq_f64(v44);
  v61[4] = v23;
  v61[5] = *(unint64_t *)&v49;
  v61[0] = v51;
  v61[1] = *(unint64_t *)&v53.f64[0];
  v61[2] = v52;
  v61[3] = v55.u64[1];
  v61[6] = v54;
  v62 = v56.f64[0];
  v63 = 0x3FF0000000000000;
  sub_20F4D7C54(a1 + 1832, (uint64_t)v64, (uint64_t)v61, &v71, &v69, &v79, &v75, &v77, (uint64_t)v67, v23, v56, (__n128)v55.u64[1], &v73, v15, v16, v17, v18);
  v57 = v67[5];
  *(_OWORD *)(a3 + 64) = v67[4];
  *(_OWORD *)(a3 + 80) = v57;
  *(_OWORD *)(a3 + 96) = v67[6];
  *(_QWORD *)(a3 + 112) = v68;
  v58 = v67[1];
  *(_OWORD *)a3 = v67[0];
  *(_OWORD *)(a3 + 16) = v58;
  v59 = v67[3];
  *(_OWORD *)(a3 + 32) = v67[2];
  *(_OWORD *)(a3 + 48) = v59;
  return 1;
}

_BYTE *sub_20F579F98(_BYTE *result, float64x2_t a2, float64x2_t a3, double a4, double a5, double a6, double a7, double a8, float64x2_t a9, uint64_t a10, uint64_t a11, float64x2_t *a12, int a13)
{
  float64x2_t v13;
  float64x2_t *v16;
  float64x2_t *v17;
  float64x2_t *v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v56;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v64;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v84;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v274;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v294;
  float64x2_t v296;
  float64x2_t v301;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v389;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v664;
  float64x2_t v667;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t *v676;
  float64x2_t *v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t *v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t *v686;
  float64x2_t v687;
  float64x2_t v689;
  float64x2_t v691;
  float64x2_t *v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v697;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v713;
  float64x2_t v714;
  float64x2_t v715;
  float64x2_t v716;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v727;
  float64x2_t v733;
  uint64_t i;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t *v748;
  float64x2_t v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v810;
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814;
  float64x2_t v815;
  float64x2_t v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  float64x2_t v824;
  float64x2_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t v835;
  float64x2_t v836;
  float64x2_t v837;
  float64x2_t v838;
  float64x2_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  float64x2_t v851;
  float64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  float64x2_t v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  _QWORD *v863;
  float64x2_t v930;
  float64x2_t v931;
  float64x2_t v932;
  float64x2_t v935;
  float64x2_t v937;
  float64x2_t v939;
  float64x2_t v940;
  float64x2_t v941;
  float64x2_t v942;
  float64x2_t v943;
  float64x2_t v945;
  float64x2_t v946;
  float64x2_t v947;
  float64x2_t v1009;
  float64x2_t v1010;
  float64x2_t v1011;
  float64x2_t v1012;
  float64x2_t v1013;
  float64x2_t v1014;
  float64x2_t v1015;
  float64x2_t v1016;
  float64x2_t v1017;
  float64x2_t v1018;
  float64_t v1019;
  float64x2_t v1020;
  float64x2_t v1021;
  float64x2_t v1022;
  float64x2_t v1023;
  float64x2_t v1024;
  float64x2_t v1025;
  float64x2_t v1026;
  float64x2_t v1027;
  float64x2_t v1029;
  float64x2_t v1033;
  float64x2_t v1034;
  float64x2_t v1035;
  float64x2_t v1036;
  float64x2_t v1037;
  float64x2_t v1038;
  float64x2_t v1039;
  float64x2_t v1040;
  float64x2_t v1041;
  float64x2_t v1042;
  float64x2_t v1043;
  float64x2_t v1044;
  float64x2_t v1045;
  float64x2_t v1046;
  float64x2_t v1047;
  float64x2_t v1048;
  float64x2_t v1049;
  float64x2_t v1050;
  float64x2_t v1052;
  float64x2_t v1056[136];
  float64x2_t v1057;
  double v1058;
  double v1059;
  double v1060;
  float64x2_t v1061;
  float64x2_t v1062;
  float64x2_t v1063;
  double v1064;
  float64x2_t v1065;
  float64x2_t v1066;
  double v1067;
  double v1068;
  double v1069;
  double v1070;
  float64x2_t v1071;
  float64x2_t v1072;
  float64x2_t v1073;
  float64x2_t v1074;
  float64x2_t v1075;
  float64x2_t v1076;
  float64x2_t v1077;
  float64x2_t v1078;
  float64x2_t v1079;
  float64x2_t v1080;
  float64x2_t v1081;
  float64x2_t v1082;
  float64x2_t v1083;
  float64x2_t v1084;
  float64x2_t v1085;
  float64x2_t v1086;
  float64x2_t v1087;
  float64x2_t v1088;
  float64x2_t v1089;
  float64x2_t v1090;
  float64x2_t v1091;
  float64x2_t v1092;
  float64x2_t v1093;
  float64x2_t v1094;
  float64x2_t v1095;
  float64x2_t v1096;
  float64x2_t v1097;
  float64x2_t v1098;
  float64x2_t v1099;
  float64x2_t v1100;
  float64x2_t v1101;
  float64x2_t v1102;
  float64x2_t v1103;
  float64x2_t v1104;
  float64x2_t v1105;
  float64x2_t v1106;
  float64x2_t v1107;
  float64x2_t v1108;
  float64x2_t v1109;
  float64x2_t v1110;
  float64x2_t v1111;
  float64x2_t v1112;
  float64x2_t v1113;
  float64x2_t v1114;
  float64x2_t v1115;
  float64x2_t v1116;
  float64x2_t v1117;
  float64x2_t v1118;
  float64x2_t v1119;
  float64x2_t v1120;
  float64x2_t v1121;
  float64x2_t v1122;
  float64x2_t v1123;
  float64x2_t v1124;
  float64x2_t v1125;
  float64x2_t v1126;
  float64x2_t v1127;
  float64x2_t v1128;
  float64x2_t v1129;
  float64x2_t v1130;
  float64x2_t v1131;
  _BYTE v1132[1080];
  float64x2_t v1133;
  float64x2_t v1134;
  float64x2_t v1135;
  float64x2_t v1136;
  float64x2_t v1137;
  float64x2_t v1138;
  float64x2_t v1139;
  float64_t v1140;
  float64x2_t v1141;
  float64x2_t v1142;
  float64x2_t v1143;
  float64x2_t v1144;
  float64x2_t v1145;
  float64x2_t v1146;
  float64x2_t v1147;
  float64x2_t v1148;
  float64x2_t v1149;
  float64x2_t v1150;
  float64x2_t v1151;
  float64x2_t v1152;
  float64x2_t v1153;
  float64x2_t v1154;
  float64_t v1155;
  float64x2_t v1156;
  float64x2_t v1157;
  float64x2_t v1158;
  float64x2_t v1159;
  float64x2_t v1160;
  float64x2_t v1161;
  float64x2_t v1162;
  float64x2_t v1163;
  float64x2_t v1164;
  float64x2_t v1165;
  float64x2_t v1166;
  float64x2_t v1167;
  float64x2_t v1168;
  float64x2_t v1169;
  float64_t v1170;
  float64x2_t v1171;
  float64x2_t v1172;
  float64x2_t v1173;
  float64x2_t v1174;
  float64x2_t v1175;
  float64x2_t v1176;
  float64x2_t v1177;
  float64_t v1178;
  uint64_t v1179;
  float64_t *v1180;

  v1179 = *MEMORY[0x24BDAC8D0];
  v16 = (float64x2_t *)(a11 + 2520);
  switch(a13)
  {
    case 0:
      v17 = a12 + 1;
      if (a11 + 3600 > (unint64_t)&a12[1] && (float64x2_t *)&a12[113].f64[1] > v16)
      {
        MEMORY[0x24BDAC7A8](result);
        result = memcpy(v1056, v17, 0x708uLL);
        v17 = v1056;
      }
      MEMORY[0x24BDAC7A8](result);
      v18 = &v1056[-68];
      memcpy(&v1056[-68], v16, 0x438uLL);
      v19 = v17[1];
      v20 = *(float64x2_t *)((char *)v17 + 136);
      v21 = *(float64x2_t *)((char *)v17 + 120);
      v23 = v17[15];
      v22 = v17[16];
      v24 = *(float64x2_t *)((char *)v17 + 376);
      v25 = *(float64x2_t *)((char *)v17 + 360);
      v26 = v1056[-67];
      v27 = *(float64x2_t *)((char *)&v1056[-60] + 8);
      v28 = *(float64x2_t *)((char *)&v1056[-61] + 8);
      v29 = v1056[-53];
      v30 = *(float64x2_t *)((char *)&v1056[-45] + 8);
      v31 = *(float64x2_t *)((char *)&v1056[-46] + 8);
      _Q24 = v1056[-68];
      v33 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v18->f64[0]), v21, *v18, 1), v23, v26.f64[0]), v25, v26, 1);
      v34 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v18->f64[0]), v20, *v18, 1), v22, v26.f64[0]), v24, v26, 1);
      v35 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v28.f64[0]), v21, v28, 1), v23, v27.f64[0]), v25, v27, 1);
      v36 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v28.f64[0]), v20, v28, 1), v22, v27.f64[0]), v24, v27, 1);
      _Q20 = v29;
      v38 = v1056[-52];
      v39 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v29.f64[0]), v21, v29, 1), v23, v38.f64[0]), v25, v38, 1);
      v40 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v29.f64[0]), v20, v29, 1), v22, v38.f64[0]), v24, v38, 1);
      v41 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v31.f64[0]), v21, v31, 1), v23, v30.f64[0]), v25, v30, 1);
      v42 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v31.f64[0]), v20, v31, 1), v22, v30.f64[0]), v24, v30, 1);
      v44 = v17[30];
      v43 = v17[31];
      v46 = *(float64x2_t *)((char *)v17 + 600);
      v45 = *(float64x2_t *)((char *)v17 + 616);
      v48 = v17[45];
      v47 = v17[46];
      v50 = *(float64x2_t *)((char *)v17 + 840);
      v49 = *(float64x2_t *)((char *)v17 + 856);
      v51 = *(float64x2_t *)((char *)&v1056[-58] + 8);
      v52 = *(float64x2_t *)((char *)&v1056[-59] + 8);
      v53 = *(float64x2_t *)((char *)&v1056[-43] + 8);
      v54 = *(float64x2_t *)((char *)&v1056[-44] + 8);
      _Q1 = v1056[-67];
      v56 = v1056[-66];
      _Q2 = v56;
      v58 = v1056[-65];
      v59 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v33, v44, v56.f64[0]), v46, v56, 1), v48, v58.f64[0]), v50, v58, 1);
      v60 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v34, v43, v56.f64[0]), v45, v56, 1), v47, v58.f64[0]), v49, v58, 1);
      v61 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v35, v44, v52.f64[0]), v46, v52, 1), v48, v51.f64[0]), v50, v51, 1);
      v62 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v36, v43, v52.f64[0]), v45, v52, 1), v47, v51.f64[0]), v49, v51, 1);
      _Q4 = v1056[-52];
      v64 = v1056[-51];
      _Q3 = v64;
      v66 = v1056[-50];
      v67 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v39, v44, v64.f64[0]), v46, v64, 1), v48, v66.f64[0]), v50, v66, 1);
      v68 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v40, v43, v64.f64[0]), v45, v64, 1), v47, v66.f64[0]), v49, v66, 1);
      v69 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v41, v44, v54.f64[0]), v46, v54, 1), v48, v53.f64[0]), v50, v53, 1);
      v70 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v42, v43, v54.f64[0]), v45, v54, 1), v47, v53.f64[0]), v49, v53, 1);
      v72 = v17[60];
      v71 = v17[61];
      v74 = *(float64x2_t *)((char *)v17 + 1080);
      v73 = *(float64x2_t *)((char *)v17 + 1096);
      v75 = v17[76];
      v76 = v17[75];
      v77 = *(float64x2_t *)((char *)v17 + 1320);
      v78 = *(float64x2_t *)((char *)v17 + 1336);
      v79 = *(float64x2_t *)((char *)&v1056[-56] + 8);
      v80 = *(float64x2_t *)((char *)&v1056[-57] + 8);
      v81 = *(float64x2_t *)((char *)&v1056[-41] + 8);
      v82 = *(float64x2_t *)((char *)&v1056[-42] + 8);
      _Q5 = v1056[-65];
      v84 = v1056[-64];
      _Q7 = v84;
      v86 = v1056[-63];
      v87 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v59, v72, v84.f64[0]), v74, v84, 1), v76, v86.f64[0]), v77, v86, 1);
      v88 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v60, v71, v84.f64[0]), v73, v84, 1), v75, v86.f64[0]), v78, v86, 1);
      v89 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v61, v72, v80.f64[0]), v74, v80, 1), v76, v79.f64[0]), v77, v79, 1);
      v90 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v62, v71, v80.f64[0]), v73, v80, 1), v75, v79.f64[0]), v78, v79, 1);
      _Q18 = v1056[-50];
      v91 = v1056[-49];
      _Q6 = v91;
      v94 = v1056[-48];
      v95 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v67, v72, v91.f64[0]), v74, v91, 1), v76, v94.f64[0]), v77, v94, 1);
      v96 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v68, v71, v91.f64[0]), v73, v91, 1), v75, v94.f64[0]), v78, v94, 1);
      v97 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v69, v72, v82.f64[0]), v74, v82, 1), v76, v81.f64[0]), v77, v81, 1);
      v98 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v70, v71, v82.f64[0]), v73, v82, 1), v75, v81.f64[0]), v78, v81, 1);
      v99 = v17[91];
      v100 = v17[90];
      v102 = *(float64x2_t *)((char *)v17 + 1560);
      v101 = *(float64x2_t *)((char *)v17 + 1576);
      v103 = v17[106];
      v104 = v17[105];
      v71.f64[0] = v1056[-61].f64[0];
      v77.f64[0] = v1056[-54].f64[1];
      v105 = *(float64x2_t *)((char *)&v1056[-55] + 8);
      v91.f64[0] = v1056[-46].f64[0];
      v94.f64[0] = v1056[-39].f64[1];
      v106 = *(float64x2_t *)((char *)&v1056[-40] + 8);
      _Q17 = v1056[-63];
      v107 = v1056[-62];
      v109 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v87, v100, v107.f64[0]), v102, v107, 1), v104, v71.f64[0]);
      v110 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v88, v99, v107.f64[0]), v101, v107, 1), v103, v71.f64[0]);
      v111 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v89, v100, v105.f64[0]), v102, v105, 1), v104, v77.f64[0]);
      v112 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v90, v99, v105.f64[0]), v101, v105, 1), v103, v77.f64[0]);
      _Q16 = v1056[-48];
      v113 = v1056[-47];
      *v16 = v109;
      v16[1] = v110;
      *(float64x2_t *)((char *)v16 + 136) = v112;
      *(float64x2_t *)((char *)v16 + 120) = v111;
      v16[15] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v95, v100, v113.f64[0]), v102, v113, 1), v104, v91.f64[0]);
      v16[16] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v96, v99, v113.f64[0]), v101, v113, 1), v103, v91.f64[0]);
      *(float64x2_t *)(a11 + 2896) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v98, v99, v106.f64[0]), v101, v106, 1), v103, v94.f64[0]);
      *(float64x2_t *)(a11 + 2880) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v97, v100, v106.f64[0]), v102, v106, 1), v104, v94.f64[0]);
      v115 = v17[2];
      v116 = v17[3];
      v117 = *(float64x2_t *)((char *)v17 + 168);
      v118 = *(float64x2_t *)((char *)v17 + 152);
      v120 = v17[17];
      v119 = v17[18];
      v121 = *(float64x2_t *)((char *)v17 + 408);
      v122 = *(float64x2_t *)((char *)v17 + 392);
      v123 = v1056[-67];
      v124 = *(float64x2_t *)((char *)&v1056[-60] + 8);
      v125 = *(float64x2_t *)((char *)&v1056[-61] + 8);
      v127 = v1056[-53];
      v126 = v1056[-52];
      v128 = *(float64x2_t *)((char *)&v1056[-45] + 8);
      v129 = *(float64x2_t *)((char *)&v1056[-46] + 8);
      v130 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v115, v18->f64[0]), v118, *v18, 1), v120, v123.f64[0]), v122, v123, 1);
      v131 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, v18->f64[0]), v117, *v18, 1), v119, v123.f64[0]), v121, v123, 1);
      v132 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v115, v125.f64[0]), v118, v125, 1), v120, v124.f64[0]), v122, v124, 1);
      v133 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, v125.f64[0]), v117, v125, 1), v119, v124.f64[0]), v121, v124, 1);
      v134 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v115, v127.f64[0]), v118, v127, 1), v120, v126.f64[0]), v122, v126, 1);
      v135 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, v127.f64[0]), v117, v127, 1), v119, v126.f64[0]), v121, v126, 1);
      v136 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v115, v129.f64[0]), v118, v129, 1), v120, v128.f64[0]), v122, v128, 1);
      v137 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, v129.f64[0]), v117, v129, 1), v119, v128.f64[0]), v121, v128, 1);
      v139 = v17[32];
      v138 = v17[33];
      v141 = *(float64x2_t *)((char *)v17 + 632);
      v140 = *(float64x2_t *)((char *)v17 + 648);
      v143 = v17[47];
      v142 = v17[48];
      v145 = *(float64x2_t *)((char *)v17 + 872);
      v144 = *(float64x2_t *)((char *)v17 + 888);
      v147 = v1056[-66];
      v146 = v1056[-65];
      v148 = *(float64x2_t *)((char *)&v1056[-58] + 8);
      v149 = *(float64x2_t *)((char *)&v1056[-59] + 8);
      v150 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v130, v139, v147.f64[0]), v141, v147, 1), v143, v146.f64[0]), v145, v146, 1);
      v151 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v131, v138, v147.f64[0]), v140, v147, 1), v142, v146.f64[0]), v144, v146, 1);
      v152 = v1056[-51];
      v153 = v1056[-50];
      v154 = vmlaq_laneq_f64(vmlaq_n_f64(v132, v139, v149.f64[0]), v141, v149, 1);
      v155 = vmlaq_laneq_f64(vmlaq_n_f64(v133, v138, v149.f64[0]), v140, v149, 1);
      v156 = *(float64x2_t *)((char *)&v1056[-43] + 8);
      v157 = vmlaq_laneq_f64(vmlaq_n_f64(v154, v143, v148.f64[0]), v145, v148, 1);
      v158 = vmlaq_laneq_f64(vmlaq_n_f64(v155, v142, v148.f64[0]), v144, v148, 1);
      v159 = *(float64x2_t *)((char *)&v1056[-44] + 8);
      v160 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v134, v139, v152.f64[0]), v141, v152, 1), v143, v153.f64[0]), v145, v153, 1);
      v161 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v135, v138, v152.f64[0]), v140, v152, 1), v142, v153.f64[0]), v144, v153, 1);
      v162 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v136, v139, v159.f64[0]), v141, v159, 1), v143, v156.f64[0]), v145, v156, 1);
      v163 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v137, v138, v159.f64[0]), v140, v159, 1), v142, v156.f64[0]), v144, v156, 1);
      v165 = v17[62];
      v164 = v17[63];
      v167 = *(float64x2_t *)((char *)v17 + 1112);
      v166 = *(float64x2_t *)((char *)v17 + 1128);
      v168 = v17[78];
      v169 = v17[77];
      v171 = *(float64x2_t *)((char *)v17 + 1352);
      v170 = *(float64x2_t *)((char *)v17 + 1368);
      v173 = v1056[-64];
      v172 = v1056[-63];
      v174 = *(float64x2_t *)((char *)&v1056[-56] + 8);
      v175 = *(float64x2_t *)((char *)&v1056[-57] + 8);
      v176 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v150, v165, v173.f64[0]), v167, v173, 1), v169, v172.f64[0]), v171, v172, 1);
      v177 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v151, v164, v173.f64[0]), v166, v173, 1), v168, v172.f64[0]), v170, v172, 1);
      v178 = v1056[-49];
      v179 = v1056[-48];
      v180 = vmlaq_laneq_f64(vmlaq_n_f64(v157, v165, v175.f64[0]), v167, v175, 1);
      v181 = vmlaq_laneq_f64(vmlaq_n_f64(v158, v164, v175.f64[0]), v166, v175, 1);
      v182 = *(float64x2_t *)((char *)&v1056[-41] + 8);
      v183 = vmlaq_laneq_f64(vmlaq_n_f64(v180, v169, v174.f64[0]), v171, v174, 1);
      v184 = vmlaq_laneq_f64(vmlaq_n_f64(v181, v168, v174.f64[0]), v170, v174, 1);
      v185 = *(float64x2_t *)((char *)&v1056[-42] + 8);
      v186 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v160, v165, v178.f64[0]), v167, v178, 1), v169, v179.f64[0]), v171, v179, 1);
      v187 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v161, v164, v178.f64[0]), v166, v178, 1), v168, v179.f64[0]), v170, v179, 1);
      v188 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v162, v165, v185.f64[0]), v167, v185, 1), v169, v182.f64[0]), v171, v182, 1);
      v189 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v163, v164, v185.f64[0]), v166, v185, 1), v168, v182.f64[0]), v170, v182, 1);
      v190 = v17[93];
      v191 = v17[92];
      v193 = *(float64x2_t *)((char *)v17 + 1592);
      v192 = *(float64x2_t *)((char *)v17 + 1608);
      v194 = v17[108];
      v195 = v17[107];
      v170.f64[0] = v1056[-61].f64[0];
      v196 = v1056[-62];
      v178.f64[0] = v1056[-54].f64[1];
      v197 = *(float64x2_t *)((char *)&v1056[-55] + 8);
      v185.f64[0] = v1056[-46].f64[0];
      v198 = v1056[-47];
      v199 = vmlaq_laneq_f64(vmlaq_n_f64(v176, v191, v196.f64[0]), v193, v196, 1);
      v200 = vmlaq_laneq_f64(vmlaq_n_f64(v177, v190, v196.f64[0]), v192, v196, 1);
      v196.f64[0] = v1056[-39].f64[1];
      v201 = vmlaq_n_f64(v199, v195, v170.f64[0]);
      v202 = vmlaq_n_f64(v200, v194, v170.f64[0]);
      v203 = *(float64x2_t *)((char *)&v1056[-40] + 8);
      v16[2] = v201;
      v16[3] = v202;
      *(float64x2_t *)((char *)v16 + 168) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v184, v190, v197.f64[0]), v192, v197, 1), v194, v178.f64[0]);
      *(float64x2_t *)((char *)v16 + 152) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v183, v191, v197.f64[0]), v193, v197, 1), v195, v178.f64[0]);
      v16[17] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v186, v191, v198.f64[0]), v193, v198, 1), v195, v185.f64[0]);
      v16[18] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v187, v190, v198.f64[0]), v192, v198, 1), v194, v185.f64[0]);
      *(float64x2_t *)(a11 + 2928) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v189, v190, v203.f64[0]), v192, v203, 1), v194, v196.f64[0]);
      *(float64x2_t *)(a11 + 2912) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v188, v191, v203.f64[0]), v193, v203, 1), v195, v196.f64[0]);
      v204 = v17[4];
      v205 = v17[5];
      v206 = *(float64x2_t *)((char *)v17 + 200);
      v207 = *(float64x2_t *)((char *)v17 + 184);
      v209 = v17[19];
      v208 = v17[20];
      v210 = *(float64x2_t *)((char *)v17 + 440);
      v211 = *(float64x2_t *)((char *)v17 + 424);
      v212 = v1056[-67];
      v213 = *(float64x2_t *)((char *)&v1056[-60] + 8);
      v214 = *(float64x2_t *)((char *)&v1056[-61] + 8);
      v216 = v1056[-53];
      v215 = v1056[-52];
      v217 = *(float64x2_t *)((char *)&v1056[-45] + 8);
      v218 = *(float64x2_t *)((char *)&v1056[-46] + 8);
      v219 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v204, v18->f64[0]), v207, *v18, 1), v209, v212.f64[0]), v211, v212, 1);
      v220 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v205, v18->f64[0]), v206, *v18, 1), v208, v212.f64[0]), v210, v212, 1);
      v221 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v204, v214.f64[0]), v207, v214, 1), v209, v213.f64[0]), v211, v213, 1);
      v222 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v205, v214.f64[0]), v206, v214, 1), v208, v213.f64[0]), v210, v213, 1);
      v223 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v204, v216.f64[0]), v207, v216, 1), v209, v215.f64[0]), v211, v215, 1);
      v224 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v205, v216.f64[0]), v206, v216, 1), v208, v215.f64[0]), v210, v215, 1);
      v225 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v204, v218.f64[0]), v207, v218, 1), v209, v217.f64[0]), v211, v217, 1);
      v226 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v205, v218.f64[0]), v206, v218, 1), v208, v217.f64[0]), v210, v217, 1);
      v228 = v17[34];
      v227 = v17[35];
      result = (_BYTE *)&v17[41].f64[1];
      v230 = *(float64x2_t *)((char *)v17 + 664);
      v229 = *(float64x2_t *)((char *)v17 + 680);
      v232 = v17[49];
      v231 = v17[50];
      v234 = *(float64x2_t *)((char *)v17 + 904);
      v233 = *(float64x2_t *)((char *)v17 + 920);
      v236 = v1056[-66];
      v235 = v1056[-65];
      v237 = *(float64x2_t *)((char *)&v1056[-58] + 8);
      v238 = *(float64x2_t *)((char *)&v1056[-59] + 8);
      v239 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v219, v228, v236.f64[0]), v230, v236, 1), v232, v235.f64[0]), v234, v235, 1);
      v240 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v220, v227, v236.f64[0]), v229, v236, 1), v231, v235.f64[0]), v233, v235, 1);
      v241 = v1056[-51];
      v242 = v1056[-50];
      v243 = vmlaq_laneq_f64(vmlaq_n_f64(v221, v228, v238.f64[0]), v230, v238, 1);
      v244 = vmlaq_laneq_f64(vmlaq_n_f64(v222, v227, v238.f64[0]), v229, v238, 1);
      v245 = *(float64x2_t *)((char *)&v1056[-43] + 8);
      v246 = vmlaq_laneq_f64(vmlaq_n_f64(v243, v232, v237.f64[0]), v234, v237, 1);
      v247 = vmlaq_laneq_f64(vmlaq_n_f64(v244, v231, v237.f64[0]), v233, v237, 1);
      v248 = *(float64x2_t *)((char *)&v1056[-44] + 8);
      v249 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v223, v228, v241.f64[0]), v230, v241, 1), v232, v242.f64[0]), v234, v242, 1);
      v250 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v224, v227, v241.f64[0]), v229, v241, 1), v231, v242.f64[0]), v233, v242, 1);
      v251 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v225, v228, v248.f64[0]), v230, v248, 1), v232, v245.f64[0]), v234, v245, 1);
      v252 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v226, v227, v248.f64[0]), v229, v248, 1), v231, v245.f64[0]), v233, v245, 1);
      v253 = v17[65];
      v254 = v17[64];
      v256 = *(float64x2_t *)((char *)v17 + 1144);
      v255 = *(float64x2_t *)((char *)v17 + 1160);
      v257 = v17[80];
      v258 = v17[79];
      v260 = *(float64x2_t *)((char *)v17 + 1384);
      v259 = *(float64x2_t *)((char *)v17 + 1400);
      v262 = v1056[-64];
      v261 = v1056[-63];
      v263 = *(float64x2_t *)((char *)&v1056[-56] + 8);
      v264 = *(float64x2_t *)((char *)&v1056[-57] + 8);
      v265 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v239, v254, v262.f64[0]), v256, v262, 1), v258, v261.f64[0]), v260, v261, 1);
      v266 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v240, v253, v262.f64[0]), v255, v262, 1), v257, v261.f64[0]), v259, v261, 1);
      v267 = v1056[-49];
      v268 = v1056[-48];
      v269 = vmlaq_laneq_f64(vmlaq_n_f64(v246, v254, v264.f64[0]), v256, v264, 1);
      v270 = vmlaq_laneq_f64(vmlaq_n_f64(v247, v253, v264.f64[0]), v255, v264, 1);
      v271 = *(float64x2_t *)((char *)&v1056[-41] + 8);
      v272 = vmlaq_laneq_f64(vmlaq_n_f64(v269, v258, v263.f64[0]), v260, v263, 1);
      _Q22 = vmlaq_laneq_f64(vmlaq_n_f64(v270, v257, v263.f64[0]), v259, v263, 1);
      v274 = *(float64x2_t *)((char *)&v1056[-42] + 8);
      _Q23 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v249, v254, v267.f64[0]), v256, v267, 1), v258, v268.f64[0]), v260, v268, 1);
      v276 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v250, v253, v267.f64[0]), v255, v267, 1), v257, v268.f64[0]), v259, v268, 1);
      v277 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v251, v254, v274.f64[0]), v256, v274, 1), v258, v271.f64[0]), v260, v271, 1);
      _Q27 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v252, v253, v274.f64[0]), v255, v274, 1), v257, v271.f64[0]), v259, v271, 1);
      v279 = v17[95];
      v280 = v17[94];
      _Q31 = *(float64x2_t *)((char *)v17 + 1624);
      v281 = *(float64x2_t *)((char *)v17 + 1640);
      v283 = v17[110];
      v284 = v17[109];
      v259.f64[0] = v1056[-61].f64[0];
      v285 = v1056[-62];
      v267.f64[0] = v1056[-54].f64[1];
      v286 = *(float64x2_t *)((char *)&v1056[-55] + 8);
      v274.f64[0] = v1056[-46].f64[0];
      v287 = v1056[-47];
      v288 = vmlaq_laneq_f64(vmlaq_n_f64(v265, v280, v285.f64[0]), _Q31, v285, 1);
      v289 = vmlaq_laneq_f64(vmlaq_n_f64(v266, v279, v285.f64[0]), v281, v285, 1);
      v285.f64[0] = v1056[-39].f64[1];
      v290 = vmlaq_n_f64(v288, v284, v259.f64[0]);
      v291 = vmlaq_n_f64(v289, v283, v259.f64[0]);
      v292 = *(float64x2_t *)((char *)&v1056[-40] + 8);
      v16[4] = v290;
      v16[5] = v291;
      *(float64x2_t *)((char *)v16 + 200) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q22, v279, v286.f64[0]), v281, v286, 1), v283, v267.f64[0]);
      *(float64x2_t *)((char *)v16 + 184) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v272, v280, v286.f64[0]), _Q31, v286, 1), v284, v267.f64[0]);
      v16[19] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q23, v280, v287.f64[0]), _Q31, v287, 1), v284, v274.f64[0]);
      v16[20] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v276, v279, v287.f64[0]), v281, v287, 1), v283, v274.f64[0]);
      *(float64x2_t *)(a11 + 2960) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q27, v279, v292.f64[0]), v281, v292, 1), v283, v285.f64[0]);
      *(float64x2_t *)(a11 + 2944) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v277, v280, v292.f64[0]), _Q31, v292, 1), v284, v285.f64[0]);
      _Q26 = v17[6];
      _Q27.f64[0] = v17[14].f64[1];
      v294 = *(float64x2_t *)((char *)v17 + 216);
      _Q30 = v17[21];
      _Q31.f64[0] = v17[29].f64[1];
      v296 = *(float64x2_t *)((char *)v17 + 456);
      _Q19 = *(float64x2_t *)((char *)&v1056[-60] + 8);
      _Q21 = *(float64x2_t *)((char *)&v1056[-61] + 8);
      _Q9 = *(float64x2_t *)((char *)&v1056[-45] + 8);
      _Q10 = *(float64x2_t *)((char *)&v1056[-46] + 8);
      v301 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q24.f64[0]), v294, _Q24, 1), _Q30, _Q1.f64[0]), v296, _Q1, 1);
      __asm
      {
        FMLA            D23, D27, V24.D[1]
        FMLA            D23, D31, V1.D[1]
      }
      v306 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q21.f64[0]), v294, _Q21, 1), _Q30, _Q19.f64[0]), v296, _Q19, 1);
      __asm
      {
        FMLA            D22, D27, V21.D[1]
        FMLA            D22, D31, V19.D[1]
      }
      v307 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q20.f64[0]), v294, _Q20, 1), _Q30, _Q4.f64[0]), v296, _Q4, 1);
      __asm
      {
        FMLA            D21, D27, V20.D[1]
        FMLA            D21, D31, V4.D[1]
      }
      v308 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q10.f64[0]), v294, _Q10, 1), _Q30, _Q9.f64[0]), v296, _Q9, 1);
      __asm
      {
        FMLA            D20, D27, V10.D[1]
        FMLA            D20, D31, V9.D[1]
      }
      v309 = v17[36];
      *(_QWORD *)&v1131.f64[0] = &v17[43].f64[1];
      _Q26.f64[0] = v17[44].f64[1];
      v310 = *(float64x2_t *)((char *)v17 + 696);
      v311 = v17[51];
      *(_QWORD *)&v1130.f64[0] = &v17[58].f64[1];
      _Q30.f64[0] = v17[59].f64[1];
      v312 = *(float64x2_t *)((char *)v17 + 936);
      _Q8 = *(float64x2_t *)((char *)&v1056[-58] + 8);
      _Q9 = *(float64x2_t *)((char *)&v1056[-59] + 8);
      _Q10 = *(float64x2_t *)((char *)&v1056[-43] + 8);
      _Q11 = *(float64x2_t *)((char *)&v1056[-44] + 8);
      v317 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v301, v309, _Q2.f64[0]), v310, _Q2, 1), v311, _Q5.f64[0]), v312, _Q5, 1);
      __asm
      {
        FMLA            D23, D26, V2.D[1]
        FMLA            D23, D30, V5.D[1]
      }
      v318 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v306, v309, _Q9.f64[0]), v310, _Q9, 1), v311, _Q8.f64[0]), v312, _Q8, 1);
      __asm
      {
        FMLA            D22, D26, V9.D[1]
        FMLA            D22, D30, V8.D[1]
      }
      v319 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v307, v309, _Q3.f64[0]), v310, _Q3, 1), v311, _Q18.f64[0]), v312, _Q18, 1);
      __asm
      {
        FMLA            D21, D26, V3.D[1]
        FMLA            D21, D30, V18.D[1]
      }
      v320 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v308, v309, _Q11.f64[0]), v310, _Q11, 1), v311, _Q10.f64[0]), v312, _Q10, 1);
      __asm
      {
        FMLA            D20, D26, V11.D[1]
        FMLA            D20, D30, V10.D[1]
      }
      v321 = v17[66];
      *(_QWORD *)&v1129.f64[0] = &v17[73].f64[1];
      _Q5.f64[0] = v17[74].f64[1];
      v322 = *(float64x2_t *)((char *)v17 + 1176);
      v323 = v17[81];
      *(_QWORD *)&v1128.f64[0] = &v17[88].f64[1];
      _Q26.f64[0] = v17[89].f64[1];
      v324 = *(float64x2_t *)((char *)v17 + 1416);
      _Q28 = *(float64x2_t *)((char *)&v1056[-56] + 8);
      _Q29 = *(float64x2_t *)((char *)&v1056[-57] + 8);
      _Q30 = *(float64x2_t *)((char *)&v1056[-41] + 8);
      _Q31 = *(float64x2_t *)((char *)&v1056[-42] + 8);
      v329 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v317, v321, _Q7.f64[0]), v322, _Q7, 1), v323, _Q17.f64[0]), v324, _Q17, 1);
      __asm
      {
        FMLA            D23, D5, V7.D[1]
        FMLA            D23, D26, V17.D[1]
      }
      v330 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v318, v321, _Q29.f64[0]), v322, _Q29, 1), v323, _Q28.f64[0]), v324, _Q28, 1);
      __asm
      {
        FMLA            D22, D5, V29.D[1]
        FMLA            D22, D26, V28.D[1]
      }
      v331 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v319, v321, _Q6.f64[0]), v322, _Q6, 1), v323, _Q16.f64[0]), v324, _Q16, 1);
      __asm
      {
        FMLA            D21, D5, V6.D[1]
        FMLA            D21, D26, V16.D[1]
      }
      v332 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v320, v321, _Q31.f64[0]), v322, _Q31, 1), v323, _Q30.f64[0]), v324, _Q30, 1);
      __asm
      {
        FMLA            D20, D5, V31.D[1]
        FMLA            D20, D26, V30.D[1]
      }
      v333 = v17[96];
      *(_QWORD *)&v1127.f64[0] = &v17[103].f64[1];
      _Q5.f64[0] = v17[104].f64[1];
      v334 = *(float64x2_t *)((char *)v17 + 1656);
      _Q7.f64[0] = v17[112].f64[0];
      v335 = v17[111];
      _Q17.f64[0] = v1056[-61].f64[0];
      _Q18 = v1056[-62];
      _Q24.f64[0] = v1056[-54].f64[1];
      _Q25 = *(float64x2_t *)((char *)&v1056[-55] + 8);
      _Q26.f64[0] = v1056[-46].f64[0];
      _Q27 = v1056[-47];
      _Q28.f64[0] = v1056[-39].f64[1];
      _Q29 = *(float64x2_t *)((char *)&v1056[-40] + 8);
      __asm
      {
        FMLA            D23, D5, V18.D[1]
        FMLA            D22, D5, V25.D[1]
        FMLA            D21, D5, V27.D[1]
        FMLA            D20, D5, V29.D[1]
      }
      v16[7].f64[0] = _Q23.f64[0] + _Q7.f64[0] * _Q17.f64[0];
      v16[6] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v329, v333, _Q18.f64[0]), v334, _Q18, 1), v335, _Q17.f64[0]);
      v16[14].f64[1] = _Q22.f64[0] + _Q7.f64[0] * _Q24.f64[0];
      *(float64x2_t *)((char *)v16 + 216) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v330, v333, _Q25.f64[0]), v334, _Q25, 1), v335, _Q24.f64[0]);
      v16[22].f64[0] = _Q21.f64[0] + _Q7.f64[0] * _Q26.f64[0];
      v16[21] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v331, v333, _Q27.f64[0]), v334, _Q27, 1), v335, _Q26.f64[0]);
      v16[29].f64[1] = _Q20.f64[0] + _Q7.f64[0] * _Q28.f64[0];
      *(float64x2_t *)((char *)v16 + 456) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v332, v333, _Q29.f64[0]), v334, _Q29, 1), v335, _Q28.f64[0]);
      v341 = *v17;
      v340 = v17[1];
      v342 = *(float64x2_t *)((char *)v17 + 136);
      v343 = *(float64x2_t *)((char *)v17 + 120);
      v345 = v17[15];
      v344 = v17[16];
      v346 = *(float64x2_t *)((char *)v17 + 376);
      v347 = *(float64x2_t *)((char *)v17 + 360);
      v348 = v1056[-38];
      v349 = v1056[-37];
      v350 = *(float64x2_t *)((char *)&v1056[-31] + 8);
      v351 = *(float64x2_t *)((char *)&v1056[-30] + 8);
      v352 = v1056[-23];
      v353 = *(float64x2_t *)((char *)&v1056[-16] + 8);
      _Q22 = v348;
      v355 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v348.f64[0]), v343, v348, 1), v345, v349.f64[0]), v347, v349, 1);
      v356 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v340, v348.f64[0]), v342, v348, 1), v344, v349.f64[0]), v346, v349, 1);
      _Q20 = v350;
      v358 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v350.f64[0]), v343, v350, 1), v345, v351.f64[0]), v347, v351, 1);
      v359 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v340, v350.f64[0]), v342, v350, 1), v344, v351.f64[0]), v346, v351, 1);
      v360 = vmlaq_laneq_f64(vmulq_n_f64(*v17, v352.f64[0]), v343, v352, 1);
      v361 = v1056[-22];
      v1126 = v352;
      v362 = vmlaq_laneq_f64(vmlaq_n_f64(v360, v345, v361.f64[0]), v347, v361, 1);
      v363 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v340, v352.f64[0]), v342, v352, 1), v344, v361.f64[0]), v346, v361, 1);
      v364 = vmlaq_laneq_f64(vmulq_n_f64(v341, v353.f64[0]), v343, v353, 1);
      v365 = *(float64x2_t *)((char *)&v1056[-15] + 8);
      v1125 = *(float64x2_t *)((char *)&v1056[-16] + 8);
      v366 = vmlaq_laneq_f64(vmlaq_n_f64(v364, v345, v365.f64[0]), v347, v365, 1);
      v367 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v340, v353.f64[0]), v342, v353, 1), v344, v365.f64[0]), v346, v365, 1);
      v369 = v17[30];
      v368 = v17[31];
      v371 = *(float64x2_t *)((char *)v17 + 600);
      v370 = *(float64x2_t *)((char *)v17 + 616);
      v373 = v17[45];
      v372 = v17[46];
      v375 = *(float64x2_t *)((char *)v17 + 840);
      v374 = *(float64x2_t *)((char *)v17 + 856);
      v376 = *(float64x2_t *)((char *)&v1056[-14] + 8);
      _Q19 = v1056[-37];
      v377 = v1056[-36];
      _Q7 = v377;
      v380 = v1056[-35];
      v381 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v355, v369, v377.f64[0]), v371, v377, 1), v373, v380.f64[0]), v375, v380, 1);
      v382 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v356, v368, v377.f64[0]), v370, v377, 1), v372, v380.f64[0]), v374, v380, 1);
      _Q16 = *(float64x2_t *)((char *)&v1056[-29] + 8);
      v384 = *(float64x2_t *)((char *)&v1056[-28] + 8);
      v385 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v358, v369, v1056[-29].f64[1]), v371, _Q16, 1), v373, v384.f64[0]), v375, v384, 1);
      v386 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v359, v368, v1056[-29].f64[1]), v370, _Q16, 1), v372, v384.f64[0]), v374, v384, 1);
      _Q25 = v1056[-22];
      v387 = v1056[-21];
      _Q17 = v387;
      v389 = v1056[-20];
      v391 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v362, v369, v387.f64[0]), v371, v387, 1), v373, v389.f64[0]), v375, v389, 1);
      v392 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v363, v368, v387.f64[0]), v370, v387, 1), v372, v389.f64[0]), v374, v389, 1);
      v393 = vmlaq_laneq_f64(vmlaq_n_f64(v366, v369, v376.f64[0]), v371, v376, 1);
      _Q18 = v376;
      v395 = *(float64x2_t *)((char *)&v1056[-13] + 8);
      v396 = vmlaq_laneq_f64(vmlaq_n_f64(v393, v373, v395.f64[0]), v375, v395, 1);
      v397 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v367, v368, v376.f64[0]), v370, v376, 1), v372, v395.f64[0]), v374, v395, 1);
      v398 = v17[60];
      v399 = v17[61];
      v401 = *(float64x2_t *)((char *)v17 + 1080);
      v400 = *(float64x2_t *)((char *)v17 + 1096);
      v402 = v17[76];
      v403 = v17[75];
      v405 = *(float64x2_t *)((char *)v17 + 1320);
      v404 = *(float64x2_t *)((char *)v17 + 1336);
      v406 = *(float64x2_t *)((char *)&v1056[-27] + 8);
      _Q26 = v1056[-35];
      v408 = v1056[-33];
      v1124 = v1056[-34];
      v409 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v381, v398, v1124.f64[0]), v401, v1124, 1), v403, v408.f64[0]), v405, v408, 1);
      v410 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v382, v399, v1124.f64[0]), v400, v1124, 1), v402, v408.f64[0]), v404, v408, 1);
      v411 = *(float64x2_t *)((char *)&v1056[-26] + 8);
      v1121 = *(float64x2_t *)((char *)&v1056[-27] + 8);
      v412 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v385, v398, v406.f64[0]), v401, v406, 1), v403, v411.f64[0]), v405, v411, 1);
      v413 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v386, v399, v406.f64[0]), v400, v406, 1), v402, v411.f64[0]), v404, v411, 1);
      _Q27 = v1056[-20];
      v416 = v1056[-18];
      v1123 = v1056[-19];
      v414 = v1123;
      v417 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v391, v398, v414.f64[0]), v401, v414, 1), v403, v416.f64[0]), v405, v416, 1);
      v418 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v392, v399, v414.f64[0]), v400, v414, 1), v402, v416.f64[0]), v404, v416, 1);
      v419 = *(float64x2_t *)((char *)&v1056[-12] + 8);
      v420 = vmlaq_laneq_f64(vmlaq_n_f64(v396, v398, v419.f64[0]), v401, v419, 1);
      v421 = *(float64x2_t *)((char *)&v1056[-11] + 8);
      v1122 = v419;
      v422 = vmlaq_n_f64(v420, v403, v421.f64[0]);
      v423 = vmlaq_laneq_f64(vmlaq_n_f64(v397, v399, v419.f64[0]), v400, v419, 1);
      v424 = v17[91];
      v425 = v17[90];
      v427 = *(float64x2_t *)((char *)v17 + 1560);
      v426 = *(float64x2_t *)((char *)v17 + 1576);
      v428 = *(float64x2_t *)((char *)&v1056[-25] + 8);
      v429 = vmlaq_laneq_f64(vmlaq_n_f64(v412, v425, v428.f64[0]), v427, v428, 1);
      v430 = vmlaq_laneq_f64(vmlaq_n_f64(v413, v424, v428.f64[0]), v426, v428, 1);
      v431 = v17[105];
      v368.f64[0] = v1056[-24].f64[1];
      v432 = v17[106];
      *(float64x2_t *)((char *)v16 + 600) = vmlaq_n_f64(v429, v431, v368.f64[0]);
      *(float64x2_t *)((char *)v16 + 616) = vmlaq_n_f64(v430, v432, v368.f64[0]);
      v433 = vmlaq_laneq_f64(vmlaq_n_f64(v423, v402, v421.f64[0]), v404, v421, 1);
      v368.f64[0] = v1056[-31].f64[0];
      v430.f64[0] = v1056[-16].f64[0];
      _Q24 = v1056[-33];
      v434 = v1056[-32];
      v436 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v409, v425, v434.f64[0]), v427, v434, 1), v431, v368.f64[0]);
      v437 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v410, v424, v434.f64[0]), v426, v434, 1), v432, v368.f64[0]);
      _Q21 = v1056[-18];
      v438 = v1056[-17];
      v440 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v417, v425, v438.f64[0]), v427, v438, 1), v431, v430.f64[0]);
      v441 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v418, v424, v438.f64[0]), v426, v438, 1), v432, v430.f64[0]);
      _Q23 = *(float64x2_t *)((char *)&v1056[-11] + 8);
      v442 = *(float64x2_t *)((char *)&v1056[-10] + 8);
      v404.f64[0] = v1056[-9].f64[1];
      v16[30] = v436;
      v16[31] = v437;
      v16[45] = v440;
      v16[46] = v441;
      *(float64x2_t *)(a11 + 3376) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v433, v424, v442.f64[0]), v426, v442, 1), v432, v404.f64[0]);
      *(float64x2_t *)(a11 + 3360) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v422, v405, v421, 1), v425, v442.f64[0]), v427, v442, 1), v431, v404.f64[0]);
      v445 = v17[2];
      v444 = v17[3];
      v446 = *(float64x2_t *)((char *)v17 + 168);
      v447 = *(float64x2_t *)((char *)v17 + 152);
      v449 = v17[17];
      v448 = v17[18];
      v450 = *(float64x2_t *)((char *)v17 + 408);
      v451 = *(float64x2_t *)((char *)v17 + 392);
      v453 = v1056[-38];
      v452 = v1056[-37];
      v454 = *(float64x2_t *)((char *)&v1056[-31] + 8);
      v455 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v445, v453.f64[0]), v447, v453, 1), v449, v452.f64[0]), v451, v452, 1);
      v456 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v444, v453.f64[0]), v446, v453, 1), v448, v452.f64[0]), v450, v452, 1);
      v457 = *(float64x2_t *)((char *)&v1056[-30] + 8);
      v458 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v445, v454.f64[0]), v447, v454, 1), v449, v457.f64[0]), v451, v457, 1);
      v459 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v444, v454.f64[0]), v446, v454, 1), v448, v457.f64[0]), v450, v457, 1);
      v460 = v1056[-23];
      v461 = vmlaq_laneq_f64(vmulq_n_f64(v445, v460.f64[0]), v447, v460, 1);
      v462 = vmlaq_laneq_f64(vmulq_n_f64(v444, v460.f64[0]), v446, v460, 1);
      v463 = v1056[-22];
      v464 = vmlaq_laneq_f64(vmlaq_n_f64(v461, v449, v463.f64[0]), v451, v463, 1);
      v465 = vmlaq_laneq_f64(vmlaq_n_f64(v462, v448, v463.f64[0]), v450, v463, 1);
      v466 = *(float64x2_t *)((char *)&v1056[-16] + 8);
      v467 = vmlaq_laneq_f64(vmulq_n_f64(v445, v466.f64[0]), v447, v466, 1);
      v468 = *(float64x2_t *)((char *)&v1056[-15] + 8);
      v469 = vmlaq_laneq_f64(vmlaq_n_f64(v467, v449, v468.f64[0]), v451, v468, 1);
      v470 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v444, v466.f64[0]), v446, v466, 1), v448, v468.f64[0]), v450, v468, 1);
      v471 = v17[32];
      v472 = v17[33];
      v474 = *(float64x2_t *)((char *)v17 + 632);
      v473 = *(float64x2_t *)((char *)v17 + 648);
      v475 = v1056[-36];
      v476 = v1056[-35];
      v477 = vmlaq_laneq_f64(vmlaq_n_f64(v455, v471, v475.f64[0]), v474, v475, 1);
      v478 = vmlaq_laneq_f64(vmlaq_n_f64(v456, v472, v475.f64[0]), v473, v475, 1);
      v479 = v17[47];
      v480 = v17[48];
      v482 = *(float64x2_t *)((char *)v17 + 872);
      v481 = *(float64x2_t *)((char *)v17 + 888);
      v483 = vmlaq_laneq_f64(vmlaq_n_f64(v477, v479, v476.f64[0]), v482, v476, 1);
      v484 = vmlaq_laneq_f64(vmlaq_n_f64(v478, v480, v476.f64[0]), v481, v476, 1);
      v485 = *(float64x2_t *)((char *)&v1056[-29] + 8);
      v486 = vmlaq_laneq_f64(vmlaq_n_f64(v458, v471, v485.f64[0]), v474, v485, 1);
      v487 = vmlaq_laneq_f64(vmlaq_n_f64(v459, v472, v485.f64[0]), v473, v485, 1);
      v488 = *(float64x2_t *)((char *)&v1056[-28] + 8);
      v489 = vmlaq_laneq_f64(vmlaq_n_f64(v486, v479, v488.f64[0]), v482, v488, 1);
      v490 = vmlaq_laneq_f64(vmlaq_n_f64(v487, v480, v488.f64[0]), v481, v488, 1);
      v491 = v1056[-21];
      v492 = vmlaq_laneq_f64(vmlaq_n_f64(v464, v471, v491.f64[0]), v474, v491, 1);
      v493 = vmlaq_laneq_f64(vmlaq_n_f64(v465, v472, v491.f64[0]), v473, v491, 1);
      v494 = v1056[-20];
      v495 = vmlaq_laneq_f64(vmlaq_n_f64(v492, v479, v494.f64[0]), v482, v494, 1);
      v496 = vmlaq_laneq_f64(vmlaq_n_f64(v493, v480, v494.f64[0]), v481, v494, 1);
      v497 = *(float64x2_t *)((char *)&v1056[-14] + 8);
      v498 = vmlaq_laneq_f64(vmlaq_n_f64(v469, v471, v497.f64[0]), v474, v497, 1);
      v499 = *(float64x2_t *)((char *)&v1056[-13] + 8);
      v500 = vmlaq_laneq_f64(vmlaq_n_f64(v498, v479, v499.f64[0]), v482, v499, 1);
      v501 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v470, v472, v497.f64[0]), v473, v497, 1), v480, v499.f64[0]), v481, v499, 1);
      v503 = v17[62];
      v502 = v17[63];
      v505 = *(float64x2_t *)((char *)v17 + 1112);
      v504 = *(float64x2_t *)((char *)v17 + 1128);
      v506 = v1056[-34];
      v507 = v1056[-33];
      v508 = vmlaq_laneq_f64(vmlaq_n_f64(v483, v503, v506.f64[0]), v505, v506, 1);
      v509 = vmlaq_laneq_f64(vmlaq_n_f64(v484, v502, v506.f64[0]), v504, v506, 1);
      v510 = v17[77];
      v511 = *(float64x2_t *)((char *)v17 + 1352);
      v512 = *(float64x2_t *)((char *)v17 + 1368);
      v513 = vmlaq_laneq_f64(vmlaq_n_f64(v508, v510, v507.f64[0]), v511, v507, 1);
      v514 = v17[78];
      v515 = vmlaq_laneq_f64(vmlaq_n_f64(v509, v514, v507.f64[0]), v512, v507, 1);
      v516 = *(float64x2_t *)((char *)&v1056[-27] + 8);
      v517 = vmlaq_laneq_f64(vmlaq_n_f64(v489, v503, v516.f64[0]), v505, v516, 1);
      v518 = vmlaq_laneq_f64(vmlaq_n_f64(v490, v502, v516.f64[0]), v504, v516, 1);
      v519 = *(float64x2_t *)((char *)&v1056[-26] + 8);
      v520 = vmlaq_laneq_f64(vmlaq_n_f64(v517, v510, v519.f64[0]), v511, v519, 1);
      v521 = vmlaq_laneq_f64(vmlaq_n_f64(v518, v514, v519.f64[0]), v512, v519, 1);
      v522 = v1056[-19];
      v523 = vmlaq_laneq_f64(vmlaq_n_f64(v495, v503, v522.f64[0]), v505, v522, 1);
      v524 = vmlaq_laneq_f64(vmlaq_n_f64(v496, v502, v522.f64[0]), v504, v522, 1);
      v525 = v1056[-18];
      v526 = vmlaq_laneq_f64(vmlaq_n_f64(v523, v510, v525.f64[0]), v511, v525, 1);
      v527 = vmlaq_laneq_f64(vmlaq_n_f64(v524, v514, v525.f64[0]), v512, v525, 1);
      v528 = *(float64x2_t *)((char *)&v1056[-12] + 8);
      v529 = vmlaq_laneq_f64(vmlaq_n_f64(v500, v503, v528.f64[0]), v505, v528, 1);
      v530 = *(float64x2_t *)((char *)&v1056[-11] + 8);
      v531 = vmlaq_laneq_f64(vmlaq_n_f64(v529, v510, v530.f64[0]), v511, v530, 1);
      v532 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v501, v502, v528.f64[0]), v504, v528, 1), v514, v530.f64[0]), v512, v530, 1);
      v533 = v17[93];
      v534 = v17[92];
      v536 = *(float64x2_t *)((char *)v17 + 1592);
      v535 = *(float64x2_t *)((char *)v17 + 1608);
      v537 = *(float64x2_t *)((char *)&v1056[-25] + 8);
      v538 = vmlaq_laneq_f64(vmlaq_n_f64(v520, v534, v537.f64[0]), v536, v537, 1);
      v539 = vmlaq_laneq_f64(vmlaq_n_f64(v521, v533, v537.f64[0]), v535, v537, 1);
      v540 = v17[107];
      v528.f64[0] = v1056[-24].f64[1];
      v541 = v17[108];
      *(float64x2_t *)((char *)v16 + 632) = vmlaq_n_f64(v538, v540, v528.f64[0]);
      *(float64x2_t *)((char *)v16 + 648) = vmlaq_n_f64(v539, v541, v528.f64[0]);
      v542 = v1056[-32];
      v543 = vmlaq_laneq_f64(vmlaq_n_f64(v513, v534, v542.f64[0]), v536, v542, 1);
      v544 = vmlaq_laneq_f64(vmlaq_n_f64(v515, v533, v542.f64[0]), v535, v542, 1);
      v542.f64[0] = v1056[-31].f64[0];
      v545 = vmlaq_n_f64(v543, v540, v542.f64[0]);
      v546 = vmlaq_n_f64(v544, v541, v542.f64[0]);
      v547 = v1056[-17];
      v548 = vmlaq_laneq_f64(vmlaq_n_f64(v526, v534, v547.f64[0]), v536, v547, 1);
      v549 = vmlaq_laneq_f64(vmlaq_n_f64(v527, v533, v547.f64[0]), v535, v547, 1);
      v547.f64[0] = v1056[-16].f64[0];
      v550 = vmlaq_n_f64(v548, v540, v547.f64[0]);
      v551 = vmlaq_n_f64(v549, v541, v547.f64[0]);
      v552 = *(float64x2_t *)((char *)&v1056[-10] + 8);
      v553 = vmlaq_n_f64(v531, v534, v552.f64[0]);
      v534.f64[0] = v1056[-9].f64[1];
      v16[32] = v545;
      v16[33] = v546;
      v16[47] = v550;
      v16[48] = v551;
      *(float64x2_t *)(a11 + 3408) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v532, v533, v552.f64[0]), v535, v552, 1), v541, v534.f64[0]);
      *(float64x2_t *)(a11 + 3392) = vmlaq_n_f64(vmlaq_laneq_f64(v553, v536, v552, 1), v540, v534.f64[0]);
      v555 = v17[4];
      v554 = v17[5];
      v556 = *(float64x2_t *)((char *)v17 + 200);
      v557 = *(float64x2_t *)((char *)v17 + 184);
      v558 = v17[19];
      v559 = v17[20];
      v560 = *(float64x2_t *)((char *)v17 + 440);
      v561 = *(float64x2_t *)((char *)v17 + 424);
      v563 = v1056[-38];
      v562 = v1056[-37];
      v564 = *(float64x2_t *)((char *)&v1056[-31] + 8);
      v565 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v555, v563.f64[0]), v557, v563, 1), v558, v562.f64[0]), v561, v562, 1);
      v566 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v554, v563.f64[0]), v556, v563, 1), v559, v562.f64[0]), v560, v562, 1);
      v567 = *(float64x2_t *)((char *)&v1056[-30] + 8);
      v568 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v555, v564.f64[0]), v557, v564, 1), v558, v567.f64[0]), v561, v567, 1);
      v569 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v554, v564.f64[0]), v556, v564, 1), v559, v567.f64[0]), v560, v567, 1);
      v570 = v1056[-23];
      v571 = vmlaq_laneq_f64(vmulq_n_f64(v555, v570.f64[0]), v557, v570, 1);
      v572 = vmlaq_laneq_f64(vmulq_n_f64(v554, v570.f64[0]), v556, v570, 1);
      v573 = v1056[-22];
      v574 = vmlaq_laneq_f64(vmlaq_n_f64(v571, v558, v573.f64[0]), v561, v573, 1);
      v575 = vmlaq_laneq_f64(vmlaq_n_f64(v572, v559, v573.f64[0]), v560, v573, 1);
      v576 = *(float64x2_t *)((char *)&v1056[-16] + 8);
      v577 = vmlaq_laneq_f64(vmulq_n_f64(v555, v576.f64[0]), v557, v576, 1);
      v578 = *(float64x2_t *)((char *)&v1056[-15] + 8);
      v579 = vmlaq_laneq_f64(vmlaq_n_f64(v577, v558, v578.f64[0]), v561, v578, 1);
      v580 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v554, v576.f64[0]), v556, v576, 1), v559, v578.f64[0]), v560, v578, 1);
      v582 = v17[34];
      v581 = v17[35];
      v583 = *(float64x2_t *)((char *)v17 + 664);
      v584 = *(float64x2_t *)((char *)v17 + 680);
      v585 = v1056[-36];
      v586 = v1056[-35];
      v587 = vmlaq_laneq_f64(vmlaq_n_f64(v565, v582, v585.f64[0]), v583, v585, 1);
      v588 = vmlaq_laneq_f64(vmlaq_n_f64(v566, v581, v585.f64[0]), v584, v585, 1);
      v589 = v17[49];
      v590 = v17[50];
      v591 = *(float64x2_t *)((char *)v17 + 904);
      v592 = *(float64x2_t *)((char *)v17 + 920);
      v593 = vmlaq_laneq_f64(vmlaq_n_f64(v587, v589, v586.f64[0]), v591, v586, 1);
      v594 = vmlaq_laneq_f64(vmlaq_n_f64(v588, v590, v586.f64[0]), v592, v586, 1);
      v595 = *(float64x2_t *)((char *)&v1056[-29] + 8);
      v596 = vmlaq_laneq_f64(vmlaq_n_f64(v568, v582, v595.f64[0]), v583, v595, 1);
      v597 = vmlaq_laneq_f64(vmlaq_n_f64(v569, v581, v595.f64[0]), v584, v595, 1);
      v598 = *(float64x2_t *)((char *)&v1056[-28] + 8);
      v599 = vmlaq_laneq_f64(vmlaq_n_f64(v596, v589, v598.f64[0]), v591, v598, 1);
      v600 = vmlaq_laneq_f64(vmlaq_n_f64(v597, v590, v598.f64[0]), v592, v598, 1);
      v601 = v1056[-21];
      v602 = vmlaq_laneq_f64(vmlaq_n_f64(v574, v582, v601.f64[0]), v583, v601, 1);
      v603 = vmlaq_laneq_f64(vmlaq_n_f64(v575, v581, v601.f64[0]), v584, v601, 1);
      v604 = v1056[-20];
      v605 = vmlaq_laneq_f64(vmlaq_n_f64(v602, v589, v604.f64[0]), v591, v604, 1);
      v606 = vmlaq_laneq_f64(vmlaq_n_f64(v603, v590, v604.f64[0]), v592, v604, 1);
      v607 = *(float64x2_t *)((char *)&v1056[-14] + 8);
      v608 = vmlaq_laneq_f64(vmlaq_n_f64(v579, v582, v607.f64[0]), v583, v607, 1);
      v609 = *(float64x2_t *)((char *)&v1056[-13] + 8);
      v610 = vmlaq_laneq_f64(vmlaq_n_f64(v608, v589, v609.f64[0]), v591, v609, 1);
      v611 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v580, v581, v607.f64[0]), v584, v607, 1), v590, v609.f64[0]), v592, v609, 1);
      v612 = v17[65];
      v613 = v17[64];
      v614 = *(float64x2_t *)((char *)v17 + 1144);
      v615 = *(float64x2_t *)((char *)v17 + 1160);
      v616 = v1056[-34];
      v617 = vmlaq_laneq_f64(vmlaq_n_f64(v593, v613, v616.f64[0]), v614, v616, 1);
      v618 = vmlaq_laneq_f64(vmlaq_n_f64(v594, v612, v616.f64[0]), v615, v616, 1);
      v619 = *(float64x2_t *)((char *)&v1056[-27] + 8);
      v620 = vmlaq_laneq_f64(vmlaq_n_f64(v599, v613, v619.f64[0]), v614, v619, 1);
      v621 = vmlaq_laneq_f64(vmlaq_n_f64(v600, v612, v619.f64[0]), v615, v619, 1);
      v622 = v1056[-19];
      v623 = vmlaq_laneq_f64(vmlaq_n_f64(v605, v613, v622.f64[0]), v614, v622, 1);
      v624 = vmlaq_laneq_f64(vmlaq_n_f64(v606, v612, v622.f64[0]), v615, v622, 1);
      v625 = *(float64x2_t *)((char *)&v1056[-12] + 8);
      v626 = vmlaq_n_f64(v610, v613, v625.f64[0]);
      v627 = v17[80];
      v628 = vmlaq_laneq_f64(v626, v614, v625, 1);
      v629 = v17[79];
      v630 = vmlaq_laneq_f64(vmlaq_n_f64(v611, v612, v625.f64[0]), v615, v625, 1);
      v632 = *(float64x2_t *)((char *)v17 + 1384);
      v631 = *(float64x2_t *)((char *)v17 + 1400);
      v633 = *(float64x2_t *)((char *)&v1056[-26] + 8);
      v634 = vmlaq_laneq_f64(vmlaq_n_f64(v620, v629, v633.f64[0]), v632, v633, 1);
      v635 = vmlaq_laneq_f64(vmlaq_n_f64(v621, v627, v633.f64[0]), v631, v633, 1);
      v636 = v17[94];
      v637 = *(float64x2_t *)((char *)&v1056[-25] + 8);
      v638 = *(float64x2_t *)((char *)v17 + 1624);
      v639 = *(float64x2_t *)((char *)v17 + 1640);
      _Q12 = vmlaq_laneq_f64(vmlaq_n_f64(v634, v636, v637.f64[0]), v638, v637, 1);
      _Q14 = v17[95];
      _Q13 = vmlaq_laneq_f64(vmlaq_n_f64(v635, _Q14, v637.f64[0]), v639, v637, 1);
      _Q10 = v17[109];
      v612.f64[0] = v1056[-24].f64[1];
      v644 = v17[110];
      *(float64x2_t *)((char *)v16 + 664) = vmlaq_n_f64(_Q12, _Q10, v612.f64[0]);
      *(float64x2_t *)((char *)v16 + 680) = vmlaq_n_f64(_Q13, v644, v612.f64[0]);
      v645 = *(float64x2_t *)((char *)&v1056[-11] + 8);
      v646 = vmlaq_laneq_f64(vmlaq_n_f64(v628, v629, v645.f64[0]), v632, v645, 1);
      v647 = vmlaq_laneq_f64(vmlaq_n_f64(v630, v627, v645.f64[0]), v631, v645, 1);
      v648 = *(float64x2_t *)((char *)&v1056[-10] + 8);
      v649 = vmlaq_laneq_f64(vmlaq_n_f64(v646, v636, v648.f64[0]), v638, v648, 1);
      v650 = vmlaq_laneq_f64(vmlaq_n_f64(v647, _Q14, v648.f64[0]), v639, v648, 1);
      v648.f64[0] = v1056[-9].f64[1];
      *(float64x2_t *)(a11 + 3440) = vmlaq_n_f64(v650, v644, v648.f64[0]);
      *(float64x2_t *)(a11 + 3424) = vmlaq_n_f64(v649, _Q10, v648.f64[0]);
      v651 = v1056[-33];
      v652 = vmlaq_laneq_f64(vmlaq_n_f64(v617, v629, v651.f64[0]), v632, v651, 1);
      v653 = vmlaq_laneq_f64(vmlaq_n_f64(v618, v627, v651.f64[0]), v631, v651, 1);
      v654 = v1056[-18];
      v655 = vmlaq_laneq_f64(vmlaq_n_f64(v623, v629, v654.f64[0]), v632, v654, 1);
      _Q2 = *(float64x2_t *)((char *)&v1056[-30] + 8);
      _Q30 = vmlaq_laneq_f64(vmlaq_n_f64(v624, v627, v654.f64[0]), v631, v654, 1);
      _Q3 = *(float64x2_t *)((char *)&v1056[-15] + 8);
      v659 = v1056[-32];
      v660 = vmlaq_laneq_f64(vmlaq_n_f64(v652, v636, v659.f64[0]), v638, v659, 1);
      v661 = vmlaq_laneq_f64(vmlaq_n_f64(v653, _Q14, v659.f64[0]), v639, v659, 1);
      v659.f64[0] = v1056[-31].f64[0];
      v662 = vmlaq_n_f64(v660, _Q10, v659.f64[0]);
      _Q28 = vmlaq_n_f64(v661, v644, v659.f64[0]);
      v664 = v1056[-17];
      _Q5 = *(float64x2_t *)((char *)&v1056[-28] + 8);
      v627.f64[0] = v1056[-16].f64[0];
      v16[34] = v662;
      v16[35] = _Q28;
      v16[49] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v655, v636, v664.f64[0]), v638, v664, 1), _Q10, v627.f64[0]);
      v16[50] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q30, _Q14, v664.f64[0]), v639, v664, 1), v644, v627.f64[0]);
      _Q6 = v17[6];
      _Q30.f64[0] = v17[14].f64[1];
      v667 = *(float64x2_t *)((char *)v17 + 216);
      _Q9 = v17[21];
      _Q10.f64[0] = v17[29].f64[1];
      v669 = *(float64x2_t *)((char *)v17 + 456);
      v670 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, _Q22.f64[0]), v667, _Q22, 1), _Q9, _Q19.f64[0]), v669, _Q19, 1);
      __asm
      {
        FMLA            D28, D30, V22.D[1]
        FMLA            D28, D10, V19.D[1]
      }
      v671 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, _Q20.f64[0]), v667, _Q20, 1), _Q9, _Q2.f64[0]), v669, _Q2, 1);
      __asm
      {
        FMLA            D22, D30, V20.D[1]
        FMLA            D22, D10, V2.D[1]
      }
      _Q2.f64[1] = v1126.f64[1];
      __asm { FMLA            D20, D30, V2.D[1] }
      _Q2 = *(float64x2_t *)((char *)&v1056[-13] + 8);
      v673 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, v1126.f64[0]), v667, v1126, 1), _Q9, _Q25.f64[0]), v669, _Q25, 1);
      __asm { FMLA            D20, D10, V25.D[1] }
      _Q12.f64[1] = v1125.f64[1];
      v674 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, v1125.f64[0]), v667, v1125, 1), _Q9, _Q3.f64[0]), v669, _Q3, 1);
      __asm
      {
        FMLA            D19, D30, V12.D[1]
        FMLA            D19, D10, V3.D[1]
      }
      _Q4 = v17[36];
      _Q6.f64[0] = v17[44].f64[1];
      v676 = *(float64x2_t **)&v1131.f64[0];
      _Q8 = v17[51];
      _Q9.f64[0] = v17[59].f64[1];
      v678 = *(float64x2_t **)&v1130.f64[0];
      v679 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v670, _Q4, _Q7.f64[0]), **(float64x2_t **)&v1131.f64[0], _Q7, 1), _Q8, _Q26.f64[0]), **(float64x2_t **)&v1130.f64[0], _Q26, 1);
      __asm
      {
        FMLA            D28, D6, V7.D[1]
        FMLA            D28, D9, V26.D[1]
        FMLA            D22, D6, V16.D[1]
        FMLA            D22, D9, V5.D[1]
      }
      v680 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v673, _Q4, _Q17.f64[0]), **(float64x2_t **)&v1131.f64[0], _Q17, 1), _Q8, _Q27.f64[0]), **(float64x2_t **)&v1130.f64[0], _Q27, 1);
      __asm
      {
        FMLA            D20, D6, V17.D[1]
        FMLA            D20, D9, V27.D[1]
      }
      v681 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v674, _Q4, _Q18.f64[0]), **(float64x2_t **)&v1131.f64[0], _Q18, 1), _Q8, _Q2.f64[0]), **(float64x2_t **)&v1130.f64[0], _Q2, 1);
      __asm
      {
        FMLA            D19, D6, V18.D[1]
        FMLA            D19, D9, V2.D[1]
      }
      v682 = v17[66];
      _Q7.f64[0] = v17[74].f64[1];
      v683 = *(float64x2_t **)&v1129.f64[0];
      v684 = **(float64x2_t **)&v1129.f64[0];
      v685 = v17[81];
      _Q17.f64[0] = v17[89].f64[1];
      v686 = *(float64x2_t **)&v1128.f64[0];
      v687 = **(float64x2_t **)&v1128.f64[0];
      _Q31 = *(float64x2_t *)((char *)&v1056[-26] + 8);
      _Q13.f64[1] = v1121.f64[1];
      v689 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v671, _Q4, _Q16.f64[0]), **(float64x2_t **)&v1131.f64[0], _Q16, 1), _Q8, _Q5.f64[0]), **(float64x2_t **)&v1130.f64[0], _Q5, 1), v682, v1121.f64[0]), **(float64x2_t **)&v1129.f64[0], v1121, 1), v685, _Q31.f64[0]), **(float64x2_t **)&v1128.f64[0],
               _Q31,
               1);
      _Q14.f64[1] = v1122.f64[1];
      _Q25 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v681, v682, v1122.f64[0]), **(float64x2_t **)&v1129.f64[0], v1122, 1), v685, _Q23.f64[0]), **(float64x2_t **)&v1128.f64[0], _Q23, 1);
      v691 = v17[96];
      _Q4.f64[0] = v17[104].f64[1];
      v692 = *(float64x2_t **)&v1127.f64[0];
      v693 = **(float64x2_t **)&v1127.f64[0];
      _Q8.f64[0] = v17[112].f64[0];
      v694 = v17[111];
      _Q10.f64[0] = v1056[-24].f64[1];
      _Q11 = *(float64x2_t *)((char *)&v1056[-25] + 8);
      *(float64x2_t *)((char *)v16 + 696) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v689, v691, _Q11.f64[0]), **(float64x2_t **)&v1127.f64[0], _Q11, 1), v694, _Q10.f64[0]);
      _Q29 = *(float64x2_t *)((char *)&v1056[-10] + 8);
      _Q12.f64[0] = v1056[-9].f64[1];
      *(float64x2_t *)((char *)v16 + 936) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q25, v691, _Q29.f64[0]), v693, _Q29, 1), v694, _Q12.f64[0]);
      _Q25.f64[1] = v1124.f64[1];
      v697 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v679, v682, v1124.f64[0]), v684, v1124, 1), v685, _Q24.f64[0]), v687, _Q24, 1);
      __asm
      {
        FMLA            D28, D7, V25.D[1]
        FMLA            D28, D17, V24.D[1]
        FMLA            D22, D7, V13.D[1]
      }
      _Q24.f64[0] = v1056[-31].f64[0];
      _Q25 = v1056[-32];
      _Q13 = v1056[-17];
      __asm { FMLA            D22, D17, V31.D[1] }
      _Q31.f64[1] = v1123.f64[1];
      __asm
      {
        FMLA            D20, D7, V31.D[1]
        FMLA            D20, D17, V21.D[1]
        FMLA            D19, D7, V14.D[1]
        FMLA            D19, D17, V23.D[1]
      }
      _Q6.f64[0] = v1056[-16].f64[0];
      __asm
      {
        FMLA            D28, D4, V25.D[1]
        FMLA            D22, D4, V11.D[1]
      }
      v700 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v680, v682, v1123.f64[0]), v684, v1123, 1), v685, _Q21.f64[0]), v687, _Q21, 1), v691, _Q13.f64[0]), v693, _Q13, 1), v694, _Q6.f64[0]);
      __asm
      {
        FMLA            D20, D4, V13.D[1]
        FMLA            D19, D4, V29.D[1]
      }
      v16[37].f64[0] = _Q28.f64[0] + _Q8.f64[0] * _Q24.f64[0];
      v16[36] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v697, v691, _Q25.f64[0]), v693, _Q25, 1), v694, _Q24.f64[0]);
      v16[44].f64[1] = _Q22.f64[0] + _Q8.f64[0] * _Q10.f64[0];
      v16[52].f64[0] = _Q20.f64[0] + _Q8.f64[0] * _Q6.f64[0];
      v16[51] = v700;
      v16[59].f64[1] = _Q19.f64[0] + _Q8.f64[0] * _Q12.f64[0];
      v701 = v1056[-7];
      v702 = v1056[-8];
      v703 = v1056[-5];
      v704 = v1056[-6];
      v705 = v1056[-3];
      v706 = v1056[-4];
      _Q4.f64[0] = v1056[-1].f64[0];
      v707 = v1056[-2];
      v708 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17[1], v702.f64[0]), *(float64x2_t *)((char *)v17 + 136), v702, 1), v17[16], v701.f64[0]),
                                     *(float64x2_t *)((char *)v17 + 376),
                                     v701,
                                     1),
                                   v17[31],
                                   v704.f64[0]),
                                 *(float64x2_t *)((char *)v17 + 616),
                                 v704,
                                 1),
                               v17[46],
                               v703.f64[0]),
                             *(float64x2_t *)((char *)v17 + 856),
                             v703,
                             1),
                           v17[61],
                           v706.f64[0]),
                         *(float64x2_t *)((char *)v17 + 1096),
                         v706,
                         1),
                       v17[76],
                       v705.f64[0]),
                     *(float64x2_t *)((char *)v17 + 1336),
                     v705,
                     1),
                   v17[91],
                   v707.f64[0]),
                 *(float64x2_t *)((char *)v17 + 1576),
                 v707,
                 1),
               v17[106],
               _Q4.f64[0]);
      v16[60] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v702.f64[0]), *(float64x2_t *)((char *)v17 + 120), v702, 1), v17[15], v701.f64[0]),
                                        *(float64x2_t *)((char *)v17 + 360),
                                        v701,
                                        1),
                                      v17[30],
                                      v704.f64[0]),
                                    *(float64x2_t *)((char *)v17 + 600),
                                    v704,
                                    1),
                                  v17[45],
                                  v703.f64[0]),
                                *(float64x2_t *)((char *)v17 + 840),
                                v703,
                                1),
                              v17[60],
                              v706.f64[0]),
                            *(float64x2_t *)((char *)v17 + 1080),
                            v706,
                            1),
                          v17[75],
                          v705.f64[0]),
                        *(float64x2_t *)((char *)v17 + 1320),
                        v705,
                        1),
                      v17[90],
                      v707.f64[0]),
                    *(float64x2_t *)((char *)v17 + 1560),
                    v707,
                    1),
                  v17[105],
                  _Q4.f64[0]);
      v16[61] = v708;
      v709 = v1056[-7];
      v710 = v1056[-8];
      v711 = v1056[-5];
      v712 = v1056[-6];
      v713 = v1056[-3];
      v714 = v1056[-4];
      _Q4.f64[0] = v1056[-1].f64[0];
      v715 = v1056[-2];
      v716 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17[3], v710.f64[0]), *(float64x2_t *)((char *)v17 + 168), v710, 1), v17[18], v709.f64[0]),
                                     *(float64x2_t *)((char *)v17 + 408),
                                     v709,
                                     1),
                                   v17[33],
                                   v712.f64[0]),
                                 *(float64x2_t *)((char *)v17 + 648),
                                 v712,
                                 1),
                               v17[48],
                               v711.f64[0]),
                             *(float64x2_t *)((char *)v17 + 888),
                             v711,
                             1),
                           v17[63],
                           v714.f64[0]),
                         *(float64x2_t *)((char *)v17 + 1128),
                         v714,
                         1),
                       v17[78],
                       v713.f64[0]),
                     *(float64x2_t *)((char *)v17 + 1368),
                     v713,
                     1),
                   v17[93],
                   v715.f64[0]),
                 *(float64x2_t *)((char *)v17 + 1608),
                 v715,
                 1),
               v17[108],
               _Q4.f64[0]);
      v16[62] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17[2], v710.f64[0]), *(float64x2_t *)((char *)v17 + 152), v710, 1), v17[17], v709.f64[0]),
                                        *(float64x2_t *)((char *)v17 + 392),
                                        v709,
                                        1),
                                      v17[32],
                                      v712.f64[0]),
                                    *(float64x2_t *)((char *)v17 + 632),
                                    v712,
                                    1),
                                  v17[47],
                                  v711.f64[0]),
                                *(float64x2_t *)((char *)v17 + 872),
                                v711,
                                1),
                              v17[62],
                              v714.f64[0]),
                            *(float64x2_t *)((char *)v17 + 1112),
                            v714,
                            1),
                          v17[77],
                          v713.f64[0]),
                        *(float64x2_t *)((char *)v17 + 1352),
                        v713,
                        1),
                      v17[92],
                      v715.f64[0]),
                    *(float64x2_t *)((char *)v17 + 1592),
                    v715,
                    1),
                  v17[107],
                  _Q4.f64[0]);
      v16[63] = v716;
      _Q26 = v1056[-7];
      v718 = v1056[-8];
      v719 = v1056[-5];
      v720 = v1056[-6];
      _Q20 = v1056[-3];
      v722 = v1056[-4];
      _Q4.f64[0] = v1056[-1].f64[0];
      v723 = v1056[-2];
      v724 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17[4], v718.f64[0]), *(float64x2_t *)((char *)v17 + 184), v718, 1), v17[19], _Q26.f64[0]),
                                     *(float64x2_t *)((char *)v17 + 424),
                                     _Q26,
                                     1),
                                   v17[34],
                                   v720.f64[0]),
                                 *(float64x2_t *)((char *)v17 + 664),
                                 v720,
                                 1),
                               v17[49],
                               v719.f64[0]),
                             *(float64x2_t *)((char *)v17 + 904),
                             v719,
                             1),
                           v17[64],
                           v722.f64[0]),
                         *(float64x2_t *)((char *)v17 + 1144),
                         v722,
                         1),
                       v17[79],
                       _Q20.f64[0]),
                     *(float64x2_t *)((char *)v17 + 1384),
                     _Q20,
                     1),
                   v17[94],
                   v723.f64[0]),
                 *(float64x2_t *)((char *)v17 + 1624),
                 v723,
                 1),
               v17[109],
               _Q4.f64[0]);
      v16[65] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17[5], v718.f64[0]), *(float64x2_t *)((char *)v17 + 200), v718, 1), v17[20], _Q26.f64[0]),
                                        *(float64x2_t *)((char *)v17 + 440),
                                        _Q26,
                                        1),
                                      v17[35],
                                      v720.f64[0]),
                                    *(float64x2_t *)((char *)v17 + 680),
                                    v720,
                                    1),
                                  v17[50],
                                  v719.f64[0]),
                                *(float64x2_t *)((char *)v17 + 920),
                                v719,
                                1),
                              v17[65],
                              v722.f64[0]),
                            *(float64x2_t *)((char *)v17 + 1160),
                            v722,
                            1),
                          v17[80],
                          _Q20.f64[0]),
                        *(float64x2_t *)((char *)v17 + 1400),
                        _Q20,
                        1),
                      v17[95],
                      v723.f64[0]),
                    *(float64x2_t *)((char *)v17 + 1640),
                    v723,
                    1),
                  v17[110],
                  _Q4.f64[0]);
      v16[64] = v724;
      _Q16.f64[0] = v17[14].f64[1];
      _Q20.f64[0] = v17[29].f64[1];
      _Q23.f64[0] = v17[44].f64[1];
      _Q26.f64[0] = v17[59].f64[1];
      _Q29.f64[0] = v17[74].f64[1];
      _Q8.f64[0] = v17[89].f64[1];
      _Q11.f64[0] = v17[104].f64[1];
      _Q14 = v1056[-7];
      _Q15 = v1056[-8];
      v727 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17[6], _Q15.f64[0]), *(float64x2_t *)((char *)v17 + 216), _Q15, 1), v17[21], _Q14.f64[0]), *(float64x2_t *)((char *)v17 + 456), _Q14, 1);
      _Q0 = v1056[-5];
      _Q17 = v1056[-3];
      v724.f64[0] = v1056[-1].f64[0];
      __asm { FMLA            D6, D16, V15.D[1] }
      _Q16 = v1056[-6];
      _Q18 = v1056[-4];
      _Q15 = v1056[-2];
      __asm
      {
        FMLA            D6, D20, V14.D[1]
        FMLA            D6, D23, V16.D[1]
        FMLA            D6, D26, V0.D[1]
        FMLA            D6, D29, V18.D[1]
        FMLA            D6, D8, V17.D[1]
      }
      v733 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v727, v17[36], _Q16.f64[0]), *v676, _Q16, 1), v17[51], _Q0.f64[0]), *v678, _Q0, 1), v17[66], _Q18.f64[0]), *v683, _Q18, 1),
                       v17[81],
                       _Q17.f64[0]),
                     *v686,
                     _Q17,
                     1),
                   v17[96],
                   _Q15.f64[0]),
                 *v692,
                 _Q15,
                 1),
               v17[111],
               v724.f64[0]);
      __asm { FMLA            D6, D11, V15.D[1] }
      v16[67].f64[0] = _Q6.f64[0] + v17[112].f64[0] * v724.f64[0];
      v16[66] = v733;
      break;
    case 1:
      for (i = 0; i != 1080; i += 120)
      {
        v735 = *(float64x2_t *)(a11 + i + 2520);
        v736 = *(float64x2_t *)(a11 + i + 2536);
        v737 = *(float64x2_t *)(a11 + i + 2552);
        v738 = *(float64x2_t *)(a11 + i + 2568);
        v739 = *(float64x2_t *)(a11 + i + 2584);
        v740 = *(float64x2_t *)(a11 + i + 2600);
        v741 = *(float64x2_t *)(a11 + i + 2616);
        a9.f64[0] = *(float64_t *)(a11 + i + 2632);
        v13.f64[0] = a12[8].f64[0];
        v742 = a12[3];
        v743 = a12[4];
        v744 = a12[5];
        v745 = a12[6];
        v746 = a12[7];
        v1131 = vmulq_f64(a9, v13);
        v1130 = vmulq_f64(v741, v746);
        v1129 = vmulq_f64(v740, v745);
        v1128 = vmulq_f64(v739, v744);
        v1127 = vmulq_f64(v738, v743);
        v1126 = vmulq_f64(v737, v742);
        v747 = a12[1];
        v1125 = vmulq_f64(v736, a12[2]);
        v1124 = vmulq_f64(v735, v747);
        result = memcpy(v1132, v16, sizeof(v1132));
        v748 = (float64x2_t *)&v1132[i];
        v749 = v1125;
        *v748 = v1124;
        v748[1] = v749;
        v750 = v1127;
        v748[2] = v1126;
        v748[3] = v750;
        v751 = v1129;
        v748[4] = v1128;
        v748[5] = v751;
        v748[6] = v1130;
        v748[7].f64[0] = v1131.f64[0];
        v752 = *(float64x2_t *)&v1132[1024];
        v16[67].f64[0] = *(float64_t *)&v1132[1072];
        v16[66] = *(float64x2_t *)&v1132[1056];
        v16[65] = *(float64x2_t *)&v1132[1040];
        v753 = *(float64x2_t *)&v1132[992];
        v16[63] = *(float64x2_t *)&v1132[1008];
        v16[64] = v752;
        v754 = *(float64x2_t *)&v1132[960];
        v16[61] = *(float64x2_t *)&v1132[976];
        v16[62] = v753;
        v755 = *(float64x2_t *)&v1132[928];
        v16[59] = *(float64x2_t *)&v1132[944];
        v16[60] = v754;
        v756 = *(float64x2_t *)&v1132[896];
        v16[57] = *(float64x2_t *)&v1132[912];
        v16[58] = v755;
        v757 = *(float64x2_t *)&v1132[864];
        v16[55] = *(float64x2_t *)&v1132[880];
        v16[56] = v756;
        v758 = *(float64x2_t *)&v1132[832];
        v16[53] = *(float64x2_t *)&v1132[848];
        v16[54] = v757;
        v759 = *(float64x2_t *)&v1132[800];
        v16[51] = *(float64x2_t *)&v1132[816];
        v16[52] = v758;
        v760 = *(float64x2_t *)&v1132[768];
        v16[49] = *(float64x2_t *)&v1132[784];
        v16[50] = v759;
        v761 = *(float64x2_t *)&v1132[736];
        v16[47] = *(float64x2_t *)&v1132[752];
        v16[48] = v760;
        v762 = *(float64x2_t *)&v1132[704];
        v16[45] = *(float64x2_t *)&v1132[720];
        v16[46] = v761;
        v763 = *(float64x2_t *)&v1132[672];
        v16[43] = *(float64x2_t *)&v1132[688];
        v16[44] = v762;
        v764 = *(float64x2_t *)&v1132[640];
        v16[41] = *(float64x2_t *)&v1132[656];
        v16[42] = v763;
        v765 = *(float64x2_t *)&v1132[608];
        v16[39] = *(float64x2_t *)&v1132[624];
        v16[40] = v764;
        v766 = *(float64x2_t *)&v1132[576];
        v16[37] = *(float64x2_t *)&v1132[592];
        v16[38] = v765;
        v767 = *(float64x2_t *)&v1132[544];
        v16[35] = *(float64x2_t *)&v1132[560];
        v16[36] = v766;
        v768 = *(float64x2_t *)&v1132[512];
        v16[33] = *(float64x2_t *)&v1132[528];
        v16[34] = v767;
        v769 = *(float64x2_t *)&v1132[480];
        v16[31] = *(float64x2_t *)&v1132[496];
        v16[32] = v768;
        v770 = *(float64x2_t *)&v1132[448];
        v16[29] = *(float64x2_t *)&v1132[464];
        v16[30] = v769;
        v771 = *(float64x2_t *)&v1132[416];
        v16[27] = *(float64x2_t *)&v1132[432];
        v16[28] = v770;
        v772 = *(float64x2_t *)&v1132[384];
        v16[25] = *(float64x2_t *)&v1132[400];
        v16[26] = v771;
        v773 = *(float64x2_t *)&v1132[352];
        v16[23] = *(float64x2_t *)&v1132[368];
        v16[24] = v772;
        v774 = *(float64x2_t *)&v1132[320];
        v16[21] = *(float64x2_t *)&v1132[336];
        v16[22] = v773;
        v775 = *(float64x2_t *)&v1132[288];
        v16[19] = *(float64x2_t *)&v1132[304];
        v16[20] = v774;
        v776 = *(float64x2_t *)&v1132[256];
        v16[17] = *(float64x2_t *)&v1132[272];
        v16[18] = v775;
        v777 = *(float64x2_t *)&v1132[224];
        v16[15] = *(float64x2_t *)&v1132[240];
        v16[16] = v776;
        v778 = *(float64x2_t *)&v1132[192];
        v16[13] = *(float64x2_t *)&v1132[208];
        v16[14] = v777;
        v779 = *(float64x2_t *)&v1132[160];
        v16[11] = *(float64x2_t *)&v1132[176];
        v16[12] = v778;
        v780 = *(float64x2_t *)&v1132[128];
        v16[9] = *(float64x2_t *)&v1132[144];
        v16[10] = v779;
        v781 = *(float64x2_t *)&v1132[96];
        v16[7] = *(float64x2_t *)&v1132[112];
        v16[8] = v780;
        v782 = *(float64x2_t *)&v1132[64];
        v16[5] = *(float64x2_t *)&v1132[80];
        v16[6] = v781;
        v783 = *(float64x2_t *)&v1132[32];
        v16[3] = *(float64x2_t *)&v1132[48];
        v16[4] = v782;
        v784 = *(float64x2_t *)v1132;
        v16[1] = *(float64x2_t *)&v1132[16];
        v16[2] = v783;
        *v16 = v784;
      }
      break;
    case 2:
      a2.f64[0] = a12[1].f64[0];
      a3.f64[0] = *(float64_t *)(a11 + 3592);
      v786 = *(float64x2_t *)(a11 + 2968);
      v785 = *(float64x2_t *)(a11 + 2984);
      v788 = *(float64x2_t *)(a11 + 2936);
      v787 = *(float64x2_t *)(a11 + 2952);
      v789 = *(float64x2_t *)(a11 + 2904);
      v790 = *(float64x2_t *)(a11 + 2920);
      v791 = *(float64x2_t *)(a11 + 2872);
      v792 = *(float64x2_t *)(a11 + 2888);
      v793 = *(float64x2_t *)(a11 + 2840);
      v794 = *(float64x2_t *)(a11 + 2856);
      v795 = *(float64x2_t *)(a11 + 2808);
      v796 = *(float64x2_t *)(a11 + 2824);
      v797 = *(float64x2_t *)(a11 + 2776);
      v798 = *(float64x2_t *)(a11 + 2792);
      v799 = *(float64x2_t *)(a11 + 2744);
      v800 = *(float64x2_t *)(a11 + 2760);
      v801 = *(float64x2_t *)(a11 + 2712);
      v802 = *(float64x2_t *)(a11 + 2728);
      v803 = *(float64x2_t *)(a11 + 2680);
      v804 = *(float64x2_t *)(a11 + 2696);
      v805 = *(float64x2_t *)(a11 + 2648);
      v806 = *(float64x2_t *)(a11 + 2664);
      v807 = *(float64x2_t *)(a11 + 2616);
      v808 = *(float64x2_t *)(a11 + 2632);
      v809 = *(float64x2_t *)(a11 + 2584);
      v810 = *(float64x2_t *)(a11 + 2600);
      v812 = *(float64x2_t *)(a11 + 2552);
      v811 = *(float64x2_t *)(a11 + 2568);
      v814 = *v16;
      v813 = *(float64x2_t *)(a11 + 2536);
      v1131 = vmulq_f64(a3, a2);
      v1130 = vmulq_n_f64(v814, a2.f64[0]);
      v1129 = vmulq_n_f64(v813, a2.f64[0]);
      v1128 = vmulq_n_f64(v812, a2.f64[0]);
      v1127 = vmulq_n_f64(v811, a2.f64[0]);
      v1126 = vmulq_n_f64(v809, a2.f64[0]);
      v1125 = vmulq_n_f64(v810, a2.f64[0]);
      v1124 = vmulq_n_f64(v807, a2.f64[0]);
      v1123 = vmulq_n_f64(v808, a2.f64[0]);
      v1122 = vmulq_n_f64(v805, a2.f64[0]);
      v1121 = vmulq_n_f64(v806, a2.f64[0]);
      v1120 = vmulq_n_f64(v803, a2.f64[0]);
      v1119 = vmulq_n_f64(v804, a2.f64[0]);
      v1118 = vmulq_n_f64(v801, a2.f64[0]);
      v1117 = vmulq_n_f64(v802, a2.f64[0]);
      v1116 = vmulq_n_f64(v799, a2.f64[0]);
      v1115 = vmulq_n_f64(v800, a2.f64[0]);
      v1114 = vmulq_n_f64(v797, a2.f64[0]);
      v1113 = vmulq_n_f64(v798, a2.f64[0]);
      v1112 = vmulq_n_f64(v795, a2.f64[0]);
      v1111 = vmulq_n_f64(v796, a2.f64[0]);
      v1110 = vmulq_n_f64(v793, a2.f64[0]);
      v1109 = vmulq_n_f64(v794, a2.f64[0]);
      v1108 = vmulq_n_f64(v791, a2.f64[0]);
      v1107 = vmulq_n_f64(v792, a2.f64[0]);
      v1106 = vmulq_n_f64(v789, a2.f64[0]);
      v1105 = vmulq_n_f64(v790, a2.f64[0]);
      v1104 = vmulq_n_f64(v788, a2.f64[0]);
      v1103 = vmulq_n_f64(v787, a2.f64[0]);
      v1102 = vmulq_n_f64(v786, a2.f64[0]);
      v1101 = vmulq_n_f64(v785, a2.f64[0]);
      v1100 = vmulq_n_f64(*(float64x2_t *)(a11 + 3000), a2.f64[0]);
      v1099 = vmulq_n_f64(*(float64x2_t *)(a11 + 3016), a2.f64[0]);
      v1098 = vmulq_n_f64(*(float64x2_t *)(a11 + 3032), a2.f64[0]);
      v1097 = vmulq_n_f64(*(float64x2_t *)(a11 + 3048), a2.f64[0]);
      v815 = *(float64x2_t *)(a11 + 3080);
      v1096 = vmulq_n_f64(*(float64x2_t *)(a11 + 3064), a2.f64[0]);
      v1095 = vmulq_n_f64(v815, a2.f64[0]);
      v816 = vmulq_n_f64(*(float64x2_t *)(a11 + 3096), a2.f64[0]);
      v817 = vmulq_n_f64(*(float64x2_t *)(a11 + 3112), a2.f64[0]);
      v818 = vmulq_n_f64(*(float64x2_t *)(a11 + 3128), a2.f64[0]);
      v819 = vmulq_n_f64(*(float64x2_t *)(a11 + 3144), a2.f64[0]);
      v820 = vmulq_n_f64(*(float64x2_t *)(a11 + 3160), a2.f64[0]);
      v821 = vmulq_n_f64(*(float64x2_t *)(a11 + 3176), a2.f64[0]);
      v822 = vmulq_n_f64(*(float64x2_t *)(a11 + 3192), a2.f64[0]);
      v823 = vmulq_n_f64(*(float64x2_t *)(a11 + 3208), a2.f64[0]);
      v824 = vmulq_n_f64(*(float64x2_t *)(a11 + 3224), a2.f64[0]);
      v825 = vmulq_n_f64(*(float64x2_t *)(a11 + 3240), a2.f64[0]);
      v826 = vmulq_n_f64(*(float64x2_t *)(a11 + 3256), a2.f64[0]);
      v827 = vmulq_n_f64(*(float64x2_t *)(a11 + 3272), a2.f64[0]);
      v828 = vmulq_n_f64(*(float64x2_t *)(a11 + 3288), a2.f64[0]);
      v829 = vmulq_n_f64(*(float64x2_t *)(a11 + 3304), a2.f64[0]);
      v830 = vmulq_n_f64(*(float64x2_t *)(a11 + 3320), a2.f64[0]);
      v831 = vmulq_n_f64(*(float64x2_t *)(a11 + 3336), a2.f64[0]);
      v832 = vmulq_n_f64(*(float64x2_t *)(a11 + 3352), a2.f64[0]);
      v833 = vmulq_n_f64(*(float64x2_t *)(a11 + 3368), a2.f64[0]);
      v834 = vmulq_n_f64(*(float64x2_t *)(a11 + 3384), a2.f64[0]);
      v835 = vmulq_n_f64(*(float64x2_t *)(a11 + 3400), a2.f64[0]);
      v836 = vmulq_n_f64(*(float64x2_t *)(a11 + 3416), a2.f64[0]);
      v837 = vmulq_n_f64(*(float64x2_t *)(a11 + 3432), a2.f64[0]);
      v838 = vmulq_n_f64(*(float64x2_t *)(a11 + 3448), a2.f64[0]);
      v839 = vmulq_n_f64(*(float64x2_t *)(a11 + 3464), a2.f64[0]);
      v840 = vmulq_n_f64(*(float64x2_t *)(a11 + 3480), a2.f64[0]);
      v841 = vmulq_n_f64(*(float64x2_t *)(a11 + 3496), a2.f64[0]);
      v842 = vmulq_n_f64(*(float64x2_t *)(a11 + 3512), a2.f64[0]);
      v843 = vmulq_n_f64(*(float64x2_t *)(a11 + 3528), a2.f64[0]);
      v844 = vmulq_n_f64(*(float64x2_t *)(a11 + 3544), a2.f64[0]);
      v845 = vmulq_n_f64(*(float64x2_t *)(a11 + 3560), a2.f64[0]);
      *(float64x2_t *)(a11 + 3576) = vmulq_n_f64(*(float64x2_t *)(a11 + 3576), a2.f64[0]);
      *(float64x2_t *)(a11 + 3560) = v845;
      *(float64x2_t *)(a11 + 3528) = v843;
      *(float64x2_t *)(a11 + 3544) = v844;
      *(float64x2_t *)(a11 + 3496) = v841;
      *(float64x2_t *)(a11 + 3512) = v842;
      *(float64x2_t *)(a11 + 3464) = v839;
      *(float64x2_t *)(a11 + 3480) = v840;
      *(float64x2_t *)(a11 + 3432) = v837;
      *(float64x2_t *)(a11 + 3448) = v838;
      *(float64x2_t *)(a11 + 3400) = v835;
      *(float64x2_t *)(a11 + 3416) = v836;
      *(float64x2_t *)(a11 + 3368) = v833;
      *(float64x2_t *)(a11 + 3384) = v834;
      *(float64x2_t *)(a11 + 3336) = v831;
      *(float64x2_t *)(a11 + 3352) = v832;
      *(float64x2_t *)(a11 + 3304) = v829;
      *(float64x2_t *)(a11 + 3320) = v830;
      *(float64x2_t *)(a11 + 3272) = v827;
      *(float64x2_t *)(a11 + 3288) = v828;
      *(float64x2_t *)(a11 + 3240) = v825;
      *(float64x2_t *)(a11 + 3256) = v826;
      *(float64x2_t *)(a11 + 3208) = v823;
      *(float64x2_t *)(a11 + 3224) = v824;
      *(float64x2_t *)(a11 + 3176) = v821;
      *(float64x2_t *)(a11 + 3192) = v822;
      *(float64x2_t *)(a11 + 3144) = v819;
      *(float64x2_t *)(a11 + 3160) = v820;
      *(float64x2_t *)(a11 + 3112) = v817;
      *(float64x2_t *)(a11 + 3128) = v818;
      *(float64x2_t *)(a11 + 3080) = v1095;
      *(float64x2_t *)(a11 + 3096) = v816;
      v846 = v1096;
      *(float64x2_t *)(a11 + 3048) = v1097;
      *(float64x2_t *)(a11 + 3064) = v846;
      v847 = v1098;
      *(float64x2_t *)(a11 + 3016) = v1099;
      *(float64x2_t *)(a11 + 3032) = v847;
      v848 = v1100;
      *(float64x2_t *)(a11 + 2984) = v1101;
      *(float64x2_t *)(a11 + 3000) = v848;
      v849 = v1102;
      *(float64x2_t *)(a11 + 2952) = v1103;
      *(float64x2_t *)(a11 + 2968) = v849;
      v850 = v1104;
      *(float64x2_t *)(a11 + 2920) = v1105;
      *(float64x2_t *)(a11 + 2936) = v850;
      v851 = v1106;
      *(float64x2_t *)(a11 + 2888) = v1107;
      *(float64x2_t *)(a11 + 2904) = v851;
      v852 = v1108;
      *(float64x2_t *)(a11 + 2856) = v1109;
      *(float64x2_t *)(a11 + 2872) = v852;
      v853 = v1110;
      *(float64x2_t *)(a11 + 2824) = v1111;
      *(float64x2_t *)(a11 + 2840) = v853;
      v854 = v1112;
      *(float64x2_t *)(a11 + 2792) = v1113;
      *(float64x2_t *)(a11 + 2808) = v854;
      v855 = v1114;
      *(float64x2_t *)(a11 + 2760) = v1115;
      *(float64x2_t *)(a11 + 2776) = v855;
      v856 = v1116;
      *(float64x2_t *)(a11 + 2728) = v1117;
      *(float64x2_t *)(a11 + 2744) = v856;
      v857 = v1118;
      *(float64x2_t *)(a11 + 2696) = v1119;
      *(float64x2_t *)(a11 + 2712) = v857;
      v858 = v1120;
      *(float64x2_t *)(a11 + 2664) = v1121;
      *(float64x2_t *)(a11 + 2680) = v858;
      v859 = v1122;
      *(float64x2_t *)(a11 + 2632) = v1123;
      *(float64x2_t *)(a11 + 2648) = v859;
      v860 = v1124;
      *(float64x2_t *)(a11 + 2600) = v1125;
      *(float64x2_t *)(a11 + 2616) = v860;
      v861 = v1126;
      *(float64x2_t *)(a11 + 2568) = v1127;
      *(float64x2_t *)(a11 + 2584) = v861;
      v862 = v1128;
      *(float64x2_t *)(a11 + 2536) = v1129;
      *(float64x2_t *)(a11 + 2552) = v862;
      *v16 = v1130;
      *(float64_t *)(a11 + 3592) = v1131.f64[0];
      break;
    case 4:
      *(_QWORD *)&v1131.f64[0] = a11;
      v863 = (*(_QWORD *(**)(_BYTE *__return_ptr, float64x2_t *))(*(_QWORD *)&a12->f64[0] + 56))(v1132, a12);
      MEMORY[0x24BDAC7A8](v863);
      memcpy(&v1056[45], v16, 0x438uLL);
      _V17.D[1] = v1056[45].f64[1];
      _V16.D[1] = v1056[60].f64[1];
      _V14.D[1] = v1056[46].f64[1];
      _V13.D[1] = v1056[47].f64[1];
      _V6.D[1] = v1056[61].f64[1];
      _V3.D[1] = v1056[62].f64[1];
      _V4.D[1] = v1056[48].f64[1];
      _V7.D[1] = v1056[63].f64[1];
      _V5.D[1] = v1056[49].f64[1];
      _V1.D[1] = v1056[64].f64[1];
      _V2.D[1] = v1056[50].f64[1];
      _V0.D[1] = v1056[65].f64[1];
      v1122 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[45].f64[0]), *(float64x2_t *)&v1132[120], v1056[45], 1), *(float64x2_t *)&v1132[240], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[360],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[600],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[840],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[49].f64[0]),
                          v1133,
                          v1056[49],
                          1),
                        v1141,
                        v1056[50].f64[0]),
                      v1148,
                      v1056[50],
                      1),
                    v1156,
                    v1056[51].f64[0]),
                  v1163,
                  v1056[51],
                  1),
                v1171,
                v1056[52].f64[0]);
      v1119 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[45].f64[0]), *(float64x2_t *)&v1132[136], v1056[45], 1), *(float64x2_t *)&v1132[256], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[376],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[616],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[856],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[49].f64[0]),
                          v1134,
                          v1056[49],
                          1),
                        v1142,
                        v1056[50].f64[0]),
                      v1149,
                      v1056[50],
                      1),
                    v1157,
                    v1056[51].f64[0]),
                  v1164,
                  v1056[51],
                  1),
                v1172,
                v1056[52].f64[0]);
      v1124 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[52].f64[1]), *(float64x2_t *)&v1132[120], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[240], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[360],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[600],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[840],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[56].f64[1]),
                          v1133,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1141,
                        v1056[57].f64[1]),
                      v1148,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1156,
                    v1056[58].f64[1]),
                  v1163,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1171,
                v1056[59].f64[1]);
      v1121 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[52].f64[1]), *(float64x2_t *)&v1132[136], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[256], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[376],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[616],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[856],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[56].f64[1]),
                          v1134,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1142,
                        v1056[57].f64[1]),
                      v1149,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1157,
                    v1056[58].f64[1]),
                  v1164,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1172,
                v1056[59].f64[1]);
      v1123 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[60].f64[0]), *(float64x2_t *)&v1132[120], v1056[60], 1), *(float64x2_t *)&v1132[240], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[360],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[600],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[840],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[64].f64[0]),
                          v1133,
                          v1056[64],
                          1),
                        v1141,
                        v1056[65].f64[0]),
                      v1148,
                      v1056[65],
                      1),
                    v1156,
                    v1056[66].f64[0]),
                  v1163,
                  v1056[66],
                  1),
                v1171,
                v1056[67].f64[0]);
      v1120 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[60].f64[0]), *(float64x2_t *)&v1132[136], v1056[60], 1), *(float64x2_t *)&v1132[256], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[376],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[616],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[856],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[64].f64[0]),
                          v1134,
                          v1056[64],
                          1),
                        v1142,
                        v1056[65].f64[0]),
                      v1149,
                      v1056[65],
                      1),
                    v1157,
                    v1056[66].f64[0]),
                  v1164,
                  v1056[66],
                  1),
                v1172,
                v1056[67].f64[0]);
      v1116 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[67].f64[1]), *(float64x2_t *)&v1132[120], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[240], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[360],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[600],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[840],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[71].f64[1]),
                          v1133,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1141,
                        v1056[72].f64[1]),
                      v1148,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1156,
                    v1056[73].f64[1]),
                  v1163,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1171,
                v1056[74].f64[1]);
      v1115 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[67].f64[1]), *(float64x2_t *)&v1132[136], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[256], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[376],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[616],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[856],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[71].f64[1]),
                          v1134,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1142,
                        v1056[72].f64[1]),
                      v1149,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1157,
                    v1056[73].f64[1]),
                  v1164,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1172,
                v1056[74].f64[1]);
      v1099 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[45].f64[0]), *(float64x2_t *)&v1132[152], v1056[45], 1), *(float64x2_t *)&v1132[272], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[392],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[512],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[632],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[752],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[872],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[992],
                            v1056[49].f64[0]),
                          v1135,
                          v1056[49],
                          1),
                        v1143,
                        v1056[50].f64[0]),
                      v1150,
                      v1056[50],
                      1),
                    v1158,
                    v1056[51].f64[0]),
                  v1165,
                  v1056[51],
                  1),
                v1173,
                v1056[52].f64[0]);
      v1097 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[45].f64[0]), *(float64x2_t *)&v1132[168], v1056[45], 1), *(float64x2_t *)&v1132[288], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[408],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[528],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[648],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[768],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[888],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[1008],
                            v1056[49].f64[0]),
                          v1136,
                          v1056[49],
                          1),
                        v1144,
                        v1056[50].f64[0]),
                      v1151,
                      v1056[50],
                      1),
                    v1159,
                    v1056[51].f64[0]),
                  v1166,
                  v1056[51],
                  1),
                v1174,
                v1056[52].f64[0]);
      v1098 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[52].f64[1]), *(float64x2_t *)&v1132[152], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[272], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[392],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[512],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[632],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[752],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[872],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[992],
                            v1056[56].f64[1]),
                          v1135,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1143,
                        v1056[57].f64[1]),
                      v1150,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1158,
                    v1056[58].f64[1]),
                  v1165,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1173,
                v1056[59].f64[1]);
      v1095 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[52].f64[1]), *(float64x2_t *)&v1132[168], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[288], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[408],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[528],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[648],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[768],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[888],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[1008],
                            v1056[56].f64[1]),
                          v1136,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1144,
                        v1056[57].f64[1]),
                      v1151,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1159,
                    v1056[58].f64[1]),
                  v1166,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1174,
                v1056[59].f64[1]);
      v1096 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[60].f64[0]), *(float64x2_t *)&v1132[152], v1056[60], 1), *(float64x2_t *)&v1132[272], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[392],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[512],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[632],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[752],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[872],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[992],
                            v1056[64].f64[0]),
                          v1135,
                          v1056[64],
                          1),
                        v1143,
                        v1056[65].f64[0]),
                      v1150,
                      v1056[65],
                      1),
                    v1158,
                    v1056[66].f64[0]),
                  v1165,
                  v1056[66],
                  1),
                v1173,
                v1056[67].f64[0]);
      v1094 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[60].f64[0]), *(float64x2_t *)&v1132[168], v1056[60], 1), *(float64x2_t *)&v1132[288], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[408],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[528],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[648],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[768],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[888],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[1008],
                            v1056[64].f64[0]),
                          v1136,
                          v1056[64],
                          1),
                        v1144,
                        v1056[65].f64[0]),
                      v1151,
                      v1056[65],
                      1),
                    v1159,
                    v1056[66].f64[0]),
                  v1166,
                  v1056[66],
                  1),
                v1174,
                v1056[67].f64[0]);
      v1090 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[67].f64[1]), *(float64x2_t *)&v1132[168], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[288], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[408],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[528],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[648],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[768],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[888],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[1008],
                            v1056[71].f64[1]),
                          v1136,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1144,
                        v1056[72].f64[1]),
                      v1151,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1159,
                    v1056[73].f64[1]),
                  v1166,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1174,
                v1056[74].f64[1]);
      v1091 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[67].f64[1]), *(float64x2_t *)&v1132[152], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[272], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[392],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[512],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[632],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[752],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[872],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[992],
                            v1056[71].f64[1]),
                          v1135,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1143,
                        v1056[72].f64[1]),
                      v1150,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1158,
                    v1056[73].f64[1]),
                  v1165,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1173,
                v1056[74].f64[1]);
      v1105 = *(float64x2_t *)&v1132[304];
      result = &v1132[664];
      v1102 = *(float64x2_t *)&v1132[544];
      v1100 = *(float64x2_t *)&v1132[664];
      v1093 = *(float64x2_t *)&v1132[784];
      v1092 = *(float64x2_t *)&v1132[904];
      v1089 = v1137;
      v1088 = v1145;
      v1087 = v1152;
      v1086 = v1167;
      v1082 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[52].f64[1]), *(float64x2_t *)&v1132[184], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[304], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[424],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[544],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[664],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[784],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[904],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[1024],
                            v1056[56].f64[1]),
                          v1137,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1145,
                        v1056[57].f64[1]),
                      v1152,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1160,
                    v1056[58].f64[1]),
                  v1167,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1175,
                v1056[59].f64[1]);
      v1083 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[45].f64[0]), *(float64x2_t *)&v1132[184], v1056[45], 1), *(float64x2_t *)&v1132[304], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[424],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[544],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[664],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[784],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[904],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[1024],
                            v1056[49].f64[0]),
                          v1137,
                          v1056[49],
                          1),
                        v1145,
                        v1056[50].f64[0]),
                      v1152,
                      v1056[50],
                      1),
                    v1160,
                    v1056[51].f64[0]),
                  v1167,
                  v1056[51],
                  1),
                v1175,
                v1056[52].f64[0]);
      v1080 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[60].f64[0]), *(float64x2_t *)&v1132[184], v1056[60], 1), *(float64x2_t *)&v1132[304], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[424],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[544],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[664],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[784],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[904],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[1024],
                            v1056[64].f64[0]),
                          v1137,
                          v1056[64],
                          1),
                        v1145,
                        v1056[65].f64[0]),
                      v1152,
                      v1056[65],
                      1),
                    v1160,
                    v1056[66].f64[0]),
                  v1167,
                  v1056[66],
                  1),
                v1175,
                v1056[67].f64[0]);
      v1081 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[45].f64[0]), *(float64x2_t *)&v1132[200], v1056[45], 1), *(float64x2_t *)&v1132[320], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[440],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[560],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[680],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[800],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[920],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[1040],
                            v1056[49].f64[0]),
                          v1138,
                          v1056[49],
                          1),
                        v1146,
                        v1056[50].f64[0]),
                      v1153,
                      v1056[50],
                      1),
                    v1161,
                    v1056[51].f64[0]),
                  v1168,
                  v1056[51],
                  1),
                v1176,
                v1056[52].f64[0]);
      v1078 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[60].f64[0]), *(float64x2_t *)&v1132[200], v1056[60], 1), *(float64x2_t *)&v1132[320], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[440],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[560],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[680],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[800],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[920],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[1040],
                            v1056[64].f64[0]),
                          v1138,
                          v1056[64],
                          1),
                        v1146,
                        v1056[65].f64[0]),
                      v1153,
                      v1056[65],
                      1),
                    v1161,
                    v1056[66].f64[0]),
                  v1168,
                  v1056[66],
                  1),
                v1176,
                v1056[67].f64[0]);
      v1079 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[52].f64[1]), *(float64x2_t *)&v1132[200], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[320], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[440],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[560],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[680],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[800],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[920],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[1040],
                            v1056[56].f64[1]),
                          v1138,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1146,
                        v1056[57].f64[1]),
                      v1153,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1161,
                    v1056[58].f64[1]),
                  v1168,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1176,
                v1056[59].f64[1]);
      v1075 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[67].f64[1]), *(float64x2_t *)&v1132[200], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[320], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[440],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[560],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[680],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[800],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[920],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[1040],
                            v1056[71].f64[1]),
                          v1138,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1146,
                        v1056[72].f64[1]),
                      v1153,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1161,
                    v1056[73].f64[1]),
                  v1168,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1176,
                v1056[74].f64[1]);
      v1076 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[67].f64[1]), *(float64x2_t *)&v1132[184], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[304], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[424],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[544],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[664],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[784],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[904],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[1024],
                            v1056[71].f64[1]),
                          v1137,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1145,
                        v1056[72].f64[1]),
                      v1152,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1160,
                    v1056[73].f64[1]),
                  v1167,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1175,
                v1056[74].f64[1]);
      _D23 = *(_QWORD *)&v1132[232];
      __asm { FMLA            D18, D23, V17.D[1] }
      _V19.D[1] = v1056[53].f64[0];
      __asm
      {
        FMLA            D17, D23, V19.D[1]
        FMLA            D19, D23, V16.D[1]
      }
      _V24.D[1] = v1056[68].f64[0];
      __asm { FMLA            D16, D23, V24.D[1] }
      v1085 = *(float64x2_t *)&v1132[320];
      _D23 = *(_QWORD *)&v1132[472];
      __asm { FMLA            D18, D23, V14.D[1] }
      _V24.D[1] = v1056[54].f64[0];
      __asm
      {
        FMLA            D17, D23, V24.D[1]
        FMLA            D19, D23, V6.D[1]
      }
      _V6.D[1] = v1056[69].f64[0];
      __asm { FMLA            D16, D23, V6.D[1] }
      _D22 = *(_QWORD *)&v1132[712];
      __asm { FMLA            D18, D22, V13.D[1] }
      _V23.D[1] = v1056[55].f64[0];
      __asm
      {
        FMLA            D17, D22, V23.D[1]
        FMLA            D19, D22, V3.D[1]
      }
      _V3.D[1] = v1056[70].f64[0];
      __asm { FMLA            D16, D22, V3.D[1] }
      v1084 = *(float64x2_t *)&v1132[800];
      _D21 = *(_QWORD *)&v1132[952];
      __asm { FMLA            D18, D21, V4.D[1] }
      _V4.D[1] = v1056[56].f64[0];
      __asm
      {
        FMLA            D17, D21, V4.D[1]
        FMLA            D19, D21, V7.D[1]
      }
      _V4.D[1] = v1056[71].f64[0];
      __asm { FMLA            D16, D21, V4.D[1] }
      _D7 = v1140;
      __asm { FMLA            D18, D7, V5.D[1] }
      _V5.D[1] = v1056[57].f64[0];
      __asm
      {
        FMLA            D17, D7, V5.D[1]
        FMLA            D19, D7, V1.D[1]
      }
      _V1.D[1] = v1056[72].f64[0];
      __asm { FMLA            D16, D7, V1.D[1] }
      v1077 = v1146;
      _D5 = v1155;
      __asm { FMLA            D18, D5, V2.D[1] }
      _V2.D[1] = v1056[58].f64[0];
      __asm
      {
        FMLA            D17, D5, V2.D[1]
        FMLA            D19, D5, V0.D[1]
      }
      _V0.D[1] = v1056[73].f64[0];
      __asm { FMLA            D16, D5, V0.D[1] }
      _V1.D[1] = v1056[51].f64[1];
      _D4 = v1170;
      __asm { FMLA            D18, D4, V1.D[1] }
      _V1.D[1] = v1056[59].f64[0];
      __asm { FMLA            D17, D4, V1.D[1] }
      _V1.D[1] = v1056[66].f64[1];
      __asm { FMLA            D19, D4, V1.D[1] }
      _V1.D[1] = v1056[74].f64[0];
      __asm { FMLA            D16, D4, V1.D[1] }
      v1070 = _D18 + v1178 * v1056[52].f64[0];
      v1072 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[52].f64[1]), *(float64x2_t *)&v1132[216], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[336], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[456],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[696],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[936],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[56].f64[1]),
                          v1139,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1147,
                        v1056[57].f64[1]),
                      v1154,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1162,
                    v1056[58].f64[1]),
                  v1169,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1177,
                v1056[59].f64[1]);
      v1073 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[45].f64[0]), *(float64x2_t *)&v1132[216], v1056[45], 1), *(float64x2_t *)&v1132[336], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[456],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[696],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[936],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[49].f64[0]),
                          v1139,
                          v1056[49],
                          1),
                        v1147,
                        v1056[50].f64[0]),
                      v1154,
                      v1056[50],
                      1),
                    v1162,
                    v1056[51].f64[0]),
                  v1169,
                  v1056[51],
                  1),
                v1177,
                v1056[52].f64[0]);
      v1069 = _D17 + v1178 * v1056[59].f64[1];
      v1071 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[60].f64[0]), *(float64x2_t *)&v1132[216], v1056[60], 1), *(float64x2_t *)&v1132[336], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[456],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[696],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[936],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[64].f64[0]),
                          v1139,
                          v1056[64],
                          1),
                        v1147,
                        v1056[65].f64[0]),
                      v1154,
                      v1056[65],
                      1),
                    v1162,
                    v1056[66].f64[0]),
                  v1169,
                  v1056[66],
                  1),
                v1177,
                v1056[67].f64[0]);
      v1068 = _D19 + v1178 * v1056[67].f64[0];
      v1065 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[67].f64[1]), *(float64x2_t *)&v1132[216], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[336], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[456],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[696],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[936],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[71].f64[1]),
                          v1139,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1147,
                        v1056[72].f64[1]),
                      v1154,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1162,
                    v1056[73].f64[1]),
                  v1169,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1177,
                v1056[74].f64[1]);
      v1067 = _D16 + v1178 * v1056[74].f64[1];
      _V18.D[1] = v1056[75].f64[1];
      _V20.D[1] = v1056[83].f64[0];
      v1074 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[75].f64[0]), *(float64x2_t *)&v1132[120], v1056[75], 1), *(float64x2_t *)&v1132[240], v1056[76].f64[0]),
                                      *(float64x2_t *)&v1132[360],
                                      v1056[76],
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[77].f64[0]),
                                  *(float64x2_t *)&v1132[600],
                                  v1056[77],
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[78].f64[0]),
                              *(float64x2_t *)&v1132[840],
                              v1056[78],
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[79].f64[0]),
                          v1133,
                          v1056[79],
                          1),
                        v1141,
                        v1056[80].f64[0]),
                      v1148,
                      v1056[80],
                      1),
                    v1156,
                    v1056[81].f64[0]),
                  v1163,
                  v1056[81],
                  1),
                v1171,
                v1056[82].f64[0]);
      _Q14 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[82].f64[1]), *(float64x2_t *)&v1132[120], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[240], v1056[83].f64[1]),
                                     *(float64x2_t *)&v1132[360],
                                     *(float64x2_t *)((char *)&v1056[83] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[480],
                                   v1056[84].f64[1]),
                                 *(float64x2_t *)&v1132[600],
                                 *(float64x2_t *)((char *)&v1056[84] + 8),
                                 1),
                               *(float64x2_t *)&v1132[720],
                               v1056[85].f64[1]),
                             *(float64x2_t *)&v1132[840],
                             *(float64x2_t *)((char *)&v1056[85] + 8),
                             1),
                           *(float64x2_t *)&v1132[960],
                           v1056[86].f64[1]),
                         v1133,
                         *(float64x2_t *)((char *)&v1056[86] + 8),
                         1),
                       v1141,
                       v1056[87].f64[1]),
                     v1148,
                     *(float64x2_t *)((char *)&v1056[87] + 8),
                     1),
                   v1156,
                   v1056[88].f64[1]),
                 v1163,
                 *(float64x2_t *)((char *)&v1056[88] + 8),
                 1),
               v1171,
               v1056[89].f64[1]);
      v930 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[82].f64[1]), *(float64x2_t *)&v1132[136], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[256], v1056[83].f64[1]),
                                     *(float64x2_t *)&v1132[376],
                                     *(float64x2_t *)((char *)&v1056[83] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[496],
                                   v1056[84].f64[1]),
                                 *(float64x2_t *)&v1132[616],
                                 *(float64x2_t *)((char *)&v1056[84] + 8),
                                 1),
                               *(float64x2_t *)&v1132[736],
                               v1056[85].f64[1]),
                             *(float64x2_t *)&v1132[856],
                             *(float64x2_t *)((char *)&v1056[85] + 8),
                             1),
                           *(float64x2_t *)&v1132[976],
                           v1056[86].f64[1]),
                         v1134,
                         *(float64x2_t *)((char *)&v1056[86] + 8),
                         1),
                       v1142,
                       v1056[87].f64[1]),
                     v1149,
                     *(float64x2_t *)((char *)&v1056[87] + 8),
                     1),
                   v1157,
                   v1056[88].f64[1]),
                 v1164,
                 *(float64x2_t *)((char *)&v1056[88] + 8),
                 1),
               v1172,
               v1056[89].f64[1]);
      v1062 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[90].f64[0]), *(float64x2_t *)&v1132[120], v1056[90], 1), *(float64x2_t *)&v1132[240], v1056[91].f64[0]),
                                      *(float64x2_t *)&v1132[360],
                                      v1056[91],
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[92].f64[0]),
                                  *(float64x2_t *)&v1132[600],
                                  v1056[92],
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[93].f64[0]),
                              *(float64x2_t *)&v1132[840],
                              v1056[93],
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[94].f64[0]),
                          v1133,
                          v1056[94],
                          1),
                        v1141,
                        v1056[95].f64[0]),
                      v1148,
                      v1056[95],
                      1),
                    v1156,
                    v1056[96].f64[0]),
                  v1163,
                  v1056[96],
                  1),
                v1171,
                v1056[97].f64[0]);
      v1063 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[75].f64[0]), *(float64x2_t *)&v1132[136], v1056[75], 1), *(float64x2_t *)&v1132[256], v1056[76].f64[0]),
                                      *(float64x2_t *)&v1132[376],
                                      v1056[76],
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[77].f64[0]),
                                  *(float64x2_t *)&v1132[616],
                                  v1056[77],
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[78].f64[0]),
                              *(float64x2_t *)&v1132[856],
                              v1056[78],
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[79].f64[0]),
                          v1134,
                          v1056[79],
                          1),
                        v1142,
                        v1056[80].f64[0]),
                      v1149,
                      v1056[80],
                      1),
                    v1157,
                    v1056[81].f64[0]),
                  v1164,
                  v1056[81],
                  1),
                v1172,
                v1056[82].f64[0]);
      v1061 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[90].f64[0]), *(float64x2_t *)&v1132[136], v1056[90], 1), *(float64x2_t *)&v1132[256], v1056[91].f64[0]),
                                      *(float64x2_t *)&v1132[376],
                                      v1056[91],
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[92].f64[0]),
                                  *(float64x2_t *)&v1132[616],
                                  v1056[92],
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[93].f64[0]),
                              *(float64x2_t *)&v1132[856],
                              v1056[93],
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[94].f64[0]),
                          v1134,
                          v1056[94],
                          1),
                        v1142,
                        v1056[95].f64[0]),
                      v1149,
                      v1056[95],
                      1),
                    v1157,
                    v1056[96].f64[0]),
                  v1164,
                  v1056[96],
                  1),
                v1172,
                v1056[97].f64[0]);
      v1057 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[97].f64[1]), *(float64x2_t *)&v1132[120], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[240], v1056[98].f64[1]),
                                      *(float64x2_t *)&v1132[360],
                                      *(float64x2_t *)((char *)&v1056[98] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[99].f64[1]),
                                  *(float64x2_t *)&v1132[600],
                                  *(float64x2_t *)((char *)&v1056[99] + 8),
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[100].f64[1]),
                              *(float64x2_t *)&v1132[840],
                              *(float64x2_t *)((char *)&v1056[100] + 8),
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[101].f64[1]),
                          v1133,
                          *(float64x2_t *)((char *)&v1056[101] + 8),
                          1),
                        v1141,
                        v1056[102].f64[1]),
                      v1148,
                      *(float64x2_t *)((char *)&v1056[102] + 8),
                      1),
                    v1156,
                    v1056[103].f64[1]),
                  v1163,
                  *(float64x2_t *)((char *)&v1056[103] + 8),
                  1),
                v1171,
                v1056[104].f64[1]);
      v931 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[97].f64[1]), *(float64x2_t *)&v1132[136], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[256], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[376],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[496],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[616],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[736],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[856],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[976],
                           v1056[101].f64[1]),
                         v1134,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1142,
                       v1056[102].f64[1]),
                     v1149,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1157,
                   v1056[103].f64[1]),
                 v1164,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1172,
               v1056[104].f64[1]);
      v932 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[75].f64[0]), *(float64x2_t *)&v1132[152], v1056[75], 1), *(float64x2_t *)&v1132[272], v1056[76].f64[0]),
                                     *(float64x2_t *)&v1132[392],
                                     v1056[76],
                                     1),
                                   *(float64x2_t *)&v1132[512],
                                   v1056[77].f64[0]),
                                 *(float64x2_t *)&v1132[632],
                                 v1056[77],
                                 1),
                               *(float64x2_t *)&v1132[752],
                               v1056[78].f64[0]),
                             *(float64x2_t *)&v1132[872],
                             v1056[78],
                             1),
                           *(float64x2_t *)&v1132[992],
                           v1056[79].f64[0]),
                         v1135,
                         v1056[79],
                         1),
                       v1143,
                       v1056[80].f64[0]),
                     v1150,
                     v1056[80],
                     1),
                   v1158,
                   v1056[81].f64[0]),
                 v1165,
                 v1056[81],
                 1),
               v1173,
               v1056[82].f64[0]);
      _Q11 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[75].f64[0]), *(float64x2_t *)&v1132[168], v1056[75], 1), *(float64x2_t *)&v1132[288], v1056[76].f64[0]),
                                     *(float64x2_t *)&v1132[408],
                                     v1056[76],
                                     1),
                                   *(float64x2_t *)&v1132[528],
                                   v1056[77].f64[0]),
                                 *(float64x2_t *)&v1132[648],
                                 v1056[77],
                                 1),
                               *(float64x2_t *)&v1132[768],
                               v1056[78].f64[0]),
                             *(float64x2_t *)&v1132[888],
                             v1056[78],
                             1),
                           *(float64x2_t *)&v1132[1008],
                           v1056[79].f64[0]),
                         v1136,
                         v1056[79],
                         1),
                       v1144,
                       v1056[80].f64[0]),
                     v1151,
                     v1056[80],
                     1),
                   v1159,
                   v1056[81].f64[0]),
                 v1166,
                 v1056[81],
                 1),
               v1174,
               v1056[82].f64[0]);
      _Q30 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[82].f64[1]), *(float64x2_t *)&v1132[152], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[272], v1056[83].f64[1]),
                                     *(float64x2_t *)&v1132[392],
                                     *(float64x2_t *)((char *)&v1056[83] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[512],
                                   v1056[84].f64[1]),
                                 *(float64x2_t *)&v1132[632],
                                 *(float64x2_t *)((char *)&v1056[84] + 8),
                                 1),
                               *(float64x2_t *)&v1132[752],
                               v1056[85].f64[1]),
                             *(float64x2_t *)&v1132[872],
                             *(float64x2_t *)((char *)&v1056[85] + 8),
                             1),
                           *(float64x2_t *)&v1132[992],
                           v1056[86].f64[1]),
                         v1135,
                         *(float64x2_t *)((char *)&v1056[86] + 8),
                         1),
                       v1143,
                       v1056[87].f64[1]),
                     v1150,
                     *(float64x2_t *)((char *)&v1056[87] + 8),
                     1),
                   v1158,
                   v1056[88].f64[1]),
                 v1165,
                 *(float64x2_t *)((char *)&v1056[88] + 8),
                 1),
               v1173,
               v1056[89].f64[1]);
      v935 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[82].f64[1]), *(float64x2_t *)&v1132[168], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[288], v1056[83].f64[1]),
                                     *(float64x2_t *)&v1132[408],
                                     *(float64x2_t *)((char *)&v1056[83] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[528],
                                   v1056[84].f64[1]),
                                 *(float64x2_t *)&v1132[648],
                                 *(float64x2_t *)((char *)&v1056[84] + 8),
                                 1),
                               *(float64x2_t *)&v1132[768],
                               v1056[85].f64[1]),
                             *(float64x2_t *)&v1132[888],
                             *(float64x2_t *)((char *)&v1056[85] + 8),
                             1),
                           *(float64x2_t *)&v1132[1008],
                           v1056[86].f64[1]),
                         v1136,
                         *(float64x2_t *)((char *)&v1056[86] + 8),
                         1),
                       v1144,
                       v1056[87].f64[1]),
                     v1151,
                     *(float64x2_t *)((char *)&v1056[87] + 8),
                     1),
                   v1159,
                   v1056[88].f64[1]),
                 v1166,
                 *(float64x2_t *)((char *)&v1056[88] + 8),
                 1),
               v1174,
               v1056[89].f64[1]);
      _Q10 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[90].f64[0]), *(float64x2_t *)&v1132[152], v1056[90], 1), *(float64x2_t *)&v1132[272], v1056[91].f64[0]),
                                     *(float64x2_t *)&v1132[392],
                                     v1056[91],
                                     1),
                                   *(float64x2_t *)&v1132[512],
                                   v1056[92].f64[0]),
                                 *(float64x2_t *)&v1132[632],
                                 v1056[92],
                                 1),
                               *(float64x2_t *)&v1132[752],
                               v1056[93].f64[0]),
                             *(float64x2_t *)&v1132[872],
                             v1056[93],
                             1),
                           *(float64x2_t *)&v1132[992],
                           v1056[94].f64[0]),
                         v1135,
                         v1056[94],
                         1),
                       v1143,
                       v1056[95].f64[0]),
                     v1150,
                     v1056[95],
                     1),
                   v1158,
                   v1056[96].f64[0]),
                 v1165,
                 v1056[96],
                 1),
               v1173,
               v1056[97].f64[0]);
      v937 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[90].f64[0]), *(float64x2_t *)&v1132[168], v1056[90], 1), *(float64x2_t *)&v1132[288], v1056[91].f64[0]),
                                     *(float64x2_t *)&v1132[408],
                                     v1056[91],
                                     1),
                                   *(float64x2_t *)&v1132[528],
                                   v1056[92].f64[0]),
                                 *(float64x2_t *)&v1132[648],
                                 v1056[92],
                                 1),
                               *(float64x2_t *)&v1132[768],
                               v1056[93].f64[0]),
                             *(float64x2_t *)&v1132[888],
                             v1056[93],
                             1),
                           *(float64x2_t *)&v1132[1008],
                           v1056[94].f64[0]),
                         v1136,
                         v1056[94],
                         1),
                       v1144,
                       v1056[95].f64[0]),
                     v1151,
                     v1056[95],
                     1),
                   v1159,
                   v1056[96].f64[0]),
                 v1166,
                 v1056[96],
                 1),
               v1174,
               v1056[97].f64[0]);
      _Q8 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[97].f64[1]), *(float64x2_t *)&v1132[152], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[272], v1056[98].f64[1]),
                                    *(float64x2_t *)&v1132[392],
                                    *(float64x2_t *)((char *)&v1056[98] + 8),
                                    1),
                                  *(float64x2_t *)&v1132[512],
                                  v1056[99].f64[1]),
                                *(float64x2_t *)&v1132[632],
                                *(float64x2_t *)((char *)&v1056[99] + 8),
                                1),
                              *(float64x2_t *)&v1132[752],
                              v1056[100].f64[1]),
                            *(float64x2_t *)&v1132[872],
                            *(float64x2_t *)((char *)&v1056[100] + 8),
                            1),
                          *(float64x2_t *)&v1132[992],
                          v1056[101].f64[1]),
                        v1135,
                        *(float64x2_t *)((char *)&v1056[101] + 8),
                        1),
                      v1143,
                      v1056[102].f64[1]),
                    v1150,
                    *(float64x2_t *)((char *)&v1056[102] + 8),
                    1),
                  v1158,
                  v1056[103].f64[1]),
                v1165,
                *(float64x2_t *)((char *)&v1056[103] + 8),
                1),
              v1173,
              v1056[104].f64[1]);
      v939 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[97].f64[1]), *(float64x2_t *)&v1132[168], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[288], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[408],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[528],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[648],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[768],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[888],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[1008],
                           v1056[101].f64[1]),
                         v1136,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1144,
                       v1056[102].f64[1]),
                     v1151,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1159,
                   v1056[103].f64[1]),
                 v1166,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1174,
               v1056[104].f64[1]);
      v1066 = *(float64x2_t *)&v1132[560];
      v1180 = &v1056[84].f64[1];
      v940 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[75].f64[0]), *(float64x2_t *)&v1132[184], v1056[75], 1), *(float64x2_t *)&v1132[304], v1056[76].f64[0]),
                                     *(float64x2_t *)&v1132[424],
                                     v1056[76],
                                     1),
                                   *(float64x2_t *)&v1132[544],
                                   v1056[77].f64[0]),
                                 *(float64x2_t *)&v1132[664],
                                 v1056[77],
                                 1),
                               *(float64x2_t *)&v1132[784],
                               v1056[78].f64[0]),
                             *(float64x2_t *)&v1132[904],
                             v1056[78],
                             1),
                           *(float64x2_t *)&v1132[1024],
                           v1056[79].f64[0]),
                         v1137,
                         v1056[79],
                         1),
                       v1145,
                       v1056[80].f64[0]),
                     v1152,
                     v1056[80],
                     1),
                   v1160,
                   v1056[81].f64[0]),
                 v1167,
                 v1056[81],
                 1),
               v1175,
               v1056[82].f64[0]);
      v941 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[75].f64[0]), *(float64x2_t *)&v1132[200], v1056[75], 1), *(float64x2_t *)&v1132[320], v1056[76].f64[0]),
                                     *(float64x2_t *)&v1132[440],
                                     v1056[76],
                                     1),
                                   *(float64x2_t *)&v1132[560],
                                   v1056[77].f64[0]),
                                 *(float64x2_t *)&v1132[680],
                                 v1056[77],
                                 1),
                               *(float64x2_t *)&v1132[800],
                               v1056[78].f64[0]),
                             *(float64x2_t *)&v1132[920],
                             v1056[78],
                             1),
                           *(float64x2_t *)&v1132[1040],
                           v1056[79].f64[0]),
                         v1138,
                         v1056[79],
                         1),
                       v1146,
                       v1056[80].f64[0]),
                     v1153,
                     v1056[80],
                     1),
                   v1161,
                   v1056[81].f64[0]),
                 v1168,
                 v1056[81],
                 1),
               v1176,
               v1056[82].f64[0]);
      v942 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[82].f64[1]), *(float64x2_t *)&v1132[184], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[304], v1056[83].f64[1]),
                                     *(float64x2_t *)&v1132[424],
                                     *(float64x2_t *)((char *)&v1056[83] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[544],
                                   v1056[84].f64[1]),
                                 *(float64x2_t *)&v1132[664],
                                 *(float64x2_t *)((char *)&v1056[84] + 8),
                                 1),
                               *(float64x2_t *)&v1132[784],
                               v1056[85].f64[1]),
                             *(float64x2_t *)&v1132[904],
                             *(float64x2_t *)((char *)&v1056[85] + 8),
                             1),
                           *(float64x2_t *)&v1132[1024],
                           v1056[86].f64[1]),
                         v1137,
                         *(float64x2_t *)((char *)&v1056[86] + 8),
                         1),
                       v1145,
                       v1056[87].f64[1]),
                     v1152,
                     *(float64x2_t *)((char *)&v1056[87] + 8),
                     1),
                   v1160,
                   v1056[88].f64[1]),
                 v1167,
                 *(float64x2_t *)((char *)&v1056[88] + 8),
                 1),
               v1175,
               v1056[89].f64[1]);
      v943 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[82].f64[1]), *(float64x2_t *)&v1132[200], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[320], v1056[83].f64[1]),
                                     *(float64x2_t *)&v1132[440],
                                     *(float64x2_t *)((char *)&v1056[83] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[560],
                                   v1056[84].f64[1]),
                                 *(float64x2_t *)&v1132[680],
                                 *(float64x2_t *)((char *)&v1056[84] + 8),
                                 1),
                               *(float64x2_t *)&v1132[800],
                               v1056[85].f64[1]),
                             *(float64x2_t *)&v1132[920],
                             *(float64x2_t *)((char *)&v1056[85] + 8),
                             1),
                           *(float64x2_t *)&v1132[1040],
                           v1056[86].f64[1]),
                         v1138,
                         *(float64x2_t *)((char *)&v1056[86] + 8),
                         1),
                       v1146,
                       v1056[87].f64[1]),
                     v1153,
                     *(float64x2_t *)((char *)&v1056[87] + 8),
                     1),
                   v1161,
                   v1056[88].f64[1]),
                 v1168,
                 *(float64x2_t *)((char *)&v1056[88] + 8),
                 1),
               v1176,
               v1056[89].f64[1]);
      _Q28 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[90].f64[0]), *(float64x2_t *)&v1132[184], v1056[90], 1), *(float64x2_t *)&v1132[304], v1056[91].f64[0]),
                                     *(float64x2_t *)&v1132[424],
                                     v1056[91],
                                     1),
                                   *(float64x2_t *)&v1132[544],
                                   v1056[92].f64[0]),
                                 *(float64x2_t *)&v1132[664],
                                 v1056[92],
                                 1),
                               *(float64x2_t *)&v1132[784],
                               v1056[93].f64[0]),
                             *(float64x2_t *)&v1132[904],
                             v1056[93],
                             1),
                           *(float64x2_t *)&v1132[1024],
                           v1056[94].f64[0]),
                         v1137,
                         v1056[94],
                         1),
                       v1145,
                       v1056[95].f64[0]),
                     v1152,
                     v1056[95],
                     1),
                   v1160,
                   v1056[96].f64[0]),
                 v1167,
                 v1056[96],
                 1),
               v1175,
               v1056[97].f64[0]);
      v945 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[90].f64[0]), *(float64x2_t *)&v1132[200], v1056[90], 1), *(float64x2_t *)&v1132[320], v1056[91].f64[0]),
                                     *(float64x2_t *)&v1132[440],
                                     v1056[91],
                                     1),
                                   *(float64x2_t *)&v1132[560],
                                   v1056[92].f64[0]),
                                 *(float64x2_t *)&v1132[680],
                                 v1056[92],
                                 1),
                               *(float64x2_t *)&v1132[800],
                               v1056[93].f64[0]),
                             *(float64x2_t *)&v1132[920],
                             v1056[93],
                             1),
                           *(float64x2_t *)&v1132[1040],
                           v1056[94].f64[0]),
                         v1138,
                         v1056[94],
                         1),
                       v1146,
                       v1056[95].f64[0]),
                     v1153,
                     v1056[95],
                     1),
                   v1161,
                   v1056[96].f64[0]),
                 v1168,
                 v1056[96],
                 1),
               v1176,
               v1056[97].f64[0]);
      v946 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[97].f64[1]), *(float64x2_t *)&v1132[184], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[304], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[424],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[544],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[664],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[784],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[904],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[1024],
                           v1056[101].f64[1]),
                         v1137,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1145,
                       v1056[102].f64[1]),
                     v1152,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1160,
                   v1056[103].f64[1]),
                 v1167,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1175,
               v1056[104].f64[1]);
      v947 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[97].f64[1]), *(float64x2_t *)&v1132[200], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[320], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[440],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[560],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[680],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[800],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[920],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[1040],
                           v1056[101].f64[1]),
                         v1138,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1146,
                       v1056[102].f64[1]),
                     v1153,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1161,
                   v1056[103].f64[1]),
                 v1168,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1176,
               v1056[104].f64[1]);
      _D16 = *(_QWORD *)&v1132[232];
      __asm
      {
        FMLA            D0, D16, V18.D[1]
        FMLA            D1, D16, V20.D[1]
      }
      _V17.D[1] = v1056[90].f64[1];
      __asm { FMLA            D4, D16, V17.D[1] }
      _V17.D[1] = v1056[98].f64[0];
      __asm { FMLA            D5, D16, V17.D[1] }
      _V2.D[1] = v1056[76].f64[1];
      _D7 = *(_QWORD *)&v1132[472];
      __asm { FMLA            D0, D7, V2.D[1] }
      _V2.D[1] = v1056[84].f64[0];
      __asm { FMLA            D1, D7, V2.D[1] }
      _V2.D[1] = v1056[91].f64[1];
      __asm { FMLA            D4, D7, V2.D[1] }
      _V2.D[1] = v1056[99].f64[0];
      __asm { FMLA            D5, D7, V2.D[1] }
      _V18.D[1] = v1056[77].f64[1];
      _D17 = *(_QWORD *)&v1132[712];
      __asm { FMLA            D0, D17, V18.D[1] }
      _V18.D[1] = v1056[85].f64[0];
      __asm { FMLA            D1, D17, V18.D[1] }
      _V18.D[1] = v1056[92].f64[1];
      __asm { FMLA            D4, D17, V18.D[1] }
      _V18.D[1] = v1056[100].f64[0];
      __asm { FMLA            D5, D17, V18.D[1] }
      _V18.D[1] = v1056[78].f64[1];
      _D17 = *(_QWORD *)&v1132[952];
      __asm { FMLA            D0, D17, V18.D[1] }
      _V18.D[1] = v1056[86].f64[0];
      __asm { FMLA            D1, D17, V18.D[1] }
      _V18.D[1] = v1056[93].f64[1];
      __asm { FMLA            D4, D17, V18.D[1] }
      _V18.D[1] = v1056[101].f64[0];
      __asm { FMLA            D5, D17, V18.D[1] }
      _V18.D[1] = v1056[79].f64[1];
      _D17 = v1140;
      __asm { FMLA            D0, D17, V18.D[1] }
      _V18.D[1] = v1056[87].f64[0];
      __asm { FMLA            D1, D17, V18.D[1] }
      _V18.D[1] = v1056[94].f64[1];
      __asm { FMLA            D4, D17, V18.D[1] }
      _V18.D[1] = v1056[102].f64[0];
      __asm { FMLA            D5, D17, V18.D[1] }
      _V18.D[1] = v1056[80].f64[1];
      _D17 = v1155;
      __asm { FMLA            D0, D17, V18.D[1] }
      _V18.D[1] = v1056[88].f64[0];
      __asm { FMLA            D1, D17, V18.D[1] }
      _V18.D[1] = v1056[95].f64[1];
      __asm { FMLA            D4, D17, V18.D[1] }
      _V18.D[1] = v1056[103].f64[0];
      __asm { FMLA            D5, D17, V18.D[1] }
      _V7.D[1] = v1056[81].f64[1];
      _D18 = v1170;
      __asm { FMLA            D0, D18, V7.D[1] }
      _V7.D[1] = v1056[89].f64[0];
      __asm { FMLA            D1, D18, V7.D[1] }
      _V7.D[1] = v1056[96].f64[1];
      __asm { FMLA            D4, D18, V7.D[1] }
      _V7.D[1] = v1056[104].f64[0];
      __asm { FMLA            D5, D18, V7.D[1] }
      v1009 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[75].f64[0]), *(float64x2_t *)&v1132[216], v1056[75], 1), *(float64x2_t *)&v1132[336], v1056[76].f64[0]),
                                      *(float64x2_t *)&v1132[456],
                                      v1056[76],
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[77].f64[0]),
                                  *(float64x2_t *)&v1132[696],
                                  v1056[77],
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[78].f64[0]),
                              *(float64x2_t *)&v1132[936],
                              v1056[78],
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[79].f64[0]),
                          v1139,
                          v1056[79],
                          1),
                        v1147,
                        v1056[80].f64[0]),
                      v1154,
                      v1056[80],
                      1),
                    v1162,
                    v1056[81].f64[0]),
                  v1169,
                  v1056[81],
                  1),
                v1177,
                v1056[82].f64[0]);
      v1058 = _D0 + v1178 * v1056[82].f64[0];
      v1010 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[82].f64[1]), *(float64x2_t *)&v1132[216], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[336], v1056[83].f64[1]),
                                      *(float64x2_t *)&v1132[456],
                                      *(float64x2_t *)((char *)&v1056[83] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[84].f64[1]),
                                  *(float64x2_t *)&v1132[696],
                                  *(float64x2_t *)((char *)&v1056[84] + 8),
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[85].f64[1]),
                              *(float64x2_t *)&v1132[936],
                              *(float64x2_t *)((char *)&v1056[85] + 8),
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[86].f64[1]),
                          v1139,
                          *(float64x2_t *)((char *)&v1056[86] + 8),
                          1),
                        v1147,
                        v1056[87].f64[1]),
                      v1154,
                      *(float64x2_t *)((char *)&v1056[87] + 8),
                      1),
                    v1162,
                    v1056[88].f64[1]),
                  v1169,
                  *(float64x2_t *)((char *)&v1056[88] + 8),
                  1),
                v1177,
                v1056[89].f64[1]);
      v1059 = _D1 + v1178 * v1056[89].f64[1];
      v1011 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[90].f64[0]), *(float64x2_t *)&v1132[216], v1056[90], 1), *(float64x2_t *)&v1132[336], v1056[91].f64[0]),
                                      *(float64x2_t *)&v1132[456],
                                      v1056[91],
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[92].f64[0]),
                                  *(float64x2_t *)&v1132[696],
                                  v1056[92],
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[93].f64[0]),
                              *(float64x2_t *)&v1132[936],
                              v1056[93],
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[94].f64[0]),
                          v1139,
                          v1056[94],
                          1),
                        v1147,
                        v1056[95].f64[0]),
                      v1154,
                      v1056[95],
                      1),
                    v1162,
                    v1056[96].f64[0]),
                  v1169,
                  v1056[96],
                  1),
                v1177,
                v1056[97].f64[0]);
      v1060 = _D4 + v1178 * v1056[97].f64[0];
      v1012 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[97].f64[1]), *(float64x2_t *)&v1132[216], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[336], v1056[98].f64[1]),
                                      *(float64x2_t *)&v1132[456],
                                      *(float64x2_t *)((char *)&v1056[98] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[99].f64[1]),
                                  *(float64x2_t *)&v1132[696],
                                  *(float64x2_t *)((char *)&v1056[99] + 8),
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[100].f64[1]),
                              *(float64x2_t *)&v1132[936],
                              *(float64x2_t *)((char *)&v1056[100] + 8),
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[101].f64[1]),
                          v1139,
                          *(float64x2_t *)((char *)&v1056[101] + 8),
                          1),
                        v1147,
                        v1056[102].f64[1]),
                      v1154,
                      *(float64x2_t *)((char *)&v1056[102] + 8),
                      1),
                    v1162,
                    v1056[103].f64[1]),
                  v1169,
                  *(float64x2_t *)((char *)&v1056[103] + 8),
                  1),
                v1177,
                v1056[104].f64[1]);
      v1064 = _D5 + v1178 * v1056[104].f64[1];
      v1013 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[105].f64[0]), *(float64x2_t *)&v1132[120], v1056[105], 1), *(float64x2_t *)&v1132[240], v1056[106].f64[0]),
                                      *(float64x2_t *)&v1132[360],
                                      v1056[106],
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[107].f64[0]),
                                  *(float64x2_t *)&v1132[600],
                                  v1056[107],
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[108].f64[0]),
                              *(float64x2_t *)&v1132[840],
                              v1056[108],
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[109].f64[0]),
                          v1133,
                          v1056[109],
                          1),
                        v1141,
                        v1056[110].f64[0]),
                      v1148,
                      v1056[110],
                      1),
                    v1156,
                    v1056[111].f64[0]),
                  v1163,
                  v1056[111],
                  1),
                v1171,
                v1056[112].f64[0]);
      v1014 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[105].f64[0]), *(float64x2_t *)&v1132[136], v1056[105], 1), *(float64x2_t *)&v1132[256], v1056[106].f64[0]),
                                      *(float64x2_t *)&v1132[376],
                                      v1056[106],
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[107].f64[0]),
                                  *(float64x2_t *)&v1132[616],
                                  v1056[107],
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[108].f64[0]),
                              *(float64x2_t *)&v1132[856],
                              v1056[108],
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[109].f64[0]),
                          v1134,
                          v1056[109],
                          1),
                        v1142,
                        v1056[110].f64[0]),
                      v1149,
                      v1056[110],
                      1),
                    v1157,
                    v1056[111].f64[0]),
                  v1164,
                  v1056[111],
                  1),
                v1172,
                v1056[112].f64[0]);
      v1015 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[105].f64[0]), *(float64x2_t *)&v1132[152], v1056[105], 1), *(float64x2_t *)&v1132[272], v1056[106].f64[0]),
                                      *(float64x2_t *)&v1132[392],
                                      v1056[106],
                                      1),
                                    *(float64x2_t *)&v1132[512],
                                    v1056[107].f64[0]),
                                  *(float64x2_t *)&v1132[632],
                                  v1056[107],
                                  1),
                                *(float64x2_t *)&v1132[752],
                                v1056[108].f64[0]),
                              *(float64x2_t *)&v1132[872],
                              v1056[108],
                              1),
                            *(float64x2_t *)&v1132[992],
                            v1056[109].f64[0]),
                          v1135,
                          v1056[109],
                          1),
                        v1143,
                        v1056[110].f64[0]),
                      v1150,
                      v1056[110],
                      1),
                    v1158,
                    v1056[111].f64[0]),
                  v1165,
                  v1056[111],
                  1),
                v1173,
                v1056[112].f64[0]);
      v1016 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[105].f64[0]), *(float64x2_t *)&v1132[168], v1056[105], 1), *(float64x2_t *)&v1132[288], v1056[106].f64[0]),
                                      *(float64x2_t *)&v1132[408],
                                      v1056[106],
                                      1),
                                    *(float64x2_t *)&v1132[528],
                                    v1056[107].f64[0]),
                                  *(float64x2_t *)&v1132[648],
                                  v1056[107],
                                  1),
                                *(float64x2_t *)&v1132[768],
                                v1056[108].f64[0]),
                              *(float64x2_t *)&v1132[888],
                              v1056[108],
                              1),
                            *(float64x2_t *)&v1132[1008],
                            v1056[109].f64[0]),
                          v1136,
                          v1056[109],
                          1),
                        v1144,
                        v1056[110].f64[0]),
                      v1151,
                      v1056[110],
                      1),
                    v1159,
                    v1056[111].f64[0]),
                  v1166,
                  v1056[111],
                  1),
                v1174,
                v1056[112].f64[0]);
      v1017 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[105].f64[0]), *(float64x2_t *)&v1132[184], v1056[105], 1);
      v1018 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[105].f64[0]), *(float64x2_t *)&v1132[200], v1056[105], 1);
      *(float64x2_t *)((char *)v16 + 456) = v1065;
      *(float64x2_t *)((char *)v16 + 600) = _Q14;
      *(float64x2_t *)((char *)v16 + 616) = v930;
      *(float64x2_t *)((char *)v16 + 632) = _Q30;
      *(float64x2_t *)((char *)v16 + 648) = v935;
      *(float64x2_t *)((char *)v16 + 664) = v942;
      *(float64x2_t *)((char *)v16 + 680) = v943;
      v1019 = v1131.f64[0];
      *(float64x2_t *)(*(_QWORD *)&v1131.f64[0] + 2896) = v1115;
      *(float64x2_t *)(*(_QWORD *)&v1019 + 2880) = v1116;
      *(float64x2_t *)(*(_QWORD *)&v1019 + 2928) = v1090;
      *(float64x2_t *)(*(_QWORD *)&v1019 + 2912) = v1091;
      *(float64x2_t *)(*(_QWORD *)&v1019 + 2960) = v1075;
      *(float64x2_t *)(*(_QWORD *)&v1019 + 2944) = v1076;
      *(float64x2_t *)(*(_QWORD *)&v1019 + 3376) = v931;
      *(float64x2_t *)(*(_QWORD *)&v1019 + 3360) = v1057;
      *(float64x2_t *)(*(_QWORD *)&v1019 + 3408) = v939;
      *(float64x2_t *)(*(_QWORD *)&v1019 + 3392) = _Q8;
      *(float64x2_t *)(*(_QWORD *)&v1019 + 3440) = v947;
      *(float64x2_t *)(*(_QWORD *)&v1019 + 3424) = v946;
      *(float64x2_t *)((char *)v16 + 696) = v1010;
      *(float64x2_t *)((char *)v16 + 936) = v1012;
      v1020 = v1119;
      *v16 = v1122;
      v16[1] = v1020;
      *(float64x2_t *)((char *)v16 + 136) = v1121;
      *(float64x2_t *)((char *)v16 + 120) = v1124;
      v1021 = v1120;
      v16[15] = v1123;
      v16[16] = v1021;
      v1022 = v1097;
      v16[2] = v1099;
      v16[3] = v1022;
      *(float64x2_t *)((char *)v16 + 168) = v1095;
      *(float64x2_t *)((char *)v16 + 152) = v1098;
      v1023 = v1094;
      v16[17] = v1096;
      v16[18] = v1023;
      v1024 = v1081;
      v16[4] = v1083;
      v16[5] = v1024;
      v1025 = v1078;
      *(float64x2_t *)((char *)v16 + 200) = v1079;
      *(float64x2_t *)((char *)v16 + 184) = v1082;
      v16[19] = v1080;
      v16[20] = v1025;
      v16[6] = v1073;
      v16[7].f64[0] = v1070;
      *(float64x2_t *)((char *)v16 + 216) = v1072;
      v16[14].f64[1] = v1069;
      v16[21] = v1071;
      v16[22].f64[0] = v1068;
      v16[29].f64[1] = v1067;
      v1026 = v1063;
      v16[30] = v1074;
      v16[31] = v1026;
      v1027 = v1061;
      v16[45] = v1062;
      v16[46] = v1027;
      v16[32] = v932;
      v16[33] = _Q11;
      _Q23 = *(float64x2_t *)&v1132[680];
      v16[47] = _Q10;
      v16[48] = v937;
      v1029 = *(float64x2_t *)&v1132[920];
      _Q22 = v1138;
      v16[34] = v940;
      v16[35] = v941;
      _Q3 = v1153;
      _Q6 = v1168;
      v16[49] = _Q28;
      v16[50] = v945;
      v1033 = *(float64x2_t *)&v1132[216];
      v1034 = *(float64x2_t *)&v1132[696];
      v16[36] = v1009;
      v1035 = *(float64x2_t *)&v1132[936];
      v946.f64[0] = v1059;
      v16[37].f64[0] = v1058;
      v1036 = v1139;
      v16[44].f64[1] = v946.f64[0];
      v1037 = v1154;
      v16[51] = v1011;
      v1038 = v1169;
      _Q10.f64[0] = *(float64_t *)&v1132[232];
      v1039 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1018, v1085, v1056[106].f64[0]), *(float64x2_t *)&v1132[440], v1056[106], 1), v1066, v1056[107].f64[0]), _Q23, v1056[107], 1), v1084, v1056[108].f64[0]),
                        v1029,
                        v1056[108],
                        1),
                      *(float64x2_t *)&v1132[1040],
                      v1056[109].f64[0]),
                    _Q22,
                    v1056[109],
                    1),
                  v1077,
                  v1056[110].f64[0]),
                _Q3,
                v1056[110],
                1);
      _Q3.f64[0] = *(float64_t *)&v1132[472];
      _Q23.f64[1] = v1056[106].f64[1];
      _Q30.f64[1] = v1056[105].f64[1];
      v1040 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1017, v1105, v1056[106].f64[0]), *(float64x2_t *)&v1132[424], v1056[106], 1), v1102, v1056[107].f64[0]), v1100, v1056[107],
                                  1),
                                v1093,
                                v1056[108].f64[0]),
                              v1092,
                              v1056[108],
                              1),
                            *(float64x2_t *)&v1132[1024],
                            v1056[109].f64[0]),
                          v1089,
                          v1056[109],
                          1),
                        v1088,
                        v1056[110].f64[0]),
                      v1087,
                      v1056[110],
                      1),
                    v1160,
                    v1056[111].f64[0]),
                  v1086,
                  v1056[111],
                  1),
                v1175,
                v1056[112].f64[0]);
      v1041 = *(float64x2_t *)&v1132[576];
      v1042 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1039, v1161, v1056[111].f64[0]), _Q6, v1056[111], 1), v1176, v1056[112].f64[0]);
      _Q6.f64[0] = *(float64_t *)&v1132[712];
      v1043 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[105].f64[0]), v1033, v1056[105], 1);
      v1044 = *(float64x2_t *)&v1132[816];
      _Q28.f64[0] = *(float64_t *)&v1132[952];
      v1045 = vmlaq_laneq_f64(vmlaq_n_f64(v1043, *(float64x2_t *)&v1132[336], v1056[106].f64[0]), *(float64x2_t *)&v1132[456], v1056[106], 1);
      v1046 = *(float64x2_t *)&v1132[1056];
      __asm { FMLA            D8, D10, V30.D[1] }
      _Q30.f64[0] = v1140;
      __asm { FMLA            D8, D3, V23.D[1] }
      v1047 = v1147;
      _Q22.f64[0] = v1155;
      v1048 = v1162;
      _Q11.f64[0] = v1170;
      v932.f64[0] = v1178;
      v1049 = v1177;
      v16[52].f64[0] = v1060;
      _Q14.f64[1] = v1056[107].f64[1];
      v1050 = vmlaq_n_f64(v1045, v1041, v1056[107].f64[0]);
      _Q31 = v1056[108];
      v1052 = vmlaq_laneq_f64(v1050, v1034, v1056[107], 1);
      _Q18 = v1056[110];
      v1034.f64[0] = v1056[112].f64[0];
      __asm { FMLA            D8, D6, V14.D[1] }
      _Q6 = v1056[109];
      _Q14 = v1056[111];
      v16[59].f64[1] = v1064;
      v16[60] = v1013;
      v16[61] = v1014;
      v16[62] = v1015;
      v16[63] = v1016;
      v16[65] = v1042;
      v16[64] = v1040;
      __asm
      {
        FMLA            D8, D28, V31.D[1]
        FMLA            D8, D30, V6.D[1]
        FMLA            D8, D22, V18.D[1]
      }
      v16[66] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1052, v1044, _Q31.f64[0]), v1035, _Q31, 1), v1046, _Q6.f64[0]), v1036, _Q6, 1), v1047, _Q18.f64[0]), v1037, _Q18, 1), v1048, _Q14.f64[0]),
                    v1038,
                    _Q14,
                    1),
                  v1049,
                  v1034.f64[0]);
      __asm { FMLA            D8, D11, V14.D[1] }
      v16[67].f64[0] = _Q8.f64[0] + v932.f64[0] * v1034.f64[0];
      break;
    default:
      return result;
  }
  return result;
}

float64_t *sub_20F57E2F4(float64_t *result, double a2, double a3, double a4, double a5, double a6, double a7, double a8, float64x2_t a9, uint64_t a10, uint64_t a11, float64x2_t *a12, int a13)
{
  float64x2_t v13;
  float64x2_t *v16;
  float64x2_t *v17;
  float64x2_t *v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v56;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v64;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  double v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v336;
  float64x2_t v338;
  float64x2_t v341;
  float64x2_t v346;
  float64x2_t v348;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v357;
  float64x2_t v359;
  float64x2_t v361;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v553;
  float64x2_t v555;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v570;
  float64x2_t v572;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  uint64_t i;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t *v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  double v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  _QWORD *v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v690;
  float64x2_t v691;
  float64x2_t v692;
  float64x2_t v759;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777[115];
  float64_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  double v793;
  double v794;
  double v795;
  double v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v810;
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814[45];
  float64x2_t v815;
  float64x2_t v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  float64x2_t v824;
  float64x2_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t v835;
  float64x2_t v836;
  float64x2_t v837;
  float64x2_t v838;
  float64x2_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  float64x2_t v851;
  float64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  float64x2_t v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  float64x2_t v867;
  float64x2_t v868;
  float64x2_t v869;
  float64x2_t v870;
  float64x2_t v871;
  float64x2_t v872;
  float64x2_t v873;
  float64_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  float64x2_t v878;
  float64x2_t v879;
  float64x2_t v880;
  float64x2_t v881;
  float64_t v882;
  uint64_t v883;

  v883 = *MEMORY[0x24BDAC8D0];
  v16 = (float64x2_t *)(a11 + 1800);
  switch(a13)
  {
    case 0:
      v17 = a12 + 1;
      if (a11 + 2520 > (unint64_t)&a12[1] && (float64x2_t *)&a12[113].f64[1] > v16)
      {
        MEMORY[0x24BDAC7A8](result);
        result = (float64_t *)memcpy(v777, v17, 0x708uLL);
        v17 = v777;
      }
      MEMORY[0x24BDAC7A8](result);
      v18 = &v777[-45];
      memcpy(&v777[-45], v16, 0x2D0uLL);
      v19 = v17[1];
      v20 = *(float64x2_t *)((char *)v17 + 136);
      v21 = *(float64x2_t *)((char *)v17 + 120);
      v23 = v17[15];
      v22 = v17[16];
      v24 = *(float64x2_t *)((char *)v17 + 376);
      v25 = *(float64x2_t *)((char *)v17 + 360);
      v26 = v777[-44];
      v27 = *(float64x2_t *)((char *)&v777[-37] + 8);
      v28 = *(float64x2_t *)((char *)&v777[-38] + 8);
      v29 = v777[-30];
      v30 = *(float64x2_t *)((char *)&v777[-22] + 8);
      v31 = *(float64x2_t *)((char *)&v777[-23] + 8);
      _Q24 = v777[-45];
      v33 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v18->f64[0]), v21, *v18, 1), v23, v26.f64[0]), v25, v26, 1);
      v34 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v18->f64[0]), v20, *v18, 1), v22, v26.f64[0]), v24, v26, 1);
      v35 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v28.f64[0]), v21, v28, 1), v23, v27.f64[0]), v25, v27, 1);
      v36 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v28.f64[0]), v20, v28, 1), v22, v27.f64[0]), v24, v27, 1);
      _Q20 = v29;
      v38 = v777[-29];
      v39 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v29.f64[0]), v21, v29, 1), v23, v38.f64[0]), v25, v38, 1);
      v40 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v29.f64[0]), v20, v29, 1), v22, v38.f64[0]), v24, v38, 1);
      v41 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v31.f64[0]), v21, v31, 1), v23, v30.f64[0]), v25, v30, 1);
      v42 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v31.f64[0]), v20, v31, 1), v22, v30.f64[0]), v24, v30, 1);
      v44 = v17[30];
      v43 = v17[31];
      v46 = *(float64x2_t *)((char *)v17 + 600);
      v45 = *(float64x2_t *)((char *)v17 + 616);
      v48 = v17[45];
      v47 = v17[46];
      v50 = *(float64x2_t *)((char *)v17 + 840);
      v49 = *(float64x2_t *)((char *)v17 + 856);
      v51 = *(float64x2_t *)((char *)&v777[-35] + 8);
      v52 = *(float64x2_t *)((char *)&v777[-36] + 8);
      v53 = *(float64x2_t *)((char *)&v777[-20] + 8);
      v54 = *(float64x2_t *)((char *)&v777[-21] + 8);
      _Q1 = v777[-44];
      v56 = v777[-43];
      _Q2 = v56;
      v58 = v777[-42];
      v59 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v33, v44, v56.f64[0]), v46, v56, 1), v48, v58.f64[0]), v50, v58, 1);
      v60 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v34, v43, v56.f64[0]), v45, v56, 1), v47, v58.f64[0]), v49, v58, 1);
      v61 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v35, v44, v52.f64[0]), v46, v52, 1), v48, v51.f64[0]), v50, v51, 1);
      v62 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v36, v43, v52.f64[0]), v45, v52, 1), v47, v51.f64[0]), v49, v51, 1);
      _Q4 = v777[-29];
      v64 = v777[-28];
      _Q3 = v64;
      v66 = v777[-27];
      v67 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v39, v44, v64.f64[0]), v46, v64, 1), v48, v66.f64[0]), v50, v66, 1);
      v68 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v40, v43, v64.f64[0]), v45, v64, 1), v47, v66.f64[0]), v49, v66, 1);
      v69 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v41, v44, v54.f64[0]), v46, v54, 1), v48, v53.f64[0]), v50, v53, 1);
      v70 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v42, v43, v54.f64[0]), v45, v54, 1), v47, v53.f64[0]), v49, v53, 1);
      v72 = v17[60];
      v71 = v17[61];
      v74 = *(float64x2_t *)((char *)v17 + 1080);
      v73 = *(float64x2_t *)((char *)v17 + 1096);
      v75 = v17[76];
      v76 = v17[75];
      v77 = *(float64x2_t *)((char *)v17 + 1320);
      v78 = *(float64x2_t *)((char *)v17 + 1336);
      v79 = *(float64x2_t *)((char *)&v777[-33] + 8);
      v80 = *(float64x2_t *)((char *)&v777[-34] + 8);
      v81 = *(float64x2_t *)((char *)&v777[-18] + 8);
      v82 = *(float64x2_t *)((char *)&v777[-19] + 8);
      _Q5 = v777[-42];
      _Q7 = v777[-41];
      v85 = v777[-40];
      v86 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v59, v72, _Q7.f64[0]), v74, _Q7, 1), v76, v85.f64[0]), v77, v85, 1);
      v87 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v60, v71, _Q7.f64[0]), v73, _Q7, 1), v75, v85.f64[0]), v78, v85, 1);
      v88 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v61, v72, v80.f64[0]), v74, v80, 1), v76, v79.f64[0]), v77, v79, 1);
      v89 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v62, v71, v80.f64[0]), v73, v80, 1), v75, v79.f64[0]), v78, v79, 1);
      _Q18 = v777[-27];
      _Q6 = v777[-26];
      v92 = v777[-25];
      v93 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v67, v72, _Q6.f64[0]), v74, _Q6, 1), v76, v92.f64[0]), v77, v92, 1);
      v94 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v68, v71, _Q6.f64[0]), v73, _Q6, 1), v75, v92.f64[0]), v78, v92, 1);
      v95 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v69, v72, v82.f64[0]), v74, v82, 1), v76, v81.f64[0]), v77, v81, 1);
      v96 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v70, v71, v82.f64[0]), v73, v82, 1), v75, v81.f64[0]), v78, v81, 1);
      v97 = v17[91];
      v98 = v17[90];
      v100 = *(float64x2_t *)((char *)v17 + 1560);
      v99 = *(float64x2_t *)((char *)v17 + 1576);
      v101 = v17[106];
      v102 = v17[105];
      v71.f64[0] = v777[-38].f64[0];
      v77.f64[0] = v777[-31].f64[1];
      v103 = *(float64x2_t *)((char *)&v777[-32] + 8);
      _Q17 = v777[-40];
      v104 = v777[-39];
      v106 = vmlaq_laneq_f64(vmlaq_n_f64(v86, v98, v104.f64[0]), v100, v104, 1);
      v107 = vmlaq_laneq_f64(vmlaq_n_f64(v87, v97, v104.f64[0]), v99, v104, 1);
      v104.f64[0] = v777[-23].f64[0];
      v108 = vmlaq_n_f64(v106, v102, v71.f64[0]);
      v109 = vmlaq_n_f64(v107, v101, v71.f64[0]);
      v110 = v777[-16].f64[1];
      v111 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v88, v98, v103.f64[0]), v100, v103, 1), v102, v77.f64[0]);
      v112 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v89, v97, v103.f64[0]), v99, v103, 1), v101, v77.f64[0]);
      _Q16 = v777[-25];
      v113 = v777[-24];
      v115 = vmlaq_laneq_f64(vmlaq_n_f64(v93, v98, v113.f64[0]), v100, v113, 1);
      v116 = vmlaq_laneq_f64(vmlaq_n_f64(v94, v97, v113.f64[0]), v99, v113, 1);
      v117 = *(float64x2_t *)((char *)&v777[-17] + 8);
      *v16 = v108;
      v16[1] = v109;
      *(float64x2_t *)(a11 + 1936) = v112;
      *(float64x2_t *)(a11 + 1920) = v111;
      v16[15] = vmlaq_n_f64(v115, v102, v104.f64[0]);
      v16[16] = vmlaq_n_f64(v116, v101, v104.f64[0]);
      *(float64x2_t *)((char *)v16 + 360) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v95, v98, v117.f64[0]), v100, v117, 1), v102, v110);
      *(float64x2_t *)((char *)v16 + 376) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v96, v97, v117.f64[0]), v99, v117, 1), v101, v110);
      v118 = v17[2];
      v119 = v17[3];
      v120 = *(float64x2_t *)((char *)v17 + 168);
      v121 = *(float64x2_t *)((char *)v17 + 152);
      v123 = v17[17];
      v122 = v17[18];
      v124 = *(float64x2_t *)((char *)v17 + 408);
      v125 = *(float64x2_t *)((char *)v17 + 392);
      v126 = v777[-44];
      v127 = *(float64x2_t *)((char *)&v777[-37] + 8);
      v128 = *(float64x2_t *)((char *)&v777[-38] + 8);
      v130 = v777[-30];
      v129 = v777[-29];
      v131 = *(float64x2_t *)((char *)&v777[-22] + 8);
      v132 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v118, v18->f64[0]), v121, *v18, 1), v123, v126.f64[0]), v125, v126, 1);
      v133 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, v18->f64[0]), v120, *v18, 1), v122, v126.f64[0]), v124, v126, 1);
      v134 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v118, v128.f64[0]), v121, v128, 1), v123, v127.f64[0]), v125, v127, 1);
      v135 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, v128.f64[0]), v120, v128, 1), v122, v127.f64[0]), v124, v127, 1);
      v136 = vmlaq_laneq_f64(vmulq_n_f64(v118, v130.f64[0]), v121, v130, 1);
      v137 = vmlaq_laneq_f64(vmulq_n_f64(v119, v130.f64[0]), v120, v130, 1);
      v138 = *(float64x2_t *)((char *)&v777[-23] + 8);
      v139 = vmlaq_laneq_f64(vmlaq_n_f64(v136, v123, v129.f64[0]), v125, v129, 1);
      v140 = vmlaq_laneq_f64(vmlaq_n_f64(v137, v122, v129.f64[0]), v124, v129, 1);
      v141 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v118, v138.f64[0]), v121, v138, 1), v123, v131.f64[0]), v125, v131, 1);
      v142 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, v138.f64[0]), v120, v138, 1), v122, v131.f64[0]), v124, v131, 1);
      v144 = v17[32];
      v143 = v17[33];
      v146 = *(float64x2_t *)((char *)v17 + 632);
      v145 = *(float64x2_t *)((char *)v17 + 648);
      v148 = v17[47];
      v147 = v17[48];
      v150 = *(float64x2_t *)((char *)v17 + 872);
      v149 = *(float64x2_t *)((char *)v17 + 888);
      v151 = v777[-43];
      v152 = vmlaq_laneq_f64(vmlaq_n_f64(v132, v144, v151.f64[0]), v146, v151, 1);
      v153 = vmlaq_laneq_f64(vmlaq_n_f64(v133, v143, v151.f64[0]), v145, v151, 1);
      v154 = v777[-42];
      v155 = vmlaq_laneq_f64(vmlaq_n_f64(v152, v148, v154.f64[0]), v150, v154, 1);
      v156 = vmlaq_laneq_f64(vmlaq_n_f64(v153, v147, v154.f64[0]), v149, v154, 1);
      v157 = *(float64x2_t *)((char *)&v777[-36] + 8);
      v158 = vmlaq_laneq_f64(vmlaq_n_f64(v134, v144, v157.f64[0]), v146, v157, 1);
      v159 = vmlaq_laneq_f64(vmlaq_n_f64(v135, v143, v157.f64[0]), v145, v157, 1);
      v160 = *(float64x2_t *)((char *)&v777[-35] + 8);
      v161 = vmlaq_laneq_f64(vmlaq_n_f64(v158, v148, v160.f64[0]), v150, v160, 1);
      v162 = vmlaq_laneq_f64(vmlaq_n_f64(v159, v147, v160.f64[0]), v149, v160, 1);
      v163 = v777[-28];
      v164 = vmlaq_laneq_f64(vmlaq_n_f64(v139, v144, v163.f64[0]), v146, v163, 1);
      v165 = vmlaq_laneq_f64(vmlaq_n_f64(v140, v143, v163.f64[0]), v145, v163, 1);
      v166 = v777[-27];
      v167 = vmlaq_laneq_f64(vmlaq_n_f64(v164, v148, v166.f64[0]), v150, v166, 1);
      v168 = vmlaq_laneq_f64(vmlaq_n_f64(v165, v147, v166.f64[0]), v149, v166, 1);
      v169 = *(float64x2_t *)((char *)&v777[-21] + 8);
      v170 = vmlaq_n_f64(v141, v144, v169.f64[0]);
      v171 = *(float64x2_t *)((char *)&v777[-20] + 8);
      v172 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v170, v146, v169, 1), v148, v171.f64[0]), v150, v171, 1);
      v173 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v142, v143, v169.f64[0]), v145, v169, 1), v147, v171.f64[0]), v149, v171, 1);
      v175 = v17[62];
      v174 = v17[63];
      v177 = *(float64x2_t *)((char *)v17 + 1112);
      v176 = *(float64x2_t *)((char *)v17 + 1128);
      v178 = v17[78];
      v179 = v17[77];
      v181 = *(float64x2_t *)((char *)v17 + 1352);
      v180 = *(float64x2_t *)((char *)v17 + 1368);
      v182 = v777[-41];
      v183 = vmlaq_laneq_f64(vmlaq_n_f64(v155, v175, v182.f64[0]), v177, v182, 1);
      v184 = vmlaq_laneq_f64(vmlaq_n_f64(v156, v174, v182.f64[0]), v176, v182, 1);
      v185 = v777[-40];
      v186 = vmlaq_laneq_f64(vmlaq_n_f64(v183, v179, v185.f64[0]), v181, v185, 1);
      v187 = vmlaq_laneq_f64(vmlaq_n_f64(v184, v178, v185.f64[0]), v180, v185, 1);
      v188 = *(float64x2_t *)((char *)&v777[-34] + 8);
      v189 = vmlaq_laneq_f64(vmlaq_n_f64(v161, v175, v188.f64[0]), v177, v188, 1);
      v190 = vmlaq_laneq_f64(vmlaq_n_f64(v162, v174, v188.f64[0]), v176, v188, 1);
      v191 = *(float64x2_t *)((char *)&v777[-33] + 8);
      v192 = vmlaq_laneq_f64(vmlaq_n_f64(v189, v179, v191.f64[0]), v181, v191, 1);
      v193 = vmlaq_laneq_f64(vmlaq_n_f64(v190, v178, v191.f64[0]), v180, v191, 1);
      v194 = v777[-26];
      v195 = vmlaq_laneq_f64(vmlaq_n_f64(v167, v175, v194.f64[0]), v177, v194, 1);
      v196 = vmlaq_laneq_f64(vmlaq_n_f64(v168, v174, v194.f64[0]), v176, v194, 1);
      v197 = v777[-25];
      v198 = vmlaq_laneq_f64(vmlaq_n_f64(v195, v179, v197.f64[0]), v181, v197, 1);
      v199 = vmlaq_laneq_f64(vmlaq_n_f64(v196, v178, v197.f64[0]), v180, v197, 1);
      v200 = *(float64x2_t *)((char *)&v777[-19] + 8);
      v201 = vmlaq_n_f64(v172, v175, v200.f64[0]);
      v202 = *(float64x2_t *)((char *)&v777[-18] + 8);
      v203 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v201, v177, v200, 1), v179, v202.f64[0]), v181, v202, 1);
      v204 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v173, v174, v200.f64[0]), v176, v200, 1), v178, v202.f64[0]), v180, v202, 1);
      v205 = v17[93];
      v206 = v17[92];
      v208 = *(float64x2_t *)((char *)v17 + 1592);
      v207 = *(float64x2_t *)((char *)v17 + 1608);
      v209 = v17[108];
      v210 = v17[107];
      v180.f64[0] = v777[-38].f64[0];
      v211 = v777[-39];
      v200.f64[0] = v777[-31].f64[1];
      v212 = vmlaq_laneq_f64(vmlaq_n_f64(v186, v206, v211.f64[0]), v208, v211, 1);
      v213 = vmlaq_laneq_f64(vmlaq_n_f64(v187, v205, v211.f64[0]), v207, v211, 1);
      v214 = *(float64x2_t *)((char *)&v777[-32] + 8);
      v215 = vmlaq_n_f64(v212, v210, v180.f64[0]);
      v216 = vmlaq_n_f64(v213, v209, v180.f64[0]);
      v180.f64[0] = v777[-23].f64[0];
      v217 = vmlaq_laneq_f64(vmlaq_n_f64(v192, v206, v214.f64[0]), v208, v214, 1);
      v218 = vmlaq_laneq_f64(vmlaq_n_f64(v193, v205, v214.f64[0]), v207, v214, 1);
      v219 = v777[-24];
      v220 = vmlaq_n_f64(v217, v210, v200.f64[0]);
      v221 = vmlaq_n_f64(v218, v209, v200.f64[0]);
      v200.f64[0] = v777[-16].f64[1];
      v222 = vmlaq_laneq_f64(vmlaq_n_f64(v198, v206, v219.f64[0]), v208, v219, 1);
      v223 = vmlaq_laneq_f64(vmlaq_n_f64(v199, v205, v219.f64[0]), v207, v219, 1);
      v224 = *(float64x2_t *)((char *)&v777[-17] + 8);
      v16[2] = v215;
      v16[3] = v216;
      *(float64x2_t *)(a11 + 1968) = v221;
      *(float64x2_t *)(a11 + 1952) = v220;
      v16[17] = vmlaq_n_f64(v222, v210, v180.f64[0]);
      v16[18] = vmlaq_n_f64(v223, v209, v180.f64[0]);
      *(float64x2_t *)((char *)v16 + 392) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v203, v206, v224.f64[0]), v208, v224, 1), v210, v200.f64[0]);
      *(float64x2_t *)((char *)v16 + 408) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v204, v205, v224.f64[0]), v207, v224, 1), v209, v200.f64[0]);
      v225 = v17[4];
      v226 = v17[5];
      v227 = *(float64x2_t *)((char *)v17 + 200);
      v228 = *(float64x2_t *)((char *)v17 + 184);
      v230 = v17[19];
      v229 = v17[20];
      v231 = *(float64x2_t *)((char *)v17 + 440);
      v232 = *(float64x2_t *)((char *)v17 + 424);
      v233 = v777[-44];
      v234 = *(float64x2_t *)((char *)&v777[-37] + 8);
      v235 = *(float64x2_t *)((char *)&v777[-38] + 8);
      v237 = v777[-30];
      v236 = v777[-29];
      v238 = *(float64x2_t *)((char *)&v777[-22] + 8);
      v239 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v225, v18->f64[0]), v228, *v18, 1), v230, v233.f64[0]), v232, v233, 1);
      v240 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v226, v18->f64[0]), v227, *v18, 1), v229, v233.f64[0]), v231, v233, 1);
      v241 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v225, v235.f64[0]), v228, v235, 1), v230, v234.f64[0]), v232, v234, 1);
      v242 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v226, v235.f64[0]), v227, v235, 1), v229, v234.f64[0]), v231, v234, 1);
      v243 = vmlaq_laneq_f64(vmulq_n_f64(v225, v237.f64[0]), v228, v237, 1);
      v244 = vmlaq_laneq_f64(vmulq_n_f64(v226, v237.f64[0]), v227, v237, 1);
      v245 = *(float64x2_t *)((char *)&v777[-23] + 8);
      v246 = vmlaq_laneq_f64(vmlaq_n_f64(v243, v230, v236.f64[0]), v232, v236, 1);
      v247 = vmlaq_laneq_f64(vmlaq_n_f64(v244, v229, v236.f64[0]), v231, v236, 1);
      v248 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v225, v245.f64[0]), v228, v245, 1), v230, v238.f64[0]), v232, v238, 1);
      v249 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v226, v245.f64[0]), v227, v245, 1), v229, v238.f64[0]), v231, v238, 1);
      v251 = v17[34];
      v250 = v17[35];
      result = &v17[41].f64[1];
      v253 = *(float64x2_t *)((char *)v17 + 664);
      v252 = *(float64x2_t *)((char *)v17 + 680);
      v255 = v17[49];
      v254 = v17[50];
      v257 = *(float64x2_t *)((char *)v17 + 904);
      v256 = *(float64x2_t *)((char *)v17 + 920);
      v258 = v777[-43];
      v259 = vmlaq_laneq_f64(vmlaq_n_f64(v239, v251, v258.f64[0]), v253, v258, 1);
      v260 = vmlaq_laneq_f64(vmlaq_n_f64(v240, v250, v258.f64[0]), v252, v258, 1);
      v261 = v777[-42];
      v262 = vmlaq_laneq_f64(vmlaq_n_f64(v259, v255, v261.f64[0]), v257, v261, 1);
      v263 = vmlaq_laneq_f64(vmlaq_n_f64(v260, v254, v261.f64[0]), v256, v261, 1);
      v264 = *(float64x2_t *)((char *)&v777[-36] + 8);
      v265 = vmlaq_laneq_f64(vmlaq_n_f64(v241, v251, v264.f64[0]), v253, v264, 1);
      v266 = vmlaq_laneq_f64(vmlaq_n_f64(v242, v250, v264.f64[0]), v252, v264, 1);
      v267 = *(float64x2_t *)((char *)&v777[-35] + 8);
      v268 = vmlaq_laneq_f64(vmlaq_n_f64(v265, v255, v267.f64[0]), v257, v267, 1);
      v269 = vmlaq_laneq_f64(vmlaq_n_f64(v266, v254, v267.f64[0]), v256, v267, 1);
      v270 = v777[-28];
      v271 = vmlaq_laneq_f64(vmlaq_n_f64(v246, v251, v270.f64[0]), v253, v270, 1);
      v272 = vmlaq_laneq_f64(vmlaq_n_f64(v247, v250, v270.f64[0]), v252, v270, 1);
      v273 = v777[-27];
      v274 = vmlaq_laneq_f64(vmlaq_n_f64(v271, v255, v273.f64[0]), v257, v273, 1);
      v275 = vmlaq_laneq_f64(vmlaq_n_f64(v272, v254, v273.f64[0]), v256, v273, 1);
      v276 = *(float64x2_t *)((char *)&v777[-21] + 8);
      v277 = vmlaq_n_f64(v248, v251, v276.f64[0]);
      v278 = *(float64x2_t *)((char *)&v777[-20] + 8);
      v279 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v277, v253, v276, 1), v255, v278.f64[0]), v257, v278, 1);
      v280 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v249, v250, v276.f64[0]), v252, v276, 1), v254, v278.f64[0]), v256, v278, 1);
      v281 = v17[65];
      v282 = v17[64];
      v284 = *(float64x2_t *)((char *)v17 + 1144);
      v283 = *(float64x2_t *)((char *)v17 + 1160);
      v285 = v17[80];
      v286 = v17[79];
      v288 = *(float64x2_t *)((char *)v17 + 1384);
      v287 = *(float64x2_t *)((char *)v17 + 1400);
      v289 = v777[-41];
      v290 = vmlaq_laneq_f64(vmlaq_n_f64(v262, v282, v289.f64[0]), v284, v289, 1);
      v291 = vmlaq_laneq_f64(vmlaq_n_f64(v263, v281, v289.f64[0]), v283, v289, 1);
      v292 = v777[-40];
      v293 = vmlaq_laneq_f64(vmlaq_n_f64(v290, v286, v292.f64[0]), v288, v292, 1);
      v294 = vmlaq_laneq_f64(vmlaq_n_f64(v291, v285, v292.f64[0]), v287, v292, 1);
      v295 = *(float64x2_t *)((char *)&v777[-34] + 8);
      v296 = vmlaq_laneq_f64(vmlaq_n_f64(v268, v282, v295.f64[0]), v284, v295, 1);
      v297 = vmlaq_laneq_f64(vmlaq_n_f64(v269, v281, v295.f64[0]), v283, v295, 1);
      v298 = *(float64x2_t *)((char *)&v777[-33] + 8);
      v299 = vmlaq_laneq_f64(vmlaq_n_f64(v296, v286, v298.f64[0]), v288, v298, 1);
      v300 = vmlaq_laneq_f64(vmlaq_n_f64(v297, v285, v298.f64[0]), v287, v298, 1);
      v301 = v777[-26];
      v302 = vmlaq_laneq_f64(vmlaq_n_f64(v274, v282, v301.f64[0]), v284, v301, 1);
      v303 = vmlaq_laneq_f64(vmlaq_n_f64(v275, v281, v301.f64[0]), v283, v301, 1);
      v304 = v777[-25];
      v305 = vmlaq_laneq_f64(vmlaq_n_f64(v302, v286, v304.f64[0]), v288, v304, 1);
      v306 = vmlaq_laneq_f64(vmlaq_n_f64(v303, v285, v304.f64[0]), v287, v304, 1);
      v307 = *(float64x2_t *)((char *)&v777[-19] + 8);
      v308 = vmlaq_laneq_f64(vmlaq_n_f64(v279, v282, v307.f64[0]), v284, v307, 1);
      v309 = *(float64x2_t *)((char *)&v777[-18] + 8);
      v310 = vmlaq_laneq_f64(vmlaq_n_f64(v308, v286, v309.f64[0]), v288, v309, 1);
      _Q27 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v280, v281, v307.f64[0]), v283, v307, 1), v285, v309.f64[0]), v287, v309, 1);
      v312 = v17[95];
      v313 = v17[94];
      _Q31 = *(float64x2_t *)((char *)v17 + 1624);
      v314 = *(float64x2_t *)((char *)v17 + 1640);
      v316 = v17[110];
      v317 = v17[109];
      v318 = v777[-39];
      v319 = vmlaq_laneq_f64(vmlaq_n_f64(v293, v313, v318.f64[0]), _Q31, v318, 1);
      v320 = vmlaq_laneq_f64(vmlaq_n_f64(v294, v312, v318.f64[0]), v314, v318, 1);
      v318.f64[0] = v777[-38].f64[0];
      v321 = vmlaq_n_f64(v319, v317, v318.f64[0]);
      v322 = vmlaq_n_f64(v320, v316, v318.f64[0]);
      v323 = *(float64x2_t *)((char *)&v777[-32] + 8);
      v324 = vmlaq_laneq_f64(vmlaq_n_f64(v299, v313, v323.f64[0]), _Q31, v323, 1);
      v325 = vmlaq_laneq_f64(vmlaq_n_f64(v300, v312, v323.f64[0]), v314, v323, 1);
      v323.f64[0] = v777[-31].f64[1];
      v326 = vmlaq_n_f64(v324, v317, v323.f64[0]);
      _Q22 = vmlaq_n_f64(v325, v316, v323.f64[0]);
      v328 = v777[-24];
      v329 = vmlaq_laneq_f64(vmlaq_n_f64(v305, v313, v328.f64[0]), _Q31, v328, 1);
      v330 = vmlaq_laneq_f64(vmlaq_n_f64(v306, v312, v328.f64[0]), v314, v328, 1);
      v328.f64[0] = v777[-23].f64[0];
      _Q23 = vmlaq_n_f64(v329, v317, v328.f64[0]);
      v332 = vmlaq_n_f64(v330, v316, v328.f64[0]);
      v333 = *(float64x2_t *)((char *)&v777[-17] + 8);
      v334 = vmlaq_laneq_f64(vmlaq_n_f64(v310, v313, v333.f64[0]), _Q31, v333, 1);
      v313.f64[0] = v777[-16].f64[1];
      v16[4] = v321;
      v16[5] = v322;
      *(float64x2_t *)(a11 + 2000) = _Q22;
      *(float64x2_t *)(a11 + 1984) = v326;
      v16[19] = _Q23;
      v16[20] = v332;
      *(float64x2_t *)((char *)v16 + 424) = vmlaq_n_f64(v334, v317, v313.f64[0]);
      *(float64x2_t *)((char *)v16 + 440) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q27, v312, v333.f64[0]), v314, v333, 1), v316, v313.f64[0]);
      _Q26 = v17[6];
      _Q27.f64[0] = v17[14].f64[1];
      v336 = *(float64x2_t *)((char *)v17 + 216);
      _Q30 = v17[21];
      _Q31.f64[0] = v17[29].f64[1];
      v338 = *(float64x2_t *)((char *)v17 + 456);
      _Q19 = *(float64x2_t *)((char *)&v777[-37] + 8);
      _Q21 = *(float64x2_t *)((char *)&v777[-38] + 8);
      v341 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q24.f64[0]), v336, _Q24, 1), _Q30, _Q1.f64[0]), v338, _Q1, 1);
      __asm
      {
        FMLA            D23, D27, V24.D[1]
        FMLA            D23, D31, V1.D[1]
      }
      v346 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q21.f64[0]), v336, _Q21, 1), _Q30, _Q19.f64[0]), v338, _Q19, 1);
      __asm
      {
        FMLA            D22, D27, V21.D[1]
        FMLA            D22, D31, V19.D[1]
        FMLA            D21, D27, V20.D[1]
      }
      _Q24 = *(float64x2_t *)((char *)&v777[-22] + 8);
      v348 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q20.f64[0]), v336, _Q20, 1), _Q30, _Q4.f64[0]), v338, _Q4, 1);
      __asm { FMLA            D21, D31, V4.D[1] }
      _Q9 = *(float64x2_t *)((char *)&v777[-23] + 8);
      v350 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q9.f64[0]), v336, _Q9, 1), _Q30, _Q24.f64[0]), v338, _Q24, 1);
      __asm
      {
        FMLA            D20, D27, V9.D[1]
        FMLA            D20, D31, V24.D[1]
      }
      v351 = v17[36];
      _Q26.f64[0] = v17[44].f64[1];
      v352 = *(float64x2_t *)((char *)v17 + 696);
      v353 = v17[51];
      _Q30.f64[0] = v17[59].f64[1];
      v354 = *(float64x2_t *)((char *)v17 + 936);
      v355 = vmlaq_laneq_f64(vmlaq_n_f64(v341, v351, _Q2.f64[0]), v352, _Q2, 1);
      __asm { FMLA            D23, D26, V2.D[1] }
      _Q2 = *(float64x2_t *)((char *)&v777[-35] + 8);
      v357 = vmlaq_laneq_f64(vmlaq_n_f64(v355, v353, _Q5.f64[0]), v354, _Q5, 1);
      __asm { FMLA            D23, D30, V5.D[1] }
      _Q5 = *(float64x2_t *)((char *)&v777[-36] + 8);
      v359 = vmlaq_laneq_f64(vmlaq_n_f64(v346, v351, _Q5.f64[0]), v352, _Q5, 1);
      __asm { FMLA            D22, D26, V5.D[1] }
      _Q5 = *(float64x2_t *)((char *)&v777[-20] + 8);
      v361 = vmlaq_laneq_f64(vmlaq_n_f64(v359, v353, _Q2.f64[0]), v354, _Q2, 1);
      __asm { FMLA            D22, D30, V2.D[1] }
      _Q2 = *(float64x2_t *)((char *)&v777[-21] + 8);
      v363 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v348, v351, _Q3.f64[0]), v352, _Q3, 1), v353, _Q18.f64[0]), v354, _Q18, 1);
      __asm
      {
        FMLA            D21, D26, V3.D[1]
        FMLA            D21, D30, V18.D[1]
      }
      v364 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v350, v351, _Q2.f64[0]), v352, _Q2, 1), v353, _Q5.f64[0]), v354, _Q5, 1);
      __asm
      {
        FMLA            D20, D26, V2.D[1]
        FMLA            D20, D30, V5.D[1]
      }
      v365 = v17[66];
      _Q5.f64[0] = v17[74].f64[1];
      v366 = *(float64x2_t *)((char *)v17 + 1176);
      v367 = v17[81];
      _Q26.f64[0] = v17[89].f64[1];
      v368 = *(float64x2_t *)((char *)v17 + 1416);
      _Q28 = *(float64x2_t *)((char *)&v777[-33] + 8);
      _Q29 = *(float64x2_t *)((char *)&v777[-34] + 8);
      _Q30 = *(float64x2_t *)((char *)&v777[-18] + 8);
      _Q31 = *(float64x2_t *)((char *)&v777[-19] + 8);
      v373 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v357, v365, _Q7.f64[0]), v366, _Q7, 1), v367, _Q17.f64[0]), v368, _Q17, 1);
      __asm
      {
        FMLA            D23, D5, V7.D[1]
        FMLA            D23, D26, V17.D[1]
      }
      v374 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v361, v365, _Q29.f64[0]), v366, _Q29, 1), v367, _Q28.f64[0]), v368, _Q28, 1);
      __asm
      {
        FMLA            D22, D5, V29.D[1]
        FMLA            D22, D26, V28.D[1]
      }
      v375 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v363, v365, _Q6.f64[0]), v366, _Q6, 1), v367, _Q16.f64[0]), v368, _Q16, 1);
      __asm
      {
        FMLA            D21, D5, V6.D[1]
        FMLA            D21, D26, V16.D[1]
      }
      v376 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v364, v365, _Q31.f64[0]), v366, _Q31, 1), v367, _Q30.f64[0]), v368, _Q30, 1);
      __asm
      {
        FMLA            D20, D5, V31.D[1]
        FMLA            D20, D26, V30.D[1]
      }
      v377 = v17[96];
      _Q5.f64[0] = v17[104].f64[1];
      v378 = *(float64x2_t *)((char *)v17 + 1656);
      _Q7.f64[0] = v17[112].f64[0];
      v379 = v17[111];
      _Q17.f64[0] = v777[-38].f64[0];
      _Q18 = v777[-39];
      _Q24.f64[0] = v777[-31].f64[1];
      _Q25 = *(float64x2_t *)((char *)&v777[-32] + 8);
      _Q26.f64[0] = v777[-23].f64[0];
      _Q27 = v777[-24];
      _Q28.f64[0] = v777[-16].f64[1];
      _Q29 = *(float64x2_t *)((char *)&v777[-17] + 8);
      __asm
      {
        FMLA            D23, D5, V18.D[1]
        FMLA            D22, D5, V25.D[1]
        FMLA            D21, D5, V27.D[1]
        FMLA            D20, D5, V29.D[1]
      }
      v16[7].f64[0] = _Q23.f64[0] + _Q7.f64[0] * _Q17.f64[0];
      v16[6] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v373, v377, _Q18.f64[0]), v378, _Q18, 1), v379, _Q17.f64[0]);
      v16[14].f64[1] = _Q22.f64[0] + _Q7.f64[0] * _Q24.f64[0];
      *(float64x2_t *)((char *)v16 + 216) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v374, v377, _Q25.f64[0]), v378, _Q25, 1), v379, _Q24.f64[0]);
      v16[22].f64[0] = _Q21.f64[0] + _Q7.f64[0] * _Q26.f64[0];
      v16[21] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v375, v377, _Q27.f64[0]), v378, _Q27, 1), v379, _Q26.f64[0]);
      v16[29].f64[1] = _Q20.f64[0] + _Q7.f64[0] * _Q28.f64[0];
      *(float64x2_t *)((char *)v16 + 456) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v376, v377, _Q29.f64[0]), v378, _Q29, 1), v379, _Q28.f64[0]);
      v384 = v17[1];
      v385 = *(float64x2_t *)((char *)v17 + 136);
      v386 = *(float64x2_t *)((char *)v17 + 120);
      v388 = v17[15];
      v387 = v17[16];
      v389 = *(float64x2_t *)((char *)v17 + 376);
      v390 = *(float64x2_t *)((char *)v17 + 360);
      v391 = v777[-14];
      v392 = *(float64x2_t *)((char *)&v777[-4] + 8);
      v393 = *(float64x2_t *)((char *)&v777[-8] + 8);
      v394 = v777[-15];
      v395 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v394.f64[0]), v386, v394, 1), v388, v391.f64[0]), v390, v391, 1);
      v396 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v384, v394.f64[0]), v385, v394, 1), v387, v391.f64[0]), v389, v391, 1);
      v397 = vmlaq_laneq_f64(vmulq_n_f64(*v17, v393.f64[0]), v386, v393, 1);
      _Q20 = v393;
      v398 = *(float64x2_t *)((char *)&v777[-7] + 8);
      v400 = vmlaq_laneq_f64(vmlaq_n_f64(v397, v388, v398.f64[0]), v390, v398, 1);
      v401 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v384, v393.f64[0]), v385, v393, 1), v387, v398.f64[0]), v389, v398, 1);
      v402 = v17[30];
      v403 = v17[31];
      v405 = *(float64x2_t *)((char *)v17 + 600);
      v404 = *(float64x2_t *)((char *)v17 + 616);
      v407 = v17[45];
      v406 = v17[46];
      v409 = *(float64x2_t *)((char *)v17 + 840);
      v408 = *(float64x2_t *)((char *)v17 + 856);
      v410 = v777[-12];
      v411 = v777[-13];
      v412 = *(float64x2_t *)((char *)&v777[-6] + 8);
      v413 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v395, v402, v411.f64[0]), v405, v411, 1), v407, v410.f64[0]), v409, v410, 1);
      v414 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v396, v403, v411.f64[0]), v404, v411, 1), v406, v410.f64[0]), v408, v410, 1);
      v415 = vmlaq_laneq_f64(vmlaq_n_f64(v400, v402, v412.f64[0]), v405, v412, 1);
      _Q4 = v412;
      v417 = *(float64x2_t *)((char *)&v777[-5] + 8);
      v418 = vmlaq_laneq_f64(vmlaq_n_f64(v415, v407, v417.f64[0]), v409, v417, 1);
      v419 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v401, v403, v412.f64[0]), v404, v412, 1), v406, v417.f64[0]), v408, v417, 1);
      v420 = v17[60];
      v421 = v17[61];
      v423 = *(float64x2_t *)((char *)v17 + 1080);
      v422 = *(float64x2_t *)((char *)v17 + 1096);
      v424 = v17[76];
      v425 = v17[75];
      v427 = *(float64x2_t *)((char *)v17 + 1320);
      v426 = *(float64x2_t *)((char *)v17 + 1336);
      v428 = v777[-10];
      v429 = v777[-11];
      v430 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v413, v420, v429.f64[0]), v423, v429, 1), v425, v428.f64[0]), v427, v428, 1);
      v431 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v414, v421, v429.f64[0]), v422, v429, 1), v424, v428.f64[0]), v426, v428, 1);
      v432 = vmlaq_laneq_f64(vmlaq_n_f64(v418, v420, v392.f64[0]), v423, v392, 1);
      _Q5 = v392;
      v434 = *(float64x2_t *)((char *)&v777[-3] + 8);
      v435 = vmlaq_laneq_f64(vmlaq_n_f64(v432, v425, v434.f64[0]), v427, v434, 1);
      v436 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v419, v421, v392.f64[0]), v422, v392, 1), v424, v434.f64[0]), v426, v434, 1);
      v437 = v17[91];
      v438 = v17[90];
      v440 = *(float64x2_t *)((char *)v17 + 1560);
      v439 = *(float64x2_t *)((char *)v17 + 1576);
      v441 = v17[106];
      v442 = v17[105];
      v392.f64[0] = v777[-8].f64[0];
      v443 = v777[-9];
      v428.f64[0] = v777[-1].f64[1];
      v444 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v430, v438, v443.f64[0]), v440, v443, 1), v442, v392.f64[0]);
      v445 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v431, v437, v443.f64[0]), v439, v443, 1), v441, v392.f64[0]);
      _Q3 = *(float64x2_t *)((char *)&v777[-3] + 8);
      v447 = *(float64x2_t *)((char *)&v777[-2] + 8);
      v16[30] = v444;
      v16[31] = v445;
      *(float64x2_t *)(a11 + 2416) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v436, v437, v447.f64[0]), v439, v447, 1), v441, v428.f64[0]);
      *(float64x2_t *)(a11 + 2400) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v435, v438, v447.f64[0]), v440, v447, 1), v442, v428.f64[0]);
      v449 = v17[2];
      v448 = v17[3];
      v450 = *(float64x2_t *)((char *)v17 + 168);
      v451 = *(float64x2_t *)((char *)v17 + 152);
      v453 = v17[17];
      v452 = v17[18];
      v454 = *(float64x2_t *)((char *)v17 + 408);
      v455 = *(float64x2_t *)((char *)v17 + 392);
      v456 = v777[-14];
      v457 = v777[-15];
      v459 = *(float64x2_t *)((char *)&v777[-8] + 8);
      v458 = *(float64x2_t *)((char *)&v777[-7] + 8);
      v460 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v449, v457.f64[0]), v451, v457, 1), v453, v456.f64[0]), v455, v456, 1);
      v461 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v448, v457.f64[0]), v450, v457, 1), v452, v456.f64[0]), v454, v456, 1);
      v462 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v449, v459.f64[0]), v451, v459, 1), v453, v458.f64[0]), v455, v458, 1);
      v463 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v448, v459.f64[0]), v450, v459, 1), v452, v458.f64[0]), v454, v458, 1);
      v465 = v17[32];
      v464 = v17[33];
      v467 = *(float64x2_t *)((char *)v17 + 632);
      v466 = *(float64x2_t *)((char *)v17 + 648);
      v469 = v17[47];
      v468 = v17[48];
      v471 = *(float64x2_t *)((char *)v17 + 872);
      v470 = *(float64x2_t *)((char *)v17 + 888);
      v472 = v777[-12];
      v473 = v777[-13];
      v475 = *(float64x2_t *)((char *)&v777[-6] + 8);
      v474 = *(float64x2_t *)((char *)&v777[-5] + 8);
      v476 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v460, v465, v473.f64[0]), v467, v473, 1), v469, v472.f64[0]), v471, v472, 1);
      v477 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v461, v464, v473.f64[0]), v466, v473, 1), v468, v472.f64[0]), v470, v472, 1);
      v478 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v462, v465, v475.f64[0]), v467, v475, 1), v469, v474.f64[0]), v471, v474, 1);
      v479 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v463, v464, v475.f64[0]), v466, v475, 1), v468, v474.f64[0]), v470, v474, 1);
      v481 = v17[62];
      v480 = v17[63];
      v483 = *(float64x2_t *)((char *)v17 + 1112);
      v482 = *(float64x2_t *)((char *)v17 + 1128);
      v484 = v17[78];
      v485 = v17[77];
      v487 = *(float64x2_t *)((char *)v17 + 1352);
      v486 = *(float64x2_t *)((char *)v17 + 1368);
      v488 = v777[-10];
      v489 = v777[-11];
      v491 = *(float64x2_t *)((char *)&v777[-4] + 8);
      v490 = *(float64x2_t *)((char *)&v777[-3] + 8);
      v492 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v476, v481, v489.f64[0]), v483, v489, 1), v485, v488.f64[0]), v487, v488, 1);
      v493 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v477, v480, v489.f64[0]), v482, v489, 1), v484, v488.f64[0]), v486, v488, 1);
      v494 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v478, v481, v491.f64[0]), v483, v491, 1), v485, v490.f64[0]), v487, v490, 1);
      v495 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v479, v480, v491.f64[0]), v482, v491, 1), v484, v490.f64[0]), v486, v490, 1);
      v496 = v17[93];
      v497 = v17[92];
      v499 = *(float64x2_t *)((char *)v17 + 1592);
      v498 = *(float64x2_t *)((char *)v17 + 1608);
      v500 = v17[108];
      v501 = v17[107];
      v486.f64[0] = v777[-8].f64[0];
      v502 = v777[-9];
      v488.f64[0] = v777[-1].f64[1];
      v503 = *(float64x2_t *)((char *)&v777[-2] + 8);
      v16[32] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v492, v497, v502.f64[0]), v499, v502, 1), v501, v486.f64[0]);
      v16[33] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v493, v496, v502.f64[0]), v498, v502, 1), v500, v486.f64[0]);
      *(float64x2_t *)(a11 + 2448) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v495, v496, v503.f64[0]), v498, v503, 1), v500, v488.f64[0]);
      *(float64x2_t *)(a11 + 2432) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v494, v497, v503.f64[0]), v499, v503, 1), v501, v488.f64[0]);
      v505 = v17[4];
      v504 = v17[5];
      v506 = *(float64x2_t *)((char *)v17 + 200);
      v507 = *(float64x2_t *)((char *)v17 + 184);
      v509 = v17[19];
      v508 = v17[20];
      v510 = *(float64x2_t *)((char *)v17 + 440);
      v511 = *(float64x2_t *)((char *)v17 + 424);
      v512 = v777[-14];
      v513 = v777[-15];
      v515 = *(float64x2_t *)((char *)&v777[-8] + 8);
      v514 = *(float64x2_t *)((char *)&v777[-7] + 8);
      v516 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v505, v513.f64[0]), v507, v513, 1), v509, v512.f64[0]), v511, v512, 1);
      v517 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v504, v513.f64[0]), v506, v513, 1), v508, v512.f64[0]), v510, v512, 1);
      v518 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v505, v515.f64[0]), v507, v515, 1), v509, v514.f64[0]), v511, v514, 1);
      v519 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v504, v515.f64[0]), v506, v515, 1), v508, v514.f64[0]), v510, v514, 1);
      v521 = v17[34];
      v520 = v17[35];
      v523 = *(float64x2_t *)((char *)v17 + 664);
      v522 = *(float64x2_t *)((char *)v17 + 680);
      v525 = v17[49];
      v524 = v17[50];
      v527 = *(float64x2_t *)((char *)v17 + 904);
      v526 = *(float64x2_t *)((char *)v17 + 920);
      v528 = v777[-12];
      v529 = v777[-13];
      v531 = *(float64x2_t *)((char *)&v777[-6] + 8);
      v530 = *(float64x2_t *)((char *)&v777[-5] + 8);
      v532 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v516, v521, v529.f64[0]), v523, v529, 1), v525, v528.f64[0]), v527, v528, 1);
      v533 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v517, v520, v529.f64[0]), v522, v529, 1), v524, v528.f64[0]), v526, v528, 1);
      v534 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v518, v521, v531.f64[0]), v523, v531, 1), v525, v530.f64[0]), v527, v530, 1);
      v535 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v519, v520, v531.f64[0]), v522, v531, 1), v524, v530.f64[0]), v526, v530, 1);
      v536 = v17[65];
      v537 = v17[64];
      v539 = *(float64x2_t *)((char *)v17 + 1144);
      v538 = *(float64x2_t *)((char *)v17 + 1160);
      v540 = v17[80];
      v541 = v17[79];
      v543 = *(float64x2_t *)((char *)v17 + 1384);
      v542 = *(float64x2_t *)((char *)v17 + 1400);
      v544 = v777[-10];
      v545 = v777[-11];
      v547 = *(float64x2_t *)((char *)&v777[-4] + 8);
      v546 = *(float64x2_t *)((char *)&v777[-3] + 8);
      _Q24 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v532, v537, v545.f64[0]), v539, v545, 1), v541, v544.f64[0]), v543, v544, 1);
      v549 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v533, v536, v545.f64[0]), v538, v545, 1), v540, v544.f64[0]), v542, v544, 1);
      v550 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v534, v537, v547.f64[0]), v539, v547, 1), v541, v546.f64[0]), v543, v546, 1);
      _Q0 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v535, v536, v547.f64[0]), v538, v547, 1), v540, v546.f64[0]), v542, v546, 1);
      _Q2 = v17[95];
      v553 = v17[94];
      v555 = *(float64x2_t *)((char *)v17 + 1624);
      _Q7 = *(float64x2_t *)((char *)v17 + 1640);
      _Q17 = v17[110];
      v557 = v17[109];
      v542.f64[0] = v777[-8].f64[0];
      v558 = v777[-9];
      v544.f64[0] = v777[-1].f64[1];
      v559 = *(float64x2_t *)((char *)&v777[-2] + 8);
      v16[34] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q24, v553, v558.f64[0]), v555, v558, 1), v557, v542.f64[0]);
      v16[35] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v549, _Q2, v558.f64[0]), _Q7, v558, 1), _Q17, v542.f64[0]);
      *(float64x2_t *)(a11 + 2480) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q0, _Q2, v559.f64[0]), _Q7, v559, 1), _Q17, v544.f64[0]);
      *(float64x2_t *)(a11 + 2464) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v550, v553, v559.f64[0]), v555, v559, 1), v557, v544.f64[0]);
      v560 = v17[6];
      _Q2.f64[0] = v17[14].f64[1];
      v561 = *(float64x2_t *)((char *)v17 + 216);
      v562 = v17[21];
      _Q17.f64[0] = v17[29].f64[1];
      v563 = *(float64x2_t *)((char *)v17 + 456);
      _Q19 = v777[-14];
      _Q21 = v777[-15];
      _Q22 = *(float64x2_t *)((char *)&v777[-7] + 8);
      v567 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v560, _Q21.f64[0]), v561, _Q21, 1), v562, _Q19.f64[0]), v563, _Q19, 1);
      __asm
      {
        FMLA            D24, D2, V21.D[1]
        FMLA            D24, D17, V19.D[1]
      }
      v568 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v560, _Q20.f64[0]), v561, _Q20, 1), v562, _Q22.f64[0]), v563, _Q22, 1);
      __asm
      {
        FMLA            D0, D2, V20.D[1]
        FMLA            D0, D17, V22.D[1]
      }
      _Q6 = v17[36];
      _Q7.f64[0] = v17[44].f64[1];
      v570 = *(float64x2_t *)((char *)v17 + 696);
      _Q18 = v17[51];
      _Q19.f64[0] = v17[59].f64[1];
      v572 = *(float64x2_t *)((char *)v17 + 936);
      _Q21 = v777[-12];
      _Q22 = v777[-13];
      _Q25 = *(float64x2_t *)((char *)&v777[-5] + 8);
      v576 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v567, _Q6, _Q22.f64[0]), v570, _Q22, 1), _Q18, _Q21.f64[0]), v572, _Q21, 1);
      __asm
      {
        FMLA            D24, D7, V22.D[1]
        FMLA            D24, D19, V21.D[1]
      }
      v577 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v568, _Q6, _Q4.f64[0]), v570, _Q4, 1), _Q18, _Q25.f64[0]), v572, _Q25, 1);
      __asm
      {
        FMLA            D0, D7, V4.D[1]
        FMLA            D0, D19, V25.D[1]
      }
      _Q4 = v17[66];
      _Q6.f64[0] = v17[74].f64[1];
      v579 = *(float64x2_t *)((char *)v17 + 1176);
      v580 = v17[81];
      _Q18.f64[0] = v17[89].f64[1];
      v581 = *(float64x2_t *)((char *)v17 + 1416);
      _Q20 = v777[-10];
      _Q21 = v777[-11];
      v584 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v576, _Q4, _Q21.f64[0]), v579, _Q21, 1), v580, _Q20.f64[0]), v581, _Q20, 1);
      __asm
      {
        FMLA            D24, D6, V21.D[1]
        FMLA            D24, D18, V20.D[1]
      }
      v585 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v577, _Q4, _Q5.f64[0]), v579, _Q5, 1), v580, _Q3.f64[0]), v581, _Q3, 1);
      __asm
      {
        FMLA            D0, D6, V5.D[1]
        FMLA            D0, D18, V3.D[1]
      }
      v586 = v17[96];
      _Q4.f64[0] = v17[104].f64[1];
      v587 = *(float64x2_t *)((char *)v17 + 1656);
      _Q6.f64[0] = v17[112].f64[0];
      v588 = v17[111];
      v570.f64[0] = v777[-8].f64[0];
      _Q17 = v777[-9];
      _Q18.f64[0] = v777[-1].f64[1];
      _Q19 = *(float64x2_t *)((char *)&v777[-2] + 8);
      __asm
      {
        FMLA            D24, D4, V17.D[1]
        FMLA            D0, D4, V19.D[1]
      }
      v16[37].f64[0] = _Q24.f64[0] + _Q6.f64[0] * v570.f64[0];
      v16[36] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v584, v586, _Q17.f64[0]), v587, _Q17, 1), v588, v570.f64[0]);
      v16[44].f64[1] = _Q0.f64[0] + _Q6.f64[0] * _Q18.f64[0];
      *(float64x2_t *)((char *)v16 + 696) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v585, v586, _Q19.f64[0]), v587, _Q19, 1), v588, _Q18.f64[0]);
      break;
    case 1:
      for (i = 0; i != 720; i += 120)
      {
        v592 = *(float64x2_t *)(a11 + i + 1800);
        v593 = *(float64x2_t *)(a11 + i + 1816);
        v594 = *(float64x2_t *)(a11 + i + 1832);
        v595 = *(float64x2_t *)(a11 + i + 1848);
        v596 = *(float64x2_t *)(a11 + i + 1864);
        v597 = *(float64x2_t *)(a11 + i + 1880);
        v598 = *(float64x2_t *)(a11 + i + 1896);
        a9.f64[0] = *(float64_t *)(a11 + i + 1912);
        v13.f64[0] = a12[8].f64[0];
        v599 = a12[3];
        v600 = a12[4];
        v601 = a12[5];
        v602 = a12[6];
        v603 = a12[7];
        v813 = vmulq_f64(a9, v13);
        v812 = vmulq_f64(v598, v603);
        v811 = vmulq_f64(v597, v602);
        v809 = vmulq_f64(v595, v600);
        v810 = vmulq_f64(v596, v601);
        v604 = vmulq_f64(v594, v599);
        v605 = a12[1];
        v807 = vmulq_f64(v593, a12[2]);
        v808 = v604;
        v806 = vmulq_f64(v592, v605);
        result = (float64_t *)memcpy(v814, v16, sizeof(v814));
        v606 = (float64x2_t *)((char *)v814 + i);
        v607 = v807;
        *v606 = v806;
        v606[1] = v607;
        v608 = v809;
        v606[2] = v808;
        v606[3] = v608;
        v609 = v811;
        v606[4] = v810;
        v606[5] = v609;
        v606[6] = v812;
        v606[7].f64[0] = v813.f64[0];
        v610 = v814[44];
        v611 = v814[42];
        v16[43] = v814[43];
        v16[44] = v610;
        v612 = v814[40];
        v16[41] = v814[41];
        v16[42] = v611;
        v613 = v814[38];
        v16[39] = v814[39];
        v16[40] = v612;
        v614 = v814[36];
        v16[37] = v814[37];
        v16[38] = v613;
        v615 = v814[34];
        v16[35] = v814[35];
        v16[36] = v614;
        v616 = v814[32];
        v16[33] = v814[33];
        v16[34] = v615;
        v617 = v814[30];
        v16[31] = v814[31];
        v16[32] = v616;
        v618 = v814[28];
        v16[29] = v814[29];
        v16[30] = v617;
        v619 = v814[26];
        v16[27] = v814[27];
        v16[28] = v618;
        v620 = v814[24];
        v16[25] = v814[25];
        v16[26] = v619;
        v621 = v814[22];
        v16[23] = v814[23];
        v16[24] = v620;
        v622 = v814[20];
        v16[21] = v814[21];
        v16[22] = v621;
        v623 = v814[18];
        v16[19] = v814[19];
        v16[20] = v622;
        v624 = v814[16];
        v16[17] = v814[17];
        v16[18] = v623;
        v625 = v814[14];
        v16[15] = v814[15];
        v16[16] = v624;
        v626 = v814[12];
        v16[13] = v814[13];
        v16[14] = v625;
        v627 = v814[10];
        v16[11] = v814[11];
        v16[12] = v626;
        v628 = v814[8];
        v16[9] = v814[9];
        v16[10] = v627;
        v629 = v814[6];
        v16[7] = v814[7];
        v16[8] = v628;
        v630 = v814[4];
        v16[5] = v814[5];
        v16[6] = v629;
        v631 = v814[2];
        v16[3] = v814[3];
        v16[4] = v630;
        v632 = v814[0];
        v16[1] = v814[1];
        v16[2] = v631;
        *v16 = v632;
      }
      break;
    case 2:
      v633 = a12[1].f64[0];
      v635 = *(float64x2_t *)(a11 + 2264);
      v634 = *(float64x2_t *)(a11 + 2280);
      v637 = *(float64x2_t *)(a11 + 2232);
      v636 = *(float64x2_t *)(a11 + 2248);
      v639 = *(float64x2_t *)(a11 + 2200);
      v638 = *(float64x2_t *)(a11 + 2216);
      v641 = *(float64x2_t *)(a11 + 2168);
      v640 = *(float64x2_t *)(a11 + 2184);
      v643 = *(float64x2_t *)(a11 + 2136);
      v642 = *(float64x2_t *)(a11 + 2152);
      v645 = *(float64x2_t *)(a11 + 2104);
      v644 = *(float64x2_t *)(a11 + 2120);
      v647 = *(float64x2_t *)(a11 + 2072);
      v646 = *(float64x2_t *)(a11 + 2088);
      v649 = *(float64x2_t *)(a11 + 2040);
      v648 = *(float64x2_t *)(a11 + 2056);
      v651 = *(float64x2_t *)(a11 + 2008);
      v650 = *(float64x2_t *)(a11 + 2024);
      v652 = *(float64x2_t *)(a11 + 1976);
      v653 = *(float64x2_t *)(a11 + 1992);
      v654 = *(float64x2_t *)(a11 + 1944);
      v655 = *(float64x2_t *)(a11 + 1960);
      v656 = *(float64x2_t *)(a11 + 1912);
      v657 = *(float64x2_t *)(a11 + 1928);
      v658 = *(float64x2_t *)(a11 + 1880);
      v659 = *(float64x2_t *)(a11 + 1896);
      v660 = *(float64x2_t *)(a11 + 1848);
      v661 = *(float64x2_t *)(a11 + 1864);
      v662 = *(float64x2_t *)(a11 + 1816);
      v663 = *(float64x2_t *)(a11 + 1832);
      v813 = vmulq_n_f64(*v16, v633);
      v812 = vmulq_n_f64(v662, v633);
      v811 = vmulq_n_f64(v663, v633);
      v809 = vmulq_n_f64(v661, v633);
      v810 = vmulq_n_f64(v660, v633);
      v807 = vmulq_n_f64(v659, v633);
      v808 = vmulq_n_f64(v658, v633);
      v805 = vmulq_n_f64(v657, v633);
      v806 = vmulq_n_f64(v656, v633);
      v803 = vmulq_n_f64(v655, v633);
      v804 = vmulq_n_f64(v654, v633);
      v801 = vmulq_n_f64(v653, v633);
      v802 = vmulq_n_f64(v652, v633);
      v800 = vmulq_n_f64(v651, v633);
      v664 = vmulq_n_f64(*(float64x2_t *)(a11 + 2296), v633);
      v665 = vmulq_n_f64(*(float64x2_t *)(a11 + 2312), v633);
      v666 = vmulq_n_f64(*(float64x2_t *)(a11 + 2328), v633);
      v667 = vmulq_n_f64(*(float64x2_t *)(a11 + 2344), v633);
      v668 = vmulq_n_f64(*(float64x2_t *)(a11 + 2360), v633);
      v669 = vmulq_n_f64(*(float64x2_t *)(a11 + 2376), v633);
      v670 = vmulq_n_f64(*(float64x2_t *)(a11 + 2392), v633);
      v671 = vmulq_n_f64(*(float64x2_t *)(a11 + 2408), v633);
      v672 = vmulq_n_f64(*(float64x2_t *)(a11 + 2424), v633);
      v673 = vmulq_n_f64(*(float64x2_t *)(a11 + 2440), v633);
      v674 = vmulq_n_f64(*(float64x2_t *)(a11 + 2456), v633);
      v675 = vmulq_n_f64(*(float64x2_t *)(a11 + 2472), v633);
      v676 = *(float64x2_t *)(a11 + 2504);
      *(float64x2_t *)(a11 + 2488) = vmulq_n_f64(*(float64x2_t *)(a11 + 2488), v633);
      *(float64x2_t *)(a11 + 2504) = vmulq_n_f64(v676, v633);
      *(float64x2_t *)(a11 + 2456) = v674;
      *(float64x2_t *)(a11 + 2472) = v675;
      *(float64x2_t *)(a11 + 2424) = v672;
      *(float64x2_t *)(a11 + 2440) = v673;
      *(float64x2_t *)(a11 + 2392) = v670;
      *(float64x2_t *)(a11 + 2408) = v671;
      *(float64x2_t *)(a11 + 2360) = v668;
      *(float64x2_t *)(a11 + 2376) = v669;
      *(float64x2_t *)(a11 + 2328) = v666;
      *(float64x2_t *)(a11 + 2344) = v667;
      *(float64x2_t *)(a11 + 2296) = v664;
      *(float64x2_t *)(a11 + 2312) = v665;
      *(float64x2_t *)(a11 + 2264) = vmulq_n_f64(v635, v633);
      *(float64x2_t *)(a11 + 2280) = vmulq_n_f64(v634, v633);
      *(float64x2_t *)(a11 + 2232) = vmulq_n_f64(v637, v633);
      *(float64x2_t *)(a11 + 2248) = vmulq_n_f64(v636, v633);
      *(float64x2_t *)(a11 + 2200) = vmulq_n_f64(v639, v633);
      *(float64x2_t *)(a11 + 2216) = vmulq_n_f64(v638, v633);
      *(float64x2_t *)(a11 + 2168) = vmulq_n_f64(v641, v633);
      *(float64x2_t *)(a11 + 2184) = vmulq_n_f64(v640, v633);
      *(float64x2_t *)(a11 + 2136) = vmulq_n_f64(v643, v633);
      *(float64x2_t *)(a11 + 2152) = vmulq_n_f64(v642, v633);
      *(float64x2_t *)(a11 + 2104) = vmulq_n_f64(v645, v633);
      *(float64x2_t *)(a11 + 2120) = vmulq_n_f64(v644, v633);
      *(float64x2_t *)(a11 + 2072) = vmulq_n_f64(v647, v633);
      *(float64x2_t *)(a11 + 2088) = vmulq_n_f64(v646, v633);
      *(float64x2_t *)(a11 + 2040) = vmulq_n_f64(v649, v633);
      *(float64x2_t *)(a11 + 2056) = vmulq_n_f64(v648, v633);
      *(float64x2_t *)(a11 + 2008) = v800;
      *(float64x2_t *)(a11 + 2024) = vmulq_n_f64(v650, v633);
      *(float64x2_t *)(a11 + 1992) = v801;
      *(float64x2_t *)(a11 + 1976) = v802;
      *(float64x2_t *)(a11 + 1960) = v803;
      *(float64x2_t *)(a11 + 1944) = v804;
      *(float64x2_t *)(a11 + 1928) = v805;
      *(float64x2_t *)(a11 + 1912) = v806;
      *(float64x2_t *)(a11 + 1896) = v807;
      *(float64x2_t *)(a11 + 1880) = v808;
      *(float64x2_t *)(a11 + 1864) = v809;
      *(float64x2_t *)(a11 + 1848) = v810;
      *(float64x2_t *)(a11 + 1832) = v811;
      *(float64x2_t *)(a11 + 1816) = v812;
      *v16 = v813;
      break;
    case 4:
      v677 = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&a12->f64[0] + 56))(v814, a12);
      MEMORY[0x24BDAC7A8](v677);
      memcpy(&v777[68], v16, 0x2D0uLL);
      v804 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[1], v777[75].f64[1]), *(float64x2_t *)((char *)&v814[8] + 8), *(float64x2_t *)((char *)&v777[75] + 8), 1), v814[16], v777[76].f64[1]),
                                     *(float64x2_t *)((char *)&v814[23] + 8),
                                     *(float64x2_t *)((char *)&v777[76] + 8),
                                     1),
                                   v814[31],
                                   v777[77].f64[1]),
                                 *(float64x2_t *)((char *)&v814[38] + 8),
                                 *(float64x2_t *)((char *)&v777[77] + 8),
                                 1),
                               v816,
                               v777[78].f64[1]),
                             v823,
                             *(float64x2_t *)((char *)&v777[78] + 8),
                             1),
                           v831,
                           v777[79].f64[1]),
                         v838,
                         *(float64x2_t *)((char *)&v777[79] + 8),
                         1),
                       v846,
                       v777[80].f64[1]),
                     v853,
                     *(float64x2_t *)((char *)&v777[80] + 8),
                     1),
                   v861,
                   v777[81].f64[1]),
                 v868,
                 *(float64x2_t *)((char *)&v777[81] + 8),
                 1),
               v876,
               v777[82].f64[1]);
      v805 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[0], v777[68].f64[0]), *(float64x2_t *)((char *)&v814[7] + 8), v777[68], 1), v814[15], v777[69].f64[0]),
                                     *(float64x2_t *)((char *)&v814[22] + 8),
                                     v777[69],
                                     1),
                                   v814[30],
                                   v777[70].f64[0]),
                                 *(float64x2_t *)((char *)&v814[37] + 8),
                                 v777[70],
                                 1),
                               v815,
                               v777[71].f64[0]),
                             v822,
                             v777[71],
                             1),
                           v830,
                           v777[72].f64[0]),
                         v837,
                         v777[72],
                         1),
                       v845,
                       v777[73].f64[0]),
                     v852,
                     v777[73],
                     1),
                   v860,
                   v777[74].f64[0]),
                 v867,
                 v777[74],
                 1),
               v875,
               v777[75].f64[0]);
      v806 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[0], v777[83].f64[0]), *(float64x2_t *)((char *)&v814[7] + 8), v777[83], 1), v814[15], v777[84].f64[0]),
                                     *(float64x2_t *)((char *)&v814[22] + 8),
                                     v777[84],
                                     1),
                                   v814[30],
                                   v777[85].f64[0]),
                                 *(float64x2_t *)((char *)&v814[37] + 8),
                                 v777[85],
                                 1),
                               v815,
                               v777[86].f64[0]),
                             v822,
                             v777[86],
                             1),
                           v830,
                           v777[87].f64[0]),
                         v837,
                         v777[87],
                         1),
                       v845,
                       v777[88].f64[0]),
                     v852,
                     v777[88],
                     1),
                   v860,
                   v777[89].f64[0]),
                 v867,
                 v777[89],
                 1),
               v875,
               v777[90].f64[0]);
      v807 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[0], v777[75].f64[1]), *(float64x2_t *)((char *)&v814[7] + 8), *(float64x2_t *)((char *)&v777[75] + 8), 1), v814[15], v777[76].f64[1]),
                                     *(float64x2_t *)((char *)&v814[22] + 8),
                                     *(float64x2_t *)((char *)&v777[76] + 8),
                                     1),
                                   v814[30],
                                   v777[77].f64[1]),
                                 *(float64x2_t *)((char *)&v814[37] + 8),
                                 *(float64x2_t *)((char *)&v777[77] + 8),
                                 1),
                               v815,
                               v777[78].f64[1]),
                             v822,
                             *(float64x2_t *)((char *)&v777[78] + 8),
                             1),
                           v830,
                           v777[79].f64[1]),
                         v837,
                         *(float64x2_t *)((char *)&v777[79] + 8),
                         1),
                       v845,
                       v777[80].f64[1]),
                     v852,
                     *(float64x2_t *)((char *)&v777[80] + 8),
                     1),
                   v860,
                   v777[81].f64[1]),
                 v867,
                 *(float64x2_t *)((char *)&v777[81] + 8),
                 1),
               v875,
               v777[82].f64[1]);
      v802 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[1], v777[68].f64[0]), *(float64x2_t *)((char *)&v814[8] + 8), v777[68], 1), v814[16], v777[69].f64[0]),
                                     *(float64x2_t *)((char *)&v814[23] + 8),
                                     v777[69],
                                     1),
                                   v814[31],
                                   v777[70].f64[0]),
                                 *(float64x2_t *)((char *)&v814[38] + 8),
                                 v777[70],
                                 1),
                               v816,
                               v777[71].f64[0]),
                             v823,
                             v777[71],
                             1),
                           v831,
                           v777[72].f64[0]),
                         v838,
                         v777[72],
                         1),
                       v846,
                       v777[73].f64[0]),
                     v853,
                     v777[73],
                     1),
                   v861,
                   v777[74].f64[0]),
                 v868,
                 v777[74],
                 1),
               v876,
               v777[75].f64[0]);
      v803 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[1], v777[83].f64[0]), *(float64x2_t *)((char *)&v814[8] + 8), v777[83], 1), v814[16], v777[84].f64[0]),
                                     *(float64x2_t *)((char *)&v814[23] + 8),
                                     v777[84],
                                     1),
                                   v814[31],
                                   v777[85].f64[0]),
                                 *(float64x2_t *)((char *)&v814[38] + 8),
                                 v777[85],
                                 1),
                               v816,
                               v777[86].f64[0]),
                             v823,
                             v777[86],
                             1),
                           v831,
                           v777[87].f64[0]),
                         v838,
                         v777[87],
                         1),
                       v846,
                       v777[88].f64[0]),
                     v853,
                     v777[88],
                     1),
                   v861,
                   v777[89].f64[0]),
                 v868,
                 v777[89],
                 1),
               v876,
               v777[90].f64[0]);
      v800 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[1], v777[90].f64[1]), *(float64x2_t *)((char *)&v814[8] + 8), *(float64x2_t *)((char *)&v777[90] + 8), 1), v814[16], v777[91].f64[1]),
                                     *(float64x2_t *)((char *)&v814[23] + 8),
                                     *(float64x2_t *)((char *)&v777[91] + 8),
                                     1),
                                   v814[31],
                                   v777[92].f64[1]),
                                 *(float64x2_t *)((char *)&v814[38] + 8),
                                 *(float64x2_t *)((char *)&v777[92] + 8),
                                 1),
                               v816,
                               v777[93].f64[1]),
                             v823,
                             *(float64x2_t *)((char *)&v777[93] + 8),
                             1),
                           v831,
                           v777[94].f64[1]),
                         v838,
                         *(float64x2_t *)((char *)&v777[94] + 8),
                         1),
                       v846,
                       v777[95].f64[1]),
                     v853,
                     *(float64x2_t *)((char *)&v777[95] + 8),
                     1),
                   v861,
                   v777[96].f64[1]),
                 v868,
                 *(float64x2_t *)((char *)&v777[96] + 8),
                 1),
               v876,
               v777[97].f64[1]);
      v801 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[0], v777[90].f64[1]), *(float64x2_t *)((char *)&v814[7] + 8), *(float64x2_t *)((char *)&v777[90] + 8), 1), v814[15], v777[91].f64[1]),
                                     *(float64x2_t *)((char *)&v814[22] + 8),
                                     *(float64x2_t *)((char *)&v777[91] + 8),
                                     1),
                                   v814[30],
                                   v777[92].f64[1]),
                                 *(float64x2_t *)((char *)&v814[37] + 8),
                                 *(float64x2_t *)((char *)&v777[92] + 8),
                                 1),
                               v815,
                               v777[93].f64[1]),
                             v822,
                             *(float64x2_t *)((char *)&v777[93] + 8),
                             1),
                           v830,
                           v777[94].f64[1]),
                         v837,
                         *(float64x2_t *)((char *)&v777[94] + 8),
                         1),
                       v845,
                       v777[95].f64[1]),
                     v852,
                     *(float64x2_t *)((char *)&v777[95] + 8),
                     1),
                   v860,
                   v777[96].f64[1]),
                 v867,
                 *(float64x2_t *)((char *)&v777[96] + 8),
                 1),
               v875,
               v777[97].f64[1]);
      v792 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[2], v777[68].f64[0]), *(float64x2_t *)((char *)&v814[9] + 8), v777[68], 1), v814[17], v777[69].f64[0]),
                                     *(float64x2_t *)((char *)&v814[24] + 8),
                                     v777[69],
                                     1),
                                   v814[32],
                                   v777[70].f64[0]),
                                 *(float64x2_t *)((char *)&v814[39] + 8),
                                 v777[70],
                                 1),
                               v817,
                               v777[71].f64[0]),
                             v824,
                             v777[71],
                             1),
                           v832,
                           v777[72].f64[0]),
                         v839,
                         v777[72],
                         1),
                       v847,
                       v777[73].f64[0]),
                     v854,
                     v777[73],
                     1),
                   v862,
                   v777[74].f64[0]),
                 v869,
                 v777[74],
                 1),
               v877,
               v777[75].f64[0]);
      v678 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[3], v777[68].f64[0]), *(float64x2_t *)((char *)&v814[10] + 8), v777[68], 1), v814[18], v777[69].f64[0]),
                                     *(float64x2_t *)((char *)&v814[25] + 8),
                                     v777[69],
                                     1),
                                   v814[33],
                                   v777[70].f64[0]),
                                 *(float64x2_t *)((char *)&v814[40] + 8),
                                 v777[70],
                                 1),
                               v818,
                               v777[71].f64[0]),
                             v825,
                             v777[71],
                             1),
                           v833,
                           v777[72].f64[0]),
                         v840,
                         v777[72],
                         1),
                       v848,
                       v777[73].f64[0]),
                     v855,
                     v777[73],
                     1),
                   v863,
                   v777[74].f64[0]),
                 v870,
                 v777[74],
                 1),
               v878,
               v777[75].f64[0]);
      v679 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[2], v777[75].f64[1]), *(float64x2_t *)((char *)&v814[9] + 8), *(float64x2_t *)((char *)&v777[75] + 8), 1), v814[17], v777[76].f64[1]),
                                     *(float64x2_t *)((char *)&v814[24] + 8),
                                     *(float64x2_t *)((char *)&v777[76] + 8),
                                     1),
                                   v814[32],
                                   v777[77].f64[1]),
                                 *(float64x2_t *)((char *)&v814[39] + 8),
                                 *(float64x2_t *)((char *)&v777[77] + 8),
                                 1),
                               v817,
                               v777[78].f64[1]),
                             v824,
                             *(float64x2_t *)((char *)&v777[78] + 8),
                             1),
                           v832,
                           v777[79].f64[1]),
                         v839,
                         *(float64x2_t *)((char *)&v777[79] + 8),
                         1),
                       v847,
                       v777[80].f64[1]),
                     v854,
                     *(float64x2_t *)((char *)&v777[80] + 8),
                     1),
                   v862,
                   v777[81].f64[1]),
                 v869,
                 *(float64x2_t *)((char *)&v777[81] + 8),
                 1),
               v877,
               v777[82].f64[1]);
      v680 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[3], v777[75].f64[1]), *(float64x2_t *)((char *)&v814[10] + 8), *(float64x2_t *)((char *)&v777[75] + 8), 1), v814[18], v777[76].f64[1]),
                                     *(float64x2_t *)((char *)&v814[25] + 8),
                                     *(float64x2_t *)((char *)&v777[76] + 8),
                                     1),
                                   v814[33],
                                   v777[77].f64[1]),
                                 *(float64x2_t *)((char *)&v814[40] + 8),
                                 *(float64x2_t *)((char *)&v777[77] + 8),
                                 1),
                               v818,
                               v777[78].f64[1]),
                             v825,
                             *(float64x2_t *)((char *)&v777[78] + 8),
                             1),
                           v833,
                           v777[79].f64[1]),
                         v840,
                         *(float64x2_t *)((char *)&v777[79] + 8),
                         1),
                       v848,
                       v777[80].f64[1]),
                     v855,
                     *(float64x2_t *)((char *)&v777[80] + 8),
                     1),
                   v863,
                   v777[81].f64[1]),
                 v870,
                 *(float64x2_t *)((char *)&v777[81] + 8),
                 1),
               v878,
               v777[82].f64[1]);
      v681 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[2], v777[83].f64[0]), *(float64x2_t *)((char *)&v814[9] + 8), v777[83], 1), v814[17], v777[84].f64[0]),
                                     *(float64x2_t *)((char *)&v814[24] + 8),
                                     v777[84],
                                     1),
                                   v814[32],
                                   v777[85].f64[0]),
                                 *(float64x2_t *)((char *)&v814[39] + 8),
                                 v777[85],
                                 1),
                               v817,
                               v777[86].f64[0]),
                             v824,
                             v777[86],
                             1),
                           v832,
                           v777[87].f64[0]),
                         v839,
                         v777[87],
                         1),
                       v847,
                       v777[88].f64[0]),
                     v854,
                     v777[88],
                     1),
                   v862,
                   v777[89].f64[0]),
                 v869,
                 v777[89],
                 1),
               v877,
               v777[90].f64[0]);
      v682 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[3], v777[83].f64[0]), *(float64x2_t *)((char *)&v814[10] + 8), v777[83], 1), v814[18], v777[84].f64[0]),
                                     *(float64x2_t *)((char *)&v814[25] + 8),
                                     v777[84],
                                     1),
                                   v814[33],
                                   v777[85].f64[0]),
                                 *(float64x2_t *)((char *)&v814[40] + 8),
                                 v777[85],
                                 1),
                               v818,
                               v777[86].f64[0]),
                             v825,
                             v777[86],
                             1),
                           v833,
                           v777[87].f64[0]),
                         v840,
                         v777[87],
                         1),
                       v848,
                       v777[88].f64[0]),
                     v855,
                     v777[88],
                     1),
                   v863,
                   v777[89].f64[0]),
                 v870,
                 v777[89],
                 1),
               v878,
               v777[90].f64[0]);
      v683 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[2], v777[90].f64[1]), *(float64x2_t *)((char *)&v814[9] + 8), *(float64x2_t *)((char *)&v777[90] + 8), 1), v814[17], v777[91].f64[1]),
                                     *(float64x2_t *)((char *)&v814[24] + 8),
                                     *(float64x2_t *)((char *)&v777[91] + 8),
                                     1),
                                   v814[32],
                                   v777[92].f64[1]),
                                 *(float64x2_t *)((char *)&v814[39] + 8),
                                 *(float64x2_t *)((char *)&v777[92] + 8),
                                 1),
                               v817,
                               v777[93].f64[1]),
                             v824,
                             *(float64x2_t *)((char *)&v777[93] + 8),
                             1),
                           v832,
                           v777[94].f64[1]),
                         v839,
                         *(float64x2_t *)((char *)&v777[94] + 8),
                         1),
                       v847,
                       v777[95].f64[1]),
                     v854,
                     *(float64x2_t *)((char *)&v777[95] + 8),
                     1),
                   v862,
                   v777[96].f64[1]),
                 v869,
                 *(float64x2_t *)((char *)&v777[96] + 8),
                 1),
               v877,
               v777[97].f64[1]);
      v684 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[3], v777[90].f64[1]), *(float64x2_t *)((char *)&v814[10] + 8), *(float64x2_t *)((char *)&v777[90] + 8), 1), v814[18], v777[91].f64[1]),
                                     *(float64x2_t *)((char *)&v814[25] + 8),
                                     *(float64x2_t *)((char *)&v777[91] + 8),
                                     1),
                                   v814[33],
                                   v777[92].f64[1]),
                                 *(float64x2_t *)((char *)&v814[40] + 8),
                                 *(float64x2_t *)((char *)&v777[92] + 8),
                                 1),
                               v818,
                               v777[93].f64[1]),
                             v825,
                             *(float64x2_t *)((char *)&v777[93] + 8),
                             1),
                           v833,
                           v777[94].f64[1]),
                         v840,
                         *(float64x2_t *)((char *)&v777[94] + 8),
                         1),
                       v848,
                       v777[95].f64[1]),
                     v855,
                     *(float64x2_t *)((char *)&v777[95] + 8),
                     1),
                   v863,
                   v777[96].f64[1]),
                 v870,
                 *(float64x2_t *)((char *)&v777[96] + 8),
                 1),
               v878,
               v777[97].f64[1]);
      v790 = v814[5];
      v791 = v814[4];
      v789 = v814[19];
      result = &v814[41].f64[1];
      v787 = v814[34];
      v788 = v814[35];
      v786 = *(float64x2_t *)((char *)&v814[41] + 8);
      v784 = v826;
      v785 = v819;
      v783 = v841;
      v781 = v856;
      v782 = v849;
      v780 = v871;
      v685 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[4], v777[68].f64[0]), *(float64x2_t *)((char *)&v814[11] + 8), v777[68], 1), v814[19], v777[69].f64[0]),
                                     *(float64x2_t *)((char *)&v814[26] + 8),
                                     v777[69],
                                     1),
                                   v814[34],
                                   v777[70].f64[0]),
                                 *(float64x2_t *)((char *)&v814[41] + 8),
                                 v777[70],
                                 1),
                               v819,
                               v777[71].f64[0]),
                             v826,
                             v777[71],
                             1),
                           v834,
                           v777[72].f64[0]),
                         v841,
                         v777[72],
                         1),
                       v849,
                       v777[73].f64[0]),
                     v856,
                     v777[73],
                     1),
                   v864,
                   v777[74].f64[0]),
                 v871,
                 v777[74],
                 1),
               v879,
               v777[75].f64[0]);
      v686 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[5], v777[68].f64[0]), *(float64x2_t *)((char *)&v814[12] + 8), v777[68], 1), v814[20], v777[69].f64[0]),
                                     *(float64x2_t *)((char *)&v814[27] + 8),
                                     v777[69],
                                     1),
                                   v814[35],
                                   v777[70].f64[0]),
                                 *(float64x2_t *)((char *)&v814[42] + 8),
                                 v777[70],
                                 1),
                               v820,
                               v777[71].f64[0]),
                             v827,
                             v777[71],
                             1),
                           v835,
                           v777[72].f64[0]),
                         v842,
                         v777[72],
                         1),
                       v850,
                       v777[73].f64[0]),
                     v857,
                     v777[73],
                     1),
                   v865,
                   v777[74].f64[0]),
                 v872,
                 v777[74],
                 1),
               v880,
               v777[75].f64[0]);
      v687 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[4], v777[75].f64[1]), *(float64x2_t *)((char *)&v814[11] + 8), *(float64x2_t *)((char *)&v777[75] + 8), 1), v814[19], v777[76].f64[1]),
                                     *(float64x2_t *)((char *)&v814[26] + 8),
                                     *(float64x2_t *)((char *)&v777[76] + 8),
                                     1),
                                   v814[34],
                                   v777[77].f64[1]),
                                 *(float64x2_t *)((char *)&v814[41] + 8),
                                 *(float64x2_t *)((char *)&v777[77] + 8),
                                 1),
                               v819,
                               v777[78].f64[1]),
                             v826,
                             *(float64x2_t *)((char *)&v777[78] + 8),
                             1),
                           v834,
                           v777[79].f64[1]),
                         v841,
                         *(float64x2_t *)((char *)&v777[79] + 8),
                         1),
                       v849,
                       v777[80].f64[1]),
                     v856,
                     *(float64x2_t *)((char *)&v777[80] + 8),
                     1),
                   v864,
                   v777[81].f64[1]),
                 v871,
                 *(float64x2_t *)((char *)&v777[81] + 8),
                 1),
               v879,
               v777[82].f64[1]);
      v688 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[5], v777[75].f64[1]), *(float64x2_t *)((char *)&v814[12] + 8), *(float64x2_t *)((char *)&v777[75] + 8), 1), v814[20], v777[76].f64[1]),
                                     *(float64x2_t *)((char *)&v814[27] + 8),
                                     *(float64x2_t *)((char *)&v777[76] + 8),
                                     1),
                                   v814[35],
                                   v777[77].f64[1]),
                                 *(float64x2_t *)((char *)&v814[42] + 8),
                                 *(float64x2_t *)((char *)&v777[77] + 8),
                                 1),
                               v820,
                               v777[78].f64[1]),
                             v827,
                             *(float64x2_t *)((char *)&v777[78] + 8),
                             1),
                           v835,
                           v777[79].f64[1]),
                         v842,
                         *(float64x2_t *)((char *)&v777[79] + 8),
                         1),
                       v850,
                       v777[80].f64[1]),
                     v857,
                     *(float64x2_t *)((char *)&v777[80] + 8),
                     1),
                   v865,
                   v777[81].f64[1]),
                 v872,
                 *(float64x2_t *)((char *)&v777[81] + 8),
                 1),
               v880,
               v777[82].f64[1]);
      v689 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[4], v777[83].f64[0]), *(float64x2_t *)((char *)&v814[11] + 8), v777[83], 1), v814[19], v777[84].f64[0]),
                                     *(float64x2_t *)((char *)&v814[26] + 8),
                                     v777[84],
                                     1),
                                   v814[34],
                                   v777[85].f64[0]),
                                 *(float64x2_t *)((char *)&v814[41] + 8),
                                 v777[85],
                                 1),
                               v819,
                               v777[86].f64[0]),
                             v826,
                             v777[86],
                             1),
                           v834,
                           v777[87].f64[0]),
                         v841,
                         v777[87],
                         1),
                       v849,
                       v777[88].f64[0]),
                     v856,
                     v777[88],
                     1),
                   v864,
                   v777[89].f64[0]),
                 v871,
                 v777[89],
                 1),
               v879,
               v777[90].f64[0]);
      v690 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[5], v777[83].f64[0]), *(float64x2_t *)((char *)&v814[12] + 8), v777[83], 1), v814[20], v777[84].f64[0]),
                                     *(float64x2_t *)((char *)&v814[27] + 8),
                                     v777[84],
                                     1),
                                   v814[35],
                                   v777[85].f64[0]),
                                 *(float64x2_t *)((char *)&v814[42] + 8),
                                 v777[85],
                                 1),
                               v820,
                               v777[86].f64[0]),
                             v827,
                             v777[86],
                             1),
                           v835,
                           v777[87].f64[0]),
                         v842,
                         v777[87],
                         1),
                       v850,
                       v777[88].f64[0]),
                     v857,
                     v777[88],
                     1),
                   v865,
                   v777[89].f64[0]),
                 v872,
                 v777[89],
                 1),
               v880,
               v777[90].f64[0]);
      v691 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[4], v777[90].f64[1]), *(float64x2_t *)((char *)&v814[11] + 8), *(float64x2_t *)((char *)&v777[90] + 8), 1), v814[19], v777[91].f64[1]),
                                     *(float64x2_t *)((char *)&v814[26] + 8),
                                     *(float64x2_t *)((char *)&v777[91] + 8),
                                     1),
                                   v814[34],
                                   v777[92].f64[1]),
                                 *(float64x2_t *)((char *)&v814[41] + 8),
                                 *(float64x2_t *)((char *)&v777[92] + 8),
                                 1),
                               v819,
                               v777[93].f64[1]),
                             v826,
                             *(float64x2_t *)((char *)&v777[93] + 8),
                             1),
                           v834,
                           v777[94].f64[1]),
                         v841,
                         *(float64x2_t *)((char *)&v777[94] + 8),
                         1),
                       v849,
                       v777[95].f64[1]),
                     v856,
                     *(float64x2_t *)((char *)&v777[95] + 8),
                     1),
                   v864,
                   v777[96].f64[1]),
                 v871,
                 *(float64x2_t *)((char *)&v777[96] + 8),
                 1),
               v879,
               v777[97].f64[1]);
      v692 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[5], v777[90].f64[1]), *(float64x2_t *)((char *)&v814[12] + 8), *(float64x2_t *)((char *)&v777[90] + 8), 1), v814[20], v777[91].f64[1]),
                                     *(float64x2_t *)((char *)&v814[27] + 8),
                                     *(float64x2_t *)((char *)&v777[91] + 8),
                                     1),
                                   v814[35],
                                   v777[92].f64[1]),
                                 *(float64x2_t *)((char *)&v814[42] + 8),
                                 *(float64x2_t *)((char *)&v777[92] + 8),
                                 1),
                               v820,
                               v777[93].f64[1]),
                             v827,
                             *(float64x2_t *)((char *)&v777[93] + 8),
                             1),
                           v835,
                           v777[94].f64[1]),
                         v842,
                         *(float64x2_t *)((char *)&v777[94] + 8),
                         1),
                       v850,
                       v777[95].f64[1]),
                     v857,
                     *(float64x2_t *)((char *)&v777[95] + 8),
                     1),
                   v865,
                   v777[96].f64[1]),
                 v872,
                 *(float64x2_t *)((char *)&v777[96] + 8),
                 1),
               v880,
               v777[97].f64[1]);
      v779 = v814[6];
      _V4.D[1] = v777[83].f64[1];
      _V1.D[1] = v777[68].f64[1];
      _D5 = v814[14].f64[1];
      v778 = v814[14].f64[1];
      __asm { FMLA            D2, D5, V1.D[1] }
      _V1.D[1] = v777[76].f64[0];
      __asm
      {
        FMLA            D3, D5, V1.D[1]
        FMLA            D1, D5, V4.D[1]
      }
      _V4.D[1] = v777[91].f64[0];
      __asm { FMLA            D0, D5, V4.D[1] }
      v799 = v814[20];
      _V4.D[1] = v777[69].f64[1];
      _D5 = v814[29].f64[1];
      __asm { FMLA            D2, D5, V4.D[1] }
      _V4.D[1] = v777[77].f64[0];
      __asm { FMLA            D3, D5, V4.D[1] }
      _V4.D[1] = v777[84].f64[1];
      __asm { FMLA            D1, D5, V4.D[1] }
      _V4.D[1] = v777[92].f64[0];
      __asm { FMLA            D0, D5, V4.D[1] }
      _V18.D[1] = v777[70].f64[1];
      _D7 = v814[44].f64[1];
      __asm { FMLA            D2, D7, V18.D[1] }
      _V18.D[1] = v777[78].f64[0];
      __asm { FMLA            D3, D7, V18.D[1] }
      _V18.D[1] = v777[85].f64[1];
      __asm { FMLA            D1, D7, V18.D[1] }
      _V18.D[1] = v777[93].f64[0];
      __asm { FMLA            D0, D7, V18.D[1] }
      v798 = v820;
      _V18.D[1] = v777[71].f64[1];
      _D7 = v829;
      __asm { FMLA            D2, D7, V18.D[1] }
      _V18.D[1] = v777[79].f64[0];
      __asm { FMLA            D3, D7, V18.D[1] }
      _V18.D[1] = v777[86].f64[1];
      __asm { FMLA            D1, D7, V18.D[1] }
      _V18.D[1] = v777[94].f64[0];
      __asm { FMLA            D0, D7, V18.D[1] }
      _V18.D[1] = v777[72].f64[1];
      _D7 = v844;
      __asm { FMLA            D2, D7, V18.D[1] }
      _V18.D[1] = v777[80].f64[0];
      __asm { FMLA            D3, D7, V18.D[1] }
      _V18.D[1] = v777[87].f64[1];
      __asm { FMLA            D1, D7, V18.D[1] }
      _V18.D[1] = v777[95].f64[0];
      __asm { FMLA            D0, D7, V18.D[1] }
      v797 = v850;
      _V18.D[1] = v777[73].f64[1];
      _D7 = v859;
      __asm { FMLA            D2, D7, V18.D[1] }
      _V18.D[1] = v777[81].f64[0];
      __asm { FMLA            D3, D7, V18.D[1] }
      _V18.D[1] = v777[88].f64[1];
      __asm { FMLA            D1, D7, V18.D[1] }
      _V18.D[1] = v777[96].f64[0];
      __asm { FMLA            D0, D7, V18.D[1] }
      _V5.D[1] = v777[74].f64[1];
      _D18 = v874;
      __asm { FMLA            D2, D18, V5.D[1] }
      _V5.D[1] = v777[82].f64[0];
      __asm { FMLA            D3, D18, V5.D[1] }
      _V5.D[1] = v777[89].f64[1];
      __asm { FMLA            D1, D18, V5.D[1] }
      _V5.D[1] = v777[97].f64[0];
      __asm { FMLA            D0, D18, V5.D[1] }
      _Q20 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[6], v777[68].f64[0]), *(float64x2_t *)((char *)&v814[13] + 8), v777[68], 1), v814[21], v777[69].f64[0]),
                                     *(float64x2_t *)((char *)&v814[28] + 8),
                                     v777[69],
                                     1),
                                   v814[36],
                                   v777[70].f64[0]),
                                 *(float64x2_t *)((char *)&v814[43] + 8),
                                 v777[70],
                                 1),
                               v821,
                               v777[71].f64[0]),
                             v828,
                             v777[71],
                             1),
                           v836,
                           v777[72].f64[0]),
                         v843,
                         v777[72],
                         1),
                       v851,
                       v777[73].f64[0]),
                     v858,
                     v777[73],
                     1),
                   v866,
                   v777[74].f64[0]),
                 v873,
                 v777[74],
                 1),
               v881,
               v777[75].f64[0]);
      v796 = _D2 + v882 * v777[75].f64[0];
      _Q19 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[6], v777[75].f64[1]), *(float64x2_t *)((char *)&v814[13] + 8), *(float64x2_t *)((char *)&v777[75] + 8), 1), v814[21], v777[76].f64[1]),
                                     *(float64x2_t *)((char *)&v814[28] + 8),
                                     *(float64x2_t *)((char *)&v777[76] + 8),
                                     1),
                                   v814[36],
                                   v777[77].f64[1]),
                                 *(float64x2_t *)((char *)&v814[43] + 8),
                                 *(float64x2_t *)((char *)&v777[77] + 8),
                                 1),
                               v821,
                               v777[78].f64[1]),
                             v828,
                             *(float64x2_t *)((char *)&v777[78] + 8),
                             1),
                           v836,
                           v777[79].f64[1]),
                         v843,
                         *(float64x2_t *)((char *)&v777[79] + 8),
                         1),
                       v851,
                       v777[80].f64[1]),
                     v858,
                     *(float64x2_t *)((char *)&v777[80] + 8),
                     1),
                   v866,
                   v777[81].f64[1]),
                 v873,
                 *(float64x2_t *)((char *)&v777[81] + 8),
                 1),
               v881,
               v777[82].f64[1]);
      v795 = _D3 + v882 * v777[82].f64[1];
      _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[6], v777[83].f64[0]), *(float64x2_t *)((char *)&v814[13] + 8), v777[83], 1), v814[21], v777[84].f64[0]),
                                     *(float64x2_t *)((char *)&v814[28] + 8),
                                     v777[84],
                                     1),
                                   v814[36],
                                   v777[85].f64[0]),
                                 *(float64x2_t *)((char *)&v814[43] + 8),
                                 v777[85],
                                 1),
                               v821,
                               v777[86].f64[0]),
                             v828,
                             v777[86],
                             1),
                           v836,
                           v777[87].f64[0]),
                         v843,
                         v777[87],
                         1),
                       v851,
                       v777[88].f64[0]),
                     v858,
                     v777[88],
                     1),
                   v866,
                   v777[89].f64[0]),
                 v873,
                 v777[89],
                 1),
               v881,
               v777[90].f64[0]);
      v794 = _D1 + v882 * v777[90].f64[0];
      v759 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[6], v777[90].f64[1]), *(float64x2_t *)((char *)&v814[13] + 8), *(float64x2_t *)((char *)&v777[90] + 8), 1), v814[21], v777[91].f64[1]),
                                     *(float64x2_t *)((char *)&v814[28] + 8),
                                     *(float64x2_t *)((char *)&v777[91] + 8),
                                     1),
                                   v814[36],
                                   v777[92].f64[1]),
                                 *(float64x2_t *)((char *)&v814[43] + 8),
                                 *(float64x2_t *)((char *)&v777[92] + 8),
                                 1),
                               v821,
                               v777[93].f64[1]),
                             v828,
                             *(float64x2_t *)((char *)&v777[93] + 8),
                             1),
                           v836,
                           v777[94].f64[1]),
                         v843,
                         *(float64x2_t *)((char *)&v777[94] + 8),
                         1),
                       v851,
                       v777[95].f64[1]),
                     v858,
                     *(float64x2_t *)((char *)&v777[95] + 8),
                     1),
                   v866,
                   v777[96].f64[1]),
                 v873,
                 *(float64x2_t *)((char *)&v777[96] + 8),
                 1),
               v881,
               v777[97].f64[1]);
      v793 = _D0 + v882 * v777[97].f64[1];
      v812 = *(float64x2_t *)((char *)&v777[105] + 8);
      v813 = *(float64x2_t *)((char *)&v777[107] + 8);
      v811 = *(float64x2_t *)((char *)&v777[109] + 8);
      v810 = *(float64x2_t *)((char *)&v777[110] + 8);
      _Q7 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[0], v777[98].f64[0]), *(float64x2_t *)((char *)&v814[7] + 8), v777[98], 1), v814[15], v777[99].f64[0]),
                                    *(float64x2_t *)((char *)&v814[22] + 8),
                                    v777[99],
                                    1),
                                  v814[30],
                                  v777[100].f64[0]),
                                *(float64x2_t *)((char *)&v814[37] + 8),
                                v777[100],
                                1),
                              v815,
                              v777[101].f64[0]),
                            v822,
                            v777[101],
                            1),
                          v830,
                          v777[102].f64[0]),
                        v837,
                        v777[102],
                        1),
                      v845,
                      v777[103].f64[0]),
                    v852,
                    v777[103],
                    1),
                  v860,
                  v777[104].f64[0]),
                v867,
                v777[104],
                1),
              v875,
              v777[105].f64[0]);
      _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[1], v777[98].f64[0]), *(float64x2_t *)((char *)&v814[8] + 8), v777[98], 1), v814[16], v777[99].f64[0]),
                                    *(float64x2_t *)((char *)&v814[23] + 8),
                                    v777[99],
                                    1),
                                  v814[31],
                                  v777[100].f64[0]),
                                *(float64x2_t *)((char *)&v814[38] + 8),
                                v777[100],
                                1),
                              v816,
                              v777[101].f64[0]),
                            v823,
                            v777[101],
                            1),
                          v831,
                          v777[102].f64[0]),
                        v838,
                        v777[102],
                        1),
                      v846,
                      v777[103].f64[0]),
                    v853,
                    v777[103],
                    1),
                  v861,
                  v777[104].f64[0]),
                v868,
                v777[104],
                1),
              v876,
              v777[105].f64[0]);
      _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[0], v777[105].f64[1]), *(float64x2_t *)((char *)&v814[7] + 8), *(float64x2_t *)((char *)&v777[105] + 8), 1), v814[15], v777[106].f64[1]),
                                    *(float64x2_t *)((char *)&v814[22] + 8),
                                    *(float64x2_t *)((char *)&v777[106] + 8),
                                    1),
                                  v814[30],
                                  v777[107].f64[1]),
                                *(float64x2_t *)((char *)&v814[37] + 8),
                                *(float64x2_t *)((char *)&v777[107] + 8),
                                1),
                              v815,
                              v777[108].f64[1]),
                            v822,
                            *(float64x2_t *)((char *)&v777[108] + 8),
                            1),
                          v830,
                          v777[109].f64[1]),
                        v837,
                        *(float64x2_t *)((char *)&v777[109] + 8),
                        1),
                      v845,
                      v777[110].f64[1]),
                    v852,
                    *(float64x2_t *)((char *)&v777[110] + 8),
                    1),
                  v860,
                  v777[111].f64[1]),
                v867,
                *(float64x2_t *)((char *)&v777[111] + 8),
                1),
              v875,
              v777[112].f64[1]);
      v763 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[1], v777[105].f64[1]), *(float64x2_t *)((char *)&v814[8] + 8), *(float64x2_t *)((char *)&v777[105] + 8), 1), v814[16], v777[106].f64[1]),
                                     *(float64x2_t *)((char *)&v814[23] + 8),
                                     *(float64x2_t *)((char *)&v777[106] + 8),
                                     1),
                                   v814[31],
                                   v777[107].f64[1]),
                                 *(float64x2_t *)((char *)&v814[38] + 8),
                                 *(float64x2_t *)((char *)&v777[107] + 8),
                                 1),
                               v816,
                               v777[108].f64[1]),
                             v823,
                             *(float64x2_t *)((char *)&v777[108] + 8),
                             1),
                           v831,
                           v777[109].f64[1]),
                         v838,
                         *(float64x2_t *)((char *)&v777[109] + 8),
                         1),
                       v846,
                       v777[110].f64[1]),
                     v853,
                     *(float64x2_t *)((char *)&v777[110] + 8),
                     1),
                   v861,
                   v777[111].f64[1]),
                 v868,
                 *(float64x2_t *)((char *)&v777[111] + 8),
                 1),
               v876,
               v777[112].f64[1]);
      v764 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[2], v777[98].f64[0]), *(float64x2_t *)((char *)&v814[9] + 8), v777[98], 1), v814[17], v777[99].f64[0]),
                                     *(float64x2_t *)((char *)&v814[24] + 8),
                                     v777[99],
                                     1),
                                   v814[32],
                                   v777[100].f64[0]),
                                 *(float64x2_t *)((char *)&v814[39] + 8),
                                 v777[100],
                                 1),
                               v817,
                               v777[101].f64[0]),
                             v824,
                             v777[101],
                             1),
                           v832,
                           v777[102].f64[0]),
                         v839,
                         v777[102],
                         1),
                       v847,
                       v777[103].f64[0]),
                     v854,
                     v777[103],
                     1),
                   v862,
                   v777[104].f64[0]),
                 v869,
                 v777[104],
                 1),
               v877,
               v777[105].f64[0]);
      _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[3], v777[98].f64[0]), *(float64x2_t *)((char *)&v814[10] + 8), v777[98], 1), v814[18], v777[99].f64[0]),
                                     *(float64x2_t *)((char *)&v814[25] + 8),
                                     v777[99],
                                     1),
                                   v814[33],
                                   v777[100].f64[0]),
                                 *(float64x2_t *)((char *)&v814[40] + 8),
                                 v777[100],
                                 1),
                               v818,
                               v777[101].f64[0]),
                             v825,
                             v777[101],
                             1),
                           v833,
                           v777[102].f64[0]),
                         v840,
                         v777[102],
                         1),
                       v848,
                       v777[103].f64[0]),
                     v855,
                     v777[103],
                     1),
                   v863,
                   v777[104].f64[0]),
                 v870,
                 v777[104],
                 1),
               v878,
               v777[105].f64[0]);
      _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[2], v777[105].f64[1]), *(float64x2_t *)((char *)&v814[9] + 8), *(float64x2_t *)((char *)&v777[105] + 8), 1), v814[17], v777[106].f64[1]),
                                    *(float64x2_t *)((char *)&v814[24] + 8),
                                    *(float64x2_t *)((char *)&v777[106] + 8),
                                    1),
                                  v814[32],
                                  v777[107].f64[1]),
                                *(float64x2_t *)((char *)&v814[39] + 8),
                                *(float64x2_t *)((char *)&v777[107] + 8),
                                1),
                              v817,
                              v777[108].f64[1]),
                            v824,
                            *(float64x2_t *)((char *)&v777[108] + 8),
                            1),
                          v832,
                          v777[109].f64[1]),
                        v839,
                        *(float64x2_t *)((char *)&v777[109] + 8),
                        1),
                      v847,
                      v777[110].f64[1]),
                    v854,
                    *(float64x2_t *)((char *)&v777[110] + 8),
                    1),
                  v862,
                  v777[111].f64[1]),
                v869,
                *(float64x2_t *)((char *)&v777[111] + 8),
                1),
              v877,
              v777[112].f64[1]);
      _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v814[3], v777[105].f64[1]), *(float64x2_t *)((char *)&v814[10] + 8), *(float64x2_t *)((char *)&v777[105] + 8), 1), v814[18], v777[106].f64[1]),
                                     *(float64x2_t *)((char *)&v814[25] + 8),
                                     *(float64x2_t *)((char *)&v777[106] + 8),
                                     1),
                                   v814[33],
                                   v777[107].f64[1]),
                                 *(float64x2_t *)((char *)&v814[40] + 8),
                                 *(float64x2_t *)((char *)&v777[107] + 8),
                                 1),
                               v818,
                               v777[108].f64[1]),
                             v825,
                             *(float64x2_t *)((char *)&v777[108] + 8),
                             1),
                           v833,
                           v777[109].f64[1]),
                         v840,
                         *(float64x2_t *)((char *)&v777[109] + 8),
                         1),
                       v848,
                       v777[110].f64[1]),
                     v855,
                     *(float64x2_t *)((char *)&v777[110] + 8),
                     1),
                   v863,
                   v777[111].f64[1]),
                 v870,
                 *(float64x2_t *)((char *)&v777[111] + 8),
                 1),
               v878,
               v777[112].f64[1]);
      v768 = v802;
      *v16 = v805;
      v16[1] = v768;
      v769 = v803;
      *(float64x2_t *)(a11 + 1936) = v804;
      *(float64x2_t *)(a11 + 1920) = v807;
      v16[15] = v806;
      v16[16] = v769;
      v770 = v800;
      *(float64x2_t *)((char *)v16 + 360) = v801;
      *(float64x2_t *)((char *)v16 + 376) = v770;
      v16[2] = v792;
      v16[3] = v678;
      *(float64x2_t *)(a11 + 1968) = v680;
      *(float64x2_t *)(a11 + 1952) = v679;
      v16[17] = v681;
      v16[18] = v682;
      *(float64x2_t *)((char *)v16 + 392) = v683;
      *(float64x2_t *)((char *)v16 + 408) = v684;
      v16[4] = v685;
      v16[5] = v686;
      *(float64x2_t *)(a11 + 2000) = v688;
      *(float64x2_t *)(a11 + 1984) = v687;
      v16[19] = v689;
      v16[20] = v690;
      *(float64x2_t *)((char *)v16 + 424) = v691;
      *(float64x2_t *)((char *)v16 + 440) = v692;
      v16[6] = _Q20;
      v16[7].f64[0] = v796;
      *(float64x2_t *)((char *)v16 + 216) = _Q19;
      v16[14].f64[1] = v795;
      v16[21] = _Q17;
      v16[22].f64[0] = v794;
      *(float64x2_t *)((char *)v16 + 456) = v759;
      v16[29].f64[1] = v793;
      v16[30] = _Q7;
      v16[31] = _Q3;
      *(float64x2_t *)(a11 + 2416) = v763;
      *(float64x2_t *)(a11 + 2400) = _Q2;
      v16[32] = v764;
      v16[33] = _Q18;
      *(float64x2_t *)(a11 + 2448) = _Q21;
      *(float64x2_t *)(a11 + 2432) = _Q0;
      v771 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v790, v777[98].f64[0]), *(float64x2_t *)((char *)&v814[12] + 8), v777[98], 1), v799, v777[99].f64[0]),
                                     *(float64x2_t *)((char *)&v814[27] + 8),
                                     v777[99],
                                     1),
                                   v788,
                                   v777[100].f64[0]),
                                 *(float64x2_t *)((char *)&v814[42] + 8),
                                 v777[100],
                                 1),
                               v798,
                               v777[101].f64[0]),
                             v827,
                             v777[101],
                             1),
                           v835,
                           v777[102].f64[0]),
                         v842,
                         v777[102],
                         1),
                       v797,
                       v777[103].f64[0]),
                     v857,
                     v777[103],
                     1),
                   v865,
                   v777[104].f64[0]),
                 v872,
                 v777[104],
                 1),
               v880,
               v777[105].f64[0]);
      _Q5 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v791, v777[105].f64[1]), *(float64x2_t *)((char *)&v814[11] + 8), *(float64x2_t *)((char *)&v777[105] + 8), 1), v789, v777[106].f64[1]),
                                    *(float64x2_t *)((char *)&v814[26] + 8),
                                    *(float64x2_t *)((char *)&v777[106] + 8),
                                    1),
                                  v787,
                                  v777[107].f64[1]),
                                v786,
                                *(float64x2_t *)((char *)&v777[107] + 8),
                                1),
                              v785,
                              v777[108].f64[1]),
                            v784,
                            *(float64x2_t *)((char *)&v777[108] + 8),
                            1),
                          v834,
                          v777[109].f64[1]),
                        v783,
                        *(float64x2_t *)((char *)&v777[109] + 8),
                        1),
                      v782,
                      v777[110].f64[1]),
                    v781,
                    *(float64x2_t *)((char *)&v777[110] + 8),
                    1),
                  v864,
                  v777[111].f64[1]),
                v780,
                *(float64x2_t *)((char *)&v777[111] + 8),
                1),
              v879,
              v777[112].f64[1]);
      _Q6 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v790, v777[105].f64[1]), *(float64x2_t *)((char *)&v814[12] + 8), *(float64x2_t *)((char *)&v777[105] + 8), 1), v799, v777[106].f64[1]),
                                    *(float64x2_t *)((char *)&v814[27] + 8),
                                    *(float64x2_t *)((char *)&v777[106] + 8),
                                    1),
                                  v788,
                                  v777[107].f64[1]),
                                *(float64x2_t *)((char *)&v814[42] + 8),
                                *(float64x2_t *)((char *)&v777[107] + 8),
                                1),
                              v798,
                              v777[108].f64[1]),
                            v827,
                            *(float64x2_t *)((char *)&v777[108] + 8),
                            1),
                          v835,
                          v777[109].f64[1]),
                        v842,
                        *(float64x2_t *)((char *)&v777[109] + 8),
                        1),
                      v797,
                      v777[110].f64[1]),
                    v857,
                    *(float64x2_t *)((char *)&v777[110] + 8),
                    1),
                  v865,
                  v777[111].f64[1]),
                v872,
                *(float64x2_t *)((char *)&v777[111] + 8),
                1),
              v880,
              v777[112].f64[1]);
      v16[34] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v791, v777[98].f64[0]), *(float64x2_t *)((char *)&v814[11] + 8), v777[98], 1), v789, v777[99].f64[0]),
                                        *(float64x2_t *)((char *)&v814[26] + 8),
                                        v777[99],
                                        1),
                                      v787,
                                      v777[100].f64[0]),
                                    v786,
                                    v777[100],
                                    1),
                                  v785,
                                  v777[101].f64[0]),
                                v784,
                                v777[101],
                                1),
                              v834,
                              v777[102].f64[0]),
                            v783,
                            v777[102],
                            1),
                          v782,
                          v777[103].f64[0]),
                        v781,
                        v777[103],
                        1),
                      v864,
                      v777[104].f64[0]),
                    v780,
                    v777[104],
                    1),
                  v879,
                  v777[105].f64[0]);
      v16[35] = v771;
      *(float64x2_t *)(a11 + 2480) = _Q6;
      *(float64x2_t *)(a11 + 2464) = _Q5;
      _Q3.f64[0] = v814[29].f64[1];
      _Q5.f64[1] = v777[99].f64[1];
      _Q6.f64[1] = v777[98].f64[1];
      _Q7.f64[1] = v777[107].f64[0];
      _Q20.f64[0] = v778;
      __asm
      {
        FMLA            D17, D20, V6.D[1]
        FMLA            D17, D3, V5.D[1]
      }
      _Q6.f64[1] = v812.f64[1];
      __asm
      {
        FMLA            D0, D20, V6.D[1]
        FMLA            D0, D3, V7.D[1]
      }
      _Q3.f64[0] = v814[44].f64[1];
      _Q18.f64[0] = v829;
      _Q20.f64[1] = v777[101].f64[1];
      _Q21.f64[1] = v777[100].f64[1];
      _V22.D[1] = v777[109].f64[0];
      __asm
      {
        FMLA            D17, D3, V21.D[1]
        FMLA            D17, D18, V20.D[1]
      }
      _Q20.f64[1] = v813.f64[1];
      __asm
      {
        FMLA            D0, D3, V20.D[1]
        FMLA            D0, D18, V22.D[1]
      }
      _Q3.f64[0] = v844;
      _Q18.f64[0] = v859;
      _Q20.f64[1] = v777[103].f64[1];
      _Q21.f64[1] = v777[102].f64[1];
      __asm
      {
        FMLA            D17, D3, V21.D[1]
        FMLA            D17, D18, V20.D[1]
      }
      _Q20.f64[1] = v811.f64[1];
      _Q2.f64[1] = v810.f64[1];
      __asm
      {
        FMLA            D0, D3, V20.D[1]
        FMLA            D0, D18, V2.D[1]
      }
      _Q3.f64[0] = v874;
      _Q6.f64[0] = v882;
      v775 = v881;
      _Q18.f64[0] = v777[105].f64[0];
      _Q19.f64[1] = v777[104].f64[1];
      _Q20.f64[0] = v777[112].f64[1];
      _Q21.f64[1] = v777[112].f64[0];
      __asm { FMLA            D17, D3, V19.D[1] }
      v776 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v779, v812.f64[0]), *(float64x2_t *)((char *)&v814[13] + 8), v812, 1), v814[21], v777[106].f64[1]), *(float64x2_t *)((char *)&v814[28] + 8),
                                   *(float64x2_t *)((char *)&v777[106] + 8),
                                   1),
                                 v814[36],
                                 v813.f64[0]),
                               *(float64x2_t *)((char *)&v814[43] + 8),
                               v813,
                               1),
                             v821,
                             v777[108].f64[1]),
                           v828,
                           *(float64x2_t *)((char *)&v777[108] + 8),
                           1),
                         v836,
                         v811.f64[0]),
                       v843,
                       v811,
                       1),
                     v851,
                     v810.f64[0]),
                   v858,
                   v810,
                   1),
                 v866,
                 v777[111].f64[1]),
               v873,
               *(float64x2_t *)((char *)&v777[111] + 8),
               1);
      v16[36] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v779, v777[98].f64[0]), *(float64x2_t *)((char *)&v814[13] + 8), v777[98], 1), v814[21], v777[99].f64[0]),
                                        *(float64x2_t *)((char *)&v814[28] + 8),
                                        v777[99],
                                        1),
                                      v814[36],
                                      v777[100].f64[0]),
                                    *(float64x2_t *)((char *)&v814[43] + 8),
                                    v777[100],
                                    1),
                                  v821,
                                  v777[101].f64[0]),
                                v828,
                                v777[101],
                                1),
                              v836,
                              v777[102].f64[0]),
                            v843,
                            v777[102],
                            1),
                          v851,
                          v777[103].f64[0]),
                        v858,
                        v777[103],
                        1),
                      v866,
                      v777[104].f64[0]),
                    v873,
                    v777[104],
                    1),
                  v881,
                  v777[105].f64[0]);
      v16[37].f64[0] = _Q17.f64[0] + _Q6.f64[0] * _Q18.f64[0];
      *(float64x2_t *)((char *)v16 + 696) = vmlaq_n_f64(v776, v775, _Q20.f64[0]);
      __asm { FMLA            D0, D3, V21.D[1] }
      v16[44].f64[1] = _Q0.f64[0] + _Q6.f64[0] * _Q20.f64[0];
      break;
    default:
      return result;
  }
  return result;
}

_BYTE *sub_20F580FCC(_BYTE *result, float64x2_t a2, float64x2_t a3, double a4, double a5, double a6, float64x2_t a7, float64x2_t a8, uint64_t a9, float64x2_t *a10, float64x2_t *a11, int a12)
{
  float64x2_t *v14;
  float64x2_t *v15;
  float64x2_t *v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v54;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v62;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v82;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v272;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v292;
  float64x2_t v294;
  float64x2_t v299;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v386;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v638;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v660;
  float64x2_t v662;
  float64x2_t v665;
  float64x2_t v667;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t *v676;
  float64x2_t *v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t *v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t *v686;
  float64x2_t v687;
  float64x2_t v689;
  float64x2_t v691;
  float64x2_t *v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v697;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v713;
  float64x2_t v714;
  float64x2_t v715;
  float64x2_t v716;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v727;
  float64x2_t v733;
  unint64_t i;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t *v747;
  float64x2_t v748;
  float64x2_t v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v810;
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814;
  float64x2_t v815;
  float64x2_t v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  float64x2_t v824;
  float64x2_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t v835;
  float64x2_t v836;
  float64x2_t v837;
  float64x2_t v838;
  float64x2_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  float64x2_t v851;
  float64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  float64x2_t v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  _QWORD *v862;
  float64x2_t v928;
  float64x2_t v930;
  float64x2_t v931;
  float64x2_t v934;
  float64x2_t v936;
  float64x2_t v938;
  float64x2_t v940;
  float64x2_t v941;
  float64x2_t v942;
  float64x2_t v943;
  float64x2_t v944;
  float64x2_t v945;
  float64x2_t v946;
  float64x2_t v1008;
  float64x2_t v1009;
  float64x2_t v1010;
  float64x2_t v1011;
  float64x2_t v1012;
  float64x2_t v1013;
  float64x2_t v1014;
  float64x2_t v1015;
  float64x2_t v1016;
  float64x2_t v1017;
  float64x2_t v1018;
  float64x2_t v1019;
  float64x2_t v1020;
  float64_t v1021;
  float64x2_t v1022;
  float64x2_t v1023;
  float64x2_t v1024;
  float64x2_t v1025;
  float64x2_t v1026;
  float64x2_t v1028;
  float64x2_t v1029;
  float64x2_t v1030;
  float64x2_t v1033;
  float64x2_t v1034;
  float64x2_t v1035;
  float64x2_t v1036;
  float64x2_t v1037;
  float64x2_t v1038;
  float64x2_t v1039;
  float64x2_t v1040;
  float64x2_t v1041;
  float64x2_t v1042;
  float64x2_t v1043;
  float64x2_t v1044;
  float64x2_t v1045;
  float64x2_t v1046;
  float64x2_t v1047;
  float64x2_t v1048;
  float64x2_t v1049;
  float64x2_t v1050;
  float64x2_t v1052;
  float64x2_t v1056[137];
  float64x2_t v1057;
  float64x2_t v1058;
  float64x2_t v1059;
  double v1060;
  double v1061;
  double v1062;
  float64x2_t v1063;
  double v1064;
  float64x2_t v1065;
  float64x2_t v1066;
  double v1067;
  double v1068;
  double v1069;
  double v1070;
  float64x2_t v1071;
  float64x2_t v1072;
  float64x2_t v1073;
  float64x2_t v1074;
  float64x2_t v1075;
  float64x2_t v1076;
  float64x2_t v1077;
  float64x2_t v1078;
  float64x2_t v1079;
  float64x2_t v1080;
  float64x2_t v1081;
  float64x2_t v1082;
  float64x2_t v1083;
  float64x2_t v1084;
  float64x2_t v1085;
  float64x2_t v1086;
  float64x2_t v1087;
  float64x2_t v1088;
  float64x2_t v1089;
  float64x2_t v1090;
  float64x2_t v1091;
  float64x2_t v1092;
  float64x2_t v1093;
  float64x2_t v1094;
  float64x2_t v1095;
  float64x2_t v1096;
  float64x2_t v1097;
  float64x2_t v1098;
  float64x2_t v1099;
  float64x2_t v1100;
  float64x2_t v1101;
  float64x2_t v1102;
  float64x2_t v1103;
  float64x2_t v1104;
  float64x2_t v1105;
  float64x2_t v1106;
  float64x2_t v1107;
  float64x2_t v1108;
  float64x2_t v1109;
  float64x2_t v1110;
  float64x2_t v1111;
  float64x2_t v1112;
  float64x2_t v1113;
  float64x2_t v1114;
  float64x2_t v1115;
  float64x2_t v1116;
  float64x2_t v1117;
  float64x2_t v1118;
  float64x2_t v1119;
  float64x2_t v1120;
  float64x2_t v1121;
  float64x2_t v1122;
  float64x2_t v1123;
  float64x2_t v1124;
  float64x2_t v1125;
  float64x2_t v1126;
  float64x2_t v1127;
  float64x2_t v1128;
  float64x2_t v1129;
  float64x2_t v1130;
  float64x2_t v1131;
  _BYTE v1132[1080];
  float64x2_t v1133;
  float64x2_t v1134;
  float64x2_t v1135;
  float64x2_t v1136;
  float64x2_t v1137;
  float64x2_t v1138;
  float64x2_t v1139;
  float64_t v1140;
  float64x2_t v1141;
  float64x2_t v1142;
  float64x2_t v1143;
  float64x2_t v1144;
  float64x2_t v1145;
  float64x2_t v1146;
  float64x2_t v1147;
  float64x2_t v1148;
  float64x2_t v1149;
  float64x2_t v1150;
  float64x2_t v1151;
  float64x2_t v1152;
  float64x2_t v1153;
  float64x2_t v1154;
  float64_t v1155;
  float64x2_t v1156;
  float64x2_t v1157;
  float64x2_t v1158;
  float64x2_t v1159;
  float64x2_t v1160;
  float64x2_t v1161;
  float64x2_t v1162;
  float64x2_t v1163;
  float64x2_t v1164;
  float64x2_t v1165;
  float64x2_t v1166;
  float64x2_t v1167;
  float64x2_t v1168;
  float64x2_t v1169;
  float64_t v1170;
  float64x2_t v1171;
  float64x2_t v1172;
  float64x2_t v1173;
  float64x2_t v1174;
  float64x2_t v1175;
  float64x2_t v1176;
  float64x2_t v1177;
  float64_t v1178;
  uint64_t v1179;
  float64_t *v1180;

  v1179 = *MEMORY[0x24BDAC8D0];
  v14 = a10 + 45;
  switch(a12)
  {
    case 0:
      v15 = a11 + 1;
      if ((float64x2_t *)&a10[112].f64[1] > &a11[1] && (float64x2_t *)&a11[113].f64[1] > v14)
      {
        MEMORY[0x24BDAC7A8](result);
        result = memcpy(v1056, v15, 0x708uLL);
        v15 = v1056;
      }
      MEMORY[0x24BDAC7A8](result);
      v16 = &v1056[-68];
      memcpy(&v1056[-68], v14, 0x438uLL);
      v17 = v15[1];
      v18 = *(float64x2_t *)((char *)v15 + 136);
      v19 = *(float64x2_t *)((char *)v15 + 120);
      v21 = v15[15];
      v20 = v15[16];
      v22 = *(float64x2_t *)((char *)v15 + 376);
      v23 = *(float64x2_t *)((char *)v15 + 360);
      v24 = v1056[-67];
      v25 = *(float64x2_t *)((char *)&v1056[-60] + 8);
      v26 = *(float64x2_t *)((char *)&v1056[-61] + 8);
      v27 = v1056[-53];
      v28 = *(float64x2_t *)((char *)&v1056[-45] + 8);
      v29 = *(float64x2_t *)((char *)&v1056[-46] + 8);
      _Q24 = v1056[-68];
      v31 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v16->f64[0]), v19, *v16, 1), v21, v24.f64[0]), v23, v24, 1);
      v32 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v16->f64[0]), v18, *v16, 1), v20, v24.f64[0]), v22, v24, 1);
      v33 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v26.f64[0]), v19, v26, 1), v21, v25.f64[0]), v23, v25, 1);
      v34 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v26.f64[0]), v18, v26, 1), v20, v25.f64[0]), v22, v25, 1);
      _Q20 = v27;
      v36 = v1056[-52];
      v37 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v27.f64[0]), v19, v27, 1), v21, v36.f64[0]), v23, v36, 1);
      v38 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v27.f64[0]), v18, v27, 1), v20, v36.f64[0]), v22, v36, 1);
      v39 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v29.f64[0]), v19, v29, 1), v21, v28.f64[0]), v23, v28, 1);
      v40 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v29.f64[0]), v18, v29, 1), v20, v28.f64[0]), v22, v28, 1);
      v42 = v15[30];
      v41 = v15[31];
      v44 = *(float64x2_t *)((char *)v15 + 600);
      v43 = *(float64x2_t *)((char *)v15 + 616);
      v46 = v15[45];
      v45 = v15[46];
      v48 = *(float64x2_t *)((char *)v15 + 840);
      v47 = *(float64x2_t *)((char *)v15 + 856);
      v49 = *(float64x2_t *)((char *)&v1056[-58] + 8);
      v50 = *(float64x2_t *)((char *)&v1056[-59] + 8);
      v51 = *(float64x2_t *)((char *)&v1056[-43] + 8);
      v52 = *(float64x2_t *)((char *)&v1056[-44] + 8);
      _Q1 = v1056[-67];
      v54 = v1056[-66];
      _Q2 = v54;
      v56 = v1056[-65];
      v57 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v31, v42, v54.f64[0]), v44, v54, 1), v46, v56.f64[0]), v48, v56, 1);
      v58 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v32, v41, v54.f64[0]), v43, v54, 1), v45, v56.f64[0]), v47, v56, 1);
      v59 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v33, v42, v50.f64[0]), v44, v50, 1), v46, v49.f64[0]), v48, v49, 1);
      v60 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v34, v41, v50.f64[0]), v43, v50, 1), v45, v49.f64[0]), v47, v49, 1);
      _Q4 = v1056[-52];
      v62 = v1056[-51];
      _Q3 = v62;
      v64 = v1056[-50];
      v65 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v37, v42, v62.f64[0]), v44, v62, 1), v46, v64.f64[0]), v48, v64, 1);
      v66 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v38, v41, v62.f64[0]), v43, v62, 1), v45, v64.f64[0]), v47, v64, 1);
      v67 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v39, v42, v52.f64[0]), v44, v52, 1), v46, v51.f64[0]), v48, v51, 1);
      v68 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v40, v41, v52.f64[0]), v43, v52, 1), v45, v51.f64[0]), v47, v51, 1);
      v70 = v15[60];
      v69 = v15[61];
      v72 = *(float64x2_t *)((char *)v15 + 1080);
      v71 = *(float64x2_t *)((char *)v15 + 1096);
      v73 = v15[76];
      v74 = v15[75];
      v75 = *(float64x2_t *)((char *)v15 + 1320);
      v76 = *(float64x2_t *)((char *)v15 + 1336);
      v77 = *(float64x2_t *)((char *)&v1056[-56] + 8);
      v78 = *(float64x2_t *)((char *)&v1056[-57] + 8);
      v79 = *(float64x2_t *)((char *)&v1056[-41] + 8);
      v80 = *(float64x2_t *)((char *)&v1056[-42] + 8);
      _Q5 = v1056[-65];
      v82 = v1056[-64];
      _Q7 = v82;
      v84 = v1056[-63];
      v85 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v57, v70, v82.f64[0]), v72, v82, 1), v74, v84.f64[0]), v75, v84, 1);
      v86 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v58, v69, v82.f64[0]), v71, v82, 1), v73, v84.f64[0]), v76, v84, 1);
      v87 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v59, v70, v78.f64[0]), v72, v78, 1), v74, v77.f64[0]), v75, v77, 1);
      v88 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v60, v69, v78.f64[0]), v71, v78, 1), v73, v77.f64[0]), v76, v77, 1);
      _Q18 = v1056[-50];
      v89 = v1056[-49];
      _Q6 = v89;
      v92 = v1056[-48];
      v93 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v65, v70, v89.f64[0]), v72, v89, 1), v74, v92.f64[0]), v75, v92, 1);
      v94 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v66, v69, v89.f64[0]), v71, v89, 1), v73, v92.f64[0]), v76, v92, 1);
      v95 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v67, v70, v80.f64[0]), v72, v80, 1), v74, v79.f64[0]), v75, v79, 1);
      v96 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v68, v69, v80.f64[0]), v71, v80, 1), v73, v79.f64[0]), v76, v79, 1);
      v97 = v15[91];
      v98 = v15[90];
      v100 = *(float64x2_t *)((char *)v15 + 1560);
      v99 = *(float64x2_t *)((char *)v15 + 1576);
      v101 = v15[106];
      v102 = v15[105];
      v69.f64[0] = v1056[-61].f64[0];
      v75.f64[0] = v1056[-54].f64[1];
      v103 = *(float64x2_t *)((char *)&v1056[-55] + 8);
      v89.f64[0] = v1056[-46].f64[0];
      v92.f64[0] = v1056[-39].f64[1];
      v104 = *(float64x2_t *)((char *)&v1056[-40] + 8);
      _Q17 = v1056[-63];
      v105 = v1056[-62];
      v107 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v85, v98, v105.f64[0]), v100, v105, 1), v102, v69.f64[0]);
      v108 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v86, v97, v105.f64[0]), v99, v105, 1), v101, v69.f64[0]);
      v109 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v87, v98, v103.f64[0]), v100, v103, 1), v102, v75.f64[0]);
      v110 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v88, v97, v103.f64[0]), v99, v103, 1), v101, v75.f64[0]);
      _Q16 = v1056[-48];
      v111 = v1056[-47];
      *v14 = v107;
      v14[1] = v108;
      *(float64x2_t *)((char *)v14 + 136) = v110;
      *(float64x2_t *)((char *)v14 + 120) = v109;
      a10[60] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v93, v98, v111.f64[0]), v100, v111, 1), v102, v89.f64[0]);
      a10[61] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v94, v97, v111.f64[0]), v99, v111, 1), v101, v89.f64[0]);
      *(float64x2_t *)((char *)v14 + 360) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v95, v98, v104.f64[0]), v100, v104, 1), v102, v92.f64[0]);
      *(float64x2_t *)((char *)v14 + 376) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v96, v97, v104.f64[0]), v99, v104, 1), v101, v92.f64[0]);
      v113 = v15[2];
      v114 = v15[3];
      v115 = *(float64x2_t *)((char *)v15 + 168);
      v116 = *(float64x2_t *)((char *)v15 + 152);
      v118 = v15[17];
      v117 = v15[18];
      v119 = *(float64x2_t *)((char *)v15 + 408);
      v120 = *(float64x2_t *)((char *)v15 + 392);
      v121 = v1056[-67];
      v122 = *(float64x2_t *)((char *)&v1056[-60] + 8);
      v123 = *(float64x2_t *)((char *)&v1056[-61] + 8);
      v125 = v1056[-53];
      v124 = v1056[-52];
      v126 = *(float64x2_t *)((char *)&v1056[-45] + 8);
      v127 = *(float64x2_t *)((char *)&v1056[-46] + 8);
      v128 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v113, v16->f64[0]), v116, *v16, 1), v118, v121.f64[0]), v120, v121, 1);
      v129 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v114, v16->f64[0]), v115, *v16, 1), v117, v121.f64[0]), v119, v121, 1);
      v130 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v113, v123.f64[0]), v116, v123, 1), v118, v122.f64[0]), v120, v122, 1);
      v131 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v114, v123.f64[0]), v115, v123, 1), v117, v122.f64[0]), v119, v122, 1);
      v132 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v113, v125.f64[0]), v116, v125, 1), v118, v124.f64[0]), v120, v124, 1);
      v133 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v114, v125.f64[0]), v115, v125, 1), v117, v124.f64[0]), v119, v124, 1);
      v134 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v113, v127.f64[0]), v116, v127, 1), v118, v126.f64[0]), v120, v126, 1);
      v135 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v114, v127.f64[0]), v115, v127, 1), v117, v126.f64[0]), v119, v126, 1);
      v137 = v15[32];
      v136 = v15[33];
      v139 = *(float64x2_t *)((char *)v15 + 632);
      v138 = *(float64x2_t *)((char *)v15 + 648);
      v141 = v15[47];
      v140 = v15[48];
      v143 = *(float64x2_t *)((char *)v15 + 872);
      v142 = *(float64x2_t *)((char *)v15 + 888);
      v145 = v1056[-66];
      v144 = v1056[-65];
      v146 = *(float64x2_t *)((char *)&v1056[-58] + 8);
      v147 = *(float64x2_t *)((char *)&v1056[-59] + 8);
      v148 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v128, v137, v145.f64[0]), v139, v145, 1), v141, v144.f64[0]), v143, v144, 1);
      v149 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v129, v136, v145.f64[0]), v138, v145, 1), v140, v144.f64[0]), v142, v144, 1);
      v150 = v1056[-51];
      v151 = v1056[-50];
      v152 = vmlaq_laneq_f64(vmlaq_n_f64(v130, v137, v147.f64[0]), v139, v147, 1);
      v153 = vmlaq_laneq_f64(vmlaq_n_f64(v131, v136, v147.f64[0]), v138, v147, 1);
      v154 = *(float64x2_t *)((char *)&v1056[-43] + 8);
      v155 = vmlaq_laneq_f64(vmlaq_n_f64(v152, v141, v146.f64[0]), v143, v146, 1);
      v156 = vmlaq_laneq_f64(vmlaq_n_f64(v153, v140, v146.f64[0]), v142, v146, 1);
      v157 = *(float64x2_t *)((char *)&v1056[-44] + 8);
      v158 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v132, v137, v150.f64[0]), v139, v150, 1), v141, v151.f64[0]), v143, v151, 1);
      v159 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v133, v136, v150.f64[0]), v138, v150, 1), v140, v151.f64[0]), v142, v151, 1);
      v160 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v134, v137, v157.f64[0]), v139, v157, 1), v141, v154.f64[0]), v143, v154, 1);
      v161 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v135, v136, v157.f64[0]), v138, v157, 1), v140, v154.f64[0]), v142, v154, 1);
      v163 = v15[62];
      v162 = v15[63];
      v165 = *(float64x2_t *)((char *)v15 + 1112);
      v164 = *(float64x2_t *)((char *)v15 + 1128);
      v166 = v15[78];
      v167 = v15[77];
      v169 = *(float64x2_t *)((char *)v15 + 1352);
      v168 = *(float64x2_t *)((char *)v15 + 1368);
      v171 = v1056[-64];
      v170 = v1056[-63];
      v172 = *(float64x2_t *)((char *)&v1056[-56] + 8);
      v173 = *(float64x2_t *)((char *)&v1056[-57] + 8);
      v174 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v148, v163, v171.f64[0]), v165, v171, 1), v167, v170.f64[0]), v169, v170, 1);
      v175 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v149, v162, v171.f64[0]), v164, v171, 1), v166, v170.f64[0]), v168, v170, 1);
      v176 = v1056[-49];
      v177 = v1056[-48];
      v178 = vmlaq_laneq_f64(vmlaq_n_f64(v155, v163, v173.f64[0]), v165, v173, 1);
      v179 = vmlaq_laneq_f64(vmlaq_n_f64(v156, v162, v173.f64[0]), v164, v173, 1);
      v180 = *(float64x2_t *)((char *)&v1056[-41] + 8);
      v181 = vmlaq_laneq_f64(vmlaq_n_f64(v178, v167, v172.f64[0]), v169, v172, 1);
      v182 = vmlaq_laneq_f64(vmlaq_n_f64(v179, v166, v172.f64[0]), v168, v172, 1);
      v183 = *(float64x2_t *)((char *)&v1056[-42] + 8);
      v184 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v158, v163, v176.f64[0]), v165, v176, 1), v167, v177.f64[0]), v169, v177, 1);
      v185 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v159, v162, v176.f64[0]), v164, v176, 1), v166, v177.f64[0]), v168, v177, 1);
      v186 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v160, v163, v183.f64[0]), v165, v183, 1), v167, v180.f64[0]), v169, v180, 1);
      v187 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v161, v162, v183.f64[0]), v164, v183, 1), v166, v180.f64[0]), v168, v180, 1);
      v188 = v15[93];
      v189 = v15[92];
      v191 = *(float64x2_t *)((char *)v15 + 1592);
      v190 = *(float64x2_t *)((char *)v15 + 1608);
      v192 = v15[108];
      v193 = v15[107];
      v168.f64[0] = v1056[-61].f64[0];
      v194 = v1056[-62];
      v176.f64[0] = v1056[-54].f64[1];
      v195 = *(float64x2_t *)((char *)&v1056[-55] + 8);
      v183.f64[0] = v1056[-46].f64[0];
      v196 = v1056[-47];
      v197 = vmlaq_laneq_f64(vmlaq_n_f64(v174, v189, v194.f64[0]), v191, v194, 1);
      v198 = vmlaq_laneq_f64(vmlaq_n_f64(v175, v188, v194.f64[0]), v190, v194, 1);
      v194.f64[0] = v1056[-39].f64[1];
      v199 = vmlaq_n_f64(v197, v193, v168.f64[0]);
      v200 = vmlaq_n_f64(v198, v192, v168.f64[0]);
      v201 = *(float64x2_t *)((char *)&v1056[-40] + 8);
      v14[2] = v199;
      v14[3] = v200;
      *(float64x2_t *)((char *)v14 + 168) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v182, v188, v195.f64[0]), v190, v195, 1), v192, v176.f64[0]);
      *(float64x2_t *)((char *)v14 + 152) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v181, v189, v195.f64[0]), v191, v195, 1), v193, v176.f64[0]);
      a10[62] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v184, v189, v196.f64[0]), v191, v196, 1), v193, v183.f64[0]);
      a10[63] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v185, v188, v196.f64[0]), v190, v196, 1), v192, v183.f64[0]);
      *(float64x2_t *)((char *)v14 + 392) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v186, v189, v201.f64[0]), v191, v201, 1), v193, v194.f64[0]);
      *(float64x2_t *)((char *)v14 + 408) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v187, v188, v201.f64[0]), v190, v201, 1), v192, v194.f64[0]);
      v202 = v15[4];
      v203 = v15[5];
      v204 = *(float64x2_t *)((char *)v15 + 200);
      v205 = *(float64x2_t *)((char *)v15 + 184);
      v207 = v15[19];
      v206 = v15[20];
      v208 = *(float64x2_t *)((char *)v15 + 440);
      v209 = *(float64x2_t *)((char *)v15 + 424);
      v210 = v1056[-67];
      v211 = *(float64x2_t *)((char *)&v1056[-60] + 8);
      v212 = *(float64x2_t *)((char *)&v1056[-61] + 8);
      v214 = v1056[-53];
      v213 = v1056[-52];
      v215 = *(float64x2_t *)((char *)&v1056[-45] + 8);
      v216 = *(float64x2_t *)((char *)&v1056[-46] + 8);
      v217 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v202, v16->f64[0]), v205, *v16, 1), v207, v210.f64[0]), v209, v210, 1);
      v218 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v203, v16->f64[0]), v204, *v16, 1), v206, v210.f64[0]), v208, v210, 1);
      v219 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v202, v212.f64[0]), v205, v212, 1), v207, v211.f64[0]), v209, v211, 1);
      v220 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v203, v212.f64[0]), v204, v212, 1), v206, v211.f64[0]), v208, v211, 1);
      v221 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v202, v214.f64[0]), v205, v214, 1), v207, v213.f64[0]), v209, v213, 1);
      v222 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v203, v214.f64[0]), v204, v214, 1), v206, v213.f64[0]), v208, v213, 1);
      v223 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v202, v216.f64[0]), v205, v216, 1), v207, v215.f64[0]), v209, v215, 1);
      v224 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v203, v216.f64[0]), v204, v216, 1), v206, v215.f64[0]), v208, v215, 1);
      v226 = v15[34];
      v225 = v15[35];
      result = (_BYTE *)&v15[41].f64[1];
      v228 = *(float64x2_t *)((char *)v15 + 664);
      v227 = *(float64x2_t *)((char *)v15 + 680);
      v230 = v15[49];
      v229 = v15[50];
      v232 = *(float64x2_t *)((char *)v15 + 904);
      v231 = *(float64x2_t *)((char *)v15 + 920);
      v234 = v1056[-66];
      v233 = v1056[-65];
      v235 = *(float64x2_t *)((char *)&v1056[-58] + 8);
      v236 = *(float64x2_t *)((char *)&v1056[-59] + 8);
      v237 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v217, v226, v234.f64[0]), v228, v234, 1), v230, v233.f64[0]), v232, v233, 1);
      v238 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v218, v225, v234.f64[0]), v227, v234, 1), v229, v233.f64[0]), v231, v233, 1);
      v239 = v1056[-51];
      v240 = v1056[-50];
      v241 = vmlaq_laneq_f64(vmlaq_n_f64(v219, v226, v236.f64[0]), v228, v236, 1);
      v242 = vmlaq_laneq_f64(vmlaq_n_f64(v220, v225, v236.f64[0]), v227, v236, 1);
      v243 = *(float64x2_t *)((char *)&v1056[-43] + 8);
      v244 = vmlaq_laneq_f64(vmlaq_n_f64(v241, v230, v235.f64[0]), v232, v235, 1);
      v245 = vmlaq_laneq_f64(vmlaq_n_f64(v242, v229, v235.f64[0]), v231, v235, 1);
      v246 = *(float64x2_t *)((char *)&v1056[-44] + 8);
      v247 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v221, v226, v239.f64[0]), v228, v239, 1), v230, v240.f64[0]), v232, v240, 1);
      v248 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v222, v225, v239.f64[0]), v227, v239, 1), v229, v240.f64[0]), v231, v240, 1);
      v249 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v223, v226, v246.f64[0]), v228, v246, 1), v230, v243.f64[0]), v232, v243, 1);
      v250 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v224, v225, v246.f64[0]), v227, v246, 1), v229, v243.f64[0]), v231, v243, 1);
      v251 = v15[65];
      v252 = v15[64];
      v254 = *(float64x2_t *)((char *)v15 + 1144);
      v253 = *(float64x2_t *)((char *)v15 + 1160);
      v255 = v15[80];
      v256 = v15[79];
      v258 = *(float64x2_t *)((char *)v15 + 1384);
      v257 = *(float64x2_t *)((char *)v15 + 1400);
      v260 = v1056[-64];
      v259 = v1056[-63];
      v261 = *(float64x2_t *)((char *)&v1056[-56] + 8);
      v262 = *(float64x2_t *)((char *)&v1056[-57] + 8);
      v263 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v237, v252, v260.f64[0]), v254, v260, 1), v256, v259.f64[0]), v258, v259, 1);
      v264 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v238, v251, v260.f64[0]), v253, v260, 1), v255, v259.f64[0]), v257, v259, 1);
      v265 = v1056[-49];
      v266 = v1056[-48];
      v267 = vmlaq_laneq_f64(vmlaq_n_f64(v244, v252, v262.f64[0]), v254, v262, 1);
      v268 = vmlaq_laneq_f64(vmlaq_n_f64(v245, v251, v262.f64[0]), v253, v262, 1);
      v269 = *(float64x2_t *)((char *)&v1056[-41] + 8);
      v270 = vmlaq_laneq_f64(vmlaq_n_f64(v267, v256, v261.f64[0]), v258, v261, 1);
      _Q22 = vmlaq_laneq_f64(vmlaq_n_f64(v268, v255, v261.f64[0]), v257, v261, 1);
      v272 = *(float64x2_t *)((char *)&v1056[-42] + 8);
      _Q23 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v247, v252, v265.f64[0]), v254, v265, 1), v256, v266.f64[0]), v258, v266, 1);
      v274 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v248, v251, v265.f64[0]), v253, v265, 1), v255, v266.f64[0]), v257, v266, 1);
      v275 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v249, v252, v272.f64[0]), v254, v272, 1), v256, v269.f64[0]), v258, v269, 1);
      _Q27 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v250, v251, v272.f64[0]), v253, v272, 1), v255, v269.f64[0]), v257, v269, 1);
      v277 = v15[95];
      v278 = v15[94];
      _Q31 = *(float64x2_t *)((char *)v15 + 1624);
      v279 = *(float64x2_t *)((char *)v15 + 1640);
      v281 = v15[110];
      v282 = v15[109];
      v257.f64[0] = v1056[-61].f64[0];
      v283 = v1056[-62];
      v265.f64[0] = v1056[-54].f64[1];
      v284 = *(float64x2_t *)((char *)&v1056[-55] + 8);
      v272.f64[0] = v1056[-46].f64[0];
      v285 = v1056[-47];
      v286 = vmlaq_laneq_f64(vmlaq_n_f64(v263, v278, v283.f64[0]), _Q31, v283, 1);
      v287 = vmlaq_laneq_f64(vmlaq_n_f64(v264, v277, v283.f64[0]), v279, v283, 1);
      v283.f64[0] = v1056[-39].f64[1];
      v288 = vmlaq_n_f64(v286, v282, v257.f64[0]);
      v289 = vmlaq_n_f64(v287, v281, v257.f64[0]);
      v290 = *(float64x2_t *)((char *)&v1056[-40] + 8);
      v14[4] = v288;
      v14[5] = v289;
      *(float64x2_t *)((char *)v14 + 200) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q22, v277, v284.f64[0]), v279, v284, 1), v281, v265.f64[0]);
      *(float64x2_t *)((char *)v14 + 184) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v270, v278, v284.f64[0]), _Q31, v284, 1), v282, v265.f64[0]);
      a10[65] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v274, v277, v285.f64[0]), v279, v285, 1), v281, v272.f64[0]);
      a10[64] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q23, v278, v285.f64[0]), _Q31, v285, 1), v282, v272.f64[0]);
      *(float64x2_t *)((char *)v14 + 424) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v275, v278, v290.f64[0]), _Q31, v290, 1), v282, v283.f64[0]);
      *(float64x2_t *)((char *)v14 + 440) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q27, v277, v290.f64[0]), v279, v290, 1), v281, v283.f64[0]);
      _Q26 = v15[6];
      _Q27.f64[0] = v15[14].f64[1];
      v292 = *(float64x2_t *)((char *)v15 + 216);
      _Q30 = v15[21];
      _Q31.f64[0] = v15[29].f64[1];
      v294 = *(float64x2_t *)((char *)v15 + 456);
      _Q19 = *(float64x2_t *)((char *)&v1056[-60] + 8);
      _Q21 = *(float64x2_t *)((char *)&v1056[-61] + 8);
      _Q9 = *(float64x2_t *)((char *)&v1056[-45] + 8);
      _Q10 = *(float64x2_t *)((char *)&v1056[-46] + 8);
      v299 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q24.f64[0]), v292, _Q24, 1), _Q30, _Q1.f64[0]), v294, _Q1, 1);
      __asm
      {
        FMLA            D23, D27, V24.D[1]
        FMLA            D23, D31, V1.D[1]
      }
      v304 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q21.f64[0]), v292, _Q21, 1), _Q30, _Q19.f64[0]), v294, _Q19, 1);
      __asm
      {
        FMLA            D22, D27, V21.D[1]
        FMLA            D22, D31, V19.D[1]
      }
      v305 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q20.f64[0]), v292, _Q20, 1), _Q30, _Q4.f64[0]), v294, _Q4, 1);
      __asm
      {
        FMLA            D21, D27, V20.D[1]
        FMLA            D21, D31, V4.D[1]
      }
      v306 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q10.f64[0]), v292, _Q10, 1), _Q30, _Q9.f64[0]), v294, _Q9, 1);
      __asm
      {
        FMLA            D20, D27, V10.D[1]
        FMLA            D20, D31, V9.D[1]
      }
      v307 = v15[36];
      *(_QWORD *)&v1131.f64[0] = &v15[43].f64[1];
      _Q26.f64[0] = v15[44].f64[1];
      v308 = *(float64x2_t *)((char *)v15 + 696);
      v309 = v15[51];
      *(_QWORD *)&v1130.f64[0] = &v15[58].f64[1];
      _Q30.f64[0] = v15[59].f64[1];
      v310 = *(float64x2_t *)((char *)v15 + 936);
      _Q8 = *(float64x2_t *)((char *)&v1056[-58] + 8);
      _Q9 = *(float64x2_t *)((char *)&v1056[-59] + 8);
      _Q10 = *(float64x2_t *)((char *)&v1056[-43] + 8);
      _Q11 = *(float64x2_t *)((char *)&v1056[-44] + 8);
      v315 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v299, v307, _Q2.f64[0]), v308, _Q2, 1), v309, _Q5.f64[0]), v310, _Q5, 1);
      __asm
      {
        FMLA            D23, D26, V2.D[1]
        FMLA            D23, D30, V5.D[1]
      }
      v316 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v304, v307, _Q9.f64[0]), v308, _Q9, 1), v309, _Q8.f64[0]), v310, _Q8, 1);
      __asm
      {
        FMLA            D22, D26, V9.D[1]
        FMLA            D22, D30, V8.D[1]
      }
      v317 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v305, v307, _Q3.f64[0]), v308, _Q3, 1), v309, _Q18.f64[0]), v310, _Q18, 1);
      __asm
      {
        FMLA            D21, D26, V3.D[1]
        FMLA            D21, D30, V18.D[1]
      }
      v318 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v306, v307, _Q11.f64[0]), v308, _Q11, 1), v309, _Q10.f64[0]), v310, _Q10, 1);
      __asm
      {
        FMLA            D20, D26, V11.D[1]
        FMLA            D20, D30, V10.D[1]
      }
      v319 = v15[66];
      *(_QWORD *)&v1129.f64[0] = &v15[73].f64[1];
      _Q5.f64[0] = v15[74].f64[1];
      v320 = *(float64x2_t *)((char *)v15 + 1176);
      v321 = v15[81];
      *(_QWORD *)&v1128.f64[0] = &v15[88].f64[1];
      _Q26.f64[0] = v15[89].f64[1];
      v322 = *(float64x2_t *)((char *)v15 + 1416);
      _Q28 = *(float64x2_t *)((char *)&v1056[-56] + 8);
      _Q29 = *(float64x2_t *)((char *)&v1056[-57] + 8);
      _Q30 = *(float64x2_t *)((char *)&v1056[-41] + 8);
      _Q31 = *(float64x2_t *)((char *)&v1056[-42] + 8);
      v327 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v315, v319, _Q7.f64[0]), v320, _Q7, 1), v321, _Q17.f64[0]), v322, _Q17, 1);
      __asm
      {
        FMLA            D23, D5, V7.D[1]
        FMLA            D23, D26, V17.D[1]
      }
      v328 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v316, v319, _Q29.f64[0]), v320, _Q29, 1), v321, _Q28.f64[0]), v322, _Q28, 1);
      __asm
      {
        FMLA            D22, D5, V29.D[1]
        FMLA            D22, D26, V28.D[1]
      }
      v329 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v317, v319, _Q6.f64[0]), v320, _Q6, 1), v321, _Q16.f64[0]), v322, _Q16, 1);
      __asm
      {
        FMLA            D21, D5, V6.D[1]
        FMLA            D21, D26, V16.D[1]
      }
      v330 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v318, v319, _Q31.f64[0]), v320, _Q31, 1), v321, _Q30.f64[0]), v322, _Q30, 1);
      __asm
      {
        FMLA            D20, D5, V31.D[1]
        FMLA            D20, D26, V30.D[1]
      }
      v331 = v15[96];
      *(_QWORD *)&v1127.f64[0] = &v15[103].f64[1];
      _Q5.f64[0] = v15[104].f64[1];
      v332 = *(float64x2_t *)((char *)v15 + 1656);
      _Q7.f64[0] = v15[112].f64[0];
      v333 = v15[111];
      _Q17.f64[0] = v1056[-61].f64[0];
      _Q18 = v1056[-62];
      _Q24.f64[0] = v1056[-54].f64[1];
      _Q25 = *(float64x2_t *)((char *)&v1056[-55] + 8);
      _Q26.f64[0] = v1056[-46].f64[0];
      _Q27 = v1056[-47];
      _Q28.f64[0] = v1056[-39].f64[1];
      _Q29 = *(float64x2_t *)((char *)&v1056[-40] + 8);
      __asm
      {
        FMLA            D23, D5, V18.D[1]
        FMLA            D22, D5, V25.D[1]
        FMLA            D21, D5, V27.D[1]
        FMLA            D20, D5, V29.D[1]
      }
      v14[7].f64[0] = _Q23.f64[0] + _Q7.f64[0] * _Q17.f64[0];
      v14[6] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v327, v331, _Q18.f64[0]), v332, _Q18, 1), v333, _Q17.f64[0]);
      v14[14].f64[1] = _Q22.f64[0] + _Q7.f64[0] * _Q24.f64[0];
      *(float64x2_t *)((char *)v14 + 216) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v328, v331, _Q25.f64[0]), v332, _Q25, 1), v333, _Q24.f64[0]);
      v14[22].f64[0] = _Q21.f64[0] + _Q7.f64[0] * _Q26.f64[0];
      v14[21] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v329, v331, _Q27.f64[0]), v332, _Q27, 1), v333, _Q26.f64[0]);
      v14[29].f64[1] = _Q20.f64[0] + _Q7.f64[0] * _Q28.f64[0];
      *(float64x2_t *)((char *)v14 + 456) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v330, v331, _Q29.f64[0]), v332, _Q29, 1), v333, _Q28.f64[0]);
      v339 = *v15;
      v338 = v15[1];
      v340 = *(float64x2_t *)((char *)v15 + 136);
      v341 = *(float64x2_t *)((char *)v15 + 120);
      v343 = v15[15];
      v342 = v15[16];
      v344 = *(float64x2_t *)((char *)v15 + 376);
      v345 = *(float64x2_t *)((char *)v15 + 360);
      v346 = v1056[-38];
      v347 = v1056[-37];
      v348 = v1056[-23];
      v349 = *(float64x2_t *)((char *)&v1056[-16] + 8);
      _Q22 = v346;
      v351 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v346.f64[0]), v341, v346, 1), v343, v347.f64[0]), v345, v347, 1);
      v352 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v338, v346.f64[0]), v340, v346, 1), v342, v347.f64[0]), v344, v347, 1);
      _Q20 = *(float64x2_t *)((char *)&v1056[-31] + 8);
      v354 = *(float64x2_t *)((char *)&v1056[-30] + 8);
      v355 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v1056[-31].f64[1]), v341, _Q20, 1), v343, v354.f64[0]), v345, v354, 1);
      v356 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v338, v1056[-31].f64[1]), v340, _Q20, 1), v342, v354.f64[0]), v344, v354, 1);
      v357 = vmlaq_laneq_f64(vmulq_n_f64(*v15, v348.f64[0]), v341, v348, 1);
      v358 = v1056[-22];
      v1126 = v348;
      v359 = vmlaq_laneq_f64(vmlaq_n_f64(v357, v343, v358.f64[0]), v345, v358, 1);
      v360 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v338, v348.f64[0]), v340, v348, 1), v342, v358.f64[0]), v344, v358, 1);
      v361 = vmlaq_laneq_f64(vmulq_n_f64(v339, v349.f64[0]), v341, v349, 1);
      v362 = *(float64x2_t *)((char *)&v1056[-15] + 8);
      v1125 = *(float64x2_t *)((char *)&v1056[-16] + 8);
      v363 = vmlaq_laneq_f64(vmlaq_n_f64(v361, v343, v362.f64[0]), v345, v362, 1);
      v364 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v338, v349.f64[0]), v340, v349, 1), v342, v362.f64[0]), v344, v362, 1);
      v366 = v15[30];
      v365 = v15[31];
      v368 = *(float64x2_t *)((char *)v15 + 600);
      v367 = *(float64x2_t *)((char *)v15 + 616);
      v370 = v15[45];
      v369 = v15[46];
      v372 = *(float64x2_t *)((char *)v15 + 840);
      v371 = *(float64x2_t *)((char *)v15 + 856);
      v373 = *(float64x2_t *)((char *)&v1056[-14] + 8);
      _Q19 = v1056[-37];
      v374 = v1056[-36];
      _Q7 = v374;
      v377 = v1056[-35];
      v378 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v351, v366, v374.f64[0]), v368, v374, 1), v370, v377.f64[0]), v372, v377, 1);
      v379 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v352, v365, v374.f64[0]), v367, v374, 1), v369, v377.f64[0]), v371, v377, 1);
      _Q16 = *(float64x2_t *)((char *)&v1056[-29] + 8);
      v381 = *(float64x2_t *)((char *)&v1056[-28] + 8);
      v382 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v355, v366, v1056[-29].f64[1]), v368, _Q16, 1), v370, v381.f64[0]), v372, v381, 1);
      v383 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v356, v365, v1056[-29].f64[1]), v367, _Q16, 1), v369, v381.f64[0]), v371, v381, 1);
      _Q23 = v1056[-22];
      v384 = v1056[-21];
      _Q17 = v384;
      v386 = v1056[-20];
      v388 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v359, v366, v384.f64[0]), v368, v384, 1), v370, v386.f64[0]), v372, v386, 1);
      v389 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v360, v365, v384.f64[0]), v367, v384, 1), v369, v386.f64[0]), v371, v386, 1);
      v390 = vmlaq_laneq_f64(vmlaq_n_f64(v363, v366, v373.f64[0]), v368, v373, 1);
      _Q18 = v373;
      v392 = *(float64x2_t *)((char *)&v1056[-13] + 8);
      v393 = vmlaq_laneq_f64(vmlaq_n_f64(v390, v370, v392.f64[0]), v372, v392, 1);
      v394 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v364, v365, v373.f64[0]), v367, v373, 1), v369, v392.f64[0]), v371, v392, 1);
      v395 = v15[60];
      v396 = v15[61];
      v397 = *(float64x2_t *)((char *)v15 + 1080);
      v398 = *(float64x2_t *)((char *)v15 + 1096);
      v399 = v15[76];
      v400 = v15[75];
      v402 = *(float64x2_t *)((char *)v15 + 1320);
      v401 = *(float64x2_t *)((char *)v15 + 1336);
      v403 = *(float64x2_t *)((char *)&v1056[-27] + 8);
      v404 = *(float64x2_t *)((char *)&v1056[-12] + 8);
      _Q26 = v1056[-35];
      v406 = v1056[-33];
      v1124 = v1056[-34];
      v407 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v378, v395, v1124.f64[0]), v397, v1124, 1), v400, v406.f64[0]), v402, v406, 1);
      v408 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v379, v396, v1124.f64[0]), v398, v1124, 1), v399, v406.f64[0]), v401, v406, 1);
      v409 = *(float64x2_t *)((char *)&v1056[-26] + 8);
      v1121 = *(float64x2_t *)((char *)&v1056[-27] + 8);
      v410 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v382, v395, v403.f64[0]), v397, v403, 1), v400, v409.f64[0]), v402, v409, 1);
      v411 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v383, v396, v403.f64[0]), v398, v403, 1), v399, v409.f64[0]), v401, v409, 1);
      _Q27 = v1056[-20];
      v412 = v1056[-19];
      v414 = vmlaq_laneq_f64(vmlaq_n_f64(v388, v395, v412.f64[0]), v397, v412, 1);
      v415 = vmlaq_laneq_f64(vmlaq_n_f64(v393, v395, v404.f64[0]), v397, v404, 1);
      v416 = v1056[-18];
      v1123 = v412;
      v417 = *(float64x2_t *)((char *)&v1056[-11] + 8);
      v1122 = *(float64x2_t *)((char *)&v1056[-12] + 8);
      v418 = vmlaq_laneq_f64(vmlaq_n_f64(v414, v400, v416.f64[0]), v402, v416, 1);
      v419 = vmlaq_laneq_f64(vmlaq_n_f64(v415, v400, v417.f64[0]), v402, v417, 1);
      v420 = vmlaq_n_f64(v389, v396, v412.f64[0]);
      v421 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v394, v396, v404.f64[0]), v398, v404, 1), v399, v417.f64[0]), v401, v417, 1);
      v422 = v15[90];
      v423 = *(float64x2_t *)((char *)v15 + 1560);
      v424 = *(float64x2_t *)((char *)v15 + 1576);
      v425 = *(float64x2_t *)((char *)&v1056[-25] + 8);
      v426 = vmlaq_laneq_f64(vmlaq_n_f64(v410, v422, v425.f64[0]), v423, v425, 1);
      v427 = v15[91];
      v428 = vmlaq_laneq_f64(vmlaq_n_f64(v411, v427, v425.f64[0]), v424, v425, 1);
      v429 = v15[105];
      v425.f64[0] = v1056[-24].f64[1];
      v430 = vmlaq_n_f64(v426, v429, v425.f64[0]);
      v431 = v15[106];
      v432 = vmlaq_n_f64(v428, v431, v425.f64[0]);
      _Q21 = *(float64x2_t *)((char *)&v1056[-11] + 8);
      v433 = *(float64x2_t *)((char *)&v1056[-10] + 8);
      v435 = vmlaq_laneq_f64(vmlaq_n_f64(v419, v422, v433.f64[0]), v423, v433, 1);
      v436 = vmlaq_laneq_f64(vmlaq_n_f64(v421, v427, v433.f64[0]), v424, v433, 1);
      v433.f64[0] = v1056[-9].f64[1];
      *(float64x2_t *)((char *)v14 + 600) = v430;
      *(float64x2_t *)((char *)v14 + 616) = v432;
      *(float64x2_t *)((char *)v14 + 840) = vmlaq_n_f64(v435, v429, v433.f64[0]);
      *(float64x2_t *)((char *)v14 + 856) = vmlaq_n_f64(v436, v431, v433.f64[0]);
      v437 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v420, v398, v412, 1), v399, v416.f64[0]), v401, v416, 1);
      v433.f64[0] = v1056[-31].f64[0];
      v416.f64[0] = v1056[-16].f64[0];
      _Q25 = v1056[-33];
      v438 = v1056[-32];
      v440 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v407, v422, v438.f64[0]), v423, v438, 1), v429, v433.f64[0]);
      v441 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v408, v427, v438.f64[0]), v424, v438, 1), v431, v433.f64[0]);
      _Q24 = v1056[-18];
      v442 = v1056[-17];
      v14[30] = v440;
      v14[31] = v441;
      a10[91] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v437, v427, v442.f64[0]), v424, v442, 1), v431, v416.f64[0]);
      a10[90] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v418, v422, v442.f64[0]), v423, v442, 1), v429, v416.f64[0]);
      v445 = v15[2];
      v444 = v15[3];
      v446 = *(float64x2_t *)((char *)v15 + 168);
      v447 = *(float64x2_t *)((char *)v15 + 152);
      v449 = v15[17];
      v448 = v15[18];
      v450 = *(float64x2_t *)((char *)v15 + 408);
      v451 = *(float64x2_t *)((char *)v15 + 392);
      v453 = v1056[-38];
      v452 = v1056[-37];
      v454 = *(float64x2_t *)((char *)&v1056[-31] + 8);
      v455 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v445, v453.f64[0]), v447, v453, 1), v449, v452.f64[0]), v451, v452, 1);
      v456 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v444, v453.f64[0]), v446, v453, 1), v448, v452.f64[0]), v450, v452, 1);
      v457 = *(float64x2_t *)((char *)&v1056[-30] + 8);
      v458 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v445, v454.f64[0]), v447, v454, 1), v449, v457.f64[0]), v451, v457, 1);
      v459 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v444, v454.f64[0]), v446, v454, 1), v448, v457.f64[0]), v450, v457, 1);
      v460 = v1056[-23];
      v461 = vmlaq_laneq_f64(vmulq_n_f64(v445, v460.f64[0]), v447, v460, 1);
      v462 = vmlaq_laneq_f64(vmulq_n_f64(v444, v460.f64[0]), v446, v460, 1);
      v463 = v1056[-22];
      v464 = vmlaq_laneq_f64(vmlaq_n_f64(v461, v449, v463.f64[0]), v451, v463, 1);
      v465 = vmlaq_laneq_f64(vmlaq_n_f64(v462, v448, v463.f64[0]), v450, v463, 1);
      v466 = *(float64x2_t *)((char *)&v1056[-16] + 8);
      v467 = vmlaq_laneq_f64(vmulq_n_f64(v445, v466.f64[0]), v447, v466, 1);
      v468 = *(float64x2_t *)((char *)&v1056[-15] + 8);
      v469 = vmlaq_laneq_f64(vmlaq_n_f64(v467, v449, v468.f64[0]), v451, v468, 1);
      v470 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v444, v466.f64[0]), v446, v466, 1), v448, v468.f64[0]), v450, v468, 1);
      v472 = v15[32];
      v471 = v15[33];
      v474 = *(float64x2_t *)((char *)v15 + 632);
      v473 = *(float64x2_t *)((char *)v15 + 648);
      v475 = v1056[-36];
      v476 = v1056[-35];
      v477 = vmlaq_laneq_f64(vmlaq_n_f64(v455, v472, v475.f64[0]), v474, v475, 1);
      v478 = vmlaq_laneq_f64(vmlaq_n_f64(v456, v471, v475.f64[0]), v473, v475, 1);
      v479 = v15[47];
      v480 = v15[48];
      v481 = *(float64x2_t *)((char *)v15 + 872);
      v482 = *(float64x2_t *)((char *)v15 + 888);
      v483 = vmlaq_laneq_f64(vmlaq_n_f64(v477, v479, v476.f64[0]), v481, v476, 1);
      v484 = vmlaq_laneq_f64(vmlaq_n_f64(v478, v480, v476.f64[0]), v482, v476, 1);
      v485 = *(float64x2_t *)((char *)&v1056[-29] + 8);
      v486 = vmlaq_laneq_f64(vmlaq_n_f64(v458, v472, v485.f64[0]), v474, v485, 1);
      v487 = vmlaq_laneq_f64(vmlaq_n_f64(v459, v471, v485.f64[0]), v473, v485, 1);
      v488 = *(float64x2_t *)((char *)&v1056[-28] + 8);
      v489 = vmlaq_laneq_f64(vmlaq_n_f64(v486, v479, v488.f64[0]), v481, v488, 1);
      v490 = vmlaq_laneq_f64(vmlaq_n_f64(v487, v480, v488.f64[0]), v482, v488, 1);
      v491 = v1056[-21];
      v492 = vmlaq_laneq_f64(vmlaq_n_f64(v464, v472, v491.f64[0]), v474, v491, 1);
      v493 = vmlaq_laneq_f64(vmlaq_n_f64(v465, v471, v491.f64[0]), v473, v491, 1);
      v494 = v1056[-20];
      v495 = vmlaq_laneq_f64(vmlaq_n_f64(v492, v479, v494.f64[0]), v481, v494, 1);
      v496 = vmlaq_laneq_f64(vmlaq_n_f64(v493, v480, v494.f64[0]), v482, v494, 1);
      v497 = *(float64x2_t *)((char *)&v1056[-14] + 8);
      v498 = vmlaq_laneq_f64(vmlaq_n_f64(v469, v472, v497.f64[0]), v474, v497, 1);
      v499 = *(float64x2_t *)((char *)&v1056[-13] + 8);
      v500 = vmlaq_laneq_f64(vmlaq_n_f64(v498, v479, v499.f64[0]), v481, v499, 1);
      v501 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v470, v471, v497.f64[0]), v473, v497, 1), v480, v499.f64[0]), v482, v499, 1);
      v503 = v15[62];
      v502 = v15[63];
      v505 = *(float64x2_t *)((char *)v15 + 1112);
      v504 = *(float64x2_t *)((char *)v15 + 1128);
      v506 = v1056[-34];
      v507 = vmlaq_laneq_f64(vmlaq_n_f64(v483, v503, v506.f64[0]), v505, v506, 1);
      v508 = vmlaq_laneq_f64(vmlaq_n_f64(v484, v502, v506.f64[0]), v504, v506, 1);
      v509 = *(float64x2_t *)((char *)&v1056[-27] + 8);
      v510 = vmlaq_laneq_f64(vmlaq_n_f64(v489, v503, v509.f64[0]), v505, v509, 1);
      v511 = vmlaq_laneq_f64(vmlaq_n_f64(v490, v502, v509.f64[0]), v504, v509, 1);
      v512 = v1056[-19];
      v513 = vmlaq_laneq_f64(vmlaq_n_f64(v495, v503, v512.f64[0]), v505, v512, 1);
      v514 = vmlaq_laneq_f64(vmlaq_n_f64(v496, v502, v512.f64[0]), v504, v512, 1);
      v515 = *(float64x2_t *)((char *)&v1056[-12] + 8);
      v516 = *(float64x2_t *)((char *)&v1056[-11] + 8);
      v517 = vmlaq_n_f64(v500, v503, v515.f64[0]);
      v518 = v15[78];
      v519 = vmlaq_laneq_f64(v517, v505, v515, 1);
      v520 = v15[77];
      v521 = vmlaq_laneq_f64(vmlaq_n_f64(v501, v502, v515.f64[0]), v504, v515, 1);
      v523 = *(float64x2_t *)((char *)v15 + 1352);
      v522 = *(float64x2_t *)((char *)v15 + 1368);
      v524 = v1056[-33];
      v525 = vmlaq_laneq_f64(vmlaq_n_f64(v507, v520, v524.f64[0]), v523, v524, 1);
      v526 = vmlaq_laneq_f64(vmlaq_n_f64(v508, v518, v524.f64[0]), v522, v524, 1);
      v527 = *(float64x2_t *)((char *)&v1056[-26] + 8);
      v528 = vmlaq_laneq_f64(vmlaq_n_f64(v510, v520, v527.f64[0]), v523, v527, 1);
      v529 = vmlaq_laneq_f64(vmlaq_n_f64(v511, v518, v527.f64[0]), v522, v527, 1);
      v530 = v1056[-18];
      v531 = vmlaq_laneq_f64(vmlaq_n_f64(v513, v520, v530.f64[0]), v523, v530, 1);
      v532 = vmlaq_laneq_f64(vmlaq_n_f64(v519, v520, v516.f64[0]), v523, v516, 1);
      v533 = vmlaq_laneq_f64(vmlaq_n_f64(v521, v518, v516.f64[0]), v522, v516, 1);
      v534 = v15[92];
      v535 = *(float64x2_t *)((char *)&v1056[-25] + 8);
      v536 = *(float64x2_t *)((char *)v15 + 1592);
      v537 = *(float64x2_t *)((char *)v15 + 1608);
      v538 = vmlaq_laneq_f64(vmlaq_n_f64(v528, v534, v535.f64[0]), v536, v535, 1);
      v539 = v15[93];
      v540 = vmlaq_laneq_f64(vmlaq_n_f64(v529, v539, v535.f64[0]), v537, v535, 1);
      v541 = v15[107];
      v482.f64[0] = v1056[-24].f64[1];
      v542 = vmlaq_n_f64(v538, v541, v482.f64[0]);
      v543 = v15[108];
      v544 = vmlaq_n_f64(v540, v543, v482.f64[0]);
      v545 = *(float64x2_t *)((char *)&v1056[-10] + 8);
      v546 = vmlaq_laneq_f64(vmlaq_n_f64(v532, v534, v545.f64[0]), v536, v545, 1);
      v547 = vmlaq_laneq_f64(vmlaq_n_f64(v533, v539, v545.f64[0]), v537, v545, 1);
      v545.f64[0] = v1056[-9].f64[1];
      *(float64x2_t *)((char *)v14 + 632) = v542;
      *(float64x2_t *)((char *)v14 + 648) = v544;
      *(float64x2_t *)((char *)v14 + 872) = vmlaq_n_f64(v546, v541, v545.f64[0]);
      *(float64x2_t *)((char *)v14 + 888) = vmlaq_n_f64(v547, v543, v545.f64[0]);
      v548 = vmlaq_laneq_f64(vmlaq_n_f64(v514, v518, v530.f64[0]), v522, v530, 1);
      v547.f64[0] = v1056[-31].f64[0];
      v549 = v1056[-32];
      v518.f64[0] = v1056[-16].f64[0];
      v550 = vmlaq_laneq_f64(vmlaq_n_f64(v525, v534, v549.f64[0]), v536, v549, 1);
      v551 = vmlaq_laneq_f64(vmlaq_n_f64(v526, v539, v549.f64[0]), v537, v549, 1);
      v552 = v1056[-17];
      v14[32] = vmlaq_n_f64(v550, v541, v547.f64[0]);
      v14[33] = vmlaq_n_f64(v551, v543, v547.f64[0]);
      a10[93] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v548, v539, v552.f64[0]), v537, v552, 1), v543, v518.f64[0]);
      a10[92] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v531, v534, v552.f64[0]), v536, v552, 1), v541, v518.f64[0]);
      v554 = v15[4];
      v553 = v15[5];
      v555 = *(float64x2_t *)((char *)v15 + 200);
      v556 = *(float64x2_t *)((char *)v15 + 184);
      v558 = v15[19];
      v557 = v15[20];
      v559 = *(float64x2_t *)((char *)v15 + 440);
      v560 = *(float64x2_t *)((char *)v15 + 424);
      v562 = v1056[-38];
      v561 = v1056[-37];
      v563 = *(float64x2_t *)((char *)&v1056[-31] + 8);
      v564 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v554, v562.f64[0]), v556, v562, 1), v558, v561.f64[0]), v560, v561, 1);
      v565 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v553, v562.f64[0]), v555, v562, 1), v557, v561.f64[0]), v559, v561, 1);
      v566 = *(float64x2_t *)((char *)&v1056[-30] + 8);
      v567 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v554, v563.f64[0]), v556, v563, 1), v558, v566.f64[0]), v560, v566, 1);
      v568 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v553, v563.f64[0]), v555, v563, 1), v557, v566.f64[0]), v559, v566, 1);
      v569 = v1056[-23];
      v570 = vmlaq_laneq_f64(vmulq_n_f64(v554, v569.f64[0]), v556, v569, 1);
      v571 = vmlaq_laneq_f64(vmulq_n_f64(v553, v569.f64[0]), v555, v569, 1);
      v572 = v1056[-22];
      v573 = vmlaq_laneq_f64(vmlaq_n_f64(v570, v558, v572.f64[0]), v560, v572, 1);
      v574 = vmlaq_laneq_f64(vmlaq_n_f64(v571, v557, v572.f64[0]), v559, v572, 1);
      v575 = *(float64x2_t *)((char *)&v1056[-16] + 8);
      v576 = vmlaq_laneq_f64(vmulq_n_f64(v554, v575.f64[0]), v556, v575, 1);
      v577 = *(float64x2_t *)((char *)&v1056[-15] + 8);
      v578 = vmlaq_laneq_f64(vmlaq_n_f64(v576, v558, v577.f64[0]), v560, v577, 1);
      v579 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v553, v575.f64[0]), v555, v575, 1), v557, v577.f64[0]), v559, v577, 1);
      v581 = v15[34];
      v580 = v15[35];
      v583 = *(float64x2_t *)((char *)v15 + 664);
      v582 = *(float64x2_t *)((char *)v15 + 680);
      v584 = v1056[-36];
      v585 = v1056[-35];
      v586 = vmlaq_laneq_f64(vmlaq_n_f64(v564, v581, v584.f64[0]), v583, v584, 1);
      v587 = vmlaq_laneq_f64(vmlaq_n_f64(v565, v580, v584.f64[0]), v582, v584, 1);
      v588 = v15[49];
      v589 = v15[50];
      v590 = *(float64x2_t *)((char *)v15 + 904);
      v591 = *(float64x2_t *)((char *)v15 + 920);
      v592 = vmlaq_laneq_f64(vmlaq_n_f64(v586, v588, v585.f64[0]), v590, v585, 1);
      v593 = vmlaq_laneq_f64(vmlaq_n_f64(v587, v589, v585.f64[0]), v591, v585, 1);
      v594 = *(float64x2_t *)((char *)&v1056[-29] + 8);
      v595 = vmlaq_laneq_f64(vmlaq_n_f64(v567, v581, v594.f64[0]), v583, v594, 1);
      v596 = vmlaq_laneq_f64(vmlaq_n_f64(v568, v580, v594.f64[0]), v582, v594, 1);
      v597 = *(float64x2_t *)((char *)&v1056[-28] + 8);
      v598 = vmlaq_laneq_f64(vmlaq_n_f64(v595, v588, v597.f64[0]), v590, v597, 1);
      v599 = vmlaq_laneq_f64(vmlaq_n_f64(v596, v589, v597.f64[0]), v591, v597, 1);
      v600 = v1056[-21];
      v601 = vmlaq_laneq_f64(vmlaq_n_f64(v573, v581, v600.f64[0]), v583, v600, 1);
      v602 = vmlaq_laneq_f64(vmlaq_n_f64(v574, v580, v600.f64[0]), v582, v600, 1);
      v603 = v1056[-20];
      v604 = vmlaq_laneq_f64(vmlaq_n_f64(v601, v588, v603.f64[0]), v590, v603, 1);
      v605 = vmlaq_laneq_f64(vmlaq_n_f64(v602, v589, v603.f64[0]), v591, v603, 1);
      v606 = *(float64x2_t *)((char *)&v1056[-14] + 8);
      v607 = vmlaq_laneq_f64(vmlaq_n_f64(v578, v581, v606.f64[0]), v583, v606, 1);
      v608 = *(float64x2_t *)((char *)&v1056[-13] + 8);
      v609 = vmlaq_laneq_f64(vmlaq_n_f64(v607, v588, v608.f64[0]), v590, v608, 1);
      v610 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v579, v580, v606.f64[0]), v582, v606, 1), v589, v608.f64[0]), v591, v608, 1);
      v611 = v15[65];
      v612 = v15[64];
      v614 = *(float64x2_t *)((char *)v15 + 1144);
      v613 = *(float64x2_t *)((char *)v15 + 1160);
      v615 = v1056[-34];
      v616 = vmlaq_laneq_f64(vmlaq_n_f64(v592, v612, v615.f64[0]), v614, v615, 1);
      v617 = vmlaq_laneq_f64(vmlaq_n_f64(v593, v611, v615.f64[0]), v613, v615, 1);
      v618 = *(float64x2_t *)((char *)&v1056[-27] + 8);
      v619 = vmlaq_laneq_f64(vmlaq_n_f64(v598, v612, v618.f64[0]), v614, v618, 1);
      v620 = vmlaq_laneq_f64(vmlaq_n_f64(v599, v611, v618.f64[0]), v613, v618, 1);
      v621 = v1056[-19];
      v622 = vmlaq_laneq_f64(vmlaq_n_f64(v604, v612, v621.f64[0]), v614, v621, 1);
      v623 = vmlaq_laneq_f64(vmlaq_n_f64(v605, v611, v621.f64[0]), v613, v621, 1);
      v624 = *(float64x2_t *)((char *)&v1056[-12] + 8);
      v625 = v15[80];
      v626 = vmlaq_laneq_f64(vmlaq_n_f64(v609, v612, v624.f64[0]), v614, v624, 1);
      v627 = v15[79];
      v628 = vmlaq_laneq_f64(vmlaq_n_f64(v610, v611, v624.f64[0]), v613, v624, 1);
      v630 = *(float64x2_t *)((char *)v15 + 1384);
      v629 = *(float64x2_t *)((char *)v15 + 1400);
      v631 = *(float64x2_t *)((char *)&v1056[-26] + 8);
      v632 = vmlaq_laneq_f64(vmlaq_n_f64(v619, v627, v631.f64[0]), v630, v631, 1);
      v633 = vmlaq_laneq_f64(vmlaq_n_f64(v620, v625, v631.f64[0]), v629, v631, 1);
      v634 = v15[94];
      v635 = *(float64x2_t *)((char *)&v1056[-25] + 8);
      _Q10 = *(float64x2_t *)((char *)v15 + 1624);
      _Q14 = *(float64x2_t *)((char *)v15 + 1640);
      v638 = vmlaq_laneq_f64(vmlaq_n_f64(v632, v634, v635.f64[0]), _Q10, v635, 1);
      _Q13 = v15[95];
      _Q12 = vmlaq_laneq_f64(vmlaq_n_f64(v633, _Q13, v635.f64[0]), _Q14, v635, 1);
      v641 = v15[109];
      v543.f64[0] = v1056[-24].f64[1];
      v642 = v15[110];
      *(float64x2_t *)((char *)v14 + 664) = vmlaq_n_f64(v638, v641, v543.f64[0]);
      *(float64x2_t *)((char *)v14 + 680) = vmlaq_n_f64(_Q12, v642, v543.f64[0]);
      v643 = v1056[-18];
      v644 = vmlaq_laneq_f64(vmlaq_n_f64(v622, v627, v643.f64[0]), v630, v643, 1);
      v645 = vmlaq_laneq_f64(vmlaq_n_f64(v623, v625, v643.f64[0]), v629, v643, 1);
      v646 = *(float64x2_t *)((char *)&v1056[-11] + 8);
      v647 = vmlaq_laneq_f64(vmlaq_n_f64(v626, v627, v646.f64[0]), v630, v646, 1);
      v648 = vmlaq_laneq_f64(vmlaq_n_f64(v628, v625, v646.f64[0]), v629, v646, 1);
      v649 = v1056[-17];
      v650 = vmlaq_laneq_f64(vmlaq_n_f64(v644, v634, v649.f64[0]), _Q10, v649, 1);
      v651 = vmlaq_laneq_f64(vmlaq_n_f64(v645, _Q13, v649.f64[0]), _Q14, v649, 1);
      v649.f64[0] = v1056[-16].f64[0];
      v652 = vmlaq_n_f64(v650, v641, v649.f64[0]);
      _Q30 = vmlaq_n_f64(v651, v642, v649.f64[0]);
      v654 = *(float64x2_t *)((char *)&v1056[-10] + 8);
      v655 = vmlaq_laneq_f64(vmlaq_n_f64(v647, v634, v654.f64[0]), _Q10, v654, 1);
      v656 = vmlaq_laneq_f64(vmlaq_n_f64(v648, _Q13, v654.f64[0]), _Q14, v654, 1);
      v654.f64[0] = v1056[-9].f64[1];
      a10[95] = _Q30;
      a10[94] = v652;
      *(float64x2_t *)((char *)v14 + 904) = vmlaq_n_f64(v655, v641, v654.f64[0]);
      *(float64x2_t *)((char *)v14 + 920) = vmlaq_n_f64(v656, v642, v654.f64[0]);
      v657 = v1056[-33];
      v658 = vmlaq_n_f64(v616, v627, v657.f64[0]);
      _Q4 = *(float64x2_t *)((char *)&v1056[-30] + 8);
      v660 = vmlaq_laneq_f64(v658, v630, v657, 1);
      _Q3 = *(float64x2_t *)((char *)&v1056[-15] + 8);
      v662 = vmlaq_n_f64(v617, v625, v657.f64[0]);
      _Q5 = *(float64x2_t *)((char *)&v1056[-28] + 8);
      _Q28 = vmlaq_laneq_f64(v662, v629, v657, 1);
      v629.f64[0] = v1056[-31].f64[0];
      v665 = v1056[-32];
      v14[34] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v660, v634, v665.f64[0]), _Q10, v665, 1), v641, v629.f64[0]);
      v14[35] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q28, _Q13, v665.f64[0]), _Q14, v665, 1), v642, v629.f64[0]);
      _Q6 = v15[6];
      _Q30.f64[0] = v15[14].f64[1];
      v667 = *(float64x2_t *)((char *)v15 + 216);
      _Q9 = v15[21];
      _Q10.f64[0] = v15[29].f64[1];
      v669 = *(float64x2_t *)((char *)v15 + 456);
      v670 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, _Q22.f64[0]), v667, _Q22, 1), _Q9, _Q19.f64[0]), v669, _Q19, 1);
      __asm
      {
        FMLA            D28, D30, V22.D[1]
        FMLA            D28, D10, V19.D[1]
      }
      v671 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, _Q20.f64[0]), v667, _Q20, 1), _Q9, _Q4.f64[0]), v669, _Q4, 1);
      __asm
      {
        FMLA            D22, D30, V20.D[1]
        FMLA            D22, D10, V4.D[1]
      }
      _Q4.f64[1] = v1126.f64[1];
      __asm { FMLA            D20, D30, V4.D[1] }
      _Q4 = *(float64x2_t *)((char *)&v1056[-13] + 8);
      v673 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, v1126.f64[0]), v667, v1126, 1), _Q9, _Q23.f64[0]), v669, _Q23, 1);
      __asm { FMLA            D20, D10, V23.D[1] }
      _Q12.f64[1] = v1125.f64[1];
      v674 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, v1125.f64[0]), v667, v1125, 1), _Q9, _Q3.f64[0]), v669, _Q3, 1);
      __asm
      {
        FMLA            D19, D30, V12.D[1]
        FMLA            D19, D10, V3.D[1]
      }
      v675 = v15[36];
      _Q6.f64[0] = v15[44].f64[1];
      v676 = *(float64x2_t **)&v1131.f64[0];
      _Q8 = v15[51];
      _Q9.f64[0] = v15[59].f64[1];
      v678 = *(float64x2_t **)&v1130.f64[0];
      v679 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v670, v675, _Q7.f64[0]), **(float64x2_t **)&v1131.f64[0], _Q7, 1), _Q8, _Q26.f64[0]), **(float64x2_t **)&v1130.f64[0], _Q26, 1);
      __asm
      {
        FMLA            D28, D6, V7.D[1]
        FMLA            D28, D9, V26.D[1]
        FMLA            D22, D6, V16.D[1]
        FMLA            D22, D9, V5.D[1]
      }
      v680 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v673, v675, _Q17.f64[0]), **(float64x2_t **)&v1131.f64[0], _Q17, 1), _Q8, _Q27.f64[0]), **(float64x2_t **)&v1130.f64[0], _Q27, 1);
      __asm
      {
        FMLA            D20, D6, V17.D[1]
        FMLA            D20, D9, V27.D[1]
      }
      v681 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v674, v675, _Q18.f64[0]), **(float64x2_t **)&v1131.f64[0], _Q18, 1), _Q8, _Q4.f64[0]), **(float64x2_t **)&v1130.f64[0], _Q4, 1);
      __asm
      {
        FMLA            D19, D6, V18.D[1]
        FMLA            D19, D9, V4.D[1]
      }
      v682 = v15[66];
      _Q7.f64[0] = v15[74].f64[1];
      v683 = *(float64x2_t **)&v1129.f64[0];
      v684 = **(float64x2_t **)&v1129.f64[0];
      v685 = v15[81];
      _Q17.f64[0] = v15[89].f64[1];
      v686 = *(float64x2_t **)&v1128.f64[0];
      v687 = **(float64x2_t **)&v1128.f64[0];
      _Q31 = *(float64x2_t *)((char *)&v1056[-26] + 8);
      _Q13.f64[1] = v1121.f64[1];
      v689 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v671, v675, _Q16.f64[0]), **(float64x2_t **)&v1131.f64[0], _Q16, 1), _Q8, _Q5.f64[0]), **(float64x2_t **)&v1130.f64[0], _Q5, 1), v682, v1121.f64[0]), **(float64x2_t **)&v1129.f64[0], v1121, 1), v685, _Q31.f64[0]), **(float64x2_t **)&v1128.f64[0],
               _Q31,
               1);
      _Q14.f64[1] = v1122.f64[1];
      _Q23 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v681, v682, v1122.f64[0]), **(float64x2_t **)&v1129.f64[0], v1122, 1), v685, _Q21.f64[0]), **(float64x2_t **)&v1128.f64[0], _Q21, 1);
      v691 = v15[96];
      _Q4.f64[0] = v15[104].f64[1];
      v692 = *(float64x2_t **)&v1127.f64[0];
      v693 = **(float64x2_t **)&v1127.f64[0];
      _Q8.f64[0] = v15[112].f64[0];
      v694 = v15[111];
      _Q10.f64[0] = v1056[-24].f64[1];
      _Q11 = *(float64x2_t *)((char *)&v1056[-25] + 8);
      *(float64x2_t *)((char *)v14 + 696) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v689, v691, _Q11.f64[0]), **(float64x2_t **)&v1127.f64[0], _Q11, 1), v694, _Q10.f64[0]);
      _Q29 = *(float64x2_t *)((char *)&v1056[-10] + 8);
      _Q12.f64[0] = v1056[-9].f64[1];
      *(float64x2_t *)((char *)v14 + 936) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q23, v691, _Q29.f64[0]), v693, _Q29, 1), v694, _Q12.f64[0]);
      _Q23.f64[1] = v1124.f64[1];
      v697 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v679, v682, v1124.f64[0]), v684, v1124, 1), v685, _Q25.f64[0]), v687, _Q25, 1);
      __asm
      {
        FMLA            D28, D7, V23.D[1]
        FMLA            D28, D17, V25.D[1]
        FMLA            D22, D7, V13.D[1]
      }
      _Q23.f64[0] = v1056[-31].f64[0];
      _Q25 = v1056[-32];
      _Q13 = v1056[-17];
      __asm { FMLA            D22, D17, V31.D[1] }
      _Q31.f64[1] = v1123.f64[1];
      __asm
      {
        FMLA            D20, D7, V31.D[1]
        FMLA            D20, D17, V24.D[1]
        FMLA            D19, D7, V14.D[1]
        FMLA            D19, D17, V21.D[1]
      }
      _Q6.f64[0] = v1056[-16].f64[0];
      __asm
      {
        FMLA            D28, D4, V25.D[1]
        FMLA            D22, D4, V11.D[1]
      }
      v700 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v680, v682, v1123.f64[0]), v684, v1123, 1), v685, _Q24.f64[0]), v687, _Q24, 1), v691, _Q13.f64[0]), v693, _Q13, 1), v694, _Q6.f64[0]);
      __asm
      {
        FMLA            D20, D4, V13.D[1]
        FMLA            D19, D4, V29.D[1]
      }
      v14[37].f64[0] = _Q28.f64[0] + _Q8.f64[0] * _Q23.f64[0];
      v14[36] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v697, v691, _Q25.f64[0]), v693, _Q25, 1), v694, _Q23.f64[0]);
      v14[44].f64[1] = _Q22.f64[0] + _Q8.f64[0] * _Q10.f64[0];
      v14[52].f64[0] = _Q20.f64[0] + _Q8.f64[0] * _Q6.f64[0];
      v14[51] = v700;
      v14[59].f64[1] = _Q19.f64[0] + _Q8.f64[0] * _Q12.f64[0];
      v701 = v1056[-7];
      v702 = v1056[-8];
      v703 = v1056[-5];
      v704 = v1056[-6];
      v705 = v1056[-3];
      v706 = v1056[-4];
      _Q4.f64[0] = v1056[-1].f64[0];
      v707 = v1056[-2];
      v708 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15[1], v702.f64[0]), *(float64x2_t *)((char *)v15 + 136), v702, 1), v15[16], v701.f64[0]),
                                     *(float64x2_t *)((char *)v15 + 376),
                                     v701,
                                     1),
                                   v15[31],
                                   v704.f64[0]),
                                 *(float64x2_t *)((char *)v15 + 616),
                                 v704,
                                 1),
                               v15[46],
                               v703.f64[0]),
                             *(float64x2_t *)((char *)v15 + 856),
                             v703,
                             1),
                           v15[61],
                           v706.f64[0]),
                         *(float64x2_t *)((char *)v15 + 1096),
                         v706,
                         1),
                       v15[76],
                       v705.f64[0]),
                     *(float64x2_t *)((char *)v15 + 1336),
                     v705,
                     1),
                   v15[91],
                   v707.f64[0]),
                 *(float64x2_t *)((char *)v15 + 1576),
                 v707,
                 1),
               v15[106],
               _Q4.f64[0]);
      v14[60] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v702.f64[0]), *(float64x2_t *)((char *)v15 + 120), v702, 1), v15[15], v701.f64[0]),
                                        *(float64x2_t *)((char *)v15 + 360),
                                        v701,
                                        1),
                                      v15[30],
                                      v704.f64[0]),
                                    *(float64x2_t *)((char *)v15 + 600),
                                    v704,
                                    1),
                                  v15[45],
                                  v703.f64[0]),
                                *(float64x2_t *)((char *)v15 + 840),
                                v703,
                                1),
                              v15[60],
                              v706.f64[0]),
                            *(float64x2_t *)((char *)v15 + 1080),
                            v706,
                            1),
                          v15[75],
                          v705.f64[0]),
                        *(float64x2_t *)((char *)v15 + 1320),
                        v705,
                        1),
                      v15[90],
                      v707.f64[0]),
                    *(float64x2_t *)((char *)v15 + 1560),
                    v707,
                    1),
                  v15[105],
                  _Q4.f64[0]);
      v14[61] = v708;
      v709 = v1056[-7];
      v710 = v1056[-8];
      v711 = v1056[-5];
      v712 = v1056[-6];
      v713 = v1056[-3];
      v714 = v1056[-4];
      _Q4.f64[0] = v1056[-1].f64[0];
      v715 = v1056[-2];
      v716 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15[3], v710.f64[0]), *(float64x2_t *)((char *)v15 + 168), v710, 1), v15[18], v709.f64[0]),
                                     *(float64x2_t *)((char *)v15 + 408),
                                     v709,
                                     1),
                                   v15[33],
                                   v712.f64[0]),
                                 *(float64x2_t *)((char *)v15 + 648),
                                 v712,
                                 1),
                               v15[48],
                               v711.f64[0]),
                             *(float64x2_t *)((char *)v15 + 888),
                             v711,
                             1),
                           v15[63],
                           v714.f64[0]),
                         *(float64x2_t *)((char *)v15 + 1128),
                         v714,
                         1),
                       v15[78],
                       v713.f64[0]),
                     *(float64x2_t *)((char *)v15 + 1368),
                     v713,
                     1),
                   v15[93],
                   v715.f64[0]),
                 *(float64x2_t *)((char *)v15 + 1608),
                 v715,
                 1),
               v15[108],
               _Q4.f64[0]);
      v14[62] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15[2], v710.f64[0]), *(float64x2_t *)((char *)v15 + 152), v710, 1), v15[17], v709.f64[0]),
                                        *(float64x2_t *)((char *)v15 + 392),
                                        v709,
                                        1),
                                      v15[32],
                                      v712.f64[0]),
                                    *(float64x2_t *)((char *)v15 + 632),
                                    v712,
                                    1),
                                  v15[47],
                                  v711.f64[0]),
                                *(float64x2_t *)((char *)v15 + 872),
                                v711,
                                1),
                              v15[62],
                              v714.f64[0]),
                            *(float64x2_t *)((char *)v15 + 1112),
                            v714,
                            1),
                          v15[77],
                          v713.f64[0]),
                        *(float64x2_t *)((char *)v15 + 1352),
                        v713,
                        1),
                      v15[92],
                      v715.f64[0]),
                    *(float64x2_t *)((char *)v15 + 1592),
                    v715,
                    1),
                  v15[107],
                  _Q4.f64[0]);
      v14[63] = v716;
      _Q26 = v1056[-7];
      v718 = v1056[-8];
      v719 = v1056[-5];
      v720 = v1056[-6];
      _Q20 = v1056[-3];
      v722 = v1056[-4];
      _Q4.f64[0] = v1056[-1].f64[0];
      v723 = v1056[-2];
      v724 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15[4], v718.f64[0]), *(float64x2_t *)((char *)v15 + 184), v718, 1), v15[19], _Q26.f64[0]),
                                     *(float64x2_t *)((char *)v15 + 424),
                                     _Q26,
                                     1),
                                   v15[34],
                                   v720.f64[0]),
                                 *(float64x2_t *)((char *)v15 + 664),
                                 v720,
                                 1),
                               v15[49],
                               v719.f64[0]),
                             *(float64x2_t *)((char *)v15 + 904),
                             v719,
                             1),
                           v15[64],
                           v722.f64[0]),
                         *(float64x2_t *)((char *)v15 + 1144),
                         v722,
                         1),
                       v15[79],
                       _Q20.f64[0]),
                     *(float64x2_t *)((char *)v15 + 1384),
                     _Q20,
                     1),
                   v15[94],
                   v723.f64[0]),
                 *(float64x2_t *)((char *)v15 + 1624),
                 v723,
                 1),
               v15[109],
               _Q4.f64[0]);
      v14[65] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15[5], v718.f64[0]), *(float64x2_t *)((char *)v15 + 200), v718, 1), v15[20], _Q26.f64[0]),
                                        *(float64x2_t *)((char *)v15 + 440),
                                        _Q26,
                                        1),
                                      v15[35],
                                      v720.f64[0]),
                                    *(float64x2_t *)((char *)v15 + 680),
                                    v720,
                                    1),
                                  v15[50],
                                  v719.f64[0]),
                                *(float64x2_t *)((char *)v15 + 920),
                                v719,
                                1),
                              v15[65],
                              v722.f64[0]),
                            *(float64x2_t *)((char *)v15 + 1160),
                            v722,
                            1),
                          v15[80],
                          _Q20.f64[0]),
                        *(float64x2_t *)((char *)v15 + 1400),
                        _Q20,
                        1),
                      v15[95],
                      v723.f64[0]),
                    *(float64x2_t *)((char *)v15 + 1640),
                    v723,
                    1),
                  v15[110],
                  _Q4.f64[0]);
      v14[64] = v724;
      _Q16.f64[0] = v15[14].f64[1];
      _Q20.f64[0] = v15[29].f64[1];
      _Q23.f64[0] = v15[44].f64[1];
      _Q26.f64[0] = v15[59].f64[1];
      _Q29.f64[0] = v15[74].f64[1];
      _Q8.f64[0] = v15[89].f64[1];
      _Q11.f64[0] = v15[104].f64[1];
      _Q14 = v1056[-7];
      _Q15 = v1056[-8];
      v727 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15[6], _Q15.f64[0]), *(float64x2_t *)((char *)v15 + 216), _Q15, 1), v15[21], _Q14.f64[0]), *(float64x2_t *)((char *)v15 + 456), _Q14, 1);
      _Q0 = v1056[-5];
      _Q17 = v1056[-3];
      v724.f64[0] = v1056[-1].f64[0];
      __asm { FMLA            D6, D16, V15.D[1] }
      _Q16 = v1056[-6];
      _Q18 = v1056[-4];
      _Q15 = v1056[-2];
      __asm
      {
        FMLA            D6, D20, V14.D[1]
        FMLA            D6, D23, V16.D[1]
        FMLA            D6, D26, V0.D[1]
        FMLA            D6, D29, V18.D[1]
        FMLA            D6, D8, V17.D[1]
      }
      v733 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v727, v15[36], _Q16.f64[0]), *v676, _Q16, 1), v15[51], _Q0.f64[0]), *v678, _Q0, 1), v15[66], _Q18.f64[0]), *v683, _Q18, 1),
                       v15[81],
                       _Q17.f64[0]),
                     *v686,
                     _Q17,
                     1),
                   v15[96],
                   _Q15.f64[0]),
                 *v692,
                 _Q15,
                 1),
               v15[111],
               v724.f64[0]);
      __asm { FMLA            D6, D11, V15.D[1] }
      v14[67].f64[0] = _Q6.f64[0] + v15[112].f64[0] * v724.f64[0];
      v14[66] = v733;
      break;
    case 1:
      for (i = 0; i != 1080; i += 120)
      {
        v735 = *(float64x2_t *)((char *)a10 + i + 752);
        v736 = *(float64x2_t *)((char *)a10 + i + 768);
        v737 = *(float64x2_t *)((char *)a10 + i + 784);
        v738 = *(float64x2_t *)((char *)a10 + i + 800);
        v739 = *(float64x2_t *)((char *)a10 + i + 816);
        a7.f64[0] = a10[52].f64[i / 8];
        a8.f64[0] = a11[8].f64[0];
        v740 = a11[3];
        v741 = a11[4];
        v742 = a11[5];
        v743 = a11[6];
        v744 = a11[7];
        v1131 = vmulq_f64(a7, a8);
        v1130 = vmulq_f64(v739, v744);
        v1129 = vmulq_f64(v738, v743);
        v1128 = vmulq_f64(v737, v742);
        v1127 = vmulq_f64(v736, v741);
        v1126 = vmulq_f64(v735, v740);
        v745 = *(float64x2_t *)((char *)a10 + i + 720);
        v746 = a11[1];
        v1125 = vmulq_f64(*(float64x2_t *)((char *)a10 + i + 736), a11[2]);
        v1124 = vmulq_f64(v745, v746);
        result = memcpy(v1132, v14, sizeof(v1132));
        v747 = (float64x2_t *)&v1132[i];
        v748 = v1125;
        *v747 = v1124;
        v747[1] = v748;
        v749 = v1127;
        v747[2] = v1126;
        v747[3] = v749;
        v750 = v1129;
        v747[4] = v1128;
        v747[5] = v750;
        v747[6] = v1130;
        v747[7].f64[0] = v1131.f64[0];
        v751 = *(float64x2_t *)&v1132[1024];
        v14[67].f64[0] = *(float64_t *)&v1132[1072];
        v14[66] = *(float64x2_t *)&v1132[1056];
        v14[65] = *(float64x2_t *)&v1132[1040];
        v752 = *(float64x2_t *)&v1132[992];
        v14[63] = *(float64x2_t *)&v1132[1008];
        v14[64] = v751;
        v753 = *(float64x2_t *)&v1132[960];
        v14[61] = *(float64x2_t *)&v1132[976];
        v14[62] = v752;
        v754 = *(float64x2_t *)&v1132[928];
        v14[59] = *(float64x2_t *)&v1132[944];
        v14[60] = v753;
        v755 = *(float64x2_t *)&v1132[896];
        v14[57] = *(float64x2_t *)&v1132[912];
        v14[58] = v754;
        v756 = *(float64x2_t *)&v1132[864];
        v14[55] = *(float64x2_t *)&v1132[880];
        v14[56] = v755;
        v757 = *(float64x2_t *)&v1132[832];
        v14[53] = *(float64x2_t *)&v1132[848];
        v14[54] = v756;
        v758 = *(float64x2_t *)&v1132[800];
        v14[51] = *(float64x2_t *)&v1132[816];
        v14[52] = v757;
        v759 = *(float64x2_t *)&v1132[768];
        v14[49] = *(float64x2_t *)&v1132[784];
        v14[50] = v758;
        v760 = *(float64x2_t *)&v1132[736];
        v14[47] = *(float64x2_t *)&v1132[752];
        v14[48] = v759;
        v761 = *(float64x2_t *)&v1132[704];
        v14[45] = *(float64x2_t *)&v1132[720];
        v14[46] = v760;
        v762 = *(float64x2_t *)&v1132[672];
        v14[43] = *(float64x2_t *)&v1132[688];
        v14[44] = v761;
        v763 = *(float64x2_t *)&v1132[640];
        v14[41] = *(float64x2_t *)&v1132[656];
        v14[42] = v762;
        v764 = *(float64x2_t *)&v1132[608];
        v14[39] = *(float64x2_t *)&v1132[624];
        v14[40] = v763;
        v765 = *(float64x2_t *)&v1132[576];
        v14[37] = *(float64x2_t *)&v1132[592];
        v14[38] = v764;
        v766 = *(float64x2_t *)&v1132[544];
        v14[35] = *(float64x2_t *)&v1132[560];
        v14[36] = v765;
        v767 = *(float64x2_t *)&v1132[512];
        v14[33] = *(float64x2_t *)&v1132[528];
        v14[34] = v766;
        v768 = *(float64x2_t *)&v1132[480];
        v14[31] = *(float64x2_t *)&v1132[496];
        v14[32] = v767;
        v769 = *(float64x2_t *)&v1132[448];
        v14[29] = *(float64x2_t *)&v1132[464];
        v14[30] = v768;
        v770 = *(float64x2_t *)&v1132[416];
        v14[27] = *(float64x2_t *)&v1132[432];
        v14[28] = v769;
        v771 = *(float64x2_t *)&v1132[384];
        v14[25] = *(float64x2_t *)&v1132[400];
        v14[26] = v770;
        v772 = *(float64x2_t *)&v1132[352];
        v14[23] = *(float64x2_t *)&v1132[368];
        v14[24] = v771;
        v773 = *(float64x2_t *)&v1132[320];
        v14[21] = *(float64x2_t *)&v1132[336];
        v14[22] = v772;
        v774 = *(float64x2_t *)&v1132[288];
        v14[19] = *(float64x2_t *)&v1132[304];
        v14[20] = v773;
        v775 = *(float64x2_t *)&v1132[256];
        v14[17] = *(float64x2_t *)&v1132[272];
        v14[18] = v774;
        v776 = *(float64x2_t *)&v1132[224];
        v14[15] = *(float64x2_t *)&v1132[240];
        v14[16] = v775;
        v777 = *(float64x2_t *)&v1132[192];
        v14[13] = *(float64x2_t *)&v1132[208];
        v14[14] = v776;
        v778 = *(float64x2_t *)&v1132[160];
        v14[11] = *(float64x2_t *)&v1132[176];
        v14[12] = v777;
        v779 = *(float64x2_t *)&v1132[128];
        v14[9] = *(float64x2_t *)&v1132[144];
        v14[10] = v778;
        v780 = *(float64x2_t *)&v1132[96];
        v14[7] = *(float64x2_t *)&v1132[112];
        v14[8] = v779;
        v781 = *(float64x2_t *)&v1132[64];
        v14[5] = *(float64x2_t *)&v1132[80];
        v14[6] = v780;
        v782 = *(float64x2_t *)&v1132[32];
        v14[3] = *(float64x2_t *)&v1132[48];
        v14[4] = v781;
        v783 = *(float64x2_t *)v1132;
        v14[1] = *(float64x2_t *)&v1132[16];
        v14[2] = v782;
        *v14 = v783;
      }
      break;
    case 2:
      a2.f64[0] = a11[1].f64[0];
      a3.f64[0] = a10[112].f64[0];
      v785 = a10[73];
      v784 = a10[74];
      v787 = a10[71];
      v786 = a10[72];
      v788 = a10[69];
      v789 = a10[70];
      v790 = a10[67];
      v791 = a10[68];
      v792 = a10[65];
      v793 = a10[66];
      v794 = a10[63];
      v795 = a10[64];
      v796 = a10[61];
      v797 = a10[62];
      v798 = a10[59];
      v799 = a10[60];
      v800 = a10[57];
      v801 = a10[58];
      v802 = a10[55];
      v803 = a10[56];
      v804 = a10[53];
      v805 = a10[54];
      v806 = a10[51];
      v807 = a10[52];
      v808 = a10[49];
      v809 = a10[50];
      v811 = a10[47];
      v810 = a10[48];
      v813 = *v14;
      v812 = a10[46];
      v1131 = vmulq_f64(a3, a2);
      v1130 = vmulq_n_f64(v813, a2.f64[0]);
      v1129 = vmulq_n_f64(v812, a2.f64[0]);
      v1128 = vmulq_n_f64(v811, a2.f64[0]);
      v1127 = vmulq_n_f64(v810, a2.f64[0]);
      v1126 = vmulq_n_f64(v808, a2.f64[0]);
      v1125 = vmulq_n_f64(v809, a2.f64[0]);
      v1124 = vmulq_n_f64(v806, a2.f64[0]);
      v1123 = vmulq_n_f64(v807, a2.f64[0]);
      v1122 = vmulq_n_f64(v804, a2.f64[0]);
      v1121 = vmulq_n_f64(v805, a2.f64[0]);
      v1120 = vmulq_n_f64(v802, a2.f64[0]);
      v1119 = vmulq_n_f64(v803, a2.f64[0]);
      v1118 = vmulq_n_f64(v800, a2.f64[0]);
      v1117 = vmulq_n_f64(v801, a2.f64[0]);
      v1116 = vmulq_n_f64(v798, a2.f64[0]);
      v1115 = vmulq_n_f64(v799, a2.f64[0]);
      v1114 = vmulq_n_f64(v796, a2.f64[0]);
      v1113 = vmulq_n_f64(v797, a2.f64[0]);
      v1112 = vmulq_n_f64(v794, a2.f64[0]);
      v1111 = vmulq_n_f64(v795, a2.f64[0]);
      v1110 = vmulq_n_f64(v792, a2.f64[0]);
      v1109 = vmulq_n_f64(v793, a2.f64[0]);
      v1108 = vmulq_n_f64(v790, a2.f64[0]);
      v1107 = vmulq_n_f64(v791, a2.f64[0]);
      v1106 = vmulq_n_f64(v788, a2.f64[0]);
      v1105 = vmulq_n_f64(v789, a2.f64[0]);
      v1104 = vmulq_n_f64(v787, a2.f64[0]);
      v1103 = vmulq_n_f64(v786, a2.f64[0]);
      v1102 = vmulq_n_f64(v785, a2.f64[0]);
      v1101 = vmulq_n_f64(v784, a2.f64[0]);
      v1100 = vmulq_n_f64(a10[75], a2.f64[0]);
      v1099 = vmulq_n_f64(a10[76], a2.f64[0]);
      v1098 = vmulq_n_f64(a10[77], a2.f64[0]);
      v1097 = vmulq_n_f64(a10[78], a2.f64[0]);
      v814 = a10[80];
      v1096 = vmulq_n_f64(a10[79], a2.f64[0]);
      v1095 = vmulq_n_f64(v814, a2.f64[0]);
      v815 = vmulq_n_f64(a10[81], a2.f64[0]);
      v816 = vmulq_n_f64(a10[82], a2.f64[0]);
      v817 = vmulq_n_f64(a10[83], a2.f64[0]);
      v818 = vmulq_n_f64(a10[84], a2.f64[0]);
      v819 = vmulq_n_f64(a10[85], a2.f64[0]);
      v820 = vmulq_n_f64(a10[86], a2.f64[0]);
      v821 = vmulq_n_f64(a10[87], a2.f64[0]);
      v822 = vmulq_n_f64(a10[88], a2.f64[0]);
      v823 = vmulq_n_f64(a10[89], a2.f64[0]);
      v824 = vmulq_n_f64(a10[90], a2.f64[0]);
      v825 = vmulq_n_f64(a10[91], a2.f64[0]);
      v826 = vmulq_n_f64(a10[92], a2.f64[0]);
      v827 = vmulq_n_f64(a10[93], a2.f64[0]);
      v828 = vmulq_n_f64(a10[94], a2.f64[0]);
      v829 = vmulq_n_f64(a10[95], a2.f64[0]);
      v830 = vmulq_n_f64(a10[96], a2.f64[0]);
      v831 = vmulq_n_f64(a10[97], a2.f64[0]);
      v832 = vmulq_n_f64(a10[98], a2.f64[0]);
      v833 = vmulq_n_f64(a10[99], a2.f64[0]);
      v834 = vmulq_n_f64(a10[100], a2.f64[0]);
      v835 = vmulq_n_f64(a10[101], a2.f64[0]);
      v836 = vmulq_n_f64(a10[102], a2.f64[0]);
      v837 = vmulq_n_f64(a10[103], a2.f64[0]);
      v838 = vmulq_n_f64(a10[104], a2.f64[0]);
      v839 = vmulq_n_f64(a10[105], a2.f64[0]);
      v840 = vmulq_n_f64(a10[106], a2.f64[0]);
      v841 = vmulq_n_f64(a10[107], a2.f64[0]);
      v842 = vmulq_n_f64(a10[108], a2.f64[0]);
      v843 = vmulq_n_f64(a10[109], a2.f64[0]);
      v844 = vmulq_n_f64(a10[110], a2.f64[0]);
      a10[111] = vmulq_n_f64(a10[111], a2.f64[0]);
      a10[110] = v844;
      a10[108] = v842;
      a10[109] = v843;
      a10[106] = v840;
      a10[107] = v841;
      a10[104] = v838;
      a10[105] = v839;
      a10[102] = v836;
      a10[103] = v837;
      a10[100] = v834;
      a10[101] = v835;
      a10[98] = v832;
      a10[99] = v833;
      a10[96] = v830;
      a10[97] = v831;
      a10[94] = v828;
      a10[95] = v829;
      a10[92] = v826;
      a10[93] = v827;
      a10[90] = v824;
      a10[91] = v825;
      a10[88] = v822;
      a10[89] = v823;
      a10[86] = v820;
      a10[87] = v821;
      a10[84] = v818;
      a10[85] = v819;
      a10[82] = v816;
      a10[83] = v817;
      a10[80] = v1095;
      a10[81] = v815;
      v845 = v1096;
      a10[78] = v1097;
      a10[79] = v845;
      v846 = v1098;
      a10[76] = v1099;
      a10[77] = v846;
      v847 = v1100;
      a10[74] = v1101;
      a10[75] = v847;
      v848 = v1102;
      a10[72] = v1103;
      a10[73] = v848;
      v849 = v1104;
      a10[70] = v1105;
      a10[71] = v849;
      v850 = v1106;
      a10[68] = v1107;
      a10[69] = v850;
      v851 = v1108;
      a10[66] = v1109;
      a10[67] = v851;
      v852 = v1110;
      a10[64] = v1111;
      a10[65] = v852;
      v853 = v1112;
      a10[62] = v1113;
      a10[63] = v853;
      v854 = v1114;
      a10[60] = v1115;
      a10[61] = v854;
      v855 = v1116;
      a10[58] = v1117;
      a10[59] = v855;
      v856 = v1118;
      a10[56] = v1119;
      a10[57] = v856;
      v857 = v1120;
      a10[54] = v1121;
      a10[55] = v857;
      v858 = v1122;
      a10[52] = v1123;
      a10[53] = v858;
      v859 = v1124;
      a10[50] = v1125;
      a10[51] = v859;
      v860 = v1126;
      a10[48] = v1127;
      a10[49] = v860;
      v861 = v1128;
      a10[46] = v1129;
      a10[47] = v861;
      *v14 = v1130;
      a10[112].f64[0] = v1131.f64[0];
      break;
    case 4:
      *(_QWORD *)&v1131.f64[0] = a10;
      v862 = (*(_QWORD *(**)(_BYTE *__return_ptr, float64x2_t *))(*(_QWORD *)&a11->f64[0] + 56))(v1132, a11);
      MEMORY[0x24BDAC7A8](v862);
      memcpy(&v1056[45], v14, 0x438uLL);
      _V17.D[1] = v1056[45].f64[1];
      _V16.D[1] = v1056[60].f64[1];
      _V15.D[1] = v1056[46].f64[1];
      _V14.D[1] = v1056[47].f64[1];
      _V6.D[1] = v1056[61].f64[1];
      _V3.D[1] = v1056[62].f64[1];
      _V4.D[1] = v1056[48].f64[1];
      _V7.D[1] = v1056[63].f64[1];
      _V5.D[1] = v1056[49].f64[1];
      _V1.D[1] = v1056[64].f64[1];
      _V2.D[1] = v1056[50].f64[1];
      _V0.D[1] = v1056[65].f64[1];
      v1124 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[45].f64[0]), *(float64x2_t *)&v1132[120], v1056[45], 1), *(float64x2_t *)&v1132[240], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[360],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[600],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[840],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[49].f64[0]),
                          v1133,
                          v1056[49],
                          1),
                        v1141,
                        v1056[50].f64[0]),
                      v1148,
                      v1056[50],
                      1),
                    v1156,
                    v1056[51].f64[0]),
                  v1163,
                  v1056[51],
                  1),
                v1171,
                v1056[52].f64[0]);
      v1122 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[45].f64[0]), *(float64x2_t *)&v1132[136], v1056[45], 1), *(float64x2_t *)&v1132[256], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[376],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[616],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[856],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[49].f64[0]),
                          v1134,
                          v1056[49],
                          1),
                        v1142,
                        v1056[50].f64[0]),
                      v1149,
                      v1056[50],
                      1),
                    v1157,
                    v1056[51].f64[0]),
                  v1164,
                  v1056[51],
                  1),
                v1172,
                v1056[52].f64[0]);
      v1123 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[52].f64[1]), *(float64x2_t *)&v1132[120], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[240], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[360],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[600],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[840],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[56].f64[1]),
                          v1133,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1141,
                        v1056[57].f64[1]),
                      v1148,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1156,
                    v1056[58].f64[1]),
                  v1163,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1171,
                v1056[59].f64[1]);
      v1121 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[52].f64[1]), *(float64x2_t *)&v1132[136], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[256], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[376],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[616],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[856],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[56].f64[1]),
                          v1134,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1142,
                        v1056[57].f64[1]),
                      v1149,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1157,
                    v1056[58].f64[1]),
                  v1164,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1172,
                v1056[59].f64[1]);
      v1120 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[60].f64[0]), *(float64x2_t *)&v1132[120], v1056[60], 1), *(float64x2_t *)&v1132[240], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[360],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[600],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[840],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[64].f64[0]),
                          v1133,
                          v1056[64],
                          1),
                        v1141,
                        v1056[65].f64[0]),
                      v1148,
                      v1056[65],
                      1),
                    v1156,
                    v1056[66].f64[0]),
                  v1163,
                  v1056[66],
                  1),
                v1171,
                v1056[67].f64[0]);
      v1119 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[60].f64[0]), *(float64x2_t *)&v1132[136], v1056[60], 1), *(float64x2_t *)&v1132[256], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[376],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[616],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[856],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[64].f64[0]),
                          v1134,
                          v1056[64],
                          1),
                        v1142,
                        v1056[65].f64[0]),
                      v1149,
                      v1056[65],
                      1),
                    v1157,
                    v1056[66].f64[0]),
                  v1164,
                  v1056[66],
                  1),
                v1172,
                v1056[67].f64[0]);
      v1116 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[67].f64[1]), *(float64x2_t *)&v1132[120], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[240], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[360],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[600],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[840],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[71].f64[1]),
                          v1133,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1141,
                        v1056[72].f64[1]),
                      v1148,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1156,
                    v1056[73].f64[1]),
                  v1163,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1171,
                v1056[74].f64[1]);
      v1115 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[67].f64[1]), *(float64x2_t *)&v1132[136], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[256], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[376],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[616],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[856],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[71].f64[1]),
                          v1134,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1142,
                        v1056[72].f64[1]),
                      v1149,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1157,
                    v1056[73].f64[1]),
                  v1164,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1172,
                v1056[74].f64[1]);
      v1104 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[45].f64[0]), *(float64x2_t *)&v1132[152], v1056[45], 1), *(float64x2_t *)&v1132[272], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[392],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[512],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[632],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[752],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[872],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[992],
                            v1056[49].f64[0]),
                          v1135,
                          v1056[49],
                          1),
                        v1143,
                        v1056[50].f64[0]),
                      v1150,
                      v1056[50],
                      1),
                    v1158,
                    v1056[51].f64[0]),
                  v1165,
                  v1056[51],
                  1),
                v1173,
                v1056[52].f64[0]);
      v1101 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[45].f64[0]), *(float64x2_t *)&v1132[168], v1056[45], 1), *(float64x2_t *)&v1132[288], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[408],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[528],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[648],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[768],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[888],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[1008],
                            v1056[49].f64[0]),
                          v1136,
                          v1056[49],
                          1),
                        v1144,
                        v1056[50].f64[0]),
                      v1151,
                      v1056[50],
                      1),
                    v1159,
                    v1056[51].f64[0]),
                  v1166,
                  v1056[51],
                  1),
                v1174,
                v1056[52].f64[0]);
      v1102 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[52].f64[1]), *(float64x2_t *)&v1132[152], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[272], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[392],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[512],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[632],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[752],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[872],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[992],
                            v1056[56].f64[1]),
                          v1135,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1143,
                        v1056[57].f64[1]),
                      v1150,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1158,
                    v1056[58].f64[1]),
                  v1165,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1173,
                v1056[59].f64[1]);
      v1099 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[52].f64[1]), *(float64x2_t *)&v1132[168], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[288], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[408],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[528],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[648],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[768],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[888],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[1008],
                            v1056[56].f64[1]),
                          v1136,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1144,
                        v1056[57].f64[1]),
                      v1151,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1159,
                    v1056[58].f64[1]),
                  v1166,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1174,
                v1056[59].f64[1]);
      v1095 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[60].f64[0]), *(float64x2_t *)&v1132[152], v1056[60], 1), *(float64x2_t *)&v1132[272], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[392],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[512],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[632],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[752],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[872],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[992],
                            v1056[64].f64[0]),
                          v1135,
                          v1056[64],
                          1),
                        v1143,
                        v1056[65].f64[0]),
                      v1150,
                      v1056[65],
                      1),
                    v1158,
                    v1056[66].f64[0]),
                  v1165,
                  v1056[66],
                  1),
                v1173,
                v1056[67].f64[0]);
      v1093 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[60].f64[0]), *(float64x2_t *)&v1132[168], v1056[60], 1), *(float64x2_t *)&v1132[288], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[408],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[528],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[648],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[768],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[888],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[1008],
                            v1056[64].f64[0]),
                          v1136,
                          v1056[64],
                          1),
                        v1144,
                        v1056[65].f64[0]),
                      v1151,
                      v1056[65],
                      1),
                    v1159,
                    v1056[66].f64[0]),
                  v1166,
                  v1056[66],
                  1),
                v1174,
                v1056[67].f64[0]);
      v1089 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[67].f64[1]), *(float64x2_t *)&v1132[168], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[288], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[408],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[528],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[648],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[768],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[888],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[1008],
                            v1056[71].f64[1]),
                          v1136,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1144,
                        v1056[72].f64[1]),
                      v1151,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1159,
                    v1056[73].f64[1]),
                  v1166,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1174,
                v1056[74].f64[1]);
      v1090 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[67].f64[1]), *(float64x2_t *)&v1132[152], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[272], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[392],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[512],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[632],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[752],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[872],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[992],
                            v1056[71].f64[1]),
                          v1135,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1143,
                        v1056[72].f64[1]),
                      v1150,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1158,
                    v1056[73].f64[1]),
                  v1165,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1173,
                v1056[74].f64[1]);
      v1105 = *(float64x2_t *)&v1132[304];
      result = &v1132[664];
      v1103 = *(float64x2_t *)&v1132[544];
      v1100 = *(float64x2_t *)&v1132[664];
      v1094 = *(float64x2_t *)&v1132[784];
      v1092 = *(float64x2_t *)&v1132[904];
      v1091 = v1137;
      v1088 = v1145;
      v1087 = v1152;
      v1086 = v1167;
      v1082 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[52].f64[1]), *(float64x2_t *)&v1132[184], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[304], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[424],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[544],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[664],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[784],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[904],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[1024],
                            v1056[56].f64[1]),
                          v1137,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1145,
                        v1056[57].f64[1]),
                      v1152,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1160,
                    v1056[58].f64[1]),
                  v1167,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1175,
                v1056[59].f64[1]);
      v1083 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[45].f64[0]), *(float64x2_t *)&v1132[184], v1056[45], 1), *(float64x2_t *)&v1132[304], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[424],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[544],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[664],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[784],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[904],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[1024],
                            v1056[49].f64[0]),
                          v1137,
                          v1056[49],
                          1),
                        v1145,
                        v1056[50].f64[0]),
                      v1152,
                      v1056[50],
                      1),
                    v1160,
                    v1056[51].f64[0]),
                  v1167,
                  v1056[51],
                  1),
                v1175,
                v1056[52].f64[0]);
      v1080 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[52].f64[1]), *(float64x2_t *)&v1132[200], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[320], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[440],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[560],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[680],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[800],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[920],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[1040],
                            v1056[56].f64[1]),
                          v1138,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1146,
                        v1056[57].f64[1]),
                      v1153,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1161,
                    v1056[58].f64[1]),
                  v1168,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1176,
                v1056[59].f64[1]);
      v1081 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[45].f64[0]), *(float64x2_t *)&v1132[200], v1056[45], 1), *(float64x2_t *)&v1132[320], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[440],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[560],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[680],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[800],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[920],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[1040],
                            v1056[49].f64[0]),
                          v1138,
                          v1056[49],
                          1),
                        v1146,
                        v1056[50].f64[0]),
                      v1153,
                      v1056[50],
                      1),
                    v1161,
                    v1056[51].f64[0]),
                  v1168,
                  v1056[51],
                  1),
                v1176,
                v1056[52].f64[0]);
      v1077 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[60].f64[0]), *(float64x2_t *)&v1132[200], v1056[60], 1), *(float64x2_t *)&v1132[320], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[440],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[560],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[680],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[800],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[920],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[1040],
                            v1056[64].f64[0]),
                          v1138,
                          v1056[64],
                          1),
                        v1146,
                        v1056[65].f64[0]),
                      v1153,
                      v1056[65],
                      1),
                    v1161,
                    v1056[66].f64[0]),
                  v1168,
                  v1056[66],
                  1),
                v1176,
                v1056[67].f64[0]);
      v1078 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[60].f64[0]), *(float64x2_t *)&v1132[184], v1056[60], 1), *(float64x2_t *)&v1132[304], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[424],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[544],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[664],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[784],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[904],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[1024],
                            v1056[64].f64[0]),
                          v1137,
                          v1056[64],
                          1),
                        v1145,
                        v1056[65].f64[0]),
                      v1152,
                      v1056[65],
                      1),
                    v1160,
                    v1056[66].f64[0]),
                  v1167,
                  v1056[66],
                  1),
                v1175,
                v1056[67].f64[0]);
      v1075 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[67].f64[1]), *(float64x2_t *)&v1132[200], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[320], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[440],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[560],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[680],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[800],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[920],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[1040],
                            v1056[71].f64[1]),
                          v1138,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1146,
                        v1056[72].f64[1]),
                      v1153,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1161,
                    v1056[73].f64[1]),
                  v1168,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1176,
                v1056[74].f64[1]);
      v1076 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[67].f64[1]), *(float64x2_t *)&v1132[184], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[304], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[424],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[544],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[664],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[784],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[904],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[1024],
                            v1056[71].f64[1]),
                          v1137,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1145,
                        v1056[72].f64[1]),
                      v1152,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1160,
                    v1056[73].f64[1]),
                  v1167,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1175,
                v1056[74].f64[1]);
      _D23 = *(_QWORD *)&v1132[232];
      __asm { FMLA            D18, D23, V17.D[1] }
      _V19.D[1] = v1056[53].f64[0];
      __asm
      {
        FMLA            D17, D23, V19.D[1]
        FMLA            D19, D23, V16.D[1]
      }
      _V24.D[1] = v1056[68].f64[0];
      __asm { FMLA            D16, D23, V24.D[1] }
      v1085 = *(float64x2_t *)&v1132[320];
      _D23 = *(_QWORD *)&v1132[472];
      __asm { FMLA            D18, D23, V15.D[1] }
      _V24.D[1] = v1056[54].f64[0];
      __asm
      {
        FMLA            D17, D23, V24.D[1]
        FMLA            D19, D23, V6.D[1]
      }
      _V6.D[1] = v1056[69].f64[0];
      __asm { FMLA            D16, D23, V6.D[1] }
      _D22 = *(_QWORD *)&v1132[712];
      __asm { FMLA            D18, D22, V14.D[1] }
      _V23.D[1] = v1056[55].f64[0];
      __asm
      {
        FMLA            D17, D22, V23.D[1]
        FMLA            D19, D22, V3.D[1]
      }
      _V3.D[1] = v1056[70].f64[0];
      __asm { FMLA            D16, D22, V3.D[1] }
      v1084 = *(float64x2_t *)&v1132[800];
      _D21 = *(_QWORD *)&v1132[952];
      __asm { FMLA            D18, D21, V4.D[1] }
      _V4.D[1] = v1056[56].f64[0];
      __asm
      {
        FMLA            D17, D21, V4.D[1]
        FMLA            D19, D21, V7.D[1]
      }
      _V4.D[1] = v1056[71].f64[0];
      __asm { FMLA            D16, D21, V4.D[1] }
      _D7 = v1140;
      __asm { FMLA            D18, D7, V5.D[1] }
      _V5.D[1] = v1056[57].f64[0];
      __asm
      {
        FMLA            D17, D7, V5.D[1]
        FMLA            D19, D7, V1.D[1]
      }
      _V1.D[1] = v1056[72].f64[0];
      __asm { FMLA            D16, D7, V1.D[1] }
      v1079 = v1146;
      _D5 = v1155;
      __asm { FMLA            D18, D5, V2.D[1] }
      _V2.D[1] = v1056[58].f64[0];
      __asm
      {
        FMLA            D17, D5, V2.D[1]
        FMLA            D19, D5, V0.D[1]
      }
      _V0.D[1] = v1056[73].f64[0];
      __asm { FMLA            D16, D5, V0.D[1] }
      _V1.D[1] = v1056[51].f64[1];
      _D4 = v1170;
      __asm { FMLA            D18, D4, V1.D[1] }
      _V1.D[1] = v1056[59].f64[0];
      __asm { FMLA            D17, D4, V1.D[1] }
      _V1.D[1] = v1056[66].f64[1];
      __asm { FMLA            D19, D4, V1.D[1] }
      _V1.D[1] = v1056[74].f64[0];
      __asm { FMLA            D16, D4, V1.D[1] }
      v1070 = _D18 + v1178 * v1056[52].f64[0];
      v1073 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[52].f64[1]), *(float64x2_t *)&v1132[216], *(float64x2_t *)((char *)&v1056[52] + 8), 1), *(float64x2_t *)&v1132[336], v1056[53].f64[1]),
                                      *(float64x2_t *)&v1132[456],
                                      *(float64x2_t *)((char *)&v1056[53] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[54].f64[1]),
                                  *(float64x2_t *)&v1132[696],
                                  *(float64x2_t *)((char *)&v1056[54] + 8),
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[55].f64[1]),
                              *(float64x2_t *)&v1132[936],
                              *(float64x2_t *)((char *)&v1056[55] + 8),
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[56].f64[1]),
                          v1139,
                          *(float64x2_t *)((char *)&v1056[56] + 8),
                          1),
                        v1147,
                        v1056[57].f64[1]),
                      v1154,
                      *(float64x2_t *)((char *)&v1056[57] + 8),
                      1),
                    v1162,
                    v1056[58].f64[1]),
                  v1169,
                  *(float64x2_t *)((char *)&v1056[58] + 8),
                  1),
                v1177,
                v1056[59].f64[1]);
      v1074 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[45].f64[0]), *(float64x2_t *)&v1132[216], v1056[45], 1), *(float64x2_t *)&v1132[336], v1056[46].f64[0]),
                                      *(float64x2_t *)&v1132[456],
                                      v1056[46],
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[47].f64[0]),
                                  *(float64x2_t *)&v1132[696],
                                  v1056[47],
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[48].f64[0]),
                              *(float64x2_t *)&v1132[936],
                              v1056[48],
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[49].f64[0]),
                          v1139,
                          v1056[49],
                          1),
                        v1147,
                        v1056[50].f64[0]),
                      v1154,
                      v1056[50],
                      1),
                    v1162,
                    v1056[51].f64[0]),
                  v1169,
                  v1056[51],
                  1),
                v1177,
                v1056[52].f64[0]);
      v1069 = _D17 + v1178 * v1056[59].f64[1];
      v1072 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[60].f64[0]), *(float64x2_t *)&v1132[216], v1056[60], 1), *(float64x2_t *)&v1132[336], v1056[61].f64[0]),
                                      *(float64x2_t *)&v1132[456],
                                      v1056[61],
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[62].f64[0]),
                                  *(float64x2_t *)&v1132[696],
                                  v1056[62],
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[63].f64[0]),
                              *(float64x2_t *)&v1132[936],
                              v1056[63],
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[64].f64[0]),
                          v1139,
                          v1056[64],
                          1),
                        v1147,
                        v1056[65].f64[0]),
                      v1154,
                      v1056[65],
                      1),
                    v1162,
                    v1056[66].f64[0]),
                  v1169,
                  v1056[66],
                  1),
                v1177,
                v1056[67].f64[0]);
      v1068 = _D19 + v1178 * v1056[67].f64[0];
      v1066 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[67].f64[1]), *(float64x2_t *)&v1132[216], *(float64x2_t *)((char *)&v1056[67] + 8), 1), *(float64x2_t *)&v1132[336], v1056[68].f64[1]),
                                      *(float64x2_t *)&v1132[456],
                                      *(float64x2_t *)((char *)&v1056[68] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[69].f64[1]),
                                  *(float64x2_t *)&v1132[696],
                                  *(float64x2_t *)((char *)&v1056[69] + 8),
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[70].f64[1]),
                              *(float64x2_t *)&v1132[936],
                              *(float64x2_t *)((char *)&v1056[70] + 8),
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[71].f64[1]),
                          v1139,
                          *(float64x2_t *)((char *)&v1056[71] + 8),
                          1),
                        v1147,
                        v1056[72].f64[1]),
                      v1154,
                      *(float64x2_t *)((char *)&v1056[72] + 8),
                      1),
                    v1162,
                    v1056[73].f64[1]),
                  v1169,
                  *(float64x2_t *)((char *)&v1056[73] + 8),
                  1),
                v1177,
                v1056[74].f64[1]);
      v1067 = _D16 + v1178 * v1056[74].f64[1];
      _V18.D[1] = v1056[75].f64[1];
      _V20.D[1] = v1056[83].f64[0];
      v1071 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[75].f64[0]), *(float64x2_t *)&v1132[120], v1056[75], 1), *(float64x2_t *)&v1132[240], v1056[76].f64[0]),
                                      *(float64x2_t *)&v1132[360],
                                      v1056[76],
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[77].f64[0]),
                                  *(float64x2_t *)&v1132[600],
                                  v1056[77],
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[78].f64[0]),
                              *(float64x2_t *)&v1132[840],
                              v1056[78],
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[79].f64[0]),
                          v1133,
                          v1056[79],
                          1),
                        v1141,
                        v1056[80].f64[0]),
                      v1148,
                      v1056[80],
                      1),
                    v1156,
                    v1056[81].f64[0]),
                  v1163,
                  v1056[81],
                  1),
                v1171,
                v1056[82].f64[0]);
      v1063 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[75].f64[0]), *(float64x2_t *)&v1132[136], v1056[75], 1), *(float64x2_t *)&v1132[256], v1056[76].f64[0]),
                                      *(float64x2_t *)&v1132[376],
                                      v1056[76],
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[77].f64[0]),
                                  *(float64x2_t *)&v1132[616],
                                  v1056[77],
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[78].f64[0]),
                              *(float64x2_t *)&v1132[856],
                              v1056[78],
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[79].f64[0]),
                          v1134,
                          v1056[79],
                          1),
                        v1142,
                        v1056[80].f64[0]),
                      v1149,
                      v1056[80],
                      1),
                    v1157,
                    v1056[81].f64[0]),
                  v1164,
                  v1056[81],
                  1),
                v1172,
                v1056[82].f64[0]);
      v928 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[82].f64[1]), *(float64x2_t *)&v1132[136], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[256], v1056[83].f64[1]),
                                     *(float64x2_t *)&v1132[376],
                                     *(float64x2_t *)((char *)&v1056[83] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[496],
                                   v1056[84].f64[1]),
                                 *(float64x2_t *)&v1132[616],
                                 *(float64x2_t *)((char *)&v1056[84] + 8),
                                 1),
                               *(float64x2_t *)&v1132[736],
                               v1056[85].f64[1]),
                             *(float64x2_t *)&v1132[856],
                             *(float64x2_t *)((char *)&v1056[85] + 8),
                             1),
                           *(float64x2_t *)&v1132[976],
                           v1056[86].f64[1]),
                         v1134,
                         *(float64x2_t *)((char *)&v1056[86] + 8),
                         1),
                       v1142,
                       v1056[87].f64[1]),
                     v1149,
                     *(float64x2_t *)((char *)&v1056[87] + 8),
                     1),
                   v1157,
                   v1056[88].f64[1]),
                 v1164,
                 *(float64x2_t *)((char *)&v1056[88] + 8),
                 1),
               v1172,
               v1056[89].f64[1]);
      v1059 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[90].f64[0]), *(float64x2_t *)&v1132[120], v1056[90], 1), *(float64x2_t *)&v1132[240], v1056[91].f64[0]),
                                      *(float64x2_t *)&v1132[360],
                                      v1056[91],
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[92].f64[0]),
                                  *(float64x2_t *)&v1132[600],
                                  v1056[92],
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[93].f64[0]),
                              *(float64x2_t *)&v1132[840],
                              v1056[93],
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[94].f64[0]),
                          v1133,
                          v1056[94],
                          1),
                        v1141,
                        v1056[95].f64[0]),
                      v1148,
                      v1056[95],
                      1),
                    v1156,
                    v1056[96].f64[0]),
                  v1163,
                  v1056[96],
                  1),
                v1171,
                v1056[97].f64[0]);
      v1057 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[82].f64[1]), *(float64x2_t *)&v1132[120], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[240], v1056[83].f64[1]),
                                      *(float64x2_t *)&v1132[360],
                                      *(float64x2_t *)((char *)&v1056[83] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[84].f64[1]),
                                  *(float64x2_t *)&v1132[600],
                                  *(float64x2_t *)((char *)&v1056[84] + 8),
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[85].f64[1]),
                              *(float64x2_t *)&v1132[840],
                              *(float64x2_t *)((char *)&v1056[85] + 8),
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[86].f64[1]),
                          v1133,
                          *(float64x2_t *)((char *)&v1056[86] + 8),
                          1),
                        v1141,
                        v1056[87].f64[1]),
                      v1148,
                      *(float64x2_t *)((char *)&v1056[87] + 8),
                      1),
                    v1156,
                    v1056[88].f64[1]),
                  v1163,
                  *(float64x2_t *)((char *)&v1056[88] + 8),
                  1),
                v1171,
                v1056[89].f64[1]);
      v1058 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[90].f64[0]), *(float64x2_t *)&v1132[136], v1056[90], 1), *(float64x2_t *)&v1132[256], v1056[91].f64[0]),
                                      *(float64x2_t *)&v1132[376],
                                      v1056[91],
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[92].f64[0]),
                                  *(float64x2_t *)&v1132[616],
                                  v1056[92],
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[93].f64[0]),
                              *(float64x2_t *)&v1132[856],
                              v1056[93],
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[94].f64[0]),
                          v1134,
                          v1056[94],
                          1),
                        v1142,
                        v1056[95].f64[0]),
                      v1149,
                      v1056[95],
                      1),
                    v1157,
                    v1056[96].f64[0]),
                  v1164,
                  v1056[96],
                  1),
                v1172,
                v1056[97].f64[0]);
      _Q14 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[97].f64[1]), *(float64x2_t *)&v1132[120], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[240], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[360],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[480],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[600],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[720],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[840],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[960],
                           v1056[101].f64[1]),
                         v1133,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1141,
                       v1056[102].f64[1]),
                     v1148,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1156,
                   v1056[103].f64[1]),
                 v1163,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1171,
               v1056[104].f64[1]);
      v930 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[97].f64[1]), *(float64x2_t *)&v1132[136], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[256], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[376],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[496],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[616],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[736],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[856],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[976],
                           v1056[101].f64[1]),
                         v1134,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1142,
                       v1056[102].f64[1]),
                     v1149,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1157,
                   v1056[103].f64[1]),
                 v1164,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1172,
               v1056[104].f64[1]);
      v931 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[75].f64[0]), *(float64x2_t *)&v1132[152], v1056[75], 1), *(float64x2_t *)&v1132[272], v1056[76].f64[0]),
                                     *(float64x2_t *)&v1132[392],
                                     v1056[76],
                                     1),
                                   *(float64x2_t *)&v1132[512],
                                   v1056[77].f64[0]),
                                 *(float64x2_t *)&v1132[632],
                                 v1056[77],
                                 1),
                               *(float64x2_t *)&v1132[752],
                               v1056[78].f64[0]),
                             *(float64x2_t *)&v1132[872],
                             v1056[78],
                             1),
                           *(float64x2_t *)&v1132[992],
                           v1056[79].f64[0]),
                         v1135,
                         v1056[79],
                         1),
                       v1143,
                       v1056[80].f64[0]),
                     v1150,
                     v1056[80],
                     1),
                   v1158,
                   v1056[81].f64[0]),
                 v1165,
                 v1056[81],
                 1),
               v1173,
               v1056[82].f64[0]);
      _Q11 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[75].f64[0]), *(float64x2_t *)&v1132[168], v1056[75], 1), *(float64x2_t *)&v1132[288], v1056[76].f64[0]),
                                     *(float64x2_t *)&v1132[408],
                                     v1056[76],
                                     1),
                                   *(float64x2_t *)&v1132[528],
                                   v1056[77].f64[0]),
                                 *(float64x2_t *)&v1132[648],
                                 v1056[77],
                                 1),
                               *(float64x2_t *)&v1132[768],
                               v1056[78].f64[0]),
                             *(float64x2_t *)&v1132[888],
                             v1056[78],
                             1),
                           *(float64x2_t *)&v1132[1008],
                           v1056[79].f64[0]),
                         v1136,
                         v1056[79],
                         1),
                       v1144,
                       v1056[80].f64[0]),
                     v1151,
                     v1056[80],
                     1),
                   v1159,
                   v1056[81].f64[0]),
                 v1166,
                 v1056[81],
                 1),
               v1174,
               v1056[82].f64[0]);
      _Q8 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[82].f64[1]), *(float64x2_t *)&v1132[152], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[272], v1056[83].f64[1]),
                                    *(float64x2_t *)&v1132[392],
                                    *(float64x2_t *)((char *)&v1056[83] + 8),
                                    1),
                                  *(float64x2_t *)&v1132[512],
                                  v1056[84].f64[1]),
                                *(float64x2_t *)&v1132[632],
                                *(float64x2_t *)((char *)&v1056[84] + 8),
                                1),
                              *(float64x2_t *)&v1132[752],
                              v1056[85].f64[1]),
                            *(float64x2_t *)&v1132[872],
                            *(float64x2_t *)((char *)&v1056[85] + 8),
                            1),
                          *(float64x2_t *)&v1132[992],
                          v1056[86].f64[1]),
                        v1135,
                        *(float64x2_t *)((char *)&v1056[86] + 8),
                        1),
                      v1143,
                      v1056[87].f64[1]),
                    v1150,
                    *(float64x2_t *)((char *)&v1056[87] + 8),
                    1),
                  v1158,
                  v1056[88].f64[1]),
                v1165,
                *(float64x2_t *)((char *)&v1056[88] + 8),
                1),
              v1173,
              v1056[89].f64[1]);
      v934 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[82].f64[1]), *(float64x2_t *)&v1132[168], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[288], v1056[83].f64[1]),
                                     *(float64x2_t *)&v1132[408],
                                     *(float64x2_t *)((char *)&v1056[83] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[528],
                                   v1056[84].f64[1]),
                                 *(float64x2_t *)&v1132[648],
                                 *(float64x2_t *)((char *)&v1056[84] + 8),
                                 1),
                               *(float64x2_t *)&v1132[768],
                               v1056[85].f64[1]),
                             *(float64x2_t *)&v1132[888],
                             *(float64x2_t *)((char *)&v1056[85] + 8),
                             1),
                           *(float64x2_t *)&v1132[1008],
                           v1056[86].f64[1]),
                         v1136,
                         *(float64x2_t *)((char *)&v1056[86] + 8),
                         1),
                       v1144,
                       v1056[87].f64[1]),
                     v1151,
                     *(float64x2_t *)((char *)&v1056[87] + 8),
                     1),
                   v1159,
                   v1056[88].f64[1]),
                 v1166,
                 *(float64x2_t *)((char *)&v1056[88] + 8),
                 1),
               v1174,
               v1056[89].f64[1]);
      _Q10 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[90].f64[0]), *(float64x2_t *)&v1132[152], v1056[90], 1), *(float64x2_t *)&v1132[272], v1056[91].f64[0]),
                                     *(float64x2_t *)&v1132[392],
                                     v1056[91],
                                     1),
                                   *(float64x2_t *)&v1132[512],
                                   v1056[92].f64[0]),
                                 *(float64x2_t *)&v1132[632],
                                 v1056[92],
                                 1),
                               *(float64x2_t *)&v1132[752],
                               v1056[93].f64[0]),
                             *(float64x2_t *)&v1132[872],
                             v1056[93],
                             1),
                           *(float64x2_t *)&v1132[992],
                           v1056[94].f64[0]),
                         v1135,
                         v1056[94],
                         1),
                       v1143,
                       v1056[95].f64[0]),
                     v1150,
                     v1056[95],
                     1),
                   v1158,
                   v1056[96].f64[0]),
                 v1165,
                 v1056[96],
                 1),
               v1173,
               v1056[97].f64[0]);
      v936 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[90].f64[0]), *(float64x2_t *)&v1132[168], v1056[90], 1), *(float64x2_t *)&v1132[288], v1056[91].f64[0]),
                                     *(float64x2_t *)&v1132[408],
                                     v1056[91],
                                     1),
                                   *(float64x2_t *)&v1132[528],
                                   v1056[92].f64[0]),
                                 *(float64x2_t *)&v1132[648],
                                 v1056[92],
                                 1),
                               *(float64x2_t *)&v1132[768],
                               v1056[93].f64[0]),
                             *(float64x2_t *)&v1132[888],
                             v1056[93],
                             1),
                           *(float64x2_t *)&v1132[1008],
                           v1056[94].f64[0]),
                         v1136,
                         v1056[94],
                         1),
                       v1144,
                       v1056[95].f64[0]),
                     v1151,
                     v1056[95],
                     1),
                   v1159,
                   v1056[96].f64[0]),
                 v1166,
                 v1056[96],
                 1),
               v1174,
               v1056[97].f64[0]);
      _Q30 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[97].f64[1]), *(float64x2_t *)&v1132[152], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[272], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[392],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[512],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[632],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[752],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[872],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[992],
                           v1056[101].f64[1]),
                         v1135,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1143,
                       v1056[102].f64[1]),
                     v1150,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1158,
                   v1056[103].f64[1]),
                 v1165,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1173,
               v1056[104].f64[1]);
      v938 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[97].f64[1]), *(float64x2_t *)&v1132[168], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[288], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[408],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[528],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[648],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[768],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[888],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[1008],
                           v1056[101].f64[1]),
                         v1136,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1144,
                       v1056[102].f64[1]),
                     v1151,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1159,
                   v1056[103].f64[1]),
                 v1166,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1174,
               v1056[104].f64[1]);
      v1065 = *(float64x2_t *)&v1132[560];
      v1180 = &v1056[84].f64[1];
      _Q28 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[75].f64[0]), *(float64x2_t *)&v1132[184], v1056[75], 1), *(float64x2_t *)&v1132[304], v1056[76].f64[0]),
                                     *(float64x2_t *)&v1132[424],
                                     v1056[76],
                                     1),
                                   *(float64x2_t *)&v1132[544],
                                   v1056[77].f64[0]),
                                 *(float64x2_t *)&v1132[664],
                                 v1056[77],
                                 1),
                               *(float64x2_t *)&v1132[784],
                               v1056[78].f64[0]),
                             *(float64x2_t *)&v1132[904],
                             v1056[78],
                             1),
                           *(float64x2_t *)&v1132[1024],
                           v1056[79].f64[0]),
                         v1137,
                         v1056[79],
                         1),
                       v1145,
                       v1056[80].f64[0]),
                     v1152,
                     v1056[80],
                     1),
                   v1160,
                   v1056[81].f64[0]),
                 v1167,
                 v1056[81],
                 1),
               v1175,
               v1056[82].f64[0]);
      v940 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[75].f64[0]), *(float64x2_t *)&v1132[200], v1056[75], 1), *(float64x2_t *)&v1132[320], v1056[76].f64[0]),
                                     *(float64x2_t *)&v1132[440],
                                     v1056[76],
                                     1),
                                   *(float64x2_t *)&v1132[560],
                                   v1056[77].f64[0]),
                                 *(float64x2_t *)&v1132[680],
                                 v1056[77],
                                 1),
                               *(float64x2_t *)&v1132[800],
                               v1056[78].f64[0]),
                             *(float64x2_t *)&v1132[920],
                             v1056[78],
                             1),
                           *(float64x2_t *)&v1132[1040],
                           v1056[79].f64[0]),
                         v1138,
                         v1056[79],
                         1),
                       v1146,
                       v1056[80].f64[0]),
                     v1153,
                     v1056[80],
                     1),
                   v1161,
                   v1056[81].f64[0]),
                 v1168,
                 v1056[81],
                 1),
               v1176,
               v1056[82].f64[0]);
      v941 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[82].f64[1]), *(float64x2_t *)&v1132[184], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[304], v1056[83].f64[1]),
                                     *(float64x2_t *)&v1132[424],
                                     *(float64x2_t *)((char *)&v1056[83] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[544],
                                   v1056[84].f64[1]),
                                 *(float64x2_t *)&v1132[664],
                                 *(float64x2_t *)((char *)&v1056[84] + 8),
                                 1),
                               *(float64x2_t *)&v1132[784],
                               v1056[85].f64[1]),
                             *(float64x2_t *)&v1132[904],
                             *(float64x2_t *)((char *)&v1056[85] + 8),
                             1),
                           *(float64x2_t *)&v1132[1024],
                           v1056[86].f64[1]),
                         v1137,
                         *(float64x2_t *)((char *)&v1056[86] + 8),
                         1),
                       v1145,
                       v1056[87].f64[1]),
                     v1152,
                     *(float64x2_t *)((char *)&v1056[87] + 8),
                     1),
                   v1160,
                   v1056[88].f64[1]),
                 v1167,
                 *(float64x2_t *)((char *)&v1056[88] + 8),
                 1),
               v1175,
               v1056[89].f64[1]);
      v942 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[82].f64[1]), *(float64x2_t *)&v1132[200], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[320], v1056[83].f64[1]),
                                     *(float64x2_t *)&v1132[440],
                                     *(float64x2_t *)((char *)&v1056[83] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[560],
                                   v1056[84].f64[1]),
                                 *(float64x2_t *)&v1132[680],
                                 *(float64x2_t *)((char *)&v1056[84] + 8),
                                 1),
                               *(float64x2_t *)&v1132[800],
                               v1056[85].f64[1]),
                             *(float64x2_t *)&v1132[920],
                             *(float64x2_t *)((char *)&v1056[85] + 8),
                             1),
                           *(float64x2_t *)&v1132[1040],
                           v1056[86].f64[1]),
                         v1138,
                         *(float64x2_t *)((char *)&v1056[86] + 8),
                         1),
                       v1146,
                       v1056[87].f64[1]),
                     v1153,
                     *(float64x2_t *)((char *)&v1056[87] + 8),
                     1),
                   v1161,
                   v1056[88].f64[1]),
                 v1168,
                 *(float64x2_t *)((char *)&v1056[88] + 8),
                 1),
               v1176,
               v1056[89].f64[1]);
      v943 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[90].f64[0]), *(float64x2_t *)&v1132[184], v1056[90], 1), *(float64x2_t *)&v1132[304], v1056[91].f64[0]),
                                     *(float64x2_t *)&v1132[424],
                                     v1056[91],
                                     1),
                                   *(float64x2_t *)&v1132[544],
                                   v1056[92].f64[0]),
                                 *(float64x2_t *)&v1132[664],
                                 v1056[92],
                                 1),
                               *(float64x2_t *)&v1132[784],
                               v1056[93].f64[0]),
                             *(float64x2_t *)&v1132[904],
                             v1056[93],
                             1),
                           *(float64x2_t *)&v1132[1024],
                           v1056[94].f64[0]),
                         v1137,
                         v1056[94],
                         1),
                       v1145,
                       v1056[95].f64[0]),
                     v1152,
                     v1056[95],
                     1),
                   v1160,
                   v1056[96].f64[0]),
                 v1167,
                 v1056[96],
                 1),
               v1175,
               v1056[97].f64[0]);
      v944 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[90].f64[0]), *(float64x2_t *)&v1132[200], v1056[90], 1), *(float64x2_t *)&v1132[320], v1056[91].f64[0]),
                                     *(float64x2_t *)&v1132[440],
                                     v1056[91],
                                     1),
                                   *(float64x2_t *)&v1132[560],
                                   v1056[92].f64[0]),
                                 *(float64x2_t *)&v1132[680],
                                 v1056[92],
                                 1),
                               *(float64x2_t *)&v1132[800],
                               v1056[93].f64[0]),
                             *(float64x2_t *)&v1132[920],
                             v1056[93],
                             1),
                           *(float64x2_t *)&v1132[1040],
                           v1056[94].f64[0]),
                         v1138,
                         v1056[94],
                         1),
                       v1146,
                       v1056[95].f64[0]),
                     v1153,
                     v1056[95],
                     1),
                   v1161,
                   v1056[96].f64[0]),
                 v1168,
                 v1056[96],
                 1),
               v1176,
               v1056[97].f64[0]);
      v945 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[97].f64[1]), *(float64x2_t *)&v1132[184], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[304], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[424],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[544],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[664],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[784],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[904],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[1024],
                           v1056[101].f64[1]),
                         v1137,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1145,
                       v1056[102].f64[1]),
                     v1152,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1160,
                   v1056[103].f64[1]),
                 v1167,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1175,
               v1056[104].f64[1]);
      v946 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[97].f64[1]), *(float64x2_t *)&v1132[200], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[320], v1056[98].f64[1]),
                                     *(float64x2_t *)&v1132[440],
                                     *(float64x2_t *)((char *)&v1056[98] + 8),
                                     1),
                                   *(float64x2_t *)&v1132[560],
                                   v1056[99].f64[1]),
                                 *(float64x2_t *)&v1132[680],
                                 *(float64x2_t *)((char *)&v1056[99] + 8),
                                 1),
                               *(float64x2_t *)&v1132[800],
                               v1056[100].f64[1]),
                             *(float64x2_t *)&v1132[920],
                             *(float64x2_t *)((char *)&v1056[100] + 8),
                             1),
                           *(float64x2_t *)&v1132[1040],
                           v1056[101].f64[1]),
                         v1138,
                         *(float64x2_t *)((char *)&v1056[101] + 8),
                         1),
                       v1146,
                       v1056[102].f64[1]),
                     v1153,
                     *(float64x2_t *)((char *)&v1056[102] + 8),
                     1),
                   v1161,
                   v1056[103].f64[1]),
                 v1168,
                 *(float64x2_t *)((char *)&v1056[103] + 8),
                 1),
               v1176,
               v1056[104].f64[1]);
      _D16 = *(_QWORD *)&v1132[232];
      __asm
      {
        FMLA            D0, D16, V18.D[1]
        FMLA            D1, D16, V20.D[1]
      }
      _V17.D[1] = v1056[90].f64[1];
      __asm { FMLA            D4, D16, V17.D[1] }
      _V17.D[1] = v1056[98].f64[0];
      __asm { FMLA            D5, D16, V17.D[1] }
      _V2.D[1] = v1056[76].f64[1];
      _D7 = *(_QWORD *)&v1132[472];
      __asm { FMLA            D0, D7, V2.D[1] }
      _V2.D[1] = v1056[84].f64[0];
      __asm { FMLA            D1, D7, V2.D[1] }
      _V2.D[1] = v1056[91].f64[1];
      __asm { FMLA            D4, D7, V2.D[1] }
      _V2.D[1] = v1056[99].f64[0];
      __asm { FMLA            D5, D7, V2.D[1] }
      _V18.D[1] = v1056[77].f64[1];
      _D17 = *(_QWORD *)&v1132[712];
      __asm { FMLA            D0, D17, V18.D[1] }
      _V18.D[1] = v1056[85].f64[0];
      __asm { FMLA            D1, D17, V18.D[1] }
      _V18.D[1] = v1056[92].f64[1];
      __asm { FMLA            D4, D17, V18.D[1] }
      _V18.D[1] = v1056[100].f64[0];
      __asm { FMLA            D5, D17, V18.D[1] }
      _V18.D[1] = v1056[78].f64[1];
      _D17 = *(_QWORD *)&v1132[952];
      __asm { FMLA            D0, D17, V18.D[1] }
      _V18.D[1] = v1056[86].f64[0];
      __asm { FMLA            D1, D17, V18.D[1] }
      _V18.D[1] = v1056[93].f64[1];
      __asm { FMLA            D4, D17, V18.D[1] }
      _V18.D[1] = v1056[101].f64[0];
      __asm { FMLA            D5, D17, V18.D[1] }
      _V18.D[1] = v1056[79].f64[1];
      _D17 = v1140;
      __asm { FMLA            D0, D17, V18.D[1] }
      _V18.D[1] = v1056[87].f64[0];
      __asm { FMLA            D1, D17, V18.D[1] }
      _V18.D[1] = v1056[94].f64[1];
      __asm { FMLA            D4, D17, V18.D[1] }
      _V18.D[1] = v1056[102].f64[0];
      __asm { FMLA            D5, D17, V18.D[1] }
      _V18.D[1] = v1056[80].f64[1];
      _D17 = v1155;
      __asm { FMLA            D0, D17, V18.D[1] }
      _V18.D[1] = v1056[88].f64[0];
      __asm { FMLA            D1, D17, V18.D[1] }
      _V18.D[1] = v1056[95].f64[1];
      __asm { FMLA            D4, D17, V18.D[1] }
      _V18.D[1] = v1056[103].f64[0];
      __asm { FMLA            D5, D17, V18.D[1] }
      _V7.D[1] = v1056[81].f64[1];
      _D18 = v1170;
      __asm { FMLA            D0, D18, V7.D[1] }
      _V7.D[1] = v1056[89].f64[0];
      __asm { FMLA            D1, D18, V7.D[1] }
      _V7.D[1] = v1056[96].f64[1];
      __asm { FMLA            D4, D18, V7.D[1] }
      _V7.D[1] = v1056[104].f64[0];
      __asm { FMLA            D5, D18, V7.D[1] }
      v1008 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[75].f64[0]), *(float64x2_t *)&v1132[216], v1056[75], 1), *(float64x2_t *)&v1132[336], v1056[76].f64[0]),
                                      *(float64x2_t *)&v1132[456],
                                      v1056[76],
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[77].f64[0]),
                                  *(float64x2_t *)&v1132[696],
                                  v1056[77],
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[78].f64[0]),
                              *(float64x2_t *)&v1132[936],
                              v1056[78],
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[79].f64[0]),
                          v1139,
                          v1056[79],
                          1),
                        v1147,
                        v1056[80].f64[0]),
                      v1154,
                      v1056[80],
                      1),
                    v1162,
                    v1056[81].f64[0]),
                  v1169,
                  v1056[81],
                  1),
                v1177,
                v1056[82].f64[0]);
      v1060 = _D0 + v1178 * v1056[82].f64[0];
      v1009 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[82].f64[1]), *(float64x2_t *)&v1132[216], *(float64x2_t *)((char *)&v1056[82] + 8), 1), *(float64x2_t *)&v1132[336], v1056[83].f64[1]),
                                      *(float64x2_t *)&v1132[456],
                                      *(float64x2_t *)((char *)&v1056[83] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[84].f64[1]),
                                  *(float64x2_t *)&v1132[696],
                                  *(float64x2_t *)((char *)&v1056[84] + 8),
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[85].f64[1]),
                              *(float64x2_t *)&v1132[936],
                              *(float64x2_t *)((char *)&v1056[85] + 8),
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[86].f64[1]),
                          v1139,
                          *(float64x2_t *)((char *)&v1056[86] + 8),
                          1),
                        v1147,
                        v1056[87].f64[1]),
                      v1154,
                      *(float64x2_t *)((char *)&v1056[87] + 8),
                      1),
                    v1162,
                    v1056[88].f64[1]),
                  v1169,
                  *(float64x2_t *)((char *)&v1056[88] + 8),
                  1),
                v1177,
                v1056[89].f64[1]);
      v1061 = _D1 + v1178 * v1056[89].f64[1];
      v1010 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[90].f64[0]), *(float64x2_t *)&v1132[216], v1056[90], 1), *(float64x2_t *)&v1132[336], v1056[91].f64[0]),
                                      *(float64x2_t *)&v1132[456],
                                      v1056[91],
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[92].f64[0]),
                                  *(float64x2_t *)&v1132[696],
                                  v1056[92],
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[93].f64[0]),
                              *(float64x2_t *)&v1132[936],
                              v1056[93],
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[94].f64[0]),
                          v1139,
                          v1056[94],
                          1),
                        v1147,
                        v1056[95].f64[0]),
                      v1154,
                      v1056[95],
                      1),
                    v1162,
                    v1056[96].f64[0]),
                  v1169,
                  v1056[96],
                  1),
                v1177,
                v1056[97].f64[0]);
      v1062 = _D4 + v1178 * v1056[97].f64[0];
      v1011 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[97].f64[1]), *(float64x2_t *)&v1132[216], *(float64x2_t *)((char *)&v1056[97] + 8), 1), *(float64x2_t *)&v1132[336], v1056[98].f64[1]),
                                      *(float64x2_t *)&v1132[456],
                                      *(float64x2_t *)((char *)&v1056[98] + 8),
                                      1),
                                    *(float64x2_t *)&v1132[576],
                                    v1056[99].f64[1]),
                                  *(float64x2_t *)&v1132[696],
                                  *(float64x2_t *)((char *)&v1056[99] + 8),
                                  1),
                                *(float64x2_t *)&v1132[816],
                                v1056[100].f64[1]),
                              *(float64x2_t *)&v1132[936],
                              *(float64x2_t *)((char *)&v1056[100] + 8),
                              1),
                            *(float64x2_t *)&v1132[1056],
                            v1056[101].f64[1]),
                          v1139,
                          *(float64x2_t *)((char *)&v1056[101] + 8),
                          1),
                        v1147,
                        v1056[102].f64[1]),
                      v1154,
                      *(float64x2_t *)((char *)&v1056[102] + 8),
                      1),
                    v1162,
                    v1056[103].f64[1]),
                  v1169,
                  *(float64x2_t *)((char *)&v1056[103] + 8),
                  1),
                v1177,
                v1056[104].f64[1]);
      v1064 = _D5 + v1178 * v1056[104].f64[1];
      v1012 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1132, v1056[105].f64[0]), *(float64x2_t *)&v1132[120], v1056[105], 1), *(float64x2_t *)&v1132[240], v1056[106].f64[0]),
                                      *(float64x2_t *)&v1132[360],
                                      v1056[106],
                                      1),
                                    *(float64x2_t *)&v1132[480],
                                    v1056[107].f64[0]),
                                  *(float64x2_t *)&v1132[600],
                                  v1056[107],
                                  1),
                                *(float64x2_t *)&v1132[720],
                                v1056[108].f64[0]),
                              *(float64x2_t *)&v1132[840],
                              v1056[108],
                              1),
                            *(float64x2_t *)&v1132[960],
                            v1056[109].f64[0]),
                          v1133,
                          v1056[109],
                          1),
                        v1141,
                        v1056[110].f64[0]),
                      v1148,
                      v1056[110],
                      1),
                    v1156,
                    v1056[111].f64[0]),
                  v1163,
                  v1056[111],
                  1),
                v1171,
                v1056[112].f64[0]);
      v1013 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[16], v1056[105].f64[0]), *(float64x2_t *)&v1132[136], v1056[105], 1), *(float64x2_t *)&v1132[256], v1056[106].f64[0]),
                                      *(float64x2_t *)&v1132[376],
                                      v1056[106],
                                      1),
                                    *(float64x2_t *)&v1132[496],
                                    v1056[107].f64[0]),
                                  *(float64x2_t *)&v1132[616],
                                  v1056[107],
                                  1),
                                *(float64x2_t *)&v1132[736],
                                v1056[108].f64[0]),
                              *(float64x2_t *)&v1132[856],
                              v1056[108],
                              1),
                            *(float64x2_t *)&v1132[976],
                            v1056[109].f64[0]),
                          v1134,
                          v1056[109],
                          1),
                        v1142,
                        v1056[110].f64[0]),
                      v1149,
                      v1056[110],
                      1),
                    v1157,
                    v1056[111].f64[0]),
                  v1164,
                  v1056[111],
                  1),
                v1172,
                v1056[112].f64[0]);
      v1014 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[32], v1056[105].f64[0]), *(float64x2_t *)&v1132[152], v1056[105], 1), *(float64x2_t *)&v1132[272], v1056[106].f64[0]),
                                      *(float64x2_t *)&v1132[392],
                                      v1056[106],
                                      1),
                                    *(float64x2_t *)&v1132[512],
                                    v1056[107].f64[0]),
                                  *(float64x2_t *)&v1132[632],
                                  v1056[107],
                                  1),
                                *(float64x2_t *)&v1132[752],
                                v1056[108].f64[0]),
                              *(float64x2_t *)&v1132[872],
                              v1056[108],
                              1),
                            *(float64x2_t *)&v1132[992],
                            v1056[109].f64[0]),
                          v1135,
                          v1056[109],
                          1),
                        v1143,
                        v1056[110].f64[0]),
                      v1150,
                      v1056[110],
                      1),
                    v1158,
                    v1056[111].f64[0]),
                  v1165,
                  v1056[111],
                  1),
                v1173,
                v1056[112].f64[0]);
      v1015 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[48], v1056[105].f64[0]), *(float64x2_t *)&v1132[168], v1056[105], 1), *(float64x2_t *)&v1132[288], v1056[106].f64[0]),
                                      *(float64x2_t *)&v1132[408],
                                      v1056[106],
                                      1),
                                    *(float64x2_t *)&v1132[528],
                                    v1056[107].f64[0]),
                                  *(float64x2_t *)&v1132[648],
                                  v1056[107],
                                  1),
                                *(float64x2_t *)&v1132[768],
                                v1056[108].f64[0]),
                              *(float64x2_t *)&v1132[888],
                              v1056[108],
                              1),
                            *(float64x2_t *)&v1132[1008],
                            v1056[109].f64[0]),
                          v1136,
                          v1056[109],
                          1),
                        v1144,
                        v1056[110].f64[0]),
                      v1151,
                      v1056[110],
                      1),
                    v1159,
                    v1056[111].f64[0]),
                  v1166,
                  v1056[111],
                  1),
                v1174,
                v1056[112].f64[0]);
      v1016 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[64], v1056[105].f64[0]), *(float64x2_t *)&v1132[184], v1056[105], 1);
      v1017 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[80], v1056[105].f64[0]), *(float64x2_t *)&v1132[200], v1056[105], 1);
      v1018 = v1115;
      *(float64x2_t *)((char *)v14 + 360) = v1116;
      *(float64x2_t *)((char *)v14 + 376) = v1018;
      v1019 = v1089;
      *(float64x2_t *)((char *)v14 + 392) = v1090;
      *(float64x2_t *)((char *)v14 + 408) = v1019;
      v1020 = v1075;
      *(float64x2_t *)((char *)v14 + 424) = v1076;
      *(float64x2_t *)((char *)v14 + 440) = v1020;
      *(float64x2_t *)((char *)v14 + 456) = v1066;
      *(float64x2_t *)((char *)v14 + 600) = v1057;
      *(float64x2_t *)((char *)v14 + 616) = v928;
      *(float64x2_t *)((char *)v14 + 840) = _Q14;
      *(float64x2_t *)((char *)v14 + 856) = v930;
      *(float64x2_t *)((char *)v14 + 632) = _Q8;
      *(float64x2_t *)((char *)v14 + 648) = v934;
      *(float64x2_t *)((char *)v14 + 872) = _Q30;
      *(float64x2_t *)((char *)v14 + 888) = v938;
      *(float64x2_t *)((char *)v14 + 664) = v941;
      *(float64x2_t *)((char *)v14 + 680) = v942;
      v1021 = v1131.f64[0];
      v1022 = v1119;
      *(float64x2_t *)(*(_QWORD *)&v1131.f64[0] + 960) = v1120;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 976) = v1022;
      v1023 = v1093;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 992) = v1095;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1008) = v1023;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1040) = v1077;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1024) = v1078;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1456) = v1058;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1440) = v1059;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1488) = v936;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1472) = _Q10;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1520) = v944;
      *(float64x2_t *)(*(_QWORD *)&v1021 + 1504) = v943;
      *(float64x2_t *)((char *)v14 + 904) = v945;
      *(float64x2_t *)((char *)v14 + 920) = v946;
      *(float64x2_t *)((char *)v14 + 696) = v1009;
      *(float64x2_t *)((char *)v14 + 936) = v1011;
      v1024 = v1122;
      *v14 = v1124;
      v14[1] = v1024;
      *(float64x2_t *)((char *)v14 + 136) = v1121;
      *(float64x2_t *)((char *)v14 + 120) = v1123;
      v1025 = v1101;
      v14[2] = v1104;
      v14[3] = v1025;
      *(float64x2_t *)((char *)v14 + 168) = v1099;
      *(float64x2_t *)((char *)v14 + 152) = v1102;
      v1026 = v1081;
      v14[4] = v1083;
      v14[5] = v1026;
      *(float64x2_t *)((char *)v14 + 200) = v1080;
      *(float64x2_t *)((char *)v14 + 184) = v1082;
      v14[6] = v1074;
      v14[7].f64[0] = v1070;
      *(float64x2_t *)((char *)v14 + 216) = v1073;
      v14[14].f64[1] = v1069;
      v14[21] = v1072;
      v14[22].f64[0] = v1068;
      v14[29].f64[1] = v1067;
      _Q22 = *(float64x2_t *)&v1132[680];
      v1028 = v1063;
      v1029 = *(float64x2_t *)&v1132[920];
      v14[30] = v1071;
      v14[31] = v1028;
      v1030 = v1138;
      v14[32] = v931;
      v14[33] = _Q11;
      _Q3 = v1153;
      _Q6 = v1168;
      v14[34] = _Q28;
      v14[35] = v940;
      v1033 = *(float64x2_t *)&v1132[216];
      v1034 = *(float64x2_t *)&v1132[696];
      v14[36] = v1008;
      v1035 = *(float64x2_t *)&v1132[936];
      v944.f64[0] = v1061;
      v14[37].f64[0] = v1060;
      v1036 = v1139;
      v14[44].f64[1] = v944.f64[0];
      v1037 = v1154;
      v14[51] = v1010;
      v1038 = v1169;
      _Q10.f64[0] = *(float64_t *)&v1132[232];
      v1039 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1017, v1085, v1056[106].f64[0]), *(float64x2_t *)&v1132[440], v1056[106], 1), v1065, v1056[107].f64[0]), _Q22, v1056[107], 1), v1084, v1056[108].f64[0]),
                        v1029,
                        v1056[108],
                        1),
                      *(float64x2_t *)&v1132[1040],
                      v1056[109].f64[0]),
                    v1030,
                    v1056[109],
                    1),
                  v1079,
                  v1056[110].f64[0]),
                _Q3,
                v1056[110],
                1);
      _Q3.f64[0] = *(float64_t *)&v1132[472];
      _Q22.f64[1] = v1056[106].f64[1];
      _Q30.f64[1] = v1056[105].f64[1];
      v1040 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1016, v1105, v1056[106].f64[0]), *(float64x2_t *)&v1132[424], v1056[106], 1), v1103, v1056[107].f64[0]), v1100, v1056[107],
                                  1),
                                v1094,
                                v1056[108].f64[0]),
                              v1092,
                              v1056[108],
                              1),
                            *(float64x2_t *)&v1132[1024],
                            v1056[109].f64[0]),
                          v1091,
                          v1056[109],
                          1),
                        v1088,
                        v1056[110].f64[0]),
                      v1087,
                      v1056[110],
                      1),
                    v1160,
                    v1056[111].f64[0]),
                  v1086,
                  v1056[111],
                  1),
                v1175,
                v1056[112].f64[0]);
      v1041 = *(float64x2_t *)&v1132[576];
      v1042 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1039, v1161, v1056[111].f64[0]), _Q6, v1056[111], 1), v1176, v1056[112].f64[0]);
      _Q6.f64[0] = *(float64_t *)&v1132[712];
      v1043 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1132[96], v1056[105].f64[0]), v1033, v1056[105], 1);
      v1044 = *(float64x2_t *)&v1132[816];
      _Q28.f64[0] = *(float64_t *)&v1132[952];
      v1045 = vmlaq_laneq_f64(vmlaq_n_f64(v1043, *(float64x2_t *)&v1132[336], v1056[106].f64[0]), *(float64x2_t *)&v1132[456], v1056[106], 1);
      v1046 = *(float64x2_t *)&v1132[1056];
      __asm { FMLA            D8, D10, V30.D[1] }
      _Q30.f64[0] = v1140;
      __asm { FMLA            D8, D3, V22.D[1] }
      v1047 = v1147;
      _Q22.f64[0] = v1155;
      v1048 = v1162;
      _Q11.f64[0] = v1170;
      v931.f64[0] = v1178;
      v1049 = v1177;
      v14[52].f64[0] = v1062;
      _Q14.f64[1] = v1056[107].f64[1];
      v1050 = vmlaq_n_f64(v1045, v1041, v1056[107].f64[0]);
      _Q31 = v1056[108];
      v1052 = vmlaq_laneq_f64(v1050, v1034, v1056[107], 1);
      _Q18 = v1056[110];
      v1034.f64[0] = v1056[112].f64[0];
      __asm { FMLA            D8, D6, V14.D[1] }
      _Q6 = v1056[109];
      _Q14 = v1056[111];
      v14[59].f64[1] = v1064;
      v14[60] = v1012;
      v14[61] = v1013;
      v14[62] = v1014;
      v14[63] = v1015;
      v14[65] = v1042;
      v14[64] = v1040;
      __asm
      {
        FMLA            D8, D28, V31.D[1]
        FMLA            D8, D30, V6.D[1]
        FMLA            D8, D22, V18.D[1]
      }
      v14[66] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1052, v1044, _Q31.f64[0]), v1035, _Q31, 1), v1046, _Q6.f64[0]), v1036, _Q6, 1), v1047, _Q18.f64[0]), v1037, _Q18, 1), v1048, _Q14.f64[0]),
                    v1038,
                    _Q14,
                    1),
                  v1049,
                  v1034.f64[0]);
      __asm { FMLA            D8, D11, V14.D[1] }
      v14[67].f64[0] = _Q8.f64[0] + v931.f64[0] * v1034.f64[0];
      break;
    default:
      return result;
  }
  return result;
}

float64x2_t *sub_20F585344(float64x2_t *result, int a2, float64x2_t *__src, double a4, double a5, double a6, double a7, double a8, float64x2_t a9, float64x2_t a10, float64x2_t *a11, int a12)
{
  float64x2_t *v14;
  float64x2_t *v15;
  float64x2_t *v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v54;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v62;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  double v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v334;
  float64x2_t v336;
  float64x2_t v339;
  float64x2_t v344;
  float64x2_t v346;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v355;
  float64x2_t v357;
  float64x2_t v359;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v551;
  float64x2_t v553;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v568;
  float64x2_t v570;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  unint64_t i;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t *v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  double v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  _QWORD *v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v756;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773[115];
  float64_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  double v789;
  double v790;
  double v791;
  double v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v810[45];
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814;
  float64x2_t v815;
  float64x2_t v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  float64x2_t v824;
  float64_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t v835;
  float64x2_t v836;
  float64x2_t v837;
  float64x2_t v838;
  float64x2_t v839;
  float64_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  float64x2_t v851;
  float64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  float64_t v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  float64x2_t v867;
  float64x2_t v868;
  float64x2_t v869;
  float64_t v870;
  float64x2_t v871;
  float64x2_t v872;
  float64x2_t v873;
  float64x2_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  float64_t v878;
  uint64_t v879;

  v879 = *MEMORY[0x24BDAC8D0];
  v14 = __src + 17;
  switch(a12)
  {
    case 0:
      v15 = a11 + 1;
      if (&__src[45] > &a11[1] && (float64x2_t *)&a11[113].f64[1] > __src)
      {
        MEMORY[0x24BDAC7A8](result);
        result = (float64x2_t *)memcpy(v773, v15, 0x708uLL);
        v15 = v773;
      }
      MEMORY[0x24BDAC7A8](result);
      v16 = &v773[-45];
      memcpy(&v773[-45], __src, 0x2D0uLL);
      v17 = v15[1];
      v18 = *(float64x2_t *)((char *)v15 + 136);
      v19 = *(float64x2_t *)((char *)v15 + 120);
      v21 = v15[15];
      v20 = v15[16];
      v22 = *(float64x2_t *)((char *)v15 + 376);
      v23 = *(float64x2_t *)((char *)v15 + 360);
      v24 = v773[-44];
      v25 = *(float64x2_t *)((char *)&v773[-37] + 8);
      v26 = *(float64x2_t *)((char *)&v773[-38] + 8);
      v27 = v773[-30];
      v28 = *(float64x2_t *)((char *)&v773[-22] + 8);
      v29 = *(float64x2_t *)((char *)&v773[-23] + 8);
      _Q24 = v773[-45];
      v31 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v16->f64[0]), v19, *v16, 1), v21, v24.f64[0]), v23, v24, 1);
      v32 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v16->f64[0]), v18, *v16, 1), v20, v24.f64[0]), v22, v24, 1);
      v33 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v26.f64[0]), v19, v26, 1), v21, v25.f64[0]), v23, v25, 1);
      v34 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v26.f64[0]), v18, v26, 1), v20, v25.f64[0]), v22, v25, 1);
      _Q20 = v27;
      v36 = v773[-29];
      v37 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v27.f64[0]), v19, v27, 1), v21, v36.f64[0]), v23, v36, 1);
      v38 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v27.f64[0]), v18, v27, 1), v20, v36.f64[0]), v22, v36, 1);
      v39 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v29.f64[0]), v19, v29, 1), v21, v28.f64[0]), v23, v28, 1);
      v40 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v29.f64[0]), v18, v29, 1), v20, v28.f64[0]), v22, v28, 1);
      v42 = v15[30];
      v41 = v15[31];
      v44 = *(float64x2_t *)((char *)v15 + 600);
      v43 = *(float64x2_t *)((char *)v15 + 616);
      v46 = v15[45];
      v45 = v15[46];
      v48 = *(float64x2_t *)((char *)v15 + 840);
      v47 = *(float64x2_t *)((char *)v15 + 856);
      v49 = *(float64x2_t *)((char *)&v773[-35] + 8);
      v50 = *(float64x2_t *)((char *)&v773[-36] + 8);
      v51 = *(float64x2_t *)((char *)&v773[-20] + 8);
      v52 = *(float64x2_t *)((char *)&v773[-21] + 8);
      _Q1 = v773[-44];
      v54 = v773[-43];
      _Q2 = v54;
      v56 = v773[-42];
      v57 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v31, v42, v54.f64[0]), v44, v54, 1), v46, v56.f64[0]), v48, v56, 1);
      v58 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v32, v41, v54.f64[0]), v43, v54, 1), v45, v56.f64[0]), v47, v56, 1);
      v59 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v33, v42, v50.f64[0]), v44, v50, 1), v46, v49.f64[0]), v48, v49, 1);
      v60 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v34, v41, v50.f64[0]), v43, v50, 1), v45, v49.f64[0]), v47, v49, 1);
      _Q4 = v773[-29];
      v62 = v773[-28];
      _Q3 = v62;
      v64 = v773[-27];
      v65 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v37, v42, v62.f64[0]), v44, v62, 1), v46, v64.f64[0]), v48, v64, 1);
      v66 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v38, v41, v62.f64[0]), v43, v62, 1), v45, v64.f64[0]), v47, v64, 1);
      v67 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v39, v42, v52.f64[0]), v44, v52, 1), v46, v51.f64[0]), v48, v51, 1);
      v68 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v40, v41, v52.f64[0]), v43, v52, 1), v45, v51.f64[0]), v47, v51, 1);
      v70 = v15[60];
      v69 = v15[61];
      v72 = *(float64x2_t *)((char *)v15 + 1080);
      v71 = *(float64x2_t *)((char *)v15 + 1096);
      v73 = v15[76];
      v74 = v15[75];
      v75 = *(float64x2_t *)((char *)v15 + 1320);
      v76 = *(float64x2_t *)((char *)v15 + 1336);
      v77 = *(float64x2_t *)((char *)&v773[-33] + 8);
      v78 = *(float64x2_t *)((char *)&v773[-34] + 8);
      v79 = *(float64x2_t *)((char *)&v773[-18] + 8);
      v80 = *(float64x2_t *)((char *)&v773[-19] + 8);
      _Q5 = v773[-42];
      _Q7 = v773[-41];
      v83 = v773[-40];
      v84 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v57, v70, _Q7.f64[0]), v72, _Q7, 1), v74, v83.f64[0]), v75, v83, 1);
      v85 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v58, v69, _Q7.f64[0]), v71, _Q7, 1), v73, v83.f64[0]), v76, v83, 1);
      v86 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v59, v70, v78.f64[0]), v72, v78, 1), v74, v77.f64[0]), v75, v77, 1);
      v87 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v60, v69, v78.f64[0]), v71, v78, 1), v73, v77.f64[0]), v76, v77, 1);
      _Q18 = v773[-27];
      _Q6 = v773[-26];
      v90 = v773[-25];
      v91 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v65, v70, _Q6.f64[0]), v72, _Q6, 1), v74, v90.f64[0]), v75, v90, 1);
      v92 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v66, v69, _Q6.f64[0]), v71, _Q6, 1), v73, v90.f64[0]), v76, v90, 1);
      v93 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v67, v70, v80.f64[0]), v72, v80, 1), v74, v79.f64[0]), v75, v79, 1);
      v94 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v68, v69, v80.f64[0]), v71, v80, 1), v73, v79.f64[0]), v76, v79, 1);
      v95 = v15[91];
      v96 = v15[90];
      v98 = *(float64x2_t *)((char *)v15 + 1560);
      v97 = *(float64x2_t *)((char *)v15 + 1576);
      v99 = v15[106];
      v100 = v15[105];
      v69.f64[0] = v773[-38].f64[0];
      v75.f64[0] = v773[-31].f64[1];
      v101 = *(float64x2_t *)((char *)&v773[-32] + 8);
      _Q17 = v773[-40];
      v102 = v773[-39];
      v104 = vmlaq_laneq_f64(vmlaq_n_f64(v84, v96, v102.f64[0]), v98, v102, 1);
      v105 = vmlaq_laneq_f64(vmlaq_n_f64(v85, v95, v102.f64[0]), v97, v102, 1);
      v102.f64[0] = v773[-23].f64[0];
      v106 = vmlaq_n_f64(v104, v100, v69.f64[0]);
      v107 = vmlaq_n_f64(v105, v99, v69.f64[0]);
      v108 = v773[-16].f64[1];
      v109 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v86, v96, v101.f64[0]), v98, v101, 1), v100, v75.f64[0]);
      v110 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v87, v95, v101.f64[0]), v97, v101, 1), v99, v75.f64[0]);
      _Q16 = v773[-25];
      v111 = v773[-24];
      v113 = vmlaq_laneq_f64(vmlaq_n_f64(v91, v96, v111.f64[0]), v98, v111, 1);
      v114 = vmlaq_laneq_f64(vmlaq_n_f64(v92, v95, v111.f64[0]), v97, v111, 1);
      v115 = *(float64x2_t *)((char *)&v773[-17] + 8);
      *__src = v106;
      __src[1] = v107;
      *(float64x2_t *)((char *)__src + 136) = v110;
      *(float64x2_t *)((char *)__src + 120) = v109;
      __src[15] = vmlaq_n_f64(v113, v100, v102.f64[0]);
      __src[16] = vmlaq_n_f64(v114, v99, v102.f64[0]);
      *(float64x2_t *)((char *)v14 + 104) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v94, v95, v115.f64[0]), v97, v115, 1), v99, v108);
      *(float64x2_t *)((char *)v14 + 88) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v93, v96, v115.f64[0]), v98, v115, 1), v100, v108);
      v116 = v15[2];
      v117 = v15[3];
      v118 = *(float64x2_t *)((char *)v15 + 168);
      v119 = *(float64x2_t *)((char *)v15 + 152);
      v121 = v15[17];
      v120 = v15[18];
      v122 = *(float64x2_t *)((char *)v15 + 408);
      v123 = *(float64x2_t *)((char *)v15 + 392);
      v124 = v773[-44];
      v125 = *(float64x2_t *)((char *)&v773[-37] + 8);
      v126 = *(float64x2_t *)((char *)&v773[-38] + 8);
      v128 = v773[-30];
      v127 = v773[-29];
      v129 = *(float64x2_t *)((char *)&v773[-22] + 8);
      v130 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, v16->f64[0]), v119, *v16, 1), v121, v124.f64[0]), v123, v124, 1);
      v131 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v117, v16->f64[0]), v118, *v16, 1), v120, v124.f64[0]), v122, v124, 1);
      v132 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, v126.f64[0]), v119, v126, 1), v121, v125.f64[0]), v123, v125, 1);
      v133 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v117, v126.f64[0]), v118, v126, 1), v120, v125.f64[0]), v122, v125, 1);
      v134 = vmlaq_laneq_f64(vmulq_n_f64(v116, v128.f64[0]), v119, v128, 1);
      v135 = vmlaq_laneq_f64(vmulq_n_f64(v117, v128.f64[0]), v118, v128, 1);
      v136 = *(float64x2_t *)((char *)&v773[-23] + 8);
      v137 = vmlaq_laneq_f64(vmlaq_n_f64(v134, v121, v127.f64[0]), v123, v127, 1);
      v138 = vmlaq_laneq_f64(vmlaq_n_f64(v135, v120, v127.f64[0]), v122, v127, 1);
      v139 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, v136.f64[0]), v119, v136, 1), v121, v129.f64[0]), v123, v129, 1);
      v140 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v117, v136.f64[0]), v118, v136, 1), v120, v129.f64[0]), v122, v129, 1);
      v142 = v15[32];
      v141 = v15[33];
      v144 = *(float64x2_t *)((char *)v15 + 632);
      v143 = *(float64x2_t *)((char *)v15 + 648);
      v146 = v15[47];
      v145 = v15[48];
      v148 = *(float64x2_t *)((char *)v15 + 872);
      v147 = *(float64x2_t *)((char *)v15 + 888);
      v149 = v773[-43];
      v150 = vmlaq_laneq_f64(vmlaq_n_f64(v130, v142, v149.f64[0]), v144, v149, 1);
      v151 = vmlaq_laneq_f64(vmlaq_n_f64(v131, v141, v149.f64[0]), v143, v149, 1);
      v152 = v773[-42];
      v153 = vmlaq_laneq_f64(vmlaq_n_f64(v150, v146, v152.f64[0]), v148, v152, 1);
      v154 = vmlaq_laneq_f64(vmlaq_n_f64(v151, v145, v152.f64[0]), v147, v152, 1);
      v155 = *(float64x2_t *)((char *)&v773[-36] + 8);
      v156 = vmlaq_laneq_f64(vmlaq_n_f64(v132, v142, v155.f64[0]), v144, v155, 1);
      v157 = vmlaq_laneq_f64(vmlaq_n_f64(v133, v141, v155.f64[0]), v143, v155, 1);
      v158 = *(float64x2_t *)((char *)&v773[-35] + 8);
      v159 = vmlaq_laneq_f64(vmlaq_n_f64(v156, v146, v158.f64[0]), v148, v158, 1);
      v160 = vmlaq_laneq_f64(vmlaq_n_f64(v157, v145, v158.f64[0]), v147, v158, 1);
      v161 = v773[-28];
      v162 = vmlaq_laneq_f64(vmlaq_n_f64(v137, v142, v161.f64[0]), v144, v161, 1);
      v163 = vmlaq_laneq_f64(vmlaq_n_f64(v138, v141, v161.f64[0]), v143, v161, 1);
      v164 = v773[-27];
      v165 = vmlaq_laneq_f64(vmlaq_n_f64(v162, v146, v164.f64[0]), v148, v164, 1);
      v166 = vmlaq_laneq_f64(vmlaq_n_f64(v163, v145, v164.f64[0]), v147, v164, 1);
      v167 = *(float64x2_t *)((char *)&v773[-21] + 8);
      v168 = vmlaq_n_f64(v139, v142, v167.f64[0]);
      v169 = *(float64x2_t *)((char *)&v773[-20] + 8);
      v170 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v168, v144, v167, 1), v146, v169.f64[0]), v148, v169, 1);
      v171 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v140, v141, v167.f64[0]), v143, v167, 1), v145, v169.f64[0]), v147, v169, 1);
      v173 = v15[62];
      v172 = v15[63];
      v175 = *(float64x2_t *)((char *)v15 + 1112);
      v174 = *(float64x2_t *)((char *)v15 + 1128);
      v176 = v15[78];
      v177 = v15[77];
      v179 = *(float64x2_t *)((char *)v15 + 1352);
      v178 = *(float64x2_t *)((char *)v15 + 1368);
      v180 = v773[-41];
      v181 = vmlaq_laneq_f64(vmlaq_n_f64(v153, v173, v180.f64[0]), v175, v180, 1);
      v182 = vmlaq_laneq_f64(vmlaq_n_f64(v154, v172, v180.f64[0]), v174, v180, 1);
      v183 = v773[-40];
      v184 = vmlaq_laneq_f64(vmlaq_n_f64(v181, v177, v183.f64[0]), v179, v183, 1);
      v185 = vmlaq_laneq_f64(vmlaq_n_f64(v182, v176, v183.f64[0]), v178, v183, 1);
      v186 = *(float64x2_t *)((char *)&v773[-34] + 8);
      v187 = vmlaq_laneq_f64(vmlaq_n_f64(v159, v173, v186.f64[0]), v175, v186, 1);
      v188 = vmlaq_laneq_f64(vmlaq_n_f64(v160, v172, v186.f64[0]), v174, v186, 1);
      v189 = *(float64x2_t *)((char *)&v773[-33] + 8);
      v190 = vmlaq_laneq_f64(vmlaq_n_f64(v187, v177, v189.f64[0]), v179, v189, 1);
      v191 = vmlaq_laneq_f64(vmlaq_n_f64(v188, v176, v189.f64[0]), v178, v189, 1);
      v192 = v773[-26];
      v193 = vmlaq_laneq_f64(vmlaq_n_f64(v165, v173, v192.f64[0]), v175, v192, 1);
      v194 = vmlaq_laneq_f64(vmlaq_n_f64(v166, v172, v192.f64[0]), v174, v192, 1);
      v195 = v773[-25];
      v196 = vmlaq_laneq_f64(vmlaq_n_f64(v193, v177, v195.f64[0]), v179, v195, 1);
      v197 = vmlaq_laneq_f64(vmlaq_n_f64(v194, v176, v195.f64[0]), v178, v195, 1);
      v198 = *(float64x2_t *)((char *)&v773[-19] + 8);
      v199 = vmlaq_n_f64(v170, v173, v198.f64[0]);
      v200 = *(float64x2_t *)((char *)&v773[-18] + 8);
      v201 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v199, v175, v198, 1), v177, v200.f64[0]), v179, v200, 1);
      v202 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v171, v172, v198.f64[0]), v174, v198, 1), v176, v200.f64[0]), v178, v200, 1);
      v203 = v15[93];
      v204 = v15[92];
      v206 = *(float64x2_t *)((char *)v15 + 1592);
      v205 = *(float64x2_t *)((char *)v15 + 1608);
      v207 = v15[108];
      v208 = v15[107];
      v178.f64[0] = v773[-38].f64[0];
      v209 = v773[-39];
      v198.f64[0] = v773[-31].f64[1];
      v210 = vmlaq_laneq_f64(vmlaq_n_f64(v184, v204, v209.f64[0]), v206, v209, 1);
      v211 = vmlaq_laneq_f64(vmlaq_n_f64(v185, v203, v209.f64[0]), v205, v209, 1);
      v212 = *(float64x2_t *)((char *)&v773[-32] + 8);
      v213 = vmlaq_n_f64(v210, v208, v178.f64[0]);
      v214 = vmlaq_n_f64(v211, v207, v178.f64[0]);
      v178.f64[0] = v773[-23].f64[0];
      v215 = vmlaq_laneq_f64(vmlaq_n_f64(v190, v204, v212.f64[0]), v206, v212, 1);
      v216 = vmlaq_laneq_f64(vmlaq_n_f64(v191, v203, v212.f64[0]), v205, v212, 1);
      v217 = v773[-24];
      v218 = vmlaq_n_f64(v215, v208, v198.f64[0]);
      v219 = vmlaq_n_f64(v216, v207, v198.f64[0]);
      v198.f64[0] = v773[-16].f64[1];
      v220 = vmlaq_laneq_f64(vmlaq_n_f64(v196, v204, v217.f64[0]), v206, v217, 1);
      v221 = vmlaq_laneq_f64(vmlaq_n_f64(v197, v203, v217.f64[0]), v205, v217, 1);
      v222 = *(float64x2_t *)((char *)&v773[-17] + 8);
      __src[2] = v213;
      __src[3] = v214;
      *(float64x2_t *)((char *)__src + 168) = v219;
      *(float64x2_t *)((char *)__src + 152) = v218;
      *v14 = vmlaq_n_f64(v220, v208, v178.f64[0]);
      v14[1] = vmlaq_n_f64(v221, v207, v178.f64[0]);
      *(float64x2_t *)((char *)v14 + 136) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v202, v203, v222.f64[0]), v205, v222, 1), v207, v198.f64[0]);
      *(float64x2_t *)((char *)v14 + 120) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v201, v204, v222.f64[0]), v206, v222, 1), v208, v198.f64[0]);
      v223 = v15[4];
      v224 = v15[5];
      v225 = *(float64x2_t *)((char *)v15 + 200);
      v226 = *(float64x2_t *)((char *)v15 + 184);
      v228 = v15[19];
      v227 = v15[20];
      v229 = *(float64x2_t *)((char *)v15 + 440);
      v230 = *(float64x2_t *)((char *)v15 + 424);
      v231 = v773[-44];
      v232 = *(float64x2_t *)((char *)&v773[-37] + 8);
      v233 = *(float64x2_t *)((char *)&v773[-38] + 8);
      v235 = v773[-30];
      v234 = v773[-29];
      v236 = *(float64x2_t *)((char *)&v773[-22] + 8);
      v237 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v223, v16->f64[0]), v226, *v16, 1), v228, v231.f64[0]), v230, v231, 1);
      v238 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v224, v16->f64[0]), v225, *v16, 1), v227, v231.f64[0]), v229, v231, 1);
      v239 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v223, v233.f64[0]), v226, v233, 1), v228, v232.f64[0]), v230, v232, 1);
      v240 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v224, v233.f64[0]), v225, v233, 1), v227, v232.f64[0]), v229, v232, 1);
      v241 = vmlaq_laneq_f64(vmulq_n_f64(v223, v235.f64[0]), v226, v235, 1);
      v242 = vmlaq_laneq_f64(vmulq_n_f64(v224, v235.f64[0]), v225, v235, 1);
      v243 = *(float64x2_t *)((char *)&v773[-23] + 8);
      v244 = vmlaq_laneq_f64(vmlaq_n_f64(v241, v228, v234.f64[0]), v230, v234, 1);
      v245 = vmlaq_laneq_f64(vmlaq_n_f64(v242, v227, v234.f64[0]), v229, v234, 1);
      v246 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v223, v243.f64[0]), v226, v243, 1), v228, v236.f64[0]), v230, v236, 1);
      v247 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v224, v243.f64[0]), v225, v243, 1), v227, v236.f64[0]), v229, v236, 1);
      v249 = v15[34];
      v248 = v15[35];
      result = (float64x2_t *)((char *)v15 + 664);
      v251 = *(float64x2_t *)((char *)v15 + 664);
      v250 = *(float64x2_t *)((char *)v15 + 680);
      v253 = v15[49];
      v252 = v15[50];
      v255 = *(float64x2_t *)((char *)v15 + 904);
      v254 = *(float64x2_t *)((char *)v15 + 920);
      v256 = v773[-43];
      v257 = vmlaq_laneq_f64(vmlaq_n_f64(v237, v249, v256.f64[0]), v251, v256, 1);
      v258 = vmlaq_laneq_f64(vmlaq_n_f64(v238, v248, v256.f64[0]), v250, v256, 1);
      v259 = v773[-42];
      v260 = vmlaq_laneq_f64(vmlaq_n_f64(v257, v253, v259.f64[0]), v255, v259, 1);
      v261 = vmlaq_laneq_f64(vmlaq_n_f64(v258, v252, v259.f64[0]), v254, v259, 1);
      v262 = *(float64x2_t *)((char *)&v773[-36] + 8);
      v263 = vmlaq_laneq_f64(vmlaq_n_f64(v239, v249, v262.f64[0]), v251, v262, 1);
      v264 = vmlaq_laneq_f64(vmlaq_n_f64(v240, v248, v262.f64[0]), v250, v262, 1);
      v265 = *(float64x2_t *)((char *)&v773[-35] + 8);
      v266 = vmlaq_laneq_f64(vmlaq_n_f64(v263, v253, v265.f64[0]), v255, v265, 1);
      v267 = vmlaq_laneq_f64(vmlaq_n_f64(v264, v252, v265.f64[0]), v254, v265, 1);
      v268 = v773[-28];
      v269 = vmlaq_laneq_f64(vmlaq_n_f64(v244, v249, v268.f64[0]), v251, v268, 1);
      v270 = vmlaq_laneq_f64(vmlaq_n_f64(v245, v248, v268.f64[0]), v250, v268, 1);
      v271 = v773[-27];
      v272 = vmlaq_laneq_f64(vmlaq_n_f64(v269, v253, v271.f64[0]), v255, v271, 1);
      v273 = vmlaq_laneq_f64(vmlaq_n_f64(v270, v252, v271.f64[0]), v254, v271, 1);
      v274 = *(float64x2_t *)((char *)&v773[-21] + 8);
      v275 = vmlaq_n_f64(v246, v249, v274.f64[0]);
      v276 = *(float64x2_t *)((char *)&v773[-20] + 8);
      v277 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v275, v251, v274, 1), v253, v276.f64[0]), v255, v276, 1);
      v278 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v247, v248, v274.f64[0]), v250, v274, 1), v252, v276.f64[0]), v254, v276, 1);
      v279 = v15[65];
      v280 = v15[64];
      v282 = *(float64x2_t *)((char *)v15 + 1144);
      v281 = *(float64x2_t *)((char *)v15 + 1160);
      v283 = v15[80];
      v284 = v15[79];
      v286 = *(float64x2_t *)((char *)v15 + 1384);
      v285 = *(float64x2_t *)((char *)v15 + 1400);
      v287 = v773[-41];
      v288 = vmlaq_laneq_f64(vmlaq_n_f64(v260, v280, v287.f64[0]), v282, v287, 1);
      v289 = vmlaq_laneq_f64(vmlaq_n_f64(v261, v279, v287.f64[0]), v281, v287, 1);
      v290 = v773[-40];
      v291 = vmlaq_laneq_f64(vmlaq_n_f64(v288, v284, v290.f64[0]), v286, v290, 1);
      v292 = vmlaq_laneq_f64(vmlaq_n_f64(v289, v283, v290.f64[0]), v285, v290, 1);
      v293 = *(float64x2_t *)((char *)&v773[-34] + 8);
      v294 = vmlaq_laneq_f64(vmlaq_n_f64(v266, v280, v293.f64[0]), v282, v293, 1);
      v295 = vmlaq_laneq_f64(vmlaq_n_f64(v267, v279, v293.f64[0]), v281, v293, 1);
      v296 = *(float64x2_t *)((char *)&v773[-33] + 8);
      v297 = vmlaq_laneq_f64(vmlaq_n_f64(v294, v284, v296.f64[0]), v286, v296, 1);
      v298 = vmlaq_laneq_f64(vmlaq_n_f64(v295, v283, v296.f64[0]), v285, v296, 1);
      v299 = v773[-26];
      v300 = vmlaq_laneq_f64(vmlaq_n_f64(v272, v280, v299.f64[0]), v282, v299, 1);
      v301 = vmlaq_laneq_f64(vmlaq_n_f64(v273, v279, v299.f64[0]), v281, v299, 1);
      v302 = v773[-25];
      v303 = vmlaq_laneq_f64(vmlaq_n_f64(v300, v284, v302.f64[0]), v286, v302, 1);
      v304 = vmlaq_laneq_f64(vmlaq_n_f64(v301, v283, v302.f64[0]), v285, v302, 1);
      v305 = *(float64x2_t *)((char *)&v773[-19] + 8);
      v306 = vmlaq_laneq_f64(vmlaq_n_f64(v277, v280, v305.f64[0]), v282, v305, 1);
      v307 = *(float64x2_t *)((char *)&v773[-18] + 8);
      v308 = vmlaq_laneq_f64(vmlaq_n_f64(v306, v284, v307.f64[0]), v286, v307, 1);
      _Q27 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v278, v279, v305.f64[0]), v281, v305, 1), v283, v307.f64[0]), v285, v307, 1);
      v310 = v15[95];
      v311 = v15[94];
      _Q31 = *(float64x2_t *)((char *)v15 + 1624);
      v312 = *(float64x2_t *)((char *)v15 + 1640);
      v314 = v15[110];
      v315 = v15[109];
      v316 = v773[-39];
      v317 = vmlaq_laneq_f64(vmlaq_n_f64(v291, v311, v316.f64[0]), _Q31, v316, 1);
      v318 = vmlaq_laneq_f64(vmlaq_n_f64(v292, v310, v316.f64[0]), v312, v316, 1);
      v316.f64[0] = v773[-38].f64[0];
      v319 = vmlaq_n_f64(v317, v315, v316.f64[0]);
      v320 = vmlaq_n_f64(v318, v314, v316.f64[0]);
      v321 = *(float64x2_t *)((char *)&v773[-32] + 8);
      v322 = vmlaq_laneq_f64(vmlaq_n_f64(v297, v311, v321.f64[0]), _Q31, v321, 1);
      v323 = vmlaq_laneq_f64(vmlaq_n_f64(v298, v310, v321.f64[0]), v312, v321, 1);
      v321.f64[0] = v773[-31].f64[1];
      v324 = vmlaq_n_f64(v322, v315, v321.f64[0]);
      _Q22 = vmlaq_n_f64(v323, v314, v321.f64[0]);
      v326 = v773[-24];
      v327 = vmlaq_laneq_f64(vmlaq_n_f64(v303, v311, v326.f64[0]), _Q31, v326, 1);
      v328 = vmlaq_laneq_f64(vmlaq_n_f64(v304, v310, v326.f64[0]), v312, v326, 1);
      v326.f64[0] = v773[-23].f64[0];
      _Q23 = vmlaq_n_f64(v327, v315, v326.f64[0]);
      v330 = vmlaq_n_f64(v328, v314, v326.f64[0]);
      v331 = *(float64x2_t *)((char *)&v773[-17] + 8);
      v332 = vmlaq_laneq_f64(vmlaq_n_f64(v308, v311, v331.f64[0]), _Q31, v331, 1);
      v311.f64[0] = v773[-16].f64[1];
      __src[4] = v319;
      __src[5] = v320;
      *(float64x2_t *)((char *)__src + 200) = _Q22;
      *(float64x2_t *)((char *)__src + 184) = v324;
      v14[2] = _Q23;
      v14[3] = v330;
      *(float64x2_t *)((char *)v14 + 168) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q27, v310, v331.f64[0]), v312, v331, 1), v314, v311.f64[0]);
      *(float64x2_t *)((char *)v14 + 152) = vmlaq_n_f64(v332, v315, v311.f64[0]);
      _Q26 = v15[6];
      _Q27.f64[0] = v15[14].f64[1];
      v334 = *(float64x2_t *)((char *)v15 + 216);
      _Q30 = v15[21];
      _Q31.f64[0] = v15[29].f64[1];
      v336 = *(float64x2_t *)((char *)v15 + 456);
      _Q19 = *(float64x2_t *)((char *)&v773[-37] + 8);
      _Q21 = *(float64x2_t *)((char *)&v773[-38] + 8);
      v339 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q24.f64[0]), v334, _Q24, 1), _Q30, _Q1.f64[0]), v336, _Q1, 1);
      __asm
      {
        FMLA            D23, D27, V24.D[1]
        FMLA            D23, D31, V1.D[1]
      }
      v344 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q21.f64[0]), v334, _Q21, 1), _Q30, _Q19.f64[0]), v336, _Q19, 1);
      __asm
      {
        FMLA            D22, D27, V21.D[1]
        FMLA            D22, D31, V19.D[1]
        FMLA            D21, D27, V20.D[1]
      }
      _Q24 = *(float64x2_t *)((char *)&v773[-22] + 8);
      v346 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q20.f64[0]), v334, _Q20, 1), _Q30, _Q4.f64[0]), v336, _Q4, 1);
      __asm { FMLA            D21, D31, V4.D[1] }
      _Q9 = *(float64x2_t *)((char *)&v773[-23] + 8);
      v348 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q9.f64[0]), v334, _Q9, 1), _Q30, _Q24.f64[0]), v336, _Q24, 1);
      __asm
      {
        FMLA            D20, D27, V9.D[1]
        FMLA            D20, D31, V24.D[1]
      }
      v349 = v15[36];
      _Q26.f64[0] = v15[44].f64[1];
      v350 = *(float64x2_t *)((char *)v15 + 696);
      v351 = v15[51];
      _Q30.f64[0] = v15[59].f64[1];
      v352 = *(float64x2_t *)((char *)v15 + 936);
      v353 = vmlaq_laneq_f64(vmlaq_n_f64(v339, v349, _Q2.f64[0]), v350, _Q2, 1);
      __asm { FMLA            D23, D26, V2.D[1] }
      _Q2 = *(float64x2_t *)((char *)&v773[-35] + 8);
      v355 = vmlaq_laneq_f64(vmlaq_n_f64(v353, v351, _Q5.f64[0]), v352, _Q5, 1);
      __asm { FMLA            D23, D30, V5.D[1] }
      _Q5 = *(float64x2_t *)((char *)&v773[-36] + 8);
      v357 = vmlaq_laneq_f64(vmlaq_n_f64(v344, v349, _Q5.f64[0]), v350, _Q5, 1);
      __asm { FMLA            D22, D26, V5.D[1] }
      _Q5 = *(float64x2_t *)((char *)&v773[-20] + 8);
      v359 = vmlaq_laneq_f64(vmlaq_n_f64(v357, v351, _Q2.f64[0]), v352, _Q2, 1);
      __asm { FMLA            D22, D30, V2.D[1] }
      _Q2 = *(float64x2_t *)((char *)&v773[-21] + 8);
      v361 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v346, v349, _Q3.f64[0]), v350, _Q3, 1), v351, _Q18.f64[0]), v352, _Q18, 1);
      __asm
      {
        FMLA            D21, D26, V3.D[1]
        FMLA            D21, D30, V18.D[1]
      }
      v362 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v348, v349, _Q2.f64[0]), v350, _Q2, 1), v351, _Q5.f64[0]), v352, _Q5, 1);
      __asm
      {
        FMLA            D20, D26, V2.D[1]
        FMLA            D20, D30, V5.D[1]
      }
      v363 = v15[66];
      _Q5.f64[0] = v15[74].f64[1];
      v364 = *(float64x2_t *)((char *)v15 + 1176);
      v365 = v15[81];
      _Q26.f64[0] = v15[89].f64[1];
      v366 = *(float64x2_t *)((char *)v15 + 1416);
      _Q28 = *(float64x2_t *)((char *)&v773[-33] + 8);
      _Q29 = *(float64x2_t *)((char *)&v773[-34] + 8);
      _Q30 = *(float64x2_t *)((char *)&v773[-18] + 8);
      _Q31 = *(float64x2_t *)((char *)&v773[-19] + 8);
      v371 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v355, v363, _Q7.f64[0]), v364, _Q7, 1), v365, _Q17.f64[0]), v366, _Q17, 1);
      __asm
      {
        FMLA            D23, D5, V7.D[1]
        FMLA            D23, D26, V17.D[1]
      }
      v372 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v359, v363, _Q29.f64[0]), v364, _Q29, 1), v365, _Q28.f64[0]), v366, _Q28, 1);
      __asm
      {
        FMLA            D22, D5, V29.D[1]
        FMLA            D22, D26, V28.D[1]
      }
      v373 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v361, v363, _Q6.f64[0]), v364, _Q6, 1), v365, _Q16.f64[0]), v366, _Q16, 1);
      __asm
      {
        FMLA            D21, D5, V6.D[1]
        FMLA            D21, D26, V16.D[1]
      }
      v374 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v362, v363, _Q31.f64[0]), v364, _Q31, 1), v365, _Q30.f64[0]), v366, _Q30, 1);
      __asm
      {
        FMLA            D20, D5, V31.D[1]
        FMLA            D20, D26, V30.D[1]
      }
      v375 = v15[96];
      _Q5.f64[0] = v15[104].f64[1];
      v376 = *(float64x2_t *)((char *)v15 + 1656);
      _Q7.f64[0] = v15[112].f64[0];
      v377 = v15[111];
      _Q17.f64[0] = v773[-38].f64[0];
      _Q18 = v773[-39];
      _Q24.f64[0] = v773[-31].f64[1];
      _Q25 = *(float64x2_t *)((char *)&v773[-32] + 8);
      _Q26.f64[0] = v773[-23].f64[0];
      _Q27 = v773[-24];
      _Q28.f64[0] = v773[-16].f64[1];
      _Q29 = *(float64x2_t *)((char *)&v773[-17] + 8);
      __asm
      {
        FMLA            D23, D5, V18.D[1]
        FMLA            D22, D5, V25.D[1]
        FMLA            D21, D5, V27.D[1]
        FMLA            D20, D5, V29.D[1]
      }
      __src[7].f64[0] = _Q23.f64[0] + _Q7.f64[0] * _Q17.f64[0];
      __src[6] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v371, v375, _Q18.f64[0]), v376, _Q18, 1), v377, _Q17.f64[0]);
      __src[14].f64[1] = _Q22.f64[0] + _Q7.f64[0] * _Q24.f64[0];
      *(float64x2_t *)((char *)__src + 216) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v372, v375, _Q25.f64[0]), v376, _Q25, 1), v377, _Q24.f64[0]);
      v14[5].f64[0] = _Q21.f64[0] + _Q7.f64[0] * _Q26.f64[0];
      v14[4] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v373, v375, _Q27.f64[0]), v376, _Q27, 1), v377, _Q26.f64[0]);
      v14[12].f64[1] = _Q20.f64[0] + _Q7.f64[0] * _Q28.f64[0];
      *(float64x2_t *)((char *)v14 + 184) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v374, v375, _Q29.f64[0]), v376, _Q29, 1), v377, _Q28.f64[0]);
      v382 = v15[1];
      v383 = *(float64x2_t *)((char *)v15 + 136);
      v384 = *(float64x2_t *)((char *)v15 + 120);
      v386 = v15[15];
      v385 = v15[16];
      v387 = *(float64x2_t *)((char *)v15 + 376);
      v388 = *(float64x2_t *)((char *)v15 + 360);
      v389 = v773[-14];
      v390 = *(float64x2_t *)((char *)&v773[-4] + 8);
      v391 = v773[-15];
      v392 = *(float64x2_t *)((char *)&v773[-8] + 8);
      v393 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v15, v391.f64[0]), v384, v391, 1), v386, v389.f64[0]), v388, v389, 1);
      v394 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v382, v391.f64[0]), v383, v391, 1), v385, v389.f64[0]), v387, v389, 1);
      v395 = vmlaq_laneq_f64(vmulq_n_f64(*v15, v392.f64[0]), v384, v392, 1);
      _Q20 = v392;
      v396 = *(float64x2_t *)((char *)&v773[-7] + 8);
      v398 = vmlaq_laneq_f64(vmlaq_n_f64(v395, v386, v396.f64[0]), v388, v396, 1);
      v399 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v382, v392.f64[0]), v383, v392, 1), v385, v396.f64[0]), v387, v396, 1);
      v400 = v15[30];
      v401 = v15[31];
      v403 = *(float64x2_t *)((char *)v15 + 600);
      v402 = *(float64x2_t *)((char *)v15 + 616);
      v405 = v15[45];
      v404 = v15[46];
      v407 = *(float64x2_t *)((char *)v15 + 840);
      v406 = *(float64x2_t *)((char *)v15 + 856);
      v408 = v773[-12];
      v409 = v773[-13];
      v410 = *(float64x2_t *)((char *)&v773[-6] + 8);
      v411 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v393, v400, v409.f64[0]), v403, v409, 1), v405, v408.f64[0]), v407, v408, 1);
      v412 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v394, v401, v409.f64[0]), v402, v409, 1), v404, v408.f64[0]), v406, v408, 1);
      v413 = vmlaq_laneq_f64(vmlaq_n_f64(v398, v400, v410.f64[0]), v403, v410, 1);
      _Q4 = v410;
      v415 = *(float64x2_t *)((char *)&v773[-5] + 8);
      v416 = vmlaq_laneq_f64(vmlaq_n_f64(v413, v405, v415.f64[0]), v407, v415, 1);
      v417 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v399, v401, v410.f64[0]), v402, v410, 1), v404, v415.f64[0]), v406, v415, 1);
      v418 = v15[60];
      v419 = v15[61];
      v421 = *(float64x2_t *)((char *)v15 + 1080);
      v420 = *(float64x2_t *)((char *)v15 + 1096);
      v422 = v15[76];
      v423 = v15[75];
      v425 = *(float64x2_t *)((char *)v15 + 1320);
      v424 = *(float64x2_t *)((char *)v15 + 1336);
      v426 = v773[-10];
      v427 = v773[-11];
      v428 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v411, v418, v427.f64[0]), v421, v427, 1), v423, v426.f64[0]), v425, v426, 1);
      v429 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v412, v419, v427.f64[0]), v420, v427, 1), v422, v426.f64[0]), v424, v426, 1);
      v430 = vmlaq_laneq_f64(vmlaq_n_f64(v416, v418, v390.f64[0]), v421, v390, 1);
      _Q5 = v390;
      v432 = *(float64x2_t *)((char *)&v773[-3] + 8);
      v433 = vmlaq_laneq_f64(vmlaq_n_f64(v430, v423, v432.f64[0]), v425, v432, 1);
      v434 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v417, v419, v390.f64[0]), v420, v390, 1), v422, v432.f64[0]), v424, v432, 1);
      v435 = v15[91];
      v436 = v15[90];
      v438 = *(float64x2_t *)((char *)v15 + 1560);
      v437 = *(float64x2_t *)((char *)v15 + 1576);
      v439 = v15[106];
      v440 = v15[105];
      v390.f64[0] = v773[-8].f64[0];
      v441 = v773[-9];
      v426.f64[0] = v773[-1].f64[1];
      v442 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v428, v436, v441.f64[0]), v438, v441, 1), v440, v390.f64[0]);
      v443 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v429, v435, v441.f64[0]), v437, v441, 1), v439, v390.f64[0]);
      _Q3 = *(float64x2_t *)((char *)&v773[-3] + 8);
      v445 = *(float64x2_t *)((char *)&v773[-2] + 8);
      __src[30] = v442;
      __src[31] = v443;
      *(float64x2_t *)((char *)v14 + 328) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v433, v436, v445.f64[0]), v438, v445, 1), v440, v426.f64[0]);
      *(float64x2_t *)((char *)v14 + 344) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v434, v435, v445.f64[0]), v437, v445, 1), v439, v426.f64[0]);
      v447 = v15[2];
      v446 = v15[3];
      v448 = *(float64x2_t *)((char *)v15 + 168);
      v449 = *(float64x2_t *)((char *)v15 + 152);
      v451 = v15[17];
      v450 = v15[18];
      v452 = *(float64x2_t *)((char *)v15 + 408);
      v453 = *(float64x2_t *)((char *)v15 + 392);
      v454 = v773[-14];
      v455 = v773[-15];
      v457 = *(float64x2_t *)((char *)&v773[-8] + 8);
      v456 = *(float64x2_t *)((char *)&v773[-7] + 8);
      v458 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v447, v455.f64[0]), v449, v455, 1), v451, v454.f64[0]), v453, v454, 1);
      v459 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v446, v455.f64[0]), v448, v455, 1), v450, v454.f64[0]), v452, v454, 1);
      v460 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v447, v457.f64[0]), v449, v457, 1), v451, v456.f64[0]), v453, v456, 1);
      v461 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v446, v457.f64[0]), v448, v457, 1), v450, v456.f64[0]), v452, v456, 1);
      v463 = v15[32];
      v462 = v15[33];
      v465 = *(float64x2_t *)((char *)v15 + 632);
      v464 = *(float64x2_t *)((char *)v15 + 648);
      v467 = v15[47];
      v466 = v15[48];
      v469 = *(float64x2_t *)((char *)v15 + 872);
      v468 = *(float64x2_t *)((char *)v15 + 888);
      v470 = v773[-12];
      v471 = v773[-13];
      v473 = *(float64x2_t *)((char *)&v773[-6] + 8);
      v472 = *(float64x2_t *)((char *)&v773[-5] + 8);
      v474 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v458, v463, v471.f64[0]), v465, v471, 1), v467, v470.f64[0]), v469, v470, 1);
      v475 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v459, v462, v471.f64[0]), v464, v471, 1), v466, v470.f64[0]), v468, v470, 1);
      v476 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v460, v463, v473.f64[0]), v465, v473, 1), v467, v472.f64[0]), v469, v472, 1);
      v477 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v461, v462, v473.f64[0]), v464, v473, 1), v466, v472.f64[0]), v468, v472, 1);
      v479 = v15[62];
      v478 = v15[63];
      v481 = *(float64x2_t *)((char *)v15 + 1112);
      v480 = *(float64x2_t *)((char *)v15 + 1128);
      v482 = v15[78];
      v483 = v15[77];
      v485 = *(float64x2_t *)((char *)v15 + 1352);
      v484 = *(float64x2_t *)((char *)v15 + 1368);
      v486 = v773[-10];
      v487 = v773[-11];
      v489 = *(float64x2_t *)((char *)&v773[-4] + 8);
      v488 = *(float64x2_t *)((char *)&v773[-3] + 8);
      v490 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v474, v479, v487.f64[0]), v481, v487, 1), v483, v486.f64[0]), v485, v486, 1);
      v491 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v475, v478, v487.f64[0]), v480, v487, 1), v482, v486.f64[0]), v484, v486, 1);
      v492 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v476, v479, v489.f64[0]), v481, v489, 1), v483, v488.f64[0]), v485, v488, 1);
      v493 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v477, v478, v489.f64[0]), v480, v489, 1), v482, v488.f64[0]), v484, v488, 1);
      v494 = v15[93];
      v495 = v15[92];
      v497 = *(float64x2_t *)((char *)v15 + 1592);
      v496 = *(float64x2_t *)((char *)v15 + 1608);
      v498 = v15[108];
      v499 = v15[107];
      v484.f64[0] = v773[-8].f64[0];
      v500 = v773[-9];
      v486.f64[0] = v773[-1].f64[1];
      v501 = *(float64x2_t *)((char *)&v773[-2] + 8);
      __src[32] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v490, v495, v500.f64[0]), v497, v500, 1), v499, v484.f64[0]);
      __src[33] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v491, v494, v500.f64[0]), v496, v500, 1), v498, v484.f64[0]);
      *(float64x2_t *)((char *)v14 + 360) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v492, v495, v501.f64[0]), v497, v501, 1), v499, v486.f64[0]);
      *(float64x2_t *)((char *)v14 + 376) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v493, v494, v501.f64[0]), v496, v501, 1), v498, v486.f64[0]);
      v503 = v15[4];
      v502 = v15[5];
      v504 = *(float64x2_t *)((char *)v15 + 200);
      v505 = *(float64x2_t *)((char *)v15 + 184);
      v507 = v15[19];
      v506 = v15[20];
      v508 = *(float64x2_t *)((char *)v15 + 440);
      v509 = *(float64x2_t *)((char *)v15 + 424);
      v510 = v773[-14];
      v511 = v773[-15];
      v513 = *(float64x2_t *)((char *)&v773[-8] + 8);
      v512 = *(float64x2_t *)((char *)&v773[-7] + 8);
      v514 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v503, v511.f64[0]), v505, v511, 1), v507, v510.f64[0]), v509, v510, 1);
      v515 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v502, v511.f64[0]), v504, v511, 1), v506, v510.f64[0]), v508, v510, 1);
      v516 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v503, v513.f64[0]), v505, v513, 1), v507, v512.f64[0]), v509, v512, 1);
      v517 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v502, v513.f64[0]), v504, v513, 1), v506, v512.f64[0]), v508, v512, 1);
      v519 = v15[34];
      v518 = v15[35];
      v521 = *(float64x2_t *)((char *)v15 + 664);
      v520 = *(float64x2_t *)((char *)v15 + 680);
      v523 = v15[49];
      v522 = v15[50];
      v525 = *(float64x2_t *)((char *)v15 + 904);
      v524 = *(float64x2_t *)((char *)v15 + 920);
      v526 = v773[-12];
      v527 = v773[-13];
      v529 = *(float64x2_t *)((char *)&v773[-6] + 8);
      v528 = *(float64x2_t *)((char *)&v773[-5] + 8);
      v530 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v514, v519, v527.f64[0]), v521, v527, 1), v523, v526.f64[0]), v525, v526, 1);
      v531 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v515, v518, v527.f64[0]), v520, v527, 1), v522, v526.f64[0]), v524, v526, 1);
      v532 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v516, v519, v529.f64[0]), v521, v529, 1), v523, v528.f64[0]), v525, v528, 1);
      v533 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v517, v518, v529.f64[0]), v520, v529, 1), v522, v528.f64[0]), v524, v528, 1);
      v534 = v15[65];
      v535 = v15[64];
      v537 = *(float64x2_t *)((char *)v15 + 1144);
      v536 = *(float64x2_t *)((char *)v15 + 1160);
      v538 = v15[80];
      v539 = v15[79];
      v541 = *(float64x2_t *)((char *)v15 + 1384);
      v540 = *(float64x2_t *)((char *)v15 + 1400);
      v542 = v773[-10];
      v543 = v773[-11];
      v545 = *(float64x2_t *)((char *)&v773[-4] + 8);
      v544 = *(float64x2_t *)((char *)&v773[-3] + 8);
      _Q24 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v530, v535, v543.f64[0]), v537, v543, 1), v539, v542.f64[0]), v541, v542, 1);
      v547 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v531, v534, v543.f64[0]), v536, v543, 1), v538, v542.f64[0]), v540, v542, 1);
      v548 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v532, v535, v545.f64[0]), v537, v545, 1), v539, v544.f64[0]), v541, v544, 1);
      _Q0 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v533, v534, v545.f64[0]), v536, v545, 1), v538, v544.f64[0]), v540, v544, 1);
      _Q2 = v15[95];
      v551 = v15[94];
      v553 = *(float64x2_t *)((char *)v15 + 1624);
      _Q7 = *(float64x2_t *)((char *)v15 + 1640);
      _Q17 = v15[110];
      v555 = v15[109];
      v540.f64[0] = v773[-8].f64[0];
      v556 = v773[-9];
      v542.f64[0] = v773[-1].f64[1];
      v557 = *(float64x2_t *)((char *)&v773[-2] + 8);
      __src[34] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q24, v551, v556.f64[0]), v553, v556, 1), v555, v540.f64[0]);
      __src[35] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v547, _Q2, v556.f64[0]), _Q7, v556, 1), _Q17, v540.f64[0]);
      *(float64x2_t *)((char *)v14 + 392) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v548, v551, v557.f64[0]), v553, v557, 1), v555, v542.f64[0]);
      *(float64x2_t *)((char *)v14 + 408) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q0, _Q2, v557.f64[0]), _Q7, v557, 1), _Q17, v542.f64[0]);
      v558 = v15[6];
      _Q2.f64[0] = v15[14].f64[1];
      v559 = *(float64x2_t *)((char *)v15 + 216);
      v560 = v15[21];
      _Q17.f64[0] = v15[29].f64[1];
      v561 = *(float64x2_t *)((char *)v15 + 456);
      _Q19 = v773[-14];
      _Q21 = v773[-15];
      _Q22 = *(float64x2_t *)((char *)&v773[-7] + 8);
      v565 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v558, _Q21.f64[0]), v559, _Q21, 1), v560, _Q19.f64[0]), v561, _Q19, 1);
      __asm
      {
        FMLA            D24, D2, V21.D[1]
        FMLA            D24, D17, V19.D[1]
      }
      v566 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v558, _Q20.f64[0]), v559, _Q20, 1), v560, _Q22.f64[0]), v561, _Q22, 1);
      __asm
      {
        FMLA            D0, D2, V20.D[1]
        FMLA            D0, D17, V22.D[1]
      }
      _Q6 = v15[36];
      _Q7.f64[0] = v15[44].f64[1];
      v568 = *(float64x2_t *)((char *)v15 + 696);
      _Q18 = v15[51];
      _Q19.f64[0] = v15[59].f64[1];
      v570 = *(float64x2_t *)((char *)v15 + 936);
      _Q21 = v773[-12];
      _Q22 = v773[-13];
      _Q25 = *(float64x2_t *)((char *)&v773[-5] + 8);
      v574 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v565, _Q6, _Q22.f64[0]), v568, _Q22, 1), _Q18, _Q21.f64[0]), v570, _Q21, 1);
      __asm
      {
        FMLA            D24, D7, V22.D[1]
        FMLA            D24, D19, V21.D[1]
      }
      v575 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v566, _Q6, _Q4.f64[0]), v568, _Q4, 1), _Q18, _Q25.f64[0]), v570, _Q25, 1);
      __asm
      {
        FMLA            D0, D7, V4.D[1]
        FMLA            D0, D19, V25.D[1]
      }
      _Q4 = v15[66];
      _Q6.f64[0] = v15[74].f64[1];
      v577 = *(float64x2_t *)((char *)v15 + 1176);
      v578 = v15[81];
      _Q18.f64[0] = v15[89].f64[1];
      v579 = *(float64x2_t *)((char *)v15 + 1416);
      _Q20 = v773[-10];
      _Q21 = v773[-11];
      v582 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v574, _Q4, _Q21.f64[0]), v577, _Q21, 1), v578, _Q20.f64[0]), v579, _Q20, 1);
      __asm
      {
        FMLA            D24, D6, V21.D[1]
        FMLA            D24, D18, V20.D[1]
      }
      v583 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v575, _Q4, _Q5.f64[0]), v577, _Q5, 1), v578, _Q3.f64[0]), v579, _Q3, 1);
      __asm
      {
        FMLA            D0, D6, V5.D[1]
        FMLA            D0, D18, V3.D[1]
      }
      v584 = v15[96];
      _Q4.f64[0] = v15[104].f64[1];
      v585 = *(float64x2_t *)((char *)v15 + 1656);
      _Q6.f64[0] = v15[112].f64[0];
      v586 = v15[111];
      v568.f64[0] = v773[-8].f64[0];
      _Q17 = v773[-9];
      _Q18.f64[0] = v773[-1].f64[1];
      _Q19 = *(float64x2_t *)((char *)&v773[-2] + 8);
      __asm
      {
        FMLA            D24, D4, V17.D[1]
        FMLA            D0, D4, V19.D[1]
      }
      v14[20].f64[0] = _Q24.f64[0] + _Q6.f64[0] * v568.f64[0];
      v14[19] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v582, v584, _Q17.f64[0]), v585, _Q17, 1), v586, v568.f64[0]);
      v14[27].f64[1] = _Q0.f64[0] + _Q6.f64[0] * _Q18.f64[0];
      *(float64x2_t *)((char *)v14 + 424) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v583, v584, _Q19.f64[0]), v585, _Q19, 1), v586, _Q18.f64[0]);
      break;
    case 1:
      for (i = 0; i != 720; i += 120)
      {
        v590 = *(float64x2_t *)((char *)__src + i + 32);
        v591 = *(float64x2_t *)((char *)__src + i + 48);
        v592 = *(float64x2_t *)((char *)__src + i + 64);
        v593 = *(float64x2_t *)((char *)__src + i + 80);
        v594 = *(float64x2_t *)((char *)__src + i + 96);
        a9.f64[0] = __src[7].f64[i / 8];
        a10.f64[0] = a11[8].f64[0];
        v595 = a11[3];
        v596 = a11[4];
        v597 = a11[5];
        v598 = a11[6];
        v599 = a11[7];
        v809 = vmulq_f64(a9, a10);
        v808 = vmulq_f64(v594, v599);
        v807 = vmulq_f64(v593, v598);
        v805 = vmulq_f64(v591, v596);
        v806 = vmulq_f64(v592, v597);
        v600 = vmulq_f64(v590, v595);
        v601 = *(float64x2_t *)((char *)__src + i);
        v602 = a11[1];
        v803 = vmulq_f64(*(float64x2_t *)((char *)__src + i + 16), a11[2]);
        v804 = v600;
        v802 = vmulq_f64(v601, v602);
        result = (float64x2_t *)memcpy(v810, __src, sizeof(v810));
        v603 = (float64x2_t *)((char *)v810 + i);
        v604 = v803;
        *v603 = v802;
        v603[1] = v604;
        v605 = v805;
        v603[2] = v804;
        v603[3] = v605;
        v606 = v807;
        v603[4] = v806;
        v603[5] = v606;
        v603[6] = v808;
        v603[7].f64[0] = v809.f64[0];
        v607 = v810[44];
        v608 = v810[42];
        __src[43] = v810[43];
        __src[44] = v607;
        v609 = v810[40];
        __src[41] = v810[41];
        __src[42] = v608;
        v610 = v810[38];
        __src[39] = v810[39];
        __src[40] = v609;
        v611 = v810[36];
        __src[37] = v810[37];
        __src[38] = v610;
        v612 = v810[34];
        __src[35] = v810[35];
        __src[36] = v611;
        v613 = v810[32];
        __src[33] = v810[33];
        __src[34] = v612;
        v614 = v810[30];
        __src[31] = v810[31];
        __src[32] = v613;
        v615 = v810[28];
        __src[29] = v810[29];
        __src[30] = v614;
        v616 = v810[26];
        __src[27] = v810[27];
        __src[28] = v615;
        v617 = v810[24];
        __src[25] = v810[25];
        __src[26] = v616;
        v618 = v810[22];
        __src[23] = v810[23];
        __src[24] = v617;
        v619 = v810[20];
        __src[21] = v810[21];
        __src[22] = v618;
        v620 = v810[18];
        __src[19] = v810[19];
        __src[20] = v619;
        v621 = v810[16];
        __src[17] = v810[17];
        __src[18] = v620;
        v622 = v810[14];
        __src[15] = v810[15];
        __src[16] = v621;
        v623 = v810[12];
        __src[13] = v810[13];
        __src[14] = v622;
        v624 = v810[10];
        __src[11] = v810[11];
        __src[12] = v623;
        v625 = v810[8];
        __src[9] = v810[9];
        __src[10] = v624;
        v626 = v810[6];
        __src[7] = v810[7];
        __src[8] = v625;
        v627 = v810[4];
        __src[5] = v810[5];
        __src[6] = v626;
        v628 = v810[2];
        __src[3] = v810[3];
        __src[4] = v627;
        v629 = v810[0];
        __src[1] = v810[1];
        __src[2] = v628;
        *__src = v629;
      }
      break;
    case 2:
      v630 = a11[1].f64[0];
      v632 = __src[29];
      v631 = __src[30];
      v634 = __src[27];
      v633 = __src[28];
      v636 = __src[25];
      v635 = __src[26];
      v638 = __src[23];
      v637 = __src[24];
      v640 = __src[21];
      v639 = __src[22];
      v642 = __src[19];
      v641 = __src[20];
      v644 = __src[17];
      v643 = __src[18];
      v646 = __src[15];
      v645 = __src[16];
      v648 = __src[13];
      v647 = __src[14];
      v649 = __src[11];
      v650 = __src[12];
      v651 = __src[9];
      v652 = __src[10];
      v653 = __src[7];
      v654 = __src[8];
      v655 = __src[5];
      v656 = __src[6];
      v657 = __src[3];
      v658 = __src[4];
      v659 = __src[1];
      v660 = __src[2];
      v809 = vmulq_n_f64(*__src, v630);
      v808 = vmulq_n_f64(v659, v630);
      v807 = vmulq_n_f64(v660, v630);
      v805 = vmulq_n_f64(v658, v630);
      v806 = vmulq_n_f64(v657, v630);
      v803 = vmulq_n_f64(v656, v630);
      v804 = vmulq_n_f64(v655, v630);
      v801 = vmulq_n_f64(v654, v630);
      v802 = vmulq_n_f64(v653, v630);
      v799 = vmulq_n_f64(v652, v630);
      v800 = vmulq_n_f64(v651, v630);
      v797 = vmulq_n_f64(v650, v630);
      v798 = vmulq_n_f64(v649, v630);
      v796 = vmulq_n_f64(v648, v630);
      v661 = vmulq_n_f64(__src[31], v630);
      v662 = vmulq_n_f64(__src[32], v630);
      v663 = vmulq_n_f64(__src[33], v630);
      v664 = vmulq_n_f64(__src[34], v630);
      v665 = vmulq_n_f64(__src[35], v630);
      v666 = vmulq_n_f64(__src[36], v630);
      v667 = vmulq_n_f64(__src[37], v630);
      v668 = vmulq_n_f64(__src[38], v630);
      v669 = vmulq_n_f64(__src[39], v630);
      v670 = vmulq_n_f64(__src[40], v630);
      v671 = vmulq_n_f64(__src[41], v630);
      v672 = vmulq_n_f64(__src[42], v630);
      v673 = __src[44];
      __src[43] = vmulq_n_f64(__src[43], v630);
      __src[44] = vmulq_n_f64(v673, v630);
      __src[41] = v671;
      __src[42] = v672;
      __src[39] = v669;
      __src[40] = v670;
      __src[37] = v667;
      __src[38] = v668;
      __src[35] = v665;
      __src[36] = v666;
      __src[33] = v663;
      __src[34] = v664;
      __src[31] = v661;
      __src[32] = v662;
      __src[29] = vmulq_n_f64(v632, v630);
      __src[30] = vmulq_n_f64(v631, v630);
      __src[27] = vmulq_n_f64(v634, v630);
      __src[28] = vmulq_n_f64(v633, v630);
      __src[25] = vmulq_n_f64(v636, v630);
      __src[26] = vmulq_n_f64(v635, v630);
      __src[23] = vmulq_n_f64(v638, v630);
      __src[24] = vmulq_n_f64(v637, v630);
      __src[21] = vmulq_n_f64(v640, v630);
      __src[22] = vmulq_n_f64(v639, v630);
      __src[19] = vmulq_n_f64(v642, v630);
      __src[20] = vmulq_n_f64(v641, v630);
      __src[17] = vmulq_n_f64(v644, v630);
      __src[18] = vmulq_n_f64(v643, v630);
      __src[15] = vmulq_n_f64(v646, v630);
      __src[16] = vmulq_n_f64(v645, v630);
      __src[13] = v796;
      __src[14] = vmulq_n_f64(v647, v630);
      __src[12] = v797;
      __src[11] = v798;
      __src[10] = v799;
      __src[9] = v800;
      __src[8] = v801;
      __src[7] = v802;
      __src[6] = v803;
      __src[5] = v804;
      __src[4] = v805;
      __src[3] = v806;
      __src[2] = v807;
      __src[1] = v808;
      *__src = v809;
      break;
    case 4:
      v674 = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&a11->f64[0] + 56))(v810, a11);
      MEMORY[0x24BDAC7A8](v674);
      memcpy(&v773[68], __src, 0x2D0uLL);
      v800 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[0], v773[68].f64[0]), *(float64x2_t *)((char *)&v810[7] + 8), v773[68], 1), v810[15], v773[69].f64[0]),
                                     *(float64x2_t *)((char *)&v810[22] + 8),
                                     v773[69],
                                     1),
                                   v810[30],
                                   v773[70].f64[0]),
                                 *(float64x2_t *)((char *)&v810[37] + 8),
                                 v773[70],
                                 1),
                               v811,
                               v773[71].f64[0]),
                             v818,
                             v773[71],
                             1),
                           v826,
                           v773[72].f64[0]),
                         v833,
                         v773[72],
                         1),
                       v841,
                       v773[73].f64[0]),
                     v848,
                     v773[73],
                     1),
                   v856,
                   v773[74].f64[0]),
                 v863,
                 v773[74],
                 1),
               v871,
               v773[75].f64[0]);
      v801 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[1], v773[75].f64[1]), *(float64x2_t *)((char *)&v810[8] + 8), *(float64x2_t *)((char *)&v773[75] + 8), 1), v810[16], v773[76].f64[1]),
                                     *(float64x2_t *)((char *)&v810[23] + 8),
                                     *(float64x2_t *)((char *)&v773[76] + 8),
                                     1),
                                   v810[31],
                                   v773[77].f64[1]),
                                 *(float64x2_t *)((char *)&v810[38] + 8),
                                 *(float64x2_t *)((char *)&v773[77] + 8),
                                 1),
                               v812,
                               v773[78].f64[1]),
                             v819,
                             *(float64x2_t *)((char *)&v773[78] + 8),
                             1),
                           v827,
                           v773[79].f64[1]),
                         v834,
                         *(float64x2_t *)((char *)&v773[79] + 8),
                         1),
                       v842,
                       v773[80].f64[1]),
                     v849,
                     *(float64x2_t *)((char *)&v773[80] + 8),
                     1),
                   v857,
                   v773[81].f64[1]),
                 v864,
                 *(float64x2_t *)((char *)&v773[81] + 8),
                 1),
               v872,
               v773[82].f64[1]);
      v802 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[0], v773[83].f64[0]), *(float64x2_t *)((char *)&v810[7] + 8), v773[83], 1), v810[15], v773[84].f64[0]),
                                     *(float64x2_t *)((char *)&v810[22] + 8),
                                     v773[84],
                                     1),
                                   v810[30],
                                   v773[85].f64[0]),
                                 *(float64x2_t *)((char *)&v810[37] + 8),
                                 v773[85],
                                 1),
                               v811,
                               v773[86].f64[0]),
                             v818,
                             v773[86],
                             1),
                           v826,
                           v773[87].f64[0]),
                         v833,
                         v773[87],
                         1),
                       v841,
                       v773[88].f64[0]),
                     v848,
                     v773[88],
                     1),
                   v856,
                   v773[89].f64[0]),
                 v863,
                 v773[89],
                 1),
               v871,
               v773[90].f64[0]);
      v803 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[0], v773[75].f64[1]), *(float64x2_t *)((char *)&v810[7] + 8), *(float64x2_t *)((char *)&v773[75] + 8), 1), v810[15], v773[76].f64[1]),
                                     *(float64x2_t *)((char *)&v810[22] + 8),
                                     *(float64x2_t *)((char *)&v773[76] + 8),
                                     1),
                                   v810[30],
                                   v773[77].f64[1]),
                                 *(float64x2_t *)((char *)&v810[37] + 8),
                                 *(float64x2_t *)((char *)&v773[77] + 8),
                                 1),
                               v811,
                               v773[78].f64[1]),
                             v818,
                             *(float64x2_t *)((char *)&v773[78] + 8),
                             1),
                           v826,
                           v773[79].f64[1]),
                         v833,
                         *(float64x2_t *)((char *)&v773[79] + 8),
                         1),
                       v841,
                       v773[80].f64[1]),
                     v848,
                     *(float64x2_t *)((char *)&v773[80] + 8),
                     1),
                   v856,
                   v773[81].f64[1]),
                 v863,
                 *(float64x2_t *)((char *)&v773[81] + 8),
                 1),
               v871,
               v773[82].f64[1]);
      v798 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[1], v773[68].f64[0]), *(float64x2_t *)((char *)&v810[8] + 8), v773[68], 1), v810[16], v773[69].f64[0]),
                                     *(float64x2_t *)((char *)&v810[23] + 8),
                                     v773[69],
                                     1),
                                   v810[31],
                                   v773[70].f64[0]),
                                 *(float64x2_t *)((char *)&v810[38] + 8),
                                 v773[70],
                                 1),
                               v812,
                               v773[71].f64[0]),
                             v819,
                             v773[71],
                             1),
                           v827,
                           v773[72].f64[0]),
                         v834,
                         v773[72],
                         1),
                       v842,
                       v773[73].f64[0]),
                     v849,
                     v773[73],
                     1),
                   v857,
                   v773[74].f64[0]),
                 v864,
                 v773[74],
                 1),
               v872,
               v773[75].f64[0]);
      v799 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[1], v773[83].f64[0]), *(float64x2_t *)((char *)&v810[8] + 8), v773[83], 1), v810[16], v773[84].f64[0]),
                                     *(float64x2_t *)((char *)&v810[23] + 8),
                                     v773[84],
                                     1),
                                   v810[31],
                                   v773[85].f64[0]),
                                 *(float64x2_t *)((char *)&v810[38] + 8),
                                 v773[85],
                                 1),
                               v812,
                               v773[86].f64[0]),
                             v819,
                             v773[86],
                             1),
                           v827,
                           v773[87].f64[0]),
                         v834,
                         v773[87],
                         1),
                       v842,
                       v773[88].f64[0]),
                     v849,
                     v773[88],
                     1),
                   v857,
                   v773[89].f64[0]),
                 v864,
                 v773[89],
                 1),
               v872,
               v773[90].f64[0]);
      v796 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[1], v773[90].f64[1]), *(float64x2_t *)((char *)&v810[8] + 8), *(float64x2_t *)((char *)&v773[90] + 8), 1), v810[16], v773[91].f64[1]),
                                     *(float64x2_t *)((char *)&v810[23] + 8),
                                     *(float64x2_t *)((char *)&v773[91] + 8),
                                     1),
                                   v810[31],
                                   v773[92].f64[1]),
                                 *(float64x2_t *)((char *)&v810[38] + 8),
                                 *(float64x2_t *)((char *)&v773[92] + 8),
                                 1),
                               v812,
                               v773[93].f64[1]),
                             v819,
                             *(float64x2_t *)((char *)&v773[93] + 8),
                             1),
                           v827,
                           v773[94].f64[1]),
                         v834,
                         *(float64x2_t *)((char *)&v773[94] + 8),
                         1),
                       v842,
                       v773[95].f64[1]),
                     v849,
                     *(float64x2_t *)((char *)&v773[95] + 8),
                     1),
                   v857,
                   v773[96].f64[1]),
                 v864,
                 *(float64x2_t *)((char *)&v773[96] + 8),
                 1),
               v872,
               v773[97].f64[1]);
      v797 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[0], v773[90].f64[1]), *(float64x2_t *)((char *)&v810[7] + 8), *(float64x2_t *)((char *)&v773[90] + 8), 1), v810[15], v773[91].f64[1]),
                                     *(float64x2_t *)((char *)&v810[22] + 8),
                                     *(float64x2_t *)((char *)&v773[91] + 8),
                                     1),
                                   v810[30],
                                   v773[92].f64[1]),
                                 *(float64x2_t *)((char *)&v810[37] + 8),
                                 *(float64x2_t *)((char *)&v773[92] + 8),
                                 1),
                               v811,
                               v773[93].f64[1]),
                             v818,
                             *(float64x2_t *)((char *)&v773[93] + 8),
                             1),
                           v826,
                           v773[94].f64[1]),
                         v833,
                         *(float64x2_t *)((char *)&v773[94] + 8),
                         1),
                       v841,
                       v773[95].f64[1]),
                     v848,
                     *(float64x2_t *)((char *)&v773[95] + 8),
                     1),
                   v856,
                   v773[96].f64[1]),
                 v863,
                 *(float64x2_t *)((char *)&v773[96] + 8),
                 1),
               v871,
               v773[97].f64[1]);
      v788 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[2], v773[68].f64[0]), *(float64x2_t *)((char *)&v810[9] + 8), v773[68], 1), v810[17], v773[69].f64[0]),
                                     *(float64x2_t *)((char *)&v810[24] + 8),
                                     v773[69],
                                     1),
                                   v810[32],
                                   v773[70].f64[0]),
                                 *(float64x2_t *)((char *)&v810[39] + 8),
                                 v773[70],
                                 1),
                               v813,
                               v773[71].f64[0]),
                             v820,
                             v773[71],
                             1),
                           v828,
                           v773[72].f64[0]),
                         v835,
                         v773[72],
                         1),
                       v843,
                       v773[73].f64[0]),
                     v850,
                     v773[73],
                     1),
                   v858,
                   v773[74].f64[0]),
                 v865,
                 v773[74],
                 1),
               v873,
               v773[75].f64[0]);
      v675 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[3], v773[68].f64[0]), *(float64x2_t *)((char *)&v810[10] + 8), v773[68], 1), v810[18], v773[69].f64[0]),
                                     *(float64x2_t *)((char *)&v810[25] + 8),
                                     v773[69],
                                     1),
                                   v810[33],
                                   v773[70].f64[0]),
                                 *(float64x2_t *)((char *)&v810[40] + 8),
                                 v773[70],
                                 1),
                               v814,
                               v773[71].f64[0]),
                             v821,
                             v773[71],
                             1),
                           v829,
                           v773[72].f64[0]),
                         v836,
                         v773[72],
                         1),
                       v844,
                       v773[73].f64[0]),
                     v851,
                     v773[73],
                     1),
                   v859,
                   v773[74].f64[0]),
                 v866,
                 v773[74],
                 1),
               v874,
               v773[75].f64[0]);
      v676 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[2], v773[75].f64[1]), *(float64x2_t *)((char *)&v810[9] + 8), *(float64x2_t *)((char *)&v773[75] + 8), 1), v810[17], v773[76].f64[1]),
                                     *(float64x2_t *)((char *)&v810[24] + 8),
                                     *(float64x2_t *)((char *)&v773[76] + 8),
                                     1),
                                   v810[32],
                                   v773[77].f64[1]),
                                 *(float64x2_t *)((char *)&v810[39] + 8),
                                 *(float64x2_t *)((char *)&v773[77] + 8),
                                 1),
                               v813,
                               v773[78].f64[1]),
                             v820,
                             *(float64x2_t *)((char *)&v773[78] + 8),
                             1),
                           v828,
                           v773[79].f64[1]),
                         v835,
                         *(float64x2_t *)((char *)&v773[79] + 8),
                         1),
                       v843,
                       v773[80].f64[1]),
                     v850,
                     *(float64x2_t *)((char *)&v773[80] + 8),
                     1),
                   v858,
                   v773[81].f64[1]),
                 v865,
                 *(float64x2_t *)((char *)&v773[81] + 8),
                 1),
               v873,
               v773[82].f64[1]);
      v677 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[3], v773[75].f64[1]), *(float64x2_t *)((char *)&v810[10] + 8), *(float64x2_t *)((char *)&v773[75] + 8), 1), v810[18], v773[76].f64[1]),
                                     *(float64x2_t *)((char *)&v810[25] + 8),
                                     *(float64x2_t *)((char *)&v773[76] + 8),
                                     1),
                                   v810[33],
                                   v773[77].f64[1]),
                                 *(float64x2_t *)((char *)&v810[40] + 8),
                                 *(float64x2_t *)((char *)&v773[77] + 8),
                                 1),
                               v814,
                               v773[78].f64[1]),
                             v821,
                             *(float64x2_t *)((char *)&v773[78] + 8),
                             1),
                           v829,
                           v773[79].f64[1]),
                         v836,
                         *(float64x2_t *)((char *)&v773[79] + 8),
                         1),
                       v844,
                       v773[80].f64[1]),
                     v851,
                     *(float64x2_t *)((char *)&v773[80] + 8),
                     1),
                   v859,
                   v773[81].f64[1]),
                 v866,
                 *(float64x2_t *)((char *)&v773[81] + 8),
                 1),
               v874,
               v773[82].f64[1]);
      v678 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[2], v773[83].f64[0]), *(float64x2_t *)((char *)&v810[9] + 8), v773[83], 1), v810[17], v773[84].f64[0]),
                                     *(float64x2_t *)((char *)&v810[24] + 8),
                                     v773[84],
                                     1),
                                   v810[32],
                                   v773[85].f64[0]),
                                 *(float64x2_t *)((char *)&v810[39] + 8),
                                 v773[85],
                                 1),
                               v813,
                               v773[86].f64[0]),
                             v820,
                             v773[86],
                             1),
                           v828,
                           v773[87].f64[0]),
                         v835,
                         v773[87],
                         1),
                       v843,
                       v773[88].f64[0]),
                     v850,
                     v773[88],
                     1),
                   v858,
                   v773[89].f64[0]),
                 v865,
                 v773[89],
                 1),
               v873,
               v773[90].f64[0]);
      v679 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[3], v773[83].f64[0]), *(float64x2_t *)((char *)&v810[10] + 8), v773[83], 1), v810[18], v773[84].f64[0]),
                                     *(float64x2_t *)((char *)&v810[25] + 8),
                                     v773[84],
                                     1),
                                   v810[33],
                                   v773[85].f64[0]),
                                 *(float64x2_t *)((char *)&v810[40] + 8),
                                 v773[85],
                                 1),
                               v814,
                               v773[86].f64[0]),
                             v821,
                             v773[86],
                             1),
                           v829,
                           v773[87].f64[0]),
                         v836,
                         v773[87],
                         1),
                       v844,
                       v773[88].f64[0]),
                     v851,
                     v773[88],
                     1),
                   v859,
                   v773[89].f64[0]),
                 v866,
                 v773[89],
                 1),
               v874,
               v773[90].f64[0]);
      v680 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[2], v773[90].f64[1]), *(float64x2_t *)((char *)&v810[9] + 8), *(float64x2_t *)((char *)&v773[90] + 8), 1), v810[17], v773[91].f64[1]),
                                     *(float64x2_t *)((char *)&v810[24] + 8),
                                     *(float64x2_t *)((char *)&v773[91] + 8),
                                     1),
                                   v810[32],
                                   v773[92].f64[1]),
                                 *(float64x2_t *)((char *)&v810[39] + 8),
                                 *(float64x2_t *)((char *)&v773[92] + 8),
                                 1),
                               v813,
                               v773[93].f64[1]),
                             v820,
                             *(float64x2_t *)((char *)&v773[93] + 8),
                             1),
                           v828,
                           v773[94].f64[1]),
                         v835,
                         *(float64x2_t *)((char *)&v773[94] + 8),
                         1),
                       v843,
                       v773[95].f64[1]),
                     v850,
                     *(float64x2_t *)((char *)&v773[95] + 8),
                     1),
                   v858,
                   v773[96].f64[1]),
                 v865,
                 *(float64x2_t *)((char *)&v773[96] + 8),
                 1),
               v873,
               v773[97].f64[1]);
      v681 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[3], v773[90].f64[1]), *(float64x2_t *)((char *)&v810[10] + 8), *(float64x2_t *)((char *)&v773[90] + 8), 1), v810[18], v773[91].f64[1]),
                                     *(float64x2_t *)((char *)&v810[25] + 8),
                                     *(float64x2_t *)((char *)&v773[91] + 8),
                                     1),
                                   v810[33],
                                   v773[92].f64[1]),
                                 *(float64x2_t *)((char *)&v810[40] + 8),
                                 *(float64x2_t *)((char *)&v773[92] + 8),
                                 1),
                               v814,
                               v773[93].f64[1]),
                             v821,
                             *(float64x2_t *)((char *)&v773[93] + 8),
                             1),
                           v829,
                           v773[94].f64[1]),
                         v836,
                         *(float64x2_t *)((char *)&v773[94] + 8),
                         1),
                       v844,
                       v773[95].f64[1]),
                     v851,
                     *(float64x2_t *)((char *)&v773[95] + 8),
                     1),
                   v859,
                   v773[96].f64[1]),
                 v866,
                 *(float64x2_t *)((char *)&v773[96] + 8),
                 1),
               v874,
               v773[97].f64[1]);
      v786 = v810[5];
      v787 = v810[4];
      v785 = v810[19];
      result = (float64x2_t *)&v810[41].f64[1];
      v783 = v810[34];
      v784 = v810[35];
      v782 = *(float64x2_t *)((char *)&v810[41] + 8);
      v780 = v822;
      v781 = v815;
      v779 = v837;
      v777 = v852;
      v778 = v845;
      v776 = v867;
      v682 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[4], v773[68].f64[0]), *(float64x2_t *)((char *)&v810[11] + 8), v773[68], 1), v810[19], v773[69].f64[0]),
                                     *(float64x2_t *)((char *)&v810[26] + 8),
                                     v773[69],
                                     1),
                                   v810[34],
                                   v773[70].f64[0]),
                                 *(float64x2_t *)((char *)&v810[41] + 8),
                                 v773[70],
                                 1),
                               v815,
                               v773[71].f64[0]),
                             v822,
                             v773[71],
                             1),
                           v830,
                           v773[72].f64[0]),
                         v837,
                         v773[72],
                         1),
                       v845,
                       v773[73].f64[0]),
                     v852,
                     v773[73],
                     1),
                   v860,
                   v773[74].f64[0]),
                 v867,
                 v773[74],
                 1),
               v875,
               v773[75].f64[0]);
      v683 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[5], v773[68].f64[0]), *(float64x2_t *)((char *)&v810[12] + 8), v773[68], 1), v810[20], v773[69].f64[0]),
                                     *(float64x2_t *)((char *)&v810[27] + 8),
                                     v773[69],
                                     1),
                                   v810[35],
                                   v773[70].f64[0]),
                                 *(float64x2_t *)((char *)&v810[42] + 8),
                                 v773[70],
                                 1),
                               v816,
                               v773[71].f64[0]),
                             v823,
                             v773[71],
                             1),
                           v831,
                           v773[72].f64[0]),
                         v838,
                         v773[72],
                         1),
                       v846,
                       v773[73].f64[0]),
                     v853,
                     v773[73],
                     1),
                   v861,
                   v773[74].f64[0]),
                 v868,
                 v773[74],
                 1),
               v876,
               v773[75].f64[0]);
      v684 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[4], v773[75].f64[1]), *(float64x2_t *)((char *)&v810[11] + 8), *(float64x2_t *)((char *)&v773[75] + 8), 1), v810[19], v773[76].f64[1]),
                                     *(float64x2_t *)((char *)&v810[26] + 8),
                                     *(float64x2_t *)((char *)&v773[76] + 8),
                                     1),
                                   v810[34],
                                   v773[77].f64[1]),
                                 *(float64x2_t *)((char *)&v810[41] + 8),
                                 *(float64x2_t *)((char *)&v773[77] + 8),
                                 1),
                               v815,
                               v773[78].f64[1]),
                             v822,
                             *(float64x2_t *)((char *)&v773[78] + 8),
                             1),
                           v830,
                           v773[79].f64[1]),
                         v837,
                         *(float64x2_t *)((char *)&v773[79] + 8),
                         1),
                       v845,
                       v773[80].f64[1]),
                     v852,
                     *(float64x2_t *)((char *)&v773[80] + 8),
                     1),
                   v860,
                   v773[81].f64[1]),
                 v867,
                 *(float64x2_t *)((char *)&v773[81] + 8),
                 1),
               v875,
               v773[82].f64[1]);
      v685 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[5], v773[75].f64[1]), *(float64x2_t *)((char *)&v810[12] + 8), *(float64x2_t *)((char *)&v773[75] + 8), 1), v810[20], v773[76].f64[1]),
                                     *(float64x2_t *)((char *)&v810[27] + 8),
                                     *(float64x2_t *)((char *)&v773[76] + 8),
                                     1),
                                   v810[35],
                                   v773[77].f64[1]),
                                 *(float64x2_t *)((char *)&v810[42] + 8),
                                 *(float64x2_t *)((char *)&v773[77] + 8),
                                 1),
                               v816,
                               v773[78].f64[1]),
                             v823,
                             *(float64x2_t *)((char *)&v773[78] + 8),
                             1),
                           v831,
                           v773[79].f64[1]),
                         v838,
                         *(float64x2_t *)((char *)&v773[79] + 8),
                         1),
                       v846,
                       v773[80].f64[1]),
                     v853,
                     *(float64x2_t *)((char *)&v773[80] + 8),
                     1),
                   v861,
                   v773[81].f64[1]),
                 v868,
                 *(float64x2_t *)((char *)&v773[81] + 8),
                 1),
               v876,
               v773[82].f64[1]);
      v686 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[4], v773[83].f64[0]), *(float64x2_t *)((char *)&v810[11] + 8), v773[83], 1), v810[19], v773[84].f64[0]),
                                     *(float64x2_t *)((char *)&v810[26] + 8),
                                     v773[84],
                                     1),
                                   v810[34],
                                   v773[85].f64[0]),
                                 *(float64x2_t *)((char *)&v810[41] + 8),
                                 v773[85],
                                 1),
                               v815,
                               v773[86].f64[0]),
                             v822,
                             v773[86],
                             1),
                           v830,
                           v773[87].f64[0]),
                         v837,
                         v773[87],
                         1),
                       v845,
                       v773[88].f64[0]),
                     v852,
                     v773[88],
                     1),
                   v860,
                   v773[89].f64[0]),
                 v867,
                 v773[89],
                 1),
               v875,
               v773[90].f64[0]);
      v687 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[5], v773[83].f64[0]), *(float64x2_t *)((char *)&v810[12] + 8), v773[83], 1), v810[20], v773[84].f64[0]),
                                     *(float64x2_t *)((char *)&v810[27] + 8),
                                     v773[84],
                                     1),
                                   v810[35],
                                   v773[85].f64[0]),
                                 *(float64x2_t *)((char *)&v810[42] + 8),
                                 v773[85],
                                 1),
                               v816,
                               v773[86].f64[0]),
                             v823,
                             v773[86],
                             1),
                           v831,
                           v773[87].f64[0]),
                         v838,
                         v773[87],
                         1),
                       v846,
                       v773[88].f64[0]),
                     v853,
                     v773[88],
                     1),
                   v861,
                   v773[89].f64[0]),
                 v868,
                 v773[89],
                 1),
               v876,
               v773[90].f64[0]);
      v688 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[4], v773[90].f64[1]), *(float64x2_t *)((char *)&v810[11] + 8), *(float64x2_t *)((char *)&v773[90] + 8), 1), v810[19], v773[91].f64[1]),
                                     *(float64x2_t *)((char *)&v810[26] + 8),
                                     *(float64x2_t *)((char *)&v773[91] + 8),
                                     1),
                                   v810[34],
                                   v773[92].f64[1]),
                                 *(float64x2_t *)((char *)&v810[41] + 8),
                                 *(float64x2_t *)((char *)&v773[92] + 8),
                                 1),
                               v815,
                               v773[93].f64[1]),
                             v822,
                             *(float64x2_t *)((char *)&v773[93] + 8),
                             1),
                           v830,
                           v773[94].f64[1]),
                         v837,
                         *(float64x2_t *)((char *)&v773[94] + 8),
                         1),
                       v845,
                       v773[95].f64[1]),
                     v852,
                     *(float64x2_t *)((char *)&v773[95] + 8),
                     1),
                   v860,
                   v773[96].f64[1]),
                 v867,
                 *(float64x2_t *)((char *)&v773[96] + 8),
                 1),
               v875,
               v773[97].f64[1]);
      v689 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[5], v773[90].f64[1]), *(float64x2_t *)((char *)&v810[12] + 8), *(float64x2_t *)((char *)&v773[90] + 8), 1), v810[20], v773[91].f64[1]),
                                     *(float64x2_t *)((char *)&v810[27] + 8),
                                     *(float64x2_t *)((char *)&v773[91] + 8),
                                     1),
                                   v810[35],
                                   v773[92].f64[1]),
                                 *(float64x2_t *)((char *)&v810[42] + 8),
                                 *(float64x2_t *)((char *)&v773[92] + 8),
                                 1),
                               v816,
                               v773[93].f64[1]),
                             v823,
                             *(float64x2_t *)((char *)&v773[93] + 8),
                             1),
                           v831,
                           v773[94].f64[1]),
                         v838,
                         *(float64x2_t *)((char *)&v773[94] + 8),
                         1),
                       v846,
                       v773[95].f64[1]),
                     v853,
                     *(float64x2_t *)((char *)&v773[95] + 8),
                     1),
                   v861,
                   v773[96].f64[1]),
                 v868,
                 *(float64x2_t *)((char *)&v773[96] + 8),
                 1),
               v876,
               v773[97].f64[1]);
      v775 = v810[6];
      _V4.D[1] = v773[83].f64[1];
      _V1.D[1] = v773[68].f64[1];
      _D5 = v810[14].f64[1];
      v774 = v810[14].f64[1];
      __asm { FMLA            D2, D5, V1.D[1] }
      _V1.D[1] = v773[76].f64[0];
      __asm
      {
        FMLA            D3, D5, V1.D[1]
        FMLA            D1, D5, V4.D[1]
      }
      _V4.D[1] = v773[91].f64[0];
      __asm { FMLA            D0, D5, V4.D[1] }
      v795 = v810[20];
      _V4.D[1] = v773[69].f64[1];
      _D5 = v810[29].f64[1];
      __asm { FMLA            D2, D5, V4.D[1] }
      _V4.D[1] = v773[77].f64[0];
      __asm { FMLA            D3, D5, V4.D[1] }
      _V4.D[1] = v773[84].f64[1];
      __asm { FMLA            D1, D5, V4.D[1] }
      _V4.D[1] = v773[92].f64[0];
      __asm { FMLA            D0, D5, V4.D[1] }
      _V18.D[1] = v773[70].f64[1];
      _D7 = v810[44].f64[1];
      __asm { FMLA            D2, D7, V18.D[1] }
      _V18.D[1] = v773[78].f64[0];
      __asm { FMLA            D3, D7, V18.D[1] }
      _V18.D[1] = v773[85].f64[1];
      __asm { FMLA            D1, D7, V18.D[1] }
      _V18.D[1] = v773[93].f64[0];
      __asm { FMLA            D0, D7, V18.D[1] }
      v794 = v816;
      _V18.D[1] = v773[71].f64[1];
      _D7 = v825;
      __asm { FMLA            D2, D7, V18.D[1] }
      _V18.D[1] = v773[79].f64[0];
      __asm { FMLA            D3, D7, V18.D[1] }
      _V18.D[1] = v773[86].f64[1];
      __asm { FMLA            D1, D7, V18.D[1] }
      _V18.D[1] = v773[94].f64[0];
      __asm { FMLA            D0, D7, V18.D[1] }
      _V18.D[1] = v773[72].f64[1];
      _D7 = v840;
      __asm { FMLA            D2, D7, V18.D[1] }
      _V18.D[1] = v773[80].f64[0];
      __asm { FMLA            D3, D7, V18.D[1] }
      _V18.D[1] = v773[87].f64[1];
      __asm { FMLA            D1, D7, V18.D[1] }
      _V18.D[1] = v773[95].f64[0];
      __asm { FMLA            D0, D7, V18.D[1] }
      v793 = v846;
      _V18.D[1] = v773[73].f64[1];
      _D7 = v855;
      __asm { FMLA            D2, D7, V18.D[1] }
      _V18.D[1] = v773[81].f64[0];
      __asm { FMLA            D3, D7, V18.D[1] }
      _V18.D[1] = v773[88].f64[1];
      __asm { FMLA            D1, D7, V18.D[1] }
      _V18.D[1] = v773[96].f64[0];
      __asm { FMLA            D0, D7, V18.D[1] }
      _V5.D[1] = v773[74].f64[1];
      _D18 = v870;
      __asm { FMLA            D2, D18, V5.D[1] }
      _V5.D[1] = v773[82].f64[0];
      __asm { FMLA            D3, D18, V5.D[1] }
      _V5.D[1] = v773[89].f64[1];
      __asm { FMLA            D1, D18, V5.D[1] }
      _V5.D[1] = v773[97].f64[0];
      __asm { FMLA            D0, D18, V5.D[1] }
      _Q20 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[6], v773[68].f64[0]), *(float64x2_t *)((char *)&v810[13] + 8), v773[68], 1), v810[21], v773[69].f64[0]),
                                     *(float64x2_t *)((char *)&v810[28] + 8),
                                     v773[69],
                                     1),
                                   v810[36],
                                   v773[70].f64[0]),
                                 *(float64x2_t *)((char *)&v810[43] + 8),
                                 v773[70],
                                 1),
                               v817,
                               v773[71].f64[0]),
                             v824,
                             v773[71],
                             1),
                           v832,
                           v773[72].f64[0]),
                         v839,
                         v773[72],
                         1),
                       v847,
                       v773[73].f64[0]),
                     v854,
                     v773[73],
                     1),
                   v862,
                   v773[74].f64[0]),
                 v869,
                 v773[74],
                 1),
               v877,
               v773[75].f64[0]);
      v792 = _D2 + v878 * v773[75].f64[0];
      _Q19 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[6], v773[75].f64[1]), *(float64x2_t *)((char *)&v810[13] + 8), *(float64x2_t *)((char *)&v773[75] + 8), 1), v810[21], v773[76].f64[1]),
                                     *(float64x2_t *)((char *)&v810[28] + 8),
                                     *(float64x2_t *)((char *)&v773[76] + 8),
                                     1),
                                   v810[36],
                                   v773[77].f64[1]),
                                 *(float64x2_t *)((char *)&v810[43] + 8),
                                 *(float64x2_t *)((char *)&v773[77] + 8),
                                 1),
                               v817,
                               v773[78].f64[1]),
                             v824,
                             *(float64x2_t *)((char *)&v773[78] + 8),
                             1),
                           v832,
                           v773[79].f64[1]),
                         v839,
                         *(float64x2_t *)((char *)&v773[79] + 8),
                         1),
                       v847,
                       v773[80].f64[1]),
                     v854,
                     *(float64x2_t *)((char *)&v773[80] + 8),
                     1),
                   v862,
                   v773[81].f64[1]),
                 v869,
                 *(float64x2_t *)((char *)&v773[81] + 8),
                 1),
               v877,
               v773[82].f64[1]);
      v791 = _D3 + v878 * v773[82].f64[1];
      _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[6], v773[83].f64[0]), *(float64x2_t *)((char *)&v810[13] + 8), v773[83], 1), v810[21], v773[84].f64[0]),
                                     *(float64x2_t *)((char *)&v810[28] + 8),
                                     v773[84],
                                     1),
                                   v810[36],
                                   v773[85].f64[0]),
                                 *(float64x2_t *)((char *)&v810[43] + 8),
                                 v773[85],
                                 1),
                               v817,
                               v773[86].f64[0]),
                             v824,
                             v773[86],
                             1),
                           v832,
                           v773[87].f64[0]),
                         v839,
                         v773[87],
                         1),
                       v847,
                       v773[88].f64[0]),
                     v854,
                     v773[88],
                     1),
                   v862,
                   v773[89].f64[0]),
                 v869,
                 v773[89],
                 1),
               v877,
               v773[90].f64[0]);
      v790 = _D1 + v878 * v773[90].f64[0];
      v756 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[6], v773[90].f64[1]), *(float64x2_t *)((char *)&v810[13] + 8), *(float64x2_t *)((char *)&v773[90] + 8), 1), v810[21], v773[91].f64[1]),
                                     *(float64x2_t *)((char *)&v810[28] + 8),
                                     *(float64x2_t *)((char *)&v773[91] + 8),
                                     1),
                                   v810[36],
                                   v773[92].f64[1]),
                                 *(float64x2_t *)((char *)&v810[43] + 8),
                                 *(float64x2_t *)((char *)&v773[92] + 8),
                                 1),
                               v817,
                               v773[93].f64[1]),
                             v824,
                             *(float64x2_t *)((char *)&v773[93] + 8),
                             1),
                           v832,
                           v773[94].f64[1]),
                         v839,
                         *(float64x2_t *)((char *)&v773[94] + 8),
                         1),
                       v847,
                       v773[95].f64[1]),
                     v854,
                     *(float64x2_t *)((char *)&v773[95] + 8),
                     1),
                   v862,
                   v773[96].f64[1]),
                 v869,
                 *(float64x2_t *)((char *)&v773[96] + 8),
                 1),
               v877,
               v773[97].f64[1]);
      v789 = _D0 + v878 * v773[97].f64[1];
      v808 = *(float64x2_t *)((char *)&v773[105] + 8);
      v809 = *(float64x2_t *)((char *)&v773[107] + 8);
      v807 = *(float64x2_t *)((char *)&v773[109] + 8);
      v806 = *(float64x2_t *)((char *)&v773[110] + 8);
      _Q7 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[0], v773[98].f64[0]), *(float64x2_t *)((char *)&v810[7] + 8), v773[98], 1), v810[15], v773[99].f64[0]),
                                    *(float64x2_t *)((char *)&v810[22] + 8),
                                    v773[99],
                                    1),
                                  v810[30],
                                  v773[100].f64[0]),
                                *(float64x2_t *)((char *)&v810[37] + 8),
                                v773[100],
                                1),
                              v811,
                              v773[101].f64[0]),
                            v818,
                            v773[101],
                            1),
                          v826,
                          v773[102].f64[0]),
                        v833,
                        v773[102],
                        1),
                      v841,
                      v773[103].f64[0]),
                    v848,
                    v773[103],
                    1),
                  v856,
                  v773[104].f64[0]),
                v863,
                v773[104],
                1),
              v871,
              v773[105].f64[0]);
      _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[1], v773[98].f64[0]), *(float64x2_t *)((char *)&v810[8] + 8), v773[98], 1), v810[16], v773[99].f64[0]),
                                    *(float64x2_t *)((char *)&v810[23] + 8),
                                    v773[99],
                                    1),
                                  v810[31],
                                  v773[100].f64[0]),
                                *(float64x2_t *)((char *)&v810[38] + 8),
                                v773[100],
                                1),
                              v812,
                              v773[101].f64[0]),
                            v819,
                            v773[101],
                            1),
                          v827,
                          v773[102].f64[0]),
                        v834,
                        v773[102],
                        1),
                      v842,
                      v773[103].f64[0]),
                    v849,
                    v773[103],
                    1),
                  v857,
                  v773[104].f64[0]),
                v864,
                v773[104],
                1),
              v872,
              v773[105].f64[0]);
      _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[0], v773[105].f64[1]), *(float64x2_t *)((char *)&v810[7] + 8), *(float64x2_t *)((char *)&v773[105] + 8), 1), v810[15], v773[106].f64[1]),
                                    *(float64x2_t *)((char *)&v810[22] + 8),
                                    *(float64x2_t *)((char *)&v773[106] + 8),
                                    1),
                                  v810[30],
                                  v773[107].f64[1]),
                                *(float64x2_t *)((char *)&v810[37] + 8),
                                *(float64x2_t *)((char *)&v773[107] + 8),
                                1),
                              v811,
                              v773[108].f64[1]),
                            v818,
                            *(float64x2_t *)((char *)&v773[108] + 8),
                            1),
                          v826,
                          v773[109].f64[1]),
                        v833,
                        *(float64x2_t *)((char *)&v773[109] + 8),
                        1),
                      v841,
                      v773[110].f64[1]),
                    v848,
                    *(float64x2_t *)((char *)&v773[110] + 8),
                    1),
                  v856,
                  v773[111].f64[1]),
                v863,
                *(float64x2_t *)((char *)&v773[111] + 8),
                1),
              v871,
              v773[112].f64[1]);
      v760 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[1], v773[105].f64[1]), *(float64x2_t *)((char *)&v810[8] + 8), *(float64x2_t *)((char *)&v773[105] + 8), 1), v810[16], v773[106].f64[1]),
                                     *(float64x2_t *)((char *)&v810[23] + 8),
                                     *(float64x2_t *)((char *)&v773[106] + 8),
                                     1),
                                   v810[31],
                                   v773[107].f64[1]),
                                 *(float64x2_t *)((char *)&v810[38] + 8),
                                 *(float64x2_t *)((char *)&v773[107] + 8),
                                 1),
                               v812,
                               v773[108].f64[1]),
                             v819,
                             *(float64x2_t *)((char *)&v773[108] + 8),
                             1),
                           v827,
                           v773[109].f64[1]),
                         v834,
                         *(float64x2_t *)((char *)&v773[109] + 8),
                         1),
                       v842,
                       v773[110].f64[1]),
                     v849,
                     *(float64x2_t *)((char *)&v773[110] + 8),
                     1),
                   v857,
                   v773[111].f64[1]),
                 v864,
                 *(float64x2_t *)((char *)&v773[111] + 8),
                 1),
               v872,
               v773[112].f64[1]);
      v761 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[2], v773[98].f64[0]), *(float64x2_t *)((char *)&v810[9] + 8), v773[98], 1), v810[17], v773[99].f64[0]),
                                     *(float64x2_t *)((char *)&v810[24] + 8),
                                     v773[99],
                                     1),
                                   v810[32],
                                   v773[100].f64[0]),
                                 *(float64x2_t *)((char *)&v810[39] + 8),
                                 v773[100],
                                 1),
                               v813,
                               v773[101].f64[0]),
                             v820,
                             v773[101],
                             1),
                           v828,
                           v773[102].f64[0]),
                         v835,
                         v773[102],
                         1),
                       v843,
                       v773[103].f64[0]),
                     v850,
                     v773[103],
                     1),
                   v858,
                   v773[104].f64[0]),
                 v865,
                 v773[104],
                 1),
               v873,
               v773[105].f64[0]);
      _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[3], v773[98].f64[0]), *(float64x2_t *)((char *)&v810[10] + 8), v773[98], 1), v810[18], v773[99].f64[0]),
                                     *(float64x2_t *)((char *)&v810[25] + 8),
                                     v773[99],
                                     1),
                                   v810[33],
                                   v773[100].f64[0]),
                                 *(float64x2_t *)((char *)&v810[40] + 8),
                                 v773[100],
                                 1),
                               v814,
                               v773[101].f64[0]),
                             v821,
                             v773[101],
                             1),
                           v829,
                           v773[102].f64[0]),
                         v836,
                         v773[102],
                         1),
                       v844,
                       v773[103].f64[0]),
                     v851,
                     v773[103],
                     1),
                   v859,
                   v773[104].f64[0]),
                 v866,
                 v773[104],
                 1),
               v874,
               v773[105].f64[0]);
      _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[2], v773[105].f64[1]), *(float64x2_t *)((char *)&v810[9] + 8), *(float64x2_t *)((char *)&v773[105] + 8), 1), v810[17], v773[106].f64[1]),
                                    *(float64x2_t *)((char *)&v810[24] + 8),
                                    *(float64x2_t *)((char *)&v773[106] + 8),
                                    1),
                                  v810[32],
                                  v773[107].f64[1]),
                                *(float64x2_t *)((char *)&v810[39] + 8),
                                *(float64x2_t *)((char *)&v773[107] + 8),
                                1),
                              v813,
                              v773[108].f64[1]),
                            v820,
                            *(float64x2_t *)((char *)&v773[108] + 8),
                            1),
                          v828,
                          v773[109].f64[1]),
                        v835,
                        *(float64x2_t *)((char *)&v773[109] + 8),
                        1),
                      v843,
                      v773[110].f64[1]),
                    v850,
                    *(float64x2_t *)((char *)&v773[110] + 8),
                    1),
                  v858,
                  v773[111].f64[1]),
                v865,
                *(float64x2_t *)((char *)&v773[111] + 8),
                1),
              v873,
              v773[112].f64[1]);
      _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v810[3], v773[105].f64[1]), *(float64x2_t *)((char *)&v810[10] + 8), *(float64x2_t *)((char *)&v773[105] + 8), 1), v810[18], v773[106].f64[1]),
                                     *(float64x2_t *)((char *)&v810[25] + 8),
                                     *(float64x2_t *)((char *)&v773[106] + 8),
                                     1),
                                   v810[33],
                                   v773[107].f64[1]),
                                 *(float64x2_t *)((char *)&v810[40] + 8),
                                 *(float64x2_t *)((char *)&v773[107] + 8),
                                 1),
                               v814,
                               v773[108].f64[1]),
                             v821,
                             *(float64x2_t *)((char *)&v773[108] + 8),
                             1),
                           v829,
                           v773[109].f64[1]),
                         v836,
                         *(float64x2_t *)((char *)&v773[109] + 8),
                         1),
                       v844,
                       v773[110].f64[1]),
                     v851,
                     *(float64x2_t *)((char *)&v773[110] + 8),
                     1),
                   v859,
                   v773[111].f64[1]),
                 v866,
                 *(float64x2_t *)((char *)&v773[111] + 8),
                 1),
               v874,
               v773[112].f64[1]);
      v765 = v798;
      *__src = v800;
      __src[1] = v765;
      *(float64x2_t *)((char *)__src + 136) = v801;
      *(float64x2_t *)((char *)__src + 120) = v803;
      v766 = v799;
      __src[15] = v802;
      __src[16] = v766;
      *(float64x2_t *)((char *)v14 + 104) = v796;
      *(float64x2_t *)((char *)v14 + 88) = v797;
      __src[2] = v788;
      __src[3] = v675;
      *(float64x2_t *)((char *)__src + 168) = v677;
      *(float64x2_t *)((char *)__src + 152) = v676;
      *v14 = v678;
      v14[1] = v679;
      *(float64x2_t *)((char *)v14 + 136) = v681;
      *(float64x2_t *)((char *)v14 + 120) = v680;
      __src[4] = v682;
      __src[5] = v683;
      *(float64x2_t *)((char *)__src + 200) = v685;
      *(float64x2_t *)((char *)__src + 184) = v684;
      v14[2] = v686;
      v14[3] = v687;
      *(float64x2_t *)((char *)v14 + 168) = v689;
      *(float64x2_t *)((char *)v14 + 152) = v688;
      __src[6] = _Q20;
      __src[7].f64[0] = v792;
      *(float64x2_t *)((char *)__src + 216) = _Q19;
      __src[14].f64[1] = v791;
      v14[4] = _Q17;
      v14[5].f64[0] = v790;
      *(float64x2_t *)((char *)v14 + 184) = v756;
      v14[12].f64[1] = v789;
      __src[30] = _Q7;
      __src[31] = _Q2;
      *(float64x2_t *)((char *)v14 + 328) = _Q3;
      *(float64x2_t *)((char *)v14 + 344) = v760;
      __src[32] = v761;
      __src[33] = _Q18;
      *(float64x2_t *)((char *)v14 + 360) = _Q0;
      *(float64x2_t *)((char *)v14 + 376) = _Q21;
      v767 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v786, v773[98].f64[0]), *(float64x2_t *)((char *)&v810[12] + 8), v773[98], 1), v795, v773[99].f64[0]),
                                     *(float64x2_t *)((char *)&v810[27] + 8),
                                     v773[99],
                                     1),
                                   v784,
                                   v773[100].f64[0]),
                                 *(float64x2_t *)((char *)&v810[42] + 8),
                                 v773[100],
                                 1),
                               v794,
                               v773[101].f64[0]),
                             v823,
                             v773[101],
                             1),
                           v831,
                           v773[102].f64[0]),
                         v838,
                         v773[102],
                         1),
                       v793,
                       v773[103].f64[0]),
                     v853,
                     v773[103],
                     1),
                   v861,
                   v773[104].f64[0]),
                 v868,
                 v773[104],
                 1),
               v876,
               v773[105].f64[0]);
      _Q5 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v787, v773[105].f64[1]), *(float64x2_t *)((char *)&v810[11] + 8), *(float64x2_t *)((char *)&v773[105] + 8), 1), v785, v773[106].f64[1]),
                                    *(float64x2_t *)((char *)&v810[26] + 8),
                                    *(float64x2_t *)((char *)&v773[106] + 8),
                                    1),
                                  v783,
                                  v773[107].f64[1]),
                                v782,
                                *(float64x2_t *)((char *)&v773[107] + 8),
                                1),
                              v781,
                              v773[108].f64[1]),
                            v780,
                            *(float64x2_t *)((char *)&v773[108] + 8),
                            1),
                          v830,
                          v773[109].f64[1]),
                        v779,
                        *(float64x2_t *)((char *)&v773[109] + 8),
                        1),
                      v778,
                      v773[110].f64[1]),
                    v777,
                    *(float64x2_t *)((char *)&v773[110] + 8),
                    1),
                  v860,
                  v773[111].f64[1]),
                v776,
                *(float64x2_t *)((char *)&v773[111] + 8),
                1),
              v875,
              v773[112].f64[1]);
      _Q6 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v786, v773[105].f64[1]), *(float64x2_t *)((char *)&v810[12] + 8), *(float64x2_t *)((char *)&v773[105] + 8), 1), v795, v773[106].f64[1]),
                                    *(float64x2_t *)((char *)&v810[27] + 8),
                                    *(float64x2_t *)((char *)&v773[106] + 8),
                                    1),
                                  v784,
                                  v773[107].f64[1]),
                                *(float64x2_t *)((char *)&v810[42] + 8),
                                *(float64x2_t *)((char *)&v773[107] + 8),
                                1),
                              v794,
                              v773[108].f64[1]),
                            v823,
                            *(float64x2_t *)((char *)&v773[108] + 8),
                            1),
                          v831,
                          v773[109].f64[1]),
                        v838,
                        *(float64x2_t *)((char *)&v773[109] + 8),
                        1),
                      v793,
                      v773[110].f64[1]),
                    v853,
                    *(float64x2_t *)((char *)&v773[110] + 8),
                    1),
                  v861,
                  v773[111].f64[1]),
                v868,
                *(float64x2_t *)((char *)&v773[111] + 8),
                1),
              v876,
              v773[112].f64[1]);
      __src[34] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v787, v773[98].f64[0]), *(float64x2_t *)((char *)&v810[11] + 8), v773[98], 1), v785, v773[99].f64[0]),
                                          *(float64x2_t *)((char *)&v810[26] + 8),
                                          v773[99],
                                          1),
                                        v783,
                                        v773[100].f64[0]),
                                      v782,
                                      v773[100],
                                      1),
                                    v781,
                                    v773[101].f64[0]),
                                  v780,
                                  v773[101],
                                  1),
                                v830,
                                v773[102].f64[0]),
                              v779,
                              v773[102],
                              1),
                            v778,
                            v773[103].f64[0]),
                          v777,
                          v773[103],
                          1),
                        v860,
                        v773[104].f64[0]),
                      v776,
                      v773[104],
                      1),
                    v875,
                    v773[105].f64[0]);
      __src[35] = v767;
      *(float64x2_t *)((char *)v14 + 392) = _Q5;
      *(float64x2_t *)((char *)v14 + 408) = _Q6;
      _Q3.f64[0] = v810[29].f64[1];
      _Q5.f64[1] = v773[99].f64[1];
      _Q6.f64[1] = v773[98].f64[1];
      _Q7.f64[1] = v773[107].f64[0];
      _Q20.f64[0] = v774;
      __asm
      {
        FMLA            D17, D20, V6.D[1]
        FMLA            D17, D3, V5.D[1]
      }
      _Q6.f64[1] = v808.f64[1];
      __asm
      {
        FMLA            D0, D20, V6.D[1]
        FMLA            D0, D3, V7.D[1]
      }
      _Q3.f64[0] = v810[44].f64[1];
      _Q18.f64[0] = v825;
      _Q20.f64[1] = v773[101].f64[1];
      _Q21.f64[1] = v773[100].f64[1];
      _V22.D[1] = v773[109].f64[0];
      __asm
      {
        FMLA            D17, D3, V21.D[1]
        FMLA            D17, D18, V20.D[1]
      }
      _Q20.f64[1] = v809.f64[1];
      __asm
      {
        FMLA            D0, D3, V20.D[1]
        FMLA            D0, D18, V22.D[1]
      }
      _Q3.f64[0] = v840;
      _Q18.f64[0] = v855;
      _Q20.f64[1] = v773[103].f64[1];
      _Q21.f64[1] = v773[102].f64[1];
      __asm
      {
        FMLA            D17, D3, V21.D[1]
        FMLA            D17, D18, V20.D[1]
      }
      _Q20.f64[1] = v807.f64[1];
      _Q2.f64[1] = v806.f64[1];
      __asm
      {
        FMLA            D0, D3, V20.D[1]
        FMLA            D0, D18, V2.D[1]
      }
      _Q3.f64[0] = v870;
      _Q6.f64[0] = v878;
      v771 = v877;
      _Q18.f64[0] = v773[105].f64[0];
      _Q19.f64[1] = v773[104].f64[1];
      _Q20.f64[0] = v773[112].f64[1];
      _Q21.f64[1] = v773[112].f64[0];
      __asm { FMLA            D17, D3, V19.D[1] }
      v772 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v775, v808.f64[0]), *(float64x2_t *)((char *)&v810[13] + 8), v808, 1), v810[21], v773[106].f64[1]), *(float64x2_t *)((char *)&v810[28] + 8),
                                   *(float64x2_t *)((char *)&v773[106] + 8),
                                   1),
                                 v810[36],
                                 v809.f64[0]),
                               *(float64x2_t *)((char *)&v810[43] + 8),
                               v809,
                               1),
                             v817,
                             v773[108].f64[1]),
                           v824,
                           *(float64x2_t *)((char *)&v773[108] + 8),
                           1),
                         v832,
                         v807.f64[0]),
                       v839,
                       v807,
                       1),
                     v847,
                     v806.f64[0]),
                   v854,
                   v806,
                   1),
                 v862,
                 v773[111].f64[1]),
               v869,
               *(float64x2_t *)((char *)&v773[111] + 8),
               1);
      v14[19] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v775, v773[98].f64[0]), *(float64x2_t *)((char *)&v810[13] + 8), v773[98], 1), v810[21], v773[99].f64[0]),
                                        *(float64x2_t *)((char *)&v810[28] + 8),
                                        v773[99],
                                        1),
                                      v810[36],
                                      v773[100].f64[0]),
                                    *(float64x2_t *)((char *)&v810[43] + 8),
                                    v773[100],
                                    1),
                                  v817,
                                  v773[101].f64[0]),
                                v824,
                                v773[101],
                                1),
                              v832,
                              v773[102].f64[0]),
                            v839,
                            v773[102],
                            1),
                          v847,
                          v773[103].f64[0]),
                        v854,
                        v773[103],
                        1),
                      v862,
                      v773[104].f64[0]),
                    v869,
                    v773[104],
                    1),
                  v877,
                  v773[105].f64[0]);
      v14[20].f64[0] = _Q17.f64[0] + _Q6.f64[0] * _Q18.f64[0];
      *(float64x2_t *)((char *)v14 + 424) = vmlaq_n_f64(v772, v771, _Q20.f64[0]);
      __asm { FMLA            D0, D3, V21.D[1] }
      v14[27].f64[1] = _Q0.f64[0] + _Q6.f64[0] * _Q20.f64[0];
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_20F588018(uint64_t a1)
{
  double v1;
  float64x2_t *v2;
  float64x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int64x2_t v15;
  _BOOL8 v16;
  double v17;
  uint64_t v18;
  float64x2_t *v19;
  uint64_t v20;
  float64x2_t *v21;
  float64x2_t *v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  uint64_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  int8x16_t v133;
  int8x16_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  int8x16_t v138;
  int8x16_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  int8x16_t v143;
  unint64_t v144;
  float64x2_t *v145;
  int8x16_t v146;
  unint64_t v147;
  unint64_t v148;
  int8x16_t v149;
  int8x16_t v150;
  unint64_t v151;
  unint64_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64_t v157;
  float64_t v158;
  double v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  _QWORD *v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t *v220;
  float64x2_t *v221;
  float64x2_t *v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  uint64_t v319;
  int8x16_t v320;
  int8x16_t v321;
  int8x16_t v322;
  int8x16_t v323;
  int8x16_t v324;
  int8x16_t v325;
  int8x16_t v326;
  int8x16_t v327;
  int8x16_t v328;
  int8x16_t v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  int8x16_t v336;
  int8x16_t v337;
  unint64_t v338;
  int8x16_t v339;
  int8x16_t v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  int8x16_t v344;
  int8x16_t v345;
  unint64_t v346;
  unint64_t v347;
  float64x2_t *v348;
  int8x16_t v349;
  int8x16_t v350;
  unint64_t v351;
  unint64_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64_t v357;
  float64_t v358;
  double v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  _QWORD *v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  __int128 v449;
  float64x2_t v461[18];
  uint64_t v462;
  uint64_t v463;
  unsigned int v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  int8x16_t v472;
  int8x16_t v473;
  int8x16_t v474;
  int8x16_t v475;
  int8x16_t v476;
  int8x16_t v477;
  int8x16_t v478;
  int8x16_t v479;
  int8x16_t v480;
  int8x16_t v481;
  int8x16_t v482;
  int8x16_t v483;
  int8x16_t v484;
  int8x16_t v485;
  int8x16_t v486;
  int8x16_t v487;
  int8x16_t v488;
  int8x16_t v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  int8x16_t v504;
  int8x16_t v505;
  int8x16_t v506;
  int8x16_t v507;
  int8x16_t v508;
  int8x16_t v509;
  int8x16_t v510;
  int8x16_t v511;
  int8x16_t v512;
  int8x16_t v513;
  int8x16_t v514;
  int8x16_t v515;
  int8x16_t v516;
  int8x16_t v517;
  int8x16_t v518;
  int8x16_t v519;
  int8x16_t v520;
  int8x16_t v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  int8x16_t v536;
  int8x16_t v537;
  int8x16_t v538;
  int8x16_t v539;
  int8x16_t v540;
  int8x16_t v541;
  int8x16_t v542;
  int8x16_t v543;
  int8x16_t v544;
  int8x16_t v545;
  int8x16_t v546;
  int8x16_t v547;
  int8x16_t v548;
  int8x16_t v549;
  int8x16_t v550;
  int8x16_t v551;
  int8x16_t v552;
  int8x16_t v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  int8x16_t v568;
  int8x16_t v569;
  int8x16_t v570;
  int8x16_t v571;
  int8x16_t v572;
  int8x16_t v573;
  int8x16_t v574;
  int8x16_t v575;
  int8x16_t v576;
  int8x16_t v577;
  int8x16_t v578;
  int8x16_t v579;
  int8x16_t v580;
  int8x16_t v581;
  int8x16_t v582;
  int8x16_t v583;
  int8x16_t v584;
  int8x16_t v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  int8x16_t v600;
  int8x16_t v601;
  int8x16_t v602;
  int8x16_t v603;
  int8x16_t v604;
  int8x16_t v605;
  int8x16_t v606;
  int8x16_t v607;
  int8x16_t v608;
  int8x16_t v609;
  int8x16_t v610;
  int8x16_t v611;
  int8x16_t v612;
  int8x16_t v613;
  int8x16_t v614;
  int8x16_t v615;
  int8x16_t v616;
  int8x16_t v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  __int128 v631;
  int8x16_t v632;
  int8x16_t v633;
  int8x16_t v634;
  int8x16_t v635;
  int8x16_t v636;
  int8x16_t v637;
  int8x16_t v638;
  int8x16_t v639;
  int8x16_t v640;
  int8x16_t v641;
  int8x16_t v642;
  int8x16_t v643;
  int8x16_t v644;
  int8x16_t v645;
  int8x16_t v646;
  int8x16_t v647;
  int8x16_t v648;
  int8x16_t v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  __int128 v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  __int128 v662;
  __int128 v663;
  int8x16_t v664;
  int8x16_t v665;
  int8x16_t v666;
  int8x16_t v667;
  int8x16_t v668;
  int8x16_t v669;
  int8x16_t v670;
  int8x16_t v671;
  int8x16_t v672;
  int8x16_t v673;
  int8x16_t v674;
  int8x16_t v675;
  int8x16_t v676;
  int8x16_t v677;
  int8x16_t v678;
  int8x16_t v679;
  int8x16_t v680;
  int8x16_t v681;
  __int128 v682;
  __int128 v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  __int128 v693;
  __int128 v694;
  __int128 v695;
  int8x16_t v696;
  int8x16_t v697;
  int8x16_t v698;
  int8x16_t v699;
  int8x16_t v700;
  int8x16_t v701;
  int8x16_t v702;
  int8x16_t v703;
  int8x16_t v704;
  int8x16_t v705;
  int8x16_t v706;
  int8x16_t v707;
  int8x16_t v708;
  int8x16_t v709;
  int8x16_t v710;
  int8x16_t v711;
  int8x16_t v712;
  int8x16_t v713;
  __int128 v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  __int128 v724;
  __int128 v725;
  __int128 v726;
  __int128 v727;
  int8x16_t v728;
  int8x16_t v729;
  int8x16_t v730;
  int8x16_t v731;
  int8x16_t v732;
  int8x16_t v733;
  int8x16_t v734;
  int8x16_t v735;
  int8x16_t v736;
  int8x16_t v737;
  int8x16_t v738;
  int8x16_t v739;
  int8x16_t v740;
  int8x16_t v741;
  int8x16_t v742;
  int8x16_t v743;
  int8x16_t v744;
  int8x16_t v745;
  __int128 v746;
  __int128 v747;
  __int128 v748;
  __int128 v749;
  __int128 v750;
  __int128 v751;
  __int128 v752;
  __int128 v753;
  __int128 v754;
  __int128 v755;
  __int128 v756;
  __int128 v757;
  __int128 v758;
  __int128 v759;
  int8x16_t v760;
  int8x16_t v761;
  int8x16_t v762;
  int8x16_t v763;
  int8x16_t v764;
  int8x16_t v765;
  int8x16_t v766;
  int8x16_t v767;
  int8x16_t v768;
  int8x16_t v769;
  int8x16_t v770;
  int8x16_t v771;
  int8x16_t v772;
  int8x16_t v773;
  int8x16_t v774;
  int8x16_t v775;
  int8x16_t v776;
  int8x16_t v777;
  __int128 v778;
  __int128 v779;
  __int128 v780;
  __int128 v781;
  __int128 v782;
  __int128 v783;
  __int128 v784;
  __int128 v785;
  __int128 v786;
  __int128 v787;
  __int128 v788;
  __int128 v789;
  __int128 v790;
  __int128 v791;
  int8x16_t v792;
  int8x16_t v793;
  int8x16_t v794;
  int8x16_t v795;
  int8x16_t v796;
  int8x16_t v797;
  int8x16_t v798;
  int8x16_t v799;
  int8x16_t v800;
  int8x16_t v801;
  int8x16_t v802;
  int8x16_t v803;
  int8x16_t v804;
  int8x16_t v805;
  int8x16_t v806;
  int8x16_t v807;
  int8x16_t v808;
  int8x16_t v809;
  __int128 v810;
  __int128 v811;
  __int128 v812;
  __int128 v813;
  __int128 v814;
  __int128 v815;
  __int128 v816;
  __int128 v817;
  __int128 v818;
  __int128 v819;
  __int128 v820;
  __int128 v821;
  __int128 v822;
  __int128 v823;
  int8x16_t v824;
  int8x16_t v825;
  int8x16_t v826;
  int8x16_t v827;
  int8x16_t v828;
  int8x16_t v829;
  int8x16_t v830;
  int8x16_t v831;
  int8x16_t v832;
  int8x16_t v833;
  int8x16_t v834;
  int8x16_t v835;
  int8x16_t v836;
  int8x16_t v837;
  int8x16_t v838;
  int8x16_t v839;
  int8x16_t v840;
  int8x16_t v841;
  __int128 v842;
  __int128 v843;
  __int128 v844;
  __int128 v845;
  __int128 v846;
  __int128 v847;
  __int128 v848;
  __int128 v849;
  __int128 v850;
  __int128 v851;
  __int128 v852;
  __int128 v853;
  __int128 v854;
  __int128 v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  float64x2_t v867;
  float64x2_t v868;
  float64x2_t v869;
  float64x2_t v870;
  float64x2_t v871;
  float64x2_t v872;
  float64x2_t v873;
  uint64_t v874;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v874 = *MEMORY[0x24BDAC8D0];
  v8 = v6 + 792;
  v16 = sub_20F3DB79C(v6, (_QWORD *)(v6 + 728), (float64x2_t *)(v6 + 792), v2, v1, v9, v10, v11, v12, v13, v14, v15);
  *(_BYTE *)(v7 + 848) = v16;
  v17 = 0.0;
  if (v16)
  {
    v18 = *(_QWORD *)(v7 + 856);
    if (v18)
    {
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v18 + 24))(v18, v8, 0.0);
      v19 = *(float64x2_t **)(v7 + 856);
      v20 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v19->f64[0] + 16))(v19);
      switch((int)v20)
      {
        case 0:
          v21 = v19 + 1;
          v462 = v5;
          v463 = v20;
          v464 = v20;
          if (&v3[18] > &v19[1] && &v19[19] > v3)
          {
            MEMORY[0x24BDAC7A8](v20);
            v20 = (uint64_t)memcpy(v461, &v19[1], sizeof(v461));
            v21 = v461;
          }
          MEMORY[0x24BDAC7A8](v20);
          v22 = &v461[-18];
          memcpy(&v461[-18], v3, 0x120uLL);
          v23 = v21[1];
          v25 = v21[3];
          v24 = v21[4];
          v27 = v21[6];
          v26 = v21[7];
          v29 = v21[9];
          v28 = v21[10];
          v30 = v461[-17];
          v31 = v461[-18];
          v32 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v21, v22->f64[0]), v25, *v22, 1), v27, v30.f64[0]), v29, v30, 1);
          v33 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, v22->f64[0]), v24, *v22, 1), v26, v30.f64[0]), v28, v30, 1);
          v35 = v461[-16];
          v34 = v461[-15];
          v37 = v34;
          v36 = v461[-14];
          v38 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v21, v34.f64[0]), v25, v34, 1), v27, v36.f64[0]), v29, v36, 1);
          v39 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, v34.f64[0]), v24, v34, 1), v26, v36.f64[0]), v28, v36, 1);
          v41 = v461[-13];
          v40 = v461[-12];
          v43 = v40;
          v42 = v461[-11];
          v44 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v21, v40.f64[0]), v25, v40, 1), v27, v42.f64[0]), v29, v42, 1);
          v45 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, v40.f64[0]), v24, v40, 1), v26, v42.f64[0]), v28, v42, 1);
          v47 = v461[-10];
          v46 = v461[-9];
          v48 = vmlaq_laneq_f64(vmulq_n_f64(*v21, v46.f64[0]), v25, v46, 1);
          v50 = v46;
          v49 = v461[-8];
          v51 = vmlaq_laneq_f64(vmlaq_n_f64(v48, v27, v49.f64[0]), v29, v49, 1);
          v52 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, v46.f64[0]), v24, v46, 1), v26, v49.f64[0]), v28, v49, 1);
          v54 = v21[12];
          v53 = v21[13];
          v56 = v21[15];
          v55 = v21[16];
          v57 = v35;
          v58 = vmlaq_laneq_f64(vmlaq_n_f64(v32, v54, v57.f64[0]), v56, v57, 1);
          v59 = vmlaq_laneq_f64(vmlaq_n_f64(v33, v53, v57.f64[0]), v55, v57, 1);
          v61 = v461[-14];
          v60 = v41;
          v62 = vmlaq_laneq_f64(vmlaq_n_f64(v38, v54, v60.f64[0]), v56, v60, 1);
          v63 = vmlaq_laneq_f64(vmlaq_n_f64(v39, v53, v60.f64[0]), v55, v60, 1);
          v65 = v461[-11];
          v64 = v47;
          v66 = vmlaq_laneq_f64(vmlaq_n_f64(v44, v54, v64.f64[0]), v56, v64, 1);
          v67 = vmlaq_laneq_f64(vmlaq_n_f64(v45, v53, v64.f64[0]), v55, v64, 1);
          v69 = v461[-8];
          v68 = v461[-7];
          *v3 = v58;
          v3[1] = v59;
          v3[3] = v62;
          v3[4] = v63;
          v3[6] = v66;
          v3[7] = v67;
          v3[9] = vmlaq_laneq_f64(vmlaq_n_f64(v51, v54, v68.f64[0]), v56, v68, 1);
          v3[10] = vmlaq_laneq_f64(vmlaq_n_f64(v52, v53, v68.f64[0]), v55, v68, 1);
          v70 = v21[2];
          v71 = v21[5];
          v72 = v21[8];
          v73 = v21[11];
          v74 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v70, v31.f64[0]), v71, v31, 1), v72, v461[-17].f64[0]), v73, v461[-17], 1);
          v75 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v70, v37.f64[0]), v71, v37, 1), v72, v61.f64[0]), v73, v61, 1);
          v76 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v70, v43.f64[0]), v71, v43, 1), v72, v65.f64[0]), v73, v65, 1);
          v77 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v70, v50.f64[0]), v71, v50, 1), v72, v69.f64[0]), v73, v69, 1);
          v78 = v21[14];
          v79 = v21[17];
          v80 = v461[-6];
          v81 = vmlaq_laneq_f64(vmlaq_n_f64(v77, v78, v461[-7].f64[0]), v79, v461[-7], 1);
          v3[2] = vmlaq_laneq_f64(vmlaq_n_f64(v74, v78, v35.f64[0]), v79, v35, 1);
          v3[5] = vmlaq_laneq_f64(vmlaq_n_f64(v75, v78, v41.f64[0]), v79, v41, 1);
          v3[8] = vmlaq_laneq_f64(vmlaq_n_f64(v76, v78, v47.f64[0]), v79, v47, 1);
          v3[11] = v81;
          v82 = v21[1];
          v84 = v21[3];
          v83 = v21[4];
          v86 = v21[6];
          v85 = v21[7];
          v88 = v21[9];
          v87 = v21[10];
          v90 = v461[-6];
          v89 = v461[-5];
          v91 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v21, v80.f64[0]), v84, v80, 1), v86, v89.f64[0]), v88, v89, 1);
          v92 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v82, v80.f64[0]), v83, v80, 1), v85, v89.f64[0]), v87, v89, 1);
          v94 = v461[-4];
          v93 = v461[-3];
          v95 = vmlaq_laneq_f64(vmulq_n_f64(*v21, v93.f64[0]), v84, v93, 1);
          v97 = v93;
          v96 = v461[-2];
          v98 = vmlaq_laneq_f64(vmlaq_n_f64(v95, v86, v96.f64[0]), v88, v96, 1);
          v99 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v82, v93.f64[0]), v83, v93, 1), v85, v96.f64[0]), v87, v96, 1);
          v101 = v21[12];
          v100 = v21[13];
          v103 = v21[15];
          v102 = v21[16];
          v105 = v461[-5];
          v104 = v94;
          v106 = vmlaq_laneq_f64(vmlaq_n_f64(v91, v101, v104.f64[0]), v103, v104, 1);
          v107 = vmlaq_laneq_f64(vmlaq_n_f64(v92, v100, v104.f64[0]), v102, v104, 1);
          v109 = v461[-2];
          v108 = v461[-1];
          v3[12] = v106;
          v3[13] = v107;
          v3[15] = vmlaq_laneq_f64(vmlaq_n_f64(v98, v101, v108.f64[0]), v103, v108, 1);
          v3[16] = vmlaq_laneq_f64(vmlaq_n_f64(v99, v100, v108.f64[0]), v102, v108, 1);
          v110 = v21[2];
          v111 = v21[5];
          v112 = v21[8];
          v113 = v21[11];
          v114 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v110, v90.f64[0]), v111, v90, 1), v112, v105.f64[0]), v113, v105, 1);
          v115 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v110, v97.f64[0]), v111, v97, 1), v112, v109.f64[0]), v113, v109, 1);
          v116 = v21[14];
          v117 = v21[17];
          v118 = vmlaq_laneq_f64(vmlaq_n_f64(v115, v116, v461[-1].f64[0]), v117, v461[-1], 1);
          v3[14] = vmlaq_laneq_f64(vmlaq_n_f64(v114, v116, v94.f64[0]), v117, v94, 1);
          v3[17] = v118;
          v5 = v462;
          goto LABEL_13;
        case 1:
          v119 = 0;
          v121 = (int8x16_t)v3[16];
          v120 = (int8x16_t)v3[17];
          v123 = (int8x16_t)v3[14];
          v122 = (int8x16_t)v3[15];
          v125 = (int8x16_t)v3[12];
          v124 = (int8x16_t)v3[13];
          v127 = (int8x16_t)v3[10];
          v126 = (int8x16_t)v3[11];
          v129 = (int8x16_t)v3[8];
          v128 = (int8x16_t)v3[9];
          v470 = (float64x2_t)vextq_s8(v121, v121, 8uLL);
          v471 = (float64x2_t)vextq_s8(v120, v120, 8uLL);
          v468 = (float64x2_t)vextq_s8(v123, v123, 8uLL);
          v469 = (float64x2_t)vextq_s8(v122, v122, 8uLL);
          v130 = vextq_s8(v124, v124, 8uLL).u64[0];
          v131 = vextq_s8(v125, v125, 8uLL).u64[0];
          v132 = vextq_s8(v126, v126, 8uLL).u64[0];
          v134 = (int8x16_t)v3[6];
          v133 = (int8x16_t)v3[7];
          v135 = vextq_s8(v127, v127, 8uLL).u64[0];
          v136 = vextq_s8(v128, v128, 8uLL).u64[0];
          v137 = vextq_s8(v129, v129, 8uLL).u64[0];
          v139 = (int8x16_t)v3[4];
          v138 = (int8x16_t)v3[5];
          v140 = vextq_s8(v133, v133, 8uLL).u64[0];
          v141 = vextq_s8(v134, v134, 8uLL).u64[0];
          v142 = vextq_s8(v138, v138, 8uLL).u64[0];
          v143 = (int8x16_t)v3[3];
          v144 = vextq_s8(v139, v139, 8uLL).u64[0];
          v145 = v3 + 2;
          v146 = (int8x16_t)v3[2];
          v147 = vextq_s8(v143, v143, 8uLL).u64[0];
          v148 = vextq_s8(v146, v146, 8uLL).u64[0];
          v150 = *(int8x16_t *)v3;
          v149 = (int8x16_t)v3[1];
          v151 = vextq_s8(v149, v149, 8uLL).u64[0];
          v152 = vextq_s8(v150, v150, 8uLL).u64[0];
          do
          {
            v150.i64[1] = v152;
            v149.i64[1] = v151;
            v146.i64[1] = v148;
            v143.i64[1] = v147;
            v153 = v145[-1];
            v154 = v19[2];
            v155 = vmulq_f64(v145[-2], v19[1]);
            v467 = *v145;
            v156 = v19[3];
            v465 = v155;
            v466 = v156;
            v824 = v150;
            v825 = v149;
            v826 = v146;
            v827 = v143;
            v139.i64[1] = v144;
            v138.i64[1] = v142;
            v134.i64[1] = v141;
            v828 = v139;
            v829 = v138;
            v133.i64[1] = v140;
            v129.i64[1] = v137;
            v830 = v134;
            v831 = v133;
            v128.i64[1] = v136;
            v127.i64[1] = v135;
            v832 = v129;
            v833 = v128;
            v126.i64[1] = v132;
            v125.i64[1] = v131;
            v834 = v127;
            v835 = v126;
            v124.i64[1] = v130;
            v123.i64[1] = *(_QWORD *)&v468.f64[0];
            v836 = v125;
            v837 = v124;
            v122.i64[1] = *(_QWORD *)&v469.f64[0];
            v121.i64[1] = *(_QWORD *)&v470.f64[0];
            v838 = v123;
            v839 = v122;
            v120.i64[1] = *(_QWORD *)&v471.f64[0];
            v840 = v121;
            v841 = v120;
            v824.i64[v119 & 0x3F] = *(_QWORD *)&v155.f64[0];
            v471 = vmulq_f64(v153, v154);
            v823 = v855;
            v822 = v854;
            v821 = v853;
            v820 = v852;
            v819 = v851;
            v818 = v850;
            v817 = v849;
            v816 = v848;
            v815 = v847;
            v814 = v846;
            v813 = v845;
            v812 = v844;
            v811 = v843;
            v810 = v842;
            v809 = v841;
            v808 = v840;
            v807 = v839;
            v806 = v838;
            v805 = v837;
            v804 = v836;
            v803 = v835;
            v802 = v834;
            v801 = v833;
            v800 = v832;
            v799 = v831;
            v798 = v830;
            v797 = v829;
            v796 = v828;
            v795 = v827;
            v794 = v826;
            v793 = v825;
            v792 = v824;
            v792.i64[((_BYTE)v119 + 1) & 0x3F] = *(_QWORD *)&v465.f64[1];
            v791 = v823;
            v790 = v822;
            v789 = v821;
            v788 = v820;
            v787 = v819;
            v786 = v818;
            v785 = v817;
            v784 = v816;
            v783 = v815;
            v782 = v814;
            v781 = v813;
            v780 = v812;
            v779 = v811;
            v778 = v810;
            v777 = v809;
            v776 = v808;
            v775 = v807;
            v774 = v806;
            v773 = v805;
            v772 = v804;
            v771 = v803;
            v770 = v802;
            v769 = v801;
            v768 = v800;
            v767 = v799;
            v766 = v798;
            v765 = v797;
            v764 = v796;
            v763 = v795;
            v762 = v794;
            v761 = v793;
            v760 = v792;
            v157 = v471.f64[1];
            v760.i64[((_BYTE)v119 + 2) & 0x3F] = *(_QWORD *)&v471.f64[0];
            v470 = vmulq_f64(v467, v466);
            v759 = v791;
            v758 = v790;
            v757 = v789;
            v756 = v788;
            v755 = v787;
            v754 = v786;
            v753 = v785;
            v752 = v784;
            v751 = v783;
            v750 = v782;
            v749 = v781;
            v748 = v780;
            v747 = v779;
            v746 = v778;
            v745 = v777;
            v744 = v776;
            v743 = v775;
            v742 = v774;
            v741 = v773;
            v740 = v772;
            v739 = v771;
            v738 = v770;
            v737 = v769;
            v736 = v768;
            v735 = v767;
            v734 = v766;
            v733 = v765;
            v732 = v764;
            v731 = v763;
            v730 = v762;
            v729 = v761;
            v728 = v760;
            *(float64_t *)&v728.i64[((_BYTE)v119 + 3) & 0x3F] = v157;
            v727 = v759;
            v726 = v758;
            v725 = v757;
            v724 = v756;
            v723 = v755;
            v722 = v754;
            v721 = v753;
            v720 = v752;
            v719 = v751;
            v718 = v750;
            v717 = v749;
            v716 = v748;
            v715 = v747;
            v714 = v746;
            v713 = v745;
            v712 = v744;
            v711 = v743;
            v710 = v742;
            v709 = v741;
            v708 = v740;
            v707 = v739;
            v706 = v738;
            v705 = v737;
            v704 = v736;
            v703 = v735;
            v702 = v734;
            v701 = v733;
            v700 = v732;
            v699 = v731;
            v698 = v730;
            v697 = v729;
            v696 = v728;
            v158 = v470.f64[1];
            v696.i64[((_BYTE)v119 + 4) & 0x3F] = *(_QWORD *)&v470.f64[0];
            v695 = v727;
            v694 = v726;
            v693 = v725;
            v692 = v724;
            v691 = v723;
            v690 = v722;
            v689 = v721;
            v688 = v720;
            v687 = v719;
            v686 = v718;
            v685 = v717;
            v684 = v716;
            v683 = v715;
            v682 = v714;
            v681 = v713;
            v680 = v712;
            v679 = v711;
            v678 = v710;
            v677 = v709;
            v676 = v708;
            v675 = v707;
            v674 = v706;
            v673 = v705;
            v672 = v704;
            v671 = v703;
            v670 = v702;
            v669 = v701;
            v668 = v700;
            v667 = v699;
            v666 = v698;
            v665 = v697;
            v664 = v696;
            *(float64_t *)&v664.i64[((_BYTE)v119 + 5) & 0x3F] = v158;
            v120 = v681;
            v121 = v680;
            v122 = v679;
            v123 = v678;
            v124 = v677;
            v125 = v676;
            v126 = v675;
            v127 = v674;
            v128 = v673;
            v129 = v672;
            v133 = v671;
            v134 = v670;
            v138 = v669;
            v139 = v668;
            v143 = v667;
            v146 = v666;
            v149 = v665;
            v150 = v664;
            v470 = (float64x2_t)vextq_s8(v121, v121, 8uLL);
            v471 = (float64x2_t)vextq_s8(v120, v120, 8uLL);
            v468 = (float64x2_t)vextq_s8(v123, v123, 8uLL);
            v469 = (float64x2_t)vextq_s8(v122, v122, 8uLL);
            v130 = vextq_s8(v124, v124, 8uLL).u64[0];
            v131 = vextq_s8(v125, v125, 8uLL).u64[0];
            v132 = vextq_s8(v126, v126, 8uLL).u64[0];
            v135 = vextq_s8(v127, v127, 8uLL).u64[0];
            v136 = vextq_s8(v128, v128, 8uLL).u64[0];
            v137 = vextq_s8(v129, v129, 8uLL).u64[0];
            v140 = vextq_s8(v133, v133, 8uLL).u64[0];
            v141 = vextq_s8(v134, v134, 8uLL).u64[0];
            v142 = vextq_s8(v138, v138, 8uLL).u64[0];
            v144 = vextq_s8(v139, v139, 8uLL).u64[0];
            v3[2] = (float64x2_t)v666;
            v3[3] = (float64x2_t)v143;
            v3[4] = (float64x2_t)v139;
            v3[5] = (float64x2_t)v138;
            v3[6] = (float64x2_t)v134;
            v3[7] = (float64x2_t)v133;
            v3[8] = (float64x2_t)v129;
            v3[9] = (float64x2_t)v128;
            v3[10] = (float64x2_t)v127;
            v3[11] = (float64x2_t)v126;
            v3[12] = (float64x2_t)v125;
            v3[13] = (float64x2_t)v124;
            v3[14] = (float64x2_t)v123;
            v3[15] = (float64x2_t)v122;
            v119 += 6;
            v145 += 3;
            v3[16] = (float64x2_t)v121;
            v3[17] = (float64x2_t)v120;
            *v3 = (float64x2_t)v150;
            v3[1] = (float64x2_t)v149;
            v147 = vextq_s8(v143, v143, 8uLL).u64[0];
            v148 = vextq_s8(v146, v146, 8uLL).u64[0];
            v151 = vextq_s8(v149, v149, 8uLL).u64[0];
            v152 = vextq_s8(v150, v150, 8uLL).u64[0];
          }
          while (v119 != 36);
          break;
        case 2:
          v159 = v19[1].f64[0];
          v160 = vmulq_n_f64(*v3, v159);
          v161 = vmulq_n_f64(v3[1], v159);
          v162 = vmulq_n_f64(v3[2], v159);
          v163 = vmulq_n_f64(v3[3], v159);
          v164 = vmulq_n_f64(v3[4], v159);
          v165 = vmulq_n_f64(v3[5], v159);
          v166 = vmulq_n_f64(v3[6], v159);
          v167 = vmulq_n_f64(v3[7], v159);
          v168 = vmulq_n_f64(v3[8], v159);
          v169 = vmulq_n_f64(v3[9], v159);
          v170 = vmulq_n_f64(v3[10], v159);
          v171 = vmulq_n_f64(v3[11], v159);
          v172 = vmulq_n_f64(v3[12], v159);
          v173 = vmulq_n_f64(v3[13], v159);
          v174 = vmulq_n_f64(v3[14], v159);
          v175 = vmulq_n_f64(v3[15], v159);
          v176 = vmulq_n_f64(v3[16], v159);
          v177 = vmulq_n_f64(v3[17], v159);
          v3[16] = v176;
          v3[17] = v177;
          v3[14] = v174;
          v3[15] = v175;
          v3[12] = v172;
          v3[13] = v173;
          v3[10] = v170;
          v3[11] = v171;
          v3[8] = v168;
          v3[9] = v169;
          v3[6] = v166;
          v3[7] = v167;
          v3[4] = v164;
          v3[5] = v165;
          v3[2] = v162;
          v3[3] = v163;
          *v3 = v160;
          v3[1] = v161;
          break;
        case 4:
          v463 = v20;
          v464 = v20;
          v178 = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v19->f64[0] + 56))(&v856, v19);
          MEMORY[0x24BDAC7A8](v178);
          memcpy(v461, v3, sizeof(v461));
          v470 = v861;
          v471 = v858;
          v179 = v856;
          v180 = v859;
          v468 = v862;
          v469 = v864;
          v181 = v865;
          v182 = v867;
          v183 = v870;
          v184 = v868;
          v185 = v871;
          v186 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v857, v461[0].f64[0]), v860, v461[0], 1), v863, v461[1].f64[0]), v866, v461[1], 1), v869, v461[2].f64[0]), v872, v461[2], 1);
          v187 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v856, v461[3].f64[0]), v859, v461[3], 1), v862, v461[4].f64[0]), v865, v461[4], 1), v868, v461[5].f64[0]), v871, v461[5], 1);
          v188 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v857, v461[3].f64[0]), v860, v461[3], 1), v863, v461[4].f64[0]), v866, v461[4], 1), v869, v461[5].f64[0]), v872, v461[5], 1);
          v189 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v856, v461[6].f64[0]), v859, v461[6], 1), v862, v461[7].f64[0]), v865, v461[7], 1), v868, v461[8].f64[0]), v871, v461[8], 1);
          v190 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v857, v461[6].f64[0]), v860, v461[6], 1), v863, v461[7].f64[0]), v866, v461[7], 1), v869, v461[8].f64[0]), v872, v461[8], 1);
          v191 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v856, v461[9].f64[0]), v859, v461[9], 1), v862, v461[10].f64[0]), v865, v461[10], 1), v868, v461[11].f64[0]), v871, v461[11], 1);
          v192 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v857, v461[9].f64[0]), v860, v461[9], 1), v863, v461[10].f64[0]), v866, v461[10], 1), v869, v461[11].f64[0]), v872, v461[11], 1);
          v193 = v857;
          v194 = v860;
          v195 = v863;
          v196 = v866;
          v197 = v869;
          v198 = v872;
          v199 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v858, v461[0].f64[0]), v861, v461[0], 1), v864, v461[1].f64[0]), v867, v461[1], 1), v870, v461[2].f64[0]), v873, v461[2], 1);
          v200 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v858, v461[3].f64[0]), v861, v461[3], 1), v864, v461[4].f64[0]), v867, v461[4], 1), v870, v461[5].f64[0]), v873, v461[5], 1);
          v201 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v858, v461[6].f64[0]), v861, v461[6], 1), v864, v461[7].f64[0]), v867, v461[7], 1), v870, v461[8].f64[0]), v873, v461[8], 1);
          v202 = v461[12];
          v203 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v858, v461[9].f64[0]), v861, v461[9], 1), v864, v461[10].f64[0]), v867, v461[10], 1), v870, v461[11].f64[0]), v873, v461[11], 1);
          *v3 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v856, v461[0].f64[0]), v859, v461[0], 1), v862, v461[1].f64[0]), v865, v461[1], 1), v868, v461[2].f64[0]), v871, v461[2], 1);
          v3[1] = v186;
          v3[6] = v189;
          v3[7] = v190;
          v3[2] = v199;
          v3[3] = v187;
          v3[4] = v188;
          v3[5] = v200;
          v3[8] = v201;
          v3[9] = v191;
          v3[10] = v192;
          v3[11] = v203;
          v204 = v461[12];
          v205 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v179, v202.f64[0]), v180, v202, 1), v468, v461[13].f64[0]), v181, v461[13], 1);
          v206 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v193, v202.f64[0]), v194, v202, 1), v195, v461[13].f64[0]), v196, v461[13], 1);
          v207 = v461[14];
          v208 = v461[15];
          v209 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v179, v461[15].f64[0]), v180, v461[15], 1), v468, v461[16].f64[0]), v181, v461[16], 1);
          v210 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v193, v461[15].f64[0]), v194, v461[15], 1), v195, v461[16].f64[0]), v196, v461[16], 1);
          v211 = v461[13];
          v212 = vmlaq_laneq_f64(vmlaq_n_f64(v206, v197, v461[14].f64[0]), v198, v461[14], 1);
          v213 = v461[16];
          v214 = vmlaq_laneq_f64(vmlaq_n_f64(v209, v184, v461[17].f64[0]), v185, v461[17], 1);
          v215 = vmlaq_laneq_f64(vmlaq_n_f64(v210, v197, v461[17].f64[0]), v198, v461[17], 1);
          v3[12] = vmlaq_laneq_f64(vmlaq_n_f64(v205, v184, v461[14].f64[0]), v185, v461[14], 1);
          v3[13] = v212;
          v216 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v471, v204.f64[0]), v470, v204, 1), v469, v211.f64[0]), v182, v211, 1);
          v217 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v471, v208.f64[0]), v470, v208, 1), v469, v213.f64[0]);
          v218 = v873;
          v219 = v461[17];
          v3[14] = vmlaq_laneq_f64(vmlaq_n_f64(v216, v183, v207.f64[0]), v873, v207, 1);
          v3[15] = v214;
          v3[16] = v215;
          v3[17] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v217, v182, v213, 1), v183, v219.f64[0]), v218, v219, 1);
LABEL_13:
          v20 = v464;
          break;
        default:
          break;
      }
      while (2)
      {
        if (*(_BYTE *)(*(_QWORD *)(v7 + 736) + 20) && v20 <= 4)
        {
          v220 = v3 + 18;
          switch((int)v20)
          {
            case 0:
              v221 = v19 + 1;
              if (&v3[36] > &v19[1] && &v19[19] > v220)
              {
                MEMORY[0x24BDAC7A8](v20);
                v20 = (uint64_t)memcpy(&v461[-18], &v19[1], 0x120uLL);
                v221 = &v461[-18];
              }
              MEMORY[0x24BDAC7A8](v20);
              v222 = &v461[-18];
              memcpy(&v461[-18], &v3[18], 0x120uLL);
              v223 = v221[1];
              v225 = v221[3];
              v224 = v221[4];
              v227 = v221[6];
              v226 = v221[7];
              v229 = v221[9];
              v228 = v221[10];
              v230 = v461[-17];
              v231 = v461[-18];
              v232 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v221, v222->f64[0]), v225, *v222, 1), v227, v230.f64[0]), v229, v230, 1);
              v233 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v223, v222->f64[0]), v224, *v222, 1), v226, v230.f64[0]), v228, v230, 1);
              v235 = v461[-16];
              v234 = v461[-15];
              v237 = v234;
              v236 = v461[-14];
              v238 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v221, v234.f64[0]), v225, v234, 1), v227, v236.f64[0]), v229, v236, 1);
              v239 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v223, v234.f64[0]), v224, v234, 1), v226, v236.f64[0]), v228, v236, 1);
              v241 = v461[-13];
              v240 = v461[-12];
              v243 = v240;
              v242 = v461[-11];
              v244 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v221, v240.f64[0]), v225, v240, 1), v227, v242.f64[0]), v229, v242, 1);
              v245 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v223, v240.f64[0]), v224, v240, 1), v226, v242.f64[0]), v228, v242, 1);
              v247 = v461[-10];
              v246 = v461[-9];
              v248 = vmlaq_laneq_f64(vmulq_n_f64(*v221, v246.f64[0]), v225, v246, 1);
              v250 = v246;
              v249 = v461[-8];
              v251 = vmlaq_laneq_f64(vmlaq_n_f64(v248, v227, v249.f64[0]), v229, v249, 1);
              v252 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v223, v246.f64[0]), v224, v246, 1), v226, v249.f64[0]), v228, v249, 1);
              v254 = v221[12];
              v253 = v221[13];
              v256 = v221[15];
              v255 = v221[16];
              v257 = v235;
              v258 = vmlaq_laneq_f64(vmlaq_n_f64(v232, v254, v257.f64[0]), v256, v257, 1);
              v259 = vmlaq_laneq_f64(vmlaq_n_f64(v233, v253, v257.f64[0]), v255, v257, 1);
              v261 = v461[-14];
              v260 = v241;
              v262 = vmlaq_laneq_f64(vmlaq_n_f64(v238, v254, v260.f64[0]), v256, v260, 1);
              v263 = vmlaq_laneq_f64(vmlaq_n_f64(v239, v253, v260.f64[0]), v255, v260, 1);
              v265 = v461[-11];
              v264 = v247;
              v266 = vmlaq_laneq_f64(vmlaq_n_f64(v244, v254, v264.f64[0]), v256, v264, 1);
              v267 = vmlaq_laneq_f64(vmlaq_n_f64(v245, v253, v264.f64[0]), v255, v264, 1);
              v269 = v461[-8];
              v268 = v461[-7];
              v3[18] = v258;
              v3[19] = v259;
              v3[21] = v262;
              v3[22] = v263;
              v3[24] = v266;
              v3[25] = v267;
              v3[27] = vmlaq_laneq_f64(vmlaq_n_f64(v251, v254, v268.f64[0]), v256, v268, 1);
              v3[28] = vmlaq_laneq_f64(vmlaq_n_f64(v252, v253, v268.f64[0]), v255, v268, 1);
              v270 = v221[2];
              v271 = v221[5];
              v272 = v221[8];
              v273 = v221[11];
              v274 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v270, v231.f64[0]), v271, v231, 1), v272, v461[-17].f64[0]), v273, v461[-17], 1);
              v275 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v270, v237.f64[0]), v271, v237, 1), v272, v261.f64[0]), v273, v261, 1);
              v276 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v270, v243.f64[0]), v271, v243, 1), v272, v265.f64[0]), v273, v265, 1);
              v277 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v270, v250.f64[0]), v271, v250, 1), v272, v269.f64[0]), v273, v269, 1);
              v278 = v221[14];
              v279 = v221[17];
              v280 = v461[-6];
              v281 = vmlaq_laneq_f64(vmlaq_n_f64(v277, v278, v461[-7].f64[0]), v279, v461[-7], 1);
              v3[20] = vmlaq_laneq_f64(vmlaq_n_f64(v274, v278, v235.f64[0]), v279, v235, 1);
              v3[23] = vmlaq_laneq_f64(vmlaq_n_f64(v275, v278, v241.f64[0]), v279, v241, 1);
              v3[26] = vmlaq_laneq_f64(vmlaq_n_f64(v276, v278, v247.f64[0]), v279, v247, 1);
              v3[29] = v281;
              v282 = v221[1];
              v284 = v221[3];
              v283 = v221[4];
              v286 = v221[6];
              v285 = v221[7];
              v288 = v221[9];
              v287 = v221[10];
              v290 = v461[-6];
              v289 = v461[-5];
              v291 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v221, v280.f64[0]), v284, v280, 1), v286, v289.f64[0]), v288, v289, 1);
              v292 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v282, v280.f64[0]), v283, v280, 1), v285, v289.f64[0]), v287, v289, 1);
              v294 = v461[-4];
              v293 = v461[-3];
              v295 = vmlaq_laneq_f64(vmulq_n_f64(*v221, v293.f64[0]), v284, v293, 1);
              v297 = v293;
              v296 = v461[-2];
              v298 = vmlaq_laneq_f64(vmlaq_n_f64(v295, v286, v296.f64[0]), v288, v296, 1);
              v299 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v282, v293.f64[0]), v283, v293, 1), v285, v296.f64[0]), v287, v296, 1);
              v301 = v221[12];
              v300 = v221[13];
              v303 = v221[15];
              v302 = v221[16];
              v305 = v461[-5];
              v304 = v294;
              v306 = vmlaq_laneq_f64(vmlaq_n_f64(v291, v301, v304.f64[0]), v303, v304, 1);
              v307 = vmlaq_laneq_f64(vmlaq_n_f64(v292, v300, v304.f64[0]), v302, v304, 1);
              v309 = v461[-2];
              v308 = v461[-1];
              v3[30] = v306;
              v3[31] = v307;
              v3[33] = vmlaq_laneq_f64(vmlaq_n_f64(v298, v301, v308.f64[0]), v303, v308, 1);
              v3[34] = vmlaq_laneq_f64(vmlaq_n_f64(v299, v300, v308.f64[0]), v302, v308, 1);
              v310 = v221[2];
              v311 = v221[5];
              v312 = v221[8];
              v313 = v221[11];
              v314 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v310, v290.f64[0]), v311, v290, 1), v312, v305.f64[0]), v313, v305, 1);
              v315 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v310, v297.f64[0]), v311, v297, 1), v312, v309.f64[0]), v313, v309, 1);
              v316 = v221[14];
              v317 = v221[17];
              v318 = vmlaq_laneq_f64(vmlaq_n_f64(v315, v316, v461[-1].f64[0]), v317, v461[-1], 1);
              v3[32] = vmlaq_laneq_f64(vmlaq_n_f64(v314, v316, v294.f64[0]), v317, v294, 1);
              v3[35] = v318;
              break;
            case 1:
              v319 = 0;
              v321 = (int8x16_t)v3[34];
              v320 = (int8x16_t)v3[35];
              v323 = (int8x16_t)v3[32];
              v322 = (int8x16_t)v3[33];
              v325 = (int8x16_t)v3[30];
              v324 = (int8x16_t)v3[31];
              v327 = (int8x16_t)v3[28];
              v326 = (int8x16_t)v3[29];
              v329 = (int8x16_t)v3[26];
              v328 = (int8x16_t)v3[27];
              v470 = (float64x2_t)vextq_s8(v321, v321, 8uLL);
              v471 = (float64x2_t)vextq_s8(v320, v320, 8uLL);
              v468 = (float64x2_t)vextq_s8(v323, v323, 8uLL);
              v469 = (float64x2_t)vextq_s8(v322, v322, 8uLL);
              v330 = vextq_s8(v324, v324, 8uLL).u64[0];
              v331 = vextq_s8(v325, v325, 8uLL).u64[0];
              v332 = vextq_s8(v326, v326, 8uLL).u64[0];
              v333 = vextq_s8(v327, v327, 8uLL).u64[0];
              v334 = vextq_s8(v328, v328, 8uLL).u64[0];
              v335 = vextq_s8(v329, v329, 8uLL).u64[0];
              v337 = (int8x16_t)v3[24];
              v336 = (int8x16_t)v3[25];
              v338 = vextq_s8(v336, v336, 8uLL).u64[0];
              v340 = (int8x16_t)v3[22];
              v339 = (int8x16_t)v3[23];
              v341 = vextq_s8(v337, v337, 8uLL).u64[0];
              v342 = vextq_s8(v339, v339, 8uLL).u64[0];
              v343 = vextq_s8(v340, v340, 8uLL).u64[0];
              v345 = (int8x16_t)v3[20];
              v344 = (int8x16_t)v3[21];
              v346 = vextq_s8(v344, v344, 8uLL).u64[0];
              v347 = vextq_s8(v345, v345, 8uLL).u64[0];
              v348 = v3 + 20;
              v349 = *(int8x16_t *)v220;
              v350 = (int8x16_t)v3[19];
              v351 = vextq_s8(v350, v350, 8uLL).u64[0];
              v352 = vextq_s8(v349, v349, 8uLL).u64[0];
              do
              {
                v349.i64[1] = v352;
                v350.i64[1] = v351;
                v345.i64[1] = v347;
                v344.i64[1] = v346;
                v353 = v348[-1];
                v354 = v19[2];
                v355 = vmulq_f64(v348[-2], v19[1]);
                v467 = *v348;
                v356 = v19[3];
                v465 = v355;
                v466 = v356;
                v632 = v349;
                v633 = v350;
                v634 = v345;
                v635 = v344;
                v340.i64[1] = v343;
                v339.i64[1] = v342;
                v337.i64[1] = v341;
                v636 = v340;
                v637 = v339;
                v336.i64[1] = v338;
                v329.i64[1] = v335;
                v638 = v337;
                v639 = v336;
                v328.i64[1] = v334;
                v327.i64[1] = v333;
                v640 = v329;
                v641 = v328;
                v326.i64[1] = v332;
                v325.i64[1] = v331;
                v642 = v327;
                v643 = v326;
                v324.i64[1] = v330;
                v323.i64[1] = *(_QWORD *)&v468.f64[0];
                v644 = v325;
                v645 = v324;
                v322.i64[1] = *(_QWORD *)&v469.f64[0];
                v321.i64[1] = *(_QWORD *)&v470.f64[0];
                v646 = v323;
                v647 = v322;
                v320.i64[1] = *(_QWORD *)&v471.f64[0];
                v648 = v321;
                v649 = v320;
                v632.i64[v319 & 0x3F] = *(_QWORD *)&v355.f64[0];
                v471 = vmulq_f64(v353, v354);
                v631 = v663;
                v630 = v662;
                v629 = v661;
                v628 = v660;
                v627 = v659;
                v626 = v658;
                v625 = v657;
                v624 = v656;
                v623 = v655;
                v622 = v654;
                v621 = v653;
                v620 = v652;
                v619 = v651;
                v618 = v650;
                v617 = v649;
                v616 = v648;
                v615 = v647;
                v614 = v646;
                v613 = v645;
                v612 = v644;
                v611 = v643;
                v610 = v642;
                v609 = v641;
                v608 = v640;
                v607 = v639;
                v606 = v638;
                v605 = v637;
                v604 = v636;
                v603 = v635;
                v602 = v634;
                v601 = v633;
                v600 = v632;
                v600.i64[((_BYTE)v319 + 1) & 0x3F] = *(_QWORD *)&v465.f64[1];
                v599 = v631;
                v598 = v630;
                v597 = v629;
                v596 = v628;
                v595 = v627;
                v594 = v626;
                v593 = v625;
                v592 = v624;
                v591 = v623;
                v590 = v622;
                v589 = v621;
                v588 = v620;
                v587 = v619;
                v586 = v618;
                v585 = v617;
                v584 = v616;
                v583 = v615;
                v582 = v614;
                v581 = v613;
                v580 = v612;
                v579 = v611;
                v578 = v610;
                v577 = v609;
                v576 = v608;
                v575 = v607;
                v574 = v606;
                v573 = v605;
                v572 = v604;
                v571 = v603;
                v570 = v602;
                v569 = v601;
                v568 = v600;
                v357 = v471.f64[1];
                v568.i64[((_BYTE)v319 + 2) & 0x3F] = *(_QWORD *)&v471.f64[0];
                v470 = vmulq_f64(v467, v466);
                v567 = v599;
                v566 = v598;
                v565 = v597;
                v564 = v596;
                v563 = v595;
                v562 = v594;
                v561 = v593;
                v560 = v592;
                v559 = v591;
                v558 = v590;
                v557 = v589;
                v556 = v588;
                v555 = v587;
                v554 = v586;
                v553 = v585;
                v552 = v584;
                v551 = v583;
                v550 = v582;
                v549 = v581;
                v548 = v580;
                v547 = v579;
                v546 = v578;
                v545 = v577;
                v544 = v576;
                v543 = v575;
                v542 = v574;
                v541 = v573;
                v540 = v572;
                v539 = v571;
                v538 = v570;
                v537 = v569;
                v536 = v568;
                *(float64_t *)&v536.i64[((_BYTE)v319 + 3) & 0x3F] = v357;
                v535 = v567;
                v534 = v566;
                v533 = v565;
                v532 = v564;
                v531 = v563;
                v530 = v562;
                v529 = v561;
                v528 = v560;
                v526 = v558;
                v527 = v559;
                v524 = v556;
                v525 = v557;
                v522 = v554;
                v523 = v555;
                v520 = v552;
                v521 = v553;
                v518 = v550;
                v519 = v551;
                v516 = v548;
                v517 = v549;
                v514 = v546;
                v515 = v547;
                v512 = v544;
                v513 = v545;
                v510 = v542;
                v511 = v543;
                v508 = v540;
                v509 = v541;
                v506 = v538;
                v507 = v539;
                v504 = v536;
                v505 = v537;
                v358 = v470.f64[1];
                v504.i64[((_BYTE)v319 + 4) & 0x3F] = *(_QWORD *)&v470.f64[0];
                v502 = v534;
                v503 = v535;
                v500 = v532;
                v501 = v533;
                v498 = v530;
                v499 = v531;
                v496 = v528;
                v497 = v529;
                v494 = v526;
                v495 = v527;
                v492 = v524;
                v493 = v525;
                v490 = v522;
                v491 = v523;
                v488 = v520;
                v489 = v521;
                v486 = v518;
                v487 = v519;
                v484 = v516;
                v485 = v517;
                v482 = v514;
                v483 = v515;
                v480 = v512;
                v481 = v513;
                v478 = v510;
                v479 = v511;
                v476 = v508;
                v477 = v509;
                v474 = v506;
                v475 = v507;
                v473 = v505;
                v472 = v504;
                *(float64_t *)&v472.i64[((_BYTE)v319 + 5) & 0x3F] = v358;
                v321 = v488;
                v320 = v489;
                v323 = v486;
                v322 = v487;
                v325 = v484;
                v324 = v485;
                v327 = v482;
                v326 = v483;
                v329 = v480;
                v328 = v481;
                v337 = v478;
                v336 = v479;
                v340 = v476;
                v339 = v477;
                v345 = v474;
                v344 = v475;
                v349 = v472;
                v350 = v473;
                v471 = (float64x2_t)vextq_s8(v320, v320, 8uLL);
                v470 = (float64x2_t)vextq_s8(v321, v321, 8uLL);
                v469 = (float64x2_t)vextq_s8(v322, v322, 8uLL);
                v468 = (float64x2_t)vextq_s8(v323, v323, 8uLL);
                v330 = vextq_s8(v324, v324, 8uLL).u64[0];
                v331 = vextq_s8(v325, v325, 8uLL).u64[0];
                v332 = vextq_s8(v326, v326, 8uLL).u64[0];
                v333 = vextq_s8(v327, v327, 8uLL).u64[0];
                v334 = vextq_s8(v328, v328, 8uLL).u64[0];
                v335 = vextq_s8(v329, v329, 8uLL).u64[0];
                v338 = vextq_s8(v336, v336, 8uLL).u64[0];
                v341 = vextq_s8(v337, v337, 8uLL).u64[0];
                v342 = vextq_s8(v339, v339, 8uLL).u64[0];
                v343 = vextq_s8(v340, v340, 8uLL).u64[0];
                v3[20] = (float64x2_t)v474;
                v3[21] = (float64x2_t)v344;
                v3[22] = (float64x2_t)v340;
                v3[23] = (float64x2_t)v339;
                v3[24] = (float64x2_t)v337;
                v3[25] = (float64x2_t)v336;
                v3[26] = (float64x2_t)v329;
                v3[27] = (float64x2_t)v328;
                v3[28] = (float64x2_t)v327;
                v3[29] = (float64x2_t)v326;
                v3[30] = (float64x2_t)v325;
                v3[31] = (float64x2_t)v324;
                v3[32] = (float64x2_t)v323;
                v3[33] = (float64x2_t)v322;
                v319 += 6;
                v348 += 3;
                v3[34] = (float64x2_t)v321;
                v3[35] = (float64x2_t)v320;
                *v220 = (float64x2_t)v349;
                v3[19] = (float64x2_t)v350;
                v346 = vextq_s8(v344, v344, 8uLL).u64[0];
                v347 = vextq_s8(v345, v345, 8uLL).u64[0];
                v351 = vextq_s8(v350, v350, 8uLL).u64[0];
                v352 = vextq_s8(v349, v349, 8uLL).u64[0];
              }
              while (v319 != 36);
              break;
            case 2:
              v359 = v19[1].f64[0];
              v360 = vmulq_n_f64(*v220, v359);
              v361 = vmulq_n_f64(v3[19], v359);
              v362 = vmulq_n_f64(v3[20], v359);
              v363 = vmulq_n_f64(v3[21], v359);
              v364 = vmulq_n_f64(v3[22], v359);
              v365 = vmulq_n_f64(v3[23], v359);
              v366 = vmulq_n_f64(v3[24], v359);
              v367 = vmulq_n_f64(v3[25], v359);
              v368 = vmulq_n_f64(v3[26], v359);
              v369 = vmulq_n_f64(v3[27], v359);
              v370 = vmulq_n_f64(v3[28], v359);
              v371 = vmulq_n_f64(v3[29], v359);
              v372 = vmulq_n_f64(v3[30], v359);
              v373 = vmulq_n_f64(v3[31], v359);
              v374 = vmulq_n_f64(v3[32], v359);
              v375 = vmulq_n_f64(v3[33], v359);
              v376 = vmulq_n_f64(v3[34], v359);
              v377 = vmulq_n_f64(v3[35], v359);
              v3[34] = v376;
              v3[35] = v377;
              v3[32] = v374;
              v3[33] = v375;
              v3[30] = v372;
              v3[31] = v373;
              v3[28] = v370;
              v3[29] = v371;
              v3[26] = v368;
              v3[27] = v369;
              v3[24] = v366;
              v3[25] = v367;
              v3[22] = v364;
              v3[23] = v365;
              v3[20] = v362;
              v3[21] = v363;
              *v220 = v360;
              v3[19] = v361;
              break;
            case 3:
              break;
            case 4:
              v378 = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v19->f64[0] + 56))(&v856, v19);
              MEMORY[0x24BDAC7A8](v378);
              memcpy(&v461[-18], &v3[18], 0x120uLL);
              v379 = v461[-18];
              v380 = v461[-17];
              v381 = vmlaq_laneq_f64(vmulq_n_f64(v856, v461[-18].f64[0]), v859, v379, 1);
              v470 = v861;
              v471 = v858;
              v382 = vmlaq_laneq_f64(vmlaq_n_f64(v381, v862, v380.f64[0]), v865, v380, 1);
              v383 = v856;
              v384 = v859;
              v468 = v862;
              v469 = v864;
              v385 = v865;
              v386 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v857, v379.f64[0]), v860, v379, 1), v863, v380.f64[0]), v866, v380, 1);
              v387 = v461[-15];
              v388 = v461[-14];
              v389 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v856, v387.f64[0]), v859, v387, 1), v862, v388.f64[0]), v865, v388, 1);
              v390 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v857, v387.f64[0]), v860, v387, 1), v863, v388.f64[0]), v866, v388, 1);
              v391 = v461[-12];
              v392 = v461[-11];
              v393 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v856, v391.f64[0]), v859, v391, 1), v862, v392.f64[0]), v865, v392, 1);
              v394 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v857, v391.f64[0]), v860, v391, 1), v863, v392.f64[0]), v866, v392, 1);
              v395 = v461[-9];
              v396 = vmlaq_laneq_f64(vmulq_n_f64(v856, v395.f64[0]), v859, v395, 1);
              v397 = v461[-8];
              v398 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v857, v395.f64[0]), v860, v395, 1), v863, v397.f64[0]), v866, v397, 1);
              v399 = v461[-16];
              v400 = v867;
              v401 = v870;
              v402 = vmlaq_laneq_f64(vmlaq_n_f64(v382, v868, v399.f64[0]), v871, v399, 1);
              v403 = v868;
              v404 = v871;
              v405 = vmlaq_laneq_f64(vmlaq_n_f64(v386, v869, v399.f64[0]), v872, v399, 1);
              v406 = v461[-13];
              v407 = vmlaq_laneq_f64(vmlaq_n_f64(v389, v868, v406.f64[0]), v871, v406, 1);
              v408 = vmlaq_laneq_f64(vmlaq_n_f64(v390, v869, v406.f64[0]), v872, v406, 1);
              v409 = v461[-10];
              v410 = vmlaq_laneq_f64(vmlaq_n_f64(v393, v868, v409.f64[0]), v871, v409, 1);
              v411 = vmlaq_laneq_f64(vmlaq_n_f64(v394, v869, v409.f64[0]), v872, v409, 1);
              v412 = v461[-7];
              v413 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v396, v862, v397.f64[0]), v865, v397, 1), v868, v412.f64[0]), v871, v412, 1);
              v414 = vmlaq_laneq_f64(vmlaq_n_f64(v398, v869, v412.f64[0]), v872, v412, 1);
              v415 = v857;
              v416 = v860;
              v417 = v863;
              v418 = v866;
              v419 = v869;
              v420 = v872;
              v421 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v858, v379.f64[0]), v861, v379, 1), v864, v461[-17].f64[0]), v867, v461[-17], 1), v870, v461[-16].f64[0]), v873, v461[-16], 1);
              v422 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v858, v461[-15].f64[0]), v861, v461[-15], 1), v864, v461[-14].f64[0]), v867, v388, 1), v870, v461[-13].f64[0]), v873, v461[-13], 1);
              v423 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v858, v461[-12].f64[0]), v861, v461[-12], 1), v864, v461[-11].f64[0]), v867, v392, 1), v870, v461[-10].f64[0]), v873, v461[-10], 1);
              v424 = v461[-6];
              v425 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v858, v461[-9].f64[0]), v861, v461[-9], 1), v864, v461[-8].f64[0]), v867, v461[-8], 1), v870, v461[-7].f64[0]), v873, v412, 1);
              v3[18] = v402;
              v3[19] = v405;
              v3[21] = v407;
              v3[22] = v408;
              v3[27] = v413;
              v3[28] = v414;
              v3[20] = v421;
              v3[23] = v422;
              v3[24] = v410;
              v3[25] = v411;
              v3[26] = v423;
              v427 = v461[-6];
              v426 = v461[-5];
              v428 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v383, v424.f64[0]), v384, v424, 1), v468, v426.f64[0]), v385, v426, 1);
              v429 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v415, v424.f64[0]), v416, v424, 1), v417, v426.f64[0]), v418, v426, 1);
              v431 = v461[-4];
              v430 = v461[-3];
              v432 = vmlaq_laneq_f64(vmulq_n_f64(v383, v430.f64[0]), v384, v430, 1);
              v433 = vmlaq_laneq_f64(vmulq_n_f64(v415, v430.f64[0]), v416, v430, 1);
              v435 = v430;
              v434 = v461[-2];
              v436 = vmlaq_laneq_f64(vmlaq_n_f64(v432, v468, v434.f64[0]), v385, v434, 1);
              v437 = vmlaq_laneq_f64(vmlaq_n_f64(v433, v417, v434.f64[0]), v418, v434, 1);
              v439 = v461[-5];
              v438 = v431;
              v440 = vmlaq_laneq_f64(vmlaq_n_f64(v428, v403, v438.f64[0]), v404, v438, 1);
              v441 = vmlaq_laneq_f64(vmlaq_n_f64(v429, v419, v438.f64[0]), v420, v438, 1);
              v443 = v461[-2];
              v442 = v461[-1];
              v3[29] = v425;
              v3[30] = v440;
              v3[33] = vmlaq_laneq_f64(vmlaq_n_f64(v436, v403, v442.f64[0]), v404, v442, 1);
              v3[34] = vmlaq_laneq_f64(vmlaq_n_f64(v437, v419, v442.f64[0]), v420, v442, 1);
              v444 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v471, v427.f64[0]), v470, v427, 1), v469, v439.f64[0]), v400, v439, 1);
              v445 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v471, v435.f64[0]), v470, v435, 1), v469, v443.f64[0]), v400, v443, 1);
              v446 = v873;
              v447 = v461[-1];
              v448 = vmlaq_laneq_f64(vmlaq_n_f64(v444, v401, v431.f64[0]), v873, v431, 1);
              v3[31] = v441;
              v3[32] = v448;
              v3[35] = vmlaq_laneq_f64(vmlaq_n_f64(v445, v401, v447.f64[0]), v446, v447, 1);
              break;
            default:
              continue;
          }
        }
        break;
      }
    }
    v449 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)(v7 + 744) = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 760) = v449;
    _Q2 = *(_OWORD *)v8;
    _Q1 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)(v7 + 776) = *(_OWORD *)(v8 + 32);
    _D4 = *((_QWORD *)&_Q2 + 1);
    __asm { FMLA            D3, D4, V2.D[1] }
    *(_QWORD *)&_Q2 = *((_QWORD *)&_Q1 + 1);
    __asm { FMLA            D3, D2, V1.D[1] }
    *(_QWORD *)&_Q1 = *(_QWORD *)(v8 + 40);
    __asm { FMLA            D3, D1, V0.D[1] }
    v17 = *(double *)(v5 + 8) * _D3;
  }
  *(double *)(v7 + 840) = v17;
  return v16;
}

float64x2_t sub_20F589D64(uint64_t a1, uint64_t a2, float64x2_t *a3, double a4, double a5, double a6, double a7, float64x2_t a8)
{
  int8x16_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t result;
  int8x16_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  float64x2_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  int8x16_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  float64x2_t *v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  int8x16_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  float64x2_t *v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  const double *f64;
  const double *v54;
  float64x2_t *v55;
  const double *v56;
  const double *v57;
  float64x2_t *v58;
  const double *v59;
  const double *v60;
  float64x2_t *v61;
  const double *v62;
  const double *v63;
  float64x2_t *v64;
  float64x2_t v65;
  float64x2_t v66;
  uint64_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  uint64_t v71;
  float64x2_t v72;
  float64x2x2_t v73;
  float64x2x2_t v74;
  float64x2x2_t v75;
  float64x2x2_t v76;
  float64x2x2_t v77;
  float64x2x2_t v78;
  float64x2x2_t v79;
  float64x2x2_t v80;

  if (*(_BYTE *)a2)
  {
    v8 = (int8x16_t)vmulq_f64(a3[5], a3[5]);
    a8 = vmulq_f64(a3[4], a3[4]);
    v9 = (int64x2_t)vmulq_f64(a3[1], a3[1]);
    v10 = (int64x2_t)vmulq_f64(*a3, *a3);
    v11 = (int64x2_t)vmulq_f64(a3[3], a3[3]);
    v12 = (int64x2_t)vmulq_f64(a3[2], a3[2]);
    v13 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 64) + 6 * *(_DWORD *)(a2 + 4)));
    v14 = (float64x2_t)vzip1q_s64(v12, v11);
    v15 = (float64x2_t)vzip2q_s64(v12, v11);
    v16 = vaddq_f64((float64x2_t)vzip1q_s64(v10, v9), (float64x2_t)vzip2q_s64(v10, v9));
    v17 = (float64x2_t)vextq_s8((int8x16_t)a8, v8, 8uLL);
    *(_QWORD *)&a8.f64[1] = v8.i64[1];
    v18 = vaddq_f64(v13[2], vaddq_f64(v17, a8));
    result = vaddq_f64(v13[1], vaddq_f64(v14, v15));
    *v13 = vaddq_f64(*v13, v16);
    v13[1] = result;
    v13[2] = v18;
  }
  if (*(_BYTE *)(a2 + 8))
  {
    v20 = (int8x16_t)vmulq_f64(a3[11], a3[11]);
    a8 = vmulq_f64(a3[10], a3[10]);
    v21 = (int64x2_t)vmulq_f64(a3[7], a3[7]);
    v22 = (int64x2_t)vmulq_f64(a3[6], a3[6]);
    v23 = (int64x2_t)vmulq_f64(a3[9], a3[9]);
    v24 = (int64x2_t)vmulq_f64(a3[8], a3[8]);
    v25 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 64) + 6 * *(_DWORD *)(a2 + 12)));
    v26 = (float64x2_t)vzip1q_s64(v24, v23);
    v27 = (float64x2_t)vzip2q_s64(v24, v23);
    v28 = vaddq_f64((float64x2_t)vzip1q_s64(v22, v21), (float64x2_t)vzip2q_s64(v22, v21));
    v29 = (float64x2_t)vextq_s8((int8x16_t)a8, v20, 8uLL);
    *(_QWORD *)&a8.f64[1] = v20.i64[1];
    v30 = vaddq_f64(v25[2], vaddq_f64(v29, a8));
    result = vaddq_f64(v25[1], vaddq_f64(v26, v27));
    *v25 = vaddq_f64(*v25, v28);
    v25[1] = result;
    v25[2] = v30;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    v31 = (int8x16_t)vmulq_f64(a3[17], a3[17]);
    a8 = vmulq_f64(a3[16], a3[16]);
    v32 = (int64x2_t)vmulq_f64(a3[13], a3[13]);
    v33 = (int64x2_t)vmulq_f64(a3[12], a3[12]);
    v34 = (int64x2_t)vmulq_f64(a3[15], a3[15]);
    v35 = (int64x2_t)vmulq_f64(a3[14], a3[14]);
    v36 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 52) + 6 * *(_DWORD *)(a2 + 20)));
    v37 = (float64x2_t)vzip1q_s64(v35, v34);
    v38 = (float64x2_t)vzip2q_s64(v35, v34);
    v39 = vaddq_f64((float64x2_t)vzip1q_s64(v33, v32), (float64x2_t)vzip2q_s64(v33, v32));
    v40 = (float64x2_t)vextq_s8((int8x16_t)a8, v31, 8uLL);
    *(_QWORD *)&a8.f64[1] = v31.i64[1];
    v41 = vaddq_f64(v36[2], vaddq_f64(v40, a8));
    result = vaddq_f64(v36[1], vaddq_f64(v37, v38));
    *v36 = vaddq_f64(*v36, v39);
    v36[1] = result;
    v36[2] = v41;
  }
  if (*(_BYTE *)(a2 + 24))
  {
    v42 = (int8x16_t)vmulq_f64(a3[23], a3[23]);
    a8 = vmulq_f64(a3[22], a3[22]);
    v43 = (int64x2_t)vmulq_f64(a3[19], a3[19]);
    v44 = (int64x2_t)vmulq_f64(a3[18], a3[18]);
    v45 = (int64x2_t)vmulq_f64(a3[21], a3[21]);
    v46 = (int64x2_t)vmulq_f64(a3[20], a3[20]);
    v47 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 52) + 6 * *(_DWORD *)(a2 + 28)));
    v48 = (float64x2_t)vzip1q_s64(v46, v45);
    v49 = (float64x2_t)vzip2q_s64(v46, v45);
    v50 = vaddq_f64((float64x2_t)vzip1q_s64(v44, v43), (float64x2_t)vzip2q_s64(v44, v43));
    v51 = (float64x2_t)vextq_s8((int8x16_t)a8, v42, 8uLL);
    *(_QWORD *)&a8.f64[1] = v42.i64[1];
    v52 = vaddq_f64(v47[2], vaddq_f64(v51, a8));
    result = vaddq_f64(v47[1], vaddq_f64(v48, v49));
    *v47 = vaddq_f64(*v47, v50);
    v47[1] = result;
    v47[2] = v52;
  }
  if (*(_BYTE *)(a2 + 32))
  {
    f64 = a3[24].f64;
    v73 = vld2q_f64(f64);
    v54 = a3[26].f64;
    v77 = vld2q_f64(v54);
    v55 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 68) + 4 * *(_DWORD *)(a2 + 36)));
    a8 = *v55;
    v73.val[0] = vaddq_f64(vmulq_f64(v73.val[0], v73.val[0]), vmulq_f64(v73.val[1], v73.val[1]));
    v73.val[1] = vaddq_f64(v55[1], vaddq_f64(vmulq_f64(v77.val[0], v77.val[0]), vmulq_f64(v77.val[1], v77.val[1])));
    result = vaddq_f64(*v55, v73.val[0]);
    *v55 = result;
    v55[1] = v73.val[1];
  }
  if (*(_BYTE *)(a2 + 40))
  {
    v56 = a3[28].f64;
    v74 = vld2q_f64(v56);
    v57 = a3[30].f64;
    v78 = vld2q_f64(v57);
    v58 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 68) + 4 * *(_DWORD *)(a2 + 44)));
    a8 = *v58;
    v74.val[0] = vaddq_f64(vmulq_f64(v74.val[0], v74.val[0]), vmulq_f64(v74.val[1], v74.val[1]));
    v74.val[1] = vaddq_f64(v58[1], vaddq_f64(vmulq_f64(v78.val[0], v78.val[0]), vmulq_f64(v78.val[1], v78.val[1])));
    result = vaddq_f64(*v58, v74.val[0]);
    *v58 = result;
    v58[1] = v74.val[1];
  }
  if (*(_BYTE *)(a2 + 48))
  {
    v59 = a3[32].f64;
    v75 = vld2q_f64(v59);
    v60 = a3[34].f64;
    v79 = vld2q_f64(v60);
    v61 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 72) + 4 * *(_DWORD *)(a2 + 52)));
    a8 = *v61;
    v75.val[0] = vaddq_f64(vmulq_f64(v75.val[0], v75.val[0]), vmulq_f64(v75.val[1], v75.val[1]));
    v75.val[1] = vaddq_f64(v61[1], vaddq_f64(vmulq_f64(v79.val[0], v79.val[0]), vmulq_f64(v79.val[1], v79.val[1])));
    result = vaddq_f64(*v61, v75.val[0]);
    *v61 = result;
    v61[1] = v75.val[1];
  }
  if (*(_BYTE *)(a2 + 56))
  {
    v62 = a3[36].f64;
    v76 = vld2q_f64(v62);
    v63 = a3[38].f64;
    v80 = vld2q_f64(v63);
    v64 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 72) + 4 * *(_DWORD *)(a2 + 60)));
    a8 = *v64;
    v76.val[0] = vaddq_f64(vmulq_f64(v76.val[0], v76.val[0]), vmulq_f64(v76.val[1], v76.val[1]));
    v76.val[1] = vaddq_f64(v64[1], vaddq_f64(vmulq_f64(v80.val[0], v80.val[0]), vmulq_f64(v80.val[1], v80.val[1])));
    result = vaddq_f64(*v64, v76.val[0]);
    *v64 = result;
    v64[1] = v76.val[1];
  }
  if (*(_BYTE *)(a2 + 64))
  {
    v65 = vmulq_f64(a3[41], a3[41]);
    v66 = vmulq_f64(a3[40], a3[40]);
    v67 = **(_QWORD **)a1 + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 76) + 3 * *(_DWORD *)(a2 + 68));
    a8.f64[0] = *(float64_t *)(v67 + 16);
    v68 = (float64x2_t)vextq_s8((int8x16_t)v66, (int8x16_t)v65, 8uLL);
    v66.f64[1] = v65.f64[1];
    v65.f64[0] = vaddvq_f64(vmulq_f64(a3[42], a3[42]));
    result = vaddq_f64(*(float64x2_t *)v67, vaddq_f64(v68, v66));
    *(float64x2_t *)v67 = result;
    *(_QWORD *)(v67 + 16) = *(_OWORD *)&vaddq_f64(a8, v65);
  }
  if (*(_BYTE *)(a2 + 72))
  {
    v69 = vmulq_f64(a3[44], a3[44]);
    v70 = vmulq_f64(a3[43], a3[43]);
    v71 = **(_QWORD **)a1 + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 76) + 3 * *(_DWORD *)(a2 + 76));
    a8.f64[0] = *(float64_t *)(v71 + 16);
    v72 = (float64x2_t)vextq_s8((int8x16_t)v70, (int8x16_t)v69, 8uLL);
    v70.f64[1] = v69.f64[1];
    v69.f64[0] = vaddvq_f64(vmulq_f64(a3[45], a3[45]));
    result = vaddq_f64(*(float64x2_t *)v71, vaddq_f64(v72, v70));
    *(float64x2_t *)v71 = result;
    *(_QWORD *)(v71 + 16) = *(_OWORD *)&vaddq_f64(a8, v69);
  }
  return result;
}

double sub_20F58A1AC(double *a1, double *a2)
{
  double result;

  *a1 = a2[1]
      + a2[2]
      + a2[3]
      + a2[4]
      + a2[5]
      + a2[6]
      + a2[7]
      + a2[8]
      + a2[9]
      + a2[10]
      + a2[11]
      + a2[12]
      + a2[13]
      + a2[14]
      + a2[15];
  a1[1] = a2[16]
        + a2[17]
        + a2[18]
        + a2[19]
        + a2[20]
        + a2[21]
        + a2[22]
        + a2[23]
        + a2[24]
        + a2[25]
        + a2[26]
        + a2[27]
        + a2[28]
        + a2[29]
        + a2[30];
  a1[2] = a2[31]
        + a2[32]
        + a2[33]
        + a2[34]
        + a2[35]
        + a2[36]
        + a2[37]
        + a2[38]
        + a2[39]
        + a2[40]
        + a2[41]
        + a2[42]
        + a2[43]
        + a2[44]
        + a2[45];
  a1[3] = a2[46]
        + a2[47]
        + a2[48]
        + a2[49]
        + a2[50]
        + a2[51]
        + a2[52]
        + a2[53]
        + a2[54]
        + a2[55]
        + a2[56]
        + a2[57]
        + a2[58]
        + a2[59]
        + a2[60];
  a1[4] = a2[61]
        + a2[62]
        + a2[63]
        + a2[64]
        + a2[65]
        + a2[66]
        + a2[67]
        + a2[68]
        + a2[69]
        + a2[70]
        + a2[71]
        + a2[72]
        + a2[73]
        + a2[74]
        + a2[75];
  a1[5] = a2[76]
        + a2[77]
        + a2[78]
        + a2[79]
        + a2[80]
        + a2[81]
        + a2[82]
        + a2[83]
        + a2[84]
        + a2[85]
        + a2[86]
        + a2[87]
        + a2[88]
        + a2[89]
        + a2[90];
  a1[6] = a2[91]
        + a2[92]
        + a2[93]
        + a2[94]
        + a2[95]
        + a2[96]
        + a2[97]
        + a2[98]
        + a2[99]
        + a2[100]
        + a2[101]
        + a2[102]
        + a2[103]
        + a2[104]
        + a2[105];
  a1[7] = a2[106]
        + a2[107]
        + a2[108]
        + a2[109]
        + a2[110]
        + a2[111]
        + a2[112]
        + a2[113]
        + a2[114]
        + a2[115]
        + a2[116]
        + a2[117]
        + a2[118]
        + a2[119]
        + a2[120];
  result = a2[121]
         + a2[122]
         + a2[123]
         + a2[124]
         + a2[125]
         + a2[126]
         + a2[127]
         + a2[128]
         + a2[129]
         + a2[130]
         + a2[131]
         + a2[132]
         + a2[133]
         + a2[134]
         + a2[135];
  a1[8] = result;
  return result;
}

uint64_t sub_20F58A570(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_20F4FD380((uint64_t)(a1 + 144));
  v2 = a1[141];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v3 = a1[138];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  v4 = a1[135];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[132];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  v6 = a1[129];
  if (v6)
    MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
  v7 = a1[126];
  if (v7)
    MEMORY[0x212BC6368](v7, 0x1000C8000313F17);
  sub_20F4FD380((uint64_t)(a1 + 105));
  sub_20F4FD380((uint64_t)(a1 + 84));
  sub_20F4FD380((uint64_t)(a1 + 63));
  sub_20F4FD380((uint64_t)(a1 + 42));
  sub_20F4FD380((uint64_t)(a1 + 21));
  return sub_20F4FD380((uint64_t)a1);
}

BOOL sub_20F58A66C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  int64x2_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int64x2_t v22;
  _QWORD *v23;
  _QWORD *v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t mm;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  BOOL v68;
  int64x2_t v69;
  _QWORD *v70;
  _QWORD *v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t nn;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  int64x2_t v119;
  _QWORD *v120;
  __int128 v121;
  _QWORD *v122;
  __int128 v123;
  uint64_t v124;
  __int128 v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t i1;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  __int128 v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  _QWORD *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  uint64_t v280;
  int v281;
  uint64_t v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  int v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  void *v313;
  unint64_t v314;
  char *v315;
  int *v316;
  int *v317;
  uint64_t v318;
  int v319;
  char *v320;
  unint64_t v321;
  char *v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  _BYTE *v328;
  _DWORD *v329;
  int64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  char *v334;
  _OWORD *v335;
  char *v336;
  uint64_t v337;
  __int128 v338;
  int v339;
  void *v340;
  unint64_t v341;
  char *v342;
  int *v343;
  int *v344;
  uint64_t v345;
  int v346;
  char *v347;
  unint64_t v348;
  char *v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  _BYTE *v355;
  _DWORD *v356;
  int64_t v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  char *v361;
  _OWORD *v362;
  char *v363;
  uint64_t v364;
  __int128 v365;
  int v366;
  void *v367;
  unint64_t v368;
  char *v369;
  int *v370;
  int *v371;
  uint64_t v372;
  int v373;
  char *v374;
  unint64_t v375;
  char *v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  unint64_t v381;
  _BYTE *v382;
  _DWORD *v383;
  int64_t v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  char *v388;
  _OWORD *v389;
  char *v390;
  uint64_t v391;
  __int128 v392;
  int v393;
  void *v394;
  unint64_t v395;
  char *v396;
  int *v397;
  int *v398;
  uint64_t v399;
  int v400;
  char *v401;
  unint64_t v402;
  char *v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  uint64_t v407;
  unint64_t v408;
  _BYTE *v409;
  _DWORD *v410;
  int64_t v411;
  unint64_t v412;
  uint64_t v413;
  uint64_t v414;
  char *v415;
  _OWORD *v416;
  char *v417;
  uint64_t v418;
  __int128 v419;
  int v420;
  void *v421;
  unint64_t v422;
  char *v423;
  int *v424;
  int *v425;
  uint64_t v426;
  int v427;
  char *v428;
  unint64_t v429;
  char *v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  unint64_t v435;
  _BYTE *v436;
  _DWORD *v437;
  int64_t v438;
  unint64_t v439;
  uint64_t v440;
  uint64_t v441;
  char *v442;
  _OWORD *v443;
  char *v444;
  uint64_t v445;
  __int128 v446;
  int v447;
  void *v448;
  unint64_t v449;
  char *v450;
  int *v451;
  int *v452;
  uint64_t v453;
  int v454;
  char *v455;
  unint64_t v456;
  char *v457;
  uint64_t v458;
  uint64_t v459;
  unint64_t v460;
  uint64_t v461;
  unint64_t v462;
  _BYTE *v463;
  _DWORD *v464;
  int64_t v465;
  unint64_t v466;
  uint64_t v467;
  uint64_t v468;
  char *v469;
  _OWORD *v470;
  char *v471;
  uint64_t v472;
  __int128 v473;
  int v474;
  void *v475;
  unint64_t v476;
  char *v477;
  int *v478;
  int *v479;
  _DWORD *v480;
  int v481;
  char *v482;
  unint64_t v483;
  char *v484;
  uint64_t v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  unint64_t v489;
  _BYTE *v490;
  _DWORD *v491;
  unint64_t v492;
  uint64_t v493;
  uint64_t v494;
  char *v495;
  _OWORD *v496;
  char *v497;
  uint64_t v498;
  __int128 v499;
  int v500;
  uint64_t v501;
  uint64_t v502;
  __int128 v503;
  int v504;
  int v505;
  int v506;
  int v507;
  int v508;
  unsigned int *v509;
  int *v510;
  int *v511;
  unsigned int *v512;
  int v513;
  unint64_t v514;
  _DWORD *v515;
  unint64_t v516;
  unint64_t v517;
  unint64_t v518;
  char *v519;
  char *v520;
  char *v521;
  uint64_t v522;
  unsigned int v523;
  int *v524;
  int *v525;
  unsigned int *v526;
  int v527;
  unint64_t v528;
  _DWORD *v529;
  unint64_t v530;
  unint64_t v531;
  unint64_t v532;
  char *v533;
  char *v534;
  char *v535;
  uint64_t v536;
  unsigned int v537;
  int *v538;
  int *v539;
  unsigned int *v540;
  int v541;
  unint64_t v542;
  _DWORD *v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  char *v547;
  char *v548;
  char *v549;
  uint64_t v550;
  unsigned int v551;
  int *v552;
  int *v553;
  unsigned int *v554;
  int v555;
  unint64_t v556;
  _DWORD *v557;
  unint64_t v558;
  unint64_t v559;
  unint64_t v560;
  char *v561;
  char *v562;
  char *v563;
  uint64_t v564;
  unsigned int v565;
  int *v566;
  int *v567;
  unsigned int *v568;
  unsigned int v569;
  unint64_t v570;
  _DWORD *v571;
  unint64_t v572;
  unint64_t v573;
  unint64_t v574;
  char *v575;
  char *v576;
  char *v577;
  uint64_t v578;
  unsigned int v579;
  unsigned int *v580;
  unsigned int *v581;
  unsigned int *v582;
  unsigned int v583;
  unint64_t v584;
  _DWORD *v585;
  unint64_t v586;
  unint64_t v587;
  unint64_t v588;
  char *v589;
  char *v590;
  char *v591;
  uint64_t v592;
  unsigned int v593;
  unsigned int *v594;
  unsigned int *v595;
  unsigned int *v596;
  unsigned int v597;
  unint64_t v598;
  _DWORD *v599;
  unint64_t v600;
  unint64_t v601;
  unint64_t v602;
  char *v603;
  char *v604;
  char *v605;
  uint64_t v606;
  unsigned int v607;
  int v608;
  uint64_t v609;
  unint64_t v610;
  unint64_t v611;
  uint64_t v612;
  unsigned int *v613;
  unsigned int *v614;
  uint64_t v615;
  unint64_t v616;
  uint64_t v617;
  unsigned int v618;
  unsigned int v619;
  unsigned int v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  int32x4_t **v624;
  unint64_t v625;
  int32x4_t *v626;
  int32x4_t **v627;
  int32x4_t *v628;
  unint64_t v629;
  unint64_t v630;
  uint64_t v631;
  int32x4_t *v632;
  uint64_t v633;
  int32x4_t *v634;
  uint64_t v635;
  int32x4_t v636;
  int32x4_t v637;
  int32x4_t v638;
  unint64_t v639;
  uint64_t v640;
  _QWORD *v641;
  uint64_t v642;
  _DWORD *v643;
  unint64_t v644;
  _DWORD *v645;
  _DWORD *v646;
  _QWORD *v647;
  void *v648;
  unint64_t v649;
  char *v650;
  uint64_t v651;
  uint64_t v652;
  __int128 v653;
  char *v654;
  uint64_t v655;
  int64x2_t *v656;
  uint64_t v657;
  _QWORD *v658;
  unint64_t v659;
  _QWORD *v660;
  unint64_t v661;
  unint64_t v662;
  unint64_t v663;
  char *v664;
  char *v665;
  uint64_t v666;
  char *v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  unint64_t v671;
  _BYTE *v672;
  _BYTE *v673;
  char *v674;
  char *v675;
  char *v676;
  uint64_t v677;
  char *v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  uint64_t v682;
  uint64_t v683;
  __int128 v684;
  char *v685;
  uint64_t v686;
  _QWORD *v687;
  unint64_t v688;
  _QWORD *v689;
  unint64_t v690;
  unint64_t v691;
  unint64_t v692;
  char *v693;
  char *v694;
  uint64_t v695;
  char *v696;
  __int128 v697;
  __int128 v698;
  __int128 v699;
  uint64_t v700;
  unint64_t v701;
  unint64_t v702;
  BOOL v703;
  uint64_t v704;
  unint64_t v705;
  uint64_t v706;
  unint64_t v707;
  uint64_t v708;
  unint64_t v709;
  uint64_t v710;
  unint64_t v711;
  uint64_t v712;
  unint64_t v713;
  uint64_t v714;
  unint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  unsigned int *v720;
  unsigned int v721;
  uint64_t v722;
  uint64_t v723;
  unint64_t *v724;
  uint64_t v725;
  _QWORD *v726;
  unsigned int v727;
  uint64_t v728;
  uint64_t v729;
  _QWORD *v730;
  uint64_t v731;
  unint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  size_t v736;
  unsigned int v737;
  uint64_t v738;
  unsigned int v739;
  uint64_t v740;
  uint64_t v741;
  _QWORD *v742;
  uint64_t v743;
  unint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  size_t v748;
  unsigned int v749;
  uint64_t v750;
  uint64_t *v751;
  unsigned int v752;
  uint64_t v753;
  unint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  size_t v758;
  unsigned int v759;
  uint64_t v760;
  unsigned int v761;
  uint64_t v762;
  unint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  size_t v767;
  unsigned int v768;
  uint64_t v769;
  unsigned int v770;
  uint64_t v771;
  uint64_t v772;
  _QWORD *v773;
  uint64_t v774;
  unint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  size_t v779;
  unsigned int v780;
  uint64_t v781;
  unsigned int v782;
  uint64_t v783;
  uint64_t v784;
  _QWORD *v785;
  uint64_t v786;
  unint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  size_t v791;
  unsigned int v792;
  uint64_t v793;
  unsigned int v794;
  uint64_t v795;
  uint64_t v796;
  _QWORD *v797;
  uint64_t v798;
  unint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  size_t v803;
  unsigned int v804;
  uint64_t v805;
  unsigned int v806;
  uint64_t v807;
  uint64_t v808;
  _QWORD *v809;
  uint64_t v810;
  unint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  size_t v815;
  unsigned int v816;
  uint64_t v817;
  unsigned int v818;
  uint64_t v819;
  uint64_t v820;
  _QWORD *v821;
  uint64_t v822;
  unint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  size_t v827;
  unsigned int v828;
  uint64_t v829;
  unsigned int v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  unint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  size_t v839;
  unsigned int v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  unint64_t v852;
  uint64_t v853;
  unint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  unint64_t v858;
  uint64_t v859;
  unint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  unint64_t v864;
  uint64_t v865;
  unint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  unint64_t v870;
  uint64_t v871;
  unint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  unint64_t v876;
  uint64_t v877;
  unint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  unint64_t v882;
  uint64_t v883;
  unint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  unint64_t v888;
  uint64_t v889;
  unint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t i;
  uint64_t v896;
  uint64_t v898;
  uint64_t v899;
  unsigned int v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t j;
  uint64_t v906;
  uint64_t k;
  uint64_t v908;
  uint64_t m;
  uint64_t v910;
  uint64_t n;
  uint64_t v912;
  uint64_t ii;
  uint64_t v914;
  uint64_t jj;
  uint64_t v916;
  uint64_t kk;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  unint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  int v930;
  uint64_t v931;
  int v932;
  uint64_t v933;
  int v934;
  uint64_t v935;
  int v936;
  uint64_t v937;
  int v938;
  uint64_t v939;
  int v940;
  uint64_t v941;
  int v942;
  uint64_t v943;
  int v944;
  uint64_t v945;
  uint64_t v946;
  unint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  unint64_t v953;
  uint64_t v954;
  _QWORD *v955;
  _QWORD *v956;
  uint64_t v957;
  _QWORD *v958;
  _QWORD *v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  void **v965;
  void **v966;
  void **v967;
  void **v968;
  void **v969;
  void **v970;
  int v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  _QWORD *v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  int v987;
  _QWORD *v988;
  char **v989;
  uint64_t v990;
  uint64_t v991;
  unint64_t v992;
  unsigned int v993;
  unsigned int v994;
  unsigned int v995;
  unsigned int v996;
  unsigned int v997;
  unsigned int v998;
  int64x2_t v999;
  int64x2_t v1000;
  uint64_t v1001;
  uint64_t v1002;

  v1002 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 18424);
  v3 = *(_QWORD *)(a1 + 18416);
  v4 = *(_QWORD *)(a1 + 18448);
  v5 = *(_QWORD *)(a1 + 18440);
  v6 = *(_QWORD *)(a1 + 18472);
  v7 = *(_QWORD *)(a1 + 18464);
  v8 = *(_QWORD *)(a1 + 18496);
  v9 = *(_QWORD *)(a1 + 18488);
  v10 = *(_QWORD *)(a1 + 18520);
  v11 = *(_QWORD *)(a1 + 18512);
  v12 = *(_QWORD *)(a1 + 18544);
  v13 = *(_QWORD *)(a1 + 18536);
  v14 = *(_QWORD *)(a1 + 18568);
  v15 = *(_QWORD *)(a1 + 18560);
  v16 = (_QWORD *)(a1 + 120);
  if (*(_BYTE *)(a1 + 1096))
    goto LABEL_1022;
  v979 = *(_QWORD *)(a1 + 18440);
  v980 = *(_QWORD *)(a1 + 18416);
  v981 = *(_QWORD *)(a1 + 18448);
  v982 = *(_QWORD *)(a1 + 18424);
  v983 = *(_QWORD *)(a1 + 18464);
  v984 = *(_QWORD *)(a1 + 18488);
  v985 = *(_QWORD *)(a1 + 18560);
  v986 = *(_QWORD *)(a1 + 18568);
  kdebug_trace();
  if (!*(_BYTE *)(a1 + 1097)
    || (*(_DWORD *)(a1 + 1908) != 1 ? (v17 = 1) : (v17 = 3), !sub_20F58FAAC(a1 + 10856, v17)))
  {
    v978 = v16;
    sub_20F5946A0((uint64_t)v16);
    v976 = v10;
    v977 = v12;
    v974 = v11;
    v975 = v13;
    v972 = v6;
    v973 = v8;
    if (!*(_BYTE *)(a1 + 1097))
    {
LABEL_189:
      v160 = *(_QWORD *)(a1 + 128);
      v161 = *(_QWORD *)(a1 + 136);
      if (v161 != v160)
      {
        v162 = -16 - v161;
        do
        {
          while (1)
          {
            while (1)
            {
              v163 = *(_QWORD *)(v161 - 8);
              v161 -= 16;
              if ((*(_BYTE *)(v163 + 4) & 6) != 0)
                break;
              *(_BYTE *)(v163 + 4) = 0;
              v162 += 16;
              if (v161 == v160)
                goto LABEL_202;
            }
            sub_20F3D7028(a1 + 152, v163);
            v164 = v161 + 16;
            v160 = *(_QWORD *)(a1 + 128);
            v165 = *(_QWORD *)(a1 + 136);
            if (v161 + 16 != v165)
              break;
            *(_QWORD *)(a1 + 136) = v161;
            v162 += 16;
            if (v161 == v160)
              goto LABEL_202;
          }
          v166 = v165 - v161 - 32;
          v167 = v161;
          if (v166 < 0x10)
            goto LABEL_1196;
          v168 = (v166 >> 4) + 1;
          v169 = 16 * (v168 & 0x1FFFFFFFFFFFFFFELL);
          v167 = v161 + v169;
          v164 += v169;
          v170 = (((unint64_t)(v165 + v162) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
          v171 = v160 + 16 * ((v161 - v160) >> 4) + 24;
          do
          {
            v172 = *(_DWORD *)(v171 + 8);
            *(_DWORD *)(v171 - 24) = *(_DWORD *)(v171 - 8);
            *(_DWORD *)(v171 - 8) = v172;
            v173 = *(_QWORD *)(v171 + 16);
            *(_QWORD *)(v171 - 16) = *(_QWORD *)v171;
            *(_QWORD *)v171 = v173;
            v171 += 32;
            v170 -= 2;
          }
          while (v170);
          if (v168 != (v168 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_1196:
            do
            {
              *(_DWORD *)v167 = *(_DWORD *)v164;
              *(_QWORD *)(v167 + 8) = *(_QWORD *)(v164 + 8);
              v167 += 16;
              v164 += 16;
            }
            while (v164 != v165);
          }
          *(_QWORD *)(a1 + 136) = v167;
          v162 += 16;
        }
        while (v161 != v160);
      }
LABEL_202:
      v174 = *(_QWORD *)(a1 + 224);
      v175 = *(_QWORD *)(a1 + 232);
      if (v175 != v174)
      {
        v176 = -16 - v175;
        do
        {
          while (1)
          {
            while (1)
            {
              v177 = *(_QWORD *)(v175 - 8);
              v175 -= 16;
              if ((*(_BYTE *)(v177 + 4) & 6) != 0)
                break;
              *(_BYTE *)(v177 + 4) = 0;
              v176 += 16;
              if (v175 == v174)
                goto LABEL_215;
            }
            sub_20F5B6F80(a1 + 248, v177);
            v178 = v175 + 16;
            v174 = *(_QWORD *)(a1 + 224);
            v179 = *(_QWORD *)(a1 + 232);
            if (v175 + 16 != v179)
              break;
            *(_QWORD *)(a1 + 232) = v175;
            v176 += 16;
            if (v175 == v174)
              goto LABEL_215;
          }
          v180 = v179 - v175 - 32;
          v181 = v175;
          if (v180 < 0x10)
            goto LABEL_1197;
          v182 = (v180 >> 4) + 1;
          v183 = 16 * (v182 & 0x1FFFFFFFFFFFFFFELL);
          v181 = v175 + v183;
          v178 += v183;
          v184 = (((unint64_t)(v179 + v176) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
          v185 = v174 + 16 * ((v175 - v174) >> 4) + 24;
          do
          {
            v186 = *(_DWORD *)(v185 + 8);
            *(_DWORD *)(v185 - 24) = *(_DWORD *)(v185 - 8);
            *(_DWORD *)(v185 - 8) = v186;
            v187 = *(_QWORD *)(v185 + 16);
            *(_QWORD *)(v185 - 16) = *(_QWORD *)v185;
            *(_QWORD *)v185 = v187;
            v185 += 32;
            v184 -= 2;
          }
          while (v184);
          if (v182 != (v182 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_1197:
            do
            {
              *(_DWORD *)v181 = *(_DWORD *)v178;
              *(_QWORD *)(v181 + 8) = *(_QWORD *)(v178 + 8);
              v181 += 16;
              v178 += 16;
            }
            while (v178 != v179);
          }
          *(_QWORD *)(a1 + 232) = v181;
          v176 += 16;
        }
        while (v175 != v174);
      }
LABEL_215:
      v188 = *(_QWORD *)(a1 + 320);
      v189 = *(_QWORD *)(a1 + 328);
      if (v189 != v188)
      {
        v190 = -16 - v189;
        do
        {
          while (1)
          {
            while (1)
            {
              v191 = *(_QWORD *)(v189 - 8);
              v189 -= 16;
              if ((*(_BYTE *)(v191 + 4) & 6) != 0)
                break;
              *(_BYTE *)(v191 + 4) = 0;
              v190 += 16;
              if (v189 == v188)
                goto LABEL_228;
            }
            sub_20F5B7280(a1 + 344, v191);
            v192 = v189 + 16;
            v188 = *(_QWORD *)(a1 + 320);
            v193 = *(_QWORD *)(a1 + 328);
            if (v189 + 16 != v193)
              break;
            *(_QWORD *)(a1 + 328) = v189;
            v190 += 16;
            if (v189 == v188)
              goto LABEL_228;
          }
          v194 = v193 - v189 - 32;
          v195 = v189;
          if (v194 < 0x10)
            goto LABEL_1198;
          v196 = (v194 >> 4) + 1;
          v197 = 16 * (v196 & 0x1FFFFFFFFFFFFFFELL);
          v195 = v189 + v197;
          v192 += v197;
          v198 = (((unint64_t)(v193 + v190) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
          v199 = v188 + 16 * ((v189 - v188) >> 4) + 24;
          do
          {
            v200 = *(_DWORD *)(v199 + 8);
            *(_DWORD *)(v199 - 24) = *(_DWORD *)(v199 - 8);
            *(_DWORD *)(v199 - 8) = v200;
            v201 = *(_QWORD *)(v199 + 16);
            *(_QWORD *)(v199 - 16) = *(_QWORD *)v199;
            *(_QWORD *)v199 = v201;
            v199 += 32;
            v198 -= 2;
          }
          while (v198);
          if (v196 != (v196 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_1198:
            do
            {
              *(_DWORD *)v195 = *(_DWORD *)v192;
              *(_QWORD *)(v195 + 8) = *(_QWORD *)(v192 + 8);
              v195 += 16;
              v192 += 16;
            }
            while (v192 != v193);
          }
          *(_QWORD *)(a1 + 328) = v195;
          v190 += 16;
        }
        while (v189 != v188);
      }
LABEL_228:
      v202 = *(_QWORD *)(a1 + 416);
      v203 = *(_QWORD *)(a1 + 424);
      if (v203 != v202)
      {
        v204 = -16 - v203;
        do
        {
          while (1)
          {
            while (1)
            {
              v205 = *(_QWORD *)(v203 - 8);
              v203 -= 16;
              if ((*(_BYTE *)(v205 + 4) & 6) != 0)
                break;
              *(_BYTE *)(v205 + 4) = 0;
              v204 += 16;
              if (v203 == v202)
                goto LABEL_241;
            }
            sub_20F5B7580(a1 + 440, v205);
            v206 = v203 + 16;
            v202 = *(_QWORD *)(a1 + 416);
            v207 = *(_QWORD *)(a1 + 424);
            if (v203 + 16 != v207)
              break;
            *(_QWORD *)(a1 + 424) = v203;
            v204 += 16;
            if (v203 == v202)
              goto LABEL_241;
          }
          v208 = v207 - v203 - 32;
          v209 = v203;
          if (v208 < 0x10)
            goto LABEL_1199;
          v210 = (v208 >> 4) + 1;
          v211 = 16 * (v210 & 0x1FFFFFFFFFFFFFFELL);
          v209 = v203 + v211;
          v206 += v211;
          v212 = (((unint64_t)(v207 + v204) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
          v213 = v202 + 16 * ((v203 - v202) >> 4) + 24;
          do
          {
            v214 = *(_DWORD *)(v213 + 8);
            *(_DWORD *)(v213 - 24) = *(_DWORD *)(v213 - 8);
            *(_DWORD *)(v213 - 8) = v214;
            v215 = *(_QWORD *)(v213 + 16);
            *(_QWORD *)(v213 - 16) = *(_QWORD *)v213;
            *(_QWORD *)v213 = v215;
            v213 += 32;
            v212 -= 2;
          }
          while (v212);
          if (v210 != (v210 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_1199:
            do
            {
              *(_DWORD *)v209 = *(_DWORD *)v206;
              *(_QWORD *)(v209 + 8) = *(_QWORD *)(v206 + 8);
              v209 += 16;
              v206 += 16;
            }
            while (v206 != v207);
          }
          *(_QWORD *)(a1 + 424) = v209;
          v204 += 16;
        }
        while (v203 != v202);
      }
LABEL_241:
      v216 = *(_QWORD *)(a1 + 520);
      v217 = *(_QWORD *)(a1 + 512);
      if (v216 != v217)
      {
        v218 = -16 - v216;
        do
        {
          while (1)
          {
            while (1)
            {
              v219 = *(_QWORD *)(v216 - 8);
              v216 -= 16;
              if ((*(_BYTE *)(v219 + 4) & 6) != 0)
                break;
              *(_BYTE *)(v219 + 4) = 0;
              v218 += 16;
              if (v216 == v217)
                goto LABEL_254;
            }
            sub_20F5B7880(a1 + 536, (_QWORD *)v219);
            v217 = *(_QWORD *)(a1 + 512);
            v220 = v216 + 16;
            v221 = *(_QWORD *)(a1 + 520);
            if (v216 + 16 != v221)
              break;
            *(_QWORD *)(a1 + 520) = v216;
            v218 += 16;
            if (v216 == v217)
              goto LABEL_254;
          }
          v222 = v221 - v216 - 32;
          v223 = v216;
          if (v222 < 0x10)
            goto LABEL_1200;
          v224 = (v222 >> 4) + 1;
          v225 = 16 * (v224 & 0x1FFFFFFFFFFFFFFELL);
          v223 = v216 + v225;
          v220 += v225;
          v226 = (((unint64_t)(v221 + v218) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
          v227 = v217 + 16 * ((v216 - v217) >> 4) + 24;
          do
          {
            v228 = *(_DWORD *)(v227 + 8);
            *(_DWORD *)(v227 - 24) = *(_DWORD *)(v227 - 8);
            *(_DWORD *)(v227 - 8) = v228;
            v229 = *(_QWORD *)(v227 + 16);
            *(_QWORD *)(v227 - 16) = *(_QWORD *)v227;
            *(_QWORD *)v227 = v229;
            v227 += 32;
            v226 -= 2;
          }
          while (v226);
          if (v224 != (v224 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_1200:
            do
            {
              *(_DWORD *)v223 = *(_DWORD *)v220;
              *(_QWORD *)(v223 + 8) = *(_QWORD *)(v220 + 8);
              v223 += 16;
              v220 += 16;
            }
            while (v220 != v221);
          }
          *(_QWORD *)(a1 + 520) = v223;
          v218 += 16;
        }
        while (v216 != v217);
      }
LABEL_254:
      v230 = *(_QWORD *)(a1 + 616);
      v231 = *(_QWORD *)(a1 + 608);
      if (v230 != v231)
      {
        v232 = -16 - v230;
        do
        {
          while (1)
          {
            while (1)
            {
              v233 = *(_QWORD *)(v230 - 8);
              v230 -= 16;
              if ((*(_BYTE *)(v233 + 4) & 6) != 0)
                break;
              *(_BYTE *)(v233 + 4) = 0;
              v232 += 16;
              if (v230 == v231)
                goto LABEL_267;
            }
            sub_20F5B7B5C(a1 + 632, (_QWORD *)v233);
            v231 = *(_QWORD *)(a1 + 608);
            v234 = v230 + 16;
            v235 = *(_QWORD *)(a1 + 616);
            if (v230 + 16 != v235)
              break;
            *(_QWORD *)(a1 + 616) = v230;
            v232 += 16;
            if (v230 == v231)
              goto LABEL_267;
          }
          v236 = v235 - v230 - 32;
          v237 = v230;
          if (v236 < 0x10)
            goto LABEL_1201;
          v238 = (v236 >> 4) + 1;
          v239 = 16 * (v238 & 0x1FFFFFFFFFFFFFFELL);
          v237 = v230 + v239;
          v234 += v239;
          v240 = (((unint64_t)(v235 + v232) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
          v241 = v231 + 16 * ((v230 - v231) >> 4) + 24;
          do
          {
            v242 = *(_DWORD *)(v241 + 8);
            *(_DWORD *)(v241 - 24) = *(_DWORD *)(v241 - 8);
            *(_DWORD *)(v241 - 8) = v242;
            v243 = *(_QWORD *)(v241 + 16);
            *(_QWORD *)(v241 - 16) = *(_QWORD *)v241;
            *(_QWORD *)v241 = v243;
            v241 += 32;
            v240 -= 2;
          }
          while (v240);
          if (v238 != (v238 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_1201:
            do
            {
              *(_DWORD *)v237 = *(_DWORD *)v234;
              *(_QWORD *)(v237 + 8) = *(_QWORD *)(v234 + 8);
              v237 += 16;
              v234 += 16;
            }
            while (v234 != v235);
          }
          *(_QWORD *)(a1 + 616) = v237;
          v232 += 16;
        }
        while (v230 != v231);
      }
LABEL_267:
      v244 = *(_QWORD *)(a1 + 712);
      v245 = *(_QWORD *)(a1 + 704);
      if (v244 != v245)
      {
        v246 = -16 - v244;
        do
        {
          while (1)
          {
            while (1)
            {
              v247 = *(_QWORD *)(v244 - 8);
              v244 -= 16;
              if ((*(_BYTE *)(v247 + 4) & 6) != 0)
                break;
              *(_BYTE *)(v247 + 4) = 0;
              v246 += 16;
              if (v244 == v245)
                goto LABEL_280;
            }
            sub_20F5B7E38(a1 + 728, (_QWORD *)v247);
            v245 = *(_QWORD *)(a1 + 704);
            v248 = v244 + 16;
            v249 = *(_QWORD *)(a1 + 712);
            if (v244 + 16 != v249)
              break;
            *(_QWORD *)(a1 + 712) = v244;
            v246 += 16;
            if (v244 == v245)
              goto LABEL_280;
          }
          v250 = v249 - v244 - 32;
          v251 = v244;
          if (v250 < 0x10)
            goto LABEL_1202;
          v252 = (v250 >> 4) + 1;
          v253 = 16 * (v252 & 0x1FFFFFFFFFFFFFFELL);
          v251 = v244 + v253;
          v248 += v253;
          v254 = (((unint64_t)(v249 + v246) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
          v255 = v245 + 16 * ((v244 - v245) >> 4) + 24;
          do
          {
            v256 = *(_DWORD *)(v255 + 8);
            *(_DWORD *)(v255 - 24) = *(_DWORD *)(v255 - 8);
            *(_DWORD *)(v255 - 8) = v256;
            v257 = *(_QWORD *)(v255 + 16);
            *(_QWORD *)(v255 - 16) = *(_QWORD *)v255;
            *(_QWORD *)v255 = v257;
            v255 += 32;
            v254 -= 2;
          }
          while (v254);
          if (v252 != (v252 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_1202:
            do
            {
              *(_DWORD *)v251 = *(_DWORD *)v248;
              *(_QWORD *)(v251 + 8) = *(_QWORD *)(v248 + 8);
              v251 += 16;
              v248 += 16;
            }
            while (v248 != v249);
          }
          *(_QWORD *)(a1 + 712) = v251;
          v246 += 16;
        }
        while (v244 != v245);
      }
LABEL_280:
      v258 = *(_QWORD *)(a1 + 808);
      v259 = *(_QWORD *)(a1 + 800);
      if (v258 != v259)
      {
        v260 = -16 - v258;
        do
        {
          while (1)
          {
            while (1)
            {
              v261 = *(_QWORD *)(v258 - 8);
              v258 -= 16;
              if ((*(_BYTE *)(v261 + 4) & 6) != 0)
                break;
              *(_BYTE *)(v261 + 4) = 0;
              v260 += 16;
              if (v258 == v259)
                goto LABEL_293;
            }
            sub_20F394BB8(a1 + 824, v261);
            v259 = *(_QWORD *)(a1 + 800);
            v262 = v258 + 16;
            v263 = *(_QWORD *)(a1 + 808);
            if (v258 + 16 != v263)
              break;
            *(_QWORD *)(a1 + 808) = v258;
            v260 += 16;
            if (v258 == v259)
              goto LABEL_293;
          }
          v264 = v263 - v258 - 32;
          v265 = v258;
          if (v264 < 0x10)
            goto LABEL_1203;
          v266 = (v264 >> 4) + 1;
          v267 = 16 * (v266 & 0x1FFFFFFFFFFFFFFELL);
          v265 = v258 + v267;
          v262 += v267;
          v268 = (((unint64_t)(v263 + v260) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
          v269 = v259 + 16 * ((v258 - v259) >> 4) + 24;
          do
          {
            v270 = *(_DWORD *)(v269 + 8);
            *(_DWORD *)(v269 - 24) = *(_DWORD *)(v269 - 8);
            *(_DWORD *)(v269 - 8) = v270;
            v271 = *(_QWORD *)(v269 + 16);
            *(_QWORD *)(v269 - 16) = *(_QWORD *)v269;
            *(_QWORD *)v269 = v271;
            v269 += 32;
            v268 -= 2;
          }
          while (v268);
          if (v266 != (v266 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_1203:
            do
            {
              *(_DWORD *)v265 = *(_DWORD *)v262;
              *(_QWORD *)(v265 + 8) = *(_QWORD *)(v262 + 8);
              v265 += 16;
              v262 += 16;
            }
            while (v262 != v263);
          }
          *(_QWORD *)(a1 + 808) = v265;
          v260 += 16;
        }
        while (v258 != v259);
      }
LABEL_293:
      *(_WORD *)(a1 + 1096) = 1;
      *(_QWORD *)(a1 + 1112) = *(_QWORD *)(a1 + 1104);
      *(_QWORD *)(a1 + 1304) = *(_QWORD *)(a1 + 1296);
      *(_QWORD *)(a1 + 1496) = *(_QWORD *)(a1 + 1488);
      *(_QWORD *)(a1 + 1136) = *(_QWORD *)(a1 + 1128);
      *(_QWORD *)(a1 + 1328) = *(_QWORD *)(a1 + 1320);
      *(_QWORD *)(a1 + 1520) = *(_QWORD *)(a1 + 1512);
      *(_QWORD *)(a1 + 1160) = *(_QWORD *)(a1 + 1152);
      *(_QWORD *)(a1 + 1352) = *(_QWORD *)(a1 + 1344);
      *(_QWORD *)(a1 + 1544) = *(_QWORD *)(a1 + 1536);
      *(_QWORD *)(a1 + 1184) = *(_QWORD *)(a1 + 1176);
      *(_QWORD *)(a1 + 1376) = *(_QWORD *)(a1 + 1368);
      *(_QWORD *)(a1 + 1568) = *(_QWORD *)(a1 + 1560);
      *(_QWORD *)(a1 + 1208) = *(_QWORD *)(a1 + 1200);
      *(_QWORD *)(a1 + 1400) = *(_QWORD *)(a1 + 1392);
      *(_QWORD *)(a1 + 1592) = *(_QWORD *)(a1 + 1584);
      *(_QWORD *)(a1 + 1232) = *(_QWORD *)(a1 + 1224);
      *(_QWORD *)(a1 + 1424) = *(_QWORD *)(a1 + 1416);
      *(_QWORD *)(a1 + 1616) = *(_QWORD *)(a1 + 1608);
      *(_QWORD *)(a1 + 1256) = *(_QWORD *)(a1 + 1248);
      *(_QWORD *)(a1 + 1448) = *(_QWORD *)(a1 + 1440);
      *(_QWORD *)(a1 + 1640) = *(_QWORD *)(a1 + 1632);
      *(_QWORD *)(a1 + 1280) = *(_QWORD *)(a1 + 1272);
      *(_QWORD *)(a1 + 1472) = *(_QWORD *)(a1 + 1464);
      *(_QWORD *)(a1 + 1664) = *(_QWORD *)(a1 + 1656);
      v272 = *(_QWORD *)(a1 + 128);
      v273 = *(_QWORD *)(a1 + 136);
      if (v272 != v273)
      {
        v274 = 0;
        do
        {
          v275 = *(_QWORD *)(v272 + 8);
          if (*(_BYTE *)(v275 + 20))
            v276 = v274;
          else
            v276 = -1;
          v274 += *(unsigned __int8 *)(v275 + 20);
          *(_DWORD *)v275 = v276;
          v272 += 16;
        }
        while (v272 != v273);
      }
      v277 = *(_QWORD *)(a1 + 224);
      v278 = *(_QWORD *)(a1 + 232);
      if (v277 != v278)
      {
        v279 = 0;
        do
        {
          v280 = *(_QWORD *)(v277 + 8);
          if (*(_BYTE *)(v280 + 20))
            v281 = v279;
          else
            v281 = -1;
          v279 += *(unsigned __int8 *)(v280 + 20);
          *(_DWORD *)v280 = v281;
          v277 += 16;
        }
        while (v277 != v278);
      }
      v282 = *(_QWORD *)(a1 + 320);
      v283 = *(_QWORD *)(a1 + 328);
      if (v282 != v283)
      {
        v284 = 0;
        do
        {
          v285 = *(_QWORD *)(v282 + 8);
          if (*(_BYTE *)(v285 + 20))
            v286 = v284;
          else
            v286 = -1;
          v284 += *(unsigned __int8 *)(v285 + 20);
          *(_DWORD *)v285 = v286;
          v282 += 16;
        }
        while (v282 != v283);
      }
      v287 = *(_QWORD *)(a1 + 416);
      v288 = *(_QWORD *)(a1 + 424);
      if (v287 != v288)
      {
        v289 = 0;
        do
        {
          v290 = *(_QWORD *)(v287 + 8);
          if (*(_BYTE *)(v290 + 20))
            v291 = v289;
          else
            v291 = -1;
          v289 += *(unsigned __int8 *)(v290 + 20);
          *(_DWORD *)v290 = v291;
          v287 += 16;
        }
        while (v287 != v288);
      }
      v292 = *(_QWORD *)(a1 + 512);
      v293 = *(_QWORD *)(a1 + 520);
      if (v292 != v293)
      {
        v294 = 0;
        do
        {
          v295 = *(_QWORD *)(v292 + 8);
          if (*(_BYTE *)(v295 + 20))
            v296 = v294;
          else
            v296 = -1;
          v294 += *(unsigned __int8 *)(v295 + 20);
          *(_DWORD *)v295 = v296;
          v292 += 16;
        }
        while (v292 != v293);
      }
      v297 = *(_QWORD *)(a1 + 608);
      v298 = *(_QWORD *)(a1 + 616);
      if (v297 != v298)
      {
        v299 = 0;
        do
        {
          v300 = *(_QWORD *)(v297 + 8);
          if (*(_BYTE *)(v300 + 20))
            v301 = v299;
          else
            v301 = -1;
          v299 += *(unsigned __int8 *)(v300 + 20);
          *(_DWORD *)v300 = v301;
          v297 += 16;
        }
        while (v297 != v298);
      }
      v302 = *(_QWORD *)(a1 + 704);
      v303 = *(_QWORD *)(a1 + 712);
      if (v302 != v303)
      {
        v304 = 0;
        do
        {
          v305 = *(_QWORD *)(v302 + 8);
          if (*(_BYTE *)(v305 + 20))
            v306 = v304;
          else
            v306 = -1;
          v304 += *(unsigned __int8 *)(v305 + 20);
          *(_DWORD *)v305 = v306;
          v302 += 16;
        }
        while (v302 != v303);
      }
      v307 = *(_QWORD *)(a1 + 800);
      v308 = *(_QWORD *)(a1 + 808);
      if (v307 != v308)
      {
        v309 = 0;
        do
        {
          v310 = *(_QWORD *)(v307 + 8);
          if (*(_BYTE *)(v310 + 20))
            v311 = v309;
          else
            v311 = -1;
          v309 += *(unsigned __int8 *)(v310 + 20);
          *(_DWORD *)v310 = v311;
          v307 += 16;
        }
        while (v307 != v308);
      }
      v971 = *(_DWORD *)(a1 + 1884);
      v987 = *(_DWORD *)(a1 + 1904);
      v989 = (char **)(a1 + 10688);
      v312 = *(_QWORD *)(a1 + 9616);
      if (*(_BYTE *)(v312 + 976))
      {
        *(_QWORD *)(a1 + 10696) = *(_QWORD *)(a1 + 10688);
        *(_QWORD *)(a1 + 10720) = *(_QWORD *)(a1 + 10712);
        *(_QWORD *)(a1 + 10744) = *(_QWORD *)(a1 + 10736);
        *(_QWORD *)(a1 + 10768) = *(_QWORD *)(a1 + 10760);
        *(_QWORD *)(a1 + 10792) = *(_QWORD *)(a1 + 10784);
        *(_QWORD *)(a1 + 10816) = *(_QWORD *)(a1 + 10808);
        *(_QWORD *)(a1 + 10840) = *(_QWORD *)(a1 + 10832);
        sub_20F59AAD4((uint64_t)v989);
        if (*(_BYTE *)(v312 + 976))
        {
          v313 = *(void **)(a1 + 10688);
          *(_QWORD *)(a1 + 10696) = v313;
          v314 = ((*(_QWORD *)(v312 + 16) - *(_QWORD *)(v312 + 8)) >> 4);
          if (v314 > (uint64_t)(*(_QWORD *)(a1 + 10704) - (_QWORD)v313) >> 2)
          {
            v315 = (char *)operator new(4 * v314);
            *(_QWORD *)(a1 + 10688) = v315;
            *(_QWORD *)(a1 + 10696) = v315;
            *(_QWORD *)(a1 + 10704) = &v315[4 * v314];
            if (v313)
              operator delete(v313);
          }
          v316 = *(int **)(v312 + 8);
          v317 = *(int **)(v312 + 16);
          v964 = v312;
          while (v316 != v317)
          {
            if (*(_BYTE *)(*((_QWORD *)v316 + 1) + 20))
            {
              v319 = *v316;
              v320 = *(char **)(a1 + 10696);
              v321 = *(_QWORD *)(a1 + 10704);
              if ((unint64_t)v320 >= v321)
              {
                v322 = *v989;
                v323 = v320 - *v989;
                v324 = v323 >> 2;
                v325 = (v323 >> 2) + 1;
                if (v325 >> 62)
LABEL_1190:
                  sub_20E867F44();
                v326 = v321 - (_QWORD)v322;
                if (v326 >> 1 > v325)
                  v325 = v326 >> 1;
                if ((unint64_t)v326 >= 0x7FFFFFFFFFFFFFFCLL)
                  v327 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v327 = v325;
                if (v327)
                {
                  if (v327 >> 62)
LABEL_1188:
                    sub_20E877A38();
                  v328 = operator new(4 * v327);
                  v329 = &v328[4 * v324];
                  *v329 = v319;
                  v318 = (uint64_t)(v329 + 1);
                  v330 = v320 - v322;
                  if (v320 == v322)
                  {
LABEL_370:
                    *(_QWORD *)(a1 + 10688) = v329;
                    *(_QWORD *)(a1 + 10696) = v318;
                    *(_QWORD *)(a1 + 10704) = &v328[4 * v327];
                    if (v322)
                      operator delete(v322);
                    goto LABEL_348;
                  }
                }
                else
                {
                  v328 = 0;
                  v329 = (_DWORD *)(4 * v324);
                  *(_DWORD *)(4 * v324) = v319;
                  v318 = 4 * v324 + 4;
                  v330 = v320 - v322;
                  if (v320 == v322)
                    goto LABEL_370;
                }
                v331 = v330 - 4;
                if (v331 < 0x2C)
                  goto LABEL_1209;
                if ((unint64_t)(v320 - v328 - v323) < 0x20)
                  goto LABEL_1209;
                v332 = (v331 >> 2) + 1;
                v333 = 4 * (v332 & 0x7FFFFFFFFFFFFFF8);
                v334 = &v320[-v333];
                v329 = (_DWORD *)((char *)v329 - v333);
                v335 = &v328[4 * v324 - 16];
                v336 = v320 - 16;
                v337 = v332 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v338 = *(_OWORD *)v336;
                  *(v335 - 1) = *((_OWORD *)v336 - 1);
                  *v335 = v338;
                  v335 -= 2;
                  v336 -= 32;
                  v337 -= 8;
                }
                while (v337);
                v320 = v334;
                if (v332 != (v332 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_1209:
                  do
                  {
                    v339 = *((_DWORD *)v320 - 1);
                    v320 -= 4;
                    *--v329 = v339;
                  }
                  while (v320 != v322);
                }
                goto LABEL_370;
              }
              *(_DWORD *)v320 = v319;
              v318 = (uint64_t)(v320 + 4);
LABEL_348:
              *(_QWORD *)(a1 + 10696) = v318;
            }
            v316 += 4;
          }
          if (*(_BYTE *)(v964 + 976))
          {
            v340 = *(void **)(a1 + 10712);
            *(_QWORD *)(a1 + 10720) = v340;
            v341 = ((*(_QWORD *)(v964 + 112) - *(_QWORD *)(v964 + 104)) >> 4);
            if (v341 > (uint64_t)(*(_QWORD *)(a1 + 10728) - (_QWORD)v340) >> 2)
            {
              v342 = (char *)operator new(4 * v341);
              *(_QWORD *)(a1 + 10712) = v342;
              *(_QWORD *)(a1 + 10720) = v342;
              *(_QWORD *)(a1 + 10728) = &v342[4 * v341];
              if (v340)
                operator delete(v340);
            }
            v343 = *(int **)(v964 + 104);
            v344 = *(int **)(v964 + 112);
            if (v343 != v344)
            {
              v965 = (void **)(a1 + 10712);
              while (1)
              {
                if (!*(_BYTE *)(*((_QWORD *)v343 + 1) + 20))
                  goto LABEL_380;
                v346 = *v343;
                v347 = *(char **)(a1 + 10720);
                v348 = *(_QWORD *)(a1 + 10728);
                if ((unint64_t)v347 >= v348)
                  break;
                *(_DWORD *)v347 = v346;
                v345 = (uint64_t)(v347 + 4);
LABEL_379:
                *(_QWORD *)(a1 + 10720) = v345;
LABEL_380:
                v343 += 4;
                if (v343 == v344)
                  goto LABEL_402;
              }
              v349 = (char *)*v965;
              v350 = v347 - (_BYTE *)*v965;
              v351 = v350 >> 2;
              v352 = (v350 >> 2) + 1;
              if (v352 >> 62)
                goto LABEL_1190;
              v353 = v348 - (_QWORD)v349;
              if (v353 >> 1 > v352)
                v352 = v353 >> 1;
              if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFFCLL)
                v354 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v354 = v352;
              if (v354)
              {
                if (v354 >> 62)
                  goto LABEL_1188;
                v355 = operator new(4 * v354);
                v356 = &v355[4 * v351];
                *v356 = v346;
                v345 = (uint64_t)(v356 + 1);
                v357 = v347 - v349;
                if (v347 == v349)
                  goto LABEL_400;
              }
              else
              {
                v355 = 0;
                v356 = (_DWORD *)(4 * v351);
                *(_DWORD *)(4 * v351) = v346;
                v345 = 4 * v351 + 4;
                v357 = v347 - v349;
                if (v347 == v349)
                {
LABEL_400:
                  *(_QWORD *)(a1 + 10712) = v356;
                  *(_QWORD *)(a1 + 10720) = v345;
                  *(_QWORD *)(a1 + 10728) = &v355[4 * v354];
                  if (v349)
                    operator delete(v349);
                  goto LABEL_379;
                }
              }
              v358 = v357 - 4;
              if (v358 < 0x2C)
                goto LABEL_1210;
              if ((unint64_t)(v347 - v355 - v350) < 0x20)
                goto LABEL_1210;
              v359 = (v358 >> 2) + 1;
              v360 = 4 * (v359 & 0x7FFFFFFFFFFFFFF8);
              v361 = &v347[-v360];
              v356 = (_DWORD *)((char *)v356 - v360);
              v362 = &v355[4 * v351 - 16];
              v363 = v347 - 16;
              v364 = v359 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v365 = *(_OWORD *)v363;
                *(v362 - 1) = *((_OWORD *)v363 - 1);
                *v362 = v365;
                v362 -= 2;
                v363 -= 32;
                v364 -= 8;
              }
              while (v364);
              v347 = v361;
              if (v359 != (v359 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_1210:
                do
                {
                  v366 = *((_DWORD *)v347 - 1);
                  v347 -= 4;
                  *--v356 = v366;
                }
                while (v347 != v349);
              }
              goto LABEL_400;
            }
LABEL_402:
            if (*(_BYTE *)(v964 + 976))
            {
              v367 = *(void **)(a1 + 10736);
              *(_QWORD *)(a1 + 10744) = v367;
              v368 = ((*(_QWORD *)(v964 + 208) - *(_QWORD *)(v964 + 200)) >> 4);
              if (v368 > (uint64_t)(*(_QWORD *)(a1 + 10752) - (_QWORD)v367) >> 2)
              {
                v369 = (char *)operator new(4 * v368);
                *(_QWORD *)(a1 + 10736) = v369;
                *(_QWORD *)(a1 + 10744) = v369;
                *(_QWORD *)(a1 + 10752) = &v369[4 * v368];
                if (v367)
                  operator delete(v367);
              }
              v370 = *(int **)(v964 + 200);
              v371 = *(int **)(v964 + 208);
              if (v370 != v371)
              {
                v966 = (void **)(a1 + 10736);
                while (1)
                {
                  if (!*(_BYTE *)(*((_QWORD *)v370 + 1) + 20))
                    goto LABEL_410;
                  v373 = *v370;
                  v374 = *(char **)(a1 + 10744);
                  v375 = *(_QWORD *)(a1 + 10752);
                  if ((unint64_t)v374 >= v375)
                    break;
                  *(_DWORD *)v374 = v373;
                  v372 = (uint64_t)(v374 + 4);
LABEL_409:
                  *(_QWORD *)(a1 + 10744) = v372;
LABEL_410:
                  v370 += 4;
                  if (v370 == v371)
                    goto LABEL_432;
                }
                v376 = (char *)*v966;
                v377 = v374 - (_BYTE *)*v966;
                v378 = v377 >> 2;
                v379 = (v377 >> 2) + 1;
                if (v379 >> 62)
                  goto LABEL_1190;
                v380 = v375 - (_QWORD)v376;
                if (v380 >> 1 > v379)
                  v379 = v380 >> 1;
                if ((unint64_t)v380 >= 0x7FFFFFFFFFFFFFFCLL)
                  v381 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v381 = v379;
                if (v381)
                {
                  if (v381 >> 62)
                    goto LABEL_1188;
                  v382 = operator new(4 * v381);
                  v383 = &v382[4 * v378];
                  *v383 = v373;
                  v372 = (uint64_t)(v383 + 1);
                  v384 = v374 - v376;
                  if (v374 == v376)
                    goto LABEL_430;
                }
                else
                {
                  v382 = 0;
                  v383 = (_DWORD *)(4 * v378);
                  *(_DWORD *)(4 * v378) = v373;
                  v372 = 4 * v378 + 4;
                  v384 = v374 - v376;
                  if (v374 == v376)
                  {
LABEL_430:
                    *(_QWORD *)(a1 + 10736) = v383;
                    *(_QWORD *)(a1 + 10744) = v372;
                    *(_QWORD *)(a1 + 10752) = &v382[4 * v381];
                    if (v376)
                      operator delete(v376);
                    goto LABEL_409;
                  }
                }
                v385 = v384 - 4;
                if (v385 < 0x2C)
                  goto LABEL_1208;
                if ((unint64_t)(v374 - v382 - v377) < 0x20)
                  goto LABEL_1208;
                v386 = (v385 >> 2) + 1;
                v387 = 4 * (v386 & 0x7FFFFFFFFFFFFFF8);
                v388 = &v374[-v387];
                v383 = (_DWORD *)((char *)v383 - v387);
                v389 = &v382[4 * v378 - 16];
                v390 = v374 - 16;
                v391 = v386 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v392 = *(_OWORD *)v390;
                  *(v389 - 1) = *((_OWORD *)v390 - 1);
                  *v389 = v392;
                  v389 -= 2;
                  v390 -= 32;
                  v391 -= 8;
                }
                while (v391);
                v374 = v388;
                if (v386 != (v386 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_1208:
                  do
                  {
                    v393 = *((_DWORD *)v374 - 1);
                    v374 -= 4;
                    *--v383 = v393;
                  }
                  while (v374 != v376);
                }
                goto LABEL_430;
              }
LABEL_432:
              if (*(_BYTE *)(v964 + 976))
              {
                v394 = *(void **)(a1 + 10760);
                *(_QWORD *)(a1 + 10768) = v394;
                v395 = ((*(_QWORD *)(v964 + 304) - *(_QWORD *)(v964 + 296)) >> 4);
                if (v395 > (uint64_t)(*(_QWORD *)(a1 + 10776) - (_QWORD)v394) >> 2)
                {
                  v396 = (char *)operator new(4 * v395);
                  *(_QWORD *)(a1 + 10760) = v396;
                  *(_QWORD *)(a1 + 10768) = v396;
                  *(_QWORD *)(a1 + 10776) = &v396[4 * v395];
                  if (v394)
                    operator delete(v394);
                }
                v397 = *(int **)(v964 + 296);
                v398 = *(int **)(v964 + 304);
                if (v397 != v398)
                {
                  v967 = (void **)(a1 + 10760);
                  while (1)
                  {
                    if (!*(_BYTE *)(*((_QWORD *)v397 + 1) + 20))
                      goto LABEL_440;
                    v400 = *v397;
                    v401 = *(char **)(a1 + 10768);
                    v402 = *(_QWORD *)(a1 + 10776);
                    if ((unint64_t)v401 >= v402)
                      break;
                    *(_DWORD *)v401 = v400;
                    v399 = (uint64_t)(v401 + 4);
LABEL_439:
                    *(_QWORD *)(a1 + 10768) = v399;
LABEL_440:
                    v397 += 4;
                    if (v397 == v398)
                      goto LABEL_462;
                  }
                  v403 = (char *)*v967;
                  v404 = v401 - (_BYTE *)*v967;
                  v405 = v404 >> 2;
                  v406 = (v404 >> 2) + 1;
                  if (v406 >> 62)
                    goto LABEL_1190;
                  v407 = v402 - (_QWORD)v403;
                  if (v407 >> 1 > v406)
                    v406 = v407 >> 1;
                  if ((unint64_t)v407 >= 0x7FFFFFFFFFFFFFFCLL)
                    v408 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v408 = v406;
                  if (v408)
                  {
                    if (v408 >> 62)
                      goto LABEL_1188;
                    v409 = operator new(4 * v408);
                    v410 = &v409[4 * v405];
                    *v410 = v400;
                    v399 = (uint64_t)(v410 + 1);
                    v411 = v401 - v403;
                    if (v401 == v403)
                      goto LABEL_460;
                  }
                  else
                  {
                    v409 = 0;
                    v410 = (_DWORD *)(4 * v405);
                    *(_DWORD *)(4 * v405) = v400;
                    v399 = 4 * v405 + 4;
                    v411 = v401 - v403;
                    if (v401 == v403)
                    {
LABEL_460:
                      *(_QWORD *)(a1 + 10760) = v410;
                      *(_QWORD *)(a1 + 10768) = v399;
                      *(_QWORD *)(a1 + 10776) = &v409[4 * v408];
                      if (v403)
                        operator delete(v403);
                      goto LABEL_439;
                    }
                  }
                  v412 = v411 - 4;
                  if (v412 < 0x2C)
                    goto LABEL_1206;
                  if ((unint64_t)(v401 - v409 - v404) < 0x20)
                    goto LABEL_1206;
                  v413 = (v412 >> 2) + 1;
                  v414 = 4 * (v413 & 0x7FFFFFFFFFFFFFF8);
                  v415 = &v401[-v414];
                  v410 = (_DWORD *)((char *)v410 - v414);
                  v416 = &v409[4 * v405 - 16];
                  v417 = v401 - 16;
                  v418 = v413 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v419 = *(_OWORD *)v417;
                    *(v416 - 1) = *((_OWORD *)v417 - 1);
                    *v416 = v419;
                    v416 -= 2;
                    v417 -= 32;
                    v418 -= 8;
                  }
                  while (v418);
                  v401 = v415;
                  if (v413 != (v413 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_1206:
                    do
                    {
                      v420 = *((_DWORD *)v401 - 1);
                      v401 -= 4;
                      *--v410 = v420;
                    }
                    while (v401 != v403);
                  }
                  goto LABEL_460;
                }
LABEL_462:
                if (*(_BYTE *)(v964 + 976))
                {
                  v421 = *(void **)(a1 + 10784);
                  *(_QWORD *)(a1 + 10792) = v421;
                  v422 = ((*(_QWORD *)(v964 + 400) - *(_QWORD *)(v964 + 392)) >> 4);
                  if (v422 > (uint64_t)(*(_QWORD *)(a1 + 10800) - (_QWORD)v421) >> 2)
                  {
                    v423 = (char *)operator new(4 * v422);
                    *(_QWORD *)(a1 + 10784) = v423;
                    *(_QWORD *)(a1 + 10792) = v423;
                    *(_QWORD *)(a1 + 10800) = &v423[4 * v422];
                    if (v421)
                      operator delete(v421);
                  }
                  v424 = *(int **)(v964 + 392);
                  v425 = *(int **)(v964 + 400);
                  if (v424 != v425)
                  {
                    v968 = (void **)(a1 + 10784);
                    while (1)
                    {
                      if (!*(_BYTE *)(*((_QWORD *)v424 + 1) + 20))
                        goto LABEL_470;
                      v427 = *v424;
                      v428 = *(char **)(a1 + 10792);
                      v429 = *(_QWORD *)(a1 + 10800);
                      if ((unint64_t)v428 >= v429)
                        break;
                      *(_DWORD *)v428 = v427;
                      v426 = (uint64_t)(v428 + 4);
LABEL_469:
                      *(_QWORD *)(a1 + 10792) = v426;
LABEL_470:
                      v424 += 4;
                      if (v424 == v425)
                        goto LABEL_492;
                    }
                    v430 = (char *)*v968;
                    v431 = v428 - (_BYTE *)*v968;
                    v432 = v431 >> 2;
                    v433 = (v431 >> 2) + 1;
                    if (v433 >> 62)
                      goto LABEL_1190;
                    v434 = v429 - (_QWORD)v430;
                    if (v434 >> 1 > v433)
                      v433 = v434 >> 1;
                    if ((unint64_t)v434 >= 0x7FFFFFFFFFFFFFFCLL)
                      v435 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v435 = v433;
                    if (v435)
                    {
                      if (v435 >> 62)
                        goto LABEL_1188;
                      v436 = operator new(4 * v435);
                      v437 = &v436[4 * v432];
                      *v437 = v427;
                      v426 = (uint64_t)(v437 + 1);
                      v438 = v428 - v430;
                      if (v428 == v430)
                        goto LABEL_490;
                    }
                    else
                    {
                      v436 = 0;
                      v437 = (_DWORD *)(4 * v432);
                      *(_DWORD *)(4 * v432) = v427;
                      v426 = 4 * v432 + 4;
                      v438 = v428 - v430;
                      if (v428 == v430)
                      {
LABEL_490:
                        *(_QWORD *)(a1 + 10784) = v437;
                        *(_QWORD *)(a1 + 10792) = v426;
                        *(_QWORD *)(a1 + 10800) = &v436[4 * v435];
                        if (v430)
                          operator delete(v430);
                        goto LABEL_469;
                      }
                    }
                    v439 = v438 - 4;
                    if (v439 < 0x2C)
                      goto LABEL_1204;
                    if ((unint64_t)(v428 - v436 - v431) < 0x20)
                      goto LABEL_1204;
                    v440 = (v439 >> 2) + 1;
                    v441 = 4 * (v440 & 0x7FFFFFFFFFFFFFF8);
                    v442 = &v428[-v441];
                    v437 = (_DWORD *)((char *)v437 - v441);
                    v443 = &v436[4 * v432 - 16];
                    v444 = v428 - 16;
                    v445 = v440 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v446 = *(_OWORD *)v444;
                      *(v443 - 1) = *((_OWORD *)v444 - 1);
                      *v443 = v446;
                      v443 -= 2;
                      v444 -= 32;
                      v445 -= 8;
                    }
                    while (v445);
                    v428 = v442;
                    if (v440 != (v440 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_1204:
                      do
                      {
                        v447 = *((_DWORD *)v428 - 1);
                        v428 -= 4;
                        *--v437 = v447;
                      }
                      while (v428 != v430);
                    }
                    goto LABEL_490;
                  }
LABEL_492:
                  if (*(_BYTE *)(v964 + 976))
                  {
                    v448 = *(void **)(a1 + 10808);
                    *(_QWORD *)(a1 + 10816) = v448;
                    v449 = ((*(_QWORD *)(v964 + 496) - *(_QWORD *)(v964 + 488)) >> 4);
                    if (v449 > (uint64_t)(*(_QWORD *)(a1 + 10824) - (_QWORD)v448) >> 2)
                    {
                      v450 = (char *)operator new(4 * v449);
                      *(_QWORD *)(a1 + 10808) = v450;
                      *(_QWORD *)(a1 + 10816) = v450;
                      *(_QWORD *)(a1 + 10824) = &v450[4 * v449];
                      if (v448)
                        operator delete(v448);
                    }
                    v451 = *(int **)(v964 + 488);
                    v452 = *(int **)(v964 + 496);
                    if (v451 != v452)
                    {
                      v969 = (void **)(a1 + 10808);
                      while (1)
                      {
                        if (!*(_BYTE *)(*((_QWORD *)v451 + 1) + 20))
                          goto LABEL_500;
                        v454 = *v451;
                        v455 = *(char **)(a1 + 10816);
                        v456 = *(_QWORD *)(a1 + 10824);
                        if ((unint64_t)v455 >= v456)
                          break;
                        *(_DWORD *)v455 = v454;
                        v453 = (uint64_t)(v455 + 4);
LABEL_499:
                        *(_QWORD *)(a1 + 10816) = v453;
LABEL_500:
                        v451 += 4;
                        if (v451 == v452)
                          goto LABEL_522;
                      }
                      v457 = (char *)*v969;
                      v458 = v455 - (_BYTE *)*v969;
                      v459 = v458 >> 2;
                      v460 = (v458 >> 2) + 1;
                      if (v460 >> 62)
                        goto LABEL_1190;
                      v461 = v456 - (_QWORD)v457;
                      if (v461 >> 1 > v460)
                        v460 = v461 >> 1;
                      if ((unint64_t)v461 >= 0x7FFFFFFFFFFFFFFCLL)
                        v462 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v462 = v460;
                      if (v462)
                      {
                        if (v462 >> 62)
                          goto LABEL_1188;
                        v463 = operator new(4 * v462);
                        v464 = &v463[4 * v459];
                        *v464 = v454;
                        v453 = (uint64_t)(v464 + 1);
                        v465 = v455 - v457;
                        if (v455 == v457)
                          goto LABEL_520;
                      }
                      else
                      {
                        v463 = 0;
                        v464 = (_DWORD *)(4 * v459);
                        *(_DWORD *)(4 * v459) = v454;
                        v453 = 4 * v459 + 4;
                        v465 = v455 - v457;
                        if (v455 == v457)
                        {
LABEL_520:
                          *(_QWORD *)(a1 + 10808) = v464;
                          *(_QWORD *)(a1 + 10816) = v453;
                          *(_QWORD *)(a1 + 10824) = &v463[4 * v462];
                          if (v457)
                            operator delete(v457);
                          goto LABEL_499;
                        }
                      }
                      v466 = v465 - 4;
                      if (v466 < 0x2C)
                        goto LABEL_1205;
                      if ((unint64_t)(v455 - v463 - v458) < 0x20)
                        goto LABEL_1205;
                      v467 = (v466 >> 2) + 1;
                      v468 = 4 * (v467 & 0x7FFFFFFFFFFFFFF8);
                      v469 = &v455[-v468];
                      v464 = (_DWORD *)((char *)v464 - v468);
                      v470 = &v463[4 * v459 - 16];
                      v471 = v455 - 16;
                      v472 = v467 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v473 = *(_OWORD *)v471;
                        *(v470 - 1) = *((_OWORD *)v471 - 1);
                        *v470 = v473;
                        v470 -= 2;
                        v471 -= 32;
                        v472 -= 8;
                      }
                      while (v472);
                      v455 = v469;
                      if (v467 != (v467 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_1205:
                        do
                        {
                          v474 = *((_DWORD *)v455 - 1);
                          v455 -= 4;
                          *--v464 = v474;
                        }
                        while (v455 != v457);
                      }
                      goto LABEL_520;
                    }
LABEL_522:
                    if (*(_BYTE *)(v964 + 976))
                    {
                      v475 = *(void **)(a1 + 10832);
                      *(_QWORD *)(a1 + 10840) = v475;
                      v476 = ((*(_QWORD *)(v964 + 592) - *(_QWORD *)(v964 + 584)) >> 4);
                      if (v476 > (uint64_t)(*(_QWORD *)(a1 + 10848) - (_QWORD)v475) >> 2)
                      {
                        v477 = (char *)operator new(4 * v476);
                        *(_QWORD *)(a1 + 10832) = v477;
                        *(_QWORD *)(a1 + 10840) = v477;
                        *(_QWORD *)(a1 + 10848) = &v477[4 * v476];
                        if (v475)
                          operator delete(v475);
                      }
                      v478 = *(int **)(v964 + 584);
                      v479 = *(int **)(v964 + 592);
                      if (v478 != v479)
                      {
                        v970 = (void **)(a1 + 10832);
                        do
                        {
                          if (*(_BYTE *)(*((_QWORD *)v478 + 1) + 20))
                          {
                            v481 = *v478;
                            v482 = *(char **)(a1 + 10840);
                            v483 = *(_QWORD *)(a1 + 10848);
                            if ((unint64_t)v482 < v483)
                            {
                              *(_DWORD *)v482 = v481;
                              v480 = v482 + 4;
                            }
                            else
                            {
                              v484 = (char *)*v970;
                              v485 = v482 - (_BYTE *)*v970;
                              v486 = v485 >> 2;
                              v487 = (v485 >> 2) + 1;
                              if (v487 >> 62)
                                goto LABEL_1190;
                              v488 = v483 - (_QWORD)v484;
                              if (v488 >> 1 > v487)
                                v487 = v488 >> 1;
                              if ((unint64_t)v488 >= 0x7FFFFFFFFFFFFFFCLL)
                                v489 = 0x3FFFFFFFFFFFFFFFLL;
                              else
                                v489 = v487;
                              if (v489)
                              {
                                if (v489 >> 62)
                                  goto LABEL_1188;
                                v490 = operator new(4 * v489);
                              }
                              else
                              {
                                v490 = 0;
                              }
                              v491 = &v490[4 * v486];
                              *v491 = v481;
                              v480 = v491 + 1;
                              if (v482 != v484)
                              {
                                v492 = v482 - v484 - 4;
                                if (v492 < 0x2C)
                                  goto LABEL_1207;
                                if ((unint64_t)(v482 - v490 - v485) < 0x20)
                                  goto LABEL_1207;
                                v493 = (v492 >> 2) + 1;
                                v494 = 4 * (v493 & 0x7FFFFFFFFFFFFFF8);
                                v495 = &v482[-v494];
                                v491 = (_DWORD *)((char *)v491 - v494);
                                v496 = &v490[4 * v486 - 16];
                                v497 = v482 - 16;
                                v498 = v493 & 0x7FFFFFFFFFFFFFF8;
                                do
                                {
                                  v499 = *(_OWORD *)v497;
                                  *(v496 - 1) = *((_OWORD *)v497 - 1);
                                  *v496 = v499;
                                  v496 -= 2;
                                  v497 -= 32;
                                  v498 -= 8;
                                }
                                while (v498);
                                v482 = v495;
                                if (v493 != (v493 & 0x7FFFFFFFFFFFFFF8))
                                {
LABEL_1207:
                                  do
                                  {
                                    v500 = *((_DWORD *)v482 - 1);
                                    v482 -= 4;
                                    *--v491 = v500;
                                  }
                                  while (v482 != v484);
                                }
                              }
                              *(_QWORD *)(a1 + 10832) = v491;
                              *(_QWORD *)(a1 + 10840) = v480;
                              *(_QWORD *)(a1 + 10848) = &v490[4 * v489];
                              if (v484)
                                operator delete(v484);
                            }
                            *(_QWORD *)(a1 + 10840) = v480;
                          }
                          v478 += 4;
                        }
                        while (v478 != v479);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      sub_20F597134(*(_QWORD **)(a1 + 9624), v989);
      if (v987 == 1)
      {
        v501 = *(_QWORD *)(a1 + 9632);
        v502 = *(_QWORD *)(a1 + 9624);
        v503 = *(_OWORD *)(v502 + 36);
        *(_OWORD *)(v501 + 24) = *(_OWORD *)(v502 + 24);
        *(_OWORD *)(v501 + 36) = v503;
        v504 = *(_DWORD *)(v501 + 28);
        LODWORD(v502) = 6 * *(_DWORD *)(v501 + 24);
        *(_DWORD *)(v501 + 52) = 0;
        *(_DWORD *)(v501 + 56) = v502;
        LODWORD(v502) = 9 * v504 + v502;
        v505 = *(_DWORD *)(v501 + 36);
        v506 = *(_DWORD *)(v501 + 32) + v502;
        *(_DWORD *)(v501 + 60) = v502;
        *(_DWORD *)(v501 + 64) = v506;
        LODWORD(v502) = v506 + 6 * v505;
        v507 = *(_DWORD *)(v501 + 40);
        v508 = *(_DWORD *)(v501 + 44);
        *(_DWORD *)(v501 + 68) = v502;
        *(_DWORD *)(v501 + 72) = v502 + 4 * v507;
        LODWORD(v502) = v502 + 4 * (v508 + v507);
        *(_DWORD *)(v501 + 76) = v502;
        sub_20F20CEEC((_DWORD *)v501, 3 * *(_DWORD *)(v501 + 48) + v502, 1u);
      }
      v509 = *(unsigned int **)(a1 + 10272);
      *(_QWORD *)(a1 + 10280) = v509;
      *(_OWORD *)(a1 + 10312) = 0u;
      *(_OWORD *)(a1 + 10328) = 0u;
      *(_OWORD *)(a1 + 10296) = 0u;
      *(_QWORD *)(a1 + 10344) = 0;
      v510 = *(int **)(a1 + 10688);
      v511 = *(int **)(a1 + 10696);
      if (v510 == v511)
      {
        v512 = v509;
        v524 = *(int **)(a1 + 10712);
        v525 = *(int **)(a1 + 10720);
        if (v524 != v525)
        {
          do
          {
LABEL_577:
            while (1)
            {
              v527 = *v524;
              v528 = *(_QWORD *)(a1 + 10288);
              if ((unint64_t)v512 >= v528)
                break;
              *v512 = 1;
              v512[1] = v527;
              v526 = v512 + 3;
              v512[2] = 9;
              *(_QWORD *)(a1 + 10280) = v512 + 3;
              ++v524;
              v512 += 3;
              if (v524 == v525)
                goto LABEL_594;
            }
            v529 = *(_DWORD **)(a1 + 10272);
            v530 = 0xAAAAAAAAAAAAAAABLL * (v512 - v529) + 1;
            if (v530 > 0x1555555555555555)
LABEL_1187:
              sub_20E867F44();
            v531 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v528 - (_QWORD)v529) >> 2);
            if (2 * v531 > v530)
              v530 = 2 * v531;
            if (v531 >= 0xAAAAAAAAAAAAAAALL)
              v532 = 0x1555555555555555;
            else
              v532 = v530;
            if (v532)
            {
              if (v532 > 0x1555555555555555)
                goto LABEL_1188;
              v533 = (char *)operator new(12 * v532);
            }
            else
            {
              v533 = 0;
            }
            v534 = &v533[4 * (v512 - v529)];
            *(_DWORD *)v534 = 1;
            *((_DWORD *)v534 + 1) = v527;
            *((_DWORD *)v534 + 2) = 9;
            v535 = v534;
            if (v512 != v529)
            {
              do
              {
                v536 = *(_QWORD *)(v512 - 3);
                v512 -= 3;
                v537 = v512[2];
                *(_QWORD *)(v535 - 12) = v536;
                v535 -= 12;
                *((_DWORD *)v535 + 2) = v537;
              }
              while (v512 != v529);
              v512 = *(unsigned int **)(a1 + 10272);
            }
            *(_QWORD *)(a1 + 10272) = v535;
            v526 = (unsigned int *)(v534 + 12);
            *(_QWORD *)(a1 + 10280) = v534 + 12;
            *(_QWORD *)(a1 + 10288) = &v533[12 * v532];
            if (v512)
              operator delete(v512);
            *(_QWORD *)(a1 + 10280) = v526;
            ++v524;
            v512 = v526;
          }
          while (v524 != v525);
LABEL_594:
          v538 = *(int **)(a1 + 10736);
          v539 = *(int **)(a1 + 10744);
          if (v538 != v539)
            goto LABEL_597;
          goto LABEL_704;
        }
      }
      else
      {
        do
        {
          while (1)
          {
            v513 = *v510;
            v514 = *(_QWORD *)(a1 + 10288);
            if ((unint64_t)v509 >= v514)
              break;
            *v509 = 0;
            v509[1] = v513;
            v512 = v509 + 3;
            v509[2] = 6;
            *(_QWORD *)(a1 + 10280) = v509 + 3;
            ++v510;
            v509 += 3;
            if (v510 == v511)
              goto LABEL_574;
          }
          v515 = *(_DWORD **)(a1 + 10272);
          v516 = 0xAAAAAAAAAAAAAAABLL * (v509 - v515) + 1;
          if (v516 > 0x1555555555555555)
            goto LABEL_1187;
          v517 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v514 - (_QWORD)v515) >> 2);
          if (2 * v517 > v516)
            v516 = 2 * v517;
          if (v517 >= 0xAAAAAAAAAAAAAAALL)
            v518 = 0x1555555555555555;
          else
            v518 = v516;
          if (v518)
          {
            if (v518 > 0x1555555555555555)
              goto LABEL_1188;
            v519 = (char *)operator new(12 * v518);
          }
          else
          {
            v519 = 0;
          }
          v520 = &v519[4 * (v509 - v515)];
          *(_DWORD *)v520 = 0;
          *((_DWORD *)v520 + 1) = v513;
          *((_DWORD *)v520 + 2) = 6;
          v521 = v520;
          if (v509 != v515)
          {
            do
            {
              v522 = *(_QWORD *)(v509 - 3);
              v509 -= 3;
              v523 = v509[2];
              *(_QWORD *)(v521 - 12) = v522;
              v521 -= 12;
              *((_DWORD *)v521 + 2) = v523;
            }
            while (v509 != v515);
            v509 = *(unsigned int **)(a1 + 10272);
          }
          *(_QWORD *)(a1 + 10272) = v521;
          v512 = (unsigned int *)(v520 + 12);
          *(_QWORD *)(a1 + 10280) = v520 + 12;
          *(_QWORD *)(a1 + 10288) = &v519[12 * v518];
          if (v509)
            operator delete(v509);
          *(_QWORD *)(a1 + 10280) = v512;
          ++v510;
          v509 = v512;
        }
        while (v510 != v511);
LABEL_574:
        v524 = *(int **)(a1 + 10712);
        v525 = *(int **)(a1 + 10720);
        if (v524 != v525)
          goto LABEL_577;
      }
      v526 = v512;
      v538 = *(int **)(a1 + 10736);
      v539 = *(int **)(a1 + 10744);
      if (v538 != v539)
      {
        do
        {
LABEL_597:
          while (1)
          {
            v541 = *v538;
            v542 = *(_QWORD *)(a1 + 10288);
            if ((unint64_t)v526 >= v542)
              break;
            *v526 = 2;
            v526[1] = v541;
            v540 = v526 + 3;
            v526[2] = 1;
            *(_QWORD *)(a1 + 10280) = v526 + 3;
            ++v538;
            v526 += 3;
            if (v538 == v539)
              goto LABEL_614;
          }
          v543 = *(_DWORD **)(a1 + 10272);
          v544 = 0xAAAAAAAAAAAAAAABLL * (v526 - v543) + 1;
          if (v544 > 0x1555555555555555)
            goto LABEL_1187;
          v545 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v542 - (_QWORD)v543) >> 2);
          if (2 * v545 > v544)
            v544 = 2 * v545;
          if (v545 >= 0xAAAAAAAAAAAAAAALL)
            v546 = 0x1555555555555555;
          else
            v546 = v544;
          if (v546)
          {
            if (v546 > 0x1555555555555555)
              goto LABEL_1188;
            v547 = (char *)operator new(12 * v546);
          }
          else
          {
            v547 = 0;
          }
          v548 = &v547[4 * (v526 - v543)];
          *(_DWORD *)v548 = 2;
          *((_DWORD *)v548 + 1) = v541;
          *((_DWORD *)v548 + 2) = 1;
          v549 = v548;
          if (v526 != v543)
          {
            do
            {
              v550 = *(_QWORD *)(v526 - 3);
              v526 -= 3;
              v551 = v526[2];
              *(_QWORD *)(v549 - 12) = v550;
              v549 -= 12;
              *((_DWORD *)v549 + 2) = v551;
            }
            while (v526 != v543);
            v526 = *(unsigned int **)(a1 + 10272);
          }
          *(_QWORD *)(a1 + 10272) = v549;
          v540 = (unsigned int *)(v548 + 12);
          *(_QWORD *)(a1 + 10280) = v548 + 12;
          *(_QWORD *)(a1 + 10288) = &v547[12 * v546];
          if (v526)
            operator delete(v526);
          *(_QWORD *)(a1 + 10280) = v540;
          ++v538;
          v526 = v540;
        }
        while (v538 != v539);
LABEL_614:
        v552 = *(int **)(a1 + 10760);
        v553 = *(int **)(a1 + 10768);
        if (v552 != v553)
          goto LABEL_617;
        goto LABEL_705;
      }
LABEL_704:
      v540 = v526;
      v552 = *(int **)(a1 + 10760);
      v553 = *(int **)(a1 + 10768);
      if (v552 != v553)
      {
        do
        {
LABEL_617:
          while (1)
          {
            v555 = *v552;
            v556 = *(_QWORD *)(a1 + 10288);
            if ((unint64_t)v540 >= v556)
              break;
            *v540 = 3;
            v540[1] = v555;
            v554 = v540 + 3;
            v540[2] = 6;
            *(_QWORD *)(a1 + 10280) = v540 + 3;
            ++v552;
            v540 += 3;
            if (v552 == v553)
              goto LABEL_634;
          }
          v557 = *(_DWORD **)(a1 + 10272);
          v558 = 0xAAAAAAAAAAAAAAABLL * (v540 - v557) + 1;
          if (v558 > 0x1555555555555555)
            goto LABEL_1187;
          v559 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v556 - (_QWORD)v557) >> 2);
          if (2 * v559 > v558)
            v558 = 2 * v559;
          if (v559 >= 0xAAAAAAAAAAAAAAALL)
            v560 = 0x1555555555555555;
          else
            v560 = v558;
          if (v560)
          {
            if (v560 > 0x1555555555555555)
              goto LABEL_1188;
            v561 = (char *)operator new(12 * v560);
          }
          else
          {
            v561 = 0;
          }
          v562 = &v561[4 * (v540 - v557)];
          *(_DWORD *)v562 = 3;
          *((_DWORD *)v562 + 1) = v555;
          *((_DWORD *)v562 + 2) = 6;
          v563 = v562;
          if (v540 != v557)
          {
            do
            {
              v564 = *(_QWORD *)(v540 - 3);
              v540 -= 3;
              v565 = v540[2];
              *(_QWORD *)(v563 - 12) = v564;
              v563 -= 12;
              *((_DWORD *)v563 + 2) = v565;
            }
            while (v540 != v557);
            v540 = *(unsigned int **)(a1 + 10272);
          }
          *(_QWORD *)(a1 + 10272) = v563;
          v554 = (unsigned int *)(v562 + 12);
          *(_QWORD *)(a1 + 10280) = v562 + 12;
          *(_QWORD *)(a1 + 10288) = &v561[12 * v560];
          if (v540)
            operator delete(v540);
          *(_QWORD *)(a1 + 10280) = v554;
          ++v552;
          v540 = v554;
        }
        while (v552 != v553);
LABEL_634:
        v566 = *(int **)(a1 + 10784);
        v567 = *(int **)(a1 + 10792);
        if (v566 != v567)
          goto LABEL_637;
        goto LABEL_706;
      }
LABEL_705:
      v554 = v540;
      v566 = *(int **)(a1 + 10784);
      v567 = *(int **)(a1 + 10792);
      if (v566 != v567)
      {
        do
        {
LABEL_637:
          while (1)
          {
            v569 = *v566;
            v570 = *(_QWORD *)(a1 + 10288);
            if ((unint64_t)v554 >= v570)
              break;
            *v554 = 4;
            v554[1] = v569;
            v568 = v554 + 3;
            v554[2] = 4;
            *(_QWORD *)(a1 + 10280) = v554 + 3;
            ++v566;
            v554 += 3;
            if (v566 == v567)
              goto LABEL_654;
          }
          v571 = *(_DWORD **)(a1 + 10272);
          v572 = 0xAAAAAAAAAAAAAAABLL * (v554 - v571) + 1;
          if (v572 > 0x1555555555555555)
            goto LABEL_1187;
          v573 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v570 - (_QWORD)v571) >> 2);
          if (2 * v573 > v572)
            v572 = 2 * v573;
          if (v573 >= 0xAAAAAAAAAAAAAAALL)
            v574 = 0x1555555555555555;
          else
            v574 = v572;
          if (v574)
          {
            if (v574 > 0x1555555555555555)
              goto LABEL_1188;
            v575 = (char *)operator new(12 * v574);
          }
          else
          {
            v575 = 0;
          }
          v576 = &v575[4 * (v554 - v571)];
          *(_DWORD *)v576 = 4;
          *((_DWORD *)v576 + 1) = v569;
          *((_DWORD *)v576 + 2) = 4;
          v577 = v576;
          if (v554 != v571)
          {
            do
            {
              v578 = *(_QWORD *)(v554 - 3);
              v554 -= 3;
              v579 = v554[2];
              *(_QWORD *)(v577 - 12) = v578;
              v577 -= 12;
              *((_DWORD *)v577 + 2) = v579;
            }
            while (v554 != v571);
            v554 = *(unsigned int **)(a1 + 10272);
          }
          *(_QWORD *)(a1 + 10272) = v577;
          v568 = (unsigned int *)(v576 + 12);
          *(_QWORD *)(a1 + 10280) = v576 + 12;
          *(_QWORD *)(a1 + 10288) = &v575[12 * v574];
          if (v554)
            operator delete(v554);
          *(_QWORD *)(a1 + 10280) = v568;
          ++v566;
          v554 = v568;
        }
        while (v566 != v567);
LABEL_654:
        v580 = *(unsigned int **)(a1 + 10808);
        v581 = *(unsigned int **)(a1 + 10816);
        if (v580 != v581)
          goto LABEL_657;
        goto LABEL_707;
      }
LABEL_706:
      v568 = v554;
      v580 = *(unsigned int **)(a1 + 10808);
      v581 = *(unsigned int **)(a1 + 10816);
      if (v580 != v581)
      {
        do
        {
LABEL_657:
          while (1)
          {
            v583 = *v580;
            v584 = *(_QWORD *)(a1 + 10288);
            if ((unint64_t)v568 >= v584)
              break;
            *v568 = 5;
            v568[1] = v583;
            v582 = v568 + 3;
            v568[2] = 4;
            *(_QWORD *)(a1 + 10280) = v568 + 3;
            ++v580;
            v568 += 3;
            if (v580 == v581)
              goto LABEL_674;
          }
          v585 = *(_DWORD **)(a1 + 10272);
          v586 = 0xAAAAAAAAAAAAAAABLL * (v568 - v585) + 1;
          if (v586 > 0x1555555555555555)
            goto LABEL_1187;
          v587 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v584 - (_QWORD)v585) >> 2);
          if (2 * v587 > v586)
            v586 = 2 * v587;
          if (v587 >= 0xAAAAAAAAAAAAAAALL)
            v588 = 0x1555555555555555;
          else
            v588 = v586;
          if (v588)
          {
            if (v588 > 0x1555555555555555)
              goto LABEL_1188;
            v589 = (char *)operator new(12 * v588);
          }
          else
          {
            v589 = 0;
          }
          v590 = &v589[4 * (v568 - v585)];
          *(_DWORD *)v590 = 5;
          *((_DWORD *)v590 + 1) = v583;
          *((_DWORD *)v590 + 2) = 4;
          v591 = v590;
          if (v568 != v585)
          {
            do
            {
              v592 = *(_QWORD *)(v568 - 3);
              v568 -= 3;
              v593 = v568[2];
              *(_QWORD *)(v591 - 12) = v592;
              v591 -= 12;
              *((_DWORD *)v591 + 2) = v593;
            }
            while (v568 != v585);
            v568 = *(unsigned int **)(a1 + 10272);
          }
          *(_QWORD *)(a1 + 10272) = v591;
          v582 = (unsigned int *)(v590 + 12);
          *(_QWORD *)(a1 + 10280) = v590 + 12;
          *(_QWORD *)(a1 + 10288) = &v589[12 * v588];
          if (v568)
            operator delete(v568);
          *(_QWORD *)(a1 + 10280) = v582;
          ++v580;
          v568 = v582;
        }
        while (v580 != v581);
LABEL_674:
        v594 = *(unsigned int **)(a1 + 10832);
        v595 = *(unsigned int **)(a1 + 10840);
        if (v594 != v595)
          goto LABEL_677;
        goto LABEL_708;
      }
LABEL_707:
      v582 = v568;
      v594 = *(unsigned int **)(a1 + 10832);
      v595 = *(unsigned int **)(a1 + 10840);
      if (v594 != v595)
      {
        do
        {
LABEL_677:
          while (1)
          {
            v597 = *v594;
            v598 = *(_QWORD *)(a1 + 10288);
            if ((unint64_t)v582 >= v598)
              break;
            *v582 = 6;
            v582[1] = v597;
            v596 = v582 + 3;
            v582[2] = 3;
            *(_QWORD *)(a1 + 10280) = v582 + 3;
            ++v594;
            v582 += 3;
            if (v594 == v595)
              goto LABEL_694;
          }
          v599 = *(_DWORD **)(a1 + 10272);
          v600 = 0xAAAAAAAAAAAAAAABLL * (v582 - v599) + 1;
          if (v600 > 0x1555555555555555)
            goto LABEL_1187;
          v601 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v598 - (_QWORD)v599) >> 2);
          if (2 * v601 > v600)
            v600 = 2 * v601;
          if (v601 >= 0xAAAAAAAAAAAAAAALL)
            v602 = 0x1555555555555555;
          else
            v602 = v600;
          if (v602)
          {
            if (v602 > 0x1555555555555555)
              goto LABEL_1188;
            v603 = (char *)operator new(12 * v602);
          }
          else
          {
            v603 = 0;
          }
          v604 = &v603[4 * (v582 - v599)];
          *(_DWORD *)v604 = 6;
          *((_DWORD *)v604 + 1) = v597;
          *((_DWORD *)v604 + 2) = 3;
          v605 = v604;
          if (v582 != v599)
          {
            do
            {
              v606 = *(_QWORD *)(v582 - 3);
              v582 -= 3;
              v607 = v582[2];
              *(_QWORD *)(v605 - 12) = v606;
              v605 -= 12;
              *((_DWORD *)v605 + 2) = v607;
            }
            while (v582 != v599);
            v582 = *(unsigned int **)(a1 + 10272);
          }
          *(_QWORD *)(a1 + 10272) = v605;
          v596 = (unsigned int *)(v604 + 12);
          *(_QWORD *)(a1 + 10280) = v604 + 12;
          *(_QWORD *)(a1 + 10288) = &v603[12 * v602];
          if (v582)
            operator delete(v582);
          *(_QWORD *)(a1 + 10280) = v596;
          ++v594;
          v582 = v596;
        }
        while (v594 != v595);
LABEL_694:
        v608 = v971;
        if (v971 == 1)
        {
LABEL_709:
          v615 = *(_QWORD *)(a1 + 10272);
          v616 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v596 - v615) >> 2));
          if (v596 == (unsigned int *)v615)
            v617 = 0;
          else
            v617 = v616;
          sub_20F5B9E28(v615, v596, v617, 1);
          v609 = a1 + 10296;
          v613 = *(unsigned int **)(a1 + 10272);
          v614 = *(unsigned int **)(a1 + 10280);
          if (v613 == v614)
            goto LABEL_715;
          goto LABEL_713;
        }
LABEL_695:
        v609 = a1 + 10296;
        if (!v608)
        {
          v610 = *(_QWORD *)(a1 + 10272);
          v611 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v596 - v610) >> 2));
          if (v596 == (unsigned int *)v610)
            v612 = 0;
          else
            v612 = v611;
          sub_20F5B8760(v610, v596, v612, 1);
        }
        v613 = *(unsigned int **)(a1 + 10272);
        v614 = *(unsigned int **)(a1 + 10280);
        if (v613 == v614)
          goto LABEL_715;
LABEL_713:
        v618 = 0;
        do
        {
          v619 = v613[2];
          v613[2] = v618;
          v620 = *v613;
          v613 += 3;
          v618 += v619;
          ++*(_QWORD *)(v609 + 8 * v620);
        }
        while (v613 != v614);
LABEL_715:
        v621 = 0;
        v622 = a1 + 10352;
        *(_QWORD *)(a1 + 10360) = *(_QWORD *)(a1 + 10352);
        v623 = a1 + 10520;
        *(_QWORD *)(a1 + 10528) = *(_QWORD *)(a1 + 10520);
        *(_QWORD *)(a1 + 10384) = *(_QWORD *)(a1 + 10376);
        *(_QWORD *)(a1 + 10552) = *(_QWORD *)(a1 + 10544);
        *(_QWORD *)(a1 + 10408) = *(_QWORD *)(a1 + 10400);
        *(_QWORD *)(a1 + 10576) = *(_QWORD *)(a1 + 10568);
        *(_QWORD *)(a1 + 10432) = *(_QWORD *)(a1 + 10424);
        *(_QWORD *)(a1 + 10600) = *(_QWORD *)(a1 + 10592);
        *(_QWORD *)(a1 + 10456) = *(_QWORD *)(a1 + 10448);
        *(_QWORD *)(a1 + 10624) = *(_QWORD *)(a1 + 10616);
        *(_QWORD *)(a1 + 10480) = *(_QWORD *)(a1 + 10472);
        *(_QWORD *)(a1 + 10648) = *(_QWORD *)(a1 + 10640);
        *(_QWORD *)(a1 + 10504) = *(_QWORD *)(a1 + 10496);
        *(_QWORD *)(a1 + 10672) = *(_QWORD *)(a1 + 10664);
        while (1)
        {
          v624 = (int32x4_t **)(v622 + 24 * v621);
          v625 = *(_QWORD *)(v609 + 8 * v621);
          v627 = v624 + 1;
          v626 = v624[1];
          v628 = *v624;
          v629 = ((char *)v626 - (char *)*v624) >> 2;
          if (v625 <= v629)
          {
            if (v625 < v629)
            {
              v626 = (int32x4_t *)((char *)v628 + 4 * v625);
              *v627 = v626;
            }
          }
          else
          {
            sub_20E93DC84(v622 + 24 * v621, v625 - v629);
            v628 = *v624;
            v626 = *v627;
          }
          if (v628 == v626)
            goto LABEL_728;
          v630 = (char *)v626 - (char *)v628 - 4;
          if (v630 >= 0x1C)
          {
            v633 = (v630 >> 2) + 1;
            v631 = v633 & 0x7FFFFFFFFFFFFFF8;
            v632 = (int32x4_t *)((char *)v628 + 4 * (v633 & 0x7FFFFFFFFFFFFFF8));
            v634 = v628 + 1;
            v635 = v633 & 0x7FFFFFFFFFFFFFF8;
            v636 = (int32x4_t)xmmword_210365350;
            v637.i64[0] = 0x400000004;
            v637.i64[1] = 0x400000004;
            v638.i64[0] = 0x800000008;
            v638.i64[1] = 0x800000008;
            do
            {
              v634[-1] = v636;
              *v634 = vaddq_s32(v636, v637);
              v636 = vaddq_s32(v636, v638);
              v634 += 2;
              v635 -= 8;
            }
            while (v635);
            if (v633 == v631)
              goto LABEL_728;
          }
          else
          {
            LODWORD(v631) = 0;
            v632 = v628;
          }
          do
          {
            v632->i32[0] = v631;
            v632 = (int32x4_t *)((char *)v632 + 4);
            LODWORD(v631) = v631 + 1;
          }
          while (v632 != v626);
LABEL_728:
          v639 = *(_QWORD *)(v609 + 8 * v621);
          v640 = v623 + 24 * v621;
          v642 = *(_QWORD *)(v640 + 8);
          v641 = (_QWORD *)(v640 + 8);
          v643 = *(_DWORD **)(v623 + 24 * v621);
          v644 = (v642 - (uint64_t)v643) >> 2;
          if (v639 <= v644)
          {
            if (v639 < v644)
              *v641 = &v643[v639];
          }
          else
          {
            sub_20E93DC84(v623 + 24 * v621, v639 - v644);
            v643 = *(_DWORD **)(v623 + 24 * v621);
          }
          v645 = *(_DWORD **)(a1 + 10272);
          v646 = *(_DWORD **)(a1 + 10280);
          while (v645 != v646)
          {
            if (v621 == *v645)
              *v643++ = v645[2];
            v645 += 3;
          }
          if (++v621 == 7)
          {
            v647 = *(_QWORD **)(a1 + 9616);
            v999.i64[0] = 0;
            v648 = *(void **)(a1 + 10224);
            *(_QWORD *)(a1 + 10232) = v648;
            *(_QWORD *)(a1 + 10256) = *(_QWORD *)(a1 + 10248);
            v988 = v647;
            v649 = ((v647[86] - v647[85]) >> 4);
            if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 10240) - (_QWORD)v648) >> 3) < v649)
            {
              v650 = (char *)operator new(104 * v649);
              *(_QWORD *)(a1 + 10224) = v650;
              *(_QWORD *)(a1 + 10232) = v650;
              *(_QWORD *)(a1 + 10240) = &v650[104 * v649];
              if (v648)
                operator delete(v648);
            }
            v990 = a1 + 9808;
            v992 = 0;
            v651 = v988[85];
            v652 = v988[86];
            if (v651 == v652)
              goto LABEL_803;
            v653 = 0uLL;
            while (2)
            {
              v657 = *(_QWORD *)(v651 + 8);
              if (*(_DWORD *)v657 == -1)
              {
                if ((*(_BYTE *)(v657 + 4) & 2) == 0)
                {
                  v656 = (int64x2_t *)&v992;
                  v655 = 1;
                  goto LABEL_744;
                }
              }
              else
              {
                v658 = *(_QWORD **)(a1 + 10232);
                v659 = *(_QWORD *)(a1 + 10240);
                if ((unint64_t)v658 < v659)
                {
                  *v658 = v657;
                  v658[3] = -1;
                  v658[12] = v990;
                  *((_OWORD *)v658 + 2) = v653;
                  *((_OWORD *)v658 + 3) = v653;
                  v654 = (char *)(v658 + 13);
                  *((_OWORD *)v658 + 4) = v653;
                  *((_OWORD *)v658 + 5) = v653;
                }
                else
                {
                  v660 = *(_QWORD **)(a1 + 10224);
                  v661 = 0x4EC4EC4EC4EC4EC5 * (v658 - v660) + 1;
                  if (v661 > 0x276276276276276)
                    sub_20E867F44();
                  v662 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v659 - (_QWORD)v660) >> 3);
                  if (2 * v662 > v661)
                    v661 = 2 * v662;
                  if (v662 >= 0x13B13B13B13B13BLL)
                    v663 = 0x276276276276276;
                  else
                    v663 = v661;
                  if (v663)
                  {
                    if (v663 > 0x276276276276276)
                      goto LABEL_1188;
                    v664 = (char *)operator new(104 * v663);
                    v653 = 0uLL;
                  }
                  else
                  {
                    v664 = 0;
                  }
                  v665 = &v664[8 * (v658 - v660)];
                  *(_QWORD *)v665 = v657;
                  *((_QWORD *)v665 + 3) = -1;
                  *((_QWORD *)v665 + 12) = v990;
                  *((_OWORD *)v665 + 2) = v653;
                  *((_OWORD *)v665 + 3) = v653;
                  *((_OWORD *)v665 + 4) = v653;
                  *((_OWORD *)v665 + 5) = v653;
                  if (v658 == v660)
                  {
                    *(_QWORD *)(a1 + 10224) = v665;
                    v654 = v665 + 104;
                    *(_QWORD *)(a1 + 10232) = v665 + 104;
                    *(_QWORD *)(a1 + 10240) = &v664[104 * v663];
                    if (v658)
                      goto LABEL_764;
                  }
                  else
                  {
                    v666 = 0;
                    do
                    {
                      v667 = &v665[v666 * 8];
                      *((_QWORD *)v667 - 13) = v658[v666 - 13];
                      *((_QWORD *)v667 - 12) = v658[v666 - 12];
                      *((_QWORD *)v667 - 11) = v658[v666 - 11];
                      *((_OWORD *)v667 - 5) = *(_OWORD *)&v658[v666 - 10];
                      v668 = *(_OWORD *)&v658[v666 - 8];
                      v669 = *(_OWORD *)&v658[v666 - 6];
                      v670 = *(_OWORD *)&v658[v666 - 2];
                      *((_OWORD *)v667 - 2) = *(_OWORD *)&v658[v666 - 4];
                      *((_OWORD *)v667 - 1) = v670;
                      *((_OWORD *)v667 - 4) = v668;
                      *((_OWORD *)v667 - 3) = v669;
                      v666 -= 13;
                    }
                    while (&v658[v666] != v660);
                    v658 = *(_QWORD **)(a1 + 10224);
                    *(_QWORD *)(a1 + 10224) = &v665[v666 * 8];
                    v654 = v665 + 104;
                    *(_QWORD *)(a1 + 10232) = v665 + 104;
                    *(_QWORD *)(a1 + 10240) = &v664[104 * v663];
                    if (v658)
                    {
LABEL_764:
                      operator delete(v658);
                      v653 = 0uLL;
                    }
                  }
                }
                *(_QWORD *)(a1 + 10232) = v654;
                *((_QWORD *)v654 - 10) = v999.i64[0];
                *(_OWORD *)(v654 - 72) = v653;
                *(_OWORD *)(v654 - 56) = v653;
                *(_OWORD *)(v654 - 40) = v653;
                *(_OWORD *)(v654 - 24) = v653;
                v655 = (11 * *(_DWORD *)(v657 + 8));
                v656 = &v999;
LABEL_744:
                v656->i64[0] += v655;
              }
              v651 += 16;
              if (v651 != v652)
                continue;
              break;
            }
            v671 = v992;
            if (v992)
            {
              v672 = *(_BYTE **)(a1 + 10248);
              if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 10264) - (_QWORD)v672) >> 3) < v992)
              {
                if (v992 > 0x276276276276276)
                  sub_20E867F44();
                v673 = *(_BYTE **)(a1 + 10256);
                v674 = (char *)operator new(104 * v992);
                v675 = &v674[v673 - v672];
                v676 = v675;
                if (v673 != v672)
                {
                  v677 = 0;
                  do
                  {
                    v678 = &v675[v677];
                    *((_QWORD *)v678 - 13) = *(_QWORD *)&v673[v677 - 104];
                    *((_QWORD *)v678 - 12) = *(_QWORD *)&v673[v677 - 96];
                    *((_QWORD *)v678 - 11) = *(_QWORD *)&v673[v677 - 88];
                    *((_OWORD *)v678 - 5) = *(_OWORD *)&v673[v677 - 80];
                    v679 = *(_OWORD *)&v673[v677 - 64];
                    v680 = *(_OWORD *)&v673[v677 - 48];
                    v681 = *(_OWORD *)&v673[v677 - 16];
                    *((_OWORD *)v678 - 2) = *(_OWORD *)&v673[v677 - 32];
                    *((_OWORD *)v678 - 1) = v681;
                    *((_OWORD *)v678 - 4) = v679;
                    *((_OWORD *)v678 - 3) = v680;
                    v677 -= 104;
                  }
                  while (&v673[v677] != v672);
                  v676 = &v675[v677];
                }
                *(_QWORD *)(a1 + 10248) = v676;
                *(_QWORD *)(a1 + 10256) = v675;
                *(_QWORD *)(a1 + 10264) = &v674[104 * v671];
                if (v672)
                  operator delete(v672);
              }
              v682 = v988[85];
              v683 = v988[86];
              if (v682 != v683)
              {
                v684 = 0uLL;
                while (2)
                {
                  v686 = *(_QWORD *)(v682 + 8);
                  if (*(_DWORD *)v686 != -1 || (*(_BYTE *)(v686 + 4) & 2) != 0)
                    goto LABEL_781;
                  v687 = *(_QWORD **)(a1 + 10256);
                  v688 = *(_QWORD *)(a1 + 10264);
                  if ((unint64_t)v687 < v688)
                  {
                    *v687 = v686;
                    v687[3] = -1;
                    v687[12] = v990;
                    *((_OWORD *)v687 + 2) = v684;
                    *((_OWORD *)v687 + 3) = v684;
                    v685 = (char *)(v687 + 13);
                    *((_OWORD *)v687 + 4) = v684;
                    *((_OWORD *)v687 + 5) = v684;
                  }
                  else
                  {
                    v689 = *(_QWORD **)(a1 + 10248);
                    v690 = 0x4EC4EC4EC4EC4EC5 * (v687 - v689) + 1;
                    if (v690 > 0x276276276276276)
                      sub_20E867F44();
                    v691 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v688 - (_QWORD)v689) >> 3);
                    if (2 * v691 > v690)
                      v690 = 2 * v691;
                    if (v691 >= 0x13B13B13B13B13BLL)
                      v692 = 0x276276276276276;
                    else
                      v692 = v690;
                    if (v692)
                    {
                      if (v692 > 0x276276276276276)
                        sub_20E877A38();
                      v693 = (char *)operator new(104 * v692);
                      v684 = 0uLL;
                    }
                    else
                    {
                      v693 = 0;
                    }
                    v694 = &v693[8 * (v687 - v689)];
                    *(_QWORD *)v694 = v686;
                    *((_QWORD *)v694 + 3) = -1;
                    *((_QWORD *)v694 + 12) = v990;
                    *((_OWORD *)v694 + 2) = v684;
                    *((_OWORD *)v694 + 3) = v684;
                    *((_OWORD *)v694 + 4) = v684;
                    *((_OWORD *)v694 + 5) = v684;
                    if (v687 == v689)
                    {
                      *(_QWORD *)(a1 + 10248) = v694;
                      v685 = v694 + 104;
                      *(_QWORD *)(a1 + 10256) = v694 + 104;
                      *(_QWORD *)(a1 + 10264) = &v693[104 * v692];
                      if (v687)
                        goto LABEL_799;
                    }
                    else
                    {
                      v695 = 0;
                      do
                      {
                        v696 = &v694[v695 * 8];
                        *((_QWORD *)v696 - 13) = v687[v695 - 13];
                        *((_QWORD *)v696 - 12) = v687[v695 - 12];
                        *((_QWORD *)v696 - 11) = v687[v695 - 11];
                        *((_OWORD *)v696 - 5) = *(_OWORD *)&v687[v695 - 10];
                        v697 = *(_OWORD *)&v687[v695 - 8];
                        v698 = *(_OWORD *)&v687[v695 - 6];
                        v699 = *(_OWORD *)&v687[v695 - 2];
                        *((_OWORD *)v696 - 2) = *(_OWORD *)&v687[v695 - 4];
                        *((_OWORD *)v696 - 1) = v699;
                        *((_OWORD *)v696 - 4) = v697;
                        *((_OWORD *)v696 - 3) = v698;
                        v695 -= 13;
                      }
                      while (&v687[v695] != v689);
                      v687 = *(_QWORD **)(a1 + 10248);
                      *(_QWORD *)(a1 + 10248) = &v694[v695 * 8];
                      v685 = v694 + 104;
                      *(_QWORD *)(a1 + 10256) = v694 + 104;
                      *(_QWORD *)(a1 + 10264) = &v693[104 * v692];
                      if (v687)
                      {
LABEL_799:
                        operator delete(v687);
                        v684 = 0uLL;
                      }
                    }
                  }
                  *(_QWORD *)(a1 + 10256) = v685;
                  *((_QWORD *)v685 - 10) = v999.i64[0];
                  *(_OWORD *)(v685 - 72) = v684;
                  *(_OWORD *)(v685 - 56) = v684;
                  *(_OWORD *)(v685 - 40) = v684;
                  *(_OWORD *)(v685 - 24) = v684;
                  v999.i64[0] += (11 * *(_DWORD *)(v686 + 8));
                  *(_DWORD *)v686 = -1 - 991146299 * ((*(_QWORD *)(a1 + 10256) - *(_QWORD *)(a1 + 10248)) >> 3);
LABEL_781:
                  v682 += 16;
                  if (v682 == v683)
                    break;
                  continue;
                }
              }
            }
LABEL_803:
            *(_QWORD *)(a1 + 9816) = *(_QWORD *)(a1 + 9808);
            *(_QWORD *)(a1 + 9840) = *(_QWORD *)(a1 + 9832);
            *(_QWORD *)(a1 + 9864) = *(_QWORD *)(a1 + 9856);
            *(_QWORD *)(a1 + 9888) = *(_QWORD *)(a1 + 9880);
            *(_QWORD *)(a1 + 9912) = *(_QWORD *)(a1 + 9904);
            *(_QWORD *)(a1 + 9936) = *(_QWORD *)(a1 + 9928);
            *(_QWORD *)(a1 + 9960) = *(_QWORD *)(a1 + 9952);
            *(_QWORD *)(a1 + 9984) = *(_QWORD *)(a1 + 9976);
            *(_OWORD *)(a1 + 10000) = 0u;
            *(_OWORD *)(a1 + 10016) = 0u;
            *(_OWORD *)(a1 + 10032) = 0u;
            *(_QWORD *)(a1 + 10048) = 0;
            v700 = *(_QWORD *)(a1 + 10056);
            *(_QWORD *)(a1 + 10064) = v700;
            *(_QWORD *)(a1 + 10088) = *(_QWORD *)(a1 + 10080);
            *(_QWORD *)(a1 + 10112) = *(_QWORD *)(a1 + 10104);
            *(_QWORD *)(a1 + 10136) = *(_QWORD *)(a1 + 10128);
            *(_QWORD *)(a1 + 10160) = *(_QWORD *)(a1 + 10152);
            *(_QWORD *)(a1 + 10184) = *(_QWORD *)(a1 + 10176);
            *(_QWORD *)(a1 + 10208) = *(_QWORD *)(a1 + 10200);
            v701 = v999.i64[0];
            if (v999.i64[0])
            {
              sub_20EAC9ECC(v990, v999.u64[0]);
              v700 = *(_QWORD *)(a1 + 10056);
              v702 = (*(_QWORD *)(a1 + 10064) - v700) >> 4;
              v703 = v701 >= v702;
              if (v701 > v702)
              {
                sub_20F5BB76C((uint64_t *)(a1 + 10056), v701 - v702);
                goto LABEL_809;
              }
            }
            else
            {
              v703 = 1;
            }
            if (!v703)
              *(_QWORD *)(a1 + 10064) = v700 + 16 * v701;
LABEL_809:
            v704 = *(_QWORD *)(a1 + 10080);
            v705 = (*(_QWORD *)(a1 + 10088) - v704) >> 4;
            if (v701 <= v705)
            {
              if (v701 < v705)
                *(_QWORD *)(a1 + 10088) = v704 + 16 * v701;
            }
            else
            {
              sub_20F5BB76C((uint64_t *)(a1 + 10080), v701 - v705);
            }
            v706 = *(_QWORD *)(a1 + 10104);
            v707 = (*(_QWORD *)(a1 + 10112) - v706) >> 4;
            if (v701 <= v707)
            {
              if (v701 < v707)
                *(_QWORD *)(a1 + 10112) = v706 + 16 * v701;
            }
            else
            {
              sub_20F5BB76C((uint64_t *)(a1 + 10104), v701 - v707);
            }
            v708 = *(_QWORD *)(a1 + 10128);
            v709 = (*(_QWORD *)(a1 + 10136) - v708) >> 4;
            if (v701 <= v709)
            {
              if (v701 < v709)
                *(_QWORD *)(a1 + 10136) = v708 + 16 * v701;
            }
            else
            {
              sub_20F5BB76C((uint64_t *)(a1 + 10128), v701 - v709);
            }
            v710 = *(_QWORD *)(a1 + 10152);
            v711 = (*(_QWORD *)(a1 + 10160) - v710) >> 4;
            if (v701 <= v711)
            {
              if (v701 < v711)
                *(_QWORD *)(a1 + 10160) = v710 + 16 * v701;
            }
            else
            {
              sub_20F5BB76C((uint64_t *)(a1 + 10152), v701 - v711);
            }
            v712 = *(_QWORD *)(a1 + 10176);
            v713 = (*(_QWORD *)(a1 + 10184) - v712) >> 4;
            if (v701 <= v713)
            {
              if (v701 < v713)
                *(_QWORD *)(a1 + 10184) = v712 + 16 * v701;
            }
            else
            {
              sub_20F5BB76C((uint64_t *)(a1 + 10176), v701 - v713);
            }
            v714 = *(_QWORD *)(a1 + 10200);
            v715 = (*(_QWORD *)(a1 + 10208) - v714) >> 4;
            if (v701 <= v715)
            {
              if (v701 < v715)
                *(_QWORD *)(a1 + 10208) = v714 + 16 * v701;
            }
            else
            {
              sub_20F5BB76C((uint64_t *)(a1 + 10200), v701 - v715);
            }
            v716 = v988[109];
            v717 = v988[110];
            if (v716 != v717)
            {
              v718 = 0;
              v991 = v988[110];
              while (2)
              {
                if (!sub_20F556208((_QWORD *)(v716 + 56)))
                  goto LABEL_838;
                v720 = *(unsigned int **)(v716 + 136);
                v721 = *v720;
                if (*((_BYTE *)v720 + 20))
                {
                  v722 = *(_QWORD *)(a1 + 10224);
                  v723 = v722 + 104 * v721;
                  v725 = *(_QWORD *)(v723 + 24);
                  v724 = (unint64_t *)(v723 + 24);
                  v726 = (_QWORD *)v724[9];
                  *(_QWORD *)(*v726 + 8 * (v724[1] + v725)) = v718;
                  ++v724[1];
                  v727 = **(_DWORD **)(v716 + 56);
                  if (v727 != -1)
                  {
                    v728 = v722 + 104 * v721;
                    v731 = *(_QWORD *)(v728 + 64);
                    v730 = (_QWORD *)(v728 + 64);
                    v729 = v731;
                    v732 = v731 + *v724;
                    v733 = v726[40];
                    if (v732 <= *v724)
                    {
LABEL_846:
                      v738 = v733 + 16 * v732;
                      goto LABEL_847;
                    }
                    v734 = 16 * *v724;
                    v735 = v729 + 1;
                    v736 = 16 * v729 + 16;
                    while (1)
                    {
                      v737 = *(_DWORD *)(v733 + v734);
                      if (v737 >= v727)
                        break;
                      v734 += 16;
                      --v735;
                      v736 -= 16;
                      if (v735 == 1)
                        goto LABEL_846;
                    }
                    if (v737 > v727)
                    {
                      if (v735)
                      {
                        v843 = v722;
                        memmove((void *)(v733 + 16 * v732 - v736 + 32), (const void *)(v733 + v734), v736);
                        v722 = v843;
                        v733 = v726[40];
                      }
                      v738 = v733 + v734;
LABEL_847:
                      *(_DWORD *)v738 = v727;
                      *(_QWORD *)(v738 + 8) = -1;
                      ++v726[27];
                      ++*v730;
                    }
                  }
                  v739 = **(_DWORD **)(v716 + 64);
                  if (v739 != -1)
                  {
                    v740 = v722 + 104 * v721;
                    v743 = *(_QWORD *)(v740 + 64);
                    v742 = (_QWORD *)(v740 + 64);
                    v741 = v743;
                    v744 = v743 + *v724;
                    v745 = v726[40];
                    if (v744 <= *v724)
                    {
LABEL_853:
                      v750 = v745 + 16 * v744;
                      goto LABEL_854;
                    }
                    v746 = 16 * *v724;
                    v747 = v741 + 1;
                    v748 = 16 * v741 + 16;
                    while (1)
                    {
                      v749 = *(_DWORD *)(v745 + v746);
                      if (v749 >= v739)
                        break;
                      v746 += 16;
                      --v747;
                      v748 -= 16;
                      if (v747 == 1)
                        goto LABEL_853;
                    }
                    if (v749 > v739)
                    {
                      if (v747)
                      {
                        v844 = v722;
                        memmove((void *)(v745 + 16 * v744 - v748 + 32), (const void *)(v745 + v746), v748);
                        v722 = v844;
                        v745 = v726[40];
                      }
                      v750 = v745 + v746;
LABEL_854:
                      *(_DWORD *)v750 = v739;
                      *(_QWORD *)(v750 + 8) = -1;
                      ++v726[27];
                      ++*v742;
                    }
                  }
                  v751 = (uint64_t *)(v724 + 2);
                  v752 = **(_DWORD **)(v716 + 72);
                  if (v752 != -1)
                  {
                    v753 = *v751;
                    v754 = *v751 + *v724;
                    v755 = v726[31];
                    if (v754 <= *v724)
                    {
LABEL_860:
                      v760 = v755 + 16 * v754;
                      goto LABEL_861;
                    }
                    v756 = 16 * *v724;
                    v757 = v753 + 1;
                    v758 = 16 * v753 + 16;
                    while (1)
                    {
                      v759 = *(_DWORD *)(v755 + v756);
                      if (v759 >= v752)
                        break;
                      v756 += 16;
                      --v757;
                      v758 -= 16;
                      if (v757 == 1)
                        goto LABEL_860;
                    }
                    if (v759 > v752)
                    {
                      if (v757)
                      {
                        v845 = v722;
                        memmove((void *)(v755 + 16 * v754 - v758 + 32), (const void *)(v755 + v756), v758);
                        v722 = v845;
                        v755 = v726[31];
                      }
                      v760 = v755 + v756;
LABEL_861:
                      *(_DWORD *)v760 = v752;
                      *(_QWORD *)(v760 + 8) = -1;
                      ++v726[24];
                      ++*v751;
                    }
                  }
                  v761 = **(_DWORD **)(v716 + 80);
                  if (v761 != -1)
                  {
                    v762 = *v751;
                    v763 = *v751 + *v724;
                    v764 = v726[31];
                    if (v763 <= *v724)
                    {
LABEL_867:
                      v769 = v764 + 16 * v763;
                      goto LABEL_868;
                    }
                    v765 = 16 * *v724;
                    v766 = v762 + 1;
                    v767 = 16 * v762 + 16;
                    while (1)
                    {
                      v768 = *(_DWORD *)(v764 + v765);
                      if (v768 >= v761)
                        break;
                      v765 += 16;
                      --v766;
                      v767 -= 16;
                      if (v766 == 1)
                        goto LABEL_867;
                    }
                    if (v768 > v761)
                    {
                      if (v766)
                      {
                        v846 = v722;
                        memmove((void *)(v764 + 16 * v763 - v767 + 32), (const void *)(v764 + v765), v767);
                        v722 = v846;
                        v764 = v726[31];
                      }
                      v769 = v764 + v765;
LABEL_868:
                      *(_DWORD *)v769 = v761;
                      *(_QWORD *)(v769 + 8) = -1;
                      ++v726[24];
                      ++*v751;
                    }
                  }
                  v770 = **(_DWORD **)(v716 + 88);
                  if (v770 != -1)
                  {
                    v771 = v722 + 104 * v721;
                    v774 = *(_QWORD *)(v771 + 72);
                    v773 = (_QWORD *)(v771 + 72);
                    v772 = v774;
                    v775 = v774 + *v724;
                    v776 = v726[43];
                    if (v775 <= *v724)
                    {
LABEL_874:
                      v781 = v776 + 16 * v775;
                      goto LABEL_875;
                    }
                    v777 = 16 * *v724;
                    v778 = v772 + 1;
                    v779 = 16 * v772 + 16;
                    while (1)
                    {
                      v780 = *(_DWORD *)(v776 + v777);
                      if (v780 >= v770)
                        break;
                      v777 += 16;
                      --v778;
                      v779 -= 16;
                      if (v778 == 1)
                        goto LABEL_874;
                    }
                    if (v780 > v770)
                    {
                      if (v778)
                      {
                        v847 = v722;
                        memmove((void *)(v776 + 16 * v775 - v779 + 32), (const void *)(v776 + v777), v779);
                        v722 = v847;
                        v776 = v726[43];
                      }
                      v781 = v776 + v777;
LABEL_875:
                      *(_DWORD *)v781 = v770;
                      *(_QWORD *)(v781 + 8) = -1;
                      ++v726[28];
                      ++*v773;
                    }
                  }
                  v782 = **(_DWORD **)(v716 + 96);
                  if (v782 != -1)
                  {
                    v783 = v722 + 104 * v721;
                    v786 = *(_QWORD *)(v783 + 72);
                    v785 = (_QWORD *)(v783 + 72);
                    v784 = v786;
                    v787 = v786 + *v724;
                    v788 = v726[43];
                    if (v787 <= *v724)
                    {
LABEL_881:
                      v793 = v788 + 16 * v787;
                      goto LABEL_882;
                    }
                    v789 = 16 * *v724;
                    v790 = v784 + 1;
                    v791 = 16 * v784 + 16;
                    while (1)
                    {
                      v792 = *(_DWORD *)(v788 + v789);
                      if (v792 >= v782)
                        break;
                      v789 += 16;
                      --v790;
                      v791 -= 16;
                      if (v790 == 1)
                        goto LABEL_881;
                    }
                    if (v792 > v782)
                    {
                      if (v790)
                      {
                        v848 = v722;
                        memmove((void *)(v788 + 16 * v787 - v791 + 32), (const void *)(v788 + v789), v791);
                        v722 = v848;
                        v788 = v726[43];
                      }
                      v793 = v788 + v789;
LABEL_882:
                      *(_DWORD *)v793 = v782;
                      *(_QWORD *)(v793 + 8) = -1;
                      ++v726[28];
                      ++*v785;
                    }
                  }
                  v794 = **(_DWORD **)(v716 + 104);
                  if (v794 != -1)
                  {
                    v795 = v722 + 104 * v721;
                    v798 = *(_QWORD *)(v795 + 80);
                    v797 = (_QWORD *)(v795 + 80);
                    v796 = v798;
                    v799 = v798 + *v724;
                    v800 = v726[46];
                    if (v799 <= *v724)
                    {
LABEL_888:
                      v805 = v800 + 16 * v799;
                      goto LABEL_889;
                    }
                    v801 = 16 * *v724;
                    v802 = v796 + 1;
                    v803 = 16 * v796 + 16;
                    while (1)
                    {
                      v804 = *(_DWORD *)(v800 + v801);
                      if (v804 >= v794)
                        break;
                      v801 += 16;
                      --v802;
                      v803 -= 16;
                      if (v802 == 1)
                        goto LABEL_888;
                    }
                    if (v804 > v794)
                    {
                      if (v802)
                      {
                        v849 = v722;
                        memmove((void *)(v800 + 16 * v799 - v803 + 32), (const void *)(v800 + v801), v803);
                        v722 = v849;
                        v800 = v726[46];
                      }
                      v805 = v800 + v801;
LABEL_889:
                      *(_DWORD *)v805 = v794;
                      *(_QWORD *)(v805 + 8) = -1;
                      ++v726[29];
                      ++*v797;
                    }
                  }
                  v806 = **(_DWORD **)(v716 + 112);
                  if (v806 != -1)
                  {
                    v807 = v722 + 104 * v721;
                    v810 = *(_QWORD *)(v807 + 80);
                    v809 = (_QWORD *)(v807 + 80);
                    v808 = v810;
                    v811 = v810 + *v724;
                    v812 = v726[46];
                    if (v811 <= *v724)
                    {
LABEL_895:
                      v817 = v812 + 16 * v811;
                      goto LABEL_896;
                    }
                    v813 = 16 * *v724;
                    v814 = v808 + 1;
                    v815 = 16 * v808 + 16;
                    while (1)
                    {
                      v816 = *(_DWORD *)(v812 + v813);
                      if (v816 >= v806)
                        break;
                      v813 += 16;
                      --v814;
                      v815 -= 16;
                      if (v814 == 1)
                        goto LABEL_895;
                    }
                    if (v816 > v806)
                    {
                      if (v814)
                      {
                        v850 = v722;
                        memmove((void *)(v812 + 16 * v811 - v815 + 32), (const void *)(v812 + v813), v815);
                        v722 = v850;
                        v812 = v726[46];
                      }
                      v817 = v812 + v813;
LABEL_896:
                      *(_DWORD *)v817 = v806;
                      *(_QWORD *)(v817 + 8) = -1;
                      ++v726[29];
                      ++*v809;
                    }
                  }
                  v818 = **(_DWORD **)(v716 + 120);
                  if (v818 != -1)
                  {
                    v819 = v722 + 104 * v721;
                    v822 = *(_QWORD *)(v819 + 88);
                    v821 = (_QWORD *)(v819 + 88);
                    v820 = v822;
                    v823 = v822 + *v724;
                    v824 = v726[49];
                    if (v823 <= *v724)
                    {
LABEL_902:
                      v829 = v824 + 16 * v823;
                      goto LABEL_903;
                    }
                    v825 = 16 * *v724;
                    v826 = v820 + 1;
                    v827 = 16 * v820 + 16;
                    while (1)
                    {
                      v828 = *(_DWORD *)(v824 + v825);
                      if (v828 >= v818)
                        break;
                      v825 += 16;
                      --v826;
                      v827 -= 16;
                      if (v826 == 1)
                        goto LABEL_902;
                    }
                    if (v828 > v818)
                    {
                      if (v826)
                      {
                        v851 = v722;
                        memmove((void *)(v824 + 16 * v823 - v827 + 32), (const void *)(v824 + v825), v827);
                        v722 = v851;
                        v824 = v726[49];
                      }
                      v829 = v824 + v825;
LABEL_903:
                      *(_DWORD *)v829 = v818;
                      *(_QWORD *)(v829 + 8) = -1;
                      ++v726[30];
                      ++*v821;
                    }
                  }
                  v830 = **(_DWORD **)(v716 + 128);
                  v717 = v991;
                  if (v830 == -1)
                    goto LABEL_838;
                  v831 = v722 + 104 * v721;
                  v834 = *(_QWORD *)(v831 + 88);
                  v833 = v831 + 88;
                  v832 = v834;
                  v835 = v834 + *v724;
                  v836 = v726[49];
                  if (v835 <= *v724)
                  {
LABEL_835:
                    v719 = v836 + 16 * v835;
                  }
                  else
                  {
                    v837 = 16 * *v724;
                    v838 = v832 + 1;
                    v839 = 16 * v832 + 16;
                    while (1)
                    {
                      v840 = *(_DWORD *)(v836 + v837);
                      if (v840 >= v830)
                        break;
                      v837 += 16;
                      --v838;
                      v839 -= 16;
                      if (v838 == 1)
                        goto LABEL_835;
                    }
                    if (v840 <= v830)
                      goto LABEL_838;
                    if (v838)
                    {
                      memmove((void *)(v836 + 16 * v835 - v839 + 32), (const void *)(v836 + v837), v839);
                      v836 = v726[49];
                    }
                    v719 = v836 + v837;
                  }
                  *(_DWORD *)v719 = v830;
                  *(_QWORD *)(v719 + 8) = -1;
                  ++v726[30];
                }
                else
                {
                  if ((v720[1] & 2) != 0)
                    goto LABEL_838;
                  v841 = *(_QWORD *)(a1 + 10248) + 104 * v721;
                  v842 = *(_QWORD *)(v841 + 32);
                  v833 = v841 + 32;
                  *(_QWORD *)(**(_QWORD **)(v833 + 64) + 8 * (v842 + *(_QWORD *)(v833 - 8))) = v718;
                }
                ++*(_QWORD *)v833;
LABEL_838:
                v716 += 216;
                ++v718;
                if (v716 == v717)
                  break;
                continue;
              }
            }
            v852 = 6 * *(_QWORD *)(a1 + 10000);
            v853 = *(_QWORD *)(a1 + 9832);
            v854 = (*(_QWORD *)(a1 + 9840) - v853) >> 3;
            if (v852 <= v854)
            {
              v12 = v977;
              v16 = v978;
              v15 = v985;
              v14 = v986;
              v13 = v975;
              v10 = v976;
              v8 = v973;
              v11 = v974;
              v6 = v972;
              if (v852 < v854)
                *(_QWORD *)(a1 + 9840) = v853 + 48 * *(_QWORD *)(a1 + 10000);
            }
            else
            {
              sub_20E93D8FC(a1 + 9832, v852 - v854);
              v12 = v977;
              v16 = v978;
              v15 = v985;
              v14 = v986;
              v13 = v975;
              v10 = v976;
              v8 = v973;
              v11 = v974;
              v6 = v972;
            }
            v855 = *(_QWORD *)(a1 + 10056);
            v856 = *(_QWORD *)(a1 + 10064);
            if (v855 != v856)
            {
              v857 = 0;
              do
              {
                if (*(_DWORD *)v855 != -1)
                {
                  *(_QWORD *)(v855 + 8) = v857;
                  v857 += 6;
                }
                v855 += 16;
              }
              while (v855 != v856);
            }
            v858 = 9 * *(_QWORD *)(a1 + 10008);
            v859 = *(_QWORD *)(a1 + 9856);
            v860 = (*(_QWORD *)(a1 + 9864) - v859) >> 3;
            if (v858 <= v860)
            {
              if (v858 < v860)
                *(_QWORD *)(a1 + 9864) = v859 + 72 * *(_QWORD *)(a1 + 10008);
            }
            else
            {
              sub_20E93D8FC(a1 + 9856, v858 - v860);
            }
            v861 = *(_QWORD *)(a1 + 10080);
            v862 = *(_QWORD *)(a1 + 10088);
            if (v861 != v862)
            {
              v863 = 0;
              do
              {
                if (*(_DWORD *)v861 != -1)
                {
                  *(_QWORD *)(v861 + 8) = v863;
                  v863 += 9;
                }
                v861 += 16;
              }
              while (v861 != v862);
            }
            v864 = *(_QWORD *)(a1 + 10016);
            v865 = *(_QWORD *)(a1 + 9880);
            v866 = (*(_QWORD *)(a1 + 9888) - v865) >> 3;
            if (v864 <= v866)
            {
              if (v864 < v866)
                *(_QWORD *)(a1 + 9888) = v865 + 8 * v864;
            }
            else
            {
              sub_20E93D8FC(a1 + 9880, v864 - v866);
            }
            v867 = *(_QWORD *)(a1 + 10104);
            v868 = *(_QWORD *)(a1 + 10112);
            if (v867 != v868)
            {
              v869 = 0;
              do
              {
                if (*(_DWORD *)v867 != -1)
                  *(_QWORD *)(v867 + 8) = v869++;
                v867 += 16;
              }
              while (v867 != v868);
            }
            v870 = 6 * *(_QWORD *)(a1 + 10024);
            v871 = *(_QWORD *)(a1 + 9904);
            v872 = (*(_QWORD *)(a1 + 9912) - v871) >> 3;
            if (v870 <= v872)
            {
              if (v870 < v872)
                *(_QWORD *)(a1 + 9912) = v871 + 48 * *(_QWORD *)(a1 + 10024);
            }
            else
            {
              sub_20E93D8FC(a1 + 9904, v870 - v872);
            }
            v873 = *(_QWORD *)(a1 + 10128);
            v874 = *(_QWORD *)(a1 + 10136);
            if (v873 != v874)
            {
              v875 = 0;
              do
              {
                if (*(_DWORD *)v873 != -1)
                {
                  *(_QWORD *)(v873 + 8) = v875;
                  v875 += 6;
                }
                v873 += 16;
              }
              while (v873 != v874);
            }
            v876 = 4 * *(_QWORD *)(a1 + 10032);
            v877 = *(_QWORD *)(a1 + 9928);
            v878 = (*(_QWORD *)(a1 + 9936) - v877) >> 3;
            if (v876 <= v878)
            {
              if (v876 < v878)
                *(_QWORD *)(a1 + 9936) = v877 + 32 * *(_QWORD *)(a1 + 10032);
            }
            else
            {
              sub_20E93D8FC(a1 + 9928, v876 - v878);
            }
            v879 = *(_QWORD *)(a1 + 10152);
            v880 = *(_QWORD *)(a1 + 10160);
            if (v879 != v880)
            {
              v881 = 0;
              do
              {
                if (*(_DWORD *)v879 != -1)
                {
                  *(_QWORD *)(v879 + 8) = v881;
                  v881 += 4;
                }
                v879 += 16;
              }
              while (v879 != v880);
            }
            v882 = 4 * *(_QWORD *)(a1 + 10040);
            v883 = *(_QWORD *)(a1 + 9952);
            v884 = (*(_QWORD *)(a1 + 9960) - v883) >> 3;
            if (v882 <= v884)
            {
              if (v882 < v884)
                *(_QWORD *)(a1 + 9960) = v883 + 32 * *(_QWORD *)(a1 + 10040);
            }
            else
            {
              sub_20E93D8FC(a1 + 9952, v882 - v884);
            }
            v885 = *(_QWORD *)(a1 + 10176);
            v886 = *(_QWORD *)(a1 + 10184);
            if (v885 != v886)
            {
              v887 = 0;
              do
              {
                if (*(_DWORD *)v885 != -1)
                {
                  *(_QWORD *)(v885 + 8) = v887;
                  v887 += 4;
                }
                v885 += 16;
              }
              while (v885 != v886);
            }
            v888 = 3 * *(_QWORD *)(a1 + 10048);
            v889 = *(_QWORD *)(a1 + 9976);
            v890 = (*(_QWORD *)(a1 + 9984) - v889) >> 3;
            if (v888 <= v890)
            {
              if (v888 < v890)
                *(_QWORD *)(a1 + 9984) = v889 + 24 * *(_QWORD *)(a1 + 10048);
            }
            else
            {
              sub_20E93D8FC(a1 + 9976, v888 - v890);
            }
            v891 = *(_QWORD *)(a1 + 10200);
            v892 = *(_QWORD *)(a1 + 10208);
            if (v891 != v892)
            {
              v893 = 0;
              do
              {
                if (*(_DWORD *)v891 != -1)
                {
                  *(_QWORD *)(v891 + 8) = v893;
                  v893 += 3;
                }
                v891 += 16;
              }
              while (v891 != v892);
            }
            if (v992)
            {
              v894 = v988[85];
              for (i = v988[86]; v894 != i; v894 += 16)
              {
                v896 = *(_QWORD *)(v894 + 8);
                if (!*(_BYTE *)(v896 + 20))
                  *(_DWORD *)v896 = -1;
              }
            }
            kdebug_trace();
            v7 = v983;
            v9 = v984;
            v4 = v981;
            v2 = v982;
            v5 = v979;
            v3 = v980;
LABEL_1022:
            if (((unint64_t)(v4 - v5) >> 2)
               + ((unint64_t)(v2 - v3) >> 2)
               + ((unint64_t)(v6 - v7) >> 2)
               + ((unint64_t)(v8 - v9) >> 2)
               + ((unint64_t)(v10 - v11) >> 2)
               + ((unint64_t)(v12 - v13) >> 2)
               + ((unint64_t)(v14 - v15) >> 2))
            {
              return 0;
            }
            if (*(_BYTE *)(a1 + 1096))
            {
              v898 = *(_QWORD *)(a1 + 128);
              v899 = *(_QWORD *)(a1 + 136);
              if (v898 == v899)
              {
                v900 = 0;
              }
              else
              {
                v900 = 0;
                do
                {
                  v901 = *(_QWORD *)(v898 + 8);
                  if ((*(_BYTE *)(v901 + 4) & 6) == 0 && *(_BYTE *)(v901 + 20))
                    v900 += 6;
                  v898 += 16;
                }
                while (v898 != v899);
              }
              for (j = *(_QWORD *)(a1 + 224); j != *(_QWORD *)(a1 + 232); j += 16)
              {
                v906 = *(_QWORD *)(j + 8);
                if ((*(_BYTE *)(v906 + 4) & 6) == 0 && *(_BYTE *)(v906 + 20))
                  v900 += 9;
              }
              for (k = *(_QWORD *)(a1 + 320); k != *(_QWORD *)(a1 + 328); k += 16)
              {
                v908 = *(_QWORD *)(k + 8);
                if ((*(_BYTE *)(v908 + 4) & 6) == 0)
                  v900 += *(unsigned __int8 *)(v908 + 20);
              }
              for (m = *(_QWORD *)(a1 + 416); m != *(_QWORD *)(a1 + 424); m += 16)
              {
                v910 = *(_QWORD *)(m + 8);
                if ((*(_BYTE *)(v910 + 4) & 6) == 0 && *(_BYTE *)(v910 + 20))
                  v900 += 6;
              }
              for (n = *(_QWORD *)(a1 + 512); n != *(_QWORD *)(a1 + 520); n += 16)
              {
                v912 = *(_QWORD *)(n + 8);
                if ((*(_BYTE *)(v912 + 4) & 6) == 0 && *(_BYTE *)(v912 + 20))
                  v900 += 4;
              }
              for (ii = *(_QWORD *)(a1 + 608); ii != *(_QWORD *)(a1 + 616); ii += 16)
              {
                v914 = *(_QWORD *)(ii + 8);
                if ((*(_BYTE *)(v914 + 4) & 6) == 0 && *(_BYTE *)(v914 + 20))
                  v900 += 4;
              }
              for (jj = *(_QWORD *)(a1 + 704); jj != *(_QWORD *)(a1 + 712); jj += 16)
              {
                v916 = *(_QWORD *)(jj + 8);
                if ((*(_BYTE *)(v916 + 4) & 6) == 0 && *(_BYTE *)(v916 + 20))
                  v900 += 3;
              }
              for (kk = *(_QWORD *)(a1 + 800); kk != *(_QWORD *)(a1 + 808); kk += 16)
              {
                v918 = *(_QWORD *)(kk + 8);
                if ((*(_BYTE *)(v918 + 4) & 6) == 0)
                  v900 += *(unsigned __int8 *)(v918 + 20);
              }
              goto LABEL_1081;
            }
            v999 = 0u;
            v1000 = 0u;
            if (sub_20F5B8114(v16, v999.i32, &v992, 0))
            {
              *(_QWORD *)(a1 + 1688) = *(_QWORD *)(a1 + 1680);
              *(_QWORD *)(a1 + 1712) = *(_QWORD *)(a1 + 1704);
              *(_QWORD *)(a1 + 1736) = *(_QWORD *)(a1 + 1728);
              *(_QWORD *)(a1 + 1760) = *(_QWORD *)(a1 + 1752);
              *(_QWORD *)(a1 + 1784) = *(_QWORD *)(a1 + 1776);
              *(_QWORD *)(a1 + 1808) = *(_QWORD *)(a1 + 1800);
              *(_QWORD *)(a1 + 1832) = *(_QWORD *)(a1 + 1824);
              *(_QWORD *)(a1 + 1856) = *(_QWORD *)(a1 + 1848);
              v902 = *(_QWORD *)(a1 + 896);
              v903 = *(_QWORD *)(a1 + 904);
              while (v902 != v903)
              {
                v904 = *(_QWORD *)(v902 + 208);
                if (*(_BYTE *)(v902 + 496)
                  || (*(_BYTE *)(v904 + 4) & 6) != 0
                  || (*(_BYTE *)(*(_QWORD *)(v902 + 216) + 4) & 6) != 0)
                {
                  sub_20F394A20(a1 + 1680, v904);
                  sub_20F3D35E0((_QWORD *)(a1 + 1680), *(_QWORD *)(v902 + 216));
                }
                v902 += 504;
              }
              v923 = *(_QWORD *)(a1 + 920);
              v924 = *(_QWORD *)(a1 + 928);
              while (v923 != v924)
              {
                v925 = *(_QWORD *)(v923 + 136);
                if (*(_BYTE *)(v923 + 272) || (*(_BYTE *)(v925 + 4) & 6) != 0)
                  sub_20F394A20(a1 + 1680, v925);
                v923 += 280;
              }
              sub_20F5B8680(*(_QWORD *)(a1 + 944), *(_QWORD *)(a1 + 952), (_QWORD *)(a1 + 1680));
              sub_20F5B85BC(*(_QWORD *)(a1 + 968), *(_QWORD *)(a1 + 976), (_QWORD *)(a1 + 1680));
              sub_20F5B8444(*(_QWORD *)(a1 + 992), *(_QWORD *)(a1 + 1000), (_QWORD *)(a1 + 1680));
              v926 = *(_QWORD *)(a1 + 1016);
              v927 = *(_QWORD *)(a1 + 1024);
              while (v926 != v927)
              {
                v928 = *(_QWORD *)(v926 + 736);
                if (*(_BYTE *)(v926 + 880)
                  || (*(_BYTE *)(v928 + 4) & 6) != 0
                  || (*(_BYTE *)(*(_QWORD *)(v926 + 744) + 4) & 6) != 0)
                {
                  sub_20F394A20(a1 + 1680, v928);
                  sub_20F394A20(a1 + 1680, *(_QWORD *)(v926 + 744));
                }
                v926 += 888;
              }
              v929 = (*(_QWORD *)(a1 + 1688) - *(_QWORD *)(a1 + 1680)) >> 2;
              if (v999.i32[0] > v929)
                LODWORD(v929) = v999.i32[0];
              v703 = v992 >= v929;
              v930 = v992 - v929;
              if (!v703)
                v930 = 0;
              v931 = (*(_QWORD *)(a1 + 1712) - *(_QWORD *)(a1 + 1704)) >> 2;
              if (v999.i32[1] > v931)
                LODWORD(v931) = v999.i32[1];
              v703 = HIDWORD(v992) >= v931;
              v932 = HIDWORD(v992) - v931;
              if (!v703)
                v932 = 0;
              v933 = (*(_QWORD *)(a1 + 1736) - *(_QWORD *)(a1 + 1728)) >> 2;
              if (v999.i32[2] > v933)
                LODWORD(v933) = v999.i32[2];
              v703 = v993 >= v933;
              v934 = v993 - v933;
              if (!v703)
                v934 = 0;
              v935 = (*(_QWORD *)(a1 + 1760) - *(_QWORD *)(a1 + 1752)) >> 2;
              if (v999.i32[3] > v935)
                LODWORD(v935) = v999.i32[3];
              v703 = v994 >= v935;
              v936 = v994 - v935;
              if (!v703)
                v936 = 0;
              v937 = (*(_QWORD *)(a1 + 1784) - *(_QWORD *)(a1 + 1776)) >> 2;
              if (v1000.i32[0] > v937)
                LODWORD(v937) = v1000.i32[0];
              v703 = v995 >= v937;
              v938 = v995 - v937;
              if (!v703)
                v938 = 0;
              v939 = (*(_QWORD *)(a1 + 1808) - *(_QWORD *)(a1 + 1800)) >> 2;
              if (v1000.i32[1] > v939)
                LODWORD(v939) = v1000.i32[1];
              v703 = v996 >= v939;
              v940 = v996 - v939;
              if (!v703)
                v940 = 0;
              v941 = (*(_QWORD *)(a1 + 1832) - *(_QWORD *)(a1 + 1824)) >> 2;
              if (v1000.i32[2] > v941)
                LODWORD(v941) = v1000.i32[2];
              v703 = v997 >= v941;
              v942 = v997 - v941;
              if (!v703)
                v942 = 0;
              v943 = (*(_QWORD *)(a1 + 1856) - *(_QWORD *)(a1 + 1848)) >> 2;
              if (v1000.i32[3] > v943)
                LODWORD(v943) = v1000.i32[3];
              v703 = v998 >= v943;
              v944 = v998 - v943;
              if (!v703)
                v944 = 0;
              v900 = v934 + 9 * v932 + 6 * (v936 + v930) + 4 * (v940 + v938) + 3 * v942 + v944;
              sub_20F59A618(v16);
              if (!v900)
                return 1;
            }
            else
            {
              v900 = v993 + 9 * HIDWORD(v992) + 6 * (v994 + v992) + 3 * v997 + v998 + 4 * (v996 + v995);
LABEL_1081:
              if (!v900)
                return 1;
            }
            if (*(_BYTE *)(a1 + 1096) || !sub_20F5BB998(v16))
            {
              v922 = *(_QWORD *)(a1 + 1088);
            }
            else
            {
              v919 = *(_QWORD *)(a1 + 896);
              v920 = *(_QWORD *)(a1 + 904);
              if (v919 == v920)
              {
                v921 = 0;
              }
              else
              {
                v921 = 0;
                do
                {
                  if ((*(_BYTE *)(*(_QWORD *)(v919 + 208) + 4) & 6) == 0
                    && (*(_BYTE *)(*(_QWORD *)(v919 + 216) + 4) & 6) == 0)
                  {
                    ++v921;
                  }
                  v919 += 504;
                }
                while (v919 != v920);
              }
              v999.i64[0] = 15 * v921;
              v945 = *(_QWORD *)(a1 + 920);
              v946 = *(_QWORD *)(a1 + 928);
              if (v945 == v946)
              {
                v950 = 0;
              }
              else
              {
                v947 = v946 - v945 - 280;
                if (v947 < 0x118)
                {
                  v948 = 0;
                  v949 = *(_QWORD *)(a1 + 920);
                  goto LABEL_1153;
                }
                v951 = 0;
                v952 = 0;
                v953 = v947 / 0x118 + 1;
                v949 = v945 + 280 * (v953 & 0x1FFFFFFFFFFFFFELL);
                v954 = v953 & 0x1FFFFFFFFFFFFFELL;
                do
                {
                  if ((*(_BYTE *)(*(_QWORD *)(v945 + 136) + 4) & 6) == 0)
                    ++v951;
                  if ((*(_BYTE *)(*(_QWORD *)(v945 + 416) + 4) & 6) == 0)
                    ++v952;
                  v945 += 560;
                  v954 -= 2;
                }
                while (v954);
                v948 = v952 + v951;
                if (v953 != (v953 & 0x1FFFFFFFFFFFFFELL))
                {
                  do
                  {
LABEL_1153:
                    if ((*(_BYTE *)(*(_QWORD *)(v949 + 136) + 4) & 6) == 0)
                      ++v948;
                    v949 += 280;
                  }
                  while (v949 != v946);
                }
                v950 = 6 * v948;
              }
              v999.i64[1] = v950;
              v955 = *(_QWORD **)(a1 + 944);
              v956 = *(_QWORD **)(a1 + 952);
              if (v955 == v956)
              {
                v957 = 0;
              }
              else
              {
                v957 = 0;
                do
                {
                  if ((*(_BYTE *)(v955[962] + 4) & 6) == 0
                    && (*(_BYTE *)(v955[963] + 4) & 6) == 0
                    && (*(_BYTE *)(v955[964] + 4) & 6) == 0
                    && (*(_BYTE *)(v955[965] + 4) & 6) == 0
                    && (*(_BYTE *)(v955[966] + 4) & 6) == 0)
                  {
                    ++v957;
                  }
                  v955 += 1002;
                }
                while (v955 != v956);
              }
              v1000.i64[0] = 15 * v957;
              v958 = *(_QWORD **)(a1 + 968);
              v959 = *(_QWORD **)(a1 + 976);
              if (v958 == v959)
              {
                v960 = 0;
              }
              else
              {
                v960 = 0;
                do
                {
                  if ((*(_BYTE *)(v958[628] + 4) & 6) == 0
                    && (*(_BYTE *)(v958[629] + 4) & 6) == 0
                    && (*(_BYTE *)(v958[630] + 4) & 6) == 0
                    && (*(_BYTE *)(v958[631] + 4) & 6) == 0)
                  {
                    ++v960;
                  }
                  v958 += 667;
                }
                while (v958 != v959);
              }
              v1000.i64[1] = 15 * v960;
              sub_20F5BBAFC(*(_QWORD **)(a1 + 992), *(_QWORD **)(a1 + 1000), (uint64_t)&v999);
              v961 = *(_QWORD *)(a1 + 1016);
              v962 = *(_QWORD *)(a1 + 1024);
              if (v961 == v962)
              {
                v963 = 0;
              }
              else
              {
                v963 = 0;
                do
                {
                  if ((*(_BYTE *)(*(_QWORD *)(v961 + 736) + 4) & 6) == 0
                    && (*(_BYTE *)(*(_QWORD *)(v961 + 744) + 4) & 6) == 0)
                  {
                    ++v963;
                  }
                  v961 += 888;
                }
                while (v961 != v962);
              }
              v922 = vaddvq_s64(vaddq_s64(v999, v1000)) + 6 * v963 + 2 * v1001;
            }
            return v922 < v900;
          }
        }
      }
LABEL_708:
      v596 = v582;
      v608 = v971;
      if (v971 == 1)
        goto LABEL_709;
      goto LABEL_695;
    }
    v18 = (int64x2_t *)(a1 + 1080);
    v19 = *(_QWORD *)(a1 + 896);
    v20 = *(_QWORD **)(a1 + 904);
    if ((_QWORD *)v19 == v20)
      goto LABEL_31;
    v21 = *(_QWORD *)(a1 + 904);
    while (!*(_BYTE *)(v19 + 496))
    {
      v19 += 504;
      if ((_QWORD *)v19 == v20)
        goto LABEL_32;
    }
    --*(_DWORD *)(*(_QWORD *)(v19 + 208) + 8);
    --*(_DWORD *)(*(_QWORD *)(v19 + 216) + 8);
    *(_QWORD *)(v19 + 208) = 0;
    *(_QWORD *)(v19 + 216) = 0;
    v22 = (int64x2_t)xmmword_2103B4950;
    *v18 = vaddq_s64(*v18, (int64x2_t)xmmword_2103B4950);
    if ((_QWORD *)v19 == v20)
      goto LABEL_32;
    v23 = (_QWORD *)(v19 + 504);
    if ((_QWORD *)(v19 + 504) == v20)
    {
LABEL_31:
      v21 = v19;
    }
    else
    {
      v21 = v19;
      do
      {
        while (1)
        {
          v24 = v23;
          v25 = (__int128 *)(v19 + 696);
          if (!*(_BYTE *)(v19 + 1000))
            break;
          --*(_DWORD *)(*(_QWORD *)(v19 + 712) + 8);
          --*(_DWORD *)(*(_QWORD *)(v19 + 720) + 8);
          *(_QWORD *)(v19 + 712) = 0;
          *(_QWORD *)(v19 + 720) = 0;
          *v18 = vaddq_s64(*v18, v22);
          v23 += 63;
          v19 = (uint64_t)v24;
          if (v24 + 63 == v20)
            goto LABEL_32;
        }
        *(_QWORD *)v21 = *v23;
        *(_OWORD *)(v21 + 8) = *(_OWORD *)(v19 + 512);
        v26 = *(_OWORD *)(v19 + 608);
        v27 = *(_OWORD *)(v19 + 624);
        v28 = *(_OWORD *)(v19 + 592);
        *(_OWORD *)(v21 + 72) = *(_OWORD *)(v19 + 576);
        *(_OWORD *)(v21 + 120) = v27;
        *(_OWORD *)(v21 + 104) = v26;
        *(_OWORD *)(v21 + 88) = v28;
        v30 = *(_OWORD *)(v19 + 656);
        v29 = *(_OWORD *)(v19 + 672);
        v31 = *(_QWORD *)(v19 + 688);
        *(_OWORD *)(v21 + 136) = *(_OWORD *)(v19 + 640);
        *(_QWORD *)(v21 + 184) = v31;
        *(_OWORD *)(v21 + 168) = v29;
        *(_OWORD *)(v21 + 152) = v30;
        v32 = *(_OWORD *)(v19 + 528);
        v33 = *(_OWORD *)(v19 + 544);
        *(_OWORD *)(v21 + 56) = *(_OWORD *)(v19 + 560);
        *(_OWORD *)(v21 + 40) = v33;
        *(_OWORD *)(v21 + 24) = v32;
        v34 = *v25;
        *(_QWORD *)v25 = 0;
        *(_QWORD *)(v19 + 704) = 0;
        v35 = *(std::__shared_weak_count **)(v21 + 200);
        *(_OWORD *)(v21 + 192) = v34;
        if (v35)
        {
          p_shared_owners = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(p_shared_owners);
          while (__stlxr(v37 - 1, p_shared_owners));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
            v22 = (int64x2_t)xmmword_2103B4950;
          }
        }
        *(_QWORD *)(v21 + 208) = *(_QWORD *)(v19 + 712);
        *(_QWORD *)(v21 + 216) = *(_QWORD *)(v19 + 720);
        v38 = *(_OWORD *)(v19 + 728);
        v39 = *(_OWORD *)(v19 + 744);
        v40 = *(_OWORD *)(v19 + 776);
        *(_OWORD *)(v21 + 256) = *(_OWORD *)(v19 + 760);
        *(_OWORD *)(v21 + 272) = v40;
        *(_OWORD *)(v21 + 224) = v38;
        *(_OWORD *)(v21 + 240) = v39;
        v41 = *(_OWORD *)(v19 + 792);
        v42 = *(_OWORD *)(v19 + 808);
        v43 = *(_OWORD *)(v19 + 824);
        *(_QWORD *)(v21 + 336) = *(_QWORD *)(v19 + 840);
        *(_OWORD *)(v21 + 304) = v42;
        *(_OWORD *)(v21 + 320) = v43;
        *(_OWORD *)(v21 + 288) = v41;
        v45 = *(_OWORD *)(v19 + 928);
        v44 = *(_OWORD *)(v19 + 944);
        v46 = *(_OWORD *)(v19 + 912);
        *(_QWORD *)(v21 + 456) = *(_QWORD *)(v19 + 960);
        *(_OWORD *)(v21 + 424) = v45;
        *(_OWORD *)(v21 + 440) = v44;
        *(_OWORD *)(v21 + 408) = v46;
        v47 = *(_OWORD *)(v19 + 848);
        v48 = *(_OWORD *)(v19 + 864);
        v49 = *(_OWORD *)(v19 + 896);
        *(_OWORD *)(v21 + 376) = *(_OWORD *)(v19 + 880);
        *(_OWORD *)(v21 + 392) = v49;
        *(_OWORD *)(v21 + 344) = v47;
        *(_OWORD *)(v21 + 360) = v48;
        v50 = *(_QWORD *)(v19 + 968);
        *(_BYTE *)(v21 + 472) = *(_BYTE *)(v19 + 976);
        *(_QWORD *)(v21 + 464) = v50;
        v51 = *(_OWORD *)(v19 + 984);
        *(_QWORD *)(v19 + 984) = 0;
        *(_QWORD *)(v19 + 992) = 0;
        v52 = *(std::__shared_weak_count **)(v21 + 488);
        *(_OWORD *)(v21 + 480) = v51;
        if (v52)
        {
          v53 = (unint64_t *)&v52->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
            v22 = (int64x2_t)xmmword_2103B4950;
          }
        }
        *(_BYTE *)(v21 + 496) = *(_BYTE *)(v19 + 1000);
        v21 += 504;
        v23 = v24 + 63;
        v19 = (uint64_t)v24;
      }
      while (v24 + 63 != v20);
    }
LABEL_32:
    v55 = *(_QWORD *)(a1 + 904);
    if (v21 != v55)
    {
      v56 = sub_20F5B64A0(v55, *(_QWORD *)(a1 + 904), v21);
      for (mm = *(_QWORD *)(a1 + 904); mm != v56; mm -= 504)
      {
        v58 = *(std::__shared_weak_count **)(mm - 16);
        if (v58)
        {
          v59 = (unint64_t *)&v58->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v61 = *(std::__shared_weak_count **)(mm - 304);
        if (v61)
        {
          v62 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
      }
      *(_QWORD *)(a1 + 904) = v56;
    }
    v64 = *(_QWORD **)(a1 + 920);
    v65 = *(_QWORD **)(a1 + 928);
    if (v64 == v65)
    {
      v66 = *(_QWORD *)(a1 + 920);
    }
    else
    {
      v66 = *(_QWORD *)(a1 + 928);
      v67 = v64 + 35;
      while (!*((_BYTE *)v67 - 8))
      {
        v68 = v67 == v65;
        v67 += 35;
        if (v68)
          goto LABEL_72;
      }
      --*(_DWORD *)(*(v67 - 18) + 8);
      *(v67 - 18) = 0;
      v69 = (int64x2_t)xmmword_2103B2310;
      *v18 = vaddq_s64(*v18, (int64x2_t)xmmword_2103B2310);
      v70 = v67 - 35;
      if (v67 - 35 != v65)
      {
        if (v67 == v65)
        {
          v66 = (uint64_t)(v67 - 35);
        }
        else
        {
          v66 = (uint64_t)(v67 - 35);
          do
          {
            while (1)
            {
              v71 = v67;
              if (!*((_BYTE *)v70 + 552))
                break;
              --*(_DWORD *)(v70[52] + 8);
              v70[52] = 0;
              *v18 = vaddq_s64(*v18, v69);
              v67 += 35;
              v70 = v71;
              if (v71 + 35 == v65)
                goto LABEL_72;
            }
            *(_QWORD *)v66 = *v67;
            *(_OWORD *)(v66 + 8) = *((_OWORD *)v70 + 18);
            v73 = *((_OWORD *)v70 + 21);
            v72 = *((_OWORD *)v70 + 22);
            v74 = v70[46];
            *(_OWORD *)(v66 + 40) = *((_OWORD *)v70 + 20);
            *(_QWORD *)(v66 + 88) = v74;
            *(_OWORD *)(v66 + 72) = v72;
            *(_OWORD *)(v66 + 56) = v73;
            *(_OWORD *)(v66 + 24) = *((_OWORD *)v70 + 19);
            v75 = *(_OWORD *)(v70 + 47);
            *(_QWORD *)(v66 + 112) = v70[49];
            *(_OWORD *)(v66 + 96) = v75;
            v76 = *((_OWORD *)v70 + 25);
            v70[50] = 0;
            v70[51] = 0;
            v77 = *(std::__shared_weak_count **)(v66 + 128);
            *(_OWORD *)(v66 + 120) = v76;
            if (v77)
            {
              v78 = (unint64_t *)&v77->__shared_owners_;
              do
                v79 = __ldaxr(v78);
              while (__stlxr(v79 - 1, v78));
              if (!v79)
              {
                ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                std::__shared_weak_count::__release_weak(v77);
                v69 = (int64x2_t)xmmword_2103B2310;
              }
            }
            *(_QWORD *)(v66 + 136) = v70[52];
            v80 = *(_OWORD *)(v70 + 53);
            v81 = *(_OWORD *)(v70 + 57);
            *(_OWORD *)(v66 + 160) = *(_OWORD *)(v70 + 55);
            *(_OWORD *)(v66 + 176) = v81;
            *(_OWORD *)(v66 + 144) = v80;
            v82 = *(_OWORD *)(v70 + 59);
            v83 = *(_OWORD *)(v70 + 63);
            *(_OWORD *)(v66 + 208) = *(_OWORD *)(v70 + 61);
            *(_OWORD *)(v66 + 224) = v83;
            *(_OWORD *)(v66 + 192) = v82;
            v84 = v70[65];
            *(_BYTE *)(v66 + 248) = *((_BYTE *)v70 + 528);
            *(_QWORD *)(v66 + 240) = v84;
            v85 = *(_OWORD *)(v70 + 67);
            v70[68] = 0;
            v70[67] = 0;
            v86 = *(std::__shared_weak_count **)(v66 + 264);
            *(_OWORD *)(v66 + 256) = v85;
            if (v86)
            {
              v87 = (unint64_t *)&v86->__shared_owners_;
              do
                v88 = __ldaxr(v87);
              while (__stlxr(v88 - 1, v87));
              if (!v88)
              {
                ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                std::__shared_weak_count::__release_weak(v86);
                v69 = (int64x2_t)xmmword_2103B2310;
              }
            }
            *(_BYTE *)(v66 + 272) = *((_BYTE *)v70 + 552);
            v66 += 280;
            v67 = v71 + 35;
            v70 = v71;
          }
          while (v71 + 35 != v65);
        }
      }
    }
LABEL_72:
    v89 = *(_QWORD *)(a1 + 928);
    if (v66 != v89)
    {
      v90 = sub_20F5B6660(v89, *(_QWORD *)(a1 + 928), v66);
      for (nn = *(_QWORD *)(a1 + 928); nn != v90; nn -= 280)
      {
        v92 = *(std::__shared_weak_count **)(nn - 16);
        if (v92)
        {
          v93 = (unint64_t *)&v92->__shared_owners_;
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        v95 = *(std::__shared_weak_count **)(nn - 152);
        if (v95)
        {
          v96 = (unint64_t *)&v95->__shared_owners_;
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
      }
      *(_QWORD *)(a1 + 928) = v90;
    }
    v98 = *(_QWORD *)(a1 + 944);
    v99 = *(_QWORD *)(a1 + 952);
    if (v98 == v99)
      goto LABEL_99;
    v100 = *(_QWORD *)(a1 + 952);
    while (!*(_BYTE *)(v98 + 8008))
    {
      v98 += 8016;
      if (v98 == v99)
        goto LABEL_100;
    }
    --*(_DWORD *)(*(_QWORD *)(v98 + 7696) + 8);
    --*(_DWORD *)(*(_QWORD *)(v98 + 7704) + 8);
    *(_OWORD *)(v98 + 7696) = 0u;
    --*(_DWORD *)(*(_QWORD *)(v98 + 7712) + 8);
    --*(_DWORD *)(*(_QWORD *)(v98 + 7720) + 8);
    *(_OWORD *)(v98 + 7712) = 0u;
    --*(_DWORD *)(*(_QWORD *)(v98 + 7728) + 8);
    *(_QWORD *)(v98 + 7728) = 0;
    *v18 = vaddq_s64(*v18, (int64x2_t)xmmword_2103B4950);
    if (v98 == v99)
      goto LABEL_100;
    if (v98 + 8016 == v99)
    {
LABEL_99:
      v100 = v98;
    }
    else
    {
      v100 = v98;
      do
      {
        while (!*(_BYTE *)(v98 + 16024))
        {
          *(_QWORD *)v100 = *(_QWORD *)(v98 + 8016);
          sub_20F5B67C0(v100 + 8, v98 + 8024);
          *(_BYTE *)(v100 + 8008) = *(_BYTE *)(v98 + 16024);
          v100 += 8016;
          v101 = v98 + 16032;
          v98 += 8016;
          if (v101 == v99)
            goto LABEL_100;
        }
        --*(_DWORD *)(*(_QWORD *)(v98 + 15712) + 8);
        --*(_DWORD *)(*(_QWORD *)(v98 + 15720) + 8);
        *(_OWORD *)(v98 + 15712) = 0u;
        --*(_DWORD *)(*(_QWORD *)(v98 + 15728) + 8);
        --*(_DWORD *)(*(_QWORD *)(v98 + 15736) + 8);
        *(_OWORD *)(v98 + 15728) = 0u;
        --*(_DWORD *)(*(_QWORD *)(v98 + 15744) + 8);
        *(_QWORD *)(v98 + 15744) = 0;
        *v18 = vaddq_s64(*v18, (int64x2_t)xmmword_2103B4950);
        v102 = v98 + 16032;
        v98 += 8016;
      }
      while (v102 != v99);
    }
LABEL_100:
    v103 = *(_QWORD *)(a1 + 952);
    if (v103 != v100)
    {
      do
      {
        v104 = *(std::__shared_weak_count **)(v103 - 16);
        if (v104)
        {
          v105 = (unint64_t *)&v104->__shared_owners_;
          do
            v106 = __ldaxr(v105);
          while (__stlxr(v106 - 1, v105));
          if (!v106)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
        v103 -= 8016;
      }
      while (v103 != v100);
      *(_QWORD *)(a1 + 952) = v100;
    }
    v107 = *(_QWORD *)(a1 + 968);
    v108 = *(_QWORD *)(a1 + 976);
    if (v107 == v108)
      goto LABEL_121;
    v109 = *(_QWORD *)(a1 + 976);
    while (!*(_BYTE *)(v107 + 5328))
    {
      v107 += 5336;
      if (v107 == v108)
        goto LABEL_122;
    }
    --*(_DWORD *)(*(_QWORD *)(v107 + 5024) + 8);
    --*(_DWORD *)(*(_QWORD *)(v107 + 5032) + 8);
    *(_OWORD *)(v107 + 5024) = 0u;
    --*(_DWORD *)(*(_QWORD *)(v107 + 5040) + 8);
    --*(_DWORD *)(*(_QWORD *)(v107 + 5048) + 8);
    *(_OWORD *)(v107 + 5040) = 0u;
    *v18 = vaddq_s64(*v18, (int64x2_t)xmmword_2103B4950);
    if (v107 == v108)
      goto LABEL_122;
    v110 = v107 + 5336;
    if (v107 + 5336 == v108)
    {
LABEL_121:
      v109 = v107;
    }
    else
    {
      v111 = (_BYTE *)(v107 + 10664);
      v109 = v107;
      do
      {
        while (!*v111)
        {
          sub_20F5B6B10(v109, v110);
          v109 += 5336;
          v110 += 5336;
          v111 += 5336;
          if (v110 == v108)
            goto LABEL_122;
        }
        --*(_DWORD *)(*((_QWORD *)v111 - 38) + 8);
        --*(_DWORD *)(*(_QWORD *)(v110 + 5032) + 8);
        *((_OWORD *)v111 - 19) = 0u;
        --*(_DWORD *)(*((_QWORD *)v111 - 36) + 8);
        --*(_DWORD *)(*((_QWORD *)v111 - 35) + 8);
        *((_OWORD *)v111 - 18) = 0u;
        *v18 = vaddq_s64(*v18, (int64x2_t)xmmword_2103B4950);
        v110 += 5336;
        v111 += 5336;
      }
      while (v110 != v108);
    }
LABEL_122:
    v112 = *(_QWORD *)(a1 + 976);
    if (v112 != v109)
    {
      do
      {
        v113 = *(std::__shared_weak_count **)(v112 - 16);
        if (v113)
        {
          v114 = (unint64_t *)&v113->__shared_owners_;
          do
            v115 = __ldaxr(v114);
          while (__stlxr(v115 - 1, v114));
          if (!v115)
          {
            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
            std::__shared_weak_count::__release_weak(v113);
          }
        }
        v112 -= 5336;
      }
      while (v112 != v109);
      *(_QWORD *)(a1 + 976) = v109;
    }
    v116 = *(_QWORD *)(a1 + 992);
    v117 = *(_QWORD **)(a1 + 1000);
    if ((_QWORD *)v116 == v117)
      goto LABEL_148;
    v118 = *(_QWORD *)(a1 + 1000);
    while (!*(_BYTE *)(v116 + 208))
    {
      v116 += 216;
      if ((_QWORD *)v116 == v117)
        goto LABEL_149;
    }
    --*(_DWORD *)(*(_QWORD *)(v116 + 56) + 8);
    --*(_DWORD *)(*(_QWORD *)(v116 + 64) + 8);
    *(_OWORD *)(v116 + 56) = 0u;
    --*(_DWORD *)(*(_QWORD *)(v116 + 72) + 8);
    --*(_DWORD *)(*(_QWORD *)(v116 + 80) + 8);
    *(_OWORD *)(v116 + 72) = 0u;
    --*(_DWORD *)(*(_QWORD *)(v116 + 88) + 8);
    --*(_DWORD *)(*(_QWORD *)(v116 + 96) + 8);
    *(_OWORD *)(v116 + 88) = 0u;
    --*(_DWORD *)(*(_QWORD *)(v116 + 104) + 8);
    --*(_DWORD *)(*(_QWORD *)(v116 + 112) + 8);
    *(_OWORD *)(v116 + 104) = 0u;
    --*(_DWORD *)(*(_QWORD *)(v116 + 120) + 8);
    --*(_DWORD *)(*(_QWORD *)(v116 + 128) + 8);
    *(_OWORD *)(v116 + 120) = 0u;
    --*(_DWORD *)(*(_QWORD *)(v116 + 136) + 8);
    *(_QWORD *)(v116 + 136) = 0;
    v119 = (int64x2_t)xmmword_210378050;
    *v18 = vaddq_s64(*v18, (int64x2_t)xmmword_210378050);
    if ((_QWORD *)v116 == v117)
      goto LABEL_149;
    v120 = (_QWORD *)(v116 + 216);
    if ((_QWORD *)(v116 + 216) == v117)
    {
LABEL_148:
      v118 = v116;
    }
    else
    {
      v121 = 0uLL;
      v118 = v116;
      do
      {
        while (1)
        {
          v122 = v120;
          if (!*(_BYTE *)(v116 + 424))
            break;
          --*(_DWORD *)(*(_QWORD *)(v116 + 272) + 8);
          --*(_DWORD *)(*(_QWORD *)(v116 + 280) + 8);
          *(_OWORD *)(v116 + 272) = v121;
          --*(_DWORD *)(*(_QWORD *)(v116 + 288) + 8);
          --*(_DWORD *)(*(_QWORD *)(v116 + 296) + 8);
          *(_OWORD *)(v116 + 288) = v121;
          --*(_DWORD *)(*(_QWORD *)(v116 + 304) + 8);
          --*(_DWORD *)(*(_QWORD *)(v116 + 312) + 8);
          *(_OWORD *)(v116 + 304) = v121;
          --*(_DWORD *)(*(_QWORD *)(v116 + 320) + 8);
          --*(_DWORD *)(*(_QWORD *)(v116 + 328) + 8);
          *(_OWORD *)(v116 + 320) = v121;
          --*(_DWORD *)(*(_QWORD *)(v116 + 336) + 8);
          --*(_DWORD *)(*(_QWORD *)(v116 + 344) + 8);
          *(_OWORD *)(v116 + 336) = v121;
          --*(_DWORD *)(*(_QWORD *)(v116 + 352) + 8);
          *(_QWORD *)(v116 + 352) = 0;
          *v18 = vaddq_s64(*v18, v119);
          v120 += 27;
          v116 = (uint64_t)v122;
          if (v122 + 27 == v117)
            goto LABEL_149;
        }
        *(_QWORD *)v118 = *v120;
        *(_QWORD *)(v118 + 8) = *(_QWORD *)(v116 + 224);
        *(_OWORD *)(v118 + 16) = *(_OWORD *)(v116 + 232);
        v123 = *(_OWORD *)(v116 + 248);
        *(_QWORD *)(v118 + 48) = *(_QWORD *)(v116 + 264);
        *(_OWORD *)(v118 + 32) = v123;
        *(_QWORD *)(v118 + 56) = *(_QWORD *)(v116 + 272);
        *(_QWORD *)(v118 + 64) = *(_QWORD *)(v116 + 280);
        *(_QWORD *)(v118 + 72) = *(_QWORD *)(v116 + 288);
        *(_QWORD *)(v118 + 80) = *(_QWORD *)(v116 + 296);
        *(_QWORD *)(v118 + 88) = *(_QWORD *)(v116 + 304);
        *(_QWORD *)(v118 + 96) = *(_QWORD *)(v116 + 312);
        *(_QWORD *)(v118 + 104) = *(_QWORD *)(v116 + 320);
        *(_QWORD *)(v118 + 112) = *(_QWORD *)(v116 + 328);
        *(_QWORD *)(v118 + 120) = *(_QWORD *)(v116 + 336);
        *(_QWORD *)(v118 + 128) = *(_QWORD *)(v116 + 344);
        *(_QWORD *)(v118 + 136) = *(_QWORD *)(v116 + 352);
        *(_OWORD *)(v118 + 144) = *(_OWORD *)(v116 + 360);
        *(_OWORD *)(v118 + 160) = *(_OWORD *)(v116 + 376);
        v124 = *(_QWORD *)(v116 + 392);
        *(_BYTE *)(v118 + 184) = *(_BYTE *)(v116 + 400);
        *(_QWORD *)(v118 + 176) = v124;
        v125 = *(_OWORD *)(v116 + 408);
        *(_QWORD *)(v116 + 416) = 0;
        *(_QWORD *)(v116 + 408) = 0;
        v126 = *(std::__shared_weak_count **)(v118 + 200);
        *(_OWORD *)(v118 + 192) = v125;
        if (v126)
        {
          v127 = (unint64_t *)&v126->__shared_owners_;
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
          if (!v128)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
            v121 = 0uLL;
            v119 = (int64x2_t)xmmword_210378050;
          }
        }
        *(_BYTE *)(v118 + 208) = *(_BYTE *)(v116 + 424);
        v118 += 216;
        v120 = v122 + 27;
        v116 = (uint64_t)v122;
      }
      while (v122 + 27 != v117);
    }
LABEL_149:
    v129 = *(_QWORD *)(a1 + 1000);
    if (v129 != v118)
    {
      v130 = sub_20F5B6E44(v129, *(_QWORD *)(a1 + 1000), v118);
      for (i1 = *(_QWORD *)(a1 + 1000); i1 != v130; i1 -= 216)
      {
        v132 = *(std::__shared_weak_count **)(i1 - 16);
        if (v132)
        {
          v133 = (unint64_t *)&v132->__shared_owners_;
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 - 1, v133));
          if (!v134)
          {
            ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
            std::__shared_weak_count::__release_weak(v132);
          }
        }
      }
      *(_QWORD *)(a1 + 1000) = v130;
    }
    v135 = *(_QWORD **)(a1 + 1016);
    v136 = *(_QWORD **)(a1 + 1024);
    if (v135 == v136)
    {
      v137 = *(_QWORD **)(a1 + 1016);
    }
    else
    {
      v137 = *(_QWORD **)(a1 + 1024);
      v138 = v135 + 111;
      while (!*((_BYTE *)v138 - 8))
      {
        v68 = v138 == v136;
        v138 += 111;
        if (v68)
          goto LABEL_179;
      }
      --*(_DWORD *)(*(v138 - 19) + 8);
      --*(_DWORD *)(*(v138 - 18) + 8);
      *(v138 - 19) = 0;
      *(v138 - 18) = 0;
      *v18 = vaddq_s64(*v18, (int64x2_t)xmmword_2103B2310);
      v139 = v138 - 111;
      if (v138 - 111 != v136)
      {
        if (v138 == v136)
        {
          v137 = v138 - 111;
        }
        else
        {
          v137 = v138 - 111;
          do
          {
            while (1)
            {
              v140 = v138;
              if (!*((_BYTE *)v139 + 1768))
                break;
              --*(_DWORD *)(v139[203] + 8);
              --*(_DWORD *)(v139[204] + 8);
              v139[203] = 0;
              v139[204] = 0;
              *v18 = vaddq_s64(*v18, (int64x2_t)xmmword_2103B2310);
              v138 += 111;
              v139 = v140;
              if (v140 + 111 == v136)
                goto LABEL_179;
            }
            *v137 = *v138;
            *(_OWORD *)(v137 + 1) = *((_OWORD *)v139 + 56);
            memcpy(v137 + 3, v139 + 114, 0x120uLL);
            memcpy(v137 + 39, v139 + 150, 0x120uLL);
            v141 = *((_OWORD *)v139 + 99);
            v142 = *((_OWORD *)v139 + 100);
            v143 = *((_OWORD *)v139 + 98);
            *(_OWORD *)(v137 + 83) = *((_OWORD *)v139 + 97);
            *(_OWORD *)(v137 + 85) = v143;
            v144 = *((_OWORD *)v139 + 93);
            v145 = *((_OWORD *)v139 + 94);
            v146 = *((_OWORD *)v139 + 96);
            *(_OWORD *)(v137 + 79) = *((_OWORD *)v139 + 95);
            *(_OWORD *)(v137 + 81) = v146;
            *(_OWORD *)(v137 + 75) = v144;
            *(_OWORD *)(v137 + 77) = v145;
            *(_OWORD *)(v137 + 87) = v141;
            *(_OWORD *)(v137 + 89) = v142;
            *((_BYTE *)v137 + 728) = *((_BYTE *)v139 + 1616);
            v137[92] = v139[203];
            v137[93] = v139[204];
            v148 = *(_OWORD *)(v139 + 207);
            v147 = *(_OWORD *)(v139 + 209);
            *((_OWORD *)v137 + 47) = *(_OWORD *)(v139 + 205);
            *((_OWORD *)v137 + 48) = v148;
            *((_OWORD *)v137 + 49) = v147;
            v149 = *(_OWORD *)(v139 + 211);
            v150 = *(_OWORD *)(v139 + 215);
            *((_OWORD *)v137 + 51) = *(_OWORD *)(v139 + 213);
            *((_OWORD *)v137 + 52) = v150;
            *((_OWORD *)v137 + 50) = v149;
            v151 = v139[217];
            *((_BYTE *)v137 + 856) = *((_BYTE *)v139 + 1744);
            v137[106] = v151;
            v152 = *(_OWORD *)(v139 + 219);
            v139[219] = 0;
            v139[220] = 0;
            v153 = (std::__shared_weak_count *)v137[109];
            *((_OWORD *)v137 + 54) = v152;
            if (v153)
            {
              v154 = (unint64_t *)&v153->__shared_owners_;
              do
                v155 = __ldaxr(v154);
              while (__stlxr(v155 - 1, v154));
              if (!v155)
              {
                ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                std::__shared_weak_count::__release_weak(v153);
              }
            }
            *((_BYTE *)v137 + 880) = *((_BYTE *)v139 + 1768);
            v137 += 111;
            v138 = v140 + 111;
            v139 = v140;
          }
          while (v140 + 111 != v136);
        }
      }
    }
LABEL_179:
    v156 = *(_QWORD **)(a1 + 1024);
    if (v137 != v156)
    {
      while (v156 != v137)
      {
        v157 = (std::__shared_weak_count *)*(v156 - 2);
        if (v157)
        {
          v158 = (unint64_t *)&v157->__shared_owners_;
          do
            v159 = __ldaxr(v158);
          while (__stlxr(v159 - 1, v158));
          if (!v159)
          {
            ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
            std::__shared_weak_count::__release_weak(v157);
          }
        }
        v156 -= 111;
      }
      *(_QWORD *)(a1 + 1024) = v137;
    }
    goto LABEL_189;
  }
  kdebug_trace();
  return 1;
}

void sub_20F58F97C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EDB3070(v1 - 177);
  _Unwind_Resume(a1);
}

uint64_t sub_20F58FAAC(uint64_t a1, unsigned int a2)
{
  uint64_t v5;
  char **v6;
  char **v7;
  char *v8;
  char *v9;
  char **v10;
  uint64_t v11;
  uint64_t i;
  unsigned int v13;
  char **v14;
  char *v15;
  char *v16;
  char **v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unsigned int v22;
  int64_t v23;
  uint64_t j;
  unsigned int v25;
  char **v26;
  char *v27;
  char *v28;
  char **v29;
  char **v30;
  char *v31;
  char *v32;
  char **v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  int v46;
  _BOOL4 v47;
  size_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  size_t v54;
  char **v55;
  uint64_t k;
  uint64_t v57;
  char *v58;
  char *v59;
  char **v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  unsigned int v65;
  int64_t v66;
  uint64_t v67;
  char **v68;
  char *v69;
  char *v70;
  char **v71;
  char **v72;
  char *v73;
  char *v74;
  char **v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  int v87;
  _BOOL4 v88;
  size_t v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  size_t v95;
  unint64_t v96;
  _QWORD *v97;
  size_t v98;
  _QWORD *v99;
  int64x2_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _DWORD *v104;
  _DWORD *v105;
  unsigned __int8 *v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  void **v112;
  char **v113;
  char *v114;
  char *v115;
  unint64_t v116;
  char **v117;
  char *v118;
  unint64_t v119;
  BOOL v120;
  unint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  int64_t v129;
  unsigned int v130;
  char *v131;
  char *v132;
  void *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _DWORD **v137;
  uint64_t v138;
  _DWORD *v139;
  _DWORD *v140;
  uint64_t v141;
  uint64_t v142;
  _DWORD *v143;
  _DWORD *v144;
  unint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  _DWORD **v152;
  uint64_t v153;
  _DWORD *v154;
  _DWORD *v155;
  uint64_t v156;
  uint64_t v157;
  _DWORD *v158;
  _DWORD *v159;
  unint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  _DWORD **v167;
  uint64_t v168;
  _DWORD *v169;
  _DWORD *v170;
  uint64_t v171;
  uint64_t v172;
  _DWORD *v173;
  _DWORD *v174;
  unint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  _DWORD **v182;
  uint64_t v183;
  _DWORD *v184;
  _DWORD *v185;
  uint64_t v186;
  uint64_t v187;
  _DWORD *v188;
  _DWORD *v189;
  unint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  _DWORD **v197;
  uint64_t v198;
  _DWORD *v199;
  _DWORD *v200;
  uint64_t v201;
  uint64_t v202;
  _DWORD *v203;
  _DWORD *v204;
  unint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  _DWORD **v212;
  uint64_t v213;
  _DWORD *v214;
  _DWORD *v215;
  uint64_t v216;
  uint64_t v217;
  _DWORD *v218;
  _DWORD *v219;
  unint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  _DWORD **v227;
  uint64_t v228;
  _DWORD *v229;
  _DWORD *v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  __n128 v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  __n128 v239;
  void **v240;
  uint64_t v241;
  unsigned int v242;
  unsigned int v243;
  unint64_t v244;
  unsigned int v245;
  unsigned int v246;
  size_t v247;
  unsigned int v248;
  uint64_t v249;
  void *v250;
  size_t v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  int v259;
  int v260;
  int v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  int v274;
  unint64_t v275;
  int v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t *v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  int v313;
  unint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  unsigned int v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t *v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t *v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t *v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t *v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t *v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t *v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  unint64_t v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t *v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t *v422;
  uint64_t v423;
  uint64_t v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t *v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  unint64_t v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t *v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  unint64_t v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t *v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  unint64_t v463;
  unint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t *v471;
  uint64_t v472;
  uint64_t v473;
  unint64_t v474;
  unint64_t v475;
  unint64_t v476;
  unint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t *v484;
  uint64_t v485;
  uint64_t v486;
  unint64_t v487;
  unint64_t v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t *v496;
  uint64_t v497;
  uint64_t v498;
  unint64_t v499;
  unint64_t v500;
  unint64_t v501;
  unint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t *v509;
  uint64_t v510;
  uint64_t v511;
  unint64_t v512;
  unint64_t v513;
  unint64_t v514;
  unint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t *v522;
  uint64_t v523;
  uint64_t v524;
  unint64_t v525;
  _DWORD *v526;
  unsigned int **v527;
  uint64_t v528;
  int v529;
  unsigned int *v530;
  _QWORD *v531;
  char *v532;
  uint64_t v533;
  char **v534;
  size_t v535;
  unint64_t v536;
  unsigned int **v537;
  _QWORD *v538;
  unsigned int *v539;
  unsigned int *v540;
  uint64_t v541;
  _BYTE *v542;
  char *v543;
  uint64_t v544;
  uint64_t v545;
  unint64_t v546;
  char **v547;
  uint64_t v548;
  char *v549;
  char *v550;
  char *v551;
  unint64_t v552;
  char **v553;
  uint64_t v554;
  uint64_t v555;
  char *v556;
  char *v557;
  __int128 *v558;
  uint64_t v559;
  __int128 v560;
  int v561;
  char *v562;
  char *v563;
  uint64_t *v564;
  uint64_t *v565;
  unsigned int v566;
  uint64_t v567;
  char *v568;
  uint64_t v569;
  char *v570;
  uint64_t v571;
  uint64_t v572;
  unint64_t v573;
  uint64_t v574;
  unint64_t v575;
  _BYTE *v576;
  unsigned int *v577;
  int64_t v578;
  unint64_t v579;
  unint64_t v580;
  uint64_t v581;
  uint64_t v582;
  char *v583;
  _OWORD *v584;
  char *v585;
  uint64_t v586;
  __int128 v587;
  unsigned int v588;
  char *v589;
  char *v590;
  uint64_t v591;
  char *v592;
  uint64_t v593;
  uint64_t v594;
  char *v595;
  uint64_t v596;
  char *v597;
  uint64_t v598;
  unint64_t v599;
  uint64_t v600;
  unint64_t v601;
  char *v602;
  char *v603;
  char *v604;
  uint64_t v605;
  unint64_t v606;
  unint64_t v607;
  uint64_t v608;
  char *v609;
  char *v610;
  uint64_t v611;
  __int128 v612;
  _DWORD *v613;
  uint64_t v614;
  _DWORD *v615;
  int v616;
  int v617;
  uint64_t v618;
  char *v619;
  char *v620;
  unint64_t v621;
  unint64_t v622;
  char *v623;
  char *v624;
  char *v625;
  char *v626;
  uint64_t v627;
  char *v628;
  char *v629;
  uint64_t v630;
  unint64_t v631;
  uint64_t v632;
  char *v633;
  char *v634;
  char *v635;
  uint64_t v636;
  __int128 v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  char *v641;
  uint64_t v642;
  char *v643;
  uint64_t v644;
  unint64_t v645;
  uint64_t v646;
  unint64_t v647;
  char *v648;
  char *v649;
  char *v650;
  uint64_t v651;
  unint64_t v652;
  unint64_t v653;
  uint64_t v654;
  char *v655;
  char *v656;
  uint64_t v657;
  __int128 v658;
  uint64_t v659;
  int v660;
  _DWORD *v661;
  int v662;
  uint64_t v663;
  unsigned int *v664;
  unsigned int *v665;
  unint64_t v666;
  unint64_t v667;
  char *v668;
  char *v669;
  char *v670;
  char *v671;
  uint64_t v672;
  char *v673;
  char *v674;
  uint64_t v675;
  unint64_t v676;
  uint64_t v677;
  char *v678;
  char *v679;
  char *v680;
  uint64_t v681;
  __int128 v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  char *v686;
  uint64_t v687;
  char *v688;
  uint64_t v689;
  unint64_t v690;
  uint64_t v691;
  unint64_t v692;
  char *v693;
  char *v694;
  char *v695;
  uint64_t v696;
  unint64_t v697;
  unint64_t v698;
  uint64_t v699;
  char *v700;
  char *v701;
  uint64_t v702;
  __int128 v703;
  uint64_t v704;
  int v705;
  _DWORD *v706;
  int v707;
  uint64_t v708;
  char *v709;
  char *v710;
  unint64_t v711;
  unint64_t v712;
  char *v713;
  char *v714;
  char *v715;
  char *v716;
  uint64_t v717;
  char *v718;
  char *v719;
  uint64_t v720;
  unint64_t v721;
  uint64_t v722;
  char *v723;
  char *v724;
  char *v725;
  uint64_t v726;
  __int128 v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  char *v731;
  uint64_t v732;
  char *v733;
  uint64_t v734;
  unint64_t v735;
  uint64_t v736;
  unint64_t v737;
  char *v738;
  char *v739;
  char *v740;
  uint64_t v741;
  unint64_t v742;
  unint64_t v743;
  uint64_t v744;
  char *v745;
  char *v746;
  uint64_t v747;
  __int128 v748;
  uint64_t v749;
  int v750;
  _DWORD *v751;
  int v752;
  uint64_t v753;
  char *v754;
  char *v755;
  unint64_t v756;
  unint64_t v757;
  char *v758;
  char *v759;
  char *v760;
  char *v761;
  uint64_t v762;
  char *v763;
  char *v764;
  uint64_t v765;
  unint64_t v766;
  uint64_t v767;
  char *v768;
  char *v769;
  char *v770;
  uint64_t v771;
  __int128 v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  char *v776;
  uint64_t v777;
  char *v778;
  uint64_t v779;
  unint64_t v780;
  uint64_t v781;
  unint64_t v782;
  char *v783;
  char *v784;
  char *v785;
  uint64_t v786;
  unint64_t v787;
  unint64_t v788;
  uint64_t v789;
  char *v790;
  char *v791;
  uint64_t v792;
  __int128 v793;
  uint64_t v794;
  int v795;
  _DWORD *v796;
  int v797;
  uint64_t v798;
  char *v799;
  char *v800;
  unint64_t v801;
  unint64_t v802;
  char *v803;
  char *v804;
  char *v805;
  char *v806;
  uint64_t v807;
  char *v808;
  char *v809;
  uint64_t v810;
  unint64_t v811;
  uint64_t v812;
  char *v813;
  char *v814;
  char *v815;
  uint64_t v816;
  __int128 v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  char *v821;
  uint64_t v822;
  char *v823;
  uint64_t v824;
  unint64_t v825;
  uint64_t v826;
  unint64_t v827;
  char *v828;
  char *v829;
  char *v830;
  uint64_t v831;
  unint64_t v832;
  unint64_t v833;
  uint64_t v834;
  char *v835;
  char *v836;
  uint64_t v837;
  __int128 v838;
  uint64_t v839;
  int v840;
  _DWORD *v841;
  int v842;
  uint64_t v843;
  char *v844;
  char *v845;
  unint64_t v846;
  unint64_t v847;
  char *v848;
  char *v849;
  char *v850;
  char *v851;
  uint64_t v852;
  char *v853;
  char *v854;
  uint64_t v855;
  unint64_t v856;
  uint64_t v857;
  char *v858;
  char *v859;
  char *v860;
  uint64_t v861;
  __int128 v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  char *v866;
  uint64_t v867;
  char *v868;
  uint64_t v869;
  unint64_t v870;
  uint64_t v871;
  unint64_t v872;
  char *v873;
  char *v874;
  char *v875;
  uint64_t v876;
  unint64_t v877;
  unint64_t v878;
  uint64_t v879;
  char *v880;
  char *v881;
  uint64_t v882;
  __int128 v883;
  uint64_t v884;
  int v885;
  _DWORD *v886;
  int v887;
  uint64_t v888;
  int v889;
  int v890;
  int v891;
  int v892;
  int v893;
  int v894;
  unint64_t v895;
  int v896;
  int v897;
  int v898;
  int v899;
  void *v900;
  void *v901;
  void **v902;
  size_t v903;
  int v904;
  int v905;
  int v906;
  int v907;
  int v908;
  int v909;
  int v910;
  int v911;
  int v912;
  int v913;
  int v914;
  int v915;
  int v916;
  int v917;
  uint64_t v918;
  _QWORD *v919;
  char **v920;
  int v921[2];
  int v922[2];
  int v923[2];
  int v924[2];
  int v925;
  int v926[2];
  char **v927;
  char **v928;
  uint64_t v929;
  int v930;
  int v931[2];
  int v932[2];
  unsigned int v933;
  uint64_t v934;
  int v935;
  uint64_t v936;
  char **v937;
  unsigned __int8 *v938;
  int v939;
  unint64_t v940;
  unsigned int **v941;
  uint64_t v942;
  _DWORD *v943;
  char *v944;
  int v945;
  void *v946[2];
  void *v947[2];
  __int128 v948;
  void *v949[2];
  void *v950[2];
  __int128 v951;
  void *v952[2];
  void *v953[2];
  __int128 v954;
  void *__p[2];
  uint64_t v956;
  void *__dst;
  __int128 v958;
  __int128 v959;
  __int128 v960;
  __int128 v961;
  __int128 v962;
  __int128 v963;
  __int128 v964;
  __int128 v965;
  __int128 v966;
  __int128 v967;
  char *v968;

  if (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) + 976))
    return 1;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v6 = (char **)sub_20F5946A0(v5);
  sub_20F596D48((char **)(a1 + 7768), v6);
  v7 = v6 + 24;
  v8 = *(char **)(a1 + 7768);
  v9 = *(char **)(a1 + 7776);
  if (v8 == v9
    && *(_QWORD *)(a1 + 7792) == *(_QWORD *)(a1 + 7800)
    && *(_QWORD *)(a1 + 7816) == *(_QWORD *)(a1 + 7824)
    && *(_QWORD *)(a1 + 7840) == *(_QWORD *)(a1 + 7848)
    && *(_QWORD *)(a1 + 7864) == *(_QWORD *)(a1 + 7872)
    && *(_QWORD *)(a1 + 7888) == *(_QWORD *)(a1 + 7896)
    && *(_QWORD *)(a1 + 7912) == *(_QWORD *)(a1 + 7920))
  {
    v10 = (char **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 7528);
    v11 = a1 + 7936;
    if ((char **)(a1 + 7936) != v10)
      sub_20F59AA18((char **)(a1 + 7936), v10);
    for (i = 0; i != 7; ++i)
    {
      v13 = dword_2103B6750[i];
      if ((v13 & 0x80000000) == 0)
      {
        v14 = (char **)(v11 + 24 * i);
        v15 = *v14;
        v18 = v14[1];
        v17 = v14 + 1;
        v16 = v18;
        if (v15 != v18)
        {
          v19 = v7[3 * v13 + 1];
          v20 = v7[3 * v13];
          v21 = v15;
          while (v20 != v19)
          {
            v22 = *(_DWORD *)v21;
            if (*(_DWORD *)v21 >= *(_DWORD *)v20)
            {
              v21 += 4 * (*(_DWORD *)v20 >= v22);
              v20 += 4;
              if (v21 == v16)
                goto LABEL_21;
            }
            else
            {
              *(_DWORD *)v15 = v22;
              v15 += 4;
              v21 += 4;
              if (v21 == v16)
              {
LABEL_21:
                if (v15 == v16)
                  goto LABEL_13;
LABEL_25:
                *v17 = v15;
                goto LABEL_13;
              }
            }
          }
          if (v21 != v15)
          {
            v23 = v16 - v21;
            memmove(v15, v21, v16 - v21);
            v15 += v23;
            if (v15 != *v17)
              goto LABEL_25;
          }
        }
      }
LABEL_13:
      ;
    }
    v110 = 0;
    v956 = 0;
    v943 = (_DWORD *)(a1 + 32);
    v111 = a1 + 7560;
    v954 = 0u;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v952 = 0u;
    *(_OWORD *)v953 = 0u;
    *(_OWORD *)v950 = 0u;
    v951 = 0u;
    v948 = 0u;
    *(_OWORD *)v949 = 0u;
    *(_OWORD *)v946 = 0u;
    *(_OWORD *)v947 = 0u;
    while (1)
    {
      v112 = &v946[3 * v110];
      v113 = (char **)(v111 + 24 * v110);
      v114 = v113[1];
      v115 = *v113;
      v116 = (v114 - *v113) >> 2;
      v117 = (char **)(v112 + 1);
      v118 = (char *)*v112;
      v119 = ((_BYTE *)v112[1] - (_BYTE *)*v112) >> 2;
      v120 = v116 >= v119;
      v121 = v116 - v119;
      if (v121 != 0 && v120)
      {
        sub_20E93DC84((uint64_t)&v946[3 * v110], v121);
        v115 = *v113;
        v114 = v113[1];
        v118 = (char *)*v112;
        v122 = (uint64_t *)(v11 + 24 * v110);
        v124 = *v122;
        v123 = v122[1];
        *(_QWORD *)&v958 = v124;
        __dst = v118;
        if (v115 != v114)
          goto LABEL_132;
      }
      else if (v120)
      {
        v127 = (uint64_t *)(v11 + 24 * v110);
        v128 = *v127;
        v123 = v127[1];
        *(_QWORD *)&v958 = v128;
        __dst = v118;
        if (v115 != v114)
        {
LABEL_132:
          while ((_QWORD)v958 != v123)
          {
            v130 = *(_DWORD *)v115;
            if (*(_DWORD *)v115 >= *(_DWORD *)v958)
            {
              v115 += 4 * (*(_DWORD *)v958 >= v130);
              *(_QWORD *)&v958 = v958 + 4;
              if (v115 == v114)
                goto LABEL_135;
            }
            else
            {
              v131 = (char *)__dst;
              *(_DWORD *)__dst = v130;
              v115 += 4;
              __dst = v131 + 4;
              if (v115 == v114)
              {
LABEL_135:
                v129 = 0;
                v118 = (char *)__dst;
                goto LABEL_138;
              }
            }
          }
          v118 = (char *)__dst;
          v129 = v114 - v115;
          if (v115 != v114)
            memmove(__dst, v115, v114 - v115);
          goto LABEL_138;
        }
      }
      else
      {
        *v117 = &v118[4 * v116];
        v125 = (uint64_t *)(v11 + 24 * v110);
        v126 = *v125;
        v123 = v125[1];
        *(_QWORD *)&v958 = v126;
        __dst = v118;
        if (v115 != v114)
          goto LABEL_132;
      }
      v129 = 0;
LABEL_138:
      v132 = &v118[v129];
      if (v132 != *v117)
        *v117 = v132;
      if (++v110 == 7)
      {
        v968 = 0;
        v966 = 0u;
        v967 = 0u;
        v964 = 0u;
        v965 = 0u;
        v962 = 0u;
        v963 = 0u;
        v960 = 0u;
        v961 = 0u;
        v958 = 0u;
        v959 = 0u;
        sub_20F59867C(v943, (uint64_t)v946, (uint64_t)&v958);
        if ((_QWORD)v967)
        {
          *((_QWORD *)&v967 + 1) = v967;
          operator delete((void *)v967);
        }
        if (*((_QWORD *)&v965 + 1))
        {
          *(_QWORD *)&v966 = *((_QWORD *)&v965 + 1);
          operator delete(*((void **)&v965 + 1));
        }
        if ((_QWORD)v964)
        {
          *((_QWORD *)&v964 + 1) = v964;
          operator delete((void *)v964);
        }
        if (*((_QWORD *)&v962 + 1))
        {
          *(_QWORD *)&v963 = *((_QWORD *)&v962 + 1);
          operator delete(*((void **)&v962 + 1));
        }
        if ((_QWORD)v961)
        {
          *((_QWORD *)&v961 + 1) = v961;
          operator delete((void *)v961);
        }
        if (*((_QWORD *)&v959 + 1))
        {
          *(_QWORD *)&v960 = *((_QWORD *)&v959 + 1);
          operator delete(*((void **)&v959 + 1));
        }
        if ((_QWORD)v958)
        {
          *((_QWORD *)&v958 + 1) = v958;
          operator delete((void *)v958);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v953[1])
        {
          *(void **)&v954 = v953[1];
          operator delete(v953[1]);
        }
        if (v952[0])
        {
          v952[1] = v952[0];
          operator delete(v952[0]);
        }
        if (v950[1])
        {
          *(void **)&v951 = v950[1];
          operator delete(v950[1]);
        }
        if (v949[0])
        {
          v949[1] = v949[0];
          operator delete(v949[0]);
        }
        if (v947[1])
        {
          *(void **)&v948 = v947[1];
          operator delete(v947[1]);
        }
        v133 = v946[0];
        if (v946[0])
        {
          v946[1] = v946[0];
          goto LABEL_168;
        }
        return 0;
      }
    }
  }
  v933 = a2;
  v920 = v6;
  v938 = (unsigned __int8 *)(a1 + 7728);
  v942 = a1 + 7768;
  v937 = (char **)(a1 + 8104);
  sub_20E867E00((_QWORD *)(a1 + 8104), v8, v9, (v9 - v8) >> 2);
  sub_20E867E00((_QWORD *)(a1 + 8128), *(char **)(a1 + 7792), *(char **)(a1 + 7800), (uint64_t)(*(_QWORD *)(a1 + 7800) - *(_QWORD *)(a1 + 7792)) >> 2);
  sub_20E867E00((_QWORD *)(a1 + 8152), *(char **)(a1 + 7816), *(char **)(a1 + 7824), (uint64_t)(*(_QWORD *)(a1 + 7824) - *(_QWORD *)(a1 + 7816)) >> 2);
  sub_20E867E00((_QWORD *)(a1 + 8176), *(char **)(a1 + 7840), *(char **)(a1 + 7848), (uint64_t)(*(_QWORD *)(a1 + 7848) - *(_QWORD *)(a1 + 7840)) >> 2);
  sub_20E867E00((_QWORD *)(a1 + 8200), *(char **)(a1 + 7864), *(char **)(a1 + 7872), (uint64_t)(*(_QWORD *)(a1 + 7872) - *(_QWORD *)(a1 + 7864)) >> 2);
  sub_20E867E00((_QWORD *)(a1 + 8224), *(char **)(a1 + 7888), *(char **)(a1 + 7896), (uint64_t)(*(_QWORD *)(a1 + 7896) - *(_QWORD *)(a1 + 7888)) >> 2);
  sub_20E867E00((_QWORD *)(a1 + 8248), *(char **)(a1 + 7912), *(char **)(a1 + 7920), (uint64_t)(*(_QWORD *)(a1 + 7920) - *(_QWORD *)(a1 + 7912)) >> 2);
  for (j = 0; j != 7; ++j)
  {
    v25 = dword_2103B6750[j];
    if ((v25 & 0x80000000) != 0)
      continue;
    v26 = &v937[3 * j];
    v27 = *v26;
    v29 = v26 + 1;
    v28 = v26[1];
    v30 = &v7[3 * v25];
    v31 = *v30;
    v34 = v30[1];
    v33 = v30 + 1;
    v32 = v34;
    if (*v26 == v28)
    {
      v35 = v26[1];
      v37 = v31;
    }
    else
    {
      v35 = *v26;
      v36 = *v26;
      v37 = v31;
      while (v37 != v32)
      {
        if (*(_DWORD *)v37 < *(_DWORD *)v36)
          goto LABEL_38;
        v37 += 4 * (*(_DWORD *)v36 >= *(_DWORD *)v37);
        v36 += 4;
        v35 += 4;
        if (v36 == v28)
        {
          v35 = v26[1];
          goto LABEL_38;
        }
      }
      v35 = v26[1];
      v37 = v32;
    }
LABEL_38:
    v38 = (v35 - v27) >> 2;
    v39 = v28 - v27;
    v40 = v39 >> 2;
    v41 = ((v32 - v31) >> 2) + (v39 >> 1) - v38;
    if (v41 <= v40)
    {
      if (v41 < v40)
        *v29 = &v27[4 * v41];
    }
    else
    {
      sub_20E93DC84((uint64_t)&v937[3 * j], v41 - v40);
      v27 = *v26;
    }
    v42 = &v27[4 * v40];
    v43 = *v33;
    if (v38 != v40)
    {
      v45 = &v27[4 * v38];
      v44 = &v27[4 * v40];
      while (v37 != v43)
      {
        v46 = *(_DWORD *)v37;
        v47 = *(_DWORD *)v37 >= *(_DWORD *)v45;
        if (*(_DWORD *)v37 >= *(_DWORD *)v45)
          v46 = *(_DWORD *)v45;
        v37 += 4 * (*(_DWORD *)v45 >= *(_DWORD *)v37);
        v45 += 4 * v47;
        *(_DWORD *)v44 = v46;
        v44 += 4;
        if (v45 == v42)
          goto LABEL_49;
      }
      v48 = v42 - v45;
      v49 = v44;
      goto LABEL_52;
    }
    v44 = &v27[4 * v40];
LABEL_49:
    v48 = v43 - v37;
    if (v43 != v37)
    {
      v49 = v44;
      v45 = v37;
LABEL_52:
      memmove(v49, v45, v48);
    }
    v50 = &v44[v48];
    v51 = *v26;
    if (&v44[v48] == *v29)
    {
      if (v38 == v40)
        continue;
    }
    else
    {
      *v29 = v50;
      if (v38 == v40)
        continue;
    }
    v52 = &v51[4 * v38];
    v53 = &v51[4 * v40];
    v54 = v50 - v53;
    if (v54)
      memmove(&v51[4 * v38], v53, v54);
    *v29 = &v52[v54];
  }
  v55 = (char **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 7528);
  if ((char **)(a1 + 7936) != v55)
    sub_20F59AA18((char **)(a1 + 7936), v55);
  for (k = 0; k != 7; ++k)
  {
    v57 = a1 + 7936 + 24 * k;
    v58 = *(char **)v57;
    v61 = *(char **)(v57 + 8);
    v60 = (char **)(v57 + 8);
    v59 = v61;
    if (v58 != v61)
    {
      v62 = v937[3 * k + 1];
      v63 = v937[3 * k];
      v64 = v58;
      while (v63 != v62)
      {
        v65 = *(_DWORD *)v64;
        if (*(_DWORD *)v64 >= *(_DWORD *)v63)
        {
          v64 += 4 * (*(_DWORD *)v63 >= v65);
          v63 += 4;
          if (v64 == v59)
            goto LABEL_69;
        }
        else
        {
          *(_DWORD *)v58 = v65;
          v58 += 4;
          v64 += 4;
          if (v64 == v59)
          {
LABEL_69:
            if (v58 == v59)
              goto LABEL_62;
            goto LABEL_73;
          }
        }
      }
      if (v64 != v58)
      {
        v66 = v59 - v64;
        memmove(v58, v64, v59 - v64);
        v58 += v66;
        if (v58 != *v60)
        {
LABEL_73:
          *v60 = v58;
          continue;
        }
      }
    }
LABEL_62:
    ;
  }
  sub_20E867E00(v937, *(char **)(a1 + 7936), *(char **)(a1 + 7944), (uint64_t)(*(_QWORD *)(a1 + 7944) - *(_QWORD *)(a1 + 7936)) >> 2);
  sub_20E867E00((_QWORD *)(a1 + 8128), *(char **)(a1 + 7960), *(char **)(a1 + 7968), (uint64_t)(*(_QWORD *)(a1 + 7968) - *(_QWORD *)(a1 + 7960)) >> 2);
  sub_20E867E00((_QWORD *)(a1 + 8152), *(char **)(a1 + 7984), *(char **)(a1 + 7992), (uint64_t)(*(_QWORD *)(a1 + 7992) - *(_QWORD *)(a1 + 7984)) >> 2);
  sub_20E867E00((_QWORD *)(a1 + 8176), *(char **)(a1 + 8008), *(char **)(a1 + 8016), (uint64_t)(*(_QWORD *)(a1 + 8016) - *(_QWORD *)(a1 + 8008)) >> 2);
  sub_20E867E00((_QWORD *)(a1 + 8200), *(char **)(a1 + 8032), *(char **)(a1 + 8040), (uint64_t)(*(_QWORD *)(a1 + 8040) - *(_QWORD *)(a1 + 8032)) >> 2);
  sub_20E867E00((_QWORD *)(a1 + 8224), *(char **)(a1 + 8056), *(char **)(a1 + 8064), (uint64_t)(*(_QWORD *)(a1 + 8064) - *(_QWORD *)(a1 + 8056)) >> 2);
  sub_20E867E00((_QWORD *)(a1 + 8248), *(char **)(a1 + 8080), *(char **)(a1 + 8088), (uint64_t)(*(_QWORD *)(a1 + 8088) - *(_QWORD *)(a1 + 8080)) >> 2);
  v67 = 0;
  while (2)
  {
    v68 = &v937[3 * v67];
    v69 = *v68;
    v71 = v68 + 1;
    v70 = v68[1];
    v72 = (char **)(v942 + 24 * v67);
    v73 = *v72;
    v76 = v72[1];
    v75 = v72 + 1;
    v74 = v76;
    if (*v68 == v70)
    {
      v77 = v68[1];
      v79 = v73;
    }
    else
    {
      v77 = *v68;
      v78 = *v68;
      v79 = v73;
      while (v79 != v74)
      {
        if (*(_DWORD *)v79 < *(_DWORD *)v78)
          goto LABEL_85;
        v79 += 4 * (*(_DWORD *)v78 >= *(_DWORD *)v79);
        v78 += 4;
        v77 += 4;
        if (v78 == v70)
        {
          v77 = v68[1];
          goto LABEL_85;
        }
      }
      v77 = v68[1];
      v79 = v74;
    }
LABEL_85:
    v80 = (v77 - v69) >> 2;
    v81 = v70 - v69;
    v82 = v81 >> 2;
    v83 = ((v74 - v73) >> 2) + (v81 >> 1) - v80;
    if (v83 <= v81 >> 2)
    {
      if (v83 < v81 >> 2)
        *v71 = &v69[4 * v83];
    }
    else
    {
      sub_20E93DC84((uint64_t)&v937[3 * v67], v83 - (v81 >> 2));
      v69 = *v68;
      v74 = *v75;
    }
    v84 = &v69[4 * v82];
    if (v80 == v82)
    {
      v85 = &v69[4 * v82];
LABEL_96:
      v89 = v74 - v79;
      if (v79 != v74)
      {
        v90 = v85;
        v86 = v79;
        goto LABEL_99;
      }
    }
    else
    {
      v86 = &v69[4 * v80];
      v85 = &v69[4 * v82];
      while (v79 != v74)
      {
        v87 = *(_DWORD *)v79;
        v88 = *(_DWORD *)v79 >= *(_DWORD *)v86;
        if (*(_DWORD *)v79 >= *(_DWORD *)v86)
          v87 = *(_DWORD *)v86;
        v79 += 4 * (*(_DWORD *)v86 >= *(_DWORD *)v79);
        v86 += 4 * v88;
        *(_DWORD *)v85 = v87;
        v85 += 4;
        if (v86 == v84)
          goto LABEL_96;
      }
      v89 = v84 - v86;
      v90 = v85;
LABEL_99:
      memmove(v90, v86, v89);
    }
    v91 = &v85[v89];
    v92 = *v68;
    if (&v85[v89] != *v71)
      *v71 = v91;
    if (v80 != v82)
    {
      v93 = &v92[4 * v80];
      v94 = &v92[4 * v82];
      v95 = v91 - v94;
      if (v95)
        memmove(&v92[4 * v80], v94, v95);
      *v71 = &v93[v95];
    }
    if (++v67 != 7)
      continue;
    break;
  }
  v96 = 9 * ((*(_QWORD *)(a1 + 7968) - *(_QWORD *)(a1 + 7960)) >> 2)
      + ((*(_QWORD *)(a1 + 7992) - *(_QWORD *)(a1 + 7984)) >> 2)
      + ((*(_DWORD *)(a1 + 8040) - *(_DWORD *)(a1 + 8032)) & 0xFFFFFFFC)
      + 6
      * (((*(_QWORD *)(a1 + 8016) - *(_QWORD *)(a1 + 8008)) >> 2)
       + ((*(_QWORD *)(a1 + 7944) - *(_QWORD *)(a1 + 7936)) >> 2))
      + ((*(_DWORD *)(a1 + 8064) - *(_DWORD *)(a1 + 8056)) & 0xFFFFFFFC)
      + 3 * ((*(_QWORD *)(a1 + 8088) - *(_QWORD *)(a1 + 8080)) >> 2);
  v97 = (_QWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v96;
  if (*(_QWORD *)(a1 + 16) < v96)
  {
    if (*v97)
      MEMORY[0x212BC6368](*v97, 0x1000C8000313F17);
    v98 = (8 * v96 + 31) & 0xFFFFFFFE0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = v98 >> 3;
    *(_QWORD *)(a1 + 8) = operator new(v98, (std::align_val_t)0x20uLL);
  }
  v99 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v100 = sub_20F596E30(v99, a1 + 7936, (_QWORD *)(a1 + 8));
  v101 = (_QWORD *)(*(uint64_t (**)(uint64_t, int64x2_t))(*(_QWORD *)a1 + 24))(a1, v100);
  v103 = v101[1];
  v102 = v101[2];
  if (v103 == v102)
  {
    v106 = (unsigned __int8 *)(a1 + 7728);
  }
  else
  {
    v104 = *(_DWORD **)(a1 + 8104);
    v105 = *(_DWORD **)(a1 + 8112);
    v106 = (unsigned __int8 *)(a1 + 7728);
    if (v104 != v105)
    {
      v107 = 0;
      do
      {
        v108 = *(_QWORD *)(v103 + 8);
        if (*v104 == *(_DWORD *)v103)
        {
          if (*(_BYTE *)(v108 + 20))
            v109 = v107;
          else
            v109 = -1;
          v107 += *(unsigned __int8 *)(v108 + 20);
          ++v104;
          *(_DWORD *)v108 = v109;
          v103 += 16;
          if (v103 == v102)
            break;
        }
        else
        {
          *(_DWORD *)v108 = -1;
          v103 += 16;
          if (v103 == v102)
            break;
        }
      }
      while (v104 != v105);
    }
  }
  if (v103 != v102)
  {
    v134 = v102 - v103 - 16;
    if (v134 < 0x10)
    {
      v135 = v103;
      goto LABEL_176;
    }
    v136 = (v134 >> 4) + 1;
    v135 = v103 + 16 * (v136 & 0x1FFFFFFFFFFFFFFELL);
    v137 = (_DWORD **)(v103 + 24);
    v138 = v136 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v139 = *(v137 - 2);
      v140 = *v137;
      v137 += 4;
      *v139 = -1;
      *v140 = -1;
      v138 -= 2;
    }
    while (v138);
    if (v136 != (v136 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_176:
        **(_DWORD **)(v135 + 8) = -1;
        v135 += 16;
      }
      while (v135 != v102);
    }
  }
  v142 = v101[13];
  v141 = v101[14];
  v143 = *(_DWORD **)(a1 + 8128);
  v144 = *(_DWORD **)(a1 + 8136);
  if (v142 != v141 && v143 != v144)
  {
    v148 = 0;
    do
    {
      v149 = *(_QWORD *)(v142 + 8);
      if (*v143 == *(_DWORD *)v142)
      {
        if (*(_BYTE *)(v149 + 20))
          v150 = v148;
        else
          v150 = -1;
        v148 += *(unsigned __int8 *)(v149 + 20);
        ++v143;
        *(_DWORD *)v149 = v150;
        v142 += 16;
        if (v142 == v141)
          break;
      }
      else
      {
        *(_DWORD *)v149 = -1;
        v142 += 16;
        if (v142 == v141)
          break;
      }
    }
    while (v143 != v144);
  }
  if (v142 != v141)
  {
    v146 = v141 - v142 - 16;
    if (v146 < 0x10)
    {
      v147 = v142;
      goto LABEL_196;
    }
    v151 = (v146 >> 4) + 1;
    v147 = v142 + 16 * (v151 & 0x1FFFFFFFFFFFFFFELL);
    v152 = (_DWORD **)(v142 + 24);
    v153 = v151 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v154 = *(v152 - 2);
      v155 = *v152;
      v152 += 4;
      *v154 = -1;
      *v155 = -1;
      v153 -= 2;
    }
    while (v153);
    if (v151 != (v151 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_196:
        **(_DWORD **)(v147 + 8) = -1;
        v147 += 16;
      }
      while (v147 != v141);
    }
  }
  v157 = v101[25];
  v156 = v101[26];
  v158 = *(_DWORD **)(a1 + 8152);
  v159 = *(_DWORD **)(a1 + 8160);
  if (v157 != v156 && v158 != v159)
  {
    v163 = 0;
    do
    {
      v164 = *(_QWORD *)(v157 + 8);
      if (*v158 == *(_DWORD *)v157)
      {
        if (*(_BYTE *)(v164 + 20))
          v165 = v163;
        else
          v165 = -1;
        v163 += *(unsigned __int8 *)(v164 + 20);
        ++v158;
        *(_DWORD *)v164 = v165;
        v157 += 16;
        if (v157 == v156)
          break;
      }
      else
      {
        *(_DWORD *)v164 = -1;
        v157 += 16;
        if (v157 == v156)
          break;
      }
    }
    while (v158 != v159);
  }
  if (v157 != v156)
  {
    v161 = v156 - v157 - 16;
    if (v161 < 0x10)
    {
      v162 = v157;
      goto LABEL_216;
    }
    v166 = (v161 >> 4) + 1;
    v162 = v157 + 16 * (v166 & 0x1FFFFFFFFFFFFFFELL);
    v167 = (_DWORD **)(v157 + 24);
    v168 = v166 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v169 = *(v167 - 2);
      v170 = *v167;
      v167 += 4;
      *v169 = -1;
      *v170 = -1;
      v168 -= 2;
    }
    while (v168);
    if (v166 != (v166 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_216:
        **(_DWORD **)(v162 + 8) = -1;
        v162 += 16;
      }
      while (v162 != v156);
    }
  }
  v172 = v101[37];
  v171 = v101[38];
  v173 = *(_DWORD **)(a1 + 8176);
  v174 = *(_DWORD **)(a1 + 8184);
  if (v172 != v171 && v173 != v174)
  {
    v178 = 0;
    do
    {
      v179 = *(_QWORD *)(v172 + 8);
      if (*v173 == *(_DWORD *)v172)
      {
        if (*(_BYTE *)(v179 + 20))
          v180 = v178;
        else
          v180 = -1;
        v178 += *(unsigned __int8 *)(v179 + 20);
        ++v173;
        *(_DWORD *)v179 = v180;
        v172 += 16;
        if (v172 == v171)
          break;
      }
      else
      {
        *(_DWORD *)v179 = -1;
        v172 += 16;
        if (v172 == v171)
          break;
      }
    }
    while (v173 != v174);
  }
  if (v172 != v171)
  {
    v176 = v171 - v172 - 16;
    if (v176 < 0x10)
    {
      v177 = v172;
      goto LABEL_236;
    }
    v181 = (v176 >> 4) + 1;
    v177 = v172 + 16 * (v181 & 0x1FFFFFFFFFFFFFFELL);
    v182 = (_DWORD **)(v172 + 24);
    v183 = v181 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v184 = *(v182 - 2);
      v185 = *v182;
      v182 += 4;
      *v184 = -1;
      *v185 = -1;
      v183 -= 2;
    }
    while (v183);
    if (v181 != (v181 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_236:
        **(_DWORD **)(v177 + 8) = -1;
        v177 += 16;
      }
      while (v177 != v171);
    }
  }
  v187 = v101[49];
  v186 = v101[50];
  v188 = *(_DWORD **)(a1 + 8200);
  v189 = *(_DWORD **)(a1 + 8208);
  if (v187 != v186 && v188 != v189)
  {
    v193 = 0;
    do
    {
      v194 = *(_QWORD *)(v187 + 8);
      if (*v188 == *(_DWORD *)v187)
      {
        if (*(_BYTE *)(v194 + 20))
          v195 = v193;
        else
          v195 = -1;
        v193 += *(unsigned __int8 *)(v194 + 20);
        ++v188;
        *(_DWORD *)v194 = v195;
        v187 += 16;
        if (v187 == v186)
          break;
      }
      else
      {
        *(_DWORD *)v194 = -1;
        v187 += 16;
        if (v187 == v186)
          break;
      }
    }
    while (v188 != v189);
  }
  if (v187 != v186)
  {
    v191 = v186 - v187 - 16;
    if (v191 < 0x10)
    {
      v192 = v187;
      goto LABEL_256;
    }
    v196 = (v191 >> 4) + 1;
    v192 = v187 + 16 * (v196 & 0x1FFFFFFFFFFFFFFELL);
    v197 = (_DWORD **)(v187 + 24);
    v198 = v196 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v199 = *(v197 - 2);
      v200 = *v197;
      v197 += 4;
      *v199 = -1;
      *v200 = -1;
      v198 -= 2;
    }
    while (v198);
    if (v196 != (v196 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_256:
        **(_DWORD **)(v192 + 8) = -1;
        v192 += 16;
      }
      while (v192 != v186);
    }
  }
  v202 = v101[61];
  v201 = v101[62];
  v203 = *(_DWORD **)(a1 + 8224);
  v204 = *(_DWORD **)(a1 + 8232);
  if (v202 != v201 && v203 != v204)
  {
    v208 = 0;
    do
    {
      v209 = *(_QWORD *)(v202 + 8);
      if (*v203 == *(_DWORD *)v202)
      {
        if (*(_BYTE *)(v209 + 20))
          v210 = v208;
        else
          v210 = -1;
        v208 += *(unsigned __int8 *)(v209 + 20);
        ++v203;
        *(_DWORD *)v209 = v210;
        v202 += 16;
        if (v202 == v201)
          break;
      }
      else
      {
        *(_DWORD *)v209 = -1;
        v202 += 16;
        if (v202 == v201)
          break;
      }
    }
    while (v203 != v204);
  }
  if (v202 != v201)
  {
    v206 = v201 - v202 - 16;
    if (v206 < 0x10)
    {
      v207 = v202;
      goto LABEL_276;
    }
    v211 = (v206 >> 4) + 1;
    v207 = v202 + 16 * (v211 & 0x1FFFFFFFFFFFFFFELL);
    v212 = (_DWORD **)(v202 + 24);
    v213 = v211 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v214 = *(v212 - 2);
      v215 = *v212;
      v212 += 4;
      *v214 = -1;
      *v215 = -1;
      v213 -= 2;
    }
    while (v213);
    if (v211 != (v211 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_276:
        **(_DWORD **)(v207 + 8) = -1;
        v207 += 16;
      }
      while (v207 != v201);
    }
  }
  v216 = v101[73];
  v217 = v101[74];
  v218 = *(_DWORD **)(a1 + 8248);
  v219 = *(_DWORD **)(a1 + 8256);
  if (v216 != v217 && v218 != v219)
  {
    v223 = 0;
    do
    {
      v224 = *(_QWORD *)(v216 + 8);
      if (*v218 == *(_DWORD *)v216)
      {
        if (*(_BYTE *)(v224 + 20))
          v225 = v223;
        else
          v225 = -1;
        v223 += *(unsigned __int8 *)(v224 + 20);
        ++v218;
        *(_DWORD *)v224 = v225;
        v216 += 16;
        if (v216 == v217)
          break;
      }
      else
      {
        *(_DWORD *)v224 = -1;
        v216 += 16;
        if (v216 == v217)
          break;
      }
    }
    while (v218 != v219);
  }
  if (v216 != v217)
  {
    v221 = v217 - v216 - 16;
    if (v221 < 0x10)
    {
      v222 = v216;
      goto LABEL_296;
    }
    v226 = (v221 >> 4) + 1;
    v222 = v216 + 16 * (v226 & 0x1FFFFFFFFFFFFFFELL);
    v227 = (_DWORD **)(v216 + 24);
    v228 = v226 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v229 = *(v227 - 2);
      v230 = *v227;
      v227 += 4;
      *v229 = -1;
      *v230 = -1;
      v228 -= 2;
    }
    while (v228);
    if (v226 != (v226 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_296:
        **(_DWORD **)(v222 + 8) = -1;
        v222 += 16;
      }
      while (v222 != v217);
    }
  }
  v231 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  sub_20F597134(v231, v937);
  v232 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  sub_20F59B0EC(v232 + 80);
  v233 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v235 = *(unsigned int *)(v233 + 16);
  if ((_DWORD)v235)
    bzero(*(void **)v233, 8 * v235);
  if (((*(_QWORD *)(a1 + 7592) - *(_QWORD *)(a1 + 7584)) >> 2)
     + ((*(_QWORD *)(a1 + 7568) - *(_QWORD *)(a1 + 7560)) >> 2)
     + ((*(_QWORD *)(a1 + 7616) - *(_QWORD *)(a1 + 7608)) >> 2)
     + ((*(_QWORD *)(a1 + 7640) - *(_QWORD *)(a1 + 7632)) >> 2)
     + ((*(_QWORD *)(a1 + 7664) - *(_QWORD *)(a1 + 7656)) >> 2)
     + ((*(_QWORD *)(a1 + 7688) - *(_QWORD *)(a1 + 7680)) >> 2)
     + ((*(_QWORD *)(a1 + 7712) - *(_QWORD *)(a1 + 7704)) >> 2))
  {
    v236 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v234 = sub_20F597B84(v236, a1 + 32, (char **)(a1 + 8272), a1 + 8440);
  }
  (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)a1 + 16))(a1, v933, v234);
  v237 = *v106;
  v238 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  sub_20F59FDA8(v942, v238 + 7528, (uint64_t)&unk_2103B676C, a1 + 8440);
  v929 = a1 + 8800;
  sub_20F5A00B8(v238 + 80, (void **)(a1 + 8800), a1 + 8440, (unsigned int **)(a1 + 8440));
  if (!v237)
    v239 = sub_20F5A0788(v238, a1 + 8776, (int **)(a1 + 8440));
  v934 = a1 + 8776;
  v240 = (void **)(a1 + 8824);
  v241 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 40))(a1, v239);
  sub_20F59FDA8(v942, v241 + 7528, (uint64_t)&unk_2103B676C, a1 + 8440);
  sub_20F59FDA8(a1 + 7936, v241 + 7528, (uint64_t)&unk_2103B676C, a1 + 8608);
  v242 = 9 * ((*(_QWORD *)(a1 + 8640) - *(_QWORD *)(a1 + 8632)) >> 3)
       + ((*(_QWORD *)(a1 + 8664) - *(_QWORD *)(a1 + 8656)) >> 3)
       + 6
       * (((*(_QWORD *)(a1 + 8688) - *(_QWORD *)(a1 + 8680)) >> 3)
        + ((*(_QWORD *)(a1 + 8616) - *(_QWORD *)(a1 + 8608)) >> 3))
       + (((*(_QWORD *)(a1 + 8712) - *(_QWORD *)(a1 + 8704)) >> 1) & 0xFFFFFFFC)
       + (((*(_QWORD *)(a1 + 8736) - *(_QWORD *)(a1 + 8728)) >> 1) & 0xFFFFFFFC)
       + 3 * ((*(_QWORD *)(a1 + 8760) - *(_QWORD *)(a1 + 8752)) >> 3);
  v243 = 9 * ((*(_QWORD *)(a1 + 8472) - *(_QWORD *)(a1 + 8464)) >> 3)
       + ((*(_QWORD *)(a1 + 8496) - *(_QWORD *)(a1 + 8488)) >> 3)
       + 6
       * (((*(_QWORD *)(a1 + 8520) - *(_QWORD *)(a1 + 8512)) >> 3)
        + ((*(_QWORD *)(a1 + 8448) - *(_QWORD *)(a1 + 8440)) >> 3))
       + (((*(_QWORD *)(a1 + 8544) - *(_QWORD *)(a1 + 8536)) >> 1) & 0xFFFFFFFC)
       + (((*(_QWORD *)(a1 + 8568) - *(_QWORD *)(a1 + 8560)) >> 1) & 0xFFFFFFFC)
       + 3 * ((*(_QWORD *)(a1 + 8592) - *(_QWORD *)(a1 + 8584)) >> 3);
  *(_DWORD *)(a1 + 8840) = v243;
  *(_DWORD *)(a1 + 8844) = v242;
  v244 = v242 * (unint64_t)v243;
  v245 = v242;
  v246 = v243;
  if (*(_QWORD *)(a1 + 8832) < v244)
  {
    if (*v240)
      MEMORY[0x212BC6368](*v240, 0x1000C8000313F17);
    *(_QWORD *)(a1 + 8824) = 0;
    v247 = (8 * v244 + 31) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(a1 + 8832) = v247 >> 3;
    *(_QWORD *)(a1 + 8824) = operator new(v247, (std::align_val_t)0x20uLL);
    v246 = *(_DWORD *)(a1 + 8840);
    v245 = *(_DWORD *)(a1 + 8844);
  }
  v248 = v246 * v245;
  if (v248)
    bzero(*v240, 8 * v248);
  v249 = v241 + 80;
  if (v242 == *(_DWORD *)(a1 + 8864) && v243 == *(_DWORD *)(a1 + 8868))
  {
    v250 = *(void **)(a1 + 8848);
  }
  else
  {
    *(_DWORD *)(a1 + 8864) = v242;
    *(_DWORD *)(a1 + 8868) = v243;
    v250 = *(void **)(a1 + 8848);
    if (*(_QWORD *)(a1 + 8856) < v244)
    {
      if (v250)
        MEMORY[0x212BC6368](v250, 0x1000C8000313F17);
      *(_QWORD *)(a1 + 8848) = 0;
      v251 = (8 * v244 + 31) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)(a1 + 8856) = v251 >> 3;
      v250 = operator new(v251, (std::align_val_t)0x20uLL);
      *(_QWORD *)(a1 + 8848) = v250;
      v242 = *(_DWORD *)(a1 + 8864);
      v243 = *(_DWORD *)(a1 + 8868);
    }
  }
  if (v242 * v243)
    bzero(v250, 8 * v242 * v243);
  sub_20F5A6384(v249, a1 + 8848, (unsigned int **)(a1 + 8608), (unsigned int **)(a1 + 8440));
  sub_20F5A6384(v249, a1 + 8824, (unsigned int **)(a1 + 8440), (unsigned int **)(a1 + 8608));
  *(_QWORD *)&v958 = a1 + 8848;
  sub_20F2B809C(a1 + 8824, (uint64_t **)&v958);
  sub_20F597134((_QWORD *)(a1 + 32), (char **)(a1 + 7936));
  sub_20F59B0EC(a1 + 112);
  v252 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v252)
    bzero(*(void **)(a1 + 32), 8 * v252);
  v253 = *v938;
  v254 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  sub_20F59FDA8(a1 + 7936, v254 + 7528, (uint64_t)&unk_2103B676C, a1 + 8440);
  sub_20F5A00B8(v254 + 80, (void **)(a1 + 8872), a1 + 8440, (unsigned int **)(a1 + 8440));
  if (v253)
  {
    v255 = *v938;
    if (*(_BYTE *)(a1 + 7729))
      goto LABEL_322;
LABEL_326:
    if (sub_20F2B67A0(v929, v934, a1 + 8824, v255 != 0, a1 + 8872, (unint64_t *)(a1 + 32)))
      goto LABEL_327;
    return 1;
  }
  sub_20F5A0788(v254, a1 + 32, (int **)(a1 + 8440));
  v255 = *v938;
  if (!*(_BYTE *)(a1 + 7729))
    goto LABEL_326;
LABEL_322:
  LOBYTE(v958) = v255;
  v256 = *(_QWORD *)(a1 + 7760);
  if (!v256)
    sub_20E86D37C();
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v256 + 48))(v256, v929, v934, a1 + 8824, &v958, a1 + 8872, a1 + 32) & 1) == 0)return 1;
LABEL_327:
  v257 = *(_QWORD *)(a1 + 7168);
  v258 = 3 * *(_DWORD *)(v257 + 8);
  v259 = *(_DWORD *)(*(_QWORD *)(a1 + 7224) + 8);
  v930 = *(_DWORD *)(*(_QWORD *)(a1 + 7280) + 8);
  v939 = *(_DWORD *)(*(_QWORD *)(a1 + 7336) + 8);
  v935 = *(_DWORD *)(*(_QWORD *)(a1 + 7448) + 8);
  v260 = 3 * *(_DWORD *)(v257 + 12);
  v261 = *(_DWORD *)(*(_QWORD *)(a1 + 7176) + 12);
  v915 = *(_DWORD *)(*(_QWORD *)(a1 + 7192) + 12);
  v916 = *(_DWORD *)(*(_QWORD *)(a1 + 7200) + 12);
  v917 = *(_DWORD *)(*(_QWORD *)(a1 + 7392) + 8);
  v913 = *(_DWORD *)(*(_QWORD *)(a1 + 7184) + 12);
  v914 = *(_DWORD *)(*(_QWORD *)(a1 + 7208) + 12);
  v262 = *(unsigned int *)(a1 + 988);
  if ((_DWORD)v262)
  {
    v263 = 0;
    v264 = *(_QWORD *)(a1 + 1096);
    do
    {
      v265 = *(_QWORD *)(v264 + 8 * v263);
      if (v265)
      {
        v266 = *(_QWORD *)(a1 + 1032);
        v267 = *(_QWORD *)(a1 + 1024);
        v268 = *(_QWORD *)(a1 + 1056);
        v269 = 16 * v265;
        v270 = (uint64_t *)(*(_QWORD *)(a1 + 1064) + 16 * (*(_DWORD *)(a1 + 1088) * v263) + 8);
        do
        {
          v272 = ((v266 - v267) << 6) - 1;
          if (v266 == v267)
            v272 = 0;
          v273 = *(_QWORD *)(a1 + 1048) + v268;
          if (v272 == v273)
          {
            sub_20EDB36DC(a1 + 1016);
            v267 = *(_QWORD *)(a1 + 1024);
            v266 = *(_QWORD *)(a1 + 1032);
            v273 = *(_QWORD *)(a1 + 1056) + *(_QWORD *)(a1 + 1048);
          }
          v271 = *v270;
          v270 += 2;
          *(_QWORD *)(*(_QWORD *)(v267 + ((v273 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v273 & 0x1FF)) = v271;
          v268 = *(_QWORD *)(a1 + 1056) + 1;
          *(_QWORD *)(a1 + 1056) = v268;
          v269 -= 16;
        }
        while (v269);
        v264 = *(_QWORD *)(a1 + 1096);
        v262 = *(unsigned int *)(a1 + 988);
      }
      *(_QWORD *)(v264 + 8 * v263++) = 0;
    }
    while (v263 < v262);
  }
  *(_QWORD *)v926 = (2 * v258);
  v274 = 9 * v259;
  *(_QWORD *)v924 = (2 * v260);
  v275 = *(unsigned int *)(a1 + 1996);
  v276 = 9 * v261;
  if ((_DWORD)v275)
  {
    v277 = 0;
    v278 = *(_QWORD *)(a1 + 2104);
    do
    {
      v279 = *(_QWORD *)(v278 + 8 * v277);
      if (v279)
      {
        v280 = *(_QWORD *)(a1 + 2040);
        v281 = *(_QWORD *)(a1 + 2032);
        v282 = *(_QWORD *)(a1 + 2064);
        v283 = 16 * v279;
        v284 = (uint64_t *)(*(_QWORD *)(a1 + 2072) + 16 * (*(_DWORD *)(a1 + 2096) * v277) + 8);
        do
        {
          v286 = ((v280 - v281) << 6) - 1;
          if (v280 == v281)
            v286 = 0;
          v287 = *(_QWORD *)(a1 + 2056) + v282;
          if (v286 == v287)
          {
            sub_20EDB36DC(a1 + 2024);
            v281 = *(_QWORD *)(a1 + 2032);
            v280 = *(_QWORD *)(a1 + 2040);
            v287 = *(_QWORD *)(a1 + 2064) + *(_QWORD *)(a1 + 2056);
          }
          v285 = *v284;
          v284 += 2;
          *(_QWORD *)(*(_QWORD *)(v281 + ((v287 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v287 & 0x1FF)) = v285;
          v282 = *(_QWORD *)(a1 + 2064) + 1;
          *(_QWORD *)(a1 + 2064) = v282;
          v283 -= 16;
        }
        while (v283);
        v278 = *(_QWORD *)(a1 + 2104);
        v275 = *(unsigned int *)(a1 + 1996);
      }
      *(_QWORD *)(v278 + 8 * v277++) = 0;
    }
    while (v277 < v275);
  }
  *(_QWORD *)v922 = (v274 + v926[0]);
  *(_QWORD *)v921 = (v276 + v924[0]);
  v288 = *(unsigned int *)(a1 + 3004);
  if ((_DWORD)v288)
  {
    v289 = 0;
    v290 = *(_QWORD *)(a1 + 3112);
    do
    {
      v291 = *(_QWORD *)(v290 + 8 * v289);
      if (v291)
      {
        v292 = *(_QWORD *)(a1 + 3048);
        v293 = *(_QWORD *)(a1 + 3040);
        v294 = *(_QWORD *)(a1 + 3072);
        v295 = 16 * v291;
        v296 = (uint64_t *)(*(_QWORD *)(a1 + 3080) + 16 * (*(_DWORD *)(a1 + 3104) * v289) + 8);
        do
        {
          v298 = ((v292 - v293) << 6) - 1;
          if (v292 == v293)
            v298 = 0;
          v299 = *(_QWORD *)(a1 + 3064) + v294;
          if (v298 == v299)
          {
            sub_20EDB36DC(a1 + 3032);
            v293 = *(_QWORD *)(a1 + 3040);
            v292 = *(_QWORD *)(a1 + 3048);
            v299 = *(_QWORD *)(a1 + 3072) + *(_QWORD *)(a1 + 3064);
          }
          v297 = *v296;
          v296 += 2;
          *(_QWORD *)(*(_QWORD *)(v293 + ((v299 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v299 & 0x1FF)) = v297;
          v294 = *(_QWORD *)(a1 + 3072) + 1;
          *(_QWORD *)(a1 + 3072) = v294;
          v295 -= 16;
        }
        while (v295);
        v290 = *(_QWORD *)(a1 + 3112);
        v288 = *(unsigned int *)(a1 + 3004);
      }
      *(_QWORD *)(v290 + 8 * v289++) = 0;
    }
    while (v289 < v288);
  }
  v918 = (v930 + v922[0]);
  *(_QWORD *)v931 = (v913 + v921[0]);
  v300 = *(unsigned int *)(a1 + 4012);
  if ((_DWORD)v300)
  {
    v301 = 0;
    v302 = *(_QWORD *)(a1 + 4120);
    do
    {
      v303 = *(_QWORD *)(v302 + 8 * v301);
      if (v303)
      {
        v304 = *(_QWORD *)(a1 + 4056);
        v305 = *(_QWORD *)(a1 + 4048);
        v306 = *(_QWORD *)(a1 + 4080);
        v307 = 16 * v303;
        v308 = (uint64_t *)(*(_QWORD *)(a1 + 4088) + 16 * (*(_DWORD *)(a1 + 4112) * v301) + 8);
        do
        {
          v310 = ((v304 - v305) << 6) - 1;
          if (v304 == v305)
            v310 = 0;
          v311 = *(_QWORD *)(a1 + 4072) + v306;
          if (v310 == v311)
          {
            sub_20EDB36DC(a1 + 4040);
            v305 = *(_QWORD *)(a1 + 4048);
            v304 = *(_QWORD *)(a1 + 4056);
            v311 = *(_QWORD *)(a1 + 4080) + *(_QWORD *)(a1 + 4072);
          }
          v309 = *v308;
          v308 += 2;
          *(_QWORD *)(*(_QWORD *)(v305 + ((v311 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v311 & 0x1FF)) = v309;
          v306 = *(_QWORD *)(a1 + 4080) + 1;
          *(_QWORD *)(a1 + 4080) = v306;
          v307 -= 16;
        }
        while (v307);
        v302 = *(_QWORD *)(a1 + 4120);
        v300 = *(unsigned int *)(a1 + 4012);
      }
      *(_QWORD *)(v302 + 8 * v301++) = 0;
    }
    while (v301 < v300);
  }
  v312 = (v918 + 6 * v939);
  v313 = v935 + v917;
  v314 = *(unsigned int *)(a1 + 5020);
  v936 = (v931[0] + 6 * v915);
  if ((_DWORD)v314)
  {
    v315 = 0;
    v316 = *(_QWORD *)(a1 + 5128);
    do
    {
      v317 = *(_QWORD *)(v316 + 8 * v315);
      if (v317)
      {
        v318 = *(_QWORD *)(a1 + 5064);
        v319 = *(_QWORD *)(a1 + 5056);
        v320 = *(_QWORD *)(a1 + 5088);
        v321 = 16 * v317;
        v322 = (uint64_t *)(*(_QWORD *)(a1 + 5096) + 16 * (*(_DWORD *)(a1 + 5120) * v315) + 8);
        do
        {
          v324 = ((v318 - v319) << 6) - 1;
          if (v318 == v319)
            v324 = 0;
          v325 = *(_QWORD *)(a1 + 5080) + v320;
          if (v324 == v325)
          {
            sub_20EDB36DC(a1 + 5048);
            v319 = *(_QWORD *)(a1 + 5056);
            v318 = *(_QWORD *)(a1 + 5064);
            v325 = *(_QWORD *)(a1 + 5088) + *(_QWORD *)(a1 + 5080);
          }
          v323 = *v322;
          v322 += 2;
          *(_QWORD *)(*(_QWORD *)(v319 + ((v325 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v325 & 0x1FF)) = v323;
          v320 = *(_QWORD *)(a1 + 5088) + 1;
          *(_QWORD *)(a1 + 5088) = v320;
          v321 -= 16;
        }
        while (v321);
        v316 = *(_QWORD *)(a1 + 5128);
        v314 = *(unsigned int *)(a1 + 5020);
      }
      *(_QWORD *)(v316 + 8 * v315++) = 0;
    }
    while (v315 < v314);
  }
  v326 = v312 + 4 * v313;
  v327 = *(unsigned int *)(a1 + 6028);
  v328 = (v936 + 4 * (v914 + v916));
  if ((_DWORD)v327)
  {
    v329 = 0;
    v330 = *(_QWORD *)(a1 + 6136);
    do
    {
      v331 = *(_QWORD *)(v330 + 8 * v329);
      if (v331)
      {
        v332 = *(_QWORD *)(a1 + 6072);
        v333 = *(_QWORD *)(a1 + 6064);
        v334 = *(_QWORD *)(a1 + 6096);
        v335 = 16 * v331;
        v336 = (uint64_t *)(*(_QWORD *)(a1 + 6104) + 16 * (*(_DWORD *)(a1 + 6128) * v329) + 8);
        do
        {
          v338 = ((v332 - v333) << 6) - 1;
          if (v332 == v333)
            v338 = 0;
          v339 = *(_QWORD *)(a1 + 6088) + v334;
          if (v338 == v339)
          {
            sub_20EDB36DC(a1 + 6056);
            v333 = *(_QWORD *)(a1 + 6064);
            v332 = *(_QWORD *)(a1 + 6072);
            v339 = *(_QWORD *)(a1 + 6096) + *(_QWORD *)(a1 + 6088);
          }
          v337 = *v336;
          v336 += 2;
          *(_QWORD *)(*(_QWORD *)(v333 + ((v339 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v339 & 0x1FF)) = v337;
          v334 = *(_QWORD *)(a1 + 6096) + 1;
          *(_QWORD *)(a1 + 6096) = v334;
          v335 -= 16;
        }
        while (v335);
        v330 = *(_QWORD *)(a1 + 6136);
        v327 = *(unsigned int *)(a1 + 6028);
      }
      *(_QWORD *)(v330 + 8 * v329++) = 0;
    }
    while (v329 < v327);
  }
  sub_20F5A947C(a1 + 7024, (uint64_t *)(a1 + 8872), v326 | ((unint64_t)v328 << 32));
  v340 = *(unsigned int *)(a1 + 844);
  if ((_DWORD)v340)
  {
    v341 = 0;
    v342 = *(_QWORD *)(a1 + 952);
    do
    {
      v343 = *(_QWORD *)(v342 + 8 * v341);
      if (v343)
      {
        v344 = *(_QWORD *)(a1 + 888);
        v345 = *(_QWORD *)(a1 + 880);
        v346 = *(_QWORD *)(a1 + 912);
        v347 = 16 * v343;
        v348 = (uint64_t *)(*(_QWORD *)(a1 + 920) + 16 * (*(_DWORD *)(a1 + 944) * v341) + 8);
        do
        {
          v350 = ((v344 - v345) << 6) - 1;
          if (v344 == v345)
            v350 = 0;
          v351 = *(_QWORD *)(a1 + 904) + v346;
          if (v350 == v351)
          {
            sub_20EDB36DC(a1 + 872);
            v345 = *(_QWORD *)(a1 + 880);
            v344 = *(_QWORD *)(a1 + 888);
            v351 = *(_QWORD *)(a1 + 912) + *(_QWORD *)(a1 + 904);
          }
          v349 = *v348;
          v348 += 2;
          *(_QWORD *)(*(_QWORD *)(v345 + ((v351 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v351 & 0x1FF)) = v349;
          v346 = *(_QWORD *)(a1 + 912) + 1;
          *(_QWORD *)(a1 + 912) = v346;
          v347 -= 16;
        }
        while (v347);
        v342 = *(_QWORD *)(a1 + 952);
        v340 = *(unsigned int *)(a1 + 844);
      }
      *(_QWORD *)(v342 + 8 * v341++) = 0;
    }
    while (v341 < v340);
  }
  v352 = *(unsigned int *)(a1 + 1852);
  if ((_DWORD)v352)
  {
    v353 = 0;
    v354 = *(_QWORD *)(a1 + 1960);
    do
    {
      v355 = *(_QWORD *)(v354 + 8 * v353);
      if (v355)
      {
        v356 = *(_QWORD *)(a1 + 1896);
        v357 = *(_QWORD *)(a1 + 1888);
        v358 = *(_QWORD *)(a1 + 1920);
        v359 = 16 * v355;
        v360 = (uint64_t *)(*(_QWORD *)(a1 + 1928) + 16 * (*(_DWORD *)(a1 + 1952) * v353) + 8);
        do
        {
          v362 = ((v356 - v357) << 6) - 1;
          if (v356 == v357)
            v362 = 0;
          v363 = *(_QWORD *)(a1 + 1912) + v358;
          if (v362 == v363)
          {
            sub_20EDB36DC(a1 + 1880);
            v357 = *(_QWORD *)(a1 + 1888);
            v356 = *(_QWORD *)(a1 + 1896);
            v363 = *(_QWORD *)(a1 + 1920) + *(_QWORD *)(a1 + 1912);
          }
          v361 = *v360;
          v360 += 2;
          *(_QWORD *)(*(_QWORD *)(v357 + ((v363 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v363 & 0x1FF)) = v361;
          v358 = *(_QWORD *)(a1 + 1920) + 1;
          *(_QWORD *)(a1 + 1920) = v358;
          v359 -= 16;
        }
        while (v359);
        v354 = *(_QWORD *)(a1 + 1960);
        v352 = *(unsigned int *)(a1 + 1852);
      }
      *(_QWORD *)(v354 + 8 * v353++) = 0;
    }
    while (v353 < v352);
  }
  v364 = *(unsigned int *)(a1 + 2860);
  if ((_DWORD)v364)
  {
    v365 = 0;
    v366 = *(_QWORD *)(a1 + 2968);
    do
    {
      v367 = *(_QWORD *)(v366 + 8 * v365);
      if (v367)
      {
        v368 = *(_QWORD *)(a1 + 2904);
        v369 = *(_QWORD *)(a1 + 2896);
        v370 = *(_QWORD *)(a1 + 2928);
        v371 = 16 * v367;
        v372 = (uint64_t *)(*(_QWORD *)(a1 + 2936) + 16 * (*(_DWORD *)(a1 + 2960) * v365) + 8);
        do
        {
          v374 = ((v368 - v369) << 6) - 1;
          if (v368 == v369)
            v374 = 0;
          v375 = *(_QWORD *)(a1 + 2920) + v370;
          if (v374 == v375)
          {
            sub_20EDB36DC(a1 + 2888);
            v369 = *(_QWORD *)(a1 + 2896);
            v368 = *(_QWORD *)(a1 + 2904);
            v375 = *(_QWORD *)(a1 + 2928) + *(_QWORD *)(a1 + 2920);
          }
          v373 = *v372;
          v372 += 2;
          *(_QWORD *)(*(_QWORD *)(v369 + ((v375 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v375 & 0x1FF)) = v373;
          v370 = *(_QWORD *)(a1 + 2928) + 1;
          *(_QWORD *)(a1 + 2928) = v370;
          v371 -= 16;
        }
        while (v371);
        v366 = *(_QWORD *)(a1 + 2968);
        v364 = *(unsigned int *)(a1 + 2860);
      }
      *(_QWORD *)(v366 + 8 * v365++) = 0;
    }
    while (v365 < v364);
  }
  v376 = *(unsigned int *)(a1 + 3868);
  if ((_DWORD)v376)
  {
    v377 = 0;
    v378 = *(_QWORD *)(a1 + 3976);
    do
    {
      v379 = *(_QWORD *)(v378 + 8 * v377);
      if (v379)
      {
        v380 = *(_QWORD *)(a1 + 3912);
        v381 = *(_QWORD *)(a1 + 3904);
        v382 = *(_QWORD *)(a1 + 3936);
        v383 = 16 * v379;
        v384 = (uint64_t *)(*(_QWORD *)(a1 + 3944) + 16 * (*(_DWORD *)(a1 + 3968) * v377) + 8);
        do
        {
          v386 = ((v380 - v381) << 6) - 1;
          if (v380 == v381)
            v386 = 0;
          v387 = *(_QWORD *)(a1 + 3928) + v382;
          if (v386 == v387)
          {
            sub_20EDB36DC(a1 + 3896);
            v381 = *(_QWORD *)(a1 + 3904);
            v380 = *(_QWORD *)(a1 + 3912);
            v387 = *(_QWORD *)(a1 + 3936) + *(_QWORD *)(a1 + 3928);
          }
          v385 = *v384;
          v384 += 2;
          *(_QWORD *)(*(_QWORD *)(v381 + ((v387 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v387 & 0x1FF)) = v385;
          v382 = *(_QWORD *)(a1 + 3936) + 1;
          *(_QWORD *)(a1 + 3936) = v382;
          v383 -= 16;
        }
        while (v383);
        v378 = *(_QWORD *)(a1 + 3976);
        v376 = *(unsigned int *)(a1 + 3868);
      }
      *(_QWORD *)(v378 + 8 * v377++) = 0;
    }
    while (v377 < v376);
  }
  v940 = v328 << 32;
  v388 = (v312 + 4 * v917);
  v389 = *(unsigned int *)(a1 + 4876);
  v390 = (v936 + 4 * v916);
  if ((_DWORD)v389)
  {
    v391 = 0;
    v392 = *(_QWORD *)(a1 + 4984);
    do
    {
      v393 = *(_QWORD *)(v392 + 8 * v391);
      if (v393)
      {
        v394 = *(_QWORD *)(a1 + 4920);
        v395 = *(_QWORD *)(a1 + 4912);
        v396 = *(_QWORD *)(a1 + 4944);
        v397 = 16 * v393;
        v398 = (uint64_t *)(*(_QWORD *)(a1 + 4952) + 16 * (*(_DWORD *)(a1 + 4976) * v391) + 8);
        do
        {
          v400 = ((v394 - v395) << 6) - 1;
          if (v394 == v395)
            v400 = 0;
          v401 = *(_QWORD *)(a1 + 4936) + v396;
          if (v400 == v401)
          {
            sub_20EDB36DC(a1 + 4904);
            v395 = *(_QWORD *)(a1 + 4912);
            v394 = *(_QWORD *)(a1 + 4920);
            v401 = *(_QWORD *)(a1 + 4944) + *(_QWORD *)(a1 + 4936);
          }
          v399 = *v398;
          v398 += 2;
          *(_QWORD *)(*(_QWORD *)(v395 + ((v401 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v401 & 0x1FF)) = v399;
          v396 = *(_QWORD *)(a1 + 4944) + 1;
          *(_QWORD *)(a1 + 4944) = v396;
          v397 -= 16;
        }
        while (v397);
        v392 = *(_QWORD *)(a1 + 4984);
        v389 = *(unsigned int *)(a1 + 4876);
      }
      *(_QWORD *)(v392 + 8 * v391++) = 0;
    }
    while (v391 < v389);
  }
  sub_20F5A9BBC(a1 + 5872, (uint64_t *)(a1 + 8872), v388 | ((unint64_t)v390 << 32));
  sub_20F5AA30C(a1 + 6880, (uint64_t *)(a1 + 8872), v940 | v388);
  v402 = *(unsigned int *)(a1 + 700);
  if ((_DWORD)v402)
  {
    v403 = 0;
    v404 = *(_QWORD *)(a1 + 808);
    do
    {
      v405 = *(_QWORD *)(v404 + 8 * v403);
      if (v405)
      {
        v406 = *(_QWORD *)(a1 + 744);
        v407 = *(_QWORD *)(a1 + 736);
        v408 = *(_QWORD *)(a1 + 768);
        v409 = 16 * v405;
        v410 = (uint64_t *)(*(_QWORD *)(a1 + 776) + 16 * (*(_DWORD *)(a1 + 800) * v403) + 8);
        do
        {
          v412 = ((v406 - v407) << 6) - 1;
          if (v406 == v407)
            v412 = 0;
          v413 = *(_QWORD *)(a1 + 760) + v408;
          if (v412 == v413)
          {
            sub_20EDB36DC(a1 + 728);
            v407 = *(_QWORD *)(a1 + 736);
            v406 = *(_QWORD *)(a1 + 744);
            v413 = *(_QWORD *)(a1 + 768) + *(_QWORD *)(a1 + 760);
          }
          v411 = *v410;
          v410 += 2;
          *(_QWORD *)(*(_QWORD *)(v407 + ((v413 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v413 & 0x1FF)) = v411;
          v408 = *(_QWORD *)(a1 + 768) + 1;
          *(_QWORD *)(a1 + 768) = v408;
          v409 -= 16;
        }
        while (v409);
        v404 = *(_QWORD *)(a1 + 808);
        v402 = *(unsigned int *)(a1 + 700);
      }
      *(_QWORD *)(v404 + 8 * v403++) = 0;
    }
    while (v403 < v402);
  }
  v414 = *(unsigned int *)(a1 + 1708);
  if ((_DWORD)v414)
  {
    v415 = 0;
    v416 = *(_QWORD *)(a1 + 1816);
    do
    {
      v417 = *(_QWORD *)(v416 + 8 * v415);
      if (v417)
      {
        v418 = *(_QWORD *)(a1 + 1752);
        v419 = *(_QWORD *)(a1 + 1744);
        v420 = *(_QWORD *)(a1 + 1776);
        v421 = 16 * v417;
        v422 = (uint64_t *)(*(_QWORD *)(a1 + 1784) + 16 * (*(_DWORD *)(a1 + 1808) * v415) + 8);
        do
        {
          v424 = ((v418 - v419) << 6) - 1;
          if (v418 == v419)
            v424 = 0;
          v425 = *(_QWORD *)(a1 + 1768) + v420;
          if (v424 == v425)
          {
            sub_20EDB36DC(a1 + 1736);
            v419 = *(_QWORD *)(a1 + 1744);
            v418 = *(_QWORD *)(a1 + 1752);
            v425 = *(_QWORD *)(a1 + 1776) + *(_QWORD *)(a1 + 1768);
          }
          v423 = *v422;
          v422 += 2;
          *(_QWORD *)(*(_QWORD *)(v419 + ((v425 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v425 & 0x1FF)) = v423;
          v420 = *(_QWORD *)(a1 + 1776) + 1;
          *(_QWORD *)(a1 + 1776) = v420;
          v421 -= 16;
        }
        while (v421);
        v416 = *(_QWORD *)(a1 + 1816);
        v414 = *(unsigned int *)(a1 + 1708);
      }
      *(_QWORD *)(v416 + 8 * v415++) = 0;
    }
    while (v415 < v414);
  }
  v426 = *(unsigned int *)(a1 + 2716);
  if ((_DWORD)v426)
  {
    v427 = 0;
    v428 = *(_QWORD *)(a1 + 2824);
    do
    {
      v429 = *(_QWORD *)(v428 + 8 * v427);
      if (v429)
      {
        v430 = *(_QWORD *)(a1 + 2760);
        v431 = *(_QWORD *)(a1 + 2752);
        v432 = *(_QWORD *)(a1 + 2784);
        v433 = 16 * v429;
        v434 = (uint64_t *)(*(_QWORD *)(a1 + 2792) + 16 * (*(_DWORD *)(a1 + 2816) * v427) + 8);
        do
        {
          v436 = ((v430 - v431) << 6) - 1;
          if (v430 == v431)
            v436 = 0;
          v437 = *(_QWORD *)(a1 + 2776) + v432;
          if (v436 == v437)
          {
            sub_20EDB36DC(a1 + 2744);
            v431 = *(_QWORD *)(a1 + 2752);
            v430 = *(_QWORD *)(a1 + 2760);
            v437 = *(_QWORD *)(a1 + 2784) + *(_QWORD *)(a1 + 2776);
          }
          v435 = *v434;
          v434 += 2;
          *(_QWORD *)(*(_QWORD *)(v431 + ((v437 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v437 & 0x1FF)) = v435;
          v432 = *(_QWORD *)(a1 + 2784) + 1;
          *(_QWORD *)(a1 + 2784) = v432;
          v433 -= 16;
        }
        while (v433);
        v428 = *(_QWORD *)(a1 + 2824);
        v426 = *(unsigned int *)(a1 + 2716);
      }
      *(_QWORD *)(v428 + 8 * v427++) = 0;
    }
    while (v427 < v426);
  }
  v438 = v390 << 32;
  v439 = *(unsigned int *)(a1 + 3724);
  if ((_DWORD)v439)
  {
    v440 = 0;
    v441 = *(_QWORD *)(a1 + 3832);
    do
    {
      v442 = *(_QWORD *)(v441 + 8 * v440);
      if (v442)
      {
        v443 = *(_QWORD *)(a1 + 3768);
        v444 = *(_QWORD *)(a1 + 3760);
        v445 = *(_QWORD *)(a1 + 3792);
        v446 = 16 * v442;
        v447 = (uint64_t *)(*(_QWORD *)(a1 + 3800) + 16 * (*(_DWORD *)(a1 + 3824) * v440) + 8);
        do
        {
          v449 = ((v443 - v444) << 6) - 1;
          if (v443 == v444)
            v449 = 0;
          v450 = *(_QWORD *)(a1 + 3784) + v445;
          if (v449 == v450)
          {
            sub_20EDB36DC(a1 + 3752);
            v444 = *(_QWORD *)(a1 + 3760);
            v443 = *(_QWORD *)(a1 + 3768);
            v450 = *(_QWORD *)(a1 + 3792) + *(_QWORD *)(a1 + 3784);
          }
          v448 = *v447;
          v447 += 2;
          *(_QWORD *)(*(_QWORD *)(v444 + ((v450 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v450 & 0x1FF)) = v448;
          v445 = *(_QWORD *)(a1 + 3792) + 1;
          *(_QWORD *)(a1 + 3792) = v445;
          v446 -= 16;
        }
        while (v446);
        v441 = *(_QWORD *)(a1 + 3832);
        v439 = *(unsigned int *)(a1 + 3724);
      }
      *(_QWORD *)(v441 + 8 * v440++) = 0;
    }
    while (v440 < v439);
  }
  sub_20F5A9BBC(a1 + 4720, (uint64_t *)(a1 + 8872), v312 | ((unint64_t)v936 << 32));
  sub_20F5AA938(a1 + 5728, (uint64_t *)(a1 + 8872), v438 | v312);
  sub_20F5AA30C(a1 + 6736, (uint64_t *)(a1 + 8872), v940 | v312);
  v451 = *(unsigned int *)(a1 + 556);
  if ((_DWORD)v451)
  {
    v452 = 0;
    v453 = *(_QWORD *)(a1 + 664);
    do
    {
      v454 = *(_QWORD *)(v453 + 8 * v452);
      if (v454)
      {
        v455 = *(_QWORD *)(a1 + 600);
        v456 = *(_QWORD *)(a1 + 592);
        v457 = *(_QWORD *)(a1 + 624);
        v458 = 16 * v454;
        v459 = (uint64_t *)(*(_QWORD *)(a1 + 632) + 16 * (*(_DWORD *)(a1 + 656) * v452) + 8);
        do
        {
          v461 = ((v455 - v456) << 6) - 1;
          if (v455 == v456)
            v461 = 0;
          v462 = *(_QWORD *)(a1 + 616) + v457;
          if (v461 == v462)
          {
            sub_20EDB36DC(a1 + 584);
            v456 = *(_QWORD *)(a1 + 592);
            v455 = *(_QWORD *)(a1 + 600);
            v462 = *(_QWORD *)(a1 + 624) + *(_QWORD *)(a1 + 616);
          }
          v460 = *v459;
          v459 += 2;
          *(_QWORD *)(*(_QWORD *)(v456 + ((v462 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v462 & 0x1FF)) = v460;
          v457 = *(_QWORD *)(a1 + 624) + 1;
          *(_QWORD *)(a1 + 624) = v457;
          v458 -= 16;
        }
        while (v458);
        v453 = *(_QWORD *)(a1 + 664);
        v451 = *(unsigned int *)(a1 + 556);
      }
      *(_QWORD *)(v453 + 8 * v452++) = 0;
    }
    while (v452 < v451);
  }
  v463 = *(unsigned int *)(a1 + 1564);
  if ((_DWORD)v463)
  {
    v464 = 0;
    v465 = *(_QWORD *)(a1 + 1672);
    do
    {
      v466 = *(_QWORD *)(v465 + 8 * v464);
      if (v466)
      {
        v467 = *(_QWORD *)(a1 + 1608);
        v468 = *(_QWORD *)(a1 + 1600);
        v469 = *(_QWORD *)(a1 + 1632);
        v470 = 16 * v466;
        v471 = (uint64_t *)(*(_QWORD *)(a1 + 1640) + 16 * (*(_DWORD *)(a1 + 1664) * v464) + 8);
        do
        {
          v473 = ((v467 - v468) << 6) - 1;
          if (v467 == v468)
            v473 = 0;
          v474 = *(_QWORD *)(a1 + 1624) + v469;
          if (v473 == v474)
          {
            sub_20EDB36DC(a1 + 1592);
            v468 = *(_QWORD *)(a1 + 1600);
            v467 = *(_QWORD *)(a1 + 1608);
            v474 = *(_QWORD *)(a1 + 1632) + *(_QWORD *)(a1 + 1624);
          }
          v472 = *v471;
          v471 += 2;
          *(_QWORD *)(*(_QWORD *)(v468 + ((v474 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v474 & 0x1FF)) = v472;
          v469 = *(_QWORD *)(a1 + 1632) + 1;
          *(_QWORD *)(a1 + 1632) = v469;
          v470 -= 16;
        }
        while (v470);
        v465 = *(_QWORD *)(a1 + 1672);
        v463 = *(unsigned int *)(a1 + 1564);
      }
      *(_QWORD *)(v465 + 8 * v464++) = 0;
    }
    while (v464 < v463);
  }
  v475 = v936 << 32;
  v476 = *(unsigned int *)(a1 + 2572);
  if ((_DWORD)v476)
  {
    v477 = 0;
    v478 = *(_QWORD *)(a1 + 2680);
    do
    {
      v479 = *(_QWORD *)(v478 + 8 * v477);
      if (v479)
      {
        v480 = *(_QWORD *)(a1 + 2616);
        v481 = *(_QWORD *)(a1 + 2608);
        v482 = *(_QWORD *)(a1 + 2640);
        v483 = 16 * v479;
        v484 = (uint64_t *)(*(_QWORD *)(a1 + 2648) + 16 * (*(_DWORD *)(a1 + 2672) * v477) + 8);
        do
        {
          v486 = ((v480 - v481) << 6) - 1;
          if (v480 == v481)
            v486 = 0;
          v487 = *(_QWORD *)(a1 + 2632) + v482;
          if (v486 == v487)
          {
            sub_20EDB36DC(a1 + 2600);
            v481 = *(_QWORD *)(a1 + 2608);
            v480 = *(_QWORD *)(a1 + 2616);
            v487 = *(_QWORD *)(a1 + 2640) + *(_QWORD *)(a1 + 2632);
          }
          v485 = *v484;
          v484 += 2;
          *(_QWORD *)(*(_QWORD *)(v481 + ((v487 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v487 & 0x1FF)) = v485;
          v482 = *(_QWORD *)(a1 + 2640) + 1;
          *(_QWORD *)(a1 + 2640) = v482;
          v483 -= 16;
        }
        while (v483);
        v478 = *(_QWORD *)(a1 + 2680);
        v476 = *(unsigned int *)(a1 + 2572);
      }
      *(_QWORD *)(v478 + 8 * v477++) = 0;
    }
    while (v477 < v476);
  }
  sub_20F5AAFC4(a1 + 3568, (uint64_t *)(a1 + 8872), v918 | ((unint64_t)v931[0] << 32));
  sub_20F5AB76C(a1 + 4576, (uint64_t *)(a1 + 8872), v475 | v918);
  sub_20F5AB76C(a1 + 5584, (uint64_t *)(a1 + 8872), v438 | v918);
  sub_20F5ABE20(a1 + 6592, (uint64_t *)(a1 + 8872), v940 | v918);
  v488 = *(unsigned int *)(a1 + 412);
  if ((_DWORD)v488)
  {
    v489 = 0;
    v490 = *(_QWORD *)(a1 + 520);
    do
    {
      v491 = *(_QWORD *)(v490 + 8 * v489);
      if (v491)
      {
        v492 = *(_QWORD *)(a1 + 448);
        v493 = *(_QWORD *)(a1 + 456);
        v494 = *(_QWORD *)(a1 + 480);
        v495 = 16 * v491;
        v496 = (uint64_t *)(*(_QWORD *)(a1 + 488) + 16 * (*(_DWORD *)(a1 + 512) * v489) + 8);
        do
        {
          v498 = ((v493 - v492) << 6) - 1;
          if (v493 == v492)
            v498 = 0;
          v499 = *(_QWORD *)(a1 + 472) + v494;
          if (v498 == v499)
          {
            sub_20EDB36DC(a1 + 440);
            v492 = *(_QWORD *)(a1 + 448);
            v493 = *(_QWORD *)(a1 + 456);
            v499 = *(_QWORD *)(a1 + 480) + *(_QWORD *)(a1 + 472);
          }
          v497 = *v496;
          v496 += 2;
          *(_QWORD *)(*(_QWORD *)(v492 + ((v499 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v499 & 0x1FF)) = v497;
          v494 = *(_QWORD *)(a1 + 480) + 1;
          *(_QWORD *)(a1 + 480) = v494;
          v495 -= 16;
        }
        while (v495);
        v490 = *(_QWORD *)(a1 + 520);
        v488 = *(unsigned int *)(a1 + 412);
      }
      *(_QWORD *)(v490 + 8 * v489++) = 0;
    }
    while (v489 < v488);
  }
  v500 = *(_QWORD *)v931 << 32;
  v501 = *(unsigned int *)(a1 + 1420);
  if ((_DWORD)v501)
  {
    v502 = 0;
    v503 = *(_QWORD *)(a1 + 1528);
    do
    {
      v504 = *(_QWORD *)(v503 + 8 * v502);
      if (v504)
      {
        v505 = *(_QWORD *)(a1 + 1464);
        v506 = *(_QWORD *)(a1 + 1456);
        v507 = *(_QWORD *)(a1 + 1488);
        v508 = 16 * v504;
        v509 = (uint64_t *)(*(_QWORD *)(a1 + 1496) + 16 * (*(_DWORD *)(a1 + 1520) * v502) + 8);
        do
        {
          v511 = ((v505 - v506) << 6) - 1;
          if (v505 == v506)
            v511 = 0;
          v512 = *(_QWORD *)(a1 + 1480) + v507;
          if (v511 == v512)
          {
            sub_20EDB36DC(a1 + 1448);
            v506 = *(_QWORD *)(a1 + 1456);
            v505 = *(_QWORD *)(a1 + 1464);
            v512 = *(_QWORD *)(a1 + 1488) + *(_QWORD *)(a1 + 1480);
          }
          v510 = *v509;
          v509 += 2;
          *(_QWORD *)(*(_QWORD *)(v506 + ((v512 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v512 & 0x1FF)) = v510;
          v507 = *(_QWORD *)(a1 + 1488) + 1;
          *(_QWORD *)(a1 + 1488) = v507;
          v508 -= 16;
        }
        while (v508);
        v503 = *(_QWORD *)(a1 + 1528);
        v501 = *(unsigned int *)(a1 + 1420);
      }
      *(_QWORD *)(v503 + 8 * v502++) = 0;
    }
    while (v502 < v501);
  }
  v513 = *(_QWORD *)v921 << 32;
  sub_20F5AC4C0(a1 + 2416, (uint64_t *)(a1 + 8872), v922[0] | ((unint64_t)v921[0] << 32));
  sub_20F5ACA98(a1 + 3424, (uint64_t *)(a1 + 8872), v500 | *(_QWORD *)v922);
  sub_20F5AD134(a1 + 4432, (uint64_t *)(a1 + 8872), v475 | *(_QWORD *)v922);
  sub_20F5AD134(a1 + 5440, (uint64_t *)(a1 + 8872), v438 | *(_QWORD *)v922);
  sub_20F5AD788(a1 + 6448, (uint64_t *)(a1 + 8872), v940 | *(_QWORD *)v922);
  v514 = *(unsigned int *)(a1 + 268);
  if ((_DWORD)v514)
  {
    v515 = 0;
    v516 = *(_QWORD *)(a1 + 376);
    do
    {
      v517 = *(_QWORD *)(v516 + 8 * v515);
      if (v517)
      {
        v518 = *(_QWORD *)(a1 + 304);
        v519 = *(_QWORD *)(a1 + 312);
        v520 = *(_QWORD *)(a1 + 336);
        v521 = 16 * v517;
        v522 = (uint64_t *)(*(_QWORD *)(a1 + 344) + 16 * (*(_DWORD *)(a1 + 368) * v515) + 8);
        do
        {
          v524 = ((v519 - v518) << 6) - 1;
          if (v519 == v518)
            v524 = 0;
          v525 = *(_QWORD *)(a1 + 328) + v520;
          if (v524 == v525)
          {
            sub_20EDB36DC(a1 + 296);
            v518 = *(_QWORD *)(a1 + 304);
            v519 = *(_QWORD *)(a1 + 312);
            v525 = *(_QWORD *)(a1 + 336) + *(_QWORD *)(a1 + 328);
          }
          v523 = *v522;
          v522 += 2;
          *(_QWORD *)(*(_QWORD *)(v518 + ((v525 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v525 & 0x1FF)) = v523;
          v520 = *(_QWORD *)(a1 + 336) + 1;
          *(_QWORD *)(a1 + 336) = v520;
          v521 -= 16;
        }
        while (v521);
        v516 = *(_QWORD *)(a1 + 376);
        v514 = *(unsigned int *)(a1 + 268);
      }
      *(_QWORD *)(v516 + 8 * v515++) = 0;
    }
    while (v515 < v514);
  }
  sub_20F5ADDB8(a1 + 1264, (uint64_t *)(a1 + 8872), v926[0] | ((unint64_t)v924[0] << 32));
  sub_20F5AE684(a1 + 2272, (uint64_t *)(a1 + 8872), v513 | *(_QWORD *)v926);
  sub_20F5AECB8(a1 + 3280, (uint64_t *)(a1 + 8872), v500 | *(_QWORD *)v926);
  sub_20F5AF400(a1 + 4288, (uint64_t *)(a1 + 8872), v475 | *(_QWORD *)v926);
  sub_20F5AF400(a1 + 5296, (uint64_t *)(a1 + 8872), v438 | *(_QWORD *)v926);
  sub_20F5AFB00(a1 + 6304, (uint64_t *)(a1 + 8872), v940 | *(_QWORD *)v926);
  sub_20F5AAFC4(a1 + 112, (uint64_t *)(a1 + 8872), 0);
  sub_20F5B019C(a1 + 1120, (uint64_t *)(a1 + 8872), *(_QWORD *)v924 << 32);
  sub_20F5B08EC(a1 + 2128, (uint64_t *)(a1 + 8872), v513);
  sub_20F5B0F2C(a1 + 3136, (uint64_t *)(a1 + 8872), v500);
  sub_20F5AB76C(a1 + 4144, (uint64_t *)(a1 + 8872), v475);
  sub_20F5AB76C(a1 + 5152, (uint64_t *)(a1 + 8872), v438);
  sub_20F5ABE20(a1 + 6160, (uint64_t *)(a1 + 8872), v940);
  v526 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v527 = (unsigned int **)(a1 + 8920);
  sub_20F59867C(v526, v942, a1 + 8920);
  sub_20F596D48(v937, v920 + 48);
  v528 = 0;
  v529 = 0;
  v919 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  while (2)
  {
    v530 = v527[3 * v528];
    v941 = &v527[3 * v528];
    v941[1] = v530;
    v531 = &v937[3 * v528];
    v532 = (char *)*v531;
    v534 = (char **)(v531 + 1);
    v533 = v531[1];
    if (*v531 != v533)
    {
      v535 = v533 - (_QWORD)v532;
      v536 = (v533 - (uint64_t)v532) >> 2;
      v537 = &v527[3 * v528];
      v539 = v537[2];
      v538 = v537 + 2;
      *(_QWORD *)v932 = v538;
      if (v536 > v539 - v530)
      {
        if ((v535 & 0x8000000000000000) != 0)
LABEL_1007:
          sub_20E867F44();
        v540 = (unsigned int *)operator new(v535);
        *v941 = v540;
        v941[1] = v540;
        *v538 = &v540[v536];
        if (v530)
        {
          operator delete(v530);
          v536 = (uint64_t)&(*v534)[-*v531] >> 2;
        }
      }
      *(_QWORD *)v923 = v528;
      v541 = (uint64_t)&v919[3 * v528 + 941];
      v542 = *(_BYTE **)(v541 + 8);
      v927 = (char **)v541;
      v928 = (char **)(v541 + 8);
      v543 = *(char **)v541;
      v544 = (uint64_t)&v542[-*(_QWORD *)v541];
      v545 = v544 >> 2;
      v546 = v536 + (v544 >> 2);
      v547 = (char **)(v541 + 16);
      v925 = v529;
      if (v546 <= (uint64_t)(*(_QWORD *)(v541 + 16) - *(_QWORD *)v541) >> 2)
      {
        v550 = *(char **)(v541 + 8);
        v551 = *(char **)v541;
        v553 = (char **)(v541 + 8);
      }
      else
      {
        if (v546 >> 62)
          sub_20E867F44();
        v548 = 4 * v546;
        v549 = (char *)operator new(4 * v546);
        v550 = &v549[4 * v545];
        v551 = v550;
        if (v542 != v543)
        {
          v552 = v542 - v543 - 4;
          if (v552 < 0x2C)
          {
            v551 = &v549[4 * v545];
            goto LABEL_576;
          }
          v551 = &v549[4 * v545];
          if ((unint64_t)(&v542[-v544] - v549) < 0x20)
            goto LABEL_1015;
          v554 = (v552 >> 2) + 1;
          v555 = 4 * (v554 & 0x7FFFFFFFFFFFFFF8);
          v556 = &v542[-v555];
          v551 = &v550[-v555];
          v557 = &v549[4 * v545 - 16];
          v558 = (__int128 *)(v542 - 16);
          v559 = v554 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v560 = *v558;
            *((_OWORD *)v557 - 1) = *(v558 - 1);
            *(_OWORD *)v557 = v560;
            v557 -= 32;
            v558 -= 2;
            v559 -= 8;
          }
          while (v559);
          v542 = v556;
          if (v554 != (v554 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_1015:
            do
            {
LABEL_576:
              v561 = *((_DWORD *)v542 - 1);
              v542 -= 4;
              *((_DWORD *)v551 - 1) = v561;
              v551 -= 4;
            }
            while (v542 != v543);
          }
        }
        v562 = &v549[v548];
        v541 = (uint64_t)v927;
        v553 = v928;
        *v927 = v551;
        *v928 = v550;
        *v547 = v562;
        if (v543)
        {
          operator delete(v543);
          v551 = *v927;
          v550 = *v928;
        }
      }
      v563 = (char *)*v531;
      v944 = *v534;
      v565 = *(uint64_t **)v932;
      v564 = (uint64_t *)(v941 + 1);
      v566 = 0;
      if (v551 == v550)
        goto LABEL_587;
      do
      {
        if (*(_DWORD *)v551 > *(_DWORD *)v563)
        {
          v550 = v551;
          break;
        }
        v551 += 4;
        ++v566;
      }
      while (v551 != v550);
LABEL_587:
      while (2)
      {
        if (v563 == v944)
        {
          v529 = v925 | (*v941 != (unsigned int *)*v564);
          v527 = (unsigned int **)(a1 + 8920);
          v528 = *(_QWORD *)v923;
          goto LABEL_560;
        }
        if (v550 != *v553 && *(_DWORD *)v563 == *(_DWORD *)v550)
          goto LABEL_586;
        v568 = (char *)*v564;
        v569 = *v565;
        if (*v564 < (unint64_t)*v565)
        {
          *(_DWORD *)v568 = v566;
          v567 = (uint64_t)(v568 + 4);
          goto LABEL_585;
        }
        v570 = (char *)*v941;
        v571 = v568 - (char *)*v941;
        v572 = v571 >> 2;
        v573 = (v571 >> 2) + 1;
        if (v573 >> 62)
          goto LABEL_1007;
        v574 = v569 - (_QWORD)v570;
        if (v574 >> 1 > v573)
          v573 = v574 >> 1;
        if ((unint64_t)v574 >= 0x7FFFFFFFFFFFFFFCLL)
          v575 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v575 = v573;
        if (v575)
        {
          if (v575 >> 62)
            sub_20E877A38();
          v576 = operator new(4 * v575);
          v577 = (unsigned int *)&v576[4 * v572];
          *v577 = v566;
          v567 = (uint64_t)(v577 + 1);
          v578 = v568 - v570;
          if (v568 != v570)
          {
LABEL_600:
            v579 = v578 - 4;
            if (v579 < 0x2C)
            {
              v565 = *(uint64_t **)v932;
              goto LABEL_608;
            }
            v580 = v568 - &v576[v571];
            v565 = *(uint64_t **)v932;
            if (v580 < 0x20)
              goto LABEL_1016;
            v581 = (v579 >> 2) + 1;
            v582 = 4 * (v581 & 0x7FFFFFFFFFFFFFF8);
            v583 = &v568[-v582];
            v577 = (unsigned int *)((char *)v577 - v582);
            v584 = &v576[4 * v572 - 16];
            v585 = v568 - 16;
            v586 = v581 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v587 = *(_OWORD *)v585;
              *(v584 - 1) = *((_OWORD *)v585 - 1);
              *v584 = v587;
              v584 -= 2;
              v585 -= 32;
              v586 -= 8;
            }
            while (v586);
            v568 = v583;
            if (v581 != (v581 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_1016:
              do
              {
LABEL_608:
                v588 = *((_DWORD *)v568 - 1);
                v568 -= 4;
                *--v577 = v588;
              }
              while (v568 != v570);
            }
LABEL_609:
            *v941 = v577;
            v564 = (uint64_t *)(v941 + 1);
            v941[1] = (unsigned int *)v567;
            *v565 = (uint64_t)&v576[4 * v575];
            if (v570)
              operator delete(v570);
            v541 = (uint64_t)v927;
            v553 = v928;
LABEL_585:
            *v564 = v567;
            v550 = sub_20EDB3C7C((void **)v541, v550, v563);
            v563 += 4;
LABEL_586:
            v550 += 4;
            ++v566;
            continue;
          }
        }
        else
        {
          v576 = 0;
          v577 = (unsigned int *)(4 * v572);
          *(_DWORD *)(4 * v572) = v566;
          v567 = 4 * v572 + 4;
          v578 = v568 - v570;
          if (v568 != v570)
            goto LABEL_600;
        }
        break;
      }
      v565 = *(uint64_t **)v932;
      goto LABEL_609;
    }
LABEL_560:
    if (++v528 != 7)
      continue;
    break;
  }
  if ((v529 & 1) == 0)
    return 0;
  sub_20F5B194C((uint64_t)(v919 + 10), v527, (uint64_t)v527);
  v968 = 0;
  v966 = 0u;
  v967 = 0u;
  v964 = 0u;
  v965 = 0u;
  v962 = 0u;
  v963 = 0u;
  v960 = 0u;
  v961 = 0u;
  v958 = 0u;
  v959 = 0u;
  v589 = *(char **)(a1 + 8928);
  v590 = *(char **)(a1 + 8920);
  v591 = v589 - v590;
  if (v589 != v590)
  {
    if ((unint64_t)v591 < 0x7FFFFFFFFFFFFFFDLL)
    {
      v592 = (char *)operator new(2 * v591);
      *(_QWORD *)&v958 = v592;
      *((_QWORD *)&v958 + 1) = v592;
      *(_QWORD *)&v959 = &v592[8 * (v591 >> 2)];
      while (1)
      {
        while (1)
        {
          v594 = (6 * *(_DWORD *)v590);
          v595 = (char *)v958;
          if ((char *)v958 == v592 || *((_DWORD *)v592 - 1) != (_DWORD)v594)
            break;
          *((_DWORD *)v592 - 1) = v594 + 6;
          v590 += 4;
          if (v590 == v589)
            goto LABEL_651;
        }
        v596 = (v594 + 6);
        if ((unint64_t)v592 < (unint64_t)v959)
        {
          *(_QWORD *)v592 = v594 | (v596 << 32);
          v593 = (uint64_t)(v592 + 8);
          goto LABEL_617;
        }
        v597 = &v592[-v958];
        v598 = (uint64_t)&v592[-v958] >> 3;
        v599 = v598 + 1;
        if ((unint64_t)(v598 + 1) >> 61)
          goto LABEL_1011;
        v600 = v959 - v958;
        if ((uint64_t)(v959 - v958) >> 2 > v599)
          v599 = v600 >> 2;
        v601 = (unint64_t)v600 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v599;
        if (!v601)
          break;
        if (v601 >> 61)
LABEL_1009:
          sub_20E877A38();
        v602 = (char *)operator new(8 * v601);
        v603 = &v602[8 * v598];
        *(_QWORD *)v603 = v594 | (v596 << 32);
        v593 = (uint64_t)(v603 + 8);
        if (v595 == v592)
        {
LABEL_638:
          *(_QWORD *)&v958 = v603;
          *(_QWORD *)&v959 = &v602[8 * v601];
          if (v592)
            goto LABEL_639;
LABEL_617:
          *((_QWORD *)&v958 + 1) = v593;
          v592 = (char *)v593;
          v590 += 4;
          if (v590 == v589)
            goto LABEL_651;
        }
        else
        {
LABEL_632:
          if ((unint64_t)(v597 - 8) < 0x168)
          {
            v604 = v592;
            goto LABEL_634;
          }
          v606 = (v592 - 8 - v595) & 0xFFFFFFFFFFFFFFF8;
          if (&v597[(_QWORD)v602 - 8 - v606] > &v597[(_QWORD)v602 - 8])
          {
            v604 = v592;
            do
            {
LABEL_634:
              v605 = *((_QWORD *)v604 - 1);
              v604 -= 8;
              *((_QWORD *)v603 - 1) = v605;
              v603 -= 8;
            }
            while (v604 != v595);
            goto LABEL_635;
          }
          if (&v592[-v606 - 8] > v592 - 8)
          {
            v604 = v592;
            goto LABEL_634;
          }
          if ((unint64_t)(v595 - v602) < 0x20)
          {
            v604 = v592;
            goto LABEL_634;
          }
          v607 = ((unint64_t)(v597 - 8) >> 3) + 1;
          v608 = 8 * (v607 & 0x3FFFFFFFFFFFFFFCLL);
          v604 = &v592[-v608];
          v603 -= v608;
          v609 = &v602[8 * v598 - 16];
          v610 = v592 - 16;
          v611 = v607 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v612 = *(_OWORD *)v610;
            *((_OWORD *)v609 - 1) = *((_OWORD *)v610 - 1);
            *(_OWORD *)v609 = v612;
            v609 -= 32;
            v610 -= 32;
            v611 -= 4;
          }
          while (v611);
          if (v607 != (v607 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_634;
LABEL_635:
          v592 = (char *)v958;
          *(_QWORD *)&v958 = v603;
          *(_QWORD *)&v959 = &v602[8 * v601];
          if (!v592)
            goto LABEL_617;
LABEL_639:
          operator delete(v592);
          *((_QWORD *)&v958 + 1) = v593;
          v592 = (char *)v593;
          v590 += 4;
          if (v590 == v589)
          {
LABEL_651:
            v613 = (_DWORD *)v958;
            goto LABEL_653;
          }
        }
      }
      v602 = 0;
      v603 = (char *)(8 * v598);
      *(_QWORD *)(8 * v598) = v594 | (v596 << 32);
      v593 = 8 * v598 + 8;
      if (v595 != v592)
        goto LABEL_632;
      goto LABEL_638;
    }
LABEL_1011:
    sub_20E92CED8();
  }
  v613 = 0;
  v592 = 0;
LABEL_653:
  if (((v592 - (char *)v613) & 0x7FFFFFFF0) != 0)
  {
    v614 = ((unint64_t)(v592 - (char *)v613) >> 3);
    v617 = *v613;
    v615 = v613 + 2;
    v616 = v617;
    v618 = v614 - 1;
    do
    {
      v616 += *v615 - *(v615 - 1);
      *v615 = v616;
      v615 += 2;
      --v618;
    }
    while (v618);
  }
  LODWORD(v946[0]) = 6 * (*((_DWORD *)v919 + 6) + ((*(_QWORD *)(a1 + 8928) - *(_QWORD *)(a1 + 8920)) >> 2));
  v619 = *(char **)(a1 + 8952);
  v620 = *(char **)(a1 + 8944);
  v621 = v619 - v620;
  v622 = (v619 - v620) >> 2;
  v623 = (char *)*((_QWORD *)&v959 + 1);
  if (v622 <= (uint64_t)(*((_QWORD *)&v960 + 1) - *((_QWORD *)&v959 + 1)) >> 3)
  {
    v628 = (char *)v960;
  }
  else
  {
    if (v621 > 0x7FFFFFFFFFFFFFFCLL)
      goto LABEL_1011;
    v624 = (char *)v960;
    v625 = (char *)operator new(2 * v621);
    v626 = &v625[8 * v622];
    v627 = v624 - v623;
    v628 = &v625[(v624 - v623) & 0xFFFFFFFFFFFFFFF8];
    v629 = v628;
    if (v624 != v623)
    {
      if ((unint64_t)(v627 - 8) < 0x58)
      {
        v629 = &v625[(v624 - v623) & 0xFFFFFFFFFFFFFFF8];
        goto LABEL_666;
      }
      v629 = &v625[(v624 - v623) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v624 - &v625[v627 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
        goto LABEL_1017;
      v630 = v627 >> 3;
      v631 = ((unint64_t)(v627 - 8) >> 3) + 1;
      v632 = 8 * (v631 & 0x3FFFFFFFFFFFFFFCLL);
      v633 = &v624[-v632];
      v629 = &v628[-v632];
      v634 = &v625[8 * v630 - 16];
      v635 = v624 - 16;
      v636 = v631 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v637 = *(_OWORD *)v635;
        *((_OWORD *)v634 - 1) = *((_OWORD *)v635 - 1);
        *(_OWORD *)v634 = v637;
        v634 -= 32;
        v635 -= 32;
        v636 -= 4;
      }
      while (v636);
      v624 = v633;
      if (v631 != (v631 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_1017:
        do
        {
LABEL_666:
          v638 = *((_QWORD *)v624 - 1);
          v624 -= 8;
          *((_QWORD *)v629 - 1) = v638;
          v629 -= 8;
        }
        while (v624 != v623);
      }
    }
    *((_QWORD *)&v959 + 1) = v629;
    *(_QWORD *)&v960 = v628;
    *((_QWORD *)&v960 + 1) = v626;
    if (v623)
    {
      operator delete(v623);
      v620 = *(char **)(a1 + 8944);
      v619 = *(char **)(a1 + 8952);
    }
    v623 = v629;
  }
  if (v620 == v619)
    goto LABEL_708;
  while (2)
  {
    while (2)
    {
      while (1)
      {
        v640 = (9 * *(_DWORD *)v620);
        v641 = (char *)*((_QWORD *)&v959 + 1);
        if (*((char **)&v959 + 1) == v628 || *((_DWORD *)v628 - 1) != (_DWORD)v640)
          break;
        *((_DWORD *)v628 - 1) = v640 + 9;
        v620 += 4;
        if (v620 == v619)
          goto LABEL_707;
      }
      v642 = (v640 + 9);
      if ((unint64_t)v628 < *((_QWORD *)&v960 + 1))
      {
        *(_QWORD *)v628 = v640 | (v642 << 32);
        v639 = (uint64_t)(v628 + 8);
        goto LABEL_673;
      }
      v643 = &v628[-*((_QWORD *)&v959 + 1)];
      v644 = (uint64_t)&v628[-*((_QWORD *)&v959 + 1)] >> 3;
      v645 = v644 + 1;
      if ((unint64_t)(v644 + 1) >> 61)
        goto LABEL_1011;
      v646 = *((_QWORD *)&v960 + 1) - *((_QWORD *)&v959 + 1);
      if ((uint64_t)(*((_QWORD *)&v960 + 1) - *((_QWORD *)&v959 + 1)) >> 2 > v645)
        v645 = v646 >> 2;
      if ((unint64_t)v646 >= 0x7FFFFFFFFFFFFFF8)
        v647 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v647 = v645;
      if (v647)
      {
        if (v647 >> 61)
          goto LABEL_1009;
        v648 = (char *)operator new(8 * v647);
        v649 = &v648[8 * v644];
        *(_QWORD *)v649 = v640 | (v642 << 32);
        v639 = (uint64_t)(v649 + 8);
        if (v641 != v628)
        {
LABEL_688:
          if ((unint64_t)(v643 - 8) < 0x168)
          {
            v650 = v628;
            goto LABEL_690;
          }
          v652 = (v628 - 8 - v641) & 0xFFFFFFFFFFFFFFF8;
          if (&v643[(_QWORD)v648 - 8 - v652] > &v643[(_QWORD)v648 - 8])
          {
            v650 = v628;
            goto LABEL_690;
          }
          if (&v628[-v652 - 8] > v628 - 8)
          {
            v650 = v628;
            goto LABEL_690;
          }
          if ((unint64_t)(v641 - v648) < 0x20)
          {
            v650 = v628;
            goto LABEL_690;
          }
          v653 = ((unint64_t)(v643 - 8) >> 3) + 1;
          v654 = 8 * (v653 & 0x3FFFFFFFFFFFFFFCLL);
          v650 = &v628[-v654];
          v649 -= v654;
          v655 = &v648[8 * v644 - 16];
          v656 = v628 - 16;
          v657 = v653 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v658 = *(_OWORD *)v656;
            *((_OWORD *)v655 - 1) = *((_OWORD *)v656 - 1);
            *(_OWORD *)v655 = v658;
            v655 -= 32;
            v656 -= 32;
            v657 -= 4;
          }
          while (v657);
          if (v653 != (v653 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_690:
              v651 = *((_QWORD *)v650 - 1);
              v650 -= 8;
              *((_QWORD *)v649 - 1) = v651;
              v649 -= 8;
            }
            while (v650 != v641);
          }
          v628 = (char *)*((_QWORD *)&v959 + 1);
          *((_QWORD *)&v959 + 1) = v649;
          *((_QWORD *)&v960 + 1) = &v648[8 * v647];
          if (v628)
            goto LABEL_695;
LABEL_673:
          *(_QWORD *)&v960 = v639;
          v628 = (char *)v639;
          v620 += 4;
          if (v620 == v619)
            goto LABEL_707;
          continue;
        }
      }
      else
      {
        v648 = 0;
        v649 = (char *)(8 * v644);
        *(_QWORD *)(8 * v644) = v640 | (v642 << 32);
        v639 = 8 * v644 + 8;
        if (v641 != v628)
          goto LABEL_688;
      }
      break;
    }
    *((_QWORD *)&v959 + 1) = v649;
    *((_QWORD *)&v960 + 1) = &v648[8 * v647];
    if (!v628)
      goto LABEL_673;
LABEL_695:
    operator delete(v628);
    *(_QWORD *)&v960 = v639;
    v628 = (char *)v639;
    v620 += 4;
    if (v620 != v619)
      continue;
    break;
  }
LABEL_707:
  v623 = (char *)*((_QWORD *)&v959 + 1);
LABEL_708:
  if (((v628 - v623) & 0x7FFFFFFF0) != 0)
  {
    v659 = ((unint64_t)(v628 - v623) >> 3);
    v662 = *(_DWORD *)v623;
    v661 = v623 + 8;
    v660 = v662;
    v663 = v659 - 1;
    do
    {
      v660 += *v661 - *(v661 - 1);
      *v661 = v660;
      v661 += 2;
      --v663;
    }
    while (v663);
  }
  HIDWORD(v946[0]) = 9 * (*((_DWORD *)v919 + 7) + ((*(_QWORD *)(a1 + 8952) - *(_QWORD *)(a1 + 8944)) >> 2));
  v664 = *(unsigned int **)(a1 + 8976);
  v665 = *(unsigned int **)(a1 + 8968);
  v666 = (char *)v664 - (char *)v665;
  v667 = v664 - v665;
  v668 = (char *)v961;
  if (v667 <= (uint64_t)(v962 - v961) >> 3)
  {
    v673 = (char *)*((_QWORD *)&v961 + 1);
    goto LABEL_725;
  }
  if (v666 > 0x7FFFFFFFFFFFFFFCLL)
    goto LABEL_1011;
  v669 = (char *)*((_QWORD *)&v961 + 1);
  v670 = (char *)operator new(2 * v666);
  v671 = &v670[8 * v667];
  v672 = v669 - v668;
  v673 = &v670[(v669 - v668) & 0xFFFFFFFFFFFFFFF8];
  v674 = v673;
  if (v669 != v668)
  {
    if ((unint64_t)(v672 - 8) < 0x58)
    {
      v674 = &v670[(v669 - v668) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_721;
    }
    v674 = &v670[(v669 - v668) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v669[-(v672 & 0xFFFFFFFFFFFFFFF8)] - v670) < 0x20)
      goto LABEL_1018;
    v675 = v672 >> 3;
    v676 = ((unint64_t)(v672 - 8) >> 3) + 1;
    v677 = 8 * (v676 & 0x3FFFFFFFFFFFFFFCLL);
    v678 = &v669[-v677];
    v674 = &v673[-v677];
    v679 = &v670[8 * v675 - 16];
    v680 = v669 - 16;
    v681 = v676 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v682 = *(_OWORD *)v680;
      *((_OWORD *)v679 - 1) = *((_OWORD *)v680 - 1);
      *(_OWORD *)v679 = v682;
      v679 -= 32;
      v680 -= 32;
      v681 -= 4;
    }
    while (v681);
    v669 = v678;
    if (v676 != (v676 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1018:
      do
      {
LABEL_721:
        v683 = *((_QWORD *)v669 - 1);
        v669 -= 8;
        *((_QWORD *)v674 - 1) = v683;
        v674 -= 8;
      }
      while (v669 != v668);
    }
  }
  *(_QWORD *)&v961 = v674;
  *((_QWORD *)&v961 + 1) = v673;
  *(_QWORD *)&v962 = v671;
  if (v668)
  {
    operator delete(v668);
    v665 = *(unsigned int **)(a1 + 8968);
    v664 = *(unsigned int **)(a1 + 8976);
  }
  v668 = v674;
LABEL_725:
  if (v665 == v664)
    goto LABEL_763;
  while (2)
  {
    while (2)
    {
      while (1)
      {
        v685 = *v665;
        v686 = (char *)v961;
        if ((char *)v961 == v673 || *((_DWORD *)v673 - 1) != (_DWORD)v685)
          break;
        *((_DWORD *)v673 - 1) = v685 + 1;
        if (++v665 == v664)
          goto LABEL_762;
      }
      v687 = (v685 + 1);
      if ((unint64_t)v673 < (unint64_t)v962)
      {
        *(_QWORD *)v673 = v685 | (v687 << 32);
        v684 = (uint64_t)(v673 + 8);
        goto LABEL_728;
      }
      v688 = &v673[-v961];
      v689 = (uint64_t)&v673[-v961] >> 3;
      v690 = v689 + 1;
      if ((unint64_t)(v689 + 1) >> 61)
        goto LABEL_1011;
      v691 = v962 - v961;
      if ((uint64_t)(v962 - v961) >> 2 > v690)
        v690 = v691 >> 2;
      v692 = (unint64_t)v691 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v690;
      if (v692)
      {
        if (v692 >> 61)
          goto LABEL_1009;
        v693 = (char *)operator new(8 * v692);
        v694 = &v693[8 * v689];
        *(_QWORD *)v694 = v685 | (v687 << 32);
        v684 = (uint64_t)(v694 + 8);
        if (v686 != v673)
        {
LABEL_743:
          if ((unint64_t)(v688 - 8) < 0x168)
          {
            v695 = v673;
            goto LABEL_745;
          }
          v697 = (v673 - 8 - v686) & 0xFFFFFFFFFFFFFFF8;
          if (&v688[(_QWORD)v693 - 8 - v697] > &v688[(_QWORD)v693 - 8])
          {
            v695 = v673;
            goto LABEL_745;
          }
          if (&v673[-v697 - 8] > v673 - 8)
          {
            v695 = v673;
            goto LABEL_745;
          }
          if ((unint64_t)(v686 - v693) < 0x20)
          {
            v695 = v673;
            goto LABEL_745;
          }
          v698 = ((unint64_t)(v688 - 8) >> 3) + 1;
          v699 = 8 * (v698 & 0x3FFFFFFFFFFFFFFCLL);
          v695 = &v673[-v699];
          v694 -= v699;
          v700 = &v693[8 * v689 - 16];
          v701 = v673 - 16;
          v702 = v698 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v703 = *(_OWORD *)v701;
            *((_OWORD *)v700 - 1) = *((_OWORD *)v701 - 1);
            *(_OWORD *)v700 = v703;
            v700 -= 32;
            v701 -= 32;
            v702 -= 4;
          }
          while (v702);
          if (v698 != (v698 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_745:
              v696 = *((_QWORD *)v695 - 1);
              v695 -= 8;
              *((_QWORD *)v694 - 1) = v696;
              v694 -= 8;
            }
            while (v695 != v686);
          }
          v673 = (char *)v961;
          *(_QWORD *)&v961 = v694;
          *(_QWORD *)&v962 = &v693[8 * v692];
          if (v673)
            goto LABEL_750;
LABEL_728:
          *((_QWORD *)&v961 + 1) = v684;
          v673 = (char *)v684;
          if (++v665 == v664)
            goto LABEL_762;
          continue;
        }
      }
      else
      {
        v693 = 0;
        v694 = (char *)(8 * v689);
        *(_QWORD *)(8 * v689) = v685 | (v687 << 32);
        v684 = 8 * v689 + 8;
        if (v686 != v673)
          goto LABEL_743;
      }
      break;
    }
    *(_QWORD *)&v961 = v694;
    *(_QWORD *)&v962 = &v693[8 * v692];
    if (!v673)
      goto LABEL_728;
LABEL_750:
    operator delete(v673);
    *((_QWORD *)&v961 + 1) = v684;
    v673 = (char *)v684;
    if (++v665 != v664)
      continue;
    break;
  }
LABEL_762:
  v668 = (char *)v961;
LABEL_763:
  if (((v673 - v668) & 0x7FFFFFFF0) != 0)
  {
    v704 = ((unint64_t)(v673 - v668) >> 3);
    v707 = *(_DWORD *)v668;
    v706 = v668 + 8;
    v705 = v707;
    v708 = v704 - 1;
    do
    {
      v705 += *v706 - *(v706 - 1);
      *v706 = v705;
      v706 += 2;
      --v708;
    }
    while (v708);
  }
  LODWORD(v946[1]) = *((_DWORD *)v919 + 8) + ((*(_QWORD *)(a1 + 8976) - *(_QWORD *)(a1 + 8968)) >> 2);
  v709 = *(char **)(a1 + 9000);
  v710 = *(char **)(a1 + 8992);
  v711 = v709 - v710;
  v712 = (v709 - v710) >> 2;
  v713 = (char *)*((_QWORD *)&v962 + 1);
  if (v712 <= (uint64_t)(*((_QWORD *)&v963 + 1) - *((_QWORD *)&v962 + 1)) >> 3)
  {
    v718 = (char *)v963;
    goto LABEL_780;
  }
  if (v711 > 0x7FFFFFFFFFFFFFFCLL)
    goto LABEL_1011;
  v714 = (char *)v963;
  v715 = (char *)operator new(2 * v711);
  v716 = &v715[8 * v712];
  v717 = v714 - v713;
  v718 = &v715[(v714 - v713) & 0xFFFFFFFFFFFFFFF8];
  v719 = v718;
  if (v714 != v713)
  {
    if ((unint64_t)(v717 - 8) < 0x58)
    {
      v719 = &v715[(v714 - v713) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_776;
    }
    v719 = &v715[(v714 - v713) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v714[-(v717 & 0xFFFFFFFFFFFFFFF8)] - v715) < 0x20)
      goto LABEL_1019;
    v720 = v717 >> 3;
    v721 = ((unint64_t)(v717 - 8) >> 3) + 1;
    v722 = 8 * (v721 & 0x3FFFFFFFFFFFFFFCLL);
    v723 = &v714[-v722];
    v719 = &v718[-v722];
    v724 = &v715[8 * v720 - 16];
    v725 = v714 - 16;
    v726 = v721 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v727 = *(_OWORD *)v725;
      *((_OWORD *)v724 - 1) = *((_OWORD *)v725 - 1);
      *(_OWORD *)v724 = v727;
      v724 -= 32;
      v725 -= 32;
      v726 -= 4;
    }
    while (v726);
    v714 = v723;
    if (v721 != (v721 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1019:
      do
      {
LABEL_776:
        v728 = *((_QWORD *)v714 - 1);
        v714 -= 8;
        *((_QWORD *)v719 - 1) = v728;
        v719 -= 8;
      }
      while (v714 != v713);
    }
  }
  *((_QWORD *)&v962 + 1) = v719;
  *(_QWORD *)&v963 = v718;
  *((_QWORD *)&v963 + 1) = v716;
  if (v713)
  {
    operator delete(v713);
    v710 = *(char **)(a1 + 8992);
    v709 = *(char **)(a1 + 9000);
  }
  v713 = v719;
LABEL_780:
  if (v710 == v709)
    goto LABEL_818;
  while (2)
  {
    while (2)
    {
      while (1)
      {
        v730 = (6 * *(_DWORD *)v710);
        v731 = (char *)*((_QWORD *)&v962 + 1);
        if (*((char **)&v962 + 1) == v718 || *((_DWORD *)v718 - 1) != (_DWORD)v730)
          break;
        *((_DWORD *)v718 - 1) = v730 + 6;
        v710 += 4;
        if (v710 == v709)
          goto LABEL_817;
      }
      v732 = (v730 + 6);
      if ((unint64_t)v718 < *((_QWORD *)&v963 + 1))
      {
        *(_QWORD *)v718 = v730 | (v732 << 32);
        v729 = (uint64_t)(v718 + 8);
        goto LABEL_783;
      }
      v733 = &v718[-*((_QWORD *)&v962 + 1)];
      v734 = (uint64_t)&v718[-*((_QWORD *)&v962 + 1)] >> 3;
      v735 = v734 + 1;
      if ((unint64_t)(v734 + 1) >> 61)
        goto LABEL_1011;
      v736 = *((_QWORD *)&v963 + 1) - *((_QWORD *)&v962 + 1);
      if ((uint64_t)(*((_QWORD *)&v963 + 1) - *((_QWORD *)&v962 + 1)) >> 2 > v735)
        v735 = v736 >> 2;
      v737 = (unint64_t)v736 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v735;
      if (v737)
      {
        if (v737 >> 61)
          goto LABEL_1009;
        v738 = (char *)operator new(8 * v737);
        v739 = &v738[8 * v734];
        *(_QWORD *)v739 = v730 | (v732 << 32);
        v729 = (uint64_t)(v739 + 8);
        if (v731 != v718)
        {
LABEL_798:
          if ((unint64_t)(v733 - 8) < 0x168)
          {
            v740 = v718;
            goto LABEL_800;
          }
          v742 = (v718 - 8 - v731) & 0xFFFFFFFFFFFFFFF8;
          if (&v733[(_QWORD)v738 - 8 - v742] > &v733[(_QWORD)v738 - 8])
          {
            v740 = v718;
            goto LABEL_800;
          }
          if (&v718[-v742 - 8] > v718 - 8)
          {
            v740 = v718;
            goto LABEL_800;
          }
          if ((unint64_t)(v731 - v738) < 0x20)
          {
            v740 = v718;
            goto LABEL_800;
          }
          v743 = ((unint64_t)(v733 - 8) >> 3) + 1;
          v744 = 8 * (v743 & 0x3FFFFFFFFFFFFFFCLL);
          v740 = &v718[-v744];
          v739 -= v744;
          v745 = &v738[8 * v734 - 16];
          v746 = v718 - 16;
          v747 = v743 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v748 = *(_OWORD *)v746;
            *((_OWORD *)v745 - 1) = *((_OWORD *)v746 - 1);
            *(_OWORD *)v745 = v748;
            v745 -= 32;
            v746 -= 32;
            v747 -= 4;
          }
          while (v747);
          if (v743 != (v743 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_800:
              v741 = *((_QWORD *)v740 - 1);
              v740 -= 8;
              *((_QWORD *)v739 - 1) = v741;
              v739 -= 8;
            }
            while (v740 != v731);
          }
          v718 = (char *)*((_QWORD *)&v962 + 1);
          *((_QWORD *)&v962 + 1) = v739;
          *((_QWORD *)&v963 + 1) = &v738[8 * v737];
          if (v718)
            goto LABEL_805;
LABEL_783:
          *(_QWORD *)&v963 = v729;
          v718 = (char *)v729;
          v710 += 4;
          if (v710 == v709)
            goto LABEL_817;
          continue;
        }
      }
      else
      {
        v738 = 0;
        v739 = (char *)(8 * v734);
        *(_QWORD *)(8 * v734) = v730 | (v732 << 32);
        v729 = 8 * v734 + 8;
        if (v731 != v718)
          goto LABEL_798;
      }
      break;
    }
    *((_QWORD *)&v962 + 1) = v739;
    *((_QWORD *)&v963 + 1) = &v738[8 * v737];
    if (!v718)
      goto LABEL_783;
LABEL_805:
    operator delete(v718);
    *(_QWORD *)&v963 = v729;
    v718 = (char *)v729;
    v710 += 4;
    if (v710 != v709)
      continue;
    break;
  }
LABEL_817:
  v713 = (char *)*((_QWORD *)&v962 + 1);
LABEL_818:
  if (((v718 - v713) & 0x7FFFFFFF0) != 0)
  {
    v749 = ((unint64_t)(v718 - v713) >> 3);
    v752 = *(_DWORD *)v713;
    v751 = v713 + 8;
    v750 = v752;
    v753 = v749 - 1;
    do
    {
      v750 += *v751 - *(v751 - 1);
      *v751 = v750;
      v751 += 2;
      --v753;
    }
    while (v753);
  }
  HIDWORD(v946[1]) = 6 * (*((_DWORD *)v919 + 9) + ((*(_QWORD *)(a1 + 9000) - *(_QWORD *)(a1 + 8992)) >> 2));
  v754 = *(char **)(a1 + 9024);
  v755 = *(char **)(a1 + 9016);
  v756 = v754 - v755;
  v757 = (v754 - v755) >> 2;
  v758 = (char *)v964;
  if (v757 <= (uint64_t)(v965 - v964) >> 3)
  {
    v763 = (char *)*((_QWORD *)&v964 + 1);
    goto LABEL_835;
  }
  if (v756 > 0x7FFFFFFFFFFFFFFCLL)
    goto LABEL_1011;
  v759 = (char *)*((_QWORD *)&v964 + 1);
  v760 = (char *)operator new(2 * v756);
  v761 = &v760[8 * v757];
  v762 = v759 - v758;
  v763 = &v760[(v759 - v758) & 0xFFFFFFFFFFFFFFF8];
  v764 = v763;
  if (v759 != v758)
  {
    if ((unint64_t)(v762 - 8) < 0x58)
    {
      v764 = &v760[(v759 - v758) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_831;
    }
    v764 = &v760[(v759 - v758) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(v759 - &v760[v762 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
      goto LABEL_1020;
    v765 = v762 >> 3;
    v766 = ((unint64_t)(v762 - 8) >> 3) + 1;
    v767 = 8 * (v766 & 0x3FFFFFFFFFFFFFFCLL);
    v768 = &v759[-v767];
    v764 = &v763[-v767];
    v769 = &v760[8 * v765 - 16];
    v770 = v759 - 16;
    v771 = v766 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v772 = *(_OWORD *)v770;
      *((_OWORD *)v769 - 1) = *((_OWORD *)v770 - 1);
      *(_OWORD *)v769 = v772;
      v769 -= 32;
      v770 -= 32;
      v771 -= 4;
    }
    while (v771);
    v759 = v768;
    if (v766 != (v766 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1020:
      do
      {
LABEL_831:
        v773 = *((_QWORD *)v759 - 1);
        v759 -= 8;
        *((_QWORD *)v764 - 1) = v773;
        v764 -= 8;
      }
      while (v759 != v758);
    }
  }
  *(_QWORD *)&v964 = v764;
  *((_QWORD *)&v964 + 1) = v763;
  *(_QWORD *)&v965 = v761;
  if (v758)
  {
    operator delete(v758);
    v755 = *(char **)(a1 + 9016);
    v754 = *(char **)(a1 + 9024);
  }
  v758 = v764;
LABEL_835:
  if (v755 == v754)
    goto LABEL_873;
  while (2)
  {
    while (2)
    {
      while (1)
      {
        v775 = (4 * *(_DWORD *)v755);
        v776 = (char *)v964;
        if ((char *)v964 == v763 || *((_DWORD *)v763 - 1) != (_DWORD)v775)
          break;
        *((_DWORD *)v763 - 1) = v775 + 4;
        v755 += 4;
        if (v755 == v754)
          goto LABEL_872;
      }
      v777 = (v775 + 4);
      if ((unint64_t)v763 < (unint64_t)v965)
      {
        *(_QWORD *)v763 = v775 | (v777 << 32);
        v774 = (uint64_t)(v763 + 8);
        goto LABEL_838;
      }
      v778 = &v763[-v964];
      v779 = (uint64_t)&v763[-v964] >> 3;
      v780 = v779 + 1;
      if ((unint64_t)(v779 + 1) >> 61)
        goto LABEL_1011;
      v781 = v965 - v964;
      if ((uint64_t)(v965 - v964) >> 2 > v780)
        v780 = v781 >> 2;
      v782 = (unint64_t)v781 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v780;
      if (v782)
      {
        if (v782 >> 61)
          goto LABEL_1009;
        v783 = (char *)operator new(8 * v782);
        v784 = &v783[8 * v779];
        *(_QWORD *)v784 = v775 | (v777 << 32);
        v774 = (uint64_t)(v784 + 8);
        if (v776 != v763)
        {
LABEL_853:
          if ((unint64_t)(v778 - 8) < 0x168)
          {
            v785 = v763;
            goto LABEL_855;
          }
          v787 = (v763 - 8 - v776) & 0xFFFFFFFFFFFFFFF8;
          if (&v778[(_QWORD)v783 - 8 - v787] > &v778[(_QWORD)v783 - 8])
          {
            v785 = v763;
            goto LABEL_855;
          }
          if (&v763[-v787 - 8] > v763 - 8)
          {
            v785 = v763;
            goto LABEL_855;
          }
          if ((unint64_t)(v776 - v783) < 0x20)
          {
            v785 = v763;
            goto LABEL_855;
          }
          v788 = ((unint64_t)(v778 - 8) >> 3) + 1;
          v789 = 8 * (v788 & 0x3FFFFFFFFFFFFFFCLL);
          v785 = &v763[-v789];
          v784 -= v789;
          v790 = &v783[8 * v779 - 16];
          v791 = v763 - 16;
          v792 = v788 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v793 = *(_OWORD *)v791;
            *((_OWORD *)v790 - 1) = *((_OWORD *)v791 - 1);
            *(_OWORD *)v790 = v793;
            v790 -= 32;
            v791 -= 32;
            v792 -= 4;
          }
          while (v792);
          if (v788 != (v788 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_855:
              v786 = *((_QWORD *)v785 - 1);
              v785 -= 8;
              *((_QWORD *)v784 - 1) = v786;
              v784 -= 8;
            }
            while (v785 != v776);
          }
          v763 = (char *)v964;
          *(_QWORD *)&v964 = v784;
          *(_QWORD *)&v965 = &v783[8 * v782];
          if (v763)
            goto LABEL_860;
LABEL_838:
          *((_QWORD *)&v964 + 1) = v774;
          v763 = (char *)v774;
          v755 += 4;
          if (v755 == v754)
            goto LABEL_872;
          continue;
        }
      }
      else
      {
        v783 = 0;
        v784 = (char *)(8 * v779);
        *(_QWORD *)(8 * v779) = v775 | (v777 << 32);
        v774 = 8 * v779 + 8;
        if (v776 != v763)
          goto LABEL_853;
      }
      break;
    }
    *(_QWORD *)&v964 = v784;
    *(_QWORD *)&v965 = &v783[8 * v782];
    if (!v763)
      goto LABEL_838;
LABEL_860:
    operator delete(v763);
    *((_QWORD *)&v964 + 1) = v774;
    v763 = (char *)v774;
    v755 += 4;
    if (v755 != v754)
      continue;
    break;
  }
LABEL_872:
  v758 = (char *)v964;
LABEL_873:
  if (((v763 - v758) & 0x7FFFFFFF0) != 0)
  {
    v794 = ((unint64_t)(v763 - v758) >> 3);
    v797 = *(_DWORD *)v758;
    v796 = v758 + 8;
    v795 = v797;
    v798 = v794 - 1;
    do
    {
      v795 += *v796 - *(v796 - 1);
      *v796 = v795;
      v796 += 2;
      --v798;
    }
    while (v798);
  }
  LODWORD(v947[0]) = (*(_DWORD *)(a1 + 9024) - *(_DWORD *)(a1 + 9016) + 4 * *((_DWORD *)v919 + 10)) & 0xFFFFFFFC;
  v799 = *(char **)(a1 + 9048);
  v800 = *(char **)(a1 + 9040);
  v801 = v799 - v800;
  v802 = (v799 - v800) >> 2;
  v803 = (char *)*((_QWORD *)&v965 + 1);
  if (v802 <= (uint64_t)(*((_QWORD *)&v966 + 1) - *((_QWORD *)&v965 + 1)) >> 3)
  {
    v808 = (char *)v966;
    goto LABEL_890;
  }
  if (v801 > 0x7FFFFFFFFFFFFFFCLL)
    goto LABEL_1011;
  v804 = (char *)v966;
  v805 = (char *)operator new(2 * v801);
  v806 = &v805[8 * v802];
  v807 = v804 - v803;
  v808 = &v805[(v804 - v803) & 0xFFFFFFFFFFFFFFF8];
  v809 = v808;
  if (v804 != v803)
  {
    if ((unint64_t)(v807 - 8) < 0x58)
    {
      v809 = &v805[(v804 - v803) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_886;
    }
    v809 = &v805[(v804 - v803) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v804[-(v807 & 0xFFFFFFFFFFFFFFF8)] - v805) < 0x20)
      goto LABEL_1021;
    v810 = v807 >> 3;
    v811 = ((unint64_t)(v807 - 8) >> 3) + 1;
    v812 = 8 * (v811 & 0x3FFFFFFFFFFFFFFCLL);
    v813 = &v804[-v812];
    v809 = &v808[-v812];
    v814 = &v805[8 * v810 - 16];
    v815 = v804 - 16;
    v816 = v811 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v817 = *(_OWORD *)v815;
      *((_OWORD *)v814 - 1) = *((_OWORD *)v815 - 1);
      *(_OWORD *)v814 = v817;
      v814 -= 32;
      v815 -= 32;
      v816 -= 4;
    }
    while (v816);
    v804 = v813;
    if (v811 != (v811 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1021:
      do
      {
LABEL_886:
        v818 = *((_QWORD *)v804 - 1);
        v804 -= 8;
        *((_QWORD *)v809 - 1) = v818;
        v809 -= 8;
      }
      while (v804 != v803);
    }
  }
  *((_QWORD *)&v965 + 1) = v809;
  *(_QWORD *)&v966 = v808;
  *((_QWORD *)&v966 + 1) = v806;
  if (v803)
  {
    operator delete(v803);
    v800 = *(char **)(a1 + 9040);
    v799 = *(char **)(a1 + 9048);
  }
  v803 = v809;
LABEL_890:
  if (v800 == v799)
    goto LABEL_928;
  while (2)
  {
    while (2)
    {
      while (1)
      {
        v820 = (4 * *(_DWORD *)v800);
        v821 = (char *)*((_QWORD *)&v965 + 1);
        if (*((char **)&v965 + 1) == v808 || *((_DWORD *)v808 - 1) != (_DWORD)v820)
          break;
        *((_DWORD *)v808 - 1) = v820 + 4;
        v800 += 4;
        if (v800 == v799)
          goto LABEL_927;
      }
      v822 = (v820 + 4);
      if ((unint64_t)v808 < *((_QWORD *)&v966 + 1))
      {
        *(_QWORD *)v808 = v820 | (v822 << 32);
        v819 = (uint64_t)(v808 + 8);
        goto LABEL_893;
      }
      v823 = &v808[-*((_QWORD *)&v965 + 1)];
      v824 = (uint64_t)&v808[-*((_QWORD *)&v965 + 1)] >> 3;
      v825 = v824 + 1;
      if ((unint64_t)(v824 + 1) >> 61)
        goto LABEL_1011;
      v826 = *((_QWORD *)&v966 + 1) - *((_QWORD *)&v965 + 1);
      if ((uint64_t)(*((_QWORD *)&v966 + 1) - *((_QWORD *)&v965 + 1)) >> 2 > v825)
        v825 = v826 >> 2;
      v827 = (unint64_t)v826 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v825;
      if (v827)
      {
        if (v827 >> 61)
          goto LABEL_1009;
        v828 = (char *)operator new(8 * v827);
        v829 = &v828[8 * v824];
        *(_QWORD *)v829 = v820 | (v822 << 32);
        v819 = (uint64_t)(v829 + 8);
        if (v821 != v808)
        {
LABEL_908:
          if ((unint64_t)(v823 - 8) < 0x168)
          {
            v830 = v808;
            goto LABEL_910;
          }
          v832 = (v808 - 8 - v821) & 0xFFFFFFFFFFFFFFF8;
          if (&v823[(_QWORD)v828 - 8 - v832] > &v823[(_QWORD)v828 - 8])
          {
            v830 = v808;
            goto LABEL_910;
          }
          if (&v808[-v832 - 8] > v808 - 8)
          {
            v830 = v808;
            goto LABEL_910;
          }
          if ((unint64_t)(v821 - v828) < 0x20)
          {
            v830 = v808;
            goto LABEL_910;
          }
          v833 = ((unint64_t)(v823 - 8) >> 3) + 1;
          v834 = 8 * (v833 & 0x3FFFFFFFFFFFFFFCLL);
          v830 = &v808[-v834];
          v829 -= v834;
          v835 = &v828[8 * v824 - 16];
          v836 = v808 - 16;
          v837 = v833 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v838 = *(_OWORD *)v836;
            *((_OWORD *)v835 - 1) = *((_OWORD *)v836 - 1);
            *(_OWORD *)v835 = v838;
            v835 -= 32;
            v836 -= 32;
            v837 -= 4;
          }
          while (v837);
          if (v833 != (v833 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_910:
              v831 = *((_QWORD *)v830 - 1);
              v830 -= 8;
              *((_QWORD *)v829 - 1) = v831;
              v829 -= 8;
            }
            while (v830 != v821);
          }
          v808 = (char *)*((_QWORD *)&v965 + 1);
          *((_QWORD *)&v965 + 1) = v829;
          *((_QWORD *)&v966 + 1) = &v828[8 * v827];
          if (v808)
            goto LABEL_915;
LABEL_893:
          *(_QWORD *)&v966 = v819;
          v808 = (char *)v819;
          v800 += 4;
          if (v800 == v799)
            goto LABEL_927;
          continue;
        }
      }
      else
      {
        v828 = 0;
        v829 = (char *)(8 * v824);
        *(_QWORD *)(8 * v824) = v820 | (v822 << 32);
        v819 = 8 * v824 + 8;
        if (v821 != v808)
          goto LABEL_908;
      }
      break;
    }
    *((_QWORD *)&v965 + 1) = v829;
    *((_QWORD *)&v966 + 1) = &v828[8 * v827];
    if (!v808)
      goto LABEL_893;
LABEL_915:
    operator delete(v808);
    *(_QWORD *)&v966 = v819;
    v808 = (char *)v819;
    v800 += 4;
    if (v800 != v799)
      continue;
    break;
  }
LABEL_927:
  v803 = (char *)*((_QWORD *)&v965 + 1);
LABEL_928:
  if (((v808 - v803) & 0x7FFFFFFF0) != 0)
  {
    v839 = ((unint64_t)(v808 - v803) >> 3);
    v842 = *(_DWORD *)v803;
    v841 = v803 + 8;
    v840 = v842;
    v843 = v839 - 1;
    do
    {
      v840 += *v841 - *(v841 - 1);
      *v841 = v840;
      v841 += 2;
      --v843;
    }
    while (v843);
  }
  HIDWORD(v947[0]) = (*(_DWORD *)(a1 + 9048) - *(_DWORD *)(a1 + 9040) + 4 * *((_DWORD *)v919 + 11)) & 0xFFFFFFFC;
  v844 = *(char **)(a1 + 9072);
  v845 = *(char **)(a1 + 9064);
  v846 = v844 - v845;
  v847 = (v844 - v845) >> 2;
  v848 = (char *)v967;
  if (v847 <= (uint64_t)&v968[-v967] >> 3)
  {
    v853 = (char *)*((_QWORD *)&v967 + 1);
    goto LABEL_945;
  }
  if (v846 > 0x7FFFFFFFFFFFFFFCLL)
    goto LABEL_1011;
  v849 = (char *)*((_QWORD *)&v967 + 1);
  v850 = (char *)operator new(2 * v846);
  v851 = &v850[8 * v847];
  v852 = v849 - v848;
  v853 = &v850[(v849 - v848) & 0xFFFFFFFFFFFFFFF8];
  v854 = v853;
  if (v849 != v848)
  {
    if ((unint64_t)(v852 - 8) < 0x58)
    {
      v854 = &v850[(v849 - v848) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_941;
    }
    v854 = &v850[(v849 - v848) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v849[-(v852 & 0xFFFFFFFFFFFFFFF8)] - v850) < 0x20)
      goto LABEL_1022;
    v855 = v852 >> 3;
    v856 = ((unint64_t)(v852 - 8) >> 3) + 1;
    v857 = 8 * (v856 & 0x3FFFFFFFFFFFFFFCLL);
    v858 = &v849[-v857];
    v854 = &v853[-v857];
    v859 = &v850[8 * v855 - 16];
    v860 = v849 - 16;
    v861 = v856 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v862 = *(_OWORD *)v860;
      *((_OWORD *)v859 - 1) = *((_OWORD *)v860 - 1);
      *(_OWORD *)v859 = v862;
      v859 -= 32;
      v860 -= 32;
      v861 -= 4;
    }
    while (v861);
    v849 = v858;
    if (v856 != (v856 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1022:
      do
      {
LABEL_941:
        v863 = *((_QWORD *)v849 - 1);
        v849 -= 8;
        *((_QWORD *)v854 - 1) = v863;
        v854 -= 8;
      }
      while (v849 != v848);
    }
  }
  *(_QWORD *)&v967 = v854;
  *((_QWORD *)&v967 + 1) = v853;
  v968 = v851;
  if (v848)
  {
    operator delete(v848);
    v845 = *(char **)(a1 + 9064);
    v844 = *(char **)(a1 + 9072);
  }
  v848 = v854;
LABEL_945:
  if (v845 == v844)
    goto LABEL_983;
  while (2)
  {
    while (2)
    {
      while (1)
      {
        v865 = (3 * *(_DWORD *)v845);
        v866 = (char *)v967;
        if ((char *)v967 == v853 || *((_DWORD *)v853 - 1) != (_DWORD)v865)
          break;
        *((_DWORD *)v853 - 1) = v865 + 3;
        v845 += 4;
        if (v845 == v844)
          goto LABEL_982;
      }
      v867 = (v865 + 3);
      if (v853 < v968)
      {
        *(_QWORD *)v853 = v865 | (v867 << 32);
        v864 = (uint64_t)(v853 + 8);
        goto LABEL_948;
      }
      v868 = &v853[-v967];
      v869 = (uint64_t)&v853[-v967] >> 3;
      v870 = v869 + 1;
      if ((unint64_t)(v869 + 1) >> 61)
        goto LABEL_1011;
      v871 = (uint64_t)&v968[-v967];
      if ((uint64_t)&v968[-v967] >> 2 > v870)
        v870 = v871 >> 2;
      if ((unint64_t)v871 >= 0x7FFFFFFFFFFFFFF8)
        v872 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v872 = v870;
      if (v872)
      {
        if (v872 >> 61)
          goto LABEL_1009;
        v873 = (char *)operator new(8 * v872);
        v874 = &v873[8 * v869];
        *(_QWORD *)v874 = v865 | (v867 << 32);
        v864 = (uint64_t)(v874 + 8);
        if (v866 != v853)
        {
LABEL_963:
          if ((unint64_t)(v868 - 8) < 0x168)
          {
            v875 = v853;
            goto LABEL_965;
          }
          v877 = (v853 - 8 - v866) & 0xFFFFFFFFFFFFFFF8;
          if (&v868[(_QWORD)v873 - 8 - v877] > &v868[(_QWORD)v873 - 8])
          {
            v875 = v853;
            goto LABEL_965;
          }
          if (&v853[-v877 - 8] > v853 - 8)
          {
            v875 = v853;
            goto LABEL_965;
          }
          if ((unint64_t)(v866 - v873) < 0x20)
          {
            v875 = v853;
            goto LABEL_965;
          }
          v878 = ((unint64_t)(v868 - 8) >> 3) + 1;
          v879 = 8 * (v878 & 0x3FFFFFFFFFFFFFFCLL);
          v875 = &v853[-v879];
          v874 -= v879;
          v880 = &v873[8 * v869 - 16];
          v881 = v853 - 16;
          v882 = v878 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v883 = *(_OWORD *)v881;
            *((_OWORD *)v880 - 1) = *((_OWORD *)v881 - 1);
            *(_OWORD *)v880 = v883;
            v880 -= 32;
            v881 -= 32;
            v882 -= 4;
          }
          while (v882);
          if (v878 != (v878 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_965:
              v876 = *((_QWORD *)v875 - 1);
              v875 -= 8;
              *((_QWORD *)v874 - 1) = v876;
              v874 -= 8;
            }
            while (v875 != v866);
          }
          v853 = (char *)v967;
          *(_QWORD *)&v967 = v874;
          v968 = &v873[8 * v872];
          if (v853)
            goto LABEL_970;
LABEL_948:
          *((_QWORD *)&v967 + 1) = v864;
          v853 = (char *)v864;
          v845 += 4;
          if (v845 == v844)
            goto LABEL_982;
          continue;
        }
      }
      else
      {
        v873 = 0;
        v874 = (char *)(8 * v869);
        *(_QWORD *)(8 * v869) = v865 | (v867 << 32);
        v864 = 8 * v869 + 8;
        if (v866 != v853)
          goto LABEL_963;
      }
      break;
    }
    *(_QWORD *)&v967 = v874;
    v968 = &v873[8 * v872];
    if (!v853)
      goto LABEL_948;
LABEL_970:
    operator delete(v853);
    *((_QWORD *)&v967 + 1) = v864;
    v853 = (char *)v864;
    v845 += 4;
    if (v845 != v844)
      continue;
    break;
  }
LABEL_982:
  v848 = (char *)v967;
LABEL_983:
  if (((v853 - v848) & 0x7FFFFFFF0) != 0)
  {
    v884 = ((unint64_t)(v853 - v848) >> 3);
    v887 = *(_DWORD *)v848;
    v886 = v848 + 8;
    v885 = v887;
    v888 = v884 - 1;
    do
    {
      v885 += *v886 - *(v886 - 1);
      *v886 = v885;
      v886 += 2;
      --v888;
    }
    while (v888);
  }
  LODWORD(v947[1]) = 3 * (*((_DWORD *)v919 + 12) + ((*(_QWORD *)(a1 + 9072) - *(_QWORD *)(a1 + 9064)) >> 2));
  v889 = (int)v946[0];
  v890 = HIDWORD(v946[0]);
  v892 = (int)v946[1];
  v891 = HIDWORD(v946[1]);
  v894 = (int)v947[0];
  v893 = HIDWORD(v947[0]);
  v895 = (HIDWORD(v946[0])
                      + LODWORD(v946[0])
                      + LODWORD(v946[1])
                      + HIDWORD(v946[1])
                      + LODWORD(v947[0])
                      + HIDWORD(v947[0])
                      + LODWORD(v947[1]));
  if (v895 <= *((_DWORD *)v919 + 2))
  {
    __dst = (void *)*v919;
    sub_20F5B6074(&v958, (uint64_t)v919, &__dst, (unsigned int *)v946);
    v902 = (void **)v919;
    *((_DWORD *)v919 + 4) = v895;
    if (v919[1] < v895)
    {
      if (*v919)
      {
        MEMORY[0x212BC6368](*v919, 0x1000C8000313F17);
        v902 = (void **)v919;
      }
      v903 = (8 * v895 + 31) & 0xFFFFFFFE0;
      *v902 = 0;
      v902[1] = (void *)(v903 >> 3);
      *v902 = operator new(v903, (std::align_val_t)0x20uLL);
    }
  }
  else
  {
    v945 = (int)v946[0];
    v896 = (int)v946[1];
    v897 = HIDWORD(v946[1]);
    v898 = (int)v947[0];
    v899 = HIDWORD(v947[0]);
    v900 = operator new((8* (HIDWORD(v946[0])+ LODWORD(v946[0])+ LODWORD(v946[1])+ HIDWORD(v946[1])+ LODWORD(v947[0])+ HIDWORD(v947[0])+ LODWORD(v947[1]))+ 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    __dst = v900;
    sub_20F5B6074(&v958, (uint64_t)v919, &__dst, (unsigned int *)v946);
    v901 = (void *)*v919;
    *v919 = v900;
    v919[1] = ((8 * v895 + 31) & 0xFFFFFFFE0uLL) >> 3;
    *((_DWORD *)v919 + 4) = v895;
    v893 = v899;
    v894 = v898;
    v891 = v897;
    v892 = v896;
    v889 = v945;
    if (v901)
      MEMORY[0x212BC6368](v901, 0x1000C8000313F17);
  }
  v904 = *((_DWORD *)v919 + 7);
  *((_DWORD *)v919 + 6) += (*(_QWORD *)(a1 + 8928) - *(_QWORD *)(a1 + 8920)) >> 2;
  *((_DWORD *)v919 + 7) = v904 + ((*(_QWORD *)(a1 + 8952) - *(_QWORD *)(a1 + 8944)) >> 2);
  v905 = *((_DWORD *)v919 + 12);
  v906 = *((_DWORD *)v919 + 13) + v889;
  *((_DWORD *)v919 + 14) = v906;
  v907 = *((_DWORD *)v919 + 9);
  *((_DWORD *)v919 + 8) += (*(_QWORD *)(a1 + 8976) - *(_QWORD *)(a1 + 8968)) >> 2;
  v908 = v906 + v890;
  *((_DWORD *)v919 + 15) = v908;
  *((_DWORD *)v919 + 9) = v907 + ((*(_QWORD *)(a1 + 9000) - *(_QWORD *)(a1 + 8992)) >> 2);
  v909 = v908 + v892;
  *((_DWORD *)v919 + 16) = v909;
  v910 = *((_DWORD *)v919 + 11);
  *((_DWORD *)v919 + 10) += (*(_QWORD *)(a1 + 9024) - *(_QWORD *)(a1 + 9016)) >> 2;
  v911 = v909 + v891;
  *((_DWORD *)v919 + 17) = v911;
  *((_DWORD *)v919 + 11) = v910 + ((*(_QWORD *)(a1 + 9048) - *(_QWORD *)(a1 + 9040)) >> 2);
  v912 = v911 + v894;
  *((_DWORD *)v919 + 18) = v912;
  *((_DWORD *)v919 + 12) = v905 + ((*(_QWORD *)(a1 + 9072) - *(_QWORD *)(a1 + 9064)) >> 2);
  *((_DWORD *)v919 + 19) = v912 + v893;
  if ((_QWORD)v967)
    operator delete((void *)v967);
  if (*((_QWORD *)&v965 + 1))
    operator delete(*((void **)&v965 + 1));
  if ((_QWORD)v964)
    operator delete((void *)v964);
  if (*((_QWORD *)&v962 + 1))
    operator delete(*((void **)&v962 + 1));
  if ((_QWORD)v961)
    operator delete((void *)v961);
  if (*((_QWORD *)&v959 + 1))
    operator delete(*((void **)&v959 + 1));
  v133 = (void *)v958;
  if ((_QWORD)v958)
LABEL_168:
    operator delete(v133);
  return 0;
}

void sub_20F5945A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F4FD380(v1 - 256);
  _Unwind_Resume(a1);
}

void sub_20F5945BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F4FD380(v1 - 256);
  _Unwind_Resume(a1);
}

void sub_20F5945D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  sub_20F4FD380(v17 - 256);
  sub_20F4FD380((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F5945EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F4FD380(v1 - 256);
  _Unwind_Resume(a1);
}

void sub_20F594600(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F4FD380(v1 - 256);
  _Unwind_Resume(a1);
}

void sub_20F594614(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F4FD380(v1 - 256);
  _Unwind_Resume(a1);
}

void sub_20F594628(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F4FD380(v1 - 256);
  _Unwind_Resume(a1);
}

void sub_20F59463C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F4FD380(v1 - 256);
  _Unwind_Resume(a1);
}

void sub_20F594650(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F4FD380(v1 - 256);
  _Unwind_Resume(a1);
}

void sub_20F594664(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F4FD380(v1 - 256);
  _Unwind_Resume(a1);
}

void sub_20F594678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20F4FD380((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F59468C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F4FD380(v1 - 256);
  _Unwind_Resume(a1);
}

uint64_t sub_20F5946A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t i;
  uint64_t v50;
  uint64_t v51;
  uint64_t j;
  uint64_t v53;
  uint64_t v54;
  uint64_t k;
  uint64_t v56;
  uint64_t v57;
  uint64_t m;
  uint64_t v59;
  uint64_t v60;
  uint64_t n;
  uint64_t v62;
  uint64_t v63;
  uint64_t ii;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int *v69;
  unint64_t v70;
  _BYTE *v71;
  unsigned int *v72;
  _BYTE *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  __int128 *v83;
  uint64_t v84;
  __int128 v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  char *v89;
  char *v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int *v93;
  char *v94;
  unsigned int v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _BYTE *v104;
  unsigned int *v105;
  int64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  _OWORD *v111;
  char *v112;
  uint64_t v113;
  __int128 v114;
  unsigned int v115;
  __n128 *v116;
  char *v117;
  __n128 *v118;
  uint64_t v119;
  const std::nothrow_t *v120;
  char *v121;
  BOOL v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int *v127;
  unint64_t v128;
  _BYTE *v129;
  unsigned int *v130;
  _BYTE *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  __int128 *v141;
  uint64_t v142;
  __int128 v143;
  int v144;
  uint64_t v145;
  unsigned int v146;
  char *v147;
  char *v148;
  unint64_t v149;
  unint64_t v150;
  unsigned int *v151;
  char *v152;
  unsigned int v153;
  char *v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  _BYTE *v162;
  unsigned int *v163;
  int64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  _OWORD *v169;
  char *v170;
  uint64_t v171;
  __int128 v172;
  unsigned int v173;
  __n128 *v174;
  char *v175;
  __n128 *v176;
  uint64_t v177;
  const std::nothrow_t *v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int *v184;
  unint64_t v185;
  _BYTE *v186;
  unsigned int *v187;
  _BYTE *v188;
  char *v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  __int128 *v198;
  uint64_t v199;
  __int128 v200;
  int v201;
  uint64_t v202;
  unsigned int v203;
  char *v204;
  char *v205;
  unint64_t v206;
  unint64_t v207;
  unsigned int *v208;
  char *v209;
  unsigned int v210;
  char *v211;
  unint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  _BYTE *v219;
  unsigned int *v220;
  int64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  _OWORD *v226;
  char *v227;
  uint64_t v228;
  __int128 v229;
  unsigned int v230;
  __n128 *v231;
  char *v232;
  __n128 *v233;
  uint64_t v234;
  const std::nothrow_t *v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int *v240;
  unsigned int *v241;
  unint64_t v242;
  _BYTE *v243;
  unsigned int *v244;
  _BYTE *v245;
  char *v246;
  uint64_t v247;
  char *v248;
  char *v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  char *v253;
  char *v254;
  __int128 *v255;
  uint64_t v256;
  __int128 v257;
  int v258;
  uint64_t v259;
  unsigned int v260;
  char *v261;
  char *v262;
  unint64_t v263;
  unint64_t v264;
  unsigned int *v265;
  char *v266;
  unsigned int v267;
  char *v268;
  unint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  _BYTE *v276;
  unsigned int *v277;
  int64_t v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  _OWORD *v283;
  char *v284;
  uint64_t v285;
  __int128 v286;
  unsigned int v287;
  __n128 *v288;
  char *v289;
  __n128 *v290;
  uint64_t v291;
  const std::nothrow_t *v292;
  char *v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  unsigned int *v297;
  unsigned int *v298;
  unint64_t v299;
  _BYTE *v300;
  unsigned int *v301;
  _BYTE *v302;
  char *v303;
  uint64_t v304;
  char *v305;
  char *v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  char *v310;
  char *v311;
  __int128 *v312;
  uint64_t v313;
  __int128 v314;
  int v315;
  uint64_t v316;
  unsigned int v317;
  char *v318;
  char *v319;
  unint64_t v320;
  unint64_t v321;
  unsigned int *v322;
  char *v323;
  unsigned int v324;
  char *v325;
  unint64_t v326;
  char *v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t v332;
  _BYTE *v333;
  unsigned int *v334;
  int64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  char *v339;
  _OWORD *v340;
  char *v341;
  uint64_t v342;
  __int128 v343;
  unsigned int v344;
  __n128 *v345;
  char *v346;
  __n128 *v347;
  uint64_t v348;
  const std::nothrow_t *v349;
  char *v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  unsigned int *v354;
  unsigned int *v355;
  unint64_t v356;
  _BYTE *v357;
  unsigned int *v358;
  _BYTE *v359;
  char *v360;
  uint64_t v361;
  char *v362;
  char *v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  char *v367;
  char *v368;
  __int128 *v369;
  uint64_t v370;
  __int128 v371;
  int v372;
  uint64_t v373;
  unsigned int v374;
  char *v375;
  char *v376;
  unint64_t v377;
  unint64_t v378;
  unsigned int *v379;
  char *v380;
  unsigned int v381;
  char *v382;
  unint64_t v383;
  char *v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  _BYTE *v390;
  unsigned int *v391;
  int64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  char *v396;
  _OWORD *v397;
  char *v398;
  uint64_t v399;
  __int128 v400;
  unsigned int v401;
  __n128 *v402;
  char *v403;
  __n128 *v404;
  uint64_t v405;
  const std::nothrow_t *v406;
  char *v407;
  char *v408;
  uint64_t v409;
  uint64_t v410;
  unsigned int *v411;
  unsigned int *v412;
  unint64_t v413;
  _BYTE *v414;
  unsigned int *v415;
  _BYTE *v416;
  char *v417;
  uint64_t v418;
  char *v419;
  char *v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  char *v424;
  char *v425;
  __int128 *v426;
  uint64_t v427;
  __int128 v428;
  int v429;
  uint64_t v430;
  unsigned int v431;
  char *v432;
  char *v433;
  unint64_t v434;
  unint64_t v435;
  unsigned int *v436;
  char *v437;
  unsigned int v438;
  char *v439;
  unint64_t v440;
  char *v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  uint64_t v445;
  unint64_t v446;
  _BYTE *v447;
  unsigned int *v448;
  int64_t v449;
  unint64_t v450;
  uint64_t v451;
  uint64_t v452;
  char *v453;
  _OWORD *v454;
  char *v455;
  uint64_t v456;
  __int128 v457;
  unsigned int v458;
  __n128 *v459;
  char *v460;
  __n128 *v461;
  uint64_t v462;
  const std::nothrow_t *v463;
  char *v464;
  char *v465;
  uint64_t v466;
  uint64_t v467;
  unsigned int *v468;
  unsigned int *v469;
  unint64_t v470;
  _BYTE *v471;
  unsigned int *v472;
  _BYTE *v473;
  char *v474;
  uint64_t v475;
  char *v476;
  char *v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  char *v481;
  char *v482;
  __int128 *v483;
  uint64_t v484;
  __int128 v485;
  int v486;
  uint64_t v487;
  unsigned int v488;
  char *v489;
  char *v490;
  unint64_t v491;
  unint64_t v492;
  unsigned int *v493;
  char *v494;
  unsigned int v495;
  char *v496;
  unint64_t v497;
  char *v498;
  uint64_t v499;
  uint64_t v500;
  unint64_t v501;
  uint64_t v502;
  unint64_t v503;
  _BYTE *v504;
  unsigned int *v505;
  int64_t v506;
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  char *v510;
  _OWORD *v511;
  char *v512;
  uint64_t v513;
  __int128 v514;
  unsigned int v515;
  __n128 *v516;
  char *v517;
  __n128 *v518;
  uint64_t v519;
  const std::nothrow_t *v520;
  char *v521;
  char *v522;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unsigned int *v548;
  unsigned int *v549;
  unsigned int *v550;
  unsigned int *v551;
  unsigned int *v552;
  unsigned int *v553;
  unsigned int *v554;
  unsigned int *v555;
  void **v556;
  void **v557;
  void **v558;
  void **v559;
  void **v560;
  void **v561;
  void **v562;
  void **v563;
  char v564;

  if (!*(_BYTE *)(a1 + 978))
  {
    if (!*(_BYTE *)(a1 + 977))
    {
      v2 = *(_QWORD *)(a1 + 1176);
      v3 = *(_QWORD *)(a1 + 1184);
      *(_BYTE *)(a1 + 977) = v2 != v3;
      if (v2 == v3)
      {
        v4 = *(_QWORD *)(a1 + 1200);
        v5 = *(_QWORD *)(a1 + 1208);
        *(_BYTE *)(a1 + 977) = v4 != v5;
        if (v4 == v5)
        {
          v6 = *(_QWORD *)(a1 + 1224);
          v7 = *(_QWORD *)(a1 + 1232);
          *(_BYTE *)(a1 + 977) = v6 != v7;
          if (v6 == v7)
          {
            v8 = *(_QWORD *)(a1 + 1248);
            v9 = *(_QWORD *)(a1 + 1256);
            *(_BYTE *)(a1 + 977) = v8 != v9;
            if (v8 == v9)
            {
              v10 = *(_QWORD *)(a1 + 1272);
              v11 = *(_QWORD *)(a1 + 1280);
              *(_BYTE *)(a1 + 977) = v10 != v11;
              if (v10 == v11)
              {
                v12 = *(_QWORD *)(a1 + 1296);
                v13 = *(_QWORD *)(a1 + 1304);
                *(_BYTE *)(a1 + 977) = v12 != v13;
                if (v12 == v13)
                {
                  v14 = *(_QWORD *)(a1 + 1320);
                  v15 = *(_QWORD *)(a1 + 1328);
                  *(_BYTE *)(a1 + 977) = v14 != v15;
                  if (v14 == v15)
                    *(_BYTE *)(a1 + 977) = *(_QWORD *)(a1 + 1344) != *(_QWORD *)(a1 + 1352);
                }
              }
            }
          }
        }
      }
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    if (!*(_BYTE *)(a1 + 977))
    {
LABEL_576:
      *(_BYTE *)(a1 + 978) = 1;
      return a1 + 984;
    }
    v16 = *(void **)(a1 + 1560);
    *(_QWORD *)(a1 + 1568) = v16;
    v17 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
    v18 = v17 >> 4;
    if (v17 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 1576) - (_QWORD)v16) >> 2))
    {
      if (v17 < 0)
        sub_20E867F44();
      v19 = (char *)operator new((unint64_t)v17 >> 2);
      *(_QWORD *)(a1 + 1560) = v19;
      *(_QWORD *)(a1 + 1568) = v19;
      *(_QWORD *)(a1 + 1576) = &v19[4 * v18];
      if (v16)
        operator delete(v16);
    }
    v20 = *(void **)(a1 + 1584);
    *(_QWORD *)(a1 + 1592) = v20;
    v21 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104);
    v22 = v21 >> 4;
    if (v21 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 1600) - (_QWORD)v20) >> 2))
    {
      if (v21 < 0)
        sub_20E867F44();
      v23 = (char *)operator new((unint64_t)v21 >> 2);
      *(_QWORD *)(a1 + 1584) = v23;
      *(_QWORD *)(a1 + 1592) = v23;
      *(_QWORD *)(a1 + 1600) = &v23[4 * v22];
      if (v20)
        operator delete(v20);
    }
    v24 = *(void **)(a1 + 1608);
    *(_QWORD *)(a1 + 1616) = v24;
    v25 = *(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200);
    v26 = v25 >> 4;
    if (v25 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 1624) - (_QWORD)v24) >> 2))
    {
      if (v25 < 0)
        sub_20E867F44();
      v27 = (char *)operator new((unint64_t)v25 >> 2);
      *(_QWORD *)(a1 + 1608) = v27;
      *(_QWORD *)(a1 + 1616) = v27;
      *(_QWORD *)(a1 + 1624) = &v27[4 * v26];
      if (v24)
        operator delete(v24);
    }
    v28 = *(void **)(a1 + 1632);
    *(_QWORD *)(a1 + 1640) = v28;
    v29 = *(_QWORD *)(a1 + 304) - *(_QWORD *)(a1 + 296);
    v30 = v29 >> 4;
    if (v29 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 1648) - (_QWORD)v28) >> 2))
    {
      if (v29 < 0)
        sub_20E867F44();
      v31 = (char *)operator new((unint64_t)v29 >> 2);
      *(_QWORD *)(a1 + 1632) = v31;
      *(_QWORD *)(a1 + 1640) = v31;
      *(_QWORD *)(a1 + 1648) = &v31[4 * v30];
      if (v28)
        operator delete(v28);
    }
    v32 = *(void **)(a1 + 1656);
    *(_QWORD *)(a1 + 1664) = v32;
    v33 = *(_QWORD *)(a1 + 400) - *(_QWORD *)(a1 + 392);
    v34 = v33 >> 4;
    if (v33 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 1672) - (_QWORD)v32) >> 2))
    {
      if (v33 < 0)
        sub_20E867F44();
      v35 = (char *)operator new((unint64_t)v33 >> 2);
      *(_QWORD *)(a1 + 1656) = v35;
      *(_QWORD *)(a1 + 1664) = v35;
      *(_QWORD *)(a1 + 1672) = &v35[4 * v34];
      if (v32)
        operator delete(v32);
    }
    v36 = *(void **)(a1 + 1680);
    *(_QWORD *)(a1 + 1688) = v36;
    v37 = *(_QWORD *)(a1 + 496) - *(_QWORD *)(a1 + 488);
    v38 = v37 >> 4;
    if (v37 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 1696) - (_QWORD)v36) >> 2))
    {
      if (v37 < 0)
        sub_20E867F44();
      v39 = (char *)operator new((unint64_t)v37 >> 2);
      *(_QWORD *)(a1 + 1680) = v39;
      *(_QWORD *)(a1 + 1688) = v39;
      *(_QWORD *)(a1 + 1696) = &v39[4 * v38];
      if (v36)
        operator delete(v36);
    }
    v40 = *(void **)(a1 + 1704);
    *(_QWORD *)(a1 + 1712) = v40;
    v41 = *(_QWORD *)(a1 + 592) - *(_QWORD *)(a1 + 584);
    v42 = v41 >> 4;
    if (v41 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 1720) - (_QWORD)v40) >> 2))
    {
      if (v41 < 0)
        sub_20E867F44();
      v43 = (char *)operator new((unint64_t)v41 >> 2);
      *(_QWORD *)(a1 + 1704) = v43;
      *(_QWORD *)(a1 + 1712) = v43;
      *(_QWORD *)(a1 + 1720) = &v43[4 * v42];
      if (v40)
        operator delete(v40);
    }
    v44 = *(void **)(a1 + 1728);
    *(_QWORD *)(a1 + 1736) = v44;
    v45 = *(_QWORD *)(a1 + 688) - *(_QWORD *)(a1 + 680);
    v46 = v45 >> 4;
    if (v45 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 1744) - (_QWORD)v44) >> 2))
    {
      if (v45 < 0)
        sub_20E867F44();
      v47 = (char *)operator new((unint64_t)v45 >> 2);
      *(_QWORD *)(a1 + 1728) = v47;
      *(_QWORD *)(a1 + 1736) = v47;
      *(_QWORD *)(a1 + 1744) = &v47[4 * v46];
      if (v44)
        operator delete(v44);
    }
    v48 = *(_QWORD *)(a1 + 776);
    for (i = *(_QWORD *)(a1 + 784); v48 != i; v48 += 504)
    {
      v50 = *(_QWORD *)(v48 + 208);
      if (*(_BYTE *)(v48 + 496)
        || (*(_BYTE *)(v50 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v48 + 216) + 4) & 6) != 0)
      {
        *(_BYTE *)(v48 + 496) = 1;
        sub_20F394A20(a1 + 1560, v50);
        sub_20F3D35E0((_QWORD *)(a1 + 1560), *(_QWORD *)(v48 + 216));
      }
    }
    v51 = *(_QWORD *)(a1 + 800);
    for (j = *(_QWORD *)(a1 + 808); v51 != j; v51 += 280)
    {
      v53 = *(_QWORD *)(v51 + 136);
      if (*(_BYTE *)(v51 + 272) || (*(_BYTE *)(v53 + 4) & 6) != 0)
      {
        *(_BYTE *)(v51 + 272) = 1;
        sub_20F394A20(a1 + 1560, v53);
      }
    }
    v54 = *(_QWORD *)(a1 + 824);
    for (k = *(_QWORD *)(a1 + 832); v54 != k; v54 += 8016)
    {
      v56 = *(_QWORD *)(v54 + 7696);
      if (*(_BYTE *)(v54 + 8008)
        || (*(_BYTE *)(v56 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v54 + 7704) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v54 + 7712) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v54 + 7720) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v54 + 7728) + 4) & 6) != 0)
      {
        *(_BYTE *)(v54 + 8008) = 1;
        sub_20F394A20(a1 + 1560, v56);
        sub_20F3D35E0((_QWORD *)(a1 + 1560), *(_QWORD *)(v54 + 7704));
        sub_20F394A20(a1 + 1560, *(_QWORD *)(v54 + 7712));
        sub_20F3D35E0((_QWORD *)(a1 + 1560), *(_QWORD *)(v54 + 7720));
        sub_20F599C88((_QWORD *)(a1 + 1560), *(_QWORD *)(v54 + 7728));
      }
    }
    v57 = *(_QWORD *)(a1 + 848);
    for (m = *(_QWORD *)(a1 + 856); v57 != m; v57 += 5336)
    {
      v59 = *(_QWORD *)(v57 + 5024);
      if (*(_BYTE *)(v57 + 5328)
        || (*(_BYTE *)(v59 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v57 + 5032) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v57 + 5040) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v57 + 5048) + 4) & 6) != 0)
      {
        *(_BYTE *)(v57 + 5328) = 1;
        sub_20F394A20(a1 + 1560, v59);
        sub_20F3D35E0((_QWORD *)(a1 + 1560), *(_QWORD *)(v57 + 5032));
        sub_20F394A20(a1 + 1560, *(_QWORD *)(v57 + 5040));
        sub_20F3D35E0((_QWORD *)(a1 + 1560), *(_QWORD *)(v57 + 5048));
      }
    }
    v60 = *(_QWORD *)(a1 + 872);
    for (n = *(_QWORD *)(a1 + 880); v60 != n; v60 += 216)
    {
      v62 = *(_QWORD *)(v60 + 56);
      if (*(_BYTE *)(v60 + 208)
        || (*(_BYTE *)(v62 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 64) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 72) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 80) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 88) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 96) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 104) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 112) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 120) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 128) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 136) + 4) & 6) != 0)
      {
        *(_BYTE *)(v60 + 208) = 1;
        sub_20F59A480((_QWORD *)(a1 + 1560), v62);
        sub_20F59A480((_QWORD *)(a1 + 1560), *(_QWORD *)(v60 + 64));
        sub_20F394A20(a1 + 1560, *(_QWORD *)(v60 + 72));
        sub_20F394A20(a1 + 1560, *(_QWORD *)(v60 + 80));
        sub_20F59A2E8((_QWORD *)(a1 + 1560), *(_QWORD *)(v60 + 88));
        sub_20F59A2E8((_QWORD *)(a1 + 1560), *(_QWORD *)(v60 + 96));
        sub_20F59A150((_QWORD *)(a1 + 1560), *(_QWORD *)(v60 + 104));
        sub_20F59A150((_QWORD *)(a1 + 1560), *(_QWORD *)(v60 + 112));
        sub_20F599FB8((_QWORD *)(a1 + 1560), *(_QWORD *)(v60 + 120));
        sub_20F599FB8((_QWORD *)(a1 + 1560), *(_QWORD *)(v60 + 128));
        sub_20F599E20((_QWORD *)(a1 + 1560), *(_QWORD *)(v60 + 136));
      }
    }
    v63 = *(_QWORD *)(a1 + 896);
    for (ii = *(_QWORD *)(a1 + 904); v63 != ii; v63 += 888)
    {
      v65 = *(_QWORD *)(v63 + 736);
      if (*(_BYTE *)(v63 + 880)
        || (*(_BYTE *)(v65 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v63 + 744) + 4) & 6) != 0)
      {
        *(_BYTE *)(v63 + 880) = 1;
        sub_20F394A20(a1 + 1560, v65);
        sub_20F394A20(a1 + 1560, *(_QWORD *)(v63 + 744));
      }
    }
    v66 = *(_QWORD *)(a1 + 1184);
    v67 = *(_QWORD *)(a1 + 1176);
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v556 = (void **)(a1 + 1176);
    v68 = *(unsigned int **)(a1 + 1568);
    v69 = *(unsigned int **)(a1 + 1560);
    v70 = ((v66 - v67) >> 2) + v68 - v69;
    v71 = *(_BYTE **)(a1 + 1176);
    v524 = (v66 - v67) >> 2;
    v532 = v67;
    v540 = v66;
    if (v70 <= (uint64_t)(*(_QWORD *)(a1 + 1192) - (_QWORD)v71) >> 2)
    {
LABEL_107:
      if (v69 != v68)
      {
        v548 = v68;
        while (1)
        {
          v88 = *v69;
          v90 = *(char **)(a1 + 8);
          v89 = *(char **)(a1 + 16);
          if (v89 != v90)
          {
            v91 = (v89 - v90) >> 4;
            do
            {
              v92 = v91 >> 1;
              v93 = (unsigned int *)&v90[16 * (v91 >> 1)];
              v95 = *v93;
              v94 = (char *)(v93 + 4);
              v91 += ~(v91 >> 1);
              if (v95 < v88)
                v90 = v94;
              else
                v91 = v92;
            }
            while (v91);
          }
          if (v90 == v89 || *(_DWORD *)v90 != v88)
          {
            v88 = *(_DWORD *)v89;
            v90 = *(char **)(a1 + 16);
          }
          if ((*(_BYTE *)(*((_QWORD *)v90 + 1) + 4) & 6) != 0)
            goto LABEL_111;
          v96 = *(char **)(a1 + 1184);
          v97 = *(_QWORD *)(a1 + 1192);
          if ((unint64_t)v96 >= v97)
            break;
          *(_DWORD *)v96 = v88;
          v87 = (uint64_t)(v96 + 4);
LABEL_110:
          *(_QWORD *)(a1 + 1184) = v87;
          *(_BYTE *)(*((_QWORD *)v90 + 1) + 4) ^= 2u;
LABEL_111:
          if (++v69 == v68)
            goto LABEL_143;
        }
        v98 = (char *)*v556;
        v99 = v96 - (_BYTE *)*v556;
        v100 = v99 >> 2;
        v101 = (v99 >> 2) + 1;
        if (v101 >> 62)
          goto LABEL_578;
        v102 = v97 - (_QWORD)v98;
        if (v102 >> 1 > v101)
          v101 = v102 >> 1;
        if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL)
          v103 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v103 = v101;
        if (v103)
        {
          if (v103 >> 62)
LABEL_579:
            sub_20E877A38();
          v104 = operator new(4 * v103);
          v105 = (unsigned int *)&v104[4 * v100];
          *v105 = v88;
          v87 = (uint64_t)(v105 + 1);
          v106 = v96 - v98;
          if (v96 == v98)
            goto LABEL_140;
        }
        else
        {
          v104 = 0;
          v105 = (unsigned int *)(4 * v100);
          *(_DWORD *)(4 * v100) = v88;
          v87 = 4 * v100 + 4;
          v106 = v96 - v98;
          if (v96 == v98)
          {
LABEL_140:
            *(_QWORD *)(a1 + 1176) = v105;
            *(_QWORD *)(a1 + 1184) = v87;
            *(_QWORD *)(a1 + 1192) = &v104[4 * v103];
            if (v98)
              operator delete(v98);
            v68 = v548;
            goto LABEL_110;
          }
        }
        v107 = v106 - 4;
        if (v107 < 0x2C)
          goto LABEL_590;
        if ((unint64_t)(v96 - v104 - v99) < 0x20)
          goto LABEL_590;
        v108 = (v107 >> 2) + 1;
        v109 = 4 * (v108 & 0x7FFFFFFFFFFFFFF8);
        v110 = &v96[-v109];
        v105 = (unsigned int *)((char *)v105 - v109);
        v111 = &v104[4 * v100 - 16];
        v112 = v96 - 16;
        v113 = v108 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v114 = *(_OWORD *)v112;
          *(v111 - 1) = *((_OWORD *)v112 - 1);
          *v111 = v114;
          v111 -= 2;
          v112 -= 32;
          v113 -= 8;
        }
        while (v113);
        v96 = v110;
        if (v108 != (v108 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_590:
          do
          {
            v115 = *((_DWORD *)v96 - 1);
            v96 -= 4;
            *--v105 = v115;
          }
          while (v96 != v98);
        }
        goto LABEL_140;
      }
LABEL_143:
      if (v540 != v532)
      {
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v116 = *(__n128 **)(a1 + 1176);
        v117 = (char *)v116 + 4 * v524;
        v118 = *(__n128 **)(a1 + 1184);
        if (((char *)v118 - v117) >> 2 >= v524)
          v119 = v524;
        else
          v119 = ((char *)v118 - v117) >> 2;
        if (v119 < 1)
        {
LABEL_151:
          v123 = 0;
          v119 = 0;
        }
        else
        {
          v120 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
          while (1)
          {
            v121 = (char *)operator new(4 * v119, v120);
            if (v121)
              break;
            v122 = (unint64_t)v119 > 1;
            v119 = (unint64_t)v119 >> 1;
            if (!v122)
              goto LABEL_151;
          }
          v123 = v121;
        }
        sub_20EDB30B0(v116, (__n128 *)((char *)v116 + 4 * v524), v118, (uint64_t)&v564, v524, ((char *)v118 - v117) >> 2, v123, v119);
        if (v123)
          operator delete(v123);
      }
      v124 = *(_QWORD *)(a1 + 1208);
      v125 = *(_QWORD *)(a1 + 1200);
      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
      v557 = (void **)(a1 + 1200);
      v126 = *(unsigned int **)(a1 + 1592);
      v127 = *(unsigned int **)(a1 + 1584);
      v128 = ((v124 - v125) >> 2) + v126 - v127;
      v129 = *(_BYTE **)(a1 + 1200);
      v525 = (v124 - v125) >> 2;
      v533 = v125;
      v541 = v124;
      if (v128 <= (uint64_t)(*(_QWORD *)(a1 + 1216) - (_QWORD)v129) >> 2)
      {
LABEL_167:
        if (v127 != v126)
        {
          v549 = v126;
          while (1)
          {
            v146 = *v127;
            v148 = *(char **)(a1 + 104);
            v147 = *(char **)(a1 + 112);
            if (v147 != v148)
            {
              v149 = (v147 - v148) >> 4;
              do
              {
                v150 = v149 >> 1;
                v151 = (unsigned int *)&v148[16 * (v149 >> 1)];
                v153 = *v151;
                v152 = (char *)(v151 + 4);
                v149 += ~(v149 >> 1);
                if (v153 < v146)
                  v148 = v152;
                else
                  v149 = v150;
              }
              while (v149);
            }
            if (v148 == v147 || *(_DWORD *)v148 != v146)
            {
              v146 = *(_DWORD *)v147;
              v148 = *(char **)(a1 + 112);
            }
            if ((*(_BYTE *)(*((_QWORD *)v148 + 1) + 4) & 6) != 0)
              goto LABEL_171;
            v154 = *(char **)(a1 + 1208);
            v155 = *(_QWORD *)(a1 + 1216);
            if ((unint64_t)v154 >= v155)
              break;
            *(_DWORD *)v154 = v146;
            v145 = (uint64_t)(v154 + 4);
LABEL_170:
            *(_QWORD *)(a1 + 1208) = v145;
            *(_BYTE *)(*((_QWORD *)v148 + 1) + 4) ^= 2u;
LABEL_171:
            if (++v127 == v126)
              goto LABEL_203;
          }
          v156 = (char *)*v557;
          v157 = v154 - (_BYTE *)*v557;
          v158 = v157 >> 2;
          v159 = (v157 >> 2) + 1;
          if (v159 >> 62)
            goto LABEL_578;
          v160 = v155 - (_QWORD)v156;
          if (v160 >> 1 > v159)
            v159 = v160 >> 1;
          if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL)
            v161 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v161 = v159;
          if (v161)
          {
            if (v161 >> 62)
              goto LABEL_579;
            v162 = operator new(4 * v161);
            v163 = (unsigned int *)&v162[4 * v158];
            *v163 = v146;
            v145 = (uint64_t)(v163 + 1);
            v164 = v154 - v156;
            if (v154 == v156)
              goto LABEL_200;
          }
          else
          {
            v162 = 0;
            v163 = (unsigned int *)(4 * v158);
            *(_DWORD *)(4 * v158) = v146;
            v145 = 4 * v158 + 4;
            v164 = v154 - v156;
            if (v154 == v156)
            {
LABEL_200:
              *(_QWORD *)(a1 + 1200) = v163;
              *(_QWORD *)(a1 + 1208) = v145;
              *(_QWORD *)(a1 + 1216) = &v162[4 * v161];
              if (v156)
                operator delete(v156);
              v126 = v549;
              goto LABEL_170;
            }
          }
          v165 = v164 - 4;
          if (v165 < 0x2C)
            goto LABEL_591;
          if ((unint64_t)(v154 - v162 - v157) < 0x20)
            goto LABEL_591;
          v166 = (v165 >> 2) + 1;
          v167 = 4 * (v166 & 0x7FFFFFFFFFFFFFF8);
          v168 = &v154[-v167];
          v163 = (unsigned int *)((char *)v163 - v167);
          v169 = &v162[4 * v158 - 16];
          v170 = v154 - 16;
          v171 = v166 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v172 = *(_OWORD *)v170;
            *(v169 - 1) = *((_OWORD *)v170 - 1);
            *v169 = v172;
            v169 -= 2;
            v170 -= 32;
            v171 -= 8;
          }
          while (v171);
          v154 = v168;
          if (v166 != (v166 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_591:
            do
            {
              v173 = *((_DWORD *)v154 - 1);
              v154 -= 4;
              *--v163 = v173;
            }
            while (v154 != v156);
          }
          goto LABEL_200;
        }
LABEL_203:
        if (v541 != v533)
        {
          std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
          v174 = *(__n128 **)(a1 + 1200);
          v175 = (char *)v174 + 4 * v525;
          v176 = *(__n128 **)(a1 + 1208);
          if (((char *)v176 - v175) >> 2 >= v525)
            v177 = v525;
          else
            v177 = ((char *)v176 - v175) >> 2;
          if (v177 < 1)
          {
LABEL_211:
            v180 = 0;
            v177 = 0;
          }
          else
          {
            v178 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
            while (1)
            {
              v179 = (char *)operator new(4 * v177, v178);
              if (v179)
                break;
              v122 = (unint64_t)v177 > 1;
              v177 = (unint64_t)v177 >> 1;
              if (!v122)
                goto LABEL_211;
            }
            v180 = v179;
          }
          sub_20EDB30B0(v174, (__n128 *)((char *)v174 + 4 * v525), v176, (uint64_t)&v564, v525, ((char *)v176 - v175) >> 2, v180, v177);
          if (v180)
            operator delete(v180);
        }
        v181 = *(_QWORD *)(a1 + 1232);
        v182 = *(_QWORD *)(a1 + 1224);
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v558 = (void **)(a1 + 1224);
        v183 = *(unsigned int **)(a1 + 1616);
        v184 = *(unsigned int **)(a1 + 1608);
        v185 = ((v181 - v182) >> 2) + v183 - v184;
        v186 = *(_BYTE **)(a1 + 1224);
        v526 = (v181 - v182) >> 2;
        v534 = v182;
        v542 = v181;
        if (v185 <= (uint64_t)(*(_QWORD *)(a1 + 1240) - (_QWORD)v186) >> 2)
        {
LABEL_227:
          if (v184 != v183)
          {
            v550 = v183;
            while (1)
            {
              v203 = *v184;
              v205 = *(char **)(a1 + 200);
              v204 = *(char **)(a1 + 208);
              if (v204 != v205)
              {
                v206 = (v204 - v205) >> 4;
                do
                {
                  v207 = v206 >> 1;
                  v208 = (unsigned int *)&v205[16 * (v206 >> 1)];
                  v210 = *v208;
                  v209 = (char *)(v208 + 4);
                  v206 += ~(v206 >> 1);
                  if (v210 < v203)
                    v205 = v209;
                  else
                    v206 = v207;
                }
                while (v206);
              }
              if (v205 == v204 || *(_DWORD *)v205 != v203)
              {
                v203 = *(_DWORD *)v204;
                v205 = *(char **)(a1 + 208);
              }
              if ((*(_BYTE *)(*((_QWORD *)v205 + 1) + 4) & 6) != 0)
                goto LABEL_231;
              v211 = *(char **)(a1 + 1232);
              v212 = *(_QWORD *)(a1 + 1240);
              if ((unint64_t)v211 >= v212)
                break;
              *(_DWORD *)v211 = v203;
              v202 = (uint64_t)(v211 + 4);
LABEL_230:
              *(_QWORD *)(a1 + 1232) = v202;
              *(_BYTE *)(*((_QWORD *)v205 + 1) + 4) ^= 2u;
LABEL_231:
              if (++v184 == v183)
                goto LABEL_263;
            }
            v213 = (char *)*v558;
            v214 = v211 - (_BYTE *)*v558;
            v215 = v214 >> 2;
            v216 = (v214 >> 2) + 1;
            if (v216 >> 62)
              goto LABEL_578;
            v217 = v212 - (_QWORD)v213;
            if (v217 >> 1 > v216)
              v216 = v217 >> 1;
            if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFFCLL)
              v218 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v218 = v216;
            if (v218)
            {
              if (v218 >> 62)
                goto LABEL_579;
              v219 = operator new(4 * v218);
              v220 = (unsigned int *)&v219[4 * v215];
              *v220 = v203;
              v202 = (uint64_t)(v220 + 1);
              v221 = v211 - v213;
              if (v211 == v213)
                goto LABEL_260;
            }
            else
            {
              v219 = 0;
              v220 = (unsigned int *)(4 * v215);
              *(_DWORD *)(4 * v215) = v203;
              v202 = 4 * v215 + 4;
              v221 = v211 - v213;
              if (v211 == v213)
              {
LABEL_260:
                *(_QWORD *)(a1 + 1224) = v220;
                *(_QWORD *)(a1 + 1232) = v202;
                *(_QWORD *)(a1 + 1240) = &v219[4 * v218];
                if (v213)
                  operator delete(v213);
                v183 = v550;
                goto LABEL_230;
              }
            }
            v222 = v221 - 4;
            if (v222 < 0x2C)
              goto LABEL_592;
            if ((unint64_t)(v211 - v219 - v214) < 0x20)
              goto LABEL_592;
            v223 = (v222 >> 2) + 1;
            v224 = 4 * (v223 & 0x7FFFFFFFFFFFFFF8);
            v225 = &v211[-v224];
            v220 = (unsigned int *)((char *)v220 - v224);
            v226 = &v219[4 * v215 - 16];
            v227 = v211 - 16;
            v228 = v223 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v229 = *(_OWORD *)v227;
              *(v226 - 1) = *((_OWORD *)v227 - 1);
              *v226 = v229;
              v226 -= 2;
              v227 -= 32;
              v228 -= 8;
            }
            while (v228);
            v211 = v225;
            if (v223 != (v223 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_592:
              do
              {
                v230 = *((_DWORD *)v211 - 1);
                v211 -= 4;
                *--v220 = v230;
              }
              while (v211 != v213);
            }
            goto LABEL_260;
          }
LABEL_263:
          if (v542 != v534)
          {
            std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
            v231 = *(__n128 **)(a1 + 1224);
            v232 = (char *)v231 + 4 * v526;
            v233 = *(__n128 **)(a1 + 1232);
            if (((char *)v233 - v232) >> 2 >= v526)
              v234 = v526;
            else
              v234 = ((char *)v233 - v232) >> 2;
            if (v234 < 1)
            {
LABEL_271:
              v237 = 0;
              v234 = 0;
            }
            else
            {
              v235 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
              while (1)
              {
                v236 = (char *)operator new(4 * v234, v235);
                if (v236)
                  break;
                v122 = (unint64_t)v234 > 1;
                v234 = (unint64_t)v234 >> 1;
                if (!v122)
                  goto LABEL_271;
              }
              v237 = v236;
            }
            sub_20EDB30B0(v231, (__n128 *)((char *)v231 + 4 * v526), v233, (uint64_t)&v564, v526, ((char *)v233 - v232) >> 2, v237, v234);
            if (v237)
              operator delete(v237);
          }
          v238 = *(_QWORD *)(a1 + 1256);
          v239 = *(_QWORD *)(a1 + 1248);
          std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
          v559 = (void **)(a1 + 1248);
          v240 = *(unsigned int **)(a1 + 1640);
          v241 = *(unsigned int **)(a1 + 1632);
          v242 = ((v238 - v239) >> 2) + v240 - v241;
          v243 = *(_BYTE **)(a1 + 1248);
          v527 = (v238 - v239) >> 2;
          v535 = v239;
          v543 = v238;
          if (v242 <= (uint64_t)(*(_QWORD *)(a1 + 1264) - (_QWORD)v243) >> 2)
          {
LABEL_287:
            if (v241 != v240)
            {
              v551 = v240;
              while (1)
              {
                v260 = *v241;
                v262 = *(char **)(a1 + 296);
                v261 = *(char **)(a1 + 304);
                if (v261 != v262)
                {
                  v263 = (v261 - v262) >> 4;
                  do
                  {
                    v264 = v263 >> 1;
                    v265 = (unsigned int *)&v262[16 * (v263 >> 1)];
                    v267 = *v265;
                    v266 = (char *)(v265 + 4);
                    v263 += ~(v263 >> 1);
                    if (v267 < v260)
                      v262 = v266;
                    else
                      v263 = v264;
                  }
                  while (v263);
                }
                if (v262 == v261 || *(_DWORD *)v262 != v260)
                {
                  v260 = *(_DWORD *)v261;
                  v262 = *(char **)(a1 + 304);
                }
                if ((*(_BYTE *)(*((_QWORD *)v262 + 1) + 4) & 6) != 0)
                  goto LABEL_291;
                v268 = *(char **)(a1 + 1256);
                v269 = *(_QWORD *)(a1 + 1264);
                if ((unint64_t)v268 >= v269)
                  break;
                *(_DWORD *)v268 = v260;
                v259 = (uint64_t)(v268 + 4);
LABEL_290:
                *(_QWORD *)(a1 + 1256) = v259;
                *(_BYTE *)(*((_QWORD *)v262 + 1) + 4) ^= 2u;
LABEL_291:
                if (++v241 == v240)
                  goto LABEL_323;
              }
              v270 = (char *)*v559;
              v271 = v268 - (_BYTE *)*v559;
              v272 = v271 >> 2;
              v273 = (v271 >> 2) + 1;
              if (v273 >> 62)
                goto LABEL_578;
              v274 = v269 - (_QWORD)v270;
              if (v274 >> 1 > v273)
                v273 = v274 >> 1;
              if ((unint64_t)v274 >= 0x7FFFFFFFFFFFFFFCLL)
                v275 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v275 = v273;
              if (v275)
              {
                if (v275 >> 62)
                  goto LABEL_579;
                v276 = operator new(4 * v275);
                v277 = (unsigned int *)&v276[4 * v272];
                *v277 = v260;
                v259 = (uint64_t)(v277 + 1);
                v278 = v268 - v270;
                if (v268 == v270)
                  goto LABEL_320;
              }
              else
              {
                v276 = 0;
                v277 = (unsigned int *)(4 * v272);
                *(_DWORD *)(4 * v272) = v260;
                v259 = 4 * v272 + 4;
                v278 = v268 - v270;
                if (v268 == v270)
                {
LABEL_320:
                  *(_QWORD *)(a1 + 1248) = v277;
                  *(_QWORD *)(a1 + 1256) = v259;
                  *(_QWORD *)(a1 + 1264) = &v276[4 * v275];
                  if (v270)
                    operator delete(v270);
                  v240 = v551;
                  goto LABEL_290;
                }
              }
              v279 = v278 - 4;
              if (v279 < 0x2C)
                goto LABEL_593;
              if ((unint64_t)(v268 - v276 - v271) < 0x20)
                goto LABEL_593;
              v280 = (v279 >> 2) + 1;
              v281 = 4 * (v280 & 0x7FFFFFFFFFFFFFF8);
              v282 = &v268[-v281];
              v277 = (unsigned int *)((char *)v277 - v281);
              v283 = &v276[4 * v272 - 16];
              v284 = v268 - 16;
              v285 = v280 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v286 = *(_OWORD *)v284;
                *(v283 - 1) = *((_OWORD *)v284 - 1);
                *v283 = v286;
                v283 -= 2;
                v284 -= 32;
                v285 -= 8;
              }
              while (v285);
              v268 = v282;
              if (v280 != (v280 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_593:
                do
                {
                  v287 = *((_DWORD *)v268 - 1);
                  v268 -= 4;
                  *--v277 = v287;
                }
                while (v268 != v270);
              }
              goto LABEL_320;
            }
LABEL_323:
            if (v543 != v535)
            {
              std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
              v288 = *(__n128 **)(a1 + 1248);
              v289 = (char *)v288 + 4 * v527;
              v290 = *(__n128 **)(a1 + 1256);
              if (((char *)v290 - v289) >> 2 >= v527)
                v291 = v527;
              else
                v291 = ((char *)v290 - v289) >> 2;
              if (v291 < 1)
              {
LABEL_331:
                v294 = 0;
                v291 = 0;
              }
              else
              {
                v292 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                while (1)
                {
                  v293 = (char *)operator new(4 * v291, v292);
                  if (v293)
                    break;
                  v122 = (unint64_t)v291 > 1;
                  v291 = (unint64_t)v291 >> 1;
                  if (!v122)
                    goto LABEL_331;
                }
                v294 = v293;
              }
              sub_20EDB30B0(v288, (__n128 *)((char *)v288 + 4 * v527), v290, (uint64_t)&v564, v527, ((char *)v290 - v289) >> 2, v294, v291);
              if (v294)
                operator delete(v294);
            }
            v295 = *(_QWORD *)(a1 + 1280);
            v296 = *(_QWORD *)(a1 + 1272);
            std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
            v560 = (void **)(a1 + 1272);
            v297 = *(unsigned int **)(a1 + 1664);
            v298 = *(unsigned int **)(a1 + 1656);
            v299 = ((v295 - v296) >> 2) + v297 - v298;
            v300 = *(_BYTE **)(a1 + 1272);
            v528 = (v295 - v296) >> 2;
            v536 = v296;
            v544 = v295;
            if (v299 <= (uint64_t)(*(_QWORD *)(a1 + 1288) - (_QWORD)v300) >> 2)
            {
LABEL_347:
              if (v298 != v297)
              {
                v552 = v297;
                while (1)
                {
                  v317 = *v298;
                  v319 = *(char **)(a1 + 392);
                  v318 = *(char **)(a1 + 400);
                  if (v318 != v319)
                  {
                    v320 = (v318 - v319) >> 4;
                    do
                    {
                      v321 = v320 >> 1;
                      v322 = (unsigned int *)&v319[16 * (v320 >> 1)];
                      v324 = *v322;
                      v323 = (char *)(v322 + 4);
                      v320 += ~(v320 >> 1);
                      if (v324 < v317)
                        v319 = v323;
                      else
                        v320 = v321;
                    }
                    while (v320);
                  }
                  if (v319 == v318 || *(_DWORD *)v319 != v317)
                  {
                    v317 = *(_DWORD *)v318;
                    v319 = *(char **)(a1 + 400);
                  }
                  if ((*(_BYTE *)(*((_QWORD *)v319 + 1) + 4) & 6) != 0)
                    goto LABEL_351;
                  v325 = *(char **)(a1 + 1280);
                  v326 = *(_QWORD *)(a1 + 1288);
                  if ((unint64_t)v325 >= v326)
                    break;
                  *(_DWORD *)v325 = v317;
                  v316 = (uint64_t)(v325 + 4);
LABEL_350:
                  *(_QWORD *)(a1 + 1280) = v316;
                  *(_BYTE *)(*((_QWORD *)v319 + 1) + 4) ^= 2u;
LABEL_351:
                  if (++v298 == v297)
                    goto LABEL_383;
                }
                v327 = (char *)*v560;
                v328 = v325 - (_BYTE *)*v560;
                v329 = v328 >> 2;
                v330 = (v328 >> 2) + 1;
                if (v330 >> 62)
                  goto LABEL_578;
                v331 = v326 - (_QWORD)v327;
                if (v331 >> 1 > v330)
                  v330 = v331 >> 1;
                if ((unint64_t)v331 >= 0x7FFFFFFFFFFFFFFCLL)
                  v332 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v332 = v330;
                if (v332)
                {
                  if (v332 >> 62)
                    goto LABEL_579;
                  v333 = operator new(4 * v332);
                  v334 = (unsigned int *)&v333[4 * v329];
                  *v334 = v317;
                  v316 = (uint64_t)(v334 + 1);
                  v335 = v325 - v327;
                  if (v325 == v327)
                    goto LABEL_380;
                }
                else
                {
                  v333 = 0;
                  v334 = (unsigned int *)(4 * v329);
                  *(_DWORD *)(4 * v329) = v317;
                  v316 = 4 * v329 + 4;
                  v335 = v325 - v327;
                  if (v325 == v327)
                  {
LABEL_380:
                    *(_QWORD *)(a1 + 1272) = v334;
                    *(_QWORD *)(a1 + 1280) = v316;
                    *(_QWORD *)(a1 + 1288) = &v333[4 * v332];
                    if (v327)
                      operator delete(v327);
                    v297 = v552;
                    goto LABEL_350;
                  }
                }
                v336 = v335 - 4;
                if (v336 < 0x2C)
                  goto LABEL_594;
                if ((unint64_t)(v325 - v333 - v328) < 0x20)
                  goto LABEL_594;
                v337 = (v336 >> 2) + 1;
                v338 = 4 * (v337 & 0x7FFFFFFFFFFFFFF8);
                v339 = &v325[-v338];
                v334 = (unsigned int *)((char *)v334 - v338);
                v340 = &v333[4 * v329 - 16];
                v341 = v325 - 16;
                v342 = v337 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v343 = *(_OWORD *)v341;
                  *(v340 - 1) = *((_OWORD *)v341 - 1);
                  *v340 = v343;
                  v340 -= 2;
                  v341 -= 32;
                  v342 -= 8;
                }
                while (v342);
                v325 = v339;
                if (v337 != (v337 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_594:
                  do
                  {
                    v344 = *((_DWORD *)v325 - 1);
                    v325 -= 4;
                    *--v334 = v344;
                  }
                  while (v325 != v327);
                }
                goto LABEL_380;
              }
LABEL_383:
              if (v544 != v536)
              {
                std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                v345 = *(__n128 **)(a1 + 1272);
                v346 = (char *)v345 + 4 * v528;
                v347 = *(__n128 **)(a1 + 1280);
                if (((char *)v347 - v346) >> 2 >= v528)
                  v348 = v528;
                else
                  v348 = ((char *)v347 - v346) >> 2;
                if (v348 < 1)
                {
LABEL_391:
                  v351 = 0;
                  v348 = 0;
                }
                else
                {
                  v349 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                  while (1)
                  {
                    v350 = (char *)operator new(4 * v348, v349);
                    if (v350)
                      break;
                    v122 = (unint64_t)v348 > 1;
                    v348 = (unint64_t)v348 >> 1;
                    if (!v122)
                      goto LABEL_391;
                  }
                  v351 = v350;
                }
                sub_20EDB30B0(v345, (__n128 *)((char *)v345 + 4 * v528), v347, (uint64_t)&v564, v528, ((char *)v347 - v346) >> 2, v351, v348);
                if (v351)
                  operator delete(v351);
              }
              v352 = *(_QWORD *)(a1 + 1304);
              v353 = *(_QWORD *)(a1 + 1296);
              std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
              v561 = (void **)(a1 + 1296);
              v354 = *(unsigned int **)(a1 + 1688);
              v355 = *(unsigned int **)(a1 + 1680);
              v356 = ((v352 - v353) >> 2) + v354 - v355;
              v357 = *(_BYTE **)(a1 + 1296);
              v529 = (v352 - v353) >> 2;
              v537 = v353;
              v545 = v352;
              if (v356 <= (uint64_t)(*(_QWORD *)(a1 + 1312) - (_QWORD)v357) >> 2)
              {
LABEL_407:
                if (v355 != v354)
                {
                  v553 = v354;
                  while (1)
                  {
                    v374 = *v355;
                    v376 = *(char **)(a1 + 488);
                    v375 = *(char **)(a1 + 496);
                    if (v375 != v376)
                    {
                      v377 = (v375 - v376) >> 4;
                      do
                      {
                        v378 = v377 >> 1;
                        v379 = (unsigned int *)&v376[16 * (v377 >> 1)];
                        v381 = *v379;
                        v380 = (char *)(v379 + 4);
                        v377 += ~(v377 >> 1);
                        if (v381 < v374)
                          v376 = v380;
                        else
                          v377 = v378;
                      }
                      while (v377);
                    }
                    if (v376 == v375 || *(_DWORD *)v376 != v374)
                    {
                      v374 = *(_DWORD *)v375;
                      v376 = *(char **)(a1 + 496);
                    }
                    if ((*(_BYTE *)(*((_QWORD *)v376 + 1) + 4) & 6) != 0)
                      goto LABEL_411;
                    v382 = *(char **)(a1 + 1304);
                    v383 = *(_QWORD *)(a1 + 1312);
                    if ((unint64_t)v382 >= v383)
                      break;
                    *(_DWORD *)v382 = v374;
                    v373 = (uint64_t)(v382 + 4);
LABEL_410:
                    *(_QWORD *)(a1 + 1304) = v373;
                    *(_BYTE *)(*((_QWORD *)v376 + 1) + 4) ^= 2u;
LABEL_411:
                    if (++v355 == v354)
                      goto LABEL_443;
                  }
                  v384 = (char *)*v561;
                  v385 = v382 - (_BYTE *)*v561;
                  v386 = v385 >> 2;
                  v387 = (v385 >> 2) + 1;
                  if (v387 >> 62)
                    goto LABEL_578;
                  v388 = v383 - (_QWORD)v384;
                  if (v388 >> 1 > v387)
                    v387 = v388 >> 1;
                  if ((unint64_t)v388 >= 0x7FFFFFFFFFFFFFFCLL)
                    v389 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v389 = v387;
                  if (v389)
                  {
                    if (v389 >> 62)
                      goto LABEL_579;
                    v390 = operator new(4 * v389);
                    v391 = (unsigned int *)&v390[4 * v386];
                    *v391 = v374;
                    v373 = (uint64_t)(v391 + 1);
                    v392 = v382 - v384;
                    if (v382 == v384)
                      goto LABEL_440;
                  }
                  else
                  {
                    v390 = 0;
                    v391 = (unsigned int *)(4 * v386);
                    *(_DWORD *)(4 * v386) = v374;
                    v373 = 4 * v386 + 4;
                    v392 = v382 - v384;
                    if (v382 == v384)
                    {
LABEL_440:
                      *(_QWORD *)(a1 + 1296) = v391;
                      *(_QWORD *)(a1 + 1304) = v373;
                      *(_QWORD *)(a1 + 1312) = &v390[4 * v389];
                      if (v384)
                        operator delete(v384);
                      v354 = v553;
                      goto LABEL_410;
                    }
                  }
                  v393 = v392 - 4;
                  if (v393 < 0x2C)
                    goto LABEL_595;
                  if ((unint64_t)(v382 - v390 - v385) < 0x20)
                    goto LABEL_595;
                  v394 = (v393 >> 2) + 1;
                  v395 = 4 * (v394 & 0x7FFFFFFFFFFFFFF8);
                  v396 = &v382[-v395];
                  v391 = (unsigned int *)((char *)v391 - v395);
                  v397 = &v390[4 * v386 - 16];
                  v398 = v382 - 16;
                  v399 = v394 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v400 = *(_OWORD *)v398;
                    *(v397 - 1) = *((_OWORD *)v398 - 1);
                    *v397 = v400;
                    v397 -= 2;
                    v398 -= 32;
                    v399 -= 8;
                  }
                  while (v399);
                  v382 = v396;
                  if (v394 != (v394 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_595:
                    do
                    {
                      v401 = *((_DWORD *)v382 - 1);
                      v382 -= 4;
                      *--v391 = v401;
                    }
                    while (v382 != v384);
                  }
                  goto LABEL_440;
                }
LABEL_443:
                if (v545 != v537)
                {
                  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                  v402 = *(__n128 **)(a1 + 1296);
                  v403 = (char *)v402 + 4 * v529;
                  v404 = *(__n128 **)(a1 + 1304);
                  if (((char *)v404 - v403) >> 2 >= v529)
                    v405 = v529;
                  else
                    v405 = ((char *)v404 - v403) >> 2;
                  if (v405 < 1)
                  {
LABEL_451:
                    v408 = 0;
                    v405 = 0;
                  }
                  else
                  {
                    v406 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                    while (1)
                    {
                      v407 = (char *)operator new(4 * v405, v406);
                      if (v407)
                        break;
                      v122 = (unint64_t)v405 > 1;
                      v405 = (unint64_t)v405 >> 1;
                      if (!v122)
                        goto LABEL_451;
                    }
                    v408 = v407;
                  }
                  sub_20EDB30B0(v402, (__n128 *)((char *)v402 + 4 * v529), v404, (uint64_t)&v564, v529, ((char *)v404 - v403) >> 2, v408, v405);
                  if (v408)
                    operator delete(v408);
                }
                v409 = *(_QWORD *)(a1 + 1328);
                v410 = *(_QWORD *)(a1 + 1320);
                std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                v562 = (void **)(a1 + 1320);
                v411 = *(unsigned int **)(a1 + 1712);
                v412 = *(unsigned int **)(a1 + 1704);
                v413 = ((v409 - v410) >> 2) + v411 - v412;
                v414 = *(_BYTE **)(a1 + 1320);
                v530 = (v409 - v410) >> 2;
                v538 = v410;
                v546 = v409;
                if (v413 <= (uint64_t)(*(_QWORD *)(a1 + 1336) - (_QWORD)v414) >> 2)
                {
LABEL_467:
                  if (v412 != v411)
                  {
                    v554 = v411;
                    while (1)
                    {
                      v431 = *v412;
                      v432 = *(char **)(a1 + 584);
                      v433 = *(char **)(a1 + 592);
                      if (v433 != v432)
                      {
                        v434 = (v433 - v432) >> 4;
                        do
                        {
                          v435 = v434 >> 1;
                          v436 = (unsigned int *)&v432[16 * (v434 >> 1)];
                          v438 = *v436;
                          v437 = (char *)(v436 + 4);
                          v434 += ~(v434 >> 1);
                          if (v438 < v431)
                            v432 = v437;
                          else
                            v434 = v435;
                        }
                        while (v434);
                      }
                      if (v432 == v433 || *(_DWORD *)v432 != v431)
                      {
                        v431 = *(_DWORD *)v433;
                        v432 = *(char **)(a1 + 592);
                      }
                      if ((*(_BYTE *)(*((_QWORD *)v432 + 1) + 4) & 6) != 0)
                        goto LABEL_471;
                      v439 = *(char **)(a1 + 1328);
                      v440 = *(_QWORD *)(a1 + 1336);
                      if ((unint64_t)v439 >= v440)
                        break;
                      *(_DWORD *)v439 = v431;
                      v430 = (uint64_t)(v439 + 4);
LABEL_470:
                      *(_QWORD *)(a1 + 1328) = v430;
                      *(_BYTE *)(*((_QWORD *)v432 + 1) + 4) ^= 2u;
LABEL_471:
                      if (++v412 == v411)
                        goto LABEL_503;
                    }
                    v441 = (char *)*v562;
                    v442 = v439 - (_BYTE *)*v562;
                    v443 = v442 >> 2;
                    v444 = (v442 >> 2) + 1;
                    if (v444 >> 62)
                      goto LABEL_578;
                    v445 = v440 - (_QWORD)v441;
                    if (v445 >> 1 > v444)
                      v444 = v445 >> 1;
                    if ((unint64_t)v445 >= 0x7FFFFFFFFFFFFFFCLL)
                      v446 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v446 = v444;
                    if (v446)
                    {
                      if (v446 >> 62)
                        goto LABEL_579;
                      v447 = operator new(4 * v446);
                      v448 = (unsigned int *)&v447[4 * v443];
                      *v448 = v431;
                      v430 = (uint64_t)(v448 + 1);
                      v449 = v439 - v441;
                      if (v439 == v441)
                        goto LABEL_500;
                    }
                    else
                    {
                      v447 = 0;
                      v448 = (unsigned int *)(4 * v443);
                      *(_DWORD *)(4 * v443) = v431;
                      v430 = 4 * v443 + 4;
                      v449 = v439 - v441;
                      if (v439 == v441)
                      {
LABEL_500:
                        *(_QWORD *)(a1 + 1320) = v448;
                        *(_QWORD *)(a1 + 1328) = v430;
                        *(_QWORD *)(a1 + 1336) = &v447[4 * v446];
                        if (v441)
                          operator delete(v441);
                        v411 = v554;
                        goto LABEL_470;
                      }
                    }
                    v450 = v449 - 4;
                    if (v450 < 0x2C)
                      goto LABEL_596;
                    if ((unint64_t)(v439 - v447 - v442) < 0x20)
                      goto LABEL_596;
                    v451 = (v450 >> 2) + 1;
                    v452 = 4 * (v451 & 0x7FFFFFFFFFFFFFF8);
                    v453 = &v439[-v452];
                    v448 = (unsigned int *)((char *)v448 - v452);
                    v454 = &v447[4 * v443 - 16];
                    v455 = v439 - 16;
                    v456 = v451 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v457 = *(_OWORD *)v455;
                      *(v454 - 1) = *((_OWORD *)v455 - 1);
                      *v454 = v457;
                      v454 -= 2;
                      v455 -= 32;
                      v456 -= 8;
                    }
                    while (v456);
                    v439 = v453;
                    if (v451 != (v451 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_596:
                      do
                      {
                        v458 = *((_DWORD *)v439 - 1);
                        v439 -= 4;
                        *--v448 = v458;
                      }
                      while (v439 != v441);
                    }
                    goto LABEL_500;
                  }
LABEL_503:
                  if (v546 != v538)
                  {
                    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                    v459 = *(__n128 **)(a1 + 1320);
                    v460 = (char *)v459 + 4 * v530;
                    v461 = *(__n128 **)(a1 + 1328);
                    if (((char *)v461 - v460) >> 2 >= v530)
                      v462 = v530;
                    else
                      v462 = ((char *)v461 - v460) >> 2;
                    if (v462 < 1)
                    {
LABEL_511:
                      v465 = 0;
                      v462 = 0;
                    }
                    else
                    {
                      v463 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                      while (1)
                      {
                        v464 = (char *)operator new(4 * v462, v463);
                        if (v464)
                          break;
                        v122 = (unint64_t)v462 > 1;
                        v462 = (unint64_t)v462 >> 1;
                        if (!v122)
                          goto LABEL_511;
                      }
                      v465 = v464;
                    }
                    sub_20EDB30B0(v459, (__n128 *)((char *)v459 + 4 * v530), v461, (uint64_t)&v564, v530, ((char *)v461 - v460) >> 2, v465, v462);
                    if (v465)
                      operator delete(v465);
                  }
                  v466 = *(_QWORD *)(a1 + 1352);
                  v467 = *(_QWORD *)(a1 + 1344);
                  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                  v563 = (void **)(a1 + 1344);
                  v468 = *(unsigned int **)(a1 + 1736);
                  v469 = *(unsigned int **)(a1 + 1728);
                  v470 = ((v466 - v467) >> 2) + v468 - v469;
                  v471 = *(_BYTE **)(a1 + 1344);
                  v531 = (v466 - v467) >> 2;
                  v539 = v467;
                  v547 = v466;
                  if (v470 <= (uint64_t)(*(_QWORD *)(a1 + 1360) - (_QWORD)v471) >> 2)
                    goto LABEL_527;
                  if (!(v470 >> 62))
                  {
                    v472 = *(unsigned int **)(a1 + 1736);
                    v473 = *(_BYTE **)(a1 + 1352);
                    v474 = (char *)operator new(4 * v470);
                    v475 = v473 - v471;
                    v476 = &v474[(v473 - v471) & 0xFFFFFFFFFFFFFFFCLL];
                    v477 = v476;
                    if (v473 == v471)
                      goto LABEL_525;
                    if ((unint64_t)(v475 - 4) >= 0x2C)
                    {
                      v477 = &v474[(v473 - v471) & 0xFFFFFFFFFFFFFFFCLL];
                      if ((unint64_t)(&v473[-(v475 & 0xFFFFFFFFFFFFFFFCLL)] - v474) >= 0x20)
                      {
                        v478 = v475 >> 2;
                        v479 = ((unint64_t)(v475 - 4) >> 2) + 1;
                        v480 = 4 * (v479 & 0x7FFFFFFFFFFFFFF8);
                        v481 = &v473[-v480];
                        v477 = &v476[-v480];
                        v482 = &v474[4 * v478 - 16];
                        v483 = (__int128 *)(v473 - 16);
                        v484 = v479 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          v485 = *v483;
                          *((_OWORD *)v482 - 1) = *(v483 - 1);
                          *(_OWORD *)v482 = v485;
                          v482 -= 32;
                          v483 -= 2;
                          v484 -= 8;
                        }
                        while (v484);
                        v473 = v481;
                        if (v479 == (v479 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_525:
                          *(_QWORD *)(a1 + 1344) = v477;
                          *(_QWORD *)(a1 + 1352) = v476;
                          *(_QWORD *)(a1 + 1360) = &v474[4 * v470];
                          v468 = v472;
                          if (v471)
                          {
                            operator delete(v471);
                            v469 = *(unsigned int **)(a1 + 1728);
                            v468 = *(unsigned int **)(a1 + 1736);
                          }
LABEL_527:
                          if (v469 != v468)
                          {
                            v555 = v468;
                            while (1)
                            {
                              v488 = *v469;
                              v489 = *(char **)(a1 + 680);
                              v490 = *(char **)(a1 + 688);
                              if (v490 != v489)
                              {
                                v491 = (v490 - v489) >> 4;
                                do
                                {
                                  v492 = v491 >> 1;
                                  v493 = (unsigned int *)&v489[16 * (v491 >> 1)];
                                  v495 = *v493;
                                  v494 = (char *)(v493 + 4);
                                  v491 += ~(v491 >> 1);
                                  if (v495 < v488)
                                    v489 = v494;
                                  else
                                    v491 = v492;
                                }
                                while (v491);
                              }
                              if (v489 == v490 || *(_DWORD *)v489 != v488)
                              {
                                v488 = *(_DWORD *)v490;
                                v489 = *(char **)(a1 + 688);
                              }
                              if ((*(_BYTE *)(*((_QWORD *)v489 + 1) + 4) & 6) != 0)
                                goto LABEL_531;
                              v496 = *(char **)(a1 + 1352);
                              v497 = *(_QWORD *)(a1 + 1360);
                              if ((unint64_t)v496 >= v497)
                                break;
                              *(_DWORD *)v496 = v488;
                              v487 = (uint64_t)(v496 + 4);
LABEL_530:
                              *(_QWORD *)(a1 + 1352) = v487;
                              *(_BYTE *)(*((_QWORD *)v489 + 1) + 4) ^= 2u;
LABEL_531:
                              if (++v469 == v468)
                                goto LABEL_563;
                            }
                            v498 = (char *)*v563;
                            v499 = v496 - (_BYTE *)*v563;
                            v500 = v499 >> 2;
                            v501 = (v499 >> 2) + 1;
                            if (v501 >> 62)
                              goto LABEL_578;
                            v502 = v497 - (_QWORD)v498;
                            if (v502 >> 1 > v501)
                              v501 = v502 >> 1;
                            if ((unint64_t)v502 >= 0x7FFFFFFFFFFFFFFCLL)
                              v503 = 0x3FFFFFFFFFFFFFFFLL;
                            else
                              v503 = v501;
                            if (v503)
                            {
                              if (v503 >> 62)
                                goto LABEL_579;
                              v504 = operator new(4 * v503);
                              v505 = (unsigned int *)&v504[4 * v500];
                              *v505 = v488;
                              v487 = (uint64_t)(v505 + 1);
                              v506 = v496 - v498;
                              if (v496 == v498)
                                goto LABEL_560;
                            }
                            else
                            {
                              v504 = 0;
                              v505 = (unsigned int *)(4 * v500);
                              *(_DWORD *)(4 * v500) = v488;
                              v487 = 4 * v500 + 4;
                              v506 = v496 - v498;
                              if (v496 == v498)
                              {
LABEL_560:
                                *(_QWORD *)(a1 + 1344) = v505;
                                *(_QWORD *)(a1 + 1352) = v487;
                                *(_QWORD *)(a1 + 1360) = &v504[4 * v503];
                                if (v498)
                                  operator delete(v498);
                                v468 = v555;
                                goto LABEL_530;
                              }
                            }
                            v507 = v506 - 4;
                            if (v507 < 0x2C)
                              goto LABEL_597;
                            if ((unint64_t)(v496 - v504 - v499) < 0x20)
                              goto LABEL_597;
                            v508 = (v507 >> 2) + 1;
                            v509 = 4 * (v508 & 0x7FFFFFFFFFFFFFF8);
                            v510 = &v496[-v509];
                            v505 = (unsigned int *)((char *)v505 - v509);
                            v511 = &v504[4 * v500 - 16];
                            v512 = v496 - 16;
                            v513 = v508 & 0x7FFFFFFFFFFFFFF8;
                            do
                            {
                              v514 = *(_OWORD *)v512;
                              *(v511 - 1) = *((_OWORD *)v512 - 1);
                              *v511 = v514;
                              v511 -= 2;
                              v512 -= 32;
                              v513 -= 8;
                            }
                            while (v513);
                            v496 = v510;
                            if (v508 != (v508 & 0x7FFFFFFFFFFFFFF8))
                            {
LABEL_597:
                              do
                              {
                                v515 = *((_DWORD *)v496 - 1);
                                v496 -= 4;
                                *--v505 = v515;
                              }
                              while (v496 != v498);
                            }
                            goto LABEL_560;
                          }
LABEL_563:
                          if (v547 != v539)
                          {
                            std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                            v516 = *(__n128 **)(a1 + 1344);
                            v517 = (char *)v516 + 4 * v531;
                            v518 = *(__n128 **)(a1 + 1352);
                            if (((char *)v518 - v517) >> 2 >= v531)
                              v519 = v531;
                            else
                              v519 = ((char *)v518 - v517) >> 2;
                            if (v519 < 1)
                            {
LABEL_571:
                              v522 = 0;
                              v519 = 0;
                            }
                            else
                            {
                              v520 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                              while (1)
                              {
                                v521 = (char *)operator new(4 * v519, v520);
                                if (v521)
                                  break;
                                v122 = (unint64_t)v519 > 1;
                                v519 = (unint64_t)v519 >> 1;
                                if (!v122)
                                  goto LABEL_571;
                              }
                              v522 = v521;
                            }
                            sub_20EDB30B0(v516, (__n128 *)((char *)v516 + 4 * v531), v518, (uint64_t)&v564, v531, ((char *)v518 - v517) >> 2, v522, v519);
                            if (v522)
                              operator delete(v522);
                          }
                          sub_20F59A618((_QWORD *)a1);
                          goto LABEL_576;
                        }
                      }
                    }
                    else
                    {
                      v477 = &v474[(v473 - v471) & 0xFFFFFFFFFFFFFFFCLL];
                    }
                    do
                    {
                      v486 = *((_DWORD *)v473 - 1);
                      v473 -= 4;
                      *((_DWORD *)v477 - 1) = v486;
                      v477 -= 4;
                    }
                    while (v473 != v471);
                    goto LABEL_525;
                  }
LABEL_578:
                  sub_20E867F44();
                }
                if (v413 >> 62)
                  goto LABEL_578;
                v415 = *(unsigned int **)(a1 + 1712);
                v416 = *(_BYTE **)(a1 + 1328);
                v417 = (char *)operator new(4 * v413);
                v418 = v416 - v414;
                v419 = &v417[(v416 - v414) & 0xFFFFFFFFFFFFFFFCLL];
                v420 = v419;
                if (v416 != v414)
                {
                  if ((unint64_t)(v418 - 4) < 0x2C)
                  {
                    v420 = &v417[(v416 - v414) & 0xFFFFFFFFFFFFFFFCLL];
                    do
                    {
LABEL_464:
                      v429 = *((_DWORD *)v416 - 1);
                      v416 -= 4;
                      *((_DWORD *)v420 - 1) = v429;
                      v420 -= 4;
                    }
                    while (v416 != v414);
                    goto LABEL_465;
                  }
                  v420 = &v417[(v416 - v414) & 0xFFFFFFFFFFFFFFFCLL];
                  if ((unint64_t)(&v416[-(v418 & 0xFFFFFFFFFFFFFFFCLL)] - v417) < 0x20)
                    goto LABEL_464;
                  v421 = v418 >> 2;
                  v422 = ((unint64_t)(v418 - 4) >> 2) + 1;
                  v423 = 4 * (v422 & 0x7FFFFFFFFFFFFFF8);
                  v424 = &v416[-v423];
                  v420 = &v419[-v423];
                  v425 = &v417[4 * v421 - 16];
                  v426 = (__int128 *)(v416 - 16);
                  v427 = v422 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v428 = *v426;
                    *((_OWORD *)v425 - 1) = *(v426 - 1);
                    *(_OWORD *)v425 = v428;
                    v425 -= 32;
                    v426 -= 2;
                    v427 -= 8;
                  }
                  while (v427);
                  v416 = v424;
                  if (v422 != (v422 & 0x7FFFFFFFFFFFFFF8))
                    goto LABEL_464;
                }
LABEL_465:
                *(_QWORD *)(a1 + 1320) = v420;
                *(_QWORD *)(a1 + 1328) = v419;
                *(_QWORD *)(a1 + 1336) = &v417[4 * v413];
                v411 = v415;
                if (v414)
                {
                  operator delete(v414);
                  v412 = *(unsigned int **)(a1 + 1704);
                  v411 = *(unsigned int **)(a1 + 1712);
                }
                goto LABEL_467;
              }
              if (v356 >> 62)
                goto LABEL_578;
              v358 = *(unsigned int **)(a1 + 1688);
              v359 = *(_BYTE **)(a1 + 1304);
              v360 = (char *)operator new(4 * v356);
              v361 = v359 - v357;
              v362 = &v360[(v359 - v357) & 0xFFFFFFFFFFFFFFFCLL];
              v363 = v362;
              if (v359 != v357)
              {
                if ((unint64_t)(v361 - 4) < 0x2C)
                {
                  v363 = &v360[(v359 - v357) & 0xFFFFFFFFFFFFFFFCLL];
                  do
                  {
LABEL_404:
                    v372 = *((_DWORD *)v359 - 1);
                    v359 -= 4;
                    *((_DWORD *)v363 - 1) = v372;
                    v363 -= 4;
                  }
                  while (v359 != v357);
                  goto LABEL_405;
                }
                v363 = &v360[(v359 - v357) & 0xFFFFFFFFFFFFFFFCLL];
                if ((unint64_t)(&v359[-(v361 & 0xFFFFFFFFFFFFFFFCLL)] - v360) < 0x20)
                  goto LABEL_404;
                v364 = v361 >> 2;
                v365 = ((unint64_t)(v361 - 4) >> 2) + 1;
                v366 = 4 * (v365 & 0x7FFFFFFFFFFFFFF8);
                v367 = &v359[-v366];
                v363 = &v362[-v366];
                v368 = &v360[4 * v364 - 16];
                v369 = (__int128 *)(v359 - 16);
                v370 = v365 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v371 = *v369;
                  *((_OWORD *)v368 - 1) = *(v369 - 1);
                  *(_OWORD *)v368 = v371;
                  v368 -= 32;
                  v369 -= 2;
                  v370 -= 8;
                }
                while (v370);
                v359 = v367;
                if (v365 != (v365 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_404;
              }
LABEL_405:
              *(_QWORD *)(a1 + 1296) = v363;
              *(_QWORD *)(a1 + 1304) = v362;
              *(_QWORD *)(a1 + 1312) = &v360[4 * v356];
              v354 = v358;
              if (v357)
              {
                operator delete(v357);
                v355 = *(unsigned int **)(a1 + 1680);
                v354 = *(unsigned int **)(a1 + 1688);
              }
              goto LABEL_407;
            }
            if (v299 >> 62)
              goto LABEL_578;
            v301 = *(unsigned int **)(a1 + 1664);
            v302 = *(_BYTE **)(a1 + 1280);
            v303 = (char *)operator new(4 * v299);
            v304 = v302 - v300;
            v305 = &v303[(v302 - v300) & 0xFFFFFFFFFFFFFFFCLL];
            v306 = v305;
            if (v302 != v300)
            {
              if ((unint64_t)(v304 - 4) < 0x2C)
              {
                v306 = &v303[(v302 - v300) & 0xFFFFFFFFFFFFFFFCLL];
                do
                {
LABEL_344:
                  v315 = *((_DWORD *)v302 - 1);
                  v302 -= 4;
                  *((_DWORD *)v306 - 1) = v315;
                  v306 -= 4;
                }
                while (v302 != v300);
                goto LABEL_345;
              }
              v306 = &v303[(v302 - v300) & 0xFFFFFFFFFFFFFFFCLL];
              if ((unint64_t)(&v302[-(v304 & 0xFFFFFFFFFFFFFFFCLL)] - v303) < 0x20)
                goto LABEL_344;
              v307 = v304 >> 2;
              v308 = ((unint64_t)(v304 - 4) >> 2) + 1;
              v309 = 4 * (v308 & 0x7FFFFFFFFFFFFFF8);
              v310 = &v302[-v309];
              v306 = &v305[-v309];
              v311 = &v303[4 * v307 - 16];
              v312 = (__int128 *)(v302 - 16);
              v313 = v308 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v314 = *v312;
                *((_OWORD *)v311 - 1) = *(v312 - 1);
                *(_OWORD *)v311 = v314;
                v311 -= 32;
                v312 -= 2;
                v313 -= 8;
              }
              while (v313);
              v302 = v310;
              if (v308 != (v308 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_344;
            }
LABEL_345:
            *(_QWORD *)(a1 + 1272) = v306;
            *(_QWORD *)(a1 + 1280) = v305;
            *(_QWORD *)(a1 + 1288) = &v303[4 * v299];
            v297 = v301;
            if (v300)
            {
              operator delete(v300);
              v298 = *(unsigned int **)(a1 + 1656);
              v297 = *(unsigned int **)(a1 + 1664);
            }
            goto LABEL_347;
          }
          if (v242 >> 62)
            goto LABEL_578;
          v244 = *(unsigned int **)(a1 + 1640);
          v245 = *(_BYTE **)(a1 + 1256);
          v246 = (char *)operator new(4 * v242);
          v247 = v245 - v243;
          v248 = &v246[(v245 - v243) & 0xFFFFFFFFFFFFFFFCLL];
          v249 = v248;
          if (v245 != v243)
          {
            if ((unint64_t)(v247 - 4) < 0x2C)
            {
              v249 = &v246[(v245 - v243) & 0xFFFFFFFFFFFFFFFCLL];
              do
              {
LABEL_284:
                v258 = *((_DWORD *)v245 - 1);
                v245 -= 4;
                *((_DWORD *)v249 - 1) = v258;
                v249 -= 4;
              }
              while (v245 != v243);
              goto LABEL_285;
            }
            v249 = &v246[(v245 - v243) & 0xFFFFFFFFFFFFFFFCLL];
            if ((unint64_t)(&v245[-(v247 & 0xFFFFFFFFFFFFFFFCLL)] - v246) < 0x20)
              goto LABEL_284;
            v250 = v247 >> 2;
            v251 = ((unint64_t)(v247 - 4) >> 2) + 1;
            v252 = 4 * (v251 & 0x7FFFFFFFFFFFFFF8);
            v253 = &v245[-v252];
            v249 = &v248[-v252];
            v254 = &v246[4 * v250 - 16];
            v255 = (__int128 *)(v245 - 16);
            v256 = v251 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v257 = *v255;
              *((_OWORD *)v254 - 1) = *(v255 - 1);
              *(_OWORD *)v254 = v257;
              v254 -= 32;
              v255 -= 2;
              v256 -= 8;
            }
            while (v256);
            v245 = v253;
            if (v251 != (v251 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_284;
          }
LABEL_285:
          *(_QWORD *)(a1 + 1248) = v249;
          *(_QWORD *)(a1 + 1256) = v248;
          *(_QWORD *)(a1 + 1264) = &v246[4 * v242];
          v240 = v244;
          if (v243)
          {
            operator delete(v243);
            v241 = *(unsigned int **)(a1 + 1632);
            v240 = *(unsigned int **)(a1 + 1640);
          }
          goto LABEL_287;
        }
        if (v185 >> 62)
          goto LABEL_578;
        v187 = *(unsigned int **)(a1 + 1616);
        v188 = *(_BYTE **)(a1 + 1232);
        v189 = (char *)operator new(4 * v185);
        v190 = v188 - v186;
        v191 = &v189[(v188 - v186) & 0xFFFFFFFFFFFFFFFCLL];
        v192 = v191;
        if (v188 != v186)
        {
          if ((unint64_t)(v190 - 4) < 0x2C)
          {
            v192 = &v189[(v188 - v186) & 0xFFFFFFFFFFFFFFFCLL];
            do
            {
LABEL_224:
              v201 = *((_DWORD *)v188 - 1);
              v188 -= 4;
              *((_DWORD *)v192 - 1) = v201;
              v192 -= 4;
            }
            while (v188 != v186);
            goto LABEL_225;
          }
          v192 = &v189[(v188 - v186) & 0xFFFFFFFFFFFFFFFCLL];
          if ((unint64_t)(&v188[-(v190 & 0xFFFFFFFFFFFFFFFCLL)] - v189) < 0x20)
            goto LABEL_224;
          v193 = v190 >> 2;
          v194 = ((unint64_t)(v190 - 4) >> 2) + 1;
          v195 = 4 * (v194 & 0x7FFFFFFFFFFFFFF8);
          v196 = &v188[-v195];
          v192 = &v191[-v195];
          v197 = &v189[4 * v193 - 16];
          v198 = (__int128 *)(v188 - 16);
          v199 = v194 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v200 = *v198;
            *((_OWORD *)v197 - 1) = *(v198 - 1);
            *(_OWORD *)v197 = v200;
            v197 -= 32;
            v198 -= 2;
            v199 -= 8;
          }
          while (v199);
          v188 = v196;
          if (v194 != (v194 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_224;
        }
LABEL_225:
        *(_QWORD *)(a1 + 1224) = v192;
        *(_QWORD *)(a1 + 1232) = v191;
        *(_QWORD *)(a1 + 1240) = &v189[4 * v185];
        v183 = v187;
        if (v186)
        {
          operator delete(v186);
          v184 = *(unsigned int **)(a1 + 1608);
          v183 = *(unsigned int **)(a1 + 1616);
        }
        goto LABEL_227;
      }
      if (v128 >> 62)
        goto LABEL_578;
      v130 = *(unsigned int **)(a1 + 1592);
      v131 = *(_BYTE **)(a1 + 1208);
      v132 = (char *)operator new(4 * v128);
      v133 = v131 - v129;
      v134 = &v132[(v131 - v129) & 0xFFFFFFFFFFFFFFFCLL];
      v135 = v134;
      if (v131 != v129)
      {
        if ((unint64_t)(v133 - 4) < 0x2C)
        {
          v135 = &v132[(v131 - v129) & 0xFFFFFFFFFFFFFFFCLL];
          do
          {
LABEL_164:
            v144 = *((_DWORD *)v131 - 1);
            v131 -= 4;
            *((_DWORD *)v135 - 1) = v144;
            v135 -= 4;
          }
          while (v131 != v129);
          goto LABEL_165;
        }
        v135 = &v132[(v131 - v129) & 0xFFFFFFFFFFFFFFFCLL];
        if ((unint64_t)(&v131[-(v133 & 0xFFFFFFFFFFFFFFFCLL)] - v132) < 0x20)
          goto LABEL_164;
        v136 = v133 >> 2;
        v137 = ((unint64_t)(v133 - 4) >> 2) + 1;
        v138 = 4 * (v137 & 0x7FFFFFFFFFFFFFF8);
        v139 = &v131[-v138];
        v135 = &v134[-v138];
        v140 = &v132[4 * v136 - 16];
        v141 = (__int128 *)(v131 - 16);
        v142 = v137 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v143 = *v141;
          *((_OWORD *)v140 - 1) = *(v141 - 1);
          *(_OWORD *)v140 = v143;
          v140 -= 32;
          v141 -= 2;
          v142 -= 8;
        }
        while (v142);
        v131 = v139;
        if (v137 != (v137 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_164;
      }
LABEL_165:
      *(_QWORD *)(a1 + 1200) = v135;
      *(_QWORD *)(a1 + 1208) = v134;
      *(_QWORD *)(a1 + 1216) = &v132[4 * v128];
      v126 = v130;
      if (v129)
      {
        operator delete(v129);
        v127 = *(unsigned int **)(a1 + 1584);
        v126 = *(unsigned int **)(a1 + 1592);
      }
      goto LABEL_167;
    }
    if (v70 >> 62)
      goto LABEL_578;
    v72 = *(unsigned int **)(a1 + 1568);
    v73 = *(_BYTE **)(a1 + 1184);
    v74 = (char *)operator new(4 * v70);
    v75 = v73 - v71;
    v76 = &v74[(v73 - v71) & 0xFFFFFFFFFFFFFFFCLL];
    v77 = v76;
    if (v73 != v71)
    {
      if ((unint64_t)(v75 - 4) < 0x2C)
      {
        v77 = &v74[(v73 - v71) & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
LABEL_104:
          v86 = *((_DWORD *)v73 - 1);
          v73 -= 4;
          *((_DWORD *)v77 - 1) = v86;
          v77 -= 4;
        }
        while (v73 != v71);
        goto LABEL_105;
      }
      v77 = &v74[(v73 - v71) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(v73 - &v74[v75 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
        goto LABEL_104;
      v78 = v75 >> 2;
      v79 = ((unint64_t)(v75 - 4) >> 2) + 1;
      v80 = 4 * (v79 & 0x7FFFFFFFFFFFFFF8);
      v81 = &v73[-v80];
      v77 = &v76[-v80];
      v82 = &v74[4 * v78 - 16];
      v83 = (__int128 *)(v73 - 16);
      v84 = v79 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v85 = *v83;
        *((_OWORD *)v82 - 1) = *(v83 - 1);
        *(_OWORD *)v82 = v85;
        v82 -= 32;
        v83 -= 2;
        v84 -= 8;
      }
      while (v84);
      v73 = v81;
      if (v79 != (v79 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_104;
    }
LABEL_105:
    *(_QWORD *)(a1 + 1176) = v77;
    *(_QWORD *)(a1 + 1184) = v76;
    *(_QWORD *)(a1 + 1192) = &v74[4 * v70];
    v68 = v72;
    if (v71)
    {
      operator delete(v71);
      v69 = *(unsigned int **)(a1 + 1560);
      v68 = *(unsigned int **)(a1 + 1568);
    }
    goto LABEL_107;
  }
  return a1 + 984;
}

void sub_20F596CC0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  if (v2)
  {
    operator delete(v2);
    sub_20F59A618(v1);
    _Unwind_Resume(a1);
  }
  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

char **sub_20F596D48(char **a1, char **a2)
{
  if (a1 != a2)
    sub_20E867E00(a1, *a2, a2[1], (a2[1] - *a2) >> 2);
  if (a1 != a2)
  {
    sub_20E867E00(a1 + 3, a2[3], a2[4], (a2[4] - a2[3]) >> 2);
    sub_20E867E00(a1 + 6, a2[6], a2[7], (a2[7] - a2[6]) >> 2);
    sub_20E867E00(a1 + 9, a2[9], a2[10], (a2[10] - a2[9]) >> 2);
    sub_20E867E00(a1 + 12, a2[12], a2[13], (a2[13] - a2[12]) >> 2);
    sub_20E867E00(a1 + 15, a2[15], a2[16], (a2[16] - a2[15]) >> 2);
    sub_20E867E00(a1 + 18, a2[18], a2[19], (a2[19] - a2[18]) >> 2);
  }
  return a1;
}

int64x2_t sub_20F596E30(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int64x2_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int64x2_t result;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  int v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int64x2_t v36;
  int8x16_t v37;
  int8x16_t v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  _DWORD *v54;
  _DWORD *v55;
  uint64_t v56;
  int v57;
  float64x2_t *v58;
  int64x2_t *v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  int64x2_t v63;
  uint64_t v64;

  v6 = *(_DWORD **)a2;
  v7 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 == v7)
  {
    v8 = 0;
    v17 = *(_DWORD **)(a2 + 24);
    v18 = *(_DWORD **)(a2 + 32);
    if (v17 == v18)
      goto LABEL_13;
    goto LABEL_9;
  }
  v8 = 0;
  v9 = a1[1];
  do
  {
    v9 -= 16;
    do
    {
      v10 = *(_DWORD *)(v9 + 16);
      v9 += 16;
    }
    while (*v6 != v10);
    v11 = *(_QWORD *)(v9 + 8);
    v60 = 3;
    v61 = v11 + 32;
    v62 = 0;
    v64 = 0;
    v63 = 0uLL;
    sub_20F053450(&v60, (double *)v63.i64);
    v12.i64[0] = v64;
    v13.i64[0] = *(_QWORD *)(v11 + 120);
    v14 = *(int8x16_t *)(v11 + 104);
    result = vzip1q_s64(v12, (int64x2_t)v14);
    v16 = *a3 + 8 * v8;
    *(int64x2_t *)v16 = v63;
    *(int64x2_t *)(v16 + 16) = result;
    *(int8x16_t *)(v16 + 32) = vextq_s8(v14, v13, 8uLL);
    v8 += 6;
    ++v6;
  }
  while (v6 != v7);
  v17 = *(_DWORD **)(a2 + 24);
  v18 = *(_DWORD **)(a2 + 32);
  if (v17 != v18)
  {
LABEL_9:
    v19 = a1[13];
    do
    {
      v19 -= 16;
      do
      {
        v20 = *(_DWORD *)(v19 + 16);
        v19 += 16;
      }
      while (*v17 != v20);
      v21 = *(_QWORD *)(v19 + 8);
      result.i64[0] = *(_QWORD *)(v21 + 96);
      v23 = *(_OWORD *)(v21 + 64);
      v22 = *(_OWORD *)(v21 + 80);
      v24 = *(_OWORD *)(v21 + 32);
      v25 = *(_OWORD *)(v21 + 48);
      v26 = *a3 + 8 * v8;
      *(_OWORD *)(v26 + 32) = v23;
      *(_OWORD *)(v26 + 48) = v22;
      *(_QWORD *)(v26 + 64) = result.i64[0];
      *(_OWORD *)v26 = v24;
      *(_OWORD *)(v26 + 16) = v25;
      v8 += 9;
      ++v17;
    }
    while (v17 != v18);
  }
LABEL_13:
  v27 = *(_DWORD **)(a2 + 48);
  v28 = *(_DWORD **)(a2 + 56);
  if (v27 != v28)
  {
    v29 = a1[25];
    do
    {
      v29 -= 16;
      do
      {
        v30 = *(_DWORD *)(v29 + 16);
        v29 += 16;
      }
      while (*v27 != v30);
      result.i64[0] = *(_QWORD *)(*(_QWORD *)(v29 + 8) + 32);
      *(_QWORD *)(*a3 + 8 * v8++) = result.i64[0];
      ++v27;
    }
    while (v27 != v28);
  }
  v31 = *(_DWORD **)(a2 + 72);
  v32 = *(_DWORD **)(a2 + 80);
  if (v31 != v32)
  {
    v33 = a1[37];
    do
    {
      v33 -= 16;
      do
      {
        v34 = *(_DWORD *)(v33 + 16);
        v33 += 16;
      }
      while (*v31 != v34);
      v35 = *(_QWORD *)(v33 + 8);
      v60 = 3;
      v61 = v35 + 32;
      v62 = 0;
      v64 = 0;
      v63 = 0uLL;
      sub_20F053450(&v60, (double *)v63.i64);
      v36.i64[0] = v64;
      v37.i64[0] = *(_QWORD *)(v35 + 120);
      v38 = *(int8x16_t *)(v35 + 104);
      result = vzip1q_s64(v36, (int64x2_t)v38);
      v39 = *a3 + 8 * v8;
      *(int64x2_t *)v39 = v63;
      *(int64x2_t *)(v39 + 16) = result;
      *(int8x16_t *)(v39 + 32) = vextq_s8(v38, v37, 8uLL);
      v8 += 6;
      ++v31;
    }
    while (v31 != v32);
  }
  v40 = *(_DWORD **)(a2 + 96);
  v41 = *(_DWORD **)(a2 + 104);
  if (v40 != v41)
  {
    v42 = a1[49];
    do
    {
      v42 -= 16;
      do
      {
        v43 = *(_DWORD *)(v42 + 16);
        v42 += 16;
      }
      while (*v40 != v43);
      v44 = *(_QWORD *)(v42 + 8);
      result = *(int64x2_t *)(v44 + 32);
      v45 = *(_OWORD *)(v44 + 48);
      v46 = *a3 + 8 * v8;
      *(int64x2_t *)v46 = result;
      *(_OWORD *)(v46 + 16) = v45;
      v8 += 4;
      ++v40;
    }
    while (v40 != v41);
  }
  v47 = *(_DWORD **)(a2 + 120);
  v48 = *(_DWORD **)(a2 + 128);
  if (v47 != v48)
  {
    v49 = a1[61];
    do
    {
      v49 -= 16;
      do
      {
        v50 = *(_DWORD *)(v49 + 16);
        v49 += 16;
      }
      while (*v47 != v50);
      v51 = *(_QWORD *)(v49 + 8);
      result = *(int64x2_t *)(v51 + 32);
      v52 = *(_OWORD *)(v51 + 48);
      v53 = *a3 + 8 * v8;
      *(int64x2_t *)v53 = result;
      *(_OWORD *)(v53 + 16) = v52;
      v8 += 4;
      ++v47;
    }
    while (v47 != v48);
  }
  v55 = *(_DWORD **)(a2 + 144);
  v54 = *(_DWORD **)(a2 + 152);
  if (v55 != v54)
  {
    v56 = a1[73];
    do
    {
      v56 -= 16;
      do
      {
        v57 = *(_DWORD *)(v56 + 16);
        v56 += 16;
      }
      while (*v55 != v57);
      v58 = (float64x2_t *)(*(_QWORD *)(v56 + 8) + 32);
      v63 = 0uLL;
      v64 = 0;
      sub_20E9733B8(v58, (double *)v63.i64);
      result = v63;
      v59 = (int64x2_t *)(*a3 + 8 * v8);
      v59[1].i64[0] = v64;
      *v59 = result;
      v8 += 3;
      ++v55;
    }
    while (v55 != v54);
  }
  return result;
}

void *sub_20F597134(_QWORD *a1, char **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  size_t v18;

  sub_20F20CEEC(a1, 0, 1u);
  a1[9] = 0;
  *(_OWORD *)(a1 + 7) = 0u;
  *(_OWORD *)(a1 + 5) = 0u;
  *(_OWORD *)(a1 + 3) = 0u;
  (*(void (**)(void))(a1[118] + 16))();
  (*(void (**)(void))(a1[244] + 16))();
  (*(void (**)(void))(a1[370] + 16))();
  (*(void (**)(void))(a1[496] + 16))();
  (*(void (**)(void))(a1[622] + 16))();
  (*(void (**)(void))(a1[748] + 16))();
  (*(void (**)(void))(a1[874] + 16))();
  (*(void (**)(void))(a1[100] + 16))();
  (*(void (**)(void))(a1[226] + 16))();
  (*(void (**)(void))(a1[352] + 16))();
  (*(void (**)(void))(a1[478] + 16))();
  (*(void (**)(void))(a1[604] + 16))();
  (*(void (**)(void))(a1[730] + 16))();
  (*(void (**)(void))(a1[856] + 16))();
  (*(void (**)(void))(a1[82] + 16))();
  (*(void (**)(void))(a1[208] + 16))();
  (*(void (**)(void))(a1[334] + 16))();
  (*(void (**)(void))(a1[460] + 16))();
  (*(void (**)(void))(a1[586] + 16))();
  (*(void (**)(void))(a1[712] + 16))();
  (*(void (**)(void))(a1[838] + 16))();
  (*(void (**)(void))(a1[64] + 16))();
  (*(void (**)(void))(a1[190] + 16))();
  (*(void (**)(void))(a1[316] + 16))();
  (*(void (**)(void))(a1[442] + 16))();
  (*(void (**)(void))(a1[568] + 16))();
  (*(void (**)(void))(a1[694] + 16))();
  (*(void (**)(void))(a1[820] + 16))();
  (*(void (**)(void))(a1[46] + 16))();
  (*(void (**)(void))(a1[172] + 16))();
  (*(void (**)(void))(a1[298] + 16))();
  (*(void (**)(void))(a1[424] + 16))();
  (*(void (**)(void))(a1[550] + 16))();
  (*(void (**)(void))(a1[676] + 16))();
  (*(void (**)(void))(a1[802] + 16))();
  (*(void (**)(_QWORD *))(a1[28] + 16))(a1 + 28);
  (*(void (**)(void))(a1[154] + 16))();
  (*(void (**)(void))(a1[280] + 16))();
  (*(void (**)(void))(a1[406] + 16))();
  (*(void (**)(void))(a1[532] + 16))();
  (*(void (**)(void))(a1[658] + 16))();
  (*(void (**)(void))(a1[784] + 16))();
  (*(void (**)(_QWORD *))(a1[10] + 16))(a1 + 10);
  (*(void (**)(void))(a1[136] + 16))();
  (*(void (**)(void))(a1[262] + 16))();
  (*(void (**)(void))(a1[388] + 16))();
  (*(void (**)(void))(a1[514] + 16))();
  (*(void (**)(void))(a1[640] + 16))();
  (*(void (**)(void))(a1[766] + 16))();
  sub_20F59AAD4((uint64_t)(a1 + 941));
  if (a1 + 941 != a2)
    sub_20F59AA18((char **)a1 + 941, a2);
  v4 = (a1[942] - a1[941]) >> 2;
  v5 = (a1[945] - a1[944]) >> 2;
  v6 = (a1[948] - a1[947]) >> 2;
  v7 = (a1[951] - a1[950]) >> 2;
  v8 = (a1[954] - a1[953]) >> 2;
  v9 = (a1[957] - a1[956]) >> 2;
  v10 = (a1[960] - a1[959]) >> 2;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[118] + 24))(a1 + 118, v10, v4);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[244] + 24))(a1 + 244, v10, v5);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[370] + 24))(a1 + 370, v10, v6);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[496] + 24))(a1 + 496, v10, v7);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[622] + 24))(a1 + 622, v10, v8);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[748] + 24))(a1 + 748, v10, v9);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[874] + 24))(a1 + 874, v10, v10);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[100] + 24))(a1 + 100, v9, v4);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[226] + 24))(a1 + 226, v9, v5);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[352] + 24))(a1 + 352, v9, v6);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[478] + 24))(a1 + 478, v9, v7);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[604] + 24))(a1 + 604, v9, v8);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[730] + 24))(a1 + 730, v9, v9);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[856] + 24))(a1 + 856, v9, v10);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[82] + 24))(a1 + 82, v8, v4);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[208] + 24))(a1 + 208, v8, v5);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[334] + 24))(a1 + 334, v8, v6);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[460] + 24))(a1 + 460, v8, v7);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[586] + 24))(a1 + 586, v8, v8);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[712] + 24))(a1 + 712, v8, v9);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[838] + 24))(a1 + 838, v8, v10);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[64] + 24))(a1 + 64, v7, v4);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[190] + 24))(a1 + 190, v7, v5);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[316] + 24))(a1 + 316, v7, v6);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[442] + 24))(a1 + 442, v7, v7);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[568] + 24))(a1 + 568, v7, v8);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[694] + 24))(a1 + 694, v7, v9);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[820] + 24))(a1 + 820, v7, v10);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[46] + 24))(a1 + 46, v6, v4);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[172] + 24))(a1 + 172, v6, v5);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[298] + 24))(a1 + 298, v6, v6);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[424] + 24))(a1 + 424, v6, v7);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[550] + 24))(a1 + 550, v6, v8);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[676] + 24))(a1 + 676, v6, v9);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[802] + 24))(a1 + 802, v6, v10);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[28] + 24))(a1 + 28, v5, v4);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[154] + 24))(a1 + 154, v5, v5);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[280] + 24))(a1 + 280, v5, v6);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[406] + 24))(a1 + 406, v5, v7);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[532] + 24))(a1 + 532, v5, v8);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[658] + 24))(a1 + 658, v5, v9);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[784] + 24))(a1 + 784, v5, v10);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[10] + 24))(a1 + 10, v4, v4);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[136] + 24))(a1 + 136, v4, v5);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[262] + 24))(a1 + 262, v4, v6);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[388] + 24))(a1 + 388, v4, v7);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[514] + 24))(a1 + 514, v4, v8);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[640] + 24))(a1 + 640, v4, v9);
  result = (void *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(a1[766] + 24))(a1 + 766, v4, v10);
  *((_DWORD *)a1 + 6) = v4;
  *((_DWORD *)a1 + 7) = v5;
  *((_DWORD *)a1 + 8) = v6;
  *((_DWORD *)a1 + 9) = v7;
  *((_DWORD *)a1 + 10) = v8;
  *((_DWORD *)a1 + 11) = v9;
  a1[6] = v10;
  v12 = 9 * v5 + 6 * v4;
  *((_DWORD *)a1 + 14) = 6 * v4;
  *((_DWORD *)a1 + 15) = v12;
  v13 = v12 + v6;
  v14 = v12 + v6 + 6 * v7;
  *((_DWORD *)a1 + 16) = v13;
  *((_DWORD *)a1 + 17) = v14;
  v15 = v14 + 4 * v8;
  v16 = v14 + 4 * (v9 + v8);
  *((_DWORD *)a1 + 18) = v15;
  *((_DWORD *)a1 + 19) = v16;
  v17 = (3 * v10 + v16);
  *((_DWORD *)a1 + 4) = v17;
  if (a1[1] < v17)
  {
    if (*a1)
      MEMORY[0x212BC6368](*a1, 0x1000C8000313F17);
    v18 = (8 * v17 + 31) & 0xFFFFFFFE0;
    *a1 = 0;
    a1[1] = v18 >> 3;
    result = operator new(v18, (std::align_val_t)0x20uLL);
    *a1 = result;
  }
  return result;
}

__n128 sub_20F597B84(uint64_t a1, uint64_t a2, char **a3, uint64_t a4)
{
  char **v4;
  char **v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  BOOL v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  char **v21;
  char *v22;
  char *v23;
  char **v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v32;
  _DWORD *v33;
  char *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  unint64_t *v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _OWORD *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  unint64_t v57;
  unsigned int **v58;
  __n128 result;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  int *v67;
  int *i;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  int *v76;
  int *j;
  int v78;
  int v79;
  int *v80;
  int *k;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  int *v87;
  int *m;
  int v89;
  int v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 v93;
  int *v94;
  int *n;
  int v96;
  int v97;
  uint64_t v98;
  _OWORD *v99;
  __int128 v100;
  int *v101;
  int *ii;
  int v103;
  int v104;
  __n128 *v105;
  __n128 *v106;
  uint64_t v108;
  uint64_t v109;
  char **v110;
  char **v111;
  uint64_t v113;
  char *v114;
  _QWORD *v115;
  _QWORD **v116;
  _QWORD *v117;
  unint64_t v118;

  v4 = a3;
  v6 = (char **)(a1 + 7528);
  if ((char **)(a1 + 7528) != a3)
    sub_20F59AA18(a3, v6);
  v110 = v6;
  v7 = 0;
  v108 = a2;
  do
  {
    v8 = v4[3 * v7];
    v9 = v4[3 * v7 + 1];
    v10 = a2 + 7528 + 24 * v7;
    v11 = *(unsigned int **)v10;
    v12 = *(unsigned int **)(v10 + 8);
    v13 = v8 == v9 || v11 == v12;
    if (!v13)
    {
      v14 = v4[3 * v7];
      do
      {
        v15 = *(_DWORD *)v14;
        if (*(_DWORD *)v14 >= *v11)
        {
          if (*v11 >= v15)
          {
            *(_DWORD *)v8 = v15;
            v8 += 4;
            v14 += 4;
          }
          ++v11;
          if (v14 == v9)
            break;
        }
        else
        {
          v14 += 4;
          if (v14 == v9)
            break;
        }
      }
      while (v11 != v12);
    }
    if (v8 != v9)
      v4[3 * v7 + 1] = v8;
    ++v7;
  }
  while (v7 != 7);
  v109 = a2 + 7528;
  v16 = 0;
  v111 = v4;
  do
  {
    v113 = v16;
    v17 = 24 * v16;
    v18 = (_QWORD *)(a4 + v17);
    v19 = *(void **)(a4 + v17);
    *(_QWORD *)(a4 + v17 + 8) = v19;
    v20 = (_QWORD *)(a4 + v17 + 8);
    v21 = &v4[(unint64_t)v17 / 8];
    v22 = v4[(unint64_t)v17 / 8];
    v24 = v21 + 1;
    v23 = v21[1];
    if (v22 != v23)
    {
      v25 = v23 - v22;
      v26 = v25 >> 2;
      v117 = (_QWORD *)(a4 + 24 * v113 + 16);
      if (v25 >> 2 > (unint64_t)((uint64_t)(*v117 - (_QWORD)v19) >> 3))
      {
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFDLL)
          sub_20E92CED8();
        v27 = (char *)operator new(2 * v25);
        *v18 = v27;
        *v20 = v27;
        *v117 = &v27[8 * v26];
        if (v19)
          operator delete(v19);
      }
      v28 = *v21;
      v29 = *v24;
      v13 = *v21 == *v24;
      v30 = (uint64_t *)(a4 + 24 * v113 + 16);
      if (!v13)
      {
        v31 = 0;
        v32 = 0;
        v33 = *(_DWORD **)(v109 + 24 * v113);
        v34 = v110[3 * v113];
        v114 = v29;
        v115 = v20;
        v116 = (_QWORD **)v18;
        v35 = *(_DWORD *)v28;
        if (*v33 < *(_DWORD *)v28)
          goto LABEL_31;
        while (1)
        {
          if (*(_DWORD *)v34 < v35)
          {
            do
            {
              v37 = *((_DWORD *)v34 + 1);
              v34 += 4;
              v31 = (v31 + 1);
            }
            while (v37 < v35);
          }
          v38 = (char *)*v20;
          v39 = *v30;
          if (*v20 >= (unint64_t)*v30)
            break;
          *(_QWORD *)v38 = v32 | (unint64_t)(v31 << 32);
          *v20 = v38 + 8;
          v28 += 4;
          if (v28 == v29)
            goto LABEL_20;
LABEL_30:
          v35 = *(_DWORD *)v28;
          if (*v33 < *(_DWORD *)v28)
          {
            do
            {
LABEL_31:
              v36 = v33[1];
              ++v33;
              ++v32;
            }
            while (v36 < v35);
          }
        }
        v40 = (char *)*v18;
        v41 = (uint64_t)&v38[-*v18];
        v42 = v41 >> 3;
        v43 = (v41 >> 3) + 1;
        if (v43 >> 61)
          sub_20E92CED8();
        v44 = v39 - (_QWORD)v40;
        if (v44 >> 2 > v43)
          v43 = v44 >> 2;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
          v43 = 0x1FFFFFFFFFFFFFFFLL;
        v118 = v43;
        if (v43)
        {
          if (v43 >> 61)
            sub_20E877A38();
          v45 = operator new(8 * v43);
        }
        else
        {
          v45 = 0;
        }
        v46 = (unint64_t *)&v45[8 * v42];
        *v46 = v32 | (unint64_t)(v31 << 32);
        v47 = v46 + 1;
        if (v38 == v40)
        {
          v18 = v116;
          v30 = (uint64_t *)(a4 + 24 * v113 + 16);
          goto LABEL_54;
        }
        v48 = v38 - v40 - 8;
        if (v48 >= 0x58)
        {
          v49 = v38 - v45 - v41;
          v30 = (uint64_t *)(a4 + 24 * v113 + 16);
          if (v49 >= 0x20)
          {
            v50 = (v48 >> 3) + 1;
            v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
            v52 = &v38[-v51];
            v46 = (unint64_t *)((char *)v46 - v51);
            v53 = &v45[8 * v42 - 16];
            v54 = v38 - 16;
            v55 = v50 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v56 = *(_OWORD *)v54;
              *(v53 - 1) = *((_OWORD *)v54 - 1);
              *v53 = v56;
              v53 -= 2;
              v54 -= 32;
              v55 -= 4;
            }
            while (v55);
            v38 = v52;
            if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_53;
          }
        }
        else
        {
          v30 = (uint64_t *)(a4 + 24 * v113 + 16);
        }
        do
        {
          v57 = *((_QWORD *)v38 - 1);
          v38 -= 8;
          *--v46 = v57;
        }
        while (v38 != v40);
LABEL_53:
        v18 = v116;
        v38 = (char *)*v116;
LABEL_54:
        *v18 = v46;
        v20 = v115;
        *v115 = v47;
        *v30 = (uint64_t)&v45[8 * v118];
        if (v38)
          operator delete(v38);
        v29 = v114;
        *v115 = v47;
        v28 += 4;
        if (v28 == v114)
          goto LABEL_20;
        goto LABEL_30;
      }
    }
LABEL_20:
    v16 = v113 + 1;
    v4 = v111;
  }
  while (v113 != 6);
  v58 = (unsigned int **)a4;
  sub_20F59D8FC(a1 + 944, v108 + 944, (_QWORD *)(a4 + 144), *(unsigned int **)a4, *(unsigned int **)(a4 + 8));
  sub_20F59DBBC(a1 + 1952, v108 + 1952, (_QWORD *)(a4 + 144), v58[3], v58[4]);
  sub_20F59DE94(a1 + 2960, v108 + 2960, (_QWORD *)(a4 + 144), v58[6], v58[7]);
  sub_20F59D8FC(a1 + 3968, v108 + 3968, (_QWORD *)(a4 + 144), v58[9], v58[10]);
  sub_20F59E13C(a1 + 4976, v108 + 4976, (_QWORD *)(a4 + 144), v58[12], v58[13]);
  sub_20F59E13C(a1 + 5984, v108 + 5984, (_QWORD *)(a4 + 144), v58[15], v58[16]);
  sub_20F59E3EC(a1 + 6992, v108 + 6992, (_QWORD *)(a4 + 144), v58[18], v58[19]);
  sub_20F59E69C(a1 + 800, v108 + 800, v58 + 15, *v58, v58[1]);
  sub_20F59E964(a1 + 1808, v108 + 1808, v58 + 15, *(unsigned int **)(a4 + 24), v58[4]);
  sub_20F59EC44(a1 + 2816, v108 + 2816, v58 + 15, *(unsigned int **)(a4 + 48), v58[7]);
  sub_20F59E69C(a1 + 3824, v108 + 3824, v58 + 15, *(unsigned int **)(a4 + 72), v58[10]);
  sub_20F59EEE4(a1 + 4832, v108 + 4832, v58 + 15, *(unsigned int **)(a4 + 96), v58[13]);
  sub_20F59EEE4(a1 + 5840, v108 + 5840, v58 + 15, *(unsigned int **)(a4 + 120), v58[16]);
  sub_20F59E13C(a1 + 6848, v108 + 6848, v58 + 15, v58[18], v58[19]);
  sub_20F59E69C(a1 + 656, v108 + 656, v58 + 12, *v58, v58[1]);
  sub_20F59E964(a1 + 1664, v108 + 1664, v58 + 12, *(unsigned int **)(a4 + 24), v58[4]);
  sub_20F59EC44(a1 + 2672, v108 + 2672, v58 + 12, *(unsigned int **)(a4 + 48), v58[7]);
  sub_20F59E69C(a1 + 3680, v108 + 3680, v58 + 12, *(unsigned int **)(a4 + 72), v58[10]);
  sub_20F59EEE4(a1 + 4688, v108 + 4688, v58 + 12, *(unsigned int **)(a4 + 96), v58[13]);
  sub_20F59EEE4(a1 + 5696, v108 + 5696, v58 + 12, *(unsigned int **)(a4 + 120), v58[16]);
  sub_20F59E13C(a1 + 6704, v108 + 6704, v58 + 12, v58[18], v58[19]);
  sub_20F59E964(a1 + 512, v108 + 512, v58 + 9, *v58, v58[1]);
  sub_20F59F19C(a1 + 1520, v108 + 1520, v58 + 9, *(unsigned int **)(a4 + 24), v58[4]);
  sub_20F59F4B4(a1 + 2528, v108 + 2528, v58 + 9, *(unsigned int **)(a4 + 48), v58[7]);
  sub_20F59E964(a1 + 3536, v108 + 3536, v58 + 9, *(unsigned int **)(a4 + 72), v58[10]);
  sub_20F59E69C(a1 + 4544, v108 + 4544, v58 + 9, *(unsigned int **)(a4 + 96), v58[13]);
  sub_20F59E69C(a1 + 5552, v108 + 5552, v58 + 9, *(unsigned int **)(a4 + 120), v58[16]);
  sub_20F59D8FC(a1 + 6560, v108 + 6560, v58 + 9, v58[18], v58[19]);
  sub_20F59F4B4(a1 + 368, v108 + 368, v58 + 6, *v58, v58[1]);
  sub_20F59E3EC(a1 + 1376, v108 + 1376, v58 + 6, *(unsigned int **)(a4 + 24), v58[4]);
  sub_20F59F75C(a1 + 2384, v108 + 2384, v58 + 6, *(unsigned int **)(a4 + 48), v58[7]);
  sub_20F59F4B4(a1 + 3392, v108 + 3392, v58 + 6, *(unsigned int **)(a4 + 72), v58[10]);
  sub_20F59EC44(a1 + 4400, v108 + 4400, v58 + 6, *(unsigned int **)(a4 + 96), v58[13]);
  sub_20F59EC44(a1 + 5408, v108 + 5408, v58 + 6, *(unsigned int **)(a4 + 120), v58[16]);
  sub_20F59DE94(a1 + 6416, v108 + 6416, v58 + 6, v58[18], v58[19]);
  sub_20F59F19C(a1 + 224, v108 + 224, v58 + 3, *v58, v58[1]);
  sub_20F59F9FC(a1 + 1232, v108 + 1232, v58 + 3, *(unsigned int **)(a4 + 24), v58[4]);
  sub_20F59E3EC(a1 + 2240, v108 + 2240, v58 + 3, *(unsigned int **)(a4 + 48), v58[7]);
  sub_20F59F19C(a1 + 3248, v108 + 3248, v58 + 3, *(unsigned int **)(a4 + 72), v58[10]);
  sub_20F59E964(a1 + 4256, v108 + 4256, v58 + 3, *(unsigned int **)(a4 + 96), v58[13]);
  sub_20F59E964(a1 + 5264, v108 + 5264, v58 + 3, *(unsigned int **)(a4 + 120), v58[16]);
  sub_20F59DBBC(a1 + 6272, v108 + 6272, v58 + 3, v58[18], v58[19]);
  sub_20F59E964(a1 + 80, v108 + 80, v58, *v58, v58[1]);
  sub_20F59F19C(a1 + 1088, v108 + 1088, v58, *(unsigned int **)(a4 + 24), v58[4]);
  sub_20F59F4B4(a1 + 2096, v108 + 2096, v58, *(unsigned int **)(a4 + 48), v58[7]);
  sub_20F59E964(a1 + 3104, v108 + 3104, v58, *(unsigned int **)(a4 + 72), v58[10]);
  sub_20F59E69C(a1 + 4112, v108 + 4112, v58, *(unsigned int **)(a4 + 96), v58[13]);
  sub_20F59E69C(a1 + 5120, v108 + 5120, v58, *(unsigned int **)(a4 + 120), v58[16]);
  sub_20F59D8FC(a1 + 6128, v108 + 6128, v58, v58[18], v58[19]);
  v60 = *(unsigned int **)a4;
  v61 = *(unsigned int **)(a4 + 8);
  if (*(unsigned int **)a4 != v61)
  {
    do
    {
      v62 = *v60;
      v63 = v60[1];
      v60 += 2;
      v64 = *(_QWORD *)v108 + 8 * (*(_DWORD *)(v108 + 52) + 6 * v62);
      v65 = *(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 52) + 6 * v63);
      result = *(__n128 *)(v64 + 32);
      v66 = *(_OWORD *)v64;
      *(_OWORD *)(v65 + 16) = *(_OWORD *)(v64 + 16);
      *(__n128 *)(v65 + 32) = result;
      *(_OWORD *)v65 = v66;
    }
    while (v60 != v61);
  }
  v67 = *(int **)(a4 + 24);
  for (i = *(int **)(a4 + 32); v67 != i; *(_OWORD *)(v72 + 16) = v75)
  {
    v69 = *v67;
    v70 = v67[1];
    v67 += 2;
    v71 = *(_QWORD *)v108 + 8 * (*(_DWORD *)(v108 + 56) + 9 * v69);
    v72 = *(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 56) + 9 * v70);
    result.n128_u64[0] = *(_QWORD *)(v71 + 64);
    v73 = *(_OWORD *)(v71 + 48);
    v74 = *(_OWORD *)v71;
    v75 = *(_OWORD *)(v71 + 16);
    *(_OWORD *)(v72 + 32) = *(_OWORD *)(v71 + 32);
    *(_OWORD *)(v72 + 48) = v73;
    *(_QWORD *)(v72 + 64) = result.n128_u64[0];
    *(_OWORD *)v72 = v74;
  }
  v76 = *(int **)(a4 + 48);
  for (j = *(int **)(a4 + 56);
        v76 != j;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 60) + v79)) = result.n128_u64[0])
  {
    v78 = *v76;
    v79 = v76[1];
    v76 += 2;
    result.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v108 + 8 * (*(_DWORD *)(v108 + 60) + v78));
  }
  v80 = *(int **)(a4 + 72);
  for (k = *(int **)(a4 + 80); v80 != k; *(_OWORD *)v85 = v86)
  {
    v82 = *v80;
    v83 = v80[1];
    v80 += 2;
    v84 = *(_QWORD *)v108 + 8 * (*(_DWORD *)(v108 + 64) + 6 * v82);
    v85 = *(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 64) + 6 * v83);
    result = *(__n128 *)(v84 + 32);
    v86 = *(_OWORD *)v84;
    *(_OWORD *)(v85 + 16) = *(_OWORD *)(v84 + 16);
    *(__n128 *)(v85 + 32) = result;
  }
  v87 = *(int **)(a4 + 96);
  for (m = *(int **)(a4 + 104); v87 != m; v92[1] = v93)
  {
    v89 = *v87;
    v90 = v87[1];
    v87 += 2;
    v91 = *(_QWORD *)v108 + 8 * (*(_DWORD *)(v108 + 68) + 4 * v89);
    v92 = (_OWORD *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 68) + 4 * v90));
    result = *(__n128 *)v91;
    v93 = *(_OWORD *)(v91 + 16);
    *v92 = *(_OWORD *)v91;
  }
  v94 = *(int **)(a4 + 120);
  for (n = *(int **)(a4 + 128); v94 != n; v99[1] = v100)
  {
    v96 = *v94;
    v97 = v94[1];
    v94 += 2;
    v98 = *(_QWORD *)v108 + 8 * (*(_DWORD *)(v108 + 72) + 4 * v96);
    v99 = (_OWORD *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 72) + 4 * v97));
    result = *(__n128 *)v98;
    v100 = *(_OWORD *)(v98 + 16);
    *v99 = *(_OWORD *)v98;
  }
  v101 = *(int **)(a4 + 144);
  for (ii = *(int **)(a4 + 152); v101 != ii; *v106 = result)
  {
    v103 = *v101;
    v104 = v101[1];
    v101 += 2;
    v105 = (__n128 *)(*(_QWORD *)v108 + 8 * (*(_DWORD *)(v108 + 76) + 3 * v103));
    v106 = (__n128 *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 76) + 3 * v104));
    result = *v105;
    v106[1].n128_u64[0] = v105[1].n128_u64[0];
  }
  return result;
}

void sub_20F59867C(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  char *v8;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _QWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  char *v35;
  int64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _OWORD *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int **v51;
  unsigned int **v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int **v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int **v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int **v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int **v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int *v158;
  unsigned int *v159;
  int v160;
  char *v161;
  char *v162;
  char *v163;
  unsigned int v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  int v170;
  _DWORD *v171;
  _DWORD *v172;
  unsigned int v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  _DWORD *v179;
  _DWORD *v180;
  int v181;
  _DWORD *v182;
  _DWORD *v183;
  int v184;
  _DWORD *v185;
  _DWORD *v186;
  int v187;
  _DWORD *v188;
  _DWORD *v189;
  int v190;
  _DWORD *v191;
  _DWORD *v192;
  unsigned int v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int v213;
  char *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  _BYTE *v218;
  _DWORD *v219;
  int v223;
  uint64_t *v224;
  unint64_t v225;
  uint64_t *v226;
  _DWORD *v227;
  _QWORD *v228;
  char **v229;

  v3 = a3;
  v4 = a1;
  v5 = 0;
  v6 = 0;
  v219 = a1 + 1882;
  do
  {
    v7 = (_QWORD *)(v3 + 24 * v5);
    v8 = (char *)*v7;
    v229 = (char **)v7;
    v7[1] = *v7;
    v226 = v7 + 1;
    v9 = (_QWORD *)(a2 + 24 * v5);
    v10 = (_DWORD *)*v9;
    v11 = v9[1];
    if (*v9 != v11)
    {
      v223 = v6;
      v12 = v11 - (_QWORD)v10;
      v13 = (v11 - (uint64_t)v10) >> 2;
      v224 = (uint64_t *)(v3 + 24 * v5 + 16);
      if (v13 > (*v224 - (uint64_t)v8) >> 2)
      {
        if ((v12 & 0x8000000000000000) != 0)
LABEL_257:
          sub_20E867F44();
        v14 = (char *)operator new(v12);
        *v229 = v14;
        *v226 = (uint64_t)v14;
        *v224 = (uint64_t)&v14[4 * v13];
        if (v8)
          operator delete(v8);
      }
      v15 = &v219[6 * v5];
      v16 = (_DWORD *)*v9;
      v17 = *(_DWORD **)v15;
      v20 = (_DWORD *)*((_QWORD *)v15 + 1);
      v18 = v15 + 2;
      v19 = v20;
      v21 = (_DWORD *)v9[1];
      if (v17 == v20)
      {
        v22 = 0;
        v23 = v226;
        v24 = v224;
      }
      else
      {
        v22 = 0;
        v23 = v226;
        v24 = v224;
        while (*v17 < *v16)
        {
          ++v17;
          ++v22;
          if (v17 == v19)
            goto LABEL_2;
        }
      }
      if (v16 != v21 && v17 != v19)
      {
        v227 = v21;
        v228 = v18;
        while (1)
        {
          if (*v16 != *v17)
          {
            ++v17;
            if (++v16 == v21)
              goto LABEL_2;
            goto LABEL_45;
          }
          v25 = (char *)*v23;
          v26 = *v24;
          if (*v23 < (unint64_t)*v24)
          {
            *(_DWORD *)v25 = v22;
            v27 = (uint64_t)(v25 + 4);
            goto LABEL_42;
          }
          v28 = v5;
          v29 = *v229;
          v30 = v25 - *v229;
          v31 = v30 >> 2;
          v32 = (v30 >> 2) + 1;
          if (v32 >> 62)
            goto LABEL_257;
          v33 = v26 - (_QWORD)v29;
          if (v33 >> 1 > v32)
            v32 = v33 >> 1;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
            v32 = 0x3FFFFFFFFFFFFFFFLL;
          v225 = v32;
          if (v32)
          {
            if (v32 >> 62)
              sub_20E877A38();
            v34 = operator new(4 * v32);
            v35 = &v34[4 * v31];
            *(_DWORD *)v35 = v22;
            v27 = (uint64_t)(v35 + 4);
            v36 = v25 - v29;
            if (v25 == v29)
            {
LABEL_34:
              v5 = v28;
              v38 = v225;
              v23 = v226;
              goto LABEL_40;
            }
          }
          else
          {
            v34 = 0;
            v35 = (char *)(4 * v31);
            *(_DWORD *)(4 * v31) = v22;
            v27 = 4 * v31 + 4;
            v36 = v25 - v29;
            if (v25 == v29)
              goto LABEL_34;
          }
          v37 = v36 - 4;
          v38 = v225;
          if (v37 < 0x2C)
            break;
          v39 = v25 - &v34[v30];
          v5 = v28;
          v23 = v226;
          if (v39 < 0x20)
            goto LABEL_39;
          v40 = (v37 >> 2) + 1;
          v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
          v42 = &v25[-v41];
          v35 -= v41;
          v43 = &v34[4 * v31 - 16];
          v44 = v25 - 16;
          v45 = v40 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v46 = *(_OWORD *)v44;
            *(v43 - 1) = *((_OWORD *)v44 - 1);
            *v43 = v46;
            v43 -= 2;
            v44 -= 32;
            v45 -= 8;
          }
          while (v45);
          v25 = v42;
          if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_39;
LABEL_40:
          *v229 = v35;
          *v23 = v27;
          v24 = v224;
          *v224 = (uint64_t)&v34[4 * v38];
          if (v29)
            operator delete(v29);
LABEL_42:
          *v23 = v27;
          v48 = *v228 - (_QWORD)(v17 + 1);
          if ((_DWORD *)*v228 != v17 + 1)
            memmove(v17, v17 + 1, *v228 - (_QWORD)(v17 + 1));
          *v228 = (char *)v17 + v48;
          --v19;
          v21 = v227;
          if (++v16 == v227)
            goto LABEL_2;
LABEL_45:
          ++v22;
          if (v17 == v19)
            goto LABEL_2;
        }
        v5 = v28;
        v23 = v226;
        do
        {
LABEL_39:
          v47 = *((_DWORD *)v25 - 1);
          v25 -= 4;
          *((_DWORD *)v35 - 1) = v47;
          v35 -= 4;
        }
        while (v25 != v29);
        goto LABEL_40;
      }
LABEL_2:
      v6 = v223 | (*v229 != (char *)*v23);
      v4 = a1;
      v3 = a3;
    }
    ++v5;
  }
  while (v5 != 7);
  if ((v6 & 1) != 0)
  {
    v49 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    if (v49)
    {
      v50 = (v49 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 236), *(_DWORD *)(*(_QWORD *)v3 + 4 * v50--));
      while (v50 != -1);
    }
    v51 = (unsigned int **)(v3 + 144);
    sub_20F5B160C((uint64_t)(v4 + 236), (unsigned int **)(v3 + 144));
    v52 = (unsigned int **)(v3 + 24);
    v53 = *(_QWORD *)(v3 + 32) - *(_QWORD *)(v3 + 24);
    if (v53)
    {
      v54 = (v53 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 488), (*v52)[v54--]);
      while (v54 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 488), (unsigned int **)(v3 + 144));
    v55 = (unsigned int **)(v3 + 48);
    v56 = *(_QWORD *)(v3 + 56) - *(_QWORD *)(v3 + 48);
    if (v56)
    {
      v57 = (v56 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 740), (*v55)[v57--]);
      while (v57 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 740), (unsigned int **)(v3 + 144));
    v58 = (unsigned int **)(v3 + 72);
    v59 = *(_QWORD *)(v3 + 80) - *(_QWORD *)(v3 + 72);
    if (v59)
    {
      v60 = (v59 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 992), (*v58)[v60--]);
      while (v60 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 992), (unsigned int **)(v3 + 144));
    v61 = (unsigned int **)(v3 + 96);
    v62 = *(_QWORD *)(v3 + 104) - *(_QWORD *)(v3 + 96);
    if (v62)
    {
      v63 = (v62 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 1244), (*v61)[v63--]);
      while (v63 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 1244), (unsigned int **)(v3 + 144));
    v64 = (unsigned int **)(a3 + 120);
    v65 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v65)
    {
      v66 = (v65 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 1496), (*v64)[v66--]);
      while (v66 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 1496), v51);
    v67 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v67)
    {
      v68 = (v67 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 1748), (*v51)[v68--]);
      while (v68 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 1748), v51);
    v69 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v69)
    {
      v70 = (v69 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 200), *(_DWORD *)(*(_QWORD *)a3 + 4 * v70--));
      while (v70 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 200), v64);
    v71 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v71)
    {
      v72 = (v71 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 452), (*v52)[v72--]);
      while (v72 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 452), v64);
    v73 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
    if (v73)
    {
      v74 = (v73 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 704), (*v55)[v74--]);
      while (v74 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 704), v64);
    v75 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v75)
    {
      v76 = (v75 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 956), (*v58)[v76--]);
      while (v76 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 956), v64);
    v77 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v77)
    {
      v78 = (v77 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 1208), (*v61)[v78--]);
      while (v78 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 1208), v64);
    v79 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v79)
    {
      v80 = (v79 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 1460), (*v64)[v80--]);
      while (v80 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 1460), v64);
    v81 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v81)
    {
      v82 = (v81 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 1712), (*v51)[v82--]);
      while (v82 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 1712), v64);
    v83 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v83)
    {
      v84 = (v83 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 164), *(_DWORD *)(*(_QWORD *)a3 + 4 * v84--));
      while (v84 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 164), v61);
    v85 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v85)
    {
      v86 = (v85 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 416), (*v52)[v86--]);
      while (v86 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 416), v61);
    v87 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
    if (v87)
    {
      v88 = (v87 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 668), (*v55)[v88--]);
      while (v88 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 668), v61);
    v89 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v89)
    {
      v90 = (v89 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 920), (*v58)[v90--]);
      while (v90 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 920), v61);
    v91 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v91)
    {
      v92 = (v91 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 1172), (*v61)[v92--]);
      while (v92 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 1172), v61);
    v93 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v93)
    {
      v94 = (v93 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 1424), (*v64)[v94--]);
      while (v94 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 1424), v61);
    v95 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v95)
    {
      v96 = (v95 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 1676), (*v51)[v96--]);
      while (v96 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 1676), v61);
    v97 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v97)
    {
      v98 = (v97 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 128), *(_DWORD *)(*(_QWORD *)a3 + 4 * v98--));
      while (v98 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 128), v58);
    v99 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v99)
    {
      v100 = (v99 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 380), (*v52)[v100--]);
      while (v100 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 380), v58);
    v101 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
    if (v101)
    {
      v102 = (v101 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 632), (*v55)[v102--]);
      while (v102 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 632), v58);
    v103 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v103)
    {
      v104 = (v103 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 884), (*v58)[v104--]);
      while (v104 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 884), v58);
    v105 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v105)
    {
      v106 = (v105 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 1136), (*v61)[v106--]);
      while (v106 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 1136), v58);
    v107 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v107)
    {
      v108 = (v107 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 1388), (*v64)[v108--]);
      while (v108 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 1388), v58);
    v109 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v109)
    {
      v110 = (v109 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 1640), (*v51)[v110--]);
      while (v110 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 1640), v58);
    v111 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v111)
    {
      v112 = (v111 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 92), *(_DWORD *)(*(_QWORD *)a3 + 4 * v112--));
      while (v112 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 92), v55);
    v113 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v113)
    {
      v114 = (v113 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 344), (*v52)[v114--]);
      while (v114 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 344), v55);
    v115 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
    if (v115)
    {
      v116 = (v115 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 596), (*v55)[v116--]);
      while (v116 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 596), v55);
    v117 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v117)
    {
      v118 = (v117 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 848), (*v58)[v118--]);
      while (v118 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 848), v55);
    v119 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v119)
    {
      v120 = (v119 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 1100), (*v61)[v120--]);
      while (v120 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 1100), v55);
    v121 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v121)
    {
      v122 = (v121 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 1352), (*v64)[v122--]);
      while (v122 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 1352), v55);
    v123 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v123)
    {
      v124 = (v123 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 1604), (*v51)[v124--]);
      while (v124 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 1604), v55);
    v125 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v125)
    {
      v126 = (v125 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 56), *(_DWORD *)(*(_QWORD *)a3 + 4 * v126--));
      while (v126 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 56), v52);
    v127 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v127)
    {
      v128 = (v127 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 308), (*v52)[v128--]);
      while (v128 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 308), v52);
    v129 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
    if (v129)
    {
      v130 = (v129 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 560), (*v55)[v130--]);
      while (v130 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 560), v52);
    v131 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v131)
    {
      v132 = (v131 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 812), (*v58)[v132--]);
      while (v132 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 812), v52);
    v133 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v133)
    {
      v134 = (v133 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(v4 + 1064), (*v61)[v134--]);
      while (v134 != -1);
    }
    sub_20F5B160C((uint64_t)(v4 + 1064), v52);
    v135 = (uint64_t)(v4 + 1316);
    v136 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v136)
    {
      v137 = (v136 >> 2) - 1;
      do
        sub_20F5B1808(v135, (*v64)[v137--]);
      while (v137 != -1);
    }
    v138 = (uint64_t)(a1 + 20);
    sub_20F5B160C(v135, v52);
    v139 = (uint64_t)(a1 + 1568);
    v140 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v140)
    {
      v141 = (v140 >> 2) - 1;
      do
        sub_20F5B1808(v139, (*v51)[v141--]);
      while (v141 != -1);
    }
    sub_20F5B160C(v139, v52);
    v142 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v142)
    {
      v143 = (v142 >> 2) - 1;
      do
        sub_20F5B1808(v138, *(_DWORD *)(*(_QWORD *)a3 + 4 * v143--));
      while (v143 != -1);
    }
    sub_20F5B160C(v138, (unsigned int **)a3);
    v144 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v144)
    {
      v145 = (v144 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(a1 + 272), (*v52)[v145--]);
      while (v145 != -1);
    }
    v146 = (_QWORD *)a3;
    sub_20F5B160C((uint64_t)(a1 + 272), (unsigned int **)a3);
    v147 = v146[7] - v146[6];
    if (v147)
    {
      v148 = (v147 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(a1 + 524), (*v55)[v148--]);
      while (v148 != -1);
    }
    sub_20F5B160C((uint64_t)(a1 + 524), (unsigned int **)a3);
    v149 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v149)
    {
      v150 = (v149 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(a1 + 776), (*v58)[v150--]);
      while (v150 != -1);
    }
    sub_20F5B160C((uint64_t)(a1 + 776), (unsigned int **)a3);
    v151 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v151)
    {
      v152 = (v151 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(a1 + 1028), (*v61)[v152--]);
      while (v152 != -1);
    }
    sub_20F5B160C((uint64_t)(a1 + 1028), (unsigned int **)a3);
    v153 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v153)
    {
      v154 = (v153 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(a1 + 1280), (*v64)[v154--]);
      while (v154 != -1);
    }
    sub_20F5B160C((uint64_t)(a1 + 1280), (unsigned int **)a3);
    v155 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v155)
    {
      v156 = (v155 >> 2) - 1;
      do
        sub_20F5B1808((uint64_t)(a1 + 1532), (*v51)[v156--]);
      while (v156 != -1);
    }
    sub_20F5B160C((uint64_t)(a1 + 1532), (unsigned int **)a3);
    v157 = *(_QWORD *)a1;
    v158 = *(unsigned int **)a3;
    v159 = *(unsigned int **)(a3 + 8);
    if (*(unsigned int **)a3 == v159)
    {
      v169 = 0;
      v163 = *(char **)a1;
      v162 = *(char **)a1;
      v161 = *(char **)a1;
      v170 = a1[14];
      a1[14] = v170;
      v171 = *(_DWORD **)(a3 + 24);
      v172 = *(_DWORD **)(a3 + 32);
      if (v171 != v172)
      {
        do
        {
LABEL_208:
          while (1)
          {
            v173 = 9 * *v171 + v170;
            v174 = (char *)(v157 + 8 * v173);
            if (v162 != v174)
              break;
            v162 += 72;
            if (++v171 == v172)
              goto LABEL_212;
          }
          v175 = (char *)(v157 + 8 * v173);
          if (v161 != v162)
          {
            v176 = v174 - v162;
            memmove(v163, v162, v174 - v162);
            v175 = &v163[v176];
            v157 = *(_QWORD *)a1;
          }
          v162 = (char *)(v157 + 8 * (v173 + 9));
          v163 = v175;
          v161 = v174;
          ++v171;
        }
        while (v171 != v172);
LABEL_212:
        v177 = (*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2;
        a1[7] -= v177;
        v169 += 9 * v177;
      }
    }
    else
    {
      v160 = a1[13];
      v161 = *(char **)a1;
      v162 = *(char **)a1;
      v163 = *(char **)a1;
      do
      {
        while (1)
        {
          v164 = v160 + 6 * *v158;
          v165 = (char *)(v157 + 8 * v164);
          if (v162 != v165)
            break;
          v162 += 48;
          if (++v158 == v159)
            goto LABEL_202;
        }
        v166 = (char *)(v157 + 8 * v164);
        if (v161 != v162)
        {
          v167 = v165 - v162;
          memmove(v163, v162, v165 - v162);
          v166 = &v163[v167];
          v157 = *(_QWORD *)a1;
        }
        v162 = (char *)(v157 + 8 * (v164 + 6));
        v163 = v166;
        v161 = v165;
        ++v158;
      }
      while (v158 != v159);
LABEL_202:
      v168 = (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2;
      a1[6] -= v168;
      v169 = 6 * v168;
      v170 = a1[14];
      a1[14] = v170 - 6 * v168;
      v171 = *(_DWORD **)(a3 + 24);
      v172 = *(_DWORD **)(a3 + 32);
      if (v171 != v172)
        goto LABEL_208;
    }
    v178 = a1[15];
    a1[15] = v178 - v169;
    v179 = *(_DWORD **)(a3 + 48);
    v180 = *(_DWORD **)(a3 + 56);
    if (v179 == v180)
    {
      v181 = a1[16];
      a1[16] = v181 - v169;
      v182 = *(_DWORD **)(a3 + 72);
      v183 = *(_DWORD **)(a3 + 80);
      if (v182 != v183)
        goto LABEL_228;
    }
    else
    {
      do
      {
        while (1)
        {
          v193 = *v179 + v178;
          v194 = (char *)(v157 + 8 * v193);
          if (v162 != v194)
            break;
          v162 += 8;
          if (++v179 == v180)
            goto LABEL_225;
        }
        v195 = (char *)(v157 + 8 * v193);
        if (v161 != v162)
        {
          v196 = v194 - v162;
          memmove(v163, v162, v194 - v162);
          v195 = &v163[v196];
          v157 = *(_QWORD *)a1;
        }
        v162 = (char *)(v157 + 8 * (v193 + 1));
        v163 = v195;
        v161 = v194;
        ++v179;
      }
      while (v179 != v180);
LABEL_225:
      v197 = (*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 2;
      a1[8] -= v197;
      v169 += v197;
      v181 = a1[16];
      a1[16] = v181 - v169;
      v182 = *(_DWORD **)(a3 + 72);
      v183 = *(_DWORD **)(a3 + 80);
      if (v182 != v183)
      {
        do
        {
LABEL_228:
          while (1)
          {
            v198 = v181 + 6 * *v182;
            v199 = (char *)(v157 + 8 * v198);
            if (v162 != v199)
              break;
            v162 += 48;
            if (++v182 == v183)
              goto LABEL_232;
          }
          v200 = (char *)(v157 + 8 * v198);
          if (v161 != v162)
          {
            v201 = v199 - v162;
            memmove(v163, v162, v199 - v162);
            v200 = &v163[v201];
            v157 = *(_QWORD *)a1;
          }
          v162 = (char *)(v157 + 8 * (v198 + 6));
          v163 = v200;
          v161 = v199;
          ++v182;
        }
        while (v182 != v183);
LABEL_232:
        v146 = (_QWORD *)a3;
        v202 = (*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 2;
        a1[9] -= v202;
        v169 += 6 * v202;
        v184 = a1[17];
        a1[17] = v184 - v169;
        v185 = *(_DWORD **)(a3 + 96);
        v186 = *(_DWORD **)(a3 + 104);
        if (v185 != v186)
        {
          do
          {
LABEL_235:
            while (1)
            {
              v203 = v184 + 4 * *v185;
              v204 = (char *)(v157 + 8 * v203);
              if (v162 != v204)
                break;
              v162 += 32;
              if (++v185 == v186)
                goto LABEL_239;
            }
            v205 = (char *)(v157 + 8 * v203);
            if (v161 != v162)
            {
              v206 = v204 - v162;
              memmove(v163, v162, v204 - v162);
              v205 = &v163[v206];
              v157 = *(_QWORD *)a1;
            }
            v162 = (char *)(v157 + 8 * (v203 + 4));
            v163 = v205;
            v161 = v204;
            ++v185;
          }
          while (v185 != v186);
LABEL_239:
          v207 = (v146[13] - v146[12]) >> 2;
          a1[10] -= v207;
          v169 += 4 * v207;
          v187 = a1[18];
          a1[18] = v187 - v169;
          v188 = (_DWORD *)v146[15];
          v189 = (_DWORD *)v146[16];
          if (v188 != v189)
          {
            do
            {
LABEL_242:
              while (1)
              {
                v208 = v187 + 4 * *v188;
                v209 = (char *)(v157 + 8 * v208);
                if (v162 != v209)
                  break;
                v162 += 32;
                if (++v188 == v189)
                  goto LABEL_246;
              }
              v210 = (char *)(v157 + 8 * v208);
              if (v161 != v162)
              {
                v211 = v209 - v162;
                memmove(v163, v162, v209 - v162);
                v210 = &v163[v211];
                v157 = *(_QWORD *)a1;
              }
              v162 = (char *)(v157 + 8 * (v208 + 4));
              v163 = v210;
              v161 = v209;
              ++v188;
            }
            while (v188 != v189);
LABEL_246:
            v212 = (v146[16] - v146[15]) >> 2;
            a1[11] -= v212;
            v169 += 4 * v212;
            v190 = a1[19];
            a1[19] = v190 - v169;
            v191 = (_DWORD *)v146[18];
            v192 = (_DWORD *)v146[19];
            if (v191 != v192)
            {
              do
              {
LABEL_249:
                while (1)
                {
                  v213 = 3 * *v191 + v190;
                  v214 = (char *)(v157 + 8 * v213);
                  if (v162 != v214)
                    break;
                  v162 += 24;
                  if (++v191 == v192)
                    goto LABEL_253;
                }
                v215 = (char *)(v157 + 8 * v213);
                if (v161 != v162)
                {
                  v216 = v214 - v162;
                  memmove(v163, v162, v214 - v162);
                  v215 = &v163[v216];
                  v157 = *(_QWORD *)a1;
                }
                v162 = (char *)(v157 + 8 * (v213 + 3));
                v163 = v215;
                v161 = v214;
                ++v191;
              }
              while (v191 != v192);
LABEL_253:
              v217 = (v146[19] - v146[18]) >> 2;
              a1[12] -= v217;
              v169 += 3 * v217;
              if (v161 == v162)
                goto LABEL_256;
              goto LABEL_254;
            }
LABEL_218:
            if (v161 == v162)
            {
LABEL_256:
              sub_20F20CEEC(a1, a1[4] - v169, 1u);
              return;
            }
LABEL_254:
            v218 = (_BYTE *)(v157 + 8 * a1[4]);
            if (v218 != v162)
              memmove(v163, v162, v218 - v162);
            goto LABEL_256;
          }
LABEL_217:
          v190 = a1[19];
          a1[19] = v190 - v169;
          v191 = (_DWORD *)v146[18];
          v192 = (_DWORD *)v146[19];
          if (v191 != v192)
            goto LABEL_249;
          goto LABEL_218;
        }
LABEL_216:
        v187 = a1[18];
        a1[18] = v187 - v169;
        v188 = (_DWORD *)v146[15];
        v189 = (_DWORD *)v146[16];
        if (v188 != v189)
          goto LABEL_242;
        goto LABEL_217;
      }
    }
    v184 = a1[17];
    a1[17] = v184 - v169;
    v185 = *(_DWORD **)(a3 + 96);
    v186 = *(_DWORD **)(a3 + 104);
    if (v185 != v186)
      goto LABEL_235;
    goto LABEL_216;
  }
}

void sub_20F599C88(_QWORD *a1, uint64_t a2)
{
  int v2;
  int v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _DWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v2 = *(_DWORD *)(a2 + 8) - 1;
  *(_DWORD *)(a2 + 8) = v2;
  if (!v2)
  {
    v4 = *(_DWORD *)(a2 + 16);
    v6 = (char *)a1[7];
    v5 = a1[8];
    if ((unint64_t)v6 < v5)
    {
      *(_DWORD *)v6 = v4;
      v7 = (uint64_t)(v6 + 4);
LABEL_23:
      a1[7] = v7;
      return;
    }
    v8 = (char *)a1[6];
    v9 = (v6 - v8) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      sub_20E867F44();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_20E877A38();
      v13 = operator new(4 * v12);
      v14 = &v13[4 * v9];
      v15 = &v13[4 * v12];
      *v14 = v4;
      v7 = (uint64_t)(v14 + 1);
      v16 = v6 - v8;
      if (v6 == v8)
        goto LABEL_21;
    }
    else
    {
      v13 = 0;
      v14 = (_DWORD *)(4 * v9);
      v15 = 0;
      *(_DWORD *)(4 * v9) = v4;
      v7 = 4 * v9 + 4;
      v16 = v6 - v8;
      if (v6 == v8)
      {
LABEL_21:
        a1[6] = v14;
        a1[7] = v7;
        a1[8] = v15;
        if (v8)
          operator delete(v8);
        goto LABEL_23;
      }
    }
    v17 = v16 - 4;
    if (v17 < 0x2C)
      goto LABEL_28;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_28;
    v18 = (v17 >> 2) + 1;
    v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    v20 = &v6[-v19];
    v14 = (_DWORD *)((char *)v14 - v19);
    v21 = &v13[4 * v9 - 16];
    v22 = v6 - 16;
    v23 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 8;
    }
    while (v23);
    v6 = v20;
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_28:
      do
      {
        v25 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *--v14 = v25;
      }
      while (v6 != v8);
    }
    goto LABEL_21;
  }
}

void sub_20F599E20(_QWORD *a1, uint64_t a2)
{
  int v2;
  int v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _DWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v2 = *(_DWORD *)(a2 + 8) - 1;
  *(_DWORD *)(a2 + 8) = v2;
  if (!v2)
  {
    v4 = *(_DWORD *)(a2 + 16);
    v6 = (char *)a1[22];
    v5 = a1[23];
    if ((unint64_t)v6 < v5)
    {
      *(_DWORD *)v6 = v4;
      v7 = (uint64_t)(v6 + 4);
LABEL_23:
      a1[22] = v7;
      return;
    }
    v8 = (char *)a1[21];
    v9 = (v6 - v8) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      sub_20E867F44();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_20E877A38();
      v13 = operator new(4 * v12);
      v14 = &v13[4 * v9];
      v15 = &v13[4 * v12];
      *v14 = v4;
      v7 = (uint64_t)(v14 + 1);
      v16 = v6 - v8;
      if (v6 == v8)
        goto LABEL_21;
    }
    else
    {
      v13 = 0;
      v14 = (_DWORD *)(4 * v9);
      v15 = 0;
      *(_DWORD *)(4 * v9) = v4;
      v7 = 4 * v9 + 4;
      v16 = v6 - v8;
      if (v6 == v8)
      {
LABEL_21:
        a1[21] = v14;
        a1[22] = v7;
        a1[23] = v15;
        if (v8)
          operator delete(v8);
        goto LABEL_23;
      }
    }
    v17 = v16 - 4;
    if (v17 < 0x2C)
      goto LABEL_28;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_28;
    v18 = (v17 >> 2) + 1;
    v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    v20 = &v6[-v19];
    v14 = (_DWORD *)((char *)v14 - v19);
    v21 = &v13[4 * v9 - 16];
    v22 = v6 - 16;
    v23 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 8;
    }
    while (v23);
    v6 = v20;
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_28:
      do
      {
        v25 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *--v14 = v25;
      }
      while (v6 != v8);
    }
    goto LABEL_21;
  }
}

void sub_20F599FB8(_QWORD *a1, uint64_t a2)
{
  int v2;
  int v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _DWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v2 = *(_DWORD *)(a2 + 8) - 1;
  *(_DWORD *)(a2 + 8) = v2;
  if (!v2)
  {
    v4 = *(_DWORD *)(a2 + 16);
    v6 = (char *)a1[19];
    v5 = a1[20];
    if ((unint64_t)v6 < v5)
    {
      *(_DWORD *)v6 = v4;
      v7 = (uint64_t)(v6 + 4);
LABEL_23:
      a1[19] = v7;
      return;
    }
    v8 = (char *)a1[18];
    v9 = (v6 - v8) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      sub_20E867F44();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_20E877A38();
      v13 = operator new(4 * v12);
      v14 = &v13[4 * v9];
      v15 = &v13[4 * v12];
      *v14 = v4;
      v7 = (uint64_t)(v14 + 1);
      v16 = v6 - v8;
      if (v6 == v8)
        goto LABEL_21;
    }
    else
    {
      v13 = 0;
      v14 = (_DWORD *)(4 * v9);
      v15 = 0;
      *(_DWORD *)(4 * v9) = v4;
      v7 = 4 * v9 + 4;
      v16 = v6 - v8;
      if (v6 == v8)
      {
LABEL_21:
        a1[18] = v14;
        a1[19] = v7;
        a1[20] = v15;
        if (v8)
          operator delete(v8);
        goto LABEL_23;
      }
    }
    v17 = v16 - 4;
    if (v17 < 0x2C)
      goto LABEL_28;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_28;
    v18 = (v17 >> 2) + 1;
    v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    v20 = &v6[-v19];
    v14 = (_DWORD *)((char *)v14 - v19);
    v21 = &v13[4 * v9 - 16];
    v22 = v6 - 16;
    v23 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 8;
    }
    while (v23);
    v6 = v20;
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_28:
      do
      {
        v25 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *--v14 = v25;
      }
      while (v6 != v8);
    }
    goto LABEL_21;
  }
}

void sub_20F59A150(_QWORD *a1, uint64_t a2)
{
  int v2;
  int v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _DWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v2 = *(_DWORD *)(a2 + 8) - 1;
  *(_DWORD *)(a2 + 8) = v2;
  if (!v2)
  {
    v4 = *(_DWORD *)(a2 + 16);
    v6 = (char *)a1[16];
    v5 = a1[17];
    if ((unint64_t)v6 < v5)
    {
      *(_DWORD *)v6 = v4;
      v7 = (uint64_t)(v6 + 4);
LABEL_23:
      a1[16] = v7;
      return;
    }
    v8 = (char *)a1[15];
    v9 = (v6 - v8) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      sub_20E867F44();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_20E877A38();
      v13 = operator new(4 * v12);
      v14 = &v13[4 * v9];
      v15 = &v13[4 * v12];
      *v14 = v4;
      v7 = (uint64_t)(v14 + 1);
      v16 = v6 - v8;
      if (v6 == v8)
        goto LABEL_21;
    }
    else
    {
      v13 = 0;
      v14 = (_DWORD *)(4 * v9);
      v15 = 0;
      *(_DWORD *)(4 * v9) = v4;
      v7 = 4 * v9 + 4;
      v16 = v6 - v8;
      if (v6 == v8)
      {
LABEL_21:
        a1[15] = v14;
        a1[16] = v7;
        a1[17] = v15;
        if (v8)
          operator delete(v8);
        goto LABEL_23;
      }
    }
    v17 = v16 - 4;
    if (v17 < 0x2C)
      goto LABEL_28;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_28;
    v18 = (v17 >> 2) + 1;
    v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    v20 = &v6[-v19];
    v14 = (_DWORD *)((char *)v14 - v19);
    v21 = &v13[4 * v9 - 16];
    v22 = v6 - 16;
    v23 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 8;
    }
    while (v23);
    v6 = v20;
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_28:
      do
      {
        v25 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *--v14 = v25;
      }
      while (v6 != v8);
    }
    goto LABEL_21;
  }
}

void sub_20F59A2E8(_QWORD *a1, uint64_t a2)
{
  int v2;
  int v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _DWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v2 = *(_DWORD *)(a2 + 8) - 1;
  *(_DWORD *)(a2 + 8) = v2;
  if (!v2)
  {
    v4 = *(_DWORD *)(a2 + 16);
    v6 = (char *)a1[13];
    v5 = a1[14];
    if ((unint64_t)v6 < v5)
    {
      *(_DWORD *)v6 = v4;
      v7 = (uint64_t)(v6 + 4);
LABEL_23:
      a1[13] = v7;
      return;
    }
    v8 = (char *)a1[12];
    v9 = (v6 - v8) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      sub_20E867F44();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_20E877A38();
      v13 = operator new(4 * v12);
      v14 = &v13[4 * v9];
      v15 = &v13[4 * v12];
      *v14 = v4;
      v7 = (uint64_t)(v14 + 1);
      v16 = v6 - v8;
      if (v6 == v8)
        goto LABEL_21;
    }
    else
    {
      v13 = 0;
      v14 = (_DWORD *)(4 * v9);
      v15 = 0;
      *(_DWORD *)(4 * v9) = v4;
      v7 = 4 * v9 + 4;
      v16 = v6 - v8;
      if (v6 == v8)
      {
LABEL_21:
        a1[12] = v14;
        a1[13] = v7;
        a1[14] = v15;
        if (v8)
          operator delete(v8);
        goto LABEL_23;
      }
    }
    v17 = v16 - 4;
    if (v17 < 0x2C)
      goto LABEL_28;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_28;
    v18 = (v17 >> 2) + 1;
    v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    v20 = &v6[-v19];
    v14 = (_DWORD *)((char *)v14 - v19);
    v21 = &v13[4 * v9 - 16];
    v22 = v6 - 16;
    v23 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 8;
    }
    while (v23);
    v6 = v20;
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_28:
      do
      {
        v25 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *--v14 = v25;
      }
      while (v6 != v8);
    }
    goto LABEL_21;
  }
}

void sub_20F59A480(_QWORD *a1, uint64_t a2)
{
  int v2;
  int v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _DWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v2 = *(_DWORD *)(a2 + 8) - 1;
  *(_DWORD *)(a2 + 8) = v2;
  if (!v2)
  {
    v4 = *(_DWORD *)(a2 + 16);
    v6 = (char *)a1[10];
    v5 = a1[11];
    if ((unint64_t)v6 < v5)
    {
      *(_DWORD *)v6 = v4;
      v7 = (uint64_t)(v6 + 4);
LABEL_23:
      a1[10] = v7;
      return;
    }
    v8 = (char *)a1[9];
    v9 = (v6 - v8) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      sub_20E867F44();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_20E877A38();
      v13 = operator new(4 * v12);
      v14 = &v13[4 * v9];
      v15 = &v13[4 * v12];
      *v14 = v4;
      v7 = (uint64_t)(v14 + 1);
      v16 = v6 - v8;
      if (v6 == v8)
        goto LABEL_21;
    }
    else
    {
      v13 = 0;
      v14 = (_DWORD *)(4 * v9);
      v15 = 0;
      *(_DWORD *)(4 * v9) = v4;
      v7 = 4 * v9 + 4;
      v16 = v6 - v8;
      if (v6 == v8)
      {
LABEL_21:
        a1[9] = v14;
        a1[10] = v7;
        a1[11] = v15;
        if (v8)
          operator delete(v8);
        goto LABEL_23;
      }
    }
    v17 = v16 - 4;
    if (v17 < 0x2C)
      goto LABEL_28;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_28;
    v18 = (v17 >> 2) + 1;
    v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    v20 = &v6[-v19];
    v14 = (_DWORD *)((char *)v14 - v19);
    v21 = &v13[4 * v9 - 16];
    v22 = v6 - 16;
    v23 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 8;
    }
    while (v23);
    v6 = v20;
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_28:
      do
      {
        v25 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *--v14 = v25;
      }
      while (v6 != v8);
    }
    goto LABEL_21;
  }
}

uint64_t sub_20F59A618(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a1[97];
  v3 = a1[98];
  while (v2 != v3)
  {
    v4 = *(_QWORD *)(v2 + 208);
    if (*(_BYTE *)(v2 + 496) || (*(_BYTE *)(v4 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v2 + 216) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v4 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v2 + 216) + 8);
    }
    v2 += 504;
  }
  v5 = a1[100];
  v6 = a1[101];
  while (v5 != v6)
  {
    v7 = *(_QWORD *)(v5 + 136);
    if (*(_BYTE *)(v5 + 272) || (*(_BYTE *)(v7 + 4) & 6) != 0)
      ++*(_DWORD *)(v7 + 8);
    v5 += 280;
  }
  v8 = a1[103];
  for (i = a1[104]; v8 != i; v8 += 8016)
  {
    v10 = *(_QWORD *)(v8 + 7696);
    if (*(_BYTE *)(v8 + 8008)
      || (*(_BYTE *)(v10 + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v8 + 7704) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v8 + 7712) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v8 + 7720) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v8 + 7728) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v10 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v8 + 7704) + 8);
      ++*(_DWORD *)(*(_QWORD *)(v8 + 7712) + 8);
      ++*(_DWORD *)(*(_QWORD *)(v8 + 7720) + 8);
      ++*(_DWORD *)(*(_QWORD *)(v8 + 7728) + 8);
    }
  }
  v11 = a1[106];
  for (j = a1[107]; v11 != j; v11 += 5336)
  {
    v13 = *(_QWORD *)(v11 + 5024);
    if (*(_BYTE *)(v11 + 5328)
      || (*(_BYTE *)(v13 + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v11 + 5032) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v11 + 5040) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v11 + 5048) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v13 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v11 + 5032) + 8);
      ++*(_DWORD *)(*(_QWORD *)(v11 + 5040) + 8);
      ++*(_DWORD *)(*(_QWORD *)(v11 + 5048) + 8);
    }
  }
  result = sub_20F59A8B0(a1[109], a1[110]);
  v15 = a1[112];
  v16 = a1[113];
  while (v15 != v16)
  {
    v17 = *(_QWORD *)(v15 + 736);
    if (*(_BYTE *)(v15 + 880) || (*(_BYTE *)(v17 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v15 + 744) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v17 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v15 + 744) + 8);
    }
    v15 += 888;
  }
  return result;
}

uint64_t sub_20F59A8B0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  for (; result != a2; result += 216)
  {
    v2 = *(_QWORD *)(result + 56);
    if (*(_BYTE *)(result + 208)
      || (*(_BYTE *)(v2 + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 64) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 72) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 80) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 88) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 96) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 104) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 112) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 120) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 128) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 136) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v2 + 8);
      v3 = *(_QWORD *)(result + 72);
      ++*(_DWORD *)(*(_QWORD *)(result + 64) + 8);
      ++*(_DWORD *)(v3 + 8);
      v4 = *(_QWORD *)(result + 88);
      ++*(_DWORD *)(*(_QWORD *)(result + 80) + 8);
      ++*(_DWORD *)(v4 + 8);
      v5 = *(_QWORD *)(result + 104);
      ++*(_DWORD *)(*(_QWORD *)(result + 96) + 8);
      ++*(_DWORD *)(v5 + 8);
      v6 = *(_QWORD *)(result + 120);
      ++*(_DWORD *)(*(_QWORD *)(result + 112) + 8);
      ++*(_DWORD *)(v6 + 8);
      v7 = *(_QWORD *)(result + 136);
      ++*(_DWORD *)(*(_QWORD *)(result + 128) + 8);
      ++*(_DWORD *)(v7 + 8);
    }
  }
  return result;
}

char **sub_20F59AA18(char **a1, char **a2)
{
  if (a1 != a2)
  {
    sub_20E867E00(a1, *a2, a2[1], (a2[1] - *a2) >> 2);
    sub_20E867E00(a1 + 3, a2[3], a2[4], (a2[4] - a2[3]) >> 2);
    sub_20E867E00(a1 + 6, a2[6], a2[7], (a2[7] - a2[6]) >> 2);
    sub_20E867E00(a1 + 9, a2[9], a2[10], (a2[10] - a2[9]) >> 2);
    sub_20E867E00(a1 + 12, a2[12], a2[13], (a2[13] - a2[12]) >> 2);
    sub_20E867E00(a1 + 15, a2[15], a2[16], (a2[16] - a2[15]) >> 2);
    sub_20E867E00(a1 + 18, a2[18], a2[19], (a2[19] - a2[18]) >> 2);
  }
  return a1;
}

void sub_20F59AAD4(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  _BYTE *v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  _BYTE *v32;
  _BYTE *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  _BYTE *v47;
  _BYTE *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  int v61;
  _BYTE *v62;
  _BYTE *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  __int128 *v73;
  uint64_t v74;
  __int128 v75;
  int v76;
  _BYTE *v77;
  _BYTE *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  __int128 *v88;
  uint64_t v89;
  __int128 v90;
  int v91;
  _BYTE *v92;
  _BYTE *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  __int128 *v103;
  uint64_t v104;
  __int128 v105;
  int v106;

  v2 = *(_BYTE **)a1;
  if (*(_QWORD *)(a1 + 16) - *(_QWORD *)a1 >= 0x100uLL)
    goto LABEL_12;
  v3 = *(_BYTE **)(a1 + 8);
  v4 = (char *)operator new(0x100uLL);
  v5 = v3 - v2;
  v6 = &v4[(v3 - v2) & 0xFFFFFFFFFFFFFFFCLL];
  v7 = v6;
  if (v3 != v2)
  {
    if ((unint64_t)(v5 - 4) < 0x2C)
    {
      v7 = &v4[(v3 - v2) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_9:
        v16 = *((_DWORD *)v3 - 1);
        v3 -= 4;
        *((_DWORD *)v7 - 1) = v16;
        v7 -= 4;
      }
      while (v3 != v2);
      goto LABEL_10;
    }
    v7 = &v4[(v3 - v2) & 0xFFFFFFFFFFFFFFFCLL];
    if (v3 - v4 - (v5 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
      goto LABEL_9;
    v8 = v5 >> 2;
    v9 = ((unint64_t)(v5 - 4) >> 2) + 1;
    v10 = 4 * (v9 & 0x7FFFFFFFFFFFFFF8);
    v11 = &v3[-v10];
    v7 = &v6[-v10];
    v12 = &v4[4 * v8 - 16];
    v13 = (__int128 *)(v3 - 16);
    v14 = v9 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v15 = *v13;
      *((_OWORD *)v12 - 1) = *(v13 - 1);
      *(_OWORD *)v12 = v15;
      v12 -= 32;
      v13 -= 2;
      v14 -= 8;
    }
    while (v14);
    v3 = v11;
    if (v9 != (v9 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_9;
  }
LABEL_10:
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v4 + 256;
  if (v2)
    operator delete(v2);
LABEL_12:
  v17 = *(_BYTE **)(a1 + 24);
  if (*(_QWORD *)(a1 + 40) - (_QWORD)v17 > 0xFFuLL)
    goto LABEL_23;
  v18 = *(_BYTE **)(a1 + 32);
  v19 = (char *)operator new(0x100uLL);
  v20 = v18 - v17;
  v21 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
  v22 = v21;
  if (v18 != v17)
  {
    if ((unint64_t)(v20 - 4) < 0x2C)
    {
      v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_20:
        v31 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *((_DWORD *)v22 - 1) = v31;
        v22 -= 4;
      }
      while (v18 != v17);
      goto LABEL_21;
    }
    v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
    if (v18 - v19 - (v20 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
      goto LABEL_20;
    v23 = v20 >> 2;
    v24 = ((unint64_t)(v20 - 4) >> 2) + 1;
    v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
    v26 = &v18[-v25];
    v22 = &v21[-v25];
    v27 = &v19[4 * v23 - 16];
    v28 = (__int128 *)(v18 - 16);
    v29 = v24 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v30 = *v28;
      *((_OWORD *)v27 - 1) = *(v28 - 1);
      *(_OWORD *)v27 = v30;
      v27 -= 32;
      v28 -= 2;
      v29 -= 8;
    }
    while (v29);
    v18 = v26;
    if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_20;
  }
LABEL_21:
  *(_QWORD *)(a1 + 24) = v22;
  *(_QWORD *)(a1 + 32) = v21;
  *(_QWORD *)(a1 + 40) = v19 + 256;
  if (v17)
    operator delete(v17);
LABEL_23:
  v32 = *(_BYTE **)(a1 + 48);
  if (*(_QWORD *)(a1 + 64) - (_QWORD)v32 > 0xFFuLL)
    goto LABEL_34;
  v33 = *(_BYTE **)(a1 + 56);
  v34 = (char *)operator new(0x100uLL);
  v35 = v33 - v32;
  v36 = &v34[(v33 - v32) & 0xFFFFFFFFFFFFFFFCLL];
  v37 = v36;
  if (v33 != v32)
  {
    if ((unint64_t)(v35 - 4) < 0x2C)
    {
      v37 = &v34[(v33 - v32) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_31:
        v46 = *((_DWORD *)v33 - 1);
        v33 -= 4;
        *((_DWORD *)v37 - 1) = v46;
        v37 -= 4;
      }
      while (v33 != v32);
      goto LABEL_32;
    }
    v37 = &v34[(v33 - v32) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(v33 - &v34[v35 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
      goto LABEL_31;
    v38 = v35 >> 2;
    v39 = ((unint64_t)(v35 - 4) >> 2) + 1;
    v40 = 4 * (v39 & 0x7FFFFFFFFFFFFFF8);
    v41 = &v33[-v40];
    v37 = &v36[-v40];
    v42 = &v34[4 * v38 - 16];
    v43 = (__int128 *)(v33 - 16);
    v44 = v39 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 8;
    }
    while (v44);
    v33 = v41;
    if (v39 != (v39 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_31;
  }
LABEL_32:
  *(_QWORD *)(a1 + 48) = v37;
  *(_QWORD *)(a1 + 56) = v36;
  *(_QWORD *)(a1 + 64) = v34 + 256;
  if (v32)
    operator delete(v32);
LABEL_34:
  v47 = *(_BYTE **)(a1 + 72);
  if (*(_QWORD *)(a1 + 88) - (_QWORD)v47 > 0xFFuLL)
    goto LABEL_45;
  v48 = *(_BYTE **)(a1 + 80);
  v49 = (char *)operator new(0x100uLL);
  v50 = v48 - v47;
  v51 = &v49[(v48 - v47) & 0xFFFFFFFFFFFFFFFCLL];
  v52 = v51;
  if (v48 != v47)
  {
    if ((unint64_t)(v50 - 4) < 0x2C)
    {
      v52 = &v49[(v48 - v47) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_42:
        v61 = *((_DWORD *)v48 - 1);
        v48 -= 4;
        *((_DWORD *)v52 - 1) = v61;
        v52 -= 4;
      }
      while (v48 != v47);
      goto LABEL_43;
    }
    v52 = &v49[(v48 - v47) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(v48 - &v49[v50 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
      goto LABEL_42;
    v53 = v50 >> 2;
    v54 = ((unint64_t)(v50 - 4) >> 2) + 1;
    v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
    v56 = &v48[-v55];
    v52 = &v51[-v55];
    v57 = &v49[4 * v53 - 16];
    v58 = (__int128 *)(v48 - 16);
    v59 = v54 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v60 = *v58;
      *((_OWORD *)v57 - 1) = *(v58 - 1);
      *(_OWORD *)v57 = v60;
      v57 -= 32;
      v58 -= 2;
      v59 -= 8;
    }
    while (v59);
    v48 = v56;
    if (v54 != (v54 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_42;
  }
LABEL_43:
  *(_QWORD *)(a1 + 72) = v52;
  *(_QWORD *)(a1 + 80) = v51;
  *(_QWORD *)(a1 + 88) = v49 + 256;
  if (v47)
    operator delete(v47);
LABEL_45:
  v62 = *(_BYTE **)(a1 + 96);
  if (*(_QWORD *)(a1 + 112) - (_QWORD)v62 > 0xFFuLL)
    goto LABEL_56;
  v63 = *(_BYTE **)(a1 + 104);
  v64 = (char *)operator new(0x100uLL);
  v65 = v63 - v62;
  v66 = &v64[(v63 - v62) & 0xFFFFFFFFFFFFFFFCLL];
  v67 = v66;
  if (v63 != v62)
  {
    if ((unint64_t)(v65 - 4) < 0x2C)
    {
      v67 = &v64[(v63 - v62) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_53:
        v76 = *((_DWORD *)v63 - 1);
        v63 -= 4;
        *((_DWORD *)v67 - 1) = v76;
        v67 -= 4;
      }
      while (v63 != v62);
      goto LABEL_54;
    }
    v67 = &v64[(v63 - v62) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(v63 - &v64[v65 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
      goto LABEL_53;
    v68 = v65 >> 2;
    v69 = ((unint64_t)(v65 - 4) >> 2) + 1;
    v70 = 4 * (v69 & 0x7FFFFFFFFFFFFFF8);
    v71 = &v63[-v70];
    v67 = &v66[-v70];
    v72 = &v64[4 * v68 - 16];
    v73 = (__int128 *)(v63 - 16);
    v74 = v69 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v75 = *v73;
      *((_OWORD *)v72 - 1) = *(v73 - 1);
      *(_OWORD *)v72 = v75;
      v72 -= 32;
      v73 -= 2;
      v74 -= 8;
    }
    while (v74);
    v63 = v71;
    if (v69 != (v69 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_53;
  }
LABEL_54:
  *(_QWORD *)(a1 + 96) = v67;
  *(_QWORD *)(a1 + 104) = v66;
  *(_QWORD *)(a1 + 112) = v64 + 256;
  if (v62)
    operator delete(v62);
LABEL_56:
  v77 = *(_BYTE **)(a1 + 120);
  if (*(_QWORD *)(a1 + 136) - (_QWORD)v77 > 0xFFuLL)
    goto LABEL_67;
  v78 = *(_BYTE **)(a1 + 128);
  v79 = (char *)operator new(0x100uLL);
  v80 = v78 - v77;
  v81 = &v79[(v78 - v77) & 0xFFFFFFFFFFFFFFFCLL];
  v82 = v81;
  if (v78 != v77)
  {
    if ((unint64_t)(v80 - 4) < 0x2C)
    {
      v82 = &v79[(v78 - v77) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_64:
        v91 = *((_DWORD *)v78 - 1);
        v78 -= 4;
        *((_DWORD *)v82 - 1) = v91;
        v82 -= 4;
      }
      while (v78 != v77);
      goto LABEL_65;
    }
    v82 = &v79[(v78 - v77) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(v78 - &v79[v80 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
      goto LABEL_64;
    v83 = v80 >> 2;
    v84 = ((unint64_t)(v80 - 4) >> 2) + 1;
    v85 = 4 * (v84 & 0x7FFFFFFFFFFFFFF8);
    v86 = &v78[-v85];
    v82 = &v81[-v85];
    v87 = &v79[4 * v83 - 16];
    v88 = (__int128 *)(v78 - 16);
    v89 = v84 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v90 = *v88;
      *((_OWORD *)v87 - 1) = *(v88 - 1);
      *(_OWORD *)v87 = v90;
      v87 -= 32;
      v88 -= 2;
      v89 -= 8;
    }
    while (v89);
    v78 = v86;
    if (v84 != (v84 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_64;
  }
LABEL_65:
  *(_QWORD *)(a1 + 120) = v82;
  *(_QWORD *)(a1 + 128) = v81;
  *(_QWORD *)(a1 + 136) = v79 + 256;
  if (v77)
    operator delete(v77);
LABEL_67:
  v92 = *(_BYTE **)(a1 + 144);
  if (*(_QWORD *)(a1 + 160) - (_QWORD)v92 > 0xFFuLL)
    return;
  v93 = *(_BYTE **)(a1 + 152);
  v94 = (char *)operator new(0x100uLL);
  v95 = v93 - v92;
  v96 = &v94[(v93 - v92) & 0xFFFFFFFFFFFFFFFCLL];
  v97 = v96;
  if (v93 != v92)
  {
    if ((unint64_t)(v95 - 4) >= 0x2C)
    {
      v97 = &v94[(v93 - v92) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(v93 - &v94[v95 & 0xFFFFFFFFFFFFFFFCLL]) >= 0x20)
      {
        v98 = v95 >> 2;
        v99 = ((unint64_t)(v95 - 4) >> 2) + 1;
        v100 = 4 * (v99 & 0x7FFFFFFFFFFFFFF8);
        v101 = &v93[-v100];
        v97 = &v96[-v100];
        v102 = &v94[4 * v98 - 16];
        v103 = (__int128 *)(v93 - 16);
        v104 = v99 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v105 = *v103;
          *((_OWORD *)v102 - 1) = *(v103 - 1);
          *(_OWORD *)v102 = v105;
          v102 -= 32;
          v103 -= 2;
          v104 -= 8;
        }
        while (v104);
        v93 = v101;
        if (v99 == (v99 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_76;
      }
    }
    else
    {
      v97 = &v94[(v93 - v92) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v106 = *((_DWORD *)v93 - 1);
      v93 -= 4;
      *((_DWORD *)v97 - 1) = v106;
      v97 -= 4;
    }
    while (v93 != v92);
  }
LABEL_76:
  *(_QWORD *)(a1 + 144) = v97;
  *(_QWORD *)(a1 + 152) = v96;
  *(_QWORD *)(a1 + 160) = v94 + 256;
  if (v92)
    operator delete(v92);
}

void sub_20F59B0EC(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t *v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t *v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t *v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  unint64_t v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t *v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  unint64_t v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t *v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t *v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  unint64_t v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t *v406;
  uint64_t v407;
  uint64_t v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t *v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  unint64_t v422;
  unint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t *v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t v433;
  unint64_t v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t *v442;
  uint64_t v443;
  uint64_t v444;
  unint64_t v445;
  unint64_t v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t *v454;
  uint64_t v455;
  uint64_t v456;
  unint64_t v457;
  unint64_t v458;
  unint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t *v466;
  uint64_t v467;
  uint64_t v468;
  unint64_t v469;
  unint64_t v470;
  unint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t *v478;
  uint64_t v479;
  uint64_t v480;
  unint64_t v481;
  unint64_t v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t *v490;
  uint64_t v491;
  uint64_t v492;
  unint64_t v493;
  unint64_t v494;
  unint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t *v502;
  uint64_t v503;
  uint64_t v504;
  unint64_t v505;
  unint64_t v506;
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t *v514;
  uint64_t v515;
  uint64_t v516;
  unint64_t v517;
  unint64_t v518;
  unint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t *v526;
  uint64_t v527;
  uint64_t v528;
  unint64_t v529;
  unint64_t v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t *v538;
  uint64_t v539;
  uint64_t v540;
  unint64_t v541;
  unint64_t v542;
  unint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t *v550;
  uint64_t v551;
  uint64_t v552;
  unint64_t v553;
  unint64_t v554;
  unint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t *v562;
  uint64_t v563;
  uint64_t v564;
  unint64_t v565;
  unint64_t v566;
  unint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t *v574;
  uint64_t v575;
  uint64_t v576;
  unint64_t v577;
  unint64_t v578;
  unint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t *v586;
  uint64_t v587;
  uint64_t v588;
  unint64_t v589;

  v2 = *(unsigned int *)(a1 + 876);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(a1 + 984);
    do
    {
      v5 = *(_QWORD *)(v4 + 8 * v3);
      if (v5)
      {
        v6 = *(_QWORD *)(a1 + 920);
        v7 = *(_QWORD *)(a1 + 912);
        v8 = *(_QWORD *)(a1 + 944);
        v9 = 16 * v5;
        v10 = (uint64_t *)(*(_QWORD *)(a1 + 952) + 16 * (*(_DWORD *)(a1 + 976) * v3) + 8);
        do
        {
          v12 = ((v6 - v7) << 6) - 1;
          if (v6 == v7)
            v12 = 0;
          v13 = *(_QWORD *)(a1 + 936) + v8;
          if (v12 == v13)
          {
            sub_20EDB36DC(a1 + 904);
            v7 = *(_QWORD *)(a1 + 912);
            v6 = *(_QWORD *)(a1 + 920);
            v13 = *(_QWORD *)(a1 + 944) + *(_QWORD *)(a1 + 936);
          }
          v11 = *v10;
          v10 += 2;
          *(_QWORD *)(*(_QWORD *)(v7 + ((v13 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v13 & 0x1FF)) = v11;
          v8 = *(_QWORD *)(a1 + 944) + 1;
          *(_QWORD *)(a1 + 944) = v8;
          v9 -= 16;
        }
        while (v9);
        v4 = *(_QWORD *)(a1 + 984);
        v2 = *(unsigned int *)(a1 + 876);
      }
      *(_QWORD *)(v4 + 8 * v3++) = 0;
    }
    while (v3 < v2);
  }
  v14 = *(unsigned int *)(a1 + 1884);
  if ((_DWORD)v14)
  {
    v15 = 0;
    v16 = *(_QWORD *)(a1 + 1992);
    do
    {
      v17 = *(_QWORD *)(v16 + 8 * v15);
      if (v17)
      {
        v18 = *(_QWORD *)(a1 + 1928);
        v19 = *(_QWORD *)(a1 + 1920);
        v20 = *(_QWORD *)(a1 + 1952);
        v21 = 16 * v17;
        v22 = (uint64_t *)(*(_QWORD *)(a1 + 1960) + 16 * (*(_DWORD *)(a1 + 1984) * v15) + 8);
        do
        {
          v24 = ((v18 - v19) << 6) - 1;
          if (v18 == v19)
            v24 = 0;
          v25 = *(_QWORD *)(a1 + 1944) + v20;
          if (v24 == v25)
          {
            sub_20EDB36DC(a1 + 1912);
            v19 = *(_QWORD *)(a1 + 1920);
            v18 = *(_QWORD *)(a1 + 1928);
            v25 = *(_QWORD *)(a1 + 1952) + *(_QWORD *)(a1 + 1944);
          }
          v23 = *v22;
          v22 += 2;
          *(_QWORD *)(*(_QWORD *)(v19 + ((v25 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v25 & 0x1FF)) = v23;
          v20 = *(_QWORD *)(a1 + 1952) + 1;
          *(_QWORD *)(a1 + 1952) = v20;
          v21 -= 16;
        }
        while (v21);
        v16 = *(_QWORD *)(a1 + 1992);
        v14 = *(unsigned int *)(a1 + 1884);
      }
      *(_QWORD *)(v16 + 8 * v15++) = 0;
    }
    while (v15 < v14);
  }
  v26 = *(unsigned int *)(a1 + 2892);
  if ((_DWORD)v26)
  {
    v27 = 0;
    v28 = *(_QWORD *)(a1 + 3000);
    do
    {
      v29 = *(_QWORD *)(v28 + 8 * v27);
      if (v29)
      {
        v30 = *(_QWORD *)(a1 + 2936);
        v31 = *(_QWORD *)(a1 + 2928);
        v32 = *(_QWORD *)(a1 + 2960);
        v33 = 16 * v29;
        v34 = (uint64_t *)(*(_QWORD *)(a1 + 2968) + 16 * (*(_DWORD *)(a1 + 2992) * v27) + 8);
        do
        {
          v36 = ((v30 - v31) << 6) - 1;
          if (v30 == v31)
            v36 = 0;
          v37 = *(_QWORD *)(a1 + 2952) + v32;
          if (v36 == v37)
          {
            sub_20EDB36DC(a1 + 2920);
            v31 = *(_QWORD *)(a1 + 2928);
            v30 = *(_QWORD *)(a1 + 2936);
            v37 = *(_QWORD *)(a1 + 2960) + *(_QWORD *)(a1 + 2952);
          }
          v35 = *v34;
          v34 += 2;
          *(_QWORD *)(*(_QWORD *)(v31 + ((v37 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v37 & 0x1FF)) = v35;
          v32 = *(_QWORD *)(a1 + 2960) + 1;
          *(_QWORD *)(a1 + 2960) = v32;
          v33 -= 16;
        }
        while (v33);
        v28 = *(_QWORD *)(a1 + 3000);
        v26 = *(unsigned int *)(a1 + 2892);
      }
      *(_QWORD *)(v28 + 8 * v27++) = 0;
    }
    while (v27 < v26);
  }
  v38 = *(unsigned int *)(a1 + 3900);
  if ((_DWORD)v38)
  {
    v39 = 0;
    v40 = *(_QWORD *)(a1 + 4008);
    do
    {
      v41 = *(_QWORD *)(v40 + 8 * v39);
      if (v41)
      {
        v42 = *(_QWORD *)(a1 + 3944);
        v43 = *(_QWORD *)(a1 + 3936);
        v44 = *(_QWORD *)(a1 + 3968);
        v45 = 16 * v41;
        v46 = (uint64_t *)(*(_QWORD *)(a1 + 3976) + 16 * (*(_DWORD *)(a1 + 4000) * v39) + 8);
        do
        {
          v48 = ((v42 - v43) << 6) - 1;
          if (v42 == v43)
            v48 = 0;
          v49 = *(_QWORD *)(a1 + 3960) + v44;
          if (v48 == v49)
          {
            sub_20EDB36DC(a1 + 3928);
            v43 = *(_QWORD *)(a1 + 3936);
            v42 = *(_QWORD *)(a1 + 3944);
            v49 = *(_QWORD *)(a1 + 3968) + *(_QWORD *)(a1 + 3960);
          }
          v47 = *v46;
          v46 += 2;
          *(_QWORD *)(*(_QWORD *)(v43 + ((v49 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v49 & 0x1FF)) = v47;
          v44 = *(_QWORD *)(a1 + 3968) + 1;
          *(_QWORD *)(a1 + 3968) = v44;
          v45 -= 16;
        }
        while (v45);
        v40 = *(_QWORD *)(a1 + 4008);
        v38 = *(unsigned int *)(a1 + 3900);
      }
      *(_QWORD *)(v40 + 8 * v39++) = 0;
    }
    while (v39 < v38);
  }
  v50 = *(unsigned int *)(a1 + 4908);
  if ((_DWORD)v50)
  {
    v51 = 0;
    v52 = *(_QWORD *)(a1 + 5016);
    do
    {
      v53 = *(_QWORD *)(v52 + 8 * v51);
      if (v53)
      {
        v54 = *(_QWORD *)(a1 + 4952);
        v55 = *(_QWORD *)(a1 + 4944);
        v56 = *(_QWORD *)(a1 + 4976);
        v57 = 16 * v53;
        v58 = (uint64_t *)(*(_QWORD *)(a1 + 4984) + 16 * (*(_DWORD *)(a1 + 5008) * v51) + 8);
        do
        {
          v60 = ((v54 - v55) << 6) - 1;
          if (v54 == v55)
            v60 = 0;
          v61 = *(_QWORD *)(a1 + 4968) + v56;
          if (v60 == v61)
          {
            sub_20EDB36DC(a1 + 4936);
            v55 = *(_QWORD *)(a1 + 4944);
            v54 = *(_QWORD *)(a1 + 4952);
            v61 = *(_QWORD *)(a1 + 4976) + *(_QWORD *)(a1 + 4968);
          }
          v59 = *v58;
          v58 += 2;
          *(_QWORD *)(*(_QWORD *)(v55 + ((v61 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v61 & 0x1FF)) = v59;
          v56 = *(_QWORD *)(a1 + 4976) + 1;
          *(_QWORD *)(a1 + 4976) = v56;
          v57 -= 16;
        }
        while (v57);
        v52 = *(_QWORD *)(a1 + 5016);
        v50 = *(unsigned int *)(a1 + 4908);
      }
      *(_QWORD *)(v52 + 8 * v51++) = 0;
    }
    while (v51 < v50);
  }
  v62 = *(unsigned int *)(a1 + 5916);
  if ((_DWORD)v62)
  {
    v63 = 0;
    v64 = *(_QWORD *)(a1 + 6024);
    do
    {
      v65 = *(_QWORD *)(v64 + 8 * v63);
      if (v65)
      {
        v66 = *(_QWORD *)(a1 + 5960);
        v67 = *(_QWORD *)(a1 + 5952);
        v68 = *(_QWORD *)(a1 + 5984);
        v69 = 16 * v65;
        v70 = (uint64_t *)(*(_QWORD *)(a1 + 5992) + 16 * (*(_DWORD *)(a1 + 6016) * v63) + 8);
        do
        {
          v72 = ((v66 - v67) << 6) - 1;
          if (v66 == v67)
            v72 = 0;
          v73 = *(_QWORD *)(a1 + 5976) + v68;
          if (v72 == v73)
          {
            sub_20EDB36DC(a1 + 5944);
            v67 = *(_QWORD *)(a1 + 5952);
            v66 = *(_QWORD *)(a1 + 5960);
            v73 = *(_QWORD *)(a1 + 5984) + *(_QWORD *)(a1 + 5976);
          }
          v71 = *v70;
          v70 += 2;
          *(_QWORD *)(*(_QWORD *)(v67 + ((v73 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v73 & 0x1FF)) = v71;
          v68 = *(_QWORD *)(a1 + 5984) + 1;
          *(_QWORD *)(a1 + 5984) = v68;
          v69 -= 16;
        }
        while (v69);
        v64 = *(_QWORD *)(a1 + 6024);
        v62 = *(unsigned int *)(a1 + 5916);
      }
      *(_QWORD *)(v64 + 8 * v63++) = 0;
    }
    while (v63 < v62);
  }
  v74 = *(unsigned int *)(a1 + 6924);
  if ((_DWORD)v74)
  {
    v75 = 0;
    v76 = *(_QWORD *)(a1 + 7032);
    do
    {
      v77 = *(_QWORD *)(v76 + 8 * v75);
      if (v77)
      {
        v78 = *(_QWORD *)(a1 + 6968);
        v79 = *(_QWORD *)(a1 + 6960);
        v80 = *(_QWORD *)(a1 + 6992);
        v81 = 16 * v77;
        v82 = (uint64_t *)(*(_QWORD *)(a1 + 7000) + 16 * (*(_DWORD *)(a1 + 7024) * v75) + 8);
        do
        {
          v84 = ((v78 - v79) << 6) - 1;
          if (v78 == v79)
            v84 = 0;
          v85 = *(_QWORD *)(a1 + 6984) + v80;
          if (v84 == v85)
          {
            sub_20EDB36DC(a1 + 6952);
            v79 = *(_QWORD *)(a1 + 6960);
            v78 = *(_QWORD *)(a1 + 6968);
            v85 = *(_QWORD *)(a1 + 6992) + *(_QWORD *)(a1 + 6984);
          }
          v83 = *v82;
          v82 += 2;
          *(_QWORD *)(*(_QWORD *)(v79 + ((v85 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v85 & 0x1FF)) = v83;
          v80 = *(_QWORD *)(a1 + 6992) + 1;
          *(_QWORD *)(a1 + 6992) = v80;
          v81 -= 16;
        }
        while (v81);
        v76 = *(_QWORD *)(a1 + 7032);
        v74 = *(unsigned int *)(a1 + 6924);
      }
      *(_QWORD *)(v76 + 8 * v75++) = 0;
    }
    while (v75 < v74);
  }
  v86 = *(unsigned int *)(a1 + 732);
  if ((_DWORD)v86)
  {
    v87 = 0;
    v88 = *(_QWORD *)(a1 + 840);
    do
    {
      v89 = *(_QWORD *)(v88 + 8 * v87);
      if (v89)
      {
        v90 = *(_QWORD *)(a1 + 776);
        v91 = *(_QWORD *)(a1 + 768);
        v92 = *(_QWORD *)(a1 + 800);
        v93 = 16 * v89;
        v94 = (uint64_t *)(*(_QWORD *)(a1 + 808) + 16 * (*(_DWORD *)(a1 + 832) * v87) + 8);
        do
        {
          v96 = ((v90 - v91) << 6) - 1;
          if (v90 == v91)
            v96 = 0;
          v97 = *(_QWORD *)(a1 + 792) + v92;
          if (v96 == v97)
          {
            sub_20EDB36DC(a1 + 760);
            v91 = *(_QWORD *)(a1 + 768);
            v90 = *(_QWORD *)(a1 + 776);
            v97 = *(_QWORD *)(a1 + 800) + *(_QWORD *)(a1 + 792);
          }
          v95 = *v94;
          v94 += 2;
          *(_QWORD *)(*(_QWORD *)(v91 + ((v97 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v97 & 0x1FF)) = v95;
          v92 = *(_QWORD *)(a1 + 800) + 1;
          *(_QWORD *)(a1 + 800) = v92;
          v93 -= 16;
        }
        while (v93);
        v88 = *(_QWORD *)(a1 + 840);
        v86 = *(unsigned int *)(a1 + 732);
      }
      *(_QWORD *)(v88 + 8 * v87++) = 0;
    }
    while (v87 < v86);
  }
  v98 = *(unsigned int *)(a1 + 1740);
  if ((_DWORD)v98)
  {
    v99 = 0;
    v100 = *(_QWORD *)(a1 + 1848);
    do
    {
      v101 = *(_QWORD *)(v100 + 8 * v99);
      if (v101)
      {
        v102 = *(_QWORD *)(a1 + 1784);
        v103 = *(_QWORD *)(a1 + 1776);
        v104 = *(_QWORD *)(a1 + 1808);
        v105 = 16 * v101;
        v106 = (uint64_t *)(*(_QWORD *)(a1 + 1816) + 16 * (*(_DWORD *)(a1 + 1840) * v99) + 8);
        do
        {
          v108 = ((v102 - v103) << 6) - 1;
          if (v102 == v103)
            v108 = 0;
          v109 = *(_QWORD *)(a1 + 1800) + v104;
          if (v108 == v109)
          {
            sub_20EDB36DC(a1 + 1768);
            v103 = *(_QWORD *)(a1 + 1776);
            v102 = *(_QWORD *)(a1 + 1784);
            v109 = *(_QWORD *)(a1 + 1808) + *(_QWORD *)(a1 + 1800);
          }
          v107 = *v106;
          v106 += 2;
          *(_QWORD *)(*(_QWORD *)(v103 + ((v109 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v109 & 0x1FF)) = v107;
          v104 = *(_QWORD *)(a1 + 1808) + 1;
          *(_QWORD *)(a1 + 1808) = v104;
          v105 -= 16;
        }
        while (v105);
        v100 = *(_QWORD *)(a1 + 1848);
        v98 = *(unsigned int *)(a1 + 1740);
      }
      *(_QWORD *)(v100 + 8 * v99++) = 0;
    }
    while (v99 < v98);
  }
  v110 = *(unsigned int *)(a1 + 2748);
  if ((_DWORD)v110)
  {
    v111 = 0;
    v112 = *(_QWORD *)(a1 + 2856);
    do
    {
      v113 = *(_QWORD *)(v112 + 8 * v111);
      if (v113)
      {
        v114 = *(_QWORD *)(a1 + 2792);
        v115 = *(_QWORD *)(a1 + 2784);
        v116 = *(_QWORD *)(a1 + 2816);
        v117 = 16 * v113;
        v118 = (uint64_t *)(*(_QWORD *)(a1 + 2824) + 16 * (*(_DWORD *)(a1 + 2848) * v111) + 8);
        do
        {
          v120 = ((v114 - v115) << 6) - 1;
          if (v114 == v115)
            v120 = 0;
          v121 = *(_QWORD *)(a1 + 2808) + v116;
          if (v120 == v121)
          {
            sub_20EDB36DC(a1 + 2776);
            v115 = *(_QWORD *)(a1 + 2784);
            v114 = *(_QWORD *)(a1 + 2792);
            v121 = *(_QWORD *)(a1 + 2816) + *(_QWORD *)(a1 + 2808);
          }
          v119 = *v118;
          v118 += 2;
          *(_QWORD *)(*(_QWORD *)(v115 + ((v121 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v121 & 0x1FF)) = v119;
          v116 = *(_QWORD *)(a1 + 2816) + 1;
          *(_QWORD *)(a1 + 2816) = v116;
          v117 -= 16;
        }
        while (v117);
        v112 = *(_QWORD *)(a1 + 2856);
        v110 = *(unsigned int *)(a1 + 2748);
      }
      *(_QWORD *)(v112 + 8 * v111++) = 0;
    }
    while (v111 < v110);
  }
  v122 = *(unsigned int *)(a1 + 3756);
  if ((_DWORD)v122)
  {
    v123 = 0;
    v124 = *(_QWORD *)(a1 + 3864);
    do
    {
      v125 = *(_QWORD *)(v124 + 8 * v123);
      if (v125)
      {
        v126 = *(_QWORD *)(a1 + 3800);
        v127 = *(_QWORD *)(a1 + 3792);
        v128 = *(_QWORD *)(a1 + 3824);
        v129 = 16 * v125;
        v130 = (uint64_t *)(*(_QWORD *)(a1 + 3832) + 16 * (*(_DWORD *)(a1 + 3856) * v123) + 8);
        do
        {
          v132 = ((v126 - v127) << 6) - 1;
          if (v126 == v127)
            v132 = 0;
          v133 = *(_QWORD *)(a1 + 3816) + v128;
          if (v132 == v133)
          {
            sub_20EDB36DC(a1 + 3784);
            v127 = *(_QWORD *)(a1 + 3792);
            v126 = *(_QWORD *)(a1 + 3800);
            v133 = *(_QWORD *)(a1 + 3824) + *(_QWORD *)(a1 + 3816);
          }
          v131 = *v130;
          v130 += 2;
          *(_QWORD *)(*(_QWORD *)(v127 + ((v133 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v133 & 0x1FF)) = v131;
          v128 = *(_QWORD *)(a1 + 3824) + 1;
          *(_QWORD *)(a1 + 3824) = v128;
          v129 -= 16;
        }
        while (v129);
        v124 = *(_QWORD *)(a1 + 3864);
        v122 = *(unsigned int *)(a1 + 3756);
      }
      *(_QWORD *)(v124 + 8 * v123++) = 0;
    }
    while (v123 < v122);
  }
  v134 = *(unsigned int *)(a1 + 4764);
  if ((_DWORD)v134)
  {
    v135 = 0;
    v136 = *(_QWORD *)(a1 + 4872);
    do
    {
      v137 = *(_QWORD *)(v136 + 8 * v135);
      if (v137)
      {
        v138 = *(_QWORD *)(a1 + 4808);
        v139 = *(_QWORD *)(a1 + 4800);
        v140 = *(_QWORD *)(a1 + 4832);
        v141 = 16 * v137;
        v142 = (uint64_t *)(*(_QWORD *)(a1 + 4840) + 16 * (*(_DWORD *)(a1 + 4864) * v135) + 8);
        do
        {
          v144 = ((v138 - v139) << 6) - 1;
          if (v138 == v139)
            v144 = 0;
          v145 = *(_QWORD *)(a1 + 4824) + v140;
          if (v144 == v145)
          {
            sub_20EDB36DC(a1 + 4792);
            v139 = *(_QWORD *)(a1 + 4800);
            v138 = *(_QWORD *)(a1 + 4808);
            v145 = *(_QWORD *)(a1 + 4832) + *(_QWORD *)(a1 + 4824);
          }
          v143 = *v142;
          v142 += 2;
          *(_QWORD *)(*(_QWORD *)(v139 + ((v145 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v145 & 0x1FF)) = v143;
          v140 = *(_QWORD *)(a1 + 4832) + 1;
          *(_QWORD *)(a1 + 4832) = v140;
          v141 -= 16;
        }
        while (v141);
        v136 = *(_QWORD *)(a1 + 4872);
        v134 = *(unsigned int *)(a1 + 4764);
      }
      *(_QWORD *)(v136 + 8 * v135++) = 0;
    }
    while (v135 < v134);
  }
  v146 = *(unsigned int *)(a1 + 5772);
  if ((_DWORD)v146)
  {
    v147 = 0;
    v148 = *(_QWORD *)(a1 + 5880);
    do
    {
      v149 = *(_QWORD *)(v148 + 8 * v147);
      if (v149)
      {
        v150 = *(_QWORD *)(a1 + 5816);
        v151 = *(_QWORD *)(a1 + 5808);
        v152 = *(_QWORD *)(a1 + 5840);
        v153 = 16 * v149;
        v154 = (uint64_t *)(*(_QWORD *)(a1 + 5848) + 16 * (*(_DWORD *)(a1 + 5872) * v147) + 8);
        do
        {
          v156 = ((v150 - v151) << 6) - 1;
          if (v150 == v151)
            v156 = 0;
          v157 = *(_QWORD *)(a1 + 5832) + v152;
          if (v156 == v157)
          {
            sub_20EDB36DC(a1 + 5800);
            v151 = *(_QWORD *)(a1 + 5808);
            v150 = *(_QWORD *)(a1 + 5816);
            v157 = *(_QWORD *)(a1 + 5840) + *(_QWORD *)(a1 + 5832);
          }
          v155 = *v154;
          v154 += 2;
          *(_QWORD *)(*(_QWORD *)(v151 + ((v157 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v157 & 0x1FF)) = v155;
          v152 = *(_QWORD *)(a1 + 5840) + 1;
          *(_QWORD *)(a1 + 5840) = v152;
          v153 -= 16;
        }
        while (v153);
        v148 = *(_QWORD *)(a1 + 5880);
        v146 = *(unsigned int *)(a1 + 5772);
      }
      *(_QWORD *)(v148 + 8 * v147++) = 0;
    }
    while (v147 < v146);
  }
  v158 = *(unsigned int *)(a1 + 6780);
  if ((_DWORD)v158)
  {
    v159 = 0;
    v160 = *(_QWORD *)(a1 + 6888);
    do
    {
      v161 = *(_QWORD *)(v160 + 8 * v159);
      if (v161)
      {
        v162 = *(_QWORD *)(a1 + 6824);
        v163 = *(_QWORD *)(a1 + 6816);
        v164 = *(_QWORD *)(a1 + 6848);
        v165 = 16 * v161;
        v166 = (uint64_t *)(*(_QWORD *)(a1 + 6856) + 16 * (*(_DWORD *)(a1 + 6880) * v159) + 8);
        do
        {
          v168 = ((v162 - v163) << 6) - 1;
          if (v162 == v163)
            v168 = 0;
          v169 = *(_QWORD *)(a1 + 6840) + v164;
          if (v168 == v169)
          {
            sub_20EDB36DC(a1 + 6808);
            v163 = *(_QWORD *)(a1 + 6816);
            v162 = *(_QWORD *)(a1 + 6824);
            v169 = *(_QWORD *)(a1 + 6848) + *(_QWORD *)(a1 + 6840);
          }
          v167 = *v166;
          v166 += 2;
          *(_QWORD *)(*(_QWORD *)(v163 + ((v169 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v169 & 0x1FF)) = v167;
          v164 = *(_QWORD *)(a1 + 6848) + 1;
          *(_QWORD *)(a1 + 6848) = v164;
          v165 -= 16;
        }
        while (v165);
        v160 = *(_QWORD *)(a1 + 6888);
        v158 = *(unsigned int *)(a1 + 6780);
      }
      *(_QWORD *)(v160 + 8 * v159++) = 0;
    }
    while (v159 < v158);
  }
  v170 = *(unsigned int *)(a1 + 588);
  if ((_DWORD)v170)
  {
    v171 = 0;
    v172 = *(_QWORD *)(a1 + 696);
    do
    {
      v173 = *(_QWORD *)(v172 + 8 * v171);
      if (v173)
      {
        v174 = *(_QWORD *)(a1 + 632);
        v175 = *(_QWORD *)(a1 + 624);
        v176 = *(_QWORD *)(a1 + 656);
        v177 = 16 * v173;
        v178 = (uint64_t *)(*(_QWORD *)(a1 + 664) + 16 * (*(_DWORD *)(a1 + 688) * v171) + 8);
        do
        {
          v180 = ((v174 - v175) << 6) - 1;
          if (v174 == v175)
            v180 = 0;
          v181 = *(_QWORD *)(a1 + 648) + v176;
          if (v180 == v181)
          {
            sub_20EDB36DC(a1 + 616);
            v175 = *(_QWORD *)(a1 + 624);
            v174 = *(_QWORD *)(a1 + 632);
            v181 = *(_QWORD *)(a1 + 656) + *(_QWORD *)(a1 + 648);
          }
          v179 = *v178;
          v178 += 2;
          *(_QWORD *)(*(_QWORD *)(v175 + ((v181 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v181 & 0x1FF)) = v179;
          v176 = *(_QWORD *)(a1 + 656) + 1;
          *(_QWORD *)(a1 + 656) = v176;
          v177 -= 16;
        }
        while (v177);
        v172 = *(_QWORD *)(a1 + 696);
        v170 = *(unsigned int *)(a1 + 588);
      }
      *(_QWORD *)(v172 + 8 * v171++) = 0;
    }
    while (v171 < v170);
  }
  v182 = *(unsigned int *)(a1 + 1596);
  if ((_DWORD)v182)
  {
    v183 = 0;
    v184 = *(_QWORD *)(a1 + 1704);
    do
    {
      v185 = *(_QWORD *)(v184 + 8 * v183);
      if (v185)
      {
        v186 = *(_QWORD *)(a1 + 1640);
        v187 = *(_QWORD *)(a1 + 1632);
        v188 = *(_QWORD *)(a1 + 1664);
        v189 = 16 * v185;
        v190 = (uint64_t *)(*(_QWORD *)(a1 + 1672) + 16 * (*(_DWORD *)(a1 + 1696) * v183) + 8);
        do
        {
          v192 = ((v186 - v187) << 6) - 1;
          if (v186 == v187)
            v192 = 0;
          v193 = *(_QWORD *)(a1 + 1656) + v188;
          if (v192 == v193)
          {
            sub_20EDB36DC(a1 + 1624);
            v187 = *(_QWORD *)(a1 + 1632);
            v186 = *(_QWORD *)(a1 + 1640);
            v193 = *(_QWORD *)(a1 + 1664) + *(_QWORD *)(a1 + 1656);
          }
          v191 = *v190;
          v190 += 2;
          *(_QWORD *)(*(_QWORD *)(v187 + ((v193 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v193 & 0x1FF)) = v191;
          v188 = *(_QWORD *)(a1 + 1664) + 1;
          *(_QWORD *)(a1 + 1664) = v188;
          v189 -= 16;
        }
        while (v189);
        v184 = *(_QWORD *)(a1 + 1704);
        v182 = *(unsigned int *)(a1 + 1596);
      }
      *(_QWORD *)(v184 + 8 * v183++) = 0;
    }
    while (v183 < v182);
  }
  v194 = *(unsigned int *)(a1 + 2604);
  if ((_DWORD)v194)
  {
    v195 = 0;
    v196 = *(_QWORD *)(a1 + 2712);
    do
    {
      v197 = *(_QWORD *)(v196 + 8 * v195);
      if (v197)
      {
        v198 = *(_QWORD *)(a1 + 2648);
        v199 = *(_QWORD *)(a1 + 2640);
        v200 = *(_QWORD *)(a1 + 2672);
        v201 = 16 * v197;
        v202 = (uint64_t *)(*(_QWORD *)(a1 + 2680) + 16 * (*(_DWORD *)(a1 + 2704) * v195) + 8);
        do
        {
          v204 = ((v198 - v199) << 6) - 1;
          if (v198 == v199)
            v204 = 0;
          v205 = *(_QWORD *)(a1 + 2664) + v200;
          if (v204 == v205)
          {
            sub_20EDB36DC(a1 + 2632);
            v199 = *(_QWORD *)(a1 + 2640);
            v198 = *(_QWORD *)(a1 + 2648);
            v205 = *(_QWORD *)(a1 + 2672) + *(_QWORD *)(a1 + 2664);
          }
          v203 = *v202;
          v202 += 2;
          *(_QWORD *)(*(_QWORD *)(v199 + ((v205 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v205 & 0x1FF)) = v203;
          v200 = *(_QWORD *)(a1 + 2672) + 1;
          *(_QWORD *)(a1 + 2672) = v200;
          v201 -= 16;
        }
        while (v201);
        v196 = *(_QWORD *)(a1 + 2712);
        v194 = *(unsigned int *)(a1 + 2604);
      }
      *(_QWORD *)(v196 + 8 * v195++) = 0;
    }
    while (v195 < v194);
  }
  v206 = *(unsigned int *)(a1 + 3612);
  if ((_DWORD)v206)
  {
    v207 = 0;
    v208 = *(_QWORD *)(a1 + 3720);
    do
    {
      v209 = *(_QWORD *)(v208 + 8 * v207);
      if (v209)
      {
        v210 = *(_QWORD *)(a1 + 3656);
        v211 = *(_QWORD *)(a1 + 3648);
        v212 = *(_QWORD *)(a1 + 3680);
        v213 = 16 * v209;
        v214 = (uint64_t *)(*(_QWORD *)(a1 + 3688) + 16 * (*(_DWORD *)(a1 + 3712) * v207) + 8);
        do
        {
          v216 = ((v210 - v211) << 6) - 1;
          if (v210 == v211)
            v216 = 0;
          v217 = *(_QWORD *)(a1 + 3672) + v212;
          if (v216 == v217)
          {
            sub_20EDB36DC(a1 + 3640);
            v211 = *(_QWORD *)(a1 + 3648);
            v210 = *(_QWORD *)(a1 + 3656);
            v217 = *(_QWORD *)(a1 + 3680) + *(_QWORD *)(a1 + 3672);
          }
          v215 = *v214;
          v214 += 2;
          *(_QWORD *)(*(_QWORD *)(v211 + ((v217 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v217 & 0x1FF)) = v215;
          v212 = *(_QWORD *)(a1 + 3680) + 1;
          *(_QWORD *)(a1 + 3680) = v212;
          v213 -= 16;
        }
        while (v213);
        v208 = *(_QWORD *)(a1 + 3720);
        v206 = *(unsigned int *)(a1 + 3612);
      }
      *(_QWORD *)(v208 + 8 * v207++) = 0;
    }
    while (v207 < v206);
  }
  v218 = *(unsigned int *)(a1 + 4620);
  if ((_DWORD)v218)
  {
    v219 = 0;
    v220 = *(_QWORD *)(a1 + 4728);
    do
    {
      v221 = *(_QWORD *)(v220 + 8 * v219);
      if (v221)
      {
        v222 = *(_QWORD *)(a1 + 4664);
        v223 = *(_QWORD *)(a1 + 4656);
        v224 = *(_QWORD *)(a1 + 4688);
        v225 = 16 * v221;
        v226 = (uint64_t *)(*(_QWORD *)(a1 + 4696) + 16 * (*(_DWORD *)(a1 + 4720) * v219) + 8);
        do
        {
          v228 = ((v222 - v223) << 6) - 1;
          if (v222 == v223)
            v228 = 0;
          v229 = *(_QWORD *)(a1 + 4680) + v224;
          if (v228 == v229)
          {
            sub_20EDB36DC(a1 + 4648);
            v223 = *(_QWORD *)(a1 + 4656);
            v222 = *(_QWORD *)(a1 + 4664);
            v229 = *(_QWORD *)(a1 + 4688) + *(_QWORD *)(a1 + 4680);
          }
          v227 = *v226;
          v226 += 2;
          *(_QWORD *)(*(_QWORD *)(v223 + ((v229 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v229 & 0x1FF)) = v227;
          v224 = *(_QWORD *)(a1 + 4688) + 1;
          *(_QWORD *)(a1 + 4688) = v224;
          v225 -= 16;
        }
        while (v225);
        v220 = *(_QWORD *)(a1 + 4728);
        v218 = *(unsigned int *)(a1 + 4620);
      }
      *(_QWORD *)(v220 + 8 * v219++) = 0;
    }
    while (v219 < v218);
  }
  v230 = *(unsigned int *)(a1 + 5628);
  if ((_DWORD)v230)
  {
    v231 = 0;
    v232 = *(_QWORD *)(a1 + 5736);
    do
    {
      v233 = *(_QWORD *)(v232 + 8 * v231);
      if (v233)
      {
        v234 = *(_QWORD *)(a1 + 5672);
        v235 = *(_QWORD *)(a1 + 5664);
        v236 = *(_QWORD *)(a1 + 5696);
        v237 = 16 * v233;
        v238 = (uint64_t *)(*(_QWORD *)(a1 + 5704) + 16 * (*(_DWORD *)(a1 + 5728) * v231) + 8);
        do
        {
          v240 = ((v234 - v235) << 6) - 1;
          if (v234 == v235)
            v240 = 0;
          v241 = *(_QWORD *)(a1 + 5688) + v236;
          if (v240 == v241)
          {
            sub_20EDB36DC(a1 + 5656);
            v235 = *(_QWORD *)(a1 + 5664);
            v234 = *(_QWORD *)(a1 + 5672);
            v241 = *(_QWORD *)(a1 + 5696) + *(_QWORD *)(a1 + 5688);
          }
          v239 = *v238;
          v238 += 2;
          *(_QWORD *)(*(_QWORD *)(v235 + ((v241 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v241 & 0x1FF)) = v239;
          v236 = *(_QWORD *)(a1 + 5696) + 1;
          *(_QWORD *)(a1 + 5696) = v236;
          v237 -= 16;
        }
        while (v237);
        v232 = *(_QWORD *)(a1 + 5736);
        v230 = *(unsigned int *)(a1 + 5628);
      }
      *(_QWORD *)(v232 + 8 * v231++) = 0;
    }
    while (v231 < v230);
  }
  v242 = *(unsigned int *)(a1 + 6636);
  if ((_DWORD)v242)
  {
    v243 = 0;
    v244 = *(_QWORD *)(a1 + 6744);
    do
    {
      v245 = *(_QWORD *)(v244 + 8 * v243);
      if (v245)
      {
        v246 = *(_QWORD *)(a1 + 6680);
        v247 = *(_QWORD *)(a1 + 6672);
        v248 = *(_QWORD *)(a1 + 6704);
        v249 = 16 * v245;
        v250 = (uint64_t *)(*(_QWORD *)(a1 + 6712) + 16 * (*(_DWORD *)(a1 + 6736) * v243) + 8);
        do
        {
          v252 = ((v246 - v247) << 6) - 1;
          if (v246 == v247)
            v252 = 0;
          v253 = *(_QWORD *)(a1 + 6696) + v248;
          if (v252 == v253)
          {
            sub_20EDB36DC(a1 + 6664);
            v247 = *(_QWORD *)(a1 + 6672);
            v246 = *(_QWORD *)(a1 + 6680);
            v253 = *(_QWORD *)(a1 + 6704) + *(_QWORD *)(a1 + 6696);
          }
          v251 = *v250;
          v250 += 2;
          *(_QWORD *)(*(_QWORD *)(v247 + ((v253 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v253 & 0x1FF)) = v251;
          v248 = *(_QWORD *)(a1 + 6704) + 1;
          *(_QWORD *)(a1 + 6704) = v248;
          v249 -= 16;
        }
        while (v249);
        v244 = *(_QWORD *)(a1 + 6744);
        v242 = *(unsigned int *)(a1 + 6636);
      }
      *(_QWORD *)(v244 + 8 * v243++) = 0;
    }
    while (v243 < v242);
  }
  v254 = *(unsigned int *)(a1 + 444);
  if ((_DWORD)v254)
  {
    v255 = 0;
    v256 = *(_QWORD *)(a1 + 552);
    do
    {
      v257 = *(_QWORD *)(v256 + 8 * v255);
      if (v257)
      {
        v258 = *(_QWORD *)(a1 + 480);
        v259 = *(_QWORD *)(a1 + 488);
        v260 = *(_QWORD *)(a1 + 512);
        v261 = 16 * v257;
        v262 = (uint64_t *)(*(_QWORD *)(a1 + 520) + 16 * (*(_DWORD *)(a1 + 544) * v255) + 8);
        do
        {
          v264 = ((v259 - v258) << 6) - 1;
          if (v259 == v258)
            v264 = 0;
          v265 = *(_QWORD *)(a1 + 504) + v260;
          if (v264 == v265)
          {
            sub_20EDB36DC(a1 + 472);
            v258 = *(_QWORD *)(a1 + 480);
            v259 = *(_QWORD *)(a1 + 488);
            v265 = *(_QWORD *)(a1 + 512) + *(_QWORD *)(a1 + 504);
          }
          v263 = *v262;
          v262 += 2;
          *(_QWORD *)(*(_QWORD *)(v258 + ((v265 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v265 & 0x1FF)) = v263;
          v260 = *(_QWORD *)(a1 + 512) + 1;
          *(_QWORD *)(a1 + 512) = v260;
          v261 -= 16;
        }
        while (v261);
        v256 = *(_QWORD *)(a1 + 552);
        v254 = *(unsigned int *)(a1 + 444);
      }
      *(_QWORD *)(v256 + 8 * v255++) = 0;
    }
    while (v255 < v254);
  }
  v266 = *(unsigned int *)(a1 + 1452);
  if ((_DWORD)v266)
  {
    v267 = 0;
    v268 = *(_QWORD *)(a1 + 1560);
    do
    {
      v269 = *(_QWORD *)(v268 + 8 * v267);
      if (v269)
      {
        v270 = *(_QWORD *)(a1 + 1496);
        v271 = *(_QWORD *)(a1 + 1488);
        v272 = *(_QWORD *)(a1 + 1520);
        v273 = 16 * v269;
        v274 = (uint64_t *)(*(_QWORD *)(a1 + 1528) + 16 * (*(_DWORD *)(a1 + 1552) * v267) + 8);
        do
        {
          v276 = ((v270 - v271) << 6) - 1;
          if (v270 == v271)
            v276 = 0;
          v277 = *(_QWORD *)(a1 + 1512) + v272;
          if (v276 == v277)
          {
            sub_20EDB36DC(a1 + 1480);
            v271 = *(_QWORD *)(a1 + 1488);
            v270 = *(_QWORD *)(a1 + 1496);
            v277 = *(_QWORD *)(a1 + 1520) + *(_QWORD *)(a1 + 1512);
          }
          v275 = *v274;
          v274 += 2;
          *(_QWORD *)(*(_QWORD *)(v271 + ((v277 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v277 & 0x1FF)) = v275;
          v272 = *(_QWORD *)(a1 + 1520) + 1;
          *(_QWORD *)(a1 + 1520) = v272;
          v273 -= 16;
        }
        while (v273);
        v268 = *(_QWORD *)(a1 + 1560);
        v266 = *(unsigned int *)(a1 + 1452);
      }
      *(_QWORD *)(v268 + 8 * v267++) = 0;
    }
    while (v267 < v266);
  }
  v278 = *(unsigned int *)(a1 + 2460);
  if ((_DWORD)v278)
  {
    v279 = 0;
    v280 = *(_QWORD *)(a1 + 2568);
    do
    {
      v281 = *(_QWORD *)(v280 + 8 * v279);
      if (v281)
      {
        v282 = *(_QWORD *)(a1 + 2504);
        v283 = *(_QWORD *)(a1 + 2496);
        v284 = *(_QWORD *)(a1 + 2528);
        v285 = 16 * v281;
        v286 = (uint64_t *)(*(_QWORD *)(a1 + 2536) + 16 * (*(_DWORD *)(a1 + 2560) * v279) + 8);
        do
        {
          v288 = ((v282 - v283) << 6) - 1;
          if (v282 == v283)
            v288 = 0;
          v289 = *(_QWORD *)(a1 + 2520) + v284;
          if (v288 == v289)
          {
            sub_20EDB36DC(a1 + 2488);
            v283 = *(_QWORD *)(a1 + 2496);
            v282 = *(_QWORD *)(a1 + 2504);
            v289 = *(_QWORD *)(a1 + 2528) + *(_QWORD *)(a1 + 2520);
          }
          v287 = *v286;
          v286 += 2;
          *(_QWORD *)(*(_QWORD *)(v283 + ((v289 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v289 & 0x1FF)) = v287;
          v284 = *(_QWORD *)(a1 + 2528) + 1;
          *(_QWORD *)(a1 + 2528) = v284;
          v285 -= 16;
        }
        while (v285);
        v280 = *(_QWORD *)(a1 + 2568);
        v278 = *(unsigned int *)(a1 + 2460);
      }
      *(_QWORD *)(v280 + 8 * v279++) = 0;
    }
    while (v279 < v278);
  }
  v290 = *(unsigned int *)(a1 + 3468);
  if ((_DWORD)v290)
  {
    v291 = 0;
    v292 = *(_QWORD *)(a1 + 3576);
    do
    {
      v293 = *(_QWORD *)(v292 + 8 * v291);
      if (v293)
      {
        v294 = *(_QWORD *)(a1 + 3512);
        v295 = *(_QWORD *)(a1 + 3504);
        v296 = *(_QWORD *)(a1 + 3536);
        v297 = 16 * v293;
        v298 = (uint64_t *)(*(_QWORD *)(a1 + 3544) + 16 * (*(_DWORD *)(a1 + 3568) * v291) + 8);
        do
        {
          v300 = ((v294 - v295) << 6) - 1;
          if (v294 == v295)
            v300 = 0;
          v301 = *(_QWORD *)(a1 + 3528) + v296;
          if (v300 == v301)
          {
            sub_20EDB36DC(a1 + 3496);
            v295 = *(_QWORD *)(a1 + 3504);
            v294 = *(_QWORD *)(a1 + 3512);
            v301 = *(_QWORD *)(a1 + 3536) + *(_QWORD *)(a1 + 3528);
          }
          v299 = *v298;
          v298 += 2;
          *(_QWORD *)(*(_QWORD *)(v295 + ((v301 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v301 & 0x1FF)) = v299;
          v296 = *(_QWORD *)(a1 + 3536) + 1;
          *(_QWORD *)(a1 + 3536) = v296;
          v297 -= 16;
        }
        while (v297);
        v292 = *(_QWORD *)(a1 + 3576);
        v290 = *(unsigned int *)(a1 + 3468);
      }
      *(_QWORD *)(v292 + 8 * v291++) = 0;
    }
    while (v291 < v290);
  }
  v302 = *(unsigned int *)(a1 + 4476);
  if ((_DWORD)v302)
  {
    v303 = 0;
    v304 = *(_QWORD *)(a1 + 4584);
    do
    {
      v305 = *(_QWORD *)(v304 + 8 * v303);
      if (v305)
      {
        v306 = *(_QWORD *)(a1 + 4520);
        v307 = *(_QWORD *)(a1 + 4512);
        v308 = *(_QWORD *)(a1 + 4544);
        v309 = 16 * v305;
        v310 = (uint64_t *)(*(_QWORD *)(a1 + 4552) + 16 * (*(_DWORD *)(a1 + 4576) * v303) + 8);
        do
        {
          v312 = ((v306 - v307) << 6) - 1;
          if (v306 == v307)
            v312 = 0;
          v313 = *(_QWORD *)(a1 + 4536) + v308;
          if (v312 == v313)
          {
            sub_20EDB36DC(a1 + 4504);
            v307 = *(_QWORD *)(a1 + 4512);
            v306 = *(_QWORD *)(a1 + 4520);
            v313 = *(_QWORD *)(a1 + 4544) + *(_QWORD *)(a1 + 4536);
          }
          v311 = *v310;
          v310 += 2;
          *(_QWORD *)(*(_QWORD *)(v307 + ((v313 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v313 & 0x1FF)) = v311;
          v308 = *(_QWORD *)(a1 + 4544) + 1;
          *(_QWORD *)(a1 + 4544) = v308;
          v309 -= 16;
        }
        while (v309);
        v304 = *(_QWORD *)(a1 + 4584);
        v302 = *(unsigned int *)(a1 + 4476);
      }
      *(_QWORD *)(v304 + 8 * v303++) = 0;
    }
    while (v303 < v302);
  }
  v314 = *(unsigned int *)(a1 + 5484);
  if ((_DWORD)v314)
  {
    v315 = 0;
    v316 = *(_QWORD *)(a1 + 5592);
    do
    {
      v317 = *(_QWORD *)(v316 + 8 * v315);
      if (v317)
      {
        v318 = *(_QWORD *)(a1 + 5528);
        v319 = *(_QWORD *)(a1 + 5520);
        v320 = *(_QWORD *)(a1 + 5552);
        v321 = 16 * v317;
        v322 = (uint64_t *)(*(_QWORD *)(a1 + 5560) + 16 * (*(_DWORD *)(a1 + 5584) * v315) + 8);
        do
        {
          v324 = ((v318 - v319) << 6) - 1;
          if (v318 == v319)
            v324 = 0;
          v325 = *(_QWORD *)(a1 + 5544) + v320;
          if (v324 == v325)
          {
            sub_20EDB36DC(a1 + 5512);
            v319 = *(_QWORD *)(a1 + 5520);
            v318 = *(_QWORD *)(a1 + 5528);
            v325 = *(_QWORD *)(a1 + 5552) + *(_QWORD *)(a1 + 5544);
          }
          v323 = *v322;
          v322 += 2;
          *(_QWORD *)(*(_QWORD *)(v319 + ((v325 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v325 & 0x1FF)) = v323;
          v320 = *(_QWORD *)(a1 + 5552) + 1;
          *(_QWORD *)(a1 + 5552) = v320;
          v321 -= 16;
        }
        while (v321);
        v316 = *(_QWORD *)(a1 + 5592);
        v314 = *(unsigned int *)(a1 + 5484);
      }
      *(_QWORD *)(v316 + 8 * v315++) = 0;
    }
    while (v315 < v314);
  }
  v326 = *(unsigned int *)(a1 + 6492);
  if ((_DWORD)v326)
  {
    v327 = 0;
    v328 = *(_QWORD *)(a1 + 6600);
    do
    {
      v329 = *(_QWORD *)(v328 + 8 * v327);
      if (v329)
      {
        v330 = *(_QWORD *)(a1 + 6536);
        v331 = *(_QWORD *)(a1 + 6528);
        v332 = *(_QWORD *)(a1 + 6560);
        v333 = 16 * v329;
        v334 = (uint64_t *)(*(_QWORD *)(a1 + 6568) + 16 * (*(_DWORD *)(a1 + 6592) * v327) + 8);
        do
        {
          v336 = ((v330 - v331) << 6) - 1;
          if (v330 == v331)
            v336 = 0;
          v337 = *(_QWORD *)(a1 + 6552) + v332;
          if (v336 == v337)
          {
            sub_20EDB36DC(a1 + 6520);
            v331 = *(_QWORD *)(a1 + 6528);
            v330 = *(_QWORD *)(a1 + 6536);
            v337 = *(_QWORD *)(a1 + 6560) + *(_QWORD *)(a1 + 6552);
          }
          v335 = *v334;
          v334 += 2;
          *(_QWORD *)(*(_QWORD *)(v331 + ((v337 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v337 & 0x1FF)) = v335;
          v332 = *(_QWORD *)(a1 + 6560) + 1;
          *(_QWORD *)(a1 + 6560) = v332;
          v333 -= 16;
        }
        while (v333);
        v328 = *(_QWORD *)(a1 + 6600);
        v326 = *(unsigned int *)(a1 + 6492);
      }
      *(_QWORD *)(v328 + 8 * v327++) = 0;
    }
    while (v327 < v326);
  }
  v338 = *(unsigned int *)(a1 + 300);
  if ((_DWORD)v338)
  {
    v339 = 0;
    v340 = *(_QWORD *)(a1 + 408);
    do
    {
      v341 = *(_QWORD *)(v340 + 8 * v339);
      if (v341)
      {
        v342 = *(_QWORD *)(a1 + 336);
        v343 = *(_QWORD *)(a1 + 344);
        v344 = *(_QWORD *)(a1 + 368);
        v345 = 16 * v341;
        v346 = (uint64_t *)(*(_QWORD *)(a1 + 376) + 16 * (*(_DWORD *)(a1 + 400) * v339) + 8);
        do
        {
          v348 = ((v343 - v342) << 6) - 1;
          if (v343 == v342)
            v348 = 0;
          v349 = *(_QWORD *)(a1 + 360) + v344;
          if (v348 == v349)
          {
            sub_20EDB36DC(a1 + 328);
            v342 = *(_QWORD *)(a1 + 336);
            v343 = *(_QWORD *)(a1 + 344);
            v349 = *(_QWORD *)(a1 + 368) + *(_QWORD *)(a1 + 360);
          }
          v347 = *v346;
          v346 += 2;
          *(_QWORD *)(*(_QWORD *)(v342 + ((v349 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v349 & 0x1FF)) = v347;
          v344 = *(_QWORD *)(a1 + 368) + 1;
          *(_QWORD *)(a1 + 368) = v344;
          v345 -= 16;
        }
        while (v345);
        v340 = *(_QWORD *)(a1 + 408);
        v338 = *(unsigned int *)(a1 + 300);
      }
      *(_QWORD *)(v340 + 8 * v339++) = 0;
    }
    while (v339 < v338);
  }
  v350 = *(unsigned int *)(a1 + 1308);
  if ((_DWORD)v350)
  {
    v351 = 0;
    v352 = *(_QWORD *)(a1 + 1416);
    do
    {
      v353 = *(_QWORD *)(v352 + 8 * v351);
      if (v353)
      {
        v354 = *(_QWORD *)(a1 + 1352);
        v355 = *(_QWORD *)(a1 + 1344);
        v356 = *(_QWORD *)(a1 + 1376);
        v357 = 16 * v353;
        v358 = (uint64_t *)(*(_QWORD *)(a1 + 1384) + 16 * (*(_DWORD *)(a1 + 1408) * v351) + 8);
        do
        {
          v360 = ((v354 - v355) << 6) - 1;
          if (v354 == v355)
            v360 = 0;
          v361 = *(_QWORD *)(a1 + 1368) + v356;
          if (v360 == v361)
          {
            sub_20EDB36DC(a1 + 1336);
            v355 = *(_QWORD *)(a1 + 1344);
            v354 = *(_QWORD *)(a1 + 1352);
            v361 = *(_QWORD *)(a1 + 1376) + *(_QWORD *)(a1 + 1368);
          }
          v359 = *v358;
          v358 += 2;
          *(_QWORD *)(*(_QWORD *)(v355 + ((v361 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v361 & 0x1FF)) = v359;
          v356 = *(_QWORD *)(a1 + 1376) + 1;
          *(_QWORD *)(a1 + 1376) = v356;
          v357 -= 16;
        }
        while (v357);
        v352 = *(_QWORD *)(a1 + 1416);
        v350 = *(unsigned int *)(a1 + 1308);
      }
      *(_QWORD *)(v352 + 8 * v351++) = 0;
    }
    while (v351 < v350);
  }
  v362 = *(unsigned int *)(a1 + 2316);
  if ((_DWORD)v362)
  {
    v363 = 0;
    v364 = *(_QWORD *)(a1 + 2424);
    do
    {
      v365 = *(_QWORD *)(v364 + 8 * v363);
      if (v365)
      {
        v366 = *(_QWORD *)(a1 + 2360);
        v367 = *(_QWORD *)(a1 + 2352);
        v368 = *(_QWORD *)(a1 + 2384);
        v369 = 16 * v365;
        v370 = (uint64_t *)(*(_QWORD *)(a1 + 2392) + 16 * (*(_DWORD *)(a1 + 2416) * v363) + 8);
        do
        {
          v372 = ((v366 - v367) << 6) - 1;
          if (v366 == v367)
            v372 = 0;
          v373 = *(_QWORD *)(a1 + 2376) + v368;
          if (v372 == v373)
          {
            sub_20EDB36DC(a1 + 2344);
            v367 = *(_QWORD *)(a1 + 2352);
            v366 = *(_QWORD *)(a1 + 2360);
            v373 = *(_QWORD *)(a1 + 2384) + *(_QWORD *)(a1 + 2376);
          }
          v371 = *v370;
          v370 += 2;
          *(_QWORD *)(*(_QWORD *)(v367 + ((v373 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v373 & 0x1FF)) = v371;
          v368 = *(_QWORD *)(a1 + 2384) + 1;
          *(_QWORD *)(a1 + 2384) = v368;
          v369 -= 16;
        }
        while (v369);
        v364 = *(_QWORD *)(a1 + 2424);
        v362 = *(unsigned int *)(a1 + 2316);
      }
      *(_QWORD *)(v364 + 8 * v363++) = 0;
    }
    while (v363 < v362);
  }
  v374 = *(unsigned int *)(a1 + 3324);
  if ((_DWORD)v374)
  {
    v375 = 0;
    v376 = *(_QWORD *)(a1 + 3432);
    do
    {
      v377 = *(_QWORD *)(v376 + 8 * v375);
      if (v377)
      {
        v378 = *(_QWORD *)(a1 + 3368);
        v379 = *(_QWORD *)(a1 + 3360);
        v380 = *(_QWORD *)(a1 + 3392);
        v381 = 16 * v377;
        v382 = (uint64_t *)(*(_QWORD *)(a1 + 3400) + 16 * (*(_DWORD *)(a1 + 3424) * v375) + 8);
        do
        {
          v384 = ((v378 - v379) << 6) - 1;
          if (v378 == v379)
            v384 = 0;
          v385 = *(_QWORD *)(a1 + 3384) + v380;
          if (v384 == v385)
          {
            sub_20EDB36DC(a1 + 3352);
            v379 = *(_QWORD *)(a1 + 3360);
            v378 = *(_QWORD *)(a1 + 3368);
            v385 = *(_QWORD *)(a1 + 3392) + *(_QWORD *)(a1 + 3384);
          }
          v383 = *v382;
          v382 += 2;
          *(_QWORD *)(*(_QWORD *)(v379 + ((v385 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v385 & 0x1FF)) = v383;
          v380 = *(_QWORD *)(a1 + 3392) + 1;
          *(_QWORD *)(a1 + 3392) = v380;
          v381 -= 16;
        }
        while (v381);
        v376 = *(_QWORD *)(a1 + 3432);
        v374 = *(unsigned int *)(a1 + 3324);
      }
      *(_QWORD *)(v376 + 8 * v375++) = 0;
    }
    while (v375 < v374);
  }
  v386 = *(unsigned int *)(a1 + 4332);
  if ((_DWORD)v386)
  {
    v387 = 0;
    v388 = *(_QWORD *)(a1 + 4440);
    do
    {
      v389 = *(_QWORD *)(v388 + 8 * v387);
      if (v389)
      {
        v390 = *(_QWORD *)(a1 + 4376);
        v391 = *(_QWORD *)(a1 + 4368);
        v392 = *(_QWORD *)(a1 + 4400);
        v393 = 16 * v389;
        v394 = (uint64_t *)(*(_QWORD *)(a1 + 4408) + 16 * (*(_DWORD *)(a1 + 4432) * v387) + 8);
        do
        {
          v396 = ((v390 - v391) << 6) - 1;
          if (v390 == v391)
            v396 = 0;
          v397 = *(_QWORD *)(a1 + 4392) + v392;
          if (v396 == v397)
          {
            sub_20EDB36DC(a1 + 4360);
            v391 = *(_QWORD *)(a1 + 4368);
            v390 = *(_QWORD *)(a1 + 4376);
            v397 = *(_QWORD *)(a1 + 4400) + *(_QWORD *)(a1 + 4392);
          }
          v395 = *v394;
          v394 += 2;
          *(_QWORD *)(*(_QWORD *)(v391 + ((v397 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v397 & 0x1FF)) = v395;
          v392 = *(_QWORD *)(a1 + 4400) + 1;
          *(_QWORD *)(a1 + 4400) = v392;
          v393 -= 16;
        }
        while (v393);
        v388 = *(_QWORD *)(a1 + 4440);
        v386 = *(unsigned int *)(a1 + 4332);
      }
      *(_QWORD *)(v388 + 8 * v387++) = 0;
    }
    while (v387 < v386);
  }
  v398 = *(unsigned int *)(a1 + 5340);
  if ((_DWORD)v398)
  {
    v399 = 0;
    v400 = *(_QWORD *)(a1 + 5448);
    do
    {
      v401 = *(_QWORD *)(v400 + 8 * v399);
      if (v401)
      {
        v402 = *(_QWORD *)(a1 + 5384);
        v403 = *(_QWORD *)(a1 + 5376);
        v404 = *(_QWORD *)(a1 + 5408);
        v405 = 16 * v401;
        v406 = (uint64_t *)(*(_QWORD *)(a1 + 5416) + 16 * (*(_DWORD *)(a1 + 5440) * v399) + 8);
        do
        {
          v408 = ((v402 - v403) << 6) - 1;
          if (v402 == v403)
            v408 = 0;
          v409 = *(_QWORD *)(a1 + 5400) + v404;
          if (v408 == v409)
          {
            sub_20EDB36DC(a1 + 5368);
            v403 = *(_QWORD *)(a1 + 5376);
            v402 = *(_QWORD *)(a1 + 5384);
            v409 = *(_QWORD *)(a1 + 5408) + *(_QWORD *)(a1 + 5400);
          }
          v407 = *v406;
          v406 += 2;
          *(_QWORD *)(*(_QWORD *)(v403 + ((v409 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v409 & 0x1FF)) = v407;
          v404 = *(_QWORD *)(a1 + 5408) + 1;
          *(_QWORD *)(a1 + 5408) = v404;
          v405 -= 16;
        }
        while (v405);
        v400 = *(_QWORD *)(a1 + 5448);
        v398 = *(unsigned int *)(a1 + 5340);
      }
      *(_QWORD *)(v400 + 8 * v399++) = 0;
    }
    while (v399 < v398);
  }
  v410 = *(unsigned int *)(a1 + 6348);
  if ((_DWORD)v410)
  {
    v411 = 0;
    v412 = *(_QWORD *)(a1 + 6456);
    do
    {
      v413 = *(_QWORD *)(v412 + 8 * v411);
      if (v413)
      {
        v414 = *(_QWORD *)(a1 + 6392);
        v415 = *(_QWORD *)(a1 + 6384);
        v416 = *(_QWORD *)(a1 + 6416);
        v417 = 16 * v413;
        v418 = (uint64_t *)(*(_QWORD *)(a1 + 6424) + 16 * (*(_DWORD *)(a1 + 6448) * v411) + 8);
        do
        {
          v420 = ((v414 - v415) << 6) - 1;
          if (v414 == v415)
            v420 = 0;
          v421 = *(_QWORD *)(a1 + 6408) + v416;
          if (v420 == v421)
          {
            sub_20EDB36DC(a1 + 6376);
            v415 = *(_QWORD *)(a1 + 6384);
            v414 = *(_QWORD *)(a1 + 6392);
            v421 = *(_QWORD *)(a1 + 6416) + *(_QWORD *)(a1 + 6408);
          }
          v419 = *v418;
          v418 += 2;
          *(_QWORD *)(*(_QWORD *)(v415 + ((v421 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v421 & 0x1FF)) = v419;
          v416 = *(_QWORD *)(a1 + 6416) + 1;
          *(_QWORD *)(a1 + 6416) = v416;
          v417 -= 16;
        }
        while (v417);
        v412 = *(_QWORD *)(a1 + 6456);
        v410 = *(unsigned int *)(a1 + 6348);
      }
      *(_QWORD *)(v412 + 8 * v411++) = 0;
    }
    while (v411 < v410);
  }
  v422 = *(unsigned int *)(a1 + 156);
  if ((_DWORD)v422)
  {
    v423 = 0;
    v424 = *(_QWORD *)(a1 + 264);
    do
    {
      v425 = *(_QWORD *)(v424 + 8 * v423);
      if (v425)
      {
        v426 = *(_QWORD *)(a1 + 192);
        v427 = *(_QWORD *)(a1 + 200);
        v428 = *(_QWORD *)(a1 + 224);
        v429 = 16 * v425;
        v430 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 16 * (*(_DWORD *)(a1 + 256) * v423) + 8);
        do
        {
          v432 = ((v427 - v426) << 6) - 1;
          if (v427 == v426)
            v432 = 0;
          v433 = *(_QWORD *)(a1 + 216) + v428;
          if (v432 == v433)
          {
            sub_20EDB36DC(a1 + 184);
            v426 = *(_QWORD *)(a1 + 192);
            v427 = *(_QWORD *)(a1 + 200);
            v433 = *(_QWORD *)(a1 + 224) + *(_QWORD *)(a1 + 216);
          }
          v431 = *v430;
          v430 += 2;
          *(_QWORD *)(*(_QWORD *)(v426 + ((v433 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v433 & 0x1FF)) = v431;
          v428 = *(_QWORD *)(a1 + 224) + 1;
          *(_QWORD *)(a1 + 224) = v428;
          v429 -= 16;
        }
        while (v429);
        v424 = *(_QWORD *)(a1 + 264);
        v422 = *(unsigned int *)(a1 + 156);
      }
      *(_QWORD *)(v424 + 8 * v423++) = 0;
    }
    while (v423 < v422);
  }
  v434 = *(unsigned int *)(a1 + 1164);
  if ((_DWORD)v434)
  {
    v435 = 0;
    v436 = *(_QWORD *)(a1 + 1272);
    do
    {
      v437 = *(_QWORD *)(v436 + 8 * v435);
      if (v437)
      {
        v438 = *(_QWORD *)(a1 + 1208);
        v439 = *(_QWORD *)(a1 + 1200);
        v440 = *(_QWORD *)(a1 + 1232);
        v441 = 16 * v437;
        v442 = (uint64_t *)(*(_QWORD *)(a1 + 1240) + 16 * (*(_DWORD *)(a1 + 1264) * v435) + 8);
        do
        {
          v444 = ((v438 - v439) << 6) - 1;
          if (v438 == v439)
            v444 = 0;
          v445 = *(_QWORD *)(a1 + 1224) + v440;
          if (v444 == v445)
          {
            sub_20EDB36DC(a1 + 1192);
            v439 = *(_QWORD *)(a1 + 1200);
            v438 = *(_QWORD *)(a1 + 1208);
            v445 = *(_QWORD *)(a1 + 1232) + *(_QWORD *)(a1 + 1224);
          }
          v443 = *v442;
          v442 += 2;
          *(_QWORD *)(*(_QWORD *)(v439 + ((v445 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v445 & 0x1FF)) = v443;
          v440 = *(_QWORD *)(a1 + 1232) + 1;
          *(_QWORD *)(a1 + 1232) = v440;
          v441 -= 16;
        }
        while (v441);
        v436 = *(_QWORD *)(a1 + 1272);
        v434 = *(unsigned int *)(a1 + 1164);
      }
      *(_QWORD *)(v436 + 8 * v435++) = 0;
    }
    while (v435 < v434);
  }
  v446 = *(unsigned int *)(a1 + 2172);
  if ((_DWORD)v446)
  {
    v447 = 0;
    v448 = *(_QWORD *)(a1 + 2280);
    do
    {
      v449 = *(_QWORD *)(v448 + 8 * v447);
      if (v449)
      {
        v450 = *(_QWORD *)(a1 + 2216);
        v451 = *(_QWORD *)(a1 + 2208);
        v452 = *(_QWORD *)(a1 + 2240);
        v453 = 16 * v449;
        v454 = (uint64_t *)(*(_QWORD *)(a1 + 2248) + 16 * (*(_DWORD *)(a1 + 2272) * v447) + 8);
        do
        {
          v456 = ((v450 - v451) << 6) - 1;
          if (v450 == v451)
            v456 = 0;
          v457 = *(_QWORD *)(a1 + 2232) + v452;
          if (v456 == v457)
          {
            sub_20EDB36DC(a1 + 2200);
            v451 = *(_QWORD *)(a1 + 2208);
            v450 = *(_QWORD *)(a1 + 2216);
            v457 = *(_QWORD *)(a1 + 2240) + *(_QWORD *)(a1 + 2232);
          }
          v455 = *v454;
          v454 += 2;
          *(_QWORD *)(*(_QWORD *)(v451 + ((v457 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v457 & 0x1FF)) = v455;
          v452 = *(_QWORD *)(a1 + 2240) + 1;
          *(_QWORD *)(a1 + 2240) = v452;
          v453 -= 16;
        }
        while (v453);
        v448 = *(_QWORD *)(a1 + 2280);
        v446 = *(unsigned int *)(a1 + 2172);
      }
      *(_QWORD *)(v448 + 8 * v447++) = 0;
    }
    while (v447 < v446);
  }
  v458 = *(unsigned int *)(a1 + 3180);
  if ((_DWORD)v458)
  {
    v459 = 0;
    v460 = *(_QWORD *)(a1 + 3288);
    do
    {
      v461 = *(_QWORD *)(v460 + 8 * v459);
      if (v461)
      {
        v462 = *(_QWORD *)(a1 + 3224);
        v463 = *(_QWORD *)(a1 + 3216);
        v464 = *(_QWORD *)(a1 + 3248);
        v465 = 16 * v461;
        v466 = (uint64_t *)(*(_QWORD *)(a1 + 3256) + 16 * (*(_DWORD *)(a1 + 3280) * v459) + 8);
        do
        {
          v468 = ((v462 - v463) << 6) - 1;
          if (v462 == v463)
            v468 = 0;
          v469 = *(_QWORD *)(a1 + 3240) + v464;
          if (v468 == v469)
          {
            sub_20EDB36DC(a1 + 3208);
            v463 = *(_QWORD *)(a1 + 3216);
            v462 = *(_QWORD *)(a1 + 3224);
            v469 = *(_QWORD *)(a1 + 3248) + *(_QWORD *)(a1 + 3240);
          }
          v467 = *v466;
          v466 += 2;
          *(_QWORD *)(*(_QWORD *)(v463 + ((v469 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v469 & 0x1FF)) = v467;
          v464 = *(_QWORD *)(a1 + 3248) + 1;
          *(_QWORD *)(a1 + 3248) = v464;
          v465 -= 16;
        }
        while (v465);
        v460 = *(_QWORD *)(a1 + 3288);
        v458 = *(unsigned int *)(a1 + 3180);
      }
      *(_QWORD *)(v460 + 8 * v459++) = 0;
    }
    while (v459 < v458);
  }
  v470 = *(unsigned int *)(a1 + 4188);
  if ((_DWORD)v470)
  {
    v471 = 0;
    v472 = *(_QWORD *)(a1 + 4296);
    do
    {
      v473 = *(_QWORD *)(v472 + 8 * v471);
      if (v473)
      {
        v474 = *(_QWORD *)(a1 + 4232);
        v475 = *(_QWORD *)(a1 + 4224);
        v476 = *(_QWORD *)(a1 + 4256);
        v477 = 16 * v473;
        v478 = (uint64_t *)(*(_QWORD *)(a1 + 4264) + 16 * (*(_DWORD *)(a1 + 4288) * v471) + 8);
        do
        {
          v480 = ((v474 - v475) << 6) - 1;
          if (v474 == v475)
            v480 = 0;
          v481 = *(_QWORD *)(a1 + 4248) + v476;
          if (v480 == v481)
          {
            sub_20EDB36DC(a1 + 4216);
            v475 = *(_QWORD *)(a1 + 4224);
            v474 = *(_QWORD *)(a1 + 4232);
            v481 = *(_QWORD *)(a1 + 4256) + *(_QWORD *)(a1 + 4248);
          }
          v479 = *v478;
          v478 += 2;
          *(_QWORD *)(*(_QWORD *)(v475 + ((v481 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v481 & 0x1FF)) = v479;
          v476 = *(_QWORD *)(a1 + 4256) + 1;
          *(_QWORD *)(a1 + 4256) = v476;
          v477 -= 16;
        }
        while (v477);
        v472 = *(_QWORD *)(a1 + 4296);
        v470 = *(unsigned int *)(a1 + 4188);
      }
      *(_QWORD *)(v472 + 8 * v471++) = 0;
    }
    while (v471 < v470);
  }
  v482 = *(unsigned int *)(a1 + 5196);
  if ((_DWORD)v482)
  {
    v483 = 0;
    v484 = *(_QWORD *)(a1 + 5304);
    do
    {
      v485 = *(_QWORD *)(v484 + 8 * v483);
      if (v485)
      {
        v486 = *(_QWORD *)(a1 + 5240);
        v487 = *(_QWORD *)(a1 + 5232);
        v488 = *(_QWORD *)(a1 + 5264);
        v489 = 16 * v485;
        v490 = (uint64_t *)(*(_QWORD *)(a1 + 5272) + 16 * (*(_DWORD *)(a1 + 5296) * v483) + 8);
        do
        {
          v492 = ((v486 - v487) << 6) - 1;
          if (v486 == v487)
            v492 = 0;
          v493 = *(_QWORD *)(a1 + 5256) + v488;
          if (v492 == v493)
          {
            sub_20EDB36DC(a1 + 5224);
            v487 = *(_QWORD *)(a1 + 5232);
            v486 = *(_QWORD *)(a1 + 5240);
            v493 = *(_QWORD *)(a1 + 5264) + *(_QWORD *)(a1 + 5256);
          }
          v491 = *v490;
          v490 += 2;
          *(_QWORD *)(*(_QWORD *)(v487 + ((v493 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v493 & 0x1FF)) = v491;
          v488 = *(_QWORD *)(a1 + 5264) + 1;
          *(_QWORD *)(a1 + 5264) = v488;
          v489 -= 16;
        }
        while (v489);
        v484 = *(_QWORD *)(a1 + 5304);
        v482 = *(unsigned int *)(a1 + 5196);
      }
      *(_QWORD *)(v484 + 8 * v483++) = 0;
    }
    while (v483 < v482);
  }
  v494 = *(unsigned int *)(a1 + 6204);
  if ((_DWORD)v494)
  {
    v495 = 0;
    v496 = *(_QWORD *)(a1 + 6312);
    do
    {
      v497 = *(_QWORD *)(v496 + 8 * v495);
      if (v497)
      {
        v498 = *(_QWORD *)(a1 + 6248);
        v499 = *(_QWORD *)(a1 + 6240);
        v500 = *(_QWORD *)(a1 + 6272);
        v501 = 16 * v497;
        v502 = (uint64_t *)(*(_QWORD *)(a1 + 6280) + 16 * (*(_DWORD *)(a1 + 6304) * v495) + 8);
        do
        {
          v504 = ((v498 - v499) << 6) - 1;
          if (v498 == v499)
            v504 = 0;
          v505 = *(_QWORD *)(a1 + 6264) + v500;
          if (v504 == v505)
          {
            sub_20EDB36DC(a1 + 6232);
            v499 = *(_QWORD *)(a1 + 6240);
            v498 = *(_QWORD *)(a1 + 6248);
            v505 = *(_QWORD *)(a1 + 6272) + *(_QWORD *)(a1 + 6264);
          }
          v503 = *v502;
          v502 += 2;
          *(_QWORD *)(*(_QWORD *)(v499 + ((v505 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v505 & 0x1FF)) = v503;
          v500 = *(_QWORD *)(a1 + 6272) + 1;
          *(_QWORD *)(a1 + 6272) = v500;
          v501 -= 16;
        }
        while (v501);
        v496 = *(_QWORD *)(a1 + 6312);
        v494 = *(unsigned int *)(a1 + 6204);
      }
      *(_QWORD *)(v496 + 8 * v495++) = 0;
    }
    while (v495 < v494);
  }
  v506 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v506)
  {
    v507 = 0;
    v508 = *(_QWORD *)(a1 + 120);
    do
    {
      v509 = *(_QWORD *)(v508 + 8 * v507);
      if (v509)
      {
        v510 = *(_QWORD *)(a1 + 48);
        v511 = *(_QWORD *)(a1 + 56);
        v512 = *(_QWORD *)(a1 + 80);
        v513 = 16 * v509;
        v514 = (uint64_t *)(*(_QWORD *)(a1 + 88) + 16 * (*(_DWORD *)(a1 + 112) * v507) + 8);
        do
        {
          v516 = ((v511 - v510) << 6) - 1;
          if (v511 == v510)
            v516 = 0;
          v517 = *(_QWORD *)(a1 + 72) + v512;
          if (v516 == v517)
          {
            sub_20EDB36DC(a1 + 40);
            v510 = *(_QWORD *)(a1 + 48);
            v511 = *(_QWORD *)(a1 + 56);
            v517 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
          }
          v515 = *v514;
          v514 += 2;
          *(_QWORD *)(*(_QWORD *)(v510 + ((v517 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v517 & 0x1FF)) = v515;
          v512 = *(_QWORD *)(a1 + 80) + 1;
          *(_QWORD *)(a1 + 80) = v512;
          v513 -= 16;
        }
        while (v513);
        v508 = *(_QWORD *)(a1 + 120);
        v506 = *(unsigned int *)(a1 + 12);
      }
      *(_QWORD *)(v508 + 8 * v507++) = 0;
    }
    while (v507 < v506);
  }
  v518 = *(unsigned int *)(a1 + 1020);
  if ((_DWORD)v518)
  {
    v519 = 0;
    v520 = *(_QWORD *)(a1 + 1128);
    do
    {
      v521 = *(_QWORD *)(v520 + 8 * v519);
      if (v521)
      {
        v522 = *(_QWORD *)(a1 + 1064);
        v523 = *(_QWORD *)(a1 + 1056);
        v524 = *(_QWORD *)(a1 + 1088);
        v525 = 16 * v521;
        v526 = (uint64_t *)(*(_QWORD *)(a1 + 1096) + 16 * (*(_DWORD *)(a1 + 1120) * v519) + 8);
        do
        {
          v528 = ((v522 - v523) << 6) - 1;
          if (v522 == v523)
            v528 = 0;
          v529 = *(_QWORD *)(a1 + 1080) + v524;
          if (v528 == v529)
          {
            sub_20EDB36DC(a1 + 1048);
            v523 = *(_QWORD *)(a1 + 1056);
            v522 = *(_QWORD *)(a1 + 1064);
            v529 = *(_QWORD *)(a1 + 1088) + *(_QWORD *)(a1 + 1080);
          }
          v527 = *v526;
          v526 += 2;
          *(_QWORD *)(*(_QWORD *)(v523 + ((v529 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v529 & 0x1FF)) = v527;
          v524 = *(_QWORD *)(a1 + 1088) + 1;
          *(_QWORD *)(a1 + 1088) = v524;
          v525 -= 16;
        }
        while (v525);
        v520 = *(_QWORD *)(a1 + 1128);
        v518 = *(unsigned int *)(a1 + 1020);
      }
      *(_QWORD *)(v520 + 8 * v519++) = 0;
    }
    while (v519 < v518);
  }
  v530 = *(unsigned int *)(a1 + 2028);
  if ((_DWORD)v530)
  {
    v531 = 0;
    v532 = *(_QWORD *)(a1 + 2136);
    do
    {
      v533 = *(_QWORD *)(v532 + 8 * v531);
      if (v533)
      {
        v534 = *(_QWORD *)(a1 + 2072);
        v535 = *(_QWORD *)(a1 + 2064);
        v536 = *(_QWORD *)(a1 + 2096);
        v537 = 16 * v533;
        v538 = (uint64_t *)(*(_QWORD *)(a1 + 2104) + 16 * (*(_DWORD *)(a1 + 2128) * v531) + 8);
        do
        {
          v540 = ((v534 - v535) << 6) - 1;
          if (v534 == v535)
            v540 = 0;
          v541 = *(_QWORD *)(a1 + 2088) + v536;
          if (v540 == v541)
          {
            sub_20EDB36DC(a1 + 2056);
            v535 = *(_QWORD *)(a1 + 2064);
            v534 = *(_QWORD *)(a1 + 2072);
            v541 = *(_QWORD *)(a1 + 2096) + *(_QWORD *)(a1 + 2088);
          }
          v539 = *v538;
          v538 += 2;
          *(_QWORD *)(*(_QWORD *)(v535 + ((v541 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v541 & 0x1FF)) = v539;
          v536 = *(_QWORD *)(a1 + 2096) + 1;
          *(_QWORD *)(a1 + 2096) = v536;
          v537 -= 16;
        }
        while (v537);
        v532 = *(_QWORD *)(a1 + 2136);
        v530 = *(unsigned int *)(a1 + 2028);
      }
      *(_QWORD *)(v532 + 8 * v531++) = 0;
    }
    while (v531 < v530);
  }
  v542 = *(unsigned int *)(a1 + 3036);
  if ((_DWORD)v542)
  {
    v543 = 0;
    v544 = *(_QWORD *)(a1 + 3144);
    do
    {
      v545 = *(_QWORD *)(v544 + 8 * v543);
      if (v545)
      {
        v546 = *(_QWORD *)(a1 + 3080);
        v547 = *(_QWORD *)(a1 + 3072);
        v548 = *(_QWORD *)(a1 + 3104);
        v549 = 16 * v545;
        v550 = (uint64_t *)(*(_QWORD *)(a1 + 3112) + 16 * (*(_DWORD *)(a1 + 3136) * v543) + 8);
        do
        {
          v552 = ((v546 - v547) << 6) - 1;
          if (v546 == v547)
            v552 = 0;
          v553 = *(_QWORD *)(a1 + 3096) + v548;
          if (v552 == v553)
          {
            sub_20EDB36DC(a1 + 3064);
            v547 = *(_QWORD *)(a1 + 3072);
            v546 = *(_QWORD *)(a1 + 3080);
            v553 = *(_QWORD *)(a1 + 3104) + *(_QWORD *)(a1 + 3096);
          }
          v551 = *v550;
          v550 += 2;
          *(_QWORD *)(*(_QWORD *)(v547 + ((v553 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v553 & 0x1FF)) = v551;
          v548 = *(_QWORD *)(a1 + 3104) + 1;
          *(_QWORD *)(a1 + 3104) = v548;
          v549 -= 16;
        }
        while (v549);
        v544 = *(_QWORD *)(a1 + 3144);
        v542 = *(unsigned int *)(a1 + 3036);
      }
      *(_QWORD *)(v544 + 8 * v543++) = 0;
    }
    while (v543 < v542);
  }
  v554 = *(unsigned int *)(a1 + 4044);
  if ((_DWORD)v554)
  {
    v555 = 0;
    v556 = *(_QWORD *)(a1 + 4152);
    do
    {
      v557 = *(_QWORD *)(v556 + 8 * v555);
      if (v557)
      {
        v558 = *(_QWORD *)(a1 + 4088);
        v559 = *(_QWORD *)(a1 + 4080);
        v560 = *(_QWORD *)(a1 + 4112);
        v561 = 16 * v557;
        v562 = (uint64_t *)(*(_QWORD *)(a1 + 4120) + 16 * (*(_DWORD *)(a1 + 4144) * v555) + 8);
        do
        {
          v564 = ((v558 - v559) << 6) - 1;
          if (v558 == v559)
            v564 = 0;
          v565 = *(_QWORD *)(a1 + 4104) + v560;
          if (v564 == v565)
          {
            sub_20EDB36DC(a1 + 4072);
            v559 = *(_QWORD *)(a1 + 4080);
            v558 = *(_QWORD *)(a1 + 4088);
            v565 = *(_QWORD *)(a1 + 4112) + *(_QWORD *)(a1 + 4104);
          }
          v563 = *v562;
          v562 += 2;
          *(_QWORD *)(*(_QWORD *)(v559 + ((v565 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v565 & 0x1FF)) = v563;
          v560 = *(_QWORD *)(a1 + 4112) + 1;
          *(_QWORD *)(a1 + 4112) = v560;
          v561 -= 16;
        }
        while (v561);
        v556 = *(_QWORD *)(a1 + 4152);
        v554 = *(unsigned int *)(a1 + 4044);
      }
      *(_QWORD *)(v556 + 8 * v555++) = 0;
    }
    while (v555 < v554);
  }
  v566 = *(unsigned int *)(a1 + 5052);
  if ((_DWORD)v566)
  {
    v567 = 0;
    v568 = *(_QWORD *)(a1 + 5160);
    do
    {
      v569 = *(_QWORD *)(v568 + 8 * v567);
      if (v569)
      {
        v570 = *(_QWORD *)(a1 + 5096);
        v571 = *(_QWORD *)(a1 + 5088);
        v572 = *(_QWORD *)(a1 + 5120);
        v573 = 16 * v569;
        v574 = (uint64_t *)(*(_QWORD *)(a1 + 5128) + 16 * (*(_DWORD *)(a1 + 5152) * v567) + 8);
        do
        {
          v576 = ((v570 - v571) << 6) - 1;
          if (v570 == v571)
            v576 = 0;
          v577 = *(_QWORD *)(a1 + 5112) + v572;
          if (v576 == v577)
          {
            sub_20EDB36DC(a1 + 5080);
            v571 = *(_QWORD *)(a1 + 5088);
            v570 = *(_QWORD *)(a1 + 5096);
            v577 = *(_QWORD *)(a1 + 5120) + *(_QWORD *)(a1 + 5112);
          }
          v575 = *v574;
          v574 += 2;
          *(_QWORD *)(*(_QWORD *)(v571 + ((v577 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v577 & 0x1FF)) = v575;
          v572 = *(_QWORD *)(a1 + 5120) + 1;
          *(_QWORD *)(a1 + 5120) = v572;
          v573 -= 16;
        }
        while (v573);
        v568 = *(_QWORD *)(a1 + 5160);
        v566 = *(unsigned int *)(a1 + 5052);
      }
      *(_QWORD *)(v568 + 8 * v567++) = 0;
    }
    while (v567 < v566);
  }
  v578 = *(unsigned int *)(a1 + 6060);
  if ((_DWORD)v578)
  {
    v579 = 0;
    v580 = *(_QWORD *)(a1 + 6168);
    do
    {
      v581 = *(_QWORD *)(v580 + 8 * v579);
      if (v581)
      {
        v582 = *(_QWORD *)(a1 + 6104);
        v583 = *(_QWORD *)(a1 + 6096);
        v584 = *(_QWORD *)(a1 + 6128);
        v585 = 16 * v581;
        v586 = (uint64_t *)(*(_QWORD *)(a1 + 6136) + 16 * (*(_DWORD *)(a1 + 6160) * v579) + 8);
        do
        {
          v588 = ((v582 - v583) << 6) - 1;
          if (v582 == v583)
            v588 = 0;
          v589 = *(_QWORD *)(a1 + 6120) + v584;
          if (v588 == v589)
          {
            sub_20EDB36DC(a1 + 6088);
            v583 = *(_QWORD *)(a1 + 6096);
            v582 = *(_QWORD *)(a1 + 6104);
            v589 = *(_QWORD *)(a1 + 6128) + *(_QWORD *)(a1 + 6120);
          }
          v587 = *v586;
          v586 += 2;
          *(_QWORD *)(*(_QWORD *)(v583 + ((v589 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v589 & 0x1FF)) = v587;
          v584 = *(_QWORD *)(a1 + 6128) + 1;
          *(_QWORD *)(a1 + 6128) = v584;
          v585 -= 16;
        }
        while (v585);
        v580 = *(_QWORD *)(a1 + 6168);
        v578 = *(unsigned int *)(a1 + 6060);
      }
      *(_QWORD *)(v580 + 8 * v579++) = 0;
    }
    while (v579 < v578);
  }
}

void sub_20F59D8FC(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  unsigned int v23;
  char *v24;
  __int128 *v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  void *v42;
  unint64_t *v43;
  _QWORD *v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51[13];

  if (a4 != a5)
  {
    v51[11] = v5;
    v51[12] = v6;
    if (*a3 != a3[1])
    {
      v7 = a4;
      v43 = (unint64_t *)(a1 + 16);
      v44 = a3;
      v45 = a5;
      v46 = a2;
      while (1)
      {
        v9 = (unsigned int *)*a3;
        v10 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v10)
          break;
LABEL_4:
        v7 += 2;
        if (v7 == a5)
          return;
      }
      v11 = *(_QWORD *)(a2 + 88);
      v12 = *v7;
      v13 = v7[1];
      v14 = (*(_DWORD *)(a2 + 112) * v12);
      v15 = v11 + 16 * (*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v12) + v14);
      v16 = *(_QWORD *)(a1 + 88);
      v17 = (*(_DWORD *)(a1 + 112) * v13);
      v18 = (char *)(v16 + 16 * v17);
      v48 = v13;
      v19 = (char *)(v16 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v13) + v17));
      v20 = v11 + 16 * v14;
      while (1)
      {
        if (v20 == v15)
          goto LABEL_4;
        v21 = *v9;
        while (*(_DWORD *)v20 != v21)
        {
          if (*(_DWORD *)v20 > v21)
            goto LABEL_33;
          v20 += 16;
          if (v20 == v15)
            goto LABEL_4;
        }
        v22 = v18;
        v23 = v9[1];
        v49 = v18;
        v50 = *(_QWORD *)(a2 + 16);
        if (v18 != v19)
        {
          v22 = v18;
          while (*(_DWORD *)v22 < v23)
          {
            v22 += 16;
            if (v22 == v19)
            {
              v24 = v19;
              goto LABEL_23;
            }
          }
        }
        v24 = v19;
        if (v22 == v19)
          goto LABEL_23;
        if (*(_DWORD *)v22 != v23)
          break;
        v25 = (__int128 *)(*v43 + 8 * *((_QWORD *)v22 + 1));
        v26 = (__int128 *)(v50 + 8 * *(_QWORD *)(v20 + 8));
        if (v26 != v25)
          goto LABEL_31;
LABEL_32:
        a2 = v46;
        v18 = v49;
LABEL_33:
        if (v20 != v15)
        {
          v9 += 2;
          if (v9 != v10)
            continue;
        }
        goto LABEL_4;
      }
      v24 = v22;
LABEL_23:
      v27 = *(_QWORD *)(a1 + 80);
      v47 = *(_QWORD *)(v20 + 8);
      if (v27)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v28 = *(_QWORD *)(a1 + 56);
        v30 = ((v28 - v29) << 6) - 1;
        v31 = *(_QWORD *)(a1 + 72);
        if (v28 == v29)
          v30 = 0;
        v25 = (__int128 *)(*(_QWORD *)(a1 + 16)
                         + 8
                         * *(_QWORD *)(*(_QWORD *)(v29 + (((unint64_t)(v31 + v27 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                     + 8 * ((v31 + v27 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v27 - 1;
        if ((unint64_t)(v30 - (v27 + v31) + 1) >= 0x400)
        {
          operator delete(*(void **)(v28 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v32 = v19 - v24;
        if (v19 != v24)
          goto LABEL_29;
      }
      else
      {
        v42 = *(void **)(a1 + 24);
        v51[0] = 0;
        sub_20F1C5A3C(v43, v42, 0x12uLL, v51);
        v25 = (__int128 *)(*(_QWORD *)(a1 + 24) - 144);
        v32 = v19 - v24;
        if (v19 != v24)
LABEL_29:
          memmove(v24 + 16, v24, v32);
      }
      v33 = ((uint64_t)v25 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v24 = v23;
      *((_QWORD *)v24 + 1) = v33;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v48);
      v19 += 16;
      a3 = v44;
      a5 = v45;
      v26 = (__int128 *)(v50 + 8 * v47);
      if (v26 == v25)
        goto LABEL_32;
LABEL_31:
      v34 = *v26;
      v35 = v26[1];
      v36 = v26[2];
      v37 = v26[3];
      v38 = v26[4];
      v39 = v26[5];
      v40 = v26[6];
      v41 = v26[8];
      v25[7] = v26[7];
      v25[8] = v41;
      v25[5] = v39;
      v25[6] = v40;
      v25[3] = v37;
      v25[4] = v38;
      v25[1] = v35;
      v25[2] = v36;
      *v25 = v34;
      goto LABEL_32;
    }
  }
}

void sub_20F59DBBC(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  unsigned int v23;
  char *v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  void *v47;
  unint64_t *v48;
  _QWORD *v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56[13];

  if (a4 != a5)
  {
    v56[11] = v5;
    v56[12] = v6;
    if (*a3 != a3[1])
    {
      v7 = a4;
      v48 = (unint64_t *)(a1 + 16);
      v49 = a3;
      v50 = a5;
      v51 = a2;
      while (1)
      {
        v9 = (unsigned int *)*a3;
        v10 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v10)
          break;
LABEL_4:
        v7 += 2;
        if (v7 == a5)
          return;
      }
      v11 = *(_QWORD *)(a2 + 88);
      v12 = *v7;
      v13 = v7[1];
      v14 = (*(_DWORD *)(a2 + 112) * v12);
      v15 = v11 + 16 * (*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v12) + v14);
      v16 = *(_QWORD *)(a1 + 88);
      v17 = (*(_DWORD *)(a1 + 112) * v13);
      v18 = (char *)(v16 + 16 * v17);
      v53 = v13;
      v19 = (char *)(v16 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v13) + v17));
      v20 = v11 + 16 * v14;
      while (1)
      {
        if (v20 == v15)
          goto LABEL_4;
        v21 = *v9;
        while (*(_DWORD *)v20 != v21)
        {
          if (*(_DWORD *)v20 > v21)
            goto LABEL_33;
          v20 += 16;
          if (v20 == v15)
            goto LABEL_4;
        }
        v22 = v18;
        v23 = v9[1];
        v54 = v18;
        v55 = *(_QWORD *)(a2 + 16);
        if (v18 != v19)
        {
          v22 = v18;
          while (*(_DWORD *)v22 < v23)
          {
            v22 += 16;
            if (v22 == v19)
            {
              v24 = v19;
              goto LABEL_23;
            }
          }
        }
        v24 = v19;
        if (v22 == v19)
          goto LABEL_23;
        if (*(_DWORD *)v22 != v23)
          break;
        v25 = *v48 + 8 * *((_QWORD *)v22 + 1);
        v26 = (__int128 *)(v55 + 8 * *(_QWORD *)(v20 + 8));
        if (v26 != (__int128 *)v25)
          goto LABEL_31;
LABEL_32:
        a2 = v51;
        v18 = v54;
LABEL_33:
        if (v20 != v15)
        {
          v9 += 2;
          if (v9 != v10)
            continue;
        }
        goto LABEL_4;
      }
      v24 = v22;
LABEL_23:
      v27 = *(_QWORD *)(a1 + 80);
      v52 = *(_QWORD *)(v20 + 8);
      if (v27)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v28 = *(_QWORD *)(a1 + 56);
        v30 = ((v28 - v29) << 6) - 1;
        v31 = *(_QWORD *)(a1 + 72);
        if (v28 == v29)
          v30 = 0;
        v25 = *(_QWORD *)(a1 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v29 + (((unint64_t)(v31 + v27 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v31 + v27 - 1) & 0x1FF));
        *(_QWORD *)(a1 + 80) = v27 - 1;
        if ((unint64_t)(v30 - (v27 + v31) + 1) >= 0x400)
        {
          operator delete(*(void **)(v28 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v32 = v19 - v24;
        if (v19 != v24)
          goto LABEL_29;
      }
      else
      {
        v47 = *(void **)(a1 + 24);
        v56[0] = 0;
        sub_20F1C5A3C(v48, v47, 0x1BuLL, v56);
        v25 = *(_QWORD *)(a1 + 24) - 216;
        v32 = v19 - v24;
        if (v19 != v24)
LABEL_29:
          memmove(v24 + 16, v24, v32);
      }
      v33 = (v25 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v24 = v23;
      *((_QWORD *)v24 + 1) = v33;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v53);
      v19 += 16;
      a3 = v49;
      a5 = v50;
      v26 = (__int128 *)(v55 + 8 * v52);
      if (v26 == (__int128 *)v25)
        goto LABEL_32;
LABEL_31:
      v34 = *v26;
      v35 = v26[1];
      v36 = v26[2];
      v37 = v26[3];
      v38 = v26[4];
      v39 = v26[5];
      v40 = v26[6];
      v41 = v26[7];
      v42 = v26[8];
      v43 = v26[9];
      v44 = v26[10];
      v45 = v26[11];
      v46 = v26[12];
      *(_QWORD *)(v25 + 208) = *((_QWORD *)v26 + 26);
      *(_OWORD *)(v25 + 176) = v45;
      *(_OWORD *)(v25 + 192) = v46;
      *(_OWORD *)(v25 + 144) = v43;
      *(_OWORD *)(v25 + 160) = v44;
      *(_OWORD *)(v25 + 112) = v41;
      *(_OWORD *)(v25 + 128) = v42;
      *(_OWORD *)(v25 + 80) = v39;
      *(_OWORD *)(v25 + 96) = v40;
      *(_OWORD *)(v25 + 48) = v37;
      *(_OWORD *)(v25 + 64) = v38;
      *(_OWORD *)(v25 + 16) = v35;
      *(_OWORD *)(v25 + 32) = v36;
      *(_OWORD *)v25 = v34;
      goto LABEL_32;
    }
  }
}

void sub_20F59DE94(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  unsigned int v23;
  char *v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  __int128 v34;
  void *v35;
  unint64_t *v36;
  _QWORD *v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44[13];

  if (a4 != a5)
  {
    v44[11] = v5;
    v44[12] = v6;
    if (*a3 != a3[1])
    {
      v7 = a4;
      v36 = (unint64_t *)(a1 + 16);
      v37 = a3;
      v38 = a5;
      v39 = a2;
      while (1)
      {
        v9 = (unsigned int *)*a3;
        v10 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v10)
          break;
LABEL_4:
        v7 += 2;
        if (v7 == a5)
          return;
      }
      v11 = *(_QWORD *)(a2 + 88);
      v12 = *v7;
      v13 = v7[1];
      v14 = (*(_DWORD *)(a2 + 112) * v12);
      v15 = v11 + 16 * (*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v12) + v14);
      v16 = *(_QWORD *)(a1 + 88);
      v17 = (*(_DWORD *)(a1 + 112) * v13);
      v18 = (char *)(v16 + 16 * v17);
      v41 = v13;
      v19 = (char *)(v16 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v13) + v17));
      v20 = v11 + 16 * v14;
      while (1)
      {
        if (v20 == v15)
          goto LABEL_4;
        v21 = *v9;
        while (*(_DWORD *)v20 != v21)
        {
          if (*(_DWORD *)v20 > v21)
            goto LABEL_33;
          v20 += 16;
          if (v20 == v15)
            goto LABEL_4;
        }
        v22 = v18;
        v23 = v9[1];
        v42 = v18;
        v43 = *(_QWORD *)(a2 + 16);
        if (v18 != v19)
        {
          v22 = v18;
          while (*(_DWORD *)v22 < v23)
          {
            v22 += 16;
            if (v22 == v19)
            {
              v24 = v19;
              goto LABEL_23;
            }
          }
        }
        v24 = v19;
        if (v22 == v19)
          goto LABEL_23;
        if (*(_DWORD *)v22 != v23)
          break;
        v25 = *v36 + 8 * *((_QWORD *)v22 + 1);
        v26 = (__int128 *)(v43 + 8 * *(_QWORD *)(v20 + 8));
        if (v26 != (__int128 *)v25)
          goto LABEL_31;
LABEL_32:
        a2 = v39;
        v18 = v42;
LABEL_33:
        if (v20 != v15)
        {
          v9 += 2;
          if (v9 != v10)
            continue;
        }
        goto LABEL_4;
      }
      v24 = v22;
LABEL_23:
      v27 = *(_QWORD *)(a1 + 80);
      v40 = *(_QWORD *)(v20 + 8);
      if (v27)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v28 = *(_QWORD *)(a1 + 56);
        v30 = ((v28 - v29) << 6) - 1;
        v31 = *(_QWORD *)(a1 + 72);
        if (v28 == v29)
          v30 = 0;
        v25 = *(_QWORD *)(a1 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v29 + (((unint64_t)(v31 + v27 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v31 + v27 - 1) & 0x1FF));
        *(_QWORD *)(a1 + 80) = v27 - 1;
        if ((unint64_t)(v30 - (v27 + v31) + 1) >= 0x400)
        {
          operator delete(*(void **)(v28 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v32 = v19 - v24;
        if (v19 != v24)
          goto LABEL_29;
      }
      else
      {
        v35 = *(void **)(a1 + 24);
        v44[0] = 0;
        sub_20F1C5A3C(v36, v35, 3uLL, v44);
        v25 = *(_QWORD *)(a1 + 24) - 24;
        v32 = v19 - v24;
        if (v19 != v24)
LABEL_29:
          memmove(v24 + 16, v24, v32);
      }
      v33 = (v25 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v24 = v23;
      *((_QWORD *)v24 + 1) = v33;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v41);
      v19 += 16;
      a3 = v37;
      a5 = v38;
      v26 = (__int128 *)(v43 + 8 * v40);
      if (v26 == (__int128 *)v25)
        goto LABEL_32;
LABEL_31:
      v34 = *v26;
      *(_QWORD *)(v25 + 16) = *((_QWORD *)v26 + 2);
      *(_OWORD *)v25 = v34;
      goto LABEL_32;
    }
  }
}

void sub_20F59E13C(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  unsigned int v23;
  char *v24;
  __int128 *v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  unint64_t *v40;
  _QWORD *v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48[13];

  if (a4 != a5)
  {
    v48[11] = v5;
    v48[12] = v6;
    if (*a3 != a3[1])
    {
      v7 = a4;
      v40 = (unint64_t *)(a1 + 16);
      v41 = a3;
      v42 = a5;
      v43 = a2;
      while (1)
      {
        v9 = (unsigned int *)*a3;
        v10 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v10)
          break;
LABEL_4:
        v7 += 2;
        if (v7 == a5)
          return;
      }
      v11 = *(_QWORD *)(a2 + 88);
      v12 = *v7;
      v13 = v7[1];
      v14 = (*(_DWORD *)(a2 + 112) * v12);
      v15 = v11 + 16 * (*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v12) + v14);
      v16 = *(_QWORD *)(a1 + 88);
      v17 = (*(_DWORD *)(a1 + 112) * v13);
      v18 = (char *)(v16 + 16 * v17);
      v45 = v13;
      v19 = (char *)(v16 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v13) + v17));
      v20 = v11 + 16 * v14;
      while (1)
      {
        if (v20 == v15)
          goto LABEL_4;
        v21 = *v9;
        while (*(_DWORD *)v20 != v21)
        {
          if (*(_DWORD *)v20 > v21)
            goto LABEL_33;
          v20 += 16;
          if (v20 == v15)
            goto LABEL_4;
        }
        v22 = v18;
        v23 = v9[1];
        v46 = v18;
        v47 = *(_QWORD *)(a2 + 16);
        if (v18 != v19)
        {
          v22 = v18;
          while (*(_DWORD *)v22 < v23)
          {
            v22 += 16;
            if (v22 == v19)
            {
              v24 = v19;
              goto LABEL_23;
            }
          }
        }
        v24 = v19;
        if (v22 == v19)
          goto LABEL_23;
        if (*(_DWORD *)v22 != v23)
          break;
        v25 = (__int128 *)(*v40 + 8 * *((_QWORD *)v22 + 1));
        v26 = (__int128 *)(v47 + 8 * *(_QWORD *)(v20 + 8));
        if (v26 != v25)
          goto LABEL_31;
LABEL_32:
        a2 = v43;
        v18 = v46;
LABEL_33:
        if (v20 != v15)
        {
          v9 += 2;
          if (v9 != v10)
            continue;
        }
        goto LABEL_4;
      }
      v24 = v22;
LABEL_23:
      v27 = *(_QWORD *)(a1 + 80);
      v44 = *(_QWORD *)(v20 + 8);
      if (v27)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v28 = *(_QWORD *)(a1 + 56);
        v30 = ((v28 - v29) << 6) - 1;
        v31 = *(_QWORD *)(a1 + 72);
        if (v28 == v29)
          v30 = 0;
        v25 = (__int128 *)(*(_QWORD *)(a1 + 16)
                         + 8
                         * *(_QWORD *)(*(_QWORD *)(v29 + (((unint64_t)(v31 + v27 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                     + 8 * ((v31 + v27 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v27 - 1;
        if ((unint64_t)(v30 - (v27 + v31) + 1) >= 0x400)
        {
          operator delete(*(void **)(v28 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v32 = v19 - v24;
        if (v19 != v24)
          goto LABEL_29;
      }
      else
      {
        v39 = *(void **)(a1 + 24);
        v48[0] = 0;
        sub_20F1C5A3C(v40, v39, 0xCuLL, v48);
        v25 = (__int128 *)(*(_QWORD *)(a1 + 24) - 96);
        v32 = v19 - v24;
        if (v19 != v24)
LABEL_29:
          memmove(v24 + 16, v24, v32);
      }
      v33 = ((uint64_t)v25 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v24 = v23;
      *((_QWORD *)v24 + 1) = v33;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v45);
      v19 += 16;
      a3 = v41;
      a5 = v42;
      v26 = (__int128 *)(v47 + 8 * v44);
      if (v26 == v25)
        goto LABEL_32;
LABEL_31:
      v34 = *v26;
      v35 = v26[1];
      v36 = v26[2];
      v37 = v26[3];
      v38 = v26[5];
      v25[4] = v26[4];
      v25[5] = v38;
      v25[2] = v36;
      v25[3] = v37;
      *v25 = v34;
      v25[1] = v35;
      goto LABEL_32;
    }
  }
}

void sub_20F59E3EC(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  unsigned int v23;
  char *v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38;
  unint64_t *v39;
  _QWORD *v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47[13];

  if (a4 != a5)
  {
    v47[11] = v5;
    v47[12] = v6;
    if (*a3 != a3[1])
    {
      v7 = a4;
      v39 = (unint64_t *)(a1 + 16);
      v40 = a3;
      v41 = a5;
      v42 = a2;
      while (1)
      {
        v9 = (unsigned int *)*a3;
        v10 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v10)
          break;
LABEL_4:
        v7 += 2;
        if (v7 == a5)
          return;
      }
      v11 = *(_QWORD *)(a2 + 88);
      v12 = *v7;
      v13 = v7[1];
      v14 = (*(_DWORD *)(a2 + 112) * v12);
      v15 = v11 + 16 * (*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v12) + v14);
      v16 = *(_QWORD *)(a1 + 88);
      v17 = (*(_DWORD *)(a1 + 112) * v13);
      v18 = (char *)(v16 + 16 * v17);
      v44 = v13;
      v19 = (char *)(v16 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v13) + v17));
      v20 = v11 + 16 * v14;
      while (1)
      {
        if (v20 == v15)
          goto LABEL_4;
        v21 = *v9;
        while (*(_DWORD *)v20 != v21)
        {
          if (*(_DWORD *)v20 > v21)
            goto LABEL_33;
          v20 += 16;
          if (v20 == v15)
            goto LABEL_4;
        }
        v22 = v18;
        v23 = v9[1];
        v45 = v18;
        v46 = *(_QWORD *)(a2 + 16);
        if (v18 != v19)
        {
          v22 = v18;
          while (*(_DWORD *)v22 < v23)
          {
            v22 += 16;
            if (v22 == v19)
            {
              v24 = v19;
              goto LABEL_23;
            }
          }
        }
        v24 = v19;
        if (v22 == v19)
          goto LABEL_23;
        if (*(_DWORD *)v22 != v23)
          break;
        v25 = *v39 + 8 * *((_QWORD *)v22 + 1);
        v26 = (__int128 *)(v46 + 8 * *(_QWORD *)(v20 + 8));
        if (v26 != (__int128 *)v25)
          goto LABEL_31;
LABEL_32:
        a2 = v42;
        v18 = v45;
LABEL_33:
        if (v20 != v15)
        {
          v9 += 2;
          if (v9 != v10)
            continue;
        }
        goto LABEL_4;
      }
      v24 = v22;
LABEL_23:
      v27 = *(_QWORD *)(a1 + 80);
      v43 = *(_QWORD *)(v20 + 8);
      if (v27)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v28 = *(_QWORD *)(a1 + 56);
        v30 = ((v28 - v29) << 6) - 1;
        v31 = *(_QWORD *)(a1 + 72);
        if (v28 == v29)
          v30 = 0;
        v25 = *(_QWORD *)(a1 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v29 + (((unint64_t)(v31 + v27 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v31 + v27 - 1) & 0x1FF));
        *(_QWORD *)(a1 + 80) = v27 - 1;
        if ((unint64_t)(v30 - (v27 + v31) + 1) >= 0x400)
        {
          operator delete(*(void **)(v28 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v32 = v19 - v24;
        if (v19 != v24)
          goto LABEL_29;
      }
      else
      {
        v38 = *(void **)(a1 + 24);
        v47[0] = 0;
        sub_20F1C5A3C(v39, v38, 9uLL, v47);
        v25 = *(_QWORD *)(a1 + 24) - 72;
        v32 = v19 - v24;
        if (v19 != v24)
LABEL_29:
          memmove(v24 + 16, v24, v32);
      }
      v33 = (v25 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v24 = v23;
      *((_QWORD *)v24 + 1) = v33;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v44);
      v19 += 16;
      a3 = v40;
      a5 = v41;
      v26 = (__int128 *)(v46 + 8 * v43);
      if (v26 == (__int128 *)v25)
        goto LABEL_32;
LABEL_31:
      v34 = *v26;
      v35 = v26[1];
      v36 = v26[2];
      v37 = v26[3];
      *(_QWORD *)(v25 + 64) = *((_QWORD *)v26 + 8);
      *(_OWORD *)(v25 + 32) = v36;
      *(_OWORD *)(v25 + 48) = v37;
      *(_OWORD *)v25 = v34;
      *(_OWORD *)(v25 + 16) = v35;
      goto LABEL_32;
    }
  }
}

void sub_20F59E69C(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  unsigned int v23;
  char *v24;
  __int128 *v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  void *v45;
  unint64_t *v46;
  _QWORD *v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54[13];

  if (a4 != a5)
  {
    v54[11] = v5;
    v54[12] = v6;
    if (*a3 != a3[1])
    {
      v7 = a4;
      v46 = (unint64_t *)(a1 + 16);
      v47 = a3;
      v48 = a5;
      v49 = a2;
      while (1)
      {
        v9 = (unsigned int *)*a3;
        v10 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v10)
          break;
LABEL_4:
        v7 += 2;
        if (v7 == a5)
          return;
      }
      v11 = *(_QWORD *)(a2 + 88);
      v12 = *v7;
      v13 = v7[1];
      v14 = (*(_DWORD *)(a2 + 112) * v12);
      v15 = v11 + 16 * (*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v12) + v14);
      v16 = *(_QWORD *)(a1 + 88);
      v17 = (*(_DWORD *)(a1 + 112) * v13);
      v18 = (char *)(v16 + 16 * v17);
      v51 = v13;
      v19 = (char *)(v16 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v13) + v17));
      v20 = v11 + 16 * v14;
      while (1)
      {
        if (v20 == v15)
          goto LABEL_4;
        v21 = *v9;
        while (*(_DWORD *)v20 != v21)
        {
          if (*(_DWORD *)v20 > v21)
            goto LABEL_33;
          v20 += 16;
          if (v20 == v15)
            goto LABEL_4;
        }
        v22 = v18;
        v23 = v9[1];
        v52 = v18;
        v53 = *(_QWORD *)(a2 + 16);
        if (v18 != v19)
        {
          v22 = v18;
          while (*(_DWORD *)v22 < v23)
          {
            v22 += 16;
            if (v22 == v19)
            {
              v24 = v19;
              goto LABEL_23;
            }
          }
        }
        v24 = v19;
        if (v22 == v19)
          goto LABEL_23;
        if (*(_DWORD *)v22 != v23)
          break;
        v25 = (__int128 *)(*v46 + 8 * *((_QWORD *)v22 + 1));
        v26 = (__int128 *)(v53 + 8 * *(_QWORD *)(v20 + 8));
        if (v26 != v25)
          goto LABEL_31;
LABEL_32:
        a2 = v49;
        v18 = v52;
LABEL_33:
        if (v20 != v15)
        {
          v9 += 2;
          if (v9 != v10)
            continue;
        }
        goto LABEL_4;
      }
      v24 = v22;
LABEL_23:
      v27 = *(_QWORD *)(a1 + 80);
      v50 = *(_QWORD *)(v20 + 8);
      if (v27)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v28 = *(_QWORD *)(a1 + 56);
        v30 = ((v28 - v29) << 6) - 1;
        v31 = *(_QWORD *)(a1 + 72);
        if (v28 == v29)
          v30 = 0;
        v25 = (__int128 *)(*(_QWORD *)(a1 + 16)
                         + 8
                         * *(_QWORD *)(*(_QWORD *)(v29 + (((unint64_t)(v31 + v27 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                     + 8 * ((v31 + v27 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v27 - 1;
        if ((unint64_t)(v30 - (v27 + v31) + 1) >= 0x400)
        {
          operator delete(*(void **)(v28 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v32 = v19 - v24;
        if (v19 != v24)
          goto LABEL_29;
      }
      else
      {
        v45 = *(void **)(a1 + 24);
        v54[0] = 0;
        sub_20F1C5A3C(v46, v45, 0x18uLL, v54);
        v25 = (__int128 *)(*(_QWORD *)(a1 + 24) - 192);
        v32 = v19 - v24;
        if (v19 != v24)
LABEL_29:
          memmove(v24 + 16, v24, v32);
      }
      v33 = ((uint64_t)v25 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v24 = v23;
      *((_QWORD *)v24 + 1) = v33;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v51);
      v19 += 16;
      a3 = v47;
      a5 = v48;
      v26 = (__int128 *)(v53 + 8 * v50);
      if (v26 == v25)
        goto LABEL_32;
LABEL_31:
      v34 = *v26;
      v35 = v26[1];
      v36 = v26[2];
      v37 = v26[3];
      v38 = v26[4];
      v39 = v26[5];
      v40 = v26[6];
      v41 = v26[7];
      v42 = v26[8];
      v43 = v26[9];
      v44 = v26[11];
      v25[10] = v26[10];
      v25[11] = v44;
      v25[8] = v42;
      v25[9] = v43;
      v25[6] = v40;
      v25[7] = v41;
      v25[4] = v38;
      v25[5] = v39;
      v25[2] = v36;
      v25[3] = v37;
      *v25 = v34;
      v25[1] = v35;
      goto LABEL_32;
    }
  }
}

void sub_20F59E964(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  unsigned int v23;
  char *v24;
  __int128 *v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  void *v51;
  unint64_t *v52;
  _QWORD *v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60[13];

  if (a4 != a5)
  {
    v60[11] = v5;
    v60[12] = v6;
    if (*a3 != a3[1])
    {
      v7 = a4;
      v52 = (unint64_t *)(a1 + 16);
      v53 = a3;
      v54 = a5;
      v55 = a2;
      while (1)
      {
        v9 = (unsigned int *)*a3;
        v10 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v10)
          break;
LABEL_4:
        v7 += 2;
        if (v7 == a5)
          return;
      }
      v11 = *(_QWORD *)(a2 + 88);
      v12 = *v7;
      v13 = v7[1];
      v14 = (*(_DWORD *)(a2 + 112) * v12);
      v15 = v11 + 16 * (*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v12) + v14);
      v16 = *(_QWORD *)(a1 + 88);
      v17 = (*(_DWORD *)(a1 + 112) * v13);
      v18 = (char *)(v16 + 16 * v17);
      v57 = v13;
      v19 = (char *)(v16 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v13) + v17));
      v20 = v11 + 16 * v14;
      while (1)
      {
        if (v20 == v15)
          goto LABEL_4;
        v21 = *v9;
        while (*(_DWORD *)v20 != v21)
        {
          if (*(_DWORD *)v20 > v21)
            goto LABEL_33;
          v20 += 16;
          if (v20 == v15)
            goto LABEL_4;
        }
        v22 = v18;
        v23 = v9[1];
        v58 = v18;
        v59 = *(_QWORD *)(a2 + 16);
        if (v18 != v19)
        {
          v22 = v18;
          while (*(_DWORD *)v22 < v23)
          {
            v22 += 16;
            if (v22 == v19)
            {
              v24 = v19;
              goto LABEL_23;
            }
          }
        }
        v24 = v19;
        if (v22 == v19)
          goto LABEL_23;
        if (*(_DWORD *)v22 != v23)
          break;
        v25 = (__int128 *)(*v52 + 8 * *((_QWORD *)v22 + 1));
        v26 = (__int128 *)(v59 + 8 * *(_QWORD *)(v20 + 8));
        if (v26 != v25)
          goto LABEL_31;
LABEL_32:
        a2 = v55;
        v18 = v58;
LABEL_33:
        if (v20 != v15)
        {
          v9 += 2;
          if (v9 != v10)
            continue;
        }
        goto LABEL_4;
      }
      v24 = v22;
LABEL_23:
      v27 = *(_QWORD *)(a1 + 80);
      v56 = *(_QWORD *)(v20 + 8);
      if (v27)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v28 = *(_QWORD *)(a1 + 56);
        v30 = ((v28 - v29) << 6) - 1;
        v31 = *(_QWORD *)(a1 + 72);
        if (v28 == v29)
          v30 = 0;
        v25 = (__int128 *)(*(_QWORD *)(a1 + 16)
                         + 8
                         * *(_QWORD *)(*(_QWORD *)(v29 + (((unint64_t)(v31 + v27 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                     + 8 * ((v31 + v27 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v27 - 1;
        if ((unint64_t)(v30 - (v27 + v31) + 1) >= 0x400)
        {
          operator delete(*(void **)(v28 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v32 = v19 - v24;
        if (v19 != v24)
          goto LABEL_29;
      }
      else
      {
        v51 = *(void **)(a1 + 24);
        v60[0] = 0;
        sub_20F1C5A3C(v52, v51, 0x24uLL, v60);
        v25 = (__int128 *)(*(_QWORD *)(a1 + 24) - 288);
        v32 = v19 - v24;
        if (v19 != v24)
LABEL_29:
          memmove(v24 + 16, v24, v32);
      }
      v33 = ((uint64_t)v25 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v24 = v23;
      *((_QWORD *)v24 + 1) = v33;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v57);
      v19 += 16;
      a3 = v53;
      a5 = v54;
      v26 = (__int128 *)(v59 + 8 * v56);
      if (v26 == v25)
        goto LABEL_32;
LABEL_31:
      v34 = *v26;
      v35 = v26[1];
      v36 = v26[2];
      v37 = v26[3];
      v38 = v26[4];
      v39 = v26[5];
      v40 = v26[6];
      v41 = v26[7];
      v42 = v26[8];
      v43 = v26[9];
      v44 = v26[10];
      v45 = v26[11];
      v46 = v26[12];
      v47 = v26[13];
      v48 = v26[14];
      v49 = v26[15];
      v50 = v26[17];
      v25[16] = v26[16];
      v25[17] = v50;
      v25[14] = v48;
      v25[15] = v49;
      v25[12] = v46;
      v25[13] = v47;
      v25[10] = v44;
      v25[11] = v45;
      v25[8] = v42;
      v25[9] = v43;
      v25[6] = v40;
      v25[7] = v41;
      v25[4] = v38;
      v25[5] = v39;
      v25[2] = v36;
      v25[3] = v37;
      *v25 = v34;
      v25[1] = v35;
      goto LABEL_32;
    }
  }
}

void sub_20F59EC44(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  unsigned int v23;
  char *v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  __int128 v34;
  void *v35;
  unint64_t *v36;
  _QWORD *v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44[13];

  if (a4 != a5)
  {
    v44[11] = v5;
    v44[12] = v6;
    if (*a3 != a3[1])
    {
      v7 = a4;
      v36 = (unint64_t *)(a1 + 16);
      v37 = a3;
      v38 = a5;
      v39 = a2;
      while (1)
      {
        v9 = (unsigned int *)*a3;
        v10 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v10)
          break;
LABEL_4:
        v7 += 2;
        if (v7 == a5)
          return;
      }
      v11 = *(_QWORD *)(a2 + 88);
      v12 = *v7;
      v13 = v7[1];
      v14 = (*(_DWORD *)(a2 + 112) * v12);
      v15 = v11 + 16 * (*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v12) + v14);
      v16 = *(_QWORD *)(a1 + 88);
      v17 = (*(_DWORD *)(a1 + 112) * v13);
      v18 = (char *)(v16 + 16 * v17);
      v41 = v13;
      v19 = (char *)(v16 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v13) + v17));
      v20 = v11 + 16 * v14;
      while (1)
      {
        if (v20 == v15)
          goto LABEL_4;
        v21 = *v9;
        while (*(_DWORD *)v20 != v21)
        {
          if (*(_DWORD *)v20 > v21)
            goto LABEL_33;
          v20 += 16;
          if (v20 == v15)
            goto LABEL_4;
        }
        v22 = v18;
        v23 = v9[1];
        v42 = v18;
        v43 = *(_QWORD *)(a2 + 16);
        if (v18 != v19)
        {
          v22 = v18;
          while (*(_DWORD *)v22 < v23)
          {
            v22 += 16;
            if (v22 == v19)
            {
              v24 = v19;
              goto LABEL_23;
            }
          }
        }
        v24 = v19;
        if (v22 == v19)
          goto LABEL_23;
        if (*(_DWORD *)v22 != v23)
          break;
        v25 = (_OWORD *)(*v36 + 8 * *((_QWORD *)v22 + 1));
        v26 = (_OWORD *)(v43 + 8 * *(_QWORD *)(v20 + 8));
        if (v26 != v25)
          goto LABEL_31;
LABEL_32:
        a2 = v39;
        v18 = v42;
LABEL_33:
        if (v20 != v15)
        {
          v9 += 2;
          if (v9 != v10)
            continue;
        }
        goto LABEL_4;
      }
      v24 = v22;
LABEL_23:
      v27 = *(_QWORD *)(a1 + 80);
      v40 = *(_QWORD *)(v20 + 8);
      if (v27)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v28 = *(_QWORD *)(a1 + 56);
        v30 = ((v28 - v29) << 6) - 1;
        v31 = *(_QWORD *)(a1 + 72);
        if (v28 == v29)
          v30 = 0;
        v25 = (_OWORD *)(*(_QWORD *)(a1 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v29 + (((unint64_t)(v31 + v27 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v31 + v27 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v27 - 1;
        if ((unint64_t)(v30 - (v27 + v31) + 1) >= 0x400)
        {
          operator delete(*(void **)(v28 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v32 = v19 - v24;
        if (v19 != v24)
          goto LABEL_29;
      }
      else
      {
        v35 = *(void **)(a1 + 24);
        v44[0] = 0;
        sub_20F1C5A3C(v36, v35, 4uLL, v44);
        v25 = (_OWORD *)(*(_QWORD *)(a1 + 24) - 32);
        v32 = v19 - v24;
        if (v19 != v24)
LABEL_29:
          memmove(v24 + 16, v24, v32);
      }
      v33 = ((uint64_t)v25 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v24 = v23;
      *((_QWORD *)v24 + 1) = v33;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v41);
      v19 += 16;
      a3 = v37;
      a5 = v38;
      v26 = (_OWORD *)(v43 + 8 * v40);
      if (v26 == v25)
        goto LABEL_32;
LABEL_31:
      v34 = v26[1];
      *v25 = *v26;
      v25[1] = v34;
      goto LABEL_32;
    }
  }
}

void sub_20F59EEE4(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  unsigned int v23;
  char *v24;
  __int128 *v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  void *v41;
  unint64_t *v42;
  _QWORD *v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50[13];

  if (a4 != a5)
  {
    v50[11] = v5;
    v50[12] = v6;
    if (*a3 != a3[1])
    {
      v7 = a4;
      v42 = (unint64_t *)(a1 + 16);
      v43 = a3;
      v44 = a5;
      v45 = a2;
      while (1)
      {
        v9 = (unsigned int *)*a3;
        v10 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v10)
          break;
LABEL_4:
        v7 += 2;
        if (v7 == a5)
          return;
      }
      v11 = *(_QWORD *)(a2 + 88);
      v12 = *v7;
      v13 = v7[1];
      v14 = (*(_DWORD *)(a2 + 112) * v12);
      v15 = v11 + 16 * (*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v12) + v14);
      v16 = *(_QWORD *)(a1 + 88);
      v17 = (*(_DWORD *)(a1 + 112) * v13);
      v18 = (char *)(v16 + 16 * v17);
      v47 = v13;
      v19 = (char *)(v16 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v13) + v17));
      v20 = v11 + 16 * v14;
      while (1)
      {
        if (v20 == v15)
          goto LABEL_4;
        v21 = *v9;
        while (*(_DWORD *)v20 != v21)
        {
          if (*(_DWORD *)v20 > v21)
            goto LABEL_33;
          v20 += 16;
          if (v20 == v15)
            goto LABEL_4;
        }
        v22 = v18;
        v23 = v9[1];
        v48 = v18;
        v49 = *(_QWORD *)(a2 + 16);
        if (v18 != v19)
        {
          v22 = v18;
          while (*(_DWORD *)v22 < v23)
          {
            v22 += 16;
            if (v22 == v19)
            {
              v24 = v19;
              goto LABEL_23;
            }
          }
        }
        v24 = v19;
        if (v22 == v19)
          goto LABEL_23;
        if (*(_DWORD *)v22 != v23)
          break;
        v25 = (__int128 *)(*v42 + 8 * *((_QWORD *)v22 + 1));
        v26 = (__int128 *)(v49 + 8 * *(_QWORD *)(v20 + 8));
        if (v26 != v25)
          goto LABEL_31;
LABEL_32:
        a2 = v45;
        v18 = v48;
LABEL_33:
        if (v20 != v15)
        {
          v9 += 2;
          if (v9 != v10)
            continue;
        }
        goto LABEL_4;
      }
      v24 = v22;
LABEL_23:
      v27 = *(_QWORD *)(a1 + 80);
      v46 = *(_QWORD *)(v20 + 8);
      if (v27)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v28 = *(_QWORD *)(a1 + 56);
        v30 = ((v28 - v29) << 6) - 1;
        v31 = *(_QWORD *)(a1 + 72);
        if (v28 == v29)
          v30 = 0;
        v25 = (__int128 *)(*(_QWORD *)(a1 + 16)
                         + 8
                         * *(_QWORD *)(*(_QWORD *)(v29 + (((unint64_t)(v31 + v27 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                     + 8 * ((v31 + v27 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v27 - 1;
        if ((unint64_t)(v30 - (v27 + v31) + 1) >= 0x400)
        {
          operator delete(*(void **)(v28 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v32 = v19 - v24;
        if (v19 != v24)
          goto LABEL_29;
      }
      else
      {
        v41 = *(void **)(a1 + 24);
        v50[0] = 0;
        sub_20F1C5A3C(v42, v41, 0x10uLL, v50);
        v25 = (__int128 *)(*(_QWORD *)(a1 + 24) - 128);
        v32 = v19 - v24;
        if (v19 != v24)
LABEL_29:
          memmove(v24 + 16, v24, v32);
      }
      v33 = ((uint64_t)v25 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v24 = v23;
      *((_QWORD *)v24 + 1) = v33;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v47);
      v19 += 16;
      a3 = v43;
      a5 = v44;
      v26 = (__int128 *)(v49 + 8 * v46);
      if (v26 == v25)
        goto LABEL_32;
LABEL_31:
      v35 = *v26;
      v34 = v26[1];
      v37 = v26[2];
      v36 = v26[3];
      v39 = v26[4];
      v38 = v26[5];
      v40 = v26[7];
      v25[6] = v26[6];
      v25[7] = v40;
      v25[4] = v39;
      v25[5] = v38;
      v25[2] = v37;
      v25[3] = v36;
      *v25 = v35;
      v25[1] = v34;
      goto LABEL_32;
    }
  }
}

void sub_20F59F19C(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unsigned int v25;
  char *v26;
  unsigned int v27;
  char *v28;
  __int128 *v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  void *v64;
  unint64_t *v65;
  _QWORD *v66;
  unsigned int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73[17];

  if (a4 != a5)
  {
    v73[1] = v10;
    v73[2] = v9;
    v73[3] = v8;
    v73[4] = v7;
    v73[15] = v5;
    v73[16] = v6;
    if (*a3 != a3[1])
    {
      v11 = a4;
      v65 = (unint64_t *)(a1 + 16);
      v66 = a3;
      v67 = a5;
      v68 = a2;
      while (1)
      {
        v13 = (unsigned int *)*a3;
        v14 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v14)
          break;
LABEL_4:
        v11 += 2;
        if (v11 == a5)
          return;
      }
      v15 = *(_QWORD *)(a2 + 88);
      v16 = *v11;
      v17 = v11[1];
      v18 = (*(_DWORD *)(a2 + 112) * v16);
      v19 = v15 + 16 * (*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v16) + v18);
      v20 = *(_QWORD *)(a1 + 88);
      v21 = (*(_DWORD *)(a1 + 112) * v17);
      v22 = (char *)(v20 + 16 * v21);
      v70 = v17;
      v23 = (char *)(v20 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v17) + v21));
      v24 = v15 + 16 * v18;
      while (1)
      {
        if (v24 == v19)
          goto LABEL_4;
        v25 = *v13;
        while (*(_DWORD *)v24 != v25)
        {
          if (*(_DWORD *)v24 > v25)
            goto LABEL_33;
          v24 += 16;
          if (v24 == v19)
            goto LABEL_4;
        }
        v26 = v22;
        v27 = v13[1];
        v71 = v22;
        v72 = *(_QWORD *)(a2 + 16);
        if (v22 != v23)
        {
          v26 = v22;
          while (*(_DWORD *)v26 < v27)
          {
            v26 += 16;
            if (v26 == v23)
            {
              v28 = v23;
              goto LABEL_23;
            }
          }
        }
        v28 = v23;
        if (v26 == v23)
          goto LABEL_23;
        if (*(_DWORD *)v26 != v27)
          break;
        v29 = (__int128 *)(*v65 + 8 * *((_QWORD *)v26 + 1));
        v30 = (__int128 *)(v72 + 8 * *(_QWORD *)(v24 + 8));
        if (v30 != v29)
          goto LABEL_31;
LABEL_32:
        a2 = v68;
        v22 = v71;
LABEL_33:
        if (v24 != v19)
        {
          v13 += 2;
          if (v13 != v14)
            continue;
        }
        goto LABEL_4;
      }
      v28 = v26;
LABEL_23:
      v31 = *(_QWORD *)(a1 + 80);
      v69 = *(_QWORD *)(v24 + 8);
      if (v31)
      {
        v33 = *(_QWORD *)(a1 + 48);
        v32 = *(_QWORD *)(a1 + 56);
        v34 = ((v32 - v33) << 6) - 1;
        v35 = *(_QWORD *)(a1 + 72);
        if (v32 == v33)
          v34 = 0;
        v29 = (__int128 *)(*(_QWORD *)(a1 + 16)
                         + 8
                         * *(_QWORD *)(*(_QWORD *)(v33 + (((unint64_t)(v35 + v31 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                     + 8 * ((v35 + v31 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v31 - 1;
        if ((unint64_t)(v34 - (v31 + v35) + 1) >= 0x400)
        {
          operator delete(*(void **)(v32 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v36 = v23 - v28;
        if (v23 != v28)
          goto LABEL_29;
      }
      else
      {
        v64 = *(void **)(a1 + 24);
        v73[0] = 0;
        sub_20F1C5A3C(v65, v64, 0x36uLL, v73);
        v29 = (__int128 *)(*(_QWORD *)(a1 + 24) - 432);
        v36 = v23 - v28;
        if (v23 != v28)
LABEL_29:
          memmove(v28 + 16, v28, v36);
      }
      v37 = ((uint64_t)v29 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v28 = v27;
      *((_QWORD *)v28 + 1) = v37;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v70);
      v23 += 16;
      a3 = v66;
      a5 = v67;
      v30 = (__int128 *)(v72 + 8 * v69);
      if (v30 == v29)
        goto LABEL_32;
LABEL_31:
      v38 = *v30;
      v39 = v30[1];
      v40 = v30[2];
      v41 = v30[3];
      v42 = v30[4];
      v43 = v30[5];
      v44 = v30[6];
      v45 = v30[7];
      v46 = v30[8];
      v47 = v30[9];
      v48 = v30[10];
      v49 = v30[11];
      v50 = v30[12];
      v51 = v30[13];
      v52 = v30[14];
      v53 = v30[15];
      v54 = v30[16];
      v55 = v30[17];
      v56 = v30[18];
      v57 = v30[19];
      v58 = v30[20];
      v59 = v30[21];
      v60 = v30[22];
      v61 = v30[23];
      v62 = v30[24];
      v63 = v30[26];
      v29[25] = v30[25];
      v29[26] = v63;
      v29[23] = v61;
      v29[24] = v62;
      v29[21] = v59;
      v29[22] = v60;
      v29[19] = v57;
      v29[20] = v58;
      v29[17] = v55;
      v29[18] = v56;
      v29[15] = v53;
      v29[16] = v54;
      v29[13] = v51;
      v29[14] = v52;
      v29[11] = v49;
      v29[12] = v50;
      v29[9] = v47;
      v29[10] = v48;
      v29[7] = v45;
      v29[8] = v46;
      v29[5] = v43;
      v29[6] = v44;
      v29[3] = v41;
      v29[4] = v42;
      v29[1] = v39;
      v29[2] = v40;
      *v29 = v38;
      goto LABEL_32;
    }
  }
}

void sub_20F59F4B4(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  unsigned int v23;
  char *v24;
  __int128 *v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  void *v36;
  unint64_t *v37;
  _QWORD *v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45[13];

  if (a4 != a5)
  {
    v45[11] = v5;
    v45[12] = v6;
    if (*a3 != a3[1])
    {
      v7 = a4;
      v37 = (unint64_t *)(a1 + 16);
      v38 = a3;
      v39 = a5;
      v40 = a2;
      while (1)
      {
        v9 = (unsigned int *)*a3;
        v10 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v10)
          break;
LABEL_4:
        v7 += 2;
        if (v7 == a5)
          return;
      }
      v11 = *(_QWORD *)(a2 + 88);
      v12 = *v7;
      v13 = v7[1];
      v14 = (*(_DWORD *)(a2 + 112) * v12);
      v15 = v11 + 16 * (*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v12) + v14);
      v16 = *(_QWORD *)(a1 + 88);
      v17 = (*(_DWORD *)(a1 + 112) * v13);
      v18 = (char *)(v16 + 16 * v17);
      v42 = v13;
      v19 = (char *)(v16 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v13) + v17));
      v20 = v11 + 16 * v14;
      while (1)
      {
        if (v20 == v15)
          goto LABEL_4;
        v21 = *v9;
        while (*(_DWORD *)v20 != v21)
        {
          if (*(_DWORD *)v20 > v21)
            goto LABEL_33;
          v20 += 16;
          if (v20 == v15)
            goto LABEL_4;
        }
        v22 = v18;
        v23 = v9[1];
        v43 = v18;
        v44 = *(_QWORD *)(a2 + 16);
        if (v18 != v19)
        {
          v22 = v18;
          while (*(_DWORD *)v22 < v23)
          {
            v22 += 16;
            if (v22 == v19)
            {
              v24 = v19;
              goto LABEL_23;
            }
          }
        }
        v24 = v19;
        if (v22 == v19)
          goto LABEL_23;
        if (*(_DWORD *)v22 != v23)
          break;
        v25 = (__int128 *)(*v37 + 8 * *((_QWORD *)v22 + 1));
        v26 = (__int128 *)(v44 + 8 * *(_QWORD *)(v20 + 8));
        if (v26 != v25)
          goto LABEL_31;
LABEL_32:
        a2 = v40;
        v18 = v43;
LABEL_33:
        if (v20 != v15)
        {
          v9 += 2;
          if (v9 != v10)
            continue;
        }
        goto LABEL_4;
      }
      v24 = v22;
LABEL_23:
      v27 = *(_QWORD *)(a1 + 80);
      v41 = *(_QWORD *)(v20 + 8);
      if (v27)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v28 = *(_QWORD *)(a1 + 56);
        v30 = ((v28 - v29) << 6) - 1;
        v31 = *(_QWORD *)(a1 + 72);
        if (v28 == v29)
          v30 = 0;
        v25 = (__int128 *)(*(_QWORD *)(a1 + 16)
                         + 8
                         * *(_QWORD *)(*(_QWORD *)(v29 + (((unint64_t)(v31 + v27 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                     + 8 * ((v31 + v27 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v27 - 1;
        if ((unint64_t)(v30 - (v27 + v31) + 1) >= 0x400)
        {
          operator delete(*(void **)(v28 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v32 = v19 - v24;
        if (v19 != v24)
          goto LABEL_29;
      }
      else
      {
        v36 = *(void **)(a1 + 24);
        v45[0] = 0;
        sub_20F1C5A3C(v37, v36, 6uLL, v45);
        v25 = (__int128 *)(*(_QWORD *)(a1 + 24) - 48);
        v32 = v19 - v24;
        if (v19 != v24)
LABEL_29:
          memmove(v24 + 16, v24, v32);
      }
      v33 = ((uint64_t)v25 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v24 = v23;
      *((_QWORD *)v24 + 1) = v33;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v42);
      v19 += 16;
      a3 = v38;
      a5 = v39;
      v26 = (__int128 *)(v44 + 8 * v41);
      if (v26 == v25)
        goto LABEL_32;
LABEL_31:
      v34 = *v26;
      v35 = v26[2];
      v25[1] = v26[1];
      v25[2] = v35;
      *v25 = v34;
      goto LABEL_32;
    }
  }
}

void sub_20F59F75C(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  unsigned int v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  void *v34;
  unint64_t *v35;
  _QWORD *v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43[13];

  if (a4 != a5)
  {
    v43[11] = v5;
    v43[12] = v6;
    if (*a3 != a3[1])
    {
      v7 = a4;
      v35 = (unint64_t *)(a1 + 16);
      v36 = a3;
      v37 = a5;
      v38 = a2;
      while (1)
      {
        v9 = (unsigned int *)*a3;
        v10 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v10)
          break;
LABEL_4:
        v7 += 2;
        if (v7 == a5)
          return;
      }
      v11 = *(_QWORD *)(a2 + 88);
      v12 = *v7;
      v13 = v7[1];
      v14 = (*(_DWORD *)(a2 + 112) * v12);
      v15 = v11 + 16 * (*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v12) + v14);
      v16 = *(_QWORD *)(a1 + 88);
      v17 = (*(_DWORD *)(a1 + 112) * v13);
      v18 = (char *)(v16 + 16 * v17);
      v40 = v13;
      v19 = (char *)(v16 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v13) + v17));
      v20 = v11 + 16 * v14;
      while (1)
      {
        if (v20 == v15)
          goto LABEL_4;
        v21 = *v9;
        while (*(_DWORD *)v20 != v21)
        {
          if (*(_DWORD *)v20 > v21)
            goto LABEL_33;
          v20 += 16;
          if (v20 == v15)
            goto LABEL_4;
        }
        v22 = v18;
        v23 = v9[1];
        v41 = v18;
        v42 = *(_QWORD *)(a2 + 16);
        if (v18 != v19)
        {
          v22 = v18;
          while (*(_DWORD *)v22 < v23)
          {
            v22 += 16;
            if (v22 == v19)
            {
              v24 = v19;
              goto LABEL_23;
            }
          }
        }
        v24 = v19;
        if (v22 == v19)
          goto LABEL_23;
        if (*(_DWORD *)v22 != v23)
          break;
        v25 = (_QWORD *)(*v35 + 8 * *((_QWORD *)v22 + 1));
        v26 = (_QWORD *)(v42 + 8 * *(_QWORD *)(v20 + 8));
        if (v26 != v25)
          goto LABEL_31;
LABEL_32:
        a2 = v38;
        v18 = v41;
LABEL_33:
        if (v20 != v15)
        {
          v9 += 2;
          if (v9 != v10)
            continue;
        }
        goto LABEL_4;
      }
      v24 = v22;
LABEL_23:
      v27 = *(_QWORD *)(a1 + 80);
      v39 = *(_QWORD *)(v20 + 8);
      if (v27)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v28 = *(_QWORD *)(a1 + 56);
        v30 = ((v28 - v29) << 6) - 1;
        v31 = *(_QWORD *)(a1 + 72);
        if (v28 == v29)
          v30 = 0;
        v25 = (_QWORD *)(*(_QWORD *)(a1 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v29 + (((unint64_t)(v31 + v27 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v31 + v27 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v27 - 1;
        if ((unint64_t)(v30 - (v27 + v31) + 1) >= 0x400)
        {
          operator delete(*(void **)(v28 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v32 = v19 - v24;
        if (v19 != v24)
          goto LABEL_29;
      }
      else
      {
        v34 = *(void **)(a1 + 24);
        v43[0] = 0;
        sub_20F1C5A3C(v35, v34, 1uLL, v43);
        v25 = (_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
        v32 = v19 - v24;
        if (v19 != v24)
LABEL_29:
          memmove(v24 + 16, v24, v32);
      }
      v33 = ((uint64_t)v25 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v24 = v23;
      *((_QWORD *)v24 + 1) = v33;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v40);
      v19 += 16;
      a3 = v36;
      a5 = v37;
      v26 = (_QWORD *)(v42 + 8 * v39);
      if (v26 == v25)
        goto LABEL_32;
LABEL_31:
      *v25 = *v26;
      goto LABEL_32;
    }
  }
}

void sub_20F59F9FC(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unsigned int v29;
  char *v30;
  unsigned int v31;
  char *v32;
  uint64_t v33;
  __int128 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  void *v73;
  unint64_t *v74;
  _QWORD *v75;
  unsigned int *v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91[22];

  if (a4 != a5)
  {
    v91[2] = v14;
    v91[3] = v13;
    v91[4] = v12;
    v91[5] = v11;
    v91[6] = v10;
    v91[7] = v9;
    v91[8] = v8;
    v91[9] = v7;
    v91[20] = v5;
    v91[21] = v6;
    if (*a3 != a3[1])
    {
      v15 = a4;
      v74 = (unint64_t *)(a1 + 16);
      v75 = a3;
      v76 = a5;
      v77 = a2;
      while (1)
      {
        v17 = (unsigned int *)*a3;
        v18 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v18)
          break;
LABEL_4:
        v15 += 2;
        if (v15 == a5)
          return;
      }
      v19 = *(_QWORD *)(a2 + 88);
      v20 = *v15;
      v21 = v15[1];
      v22 = (*(_DWORD *)(a2 + 112) * v20);
      v23 = v19 + 16 * (*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v20) + v22);
      v24 = *(_QWORD *)(a1 + 88);
      v25 = (*(_DWORD *)(a1 + 112) * v21);
      v26 = (char *)(v24 + 16 * v25);
      v87 = v21;
      v27 = (char *)(v24 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v21) + v25));
      v28 = v19 + 16 * v22;
      while (1)
      {
        if (v28 == v23)
          goto LABEL_4;
        v29 = *v17;
        while (*(_DWORD *)v28 != v29)
        {
          if (*(_DWORD *)v28 > v29)
            goto LABEL_33;
          v28 += 16;
          if (v28 == v23)
            goto LABEL_4;
        }
        v30 = v26;
        v31 = v17[1];
        v88 = v26;
        v89 = *(_QWORD *)(a2 + 16);
        if (v26 != v27)
        {
          v30 = v26;
          while (*(_DWORD *)v30 < v31)
          {
            v30 += 16;
            if (v30 == v27)
            {
              v32 = v27;
              goto LABEL_23;
            }
          }
        }
        v32 = v27;
        if (v30 == v27)
          goto LABEL_23;
        if (*(_DWORD *)v30 != v31)
          break;
        v33 = *v74 + 8 * *((_QWORD *)v30 + 1);
        v34 = (__int128 *)(v89 + 8 * *(_QWORD *)(v28 + 8));
        if (v34 != (__int128 *)v33)
          goto LABEL_31;
LABEL_32:
        a2 = v77;
        v26 = v88;
LABEL_33:
        if (v28 != v23)
        {
          v17 += 2;
          if (v17 != v18)
            continue;
        }
        goto LABEL_4;
      }
      v32 = v30;
LABEL_23:
      v35 = *(_QWORD *)(a1 + 80);
      v85 = *(_QWORD *)(v28 + 8);
      if (v35)
      {
        v37 = *(_QWORD *)(a1 + 48);
        v36 = *(_QWORD *)(a1 + 56);
        v38 = ((v36 - v37) << 6) - 1;
        v39 = *(_QWORD *)(a1 + 72);
        if (v36 == v37)
          v38 = 0;
        v33 = *(_QWORD *)(a1 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v37 + (((unint64_t)(v39 + v35 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v39 + v35 - 1) & 0x1FF));
        *(_QWORD *)(a1 + 80) = v35 - 1;
        if ((unint64_t)(v38 - (v35 + v39) + 1) >= 0x400)
        {
          operator delete(*(void **)(v36 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v40 = v27 - v32;
        if (v27 != v32)
          goto LABEL_29;
      }
      else
      {
        v73 = *(void **)(a1 + 24);
        v91[0] = 0;
        sub_20F1C5A3C(v74, v73, 0x51uLL, v91);
        v33 = *(_QWORD *)(a1 + 24) - 648;
        v40 = v27 - v32;
        if (v27 != v32)
LABEL_29:
          memmove(v32 + 16, v32, v40);
      }
      v41 = (v33 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v32 = v31;
      *((_QWORD *)v32 + 1) = v41;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v87);
      v27 += 16;
      a3 = v75;
      a5 = v76;
      v34 = (__int128 *)(v89 + 8 * v85);
      if (v34 == (__int128 *)v33)
        goto LABEL_32;
LABEL_31:
      v90 = *v34;
      v84 = v34[2];
      v86 = v34[1];
      v82 = v34[4];
      v83 = v34[3];
      v80 = v34[6];
      v81 = v34[5];
      v42 = v34[9];
      v78 = v34[8];
      v79 = v34[7];
      v43 = v34[10];
      v44 = v34[11];
      v45 = v34[12];
      v46 = v34[13];
      v47 = v34[14];
      v48 = v34[15];
      v49 = v34[16];
      v50 = v34[17];
      v51 = v34[18];
      v52 = v34[19];
      v53 = v34[20];
      v54 = v34[21];
      v55 = v34[22];
      v56 = v34[23];
      v57 = v34[24];
      v58 = v34[25];
      v59 = v34[26];
      v60 = v34[27];
      v61 = v34[28];
      v62 = v34[29];
      v63 = v34[30];
      v64 = v34[31];
      v66 = v34[32];
      v65 = v34[33];
      v68 = v34[34];
      v67 = v34[35];
      v70 = v34[36];
      v69 = v34[37];
      v72 = v34[38];
      v71 = v34[39];
      *(_QWORD *)(v33 + 640) = *((_QWORD *)v34 + 80);
      *(_OWORD *)(v33 + 608) = v72;
      *(_OWORD *)(v33 + 624) = v71;
      *(_OWORD *)(v33 + 576) = v70;
      *(_OWORD *)(v33 + 592) = v69;
      *(_OWORD *)(v33 + 544) = v68;
      *(_OWORD *)(v33 + 560) = v67;
      *(_OWORD *)(v33 + 512) = v66;
      *(_OWORD *)(v33 + 528) = v65;
      *(_OWORD *)(v33 + 480) = v63;
      *(_OWORD *)(v33 + 496) = v64;
      *(_OWORD *)(v33 + 448) = v61;
      *(_OWORD *)(v33 + 464) = v62;
      *(_OWORD *)(v33 + 416) = v59;
      *(_OWORD *)(v33 + 432) = v60;
      *(_OWORD *)(v33 + 384) = v57;
      *(_OWORD *)(v33 + 400) = v58;
      *(_OWORD *)(v33 + 352) = v55;
      *(_OWORD *)(v33 + 368) = v56;
      *(_OWORD *)(v33 + 320) = v53;
      *(_OWORD *)(v33 + 336) = v54;
      *(_OWORD *)(v33 + 288) = v51;
      *(_OWORD *)(v33 + 304) = v52;
      *(_OWORD *)(v33 + 256) = v49;
      *(_OWORD *)(v33 + 272) = v50;
      *(_OWORD *)(v33 + 224) = v47;
      *(_OWORD *)(v33 + 240) = v48;
      *(_OWORD *)(v33 + 192) = v45;
      *(_OWORD *)(v33 + 208) = v46;
      *(_OWORD *)(v33 + 160) = v43;
      *(_OWORD *)(v33 + 176) = v44;
      *(_OWORD *)(v33 + 128) = v78;
      *(_OWORD *)(v33 + 144) = v42;
      *(_OWORD *)(v33 + 112) = v79;
      *(_OWORD *)(v33 + 96) = v80;
      *(_OWORD *)(v33 + 80) = v81;
      *(_OWORD *)(v33 + 64) = v82;
      *(_OWORD *)(v33 + 48) = v83;
      *(_OWORD *)(v33 + 32) = v84;
      *(_OWORD *)(v33 + 16) = v86;
      *(_OWORD *)v33 = v90;
      goto LABEL_32;
    }
  }
}

void sub_20F59FDA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t **v7;
  unint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  unsigned int v20;
  _DWORD *v21;
  _DWORD *v22;
  char **v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  unint64_t *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  unint64_t v43;
  uint64_t v45;
  _DWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  unint64_t **v50;
  _QWORD *v51;
  char **v52;
  unint64_t v53;

  v45 = a4;
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = (unint64_t **)(a4 + 24 * v5);
    v8 = *v7;
    v7[1] = *v7;
    v52 = (char **)(v7 + 1);
    v9 = (_QWORD *)(a1 + 24 * v5);
    v10 = v9[1];
    if (*v9 != v10)
    {
      v11 = v10 - *v9;
      v12 = v11 >> 2;
      v13 = a4 + 24 * v5;
      v15 = *(_QWORD *)(v13 + 16);
      v14 = (_QWORD *)(v13 + 16);
      v51 = v14;
      if (v11 >> 2 > (unint64_t)((v15 - (uint64_t)v8) >> 3))
      {
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFDLL)
          sub_20E92CED8();
        v16 = (char *)operator new(2 * v11);
        *v7 = (unint64_t *)v16;
        v14 = v51;
        *v52 = v16;
        *v51 = &v16[8 * v12];
        if (v8)
        {
          operator delete(v8);
          v14 = v51;
        }
      }
      v17 = a2 + 24 * v5;
      v19 = *(_DWORD **)v17;
      v18 = *(_DWORD **)(v17 + 8);
      if (*(_DWORD **)v17 != v18)
      {
        v20 = 0;
        v21 = (_DWORD *)v9[1];
        v22 = (_DWORD *)*v9;
        v23 = (char **)(v7 + 1);
        v47 = v21;
        v48 = *(_DWORD **)(v17 + 8);
        v49 = v5;
        v50 = v7;
        do
        {
          if (*v19 != *v22)
            goto LABEL_36;
          v24 = *v23;
          if ((unint64_t)*v23 < *v14)
          {
            *(_QWORD *)v24 = v20 | (unint64_t)(v6 << 32);
            *v23 = v24 + 8;
            v6 = (*(_DWORD *)(a3 + 4 * v5) + v6);
            if (++v22 == v21)
              break;
            goto LABEL_36;
          }
          v25 = a3;
          v26 = (char *)*v7;
          v27 = v24 - (char *)*v7;
          v28 = v27 >> 3;
          v29 = (v27 >> 3) + 1;
          if (v29 >> 61)
            sub_20E92CED8();
          v30 = *v14 - (_QWORD)v26;
          if (v30 >> 2 > v29)
            v29 = v30 >> 2;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
            v29 = 0x1FFFFFFFFFFFFFFFLL;
          v53 = v29;
          if (v29)
          {
            if (v29 >> 61)
              sub_20E877A38();
            v31 = operator new(8 * v29);
            v14 = v51;
          }
          else
          {
            v31 = 0;
          }
          v32 = (unint64_t *)&v31[8 * v28];
          *v32 = v20 | (unint64_t)(v6 << 32);
          v33 = (char *)(v32 + 1);
          if (v24 == v26)
          {
            a3 = v25;
            v7 = v50;
            v23 = v52;
            goto LABEL_33;
          }
          v34 = v24 - v26 - 8;
          if (v34 >= 0x58)
          {
            v35 = v24 - &v31[v27];
            a3 = v25;
            v23 = v52;
            if (v35 >= 0x20)
            {
              v36 = (v34 >> 3) + 1;
              v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
              v38 = &v24[-v37];
              v32 = (unint64_t *)((char *)v32 - v37);
              v39 = &v31[8 * v28 - 16];
              v40 = v24 - 16;
              v41 = v36 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v42 = *(_OWORD *)v40;
                *(v39 - 1) = *((_OWORD *)v40 - 1);
                *v39 = v42;
                v39 -= 2;
                v40 -= 32;
                v41 -= 4;
              }
              while (v41);
              v24 = v38;
              if (v36 == (v36 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_32;
            }
          }
          else
          {
            a3 = v25;
            v23 = v52;
          }
          do
          {
            v43 = *((_QWORD *)v24 - 1);
            v24 -= 8;
            *--v32 = v43;
          }
          while (v24 != v26);
LABEL_32:
          v7 = v50;
          v24 = (char *)*v50;
LABEL_33:
          *v7 = v32;
          *v23 = v33;
          *v14 = &v31[8 * v53];
          v5 = v49;
          if (v24)
          {
            operator delete(v24);
            v14 = v51;
          }
          v21 = v47;
          v18 = v48;
          *v23 = v33;
          v6 = (*(_DWORD *)(a3 + 4 * v49) + v6);
          if (++v22 == v47)
            break;
LABEL_36:
          ++v19;
          ++v20;
        }
        while (v19 != v18);
      }
    }
    ++v5;
    a4 = v45;
  }
  while (v5 != 7);
}

uint64_t sub_20F5A00B8(uint64_t a1, void **a2, uint64_t a3, unsigned int **a4)
{
  unsigned int **v8;
  unsigned int **v9;
  unsigned int **v10;
  unsigned int **v11;
  unsigned int **v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  size_t v16;
  unsigned int v17;
  unsigned int **v19;

  v8 = (unsigned int **)(a3 + 48);
  v9 = (unsigned int **)(a3 + 72);
  v10 = (unsigned int **)(a3 + 96);
  v11 = (unsigned int **)(a3 + 120);
  v12 = (unsigned int **)(a3 + 144);
  v13 = 9 * ((unint64_t)((char *)a4[4] - (char *)a4[3]) >> 3)
      + ((unint64_t)((char *)a4[7] - (char *)a4[6]) >> 3)
      + 6
      * (((unint64_t)((char *)a4[10] - (char *)a4[9]) >> 3)
       + ((unint64_t)((char *)a4[1] - (char *)*a4) >> 3))
      + (((unint64_t)((char *)a4[13] - (char *)a4[12]) >> 1) & 0xFFFFFFFC)
      + (((unint64_t)((char *)a4[16] - (char *)a4[15]) >> 1) & 0xFFFFFFFC)
      + 3 * ((unint64_t)((char *)a4[19] - (char *)a4[18]) >> 3);
  v14 = 9 * ((*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 3)
      + ((*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 3)
      + 6 * (((*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 3) + ((*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3))
      + (((*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 1) & 0xFFFFFFFC)
      + (((*(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120)) >> 1) & 0xFFFFFFFC)
      + 3 * ((*(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144)) >> 3);
  *((_DWORD *)a2 + 4) = v14;
  *((_DWORD *)a2 + 5) = v13;
  v15 = v13 * (unint64_t)v14;
  v19 = (unsigned int **)(a3 + 24);
  if ((unint64_t)a2[1] < v15)
  {
    if (*a2)
      MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
    v16 = (8 * v15 + 31) & 0xFFFFFFFFFFFFFFE0;
    *a2 = 0;
    a2[1] = (void *)(v16 >> 3);
    *a2 = operator new(v16, (std::align_val_t)0x20uLL);
    v14 = *((_DWORD *)a2 + 4);
    v13 = *((_DWORD *)a2 + 5);
  }
  v17 = v13 * v14;
  if (v17)
    bzero(*a2, 8 * v17);
  sub_20F5A0A4C(a1 + 864, (uint64_t *)a2, v12, *a4, a4[1], 0);
  sub_20F5A0DC0(a1 + 1872, (uint64_t *)a2, v12, a4[3], a4[4], 0);
  sub_20F5A1228(a1 + 2880, (uint64_t *)a2, v12, a4[6], a4[7], 0);
  sub_20F5A0A4C(a1 + 3888, (uint64_t *)a2, v12, a4[9], a4[10], 0);
  sub_20F5A13E8(a1 + 4896, (uint64_t *)a2, v12, a4[12], a4[13], 0);
  sub_20F5A13E8(a1 + 5904, (uint64_t *)a2, v12, a4[15], a4[16], 0);
  sub_20F5A16B0(a1 + 6912, (uint64_t *)a2, v12, a4[18], a4[19], 0);
  sub_20F5A191C(a1 + 720, (uint64_t)a2, v11, *a4, a4[1], 0);
  sub_20F5A1C44(a1 + 1728, (uint64_t)a2, v11, a4[3], a4[4], 0);
  sub_20F5A2098(a1 + 2736, (uint64_t *)a2, v11, a4[6], a4[7], 0);
  sub_20F5A191C(a1 + 3744, (uint64_t)a2, v11, a4[9], a4[10], 0);
  sub_20F5A2254(a1 + 4752, (uint64_t)a2, v11, a4[12], a4[13], 0);
  sub_20F5A2254(a1 + 5760, (uint64_t)a2, v11, a4[15], a4[16], 0);
  sub_20F5A2498(a1 + 6768, (uint64_t)a2, v11, a4[18], a4[19], 0);
  sub_20F5A191C(a1 + 576, (uint64_t)a2, v10, *a4, a4[1], 0);
  sub_20F5A1C44(a1 + 1584, (uint64_t)a2, v10, a4[3], a4[4], 0);
  sub_20F5A2098(a1 + 2592, (uint64_t *)a2, v10, a4[6], a4[7], 0);
  sub_20F5A191C(a1 + 3600, (uint64_t)a2, v10, a4[9], a4[10], 0);
  sub_20F5A2254(a1 + 4608, (uint64_t)a2, v10, a4[12], a4[13], 0);
  sub_20F5A2254(a1 + 5616, (uint64_t)a2, v10, a4[15], a4[16], 0);
  sub_20F5A2498(a1 + 6624, (uint64_t)a2, v10, a4[18], a4[19], 0);
  sub_20F5A26F8(a1 + 432, (uint64_t)a2, v9, *a4, a4[1], 0);
  sub_20F5A2B9C(a1 + 1440, (uint64_t)a2, v9, a4[3], a4[4], 0);
  sub_20F5A3214(a1 + 2448, (uint64_t *)a2, v9, a4[6], a4[7], 0);
  sub_20F5A26F8(a1 + 3456, (uint64_t)a2, v9, a4[9], a4[10], 0);
  sub_20F5A3404(a1 + 4464, (uint64_t)a2, v9, a4[12], a4[13], 0);
  sub_20F5A3404(a1 + 5472, (uint64_t)a2, v9, a4[15], a4[16], 0);
  sub_20F5A3718(a1 + 6480, (uint64_t)a2, v9, a4[18], a4[19], 0);
  sub_20F5A39FC(a1 + 288, (uint64_t *)a2, v8, *a4, a4[1], 0);
  sub_20F5A3C44(a1 + 1296, (uint64_t *)a2, v8, a4[3], a4[4], 0);
  sub_20F5A3EF4(a1 + 2304, (uint64_t)a2, v8, a4[6], a4[7], 0);
  sub_20F5A39FC(a1 + 3312, (uint64_t *)a2, v8, a4[9], a4[10], 0);
  sub_20F5A406C(a1 + 4320, (uint64_t *)a2, v8, a4[12], a4[13], 0);
  sub_20F5A406C(a1 + 5328, (uint64_t *)a2, v8, a4[15], a4[16], 0);
  sub_20F5A4278(a1 + 6336, (uint64_t *)a2, v8, a4[18], a4[19], 0);
  sub_20F5A445C(a1 + 144, (uint64_t *)a2, v19, *a4, a4[1], 0);
  sub_20F5A4B40(a1 + 1152, (uint64_t *)a2, v19, a4[3], a4[4], 0);
  sub_20F5A58C4(a1 + 2160, (uint64_t *)a2, v19, a4[6], a4[7], 0);
  sub_20F5A445C(a1 + 3168, (uint64_t *)a2, v19, a4[9], a4[10], 0);
  sub_20F5A5AEC(a1 + 4176, (uint64_t *)a2, v19, a4[12], a4[13], 0);
  sub_20F5A5AEC(a1 + 5184, (uint64_t *)a2, v19, a4[15], a4[16], 0);
  sub_20F5A5FB4(a1 + 6192, (uint64_t *)a2, v19, a4[18], a4[19], 0);
  sub_20F5A26F8(a1, (uint64_t)a2, (unsigned int **)a3, *a4, a4[1], 0);
  sub_20F5A2B9C(a1 + 1008, (uint64_t)a2, (unsigned int **)a3, a4[3], a4[4], 0);
  sub_20F5A3214(a1 + 2016, (uint64_t *)a2, (unsigned int **)a3, a4[6], a4[7], 0);
  sub_20F5A26F8(a1 + 3024, (uint64_t)a2, (unsigned int **)a3, a4[9], a4[10], 0);
  sub_20F5A3404(a1 + 4032, (uint64_t)a2, (unsigned int **)a3, a4[12], a4[13], 0);
  sub_20F5A3404(a1 + 5040, (uint64_t)a2, (unsigned int **)a3, a4[15], a4[16], 0);
  return sub_20F5A3718(a1 + 6048, (uint64_t)a2, (unsigned int **)a3, a4[18], a4[19], 0);
}

__n128 sub_20F5A0788(uint64_t a1, uint64_t a2, int **a3)
{
  int *v6;
  int *v7;
  unint64_t v8;
  size_t v9;
  __n128 result;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  int *v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int *v27;
  int *v28;
  int v29;
  int v30;
  uint64_t v31;
  int *v32;
  int *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  int *v40;
  int *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  __int128 v47;
  int *v48;
  int *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  __int128 v55;
  int *v56;
  int *v57;
  int v58;
  int v59;
  uint64_t v60;
  __n128 *v61;
  __n128 *v62;

  v7 = *a3;
  v6 = a3[1];
  v8 = 9 * ((unint64_t)((char *)a3[4] - (char *)a3[3]) >> 3)
     + ((unint64_t)((char *)a3[7] - (char *)a3[6]) >> 3)
     + 6
     * (((unint64_t)((char *)a3[10] - (char *)a3[9]) >> 3)
      + ((unint64_t)((char *)v6 - (char *)*a3) >> 3))
     + (((unint64_t)((char *)a3[13] - (char *)a3[12]) >> 1) & 0xFFFFFFFC)
     + (((unint64_t)((char *)a3[16] - (char *)a3[15]) >> 1) & 0xFFFFFFFC)
     + 3 * ((unint64_t)((char *)a3[19] - (char *)a3[18]) >> 3);
  if (*(_DWORD *)(a2 + 16) != (_DWORD)v8)
  {
    *(_DWORD *)(a2 + 16) = v8;
    if (*(_QWORD *)(a2 + 8) < v8)
    {
      if (*(_QWORD *)a2)
      {
        MEMORY[0x212BC6368](*(_QWORD *)a2, 0x1000C8000313F17);
        v7 = *a3;
        v6 = a3[1];
      }
      v9 = (8 * v8 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = v9 >> 3;
      *(_QWORD *)a2 = operator new(v9, (std::align_val_t)0x20uLL);
    }
  }
  if (v7 != v6)
  {
    v11 = *(_DWORD *)(a1 + 52);
    do
    {
      v12 = *v7;
      v13 = v7[1];
      v7 += 2;
      v14 = *(_QWORD *)a1 + 8 * (v11 + 6 * v12);
      v15 = *(_QWORD *)a2 + 8 * v13;
      result = *(__n128 *)(v14 + 32);
      v16 = *(_OWORD *)v14;
      *(_OWORD *)(v15 + 16) = *(_OWORD *)(v14 + 16);
      *(__n128 *)(v15 + 32) = result;
      *(_OWORD *)v15 = v16;
    }
    while (v7 != v6);
  }
  v17 = a3[3];
  v18 = a3[4];
  if (v17 != v18)
  {
    v19 = *(_DWORD *)(a1 + 56);
    do
    {
      v20 = *v17;
      v21 = v17[1];
      v17 += 2;
      v22 = *(_QWORD *)a1 + 8 * (9 * v20 + v19);
      v23 = *(_QWORD *)a2 + 8 * v21;
      result.n128_u64[0] = *(_QWORD *)(v22 + 64);
      v24 = *(_OWORD *)(v22 + 48);
      v25 = *(_OWORD *)v22;
      v26 = *(_OWORD *)(v22 + 16);
      *(_OWORD *)(v23 + 32) = *(_OWORD *)(v22 + 32);
      *(_OWORD *)(v23 + 48) = v24;
      *(_QWORD *)(v23 + 64) = result.n128_u64[0];
      *(_OWORD *)v23 = v25;
      *(_OWORD *)(v23 + 16) = v26;
    }
    while (v17 != v18);
  }
  v27 = a3[6];
  v28 = a3[7];
  if (v27 != v28)
  {
    v29 = *(_DWORD *)(a1 + 60);
    do
    {
      v30 = *v27;
      v31 = v27[1];
      v27 += 2;
      result.n128_u64[0] = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v30 + v29));
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v31) = result.n128_u64[0];
    }
    while (v27 != v28);
  }
  v32 = a3[9];
  v33 = a3[10];
  if (v32 != v33)
  {
    v34 = *(_DWORD *)(a1 + 64);
    do
    {
      v35 = *v32;
      v36 = v32[1];
      v32 += 2;
      v37 = *(_QWORD *)a1 + 8 * (v34 + 6 * v35);
      v38 = *(_QWORD *)a2 + 8 * v36;
      result = *(__n128 *)(v37 + 32);
      v39 = *(_OWORD *)v37;
      *(_OWORD *)(v38 + 16) = *(_OWORD *)(v37 + 16);
      *(__n128 *)(v38 + 32) = result;
      *(_OWORD *)v38 = v39;
    }
    while (v32 != v33);
  }
  v40 = a3[12];
  v41 = a3[13];
  if (v40 != v41)
  {
    v42 = *(_DWORD *)(a1 + 68);
    do
    {
      v43 = *v40;
      v44 = v40[1];
      v40 += 2;
      v45 = *(_QWORD *)a1 + 8 * (v42 + 4 * v43);
      v46 = (_OWORD *)(*(_QWORD *)a2 + 8 * v44);
      result = *(__n128 *)v45;
      v47 = *(_OWORD *)(v45 + 16);
      *v46 = *(_OWORD *)v45;
      v46[1] = v47;
    }
    while (v40 != v41);
  }
  v48 = a3[15];
  v49 = a3[16];
  if (v48 != v49)
  {
    v50 = *(_DWORD *)(a1 + 72);
    do
    {
      v51 = *v48;
      v52 = v48[1];
      v48 += 2;
      v53 = *(_QWORD *)a1 + 8 * (v50 + 4 * v51);
      v54 = (_OWORD *)(*(_QWORD *)a2 + 8 * v52);
      result = *(__n128 *)v53;
      v55 = *(_OWORD *)(v53 + 16);
      *v54 = *(_OWORD *)v53;
      v54[1] = v55;
    }
    while (v48 != v49);
  }
  v56 = a3[18];
  v57 = a3[19];
  if (v56 != v57)
  {
    v58 = *(_DWORD *)(a1 + 76);
    do
    {
      v59 = *v56;
      v60 = v56[1];
      v56 += 2;
      v61 = (__n128 *)(*(_QWORD *)a1 + 8 * (3 * v59 + v58));
      v62 = (__n128 *)(*(_QWORD *)a2 + 8 * v60);
      result = *v61;
      v62[1].n128_u64[0] = v61[1].n128_u64[0];
      *v62 = result;
    }
    while (v56 != v57);
  }
  return result;
}

uint64_t sub_20F5A0A4C(uint64_t result, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t *v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t *v30;
  int64x2_t *v31;
  int64x2_t v32;
  int64x2_t *v33;
  __int128 v34;
  uint64_t v35;
  int64x2_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  int64x2_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int8 *v44;
  int64x2_t *v45;
  __int8 *v46;
  int64x2_t *v47;
  __int8 *v48;
  unsigned int *v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  int8x16_t v58;
  __int128 v59;
  int8x16_t v60;
  __int128 v61;
  int8x16_t v62;
  __int128 v63;
  unint64_t v64;
  int8x16_t v65;
  int8x16_t v66;
  unint64_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int8x16_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int8x16_t *v79;
  uint64_t v80;
  int8x16_t *v81;
  uint64_t v82;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v8 = *a4;
          v9 = *(_QWORD *)(result + 88);
          v10 = (*(_DWORD *)(result + 112) * v8);
          v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v8) + v10);
          v12 = v9 + 16 * v10;
          do
          {
            if (v12 == v11)
              break;
            v13 = *v6;
            while (*(_DWORD *)v12 != v13)
            {
              if (*(_DWORD *)v12 > v13)
                goto LABEL_16;
              v12 += 16;
              if (v12 == v11)
                goto LABEL_5;
            }
            v14 = a4[1];
            v15 = v6[1];
            v16 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v12 + 8);
            v17 = *((unsigned int *)a2 + 4);
            v18 = *a2;
            if (v14 < v15)
            {
              v19 = (int64x2_t *)(v18 + 8 * (v14 + (_DWORD)v17 * v15));
              v20.i64[0] = *(_QWORD *)(v16 + 16);
              v21 = *(int64x2_t *)(v16 + 24);
              v22.i64[0] = *(_QWORD *)(v16 + 64);
              v23 = *(int64x2_t *)(v16 + 48);
              v24 = *(int64x2_t *)(v16 + 72);
              v25.i64[0] = *(_QWORD *)(v16 + 112);
              v26 = *(int64x2_t *)(v16 + 96);
              v27 = *(int64x2_t *)(v16 + 120);
              v28 = vzip1q_s64(*(int64x2_t *)v16, v21);
              v29 = vzip2q_s64(*(int64x2_t *)v16, v21);
              v20.i64[1] = *(_QWORD *)(v16 + 40);
              v22.i64[1] = *(_QWORD *)(v16 + 88);
              v25.i64[1] = *(_QWORD *)(v16 + 136);
              v19[1] = vzip1q_s64(v23, v24);
              v19[2] = vzip1q_s64(v26, v27);
              *v19 = v28;
              v30 = (int64x2_t *)((char *)v19 + 8 * v17);
              v30[1] = vzip1q_s64(vdupq_laneq_s64(v23, 1), vdupq_laneq_s64(v24, 1));
              v30[2] = vzip2q_s64(v26, v27);
              *v30 = v29;
              v31 = &v19[v17];
              v31[1] = v22;
              v31[2] = v25;
              *v31 = v20;
LABEL_16:
              if (v12 == v11)
                break;
              goto LABEL_19;
            }
            v32 = *(int64x2_t *)v16;
            v33 = (int64x2_t *)(v18 + 8 * (v15 + (_DWORD)v17 * v14));
            v34 = *(_OWORD *)(v16 + 24);
            v35 = *(_QWORD *)(v16 + 40);
            v36 = *(int64x2_t *)(v16 + 48);
            v37 = *(_QWORD *)(v16 + 64);
            v38 = *(_OWORD *)(v16 + 72);
            v39 = *(_QWORD *)(v16 + 88);
            v40 = *(int64x2_t *)(v16 + 96);
            v41 = *(_QWORD *)(v16 + 112);
            v42 = *(_OWORD *)(v16 + 120);
            v43 = *(_QWORD *)(v16 + 136);
            v33[1].i64[0] = *(_QWORD *)(v16 + 16);
            *v33 = v32;
            v44 = &v33->i8[8 * v17];
            *((_QWORD *)v44 + 2) = v35;
            *(_OWORD *)v44 = v34;
            v45 = &v33[v17];
            v45[1].i64[0] = v37;
            *v45 = v36;
            v46 = &v33->i8[24 * v17];
            *((_QWORD *)v46 + 2) = v39;
            *(_OWORD *)v46 = v38;
            v47 = &v33[2 * v17];
            v47[1].i64[0] = v41;
            *v47 = v40;
            v48 = &v33->i8[40 * v17];
            *((_QWORD *)v48 + 2) = v43;
            *(_OWORD *)v48 = v42;
            if (v12 == v11)
              break;
LABEL_19:
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v49 = *a3;
        v50 = a3[1];
        if (*a3 != v50)
        {
          v51 = *a4;
          v52 = *(_QWORD *)(result + 88);
          v53 = (*(_DWORD *)(result + 112) * v51);
          v54 = v52 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v51) + v53);
          v55 = v52 + 16 * v53;
          do
          {
            if (v55 == v54)
              break;
            v56 = *v49;
            while (*(_DWORD *)v55 < v56)
            {
              v55 += 16;
              if (v55 == v54)
                goto LABEL_23;
            }
            if (*(_DWORD *)v55 == v56)
            {
              v57 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v55 + 8);
              if (v57 == *a2)
              {
                v75 = *(int8x16_t *)(v57 + 112);
                v70 = *(int8x16_t *)(v57 + 128);
                v69 = *(int8x16_t *)(v57 + 80);
                v62 = *(int8x16_t *)(v57 + 96);
                v60 = *(int8x16_t *)(v57 + 48);
                v68 = *(int8x16_t *)(v57 + 64);
                v65 = *(int8x16_t *)(v57 + 16);
                v66 = *(int8x16_t *)(v57 + 32);
                v72 = vextq_s8(v70, v70, 8uLL).u64[0];
                *(_QWORD *)&v63 = vextq_s8(v75, v75, 8uLL).u64[0];
                v71 = vextq_s8(v62, v62, 8uLL).u64[0];
                v58 = *(int8x16_t *)v57;
                v67 = vextq_s8(v69, v69, 8uLL).u64[0];
                *(_QWORD *)&v61 = vextq_s8(v68, v68, 8uLL).u64[0];
                v73 = vextq_s8(v60, v60, 8uLL).u64[0];
                v64 = vextq_s8(v66, v66, 8uLL).u64[0];
                *(_QWORD *)&v59 = vextq_s8(v65, v65, 8uLL).u64[0];
                v74 = vextq_s8(v58, v58, 8uLL).u64[0];
              }
              else
              {
                v58 = *(int8x16_t *)v57;
                v59 = *(_OWORD *)(v57 + 24);
                v60 = *(int8x16_t *)(v57 + 48);
                v61 = *(_OWORD *)(v57 + 72);
                v62 = *(int8x16_t *)(v57 + 96);
                v63 = *(_OWORD *)(v57 + 120);
                v64 = *(_QWORD *)(v57 + 40);
                v65.i64[0] = *(_QWORD *)(v57 + 16);
                v66.i64[0] = *(_QWORD *)(v57 + 32);
                v67 = *(_QWORD *)(v57 + 88);
                v68.i64[0] = *(_QWORD *)(v57 + 64);
                v69.i64[0] = *(_QWORD *)(v57 + 80);
                v70.i64[0] = *(_QWORD *)(v57 + 128);
                v71 = vextq_s8(v62, v62, 8uLL).u64[0];
                v72 = *(_QWORD *)(v57 + 136);
                v73 = vextq_s8(v60, v60, 8uLL).u64[0];
                v74 = vextq_s8(v58, v58, 8uLL).u64[0];
                v75.i64[0] = *(_QWORD *)(v57 + 112);
              }
              v76 = *((unsigned int *)a2 + 4);
              v62.i64[1] = v71;
              v58.i64[1] = v74;
              *((_QWORD *)&v59 + 1) = v66.i64[0];
              v60.i64[1] = v73;
              *((_QWORD *)&v61 + 1) = v69.i64[0];
              *((_QWORD *)&v63 + 1) = v70.i64[0];
              v77 = *a2 + 8 * (v49[1] + (_DWORD)v76 * a4[1]);
              *(_QWORD *)(v77 + 16) = v65.i64[0];
              *(int8x16_t *)v77 = v58;
              v78 = v77 + 8 * v76;
              *(_QWORD *)(v78 + 16) = v64;
              *(_OWORD *)v78 = v59;
              v79 = (int8x16_t *)(v77 + 16 * v76);
              v79[1].i64[0] = v68.i64[0];
              *v79 = v60;
              v80 = v77 + 24 * v76;
              *(_QWORD *)(v80 + 16) = v67;
              *(_OWORD *)v80 = v61;
              v81 = (int8x16_t *)(v77 + 32 * v76);
              v81[1].i64[0] = v75.i64[0];
              *v81 = v62;
              v82 = v77 + 40 * v76;
              *(_QWORD *)(v82 + 16) = v72;
              *(_OWORD *)v82 = v63;
            }
            if (v55 == v54)
              break;
            v49 += 2;
          }
          while (v49 != v50);
        }
LABEL_23:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_20F5A0DC0(uint64_t result, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  int64x2_t *v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  uint64_t v31;
  __int128 v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t *v35;
  int64x2_t *v36;
  int64x2_t v37;
  int64x2_t *v38;
  __int128 v39;
  uint64_t v40;
  int64x2_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  int64x2_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  int64x2_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  int64x2_t v53;
  uint64_t v54;
  __int8 *v55;
  int64x2_t *v56;
  __int8 *v57;
  int64x2_t *v58;
  __int8 *v59;
  int64x2_t *v60;
  __int8 *v61;
  int64x2_t *v62;
  unsigned int *v63;
  unsigned int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  int8x16_t v72;
  __int128 v73;
  int8x16_t v74;
  __int128 v75;
  int8x16_t v76;
  __int128 v77;
  int8x16_t v78;
  __int128 v79;
  int8x16_t v80;
  unint64_t v81;
  int8x16_t v82;
  int8x16_t v83;
  unint64_t v84;
  int8x16_t v85;
  int8x16_t v86;
  unint64_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  int8x16_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int8x16_t *v101;
  uint64_t v102;
  int8x16_t *v103;
  uint64_t v104;
  int8x16_t *v105;
  uint64_t v106;
  int8x16_t *v107;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v8 = *a4;
          v9 = *(_QWORD *)(result + 88);
          v10 = (*(_DWORD *)(result + 112) * v8);
          v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v8) + v10);
          v12 = v9 + 16 * v10;
          do
          {
            if (v12 == v11)
              break;
            v13 = *v6;
            while (*(_DWORD *)v12 != v13)
            {
              if (*(_DWORD *)v12 > v13)
                goto LABEL_16;
              v12 += 16;
              if (v12 == v11)
                goto LABEL_5;
            }
            v14 = a4[1];
            v15 = v6[1];
            v16 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v12 + 8);
            v17 = *((unsigned int *)a2 + 4);
            v18 = *a2;
            if (v14 < v15)
            {
              v19.i64[0] = *(_QWORD *)(v16 + 16);
              v20 = (int64x2_t *)(v18 + 8 * (v14 + (_DWORD)v17 * v15));
              v21 = *(int64x2_t *)(v16 + 24);
              v22.i64[0] = *(_QWORD *)(v16 + 64);
              v23 = *(int64x2_t *)(v16 + 48);
              v24 = *(int64x2_t *)(v16 + 72);
              v25.i64[0] = *(_QWORD *)(v16 + 112);
              v26 = *(int64x2_t *)(v16 + 96);
              v27 = *(int64x2_t *)(v16 + 120);
              v28.i64[0] = *(_QWORD *)(v16 + 160);
              v29 = *(int64x2_t *)(v16 + 144);
              v30 = *(int64x2_t *)(v16 + 168);
              v31 = *(_QWORD *)(v16 + 208);
              v32 = *(_OWORD *)(v16 + 192);
              v33 = vzip1q_s64(*(int64x2_t *)v16, v21);
              v34 = vzip2q_s64(*(int64x2_t *)v16, v21);
              v19.i64[1] = *(_QWORD *)(v16 + 40);
              v22.i64[1] = *(_QWORD *)(v16 + 88);
              v25.i64[1] = *(_QWORD *)(v16 + 136);
              v28.i64[1] = *(_QWORD *)(v16 + 184);
              v20[2] = vzip1q_s64(v26, v27);
              v20[3] = vzip1q_s64(v29, v30);
              v20[4].i64[0] = v32;
              *v20 = v33;
              v20[1] = vzip1q_s64(v23, v24);
              v35 = (int64x2_t *)((char *)v20 + 8 * v17);
              v35[2] = vzip2q_s64(v26, v27);
              v35[3] = vzip2q_s64(v29, v30);
              *v35 = v34;
              v35[1] = vzip2q_s64(v23, v24);
              v35[4].i64[0] = *((_QWORD *)&v32 + 1);
              v36 = &v20[v17];
              v36[4].i64[0] = v31;
              v36[2] = v25;
              v36[3] = v28;
              *v36 = v19;
              v36[1] = v22;
LABEL_16:
              if (v12 == v11)
                break;
              goto LABEL_19;
            }
            v37 = *(int64x2_t *)v16;
            v38 = (int64x2_t *)(v18 + 8 * (v15 + (_DWORD)v17 * v14));
            v39 = *(_OWORD *)(v16 + 24);
            v40 = *(_QWORD *)(v16 + 40);
            v41 = *(int64x2_t *)(v16 + 48);
            v42 = *(_QWORD *)(v16 + 64);
            v43 = *(_OWORD *)(v16 + 72);
            v44 = *(_QWORD *)(v16 + 88);
            v45 = *(int64x2_t *)(v16 + 96);
            v46 = *(_QWORD *)(v16 + 112);
            v47 = *(_OWORD *)(v16 + 120);
            v48 = *(_QWORD *)(v16 + 136);
            v49 = *(int64x2_t *)(v16 + 144);
            v50 = *(_QWORD *)(v16 + 160);
            v51 = *(_OWORD *)(v16 + 168);
            v52 = *(_QWORD *)(v16 + 184);
            v53 = *(int64x2_t *)(v16 + 192);
            v54 = *(_QWORD *)(v16 + 208);
            v38[1].i64[0] = *(_QWORD *)(v16 + 16);
            *v38 = v37;
            v55 = &v38->i8[8 * v17];
            *((_QWORD *)v55 + 2) = v40;
            *(_OWORD *)v55 = v39;
            v56 = &v38[v17];
            v56[1].i64[0] = v42;
            *v56 = v41;
            v57 = &v38->i8[24 * v17];
            *((_QWORD *)v57 + 2) = v44;
            *(_OWORD *)v57 = v43;
            v58 = &v38[2 * v17];
            v58[1].i64[0] = v46;
            *v58 = v45;
            v59 = &v38->i8[40 * v17];
            *((_QWORD *)v59 + 2) = v48;
            *(_OWORD *)v59 = v47;
            v60 = &v38[3 * v17];
            v60[1].i64[0] = v50;
            *v60 = v49;
            v61 = &v38->i8[56 * v17];
            *((_QWORD *)v61 + 2) = v52;
            *(_OWORD *)v61 = v51;
            v62 = &v38[4 * v17];
            v62[1].i64[0] = v54;
            *v62 = v53;
            if (v12 == v11)
              break;
LABEL_19:
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v63 = *a3;
        v64 = a3[1];
        if (*a3 != v64)
        {
          v65 = *a4;
          v66 = *(_QWORD *)(result + 88);
          v67 = (*(_DWORD *)(result + 112) * v65);
          v68 = v66 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v65) + v67);
          v69 = v66 + 16 * v67;
          do
          {
            if (v69 == v68)
              break;
            v70 = *v63;
            while (*(_DWORD *)v69 < v70)
            {
              v69 += 16;
              if (v69 == v68)
                goto LABEL_23;
            }
            if (*(_DWORD *)v69 == v70)
            {
              v71 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v69 + 8);
              if (v71 == *a2)
              {
                v89 = *(int8x16_t *)(v71 + 176);
                v80 = *(int8x16_t *)(v71 + 192);
                v78 = *(int8x16_t *)(v71 + 144);
                v95 = *(int8x16_t *)(v71 + 160);
                v90 = *(int8x16_t *)(v71 + 112);
                v88 = *(int8x16_t *)(v71 + 128);
                v86 = *(int8x16_t *)(v71 + 80);
                v76 = *(int8x16_t *)(v71 + 96);
                v74 = *(int8x16_t *)(v71 + 48);
                v85 = *(int8x16_t *)(v71 + 64);
                v91 = vextq_s8(v80, v80, 8uLL).u64[0];
                v92 = vextq_s8(v89, v89, 8uLL).u64[0];
                *(_QWORD *)&v79 = vextq_s8(v95, v95, 8uLL).u64[0];
                v93 = vextq_s8(v78, v78, 8uLL).u64[0];
                v87 = vextq_s8(v88, v88, 8uLL).u64[0];
                *(_QWORD *)&v77 = vextq_s8(v90, v90, 8uLL).u64[0];
                v94 = vextq_s8(v76, v76, 8uLL).u64[0];
                v84 = vextq_s8(v86, v86, 8uLL).u64[0];
                v82 = *(int8x16_t *)(v71 + 16);
                v83 = *(int8x16_t *)(v71 + 32);
                *(_QWORD *)&v75 = vextq_s8(v85, v85, 8uLL).u64[0];
                v96 = vextq_s8(v74, v74, 8uLL).u64[0];
                v81 = vextq_s8(v83, v83, 8uLL).u64[0];
                v72 = *(int8x16_t *)v71;
                *(_QWORD *)&v73 = vextq_s8(v82, v82, 8uLL).u64[0];
              }
              else
              {
                v72 = *(int8x16_t *)v71;
                v73 = *(_OWORD *)(v71 + 24);
                v74 = *(int8x16_t *)(v71 + 48);
                v75 = *(_OWORD *)(v71 + 72);
                v76 = *(int8x16_t *)(v71 + 96);
                v77 = *(_OWORD *)(v71 + 120);
                v78 = *(int8x16_t *)(v71 + 144);
                v79 = *(_OWORD *)(v71 + 168);
                v80 = *(int8x16_t *)(v71 + 192);
                v81 = *(_QWORD *)(v71 + 40);
                v82.i64[0] = *(_QWORD *)(v71 + 16);
                v83.i64[0] = *(_QWORD *)(v71 + 32);
                v84 = *(_QWORD *)(v71 + 88);
                v85.i64[0] = *(_QWORD *)(v71 + 64);
                v86.i64[0] = *(_QWORD *)(v71 + 80);
                v87 = *(_QWORD *)(v71 + 136);
                v88.i64[0] = *(_QWORD *)(v71 + 128);
                v89.i64[0] = *(_QWORD *)(v71 + 176);
                v90.i64[0] = *(_QWORD *)(v71 + 112);
                v91 = vextq_s8(v80, v80, 8uLL).u64[0];
                v92 = *(_QWORD *)(v71 + 184);
                v93 = vextq_s8(v78, v78, 8uLL).u64[0];
                v94 = vextq_s8(v76, v76, 8uLL).u64[0];
                v95.i64[0] = *(_QWORD *)(v71 + 160);
                v96 = vextq_s8(v74, v74, 8uLL).u64[0];
              }
              v97 = *(_QWORD *)(v71 + 208);
              v98 = *((unsigned int *)a2 + 4);
              v99 = *a2 + 8 * (v63[1] + (_DWORD)v98 * a4[1]);
              v80.i64[1] = v91;
              v76.i64[1] = v94;
              v72.i64[1] = vextq_s8(v72, v72, 8uLL).u64[0];
              *((_QWORD *)&v73 + 1) = v83.i64[0];
              v74.i64[1] = v96;
              *((_QWORD *)&v75 + 1) = v86.i64[0];
              *((_QWORD *)&v77 + 1) = v88.i64[0];
              v78.i64[1] = v93;
              *((_QWORD *)&v79 + 1) = v89.i64[0];
              *(_QWORD *)(v99 + 16) = v82.i64[0];
              *(int8x16_t *)v99 = v72;
              v100 = v99 + 8 * v98;
              *(_QWORD *)(v100 + 16) = v81;
              *(_OWORD *)v100 = v73;
              v101 = (int8x16_t *)(v99 + 16 * v98);
              v101[1].i64[0] = v85.i64[0];
              *v101 = v74;
              v102 = v99 + 24 * v98;
              *(_QWORD *)(v102 + 16) = v84;
              *(_OWORD *)v102 = v75;
              v103 = (int8x16_t *)(v99 + 32 * v98);
              v103[1].i64[0] = v90.i64[0];
              *v103 = v76;
              v104 = v99 + 40 * v98;
              *(_QWORD *)(v104 + 16) = v87;
              *(_OWORD *)v104 = v77;
              v105 = (int8x16_t *)(v99 + 48 * v98);
              v105[1].i64[0] = v95.i64[0];
              *v105 = v78;
              v106 = v99 + 56 * v98;
              *(_QWORD *)(v106 + 16) = v92;
              *(_OWORD *)v106 = v79;
              v107 = (int8x16_t *)(v99 + (v98 << 6));
              v107[1].i64[0] = v97;
              *v107 = v80;
            }
            if (v69 == v68)
              break;
            v63 += 2;
          }
          while (v63 != v64);
        }
LABEL_23:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_20F5A1228(uint64_t result, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int8x16_t *v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v8 = *a4;
          v9 = *(_QWORD *)(result + 88);
          v10 = (*(_DWORD *)(result + 112) * v8);
          v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v8) + v10);
          v12 = v9 + 16 * v10;
          do
          {
            if (v12 == v11)
              break;
            v13 = *v6;
            while (*(_DWORD *)v12 != v13)
            {
              if (*(_DWORD *)v12 > v13)
                goto LABEL_16;
              v12 += 16;
              if (v12 == v11)
                goto LABEL_5;
            }
            v14 = a4[1];
            v15 = v6[1];
            v16 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v12 + 8);
            v17 = *((unsigned int *)a2 + 4);
            v18 = *a2;
            v19 = *(int8x16_t *)v16;
            v20 = *(_QWORD *)(v16 + 16);
            v21 = vextq_s8(v19, v19, 8uLL).u64[0];
            if (v14 < v15)
            {
              v22 = (_QWORD *)(v18 + 8 * (v14 + (_DWORD)v17 * v15));
              *v22 = v19.i64[0];
              v22[v17] = v21;
              v22[2 * v17] = v20;
LABEL_16:
              if (v12 == v11)
                break;
              goto LABEL_19;
            }
            v23 = (int8x16_t *)(v18 + 8 * (v15 + (_DWORD)v17 * v14));
            v23[1].i64[0] = v20;
            v19.i64[1] = v21;
            *v23 = v19;
            if (v12 == v11)
              break;
LABEL_19:
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v24 = *a3;
        v25 = a3[1];
        if (*a3 != v25)
        {
          v26 = *a4;
          v27 = *(_QWORD *)(result + 88);
          v28 = (*(_DWORD *)(result + 112) * v26);
          v29 = v27 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v26) + v28);
          v30 = v27 + 16 * v28;
          do
          {
            if (v30 == v29)
              break;
            v31 = *v24;
            while (*(_DWORD *)v30 < v31)
            {
              v30 += 16;
              if (v30 == v29)
                goto LABEL_23;
            }
            if (*(_DWORD *)v30 == v31)
            {
              v32 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v30 + 8);
              v33 = *a2 + 8 * (v24[1] + *((_DWORD *)a2 + 4) * a4[1]);
              v34 = *(_OWORD *)v32;
              *(_QWORD *)(v33 + 16) = *(_QWORD *)(v32 + 16);
              *(_OWORD *)v33 = v34;
            }
            if (v30 == v29)
              break;
            v24 += 2;
          }
          while (v24 != v25);
        }
LABEL_23:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_20F5A13E8(uint64_t result, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t *v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t *v27;
  int64x2_t *v28;
  int64x2_t v29;
  int64x2_t *v30;
  __int128 v31;
  uint64_t v32;
  int64x2_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int8 *v37;
  int64x2_t *v38;
  __int8 *v39;
  unsigned int *v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  int8x16_t v49;
  int8x16_t v50;
  unint64_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  unint64_t v55;
  int8x16_t v56;
  int8x16_t v57;
  unint64_t v58;
  int8x16_t v59;
  uint64_t v60;
  uint64_t v61;
  int8x16_t *v62;
  int8x16_t *v63;
  int8x16_t *v64;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v8 = *a4;
          v9 = *(_QWORD *)(result + 88);
          v10 = (*(_DWORD *)(result + 112) * v8);
          v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v8) + v10);
          v12 = v9 + 16 * v10;
          do
          {
            if (v12 == v11)
              break;
            v13 = *v6;
            while (*(_DWORD *)v12 != v13)
            {
              if (*(_DWORD *)v12 > v13)
                goto LABEL_16;
              v12 += 16;
              if (v12 == v11)
                goto LABEL_5;
            }
            v14 = a4[1];
            v15 = v6[1];
            v16 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v12 + 8);
            v17 = *((unsigned int *)a2 + 4);
            v18 = *a2;
            if (v14 < v15)
            {
              v19 = (int64x2_t *)(v18 + 8 * (v14 + (_DWORD)v17 * v15));
              v20.i64[0] = *(_QWORD *)(v16 + 16);
              v21 = *(int64x2_t *)(v16 + 24);
              v22.i64[0] = *(_QWORD *)(v16 + 64);
              v23 = *(int64x2_t *)(v16 + 48);
              v24 = vzip1q_s64(*(int64x2_t *)v16, v21);
              v25 = vzip1q_s64(v23, *(int64x2_t *)(v16 + 72));
              v26 = vzip2q_s64(*(int64x2_t *)v16, v21);
              v21.i64[0] = vdupq_laneq_s64(v23, 1).u64[0];
              v21.i64[1] = *(_QWORD *)(v16 + 80);
              v20.i64[1] = *(_QWORD *)(v16 + 40);
              v22.i64[1] = *(_QWORD *)(v16 + 88);
              *v19 = v24;
              v19[1] = v25;
              v27 = (int64x2_t *)((char *)v19 + 8 * v17);
              *v27 = v26;
              v27[1] = v21;
              v28 = &v19[v17];
              *v28 = v20;
              v28[1] = v22;
LABEL_16:
              if (v12 == v11)
                break;
              goto LABEL_19;
            }
            v29 = *(int64x2_t *)v16;
            v30 = (int64x2_t *)(v18 + 8 * (v15 + (_DWORD)v17 * v14));
            v31 = *(_OWORD *)(v16 + 24);
            v32 = *(_QWORD *)(v16 + 40);
            v33 = *(int64x2_t *)(v16 + 48);
            v34 = *(_QWORD *)(v16 + 64);
            v35 = *(_OWORD *)(v16 + 72);
            v36 = *(_QWORD *)(v16 + 88);
            v30[1].i64[0] = *(_QWORD *)(v16 + 16);
            *v30 = v29;
            v37 = &v30->i8[8 * v17];
            *((_QWORD *)v37 + 2) = v32;
            *(_OWORD *)v37 = v31;
            v38 = &v30[v17];
            v38[1].i64[0] = v34;
            *v38 = v33;
            v39 = &v30->i8[24 * v17];
            *((_QWORD *)v39 + 2) = v36;
            *(_OWORD *)v39 = v35;
            if (v12 == v11)
              break;
LABEL_19:
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v40 = *a3;
        v41 = a3[1];
        if (*a3 != v41)
        {
          v42 = *a4;
          v43 = *(_QWORD *)(result + 88);
          v44 = (*(_DWORD *)(result + 112) * v42);
          v45 = v43 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v42) + v44);
          v46 = v43 + 16 * v44;
          do
          {
            if (v46 == v45)
              break;
            v47 = *v40;
            while (*(_DWORD *)v46 < v47)
            {
              v46 += 16;
              if (v46 == v45)
                goto LABEL_23;
            }
            if (*(_DWORD *)v46 == v47)
            {
              v48 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v46 + 8);
              if (v48 == *a2)
              {
                v53 = *(int8x16_t *)(v48 + 64);
                v57 = *(int8x16_t *)(v48 + 80);
                v59 = *(int8x16_t *)(v48 + 32);
                v54 = *(int8x16_t *)(v48 + 48);
                v50 = *(int8x16_t *)v48;
                v49 = *(int8x16_t *)(v48 + 16);
                v55 = vextq_s8(v57, v57, 8uLL).u64[0];
                v56.i64[0] = vextq_s8(v53, v53, 8uLL).u64[0];
                v58 = vextq_s8(v54, v54, 8uLL).u64[0];
                v51 = vextq_s8(v59, v59, 8uLL).u64[0];
                v52.i64[0] = vextq_s8(v49, v49, 8uLL).u64[0];
              }
              else
              {
                v49.i64[0] = *(_QWORD *)(v48 + 16);
                v50 = *(int8x16_t *)v48;
                v51 = *(_QWORD *)(v48 + 40);
                v52 = *(int8x16_t *)(v48 + 24);
                v53.i64[0] = *(_QWORD *)(v48 + 64);
                v54 = *(int8x16_t *)(v48 + 48);
                v55 = *(_QWORD *)(v48 + 88);
                v56 = *(int8x16_t *)(v48 + 72);
                v57.i64[0] = vextq_s8(v56, v56, 8uLL).u64[0];
                v58 = vextq_s8(v54, v54, 8uLL).u64[0];
                v59.i64[0] = vextq_s8(v52, v52, 8uLL).u64[0];
              }
              v60 = *((unsigned int *)a2 + 4);
              v50.i64[1] = vextq_s8(v50, v50, 8uLL).u64[0];
              v52.i64[1] = v59.i64[0];
              v54.i64[1] = v58;
              v56.i64[1] = v57.i64[0];
              v61 = *a2 + 8 * (v40[1] + (_DWORD)v60 * a4[1]);
              *(_QWORD *)(v61 + 16) = v49.i64[0];
              *(int8x16_t *)v61 = v50;
              v62 = (int8x16_t *)(v61 + 8 * v60);
              v62[1].i64[0] = v51;
              *v62 = v52;
              v63 = (int8x16_t *)(v61 + 16 * v60);
              v63[1].i64[0] = v53.i64[0];
              *v63 = v54;
              v64 = (int8x16_t *)(v61 + 24 * v60);
              v64[1].i64[0] = v55;
              *v64 = v56;
            }
            if (v46 == v45)
              break;
            v40 += 2;
          }
          while (v40 != v41);
        }
LABEL_23:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_20F5A16B0(uint64_t result, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t *v20;
  int8x16_t v21;
  unint64_t v22;
  int64x2_t v23;
  uint64_t v24;
  __int128 v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t *v28;
  int64x2_t *v29;
  int64x2_t v30;
  __int128 v31;
  uint64_t v32;
  __int8 *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  int8x16_t v44;
  __int128 v45;
  int8x16_t v46;
  unint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int8x16_t *v55;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v8 = *a4;
          v9 = *(_QWORD *)(result + 88);
          v10 = (*(_DWORD *)(result + 112) * v8);
          v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v8) + v10);
          v12 = v9 + 16 * v10;
          do
          {
            if (v12 == v11)
              break;
            v13 = *v6;
            while (*(_DWORD *)v12 != v13)
            {
              if (*(_DWORD *)v12 > v13)
                goto LABEL_18;
              v12 += 16;
              if (v12 == v11)
                goto LABEL_5;
            }
            v14 = a4[1];
            v15 = v6[1];
            v16 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v12 + 8);
            v17 = *((unsigned int *)a2 + 4);
            v18 = *a2;
            if (v14 >= v15)
            {
              v19 = v15 + (_DWORD)v17 * v14;
              v29 = (int64x2_t *)(v18 + 8 * v19);
              v30 = *(int64x2_t *)v16;
              v31 = *(_OWORD *)(v16 + 24);
              v32 = *(_QWORD *)(v16 + 40);
              v24 = *(_QWORD *)(v16 + 64);
              v21 = *(int8x16_t *)(v16 + 48);
              v22 = vextq_s8(v21, v21, 8uLL).u64[0];
              v29[1].i64[0] = *(_QWORD *)(v16 + 16);
              *v29 = v30;
              v33 = &v29->i8[8 * v17];
              *((_QWORD *)v33 + 2) = v32;
              *(_OWORD *)v33 = v31;
            }
            else
            {
              v19 = v14 + (_DWORD)v17 * v15;
              v20 = (int64x2_t *)(v18 + 8 * v19);
              v21.i64[0] = *(_QWORD *)(v16 + 16);
              v22 = *(_QWORD *)(v16 + 40);
              v23 = *(int64x2_t *)(v16 + 24);
              v24 = *(_QWORD *)(v16 + 64);
              v25 = *(_OWORD *)(v16 + 48);
              v26 = vzip1q_s64(*(int64x2_t *)v16, v23);
              v27 = vzip2q_s64(*(int64x2_t *)v16, v23);
              v20[1].i64[0] = v25;
              *v20 = v26;
              v28 = (int64x2_t *)((char *)v20 + 8 * v17);
              *v28 = v27;
              v28[1].i64[0] = *((_QWORD *)&v25 + 1);
            }
            v34 = v18 + 8 * v19 + 16 * v17;
            *(_QWORD *)(v34 + 16) = v24;
            v21.i64[1] = v22;
            *(int8x16_t *)v34 = v21;
LABEL_18:
            if (v12 == v11)
              break;
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v35 = *a3;
        v36 = a3[1];
        if (*a3 != v36)
        {
          v37 = *a4;
          v38 = *(_QWORD *)(result + 88);
          v39 = (*(_DWORD *)(result + 112) * v37);
          v40 = v38 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v37) + v39);
          v41 = v38 + 16 * v39;
          do
          {
            if (v41 == v40)
              break;
            v42 = *v35;
            while (*(_DWORD *)v41 < v42)
            {
              v41 += 16;
              if (v41 == v40)
                goto LABEL_23;
            }
            if (*(_DWORD *)v41 == v42)
            {
              v43 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v41 + 8);
              if (v43 == *a2)
              {
                v50 = *(_QWORD *)(v43 + 64);
                v49 = *(int8x16_t *)(v43 + 32);
                v46 = *(int8x16_t *)(v43 + 48);
                v44 = *(int8x16_t *)v43;
                v48 = *(int8x16_t *)(v43 + 16);
                v51 = vextq_s8(v46, v46, 8uLL).u64[0];
                v47 = vextq_s8(v49, v49, 8uLL).u64[0];
                *(_QWORD *)&v45 = vextq_s8(v48, v48, 8uLL).u64[0];
              }
              else
              {
                v44 = *(int8x16_t *)v43;
                v45 = *(_OWORD *)(v43 + 24);
                v46 = *(int8x16_t *)(v43 + 48);
                v47 = *(_QWORD *)(v43 + 40);
                v48.i64[0] = *(_QWORD *)(v43 + 16);
                v49.i64[0] = *(_QWORD *)(v43 + 32);
                v50 = *(_QWORD *)(v43 + 64);
                v51 = vextq_s8(v46, v46, 8uLL).u64[0];
              }
              v52 = *((unsigned int *)a2 + 4);
              v53 = *a2 + 8 * (v35[1] + (_DWORD)v52 * a4[1]);
              v44.i64[1] = vextq_s8(v44, v44, 8uLL).u64[0];
              *((_QWORD *)&v45 + 1) = v49.i64[0];
              v46.i64[1] = v51;
              *(_QWORD *)(v53 + 16) = v48.i64[0];
              *(int8x16_t *)v53 = v44;
              v54 = v53 + 8 * v52;
              *(_QWORD *)(v54 + 16) = v47;
              *(_OWORD *)v54 = v45;
              v55 = (int8x16_t *)(v53 + 16 * v52);
              v55[1].i64[0] = v50;
              *v55 = v46;
            }
            if (v41 == v40)
              break;
            v35 += 2;
          }
          while (v35 != v36);
        }
LABEL_23:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_20F5A191C(uint64_t result, uint64_t a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t *v18;
  int64x2_t *v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t *v35;
  int64x2_t *v36;
  int64x2_t *v37;
  __int128 v38;
  __int8 *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int8 *v50;
  __int8 *v51;
  __int8 *v52;
  __int8 *v53;
  __int8 *v54;
  unsigned int *v55;
  unsigned int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  int8x16_t *v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  uint64_t v76;
  int8x16_t *v77;
  int8x16_t *v78;
  int8x16_t *v79;
  int8x16_t *v80;
  int8x16_t *v81;
  int8x16_t *v82;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v8 = *a4;
          v9 = *(_QWORD *)(result + 88);
          v10 = (*(_DWORD *)(result + 112) * v8);
          v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v8) + v10);
          v12 = v9 + 16 * v10;
          do
          {
            if (v12 == v11)
              break;
            v13 = *v6;
            while (*(_DWORD *)v12 != v13)
            {
              if (*(_DWORD *)v12 > v13)
                goto LABEL_16;
              v12 += 16;
              if (v12 == v11)
                goto LABEL_5;
            }
            v14 = a4[1];
            v15 = v6[1];
            v16 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v12 + 8);
            v17 = *(unsigned int *)(a2 + 16);
            v18 = *(int8x16_t **)a2;
            if (v14 < v15)
            {
              v19 = (int64x2_t *)((char *)v18 + 8 * v14 + 8 * (_DWORD)v17 * v15);
              v20 = *(int64x2_t *)(v16 + 16);
              v22 = *(int64x2_t *)(v16 + 32);
              v21 = *(int64x2_t *)(v16 + 48);
              v24 = *(int64x2_t *)(v16 + 64);
              v23 = *(int64x2_t *)(v16 + 80);
              v26 = *(int64x2_t *)(v16 + 128);
              v25 = *(int64x2_t *)(v16 + 144);
              v27 = vzip1q_s64(*(int64x2_t *)v16, v22);
              v28 = vzip1q_s64(v24, *(int64x2_t *)(v16 + 96));
              v29 = vzip1q_s64(v26, *(int64x2_t *)(v16 + 160));
              v24.i64[0] = vdupq_laneq_s64(v24, 1).u64[0];
              v24.i64[1] = *(_QWORD *)(v16 + 104);
              v30.i64[0] = vdupq_laneq_s64(v26, 1).u64[0];
              v31 = vzip2q_s64(*(int64x2_t *)v16, v22);
              v30.i64[1] = *(_QWORD *)(v16 + 168);
              v32 = vzip1q_s64(v23, *(int64x2_t *)(v16 + 112));
              v33 = vzip1q_s64(v25, *(int64x2_t *)(v16 + 176));
              v23.i64[0] = vdupq_laneq_s64(v23, 1).u64[0];
              v23.i64[1] = *(_QWORD *)(v16 + 120);
              v34.i64[0] = vdupq_laneq_s64(v25, 1).u64[0];
              v34.i64[1] = *(_QWORD *)(v16 + 184);
              v19[1] = v28;
              v19[2] = v29;
              *v19 = v27;
              v35 = (int64x2_t *)((char *)v19 + 8 * v17);
              v35[1] = v24;
              v35[2] = v30;
              *v35 = v31;
              v36 = &v19[v17];
              v36[1] = v32;
              v36[2] = v33;
              *v36 = vzip1q_s64(v20, v21);
              v37 = (int64x2_t *)((char *)v19 + 24 * v17);
              v37[1] = v23;
              v37[2] = v34;
              *v37 = vzip2q_s64(v20, v21);
LABEL_16:
              if (v12 == v11)
                break;
              goto LABEL_19;
            }
            v38 = *(_OWORD *)(v16 + 16);
            v39 = &v18->i8[8 * v15 + 8 * (_DWORD)v17 * v14];
            v40 = *(_OWORD *)(v16 + 32);
            v41 = *(_OWORD *)(v16 + 48);
            v42 = *(_OWORD *)(v16 + 64);
            v43 = *(_OWORD *)(v16 + 80);
            v44 = *(_OWORD *)(v16 + 96);
            v45 = *(_OWORD *)(v16 + 112);
            v46 = *(_OWORD *)(v16 + 128);
            v47 = *(_OWORD *)(v16 + 144);
            v48 = *(_OWORD *)(v16 + 160);
            v49 = *(_OWORD *)(v16 + 176);
            *(_OWORD *)v39 = *(_OWORD *)v16;
            *((_OWORD *)v39 + 1) = v38;
            v50 = &v39[8 * v17];
            *(_OWORD *)v50 = v40;
            *((_OWORD *)v50 + 1) = v41;
            v51 = &v39[16 * v17];
            *(_OWORD *)v51 = v42;
            *((_OWORD *)v51 + 1) = v43;
            v52 = &v39[24 * v17];
            *(_OWORD *)v52 = v44;
            *((_OWORD *)v52 + 1) = v45;
            v53 = &v39[32 * v17];
            *(_OWORD *)v53 = v46;
            *((_OWORD *)v53 + 1) = v47;
            v54 = &v39[40 * v17];
            *(_OWORD *)v54 = v48;
            *((_OWORD *)v54 + 1) = v49;
            if (v12 == v11)
              break;
LABEL_19:
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v55 = *a3;
        v56 = a3[1];
        if (*a3 != v56)
        {
          v57 = *a4;
          v58 = *(_QWORD *)(result + 88);
          v59 = (*(_DWORD *)(result + 112) * v57);
          v60 = v58 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v57) + v59);
          v61 = v58 + 16 * v59;
          do
          {
            if (v61 == v60)
              break;
            v62 = *v55;
            while (*(_DWORD *)v61 < v62)
            {
              v61 += 16;
              if (v61 == v60)
                goto LABEL_23;
            }
            if (*(_DWORD *)v61 == v62)
            {
              v63 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v61 + 8));
              if (v63 == *(int8x16_t **)a2)
              {
                v73 = v63[10];
                v72 = v63[11];
                v71 = v63[8];
                v70 = v63[9];
                v69 = v63[6];
                v68 = v63[7];
                v67 = v63[4];
                v66 = v63[5];
                v65 = v63[2];
                v64 = v63[3];
              }
              else
              {
                v65 = v63[2];
                v64 = v63[3];
                v67 = v63[4];
                v66 = v63[5];
                v69 = v63[6];
                v68 = v63[7];
                v71 = v63[8];
                v70 = v63[9];
                v73 = v63[10];
                v72 = v63[11];
              }
              v75 = *v63;
              v74 = v63[1];
              v76 = *(unsigned int *)(a2 + 16);
              v72.i64[1] = vextq_s8(v72, v72, 8uLL).u64[0];
              v73.i64[1] = vextq_s8(v73, v73, 8uLL).u64[0];
              v70.i64[1] = vextq_s8(v70, v70, 8uLL).u64[0];
              v71.i64[1] = vextq_s8(v71, v71, 8uLL).u64[0];
              v68.i64[1] = vextq_s8(v68, v68, 8uLL).u64[0];
              v69.i64[1] = vextq_s8(v69, v69, 8uLL).u64[0];
              v66.i64[1] = vextq_s8(v66, v66, 8uLL).u64[0];
              v67.i64[1] = vextq_s8(v67, v67, 8uLL).u64[0];
              v64.i64[1] = vextq_s8(v64, v64, 8uLL).u64[0];
              v65.i64[1] = vextq_s8(v65, v65, 8uLL).u64[0];
              v74.i64[1] = vextq_s8(v74, v74, 8uLL).u64[0];
              v75.i64[1] = vextq_s8(v75, v75, 8uLL).u64[0];
              v77 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v55[1] + (_DWORD)v76 * a4[1]));
              *v77 = v75;
              v77[1] = v74;
              v78 = (int8x16_t *)((char *)v77 + 8 * v76);
              *v78 = v65;
              v78[1] = v64;
              v79 = &v77[v76];
              *v79 = v67;
              v79[1] = v66;
              v80 = (int8x16_t *)((char *)v77 + 24 * v76);
              *v80 = v69;
              v80[1] = v68;
              v81 = &v77[2 * v76];
              *v81 = v71;
              v81[1] = v70;
              v82 = (int8x16_t *)((char *)v77 + 40 * v76);
              *v82 = v73;
              v82[1] = v72;
            }
            if (v61 == v60)
              break;
            v55 += 2;
          }
          while (v55 != v56);
        }
LABEL_23:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_20F5A1C44(uint64_t result, uint64_t a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t *v18;
  int64x2_t v19;
  int64x2_t *v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  __int128 v29;
  __int128 v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t *v40;
  int64x2_t *v41;
  int64x2_t *v42;
  __int128 v43;
  __int8 *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int8 *v61;
  __int8 *v62;
  __int8 *v63;
  __int8 *v64;
  __int8 *v65;
  __int8 *v66;
  __int8 *v67;
  __int8 *v68;
  unsigned int *v69;
  unsigned int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  int8x16_t *v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  uint64_t v100;
  int8x16_t *v101;
  int8x16_t *v102;
  int8x16_t *v103;
  int8x16_t *v104;
  int8x16_t *v105;
  int8x16_t *v106;
  int8x16_t *v107;
  int8x16_t *v108;
  int8x16_t *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v8 = *a4;
          v9 = *(_QWORD *)(result + 88);
          v10 = (*(_DWORD *)(result + 112) * v8);
          v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v8) + v10);
          v12 = v9 + 16 * v10;
          do
          {
            if (v12 == v11)
              break;
            v13 = *v6;
            while (*(_DWORD *)v12 != v13)
            {
              if (*(_DWORD *)v12 > v13)
                goto LABEL_16;
              v12 += 16;
              if (v12 == v11)
                goto LABEL_5;
            }
            v14 = a4[1];
            v15 = v6[1];
            v16 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v12 + 8);
            v17 = *(unsigned int *)(a2 + 16);
            v18 = *(int8x16_t **)a2;
            if (v14 < v15)
            {
              v19 = *(int64x2_t *)(v16 + 16);
              v20 = (int64x2_t *)((char *)v18 + 8 * v14 + 8 * (_DWORD)v17 * v15);
              v22 = *(int64x2_t *)(v16 + 32);
              v21 = *(int64x2_t *)(v16 + 48);
              v24 = *(int64x2_t *)(v16 + 64);
              v23 = *(int64x2_t *)(v16 + 80);
              v26 = *(int64x2_t *)(v16 + 128);
              v25 = *(int64x2_t *)(v16 + 144);
              v28 = *(int64x2_t *)(v16 + 192);
              v27 = *(int64x2_t *)(v16 + 208);
              v30 = *(_OWORD *)(v16 + 256);
              v29 = *(_OWORD *)(v16 + 272);
              v31 = vzip1q_s64(*(int64x2_t *)v16, v22);
              v32 = vzip1q_s64(v24, *(int64x2_t *)(v16 + 96));
              v33 = vzip1q_s64(v28, *(int64x2_t *)(v16 + 224));
              v34 = vzip2q_s64(*(int64x2_t *)v16, v22);
              v22.i64[0] = vdupq_laneq_s64(v24, 1).u64[0];
              v22.i64[1] = *(_QWORD *)(v16 + 104);
              v24.i64[0] = vdupq_laneq_s64(v26, 1).u64[0];
              v24.i64[1] = *(_QWORD *)(v16 + 168);
              v35.i64[0] = vdupq_laneq_s64(v28, 1).u64[0];
              v35.i64[1] = *(_QWORD *)(v16 + 232);
              v36 = vzip1q_s64(v23, *(int64x2_t *)(v16 + 112));
              v37 = vzip1q_s64(v25, *(int64x2_t *)(v16 + 176));
              v38 = vzip1q_s64(v27, *(int64x2_t *)(v16 + 240));
              v23.i64[0] = vdupq_laneq_s64(v23, 1).u64[0];
              v23.i64[1] = *(_QWORD *)(v16 + 120);
              v39.i64[0] = vdupq_laneq_s64(v25, 1).u64[0];
              v39.i64[1] = *(_QWORD *)(v16 + 184);
              v25.i64[0] = vdupq_laneq_s64(v27, 1).u64[0];
              v25.i64[1] = *(_QWORD *)(v16 + 248);
              v20[2] = vzip1q_s64(v26, *(int64x2_t *)(v16 + 160));
              v20[3] = v33;
              v20[4].i64[0] = v30;
              *v20 = v31;
              v20[1] = v32;
              v40 = (int64x2_t *)((char *)v20 + 8 * v17);
              v40[2] = v24;
              v40[3] = v35;
              *v40 = v34;
              v40[1] = v22;
              v40[4].i64[0] = *((_QWORD *)&v30 + 1);
              v41 = &v20[v17];
              v41[4].i64[0] = v29;
              v41[2] = v37;
              v41[3] = v38;
              *v41 = vzip1q_s64(v19, v21);
              v41[1] = v36;
              v42 = (int64x2_t *)((char *)v20 + 24 * v17);
              v42[4].i64[0] = *((_QWORD *)&v29 + 1);
              v42[2] = v39;
              v42[3] = v25;
              *v42 = vzip2q_s64(v19, v21);
              v42[1] = v23;
LABEL_16:
              if (v12 == v11)
                break;
              goto LABEL_19;
            }
            v43 = *(_OWORD *)(v16 + 16);
            v44 = &v18->i8[8 * v15 + 8 * (_DWORD)v17 * v14];
            v45 = *(_OWORD *)(v16 + 32);
            v46 = *(_OWORD *)(v16 + 48);
            v47 = *(_OWORD *)(v16 + 64);
            v48 = *(_OWORD *)(v16 + 80);
            v49 = *(_OWORD *)(v16 + 96);
            v50 = *(_OWORD *)(v16 + 112);
            v51 = *(_OWORD *)(v16 + 128);
            v52 = *(_OWORD *)(v16 + 144);
            v53 = *(_OWORD *)(v16 + 160);
            v54 = *(_OWORD *)(v16 + 176);
            v55 = *(_OWORD *)(v16 + 192);
            v56 = *(_OWORD *)(v16 + 208);
            v57 = *(_OWORD *)(v16 + 224);
            v58 = *(_OWORD *)(v16 + 240);
            v59 = *(_OWORD *)(v16 + 256);
            v60 = *(_OWORD *)(v16 + 272);
            *(_OWORD *)v44 = *(_OWORD *)v16;
            *((_OWORD *)v44 + 1) = v43;
            v61 = &v44[8 * v17];
            *(_OWORD *)v61 = v45;
            *((_OWORD *)v61 + 1) = v46;
            v62 = &v44[16 * v17];
            *(_OWORD *)v62 = v47;
            *((_OWORD *)v62 + 1) = v48;
            v63 = &v44[24 * v17];
            *(_OWORD *)v63 = v49;
            *((_OWORD *)v63 + 1) = v50;
            v64 = &v44[32 * v17];
            *(_OWORD *)v64 = v51;
            *((_OWORD *)v64 + 1) = v52;
            v65 = &v44[40 * v17];
            *(_OWORD *)v65 = v53;
            *((_OWORD *)v65 + 1) = v54;
            v66 = &v44[48 * v17];
            *(_OWORD *)v66 = v55;
            *((_OWORD *)v66 + 1) = v56;
            v67 = &v44[56 * v17];
            *(_OWORD *)v67 = v57;
            *((_OWORD *)v67 + 1) = v58;
            v68 = &v44[64 * v17];
            *(_OWORD *)v68 = v59;
            *((_OWORD *)v68 + 1) = v60;
            if (v12 == v11)
              break;
LABEL_19:
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v69 = *a3;
        v70 = a3[1];
        if (*a3 != v70)
        {
          v71 = *a4;
          v72 = *(_QWORD *)(result + 88);
          v73 = (*(_DWORD *)(result + 112) * v71);
          v74 = v72 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v71) + v73);
          v75 = v72 + 16 * v73;
          do
          {
            if (v75 == v74)
              break;
            v76 = *v69;
            while (*(_DWORD *)v75 < v76)
            {
              v75 += 16;
              if (v75 == v74)
                goto LABEL_23;
            }
            if (*(_DWORD *)v75 == v76)
            {
              v77 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v75 + 8));
              if (v77 == *(int8x16_t **)a2)
              {
                v87 = v77[16];
                v86 = v77[17];
                v85 = v77[14];
                v84 = v77[15];
                v83 = v77[12];
                v82 = v77[13];
                v81 = v77[10];
                v80 = v77[11];
                v93 = v77[8];
                v92 = v77[9];
                v88 = vextq_s8(v86, v86, 8uLL).u64[0];
                v89 = vextq_s8(v87, v87, 8uLL).u64[0];
                v90 = vextq_s8(v84, v84, 8uLL).u64[0];
                v91 = vextq_s8(v85, v85, 8uLL).u64[0];
                v112 = vextq_s8(v83, v83, 8uLL).u64[0];
                v113 = vextq_s8(v82, v82, 8uLL).u64[0];
                v110 = vextq_s8(v81, v81, 8uLL).u64[0];
                v111 = vextq_s8(v80, v80, 8uLL).u64[0];
                v79 = v77[6];
                v78 = v77[7];
              }
              else
              {
                v79 = v77[6];
                v78 = v77[7];
                v81 = v77[10];
                v80 = v77[11];
                v83 = v77[12];
                v82 = v77[13];
                v85 = v77[14];
                v84 = v77[15];
                v87 = v77[16];
                v86 = v77[17];
                v88 = vextq_s8(v86, v86, 8uLL).u64[0];
                v89 = vextq_s8(v87, v87, 8uLL).u64[0];
                v90 = vextq_s8(v84, v84, 8uLL).u64[0];
                v91 = vextq_s8(v85, v85, 8uLL).u64[0];
                v112 = vextq_s8(v83, v83, 8uLL).u64[0];
                v113 = vextq_s8(v82, v82, 8uLL).u64[0];
                v110 = vextq_s8(v81, v81, 8uLL).u64[0];
                v111 = vextq_s8(v80, v80, 8uLL).u64[0];
                v93 = v77[8];
                v92 = v77[9];
              }
              v95 = v77[4];
              v94 = v77[5];
              v97 = v77[2];
              v96 = v77[3];
              v99 = *v77;
              v98 = v77[1];
              v86.i64[1] = v88;
              v87.i64[1] = v89;
              v84.i64[1] = v90;
              v85.i64[1] = v91;
              v100 = *(unsigned int *)(a2 + 16);
              v101 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v69[1] + (_DWORD)v100 * a4[1]));
              v82.i64[1] = v113;
              v83.i64[1] = v112;
              v80.i64[1] = v111;
              v81.i64[1] = v110;
              v92.i64[1] = vextq_s8(v92, v92, 8uLL).u64[0];
              v93.i64[1] = vextq_s8(v93, v93, 8uLL).u64[0];
              v78.i64[1] = vextq_s8(v78, v78, 8uLL).u64[0];
              v79.i64[1] = vextq_s8(v79, v79, 8uLL).u64[0];
              v94.i64[1] = vextq_s8(v94, v94, 8uLL).u64[0];
              v95.i64[1] = vextq_s8(v95, v95, 8uLL).u64[0];
              v96.i64[1] = vextq_s8(v96, v96, 8uLL).u64[0];
              v97.i64[1] = vextq_s8(v97, v97, 8uLL).u64[0];
              v98.i64[1] = vextq_s8(v98, v98, 8uLL).u64[0];
              v99.i64[1] = vextq_s8(v99, v99, 8uLL).u64[0];
              *v101 = v99;
              v101[1] = v98;
              v102 = (int8x16_t *)((char *)v101 + 8 * v100);
              *v102 = v97;
              v102[1] = v96;
              v103 = &v101[v100];
              *v103 = v95;
              v103[1] = v94;
              v104 = (int8x16_t *)((char *)v101 + 24 * v100);
              *v104 = v79;
              v104[1] = v78;
              v105 = &v101[2 * v100];
              *v105 = v93;
              v105[1] = v92;
              v106 = (int8x16_t *)((char *)v101 + 40 * v100);
              *v106 = v81;
              v106[1] = v80;
              v107 = &v101[3 * v100];
              *v107 = v83;
              v107[1] = v82;
              v108 = (int8x16_t *)((char *)v101 + 56 * v100);
              *v108 = v85;
              v108[1] = v84;
              v109 = &v101[4 * v100];
              *v109 = v87;
              v109[1] = v86;
            }
            if (v75 == v74)
              break;
            v69 += 2;
          }
          while (v69 != v70);
        }
LABEL_23:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_20F5A2098(uint64_t result, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int8x16_t *v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  _QWORD *v21;
  int8x16_t *v22;
  unsigned int *v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  _OWORD *v31;
  _OWORD *v32;
  __int128 v33;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v8 = *a4;
          v9 = *(_QWORD *)(result + 88);
          v10 = (*(_DWORD *)(result + 112) * v8);
          v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v8) + v10);
          v12 = v9 + 16 * v10;
          do
          {
            if (v12 == v11)
              break;
            v13 = *v6;
            while (*(_DWORD *)v12 != v13)
            {
              if (*(_DWORD *)v12 > v13)
                goto LABEL_16;
              v12 += 16;
              if (v12 == v11)
                goto LABEL_5;
            }
            v14 = a4[1];
            v15 = v6[1];
            v16 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v12 + 8));
            v17 = *((unsigned int *)a2 + 4);
            v18 = *a2;
            v20 = *v16;
            v19 = v16[1];
            if (v14 < v15)
            {
              v21 = (_QWORD *)(v18 + 8 * (v14 + (_DWORD)v17 * v15));
              *v21 = v20.i64[0];
              v21[v17] = vextq_s8(v20, v20, 8uLL).u64[0];
              v21[2 * v17] = v19.i64[0];
              v21[3 * v17] = vextq_s8(v19, v19, 8uLL).u64[0];
LABEL_16:
              if (v12 == v11)
                break;
              goto LABEL_19;
            }
            v22 = (int8x16_t *)(v18 + 8 * (v15 + (_DWORD)v17 * v14));
            *v22 = v20;
            v22[1] = v19;
            if (v12 == v11)
              break;
LABEL_19:
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v23 = *a3;
        v24 = a3[1];
        if (*a3 != v24)
        {
          v25 = *a4;
          v26 = *(_QWORD *)(result + 88);
          v27 = (*(_DWORD *)(result + 112) * v25);
          v28 = v26 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v25) + v27);
          v29 = v26 + 16 * v27;
          do
          {
            if (v29 == v28)
              break;
            v30 = *v23;
            while (*(_DWORD *)v29 < v30)
            {
              v29 += 16;
              if (v29 == v28)
                goto LABEL_23;
            }
            if (*(_DWORD *)v29 == v30)
            {
              v31 = (_OWORD *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v29 + 8));
              v32 = (_OWORD *)(*a2 + 8 * (v23[1] + *((_DWORD *)a2 + 4) * a4[1]));
              v33 = v31[1];
              *v32 = *v31;
              v32[1] = v33;
            }
            if (v29 == v28)
              break;
            v23 += 2;
          }
          while (v23 != v24);
        }
LABEL_23:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_20F5A2254(uint64_t result, uint64_t a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  int64x2_t *v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t *v32;
  int64x2_t v33;
  __int128 v34;
  __int128 v35;
  __int8 *v36;
  int64x2_t *v37;
  int64x2_t *v38;
  unsigned int *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  __int128 *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _OWORD *v57;
  _OWORD *v58;
  _OWORD *v59;
  _OWORD *v60;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v8 = *a4;
          v9 = *(_QWORD *)(result + 88);
          v10 = (*(_DWORD *)(result + 112) * v8);
          v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v8) + v10);
          v12 = v9 + 16 * v10;
          do
          {
            if (v12 == v11)
              break;
            v13 = *v6;
            while (*(_DWORD *)v12 != v13)
            {
              if (*(_DWORD *)v12 > v13)
                goto LABEL_18;
              v12 += 16;
              if (v12 == v11)
                goto LABEL_5;
            }
            v14 = a4[1];
            v15 = v6[1];
            v16 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v12 + 8);
            v17 = *(unsigned int *)(a2 + 16);
            v18 = *(__int128 **)a2;
            if (v14 >= v15)
            {
              v33 = *(int64x2_t *)(v16 + 16);
              v19 = (int64x2_t *)((char *)v18 + 8 * v15 + 8 * (_DWORD)v17 * v14);
              v34 = *(_OWORD *)(v16 + 32);
              v35 = *(_OWORD *)(v16 + 48);
              v28 = *(int64x2_t *)(v16 + 64);
              v29 = *(int64x2_t *)(v16 + 80);
              v31 = *(int64x2_t *)(v16 + 96);
              v30 = *(int64x2_t *)(v16 + 112);
              *v19 = *(int64x2_t *)v16;
              v19[1] = v33;
              v36 = &v19->i8[8 * v17];
              *(_OWORD *)v36 = v34;
              *((_OWORD *)v36 + 1) = v35;
            }
            else
            {
              v19 = (int64x2_t *)((char *)v18 + 8 * v14 + 8 * (_DWORD)v17 * v15);
              v20 = *(int64x2_t *)(v16 + 16);
              v21 = *(int64x2_t *)(v16 + 32);
              v22 = *(int64x2_t *)(v16 + 48);
              v24 = *(int64x2_t *)(v16 + 64);
              v23 = *(int64x2_t *)(v16 + 80);
              v25 = vzip1q_s64(*(int64x2_t *)v16, v21);
              v26 = vzip1q_s64(v24, *(int64x2_t *)(v16 + 96));
              v27 = vzip2q_s64(*(int64x2_t *)v16, v21);
              v24.i64[0] = vdupq_laneq_s64(v24, 1).u64[0];
              v24.i64[1] = *(_QWORD *)(v16 + 104);
              v28 = vzip1q_s64(v20, v22);
              v29 = vzip1q_s64(v23, *(int64x2_t *)(v16 + 112));
              v30.i64[0] = vdupq_laneq_s64(v23, 1).u64[0];
              v30.i64[1] = *(_QWORD *)(v16 + 120);
              v31 = vzip2q_s64(v20, v22);
              *v19 = v25;
              v19[1] = v26;
              v32 = (int64x2_t *)((char *)v19 + 8 * v17);
              *v32 = v27;
              v32[1] = v24;
            }
            v37 = &v19[v17];
            *v37 = v28;
            v37[1] = v29;
            v38 = (int64x2_t *)((char *)v19 + 24 * v17);
            *v38 = v31;
            v38[1] = v30;
LABEL_18:
            if (v12 == v11)
              break;
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v39 = *a3;
        v40 = a3[1];
        if (*a3 != v40)
        {
          v41 = *a4;
          v42 = *(_QWORD *)(result + 88);
          v43 = (*(_DWORD *)(result + 112) * v41);
          v44 = v42 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v41) + v43);
          v45 = v42 + 16 * v43;
          do
          {
            if (v45 == v44)
              break;
            v46 = *v39;
            while (*(_DWORD *)v45 < v46)
            {
              v45 += 16;
              if (v45 == v44)
                goto LABEL_23;
            }
            if (*(_DWORD *)v45 == v46)
            {
              v47 = (__int128 *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v45 + 8));
              if (v47 == *(__int128 **)a2)
              {
                v55 = v47[6];
                v54 = v47[7];
                v53 = v47[4];
                v52 = v47[5];
                v51 = v47[2];
                v50 = v47[3];
                v49 = *v47;
                v48 = v47[1];
              }
              else
              {
                v49 = *v47;
                v48 = v47[1];
                v51 = v47[2];
                v50 = v47[3];
                v53 = v47[4];
                v52 = v47[5];
                v55 = v47[6];
                v54 = v47[7];
              }
              v56 = *(unsigned int *)(a2 + 16);
              v57 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v39[1] + (_DWORD)v56 * a4[1]));
              *v57 = v49;
              v57[1] = v48;
              v58 = (_OWORD *)((char *)v57 + 8 * v56);
              *v58 = v51;
              v58[1] = v50;
              v59 = &v57[v56];
              *v59 = v53;
              v59[1] = v52;
              v60 = (_OWORD *)((char *)v57 + 24 * v56);
              *v60 = v55;
              v60[1] = v54;
            }
            if (v45 == v44)
              break;
            v39 += 2;
          }
          while (v39 != v40);
        }
LABEL_23:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_20F5A2498(uint64_t result, uint64_t a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t *v18;
  int64x2_t *v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  __int128 v23;
  __int128 v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t *v27;
  int64x2_t *v28;
  int64x2_t *v29;
  __int128 v30;
  __int8 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int8 *v36;
  __int8 *v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int8x16_t *v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  uint64_t v53;
  int8x16_t *v54;
  int8x16_t *v55;
  int8x16_t *v56;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v8 = *a4;
          v9 = *(_QWORD *)(result + 88);
          v10 = (*(_DWORD *)(result + 112) * v8);
          v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v8) + v10);
          v12 = v9 + 16 * v10;
          do
          {
            if (v12 == v11)
              break;
            v13 = *v6;
            while (*(_DWORD *)v12 != v13)
            {
              if (*(_DWORD *)v12 > v13)
                goto LABEL_16;
              v12 += 16;
              if (v12 == v11)
                goto LABEL_5;
            }
            v14 = a4[1];
            v15 = v6[1];
            v16 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v12 + 8);
            v17 = *(unsigned int *)(a2 + 16);
            v18 = *(int8x16_t **)a2;
            if (v14 < v15)
            {
              v19 = (int64x2_t *)((char *)v18 + 8 * v14 + 8 * (_DWORD)v17 * v15);
              v20 = *(int64x2_t *)(v16 + 16);
              v22 = *(int64x2_t *)(v16 + 32);
              v21 = *(int64x2_t *)(v16 + 48);
              v24 = *(_OWORD *)(v16 + 64);
              v23 = *(_OWORD *)(v16 + 80);
              v25 = vzip1q_s64(*(int64x2_t *)v16, v22);
              v26 = vzip2q_s64(*(int64x2_t *)v16, v22);
              v19[1].i64[0] = v24;
              *v19 = v25;
              v27 = (int64x2_t *)((char *)v19 + 8 * v17);
              *v27 = v26;
              v27[1].i64[0] = *((_QWORD *)&v24 + 1);
              v28 = &v19[v17];
              v28[1].i64[0] = v23;
              *v28 = vzip1q_s64(v20, v21);
              v29 = (int64x2_t *)((char *)v19 + 24 * v17);
              v29[1].i64[0] = *((_QWORD *)&v23 + 1);
              *v29 = vzip2q_s64(v20, v21);
LABEL_16:
              if (v12 == v11)
                break;
              goto LABEL_19;
            }
            v30 = *(_OWORD *)(v16 + 16);
            v31 = &v18->i8[8 * v15 + 8 * (_DWORD)v17 * v14];
            v32 = *(_OWORD *)(v16 + 32);
            v33 = *(_OWORD *)(v16 + 48);
            v34 = *(_OWORD *)(v16 + 64);
            v35 = *(_OWORD *)(v16 + 80);
            *(_OWORD *)v31 = *(_OWORD *)v16;
            *((_OWORD *)v31 + 1) = v30;
            v36 = &v31[8 * v17];
            *(_OWORD *)v36 = v32;
            *((_OWORD *)v36 + 1) = v33;
            v37 = &v31[16 * v17];
            *(_OWORD *)v37 = v34;
            *((_OWORD *)v37 + 1) = v35;
            if (v12 == v11)
              break;
LABEL_19:
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v38 = *a3;
        v39 = a3[1];
        if (*a3 != v39)
        {
          v40 = *a4;
          v41 = *(_QWORD *)(result + 88);
          v42 = (*(_DWORD *)(result + 112) * v40);
          v43 = v41 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v40) + v42);
          v44 = v41 + 16 * v42;
          do
          {
            if (v44 == v43)
              break;
            v45 = *v38;
            while (*(_DWORD *)v44 < v45)
            {
              v44 += 16;
              if (v44 == v43)
                goto LABEL_23;
            }
            if (*(_DWORD *)v44 == v45)
            {
              v46 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v44 + 8));
              if (v46 == *(int8x16_t **)a2)
              {
                v52 = v46[4];
                v51 = v46[5];
                v50 = v46[2];
                v49 = v46[3];
                v48 = *v46;
                v47 = v46[1];
              }
              else
              {
                v48 = *v46;
                v47 = v46[1];
                v50 = v46[2];
                v49 = v46[3];
                v52 = v46[4];
                v51 = v46[5];
              }
              v53 = *(unsigned int *)(a2 + 16);
              v54 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v38[1] + (_DWORD)v53 * a4[1]));
              v51.i64[1] = vextq_s8(v51, v51, 8uLL).u64[0];
              v52.i64[1] = vextq_s8(v52, v52, 8uLL).u64[0];
              v49.i64[1] = vextq_s8(v49, v49, 8uLL).u64[0];
              v50.i64[1] = vextq_s8(v50, v50, 8uLL).u64[0];
              v47.i64[1] = vextq_s8(v47, v47, 8uLL).u64[0];
              v48.i64[1] = vextq_s8(v48, v48, 8uLL).u64[0];
              *v54 = v48;
              v54[1] = v47;
              v55 = (int8x16_t *)((char *)v54 + 8 * v53);
              *v55 = v50;
              v55[1] = v49;
              v56 = &v54[v53];
              *v56 = v52;
              v56[1] = v51;
            }
            if (v44 == v43)
              break;
            v38 += 2;
          }
          while (v38 != v39);
        }
LABEL_23:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_20F5A26F8(uint64_t result, uint64_t a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t *v18;
  int64x2_t *v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int64x2_t *v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int8x16_t *v65;
  int8x16_t *v66;
  int8x16_t *v67;
  int8x16_t *v68;
  unsigned int *v69;
  unsigned int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  int8x16_t *v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  uint64_t v100;
  int8x16_t *v101;
  int8x16_t *v102;
  int8x16_t *v103;
  int8x16_t *v104;
  int8x16_t *v105;
  int8x16_t *v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v8 = *a4;
          v9 = *(_QWORD *)(result + 88);
          v10 = (*(_DWORD *)(result + 112) * v8);
          v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v8) + v10);
          v12 = v9 + 16 * v10;
          do
          {
            if (v12 == v11)
              break;
            v13 = *v6;
            while (*(_DWORD *)v12 != v13)
            {
              if (*(_DWORD *)v12 > v13)
                goto LABEL_18;
              v12 += 16;
              if (v12 == v11)
                goto LABEL_5;
            }
            v14 = a4[1];
            v15 = v6[1];
            v16 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v12 + 8);
            v17 = *(unsigned int *)(a2 + 16);
            v18 = *(int8x16_t **)a2;
            if (v14 >= v15)
            {
              v62 = *(int64x2_t *)v16;
              v19 = (int64x2_t *)((char *)v18 + 8 * v15 + 8 * (_DWORD)v17 * v14);
              v63 = *(int64x2_t *)(v16 + 32);
              v35 = *(int64x2_t *)(v16 + 48);
              v64 = *(int64x2_t *)(v16 + 64);
              v36 = *(int64x2_t *)(v16 + 80);
              v37 = *(int8x16_t *)(v16 + 96);
              v38 = *(int8x16_t *)(v16 + 112);
              v39 = *(int8x16_t *)(v16 + 128);
              v43 = *(int8x16_t *)(v16 + 144);
              v40 = vextq_s8(v39, v39, 8uLL).u64[0];
              v41 = vextq_s8(v38, v38, 8uLL).u64[0];
              v42 = vextq_s8(v37, v37, 8uLL).u64[0];
              v44 = *(int8x16_t *)(v16 + 160);
              v45 = *(int8x16_t *)(v16 + 176);
              v47 = vextq_s8(v45, v45, 8uLL).u64[0];
              v48 = vextq_s8(v44, v44, 8uLL).u64[0];
              v46 = vextq_s8(v43, v43, 8uLL).u64[0];
              v49 = *(int8x16_t *)(v16 + 192);
              v50 = *(int8x16_t *)(v16 + 208);
              v51 = *(int8x16_t *)(v16 + 224);
              v55 = *(int8x16_t *)(v16 + 240);
              v52 = vextq_s8(v51, v51, 8uLL).u64[0];
              v53 = vextq_s8(v50, v50, 8uLL).u64[0];
              v54 = vextq_s8(v49, v49, 8uLL).u64[0];
              v56 = *(int8x16_t *)(v16 + 256);
              v57 = *(int8x16_t *)(v16 + 272);
              v59 = vextq_s8(v57, v57, 8uLL).u64[0];
              v60 = vextq_s8(v56, v56, 8uLL).u64[0];
              v58 = vextq_s8(v55, v55, 8uLL).u64[0];
              v19[1] = *(int64x2_t *)(v16 + 16);
              v19[2] = v63;
              *v19 = v62;
              v61 = (int64x2_t *)((char *)v19 + 8 * v17);
              v61[1] = v64;
            }
            else
            {
              v19 = (int64x2_t *)((char *)v18 + 8 * v14 + 8 * (_DWORD)v17 * v15);
              v20 = *(int64x2_t *)(v16 + 16);
              v21 = *(int64x2_t *)(v16 + 64);
              v22 = *(int64x2_t *)(v16 + 80);
              v24 = *(int64x2_t *)(v16 + 32);
              v23 = *(int64x2_t *)(v16 + 48);
              v25 = *(int64x2_t *)(v16 + 96);
              v26 = *(int64x2_t *)(v16 + 112);
              v27 = *(int64x2_t *)(v16 + 128);
              v29 = *(int64x2_t *)(v16 + 192);
              v28 = *(int64x2_t *)(v16 + 208);
              v30 = *(int64x2_t *)(v16 + 224);
              v31 = vzip1q_s64(*(int64x2_t *)v16, v23);
              v32 = vzip1q_s64(v25, *(int64x2_t *)(v16 + 144));
              v33 = vzip1q_s64(v29, *(int64x2_t *)(v16 + 240));
              v34.i64[0] = vdupq_laneq_s64(v25, 1).u64[0];
              v34.i64[1] = *(_QWORD *)(v16 + 152);
              v35 = vzip2q_s64(*(int64x2_t *)v16, v23);
              v36.i64[0] = vdupq_laneq_s64(v29, 1).u64[0];
              v36.i64[1] = *(_QWORD *)(v16 + 248);
              v37 = (int8x16_t)vzip1q_s64(v20, v21);
              v38 = (int8x16_t)vzip1q_s64(v26, *(int64x2_t *)(v16 + 160));
              v39 = (int8x16_t)vzip1q_s64(v28, *(int64x2_t *)(v16 + 256));
              v40 = vextq_s8(v39, v39, 8uLL).u64[0];
              v41 = vextq_s8(v38, v38, 8uLL).u64[0];
              v42 = vextq_s8(v37, v37, 8uLL).u64[0];
              v43 = (int8x16_t)vzip2q_s64(v20, v21);
              v44.i64[0] = vdupq_laneq_s64(v26, 1).u64[0];
              v44.i64[1] = *(_QWORD *)(v16 + 168);
              v45.i64[0] = vdupq_laneq_s64(v28, 1).u64[0];
              v45.i64[1] = *(_QWORD *)(v16 + 264);
              v46 = vextq_s8(v43, v43, 8uLL).u64[0];
              v47 = vextq_s8(v45, v45, 8uLL).u64[0];
              v48 = vextq_s8(v44, v44, 8uLL).u64[0];
              v49 = (int8x16_t)vzip1q_s64(v24, v22);
              v50 = (int8x16_t)vzip1q_s64(v27, *(int64x2_t *)(v16 + 176));
              v51 = (int8x16_t)vzip1q_s64(v30, *(int64x2_t *)(v16 + 272));
              v52 = vextq_s8(v51, v51, 8uLL).u64[0];
              v53 = vextq_s8(v50, v50, 8uLL).u64[0];
              v54 = vextq_s8(v49, v49, 8uLL).u64[0];
              v55 = (int8x16_t)vzip2q_s64(v24, v22);
              v56.i64[0] = vdupq_laneq_s64(v27, 1).u64[0];
              v56.i64[1] = *(_QWORD *)(v16 + 184);
              v57.i64[0] = vdupq_laneq_s64(v30, 1).u64[0];
              v57.i64[1] = *(_QWORD *)(v16 + 280);
              v58 = vextq_s8(v55, v55, 8uLL).u64[0];
              v59 = vextq_s8(v57, v57, 8uLL).u64[0];
              v60 = vextq_s8(v56, v56, 8uLL).u64[0];
              v19[1] = v32;
              v19[2] = v33;
              *v19 = v31;
              v61 = (int64x2_t *)((char *)v19 + 8 * v17);
              v61[1] = v34;
            }
            v61[2] = v36;
            *v61 = v35;
            v37.i64[1] = v42;
            v38.i64[1] = v41;
            v65 = (int8x16_t *)&v19[v17];
            *v65 = v37;
            v65[1] = v38;
            v39.i64[1] = v40;
            v65[2] = v39;
            v66 = (int8x16_t *)((char *)v19 + 24 * v17);
            v45.i64[1] = v47;
            v44.i64[1] = v48;
            v43.i64[1] = v46;
            v66[1] = v44;
            v66[2] = v45;
            *v66 = v43;
            v51.i64[1] = v52;
            v67 = (int8x16_t *)&v19[2 * v17];
            v50.i64[1] = v53;
            v49.i64[1] = v54;
            v67[1] = v50;
            v67[2] = v51;
            *v67 = v49;
            v68 = (int8x16_t *)((char *)v19 + 40 * v17);
            v57.i64[1] = v59;
            v56.i64[1] = v60;
            v55.i64[1] = v58;
            v68[1] = v56;
            v68[2] = v57;
            *v68 = v55;
LABEL_18:
            if (v12 == v11)
              break;
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v69 = *a3;
        v70 = a3[1];
        if (*a3 != v70)
        {
          v71 = *a4;
          v72 = *(_QWORD *)(result + 88);
          v73 = (*(_DWORD *)(result + 112) * v71);
          v74 = v72 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v71) + v73);
          v75 = v72 + 16 * v73;
          do
          {
            if (v75 == v74)
              break;
            v76 = *v69;
            while (*(_DWORD *)v75 < v76)
            {
              v75 += 16;
              if (v75 == v74)
                goto LABEL_23;
            }
            if (*(_DWORD *)v75 == v76)
            {
              v77 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v75 + 8));
              if (v77 == *(int8x16_t **)a2)
              {
                v87 = v77[16];
                v86 = v77[17];
                v85 = v77[14];
                v84 = v77[15];
                v83 = v77[12];
                v82 = v77[13];
                v81 = v77[10];
                v80 = v77[11];
                v93 = v77[8];
                v92 = v77[9];
                v109 = vextq_s8(v87, v87, 8uLL).u64[0];
                v110 = vextq_s8(v86, v86, 8uLL).u64[0];
                v88 = vextq_s8(v85, v85, 8uLL).u64[0];
                v89 = vextq_s8(v82, v82, 8uLL).u64[0];
                v90 = vextq_s8(v83, v83, 8uLL).u64[0];
                v107 = vextq_s8(v80, v80, 8uLL).u64[0];
                v108 = vextq_s8(v84, v84, 8uLL).u64[0];
                v91 = vextq_s8(v81, v81, 8uLL).u64[0];
                v79 = v77[6];
                v78 = v77[7];
              }
              else
              {
                v79 = v77[6];
                v78 = v77[7];
                v81 = v77[10];
                v80 = v77[11];
                v83 = v77[12];
                v82 = v77[13];
                v85 = v77[14];
                v84 = v77[15];
                v87 = v77[16];
                v86 = v77[17];
                v109 = vextq_s8(v87, v87, 8uLL).u64[0];
                v110 = vextq_s8(v86, v86, 8uLL).u64[0];
                v88 = vextq_s8(v85, v85, 8uLL).u64[0];
                v89 = vextq_s8(v82, v82, 8uLL).u64[0];
                v90 = vextq_s8(v83, v83, 8uLL).u64[0];
                v107 = vextq_s8(v80, v80, 8uLL).u64[0];
                v108 = vextq_s8(v84, v84, 8uLL).u64[0];
                v91 = vextq_s8(v81, v81, 8uLL).u64[0];
                v93 = v77[8];
                v92 = v77[9];
              }
              v95 = v77[4];
              v94 = v77[5];
              v97 = v77[2];
              v96 = v77[3];
              v99 = *v77;
              v98 = v77[1];
              v85.i64[1] = v88;
              v82.i64[1] = v89;
              v83.i64[1] = v90;
              v97.i64[1] = vextq_s8(v97, v97, 8uLL).u64[0];
              v100 = *(unsigned int *)(a2 + 16);
              v98.i64[1] = vextq_s8(v98, v98, 8uLL).u64[0];
              v99.i64[1] = vextq_s8(v99, v99, 8uLL).u64[0];
              v94.i64[1] = vextq_s8(v94, v94, 8uLL).u64[0];
              v95.i64[1] = vextq_s8(v95, v95, 8uLL).u64[0];
              v96.i64[1] = vextq_s8(v96, v96, 8uLL).u64[0];
              v93.i64[1] = vextq_s8(v93, v93, 8uLL).u64[0];
              v78.i64[1] = vextq_s8(v78, v78, 8uLL).u64[0];
              v79.i64[1] = vextq_s8(v79, v79, 8uLL).u64[0];
              v80.i64[1] = v107;
              v81.i64[1] = v91;
              v92.i64[1] = vextq_s8(v92, v92, 8uLL).u64[0];
              v86.i64[1] = v110;
              v87.i64[1] = v109;
              v84.i64[1] = v108;
              v101 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v69[1] + (_DWORD)v100 * a4[1]));
              *v101 = v99;
              v101[1] = v98;
              v101[2] = v97;
              v102 = (int8x16_t *)((char *)v101 + 8 * v100);
              *v102 = v96;
              v102[1] = v95;
              v102[2] = v94;
              v103 = &v101[v100];
              *v103 = v79;
              v103[1] = v78;
              v103[2] = v93;
              v104 = (int8x16_t *)((char *)v101 + 24 * v100);
              *v104 = v92;
              v104[1] = v81;
              v104[2] = v80;
              v105 = &v101[2 * v100];
              *v105 = v83;
              v105[1] = v82;
              v105[2] = v85;
              v106 = (int8x16_t *)((char *)v101 + 40 * v100);
              *v106 = v84;
              v106[1] = v87;
              v106[2] = v86;
            }
            if (v75 == v74)
              break;
            v69 += 2;
          }
          while (v69 != v70);
        }
LABEL_23:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_20F5A2B9C(uint64_t result, uint64_t a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t *v18;
  int64x2_t v19;
  int64x2_t *v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t *v48;
  int64x2_t *v49;
  int64x2_t *v50;
  int64x2_t *v51;
  int64x2_t *v52;
  int64x2_t v53;
  int64x2_t *v54;
  int64x2_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  __int8 *v80;
  int64x2_t *v81;
  __int8 *v82;
  int64x2_t *v83;
  __int8 *v84;
  int64x2_t *v85;
  __int8 *v86;
  int64x2_t *v87;
  unsigned int *v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  int8x16_t *v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  unint64_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int8x16_t v113;
  int8x16_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int8x16_t v118;
  int8x16_t v119;
  unint64_t v120;
  unint64_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  uint64_t v128;
  int8x16_t v129;
  int8x16_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  int8x16_t *v134;
  int8x16_t *v135;
  int8x16_t *v136;
  int8x16_t *v137;
  int8x16_t *v138;
  int8x16_t *v139;
  int8x16_t *v140;
  __int8 *v141;
  int8x16_t *v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  int8x16_t v166;
  int8x16_t v167;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v8 = *a4;
          v9 = *(_QWORD *)(result + 88);
          v10 = (*(_DWORD *)(result + 112) * v8);
          v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v8) + v10);
          v12 = v9 + 16 * v10;
          do
          {
            if (v12 == v11)
              break;
            v13 = *v6;
            while (*(_DWORD *)v12 != v13)
            {
              if (*(_DWORD *)v12 > v13)
                goto LABEL_16;
              v12 += 16;
              if (v12 == v11)
                goto LABEL_5;
            }
            v14 = a4[1];
            v15 = v6[1];
            v16 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v12 + 8);
            v17 = *(unsigned int *)(a2 + 16);
            v18 = *(int8x16_t **)a2;
            if (v14 < v15)
            {
              v19 = *(int64x2_t *)(v16 + 16);
              v20 = (int64x2_t *)((char *)v18 + 8 * v14 + 8 * (_DWORD)v17 * v15);
              v22 = *(int64x2_t *)(v16 + 64);
              v21 = *(int64x2_t *)(v16 + 80);
              v23 = *(int64x2_t *)(v16 + 32);
              v24 = *(int64x2_t *)(v16 + 48);
              v26 = *(int64x2_t *)(v16 + 96);
              v25 = *(int64x2_t *)(v16 + 112);
              v28 = *(int64x2_t *)(v16 + 160);
              v27 = *(int64x2_t *)(v16 + 176);
              v29 = *(int64x2_t *)(v16 + 128);
              v30 = *(int64x2_t *)(v16 + 144);
              v32 = *(int64x2_t *)(v16 + 192);
              v31 = *(int64x2_t *)(v16 + 208);
              v34 = *(int64x2_t *)(v16 + 256);
              v33 = *(int64x2_t *)(v16 + 272);
              v35 = *(int64x2_t *)(v16 + 224);
              v36 = *(int64x2_t *)(v16 + 240);
              v38 = *(int64x2_t *)(v16 + 288);
              v37 = *(int64x2_t *)(v16 + 304);
              v40 = *(int64x2_t *)(v16 + 352);
              v39 = *(int64x2_t *)(v16 + 368);
              v41 = *(int64x2_t *)(v16 + 320);
              v42 = *(int64x2_t *)(v16 + 336);
              v44 = *(_OWORD *)(v16 + 400);
              v43 = *(_OWORD *)(v16 + 416);
              v45 = *(_OWORD *)(v16 + 384);
              v46 = vzip1q_s64(*(int64x2_t *)v16, v24);
              v47 = vzip2q_s64(*(int64x2_t *)v16, v24);
              v20[2] = vzip1q_s64(v32, v36);
              v20[3] = vzip1q_s64(v38, v42);
              v20[4].i64[0] = v45;
              *v20 = v46;
              v20[1] = vzip1q_s64(v26, v30);
              v48 = (int64x2_t *)((char *)v20 + 8 * v17);
              v48[2] = vzip2q_s64(v32, v36);
              v48[3] = vzip2q_s64(v38, v42);
              *v48 = v47;
              v48[1] = vzip2q_s64(v26, v30);
              v48[4].i64[0] = *((_QWORD *)&v45 + 1);
              v49 = &v20[v17];
              v49[4].i64[0] = v44;
              v49[2] = vzip1q_s64(v31, v34);
              v49[3] = vzip1q_s64(v37, v40);
              *v49 = vzip1q_s64(v19, v22);
              v49[1] = vzip1q_s64(v25, v28);
              v50 = (int64x2_t *)((char *)v20 + 24 * v17);
              v50[4].i64[0] = *((_QWORD *)&v44 + 1);
              v50[2] = vzip2q_s64(v31, v34);
              v50[3] = vzip2q_s64(v37, v40);
              *v50 = vzip2q_s64(v19, v22);
              v50[1] = vzip2q_s64(v25, v28);
              v51 = &v20[2 * v17];
              v51[4].i64[0] = v43;
              v51[2] = vzip1q_s64(v35, v33);
              v51[3] = vzip1q_s64(v41, v39);
              *v51 = vzip1q_s64(v23, v21);
              v51[1] = vzip1q_s64(v29, v27);
              v52 = (int64x2_t *)((char *)v20 + 40 * v17);
              v52[4].i64[0] = *((_QWORD *)&v43 + 1);
              v52[2] = vzip2q_s64(v35, v33);
              v52[3] = vzip2q_s64(v41, v39);
              *v52 = vzip2q_s64(v23, v21);
              v52[1] = vzip2q_s64(v29, v27);
LABEL_16:
              if (v12 == v11)
                break;
              goto LABEL_19;
            }
            v53 = *(int64x2_t *)v16;
            v54 = (int64x2_t *)((char *)v18 + 8 * v15 + 8 * (_DWORD)v17 * v14);
            v55 = *(int64x2_t *)(v16 + 32);
            v56 = *(_OWORD *)(v16 + 48);
            v57 = *(_OWORD *)(v16 + 64);
            v58 = *(_OWORD *)(v16 + 80);
            v59 = *(int64x2_t *)(v16 + 96);
            v60 = *(int64x2_t *)(v16 + 112);
            v61 = *(int64x2_t *)(v16 + 128);
            v62 = *(_OWORD *)(v16 + 144);
            v63 = *(_OWORD *)(v16 + 160);
            v64 = *(_OWORD *)(v16 + 176);
            v65 = *(int64x2_t *)(v16 + 192);
            v66 = *(int64x2_t *)(v16 + 208);
            v67 = *(int64x2_t *)(v16 + 224);
            v68 = *(_OWORD *)(v16 + 240);
            v69 = *(_OWORD *)(v16 + 256);
            v70 = *(_OWORD *)(v16 + 272);
            v71 = *(int64x2_t *)(v16 + 288);
            v72 = *(int64x2_t *)(v16 + 304);
            v73 = *(int64x2_t *)(v16 + 320);
            v74 = *(_OWORD *)(v16 + 336);
            v75 = *(_OWORD *)(v16 + 352);
            v76 = *(_OWORD *)(v16 + 368);
            v77 = *(int64x2_t *)(v16 + 384);
            v78 = *(int64x2_t *)(v16 + 400);
            v79 = *(int64x2_t *)(v16 + 416);
            v54[1] = *(int64x2_t *)(v16 + 16);
            v54[2] = v55;
            *v54 = v53;
            v80 = &v54->i8[8 * v17];
            *((_OWORD *)v80 + 1) = v57;
            *((_OWORD *)v80 + 2) = v58;
            *(_OWORD *)v80 = v56;
            v81 = &v54[v17];
            v81[1] = v60;
            v81[2] = v61;
            *v81 = v59;
            v82 = &v54->i8[24 * v17];
            *((_OWORD *)v82 + 1) = v63;
            *((_OWORD *)v82 + 2) = v64;
            *(_OWORD *)v82 = v62;
            v83 = &v54[2 * v17];
            v83[1] = v66;
            v83[2] = v67;
            *v83 = v65;
            v84 = &v54->i8[40 * v17];
            *((_OWORD *)v84 + 1) = v69;
            *((_OWORD *)v84 + 2) = v70;
            *(_OWORD *)v84 = v68;
            v85 = &v54[3 * v17];
            v85[1] = v72;
            v85[2] = v73;
            *v85 = v71;
            v86 = &v54->i8[56 * v17];
            *((_OWORD *)v86 + 1) = v75;
            *((_OWORD *)v86 + 2) = v76;
            *(_OWORD *)v86 = v74;
            v87 = &v54[4 * v17];
            v87[1] = v78;
            v87[2] = v79;
            *v87 = v77;
            if (v12 == v11)
              break;
LABEL_19:
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v88 = *a3;
        v89 = a3[1];
        if (*a3 != v89)
        {
          v90 = *a4;
          v91 = *(_QWORD *)(result + 88);
          v92 = (*(_DWORD *)(result + 112) * v90);
          v93 = v91 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v90) + v92);
          v94 = v91 + 16 * v92;
          do
          {
            if (v94 == v93)
              break;
            v95 = *v88;
            while (*(_DWORD *)v94 < v95)
            {
              v94 += 16;
              if (v94 == v93)
                goto LABEL_23;
            }
            if (*(_DWORD *)v94 == v95)
            {
              v96 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v94 + 8));
              if (v96 == *(int8x16_t **)a2)
              {
                v102 = v96[17];
                v166 = v96[25];
                v167 = v96[26];
                v101 = vextq_s8(v167, v167, 8uLL).u64[0];
                v153 = vextq_s8(v166, v166, 8uLL).u64[0];
                v104 = v96[15];
                v103 = v96[16];
                v164 = v96[19];
                v165 = v96[24];
                v152 = vextq_s8(v165, v165, 8uLL).u64[0];
                v161 = v96[22];
                v162 = v96[23];
                v158 = vextq_s8(v162, v162, 8uLL).u64[0];
                v159 = v96[20];
                v157 = vextq_s8(v161, v161, 8uLL).u64[0];
                v99 = v96[13];
                v105 = v96[14];
                v160 = v96[21];
                v156 = vextq_s8(v160, v160, 8uLL).u64[0];
                v151 = vextq_s8(v159, v159, 8uLL).u64[0];
                v155 = vextq_s8(v164, v164, 8uLL).u64[0];
                v106 = v96[11];
                v100 = v96[12];
                v163 = v96[18];
                v154 = vextq_s8(v163, v163, 8uLL).u64[0];
                v150 = vextq_s8(v102, v102, 8uLL).u64[0];
                v149 = vextq_s8(v103, v103, 8uLL).u64[0];
                v108 = v96[9];
                v107 = v96[10];
                v148 = vextq_s8(v104, v104, 8uLL).u64[0];
                v147 = vextq_s8(v105, v105, 8uLL).u64[0];
                v146 = vextq_s8(v99, v99, 8uLL).u64[0];
                v97 = v96[7];
                v109 = v96[8];
                v144 = vextq_s8(v100, v100, 8uLL).u64[0];
                v145 = vextq_s8(v106, v106, 8uLL).u64[0];
                v143 = vextq_s8(v107, v107, 8uLL).u64[0];
                v113 = v96[5];
                v98 = v96[6];
                v110 = vextq_s8(v108, v108, 8uLL).u64[0];
                v111 = vextq_s8(v109, v109, 8uLL).u64[0];
                v112 = vextq_s8(v97, v97, 8uLL).u64[0];
                v118 = v96[3];
                v114 = v96[4];
                v115 = vextq_s8(v98, v98, 8uLL).u64[0];
                v116 = vextq_s8(v113, v113, 8uLL).u64[0];
                v117 = vextq_s8(v114, v114, 8uLL).u64[0];
                v122 = v96[1];
                v119 = v96[2];
                v120 = vextq_s8(v118, v118, 8uLL).u64[0];
                v121 = vextq_s8(v119, v119, 8uLL).u64[0];
                v123 = *v96;
              }
              else
              {
                v98 = v96[6];
                v97 = v96[7];
                v100 = v96[12];
                v99 = v96[13];
                v166 = v96[25];
                v167 = v96[26];
                v101 = vextq_s8(v167, v167, 8uLL).u64[0];
                v164 = v96[19];
                v165 = v96[24];
                v152 = vextq_s8(v165, v165, 8uLL).u64[0];
                v153 = vextq_s8(v166, v166, 8uLL).u64[0];
                v161 = v96[22];
                v162 = v96[23];
                v157 = vextq_s8(v161, v161, 8uLL).u64[0];
                v158 = vextq_s8(v162, v162, 8uLL).u64[0];
                v159 = v96[20];
                v160 = v96[21];
                v155 = vextq_s8(v164, v164, 8uLL).u64[0];
                v156 = vextq_s8(v160, v160, 8uLL).u64[0];
                v103 = v96[16];
                v102 = v96[17];
                v163 = v96[18];
                v154 = vextq_s8(v163, v163, 8uLL).u64[0];
                v150 = vextq_s8(v102, v102, 8uLL).u64[0];
                v151 = vextq_s8(v159, v159, 8uLL).u64[0];
                v105 = v96[14];
                v104 = v96[15];
                v148 = vextq_s8(v104, v104, 8uLL).u64[0];
                v149 = vextq_s8(v103, v103, 8uLL).u64[0];
                v146 = vextq_s8(v99, v99, 8uLL).u64[0];
                v147 = vextq_s8(v105, v105, 8uLL).u64[0];
                v107 = v96[10];
                v106 = v96[11];
                v144 = vextq_s8(v100, v100, 8uLL).u64[0];
                v145 = vextq_s8(v106, v106, 8uLL).u64[0];
                v143 = vextq_s8(v107, v107, 8uLL).u64[0];
                v109 = v96[8];
                v108 = v96[9];
                v110 = vextq_s8(v108, v108, 8uLL).u64[0];
                v111 = vextq_s8(v109, v109, 8uLL).u64[0];
                v112 = vextq_s8(v97, v97, 8uLL).u64[0];
                v114 = v96[4];
                v113 = v96[5];
                v115 = vextq_s8(v98, v98, 8uLL).u64[0];
                v116 = vextq_s8(v113, v113, 8uLL).u64[0];
                v117 = vextq_s8(v114, v114, 8uLL).u64[0];
                v119 = v96[2];
                v118 = v96[3];
                v120 = vextq_s8(v118, v118, 8uLL).u64[0];
                v121 = vextq_s8(v119, v119, 8uLL).u64[0];
                v123 = *v96;
                v122 = v96[1];
              }
              v124.i64[0] = v167.i64[0];
              v124.i64[1] = v101;
              v125.i64[0] = v166.i64[0];
              v125.i64[1] = v153;
              v126.i64[0] = v165.i64[0];
              v126.i64[1] = v152;
              v105.i64[1] = v147;
              v99.i64[1] = v146;
              v100.i64[1] = v144;
              v119.i64[1] = v121;
              v122.i64[1] = vextq_s8(v122, v122, 8uLL).u64[0];
              v123.i64[1] = vextq_s8(v123, v123, 8uLL).u64[0];
              v113.i64[1] = v116;
              v114.i64[1] = v117;
              v118.i64[1] = v120;
              v109.i64[1] = v111;
              v97.i64[1] = v112;
              v98.i64[1] = v115;
              v106.i64[1] = v145;
              v107.i64[1] = v143;
              v108.i64[1] = v110;
              v102.i64[1] = v150;
              v103.i64[1] = v149;
              v104.i64[1] = v148;
              v127.i64[0] = v159.i64[0];
              v127.i64[1] = v151;
              v128 = *(unsigned int *)(a2 + 16);
              v129.i64[0] = v164.i64[0];
              v129.i64[1] = v155;
              v130.i64[0] = v163.i64[0];
              v130.i64[1] = v154;
              *(_QWORD *)&v131 = v162.i64[0];
              *((_QWORD *)&v131 + 1) = v158;
              *(_QWORD *)&v132 = v161.i64[0];
              *((_QWORD *)&v132 + 1) = v157;
              *(_QWORD *)&v133 = v160.i64[0];
              *((_QWORD *)&v133 + 1) = v156;
              v134 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v88[1] + (_DWORD)v128 * a4[1]));
              *v134 = v123;
              v134[1] = v122;
              v134[2] = v119;
              v135 = (int8x16_t *)((char *)v134 + 8 * v128);
              *v135 = v118;
              v135[1] = v114;
              v135[2] = v113;
              v136 = &v134[v128];
              *v136 = v98;
              v136[1] = v97;
              v136[2] = v109;
              v137 = (int8x16_t *)((char *)v134 + 24 * v128);
              *v137 = v108;
              v137[1] = v107;
              v137[2] = v106;
              v138 = &v134[2 * v128];
              *v138 = v100;
              v138[1] = v99;
              v138[2] = v105;
              v139 = (int8x16_t *)((char *)v134 + 40 * v128);
              *v139 = v104;
              v139[1] = v103;
              v139[2] = v102;
              v140 = &v134[3 * v128];
              *v140 = v130;
              v140[1] = v129;
              v140[2] = v127;
              v141 = &v134->i8[56 * v128];
              *(_OWORD *)v141 = v133;
              *((_OWORD *)v141 + 1) = v132;
              *((_OWORD *)v141 + 2) = v131;
              v142 = &v134[4 * v128];
              *v142 = v126;
              v142[1] = v125;
              v142[2] = v124;
            }
            if (v94 == v93)
              break;
            v88 += 2;
          }
          while (v88 != v89);
        }
LABEL_23:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_20F5A3214(uint64_t result, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int8x16_t *v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  int8x16_t *v26;
  unsigned int *v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  __int128 *v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v8 = *a4;
          v9 = *(_QWORD *)(result + 88);
          v10 = (*(_DWORD *)(result + 112) * v8);
          v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v8) + v10);
          v12 = v9 + 16 * v10;
          do
          {
            if (v12 == v11)
              break;
            v13 = *v6;
            while (*(_DWORD *)v12 != v13)
            {
              if (*(_DWORD *)v12 > v13)
                goto LABEL_16;
              v12 += 16;
              if (v12 == v11)
                goto LABEL_5;
            }
            v14 = a4[1];
            v15 = v6[1];
            v16 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v12 + 8));
            v17 = *((unsigned int *)a2 + 4);
            v18 = *a2;
            v20 = v16[1];
            v19 = v16[2];
            v21 = *v16;
            v22 = vextq_s8(v19, v19, 8uLL).u64[0];
            v23 = vextq_s8(v20, v20, 8uLL).u64[0];
            v24 = vextq_s8(v21, v21, 8uLL).u64[0];
            if (v14 < v15)
            {
              v25 = (_QWORD *)(v18 + 8 * (v14 + (_DWORD)v17 * v15));
              *v25 = v21.i64[0];
              v25[v17] = v24;
              v25[2 * v17] = v20.i64[0];
              v25[3 * v17] = v23;
              v25[4 * v17] = v19.i64[0];
              v25[5 * v17] = v22;
LABEL_16:
              if (v12 == v11)
                break;
              goto LABEL_19;
            }
            v21.i64[1] = v24;
            v20.i64[1] = v23;
            v26 = (int8x16_t *)(v18 + 8 * (v15 + (_DWORD)v17 * v14));
            *v26 = v21;
            v26[1] = v20;
            v19.i64[1] = v22;
            v26[2] = v19;
            if (v12 == v11)
              break;
LABEL_19:
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v27 = *a3;
        v28 = a3[1];
        if (*a3 != v28)
        {
          v29 = *a4;
          v30 = *(_QWORD *)(result + 88);
          v31 = (*(_DWORD *)(result + 112) * v29);
          v32 = v30 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v29) + v31);
          v33 = v30 + 16 * v31;
          do
          {
            if (v33 == v32)
              break;
            v34 = *v27;
            while (*(_DWORD *)v33 < v34)
            {
              v33 += 16;
              if (v33 == v32)
                goto LABEL_23;
            }
            if (*(_DWORD *)v33 == v34)
            {
              v35 = (__int128 *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v33 + 8));
              v36 = (_OWORD *)(*a2 + 8 * (v27[1] + *((_DWORD *)a2 + 4) * a4[1]));
              v37 = v35[2];
              v38 = *v35;
              v36[1] = v35[1];
              v36[2] = v37;
              *v36 = v38;
            }
            if (v33 == v32)
              break;
            v27 += 2;
          }
          while (v27 != v28);
        }
LABEL_23:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_20F5A3404(uint64_t result, uint64_t a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t *v18;
  int64x2_t v19;
  int64x2_t *v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t *v32;
  int64x2_t *v33;
  int64x2_t *v34;
  int64x2_t *v35;
  int64x2_t *v36;
  int64x2_t v37;
  int64x2_t *v38;
  int64x2_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int8 *v49;
  int64x2_t *v50;
  __int8 *v51;
  unsigned int *v52;
  unsigned int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  int8x16_t *v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  uint64_t v73;
  int8x16_t *v74;
  int8x16_t *v75;
  int8x16_t *v76;
  int8x16_t *v77;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v8 = *a4;
          v9 = *(_QWORD *)(result + 88);
          v10 = (*(_DWORD *)(result + 112) * v8);
          v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v8) + v10);
          v12 = v9 + 16 * v10;
          do
          {
            if (v12 == v11)
              break;
            v13 = *v6;
            while (*(_DWORD *)v12 != v13)
            {
              if (*(_DWORD *)v12 > v13)
                goto LABEL_16;
              v12 += 16;
              if (v12 == v11)
                goto LABEL_5;
            }
            v14 = a4[1];
            v15 = v6[1];
            v16 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v12 + 8);
            v17 = *(unsigned int *)(a2 + 16);
            v18 = *(int8x16_t **)a2;
            if (v14 < v15)
            {
              v19 = *(int64x2_t *)(v16 + 16);
              v20 = (int64x2_t *)((char *)v18 + 8 * v14 + 8 * (_DWORD)v17 * v15);
              v22 = *(int64x2_t *)(v16 + 64);
              v21 = *(int64x2_t *)(v16 + 80);
              v23 = *(int64x2_t *)(v16 + 32);
              v24 = *(int64x2_t *)(v16 + 48);
              v26 = *(int64x2_t *)(v16 + 96);
              v25 = *(int64x2_t *)(v16 + 112);
              v28 = *(int64x2_t *)(v16 + 160);
              v27 = *(int64x2_t *)(v16 + 176);
              v29 = *(int64x2_t *)(v16 + 128);
              v30 = *(int64x2_t *)(v16 + 144);
              v31 = vzip2q_s64(*(int64x2_t *)v16, v24);
              *v20 = vzip1q_s64(*(int64x2_t *)v16, v24);
              v20[1] = vzip1q_s64(v26, v30);
              v32 = (int64x2_t *)((char *)v20 + 8 * v17);
              *v32 = v31;
              v32[1] = vzip2q_s64(v26, v30);
              v33 = &v20[v17];
              *v33 = vzip1q_s64(v19, v22);
              v33[1] = vzip1q_s64(v25, v28);
              v34 = (int64x2_t *)((char *)v20 + 24 * v17);
              *v34 = vzip2q_s64(v19, v22);
              v34[1] = vzip2q_s64(v25, v28);
              v35 = &v20[2 * v17];
              *v35 = vzip1q_s64(v23, v21);
              v35[1] = vzip1q_s64(v29, v27);
              v36 = (int64x2_t *)((char *)v20 + 40 * v17);
              *v36 = vzip2q_s64(v23, v21);
              v36[1] = vzip2q_s64(v29, v27);
LABEL_16:
              if (v12 == v11)
                break;
              goto LABEL_19;
            }
            v37 = *(int64x2_t *)v16;
            v38 = (int64x2_t *)((char *)v18 + 8 * v15 + 8 * (_DWORD)v17 * v14);
            v39 = *(int64x2_t *)(v16 + 32);
            v40 = *(_OWORD *)(v16 + 48);
            v41 = *(_OWORD *)(v16 + 64);
            v42 = *(_OWORD *)(v16 + 80);
            v43 = *(int64x2_t *)(v16 + 96);
            v44 = *(int64x2_t *)(v16 + 112);
            v45 = *(int64x2_t *)(v16 + 128);
            v46 = *(_OWORD *)(v16 + 144);
            v47 = *(_OWORD *)(v16 + 160);
            v48 = *(_OWORD *)(v16 + 176);
            v38[1] = *(int64x2_t *)(v16 + 16);
            v38[2] = v39;
            *v38 = v37;
            v49 = &v38->i8[8 * v17];
            *((_OWORD *)v49 + 1) = v41;
            *((_OWORD *)v49 + 2) = v42;
            *(_OWORD *)v49 = v40;
            v50 = &v38[v17];
            v50[1] = v44;
            v50[2] = v45;
            *v50 = v43;
            v51 = &v38->i8[24 * v17];
            *((_OWORD *)v51 + 1) = v47;
            *((_OWORD *)v51 + 2) = v48;
            *(_OWORD *)v51 = v46;
            if (v12 == v11)
              break;
LABEL_19:
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v52 = *a3;
        v53 = a3[1];
        if (*a3 != v53)
        {
          v54 = *a4;
          v55 = *(_QWORD *)(result + 88);
          v56 = (*(_DWORD *)(result + 112) * v54);
          v57 = v55 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v54) + v56);
          v58 = v55 + 16 * v56;
          do
          {
            if (v58 == v57)
              break;
            v59 = *v52;
            while (*(_DWORD *)v58 < v59)
            {
              v58 += 16;
              if (v58 == v57)
                goto LABEL_23;
            }
            if (*(_DWORD *)v58 == v59)
            {
              v60 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v58 + 8));
              if (v60 == *(int8x16_t **)a2)
              {
                v70 = v60[10];
                v69 = v60[11];
                v68 = v60[8];
                v67 = v60[9];
                v66 = v60[6];
                v65 = v60[7];
                v64 = v60[4];
                v63 = v60[5];
                v62 = v60[2];
                v61 = v60[3];
              }
              else
              {
                v62 = v60[2];
                v61 = v60[3];
                v64 = v60[4];
                v63 = v60[5];
                v66 = v60[6];
                v65 = v60[7];
                v68 = v60[8];
                v67 = v60[9];
                v70 = v60[10];
                v69 = v60[11];
              }
              v72 = *v60;
              v71 = v60[1];
              v73 = *(unsigned int *)(a2 + 16);
              v62.i64[1] = vextq_s8(v62, v62, 8uLL).u64[0];
              v71.i64[1] = vextq_s8(v71, v71, 8uLL).u64[0];
              v72.i64[1] = vextq_s8(v72, v72, 8uLL).u64[0];
              v63.i64[1] = vextq_s8(v63, v63, 8uLL).u64[0];
              v64.i64[1] = vextq_s8(v64, v64, 8uLL).u64[0];
              v61.i64[1] = vextq_s8(v61, v61, 8uLL).u64[0];
              v68.i64[1] = vextq_s8(v68, v68, 8uLL).u64[0];
              v65.i64[1] = vextq_s8(v65, v65, 8uLL).u64[0];
              v66.i64[1] = vextq_s8(v66, v66, 8uLL).u64[0];
              v69.i64[1] = vextq_s8(v69, v69, 8uLL).u64[0];
              v70.i64[1] = vextq_s8(v70, v70, 8uLL).u64[0];
              v74 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v52[1] + (_DWORD)v73 * a4[1]));
              v67.i64[1] = vextq_s8(v67, v67, 8uLL).u64[0];
              *v74 = v72;
              v74[1] = v71;
              v74[2] = v62;
              v75 = (int8x16_t *)((char *)v74 + 8 * v73);
              *v75 = v61;
              v75[1] = v64;
              v75[2] = v63;
              v76 = &v74[v73];
              *v76 = v66;
              v76[1] = v65;
              v76[2] = v68;
              v77 = (int8x16_t *)((char *)v74 + 24 * v73);
              *v77 = v67;
              v77[1] = v70;
              v77[2] = v69;
            }
            if (v58 == v57)
              break;
            v52 += 2;
          }
          while (v52 != v53);
        }
LABEL_23:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_20F5A3718(uint64_t result, uint64_t a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t *v18;
  int64x2_t v19;
  int64x2_t *v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t *v30;
  int64x2_t *v31;
  int64x2_t *v32;
  int64x2_t *v33;
  int64x2_t *v34;
  int64x2_t v35;
  int64x2_t *v36;
  int64x2_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  __int8 *v44;
  int64x2_t *v45;
  unsigned int *v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  int8x16_t *v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int8x16_t v65;
  int8x16_t v66;
  uint64_t v67;
  int8x16_t *v68;
  int8x16_t *v69;
  int8x16_t *v70;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v8 = *a4;
          v9 = *(_QWORD *)(result + 88);
          v10 = (*(_DWORD *)(result + 112) * v8);
          v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v8) + v10);
          v12 = v9 + 16 * v10;
          do
          {
            if (v12 == v11)
              break;
            v13 = *v6;
            while (*(_DWORD *)v12 != v13)
            {
              if (*(_DWORD *)v12 > v13)
                goto LABEL_16;
              v12 += 16;
              if (v12 == v11)
                goto LABEL_5;
            }
            v14 = a4[1];
            v15 = v6[1];
            v16 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v12 + 8);
            v17 = *(unsigned int *)(a2 + 16);
            v18 = *(int8x16_t **)a2;
            if (v14 < v15)
            {
              v19 = *(int64x2_t *)(v16 + 16);
              v20 = (int64x2_t *)((char *)v18 + 8 * v14 + 8 * (_DWORD)v17 * v15);
              v22 = *(int64x2_t *)(v16 + 64);
              v21 = *(int64x2_t *)(v16 + 80);
              v23 = *(int64x2_t *)(v16 + 32);
              v24 = *(int64x2_t *)(v16 + 48);
              v26 = *(_OWORD *)(v16 + 112);
              v25 = *(_OWORD *)(v16 + 128);
              v27 = *(_OWORD *)(v16 + 96);
              v28 = vzip1q_s64(*(int64x2_t *)v16, v24);
              v29 = vzip2q_s64(*(int64x2_t *)v16, v24);
              v20[1].i64[0] = v27;
              *v20 = v28;
              v30 = (int64x2_t *)((char *)v20 + 8 * v17);
              *v30 = v29;
              v30[1].i64[0] = *((_QWORD *)&v27 + 1);
              v31 = &v20[v17];
              v31[1].i64[0] = v26;
              *v31 = vzip1q_s64(v19, v22);
              v32 = (int64x2_t *)((char *)v20 + 24 * v17);
              v32[1].i64[0] = *((_QWORD *)&v26 + 1);
              *v32 = vzip2q_s64(v19, v22);
              v33 = &v20[2 * v17];
              v33[1].i64[0] = v25;
              *v33 = vzip1q_s64(v23, v21);
              v34 = (int64x2_t *)((char *)v20 + 40 * v17);
              v34[1].i64[0] = *((_QWORD *)&v25 + 1);
              *v34 = vzip2q_s64(v23, v21);
LABEL_16:
              if (v12 == v11)
                break;
              goto LABEL_19;
            }
            v35 = *(int64x2_t *)v16;
            v36 = (int64x2_t *)((char *)v18 + 8 * v15 + 8 * (_DWORD)v17 * v14);
            v37 = *(int64x2_t *)(v16 + 32);
            v38 = *(_OWORD *)(v16 + 48);
            v39 = *(_OWORD *)(v16 + 64);
            v40 = *(_OWORD *)(v16 + 80);
            v41 = *(int64x2_t *)(v16 + 96);
            v42 = *(int64x2_t *)(v16 + 112);
            v43 = *(int64x2_t *)(v16 + 128);
            v36[1] = *(int64x2_t *)(v16 + 16);
            v36[2] = v37;
            *v36 = v35;
            v44 = &v36->i8[8 * v17];
            *((_OWORD *)v44 + 1) = v39;
            *((_OWORD *)v44 + 2) = v40;
            *(_OWORD *)v44 = v38;
            v45 = &v36[v17];
            v45[1] = v42;
            v45[2] = v43;
            *v45 = v41;
            if (v12 == v11)
              break;
LABEL_19:
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v46 = *a3;
        v47 = a3[1];
        if (*a3 != v47)
        {
          v48 = *a4;
          v49 = *(_QWORD *)(result + 88);
          v50 = (*(_DWORD *)(result + 112) * v48);
          v51 = v49 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v48) + v50);
          v52 = v49 + 16 * v50;
          do
          {
            if (v52 == v51)
              break;
            v53 = *v46;
            while (*(_DWORD *)v52 < v53)
            {
              v52 += 16;
              if (v52 == v51)
                goto LABEL_23;
            }
            if (*(_DWORD *)v52 == v53)
            {
              v54 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v52 + 8));
              if (v54 == *(int8x16_t **)a2)
              {
                v59 = v54[7];
                v61 = v54[8];
                v65 = v54[5];
                v60 = v54[6];
                v57 = v54[3];
                v66 = v54[4];
                v55 = v54[1];
                v58 = v54[2];
                v62 = vextq_s8(v61, v61, 8uLL).u64[0];
                v63 = vextq_s8(v59, v59, 8uLL).u64[0];
                v64 = vextq_s8(v60, v60, 8uLL).u64[0];
                v56 = *v54;
              }
              else
              {
                v56 = *v54;
                v55 = v54[1];
                v58 = v54[2];
                v57 = v54[3];
                v60 = v54[6];
                v59 = v54[7];
                v61 = v54[8];
                v62 = vextq_s8(v61, v61, 8uLL).u64[0];
                v63 = vextq_s8(v59, v59, 8uLL).u64[0];
                v64 = vextq_s8(v60, v60, 8uLL).u64[0];
                v66 = v54[4];
                v65 = v54[5];
              }
              v67 = *(unsigned int *)(a2 + 16);
              v58.i64[1] = vextq_s8(v58, v58, 8uLL).u64[0];
              v55.i64[1] = vextq_s8(v55, v55, 8uLL).u64[0];
              v56.i64[1] = vextq_s8(v56, v56, 8uLL).u64[0];
              v65.i64[1] = vextq_s8(v65, v65, 8uLL).u64[0];
              v66.i64[1] = vextq_s8(v66, v66, 8uLL).u64[0];
              v57.i64[1] = vextq_s8(v57, v57, 8uLL).u64[0];
              v61.i64[1] = v62;
              v59.i64[1] = v63;
              v60.i64[1] = v64;
              v68 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v46[1] + (_DWORD)v67 * a4[1]));
              *v68 = v56;
              v68[1] = v55;
              v68[2] = v58;
              v69 = (int8x16_t *)((char *)v68 + 8 * v67);
              *v69 = v57;
              v69[1] = v66;
              v69[2] = v65;
              v70 = &v68[v67];
              *v70 = v60;
              v70[1] = v59;
              v70[2] = v61;
            }
            if (v52 == v51)
              break;
            v46 += 2;
          }
          while (v46 != v47);
        }
LABEL_23:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_20F5A39FC(uint64_t result, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int8x16_t v37;
  unint64_t v38;
  int8x16_t v39;
  unint64_t v40;
  int8x16_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v8 = *a4;
          v9 = *(_QWORD *)(result + 88);
          v10 = (*(_DWORD *)(result + 112) * v8);
          v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v8) + v10);
          v12 = v9 + 16 * v10;
          do
          {
            if (v12 == v11)
              break;
            v13 = *v6;
            while (*(_DWORD *)v12 != v13)
            {
              if (*(_DWORD *)v12 > v13)
                goto LABEL_16;
              v12 += 16;
              if (v12 == v11)
                goto LABEL_5;
            }
            v14 = a4[1];
            v15 = v6[1];
            v16 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v12 + 8);
            v17 = *((unsigned int *)a2 + 4);
            v18 = *a2;
            v19 = *(_QWORD *)(v16 + 24);
            if (v14 < v15)
            {
              v20 = (_OWORD *)(v18 + 8 * (v14 + (_DWORD)v17 * v15));
              v21 = *(_OWORD *)v16;
              v22 = *(_OWORD *)(v16 + 32);
              v20[1] = *(_OWORD *)(v16 + 16);
              v20[2] = v22;
              *v20 = v21;
LABEL_16:
              if (v12 == v11)
                break;
              goto LABEL_19;
            }
            v23 = (_QWORD *)(v18 + 8 * (v15 + (_DWORD)v17 * v14));
            v24 = *(_QWORD *)(v16 + 8);
            v25 = *(_QWORD *)(v16 + 16);
            v26 = *(_QWORD *)(v16 + 32);
            v27 = *(_QWORD *)(v16 + 40);
            *v23 = *(_QWORD *)v16;
            v23[v17] = v24;
            v23[2 * v17] = v25;
            v23[3 * v17] = v19;
            v23[4 * v17] = v26;
            v23[5 * v17] = v27;
            if (v12 == v11)
              break;
LABEL_19:
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v28 = *a3;
        v29 = a3[1];
        if (*a3 != v29)
        {
          v30 = *a4;
          v31 = *(_QWORD *)(result + 88);
          v32 = (*(_DWORD *)(result + 112) * v30);
          v33 = v31 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v30) + v32);
          v34 = v31 + 16 * v32;
          do
          {
            if (v34 == v33)
              break;
            v35 = *v28;
            while (*(_DWORD *)v34 < v35)
            {
              v34 += 16;
              if (v34 == v33)
                goto LABEL_23;
            }
            if (*(_DWORD *)v34 == v35)
            {
              v36 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v34 + 8);
              if (v36 == *a2)
              {
                v39 = *(int8x16_t *)(v36 + 16);
                v41 = *(int8x16_t *)(v36 + 32);
                v37 = *(int8x16_t *)v36;
                v42 = vextq_s8(v41, v41, 8uLL).u64[0];
                v40 = vextq_s8(v39, v39, 8uLL).u64[0];
                v38 = vextq_s8(v37, v37, 8uLL).u64[0];
              }
              else
              {
                v37.i64[0] = *(_QWORD *)v36;
                v38 = *(_QWORD *)(v36 + 8);
                v39.i64[0] = *(_QWORD *)(v36 + 16);
                v40 = *(_QWORD *)(v36 + 24);
                v41.i64[0] = *(_QWORD *)(v36 + 32);
                v42 = *(_QWORD *)(v36 + 40);
              }
              v43 = *((unsigned int *)a2 + 4);
              v44 = (_QWORD *)(*a2 + 8 * (v28[1] + (_DWORD)v43 * a4[1]));
              *v44 = v37.i64[0];
              v44[v43] = v38;
              v44[2 * v43] = v39.i64[0];
              v44[3 * v43] = v40;
              v44[4 * v43] = v41.i64[0];
              v44[5 * v43] = v42;
            }
            if (v34 == v33)
              break;
            v28 += 2;
          }
          while (v28 != v29);
        }
LABEL_23:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_20F5A3C44(uint64_t result, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int8x16_t v42;
  unint64_t v43;
  int8x16_t v44;
  unint64_t v45;
  int8x16_t v46;
  unint64_t v47;
  int8x16_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v8 = *a4;
          v9 = *(_QWORD *)(result + 88);
          v10 = (*(_DWORD *)(result + 112) * v8);
          v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v8) + v10);
          v12 = v9 + 16 * v10;
          do
          {
            if (v12 == v11)
              break;
            v13 = *v6;
            while (*(_DWORD *)v12 != v13)
            {
              if (*(_DWORD *)v12 > v13)
                goto LABEL_16;
              v12 += 16;
              if (v12 == v11)
                goto LABEL_5;
            }
            v14 = a4[1];
            v15 = v6[1];
            v16 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v12 + 8);
            v17 = *((unsigned int *)a2 + 4);
            v18 = *a2;
            v19 = *(_QWORD *)(v16 + 24);
            if (v14 < v15)
            {
              v20 = v18 + 8 * (v14 + (_DWORD)v17 * v15);
              v21 = *(_OWORD *)v16;
              v22 = *(_OWORD *)(v16 + 16);
              v23 = *(_OWORD *)(v16 + 32);
              v24 = *(_OWORD *)(v16 + 48);
              *(_QWORD *)(v20 + 64) = *(_QWORD *)(v16 + 64);
              *(_OWORD *)(v20 + 32) = v23;
              *(_OWORD *)(v20 + 48) = v24;
              *(_OWORD *)v20 = v21;
              *(_OWORD *)(v20 + 16) = v22;
LABEL_16:
              if (v12 == v11)
                break;
              goto LABEL_19;
            }
            v25 = *(_QWORD *)(v16 + 8);
            v26 = (_QWORD *)(v18 + 8 * (v15 + (_DWORD)v17 * v14));
            v27 = *(_QWORD *)(v16 + 16);
            v28 = *(_QWORD *)(v16 + 32);
            v29 = *(_QWORD *)(v16 + 40);
            v30 = *(_QWORD *)(v16 + 48);
            v31 = *(_QWORD *)(v16 + 56);
            v32 = *(_QWORD *)(v16 + 64);
            *v26 = *(_QWORD *)v16;
            v26[v17] = v25;
            v26[2 * v17] = v27;
            v26[3 * v17] = v19;
            v26[4 * v17] = v28;
            v26[5 * v17] = v29;
            v26[6 * v17] = v30;
            v26[7 * v17] = v31;
            v26[8 * v17] = v32;
            if (v12 == v11)
              break;
LABEL_19:
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v33 = *a3;
        v34 = a3[1];
        if (*a3 != v34)
        {
          v35 = *a4;
          v36 = *(_QWORD *)(result + 88);
          v37 = (*(_DWORD *)(result + 112) * v35);
          v38 = v36 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v35) + v37);
          v39 = v36 + 16 * v37;
          do
          {
            if (v39 == v38)
              break;
            v40 = *v33;
            while (*(_DWORD *)v39 < v40)
            {
              v39 += 16;
              if (v39 == v38)
                goto LABEL_23;
            }
            if (*(_DWORD *)v39 == v40)
            {
              v41 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v39 + 8);
              if (v41 == *a2)
              {
                v50 = *(_QWORD *)(v41 + 64);
                v46 = *(int8x16_t *)(v41 + 32);
                v48 = *(int8x16_t *)(v41 + 48);
                v42 = *(int8x16_t *)v41;
                v44 = *(int8x16_t *)(v41 + 16);
                v49 = vextq_s8(v48, v48, 8uLL).u64[0];
                v47 = vextq_s8(v46, v46, 8uLL).u64[0];
                v45 = vextq_s8(v44, v44, 8uLL).u64[0];
                v43 = vextq_s8(v42, v42, 8uLL).u64[0];
              }
              else
              {
                v42.i64[0] = *(_QWORD *)v41;
                v43 = *(_QWORD *)(v41 + 8);
                v44.i64[0] = *(_QWORD *)(v41 + 16);
                v45 = *(_QWORD *)(v41 + 24);
                v46.i64[0] = *(_QWORD *)(v41 + 32);
                v47 = *(_QWORD *)(v41 + 40);
                v48.i64[0] = *(_QWORD *)(v41 + 48);
                v49 = *(_QWORD *)(v41 + 56);
                v50 = *(_QWORD *)(v41 + 64);
              }
              v51 = *((unsigned int *)a2 + 4);
              v52 = (_QWORD *)(*a2 + 8 * (v33[1] + (_DWORD)v51 * a4[1]));
              *v52 = v42.i64[0];
              v52[v51] = v43;
              v52[2 * v51] = v44.i64[0];
              v52[3 * v51] = v45;
              v52[4 * v51] = v46.i64[0];
              v52[5 * v51] = v47;
              v52[6 * v51] = v48.i64[0];
              v52[7 * v51] = v49;
              v52[8 * v51] = v50;
            }
            if (v39 == v38)
              break;
            v33 += 2;
          }
          while (v33 != v34);
        }
LABEL_23:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_20F5A3EF4(uint64_t result, uint64_t a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v8 = *a4;
          v9 = *(_QWORD *)(result + 88);
          v10 = (*(_DWORD *)(result + 112) * v8);
          v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v8) + v10);
          v12 = v9 + 16 * v10;
          do
          {
            if (v12 == v11)
              break;
            v13 = *v6;
            while (*(_DWORD *)v12 != v13)
            {
              if (*(_DWORD *)v12 > v13)
                goto LABEL_20;
              v12 += 16;
              if (v12 == v11)
                goto LABEL_5;
            }
            v14 = a4[1];
            v15 = v6[1];
            v16 = v14 <= v15 ? v6[1] : a4[1];
            if (v14 >= v15)
              v14 = v6[1];
            *(_QWORD *)(*(_QWORD *)a2 + 8 * (v14 + *(_DWORD *)(a2 + 16) * v16)) = *(_QWORD *)(*(_QWORD *)(result + 16)
                                                                                              + 8
                                                                                              * *(_QWORD *)(v12 + 8));
LABEL_20:
            if (v12 == v11)
              break;
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v17 = *a3;
        v18 = a3[1];
        if (*a3 != v18)
        {
          v19 = *a4;
          v20 = *(_QWORD *)(result + 88);
          v21 = (*(_DWORD *)(result + 112) * v19);
          v22 = v20 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v19) + v21);
          v23 = v20 + 16 * v21;
          do
          {
            if (v23 == v22)
              break;
            v24 = *v17;
            while (*(_DWORD *)v23 < v24)
            {
              v23 += 16;
              if (v23 == v22)
                goto LABEL_25;
            }
            if (*(_DWORD *)v23 == v24)
              *(_QWORD *)(*(_QWORD *)a2 + 8 * (v17[1] + *(_DWORD *)(a2 + 16) * a4[1])) = *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v23 + 8));
            if (v23 == v22)
              break;
            v17 += 2;
          }
          while (v17 != v18);
        }
LABEL_25:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_20F5A406C(uint64_t result, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int8x16_t *v33;
  int8x16_t v34;
  int8x16_t v35;
  uint64_t v36;
  _QWORD *v37;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v8 = *a4;
          v9 = *(_QWORD *)(result + 88);
          v10 = (*(_DWORD *)(result + 112) * v8);
          v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v8) + v10);
          v12 = v9 + 16 * v10;
          do
          {
            if (v12 == v11)
              break;
            v13 = *v6;
            while (*(_DWORD *)v12 != v13)
            {
              if (*(_DWORD *)v12 > v13)
                goto LABEL_16;
              v12 += 16;
              if (v12 == v11)
                goto LABEL_5;
            }
            v14 = a4[1];
            v15 = v6[1];
            v16 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v12 + 8);
            v17 = *((unsigned int *)a2 + 4);
            v18 = *a2;
            v19 = *(_QWORD *)(v16 + 24);
            if (v14 < v15)
            {
              v20 = (_OWORD *)(v18 + 8 * (v14 + (_DWORD)v17 * v15));
              v21 = *(_OWORD *)(v16 + 16);
              *v20 = *(_OWORD *)v16;
              v20[1] = v21;
LABEL_16:
              if (v12 == v11)
                break;
              goto LABEL_19;
            }
            v22 = (_QWORD *)(v18 + 8 * (v15 + (_DWORD)v17 * v14));
            v23 = *(_QWORD *)(v16 + 8);
            v24 = *(_QWORD *)(v16 + 16);
            *v22 = *(_QWORD *)v16;
            v22[v17] = v23;
            v22[2 * v17] = v24;
            v22[3 * v17] = v19;
            if (v12 == v11)
              break;
LABEL_19:
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v25 = *a3;
        v26 = a3[1];
        if (*a3 != v26)
        {
          v27 = *a4;
          v28 = *(_QWORD *)(result + 88);
          v29 = (*(_DWORD *)(result + 112) * v27);
          v30 = v28 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v27) + v29);
          v31 = v28 + 16 * v29;
          do
          {
            if (v31 == v30)
              break;
            v32 = *v25;
            while (*(_DWORD *)v31 < v32)
            {
              v31 += 16;
              if (v31 == v30)
                goto LABEL_23;
            }
            if (*(_DWORD *)v31 == v32)
            {
              v33 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v31 + 8));
              v34 = *v33;
              v35 = v33[1];
              v36 = *((unsigned int *)a2 + 4);
              v37 = (_QWORD *)(*a2 + 8 * (v25[1] + (_DWORD)v36 * a4[1]));
              *v37 = v33->i64[0];
              v37[v36] = vextq_s8(v34, v34, 8uLL).u64[0];
              v37[2 * v36] = v35.i64[0];
              v37[3 * v36] = vextq_s8(v35, v35, 8uLL).u64[0];
            }
            if (v31 == v30)
              break;
            v25 += 2;
          }
          while (v25 != v26);
        }
LABEL_23:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_20F5A4278(uint64_t result, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int8x16_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v8 = *a4;
          v9 = *(_QWORD *)(result + 88);
          v10 = (*(_DWORD *)(result + 112) * v8);
          v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v8) + v10);
          v12 = v9 + 16 * v10;
          do
          {
            if (v12 == v11)
              break;
            v13 = *v6;
            while (*(_DWORD *)v12 != v13)
            {
              if (*(_DWORD *)v12 > v13)
                goto LABEL_16;
              v12 += 16;
              if (v12 == v11)
                goto LABEL_5;
            }
            v14 = a4[1];
            v15 = v6[1];
            v16 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v12 + 8);
            v17 = *((unsigned int *)a2 + 4);
            v18 = *a2;
            if (v14 < v15)
            {
              v19 = v18 + 8 * (v14 + (_DWORD)v17 * v15);
              v20 = *(_OWORD *)v16;
              *(_QWORD *)(v19 + 16) = *(_QWORD *)(v16 + 16);
              *(_OWORD *)v19 = v20;
LABEL_16:
              if (v12 == v11)
                break;
              goto LABEL_19;
            }
            v21 = (_QWORD *)(v18 + 8 * (v15 + (_DWORD)v17 * v14));
            v22 = *(_QWORD *)(v16 + 8);
            v23 = *(_QWORD *)(v16 + 16);
            *v21 = *(_QWORD *)v16;
            v21[v17] = v22;
            v21[2 * v17] = v23;
            if (v12 == v11)
              break;
LABEL_19:
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v24 = *a3;
        v25 = a3[1];
        if (*a3 != v25)
        {
          v26 = *a4;
          v27 = *(_QWORD *)(result + 88);
          v28 = (*(_DWORD *)(result + 112) * v26);
          v29 = v27 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v26) + v28);
          v30 = v27 + 16 * v28;
          do
          {
            if (v30 == v29)
              break;
            v31 = *v24;
            while (*(_DWORD *)v30 < v31)
            {
              v30 += 16;
              if (v30 == v29)
                goto LABEL_23;
            }
            if (*(_DWORD *)v30 == v31)
            {
              v32 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v30 + 8);
              if (v32 == *a2)
              {
                v35 = *(_QWORD *)(v32 + 16);
                v33 = *(int8x16_t *)v32;
                v34 = vextq_s8(v33, v33, 8uLL).u64[0];
              }
              else
              {
                v33.i64[0] = *(_QWORD *)v32;
                v34 = *(_QWORD *)(v32 + 8);
                v35 = *(_QWORD *)(v32 + 16);
              }
              v36 = *((unsigned int *)a2 + 4);
              v37 = (_QWORD *)(*a2 + 8 * (v24[1] + (_DWORD)v36 * a4[1]));
              *v37 = v33.i64[0];
              v37[v36] = v34;
              v37[2 * v36] = v35;
            }
            if (v30 == v29)
              break;
            v24 += 2;
          }
          while (v24 != v25);
        }
LABEL_23:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_20F5A445C(uint64_t result, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  int64x2_t *v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t *v51;
  int64x2_t *v52;
  int64x2_t *v53;
  int64x2_t *v54;
  int64x2_t *v55;
  int64x2_t *v56;
  int64x2_t *v57;
  int64x2_t *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  int64x2_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int8x16_t *v139;
  uint64_t v140;
  int8x16_t *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  unint64_t v158;
  int8x16_t v159;
  unint64_t v160;
  int8x16_t v161;
  __int128 v162;
  __int128 v163;
  int8x16_t v164;
  int8x16_t v165;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v8 = *a4;
          v9 = *(_QWORD *)(result + 88);
          v10 = (*(_DWORD *)(result + 112) * v8);
          v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v8) + v10);
          v12 = v9 + 16 * v10;
          do
          {
            if (v12 == v11)
              break;
            v13 = *v6;
            while (*(_DWORD *)v12 != v13)
            {
              if (*(_DWORD *)v12 > v13)
                goto LABEL_16;
              v12 += 16;
              if (v12 == v11)
                goto LABEL_5;
            }
            v14 = a4[1];
            v15 = v6[1];
            v16 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v12 + 8);
            v17 = *((unsigned int *)a2 + 4);
            v18 = *a2;
            if (v14 < v15)
            {
              v19.i64[0] = *(_QWORD *)(v16 + 64);
              v20 = (int64x2_t *)(v18 + 8 * (v14 + (_DWORD)v17 * v15));
              v22 = *(int64x2_t *)(v16 + 32);
              v21 = *(int64x2_t *)(v16 + 48);
              v23 = *(int64x2_t *)(v16 + 16);
              v24 = *(int64x2_t *)(v16 + 120);
              v25 = *(int64x2_t *)(v16 + 104);
              v26 = *(int64x2_t *)(v16 + 88);
              v27 = *(int64x2_t *)(v16 + 72);
              v28.i64[0] = *(_QWORD *)(v16 + 208);
              v30 = *(int64x2_t *)(v16 + 176);
              v29 = *(int64x2_t *)(v16 + 192);
              v32 = *(int64x2_t *)(v16 + 144);
              v31 = *(int64x2_t *)(v16 + 160);
              v33 = *(int64x2_t *)(v16 + 216);
              v34 = *(int64x2_t *)(v16 + 264);
              v35 = *(int64x2_t *)(v16 + 248);
              v36 = *(int64x2_t *)(v16 + 232);
              v37.i64[0] = *(_QWORD *)(v16 + 352);
              v39 = *(int64x2_t *)(v16 + 320);
              v38 = *(int64x2_t *)(v16 + 336);
              v41 = *(int64x2_t *)(v16 + 288);
              v40 = *(int64x2_t *)(v16 + 304);
              v42 = *(int64x2_t *)(v16 + 392);
              v43 = *(int64x2_t *)(v16 + 408);
              v44 = *(int64x2_t *)(v16 + 376);
              v45 = vzip1q_s64(*(int64x2_t *)v16, v27);
              v46 = vzip1q_s64(v41, *(int64x2_t *)(v16 + 360));
              v47 = vzip1q_s64(v32, v33);
              v48 = vzip2q_s64(*(int64x2_t *)v16, v27);
              v49 = vzip2q_s64(v32, v33);
              v50 = vzip2q_s64(v41, *(int64x2_t *)(v16 + 360));
              v19.i64[1] = *(_QWORD *)(v16 + 136);
              v28.i64[1] = *(_QWORD *)(v16 + 280);
              v37.i64[1] = *(_QWORD *)(v16 + 424);
              v20[1] = v47;
              v20[2] = v46;
              *v20 = v45;
              v51 = (int64x2_t *)((char *)v20 + 8 * v17);
              v51[1] = v49;
              v51[2] = v50;
              *v51 = v48;
              v52 = &v20[v17];
              v52[1] = vzip1q_s64(v31, v36);
              v52[2] = vzip1q_s64(v40, v44);
              *v52 = vzip1q_s64(v23, v26);
              v53 = (int64x2_t *)((char *)v20 + 24 * v17);
              v53[1] = vzip2q_s64(v31, v36);
              v53[2] = vzip2q_s64(v40, v44);
              *v53 = vzip2q_s64(v23, v26);
              v54 = &v20[2 * v17];
              v54[1] = vzip1q_s64(v30, v35);
              v54[2] = vzip1q_s64(v39, v42);
              *v54 = vzip1q_s64(v22, v25);
              v55 = (int64x2_t *)((char *)v20 + 40 * v17);
              v55[1] = vzip2q_s64(v30, v35);
              v55[2] = vzip2q_s64(v39, v42);
              *v55 = vzip2q_s64(v22, v25);
              v56 = &v20[3 * v17];
              v56[1] = vzip1q_s64(v29, v34);
              v56[2] = vzip1q_s64(v38, v43);
              *v56 = vzip1q_s64(v21, v24);
              v57 = (int64x2_t *)((char *)v20 + 56 * v17);
              v57[1] = vzip2q_s64(v29, v34);
              v57[2] = vzip2q_s64(v38, v43);
              *v57 = vzip2q_s64(v21, v24);
              v58 = &v20[4 * v17];
              v58[1] = v28;
              v58[2] = v37;
              *v58 = v19;
LABEL_16:
              if (v12 == v11)
                break;
              goto LABEL_19;
            }
            v59 = *(_QWORD *)(v16 + 64);
            v60 = v18 + 8 * (v15 + (_DWORD)v17 * v14);
            v61 = *(_OWORD *)(v16 + 48);
            v62 = *(int64x2_t *)v16;
            v63 = *(_OWORD *)(v16 + 16);
            v64 = *(_OWORD *)(v16 + 72);
            v65 = *(_OWORD *)(v16 + 88);
            v66 = *(_OWORD *)(v16 + 104);
            v67 = *(_OWORD *)(v16 + 120);
            v68 = *(_QWORD *)(v16 + 136);
            v69 = *(_OWORD *)(v16 + 144);
            v70 = *(_OWORD *)(v16 + 160);
            v71 = *(_OWORD *)(v16 + 176);
            v72 = *(_OWORD *)(v16 + 192);
            v73 = *(_QWORD *)(v16 + 208);
            v74 = *(_OWORD *)(v16 + 232);
            v75 = *(_OWORD *)(v16 + 248);
            v76 = *(_OWORD *)(v16 + 216);
            v77 = *(_OWORD *)(v16 + 264);
            v78 = *(_QWORD *)(v16 + 280);
            v79 = *(_OWORD *)(v16 + 288);
            v80 = *(_OWORD *)(v16 + 304);
            v81 = *(_OWORD *)(v16 + 320);
            v82 = *(_OWORD *)(v16 + 336);
            v83 = *(_QWORD *)(v16 + 352);
            v84 = *(_OWORD *)(v16 + 360);
            v85 = *(_OWORD *)(v16 + 376);
            v86 = *(_OWORD *)(v16 + 392);
            v87 = *(_OWORD *)(v16 + 408);
            v88 = *(_QWORD *)(v16 + 424);
            *(_OWORD *)(v60 + 32) = *(_OWORD *)(v16 + 32);
            *(_OWORD *)(v60 + 48) = v61;
            *(_QWORD *)(v60 + 64) = v59;
            *(int64x2_t *)v60 = v62;
            *(_OWORD *)(v60 + 16) = v63;
            v89 = v60 + 8 * v17;
            *(_QWORD *)(v89 + 64) = v68;
            *(_OWORD *)(v89 + 32) = v66;
            *(_OWORD *)(v89 + 48) = v67;
            *(_OWORD *)v89 = v64;
            *(_OWORD *)(v89 + 16) = v65;
            v90 = v60 + 16 * v17;
            *(_QWORD *)(v90 + 64) = v73;
            *(_OWORD *)(v90 + 32) = v71;
            *(_OWORD *)(v90 + 48) = v72;
            *(_OWORD *)v90 = v69;
            *(_OWORD *)(v90 + 16) = v70;
            v91 = v60 + 24 * v17;
            *(_QWORD *)(v91 + 64) = v78;
            *(_OWORD *)(v91 + 32) = v75;
            *(_OWORD *)(v91 + 48) = v77;
            *(_OWORD *)v91 = v76;
            *(_OWORD *)(v91 + 16) = v74;
            v92 = v60 + 32 * v17;
            *(_QWORD *)(v92 + 64) = v83;
            *(_OWORD *)(v92 + 32) = v81;
            *(_OWORD *)(v92 + 48) = v82;
            *(_OWORD *)v92 = v79;
            *(_OWORD *)(v92 + 16) = v80;
            v93 = v60 + 40 * v17;
            *(_QWORD *)(v93 + 64) = v88;
            *(_OWORD *)(v93 + 32) = v86;
            *(_OWORD *)(v93 + 48) = v87;
            *(_OWORD *)v93 = v84;
            *(_OWORD *)(v93 + 16) = v85;
            if (v12 == v11)
              break;
LABEL_19:
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v94 = *a3;
        v95 = a3[1];
        if (*a3 != v95)
        {
          v96 = *a4;
          v97 = *(_QWORD *)(result + 88);
          v98 = (*(_DWORD *)(result + 112) * v96);
          v99 = v97 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v96) + v98);
          v100 = v97 + 16 * v98;
          do
          {
            if (v100 == v99)
              break;
            v101 = *v94;
            while (*(_DWORD *)v100 < v101)
            {
              v100 += 16;
              if (v100 == v99)
                goto LABEL_23;
            }
            if (*(_DWORD *)v100 == v101)
            {
              v102 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v100 + 8);
              if (v102 == *a2)
              {
                v118 = *(int8x16_t *)(v102 + 336);
                v120 = *(int8x16_t *)(v102 + 304);
                v119 = *(int8x16_t *)(v102 + 320);
                v155 = *(int8x16_t *)(v102 + 400);
                v156 = *(int8x16_t *)(v102 + 416);
                v130 = vextq_s8(v156, v156, 8uLL).u64[0];
                v161 = *(int8x16_t *)(v102 + 352);
                *(_QWORD *)&v162 = vextq_s8(v155, v155, 8uLL).u64[0];
                v121 = *(int8x16_t *)(v102 + 288);
                v164 = *(int8x16_t *)(v102 + 368);
                v165 = *(int8x16_t *)(v102 + 384);
                *(_QWORD *)&v117 = vextq_s8(v165, v165, 8uLL).u64[0];
                *(_QWORD *)&v131 = vextq_s8(v164, v164, 8uLL).u64[0];
                *(_QWORD *)&v132 = vextq_s8(v161, v161, 8uLL).u64[0];
                v146 = vextq_s8(v118, v118, 8uLL).u64[0];
                v145 = vextq_s8(v119, v119, 8uLL).u64[0];
                v144 = vextq_s8(v120, v120, 8uLL).u64[0];
                v114 = *(int8x16_t *)(v102 + 176);
                v113 = *(int8x16_t *)(v102 + 192);
                v143 = vextq_s8(v121, v121, 8uLL).u64[0];
                v153 = *(int8x16_t *)(v102 + 272);
                v154 = *(int8x16_t *)(v102 + 256);
                v159 = *(int8x16_t *)(v102 + 208);
                v160 = vextq_s8(v153, v153, 8uLL).u64[0];
                *(_QWORD *)&v163 = vextq_s8(v154, v154, 8uLL).u64[0];
                v112 = *(int8x16_t *)(v102 + 144);
                v111 = *(int8x16_t *)(v102 + 160);
                v151 = *(int8x16_t *)(v102 + 224);
                v152 = *(int8x16_t *)(v102 + 240);
                *(_QWORD *)&v116 = vextq_s8(v152, v152, 8uLL).u64[0];
                *(_QWORD *)&v115 = vextq_s8(v151, v151, 8uLL).u64[0];
                *(_QWORD *)&v133 = vextq_s8(v159, v159, 8uLL).u64[0];
                v122 = vextq_s8(v113, v113, 8uLL).u64[0];
                v123 = vextq_s8(v114, v114, 8uLL).u64[0];
                v124 = vextq_s8(v111, v111, 8uLL).u64[0];
                v125 = vextq_s8(v112, v112, 8uLL).u64[0];
                v149 = *(int8x16_t *)(v102 + 112);
                v150 = *(int8x16_t *)(v102 + 128);
                v158 = vextq_s8(v150, v150, 8uLL).u64[0];
                *(_QWORD *)&v110 = vextq_s8(v149, v149, 8uLL).u64[0];
                v105 = *(int8x16_t *)(v102 + 48);
                v147 = *(int8x16_t *)(v102 + 80);
                v148 = *(int8x16_t *)(v102 + 96);
                *(_QWORD *)&v109 = vextq_s8(v148, v148, 8uLL).u64[0];
                *(_QWORD *)&v108 = vextq_s8(v147, v147, 8uLL).u64[0];
                v157 = *(int8x16_t *)(v102 + 64);
                *(_QWORD *)&v107 = vextq_s8(v157, v157, 8uLL).u64[0];
                v103 = *(int8x16_t *)(v102 + 16);
                v106 = *(int8x16_t *)(v102 + 32);
                v126 = vextq_s8(v105, v105, 8uLL).u64[0];
                v127 = vextq_s8(v106, v106, 8uLL).u64[0];
                v104 = *(int8x16_t *)v102;
                v128 = vextq_s8(v103, v103, 8uLL).u64[0];
                v129 = vextq_s8(v104, v104, 8uLL).u64[0];
              }
              else
              {
                v104 = *(int8x16_t *)v102;
                v103 = *(int8x16_t *)(v102 + 16);
                v106 = *(int8x16_t *)(v102 + 32);
                v105 = *(int8x16_t *)(v102 + 48);
                v107 = *(_OWORD *)(v102 + 72);
                v108 = *(_OWORD *)(v102 + 88);
                v109 = *(_OWORD *)(v102 + 104);
                v110 = *(_OWORD *)(v102 + 120);
                v112 = *(int8x16_t *)(v102 + 144);
                v111 = *(int8x16_t *)(v102 + 160);
                v114 = *(int8x16_t *)(v102 + 176);
                v113 = *(int8x16_t *)(v102 + 192);
                v150.i64[0] = *(_QWORD *)(v102 + 128);
                v115 = *(_OWORD *)(v102 + 232);
                v149.i64[0] = *(_QWORD *)(v102 + 112);
                v116 = *(_OWORD *)(v102 + 248);
                v148.i64[0] = *(_QWORD *)(v102 + 96);
                v147.i64[0] = *(_QWORD *)(v102 + 80);
                v154.i64[0] = *(_QWORD *)(v102 + 256);
                v152.i64[0] = *(_QWORD *)(v102 + 240);
                v151.i64[0] = *(_QWORD *)(v102 + 224);
                v163 = *(_OWORD *)(v102 + 264);
                v153.i64[0] = *(_QWORD *)(v102 + 272);
                v117 = *(_OWORD *)(v102 + 392);
                v162 = *(_OWORD *)(v102 + 408);
                v156.i64[0] = *(_QWORD *)(v102 + 416);
                v155.i64[0] = *(_QWORD *)(v102 + 400);
                v119 = *(int8x16_t *)(v102 + 320);
                v118 = *(int8x16_t *)(v102 + 336);
                v164.i64[0] = *(_QWORD *)(v102 + 368);
                v165.i64[0] = *(_QWORD *)(v102 + 384);
                v145 = vextq_s8(v119, v119, 8uLL).u64[0];
                v146 = vextq_s8(v118, v118, 8uLL).u64[0];
                v121 = *(int8x16_t *)(v102 + 288);
                v120 = *(int8x16_t *)(v102 + 304);
                v143 = vextq_s8(v121, v121, 8uLL).u64[0];
                v144 = vextq_s8(v120, v120, 8uLL).u64[0];
                v158 = *(_QWORD *)(v102 + 136);
                v122 = vextq_s8(v113, v113, 8uLL).u64[0];
                v157.i64[0] = *(_QWORD *)(v102 + 64);
                v123 = vextq_s8(v114, v114, 8uLL).u64[0];
                v124 = vextq_s8(v111, v111, 8uLL).u64[0];
                v160 = *(_QWORD *)(v102 + 280);
                v125 = vextq_s8(v112, v112, 8uLL).u64[0];
                v159.i64[0] = *(_QWORD *)(v102 + 208);
                v126 = vextq_s8(v105, v105, 8uLL).u64[0];
                v127 = vextq_s8(v106, v106, 8uLL).u64[0];
                v128 = vextq_s8(v103, v103, 8uLL).u64[0];
                v129 = vextq_s8(v104, v104, 8uLL).u64[0];
                v161.i64[0] = *(_QWORD *)(v102 + 352);
                v130 = *(_QWORD *)(v102 + 424);
                v131 = *(_OWORD *)(v102 + 376);
                v132 = *(_OWORD *)(v102 + 360);
                v133 = *(_OWORD *)(v102 + 216);
              }
              v105.i64[1] = v126;
              v106.i64[1] = v127;
              v103.i64[1] = v128;
              v104.i64[1] = v129;
              *((_QWORD *)&v110 + 1) = v150.i64[0];
              *((_QWORD *)&v109 + 1) = v149.i64[0];
              *((_QWORD *)&v108 + 1) = v148.i64[0];
              *((_QWORD *)&v107 + 1) = v147.i64[0];
              v113.i64[1] = v122;
              v114.i64[1] = v123;
              v111.i64[1] = v124;
              v112.i64[1] = v125;
              *(_QWORD *)&v135 = v162;
              *(_QWORD *)&v134 = v163;
              *((_QWORD *)&v134 + 1) = v153.i64[0];
              *((_QWORD *)&v116 + 1) = v154.i64[0];
              *((_QWORD *)&v115 + 1) = v152.i64[0];
              *((_QWORD *)&v133 + 1) = v151.i64[0];
              v118.i64[1] = v146;
              v119.i64[1] = v145;
              v120.i64[1] = v144;
              v121.i64[1] = v143;
              *((_QWORD *)&v135 + 1) = v156.i64[0];
              *((_QWORD *)&v117 + 1) = v155.i64[0];
              v136 = *((unsigned int *)a2 + 4);
              *((_QWORD *)&v131 + 1) = v165.i64[0];
              *((_QWORD *)&v132 + 1) = v164.i64[0];
              v137 = *a2 + 8 * (v94[1] + (_DWORD)v136 * a4[1]);
              *(int8x16_t *)v137 = v104;
              *(int8x16_t *)(v137 + 16) = v103;
              *(_QWORD *)(v137 + 64) = v157.i64[0];
              *(int8x16_t *)(v137 + 32) = v106;
              *(int8x16_t *)(v137 + 48) = v105;
              v138 = v137 + 8 * v136;
              *(_OWORD *)v138 = v107;
              *(_OWORD *)(v138 + 16) = v108;
              *(_QWORD *)(v138 + 64) = v158;
              *(_OWORD *)(v138 + 32) = v109;
              *(_OWORD *)(v138 + 48) = v110;
              v139 = (int8x16_t *)(v137 + 16 * v136);
              *v139 = v112;
              v139[1] = v111;
              v139[4].i64[0] = v159.i64[0];
              v139[2] = v114;
              v139[3] = v113;
              v140 = v137 + 24 * v136;
              *(_OWORD *)v140 = v133;
              *(_OWORD *)(v140 + 16) = v115;
              *(_QWORD *)(v140 + 64) = v160;
              *(_OWORD *)(v140 + 32) = v116;
              *(_OWORD *)(v140 + 48) = v134;
              v141 = (int8x16_t *)(v137 + 32 * v136);
              *v141 = v121;
              v141[1] = v120;
              v141[4].i64[0] = v161.i64[0];
              v141[2] = v119;
              v141[3] = v118;
              v142 = v137 + 40 * v136;
              *(_OWORD *)v142 = v132;
              *(_OWORD *)(v142 + 16) = v131;
              *(_QWORD *)(v142 + 64) = v130;
              *(_OWORD *)(v142 + 32) = v117;
              *(_OWORD *)(v142 + 48) = v135;
            }
            if (v100 == v99)
              break;
            v94 += 2;
          }
          while (v94 != v95);
        }
LABEL_23:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_20F5A4B40(uint64_t result, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  unint64_t v34;
  int64x2_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int64x2_t v50;
  int8x16_t v51;
  int8x16_t v52;
  uint64_t v53;
  uint64_t v54;
  int8x16_t v55;
  __int128 v56;
  uint64_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  unint64_t v62;
  unint64_t v63;
  int8x16_t v64;
  int8x16_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int8x16_t v80;
  uint64_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  uint64_t v98;
  int8x16_t v99;
  int8x16_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int8x16_t *v120;
  uint64_t v121;
  unsigned int *v122;
  unsigned int *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  __int128 v142;
  __int128 v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int8x16_t *v182;
  uint64_t v183;
  int8x16_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  int8x16_t v196;
  unint64_t v197;
  int8x16_t v198;
  __int128 v199;
  unint64_t v200;
  unint64_t v201;
  int64x2_t v202;
  unint64_t v203;
  unint64_t v204;
  int8x16_t v205;
  unint64_t v206;
  int8x16_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  int8x16_t v211;
  unint64_t v212;
  int8x16_t v213;
  unint64_t v214;
  int8x16_t v215;
  unint64_t v216;
  int8x16_t v217;
  unint64_t v218;
  int8x16_t v219;
  unint64_t v220;
  int8x16_t v221;
  unint64_t v222;
  int8x16_t v223;
  unint64_t v224;
  int8x16_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  int8x16_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  int8x16_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  int8x16_t v241;
  unint64_t v242;
  __int128 v243;
  __int128 v244;
  unint64_t v245;
  int8x16_t v246;
  uint64_t v247;
  __int128 v248;
  unint64_t v249;
  int8x16_t v250;
  uint64_t v251;
  int8x16_t v252;
  uint64_t v253;
  __int128 v254;
  __int128 v255;
  uint64_t v256;
  int8x16_t v257;
  int64x2_t v258;
  uint64_t v259;
  __int128 v260;
  uint64_t v261;
  __int128 v262;
  int64x2_t v263;
  uint64_t v264;
  __int128 v265;
  int64x2_t v266;
  uint64_t v267;
  __int128 v268;
  int64x2_t v269;
  uint64_t v270;
  __int128 v271;
  int64x2_t v272;
  uint64_t v273;
  __int128 v274;
  int64x2_t v275;
  unint64_t v276;
  __int128 v277;
  __int128 v278;
  uint64_t v279;
  int64x2_t v280;
  __int128 v281;
  int64x2_t v282;
  uint64_t v283;
  __int128 v284;
  int8x16_t v285;
  uint64_t v286;
  uint64_t v287;
  int8x16_t v288;
  uint64_t v289;
  __int128 v290;
  int8x16_t v291;
  int8x16_t v292;
  int8x16_t v293;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v8 = *a4;
          v9 = *(_QWORD *)(result + 88);
          v10 = (*(_DWORD *)(result + 112) * v8);
          v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v8) + v10);
          v12 = v9 + 16 * v10;
          do
          {
            if (v12 == v11)
              break;
            v13 = *v6;
            while (*(_DWORD *)v12 != v13)
            {
              if (*(_DWORD *)v12 > v13)
                goto LABEL_18;
              v12 += 16;
              if (v12 == v11)
                goto LABEL_5;
            }
            v14 = a4[1];
            v15 = v6[1];
            v16 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v12 + 8);
            v17 = *((unsigned int *)a2 + 4);
            v18 = *a2;
            if (v14 >= v15)
            {
              v287 = *(_QWORD *)(v16 + 64);
              v53 = v18 + 8 * (v15 + (_DWORD)v17 * v14);
              v75 = *(int8x16_t *)(v16 + 32);
              v277 = *(_OWORD *)(v16 + 48);
              v280 = *(int64x2_t *)v16;
              v290 = *(_OWORD *)(v16 + 88);
              v292 = *(int8x16_t *)(v16 + 72);
              v284 = *(_OWORD *)(v16 + 104);
              v59 = *(int8x16_t *)(v16 + 120);
              v81 = *(_QWORD *)(v16 + 136);
              v264 = *(_QWORD *)(v16 + 208);
              v82 = *(int8x16_t *)(v16 + 176);
              v83 = *(int8x16_t *)(v16 + 192);
              v60 = *(int8x16_t *)(v16 + 144);
              v58 = *(int8x16_t *)(v16 + 160);
              v249 = *(_QWORD *)(v16 + 280);
              v64 = *(int8x16_t *)(v16 + 248);
              v84 = *(int8x16_t *)(v16 + 232);
              v85 = *(int8x16_t *)(v16 + 216);
              v86 = *(int8x16_t *)(v16 + 264);
              v256 = *(_QWORD *)(v16 + 352);
              v87 = *(int8x16_t *)(v16 + 320);
              v61 = *(int8x16_t *)(v16 + 336);
              v65 = *(int8x16_t *)(v16 + 288);
              v88 = *(int8x16_t *)(v16 + 304);
              v247 = *(_QWORD *)(v16 + 424);
              v89 = *(int8x16_t *)(v16 + 392);
              v74 = *(int8x16_t *)(v16 + 408);
              v72 = *(int8x16_t *)(v16 + 360);
              v73 = *(int8x16_t *)(v16 + 376);
              v259 = *(_QWORD *)(v16 + 496);
              v76 = *(int8x16_t *)(v16 + 464);
              v90 = *(int8x16_t *)(v16 + 480);
              v92 = *(int8x16_t *)(v16 + 432);
              v91 = *(int8x16_t *)(v16 + 448);
              v245 = *(_QWORD *)(v16 + 568);
              v49 = *(int8x16_t *)(v16 + 536);
              v52 = *(int8x16_t *)(v16 + 552);
              v93 = *(int8x16_t *)(v16 + 504);
              v80 = *(int8x16_t *)(v16 + 520);
              v261 = *(_QWORD *)(v16 + 640);
              v94 = *(int8x16_t *)(v16 + 608);
              v95 = *(int8x16_t *)(v16 + 624);
              v96 = *(int8x16_t *)(v16 + 576);
              v97 = *(int8x16_t *)(v16 + 592);
              *(_OWORD *)(v53 + 16) = *(_OWORD *)(v16 + 16);
              *(int8x16_t *)(v53 + 32) = v75;
              *(_OWORD *)(v53 + 48) = v277;
              *(_QWORD *)(v53 + 64) = v287;
              *(int64x2_t *)v53 = v280;
              v98 = v53 + 8 * v17;
              *(_QWORD *)(v98 + 64) = v81;
              v99 = v96;
              *(_OWORD *)(v98 + 32) = v284;
              *(int8x16_t *)(v98 + 48) = v59;
              *(_OWORD *)(v98 + 16) = v290;
              *(int8x16_t *)v98 = v292;
              v289 = v83.i64[0];
              v292.i64[0] = v58.i64[0];
              v59.i64[0] = v82.i64[0];
              v232 = vextq_s8(v82, v82, 8uLL).u64[0];
              v234 = vextq_s8(v83, v83, 8uLL).u64[0];
              v62 = vextq_s8(v58, v58, 8uLL).u64[0];
              v58.i64[0] = v60.i64[0];
              v68 = vextq_s8(v60, v60, 8uLL).u64[0];
              v276 = v64.i64[0];
              v279 = v84.i64[0];
              v69 = vextq_s8(v64, v64, 8uLL).u64[0];
              v228 = vextq_s8(v84, v84, 8uLL).u64[0];
              v230 = v61.i64[0];
              v283 = v88.i64[0];
              v286 = v85.i64[0];
              v63 = vextq_s8(v85, v85, 8uLL).u64[0];
              v60.i64[0] = v86.i64[0];
              v226 = vextq_s8(v86, v86, 8uLL).u64[0];
              v224 = vextq_s8(v61, v61, 8uLL).u64[0];
              v61.i64[0] = v87.i64[0];
              v222 = vextq_s8(v87, v87, 8uLL).u64[0];
              v67 = vextq_s8(v88, v88, 8uLL).u64[0];
              v251 = v65.i64[0];
              v70 = vextq_s8(v65, v65, 8uLL).u64[0];
              v64.i64[0] = v74.i64[0];
              v218 = vextq_s8(v74, v74, 8uLL).u64[0];
              v100 = v95;
              v65.i64[0] = v89.i64[0];
              v216 = vextq_s8(v89, v89, 8uLL).u64[0];
              v66 = v73.i64[0];
              v214 = vextq_s8(v73, v73, 8uLL).u64[0];
              v267 = v72.i64[0];
              v220 = vextq_s8(v72, v72, 8uLL).u64[0];
              v71 = v90.i64[0];
              v210 = vextq_s8(v90, v90, 8uLL).u64[0];
              v72.i64[0] = v76.i64[0];
              v208 = vextq_s8(v76, v76, 8uLL).u64[0];
              v73.i64[0] = v91.i64[0];
              v206 = vextq_s8(v91, v91, 8uLL).u64[0];
              v253 = v92.i64[0];
              v212 = vextq_s8(v92, v92, 8uLL).u64[0];
              v77 = vextq_s8(v52, v52, 8uLL).u64[0];
              v78 = vextq_s8(v49, v49, 8uLL).u64[0];
              v79 = vextq_s8(v80, v80, 8uLL).u64[0];
              v75.i64[0] = v93.i64[0];
              v204 = vextq_s8(v93, v93, 8uLL).u64[0];
              v74.i64[0] = v100.i64[0];
              v270 = v94.i64[0];
              v273 = v97.i64[0];
              v236 = vextq_s8(v100, v100, 8uLL).u64[0];
              v238 = vextq_s8(v94, v94, 8uLL).u64[0];
              v76.i64[0] = v99.i64[0];
              v240 = vextq_s8(v97, v97, 8uLL).u64[0];
              v242 = vextq_s8(v99, v99, 8uLL).u64[0];
            }
            else
            {
              v269 = *(int64x2_t *)(v16 + 48);
              v20 = *(int64x2_t *)(v16 + 16);
              v19 = *(int64x2_t *)(v16 + 32);
              v21 = *(int64x2_t *)(v16 + 120);
              v22 = *(int64x2_t *)(v16 + 104);
              v23 = *(int64x2_t *)(v16 + 88);
              v24 = *(int64x2_t *)(v16 + 72);
              v25 = *(int64x2_t *)(v16 + 176);
              v272 = *(int64x2_t *)(v16 + 192);
              v26 = *(int64x2_t *)(v16 + 144);
              v27 = *(int64x2_t *)(v16 + 160);
              v29 = *(int64x2_t *)(v16 + 320);
              v28 = *(int64x2_t *)(v16 + 336);
              v31 = *(int64x2_t *)(v16 + 288);
              v30 = *(int64x2_t *)(v16 + 304);
              v32 = *(int64x2_t *)(v16 + 448);
              v33 = *(int64x2_t *)(v16 + 464);
              v34 = vdupq_laneq_s64(v26, 1).u64[0];
              v64.i64[1] = *(_QWORD *)(v16 + 224);
              v35 = *(int64x2_t *)(v16 + 432);
              v275 = vzip1q_s64(v26, *(int64x2_t *)(v16 + 216));
              v36 = vdupq_laneq_s64(v31, 1).u64[0];
              v60.i64[1] = *(_QWORD *)(v16 + 368);
              v258 = vzip1q_s64(v35, *(int64x2_t *)(v16 + 504));
              v37 = vdupq_laneq_s64(v35, 1).u64[0];
              v58.i64[1] = *(_QWORD *)(v16 + 512);
              v263 = vzip1q_s64(v31, *(int64x2_t *)(v16 + 360));
              v266 = vzip1q_s64(*(int64x2_t *)v16, v24);
              v282 = vzip2q_s64(*(int64x2_t *)v16, v24);
              v292 = (int8x16_t)vzip1q_s64(v27, *(int64x2_t *)(v16 + 232));
              v35.i64[0] = vdupq_laneq_s64(v27, 1).u64[0];
              v35.i64[1] = *(_QWORD *)(v16 + 240);
              v202 = vzip1q_s64(v30, *(int64x2_t *)(v16 + 376));
              v38 = vdupq_laneq_s64(v30, 1).u64[0];
              v75.i64[1] = *(_QWORD *)(v16 + 384);
              v39 = (int8x16_t)vzip1q_s64(v20, v23);
              v40 = (int8x16_t)vzip2q_s64(v20, v23);
              v41 = (int8x16_t)vzip1q_s64(v32, *(int64x2_t *)(v16 + 520));
              v32.i64[0] = vdupq_laneq_s64(v32, 1).u64[0];
              v72.i64[1] = *(_QWORD *)(v16 + 528);
              v42 = (int8x16_t)vzip1q_s64(v25, *(int64x2_t *)(v16 + 248));
              v43.i64[0] = vdupq_laneq_s64(v25, 1).u64[0];
              v43.i64[1] = *(_QWORD *)(v16 + 256);
              v61 = (int8x16_t)vzip1q_s64(v19, v22);
              v44 = (int8x16_t)vzip2q_s64(v19, v22);
              v45 = (int8x16_t)vzip1q_s64(v29, *(int64x2_t *)(v16 + 392));
              v29.i64[0] = vdupq_laneq_s64(v29, 1).u64[0];
              v73.i64[1] = *(_QWORD *)(v16 + 400);
              v46 = (int8x16_t)vzip1q_s64(v33, *(int64x2_t *)(v16 + 536));
              v33.i64[0] = vdupq_laneq_s64(v33, 1).u64[0];
              v33.i64[1] = *(_QWORD *)(v16 + 544);
              v47 = (int8x16_t)vzip1q_s64(v269, v21);
              v48 = (int8x16_t)vzip2q_s64(v269, v21);
              v74 = (int8x16_t)vzip1q_s64(v272, *(int64x2_t *)(v16 + 264));
              v19.i64[0] = vdupq_laneq_s64(v272, 1).u64[0];
              v19.i64[1] = *(_QWORD *)(v16 + 272);
              v76 = (int8x16_t)vzip1q_s64(v28, *(int64x2_t *)(v16 + 408));
              v49.i64[0] = vdupq_laneq_s64(v28, 1).u64[0];
              v49.i64[1] = *(_QWORD *)(v16 + 416);
              v50 = *(int64x2_t *)(v16 + 480);
              v51 = (int8x16_t)vzip1q_s64(v50, *(int64x2_t *)(v16 + 552));
              v52.i64[0] = vdupq_laneq_s64(v50, 1).u64[0];
              v52.i64[1] = *(_QWORD *)(v16 + 560);
              v53 = v18 + 8 * (v14 + (_DWORD)v17 * v15);
              v54 = *(_QWORD *)(v16 + 64);
              v242 = *(_QWORD *)(v16 + 136);
              v273 = *(_QWORD *)(v16 + 208);
              v240 = *(_QWORD *)(v16 + 280);
              v270 = *(_QWORD *)(v16 + 352);
              v238 = *(_QWORD *)(v16 + 424);
              v31.i64[0] = *(_QWORD *)(v16 + 496);
              v236 = *(_QWORD *)(v16 + 568);
              v261 = *(_QWORD *)(v16 + 640);
              v55 = *(int8x16_t *)(v16 + 608);
              v80 = *(int8x16_t *)(v16 + 624);
              v56 = *(_OWORD *)(v16 + 576);
              v65 = *(int8x16_t *)(v16 + 592);
              *(int64x2_t *)(v53 + 32) = v263;
              *(int64x2_t *)(v53 + 48) = v258;
              *(int64x2_t *)(v53 + 16) = v275;
              *(int64x2_t *)v53 = v266;
              v57 = v53 + 8 * v17;
              *(_QWORD *)(v53 + 64) = v56;
              *(_QWORD *)(v57 + 64) = *((_QWORD *)&v56 + 1);
              *(int8x16_t *)(v57 + 32) = v60;
              *(int8x16_t *)(v57 + 48) = v58;
              *(int64x2_t *)v57 = v282;
              *(int8x16_t *)(v57 + 16) = v64;
              v58.i64[0] = v39.i64[0];
              v286 = v40.i64[0];
              v289 = v41.i64[0];
              v234 = vextq_s8(v41, v41, 8uLL).u64[0];
              v59 = (int8x16_t)v202;
              v230 = v46.i64[0];
              v232 = vextq_s8(v59, v59, 8uLL).u64[0];
              v41.i64[0] = vextq_s8(v40, v40, 8uLL).u64[0];
              v60.i64[0] = v32.i64[0];
              v226 = vextq_s8(v72, v72, 8uLL).u64[0];
              v276 = v38;
              v279 = v35.i64[0];
              v40.i64[0] = vextq_s8(v75, v75, 8uLL).u64[0];
              v228 = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
              v264 = v65.i64[0];
              v267 = v44.i64[0];
              v249 = vextq_s8(v65, v65, 8uLL).u64[0];
              v251 = v61.i64[0];
              v283 = v42.i64[0];
              *(_QWORD *)&v56 = vextq_s8(v42, v42, 8uLL).u64[0];
              v75.i64[0] = vextq_s8(v61, v61, 8uLL).u64[0];
              v61.i64[0] = v45.i64[0];
              v222 = vextq_s8(v45, v45, 8uLL).u64[0];
              v224 = vextq_s8(v46, v46, 8uLL).u64[0];
              v62 = vextq_s8(v292, v292, 8uLL).u64[0];
              v220 = vextq_s8(v44, v44, 8uLL).u64[0];
              v63 = v41.i64[0];
              v64.i64[0] = v33.i64[0];
              v218 = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u64[0];
              v65.i64[0] = v29.i64[0];
              v216 = vextq_s8(v73, v73, 8uLL).u64[0];
              v66 = v43.i64[0];
              v214 = vextq_s8(v43, v43, 8uLL).u64[0];
              v67 = v56;
              v253 = v47.i64[0];
              v256 = v55.i64[0];
              *(_QWORD *)&v56 = vextq_s8(v55, v55, 8uLL).u64[0];
              v68 = vextq_s8(v39, v39, 8uLL).u64[0];
              v69 = v40.i64[0];
              v247 = v56;
              v212 = vextq_s8(v47, v47, 8uLL).u64[0];
              v70 = v75.i64[0];
              v71 = v51.i64[0];
              v210 = vextq_s8(v51, v51, 8uLL).u64[0];
              v72.i64[0] = v76.i64[0];
              v208 = vextq_s8(v76, v76, 8uLL).u64[0];
              v73.i64[0] = v74.i64[0];
              v206 = vextq_s8(v74, v74, 8uLL).u64[0];
              v74.i64[0] = v31.i64[0];
              v75.i64[0] = v48.i64[0];
              v204 = vextq_s8(v48, v48, 8uLL).u64[0];
              v76.i64[0] = v54;
              v77 = vextq_s8(v52, v52, 8uLL).u64[0];
              v78 = vextq_s8(v49, v49, 8uLL).u64[0];
              v79 = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
              v259 = v80.i64[0];
              v245 = vextq_s8(v80, v80, 8uLL).u64[0];
              v80.i64[0] = v19.i64[0];
            }
            v58.i64[1] = v68;
            *(_QWORD *)&v101 = v292.i64[0];
            *((_QWORD *)&v101 + 1) = v62;
            *(_QWORD *)&v102 = v230;
            v59.i64[1] = v232;
            *(_QWORD *)&v103 = v289;
            *((_QWORD *)&v103 + 1) = v234;
            v60.i64[1] = v226;
            *(_QWORD *)&v104 = v276;
            *(_QWORD *)&v105 = v279;
            *((_QWORD *)&v104 + 1) = v69;
            *((_QWORD *)&v105 + 1) = v228;
            *(_QWORD *)&v106 = v286;
            *((_QWORD *)&v106 + 1) = v63;
            *((_QWORD *)&v102 + 1) = v224;
            v61.i64[1] = v222;
            *(_QWORD *)&v107 = v283;
            *((_QWORD *)&v107 + 1) = v67;
            *(_QWORD *)&v108 = v251;
            *((_QWORD *)&v108 + 1) = v70;
            v64.i64[1] = v218;
            v65.i64[1] = v216;
            *(_QWORD *)&v109 = v66;
            *((_QWORD *)&v109 + 1) = v214;
            *(_QWORD *)&v110 = v267;
            *((_QWORD *)&v110 + 1) = v220;
            *(_QWORD *)&v111 = v71;
            *((_QWORD *)&v111 + 1) = v210;
            v72.i64[1] = v208;
            v73.i64[1] = v206;
            *(_QWORD *)&v112 = v253;
            *((_QWORD *)&v112 + 1) = v212;
            v52.i64[1] = v77;
            v49.i64[1] = v78;
            v80.i64[1] = v79;
            v75.i64[1] = v204;
            v74.i64[1] = v236;
            *(_QWORD *)&v113 = v270;
            *((_QWORD *)&v113 + 1) = v238;
            *(_QWORD *)&v114 = v273;
            *((_QWORD *)&v114 + 1) = v240;
            v76.i64[1] = v242;
            v115 = v53 + 16 * v17;
            *(int8x16_t *)v115 = v58;
            *(_OWORD *)(v115 + 16) = v101;
            *(int8x16_t *)(v115 + 32) = v59;
            *(_OWORD *)(v115 + 48) = v103;
            *(_QWORD *)(v115 + 64) = v264;
            v116 = v53 + 24 * v17;
            *(_QWORD *)(v116 + 64) = v249;
            *(_OWORD *)(v116 + 32) = v104;
            *(int8x16_t *)(v116 + 48) = v60;
            *(_OWORD *)v116 = v106;
            *(_OWORD *)(v116 + 16) = v105;
            v117 = v53 + 32 * v17;
            *(_QWORD *)(v117 + 64) = v256;
            *(int8x16_t *)(v117 + 32) = v61;
            *(_OWORD *)(v117 + 48) = v102;
            *(_OWORD *)v117 = v108;
            *(_OWORD *)(v117 + 16) = v107;
            v118 = v53 + 40 * v17;
            *(_QWORD *)(v118 + 64) = v247;
            *(int8x16_t *)(v118 + 32) = v65;
            *(int8x16_t *)(v118 + 48) = v64;
            *(_OWORD *)v118 = v110;
            *(_OWORD *)(v118 + 16) = v109;
            v119 = v53 + 48 * v17;
            *(_QWORD *)(v119 + 64) = v259;
            *(int8x16_t *)(v119 + 32) = v72;
            *(_OWORD *)(v119 + 48) = v111;
            *(_OWORD *)v119 = v112;
            *(int8x16_t *)(v119 + 16) = v73;
            v120 = (int8x16_t *)(v53 + 56 * v17);
            v120[4].i64[0] = v245;
            v120[2] = v49;
            v120[3] = v52;
            *v120 = v75;
            v120[1] = v80;
            v121 = v53 + (v17 << 6);
            *(_QWORD *)(v121 + 64) = v261;
            *(_OWORD *)(v121 + 32) = v113;
            *(int8x16_t *)(v121 + 48) = v74;
            *(int8x16_t *)v121 = v76;
            *(_OWORD *)(v121 + 16) = v114;
LABEL_18:
            if (v12 == v11)
              break;
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v122 = *a3;
        v123 = a3[1];
        if (*a3 != v123)
        {
          v124 = *a4;
          v125 = *(_QWORD *)(result + 88);
          v126 = (*(_DWORD *)(result + 112) * v124);
          v127 = v125 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v124) + v126);
          v128 = v125 + 16 * v126;
          do
          {
            if (v128 == v127)
              break;
            v129 = *v122;
            while (*(_DWORD *)v128 < v129)
            {
              v128 += 16;
              if (v128 == v127)
                goto LABEL_23;
            }
            if (*(_DWORD *)v128 == v129)
            {
              v130 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v128 + 8);
              if (v130 == *a2)
              {
                v291 = *(int8x16_t *)(v130 + 592);
                v293 = *(int8x16_t *)(v130 + 624);
                v203 = vextq_s8(v293, v293, 8uLL).u64[0];
                v285 = *(int8x16_t *)(v130 + 576);
                v288 = *(int8x16_t *)(v130 + 608);
                v201 = vextq_s8(v288, v288, 8uLL).u64[0];
                v200 = vextq_s8(v291, v291, 8uLL).u64[0];
                v197 = vextq_s8(v285, v285, 8uLL).u64[0];
                v221 = *(int8x16_t *)(v130 + 544);
                v223 = *(int8x16_t *)(v130 + 560);
                v239 = vextq_s8(v223, v223, 8uLL).u64[0];
                *(_QWORD *)&v265 = vextq_s8(v221, v221, 8uLL).u64[0];
                v217 = *(int8x16_t *)(v130 + 512);
                v219 = *(int8x16_t *)(v130 + 528);
                v257 = *(int8x16_t *)(v130 + 496);
                *(_QWORD *)&v260 = vextq_s8(v219, v219, 8uLL).u64[0];
                *(_QWORD *)&v268 = vextq_s8(v217, v217, 8uLL).u64[0];
                v148 = *(int8x16_t *)(v130 + 320);
                v147 = *(int8x16_t *)(v130 + 336);
                *(_QWORD *)&v262 = vextq_s8(v257, v257, 8uLL).u64[0];
                v250 = *(int8x16_t *)(v130 + 464);
                v252 = *(int8x16_t *)(v130 + 480);
                v195 = vextq_s8(v252, v252, 8uLL).u64[0];
                v194 = vextq_s8(v250, v250, 8uLL).u64[0];
                v151 = *(int8x16_t *)(v130 + 416);
                v145 = *(int8x16_t *)(v130 + 288);
                v144 = *(int8x16_t *)(v130 + 304);
                v246 = *(int8x16_t *)(v130 + 448);
                v193 = vextq_s8(v246, v246, 8uLL).u64[0];
                v241 = *(int8x16_t *)(v130 + 432);
                v192 = vextq_s8(v241, v241, 8uLL).u64[0];
                v235 = vextq_s8(v151, v151, 8uLL).u64[0];
                v237 = *(int8x16_t *)(v130 + 352);
                v149 = *(int8x16_t *)(v130 + 256);
                v213 = *(int8x16_t *)(v130 + 384);
                v215 = *(int8x16_t *)(v130 + 400);
                *(_QWORD *)&v281 = vextq_s8(v215, v215, 8uLL).u64[0];
                *(_QWORD *)&v278 = vextq_s8(v213, v213, 8uLL).u64[0];
                v209 = *(_QWORD *)(v130 + 272);
                v211 = *(int8x16_t *)(v130 + 368);
                *(_QWORD *)&v274 = vextq_s8(v211, v211, 8uLL).u64[0];
                *(_QWORD *)&v271 = vextq_s8(v237, v237, 8uLL).u64[0];
                v191 = vextq_s8(v147, v147, 8uLL).u64[0];
                v190 = vextq_s8(v148, v148, 8uLL).u64[0];
                v140 = *(int8x16_t *)(v130 + 192);
                v152 = vextq_s8(v144, v144, 8uLL).u64[0];
                v153 = vextq_s8(v145, v145, 8uLL).u64[0];
                v231 = *(int8x16_t *)(v130 + 208);
                v233 = vextq_s8(*(int8x16_t *)(v130 + 272), *(int8x16_t *)(v130 + 272), 8uLL).u64[0];
                v138 = *(int8x16_t *)(v130 + 160);
                v141 = *(int8x16_t *)(v130 + 176);
                *(_QWORD *)&v142 = vextq_s8(v149, v149, 8uLL).u64[0];
                v205 = *(int8x16_t *)(v130 + 224);
                v207 = *(int8x16_t *)(v130 + 240);
                *(_QWORD *)&v254 = vextq_s8(v207, v207, 8uLL).u64[0];
                *(_QWORD *)&v143 = vextq_s8(v205, v205, 8uLL).u64[0];
                v150 = *(int8x16_t *)(v130 + 128);
                v139 = *(int8x16_t *)(v130 + 144);
                *(_QWORD *)&v248 = vextq_s8(v231, v231, 8uLL).u64[0];
                v154 = vextq_s8(v140, v140, 8uLL).u64[0];
                v155 = vextq_s8(v141, v141, 8uLL).u64[0];
                v156 = vextq_s8(v138, v138, 8uLL).u64[0];
                v157 = vextq_s8(v139, v139, 8uLL).u64[0];
                v229 = vextq_s8(v150, v150, 8uLL).u64[0];
                v146 = *(int8x16_t *)(v130 + 80);
                v198 = *(int8x16_t *)(v130 + 112);
                *(_QWORD *)&v137 = vextq_s8(v198, v198, 8uLL).u64[0];
                v196 = *(int8x16_t *)(v130 + 96);
                *(_QWORD *)&v243 = vextq_s8(v196, v196, 8uLL).u64[0];
                *(_QWORD *)&v136 = vextq_s8(v146, v146, 8uLL).u64[0];
                v134 = *(int8x16_t *)(v130 + 32);
                v133 = *(int8x16_t *)(v130 + 48);
                v225 = *(int8x16_t *)(v130 + 64);
                *(_QWORD *)&v135 = vextq_s8(v225, v225, 8uLL).u64[0];
                v158 = vextq_s8(v133, v133, 8uLL).u64[0];
                v159 = vextq_s8(v134, v134, 8uLL).u64[0];
                v132 = *(int8x16_t *)v130;
                v131 = *(int8x16_t *)(v130 + 16);
              }
              else
              {
                v132 = *(int8x16_t *)v130;
                v131 = *(int8x16_t *)(v130 + 16);
                v134 = *(int8x16_t *)(v130 + 32);
                v133 = *(int8x16_t *)(v130 + 48);
                v135 = *(_OWORD *)(v130 + 72);
                v136 = *(_OWORD *)(v130 + 88);
                v137 = *(_OWORD *)(v130 + 120);
                v139 = *(int8x16_t *)(v130 + 144);
                v138 = *(int8x16_t *)(v130 + 160);
                v141 = *(int8x16_t *)(v130 + 176);
                v140 = *(int8x16_t *)(v130 + 192);
                v142 = *(_OWORD *)(v130 + 264);
                v143 = *(_OWORD *)(v130 + 232);
                v145 = *(int8x16_t *)(v130 + 288);
                v144 = *(int8x16_t *)(v130 + 304);
                v243 = *(_OWORD *)(v130 + 104);
                v198.i64[0] = *(_QWORD *)(v130 + 112);
                v196.i64[0] = *(_QWORD *)(v130 + 96);
                v146.i64[0] = *(_QWORD *)(v130 + 80);
                v148 = *(int8x16_t *)(v130 + 320);
                v147 = *(int8x16_t *)(v130 + 336);
                v254 = *(_OWORD *)(v130 + 248);
                v207.i64[0] = *(_QWORD *)(v130 + 240);
                v248 = *(_OWORD *)(v130 + 216);
                v205.i64[0] = *(_QWORD *)(v130 + 224);
                v209 = *(_QWORD *)(v130 + 272);
                v278 = *(_OWORD *)(v130 + 392);
                v281 = *(_OWORD *)(v130 + 408);
                v215.i64[0] = *(_QWORD *)(v130 + 400);
                v271 = *(_OWORD *)(v130 + 360);
                v274 = *(_OWORD *)(v130 + 376);
                v213.i64[0] = *(_QWORD *)(v130 + 384);
                v211.i64[0] = *(_QWORD *)(v130 + 368);
                v265 = *(_OWORD *)(v130 + 552);
                v268 = *(_OWORD *)(v130 + 520);
                v223.i64[0] = *(_QWORD *)(v130 + 560);
                v260 = *(_OWORD *)(v130 + 536);
                v262 = *(_OWORD *)(v130 + 504);
                v221.i64[0] = *(_QWORD *)(v130 + 544);
                v219.i64[0] = *(_QWORD *)(v130 + 528);
                v217.i64[0] = *(_QWORD *)(v130 + 512);
                v291 = *(int8x16_t *)(v130 + 592);
                v293 = *(int8x16_t *)(v130 + 624);
                v203 = vextq_s8(v293, v293, 8uLL).u64[0];
                v285 = *(int8x16_t *)(v130 + 576);
                v288 = *(int8x16_t *)(v130 + 608);
                v201 = vextq_s8(v288, v288, 8uLL).u64[0];
                v149.i64[0] = *(_QWORD *)(v130 + 256);
                v200 = vextq_s8(v291, v291, 8uLL).u64[0];
                v197 = vextq_s8(v285, v285, 8uLL).u64[0];
                v150.i64[0] = *(_QWORD *)(v130 + 128);
                v250 = *(int8x16_t *)(v130 + 464);
                v252 = *(int8x16_t *)(v130 + 480);
                v195 = vextq_s8(v252, v252, 8uLL).u64[0];
                v194 = vextq_s8(v250, v250, 8uLL).u64[0];
                v246 = *(int8x16_t *)(v130 + 448);
                v193 = vextq_s8(v246, v246, 8uLL).u64[0];
                v229 = *(_QWORD *)(v130 + 136);
                v241 = *(int8x16_t *)(v130 + 432);
                v192 = vextq_s8(v241, v241, 8uLL).u64[0];
                v151.i64[0] = *(_QWORD *)(v130 + 416);
                v191 = vextq_s8(v147, v147, 8uLL).u64[0];
                v225.i64[0] = *(_QWORD *)(v130 + 64);
                v190 = vextq_s8(v148, v148, 8uLL).u64[0];
                v233 = *(_QWORD *)(v130 + 280);
                v152 = vextq_s8(v144, v144, 8uLL).u64[0];
                v153 = vextq_s8(v145, v145, 8uLL).u64[0];
                v231.i64[0] = *(_QWORD *)(v130 + 208);
                v154 = vextq_s8(v140, v140, 8uLL).u64[0];
                v235 = *(_QWORD *)(v130 + 424);
                v155 = vextq_s8(v141, v141, 8uLL).u64[0];
                v156 = vextq_s8(v138, v138, 8uLL).u64[0];
                v237.i64[0] = *(_QWORD *)(v130 + 352);
                v157 = vextq_s8(v139, v139, 8uLL).u64[0];
                v239 = *(_QWORD *)(v130 + 568);
                v158 = vextq_s8(v133, v133, 8uLL).u64[0];
                v159 = vextq_s8(v134, v134, 8uLL).u64[0];
                v257.i64[0] = *(_QWORD *)(v130 + 496);
              }
              v227 = *(_QWORD *)(v130 + 640);
              v133.i64[1] = v158;
              v134.i64[1] = v159;
              v131.i64[1] = vextq_s8(v131, v131, 8uLL).u64[0];
              v132.i64[1] = vextq_s8(v132, v132, 8uLL).u64[0];
              *((_QWORD *)&v137 + 1) = v150.i64[0];
              v189 = v137;
              *(_QWORD *)&v160 = v243;
              *((_QWORD *)&v160 + 1) = v198.i64[0];
              *((_QWORD *)&v136 + 1) = v196.i64[0];
              v199 = v136;
              *((_QWORD *)&v135 + 1) = v146.i64[0];
              v140.i64[1] = v154;
              v141.i64[1] = v155;
              v138.i64[1] = v156;
              v139.i64[1] = v157;
              *((_QWORD *)&v142 + 1) = v209;
              v244 = v142;
              *(_QWORD *)&v161 = v254;
              *((_QWORD *)&v161 + 1) = v149.i64[0];
              *((_QWORD *)&v143 + 1) = v207.i64[0];
              v255 = v143;
              *(_QWORD *)&v162 = v248;
              *((_QWORD *)&v162 + 1) = v205.i64[0];
              v147.i64[1] = v191;
              v148.i64[1] = v190;
              v144.i64[1] = v152;
              v145.i64[1] = v153;
              *(_QWORD *)&v164 = v278;
              *(_QWORD *)&v163 = v281;
              *((_QWORD *)&v163 + 1) = v151.i64[0];
              *((_QWORD *)&v164 + 1) = v215.i64[0];
              *(_QWORD *)&v166 = v271;
              *(_QWORD *)&v165 = v274;
              *((_QWORD *)&v165 + 1) = v213.i64[0];
              *((_QWORD *)&v166 + 1) = v211.i64[0];
              *(_QWORD *)&v168 = v250.i64[0];
              *(_QWORD *)&v167 = v252.i64[0];
              *((_QWORD *)&v167 + 1) = v195;
              *((_QWORD *)&v168 + 1) = v194;
              *(_QWORD *)&v169 = v246.i64[0];
              *((_QWORD *)&v169 + 1) = v193;
              *(_QWORD *)&v170 = v241.i64[0];
              *((_QWORD *)&v170 + 1) = v192;
              *(_QWORD *)&v171 = v265;
              *(_QWORD *)&v172 = v268;
              *((_QWORD *)&v171 + 1) = v223.i64[0];
              *(_QWORD *)&v174 = v260;
              *(_QWORD *)&v173 = v262;
              *((_QWORD *)&v174 + 1) = v221.i64[0];
              *((_QWORD *)&v172 + 1) = v219.i64[0];
              *((_QWORD *)&v173 + 1) = v217.i64[0];
              *(_QWORD *)&v175 = v293.i64[0];
              *((_QWORD *)&v175 + 1) = v203;
              *(_QWORD *)&v176 = v288.i64[0];
              *((_QWORD *)&v176 + 1) = v201;
              *(_QWORD *)&v177 = v291.i64[0];
              *((_QWORD *)&v177 + 1) = v200;
              *(_QWORD *)&v178 = v285.i64[0];
              *((_QWORD *)&v178 + 1) = v197;
              v179 = *((unsigned int *)a2 + 4);
              v180 = *a2 + 8 * (v122[1] + (_DWORD)v179 * a4[1]);
              *(int8x16_t *)v180 = v132;
              *(int8x16_t *)(v180 + 16) = v131;
              *(_QWORD *)(v180 + 64) = v225.i64[0];
              *(int8x16_t *)(v180 + 32) = v134;
              *(int8x16_t *)(v180 + 48) = v133;
              v181 = v180 + 8 * v179;
              *(_OWORD *)v181 = v135;
              *(_OWORD *)(v181 + 16) = v199;
              *(_QWORD *)(v181 + 64) = v229;
              *(_OWORD *)(v181 + 32) = v160;
              *(_OWORD *)(v181 + 48) = v189;
              v182 = (int8x16_t *)(v180 + 16 * v179);
              *v182 = v139;
              v182[1] = v138;
              v182[4].i64[0] = v231.i64[0];
              v182[2] = v141;
              v182[3] = v140;
              v183 = v180 + 24 * v179;
              *(_OWORD *)v183 = v162;
              *(_OWORD *)(v183 + 16) = v255;
              *(_QWORD *)(v183 + 64) = v233;
              *(_OWORD *)(v183 + 32) = v161;
              *(_OWORD *)(v183 + 48) = v244;
              v184 = (int8x16_t *)(v180 + 32 * v179);
              *v184 = v145;
              v184[1] = v144;
              v184[4].i64[0] = v237.i64[0];
              v184[2] = v148;
              v184[3] = v147;
              v185 = v180 + 40 * v179;
              *(_OWORD *)v185 = v166;
              *(_OWORD *)(v185 + 16) = v165;
              *(_QWORD *)(v185 + 64) = v235;
              *(_OWORD *)(v185 + 32) = v164;
              *(_OWORD *)(v185 + 48) = v163;
              v186 = v180 + 48 * v179;
              *(_OWORD *)v186 = v170;
              *(_OWORD *)(v186 + 16) = v169;
              *(_QWORD *)(v186 + 64) = v257.i64[0];
              *(_OWORD *)(v186 + 32) = v168;
              *(_OWORD *)(v186 + 48) = v167;
              v187 = v180 + 56 * v179;
              *(_OWORD *)v187 = v173;
              *(_OWORD *)(v187 + 16) = v172;
              *(_QWORD *)(v187 + 64) = v239;
              *(_OWORD *)(v187 + 32) = v174;
              *(_OWORD *)(v187 + 48) = v171;
              v188 = v180 + (v179 << 6);
              *(_OWORD *)v188 = v178;
              *(_OWORD *)(v188 + 16) = v177;
              *(_QWORD *)(v188 + 64) = v227;
              *(_OWORD *)(v188 + 32) = v176;
              *(_OWORD *)(v188 + 48) = v175;
            }
            if (v128 == v127)
              break;
            v122 += 2;
          }
          while (v122 != v123);
        }
LABEL_23:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_20F5A58C4(uint64_t result, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  int8x16_t *v29;
  unsigned int *v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v8 = *a4;
          v9 = *(_QWORD *)(result + 88);
          v10 = (*(_DWORD *)(result + 112) * v8);
          v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v8) + v10);
          v12 = v9 + 16 * v10;
          do
          {
            if (v12 == v11)
              break;
            v13 = *v6;
            while (*(_DWORD *)v12 != v13)
            {
              if (*(_DWORD *)v12 > v13)
                goto LABEL_16;
              v12 += 16;
              if (v12 == v11)
                goto LABEL_5;
            }
            v14 = a4[1];
            v15 = v6[1];
            v16 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v12 + 8);
            v17 = *((unsigned int *)a2 + 4);
            v18 = *a2;
            v20 = *(int8x16_t *)(v16 + 32);
            v19 = *(int8x16_t *)(v16 + 48);
            v22 = *(int8x16_t *)v16;
            v21 = *(int8x16_t *)(v16 + 16);
            v23 = *(_QWORD *)(v16 + 64);
            v24 = vextq_s8(v19, v19, 8uLL).u64[0];
            v25 = vextq_s8(v20, v20, 8uLL).u64[0];
            v26 = vextq_s8(v21, v21, 8uLL).u64[0];
            v27 = vextq_s8(v22, v22, 8uLL).u64[0];
            if (v14 < v15)
            {
              v28 = (_QWORD *)(v18 + 8 * (v14 + (_DWORD)v17 * v15));
              *v28 = v22.i64[0];
              v28[v17] = v27;
              v28[2 * v17] = v21.i64[0];
              v28[3 * v17] = v26;
              v28[4 * v17] = v20.i64[0];
              v28[5 * v17] = v25;
              v28[6 * v17] = v19.i64[0];
              v28[7 * v17] = v24;
              v28[8 * v17] = v23;
LABEL_16:
              if (v12 == v11)
                break;
              goto LABEL_19;
            }
            v22.i64[1] = v27;
            v29 = (int8x16_t *)(v18 + 8 * (v15 + (_DWORD)v17 * v14));
            v21.i64[1] = v26;
            v20.i64[1] = v25;
            *v29 = v22;
            v29[1] = v21;
            v29[4].i64[0] = v23;
            v19.i64[1] = v24;
            v29[2] = v20;
            v29[3] = v19;
            if (v12 == v11)
              break;
LABEL_19:
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v30 = *a3;
        v31 = a3[1];
        if (*a3 != v31)
        {
          v32 = *a4;
          v33 = *(_QWORD *)(result + 88);
          v34 = (*(_DWORD *)(result + 112) * v32);
          v35 = v33 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v32) + v34);
          v36 = v33 + 16 * v34;
          do
          {
            if (v36 == v35)
              break;
            v37 = *v30;
            while (*(_DWORD *)v36 < v37)
            {
              v36 += 16;
              if (v36 == v35)
                goto LABEL_23;
            }
            if (*(_DWORD *)v36 == v37)
            {
              v38 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v36 + 8);
              v39 = *a2 + 8 * (v30[1] + *((_DWORD *)a2 + 4) * a4[1]);
              v40 = *(_QWORD *)(v38 + 64);
              v41 = *(_OWORD *)(v38 + 48);
              v42 = *(_OWORD *)v38;
              v43 = *(_OWORD *)(v38 + 16);
              *(_OWORD *)(v39 + 32) = *(_OWORD *)(v38 + 32);
              *(_OWORD *)(v39 + 48) = v41;
              *(_QWORD *)(v39 + 64) = v40;
              *(_OWORD *)v39 = v42;
              *(_OWORD *)(v39 + 16) = v43;
            }
            if (v36 == v35)
              break;
            v30 += 2;
          }
          while (v30 != v31);
        }
LABEL_23:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_20F5A5AEC(uint64_t result, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  int64x2_t *v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t *v38;
  int64x2_t *v39;
  int64x2_t *v40;
  int64x2_t *v41;
  int64x2_t *v42;
  int64x2_t *v43;
  int64x2_t *v44;
  int64x2_t *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  int64x2_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  unint64_t v88;
  unint64_t v89;
  int8x16_t v90;
  int8x16_t v91;
  unint64_t v92;
  int8x16_t v93;
  unint64_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  unint64_t v101;
  unint64_t v102;
  int8x16_t v103;
  unint64_t v104;
  unint64_t v105;
  int8x16_t v106;
  unint64_t v107;
  int8x16_t v108;
  int8x16_t v109;
  uint64_t v110;
  uint64_t v111;
  int8x16_t *v112;
  int8x16_t *v113;
  int8x16_t *v114;
  unint64_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v8 = *a4;
          v9 = *(_QWORD *)(result + 88);
          v10 = (*(_DWORD *)(result + 112) * v8);
          v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v8) + v10);
          v12 = v9 + 16 * v10;
          do
          {
            if (v12 == v11)
              break;
            v13 = *v6;
            while (*(_DWORD *)v12 != v13)
            {
              if (*(_DWORD *)v12 > v13)
                goto LABEL_16;
              v12 += 16;
              if (v12 == v11)
                goto LABEL_5;
            }
            v14 = a4[1];
            v15 = v6[1];
            v16 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v12 + 8);
            v17 = *((unsigned int *)a2 + 4);
            v18 = *a2;
            if (v14 < v15)
            {
              v19.i64[0] = *(_QWORD *)(v16 + 64);
              v20 = (int64x2_t *)(v18 + 8 * (v14 + (_DWORD)v17 * v15));
              v22 = *(int64x2_t *)(v16 + 32);
              v21 = *(int64x2_t *)(v16 + 48);
              v23 = *(int64x2_t *)(v16 + 16);
              v24 = *(int64x2_t *)(v16 + 120);
              v25 = *(int64x2_t *)(v16 + 104);
              v26 = *(int64x2_t *)(v16 + 88);
              v27 = *(int64x2_t *)(v16 + 72);
              v28.i64[0] = *(_QWORD *)(v16 + 208);
              v30 = *(int64x2_t *)(v16 + 176);
              v29 = *(int64x2_t *)(v16 + 192);
              v32 = *(int64x2_t *)(v16 + 144);
              v31 = *(int64x2_t *)(v16 + 160);
              v33 = *(int64x2_t *)(v16 + 216);
              v34 = *(int64x2_t *)(v16 + 264);
              v35 = *(int64x2_t *)(v16 + 248);
              v36 = *(int64x2_t *)(v16 + 232);
              v37 = vzip2q_s64(*(int64x2_t *)v16, v27);
              v19.i64[1] = *(_QWORD *)(v16 + 136);
              v28.i64[1] = *(_QWORD *)(v16 + 280);
              *v20 = vzip1q_s64(*(int64x2_t *)v16, v27);
              v20[1] = vzip1q_s64(v32, v33);
              v38 = (int64x2_t *)((char *)v20 + 8 * v17);
              *v38 = v37;
              v38[1] = vzip2q_s64(v32, v33);
              v39 = &v20[v17];
              *v39 = vzip1q_s64(v23, v26);
              v39[1] = vzip1q_s64(v31, v36);
              v40 = (int64x2_t *)((char *)v20 + 24 * v17);
              *v40 = vzip2q_s64(v23, v26);
              v40[1] = vzip2q_s64(v31, v36);
              v41 = &v20[2 * v17];
              *v41 = vzip1q_s64(v22, v25);
              v41[1] = vzip1q_s64(v30, v35);
              v42 = (int64x2_t *)((char *)v20 + 40 * v17);
              *v42 = vzip2q_s64(v22, v25);
              v42[1] = vzip2q_s64(v30, v35);
              v43 = &v20[3 * v17];
              *v43 = vzip1q_s64(v21, v24);
              v43[1] = vzip1q_s64(v29, v34);
              v44 = (int64x2_t *)((char *)v20 + 56 * v17);
              *v44 = vzip2q_s64(v21, v24);
              v44[1] = vzip2q_s64(v29, v34);
              v45 = &v20[4 * v17];
              *v45 = v19;
              v45[1] = v28;
LABEL_16:
              if (v12 == v11)
                break;
              goto LABEL_19;
            }
            v46 = *(_QWORD *)(v16 + 64);
            v47 = v18 + 8 * (v15 + (_DWORD)v17 * v14);
            v48 = *(_OWORD *)(v16 + 48);
            v49 = *(int64x2_t *)v16;
            v50 = *(_OWORD *)(v16 + 16);
            v51 = *(_OWORD *)(v16 + 72);
            v52 = *(_OWORD *)(v16 + 88);
            v53 = *(_OWORD *)(v16 + 104);
            v54 = *(_OWORD *)(v16 + 120);
            v55 = *(_QWORD *)(v16 + 136);
            v56 = *(_OWORD *)(v16 + 144);
            v57 = *(_OWORD *)(v16 + 160);
            v58 = *(_OWORD *)(v16 + 176);
            v59 = *(_OWORD *)(v16 + 192);
            v60 = *(_QWORD *)(v16 + 208);
            v61 = *(_OWORD *)(v16 + 232);
            v62 = *(_OWORD *)(v16 + 248);
            v63 = *(_OWORD *)(v16 + 216);
            v64 = *(_OWORD *)(v16 + 264);
            v65 = *(_QWORD *)(v16 + 280);
            *(_OWORD *)(v47 + 32) = *(_OWORD *)(v16 + 32);
            *(_OWORD *)(v47 + 48) = v48;
            *(_QWORD *)(v47 + 64) = v46;
            *(int64x2_t *)v47 = v49;
            *(_OWORD *)(v47 + 16) = v50;
            v66 = v47 + 8 * v17;
            *(_QWORD *)(v66 + 64) = v55;
            *(_OWORD *)(v66 + 32) = v53;
            *(_OWORD *)(v66 + 48) = v54;
            *(_OWORD *)v66 = v51;
            *(_OWORD *)(v66 + 16) = v52;
            v67 = v47 + 16 * v17;
            *(_QWORD *)(v67 + 64) = v60;
            *(_OWORD *)(v67 + 32) = v58;
            *(_OWORD *)(v67 + 48) = v59;
            *(_OWORD *)v67 = v56;
            *(_OWORD *)(v67 + 16) = v57;
            v68 = v47 + 24 * v17;
            *(_QWORD *)(v68 + 64) = v65;
            *(_OWORD *)(v68 + 32) = v62;
            *(_OWORD *)(v68 + 48) = v64;
            *(_OWORD *)v68 = v63;
            *(_OWORD *)(v68 + 16) = v61;
            if (v12 == v11)
              break;
LABEL_19:
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v69 = *a3;
        v70 = a3[1];
        if (*a3 != v70)
        {
          v71 = *a4;
          v72 = *(_QWORD *)(result + 88);
          v73 = (*(_DWORD *)(result + 112) * v71);
          v74 = v72 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v71) + v73);
          v75 = v72 + 16 * v73;
          do
          {
            if (v75 == v74)
              break;
            v76 = *v69;
            while (*(_DWORD *)v75 < v76)
            {
              v75 += 16;
              if (v75 == v74)
                goto LABEL_23;
            }
            if (*(_DWORD *)v75 == v76)
            {
              v77 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v75 + 8);
              if (v77 == *a2)
              {
                v108 = *(int8x16_t *)(v77 + 272);
                v109 = *(int8x16_t *)(v77 + 224);
                v83 = *(int8x16_t *)(v77 + 192);
                v103 = *(int8x16_t *)(v77 + 208);
                v90 = *(int8x16_t *)(v77 + 160);
                v84 = *(int8x16_t *)(v77 + 176);
                v95 = *(int8x16_t *)(v77 + 128);
                v91 = *(int8x16_t *)(v77 + 144);
                v115 = vextq_s8(v108, v108, 8uLL).u64[0];
                v116 = *(int8x16_t *)(v77 + 240);
                v117 = *(int8x16_t *)(v77 + 256);
                v106.i64[0] = vextq_s8(v117, v117, 8uLL).u64[0];
                v86.i64[0] = vextq_s8(v116, v116, 8uLL).u64[0];
                v87.i64[0] = vextq_s8(v109, v109, 8uLL).u64[0];
                v85.i64[0] = vextq_s8(v103, v103, 8uLL).u64[0];
                v88 = vextq_s8(v83, v83, 8uLL).u64[0];
                v89 = vextq_s8(v84, v84, 8uLL).u64[0];
                v92 = vextq_s8(v90, v90, 8uLL).u64[0];
                v99 = *(int8x16_t *)(v77 + 96);
                v97 = *(int8x16_t *)(v77 + 112);
                v94 = vextq_s8(v91, v91, 8uLL).u64[0];
                v101 = vextq_s8(v95, v95, 8uLL).u64[0];
                v93.i64[0] = vextq_s8(v97, v97, 8uLL).u64[0];
                v100 = *(int8x16_t *)(v77 + 80);
                v96.i64[0] = vextq_s8(v99, v99, 8uLL).u64[0];
                v98.i64[0] = vextq_s8(v100, v100, 8uLL).u64[0];
                v118 = *(int8x16_t *)(v77 + 64);
                v82.i64[0] = vextq_s8(v118, v118, 8uLL).u64[0];
                v80 = *(int8x16_t *)(v77 + 32);
                v81 = *(int8x16_t *)(v77 + 48);
                v102 = vextq_s8(v81, v81, 8uLL).u64[0];
                v104 = vextq_s8(v80, v80, 8uLL).u64[0];
                v79 = *(int8x16_t *)v77;
                v78 = *(int8x16_t *)(v77 + 16);
                v105 = vextq_s8(v78, v78, 8uLL).u64[0];
                v107 = vextq_s8(v79, v79, 8uLL).u64[0];
              }
              else
              {
                v118.i64[0] = *(_QWORD *)(v77 + 64);
                v79 = *(int8x16_t *)v77;
                v78 = *(int8x16_t *)(v77 + 16);
                v80 = *(int8x16_t *)(v77 + 32);
                v81 = *(int8x16_t *)(v77 + 48);
                v82 = *(int8x16_t *)(v77 + 72);
                v84 = *(int8x16_t *)(v77 + 176);
                v83 = *(int8x16_t *)(v77 + 192);
                v85 = *(int8x16_t *)(v77 + 216);
                v86 = *(int8x16_t *)(v77 + 248);
                v87 = *(int8x16_t *)(v77 + 232);
                v116.i64[0] = vextq_s8(v87, v87, 8uLL).u64[0];
                v117.i64[0] = vextq_s8(v86, v86, 8uLL).u64[0];
                v88 = vextq_s8(v83, v83, 8uLL).u64[0];
                v89 = vextq_s8(v84, v84, 8uLL).u64[0];
                v91 = *(int8x16_t *)(v77 + 144);
                v90 = *(int8x16_t *)(v77 + 160);
                v92 = vextq_s8(v90, v90, 8uLL).u64[0];
                v93 = *(int8x16_t *)(v77 + 120);
                v94 = vextq_s8(v91, v91, 8uLL).u64[0];
                v95.i64[0] = vextq_s8(v93, v93, 8uLL).u64[0];
                v96 = *(int8x16_t *)(v77 + 104);
                v97.i64[0] = vextq_s8(v96, v96, 8uLL).u64[0];
                v98 = *(int8x16_t *)(v77 + 88);
                v99.i64[0] = vextq_s8(v98, v98, 8uLL).u64[0];
                v100.i64[0] = vextq_s8(v82, v82, 8uLL).u64[0];
                v101 = *(_QWORD *)(v77 + 136);
                v102 = vextq_s8(v81, v81, 8uLL).u64[0];
                v103.i64[0] = *(_QWORD *)(v77 + 208);
                v104 = vextq_s8(v80, v80, 8uLL).u64[0];
                v105 = vextq_s8(v78, v78, 8uLL).u64[0];
                v106 = *(int8x16_t *)(v77 + 264);
                v107 = vextq_s8(v79, v79, 8uLL).u64[0];
                v108.i64[0] = vextq_s8(v106, v106, 8uLL).u64[0];
                v115 = *(_QWORD *)(v77 + 280);
                v109.i64[0] = vextq_s8(v85, v85, 8uLL).u64[0];
              }
              v81.i64[1] = v102;
              v80.i64[1] = v104;
              v78.i64[1] = v105;
              v79.i64[1] = v107;
              v110 = *((unsigned int *)a2 + 4);
              v93.i64[1] = v95.i64[0];
              v96.i64[1] = v97.i64[0];
              v98.i64[1] = v99.i64[0];
              v82.i64[1] = v100.i64[0];
              v83.i64[1] = v88;
              v84.i64[1] = v89;
              v90.i64[1] = v92;
              v91.i64[1] = v94;
              v106.i64[1] = v108.i64[0];
              v86.i64[1] = v117.i64[0];
              v87.i64[1] = v116.i64[0];
              v85.i64[1] = v109.i64[0];
              v111 = *a2 + 8 * (v69[1] + (_DWORD)v110 * a4[1]);
              *(int8x16_t *)v111 = v79;
              *(int8x16_t *)(v111 + 16) = v78;
              *(_QWORD *)(v111 + 64) = v118.i64[0];
              *(int8x16_t *)(v111 + 32) = v80;
              *(int8x16_t *)(v111 + 48) = v81;
              v112 = (int8x16_t *)(v111 + 8 * v110);
              *v112 = v82;
              v112[1] = v98;
              v112[4].i64[0] = v101;
              v112[2] = v96;
              v112[3] = v93;
              v113 = (int8x16_t *)(v111 + 16 * v110);
              *v113 = v91;
              v113[1] = v90;
              v113[4].i64[0] = v103.i64[0];
              v113[2] = v84;
              v113[3] = v83;
              v114 = (int8x16_t *)(v111 + 24 * v110);
              *v114 = v85;
              v114[1] = v87;
              v114[4].i64[0] = v115;
              v114[2] = v86;
              v114[3] = v106;
            }
            if (v75 == v74)
              break;
            v69 += 2;
          }
          while (v69 != v70);
        }
LABEL_23:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_20F5A5FB4(uint64_t result, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  int64x2_t *v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t *v35;
  int64x2_t *v36;
  int64x2_t *v37;
  int64x2_t *v38;
  int64x2_t *v39;
  int64x2_t *v40;
  int64x2_t *v41;
  int64x2_t *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  int64x2_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  int8x16_t v69;
  int8x16_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int8x16_t v86;
  int8x16_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int8x16_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int8x16_t *v97;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v8 = *a4;
          v9 = *(_QWORD *)(result + 88);
          v10 = (*(_DWORD *)(result + 112) * v8);
          v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v8) + v10);
          v12 = v9 + 16 * v10;
          do
          {
            if (v12 == v11)
              break;
            v13 = *v6;
            while (*(_DWORD *)v12 != v13)
            {
              if (*(_DWORD *)v12 > v13)
                goto LABEL_16;
              v12 += 16;
              if (v12 == v11)
                goto LABEL_5;
            }
            v14 = a4[1];
            v15 = v6[1];
            v16 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v12 + 8);
            v17 = *((unsigned int *)a2 + 4);
            v18 = *a2;
            if (v14 < v15)
            {
              v19.i64[0] = *(_QWORD *)(v16 + 64);
              v20 = (int64x2_t *)(v18 + 8 * (v14 + (_DWORD)v17 * v15));
              v22 = *(int64x2_t *)(v16 + 32);
              v21 = *(int64x2_t *)(v16 + 48);
              v23 = *(int64x2_t *)(v16 + 16);
              v24 = *(int64x2_t *)(v16 + 120);
              v25 = *(int64x2_t *)(v16 + 104);
              v26 = *(int64x2_t *)(v16 + 88);
              v27 = *(int64x2_t *)(v16 + 72);
              v28 = *(_QWORD *)(v16 + 208);
              v30 = *(_OWORD *)(v16 + 176);
              v29 = *(_OWORD *)(v16 + 192);
              v32 = *(_OWORD *)(v16 + 144);
              v31 = *(_OWORD *)(v16 + 160);
              v33 = vzip1q_s64(*(int64x2_t *)v16, v27);
              v34 = vzip2q_s64(*(int64x2_t *)v16, v27);
              v19.i64[1] = *(_QWORD *)(v16 + 136);
              v20[1].i64[0] = v32;
              *v20 = v33;
              v35 = (int64x2_t *)((char *)v20 + 8 * v17);
              *v35 = v34;
              v35[1].i64[0] = *((_QWORD *)&v32 + 1);
              v36 = &v20[v17];
              v36[1].i64[0] = v31;
              *v36 = vzip1q_s64(v23, v26);
              v37 = (int64x2_t *)((char *)v20 + 24 * v17);
              v37[1].i64[0] = *((_QWORD *)&v31 + 1);
              *v37 = vzip2q_s64(v23, v26);
              v38 = &v20[2 * v17];
              v38[1].i64[0] = v30;
              *v38 = vzip1q_s64(v22, v25);
              v39 = (int64x2_t *)((char *)v20 + 40 * v17);
              v39[1].i64[0] = *((_QWORD *)&v30 + 1);
              *v39 = vzip2q_s64(v22, v25);
              v40 = &v20[3 * v17];
              v40[1].i64[0] = v29;
              *v40 = vzip1q_s64(v21, v24);
              v41 = (int64x2_t *)((char *)v20 + 56 * v17);
              v41[1].i64[0] = *((_QWORD *)&v29 + 1);
              *v41 = vzip2q_s64(v21, v24);
              v42 = &v20[4 * v17];
              v42[1].i64[0] = v28;
              *v42 = v19;
LABEL_16:
              if (v12 == v11)
                break;
              goto LABEL_19;
            }
            v43 = *(_QWORD *)(v16 + 64);
            v44 = v18 + 8 * (v15 + (_DWORD)v17 * v14);
            v45 = *(_OWORD *)(v16 + 48);
            v46 = *(int64x2_t *)v16;
            v47 = *(_OWORD *)(v16 + 16);
            v48 = *(_OWORD *)(v16 + 72);
            v49 = *(_OWORD *)(v16 + 88);
            v50 = *(_OWORD *)(v16 + 104);
            v51 = *(_OWORD *)(v16 + 120);
            v52 = *(_QWORD *)(v16 + 136);
            v53 = *(_OWORD *)(v16 + 144);
            v54 = *(_OWORD *)(v16 + 160);
            v55 = *(_OWORD *)(v16 + 176);
            v56 = *(_OWORD *)(v16 + 192);
            v57 = *(_QWORD *)(v16 + 208);
            *(_OWORD *)(v44 + 32) = *(_OWORD *)(v16 + 32);
            *(_OWORD *)(v44 + 48) = v45;
            *(_QWORD *)(v44 + 64) = v43;
            *(int64x2_t *)v44 = v46;
            *(_OWORD *)(v44 + 16) = v47;
            v58 = v44 + 8 * v17;
            *(_QWORD *)(v58 + 64) = v52;
            *(_OWORD *)(v58 + 32) = v50;
            *(_OWORD *)(v58 + 48) = v51;
            *(_OWORD *)v58 = v48;
            *(_OWORD *)(v58 + 16) = v49;
            v59 = v44 + 16 * v17;
            *(_QWORD *)(v59 + 64) = v57;
            *(_OWORD *)(v59 + 32) = v55;
            *(_OWORD *)(v59 + 48) = v56;
            *(_OWORD *)v59 = v53;
            *(_OWORD *)(v59 + 16) = v54;
            if (v12 == v11)
              break;
LABEL_19:
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v60 = *a3;
        v61 = a3[1];
        if (*a3 != v61)
        {
          v62 = *a4;
          v63 = *(_QWORD *)(result + 88);
          v64 = (*(_DWORD *)(result + 112) * v62);
          v65 = v63 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v62) + v64);
          v66 = v63 + 16 * v64;
          do
          {
            if (v66 == v65)
              break;
            v67 = *v60;
            while (*(_DWORD *)v66 < v67)
            {
              v66 += 16;
              if (v66 == v65)
                goto LABEL_23;
            }
            if (*(_DWORD *)v66 == v67)
            {
              v68 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v66 + 8);
              if (v68 == *a2)
              {
                v78 = *(int8x16_t *)(v68 + 176);
                v77 = *(int8x16_t *)(v68 + 192);
                v76 = *(int8x16_t *)(v68 + 144);
                v75 = *(int8x16_t *)(v68 + 160);
                v80 = *(int8x16_t *)(v68 + 112);
                v79 = *(int8x16_t *)(v68 + 128);
                v82 = *(int8x16_t *)(v68 + 80);
                v81 = *(int8x16_t *)(v68 + 96);
                v86 = *(int8x16_t *)(v68 + 48);
                v92 = *(int8x16_t *)(v68 + 64);
                v83 = vextq_s8(v77, v77, 8uLL).u64[0];
                v84 = vextq_s8(v78, v78, 8uLL).u64[0];
                v85 = vextq_s8(v75, v75, 8uLL).u64[0];
                v88 = vextq_s8(v76, v76, 8uLL).u64[0];
                v89 = vextq_s8(v79, v79, 8uLL).u64[0];
                *(_QWORD *)&v74 = vextq_s8(v80, v80, 8uLL).u64[0];
                *(_QWORD *)&v73 = vextq_s8(v81, v81, 8uLL).u64[0];
                *(_QWORD *)&v72 = vextq_s8(v82, v82, 8uLL).u64[0];
                v69 = *(int8x16_t *)(v68 + 16);
                v87 = *(int8x16_t *)(v68 + 32);
                *(_QWORD *)&v71 = vextq_s8(v92, v92, 8uLL).u64[0];
                v90 = vextq_s8(v86, v86, 8uLL).u64[0];
                v91 = vextq_s8(v87, v87, 8uLL).u64[0];
                v70 = *(int8x16_t *)v68;
              }
              else
              {
                v70 = *(int8x16_t *)v68;
                v69 = *(int8x16_t *)(v68 + 16);
                v71 = *(_OWORD *)(v68 + 72);
                v72 = *(_OWORD *)(v68 + 88);
                v73 = *(_OWORD *)(v68 + 104);
                v74 = *(_OWORD *)(v68 + 120);
                v76 = *(int8x16_t *)(v68 + 144);
                v75 = *(int8x16_t *)(v68 + 160);
                v78 = *(int8x16_t *)(v68 + 176);
                v77 = *(int8x16_t *)(v68 + 192);
                v79.i64[0] = *(_QWORD *)(v68 + 128);
                v80.i64[0] = *(_QWORD *)(v68 + 112);
                v81.i64[0] = *(_QWORD *)(v68 + 96);
                v82.i64[0] = *(_QWORD *)(v68 + 80);
                v83 = vextq_s8(v77, v77, 8uLL).u64[0];
                v84 = vextq_s8(v78, v78, 8uLL).u64[0];
                v85 = vextq_s8(v75, v75, 8uLL).u64[0];
                v87 = *(int8x16_t *)(v68 + 32);
                v86 = *(int8x16_t *)(v68 + 48);
                v88 = vextq_s8(v76, v76, 8uLL).u64[0];
                v89 = *(_QWORD *)(v68 + 136);
                v90 = vextq_s8(v86, v86, 8uLL).u64[0];
                v91 = vextq_s8(v87, v87, 8uLL).u64[0];
                v92.i64[0] = *(_QWORD *)(v68 + 64);
              }
              v93 = *(_QWORD *)(v68 + 208);
              v94 = *((unsigned int *)a2 + 4);
              v86.i64[1] = v90;
              v87.i64[1] = v91;
              v69.i64[1] = vextq_s8(v69, v69, 8uLL).u64[0];
              v70.i64[1] = vextq_s8(v70, v70, 8uLL).u64[0];
              *((_QWORD *)&v74 + 1) = v79.i64[0];
              *((_QWORD *)&v73 + 1) = v80.i64[0];
              *((_QWORD *)&v72 + 1) = v81.i64[0];
              *((_QWORD *)&v71 + 1) = v82.i64[0];
              v77.i64[1] = v83;
              v78.i64[1] = v84;
              v75.i64[1] = v85;
              v76.i64[1] = v88;
              v95 = *a2 + 8 * (v60[1] + (_DWORD)v94 * a4[1]);
              *(int8x16_t *)v95 = v70;
              *(int8x16_t *)(v95 + 16) = v69;
              *(_QWORD *)(v95 + 64) = v92.i64[0];
              *(int8x16_t *)(v95 + 32) = v87;
              *(int8x16_t *)(v95 + 48) = v86;
              v96 = v95 + 8 * v94;
              *(_OWORD *)v96 = v71;
              *(_OWORD *)(v96 + 16) = v72;
              *(_QWORD *)(v96 + 64) = v89;
              *(_OWORD *)(v96 + 32) = v73;
              *(_OWORD *)(v96 + 48) = v74;
              v97 = (int8x16_t *)(v95 + 16 * v94);
              *v97 = v76;
              v97[1] = v75;
              v97[4].i64[0] = v93;
              v97[2] = v78;
              v97[3] = v77;
            }
            if (v66 == v65)
              break;
            v60 += 2;
          }
          while (v60 != v61);
        }
LABEL_23:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_20F5A6384(uint64_t result, uint64_t a2, unsigned int **a3, unsigned int **a4)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int8x16_t v15;
  __int128 v16;
  int8x16_t v17;
  unint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  _OWORD *v49;
  _OWORD *v50;
  _OWORD *v51;
  _OWORD *v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  int8x16_t *v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  uint64_t v70;
  int8x16_t *v71;
  int8x16_t *v72;
  int8x16_t *v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  __int128 *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  _OWORD *v96;
  _OWORD *v97;
  _OWORD *v98;
  _OWORD *v99;
  unsigned int *v100;
  unsigned int *v101;
  unsigned int *v102;
  unsigned int *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  __int128 *v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  _OWORD *v120;
  _OWORD *v121;
  _OWORD *v122;
  _OWORD *v123;
  unsigned int *v124;
  unsigned int *v125;
  unsigned int *v126;
  unsigned int *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  int8x16_t *v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  uint64_t v141;
  int8x16_t *v142;
  int8x16_t *v143;
  int8x16_t *v144;
  unsigned int *v145;
  unsigned int *v146;
  unsigned int *v147;
  unsigned int *v148;
  unsigned int *v149;
  unsigned int *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  int8x16_t *v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  int8x16_t v166;
  int8x16_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x16_t v178;
  int8x16_t v179;
  uint64_t v180;
  int8x16_t *v181;
  int8x16_t *v182;
  int8x16_t *v183;
  int8x16_t *v184;
  int8x16_t *v185;
  int8x16_t *v186;
  unsigned int *v187;
  unsigned int *v188;
  unsigned int *v189;
  unsigned int *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  int8x16_t *v197;
  int8x16_t v198;
  int8x16_t v199;
  int8x16_t v200;
  int8x16_t v201;
  int8x16_t v202;
  int8x16_t v203;
  int8x16_t v204;
  int8x16_t v205;
  int8x16_t v206;
  int8x16_t v207;
  int8x16_t v208;
  int8x16_t v209;
  uint64_t v210;
  int8x16_t *v211;
  int8x16_t *v212;
  int8x16_t *v213;
  int8x16_t *v214;
  unsigned int *v215;
  unsigned int *v216;
  unsigned int *v217;
  unsigned int *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  int8x16_t *v225;
  int8x16_t v226;
  int8x16_t v227;
  int8x16_t v228;
  int8x16_t v229;
  int8x16_t v230;
  int8x16_t v231;
  int8x16_t v232;
  int8x16_t v233;
  int8x16_t v234;
  int8x16_t v235;
  int8x16_t v236;
  int8x16_t v237;
  uint64_t v238;
  int8x16_t *v239;
  int8x16_t *v240;
  int8x16_t *v241;
  int8x16_t *v242;
  unsigned int *v243;
  unsigned int *v244;
  unsigned int *v245;
  unsigned int *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unsigned int v252;
  int8x16_t *v253;
  int8x16_t v254;
  int8x16_t v255;
  int8x16_t v256;
  int8x16_t v257;
  int8x16_t v258;
  int8x16_t v259;
  int8x16_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  int8x16_t v264;
  int8x16_t v265;
  uint64_t v266;
  int8x16_t *v267;
  int8x16_t *v268;
  int8x16_t *v269;
  unsigned int *v270;
  unsigned int *v271;
  unsigned int *v272;
  unsigned int *v273;
  unsigned int *v274;
  unsigned int *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int v281;
  unsigned int *v282;
  unsigned int *v283;
  unsigned int *v284;
  unsigned int *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unsigned int v291;
  uint64_t v292;
  int8x16_t v293;
  unint64_t v294;
  int8x16_t v295;
  unint64_t v296;
  int8x16_t v297;
  unint64_t v298;
  uint64_t v299;
  _QWORD *v300;
  unsigned int *v301;
  unsigned int *v302;
  unsigned int *v303;
  unsigned int *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unsigned int v310;
  int8x16_t *v311;
  int8x16_t v312;
  int8x16_t v313;
  uint64_t v314;
  _QWORD *v315;
  unsigned int *v316;
  unsigned int *v317;
  unsigned int *v318;
  unsigned int *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unsigned int v325;
  int8x16_t *v326;
  int8x16_t v327;
  int8x16_t v328;
  uint64_t v329;
  _QWORD *v330;
  unsigned int *v331;
  unsigned int *v332;
  unsigned int *v333;
  unsigned int *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unsigned int v340;
  uint64_t v341;
  int8x16_t v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  _QWORD *v346;
  unsigned int *v347;
  unsigned int *v348;
  unsigned int *v349;
  unsigned int *v350;
  unsigned int *v351;
  unsigned int *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unsigned int v358;
  uint64_t v359;
  int8x16_t v360;
  int8x16_t v361;
  int8x16_t v362;
  int8x16_t v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  int8x16_t v367;
  int8x16_t v368;
  int8x16_t v369;
  int8x16_t v370;
  __int128 v371;
  __int128 v372;
  int8x16_t v373;
  int8x16_t v374;
  int8x16_t v375;
  int8x16_t v376;
  int8x16_t v377;
  int8x16_t v378;
  int8x16_t v379;
  int8x16_t v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  unint64_t v388;
  __int128 v389;
  uint64_t v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  int8x16_t *v412;
  uint64_t v413;
  int8x16_t *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unsigned int *v419;
  unsigned int *v420;
  unsigned int *v421;
  unsigned int *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  unsigned int v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  unsigned int *v435;
  unsigned int *v436;
  unsigned int *v437;
  unsigned int *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  unsigned int v444;
  uint64_t v445;
  int8x16_t v446;
  int8x16_t v447;
  int8x16_t v448;
  int8x16_t v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  int8x16_t v454;
  int8x16_t v455;
  int8x16_t v456;
  int8x16_t v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  int8x16_t v461;
  int8x16_t v462;
  int8x16_t v463;
  int8x16_t v464;
  unint64_t v465;
  unint64_t v466;
  unint64_t v467;
  unint64_t v468;
  unint64_t v469;
  unint64_t v470;
  unint64_t v471;
  unint64_t v472;
  unint64_t v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  int8x16_t *v482;
  uint64_t v483;
  int8x16_t *v484;
  uint64_t v485;
  unsigned int *v486;
  unsigned int *v487;
  unsigned int *v488;
  unsigned int *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  unsigned int v495;
  uint64_t v496;
  int8x16_t v497;
  int8x16_t v498;
  int8x16_t v499;
  int8x16_t v500;
  int8x16_t v501;
  int8x16_t v502;
  int8x16_t v503;
  int8x16_t v504;
  int8x16_t v505;
  int8x16_t v506;
  unint64_t v507;
  unint64_t v508;
  int8x16_t v509;
  int8x16_t v510;
  unint64_t v511;
  int8x16_t v512;
  unint64_t v513;
  int8x16_t v514;
  int8x16_t v515;
  int8x16_t v516;
  int8x16_t v517;
  int8x16_t v518;
  int8x16_t v519;
  unint64_t v520;
  unint64_t v521;
  int8x16_t v522;
  unint64_t v523;
  unint64_t v524;
  int8x16_t v525;
  unint64_t v526;
  int8x16_t v527;
  int8x16_t v528;
  uint64_t v529;
  uint64_t v530;
  int8x16_t *v531;
  int8x16_t *v532;
  int8x16_t *v533;
  unsigned int *v534;
  unsigned int *v535;
  unsigned int *v536;
  unsigned int *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  unsigned int v543;
  uint64_t v544;
  int8x16_t v545;
  int8x16_t v546;
  int8x16_t v547;
  int8x16_t v548;
  int8x16_t v549;
  int8x16_t v550;
  int8x16_t v551;
  int8x16_t v552;
  int8x16_t v553;
  int8x16_t v554;
  unint64_t v555;
  unint64_t v556;
  int8x16_t v557;
  int8x16_t v558;
  unint64_t v559;
  int8x16_t v560;
  unint64_t v561;
  int8x16_t v562;
  int8x16_t v563;
  int8x16_t v564;
  int8x16_t v565;
  int8x16_t v566;
  int8x16_t v567;
  unint64_t v568;
  unint64_t v569;
  int8x16_t v570;
  unint64_t v571;
  unint64_t v572;
  int8x16_t v573;
  unint64_t v574;
  int8x16_t v575;
  int8x16_t v576;
  uint64_t v577;
  uint64_t v578;
  int8x16_t *v579;
  int8x16_t *v580;
  int8x16_t *v581;
  unsigned int *v582;
  unsigned int *v583;
  unsigned int *v584;
  unsigned int *v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  unsigned int v591;
  uint64_t v592;
  int8x16_t v593;
  int8x16_t v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  int8x16_t v599;
  int8x16_t v600;
  int8x16_t v601;
  int8x16_t v602;
  int8x16_t v603;
  int8x16_t v604;
  int8x16_t v605;
  int8x16_t v606;
  unint64_t v607;
  unint64_t v608;
  unint64_t v609;
  int8x16_t v610;
  int8x16_t v611;
  unint64_t v612;
  unint64_t v613;
  unint64_t v614;
  unint64_t v615;
  int8x16_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  int8x16_t *v621;
  unsigned int *v622;
  unsigned int *v623;
  unsigned int *v624;
  unsigned int *v625;
  unsigned int *v626;
  unsigned int *v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  unsigned int v633;
  int8x16_t *v634;
  int8x16_t v635;
  int8x16_t v636;
  int8x16_t v637;
  int8x16_t v638;
  int8x16_t v639;
  int8x16_t v640;
  int8x16_t v641;
  int8x16_t v642;
  int8x16_t v643;
  int8x16_t v644;
  unint64_t v645;
  unint64_t v646;
  unint64_t v647;
  unint64_t v648;
  int8x16_t v649;
  int8x16_t v650;
  int8x16_t v651;
  int8x16_t v652;
  int8x16_t v653;
  int8x16_t v654;
  int8x16_t v655;
  int8x16_t v656;
  uint64_t v657;
  int8x16_t *v658;
  int8x16_t *v659;
  int8x16_t *v660;
  int8x16_t *v661;
  int8x16_t *v662;
  int8x16_t *v663;
  unsigned int *v664;
  unsigned int *v665;
  unsigned int *v666;
  unsigned int *v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  unsigned int v673;
  int8x16_t *v674;
  int8x16_t v675;
  int8x16_t v676;
  int8x16_t v677;
  int8x16_t v678;
  unint64_t v679;
  int8x16_t v680;
  int8x16_t v681;
  unint64_t v682;
  int8x16_t v683;
  int8x16_t v684;
  int8x16_t v685;
  int8x16_t v686;
  int8x16_t v687;
  int8x16_t v688;
  unint64_t v689;
  unint64_t v690;
  unint64_t v691;
  int8x16_t v692;
  int8x16_t v693;
  unint64_t v694;
  unint64_t v695;
  unint64_t v696;
  int8x16_t v697;
  int8x16_t v698;
  unint64_t v699;
  unint64_t v700;
  int8x16_t v701;
  int8x16_t v702;
  int8x16_t v703;
  int8x16_t v704;
  int8x16_t v705;
  int8x16_t v706;
  uint64_t v707;
  int8x16_t v708;
  int8x16_t v709;
  __int128 v710;
  __int128 v711;
  __int128 v712;
  int8x16_t *v713;
  int8x16_t *v714;
  int8x16_t *v715;
  int8x16_t *v716;
  int8x16_t *v717;
  int8x16_t *v718;
  int8x16_t *v719;
  __int8 *v720;
  int8x16_t *v721;
  unsigned int *v722;
  unsigned int *v723;
  unsigned int *v724;
  unsigned int *v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  unsigned int v731;
  __int128 *v732;
  _OWORD *v733;
  __int128 v734;
  __int128 v735;
  unsigned int *v736;
  unsigned int *v737;
  unsigned int *v738;
  unsigned int *v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  unsigned int v745;
  int8x16_t *v746;
  int8x16_t v747;
  int8x16_t v748;
  int8x16_t v749;
  int8x16_t v750;
  int8x16_t v751;
  int8x16_t v752;
  int8x16_t v753;
  int8x16_t v754;
  int8x16_t v755;
  int8x16_t v756;
  unint64_t v757;
  unint64_t v758;
  unint64_t v759;
  unint64_t v760;
  int8x16_t v761;
  int8x16_t v762;
  int8x16_t v763;
  int8x16_t v764;
  int8x16_t v765;
  int8x16_t v766;
  int8x16_t v767;
  int8x16_t v768;
  uint64_t v769;
  int8x16_t *v770;
  int8x16_t *v771;
  int8x16_t *v772;
  int8x16_t *v773;
  int8x16_t *v774;
  int8x16_t *v775;
  unsigned int *v776;
  unsigned int *v777;
  unsigned int *v778;
  unsigned int *v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  unsigned int v785;
  int8x16_t *v786;
  int8x16_t v787;
  int8x16_t v788;
  int8x16_t v789;
  int8x16_t v790;
  int8x16_t v791;
  int8x16_t v792;
  int8x16_t v793;
  int8x16_t v794;
  int8x16_t v795;
  int8x16_t v796;
  int8x16_t v797;
  int8x16_t v798;
  uint64_t v799;
  int8x16_t *v800;
  int8x16_t *v801;
  int8x16_t *v802;
  int8x16_t *v803;
  unsigned int *v804;
  unsigned int *v805;
  unsigned int *v806;
  unsigned int *v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  unsigned int v813;
  int8x16_t *v814;
  int8x16_t v815;
  int8x16_t v816;
  int8x16_t v817;
  int8x16_t v818;
  int8x16_t v819;
  int8x16_t v820;
  int8x16_t v821;
  int8x16_t v822;
  int8x16_t v823;
  int8x16_t v824;
  int8x16_t v825;
  int8x16_t v826;
  uint64_t v827;
  int8x16_t *v828;
  int8x16_t *v829;
  int8x16_t *v830;
  int8x16_t *v831;
  unsigned int *v832;
  unsigned int *v833;
  unsigned int *v834;
  unsigned int *v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  unsigned int v841;
  int8x16_t *v842;
  int8x16_t v843;
  int8x16_t v844;
  int8x16_t v845;
  int8x16_t v846;
  int8x16_t v847;
  int8x16_t v848;
  int8x16_t v849;
  unint64_t v850;
  unint64_t v851;
  unint64_t v852;
  int8x16_t v853;
  int8x16_t v854;
  uint64_t v855;
  int8x16_t *v856;
  int8x16_t *v857;
  int8x16_t *v858;
  unint64_t v859;
  unint64_t v860;
  unint64_t v861;
  unint64_t v862;
  unint64_t v863;
  unint64_t v864;
  unint64_t v865;
  unint64_t v866;
  unint64_t v867;
  unint64_t v868;
  uint64_t v869;
  int8x16_t v870;
  int8x16_t v871;
  int8x16_t v872;
  int8x16_t v873;
  int8x16_t v874;
  int8x16_t v875;
  int8x16_t v876;
  int8x16_t v877;
  int8x16_t v878;
  uint64_t v879;
  unint64_t v880;
  int8x16_t v881;
  unint64_t v882;
  unint64_t v883;
  int8x16_t v884;
  unint64_t v885;
  unint64_t v886;
  int8x16_t v887;
  unint64_t v888;
  unint64_t v889;
  int8x16_t v890;
  unint64_t v891;
  unint64_t v892;
  __int128 v893;
  unint64_t v894;
  unint64_t v895;
  int8x16_t v896;
  unint64_t v897;
  unint64_t v898;
  int8x16_t v899;
  int8x16_t v900;
  unint64_t v901;
  int8x16_t v902;
  int8x16_t v903;
  unint64_t v904;
  __int128 v905;
  int8x16_t v906;
  unint64_t v907;
  __int128 v908;
  int8x16_t v909;
  unint64_t v910;
  __int128 v911;
  int8x16_t v912;
  unint64_t v913;
  __int128 v914;
  int8x16_t v915;
  unint64_t v916;
  __int128 v917;
  int8x16_t v918;
  unint64_t v919;
  __int128 v920;
  int8x16_t v921;
  unint64_t v922;
  __int128 v923;
  int8x16_t v924;
  unint64_t v925;
  __int128 v926;
  int8x16_t v927;
  unint64_t v928;
  int8x16_t v929;
  int8x16_t v930;
  int8x16_t v931;
  int8x16_t v932;
  unint64_t v933;
  int8x16_t v934;
  int8x16_t v935;
  int8x16_t v936;
  int8x16_t v937;
  int8x16_t v938;
  unint64_t v939;
  int8x16_t v940;
  int8x16_t v941;
  int8x16_t v942;
  int8x16_t v943;
  unint64_t v944;
  int8x16_t v945;
  __int128 v946;
  __int128 v947;
  unint64_t v948;
  unint64_t v949;
  unint64_t v950;
  int8x16_t v951;
  unint64_t v952;
  unint64_t v953;
  int8x16_t v954;
  __int128 v955;
  __int128 v956;
  int8x16_t v957;
  int8x16_t v958;
  unint64_t v959;
  int8x16_t v960;
  unint64_t v961;
  unint64_t v962;
  __int128 v963;
  __int128 v964;
  int8x16_t v965;
  int8x16_t v966;
  int8x16_t v967;
  unint64_t v968;
  int8x16_t v969;
  unint64_t v970;
  unint64_t v971;
  __int128 v972;
  __int128 v973;
  int8x16_t v974;
  int8x16_t v975;
  int8x16_t v976;
  unint64_t v977;
  int8x16_t v978;
  unint64_t v979;

  if (a3[18] != a3[19])
  {
    v4 = a4[18];
    v5 = a4[19];
    while (v4 != v5)
    {
      v6 = a3[18];
      v7 = a3[19];
      if (v6 != v7)
      {
        v8 = *v4;
        v9 = *(_QWORD *)(result + 7000);
        v10 = (*(_DWORD *)(result + 7024) * v8);
        v11 = v9 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 7032) + 8 * v8) + v10);
        v12 = v9 + 16 * v10;
        do
        {
          if (v12 == v11)
            break;
          v13 = *v6;
          while (*(_DWORD *)v12 < v13)
          {
            v12 += 16;
            if (v12 == v11)
              goto LABEL_3;
          }
          if (*(_DWORD *)v12 == v13)
          {
            v14 = *(_QWORD *)(result + 6928) + 8 * *(_QWORD *)(v12 + 8);
            if (v14 == *(_QWORD *)a2)
            {
              v21 = *(_QWORD *)(v14 + 64);
              v20 = *(int8x16_t *)(v14 + 32);
              v17 = *(int8x16_t *)(v14 + 48);
              v15 = *(int8x16_t *)v14;
              v19 = *(int8x16_t *)(v14 + 16);
              v22 = vextq_s8(v17, v17, 8uLL).u64[0];
              v18 = vextq_s8(v20, v20, 8uLL).u64[0];
              *(_QWORD *)&v16 = vextq_s8(v19, v19, 8uLL).u64[0];
            }
            else
            {
              v15 = *(int8x16_t *)v14;
              v16 = *(_OWORD *)(v14 + 24);
              v17 = *(int8x16_t *)(v14 + 48);
              v18 = *(_QWORD *)(v14 + 40);
              v19.i64[0] = *(_QWORD *)(v14 + 16);
              v20.i64[0] = *(_QWORD *)(v14 + 32);
              v21 = *(_QWORD *)(v14 + 64);
              v22 = vextq_s8(v17, v17, 8uLL).u64[0];
            }
            v23 = *(unsigned int *)(a2 + 16);
            v24 = *(_QWORD *)a2 + 8 * (v6[1] + (_DWORD)v23 * v4[1]);
            v15.i64[1] = vextq_s8(v15, v15, 8uLL).u64[0];
            *((_QWORD *)&v16 + 1) = v20.i64[0];
            v17.i64[1] = v22;
            *(_QWORD *)(v24 + 16) = v19.i64[0];
            *(int8x16_t *)v24 = v15;
            v25 = v24 + 8 * v23;
            *(_QWORD *)(v25 + 16) = v18;
            *(_OWORD *)v25 = v16;
            v26 = (int8x16_t *)(v24 + 16 * v23);
            v26[1].i64[0] = v21;
            *v26 = v17;
          }
          if (v12 == v11)
            break;
          v6 += 2;
        }
        while (v6 != v7);
      }
LABEL_3:
      v4 += 2;
    }
  }
  v27 = a3[15];
  v28 = a3[16];
  if (v27 != v28)
  {
    v29 = a4[15];
    v30 = a4[16];
    if (v29 != v30)
    {
      do
      {
        v31 = a3[15];
        v32 = a3[16];
        if (v31 != v32)
        {
          v33 = *v29;
          v34 = *(_QWORD *)(result + 5848);
          v35 = (*(_DWORD *)(result + 5872) * v33);
          v36 = v34 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 5880) + 8 * v33) + v35);
          v37 = v34 + 16 * v35;
          do
          {
            if (v37 == v36)
              break;
            v38 = *v31;
            while (*(_DWORD *)v37 < v38)
            {
              v37 += 16;
              if (v37 == v36)
                goto LABEL_23;
            }
            if (*(_DWORD *)v37 == v38)
            {
              v39 = (__int128 *)(*(_QWORD *)(result + 5776) + 8 * *(_QWORD *)(v37 + 8));
              if (v39 == *(__int128 **)a2)
              {
                v47 = v39[6];
                v46 = v39[7];
                v45 = v39[4];
                v44 = v39[5];
                v43 = v39[2];
                v42 = v39[3];
                v41 = *v39;
                v40 = v39[1];
              }
              else
              {
                v41 = *v39;
                v40 = v39[1];
                v43 = v39[2];
                v42 = v39[3];
                v45 = v39[4];
                v44 = v39[5];
                v47 = v39[6];
                v46 = v39[7];
              }
              v48 = *(unsigned int *)(a2 + 16);
              v49 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v31[1] + (_DWORD)v48 * v29[1]));
              *v49 = v41;
              v49[1] = v40;
              v50 = (_OWORD *)((char *)v49 + 8 * v48);
              *v50 = v43;
              v50[1] = v42;
              v51 = &v49[v48];
              *v51 = v45;
              v51[1] = v44;
              v52 = (_OWORD *)((char *)v49 + 24 * v48);
              *v52 = v47;
              v52[1] = v46;
            }
            if (v37 == v36)
              break;
            v31 += 2;
          }
          while (v31 != v32);
        }
LABEL_23:
        v29 += 2;
      }
      while (v29 != v30);
      v27 = a3[15];
      v28 = a3[16];
    }
    if (v27 != v28)
    {
      v53 = a4[18];
      v54 = a4[19];
      while (v53 != v54)
      {
        v55 = a3[15];
        v56 = a3[16];
        if (v55 != v56)
        {
          v57 = *v53;
          v58 = *(_QWORD *)(result + 6856);
          v59 = (*(_DWORD *)(result + 6880) * v57);
          v60 = v58 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 6888) + 8 * v57) + v59);
          v61 = v58 + 16 * v59;
          do
          {
            if (v61 == v60)
              break;
            v62 = *v55;
            while (*(_DWORD *)v61 < v62)
            {
              v61 += 16;
              if (v61 == v60)
                goto LABEL_42;
            }
            if (*(_DWORD *)v61 == v62)
            {
              v63 = (int8x16_t *)(*(_QWORD *)(result + 6784) + 8 * *(_QWORD *)(v61 + 8));
              if (v63 == *(int8x16_t **)a2)
              {
                v69 = v63[4];
                v68 = v63[5];
                v67 = v63[2];
                v66 = v63[3];
                v65 = *v63;
                v64 = v63[1];
              }
              else
              {
                v65 = *v63;
                v64 = v63[1];
                v67 = v63[2];
                v66 = v63[3];
                v69 = v63[4];
                v68 = v63[5];
              }
              v70 = *(unsigned int *)(a2 + 16);
              v71 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v55[1] + (_DWORD)v70 * v53[1]));
              v68.i64[1] = vextq_s8(v68, v68, 8uLL).u64[0];
              v69.i64[1] = vextq_s8(v69, v69, 8uLL).u64[0];
              v66.i64[1] = vextq_s8(v66, v66, 8uLL).u64[0];
              v67.i64[1] = vextq_s8(v67, v67, 8uLL).u64[0];
              v64.i64[1] = vextq_s8(v64, v64, 8uLL).u64[0];
              v65.i64[1] = vextq_s8(v65, v65, 8uLL).u64[0];
              *v71 = v65;
              v71[1] = v64;
              v72 = (int8x16_t *)((char *)v71 + 8 * v70);
              *v72 = v67;
              v72[1] = v66;
              v73 = &v71[v70];
              *v73 = v69;
              v73[1] = v68;
            }
            if (v61 == v60)
              break;
            v55 += 2;
          }
          while (v55 != v56);
        }
LABEL_42:
        v53 += 2;
      }
    }
  }
  v74 = a3[12];
  v75 = a3[13];
  if (v74 != v75)
  {
    v76 = a4[12];
    v77 = a4[13];
    if (v76 != v77)
    {
      do
      {
        v78 = a3[12];
        v79 = a3[13];
        if (v78 != v79)
        {
          v80 = *v76;
          v81 = *(_QWORD *)(result + 4696);
          v82 = (*(_DWORD *)(result + 4720) * v80);
          v83 = v81 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 4728) + 8 * v80) + v82);
          v84 = v81 + 16 * v82;
          do
          {
            if (v84 == v83)
              break;
            v85 = *v78;
            while (*(_DWORD *)v84 < v85)
            {
              v84 += 16;
              if (v84 == v83)
                goto LABEL_62;
            }
            if (*(_DWORD *)v84 == v85)
            {
              v86 = (__int128 *)(*(_QWORD *)(result + 4624) + 8 * *(_QWORD *)(v84 + 8));
              if (v86 == *(__int128 **)a2)
              {
                v94 = v86[6];
                v93 = v86[7];
                v92 = v86[4];
                v91 = v86[5];
                v90 = v86[2];
                v89 = v86[3];
                v88 = *v86;
                v87 = v86[1];
              }
              else
              {
                v88 = *v86;
                v87 = v86[1];
                v90 = v86[2];
                v89 = v86[3];
                v92 = v86[4];
                v91 = v86[5];
                v94 = v86[6];
                v93 = v86[7];
              }
              v95 = *(unsigned int *)(a2 + 16);
              v96 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v78[1] + (_DWORD)v95 * v76[1]));
              *v96 = v88;
              v96[1] = v87;
              v97 = (_OWORD *)((char *)v96 + 8 * v95);
              *v97 = v90;
              v97[1] = v89;
              v98 = &v96[v95];
              *v98 = v92;
              v98[1] = v91;
              v99 = (_OWORD *)((char *)v96 + 24 * v95);
              *v99 = v94;
              v99[1] = v93;
            }
            if (v84 == v83)
              break;
            v78 += 2;
          }
          while (v78 != v79);
        }
LABEL_62:
        v76 += 2;
      }
      while (v76 != v77);
      v74 = a3[12];
      v75 = a3[13];
    }
    if (v74 != v75)
    {
      v100 = a4[15];
      v101 = a4[16];
      if (v100 != v101)
      {
        do
        {
          v102 = a3[12];
          v103 = a3[13];
          if (v102 != v103)
          {
            v104 = *v100;
            v105 = *(_QWORD *)(result + 5704);
            v106 = (*(_DWORD *)(result + 5728) * v104);
            v107 = v105 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 5736) + 8 * v104) + v106);
            v108 = v105 + 16 * v106;
            do
            {
              if (v108 == v107)
                break;
              v109 = *v102;
              while (*(_DWORD *)v108 < v109)
              {
                v108 += 16;
                if (v108 == v107)
                  goto LABEL_82;
              }
              if (*(_DWORD *)v108 == v109)
              {
                v110 = (__int128 *)(*(_QWORD *)(result + 5632) + 8 * *(_QWORD *)(v108 + 8));
                if (v110 == *(__int128 **)a2)
                {
                  v118 = v110[6];
                  v117 = v110[7];
                  v116 = v110[4];
                  v115 = v110[5];
                  v114 = v110[2];
                  v113 = v110[3];
                  v112 = *v110;
                  v111 = v110[1];
                }
                else
                {
                  v112 = *v110;
                  v111 = v110[1];
                  v114 = v110[2];
                  v113 = v110[3];
                  v116 = v110[4];
                  v115 = v110[5];
                  v118 = v110[6];
                  v117 = v110[7];
                }
                v119 = *(unsigned int *)(a2 + 16);
                v120 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v102[1] + (_DWORD)v119 * v100[1]));
                *v120 = v112;
                v120[1] = v111;
                v121 = (_OWORD *)((char *)v120 + 8 * v119);
                *v121 = v114;
                v121[1] = v113;
                v122 = &v120[v119];
                *v122 = v116;
                v122[1] = v115;
                v123 = (_OWORD *)((char *)v120 + 24 * v119);
                *v123 = v118;
                v123[1] = v117;
              }
              if (v108 == v107)
                break;
              v102 += 2;
            }
            while (v102 != v103);
          }
LABEL_82:
          v100 += 2;
        }
        while (v100 != v101);
        v74 = a3[12];
        v75 = a3[13];
      }
      if (v74 != v75)
      {
        v124 = a4[18];
        v125 = a4[19];
        while (v124 != v125)
        {
          v126 = a3[12];
          v127 = a3[13];
          if (v126 != v127)
          {
            v128 = *v124;
            v129 = *(_QWORD *)(result + 6712);
            v130 = (*(_DWORD *)(result + 6736) * v128);
            v131 = v129 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 6744) + 8 * v128) + v130);
            v132 = v129 + 16 * v130;
            do
            {
              if (v132 == v131)
                break;
              v133 = *v126;
              while (*(_DWORD *)v132 < v133)
              {
                v132 += 16;
                if (v132 == v131)
                  goto LABEL_101;
              }
              if (*(_DWORD *)v132 == v133)
              {
                v134 = (int8x16_t *)(*(_QWORD *)(result + 6640) + 8 * *(_QWORD *)(v132 + 8));
                if (v134 == *(int8x16_t **)a2)
                {
                  v140 = v134[4];
                  v139 = v134[5];
                  v138 = v134[2];
                  v137 = v134[3];
                  v136 = *v134;
                  v135 = v134[1];
                }
                else
                {
                  v136 = *v134;
                  v135 = v134[1];
                  v138 = v134[2];
                  v137 = v134[3];
                  v140 = v134[4];
                  v139 = v134[5];
                }
                v141 = *(unsigned int *)(a2 + 16);
                v142 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v126[1] + (_DWORD)v141 * v124[1]));
                v139.i64[1] = vextq_s8(v139, v139, 8uLL).u64[0];
                v140.i64[1] = vextq_s8(v140, v140, 8uLL).u64[0];
                v137.i64[1] = vextq_s8(v137, v137, 8uLL).u64[0];
                v138.i64[1] = vextq_s8(v138, v138, 8uLL).u64[0];
                v135.i64[1] = vextq_s8(v135, v135, 8uLL).u64[0];
                v136.i64[1] = vextq_s8(v136, v136, 8uLL).u64[0];
                *v142 = v136;
                v142[1] = v135;
                v143 = (int8x16_t *)((char *)v142 + 8 * v141);
                *v143 = v138;
                v143[1] = v137;
                v144 = &v142[v141];
                *v144 = v140;
                v144[1] = v139;
              }
              if (v132 == v131)
                break;
              v126 += 2;
            }
            while (v126 != v127);
          }
LABEL_101:
          v124 += 2;
        }
      }
    }
  }
  v145 = a3[9];
  v146 = a3[10];
  if (v145 != v146)
  {
    v147 = a4[9];
    v148 = a4[10];
    if (v147 != v148)
    {
      do
      {
        v149 = a3[9];
        v150 = a3[10];
        if (v149 != v150)
        {
          v151 = *v147;
          v152 = *(_QWORD *)(result + 3544);
          v153 = (*(_DWORD *)(result + 3568) * v151);
          v154 = v152 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 3576) + 8 * v151) + v153);
          v155 = v152 + 16 * v153;
          do
          {
            if (v155 == v154)
              break;
            v156 = *v149;
            while (*(_DWORD *)v155 < v156)
            {
              v155 += 16;
              if (v155 == v154)
                goto LABEL_121;
            }
            if (*(_DWORD *)v155 == v156)
            {
              v157 = (int8x16_t *)(*(_QWORD *)(result + 3472) + 8 * *(_QWORD *)(v155 + 8));
              if (v157 == *(int8x16_t **)a2)
              {
                v167 = v157[16];
                v166 = v157[17];
                v165 = v157[14];
                v164 = v157[15];
                v163 = v157[12];
                v162 = v157[13];
                v161 = v157[10];
                v160 = v157[11];
                v173 = v157[8];
                v172 = v157[9];
                v962 = vextq_s8(v167, v167, 8uLL).u64[0];
                v971 = vextq_s8(v166, v166, 8uLL).u64[0];
                v168 = vextq_s8(v165, v165, 8uLL).u64[0];
                v169 = vextq_s8(v162, v162, 8uLL).u64[0];
                v170 = vextq_s8(v163, v163, 8uLL).u64[0];
                v944 = vextq_s8(v160, v160, 8uLL).u64[0];
                v953 = vextq_s8(v164, v164, 8uLL).u64[0];
                v171 = vextq_s8(v161, v161, 8uLL).u64[0];
                v159 = v157[6];
                v158 = v157[7];
              }
              else
              {
                v159 = v157[6];
                v158 = v157[7];
                v161 = v157[10];
                v160 = v157[11];
                v163 = v157[12];
                v162 = v157[13];
                v165 = v157[14];
                v164 = v157[15];
                v167 = v157[16];
                v166 = v157[17];
                v962 = vextq_s8(v167, v167, 8uLL).u64[0];
                v971 = vextq_s8(v166, v166, 8uLL).u64[0];
                v168 = vextq_s8(v165, v165, 8uLL).u64[0];
                v169 = vextq_s8(v162, v162, 8uLL).u64[0];
                v170 = vextq_s8(v163, v163, 8uLL).u64[0];
                v944 = vextq_s8(v160, v160, 8uLL).u64[0];
                v953 = vextq_s8(v164, v164, 8uLL).u64[0];
                v171 = vextq_s8(v161, v161, 8uLL).u64[0];
                v173 = v157[8];
                v172 = v157[9];
              }
              v175 = v157[4];
              v174 = v157[5];
              v177 = v157[2];
              v176 = v157[3];
              v179 = *v157;
              v178 = v157[1];
              v165.i64[1] = v168;
              v162.i64[1] = v169;
              v163.i64[1] = v170;
              v177.i64[1] = vextq_s8(v177, v177, 8uLL).u64[0];
              v180 = *(unsigned int *)(a2 + 16);
              v178.i64[1] = vextq_s8(v178, v178, 8uLL).u64[0];
              v179.i64[1] = vextq_s8(v179, v179, 8uLL).u64[0];
              v174.i64[1] = vextq_s8(v174, v174, 8uLL).u64[0];
              v175.i64[1] = vextq_s8(v175, v175, 8uLL).u64[0];
              v176.i64[1] = vextq_s8(v176, v176, 8uLL).u64[0];
              v173.i64[1] = vextq_s8(v173, v173, 8uLL).u64[0];
              v158.i64[1] = vextq_s8(v158, v158, 8uLL).u64[0];
              v159.i64[1] = vextq_s8(v159, v159, 8uLL).u64[0];
              v160.i64[1] = v944;
              v161.i64[1] = v171;
              v172.i64[1] = vextq_s8(v172, v172, 8uLL).u64[0];
              v166.i64[1] = v971;
              v167.i64[1] = v962;
              v164.i64[1] = v953;
              v181 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v149[1] + (_DWORD)v180 * v147[1]));
              *v181 = v179;
              v181[1] = v178;
              v181[2] = v177;
              v182 = (int8x16_t *)((char *)v181 + 8 * v180);
              *v182 = v176;
              v182[1] = v175;
              v182[2] = v174;
              v183 = &v181[v180];
              *v183 = v159;
              v183[1] = v158;
              v183[2] = v173;
              v184 = (int8x16_t *)((char *)v181 + 24 * v180);
              *v184 = v172;
              v184[1] = v161;
              v184[2] = v160;
              v185 = &v181[2 * v180];
              *v185 = v163;
              v185[1] = v162;
              v185[2] = v165;
              v186 = (int8x16_t *)((char *)v181 + 40 * v180);
              *v186 = v164;
              v186[1] = v167;
              v186[2] = v166;
            }
            if (v155 == v154)
              break;
            v149 += 2;
          }
          while (v149 != v150);
        }
LABEL_121:
        v147 += 2;
      }
      while (v147 != v148);
      v145 = a3[9];
      v146 = a3[10];
    }
    if (v145 != v146)
    {
      v187 = a4[12];
      v188 = a4[13];
      if (v187 != v188)
      {
        do
        {
          v189 = a3[9];
          v190 = a3[10];
          if (v189 != v190)
          {
            v191 = *v187;
            v192 = *(_QWORD *)(result + 4552);
            v193 = (*(_DWORD *)(result + 4576) * v191);
            v194 = v192 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 4584) + 8 * v191) + v193);
            v195 = v192 + 16 * v193;
            do
            {
              if (v195 == v194)
                break;
              v196 = *v189;
              while (*(_DWORD *)v195 < v196)
              {
                v195 += 16;
                if (v195 == v194)
                  goto LABEL_141;
              }
              if (*(_DWORD *)v195 == v196)
              {
                v197 = (int8x16_t *)(*(_QWORD *)(result + 4480) + 8 * *(_QWORD *)(v195 + 8));
                if (v197 == *(int8x16_t **)a2)
                {
                  v207 = v197[10];
                  v206 = v197[11];
                  v205 = v197[8];
                  v204 = v197[9];
                  v203 = v197[6];
                  v202 = v197[7];
                  v201 = v197[4];
                  v200 = v197[5];
                  v199 = v197[2];
                  v198 = v197[3];
                }
                else
                {
                  v199 = v197[2];
                  v198 = v197[3];
                  v201 = v197[4];
                  v200 = v197[5];
                  v203 = v197[6];
                  v202 = v197[7];
                  v205 = v197[8];
                  v204 = v197[9];
                  v207 = v197[10];
                  v206 = v197[11];
                }
                v209 = *v197;
                v208 = v197[1];
                v210 = *(unsigned int *)(a2 + 16);
                v199.i64[1] = vextq_s8(v199, v199, 8uLL).u64[0];
                v208.i64[1] = vextq_s8(v208, v208, 8uLL).u64[0];
                v209.i64[1] = vextq_s8(v209, v209, 8uLL).u64[0];
                v200.i64[1] = vextq_s8(v200, v200, 8uLL).u64[0];
                v201.i64[1] = vextq_s8(v201, v201, 8uLL).u64[0];
                v198.i64[1] = vextq_s8(v198, v198, 8uLL).u64[0];
                v205.i64[1] = vextq_s8(v205, v205, 8uLL).u64[0];
                v202.i64[1] = vextq_s8(v202, v202, 8uLL).u64[0];
                v203.i64[1] = vextq_s8(v203, v203, 8uLL).u64[0];
                v206.i64[1] = vextq_s8(v206, v206, 8uLL).u64[0];
                v207.i64[1] = vextq_s8(v207, v207, 8uLL).u64[0];
                v211 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v189[1] + (_DWORD)v210 * v187[1]));
                v204.i64[1] = vextq_s8(v204, v204, 8uLL).u64[0];
                *v211 = v209;
                v211[1] = v208;
                v211[2] = v199;
                v212 = (int8x16_t *)((char *)v211 + 8 * v210);
                *v212 = v198;
                v212[1] = v201;
                v212[2] = v200;
                v213 = &v211[v210];
                *v213 = v203;
                v213[1] = v202;
                v213[2] = v205;
                v214 = (int8x16_t *)((char *)v211 + 24 * v210);
                *v214 = v204;
                v214[1] = v207;
                v214[2] = v206;
              }
              if (v195 == v194)
                break;
              v189 += 2;
            }
            while (v189 != v190);
          }
LABEL_141:
          v187 += 2;
        }
        while (v187 != v188);
        v145 = a3[9];
        v146 = a3[10];
      }
      if (v145 != v146)
      {
        v215 = a4[15];
        v216 = a4[16];
        if (v215 != v216)
        {
          do
          {
            v217 = a3[9];
            v218 = a3[10];
            if (v217 != v218)
            {
              v219 = *v215;
              v220 = *(_QWORD *)(result + 5560);
              v221 = (*(_DWORD *)(result + 5584) * v219);
              v222 = v220 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 5592) + 8 * v219) + v221);
              v223 = v220 + 16 * v221;
              do
              {
                if (v223 == v222)
                  break;
                v224 = *v217;
                while (*(_DWORD *)v223 < v224)
                {
                  v223 += 16;
                  if (v223 == v222)
                    goto LABEL_161;
                }
                if (*(_DWORD *)v223 == v224)
                {
                  v225 = (int8x16_t *)(*(_QWORD *)(result + 5488) + 8 * *(_QWORD *)(v223 + 8));
                  if (v225 == *(int8x16_t **)a2)
                  {
                    v235 = v225[10];
                    v234 = v225[11];
                    v233 = v225[8];
                    v232 = v225[9];
                    v231 = v225[6];
                    v230 = v225[7];
                    v229 = v225[4];
                    v228 = v225[5];
                    v227 = v225[2];
                    v226 = v225[3];
                  }
                  else
                  {
                    v227 = v225[2];
                    v226 = v225[3];
                    v229 = v225[4];
                    v228 = v225[5];
                    v231 = v225[6];
                    v230 = v225[7];
                    v233 = v225[8];
                    v232 = v225[9];
                    v235 = v225[10];
                    v234 = v225[11];
                  }
                  v237 = *v225;
                  v236 = v225[1];
                  v238 = *(unsigned int *)(a2 + 16);
                  v227.i64[1] = vextq_s8(v227, v227, 8uLL).u64[0];
                  v236.i64[1] = vextq_s8(v236, v236, 8uLL).u64[0];
                  v237.i64[1] = vextq_s8(v237, v237, 8uLL).u64[0];
                  v228.i64[1] = vextq_s8(v228, v228, 8uLL).u64[0];
                  v229.i64[1] = vextq_s8(v229, v229, 8uLL).u64[0];
                  v226.i64[1] = vextq_s8(v226, v226, 8uLL).u64[0];
                  v233.i64[1] = vextq_s8(v233, v233, 8uLL).u64[0];
                  v230.i64[1] = vextq_s8(v230, v230, 8uLL).u64[0];
                  v231.i64[1] = vextq_s8(v231, v231, 8uLL).u64[0];
                  v234.i64[1] = vextq_s8(v234, v234, 8uLL).u64[0];
                  v235.i64[1] = vextq_s8(v235, v235, 8uLL).u64[0];
                  v239 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v217[1] + (_DWORD)v238 * v215[1]));
                  v232.i64[1] = vextq_s8(v232, v232, 8uLL).u64[0];
                  *v239 = v237;
                  v239[1] = v236;
                  v239[2] = v227;
                  v240 = (int8x16_t *)((char *)v239 + 8 * v238);
                  *v240 = v226;
                  v240[1] = v229;
                  v240[2] = v228;
                  v241 = &v239[v238];
                  *v241 = v231;
                  v241[1] = v230;
                  v241[2] = v233;
                  v242 = (int8x16_t *)((char *)v239 + 24 * v238);
                  *v242 = v232;
                  v242[1] = v235;
                  v242[2] = v234;
                }
                if (v223 == v222)
                  break;
                v217 += 2;
              }
              while (v217 != v218);
            }
LABEL_161:
            v215 += 2;
          }
          while (v215 != v216);
          v145 = a3[9];
          v146 = a3[10];
        }
        if (v145 != v146)
        {
          v243 = a4[18];
          v244 = a4[19];
          while (v243 != v244)
          {
            v245 = a3[9];
            v246 = a3[10];
            if (v245 != v246)
            {
              v247 = *v243;
              v248 = *(_QWORD *)(result + 6568);
              v249 = (*(_DWORD *)(result + 6592) * v247);
              v250 = v248 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 6600) + 8 * v247) + v249);
              v251 = v248 + 16 * v249;
              do
              {
                if (v251 == v250)
                  break;
                v252 = *v245;
                while (*(_DWORD *)v251 < v252)
                {
                  v251 += 16;
                  if (v251 == v250)
                    goto LABEL_180;
                }
                if (*(_DWORD *)v251 == v252)
                {
                  v253 = (int8x16_t *)(*(_QWORD *)(result + 6496) + 8 * *(_QWORD *)(v251 + 8));
                  if (v253 == *(int8x16_t **)a2)
                  {
                    v258 = v253[7];
                    v260 = v253[8];
                    v264 = v253[5];
                    v259 = v253[6];
                    v256 = v253[3];
                    v265 = v253[4];
                    v254 = v253[1];
                    v257 = v253[2];
                    v261 = vextq_s8(v260, v260, 8uLL).u64[0];
                    v262 = vextq_s8(v258, v258, 8uLL).u64[0];
                    v263 = vextq_s8(v259, v259, 8uLL).u64[0];
                    v255 = *v253;
                  }
                  else
                  {
                    v255 = *v253;
                    v254 = v253[1];
                    v257 = v253[2];
                    v256 = v253[3];
                    v259 = v253[6];
                    v258 = v253[7];
                    v260 = v253[8];
                    v261 = vextq_s8(v260, v260, 8uLL).u64[0];
                    v262 = vextq_s8(v258, v258, 8uLL).u64[0];
                    v263 = vextq_s8(v259, v259, 8uLL).u64[0];
                    v265 = v253[4];
                    v264 = v253[5];
                  }
                  v266 = *(unsigned int *)(a2 + 16);
                  v257.i64[1] = vextq_s8(v257, v257, 8uLL).u64[0];
                  v254.i64[1] = vextq_s8(v254, v254, 8uLL).u64[0];
                  v255.i64[1] = vextq_s8(v255, v255, 8uLL).u64[0];
                  v264.i64[1] = vextq_s8(v264, v264, 8uLL).u64[0];
                  v265.i64[1] = vextq_s8(v265, v265, 8uLL).u64[0];
                  v256.i64[1] = vextq_s8(v256, v256, 8uLL).u64[0];
                  v260.i64[1] = v261;
                  v258.i64[1] = v262;
                  v259.i64[1] = v263;
                  v267 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v245[1] + (_DWORD)v266 * v243[1]));
                  *v267 = v255;
                  v267[1] = v254;
                  v267[2] = v257;
                  v268 = (int8x16_t *)((char *)v267 + 8 * v266);
                  *v268 = v256;
                  v268[1] = v265;
                  v268[2] = v264;
                  v269 = &v267[v266];
                  *v269 = v259;
                  v269[1] = v258;
                  v269[2] = v260;
                }
                if (v251 == v250)
                  break;
                v245 += 2;
              }
              while (v245 != v246);
            }
LABEL_180:
            v243 += 2;
          }
        }
      }
    }
  }
  v270 = a3[6];
  v271 = a3[7];
  if (v270 != v271)
  {
    v272 = a4[6];
    v273 = a4[7];
    if (v272 == v273)
    {
      if (v270 == v271)
        goto LABEL_287;
      goto LABEL_215;
    }
    do
    {
      v274 = a3[6];
      v275 = a3[7];
      if (v274 != v275)
      {
        v276 = *v272;
        v277 = *(_QWORD *)(result + 2392);
        v278 = (*(_DWORD *)(result + 2416) * v276);
        v279 = v277 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 2424) + 8 * v276) + v278);
        v280 = v277 + 16 * v278;
        do
        {
          if (v280 == v279)
            break;
          v281 = *v274;
          while (*(_DWORD *)v280 < v281)
          {
            v280 += 16;
            if (v280 == v279)
              goto LABEL_201;
          }
          if (*(_DWORD *)v280 == v281)
            *(_QWORD *)(*(_QWORD *)a2 + 8 * (v274[1] + *(_DWORD *)(a2 + 16) * v272[1])) = *(_QWORD *)(*(_QWORD *)(result + 2320) + 8 * *(_QWORD *)(v280 + 8));
          if (v280 == v279)
            break;
          v274 += 2;
        }
        while (v274 != v275);
      }
LABEL_201:
      v272 += 2;
    }
    while (v272 != v273);
    v270 = a3[6];
    v271 = a3[7];
    if (v270 != v271)
    {
LABEL_215:
      v282 = a4[9];
      v283 = a4[10];
      if (v282 != v283)
      {
        do
        {
          v284 = a3[6];
          v285 = a3[7];
          if (v284 != v285)
          {
            v286 = *v282;
            v287 = *(_QWORD *)(result + 3400);
            v288 = (*(_DWORD *)(result + 3424) * v286);
            v289 = v287 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 3432) + 8 * v286) + v288);
            v290 = v287 + 16 * v288;
            do
            {
              if (v290 == v289)
                break;
              v291 = *v284;
              while (*(_DWORD *)v290 < v291)
              {
                v290 += 16;
                if (v290 == v289)
                  goto LABEL_217;
              }
              if (*(_DWORD *)v290 == v291)
              {
                v292 = *(_QWORD *)(result + 3328) + 8 * *(_QWORD *)(v290 + 8);
                if (v292 == *(_QWORD *)a2)
                {
                  v295 = *(int8x16_t *)(v292 + 16);
                  v297 = *(int8x16_t *)(v292 + 32);
                  v293 = *(int8x16_t *)v292;
                  v298 = vextq_s8(v297, v297, 8uLL).u64[0];
                  v296 = vextq_s8(v295, v295, 8uLL).u64[0];
                  v294 = vextq_s8(v293, v293, 8uLL).u64[0];
                }
                else
                {
                  v293.i64[0] = *(_QWORD *)v292;
                  v294 = *(_QWORD *)(v292 + 8);
                  v295.i64[0] = *(_QWORD *)(v292 + 16);
                  v296 = *(_QWORD *)(v292 + 24);
                  v297.i64[0] = *(_QWORD *)(v292 + 32);
                  v298 = *(_QWORD *)(v292 + 40);
                }
                v299 = *(unsigned int *)(a2 + 16);
                v300 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v284[1] + (_DWORD)v299 * v282[1]));
                *v300 = v293.i64[0];
                v300[v299] = v294;
                v300[2 * v299] = v295.i64[0];
                v300[3 * v299] = v296;
                v300[4 * v299] = v297.i64[0];
                v300[5 * v299] = v298;
              }
              if (v290 == v289)
                break;
              v284 += 2;
            }
            while (v284 != v285);
          }
LABEL_217:
          v282 += 2;
        }
        while (v282 != v283);
        v270 = a3[6];
        v271 = a3[7];
      }
      if (v270 != v271)
      {
        v301 = a4[12];
        v302 = a4[13];
        if (v301 != v302)
        {
          do
          {
            v303 = a3[6];
            v304 = a3[7];
            if (v303 != v304)
            {
              v305 = *v301;
              v306 = *(_QWORD *)(result + 4408);
              v307 = (*(_DWORD *)(result + 4432) * v305);
              v308 = v306 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 4440) + 8 * v305) + v307);
              v309 = v306 + 16 * v307;
              do
              {
                if (v309 == v308)
                  break;
                v310 = *v303;
                while (*(_DWORD *)v309 < v310)
                {
                  v309 += 16;
                  if (v309 == v308)
                    goto LABEL_237;
                }
                if (*(_DWORD *)v309 == v310)
                {
                  v311 = (int8x16_t *)(*(_QWORD *)(result + 4336) + 8 * *(_QWORD *)(v309 + 8));
                  v312 = *v311;
                  v313 = v311[1];
                  v314 = *(unsigned int *)(a2 + 16);
                  v315 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v303[1] + (_DWORD)v314 * v301[1]));
                  *v315 = v311->i64[0];
                  v315[v314] = vextq_s8(v312, v312, 8uLL).u64[0];
                  v315[2 * v314] = v313.i64[0];
                  v315[3 * v314] = vextq_s8(v313, v313, 8uLL).u64[0];
                }
                if (v309 == v308)
                  break;
                v303 += 2;
              }
              while (v303 != v304);
            }
LABEL_237:
            v301 += 2;
          }
          while (v301 != v302);
          v270 = a3[6];
          v271 = a3[7];
        }
        if (v270 != v271)
        {
          v316 = a4[15];
          v317 = a4[16];
          if (v316 != v317)
          {
            do
            {
              v318 = a3[6];
              v319 = a3[7];
              if (v318 != v319)
              {
                v320 = *v316;
                v321 = *(_QWORD *)(result + 5416);
                v322 = (*(_DWORD *)(result + 5440) * v320);
                v323 = v321 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 5448) + 8 * v320) + v322);
                v324 = v321 + 16 * v322;
                do
                {
                  if (v324 == v323)
                    break;
                  v325 = *v318;
                  while (*(_DWORD *)v324 < v325)
                  {
                    v324 += 16;
                    if (v324 == v323)
                      goto LABEL_254;
                  }
                  if (*(_DWORD *)v324 == v325)
                  {
                    v326 = (int8x16_t *)(*(_QWORD *)(result + 5344) + 8 * *(_QWORD *)(v324 + 8));
                    v327 = *v326;
                    v328 = v326[1];
                    v329 = *(unsigned int *)(a2 + 16);
                    v330 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v318[1] + (_DWORD)v329 * v316[1]));
                    *v330 = v326->i64[0];
                    v330[v329] = vextq_s8(v327, v327, 8uLL).u64[0];
                    v330[2 * v329] = v328.i64[0];
                    v330[3 * v329] = vextq_s8(v328, v328, 8uLL).u64[0];
                  }
                  if (v324 == v323)
                    break;
                  v318 += 2;
                }
                while (v318 != v319);
              }
LABEL_254:
              v316 += 2;
            }
            while (v316 != v317);
            v270 = a3[6];
            v271 = a3[7];
          }
          if (v270 != v271)
          {
            v331 = a4[18];
            v332 = a4[19];
            while (v331 != v332)
            {
              v333 = a3[6];
              v334 = a3[7];
              if (v333 != v334)
              {
                v335 = *v331;
                v336 = *(_QWORD *)(result + 6424);
                v337 = (*(_DWORD *)(result + 6448) * v335);
                v338 = v336 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 6456) + 8 * v335) + v337);
                v339 = v336 + 16 * v337;
                do
                {
                  if (v339 == v338)
                    break;
                  v340 = *v333;
                  while (*(_DWORD *)v339 < v340)
                  {
                    v339 += 16;
                    if (v339 == v338)
                      goto LABEL_270;
                  }
                  if (*(_DWORD *)v339 == v340)
                  {
                    v341 = *(_QWORD *)(result + 6352) + 8 * *(_QWORD *)(v339 + 8);
                    if (v341 == *(_QWORD *)a2)
                    {
                      v344 = *(_QWORD *)(v341 + 16);
                      v342 = *(int8x16_t *)v341;
                      v343 = vextq_s8(v342, v342, 8uLL).u64[0];
                    }
                    else
                    {
                      v342.i64[0] = *(_QWORD *)v341;
                      v343 = *(_QWORD *)(v341 + 8);
                      v344 = *(_QWORD *)(v341 + 16);
                    }
                    v345 = *(unsigned int *)(a2 + 16);
                    v346 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v333[1] + (_DWORD)v345 * v331[1]));
                    *v346 = v342.i64[0];
                    v346[v345] = v343;
                    v346[2 * v345] = v344;
                  }
                  if (v339 == v338)
                    break;
                  v333 += 2;
                }
                while (v333 != v334);
              }
LABEL_270:
              v331 += 2;
            }
          }
        }
      }
    }
  }
LABEL_287:
  v347 = a3[3];
  v348 = a3[4];
  if (v347 != v348)
  {
    v349 = a4[3];
    v350 = a4[4];
    if (v349 != v350)
    {
      do
      {
        v351 = a3[3];
        v352 = a3[4];
        if (v351 != v352)
        {
          v353 = *v349;
          v354 = *(_QWORD *)(result + 1240);
          v355 = (*(_DWORD *)(result + 1264) * v353);
          v356 = v354 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 1272) + 8 * v353) + v355);
          v357 = v354 + 16 * v355;
          do
          {
            if (v357 == v356)
              break;
            v358 = *v351;
            while (*(_DWORD *)v357 < v358)
            {
              v357 += 16;
              if (v357 == v356)
                goto LABEL_290;
            }
            if (*(_DWORD *)v357 == v358)
            {
              v359 = *(_QWORD *)(result + 1168) + 8 * *(_QWORD *)(v357 + 8);
              if (v359 == *(_QWORD *)a2)
              {
                v935 = *(int8x16_t *)(v359 + 592);
                v938 = *(int8x16_t *)(v359 + 624);
                v868 = vextq_s8(v938, v938, 8uLL).u64[0];
                v929 = *(int8x16_t *)(v359 + 576);
                v932 = *(int8x16_t *)(v359 + 608);
                v867 = vextq_s8(v932, v932, 8uLL).u64[0];
                v866 = vextq_s8(v935, v935, 8uLL).u64[0];
                v865 = vextq_s8(v929, v929, 8uLL).u64[0];
                v876 = *(int8x16_t *)(v359 + 544);
                v877 = *(int8x16_t *)(v359 + 560);
                v885 = vextq_s8(v877, v877, 8uLL).u64[0];
                *(_QWORD *)&v911 = vextq_s8(v876, v876, 8uLL).u64[0];
                v874 = *(int8x16_t *)(v359 + 512);
                v875 = *(int8x16_t *)(v359 + 528);
                v902 = *(int8x16_t *)(v359 + 496);
                *(_QWORD *)&v905 = vextq_s8(v875, v875, 8uLL).u64[0];
                *(_QWORD *)&v914 = vextq_s8(v874, v874, 8uLL).u64[0];
                v377 = *(int8x16_t *)(v359 + 320);
                v376 = *(int8x16_t *)(v359 + 336);
                *(_QWORD *)&v908 = vextq_s8(v902, v902, 8uLL).u64[0];
                v896 = *(int8x16_t *)(v359 + 464);
                v899 = *(int8x16_t *)(v359 + 480);
                v864 = vextq_s8(v899, v899, 8uLL).u64[0];
                v863 = vextq_s8(v896, v896, 8uLL).u64[0];
                v380 = *(int8x16_t *)(v359 + 416);
                v374 = *(int8x16_t *)(v359 + 288);
                v373 = *(int8x16_t *)(v359 + 304);
                v887 = *(int8x16_t *)(v359 + 432);
                v890 = *(int8x16_t *)(v359 + 448);
                v862 = vextq_s8(v890, v890, 8uLL).u64[0];
                v861 = vextq_s8(v887, v887, 8uLL).u64[0];
                v379 = *(int8x16_t *)(v359 + 400);
                v883 = vextq_s8(v380, v380, 8uLL).u64[0];
                v884 = *(int8x16_t *)(v359 + 352);
                v954 = *(int8x16_t *)(v359 + 272);
                *(_QWORD *)&v926 = vextq_s8(v379, v379, 8uLL).u64[0];
                v872 = *(int8x16_t *)(v359 + 368);
                v873 = *(int8x16_t *)(v359 + 384);
                *(_QWORD *)&v923 = vextq_s8(v873, v873, 8uLL).u64[0];
                *(_QWORD *)&v920 = vextq_s8(v872, v872, 8uLL).u64[0];
                *(_QWORD *)&v917 = vextq_s8(v884, v884, 8uLL).u64[0];
                v860 = vextq_s8(v376, v376, 8uLL).u64[0];
                v859 = vextq_s8(v377, v377, 8uLL).u64[0];
                v369 = *(int8x16_t *)(v359 + 192);
                v381 = vextq_s8(v373, v373, 8uLL).u64[0];
                v382 = vextq_s8(v374, v374, 8uLL).u64[0];
                v881 = *(int8x16_t *)(v359 + 208);
                v882 = vextq_s8(v954, v954, 8uLL).u64[0];
                v367 = *(int8x16_t *)(v359 + 160);
                v370 = *(int8x16_t *)(v359 + 176);
                v870 = *(int8x16_t *)(v359 + 240);
                v871 = *(int8x16_t *)(v359 + 256);
                *(_QWORD *)&v371 = vextq_s8(v871, v871, 8uLL).u64[0];
                *(_QWORD *)&v963 = vextq_s8(v870, v870, 8uLL).u64[0];
                v869 = *(_QWORD *)(v359 + 224);
                *(_QWORD *)&v372 = vextq_s8(*(int8x16_t *)(v359 + 224), *(int8x16_t *)(v359 + 224), 8uLL).u64[0];
                v378 = *(int8x16_t *)(v359 + 128);
                v368 = *(int8x16_t *)(v359 + 144);
                *(_QWORD *)&v893 = vextq_s8(v881, v881, 8uLL).u64[0];
                v383 = vextq_s8(v369, v369, 8uLL).u64[0];
                v384 = vextq_s8(v370, v370, 8uLL).u64[0];
                v385 = vextq_s8(v367, v367, 8uLL).u64[0];
                v386 = vextq_s8(v368, v368, 8uLL).u64[0];
                v880 = vextq_s8(v378, v378, 8uLL).u64[0];
                v375 = *(int8x16_t *)(v359 + 80);
                v941 = *(int8x16_t *)(v359 + 96);
                v945 = *(int8x16_t *)(v359 + 112);
                *(_QWORD *)&v366 = vextq_s8(v945, v945, 8uLL).u64[0];
                *(_QWORD *)&v972 = vextq_s8(v941, v941, 8uLL).u64[0];
                *(_QWORD *)&v365 = vextq_s8(v375, v375, 8uLL).u64[0];
                v363 = *(int8x16_t *)(v359 + 32);
                v362 = *(int8x16_t *)(v359 + 48);
                v878 = *(int8x16_t *)(v359 + 64);
                *(_QWORD *)&v364 = vextq_s8(v878, v878, 8uLL).u64[0];
                v387 = vextq_s8(v362, v362, 8uLL).u64[0];
                v388 = vextq_s8(v363, v363, 8uLL).u64[0];
                v361 = *(int8x16_t *)v359;
                v360 = *(int8x16_t *)(v359 + 16);
              }
              else
              {
                v361 = *(int8x16_t *)v359;
                v360 = *(int8x16_t *)(v359 + 16);
                v363 = *(int8x16_t *)(v359 + 32);
                v362 = *(int8x16_t *)(v359 + 48);
                v364 = *(_OWORD *)(v359 + 72);
                v365 = *(_OWORD *)(v359 + 88);
                v366 = *(_OWORD *)(v359 + 120);
                v368 = *(int8x16_t *)(v359 + 144);
                v367 = *(int8x16_t *)(v359 + 160);
                v370 = *(int8x16_t *)(v359 + 176);
                v369 = *(int8x16_t *)(v359 + 192);
                v371 = *(_OWORD *)(v359 + 264);
                v372 = *(_OWORD *)(v359 + 232);
                v374 = *(int8x16_t *)(v359 + 288);
                v373 = *(int8x16_t *)(v359 + 304);
                v963 = *(_OWORD *)(v359 + 248);
                v972 = *(_OWORD *)(v359 + 104);
                v945.i64[0] = *(_QWORD *)(v359 + 112);
                v941.i64[0] = *(_QWORD *)(v359 + 96);
                v375.i64[0] = *(_QWORD *)(v359 + 80);
                v377 = *(int8x16_t *)(v359 + 320);
                v376 = *(int8x16_t *)(v359 + 336);
                v871.i64[0] = *(_QWORD *)(v359 + 256);
                v870.i64[0] = *(_QWORD *)(v359 + 240);
                v893 = *(_OWORD *)(v359 + 216);
                v869 = *(_QWORD *)(v359 + 224);
                v954.i64[0] = *(_QWORD *)(v359 + 272);
                v923 = *(_OWORD *)(v359 + 392);
                v926 = *(_OWORD *)(v359 + 408);
                v917 = *(_OWORD *)(v359 + 360);
                v920 = *(_OWORD *)(v359 + 376);
                v873.i64[0] = *(_QWORD *)(v359 + 384);
                v872.i64[0] = *(_QWORD *)(v359 + 368);
                v911 = *(_OWORD *)(v359 + 552);
                v914 = *(_OWORD *)(v359 + 520);
                v877.i64[0] = *(_QWORD *)(v359 + 560);
                v905 = *(_OWORD *)(v359 + 536);
                v908 = *(_OWORD *)(v359 + 504);
                v876.i64[0] = *(_QWORD *)(v359 + 544);
                v875.i64[0] = *(_QWORD *)(v359 + 528);
                v874.i64[0] = *(_QWORD *)(v359 + 512);
                v935 = *(int8x16_t *)(v359 + 592);
                v938 = *(int8x16_t *)(v359 + 624);
                v868 = vextq_s8(v938, v938, 8uLL).u64[0];
                v929 = *(int8x16_t *)(v359 + 576);
                v932 = *(int8x16_t *)(v359 + 608);
                v867 = vextq_s8(v932, v932, 8uLL).u64[0];
                v378.i64[0] = *(_QWORD *)(v359 + 128);
                v866 = vextq_s8(v935, v935, 8uLL).u64[0];
                v865 = vextq_s8(v929, v929, 8uLL).u64[0];
                v379.i64[0] = *(_QWORD *)(v359 + 400);
                v896 = *(int8x16_t *)(v359 + 464);
                v899 = *(int8x16_t *)(v359 + 480);
                v864 = vextq_s8(v899, v899, 8uLL).u64[0];
                v863 = vextq_s8(v896, v896, 8uLL).u64[0];
                v887 = *(int8x16_t *)(v359 + 432);
                v890 = *(int8x16_t *)(v359 + 448);
                v862 = vextq_s8(v890, v890, 8uLL).u64[0];
                v880 = *(_QWORD *)(v359 + 136);
                v861 = vextq_s8(v887, v887, 8uLL).u64[0];
                v380.i64[0] = *(_QWORD *)(v359 + 416);
                v860 = vextq_s8(v376, v376, 8uLL).u64[0];
                v878.i64[0] = *(_QWORD *)(v359 + 64);
                v859 = vextq_s8(v377, v377, 8uLL).u64[0];
                v882 = *(_QWORD *)(v359 + 280);
                v381 = vextq_s8(v373, v373, 8uLL).u64[0];
                v382 = vextq_s8(v374, v374, 8uLL).u64[0];
                v881.i64[0] = *(_QWORD *)(v359 + 208);
                v383 = vextq_s8(v369, v369, 8uLL).u64[0];
                v883 = *(_QWORD *)(v359 + 424);
                v384 = vextq_s8(v370, v370, 8uLL).u64[0];
                v385 = vextq_s8(v367, v367, 8uLL).u64[0];
                v884.i64[0] = *(_QWORD *)(v359 + 352);
                v386 = vextq_s8(v368, v368, 8uLL).u64[0];
                v885 = *(_QWORD *)(v359 + 568);
                v387 = vextq_s8(v362, v362, 8uLL).u64[0];
                v388 = vextq_s8(v363, v363, 8uLL).u64[0];
                v902.i64[0] = *(_QWORD *)(v359 + 496);
              }
              v879 = *(_QWORD *)(v359 + 640);
              v362.i64[1] = v387;
              v363.i64[1] = v388;
              v360.i64[1] = vextq_s8(v360, v360, 8uLL).u64[0];
              v361.i64[1] = vextq_s8(v361, v361, 8uLL).u64[0];
              *((_QWORD *)&v366 + 1) = v378.i64[0];
              *(_QWORD *)&v389 = v972;
              v390 = v954.i64[0];
              *((_QWORD *)&v389 + 1) = v945.i64[0];
              *((_QWORD *)&v365 + 1) = v941.i64[0];
              v946 = v365;
              v955 = v366;
              *((_QWORD *)&v364 + 1) = v375.i64[0];
              v369.i64[1] = v383;
              v370.i64[1] = v384;
              v367.i64[1] = v385;
              v368.i64[1] = v386;
              *((_QWORD *)&v371 + 1) = v390;
              *(_QWORD *)&v391 = v963;
              *((_QWORD *)&v391 + 1) = v871.i64[0];
              *((_QWORD *)&v372 + 1) = v870.i64[0];
              v964 = v372;
              v973 = v371;
              *(_QWORD *)&v392 = v893;
              *((_QWORD *)&v392 + 1) = v869;
              v376.i64[1] = v860;
              v377.i64[1] = v859;
              v373.i64[1] = v381;
              v374.i64[1] = v382;
              *(_QWORD *)&v394 = v923;
              *(_QWORD *)&v393 = v926;
              *((_QWORD *)&v393 + 1) = v380.i64[0];
              *((_QWORD *)&v394 + 1) = v379.i64[0];
              *(_QWORD *)&v396 = v917;
              *(_QWORD *)&v395 = v920;
              *((_QWORD *)&v395 + 1) = v873.i64[0];
              *((_QWORD *)&v396 + 1) = v872.i64[0];
              *(_QWORD *)&v398 = v896.i64[0];
              *(_QWORD *)&v397 = v899.i64[0];
              *((_QWORD *)&v397 + 1) = v864;
              *((_QWORD *)&v398 + 1) = v863;
              *(_QWORD *)&v400 = v887.i64[0];
              *(_QWORD *)&v399 = v890.i64[0];
              *((_QWORD *)&v399 + 1) = v862;
              *((_QWORD *)&v400 + 1) = v861;
              *(_QWORD *)&v401 = v911;
              *(_QWORD *)&v402 = v914;
              *((_QWORD *)&v401 + 1) = v877.i64[0];
              *(_QWORD *)&v404 = v905;
              *(_QWORD *)&v403 = v908;
              *((_QWORD *)&v404 + 1) = v876.i64[0];
              *((_QWORD *)&v402 + 1) = v875.i64[0];
              *((_QWORD *)&v403 + 1) = v874.i64[0];
              *(_QWORD *)&v405 = v938.i64[0];
              *((_QWORD *)&v405 + 1) = v868;
              *(_QWORD *)&v406 = v932.i64[0];
              *((_QWORD *)&v406 + 1) = v867;
              *(_QWORD *)&v407 = v935.i64[0];
              *((_QWORD *)&v407 + 1) = v866;
              *(_QWORD *)&v408 = v929.i64[0];
              *((_QWORD *)&v408 + 1) = v865;
              v409 = *(unsigned int *)(a2 + 16);
              v410 = *(_QWORD *)a2 + 8 * (v351[1] + (_DWORD)v409 * v349[1]);
              *(int8x16_t *)v410 = v361;
              *(int8x16_t *)(v410 + 16) = v360;
              *(_QWORD *)(v410 + 64) = v878.i64[0];
              *(int8x16_t *)(v410 + 32) = v363;
              *(int8x16_t *)(v410 + 48) = v362;
              v411 = v410 + 8 * v409;
              *(_OWORD *)v411 = v364;
              *(_OWORD *)(v411 + 16) = v946;
              *(_QWORD *)(v411 + 64) = v880;
              *(_OWORD *)(v411 + 32) = v389;
              *(_OWORD *)(v411 + 48) = v955;
              v412 = (int8x16_t *)(v410 + 16 * v409);
              *v412 = v368;
              v412[1] = v367;
              v412[4].i64[0] = v881.i64[0];
              v412[2] = v370;
              v412[3] = v369;
              v413 = v410 + 24 * v409;
              *(_OWORD *)v413 = v392;
              *(_OWORD *)(v413 + 16) = v964;
              *(_QWORD *)(v413 + 64) = v882;
              *(_OWORD *)(v413 + 32) = v391;
              *(_OWORD *)(v413 + 48) = v973;
              v414 = (int8x16_t *)(v410 + 32 * v409);
              *v414 = v374;
              v414[1] = v373;
              v414[4].i64[0] = v884.i64[0];
              v414[2] = v377;
              v414[3] = v376;
              v415 = v410 + 40 * v409;
              *(_OWORD *)v415 = v396;
              *(_OWORD *)(v415 + 16) = v395;
              *(_QWORD *)(v415 + 64) = v883;
              *(_OWORD *)(v415 + 32) = v394;
              *(_OWORD *)(v415 + 48) = v393;
              v416 = v410 + 48 * v409;
              *(_OWORD *)v416 = v400;
              *(_OWORD *)(v416 + 16) = v399;
              *(_QWORD *)(v416 + 64) = v902.i64[0];
              *(_OWORD *)(v416 + 32) = v398;
              *(_OWORD *)(v416 + 48) = v397;
              v417 = v410 + 56 * v409;
              *(_OWORD *)v417 = v403;
              *(_OWORD *)(v417 + 16) = v402;
              *(_QWORD *)(v417 + 64) = v885;
              *(_OWORD *)(v417 + 32) = v404;
              *(_OWORD *)(v417 + 48) = v401;
              v418 = v410 + (v409 << 6);
              *(_OWORD *)v418 = v408;
              *(_OWORD *)(v418 + 16) = v407;
              *(_QWORD *)(v418 + 64) = v879;
              *(_OWORD *)(v418 + 32) = v406;
              *(_OWORD *)(v418 + 48) = v405;
            }
            if (v357 == v356)
              break;
            v351 += 2;
          }
          while (v351 != v352);
        }
LABEL_290:
        v349 += 2;
      }
      while (v349 != v350);
      v347 = a3[3];
      v348 = a3[4];
    }
    if (v347 != v348)
    {
      v419 = a4[6];
      v420 = a4[7];
      if (v419 == v420)
      {
        if (v347 == v348)
          goto LABEL_403;
        goto LABEL_325;
      }
      do
      {
        v421 = a3[3];
        v422 = a3[4];
        if (v421 != v422)
        {
          v423 = *v419;
          v424 = *(_QWORD *)(result + 2248);
          v425 = (*(_DWORD *)(result + 2272) * v423);
          v426 = v424 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 2280) + 8 * v423) + v425);
          v427 = v424 + 16 * v425;
          do
          {
            if (v427 == v426)
              break;
            v428 = *v421;
            while (*(_DWORD *)v427 < v428)
            {
              v427 += 16;
              if (v427 == v426)
                goto LABEL_311;
            }
            if (*(_DWORD *)v427 == v428)
            {
              v429 = *(_QWORD *)(result + 2176) + 8 * *(_QWORD *)(v427 + 8);
              v430 = *(_QWORD *)a2 + 8 * (v421[1] + *(_DWORD *)(a2 + 16) * v419[1]);
              v431 = *(_QWORD *)(v429 + 64);
              v432 = *(_OWORD *)(v429 + 48);
              v433 = *(_OWORD *)v429;
              v434 = *(_OWORD *)(v429 + 16);
              *(_OWORD *)(v430 + 32) = *(_OWORD *)(v429 + 32);
              *(_OWORD *)(v430 + 48) = v432;
              *(_QWORD *)(v430 + 64) = v431;
              *(_OWORD *)v430 = v433;
              *(_OWORD *)(v430 + 16) = v434;
            }
            if (v427 == v426)
              break;
            v421 += 2;
          }
          while (v421 != v422);
        }
LABEL_311:
        v419 += 2;
      }
      while (v419 != v420);
      v347 = a3[3];
      v348 = a3[4];
      if (v347 != v348)
      {
LABEL_325:
        v435 = a4[9];
        v436 = a4[10];
        if (v435 != v436)
        {
          do
          {
            v437 = a3[3];
            v438 = a3[4];
            if (v437 != v438)
            {
              v439 = *v435;
              v440 = *(_QWORD *)(result + 3256);
              v441 = (*(_DWORD *)(result + 3280) * v439);
              v442 = v440 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 3288) + 8 * v439) + v441);
              v443 = v440 + 16 * v441;
              do
              {
                if (v443 == v442)
                  break;
                v444 = *v437;
                while (*(_DWORD *)v443 < v444)
                {
                  v443 += 16;
                  if (v443 == v442)
                    goto LABEL_327;
                }
                if (*(_DWORD *)v443 == v444)
                {
                  v445 = *(_QWORD *)(result + 3184) + 8 * *(_QWORD *)(v443 + 8);
                  if (v445 == *(_QWORD *)a2)
                  {
                    v461 = *(int8x16_t *)(v445 + 336);
                    v463 = *(int8x16_t *)(v445 + 304);
                    v462 = *(int8x16_t *)(v445 + 320);
                    v924 = *(int8x16_t *)(v445 + 400);
                    v927 = *(int8x16_t *)(v445 + 416);
                    v473 = vextq_s8(v927, v927, 8uLL).u64[0];
                    v942 = *(int8x16_t *)(v445 + 352);
                    *(_QWORD *)&v947 = vextq_s8(v924, v924, 8uLL).u64[0];
                    v464 = *(int8x16_t *)(v445 + 288);
                    v965 = *(int8x16_t *)(v445 + 368);
                    v974 = *(int8x16_t *)(v445 + 384);
                    *(_QWORD *)&v460 = vextq_s8(v974, v974, 8uLL).u64[0];
                    *(_QWORD *)&v474 = vextq_s8(v965, v965, 8uLL).u64[0];
                    *(_QWORD *)&v475 = vextq_s8(v942, v942, 8uLL).u64[0];
                    v897 = vextq_s8(v461, v461, 8uLL).u64[0];
                    v894 = vextq_s8(v462, v462, 8uLL).u64[0];
                    v891 = vextq_s8(v463, v463, 8uLL).u64[0];
                    v457 = *(int8x16_t *)(v445 + 176);
                    v456 = *(int8x16_t *)(v445 + 192);
                    v888 = vextq_s8(v464, v464, 8uLL).u64[0];
                    v918 = *(int8x16_t *)(v445 + 272);
                    v921 = *(int8x16_t *)(v445 + 256);
                    v936 = *(int8x16_t *)(v445 + 208);
                    v939 = vextq_s8(v918, v918, 8uLL).u64[0];
                    *(_QWORD *)&v956 = vextq_s8(v921, v921, 8uLL).u64[0];
                    v455 = *(int8x16_t *)(v445 + 144);
                    v454 = *(int8x16_t *)(v445 + 160);
                    v912 = *(int8x16_t *)(v445 + 224);
                    v915 = *(int8x16_t *)(v445 + 240);
                    *(_QWORD *)&v459 = vextq_s8(v915, v915, 8uLL).u64[0];
                    *(_QWORD *)&v458 = vextq_s8(v912, v912, 8uLL).u64[0];
                    *(_QWORD *)&v476 = vextq_s8(v936, v936, 8uLL).u64[0];
                    v465 = vextq_s8(v456, v456, 8uLL).u64[0];
                    v466 = vextq_s8(v457, v457, 8uLL).u64[0];
                    v467 = vextq_s8(v454, v454, 8uLL).u64[0];
                    v468 = vextq_s8(v455, v455, 8uLL).u64[0];
                    v906 = *(int8x16_t *)(v445 + 112);
                    v909 = *(int8x16_t *)(v445 + 128);
                    v933 = vextq_s8(v909, v909, 8uLL).u64[0];
                    *(_QWORD *)&v453 = vextq_s8(v906, v906, 8uLL).u64[0];
                    v448 = *(int8x16_t *)(v445 + 48);
                    v900 = *(int8x16_t *)(v445 + 80);
                    v903 = *(int8x16_t *)(v445 + 96);
                    *(_QWORD *)&v452 = vextq_s8(v903, v903, 8uLL).u64[0];
                    *(_QWORD *)&v451 = vextq_s8(v900, v900, 8uLL).u64[0];
                    v930 = *(int8x16_t *)(v445 + 64);
                    *(_QWORD *)&v450 = vextq_s8(v930, v930, 8uLL).u64[0];
                    v446 = *(int8x16_t *)(v445 + 16);
                    v449 = *(int8x16_t *)(v445 + 32);
                    v469 = vextq_s8(v448, v448, 8uLL).u64[0];
                    v470 = vextq_s8(v449, v449, 8uLL).u64[0];
                    v447 = *(int8x16_t *)v445;
                    v471 = vextq_s8(v446, v446, 8uLL).u64[0];
                    v472 = vextq_s8(v447, v447, 8uLL).u64[0];
                  }
                  else
                  {
                    v447 = *(int8x16_t *)v445;
                    v446 = *(int8x16_t *)(v445 + 16);
                    v449 = *(int8x16_t *)(v445 + 32);
                    v448 = *(int8x16_t *)(v445 + 48);
                    v450 = *(_OWORD *)(v445 + 72);
                    v451 = *(_OWORD *)(v445 + 88);
                    v452 = *(_OWORD *)(v445 + 104);
                    v453 = *(_OWORD *)(v445 + 120);
                    v455 = *(int8x16_t *)(v445 + 144);
                    v454 = *(int8x16_t *)(v445 + 160);
                    v457 = *(int8x16_t *)(v445 + 176);
                    v456 = *(int8x16_t *)(v445 + 192);
                    v909.i64[0] = *(_QWORD *)(v445 + 128);
                    v458 = *(_OWORD *)(v445 + 232);
                    v906.i64[0] = *(_QWORD *)(v445 + 112);
                    v459 = *(_OWORD *)(v445 + 248);
                    v903.i64[0] = *(_QWORD *)(v445 + 96);
                    v900.i64[0] = *(_QWORD *)(v445 + 80);
                    v921.i64[0] = *(_QWORD *)(v445 + 256);
                    v915.i64[0] = *(_QWORD *)(v445 + 240);
                    v912.i64[0] = *(_QWORD *)(v445 + 224);
                    v956 = *(_OWORD *)(v445 + 264);
                    v918.i64[0] = *(_QWORD *)(v445 + 272);
                    v460 = *(_OWORD *)(v445 + 392);
                    v947 = *(_OWORD *)(v445 + 408);
                    v927.i64[0] = *(_QWORD *)(v445 + 416);
                    v924.i64[0] = *(_QWORD *)(v445 + 400);
                    v462 = *(int8x16_t *)(v445 + 320);
                    v461 = *(int8x16_t *)(v445 + 336);
                    v965.i64[0] = *(_QWORD *)(v445 + 368);
                    v974.i64[0] = *(_QWORD *)(v445 + 384);
                    v894 = vextq_s8(v462, v462, 8uLL).u64[0];
                    v897 = vextq_s8(v461, v461, 8uLL).u64[0];
                    v464 = *(int8x16_t *)(v445 + 288);
                    v463 = *(int8x16_t *)(v445 + 304);
                    v888 = vextq_s8(v464, v464, 8uLL).u64[0];
                    v891 = vextq_s8(v463, v463, 8uLL).u64[0];
                    v933 = *(_QWORD *)(v445 + 136);
                    v465 = vextq_s8(v456, v456, 8uLL).u64[0];
                    v930.i64[0] = *(_QWORD *)(v445 + 64);
                    v466 = vextq_s8(v457, v457, 8uLL).u64[0];
                    v467 = vextq_s8(v454, v454, 8uLL).u64[0];
                    v939 = *(_QWORD *)(v445 + 280);
                    v468 = vextq_s8(v455, v455, 8uLL).u64[0];
                    v936.i64[0] = *(_QWORD *)(v445 + 208);
                    v469 = vextq_s8(v448, v448, 8uLL).u64[0];
                    v470 = vextq_s8(v449, v449, 8uLL).u64[0];
                    v471 = vextq_s8(v446, v446, 8uLL).u64[0];
                    v472 = vextq_s8(v447, v447, 8uLL).u64[0];
                    v942.i64[0] = *(_QWORD *)(v445 + 352);
                    v473 = *(_QWORD *)(v445 + 424);
                    v474 = *(_OWORD *)(v445 + 376);
                    v475 = *(_OWORD *)(v445 + 360);
                    v476 = *(_OWORD *)(v445 + 216);
                  }
                  v448.i64[1] = v469;
                  v449.i64[1] = v470;
                  v446.i64[1] = v471;
                  v447.i64[1] = v472;
                  *((_QWORD *)&v453 + 1) = v909.i64[0];
                  *((_QWORD *)&v452 + 1) = v906.i64[0];
                  *((_QWORD *)&v451 + 1) = v903.i64[0];
                  *((_QWORD *)&v450 + 1) = v900.i64[0];
                  v456.i64[1] = v465;
                  v457.i64[1] = v466;
                  v454.i64[1] = v467;
                  v455.i64[1] = v468;
                  *(_QWORD *)&v478 = v947;
                  *(_QWORD *)&v477 = v956;
                  *((_QWORD *)&v477 + 1) = v918.i64[0];
                  *((_QWORD *)&v459 + 1) = v921.i64[0];
                  *((_QWORD *)&v458 + 1) = v915.i64[0];
                  *((_QWORD *)&v476 + 1) = v912.i64[0];
                  v461.i64[1] = v897;
                  v462.i64[1] = v894;
                  v463.i64[1] = v891;
                  v464.i64[1] = v888;
                  *((_QWORD *)&v478 + 1) = v927.i64[0];
                  *((_QWORD *)&v460 + 1) = v924.i64[0];
                  v479 = *(unsigned int *)(a2 + 16);
                  *((_QWORD *)&v474 + 1) = v974.i64[0];
                  *((_QWORD *)&v475 + 1) = v965.i64[0];
                  v480 = *(_QWORD *)a2 + 8 * (v437[1] + (_DWORD)v479 * v435[1]);
                  *(int8x16_t *)v480 = v447;
                  *(int8x16_t *)(v480 + 16) = v446;
                  *(_QWORD *)(v480 + 64) = v930.i64[0];
                  *(int8x16_t *)(v480 + 32) = v449;
                  *(int8x16_t *)(v480 + 48) = v448;
                  v481 = v480 + 8 * v479;
                  *(_OWORD *)v481 = v450;
                  *(_OWORD *)(v481 + 16) = v451;
                  *(_QWORD *)(v481 + 64) = v933;
                  *(_OWORD *)(v481 + 32) = v452;
                  *(_OWORD *)(v481 + 48) = v453;
                  v482 = (int8x16_t *)(v480 + 16 * v479);
                  *v482 = v455;
                  v482[1] = v454;
                  v482[4].i64[0] = v936.i64[0];
                  v482[2] = v457;
                  v482[3] = v456;
                  v483 = v480 + 24 * v479;
                  *(_OWORD *)v483 = v476;
                  *(_OWORD *)(v483 + 16) = v458;
                  *(_QWORD *)(v483 + 64) = v939;
                  *(_OWORD *)(v483 + 32) = v459;
                  *(_OWORD *)(v483 + 48) = v477;
                  v484 = (int8x16_t *)(v480 + 32 * v479);
                  *v484 = v464;
                  v484[1] = v463;
                  v484[4].i64[0] = v942.i64[0];
                  v484[2] = v462;
                  v484[3] = v461;
                  v485 = v480 + 40 * v479;
                  *(_OWORD *)v485 = v475;
                  *(_OWORD *)(v485 + 16) = v474;
                  *(_QWORD *)(v485 + 64) = v473;
                  *(_OWORD *)(v485 + 32) = v460;
                  *(_OWORD *)(v485 + 48) = v478;
                }
                if (v443 == v442)
                  break;
                v437 += 2;
              }
              while (v437 != v438);
            }
LABEL_327:
            v435 += 2;
          }
          while (v435 != v436);
          v347 = a3[3];
          v348 = a3[4];
        }
        if (v347 != v348)
        {
          v486 = a4[12];
          v487 = a4[13];
          if (v486 != v487)
          {
            do
            {
              v488 = a3[3];
              v489 = a3[4];
              if (v488 != v489)
              {
                v490 = *v486;
                v491 = *(_QWORD *)(result + 4264);
                v492 = (*(_DWORD *)(result + 4288) * v490);
                v493 = v491 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 4296) + 8 * v490) + v492);
                v494 = v491 + 16 * v492;
                do
                {
                  if (v494 == v493)
                    break;
                  v495 = *v488;
                  while (*(_DWORD *)v494 < v495)
                  {
                    v494 += 16;
                    if (v494 == v493)
                      goto LABEL_347;
                  }
                  if (*(_DWORD *)v494 == v495)
                  {
                    v496 = *(_QWORD *)(result + 4192) + 8 * *(_QWORD *)(v494 + 8);
                    if (v496 == *(_QWORD *)a2)
                    {
                      v527 = *(int8x16_t *)(v496 + 272);
                      v528 = *(int8x16_t *)(v496 + 224);
                      v502 = *(int8x16_t *)(v496 + 192);
                      v522 = *(int8x16_t *)(v496 + 208);
                      v509 = *(int8x16_t *)(v496 + 160);
                      v503 = *(int8x16_t *)(v496 + 176);
                      v514 = *(int8x16_t *)(v496 + 128);
                      v510 = *(int8x16_t *)(v496 + 144);
                      v948 = vextq_s8(v527, v527, 8uLL).u64[0];
                      v957 = *(int8x16_t *)(v496 + 240);
                      v966 = *(int8x16_t *)(v496 + 256);
                      v525.i64[0] = vextq_s8(v966, v966, 8uLL).u64[0];
                      v505.i64[0] = vextq_s8(v957, v957, 8uLL).u64[0];
                      v506.i64[0] = vextq_s8(v528, v528, 8uLL).u64[0];
                      v504.i64[0] = vextq_s8(v522, v522, 8uLL).u64[0];
                      v507 = vextq_s8(v502, v502, 8uLL).u64[0];
                      v508 = vextq_s8(v503, v503, 8uLL).u64[0];
                      v511 = vextq_s8(v509, v509, 8uLL).u64[0];
                      v518 = *(int8x16_t *)(v496 + 96);
                      v516 = *(int8x16_t *)(v496 + 112);
                      v513 = vextq_s8(v510, v510, 8uLL).u64[0];
                      v520 = vextq_s8(v514, v514, 8uLL).u64[0];
                      v512.i64[0] = vextq_s8(v516, v516, 8uLL).u64[0];
                      v519 = *(int8x16_t *)(v496 + 80);
                      v515.i64[0] = vextq_s8(v518, v518, 8uLL).u64[0];
                      v517.i64[0] = vextq_s8(v519, v519, 8uLL).u64[0];
                      v975 = *(int8x16_t *)(v496 + 64);
                      v501.i64[0] = vextq_s8(v975, v975, 8uLL).u64[0];
                      v499 = *(int8x16_t *)(v496 + 32);
                      v500 = *(int8x16_t *)(v496 + 48);
                      v521 = vextq_s8(v500, v500, 8uLL).u64[0];
                      v523 = vextq_s8(v499, v499, 8uLL).u64[0];
                      v498 = *(int8x16_t *)v496;
                      v497 = *(int8x16_t *)(v496 + 16);
                      v524 = vextq_s8(v497, v497, 8uLL).u64[0];
                      v526 = vextq_s8(v498, v498, 8uLL).u64[0];
                    }
                    else
                    {
                      v975.i64[0] = *(_QWORD *)(v496 + 64);
                      v498 = *(int8x16_t *)v496;
                      v497 = *(int8x16_t *)(v496 + 16);
                      v499 = *(int8x16_t *)(v496 + 32);
                      v500 = *(int8x16_t *)(v496 + 48);
                      v501 = *(int8x16_t *)(v496 + 72);
                      v503 = *(int8x16_t *)(v496 + 176);
                      v502 = *(int8x16_t *)(v496 + 192);
                      v504 = *(int8x16_t *)(v496 + 216);
                      v505 = *(int8x16_t *)(v496 + 248);
                      v506 = *(int8x16_t *)(v496 + 232);
                      v957.i64[0] = vextq_s8(v506, v506, 8uLL).u64[0];
                      v966.i64[0] = vextq_s8(v505, v505, 8uLL).u64[0];
                      v507 = vextq_s8(v502, v502, 8uLL).u64[0];
                      v508 = vextq_s8(v503, v503, 8uLL).u64[0];
                      v510 = *(int8x16_t *)(v496 + 144);
                      v509 = *(int8x16_t *)(v496 + 160);
                      v511 = vextq_s8(v509, v509, 8uLL).u64[0];
                      v512 = *(int8x16_t *)(v496 + 120);
                      v513 = vextq_s8(v510, v510, 8uLL).u64[0];
                      v514.i64[0] = vextq_s8(v512, v512, 8uLL).u64[0];
                      v515 = *(int8x16_t *)(v496 + 104);
                      v516.i64[0] = vextq_s8(v515, v515, 8uLL).u64[0];
                      v517 = *(int8x16_t *)(v496 + 88);
                      v518.i64[0] = vextq_s8(v517, v517, 8uLL).u64[0];
                      v519.i64[0] = vextq_s8(v501, v501, 8uLL).u64[0];
                      v520 = *(_QWORD *)(v496 + 136);
                      v521 = vextq_s8(v500, v500, 8uLL).u64[0];
                      v522.i64[0] = *(_QWORD *)(v496 + 208);
                      v523 = vextq_s8(v499, v499, 8uLL).u64[0];
                      v524 = vextq_s8(v497, v497, 8uLL).u64[0];
                      v525 = *(int8x16_t *)(v496 + 264);
                      v526 = vextq_s8(v498, v498, 8uLL).u64[0];
                      v527.i64[0] = vextq_s8(v525, v525, 8uLL).u64[0];
                      v948 = *(_QWORD *)(v496 + 280);
                      v528.i64[0] = vextq_s8(v504, v504, 8uLL).u64[0];
                    }
                    v500.i64[1] = v521;
                    v499.i64[1] = v523;
                    v497.i64[1] = v524;
                    v498.i64[1] = v526;
                    v529 = *(unsigned int *)(a2 + 16);
                    v512.i64[1] = v514.i64[0];
                    v515.i64[1] = v516.i64[0];
                    v517.i64[1] = v518.i64[0];
                    v501.i64[1] = v519.i64[0];
                    v502.i64[1] = v507;
                    v503.i64[1] = v508;
                    v509.i64[1] = v511;
                    v510.i64[1] = v513;
                    v525.i64[1] = v527.i64[0];
                    v505.i64[1] = v966.i64[0];
                    v506.i64[1] = v957.i64[0];
                    v504.i64[1] = v528.i64[0];
                    v530 = *(_QWORD *)a2 + 8 * (v488[1] + (_DWORD)v529 * v486[1]);
                    *(int8x16_t *)v530 = v498;
                    *(int8x16_t *)(v530 + 16) = v497;
                    *(_QWORD *)(v530 + 64) = v975.i64[0];
                    *(int8x16_t *)(v530 + 32) = v499;
                    *(int8x16_t *)(v530 + 48) = v500;
                    v531 = (int8x16_t *)(v530 + 8 * v529);
                    *v531 = v501;
                    v531[1] = v517;
                    v531[4].i64[0] = v520;
                    v531[2] = v515;
                    v531[3] = v512;
                    v532 = (int8x16_t *)(v530 + 16 * v529);
                    *v532 = v510;
                    v532[1] = v509;
                    v532[4].i64[0] = v522.i64[0];
                    v532[2] = v503;
                    v532[3] = v502;
                    v533 = (int8x16_t *)(v530 + 24 * v529);
                    *v533 = v504;
                    v533[1] = v506;
                    v533[4].i64[0] = v948;
                    v533[2] = v505;
                    v533[3] = v525;
                  }
                  if (v494 == v493)
                    break;
                  v488 += 2;
                }
                while (v488 != v489);
              }
LABEL_347:
              v486 += 2;
            }
            while (v486 != v487);
            v347 = a3[3];
            v348 = a3[4];
          }
          if (v347 != v348)
          {
            v534 = a4[15];
            v535 = a4[16];
            if (v534 != v535)
            {
              do
              {
                v536 = a3[3];
                v537 = a3[4];
                if (v536 != v537)
                {
                  v538 = *v534;
                  v539 = *(_QWORD *)(result + 5272);
                  v540 = (*(_DWORD *)(result + 5296) * v538);
                  v541 = v539 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 5304) + 8 * v538) + v540);
                  v542 = v539 + 16 * v540;
                  do
                  {
                    if (v542 == v541)
                      break;
                    v543 = *v536;
                    while (*(_DWORD *)v542 < v543)
                    {
                      v542 += 16;
                      if (v542 == v541)
                        goto LABEL_367;
                    }
                    if (*(_DWORD *)v542 == v543)
                    {
                      v544 = *(_QWORD *)(result + 5200) + 8 * *(_QWORD *)(v542 + 8);
                      if (v544 == *(_QWORD *)a2)
                      {
                        v575 = *(int8x16_t *)(v544 + 272);
                        v576 = *(int8x16_t *)(v544 + 224);
                        v550 = *(int8x16_t *)(v544 + 192);
                        v570 = *(int8x16_t *)(v544 + 208);
                        v557 = *(int8x16_t *)(v544 + 160);
                        v551 = *(int8x16_t *)(v544 + 176);
                        v562 = *(int8x16_t *)(v544 + 128);
                        v558 = *(int8x16_t *)(v544 + 144);
                        v949 = vextq_s8(v575, v575, 8uLL).u64[0];
                        v958 = *(int8x16_t *)(v544 + 240);
                        v967 = *(int8x16_t *)(v544 + 256);
                        v573.i64[0] = vextq_s8(v967, v967, 8uLL).u64[0];
                        v553.i64[0] = vextq_s8(v958, v958, 8uLL).u64[0];
                        v554.i64[0] = vextq_s8(v576, v576, 8uLL).u64[0];
                        v552.i64[0] = vextq_s8(v570, v570, 8uLL).u64[0];
                        v555 = vextq_s8(v550, v550, 8uLL).u64[0];
                        v556 = vextq_s8(v551, v551, 8uLL).u64[0];
                        v559 = vextq_s8(v557, v557, 8uLL).u64[0];
                        v566 = *(int8x16_t *)(v544 + 96);
                        v564 = *(int8x16_t *)(v544 + 112);
                        v561 = vextq_s8(v558, v558, 8uLL).u64[0];
                        v568 = vextq_s8(v562, v562, 8uLL).u64[0];
                        v560.i64[0] = vextq_s8(v564, v564, 8uLL).u64[0];
                        v567 = *(int8x16_t *)(v544 + 80);
                        v563.i64[0] = vextq_s8(v566, v566, 8uLL).u64[0];
                        v565.i64[0] = vextq_s8(v567, v567, 8uLL).u64[0];
                        v976 = *(int8x16_t *)(v544 + 64);
                        v549.i64[0] = vextq_s8(v976, v976, 8uLL).u64[0];
                        v547 = *(int8x16_t *)(v544 + 32);
                        v548 = *(int8x16_t *)(v544 + 48);
                        v569 = vextq_s8(v548, v548, 8uLL).u64[0];
                        v571 = vextq_s8(v547, v547, 8uLL).u64[0];
                        v546 = *(int8x16_t *)v544;
                        v545 = *(int8x16_t *)(v544 + 16);
                        v572 = vextq_s8(v545, v545, 8uLL).u64[0];
                        v574 = vextq_s8(v546, v546, 8uLL).u64[0];
                      }
                      else
                      {
                        v976.i64[0] = *(_QWORD *)(v544 + 64);
                        v546 = *(int8x16_t *)v544;
                        v545 = *(int8x16_t *)(v544 + 16);
                        v547 = *(int8x16_t *)(v544 + 32);
                        v548 = *(int8x16_t *)(v544 + 48);
                        v549 = *(int8x16_t *)(v544 + 72);
                        v551 = *(int8x16_t *)(v544 + 176);
                        v550 = *(int8x16_t *)(v544 + 192);
                        v552 = *(int8x16_t *)(v544 + 216);
                        v553 = *(int8x16_t *)(v544 + 248);
                        v554 = *(int8x16_t *)(v544 + 232);
                        v958.i64[0] = vextq_s8(v554, v554, 8uLL).u64[0];
                        v967.i64[0] = vextq_s8(v553, v553, 8uLL).u64[0];
                        v555 = vextq_s8(v550, v550, 8uLL).u64[0];
                        v556 = vextq_s8(v551, v551, 8uLL).u64[0];
                        v558 = *(int8x16_t *)(v544 + 144);
                        v557 = *(int8x16_t *)(v544 + 160);
                        v559 = vextq_s8(v557, v557, 8uLL).u64[0];
                        v560 = *(int8x16_t *)(v544 + 120);
                        v561 = vextq_s8(v558, v558, 8uLL).u64[0];
                        v562.i64[0] = vextq_s8(v560, v560, 8uLL).u64[0];
                        v563 = *(int8x16_t *)(v544 + 104);
                        v564.i64[0] = vextq_s8(v563, v563, 8uLL).u64[0];
                        v565 = *(int8x16_t *)(v544 + 88);
                        v566.i64[0] = vextq_s8(v565, v565, 8uLL).u64[0];
                        v567.i64[0] = vextq_s8(v549, v549, 8uLL).u64[0];
                        v568 = *(_QWORD *)(v544 + 136);
                        v569 = vextq_s8(v548, v548, 8uLL).u64[0];
                        v570.i64[0] = *(_QWORD *)(v544 + 208);
                        v571 = vextq_s8(v547, v547, 8uLL).u64[0];
                        v572 = vextq_s8(v545, v545, 8uLL).u64[0];
                        v573 = *(int8x16_t *)(v544 + 264);
                        v574 = vextq_s8(v546, v546, 8uLL).u64[0];
                        v575.i64[0] = vextq_s8(v573, v573, 8uLL).u64[0];
                        v949 = *(_QWORD *)(v544 + 280);
                        v576.i64[0] = vextq_s8(v552, v552, 8uLL).u64[0];
                      }
                      v548.i64[1] = v569;
                      v547.i64[1] = v571;
                      v545.i64[1] = v572;
                      v546.i64[1] = v574;
                      v577 = *(unsigned int *)(a2 + 16);
                      v560.i64[1] = v562.i64[0];
                      v563.i64[1] = v564.i64[0];
                      v565.i64[1] = v566.i64[0];
                      v549.i64[1] = v567.i64[0];
                      v550.i64[1] = v555;
                      v551.i64[1] = v556;
                      v557.i64[1] = v559;
                      v558.i64[1] = v561;
                      v573.i64[1] = v575.i64[0];
                      v553.i64[1] = v967.i64[0];
                      v554.i64[1] = v958.i64[0];
                      v552.i64[1] = v576.i64[0];
                      v578 = *(_QWORD *)a2 + 8 * (v536[1] + (_DWORD)v577 * v534[1]);
                      *(int8x16_t *)v578 = v546;
                      *(int8x16_t *)(v578 + 16) = v545;
                      *(_QWORD *)(v578 + 64) = v976.i64[0];
                      *(int8x16_t *)(v578 + 32) = v547;
                      *(int8x16_t *)(v578 + 48) = v548;
                      v579 = (int8x16_t *)(v578 + 8 * v577);
                      *v579 = v549;
                      v579[1] = v565;
                      v579[4].i64[0] = v568;
                      v579[2] = v563;
                      v579[3] = v560;
                      v580 = (int8x16_t *)(v578 + 16 * v577);
                      *v580 = v558;
                      v580[1] = v557;
                      v580[4].i64[0] = v570.i64[0];
                      v580[2] = v551;
                      v580[3] = v550;
                      v581 = (int8x16_t *)(v578 + 24 * v577);
                      *v581 = v552;
                      v581[1] = v554;
                      v581[4].i64[0] = v949;
                      v581[2] = v553;
                      v581[3] = v573;
                    }
                    if (v542 == v541)
                      break;
                    v536 += 2;
                  }
                  while (v536 != v537);
                }
LABEL_367:
                v534 += 2;
              }
              while (v534 != v535);
              v347 = a3[3];
              v348 = a3[4];
            }
            if (v347 != v348)
            {
              v582 = a4[18];
              v583 = a4[19];
              while (v582 != v583)
              {
                v584 = a3[3];
                v585 = a3[4];
                if (v584 != v585)
                {
                  v586 = *v582;
                  v587 = *(_QWORD *)(result + 6280);
                  v588 = (*(_DWORD *)(result + 6304) * v586);
                  v589 = v587 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 6312) + 8 * v586) + v588);
                  v590 = v587 + 16 * v588;
                  do
                  {
                    if (v590 == v589)
                      break;
                    v591 = *v584;
                    while (*(_DWORD *)v590 < v591)
                    {
                      v590 += 16;
                      if (v590 == v589)
                        goto LABEL_386;
                    }
                    if (*(_DWORD *)v590 == v591)
                    {
                      v592 = *(_QWORD *)(result + 6208) + 8 * *(_QWORD *)(v590 + 8);
                      if (v592 == *(_QWORD *)a2)
                      {
                        v602 = *(int8x16_t *)(v592 + 176);
                        v601 = *(int8x16_t *)(v592 + 192);
                        v600 = *(int8x16_t *)(v592 + 144);
                        v599 = *(int8x16_t *)(v592 + 160);
                        v604 = *(int8x16_t *)(v592 + 112);
                        v603 = *(int8x16_t *)(v592 + 128);
                        v606 = *(int8x16_t *)(v592 + 80);
                        v605 = *(int8x16_t *)(v592 + 96);
                        v610 = *(int8x16_t *)(v592 + 48);
                        v616 = *(int8x16_t *)(v592 + 64);
                        v607 = vextq_s8(v601, v601, 8uLL).u64[0];
                        v608 = vextq_s8(v602, v602, 8uLL).u64[0];
                        v609 = vextq_s8(v599, v599, 8uLL).u64[0];
                        v612 = vextq_s8(v600, v600, 8uLL).u64[0];
                        v613 = vextq_s8(v603, v603, 8uLL).u64[0];
                        *(_QWORD *)&v598 = vextq_s8(v604, v604, 8uLL).u64[0];
                        *(_QWORD *)&v597 = vextq_s8(v605, v605, 8uLL).u64[0];
                        *(_QWORD *)&v596 = vextq_s8(v606, v606, 8uLL).u64[0];
                        v593 = *(int8x16_t *)(v592 + 16);
                        v611 = *(int8x16_t *)(v592 + 32);
                        *(_QWORD *)&v595 = vextq_s8(v616, v616, 8uLL).u64[0];
                        v614 = vextq_s8(v610, v610, 8uLL).u64[0];
                        v615 = vextq_s8(v611, v611, 8uLL).u64[0];
                        v594 = *(int8x16_t *)v592;
                      }
                      else
                      {
                        v594 = *(int8x16_t *)v592;
                        v593 = *(int8x16_t *)(v592 + 16);
                        v595 = *(_OWORD *)(v592 + 72);
                        v596 = *(_OWORD *)(v592 + 88);
                        v597 = *(_OWORD *)(v592 + 104);
                        v598 = *(_OWORD *)(v592 + 120);
                        v600 = *(int8x16_t *)(v592 + 144);
                        v599 = *(int8x16_t *)(v592 + 160);
                        v602 = *(int8x16_t *)(v592 + 176);
                        v601 = *(int8x16_t *)(v592 + 192);
                        v603.i64[0] = *(_QWORD *)(v592 + 128);
                        v604.i64[0] = *(_QWORD *)(v592 + 112);
                        v605.i64[0] = *(_QWORD *)(v592 + 96);
                        v606.i64[0] = *(_QWORD *)(v592 + 80);
                        v607 = vextq_s8(v601, v601, 8uLL).u64[0];
                        v608 = vextq_s8(v602, v602, 8uLL).u64[0];
                        v609 = vextq_s8(v599, v599, 8uLL).u64[0];
                        v611 = *(int8x16_t *)(v592 + 32);
                        v610 = *(int8x16_t *)(v592 + 48);
                        v612 = vextq_s8(v600, v600, 8uLL).u64[0];
                        v613 = *(_QWORD *)(v592 + 136);
                        v614 = vextq_s8(v610, v610, 8uLL).u64[0];
                        v615 = vextq_s8(v611, v611, 8uLL).u64[0];
                        v616.i64[0] = *(_QWORD *)(v592 + 64);
                      }
                      v617 = *(_QWORD *)(v592 + 208);
                      v618 = *(unsigned int *)(a2 + 16);
                      v610.i64[1] = v614;
                      v611.i64[1] = v615;
                      v593.i64[1] = vextq_s8(v593, v593, 8uLL).u64[0];
                      v594.i64[1] = vextq_s8(v594, v594, 8uLL).u64[0];
                      *((_QWORD *)&v598 + 1) = v603.i64[0];
                      *((_QWORD *)&v597 + 1) = v604.i64[0];
                      *((_QWORD *)&v596 + 1) = v605.i64[0];
                      *((_QWORD *)&v595 + 1) = v606.i64[0];
                      v601.i64[1] = v607;
                      v602.i64[1] = v608;
                      v599.i64[1] = v609;
                      v600.i64[1] = v612;
                      v619 = *(_QWORD *)a2 + 8 * (v584[1] + (_DWORD)v618 * v582[1]);
                      *(int8x16_t *)v619 = v594;
                      *(int8x16_t *)(v619 + 16) = v593;
                      *(_QWORD *)(v619 + 64) = v616.i64[0];
                      *(int8x16_t *)(v619 + 32) = v611;
                      *(int8x16_t *)(v619 + 48) = v610;
                      v620 = v619 + 8 * v618;
                      *(_OWORD *)v620 = v595;
                      *(_OWORD *)(v620 + 16) = v596;
                      *(_QWORD *)(v620 + 64) = v613;
                      *(_OWORD *)(v620 + 32) = v597;
                      *(_OWORD *)(v620 + 48) = v598;
                      v621 = (int8x16_t *)(v619 + 16 * v618);
                      *v621 = v600;
                      v621[1] = v599;
                      v621[4].i64[0] = v617;
                      v621[2] = v602;
                      v621[3] = v601;
                    }
                    if (v590 == v589)
                      break;
                    v584 += 2;
                  }
                  while (v584 != v585);
                }
LABEL_386:
                v582 += 2;
              }
            }
          }
        }
      }
    }
  }
LABEL_403:
  v622 = *a3;
  v623 = a3[1];
  if (*a3 != v623)
  {
    v624 = *a4;
    v625 = a4[1];
    if (*a4 != v625)
    {
      do
      {
        v626 = *a3;
        v627 = a3[1];
        if (*a3 != v627)
        {
          v628 = *v624;
          v629 = *(_QWORD *)(result + 88);
          v630 = (*(_DWORD *)(result + 112) * v628);
          v631 = v629 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v628) + v630);
          v632 = v629 + 16 * v630;
          do
          {
            if (v632 == v631)
              break;
            v633 = *v626;
            while (*(_DWORD *)v632 < v633)
            {
              v632 += 16;
              if (v632 == v631)
                goto LABEL_406;
            }
            if (*(_DWORD *)v632 == v633)
            {
              v634 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v632 + 8));
              if (v634 == *(int8x16_t **)a2)
              {
                v644 = v634[16];
                v643 = v634[17];
                v642 = v634[14];
                v641 = v634[15];
                v640 = v634[12];
                v639 = v634[13];
                v638 = v634[10];
                v637 = v634[11];
                v650 = v634[8];
                v649 = v634[9];
                v968 = vextq_s8(v644, v644, 8uLL).u64[0];
                v977 = vextq_s8(v643, v643, 8uLL).u64[0];
                v645 = vextq_s8(v642, v642, 8uLL).u64[0];
                v646 = vextq_s8(v639, v639, 8uLL).u64[0];
                v647 = vextq_s8(v640, v640, 8uLL).u64[0];
                v950 = vextq_s8(v637, v637, 8uLL).u64[0];
                v959 = vextq_s8(v641, v641, 8uLL).u64[0];
                v648 = vextq_s8(v638, v638, 8uLL).u64[0];
                v636 = v634[6];
                v635 = v634[7];
              }
              else
              {
                v636 = v634[6];
                v635 = v634[7];
                v638 = v634[10];
                v637 = v634[11];
                v640 = v634[12];
                v639 = v634[13];
                v642 = v634[14];
                v641 = v634[15];
                v644 = v634[16];
                v643 = v634[17];
                v968 = vextq_s8(v644, v644, 8uLL).u64[0];
                v977 = vextq_s8(v643, v643, 8uLL).u64[0];
                v645 = vextq_s8(v642, v642, 8uLL).u64[0];
                v646 = vextq_s8(v639, v639, 8uLL).u64[0];
                v647 = vextq_s8(v640, v640, 8uLL).u64[0];
                v950 = vextq_s8(v637, v637, 8uLL).u64[0];
                v959 = vextq_s8(v641, v641, 8uLL).u64[0];
                v648 = vextq_s8(v638, v638, 8uLL).u64[0];
                v650 = v634[8];
                v649 = v634[9];
              }
              v652 = v634[4];
              v651 = v634[5];
              v654 = v634[2];
              v653 = v634[3];
              v656 = *v634;
              v655 = v634[1];
              v642.i64[1] = v645;
              v639.i64[1] = v646;
              v640.i64[1] = v647;
              v654.i64[1] = vextq_s8(v654, v654, 8uLL).u64[0];
              v657 = *(unsigned int *)(a2 + 16);
              v655.i64[1] = vextq_s8(v655, v655, 8uLL).u64[0];
              v656.i64[1] = vextq_s8(v656, v656, 8uLL).u64[0];
              v651.i64[1] = vextq_s8(v651, v651, 8uLL).u64[0];
              v652.i64[1] = vextq_s8(v652, v652, 8uLL).u64[0];
              v653.i64[1] = vextq_s8(v653, v653, 8uLL).u64[0];
              v650.i64[1] = vextq_s8(v650, v650, 8uLL).u64[0];
              v635.i64[1] = vextq_s8(v635, v635, 8uLL).u64[0];
              v636.i64[1] = vextq_s8(v636, v636, 8uLL).u64[0];
              v637.i64[1] = v950;
              v638.i64[1] = v648;
              v649.i64[1] = vextq_s8(v649, v649, 8uLL).u64[0];
              v643.i64[1] = v977;
              v644.i64[1] = v968;
              v641.i64[1] = v959;
              v658 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v626[1] + (_DWORD)v657 * v624[1]));
              *v658 = v656;
              v658[1] = v655;
              v658[2] = v654;
              v659 = (int8x16_t *)((char *)v658 + 8 * v657);
              *v659 = v653;
              v659[1] = v652;
              v659[2] = v651;
              v660 = &v658[v657];
              *v660 = v636;
              v660[1] = v635;
              v660[2] = v650;
              v661 = (int8x16_t *)((char *)v658 + 24 * v657);
              *v661 = v649;
              v661[1] = v638;
              v661[2] = v637;
              v662 = &v658[2 * v657];
              *v662 = v640;
              v662[1] = v639;
              v662[2] = v642;
              v663 = (int8x16_t *)((char *)v658 + 40 * v657);
              *v663 = v641;
              v663[1] = v644;
              v663[2] = v643;
            }
            if (v632 == v631)
              break;
            v626 += 2;
          }
          while (v626 != v627);
        }
LABEL_406:
        v624 += 2;
      }
      while (v624 != v625);
      v622 = *a3;
      v623 = a3[1];
    }
    if (v622 != v623)
    {
      v664 = a4[3];
      v665 = a4[4];
      if (v664 != v665)
      {
        do
        {
          v666 = *a3;
          v667 = a3[1];
          if (*a3 != v667)
          {
            v668 = *v664;
            v669 = *(_QWORD *)(result + 1096);
            v670 = (*(_DWORD *)(result + 1120) * v668);
            v671 = v669 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 1128) + 8 * v668) + v670);
            v672 = v669 + 16 * v670;
            do
            {
              if (v672 == v671)
                break;
              v673 = *v666;
              while (*(_DWORD *)v672 < v673)
              {
                v672 += 16;
                if (v672 == v671)
                  goto LABEL_426;
              }
              if (*(_DWORD *)v672 == v673)
              {
                v674 = (int8x16_t *)(*(_QWORD *)(result + 1024) + 8 * *(_QWORD *)(v672 + 8));
                if (v674 == *(int8x16_t **)a2)
                {
                  v680 = v674[17];
                  v969 = v674[25];
                  v978 = v674[26];
                  v679 = vextq_s8(v978, v978, 8uLL).u64[0];
                  v683 = v674[15];
                  v681 = v674[16];
                  v951 = v674[19];
                  v960 = v674[24];
                  v913 = vextq_s8(v960, v960, 8uLL).u64[0];
                  v937 = v674[22];
                  v940 = v674[23];
                  v928 = vextq_s8(v940, v940, 8uLL).u64[0];
                  v931 = v674[20];
                  v925 = vextq_s8(v937, v937, 8uLL).u64[0];
                  v677 = v674[13];
                  v684 = v674[14];
                  v934 = v674[21];
                  v922 = vextq_s8(v934, v934, 8uLL).u64[0];
                  v910 = vextq_s8(v931, v931, 8uLL).u64[0];
                  v919 = vextq_s8(v951, v951, 8uLL).u64[0];
                  v685 = v674[11];
                  v678 = v674[12];
                  v943 = v674[18];
                  v916 = vextq_s8(v943, v943, 8uLL).u64[0];
                  v682 = vextq_s8(v969, v969, 8uLL).u64[0];
                  v907 = vextq_s8(v680, v680, 8uLL).u64[0];
                  v904 = vextq_s8(v681, v681, 8uLL).u64[0];
                  v687 = v674[9];
                  v686 = v674[10];
                  v901 = vextq_s8(v683, v683, 8uLL).u64[0];
                  v898 = vextq_s8(v684, v684, 8uLL).u64[0];
                  v895 = vextq_s8(v677, v677, 8uLL).u64[0];
                  v675 = v674[7];
                  v688 = v674[8];
                  v889 = vextq_s8(v678, v678, 8uLL).u64[0];
                  v892 = vextq_s8(v685, v685, 8uLL).u64[0];
                  v886 = vextq_s8(v686, v686, 8uLL).u64[0];
                  v692 = v674[5];
                  v676 = v674[6];
                  v689 = vextq_s8(v687, v687, 8uLL).u64[0];
                  v690 = vextq_s8(v688, v688, 8uLL).u64[0];
                  v691 = vextq_s8(v675, v675, 8uLL).u64[0];
                  v697 = v674[3];
                  v693 = v674[4];
                  v694 = vextq_s8(v676, v676, 8uLL).u64[0];
                  v695 = vextq_s8(v692, v692, 8uLL).u64[0];
                  v696 = vextq_s8(v693, v693, 8uLL).u64[0];
                  v701 = v674[1];
                  v698 = v674[2];
                  v699 = vextq_s8(v697, v697, 8uLL).u64[0];
                  v700 = vextq_s8(v698, v698, 8uLL).u64[0];
                  v702 = *v674;
                }
                else
                {
                  v676 = v674[6];
                  v675 = v674[7];
                  v678 = v674[12];
                  v677 = v674[13];
                  v969 = v674[25];
                  v978 = v674[26];
                  v679 = vextq_s8(v978, v978, 8uLL).u64[0];
                  v951 = v674[19];
                  v960 = v674[24];
                  v937 = v674[22];
                  v940 = v674[23];
                  v925 = vextq_s8(v937, v937, 8uLL).u64[0];
                  v928 = vextq_s8(v940, v940, 8uLL).u64[0];
                  v931 = v674[20];
                  v934 = v674[21];
                  v910 = vextq_s8(v931, v931, 8uLL).u64[0];
                  v913 = vextq_s8(v960, v960, 8uLL).u64[0];
                  v919 = vextq_s8(v951, v951, 8uLL).u64[0];
                  v922 = vextq_s8(v934, v934, 8uLL).u64[0];
                  v681 = v674[16];
                  v680 = v674[17];
                  v943 = v674[18];
                  v916 = vextq_s8(v943, v943, 8uLL).u64[0];
                  v682 = vextq_s8(v969, v969, 8uLL).u64[0];
                  v904 = vextq_s8(v681, v681, 8uLL).u64[0];
                  v907 = vextq_s8(v680, v680, 8uLL).u64[0];
                  v684 = v674[14];
                  v683 = v674[15];
                  v898 = vextq_s8(v684, v684, 8uLL).u64[0];
                  v901 = vextq_s8(v683, v683, 8uLL).u64[0];
                  v686 = v674[10];
                  v685 = v674[11];
                  v892 = vextq_s8(v685, v685, 8uLL).u64[0];
                  v895 = vextq_s8(v677, v677, 8uLL).u64[0];
                  v886 = vextq_s8(v686, v686, 8uLL).u64[0];
                  v889 = vextq_s8(v678, v678, 8uLL).u64[0];
                  v688 = v674[8];
                  v687 = v674[9];
                  v689 = vextq_s8(v687, v687, 8uLL).u64[0];
                  v690 = vextq_s8(v688, v688, 8uLL).u64[0];
                  v691 = vextq_s8(v675, v675, 8uLL).u64[0];
                  v693 = v674[4];
                  v692 = v674[5];
                  v694 = vextq_s8(v676, v676, 8uLL).u64[0];
                  v695 = vextq_s8(v692, v692, 8uLL).u64[0];
                  v696 = vextq_s8(v693, v693, 8uLL).u64[0];
                  v698 = v674[2];
                  v697 = v674[3];
                  v699 = vextq_s8(v697, v697, 8uLL).u64[0];
                  v700 = vextq_s8(v698, v698, 8uLL).u64[0];
                  v702 = *v674;
                  v701 = v674[1];
                }
                v703.i64[0] = v978.i64[0];
                v703.i64[1] = v679;
                v704.i64[0] = v969.i64[0];
                v704.i64[1] = v682;
                v705.i64[0] = v960.i64[0];
                v705.i64[1] = v913;
                v684.i64[1] = v898;
                v677.i64[1] = v895;
                v678.i64[1] = v889;
                v698.i64[1] = v700;
                v701.i64[1] = vextq_s8(v701, v701, 8uLL).u64[0];
                v702.i64[1] = vextq_s8(v702, v702, 8uLL).u64[0];
                v692.i64[1] = v695;
                v693.i64[1] = v696;
                v697.i64[1] = v699;
                v688.i64[1] = v690;
                v675.i64[1] = v691;
                v676.i64[1] = v694;
                v685.i64[1] = v892;
                v686.i64[1] = v886;
                v687.i64[1] = v689;
                v680.i64[1] = v907;
                v681.i64[1] = v904;
                v683.i64[1] = v901;
                v706.i64[0] = v931.i64[0];
                v706.i64[1] = v910;
                v707 = *(unsigned int *)(a2 + 16);
                v708.i64[0] = v951.i64[0];
                v708.i64[1] = v919;
                v709.i64[0] = v943.i64[0];
                v709.i64[1] = v916;
                *(_QWORD *)&v710 = v940.i64[0];
                *((_QWORD *)&v710 + 1) = v928;
                *(_QWORD *)&v711 = v937.i64[0];
                *((_QWORD *)&v711 + 1) = v925;
                *(_QWORD *)&v712 = v934.i64[0];
                *((_QWORD *)&v712 + 1) = v922;
                v713 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v666[1] + (_DWORD)v707 * v664[1]));
                *v713 = v702;
                v713[1] = v701;
                v713[2] = v698;
                v714 = (int8x16_t *)((char *)v713 + 8 * v707);
                *v714 = v697;
                v714[1] = v693;
                v714[2] = v692;
                v715 = &v713[v707];
                *v715 = v676;
                v715[1] = v675;
                v715[2] = v688;
                v716 = (int8x16_t *)((char *)v713 + 24 * v707);
                *v716 = v687;
                v716[1] = v686;
                v716[2] = v685;
                v717 = &v713[2 * v707];
                *v717 = v678;
                v717[1] = v677;
                v717[2] = v684;
                v718 = (int8x16_t *)((char *)v713 + 40 * v707);
                *v718 = v683;
                v718[1] = v681;
                v718[2] = v680;
                v719 = &v713[3 * v707];
                *v719 = v709;
                v719[1] = v708;
                v719[2] = v706;
                v720 = &v713->i8[56 * v707];
                *(_OWORD *)v720 = v712;
                *((_OWORD *)v720 + 1) = v711;
                *((_OWORD *)v720 + 2) = v710;
                v721 = &v713[4 * v707];
                *v721 = v705;
                v721[1] = v704;
                v721[2] = v703;
              }
              if (v672 == v671)
                break;
              v666 += 2;
            }
            while (v666 != v667);
          }
LABEL_426:
          v664 += 2;
        }
        while (v664 != v665);
        v622 = *a3;
        v623 = a3[1];
      }
      if (v622 != v623)
      {
        v722 = a4[6];
        v723 = a4[7];
        if (v722 == v723)
        {
          if (v622 == v623)
            return result;
          goto LABEL_461;
        }
        do
        {
          v724 = *a3;
          v725 = a3[1];
          if (*a3 != v725)
          {
            v726 = *v722;
            v727 = *(_QWORD *)(result + 2104);
            v728 = (*(_DWORD *)(result + 2128) * v726);
            v729 = v727 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 2136) + 8 * v726) + v728);
            v730 = v727 + 16 * v728;
            do
            {
              if (v730 == v729)
                break;
              v731 = *v724;
              while (*(_DWORD *)v730 < v731)
              {
                v730 += 16;
                if (v730 == v729)
                  goto LABEL_447;
              }
              if (*(_DWORD *)v730 == v731)
              {
                v732 = (__int128 *)(*(_QWORD *)(result + 2032) + 8 * *(_QWORD *)(v730 + 8));
                v733 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v724[1] + *(_DWORD *)(a2 + 16) * v722[1]));
                v734 = v732[2];
                v735 = *v732;
                v733[1] = v732[1];
                v733[2] = v734;
                *v733 = v735;
              }
              if (v730 == v729)
                break;
              v724 += 2;
            }
            while (v724 != v725);
          }
LABEL_447:
          v722 += 2;
        }
        while (v722 != v723);
        v622 = *a3;
        v623 = a3[1];
        if (*a3 != v623)
        {
LABEL_461:
          v736 = a4[9];
          v737 = a4[10];
          if (v736 != v737)
          {
            do
            {
              v738 = *a3;
              v739 = a3[1];
              if (*a3 != v739)
              {
                v740 = *v736;
                v741 = *(_QWORD *)(result + 3112);
                v742 = (*(_DWORD *)(result + 3136) * v740);
                v743 = v741 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 3144) + 8 * v740) + v742);
                v744 = v741 + 16 * v742;
                do
                {
                  if (v744 == v743)
                    break;
                  v745 = *v738;
                  while (*(_DWORD *)v744 < v745)
                  {
                    v744 += 16;
                    if (v744 == v743)
                      goto LABEL_463;
                  }
                  if (*(_DWORD *)v744 == v745)
                  {
                    v746 = (int8x16_t *)(*(_QWORD *)(result + 3040) + 8 * *(_QWORD *)(v744 + 8));
                    if (v746 == *(int8x16_t **)a2)
                    {
                      v756 = v746[16];
                      v755 = v746[17];
                      v754 = v746[14];
                      v753 = v746[15];
                      v752 = v746[12];
                      v751 = v746[13];
                      v750 = v746[10];
                      v749 = v746[11];
                      v762 = v746[8];
                      v761 = v746[9];
                      v970 = vextq_s8(v756, v756, 8uLL).u64[0];
                      v979 = vextq_s8(v755, v755, 8uLL).u64[0];
                      v757 = vextq_s8(v754, v754, 8uLL).u64[0];
                      v758 = vextq_s8(v751, v751, 8uLL).u64[0];
                      v759 = vextq_s8(v752, v752, 8uLL).u64[0];
                      v952 = vextq_s8(v749, v749, 8uLL).u64[0];
                      v961 = vextq_s8(v753, v753, 8uLL).u64[0];
                      v760 = vextq_s8(v750, v750, 8uLL).u64[0];
                      v748 = v746[6];
                      v747 = v746[7];
                    }
                    else
                    {
                      v748 = v746[6];
                      v747 = v746[7];
                      v750 = v746[10];
                      v749 = v746[11];
                      v752 = v746[12];
                      v751 = v746[13];
                      v754 = v746[14];
                      v753 = v746[15];
                      v756 = v746[16];
                      v755 = v746[17];
                      v970 = vextq_s8(v756, v756, 8uLL).u64[0];
                      v979 = vextq_s8(v755, v755, 8uLL).u64[0];
                      v757 = vextq_s8(v754, v754, 8uLL).u64[0];
                      v758 = vextq_s8(v751, v751, 8uLL).u64[0];
                      v759 = vextq_s8(v752, v752, 8uLL).u64[0];
                      v952 = vextq_s8(v749, v749, 8uLL).u64[0];
                      v961 = vextq_s8(v753, v753, 8uLL).u64[0];
                      v760 = vextq_s8(v750, v750, 8uLL).u64[0];
                      v762 = v746[8];
                      v761 = v746[9];
                    }
                    v764 = v746[4];
                    v763 = v746[5];
                    v766 = v746[2];
                    v765 = v746[3];
                    v768 = *v746;
                    v767 = v746[1];
                    v754.i64[1] = v757;
                    v751.i64[1] = v758;
                    v752.i64[1] = v759;
                    v766.i64[1] = vextq_s8(v766, v766, 8uLL).u64[0];
                    v769 = *(unsigned int *)(a2 + 16);
                    v767.i64[1] = vextq_s8(v767, v767, 8uLL).u64[0];
                    v768.i64[1] = vextq_s8(v768, v768, 8uLL).u64[0];
                    v763.i64[1] = vextq_s8(v763, v763, 8uLL).u64[0];
                    v764.i64[1] = vextq_s8(v764, v764, 8uLL).u64[0];
                    v765.i64[1] = vextq_s8(v765, v765, 8uLL).u64[0];
                    v762.i64[1] = vextq_s8(v762, v762, 8uLL).u64[0];
                    v747.i64[1] = vextq_s8(v747, v747, 8uLL).u64[0];
                    v748.i64[1] = vextq_s8(v748, v748, 8uLL).u64[0];
                    v749.i64[1] = v952;
                    v750.i64[1] = v760;
                    v761.i64[1] = vextq_s8(v761, v761, 8uLL).u64[0];
                    v755.i64[1] = v979;
                    v756.i64[1] = v970;
                    v753.i64[1] = v961;
                    v770 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v738[1] + (_DWORD)v769 * v736[1]));
                    *v770 = v768;
                    v770[1] = v767;
                    v770[2] = v766;
                    v771 = (int8x16_t *)((char *)v770 + 8 * v769);
                    *v771 = v765;
                    v771[1] = v764;
                    v771[2] = v763;
                    v772 = &v770[v769];
                    *v772 = v748;
                    v772[1] = v747;
                    v772[2] = v762;
                    v773 = (int8x16_t *)((char *)v770 + 24 * v769);
                    *v773 = v761;
                    v773[1] = v750;
                    v773[2] = v749;
                    v774 = &v770[2 * v769];
                    *v774 = v752;
                    v774[1] = v751;
                    v774[2] = v754;
                    v775 = (int8x16_t *)((char *)v770 + 40 * v769);
                    *v775 = v753;
                    v775[1] = v756;
                    v775[2] = v755;
                  }
                  if (v744 == v743)
                    break;
                  v738 += 2;
                }
                while (v738 != v739);
              }
LABEL_463:
              v736 += 2;
            }
            while (v736 != v737);
            v622 = *a3;
            v623 = a3[1];
          }
          if (v622 != v623)
          {
            v776 = a4[12];
            v777 = a4[13];
            if (v776 != v777)
            {
              do
              {
                v778 = *a3;
                v779 = a3[1];
                if (*a3 != v779)
                {
                  v780 = *v776;
                  v781 = *(_QWORD *)(result + 4120);
                  v782 = (*(_DWORD *)(result + 4144) * v780);
                  v783 = v781 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 4152) + 8 * v780) + v782);
                  v784 = v781 + 16 * v782;
                  do
                  {
                    if (v784 == v783)
                      break;
                    v785 = *v778;
                    while (*(_DWORD *)v784 < v785)
                    {
                      v784 += 16;
                      if (v784 == v783)
                        goto LABEL_483;
                    }
                    if (*(_DWORD *)v784 == v785)
                    {
                      v786 = (int8x16_t *)(*(_QWORD *)(result + 4048) + 8 * *(_QWORD *)(v784 + 8));
                      if (v786 == *(int8x16_t **)a2)
                      {
                        v796 = v786[10];
                        v795 = v786[11];
                        v794 = v786[8];
                        v793 = v786[9];
                        v792 = v786[6];
                        v791 = v786[7];
                        v790 = v786[4];
                        v789 = v786[5];
                        v788 = v786[2];
                        v787 = v786[3];
                      }
                      else
                      {
                        v788 = v786[2];
                        v787 = v786[3];
                        v790 = v786[4];
                        v789 = v786[5];
                        v792 = v786[6];
                        v791 = v786[7];
                        v794 = v786[8];
                        v793 = v786[9];
                        v796 = v786[10];
                        v795 = v786[11];
                      }
                      v798 = *v786;
                      v797 = v786[1];
                      v799 = *(unsigned int *)(a2 + 16);
                      v788.i64[1] = vextq_s8(v788, v788, 8uLL).u64[0];
                      v797.i64[1] = vextq_s8(v797, v797, 8uLL).u64[0];
                      v798.i64[1] = vextq_s8(v798, v798, 8uLL).u64[0];
                      v789.i64[1] = vextq_s8(v789, v789, 8uLL).u64[0];
                      v790.i64[1] = vextq_s8(v790, v790, 8uLL).u64[0];
                      v787.i64[1] = vextq_s8(v787, v787, 8uLL).u64[0];
                      v794.i64[1] = vextq_s8(v794, v794, 8uLL).u64[0];
                      v791.i64[1] = vextq_s8(v791, v791, 8uLL).u64[0];
                      v792.i64[1] = vextq_s8(v792, v792, 8uLL).u64[0];
                      v795.i64[1] = vextq_s8(v795, v795, 8uLL).u64[0];
                      v796.i64[1] = vextq_s8(v796, v796, 8uLL).u64[0];
                      v800 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v778[1] + (_DWORD)v799 * v776[1]));
                      v793.i64[1] = vextq_s8(v793, v793, 8uLL).u64[0];
                      *v800 = v798;
                      v800[1] = v797;
                      v800[2] = v788;
                      v801 = (int8x16_t *)((char *)v800 + 8 * v799);
                      *v801 = v787;
                      v801[1] = v790;
                      v801[2] = v789;
                      v802 = &v800[v799];
                      *v802 = v792;
                      v802[1] = v791;
                      v802[2] = v794;
                      v803 = (int8x16_t *)((char *)v800 + 24 * v799);
                      *v803 = v793;
                      v803[1] = v796;
                      v803[2] = v795;
                    }
                    if (v784 == v783)
                      break;
                    v778 += 2;
                  }
                  while (v778 != v779);
                }
LABEL_483:
                v776 += 2;
              }
              while (v776 != v777);
              v622 = *a3;
              v623 = a3[1];
            }
            if (v622 != v623)
            {
              v804 = a4[15];
              v805 = a4[16];
              if (v804 != v805)
              {
                do
                {
                  v806 = *a3;
                  v807 = a3[1];
                  if (*a3 != v807)
                  {
                    v808 = *v804;
                    v809 = *(_QWORD *)(result + 5128);
                    v810 = (*(_DWORD *)(result + 5152) * v808);
                    v811 = v809 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 5160) + 8 * v808) + v810);
                    v812 = v809 + 16 * v810;
                    do
                    {
                      if (v812 == v811)
                        break;
                      v813 = *v806;
                      while (*(_DWORD *)v812 < v813)
                      {
                        v812 += 16;
                        if (v812 == v811)
                          goto LABEL_503;
                      }
                      if (*(_DWORD *)v812 == v813)
                      {
                        v814 = (int8x16_t *)(*(_QWORD *)(result + 5056) + 8 * *(_QWORD *)(v812 + 8));
                        if (v814 == *(int8x16_t **)a2)
                        {
                          v824 = v814[10];
                          v823 = v814[11];
                          v822 = v814[8];
                          v821 = v814[9];
                          v820 = v814[6];
                          v819 = v814[7];
                          v818 = v814[4];
                          v817 = v814[5];
                          v816 = v814[2];
                          v815 = v814[3];
                        }
                        else
                        {
                          v816 = v814[2];
                          v815 = v814[3];
                          v818 = v814[4];
                          v817 = v814[5];
                          v820 = v814[6];
                          v819 = v814[7];
                          v822 = v814[8];
                          v821 = v814[9];
                          v824 = v814[10];
                          v823 = v814[11];
                        }
                        v826 = *v814;
                        v825 = v814[1];
                        v827 = *(unsigned int *)(a2 + 16);
                        v816.i64[1] = vextq_s8(v816, v816, 8uLL).u64[0];
                        v825.i64[1] = vextq_s8(v825, v825, 8uLL).u64[0];
                        v826.i64[1] = vextq_s8(v826, v826, 8uLL).u64[0];
                        v817.i64[1] = vextq_s8(v817, v817, 8uLL).u64[0];
                        v818.i64[1] = vextq_s8(v818, v818, 8uLL).u64[0];
                        v815.i64[1] = vextq_s8(v815, v815, 8uLL).u64[0];
                        v822.i64[1] = vextq_s8(v822, v822, 8uLL).u64[0];
                        v819.i64[1] = vextq_s8(v819, v819, 8uLL).u64[0];
                        v820.i64[1] = vextq_s8(v820, v820, 8uLL).u64[0];
                        v823.i64[1] = vextq_s8(v823, v823, 8uLL).u64[0];
                        v824.i64[1] = vextq_s8(v824, v824, 8uLL).u64[0];
                        v828 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v806[1] + (_DWORD)v827 * v804[1]));
                        v821.i64[1] = vextq_s8(v821, v821, 8uLL).u64[0];
                        *v828 = v826;
                        v828[1] = v825;
                        v828[2] = v816;
                        v829 = (int8x16_t *)((char *)v828 + 8 * v827);
                        *v829 = v815;
                        v829[1] = v818;
                        v829[2] = v817;
                        v830 = &v828[v827];
                        *v830 = v820;
                        v830[1] = v819;
                        v830[2] = v822;
                        v831 = (int8x16_t *)((char *)v828 + 24 * v827);
                        *v831 = v821;
                        v831[1] = v824;
                        v831[2] = v823;
                      }
                      if (v812 == v811)
                        break;
                      v806 += 2;
                    }
                    while (v806 != v807);
                  }
LABEL_503:
                  v804 += 2;
                }
                while (v804 != v805);
                v622 = *a3;
                v623 = a3[1];
              }
              if (v622 != v623)
              {
                v832 = a4[18];
                v833 = a4[19];
                while (v832 != v833)
                {
                  v834 = *a3;
                  v835 = a3[1];
                  if (*a3 != v835)
                  {
                    v836 = *v832;
                    v837 = *(_QWORD *)(result + 6136);
                    v838 = (*(_DWORD *)(result + 6160) * v836);
                    v839 = v837 + 16 * (*(_QWORD *)(*(_QWORD *)(result + 6168) + 8 * v836) + v838);
                    v840 = v837 + 16 * v838;
                    do
                    {
                      if (v840 == v839)
                        break;
                      v841 = *v834;
                      while (*(_DWORD *)v840 < v841)
                      {
                        v840 += 16;
                        if (v840 == v839)
                          goto LABEL_522;
                      }
                      if (*(_DWORD *)v840 == v841)
                      {
                        v842 = (int8x16_t *)(*(_QWORD *)(result + 6064) + 8 * *(_QWORD *)(v840 + 8));
                        if (v842 == *(int8x16_t **)a2)
                        {
                          v847 = v842[7];
                          v849 = v842[8];
                          v853 = v842[5];
                          v848 = v842[6];
                          v845 = v842[3];
                          v854 = v842[4];
                          v843 = v842[1];
                          v846 = v842[2];
                          v850 = vextq_s8(v849, v849, 8uLL).u64[0];
                          v851 = vextq_s8(v847, v847, 8uLL).u64[0];
                          v852 = vextq_s8(v848, v848, 8uLL).u64[0];
                          v844 = *v842;
                        }
                        else
                        {
                          v844 = *v842;
                          v843 = v842[1];
                          v846 = v842[2];
                          v845 = v842[3];
                          v848 = v842[6];
                          v847 = v842[7];
                          v849 = v842[8];
                          v850 = vextq_s8(v849, v849, 8uLL).u64[0];
                          v851 = vextq_s8(v847, v847, 8uLL).u64[0];
                          v852 = vextq_s8(v848, v848, 8uLL).u64[0];
                          v854 = v842[4];
                          v853 = v842[5];
                        }
                        v855 = *(unsigned int *)(a2 + 16);
                        v846.i64[1] = vextq_s8(v846, v846, 8uLL).u64[0];
                        v843.i64[1] = vextq_s8(v843, v843, 8uLL).u64[0];
                        v844.i64[1] = vextq_s8(v844, v844, 8uLL).u64[0];
                        v853.i64[1] = vextq_s8(v853, v853, 8uLL).u64[0];
                        v854.i64[1] = vextq_s8(v854, v854, 8uLL).u64[0];
                        v845.i64[1] = vextq_s8(v845, v845, 8uLL).u64[0];
                        v849.i64[1] = v850;
                        v847.i64[1] = v851;
                        v848.i64[1] = v852;
                        v856 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v834[1] + (_DWORD)v855 * v832[1]));
                        *v856 = v844;
                        v856[1] = v843;
                        v856[2] = v846;
                        v857 = (int8x16_t *)((char *)v856 + 8 * v855);
                        *v857 = v845;
                        v857[1] = v854;
                        v857[2] = v853;
                        v858 = &v856[v855];
                        *v858 = v848;
                        v858[1] = v847;
                        v858[2] = v849;
                      }
                      if (v840 == v839)
                        break;
                      v834 += 2;
                    }
                    while (v834 != v835);
                  }
LABEL_522:
                  v832 += 2;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_20F5A947C(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  int64x2_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  char *v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  __int128 *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  char *v71;
  size_t v72;
  uint64_t *v73;
  _BYTE *v74;
  BOOL v75;
  uint64_t v76;
  int64x2_t v77;
  int64x2_t *v78;
  uint64_t v79;
  int64_t v80;
  uint64_t v81;
  int64x2_t *v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  __int128 *v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  const double *v96;
  uint64_t v97;
  unint64_t v98;
  float64x2_t v99;
  float64x2_t *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unsigned int v105;
  _QWORD *v107;
  unint64_t v108;
  char *v110;
  unint64_t v111;
  unsigned int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = a3;
    v4 = a2;
    v6 = 0;
    v7 = a1 + 40;
    v107 = (_QWORD *)(a1 + 16);
    v102 = HIDWORD(a3);
    v105 = 1;
    v103 = a1 + 40;
    while (1)
    {
      v8 = *(_QWORD *)(a1 + 88);
      v9 = (*(_DWORD *)(a1 + 112) * v6);
      v10 = *(_QWORD *)(a1 + 120);
      v11 = *(_QWORD *)(v10 + 8 * v6);
      if (v11)
      {
        v12 = *(_QWORD *)(a1 + 48);
        v13 = *(_QWORD *)(a1 + 56);
        v14 = *(_QWORD *)(a1 + 80);
        v15 = 16 * v11;
        v16 = (uint64_t *)(v8 + 16 * v9 + 8);
        do
        {
          if (v13 == v12)
            v18 = 0;
          else
            v18 = ((v13 - v12) << 6) - 1;
          v19 = *(_QWORD *)(a1 + 72) + v14;
          if (v18 == v19)
          {
            sub_20EDB36DC(v7);
            v12 = *(_QWORD *)(a1 + 48);
            v13 = *(_QWORD *)(a1 + 56);
            v19 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
          }
          v17 = *v16;
          v16 += 2;
          *(_QWORD *)(*(_QWORD *)(v12 + ((v19 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v19 & 0x1FF)) = v17;
          v14 = *(_QWORD *)(a1 + 80) + 1;
          *(_QWORD *)(a1 + 80) = v14;
          v15 -= 16;
        }
        while (v15);
        v10 = *(_QWORD *)(a1 + 120);
        v8 = *(_QWORD *)(a1 + 88);
        v9 = (*(_DWORD *)(a1 + 112) * v6);
      }
      *(_QWORD *)(v10 + 8 * v6) = 0;
      v20 = v6 + 1;
      v21 = *(_DWORD *)(a1 + 8);
      v104 = v6 + 1;
      if (v21 < (int)v6 + 1)
        v20 = *(_DWORD *)(a1 + 8);
      if (v20)
        break;
LABEL_3:
      ++v105;
      v7 = v103;
      v6 = v104;
      if (v104 >= *(unsigned int *)(a1 + 12))
        return;
    }
    v22 = 0;
    v23 = (char *)(v8 + 16 * v9);
    v24 = (char *)(v8 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v6) + v9));
    v113 = 3 * v6 + v102;
    if (v21 >= v105)
      v21 = v105;
    v112 = v21;
    v110 = (char *)(v8 + 16 * v9);
    v111 = v6;
    while (1)
    {
      v26 = *v4;
      v36 = *((unsigned int *)v4 + 4);
      v37 = v23;
      if (v23 != v24)
      {
        v37 = v23;
        while (*(_DWORD *)v37 < v22)
        {
          v37 += 16;
          if (v37 == v24)
          {
            v38 = v24;
            goto LABEL_30;
          }
        }
      }
      v38 = v24;
      if (v37 != v24)
      {
        if (*(_DWORD *)v37 == v22)
        {
          v39 = *v107 + 8 * *((_QWORD *)v37 + 1);
          goto LABEL_20;
        }
        v38 = v37;
      }
LABEL_30:
      v40 = *(_QWORD *)(a1 + 80);
      v114 = *v4;
      if (v40)
      {
        v42 = *(_QWORD *)(a1 + 48);
        v41 = *(_QWORD *)(a1 + 56);
        v43 = ((v41 - v42) << 6) - 1;
        v44 = *(_QWORD *)(a1 + 72);
        if (v41 == v42)
          v43 = 0;
        v39 = *(_QWORD *)(a1 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v42 + (((unint64_t)(v44 + v40 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v44 + v40 - 1) & 0x1FF));
        *(_QWORD *)(a1 + 80) = v40 - 1;
        if ((unint64_t)(v43 - (v40 + v44) + 1) >= 0x400)
        {
          operator delete(*(void **)(v41 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v45 = v24 - v38;
        if (v24 == v38)
          goto LABEL_19;
LABEL_96:
        memmove(v38 + 16, v38, v45);
        goto LABEL_19;
      }
      v115 = 0;
      v47 = *(_QWORD *)(a1 + 16);
      v46 = *(int64x2_t **)(a1 + 24);
      v48 = (unint64_t)v46 - v47;
      v49 = (uint64_t)((uint64_t)v46->i64 - v47) >> 3;
      v50 = (uint64_t *)(v47 + (((unint64_t)v46 - v47) & 0xFFFFFFFFFFFFFFF8));
      v51 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)(v51 - (_QWORD)v46) < 0x48)
      {
        v52 = v49 + 9;
        if ((unint64_t)(v49 + 9) >> 61)
          sub_20E867F44();
        v53 = v51 - v47;
        if (v53 >> 2 > v52)
          v52 = v53 >> 2;
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
          v52 = 0x1FFFFFFFFFFFFFFFLL;
        v108 = v52;
        if (v52)
        {
          if (v52 >> 61)
            sub_20E877A38();
          v54 = operator new(8 * v52);
          v49 = (uint64_t)((uint64_t)v46->i64 - v47) >> 3;
        }
        else
        {
          v54 = 0;
        }
        v61 = &v54[8 * v49];
        *((_QWORD *)v61 + 8) = 0;
        *((_OWORD *)v61 + 2) = 0u;
        *((_OWORD *)v61 + 3) = 0u;
        *(_OWORD *)v61 = 0u;
        *((_OWORD *)v61 + 1) = 0u;
        if ((int64x2_t *)v47 == v46)
        {
          v63 = &v54[8 * v49];
        }
        else
        {
          if (v48 - 8 < 0x68)
          {
            v62 = (char *)(v47 + (((unint64_t)v46 - v47) & 0xFFFFFFFFFFFFFFF8));
            v63 = &v54[8 * v49];
            goto LABEL_59;
          }
          v62 = (char *)(v47 + (((unint64_t)v46 - v47) & 0xFFFFFFFFFFFFFFF8));
          v63 = &v54[8 * v49];
          if (v47 + (v48 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v54[v48 & 0xFFFFFFFFFFFFFFF8] < 0x20)
            goto LABEL_102;
          v64 = ((v48 - 8) >> 3) + 1;
          v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
          v62 = (char *)&v50[v65 / 0xFFFFFFFFFFFFFFF8];
          v63 = &v61[-v65];
          v66 = &v54[8 * v49 - 16];
          v67 = (__int128 *)(v47 + 8 * v49 - 16);
          v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v69 = *v67;
            *(v66 - 1) = *(v67 - 1);
            *v66 = v69;
            v66 -= 2;
            v67 -= 2;
            v68 -= 4;
          }
          while (v68);
          if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_102:
            do
            {
LABEL_59:
              v70 = *((_QWORD *)v62 - 1);
              v62 -= 8;
              *((_QWORD *)v63 - 1) = v70;
              v63 -= 8;
            }
            while (v62 != (char *)v47);
          }
        }
        v71 = v61 + 72;
        v72 = (char *)v46 - (char *)v50;
        if (v72)
        {
          v73 = v50;
          v74 = v54;
          memmove(v61 + 72, v73, v72);
          v54 = v74;
        }
        *(_QWORD *)(a1 + 16) = v63;
        *(_QWORD *)(a1 + 24) = &v71[v72];
        *(_QWORD *)(a1 + 32) = &v54[8 * v108];
        v3 = a3;
        if (v47)
          operator delete((void *)v47);
        goto LABEL_95;
      }
      v55 = (char *)v46 - (char *)v50;
      if ((unint64_t)((char *)v46 - (char *)v50) > 0x47)
      {
        v57 = *(uint64_t **)(a1 + 24);
        v56 = 9;
        goto LABEL_71;
      }
      v56 = v55 >> 3;
      v57 = &v46->i64[9 - (v55 >> 3)];
      v58 = v55 & 0xFFFFFFFFFFFFFFF8;
      v59 = 64 - v58;
      if (64 - v58 < 0x68)
        break;
      v75 = &v115 < (uint64_t *)((char *)&v46[4].i64[1] - v58);
      if (v46 < (int64x2_t *)&v116)
      {
        v60 = *(uint64_t **)(a1 + 24);
        if (v75)
          goto LABEL_69;
      }
      v76 = (v59 >> 3) + 1;
      v60 = &v46->i64[v76 & 0x3FFFFFFFFFFFFFFCLL];
      v77 = vdupq_lane_s64(v115, 0);
      v78 = v46 + 1;
      v79 = v76 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v78[-1] = v77;
        *v78 = v77;
        v78 += 2;
        v79 -= 4;
      }
      while (v79);
      if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_69;
LABEL_70:
      *(_QWORD *)(a1 + 24) = v57;
      if (v46 == (int64x2_t *)v50)
        goto LABEL_95;
LABEL_71:
      v80 = (char *)v57 - (char *)(v50 + 9);
      v81 = v80 >> 3;
      v82 = (int64x2_t *)(v57 - 9);
      v83 = (char *)v57;
      if (v57 - 9 < (uint64_t *)v46)
      {
        v84 = (v48 & 0xFFFFFFFFFFFFFFF8) + v80;
        v85 = v47 + v84 + 8;
        if ((unint64_t)v46 > v85)
          v85 = (unint64_t)v46;
        v86 = v85 + ~v47 - v84;
        if (v86 >= 0x58)
        {
          v87 = (v86 >> 3) + 1;
          v88 = v87 & 0x3FFFFFFFFFFFFFFCLL;
          v82 = (int64x2_t *)((char *)v82 + v88 * 8);
          v83 = (char *)&v57[v88];
          v89 = v57 + 2;
          v90 = (__int128 *)(v47 + 8 * v81 + 8 * v49 + 16);
          v91 = v87 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v92 = *v90;
            *(v89 - 1) = *(v90 - 1);
            *v89 = v92;
            v89 += 2;
            v90 += 2;
            v91 -= 4;
          }
          while (v91);
          if (v87 == (v87 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_80;
        }
        else
        {
          v83 = (char *)v57;
        }
        do
        {
          v93 = v82->i64[0];
          v82 = (int64x2_t *)((char *)v82 + 8);
          *(_QWORD *)v83 = v93;
          v83 += 8;
        }
        while (v82 < v46);
      }
LABEL_80:
      *(_QWORD *)(a1 + 24) = v83;
      if (v57 != v50 + 9)
      {
        v94 = v3;
        v95 = v56;
        memmove(&v57[-v81], (const void *)(v47 + (((unint64_t)v46 - v47) & 0xFFFFFFFFFFFFFFF8)), v80);
        v56 = v95;
        v3 = v94;
        v49 = (uint64_t)((uint64_t)v46->i64 - v47) >> 3;
      }
      v96 = (const double *)&v115;
      if (v50 <= &v115)
      {
        v97 = 72;
        if (*(_QWORD *)(a1 + 24) <= (unint64_t)&v115)
          v97 = 0;
        v96 = (const double *)((char *)&v115 + v97);
      }
      if (v56 < 0xA)
      {
        v98 = v56;
        goto LABEL_94;
      }
      if (v50 < (uint64_t *)v96 + 1
        && (unint64_t)v96 < v47 + (((unint64_t)v46 - v47) & 0xFFFFFFFFFFFFFFF8) + 8 * v56)
      {
        v98 = v56;
        do
        {
LABEL_94:
          *v50++ = *(_QWORD *)v96;
          --v98;
        }
        while (v98);
        goto LABEL_95;
      }
      v50 += v56 & 0xFFFFFFFFFFFFFFFCLL;
      v98 = v56 & 3;
      v99 = vld1q_dup_f64(v96);
      v100 = (float64x2_t *)(v47 + 8 * v49 + 16);
      v101 = v56 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v100[-1] = v99;
        *v100 = v99;
        v100 += 2;
        v101 -= 4;
      }
      while (v101);
      if (v56 != (v56 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_94;
LABEL_95:
      v39 = *(_QWORD *)(a1 + 24) - 72;
      v4 = a2;
      v23 = v110;
      v6 = v111;
      v45 = v24 - v38;
      if (v24 != v38)
        goto LABEL_96;
LABEL_19:
      v25 = (v39 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v38 = v22;
      *((_QWORD *)v38 + 1) = v25;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v6);
      v24 += 16;
      v26 = v114;
LABEL_20:
      v27 = (__int128 *)(v26 + 8 * (3 * v22 + v3 + (_DWORD)v36 * v113));
      v28 = *((_QWORD *)v27 + 2);
      v29 = *v27;
      v30 = (__int128 *)((char *)v27 + 8 * v36);
      v31 = *((_QWORD *)v30 + 2);
      v32 = *v30;
      v33 = &v27[v36];
      v34 = *((_QWORD *)v33 + 2);
      v35 = *v33;
      *(_OWORD *)v39 = v29;
      *(_QWORD *)(v39 + 16) = v28;
      *(_OWORD *)(v39 + 24) = v32;
      *(_QWORD *)(v39 + 40) = v31;
      *(_OWORD *)(v39 + 48) = v35;
      *(_QWORD *)(v39 + 64) = v34;
      if (++v22 == v112)
        goto LABEL_3;
    }
    v60 = *(uint64_t **)(a1 + 24);
    do
LABEL_69:
      *v60++ = v115;
    while (v60 != v57);
    goto LABEL_70;
  }
}

void sub_20F5A9BBC(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  __int128 *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  char *v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  int64x2_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  _OWORD *v64;
  char *v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  __int128 *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  _OWORD *v74;
  size_t v75;
  uint64_t *v76;
  _BYTE *v77;
  BOOL v78;
  uint64_t v79;
  int64x2_t v80;
  int64x2_t *v81;
  uint64_t v82;
  int64_t v83;
  uint64_t v84;
  int64x2_t *v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  float64x2_t v101;
  float64x2_t *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unsigned int v107;
  _QWORD *v109;
  unint64_t v110;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  unsigned int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = a3;
    v4 = a2;
    v6 = 0;
    v7 = a1 + 40;
    v109 = (_QWORD *)(a1 + 16);
    v104 = HIDWORD(a3);
    v107 = 1;
    v105 = a1 + 40;
    while (1)
    {
      v8 = *(_QWORD *)(a1 + 88);
      v9 = (*(_DWORD *)(a1 + 112) * v6);
      v10 = *(_QWORD *)(a1 + 120);
      v11 = *(_QWORD *)(v10 + 8 * v6);
      if (v11)
      {
        v12 = *(_QWORD *)(a1 + 48);
        v13 = *(_QWORD *)(a1 + 56);
        v14 = *(_QWORD *)(a1 + 80);
        v15 = 16 * v11;
        v16 = (uint64_t *)(v8 + 16 * v9 + 8);
        do
        {
          if (v13 == v12)
            v18 = 0;
          else
            v18 = ((v13 - v12) << 6) - 1;
          v19 = *(_QWORD *)(a1 + 72) + v14;
          if (v18 == v19)
          {
            sub_20EDB36DC(v7);
            v12 = *(_QWORD *)(a1 + 48);
            v13 = *(_QWORD *)(a1 + 56);
            v19 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
          }
          v17 = *v16;
          v16 += 2;
          *(_QWORD *)(*(_QWORD *)(v12 + ((v19 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v19 & 0x1FF)) = v17;
          v14 = *(_QWORD *)(a1 + 80) + 1;
          *(_QWORD *)(a1 + 80) = v14;
          v15 -= 16;
        }
        while (v15);
        v10 = *(_QWORD *)(a1 + 120);
        v8 = *(_QWORD *)(a1 + 88);
        v9 = (*(_DWORD *)(a1 + 112) * v6);
      }
      *(_QWORD *)(v10 + 8 * v6) = 0;
      v20 = v6 + 1;
      v21 = *(_DWORD *)(a1 + 8);
      v106 = v6 + 1;
      if (v21 < (int)v6 + 1)
        v20 = *(_DWORD *)(a1 + 8);
      if (v20)
        break;
LABEL_3:
      ++v107;
      v7 = v105;
      v6 = v106;
      if (v106 >= *(unsigned int *)(a1 + 12))
        return;
    }
    v22 = 0;
    v23 = (char *)(v8 + 16 * v9);
    v24 = (char *)(v8 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v6) + v9));
    v25 = v23;
    v116 = v104 + 4 * v6;
    if (v21 >= v107)
      v21 = v107;
    v115 = v21;
    v114 = v23;
    v112 = v6;
    while (1)
    {
      v27 = *v4;
      v40 = *((unsigned int *)v4 + 4);
      v41 = v25;
      if (v25 != v24)
      {
        v41 = v25;
        while (*(_DWORD *)v41 < v22)
        {
          v41 += 16;
          if (v41 == v24)
          {
            v42 = v24;
            goto LABEL_30;
          }
        }
      }
      v42 = v24;
      if (v41 != v24)
      {
        if (*(_DWORD *)v41 == v22)
        {
          v43 = (_OWORD *)(*v109 + 8 * *((_QWORD *)v41 + 1));
          goto LABEL_20;
        }
        v42 = v41;
      }
LABEL_30:
      v44 = *(_QWORD *)(a1 + 80);
      v117 = *v4;
      if (v44)
      {
        v46 = *(_QWORD *)(a1 + 48);
        v45 = *(_QWORD *)(a1 + 56);
        v47 = ((v45 - v46) << 6) - 1;
        v48 = *(_QWORD *)(a1 + 72);
        if (v45 == v46)
          v47 = 0;
        v43 = (_OWORD *)(*(_QWORD *)(a1 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v46 + (((unint64_t)(v48 + v44 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v48 + v44 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v44 - 1;
        if ((unint64_t)(v47 - (v44 + v48) + 1) >= 0x400)
        {
          operator delete(*(void **)(v45 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v49 = v24 - v42;
        if (v24 == v42)
          goto LABEL_19;
LABEL_94:
        memmove(v42 + 16, v42, v49);
        goto LABEL_19;
      }
      v118 = 0;
      v51 = *(_QWORD *)(a1 + 16);
      v50 = *(int64x2_t **)(a1 + 24);
      v52 = (uint64_t)((uint64_t)v50->i64 - v51) >> 3;
      v113 = (unint64_t)v50 - v51;
      v53 = (uint64_t *)(v51 + (((unint64_t)v50 - v51) & 0xFFFFFFFFFFFFFFF8));
      v54 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)(v54 - (_QWORD)v50) < 0x80)
      {
        v55 = v52 + 16;
        if ((unint64_t)(v52 + 16) >> 61)
          sub_20E867F44();
        v56 = v54 - v51;
        if (v56 >> 2 > v55)
          v55 = v56 >> 2;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
          v55 = 0x1FFFFFFFFFFFFFFFLL;
        v110 = v55;
        if (v55)
        {
          if (v55 >> 61)
            sub_20E877A38();
          v57 = operator new(8 * v55);
        }
        else
        {
          v57 = 0;
        }
        v64 = &v57[8 * v52];
        v64[6] = 0u;
        v64[7] = 0u;
        v64[4] = 0u;
        v64[5] = 0u;
        v64[2] = 0u;
        v64[3] = 0u;
        *v64 = 0u;
        v64[1] = 0u;
        if ((int64x2_t *)v51 == v50)
        {
          v66 = &v57[8 * v52];
        }
        else
        {
          if (v113 - 8 < 0x68)
          {
            v65 = (char *)(v51 + (((unint64_t)v50 - v51) & 0xFFFFFFFFFFFFFFF8));
            v66 = &v57[8 * v52];
            goto LABEL_59;
          }
          v65 = (char *)(v51 + (((unint64_t)v50 - v51) & 0xFFFFFFFFFFFFFFF8));
          v66 = &v57[8 * v52];
          if (v51 + (v113 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v57[v113 & 0xFFFFFFFFFFFFFFF8] < 0x20)
            goto LABEL_100;
          v67 = ((v113 - 8) >> 3) + 1;
          v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
          v65 = (char *)&v53[v68 / 0xFFFFFFFFFFFFFFF8];
          v66 = (char *)v64 - v68;
          v69 = &v57[8 * v52 - 16];
          v70 = (__int128 *)(v51 + 8 * v52 - 16);
          v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v72 = *v70;
            *(v69 - 1) = *(v70 - 1);
            *v69 = v72;
            v69 -= 2;
            v70 -= 2;
            v71 -= 4;
          }
          while (v71);
          if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_100:
            do
            {
LABEL_59:
              v73 = *((_QWORD *)v65 - 1);
              v65 -= 8;
              *((_QWORD *)v66 - 1) = v73;
              v66 -= 8;
            }
            while (v65 != (char *)v51);
          }
        }
        v74 = v64 + 8;
        v75 = (char *)v50 - (char *)v53;
        if (v75)
        {
          v76 = v53;
          v77 = v57;
          memmove(v64 + 8, v76, v75);
          v57 = v77;
        }
        *(_QWORD *)(a1 + 16) = v66;
        *(_QWORD *)(a1 + 24) = (char *)v74 + v75;
        *(_QWORD *)(a1 + 32) = &v57[8 * v110];
        v3 = a3;
        if (v51)
          operator delete((void *)v51);
        goto LABEL_93;
      }
      v58 = (char *)v50 - (char *)v53;
      if ((unint64_t)((char *)v50 - (char *)v53) > 0x7F)
      {
        v60 = *(uint64_t **)(a1 + 24);
        v59 = 16;
        goto LABEL_71;
      }
      v59 = v58 >> 3;
      v60 = &v50->i64[16 - (v58 >> 3)];
      v61 = v58 & 0xFFFFFFFFFFFFFFF8;
      v62 = 120 - v61;
      if (120 - v61 < 0x68)
        break;
      v78 = &v118 < (uint64_t *)((char *)v50[8].i64 - v61);
      if (v50 < (int64x2_t *)&v119)
      {
        v63 = *(uint64_t **)(a1 + 24);
        if (v78)
          goto LABEL_69;
      }
      v79 = (v62 >> 3) + 1;
      v63 = &v50->i64[v79 & 0x3FFFFFFFFFFFFFFCLL];
      v80 = vdupq_lane_s64(v118, 0);
      v81 = v50 + 1;
      v82 = v79 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v81[-1] = v80;
        *v81 = v80;
        v81 += 2;
        v82 -= 4;
      }
      while (v82);
      if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_69;
LABEL_70:
      *(_QWORD *)(a1 + 24) = v60;
      if (v50 == (int64x2_t *)v53)
        goto LABEL_93;
LABEL_71:
      v83 = (char *)v60 - (char *)(v53 + 16);
      v84 = v83 >> 3;
      v85 = (int64x2_t *)(v60 - 16);
      v86 = (char *)v60;
      if (v60 - 16 < (uint64_t *)v50)
      {
        v87 = (v113 & 0xFFFFFFFFFFFFFFF8) + v83;
        v88 = v51 + v87 + 8;
        if ((unint64_t)v50 > v88)
          v88 = (unint64_t)v50;
        v89 = v88 + ~v51 - v87;
        if (v89 >= 0x58)
        {
          v90 = (v89 >> 3) + 1;
          v91 = v90 & 0x3FFFFFFFFFFFFFFCLL;
          v85 = (int64x2_t *)((char *)v85 + v91 * 8);
          v86 = (char *)&v60[v91];
          v92 = v60 + 2;
          v93 = (__int128 *)(v51 + 8 * v84 + 8 * v52 + 16);
          v94 = v90 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v95 = *v93;
            *(v92 - 1) = *(v93 - 1);
            *v92 = v95;
            v92 += 2;
            v93 += 2;
            v94 -= 4;
          }
          while (v94);
          if (v90 == (v90 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_80;
        }
        else
        {
          v86 = (char *)v60;
        }
        do
        {
          v96 = v85->i64[0];
          v85 = (int64x2_t *)((char *)v85 + 8);
          *(_QWORD *)v86 = v96;
          v86 += 8;
        }
        while (v85 < v50);
      }
LABEL_80:
      *(_QWORD *)(a1 + 24) = v86;
      if (v60 != v53 + 16)
      {
        v97 = v3;
        v98 = v59;
        memmove(&v60[-v84], (const void *)(v51 + (((unint64_t)v50 - v51) & 0xFFFFFFFFFFFFFFF8)), v83);
        v59 = v98;
        v3 = v97;
        v52 = (uint64_t)((uint64_t)v50->i64 - v51) >> 3;
      }
      v99 = &v118;
      if (v53 <= &v118)
        v99 = &v118 + 16 * (unint64_t)(*(_QWORD *)(a1 + 24) > (unint64_t)&v118);
      if (v59 < 0xA)
      {
        v100 = v59;
        goto LABEL_92;
      }
      if (v53 < v99 + 1 && (unint64_t)v99 < v51 + (v113 & 0xFFFFFFFFFFFFFFF8) + 8 * v59)
      {
        v100 = v59;
        do
        {
LABEL_92:
          *v53++ = *v99;
          --v100;
        }
        while (v100);
        goto LABEL_93;
      }
      v53 += v59 & 0xFFFFFFFFFFFFFFFCLL;
      v100 = v59 & 3;
      v101 = vld1q_dup_f64((const double *)v99);
      v102 = (float64x2_t *)(v51 + 8 * v52 + 16);
      v103 = v59 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v102[-1] = v101;
        *v102 = v101;
        v102 += 2;
        v103 -= 4;
      }
      while (v103);
      if (v59 != (v59 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_92;
LABEL_93:
      v43 = (_OWORD *)(*(_QWORD *)(a1 + 24) - 128);
      v4 = a2;
      v6 = v112;
      v49 = v24 - v42;
      if (v24 != v42)
        goto LABEL_94;
LABEL_19:
      v26 = ((uint64_t)v43 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v42 = v22;
      *((_QWORD *)v42 + 1) = v26;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v6);
      v24 += 16;
      v25 = v114;
      v27 = v117;
LABEL_20:
      v28 = (__int128 *)(v27 + 8 * (v3 + 4 * v22 + (_DWORD)v40 * v116));
      v30 = *v28;
      v29 = v28[1];
      v31 = (__int128 *)((char *)v28 + 8 * v40);
      v33 = *v31;
      v32 = v31[1];
      v34 = &v28[v40];
      v36 = *v34;
      v35 = v34[1];
      v37 = (__int128 *)((char *)v28 + 24 * v40);
      v39 = *v37;
      v38 = v37[1];
      *v43 = v30;
      v43[1] = v29;
      v43[2] = v33;
      v43[3] = v32;
      v43[4] = v36;
      v43[5] = v35;
      v43[6] = v39;
      v43[7] = v38;
      if (++v22 == v115)
        goto LABEL_3;
    }
    v63 = *(uint64_t **)(a1 + 24);
    do
LABEL_69:
      *v63++ = v118;
    while (v63 != v60);
    goto LABEL_70;
  }
}

void sub_20F5AA30C(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  unint64_t v35;
  int64x2_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  _OWORD *v50;
  char *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  __int128 *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  _OWORD *v61;
  size_t v62;
  _BYTE *v63;
  BOOL v64;
  uint64_t v65;
  int64x2_t v66;
  int64x2_t *v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  int64x2_t *v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  __int128 *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  unint64_t v83;
  const double *v84;
  uint64_t v85;
  unint64_t v86;
  float64x2_t v87;
  float64x2_t *v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  int v95;
  char *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3 && *(_DWORD *)(a1 + 8))
  {
    v5 = a3;
    v6 = a2;
    v7 = 0;
    v91 = (_QWORD *)(a1 + 16);
    v90 = HIDWORD(a3);
    v8 = 1;
    v95 = a3;
    while (!v8)
    {
LABEL_5:
      if (++v7 >= v3)
        return;
    }
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 88);
    v11 = (*(_DWORD *)(a1 + 112) * v7);
    v12 = (char *)(v10 + 16 * v11);
    v13 = (char *)(v10 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7) + v11));
    v98 = 3 * v7 + v90;
    v96 = v12;
    v97 = v7;
    while (1)
    {
      v15 = *v6;
      v25 = *((unsigned int *)v6 + 4);
      v26 = v12;
      if (v12 != v13)
      {
        v26 = v12;
        while (*(_DWORD *)v26 < v9)
        {
          v26 += 16;
          if (v26 == v13)
          {
            v27 = v13;
            goto LABEL_19;
          }
        }
      }
      v27 = v13;
      if (v26 != v13)
      {
        if (*(_DWORD *)v26 == v9)
        {
          v28 = (_OWORD *)(*v91 + 8 * *((_QWORD *)v26 + 1));
          goto LABEL_9;
        }
        v27 = v26;
      }
LABEL_19:
      v29 = *(_QWORD *)(a1 + 80);
      v99 = *v6;
      if (v29)
      {
        v31 = *(_QWORD *)(a1 + 48);
        v30 = *(_QWORD *)(a1 + 56);
        v32 = ((v30 - v31) << 6) - 1;
        v33 = *(_QWORD *)(a1 + 72);
        if (v30 == v31)
          v32 = 0;
        v28 = (_OWORD *)(*(_QWORD *)(a1 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v31 + (((unint64_t)(v33 + v29 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v33 + v29 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v29 - 1;
        if ((unint64_t)(v32 - (v29 + v33) + 1) >= 0x400)
        {
          operator delete(*(void **)(v30 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v34 = v13 - v27;
        if (v13 == v27)
          goto LABEL_8;
LABEL_85:
        memmove(v27 + 16, v27, v34);
        goto LABEL_8;
      }
      v100 = 0;
      v35 = *(_QWORD *)(a1 + 16);
      v36 = *(int64x2_t **)(a1 + 24);
      v37 = (unint64_t)v36 - v35;
      v38 = (uint64_t)((uint64_t)v36->i64 - v35) >> 3;
      v39 = (uint64_t *)(v35 + (((unint64_t)v36 - v35) & 0xFFFFFFFFFFFFFFF8));
      v40 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)(v40 - (_QWORD)v36) < 0x60)
      {
        v41 = v38 + 12;
        if ((unint64_t)(v38 + 12) >> 61)
          sub_20E867F44();
        v42 = v40 - v35;
        if (v42 >> 2 > v41)
          v41 = v42 >> 2;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
          v41 = 0x1FFFFFFFFFFFFFFFLL;
        v93 = v41;
        if (v41)
        {
          if (v41 >> 61)
            sub_20E877A38();
          v43 = operator new(8 * v41);
        }
        else
        {
          v43 = 0;
        }
        v50 = &v43[8 * v38];
        v50[4] = 0u;
        v50[5] = 0u;
        v50[2] = 0u;
        v50[3] = 0u;
        *v50 = 0u;
        v50[1] = 0u;
        v92 = v25;
        if ((int64x2_t *)v35 == v36)
        {
          v52 = &v43[8 * v38];
        }
        else
        {
          if (v37 - 8 < 0x68)
          {
            v51 = (char *)(v35 + (((unint64_t)v36 - v35) & 0xFFFFFFFFFFFFFFF8));
            v52 = &v43[8 * v38];
            goto LABEL_48;
          }
          v51 = (char *)(v35 + (((unint64_t)v36 - v35) & 0xFFFFFFFFFFFFFFF8));
          v52 = &v43[8 * v38];
          if (v35 + (v37 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v43[v37 & 0xFFFFFFFFFFFFFFF8] < 0x20)
            goto LABEL_91;
          v53 = ((v37 - 8) >> 3) + 1;
          v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
          v51 = (char *)&v39[v54 / 0xFFFFFFFFFFFFFFF8];
          v52 = (char *)v50 - v54;
          v55 = 8 * ((uint64_t)((uint64_t)v36->i64 - v35) >> 3);
          v56 = &v43[v55 - 16];
          v57 = (__int128 *)(v35 + v55 - 16);
          v58 = v53 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v59 = *v57;
            *(v56 - 1) = *(v57 - 1);
            *v56 = v59;
            v56 -= 2;
            v57 -= 2;
            v58 -= 4;
          }
          while (v58);
          if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_91:
            do
            {
LABEL_48:
              v60 = *((_QWORD *)v51 - 1);
              v51 -= 8;
              *((_QWORD *)v52 - 1) = v60;
              v52 -= 8;
            }
            while (v51 != (char *)v35);
          }
        }
        v61 = v50 + 6;
        v62 = (char *)v36 - (char *)v39;
        if (v62)
        {
          v63 = v43;
          memmove(v50 + 6, v39, v62);
          v43 = v63;
        }
        v25 = v92;
        *(_QWORD *)(a1 + 16) = v52;
        *(_QWORD *)(a1 + 24) = (char *)v61 + v62;
        *(_QWORD *)(a1 + 32) = &v43[8 * v93];
        if (v35)
          operator delete((void *)v35);
        goto LABEL_84;
      }
      v44 = (char *)v36 - (char *)v39;
      if ((unint64_t)((char *)v36 - (char *)v39) > 0x5F)
      {
        v46 = *(uint64_t **)(a1 + 24);
        v45 = 12;
        goto LABEL_60;
      }
      v45 = v44 >> 3;
      v46 = &v36->i64[12 - (v44 >> 3)];
      v47 = v44 & 0xFFFFFFFFFFFFFFF8;
      v48 = 88 - v47;
      if (88 - v47 < 0x68)
        break;
      v64 = &v100 < (uint64_t *)((char *)v36[6].i64 - v47);
      if (v36 < (int64x2_t *)&v101)
      {
        v49 = *(uint64_t **)(a1 + 24);
        if (v64)
          goto LABEL_58;
      }
      v65 = (v48 >> 3) + 1;
      v49 = &v36->i64[v65 & 0x3FFFFFFFFFFFFFFCLL];
      v66 = vdupq_lane_s64(v100, 0);
      v67 = v36 + 1;
      v68 = v65 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v67[-1] = v66;
        *v67 = v66;
        v67 += 2;
        v68 -= 4;
      }
      while (v68);
      if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_58;
LABEL_59:
      *(_QWORD *)(a1 + 24) = v46;
      if (v36 == (int64x2_t *)v39)
        goto LABEL_84;
LABEL_60:
      v69 = (char *)v46 - (char *)(v39 + 12);
      v70 = v69 >> 3;
      v71 = (int64x2_t *)(v46 - 12);
      v72 = (char *)v46;
      if (v46 - 12 < (uint64_t *)v36)
      {
        v73 = (v37 & 0xFFFFFFFFFFFFFFF8) + v69;
        v74 = v35 + v73 + 8;
        if ((unint64_t)v36 > v74)
          v74 = (unint64_t)v36;
        v75 = v74 + ~v35 - v73;
        if (v75 >= 0x58)
        {
          v76 = (v75 >> 3) + 1;
          v77 = v76 & 0x3FFFFFFFFFFFFFFCLL;
          v71 = (int64x2_t *)((char *)v71 + v77 * 8);
          v72 = (char *)&v46[v77];
          v78 = v46 + 2;
          v79 = (__int128 *)(v35 + 8 * v70 + 8 * v38 + 16);
          v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v81 = *v79;
            *(v78 - 1) = *(v79 - 1);
            *v78 = v81;
            v78 += 2;
            v79 += 2;
            v80 -= 4;
          }
          while (v80);
          if (v76 == (v76 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_69;
        }
        else
        {
          v72 = (char *)v46;
        }
        do
        {
          v82 = v71->i64[0];
          v71 = (int64x2_t *)((char *)v71 + 8);
          *(_QWORD *)v72 = v82;
          v72 += 8;
        }
        while (v71 < v36);
      }
LABEL_69:
      *(_QWORD *)(a1 + 24) = v72;
      if (v46 != v39 + 12)
      {
        v83 = v45;
        memmove(&v46[-v70], v39, v69);
        v45 = v83;
      }
      v84 = (const double *)&v100;
      if (v39 <= &v100)
      {
        v85 = 96;
        if (*(_QWORD *)(a1 + 24) <= (unint64_t)&v100)
          v85 = 0;
        v84 = (const double *)((char *)&v100 + v85);
      }
      if (v45 < 0xA)
      {
        v86 = v45;
        goto LABEL_83;
      }
      if (v39 < (uint64_t *)v84 + 1 && (unint64_t)v84 < v35 + (v37 & 0xFFFFFFFFFFFFFFF8) + 8 * v45)
      {
        v86 = v45;
        do
        {
LABEL_83:
          *v39++ = *(_QWORD *)v84;
          --v86;
        }
        while (v86);
        goto LABEL_84;
      }
      v39 += v45 & 0xFFFFFFFFFFFFFFFCLL;
      v86 = v45 & 3;
      v87 = vld1q_dup_f64(v84);
      v88 = (float64x2_t *)(v35 + 8 * v38 + 16);
      v89 = v45 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v88[-1] = v87;
        *v88 = v87;
        v88 += 2;
        v89 -= 4;
      }
      while (v89);
      if (v45 != (v45 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_83;
LABEL_84:
      v28 = (_OWORD *)(*(_QWORD *)(a1 + 24) - 96);
      v6 = a2;
      v5 = v95;
      v12 = v96;
      v7 = v97;
      v34 = v13 - v27;
      if (v13 != v27)
        goto LABEL_85;
LABEL_8:
      v14 = ((uint64_t)v28 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v27 = v9;
      *((_QWORD *)v27 + 1) = v14;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
      v13 += 16;
      v15 = v99;
LABEL_9:
      v16 = (__int128 *)(v15 + 8 * (v5 + 4 * v9 + (_DWORD)v25 * v98));
      v18 = *v16;
      v17 = v16[1];
      v19 = (__int128 *)((char *)v16 + 8 * v25);
      v21 = *v19;
      v20 = v19[1];
      v22 = &v16[v25];
      v24 = *v22;
      v23 = v22[1];
      *v28 = v18;
      v28[1] = v17;
      v28[2] = v21;
      v28[3] = v20;
      v28[4] = v24;
      v28[5] = v23;
      ++v9;
      v8 = *(_DWORD *)(a1 + 8);
      if (v9 >= v8)
      {
        v3 = *(unsigned int *)(a1 + 12);
        goto LABEL_5;
      }
    }
    v49 = *(uint64_t **)(a1 + 24);
    do
LABEL_58:
      *v49++ = v100;
    while (v49 != v46);
    goto LABEL_59;
  }
}

void sub_20F5AA938(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  char *v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  unint64_t v38;
  int64x2_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  _OWORD *v53;
  char *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  __int128 *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  _OWORD *v63;
  size_t v64;
  uint64_t *v65;
  _BYTE *v66;
  BOOL v67;
  uint64_t v68;
  int64x2_t v69;
  int64x2_t *v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  int64x2_t *v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  __int128 *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  float64x2_t v94;
  float64x2_t *v95;
  unint64_t v96;
  unint64_t v97;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v103;
  char *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3 && *(_DWORD *)(a1 + 8))
  {
    v5 = a3;
    v6 = a2;
    v7 = 0;
    v99 = (_QWORD *)(a1 + 16);
    v97 = HIDWORD(a3);
    v8 = 1;
    while (!v8)
    {
LABEL_5:
      if (++v7 >= v3)
        return;
    }
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 88);
    v11 = (*(_DWORD *)(a1 + 112) * v7);
    v12 = (char *)(v10 + 16 * v11);
    v13 = (char *)(v10 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7) + v11));
    v105 = v97 + 4 * v7;
    v103 = v7;
    v104 = v12;
    while (1)
    {
      v15 = *v6;
      v28 = *((unsigned int *)v6 + 4);
      v29 = v12;
      if (v12 != v13)
      {
        v29 = v12;
        while (*(_DWORD *)v29 < v9)
        {
          v29 += 16;
          if (v29 == v13)
          {
            v30 = v13;
            goto LABEL_19;
          }
        }
      }
      v30 = v13;
      if (v29 != v13)
      {
        if (*(_DWORD *)v29 == v9)
        {
          v31 = (_OWORD *)(*v99 + 8 * *((_QWORD *)v29 + 1));
          goto LABEL_9;
        }
        v30 = v29;
      }
LABEL_19:
      v32 = *(_QWORD *)(a1 + 80);
      v106 = *v6;
      if (v32)
      {
        v34 = *(_QWORD *)(a1 + 48);
        v33 = *(_QWORD *)(a1 + 56);
        v35 = ((v33 - v34) << 6) - 1;
        v36 = *(_QWORD *)(a1 + 72);
        if (v33 == v34)
          v35 = 0;
        v31 = (_OWORD *)(*(_QWORD *)(a1 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v34 + (((unint64_t)(v36 + v32 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v36 + v32 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v32 - 1;
        if ((unint64_t)(v35 - (v32 + v36) + 1) >= 0x400)
        {
          operator delete(*(void **)(v33 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v37 = v13 - v30;
        if (v13 == v30)
          goto LABEL_8;
LABEL_83:
        memmove(v30 + 16, v30, v37);
        goto LABEL_8;
      }
      v107 = 0;
      v38 = *(_QWORD *)(a1 + 16);
      v39 = *(int64x2_t **)(a1 + 24);
      v40 = (unint64_t)v39 - v38;
      v41 = (uint64_t)((uint64_t)v39->i64 - v38) >> 3;
      v42 = (uint64_t *)(v38 + (((unint64_t)v39 - v38) & 0xFFFFFFFFFFFFFFF8));
      v43 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)(v43 - (_QWORD)v39) < 0x80)
      {
        v44 = v41 + 16;
        if ((unint64_t)(v41 + 16) >> 61)
          sub_20E867F44();
        v45 = v43 - v38;
        if (v45 >> 2 > v44)
          v44 = v45 >> 2;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        v100 = v44;
        if (v44)
        {
          if (v44 >> 61)
            sub_20E877A38();
          v46 = operator new(8 * v44);
          v40 = (unint64_t)v39 - v38;
        }
        else
        {
          v46 = 0;
        }
        v53 = &v46[8 * v41];
        v53[6] = 0u;
        v53[7] = 0u;
        v53[4] = 0u;
        v53[5] = 0u;
        v53[2] = 0u;
        v53[3] = 0u;
        *v53 = 0u;
        v53[1] = 0u;
        if ((int64x2_t *)v38 == v39)
        {
          v55 = &v46[8 * v41];
        }
        else
        {
          if (v40 - 8 < 0x68)
          {
            v54 = (char *)(v38 + (((unint64_t)v39 - v38) & 0xFFFFFFFFFFFFFFF8));
            v55 = &v46[8 * v41];
            goto LABEL_48;
          }
          v54 = (char *)(v38 + (((unint64_t)v39 - v38) & 0xFFFFFFFFFFFFFFF8));
          v55 = &v46[8 * v41];
          if (v38 + (v40 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v46[v40 & 0xFFFFFFFFFFFFFFF8] < 0x20)
            goto LABEL_89;
          v56 = ((v40 - 8) >> 3) + 1;
          v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
          v54 = (char *)&v42[v57 / 0xFFFFFFFFFFFFFFF8];
          v55 = (char *)v53 - v57;
          v58 = &v46[8 * v41 - 16];
          v59 = (__int128 *)(v38 + 8 * v41 - 16);
          v60 = v56 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v61 = *v59;
            *(v58 - 1) = *(v59 - 1);
            *v58 = v61;
            v58 -= 2;
            v59 -= 2;
            v60 -= 4;
          }
          while (v60);
          if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_89:
            do
            {
LABEL_48:
              v62 = *((_QWORD *)v54 - 1);
              v54 -= 8;
              *((_QWORD *)v55 - 1) = v62;
              v55 -= 8;
            }
            while (v54 != (char *)v38);
          }
        }
        v63 = v53 + 8;
        v64 = (char *)v39 - (char *)v42;
        if (v64)
        {
          v65 = v42;
          v66 = v46;
          memmove(v53 + 8, v65, v64);
          v46 = v66;
        }
        *(_QWORD *)(a1 + 16) = v55;
        *(_QWORD *)(a1 + 24) = (char *)v63 + v64;
        *(_QWORD *)(a1 + 32) = &v46[8 * v100];
        v5 = a3;
        if (v38)
          operator delete((void *)v38);
        goto LABEL_82;
      }
      v47 = (char *)v39 - (char *)v42;
      if ((unint64_t)((char *)v39 - (char *)v42) > 0x7F)
      {
        v49 = *(uint64_t **)(a1 + 24);
        v48 = 16;
        goto LABEL_60;
      }
      v48 = v47 >> 3;
      v49 = &v39->i64[16 - (v47 >> 3)];
      v50 = v47 & 0xFFFFFFFFFFFFFFF8;
      v51 = 120 - v50;
      if (120 - v50 < 0x68)
        break;
      v67 = &v107 < (uint64_t *)((char *)v39[8].i64 - v50);
      if (v39 < (int64x2_t *)&v108)
      {
        v52 = *(uint64_t **)(a1 + 24);
        if (v67)
          goto LABEL_58;
      }
      v68 = (v51 >> 3) + 1;
      v52 = &v39->i64[v68 & 0x3FFFFFFFFFFFFFFCLL];
      v69 = vdupq_lane_s64(v107, 0);
      v70 = v39 + 1;
      v71 = v68 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v70[-1] = v69;
        *v70 = v69;
        v70 += 2;
        v71 -= 4;
      }
      while (v71);
      if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_58;
LABEL_59:
      *(_QWORD *)(a1 + 24) = v49;
      if (v39 == (int64x2_t *)v42)
        goto LABEL_82;
LABEL_60:
      v72 = (char *)v49 - (char *)(v42 + 16);
      v73 = v72 >> 3;
      v74 = (int64x2_t *)(v49 - 16);
      v75 = (char *)v49;
      if (v49 - 16 < (uint64_t *)v39)
      {
        v76 = (v40 & 0xFFFFFFFFFFFFFFF8) + v72;
        v77 = v38 + v76 + 8;
        if ((unint64_t)v39 > v77)
          v77 = (unint64_t)v39;
        v78 = v77 + ~v38 - v76;
        if (v78 >= 0x58)
        {
          v79 = (v78 >> 3) + 1;
          v80 = v79 & 0x3FFFFFFFFFFFFFFCLL;
          v74 = (int64x2_t *)((char *)v74 + v80 * 8);
          v75 = (char *)&v49[v80];
          v81 = v49 + 2;
          v82 = (__int128 *)(v38 + 8 * v73 + 8 * v41 + 16);
          v83 = v79 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v84 = *v82;
            *(v81 - 1) = *(v82 - 1);
            *v81 = v84;
            v81 += 2;
            v82 += 2;
            v83 -= 4;
          }
          while (v83);
          v40 = (unint64_t)v39 - v38;
          if (v79 == (v79 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_69;
        }
        else
        {
          v75 = (char *)v49;
        }
        do
        {
          v85 = v74->i64[0];
          v74 = (int64x2_t *)((char *)v74 + 8);
          *(_QWORD *)v75 = v85;
          v75 += 8;
        }
        while (v74 < v39);
      }
LABEL_69:
      *(_QWORD *)(a1 + 24) = v75;
      if (v49 != v42 + 16)
      {
        v101 = (uint64_t)((uint64_t)v39->i64 - v38) >> 3;
        v86 = (char *)(v38 + (((unint64_t)v39 - v38) & 0xFFFFFFFFFFFFFFF8));
        v87 = v30;
        v88 = v28;
        v89 = (char *)v40;
        v90 = v5;
        v91 = v48;
        memmove(&v49[-v73], v86, v72);
        v48 = v91;
        v5 = v90;
        v40 = (unint64_t)v89;
        v28 = v88;
        v30 = v87;
        v41 = v101;
      }
      v92 = &v107;
      if (v42 <= &v107)
        v92 = &v107 + 16 * (unint64_t)(*(_QWORD *)(a1 + 24) > (unint64_t)&v107);
      if (v48 < 0xA)
      {
        v93 = v48;
        goto LABEL_81;
      }
      if (v42 < v92 + 1 && (unint64_t)v92 < v38 + (v40 & 0xFFFFFFFFFFFFFFF8) + 8 * v48)
      {
        v93 = v48;
        do
        {
LABEL_81:
          *v42++ = *v92;
          --v93;
        }
        while (v93);
        goto LABEL_82;
      }
      v42 += v48 & 0xFFFFFFFFFFFFFFFCLL;
      v93 = v48 & 3;
      v94 = vld1q_dup_f64((const double *)v92);
      v95 = (float64x2_t *)(v38 + 8 * v41 + 16);
      v96 = v48 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v95[-1] = v94;
        *v95 = v94;
        v95 += 2;
        v96 -= 4;
      }
      while (v96);
      if (v48 != (v48 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_81;
LABEL_82:
      v31 = (_OWORD *)(*(_QWORD *)(a1 + 24) - 128);
      v6 = a2;
      v7 = v103;
      v37 = v13 - v30;
      if (v13 != v30)
        goto LABEL_83;
LABEL_8:
      v14 = ((uint64_t)v31 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v30 = v9;
      *((_QWORD *)v30 + 1) = v14;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
      v13 += 16;
      v12 = v104;
      v15 = v106;
LABEL_9:
      v16 = (__int128 *)(v15 + 8 * (v5 + 4 * v9 + (_DWORD)v28 * v105));
      v18 = *v16;
      v17 = v16[1];
      v19 = (__int128 *)((char *)v16 + 8 * v28);
      v21 = *v19;
      v20 = v19[1];
      v22 = &v16[v28];
      v24 = *v22;
      v23 = v22[1];
      v25 = (__int128 *)((char *)v16 + 24 * v28);
      v27 = *v25;
      v26 = v25[1];
      *v31 = v18;
      v31[1] = v17;
      v31[2] = v21;
      v31[3] = v20;
      v31[4] = v24;
      v31[5] = v23;
      v31[6] = v27;
      v31[7] = v26;
      ++v9;
      v8 = *(_DWORD *)(a1 + 8);
      if (v9 >= v8)
      {
        v3 = *(unsigned int *)(a1 + 12);
        goto LABEL_5;
      }
    }
    v52 = *(uint64_t **)(a1 + 24);
    do
LABEL_58:
      *v52++ = v107;
    while (v52 != v49);
    goto LABEL_59;
  }
}

void sub_20F5AAFC4(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  char *v54;
  _OWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  size_t v61;
  int64x2_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  _OWORD *v76;
  char *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  __int128 *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  _OWORD *v86;
  size_t v87;
  uint64_t *v88;
  _BYTE *v89;
  BOOL v90;
  uint64_t v91;
  int64x2_t v92;
  int64x2_t *v93;
  uint64_t v94;
  int64_t v95;
  uint64_t v96;
  int64x2_t *v97;
  char *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _OWORD *v104;
  __int128 *v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  const double *v111;
  uint64_t v112;
  unint64_t v113;
  float64x2_t v114;
  float64x2_t *v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unsigned int v120;
  _QWORD *v122;
  unint64_t v123;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  unsigned int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = a3;
    v4 = a2;
    v6 = 0;
    v7 = a1 + 40;
    v122 = (_QWORD *)(a1 + 16);
    v117 = HIDWORD(a3);
    v120 = 1;
    v118 = a1 + 40;
    while (1)
    {
      v8 = *(_QWORD *)(a1 + 88);
      v9 = (*(_DWORD *)(a1 + 112) * v6);
      v10 = *(_QWORD *)(a1 + 120);
      v11 = *(_QWORD *)(v10 + 8 * v6);
      if (v11)
      {
        v12 = *(_QWORD *)(a1 + 48);
        v13 = *(_QWORD *)(a1 + 56);
        v14 = *(_QWORD *)(a1 + 80);
        v15 = 16 * v11;
        v16 = (uint64_t *)(v8 + 16 * v9 + 8);
        do
        {
          if (v13 == v12)
            v18 = 0;
          else
            v18 = ((v13 - v12) << 6) - 1;
          v19 = *(_QWORD *)(a1 + 72) + v14;
          if (v18 == v19)
          {
            sub_20EDB36DC(v7);
            v12 = *(_QWORD *)(a1 + 48);
            v13 = *(_QWORD *)(a1 + 56);
            v19 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
          }
          v17 = *v16;
          v16 += 2;
          *(_QWORD *)(*(_QWORD *)(v12 + ((v19 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v19 & 0x1FF)) = v17;
          v14 = *(_QWORD *)(a1 + 80) + 1;
          *(_QWORD *)(a1 + 80) = v14;
          v15 -= 16;
        }
        while (v15);
        v10 = *(_QWORD *)(a1 + 120);
        v8 = *(_QWORD *)(a1 + 88);
        v9 = (*(_DWORD *)(a1 + 112) * v6);
      }
      *(_QWORD *)(v10 + 8 * v6) = 0;
      v20 = v6 + 1;
      v21 = *(_DWORD *)(a1 + 8);
      v119 = v6 + 1;
      if (v21 < (int)v6 + 1)
        v20 = *(_DWORD *)(a1 + 8);
      if (v20)
        break;
LABEL_3:
      ++v120;
      v7 = v118;
      v6 = v119;
      if (v119 >= *(unsigned int *)(a1 + 12))
        return;
    }
    v22 = 0;
    v23 = (char *)(v8 + 16 * v9);
    v24 = (char *)(v8 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v6) + v9));
    v25 = v23;
    v129 = v117 + 6 * v6;
    if (v21 >= v120)
      v21 = v120;
    v128 = v21;
    v127 = v23;
    v125 = v6;
    while (1)
    {
      v27 = *v4;
      v52 = *((unsigned int *)v4 + 4);
      v53 = v25;
      if (v25 != v24)
      {
        v53 = v25;
        while (*(_DWORD *)v53 < v22)
        {
          v53 += 16;
          if (v53 == v24)
          {
            v54 = v24;
            goto LABEL_30;
          }
        }
      }
      v54 = v24;
      if (v53 != v24)
      {
        if (*(_DWORD *)v53 == v22)
        {
          v55 = (_OWORD *)(*v122 + 8 * *((_QWORD *)v53 + 1));
          goto LABEL_20;
        }
        v54 = v53;
      }
LABEL_30:
      v56 = *(_QWORD *)(a1 + 80);
      v130 = *v4;
      if (v56)
      {
        v58 = *(_QWORD *)(a1 + 48);
        v57 = *(_QWORD *)(a1 + 56);
        v59 = ((v57 - v58) << 6) - 1;
        v60 = *(_QWORD *)(a1 + 72);
        if (v57 == v58)
          v59 = 0;
        v55 = (_OWORD *)(*(_QWORD *)(a1 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v58 + (((unint64_t)(v60 + v56 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v60 + v56 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v56 - 1;
        if ((unint64_t)(v59 - (v56 + v60) + 1) >= 0x400)
        {
          operator delete(*(void **)(v57 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v61 = v24 - v54;
        if (v24 == v54)
          goto LABEL_19;
LABEL_96:
        memmove(v54 + 16, v54, v61);
        goto LABEL_19;
      }
      v131 = 0;
      v63 = *(_QWORD *)(a1 + 16);
      v62 = *(int64x2_t **)(a1 + 24);
      v64 = (uint64_t)((uint64_t)v62->i64 - v63) >> 3;
      v126 = (unint64_t)v62 - v63;
      v65 = (uint64_t *)(v63 + (((unint64_t)v62 - v63) & 0xFFFFFFFFFFFFFFF8));
      v66 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)(v66 - (_QWORD)v62) < 0x120)
      {
        v67 = v64 + 36;
        if ((unint64_t)(v64 + 36) >> 61)
          sub_20E867F44();
        v68 = v66 - v63;
        if (v68 >> 2 > v67)
          v67 = v68 >> 2;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
          v67 = 0x1FFFFFFFFFFFFFFFLL;
        v123 = v67;
        if (v67)
        {
          if (v67 >> 61)
            sub_20E877A38();
          v69 = operator new(8 * v67);
        }
        else
        {
          v69 = 0;
        }
        v76 = &v69[8 * v64];
        v76[16] = 0u;
        v76[17] = 0u;
        v76[14] = 0u;
        v76[15] = 0u;
        v76[12] = 0u;
        v76[13] = 0u;
        v76[10] = 0u;
        v76[11] = 0u;
        v76[8] = 0u;
        v76[9] = 0u;
        v76[6] = 0u;
        v76[7] = 0u;
        v76[4] = 0u;
        v76[5] = 0u;
        v76[2] = 0u;
        v76[3] = 0u;
        *v76 = 0u;
        v76[1] = 0u;
        if ((int64x2_t *)v63 == v62)
        {
          v78 = &v69[8 * v64];
        }
        else
        {
          if (v126 - 8 < 0x68)
          {
            v77 = (char *)(v63 + (((unint64_t)v62 - v63) & 0xFFFFFFFFFFFFFFF8));
            v78 = &v69[8 * v64];
            goto LABEL_59;
          }
          v77 = (char *)(v63 + (((unint64_t)v62 - v63) & 0xFFFFFFFFFFFFFFF8));
          v78 = &v69[8 * v64];
          if (v63 + (v126 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v69[v126 & 0xFFFFFFFFFFFFFFF8] < 0x20)
            goto LABEL_102;
          v79 = ((v126 - 8) >> 3) + 1;
          v80 = 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
          v77 = (char *)&v65[v80 / 0xFFFFFFFFFFFFFFF8];
          v78 = (char *)v76 - v80;
          v81 = &v69[8 * v64 - 16];
          v82 = (__int128 *)(v63 + 8 * v64 - 16);
          v83 = v79 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v84 = *v82;
            *(v81 - 1) = *(v82 - 1);
            *v81 = v84;
            v81 -= 2;
            v82 -= 2;
            v83 -= 4;
          }
          while (v83);
          if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_102:
            do
            {
LABEL_59:
              v85 = *((_QWORD *)v77 - 1);
              v77 -= 8;
              *((_QWORD *)v78 - 1) = v85;
              v78 -= 8;
            }
            while (v77 != (char *)v63);
          }
        }
        v86 = v76 + 18;
        v87 = (char *)v62 - (char *)v65;
        if (v87)
        {
          v88 = v65;
          v89 = v69;
          memmove(v76 + 18, v88, v87);
          v69 = v89;
        }
        *(_QWORD *)(a1 + 16) = v78;
        *(_QWORD *)(a1 + 24) = (char *)v86 + v87;
        *(_QWORD *)(a1 + 32) = &v69[8 * v123];
        v3 = a3;
        if (v63)
          operator delete((void *)v63);
        goto LABEL_95;
      }
      v70 = (char *)v62 - (char *)v65;
      if ((unint64_t)((char *)v62 - (char *)v65) > 0x11F)
      {
        v72 = *(uint64_t **)(a1 + 24);
        v71 = 36;
        goto LABEL_71;
      }
      v71 = v70 >> 3;
      v72 = &v62->i64[36 - (v70 >> 3)];
      v73 = v70 & 0xFFFFFFFFFFFFFFF8;
      v74 = 280 - v73;
      if (280 - v73 < 0x68)
        break;
      v90 = &v131 < (uint64_t *)((char *)v62[18].i64 - v73);
      if (v62 < (int64x2_t *)&v132)
      {
        v75 = *(uint64_t **)(a1 + 24);
        if (v90)
          goto LABEL_69;
      }
      v91 = (v74 >> 3) + 1;
      v75 = &v62->i64[v91 & 0x3FFFFFFFFFFFFFFCLL];
      v92 = vdupq_lane_s64(v131, 0);
      v93 = v62 + 1;
      v94 = v91 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v93[-1] = v92;
        *v93 = v92;
        v93 += 2;
        v94 -= 4;
      }
      while (v94);
      if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_69;
LABEL_70:
      *(_QWORD *)(a1 + 24) = v72;
      if (v62 == (int64x2_t *)v65)
        goto LABEL_95;
LABEL_71:
      v95 = (char *)v72 - (char *)(v65 + 36);
      v96 = v95 >> 3;
      v97 = (int64x2_t *)(v72 - 36);
      v98 = (char *)v72;
      if (v72 - 36 < (uint64_t *)v62)
      {
        v99 = (v126 & 0xFFFFFFFFFFFFFFF8) + v95;
        v100 = v63 + v99 + 8;
        if ((unint64_t)v62 > v100)
          v100 = (unint64_t)v62;
        v101 = v100 + ~v63 - v99;
        if (v101 >= 0x58)
        {
          v102 = (v101 >> 3) + 1;
          v103 = v102 & 0x3FFFFFFFFFFFFFFCLL;
          v97 = (int64x2_t *)((char *)v97 + v103 * 8);
          v98 = (char *)&v72[v103];
          v104 = v72 + 2;
          v105 = (__int128 *)(v63 + 8 * v96 + 8 * v64 + 16);
          v106 = v102 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v107 = *v105;
            *(v104 - 1) = *(v105 - 1);
            *v104 = v107;
            v104 += 2;
            v105 += 2;
            v106 -= 4;
          }
          while (v106);
          if (v102 == (v102 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_80;
        }
        else
        {
          v98 = (char *)v72;
        }
        do
        {
          v108 = v97->i64[0];
          v97 = (int64x2_t *)((char *)v97 + 8);
          *(_QWORD *)v98 = v108;
          v98 += 8;
        }
        while (v97 < v62);
      }
LABEL_80:
      *(_QWORD *)(a1 + 24) = v98;
      if (v72 != v65 + 36)
      {
        v109 = v3;
        v110 = v71;
        memmove(&v72[-v96], (const void *)(v63 + (((unint64_t)v62 - v63) & 0xFFFFFFFFFFFFFFF8)), v95);
        v71 = v110;
        v3 = v109;
        v64 = (uint64_t)((uint64_t)v62->i64 - v63) >> 3;
      }
      v111 = (const double *)&v131;
      if (v65 <= &v131)
      {
        v112 = 288;
        if (*(_QWORD *)(a1 + 24) <= (unint64_t)&v131)
          v112 = 0;
        v111 = (const double *)((char *)&v131 + v112);
      }
      if (v71 < 0xA)
      {
        v113 = v71;
        goto LABEL_94;
      }
      if (v65 < (uint64_t *)v111 + 1 && (unint64_t)v111 < v63 + (v126 & 0xFFFFFFFFFFFFFFF8) + 8 * v71)
      {
        v113 = v71;
        do
        {
LABEL_94:
          *v65++ = *(_QWORD *)v111;
          --v113;
        }
        while (v113);
        goto LABEL_95;
      }
      v65 += v71 & 0xFFFFFFFFFFFFFFFCLL;
      v113 = v71 & 3;
      v114 = vld1q_dup_f64(v111);
      v115 = (float64x2_t *)(v63 + 8 * v64 + 16);
      v116 = v71 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v115[-1] = v114;
        *v115 = v114;
        v115 += 2;
        v116 -= 4;
      }
      while (v116);
      if (v71 != (v71 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_94;
LABEL_95:
      v55 = (_OWORD *)(*(_QWORD *)(a1 + 24) - 288);
      v4 = a2;
      v6 = v125;
      v61 = v24 - v54;
      if (v24 != v54)
        goto LABEL_96;
LABEL_19:
      v26 = ((uint64_t)v55 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v54 = v22;
      *((_QWORD *)v54 + 1) = v26;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v6);
      v24 += 16;
      v25 = v127;
      v27 = v130;
LABEL_20:
      v28 = (__int128 *)(v27 + 8 * (v3 + 6 * v22 + (_DWORD)v52 * v129));
      v30 = v28[1];
      v29 = v28[2];
      v31 = *v28;
      v32 = (__int128 *)((char *)v28 + 8 * v52);
      v34 = v32[1];
      v33 = v32[2];
      v35 = *v32;
      v36 = &v28[v52];
      v38 = v36[1];
      v37 = v36[2];
      v39 = *v36;
      v40 = (__int128 *)((char *)v28 + 24 * v52);
      v42 = v40[1];
      v41 = v40[2];
      v43 = *v40;
      v44 = &v28[2 * v52];
      v46 = v44[1];
      v45 = v44[2];
      v47 = *v44;
      v48 = (__int128 *)((char *)v28 + 40 * v52);
      v50 = v48[1];
      v49 = v48[2];
      v51 = *v48;
      *v55 = v31;
      v55[1] = v30;
      v55[2] = v29;
      v55[3] = v35;
      v55[4] = v34;
      v55[5] = v33;
      v55[6] = v39;
      v55[7] = v38;
      v55[8] = v37;
      v55[9] = v43;
      v55[10] = v42;
      v55[11] = v41;
      v55[12] = v47;
      v55[13] = v46;
      v55[14] = v45;
      v55[15] = v51;
      v55[16] = v50;
      v55[17] = v49;
      if (++v22 == v128)
        goto LABEL_3;
    }
    v75 = *(uint64_t **)(a1 + 24);
    do
LABEL_69:
      *v75++ = v131;
    while (v75 != v72);
    goto LABEL_70;
  }
}

void sub_20F5AB76C(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  char *v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  unint64_t v42;
  int64x2_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  _OWORD *v57;
  char *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  _OWORD *v67;
  size_t v68;
  uint64_t *v69;
  _BYTE *v70;
  BOOL v71;
  uint64_t v72;
  int64x2_t v73;
  int64x2_t *v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;
  int64x2_t *v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  __int128 *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  unint64_t v95;
  const double *v96;
  uint64_t v97;
  unint64_t v98;
  float64x2_t v99;
  float64x2_t *v100;
  unint64_t v101;
  unint64_t v102;
  _QWORD *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v108;
  char *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3 && *(_DWORD *)(a1 + 8))
  {
    v5 = a3;
    v6 = a2;
    v7 = 0;
    v104 = (_QWORD *)(a1 + 16);
    v102 = HIDWORD(a3);
    v8 = 1;
    while (!v8)
    {
LABEL_5:
      if (++v7 >= v3)
        return;
    }
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 88);
    v11 = (*(_DWORD *)(a1 + 112) * v7);
    v12 = (char *)(v10 + 16 * v11);
    v13 = (char *)(v10 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7) + v11));
    v110 = v102 + 4 * v7;
    v108 = v7;
    v109 = v12;
    while (1)
    {
      v15 = *v6;
      v32 = *((unsigned int *)v6 + 4);
      v33 = v12;
      if (v12 != v13)
      {
        v33 = v12;
        while (*(_DWORD *)v33 < v9)
        {
          v33 += 16;
          if (v33 == v13)
          {
            v34 = v13;
            goto LABEL_19;
          }
        }
      }
      v34 = v13;
      if (v33 != v13)
      {
        if (*(_DWORD *)v33 == v9)
        {
          v35 = (_OWORD *)(*v104 + 8 * *((_QWORD *)v33 + 1));
          goto LABEL_9;
        }
        v34 = v33;
      }
LABEL_19:
      v36 = *(_QWORD *)(a1 + 80);
      v111 = *v6;
      if (v36)
      {
        v38 = *(_QWORD *)(a1 + 48);
        v37 = *(_QWORD *)(a1 + 56);
        v39 = ((v37 - v38) << 6) - 1;
        v40 = *(_QWORD *)(a1 + 72);
        if (v37 == v38)
          v39 = 0;
        v35 = (_OWORD *)(*(_QWORD *)(a1 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v38 + (((unint64_t)(v40 + v36 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v40 + v36 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v36 - 1;
        if ((unint64_t)(v39 - (v36 + v40) + 1) >= 0x400)
        {
          operator delete(*(void **)(v37 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v41 = v13 - v34;
        if (v13 == v34)
          goto LABEL_8;
LABEL_85:
        memmove(v34 + 16, v34, v41);
        goto LABEL_8;
      }
      v112 = 0;
      v42 = *(_QWORD *)(a1 + 16);
      v43 = *(int64x2_t **)(a1 + 24);
      v44 = (unint64_t)v43 - v42;
      v45 = (uint64_t)((uint64_t)v43->i64 - v42) >> 3;
      v46 = (uint64_t *)(v42 + (((unint64_t)v43 - v42) & 0xFFFFFFFFFFFFFFF8));
      v47 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)(v47 - (_QWORD)v43) < 0xC0)
      {
        v48 = v45 + 24;
        if ((unint64_t)(v45 + 24) >> 61)
          sub_20E867F44();
        v49 = v47 - v42;
        if (v49 >> 2 > v48)
          v48 = v49 >> 2;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
          v48 = 0x1FFFFFFFFFFFFFFFLL;
        v105 = v48;
        if (v48)
        {
          if (v48 >> 61)
            sub_20E877A38();
          v50 = operator new(8 * v48);
          v44 = (unint64_t)v43 - v42;
        }
        else
        {
          v50 = 0;
        }
        v57 = &v50[8 * v45];
        v57[10] = 0u;
        v57[11] = 0u;
        v57[8] = 0u;
        v57[9] = 0u;
        v57[6] = 0u;
        v57[7] = 0u;
        v57[4] = 0u;
        v57[5] = 0u;
        v57[2] = 0u;
        v57[3] = 0u;
        *v57 = 0u;
        v57[1] = 0u;
        if ((int64x2_t *)v42 == v43)
        {
          v59 = &v50[8 * v45];
        }
        else
        {
          if (v44 - 8 < 0x68)
          {
            v58 = (char *)(v42 + (((unint64_t)v43 - v42) & 0xFFFFFFFFFFFFFFF8));
            v59 = &v50[8 * v45];
            goto LABEL_48;
          }
          v58 = (char *)(v42 + (((unint64_t)v43 - v42) & 0xFFFFFFFFFFFFFFF8));
          v59 = &v50[8 * v45];
          if (v42 + (v44 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v50[v44 & 0xFFFFFFFFFFFFFFF8] < 0x20)
            goto LABEL_91;
          v60 = ((v44 - 8) >> 3) + 1;
          v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
          v58 = (char *)&v46[v61 / 0xFFFFFFFFFFFFFFF8];
          v59 = (char *)v57 - v61;
          v62 = &v50[8 * v45 - 16];
          v63 = (__int128 *)(v42 + 8 * v45 - 16);
          v64 = v60 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v65 = *v63;
            *(v62 - 1) = *(v63 - 1);
            *v62 = v65;
            v62 -= 2;
            v63 -= 2;
            v64 -= 4;
          }
          while (v64);
          if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_91:
            do
            {
LABEL_48:
              v66 = *((_QWORD *)v58 - 1);
              v58 -= 8;
              *((_QWORD *)v59 - 1) = v66;
              v59 -= 8;
            }
            while (v58 != (char *)v42);
          }
        }
        v67 = v57 + 12;
        v68 = (char *)v43 - (char *)v46;
        if (v68)
        {
          v69 = v46;
          v70 = v50;
          memmove(v57 + 12, v69, v68);
          v50 = v70;
        }
        *(_QWORD *)(a1 + 16) = v59;
        *(_QWORD *)(a1 + 24) = (char *)v67 + v68;
        *(_QWORD *)(a1 + 32) = &v50[8 * v105];
        v5 = a3;
        if (v42)
          operator delete((void *)v42);
        goto LABEL_84;
      }
      v51 = (char *)v43 - (char *)v46;
      if ((unint64_t)((char *)v43 - (char *)v46) > 0xBF)
      {
        v53 = *(uint64_t **)(a1 + 24);
        v52 = 24;
        goto LABEL_60;
      }
      v52 = v51 >> 3;
      v53 = &v43->i64[24 - (v51 >> 3)];
      v54 = v51 & 0xFFFFFFFFFFFFFFF8;
      v55 = 184 - v54;
      if (184 - v54 < 0x68)
        break;
      v71 = &v112 < (uint64_t *)((char *)v43[12].i64 - v54);
      if (v43 < (int64x2_t *)&v113)
      {
        v56 = *(uint64_t **)(a1 + 24);
        if (v71)
          goto LABEL_58;
      }
      v72 = (v55 >> 3) + 1;
      v56 = &v43->i64[v72 & 0x3FFFFFFFFFFFFFFCLL];
      v73 = vdupq_lane_s64(v112, 0);
      v74 = v43 + 1;
      v75 = v72 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v74[-1] = v73;
        *v74 = v73;
        v74 += 2;
        v75 -= 4;
      }
      while (v75);
      if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_58;
LABEL_59:
      *(_QWORD *)(a1 + 24) = v53;
      if (v43 == (int64x2_t *)v46)
        goto LABEL_84;
LABEL_60:
      v76 = (char *)v53 - (char *)(v46 + 24);
      v77 = v76 >> 3;
      v78 = (int64x2_t *)(v53 - 24);
      v79 = (char *)v53;
      if (v53 - 24 < (uint64_t *)v43)
      {
        v80 = (v44 & 0xFFFFFFFFFFFFFFF8) + v76;
        v81 = v42 + v80 + 8;
        if ((unint64_t)v43 > v81)
          v81 = (unint64_t)v43;
        v82 = v81 + ~v42 - v80;
        if (v82 >= 0x58)
        {
          v83 = (v82 >> 3) + 1;
          v84 = v83 & 0x3FFFFFFFFFFFFFFCLL;
          v78 = (int64x2_t *)((char *)v78 + v84 * 8);
          v79 = (char *)&v53[v84];
          v85 = v53 + 2;
          v86 = (__int128 *)(v42 + 8 * v77 + 8 * v45 + 16);
          v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v88 = *v86;
            *(v85 - 1) = *(v86 - 1);
            *v85 = v88;
            v85 += 2;
            v86 += 2;
            v87 -= 4;
          }
          while (v87);
          v44 = (unint64_t)v43 - v42;
          if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_69;
        }
        else
        {
          v79 = (char *)v53;
        }
        do
        {
          v89 = v78->i64[0];
          v78 = (int64x2_t *)((char *)v78 + 8);
          *(_QWORD *)v79 = v89;
          v79 += 8;
        }
        while (v78 < v43);
      }
LABEL_69:
      *(_QWORD *)(a1 + 24) = v79;
      if (v53 != v46 + 24)
      {
        v106 = (uint64_t)((uint64_t)v43->i64 - v42) >> 3;
        v90 = (char *)(v42 + (((unint64_t)v43 - v42) & 0xFFFFFFFFFFFFFFF8));
        v91 = v34;
        v92 = v32;
        v93 = (char *)v44;
        v94 = v5;
        v95 = v52;
        memmove(&v53[-v77], v90, v76);
        v52 = v95;
        v5 = v94;
        v44 = (unint64_t)v93;
        v32 = v92;
        v34 = v91;
        v45 = v106;
      }
      v96 = (const double *)&v112;
      if (v46 <= &v112)
      {
        v97 = 192;
        if (*(_QWORD *)(a1 + 24) <= (unint64_t)&v112)
          v97 = 0;
        v96 = (const double *)((char *)&v112 + v97);
      }
      if (v52 < 0xA)
      {
        v98 = v52;
        goto LABEL_83;
      }
      if (v46 < (uint64_t *)v96 + 1 && (unint64_t)v96 < v42 + (v44 & 0xFFFFFFFFFFFFFFF8) + 8 * v52)
      {
        v98 = v52;
        do
        {
LABEL_83:
          *v46++ = *(_QWORD *)v96;
          --v98;
        }
        while (v98);
        goto LABEL_84;
      }
      v46 += v52 & 0xFFFFFFFFFFFFFFFCLL;
      v98 = v52 & 3;
      v99 = vld1q_dup_f64(v96);
      v100 = (float64x2_t *)(v42 + 8 * v45 + 16);
      v101 = v52 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v100[-1] = v99;
        *v100 = v99;
        v100 += 2;
        v101 -= 4;
      }
      while (v101);
      if (v52 != (v52 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_83;
LABEL_84:
      v35 = (_OWORD *)(*(_QWORD *)(a1 + 24) - 192);
      v6 = a2;
      v7 = v108;
      v41 = v13 - v34;
      if (v13 != v34)
        goto LABEL_85;
LABEL_8:
      v14 = ((uint64_t)v35 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v34 = v9;
      *((_QWORD *)v34 + 1) = v14;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
      v13 += 16;
      v12 = v109;
      v15 = v111;
LABEL_9:
      v16 = (__int128 *)(v15 + 8 * (v5 + 6 * v9 + (_DWORD)v32 * v110));
      v18 = v16[1];
      v17 = v16[2];
      v19 = *v16;
      v20 = (__int128 *)((char *)v16 + 8 * v32);
      v22 = v20[1];
      v21 = v20[2];
      v23 = *v20;
      v24 = &v16[v32];
      v26 = v24[1];
      v25 = v24[2];
      v27 = *v24;
      v28 = (__int128 *)((char *)v16 + 24 * v32);
      v30 = v28[1];
      v29 = v28[2];
      v31 = *v28;
      *v35 = v19;
      v35[1] = v18;
      v35[2] = v17;
      v35[3] = v23;
      v35[4] = v22;
      v35[5] = v21;
      v35[6] = v27;
      v35[7] = v26;
      v35[8] = v25;
      v35[9] = v31;
      v35[10] = v30;
      v35[11] = v29;
      ++v9;
      v8 = *(_DWORD *)(a1 + 8);
      if (v9 >= v8)
      {
        v3 = *(unsigned int *)(a1 + 12);
        goto LABEL_5;
      }
    }
    v56 = *(uint64_t **)(a1 + 24);
    do
LABEL_58:
      *v56++ = v112;
    while (v56 != v53);
    goto LABEL_59;
  }
}

void sub_20F5ABE20(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  char *v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  unint64_t v38;
  int64x2_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  _OWORD *v53;
  char *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  __int128 *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  _OWORD *v63;
  size_t v64;
  uint64_t *v65;
  _BYTE *v66;
  BOOL v67;
  uint64_t v68;
  int64x2_t v69;
  int64x2_t *v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  int64x2_t *v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  __int128 *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  unint64_t v91;
  const double *v92;
  uint64_t v93;
  unint64_t v94;
  float64x2_t v95;
  float64x2_t *v96;
  unint64_t v97;
  unint64_t v98;
  _QWORD *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v104;
  char *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3 && *(_DWORD *)(a1 + 8))
  {
    v5 = a3;
    v6 = a2;
    v7 = 0;
    v100 = (_QWORD *)(a1 + 16);
    v98 = HIDWORD(a3);
    v8 = 1;
    while (!v8)
    {
LABEL_5:
      if (++v7 >= v3)
        return;
    }
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 88);
    v11 = (*(_DWORD *)(a1 + 112) * v7);
    v12 = (char *)(v10 + 16 * v11);
    v13 = (char *)(v10 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7) + v11));
    v106 = 3 * v7 + v98;
    v104 = v7;
    v105 = v12;
    while (1)
    {
      v15 = *v6;
      v28 = *((unsigned int *)v6 + 4);
      v29 = v12;
      if (v12 != v13)
      {
        v29 = v12;
        while (*(_DWORD *)v29 < v9)
        {
          v29 += 16;
          if (v29 == v13)
          {
            v30 = v13;
            goto LABEL_19;
          }
        }
      }
      v30 = v13;
      if (v29 != v13)
      {
        if (*(_DWORD *)v29 == v9)
        {
          v31 = (_OWORD *)(*v100 + 8 * *((_QWORD *)v29 + 1));
          goto LABEL_9;
        }
        v30 = v29;
      }
LABEL_19:
      v32 = *(_QWORD *)(a1 + 80);
      v107 = *v6;
      if (v32)
      {
        v34 = *(_QWORD *)(a1 + 48);
        v33 = *(_QWORD *)(a1 + 56);
        v35 = ((v33 - v34) << 6) - 1;
        v36 = *(_QWORD *)(a1 + 72);
        if (v33 == v34)
          v35 = 0;
        v31 = (_OWORD *)(*(_QWORD *)(a1 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v34 + (((unint64_t)(v36 + v32 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v36 + v32 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v32 - 1;
        if ((unint64_t)(v35 - (v32 + v36) + 1) >= 0x400)
        {
          operator delete(*(void **)(v33 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v37 = v13 - v30;
        if (v13 == v30)
          goto LABEL_8;
LABEL_85:
        memmove(v30 + 16, v30, v37);
        goto LABEL_8;
      }
      v108 = 0;
      v38 = *(_QWORD *)(a1 + 16);
      v39 = *(int64x2_t **)(a1 + 24);
      v40 = (unint64_t)v39 - v38;
      v41 = (uint64_t)((uint64_t)v39->i64 - v38) >> 3;
      v42 = (uint64_t *)(v38 + (((unint64_t)v39 - v38) & 0xFFFFFFFFFFFFFFF8));
      v43 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)(v43 - (_QWORD)v39) < 0x90)
      {
        v44 = v41 + 18;
        if ((unint64_t)(v41 + 18) >> 61)
          sub_20E867F44();
        v45 = v43 - v38;
        if (v45 >> 2 > v44)
          v44 = v45 >> 2;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        v101 = v44;
        if (v44)
        {
          if (v44 >> 61)
            sub_20E877A38();
          v46 = operator new(8 * v44);
          v40 = (unint64_t)v39 - v38;
        }
        else
        {
          v46 = 0;
        }
        v53 = &v46[8 * v41];
        v53[7] = 0u;
        v53[8] = 0u;
        v53[5] = 0u;
        v53[6] = 0u;
        v53[3] = 0u;
        v53[4] = 0u;
        v53[1] = 0u;
        v53[2] = 0u;
        *v53 = 0u;
        if ((int64x2_t *)v38 == v39)
        {
          v55 = &v46[8 * v41];
        }
        else
        {
          if (v40 - 8 < 0x68)
          {
            v54 = (char *)(v38 + (((unint64_t)v39 - v38) & 0xFFFFFFFFFFFFFFF8));
            v55 = &v46[8 * v41];
            goto LABEL_48;
          }
          v54 = (char *)(v38 + (((unint64_t)v39 - v38) & 0xFFFFFFFFFFFFFFF8));
          v55 = &v46[8 * v41];
          if (v38 + (v40 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v46[v40 & 0xFFFFFFFFFFFFFFF8] < 0x20)
            goto LABEL_91;
          v56 = ((v40 - 8) >> 3) + 1;
          v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
          v54 = (char *)&v42[v57 / 0xFFFFFFFFFFFFFFF8];
          v55 = (char *)v53 - v57;
          v58 = &v46[8 * v41 - 16];
          v59 = (__int128 *)(v38 + 8 * v41 - 16);
          v60 = v56 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v61 = *v59;
            *(v58 - 1) = *(v59 - 1);
            *v58 = v61;
            v58 -= 2;
            v59 -= 2;
            v60 -= 4;
          }
          while (v60);
          if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_91:
            do
            {
LABEL_48:
              v62 = *((_QWORD *)v54 - 1);
              v54 -= 8;
              *((_QWORD *)v55 - 1) = v62;
              v55 -= 8;
            }
            while (v54 != (char *)v38);
          }
        }
        v63 = v53 + 9;
        v64 = (char *)v39 - (char *)v42;
        if (v64)
        {
          v65 = v42;
          v66 = v46;
          memmove(v53 + 9, v65, v64);
          v46 = v66;
        }
        *(_QWORD *)(a1 + 16) = v55;
        *(_QWORD *)(a1 + 24) = (char *)v63 + v64;
        *(_QWORD *)(a1 + 32) = &v46[8 * v101];
        v5 = a3;
        if (v38)
          operator delete((void *)v38);
        goto LABEL_84;
      }
      v47 = (char *)v39 - (char *)v42;
      if ((unint64_t)((char *)v39 - (char *)v42) > 0x8F)
      {
        v49 = *(uint64_t **)(a1 + 24);
        v48 = 18;
        goto LABEL_60;
      }
      v48 = v47 >> 3;
      v49 = &v39->i64[18 - (v47 >> 3)];
      v50 = v47 & 0xFFFFFFFFFFFFFFF8;
      v51 = 136 - v50;
      if (136 - v50 < 0x68)
        break;
      v67 = &v108 < (uint64_t *)((char *)v39[9].i64 - v50);
      if (v39 < (int64x2_t *)&v109)
      {
        v52 = *(uint64_t **)(a1 + 24);
        if (v67)
          goto LABEL_58;
      }
      v68 = (v51 >> 3) + 1;
      v52 = &v39->i64[v68 & 0x3FFFFFFFFFFFFFFCLL];
      v69 = vdupq_lane_s64(v108, 0);
      v70 = v39 + 1;
      v71 = v68 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v70[-1] = v69;
        *v70 = v69;
        v70 += 2;
        v71 -= 4;
      }
      while (v71);
      if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_58;
LABEL_59:
      *(_QWORD *)(a1 + 24) = v49;
      if (v39 == (int64x2_t *)v42)
        goto LABEL_84;
LABEL_60:
      v72 = (char *)v49 - (char *)(v42 + 18);
      v73 = v72 >> 3;
      v74 = (int64x2_t *)(v49 - 18);
      v75 = (char *)v49;
      if (v49 - 18 < (uint64_t *)v39)
      {
        v76 = (v40 & 0xFFFFFFFFFFFFFFF8) + v72;
        v77 = v38 + v76 + 8;
        if ((unint64_t)v39 > v77)
          v77 = (unint64_t)v39;
        v78 = v77 + ~v38 - v76;
        if (v78 >= 0x58)
        {
          v79 = (v78 >> 3) + 1;
          v80 = v79 & 0x3FFFFFFFFFFFFFFCLL;
          v74 = (int64x2_t *)((char *)v74 + v80 * 8);
          v75 = (char *)&v49[v80];
          v81 = v49 + 2;
          v82 = (__int128 *)(v38 + 8 * v73 + 8 * v41 + 16);
          v83 = v79 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v84 = *v82;
            *(v81 - 1) = *(v82 - 1);
            *v81 = v84;
            v81 += 2;
            v82 += 2;
            v83 -= 4;
          }
          while (v83);
          v40 = (unint64_t)v39 - v38;
          if (v79 == (v79 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_69;
        }
        else
        {
          v75 = (char *)v49;
        }
        do
        {
          v85 = v74->i64[0];
          v74 = (int64x2_t *)((char *)v74 + 8);
          *(_QWORD *)v75 = v85;
          v75 += 8;
        }
        while (v74 < v39);
      }
LABEL_69:
      *(_QWORD *)(a1 + 24) = v75;
      if (v49 != v42 + 18)
      {
        v102 = (uint64_t)((uint64_t)v39->i64 - v38) >> 3;
        v86 = (char *)(v38 + (((unint64_t)v39 - v38) & 0xFFFFFFFFFFFFFFF8));
        v87 = v30;
        v88 = v28;
        v89 = (char *)v40;
        v90 = v5;
        v91 = v48;
        memmove(&v49[-v73], v86, v72);
        v48 = v91;
        v5 = v90;
        v40 = (unint64_t)v89;
        v28 = v88;
        v30 = v87;
        v41 = v102;
      }
      v92 = (const double *)&v108;
      if (v42 <= &v108)
      {
        v93 = 144;
        if (*(_QWORD *)(a1 + 24) <= (unint64_t)&v108)
          v93 = 0;
        v92 = (const double *)((char *)&v108 + v93);
      }
      if (v48 < 0xA)
      {
        v94 = v48;
        goto LABEL_83;
      }
      if (v42 < (uint64_t *)v92 + 1 && (unint64_t)v92 < v38 + (v40 & 0xFFFFFFFFFFFFFFF8) + 8 * v48)
      {
        v94 = v48;
        do
        {
LABEL_83:
          *v42++ = *(_QWORD *)v92;
          --v94;
        }
        while (v94);
        goto LABEL_84;
      }
      v42 += v48 & 0xFFFFFFFFFFFFFFFCLL;
      v94 = v48 & 3;
      v95 = vld1q_dup_f64(v92);
      v96 = (float64x2_t *)(v38 + 8 * v41 + 16);
      v97 = v48 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v96[-1] = v95;
        *v96 = v95;
        v96 += 2;
        v97 -= 4;
      }
      while (v97);
      if (v48 != (v48 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_83;
LABEL_84:
      v31 = (_OWORD *)(*(_QWORD *)(a1 + 24) - 144);
      v6 = a2;
      v7 = v104;
      v37 = v13 - v30;
      if (v13 != v30)
        goto LABEL_85;
LABEL_8:
      v14 = ((uint64_t)v31 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v30 = v9;
      *((_QWORD *)v30 + 1) = v14;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
      v13 += 16;
      v12 = v105;
      v15 = v107;
LABEL_9:
      v16 = (__int128 *)(v15 + 8 * (v5 + 6 * v9 + (_DWORD)v28 * v106));
      v18 = v16[1];
      v17 = v16[2];
      v19 = *v16;
      v20 = (__int128 *)((char *)v16 + 8 * v28);
      v22 = v20[1];
      v21 = v20[2];
      v23 = *v20;
      v24 = &v16[v28];
      v26 = v24[1];
      v25 = v24[2];
      v27 = *v24;
      *v31 = v19;
      v31[1] = v18;
      v31[2] = v17;
      v31[3] = v23;
      v31[4] = v22;
      v31[5] = v21;
      v31[6] = v27;
      v31[7] = v26;
      v31[8] = v25;
      ++v9;
      v8 = *(_DWORD *)(a1 + 8);
      if (v9 >= v8)
      {
        v3 = *(unsigned int *)(a1 + 12);
        goto LABEL_5;
      }
    }
    v52 = *(uint64_t **)(a1 + 24);
    do
LABEL_58:
      *v52++ = v108;
    while (v52 != v49);
    goto LABEL_59;
  }
}

void sub_20F5AC4C0(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  int v3;
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char *v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  char *v37;
  char *v38;
  int64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  _QWORD *v48;
  char *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  size_t v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  unsigned int v66;
  char *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = a3;
    v4 = a2;
    v6 = 0;
    v7 = a1 + 40;
    v68 = (_QWORD *)(a1 + 16);
    v66 = 1;
    v65 = a3;
    v62 = HIDWORD(a3);
    v63 = a1 + 40;
    while (1)
    {
      v8 = *(_QWORD *)(a1 + 88);
      v9 = (*(_DWORD *)(a1 + 112) * v6);
      v10 = *(_QWORD *)(a1 + 120);
      v11 = *(_QWORD *)(v10 + 8 * v6);
      if (v11)
      {
        v12 = *(_QWORD *)(a1 + 48);
        v13 = *(_QWORD *)(a1 + 56);
        v14 = *(_QWORD *)(a1 + 80);
        v15 = 16 * v11;
        v16 = (uint64_t *)(v8 + 16 * v9 + 8);
        do
        {
          if (v13 == v12)
            v18 = 0;
          else
            v18 = ((v13 - v12) << 6) - 1;
          v19 = *(_QWORD *)(a1 + 72) + v14;
          if (v18 == v19)
          {
            sub_20EDB36DC(v7);
            v12 = *(_QWORD *)(a1 + 48);
            v13 = *(_QWORD *)(a1 + 56);
            v19 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
          }
          v17 = *v16;
          v16 += 2;
          *(_QWORD *)(*(_QWORD *)(v12 + ((v19 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v19 & 0x1FF)) = v17;
          v14 = *(_QWORD *)(a1 + 80) + 1;
          *(_QWORD *)(a1 + 80) = v14;
          v15 -= 16;
        }
        while (v15);
        v10 = *(_QWORD *)(a1 + 120);
        v8 = *(_QWORD *)(a1 + 88);
        v9 = (*(_DWORD *)(a1 + 112) * v6);
      }
      *(_QWORD *)(v10 + 8 * v6) = 0;
      v20 = v6 + 1;
      v21 = *(_DWORD *)(a1 + 8);
      v64 = v6 + 1;
      if (v21 < (int)v6 + 1)
        v20 = *(_DWORD *)(a1 + 8);
      if (v20)
        break;
LABEL_3:
      ++v66;
      v7 = v63;
      v6 = v64;
      if (v64 >= *(unsigned int *)(a1 + 12))
        return;
    }
    v22 = 0;
    v23 = (char *)(v8 + 16 * v9);
    v24 = (char *)(v8 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v6) + v9));
    v73 = v6 + v62;
    if (v21 >= v66)
      v21 = v66;
    v72 = v21;
    v71 = v6;
    v67 = (char *)(v8 + 16 * v9);
    while (1)
    {
      v26 = *v4;
      v27 = *((_DWORD *)v4 + 4);
      v28 = v23;
      if (v23 != v24)
      {
        v28 = v23;
        while (*(_DWORD *)v28 < v22)
        {
          v28 += 16;
          if (v28 == v24)
          {
            v29 = v24;
            goto LABEL_30;
          }
        }
      }
      v29 = v24;
      if (v28 != v24)
      {
        if (*(_DWORD *)v28 == v22)
        {
          v30 = (_QWORD *)(*v68 + 8 * *((_QWORD *)v28 + 1));
          goto LABEL_20;
        }
        v29 = v28;
      }
LABEL_30:
      v31 = *(_QWORD *)(a1 + 80);
      v75 = *((_DWORD *)v4 + 4);
      v74 = *v4;
      if (v31)
      {
        v33 = *(_QWORD *)(a1 + 48);
        v32 = *(_QWORD *)(a1 + 56);
        v34 = ((v32 - v33) << 6) - 1;
        v35 = *(_QWORD *)(a1 + 72);
        if (v32 == v33)
          v34 = 0;
        v30 = (_QWORD *)(*(_QWORD *)(a1 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v33 + (((unint64_t)(v35 + v31 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v35 + v31 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v31 - 1;
        if ((unint64_t)(v34 - (v31 + v35) + 1) >= 0x400)
        {
          operator delete(*(void **)(v32 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v36 = v24 - v29;
        if (v24 == v29)
          goto LABEL_19;
LABEL_72:
        memmove(v29 + 16, v29, v36);
        goto LABEL_19;
      }
      v76 = 0;
      v38 = *(char **)(a1 + 16);
      v37 = *(char **)(a1 + 24);
      v39 = v37 - v38;
      v40 = (v37 - v38) >> 3;
      v41 = &v38[(v37 - v38) & 0xFFFFFFFFFFFFFFF8];
      v42 = *(char **)(a1 + 32);
      if (v42 != v37)
      {
        if (v37 == v41)
        {
          *(_QWORD *)v37 = v76;
          *(_QWORD *)(a1 + 24) = v37 + 8;
        }
        else
        {
          v43 = v37 - 8;
          if ((unint64_t)v37 < 8)
          {
            v44 = *(_QWORD **)(a1 + 24);
          }
          else
          {
            v44 = *(_QWORD **)(a1 + 24);
            do
            {
              v60 = *(_QWORD *)v43;
              v43 += 8;
              *v44++ = v60;
            }
            while (v43 < v37);
          }
          *(_QWORD *)(a1 + 24) = v44;
          if (v37 != v41 + 8)
          {
            memmove(&v37[-8 * ((v37 - (v41 + 8)) >> 3)], v41, v37 - (v41 + 8));
            v41 = &v38[(v37 - v38) & 0xFFFFFFFFFFFFFFF8];
          }
          v61 = &v76;
          if (v41 <= (char *)&v76)
            v61 = &v76 + (*(_QWORD *)(a1 + 24) > (unint64_t)&v76);
          *(_QWORD *)v41 = *v61;
        }
        v4 = a2;
        goto LABEL_71;
      }
      v45 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 61)
        sub_20E867F44();
      v46 = v42 - v38;
      if (v46 >> 2 > v45)
        v45 = v46 >> 2;
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
        v45 = 0x1FFFFFFFFFFFFFFFLL;
      v69 = v45;
      if (v45)
      {
        if (v45 >> 61)
          sub_20E877A38();
        v47 = operator new(8 * v45);
        v41 = &v38[(v37 - v38) & 0xFFFFFFFFFFFFFFF8];
        v40 = (v37 - v38) >> 3;
        v48 = &v47[8 * v40];
        *v48 = 0;
        v49 = (char *)(v48 + 1);
        if (v38 == v37)
        {
LABEL_54:
          v23 = v67;
          goto LABEL_60;
        }
      }
      else
      {
        v47 = 0;
        v48 = (_QWORD *)(8 * v40);
        *(_QWORD *)(8 * v40) = 0;
        v49 = (char *)(8 * v40 + 8);
        if (v38 == v37)
          goto LABEL_54;
      }
      if ((unint64_t)(v39 - 8) >= 0x68)
      {
        v50 = v41;
        v23 = v67;
        if ((unint64_t)(&v38[v39 & 0xFFFFFFFFFFFFFFF8] - &v47[v39 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
        {
          v51 = ((unint64_t)(v39 - 8) >> 3) + 1;
          v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
          v50 = &v41[-v52];
          v48 = (_QWORD *)((char *)v48 - v52);
          v53 = &v47[8 * v40 - 16];
          v54 = &v38[8 * v40 - 16];
          v55 = v51 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v56 = *(_OWORD *)v54;
            *(v53 - 1) = *((_OWORD *)v54 - 1);
            *v53 = v56;
            v53 -= 2;
            v54 -= 32;
            v55 -= 4;
          }
          while (v55);
          if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_60;
        }
      }
      else
      {
        v50 = v41;
        v23 = v67;
      }
      do
      {
        v57 = *((_QWORD *)v50 - 1);
        v50 -= 8;
        *--v48 = v57;
      }
      while (v50 != v38);
LABEL_60:
      v58 = v37 - v41;
      if (v58)
      {
        v59 = v49;
        memmove(v49, v41, v58);
        v49 = v59;
      }
      *(_QWORD *)(a1 + 16) = v48;
      *(_QWORD *)(a1 + 24) = &v49[v58];
      *(_QWORD *)(a1 + 32) = &v47[8 * v69];
      v3 = v65;
      v4 = a2;
      if (v38)
        operator delete(v38);
LABEL_71:
      v30 = (_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
      v6 = v71;
      v36 = v24 - v29;
      if (v24 != v29)
        goto LABEL_72;
LABEL_19:
      v25 = ((uint64_t)v30 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v29 = v22;
      *((_QWORD *)v29 + 1) = v25;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v6);
      v24 += 16;
      v26 = v74;
      v27 = v75;
LABEL_20:
      *v30 = *(_QWORD *)(v26 + 8 * (v22 + v3 + v27 * v73));
      if (++v22 == v72)
        goto LABEL_3;
    }
  }
}

void sub_20F5ACA98(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  unint64_t v32;
  int64x2_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _OWORD *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  __int128 *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  _OWORD *v57;
  size_t v58;
  uint64_t *v59;
  _BYTE *v60;
  BOOL v61;
  uint64_t v62;
  int64x2_t v63;
  int64x2_t *v64;
  uint64_t v65;
  int64_t v66;
  uint64_t v67;
  int64x2_t *v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  __int128 *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  const double *v85;
  uint64_t v86;
  unint64_t v87;
  float64x2_t v88;
  float64x2_t *v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v97;
  char *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3 && *(_DWORD *)(a1 + 8))
  {
    v5 = a3;
    v6 = a2;
    v7 = 0;
    v93 = (_QWORD *)(a1 + 16);
    v91 = HIDWORD(a3);
    v8 = 1;
    while (!v8)
    {
LABEL_5:
      if (++v7 >= v3)
        return;
    }
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 88);
    v11 = (*(_DWORD *)(a1 + 112) * v7);
    v12 = (char *)(v10 + 16 * v11);
    v13 = (char *)(v10 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7) + v11));
    v99 = v91 + 6 * v7;
    v97 = v7;
    v98 = v12;
    while (1)
    {
      v15 = *v6;
      v22 = *((unsigned int *)v6 + 4);
      v23 = v12;
      if (v12 != v13)
      {
        v23 = v12;
        while (*(_DWORD *)v23 < v9)
        {
          v23 += 16;
          if (v23 == v13)
          {
            v24 = v13;
            goto LABEL_19;
          }
        }
      }
      v24 = v13;
      if (v23 != v13)
      {
        if (*(_DWORD *)v23 == v9)
        {
          v25 = (_QWORD *)(*v93 + 8 * *((_QWORD *)v23 + 1));
          goto LABEL_9;
        }
        v24 = v23;
      }
LABEL_19:
      v26 = *(_QWORD *)(a1 + 80);
      v100 = *v6;
      if (v26)
      {
        v28 = *(_QWORD *)(a1 + 48);
        v27 = *(_QWORD *)(a1 + 56);
        v29 = ((v27 - v28) << 6) - 1;
        v30 = *(_QWORD *)(a1 + 72);
        if (v27 == v28)
          v29 = 0;
        v25 = (_QWORD *)(*(_QWORD *)(a1 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v28 + (((unint64_t)(v30 + v26 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v30 + v26 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v26 - 1;
        if ((unint64_t)(v29 - (v26 + v30) + 1) >= 0x400)
        {
          operator delete(*(void **)(v27 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v31 = v13 - v24;
        if (v13 == v24)
          goto LABEL_8;
LABEL_84:
        memmove(v24 + 16, v24, v31);
        goto LABEL_8;
      }
      v101 = 0;
      v32 = *(_QWORD *)(a1 + 16);
      v33 = *(int64x2_t **)(a1 + 24);
      v34 = (unint64_t)v33 - v32;
      v35 = (uint64_t)((uint64_t)v33->i64 - v32) >> 3;
      v36 = (uint64_t *)(v32 + (((unint64_t)v33 - v32) & 0xFFFFFFFFFFFFFFF8));
      v37 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)(v37 - (_QWORD)v33) < 0x30)
      {
        v38 = v35 + 6;
        if ((unint64_t)(v35 + 6) >> 61)
          sub_20E867F44();
        v39 = v37 - v32;
        if (v39 >> 2 > v38)
          v38 = v39 >> 2;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
          v38 = 0x1FFFFFFFFFFFFFFFLL;
        v94 = v38;
        if (v38)
        {
          if (v38 >> 61)
            sub_20E877A38();
          v40 = operator new(8 * v38);
          v34 = (unint64_t)v33 - v32;
          v41 = &v40[8 * v35];
          v41[1] = 0u;
          v41[2] = 0u;
          *v41 = 0u;
          if ((int64x2_t *)v32 != v33)
          {
LABEL_35:
            if (v34 - 8 < 0x68)
            {
              v42 = (char *)(v32 + (((unint64_t)v33 - v32) & 0xFFFFFFFFFFFFFFF8));
              v43 = (char *)v41;
              goto LABEL_47;
            }
            v42 = (char *)(v32 + (((unint64_t)v33 - v32) & 0xFFFFFFFFFFFFFFF8));
            v43 = (char *)v41;
            if (v32 + (v34 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v40[v34 & 0xFFFFFFFFFFFFFFF8] < 0x20)
              goto LABEL_90;
            v50 = ((v34 - 8) >> 3) + 1;
            v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
            v42 = (char *)&v36[v51 / 0xFFFFFFFFFFFFFFF8];
            v43 = (char *)v41 - v51;
            v52 = &v40[8 * v35 - 16];
            v53 = (__int128 *)(v32 + 8 * v35 - 16);
            v54 = v50 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v55 = *v53;
              *(v52 - 1) = *(v53 - 1);
              *v52 = v55;
              v52 -= 2;
              v53 -= 2;
              v54 -= 4;
            }
            while (v54);
            if (v50 != (v50 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_90:
              do
              {
LABEL_47:
                v56 = *((_QWORD *)v42 - 1);
                v42 -= 8;
                *((_QWORD *)v43 - 1) = v56;
                v43 -= 8;
              }
              while (v42 != (char *)v32);
            }
LABEL_48:
            v57 = v41 + 3;
            v58 = (char *)v33 - (char *)v36;
            if (v58)
            {
              v59 = v36;
              v60 = v40;
              memmove(v41 + 3, v59, v58);
              v40 = v60;
            }
            *(_QWORD *)(a1 + 16) = v43;
            *(_QWORD *)(a1 + 24) = (char *)v57 + v58;
            *(_QWORD *)(a1 + 32) = &v40[8 * v94];
            v5 = a3;
            if (v32)
              operator delete((void *)v32);
            goto LABEL_83;
          }
        }
        else
        {
          v40 = 0;
          v41 = (_OWORD *)(8 * v35);
          v41[1] = 0u;
          v41[2] = 0u;
          *v41 = 0u;
          if ((int64x2_t *)v32 != v33)
            goto LABEL_35;
        }
        v43 = (char *)v41;
        goto LABEL_48;
      }
      v44 = (char *)v33 - (char *)v36;
      if ((unint64_t)((char *)v33 - (char *)v36) > 0x2F)
      {
        v46 = *(uint64_t **)(a1 + 24);
        v45 = 6;
        goto LABEL_59;
      }
      v45 = v44 >> 3;
      v46 = &v33->i64[6 - (v44 >> 3)];
      v47 = v44 & 0xFFFFFFFFFFFFFFF8;
      v48 = 40 - v47;
      if (40 - v47 < 0x68)
        break;
      v61 = &v101 < (uint64_t *)((char *)v33[3].i64 - v47);
      if (v33 < (int64x2_t *)&v102)
      {
        v49 = *(uint64_t **)(a1 + 24);
        if (v61)
          goto LABEL_57;
      }
      v62 = (v48 >> 3) + 1;
      v49 = &v33->i64[v62 & 0x3FFFFFFFFFFFFFFCLL];
      v63 = vdupq_lane_s64(v101, 0);
      v64 = v33 + 1;
      v65 = v62 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v64[-1] = v63;
        *v64 = v63;
        v64 += 2;
        v65 -= 4;
      }
      while (v65);
      if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_57;
LABEL_58:
      *(_QWORD *)(a1 + 24) = v46;
      if (v33 == (int64x2_t *)v36)
        goto LABEL_83;
LABEL_59:
      v66 = (char *)v46 - (char *)(v36 + 6);
      v67 = v66 >> 3;
      v68 = (int64x2_t *)(v46 - 6);
      v69 = (char *)v46;
      if (v46 - 6 < (uint64_t *)v33)
      {
        v70 = (v34 & 0xFFFFFFFFFFFFFFF8) + v66;
        v71 = v32 + v70 + 8;
        if ((unint64_t)v33 > v71)
          v71 = (unint64_t)v33;
        v72 = v71 + ~v32 - v70;
        if (v72 >= 0x58)
        {
          v73 = (v72 >> 3) + 1;
          v74 = v73 & 0x3FFFFFFFFFFFFFFCLL;
          v68 = (int64x2_t *)((char *)v68 + v74 * 8);
          v69 = (char *)&v46[v74];
          v75 = v46 + 2;
          v76 = (__int128 *)(v32 + 8 * v67 + 8 * v35 + 16);
          v77 = v73 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v78 = *v76;
            *(v75 - 1) = *(v76 - 1);
            *v75 = v78;
            v75 += 2;
            v76 += 2;
            v77 -= 4;
          }
          while (v77);
          v34 = (unint64_t)v33 - v32;
          if (v73 == (v73 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_68;
        }
        else
        {
          v69 = (char *)v46;
        }
        do
        {
          v79 = v68->i64[0];
          v68 = (int64x2_t *)((char *)v68 + 8);
          *(_QWORD *)v69 = v79;
          v69 += 8;
        }
        while (v68 < v33);
      }
LABEL_68:
      *(_QWORD *)(a1 + 24) = v69;
      if (v46 != v36 + 6)
      {
        v95 = (uint64_t)((uint64_t)v33->i64 - v32) >> 3;
        v80 = (char *)(v32 + (((unint64_t)v33 - v32) & 0xFFFFFFFFFFFFFFF8));
        v81 = v24;
        v82 = (char *)v34;
        v83 = v5;
        v84 = v45;
        memmove(&v46[-v67], v80, v66);
        v45 = v84;
        v5 = v83;
        v34 = (unint64_t)v82;
        v24 = v81;
        v35 = v95;
      }
      v85 = (const double *)&v101;
      if (v36 <= &v101)
      {
        v86 = 48;
        if (*(_QWORD *)(a1 + 24) <= (unint64_t)&v101)
          v86 = 0;
        v85 = (const double *)((char *)&v101 + v86);
      }
      if (v45 < 0xA)
      {
        v87 = v45;
        goto LABEL_82;
      }
      if (v36 < (uint64_t *)v85 + 1 && (unint64_t)v85 < v32 + (v34 & 0xFFFFFFFFFFFFFFF8) + 8 * v45)
      {
        v87 = v45;
        do
        {
LABEL_82:
          *v36++ = *(_QWORD *)v85;
          --v87;
        }
        while (v87);
        goto LABEL_83;
      }
      v36 += v45 & 0xFFFFFFFFFFFFFFFCLL;
      v87 = v45 & 3;
      v88 = vld1q_dup_f64(v85);
      v89 = (float64x2_t *)(v32 + 8 * v35 + 16);
      v90 = v45 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v89[-1] = v88;
        *v89 = v88;
        v89 += 2;
        v90 -= 4;
      }
      while (v90);
      if (v45 != (v45 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_82;
LABEL_83:
      v25 = (_QWORD *)(*(_QWORD *)(a1 + 24) - 48);
      v6 = a2;
      v7 = v97;
      v31 = v13 - v24;
      if (v13 != v24)
        goto LABEL_84;
LABEL_8:
      v14 = ((uint64_t)v25 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v24 = v9;
      *((_QWORD *)v24 + 1) = v14;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
      v13 += 16;
      v12 = v98;
      v15 = v100;
LABEL_9:
      v16 = (_QWORD *)(v15 + 8 * (v9 + v5 + (_DWORD)v22 * v99));
      v17 = v16[v22];
      v18 = v16[2 * v22];
      v19 = v16[3 * v22];
      v20 = v16[4 * v22];
      v21 = v16[5 * v22];
      *v25 = *v16;
      v25[1] = v17;
      v25[2] = v18;
      v25[3] = v19;
      v25[4] = v20;
      v25[5] = v21;
      ++v9;
      v8 = *(_DWORD *)(a1 + 8);
      if (v9 >= v8)
      {
        v3 = *(unsigned int *)(a1 + 12);
        goto LABEL_5;
      }
    }
    v49 = *(uint64_t **)(a1 + 24);
    do
LABEL_57:
      *v49++ = v101;
    while (v49 != v46);
    goto LABEL_58;
  }
}

void sub_20F5AD134(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  unint64_t v30;
  int64x2_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  _OWORD *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  _OWORD *v56;
  size_t v57;
  BOOL v58;
  uint64_t v59;
  int64x2_t v60;
  int64x2_t *v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  int64x2_t *v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  float64x2_t v80;
  float64x2_t *v81;
  unint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  _QWORD *v85;
  unint64_t v86;
  int v88;
  uint64_t v89;
  char *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3 && *(_DWORD *)(a1 + 8))
  {
    v5 = a3;
    v6 = a2;
    v7 = 0;
    v85 = (_QWORD *)(a1 + 16);
    v83 = HIDWORD(a3);
    v8 = 1;
    v88 = a3;
    while (!v8)
    {
LABEL_5:
      if (++v7 >= v3)
        return;
    }
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 88);
    v11 = (*(_DWORD *)(a1 + 112) * v7);
    v12 = (char *)(v10 + 16 * v11);
    v13 = (char *)(v10 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7) + v11));
    v91 = v83 + 4 * v7;
    v89 = v7;
    v90 = v12;
    while (1)
    {
      v15 = *v6;
      v20 = *((unsigned int *)v6 + 4);
      v21 = v12;
      if (v12 != v13)
      {
        v21 = v12;
        while (*(_DWORD *)v21 < v9)
        {
          v21 += 16;
          if (v21 == v13)
          {
            v22 = v13;
            goto LABEL_19;
          }
        }
      }
      v22 = v13;
      if (v21 != v13)
      {
        if (*(_DWORD *)v21 == v9)
        {
          v23 = (_QWORD *)(*v85 + 8 * *((_QWORD *)v21 + 1));
          goto LABEL_9;
        }
        v22 = v21;
      }
LABEL_19:
      v24 = *(_QWORD *)(a1 + 80);
      v92 = *v6;
      if (v24)
      {
        v26 = *(_QWORD *)(a1 + 48);
        v25 = *(_QWORD *)(a1 + 56);
        v27 = ((v25 - v26) << 6) - 1;
        v28 = *(_QWORD *)(a1 + 72);
        if (v25 == v26)
          v27 = 0;
        v23 = (_QWORD *)(*(_QWORD *)(a1 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v26 + (((unint64_t)(v28 + v24 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v28 + v24 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v24 - 1;
        if ((unint64_t)(v27 - (v24 + v28) + 1) >= 0x400)
        {
          operator delete(*(void **)(v25 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v29 = v13 - v22;
        if (v13 == v22)
          goto LABEL_8;
LABEL_82:
        memmove(v22 + 16, v22, v29);
        goto LABEL_8;
      }
      v93 = 0;
      v30 = *(_QWORD *)(a1 + 16);
      v31 = *(int64x2_t **)(a1 + 24);
      v32 = (unint64_t)v31 - v30;
      v33 = (uint64_t)((uint64_t)v31->i64 - v30) >> 3;
      v34 = (uint64_t *)(v30 + (((unint64_t)v31 - v30) & 0xFFFFFFFFFFFFFFF8));
      v35 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)(v35 - (_QWORD)v31) < 0x20)
      {
        v36 = v33 + 4;
        if ((unint64_t)(v33 + 4) >> 61)
          sub_20E867F44();
        v37 = v35 - v30;
        if (v37 >> 2 > v36)
          v36 = v37 >> 2;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        v86 = v36;
        if (v36)
        {
          if (v36 >> 61)
            sub_20E877A38();
          v38 = operator new(8 * v36);
          v32 = (unint64_t)v31 - v30;
          v39 = &v38[8 * v33];
          *v39 = 0u;
          v39[1] = 0u;
          if ((int64x2_t *)v30 != v31)
          {
LABEL_35:
            if (v32 - 8 < 0x68)
            {
              v40 = (char *)(v30 + (((unint64_t)v31 - v30) & 0xFFFFFFFFFFFFFFF8));
              v41 = (char *)v39;
              goto LABEL_47;
            }
            v40 = (char *)(v30 + (((unint64_t)v31 - v30) & 0xFFFFFFFFFFFFFFF8));
            v41 = (char *)v39;
            if (v30 + (v32 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v38[v32 & 0xFFFFFFFFFFFFFFF8] < 0x20)
              goto LABEL_88;
            v48 = ((v32 - 8) >> 3) + 1;
            v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
            v40 = (char *)&v34[v49 / 0xFFFFFFFFFFFFFFF8];
            v41 = (char *)v39 - v49;
            v50 = 8 * ((uint64_t)((uint64_t)v31->i64 - v30) >> 3);
            v51 = &v38[v50 - 16];
            v52 = (__int128 *)(v30 + v50 - 16);
            v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v54 = *v52;
              *(v51 - 1) = *(v52 - 1);
              *v51 = v54;
              v51 -= 2;
              v52 -= 2;
              v53 -= 4;
            }
            while (v53);
            if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_88:
              do
              {
LABEL_47:
                v55 = *((_QWORD *)v40 - 1);
                v40 -= 8;
                *((_QWORD *)v41 - 1) = v55;
                v41 -= 8;
              }
              while (v40 != (char *)v30);
            }
LABEL_48:
            v56 = v39 + 2;
            v57 = (char *)v31 - (char *)v34;
            if (v57)
            {
              v84 = v38;
              memmove(v39 + 2, v34, v57);
              v38 = v84;
            }
            *(_QWORD *)(a1 + 16) = v41;
            *(_QWORD *)(a1 + 24) = (char *)v56 + v57;
            *(_QWORD *)(a1 + 32) = &v38[8 * v86];
            if (v30)
              operator delete((void *)v30);
            goto LABEL_81;
          }
        }
        else
        {
          v38 = 0;
          v39 = (_OWORD *)(8 * v33);
          *v39 = 0u;
          v39[1] = 0u;
          if ((int64x2_t *)v30 != v31)
            goto LABEL_35;
        }
        v41 = (char *)v39;
        goto LABEL_48;
      }
      v42 = (char *)v31 - (char *)v34;
      if ((unint64_t)((char *)v31 - (char *)v34) > 0x1F)
      {
        v44 = *(uint64_t **)(a1 + 24);
        v43 = 4;
        goto LABEL_59;
      }
      v43 = v42 >> 3;
      v44 = &v31->i64[4 - (v42 >> 3)];
      v45 = v42 & 0xFFFFFFFFFFFFFFF8;
      v46 = 24 - v45;
      if (24 - v45 < 0x68)
        break;
      v58 = &v93 < (uint64_t *)((char *)v31[2].i64 - v45);
      if (v31 < (int64x2_t *)&v94)
      {
        v47 = *(uint64_t **)(a1 + 24);
        if (v58)
          goto LABEL_57;
      }
      v59 = (v46 >> 3) + 1;
      v47 = &v31->i64[v59 & 0x3FFFFFFFFFFFFFFCLL];
      v60 = vdupq_lane_s64(v93, 0);
      v61 = v31 + 1;
      v62 = v59 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v61[-1] = v60;
        *v61 = v60;
        v61 += 2;
        v62 -= 4;
      }
      while (v62);
      if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_57;
LABEL_58:
      *(_QWORD *)(a1 + 24) = v44;
      if (v31 == (int64x2_t *)v34)
        goto LABEL_81;
LABEL_59:
      v63 = (char *)v44 - (char *)(v34 + 4);
      v64 = v63 >> 3;
      v65 = (int64x2_t *)(v44 - 4);
      v66 = (char *)v44;
      if (v44 - 4 < (uint64_t *)v31)
      {
        v67 = (v32 & 0xFFFFFFFFFFFFFFF8) + v63;
        v68 = v30 + v67 + 8;
        if ((unint64_t)v31 > v68)
          v68 = (unint64_t)v31;
        v69 = v68 + ~v30 - v67;
        if (v69 >= 0x58)
        {
          v70 = (v69 >> 3) + 1;
          v71 = v70 & 0x3FFFFFFFFFFFFFFCLL;
          v65 = (int64x2_t *)((char *)v65 + v71 * 8);
          v66 = (char *)&v44[v71];
          v72 = v44 + 2;
          v73 = (__int128 *)(v30 + 8 * v64 + 8 * v33 + 16);
          v74 = v70 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v75 = *v73;
            *(v72 - 1) = *(v73 - 1);
            *v72 = v75;
            v72 += 2;
            v73 += 2;
            v74 -= 4;
          }
          while (v74);
          if (v70 == (v70 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_68;
        }
        else
        {
          v66 = (char *)v44;
        }
        do
        {
          v76 = v65->i64[0];
          v65 = (int64x2_t *)((char *)v65 + 8);
          *(_QWORD *)v66 = v76;
          v66 += 8;
        }
        while (v65 < v31);
      }
LABEL_68:
      *(_QWORD *)(a1 + 24) = v66;
      if (v44 != v34 + 4)
      {
        v77 = v43;
        memmove(&v44[-v64], v34, v63);
        v43 = v77;
      }
      v78 = &v93;
      if (v34 <= &v93)
        v78 = &v93 + 4 * (*(_QWORD *)(a1 + 24) > (unint64_t)&v93);
      if (v43 < 0xA)
      {
        v79 = v43;
        goto LABEL_80;
      }
      if (v34 < v78 + 1 && (unint64_t)v78 < v30 + (v32 & 0xFFFFFFFFFFFFFFF8) + 8 * v43)
      {
        v79 = v43;
        do
        {
LABEL_80:
          *v34++ = *v78;
          --v79;
        }
        while (v79);
        goto LABEL_81;
      }
      v34 += v43 & 0xFFFFFFFFFFFFFFFCLL;
      v79 = v43 & 3;
      v80 = vld1q_dup_f64((const double *)v78);
      v81 = (float64x2_t *)(v30 + 8 * v33 + 16);
      v82 = v43 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v81[-1] = v80;
        *v81 = v80;
        v81 += 2;
        v82 -= 4;
      }
      while (v82);
      if (v43 != (v43 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_80;
LABEL_81:
      v23 = (_QWORD *)(*(_QWORD *)(a1 + 24) - 32);
      v6 = a2;
      v5 = v88;
      v7 = v89;
      v29 = v13 - v22;
      if (v13 != v22)
        goto LABEL_82;
LABEL_8:
      v14 = ((uint64_t)v23 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v22 = v9;
      *((_QWORD *)v22 + 1) = v14;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
      v13 += 16;
      v12 = v90;
      v15 = v92;
LABEL_9:
      v16 = (_QWORD *)(v15 + 8 * (v9 + v5 + (_DWORD)v20 * v91));
      v17 = v16[v20];
      v18 = v16[2 * v20];
      v19 = v16[3 * v20];
      *v23 = *v16;
      v23[1] = v17;
      v23[2] = v18;
      v23[3] = v19;
      ++v9;
      v8 = *(_DWORD *)(a1 + 8);
      if (v9 >= v8)
      {
        v3 = *(unsigned int *)(a1 + 12);
        goto LABEL_5;
      }
    }
    v47 = *(uint64_t **)(a1 + 24);
    do
LABEL_57:
      *v47++ = v93;
    while (v47 != v44);
    goto LABEL_58;
  }
}

void sub_20F5AD788(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  int64x2_t *v29;
  int64x2_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _QWORD *v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  __int128 *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  _QWORD *v55;
  size_t v56;
  _BYTE *v57;
  BOOL v58;
  uint64_t v59;
  int64x2_t v60;
  int64x2_t *v61;
  uint64_t v62;
  int64x2_t *v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  const double *v67;
  uint64_t v68;
  unint64_t v69;
  float64x2_t v70;
  float64x2_t *v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  int v78;
  char *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3 && *(_DWORD *)(a1 + 8))
  {
    v5 = a3;
    v6 = a2;
    v7 = 0;
    v74 = (_QWORD *)(a1 + 16);
    v73 = HIDWORD(a3);
    v8 = 1;
    v78 = a3;
    while (!v8)
    {
LABEL_5:
      if (++v7 >= v3)
        return;
    }
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 88);
    v11 = (*(_DWORD *)(a1 + 112) * v7);
    v12 = (char *)(v10 + 16 * v11);
    v13 = (char *)(v10 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7) + v11));
    v81 = 3 * v7 + v73;
    v79 = v12;
    v80 = v7;
    while (1)
    {
      v15 = *v6;
      v19 = *((unsigned int *)v6 + 4);
      v20 = v12;
      if (v12 != v13)
      {
        v20 = v12;
        while (*(_DWORD *)v20 < v9)
        {
          v20 += 16;
          if (v20 == v13)
          {
            v21 = v13;
            goto LABEL_19;
          }
        }
      }
      v21 = v13;
      if (v20 != v13)
      {
        if (*(_DWORD *)v20 == v9)
        {
          v22 = (_QWORD *)(*v74 + 8 * *((_QWORD *)v20 + 1));
          goto LABEL_9;
        }
        v21 = v20;
      }
LABEL_19:
      v23 = *(_QWORD *)(a1 + 80);
      v82 = *v6;
      if (v23)
      {
        v25 = *(_QWORD *)(a1 + 48);
        v24 = *(_QWORD *)(a1 + 56);
        v26 = ((v24 - v25) << 6) - 1;
        v27 = *(_QWORD *)(a1 + 72);
        if (v24 == v25)
          v26 = 0;
        v22 = (_QWORD *)(*(_QWORD *)(a1 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v25 + (((unint64_t)(v27 + v23 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v27 + v23 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v23 - 1;
        if ((unint64_t)(v26 - (v23 + v27) + 1) >= 0x400)
        {
          operator delete(*(void **)(v24 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v28 = v13 - v21;
        if (v13 == v21)
          goto LABEL_8;
LABEL_78:
        memmove(v21 + 16, v21, v28);
        goto LABEL_8;
      }
      v83 = 0;
      v29 = *(int64x2_t **)(a1 + 16);
      v30 = *(int64x2_t **)(a1 + 24);
      v31 = (char *)v30 - (char *)v29;
      v32 = ((char *)v30 - (char *)v29) >> 3;
      v33 = (uint64_t *)((char *)v29->i64 + (((char *)v30 - (char *)v29) & 0xFFFFFFFFFFFFFFF8));
      v34 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)(v34 - (_QWORD)v30) < 0x18)
      {
        v35 = v32 + 3;
        if ((unint64_t)(v32 + 3) >> 61)
          sub_20E867F44();
        v36 = v34 - (_QWORD)v29;
        if (v36 >> 2 > v35)
          v35 = v36 >> 2;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
          v35 = 0x1FFFFFFFFFFFFFFFLL;
        v76 = v35;
        if (v35)
        {
          if (v35 >> 61)
            sub_20E877A38();
          v37 = operator new(8 * v35);
          v38 = &v37[8 * v32];
          *v38 = 0;
          v38[1] = 0;
          v38[2] = 0;
          v75 = v19;
          if (v29 != v30)
          {
LABEL_35:
            if ((unint64_t)(v31 - 8) < 0x68)
            {
              v39 = (uint64_t *)((char *)v29->i64 + (((char *)v30 - (char *)v29) & 0xFFFFFFFFFFFFFFF8));
              v40 = v38;
              goto LABEL_47;
            }
            v39 = (uint64_t *)((char *)v29->i64 + (((char *)v30 - (char *)v29) & 0xFFFFFFFFFFFFFFF8));
            v40 = v38;
            if ((unint64_t)(&v29->i8[v31 & 0xFFFFFFFFFFFFFFF8] - &v37[v31 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
              goto LABEL_84;
            v47 = ((unint64_t)(v31 - 8) >> 3) + 1;
            v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
            v39 = &v33[v48 / 0xFFFFFFFFFFFFFFF8];
            v40 = &v38[v48 / 0xFFFFFFFFFFFFFFF8];
            v49 = 8 * (((char *)v30 - (char *)v29) >> 3);
            v50 = &v37[v49 - 16];
            v51 = (__int128 *)&v29[-1].i8[v49];
            v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v53 = *v51;
              *(v50 - 1) = *(v51 - 1);
              *v50 = v53;
              v50 -= 2;
              v51 -= 2;
              v52 -= 4;
            }
            while (v52);
            if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_84:
              do
              {
LABEL_47:
                v54 = *--v39;
                *--v40 = v54;
              }
              while (v39 != (uint64_t *)v29);
            }
LABEL_48:
            v55 = v38 + 3;
            v56 = (char *)v30 - (char *)v33;
            if (v56)
            {
              v57 = v37;
              memmove(v38 + 3, v33, v56);
              v37 = v57;
            }
            v19 = v75;
            *(_QWORD *)(a1 + 16) = v40;
            *(_QWORD *)(a1 + 24) = (char *)v55 + v56;
            *(_QWORD *)(a1 + 32) = &v37[8 * v76];
            if (v29)
              operator delete(v29);
            goto LABEL_77;
          }
        }
        else
        {
          v37 = 0;
          v38 = (_QWORD *)(8 * v32);
          *v38 = 0;
          v38[1] = 0;
          v38[2] = 0;
          v75 = v19;
          if (v29 != v30)
            goto LABEL_35;
        }
        v40 = v38;
        goto LABEL_48;
      }
      v41 = (char *)v30 - (char *)v33;
      if ((unint64_t)((char *)v30 - (char *)v33) <= 0x17)
        break;
      v43 = *(uint64_t **)(a1 + 24);
      v42 = 3;
LABEL_59:
      v63 = (int64x2_t *)(v43 - 3);
      v64 = v43;
      if (v43 - 3 < (uint64_t *)v30)
      {
        v64 = v43;
        do
        {
          v65 = v63->i64[0];
          v63 = (int64x2_t *)((char *)v63 + 8);
          *v64++ = v65;
        }
        while (v63 < v30);
      }
      *(_QWORD *)(a1 + 24) = v64;
      if (v43 != v33 + 3)
      {
        v66 = v42;
        memmove(&v43[-(v43 - (v33 + 3))], v33, (char *)v43 - (char *)(v33 + 3));
        v42 = v66;
      }
      v67 = (const double *)&v83;
      if (v33 <= &v83)
      {
        v68 = 24;
        if (*(_QWORD *)(a1 + 24) <= (unint64_t)&v83)
          v68 = 0;
        v67 = (const double *)((char *)&v83 + v68);
      }
      if (v42 < 0xA)
      {
        v69 = v42;
        goto LABEL_76;
      }
      if (v33 < (uint64_t *)v67 + 1 && v67 < (const double *)((char *)&v29->i64[v42] + (v31 & 0xFFFFFFFFFFFFFFF8)))
      {
        v69 = v42;
        do
        {
LABEL_76:
          *v33++ = *(_QWORD *)v67;
          --v69;
        }
        while (v69);
        goto LABEL_77;
      }
      v33 += v42 & 0xFFFFFFFFFFFFFFFCLL;
      v69 = v42 & 3;
      v70 = vld1q_dup_f64(v67);
      v71 = (float64x2_t *)((char *)&v29[1] + 8 * v32);
      v72 = v42 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v71[-1] = v70;
        *v71 = v70;
        v71 += 2;
        v72 -= 4;
      }
      while (v72);
      if (v42 != (v42 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_76;
LABEL_77:
      v22 = (_QWORD *)(*(_QWORD *)(a1 + 24) - 24);
      v6 = a2;
      v5 = v78;
      v12 = v79;
      v7 = v80;
      v28 = v13 - v21;
      if (v13 != v21)
        goto LABEL_78;
LABEL_8:
      v14 = ((uint64_t)v22 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v21 = v9;
      *((_QWORD *)v21 + 1) = v14;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
      v13 += 16;
      v15 = v82;
LABEL_9:
      v16 = (_QWORD *)(v15 + 8 * (v9 + v5 + (_DWORD)v19 * v81));
      v17 = v16[v19];
      v18 = v16[2 * v19];
      *v22 = *v16;
      v22[1] = v17;
      v22[2] = v18;
      ++v9;
      v8 = *(_DWORD *)(a1 + 8);
      if (v9 >= v8)
      {
        v3 = *(unsigned int *)(a1 + 12);
        goto LABEL_5;
      }
    }
    v42 = v41 >> 3;
    v43 = &v30->i64[3 - (v41 >> 3)];
    v44 = v41 & 0xFFFFFFFFFFFFFFF8;
    v45 = 16 - v44;
    if (16 - v44 >= 0x68)
    {
      v58 = &v83 < (uint64_t *)((char *)&v30[1].i64[1] - v44);
      if (v30 >= (int64x2_t *)&v84 || (v46 = *(uint64_t **)(a1 + 24), !v58))
      {
        v59 = (v45 >> 3) + 1;
        v46 = &v30->i64[v59 & 0x3FFFFFFFFFFFFFFCLL];
        v60 = vdupq_lane_s64(v83, 0);
        v61 = v30 + 1;
        v62 = v59 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v61[-1] = v60;
          *v61 = v60;
          v61 += 2;
          v62 -= 4;
        }
        while (v62);
        if (v59 == (v59 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_58:
          *(_QWORD *)(a1 + 24) = v43;
          if (v30 == (int64x2_t *)v33)
            goto LABEL_77;
          goto LABEL_59;
        }
      }
    }
    else
    {
      v46 = *(uint64_t **)(a1 + 24);
    }
    do
      *v46++ = v83;
    while (v46 != v43);
    goto LABEL_58;
  }
}

void sub_20F5ADDB8(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  int v3;
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 *v50;
  uint64_t v51;
  __int128 *v52;
  __int128 *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  size_t v77;
  int64x2_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  char *v94;
  unint64_t v95;
  char *v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  __int128 *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  char *v106;
  size_t v107;
  BOOL v108;
  uint64_t v109;
  int64x2_t v110;
  int64x2_t *v111;
  uint64_t v112;
  int64_t v113;
  uint64_t v114;
  int64x2_t *v115;
  uint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _OWORD *v122;
  __int128 *v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  unint64_t v129;
  float64x2_t v130;
  float64x2_t *v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unsigned int v136;
  int v137;
  _QWORD *v138;
  unint64_t v140;
  char *v141;
  unsigned int v142;
  int v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  unint64_t v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161[2];
  uint64_t v162[2];

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = a3;
    v4 = a2;
    v6 = 0;
    v7 = a1 + 40;
    v137 = a3;
    v138 = (_QWORD *)(a1 + 16);
    v133 = HIDWORD(a3);
    v136 = 1;
    v134 = a1 + 40;
    while (1)
    {
      v8 = *(_QWORD *)(a1 + 88);
      v9 = (*(_DWORD *)(a1 + 112) * v6);
      v10 = *(_QWORD *)(a1 + 120);
      v11 = *(_QWORD *)(v10 + 8 * v6);
      if (v11)
      {
        v12 = *(_QWORD *)(a1 + 48);
        v13 = *(_QWORD *)(a1 + 56);
        v14 = *(_QWORD *)(a1 + 80);
        v15 = 16 * v11;
        v16 = (uint64_t *)(v8 + 16 * v9 + 8);
        do
        {
          if (v13 == v12)
            v18 = 0;
          else
            v18 = ((v13 - v12) << 6) - 1;
          v19 = *(_QWORD *)(a1 + 72) + v14;
          if (v18 == v19)
          {
            sub_20EDB36DC(v7);
            v12 = *(_QWORD *)(a1 + 48);
            v13 = *(_QWORD *)(a1 + 56);
            v19 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
          }
          v17 = *v16;
          v16 += 2;
          *(_QWORD *)(*(_QWORD *)(v12 + ((v19 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v19 & 0x1FF)) = v17;
          v14 = *(_QWORD *)(a1 + 80) + 1;
          *(_QWORD *)(a1 + 80) = v14;
          v15 -= 16;
        }
        while (v15);
        v10 = *(_QWORD *)(a1 + 120);
        v8 = *(_QWORD *)(a1 + 88);
        v9 = (*(_DWORD *)(a1 + 112) * v6);
      }
      *(_QWORD *)(v10 + 8 * v6) = 0;
      v20 = v6 + 1;
      v21 = *(_DWORD *)(a1 + 8);
      v135 = v6 + 1;
      if (v21 < (int)v6 + 1)
        v20 = *(_DWORD *)(a1 + 8);
      if (v20)
        break;
LABEL_3:
      ++v136;
      v7 = v134;
      v6 = v135;
      if (v135 >= *(unsigned int *)(a1 + 12))
        return;
    }
    v22 = 0;
    v23 = (char *)(v8 + 16 * v9);
    v24 = (char *)(v8 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v6) + v9));
    v143 = 9 * v6 + v133;
    if (v21 >= v136)
      v21 = v136;
    v142 = v21;
    v140 = v6;
    v141 = (char *)(v8 + 16 * v9);
    while (1)
    {
      v26 = *v4;
      v68 = *((unsigned int *)v4 + 4);
      v69 = v23;
      if (v23 != v24)
      {
        v69 = v23;
        while (*(_DWORD *)v69 < v22)
        {
          v69 += 16;
          if (v69 == v24)
          {
            v70 = v24;
            goto LABEL_30;
          }
        }
      }
      v70 = v24;
      if (v69 != v24)
      {
        if (*(_DWORD *)v69 == v22)
        {
          v71 = *v138 + 8 * *((_QWORD *)v69 + 1);
          goto LABEL_20;
        }
        v70 = v69;
      }
LABEL_30:
      v72 = *(_QWORD *)(a1 + 80);
      v160 = *v4;
      if (v72)
      {
        v74 = *(_QWORD *)(a1 + 48);
        v73 = *(_QWORD *)(a1 + 56);
        v75 = ((v73 - v74) << 6) - 1;
        v76 = *(_QWORD *)(a1 + 72);
        if (v73 == v74)
          v75 = 0;
        v71 = *(_QWORD *)(a1 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v74 + (((unint64_t)(v76 + v72 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v76 + v72 - 1) & 0x1FF));
        *(_QWORD *)(a1 + 80) = v72 - 1;
        if ((unint64_t)(v75 - (v72 + v76) + 1) >= 0x400)
        {
          operator delete(*(void **)(v73 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v77 = v24 - v70;
        if (v24 == v70)
          goto LABEL_19;
LABEL_96:
        memmove(v70 + 16, v70, v77);
        goto LABEL_19;
      }
      v161[0] = 0;
      v79 = *(_QWORD *)(a1 + 16);
      v78 = *(int64x2_t **)(a1 + 24);
      v80 = (uint64_t)v78->i64 - v79;
      v81 = (uint64_t)((uint64_t)v78->i64 - v79) >> 3;
      v82 = (uint64_t *)(v79 + (((unint64_t)v78 - v79) & 0xFFFFFFFFFFFFFFF8));
      v83 = *(_QWORD *)(a1 + 32);
      v156 = v81;
      if ((unint64_t)(v83 - (_QWORD)v78) < 0x288)
      {
        v84 = v81 + 81;
        if ((unint64_t)(v81 + 81) >> 61)
          sub_20E867F44();
        v85 = v83 - v79;
        if (v85 >> 2 > v84)
          v84 = v85 >> 2;
        if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
          v84 = 0x1FFFFFFFFFFFFFFFLL;
        v154 = v84;
        if (v84)
        {
          if (v84 >> 61)
            sub_20E877A38();
          v86 = (uint64_t)v78->i64 - v79;
          v87 = (char *)operator new(8 * v84);
        }
        else
        {
          v86 = (uint64_t)v78->i64 - v79;
          v87 = 0;
        }
        v158 = v87;
        v94 = &v87[8 * v81];
        bzero(v94, 0x288uLL);
        if ((int64x2_t *)v79 == v78)
        {
          v97 = v94;
        }
        else
        {
          v95 = v86 - 8;
          if ((unint64_t)(v86 - 8) < 0x68)
          {
            v96 = (char *)(v79 + (((unint64_t)v78 - v79) & 0xFFFFFFFFFFFFFFF8));
            v97 = v94;
            goto LABEL_59;
          }
          v98 = v79 + (v86 & 0xFFFFFFFFFFFFFFF8) - (_QWORD)&v158[v86 & 0xFFFFFFFFFFFFFFF8];
          v96 = (char *)(v79 + (((unint64_t)v78 - v79) & 0xFFFFFFFFFFFFFFF8));
          v97 = v94;
          if (v98 < 0x20)
            goto LABEL_102;
          v99 = (v95 >> 3) + 1;
          v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
          v96 = (char *)&v82[v100 / 0xFFFFFFFFFFFFFFF8];
          v97 = &v94[-v100];
          v101 = &v158[8 * v156 - 16];
          v102 = (__int128 *)(v79 + 8 * v156 - 16);
          v103 = v99 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v104 = *v102;
            *((_OWORD *)v101 - 1) = *(v102 - 1);
            *(_OWORD *)v101 = v104;
            v101 -= 32;
            v102 -= 2;
            v103 -= 4;
          }
          while (v103);
          if (v99 != (v99 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_102:
            do
            {
LABEL_59:
              v105 = *((_QWORD *)v96 - 1);
              v96 -= 8;
              *((_QWORD *)v97 - 1) = v105;
              v97 -= 8;
            }
            while (v96 != (char *)v79);
          }
        }
        v106 = v94 + 648;
        v107 = (char *)v78 - (char *)v82;
        if (v107)
          memmove(v106, v82, v107);
        *(_QWORD *)(a1 + 16) = v97;
        *(_QWORD *)(a1 + 24) = &v106[v107];
        *(_QWORD *)(a1 + 32) = &v158[8 * v154];
        v3 = v137;
        if (v79)
          operator delete((void *)v79);
        goto LABEL_95;
      }
      v88 = (char *)v78 - (char *)v82;
      if ((unint64_t)((char *)v78 - (char *)v82) > 0x287)
      {
        v90 = *(uint64_t **)(a1 + 24);
        v89 = 81;
        goto LABEL_71;
      }
      v89 = v88 >> 3;
      v90 = &v78->i64[81 - (v88 >> 3)];
      v91 = v88 & 0xFFFFFFFFFFFFFFF8;
      v92 = 640 - v91;
      if (640 - v91 < 0x68)
        break;
      v108 = v161 < (uint64_t *)((char *)&v78[40].i64[1] - v91);
      if (v78 < (int64x2_t *)v162)
      {
        v93 = *(uint64_t **)(a1 + 24);
        if (v108)
          goto LABEL_69;
      }
      v109 = (v92 >> 3) + 1;
      v93 = &v78->i64[v109 & 0x3FFFFFFFFFFFFFFCLL];
      v110 = vdupq_lane_s64(v161[0], 0);
      v111 = v78 + 1;
      v112 = v109 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v111[-1] = v110;
        *v111 = v110;
        v111 += 2;
        v112 -= 4;
      }
      while (v112);
      if (v109 != (v109 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_69;
LABEL_70:
      *(_QWORD *)(a1 + 24) = v90;
      if (v78 == (int64x2_t *)v82)
        goto LABEL_95;
LABEL_71:
      v113 = (char *)v90 - (char *)(v82 + 81);
      v114 = v113 >> 3;
      v115 = (int64x2_t *)(v90 - 81);
      v116 = v90;
      if (v90 - 81 < (uint64_t *)v78)
      {
        v117 = (v80 & 0xFFFFFFFFFFFFFFF8) + v113;
        v118 = v79 + v117 + 8;
        if ((unint64_t)v78 > v118)
          v118 = (unint64_t)v78;
        v119 = v118 + ~v79 - v117;
        if (v119 >= 0x58)
        {
          v120 = (v119 >> 3) + 1;
          v121 = v120 & 0x3FFFFFFFFFFFFFFCLL;
          v115 = (int64x2_t *)((char *)v115 + v121 * 8);
          v116 = &v90[v121];
          v122 = v90 + 2;
          v123 = (__int128 *)(v79 + 8 * v114 + 8 * v156 + 16);
          v124 = v120 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v125 = *v123;
            *(v122 - 1) = *(v123 - 1);
            *v122 = v125;
            v122 += 2;
            v123 += 2;
            v124 -= 4;
          }
          while (v124);
          if (v120 == (v120 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_80;
        }
        else
        {
          v116 = v90;
        }
        do
        {
          v126 = v115->i64[0];
          v115 = (int64x2_t *)((char *)v115 + 8);
          *v116++ = v126;
        }
        while (v115 < v78);
      }
LABEL_80:
      *(_QWORD *)(a1 + 24) = v116;
      if (v90 != v82 + 81)
      {
        memmove(&v90[-v114], (const void *)(v79 + (((unint64_t)v78 - v79) & 0xFFFFFFFFFFFFFFF8)), v113);
        v80 = (uint64_t)v78->i64 - v79;
      }
      v127 = v161;
      if (v82 <= v161)
      {
        v128 = 81;
        if (*(_QWORD *)(a1 + 24) <= (unint64_t)v161)
          v128 = 0;
        v127 = &v161[v128];
      }
      if (v89 < 0xA)
      {
        v129 = v89;
        goto LABEL_94;
      }
      if (v82 < v127 + 1 && (unint64_t)v127 < v79 + (v80 & 0xFFFFFFFFFFFFFFF8) + 8 * v89)
      {
        v129 = v89;
        do
        {
LABEL_94:
          *v82++ = *v127;
          --v129;
        }
        while (v129);
        goto LABEL_95;
      }
      v82 += v89 & 0xFFFFFFFFFFFFFFFCLL;
      v129 = v89 & 3;
      v130 = vld1q_dup_f64((const double *)v127);
      v131 = (float64x2_t *)(v79 + 8 * v156 + 16);
      v132 = v89 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v131[-1] = v130;
        *v131 = v130;
        v131 += 2;
        v132 -= 4;
      }
      while (v132);
      if (v89 != (v89 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_94;
LABEL_95:
      v71 = *(_QWORD *)(a1 + 24) - 648;
      v4 = a2;
      v6 = v140;
      v77 = v24 - v70;
      if (v24 != v70)
        goto LABEL_96;
LABEL_19:
      v25 = (v71 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v70 = v22;
      *((_QWORD *)v70 + 1) = v25;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v6);
      v24 += 16;
      v23 = v141;
      v26 = v160;
LABEL_20:
      v27 = (__int128 *)(v26 + 8 * (9 * v22 + v3 + (_DWORD)v68 * v143));
      v159 = *((_QWORD *)v27 + 8);
      v155 = v27[3];
      v150 = v27[2];
      v28 = *v27;
      v146 = v27[1];
      v29 = (__int128 *)((char *)v27 + 8 * v68);
      v157 = *((_QWORD *)v29 + 8);
      v152 = v29[3];
      v30 = v29[1];
      v145 = v29[2];
      v31 = *v29;
      v32 = &v27[v68];
      v153 = *((_QWORD *)v32 + 8);
      v33 = v32[2];
      v149 = v32[3];
      v34 = *v32;
      v35 = v32[1];
      v36 = (__int128 *)((char *)v27 + 24 * v68);
      v37 = *((_QWORD *)v36 + 8);
      v38 = v36[2];
      v147 = v36[3];
      v40 = *v36;
      v39 = v36[1];
      v41 = &v27[2 * v68];
      v151 = *((_QWORD *)v41 + 8);
      v42 = v41[2];
      v144 = v41[3];
      v43 = *v41;
      v44 = v41[1];
      v45 = (__int128 *)((char *)v27 + 40 * v68);
      v148 = *((_QWORD *)v45 + 8);
      v47 = v45[2];
      v46 = v45[3];
      v49 = *v45;
      v48 = v45[1];
      v50 = &v27[3 * v68];
      v51 = *((_QWORD *)v50 + 8);
      v52 = (__int128 *)((char *)v27 + 56 * v68);
      v53 = &v27[4 * v68];
      v54 = v50[2];
      v55 = v50[3];
      v56 = *v50;
      v57 = v50[1];
      v58 = *((_QWORD *)v52 + 8);
      v59 = v52[2];
      v60 = v52[3];
      v62 = *v52;
      v61 = v52[1];
      v63 = *((_QWORD *)v53 + 8);
      v64 = v53[2];
      v65 = v53[3];
      v66 = *v53;
      v67 = v53[1];
      *(_OWORD *)v71 = v28;
      *(_OWORD *)(v71 + 16) = v146;
      *(_OWORD *)(v71 + 32) = v150;
      *(_OWORD *)(v71 + 48) = v155;
      *(_QWORD *)(v71 + 64) = v159;
      *(_OWORD *)(v71 + 72) = v31;
      *(_OWORD *)(v71 + 88) = v30;
      *(_OWORD *)(v71 + 104) = v145;
      *(_OWORD *)(v71 + 120) = v152;
      *(_QWORD *)(v71 + 136) = v157;
      *(_OWORD *)(v71 + 144) = v34;
      *(_OWORD *)(v71 + 160) = v35;
      *(_OWORD *)(v71 + 176) = v33;
      *(_OWORD *)(v71 + 192) = v149;
      *(_QWORD *)(v71 + 208) = v153;
      *(_OWORD *)(v71 + 232) = v39;
      *(_OWORD *)(v71 + 248) = v38;
      *(_QWORD *)(v71 + 280) = v37;
      *(_OWORD *)(v71 + 216) = v40;
      *(_OWORD *)(v71 + 264) = v147;
      *(_OWORD *)(v71 + 288) = v43;
      *(_OWORD *)(v71 + 304) = v44;
      *(_OWORD *)(v71 + 320) = v42;
      *(_OWORD *)(v71 + 336) = v144;
      *(_QWORD *)(v71 + 352) = v151;
      *(_OWORD *)(v71 + 360) = v49;
      *(_OWORD *)(v71 + 376) = v48;
      *(_OWORD *)(v71 + 392) = v47;
      *(_OWORD *)(v71 + 408) = v46;
      *(_QWORD *)(v71 + 424) = v148;
      *(_OWORD *)(v71 + 432) = v56;
      *(_OWORD *)(v71 + 448) = v57;
      *(_OWORD *)(v71 + 464) = v54;
      *(_OWORD *)(v71 + 480) = v55;
      *(_QWORD *)(v71 + 496) = v51;
      *(_OWORD *)(v71 + 520) = v61;
      *(_OWORD *)(v71 + 536) = v59;
      *(_QWORD *)(v71 + 568) = v58;
      *(_OWORD *)(v71 + 504) = v62;
      *(_OWORD *)(v71 + 552) = v60;
      *(_OWORD *)(v71 + 576) = v66;
      *(_OWORD *)(v71 + 592) = v67;
      *(_OWORD *)(v71 + 608) = v64;
      *(_OWORD *)(v71 + 624) = v65;
      *(_QWORD *)(v71 + 640) = v63;
      if (++v22 == v142)
        goto LABEL_3;
    }
    v93 = *(uint64_t **)(a1 + 24);
    do
LABEL_69:
      *v93++ = v161[0];
    while (v93 != v90);
    goto LABEL_70;
  }
}

void sub_20F5AE684(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  unint64_t v31;
  int64x2_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  char *v46;
  char *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  __int128 *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  size_t v58;
  _BYTE *v59;
  BOOL v60;
  uint64_t v61;
  int64x2_t v62;
  int64x2_t *v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  int64x2_t *v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  __int128 *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  const double *v79;
  uint64_t v80;
  unint64_t v81;
  float64x2_t v82;
  float64x2_t *v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  int v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3 && *(_DWORD *)(a1 + 8))
  {
    v5 = a3;
    v6 = a2;
    v7 = 0;
    v86 = (_QWORD *)(a1 + 16);
    v85 = HIDWORD(a3);
    v8 = 1;
    v90 = a3;
    while (!v8)
    {
LABEL_5:
      if (++v7 >= v3)
        return;
    }
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 88);
    v11 = (*(_DWORD *)(a1 + 112) * v7);
    v95 = (char *)(v10 + 16 * v11);
    v12 = (char *)(v10 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7) + v11));
    v13 = v7 + v85;
    v92 = v7;
    v91 = v7 + v85;
    while (1)
    {
      v15 = *v6;
      v16 = *((_DWORD *)v6 + 4);
      v22 = v95;
      if (v95 != v12)
      {
        v22 = v95;
        while (*(_DWORD *)v22 < v9)
        {
          v22 += 16;
          if (v22 == v12)
          {
            v23 = v12;
            goto LABEL_19;
          }
        }
      }
      v23 = v12;
      if (v22 != v12)
      {
        if (*(_DWORD *)v22 == v9)
        {
          v24 = *v86 + 8 * *((_QWORD *)v22 + 1);
          goto LABEL_9;
        }
        v23 = v22;
      }
LABEL_19:
      v25 = *(_QWORD *)(a1 + 80);
      v94 = *v6;
      v93 = *((_DWORD *)v6 + 4);
      if (v25)
      {
        v27 = *(_QWORD *)(a1 + 48);
        v26 = *(_QWORD *)(a1 + 56);
        v28 = ((v26 - v27) << 6) - 1;
        v29 = *(_QWORD *)(a1 + 72);
        if (v26 == v27)
          v28 = 0;
        v24 = *(_QWORD *)(a1 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v27 + (((unint64_t)(v29 + v25 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v29 + v25 - 1) & 0x1FF));
        *(_QWORD *)(a1 + 80) = v25 - 1;
        if ((unint64_t)(v28 - (v25 + v29) + 1) >= 0x400)
        {
          operator delete(*(void **)(v26 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v30 = v12 - v23;
        if (v12 == v23)
          goto LABEL_8;
LABEL_85:
        memmove(v23 + 16, v23, v30);
        goto LABEL_8;
      }
      v96 = 0;
      v31 = *(_QWORD *)(a1 + 16);
      v32 = *(int64x2_t **)(a1 + 24);
      v33 = (unint64_t)v32 - v31;
      v34 = (uint64_t)((uint64_t)v32->i64 - v31) >> 3;
      v35 = (uint64_t *)(v31 + (((unint64_t)v32 - v31) & 0xFFFFFFFFFFFFFFF8));
      v36 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)(v36 - (_QWORD)v32) < 0x48)
      {
        v37 = v34 + 9;
        if ((unint64_t)(v34 + 9) >> 61)
          sub_20E867F44();
        v38 = v36 - v31;
        if (v38 >> 2 > v37)
          v37 = v38 >> 2;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
          v37 = 0x1FFFFFFFFFFFFFFFLL;
        v87 = v37;
        if (v37)
        {
          if (v37 >> 61)
            sub_20E877A38();
          v39 = operator new(8 * v37);
        }
        else
        {
          v39 = 0;
        }
        v46 = &v39[8 * v34];
        *((_QWORD *)v46 + 8) = 0;
        *((_OWORD *)v46 + 2) = 0u;
        *((_OWORD *)v46 + 3) = 0u;
        *(_OWORD *)v46 = 0u;
        *((_OWORD *)v46 + 1) = 0u;
        if ((int64x2_t *)v31 == v32)
        {
          v48 = &v39[8 * v34];
        }
        else
        {
          if (v33 - 8 < 0x68)
          {
            v47 = (char *)(v31 + (((unint64_t)v32 - v31) & 0xFFFFFFFFFFFFFFF8));
            v48 = &v39[8 * v34];
            goto LABEL_48;
          }
          v47 = (char *)(v31 + (((unint64_t)v32 - v31) & 0xFFFFFFFFFFFFFFF8));
          v48 = &v39[8 * v34];
          if (v31 + (v33 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v39[v33 & 0xFFFFFFFFFFFFFFF8] < 0x20)
            goto LABEL_91;
          v49 = ((v33 - 8) >> 3) + 1;
          v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
          v47 = (char *)&v35[v50 / 0xFFFFFFFFFFFFFFF8];
          v48 = &v46[-v50];
          v51 = 8 * ((uint64_t)((uint64_t)v32->i64 - v31) >> 3);
          v52 = &v39[v51 - 16];
          v53 = (__int128 *)(v31 + v51 - 16);
          v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v55 = *v53;
            *(v52 - 1) = *(v53 - 1);
            *v52 = v55;
            v52 -= 2;
            v53 -= 2;
            v54 -= 4;
          }
          while (v54);
          if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_91:
            do
            {
LABEL_48:
              v56 = *((_QWORD *)v47 - 1);
              v47 -= 8;
              *((_QWORD *)v48 - 1) = v56;
              v48 -= 8;
            }
            while (v47 != (char *)v31);
          }
        }
        v57 = v46 + 72;
        v58 = (char *)v32 - (char *)v35;
        if (v58)
        {
          v59 = v39;
          memmove(v46 + 72, v35, v58);
          v39 = v59;
        }
        *(_QWORD *)(a1 + 16) = v48;
        *(_QWORD *)(a1 + 24) = &v57[v58];
        *(_QWORD *)(a1 + 32) = &v39[8 * v87];
        if (v31)
          operator delete((void *)v31);
        goto LABEL_84;
      }
      v88 = (uint64_t)((uint64_t)v32->i64 - v31) >> 3;
      v40 = (char *)v32 - (char *)v35;
      if ((unint64_t)((char *)v32 - (char *)v35) > 0x47)
      {
        v42 = *(uint64_t **)(a1 + 24);
        v41 = 9;
        goto LABEL_60;
      }
      v41 = v40 >> 3;
      v42 = &v32->i64[9 - (v40 >> 3)];
      v43 = v40 & 0xFFFFFFFFFFFFFFF8;
      v44 = 64 - v43;
      if (64 - v43 < 0x68)
        break;
      v60 = &v96 < (uint64_t *)((char *)&v32[4].i64[1] - v43);
      if (v32 < (int64x2_t *)&v97)
      {
        v45 = *(uint64_t **)(a1 + 24);
        if (v60)
          goto LABEL_58;
      }
      v61 = (v44 >> 3) + 1;
      v45 = &v32->i64[v61 & 0x3FFFFFFFFFFFFFFCLL];
      v62 = vdupq_lane_s64(v96, 0);
      v63 = v32 + 1;
      v64 = v61 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v63[-1] = v62;
        *v63 = v62;
        v63 += 2;
        v64 -= 4;
      }
      while (v64);
      if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_58;
LABEL_59:
      *(_QWORD *)(a1 + 24) = v42;
      if (v32 == (int64x2_t *)v35)
        goto LABEL_84;
LABEL_60:
      v65 = (char *)v42 - (char *)(v35 + 9);
      v66 = v65 >> 3;
      v67 = (int64x2_t *)(v42 - 9);
      v68 = (char *)v42;
      if (v42 - 9 < (uint64_t *)v32)
      {
        v69 = (v33 & 0xFFFFFFFFFFFFFFF8) + v65;
        v70 = v31 + v69 + 8;
        if ((unint64_t)v32 > v70)
          v70 = (unint64_t)v32;
        v71 = v70 + ~v31 - v69;
        if (v71 >= 0x58)
        {
          v72 = (v71 >> 3) + 1;
          v73 = v72 & 0x3FFFFFFFFFFFFFFCLL;
          v67 = (int64x2_t *)((char *)v67 + v73 * 8);
          v68 = (char *)&v42[v73];
          v74 = v42 + 2;
          v75 = (__int128 *)(v31 + 8 * v66 + 8 * v88 + 16);
          v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v77 = *v75;
            *(v74 - 1) = *(v75 - 1);
            *v74 = v77;
            v74 += 2;
            v75 += 2;
            v76 -= 4;
          }
          while (v76);
          if (v72 == (v72 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_69;
        }
        else
        {
          v68 = (char *)v42;
        }
        do
        {
          v78 = v67->i64[0];
          v67 = (int64x2_t *)((char *)v67 + 8);
          *(_QWORD *)v68 = v78;
          v68 += 8;
        }
        while (v67 < v32);
      }
LABEL_69:
      *(_QWORD *)(a1 + 24) = v68;
      if (v42 != v35 + 9)
        memmove(&v42[-v66], (const void *)(v31 + (((unint64_t)v32 - v31) & 0xFFFFFFFFFFFFFFF8)), v65);
      v79 = (const double *)&v96;
      if (v35 <= &v96)
      {
        v80 = 72;
        if (*(_QWORD *)(a1 + 24) <= (unint64_t)&v96)
          v80 = 0;
        v79 = (const double *)((char *)&v96 + v80);
      }
      if (v41 < 0xA)
      {
        v81 = v41;
        goto LABEL_83;
      }
      if (v35 < (uint64_t *)v79 + 1 && (unint64_t)v79 < v31 + (v33 & 0xFFFFFFFFFFFFFFF8) + 8 * v41)
      {
        v81 = v41;
        do
        {
LABEL_83:
          *v35++ = *(_QWORD *)v79;
          --v81;
        }
        while (v81);
        goto LABEL_84;
      }
      v35 += v41 & 0xFFFFFFFFFFFFFFFCLL;
      v81 = v41 & 3;
      v82 = vld1q_dup_f64(v79);
      v83 = (float64x2_t *)(v31 + 8 * v88 + 16);
      v84 = v41 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v83[-1] = v82;
        *v83 = v82;
        v83 += 2;
        v84 -= 4;
      }
      while (v84);
      if (v41 != (v41 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_83;
LABEL_84:
      v24 = *(_QWORD *)(a1 + 24) - 72;
      v6 = a2;
      v5 = v90;
      v7 = v92;
      v13 = v91;
      v30 = v12 - v23;
      if (v12 != v23)
        goto LABEL_85;
LABEL_8:
      v14 = (v24 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v23 = v9;
      *((_QWORD *)v23 + 1) = v14;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
      v12 += 16;
      v15 = v94;
      v16 = v93;
LABEL_9:
      v17 = (__int128 *)(v15 + 8 * (9 * v9 + v5 + v16 * v13));
      v18 = *v17;
      v19 = v17[1];
      v20 = v17[2];
      v21 = v17[3];
      *(_QWORD *)(v24 + 64) = *((_QWORD *)v17 + 8);
      *(_OWORD *)(v24 + 32) = v20;
      *(_OWORD *)(v24 + 48) = v21;
      *(_OWORD *)v24 = v18;
      *(_OWORD *)(v24 + 16) = v19;
      ++v9;
      v8 = *(_DWORD *)(a1 + 8);
      if (v9 >= v8)
      {
        v3 = *(unsigned int *)(a1 + 12);
        goto LABEL_5;
      }
    }
    v45 = *(uint64_t **)(a1 + 24);
    do
LABEL_58:
      *v45++ = v96;
    while (v45 != v42);
    goto LABEL_59;
  }
}

void sub_20F5AECB8(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  size_t v60;
  unint64_t v61;
  int64x2_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  _OWORD *v76;
  char *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  __int128 *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  _OWORD *v86;
  size_t v87;
  uint64_t *v88;
  _BYTE *v89;
  BOOL v90;
  uint64_t v91;
  int64x2_t v92;
  int64x2_t *v93;
  uint64_t v94;
  int64_t v95;
  uint64_t v96;
  int64x2_t *v97;
  char *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _OWORD *v104;
  __int128 *v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  const double *v111;
  uint64_t v112;
  unint64_t v113;
  float64x2_t v114;
  float64x2_t *v115;
  unint64_t v116;
  unint64_t v117;
  _QWORD *v119;
  unint64_t v120;
  uint64_t v122;
  int v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3 && *(_DWORD *)(a1 + 8))
  {
    v5 = a3;
    v6 = a2;
    v7 = 0;
    v119 = (_QWORD *)(a1 + 16);
    v117 = HIDWORD(a3);
    v8 = 1;
    while (!v8)
    {
LABEL_5:
      if (++v7 >= v3)
        return;
    }
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 88);
    v11 = (*(_DWORD *)(a1 + 112) * v7);
    v125 = (char *)(v10 + 16 * v11);
    v12 = (char *)(v10 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7) + v11));
    v123 = v117 + 6 * v7;
    v122 = v7;
    while (1)
    {
      v14 = *v6;
      v51 = *((unsigned int *)v6 + 4);
      v52 = v125;
      if (v125 != v12)
      {
        v52 = v125;
        while (*(_DWORD *)v52 < v9)
        {
          v52 += 16;
          if (v52 == v12)
          {
            v53 = v12;
            goto LABEL_19;
          }
        }
      }
      v53 = v12;
      if (v52 != v12)
      {
        if (*(_DWORD *)v52 == v9)
        {
          v54 = *v119 + 8 * *((_QWORD *)v52 + 1);
          goto LABEL_9;
        }
        v53 = v52;
      }
LABEL_19:
      v55 = *(_QWORD *)(a1 + 80);
      v124 = *v6;
      if (v55)
      {
        v57 = *(_QWORD *)(a1 + 48);
        v56 = *(_QWORD *)(a1 + 56);
        v58 = ((v56 - v57) << 6) - 1;
        v59 = *(_QWORD *)(a1 + 72);
        if (v56 == v57)
          v58 = 0;
        v54 = *(_QWORD *)(a1 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v57 + (((unint64_t)(v59 + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v59 + v55 - 1) & 0x1FF));
        *(_QWORD *)(a1 + 80) = v55 - 1;
        if ((unint64_t)(v58 - (v55 + v59) + 1) >= 0x400)
        {
          operator delete(*(void **)(v56 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v60 = v12 - v53;
        if (v12 == v53)
          goto LABEL_8;
LABEL_85:
        memmove(v53 + 16, v53, v60);
        goto LABEL_8;
      }
      v126 = 0;
      v61 = *(_QWORD *)(a1 + 16);
      v62 = *(int64x2_t **)(a1 + 24);
      v63 = (unint64_t)v62 - v61;
      v64 = (uint64_t)((uint64_t)v62->i64 - v61) >> 3;
      v65 = (uint64_t *)(v61 + (((unint64_t)v62 - v61) & 0xFFFFFFFFFFFFFFF8));
      v66 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)(v66 - (_QWORD)v62) < 0x1B0)
      {
        v67 = v64 + 54;
        if ((unint64_t)(v64 + 54) >> 61)
          sub_20E867F44();
        v68 = v66 - v61;
        if (v68 >> 2 > v67)
          v67 = v68 >> 2;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
          v67 = 0x1FFFFFFFFFFFFFFFLL;
        v120 = v67;
        if (v67)
        {
          if (v67 >> 61)
            sub_20E877A38();
          v69 = operator new(8 * v67);
          v64 = (uint64_t)((uint64_t)v62->i64 - v61) >> 3;
        }
        else
        {
          v69 = 0;
        }
        v76 = &v69[8 * v64];
        v76[25] = 0u;
        v76[26] = 0u;
        v76[23] = 0u;
        v76[24] = 0u;
        v76[21] = 0u;
        v76[22] = 0u;
        v76[19] = 0u;
        v76[20] = 0u;
        v76[17] = 0u;
        v76[18] = 0u;
        v76[15] = 0u;
        v76[16] = 0u;
        v76[13] = 0u;
        v76[14] = 0u;
        v76[11] = 0u;
        v76[12] = 0u;
        v76[9] = 0u;
        v76[10] = 0u;
        v76[7] = 0u;
        v76[8] = 0u;
        v76[5] = 0u;
        v76[6] = 0u;
        v76[3] = 0u;
        v76[4] = 0u;
        v76[1] = 0u;
        v76[2] = 0u;
        *v76 = 0u;
        if ((int64x2_t *)v61 == v62)
        {
          v78 = &v69[8 * v64];
        }
        else
        {
          if (v63 - 8 < 0x68)
          {
            v77 = (char *)(v61 + (((unint64_t)v62 - v61) & 0xFFFFFFFFFFFFFFF8));
            v78 = &v69[8 * v64];
            goto LABEL_48;
          }
          v77 = (char *)(v61 + (((unint64_t)v62 - v61) & 0xFFFFFFFFFFFFFFF8));
          v78 = &v69[8 * v64];
          if (v61 + (v63 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v69[v63 & 0xFFFFFFFFFFFFFFF8] < 0x20)
            goto LABEL_91;
          v79 = ((v63 - 8) >> 3) + 1;
          v80 = 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
          v77 = (char *)&v65[v80 / 0xFFFFFFFFFFFFFFF8];
          v78 = (char *)v76 - v80;
          v81 = &v69[8 * v64 - 16];
          v82 = (__int128 *)(v61 + 8 * v64 - 16);
          v83 = v79 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v84 = *v82;
            *(v81 - 1) = *(v82 - 1);
            *v81 = v84;
            v81 -= 2;
            v82 -= 2;
            v83 -= 4;
          }
          while (v83);
          if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_91:
            do
            {
LABEL_48:
              v85 = *((_QWORD *)v77 - 1);
              v77 -= 8;
              *((_QWORD *)v78 - 1) = v85;
              v78 -= 8;
            }
            while (v77 != (char *)v61);
          }
        }
        v86 = v76 + 27;
        v87 = (char *)v62 - (char *)v65;
        if (v87)
        {
          v88 = v65;
          v89 = v69;
          memmove(v76 + 27, v88, v87);
          v69 = v89;
        }
        *(_QWORD *)(a1 + 16) = v78;
        *(_QWORD *)(a1 + 24) = (char *)v86 + v87;
        *(_QWORD *)(a1 + 32) = &v69[8 * v120];
        v5 = a3;
        if (v61)
          operator delete((void *)v61);
        goto LABEL_84;
      }
      v70 = (char *)v62 - (char *)v65;
      if ((unint64_t)((char *)v62 - (char *)v65) > 0x1AF)
      {
        v72 = *(uint64_t **)(a1 + 24);
        v71 = 54;
        goto LABEL_60;
      }
      v71 = v70 >> 3;
      v72 = &v62->i64[54 - (v70 >> 3)];
      v73 = v70 & 0xFFFFFFFFFFFFFFF8;
      v74 = 424 - v73;
      if (424 - v73 < 0x68)
        break;
      v90 = &v126 < (uint64_t *)((char *)v62[27].i64 - v73);
      if (v62 < (int64x2_t *)&v127)
      {
        v75 = *(uint64_t **)(a1 + 24);
        if (v90)
          goto LABEL_58;
      }
      v91 = (v74 >> 3) + 1;
      v75 = &v62->i64[v91 & 0x3FFFFFFFFFFFFFFCLL];
      v92 = vdupq_lane_s64(v126, 0);
      v93 = v62 + 1;
      v94 = v91 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v93[-1] = v92;
        *v93 = v92;
        v93 += 2;
        v94 -= 4;
      }
      while (v94);
      if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_58;
LABEL_59:
      *(_QWORD *)(a1 + 24) = v72;
      if (v62 == (int64x2_t *)v65)
        goto LABEL_84;
LABEL_60:
      v95 = (char *)v72 - (char *)(v65 + 54);
      v96 = v95 >> 3;
      v97 = (int64x2_t *)(v72 - 54);
      v98 = (char *)v72;
      if (v72 - 54 < (uint64_t *)v62)
      {
        v99 = (v63 & 0xFFFFFFFFFFFFFFF8) + v95;
        v100 = v61 + v99 + 8;
        if ((unint64_t)v62 > v100)
          v100 = (unint64_t)v62;
        v101 = v100 + ~v61 - v99;
        if (v101 >= 0x58)
        {
          v102 = (v101 >> 3) + 1;
          v103 = v102 & 0x3FFFFFFFFFFFFFFCLL;
          v97 = (int64x2_t *)((char *)v97 + v103 * 8);
          v98 = (char *)&v72[v103];
          v104 = v72 + 2;
          v105 = (__int128 *)(v61 + 8 * v96 + 8 * v64 + 16);
          v106 = v102 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v107 = *v105;
            *(v104 - 1) = *(v105 - 1);
            *v104 = v107;
            v104 += 2;
            v105 += 2;
            v106 -= 4;
          }
          while (v106);
          if (v102 == (v102 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_69;
        }
        else
        {
          v98 = (char *)v72;
        }
        do
        {
          v108 = v97->i64[0];
          v97 = (int64x2_t *)((char *)v97 + 8);
          *(_QWORD *)v98 = v108;
          v98 += 8;
        }
        while (v97 < v62);
      }
LABEL_69:
      *(_QWORD *)(a1 + 24) = v98;
      if (v72 != v65 + 54)
      {
        v109 = v5;
        v110 = v71;
        memmove(&v72[-v96], (const void *)(v61 + (((unint64_t)v62 - v61) & 0xFFFFFFFFFFFFFFF8)), v95);
        v71 = v110;
        v5 = v109;
        v64 = (uint64_t)((uint64_t)v62->i64 - v61) >> 3;
      }
      v111 = (const double *)&v126;
      if (v65 <= &v126)
      {
        v112 = 432;
        if (*(_QWORD *)(a1 + 24) <= (unint64_t)&v126)
          v112 = 0;
        v111 = (const double *)((char *)&v126 + v112);
      }
      if (v71 < 0xA)
      {
        v113 = v71;
        goto LABEL_83;
      }
      if (v65 < (uint64_t *)v111 + 1
        && (unint64_t)v111 < v61 + (((unint64_t)v62 - v61) & 0xFFFFFFFFFFFFFFF8) + 8 * v71)
      {
        v113 = v71;
        do
        {
LABEL_83:
          *v65++ = *(_QWORD *)v111;
          --v113;
        }
        while (v113);
        goto LABEL_84;
      }
      v65 += v71 & 0xFFFFFFFFFFFFFFFCLL;
      v113 = v71 & 3;
      v114 = vld1q_dup_f64(v111);
      v115 = (float64x2_t *)(v61 + 8 * v64 + 16);
      v116 = v71 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v115[-1] = v114;
        *v115 = v114;
        v115 += 2;
        v116 -= 4;
      }
      while (v116);
      if (v71 != (v71 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_83;
LABEL_84:
      v54 = *(_QWORD *)(a1 + 24) - 432;
      v6 = a2;
      v7 = v122;
      v60 = v12 - v53;
      if (v12 != v53)
        goto LABEL_85;
LABEL_8:
      v13 = (v54 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v53 = v9;
      *((_QWORD *)v53 + 1) = v13;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
      v12 += 16;
      v14 = v124;
LABEL_9:
      v15 = (__int128 *)(v14 + 8 * (9 * v9 + v5 + (_DWORD)v51 * v123));
      v16 = *((_QWORD *)v15 + 8);
      v18 = v15[2];
      v17 = v15[3];
      v20 = *v15;
      v19 = v15[1];
      v21 = (__int128 *)((char *)v15 + 8 * v51);
      v22 = *((_QWORD *)v21 + 8);
      v24 = v21[2];
      v23 = v21[3];
      v26 = *v21;
      v25 = v21[1];
      v27 = &v15[v51];
      v28 = *((_QWORD *)v27 + 8);
      v30 = v27[2];
      v29 = v27[3];
      v32 = *v27;
      v31 = v27[1];
      v33 = (__int128 *)((char *)v15 + 24 * v51);
      v34 = *((_QWORD *)v33 + 8);
      v36 = v33[2];
      v35 = v33[3];
      v37 = *v33;
      v38 = v33[1];
      v39 = &v15[2 * v51];
      v40 = *((_QWORD *)v39 + 8);
      v42 = v39[2];
      v41 = v39[3];
      v43 = *v39;
      v44 = v39[1];
      v45 = (__int128 *)((char *)v15 + 40 * v51);
      v46 = *((_QWORD *)v45 + 8);
      v48 = v45[2];
      v47 = v45[3];
      v50 = *v45;
      v49 = v45[1];
      *(_OWORD *)v54 = v20;
      *(_OWORD *)(v54 + 16) = v19;
      *(_OWORD *)(v54 + 32) = v18;
      *(_OWORD *)(v54 + 48) = v17;
      *(_QWORD *)(v54 + 64) = v16;
      *(_OWORD *)(v54 + 72) = v26;
      *(_OWORD *)(v54 + 88) = v25;
      *(_OWORD *)(v54 + 104) = v24;
      *(_OWORD *)(v54 + 120) = v23;
      *(_QWORD *)(v54 + 136) = v22;
      *(_OWORD *)(v54 + 144) = v32;
      *(_OWORD *)(v54 + 160) = v31;
      *(_OWORD *)(v54 + 176) = v30;
      *(_OWORD *)(v54 + 192) = v29;
      *(_QWORD *)(v54 + 208) = v28;
      *(_OWORD *)(v54 + 232) = v38;
      *(_OWORD *)(v54 + 248) = v36;
      *(_QWORD *)(v54 + 280) = v34;
      *(_OWORD *)(v54 + 216) = v37;
      *(_OWORD *)(v54 + 264) = v35;
      *(_OWORD *)(v54 + 288) = v43;
      *(_OWORD *)(v54 + 304) = v44;
      *(_OWORD *)(v54 + 320) = v42;
      *(_OWORD *)(v54 + 336) = v41;
      *(_QWORD *)(v54 + 352) = v40;
      *(_OWORD *)(v54 + 360) = v50;
      *(_OWORD *)(v54 + 376) = v49;
      *(_OWORD *)(v54 + 392) = v48;
      *(_OWORD *)(v54 + 408) = v47;
      *(_QWORD *)(v54 + 424) = v46;
      ++v9;
      v8 = *(_DWORD *)(a1 + 8);
      if (v9 >= v8)
      {
        v3 = *(unsigned int *)(a1 + 12);
        goto LABEL_5;
      }
    }
    v75 = *(uint64_t **)(a1 + 24);
    do
LABEL_58:
      *v75++ = v126;
    while (v75 != v72);
    goto LABEL_59;
  }
}

void sub_20F5AF400(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  unint64_t v50;
  int64x2_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  _BYTE *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t *v67;
  _OWORD *v68;
  uint64_t *v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  __int128 *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  _OWORD *v78;
  size_t v79;
  uint64_t *v80;
  _BYTE *v81;
  BOOL v82;
  uint64_t v83;
  int64x2_t v84;
  int64x2_t *v85;
  uint64_t v86;
  int64_t v87;
  uint64_t v88;
  int64x2_t *v89;
  char *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _OWORD *v96;
  __int128 *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  unint64_t v106;
  const double *v107;
  uint64_t v108;
  unint64_t v109;
  float64x2_t v110;
  float64x2_t *v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *v115;
  unint64_t v116;
  uint64_t v118;
  void *__p;
  char *__pa;
  char *v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3 && *(_DWORD *)(a1 + 8))
  {
    v5 = a3;
    v6 = a2;
    v7 = 0;
    v115 = (_QWORD *)(a1 + 16);
    v113 = HIDWORD(a3);
    v8 = 1;
    while (!v8)
    {
LABEL_5:
      if (++v7 >= v3)
        return;
    }
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 88);
    v11 = (*(_DWORD *)(a1 + 112) * v7);
    v12 = (char *)(v10 + 16 * v11);
    v13 = (char *)(v10 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7) + v11));
    v122 = v113 + 4 * v7;
    v121 = v12;
    v118 = v7;
    while (1)
    {
      v15 = *v6;
      v40 = *((unsigned int *)v6 + 4);
      v41 = v12;
      if (v12 != v13)
      {
        v41 = v12;
        while (*(_DWORD *)v41 < v9)
        {
          v41 += 16;
          if (v41 == v13)
          {
            v42 = v13;
            goto LABEL_19;
          }
        }
      }
      v42 = v13;
      if (v41 != v13)
      {
        if (*(_DWORD *)v41 == v9)
        {
          v43 = *v115 + 8 * *((_QWORD *)v41 + 1);
          goto LABEL_9;
        }
        v42 = v41;
      }
LABEL_19:
      v44 = *(_QWORD *)(a1 + 80);
      v123 = *v6;
      if (v44)
      {
        v46 = *(_QWORD *)(a1 + 48);
        v45 = *(_QWORD *)(a1 + 56);
        v47 = ((v45 - v46) << 6) - 1;
        v48 = *(_QWORD *)(a1 + 72);
        if (v45 == v46)
          v47 = 0;
        v43 = *(_QWORD *)(a1 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v46 + (((unint64_t)(v48 + v44 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v48 + v44 - 1) & 0x1FF));
        *(_QWORD *)(a1 + 80) = v44 - 1;
        if ((unint64_t)(v47 - (v44 + v48) + 1) >= 0x400)
        {
          operator delete(*(void **)(v45 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v49 = v13 - v42;
        if (v13 == v42)
          goto LABEL_8;
LABEL_85:
        memmove(v42 + 16, v42, v49);
        goto LABEL_8;
      }
      v124 = 0;
      v50 = *(_QWORD *)(a1 + 16);
      v51 = *(int64x2_t **)(a1 + 24);
      v52 = (unint64_t)v51 - v50;
      v53 = (uint64_t)((uint64_t)v51->i64 - v50) >> 3;
      v54 = (uint64_t *)(v50 + (((unint64_t)v51 - v50) & 0xFFFFFFFFFFFFFFF8));
      v55 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)(v55 - (_QWORD)v51) < 0x120)
      {
        v56 = v53 + 36;
        if ((unint64_t)(v53 + 36) >> 61)
          sub_20E867F44();
        v57 = v55 - v50;
        if (v57 >> 2 > v56)
          v56 = v57 >> 2;
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
          v56 = 0x1FFFFFFFFFFFFFFFLL;
        v116 = v56;
        if (v56)
        {
          __p = *(void **)(a1 + 16);
          if (v56 >> 61)
            sub_20E877A38();
          v58 = v42;
          v59 = v40;
          v60 = (char *)v52;
          v61 = operator new(8 * v56);
          v52 = (unint64_t)v60;
          v40 = v59;
          v42 = v58;
          v50 = (unint64_t)__p;
        }
        else
        {
          v61 = 0;
        }
        v68 = &v61[8 * v53];
        v68[16] = 0u;
        v68[17] = 0u;
        v68[14] = 0u;
        v68[15] = 0u;
        v68[12] = 0u;
        v68[13] = 0u;
        v68[10] = 0u;
        v68[11] = 0u;
        v68[8] = 0u;
        v68[9] = 0u;
        v68[6] = 0u;
        v68[7] = 0u;
        v68[4] = 0u;
        v68[5] = 0u;
        v68[2] = 0u;
        v68[3] = 0u;
        *v68 = 0u;
        v68[1] = 0u;
        if ((int64x2_t *)v50 == v51)
        {
          v70 = &v61[8 * v53];
        }
        else
        {
          if (v52 - 8 < 0x68)
          {
            v69 = v54;
            v70 = &v61[8 * v53];
            goto LABEL_48;
          }
          v69 = v54;
          v70 = &v61[8 * v53];
          if (v50 + (v52 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v61[v52 & 0xFFFFFFFFFFFFFFF8] < 0x20)
            goto LABEL_91;
          v71 = ((v52 - 8) >> 3) + 1;
          v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
          v69 = &v54[v72 / 0xFFFFFFFFFFFFFFF8];
          v70 = (char *)v68 - v72;
          v73 = &v61[8 * v53 - 16];
          v74 = (__int128 *)(v50 + 8 * v53 - 16);
          v75 = v71 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v76 = *v74;
            *(v73 - 1) = *(v74 - 1);
            *v73 = v76;
            v73 -= 2;
            v74 -= 2;
            v75 -= 4;
          }
          while (v75);
          if (v71 != (v71 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_91:
            do
            {
LABEL_48:
              v77 = *--v69;
              *((_QWORD *)v70 - 1) = v77;
              v70 -= 8;
            }
            while (v69 != (uint64_t *)v50);
          }
        }
        v78 = v68 + 18;
        v79 = (char *)v51 - (char *)v54;
        if (v79)
        {
          v80 = v54;
          v81 = v61;
          memmove(v68 + 18, v80, v79);
          v61 = v81;
        }
        *(_QWORD *)(a1 + 16) = v70;
        *(_QWORD *)(a1 + 24) = (char *)v78 + v79;
        *(_QWORD *)(a1 + 32) = &v61[8 * v116];
        v5 = a3;
        if (v50)
          operator delete((void *)v50);
        goto LABEL_84;
      }
      v62 = (char *)v51 - (char *)v54;
      if ((unint64_t)((char *)v51 - (char *)v54) > 0x11F)
      {
        v64 = *(uint64_t **)(a1 + 24);
        v63 = 36;
        goto LABEL_60;
      }
      v63 = v62 >> 3;
      v64 = &v51->i64[36 - (v62 >> 3)];
      v65 = v62 & 0xFFFFFFFFFFFFFFF8;
      v66 = 280 - v65;
      if (280 - v65 < 0x68)
        break;
      v82 = &v124 < (uint64_t *)((char *)v51[18].i64 - v65);
      if (v51 < (int64x2_t *)&v125)
      {
        v67 = *(uint64_t **)(a1 + 24);
        if (v82)
          goto LABEL_58;
      }
      v83 = (v66 >> 3) + 1;
      v67 = &v51->i64[v83 & 0x3FFFFFFFFFFFFFFCLL];
      v84 = vdupq_lane_s64(v124, 0);
      v85 = v51 + 1;
      v86 = v83 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v85[-1] = v84;
        *v85 = v84;
        v85 += 2;
        v86 -= 4;
      }
      while (v86);
      if (v83 != (v83 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_58;
LABEL_59:
      *(_QWORD *)(a1 + 24) = v64;
      if (v51 == (int64x2_t *)v54)
        goto LABEL_84;
LABEL_60:
      v87 = (char *)v64 - (char *)(v54 + 36);
      v88 = v87 >> 3;
      v89 = (int64x2_t *)(v64 - 36);
      v90 = (char *)v64;
      if (v64 - 36 < (uint64_t *)v51)
      {
        v91 = (v52 & 0xFFFFFFFFFFFFFFF8) + v87;
        v92 = v50 + v91 + 8;
        if ((unint64_t)v51 > v92)
          v92 = (unint64_t)v51;
        v93 = v92 + ~v50 - v91;
        if (v93 >= 0x58)
        {
          v94 = (v93 >> 3) + 1;
          v95 = v94 & 0x3FFFFFFFFFFFFFFCLL;
          v89 = (int64x2_t *)((char *)v89 + v95 * 8);
          v90 = (char *)&v64[v95];
          v96 = v64 + 2;
          v97 = (__int128 *)(v50 + 8 * v88 + 8 * v53 + 16);
          v98 = v94 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v99 = *v97;
            *(v96 - 1) = *(v97 - 1);
            *v96 = v99;
            v96 += 2;
            v97 += 2;
            v98 -= 4;
          }
          while (v98);
          v52 = (unint64_t)v51 - v50;
          if (v94 == (v94 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_69;
        }
        else
        {
          v90 = (char *)v64;
        }
        do
        {
          v100 = v89->i64[0];
          v89 = (int64x2_t *)((char *)v89 + 8);
          *(_QWORD *)v90 = v100;
          v90 += 8;
        }
        while (v89 < v51);
      }
LABEL_69:
      __pa = (char *)v50;
      *(_QWORD *)(a1 + 24) = v90;
      if (v64 != v54 + 36)
      {
        v101 = (char *)(v50 + (((unint64_t)v51 - v50) & 0xFFFFFFFFFFFFFFF8));
        v102 = v42;
        v103 = v40;
        v104 = (char *)v52;
        v105 = v5;
        v106 = v63;
        memmove(&v64[-v88], v101, v87);
        v63 = v106;
        v5 = v105;
        v52 = (unint64_t)v104;
        v40 = v103;
        v42 = v102;
      }
      v107 = (const double *)&v124;
      if (v54 <= &v124)
      {
        v108 = 288;
        if (*(_QWORD *)(a1 + 24) <= (unint64_t)&v124)
          v108 = 0;
        v107 = (const double *)((char *)&v124 + v108);
      }
      if (v63 < 0xA)
      {
        v109 = v63;
        goto LABEL_83;
      }
      if (v54 < (uint64_t *)v107 + 1 && v107 < (const double *)&__pa[8 * v63 + (v52 & 0xFFFFFFFFFFFFFFF8)])
      {
        v109 = v63;
        do
        {
LABEL_83:
          *v54++ = *(_QWORD *)v107;
          --v109;
        }
        while (v109);
        goto LABEL_84;
      }
      v54 += v63 & 0xFFFFFFFFFFFFFFFCLL;
      v109 = v63 & 3;
      v110 = vld1q_dup_f64(v107);
      v111 = (float64x2_t *)&__pa[8 * v53 + 16];
      v112 = v63 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v111[-1] = v110;
        *v111 = v110;
        v111 += 2;
        v112 -= 4;
      }
      while (v112);
      if (v63 != (v63 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_83;
LABEL_84:
      v43 = *(_QWORD *)(a1 + 24) - 288;
      v6 = a2;
      v7 = v118;
      v49 = v13 - v42;
      if (v13 != v42)
        goto LABEL_85;
LABEL_8:
      v14 = (v43 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v42 = v9;
      *((_QWORD *)v42 + 1) = v14;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
      v13 += 16;
      v12 = v121;
      v15 = v123;
LABEL_9:
      v16 = (__int128 *)(v15 + 8 * (9 * v9 + v5 + (_DWORD)v40 * v122));
      v17 = *((_QWORD *)v16 + 8);
      v19 = v16[2];
      v18 = v16[3];
      v21 = *v16;
      v20 = v16[1];
      v22 = (__int128 *)((char *)v16 + 8 * v40);
      v23 = *((_QWORD *)v22 + 8);
      v25 = v22[2];
      v24 = v22[3];
      v27 = *v22;
      v26 = v22[1];
      v28 = &v16[v40];
      v29 = *((_QWORD *)v28 + 8);
      v31 = v28[2];
      v30 = v28[3];
      v33 = *v28;
      v32 = v28[1];
      v34 = (__int128 *)((char *)v16 + 24 * v40);
      v35 = *((_QWORD *)v34 + 8);
      v37 = v34[2];
      v36 = v34[3];
      v38 = *v34;
      v39 = v34[1];
      *(_OWORD *)v43 = v21;
      *(_OWORD *)(v43 + 16) = v20;
      *(_OWORD *)(v43 + 32) = v19;
      *(_OWORD *)(v43 + 48) = v18;
      *(_QWORD *)(v43 + 64) = v17;
      *(_OWORD *)(v43 + 72) = v27;
      *(_OWORD *)(v43 + 88) = v26;
      *(_OWORD *)(v43 + 104) = v25;
      *(_OWORD *)(v43 + 120) = v24;
      *(_QWORD *)(v43 + 136) = v23;
      *(_OWORD *)(v43 + 144) = v33;
      *(_OWORD *)(v43 + 160) = v32;
      *(_OWORD *)(v43 + 176) = v31;
      *(_OWORD *)(v43 + 192) = v30;
      *(_QWORD *)(v43 + 208) = v29;
      *(_OWORD *)(v43 + 232) = v39;
      *(_OWORD *)(v43 + 248) = v37;
      *(_QWORD *)(v43 + 280) = v35;
      *(_OWORD *)(v43 + 216) = v38;
      *(_OWORD *)(v43 + 264) = v36;
      ++v9;
      v8 = *(_DWORD *)(a1 + 8);
      if (v9 >= v8)
      {
        v3 = *(unsigned int *)(a1 + 12);
        goto LABEL_5;
      }
    }
    v67 = *(uint64_t **)(a1 + 24);
    do
LABEL_58:
      *v67++ = v124;
    while (v67 != v64);
    goto LABEL_59;
  }
}

void sub_20F5AFB00(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  unint64_t v44;
  int64x2_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  char *v59;
  char *v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  __int128 *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  size_t v70;
  uint64_t *v71;
  _BYTE *v72;
  BOOL v73;
  uint64_t v74;
  int64x2_t v75;
  int64x2_t *v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;
  int64x2_t *v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  __int128 *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  const double *v94;
  uint64_t v95;
  unint64_t v96;
  float64x2_t v97;
  float64x2_t *v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v102;
  unint64_t v103;
  char *v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3 && *(_DWORD *)(a1 + 8))
  {
    v5 = a3;
    v6 = a2;
    v7 = 0;
    v102 = (_QWORD *)(a1 + 16);
    v100 = HIDWORD(a3);
    v8 = 1;
    while (!v8)
    {
LABEL_5:
      if (++v7 >= v3)
        return;
    }
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 88);
    v11 = (*(_DWORD *)(a1 + 112) * v7);
    v12 = (char *)(v10 + 16 * v11);
    v13 = (char *)(v10 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7) + v11));
    v107 = 3 * v7 + v100;
    v105 = v12;
    v106 = v7;
    while (1)
    {
      v15 = *v6;
      v34 = *((unsigned int *)v6 + 4);
      v35 = v12;
      if (v12 != v13)
      {
        v35 = v12;
        while (*(_DWORD *)v35 < v9)
        {
          v35 += 16;
          if (v35 == v13)
          {
            v36 = v13;
            goto LABEL_19;
          }
        }
      }
      v36 = v13;
      if (v35 != v13)
      {
        if (*(_DWORD *)v35 == v9)
        {
          v37 = *v102 + 8 * *((_QWORD *)v35 + 1);
          goto LABEL_9;
        }
        v36 = v35;
      }
LABEL_19:
      v38 = *(_QWORD *)(a1 + 80);
      v108 = *v6;
      if (v38)
      {
        v40 = *(_QWORD *)(a1 + 48);
        v39 = *(_QWORD *)(a1 + 56);
        v41 = ((v39 - v40) << 6) - 1;
        v42 = *(_QWORD *)(a1 + 72);
        if (v39 == v40)
          v41 = 0;
        v37 = *(_QWORD *)(a1 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v40 + (((unint64_t)(v42 + v38 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v42 + v38 - 1) & 0x1FF));
        *(_QWORD *)(a1 + 80) = v38 - 1;
        if ((unint64_t)(v41 - (v38 + v42) + 1) >= 0x400)
        {
          operator delete(*(void **)(v39 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v43 = v13 - v36;
        if (v13 == v36)
          goto LABEL_8;
LABEL_85:
        memmove(v36 + 16, v36, v43);
        goto LABEL_8;
      }
      v109 = 0;
      v44 = *(_QWORD *)(a1 + 16);
      v45 = *(int64x2_t **)(a1 + 24);
      v46 = (unint64_t)v45 - v44;
      v47 = (uint64_t)((uint64_t)v45->i64 - v44) >> 3;
      v48 = (uint64_t *)(v44 + (((unint64_t)v45 - v44) & 0xFFFFFFFFFFFFFFF8));
      v49 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)(v49 - (_QWORD)v45) < 0xD8)
      {
        v50 = v47 + 27;
        if ((unint64_t)(v47 + 27) >> 61)
          sub_20E867F44();
        v51 = v49 - v44;
        if (v51 >> 2 > v50)
          v50 = v51 >> 2;
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
          v50 = 0x1FFFFFFFFFFFFFFFLL;
        v103 = v50;
        if (v50)
        {
          if (v50 >> 61)
            sub_20E877A38();
          v52 = operator new(8 * v50);
          v47 = (uint64_t)((uint64_t)v45->i64 - v44) >> 3;
        }
        else
        {
          v52 = 0;
        }
        v59 = &v52[8 * v47];
        *((_QWORD *)v59 + 26) = 0;
        *((_OWORD *)v59 + 11) = 0u;
        *((_OWORD *)v59 + 12) = 0u;
        *((_OWORD *)v59 + 9) = 0u;
        *((_OWORD *)v59 + 10) = 0u;
        *((_OWORD *)v59 + 7) = 0u;
        *((_OWORD *)v59 + 8) = 0u;
        *((_OWORD *)v59 + 5) = 0u;
        *((_OWORD *)v59 + 6) = 0u;
        *((_OWORD *)v59 + 3) = 0u;
        *((_OWORD *)v59 + 4) = 0u;
        *((_OWORD *)v59 + 1) = 0u;
        *((_OWORD *)v59 + 2) = 0u;
        *(_OWORD *)v59 = 0u;
        if ((int64x2_t *)v44 == v45)
        {
          v61 = &v52[8 * v47];
        }
        else
        {
          if (v46 - 8 < 0x68)
          {
            v60 = (char *)(v44 + (((unint64_t)v45 - v44) & 0xFFFFFFFFFFFFFFF8));
            v61 = &v52[8 * v47];
            goto LABEL_48;
          }
          v60 = (char *)(v44 + (((unint64_t)v45 - v44) & 0xFFFFFFFFFFFFFFF8));
          v61 = &v52[8 * v47];
          if (v44 + (v46 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v52[v46 & 0xFFFFFFFFFFFFFFF8] < 0x20)
            goto LABEL_91;
          v62 = ((v46 - 8) >> 3) + 1;
          v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
          v60 = (char *)&v48[v63 / 0xFFFFFFFFFFFFFFF8];
          v61 = &v59[-v63];
          v64 = &v52[8 * v47 - 16];
          v65 = (__int128 *)(v44 + 8 * v47 - 16);
          v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v67 = *v65;
            *(v64 - 1) = *(v65 - 1);
            *v64 = v67;
            v64 -= 2;
            v65 -= 2;
            v66 -= 4;
          }
          while (v66);
          if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_91:
            do
            {
LABEL_48:
              v68 = *((_QWORD *)v60 - 1);
              v60 -= 8;
              *((_QWORD *)v61 - 1) = v68;
              v61 -= 8;
            }
            while (v60 != (char *)v44);
          }
        }
        v69 = v59 + 216;
        v70 = (char *)v45 - (char *)v48;
        if (v70)
        {
          v71 = v48;
          v72 = v52;
          memmove(v59 + 216, v71, v70);
          v52 = v72;
        }
        *(_QWORD *)(a1 + 16) = v61;
        *(_QWORD *)(a1 + 24) = &v69[v70];
        *(_QWORD *)(a1 + 32) = &v52[8 * v103];
        v5 = a3;
        if (v44)
          operator delete((void *)v44);
        goto LABEL_84;
      }
      v53 = (char *)v45 - (char *)v48;
      if ((unint64_t)((char *)v45 - (char *)v48) > 0xD7)
      {
        v55 = *(uint64_t **)(a1 + 24);
        v54 = 27;
        goto LABEL_60;
      }
      v54 = v53 >> 3;
      v55 = &v45->i64[27 - (v53 >> 3)];
      v56 = v53 & 0xFFFFFFFFFFFFFFF8;
      v57 = 208 - v56;
      if (208 - v56 < 0x68)
        break;
      v73 = &v109 < (uint64_t *)((char *)&v45[13].i64[1] - v56);
      if (v45 < (int64x2_t *)&v110)
      {
        v58 = *(uint64_t **)(a1 + 24);
        if (v73)
          goto LABEL_58;
      }
      v74 = (v57 >> 3) + 1;
      v58 = &v45->i64[v74 & 0x3FFFFFFFFFFFFFFCLL];
      v75 = vdupq_lane_s64(v109, 0);
      v76 = v45 + 1;
      v77 = v74 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v76[-1] = v75;
        *v76 = v75;
        v76 += 2;
        v77 -= 4;
      }
      while (v77);
      if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_58;
LABEL_59:
      *(_QWORD *)(a1 + 24) = v55;
      if (v45 == (int64x2_t *)v48)
        goto LABEL_84;
LABEL_60:
      v78 = (char *)v55 - (char *)(v48 + 27);
      v79 = v78 >> 3;
      v80 = (int64x2_t *)(v55 - 27);
      v81 = (char *)v55;
      if (v55 - 27 < (uint64_t *)v45)
      {
        v82 = (v46 & 0xFFFFFFFFFFFFFFF8) + v78;
        v83 = v44 + v82 + 8;
        if ((unint64_t)v45 > v83)
          v83 = (unint64_t)v45;
        v84 = v83 + ~v44 - v82;
        if (v84 >= 0x58)
        {
          v85 = (v84 >> 3) + 1;
          v86 = v85 & 0x3FFFFFFFFFFFFFFCLL;
          v80 = (int64x2_t *)((char *)v80 + v86 * 8);
          v81 = (char *)&v55[v86];
          v87 = v55 + 2;
          v88 = (__int128 *)(v44 + 8 * v79 + 8 * v47 + 16);
          v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v90 = *v88;
            *(v87 - 1) = *(v88 - 1);
            *v87 = v90;
            v87 += 2;
            v88 += 2;
            v89 -= 4;
          }
          while (v89);
          if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_69;
        }
        else
        {
          v81 = (char *)v55;
        }
        do
        {
          v91 = v80->i64[0];
          v80 = (int64x2_t *)((char *)v80 + 8);
          *(_QWORD *)v81 = v91;
          v81 += 8;
        }
        while (v80 < v45);
      }
LABEL_69:
      *(_QWORD *)(a1 + 24) = v81;
      if (v55 != v48 + 27)
      {
        v92 = v5;
        v93 = v54;
        memmove(&v55[-v79], (const void *)(v44 + (((unint64_t)v45 - v44) & 0xFFFFFFFFFFFFFFF8)), v78);
        v54 = v93;
        v5 = v92;
        v47 = (uint64_t)((uint64_t)v45->i64 - v44) >> 3;
      }
      v94 = (const double *)&v109;
      if (v48 <= &v109)
      {
        v95 = 216;
        if (*(_QWORD *)(a1 + 24) <= (unint64_t)&v109)
          v95 = 0;
        v94 = (const double *)((char *)&v109 + v95);
      }
      if (v54 < 0xA)
      {
        v96 = v54;
        goto LABEL_83;
      }
      if (v48 < (uint64_t *)v94 + 1
        && (unint64_t)v94 < v44 + (((unint64_t)v45 - v44) & 0xFFFFFFFFFFFFFFF8) + 8 * v54)
      {
        v96 = v54;
        do
        {
LABEL_83:
          *v48++ = *(_QWORD *)v94;
          --v96;
        }
        while (v96);
        goto LABEL_84;
      }
      v48 += v54 & 0xFFFFFFFFFFFFFFFCLL;
      v96 = v54 & 3;
      v97 = vld1q_dup_f64(v94);
      v98 = (float64x2_t *)(v44 + 8 * v47 + 16);
      v99 = v54 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v98[-1] = v97;
        *v98 = v97;
        v98 += 2;
        v99 -= 4;
      }
      while (v99);
      if (v54 != (v54 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_83;
LABEL_84:
      v37 = *(_QWORD *)(a1 + 24) - 216;
      v6 = a2;
      v12 = v105;
      v7 = v106;
      v43 = v13 - v36;
      if (v13 != v36)
        goto LABEL_85;
LABEL_8:
      v14 = (v37 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v36 = v9;
      *((_QWORD *)v36 + 1) = v14;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
      v13 += 16;
      v15 = v108;
LABEL_9:
      v16 = (__int128 *)(v15 + 8 * (9 * v9 + v5 + (_DWORD)v34 * v107));
      v17 = *((_QWORD *)v16 + 8);
      v19 = v16[2];
      v18 = v16[3];
      v21 = *v16;
      v20 = v16[1];
      v22 = (__int128 *)((char *)v16 + 8 * v34);
      v23 = *((_QWORD *)v22 + 8);
      v25 = v22[2];
      v24 = v22[3];
      v27 = *v22;
      v26 = v22[1];
      v28 = &v16[v34];
      v29 = *((_QWORD *)v28 + 8);
      v31 = v28[2];
      v30 = v28[3];
      v33 = *v28;
      v32 = v28[1];
      *(_OWORD *)v37 = v21;
      *(_OWORD *)(v37 + 16) = v20;
      *(_OWORD *)(v37 + 32) = v19;
      *(_OWORD *)(v37 + 48) = v18;
      *(_QWORD *)(v37 + 64) = v17;
      *(_OWORD *)(v37 + 72) = v27;
      *(_OWORD *)(v37 + 88) = v26;
      *(_OWORD *)(v37 + 104) = v25;
      *(_OWORD *)(v37 + 120) = v24;
      *(_QWORD *)(v37 + 136) = v23;
      *(_OWORD *)(v37 + 144) = v33;
      *(_OWORD *)(v37 + 160) = v32;
      *(_OWORD *)(v37 + 176) = v31;
      *(_OWORD *)(v37 + 192) = v30;
      *(_QWORD *)(v37 + 208) = v29;
      ++v9;
      v8 = *(_DWORD *)(a1 + 8);
      if (v9 >= v8)
      {
        v3 = *(unsigned int *)(a1 + 12);
        goto LABEL_5;
      }
    }
    v58 = *(uint64_t **)(a1 + 24);
    do
LABEL_58:
      *v58++ = v109;
    while (v58 != v55);
    goto LABEL_59;
  }
}

void sub_20F5B019C(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  char *v54;
  _OWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  size_t v61;
  int64x2_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  _BYTE *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  _OWORD *v80;
  uint64_t *v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  __int128 *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  _OWORD *v90;
  int64_t v91;
  uint64_t *v92;
  size_t v93;
  _BYTE *v94;
  BOOL v95;
  uint64_t v96;
  int64x2_t v97;
  int64x2_t *v98;
  uint64_t v99;
  int64_t v100;
  uint64_t v101;
  int64x2_t *v102;
  char *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _OWORD *v109;
  __int128 *v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  unint64_t v117;
  unint64_t v118;
  const double *v119;
  uint64_t v120;
  unint64_t v121;
  float64x2_t v122;
  float64x2_t *v123;
  unint64_t v124;
  unint64_t v125;
  int64x2_t *v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v132;
  char *v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3 && *(_DWORD *)(a1 + 8))
  {
    v5 = a3;
    v6 = a2;
    v7 = 0;
    v128 = (_QWORD *)(a1 + 16);
    v125 = HIDWORD(a3);
    v8 = 1;
    while (!v8)
    {
LABEL_5:
      if (++v7 >= v3)
        return;
    }
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 88);
    v11 = (*(_DWORD *)(a1 + 112) * v7);
    v12 = (char *)(v10 + 16 * v11);
    v13 = (char *)(v10 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7) + v11));
    v134 = 9 * v7 + v125;
    v132 = v7;
    v133 = v12;
    while (1)
    {
      v15 = *v6;
      v52 = *((unsigned int *)v6 + 4);
      v53 = v12;
      if (v12 != v13)
      {
        v53 = v12;
        while (*(_DWORD *)v53 < v9)
        {
          v53 += 16;
          if (v53 == v13)
          {
            v54 = v13;
            goto LABEL_19;
          }
        }
      }
      v54 = v13;
      if (v53 != v13)
      {
        if (*(_DWORD *)v53 == v9)
        {
          v55 = (_OWORD *)(*v128 + 8 * *((_QWORD *)v53 + 1));
          goto LABEL_9;
        }
        v54 = v53;
      }
LABEL_19:
      v56 = *(_QWORD *)(a1 + 80);
      v135 = *v6;
      if (v56)
      {
        v58 = *(_QWORD *)(a1 + 48);
        v57 = *(_QWORD *)(a1 + 56);
        v59 = ((v57 - v58) << 6) - 1;
        v60 = *(_QWORD *)(a1 + 72);
        if (v57 == v58)
          v59 = 0;
        v55 = (_OWORD *)(*(_QWORD *)(a1 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v58 + (((unint64_t)(v60 + v56 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v60 + v56 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v56 - 1;
        if ((unint64_t)(v59 - (v56 + v60) + 1) >= 0x400)
        {
          operator delete(*(void **)(v57 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v61 = v13 - v54;
        if (v13 == v54)
          goto LABEL_8;
LABEL_85:
        memmove(v54 + 16, v54, v61);
        goto LABEL_8;
      }
      v136 = 0;
      v63 = *(_QWORD *)(a1 + 16);
      v62 = *(int64x2_t **)(a1 + 24);
      v64 = (unint64_t)v62 - v63;
      v65 = (uint64_t)((uint64_t)v62->i64 - v63) >> 3;
      v66 = (uint64_t *)(v63 + (((unint64_t)v62 - v63) & 0xFFFFFFFFFFFFFFF8));
      v67 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)(v67 - (_QWORD)v62) < 0x1B0)
      {
        v68 = v65 + 54;
        if ((unint64_t)(v65 + 54) >> 61)
          sub_20E867F44();
        v69 = v67 - v63;
        if (v69 >> 2 > v68)
          v68 = v69 >> 2;
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        v129 = v68;
        if (v68)
        {
          v127 = *(int64x2_t **)(a1 + 24);
          if (v68 >> 61)
            sub_20E877A38();
          v70 = *(_QWORD *)(a1 + 16);
          v71 = v54;
          v72 = (char *)v64;
          v73 = operator new(8 * v68);
          v64 = (unint64_t)v72;
          v54 = v71;
          v63 = v70;
          v62 = v127;
        }
        else
        {
          v73 = 0;
        }
        v80 = &v73[8 * v65];
        v80[25] = 0u;
        v80[26] = 0u;
        v80[23] = 0u;
        v80[24] = 0u;
        v80[21] = 0u;
        v80[22] = 0u;
        v80[19] = 0u;
        v80[20] = 0u;
        v80[17] = 0u;
        v80[18] = 0u;
        v80[15] = 0u;
        v80[16] = 0u;
        v80[13] = 0u;
        v80[14] = 0u;
        v80[11] = 0u;
        v80[12] = 0u;
        v80[9] = 0u;
        v80[10] = 0u;
        v80[7] = 0u;
        v80[8] = 0u;
        v80[5] = 0u;
        v80[6] = 0u;
        v80[3] = 0u;
        v80[4] = 0u;
        v80[1] = 0u;
        v80[2] = 0u;
        *v80 = 0u;
        if ((int64x2_t *)v63 == v62)
        {
          v82 = &v73[8 * v65];
        }
        else
        {
          if (v64 - 8 < 0x68)
          {
            v81 = v66;
            v82 = &v73[8 * v65];
            goto LABEL_48;
          }
          v81 = v66;
          v82 = &v73[8 * v65];
          if (v63 + (v64 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v73[v64 & 0xFFFFFFFFFFFFFFF8] < 0x20)
            goto LABEL_91;
          v83 = ((v64 - 8) >> 3) + 1;
          v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
          v81 = &v66[v84 / 0xFFFFFFFFFFFFFFF8];
          v82 = (char *)v80 - v84;
          v85 = &v73[8 * v65 - 16];
          v86 = (__int128 *)(v63 + 8 * v65 - 16);
          v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v88 = *v86;
            *(v85 - 1) = *(v86 - 1);
            *v85 = v88;
            v85 -= 2;
            v86 -= 2;
            v87 -= 4;
          }
          while (v87);
          if (v83 != (v83 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_91:
            do
            {
LABEL_48:
              v89 = *--v81;
              *((_QWORD *)v82 - 1) = v89;
              v82 -= 8;
            }
            while (v81 != (uint64_t *)v63);
          }
        }
        v90 = v80 + 27;
        v91 = (char *)v62 - (char *)v66;
        if (v62 != (int64x2_t *)v66)
        {
          v92 = v66;
          v93 = (char *)v62 - (char *)v66;
          v94 = v73;
          memmove(v80 + 27, v92, v93);
          v73 = v94;
        }
        *(_QWORD *)(a1 + 16) = v82;
        *(_QWORD *)(a1 + 24) = (char *)v90 + v91;
        *(_QWORD *)(a1 + 32) = &v73[8 * v129];
        v5 = a3;
        if (v63)
          operator delete((void *)v63);
        goto LABEL_84;
      }
      v74 = (char *)v62 - (char *)v66;
      if ((unint64_t)((char *)v62 - (char *)v66) > 0x1AF)
      {
        v76 = *(uint64_t **)(a1 + 24);
        v75 = 54;
        goto LABEL_60;
      }
      v75 = v74 >> 3;
      v76 = &v62->i64[54 - (v74 >> 3)];
      v77 = v74 & 0xFFFFFFFFFFFFFFF8;
      v78 = 424 - v77;
      if (424 - v77 < 0x68)
        break;
      v95 = &v136 < (uint64_t *)((char *)v62[27].i64 - v77);
      if (v62 < (int64x2_t *)&v137)
      {
        v79 = *(uint64_t **)(a1 + 24);
        if (v95)
          goto LABEL_58;
      }
      v96 = (v78 >> 3) + 1;
      v79 = &v62->i64[v96 & 0x3FFFFFFFFFFFFFFCLL];
      v97 = vdupq_lane_s64(v136, 0);
      v98 = v62 + 1;
      v99 = v96 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v98[-1] = v97;
        *v98 = v97;
        v98 += 2;
        v99 -= 4;
      }
      while (v99);
      if (v96 != (v96 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_58;
LABEL_59:
      *(_QWORD *)(a1 + 24) = v76;
      if (v62 == (int64x2_t *)v66)
        goto LABEL_84;
LABEL_60:
      v100 = (char *)v76 - (char *)(v66 + 54);
      v101 = v100 >> 3;
      v102 = (int64x2_t *)(v76 - 54);
      v103 = (char *)v76;
      if (v76 - 54 < (uint64_t *)v62)
      {
        v104 = (v64 & 0xFFFFFFFFFFFFFFF8) + v100;
        v105 = v63 + v104 + 8;
        if ((unint64_t)v62 > v105)
          v105 = (unint64_t)v62;
        v106 = v105 + ~v63 - v104;
        if (v106 >= 0x58)
        {
          v107 = (v106 >> 3) + 1;
          v108 = v107 & 0x3FFFFFFFFFFFFFFCLL;
          v102 = (int64x2_t *)((char *)v102 + v108 * 8);
          v103 = (char *)&v76[v108];
          v109 = v76 + 2;
          v110 = (__int128 *)(v63 + 8 * v101 + 8 * v65 + 16);
          v111 = v107 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v112 = *v110;
            *(v109 - 1) = *(v110 - 1);
            *v109 = v112;
            v109 += 2;
            v110 += 2;
            v111 -= 4;
          }
          while (v111);
          v64 = (unint64_t)v62 - v63;
          if (v107 == (v107 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_69;
        }
        else
        {
          v103 = (char *)v76;
        }
        do
        {
          v113 = v102->i64[0];
          v102 = (int64x2_t *)((char *)v102 + 8);
          *(_QWORD *)v103 = v113;
          v103 += 8;
        }
        while (v102 < v62);
      }
LABEL_69:
      v130 = v63;
      *(_QWORD *)(a1 + 24) = v103;
      if (v76 != v66 + 54)
      {
        v114 = (char *)(v63 + (((unint64_t)v62 - v63) & 0xFFFFFFFFFFFFFFF8));
        v115 = v54;
        v116 = (char *)v64;
        v117 = v5;
        v118 = v75;
        memmove(&v76[-v101], v114, v100);
        v75 = v118;
        v5 = v117;
        v64 = (unint64_t)v116;
        v54 = v115;
      }
      v119 = (const double *)&v136;
      if (v66 <= &v136)
      {
        v120 = 432;
        if (*(_QWORD *)(a1 + 24) <= (unint64_t)&v136)
          v120 = 0;
        v119 = (const double *)((char *)&v136 + v120);
      }
      if (v75 < 0xA)
      {
        v121 = v75;
        goto LABEL_83;
      }
      if (v66 < (uint64_t *)v119 + 1 && (unint64_t)v119 < v130 + (v64 & 0xFFFFFFFFFFFFFFF8) + 8 * v75)
      {
        v121 = v75;
        do
        {
LABEL_83:
          *v66++ = *(_QWORD *)v119;
          --v121;
        }
        while (v121);
        goto LABEL_84;
      }
      v66 += v75 & 0xFFFFFFFFFFFFFFFCLL;
      v121 = v75 & 3;
      v122 = vld1q_dup_f64(v119);
      v123 = (float64x2_t *)(v130 + 8 * v65 + 16);
      v124 = v75 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v123[-1] = v122;
        *v123 = v122;
        v123 += 2;
        v124 -= 4;
      }
      while (v124);
      if (v75 != (v75 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_83;
LABEL_84:
      v55 = (_OWORD *)(*(_QWORD *)(a1 + 24) - 432);
      v6 = a2;
      v7 = v132;
      v61 = v13 - v54;
      if (v13 != v54)
        goto LABEL_85;
LABEL_8:
      v14 = ((uint64_t)v55 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v54 = v9;
      *((_QWORD *)v54 + 1) = v14;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
      v13 += 16;
      v12 = v133;
      v15 = v135;
LABEL_9:
      v16 = (__int128 *)(v15 + 8 * (v5 + 6 * v9 + (_DWORD)v52 * v134));
      v18 = v16[1];
      v17 = v16[2];
      v19 = *v16;
      v20 = (__int128 *)((char *)v16 + 8 * v52);
      v22 = v20[1];
      v21 = v20[2];
      v23 = *v20;
      v24 = &v16[v52];
      v26 = v24[1];
      v25 = v24[2];
      v27 = *v24;
      v28 = (__int128 *)((char *)v16 + 24 * v52);
      v30 = v28[1];
      v29 = v28[2];
      v31 = *v28;
      v32 = &v16[2 * v52];
      v34 = v32[1];
      v33 = v32[2];
      v35 = *v32;
      v36 = (__int128 *)((char *)v16 + 40 * v52);
      v38 = v36[1];
      v37 = v36[2];
      v39 = *v36;
      v40 = &v16[3 * v52];
      v42 = v40[1];
      v41 = v40[2];
      v43 = *v40;
      v44 = (__int128 *)((char *)v16 + 56 * v52);
      v46 = v44[1];
      v45 = v44[2];
      v47 = *v44;
      v48 = &v16[4 * v52];
      v50 = v48[1];
      v49 = v48[2];
      v51 = *v48;
      *v55 = v19;
      v55[1] = v18;
      v55[2] = v17;
      v55[3] = v23;
      v55[4] = v22;
      v55[5] = v21;
      v55[6] = v27;
      v55[7] = v26;
      v55[8] = v25;
      v55[9] = v31;
      v55[10] = v30;
      v55[11] = v29;
      v55[12] = v35;
      v55[13] = v34;
      v55[14] = v33;
      v55[15] = v39;
      v55[16] = v38;
      v55[17] = v37;
      v55[18] = v43;
      v55[19] = v42;
      v55[20] = v41;
      v55[21] = v47;
      v55[22] = v46;
      v55[23] = v45;
      v55[24] = v51;
      v55[25] = v50;
      v55[26] = v49;
      ++v9;
      v8 = *(_DWORD *)(a1 + 8);
      if (v9 >= v8)
      {
        v3 = *(unsigned int *)(a1 + 12);
        goto LABEL_5;
      }
    }
    v79 = *(uint64_t **)(a1 + 24);
    do
LABEL_58:
      *v79++ = v136;
    while (v79 != v76);
    goto LABEL_59;
  }
}

void sub_20F5B08EC(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  char *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  unint64_t v28;
  int64x2_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _OWORD *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  _OWORD *v54;
  size_t v55;
  _BYTE *v56;
  BOOL v57;
  uint64_t v58;
  int64x2_t v59;
  int64x2_t *v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  int64x2_t *v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  __int128 *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  const double *v76;
  uint64_t v77;
  unint64_t v78;
  float64x2_t v79;
  float64x2_t *v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  uint64_t v85;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3 && *(_DWORD *)(a1 + 8))
  {
    v5 = a3;
    v6 = a2;
    v7 = 0;
    v83 = (_QWORD *)(a1 + 16);
    v82 = HIDWORD(a3);
    v8 = 1;
    v87 = a3;
    while (!v8)
    {
LABEL_5:
      if (++v7 >= v3)
        return;
    }
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 88);
    v11 = (*(_DWORD *)(a1 + 112) * v7);
    v92 = (char *)(v10 + 16 * v11);
    v12 = (char *)(v10 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7) + v11));
    v89 = v7 + v82;
    v88 = v7;
    while (1)
    {
      v14 = *v6;
      v15 = *((_DWORD *)v6 + 4);
      v19 = v92;
      if (v92 != v12)
      {
        v19 = v92;
        while (*(_DWORD *)v19 < v9)
        {
          v19 += 16;
          if (v19 == v12)
          {
            v20 = v12;
            goto LABEL_19;
          }
        }
      }
      v20 = v12;
      if (v19 != v12)
      {
        if (*(_DWORD *)v19 == v9)
        {
          v21 = (_OWORD *)(*v83 + 8 * *((_QWORD *)v19 + 1));
          goto LABEL_9;
        }
        v20 = v19;
      }
LABEL_19:
      v91 = *v6;
      v22 = *(_QWORD *)(a1 + 80);
      v90 = *((_DWORD *)v6 + 4);
      if (v22)
      {
        v24 = *(_QWORD *)(a1 + 48);
        v23 = *(_QWORD *)(a1 + 56);
        v25 = ((v23 - v24) << 6) - 1;
        v26 = *(_QWORD *)(a1 + 72);
        if (v23 == v24)
          v25 = 0;
        v21 = (_OWORD *)(*(_QWORD *)(a1 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v24 + (((unint64_t)(v26 + v22 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v26 + v22 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v22 - 1;
        if ((unint64_t)(v25 - (v22 + v26) + 1) >= 0x400)
        {
          operator delete(*(void **)(v23 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v27 = v12 - v20;
        if (v12 == v20)
          goto LABEL_8;
LABEL_84:
        memmove(v20 + 16, v20, v27);
        goto LABEL_8;
      }
      v93 = 0;
      v28 = *(_QWORD *)(a1 + 16);
      v29 = *(int64x2_t **)(a1 + 24);
      v30 = (unint64_t)v29 - v28;
      v31 = (uint64_t)((uint64_t)v29->i64 - v28) >> 3;
      v32 = (uint64_t *)(v28 + (((unint64_t)v29 - v28) & 0xFFFFFFFFFFFFFFF8));
      v33 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)(v33 - (_QWORD)v29) < 0x30)
      {
        v34 = v31 + 6;
        if ((unint64_t)(v31 + 6) >> 61)
          sub_20E867F44();
        v35 = v33 - v28;
        if (v35 >> 2 > v34)
          v34 = v35 >> 2;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
          v34 = 0x1FFFFFFFFFFFFFFFLL;
        v84 = v34;
        if (v34)
        {
          if (v34 >> 61)
            sub_20E877A38();
          v36 = operator new(8 * v34);
          v37 = &v36[8 * v31];
          v37[1] = 0u;
          v37[2] = 0u;
          *v37 = 0u;
          if ((int64x2_t *)v28 != v29)
          {
LABEL_35:
            if (v30 - 8 < 0x68)
            {
              v38 = (char *)(v28 + (((unint64_t)v29 - v28) & 0xFFFFFFFFFFFFFFF8));
              v39 = (char *)v37;
              goto LABEL_47;
            }
            v38 = (char *)(v28 + (((unint64_t)v29 - v28) & 0xFFFFFFFFFFFFFFF8));
            v39 = (char *)v37;
            if (v28 + (v30 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v36[v30 & 0xFFFFFFFFFFFFFFF8] < 0x20)
              goto LABEL_90;
            v46 = ((v30 - 8) >> 3) + 1;
            v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
            v38 = (char *)&v32[v47 / 0xFFFFFFFFFFFFFFF8];
            v39 = (char *)v37 - v47;
            v48 = 8 * ((uint64_t)((uint64_t)v29->i64 - v28) >> 3);
            v49 = &v36[v48 - 16];
            v50 = (__int128 *)(v28 + v48 - 16);
            v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v52 = *v50;
              *(v49 - 1) = *(v50 - 1);
              *v49 = v52;
              v49 -= 2;
              v50 -= 2;
              v51 -= 4;
            }
            while (v51);
            if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_90:
              do
              {
LABEL_47:
                v53 = *((_QWORD *)v38 - 1);
                v38 -= 8;
                *((_QWORD *)v39 - 1) = v53;
                v39 -= 8;
              }
              while (v38 != (char *)v28);
            }
LABEL_48:
            v54 = v37 + 3;
            v55 = (char *)v29 - (char *)v32;
            if (v55)
            {
              v56 = v36;
              memmove(v37 + 3, v32, v55);
              v36 = v56;
            }
            *(_QWORD *)(a1 + 16) = v39;
            *(_QWORD *)(a1 + 24) = (char *)v54 + v55;
            *(_QWORD *)(a1 + 32) = &v36[8 * v84];
            if (v28)
              operator delete((void *)v28);
            goto LABEL_83;
          }
        }
        else
        {
          v36 = 0;
          v37 = (_OWORD *)(8 * v31);
          v37[1] = 0u;
          v37[2] = 0u;
          *v37 = 0u;
          if ((int64x2_t *)v28 != v29)
            goto LABEL_35;
        }
        v39 = (char *)v37;
        goto LABEL_48;
      }
      v85 = (uint64_t)((uint64_t)v29->i64 - v28) >> 3;
      v40 = (char *)v29 - (char *)v32;
      if ((unint64_t)((char *)v29 - (char *)v32) > 0x2F)
      {
        v42 = *(uint64_t **)(a1 + 24);
        v41 = 6;
        goto LABEL_59;
      }
      v41 = v40 >> 3;
      v42 = &v29->i64[6 - (v40 >> 3)];
      v43 = v40 & 0xFFFFFFFFFFFFFFF8;
      v44 = 40 - v43;
      if (40 - v43 < 0x68)
        break;
      v57 = &v93 < (uint64_t *)((char *)v29[3].i64 - v43);
      if (v29 < (int64x2_t *)&v94)
      {
        v45 = *(uint64_t **)(a1 + 24);
        if (v57)
          goto LABEL_57;
      }
      v58 = (v44 >> 3) + 1;
      v45 = &v29->i64[v58 & 0x3FFFFFFFFFFFFFFCLL];
      v59 = vdupq_lane_s64(v93, 0);
      v60 = v29 + 1;
      v61 = v58 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v60[-1] = v59;
        *v60 = v59;
        v60 += 2;
        v61 -= 4;
      }
      while (v61);
      if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_57;
LABEL_58:
      *(_QWORD *)(a1 + 24) = v42;
      if (v29 == (int64x2_t *)v32)
        goto LABEL_83;
LABEL_59:
      v62 = (char *)v42 - (char *)(v32 + 6);
      v63 = v62 >> 3;
      v64 = (int64x2_t *)(v42 - 6);
      v65 = (char *)v42;
      if (v42 - 6 < (uint64_t *)v29)
      {
        v66 = (v30 & 0xFFFFFFFFFFFFFFF8) + v62;
        v67 = v28 + v66 + 8;
        if ((unint64_t)v29 > v67)
          v67 = (unint64_t)v29;
        v68 = v67 + ~v28 - v66;
        if (v68 >= 0x58)
        {
          v69 = (v68 >> 3) + 1;
          v70 = v69 & 0x3FFFFFFFFFFFFFFCLL;
          v64 = (int64x2_t *)((char *)v64 + v70 * 8);
          v65 = (char *)&v42[v70];
          v71 = v42 + 2;
          v72 = (__int128 *)(v28 + 8 * v63 + 8 * v85 + 16);
          v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v74 = *v72;
            *(v71 - 1) = *(v72 - 1);
            *v71 = v74;
            v71 += 2;
            v72 += 2;
            v73 -= 4;
          }
          while (v73);
          if (v69 == (v69 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_68;
        }
        else
        {
          v65 = (char *)v42;
        }
        do
        {
          v75 = v64->i64[0];
          v64 = (int64x2_t *)((char *)v64 + 8);
          *(_QWORD *)v65 = v75;
          v65 += 8;
        }
        while (v64 < v29);
      }
LABEL_68:
      *(_QWORD *)(a1 + 24) = v65;
      if (v42 != v32 + 6)
        memmove(&v42[-v63], (const void *)(v28 + (((unint64_t)v29 - v28) & 0xFFFFFFFFFFFFFFF8)), v62);
      v76 = (const double *)&v93;
      if (v32 <= &v93)
      {
        v77 = 48;
        if (*(_QWORD *)(a1 + 24) <= (unint64_t)&v93)
          v77 = 0;
        v76 = (const double *)((char *)&v93 + v77);
      }
      if (v41 < 0xA)
      {
        v78 = v41;
        goto LABEL_82;
      }
      if (v32 < (uint64_t *)v76 + 1 && (unint64_t)v76 < v28 + (v30 & 0xFFFFFFFFFFFFFFF8) + 8 * v41)
      {
        v78 = v41;
        do
        {
LABEL_82:
          *v32++ = *(_QWORD *)v76;
          --v78;
        }
        while (v78);
        goto LABEL_83;
      }
      v32 += v41 & 0xFFFFFFFFFFFFFFFCLL;
      v78 = v41 & 3;
      v79 = vld1q_dup_f64(v76);
      v80 = (float64x2_t *)(v28 + 8 * v85 + 16);
      v81 = v41 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v80[-1] = v79;
        *v80 = v79;
        v80 += 2;
        v81 -= 4;
      }
      while (v81);
      if (v41 != (v41 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_82;
LABEL_83:
      v21 = (_OWORD *)(*(_QWORD *)(a1 + 24) - 48);
      v6 = a2;
      v5 = v87;
      v7 = v88;
      v27 = v12 - v20;
      if (v12 != v20)
        goto LABEL_84;
LABEL_8:
      v13 = ((uint64_t)v21 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v20 = v9;
      *((_QWORD *)v20 + 1) = v13;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
      v12 += 16;
      v14 = v91;
      v15 = v90;
LABEL_9:
      v16 = (__int128 *)(v14 + 8 * (v5 + 6 * v9 + v15 * v89));
      v17 = *v16;
      v18 = v16[2];
      v21[1] = v16[1];
      v21[2] = v18;
      *v21 = v17;
      ++v9;
      v8 = *(_DWORD *)(a1 + 8);
      if (v9 >= v8)
      {
        v3 = *(unsigned int *)(a1 + 12);
        goto LABEL_5;
      }
    }
    v45 = *(uint64_t **)(a1 + 24);
    do
LABEL_57:
      *v45++ = v93;
    while (v45 != v42);
    goto LABEL_58;
  }
}

void sub_20F5B0F2C(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  char *v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  unint64_t v50;
  int64x2_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  _BYTE *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  _OWORD *v67;
  uint64_t *v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  _OWORD *v77;
  size_t v78;
  uint64_t *v79;
  _BYTE *v80;
  BOOL v81;
  uint64_t v82;
  int64x2_t v83;
  int64x2_t *v84;
  uint64_t v85;
  int64_t v86;
  uint64_t v87;
  int64x2_t *v88;
  char *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _OWORD *v95;
  __int128 *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  unint64_t v103;
  unint64_t v104;
  const double *v105;
  uint64_t v106;
  unint64_t v107;
  float64x2_t v108;
  float64x2_t *v109;
  unint64_t v110;
  unint64_t v111;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v116;
  void *__p;
  char *__pa;
  char *v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3 && *(_DWORD *)(a1 + 8))
  {
    v5 = a3;
    v6 = a2;
    v7 = 0;
    v113 = (_QWORD *)(a1 + 16);
    v111 = HIDWORD(a3);
    v8 = 1;
    while (!v8)
    {
LABEL_5:
      if (++v7 >= v3)
        return;
    }
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 88);
    v11 = (*(_DWORD *)(a1 + 112) * v7);
    v12 = (char *)(v10 + 16 * v11);
    v13 = (char *)(v10 + 16 * (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7) + v11));
    v120 = v111 + 6 * v7;
    v119 = v12;
    v116 = v7;
    while (1)
    {
      v15 = *v6;
      v40 = *((unsigned int *)v6 + 4);
      v41 = v12;
      if (v12 != v13)
      {
        v41 = v12;
        while (*(_DWORD *)v41 < v9)
        {
          v41 += 16;
          if (v41 == v13)
          {
            v42 = v13;
            goto LABEL_19;
          }
        }
      }
      v42 = v13;
      if (v41 != v13)
      {
        if (*(_DWORD *)v41 == v9)
        {
          v43 = (_OWORD *)(*v113 + 8 * *((_QWORD *)v41 + 1));
          goto LABEL_9;
        }
        v42 = v41;
      }
LABEL_19:
      v44 = *(_QWORD *)(a1 + 80);
      v121 = *v6;
      if (v44)
      {
        v46 = *(_QWORD *)(a1 + 48);
        v45 = *(_QWORD *)(a1 + 56);
        v47 = ((v45 - v46) << 6) - 1;
        v48 = *(_QWORD *)(a1 + 72);
        if (v45 == v46)
          v47 = 0;
        v43 = (_OWORD *)(*(_QWORD *)(a1 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v46 + (((unint64_t)(v48 + v44 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v48 + v44 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v44 - 1;
        if ((unint64_t)(v47 - (v44 + v48) + 1) >= 0x400)
        {
          operator delete(*(void **)(v45 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        v49 = v13 - v42;
        if (v13 == v42)
          goto LABEL_8;
LABEL_85:
        memmove(v42 + 16, v42, v49);
        goto LABEL_8;
      }
      v122 = 0;
      v50 = *(_QWORD *)(a1 + 16);
      v51 = *(int64x2_t **)(a1 + 24);
      v52 = (unint64_t)v51 - v50;
      v53 = (uint64_t)((uint64_t)v51->i64 - v50) >> 3;
      v54 = (uint64_t *)(v50 + (((unint64_t)v51 - v50) & 0xFFFFFFFFFFFFFFF8));
      v55 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)(v55 - (_QWORD)v51) < 0x120)
      {
        v56 = v53 + 36;
        if ((unint64_t)(v53 + 36) >> 61)
          sub_20E867F44();
        v57 = v55 - v50;
        if (v57 >> 2 > v56)
          v56 = v57 >> 2;
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
          v56 = 0x1FFFFFFFFFFFFFFFLL;
        v114 = v56;
        if (v56)
        {
          __p = *(void **)(a1 + 16);
          if (v56 >> 61)
            sub_20E877A38();
          v58 = v42;
          v59 = (char *)v52;
          v60 = operator new(8 * v56);
          v52 = (unint64_t)v59;
          v42 = v58;
          v50 = (unint64_t)__p;
        }
        else
        {
          v60 = 0;
        }
        v67 = &v60[8 * v53];
        v67[16] = 0u;
        v67[17] = 0u;
        v67[14] = 0u;
        v67[15] = 0u;
        v67[12] = 0u;
        v67[13] = 0u;
        v67[10] = 0u;
        v67[11] = 0u;
        v67[8] = 0u;
        v67[9] = 0u;
        v67[6] = 0u;
        v67[7] = 0u;
        v67[4] = 0u;
        v67[5] = 0u;
        v67[2] = 0u;
        v67[3] = 0u;
        *v67 = 0u;
        v67[1] = 0u;
        if ((int64x2_t *)v50 == v51)
        {
          v69 = &v60[8 * v53];
        }
        else
        {
          if (v52 - 8 < 0x68)
          {
            v68 = v54;
            v69 = &v60[8 * v53];
            goto LABEL_48;
          }
          v68 = v54;
          v69 = &v60[8 * v53];
          if (v50 + (v52 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v60[v52 & 0xFFFFFFFFFFFFFFF8] < 0x20)
            goto LABEL_91;
          v70 = ((v52 - 8) >> 3) + 1;
          v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
          v68 = &v54[v71 / 0xFFFFFFFFFFFFFFF8];
          v69 = (char *)v67 - v71;
          v72 = &v60[8 * v53 - 16];
          v73 = (__int128 *)(v50 + 8 * v53 - 16);
          v74 = v70 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v75 = *v73;
            *(v72 - 1) = *(v73 - 1);
            *v72 = v75;
            v72 -= 2;
            v73 -= 2;
            v74 -= 4;
          }
          while (v74);
          if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_91:
            do
            {
LABEL_48:
              v76 = *--v68;
              *((_QWORD *)v69 - 1) = v76;
              v69 -= 8;
            }
            while (v68 != (uint64_t *)v50);
          }
        }
        v77 = v67 + 18;
        v78 = (char *)v51 - (char *)v54;
        if (v78)
        {
          v79 = v54;
          v80 = v60;
          memmove(v67 + 18, v79, v78);
          v60 = v80;
        }
        *(_QWORD *)(a1 + 16) = v69;
        *(_QWORD *)(a1 + 24) = (char *)v77 + v78;
        *(_QWORD *)(a1 + 32) = &v60[8 * v114];
        v5 = a3;
        if (v50)
          operator delete((void *)v50);
        goto LABEL_84;
      }
      v61 = (char *)v51 - (char *)v54;
      if ((unint64_t)((char *)v51 - (char *)v54) > 0x11F)
      {
        v63 = *(uint64_t **)(a1 + 24);
        v62 = 36;
        goto LABEL_60;
      }
      v62 = v61 >> 3;
      v63 = &v51->i64[36 - (v61 >> 3)];
      v64 = v61 & 0xFFFFFFFFFFFFFFF8;
      v65 = 280 - v64;
      if (280 - v64 < 0x68)
        break;
      v81 = &v122 < (uint64_t *)((char *)v51[18].i64 - v64);
      if (v51 < (int64x2_t *)&v123)
      {
        v66 = *(uint64_t **)(a1 + 24);
        if (v81)
          goto LABEL_58;
      }
      v82 = (v65 >> 3) + 1;
      v66 = &v51->i64[v82 & 0x3FFFFFFFFFFFFFFCLL];
      v83 = vdupq_lane_s64(v122, 0);
      v84 = v51 + 1;
      v85 = v82 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v84[-1] = v83;
        *v84 = v83;
        v84 += 2;
        v85 -= 4;
      }
      while (v85);
      if (v82 != (v82 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_58;
LABEL_59:
      *(_QWORD *)(a1 + 24) = v63;
      if (v51 == (int64x2_t *)v54)
        goto LABEL_84;
LABEL_60:
      v86 = (char *)v63 - (char *)(v54 + 36);
      v87 = v86 >> 3;
      v88 = (int64x2_t *)(v63 - 36);
      v89 = (char *)v63;
      if (v63 - 36 < (uint64_t *)v51)
      {
        v90 = (v52 & 0xFFFFFFFFFFFFFFF8) + v86;
        v91 = v50 + v90 + 8;
        if ((unint64_t)v51 > v91)
          v91 = (unint64_t)v51;
        v92 = v91 + ~v50 - v90;
        if (v92 >= 0x58)
        {
          v93 = (v92 >> 3) + 1;
          v94 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          v88 = (int64x2_t *)((char *)v88 + v94 * 8);
          v89 = (char *)&v63[v94];
          v95 = v63 + 2;
          v96 = (__int128 *)(v50 + 8 * v87 + 8 * v53 + 16);
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v96;
            *(v95 - 1) = *(v96 - 1);
            *v95 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          v52 = (unint64_t)v51 - v50;
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_69;
        }
        else
        {
          v89 = (char *)v63;
        }
        do
        {
          v99 = v88->i64[0];
          v88 = (int64x2_t *)((char *)v88 + 8);
          *(_QWORD *)v89 = v99;
          v89 += 8;
        }
        while (v88 < v51);
      }
LABEL_69:
      __pa = (char *)v50;
      *(_QWORD *)(a1 + 24) = v89;
      if (v63 != v54 + 36)
      {
        v100 = (char *)(v50 + (((unint64_t)v51 - v50) & 0xFFFFFFFFFFFFFFF8));
        v101 = v42;
        v102 = (char *)v52;
        v103 = v5;
        v104 = v62;
        memmove(&v63[-v87], v100, v86);
        v62 = v104;
        v5 = v103;
        v52 = (unint64_t)v102;
        v42 = v101;
      }
      v105 = (const double *)&v122;
      if (v54 <= &v122)
      {
        v106 = 288;
        if (*(_QWORD *)(a1 + 24) <= (unint64_t)&v122)
          v106 = 0;
        v105 = (const double *)((char *)&v122 + v106);
      }
      if (v62 < 0xA)
      {
        v107 = v62;
        goto LABEL_83;
      }
      if (v54 < (uint64_t *)v105 + 1 && v105 < (const double *)&__pa[8 * v62 + (v52 & 0xFFFFFFFFFFFFFFF8)])
      {
        v107 = v62;
        do
        {
LABEL_83:
          *v54++ = *(_QWORD *)v105;
          --v107;
        }
        while (v107);
        goto LABEL_84;
      }
      v54 += v62 & 0xFFFFFFFFFFFFFFFCLL;
      v107 = v62 & 3;
      v108 = vld1q_dup_f64(v105);
      v109 = (float64x2_t *)&__pa[8 * v53 + 16];
      v110 = v62 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v109[-1] = v108;
        *v109 = v108;
        v109 += 2;
        v110 -= 4;
      }
      while (v110);
      if (v62 != (v62 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_83;
LABEL_84:
      v43 = (_OWORD *)(*(_QWORD *)(a1 + 24) - 288);
      v6 = a2;
      v7 = v116;
      v49 = v13 - v42;
      if (v13 != v42)
        goto LABEL_85;
LABEL_8:
      v14 = ((uint64_t)v43 - *(_QWORD *)(a1 + 16)) >> 3;
      *(_DWORD *)v42 = v9;
      *((_QWORD *)v42 + 1) = v14;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v7);
      v13 += 16;
      v12 = v119;
      v15 = v121;
LABEL_9:
      v16 = (__int128 *)(v15 + 8 * (v5 + 6 * v9 + (_DWORD)v40 * v120));
      v18 = v16[1];
      v17 = v16[2];
      v19 = *v16;
      v20 = (__int128 *)((char *)v16 + 8 * v40);
      v22 = v20[1];
      v21 = v20[2];
      v23 = *v20;
      v24 = &v16[v40];
      v26 = v24[1];
      v25 = v24[2];
      v27 = *v24;
      v28 = (__int128 *)((char *)v16 + 24 * v40);
      v30 = v28[1];
      v29 = v28[2];
      v31 = *v28;
      v32 = &v16[2 * v40];
      v34 = v32[1];
      v33 = v32[2];
      v35 = *v32;
      v36 = (__int128 *)((char *)v16 + 40 * v40);
      v38 = v36[1];
      v37 = v36[2];
      v39 = *v36;
      *v43 = v19;
      v43[1] = v18;
      v43[2] = v17;
      v43[3] = v23;
      v43[4] = v22;
      v43[5] = v21;
      v43[6] = v27;
      v43[7] = v26;
      v43[8] = v25;
      v43[9] = v31;
      v43[10] = v30;
      v43[11] = v29;
      v43[12] = v35;
      v43[13] = v34;
      v43[14] = v33;
      v43[15] = v39;
      v43[16] = v38;
      v43[17] = v37;
      ++v9;
      v8 = *(_DWORD *)(a1 + 8);
      if (v9 >= v8)
      {
        v3 = *(unsigned int *)(a1 + 12);
        goto LABEL_5;
      }
    }
    v66 = *(uint64_t **)(a1 + 24);
    do
LABEL_58:
      *v66++ = v122;
    while (v66 != v63);
    goto LABEL_59;
  }
}

uint64_t sub_20F5B160C(uint64_t result, unsigned int **a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  unsigned int *v15;
  int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v2 = (char *)a2[1] - (char *)*a2;
  if (v2)
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if ((_DWORD)v4)
    {
      v23 = (char *)a2[1] - (char *)*a2;
      v5 = 0;
      v6 = **a2;
      v7 = *(_QWORD *)(result + 120);
      do
      {
        v8 = *(_QWORD *)(v3 + 88);
        v9 = (*(_DWORD *)(v3 + 112) * v5);
        v10 = (unsigned int *)(v8 + 16 * v9);
        v11 = *(_QWORD *)(v7 + 8 * v5);
        if (v11)
        {
          v12 = 16 * v11;
          while (*v10 < v6)
          {
            v10 += 4;
            v12 -= 16;
            if (!v12)
              goto LABEL_4;
          }
        }
        v13 = (int *)(v8 + 16 * (v11 + v9));
        if (v10 != (unsigned int *)v13)
        {
          v14 = 0;
          v15 = *a2;
          v16 = (int *)a2[1];
          do
          {
            while (1)
            {
              v17 = *v10;
              if (v15 != (unsigned int *)v16 && v17 >= *v15)
                break;
              *v10 = v17 - v14;
              v10 += 4;
              if (v10 == (unsigned int *)v13)
                goto LABEL_4;
            }
            if (v17 == *v15)
            {
              v18 = *(_QWORD *)(v3 + 56);
              v19 = *(_QWORD *)(v3 + 48);
              v20 = ((v18 - v19) << 6) - 1;
              if (v18 == v19)
                v20 = 0;
              v21 = *(_QWORD *)(v3 + 80) + *(_QWORD *)(v3 + 72);
              if (v20 == v21)
              {
                sub_20EDB36DC(v3 + 40);
                v19 = *(_QWORD *)(v3 + 48);
                v21 = *(_QWORD *)(v3 + 80) + *(_QWORD *)(v3 + 72);
              }
              *(_QWORD *)(*(_QWORD *)(v19 + ((v21 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v21 & 0x1FF)) = *((_QWORD *)v10 + 1);
              ++*(_QWORD *)(v3 + 80);
              if (v13 != (int *)(v10 + 4))
                memmove(v10, v10 + 4, (char *)v13 - (char *)(v10 + 4));
              v13 -= 4;
              v7 = *(_QWORD *)(v3 + 120);
              --*(_QWORD *)(v7 + 8 * v5);
            }
            ++v15;
            ++v14;
          }
          while (v10 != (unsigned int *)v13);
        }
LABEL_4:
        ++v5;
      }
      while (v5 != v4);
      v22 = *(unsigned int *)(v3 + 12);
      v2 = v23;
    }
    else
    {
      v22 = 0;
    }
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 24))(v3, *(_DWORD *)(v3 + 8) - (v2 >> 2), v22);
  }
  return result;
}

void sub_20F5B1808(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_DWORD *)(a1 + 112);
  v6 = v5 * a2;
  v7 = a2;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * a2);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    v11 = *(_QWORD *)(a1 + 80);
    v12 = 16 * v8;
    v13 = (uint64_t *)(v4 + 16 * v6 + 8);
    do
    {
      if (v10 == v9)
        v15 = 0;
      else
        v15 = ((v10 - v9) << 6) - 1;
      v16 = *(_QWORD *)(a1 + 72) + v11;
      if (v15 == v16)
      {
        sub_20EDB36DC(a1 + 40);
        v9 = *(_QWORD *)(a1 + 48);
        v10 = *(_QWORD *)(a1 + 56);
        v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      }
      v14 = *v13;
      v13 += 2;
      *(_QWORD *)(*(_QWORD *)(v9 + ((v16 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v16 & 0x1FF)) = v14;
      v11 = *(_QWORD *)(a1 + 80) + 1;
      *(_QWORD *)(a1 + 80) = v11;
      v12 -= 16;
    }
    while (v12);
    v4 = *(_QWORD *)(a1 + 88);
    v5 = *(_DWORD *)(a1 + 112);
    v6 = v5 * a2;
  }
  v17 = v5 + v5 * a2;
  if ((_DWORD)v6 != v17)
  {
    v18 = v4 + 16 * v6;
    v19 = (_BYTE *)(v4 + 16 * v17);
    v20 = *(_BYTE **)(a1 + 96);
    v21 = v20 - v19;
    if (v20 != v19)
      memmove((void *)(v4 + 16 * v6), v19, v20 - v19);
    *(_QWORD *)(a1 + 96) = v18 + v21;
  }
  v22 = *(_QWORD *)(a1 + 120);
  v23 = *(_QWORD *)(a1 + 128);
  v24 = v22 + 8 * v7;
  v25 = v23 - (v24 + 8);
  if (v23 != v24 + 8)
    memmove((void *)(v22 + 8 * v7), (const void *)(v24 + 8), v23 - (v24 + 8));
  *(_QWORD *)(a1 + 128) = v24 + v25;
  --*(_DWORD *)(a1 + 12);
}

void sub_20F5B194C(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  unsigned int *v11;
  unsigned int v12;
  int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  int v22;
  int *v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  unsigned int *v29;
  unsigned int v30;
  int *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  int v40;
  int *v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  unsigned int *v47;
  unsigned int v48;
  int *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  int v58;
  int *v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  unsigned int *v65;
  unsigned int v66;
  int *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  int v76;
  int *v77;
  unsigned int v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int *v82;
  unsigned int *v83;
  unsigned int v84;
  int *v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int *v93;
  int v94;
  int *v95;
  unsigned int v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  unsigned int *v101;
  unsigned int v102;
  int *v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int *v111;
  int v112;
  int *v113;
  unsigned int v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int *v118;
  unsigned int *v119;
  unsigned int v120;
  int *v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int *v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int *v129;
  int v130;
  int *v131;
  unsigned int v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int *v136;
  unsigned int *v137;
  unsigned int v138;
  int *v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int *v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int *v147;
  int v148;
  int *v149;
  unsigned int v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int *v154;
  unsigned int *v155;
  unsigned int v156;
  int *v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int *v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int *v165;
  int v166;
  int *v167;
  unsigned int v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int *v172;
  unsigned int *v173;
  unsigned int v174;
  int *v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int *v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int *v183;
  int v184;
  int *v185;
  unsigned int v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int *v190;
  unsigned int *v191;
  unsigned int v192;
  int *v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int *v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int *v201;
  int v202;
  int *v203;
  unsigned int v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int *v208;
  unsigned int *v209;
  unsigned int v210;
  int *v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int *v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int *v219;
  int v220;
  int *v221;
  unsigned int v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int *v226;
  unsigned int *v227;
  unsigned int v228;
  int *v229;
  unsigned int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int *v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int *v237;
  int v238;
  int *v239;
  unsigned int v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int *v244;
  unsigned int *v245;
  unsigned int v246;
  int *v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unsigned int *v252;
  uint64_t v253;
  uint64_t v254;
  unsigned int *v255;
  int v256;
  int *v257;
  unsigned int v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int *v262;
  unsigned int *v263;
  unsigned int v264;
  int *v265;
  unsigned int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unsigned int *v270;
  uint64_t v271;
  uint64_t v272;
  unsigned int *v273;
  int v274;
  int *v275;
  unsigned int v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  int *v280;
  unsigned int *v281;
  unsigned int v282;
  int *v283;
  unsigned int v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unsigned int *v288;
  uint64_t v289;
  uint64_t v290;
  unsigned int *v291;
  int v292;
  int *v293;
  unsigned int v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  int *v298;
  unsigned int *v299;
  unsigned int v300;
  int *v301;
  unsigned int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unsigned int *v306;
  uint64_t v307;
  uint64_t v308;
  unsigned int *v309;
  int v310;
  int *v311;
  unsigned int v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  int *v316;
  unsigned int *v317;
  unsigned int v318;
  int *v319;
  unsigned int v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unsigned int *v324;
  uint64_t v325;
  uint64_t v326;
  unsigned int *v327;
  int v328;
  int *v329;
  unsigned int v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  int *v334;
  unsigned int *v335;
  unsigned int v336;
  int *v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unsigned int *v342;
  uint64_t v343;
  uint64_t v344;
  unsigned int *v345;
  int v346;
  int *v347;
  unsigned int v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  int *v352;
  unsigned int *v353;
  unsigned int v354;
  int *v355;
  unsigned int v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unsigned int *v360;
  uint64_t v361;
  uint64_t v362;
  unsigned int *v363;
  int v364;
  int *v365;
  unsigned int v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  int *v370;
  unsigned int *v371;
  unsigned int v372;
  int *v373;
  unsigned int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unsigned int *v378;
  uint64_t v379;
  uint64_t v380;
  unsigned int *v381;
  int v382;
  int *v383;
  unsigned int v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  int *v388;
  unsigned int *v389;
  unsigned int v390;
  int *v391;
  unsigned int v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  unsigned int *v396;
  uint64_t v397;
  uint64_t v398;
  unsigned int *v399;
  int v400;
  int *v401;
  unsigned int v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  int *v406;
  unsigned int *v407;
  unsigned int v408;
  int *v409;
  unsigned int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unsigned int *v414;
  uint64_t v415;
  uint64_t v416;
  unsigned int *v417;
  int v418;
  int *v419;
  unsigned int v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  int *v424;
  unsigned int *v425;
  unsigned int v426;
  int *v427;
  unsigned int v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  unsigned int *v432;
  uint64_t v433;
  uint64_t v434;
  unsigned int *v435;
  int v436;
  int *v437;
  unsigned int v438;
  unint64_t v439;
  uint64_t v440;
  uint64_t v441;
  int *v442;
  unsigned int *v443;
  unsigned int v444;
  int *v445;
  unsigned int v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unsigned int *v450;
  uint64_t v451;
  uint64_t v452;
  unsigned int *v453;
  int v454;
  int *v455;
  unsigned int v456;
  unint64_t v457;
  uint64_t v458;
  uint64_t v459;
  int *v460;
  unsigned int *v461;
  unsigned int v462;
  int *v463;
  unsigned int v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  unsigned int *v468;
  uint64_t v469;
  uint64_t v470;
  unsigned int *v471;
  int v472;
  int *v473;
  unsigned int v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  int *v478;
  unsigned int *v479;
  unsigned int v480;
  int *v481;
  unsigned int v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  unsigned int *v486;
  uint64_t v487;
  uint64_t v488;
  unsigned int *v489;
  int v490;
  int *v491;
  unsigned int v492;
  unint64_t v493;
  uint64_t v494;
  uint64_t v495;
  int *v496;
  unsigned int *v497;
  unsigned int v498;
  int *v499;
  unsigned int v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  unsigned int *v504;
  uint64_t v505;
  uint64_t v506;
  unsigned int *v507;
  int v508;
  int *v509;
  unsigned int v510;
  unint64_t v511;
  uint64_t v512;
  uint64_t v513;
  int *v514;
  unsigned int *v515;
  unsigned int v516;
  int *v517;
  unsigned int v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  unsigned int *v522;
  uint64_t v523;
  uint64_t v524;
  unsigned int *v525;
  int v526;
  int *v527;
  unsigned int v528;
  unint64_t v529;
  uint64_t v530;
  uint64_t v531;
  int *v532;
  unsigned int *v533;
  unsigned int v534;
  int *v535;
  unsigned int v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  unsigned int *v540;
  uint64_t v541;
  uint64_t v542;
  unsigned int *v543;
  int v544;
  int *v545;
  unsigned int v546;
  unint64_t v547;
  uint64_t v548;
  uint64_t v549;
  int *v550;
  unsigned int *v551;
  unsigned int v552;
  int *v553;
  unsigned int v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  unsigned int *v558;
  uint64_t v559;
  uint64_t v560;
  unsigned int *v561;
  int v562;
  int *v563;
  unsigned int v564;
  unint64_t v565;
  uint64_t v566;
  uint64_t v567;
  int *v568;
  unsigned int *v569;
  unsigned int v570;
  int *v571;
  unsigned int v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unsigned int *v576;
  uint64_t v577;
  uint64_t v578;
  unsigned int *v579;
  int v580;
  int *v581;
  unsigned int v582;
  unint64_t v583;
  uint64_t v584;
  uint64_t v585;
  int *v586;
  unsigned int *v587;
  unsigned int v588;
  int *v589;
  unsigned int v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  unsigned int *v594;
  uint64_t v595;
  uint64_t v596;
  unsigned int *v597;
  int v598;
  int *v599;
  unsigned int v600;
  unint64_t v601;
  uint64_t v602;
  uint64_t v603;
  int *v604;
  unsigned int *v605;
  unsigned int v606;
  int *v607;
  unsigned int v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  unsigned int *v612;
  uint64_t v613;
  uint64_t v614;
  unsigned int *v615;
  int v616;
  int *v617;
  unsigned int v618;
  unint64_t v619;
  uint64_t v620;
  uint64_t v621;
  int *v622;
  unsigned int *v623;
  unsigned int v624;
  int *v625;
  unsigned int v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  unsigned int *v630;
  uint64_t v631;
  uint64_t v632;
  unsigned int *v633;
  int v634;
  int *v635;
  unsigned int v636;
  unint64_t v637;
  uint64_t v638;
  uint64_t v639;
  int *v640;
  unsigned int *v641;
  unsigned int v642;
  int *v643;
  unsigned int v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  unsigned int *v648;
  uint64_t v649;
  uint64_t v650;
  unsigned int *v651;
  int v652;
  int *v653;
  unsigned int v654;
  unint64_t v655;
  uint64_t v656;
  uint64_t v657;
  int *v658;
  unsigned int *v659;
  unsigned int v660;
  int *v661;
  unsigned int v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  unsigned int *v666;
  uint64_t v667;
  uint64_t v668;
  unsigned int *v669;
  int v670;
  int *v671;
  unsigned int v672;
  unint64_t v673;
  uint64_t v674;
  uint64_t v675;
  int *v676;
  unsigned int *v677;
  unsigned int v678;
  int *v679;
  unsigned int v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  unsigned int *v684;
  uint64_t v685;
  uint64_t v686;
  unsigned int *v687;
  int v688;
  int *v689;
  unsigned int v690;
  unint64_t v691;
  uint64_t v692;
  uint64_t v693;
  int *v694;
  unsigned int *v695;
  unsigned int v696;
  int *v697;
  unsigned int v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  unsigned int *v702;
  uint64_t v703;
  uint64_t v704;
  unsigned int *v705;
  int v706;
  int *v707;
  unsigned int v708;
  unint64_t v709;
  uint64_t v710;
  uint64_t v711;
  int *v712;
  unsigned int *v713;
  unsigned int v714;
  int *v715;
  unsigned int v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  unsigned int *v720;
  uint64_t v721;
  uint64_t v722;
  unsigned int *v723;
  int v724;
  int *v725;
  unsigned int v726;
  unint64_t v727;
  uint64_t v728;
  uint64_t v729;
  int *v730;
  unsigned int *v731;
  unsigned int v732;
  int *v733;
  unsigned int v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  unsigned int *v738;
  uint64_t v739;
  uint64_t v740;
  unsigned int *v741;
  int v742;
  int *v743;
  unsigned int v744;
  unint64_t v745;
  uint64_t v746;
  uint64_t v747;
  int *v748;
  unsigned int *v749;
  unsigned int v750;
  int *v751;
  unsigned int v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  unsigned int *v756;
  uint64_t v757;
  uint64_t v758;
  unsigned int *v759;
  int v760;
  int *v761;
  unsigned int v762;
  unint64_t v763;
  uint64_t v764;
  uint64_t v765;
  int *v766;
  unsigned int v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  unsigned int *v772;
  uint64_t v773;
  uint64_t v774;
  unsigned int *v775;
  int v776;
  int *v777;
  unsigned int v778;
  unint64_t v779;
  uint64_t v780;
  uint64_t v781;
  int *v782;
  unsigned int v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  unsigned int *v788;
  uint64_t v789;
  uint64_t v790;
  unsigned int *v791;
  int v792;
  int *v793;
  unsigned int v794;
  unint64_t v795;
  uint64_t v796;
  uint64_t v797;
  int *v798;
  unsigned int v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  unsigned int *v804;
  uint64_t v805;
  uint64_t v806;
  unsigned int *v807;
  int v808;
  int *v809;
  unsigned int v810;
  unint64_t v811;
  uint64_t v812;
  uint64_t v813;
  int *v814;
  unsigned int v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  unsigned int *v820;
  uint64_t v821;
  uint64_t v822;
  unsigned int *v823;
  int v824;
  int *v825;
  unsigned int v826;
  unint64_t v827;
  uint64_t v828;
  uint64_t v829;
  int *v830;
  unsigned int v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  unsigned int *v836;
  uint64_t v837;
  uint64_t v838;
  unsigned int *v839;
  int v840;
  int *v841;
  unsigned int v842;
  unint64_t v843;
  uint64_t v844;
  uint64_t v845;
  int *v846;
  unsigned int v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  unsigned int *v852;
  uint64_t v853;
  uint64_t v854;
  unsigned int *v855;
  int v856;
  int *v857;
  unsigned int v858;
  unint64_t v859;
  uint64_t v860;
  uint64_t v861;
  int *v862;
  unsigned int v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  unsigned int *v868;
  uint64_t v869;
  uint64_t v870;
  unsigned int *v871;
  int v872;
  int *v873;
  unsigned int v874;

  v6 = a1 + 864;
  if (*(_QWORD *)(a1 + 872))
  {
    sub_20F5B5AD0(a1 + 864, (unsigned int **)a3);
    v7 = (char *)a2[19] - (char *)a2[18];
    if (v7)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 864) + 24))(v6, *(_DWORD *)(a1 + 872) + (v7 >> 2), *(unsigned int *)(a1 + 876));
      v8 = *(unsigned int *)(a1 + 876);
      if ((_DWORD)v8)
      {
        v9 = 0;
        v11 = a2[18];
        v10 = (int *)a2[19];
        v14 = *v11;
        v13 = (int *)(v11 + 1);
        v12 = v14;
        v15 = *(_QWORD *)(a1 + 952);
        v16 = *(_QWORD *)(a1 + 984);
        do
        {
          v17 = (*(_DWORD *)(a1 + 976) * v9);
          v18 = (unsigned int *)(v15 + 16 * v17);
          v19 = *(_QWORD *)(v16 + 8 * v9);
          if (v19)
          {
            v20 = 16 * v19;
            while (*v18 < v12)
            {
              v18 += 4;
              v20 -= 16;
              if (!v20)
                goto LABEL_6;
            }
          }
          v21 = (unsigned int *)(v15 + 16 * (v19 + v17));
          if (v18 != v21)
          {
            v22 = 1;
            v23 = v13;
            v24 = (*v18)++;
            if (v13 != v10)
              goto LABEL_17;
LABEL_14:
            v23 = v10;
            while (1)
            {
              v18 += 4;
              if (v18 == v21)
                break;
              v24 = *v18;
              *v18 += v22;
              if (v23 == v10)
                goto LABEL_14;
LABEL_17:
              while (*v23 <= v24 + v22)
              {
                *v18 = v24 + v22 + 1;
                ++v23;
                ++v22;
                if (v23 == v10)
                  goto LABEL_14;
              }
            }
          }
LABEL_6:
          ++v9;
        }
        while (v9 != v8);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v6 + 24))(a1 + 864, (unint64_t)((char *)a2[19] - (char *)a2[18]) >> 2, (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  }
  if (*(_QWORD *)(a1 + 1880))
  {
    sub_20F5B5AD0(a1 + 1872, (unsigned int **)(a3 + 24));
    v25 = (char *)a2[19] - (char *)a2[18];
    if (v25)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1872) + 24))(a1 + 1872, *(_DWORD *)(a1 + 1880) + (v25 >> 2), *(unsigned int *)(a1 + 1884));
      v26 = *(unsigned int *)(a1 + 1884);
      if ((_DWORD)v26)
      {
        v27 = 0;
        v29 = a2[18];
        v28 = (int *)a2[19];
        v32 = *v29;
        v31 = (int *)(v29 + 1);
        v30 = v32;
        v33 = *(_QWORD *)(a1 + 1960);
        v34 = *(_QWORD *)(a1 + 1992);
        do
        {
          v35 = (*(_DWORD *)(a1 + 1984) * v27);
          v36 = (unsigned int *)(v33 + 16 * v35);
          v37 = *(_QWORD *)(v34 + 8 * v27);
          if (v37)
          {
            v38 = 16 * v37;
            while (*v36 < v30)
            {
              v36 += 4;
              v38 -= 16;
              if (!v38)
                goto LABEL_25;
            }
          }
          v39 = (unsigned int *)(v33 + 16 * (v37 + v35));
          if (v36 != v39)
          {
            v40 = 1;
            v41 = v31;
            v42 = (*v36)++;
            if (v31 != v28)
              goto LABEL_36;
LABEL_33:
            v41 = v28;
            while (1)
            {
              v36 += 4;
              if (v36 == v39)
                break;
              v42 = *v36;
              *v36 += v40;
              if (v41 == v28)
                goto LABEL_33;
LABEL_36:
              while (*v41 <= v42 + v40)
              {
                *v36 = v42 + v40 + 1;
                ++v41;
                ++v40;
                if (v41 == v28)
                  goto LABEL_33;
              }
            }
          }
LABEL_25:
          ++v27;
        }
        while (v27 != v26);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 1872) + 24))(a1 + 1872, (unint64_t)((char *)a2[19] - (char *)a2[18]) >> 2, (*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
  }
  if (*(_QWORD *)(a1 + 2888))
  {
    sub_20F5B5AD0(a1 + 2880, (unsigned int **)(a3 + 48));
    v43 = (char *)a2[19] - (char *)a2[18];
    if (v43)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 2880) + 24))(a1 + 2880, *(_DWORD *)(a1 + 2888) + (v43 >> 2), *(unsigned int *)(a1 + 2892));
      v44 = *(unsigned int *)(a1 + 2892);
      if ((_DWORD)v44)
      {
        v45 = 0;
        v47 = a2[18];
        v46 = (int *)a2[19];
        v50 = *v47;
        v49 = (int *)(v47 + 1);
        v48 = v50;
        v51 = *(_QWORD *)(a1 + 2968);
        v52 = *(_QWORD *)(a1 + 3000);
        do
        {
          v53 = (*(_DWORD *)(a1 + 2992) * v45);
          v54 = (unsigned int *)(v51 + 16 * v53);
          v55 = *(_QWORD *)(v52 + 8 * v45);
          if (v55)
          {
            v56 = 16 * v55;
            while (*v54 < v48)
            {
              v54 += 4;
              v56 -= 16;
              if (!v56)
                goto LABEL_44;
            }
          }
          v57 = (unsigned int *)(v51 + 16 * (v55 + v53));
          if (v54 != v57)
          {
            v58 = 1;
            v59 = v49;
            v60 = (*v54)++;
            if (v49 != v46)
              goto LABEL_55;
LABEL_52:
            v59 = v46;
            while (1)
            {
              v54 += 4;
              if (v54 == v57)
                break;
              v60 = *v54;
              *v54 += v58;
              if (v59 == v46)
                goto LABEL_52;
LABEL_55:
              while (*v59 <= v60 + v58)
              {
                *v54 = v60 + v58 + 1;
                ++v59;
                ++v58;
                if (v59 == v46)
                  goto LABEL_52;
              }
            }
          }
LABEL_44:
          ++v45;
        }
        while (v45 != v44);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 2880) + 24))(a1 + 2880, (unint64_t)((char *)a2[19] - (char *)a2[18]) >> 2, (*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 2);
  }
  if (*(_QWORD *)(a1 + 3896))
  {
    sub_20F5B5AD0(a1 + 3888, (unsigned int **)(a3 + 72));
    v61 = (char *)a2[19] - (char *)a2[18];
    if (v61)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 3888) + 24))(a1 + 3888, *(_DWORD *)(a1 + 3896) + (v61 >> 2), *(unsigned int *)(a1 + 3900));
      v62 = *(unsigned int *)(a1 + 3900);
      if ((_DWORD)v62)
      {
        v63 = 0;
        v65 = a2[18];
        v64 = (int *)a2[19];
        v68 = *v65;
        v67 = (int *)(v65 + 1);
        v66 = v68;
        v69 = *(_QWORD *)(a1 + 3976);
        v70 = *(_QWORD *)(a1 + 4008);
        do
        {
          v71 = (*(_DWORD *)(a1 + 4000) * v63);
          v72 = (unsigned int *)(v69 + 16 * v71);
          v73 = *(_QWORD *)(v70 + 8 * v63);
          if (v73)
          {
            v74 = 16 * v73;
            while (*v72 < v66)
            {
              v72 += 4;
              v74 -= 16;
              if (!v74)
                goto LABEL_63;
            }
          }
          v75 = (unsigned int *)(v69 + 16 * (v73 + v71));
          if (v72 != v75)
          {
            v76 = 1;
            v77 = v67;
            v78 = (*v72)++;
            if (v67 != v64)
              goto LABEL_74;
LABEL_71:
            v77 = v64;
            while (1)
            {
              v72 += 4;
              if (v72 == v75)
                break;
              v78 = *v72;
              *v72 += v76;
              if (v77 == v64)
                goto LABEL_71;
LABEL_74:
              while (*v77 <= v78 + v76)
              {
                *v72 = v78 + v76 + 1;
                ++v77;
                ++v76;
                if (v77 == v64)
                  goto LABEL_71;
              }
            }
          }
LABEL_63:
          ++v63;
        }
        while (v63 != v62);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 3888) + 24))(a1 + 3888, (unint64_t)((char *)a2[19] - (char *)a2[18]) >> 2, (*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 2);
  }
  if (*(_QWORD *)(a1 + 4904))
  {
    sub_20F5B5AD0(a1 + 4896, (unsigned int **)(a3 + 96));
    v79 = (char *)a2[19] - (char *)a2[18];
    if (v79)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 4896) + 24))(a1 + 4896, *(_DWORD *)(a1 + 4904) + (v79 >> 2), *(unsigned int *)(a1 + 4908));
      v80 = *(unsigned int *)(a1 + 4908);
      if ((_DWORD)v80)
      {
        v81 = 0;
        v83 = a2[18];
        v82 = (int *)a2[19];
        v86 = *v83;
        v85 = (int *)(v83 + 1);
        v84 = v86;
        v87 = *(_QWORD *)(a1 + 4984);
        v88 = *(_QWORD *)(a1 + 5016);
        do
        {
          v89 = (*(_DWORD *)(a1 + 5008) * v81);
          v90 = (unsigned int *)(v87 + 16 * v89);
          v91 = *(_QWORD *)(v88 + 8 * v81);
          if (v91)
          {
            v92 = 16 * v91;
            while (*v90 < v84)
            {
              v90 += 4;
              v92 -= 16;
              if (!v92)
                goto LABEL_82;
            }
          }
          v93 = (unsigned int *)(v87 + 16 * (v91 + v89));
          if (v90 != v93)
          {
            v94 = 1;
            v95 = v85;
            v96 = (*v90)++;
            if (v85 != v82)
              goto LABEL_93;
LABEL_90:
            v95 = v82;
            while (1)
            {
              v90 += 4;
              if (v90 == v93)
                break;
              v96 = *v90;
              *v90 += v94;
              if (v95 == v82)
                goto LABEL_90;
LABEL_93:
              while (*v95 <= v96 + v94)
              {
                *v90 = v96 + v94 + 1;
                ++v95;
                ++v94;
                if (v95 == v82)
                  goto LABEL_90;
              }
            }
          }
LABEL_82:
          ++v81;
        }
        while (v81 != v80);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 4896) + 24))(a1 + 4896, (unint64_t)((char *)a2[19] - (char *)a2[18]) >> 2, (*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 2);
  }
  if (*(_QWORD *)(a1 + 5912))
  {
    sub_20F5B5AD0(a1 + 5904, (unsigned int **)(a3 + 120));
    v97 = (char *)a2[19] - (char *)a2[18];
    if (v97)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 5904) + 24))(a1 + 5904, *(_DWORD *)(a1 + 5912) + (v97 >> 2), *(unsigned int *)(a1 + 5916));
      v98 = *(unsigned int *)(a1 + 5916);
      if ((_DWORD)v98)
      {
        v99 = 0;
        v101 = a2[18];
        v100 = (int *)a2[19];
        v104 = *v101;
        v103 = (int *)(v101 + 1);
        v102 = v104;
        v105 = *(_QWORD *)(a1 + 5992);
        v106 = *(_QWORD *)(a1 + 6024);
        do
        {
          v107 = (*(_DWORD *)(a1 + 6016) * v99);
          v108 = (unsigned int *)(v105 + 16 * v107);
          v109 = *(_QWORD *)(v106 + 8 * v99);
          if (v109)
          {
            v110 = 16 * v109;
            while (*v108 < v102)
            {
              v108 += 4;
              v110 -= 16;
              if (!v110)
                goto LABEL_101;
            }
          }
          v111 = (unsigned int *)(v105 + 16 * (v109 + v107));
          if (v108 != v111)
          {
            v112 = 1;
            v113 = v103;
            v114 = (*v108)++;
            if (v103 != v100)
              goto LABEL_112;
LABEL_109:
            v113 = v100;
            while (1)
            {
              v108 += 4;
              if (v108 == v111)
                break;
              v114 = *v108;
              *v108 += v112;
              if (v113 == v100)
                goto LABEL_109;
LABEL_112:
              while (*v113 <= v114 + v112)
              {
                *v108 = v114 + v112 + 1;
                ++v113;
                ++v112;
                if (v113 == v100)
                  goto LABEL_109;
              }
            }
          }
LABEL_101:
          ++v99;
        }
        while (v99 != v98);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 5904) + 24))(a1 + 5904, (unint64_t)((char *)a2[19] - (char *)a2[18]) >> 2, (*(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120)) >> 2);
  }
  if (*(_QWORD *)(a1 + 6920))
  {
    sub_20F5B5AD0(a1 + 6912, (unsigned int **)(a3 + 144));
    v115 = (char *)a2[19] - (char *)a2[18];
    if (v115)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 6912) + 24))(a1 + 6912, *(_DWORD *)(a1 + 6920) + (v115 >> 2), *(unsigned int *)(a1 + 6924));
      v116 = *(unsigned int *)(a1 + 6924);
      if ((_DWORD)v116)
      {
        v117 = 0;
        v119 = a2[18];
        v118 = (int *)a2[19];
        v122 = *v119;
        v121 = (int *)(v119 + 1);
        v120 = v122;
        v123 = *(_QWORD *)(a1 + 7000);
        v124 = *(_QWORD *)(a1 + 7032);
        do
        {
          v125 = (*(_DWORD *)(a1 + 7024) * v117);
          v126 = (unsigned int *)(v123 + 16 * v125);
          v127 = *(_QWORD *)(v124 + 8 * v117);
          if (v127)
          {
            v128 = 16 * v127;
            while (*v126 < v120)
            {
              v126 += 4;
              v128 -= 16;
              if (!v128)
                goto LABEL_120;
            }
          }
          v129 = (unsigned int *)(v123 + 16 * (v127 + v125));
          if (v126 != v129)
          {
            v130 = 1;
            v131 = v121;
            v132 = (*v126)++;
            if (v121 != v118)
              goto LABEL_131;
LABEL_128:
            v131 = v118;
            while (1)
            {
              v126 += 4;
              if (v126 == v129)
                break;
              v132 = *v126;
              *v126 += v130;
              if (v131 == v118)
                goto LABEL_128;
LABEL_131:
              while (*v131 <= v132 + v130)
              {
                *v126 = v132 + v130 + 1;
                ++v131;
                ++v130;
                if (v131 == v118)
                  goto LABEL_128;
              }
            }
          }
LABEL_120:
          ++v117;
        }
        while (v117 != v116);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 6912) + 24))(a1 + 6912, (unint64_t)((char *)a2[19] - (char *)a2[18]) >> 2, (*(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144)) >> 2);
  }
  if (*(_QWORD *)(a1 + 728))
  {
    sub_20F5B5AD0(a1 + 720, (unsigned int **)a3);
    v133 = (char *)a2[16] - (char *)a2[15];
    if (v133)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 720) + 24))(a1 + 720, *(_DWORD *)(a1 + 728) + (v133 >> 2), *(unsigned int *)(a1 + 732));
      v134 = *(unsigned int *)(a1 + 732);
      if ((_DWORD)v134)
      {
        v135 = 0;
        v137 = a2[15];
        v136 = (int *)a2[16];
        v140 = *v137;
        v139 = (int *)(v137 + 1);
        v138 = v140;
        v141 = *(_QWORD *)(a1 + 808);
        v142 = *(_QWORD *)(a1 + 840);
        do
        {
          v143 = (*(_DWORD *)(a1 + 832) * v135);
          v144 = (unsigned int *)(v141 + 16 * v143);
          v145 = *(_QWORD *)(v142 + 8 * v135);
          if (v145)
          {
            v146 = 16 * v145;
            while (*v144 < v138)
            {
              v144 += 4;
              v146 -= 16;
              if (!v146)
                goto LABEL_139;
            }
          }
          v147 = (unsigned int *)(v141 + 16 * (v145 + v143));
          if (v144 != v147)
          {
            v148 = 1;
            v149 = v139;
            v150 = (*v144)++;
            if (v139 != v136)
              goto LABEL_150;
LABEL_147:
            v149 = v136;
            while (1)
            {
              v144 += 4;
              if (v144 == v147)
                break;
              v150 = *v144;
              *v144 += v148;
              if (v149 == v136)
                goto LABEL_147;
LABEL_150:
              while (*v149 <= v150 + v148)
              {
                *v144 = v150 + v148 + 1;
                ++v149;
                ++v148;
                if (v149 == v136)
                  goto LABEL_147;
              }
            }
          }
LABEL_139:
          ++v135;
        }
        while (v135 != v134);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 720) + 24))(a1 + 720, (unint64_t)((char *)a2[16] - (char *)a2[15]) >> 2, (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  }
  if (*(_QWORD *)(a1 + 1736))
  {
    sub_20F5B5AD0(a1 + 1728, (unsigned int **)(a3 + 24));
    v151 = (char *)a2[16] - (char *)a2[15];
    if (v151)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1728) + 24))(a1 + 1728, *(_DWORD *)(a1 + 1736) + (v151 >> 2), *(unsigned int *)(a1 + 1740));
      v152 = *(unsigned int *)(a1 + 1740);
      if ((_DWORD)v152)
      {
        v153 = 0;
        v155 = a2[15];
        v154 = (int *)a2[16];
        v158 = *v155;
        v157 = (int *)(v155 + 1);
        v156 = v158;
        v159 = *(_QWORD *)(a1 + 1816);
        v160 = *(_QWORD *)(a1 + 1848);
        do
        {
          v161 = (*(_DWORD *)(a1 + 1840) * v153);
          v162 = (unsigned int *)(v159 + 16 * v161);
          v163 = *(_QWORD *)(v160 + 8 * v153);
          if (v163)
          {
            v164 = 16 * v163;
            while (*v162 < v156)
            {
              v162 += 4;
              v164 -= 16;
              if (!v164)
                goto LABEL_158;
            }
          }
          v165 = (unsigned int *)(v159 + 16 * (v163 + v161));
          if (v162 != v165)
          {
            v166 = 1;
            v167 = v157;
            v168 = (*v162)++;
            if (v157 != v154)
              goto LABEL_169;
LABEL_166:
            v167 = v154;
            while (1)
            {
              v162 += 4;
              if (v162 == v165)
                break;
              v168 = *v162;
              *v162 += v166;
              if (v167 == v154)
                goto LABEL_166;
LABEL_169:
              while (*v167 <= v168 + v166)
              {
                *v162 = v168 + v166 + 1;
                ++v167;
                ++v166;
                if (v167 == v154)
                  goto LABEL_166;
              }
            }
          }
LABEL_158:
          ++v153;
        }
        while (v153 != v152);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 1728) + 24))(a1 + 1728, (unint64_t)((char *)a2[16] - (char *)a2[15]) >> 2, (*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
  }
  if (*(_QWORD *)(a1 + 2744))
  {
    sub_20F5B5AD0(a1 + 2736, (unsigned int **)(a3 + 48));
    v169 = (char *)a2[16] - (char *)a2[15];
    if (v169)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 2736) + 24))(a1 + 2736, *(_DWORD *)(a1 + 2744) + (v169 >> 2), *(unsigned int *)(a1 + 2748));
      v170 = *(unsigned int *)(a1 + 2748);
      if ((_DWORD)v170)
      {
        v171 = 0;
        v173 = a2[15];
        v172 = (int *)a2[16];
        v176 = *v173;
        v175 = (int *)(v173 + 1);
        v174 = v176;
        v177 = *(_QWORD *)(a1 + 2824);
        v178 = *(_QWORD *)(a1 + 2856);
        do
        {
          v179 = (*(_DWORD *)(a1 + 2848) * v171);
          v180 = (unsigned int *)(v177 + 16 * v179);
          v181 = *(_QWORD *)(v178 + 8 * v171);
          if (v181)
          {
            v182 = 16 * v181;
            while (*v180 < v174)
            {
              v180 += 4;
              v182 -= 16;
              if (!v182)
                goto LABEL_177;
            }
          }
          v183 = (unsigned int *)(v177 + 16 * (v181 + v179));
          if (v180 != v183)
          {
            v184 = 1;
            v185 = v175;
            v186 = (*v180)++;
            if (v175 != v172)
              goto LABEL_188;
LABEL_185:
            v185 = v172;
            while (1)
            {
              v180 += 4;
              if (v180 == v183)
                break;
              v186 = *v180;
              *v180 += v184;
              if (v185 == v172)
                goto LABEL_185;
LABEL_188:
              while (*v185 <= v186 + v184)
              {
                *v180 = v186 + v184 + 1;
                ++v185;
                ++v184;
                if (v185 == v172)
                  goto LABEL_185;
              }
            }
          }
LABEL_177:
          ++v171;
        }
        while (v171 != v170);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 2736) + 24))(a1 + 2736, (unint64_t)((char *)a2[16] - (char *)a2[15]) >> 2, (*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 2);
  }
  if (*(_QWORD *)(a1 + 3752))
  {
    sub_20F5B5AD0(a1 + 3744, (unsigned int **)(a3 + 72));
    v187 = (char *)a2[16] - (char *)a2[15];
    if (v187)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 3744) + 24))(a1 + 3744, *(_DWORD *)(a1 + 3752) + (v187 >> 2), *(unsigned int *)(a1 + 3756));
      v188 = *(unsigned int *)(a1 + 3756);
      if ((_DWORD)v188)
      {
        v189 = 0;
        v191 = a2[15];
        v190 = (int *)a2[16];
        v194 = *v191;
        v193 = (int *)(v191 + 1);
        v192 = v194;
        v195 = *(_QWORD *)(a1 + 3832);
        v196 = *(_QWORD *)(a1 + 3864);
        do
        {
          v197 = (*(_DWORD *)(a1 + 3856) * v189);
          v198 = (unsigned int *)(v195 + 16 * v197);
          v199 = *(_QWORD *)(v196 + 8 * v189);
          if (v199)
          {
            v200 = 16 * v199;
            while (*v198 < v192)
            {
              v198 += 4;
              v200 -= 16;
              if (!v200)
                goto LABEL_196;
            }
          }
          v201 = (unsigned int *)(v195 + 16 * (v199 + v197));
          if (v198 != v201)
          {
            v202 = 1;
            v203 = v193;
            v204 = (*v198)++;
            if (v193 != v190)
              goto LABEL_207;
LABEL_204:
            v203 = v190;
            while (1)
            {
              v198 += 4;
              if (v198 == v201)
                break;
              v204 = *v198;
              *v198 += v202;
              if (v203 == v190)
                goto LABEL_204;
LABEL_207:
              while (*v203 <= v204 + v202)
              {
                *v198 = v204 + v202 + 1;
                ++v203;
                ++v202;
                if (v203 == v190)
                  goto LABEL_204;
              }
            }
          }
LABEL_196:
          ++v189;
        }
        while (v189 != v188);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 3744) + 24))(a1 + 3744, (unint64_t)((char *)a2[16] - (char *)a2[15]) >> 2, (*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 2);
  }
  if (*(_QWORD *)(a1 + 4760))
  {
    sub_20F5B5AD0(a1 + 4752, (unsigned int **)(a3 + 96));
    v205 = (char *)a2[16] - (char *)a2[15];
    if (v205)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 4752) + 24))(a1 + 4752, *(_DWORD *)(a1 + 4760) + (v205 >> 2), *(unsigned int *)(a1 + 4764));
      v206 = *(unsigned int *)(a1 + 4764);
      if ((_DWORD)v206)
      {
        v207 = 0;
        v209 = a2[15];
        v208 = (int *)a2[16];
        v212 = *v209;
        v211 = (int *)(v209 + 1);
        v210 = v212;
        v213 = *(_QWORD *)(a1 + 4840);
        v214 = *(_QWORD *)(a1 + 4872);
        do
        {
          v215 = (*(_DWORD *)(a1 + 4864) * v207);
          v216 = (unsigned int *)(v213 + 16 * v215);
          v217 = *(_QWORD *)(v214 + 8 * v207);
          if (v217)
          {
            v218 = 16 * v217;
            while (*v216 < v210)
            {
              v216 += 4;
              v218 -= 16;
              if (!v218)
                goto LABEL_215;
            }
          }
          v219 = (unsigned int *)(v213 + 16 * (v217 + v215));
          if (v216 != v219)
          {
            v220 = 1;
            v221 = v211;
            v222 = (*v216)++;
            if (v211 != v208)
              goto LABEL_226;
LABEL_223:
            v221 = v208;
            while (1)
            {
              v216 += 4;
              if (v216 == v219)
                break;
              v222 = *v216;
              *v216 += v220;
              if (v221 == v208)
                goto LABEL_223;
LABEL_226:
              while (*v221 <= v222 + v220)
              {
                *v216 = v222 + v220 + 1;
                ++v221;
                ++v220;
                if (v221 == v208)
                  goto LABEL_223;
              }
            }
          }
LABEL_215:
          ++v207;
        }
        while (v207 != v206);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 4752) + 24))(a1 + 4752, (unint64_t)((char *)a2[16] - (char *)a2[15]) >> 2, (*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 2);
  }
  if (*(_QWORD *)(a1 + 5768))
  {
    sub_20F5B5AD0(a1 + 5760, (unsigned int **)(a3 + 120));
    v223 = (char *)a2[16] - (char *)a2[15];
    if (v223)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 5760) + 24))(a1 + 5760, *(_DWORD *)(a1 + 5768) + (v223 >> 2), *(unsigned int *)(a1 + 5772));
      v224 = *(unsigned int *)(a1 + 5772);
      if ((_DWORD)v224)
      {
        v225 = 0;
        v227 = a2[15];
        v226 = (int *)a2[16];
        v230 = *v227;
        v229 = (int *)(v227 + 1);
        v228 = v230;
        v231 = *(_QWORD *)(a1 + 5848);
        v232 = *(_QWORD *)(a1 + 5880);
        do
        {
          v233 = (*(_DWORD *)(a1 + 5872) * v225);
          v234 = (unsigned int *)(v231 + 16 * v233);
          v235 = *(_QWORD *)(v232 + 8 * v225);
          if (v235)
          {
            v236 = 16 * v235;
            while (*v234 < v228)
            {
              v234 += 4;
              v236 -= 16;
              if (!v236)
                goto LABEL_234;
            }
          }
          v237 = (unsigned int *)(v231 + 16 * (v235 + v233));
          if (v234 != v237)
          {
            v238 = 1;
            v239 = v229;
            v240 = (*v234)++;
            if (v229 != v226)
              goto LABEL_245;
LABEL_242:
            v239 = v226;
            while (1)
            {
              v234 += 4;
              if (v234 == v237)
                break;
              v240 = *v234;
              *v234 += v238;
              if (v239 == v226)
                goto LABEL_242;
LABEL_245:
              while (*v239 <= v240 + v238)
              {
                *v234 = v240 + v238 + 1;
                ++v239;
                ++v238;
                if (v239 == v226)
                  goto LABEL_242;
              }
            }
          }
LABEL_234:
          ++v225;
        }
        while (v225 != v224);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 5760) + 24))(a1 + 5760, (unint64_t)((char *)a2[16] - (char *)a2[15]) >> 2, (*(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120)) >> 2);
  }
  if (*(_QWORD *)(a1 + 6776))
  {
    sub_20F5B5AD0(a1 + 6768, (unsigned int **)(a3 + 144));
    v241 = (char *)a2[16] - (char *)a2[15];
    if (v241)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 6768) + 24))(a1 + 6768, *(_DWORD *)(a1 + 6776) + (v241 >> 2), *(unsigned int *)(a1 + 6780));
      v242 = *(unsigned int *)(a1 + 6780);
      if ((_DWORD)v242)
      {
        v243 = 0;
        v245 = a2[15];
        v244 = (int *)a2[16];
        v248 = *v245;
        v247 = (int *)(v245 + 1);
        v246 = v248;
        v249 = *(_QWORD *)(a1 + 6856);
        v250 = *(_QWORD *)(a1 + 6888);
        do
        {
          v251 = (*(_DWORD *)(a1 + 6880) * v243);
          v252 = (unsigned int *)(v249 + 16 * v251);
          v253 = *(_QWORD *)(v250 + 8 * v243);
          if (v253)
          {
            v254 = 16 * v253;
            while (*v252 < v246)
            {
              v252 += 4;
              v254 -= 16;
              if (!v254)
                goto LABEL_253;
            }
          }
          v255 = (unsigned int *)(v249 + 16 * (v253 + v251));
          if (v252 != v255)
          {
            v256 = 1;
            v257 = v247;
            v258 = (*v252)++;
            if (v247 != v244)
              goto LABEL_264;
LABEL_261:
            v257 = v244;
            while (1)
            {
              v252 += 4;
              if (v252 == v255)
                break;
              v258 = *v252;
              *v252 += v256;
              if (v257 == v244)
                goto LABEL_261;
LABEL_264:
              while (*v257 <= v258 + v256)
              {
                *v252 = v258 + v256 + 1;
                ++v257;
                ++v256;
                if (v257 == v244)
                  goto LABEL_261;
              }
            }
          }
LABEL_253:
          ++v243;
        }
        while (v243 != v242);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 6768) + 24))(a1 + 6768, (unint64_t)((char *)a2[16] - (char *)a2[15]) >> 2, (*(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144)) >> 2);
  }
  if (*(_QWORD *)(a1 + 584))
  {
    sub_20F5B5AD0(a1 + 576, (unsigned int **)a3);
    v259 = (char *)a2[13] - (char *)a2[12];
    if (v259)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 576) + 24))(a1 + 576, *(_DWORD *)(a1 + 584) + (v259 >> 2), *(unsigned int *)(a1 + 588));
      v260 = *(unsigned int *)(a1 + 588);
      if ((_DWORD)v260)
      {
        v261 = 0;
        v263 = a2[12];
        v262 = (int *)a2[13];
        v266 = *v263;
        v265 = (int *)(v263 + 1);
        v264 = v266;
        v267 = *(_QWORD *)(a1 + 664);
        v268 = *(_QWORD *)(a1 + 696);
        do
        {
          v269 = (*(_DWORD *)(a1 + 688) * v261);
          v270 = (unsigned int *)(v267 + 16 * v269);
          v271 = *(_QWORD *)(v268 + 8 * v261);
          if (v271)
          {
            v272 = 16 * v271;
            while (*v270 < v264)
            {
              v270 += 4;
              v272 -= 16;
              if (!v272)
                goto LABEL_272;
            }
          }
          v273 = (unsigned int *)(v267 + 16 * (v271 + v269));
          if (v270 != v273)
          {
            v274 = 1;
            v275 = v265;
            v276 = (*v270)++;
            if (v265 != v262)
              goto LABEL_283;
LABEL_280:
            v275 = v262;
            while (1)
            {
              v270 += 4;
              if (v270 == v273)
                break;
              v276 = *v270;
              *v270 += v274;
              if (v275 == v262)
                goto LABEL_280;
LABEL_283:
              while (*v275 <= v276 + v274)
              {
                *v270 = v276 + v274 + 1;
                ++v275;
                ++v274;
                if (v275 == v262)
                  goto LABEL_280;
              }
            }
          }
LABEL_272:
          ++v261;
        }
        while (v261 != v260);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 576) + 24))(a1 + 576, (unint64_t)((char *)a2[13] - (char *)a2[12]) >> 2, (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  }
  if (*(_QWORD *)(a1 + 1592))
  {
    sub_20F5B5AD0(a1 + 1584, (unsigned int **)(a3 + 24));
    v277 = (char *)a2[13] - (char *)a2[12];
    if (v277)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1584) + 24))(a1 + 1584, *(_DWORD *)(a1 + 1592) + (v277 >> 2), *(unsigned int *)(a1 + 1596));
      v278 = *(unsigned int *)(a1 + 1596);
      if ((_DWORD)v278)
      {
        v279 = 0;
        v281 = a2[12];
        v280 = (int *)a2[13];
        v284 = *v281;
        v283 = (int *)(v281 + 1);
        v282 = v284;
        v285 = *(_QWORD *)(a1 + 1672);
        v286 = *(_QWORD *)(a1 + 1704);
        do
        {
          v287 = (*(_DWORD *)(a1 + 1696) * v279);
          v288 = (unsigned int *)(v285 + 16 * v287);
          v289 = *(_QWORD *)(v286 + 8 * v279);
          if (v289)
          {
            v290 = 16 * v289;
            while (*v288 < v282)
            {
              v288 += 4;
              v290 -= 16;
              if (!v290)
                goto LABEL_291;
            }
          }
          v291 = (unsigned int *)(v285 + 16 * (v289 + v287));
          if (v288 != v291)
          {
            v292 = 1;
            v293 = v283;
            v294 = (*v288)++;
            if (v283 != v280)
              goto LABEL_302;
LABEL_299:
            v293 = v280;
            while (1)
            {
              v288 += 4;
              if (v288 == v291)
                break;
              v294 = *v288;
              *v288 += v292;
              if (v293 == v280)
                goto LABEL_299;
LABEL_302:
              while (*v293 <= v294 + v292)
              {
                *v288 = v294 + v292 + 1;
                ++v293;
                ++v292;
                if (v293 == v280)
                  goto LABEL_299;
              }
            }
          }
LABEL_291:
          ++v279;
        }
        while (v279 != v278);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 1584) + 24))(a1 + 1584, (unint64_t)((char *)a2[13] - (char *)a2[12]) >> 2, (*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
  }
  if (*(_QWORD *)(a1 + 2600))
  {
    sub_20F5B5AD0(a1 + 2592, (unsigned int **)(a3 + 48));
    v295 = (char *)a2[13] - (char *)a2[12];
    if (v295)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 2592) + 24))(a1 + 2592, *(_DWORD *)(a1 + 2600) + (v295 >> 2), *(unsigned int *)(a1 + 2604));
      v296 = *(unsigned int *)(a1 + 2604);
      if ((_DWORD)v296)
      {
        v297 = 0;
        v299 = a2[12];
        v298 = (int *)a2[13];
        v302 = *v299;
        v301 = (int *)(v299 + 1);
        v300 = v302;
        v303 = *(_QWORD *)(a1 + 2680);
        v304 = *(_QWORD *)(a1 + 2712);
        do
        {
          v305 = (*(_DWORD *)(a1 + 2704) * v297);
          v306 = (unsigned int *)(v303 + 16 * v305);
          v307 = *(_QWORD *)(v304 + 8 * v297);
          if (v307)
          {
            v308 = 16 * v307;
            while (*v306 < v300)
            {
              v306 += 4;
              v308 -= 16;
              if (!v308)
                goto LABEL_310;
            }
          }
          v309 = (unsigned int *)(v303 + 16 * (v307 + v305));
          if (v306 != v309)
          {
            v310 = 1;
            v311 = v301;
            v312 = (*v306)++;
            if (v301 != v298)
              goto LABEL_321;
LABEL_318:
            v311 = v298;
            while (1)
            {
              v306 += 4;
              if (v306 == v309)
                break;
              v312 = *v306;
              *v306 += v310;
              if (v311 == v298)
                goto LABEL_318;
LABEL_321:
              while (*v311 <= v312 + v310)
              {
                *v306 = v312 + v310 + 1;
                ++v311;
                ++v310;
                if (v311 == v298)
                  goto LABEL_318;
              }
            }
          }
LABEL_310:
          ++v297;
        }
        while (v297 != v296);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 2592) + 24))(a1 + 2592, (unint64_t)((char *)a2[13] - (char *)a2[12]) >> 2, (*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 2);
  }
  if (*(_QWORD *)(a1 + 3608))
  {
    sub_20F5B5AD0(a1 + 3600, (unsigned int **)(a3 + 72));
    v313 = (char *)a2[13] - (char *)a2[12];
    if (v313)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 3600) + 24))(a1 + 3600, *(_DWORD *)(a1 + 3608) + (v313 >> 2), *(unsigned int *)(a1 + 3612));
      v314 = *(unsigned int *)(a1 + 3612);
      if ((_DWORD)v314)
      {
        v315 = 0;
        v317 = a2[12];
        v316 = (int *)a2[13];
        v320 = *v317;
        v319 = (int *)(v317 + 1);
        v318 = v320;
        v321 = *(_QWORD *)(a1 + 3688);
        v322 = *(_QWORD *)(a1 + 3720);
        do
        {
          v323 = (*(_DWORD *)(a1 + 3712) * v315);
          v324 = (unsigned int *)(v321 + 16 * v323);
          v325 = *(_QWORD *)(v322 + 8 * v315);
          if (v325)
          {
            v326 = 16 * v325;
            while (*v324 < v318)
            {
              v324 += 4;
              v326 -= 16;
              if (!v326)
                goto LABEL_329;
            }
          }
          v327 = (unsigned int *)(v321 + 16 * (v325 + v323));
          if (v324 != v327)
          {
            v328 = 1;
            v329 = v319;
            v330 = (*v324)++;
            if (v319 != v316)
              goto LABEL_340;
LABEL_337:
            v329 = v316;
            while (1)
            {
              v324 += 4;
              if (v324 == v327)
                break;
              v330 = *v324;
              *v324 += v328;
              if (v329 == v316)
                goto LABEL_337;
LABEL_340:
              while (*v329 <= v330 + v328)
              {
                *v324 = v330 + v328 + 1;
                ++v329;
                ++v328;
                if (v329 == v316)
                  goto LABEL_337;
              }
            }
          }
LABEL_329:
          ++v315;
        }
        while (v315 != v314);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 3600) + 24))(a1 + 3600, (unint64_t)((char *)a2[13] - (char *)a2[12]) >> 2, (*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 2);
  }
  if (*(_QWORD *)(a1 + 4616))
  {
    sub_20F5B5AD0(a1 + 4608, (unsigned int **)(a3 + 96));
    v331 = (char *)a2[13] - (char *)a2[12];
    if (v331)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 4608) + 24))(a1 + 4608, *(_DWORD *)(a1 + 4616) + (v331 >> 2), *(unsigned int *)(a1 + 4620));
      v332 = *(unsigned int *)(a1 + 4620);
      if ((_DWORD)v332)
      {
        v333 = 0;
        v335 = a2[12];
        v334 = (int *)a2[13];
        v338 = *v335;
        v337 = (int *)(v335 + 1);
        v336 = v338;
        v339 = *(_QWORD *)(a1 + 4696);
        v340 = *(_QWORD *)(a1 + 4728);
        do
        {
          v341 = (*(_DWORD *)(a1 + 4720) * v333);
          v342 = (unsigned int *)(v339 + 16 * v341);
          v343 = *(_QWORD *)(v340 + 8 * v333);
          if (v343)
          {
            v344 = 16 * v343;
            while (*v342 < v336)
            {
              v342 += 4;
              v344 -= 16;
              if (!v344)
                goto LABEL_348;
            }
          }
          v345 = (unsigned int *)(v339 + 16 * (v343 + v341));
          if (v342 != v345)
          {
            v346 = 1;
            v347 = v337;
            v348 = (*v342)++;
            if (v337 != v334)
              goto LABEL_359;
LABEL_356:
            v347 = v334;
            while (1)
            {
              v342 += 4;
              if (v342 == v345)
                break;
              v348 = *v342;
              *v342 += v346;
              if (v347 == v334)
                goto LABEL_356;
LABEL_359:
              while (*v347 <= v348 + v346)
              {
                *v342 = v348 + v346 + 1;
                ++v347;
                ++v346;
                if (v347 == v334)
                  goto LABEL_356;
              }
            }
          }
LABEL_348:
          ++v333;
        }
        while (v333 != v332);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 4608) + 24))(a1 + 4608, (unint64_t)((char *)a2[13] - (char *)a2[12]) >> 2, (*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 2);
  }
  if (*(_QWORD *)(a1 + 5624))
  {
    sub_20F5B5AD0(a1 + 5616, (unsigned int **)(a3 + 120));
    v349 = (char *)a2[13] - (char *)a2[12];
    if (v349)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 5616) + 24))(a1 + 5616, *(_DWORD *)(a1 + 5624) + (v349 >> 2), *(unsigned int *)(a1 + 5628));
      v350 = *(unsigned int *)(a1 + 5628);
      if ((_DWORD)v350)
      {
        v351 = 0;
        v353 = a2[12];
        v352 = (int *)a2[13];
        v356 = *v353;
        v355 = (int *)(v353 + 1);
        v354 = v356;
        v357 = *(_QWORD *)(a1 + 5704);
        v358 = *(_QWORD *)(a1 + 5736);
        do
        {
          v359 = (*(_DWORD *)(a1 + 5728) * v351);
          v360 = (unsigned int *)(v357 + 16 * v359);
          v361 = *(_QWORD *)(v358 + 8 * v351);
          if (v361)
          {
            v362 = 16 * v361;
            while (*v360 < v354)
            {
              v360 += 4;
              v362 -= 16;
              if (!v362)
                goto LABEL_367;
            }
          }
          v363 = (unsigned int *)(v357 + 16 * (v361 + v359));
          if (v360 != v363)
          {
            v364 = 1;
            v365 = v355;
            v366 = (*v360)++;
            if (v355 != v352)
              goto LABEL_378;
LABEL_375:
            v365 = v352;
            while (1)
            {
              v360 += 4;
              if (v360 == v363)
                break;
              v366 = *v360;
              *v360 += v364;
              if (v365 == v352)
                goto LABEL_375;
LABEL_378:
              while (*v365 <= v366 + v364)
              {
                *v360 = v366 + v364 + 1;
                ++v365;
                ++v364;
                if (v365 == v352)
                  goto LABEL_375;
              }
            }
          }
LABEL_367:
          ++v351;
        }
        while (v351 != v350);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 5616) + 24))(a1 + 5616, (unint64_t)((char *)a2[13] - (char *)a2[12]) >> 2, (*(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120)) >> 2);
  }
  if (*(_QWORD *)(a1 + 6632))
  {
    sub_20F5B5AD0(a1 + 6624, (unsigned int **)(a3 + 144));
    v367 = (char *)a2[13] - (char *)a2[12];
    if (v367)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 6624) + 24))(a1 + 6624, *(_DWORD *)(a1 + 6632) + (v367 >> 2), *(unsigned int *)(a1 + 6636));
      v368 = *(unsigned int *)(a1 + 6636);
      if ((_DWORD)v368)
      {
        v369 = 0;
        v371 = a2[12];
        v370 = (int *)a2[13];
        v374 = *v371;
        v373 = (int *)(v371 + 1);
        v372 = v374;
        v375 = *(_QWORD *)(a1 + 6712);
        v376 = *(_QWORD *)(a1 + 6744);
        do
        {
          v377 = (*(_DWORD *)(a1 + 6736) * v369);
          v378 = (unsigned int *)(v375 + 16 * v377);
          v379 = *(_QWORD *)(v376 + 8 * v369);
          if (v379)
          {
            v380 = 16 * v379;
            while (*v378 < v372)
            {
              v378 += 4;
              v380 -= 16;
              if (!v380)
                goto LABEL_386;
            }
          }
          v381 = (unsigned int *)(v375 + 16 * (v379 + v377));
          if (v378 != v381)
          {
            v382 = 1;
            v383 = v373;
            v384 = (*v378)++;
            if (v373 != v370)
              goto LABEL_397;
LABEL_394:
            v383 = v370;
            while (1)
            {
              v378 += 4;
              if (v378 == v381)
                break;
              v384 = *v378;
              *v378 += v382;
              if (v383 == v370)
                goto LABEL_394;
LABEL_397:
              while (*v383 <= v384 + v382)
              {
                *v378 = v384 + v382 + 1;
                ++v383;
                ++v382;
                if (v383 == v370)
                  goto LABEL_394;
              }
            }
          }
LABEL_386:
          ++v369;
        }
        while (v369 != v368);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 6624) + 24))(a1 + 6624, (unint64_t)((char *)a2[13] - (char *)a2[12]) >> 2, (*(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144)) >> 2);
  }
  if (*(_QWORD *)(a1 + 440))
  {
    sub_20F5B5AD0(a1 + 432, (unsigned int **)a3);
    v385 = (char *)a2[10] - (char *)a2[9];
    if (v385)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 432) + 24))(a1 + 432, *(_DWORD *)(a1 + 440) + (v385 >> 2), *(unsigned int *)(a1 + 444));
      v386 = *(unsigned int *)(a1 + 444);
      if ((_DWORD)v386)
      {
        v387 = 0;
        v389 = a2[9];
        v388 = (int *)a2[10];
        v392 = *v389;
        v391 = (int *)(v389 + 1);
        v390 = v392;
        v393 = *(_QWORD *)(a1 + 520);
        v394 = *(_QWORD *)(a1 + 552);
        do
        {
          v395 = (*(_DWORD *)(a1 + 544) * v387);
          v396 = (unsigned int *)(v393 + 16 * v395);
          v397 = *(_QWORD *)(v394 + 8 * v387);
          if (v397)
          {
            v398 = 16 * v397;
            while (*v396 < v390)
            {
              v396 += 4;
              v398 -= 16;
              if (!v398)
                goto LABEL_405;
            }
          }
          v399 = (unsigned int *)(v393 + 16 * (v397 + v395));
          if (v396 != v399)
          {
            v400 = 1;
            v401 = v391;
            v402 = (*v396)++;
            if (v391 != v388)
              goto LABEL_416;
LABEL_413:
            v401 = v388;
            while (1)
            {
              v396 += 4;
              if (v396 == v399)
                break;
              v402 = *v396;
              *v396 += v400;
              if (v401 == v388)
                goto LABEL_413;
LABEL_416:
              while (*v401 <= v402 + v400)
              {
                *v396 = v402 + v400 + 1;
                ++v401;
                ++v400;
                if (v401 == v388)
                  goto LABEL_413;
              }
            }
          }
LABEL_405:
          ++v387;
        }
        while (v387 != v386);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 432) + 24))(a1 + 432, (unint64_t)((char *)a2[10] - (char *)a2[9]) >> 2, (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  }
  if (*(_QWORD *)(a1 + 1448))
  {
    sub_20F5B5AD0(a1 + 1440, (unsigned int **)(a3 + 24));
    v403 = (char *)a2[10] - (char *)a2[9];
    if (v403)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1440) + 24))(a1 + 1440, *(_DWORD *)(a1 + 1448) + (v403 >> 2), *(unsigned int *)(a1 + 1452));
      v404 = *(unsigned int *)(a1 + 1452);
      if ((_DWORD)v404)
      {
        v405 = 0;
        v407 = a2[9];
        v406 = (int *)a2[10];
        v410 = *v407;
        v409 = (int *)(v407 + 1);
        v408 = v410;
        v411 = *(_QWORD *)(a1 + 1528);
        v412 = *(_QWORD *)(a1 + 1560);
        do
        {
          v413 = (*(_DWORD *)(a1 + 1552) * v405);
          v414 = (unsigned int *)(v411 + 16 * v413);
          v415 = *(_QWORD *)(v412 + 8 * v405);
          if (v415)
          {
            v416 = 16 * v415;
            while (*v414 < v408)
            {
              v414 += 4;
              v416 -= 16;
              if (!v416)
                goto LABEL_424;
            }
          }
          v417 = (unsigned int *)(v411 + 16 * (v415 + v413));
          if (v414 != v417)
          {
            v418 = 1;
            v419 = v409;
            v420 = (*v414)++;
            if (v409 != v406)
              goto LABEL_435;
LABEL_432:
            v419 = v406;
            while (1)
            {
              v414 += 4;
              if (v414 == v417)
                break;
              v420 = *v414;
              *v414 += v418;
              if (v419 == v406)
                goto LABEL_432;
LABEL_435:
              while (*v419 <= v420 + v418)
              {
                *v414 = v420 + v418 + 1;
                ++v419;
                ++v418;
                if (v419 == v406)
                  goto LABEL_432;
              }
            }
          }
LABEL_424:
          ++v405;
        }
        while (v405 != v404);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 1440) + 24))(a1 + 1440, (unint64_t)((char *)a2[10] - (char *)a2[9]) >> 2, (*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
  }
  if (*(_QWORD *)(a1 + 2456))
  {
    sub_20F5B5AD0(a1 + 2448, (unsigned int **)(a3 + 48));
    v421 = (char *)a2[10] - (char *)a2[9];
    if (v421)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 2448) + 24))(a1 + 2448, *(_DWORD *)(a1 + 2456) + (v421 >> 2), *(unsigned int *)(a1 + 2460));
      v422 = *(unsigned int *)(a1 + 2460);
      if ((_DWORD)v422)
      {
        v423 = 0;
        v425 = a2[9];
        v424 = (int *)a2[10];
        v428 = *v425;
        v427 = (int *)(v425 + 1);
        v426 = v428;
        v429 = *(_QWORD *)(a1 + 2536);
        v430 = *(_QWORD *)(a1 + 2568);
        do
        {
          v431 = (*(_DWORD *)(a1 + 2560) * v423);
          v432 = (unsigned int *)(v429 + 16 * v431);
          v433 = *(_QWORD *)(v430 + 8 * v423);
          if (v433)
          {
            v434 = 16 * v433;
            while (*v432 < v426)
            {
              v432 += 4;
              v434 -= 16;
              if (!v434)
                goto LABEL_443;
            }
          }
          v435 = (unsigned int *)(v429 + 16 * (v433 + v431));
          if (v432 != v435)
          {
            v436 = 1;
            v437 = v427;
            v438 = (*v432)++;
            if (v427 != v424)
              goto LABEL_454;
LABEL_451:
            v437 = v424;
            while (1)
            {
              v432 += 4;
              if (v432 == v435)
                break;
              v438 = *v432;
              *v432 += v436;
              if (v437 == v424)
                goto LABEL_451;
LABEL_454:
              while (*v437 <= v438 + v436)
              {
                *v432 = v438 + v436 + 1;
                ++v437;
                ++v436;
                if (v437 == v424)
                  goto LABEL_451;
              }
            }
          }
LABEL_443:
          ++v423;
        }
        while (v423 != v422);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 2448) + 24))(a1 + 2448, (unint64_t)((char *)a2[10] - (char *)a2[9]) >> 2, (*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 2);
  }
  if (*(_QWORD *)(a1 + 3464))
  {
    sub_20F5B5AD0(a1 + 3456, (unsigned int **)(a3 + 72));
    v439 = (char *)a2[10] - (char *)a2[9];
    if (v439)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 3456) + 24))(a1 + 3456, *(_DWORD *)(a1 + 3464) + (v439 >> 2), *(unsigned int *)(a1 + 3468));
      v440 = *(unsigned int *)(a1 + 3468);
      if ((_DWORD)v440)
      {
        v441 = 0;
        v443 = a2[9];
        v442 = (int *)a2[10];
        v446 = *v443;
        v445 = (int *)(v443 + 1);
        v444 = v446;
        v447 = *(_QWORD *)(a1 + 3544);
        v448 = *(_QWORD *)(a1 + 3576);
        do
        {
          v449 = (*(_DWORD *)(a1 + 3568) * v441);
          v450 = (unsigned int *)(v447 + 16 * v449);
          v451 = *(_QWORD *)(v448 + 8 * v441);
          if (v451)
          {
            v452 = 16 * v451;
            while (*v450 < v444)
            {
              v450 += 4;
              v452 -= 16;
              if (!v452)
                goto LABEL_462;
            }
          }
          v453 = (unsigned int *)(v447 + 16 * (v451 + v449));
          if (v450 != v453)
          {
            v454 = 1;
            v455 = v445;
            v456 = (*v450)++;
            if (v445 != v442)
              goto LABEL_473;
LABEL_470:
            v455 = v442;
            while (1)
            {
              v450 += 4;
              if (v450 == v453)
                break;
              v456 = *v450;
              *v450 += v454;
              if (v455 == v442)
                goto LABEL_470;
LABEL_473:
              while (*v455 <= v456 + v454)
              {
                *v450 = v456 + v454 + 1;
                ++v455;
                ++v454;
                if (v455 == v442)
                  goto LABEL_470;
              }
            }
          }
LABEL_462:
          ++v441;
        }
        while (v441 != v440);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 3456) + 24))(a1 + 3456, (unint64_t)((char *)a2[10] - (char *)a2[9]) >> 2, (*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 2);
  }
  if (*(_QWORD *)(a1 + 4472))
  {
    sub_20F5B5AD0(a1 + 4464, (unsigned int **)(a3 + 96));
    v457 = (char *)a2[10] - (char *)a2[9];
    if (v457)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 4464) + 24))(a1 + 4464, *(_DWORD *)(a1 + 4472) + (v457 >> 2), *(unsigned int *)(a1 + 4476));
      v458 = *(unsigned int *)(a1 + 4476);
      if ((_DWORD)v458)
      {
        v459 = 0;
        v461 = a2[9];
        v460 = (int *)a2[10];
        v464 = *v461;
        v463 = (int *)(v461 + 1);
        v462 = v464;
        v465 = *(_QWORD *)(a1 + 4552);
        v466 = *(_QWORD *)(a1 + 4584);
        do
        {
          v467 = (*(_DWORD *)(a1 + 4576) * v459);
          v468 = (unsigned int *)(v465 + 16 * v467);
          v469 = *(_QWORD *)(v466 + 8 * v459);
          if (v469)
          {
            v470 = 16 * v469;
            while (*v468 < v462)
            {
              v468 += 4;
              v470 -= 16;
              if (!v470)
                goto LABEL_481;
            }
          }
          v471 = (unsigned int *)(v465 + 16 * (v469 + v467));
          if (v468 != v471)
          {
            v472 = 1;
            v473 = v463;
            v474 = (*v468)++;
            if (v463 != v460)
              goto LABEL_492;
LABEL_489:
            v473 = v460;
            while (1)
            {
              v468 += 4;
              if (v468 == v471)
                break;
              v474 = *v468;
              *v468 += v472;
              if (v473 == v460)
                goto LABEL_489;
LABEL_492:
              while (*v473 <= v474 + v472)
              {
                *v468 = v474 + v472 + 1;
                ++v473;
                ++v472;
                if (v473 == v460)
                  goto LABEL_489;
              }
            }
          }
LABEL_481:
          ++v459;
        }
        while (v459 != v458);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 4464) + 24))(a1 + 4464, (unint64_t)((char *)a2[10] - (char *)a2[9]) >> 2, (*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 2);
  }
  if (*(_QWORD *)(a1 + 5480))
  {
    sub_20F5B5AD0(a1 + 5472, (unsigned int **)(a3 + 120));
    v475 = (char *)a2[10] - (char *)a2[9];
    if (v475)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 5472) + 24))(a1 + 5472, *(_DWORD *)(a1 + 5480) + (v475 >> 2), *(unsigned int *)(a1 + 5484));
      v476 = *(unsigned int *)(a1 + 5484);
      if ((_DWORD)v476)
      {
        v477 = 0;
        v479 = a2[9];
        v478 = (int *)a2[10];
        v482 = *v479;
        v481 = (int *)(v479 + 1);
        v480 = v482;
        v483 = *(_QWORD *)(a1 + 5560);
        v484 = *(_QWORD *)(a1 + 5592);
        do
        {
          v485 = (*(_DWORD *)(a1 + 5584) * v477);
          v486 = (unsigned int *)(v483 + 16 * v485);
          v487 = *(_QWORD *)(v484 + 8 * v477);
          if (v487)
          {
            v488 = 16 * v487;
            while (*v486 < v480)
            {
              v486 += 4;
              v488 -= 16;
              if (!v488)
                goto LABEL_500;
            }
          }
          v489 = (unsigned int *)(v483 + 16 * (v487 + v485));
          if (v486 != v489)
          {
            v490 = 1;
            v491 = v481;
            v492 = (*v486)++;
            if (v481 != v478)
              goto LABEL_511;
LABEL_508:
            v491 = v478;
            while (1)
            {
              v486 += 4;
              if (v486 == v489)
                break;
              v492 = *v486;
              *v486 += v490;
              if (v491 == v478)
                goto LABEL_508;
LABEL_511:
              while (*v491 <= v492 + v490)
              {
                *v486 = v492 + v490 + 1;
                ++v491;
                ++v490;
                if (v491 == v478)
                  goto LABEL_508;
              }
            }
          }
LABEL_500:
          ++v477;
        }
        while (v477 != v476);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 5472) + 24))(a1 + 5472, (unint64_t)((char *)a2[10] - (char *)a2[9]) >> 2, (*(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120)) >> 2);
  }
  if (*(_QWORD *)(a1 + 6488))
  {
    sub_20F5B5AD0(a1 + 6480, (unsigned int **)(a3 + 144));
    v493 = (char *)a2[10] - (char *)a2[9];
    if (v493)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 6480) + 24))(a1 + 6480, *(_DWORD *)(a1 + 6488) + (v493 >> 2), *(unsigned int *)(a1 + 6492));
      v494 = *(unsigned int *)(a1 + 6492);
      if ((_DWORD)v494)
      {
        v495 = 0;
        v497 = a2[9];
        v496 = (int *)a2[10];
        v500 = *v497;
        v499 = (int *)(v497 + 1);
        v498 = v500;
        v501 = *(_QWORD *)(a1 + 6568);
        v502 = *(_QWORD *)(a1 + 6600);
        do
        {
          v503 = (*(_DWORD *)(a1 + 6592) * v495);
          v504 = (unsigned int *)(v501 + 16 * v503);
          v505 = *(_QWORD *)(v502 + 8 * v495);
          if (v505)
          {
            v506 = 16 * v505;
            while (*v504 < v498)
            {
              v504 += 4;
              v506 -= 16;
              if (!v506)
                goto LABEL_519;
            }
          }
          v507 = (unsigned int *)(v501 + 16 * (v505 + v503));
          if (v504 != v507)
          {
            v508 = 1;
            v509 = v499;
            v510 = (*v504)++;
            if (v499 != v496)
              goto LABEL_530;
LABEL_527:
            v509 = v496;
            while (1)
            {
              v504 += 4;
              if (v504 == v507)
                break;
              v510 = *v504;
              *v504 += v508;
              if (v509 == v496)
                goto LABEL_527;
LABEL_530:
              while (*v509 <= v510 + v508)
              {
                *v504 = v510 + v508 + 1;
                ++v509;
                ++v508;
                if (v509 == v496)
                  goto LABEL_527;
              }
            }
          }
LABEL_519:
          ++v495;
        }
        while (v495 != v494);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 6480) + 24))(a1 + 6480, (unint64_t)((char *)a2[10] - (char *)a2[9]) >> 2, (*(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144)) >> 2);
  }
  if (*(_QWORD *)(a1 + 296))
  {
    sub_20F5B5AD0(a1 + 288, (unsigned int **)a3);
    v511 = (char *)a2[7] - (char *)a2[6];
    if (v511)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 288) + 24))(a1 + 288, *(_DWORD *)(a1 + 296) + (v511 >> 2), *(unsigned int *)(a1 + 300));
      v512 = *(unsigned int *)(a1 + 300);
      if ((_DWORD)v512)
      {
        v513 = 0;
        v515 = a2[6];
        v514 = (int *)a2[7];
        v518 = *v515;
        v517 = (int *)(v515 + 1);
        v516 = v518;
        v519 = *(_QWORD *)(a1 + 376);
        v520 = *(_QWORD *)(a1 + 408);
        do
        {
          v521 = (*(_DWORD *)(a1 + 400) * v513);
          v522 = (unsigned int *)(v519 + 16 * v521);
          v523 = *(_QWORD *)(v520 + 8 * v513);
          if (v523)
          {
            v524 = 16 * v523;
            while (*v522 < v516)
            {
              v522 += 4;
              v524 -= 16;
              if (!v524)
                goto LABEL_538;
            }
          }
          v525 = (unsigned int *)(v519 + 16 * (v523 + v521));
          if (v522 != v525)
          {
            v526 = 1;
            v527 = v517;
            v528 = (*v522)++;
            if (v517 != v514)
              goto LABEL_549;
LABEL_546:
            v527 = v514;
            while (1)
            {
              v522 += 4;
              if (v522 == v525)
                break;
              v528 = *v522;
              *v522 += v526;
              if (v527 == v514)
                goto LABEL_546;
LABEL_549:
              while (*v527 <= v528 + v526)
              {
                *v522 = v528 + v526 + 1;
                ++v527;
                ++v526;
                if (v527 == v514)
                  goto LABEL_546;
              }
            }
          }
LABEL_538:
          ++v513;
        }
        while (v513 != v512);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 288) + 24))(a1 + 288, (unint64_t)((char *)a2[7] - (char *)a2[6]) >> 2, (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  }
  if (*(_QWORD *)(a1 + 1304))
  {
    sub_20F5B5AD0(a1 + 1296, (unsigned int **)(a3 + 24));
    v529 = (char *)a2[7] - (char *)a2[6];
    if (v529)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1296) + 24))(a1 + 1296, *(_DWORD *)(a1 + 1304) + (v529 >> 2), *(unsigned int *)(a1 + 1308));
      v530 = *(unsigned int *)(a1 + 1308);
      if ((_DWORD)v530)
      {
        v531 = 0;
        v533 = a2[6];
        v532 = (int *)a2[7];
        v536 = *v533;
        v535 = (int *)(v533 + 1);
        v534 = v536;
        v537 = *(_QWORD *)(a1 + 1384);
        v538 = *(_QWORD *)(a1 + 1416);
        do
        {
          v539 = (*(_DWORD *)(a1 + 1408) * v531);
          v540 = (unsigned int *)(v537 + 16 * v539);
          v541 = *(_QWORD *)(v538 + 8 * v531);
          if (v541)
          {
            v542 = 16 * v541;
            while (*v540 < v534)
            {
              v540 += 4;
              v542 -= 16;
              if (!v542)
                goto LABEL_557;
            }
          }
          v543 = (unsigned int *)(v537 + 16 * (v541 + v539));
          if (v540 != v543)
          {
            v544 = 1;
            v545 = v535;
            v546 = (*v540)++;
            if (v535 != v532)
              goto LABEL_568;
LABEL_565:
            v545 = v532;
            while (1)
            {
              v540 += 4;
              if (v540 == v543)
                break;
              v546 = *v540;
              *v540 += v544;
              if (v545 == v532)
                goto LABEL_565;
LABEL_568:
              while (*v545 <= v546 + v544)
              {
                *v540 = v546 + v544 + 1;
                ++v545;
                ++v544;
                if (v545 == v532)
                  goto LABEL_565;
              }
            }
          }
LABEL_557:
          ++v531;
        }
        while (v531 != v530);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 1296) + 24))(a1 + 1296, (unint64_t)((char *)a2[7] - (char *)a2[6]) >> 2, (*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
  }
  if (*(_QWORD *)(a1 + 2312))
  {
    sub_20F5B5AD0(a1 + 2304, (unsigned int **)(a3 + 48));
    v547 = (char *)a2[7] - (char *)a2[6];
    if (v547)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 2304) + 24))(a1 + 2304, *(_DWORD *)(a1 + 2312) + (v547 >> 2), *(unsigned int *)(a1 + 2316));
      v548 = *(unsigned int *)(a1 + 2316);
      if ((_DWORD)v548)
      {
        v549 = 0;
        v551 = a2[6];
        v550 = (int *)a2[7];
        v554 = *v551;
        v553 = (int *)(v551 + 1);
        v552 = v554;
        v555 = *(_QWORD *)(a1 + 2392);
        v556 = *(_QWORD *)(a1 + 2424);
        do
        {
          v557 = (*(_DWORD *)(a1 + 2416) * v549);
          v558 = (unsigned int *)(v555 + 16 * v557);
          v559 = *(_QWORD *)(v556 + 8 * v549);
          if (v559)
          {
            v560 = 16 * v559;
            while (*v558 < v552)
            {
              v558 += 4;
              v560 -= 16;
              if (!v560)
                goto LABEL_576;
            }
          }
          v561 = (unsigned int *)(v555 + 16 * (v559 + v557));
          if (v558 != v561)
          {
            v562 = 1;
            v563 = v553;
            v564 = (*v558)++;
            if (v553 != v550)
              goto LABEL_587;
LABEL_584:
            v563 = v550;
            while (1)
            {
              v558 += 4;
              if (v558 == v561)
                break;
              v564 = *v558;
              *v558 += v562;
              if (v563 == v550)
                goto LABEL_584;
LABEL_587:
              while (*v563 <= v564 + v562)
              {
                *v558 = v564 + v562 + 1;
                ++v563;
                ++v562;
                if (v563 == v550)
                  goto LABEL_584;
              }
            }
          }
LABEL_576:
          ++v549;
        }
        while (v549 != v548);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 2304) + 24))(a1 + 2304, (unint64_t)((char *)a2[7] - (char *)a2[6]) >> 2, (*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 2);
  }
  if (*(_QWORD *)(a1 + 3320))
  {
    sub_20F5B5AD0(a1 + 3312, (unsigned int **)(a3 + 72));
    v565 = (char *)a2[7] - (char *)a2[6];
    if (v565)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 3312) + 24))(a1 + 3312, *(_DWORD *)(a1 + 3320) + (v565 >> 2), *(unsigned int *)(a1 + 3324));
      v566 = *(unsigned int *)(a1 + 3324);
      if ((_DWORD)v566)
      {
        v567 = 0;
        v569 = a2[6];
        v568 = (int *)a2[7];
        v572 = *v569;
        v571 = (int *)(v569 + 1);
        v570 = v572;
        v573 = *(_QWORD *)(a1 + 3400);
        v574 = *(_QWORD *)(a1 + 3432);
        do
        {
          v575 = (*(_DWORD *)(a1 + 3424) * v567);
          v576 = (unsigned int *)(v573 + 16 * v575);
          v577 = *(_QWORD *)(v574 + 8 * v567);
          if (v577)
          {
            v578 = 16 * v577;
            while (*v576 < v570)
            {
              v576 += 4;
              v578 -= 16;
              if (!v578)
                goto LABEL_595;
            }
          }
          v579 = (unsigned int *)(v573 + 16 * (v577 + v575));
          if (v576 != v579)
          {
            v580 = 1;
            v581 = v571;
            v582 = (*v576)++;
            if (v571 != v568)
              goto LABEL_606;
LABEL_603:
            v581 = v568;
            while (1)
            {
              v576 += 4;
              if (v576 == v579)
                break;
              v582 = *v576;
              *v576 += v580;
              if (v581 == v568)
                goto LABEL_603;
LABEL_606:
              while (*v581 <= v582 + v580)
              {
                *v576 = v582 + v580 + 1;
                ++v581;
                ++v580;
                if (v581 == v568)
                  goto LABEL_603;
              }
            }
          }
LABEL_595:
          ++v567;
        }
        while (v567 != v566);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 3312) + 24))(a1 + 3312, (unint64_t)((char *)a2[7] - (char *)a2[6]) >> 2, (*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 2);
  }
  if (*(_QWORD *)(a1 + 4328))
  {
    sub_20F5B5AD0(a1 + 4320, (unsigned int **)(a3 + 96));
    v583 = (char *)a2[7] - (char *)a2[6];
    if (v583)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 4320) + 24))(a1 + 4320, *(_DWORD *)(a1 + 4328) + (v583 >> 2), *(unsigned int *)(a1 + 4332));
      v584 = *(unsigned int *)(a1 + 4332);
      if ((_DWORD)v584)
      {
        v585 = 0;
        v587 = a2[6];
        v586 = (int *)a2[7];
        v590 = *v587;
        v589 = (int *)(v587 + 1);
        v588 = v590;
        v591 = *(_QWORD *)(a1 + 4408);
        v592 = *(_QWORD *)(a1 + 4440);
        do
        {
          v593 = (*(_DWORD *)(a1 + 4432) * v585);
          v594 = (unsigned int *)(v591 + 16 * v593);
          v595 = *(_QWORD *)(v592 + 8 * v585);
          if (v595)
          {
            v596 = 16 * v595;
            while (*v594 < v588)
            {
              v594 += 4;
              v596 -= 16;
              if (!v596)
                goto LABEL_614;
            }
          }
          v597 = (unsigned int *)(v591 + 16 * (v595 + v593));
          if (v594 != v597)
          {
            v598 = 1;
            v599 = v589;
            v600 = (*v594)++;
            if (v589 != v586)
              goto LABEL_625;
LABEL_622:
            v599 = v586;
            while (1)
            {
              v594 += 4;
              if (v594 == v597)
                break;
              v600 = *v594;
              *v594 += v598;
              if (v599 == v586)
                goto LABEL_622;
LABEL_625:
              while (*v599 <= v600 + v598)
              {
                *v594 = v600 + v598 + 1;
                ++v599;
                ++v598;
                if (v599 == v586)
                  goto LABEL_622;
              }
            }
          }
LABEL_614:
          ++v585;
        }
        while (v585 != v584);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 4320) + 24))(a1 + 4320, (unint64_t)((char *)a2[7] - (char *)a2[6]) >> 2, (*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 2);
  }
  if (*(_QWORD *)(a1 + 5336))
  {
    sub_20F5B5AD0(a1 + 5328, (unsigned int **)(a3 + 120));
    v601 = (char *)a2[7] - (char *)a2[6];
    if (v601)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 5328) + 24))(a1 + 5328, *(_DWORD *)(a1 + 5336) + (v601 >> 2), *(unsigned int *)(a1 + 5340));
      v602 = *(unsigned int *)(a1 + 5340);
      if ((_DWORD)v602)
      {
        v603 = 0;
        v605 = a2[6];
        v604 = (int *)a2[7];
        v608 = *v605;
        v607 = (int *)(v605 + 1);
        v606 = v608;
        v609 = *(_QWORD *)(a1 + 5416);
        v610 = *(_QWORD *)(a1 + 5448);
        do
        {
          v611 = (*(_DWORD *)(a1 + 5440) * v603);
          v612 = (unsigned int *)(v609 + 16 * v611);
          v613 = *(_QWORD *)(v610 + 8 * v603);
          if (v613)
          {
            v614 = 16 * v613;
            while (*v612 < v606)
            {
              v612 += 4;
              v614 -= 16;
              if (!v614)
                goto LABEL_633;
            }
          }
          v615 = (unsigned int *)(v609 + 16 * (v613 + v611));
          if (v612 != v615)
          {
            v616 = 1;
            v617 = v607;
            v618 = (*v612)++;
            if (v607 != v604)
              goto LABEL_644;
LABEL_641:
            v617 = v604;
            while (1)
            {
              v612 += 4;
              if (v612 == v615)
                break;
              v618 = *v612;
              *v612 += v616;
              if (v617 == v604)
                goto LABEL_641;
LABEL_644:
              while (*v617 <= v618 + v616)
              {
                *v612 = v618 + v616 + 1;
                ++v617;
                ++v616;
                if (v617 == v604)
                  goto LABEL_641;
              }
            }
          }
LABEL_633:
          ++v603;
        }
        while (v603 != v602);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 5328) + 24))(a1 + 5328, (unint64_t)((char *)a2[7] - (char *)a2[6]) >> 2, (*(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120)) >> 2);
  }
  if (*(_QWORD *)(a1 + 6344))
  {
    sub_20F5B5AD0(a1 + 6336, (unsigned int **)(a3 + 144));
    v619 = (char *)a2[7] - (char *)a2[6];
    if (v619)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 6336) + 24))(a1 + 6336, *(_DWORD *)(a1 + 6344) + (v619 >> 2), *(unsigned int *)(a1 + 6348));
      v620 = *(unsigned int *)(a1 + 6348);
      if ((_DWORD)v620)
      {
        v621 = 0;
        v623 = a2[6];
        v622 = (int *)a2[7];
        v626 = *v623;
        v625 = (int *)(v623 + 1);
        v624 = v626;
        v627 = *(_QWORD *)(a1 + 6424);
        v628 = *(_QWORD *)(a1 + 6456);
        do
        {
          v629 = (*(_DWORD *)(a1 + 6448) * v621);
          v630 = (unsigned int *)(v627 + 16 * v629);
          v631 = *(_QWORD *)(v628 + 8 * v621);
          if (v631)
          {
            v632 = 16 * v631;
            while (*v630 < v624)
            {
              v630 += 4;
              v632 -= 16;
              if (!v632)
                goto LABEL_652;
            }
          }
          v633 = (unsigned int *)(v627 + 16 * (v631 + v629));
          if (v630 != v633)
          {
            v634 = 1;
            v635 = v625;
            v636 = (*v630)++;
            if (v625 != v622)
              goto LABEL_663;
LABEL_660:
            v635 = v622;
            while (1)
            {
              v630 += 4;
              if (v630 == v633)
                break;
              v636 = *v630;
              *v630 += v634;
              if (v635 == v622)
                goto LABEL_660;
LABEL_663:
              while (*v635 <= v636 + v634)
              {
                *v630 = v636 + v634 + 1;
                ++v635;
                ++v634;
                if (v635 == v622)
                  goto LABEL_660;
              }
            }
          }
LABEL_652:
          ++v621;
        }
        while (v621 != v620);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 6336) + 24))(a1 + 6336, (unint64_t)((char *)a2[7] - (char *)a2[6]) >> 2, (*(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144)) >> 2);
  }
  if (*(_QWORD *)(a1 + 152))
  {
    sub_20F5B5AD0(a1 + 144, (unsigned int **)a3);
    v637 = (char *)a2[4] - (char *)a2[3];
    if (v637)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 144) + 24))(a1 + 144, *(_DWORD *)(a1 + 152) + (v637 >> 2), *(unsigned int *)(a1 + 156));
      v638 = *(unsigned int *)(a1 + 156);
      if ((_DWORD)v638)
      {
        v639 = 0;
        v641 = a2[3];
        v640 = (int *)a2[4];
        v644 = *v641;
        v643 = (int *)(v641 + 1);
        v642 = v644;
        v645 = *(_QWORD *)(a1 + 232);
        v646 = *(_QWORD *)(a1 + 264);
        do
        {
          v647 = (*(_DWORD *)(a1 + 256) * v639);
          v648 = (unsigned int *)(v645 + 16 * v647);
          v649 = *(_QWORD *)(v646 + 8 * v639);
          if (v649)
          {
            v650 = 16 * v649;
            while (*v648 < v642)
            {
              v648 += 4;
              v650 -= 16;
              if (!v650)
                goto LABEL_671;
            }
          }
          v651 = (unsigned int *)(v645 + 16 * (v649 + v647));
          if (v648 != v651)
          {
            v652 = 1;
            v653 = v643;
            v654 = (*v648)++;
            if (v643 != v640)
              goto LABEL_682;
LABEL_679:
            v653 = v640;
            while (1)
            {
              v648 += 4;
              if (v648 == v651)
                break;
              v654 = *v648;
              *v648 += v652;
              if (v653 == v640)
                goto LABEL_679;
LABEL_682:
              while (*v653 <= v654 + v652)
              {
                *v648 = v654 + v652 + 1;
                ++v653;
                ++v652;
                if (v653 == v640)
                  goto LABEL_679;
              }
            }
          }
LABEL_671:
          ++v639;
        }
        while (v639 != v638);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 144) + 24))(a1 + 144, (unint64_t)((char *)a2[4] - (char *)a2[3]) >> 2, (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  }
  if (*(_QWORD *)(a1 + 1160))
  {
    sub_20F5B5AD0(a1 + 1152, (unsigned int **)(a3 + 24));
    v655 = (char *)a2[4] - (char *)a2[3];
    if (v655)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1152) + 24))(a1 + 1152, *(_DWORD *)(a1 + 1160) + (v655 >> 2), *(unsigned int *)(a1 + 1164));
      v656 = *(unsigned int *)(a1 + 1164);
      if ((_DWORD)v656)
      {
        v657 = 0;
        v659 = a2[3];
        v658 = (int *)a2[4];
        v662 = *v659;
        v661 = (int *)(v659 + 1);
        v660 = v662;
        v663 = *(_QWORD *)(a1 + 1240);
        v664 = *(_QWORD *)(a1 + 1272);
        do
        {
          v665 = (*(_DWORD *)(a1 + 1264) * v657);
          v666 = (unsigned int *)(v663 + 16 * v665);
          v667 = *(_QWORD *)(v664 + 8 * v657);
          if (v667)
          {
            v668 = 16 * v667;
            while (*v666 < v660)
            {
              v666 += 4;
              v668 -= 16;
              if (!v668)
                goto LABEL_690;
            }
          }
          v669 = (unsigned int *)(v663 + 16 * (v667 + v665));
          if (v666 != v669)
          {
            v670 = 1;
            v671 = v661;
            v672 = (*v666)++;
            if (v661 != v658)
              goto LABEL_701;
LABEL_698:
            v671 = v658;
            while (1)
            {
              v666 += 4;
              if (v666 == v669)
                break;
              v672 = *v666;
              *v666 += v670;
              if (v671 == v658)
                goto LABEL_698;
LABEL_701:
              while (*v671 <= v672 + v670)
              {
                *v666 = v672 + v670 + 1;
                ++v671;
                ++v670;
                if (v671 == v658)
                  goto LABEL_698;
              }
            }
          }
LABEL_690:
          ++v657;
        }
        while (v657 != v656);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 1152) + 24))(a1 + 1152, (unint64_t)((char *)a2[4] - (char *)a2[3]) >> 2, (*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
  }
  if (*(_QWORD *)(a1 + 2168))
  {
    sub_20F5B5AD0(a1 + 2160, (unsigned int **)(a3 + 48));
    v673 = (char *)a2[4] - (char *)a2[3];
    if (v673)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 2160) + 24))(a1 + 2160, *(_DWORD *)(a1 + 2168) + (v673 >> 2), *(unsigned int *)(a1 + 2172));
      v674 = *(unsigned int *)(a1 + 2172);
      if ((_DWORD)v674)
      {
        v675 = 0;
        v677 = a2[3];
        v676 = (int *)a2[4];
        v680 = *v677;
        v679 = (int *)(v677 + 1);
        v678 = v680;
        v681 = *(_QWORD *)(a1 + 2248);
        v682 = *(_QWORD *)(a1 + 2280);
        do
        {
          v683 = (*(_DWORD *)(a1 + 2272) * v675);
          v684 = (unsigned int *)(v681 + 16 * v683);
          v685 = *(_QWORD *)(v682 + 8 * v675);
          if (v685)
          {
            v686 = 16 * v685;
            while (*v684 < v678)
            {
              v684 += 4;
              v686 -= 16;
              if (!v686)
                goto LABEL_709;
            }
          }
          v687 = (unsigned int *)(v681 + 16 * (v685 + v683));
          if (v684 != v687)
          {
            v688 = 1;
            v689 = v679;
            v690 = (*v684)++;
            if (v679 != v676)
              goto LABEL_720;
LABEL_717:
            v689 = v676;
            while (1)
            {
              v684 += 4;
              if (v684 == v687)
                break;
              v690 = *v684;
              *v684 += v688;
              if (v689 == v676)
                goto LABEL_717;
LABEL_720:
              while (*v689 <= v690 + v688)
              {
                *v684 = v690 + v688 + 1;
                ++v689;
                ++v688;
                if (v689 == v676)
                  goto LABEL_717;
              }
            }
          }
LABEL_709:
          ++v675;
        }
        while (v675 != v674);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 2160) + 24))(a1 + 2160, (unint64_t)((char *)a2[4] - (char *)a2[3]) >> 2, (*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 2);
  }
  if (*(_QWORD *)(a1 + 3176))
  {
    sub_20F5B5AD0(a1 + 3168, (unsigned int **)(a3 + 72));
    v691 = (char *)a2[4] - (char *)a2[3];
    if (v691)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 3168) + 24))(a1 + 3168, *(_DWORD *)(a1 + 3176) + (v691 >> 2), *(unsigned int *)(a1 + 3180));
      v692 = *(unsigned int *)(a1 + 3180);
      if ((_DWORD)v692)
      {
        v693 = 0;
        v695 = a2[3];
        v694 = (int *)a2[4];
        v698 = *v695;
        v697 = (int *)(v695 + 1);
        v696 = v698;
        v699 = *(_QWORD *)(a1 + 3256);
        v700 = *(_QWORD *)(a1 + 3288);
        do
        {
          v701 = (*(_DWORD *)(a1 + 3280) * v693);
          v702 = (unsigned int *)(v699 + 16 * v701);
          v703 = *(_QWORD *)(v700 + 8 * v693);
          if (v703)
          {
            v704 = 16 * v703;
            while (*v702 < v696)
            {
              v702 += 4;
              v704 -= 16;
              if (!v704)
                goto LABEL_728;
            }
          }
          v705 = (unsigned int *)(v699 + 16 * (v703 + v701));
          if (v702 != v705)
          {
            v706 = 1;
            v707 = v697;
            v708 = (*v702)++;
            if (v697 != v694)
              goto LABEL_739;
LABEL_736:
            v707 = v694;
            while (1)
            {
              v702 += 4;
              if (v702 == v705)
                break;
              v708 = *v702;
              *v702 += v706;
              if (v707 == v694)
                goto LABEL_736;
LABEL_739:
              while (*v707 <= v708 + v706)
              {
                *v702 = v708 + v706 + 1;
                ++v707;
                ++v706;
                if (v707 == v694)
                  goto LABEL_736;
              }
            }
          }
LABEL_728:
          ++v693;
        }
        while (v693 != v692);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 3168) + 24))(a1 + 3168, (unint64_t)((char *)a2[4] - (char *)a2[3]) >> 2, (*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 2);
  }
  if (*(_QWORD *)(a1 + 4184))
  {
    sub_20F5B5AD0(a1 + 4176, (unsigned int **)(a3 + 96));
    v709 = (char *)a2[4] - (char *)a2[3];
    if (v709)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 4176) + 24))(a1 + 4176, *(_DWORD *)(a1 + 4184) + (v709 >> 2), *(unsigned int *)(a1 + 4188));
      v710 = *(unsigned int *)(a1 + 4188);
      if ((_DWORD)v710)
      {
        v711 = 0;
        v713 = a2[3];
        v712 = (int *)a2[4];
        v716 = *v713;
        v715 = (int *)(v713 + 1);
        v714 = v716;
        v717 = *(_QWORD *)(a1 + 4264);
        v718 = *(_QWORD *)(a1 + 4296);
        do
        {
          v719 = (*(_DWORD *)(a1 + 4288) * v711);
          v720 = (unsigned int *)(v717 + 16 * v719);
          v721 = *(_QWORD *)(v718 + 8 * v711);
          if (v721)
          {
            v722 = 16 * v721;
            while (*v720 < v714)
            {
              v720 += 4;
              v722 -= 16;
              if (!v722)
                goto LABEL_747;
            }
          }
          v723 = (unsigned int *)(v717 + 16 * (v721 + v719));
          if (v720 != v723)
          {
            v724 = 1;
            v725 = v715;
            v726 = (*v720)++;
            if (v715 != v712)
              goto LABEL_758;
LABEL_755:
            v725 = v712;
            while (1)
            {
              v720 += 4;
              if (v720 == v723)
                break;
              v726 = *v720;
              *v720 += v724;
              if (v725 == v712)
                goto LABEL_755;
LABEL_758:
              while (*v725 <= v726 + v724)
              {
                *v720 = v726 + v724 + 1;
                ++v725;
                ++v724;
                if (v725 == v712)
                  goto LABEL_755;
              }
            }
          }
LABEL_747:
          ++v711;
        }
        while (v711 != v710);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 4176) + 24))(a1 + 4176, (unint64_t)((char *)a2[4] - (char *)a2[3]) >> 2, (*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 2);
  }
  if (*(_QWORD *)(a1 + 5192))
  {
    sub_20F5B5AD0(a1 + 5184, (unsigned int **)(a3 + 120));
    v727 = (char *)a2[4] - (char *)a2[3];
    if (v727)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 5184) + 24))(a1 + 5184, *(_DWORD *)(a1 + 5192) + (v727 >> 2), *(unsigned int *)(a1 + 5196));
      v728 = *(unsigned int *)(a1 + 5196);
      if ((_DWORD)v728)
      {
        v729 = 0;
        v731 = a2[3];
        v730 = (int *)a2[4];
        v734 = *v731;
        v733 = (int *)(v731 + 1);
        v732 = v734;
        v735 = *(_QWORD *)(a1 + 5272);
        v736 = *(_QWORD *)(a1 + 5304);
        do
        {
          v737 = (*(_DWORD *)(a1 + 5296) * v729);
          v738 = (unsigned int *)(v735 + 16 * v737);
          v739 = *(_QWORD *)(v736 + 8 * v729);
          if (v739)
          {
            v740 = 16 * v739;
            while (*v738 < v732)
            {
              v738 += 4;
              v740 -= 16;
              if (!v740)
                goto LABEL_766;
            }
          }
          v741 = (unsigned int *)(v735 + 16 * (v739 + v737));
          if (v738 != v741)
          {
            v742 = 1;
            v743 = v733;
            v744 = (*v738)++;
            if (v733 != v730)
              goto LABEL_777;
LABEL_774:
            v743 = v730;
            while (1)
            {
              v738 += 4;
              if (v738 == v741)
                break;
              v744 = *v738;
              *v738 += v742;
              if (v743 == v730)
                goto LABEL_774;
LABEL_777:
              while (*v743 <= v744 + v742)
              {
                *v738 = v744 + v742 + 1;
                ++v743;
                ++v742;
                if (v743 == v730)
                  goto LABEL_774;
              }
            }
          }
LABEL_766:
          ++v729;
        }
        while (v729 != v728);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 5184) + 24))(a1 + 5184, (unint64_t)((char *)a2[4] - (char *)a2[3]) >> 2, (*(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120)) >> 2);
  }
  if (*(_QWORD *)(a1 + 6200))
  {
    sub_20F5B5AD0(a1 + 6192, (unsigned int **)(a3 + 144));
    v745 = (char *)a2[4] - (char *)a2[3];
    if (v745)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 6192) + 24))(a1 + 6192, *(_DWORD *)(a1 + 6200) + (v745 >> 2), *(unsigned int *)(a1 + 6204));
      v746 = *(unsigned int *)(a1 + 6204);
      if ((_DWORD)v746)
      {
        v747 = 0;
        v749 = a2[3];
        v748 = (int *)a2[4];
        v752 = *v749;
        v751 = (int *)(v749 + 1);
        v750 = v752;
        v753 = *(_QWORD *)(a1 + 6280);
        v754 = *(_QWORD *)(a1 + 6312);
        do
        {
          v755 = (*(_DWORD *)(a1 + 6304) * v747);
          v756 = (unsigned int *)(v753 + 16 * v755);
          v757 = *(_QWORD *)(v754 + 8 * v747);
          if (v757)
          {
            v758 = 16 * v757;
            while (*v756 < v750)
            {
              v756 += 4;
              v758 -= 16;
              if (!v758)
                goto LABEL_785;
            }
          }
          v759 = (unsigned int *)(v753 + 16 * (v757 + v755));
          if (v756 != v759)
          {
            v760 = 1;
            v761 = v751;
            v762 = (*v756)++;
            if (v751 != v748)
              goto LABEL_796;
LABEL_793:
            v761 = v748;
            while (1)
            {
              v756 += 4;
              if (v756 == v759)
                break;
              v762 = *v756;
              *v756 += v760;
              if (v761 == v748)
                goto LABEL_793;
LABEL_796:
              while (*v761 <= v762 + v760)
              {
                *v756 = v762 + v760 + 1;
                ++v761;
                ++v760;
                if (v761 == v748)
                  goto LABEL_793;
              }
            }
          }
LABEL_785:
          ++v747;
        }
        while (v747 != v746);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 6192) + 24))(a1 + 6192, (unint64_t)((char *)a2[4] - (char *)a2[3]) >> 2, (*(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144)) >> 2);
  }
  if (*(_QWORD *)(a1 + 8))
  {
    sub_20F5B5AD0(a1, (unsigned int **)a3);
    v763 = (char *)a2[1] - (char *)*a2;
    if (v763)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 24))(a1, *(_DWORD *)(a1 + 8) + (v763 >> 2), *(unsigned int *)(a1 + 12));
      v764 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v764)
      {
        v765 = 0;
        v766 = (int *)a2[1];
        v768 = (uint64_t)(*a2 + 1);
        v767 = **a2;
        v769 = *(_QWORD *)(a1 + 88);
        v770 = *(_QWORD *)(a1 + 120);
        do
        {
          v771 = (*(_DWORD *)(a1 + 112) * v765);
          v772 = (unsigned int *)(v769 + 16 * v771);
          v773 = *(_QWORD *)(v770 + 8 * v765);
          if (v773)
          {
            v774 = 16 * v773;
            while (*v772 < v767)
            {
              v772 += 4;
              v774 -= 16;
              if (!v774)
                goto LABEL_804;
            }
          }
          v775 = (unsigned int *)(v769 + 16 * (v773 + v771));
          if (v772 != v775)
          {
            v776 = 1;
            v777 = (int *)v768;
            v778 = (*v772)++;
            if ((int *)v768 != v766)
              goto LABEL_815;
LABEL_812:
            v777 = v766;
            while (1)
            {
              v772 += 4;
              if (v772 == v775)
                break;
              v778 = *v772;
              *v772 += v776;
              if (v777 == v766)
                goto LABEL_812;
LABEL_815:
              while (*v777 <= v778 + v776)
              {
                *v772 = v778 + v776 + 1;
                ++v777;
                ++v776;
                if (v777 == v766)
                  goto LABEL_812;
              }
            }
          }
LABEL_804:
          ++v765;
        }
        while (v765 != v764);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, (unint64_t)((char *)a2[1] - (char *)*a2) >> 2, (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  }
  if (*(_QWORD *)(a1 + 1016))
  {
    sub_20F5B5AD0(a1 + 1008, (unsigned int **)(a3 + 24));
    v779 = (char *)a2[1] - (char *)*a2;
    if (v779)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1008) + 24))(a1 + 1008, *(_DWORD *)(a1 + 1016) + (v779 >> 2), *(unsigned int *)(a1 + 1020));
      v780 = *(unsigned int *)(a1 + 1020);
      if ((_DWORD)v780)
      {
        v781 = 0;
        v782 = (int *)a2[1];
        v784 = (uint64_t)(*a2 + 1);
        v783 = **a2;
        v785 = *(_QWORD *)(a1 + 1096);
        v786 = *(_QWORD *)(a1 + 1128);
        do
        {
          v787 = (*(_DWORD *)(a1 + 1120) * v781);
          v788 = (unsigned int *)(v785 + 16 * v787);
          v789 = *(_QWORD *)(v786 + 8 * v781);
          if (v789)
          {
            v790 = 16 * v789;
            while (*v788 < v783)
            {
              v788 += 4;
              v790 -= 16;
              if (!v790)
                goto LABEL_823;
            }
          }
          v791 = (unsigned int *)(v785 + 16 * (v789 + v787));
          if (v788 != v791)
          {
            v792 = 1;
            v793 = (int *)v784;
            v794 = (*v788)++;
            if ((int *)v784 != v782)
              goto LABEL_834;
LABEL_831:
            v793 = v782;
            while (1)
            {
              v788 += 4;
              if (v788 == v791)
                break;
              v794 = *v788;
              *v788 += v792;
              if (v793 == v782)
                goto LABEL_831;
LABEL_834:
              while (*v793 <= v794 + v792)
              {
                *v788 = v794 + v792 + 1;
                ++v793;
                ++v792;
                if (v793 == v782)
                  goto LABEL_831;
              }
            }
          }
LABEL_823:
          ++v781;
        }
        while (v781 != v780);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 1008) + 24))(a1 + 1008, (unint64_t)((char *)a2[1] - (char *)*a2) >> 2, (*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
  }
  if (*(_QWORD *)(a1 + 2024))
  {
    sub_20F5B5AD0(a1 + 2016, (unsigned int **)(a3 + 48));
    v795 = (char *)a2[1] - (char *)*a2;
    if (v795)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 2016) + 24))(a1 + 2016, *(_DWORD *)(a1 + 2024) + (v795 >> 2), *(unsigned int *)(a1 + 2028));
      v796 = *(unsigned int *)(a1 + 2028);
      if ((_DWORD)v796)
      {
        v797 = 0;
        v798 = (int *)a2[1];
        v800 = (uint64_t)(*a2 + 1);
        v799 = **a2;
        v801 = *(_QWORD *)(a1 + 2104);
        v802 = *(_QWORD *)(a1 + 2136);
        do
        {
          v803 = (*(_DWORD *)(a1 + 2128) * v797);
          v804 = (unsigned int *)(v801 + 16 * v803);
          v805 = *(_QWORD *)(v802 + 8 * v797);
          if (v805)
          {
            v806 = 16 * v805;
            while (*v804 < v799)
            {
              v804 += 4;
              v806 -= 16;
              if (!v806)
                goto LABEL_842;
            }
          }
          v807 = (unsigned int *)(v801 + 16 * (v805 + v803));
          if (v804 != v807)
          {
            v808 = 1;
            v809 = (int *)v800;
            v810 = (*v804)++;
            if ((int *)v800 != v798)
              goto LABEL_853;
LABEL_850:
            v809 = v798;
            while (1)
            {
              v804 += 4;
              if (v804 == v807)
                break;
              v810 = *v804;
              *v804 += v808;
              if (v809 == v798)
                goto LABEL_850;
LABEL_853:
              while (*v809 <= v810 + v808)
              {
                *v804 = v810 + v808 + 1;
                ++v809;
                ++v808;
                if (v809 == v798)
                  goto LABEL_850;
              }
            }
          }
LABEL_842:
          ++v797;
        }
        while (v797 != v796);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 2016) + 24))(a1 + 2016, (unint64_t)((char *)a2[1] - (char *)*a2) >> 2, (*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 2);
  }
  if (*(_QWORD *)(a1 + 3032))
  {
    sub_20F5B5AD0(a1 + 3024, (unsigned int **)(a3 + 72));
    v811 = (char *)a2[1] - (char *)*a2;
    if (v811)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 3024) + 24))(a1 + 3024, *(_DWORD *)(a1 + 3032) + (v811 >> 2), *(unsigned int *)(a1 + 3036));
      v812 = *(unsigned int *)(a1 + 3036);
      if ((_DWORD)v812)
      {
        v813 = 0;
        v814 = (int *)a2[1];
        v816 = (uint64_t)(*a2 + 1);
        v815 = **a2;
        v817 = *(_QWORD *)(a1 + 3112);
        v818 = *(_QWORD *)(a1 + 3144);
        do
        {
          v819 = (*(_DWORD *)(a1 + 3136) * v813);
          v820 = (unsigned int *)(v817 + 16 * v819);
          v821 = *(_QWORD *)(v818 + 8 * v813);
          if (v821)
          {
            v822 = 16 * v821;
            while (*v820 < v815)
            {
              v820 += 4;
              v822 -= 16;
              if (!v822)
                goto LABEL_861;
            }
          }
          v823 = (unsigned int *)(v817 + 16 * (v821 + v819));
          if (v820 != v823)
          {
            v824 = 1;
            v825 = (int *)v816;
            v826 = (*v820)++;
            if ((int *)v816 != v814)
              goto LABEL_872;
LABEL_869:
            v825 = v814;
            while (1)
            {
              v820 += 4;
              if (v820 == v823)
                break;
              v826 = *v820;
              *v820 += v824;
              if (v825 == v814)
                goto LABEL_869;
LABEL_872:
              while (*v825 <= v826 + v824)
              {
                *v820 = v826 + v824 + 1;
                ++v825;
                ++v824;
                if (v825 == v814)
                  goto LABEL_869;
              }
            }
          }
LABEL_861:
          ++v813;
        }
        while (v813 != v812);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 3024) + 24))(a1 + 3024, (unint64_t)((char *)a2[1] - (char *)*a2) >> 2, (*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 2);
  }
  if (*(_QWORD *)(a1 + 4040))
  {
    sub_20F5B5AD0(a1 + 4032, (unsigned int **)(a3 + 96));
    v827 = (char *)a2[1] - (char *)*a2;
    if (v827)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 4032) + 24))(a1 + 4032, *(_DWORD *)(a1 + 4040) + (v827 >> 2), *(unsigned int *)(a1 + 4044));
      v828 = *(unsigned int *)(a1 + 4044);
      if ((_DWORD)v828)
      {
        v829 = 0;
        v830 = (int *)a2[1];
        v832 = (uint64_t)(*a2 + 1);
        v831 = **a2;
        v833 = *(_QWORD *)(a1 + 4120);
        v834 = *(_QWORD *)(a1 + 4152);
        do
        {
          v835 = (*(_DWORD *)(a1 + 4144) * v829);
          v836 = (unsigned int *)(v833 + 16 * v835);
          v837 = *(_QWORD *)(v834 + 8 * v829);
          if (v837)
          {
            v838 = 16 * v837;
            while (*v836 < v831)
            {
              v836 += 4;
              v838 -= 16;
              if (!v838)
                goto LABEL_880;
            }
          }
          v839 = (unsigned int *)(v833 + 16 * (v837 + v835));
          if (v836 != v839)
          {
            v840 = 1;
            v841 = (int *)v832;
            v842 = (*v836)++;
            if ((int *)v832 != v830)
              goto LABEL_891;
LABEL_888:
            v841 = v830;
            while (1)
            {
              v836 += 4;
              if (v836 == v839)
                break;
              v842 = *v836;
              *v836 += v840;
              if (v841 == v830)
                goto LABEL_888;
LABEL_891:
              while (*v841 <= v842 + v840)
              {
                *v836 = v842 + v840 + 1;
                ++v841;
                ++v840;
                if (v841 == v830)
                  goto LABEL_888;
              }
            }
          }
LABEL_880:
          ++v829;
        }
        while (v829 != v828);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 4032) + 24))(a1 + 4032, (unint64_t)((char *)a2[1] - (char *)*a2) >> 2, (*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 2);
  }
  if (*(_QWORD *)(a1 + 5048))
  {
    sub_20F5B5AD0(a1 + 5040, (unsigned int **)(a3 + 120));
    v843 = (char *)a2[1] - (char *)*a2;
    if (v843)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 5040) + 24))(a1 + 5040, *(_DWORD *)(a1 + 5048) + (v843 >> 2), *(unsigned int *)(a1 + 5052));
      v844 = *(unsigned int *)(a1 + 5052);
      if ((_DWORD)v844)
      {
        v845 = 0;
        v846 = (int *)a2[1];
        v848 = (uint64_t)(*a2 + 1);
        v847 = **a2;
        v849 = *(_QWORD *)(a1 + 5128);
        v850 = *(_QWORD *)(a1 + 5160);
        do
        {
          v851 = (*(_DWORD *)(a1 + 5152) * v845);
          v852 = (unsigned int *)(v849 + 16 * v851);
          v853 = *(_QWORD *)(v850 + 8 * v845);
          if (v853)
          {
            v854 = 16 * v853;
            while (*v852 < v847)
            {
              v852 += 4;
              v854 -= 16;
              if (!v854)
                goto LABEL_899;
            }
          }
          v855 = (unsigned int *)(v849 + 16 * (v853 + v851));
          if (v852 != v855)
          {
            v856 = 1;
            v857 = (int *)v848;
            v858 = (*v852)++;
            if ((int *)v848 != v846)
              goto LABEL_910;
LABEL_907:
            v857 = v846;
            while (1)
            {
              v852 += 4;
              if (v852 == v855)
                break;
              v858 = *v852;
              *v852 += v856;
              if (v857 == v846)
                goto LABEL_907;
LABEL_910:
              while (*v857 <= v858 + v856)
              {
                *v852 = v858 + v856 + 1;
                ++v857;
                ++v856;
                if (v857 == v846)
                  goto LABEL_907;
              }
            }
          }
LABEL_899:
          ++v845;
        }
        while (v845 != v844);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 5040) + 24))(a1 + 5040, (unint64_t)((char *)a2[1] - (char *)*a2) >> 2, (*(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120)) >> 2);
  }
  if (*(_QWORD *)(a1 + 6056))
  {
    sub_20F5B5AD0(a1 + 6048, (unsigned int **)(a3 + 144));
    v859 = (char *)a2[1] - (char *)*a2;
    if (v859)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 6048) + 24))(a1 + 6048, *(_DWORD *)(a1 + 6056) + (v859 >> 2), *(unsigned int *)(a1 + 6060));
      v860 = *(unsigned int *)(a1 + 6060);
      if ((_DWORD)v860)
      {
        v861 = 0;
        v862 = (int *)a2[1];
        v864 = (uint64_t)(*a2 + 1);
        v863 = **a2;
        v865 = *(_QWORD *)(a1 + 6136);
        v866 = *(_QWORD *)(a1 + 6168);
        do
        {
          v867 = (*(_DWORD *)(a1 + 6160) * v861);
          v868 = (unsigned int *)(v865 + 16 * v867);
          v869 = *(_QWORD *)(v866 + 8 * v861);
          if (v869)
          {
            v870 = 16 * v869;
            while (*v868 < v863)
            {
              v868 += 4;
              v870 -= 16;
              if (!v870)
                goto LABEL_918;
            }
          }
          v871 = (unsigned int *)(v865 + 16 * (v869 + v867));
          if (v868 != v871)
          {
            v872 = 1;
            v873 = (int *)v864;
            v874 = (*v868)++;
            if ((int *)v864 != v862)
              goto LABEL_929;
LABEL_926:
            v873 = v862;
            while (1)
            {
              v868 += 4;
              if (v868 == v871)
                break;
              v874 = *v868;
              *v868 += v872;
              if (v873 == v862)
                goto LABEL_926;
LABEL_929:
              while (*v873 <= v874 + v872)
              {
                *v868 = v874 + v872 + 1;
                ++v873;
                ++v872;
                if (v873 == v862)
                  goto LABEL_926;
              }
            }
          }
LABEL_918:
          ++v861;
        }
        while (v861 != v860);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(a1 + 6048) + 24))(a1 + 6048, (unint64_t)((char *)a2[1] - (char *)*a2) >> 2, (*(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144)) >> 2);
  }
}

void sub_20F5B5AD0(uint64_t a1, unsigned int **a2)
{
  char **v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _OWORD *v25;
  __int128 *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _QWORD v36[2];

  v5 = *(_BYTE **)(a1 + 88);
  v6 = *(_BYTE **)(a1 + 96);
  v4 = (char **)(a1 + 88);
  v7 = (v6 - v5) >> 4;
  v8 = v7 + (a2[1] - *a2) * *(unsigned int *)(a1 + 112);
  if (v8 > (uint64_t)(*(_QWORD *)(a1 + 104) - (_QWORD)v5) >> 4)
  {
    if (v8 >> 60)
      sub_20E867F44();
    v9 = 16 * v8;
    v10 = (char *)operator new(16 * v8);
    v11 = &v10[16 * v7];
    if (v6 != v5)
    {
      v12 = &v10[16 * v7];
      do
      {
        v11 = v12 - 16;
        *((_OWORD *)v12 - 1) = *((_OWORD *)v6 - 1);
        v6 -= 16;
        v12 -= 16;
      }
      while (v6 != v5);
    }
    *(_QWORD *)(a1 + 88) = v11;
    *(_QWORD *)(a1 + 96) = &v10[16 * v7];
    *(_QWORD *)(a1 + 104) = &v10[v9];
    if (v5)
      operator delete(v5);
  }
  v13 = *(_BYTE **)(a1 + 120);
  v14 = *(_BYTE **)(a1 + 128);
  v15 = (v14 - v13) >> 3;
  v16 = v15 + a2[1] - *a2;
  if (v16 > (uint64_t)(*(_QWORD *)(a1 + 136) - (_QWORD)v13) >> 3)
  {
    if (v16 >> 61)
      sub_20E867F44();
    v17 = 8 * v16;
    v18 = operator new(8 * v16);
    v19 = &v18[8 * v15];
    v20 = v19;
    if (v14 == v13)
      goto LABEL_18;
    v21 = v14 - v13 - 8;
    if (v21 >= 0x58)
    {
      v20 = &v18[8 * v15];
      if ((unint64_t)(v13 - v18) >= 0x20)
      {
        v22 = (v21 >> 3) + 1;
        v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        v24 = &v14[-v23];
        v20 = &v19[-v23];
        v25 = &v18[8 * v15 - 16];
        v26 = (__int128 *)(v14 - 16);
        v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *v26;
          *(v25 - 1) = *(v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 2;
          v27 -= 4;
        }
        while (v27);
        v14 = v24;
        if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_18:
          *(_QWORD *)(a1 + 120) = v20;
          *(_QWORD *)(a1 + 128) = v19;
          *(_QWORD *)(a1 + 136) = &v18[v17];
          if (v13)
            operator delete(v13);
          goto LABEL_20;
        }
      }
    }
    else
    {
      v20 = &v18[8 * v15];
    }
    do
    {
      v29 = *((_QWORD *)v14 - 1);
      v14 -= 8;
      *((_QWORD *)v20 - 1) = v29;
      v20 -= 8;
    }
    while (v14 != v13);
    goto LABEL_18;
  }
LABEL_20:
  v31 = *a2;
  v30 = a2[1];
  while (v31 != v30)
  {
    v32 = *v31++;
    ++*(_DWORD *)(a1 + 12);
    v33 = *(unsigned int *)(a1 + 112);
    v34 = *(_QWORD *)(a1 + 88) + 16 * v33 * v32;
    LODWORD(v36[0]) = 0;
    v36[1] = 0;
    sub_20F4F62E8(v4, v34, v33, (char *)v36);
    v35 = (_BYTE *)(*(_QWORD *)(a1 + 120) + 8 * v32);
    v36[0] = 0;
    sub_20F5B5D04((void **)(a1 + 120), v35, v36);
  }
}

char *sub_20F5B5D04(void **a1, _BYTE *a2, _QWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  int64_t v40;
  char *v41;
  size_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;

  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 3;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_QWORD *)v9 = *a3;
      a1[1] = v9 + 8;
      return v9;
    }
    v11 = v5 - (_QWORD)(v9 + 8);
    v12 = v11 >> 3;
    v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      v17 = a1[1];
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      v15 = v14 + v6 + 8;
      if (v5 > v15)
        v15 = (unint64_t)a1[1];
      v16 = v15 + ~v6 - v14;
      if (v16 >= 0x58)
      {
        v17 = a1[1];
        if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFF8) + 8 - v6] >= 0x20)
        {
          v45 = (v16 >> 3) + 1;
          v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
          v13 = (uint64_t *)((char *)v13 + v46);
          v17 = (_QWORD *)(v5 + v46);
          v47 = (_OWORD *)(v5 + 16);
          v48 = (__int128 *)(8 * v12 + 8 * v8 + v6 + 16);
          v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v50 = *v48;
            *(v47 - 1) = *(v48 - 1);
            *v47 = v50;
            v47 += 2;
            v48 += 2;
            v49 -= 4;
          }
          while (v49);
          if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_49;
        }
      }
      else
      {
        v17 = a1[1];
      }
      do
      {
        v51 = *v13++;
        *v17++ = v51;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_49:
    a1[1] = v17;
    if ((char *)v5 != v9 + 8)
      memmove((void *)(v5 - 8 * v12), v9, v11);
    *(_QWORD *)v9 = *a3;
    return v9;
  }
  v18 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v18 >> 61)
    sub_20E867F44();
  v20 = v10 - v6;
  if (v20 >> 2 > v18)
    v18 = v20 >> 2;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
    v21 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 61)
      sub_20E877A38();
    v22 = (char *)operator new(8 * v21);
    v23 = &v22[8 * v8];
    v24 = &v22[8 * v21];
    if (v8 != v21)
      goto LABEL_24;
  }
  else
  {
    v22 = 0;
    v23 = (char *)(8 * v8);
    v24 = 0;
    if (v8)
      goto LABEL_24;
  }
  if (v7 < 1)
  {
    if ((_BYTE *)v6 == a2)
      v44 = 1;
    else
      v44 = v7 >> 2;
    if (v44 >> 61)
      sub_20E877A38();
    v23 = (char *)operator new(8 * v44);
    v24 = &v23[8 * v44];
    if (v22)
    {
      operator delete(v22);
      v24 = &v23[8 * v44];
      v26 = (char *)*a1;
      *(_QWORD *)v23 = *a3;
      v27 = v23 + 8;
      v28 = v23;
      if (v26 != v9)
        goto LABEL_25;
      goto LABEL_31;
    }
  }
  else
  {
    v25 = v8 + 2;
    if (v8 >= -1)
      v25 = v8 + 1;
    v23 -= 8 * (v25 >> 1);
  }
LABEL_24:
  v26 = (char *)v6;
  *(_QWORD *)v23 = *a3;
  v27 = v23 + 8;
  v28 = v23;
  if ((char *)v6 != v9)
  {
LABEL_25:
    v29 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    v30 = v29 - v26 - 8;
    v31 = v9;
    v28 = v23;
    if (v30 < 0x58)
      goto LABEL_58;
    v31 = v9;
    v28 = v23;
    if ((unint64_t)(v29 - v23) < 0x20)
      goto LABEL_58;
    v32 = (v30 >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v31 = &v9[-v33];
    v28 = &v23[-v33];
    v34 = v23 - 16;
    v35 = (__int128 *)(v6 + 8 * v8 - 16);
    v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *v35;
      *((_OWORD *)v34 - 1) = *(v35 - 1);
      *(_OWORD *)v34 = v37;
      v34 -= 32;
      v35 -= 2;
      v36 -= 4;
    }
    while (v36);
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        v38 = *((_QWORD *)v31 - 1);
        v31 -= 8;
        *((_QWORD *)v28 - 1) = v38;
        v28 -= 8;
      }
      while (v31 != v26);
    }
  }
LABEL_31:
  v39 = (char *)a1[1];
  v40 = v39 - v9;
  if (v39 != v9)
  {
    v41 = v9;
    v42 = v39 - v9;
    v43 = v24;
    memmove(v27, v41, v42);
    v24 = v43;
    v26 = (char *)*a1;
  }
  *a1 = v28;
  a1[1] = &v27[v40];
  a1[2] = v24;
  if (v26)
    operator delete(v26);
  return v23;
}

void sub_20F5B605C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20F5B6074(_QWORD *result, uint64_t a2, _QWORD *a3, unsigned int *a4)
{
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const void *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const void *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const void *v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  const void *v67;
  uint64_t v68;

  v7 = result;
  v8 = result[19] - result[18];
  if ((v8 & 0x7FFFFFFF8) != 0)
  {
    v9 = a4[1] + *a4 + a4[2] + a4[3] + a4[4] + a4[5];
    v10 = 3 * *(_DWORD *)(a2 + 48);
    v11 = (v8 >> 3) - 1;
    do
    {
      v12 = v11;
      v13 = v7[18];
      v14 = *(unsigned int *)(v13 + 8 * v11);
      v15 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 76) + 8 * v14);
      v16 = (uint64_t)v15 + 8 * v10 + -8 * v14;
      if ((const void *)v16 != v15)
        result = memmove((void *)(*a3 + 8 * v9 + 8 * *(unsigned int *)(v13 + 8 * v11 + 4)), v15, v16 - (_QWORD)v15);
      --v11;
      v10 = v14;
    }
    while (v12);
  }
  v17 = v7[16] - v7[15];
  if ((v17 & 0x7FFFFFFF8) != 0)
  {
    v18 = a4[1] + *a4 + a4[2] + a4[3] + a4[4];
    v19 = 4 * *(_DWORD *)(a2 + 44);
    v20 = (v17 >> 3) - 1;
    do
    {
      v21 = v20;
      v22 = v7[15];
      v23 = *(unsigned int *)(v22 + 8 * v20);
      v24 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 72) + 8 * v23);
      v25 = (uint64_t)v24 + 8 * v19 + -8 * v23;
      if ((const void *)v25 != v24)
        result = memmove((void *)(*a3 + 8 * v18 + 8 * *(unsigned int *)(v22 + 8 * v20 + 4)), v24, v25 - (_QWORD)v24);
      --v20;
      v19 = v23;
    }
    while (v21);
  }
  v26 = v7[13] - v7[12];
  if ((v26 & 0x7FFFFFFF8) != 0)
  {
    v27 = a4[1] + *a4 + a4[2] + a4[3];
    v28 = 4 * *(_DWORD *)(a2 + 40);
    v29 = (v26 >> 3) - 1;
    do
    {
      v30 = v29;
      v31 = v7[12];
      v32 = *(unsigned int *)(v31 + 8 * v29);
      v33 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 68) + 8 * v32);
      v34 = (uint64_t)v33 + 8 * v28 + -8 * v32;
      if ((const void *)v34 != v33)
        result = memmove((void *)(*a3 + 8 * v27 + 8 * *(unsigned int *)(v31 + 8 * v29 + 4)), v33, v34 - (_QWORD)v33);
      --v29;
      v28 = v32;
    }
    while (v30);
  }
  v35 = v7[10] - v7[9];
  if ((v35 & 0x7FFFFFFF8) != 0)
  {
    v36 = a4[1] + *a4 + a4[2];
    v37 = 6 * *(_DWORD *)(a2 + 36);
    v38 = (v35 >> 3) - 1;
    do
    {
      v39 = v38;
      v40 = v7[9];
      v41 = *(unsigned int *)(v40 + 8 * v38);
      v42 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 64) + 8 * v41);
      v43 = (uint64_t)v42 + 8 * v37 + -8 * v41;
      if ((const void *)v43 != v42)
        result = memmove((void *)(*a3 + 8 * v36 + 8 * *(unsigned int *)(v40 + 8 * v38 + 4)), v42, v43 - (_QWORD)v42);
      --v38;
      v37 = v41;
    }
    while (v39);
  }
  v44 = v7[7] - v7[6];
  if ((v44 & 0x7FFFFFFF8) != 0)
  {
    v45 = a4[1] + *a4;
    v46 = *(unsigned int *)(a2 + 32);
    v47 = (v44 >> 3) - 1;
    do
    {
      v48 = v46;
      v49 = v47;
      v50 = v7[6];
      v46 = *(unsigned int *)(v50 + 8 * v47);
      v51 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 60) + 8 * v46);
      v52 = (uint64_t)v51 + 8 * v48 + -8 * v46;
      if ((const void *)v52 != v51)
        result = memmove((void *)(*a3 + 8 * v45 + 8 * *(unsigned int *)(v50 + 8 * v47 + 4)), v51, v52 - (_QWORD)v51);
      --v47;
    }
    while (v49);
  }
  v53 = v7[4] - v7[3];
  if ((v53 & 0x7FFFFFFF8) != 0)
  {
    v54 = *a4;
    v55 = 9 * *(_DWORD *)(a2 + 28);
    v56 = (v53 >> 3) - 1;
    do
    {
      v57 = v56;
      v58 = v7[3];
      v59 = *(unsigned int *)(v58 + 8 * v56);
      v60 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 56) + 8 * v59);
      v61 = (uint64_t)v60 + 8 * v55 + -8 * v59;
      if ((const void *)v61 != v60)
        result = memmove((void *)(*a3 + 8 * v54 + 8 * *(unsigned int *)(v58 + 8 * v56 + 4)), v60, v61 - (_QWORD)v60);
      --v56;
      v55 = v59;
    }
    while (v57);
  }
  v62 = v7[1] - *v7;
  if ((v62 & 0x7FFFFFFF8) != 0)
  {
    v63 = 6 * *(_DWORD *)(a2 + 24);
    v64 = (v62 >> 3) - 1;
    do
    {
      v65 = v64;
      v66 = *(unsigned int *)(*v7 + 8 * v64);
      v67 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 52) + 8 * v66);
      v68 = (uint64_t)v67 + 8 * v63 + -8 * v66;
      if ((const void *)v68 != v67)
        result = memmove((void *)(*a3 + 8 * *(unsigned int *)(*v7 + 8 * v64 + 4)), v67, v68 - (_QWORD)v67);
      --v64;
      v63 = v66;
    }
    while (v65);
  }
  return result;
}

uint64_t sub_20F5B64A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_QWORD *)a3 = *(_QWORD *)v5;
      *(_OWORD *)(a3 + 8) = *(_OWORD *)(v5 + 8);
      v6 = *(_OWORD *)(v5 + 88);
      v7 = *(_OWORD *)(v5 + 104);
      v8 = *(_OWORD *)(v5 + 120);
      *(_OWORD *)(a3 + 72) = *(_OWORD *)(v5 + 72);
      *(_OWORD *)(a3 + 120) = v8;
      *(_OWORD *)(a3 + 104) = v7;
      *(_OWORD *)(a3 + 88) = v6;
      v9 = *(_OWORD *)(v5 + 152);
      v10 = *(_OWORD *)(v5 + 168);
      v11 = *(_QWORD *)(v5 + 184);
      *(_OWORD *)(a3 + 136) = *(_OWORD *)(v5 + 136);
      *(_QWORD *)(a3 + 184) = v11;
      *(_OWORD *)(a3 + 168) = v10;
      *(_OWORD *)(a3 + 152) = v9;
      v12 = *(_OWORD *)(v5 + 24);
      v13 = *(_OWORD *)(v5 + 40);
      *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
      *(_OWORD *)(a3 + 40) = v13;
      *(_OWORD *)(a3 + 24) = v12;
      v14 = *(_OWORD *)(v5 + 192);
      *(_QWORD *)(v5 + 192) = 0;
      *(_QWORD *)(v5 + 200) = 0;
      v15 = *(std::__shared_weak_count **)(a3 + 200);
      *(_OWORD *)(a3 + 192) = v14;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      *(_QWORD *)(a3 + 208) = *(_QWORD *)(v5 + 208);
      *(_QWORD *)(a3 + 216) = *(_QWORD *)(v5 + 216);
      v18 = *(_OWORD *)(v5 + 224);
      v19 = *(_OWORD *)(v5 + 240);
      v20 = *(_OWORD *)(v5 + 272);
      *(_OWORD *)(a3 + 256) = *(_OWORD *)(v5 + 256);
      *(_OWORD *)(a3 + 272) = v20;
      *(_OWORD *)(a3 + 224) = v18;
      *(_OWORD *)(a3 + 240) = v19;
      v21 = *(_OWORD *)(v5 + 288);
      v22 = *(_OWORD *)(v5 + 304);
      v23 = *(_OWORD *)(v5 + 320);
      *(_QWORD *)(a3 + 336) = *(_QWORD *)(v5 + 336);
      *(_OWORD *)(a3 + 304) = v22;
      *(_OWORD *)(a3 + 320) = v23;
      *(_OWORD *)(a3 + 288) = v21;
      v25 = *(_OWORD *)(v5 + 424);
      v24 = *(_OWORD *)(v5 + 440);
      v26 = *(_OWORD *)(v5 + 408);
      *(_QWORD *)(a3 + 456) = *(_QWORD *)(v5 + 456);
      *(_OWORD *)(a3 + 424) = v25;
      *(_OWORD *)(a3 + 440) = v24;
      *(_OWORD *)(a3 + 408) = v26;
      v27 = *(_OWORD *)(v5 + 344);
      v28 = *(_OWORD *)(v5 + 360);
      v29 = *(_OWORD *)(v5 + 392);
      *(_OWORD *)(a3 + 376) = *(_OWORD *)(v5 + 376);
      *(_OWORD *)(a3 + 392) = v29;
      *(_OWORD *)(a3 + 344) = v27;
      *(_OWORD *)(a3 + 360) = v28;
      v30 = *(_QWORD *)(v5 + 464);
      *(_BYTE *)(a3 + 472) = *(_BYTE *)(v5 + 472);
      *(_QWORD *)(a3 + 464) = v30;
      v31 = *(_OWORD *)(v5 + 480);
      *(_QWORD *)(v5 + 480) = 0;
      *(_QWORD *)(v5 + 488) = 0;
      v32 = *(std::__shared_weak_count **)(a3 + 488);
      *(_OWORD *)(a3 + 480) = v31;
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      *(_BYTE *)(a3 + 496) = *(_BYTE *)(v5 + 496);
      v5 += 504;
      a3 += 504;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_20F5B6660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_QWORD *)a3 = *(_QWORD *)v5;
      *(_OWORD *)(a3 + 8) = *(_OWORD *)(v5 + 8);
      v6 = *(_OWORD *)(v5 + 56);
      v7 = *(_OWORD *)(v5 + 72);
      v8 = *(_QWORD *)(v5 + 88);
      *(_OWORD *)(a3 + 40) = *(_OWORD *)(v5 + 40);
      *(_QWORD *)(a3 + 88) = v8;
      *(_OWORD *)(a3 + 72) = v7;
      *(_OWORD *)(a3 + 56) = v6;
      *(_OWORD *)(a3 + 24) = *(_OWORD *)(v5 + 24);
      v9 = *(_OWORD *)(v5 + 96);
      *(_QWORD *)(a3 + 112) = *(_QWORD *)(v5 + 112);
      *(_OWORD *)(a3 + 96) = v9;
      v10 = *(_OWORD *)(v5 + 120);
      *(_QWORD *)(v5 + 120) = 0;
      *(_QWORD *)(v5 + 128) = 0;
      v11 = *(std::__shared_weak_count **)(a3 + 128);
      *(_OWORD *)(a3 + 120) = v10;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      *(_QWORD *)(a3 + 136) = *(_QWORD *)(v5 + 136);
      v14 = *(_OWORD *)(v5 + 144);
      v15 = *(_OWORD *)(v5 + 176);
      *(_OWORD *)(a3 + 160) = *(_OWORD *)(v5 + 160);
      *(_OWORD *)(a3 + 176) = v15;
      *(_OWORD *)(a3 + 144) = v14;
      v16 = *(_OWORD *)(v5 + 192);
      v17 = *(_OWORD *)(v5 + 224);
      *(_OWORD *)(a3 + 208) = *(_OWORD *)(v5 + 208);
      *(_OWORD *)(a3 + 224) = v17;
      *(_OWORD *)(a3 + 192) = v16;
      v18 = *(_QWORD *)(v5 + 240);
      *(_BYTE *)(a3 + 248) = *(_BYTE *)(v5 + 248);
      *(_QWORD *)(a3 + 240) = v18;
      v19 = *(_OWORD *)(v5 + 256);
      *(_QWORD *)(v5 + 256) = 0;
      *(_QWORD *)(v5 + 264) = 0;
      v20 = *(std::__shared_weak_count **)(a3 + 264);
      *(_OWORD *)(a3 + 256) = v19;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      *(_BYTE *)(a3 + 272) = *(_BYTE *)(v5 + 272);
      v5 += 280;
      a3 += 280;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_20F5B67C0(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void *v22;
  const void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;

  v4 = (_BYTE *)(a2 + 5840);
  v5 = (_BYTE *)(a1 + 5840);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = (_OWORD *)(a1 + 24);
  v7 = (_OWORD *)(a2 + 24);
  if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      v8 = *(_OWORD *)(a2 + 40);
      *v6 = *v7;
      *(_OWORD *)(a1 + 40) = v8;
    }
  }
  else if (*(_BYTE *)(a1 + 56))
  {
    *(_BYTE *)(a1 + 56) = 0;
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 40);
    *v6 = *v7;
    *(_OWORD *)(a1 + 40) = v9;
    *(_BYTE *)(a1 + 56) = 1;
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  memcpy((void *)(a1 + 80), (const void *)(a2 + 80), 0x708uLL);
  memcpy((void *)(a1 + 1880), (const void *)(a2 + 1880), 0x708uLL);
  v10 = *(_OWORD *)(a2 + 3680);
  v11 = *(_OWORD *)(a2 + 3696);
  v12 = *(_OWORD *)(a2 + 3712);
  *(_OWORD *)(a1 + 3728) = *(_OWORD *)(a2 + 3728);
  *(_OWORD *)(a1 + 3712) = v12;
  *(_OWORD *)(a1 + 3696) = v11;
  *(_OWORD *)(a1 + 3680) = v10;
  v13 = *(_OWORD *)(a2 + 3744);
  v14 = *(_OWORD *)(a2 + 3760);
  v15 = *(_OWORD *)(a2 + 3776);
  *(_QWORD *)(a1 + 3792) = *(_QWORD *)(a2 + 3792);
  *(_OWORD *)(a1 + 3776) = v15;
  *(_OWORD *)(a1 + 3760) = v14;
  *(_OWORD *)(a1 + 3744) = v13;
  v16 = *(_OWORD *)(a2 + 3800);
  v17 = *(_OWORD *)(a2 + 3816);
  v18 = *(_OWORD *)(a2 + 3848);
  *(_OWORD *)(a1 + 3832) = *(_OWORD *)(a2 + 3832);
  *(_OWORD *)(a1 + 3848) = v18;
  *(_OWORD *)(a1 + 3800) = v16;
  *(_OWORD *)(a1 + 3816) = v17;
  v20 = *(_OWORD *)(a2 + 3880);
  v19 = *(_OWORD *)(a2 + 3896);
  v21 = *(_OWORD *)(a2 + 3864);
  *(_QWORD *)(a1 + 3912) = *(_QWORD *)(a2 + 3912);
  *(_OWORD *)(a1 + 3880) = v20;
  *(_OWORD *)(a1 + 3896) = v19;
  *(_OWORD *)(a1 + 3864) = v21;
  v22 = (void *)(a1 + 3920);
  v23 = (const void *)(a2 + 3920);
  if (v5[1832] == v4[1832])
  {
    if (v5[1832])
    {
      memcpy(v22, v23, 0x708uLL);
      v24 = *(_OWORD *)(a2 + 5720);
      v25 = *(_OWORD *)(a2 + 5736);
      v26 = *(_OWORD *)(a2 + 5768);
      *(_OWORD *)(a1 + 5752) = *(_OWORD *)(a2 + 5752);
      *(_OWORD *)(a1 + 5768) = v26;
      *(_OWORD *)(a1 + 5720) = v24;
      *(_OWORD *)(a1 + 5736) = v25;
      v27 = *(_OWORD *)(a2 + 5784);
      v28 = *(_OWORD *)(a2 + 5800);
      v29 = *(_OWORD *)(a2 + 5816);
      *(_QWORD *)(a1 + 5832) = *(_QWORD *)(a2 + 5832);
      *(_OWORD *)(a1 + 5800) = v28;
      *(_OWORD *)(a1 + 5816) = v29;
      *(_OWORD *)(a1 + 5784) = v27;
      *v5 = *v4;
      v5[16] = v4[16];
      memcpy((void *)(a1 + 5864), (const void *)(a2 + 5864), 0x710uLL);
    }
  }
  else if (v5[1832])
  {
    v5[1832] = 0;
  }
  else
  {
    memcpy(v22, v23, 0x708uLL);
    v30 = *(_OWORD *)(a2 + 5720);
    v31 = *(_OWORD *)(a2 + 5736);
    v32 = *(_OWORD *)(a2 + 5768);
    *(_OWORD *)(a1 + 5752) = *(_OWORD *)(a2 + 5752);
    *(_OWORD *)(a1 + 5768) = v32;
    *(_OWORD *)(a1 + 5720) = v30;
    *(_OWORD *)(a1 + 5736) = v31;
    v33 = *(_OWORD *)(a2 + 5784);
    v34 = *(_OWORD *)(a2 + 5800);
    v35 = *(_OWORD *)(a2 + 5816);
    *(_QWORD *)(a1 + 5832) = *(_QWORD *)(a2 + 5832);
    *(_OWORD *)(a1 + 5800) = v34;
    *(_OWORD *)(a1 + 5816) = v35;
    *(_OWORD *)(a1 + 5784) = v33;
    *v5 = *v4;
    v5[16] = v4[16];
    *(_QWORD *)(a1 + 5848) = &off_24CA00398;
    memcpy((void *)(a1 + 5864), (const void *)(a2 + 5864), 0x710uLL);
    v5[1832] = 1;
  }
  *(_WORD *)(a1 + 7680) = *(_WORD *)(a2 + 7680);
  *(_QWORD *)(a1 + 7688) = *(_QWORD *)(a2 + 7688);
  *(_QWORD *)(a1 + 7696) = *(_QWORD *)(a2 + 7696);
  *(_QWORD *)(a1 + 7704) = *(_QWORD *)(a2 + 7704);
  *(_QWORD *)(a1 + 7712) = *(_QWORD *)(a2 + 7712);
  *(_QWORD *)(a1 + 7720) = *(_QWORD *)(a2 + 7720);
  v36 = *(_OWORD *)(a2 + 7728);
  v37 = *(_OWORD *)(a2 + 7744);
  v38 = *(_OWORD *)(a2 + 7760);
  *(_OWORD *)(a1 + 7776) = *(_OWORD *)(a2 + 7776);
  *(_OWORD *)(a1 + 7760) = v38;
  *(_OWORD *)(a1 + 7744) = v37;
  *(_OWORD *)(a1 + 7728) = v36;
  v39 = *(_OWORD *)(a2 + 7792);
  v40 = *(_OWORD *)(a2 + 7808);
  v41 = *(_OWORD *)(a2 + 7824);
  *(_QWORD *)(a1 + 7840) = *(_QWORD *)(a2 + 7840);
  *(_OWORD *)(a1 + 7824) = v41;
  *(_OWORD *)(a1 + 7808) = v40;
  *(_OWORD *)(a1 + 7792) = v39;
  v43 = *(_OWORD *)(a2 + 7928);
  v42 = *(_OWORD *)(a2 + 7944);
  v44 = *(_OWORD *)(a2 + 7912);
  *(_QWORD *)(a1 + 7960) = *(_QWORD *)(a2 + 7960);
  *(_OWORD *)(a1 + 7928) = v43;
  *(_OWORD *)(a1 + 7944) = v42;
  *(_OWORD *)(a1 + 7912) = v44;
  v45 = *(_OWORD *)(a2 + 7848);
  v46 = *(_OWORD *)(a2 + 7864);
  v47 = *(_OWORD *)(a2 + 7896);
  *(_OWORD *)(a1 + 7880) = *(_OWORD *)(a2 + 7880);
  *(_OWORD *)(a1 + 7896) = v47;
  *(_OWORD *)(a1 + 7848) = v45;
  *(_OWORD *)(a1 + 7864) = v46;
  v48 = *(_QWORD *)(a2 + 7968);
  *(_BYTE *)(a1 + 7976) = *(_BYTE *)(a2 + 7976);
  *(_QWORD *)(a1 + 7968) = v48;
  v49 = *(_OWORD *)(a2 + 7984);
  *(_OWORD *)(a2 + 7984) = 0u;
  v50 = *(std::__shared_weak_count **)(a1 + 7992);
  *(_OWORD *)(a1 + 7984) = v49;
  if (!v50)
    return a1;
  p_shared_owners = (unint64_t *)&v50->__shared_owners_;
  do
    v52 = __ldaxr(p_shared_owners);
  while (__stlxr(v52 - 1, p_shared_owners));
  if (v52)
    return a1;
  ((void (*)(std::__shared_weak_count *, const void *))v50->__on_zero_shared)(v50, v23);
  std::__shared_weak_count::__release_weak(v50);
  return a1;
}

uint64_t sub_20F5B6B10(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (_OWORD *)(a2 + 8);
  v5 = (_OWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0x708uLL);
  v6 = *(_OWORD *)(a2 + 1840);
  *(_QWORD *)(a1 + 1856) = *(_QWORD *)(a2 + 1856);
  *(_OWORD *)(a1 + 1840) = v6;
  v7 = *(_QWORD *)(a2 + 1880);
  v5[116] = v4[116];
  *(_QWORD *)(a1 + 1880) = v7;
  v8 = *(_OWORD *)(a2 + 1904);
  *(_OWORD *)(a1 + 1888) = *(_OWORD *)(a2 + 1888);
  *(_OWORD *)(a1 + 1904) = v8;
  *(_OWORD *)(a1 + 1920) = *(_OWORD *)(a2 + 1920);
  v9 = *(_OWORD *)(a2 + 1952);
  v10 = *(_OWORD *)(a2 + 1968);
  v11 = *(_QWORD *)(a2 + 1984);
  *(_OWORD *)(a1 + 1936) = *(_OWORD *)(a2 + 1936);
  *(_QWORD *)(a1 + 1984) = v11;
  *(_OWORD *)(a1 + 1968) = v10;
  *(_OWORD *)(a1 + 1952) = v9;
  v12 = v4[126];
  v13 = v4[127];
  v14 = v4[125];
  *(_QWORD *)(a1 + 2056) = *(_QWORD *)(a2 + 2056);
  v5[125] = v14;
  v5[127] = v13;
  v5[126] = v12;
  v5[124] = v4[124];
  v15 = *(_OWORD *)(a2 + 2080);
  v16 = *(_OWORD *)(a2 + 2096);
  v17 = *(_OWORD *)(a2 + 2112);
  *(_QWORD *)(a1 + 2128) = *(_QWORD *)(a2 + 2128);
  *(_OWORD *)(a1 + 2112) = v17;
  *(_OWORD *)(a1 + 2096) = v16;
  *(_OWORD *)(a1 + 2080) = v15;
  *(_OWORD *)(a1 + 2064) = *(_OWORD *)(a2 + 2064);
  v18 = v4[134];
  v19 = v4[135];
  v20 = v4[136];
  *(_QWORD *)(a1 + 2200) = *(_QWORD *)(a2 + 2200);
  v5[136] = v20;
  v5[135] = v19;
  v5[134] = v18;
  v5[133] = v4[133];
  v21 = *(_OWORD *)(a2 + 2224);
  v22 = *(_OWORD *)(a2 + 2240);
  v23 = *(_OWORD *)(a2 + 2256);
  *(_QWORD *)(a1 + 2272) = *(_QWORD *)(a2 + 2272);
  *(_OWORD *)(a1 + 2256) = v23;
  *(_OWORD *)(a1 + 2240) = v22;
  *(_OWORD *)(a1 + 2224) = v21;
  *(_OWORD *)(a1 + 2208) = *(_OWORD *)(a2 + 2208);
  v24 = v4[143];
  v25 = v4[144];
  v26 = v4[145];
  *(_QWORD *)(a1 + 2344) = *(_QWORD *)(a2 + 2344);
  v5[145] = v26;
  v5[144] = v25;
  v5[143] = v24;
  v5[142] = v4[142];
  v27 = *(_OWORD *)(a2 + 2368);
  v28 = *(_OWORD *)(a2 + 2384);
  v29 = *(_OWORD *)(a2 + 2400);
  *(_QWORD *)(a1 + 2416) = *(_QWORD *)(a2 + 2416);
  *(_OWORD *)(a1 + 2400) = v29;
  *(_OWORD *)(a1 + 2384) = v28;
  *(_OWORD *)(a1 + 2368) = v27;
  *(_OWORD *)(a1 + 2352) = *(_OWORD *)(a2 + 2352);
  v30 = v4[152];
  v31 = v4[153];
  v32 = v4[154];
  *(_QWORD *)(a1 + 2488) = *(_QWORD *)(a2 + 2488);
  v5[154] = v32;
  v5[153] = v31;
  v5[152] = v30;
  v5[151] = v4[151];
  memcpy((void *)(a1 + 2496), (const void *)(a2 + 2496), 0x288uLL);
  v33 = v4[196];
  *(_QWORD *)(a1 + 3160) = *(_QWORD *)(a2 + 3160);
  v5[196] = v33;
  v34 = *(_QWORD *)(a2 + 3184);
  *(_OWORD *)(a1 + 3168) = *(_OWORD *)(a2 + 3168);
  *(_QWORD *)(a1 + 3184) = v34;
  memcpy((void *)(a1 + 3192), (const void *)(a2 + 3192), 0x708uLL);
  v35 = *(_OWORD *)(a2 + 4992);
  *(_QWORD *)(a1 + 5008) = *(_QWORD *)(a2 + 5008);
  *(_OWORD *)(a1 + 4992) = v35;
  *(_QWORD *)(a1 + 5016) = *(_QWORD *)(a2 + 5016);
  *(_QWORD *)(a1 + 5024) = *(_QWORD *)(a2 + 5024);
  *(_QWORD *)(a1 + 5032) = *(_QWORD *)(a2 + 5032);
  *(_QWORD *)(a1 + 5040) = *(_QWORD *)(a2 + 5040);
  *(_QWORD *)(a1 + 5048) = *(_QWORD *)(a2 + 5048);
  v36 = *(_OWORD *)(a2 + 5072);
  v37 = *(_OWORD *)(a2 + 5088);
  v38 = *(_OWORD *)(a2 + 5104);
  *(_OWORD *)(a1 + 5056) = *(_OWORD *)(a2 + 5056);
  *(_OWORD *)(a1 + 5104) = v38;
  *(_OWORD *)(a1 + 5088) = v37;
  *(_OWORD *)(a1 + 5072) = v36;
  v39 = *(_OWORD *)(a2 + 5136);
  v40 = *(_OWORD *)(a2 + 5152);
  v41 = *(_QWORD *)(a2 + 5168);
  *(_OWORD *)(a1 + 5120) = *(_OWORD *)(a2 + 5120);
  *(_QWORD *)(a1 + 5168) = v41;
  *(_OWORD *)(a1 + 5152) = v40;
  *(_OWORD *)(a1 + 5136) = v39;
  v42 = v4[324];
  v43 = v4[325];
  v44 = v4[326];
  v5[323] = v4[323];
  v5[326] = v44;
  v5[325] = v43;
  v5[324] = v42;
  v45 = v4[328];
  v46 = v4[329];
  v47 = *(_QWORD *)(a2 + 5288);
  v5[327] = v4[327];
  *(_QWORD *)(a1 + 5288) = v47;
  v5[329] = v46;
  v5[328] = v45;
  v48 = *(_BYTE *)(a2 + 5304);
  *(_QWORD *)(a1 + 5296) = *(_QWORD *)(a2 + 5296);
  *(_BYTE *)(a1 + 5304) = v48;
  v49 = *(_OWORD *)(a2 + 5312);
  *(_OWORD *)(a2 + 5312) = 0u;
  v50 = *(std::__shared_weak_count **)(a1 + 5320);
  *(_OWORD *)(a1 + 5312) = v49;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(p_shared_owners);
    while (__stlxr(v52 - 1, p_shared_owners));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  *(_BYTE *)(a1 + 5328) = *(_BYTE *)(a2 + 5328);
  return a1;
}

uint64_t sub_20F5B6E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_QWORD *)a3 = *(_QWORD *)v5;
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(v5 + 8);
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(v5 + 16);
      v6 = *(_OWORD *)(v5 + 32);
      *(_QWORD *)(a3 + 48) = *(_QWORD *)(v5 + 48);
      *(_OWORD *)(a3 + 32) = v6;
      *(_QWORD *)(a3 + 56) = *(_QWORD *)(v5 + 56);
      *(_QWORD *)(a3 + 64) = *(_QWORD *)(v5 + 64);
      *(_QWORD *)(a3 + 72) = *(_QWORD *)(v5 + 72);
      *(_QWORD *)(a3 + 80) = *(_QWORD *)(v5 + 80);
      *(_QWORD *)(a3 + 88) = *(_QWORD *)(v5 + 88);
      *(_QWORD *)(a3 + 96) = *(_QWORD *)(v5 + 96);
      *(_QWORD *)(a3 + 104) = *(_QWORD *)(v5 + 104);
      *(_QWORD *)(a3 + 112) = *(_QWORD *)(v5 + 112);
      *(_QWORD *)(a3 + 120) = *(_QWORD *)(v5 + 120);
      *(_QWORD *)(a3 + 128) = *(_QWORD *)(v5 + 128);
      *(_QWORD *)(a3 + 136) = *(_QWORD *)(v5 + 136);
      *(_OWORD *)(a3 + 144) = *(_OWORD *)(v5 + 144);
      *(_OWORD *)(a3 + 160) = *(_OWORD *)(v5 + 160);
      v7 = *(_QWORD *)(v5 + 176);
      *(_BYTE *)(a3 + 184) = *(_BYTE *)(v5 + 184);
      *(_QWORD *)(a3 + 176) = v7;
      v8 = *(_OWORD *)(v5 + 192);
      *(_QWORD *)(v5 + 192) = 0;
      *(_QWORD *)(v5 + 200) = 0;
      v9 = *(std::__shared_weak_count **)(a3 + 200);
      *(_OWORD *)(a3 + 192) = v8;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      *(_BYTE *)(a3 + 208) = *(_BYTE *)(v5 + 208);
      v5 += 216;
      a3 += 216;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_20F5B6F80(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char **v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[3];
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;

  v4 = *(_DWORD *)(a1 + 32);
  if (!v4)
  {
    v9 = 0;
    goto LABEL_12;
  }
  v5 = v4 - 1;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = v6 - 1;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1)) + 184 * (v6 - 1) != a2)
  {
    if (v4 == 1)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v12 = 8;
      do
      {
        v8 += v12;
        v12 *= 2;
        --v5;
      }
      while (v5);
    }
    v9 = v8 + v6;
LABEL_12:
    v15 = *(char **)(a1 + 48);
    v14 = *(char **)(a1 + 56);
    v13 = (char **)(a1 + 48);
    v16 = (v14 - v15) >> 3;
    if (v9 - v16 == 1)
    {
      *(_QWORD *)(a1 + 56) = v15;
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      return;
    }
    v17 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v14 < v17)
    {
      *(_QWORD *)v14 = a2;
      v18 = (uint64_t)(v14 + 8);
LABEL_45:
      *(_QWORD *)(a1 + 56) = v18;
      return;
    }
    v19 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
      sub_20E867F44();
    v20 = v17 - (_QWORD)v15;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        sub_20E877A38();
      v22 = (char *)operator new(8 * v21);
      v23 = &v22[8 * v16];
      v24 = &v22[8 * v21];
      *(_QWORD *)v23 = a2;
      v18 = (uint64_t)(v23 + 8);
      v25 = (char *)(v14 - v15);
      if (v14 == v15)
        goto LABEL_43;
    }
    else
    {
      v22 = 0;
      v23 = (char *)(8 * v16);
      v24 = 0;
      *(_QWORD *)(8 * v16) = a2;
      v18 = 8 * v16 + 8;
      v25 = (char *)(v14 - v15);
      if (v14 == v15)
      {
LABEL_43:
        *(_QWORD *)(a1 + 48) = v23;
        *(_QWORD *)(a1 + 56) = v18;
        *(_QWORD *)(a1 + 64) = v24;
        if (v14)
          operator delete(v14);
        goto LABEL_45;
      }
    }
    v33 = (unint64_t)(v25 - 8);
    if (v33 < 0x58)
      goto LABEL_53;
    if ((unint64_t)(v15 - v22) < 0x20)
      goto LABEL_53;
    v34 = (v33 >> 3) + 1;
    v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
    v36 = &v14[-v35];
    v23 -= v35;
    v37 = &v22[8 * v16 - 16];
    v38 = v14 - 16;
    v39 = v34 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v40 = *(_OWORD *)v38;
      *((_OWORD *)v37 - 1) = *((_OWORD *)v38 - 1);
      *(_OWORD *)v37 = v40;
      v37 -= 32;
      v38 -= 32;
      v39 -= 4;
    }
    while (v39);
    v14 = v36;
    if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_53:
      do
      {
        v41 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *((_QWORD *)v23 - 1) = v41;
        v23 -= 8;
      }
      while (v14 != v15);
    }
    v14 = *v13;
    goto LABEL_43;
  }
  *(_QWORD *)(a1 + 40) = v7;
  if (v6 != 1)
  {
    v10 = 0;
    v11 = v4 - 1;
    if (v4 == 1)
      goto LABEL_30;
    goto LABEL_28;
  }
  *(_DWORD *)(a1 + 32) = v5;
  if (v4 == 1)
  {
    v28 = 0;
    v29 = *(_QWORD *)(a1 + 48);
    v30 = *(char **)(a1 + 56);
    v31 = (unint64_t)&v30[-v29];
    if ((uint64_t)&v30[-v29] >> 3)
      return;
    goto LABEL_31;
  }
  v7 = 8 << (v4 - 2);
  *(_QWORD *)(a1 + 40) = v7;
  v26 = v4 - 1;
  v10 = 0;
  v11 = v26 - 1;
  if (v26 != 1)
  {
LABEL_28:
    v27 = 8;
    do
    {
      v10 += v27;
      v27 *= 2;
      --v11;
    }
    while (v11);
  }
LABEL_30:
  v28 = v10 + v7;
  v29 = *(_QWORD *)(a1 + 48);
  v30 = *(char **)(a1 + 56);
  v31 = (unint64_t)&v30[-v29];
  if (v28 != (uint64_t)&v30[-v29] >> 3)
    return;
LABEL_31:
  v42 = a1;
  v48 = &v42;
  v47 = a1;
  if ((char *)v29 != v30 && v31 >= 0xF0)
  {
    sub_20F4F3E4C(v29, v30, (uint64_t)v44, 126 - 2 * __clz(v28), 1);
    v32 = *(_QWORD *)(a1 + 48);
    v45 = *(_QWORD *)(a1 + 56);
    v46 = v32;
    v44[0] = v32;
    v44[1] = v45;
    v44[2] = &v48;
    v43[0] = a1;
    v43[1] = (uint64_t)&v46;
    v43[2] = (uint64_t)&v45;
    sub_20F4F3CDC(&v47, (uint64_t)v44, v43);
    v29 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = v29;
}

void sub_20F5B7280(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char **v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[3];
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;

  v4 = *(_DWORD *)(a1 + 32);
  if (!v4)
  {
    v9 = 0;
    goto LABEL_12;
  }
  v5 = v4 - 1;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = v6 - 1;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1)) + 56 * (v6 - 1) != a2)
  {
    if (v4 == 1)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v12 = 8;
      do
      {
        v8 += v12;
        v12 *= 2;
        --v5;
      }
      while (v5);
    }
    v9 = v8 + v6;
LABEL_12:
    v15 = *(char **)(a1 + 48);
    v14 = *(char **)(a1 + 56);
    v13 = (char **)(a1 + 48);
    v16 = (v14 - v15) >> 3;
    if (v9 - v16 == 1)
    {
      *(_QWORD *)(a1 + 56) = v15;
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      return;
    }
    v17 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v14 < v17)
    {
      *(_QWORD *)v14 = a2;
      v18 = (uint64_t)(v14 + 8);
LABEL_45:
      *(_QWORD *)(a1 + 56) = v18;
      return;
    }
    v19 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
      sub_20E867F44();
    v20 = v17 - (_QWORD)v15;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        sub_20E877A38();
      v22 = (char *)operator new(8 * v21);
      v23 = &v22[8 * v16];
      v24 = &v22[8 * v21];
      *(_QWORD *)v23 = a2;
      v18 = (uint64_t)(v23 + 8);
      v25 = (char *)(v14 - v15);
      if (v14 == v15)
        goto LABEL_43;
    }
    else
    {
      v22 = 0;
      v23 = (char *)(8 * v16);
      v24 = 0;
      *(_QWORD *)(8 * v16) = a2;
      v18 = 8 * v16 + 8;
      v25 = (char *)(v14 - v15);
      if (v14 == v15)
      {
LABEL_43:
        *(_QWORD *)(a1 + 48) = v23;
        *(_QWORD *)(a1 + 56) = v18;
        *(_QWORD *)(a1 + 64) = v24;
        if (v14)
          operator delete(v14);
        goto LABEL_45;
      }
    }
    v33 = (unint64_t)(v25 - 8);
    if (v33 < 0x58)
      goto LABEL_53;
    if ((unint64_t)(v15 - v22) < 0x20)
      goto LABEL_53;
    v34 = (v33 >> 3) + 1;
    v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
    v36 = &v14[-v35];
    v23 -= v35;
    v37 = &v22[8 * v16 - 16];
    v38 = v14 - 16;
    v39 = v34 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v40 = *(_OWORD *)v38;
      *((_OWORD *)v37 - 1) = *((_OWORD *)v38 - 1);
      *(_OWORD *)v37 = v40;
      v37 -= 32;
      v38 -= 32;
      v39 -= 4;
    }
    while (v39);
    v14 = v36;
    if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_53:
      do
      {
        v41 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *((_QWORD *)v23 - 1) = v41;
        v23 -= 8;
      }
      while (v14 != v15);
    }
    v14 = *v13;
    goto LABEL_43;
  }
  *(_QWORD *)(a1 + 40) = v7;
  if (v6 != 1)
  {
    v10 = 0;
    v11 = v4 - 1;
    if (v4 == 1)
      goto LABEL_30;
    goto LABEL_28;
  }
  *(_DWORD *)(a1 + 32) = v5;
  if (v4 == 1)
  {
    v28 = 0;
    v29 = *(_QWORD *)(a1 + 48);
    v30 = *(char **)(a1 + 56);
    v31 = (unint64_t)&v30[-v29];
    if ((uint64_t)&v30[-v29] >> 3)
      return;
    goto LABEL_31;
  }
  v7 = 8 << (v4 - 2);
  *(_QWORD *)(a1 + 40) = v7;
  v26 = v4 - 1;
  v10 = 0;
  v11 = v26 - 1;
  if (v26 != 1)
  {
LABEL_28:
    v27 = 8;
    do
    {
      v10 += v27;
      v27 *= 2;
      --v11;
    }
    while (v11);
  }
LABEL_30:
  v28 = v10 + v7;
  v29 = *(_QWORD *)(a1 + 48);
  v30 = *(char **)(a1 + 56);
  v31 = (unint64_t)&v30[-v29];
  if (v28 != (uint64_t)&v30[-v29] >> 3)
    return;
LABEL_31:
  v42 = a1;
  v48 = &v42;
  v47 = a1;
  if ((char *)v29 != v30 && v31 >= 0xF0)
  {
    sub_20F4F3118(v29, v30, (uint64_t)v44, 126 - 2 * __clz(v28), 1);
    v32 = *(_QWORD *)(a1 + 48);
    v45 = *(_QWORD *)(a1 + 56);
    v46 = v32;
    v44[0] = v32;
    v44[1] = v45;
    v44[2] = &v48;
    v43[0] = a1;
    v43[1] = (uint64_t)&v46;
    v43[2] = (uint64_t)&v45;
    sub_20F4F2FA8(&v47, (uint64_t)v44, v43);
    v29 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = v29;
}

void sub_20F5B7580(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char **v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[3];
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;

  v4 = *(_DWORD *)(a1 + 32);
  if (!v4)
  {
    v9 = 0;
    goto LABEL_12;
  }
  v5 = v4 - 1;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = v6 - 1;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1)) + 232 * (v6 - 1) != a2)
  {
    if (v4 == 1)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v12 = 8;
      do
      {
        v8 += v12;
        v12 *= 2;
        --v5;
      }
      while (v5);
    }
    v9 = v8 + v6;
LABEL_12:
    v15 = *(char **)(a1 + 48);
    v14 = *(char **)(a1 + 56);
    v13 = (char **)(a1 + 48);
    v16 = (v14 - v15) >> 3;
    if (v9 - v16 == 1)
    {
      *(_QWORD *)(a1 + 56) = v15;
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      return;
    }
    v17 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v14 < v17)
    {
      *(_QWORD *)v14 = a2;
      v18 = (uint64_t)(v14 + 8);
LABEL_45:
      *(_QWORD *)(a1 + 56) = v18;
      return;
    }
    v19 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
      sub_20E867F44();
    v20 = v17 - (_QWORD)v15;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        sub_20E877A38();
      v22 = (char *)operator new(8 * v21);
      v23 = &v22[8 * v16];
      v24 = &v22[8 * v21];
      *(_QWORD *)v23 = a2;
      v18 = (uint64_t)(v23 + 8);
      v25 = (char *)(v14 - v15);
      if (v14 == v15)
        goto LABEL_43;
    }
    else
    {
      v22 = 0;
      v23 = (char *)(8 * v16);
      v24 = 0;
      *(_QWORD *)(8 * v16) = a2;
      v18 = 8 * v16 + 8;
      v25 = (char *)(v14 - v15);
      if (v14 == v15)
      {
LABEL_43:
        *(_QWORD *)(a1 + 48) = v23;
        *(_QWORD *)(a1 + 56) = v18;
        *(_QWORD *)(a1 + 64) = v24;
        if (v14)
          operator delete(v14);
        goto LABEL_45;
      }
    }
    v33 = (unint64_t)(v25 - 8);
    if (v33 < 0x58)
      goto LABEL_53;
    if ((unint64_t)(v15 - v22) < 0x20)
      goto LABEL_53;
    v34 = (v33 >> 3) + 1;
    v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
    v36 = &v14[-v35];
    v23 -= v35;
    v37 = &v22[8 * v16 - 16];
    v38 = v14 - 16;
    v39 = v34 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v40 = *(_OWORD *)v38;
      *((_OWORD *)v37 - 1) = *((_OWORD *)v38 - 1);
      *(_OWORD *)v37 = v40;
      v37 -= 32;
      v38 -= 32;
      v39 -= 4;
    }
    while (v39);
    v14 = v36;
    if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_53:
      do
      {
        v41 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *((_QWORD *)v23 - 1) = v41;
        v23 -= 8;
      }
      while (v14 != v15);
    }
    v14 = *v13;
    goto LABEL_43;
  }
  *(_QWORD *)(a1 + 40) = v7;
  if (v6 != 1)
  {
    v10 = 0;
    v11 = v4 - 1;
    if (v4 == 1)
      goto LABEL_30;
    goto LABEL_28;
  }
  *(_DWORD *)(a1 + 32) = v5;
  if (v4 == 1)
  {
    v28 = 0;
    v29 = *(_QWORD *)(a1 + 48);
    v30 = *(char **)(a1 + 56);
    v31 = (unint64_t)&v30[-v29];
    if ((uint64_t)&v30[-v29] >> 3)
      return;
    goto LABEL_31;
  }
  v7 = 8 << (v4 - 2);
  *(_QWORD *)(a1 + 40) = v7;
  v26 = v4 - 1;
  v10 = 0;
  v11 = v26 - 1;
  if (v26 != 1)
  {
LABEL_28:
    v27 = 8;
    do
    {
      v10 += v27;
      v27 *= 2;
      --v11;
    }
    while (v11);
  }
LABEL_30:
  v28 = v10 + v7;
  v29 = *(_QWORD *)(a1 + 48);
  v30 = *(char **)(a1 + 56);
  v31 = (unint64_t)&v30[-v29];
  if (v28 != (uint64_t)&v30[-v29] >> 3)
    return;
LABEL_31:
  v42 = a1;
  v48 = &v42;
  v47 = a1;
  if ((char *)v29 != v30 && v31 >= 0xF0)
  {
    sub_20F4F23E4(v29, v30, (uint64_t)v44, 126 - 2 * __clz(v28), 1);
    v32 = *(_QWORD *)(a1 + 48);
    v45 = *(_QWORD *)(a1 + 56);
    v46 = v32;
    v44[0] = v32;
    v44[1] = v45;
    v44[2] = &v48;
    v43[0] = a1;
    v43[1] = (uint64_t)&v46;
    v43[2] = (uint64_t)&v45;
    sub_20F3C8FCC(&v47, (uint64_t)v44, v43);
    v29 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = v29;
}

void sub_20F5B7880(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v4 = (_QWORD *)a2[15];
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = (void *)a2[13];
  a2[13] = 0;
  if (v6)
    operator delete(v6);
  v7 = (void *)a2[10];
  if (v7)
  {
    a2[11] = v7;
    operator delete(v7);
  }
  v8 = *(_DWORD *)(a1 + 32);
  if (!v8)
  {
    v13 = 0;
    goto LABEL_18;
  }
  v9 = v8 - 1;
  v10 = *(_QWORD *)(a1 + 40);
  v11 = v10 - 1;
  if ((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v8 - 1)) + 200 * (v10 - 1)) != a2)
  {
    if (v8 == 1)
    {
      v12 = 0;
    }
    else
    {
      v12 = 0;
      v16 = 8;
      do
      {
        v12 += v16;
        v16 *= 2;
        --v9;
      }
      while (v9);
    }
    v13 = v12 + v10;
LABEL_18:
    v18 = *(char **)(a1 + 48);
    v17 = *(char **)(a1 + 56);
    v19 = (v17 - v18) >> 3;
    if (v13 - v19 == 1)
    {
      *(_QWORD *)(a1 + 56) = v18;
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      return;
    }
    v20 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v17 < v20)
    {
      *(_QWORD *)v17 = a2;
      v21 = (uint64_t)(v17 + 8);
LABEL_48:
      *(_QWORD *)(a1 + 56) = v21;
      return;
    }
    v22 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61)
      sub_20E867F44();
    v23 = v20 - (_QWORD)v18;
    if (v23 >> 2 > v22)
      v22 = v23 >> 2;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 61)
        sub_20E877A38();
      v25 = (char *)operator new(8 * v24);
      v26 = &v25[8 * v19];
      v27 = &v25[8 * v24];
      *(_QWORD *)v26 = a2;
      v21 = (uint64_t)(v26 + 8);
      v28 = (char *)(v17 - v18);
      if (v17 == v18)
        goto LABEL_46;
    }
    else
    {
      v25 = 0;
      v26 = (char *)(8 * v19);
      v27 = 0;
      *(_QWORD *)(8 * v19) = a2;
      v21 = 8 * v19 + 8;
      v28 = (char *)(v17 - v18);
      if (v17 == v18)
      {
LABEL_46:
        *(_QWORD *)(a1 + 48) = v26;
        *(_QWORD *)(a1 + 56) = v21;
        *(_QWORD *)(a1 + 64) = v27;
        if (v17)
          operator delete(v17);
        goto LABEL_48;
      }
    }
    v31 = (unint64_t)(v28 - 8);
    if (v31 < 0x58)
      goto LABEL_56;
    if ((unint64_t)(v18 - v25) < 0x20)
      goto LABEL_56;
    v32 = (v31 >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v34 = &v17[-v33];
    v26 -= v33;
    v35 = &v25[8 * v19 - 16];
    v36 = v17 - 16;
    v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v38 = *(_OWORD *)v36;
      *((_OWORD *)v35 - 1) = *((_OWORD *)v36 - 1);
      *(_OWORD *)v35 = v38;
      v35 -= 32;
      v36 -= 32;
      v37 -= 4;
    }
    while (v37);
    v17 = v34;
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_56:
      do
      {
        v39 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v26 - 1) = v39;
        v26 -= 8;
      }
      while (v17 != v18);
    }
    v17 = *(char **)(a1 + 48);
    goto LABEL_46;
  }
  *(_QWORD *)(a1 + 40) = v11;
  if (v10 != 1)
  {
    v14 = 0;
    v15 = v8 - 1;
    if (v8 == 1)
      goto LABEL_36;
    goto LABEL_34;
  }
  *(_DWORD *)(a1 + 32) = v9;
  if (v8 != 1)
  {
    v11 = 8 << (v8 - 2);
    *(_QWORD *)(a1 + 40) = v11;
    v29 = v8 - 1;
    v14 = 0;
    v15 = v29 - 1;
    if (v29 == 1)
      goto LABEL_36;
LABEL_34:
    v30 = 8;
    do
    {
      v14 += v30;
      v30 *= 2;
      --v15;
    }
    while (v15);
LABEL_36:
    if (v14 + v11 != (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3)
      return;
LABEL_37:
    v40 = a1;
    sub_20F4F10A8(a1, (uint64_t)&v40);
    *(_DWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
    return;
  }
  if (!((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3))
    goto LABEL_37;
}

void sub_20F5B7B5C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v4 = (_QWORD *)a2[37];
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = (void *)a2[35];
  a2[35] = 0;
  if (v6)
    operator delete(v6);
  v7 = (void *)a2[32];
  if (v7)
  {
    a2[33] = v7;
    operator delete(v7);
  }
  v8 = *(_DWORD *)(a1 + 32);
  if (!v8)
  {
    v13 = 0;
    goto LABEL_18;
  }
  v9 = v8 - 1;
  v10 = *(_QWORD *)(a1 + 40);
  v11 = v10 - 1;
  if ((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v8 - 1)) + 552 * (v10 - 1)) != a2)
  {
    if (v8 == 1)
    {
      v12 = 0;
    }
    else
    {
      v12 = 0;
      v16 = 8;
      do
      {
        v12 += v16;
        v16 *= 2;
        --v9;
      }
      while (v9);
    }
    v13 = v12 + v10;
LABEL_18:
    v18 = *(char **)(a1 + 48);
    v17 = *(char **)(a1 + 56);
    v19 = (v17 - v18) >> 3;
    if (v13 - v19 == 1)
    {
      *(_QWORD *)(a1 + 56) = v18;
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      return;
    }
    v20 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v17 < v20)
    {
      *(_QWORD *)v17 = a2;
      v21 = (uint64_t)(v17 + 8);
LABEL_48:
      *(_QWORD *)(a1 + 56) = v21;
      return;
    }
    v22 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61)
      sub_20E867F44();
    v23 = v20 - (_QWORD)v18;
    if (v23 >> 2 > v22)
      v22 = v23 >> 2;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 61)
        sub_20E877A38();
      v25 = (char *)operator new(8 * v24);
      v26 = &v25[8 * v19];
      v27 = &v25[8 * v24];
      *(_QWORD *)v26 = a2;
      v21 = (uint64_t)(v26 + 8);
      v28 = (char *)(v17 - v18);
      if (v17 == v18)
        goto LABEL_46;
    }
    else
    {
      v25 = 0;
      v26 = (char *)(8 * v19);
      v27 = 0;
      *(_QWORD *)(8 * v19) = a2;
      v21 = 8 * v19 + 8;
      v28 = (char *)(v17 - v18);
      if (v17 == v18)
      {
LABEL_46:
        *(_QWORD *)(a1 + 48) = v26;
        *(_QWORD *)(a1 + 56) = v21;
        *(_QWORD *)(a1 + 64) = v27;
        if (v17)
          operator delete(v17);
        goto LABEL_48;
      }
    }
    v31 = (unint64_t)(v28 - 8);
    if (v31 < 0x58)
      goto LABEL_56;
    if ((unint64_t)(v18 - v25) < 0x20)
      goto LABEL_56;
    v32 = (v31 >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v34 = &v17[-v33];
    v26 -= v33;
    v35 = &v25[8 * v19 - 16];
    v36 = v17 - 16;
    v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v38 = *(_OWORD *)v36;
      *((_OWORD *)v35 - 1) = *((_OWORD *)v36 - 1);
      *(_OWORD *)v35 = v38;
      v35 -= 32;
      v36 -= 32;
      v37 -= 4;
    }
    while (v37);
    v17 = v34;
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_56:
      do
      {
        v39 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v26 - 1) = v39;
        v26 -= 8;
      }
      while (v17 != v18);
    }
    v17 = *(char **)(a1 + 48);
    goto LABEL_46;
  }
  *(_QWORD *)(a1 + 40) = v11;
  if (v10 != 1)
  {
    v14 = 0;
    v15 = v8 - 1;
    if (v8 == 1)
      goto LABEL_36;
    goto LABEL_34;
  }
  *(_DWORD *)(a1 + 32) = v9;
  if (v8 != 1)
  {
    v11 = 8 << (v8 - 2);
    *(_QWORD *)(a1 + 40) = v11;
    v29 = v8 - 1;
    v14 = 0;
    v15 = v29 - 1;
    if (v29 == 1)
      goto LABEL_36;
LABEL_34:
    v30 = 8;
    do
    {
      v14 += v30;
      v30 *= 2;
      --v15;
    }
    while (v15);
LABEL_36:
    if (v14 + v11 != (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3)
      return;
LABEL_37:
    v40 = a1;
    sub_20F4EFDC4(a1, (uint64_t)&v40);
    *(_DWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
    return;
  }
  if (!((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3))
    goto LABEL_37;
}

void sub_20F5B7E38(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v4 = (_QWORD *)a2[18];
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = (void *)a2[16];
  a2[16] = 0;
  if (v6)
    operator delete(v6);
  v7 = (void *)a2[13];
  if (v7)
  {
    a2[14] = v7;
    operator delete(v7);
  }
  v8 = *(_DWORD *)(a1 + 32);
  if (!v8)
  {
    v13 = 0;
    goto LABEL_18;
  }
  v9 = v8 - 1;
  v10 = *(_QWORD *)(a1 + 40);
  v11 = v10 - 1;
  if ((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v8 - 1)) + 248 * (v10 - 1)) != a2)
  {
    if (v8 == 1)
    {
      v12 = 0;
    }
    else
    {
      v12 = 0;
      v16 = 8;
      do
      {
        v12 += v16;
        v16 *= 2;
        --v9;
      }
      while (v9);
    }
    v13 = v12 + v10;
LABEL_18:
    v18 = *(char **)(a1 + 48);
    v17 = *(char **)(a1 + 56);
    v19 = (v17 - v18) >> 3;
    if (v13 - v19 == 1)
    {
      *(_QWORD *)(a1 + 56) = v18;
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      return;
    }
    v20 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v17 < v20)
    {
      *(_QWORD *)v17 = a2;
      v21 = (uint64_t)(v17 + 8);
LABEL_48:
      *(_QWORD *)(a1 + 56) = v21;
      return;
    }
    v22 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61)
      sub_20E867F44();
    v23 = v20 - (_QWORD)v18;
    if (v23 >> 2 > v22)
      v22 = v23 >> 2;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 61)
        sub_20E877A38();
      v25 = (char *)operator new(8 * v24);
      v26 = &v25[8 * v19];
      v27 = &v25[8 * v24];
      *(_QWORD *)v26 = a2;
      v21 = (uint64_t)(v26 + 8);
      v28 = (char *)(v17 - v18);
      if (v17 == v18)
        goto LABEL_46;
    }
    else
    {
      v25 = 0;
      v26 = (char *)(8 * v19);
      v27 = 0;
      *(_QWORD *)(8 * v19) = a2;
      v21 = 8 * v19 + 8;
      v28 = (char *)(v17 - v18);
      if (v17 == v18)
      {
LABEL_46:
        *(_QWORD *)(a1 + 48) = v26;
        *(_QWORD *)(a1 + 56) = v21;
        *(_QWORD *)(a1 + 64) = v27;
        if (v17)
          operator delete(v17);
        goto LABEL_48;
      }
    }
    v31 = (unint64_t)(v28 - 8);
    if (v31 < 0x58)
      goto LABEL_56;
    if ((unint64_t)(v18 - v25) < 0x20)
      goto LABEL_56;
    v32 = (v31 >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v34 = &v17[-v33];
    v26 -= v33;
    v35 = &v25[8 * v19 - 16];
    v36 = v17 - 16;
    v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v38 = *(_OWORD *)v36;
      *((_OWORD *)v35 - 1) = *((_OWORD *)v36 - 1);
      *(_OWORD *)v35 = v38;
      v35 -= 32;
      v36 -= 32;
      v37 -= 4;
    }
    while (v37);
    v17 = v34;
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_56:
      do
      {
        v39 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v26 - 1) = v39;
        v26 -= 8;
      }
      while (v17 != v18);
    }
    v17 = *(char **)(a1 + 48);
    goto LABEL_46;
  }
  *(_QWORD *)(a1 + 40) = v11;
  if (v10 != 1)
  {
    v14 = 0;
    v15 = v8 - 1;
    if (v8 == 1)
      goto LABEL_36;
    goto LABEL_34;
  }
  *(_DWORD *)(a1 + 32) = v9;
  if (v8 != 1)
  {
    v11 = 8 << (v8 - 2);
    *(_QWORD *)(a1 + 40) = v11;
    v29 = v8 - 1;
    v14 = 0;
    v15 = v29 - 1;
    if (v29 == 1)
      goto LABEL_36;
LABEL_34:
    v30 = 8;
    do
    {
      v14 += v30;
      v30 *= 2;
      --v15;
    }
    while (v15);
LABEL_36:
    if (v14 + v11 != (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3)
      return;
LABEL_37:
    v40 = a1;
    sub_20F4EEAE0(a1, (uint64_t)&v40);
    *(_DWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
    return;
  }
  if (!((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3))
    goto LABEL_37;
}

BOOL sub_20F5B8114(_QWORD *a1, int *a2, _DWORD *a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;

  v4 = *a2;
  v5 = a1[1];
  v6 = a1[2];
  if (v5 == v6)
  {
    v7 = 0;
    *a3 = 0;
    *a2 = v4;
    v11 = a2[1];
    v12 = a1[13];
    v13 = a1[14];
    if (v12 != v13)
      goto LABEL_10;
LABEL_51:
    a3[1] = 0;
    a2[1] = v11;
    v17 = a2[2];
    v18 = a1[25];
    v19 = a1[26];
    if (v18 != v19)
      goto LABEL_18;
LABEL_52:
    a3[2] = 0;
    a2[2] = v17;
    v23 = a2[3];
    v24 = a1[37];
    v25 = a1[38];
    if (v24 != v25)
      goto LABEL_26;
LABEL_53:
    a3[3] = 0;
    a2[3] = v23;
    v29 = a2[4];
    v30 = a1[49];
    v31 = a1[50];
    if (v30 != v31)
      goto LABEL_34;
    goto LABEL_54;
  }
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = *(_QWORD *)(v5 + 8);
    if ((*(_BYTE *)(v9 + 4) & 6) != 0)
    {
      v7 = 1;
      ++v4;
    }
    if (*(_BYTE *)(v9 + 20))
      v10 = 1;
    else
      v10 = a4;
    v8 += v10;
    v5 += 16;
  }
  while (v5 != v6);
  *a3 = v8;
  *a2 = v4;
  v11 = a2[1];
  v12 = a1[13];
  v13 = a1[14];
  if (v12 == v13)
    goto LABEL_51;
LABEL_10:
  v14 = 0;
  do
  {
    v15 = *(_QWORD *)(v12 + 8);
    if ((*(_BYTE *)(v15 + 4) & 6) != 0)
    {
      v7 = 1;
      ++v11;
    }
    if (*(_BYTE *)(v15 + 20))
      v16 = 1;
    else
      v16 = a4;
    v14 += v16;
    v12 += 16;
  }
  while (v12 != v13);
  a3[1] = v14;
  a2[1] = v11;
  v17 = a2[2];
  v18 = a1[25];
  v19 = a1[26];
  if (v18 == v19)
    goto LABEL_52;
LABEL_18:
  v20 = 0;
  do
  {
    v21 = *(_QWORD *)(v18 + 8);
    if ((*(_BYTE *)(v21 + 4) & 6) != 0)
    {
      v7 = 1;
      ++v17;
    }
    if (*(_BYTE *)(v21 + 20))
      v22 = 1;
    else
      v22 = a4;
    v20 += v22;
    v18 += 16;
  }
  while (v18 != v19);
  a3[2] = v20;
  a2[2] = v17;
  v23 = a2[3];
  v24 = a1[37];
  v25 = a1[38];
  if (v24 == v25)
    goto LABEL_53;
LABEL_26:
  v26 = 0;
  do
  {
    v27 = *(_QWORD *)(v24 + 8);
    if ((*(_BYTE *)(v27 + 4) & 6) != 0)
    {
      v7 = 1;
      ++v23;
    }
    if (*(_BYTE *)(v27 + 20))
      v28 = 1;
    else
      v28 = a4;
    v26 += v28;
    v24 += 16;
  }
  while (v24 != v25);
  a3[3] = v26;
  a2[3] = v23;
  v29 = a2[4];
  v30 = a1[49];
  v31 = a1[50];
  if (v30 != v31)
  {
LABEL_34:
    v32 = 0;
    do
    {
      v33 = *(_QWORD *)(v30 + 8);
      if ((*(_BYTE *)(v33 + 4) & 6) != 0)
      {
        v7 = 1;
        ++v29;
      }
      if (*(_BYTE *)(v33 + 20))
        v34 = 1;
      else
        v34 = a4;
      v32 += v34;
      v30 += 16;
    }
    while (v30 != v31);
    a3[4] = v32;
    a2[4] = v29;
    v35 = a2[5];
    v36 = a1[61];
    v37 = a1[62];
    if (v36 != v37)
      goto LABEL_42;
LABEL_55:
    v38 = 0;
    goto LABEL_56;
  }
LABEL_54:
  a3[4] = 0;
  a2[4] = v29;
  v35 = a2[5];
  v36 = a1[61];
  v37 = a1[62];
  if (v36 == v37)
    goto LABEL_55;
LABEL_42:
  v38 = 0;
  do
  {
    v39 = *(_QWORD *)(v36 + 8);
    if ((*(_BYTE *)(v39 + 4) & 6) != 0)
    {
      v7 = 1;
      ++v35;
    }
    if (*(_BYTE *)(v39 + 20))
      v40 = 1;
    else
      v40 = a4;
    v38 += v40;
    v36 += 16;
  }
  while (v36 != v37);
LABEL_56:
  a3[5] = v38;
  a2[5] = v35;
  v41 = a2[6];
  v42 = a1[73];
  v43 = a1[74];
  if (v42 == v43)
  {
    v44 = 0;
  }
  else
  {
    v44 = 0;
    do
    {
      v45 = *(_QWORD *)(v42 + 8);
      if ((*(_BYTE *)(v45 + 4) & 6) != 0)
      {
        v7 = 1;
        ++v41;
      }
      if (*(_BYTE *)(v45 + 20))
        v46 = 1;
      else
        v46 = a4;
      v44 += v46;
      v42 += 16;
    }
    while (v42 != v43);
  }
  a3[6] = v44;
  a2[6] = v41;
  v47 = a2[7];
  v48 = a1[85];
  v49 = a1[86];
  if (v48 == v49)
  {
    a3[7] = 0;
    a2[7] = v47;
    return v7 != 0;
  }
  else
  {
    v50 = 0;
    do
    {
      v51 = *(_QWORD *)(v48 + 8);
      if ((*(_BYTE *)(v51 + 4) & 6) != 0)
      {
        v7 = 1;
        ++v47;
      }
      if (*(_BYTE *)(v51 + 20))
        v52 = 1;
      else
        v52 = a4;
      v50 += v52;
      v48 += 16;
    }
    while (v48 != v49);
    a3[7] = v50;
    a2[7] = v47;
    return v7 != 0;
  }
}

void sub_20F5B8444(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *(_QWORD *)(v5 + 56);
      if (*(_BYTE *)(v5 + 208)
        || (*(_BYTE *)(v6 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 64) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 72) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 80) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 88) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 96) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 104) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 112) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 120) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 128) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 136) + 4) & 6) != 0)
      {
        sub_20F59A480(a3, v6);
        sub_20F59A480(a3, *(_QWORD *)(v5 + 64));
        sub_20F394A20((uint64_t)a3, *(_QWORD *)(v5 + 72));
        sub_20F394A20((uint64_t)a3, *(_QWORD *)(v5 + 80));
        sub_20F59A2E8(a3, *(_QWORD *)(v5 + 88));
        sub_20F59A2E8(a3, *(_QWORD *)(v5 + 96));
        sub_20F59A150(a3, *(_QWORD *)(v5 + 104));
        sub_20F59A150(a3, *(_QWORD *)(v5 + 112));
        sub_20F599FB8(a3, *(_QWORD *)(v5 + 120));
        sub_20F599FB8(a3, *(_QWORD *)(v5 + 128));
        sub_20F599E20(a3, *(_QWORD *)(v5 + 136));
      }
      v5 += 216;
    }
    while (v5 != a2);
  }
}

void sub_20F5B85BC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *(_QWORD *)(v5 + 5024);
      if (*(_BYTE *)(v5 + 5328)
        || (*(_BYTE *)(v6 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 5032) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 5040) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 5048) + 4) & 6) != 0)
      {
        sub_20F394A20((uint64_t)a3, v6);
        sub_20F3D35E0(a3, *(_QWORD *)(v5 + 5032));
        sub_20F394A20((uint64_t)a3, *(_QWORD *)(v5 + 5040));
        sub_20F3D35E0(a3, *(_QWORD *)(v5 + 5048));
      }
      v5 += 5336;
    }
    while (v5 != a2);
  }
}

void sub_20F5B8680(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *(_QWORD *)(v5 + 7696);
      if (*(_BYTE *)(v5 + 8008)
        || (*(_BYTE *)(v6 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 7704) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 7712) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 7720) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 7728) + 4) & 6) != 0)
      {
        sub_20F394A20((uint64_t)a3, v6);
        sub_20F3D35E0(a3, *(_QWORD *)(v5 + 7704));
        sub_20F394A20((uint64_t)a3, *(_QWORD *)(v5 + 7712));
        sub_20F3D35E0(a3, *(_QWORD *)(v5 + 7720));
        sub_20F599C88(a3, *(_QWORD *)(v5 + 7728));
      }
      v5 += 8016;
    }
    while (v5 != a2);
  }
}

unint64_t sub_20F5B8760(unint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  BOOL v19;
  _BOOL4 v20;
  _BOOL4 v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  BOOL v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  _BOOL4 v52;
  _BOOL4 v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  _BOOL4 v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  _BOOL4 v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  BOOL v82;
  BOOL v83;
  unsigned int v84;
  _BOOL4 v85;
  _BOOL4 v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  _BOOL4 v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  _BOOL4 v100;
  uint64_t v101;
  unsigned int v102;
  BOOL v103;
  _BOOL4 v104;
  _BOOL4 v105;
  _BOOL4 v106;
  uint64_t v107;
  unsigned int v108;
  BOOL v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  BOOL v113;
  BOOL v114;
  unsigned int *v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  _BOOL4 v119;
  _BOOL4 v120;
  unsigned int v121;
  unsigned int v122;
  BOOL v123;
  BOOL v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  _BOOL4 v133;
  _BOOL4 v134;
  uint64_t v135;
  BOOL v136;
  unsigned int v137;
  BOOL v138;
  unsigned int v139;
  unsigned int v140;
  BOOL v141;
  BOOL v142;
  unsigned int *v143;
  unsigned int v144;
  _BOOL4 v145;
  _BOOL4 v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int v149;
  BOOL v150;
  BOOL v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int v155;
  _BOOL4 v156;
  _BOOL4 v157;
  unsigned int v158;
  unsigned int v159;
  BOOL v160;
  BOOL v161;
  uint64_t v162;
  _QWORD *v163;
  unsigned int v164;
  unsigned int v165;
  BOOL v166;
  unsigned int *v167;
  unsigned int v168;
  _BOOL4 v169;
  _BOOL4 v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int *v174;
  _BOOL4 v175;
  _BOOL4 v176;
  uint64_t v177;
  unsigned int *v178;
  BOOL v179;
  char v180;
  uint64_t v181;
  unsigned int *v182;
  unsigned int *v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int v186;
  _BOOL4 v187;
  unsigned int v188;
  uint64_t v189;
  char *v190;
  unsigned int v191;
  BOOL v192;
  BOOL v193;
  int64_t v194;
  int64_t v195;
  int64_t v196;
  uint64_t v197;
  unsigned int *v198;
  unsigned int v199;
  _BOOL4 v200;
  unsigned int *v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  _BOOL4 v206;
  _BOOL4 v207;
  _BOOL4 v208;
  unsigned int *v209;
  uint64_t v210;
  uint64_t v211;
  int64_t v212;
  uint64_t v214;
  unsigned int *v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  _BOOL4 v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unsigned int *v226;
  unsigned int v227;
  unsigned int v228;
  _BOOL4 v229;
  int v230;
  char *v231;
  uint64_t v232;
  BOOL v233;
  uint64_t v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  _BOOL4 v238;
  unsigned int *v239;
  unsigned int v240;
  unsigned int v241;
  _BOOL4 v242;
  unsigned int v243;
  unsigned int *v244;
  unsigned int *v245;
  uint64_t v246;
  unsigned int v247;
  BOOL v248;
  BOOL v249;
  unsigned int v250;
  unsigned int v251;
  _BOOL4 v252;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 3;
  v256 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v172 = *(a2 - 3);
        v173 = *(a2 - 2);
        v174 = a2 - 3;
        v175 = v173 < v10[1];
        v179 = v172 == *v10;
        v176 = v172 < *v10;
        if (v179)
          v176 = v175;
        if (v176)
        {
          v301 = v10[2];
          v277 = *(_QWORD *)v10;
          v177 = *(_QWORD *)v174;
          v10[2] = v174[2];
          *(_QWORD *)v10 = v177;
          v174[2] = v301;
          *(_QWORD *)v174 = v277;
        }
        return result;
      case 3:
        v163 = v10 + 3;
        v164 = v10[3];
        v165 = v10[4];
        v166 = v164 < *v10;
        if (v164 == *v10)
          v166 = v165 < v10[1];
        v168 = *(a2 - 3);
        v167 = a2 - 3;
        v169 = *(a2 - 2) < v165;
        v179 = v168 == v164;
        v170 = v168 < v164;
        if (v179)
          v170 = v169;
        if (v166)
        {
          if (v170)
          {
            v300 = v10[2];
            v276 = *(_QWORD *)v10;
            v171 = *(_QWORD *)v167;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v171;
            *(a2 - 1) = v300;
            *(_QWORD *)v167 = v276;
          }
          else
          {
            v304 = v10[2];
            v280 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v163;
            v10[2] = v10[5];
            *v163 = v280;
            v10[5] = v304;
            v250 = *(a2 - 3);
            v251 = v10[3];
            v179 = v250 == v251;
            v252 = v250 < v251;
            if (v179)
              v252 = *(a2 - 2) < v10[4];
            if (v252)
            {
              v253 = *v163;
              v254 = v10[5];
              v255 = *(a2 - 1);
              *v163 = *(_QWORD *)v167;
              v10[5] = v255;
              *(a2 - 1) = v254;
              *(_QWORD *)v167 = v253;
            }
          }
        }
        else if (v170)
        {
          v234 = *v163;
          v235 = v10[5];
          v236 = *(a2 - 1);
          *v163 = *(_QWORD *)v167;
          v10[5] = v236;
          *(a2 - 1) = v235;
          *(_QWORD *)v167 = v234;
          v237 = v10[3];
          v179 = v237 == *v10;
          v238 = v237 < *v10;
          if (v179)
            v238 = v10[4] < v10[1];
          if (v238)
          {
            v303 = v10[2];
            v279 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v163;
            v10[2] = v10[5];
            *v163 = v279;
            v10[5] = v303;
          }
        }
        return result;
      case 4:
        return (unint64_t)sub_20F2BCB74(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        return (unint64_t)sub_20F396580(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v11 > 287)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v194 = (unint64_t)(v12 - 2) >> 1;
              v195 = v194;
              do
              {
                v196 = v195;
                if (v194 >= v195)
                {
                  v197 = (2 * v195) | 1;
                  v198 = &v10[3 * v197];
                  if (2 * v196 + 2 >= v12)
                  {
                    v199 = *v198;
                  }
                  else
                  {
                    v199 = v198[3];
                    v200 = v10[3 * v197 + 1] < v198[4];
                    if (*v198 != v199)
                      v200 = *v198 < v199;
                    if (v200)
                    {
                      v198 += 3;
                      v197 = 2 * v196 + 2;
                    }
                    else
                    {
                      v199 = *v198;
                    }
                  }
                  v201 = &v10[3 * v196];
                  v202 = *v201;
                  v203 = v201[1];
                  v179 = v199 == *v201;
                  LODWORD(result) = v199 < *v201;
                  if (v179)
                    result = v198[1] < v203;
                  else
                    result = result;
                  if ((result & 1) == 0)
                  {
                    result = v201[2];
                    do
                    {
                      v209 = v201;
                      v201 = v198;
                      v210 = *(_QWORD *)v198;
                      v209[2] = v201[2];
                      *(_QWORD *)v209 = v210;
                      if (v194 < v197)
                        break;
                      v211 = (2 * v197) | 1;
                      v198 = &v10[3 * v211];
                      v197 = 2 * v197 + 2;
                      if (v197 < v12)
                      {
                        v204 = *v198;
                        v205 = v198[3];
                        v206 = v10[3 * v211 + 1] < v198[4];
                        if (*v198 != v205)
                          v206 = *v198 < v205;
                        if (v206)
                        {
                          v204 = v198[3];
                          v198 += 3;
                        }
                        else
                        {
                          v197 = v211;
                        }
                      }
                      else
                      {
                        v204 = *v198;
                        v197 = v211;
                      }
                      v207 = v198[1] < v203;
                      v179 = v204 == v202;
                      v208 = v204 < v202;
                      if (!v179)
                        v207 = v208;
                    }
                    while (!v207);
                    *v201 = v202;
                    v201[1] = v203;
                    v201[2] = result;
                  }
                }
                v195 = v196 - 1;
              }
              while (v196);
              v212 = v11 / 0xCuLL;
              do
              {
                v214 = 0;
                v302 = v10[2];
                v278 = *(_QWORD *)v10;
                v215 = v10;
                do
                {
                  v217 = v214 + 1;
                  v218 = (char *)&v215[3 * v214 + 3];
                  v219 = (2 * v214) | 1;
                  v220 = 2 * v214 + 2;
                  if (v220 < v212)
                  {
                    v221 = *((_DWORD *)v218 + 3);
                    v222 = v215[3 * v217 + 1] < *((_DWORD *)v218 + 4);
                    v179 = *(_DWORD *)v218 == v221;
                    result = *(_DWORD *)v218 < v221;
                    if (!v179)
                      v222 = result;
                    if (v222)
                    {
                      v218 += 12;
                      v219 = v220;
                    }
                  }
                  v216 = *(_QWORD *)v218;
                  v215[2] = *((_DWORD *)v218 + 2);
                  *(_QWORD *)v215 = v216;
                  v215 = (unsigned int *)v218;
                  v214 = v219;
                }
                while (v219 <= (uint64_t)((unint64_t)(v212 - 2) >> 1));
                a2 -= 3;
                if (v218 == (char *)a2)
                {
                  *((_DWORD *)v218 + 2) = v302;
                  *(_QWORD *)v218 = v278;
                }
                else
                {
                  v223 = *(_QWORD *)a2;
                  *((_DWORD *)v218 + 2) = a2[2];
                  *(_QWORD *)v218 = v223;
                  a2[2] = v302;
                  *(_QWORD *)a2 = v278;
                  v224 = v218 - (char *)v10 + 12;
                  if (v224 >= 13)
                  {
                    v225 = (v224 / 0xCuLL - 2) >> 1;
                    v226 = &v10[3 * v225];
                    v228 = *(_DWORD *)v218;
                    v227 = *((_DWORD *)v218 + 1);
                    v229 = *v226 < *(_DWORD *)v218;
                    if (*v226 == *(_DWORD *)v218)
                      v229 = v226[1] < v227;
                    if (v229)
                    {
                      v230 = *((_DWORD *)v218 + 2);
                      do
                      {
                        v231 = v218;
                        v218 = (char *)v226;
                        v232 = *(_QWORD *)v226;
                        result = *((unsigned int *)v218 + 2);
                        *((_DWORD *)v231 + 2) = result;
                        *(_QWORD *)v231 = v232;
                        if (!v225)
                          break;
                        v225 = (v225 - 1) >> 1;
                        v226 = &v10[3 * v225];
                        result = v226[1] < v227;
                        v233 = *v226 < v228;
                        if (*v226 == v228)
                          v233 = v226[1] < v227;
                      }
                      while (v233);
                      *(_DWORD *)v218 = v228;
                      *((_DWORD *)v218 + 1) = v227;
                      *((_DWORD *)v218 + 2) = v230;
                    }
                  }
                }
              }
              while (v212-- > 2);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[3 * ((unint64_t)v12 >> 1)];
          v15 = *(a2 - 3);
          v16 = *(a2 - 2);
          if ((unint64_t)v11 < 0x601)
          {
            v23 = *v10;
            v24 = v10[1];
            v25 = &v10[3 * v13 + 1];
            v26 = v24 < *v25;
            if (*v10 != *v14)
              v26 = *v10 < *v14;
            v27 = v16 < v24;
            v179 = v15 == v23;
            v28 = v15 < v23;
            if (v179)
              v28 = v27;
            if (v26)
            {
              if (v28)
              {
                v282 = v14[2];
                v258 = *(_QWORD *)v14;
                v29 = *(_QWORD *)v8;
                v14[2] = *(a2 - 1);
                *(_QWORD *)v14 = v29;
LABEL_53:
                *(a2 - 1) = v282;
                *(_QWORD *)v8 = v258;
                goto LABEL_54;
              }
              v289 = v14[2];
              v265 = *(_QWORD *)v14;
              v63 = *(_QWORD *)v10;
              v14[2] = v10[2];
              *(_QWORD *)v14 = v63;
              v10[2] = v289;
              *(_QWORD *)v10 = v265;
              v64 = *(a2 - 3);
              v179 = v64 == *v10;
              v65 = v64 < *v10;
              if (v179)
                v65 = *(a2 - 2) < v10[1];
              if (v65)
              {
                v282 = v10[2];
                v258 = *(_QWORD *)v10;
                v66 = *(_QWORD *)v8;
                v10[2] = *(a2 - 1);
                *(_QWORD *)v10 = v66;
                goto LABEL_53;
              }
            }
            else if (v28)
            {
              v285 = v10[2];
              v261 = *(_QWORD *)v10;
              v33 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v33;
              *(a2 - 1) = v285;
              *(_QWORD *)v8 = v261;
              v34 = v10[1] < *v25;
              if (*v10 != *v14)
                v34 = *v10 < *v14;
              if (v34)
              {
                v286 = v14[2];
                v262 = *(_QWORD *)v14;
                v35 = *(_QWORD *)v10;
                v14[2] = v10[2];
                *(_QWORD *)v14 = v35;
                v10[2] = v286;
                *(_QWORD *)v10 = v262;
                --a3;
                v36 = v262;
                if ((a4 & 1) != 0)
                  goto LABEL_55;
                goto LABEL_94;
              }
            }
LABEL_54:
            --a3;
            v36 = *v10;
            if ((a4 & 1) != 0)
              goto LABEL_55;
LABEL_94:
            v108 = *(v10 - 3);
            v67 = v10[1];
            v179 = v108 == v36;
            v109 = v108 < v36;
            if (v179)
              v109 = *(v10 - 2) < v67;
            if (v109)
              goto LABEL_97;
            v137 = *(a2 - 3);
            v179 = v36 == v137;
            v138 = v36 < v137;
            if (v179)
              v138 = v67 < *(a2 - 2);
            if (v138)
            {
              do
              {
                v139 = v10[3];
                v140 = v10[4];
                v10 += 3;
                v141 = v67 < v140;
                v179 = v36 == v139;
                v142 = v36 < v139;
                if (v179)
                  v142 = v141;
              }
              while (!v142);
            }
            else
            {
              v143 = v10 + 3;
              do
              {
                v10 = v143;
                if (v143 >= a2)
                  break;
                v144 = *v143;
                v145 = v67 < v10[1];
                v179 = v36 == v144;
                v146 = v36 < v144;
                if (!v179)
                  v145 = v146;
                v143 = v10 + 3;
              }
              while (!v145);
            }
            v147 = a2;
            if (v10 < a2)
            {
              v147 = a2;
              do
              {
                v148 = *(v147 - 3);
                v149 = *(v147 - 2);
                v147 -= 3;
                v150 = v67 < v149;
                v179 = v36 == v148;
                v151 = v36 < v148;
                if (v179)
                  v151 = v150;
              }
              while (v151);
            }
            v152 = v7[2];
            while (v10 < v147)
            {
              v299 = v10[2];
              v275 = *(_QWORD *)v10;
              v153 = *(_QWORD *)v147;
              v10[2] = v147[2];
              *(_QWORD *)v10 = v153;
              v147[2] = v299;
              *(_QWORD *)v147 = v275;
              do
              {
                v154 = v10[3];
                v155 = v10[4];
                v10 += 3;
                v156 = v67 < v155;
                v179 = v36 == v154;
                v157 = v36 < v154;
                if (v179)
                  v157 = v156;
              }
              while (!v157);
              do
              {
                v158 = *(v147 - 3);
                v159 = *(v147 - 2);
                v147 -= 3;
                v160 = v67 < v159;
                v179 = v36 == v158;
                v161 = v36 < v158;
                if (v179)
                  v161 = v160;
              }
              while (v161);
            }
            if (v10 - 3 != v7)
            {
              v162 = *(_QWORD *)(v10 - 3);
              v7[2] = *(v10 - 1);
              *(_QWORD *)v7 = v162;
            }
            a4 = 0;
            *(v10 - 3) = v36;
            *(v10 - 2) = v67;
            *(v10 - 1) = v152;
            continue;
          }
          v17 = *v14;
          v18 = &v10[3 * v13 + 1];
          v19 = *v14 < *v10;
          if (*v14 == *v10)
            v19 = *v18 < v10[1];
          v20 = v16 < *v18;
          v179 = v15 == v17;
          v21 = v15 < v17;
          if (v179)
            v21 = v20;
          if (v19)
          {
            if (v21)
            {
              v281 = v10[2];
              v257 = *(_QWORD *)v10;
              v22 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v22;
LABEL_36:
              *(a2 - 1) = v281;
              *(_QWORD *)v8 = v257;
              goto LABEL_37;
            }
            v287 = v10[2];
            v263 = *(_QWORD *)v10;
            v37 = *(_QWORD *)v14;
            v10[2] = v14[2];
            *(_QWORD *)v10 = v37;
            v14[2] = v287;
            *(_QWORD *)v14 = v263;
            v38 = *(a2 - 3);
            v39 = v38 < v263;
            if (v38 == (_DWORD)v263)
              v39 = *(a2 - 2) < *v18;
            if (v39)
            {
              v281 = v14[2];
              v257 = *(_QWORD *)v14;
              v40 = *(_QWORD *)v8;
              v14[2] = *(a2 - 1);
              *(_QWORD *)v14 = v40;
              goto LABEL_36;
            }
          }
          else if (v21)
          {
            v283 = v14[2];
            v259 = *(_QWORD *)v14;
            v30 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v30;
            *(a2 - 1) = v283;
            *(_QWORD *)v8 = v259;
            v31 = *v14 < *v10;
            if (*v14 == *v10)
              v31 = *v18 < v10[1];
            if (v31)
            {
              v284 = v10[2];
              v260 = *(_QWORD *)v10;
              v32 = *(_QWORD *)v14;
              v10[2] = v14[2];
              *(_QWORD *)v10 = v32;
              v14[2] = v284;
              *(_QWORD *)v14 = v260;
            }
          }
LABEL_37:
          v41 = (uint64_t *)(v10 + 3);
          v42 = v10[3];
          v43 = &v10[3 * v13];
          v46 = *(v43 - 3);
          v44 = v43 - 3;
          v45 = v46;
          v47 = v44 + 1;
          v48 = v44[1];
          v49 = v48 < v10[4];
          v179 = v46 == v42;
          v50 = v46 < v42;
          if (!v179)
            v49 = v50;
          v51 = *(a2 - 6);
          v52 = *(a2 - 5) < v48;
          v179 = v51 == v45;
          v53 = v51 < v45;
          if (v179)
            v53 = v52;
          if (v49)
          {
            if (v53)
            {
              v54 = *v41;
              v55 = v10[5];
              v56 = *(a2 - 4);
              *v41 = *(_QWORD *)v256;
              v10[5] = v56;
              *(a2 - 4) = v55;
              *(_QWORD *)v256 = v54;
            }
            else
            {
              v68 = *v41;
              v69 = v10[5];
              v70 = v44[2];
              *v41 = *(_QWORD *)v44;
              v10[5] = v70;
              v44[2] = v69;
              *(_QWORD *)v44 = v68;
              v71 = v68;
              LODWORD(v68) = *(a2 - 6);
              v179 = (_DWORD)v68 == v71;
              v72 = v68 < v71;
              if (v179)
                v72 = *(a2 - 5) < *v47;
              if (v72)
              {
                v290 = v44[2];
                v266 = *(_QWORD *)v44;
                v73 = *(_QWORD *)v256;
                v44[2] = *(a2 - 4);
                *(_QWORD *)v44 = v73;
                *(a2 - 4) = v290;
                *(_QWORD *)v256 = v266;
              }
            }
          }
          else if (v53)
          {
            v288 = v44[2];
            v264 = *(_QWORD *)v44;
            v57 = *(_QWORD *)v256;
            v44[2] = *(a2 - 4);
            *(_QWORD *)v44 = v57;
            *(a2 - 4) = v288;
            *(_QWORD *)v256 = v264;
            v58 = v10[3];
            v59 = *v44 < v58;
            if (*v44 == v58)
              v59 = *v47 < v10[4];
            if (v59)
            {
              v60 = *v41;
              v61 = v10[5];
              v62 = v44[2];
              *v41 = *(_QWORD *)v44;
              v10[5] = v62;
              v44[2] = v61;
              *(_QWORD *)v44 = v60;
            }
          }
          v74 = (uint64_t *)(v10 + 6);
          v75 = v10[6];
          v76 = &v10[3 * v13];
          v79 = v76[3];
          v77 = v76 + 3;
          v78 = v79;
          v80 = v77 + 1;
          v81 = v77[1];
          v82 = v81 < v10[7];
          v179 = v79 == v75;
          v83 = v79 < v75;
          if (!v179)
            v82 = v83;
          v84 = *(a2 - 9);
          v85 = *(a2 - 8) < v81;
          v179 = v84 == v78;
          v86 = v84 < v78;
          if (v179)
            v86 = v85;
          if (v82)
          {
            if (v86)
            {
              v87 = *v74;
              v88 = v10[8];
              v89 = *(a2 - 7);
              *v74 = *(_QWORD *)v9;
              v10[8] = v89;
              *(a2 - 7) = v88;
              *(_QWORD *)v9 = v87;
            }
            else
            {
              v96 = *v74;
              v97 = v10[8];
              v98 = v77[2];
              *v74 = *(_QWORD *)v77;
              v10[8] = v98;
              v77[2] = v97;
              *(_QWORD *)v77 = v96;
              v99 = v96;
              LODWORD(v96) = *(a2 - 9);
              v179 = (_DWORD)v96 == v99;
              v100 = v96 < v99;
              if (v179)
                v100 = *(a2 - 8) < *v80;
              if (v100)
              {
                v292 = v77[2];
                v268 = *(_QWORD *)v77;
                v101 = *(_QWORD *)v9;
                v77[2] = *(a2 - 7);
                *(_QWORD *)v77 = v101;
                *(a2 - 7) = v292;
                *(_QWORD *)v9 = v268;
              }
            }
          }
          else if (v86)
          {
            v291 = v77[2];
            v267 = *(_QWORD *)v77;
            v90 = *(_QWORD *)v9;
            v77[2] = *(a2 - 7);
            *(_QWORD *)v77 = v90;
            *(a2 - 7) = v291;
            *(_QWORD *)v9 = v267;
            v91 = v10[6];
            v92 = *v77 < v91;
            if (*v77 == v91)
              v92 = *v80 < v10[7];
            if (v92)
            {
              v93 = *v74;
              v94 = v10[8];
              v95 = v77[2];
              *v74 = *(_QWORD *)v77;
              v10[8] = v95;
              v77[2] = v94;
              *(_QWORD *)v77 = v93;
            }
          }
          v102 = *v14;
          v103 = *v14 < *v44;
          if (*v14 == *v44)
            v103 = *v18 < *v47;
          result = *v80;
          v179 = *v77 == v102;
          v104 = *v77 < v102;
          if (v179)
            v104 = result < *v18;
          if (v103)
          {
            if (v104)
            {
              v293 = v44[2];
              v269 = *(_QWORD *)v44;
              *(_QWORD *)v44 = *(_QWORD *)v77;
              v44[2] = v77[2];
LABEL_92:
              v77[2] = v293;
              *(_QWORD *)v77 = v269;
              goto LABEL_93;
            }
            v296 = v44[2];
            v272 = *(_QWORD *)v44;
            *(_QWORD *)v44 = *(_QWORD *)v14;
            v44[2] = v14[2];
            v14[2] = v296;
            *(_QWORD *)v14 = v272;
            v106 = *v80 < *v18;
            if (*v77 != *v14)
              v106 = *v77 < *v14;
            if (v106)
            {
              v293 = v14[2];
              v269 = *(_QWORD *)v14;
              *(_QWORD *)v14 = *(_QWORD *)v77;
              v14[2] = v77[2];
              goto LABEL_92;
            }
          }
          else if (v104)
          {
            v294 = v14[2];
            v270 = *(_QWORD *)v14;
            *(_QWORD *)v14 = *(_QWORD *)v77;
            v14[2] = v77[2];
            v77[2] = v294;
            *(_QWORD *)v77 = v270;
            v105 = *v18 < *v47;
            if (*v14 != *v44)
              v105 = *v14 < *v44;
            if (v105)
            {
              v295 = v44[2];
              v271 = *(_QWORD *)v44;
              *(_QWORD *)v44 = *(_QWORD *)v14;
              v44[2] = v14[2];
              v14[2] = v295;
              *(_QWORD *)v14 = v271;
            }
          }
LABEL_93:
          v297 = v10[2];
          v273 = *(_QWORD *)v10;
          v107 = *(_QWORD *)v14;
          v10[2] = v14[2];
          *(_QWORD *)v10 = v107;
          v14[2] = v297;
          *(_QWORD *)v14 = v273;
          --a3;
          v36 = *v10;
          if ((a4 & 1) == 0)
            goto LABEL_94;
LABEL_55:
          v67 = v10[1];
LABEL_97:
          v110 = 0;
          v111 = v10[2];
          do
          {
            v112 = v10[v110 + 3];
            v113 = v10[v110 + 4] < v67;
            v179 = v112 == v36;
            v114 = v112 < v36;
            if (!v179)
              v113 = v114;
            v110 += 3;
          }
          while (v113);
          v115 = &v10[v110];
          v116 = a2;
          if (v110 == 3)
          {
            v116 = a2;
            do
            {
              if (v115 >= v116)
                break;
              v121 = *(v116 - 3);
              v122 = *(v116 - 2);
              v116 -= 3;
              v123 = v122 < v67;
              v179 = v121 == v36;
              v124 = v121 < v36;
              if (v179)
                v124 = v123;
            }
            while (!v124);
          }
          else
          {
            do
            {
              v117 = *(v116 - 3);
              v118 = *(v116 - 2);
              v116 -= 3;
              v119 = v118 < v67;
              v179 = v117 == v36;
              v120 = v117 < v36;
              if (v179)
                v120 = v119;
            }
            while (!v120);
          }
          v10 = v115;
          if (v115 < v116)
          {
            v125 = (unint64_t)v116;
            do
            {
              v298 = v10[2];
              v274 = *(_QWORD *)v10;
              v126 = *(_QWORD *)v125;
              v10[2] = *(_DWORD *)(v125 + 8);
              *(_QWORD *)v10 = v126;
              *(_DWORD *)(v125 + 8) = v298;
              *(_QWORD *)v125 = v274;
              do
              {
                v127 = v10[3];
                v128 = v10[4];
                v10 += 3;
                v129 = v128 < v67;
                v179 = v127 == v36;
                v130 = v127 < v36;
                if (v179)
                  v130 = v129;
              }
              while (v130);
              do
              {
                v131 = *(_DWORD *)(v125 - 12);
                v132 = *(_DWORD *)(v125 - 8);
                v125 -= 12;
                v133 = v132 < v67;
                v179 = v131 == v36;
                v134 = v131 < v36;
                if (v179)
                  v134 = v133;
              }
              while (!v134);
            }
            while ((unint64_t)v10 < v125);
          }
          if (v10 - 3 != v7)
          {
            v135 = *(_QWORD *)(v10 - 3);
            v7[2] = *(v10 - 1);
            *(_QWORD *)v7 = v135;
          }
          *(v10 - 3) = v36;
          *(v10 - 2) = v67;
          *(v10 - 1) = v111;
          if (v115 < v116)
            goto LABEL_126;
          v136 = sub_20F5B9994(v7, v10 - 3);
          result = sub_20F5B9994(v10, a2);
          if (!(_DWORD)result)
          {
            if (v136)
              continue;
LABEL_126:
            result = sub_20F5B8760(v7, v10 - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 3;
          if (v136)
            return result;
          goto LABEL_2;
        }
        v178 = v10 + 3;
        v179 = v10 == a2 || v178 == a2;
        v180 = v179;
        if ((a4 & 1) != 0)
        {
          if ((v180 & 1) == 0)
          {
            v181 = 0;
            v182 = v10;
            do
            {
              v184 = v178;
              v185 = v182[3];
              v186 = v182[4];
              v187 = v185 < *v182;
              if (v185 == *v182)
                v187 = v186 < v182[1];
              if (v187)
              {
                v188 = v182[5];
                v189 = v181;
                do
                {
                  v190 = (char *)v10 + v189;
                  *(_QWORD *)(v190 + 12) = *(_QWORD *)((char *)v10 + v189);
                  *((_DWORD *)v190 + 5) = *(unsigned int *)((char *)v10 + v189 + 8);
                  if (!v189)
                  {
                    v183 = v10;
                    goto LABEL_184;
                  }
                  v191 = *((_DWORD *)v190 - 3);
                  v192 = v186 < *((_DWORD *)v190 - 2);
                  v179 = v185 == v191;
                  v193 = v185 < v191;
                  if (!v179)
                    v192 = v193;
                  v189 -= 12;
                }
                while (v192);
                v183 = (unsigned int *)((char *)v10 + v189 + 12);
LABEL_184:
                *v183 = v185;
                v183[1] = v186;
                v183[2] = v188;
              }
              v178 = v184 + 3;
              v181 += 12;
              v182 = v184;
            }
            while (v184 + 3 != a2);
          }
        }
        else if ((v180 & 1) == 0)
        {
          do
          {
            v239 = v178;
            v240 = v7[3];
            v241 = v7[4];
            v242 = v240 < *v7;
            if (v240 == *v7)
              v242 = v241 < v7[1];
            if (v242)
            {
              v243 = v7[5];
              v244 = v239;
              do
              {
                v245 = v244;
                v246 = *(_QWORD *)(v244 - 3);
                v244 -= 3;
                *(_QWORD *)v245 = v246;
                v245[2] = *(v245 - 1);
                v247 = *(v245 - 6);
                v248 = v241 < *(v245 - 5);
                v179 = v240 == v247;
                v249 = v240 < v247;
                if (!v179)
                  v248 = v249;
              }
              while (v248);
              *v244 = v240;
              v244[1] = v241;
              v244[2] = v243;
            }
            v178 = v239 + 3;
            v7 = v239;
          }
          while (v239 + 3 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20F5B9994(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL4 v6;
  BOOL v7;
  _BOOL4 v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int *v16;
  unsigned int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  _BOOL4 v32;
  _BOOL4 v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  _BOOL4 v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  _BOOL4 v46;
  _BOOL4 v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  _BOOL4 v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  _BOOL4 v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  _BOOL4 v70;
  _BOOL4 v71;
  unsigned int v72;
  uint64_t v73;
  char *v74;
  unsigned int v75;
  BOOL v76;
  BOOL v77;
  _DWORD *v78;

  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = v5 < a1[1];
      v7 = v4 == *a1;
      v8 = v4 < *a1;
      if (v7)
        v8 = v6;
      if (v8)
      {
        v9 = a1[2];
        v10 = *(_QWORD *)a1;
        v11 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v11;
        *(_QWORD *)v3 = v10;
        v3[2] = v9;
      }
      return 1;
    case 3uLL:
      v12 = a1 + 3;
      v13 = a1[3];
      v14 = a1[4];
      v15 = v13 < *a1;
      if (v13 == *a1)
        v15 = v14 < a1[1];
      v17 = *(a2 - 3);
      v16 = a2 - 3;
      v18 = *(a2 - 2) < v14;
      v7 = v17 == v13;
      v19 = v17 < v13;
      if (v7)
        v19 = v18;
      if (v15)
      {
        if (v19)
        {
          v20 = a1[2];
          v21 = *(_QWORD *)a1;
          v22 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v16;
          a1[2] = v22;
          *(_QWORD *)v16 = v21;
          *(a2 - 1) = v20;
          return 1;
        }
        v50 = a1[2];
        v51 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v12;
        a1[2] = a1[5];
        *v12 = v51;
        a1[5] = v50;
        v52 = *(a2 - 3);
        v53 = a1[3];
        v7 = v52 == v53;
        v54 = v52 < v53;
        if (v7)
          v54 = *(a2 - 2) < a1[4];
        if (v54)
        {
          v55 = a1[5];
          v56 = *v12;
          v57 = *(a2 - 1);
          *v12 = *(_QWORD *)v16;
          a1[5] = v57;
          *(_QWORD *)v16 = v56;
          *(a2 - 1) = v55;
          return 1;
        }
      }
      else if (v19)
      {
        v36 = a1[5];
        v37 = *v12;
        v38 = *(a2 - 1);
        *v12 = *(_QWORD *)v16;
        a1[5] = v38;
        *(_QWORD *)v16 = v37;
        *(a2 - 1) = v36;
        v39 = a1[3];
        v7 = v39 == *a1;
        v40 = v39 < *a1;
        if (v7)
          v40 = a1[4] < a1[1];
        if (v40)
        {
          v41 = a1[2];
          v42 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v12;
          a1[2] = a1[5];
          *v12 = v42;
          a1[5] = v41;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      sub_20F2BCB74(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_20F396580(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v23 = a1 + 6;
      v24 = a1[6];
      v25 = a1 + 3;
      v26 = a1[3];
      v27 = a1[4];
      v28 = *a1;
      v29 = a1[1];
      v30 = v26 < *a1;
      if (v26 == *a1)
        v30 = v27 < v29;
      v31 = a1[7];
      v32 = v31 < v27;
      v7 = v24 == v26;
      v33 = v24 < v26;
      if (v7)
        v33 = v32;
      if (v30)
      {
        if (v33)
        {
          v34 = a1[2];
          v35 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v23;
          a1[2] = a1[8];
          *(_QWORD *)v23 = v35;
          a1[8] = v34;
        }
        else
        {
          v58 = a1[2];
          v59 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v59;
          a1[5] = v58;
          v60 = a1[3];
          v7 = v24 == v60;
          v61 = v24 < v60;
          if (v7)
            v61 = v31 < a1[4];
          if (v61)
          {
            v62 = a1[5];
            v63 = *v25;
            *v25 = *(_QWORD *)v23;
            a1[5] = a1[8];
            *(_QWORD *)v23 = v63;
            a1[8] = v62;
          }
        }
      }
      else if (v33)
      {
        v43 = a1[5];
        v44 = *v25;
        *v25 = *(_QWORD *)v23;
        a1[5] = a1[8];
        *(_QWORD *)v23 = v44;
        a1[8] = v43;
        v45 = a1[3];
        v46 = a1[4] < v29;
        v7 = v45 == v28;
        v47 = v45 < v28;
        if (v7)
          v47 = v46;
        if (v47)
        {
          v48 = a1[2];
          v49 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v49;
          a1[5] = v48;
        }
      }
      v64 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v65 = 0;
      v66 = 0;
      break;
  }
  while (1)
  {
    v67 = *v64;
    v68 = v64[1];
    v69 = *v23;
    v70 = v68 < v23[1];
    v7 = *v64 == v69;
    v71 = *v64 < v69;
    if (!v7)
      v70 = v71;
    if (v70)
      break;
LABEL_55:
    v23 = v64;
    v65 += 12;
    v64 += 3;
    if (v64 == a2)
      return 1;
  }
  v72 = v64[2];
  v73 = v65;
  do
  {
    v74 = (char *)a1 + v73;
    *(_QWORD *)(v74 + 36) = *(_QWORD *)((char *)a1 + v73 + 24);
    *((_DWORD *)v74 + 11) = *(unsigned int *)((char *)a1 + v73 + 32);
    if (v73 == -24)
    {
      *a1 = v67;
      a1[1] = v68;
      a1[2] = v72;
      if (++v66 != 8)
        goto LABEL_55;
      return v64 + 3 == a2;
    }
    v75 = *((_DWORD *)v74 + 3);
    v76 = v68 < *((_DWORD *)v74 + 4);
    v7 = v67 == v75;
    v77 = v67 < v75;
    if (!v7)
      v76 = v77;
    v73 -= 12;
  }
  while (v76);
  v78 = (unsigned int *)((char *)a1 + v73);
  v78[9] = v67;
  v78[10] = v68;
  v78[11] = v72;
  if (++v66 != 8)
    goto LABEL_55;
  return v64 + 3 == a2;
}

uint64_t sub_20F5B9E28(uint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  BOOL v20;
  _BOOL4 v21;
  _BOOL4 v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  BOOL v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _BOOL4 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  BOOL v52;
  unsigned int v53;
  _BOOL4 v54;
  _BOOL4 v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  _BOOL4 v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  _BOOL4 v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _BOOL4 v74;
  uint64_t v75;
  uint64_t *v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  BOOL v84;
  BOOL v85;
  unsigned int v86;
  _BOOL4 v87;
  _BOOL4 v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  _BOOL4 v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  _BOOL4 v101;
  uint64_t v102;
  unsigned int v103;
  BOOL v104;
  _BOOL4 v105;
  unsigned int v106;
  unsigned int v107;
  _BOOL4 v108;
  unsigned int v109;
  _BOOL4 v110;
  uint64_t v111;
  unsigned int v112;
  BOOL v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  BOOL v117;
  BOOL v118;
  unsigned int *v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  _BOOL4 v123;
  _BOOL4 v124;
  unsigned int v125;
  unsigned int v126;
  BOOL v127;
  BOOL v128;
  unint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  BOOL v133;
  BOOL v134;
  unsigned int v135;
  unsigned int v136;
  _BOOL4 v137;
  _BOOL4 v138;
  uint64_t v139;
  BOOL v140;
  unsigned int v141;
  BOOL v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;
  BOOL v146;
  unsigned int *v147;
  unsigned int v148;
  _BOOL4 v149;
  _BOOL4 v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int v153;
  BOOL v154;
  BOOL v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  _BOOL4 v160;
  _BOOL4 v161;
  unsigned int v162;
  unsigned int v163;
  BOOL v164;
  BOOL v165;
  uint64_t v166;
  _QWORD *v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  BOOL v171;
  unsigned int *v172;
  unsigned int v173;
  _BOOL4 v174;
  uint64_t v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int *v178;
  unsigned int v179;
  _BOOL4 v180;
  _BOOL4 v181;
  uint64_t v182;
  unsigned int *v183;
  BOOL v184;
  char v185;
  uint64_t v186;
  unsigned int *v187;
  unsigned int *v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  _BOOL4 v193;
  unsigned int v194;
  uint64_t v195;
  char *v196;
  unsigned int v197;
  BOOL v198;
  BOOL v199;
  int64_t v200;
  int64_t v201;
  int64_t v202;
  uint64_t v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  _BOOL4 v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  _BOOL4 v213;
  unsigned int v214;
  unsigned int v215;
  _BOOL4 v216;
  BOOL v217;
  unsigned int v218;
  unsigned int v219;
  _BOOL4 v220;
  _BOOL4 v221;
  unsigned int *v222;
  uint64_t v223;
  uint64_t v224;
  int64_t v225;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  unsigned int v235;
  _BOOL4 v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  char *v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  _BOOL4 v244;
  int v245;
  char *v246;
  uint64_t v247;
  unsigned int v248;
  BOOL v249;
  uint64_t v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  _BOOL4 v255;
  unsigned int *v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  _BOOL4 v260;
  unsigned int v261;
  unsigned int *v262;
  unsigned int *v263;
  uint64_t v264;
  unsigned int v265;
  BOOL v266;
  BOOL v267;
  unsigned int v268;
  unsigned int v269;
  _BOOL4 v270;
  uint64_t v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 3;
  v274 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v176 = *(a2 - 3);
        v177 = *(a2 - 2);
        v178 = a2 - 3;
        v179 = v10[1];
        v180 = v176 < *v10;
        v184 = v177 == v179;
        v181 = v177 < v179;
        if (!v184)
          v180 = v181;
        if (v180)
        {
          v319 = v10[2];
          v295 = *(_QWORD *)v10;
          v182 = *(_QWORD *)v178;
          v10[2] = v178[2];
          *(_QWORD *)v10 = v182;
          v178[2] = v319;
          *(_QWORD *)v178 = v295;
        }
        return result;
      case 3:
        v167 = v10 + 3;
        v168 = v10[3];
        v169 = v10[4];
        v170 = v10[1];
        v184 = v169 == v170;
        v171 = v169 < v170;
        if (v184)
          v171 = v168 < *v10;
        v173 = *(a2 - 2);
        v172 = a2 - 3;
        v174 = *(a2 - 3) < v168;
        if (v173 != v169)
          v174 = v173 < v169;
        if (v171)
        {
          if (v174)
          {
            v318 = v10[2];
            v294 = *(_QWORD *)v10;
            v175 = *(_QWORD *)v172;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v175;
            *(a2 - 1) = v318;
            *(_QWORD *)v172 = v294;
          }
          else
          {
            v322 = v10[2];
            v298 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v167;
            v10[2] = v10[5];
            *v167 = v298;
            v10[5] = v322;
            v268 = *(a2 - 2);
            v269 = v10[4];
            v184 = v268 == v269;
            v270 = v268 < v269;
            if (v184)
              v270 = *(a2 - 3) < v10[3];
            if (v270)
            {
              v271 = *v167;
              v272 = v10[5];
              v273 = *(a2 - 1);
              *v167 = *(_QWORD *)v172;
              v10[5] = v273;
              *(a2 - 1) = v272;
              *(_QWORD *)v172 = v271;
            }
          }
        }
        else if (v174)
        {
          v250 = *v167;
          v251 = v10[5];
          v252 = *(a2 - 1);
          *v167 = *(_QWORD *)v172;
          v10[5] = v252;
          *(a2 - 1) = v251;
          *(_QWORD *)v172 = v250;
          v253 = v10[4];
          v254 = v10[1];
          v184 = v253 == v254;
          v255 = v253 < v254;
          if (v184)
            v255 = v10[3] < *v10;
          if (v255)
          {
            v321 = v10[2];
            v297 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v167;
            v10[2] = v10[5];
            *v167 = v297;
            v10[5] = v321;
          }
        }
        return result;
      case 4:
        return (uint64_t)sub_20F2BE75C(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        return (uint64_t)sub_20F397DA0(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v11 > 287)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v200 = (unint64_t)(v12 - 2) >> 1;
              v201 = v200;
              do
              {
                v202 = v201;
                if (v200 >= v201)
                {
                  v203 = (2 * v201) | 1;
                  v204 = &v10[3 * v203];
                  if (2 * v202 + 2 >= v12)
                  {
                    v207 = *v204;
                  }
                  else
                  {
                    v205 = v10[3 * v203 + 1];
                    v206 = v204[4];
                    v207 = *v204;
                    v184 = v205 == v206;
                    v208 = v205 < v206;
                    if (v184)
                      v208 = *v204 < v204[3];
                    if (v208)
                    {
                      v207 = v204[3];
                      v204 += 3;
                      v203 = 2 * v202 + 2;
                    }
                  }
                  v209 = &v10[3 * v202];
                  v210 = v204[1];
                  v211 = v209[1];
                  v212 = *v209;
                  LODWORD(result) = v207 < *v209;
                  v184 = v210 == v211;
                  v213 = v210 < v211;
                  if (v184)
                    result = result;
                  else
                    result = v213;
                  if ((result & 1) == 0)
                  {
                    result = v209[2];
                    do
                    {
                      v222 = v209;
                      v209 = v204;
                      v223 = *(_QWORD *)v204;
                      v222[2] = v209[2];
                      *(_QWORD *)v222 = v223;
                      if (v200 < v203)
                        break;
                      v224 = (2 * v203) | 1;
                      v204 = &v10[3 * v224];
                      v203 = 2 * v203 + 2;
                      if (v203 < v12)
                      {
                        v214 = v10[3 * v224 + 1];
                        v215 = v204[4];
                        v184 = v214 == v215;
                        v216 = v214 < v215;
                        if (v184)
                          v216 = *v204 < v204[3];
                        v217 = !v216;
                        v218 = v216 ? v204[3] : *v204;
                        if (v217)
                          v203 = v224;
                        else
                          v204 += 3;
                      }
                      else
                      {
                        v218 = *v204;
                        v203 = v224;
                      }
                      v219 = v204[1];
                      v220 = v218 < v212;
                      v184 = v219 == v211;
                      v221 = v219 < v211;
                      if (v184)
                        v221 = v220;
                    }
                    while (!v221);
                    *v209 = v212;
                    v209[1] = v211;
                    v209[2] = result;
                  }
                }
                v201 = v202 - 1;
              }
              while (v202);
              v225 = v11 / 0xCuLL;
              do
              {
                v227 = 0;
                v320 = v10[2];
                v296 = *(_QWORD *)v10;
                v228 = (char *)v10;
                do
                {
                  v230 = v227 + 1;
                  v231 = &v228[12 * v227 + 12];
                  v232 = (2 * v227) | 1;
                  v233 = 2 * v227 + 2;
                  if (v233 < v225)
                  {
                    v234 = *(_DWORD *)&v228[12 * v230 + 4];
                    v235 = *((_DWORD *)v231 + 4);
                    result = *(_DWORD *)v231 < *((_DWORD *)v231 + 3);
                    v184 = v234 == v235;
                    v236 = v234 < v235;
                    if (v184)
                      v236 = *(_DWORD *)v231 < *((_DWORD *)v231 + 3);
                    if (v236)
                    {
                      v231 += 12;
                      v232 = v233;
                    }
                  }
                  v229 = *(_QWORD *)v231;
                  *((_DWORD *)v228 + 2) = *((_DWORD *)v231 + 2);
                  *(_QWORD *)v228 = v229;
                  v228 = v231;
                  v227 = v232;
                }
                while (v232 <= (uint64_t)((unint64_t)(v225 - 2) >> 1));
                a2 -= 3;
                if (v231 == (char *)a2)
                {
                  *((_DWORD *)v231 + 2) = v320;
                  *(_QWORD *)v231 = v296;
                }
                else
                {
                  v237 = *(_QWORD *)a2;
                  *((_DWORD *)v231 + 2) = a2[2];
                  *(_QWORD *)v231 = v237;
                  a2[2] = v320;
                  *(_QWORD *)a2 = v296;
                  v238 = v231 - (char *)v10 + 12;
                  if (v238 >= 13)
                  {
                    v239 = (v238 / 0xCuLL - 2) >> 1;
                    v240 = (char *)&v10[3 * v239];
                    v241 = *((_DWORD *)v240 + 1);
                    v243 = *(_DWORD *)v231;
                    v242 = *((_DWORD *)v231 + 1);
                    v184 = v241 == v242;
                    v244 = v241 < v242;
                    if (v184)
                      v244 = *(_DWORD *)v240 < *(_DWORD *)v231;
                    if (v244)
                    {
                      v245 = *((_DWORD *)v231 + 2);
                      do
                      {
                        v246 = v231;
                        v231 = v240;
                        v247 = *(_QWORD *)v240;
                        result = *((unsigned int *)v231 + 2);
                        *((_DWORD *)v246 + 2) = result;
                        *(_QWORD *)v246 = v247;
                        if (!v239)
                          break;
                        v239 = (v239 - 1) >> 1;
                        v240 = (char *)&v10[3 * v239];
                        v248 = *((_DWORD *)v240 + 1);
                        result = *(_DWORD *)v240 < v243;
                        v184 = v248 == v242;
                        v249 = v248 < v242;
                        if (v184)
                          v249 = *(_DWORD *)v240 < v243;
                      }
                      while (v249);
                      *(_DWORD *)v231 = v243;
                      *((_DWORD *)v231 + 1) = v242;
                      *((_DWORD *)v231 + 2) = v245;
                    }
                  }
                }
              }
              while (v225-- > 2);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[3 * ((unint64_t)v12 >> 1)];
          v16 = *(a2 - 3);
          v15 = *(a2 - 2);
          if ((unint64_t)v11 < 0x601)
          {
            v24 = v10[1];
            v25 = &v10[3 * v13 + 1];
            v26 = v24 < *v25;
            if (v24 == *v25)
              v26 = *v10 < *v14;
            v27 = v16 < *v10;
            v184 = v15 == v24;
            v28 = v15 < v24;
            if (v184)
              v28 = v27;
            if (v26)
            {
              if (v28)
              {
                v300 = v14[2];
                v276 = *(_QWORD *)v14;
                v29 = *(_QWORD *)v8;
                v14[2] = *(a2 - 1);
                *(_QWORD *)v14 = v29;
LABEL_53:
                *(a2 - 1) = v300;
                *(_QWORD *)v8 = v276;
                goto LABEL_54;
              }
              v307 = v14[2];
              v283 = *(_QWORD *)v14;
              v65 = *(_QWORD *)v10;
              v14[2] = v10[2];
              *(_QWORD *)v14 = v65;
              v10[2] = v307;
              *(_QWORD *)v10 = v283;
              v66 = *(a2 - 2);
              v67 = v10[1];
              v184 = v66 == v67;
              v68 = v66 < v67;
              if (v184)
                v68 = *(a2 - 3) < *v10;
              if (v68)
              {
                v300 = v10[2];
                v276 = *(_QWORD *)v10;
                v69 = *(_QWORD *)v8;
                v10[2] = *(a2 - 1);
                *(_QWORD *)v10 = v69;
                goto LABEL_53;
              }
            }
            else if (v28)
            {
              v303 = v10[2];
              v279 = *(_QWORD *)v10;
              v34 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v34;
              *(a2 - 1) = v303;
              *(_QWORD *)v8 = v279;
              v35 = *v25;
              LODWORD(v34) = v10[1];
              v184 = (_DWORD)v34 == v35;
              v36 = v34 < v35;
              if (v184)
                v36 = *v10 < *v14;
              if (v36)
              {
                v304 = v14[2];
                v280 = *(_QWORD *)v14;
                v37 = *(_QWORD *)v10;
                v14[2] = v10[2];
                *(_QWORD *)v14 = v37;
                v10[2] = v304;
                *(_QWORD *)v10 = v280;
                --a3;
                v38 = v280;
                if ((a4 & 1) != 0)
                  goto LABEL_55;
                goto LABEL_94;
              }
            }
LABEL_54:
            --a3;
            v38 = *v10;
            if ((a4 & 1) != 0)
              goto LABEL_55;
LABEL_94:
            v70 = v10[1];
            v112 = *(v10 - 2);
            v184 = v112 == v70;
            v113 = v112 < v70;
            if (v184)
              v113 = *(v10 - 3) < v38;
            if (v113)
              goto LABEL_97;
            v141 = *(a2 - 2);
            v184 = v70 == v141;
            v142 = v70 < v141;
            if (v184)
              v142 = v38 < *(a2 - 3);
            if (v142)
            {
              do
              {
                v143 = v10[3];
                v144 = v10[4];
                v10 += 3;
                v145 = v38 < v143;
                v184 = v70 == v144;
                v146 = v70 < v144;
                if (!v184)
                  v145 = v146;
              }
              while (!v145);
            }
            else
            {
              v147 = v10 + 3;
              do
              {
                v10 = v147;
                if (v147 >= a2)
                  break;
                v148 = v147[1];
                v149 = v38 < *v10;
                v184 = v70 == v148;
                v150 = v70 < v148;
                if (!v184)
                  v149 = v150;
                v147 = v10 + 3;
              }
              while (!v149);
            }
            v151 = a2;
            if (v10 < a2)
            {
              v151 = a2;
              do
              {
                v152 = *(v151 - 3);
                v153 = *(v151 - 2);
                v151 -= 3;
                v154 = v38 < v152;
                v184 = v70 == v153;
                v155 = v70 < v153;
                if (!v184)
                  v154 = v155;
              }
              while (v154);
            }
            v156 = v7[2];
            while (v10 < v151)
            {
              v317 = v10[2];
              v293 = *(_QWORD *)v10;
              v157 = *(_QWORD *)v151;
              v10[2] = v151[2];
              *(_QWORD *)v10 = v157;
              v151[2] = v317;
              *(_QWORD *)v151 = v293;
              do
              {
                v158 = v10[3];
                v159 = v10[4];
                v10 += 3;
                v160 = v38 < v158;
                v184 = v70 == v159;
                v161 = v70 < v159;
                if (!v184)
                  v160 = v161;
              }
              while (!v160);
              do
              {
                v162 = *(v151 - 3);
                v163 = *(v151 - 2);
                v151 -= 3;
                v164 = v38 < v162;
                v184 = v70 == v163;
                v165 = v70 < v163;
                if (!v184)
                  v164 = v165;
              }
              while (v164);
            }
            if (v10 - 3 != v7)
            {
              v166 = *(_QWORD *)(v10 - 3);
              v7[2] = *(v10 - 1);
              *(_QWORD *)v7 = v166;
            }
            a4 = 0;
            *(v10 - 3) = v38;
            *(v10 - 2) = v70;
            *(v10 - 1) = v156;
            continue;
          }
          v17 = v10[1];
          v18 = &v10[3 * v13 + 1];
          v19 = *v18;
          v184 = *v18 == v17;
          v20 = *v18 < v17;
          if (v184)
            v20 = *v14 < *v10;
          v21 = v16 < *v14;
          v184 = v15 == v19;
          v22 = v15 < v19;
          if (v184)
            v22 = v21;
          if (v20)
          {
            if (v22)
            {
              v299 = v10[2];
              v275 = *(_QWORD *)v10;
              v23 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v23;
LABEL_36:
              *(a2 - 1) = v299;
              *(_QWORD *)v8 = v275;
              goto LABEL_37;
            }
            v305 = v10[2];
            v281 = *(_QWORD *)v10;
            v39 = *(_QWORD *)v14;
            v10[2] = v14[2];
            *(_QWORD *)v10 = v39;
            v14[2] = v305;
            *(_QWORD *)v14 = v281;
            v40 = *(a2 - 2);
            v41 = v40 < *v18;
            if (v40 == *v18)
              v41 = *(a2 - 3) < *v14;
            if (v41)
            {
              v299 = v14[2];
              v275 = *(_QWORD *)v14;
              v42 = *(_QWORD *)v8;
              v14[2] = *(a2 - 1);
              *(_QWORD *)v14 = v42;
              goto LABEL_36;
            }
          }
          else if (v22)
          {
            v301 = v14[2];
            v277 = *(_QWORD *)v14;
            v30 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v30;
            *(a2 - 1) = v301;
            *(_QWORD *)v8 = v277;
            v31 = v10[1];
            v32 = *v18 < v31;
            if (*v18 == v31)
              v32 = *v14 < *v10;
            if (v32)
            {
              v302 = v10[2];
              v278 = *(_QWORD *)v10;
              v33 = *(_QWORD *)v14;
              v10[2] = v14[2];
              *(_QWORD *)v10 = v33;
              v14[2] = v302;
              *(_QWORD *)v14 = v278;
            }
          }
LABEL_37:
          v43 = (uint64_t *)(v10 + 3);
          v44 = &v10[3 * v13];
          v47 = *(v44 - 3);
          v45 = v44 - 3;
          v46 = v47;
          v48 = v45 + 1;
          v49 = v45[1];
          v50 = v10[4];
          v51 = v47 < v10[3];
          v184 = v49 == v50;
          v52 = v49 < v50;
          if (v184)
            v52 = v51;
          v53 = *(a2 - 5);
          v54 = *(a2 - 6) < v46;
          v184 = v53 == v49;
          v55 = v53 < v49;
          if (v184)
            v55 = v54;
          if (v52)
          {
            if (v55)
            {
              v56 = *v43;
              v57 = v10[5];
              v58 = *(a2 - 4);
              *v43 = *(_QWORD *)v274;
              v10[5] = v58;
              *(a2 - 4) = v57;
              *(_QWORD *)v274 = v56;
            }
            else
            {
              v71 = *v43;
              v72 = v10[5];
              v73 = v45[2];
              *v43 = *(_QWORD *)v45;
              v10[5] = v73;
              v45[2] = v72;
              *(_QWORD *)v45 = v71;
              LODWORD(v71) = *(a2 - 5);
              v74 = v71 < *v48;
              if ((_DWORD)v71 == *v48)
                v74 = *(a2 - 6) < *v45;
              if (v74)
              {
                v308 = v45[2];
                v284 = *(_QWORD *)v45;
                v75 = *(_QWORD *)v274;
                v45[2] = *(a2 - 4);
                *(_QWORD *)v45 = v75;
                *(a2 - 4) = v308;
                *(_QWORD *)v274 = v284;
              }
            }
          }
          else if (v55)
          {
            v306 = v45[2];
            v282 = *(_QWORD *)v45;
            v59 = *(_QWORD *)v274;
            v45[2] = *(a2 - 4);
            *(_QWORD *)v45 = v59;
            *(a2 - 4) = v306;
            *(_QWORD *)v274 = v282;
            v60 = v10[4];
            v61 = *v48 < v60;
            if (*v48 == v60)
              v61 = *v45 < v10[3];
            if (v61)
            {
              v62 = *v43;
              v63 = v10[5];
              v64 = v45[2];
              *v43 = *(_QWORD *)v45;
              v10[5] = v64;
              v45[2] = v63;
              *(_QWORD *)v45 = v62;
            }
          }
          v76 = (uint64_t *)(v10 + 6);
          v77 = &v10[3 * v13];
          v80 = v77[3];
          v78 = v77 + 3;
          v79 = v80;
          v81 = v78 + 1;
          v82 = v78[1];
          v83 = v10[7];
          v84 = v80 < v10[6];
          v184 = v82 == v83;
          v85 = v82 < v83;
          if (v184)
            v85 = v84;
          v86 = *(a2 - 8);
          v87 = *(a2 - 9) < v79;
          v184 = v86 == v82;
          v88 = v86 < v82;
          if (v184)
            v88 = v87;
          if (v85)
          {
            if (v88)
            {
              v89 = *v76;
              v90 = v10[8];
              v91 = *(a2 - 7);
              *v76 = *(_QWORD *)v9;
              v10[8] = v91;
              *(a2 - 7) = v90;
              *(_QWORD *)v9 = v89;
            }
            else
            {
              v98 = *v76;
              v99 = v10[8];
              v100 = v78[2];
              *v76 = *(_QWORD *)v78;
              v10[8] = v100;
              v78[2] = v99;
              *(_QWORD *)v78 = v98;
              LODWORD(v98) = *(a2 - 8);
              v101 = v98 < *v81;
              if ((_DWORD)v98 == *v81)
                v101 = *(a2 - 9) < *v78;
              if (v101)
              {
                v310 = v78[2];
                v286 = *(_QWORD *)v78;
                v102 = *(_QWORD *)v9;
                v78[2] = *(a2 - 7);
                *(_QWORD *)v78 = v102;
                *(a2 - 7) = v310;
                *(_QWORD *)v9 = v286;
              }
            }
          }
          else if (v88)
          {
            v309 = v78[2];
            v285 = *(_QWORD *)v78;
            v92 = *(_QWORD *)v9;
            v78[2] = *(a2 - 7);
            *(_QWORD *)v78 = v92;
            *(a2 - 7) = v309;
            *(_QWORD *)v9 = v285;
            v93 = v10[7];
            v94 = *v81 < v93;
            if (*v81 == v93)
              v94 = *v78 < v10[6];
            if (v94)
            {
              v95 = *v76;
              v96 = v10[8];
              v97 = v78[2];
              *v76 = *(_QWORD *)v78;
              v10[8] = v97;
              v78[2] = v96;
              *(_QWORD *)v78 = v95;
            }
          }
          v103 = *v18;
          v104 = *v18 < *v48;
          if (*v18 == *v48)
            v104 = *v14 < *v45;
          result = *v78;
          v184 = *v81 == v103;
          v105 = *v81 < v103;
          if (v184)
            v105 = result < *v14;
          if (v104)
          {
            if (v105)
            {
              v311 = v45[2];
              v287 = *(_QWORD *)v45;
              *(_QWORD *)v45 = *(_QWORD *)v78;
              v45[2] = v78[2];
LABEL_92:
              v78[2] = v311;
              *(_QWORD *)v78 = v287;
              goto LABEL_93;
            }
            v314 = v45[2];
            v290 = *(_QWORD *)v45;
            *(_QWORD *)v45 = *(_QWORD *)v14;
            v45[2] = v14[2];
            v14[2] = v314;
            *(_QWORD *)v14 = v290;
            v109 = *v18;
            v184 = *v81 == v109;
            v110 = *v81 < v109;
            if (v184)
              v110 = *v78 < *v14;
            if (v110)
            {
              v311 = v14[2];
              v287 = *(_QWORD *)v14;
              *(_QWORD *)v14 = *(_QWORD *)v78;
              v14[2] = v78[2];
              goto LABEL_92;
            }
          }
          else if (v105)
          {
            v312 = v14[2];
            v288 = *(_QWORD *)v14;
            *(_QWORD *)v14 = *(_QWORD *)v78;
            v14[2] = v78[2];
            v78[2] = v312;
            *(_QWORD *)v78 = v288;
            v106 = *v18;
            v107 = *v48;
            v184 = v106 == v107;
            v108 = v106 < v107;
            if (v184)
              v108 = *v14 < *v45;
            if (v108)
            {
              v313 = v45[2];
              v289 = *(_QWORD *)v45;
              *(_QWORD *)v45 = *(_QWORD *)v14;
              v45[2] = v14[2];
              v14[2] = v313;
              *(_QWORD *)v14 = v289;
            }
          }
LABEL_93:
          v315 = v10[2];
          v291 = *(_QWORD *)v10;
          v111 = *(_QWORD *)v14;
          v10[2] = v14[2];
          *(_QWORD *)v10 = v111;
          v14[2] = v315;
          *(_QWORD *)v14 = v291;
          --a3;
          v38 = *v10;
          if ((a4 & 1) == 0)
            goto LABEL_94;
LABEL_55:
          v70 = v10[1];
LABEL_97:
          v114 = 0;
          v115 = v10[2];
          do
          {
            v116 = v10[v114 + 4];
            v117 = v10[v114 + 3] < v38;
            v184 = v116 == v70;
            v118 = v116 < v70;
            if (!v184)
              v117 = v118;
            v114 += 3;
          }
          while (v117);
          v119 = &v10[v114];
          v120 = a2;
          if (v114 == 3)
          {
            v120 = a2;
            do
            {
              if (v119 >= v120)
                break;
              v125 = *(v120 - 3);
              v126 = *(v120 - 2);
              v120 -= 3;
              v127 = v125 < v38;
              v184 = v126 == v70;
              v128 = v126 < v70;
              if (!v184)
                v127 = v128;
            }
            while (!v127);
          }
          else
          {
            do
            {
              v121 = *(v120 - 3);
              v122 = *(v120 - 2);
              v120 -= 3;
              v123 = v121 < v38;
              v184 = v122 == v70;
              v124 = v122 < v70;
              if (!v184)
                v123 = v124;
            }
            while (!v123);
          }
          v10 = v119;
          if (v119 < v120)
          {
            v129 = (unint64_t)v120;
            do
            {
              v316 = v10[2];
              v292 = *(_QWORD *)v10;
              v130 = *(_QWORD *)v129;
              v10[2] = *(_DWORD *)(v129 + 8);
              *(_QWORD *)v10 = v130;
              *(_DWORD *)(v129 + 8) = v316;
              *(_QWORD *)v129 = v292;
              do
              {
                v131 = v10[3];
                v132 = v10[4];
                v10 += 3;
                v133 = v131 < v38;
                v184 = v132 == v70;
                v134 = v132 < v70;
                if (!v184)
                  v133 = v134;
              }
              while (v133);
              do
              {
                v135 = *(_DWORD *)(v129 - 12);
                v136 = *(_DWORD *)(v129 - 8);
                v129 -= 12;
                v137 = v135 < v38;
                v184 = v136 == v70;
                v138 = v136 < v70;
                if (!v184)
                  v137 = v138;
              }
              while (!v137);
            }
            while ((unint64_t)v10 < v129);
          }
          if (v10 - 3 != v7)
          {
            v139 = *(_QWORD *)(v10 - 3);
            v7[2] = *(v10 - 1);
            *(_QWORD *)v7 = v139;
          }
          *(v10 - 3) = v38;
          *(v10 - 2) = v70;
          *(v10 - 1) = v115;
          if (v119 < v120)
            goto LABEL_126;
          v140 = sub_20F5BB05C(v7, v10 - 3);
          result = sub_20F5BB05C(v10, a2);
          if (!(_DWORD)result)
          {
            if (v140)
              continue;
LABEL_126:
            result = sub_20F5B9E28(v7, v10 - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 3;
          if (v140)
            return result;
          goto LABEL_2;
        }
        v183 = v10 + 3;
        v184 = v10 == a2 || v183 == a2;
        v185 = v184;
        if ((a4 & 1) != 0)
        {
          if ((v185 & 1) == 0)
          {
            v186 = 0;
            v187 = v10;
            do
            {
              v189 = v183;
              v191 = v187[3];
              v190 = v187[4];
              v192 = v187[1];
              v184 = v190 == v192;
              v193 = v190 < v192;
              if (v184)
                v193 = v191 < *v187;
              if (v193)
              {
                v194 = v187[5];
                v195 = v186;
                do
                {
                  v196 = (char *)v10 + v195;
                  *(_QWORD *)(v196 + 12) = *(_QWORD *)((char *)v10 + v195);
                  *((_DWORD *)v196 + 5) = *(unsigned int *)((char *)v10 + v195 + 8);
                  if (!v195)
                  {
                    v188 = v10;
                    goto LABEL_184;
                  }
                  v197 = *((_DWORD *)v196 - 2);
                  v198 = v191 < *((_DWORD *)v196 - 3);
                  v184 = v190 == v197;
                  v199 = v190 < v197;
                  if (!v184)
                    v198 = v199;
                  v195 -= 12;
                }
                while (v198);
                v188 = (unsigned int *)((char *)v10 + v195 + 12);
LABEL_184:
                *v188 = v191;
                v188[1] = v190;
                v188[2] = v194;
              }
              v183 = v189 + 3;
              v186 += 12;
              v187 = v189;
            }
            while (v189 + 3 != a2);
          }
        }
        else if ((v185 & 1) == 0)
        {
          do
          {
            v256 = v183;
            v258 = v7[3];
            v257 = v7[4];
            v259 = v7[1];
            v184 = v257 == v259;
            v260 = v257 < v259;
            if (v184)
              v260 = v258 < *v7;
            if (v260)
            {
              v261 = v7[5];
              v262 = v256;
              do
              {
                v263 = v262;
                v264 = *(_QWORD *)(v262 - 3);
                v262 -= 3;
                *(_QWORD *)v263 = v264;
                v263[2] = *(v263 - 1);
                v265 = *(v263 - 5);
                v266 = v258 < *(v263 - 6);
                v184 = v257 == v265;
                v267 = v257 < v265;
                if (!v184)
                  v266 = v267;
              }
              while (v266);
              *v262 = v258;
              v262[1] = v257;
              v262[2] = v261;
            }
            v183 = v256 + 3;
            v7 = v256;
          }
          while (v256 + 3 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20F5BB05C(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v7;
  BOOL v8;
  _BOOL4 v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int *v18;
  unsigned int v19;
  _BOOL4 v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  _BOOL4 v33;
  _BOOL4 v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _BOOL4 v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  _BOOL4 v47;
  _BOOL4 v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  _BOOL4 v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  _BOOL4 v62;
  _BOOL4 v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  _BOOL4 v73;
  unsigned int v74;
  uint64_t v75;
  char *v76;
  unsigned int v77;
  BOOL v78;
  BOOL v79;
  _DWORD *v80;

  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = a1[1];
      v7 = v4 < *a1;
      v8 = v5 == v6;
      v9 = v5 < v6;
      if (!v8)
        v7 = v9;
      if (v7)
      {
        v10 = a1[2];
        v11 = *(_QWORD *)a1;
        v12 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v12;
        *(_QWORD *)v3 = v11;
        v3[2] = v10;
      }
      return 1;
    case 3uLL:
      v13 = a1 + 3;
      v14 = a1[3];
      v15 = a1[4];
      v16 = a1[1];
      v8 = v15 == v16;
      v17 = v15 < v16;
      if (v8)
        v17 = v14 < *a1;
      v19 = *(a2 - 2);
      v18 = a2 - 3;
      v20 = *(a2 - 3) < v14;
      if (v19 != v15)
        v20 = v19 < v15;
      if (v17)
      {
        if (v20)
        {
          v21 = a1[2];
          v22 = *(_QWORD *)a1;
          v23 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v18;
          a1[2] = v23;
          *(_QWORD *)v18 = v22;
          *(a2 - 1) = v21;
          return 1;
        }
        v51 = a1[2];
        v52 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v13;
        a1[2] = a1[5];
        *v13 = v52;
        a1[5] = v51;
        v53 = *(a2 - 2);
        v54 = a1[4];
        v8 = v53 == v54;
        v55 = v53 < v54;
        if (v8)
          v55 = *(a2 - 3) < a1[3];
        if (v55)
        {
          v56 = a1[5];
          v57 = *v13;
          v58 = *(a2 - 1);
          *v13 = *(_QWORD *)v18;
          a1[5] = v58;
          *(_QWORD *)v18 = v57;
          *(a2 - 1) = v56;
          return 1;
        }
      }
      else if (v20)
      {
        v37 = a1[5];
        v38 = *v13;
        v39 = *(a2 - 1);
        *v13 = *(_QWORD *)v18;
        a1[5] = v39;
        *(_QWORD *)v18 = v38;
        *(a2 - 1) = v37;
        v40 = a1[4];
        LODWORD(v38) = a1[1];
        v8 = v40 == (_DWORD)v38;
        v41 = v40 < v38;
        if (v8)
          v41 = a1[3] < *a1;
        if (v41)
        {
          v42 = a1[2];
          v43 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v13;
          a1[2] = a1[5];
          *v13 = v43;
          a1[5] = v42;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      sub_20F2BE75C(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_20F397DA0(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v24 = a1 + 6;
      v25 = a1[6];
      v26 = a1 + 3;
      v27 = a1[3];
      v28 = a1[4];
      v30 = *a1;
      v29 = a1[1];
      v31 = __PAIR64__(v28, v27) < *(_QWORD *)a1;
      v32 = a1[7];
      v33 = v25 < v27;
      v8 = v32 == v28;
      v34 = v32 < v28;
      if (!v8)
        v33 = v34;
      if (v31)
      {
        if (v33)
        {
          v35 = a1[2];
          v36 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v24;
          a1[2] = a1[8];
          *(_QWORD *)v24 = v36;
          a1[8] = v35;
        }
        else
        {
          v59 = a1[2];
          v60 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v60;
          a1[5] = v59;
          v61 = a1[4];
          v62 = v25 < a1[3];
          v8 = v32 == v61;
          v63 = v32 < v61;
          if (!v8)
            v62 = v63;
          if (v62)
          {
            v64 = a1[5];
            v65 = *v26;
            *v26 = *(_QWORD *)v24;
            a1[5] = a1[8];
            *(_QWORD *)v24 = v65;
            a1[8] = v64;
          }
        }
      }
      else if (v33)
      {
        v44 = a1[5];
        v45 = *v26;
        *v26 = *(_QWORD *)v24;
        a1[5] = a1[8];
        *(_QWORD *)v24 = v45;
        a1[8] = v44;
        v46 = a1[4];
        v47 = a1[3] < v30;
        v8 = v46 == v29;
        v48 = v46 < v29;
        if (v8)
          v48 = v47;
        if (v48)
        {
          v49 = a1[2];
          v50 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v50;
          a1[5] = v49;
        }
      }
      v66 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v67 = 0;
      v68 = 0;
      break;
  }
  while (1)
  {
    v70 = *v66;
    v69 = v66[1];
    v71 = v24[1];
    v72 = *v66 < *v24;
    v8 = v69 == v71;
    v73 = v69 < v71;
    if (!v8)
      v72 = v73;
    if (v72)
      break;
LABEL_53:
    v24 = v66;
    v67 += 12;
    v66 += 3;
    if (v66 == a2)
      return 1;
  }
  v74 = v66[2];
  v75 = v67;
  do
  {
    v76 = (char *)a1 + v75;
    *(_QWORD *)(v76 + 36) = *(_QWORD *)((char *)a1 + v75 + 24);
    *((_DWORD *)v76 + 11) = *(unsigned int *)((char *)a1 + v75 + 32);
    if (v75 == -24)
    {
      *a1 = v70;
      a1[1] = v69;
      a1[2] = v74;
      if (++v68 != 8)
        goto LABEL_53;
      return v66 + 3 == a2;
    }
    v77 = *((_DWORD *)v76 + 4);
    v78 = v70 < *((_DWORD *)v76 + 3);
    v8 = v69 == v77;
    v79 = v69 < v77;
    if (!v8)
      v78 = v79;
    v75 -= 12;
  }
  while (v78);
  v80 = (unsigned int *)((char *)a1 + v75);
  v80[9] = v70;
  v80[10] = v69;
  v80[11] = v74;
  if (++v68 != 8)
    goto LABEL_53;
  return v66 + 3 == a2;
}

uint64_t sub_20F5BB4F0(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  _DWORD v16[7];
  unsigned int v17;
  __int128 v18;
  __int128 v19;

  if (*(_BYTE *)(a1 + 976))
    return (*(_QWORD *)(a1 + 688) - *(_QWORD *)(a1 + 680)) >> 4;
  v18 = 0u;
  v19 = 0u;
  if (!sub_20F5B8114((_QWORD *)a1, (int *)&v18, v16, 1))
    return v17;
  *(_QWORD *)(a1 + 1568) = *(_QWORD *)(a1 + 1560);
  *(_QWORD *)(a1 + 1592) = *(_QWORD *)(a1 + 1584);
  *(_QWORD *)(a1 + 1616) = *(_QWORD *)(a1 + 1608);
  *(_QWORD *)(a1 + 1640) = *(_QWORD *)(a1 + 1632);
  *(_QWORD *)(a1 + 1664) = *(_QWORD *)(a1 + 1656);
  *(_QWORD *)(a1 + 1688) = *(_QWORD *)(a1 + 1680);
  *(_QWORD *)(a1 + 1712) = *(_QWORD *)(a1 + 1704);
  *(_QWORD *)(a1 + 1736) = *(_QWORD *)(a1 + 1728);
  v3 = *(_QWORD *)(a1 + 776);
  v4 = *(_QWORD *)(a1 + 784);
  while (v3 != v4)
  {
    v5 = *(_QWORD *)(v3 + 208);
    if (*(_BYTE *)(v3 + 496) || (*(_BYTE *)(v5 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v3 + 216) + 4) & 6) != 0)
    {
      sub_20F394A20(a1 + 1560, v5);
      sub_20F3D35E0((_QWORD *)(a1 + 1560), *(_QWORD *)(v3 + 216));
    }
    v3 += 504;
  }
  v6 = *(_QWORD *)(a1 + 800);
  v7 = *(_QWORD *)(a1 + 808);
  while (v6 != v7)
  {
    v8 = *(_QWORD *)(v6 + 136);
    if (*(_BYTE *)(v6 + 272) || (*(_BYTE *)(v8 + 4) & 6) != 0)
      sub_20F394A20(a1 + 1560, v8);
    v6 += 280;
  }
  sub_20F5B8680(*(_QWORD *)(a1 + 824), *(_QWORD *)(a1 + 832), (_QWORD *)(a1 + 1560));
  sub_20F5B85BC(*(_QWORD *)(a1 + 848), *(_QWORD *)(a1 + 856), (_QWORD *)(a1 + 1560));
  sub_20F5B8444(*(_QWORD *)(a1 + 872), *(_QWORD *)(a1 + 880), (_QWORD *)(a1 + 1560));
  v9 = *(_QWORD *)(a1 + 896);
  v10 = *(_QWORD *)(a1 + 904);
  while (v9 != v10)
  {
    v11 = *(_QWORD *)(v9 + 736);
    if (*(_BYTE *)(v9 + 880) || (*(_BYTE *)(v11 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v9 + 744) + 4) & 6) != 0)
    {
      sub_20F394A20(a1 + 1560, v11);
      sub_20F394A20(a1 + 1560, *(_QWORD *)(v9 + 744));
    }
    v9 += 888;
  }
  v12 = (*(_QWORD *)(a1 + 1736) - *(_QWORD *)(a1 + 1728)) >> 2;
  if (HIDWORD(v19) > v12)
    LODWORD(v12) = HIDWORD(v19);
  v13 = v17 >= v12;
  v14 = v17 - v12;
  if (v13)
    v15 = v14;
  else
    v15 = 0;
  sub_20F59A618((_QWORD *)a1);
  return v15;
}

void sub_20F5BB71C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F5BB730(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F5BB744(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F5BB758(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F5BB76C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      if (((a2 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_35;
      v17 = ((a2 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v6 = &v5[16 * (v17 & 0x1FFFFFFFFFFFFFFELL)];
      v18 = v5 + 16;
      v19 = v17 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *((_DWORD *)v18 - 4) = -1;
        *(_DWORD *)v18 = -1;
        *((_QWORD *)v18 - 1) = -1;
        *((_QWORD *)v18 + 1) = -1;
        v18 += 32;
        v19 -= 2;
      }
      while (v19);
      if (v17 != (v17 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_35:
        do
        {
          *(_DWORD *)v6 = -1;
          *((_QWORD *)v6 + 1) = -1;
          v6 += 16;
        }
        while (v6 != &v5[16 * a2]);
      }
      v6 = &v5[16 * a2];
    }
    a1[1] = (uint64_t)v6;
    return;
  }
  v7 = (char *)*a1;
  v8 = (uint64_t)&v5[-*a1] >> 4;
  v9 = v8 + a2;
  if ((v8 + a2) >> 60)
    sub_20E867F44();
  v10 = v4 - (_QWORD)v7;
  if (v10 >> 3 > v9)
    v9 = v10 >> 3;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
    v11 = 0xFFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    if (v11 >> 60)
      sub_20E877A38();
    v12 = (char *)operator new(16 * v11);
    v13 = (uint64_t)&v12[16 * v8];
    v14 = v13 + 16 * a2;
    v15 = v13;
    v16 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (!v16)
      goto LABEL_24;
  }
  else
  {
    v12 = 0;
    v13 = 16 * v8;
    v14 = 16 * v8 + 16 * a2;
    v15 = 16 * v8;
    v16 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (!v16)
    {
      do
      {
LABEL_24:
        *(_DWORD *)v15 = -1;
        *(_QWORD *)(v15 + 8) = -1;
        v15 += 16;
      }
      while (v15 != v14);
      goto LABEL_25;
    }
  }
  v20 = v16 + 1;
  v15 = v13 + 16 * (v20 & 0x1FFFFFFFFFFFFFFELL);
  v21 = v13 + 16;
  v22 = v20 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(_DWORD *)(v21 - 16) = -1;
    *(_DWORD *)v21 = -1;
    *(_QWORD *)(v21 - 8) = -1;
    *(_QWORD *)(v21 + 8) = -1;
    v21 += 32;
    v22 -= 2;
  }
  while (v22);
  if (v20 != (v20 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_24;
LABEL_25:
  v23 = &v12[16 * v11];
  if (v5 == v7)
  {
    v25 = (void *)*a1;
    *a1 = v13;
    a1[1] = v14;
    a1[2] = (uint64_t)v23;
    if (v25)
LABEL_28:
      operator delete(v25);
  }
  else
  {
    do
    {
      v24 = v13 - 16;
      *(_OWORD *)(v13 - 16) = *((_OWORD *)v6 - 1);
      v6 -= 16;
      v13 -= 16;
    }
    while (v6 != v7);
    v25 = (void *)*a1;
    *a1 = v24;
    a1[1] = v14;
    a1[2] = (uint64_t)v23;
    if (v25)
      goto LABEL_28;
  }
}

BOOL sub_20F5BB998(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 result;
  BOOL v19;

  v1 = a1[1];
  v2 = a1[2];
  if (v1 != v2)
  {
    while ((*(_BYTE *)(*(_QWORD *)(v1 + 8) + 4) & 6) == 0)
    {
      v1 += 16;
      if (v1 == v2)
        goto LABEL_4;
    }
    return 1;
  }
LABEL_4:
  v3 = a1[13];
  v4 = a1[14];
  if (v3 != v4)
  {
    while ((*(_BYTE *)(*(_QWORD *)(v3 + 8) + 4) & 6) == 0)
    {
      v3 += 16;
      if (v3 == v4)
        goto LABEL_7;
    }
    return 1;
  }
LABEL_7:
  v5 = a1[25];
  v6 = a1[26];
  if (v5 != v6)
  {
    while ((*(_BYTE *)(*(_QWORD *)(v5 + 8) + 4) & 6) == 0)
    {
      v5 += 16;
      if (v5 == v6)
        goto LABEL_10;
    }
    return 1;
  }
LABEL_10:
  v7 = a1[37];
  v8 = a1[38];
  if (v7 != v8)
  {
    while ((*(_BYTE *)(*(_QWORD *)(v7 + 8) + 4) & 6) == 0)
    {
      v7 += 16;
      if (v7 == v8)
        goto LABEL_13;
    }
    return 1;
  }
LABEL_13:
  v9 = a1[49];
  v10 = a1[50];
  if (v9 != v10)
  {
    while ((*(_BYTE *)(*(_QWORD *)(v9 + 8) + 4) & 6) == 0)
    {
      v9 += 16;
      if (v9 == v10)
        goto LABEL_16;
    }
    return 1;
  }
LABEL_16:
  v11 = a1[61];
  v12 = a1[62];
  if (v11 != v12)
  {
    while ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 4) & 6) == 0)
    {
      v11 += 16;
      if (v11 == v12)
        goto LABEL_19;
    }
    return 1;
  }
LABEL_19:
  v13 = a1[73];
  v14 = a1[74];
  if (v13 != v14)
  {
    while ((*(_BYTE *)(*(_QWORD *)(v13 + 8) + 4) & 6) == 0)
    {
      v13 += 16;
      if (v13 == v14)
        goto LABEL_22;
    }
    return 1;
  }
LABEL_22:
  v15 = a1[85];
  v16 = a1[86];
  if (v15 == v16)
    return 0;
  v17 = v15 + 16;
  do
  {
    result = (*(_BYTE *)(*(_QWORD *)(v17 - 8) + 4) & 6) != 0;
    v19 = (*(_BYTE *)(*(_QWORD *)(v17 - 8) + 4) & 6) != 0 || v17 == v16;
    v17 += 16;
  }
  while (!v19);
  return result;
}

_QWORD *sub_20F5BBAFC(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(a3 + 32) = 0;
  if (result != a2)
  {
    v3 = 0;
    do
    {
      if ((*(_BYTE *)(result[7] + 4) & 6) == 0
        && (*(_BYTE *)(result[8] + 4) & 6) == 0
        && (*(_BYTE *)(result[9] + 4) & 6) == 0
        && (*(_BYTE *)(result[10] + 4) & 6) == 0
        && (*(_BYTE *)(result[11] + 4) & 6) == 0
        && (*(_BYTE *)(result[12] + 4) & 6) == 0
        && (*(_BYTE *)(result[13] + 4) & 6) == 0
        && (*(_BYTE *)(result[14] + 4) & 6) == 0
        && (*(_BYTE *)(result[15] + 4) & 6) == 0
        && (*(_BYTE *)(result[16] + 4) & 6) == 0
        && (*(_BYTE *)(result[17] + 4) & 6) == 0)
      {
        *(_QWORD *)(a3 + 32) = ++v3;
      }
      result += 27;
    }
    while (result != a2);
  }
  return result;
}

uint64_t sub_20F5BBBDC(_QWORD *a1, void **a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  size_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = a1[882];
  v5 = *(_DWORD *)(v4 + 12);
  v6 = (6 * *(_DWORD *)(v4 + 8));
  v7 = (9 * *(_DWORD *)(a1[889] + 8) + v6);
  v8 = (*(_DWORD *)(a1[896] + 8) + v7);
  v9 = (v8 + 6 * *(_DWORD *)(a1[903] + 8));
  v10 = *(_DWORD *)(a1[910] + 8);
  v11 = (v9 + 4 * (*(_DWORD *)(a1[917] + 8) + v10));
  v12 = 3 * *(_DWORD *)(a1[924] + 8) + v11;
  v13 = (9 * *(_DWORD *)(a1[883] + 12) + 6 * v5);
  v14 = (*(_DWORD *)(a1[884] + 12) + v13);
  v15 = *(_DWORD *)(a1[886] + 12);
  v16 = (v14 + 6 * *(_DWORD *)(a1[885] + 12));
  v17 = (v16 + 4 * (*(_DWORD *)(a1[887] + 12) + v15));
  v18 = 3 * *(_DWORD *)(a1[888] + 12) + v17;
  *((_DWORD *)a2 + 4) = v12;
  *((_DWORD *)a2 + 5) = v18;
  v19 = v18 * (unint64_t)v12;
  v26 = v6;
  v27 = v17;
  v28 = v13;
  v29 = v14;
  v30 = (6 * v5);
  v25 = v7;
  if ((unint64_t)a2[1] < v19)
  {
    if (*a2)
      MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
    v20 = (8 * v19 + 31) & 0xFFFFFFFFFFFFFFE0;
    *a2 = 0;
    a2[1] = (void *)(v20 >> 3);
    *a2 = operator new(v20, (std::align_val_t)0x20uLL);
    v12 = *((_DWORD *)a2 + 4);
    v18 = *((_DWORD *)a2 + 5);
  }
  v21 = v18 * v12;
  if (v21)
    bzero(*a2, 8 * v21);
  v22 = (v16 + 4 * v15);
  v23 = (v9 + 4 * v10);
  (*(void (**)(_QWORD *, void **, uint64_t))(a1[108] + 64))(a1 + 108, a2, v11);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[234] + 64))(a1 + 234, a2, v11 | ((unint64_t)v30 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[360] + 64))(a1 + 360, a2, v11 | ((unint64_t)v28 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[486] + 64))(a1 + 486, a2, v11 | ((unint64_t)v29 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[612] + 64))(a1 + 612, a2, v11 | ((unint64_t)v16 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[738] + 64))(a1 + 738, a2, v11 | ((unint64_t)v22 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[864] + 64))(a1 + 864, a2, v11 | ((unint64_t)v27 << 32));
  (*(void (**)(_QWORD *, void **, uint64_t))(a1[90] + 64))(a1 + 90, a2, v23);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[216] + 64))(a1 + 216, a2, v23 | ((unint64_t)v30 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[342] + 64))(a1 + 342, a2, v23 | ((unint64_t)v28 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[468] + 64))(a1 + 468, a2, v23 | ((unint64_t)v29 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[594] + 64))(a1 + 594, a2, v23 | ((unint64_t)v16 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[720] + 64))(a1 + 720, a2, v23 | ((unint64_t)v22 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[846] + 64))(a1 + 846, a2, v23 | ((unint64_t)v27 << 32));
  (*(void (**)(_QWORD *, void **, uint64_t))(a1[72] + 64))(a1 + 72, a2, v9);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[198] + 64))(a1 + 198, a2, v9 | ((unint64_t)v30 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[324] + 64))(a1 + 324, a2, v9 | ((unint64_t)v28 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[450] + 64))(a1 + 450, a2, v9 | ((unint64_t)v29 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[576] + 64))(a1 + 576, a2, v9 | ((unint64_t)v16 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[702] + 64))(a1 + 702, a2, v9 | ((unint64_t)v22 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[828] + 64))(a1 + 828, a2, v9 | ((unint64_t)v27 << 32));
  (*(void (**)(_QWORD *, void **, uint64_t))(a1[54] + 64))(a1 + 54, a2, v8);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[180] + 64))(a1 + 180, a2, v8 | ((unint64_t)v30 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[306] + 64))(a1 + 306, a2, v8 | ((unint64_t)v28 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[432] + 64))(a1 + 432, a2, v8 | ((unint64_t)v29 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[558] + 64))(a1 + 558, a2, v8 | ((unint64_t)v16 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[684] + 64))(a1 + 684, a2, v8 | ((unint64_t)v22 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[810] + 64))(a1 + 810, a2, v8 | ((unint64_t)v27 << 32));
  (*(void (**)(_QWORD *, void **, uint64_t))(a1[36] + 64))(a1 + 36, a2, v25);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[162] + 64))(a1 + 162, a2, v25 | ((unint64_t)v30 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[288] + 64))(a1 + 288, a2, v25 | ((unint64_t)v28 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[414] + 64))(a1 + 414, a2, v25 | ((unint64_t)v29 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[540] + 64))(a1 + 540, a2, v25 | ((unint64_t)v16 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[666] + 64))(a1 + 666, a2, v25 | ((unint64_t)v22 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[792] + 64))(a1 + 792, a2, v25 | ((unint64_t)v27 << 32));
  (*(void (**)(_QWORD *, void **, uint64_t))(a1[18] + 64))(a1 + 18, a2, v26);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[144] + 64))(a1 + 144, a2, v26 | ((unint64_t)v30 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[270] + 64))(a1 + 270, a2, v26 | ((unint64_t)v28 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[396] + 64))(a1 + 396, a2, v26 | ((unint64_t)v29 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[522] + 64))(a1 + 522, a2, v26 | ((unint64_t)v16 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[648] + 64))(a1 + 648, a2, v26 | ((unint64_t)v22 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[774] + 64))(a1 + 774, a2, v26 | ((unint64_t)v27 << 32));
  (*(void (**)(_QWORD *, void **, _QWORD))(*a1 + 64))(a1, a2, 0);
  (*(void (**)(_QWORD *, void **, uint64_t))(a1[126] + 64))(a1 + 126, a2, v30 << 32);
  (*(void (**)(_QWORD *, void **, uint64_t))(a1[252] + 64))(a1 + 252, a2, v28 << 32);
  (*(void (**)(_QWORD *, void **, uint64_t))(a1[378] + 64))(a1 + 378, a2, v29 << 32);
  (*(void (**)(_QWORD *, void **, uint64_t))(a1[504] + 64))(a1 + 504, a2, v16 << 32);
  (*(void (**)(_QWORD *, void **, uint64_t))(a1[630] + 64))(a1 + 630, a2, v22 << 32);
  return (*(uint64_t (**)(_QWORD *, void **, uint64_t))(a1[756] + 64))(a1 + 756, a2, v27 << 32);
}

void sub_20F5BC34C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, float64x2_t a5)
{
  float64x2_t v5;
  _QWORD *v6;
  unint64_t v10;
  unsigned int v11;
  void *v12;
  size_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  unsigned int v17;
  uint64_t v18;
  double v19;
  double cosval;
  __double2 v21;
  double v23;
  double v24;
  double v25;
  double v26;
  float64x2_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  float64x2_t v38;
  double v39;
  double v41;
  double v43;
  float64x2_t v45;
  double v51;
  float64x2_t v52;
  float64x2_t v54;
  int64x2_t v55;
  float64x2_t *v56;
  float64x2_t v57;
  float64x2_t v58;
  int8x16_t v59;
  uint64_t v60;
  int v61;
  double *v62;
  uint64_t v63;
  double v64;
  double v67;
  _DWORD *v68;
  _DWORD *v69;
  uint64_t v70;
  int v71;
  float64x2_t *v72;
  uint64_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t *v78;
  _DWORD *v79;
  _DWORD *v80;
  uint64_t v81;
  int v82;
  char *v83;
  _DWORD *v84;
  _DWORD *v85;
  _DWORD *v86;
  _DWORD *v87;
  uint64_t v88;
  int v89;
  float64x2_t *v90;
  uint64_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t *v94;
  _DWORD *v95;
  _DWORD *v96;
  uint64_t v97;
  int v98;
  float64x2_t *v99;
  uint64_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t *v103;
  char *v104;
  _DWORD *v105;
  _DWORD *v106;
  uint64_t v107;
  double v108;
  double v109;
  double v110;
  __double2 v111;
  double v113;
  double v114;
  double v115;
  double v116;
  float64x2_t v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  float64x2_t v128;
  double v129;
  double v131;
  double v133;
  float64x2_t v135;
  double v137;
  float64x2_t v138;
  float64x2_t v140;
  int64x2_t v141;
  float64x2_t *v142;
  float64x2_t v143;
  float64x2_t v144;
  int8x16_t v145;
  uint64_t v146;
  int v147;
  double *v148;
  uint64_t v149;
  double v150;
  double v153;
  uint64_t v154;
  double v155;
  double v156;
  double v157;
  __double2 v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  float64x2_t v181;
  double v182;
  float64x2_t v183;
  double v184;
  float64x2_t v185;
  __int128 v186;
  uint64_t v187;
  int v188;
  __int128 *v189;
  uint64_t v190;
  double v194;
  _QWORD *v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  float64x2_t v200;
  double v201;
  float64x2_t v202;
  double v203;
  float64x2_t v204;
  double v205;

  v6 = (_QWORD *)a4;
  v10 = *(unsigned int *)(a4 + 16);
  v11 = v10;
  if ((_DWORD)v10 == *(_DWORD *)(a2 + 16))
  {
    v12 = *(void **)a2;
  }
  else
  {
    *(_DWORD *)(a2 + 16) = v10;
    v12 = *(void **)a2;
    if (*(_QWORD *)(a2 + 8) < v10)
    {
      if (v12)
      {
        MEMORY[0x212BC6368](v12, 0x1000C8000313F17);
        v11 = *(_DWORD *)(a2 + 16);
      }
      v13 = (8 * v10 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = v13 >> 3;
      v12 = operator new(v13, (std::align_val_t)0x20uLL);
      *(_QWORD *)a2 = v12;
    }
  }
  if (v11)
    bzero(v12, 8 * v11);
  v14 = *v6;
  v15 = *(_DWORD **)a3;
  v16 = *(_DWORD **)(a3 + 8);
  v195 = v6;
  v17 = 0;
  if (*(_DWORD **)a3 != v16)
  {
    v18 = a1[1];
    do
    {
      v18 -= 16;
      do
      {
        v61 = *(_DWORD *)(v18 + 16);
        v18 += 16;
      }
      while (*v15 != v61);
      v62 = (double *)(v14 + 8 * v17);
      v63 = *(_QWORD *)(v18 + 8);
      v64 = v62[2];
      _Q7 = *(_OWORD *)v62;
      _D13 = v62[1];
      __asm { FMLA            D0, D13, V7.D[1] }
      v67 = _D0 + v64 * v64;
      if (v67 >= 0.0000002635)
      {
        v19 = sqrt(v67);
        v196 = *(_OWORD *)v62;
        v21 = __sincos_stret(v19);
        cosval = v21.__cosval;
        *(_QWORD *)&_Q7 = v196;
        v23 = v21.__sinval / v19;
        v24 = 1.0 / v67 * (1.0 - v21.__cosval);
      }
      else
      {
        v24 = 0.5 - v67 * (v67 / -720.0 + 0.0416666667);
        v23 = 1.0 - v67 * (0.166666667 - v67 * (v67 / -5040.0 + 0.00833333333));
        cosval = 1.0 - v67 * v24;
      }
      v25 = *(double *)&_Q7 * v24;
      v26 = _D13 * v24;
      v27.f64[0] = cosval + *(double *)&_Q7 * (*(double *)&_Q7 * v24);
      v28 = cosval + _D13 * (_D13 * v24);
      v29 = cosval + v64 * (v64 * v24);
      v30 = _D13 * (*(double *)&_Q7 * v24);
      v31 = v64 * v26;
      v32 = *(double *)&_Q7 * v23;
      v33 = _D13 * v23;
      v34 = v64 * v23;
      v35 = v30 - v34;
      _Q0.f64[0] = v30 + v34;
      _D2 = v31 - v32;
      v38.f64[0] = v64 * v25 - v33;
      v27.f64[1] = v35;
      _Q0.f64[1] = v28;
      v38.f64[1] = v32 + v31;
      v39 = *(double *)(v63 + 48);
      _Q6 = *(float64x2_t *)(v63 + 32);
      v41 = *(double *)(v63 + 72);
      _Q16 = *(float64x2_t *)(v63 + 56);
      v43 = *(double *)(v63 + 96);
      _Q19 = *(float64x2_t *)(v63 + 80);
      v45 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v27, _Q6.f64[0]), _Q0, _Q6, 1), v38, v39);
      __asm { FMLA            D21, D2, V6.D[1] }
      v51 = _D21 + v29 * v39;
      v52 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v27, _Q16.f64[0]), _Q0, _Q16, 1), v38, v41);
      __asm { FMLA            D21, D2, V16.D[1] }
      v54 = vmlaq_laneq_f64(vmulq_n_f64(v27, _Q19.f64[0]), _Q0, _Q19, 1);
      __asm { FMLA            D0, D2, V19.D[1] }
      v201 = v51;
      v200 = v45;
      v203 = _D21 + v29 * v41;
      v202 = v52;
      v205 = _Q0.f64[0] + v29 * v43;
      v204 = vmlaq_n_f64(v54, v38, v43);
      v199 = 0;
      v198 = 0uLL;
      sub_20E9733B8(&v200, (double *)&v198);
      v55.i64[0] = v199;
      v56 = (float64x2_t *)(v14 + 8 * (v17 + 3));
      v57.f64[0] = *(float64_t *)(v63 + 120);
      v58.f64[0] = v56[1].f64[0];
      v59 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v63 + 104), *v56);
      a5 = (float64x2_t)vzip1q_s64(v55, (int64x2_t)v59);
      v60 = *(_QWORD *)a2 + 8 * v17;
      *(_OWORD *)v60 = v198;
      *(float64x2_t *)(v60 + 16) = a5;
      *(int8x16_t *)(v60 + 32) = vextq_s8(v59, (int8x16_t)vsubq_f64(v57, v58), 8uLL);
      v17 += 6;
      ++v15;
    }
    while (v15 != v16);
    v6 = v195;
    v14 = *v195;
  }
  v68 = *(_DWORD **)(a3 + 24);
  v69 = *(_DWORD **)(a3 + 32);
  if (v68 != v69)
  {
    v70 = a1[13];
    do
    {
      v70 -= 16;
      do
      {
        v71 = *(_DWORD *)(v70 + 16);
        v70 += 16;
      }
      while (*v68 != v71);
      v72 = *(float64x2_t **)(v70 + 8);
      v73 = 8 * v17;
      a5.f64[0] = v72[6].f64[0];
      v5.f64[0] = *(float64_t *)(v14 + v73 + 64);
      a5 = vsubq_f64(a5, v5);
      v74 = vsubq_f64(v72[2], *(float64x2_t *)(v14 + v73));
      v75 = vsubq_f64(v72[5], *(float64x2_t *)(v14 + v73 + 48));
      v76 = vsubq_f64(v72[4], *(float64x2_t *)(v14 + v73 + 32));
      v77 = vsubq_f64(v72[3], *(float64x2_t *)(v14 + v73 + 16));
      v78 = (float64x2_t *)(*(_QWORD *)a2 + v73);
      v78[2] = v76;
      v78[3] = v75;
      *v78 = v74;
      v78[1] = v77;
      v78[4].f64[0] = a5.f64[0];
      v17 += 9;
      ++v68;
    }
    while (v68 != v69);
    v14 = *v6;
  }
  v79 = *(_DWORD **)(a3 + 48);
  v80 = *(_DWORD **)(a3 + 56);
  if (v79 == v80)
  {
    v83 = "eNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImplINS0_13mapping_types2v225ObjectAnchorRemovalSampleILj2EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_";
    v84 = *(_DWORD **)(a3 + 72);
    v85 = *(_DWORD **)(a3 + 80);
    if (v84 == v85)
      goto LABEL_30;
  }
  else
  {
    v81 = a1[25];
    do
    {
      v81 -= 16;
      do
      {
        v82 = *(_DWORD *)(v81 + 16);
        v81 += 16;
      }
      while (*v79 != v82);
      *(double *)(*(_QWORD *)a2 + 8 * v17) = *(double *)(*(_QWORD *)(v81 + 8) + 32) - *(double *)(v14 + 8 * v17);
      ++v17;
      ++v79;
    }
    while (v79 != v80);
    v14 = *v6;
    v83 = "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImplINS0_13mapp"
          "ing_types2v225ObjectAnchorRemovalSampleILj2EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_"
        + 38;
    v84 = *(_DWORD **)(a3 + 72);
    v85 = *(_DWORD **)(a3 + 80);
    if (v84 == v85)
    {
LABEL_30:
      v86 = *(_DWORD **)(a3 + 96);
      v87 = *(_DWORD **)(a3 + 104);
      if (v86 != v87)
        goto LABEL_31;
LABEL_51:
      v95 = *(_DWORD **)(a3 + 120);
      v96 = *(_DWORD **)(a3 + 128);
      if (v95 != v96)
        goto LABEL_36;
LABEL_52:
      v104 = "eNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImplINS0_13mapping_types2v225ObjectAnchorRemovalSampleILj2EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_";
      v105 = *(_DWORD **)(a3 + 144);
      v106 = *(_DWORD **)(a3 + 152);
      if (v105 == v106)
        return;
      goto LABEL_53;
    }
  }
  v107 = a1[37];
  v108 = *((double *)v83 + 300);
  do
  {
    v107 -= 16;
    do
    {
      v147 = *(_DWORD *)(v107 + 16);
      v107 += 16;
    }
    while (*v84 != v147);
    v148 = (double *)(v14 + 8 * v17);
    v149 = *(_QWORD *)(v107 + 8);
    v150 = v148[2];
    _Q7 = *(_OWORD *)v148;
    _D13 = v148[1];
    __asm { FMLA            D0, D13, V7.D[1] }
    v153 = _D0 + v150 * v150;
    if (v153 >= v108)
    {
      v109 = sqrt(v153);
      v197 = *(_OWORD *)v148;
      v111 = __sincos_stret(v109);
      v110 = v111.__cosval;
      *(_QWORD *)&_Q7 = v197;
      v113 = v111.__sinval / v109;
      v114 = 1.0 / v153 * (1.0 - v111.__cosval);
    }
    else
    {
      v114 = 0.5 - v153 * (v153 / -720.0 + 0.0416666667);
      v113 = 1.0 - v153 * (0.166666667 - v153 * (v153 / -5040.0 + 0.00833333333));
      v110 = 1.0 - v153 * v114;
    }
    v115 = *(double *)&_Q7 * v114;
    v116 = _D13 * v114;
    v117.f64[0] = v110 + *(double *)&_Q7 * (*(double *)&_Q7 * v114);
    v118 = v110 + _D13 * (_D13 * v114);
    v119 = v110 + v150 * (v150 * v114);
    v120 = _D13 * (*(double *)&_Q7 * v114);
    v121 = v150 * v116;
    v122 = *(double *)&_Q7 * v113;
    v123 = _D13 * v113;
    v124 = v150 * v113;
    v125 = v120 - v124;
    _Q0.f64[0] = v120 + v124;
    _D2 = v121 - v122;
    v128.f64[0] = v150 * v115 - v123;
    v117.f64[1] = v125;
    _Q0.f64[1] = v118;
    v128.f64[1] = v122 + v121;
    v129 = *(double *)(v149 + 48);
    _Q6 = *(float64x2_t *)(v149 + 32);
    v131 = *(double *)(v149 + 72);
    _Q16 = *(float64x2_t *)(v149 + 56);
    v133 = *(double *)(v149 + 96);
    _Q19 = *(float64x2_t *)(v149 + 80);
    v135 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v117, _Q6.f64[0]), _Q0, _Q6, 1), v128, v129);
    __asm { FMLA            D21, D2, V6.D[1] }
    v137 = _D21 + v119 * v129;
    v138 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v117, _Q16.f64[0]), _Q0, _Q16, 1), v128, v131);
    __asm { FMLA            D21, D2, V16.D[1] }
    v140 = vmlaq_laneq_f64(vmulq_n_f64(v117, _Q19.f64[0]), _Q0, _Q19, 1);
    __asm { FMLA            D0, D2, V19.D[1] }
    v201 = v137;
    v200 = v135;
    v203 = _D21 + v119 * v131;
    v202 = v138;
    v205 = _Q0.f64[0] + v119 * v133;
    v204 = vmlaq_n_f64(v140, v128, v133);
    v199 = 0;
    v198 = 0uLL;
    sub_20E9733B8(&v200, (double *)&v198);
    v141.i64[0] = v199;
    v142 = (float64x2_t *)(v14 + 8 * (v17 + 3));
    v143.f64[0] = *(float64_t *)(v149 + 120);
    v144.f64[0] = v142[1].f64[0];
    v145 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v149 + 104), *v142);
    v146 = *(_QWORD *)a2 + 8 * v17;
    *(_OWORD *)v146 = v198;
    *(int64x2_t *)(v146 + 16) = vzip1q_s64(v141, (int64x2_t)v145);
    *(int8x16_t *)(v146 + 32) = vextq_s8(v145, (int8x16_t)vsubq_f64(v143, v144), 8uLL);
    v17 += 6;
    ++v84;
  }
  while (v84 != v85);
  v6 = v195;
  v14 = *v195;
  v86 = *(_DWORD **)(a3 + 96);
  v87 = *(_DWORD **)(a3 + 104);
  if (v86 == v87)
    goto LABEL_51;
LABEL_31:
  v88 = a1[49];
  do
  {
    v88 -= 16;
    do
    {
      v89 = *(_DWORD *)(v88 + 16);
      v88 += 16;
    }
    while (*v86 != v89);
    v90 = *(float64x2_t **)(v88 + 8);
    v91 = 8 * v17;
    v92 = vsubq_f64(v90[2], *(float64x2_t *)(v14 + v91));
    v93 = vsubq_f64(v90[3], *(float64x2_t *)(v14 + v91 + 16));
    v94 = (float64x2_t *)(*(_QWORD *)a2 + v91);
    *v94 = v92;
    v94[1] = v93;
    v17 += 4;
    ++v86;
  }
  while (v86 != v87);
  v14 = *v6;
  v95 = *(_DWORD **)(a3 + 120);
  v96 = *(_DWORD **)(a3 + 128);
  if (v95 == v96)
    goto LABEL_52;
LABEL_36:
  v97 = a1[61];
  do
  {
    v97 -= 16;
    do
    {
      v98 = *(_DWORD *)(v97 + 16);
      v97 += 16;
    }
    while (*v95 != v98);
    v99 = *(float64x2_t **)(v97 + 8);
    v100 = 8 * v17;
    v101 = vsubq_f64(v99[2], *(float64x2_t *)(v14 + v100));
    v102 = vsubq_f64(v99[3], *(float64x2_t *)(v14 + v100 + 16));
    v103 = (float64x2_t *)(*(_QWORD *)a2 + v100);
    *v103 = v101;
    v103[1] = v102;
    v17 += 4;
    ++v95;
  }
  while (v95 != v96);
  v14 = *v6;
  v104 = "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImplINS0_13mappi"
         "ng_types2v225ObjectAnchorRemovalSampleILj2EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_"
       + 38;
  v105 = *(_DWORD **)(a3 + 144);
  v106 = *(_DWORD **)(a3 + 152);
  if (v105 != v106)
  {
LABEL_53:
    v154 = a1[73];
    v155 = *((double *)v104 + 300);
    do
    {
      v154 -= 16;
      do
      {
        v188 = *(_DWORD *)(v154 + 16);
        v154 += 16;
      }
      while (*v105 != v188);
      v189 = (__int128 *)(v14 + 8 * v17);
      v190 = *(_QWORD *)(v154 + 8);
      _Q1 = *v189;
      _D3 = *((_QWORD *)v189 + 1);
      __asm { FMLA            D2, D3, V1.D[1] }
      v194 = _D2 + *((double *)v189 + 2) * *((double *)v189 + 2);
      if (v194 >= v155)
      {
        v156 = sqrt(v194);
        v158 = __sincos_stret(v156);
        v157 = v158.__cosval;
        v159 = v158.__sinval / v156;
        v160 = 1.0 / v194 * (1.0 - v158.__cosval);
      }
      else
      {
        v160 = 0.5 - v194 * (v194 / -720.0 + 0.0416666667);
        v159 = 1.0 - v194 * (0.166666667 - v194 * (v194 / -5040.0 + 0.00833333333));
        v157 = 1.0 - v194 * v160;
      }
      v161 = *((double *)v189 + 1);
      v162 = v160 * *(double *)v189;
      v163 = v160 * v161;
      v164 = *((double *)v189 + 2);
      v165 = v157 + *(double *)v189 * v162;
      v166 = v157 + v161 * (v160 * v161);
      v167 = v157 + v164 * (v160 * v164);
      v168 = v162 * v161;
      v169 = v162 * v164;
      v170 = v163 * v164;
      v171 = v159 * *(double *)v189;
      v172 = v159 * v161;
      v173 = v159 * v164;
      v174 = v168 - v173;
      v175 = v172 + v169;
      v176 = v168 + v173;
      v177 = v170 - v171;
      v178 = v169 - v172;
      v179 = v171 + v170;
      v180 = *(double *)(v190 + 48);
      v181 = *(float64x2_t *)(v190 + 32);
      v182 = *(double *)(v190 + 72);
      v183 = *(float64x2_t *)(v190 + 56);
      v184 = *(double *)(v190 + 96);
      v185 = *(float64x2_t *)(v190 + 80);
      v201 = v180 * v165 + v182 * v174 + v184 * v175;
      v200 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v181, v165), v183, v174), v185, v175);
      v203 = v180 * v176 + v182 * v166 + v184 * v177;
      v202 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v181, v176), v183, v166), v185, v177);
      v205 = v180 * v178 + v182 * v179 + v184 * v167;
      v204 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v181, v178), v183, v179), v185, v167);
      v198 = 0uLL;
      v199 = 0;
      sub_20E9733B8(&v200, (double *)&v198);
      v186 = v198;
      v187 = *(_QWORD *)a2 + 8 * v17;
      *(_QWORD *)(v187 + 16) = v199;
      *(_OWORD *)v187 = v186;
      v17 += 3;
      ++v105;
    }
    while (v105 != v106);
  }
}

double sub_20F5BCC94(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[4];
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(v3 + 8) - 8 * *(unsigned int *)(v3 + 16) == a1 || (v4 = *(_QWORD *)(a2 + 16), *(_QWORD *)v4 == a1))
  {
    sub_20F5BCC94(v8);
    v6 = v8[3];
    *(_OWORD *)(a1 + 32) = v8[2];
    *(_OWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 64) = v9;
    v5 = v8[1];
    *(_OWORD *)a1 = v8[0];
    *(_OWORD *)(a1 + 16) = v5;
  }
  else if (*(_DWORD *)v3 && *(_DWORD *)(v4 + 16))
  {
    sub_20E8BE6CC();
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)&v5 = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return *(double *)&v5;
}

#error "20F5BCD70: too big function (funcsize=0)"

void sub_20F61521C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_20F615230(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_20F615244(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_20F615258(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 24));
  _Unwind_Resume(a1);
}

void sub_20F61526C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_20F615280(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 24));
  _Unwind_Resume(a1);
}

void sub_20F615294(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 24));
  _Unwind_Resume(a1);
}

void sub_20F6152A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 24));
  _Unwind_Resume(a1);
}

void sub_20F6152BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_20F6152D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 24));
  _Unwind_Resume(a1);
}

BOOL sub_20F6152E8(uint64_t a1, double *a2, float64x2_t *a3)
{
  _QWORD *v6;
  _OWORD *v7;
  _BOOL8 v8;
  uint64_t v9;
  float64x2_t *v10;
  double v17;
  long double v18;
  double v19;
  double v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v58;

  v6 = (_QWORD *)(a1 + 48);
  v7 = (_OWORD *)(a1 + 152);
  v8 = sub_20FC7238C(a1, (_QWORD *)(a1 + 48), a1 + 152, (uint64_t)a3);
  *(_BYTE *)(a1 + 176) = v8;
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 184);
    if (v9)
    {
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v9 + 24))(v9, v7);
      v10 = *(float64x2_t **)(a1 + 184);
    }
    else
    {
      v10 = 0;
    }
    *(_OWORD *)(a1 + 136) = *v7;
    v58 = *(float64x2_t *)(a1 + 152);
    _D1 = v58.f64[1];
    __asm { FMLA            D0, D1, V2.D[1] }
    v17 = a2[2];
    v18 = a2[3] * (a2[1] * _D0);
    v19 = v18 + 1.0;
    *(long double *)(a1 + 168) = v17 * log1p(v18);
    v20 = sqrt(1.0 / v19);
    *(float64x2_t *)(a1 + 152) = vmulq_n_f64(v58, v20);
    if (v10)
    {
      sub_20F615608(v6, v10, a3, 1.0 / v19);
    }
    else
    {
      if (*(_BYTE *)(*v6 + 20))
      {
        v21 = vmulq_n_f64(a3[5], v20);
        v22 = vmulq_n_f64(a3[4], v20);
        v23 = vmulq_n_f64(a3[3], v20);
        v24 = vmulq_n_f64(a3[2], v20);
        v25 = vmulq_n_f64(a3[1], v20);
        *a3 = vmulq_n_f64(*a3, v20);
        a3[1] = v25;
        a3[2] = v24;
        a3[3] = v23;
        a3[4] = v22;
        a3[5] = v21;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 20))
      {
        v26 = vmulq_n_f64(a3[11], v20);
        v27 = vmulq_n_f64(a3[10], v20);
        v28 = vmulq_n_f64(a3[9], v20);
        v29 = vmulq_n_f64(a3[8], v20);
        v30 = vmulq_n_f64(a3[7], v20);
        a3[6] = vmulq_n_f64(a3[6], v20);
        a3[7] = v30;
        a3[8] = v29;
        a3[9] = v28;
        a3[10] = v27;
        a3[11] = v26;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 20))
      {
        v31 = vmulq_n_f64(a3[17], v20);
        v32 = vmulq_n_f64(a3[16], v20);
        v33 = vmulq_n_f64(a3[15], v20);
        v34 = vmulq_n_f64(a3[14], v20);
        v35 = vmulq_n_f64(a3[13], v20);
        a3[12] = vmulq_n_f64(a3[12], v20);
        a3[13] = v35;
        a3[14] = v34;
        a3[15] = v33;
        a3[16] = v32;
        a3[17] = v31;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 20))
      {
        v36 = vmulq_n_f64(a3[23], v20);
        v37 = vmulq_n_f64(a3[22], v20);
        v38 = vmulq_n_f64(a3[21], v20);
        v39 = vmulq_n_f64(a3[20], v20);
        v40 = vmulq_n_f64(a3[19], v20);
        a3[18] = vmulq_n_f64(a3[18], v20);
        a3[19] = v40;
        a3[20] = v39;
        a3[21] = v38;
        a3[22] = v37;
        a3[23] = v36;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 20))
      {
        v41 = vmulq_n_f64(a3[25], v20);
        v42 = vmulq_n_f64(a3[24], v20);
        v43 = vmulq_n_f64(a3[27], v20);
        a3[26] = vmulq_n_f64(a3[26], v20);
        a3[27] = v43;
        a3[24] = v42;
        a3[25] = v41;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 20))
      {
        v44 = vmulq_n_f64(a3[29], v20);
        v45 = vmulq_n_f64(a3[28], v20);
        v46 = vmulq_n_f64(a3[31], v20);
        a3[30] = vmulq_n_f64(a3[30], v20);
        a3[31] = v46;
        a3[28] = v45;
        a3[29] = v44;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 96) + 20))
      {
        v47 = vmulq_n_f64(a3[33], v20);
        v48 = vmulq_n_f64(a3[32], v20);
        v49 = vmulq_n_f64(a3[35], v20);
        a3[34] = vmulq_n_f64(a3[34], v20);
        a3[35] = v49;
        a3[32] = v48;
        a3[33] = v47;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 104) + 20))
      {
        v50 = vmulq_n_f64(a3[37], v20);
        v51 = vmulq_n_f64(a3[36], v20);
        v52 = vmulq_n_f64(a3[39], v20);
        a3[38] = vmulq_n_f64(a3[38], v20);
        a3[39] = v52;
        a3[36] = v51;
        a3[37] = v50;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 112) + 20))
      {
        v53 = vmulq_n_f64(a3[42], v20);
        v54 = vmulq_n_f64(a3[41], v20);
        a3[40] = vmulq_n_f64(a3[40], v20);
        a3[41] = v54;
        a3[42] = v53;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 120) + 20))
      {
        v55 = vmulq_n_f64(a3[45], v20);
        v56 = vmulq_n_f64(a3[44], v20);
        a3[43] = vmulq_n_f64(a3[43], v20);
        a3[44] = v56;
        a3[45] = v55;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 128) + 20))
        a3[46] = vmulq_n_f64(a3[46], v20);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 168) = 0;
  }
  return v8;
}

_QWORD *sub_20F615608(_QWORD *a1, float64x2_t *a2, float64x2_t *a3, double a4)
{
  _QWORD *result;
  double v8;
  int v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  double v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  double v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t *v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  double v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  double v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  double v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  double v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  double v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t *v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  double v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t *v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  double v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  double v245;
  float64x2_t v246;
  float64x2_t v247;

  v245 = sqrt(a4);
  result = (_QWORD *)(*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&a2->f64[0] + 16))(a2);
  v8 = v245;
  v9 = (int)result;
  if (*(_BYTE *)(*a1 + 20))
  {
    switch((int)result)
    {
      case 0:
        v10 = vmulq_n_f64(a2[1], v245);
        v11 = vmulq_n_f64(a2[2], v245);
        v12 = a3[5];
        v13 = vmlaq_laneq_f64(vmulq_n_f64(v10, a3[1].f64[0]), v11, a3[1], 1);
        v14 = vmlaq_laneq_f64(vmulq_n_f64(v10, a3[2].f64[0]), v11, a3[2], 1);
        v15 = vmlaq_laneq_f64(vmulq_n_f64(v10, a3[3].f64[0]), v11, a3[3], 1);
        v16 = vmlaq_laneq_f64(vmulq_n_f64(v10, a3[4].f64[0]), v11, a3[4], 1);
        *a3 = vmlaq_laneq_f64(vmulq_n_f64(v10, a3->f64[0]), v11, *a3, 1);
        a3[1] = v13;
        a3[2] = v14;
        a3[3] = v15;
        v17 = vmlaq_laneq_f64(vmulq_n_f64(v10, v12.f64[0]), v11, v12, 1);
        goto LABEL_8;
      case 1:
        v18 = vmulq_n_f64(a2[1], v245);
        v19 = vmulq_f64(v18, *a3);
        v20 = vmulq_f64(v18, a3[1]);
        v21 = vmulq_f64(v18, a3[2]);
        v22 = vmulq_f64(v18, a3[3]);
        v23 = vmulq_f64(v18, a3[4]);
        v17 = vmulq_f64(v18, a3[5]);
        *a3 = v19;
        a3[1] = v20;
        a3[2] = v21;
        a3[3] = v22;
        a3[4] = v23;
        goto LABEL_9;
      case 2:
        v24 = v245 * a2[1].f64[0];
        v25 = vmulq_n_f64(a3[5], v24);
        v26 = vmulq_n_f64(a3[4], v24);
        v27 = vmulq_n_f64(a3[3], v24);
        v28 = vmulq_n_f64(a3[2], v24);
        v29 = vmulq_n_f64(a3[1], v24);
        *a3 = vmulq_n_f64(*a3, v24);
        a3[1] = v29;
        a3[2] = v28;
        a3[3] = v27;
        a3[4] = v26;
        a3[5] = v25;
        break;
      case 3:
        v30 = vmulq_n_f64(a3[5], v245);
        v31 = vmulq_n_f64(a3[4], v245);
        v32 = vmulq_n_f64(a3[3], v245);
        v33 = vmulq_n_f64(a3[2], v245);
        v34 = vmulq_n_f64(a3[1], v245);
        *a3 = vmulq_n_f64(*a3, v245);
        a3[1] = v34;
        a3[2] = v33;
        a3[3] = v32;
        a3[4] = v31;
        a3[5] = v30;
        break;
      case 4:
        result = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *, double))(*(_QWORD *)&a2->f64[0]
                                                                                             + 64))(&v246, a2, v245);
        v8 = v245;
        v35 = v247;
        v36 = a3[5];
        v37 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[1].f64[0]), v247, a3[1], 1);
        v38 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[2].f64[0]), v247, a3[2], 1);
        v39 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[3].f64[0]), v247, a3[3], 1);
        v16 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[4].f64[0]), v247, a3[4], 1);
        v40 = vmulq_n_f64(v246, v36.f64[0]);
        *a3 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3->f64[0]), v247, *a3, 1);
        a3[1] = v37;
        v17 = vmlaq_laneq_f64(v40, v35, v36, 1);
        a3[2] = v38;
        a3[3] = v39;
LABEL_8:
        a3[4] = v16;
LABEL_9:
        a3[5] = v17;
        break;
      default:
        break;
    }
  }
  if (*(_BYTE *)(a1[1] + 20))
  {
    switch(v9)
    {
      case 0:
        v41 = vmulq_n_f64(a2[1], v8);
        v42 = vmulq_n_f64(a2[2], v8);
        v43 = a3[11];
        v44 = vmlaq_laneq_f64(vmulq_n_f64(v41, a3[7].f64[0]), v42, a3[7], 1);
        v45 = vmlaq_laneq_f64(vmulq_n_f64(v41, a3[8].f64[0]), v42, a3[8], 1);
        v46 = vmlaq_laneq_f64(vmulq_n_f64(v41, a3[9].f64[0]), v42, a3[9], 1);
        v47 = vmlaq_laneq_f64(vmulq_n_f64(v41, a3[10].f64[0]), v42, a3[10], 1);
        a3[6] = vmlaq_laneq_f64(vmulq_n_f64(v41, a3[6].f64[0]), v42, a3[6], 1);
        a3[7] = v44;
        a3[8] = v45;
        a3[9] = v46;
        v48 = vmlaq_laneq_f64(vmulq_n_f64(v41, v43.f64[0]), v42, v43, 1);
        goto LABEL_17;
      case 1:
        v49 = vmulq_n_f64(a2[1], v8);
        v50 = vmulq_f64(v49, a3[6]);
        v51 = vmulq_f64(v49, a3[7]);
        v52 = vmulq_f64(v49, a3[8]);
        v53 = vmulq_f64(v49, a3[9]);
        v54 = vmulq_f64(v49, a3[10]);
        v48 = vmulq_f64(v49, a3[11]);
        a3[6] = v50;
        a3[7] = v51;
        a3[8] = v52;
        a3[9] = v53;
        a3[10] = v54;
        goto LABEL_18;
      case 2:
        v55 = v8 * a2[1].f64[0];
        v56 = vmulq_n_f64(a3[11], v55);
        v57 = vmulq_n_f64(a3[10], v55);
        v58 = vmulq_n_f64(a3[9], v55);
        v59 = vmulq_n_f64(a3[8], v55);
        v60 = vmulq_n_f64(a3[7], v55);
        a3[6] = vmulq_n_f64(a3[6], v55);
        a3[7] = v60;
        a3[8] = v59;
        a3[9] = v58;
        a3[10] = v57;
        a3[11] = v56;
        break;
      case 3:
        v61 = vmulq_n_f64(a3[11], v8);
        v62 = vmulq_n_f64(a3[10], v8);
        v63 = vmulq_n_f64(a3[9], v8);
        v64 = vmulq_n_f64(a3[8], v8);
        v65 = vmulq_n_f64(a3[7], v8);
        a3[6] = vmulq_n_f64(a3[6], v8);
        a3[7] = v65;
        a3[8] = v64;
        a3[9] = v63;
        a3[10] = v62;
        a3[11] = v61;
        break;
      case 4:
        result = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *, double))(*(_QWORD *)&a2->f64[0]
                                                                                             + 64))(&v246, a2, v8);
        v8 = v245;
        v66 = v247;
        v67 = a3[11];
        v68 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[7].f64[0]), v247, a3[7], 1);
        v69 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[8].f64[0]), v247, a3[8], 1);
        v70 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[9].f64[0]), v247, a3[9], 1);
        v47 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[10].f64[0]), v247, a3[10], 1);
        v71 = vmulq_n_f64(v246, v67.f64[0]);
        a3[6] = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[6].f64[0]), v247, a3[6], 1);
        a3[7] = v68;
        v48 = vmlaq_laneq_f64(v71, v66, v67, 1);
        a3[8] = v69;
        a3[9] = v70;
LABEL_17:
        a3[10] = v47;
LABEL_18:
        a3[11] = v48;
        break;
      default:
        break;
    }
  }
  if (*(_BYTE *)(a1[2] + 20))
  {
    switch(v9)
    {
      case 0:
        v72 = vmulq_n_f64(a2[1], v8);
        v73 = vmulq_n_f64(a2[2], v8);
        v74 = a3[17];
        v75 = vmlaq_laneq_f64(vmulq_n_f64(v72, a3[13].f64[0]), v73, a3[13], 1);
        v76 = vmlaq_laneq_f64(vmulq_n_f64(v72, a3[14].f64[0]), v73, a3[14], 1);
        v77 = vmlaq_laneq_f64(vmulq_n_f64(v72, a3[15].f64[0]), v73, a3[15], 1);
        v78 = vmlaq_laneq_f64(vmulq_n_f64(v72, a3[16].f64[0]), v73, a3[16], 1);
        a3[12] = vmlaq_laneq_f64(vmulq_n_f64(v72, a3[12].f64[0]), v73, a3[12], 1);
        a3[13] = v75;
        a3[14] = v76;
        a3[15] = v77;
        v79 = vmlaq_laneq_f64(vmulq_n_f64(v72, v74.f64[0]), v73, v74, 1);
        goto LABEL_26;
      case 1:
        v80 = vmulq_n_f64(a2[1], v8);
        v81 = vmulq_f64(v80, a3[12]);
        v82 = vmulq_f64(v80, a3[13]);
        v83 = vmulq_f64(v80, a3[14]);
        v84 = vmulq_f64(v80, a3[15]);
        v85 = vmulq_f64(v80, a3[16]);
        v79 = vmulq_f64(v80, a3[17]);
        a3[12] = v81;
        a3[13] = v82;
        a3[14] = v83;
        a3[15] = v84;
        a3[16] = v85;
        goto LABEL_27;
      case 2:
        v86 = v8 * a2[1].f64[0];
        v87 = vmulq_n_f64(a3[17], v86);
        v88 = vmulq_n_f64(a3[16], v86);
        v89 = vmulq_n_f64(a3[15], v86);
        v90 = vmulq_n_f64(a3[14], v86);
        v91 = vmulq_n_f64(a3[13], v86);
        a3[12] = vmulq_n_f64(a3[12], v86);
        a3[13] = v91;
        a3[14] = v90;
        a3[15] = v89;
        a3[16] = v88;
        a3[17] = v87;
        break;
      case 3:
        v92 = vmulq_n_f64(a3[17], v8);
        v93 = vmulq_n_f64(a3[16], v8);
        v94 = vmulq_n_f64(a3[15], v8);
        v95 = vmulq_n_f64(a3[14], v8);
        v96 = vmulq_n_f64(a3[13], v8);
        a3[12] = vmulq_n_f64(a3[12], v8);
        a3[13] = v96;
        a3[14] = v95;
        a3[15] = v94;
        a3[16] = v93;
        a3[17] = v92;
        break;
      case 4:
        result = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *, double))(*(_QWORD *)&a2->f64[0]
                                                                                             + 64))(&v246, a2, v8);
        v8 = v245;
        v97 = v247;
        v98 = a3[17];
        v99 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[13].f64[0]), v247, a3[13], 1);
        v100 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[14].f64[0]), v247, a3[14], 1);
        v101 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[15].f64[0]), v247, a3[15], 1);
        v78 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[16].f64[0]), v247, a3[16], 1);
        v102 = vmulq_n_f64(v246, v98.f64[0]);
        a3[12] = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[12].f64[0]), v247, a3[12], 1);
        a3[13] = v99;
        v79 = vmlaq_laneq_f64(v102, v97, v98, 1);
        a3[14] = v100;
        a3[15] = v101;
LABEL_26:
        a3[16] = v78;
LABEL_27:
        a3[17] = v79;
        break;
      default:
        break;
    }
  }
  v103 = a3 + 18;
  if (*(_BYTE *)(a1[3] + 20))
  {
    switch(v9)
    {
      case 0:
        v104 = vmulq_n_f64(a2[1], v8);
        v105 = vmulq_n_f64(a2[2], v8);
        v106 = a3[23];
        v107 = vmlaq_laneq_f64(vmulq_n_f64(v104, a3[19].f64[0]), v105, a3[19], 1);
        v108 = vmlaq_laneq_f64(vmulq_n_f64(v104, a3[20].f64[0]), v105, a3[20], 1);
        v109 = vmlaq_laneq_f64(vmulq_n_f64(v104, a3[21].f64[0]), v105, a3[21], 1);
        v110 = vmlaq_laneq_f64(vmulq_n_f64(v104, a3[22].f64[0]), v105, a3[22], 1);
        a3[18] = vmlaq_laneq_f64(vmulq_n_f64(v104, a3[18].f64[0]), v105, a3[18], 1);
        a3[19] = v107;
        a3[20] = v108;
        a3[21] = v109;
        v111 = vmlaq_laneq_f64(vmulq_n_f64(v104, v106.f64[0]), v105, v106, 1);
        goto LABEL_35;
      case 1:
        v112 = vmulq_n_f64(a2[1], v8);
        v113 = vmulq_f64(v112, *v103);
        v114 = vmulq_f64(v112, a3[19]);
        v115 = vmulq_f64(v112, a3[20]);
        v116 = vmulq_f64(v112, a3[21]);
        v117 = vmulq_f64(v112, a3[22]);
        v118 = vmulq_f64(v112, a3[23]);
        *v103 = v113;
        a3[19] = v114;
        a3[20] = v115;
        a3[21] = v116;
        a3[22] = v117;
        a3[23] = v118;
        break;
      case 2:
        v119 = v8 * a2[1].f64[0];
        v120 = vmulq_n_f64(a3[23], v119);
        v121 = vmulq_n_f64(a3[22], v119);
        v122 = vmulq_n_f64(a3[21], v119);
        v123 = vmulq_n_f64(a3[20], v119);
        v124 = vmulq_n_f64(a3[19], v119);
        *v103 = vmulq_n_f64(*v103, v119);
        a3[19] = v124;
        a3[20] = v123;
        a3[21] = v122;
        a3[22] = v121;
        a3[23] = v120;
        break;
      case 3:
        v125 = vmulq_n_f64(a3[23], v8);
        v126 = vmulq_n_f64(a3[22], v8);
        v127 = vmulq_n_f64(a3[21], v8);
        v128 = vmulq_n_f64(a3[20], v8);
        v129 = vmulq_n_f64(a3[19], v8);
        *v103 = vmulq_n_f64(*v103, v8);
        a3[19] = v129;
        a3[20] = v128;
        a3[21] = v127;
        a3[22] = v126;
        a3[23] = v125;
        break;
      case 4:
        result = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *, double))(*(_QWORD *)&a2->f64[0]
                                                                                             + 64))(&v246, a2, v8);
        v8 = v245;
        v130 = v247;
        v131 = a3[23];
        v132 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[19].f64[0]), v247, a3[19], 1);
        v133 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[20].f64[0]), v247, a3[20], 1);
        v134 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[21].f64[0]), v247, a3[21], 1);
        v110 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[22].f64[0]), v247, a3[22], 1);
        v135 = vmulq_n_f64(v246, v131.f64[0]);
        a3[18] = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[18].f64[0]), v247, a3[18], 1);
        a3[19] = v132;
        v111 = vmlaq_laneq_f64(v135, v130, v131, 1);
        a3[20] = v133;
        a3[21] = v134;
LABEL_35:
        a3[22] = v110;
        a3[23] = v111;
        break;
      default:
        break;
    }
  }
  if (*(_BYTE *)(a1[4] + 20))
  {
    switch(v9)
    {
      case 0:
        v136 = vmulq_n_f64(a2[1], v8);
        v137 = vmulq_n_f64(a2[2], v8);
        v138 = a3[27];
        v139 = vmlaq_laneq_f64(vmulq_n_f64(v136, a3[25].f64[0]), v137, a3[25], 1);
        v140 = vmlaq_laneq_f64(vmulq_n_f64(v136, a3[26].f64[0]), v137, a3[26], 1);
        a3[24] = vmlaq_laneq_f64(vmulq_n_f64(v136, a3[24].f64[0]), v137, a3[24], 1);
        a3[25] = v139;
        v141 = vmlaq_laneq_f64(vmulq_n_f64(v136, v138.f64[0]), v137, v138, 1);
        goto LABEL_43;
      case 1:
        v142 = vmulq_n_f64(a2[1], v8);
        v143 = vmulq_f64(v142, a3[24]);
        v144 = vmulq_f64(v142, a3[25]);
        v145 = vmulq_f64(v142, a3[26]);
        v146 = vmulq_f64(v142, a3[27]);
        a3[26] = v145;
        a3[27] = v146;
        a3[24] = v143;
        a3[25] = v144;
        break;
      case 2:
        v147 = v8 * a2[1].f64[0];
        v148 = vmulq_n_f64(a3[25], v147);
        v149 = vmulq_n_f64(a3[24], v147);
        v150 = vmulq_n_f64(a3[27], v147);
        a3[26] = vmulq_n_f64(a3[26], v147);
        a3[27] = v150;
        a3[24] = v149;
        a3[25] = v148;
        break;
      case 3:
        v151 = vmulq_n_f64(a3[25], v8);
        v152 = vmulq_n_f64(a3[24], v8);
        v153 = vmulq_n_f64(a3[27], v8);
        a3[26] = vmulq_n_f64(a3[26], v8);
        a3[27] = v153;
        a3[24] = v152;
        a3[25] = v151;
        break;
      case 4:
        result = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *, double))(*(_QWORD *)&a2->f64[0]
                                                                                             + 64))(&v246, a2, v8);
        v8 = v245;
        v154 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[25].f64[0]), v247, a3[25], 1);
        v140 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[26].f64[0]), v247, a3[26], 1);
        v141 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[27].f64[0]), v247, a3[27], 1);
        a3[24] = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[24].f64[0]), v247, a3[24], 1);
        a3[25] = v154;
LABEL_43:
        a3[26] = v140;
        a3[27] = v141;
        break;
      default:
        break;
    }
  }
  if (*(_BYTE *)(a1[5] + 20))
  {
    switch(v9)
    {
      case 0:
        v155 = vmulq_n_f64(a2[1], v8);
        v156 = vmulq_n_f64(a2[2], v8);
        v157 = a3[31];
        v158 = vmlaq_laneq_f64(vmulq_n_f64(v155, a3[29].f64[0]), v156, a3[29], 1);
        v159 = vmlaq_laneq_f64(vmulq_n_f64(v155, a3[30].f64[0]), v156, a3[30], 1);
        a3[28] = vmlaq_laneq_f64(vmulq_n_f64(v155, a3[28].f64[0]), v156, a3[28], 1);
        a3[29] = v158;
        v160 = vmlaq_laneq_f64(vmulq_n_f64(v155, v157.f64[0]), v156, v157, 1);
        goto LABEL_51;
      case 1:
        v161 = vmulq_n_f64(a2[1], v8);
        v162 = vmulq_f64(v161, a3[28]);
        v163 = vmulq_f64(v161, a3[29]);
        v164 = vmulq_f64(v161, a3[30]);
        v165 = vmulq_f64(v161, a3[31]);
        a3[30] = v164;
        a3[31] = v165;
        a3[28] = v162;
        a3[29] = v163;
        break;
      case 2:
        v166 = v8 * a2[1].f64[0];
        v167 = vmulq_n_f64(a3[29], v166);
        v168 = vmulq_n_f64(a3[28], v166);
        v169 = vmulq_n_f64(a3[31], v166);
        a3[30] = vmulq_n_f64(a3[30], v166);
        a3[31] = v169;
        a3[28] = v168;
        a3[29] = v167;
        break;
      case 3:
        v170 = vmulq_n_f64(a3[29], v8);
        v171 = vmulq_n_f64(a3[28], v8);
        v172 = vmulq_n_f64(a3[31], v8);
        a3[30] = vmulq_n_f64(a3[30], v8);
        a3[31] = v172;
        a3[28] = v171;
        a3[29] = v170;
        break;
      case 4:
        result = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *, double))(*(_QWORD *)&a2->f64[0]
                                                                                             + 64))(&v246, a2, v8);
        v8 = v245;
        v173 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[29].f64[0]), v247, a3[29], 1);
        v159 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[30].f64[0]), v247, a3[30], 1);
        v160 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[31].f64[0]), v247, a3[31], 1);
        a3[28] = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[28].f64[0]), v247, a3[28], 1);
        a3[29] = v173;
LABEL_51:
        a3[30] = v159;
        a3[31] = v160;
        break;
      default:
        break;
    }
  }
  if (*(_BYTE *)(a1[6] + 20))
  {
    switch(v9)
    {
      case 0:
        v174 = vmulq_n_f64(a2[1], v8);
        v175 = vmulq_n_f64(a2[2], v8);
        v176 = a3[35];
        v177 = vmlaq_laneq_f64(vmulq_n_f64(v174, a3[33].f64[0]), v175, a3[33], 1);
        v178 = vmlaq_laneq_f64(vmulq_n_f64(v174, a3[34].f64[0]), v175, a3[34], 1);
        a3[32] = vmlaq_laneq_f64(vmulq_n_f64(v174, a3[32].f64[0]), v175, a3[32], 1);
        a3[33] = v177;
        v179 = vmlaq_laneq_f64(vmulq_n_f64(v174, v176.f64[0]), v175, v176, 1);
        goto LABEL_59;
      case 1:
        v180 = vmulq_n_f64(a2[1], v8);
        v181 = vmulq_f64(v180, a3[32]);
        v182 = vmulq_f64(v180, a3[33]);
        v183 = vmulq_f64(v180, a3[34]);
        v184 = vmulq_f64(v180, a3[35]);
        a3[34] = v183;
        a3[35] = v184;
        a3[32] = v181;
        a3[33] = v182;
        break;
      case 2:
        v185 = v8 * a2[1].f64[0];
        v186 = vmulq_n_f64(a3[33], v185);
        v187 = vmulq_n_f64(a3[32], v185);
        v188 = vmulq_n_f64(a3[35], v185);
        a3[34] = vmulq_n_f64(a3[34], v185);
        a3[35] = v188;
        a3[32] = v187;
        a3[33] = v186;
        break;
      case 3:
        v189 = vmulq_n_f64(a3[33], v8);
        v190 = vmulq_n_f64(a3[32], v8);
        v191 = vmulq_n_f64(a3[35], v8);
        a3[34] = vmulq_n_f64(a3[34], v8);
        a3[35] = v191;
        a3[32] = v190;
        a3[33] = v189;
        break;
      case 4:
        result = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *, double))(*(_QWORD *)&a2->f64[0]
                                                                                             + 64))(&v246, a2, v8);
        v8 = v245;
        v192 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[33].f64[0]), v247, a3[33], 1);
        v178 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[34].f64[0]), v247, a3[34], 1);
        v179 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[35].f64[0]), v247, a3[35], 1);
        a3[32] = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[32].f64[0]), v247, a3[32], 1);
        a3[33] = v192;
LABEL_59:
        a3[34] = v178;
        a3[35] = v179;
        break;
      default:
        break;
    }
  }
  if (*(_BYTE *)(a1[7] + 20))
  {
    switch(v9)
    {
      case 0:
        v193 = vmulq_n_f64(a2[1], v8);
        v194 = vmulq_n_f64(a2[2], v8);
        v195 = a3[39];
        v196 = vmlaq_laneq_f64(vmulq_n_f64(v193, a3[37].f64[0]), v194, a3[37], 1);
        v197 = vmlaq_laneq_f64(vmulq_n_f64(v193, a3[38].f64[0]), v194, a3[38], 1);
        a3[36] = vmlaq_laneq_f64(vmulq_n_f64(v193, a3[36].f64[0]), v194, a3[36], 1);
        a3[37] = v196;
        v198 = vmlaq_laneq_f64(vmulq_n_f64(v193, v195.f64[0]), v194, v195, 1);
        goto LABEL_67;
      case 1:
        v199 = vmulq_n_f64(a2[1], v8);
        v200 = vmulq_f64(v199, a3[36]);
        v201 = vmulq_f64(v199, a3[37]);
        v202 = vmulq_f64(v199, a3[38]);
        v203 = vmulq_f64(v199, a3[39]);
        a3[38] = v202;
        a3[39] = v203;
        a3[36] = v200;
        a3[37] = v201;
        break;
      case 2:
        v204 = v8 * a2[1].f64[0];
        v205 = vmulq_n_f64(a3[37], v204);
        v206 = vmulq_n_f64(a3[36], v204);
        v207 = vmulq_n_f64(a3[39], v204);
        a3[38] = vmulq_n_f64(a3[38], v204);
        a3[39] = v207;
        a3[36] = v206;
        a3[37] = v205;
        break;
      case 3:
        v208 = vmulq_n_f64(a3[37], v8);
        v209 = vmulq_n_f64(a3[36], v8);
        v210 = vmulq_n_f64(a3[39], v8);
        a3[38] = vmulq_n_f64(a3[38], v8);
        a3[39] = v210;
        a3[36] = v209;
        a3[37] = v208;
        break;
      case 4:
        result = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *, double))(*(_QWORD *)&a2->f64[0]
                                                                                             + 64))(&v246, a2, v8);
        v8 = v245;
        v211 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[37].f64[0]), v247, a3[37], 1);
        v197 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[38].f64[0]), v247, a3[38], 1);
        v198 = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[39].f64[0]), v247, a3[39], 1);
        a3[36] = vmlaq_laneq_f64(vmulq_n_f64(v246, a3[36].f64[0]), v247, a3[36], 1);
        a3[37] = v211;
LABEL_67:
        a3[38] = v197;
        a3[39] = v198;
        break;
      default:
        break;
    }
  }
  if (*(_BYTE *)(a1[8] + 20))
  {
    v212 = a3 + 40;
    switch(v9)
    {
      case 0:
        v213 = vmulq_n_f64(a2[1], v8);
        v214 = vmulq_n_f64(a2[2], v8);
        goto LABEL_75;
      case 1:
        v215 = vmulq_n_f64(a2[1], v8);
        v216 = vmulq_f64(v215, *v212);
        v217 = vmulq_f64(v215, a3[41]);
        v218 = vmulq_f64(v215, a3[42]);
        *v212 = v216;
        a3[41] = v217;
        a3[42] = v218;
        break;
      case 2:
        v219 = v8 * a2[1].f64[0];
        v220 = vmulq_n_f64(a3[42], v219);
        v221 = vmulq_n_f64(a3[41], v219);
        *v212 = vmulq_n_f64(*v212, v219);
        a3[41] = v221;
        a3[42] = v220;
        break;
      case 3:
        v222 = vmulq_n_f64(a3[42], v8);
        v223 = vmulq_n_f64(a3[41], v8);
        *v212 = vmulq_n_f64(*v212, v8);
        a3[41] = v223;
        a3[42] = v222;
        break;
      case 4:
        result = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *, double))(*(_QWORD *)&a2->f64[0]
                                                                                             + 64))(&v246, a2, v8);
        v8 = v245;
        v213 = v246;
        v214 = v247;
LABEL_75:
        v224 = vmlaq_laneq_f64(vmulq_n_f64(v213, a3[40].f64[0]), v214, a3[40], 1);
        v225 = vmlaq_laneq_f64(vmulq_n_f64(v213, a3[41].f64[0]), v214, a3[41], 1);
        v226 = vmlaq_laneq_f64(vmulq_n_f64(v213, a3[42].f64[0]), v214, a3[42], 1);
        a3[40] = v224;
        a3[41] = v225;
        a3[42] = v226;
        break;
      default:
        break;
    }
  }
  if (*(_BYTE *)(a1[9] + 20))
  {
    v227 = a3 + 43;
    switch(v9)
    {
      case 0:
        v228 = vmulq_n_f64(a2[1], v8);
        v229 = vmulq_n_f64(a2[2], v8);
        goto LABEL_83;
      case 1:
        v230 = vmulq_n_f64(a2[1], v8);
        v231 = vmulq_f64(v230, *v227);
        v232 = vmulq_f64(v230, a3[44]);
        v233 = vmulq_f64(v230, a3[45]);
        *v227 = v231;
        a3[44] = v232;
        a3[45] = v233;
        break;
      case 2:
        v234 = v8 * a2[1].f64[0];
        v235 = vmulq_n_f64(a3[45], v234);
        v236 = vmulq_n_f64(a3[44], v234);
        *v227 = vmulq_n_f64(*v227, v234);
        a3[44] = v236;
        a3[45] = v235;
        break;
      case 3:
        v237 = vmulq_n_f64(a3[45], v8);
        v238 = vmulq_n_f64(a3[44], v8);
        *v227 = vmulq_n_f64(*v227, v8);
        a3[44] = v238;
        a3[45] = v237;
        break;
      case 4:
        result = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *, double))(*(_QWORD *)&a2->f64[0]
                                                                                             + 64))(&v246, a2, v8);
        v8 = v245;
        v228 = v246;
        v229 = v247;
LABEL_83:
        v239 = vmlaq_laneq_f64(vmulq_n_f64(v228, a3[43].f64[0]), v229, a3[43], 1);
        v240 = vmlaq_laneq_f64(vmulq_n_f64(v228, a3[44].f64[0]), v229, a3[44], 1);
        v241 = vmlaq_laneq_f64(vmulq_n_f64(v228, a3[45].f64[0]), v229, a3[45], 1);
        a3[43] = v239;
        a3[44] = v240;
        a3[45] = v241;
        break;
      default:
        break;
    }
  }
  if (*(_BYTE *)(a1[10] + 20))
  {
    switch(v9)
    {
      case 0:
        v242 = vmulq_n_f64(a2[1], v8);
        v243 = vmulq_n_f64(a2[2], v8);
        goto LABEL_91;
      case 1:
        v244 = vmulq_f64(vmulq_n_f64(a2[1], v8), a3[46]);
        goto LABEL_92;
      case 2:
        v244 = vmulq_n_f64(a3[46], v8 * a2[1].f64[0]);
        goto LABEL_92;
      case 3:
        v244 = vmulq_n_f64(a3[46], v8);
        goto LABEL_92;
      case 4:
        result = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *, double))(*(_QWORD *)&a2->f64[0]
                                                                                             + 64))(&v246, a2, v8);
        v242 = v246;
        v243 = v247;
LABEL_91:
        v244 = vmlaq_laneq_f64(vmulq_n_f64(v242, a3[46].f64[0]), v243, a3[46], 1);
LABEL_92:
        a3[46] = v244;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_20F61644C(uint64_t result, uint64_t *a2, _QWORD *a3, unsigned int *a4, char a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  _QWORD *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  uint64_t v25;
  unint64_t v26;
  int8x16_t *v27;

  v5 = *(unsigned int *)(result + 12);
  if ((_DWORD)v5)
  {
    v6 = 0;
    if ((a5 & 1) != 0)
    {
      do
      {
        v13 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v6);
        if (v13)
        {
          v14 = *(_QWORD *)(result + 88);
          v15 = (*(_DWORD *)(result + 112) * v6);
          v16 = (unsigned int *)(v14 + 16 * (v13 + v15));
          v17 = (unsigned int *)(v14 + 16 * v15);
          do
          {
            while (1)
            {
              v19 = *a4;
              v20 = *(_DWORD *)(*a3 + 4 * *v17);
              v21 = *(_QWORD *)(result + 16) + 8 * *((_QWORD *)v17 + 1);
              v22 = *((unsigned int *)a2 + 4);
              v23 = *a2;
              v24 = *(int8x16_t *)v21;
              v25 = *(_QWORD *)(v21 + 16);
              v26 = vextq_s8(v24, v24, 8uLL).u64[0];
              if (*a4 >= v20)
                break;
              v18 = (_QWORD *)(v23 + 8 * (v19 + (_DWORD)v22 * v20));
              *v18 = v24.i64[0];
              v18[v22] = v26;
              v18[2 * v22] = v25;
              v17 += 4;
              if (v17 == v16)
                goto LABEL_9;
            }
            v27 = (int8x16_t *)(v23 + 8 * (v20 + (_DWORD)v22 * v19));
            v27[1].i64[0] = v25;
            v24.i64[1] = v26;
            *v27 = v24;
            v17 += 4;
          }
          while (v17 != v16);
LABEL_9:
          v5 = *(unsigned int *)(result + 12);
        }
        ++v6;
        ++a4;
      }
      while (v6 < v5);
    }
    else
    {
      do
      {
        v7 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v6);
        if (v7)
        {
          v8 = 16 * v7;
          v9 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * v6) + 8);
          do
          {
            v10 = *(_QWORD *)(result + 16) + 8 * *v9;
            v11 = *a2 + 8 * (*(_DWORD *)(*a3 + 4 * *((unsigned int *)v9 - 2)) + *((_DWORD *)a2 + 4) * *a4);
            v12 = *(_OWORD *)v10;
            *(_QWORD *)(v11 + 16) = *(_QWORD *)(v10 + 16);
            *(_OWORD *)v11 = v12;
            v9 += 2;
            v8 -= 16;
          }
          while (v8);
          v5 = *(unsigned int *)(result + 12);
        }
        ++v6;
        ++a4;
      }
      while (v6 < v5);
    }
  }
  return result;
}

uint64_t sub_20F6165A4(uint64_t result, uint64_t a2, _QWORD *a3, unsigned int *a4, char a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v5 = *(unsigned int *)(result + 12);
  if ((_DWORD)v5)
  {
    v6 = 0;
    if ((a5 & 1) != 0)
    {
      do
      {
        v7 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v6);
        if (v7)
        {
          v8 = *(_QWORD *)(result + 88);
          v9 = (*(_DWORD *)(result + 112) * v6);
          v10 = (unsigned int *)(v8 + 16 * (v7 + v9));
          v11 = (unsigned int *)(v8 + 16 * v9);
          do
          {
            v12 = *a4;
            v13 = *(_DWORD *)(*a3 + 4 * *v11);
            if (*a4 <= v13)
              v14 = *(_DWORD *)(*a3 + 4 * *v11);
            else
              v14 = *a4;
            if (v12 >= v13)
              v12 = *(_DWORD *)(*a3 + 4 * *v11);
            *(_QWORD *)(*(_QWORD *)a2 + 8 * (v12 + *(_DWORD *)(a2 + 16) * v14)) = *(_QWORD *)(*(_QWORD *)(result + 16)
                                                                                              + 8
                                                                                              * *((_QWORD *)v11 + 1));
            v11 += 4;
          }
          while (v11 != v10);
          v5 = *(unsigned int *)(result + 12);
        }
        ++v6;
        ++a4;
      }
      while (v6 < v5);
    }
    else
    {
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v6);
        if (v15)
        {
          v16 = 16 * v15;
          v17 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * v6) + 8);
          do
          {
            *(_QWORD *)(*(_QWORD *)a2
                      + 8 * (*(_DWORD *)(*a3 + 4 * *((unsigned int *)v17 - 2)) + *(_DWORD *)(a2 + 16) * *a4)) = *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * *v17);
            v17 += 2;
            v16 -= 16;
          }
          while (v16);
          v5 = *(unsigned int *)(result + 12);
        }
        ++v6;
        ++a4;
      }
      while (v6 < v5);
    }
  }
  return result;
}

uint64_t sub_20F6166B0(uint64_t result, uint64_t *a2, _QWORD *a3, unsigned int *a4, char a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  _OWORD *v12;
  __int128 v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  int8x16_t *v28;
  int8x16_t v29;
  int8x16_t v30;

  v5 = *(unsigned int *)(result + 12);
  if ((_DWORD)v5)
  {
    v6 = 0;
    if ((a5 & 1) != 0)
    {
      do
      {
        v7 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v6);
        if (v7)
        {
          v8 = *(_QWORD *)(result + 88);
          v9 = (*(_DWORD *)(result + 112) * v6);
          v10 = (unsigned int *)(v8 + 16 * (v7 + v9));
          v11 = (unsigned int *)(v8 + 16 * v9);
          do
          {
            while (1)
            {
              v14 = *a4;
              v15 = *(_DWORD *)(*a3 + 4 * *v11);
              v16 = *(_QWORD *)(result + 16) + 8 * *((_QWORD *)v11 + 1);
              v17 = *((unsigned int *)a2 + 4);
              v18 = *a2;
              v19 = *(_QWORD *)(v16 + 24);
              if (*a4 >= v15)
                break;
              v12 = (_OWORD *)(v18 + 8 * (v14 + (_DWORD)v17 * v15));
              v13 = *(_OWORD *)(v16 + 16);
              *v12 = *(_OWORD *)v16;
              v12[1] = v13;
              v11 += 4;
              if (v11 == v10)
                goto LABEL_4;
            }
            v20 = (_QWORD *)(v18 + 8 * (v15 + (_DWORD)v17 * v14));
            v21 = *(_QWORD *)(v16 + 8);
            v22 = *(_QWORD *)(v16 + 16);
            *v20 = *(_QWORD *)v16;
            v20[v17] = v21;
            v20[2 * v17] = v22;
            v20[3 * v17] = v19;
            v11 += 4;
          }
          while (v11 != v10);
LABEL_4:
          v5 = *(unsigned int *)(result + 12);
        }
        ++v6;
        ++a4;
      }
      while (v6 < v5);
    }
    else
    {
      do
      {
        v23 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v6);
        if (v23)
        {
          v24 = 16 * v23;
          v25 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * v6) + 8);
          do
          {
            v28 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v25);
            v30 = *v28;
            v29 = v28[1];
            v26 = *((unsigned int *)a2 + 4);
            v27 = (_QWORD *)(*a2 + 8 * (*(_DWORD *)(*a3 + 4 * *((unsigned int *)v25 - 2)) + v26 * *a4));
            *v27 = v30.i64[0];
            v27[v26] = vextq_s8(v30, v30, 8uLL).u64[0];
            v27[2 * v26] = v29.i64[0];
            v27[3 * v26] = vextq_s8(v29, v29, 8uLL).u64[0];
            v25 += 2;
            v24 -= 16;
          }
          while (v24);
          v5 = *(unsigned int *)(result + 12);
        }
        ++v6;
        ++a4;
      }
      while (v6 < v5);
    }
  }
  return result;
}

uint64_t sub_20F61684C(uint64_t result, uint64_t *a2, _QWORD *a3, unsigned int *a4, char a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  __int128 v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int8x16_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;

  v5 = *(unsigned int *)(result + 12);
  if ((_DWORD)v5)
  {
    v6 = 0;
    if ((a5 & 1) != 0)
    {
      do
      {
        v7 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v6);
        if (v7)
        {
          v8 = *(_QWORD *)(result + 88);
          v9 = (*(_DWORD *)(result + 112) * v6);
          v10 = (unsigned int *)(v8 + 16 * (v7 + v9));
          v11 = (unsigned int *)(v8 + 16 * v9);
          do
          {
            while (1)
            {
              v14 = *a4;
              v15 = *(_DWORD *)(*a3 + 4 * *v11);
              v16 = *(_QWORD *)(result + 16) + 8 * *((_QWORD *)v11 + 1);
              v17 = *((unsigned int *)a2 + 4);
              v18 = *a2;
              if (*a4 >= v15)
                break;
              v12 = v18 + 8 * (v14 + (_DWORD)v17 * v15);
              v13 = *(_OWORD *)v16;
              *(_QWORD *)(v12 + 16) = *(_QWORD *)(v16 + 16);
              *(_OWORD *)v12 = v13;
              v11 += 4;
              if (v11 == v10)
                goto LABEL_4;
            }
            v19 = (_QWORD *)(v18 + 8 * (v15 + (_DWORD)v17 * v14));
            v20 = *(_QWORD *)(v16 + 8);
            v21 = *(_QWORD *)(v16 + 16);
            *v19 = *(_QWORD *)v16;
            v19[v17] = v20;
            v19[2 * v17] = v21;
            v11 += 4;
          }
          while (v11 != v10);
LABEL_4:
          v5 = *(unsigned int *)(result + 12);
        }
        ++v6;
        ++a4;
      }
      while (v6 < v5);
    }
    else
    {
      do
      {
        v22 = *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * v6);
        if (v22)
        {
          v23 = 16 * v22;
          v24 = (_QWORD *)(*(_QWORD *)(result + 88) + 16 * (*(_DWORD *)(result + 112) * v6) + 8);
          do
          {
            v30 = *(_QWORD *)(result + 16) + 8 * *v24;
            if (v30 == *a2)
            {
              v27 = *(_QWORD *)(v30 + 16);
              v25 = *(int8x16_t *)v30;
              v26 = vextq_s8(v25, v25, 8uLL).u64[0];
            }
            else
            {
              v25.i64[0] = *(_QWORD *)v30;
              v26 = *(_QWORD *)(v30 + 8);
              v27 = *(_QWORD *)(v30 + 16);
            }
            v28 = *((unsigned int *)a2 + 4);
            v29 = (_QWORD *)(*a2 + 8 * (*(_DWORD *)(*a3 + 4 * *((unsigned int *)v24 - 2)) + v28 * *a4));
            *v29 = v25.i64[0];
            v29[v28] = v26;
            v29[2 * v28] = v27;
            v24 += 2;
            v23 -= 16;
          }
          while (v23);
          v5 = *(unsigned int *)(result + 12);
        }
        ++v6;
        ++a4;
      }
      while (v6 < v5);
    }
  }
  return result;
}

void sub_20F6169C8(uint64_t a1)
{
  _QWORD *v2;
  int8x16_t v3;
  int8x16_t v4;
  double v5;
  double v6;
  double v7;
  float64_t v8;
  float64_t v9;
  double v10;
  _DWORD *v11;
  int v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  int8x16_t v20;
  float64x2_t v21;
  unint64_t v22;
  unint64_t v23;
  int8x16_t v24;
  int8x16_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  BOOL v34;
  BOOL v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  BOOL v40;
  int8x16_t v41;
  int8x16_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  BOOL v51;
  float64x2_t v52;
  _OWORD v53[4];
  double v54;
  float64x2_t __dst;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64_t v59;

  if (*(_BYTE *)(a1 + 4) && *(_BYTE *)(a1 + 128))
  {
    v2 = *(_QWORD **)(a1 + 104);
    if (v2)
    {
      v52 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
      do
      {
        v11 = (_DWORD *)v2[6];
        v12 = v11[248];
        if (v12 == -1)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_75;
          }
          v12 = v11[248];
        }
        if (!v12)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_75:
          abort();
        }
        memmove(&__dst, v11, 0x48uLL);
        sub_20F13B958(a1 + 16, __dst.f64, (uint64_t)v53);
        v57 = (float64x2_t)v53[2];
        v58 = (float64x2_t)v53[3];
        v59 = v54;
        __dst = (float64x2_t)v53[0];
        v56 = (float64x2_t)v53[1];
        v16 = v2[5];
        v17 = *(_DWORD *)(v16 + 992);
        if (v17 == -1)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_75;
          }
          v17 = *(_DWORD *)(v16 + 992);
          if (v17 <= 7)
          {
LABEL_14:
            if (v17 <= 3)
            {
              if (v17 > 1)
              {
                v13.f64[0] = v59;
                v3 = (int8x16_t)v57;
                v4 = (int8x16_t)v58;
                v42 = (int8x16_t)__dst;
                v41 = (int8x16_t)v56;
                v43 = vextq_s8(v4, v4, 8uLL).u64[0];
                v44 = vextq_s8(v3, v3, 8uLL).u64[0];
                v45 = vextq_s8(v41, v41, 8uLL).u64[0];
                v46 = vextq_s8(v42, v42, 8uLL).u64[0];
                v15.f64[0] = *(float64_t *)(v16 + 64);
                *(_QWORD *)&v15.f64[0] = *(_OWORD *)&vabdq_f64(v13, v15);
                v47 = vabdq_f64(v58, *(float64x2_t *)(v16 + 48));
                v48 = vabdq_f64(v57, *(float64x2_t *)(v16 + 32));
                v49 = vabdq_f64(v56, *(float64x2_t *)(v16 + 16));
                v50 = vabdq_f64(__dst, *(float64x2_t *)v16);
                v51 = v50.f64[0] > 1.0e-10;
                if (v50.f64[1] > 1.0e-10)
                  v51 = 1;
                if (v49.f64[0] > 1.0e-10)
                  v51 = 1;
                if (v49.f64[1] > 1.0e-10)
                  v51 = 1;
                if (v48.f64[0] > 1.0e-10)
                  v51 = 1;
                if (v48.f64[1] > 1.0e-10)
                  v51 = 1;
                if (v47.f64[0] > 1.0e-10)
                  v51 = 1;
                if (!v51 && v47.f64[1] <= 1.0e-10 && v15.f64[0] <= 1.0e-10)
                  goto LABEL_7;
                v42.i64[1] = v46;
                v41.i64[1] = v45;
                *(int8x16_t *)v16 = v42;
                *(int8x16_t *)(v16 + 16) = v41;
                v3.i64[1] = v44;
                *(float64_t *)(v16 + 64) = v13.f64[0];
                v4.i64[1] = v43;
              }
              else
              {
                if (!v17)
                {
                  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                  abort();
                }
                v13.f64[0] = v59;
                v3.i64[0] = *(_QWORD *)&v57.f64[0];
                v4.i64[0] = *(_QWORD *)&v58.f64[0];
                *(float64_t *)&v19 = __dst.f64[0];
                *(float64_t *)&v18 = v56.f64[0];
                v20 = (int8x16_t)vabdq_f64(__dst, *(float64x2_t *)v16);
                v21 = (float64x2_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v52, (float64x2_t)vextq_s8(v20, v20, 8uLL)), (int32x4_t)vcgeq_f64(v52, vabdq_f64(v56, *(float64x2_t *)(v16 + 16)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v52, vabdq_f64(v57, *(float64x2_t *)(v16 + 32))), (int32x4_t)vcgeq_f64(v52, vabdq_f64(v58,
                                                                                     *(float64x2_t *)(v16 + 48))))));
                if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)v21)) & 1) == 0)
                {
                  v21.f64[0] = *(float64_t *)(v16 + 64);
                  if (vabdq_f64(v13, v21).f64[0] <= 1.0e-10)
                    goto LABEL_7;
                }
                v22 = vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).u64[0];
                *((_QWORD *)&v19 + 1) = vextq_s8((int8x16_t)__dst, (int8x16_t)__dst, 8uLL).u64[0];
                *((_QWORD *)&v18 + 1) = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u64[0];
                v23 = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u64[0];
                *(_OWORD *)v16 = v19;
                *(_OWORD *)(v16 + 16) = v18;
                v3.i64[1] = v23;
                *(float64_t *)(v16 + 64) = v13.f64[0];
                v4.i64[1] = v22;
              }
              goto LABEL_6;
            }
            v14.f64[0] = v59;
            v3 = (int8x16_t)v57;
            v4 = (int8x16_t)v58;
            v25 = (int8x16_t)__dst;
            v24 = (int8x16_t)v56;
            v26 = vextq_s8(v4, v4, 8uLL).u64[0];
            v27 = vextq_s8(v3, v3, 8uLL).u64[0];
            v28 = vextq_s8(v24, v24, 8uLL).u64[0];
            v29 = vextq_s8(v25, v25, 8uLL).u64[0];
            v15.f64[0] = *(float64_t *)(v16 + 64);
            *(_QWORD *)&v15.f64[0] = *(_OWORD *)&vabdq_f64(v14, v15);
            v36 = vabdq_f64(v58, *(float64x2_t *)(v16 + 48));
            v37 = vabdq_f64(v57, *(float64x2_t *)(v16 + 32));
            v38 = vabdq_f64(v56, *(float64x2_t *)(v16 + 16));
            v39 = vabdq_f64(__dst, *(float64x2_t *)v16);
            v40 = v39.f64[0] > 1.0e-10;
            if (v39.f64[1] > 1.0e-10)
              v40 = 1;
            if (v38.f64[0] > 1.0e-10)
              v40 = 1;
            if (v38.f64[1] > 1.0e-10)
              v40 = 1;
            if (v37.f64[0] > 1.0e-10)
              v40 = 1;
            if (v37.f64[1] > 1.0e-10)
              v40 = 1;
            if (v36.f64[0] > 1.0e-10)
              v40 = 1;
            v35 = v40 || v36.f64[1] > 1.0e-10 || v15.f64[0] > 1.0e-10;
            if (v17 > 5)
            {
              if (!v35)
                goto LABEL_7;
              goto LABEL_5;
            }
LABEL_54:
            if (!v35)
              goto LABEL_7;
            goto LABEL_5;
          }
        }
        else if (v17 <= 7)
        {
          goto LABEL_14;
        }
        v14.f64[0] = v59;
        v3 = (int8x16_t)v57;
        v4 = (int8x16_t)v58;
        v25 = (int8x16_t)__dst;
        v24 = (int8x16_t)v56;
        v26 = vextq_s8(v4, v4, 8uLL).u64[0];
        v27 = vextq_s8(v3, v3, 8uLL).u64[0];
        v28 = vextq_s8(v24, v24, 8uLL).u64[0];
        v29 = vextq_s8(v25, v25, 8uLL).u64[0];
        v15.f64[0] = *(float64_t *)(v16 + 64);
        *(_QWORD *)&v15.f64[0] = *(_OWORD *)&vabdq_f64(v14, v15);
        v30 = vabdq_f64(v58, *(float64x2_t *)(v16 + 48));
        v31 = vabdq_f64(v57, *(float64x2_t *)(v16 + 32));
        v32 = vabdq_f64(v56, *(float64x2_t *)(v16 + 16));
        v33 = vabdq_f64(__dst, *(float64x2_t *)v16);
        v34 = v33.f64[0] > 1.0e-10;
        if (v33.f64[1] > 1.0e-10)
          v34 = 1;
        if (v32.f64[0] > 1.0e-10)
          v34 = 1;
        if (v32.f64[1] > 1.0e-10)
          v34 = 1;
        if (v31.f64[0] > 1.0e-10)
          v34 = 1;
        if (v31.f64[1] > 1.0e-10)
          v34 = 1;
        if (v30.f64[0] > 1.0e-10)
          v34 = 1;
        v35 = v34 || v30.f64[1] > 1.0e-10 || v15.f64[0] > 1.0e-10;
        if (v17 <= 0xB)
        {
          if (v17 > 9)
          {
            if (!v35)
              goto LABEL_7;
            goto LABEL_5;
          }
          goto LABEL_54;
        }
        if (v17 <= 0xD)
          goto LABEL_54;
        if (!v35)
          goto LABEL_7;
LABEL_5:
        v25.i64[1] = v29;
        v24.i64[1] = v28;
        *(int8x16_t *)v16 = v25;
        *(int8x16_t *)(v16 + 16) = v24;
        v3.i64[1] = v27;
        *(float64_t *)(v16 + 64) = v14.f64[0];
        v4.i64[1] = v26;
LABEL_6:
        *(int8x16_t *)(v16 + 32) = v3;
        *(int8x16_t *)(v16 + 48) = v4;
        v5 = __dst.f64[1];
        v6 = v57.f64[0];
        v7 = v56.f64[0];
        v8 = __dst.f64[0] * v57.f64[0];
        v9 = -__dst.f64[1] / (__dst.f64[0] * v57.f64[0]);
        *(double *)(v16 + 72) = 1.0 / __dst.f64[0];
        *(float64_t *)(v16 + 80) = v9;
        v10 = v57.f64[1];
        *(double *)(v16 + 88) = -(v6 * v7 - v5 * v57.f64[1]) / v8;
        *(_QWORD *)(v16 + 96) = 0;
        *(double *)(v16 + 104) = 1.0 / v6;
        *(double *)(v16 + 112) = -v10 / v6;
        *(_QWORD *)(v16 + 120) = 0;
        *(_QWORD *)(v16 + 128) = 0;
        *(_OWORD *)(v16 + 136) = xmmword_2102E3C70;
        *(_QWORD *)(v16 + 152) = 0x7FF8000000000000;
        *(_BYTE *)(v16 + 160) = 0;
LABEL_7:
        v2 = (_QWORD *)*v2;
      }
      while (v2);
    }
    *(_BYTE *)(a1 + 129) = 1;
  }
}

void sub_20F616F2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float32x2_t *v4;
  uint64_t *v5;
  int8x16_t v6;
  int32x4_t v7;
  int32x4_t v8;
  float64x2_t v9;
  float64x2_t v10;
  uint64_t v11;
  float32x2_t v12;
  unsigned int v13;
  float64x2_t v14;
  double v15;
  uint64_t v16;
  float64x2_t *v17;
  float64x2_t *v18;
  uint64_t v19;
  float64x2_t v20;
  float64x2_t *v21;
  float64x2_t *v22;
  uint64_t v23;
  float64x2_t *v24;
  float64x2_t *v25;
  double *v26;
  uint64_t v27;
  float64x2_t *v28;
  float64x2_t *v29;
  uint64_t v30;
  char v31;
  double *v32;
  double *v33;
  float64x2_t *v34;
  float64x2_t *v35;
  uint64_t v36;
  double *v37;
  float64x2_t *v38;
  uint64_t v39;
  double v40;
  int8x16_t v41;
  float64x2_t v42;
  __int128 v43;
  double v51;
  __int128 v54;
  int64x2_t v55;
  float64x2_t *v56;
  float64x2_t *v57;
  uint64_t v58;
  double v59;
  _QWORD *v64;
  float64x2_t v65;
  float64_t v66;
  float64x2_t *v67;
  float64x2_t *v68;
  float64x2_t *v69;
  float64x2_t *v70;
  uint64_t v71;
  int64x2_t v72;
  float64_t v73;
  int64x2_t v74;
  float64_t v75;
  float64x2_t v76;
  uint64_t v77;
  float64x2_t v78;
  int8x16_t v79;
  int64x2_t v80;
  int64x2_t v81;
  float64x2_t v82;
  uint64_t v83;
  int8x16_t v84;
  float64_t v85;
  __int128 v86;
  unint64_t v87;
  __int128 v88;
  uint64_t v89;
  double v90;
  float64_t v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 112) && *(_BYTE *)(a1 + 4) && *(_BYTE *)(a1 + 128))
  {
    v1 = *(_QWORD *)(a1 + 64);
    v2 = *(_QWORD *)(a1 + 72);
    if (v1 != v2)
    {
      v64 = (_QWORD *)(a1 + 88);
      do
      {
        v4 = *(float32x2_t **)(v1 + 8);
        v3 = *(_QWORD *)(v1 + 16);
        if (*(_BYTE *)(v3 + 58) && !*(_BYTE *)(v3 + 57))
          goto LABEL_7;
        v5 = sub_20E9DF85C(v64, (uint64_t *)(v3 + 32));
        v11 = v5[5];
        v12 = v4[1];
        v13 = *(_DWORD *)(v11 + 992);
        if (v13 == -1)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v13 = *(_DWORD *)(v11 + 992);
          v14 = vcvtq_f64_f32(v12);
          if (v13 <= 7)
          {
LABEL_12:
            if (!v13)
            {
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
              abort();
            }
            *(double *)v7.i64 = *(double *)(v11 + 72) * v14.f64[0];
            v15 = v14.f64[1];
            v90 = *(double *)(v11 + 88) + *(double *)v7.i64 + vmuld_lane_f64(*(double *)(v11 + 80), v14, 1);
            v6.i64[0] = *(_QWORD *)(v11 + 112);
            v14.f64[0] = v14.f64[1] * *(double *)(v11 + 104) + *(double *)v6.i64;
LABEL_17:
            v91 = v14.f64[0];
LABEL_18:
            v67 = &v65;
            v68 = (float64x2_t *)&v90;
            v70 = 0;
            v71 = 0;
            v69 = 0;
            if (v13 <= 7)
              goto LABEL_19;
            goto LABEL_61;
          }
        }
        else
        {
          v14 = vcvtq_f64_f32(v12);
          if (v13 <= 7)
            goto LABEL_12;
        }
        v90 = *(double *)(v11 + 88) + *(double *)(v11 + 72) * v14.f64[0] + vmuld_lane_f64(*(double *)(v11 + 80), v14, 1);
        v15 = *(double *)(v11 + 104);
        v6.i64[0] = *(_QWORD *)(v11 + 112);
        v14.f64[0] = vmuld_lane_f64(v15, v14, 1) + *(double *)v6.i64;
        if (v13 < 0xE)
          goto LABEL_17;
        v91 = v14.f64[0];
        if (v13 == 14)
          goto LABEL_18;
        v21 = &v65;
        v22 = (float64x2_t *)&v90;
        v67 = &v65;
        v68 = (float64x2_t *)&v90;
        v70 = 0;
        v71 = 0;
        v69 = 0;
        if (v13 != -1)
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
LABEL_89:
          v31 = sub_20EB3CED8(v11, (uint64_t)v21, v22, v25, v24, v23);
LABEL_109:
          if ((v31 & 1) != 0)
            goto LABEL_110;
          goto LABEL_6;
        }
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v13 = *(_DWORD *)(v11 + 992);
        if (v13 <= 7)
        {
LABEL_19:
          if (v13 > 3)
          {
            v27 = (uint64_t)v67;
            v26 = (double *)v68;
            v28 = v69;
            v29 = v70;
            v30 = v71;
            if (v13 > 5)
            {
              if (v13 == 6)
                v31 = sub_20EB41C58((double *)v11, (uint64_t)v67, v68->f64, v69, (uint64_t)v70, v71);
              else
                v31 = sub_20EB306CC(v11, (uint64_t)v67, v68, v69, (unint64_t)v70, v71, v14.f64[0], v15, v6, (int8x16_t)v7, *(double *)v8.i64, v9.f64[0], v10);
            }
            else if (v13 == 5)
            {
              if (v69)
              {
                v69->f64[0] = 0.0;
                v28->f64[1] = 0.0;
                v28[1].f64[0] = 0.0;
              }
              if (v30)
              {
                *(_QWORD *)(v30 + 64) = 0;
                *(_OWORD *)(v30 + 32) = 0u;
                *(_OWORD *)(v30 + 48) = 0u;
                *(_OWORD *)v30 = 0u;
                *(_OWORD *)(v30 + 16) = 0u;
              }
              if (v29)
                v31 = sub_20EB28F10(v27, (uint64_t)v29, v26, v11 + 168, 5);
              else
                v31 = sub_20EB2886C(v27, v26, v11 + 168, 5);
            }
            else
            {
              if (v69)
              {
                v69->f64[0] = 0.0;
                v28->f64[1] = 0.0;
                v28[1].f64[0] = 0.0;
              }
              if (v30)
              {
                *(_QWORD *)(v30 + 64) = 0;
                v14 = 0uLL;
                *(_OWORD *)(v30 + 32) = 0u;
                *(_OWORD *)(v30 + 48) = 0u;
                *(_OWORD *)v30 = 0u;
                *(_OWORD *)(v30 + 16) = 0u;
              }
              if (v29)
              {
                if (!*(_BYTE *)(v11 + 468))
                {
                  *(_QWORD *)&v14.f64[0] = sub_20EB27C0C(v11 + 204, (double *)(v11 + 168), 0x32uLL, (int8x16_t)v14, v15, v6, (int8x16_t)v7).u64[0];
                  *(_BYTE *)(v11 + 468) = 1;
                }
                v31 = sub_20EA8D684(v27, (uint64_t)v26, (int64x2_t *)(v11 + 168), (float *)(v11 + 204), v29, 5, v14.f64[0], v15, *(double *)v6.i64, *(double *)v7.i64, *(double *)v8.i64, v9.f64[0], v10);
              }
              else
              {
                if (!*(_BYTE *)(v11 + 468))
                {
                  *(_QWORD *)&v14.f64[0] = sub_20EB27C0C(v11 + 204, (double *)(v11 + 168), 0x32uLL, (int8x16_t)v14, v15, v6, (int8x16_t)v7).u64[0];
                  *(_BYTE *)(v11 + 468) = 1;
                }
                v31 = sub_20EA8D684(v27, (uint64_t)v26, (int64x2_t *)(v11 + 168), (float *)(v11 + 204), 0, 5, v14.f64[0], v15, *(double *)v6.i64, *(double *)v7.i64, *(double *)v8.i64, v9.f64[0], v10);
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              if (!v13)
              {
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                abort();
              }
              v16 = (uint64_t)v67;
              v18 = v69;
              v17 = v70;
              v19 = v71;
              v20 = *v68;
              *v67 = *v68;
              *(_QWORD *)(v16 + 16) = 0x3FF0000000000000;
              if (v18)
              {
                v18->f64[0] = 0.0;
                v18->f64[1] = 0.0;
                v18[1].f64[0] = 0.0;
              }
              if (v17)
              {
                *v17 = (float64x2_t)xmmword_210312EC0;
                v17[1] = (float64x2_t)unk_210312ED0;
                v20.f64[1] = 0.0;
                v17[2] = (float64x2_t)xmmword_210312EE0;
              }
              if (v19)
              {
                *(_QWORD *)(v19 + 64) = 0;
                v20.f64[1] = 0.0;
                *(_OWORD *)(v19 + 32) = 0u;
                *(_OWORD *)(v19 + 48) = 0u;
                *(_OWORD *)v19 = 0u;
                *(_OWORD *)(v19 + 16) = 0u;
                if (v5[6])
                  goto LABEL_112;
              }
              else
              {
LABEL_110:
                if (v5[6])
                  goto LABEL_112;
              }
LABEL_111:
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/IntrinsicsCalibVariable.hpp", 205, (uint64_t)"lens_info_iter->second.measured_lens", 36, (uint64_t)"measured_lens is not allocated", 30, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              goto LABEL_112;
            }
            if (v13 == 2)
            {
              v31 = sub_20EA8D22C((uint64_t)&v67, v11);
            }
            else
            {
              v32 = (double *)v67;
              v33 = (double *)v68;
              v35 = v69;
              v34 = v70;
              v36 = v71;
              if (v69)
              {
                v69->f64[0] = 0.0;
                v35->f64[1] = 0.0;
                v35[1].f64[0] = 0.0;
              }
              if (v36)
              {
                *(_QWORD *)(v36 + 64) = 0;
                v14.f64[0] = 0.0;
                *(_OWORD *)(v36 + 32) = 0u;
                *(_OWORD *)(v36 + 48) = 0u;
                *(_OWORD *)v36 = 0u;
                *(_OWORD *)(v36 + 16) = 0u;
              }
              if (v34)
                v31 = sub_20EB27398(v32, (uint64_t)v34, v33, (int64x2_t *)(v11 + 168), 20, v14.f64[0], v15, *(double *)v6.i64, *(double *)v7.i64, (int64x2_t)v8);
              else
                v31 = sub_20EB23DF0((uint64_t)v32, v33, (int64x2_t *)(v11 + 168), 20, v14.f64[0], v15, *(double *)v6.i64, *(double *)v7.i64, (int64x2_t)v8, v9);
            }
          }
          goto LABEL_109;
        }
LABEL_61:
        v21 = v67;
        if (v13 > 0xB)
        {
          if (v13 <= 0xD)
          {
            if (v13 != 13)
            {
              v57 = v69;
              v56 = v70;
              v58 = v71;
              if (v69)
              {
                v69->f64[0] = 0.0;
                v57->f64[1] = 0.0;
                v57[1].f64[0] = 0.0;
              }
              if (v58)
              {
                *(_QWORD *)(v58 + 64) = 0;
                *(_OWORD *)(v58 + 32) = 0u;
                *(_OWORD *)(v58 + 48) = 0u;
                *(_OWORD *)v58 = 0u;
                *(_OWORD *)(v58 + 16) = 0u;
              }
              v21->f64[0] = 0.0;
              v21->f64[1] = 0.0;
              v21[1].f64[0] = 0.0;
              if (v56)
              {
                v56[1] = 0u;
                v56[2] = 0u;
                *v56 = 0u;
              }
              goto LABEL_6;
            }
            v31 = sub_20EB43734((double *)v11, (uint64_t)v67, (uint64_t)v68, v69, (uint64_t)v70, v71);
            goto LABEL_109;
          }
          v22 = v68;
          v25 = v69;
          v24 = v70;
          v23 = v71;
          if (v13 != 14)
            goto LABEL_89;
          if (v69)
          {
            v69->f64[0] = 0.0;
            v25->f64[1] = 0.0;
            v25[1].f64[0] = 0.0;
          }
          if (v23)
          {
            *(_QWORD *)(v23 + 64) = 0;
            *(_OWORD *)(v23 + 32) = 0u;
            *(_OWORD *)(v23 + 48) = 0u;
            *(_OWORD *)v23 = 0u;
            *(_OWORD *)(v23 + 16) = 0u;
          }
          v51 = (*(double *)v11 + *(double *)(v11 + 32)) * 0.5;
          v31 = sub_20EB253A0((uint64_t)v21, (uint64_t)v22, (double *)(v11 + 168), (double *)(v11 + 392), 0x14u, v51);
          if (!v24)
            goto LABEL_109;
          if ((v31 & 1) != 0)
          {
            if (sub_20EB2498C(&v78, (uint64_t)&v79, &v76, (uint64_t)v21, (double *)(v11 + 168), v51))
            {
              v41.i64[0] = *(_QWORD *)&v21[1].f64[0];
              v42 = *v21;
              *(_QWORD *)&v43 = v80.i64[0];
              _Q3 = v79;
              v82 = v42;
              v83 = v41.i64[0];
              v77 = 0;
              *(_QWORD *)&_Q5.f64[0] = v41.i64[0];
              _Q5.f64[1] = v42.f64[0];
              _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v81, _Q5), (float64x2_t)vzip2q_s64(v81, v80), (float64x2_t)vextq_s8(*(int8x16_t *)&v42, v41, 8uLL)).f64[1];
              __asm { FMLA            D6, D5, V3.D[1] }
              if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v80, v42), 1), (float64x2_t)v81, v42).f64[0], *(double *)v80.i64)) >= 0.00000001)
              {
LABEL_87:
                *(_QWORD *)&v54 = vextq_s8(v79, v79, 8uLL).u64[0];
                _Q3.i64[1] = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u64[0];
                *((_QWORD *)&v54 + 1) = v81.i64[0];
                *((_QWORD *)&v43 + 1) = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u64[0];
                v84 = _Q3;
                v85 = v42.f64[0];
                v87 = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
                v86 = v54;
                v89 = v41.i64[0];
                v88 = v43;
                sub_20E8BE424((uint64_t)&v72);
                v20.f64[0] = v73;
                v55 = vzip2q_s64(v72, v74);
                v20.f64[1] = v75;
                *(int64x2_t *)v24 = vzip1q_s64(v72, v74);
                v24[1] = (float64x2_t)v55;
                v24[2] = v20;
                if (!v5[6])
                  goto LABEL_111;
LABEL_112:
                v20.f64[0] = v66;
                _Q1 = v65;
                _Q2 = vmulq_f64(_Q1, _Q1);
                _D3 = v65.f64[1];
                __asm { FMLA            D2, D3, V1.D[1] }
                _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + v20.f64[0] * v20.f64[0]);
                v65 = vmulq_n_f64(v65, _Q2.f64[0]);
                *(_QWORD *)&v66 = *(_OWORD *)&vmulq_f64(v20, _Q2);
                *(float64x2_t *)(v3 + 64) = v65;
                *(float64_t *)(v3 + 80) = v66;
                goto LABEL_7;
              }
            }
          }
        }
        else
        {
          v37 = (double *)v68;
          v38 = v69;
          v24 = v70;
          v39 = v71;
          if (v13 <= 9)
          {
            if (v13 == 9)
            {
              v31 = sub_20EB35004(v11, (uint64_t)v67, v68, v69, (unint64_t)v70, v71, v14.f64[0], v15, *(double *)v6.i64, v7, v8);
            }
            else
            {
              if (v69)
              {
                v69->f64[0] = 0.0;
                v38->f64[1] = 0.0;
                v38[1].f64[0] = 0.0;
              }
              if (v39)
              {
                *(_QWORD *)(v39 + 64) = 0;
                v14.f64[0] = 0.0;
                *(_OWORD *)(v39 + 32) = 0u;
                *(_OWORD *)(v39 + 48) = 0u;
                *(_OWORD *)v39 = 0u;
                *(_OWORD *)(v39 + 16) = 0u;
              }
              if (v24)
              {
                v31 = sub_20EB277C4((uint64_t)v21, (uint64_t)v24, v37, v11 + 168, 20, v14.f64[0], v15, *(double *)v6.i64, v7, v8);
              }
              else
              {
                v59 = sqrt(*v37 * *v37 + v37[1] * v37[1]);
                v31 = sub_20EB24018((uint64_t)v21, v37, (double *)(v11 + 168), 20, v59, v59, *(double *)v6.i64, v7, v8);
              }
            }
            goto LABEL_109;
          }
          if (v13 != 10)
          {
            v31 = sub_20EB38E20(v11, (uint64_t)v67, v68, v69, v70, v71);
            goto LABEL_109;
          }
          if (v69)
          {
            v69->f64[0] = 0.0;
            v38->f64[1] = 0.0;
            v38[1].f64[0] = 0.0;
          }
          if (v39)
          {
            *(_QWORD *)(v39 + 64) = 0;
            *(_OWORD *)(v39 + 32) = 0u;
            *(_OWORD *)(v39 + 48) = 0u;
            *(_OWORD *)v39 = 0u;
            *(_OWORD *)(v39 + 16) = 0u;
          }
          v40 = (*(double *)v11 + *(double *)(v11 + 32)) * 0.5;
          v31 = sub_20EB24F38((uint64_t)v21, (uint64_t)v37, v11 + 168, (double *)(v11 + 280), 0x14u, v40);
          if (!v24)
            goto LABEL_109;
          if ((v31 & 1) != 0)
          {
            if (sub_20EB2450C(&v78, (uint64_t)&v79, &v76, (uint64_t)v21, (double *)(v11 + 168), v40))
            {
              v41.i64[0] = *(_QWORD *)&v21[1].f64[0];
              v42 = *v21;
              *(_QWORD *)&v43 = v80.i64[0];
              _Q3 = v79;
              v82 = v42;
              v83 = v41.i64[0];
              v77 = 0;
              *(_QWORD *)&_Q5.f64[0] = v41.i64[0];
              _Q5.f64[1] = v42.f64[0];
              _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v81, _Q5), (float64x2_t)vzip2q_s64(v81, v80), (float64x2_t)vextq_s8(*(int8x16_t *)&v42, v41, 8uLL)).f64[1];
              __asm { FMLA            D6, D5, V3.D[1] }
              if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v80, v42), 1), (float64x2_t)v81, v42).f64[0], *(double *)v80.i64)) >= 0.00000001)goto LABEL_87;
            }
          }
        }
LABEL_6:
        *(_WORD *)(v3 + 57) = 256;
LABEL_7:
        v1 += 24;
      }
      while (v1 != v2);
    }
    *(_BYTE *)(a1 + 129) = 1;
  }
}

void sub_20F6178A8(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  int64x2_t v7;
  float64x2_t v8;
  uint64_t v16;
  float32x2_t *v17;
  uint64_t v18;
  int8x16_t v19;
  int32x4_t v20;
  int32x4_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float32x2_t v24;
  unsigned int v25;
  float64x2_t v26;
  double v27;
  uint64_t v28;
  float64x2_t *v29;
  float64x2_t *v30;
  uint64_t v31;
  float64x2_t *v32;
  float64x2_t *v33;
  uint64_t v34;
  float64x2_t *v35;
  float64x2_t *v36;
  double *v37;
  uint64_t v38;
  float64x2_t *v39;
  float64x2_t *v40;
  uint64_t v41;
  char v42;
  double *v43;
  double *v44;
  float64x2_t *v45;
  float64x2_t *v46;
  uint64_t v47;
  double *v48;
  float64x2_t *v49;
  uint64_t v50;
  double v51;
  int8x16_t v52;
  float64x2_t v53;
  __int128 v54;
  double v58;
  float64x2_t *v61;
  float64x2_t *v62;
  uint64_t v63;
  double v64;
  float64x2_t v65;
  float64_t v66;
  float64x2_t *v67;
  float64x2_t *v68;
  float64x2_t *v69;
  float64x2_t *v70;
  uint64_t v71;
  int64x2_t v72;
  float64_t v73;
  int64x2_t v74;
  float64_t v75;
  float64x2_t v76;
  uint64_t v77;
  float64x2_t v78;
  int8x16_t v79;
  int64x2_t v80;
  int64x2_t v81;
  float64x2_t v82;
  uint64_t v83;
  int8x16_t v84;
  float64_t v85;
  __int128 v86;
  unint64_t v87;
  __int128 v88;
  uint64_t v89;
  double v90;
  float64_t v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 288) && *(_BYTE *)(a1 + 4))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 48);
    if (v2)
    {
      v3 = *(_DWORD *)(v2 + 992);
      if (v3 != -1)
        goto LABEL_5;
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/RadialDistortionCalibVariable.hpp", 161, (uint64_t)"lens_map_.begin()->second.measured_lens", 39, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_123;
      }
      v2 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 48);
      v3 = *(_DWORD *)(v2 + 992);
      if (v3 != -1)
      {
LABEL_5:
        if (v3 <= 1)
          goto LABEL_6;
LABEL_12:
        v4 = *(_QWORD *)(a1 + 240);
        v5 = *(_QWORD *)(a1 + 248);
        if (v4 == v5)
        {
LABEL_118:
          *(_BYTE *)(a1 + 304) = 1;
          return;
        }
        while (1)
        {
          v17 = *(float32x2_t **)(v4 + 8);
          v16 = *(_QWORD *)(v4 + 16);
          if (*(_BYTE *)(v16 + 58) && !*(_BYTE *)(v16 + 57))
            goto LABEL_16;
          v18 = sub_20E9DF85C((_QWORD *)(a1 + 264), (uint64_t *)(v16 + 32))[5];
          v24 = v17[1];
          v25 = *(_DWORD *)(v18 + 992);
          if (v25 == -1)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v25 = *(_DWORD *)(v18 + 992);
            v26 = vcvtq_f64_f32(v24);
            if (v25 <= 7)
            {
LABEL_21:
              if (!v25)
              {
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                abort();
              }
              *(double *)v20.i64 = *(double *)(v18 + 72) * v26.f64[0];
              v27 = v26.f64[1];
              v90 = *(double *)(v18 + 88) + *(double *)v20.i64 + vmuld_lane_f64(*(double *)(v18 + 80), v26, 1);
              v19.i64[0] = *(_QWORD *)(v18 + 112);
              v26.f64[0] = v26.f64[1] * *(double *)(v18 + 104) + *(double *)v19.i64;
LABEL_26:
              v91 = v26.f64[0];
LABEL_27:
              v67 = &v65;
              v68 = (float64x2_t *)&v90;
              v70 = 0;
              v71 = 0;
              v69 = 0;
              if (v25 <= 7)
                goto LABEL_28;
              goto LABEL_69;
            }
          }
          else
          {
            v26 = vcvtq_f64_f32(v24);
            if (v25 <= 7)
              goto LABEL_21;
          }
          v90 = *(double *)(v18 + 88)
              + *(double *)(v18 + 72) * v26.f64[0]
              + vmuld_lane_f64(*(double *)(v18 + 80), v26, 1);
          v27 = *(double *)(v18 + 104);
          v19.i64[0] = *(_QWORD *)(v18 + 112);
          v26.f64[0] = vmuld_lane_f64(v27, v26, 1) + *(double *)v19.i64;
          if (v25 < 0xE)
            goto LABEL_26;
          v91 = v26.f64[0];
          if (v25 == 14)
            goto LABEL_27;
          v32 = &v65;
          v33 = (float64x2_t *)&v90;
          v67 = &v65;
          v68 = (float64x2_t *)&v90;
          v70 = 0;
          v71 = 0;
          v69 = 0;
          if (v25 != -1)
          {
            v34 = 0;
            v35 = 0;
            v36 = 0;
LABEL_96:
            v42 = sub_20EB3CED8(v18, (uint64_t)v32, v33, v36, v35, v34);
            goto LABEL_116;
          }
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v25 = *(_DWORD *)(v18 + 992);
          if (v25 <= 7)
          {
LABEL_28:
            if (v25 > 3)
            {
              v38 = (uint64_t)v67;
              v37 = (double *)v68;
              v39 = v69;
              v40 = v70;
              v41 = v71;
              if (v25 > 5)
              {
                if (v25 == 6)
                  v42 = sub_20EB41C58((double *)v18, (uint64_t)v67, v68->f64, v69, (uint64_t)v70, v71);
                else
                  v42 = sub_20EB306CC(v18, (uint64_t)v67, v68, v69, (unint64_t)v70, v71, v26.f64[0], v27, v19, (int8x16_t)v20, *(double *)v21.i64, v22.f64[0], v23);
              }
              else if (v25 == 5)
              {
                if (v69)
                {
                  v69->f64[0] = 0.0;
                  v39->f64[1] = 0.0;
                  v39[1].f64[0] = 0.0;
                }
                if (v41)
                {
                  *(_QWORD *)(v41 + 64) = 0;
                  *(_OWORD *)(v41 + 32) = 0u;
                  *(_OWORD *)(v41 + 48) = 0u;
                  *(_OWORD *)v41 = 0u;
                  *(_OWORD *)(v41 + 16) = 0u;
                }
                if (v40)
                  v42 = sub_20EB28F10(v38, (uint64_t)v40, v37, v18 + 168, 5);
                else
                  v42 = sub_20EB2886C(v38, v37, v18 + 168, 5);
              }
              else
              {
                if (v69)
                {
                  v69->f64[0] = 0.0;
                  v39->f64[1] = 0.0;
                  v39[1].f64[0] = 0.0;
                }
                if (v41)
                {
                  *(_QWORD *)(v41 + 64) = 0;
                  v26 = 0uLL;
                  *(_OWORD *)(v41 + 32) = 0u;
                  *(_OWORD *)(v41 + 48) = 0u;
                  *(_OWORD *)v41 = 0u;
                  *(_OWORD *)(v41 + 16) = 0u;
                }
                if (v40)
                {
                  if (!*(_BYTE *)(v18 + 468))
                  {
                    *(_QWORD *)&v26.f64[0] = sub_20EB27C0C(v18 + 204, (double *)(v18 + 168), 0x32uLL, (int8x16_t)v26, v27, v19, (int8x16_t)v20).u64[0];
                    *(_BYTE *)(v18 + 468) = 1;
                  }
                  v42 = sub_20EA8D684(v38, (uint64_t)v37, (int64x2_t *)(v18 + 168), (float *)(v18 + 204), v40, 5, v26.f64[0], v27, *(double *)v19.i64, *(double *)v20.i64, *(double *)v21.i64, v22.f64[0], v23);
                }
                else
                {
                  if (!*(_BYTE *)(v18 + 468))
                  {
                    *(_QWORD *)&v26.f64[0] = sub_20EB27C0C(v18 + 204, (double *)(v18 + 168), 0x32uLL, (int8x16_t)v26, v27, v19, (int8x16_t)v20).u64[0];
                    *(_BYTE *)(v18 + 468) = 1;
                  }
                  v42 = sub_20EA8D684(v38, (uint64_t)v37, (int64x2_t *)(v18 + 168), (float *)(v18 + 204), 0, 5, v26.f64[0], v27, *(double *)v19.i64, *(double *)v20.i64, *(double *)v21.i64, v22.f64[0], v23);
                }
              }
            }
            else
            {
              if (v25 <= 1)
              {
                if (!v25)
                {
                  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                  abort();
                }
                v28 = (uint64_t)v67;
                v30 = v69;
                v29 = v70;
                v31 = v71;
                v8 = *v68;
                *v67 = *v68;
                *(_QWORD *)(v28 + 16) = 0x3FF0000000000000;
                if (v30)
                {
                  v30->f64[0] = 0.0;
                  v30->f64[1] = 0.0;
                  v30[1].f64[0] = 0.0;
                }
                if (v29)
                {
                  *v29 = (float64x2_t)xmmword_210312EC0;
                  v29[1] = (float64x2_t)unk_210312ED0;
                  v8.f64[1] = 0.0;
                  v29[2] = (float64x2_t)xmmword_210312EE0;
                }
                if (v31)
                {
                  *(_QWORD *)(v31 + 64) = 0;
                  v8.f64[1] = 0.0;
                  *(_OWORD *)(v31 + 32) = 0u;
                  *(_OWORD *)(v31 + 48) = 0u;
                  *(_OWORD *)v31 = 0u;
                  *(_OWORD *)(v31 + 16) = 0u;
                }
                goto LABEL_15;
              }
              if (v25 == 2)
              {
                v42 = sub_20EA8D22C((uint64_t)&v67, v18);
              }
              else
              {
                v43 = (double *)v67;
                v44 = (double *)v68;
                v46 = v69;
                v45 = v70;
                v47 = v71;
                if (v69)
                {
                  v69->f64[0] = 0.0;
                  v46->f64[1] = 0.0;
                  v46[1].f64[0] = 0.0;
                }
                if (v47)
                {
                  *(_QWORD *)(v47 + 64) = 0;
                  v26.f64[0] = 0.0;
                  *(_OWORD *)(v47 + 32) = 0u;
                  *(_OWORD *)(v47 + 48) = 0u;
                  *(_OWORD *)v47 = 0u;
                  *(_OWORD *)(v47 + 16) = 0u;
                }
                if (v45)
                  v42 = sub_20EB27398(v43, (uint64_t)v45, v44, (int64x2_t *)(v18 + 168), 20, v26.f64[0], v27, *(double *)v19.i64, *(double *)v20.i64, (int64x2_t)v21);
                else
                  v42 = sub_20EB23DF0((uint64_t)v43, v44, (int64x2_t *)(v18 + 168), 20, v26.f64[0], v27, *(double *)v19.i64, *(double *)v20.i64, (int64x2_t)v21, v22);
              }
            }
            goto LABEL_116;
          }
LABEL_69:
          v32 = v67;
          if (v25 > 0xB)
          {
            if (v25 <= 0xD)
            {
              if (v25 != 13)
              {
                v62 = v69;
                v61 = v70;
                v63 = v71;
                if (v69)
                {
                  v69->f64[0] = 0.0;
                  v62->f64[1] = 0.0;
                  v62[1].f64[0] = 0.0;
                }
                if (v63)
                {
                  *(_QWORD *)(v63 + 64) = 0;
                  *(_OWORD *)(v63 + 32) = 0u;
                  *(_OWORD *)(v63 + 48) = 0u;
                  *(_OWORD *)v63 = 0u;
                  *(_OWORD *)(v63 + 16) = 0u;
                }
                v32->f64[0] = 0.0;
                v32->f64[1] = 0.0;
                v32[1].f64[0] = 0.0;
                if (v61)
                {
                  v61[1] = 0u;
                  v61[2] = 0u;
                  *v61 = 0u;
                }
LABEL_117:
                *(_WORD *)(v16 + 57) = 256;
                goto LABEL_16;
              }
              v42 = sub_20EB43734((double *)v18, (uint64_t)v67, (uint64_t)v68, v69, (uint64_t)v70, v71);
              goto LABEL_116;
            }
            v33 = v68;
            v36 = v69;
            v35 = v70;
            v34 = v71;
            if (v25 != 14)
              goto LABEL_96;
            if (v69)
            {
              v69->f64[0] = 0.0;
              v36->f64[1] = 0.0;
              v36[1].f64[0] = 0.0;
            }
            if (v34)
            {
              *(_QWORD *)(v34 + 64) = 0;
              *(_OWORD *)(v34 + 32) = 0u;
              *(_OWORD *)(v34 + 48) = 0u;
              *(_OWORD *)v34 = 0u;
              *(_OWORD *)(v34 + 16) = 0u;
            }
            v58 = (*(double *)v18 + *(double *)(v18 + 32)) * 0.5;
            v42 = sub_20EB253A0((uint64_t)v32, (uint64_t)v33, (double *)(v18 + 168), (double *)(v18 + 392), 0x14u, v58);
            if (v35)
            {
              if ((v42 & 1) == 0)
                goto LABEL_117;
              if (!sub_20EB2498C(&v78, (uint64_t)&v79, &v76, (uint64_t)v32, (double *)(v18 + 168), v58))
                goto LABEL_117;
              v52.i64[0] = *(_QWORD *)&v32[1].f64[0];
              v53 = *v32;
              *(_QWORD *)&v54 = v80.i64[0];
              _Q3 = v79;
              v82 = v53;
              v83 = v52.i64[0];
              v77 = 0;
              *(_QWORD *)&_Q5.f64[0] = v52.i64[0];
              _Q5.f64[1] = v53.f64[0];
              _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v81, _Q5), (float64x2_t)vzip2q_s64(v81, v80), (float64x2_t)vextq_s8(*(int8x16_t *)&v53, v52, 8uLL)).f64[1];
              __asm { FMLA            D6, D5, V3.D[1] }
              if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v80, v53), 1), (float64x2_t)v81, v53).f64[0], *(double *)v80.i64)) < 0.00000001)goto LABEL_117;
              goto LABEL_14;
            }
          }
          else
          {
            v48 = (double *)v68;
            v49 = v69;
            v35 = v70;
            v50 = v71;
            if (v25 > 9)
            {
              if (v25 == 10)
              {
                if (v69)
                {
                  v69->f64[0] = 0.0;
                  v49->f64[1] = 0.0;
                  v49[1].f64[0] = 0.0;
                }
                if (v50)
                {
                  *(_QWORD *)(v50 + 64) = 0;
                  *(_OWORD *)(v50 + 32) = 0u;
                  *(_OWORD *)(v50 + 48) = 0u;
                  *(_OWORD *)v50 = 0u;
                  *(_OWORD *)(v50 + 16) = 0u;
                }
                v51 = (*(double *)v18 + *(double *)(v18 + 32)) * 0.5;
                v42 = sub_20EB24F38((uint64_t)v32, (uint64_t)v48, v18 + 168, (double *)(v18 + 280), 0x14u, v51);
                if (v35)
                {
                  if ((v42 & 1) == 0)
                    goto LABEL_117;
                  if (!sub_20EB2450C(&v78, (uint64_t)&v79, &v76, (uint64_t)v32, (double *)(v18 + 168), v51))
                    goto LABEL_117;
                  v52.i64[0] = *(_QWORD *)&v32[1].f64[0];
                  v53 = *v32;
                  *(_QWORD *)&v54 = v80.i64[0];
                  _Q3 = v79;
                  v82 = v53;
                  v83 = v52.i64[0];
                  v77 = 0;
                  *(_QWORD *)&_Q5.f64[0] = v52.i64[0];
                  _Q5.f64[1] = v53.f64[0];
                  _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v81, _Q5), (float64x2_t)vzip2q_s64(v81, v80), (float64x2_t)vextq_s8(*(int8x16_t *)&v53, v52, 8uLL)).f64[1];
                  __asm { FMLA            D6, D5, V3.D[1] }
                  if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v80, v53), 1), (float64x2_t)v81, v53).f64[0], *(double *)v80.i64)) < 0.00000001)goto LABEL_117;
LABEL_14:
                  *(_QWORD *)&v6 = vextq_s8(v79, v79, 8uLL).u64[0];
                  _Q3.i64[1] = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u64[0];
                  *((_QWORD *)&v6 + 1) = v81.i64[0];
                  *((_QWORD *)&v54 + 1) = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u64[0];
                  v84 = _Q3;
                  v85 = v53.f64[0];
                  v87 = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u64[0];
                  v86 = v6;
                  v89 = v52.i64[0];
                  v88 = v54;
                  sub_20E8BE424((uint64_t)&v72);
                  v8.f64[0] = v73;
                  v7 = vzip2q_s64(v72, v74);
                  v8.f64[1] = v75;
                  *(int64x2_t *)v35 = vzip1q_s64(v72, v74);
                  v35[1] = (float64x2_t)v7;
                  v35[2] = v8;
                  goto LABEL_15;
                }
              }
              else
              {
                v42 = sub_20EB38E20(v18, (uint64_t)v67, v68, v69, v70, v71);
              }
            }
            else if (v25 == 9)
            {
              v42 = sub_20EB35004(v18, (uint64_t)v67, v68, v69, (unint64_t)v70, v71, v26.f64[0], v27, *(double *)v19.i64, v20, v21);
            }
            else
            {
              if (v69)
              {
                v69->f64[0] = 0.0;
                v49->f64[1] = 0.0;
                v49[1].f64[0] = 0.0;
              }
              if (v50)
              {
                *(_QWORD *)(v50 + 64) = 0;
                v26.f64[0] = 0.0;
                *(_OWORD *)(v50 + 32) = 0u;
                *(_OWORD *)(v50 + 48) = 0u;
                *(_OWORD *)v50 = 0u;
                *(_OWORD *)(v50 + 16) = 0u;
              }
              if (v35)
              {
                v42 = sub_20EB277C4((uint64_t)v32, (uint64_t)v35, v48, v18 + 168, 20, v26.f64[0], v27, *(double *)v19.i64, v20, v21);
              }
              else
              {
                v64 = sqrt(*v48 * *v48 + v48[1] * v48[1]);
                v42 = sub_20EB24018((uint64_t)v32, v48, (double *)(v18 + 168), 20, v64, v64, *(double *)v19.i64, v20, v21);
              }
            }
          }
LABEL_116:
          if ((v42 & 1) == 0)
            goto LABEL_117;
LABEL_15:
          v8.f64[0] = v66;
          _Q1 = v65;
          _Q2 = vmulq_f64(_Q1, _Q1);
          _D3 = v65.f64[1];
          __asm { FMLA            D2, D3, V1.D[1] }
          _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + v8.f64[0] * v8.f64[0]);
          v65 = vmulq_n_f64(v65, _Q2.f64[0]);
          *(_QWORD *)&v66 = *(_OWORD *)&vmulq_f64(v8, _Q2);
          *(float64x2_t *)(v16 + 64) = v65;
          *(float64_t *)(v16 + 80) = v66;
LABEL_16:
          v4 += 24;
          if (v4 == v5)
            goto LABEL_118;
        }
      }
    }
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v3 = *(_DWORD *)(v2 + 992);
      if (v3 <= 1)
      {
LABEL_6:
        if (!v3)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        return;
      }
      goto LABEL_12;
    }
LABEL_123:
    abort();
  }
}

double sub_20F6182A0(char *__dst, float64x2_t *__src, __n128 a3)
{
  unsigned int v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  int8x16_t v10;
  float64x2_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  float64x2_t v16;
  int v17;
  float64x2_t v18;
  int8x16_t v19;
  float64x2_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  float64x2_t *v31;
  char v32;
  _OWORD v33[7];

  v31 = __src;
  v5 = *((_DWORD *)__dst + 248);
  if (v5 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v5 = *((_DWORD *)__dst + 248);
    if (v5 <= 7)
    {
LABEL_3:
      if (v5 <= 3)
      {
        if (v5 <= 1)
        {
          if (!v5)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
            abort();
          }
          return a3.n128_f64[0];
        }
        if (v5 == 2)
        {
          v16 = *__src;
          *((_QWORD *)__dst + 23) = *(_QWORD *)&__src[1].f64[0];
          *(float64x2_t *)(__dst + 168) = v16;
          if (__src[1].f64[0] == 0.0)
            v17 = 2;
          else
            v17 = 3;
          *((_DWORD *)__dst + 52) = v17;
          goto LABEL_27;
        }
        goto LABEL_26;
      }
      if (v5 == 6)
      {
        v9 = *__src;
        *((_QWORD *)__dst + 23) = *(_QWORD *)&__src[1].f64[0];
        *(float64x2_t *)(__dst + 168) = v9;
        goto LABEL_27;
      }
LABEL_26:
      v18 = *__src;
      *(float64x2_t *)(__dst + 184) = __src[1];
      *(float64x2_t *)(__dst + 168) = v18;
      __dst[468] = 0;
      goto LABEL_27;
    }
  }
  else if (v5 <= 7)
  {
    goto LABEL_3;
  }
  if (v5 > 0xB)
  {
    if (v5 > 0xD)
    {
      if (v5 == 14)
        sub_20F618A9C(&v31, __dst);
      else
        a3.n128_u64[0] = sub_20EB3CC54((uint64_t)__dst, __src).u64[0];
      return a3.n128_f64[0];
    }
    if (v5 != 13)
      goto LABEL_26;
    v10 = (int8x16_t)vabsq_f64(vsubq_f64(*__src, *(float64x2_t *)(__dst + 168)));
    v11 = (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
    if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v11, (float64x2_t)vextq_s8(v10, v10, 8uLL)), (int32x4_t)vcgeq_f64(v11, vabsq_f64(vsubq_f64(__src[1], *(float64x2_t *)(__dst + 184))))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v11, vabsq_f64(vsubq_f64(__src[2], *(float64x2_t *)(__dst + 200)))), (int32x4_t)vcgeq_f64(v11, vabsq_f64(vsubq_f64(__src[3], *(float64x2_t *)(__dst + 216))))))))) & 1) == 0&& (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_21030C960, (int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v11,
                                                            vabsq_f64(vsubq_f64(__src[4], *(float64x2_t *)(__dst + 232)))),
                                               (int32x4_t)vcgeq_f64(v11, vabsq_f64(vsubq_f64(__src[5], *(float64x2_t *)(__dst + 248))))))) & 0xF) == 0)
    {
      a3 = (__n128)vabsq_f64(vsubq_f64(__src[6], *(float64x2_t *)(__dst + 264)));
      if (a3.n128_f64[0] <= 0.000001)
      {
        a3.n128_u64[0] = a3.n128_u64[1];
        if (a3.n128_f64[1] <= 0.000001)
          return a3.n128_f64[0];
      }
    }
    memmove(__dst + 168, __src, 0x70uLL);
    v12 = *((double *)__dst + 11) + *((double *)__dst + 9) * 0.0 + *((double *)__dst + 10) * 0.0;
    v13 = *((double *)__dst + 13) * 0.0 + *((double *)__dst + 14);
    v14 = sqrt(v12 * v12 + v13 * v13);
    v15 = (*(double *)__dst + *((double *)__dst + 4)) * 0.5;
    sub_20EB29790(__src->f64, v33, v15 * 0.95, v15 * 1.05, v14);
LABEL_38:
    v27 = v33[5];
    *(_OWORD *)(__dst + 344) = v33[4];
    *(_OWORD *)(__dst + 360) = v27;
    *(_OWORD *)(__dst + 376) = v33[6];
    v28 = v33[1];
    *(_OWORD *)(__dst + 280) = v33[0];
    *(_OWORD *)(__dst + 296) = v28;
    v29 = v33[3];
    *(_OWORD *)(__dst + 312) = v33[2];
    *(_OWORD *)(__dst + 328) = v29;
    goto LABEL_27;
  }
  if (v5 <= 9)
  {
    v6 = *__src;
    v7 = __src[1];
    v8 = __src[2];
    *((_QWORD *)__dst + 27) = *(_QWORD *)&__src[3].f64[0];
    *(float64x2_t *)(__dst + 200) = v8;
    *(float64x2_t *)(__dst + 184) = v7;
    *(float64x2_t *)(__dst + 168) = v6;
    __dst[492] = 0;
LABEL_27:
    a3 = (__n128)vdupq_n_s64(0x7FF8000000000000uLL);
    *((__n128 *)__dst + 9) = a3;
    __dst[160] = 0;
    return a3.n128_f64[0];
  }
  if (v5 == 10)
  {
    sub_20F6187C4(&v31, __dst);
    return a3.n128_f64[0];
  }
  v19 = (int8x16_t)vabsq_f64(vsubq_f64(*(float64x2_t *)(__dst + 168), *__src));
  v20 = (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v20, (float64x2_t)vextq_s8(v19, v19, 8uLL)), (int32x4_t)vcgeq_f64(v20, vabsq_f64(vsubq_f64(*(float64x2_t *)(__dst + 184), __src[1])))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v20, vabsq_f64(vsubq_f64(*(float64x2_t *)(__dst + 200), __src[2]))), (int32x4_t)vcgeq_f64(v20,
                                                                                                 vabsq_f64(vsubq_f64(*(float64x2_t *)(__dst + 216), __src[3])))))))) & 1) != 0|| (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_21030C960, (int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v20, vabsq_f64(vsubq_f64(*(float64x2_t *)(__dst + 232), __src[4]))), (int32x4_t)vcgeq_f64(v20, vabsq_f64(vsubq_f64(*(float64x2_t *)(__dst + 248), __src[5])))))) & 0xF) != 0|| (a3 = (__n128)vabsq_f64(vsubq_f64(*(float64x2_t *)(__dst + 264), __src[6])), a3.n128_f64[0] > 0.000001)|| (a3.n128_u64[0] = a3.n128_u64[1], a3.n128_f64[1] > 0.000001))
  {
    memmove(__dst + 168, __src, 0x70uLL);
    v21 = *((_QWORD *)__dst + 83);
    v22 = *(unsigned int *)(v21 + 104);
    if ((_DWORD)v22 == -1)
      sub_20E877AB8();
    v23 = (*(double *)__dst + *((double *)__dst + 4)) * 0.5;
    v24 = v23 * 1.05;
    v25 = v23 * 0.95;
    *(_QWORD *)&v33[0] = &v32;
    v26 = ((double (*)(_OWORD *, uint64_t))off_24C9C4FE8[v22])(v33, v21 + 88);
    sub_20EB25A6C(__src->f64, v33, v25, v24, v26 * 57.2957795);
    goto LABEL_38;
  }
  return a3.n128_f64[0];
}

float64x2_t **sub_20F6187C4(float64x2_t **result, char *__dst)
{
  float64x2_t *v3;
  double *v4;
  int8x16_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  __double2 v17;
  double v24;
  double v25;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  float64x2_t v40;

  v3 = *result;
  v4 = (double *)(__dst + 168);
  v5 = (int8x16_t)vabsq_f64(vsubq_f64(*(float64x2_t *)(__dst + 168), **result));
  v6 = (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v6, (float64x2_t)vextq_s8(v5, v5, 8uLL)), (int32x4_t)vcgeq_f64(v6, vabsq_f64(vsubq_f64(*(float64x2_t *)(__dst + 184), (*result)[1])))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v6, vabsq_f64(vsubq_f64(*(float64x2_t *)(__dst + 200), (*result)[2]))), (int32x4_t)vcgeq_f64(v6,
                                                                                                 vabsq_f64(vsubq_f64(*(float64x2_t *)(__dst + 216), (*result)[3])))))))) & 1) != 0|| (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_21030C960, (int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v6, vabsq_f64(vsubq_f64(*(float64x2_t *)(__dst + 232), v3[4]))), (int32x4_t)vcgeq_f64(v6, vabsq_f64(vsubq_f64(*(float64x2_t *)(__dst + 248), v3[5])))))) & 0xF) != 0|| (v7 = vabsq_f64(vsubq_f64(*(float64x2_t *)(__dst + 264), v3[6])), v7.f64[0] > 0.000001)|| v7.f64[1] > 0.000001)
  {
    memmove(__dst + 168, v3, 0x70uLL);
    v8 = *((float64x2_t *)__dst + 1);
    v9 = vmulq_f64(v8, v8).f64[0];
    v10 = *((double *)__dst + 4);
    v8.f64[1] = *((float64_t *)__dst + 5);
    v11 = 1.0 / sqrt(v9 + v8.f64[1] * v8.f64[1]);
    v31 = vaddq_f64(v8, v8);
    v32 = v8;
    v12 = *(double *)__dst;
    v13 = -1.0;
    v14 = 0.0;
    v15 = 0.0;
    while (1)
    {
      v16 = v15;
      v17 = __sincos_stret(v15);
      v33 = vmulq_n_f64(v32, v11 * v17.__sinval);
      *(double *)&v34 = v17.__cosval;
      if (!sub_20EB24288(&v40, (uint64_t)&v33, v4, (v10 + v12) * 0.5))
        break;
      _V1.D[1] = v40.f64[1];
      _D2 = v40.f64[1];
      __asm { FMLA            D0, D2, V1.D[1] }
      if (_D0 <= v13)
        break;
      v12 = *(double *)__dst;
      v24 = *((double *)__dst + 2) + *(double *)__dst * v40.f64[0] + vmuld_lane_f64(*((double *)__dst + 1), v40, 1);
      v10 = *((double *)__dst + 4);
      if (v24 < 0.0)
        goto LABEL_20;
      v25 = vmuld_lane_f64(v10, v40, 1) + *((double *)__dst + 5);
      _NF = v25 >= 0.0 && v24 < v31.f64[0];
      if (!_NF || v25 >= v31.f64[1])
        goto LABEL_20;
      v15 = v16 + 0.01;
      v14 = v16;
      v13 = _D0;
      if (v16 + 0.01 >= 3.14159265)
        goto LABEL_21;
    }
    v12 = *(double *)__dst;
    v10 = *((double *)__dst + 4);
LABEL_20:
    v16 = v14;
LABEL_21:
    result = (float64x2_t **)sub_20EB25A6C(v3->f64, &v33, (v10 + v12) * 0.5 * 0.95, (v10 + v12) * 0.5 * 1.05, v16 * 57.2957795);
    v28 = v38;
    *(_OWORD *)(__dst + 344) = v37;
    *(_OWORD *)(__dst + 360) = v28;
    *(_OWORD *)(__dst + 376) = v39;
    v29 = v34;
    *(float64x2_t *)(__dst + 280) = v33;
    *(_OWORD *)(__dst + 296) = v29;
    v30 = v36;
    *(_OWORD *)(__dst + 312) = v35;
    *(_OWORD *)(__dst + 328) = v30;
    *((int64x2_t *)__dst + 9) = vdupq_n_s64(0x7FF8000000000000uLL);
    __dst[160] = 0;
  }
  return result;
}

float64x2_t **sub_20F618A9C(float64x2_t **result, char *__dst)
{
  float64x2_t *v3;
  double *v4;
  int8x16_t v5;
  float64x2_t v6;
  float64x2_t v7;
  int v8;
  float64x2_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  __double2 v19;
  double v25;
  double v26;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  float64x2_t v52;

  v3 = *result;
  v4 = (double *)(__dst + 168);
  v5 = (int8x16_t)vabdq_f64(*(float64x2_t *)(__dst + 168), **result);
  v6 = (float64x2_t)vextq_s8(v5, v5, 8uLL);
  v7 = (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
  if ((vmaxvq_u8((uint8x16_t)vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v7, v6), (int32x4_t)vcgeq_f64(v7, vabdq_f64(*(float64x2_t *)(__dst + 184), (*result)[1]))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v7, vabdq_f64(*(float64x2_t *)(__dst + 200), (*result)[2])), (int32x4_t)vcgeq_f64(v7, vabdq_f64(*(float64x2_t *)(__dst + 216), (*result)[3]))))),
                                vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v7, vabdq_f64(*(float64x2_t *)(__dst + 232), (*result)[4])), (int32x4_t)vcgeq_f64(v7, vabdq_f64(*(float64x2_t *)(__dst + 248), (*result)[5]))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v7, vabdq_f64(*(float64x2_t *)(__dst + 264), (*result)[6])), (int32x4_t)vcgeq_f64(v7,
                                                                                vabdq_f64(*(float64x2_t *)(__dst + 280), (*result)[7]))))))) & 1) != 0|| ((v8 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_21030C960, (int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v7, vabdq_f64(*(float64x2_t *)(__dst + 360), v3[12])), (int32x4_t)vcgeq_f64(v7, vabdq_f64(*(float64x2_t *)(__dst + 376), v3[13]))))) & 0xF, !vaddvq_s16((int16x8_t)vbicq_s8((int8x16_t)xmmword_210315570, (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v7, vabdq_f64(*(float64x2_t *)(__dst + 296),
                                                                                            v3[8])),
                                                                             (int32x4_t)vcgeq_f64(v7, vabdq_f64(*(float64x2_t *)(__dst + 312), v3[9]))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v7, vabdq_f64(*(float64x2_t *)(__dst + 328), v3[10])), (int32x4_t)vcgeq_f64(v7, vabdq_f64(*(float64x2_t *)(__dst + 344), v3[11])))))))? (_ZF = v8 == 0): (_ZF = 0), !_ZF))
  {
    memmove(__dst + 168, v3, 0xE0uLL);
    v10 = *((float64x2_t *)__dst + 1);
    v11 = vmulq_f64(v10, v10).f64[0];
    v12 = *((double *)__dst + 4);
    v10.f64[1] = *((float64_t *)__dst + 5);
    v13 = 1.0 / sqrt(v11 + v10.f64[1] * v10.f64[1]);
    v36 = vaddq_f64(v10, v10);
    v37 = v10;
    v14 = *(double *)__dst;
    v15 = -1.0;
    v16 = 0.0;
    v17 = 0.0;
    while (1)
    {
      v18 = v17;
      v19 = __sincos_stret(v17);
      v38 = vmulq_n_f64(v37, v13 * v19.__sinval);
      *(double *)&v39 = v19.__cosval;
      if (!sub_20EB247C0(&v52, (uint64_t)&v38, v4, (v12 + v14) * 0.5))
        break;
      _V1.D[1] = v52.f64[1];
      _D2 = v52.f64[1];
      __asm { FMLA            D0, D2, V1.D[1] }
      if (_D0 <= v15)
        break;
      v14 = *(double *)__dst;
      v25 = *((double *)__dst + 2) + *(double *)__dst * v52.f64[0] + vmuld_lane_f64(*((double *)__dst + 1), v52, 1);
      v12 = *((double *)__dst + 4);
      if (v25 < 0.0)
        goto LABEL_21;
      v26 = vmuld_lane_f64(v12, v52, 1) + *((double *)__dst + 5);
      _NF = v26 >= 0.0 && v25 < v36.f64[0];
      if (!_NF || v26 >= v36.f64[1])
        goto LABEL_21;
      v17 = v18 + 0.01;
      v16 = v18;
      v15 = _D0;
      if (v18 + 0.01 >= 3.14159265)
        goto LABEL_22;
    }
    v14 = *(double *)__dst;
    v12 = *((double *)__dst + 4);
LABEL_21:
    v18 = v16;
LABEL_22:
    result = (float64x2_t **)sub_20EB265D8(v3->f64, &v38, (v12 + v14) * 0.5 * 0.95, (v12 + v14) * 0.5 * 1.05, v18 * 57.2957795);
    v29 = v49;
    *(_OWORD *)(__dst + 552) = v48;
    *(_OWORD *)(__dst + 568) = v29;
    v30 = v51;
    *(_OWORD *)(__dst + 584) = v50;
    *(_OWORD *)(__dst + 600) = v30;
    v31 = v45;
    *(_OWORD *)(__dst + 488) = v44;
    *(_OWORD *)(__dst + 504) = v31;
    v32 = v47;
    *(_OWORD *)(__dst + 520) = v46;
    *(_OWORD *)(__dst + 536) = v32;
    v33 = v41;
    *(_OWORD *)(__dst + 424) = v40;
    *(_OWORD *)(__dst + 440) = v33;
    v34 = v43;
    *(_OWORD *)(__dst + 456) = v42;
    *(_OWORD *)(__dst + 472) = v34;
    v35 = v39;
    *(float64x2_t *)(__dst + 392) = v38;
    *(_OWORD *)(__dst + 408) = v35;
    *((int64x2_t *)__dst + 9) = vdupq_n_s64(0x7FF8000000000000uLL);
    __dst[160] = 0;
  }
  return result;
}

__n128 sub_20F618DF0(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  __n128 *v48;
  __n128 *v49;

  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = *(_DWORD *)(a2 + 52);
    v6 = 4 * v3;
    do
    {
      v7 = *(_QWORD *)a2 + 8 * v5;
      v8 = *a3 + 8 * *(unsigned int *)(*a1 + v4);
      result = *(__n128 *)(v7 + 32);
      v10 = *(_OWORD *)v7;
      *(_OWORD *)(v8 + 16) = *(_OWORD *)(v7 + 16);
      *(__n128 *)(v8 + 32) = result;
      *(_OWORD *)v8 = v10;
      v4 += 4;
      v5 += 6;
    }
    while (v6 != v4);
  }
  v11 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = *(_DWORD *)(a2 + 56);
    v14 = 4 * v11;
    do
    {
      v15 = *(_QWORD *)a2 + 8 * v13;
      v16 = *a3 + 8 * *(unsigned int *)(a1[3] + v12);
      result.n128_u64[0] = *(_QWORD *)(v15 + 64);
      v17 = *(_OWORD *)(v15 + 48);
      v18 = *(_OWORD *)v15;
      v19 = *(_OWORD *)(v15 + 16);
      *(_OWORD *)(v16 + 32) = *(_OWORD *)(v15 + 32);
      *(_OWORD *)(v16 + 48) = v17;
      *(_QWORD *)(v16 + 64) = result.n128_u64[0];
      *(_OWORD *)v16 = v18;
      *(_OWORD *)(v16 + 16) = v19;
      v12 += 4;
      v13 += 9;
    }
    while (v14 != v12);
  }
  v20 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v20)
  {
    v21 = 0;
    v22 = *(_DWORD *)(a2 + 60);
    do
    {
      result.n128_u64[0] = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v22 + v21));
      *(_QWORD *)(*a3 + 8 * *(unsigned int *)(a1[6] + 4 * v21++)) = result.n128_u64[0];
    }
    while (v20 != v21);
  }
  v23 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v23)
  {
    v24 = 0;
    v25 = *(_DWORD *)(a2 + 64);
    v26 = 4 * v23;
    do
    {
      v27 = *(_QWORD *)a2 + 8 * v25;
      v28 = *a3 + 8 * *(unsigned int *)(a1[9] + v24);
      result = *(__n128 *)(v27 + 32);
      v29 = *(_OWORD *)v27;
      *(_OWORD *)(v28 + 16) = *(_OWORD *)(v27 + 16);
      *(__n128 *)(v28 + 32) = result;
      *(_OWORD *)v28 = v29;
      v24 += 4;
      v25 += 6;
    }
    while (v26 != v24);
  }
  v30 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v30)
  {
    v31 = 0;
    v32 = *(_DWORD *)(a2 + 68);
    v33 = 4 * v30;
    do
    {
      v34 = *(_QWORD *)a2 + 8 * (v32 + v31);
      v35 = (_OWORD *)(*a3 + 8 * *(unsigned int *)(a1[12] + v31));
      result = *(__n128 *)v34;
      v36 = *(_OWORD *)(v34 + 16);
      *v35 = *(_OWORD *)v34;
      v35[1] = v36;
      v31 += 4;
    }
    while (v33 != v31);
  }
  v37 = *(unsigned int *)(a2 + 44);
  if ((_DWORD)v37)
  {
    v38 = 0;
    v39 = *(_DWORD *)(a2 + 72);
    v40 = 4 * v37;
    do
    {
      v41 = *(_QWORD *)a2 + 8 * (v39 + v38);
      v42 = (_OWORD *)(*a3 + 8 * *(unsigned int *)(a1[15] + v38));
      result = *(__n128 *)v41;
      v43 = *(_OWORD *)(v41 + 16);
      *v42 = *(_OWORD *)v41;
      v42[1] = v43;
      v38 += 4;
    }
    while (v40 != v38);
  }
  v44 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v44)
  {
    v45 = 0;
    v46 = *(_DWORD *)(a2 + 76);
    v47 = 4 * v44;
    do
    {
      v48 = (__n128 *)(*(_QWORD *)a2 + 8 * v46);
      v49 = (__n128 *)(*a3 + 8 * *(unsigned int *)(a1[18] + v45));
      result = *v48;
      v49[1].n128_u64[0] = v48[1].n128_u64[0];
      *v49 = result;
      v45 += 4;
      v46 += 3;
    }
    while (v47 != v45);
  }
  return result;
}

char *sub_20F618FEC(char **a1, __int128 *a2, uint64_t a3)
{
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 *v29;
  char *v30;
  __int128 *i;
  __int128 v32;
  char *v33;

  v6 = (__int128 *)*a1;
  v5 = (unint64_t)a1[1];
  v7 = (char *)a2 - *a1;
  v8 = v7 >> 4;
  v9 = (__int128 *)&(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (__int128 *)v5)
    {
      *v9 = *(_OWORD *)a3;
      a1[1] = (char *)(v9 + 1);
    }
    else
    {
      v11 = v9 + 1;
      v12 = (__int128 *)(v5 - 16);
      v13 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          v14 = *v12++;
          *(_OWORD *)v13 = v14;
          v13 += 16;
        }
        while ((unint64_t)v12 < v5);
      }
      a1[1] = v13;
      if ((_OWORD *)v5 != v11)
      {
        v15 = (uint64_t)(v5 - (_QWORD)v11) >> 4;
        v16 = (_QWORD *)(v5 - 8);
        v17 = v15;
        do
        {
          *((_DWORD *)v16 - 2) = v9[v17 - 1];
          *v16 = *((_QWORD *)&v9[v17 - 1] + 1);
          v16 -= 2;
          --v17;
        }
        while (v17 * 16);
      }
      *(_DWORD *)v9 = *(_DWORD *)a3;
      *((_QWORD *)&v6[v8] + 1) = *(_QWORD *)(a3 + 8);
    }
    return (char *)v9;
  }
  v18 = ((uint64_t)(v5 - (_QWORD)v6) >> 4) + 1;
  if (v18 >> 60)
    sub_20E867F44();
  v20 = v10 - (_QWORD)v6;
  if (v20 >> 3 > v18)
    v18 = v20 >> 3;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
    v21 = 0xFFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 60)
      sub_20E877A38();
    v22 = (char *)operator new(16 * v21);
    v23 = &v22[16 * v8];
    v24 = &v22[16 * v21];
    if (v8 != v21)
      goto LABEL_31;
    goto LABEL_21;
  }
  v22 = 0;
  v23 = (char *)(16 * v8);
  v24 = 0;
  if (!v8)
  {
LABEL_21:
    if (v7 < 1)
    {
      if (v6 == a2)
        v26 = 1;
      else
        v26 = v7 >> 3;
      if (v26 >> 60)
        sub_20E877A38();
      v23 = (char *)operator new(16 * v26);
      v24 = &v23[16 * v26];
      if (v22)
      {
        operator delete(v22);
        v24 = &v23[16 * v26];
        v6 = (__int128 *)*a1;
      }
    }
    else
    {
      v25 = v8 + 2;
      if (v8 >= -1)
        v25 = v8 + 1;
      v23 -= 16 * (v25 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)v23 = *(_OWORD *)a3;
  v27 = v23 + 16;
  v28 = v23;
  if (v6 != v9)
  {
    v29 = v9;
    v30 = v23;
    do
    {
      v28 = v30 - 16;
      *((_OWORD *)v30 - 1) = *--v29;
      v30 -= 16;
    }
    while (v29 != v6);
  }
  for (i = (__int128 *)a1[1]; v9 != i; v27 += 16)
  {
    v32 = *v9++;
    *(_OWORD *)v27 = v32;
  }
  v33 = *a1;
  *a1 = v28;
  a1[1] = v27;
  a1[2] = v24;
  if (v33)
    operator delete(v33);
  return v23;
}

void sub_20F61923C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F619254(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  char **v9;
  void *v10;
  _QWORD *v11;
  uint64_t (*v12)(_QWORD);
  char *v13;
  void *v14;

  v2 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 48) != v2)
  {
    result = *(_QWORD *)(v2 - 8);
    *(_QWORD *)(a1 + 56) = v2 - 8;
    return result;
  }
  v4 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5 < 8 << (v4 - 1))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1));
      *(_QWORD *)(a1 + 40) = v5 + 1;
      return v6 + 56 * v5;
    }
    v7 = 56 * (16 << (v4 - 1));
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (char **)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
      goto LABEL_9;
  }
  else
  {
    v7 = 448;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (char **)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
    {
LABEL_9:
      v10 = malloc_type_aligned_alloc(8uLL, v7, 0x8BB35E2BuLL);
      v14 = v10;
      v11 = *(_QWORD **)(a1 + 16);
      if ((unint64_t)v11 >= *(_QWORD *)(a1 + 24))
      {
        v13 = sub_20F619394(v9, &v14);
      }
      else
      {
        v12 = MEMORY[0x24BDAE450];
        *v11 = v10;
        v11[1] = v12;
        v13 = (char *)(v11 + 2);
      }
      *(_QWORD *)(a1 + 16) = v13;
      v4 = *(unsigned int *)(a1 + 32);
      v8 = *(_QWORD *)(a1 + 8);
    }
  }
  *(_DWORD *)(a1 + 32) = v4 + 1;
  *(_QWORD *)(a1 + 40) = 1;
  return *(_QWORD *)(v8 + 16 * v4);
}

char *sub_20F619394(char **a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  double *v20;
  const double *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  float64x2x2_t v28;

  v4 = *a1;
  v3 = a1[1];
  v5 = v3 - *a1;
  v6 = (v5 >> 4) + 1;
  if (v6 >> 60)
    sub_20E867F44();
  v8 = a1[2] - v4;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 60)
      sub_20E877A38();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * (v5 >> 4)];
  v12 = MEMORY[0x24BDAE450];
  v13 = &v10[16 * v9];
  *(_QWORD *)v11 = *a2;
  *((_QWORD *)v11 + 1) = v12;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    v15 = v3 - v4 - 16;
    if (v15 < 0x90
      || &v3[-(v15 & 0xFFFFFFFFFFFFFFF0) - 16] < v11 && &v10[v5 - (v15 & 0xFFFFFFFFFFFFFFF0) - 16] < v3)
    {
      goto LABEL_18;
    }
    v16 = (v15 >> 4) + 1;
    v17 = 16 * (v16 & 0x1FFFFFFFFFFFFFFELL);
    v18 = &v11[-v17];
    v19 = &v3[-v17];
    v20 = (double *)(v11 - 32);
    v21 = (const double *)(v3 - 32);
    v22 = v16 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v28 = vld2q_f64(v21);
      v21[2] = 0.0;
      *v21 = 0.0;
      v21 -= 4;
      vst2q_f64(v20, v28);
      v20 -= 4;
      v22 -= 2;
    }
    while (v22);
    v11 = v18;
    v3 = v19;
    if (v16 != (v16 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      v18 = v11;
      do
      {
        v23 = *((_QWORD *)v3 - 2);
        v3 -= 16;
        *(_QWORD *)v3 = 0;
        *((_QWORD *)v18 - 2) = v23;
        v18 -= 16;
        *((_QWORD *)v18 + 1) = *((_QWORD *)v3 + 1);
      }
      while (v3 != v4);
    }
    v3 = *a1;
    v24 = a1[1];
    *a1 = v18;
    a1[1] = v14;
    a1[2] = v13;
    if (v24 != v3)
    {
      v25 = v24;
      do
      {
        v26 = *((_QWORD *)v25 - 2);
        v25 -= 16;
        *(_QWORD *)v25 = 0;
        if (v26)
          (*((void (**)(void))v24 - 1))();
        v24 = v25;
      }
      while (v25 != v3);
    }
  }
  if (v3)
    operator delete(v3);
  return v14;
}

char *sub_20F619554(char **a1, __int128 *a2, int *a3)
{
  char *result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE *v19;
  _BYTE *v20;
  int64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35;

  result = a1[1];
  if (result == (char *)a2 || *a3 != *(_DWORD *)a2)
  {
    v7 = sub_20F6199FC((uint64_t)(a1 + 3));
    v8 = *((_QWORD *)a3 + 1);
    *(_DWORD *)(v7 + 8) = a3[4];
    *(_QWORD *)v7 = v8;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a3 + 3);
    *(_QWORD *)(v7 + 24) = *((_QWORD *)a3 + 4);
    v9 = *(_OWORD *)(a3 + 62);
    v10 = *(_OWORD *)(a3 + 58);
    v11 = *(_OWORD *)(a3 + 54);
    *(_OWORD *)(v7 + 192) = *(_OWORD *)(a3 + 50);
    *(_OWORD *)(v7 + 208) = v11;
    *(_OWORD *)(v7 + 224) = v10;
    *(_OWORD *)(v7 + 240) = v9;
    v12 = *(_OWORD *)(a3 + 46);
    v13 = *(_OWORD *)(a3 + 42);
    v14 = *(_OWORD *)(a3 + 38);
    *(_OWORD *)(v7 + 128) = *(_OWORD *)(a3 + 34);
    *(_OWORD *)(v7 + 144) = v14;
    *(_OWORD *)(v7 + 160) = v13;
    *(_OWORD *)(v7 + 176) = v12;
    v15 = *(_OWORD *)(a3 + 30);
    v16 = *(_OWORD *)(a3 + 26);
    v17 = *(_OWORD *)(a3 + 22);
    *(_OWORD *)(v7 + 64) = *(_OWORD *)(a3 + 18);
    *(_OWORD *)(v7 + 80) = v17;
    *(_OWORD *)(v7 + 96) = v16;
    *(_OWORD *)(v7 + 112) = v15;
    v18 = *(_OWORD *)(a3 + 14);
    *(_OWORD *)(v7 + 32) = *(_OWORD *)(a3 + 10);
    *(_OWORD *)(v7 + 48) = v18;
    *(_QWORD *)(v7 + 264) = 0;
    *(_QWORD *)(v7 + 272) = 0;
    *(_QWORD *)(v7 + 256) = 0;
    v20 = (_BYTE *)*((_QWORD *)a3 + 33);
    v19 = (_BYTE *)*((_QWORD *)a3 + 34);
    v21 = v19 - v20;
    if (v19 != v20)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v21 >> 3) >= 0xAAAAAAAAAAAAAABLL)
        sub_20E867F44();
      v22 = (char *)operator new(v21);
      *(_QWORD *)(v7 + 256) = v22;
      *(_QWORD *)(v7 + 264) = v22;
      v23 = &v22[8 * (v21 >> 3)];
      *(_QWORD *)(v7 + 272) = v23;
      memcpy(v22, v20, v21);
      *(_QWORD *)(v7 + 264) = v23;
    }
    sub_20F619B3C(v7 + 280, (uint64_t)(a3 + 72));
    *(_BYTE *)(v7 + 320) = *((_BYTE *)a3 + 328);
    v24 = *((_OWORD *)a3 + 22);
    *(_OWORD *)(v7 + 328) = *((_OWORD *)a3 + 21);
    *(_OWORD *)(v7 + 344) = v24;
    v25 = *((_OWORD *)a3 + 23);
    v26 = *((_OWORD *)a3 + 24);
    v27 = *((_OWORD *)a3 + 26);
    *(_OWORD *)(v7 + 392) = *((_OWORD *)a3 + 25);
    *(_OWORD *)(v7 + 408) = v27;
    *(_OWORD *)(v7 + 360) = v25;
    *(_OWORD *)(v7 + 376) = v26;
    v28 = *((_OWORD *)a3 + 27);
    v29 = *((_OWORD *)a3 + 28);
    v30 = *((_OWORD *)a3 + 30);
    *(_OWORD *)(v7 + 456) = *((_OWORD *)a3 + 29);
    *(_OWORD *)(v7 + 472) = v30;
    *(_OWORD *)(v7 + 424) = v28;
    *(_OWORD *)(v7 + 440) = v29;
    v31 = *((_OWORD *)a3 + 31);
    v32 = *((_OWORD *)a3 + 32);
    v33 = *((_OWORD *)a3 + 34);
    *(_OWORD *)(v7 + 520) = *((_OWORD *)a3 + 33);
    *(_OWORD *)(v7 + 536) = v33;
    *(_OWORD *)(v7 + 488) = v31;
    *(_OWORD *)(v7 + 504) = v32;
    v34 = *a3;
    v35 = v7;
    return sub_20F619794(a1, a2, (uint64_t)&v34);
  }
  return result;
}

void sub_20F61971C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 264) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20F61973C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = (_QWORD *)a1[38];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[36];
  a1[36] = 0;
  if (v4)
    operator delete(v4);
  v5 = (void *)a1[33];
  if (v5)
  {
    a1[34] = v5;
    operator delete(v5);
  }
  return a1;
}

char *sub_20F619794(char **a1, __int128 *a2, uint64_t a3)
{
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 *v29;
  char *v30;
  __int128 *i;
  __int128 v32;
  char *v33;

  v6 = (__int128 *)*a1;
  v5 = (unint64_t)a1[1];
  v7 = (char *)a2 - *a1;
  v8 = v7 >> 4;
  v9 = (__int128 *)&(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (__int128 *)v5)
    {
      *v9 = *(_OWORD *)a3;
      a1[1] = (char *)(v9 + 1);
    }
    else
    {
      v11 = v9 + 1;
      v12 = (__int128 *)(v5 - 16);
      v13 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          v14 = *v12++;
          *(_OWORD *)v13 = v14;
          v13 += 16;
        }
        while ((unint64_t)v12 < v5);
      }
      a1[1] = v13;
      if ((_OWORD *)v5 != v11)
      {
        v15 = (uint64_t)(v5 - (_QWORD)v11) >> 4;
        v16 = (_QWORD *)(v5 - 8);
        v17 = v15;
        do
        {
          *((_DWORD *)v16 - 2) = v9[v17 - 1];
          *v16 = *((_QWORD *)&v9[v17 - 1] + 1);
          v16 -= 2;
          --v17;
        }
        while (v17 * 16);
      }
      *(_DWORD *)v9 = *(_DWORD *)a3;
      *((_QWORD *)&v6[v8] + 1) = *(_QWORD *)(a3 + 8);
    }
    return (char *)v9;
  }
  v18 = ((uint64_t)(v5 - (_QWORD)v6) >> 4) + 1;
  if (v18 >> 60)
    sub_20E867F44();
  v20 = v10 - (_QWORD)v6;
  if (v20 >> 3 > v18)
    v18 = v20 >> 3;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
    v21 = 0xFFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 60)
      sub_20E877A38();
    v22 = (char *)operator new(16 * v21);
    v23 = &v22[16 * v8];
    v24 = &v22[16 * v21];
    if (v8 != v21)
      goto LABEL_31;
    goto LABEL_21;
  }
  v22 = 0;
  v23 = (char *)(16 * v8);
  v24 = 0;
  if (!v8)
  {
LABEL_21:
    if (v7 < 1)
    {
      if (v6 == a2)
        v26 = 1;
      else
        v26 = v7 >> 3;
      if (v26 >> 60)
        sub_20E877A38();
      v23 = (char *)operator new(16 * v26);
      v24 = &v23[16 * v26];
      if (v22)
      {
        operator delete(v22);
        v24 = &v23[16 * v26];
        v6 = (__int128 *)*a1;
      }
    }
    else
    {
      v25 = v8 + 2;
      if (v8 >= -1)
        v25 = v8 + 1;
      v23 -= 16 * (v25 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)v23 = *(_OWORD *)a3;
  v27 = v23 + 16;
  v28 = v23;
  if (v6 != v9)
  {
    v29 = v9;
    v30 = v23;
    do
    {
      v28 = v30 - 16;
      *((_OWORD *)v30 - 1) = *--v29;
      v30 -= 16;
    }
    while (v29 != v6);
  }
  for (i = (__int128 *)a1[1]; v9 != i; v27 += 16)
  {
    v32 = *v9++;
    *(_OWORD *)v27 = v32;
  }
  v33 = *a1;
  *a1 = v28;
  a1[1] = v27;
  a1[2] = v24;
  if (v33)
    operator delete(v33);
  return v23;
}

void sub_20F6199E4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F6199FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  char **v9;
  void *v10;
  _QWORD *v11;
  uint64_t (*v12)(_QWORD);
  char *v13;
  void *v14;

  v2 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 48) != v2)
  {
    result = *(_QWORD *)(v2 - 8);
    *(_QWORD *)(a1 + 56) = v2 - 8;
    return result;
  }
  v4 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5 < 8 << (v4 - 1))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1));
      *(_QWORD *)(a1 + 40) = v5 + 1;
      return v6 + 552 * v5;
    }
    v7 = 552 * (16 << (v4 - 1));
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (char **)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
      goto LABEL_9;
  }
  else
  {
    v7 = 4416;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (char **)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
    {
LABEL_9:
      v10 = malloc_type_aligned_alloc(8uLL, v7, 0x8BB35E2BuLL);
      v14 = v10;
      v11 = *(_QWORD **)(a1 + 16);
      if ((unint64_t)v11 >= *(_QWORD *)(a1 + 24))
      {
        v13 = sub_20F619FC0(v9, &v14);
      }
      else
      {
        v12 = MEMORY[0x24BDAE450];
        *v11 = v10;
        v11[1] = v12;
        v13 = (char *)(v11 + 2);
      }
      *(_QWORD *)(a1 + 16) = v13;
      v4 = *(unsigned int *)(a1 + 32);
      v8 = *(_QWORD *)(a1 + 8);
    }
  }
  *(_DWORD *)(a1 + 32) = v4 + 1;
  *(_QWORD *)(a1 + 40) = 1;
  return *(_QWORD *)(v8 + 16 * v4);
}

uint64_t sub_20F619B3C(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_20E8D2B3C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_20F619C7C(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_20F619C54(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

void sub_20F619C68(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F619C7C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;

  v6 = *((_DWORD *)a2 + 4);
  v7 = *((_DWORD *)a2 + 2);
  v8 = v7 ^ __ROR4__(v6, 13);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v9 <= v8)
        v3 = v8 % v9;
    }
    else
    {
      v3 = ((_DWORD)v9 - 1) & v8;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        v13 = *a2;
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v12[1];
            if (v15 == v8)
            {
              if (*((_DWORD *)v12 + 8) == v6 && v12[2] == v13 && *((_DWORD *)v12 + 6) == v7)
                return v12;
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_27;
            }
            v12 = (uint64_t *)*v12;
            if (!v12)
              goto LABEL_27;
          }
        }
        do
        {
          v14 = v12[1];
          if (v14 == v8)
          {
            if (*((_DWORD *)v12 + 8) == v6 && v12[2] == v13 && *((_DWORD *)v12 + 6) == v7)
              return v12;
          }
          else
          {
            if (v14 >= v9)
              v14 %= v9;
            if (v14 != v3)
              break;
          }
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_27:
  v17 = operator new(0x38uLL);
  *v17 = 0;
  v17[1] = v8;
  v18 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v17 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v17 + 2) = v18;
  v17[6] = *(_QWORD *)(a3 + 32);
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v9 && (float)(v20 * (float)v9) >= v19)
  {
    v8 = v3;
  }
  else
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_40;
    if (prime < v9)
    {
      v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (prime <= v25)
        prime = v25;
      if (prime < v9)
LABEL_40:
        sub_20E8D2B3C(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v8 %= v9;
    }
    else
    {
      v8 = ((_DWORD)v9 - 1) & v8;
    }
  }
  v28 = *(_QWORD *)a1;
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v29)
  {
    *v17 = *v29;
LABEL_63:
    *v29 = v17;
    goto LABEL_64;
  }
  *v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(v28 + 8 * v8) = a1 + 16;
  if (*v17)
  {
    v30 = *(_QWORD *)(*v17 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v30 >= v9)
        v30 %= v9;
    }
    else
    {
      v30 &= v9 - 1;
    }
    v29 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_63;
  }
LABEL_64:
  ++*(_QWORD *)(a1 + 24);
  return v17;
}

void sub_20F619FAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_20F619FC0(char **a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  double *v20;
  const double *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  float64x2x2_t v28;

  v4 = *a1;
  v3 = a1[1];
  v5 = v3 - *a1;
  v6 = (v5 >> 4) + 1;
  if (v6 >> 60)
    sub_20E867F44();
  v8 = a1[2] - v4;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 60)
      sub_20E877A38();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * (v5 >> 4)];
  v12 = MEMORY[0x24BDAE450];
  v13 = &v10[16 * v9];
  *(_QWORD *)v11 = *a2;
  *((_QWORD *)v11 + 1) = v12;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    v15 = v3 - v4 - 16;
    if (v15 < 0x90
      || &v3[-(v15 & 0xFFFFFFFFFFFFFFF0) - 16] < v11 && &v10[v5 - (v15 & 0xFFFFFFFFFFFFFFF0) - 16] < v3)
    {
      goto LABEL_18;
    }
    v16 = (v15 >> 4) + 1;
    v17 = 16 * (v16 & 0x1FFFFFFFFFFFFFFELL);
    v18 = &v11[-v17];
    v19 = &v3[-v17];
    v20 = (double *)(v11 - 32);
    v21 = (const double *)(v3 - 32);
    v22 = v16 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v28 = vld2q_f64(v21);
      v21[2] = 0.0;
      *v21 = 0.0;
      v21 -= 4;
      vst2q_f64(v20, v28);
      v20 -= 4;
      v22 -= 2;
    }
    while (v22);
    v11 = v18;
    v3 = v19;
    if (v16 != (v16 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      v18 = v11;
      do
      {
        v23 = *((_QWORD *)v3 - 2);
        v3 -= 16;
        *(_QWORD *)v3 = 0;
        *((_QWORD *)v18 - 2) = v23;
        v18 -= 16;
        *((_QWORD *)v18 + 1) = *((_QWORD *)v3 + 1);
      }
      while (v3 != v4);
    }
    v3 = *a1;
    v24 = a1[1];
    *a1 = v18;
    a1[1] = v14;
    a1[2] = v13;
    if (v24 != v3)
    {
      v25 = v24;
      do
      {
        v26 = *((_QWORD *)v25 - 2);
        v25 -= 16;
        *(_QWORD *)v25 = 0;
        if (v26)
          (*((void (**)(void))v24 - 1))();
        v24 = v25;
      }
      while (v25 != v3);
    }
  }
  if (v3)
    operator delete(v3);
  return v14;
}

uint64_t *sub_20F61A180(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;

  v6 = *((_DWORD *)a2 + 4);
  v7 = *((_DWORD *)a2 + 2);
  v8 = v7 ^ __ROR4__(v6, 13);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v9 <= v8)
        v3 = v8 % v9;
    }
    else
    {
      v3 = ((_DWORD)v9 - 1) & v8;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        v13 = *a2;
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v12[1];
            if (v15 == v8)
            {
              if (*((_DWORD *)v12 + 8) == v6 && v12[2] == v13 && *((_DWORD *)v12 + 6) == v7)
                return v12;
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_27;
            }
            v12 = (uint64_t *)*v12;
            if (!v12)
              goto LABEL_27;
          }
        }
        do
        {
          v14 = v12[1];
          if (v14 == v8)
          {
            if (*((_DWORD *)v12 + 8) == v6 && v12[2] == v13 && *((_DWORD *)v12 + 6) == v7)
              return v12;
          }
          else
          {
            if (v14 >= v9)
              v14 %= v9;
            if (v14 != v3)
              break;
          }
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_27:
  v17 = operator new(0x38uLL);
  *v17 = 0;
  v17[1] = v8;
  v18 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v17 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v17 + 2) = v18;
  v17[6] = *(_QWORD *)(a3 + 32);
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v9 && (float)(v20 * (float)v9) >= v19)
  {
    v8 = v3;
  }
  else
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_40;
    if (prime < v9)
    {
      v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (prime <= v25)
        prime = v25;
      if (prime < v9)
LABEL_40:
        sub_20E8D2B3C(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v8 %= v9;
    }
    else
    {
      v8 = ((_DWORD)v9 - 1) & v8;
    }
  }
  v28 = *(_QWORD *)a1;
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v29)
  {
    *v17 = *v29;
LABEL_63:
    *v29 = v17;
    goto LABEL_64;
  }
  *v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(v28 + 8 * v8) = a1 + 16;
  if (*v17)
  {
    v30 = *(_QWORD *)(*v17 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v30 >= v9)
        v30 %= v9;
    }
    else
    {
      v30 &= v9 - 1;
    }
    v29 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_63;
  }
LABEL_64:
  ++*(_QWORD *)(a1 + 24);
  return v17;
}

void sub_20F61A4B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_20F61A4C4(char **a1, __int128 *a2, int *a3)
{
  char *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;

  result = a1[1];
  if (result == (char *)a2 || *a3 != *(_DWORD *)a2)
  {
    v7 = sub_20F61A924((uint64_t)(a1 + 3));
    v8 = *((_QWORD *)a3 + 1);
    *(_DWORD *)(v7 + 8) = a3[4];
    *(_QWORD *)v7 = v8;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a3 + 3);
    *(_QWORD *)(v7 + 24) = *((_QWORD *)a3 + 4);
    v9 = *((_QWORD *)a3 + 13);
    v10 = *(_OWORD *)(a3 + 22);
    v11 = *(_OWORD *)(a3 + 18);
    *(_OWORD *)(v7 + 48) = *(_OWORD *)(a3 + 14);
    *(_OWORD *)(v7 + 64) = v11;
    *(_OWORD *)(v7 + 80) = v10;
    *(_QWORD *)(v7 + 96) = v9;
    v12 = *(_OWORD *)(a3 + 10);
    *(_QWORD *)(v7 + 104) = 0;
    *(_OWORD *)(v7 + 32) = v12;
    *(_QWORD *)(v7 + 112) = 0;
    *(_QWORD *)(v7 + 120) = 0;
    v14 = (_BYTE *)*((_QWORD *)a3 + 14);
    v13 = (_BYTE *)*((_QWORD *)a3 + 15);
    v15 = v13 - v14;
    if (v13 != v14)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v15 >> 3) >= 0xAAAAAAAAAAAAAABLL)
        sub_20E867F44();
      v16 = (char *)operator new(v15);
      *(_QWORD *)(v7 + 104) = v16;
      *(_QWORD *)(v7 + 112) = v16;
      v17 = &v16[8 * (v15 >> 3)];
      *(_QWORD *)(v7 + 120) = v17;
      memcpy(v16, v14, v15);
      *(_QWORD *)(v7 + 112) = v17;
    }
    sub_20F619B3C(v7 + 128, (uint64_t)(a3 + 34));
    *(_BYTE *)(v7 + 168) = *((_BYTE *)a3 + 176);
    *(_OWORD *)(v7 + 176) = *(_OWORD *)(a3 + 46);
    v18 = *(_OWORD *)(a3 + 50);
    v19 = *(_OWORD *)(a3 + 54);
    v20 = *(_OWORD *)(a3 + 58);
    *(_QWORD *)(v7 + 240) = *((_QWORD *)a3 + 31);
    *(_OWORD *)(v7 + 208) = v19;
    *(_OWORD *)(v7 + 224) = v20;
    *(_OWORD *)(v7 + 192) = v18;
    v21 = *a3;
    v22 = v7;
    return sub_20F61A6BC(a1, a2, (uint64_t)&v21);
  }
  return result;
}

void sub_20F61A644(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 112) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20F61A664(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = (_QWORD *)a1[19];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[17];
  a1[17] = 0;
  if (v4)
    operator delete(v4);
  v5 = (void *)a1[14];
  if (v5)
  {
    a1[15] = v5;
    operator delete(v5);
  }
  return a1;
}

char *sub_20F61A6BC(char **a1, __int128 *a2, uint64_t a3)
{
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 *v29;
  char *v30;
  __int128 *i;
  __int128 v32;
  char *v33;

  v6 = (__int128 *)*a1;
  v5 = (unint64_t)a1[1];
  v7 = (char *)a2 - *a1;
  v8 = v7 >> 4;
  v9 = (__int128 *)&(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (__int128 *)v5)
    {
      *v9 = *(_OWORD *)a3;
      a1[1] = (char *)(v9 + 1);
    }
    else
    {
      v11 = v9 + 1;
      v12 = (__int128 *)(v5 - 16);
      v13 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          v14 = *v12++;
          *(_OWORD *)v13 = v14;
          v13 += 16;
        }
        while ((unint64_t)v12 < v5);
      }
      a1[1] = v13;
      if ((_OWORD *)v5 != v11)
      {
        v15 = (uint64_t)(v5 - (_QWORD)v11) >> 4;
        v16 = (_QWORD *)(v5 - 8);
        v17 = v15;
        do
        {
          *((_DWORD *)v16 - 2) = v9[v17 - 1];
          *v16 = *((_QWORD *)&v9[v17 - 1] + 1);
          v16 -= 2;
          --v17;
        }
        while (v17 * 16);
      }
      *(_DWORD *)v9 = *(_DWORD *)a3;
      *((_QWORD *)&v6[v8] + 1) = *(_QWORD *)(a3 + 8);
    }
    return (char *)v9;
  }
  v18 = ((uint64_t)(v5 - (_QWORD)v6) >> 4) + 1;
  if (v18 >> 60)
    sub_20E867F44();
  v20 = v10 - (_QWORD)v6;
  if (v20 >> 3 > v18)
    v18 = v20 >> 3;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
    v21 = 0xFFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 60)
      sub_20E877A38();
    v22 = (char *)operator new(16 * v21);
    v23 = &v22[16 * v8];
    v24 = &v22[16 * v21];
    if (v8 != v21)
      goto LABEL_31;
    goto LABEL_21;
  }
  v22 = 0;
  v23 = (char *)(16 * v8);
  v24 = 0;
  if (!v8)
  {
LABEL_21:
    if (v7 < 1)
    {
      if (v6 == a2)
        v26 = 1;
      else
        v26 = v7 >> 3;
      if (v26 >> 60)
        sub_20E877A38();
      v23 = (char *)operator new(16 * v26);
      v24 = &v23[16 * v26];
      if (v22)
      {
        operator delete(v22);
        v24 = &v23[16 * v26];
        v6 = (__int128 *)*a1;
      }
    }
    else
    {
      v25 = v8 + 2;
      if (v8 >= -1)
        v25 = v8 + 1;
      v23 -= 16 * (v25 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)v23 = *(_OWORD *)a3;
  v27 = v23 + 16;
  v28 = v23;
  if (v6 != v9)
  {
    v29 = v9;
    v30 = v23;
    do
    {
      v28 = v30 - 16;
      *((_OWORD *)v30 - 1) = *--v29;
      v30 -= 16;
    }
    while (v29 != v6);
  }
  for (i = (__int128 *)a1[1]; v9 != i; v27 += 16)
  {
    v32 = *v9++;
    *(_OWORD *)v27 = v32;
  }
  v33 = *a1;
  *a1 = v28;
  a1[1] = v27;
  a1[2] = v24;
  if (v33)
    operator delete(v33);
  return v23;
}

void sub_20F61A90C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F61A924(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  char **v9;
  void *v10;
  _QWORD *v11;
  uint64_t (*v12)(_QWORD);
  char *v13;
  void *v14;

  v2 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 48) != v2)
  {
    result = *(_QWORD *)(v2 - 8);
    *(_QWORD *)(a1 + 56) = v2 - 8;
    return result;
  }
  v4 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5 < 8 << (v4 - 1))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1));
      *(_QWORD *)(a1 + 40) = v5 + 1;
      return v6 + 248 * v5;
    }
    v7 = 248 * (16 << (v4 - 1));
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (char **)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
      goto LABEL_9;
  }
  else
  {
    v7 = 1984;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (char **)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
    {
LABEL_9:
      v10 = malloc_type_aligned_alloc(8uLL, v7, 0x8BB35E2BuLL);
      v14 = v10;
      v11 = *(_QWORD **)(a1 + 16);
      if ((unint64_t)v11 >= *(_QWORD *)(a1 + 24))
      {
        v13 = sub_20F61AA64(v9, &v14);
      }
      else
      {
        v12 = MEMORY[0x24BDAE450];
        *v11 = v10;
        v11[1] = v12;
        v13 = (char *)(v11 + 2);
      }
      *(_QWORD *)(a1 + 16) = v13;
      v4 = *(unsigned int *)(a1 + 32);
      v8 = *(_QWORD *)(a1 + 8);
    }
  }
  *(_DWORD *)(a1 + 32) = v4 + 1;
  *(_QWORD *)(a1 + 40) = 1;
  return *(_QWORD *)(v8 + 16 * v4);
}

char *sub_20F61AA64(char **a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  double *v20;
  const double *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  float64x2x2_t v28;

  v4 = *a1;
  v3 = a1[1];
  v5 = v3 - *a1;
  v6 = (v5 >> 4) + 1;
  if (v6 >> 60)
    sub_20E867F44();
  v8 = a1[2] - v4;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 60)
      sub_20E877A38();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * (v5 >> 4)];
  v12 = MEMORY[0x24BDAE450];
  v13 = &v10[16 * v9];
  *(_QWORD *)v11 = *a2;
  *((_QWORD *)v11 + 1) = v12;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    v15 = v3 - v4 - 16;
    if (v15 < 0x90
      || &v3[-(v15 & 0xFFFFFFFFFFFFFFF0) - 16] < v11 && &v10[v5 - (v15 & 0xFFFFFFFFFFFFFFF0) - 16] < v3)
    {
      goto LABEL_18;
    }
    v16 = (v15 >> 4) + 1;
    v17 = 16 * (v16 & 0x1FFFFFFFFFFFFFFELL);
    v18 = &v11[-v17];
    v19 = &v3[-v17];
    v20 = (double *)(v11 - 32);
    v21 = (const double *)(v3 - 32);
    v22 = v16 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v28 = vld2q_f64(v21);
      v21[2] = 0.0;
      *v21 = 0.0;
      v21 -= 4;
      vst2q_f64(v20, v28);
      v20 -= 4;
      v22 -= 2;
    }
    while (v22);
    v11 = v18;
    v3 = v19;
    if (v16 != (v16 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      v18 = v11;
      do
      {
        v23 = *((_QWORD *)v3 - 2);
        v3 -= 16;
        *(_QWORD *)v3 = 0;
        *((_QWORD *)v18 - 2) = v23;
        v18 -= 16;
        *((_QWORD *)v18 + 1) = *((_QWORD *)v3 + 1);
      }
      while (v3 != v4);
    }
    v3 = *a1;
    v24 = a1[1];
    *a1 = v18;
    a1[1] = v14;
    a1[2] = v13;
    if (v24 != v3)
    {
      v25 = v24;
      do
      {
        v26 = *((_QWORD *)v25 - 2);
        v25 -= 16;
        *(_QWORD *)v25 = 0;
        if (v26)
          (*((void (**)(void))v24 - 1))();
        v24 = v25;
      }
      while (v25 != v3);
    }
  }
  if (v3)
    operator delete(v3);
  return v14;
}

uint64_t sub_20F61AC24(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  __int128 *v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  __int128 *v8;
  __int128 *v9;
  unsigned int v10;
  int v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  unsigned int *v24;
  char *v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  _BYTE v38[28];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = *(__int128 **)(a1 + 680);
  v5 = *(__int128 **)(a1 + 688);
  if (v5 == v4)
  {
    v4 = *(__int128 **)(a1 + 688);
  }
  else
  {
    v6 = v5 - v4;
    do
    {
      v7 = v6 >> 1;
      v8 = &v4[v6 >> 1];
      v10 = *(_DWORD *)v8;
      v9 = v8 + 1;
      v6 += ~(v6 >> 1);
      if (v10 < v3)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
    if (v5 != v4 && v3 == *(_DWORD *)v4)
      return 0;
  }
  v12 = *((unsigned __int8 *)a2 + 4);
  *(_OWORD *)&v38[4] = *(_OWORD *)a2;
  *(_QWORD *)&v38[20] = *((_QWORD *)a2 + 2);
  v13 = v12 == 0;
  v14 = sub_20F398160(a1 + 704);
  *(_DWORD *)v14 = -1;
  *(_BYTE *)(v14 + 4) = 1;
  *(_DWORD *)(v14 + 8) = 0;
  *(_OWORD *)(v14 + 12) = *(_OWORD *)v38;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)&v38[12];
  v36 = v3;
  v37 = v14;
  sub_20F397EF8((char **)(a1 + 680), v4, (uint64_t)&v36);
  if (!v13)
  {
    v15 = *(char **)(a1 + 1544);
    v16 = *(_QWORD *)(a1 + 1552);
    if ((unint64_t)v15 < v16)
    {
      *(_DWORD *)v15 = v3;
      v17 = (uint64_t)(v15 + 4);
LABEL_34:
      *(_QWORD *)(a1 + 1544) = v17;
      goto LABEL_35;
    }
    v18 = *(char **)(a1 + 1536);
    v19 = (v15 - v18) >> 2;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 62)
      sub_20E867F44();
    v21 = v16 - (_QWORD)v18;
    if (v21 >> 1 > v20)
      v20 = v21 >> 1;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
      v22 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 62)
        sub_20E877A38();
      v23 = operator new(4 * v22);
      v24 = (unsigned int *)&v23[4 * v19];
      v25 = &v23[4 * v22];
      *v24 = v3;
      v17 = (uint64_t)(v24 + 1);
      v26 = v15 - v18;
      if (v15 == v18)
        goto LABEL_32;
    }
    else
    {
      v23 = 0;
      v24 = (unsigned int *)(4 * v19);
      v25 = 0;
      *(_DWORD *)(4 * v19) = v3;
      v17 = 4 * v19 + 4;
      v26 = v15 - v18;
      if (v15 == v18)
      {
LABEL_32:
        *(_QWORD *)(a1 + 1536) = v24;
        *(_QWORD *)(a1 + 1544) = v17;
        *(_QWORD *)(a1 + 1552) = v25;
        if (v18)
          operator delete(v18);
        goto LABEL_34;
      }
    }
    v27 = v26 - 4;
    if (v27 < 0x2C)
      goto LABEL_41;
    if ((unint64_t)(v18 - v23) < 0x20)
      goto LABEL_41;
    v28 = (v27 >> 2) + 1;
    v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
    v30 = &v15[-v29];
    v24 = (unsigned int *)((char *)v24 - v29);
    v31 = &v23[4 * v19 - 16];
    v32 = v15 - 16;
    v33 = v28 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      *v31 = v34;
      v31 -= 2;
      v32 -= 32;
      v33 -= 8;
    }
    while (v33);
    v15 = v30;
    if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_41:
      do
      {
        v35 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *--v24 = v35;
      }
      while (v15 != v18);
    }
    goto LABEL_32;
  }
LABEL_35:
  *(_BYTE *)(a1 + 978) = 0;
  *(_BYTE *)(a1 + 976) = 0;
  return 1;
}

char *sub_20F61AEB4(char **a1, __int128 *a2, uint64_t a3)
{
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 *v29;
  char *v30;
  __int128 *i;
  __int128 v32;
  char *v33;

  v6 = (__int128 *)*a1;
  v5 = (unint64_t)a1[1];
  v7 = (char *)a2 - *a1;
  v8 = v7 >> 4;
  v9 = (__int128 *)&(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (__int128 *)v5)
    {
      *v9 = *(_OWORD *)a3;
      a1[1] = (char *)(v9 + 1);
    }
    else
    {
      v11 = v9 + 1;
      v12 = (__int128 *)(v5 - 16);
      v13 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          v14 = *v12++;
          *(_OWORD *)v13 = v14;
          v13 += 16;
        }
        while ((unint64_t)v12 < v5);
      }
      a1[1] = v13;
      if ((_OWORD *)v5 != v11)
      {
        v15 = (uint64_t)(v5 - (_QWORD)v11) >> 4;
        v16 = (_QWORD *)(v5 - 8);
        v17 = v15;
        do
        {
          *((_DWORD *)v16 - 2) = v9[v17 - 1];
          *v16 = *((_QWORD *)&v9[v17 - 1] + 1);
          v16 -= 2;
          --v17;
        }
        while (v17 * 16);
      }
      *(_DWORD *)v9 = *(_DWORD *)a3;
      *((_QWORD *)&v6[v8] + 1) = *(_QWORD *)(a3 + 8);
    }
    return (char *)v9;
  }
  v18 = ((uint64_t)(v5 - (_QWORD)v6) >> 4) + 1;
  if (v18 >> 60)
    sub_20E867F44();
  v20 = v10 - (_QWORD)v6;
  if (v20 >> 3 > v18)
    v18 = v20 >> 3;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
    v21 = 0xFFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 60)
      sub_20E877A38();
    v22 = (char *)operator new(16 * v21);
    v23 = &v22[16 * v8];
    v24 = &v22[16 * v21];
    if (v8 != v21)
      goto LABEL_31;
    goto LABEL_21;
  }
  v22 = 0;
  v23 = (char *)(16 * v8);
  v24 = 0;
  if (!v8)
  {
LABEL_21:
    if (v7 < 1)
    {
      if (v6 == a2)
        v26 = 1;
      else
        v26 = v7 >> 3;
      if (v26 >> 60)
        sub_20E877A38();
      v23 = (char *)operator new(16 * v26);
      v24 = &v23[16 * v26];
      if (v22)
      {
        operator delete(v22);
        v24 = &v23[16 * v26];
        v6 = (__int128 *)*a1;
      }
    }
    else
    {
      v25 = v8 + 2;
      if (v8 >= -1)
        v25 = v8 + 1;
      v23 -= 16 * (v25 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)v23 = *(_OWORD *)a3;
  v27 = v23 + 16;
  v28 = v23;
  if (v6 != v9)
  {
    v29 = v9;
    v30 = v23;
    do
    {
      v28 = v30 - 16;
      *((_OWORD *)v30 - 1) = *--v29;
      v30 -= 16;
    }
    while (v29 != v6);
  }
  for (i = (__int128 *)a1[1]; v9 != i; v27 += 16)
  {
    v32 = *v9++;
    *(_OWORD *)v27 = v32;
  }
  v33 = *a1;
  *a1 = v28;
  a1[1] = v27;
  a1[2] = v24;
  if (v33)
    operator delete(v33);
  return v23;
}

void sub_20F61B104(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F61B11C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  char **v9;
  void *v10;
  _QWORD *v11;
  uint64_t (*v12)(_QWORD);
  char *v13;
  void *v14;

  v2 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 48) != v2)
  {
    result = *(_QWORD *)(v2 - 8);
    *(_QWORD *)(a1 + 56) = v2 - 8;
    return result;
  }
  v4 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5 < 8 << (v4 - 1))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1));
      *(_QWORD *)(a1 + 40) = v5 + 1;
      return v6 + 232 * v5;
    }
    v7 = 232 * (16 << (v4 - 1));
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (char **)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
      goto LABEL_9;
  }
  else
  {
    v7 = 1856;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (char **)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
    {
LABEL_9:
      v10 = malloc_type_aligned_alloc(8uLL, v7, 0x8BB35E2BuLL);
      v14 = v10;
      v11 = *(_QWORD **)(a1 + 16);
      if ((unint64_t)v11 >= *(_QWORD *)(a1 + 24))
      {
        v13 = sub_20F61B25C(v9, &v14);
      }
      else
      {
        v12 = MEMORY[0x24BDAE450];
        *v11 = v10;
        v11[1] = v12;
        v13 = (char *)(v11 + 2);
      }
      *(_QWORD *)(a1 + 16) = v13;
      v4 = *(unsigned int *)(a1 + 32);
      v8 = *(_QWORD *)(a1 + 8);
    }
  }
  *(_DWORD *)(a1 + 32) = v4 + 1;
  *(_QWORD *)(a1 + 40) = 1;
  return *(_QWORD *)(v8 + 16 * v4);
}

char *sub_20F61B25C(char **a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  double *v20;
  const double *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  float64x2x2_t v28;

  v4 = *a1;
  v3 = a1[1];
  v5 = v3 - *a1;
  v6 = (v5 >> 4) + 1;
  if (v6 >> 60)
    sub_20E867F44();
  v8 = a1[2] - v4;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 60)
      sub_20E877A38();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * (v5 >> 4)];
  v12 = MEMORY[0x24BDAE450];
  v13 = &v10[16 * v9];
  *(_QWORD *)v11 = *a2;
  *((_QWORD *)v11 + 1) = v12;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    v15 = v3 - v4 - 16;
    if (v15 < 0x90
      || &v3[-(v15 & 0xFFFFFFFFFFFFFFF0) - 16] < v11 && &v10[v5 - (v15 & 0xFFFFFFFFFFFFFFF0) - 16] < v3)
    {
      goto LABEL_18;
    }
    v16 = (v15 >> 4) + 1;
    v17 = 16 * (v16 & 0x1FFFFFFFFFFFFFFELL);
    v18 = &v11[-v17];
    v19 = &v3[-v17];
    v20 = (double *)(v11 - 32);
    v21 = (const double *)(v3 - 32);
    v22 = v16 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v28 = vld2q_f64(v21);
      v21[2] = 0.0;
      *v21 = 0.0;
      v21 -= 4;
      vst2q_f64(v20, v28);
      v20 -= 4;
      v22 -= 2;
    }
    while (v22);
    v11 = v18;
    v3 = v19;
    if (v16 != (v16 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      v18 = v11;
      do
      {
        v23 = *((_QWORD *)v3 - 2);
        v3 -= 16;
        *(_QWORD *)v3 = 0;
        *((_QWORD *)v18 - 2) = v23;
        v18 -= 16;
        *((_QWORD *)v18 + 1) = *((_QWORD *)v3 + 1);
      }
      while (v3 != v4);
    }
    v3 = *a1;
    v24 = a1[1];
    *a1 = v18;
    a1[1] = v14;
    a1[2] = v13;
    if (v24 != v3)
    {
      v25 = v24;
      do
      {
        v26 = *((_QWORD *)v25 - 2);
        v25 -= 16;
        *(_QWORD *)v25 = 0;
        if (v26)
          (*((void (**)(void))v24 - 1))();
        v24 = v25;
      }
      while (v25 != v3);
    }
  }
  if (v3)
    operator delete(v3);
  return v14;
}

char *sub_20F61B41C(char **a1, __int128 *a2, int *a3)
{
  char *result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  int v17;
  uint64_t v18;

  result = a1[1];
  if (result == (char *)a2 || *a3 != *(_DWORD *)a2)
  {
    v7 = sub_20F61B804((uint64_t)(a1 + 3));
    v8 = *((_QWORD *)a3 + 1);
    *(_DWORD *)(v7 + 8) = a3[4];
    *(_QWORD *)v7 = v8;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a3 + 3);
    *(_QWORD *)(v7 + 24) = *((_QWORD *)a3 + 4);
    v9 = *(_OWORD *)(a3 + 14);
    *(_OWORD *)(v7 + 32) = *(_OWORD *)(a3 + 10);
    *(_OWORD *)(v7 + 48) = v9;
    v10 = *(_OWORD *)(a3 + 18);
    *(_QWORD *)(v7 + 80) = 0;
    *(_OWORD *)(v7 + 64) = v10;
    *(_QWORD *)(v7 + 88) = 0;
    *(_QWORD *)(v7 + 96) = 0;
    v12 = (_BYTE *)*((_QWORD *)a3 + 11);
    v11 = (_BYTE *)*((_QWORD *)a3 + 12);
    v13 = v11 - v12;
    if (v11 != v12)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v13 >> 3) >= 0xAAAAAAAAAAAAAABLL)
        sub_20E867F44();
      v14 = (char *)operator new(v13);
      *(_QWORD *)(v7 + 80) = v14;
      *(_QWORD *)(v7 + 88) = v14;
      v15 = &v14[8 * (v13 >> 3)];
      *(_QWORD *)(v7 + 96) = v15;
      memcpy(v14, v12, v13);
      *(_QWORD *)(v7 + 88) = v15;
    }
    sub_20F619B3C(v7 + 104, (uint64_t)(a3 + 28));
    *(_WORD *)(v7 + 144) = *((_WORD *)a3 + 76);
    v16 = *((_OWORD *)a3 + 10);
    *(_OWORD *)(v7 + 168) = *((_OWORD *)a3 + 11);
    *(_OWORD *)(v7 + 152) = v16;
    *(_OWORD *)(v7 + 184) = *((_OWORD *)a3 + 12);
    v17 = *a3;
    v18 = v7;
    return sub_20F61B59C(a1, a2, (uint64_t)&v17);
  }
  return result;
}

void sub_20F61B57C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 88) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20F61B59C(char **a1, __int128 *a2, uint64_t a3)
{
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 *v29;
  char *v30;
  __int128 *i;
  __int128 v32;
  char *v33;

  v6 = (__int128 *)*a1;
  v5 = (unint64_t)a1[1];
  v7 = (char *)a2 - *a1;
  v8 = v7 >> 4;
  v9 = (__int128 *)&(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (__int128 *)v5)
    {
      *v9 = *(_OWORD *)a3;
      a1[1] = (char *)(v9 + 1);
    }
    else
    {
      v11 = v9 + 1;
      v12 = (__int128 *)(v5 - 16);
      v13 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          v14 = *v12++;
          *(_OWORD *)v13 = v14;
          v13 += 16;
        }
        while ((unint64_t)v12 < v5);
      }
      a1[1] = v13;
      if ((_OWORD *)v5 != v11)
      {
        v15 = (uint64_t)(v5 - (_QWORD)v11) >> 4;
        v16 = (_QWORD *)(v5 - 8);
        v17 = v15;
        do
        {
          *((_DWORD *)v16 - 2) = v9[v17 - 1];
          *v16 = *((_QWORD *)&v9[v17 - 1] + 1);
          v16 -= 2;
          --v17;
        }
        while (v17 * 16);
      }
      *(_DWORD *)v9 = *(_DWORD *)a3;
      *((_QWORD *)&v6[v8] + 1) = *(_QWORD *)(a3 + 8);
    }
    return (char *)v9;
  }
  v18 = ((uint64_t)(v5 - (_QWORD)v6) >> 4) + 1;
  if (v18 >> 60)
    sub_20E867F44();
  v20 = v10 - (_QWORD)v6;
  if (v20 >> 3 > v18)
    v18 = v20 >> 3;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
    v21 = 0xFFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 60)
      sub_20E877A38();
    v22 = (char *)operator new(16 * v21);
    v23 = &v22[16 * v8];
    v24 = &v22[16 * v21];
    if (v8 != v21)
      goto LABEL_31;
    goto LABEL_21;
  }
  v22 = 0;
  v23 = (char *)(16 * v8);
  v24 = 0;
  if (!v8)
  {
LABEL_21:
    if (v7 < 1)
    {
      if (v6 == a2)
        v26 = 1;
      else
        v26 = v7 >> 3;
      if (v26 >> 60)
        sub_20E877A38();
      v23 = (char *)operator new(16 * v26);
      v24 = &v23[16 * v26];
      if (v22)
      {
        operator delete(v22);
        v24 = &v23[16 * v26];
        v6 = (__int128 *)*a1;
      }
    }
    else
    {
      v25 = v8 + 2;
      if (v8 >= -1)
        v25 = v8 + 1;
      v23 -= 16 * (v25 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)v23 = *(_OWORD *)a3;
  v27 = v23 + 16;
  v28 = v23;
  if (v6 != v9)
  {
    v29 = v9;
    v30 = v23;
    do
    {
      v28 = v30 - 16;
      *((_OWORD *)v30 - 1) = *--v29;
      v30 -= 16;
    }
    while (v29 != v6);
  }
  for (i = (__int128 *)a1[1]; v9 != i; v27 += 16)
  {
    v32 = *v9++;
    *(_OWORD *)v27 = v32;
  }
  v33 = *a1;
  *a1 = v28;
  a1[1] = v27;
  a1[2] = v24;
  if (v33)
    operator delete(v33);
  return v23;
}

void sub_20F61B7EC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F61B804(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  char **v9;
  void *v10;
  _QWORD *v11;
  uint64_t (*v12)(_QWORD);
  char *v13;
  void *v14;

  v2 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 48) != v2)
  {
    result = *(_QWORD *)(v2 - 8);
    *(_QWORD *)(a1 + 56) = v2 - 8;
    return result;
  }
  v4 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5 < 8 << (v4 - 1))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1));
      *(_QWORD *)(a1 + 40) = v5 + 1;
      return v6 + 200 * v5;
    }
    v7 = 200 * (16 << (v4 - 1));
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (char **)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
      goto LABEL_9;
  }
  else
  {
    v7 = 1600;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (char **)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
    {
LABEL_9:
      v10 = malloc_type_aligned_alloc(8uLL, v7, 0x8BB35E2BuLL);
      v14 = v10;
      v11 = *(_QWORD **)(a1 + 16);
      if ((unint64_t)v11 >= *(_QWORD *)(a1 + 24))
      {
        v13 = sub_20F61B944(v9, &v14);
      }
      else
      {
        v12 = MEMORY[0x24BDAE450];
        *v11 = v10;
        v11[1] = v12;
        v13 = (char *)(v11 + 2);
      }
      *(_QWORD *)(a1 + 16) = v13;
      v4 = *(unsigned int *)(a1 + 32);
      v8 = *(_QWORD *)(a1 + 8);
    }
  }
  *(_DWORD *)(a1 + 32) = v4 + 1;
  *(_QWORD *)(a1 + 40) = 1;
  return *(_QWORD *)(v8 + 16 * v4);
}

char *sub_20F61B944(char **a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  double *v20;
  const double *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  float64x2x2_t v28;

  v4 = *a1;
  v3 = a1[1];
  v5 = v3 - *a1;
  v6 = (v5 >> 4) + 1;
  if (v6 >> 60)
    sub_20E867F44();
  v8 = a1[2] - v4;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 60)
      sub_20E877A38();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * (v5 >> 4)];
  v12 = MEMORY[0x24BDAE450];
  v13 = &v10[16 * v9];
  *(_QWORD *)v11 = *a2;
  *((_QWORD *)v11 + 1) = v12;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    v15 = v3 - v4 - 16;
    if (v15 < 0x90
      || &v3[-(v15 & 0xFFFFFFFFFFFFFFF0) - 16] < v11 && &v10[v5 - (v15 & 0xFFFFFFFFFFFFFFF0) - 16] < v3)
    {
      goto LABEL_18;
    }
    v16 = (v15 >> 4) + 1;
    v17 = 16 * (v16 & 0x1FFFFFFFFFFFFFFELL);
    v18 = &v11[-v17];
    v19 = &v3[-v17];
    v20 = (double *)(v11 - 32);
    v21 = (const double *)(v3 - 32);
    v22 = v16 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v28 = vld2q_f64(v21);
      v21[2] = 0.0;
      *v21 = 0.0;
      v21 -= 4;
      vst2q_f64(v20, v28);
      v20 -= 4;
      v22 -= 2;
    }
    while (v22);
    v11 = v18;
    v3 = v19;
    if (v16 != (v16 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      v18 = v11;
      do
      {
        v23 = *((_QWORD *)v3 - 2);
        v3 -= 16;
        *(_QWORD *)v3 = 0;
        *((_QWORD *)v18 - 2) = v23;
        v18 -= 16;
        *((_QWORD *)v18 + 1) = *((_QWORD *)v3 + 1);
      }
      while (v3 != v4);
    }
    v3 = *a1;
    v24 = a1[1];
    *a1 = v18;
    a1[1] = v14;
    a1[2] = v13;
    if (v24 != v3)
    {
      v25 = v24;
      do
      {
        v26 = *((_QWORD *)v25 - 2);
        v25 -= 16;
        *(_QWORD *)v25 = 0;
        if (v26)
          (*((void (**)(void))v24 - 1))();
        v24 = v25;
      }
      while (v25 != v3);
    }
  }
  if (v3)
    operator delete(v3);
  return v14;
}

char *sub_20F61BB04(char **a1, __int128 *a2, uint64_t a3)
{
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 *v29;
  char *v30;
  __int128 *i;
  __int128 v32;
  char *v33;

  v6 = (__int128 *)*a1;
  v5 = (unint64_t)a1[1];
  v7 = (char *)a2 - *a1;
  v8 = v7 >> 4;
  v9 = (__int128 *)&(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (__int128 *)v5)
    {
      *v9 = *(_OWORD *)a3;
      a1[1] = (char *)(v9 + 1);
    }
    else
    {
      v11 = v9 + 1;
      v12 = (__int128 *)(v5 - 16);
      v13 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          v14 = *v12++;
          *(_OWORD *)v13 = v14;
          v13 += 16;
        }
        while ((unint64_t)v12 < v5);
      }
      a1[1] = v13;
      if ((_OWORD *)v5 != v11)
      {
        v15 = (uint64_t)(v5 - (_QWORD)v11) >> 4;
        v16 = (_QWORD *)(v5 - 8);
        v17 = v15;
        do
        {
          *((_DWORD *)v16 - 2) = v9[v17 - 1];
          *v16 = *((_QWORD *)&v9[v17 - 1] + 1);
          v16 -= 2;
          --v17;
        }
        while (v17 * 16);
      }
      *(_DWORD *)v9 = *(_DWORD *)a3;
      *((_QWORD *)&v6[v8] + 1) = *(_QWORD *)(a3 + 8);
    }
    return (char *)v9;
  }
  v18 = ((uint64_t)(v5 - (_QWORD)v6) >> 4) + 1;
  if (v18 >> 60)
    sub_20E867F44();
  v20 = v10 - (_QWORD)v6;
  if (v20 >> 3 > v18)
    v18 = v20 >> 3;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
    v21 = 0xFFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 60)
      sub_20E877A38();
    v22 = (char *)operator new(16 * v21);
    v23 = &v22[16 * v8];
    v24 = &v22[16 * v21];
    if (v8 != v21)
      goto LABEL_31;
    goto LABEL_21;
  }
  v22 = 0;
  v23 = (char *)(16 * v8);
  v24 = 0;
  if (!v8)
  {
LABEL_21:
    if (v7 < 1)
    {
      if (v6 == a2)
        v26 = 1;
      else
        v26 = v7 >> 3;
      if (v26 >> 60)
        sub_20E877A38();
      v23 = (char *)operator new(16 * v26);
      v24 = &v23[16 * v26];
      if (v22)
      {
        operator delete(v22);
        v24 = &v23[16 * v26];
        v6 = (__int128 *)*a1;
      }
    }
    else
    {
      v25 = v8 + 2;
      if (v8 >= -1)
        v25 = v8 + 1;
      v23 -= 16 * (v25 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)v23 = *(_OWORD *)a3;
  v27 = v23 + 16;
  v28 = v23;
  if (v6 != v9)
  {
    v29 = v9;
    v30 = v23;
    do
    {
      v28 = v30 - 16;
      *((_OWORD *)v30 - 1) = *--v29;
      v30 -= 16;
    }
    while (v29 != v6);
  }
  for (i = (__int128 *)a1[1]; v9 != i; v27 += 16)
  {
    v32 = *v9++;
    *(_OWORD *)v27 = v32;
  }
  v33 = *a1;
  *a1 = v28;
  a1[1] = v27;
  a1[2] = v24;
  if (v33)
    operator delete(v33);
  return v23;
}

