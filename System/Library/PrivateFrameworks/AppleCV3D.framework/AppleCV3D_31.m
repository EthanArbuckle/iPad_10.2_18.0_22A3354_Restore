void sub_20F463078(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20E991548(v1);
  _Unwind_Resume(a1);
}

void sub_20F463090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, void *__p, uint64_t a14)
{
  sub_20F27A8AC(&__p);
  sub_20E991548(a12);
  _Unwind_Resume(a1);
}

void sub_20F4630F0()
{
  JUMPOUT(0x20F463104);
}

void sub_20F4630F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  if (a13)
    operator delete(a13);
  sub_20E991548(a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20F463124(uint64_t a1)
{
  sub_20EACA068(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20F463158@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  void *p_p;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  size_t v35;
  _QWORD *v36;
  unint64_t v37;
  const void **v38;
  const void *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *__dst;
  uint64_t v47;
  void *__p;
  uint64_t v49;
  unsigned __int8 v50;
  _QWORD v51[2];
  _QWORD v52[3];
  const void *v53;
  unint64_t v54;
  const void *v55;
  unint64_t v56;
  void *v57;
  char v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;

  v5 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 96);
  sub_20E863438((uint64_t)v51);
  v6 = sub_20E86A980(v52, (uint64_t)"    Reloc debug: ", 17);
  v7 = sub_20E86A980(v6, (uint64_t)" query: {", 9);
  v8 = *(_DWORD *)(a1 + 16);
  v62 = *(_QWORD *)(a1 + 8);
  v63 = v8;
  sub_210216370((uint64_t)&v62);
  if ((v50 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v50 & 0x80u) == 0)
    v10 = v50;
  else
    v10 = v49;
  v11 = sub_20E86A980(v7, (uint64_t)p_p, v10);
  sub_20E86A980(v11, (uint64_t)", ", 2);
  v12 = (_QWORD *)std::ostream::operator<<();
  v13 = sub_20E86A980(v12, (uint64_t)"} ", 2);
  sub_20E86A980(v13, (uint64_t)" ref submap: ", 13);
  v14 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v14, (uint64_t)"\n", 1);
  if ((char)v50 < 0)
    operator delete(__p);
  sub_20E86A980(v52, (uint64_t)"    num clusters ", 17);
  v47 = (v4 - v5) >> 3;
  v15 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v15, (uint64_t)"\n", 1);
  __dst = a2;
  if (v4 == v5)
  {
LABEL_24:
    if ((v60 & 0x10) != 0)
    {
      v37 = v59;
      if (v59 < v56)
      {
        v59 = v56;
        v37 = v56;
      }
      v38 = &v55;
    }
    else
    {
      if ((v60 & 8) == 0)
      {
        v35 = 0;
        v36 = __dst;
        *((_BYTE *)__dst + 23) = 0;
        goto LABEL_49;
      }
      v38 = &v53;
      v37 = v54;
    }
    v36 = __dst;
    v39 = *v38;
    v35 = v37 - (_QWORD)*v38;
    if (v35 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v35 < 0x17)
      goto LABEL_43;
    v40 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v40 = v35 | 7;
LABEL_47:
    v42 = v40 + 1;
    v43 = operator new(v40 + 1);
    v36[1] = v35;
    v36[2] = v42 | 0x8000000000000000;
    *v36 = v43;
    v36 = v43;
    goto LABEL_48;
  }
  v16 = 0;
  while (*(_QWORD *)(*(_QWORD *)(a1 + 64) + 112 * v16 + 24) != *(_QWORD *)(*(_QWORD *)(a1 + 64) + 112 * v16 + 32))
  {
    sub_20E86A980(v52, (uint64_t)"    Cluster [", 13);
    v17 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v17, (uint64_t)"] 2d-3d: ", 9);
    v18 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v18, (uint64_t)" / ", 3);
    v19 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v19, (uint64_t)"\n", 1);
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 112 * v16 + 8) - *(_QWORD *)(*(_QWORD *)(a1 + 64) + 112 * v16);
    if (v20)
    {
      v21 = 0;
      v22 = 0;
      v23 = v20 / 112;
      do
      {
        v24 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 112 * v16);
        v25 = sub_20E86A980(v52, (uint64_t)"       frame: {", 15);
        v26 = *(_DWORD *)(v24 + v21 + 8);
        v62 = *(_QWORD *)(v24 + v21);
        v63 = v26;
        sub_210216370((uint64_t)&v62);
        if ((v50 & 0x80u) == 0)
          v27 = &__p;
        else
          v27 = __p;
        if ((v50 & 0x80u) == 0)
          v28 = v50;
        else
          v28 = v49;
        v29 = sub_20E86A980(v25, (uint64_t)v27, v28);
        sub_20E86A980(v29, (uint64_t)", ", 2);
        v30 = (_QWORD *)std::ostream::operator<<();
        v31 = sub_20E86A980(v30, (uint64_t)"}", 1);
        sub_20E86A980(v31, (uint64_t)" 2d-2d: ", 8);
        v32 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v32, (uint64_t)"/", 1);
        v33 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v33, (uint64_t)" 2d-3d: ", 8);
        v34 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v34, (uint64_t)"\n", 1);
        if ((char)v50 < 0)
          operator delete(__p);
        ++v22;
        v21 += 112;
      }
      while (v23 != v22);
    }
    if (++v16 == v47)
      goto LABEL_24;
  }
  v36 = __dst;
  if ((v60 & 0x10) != 0)
  {
    v41 = v59;
    if (v59 < v56)
    {
      v59 = v56;
      v41 = v56;
    }
    v39 = v55;
    v35 = v41 - (_QWORD)v55;
    if (v41 - (unint64_t)v55 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_53;
  }
  else
  {
    if ((v60 & 8) == 0)
    {
      v35 = 0;
      *((_BYTE *)__dst + 23) = 0;
      goto LABEL_49;
    }
    v39 = v53;
    v35 = v54 - (_QWORD)v53;
    if (v54 - (unint64_t)v53 > 0x7FFFFFFFFFFFFFF7)
LABEL_53:
      sub_20E860B7C();
  }
  if (v35 >= 0x17)
  {
    v40 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v40 = v35 | 7;
    goto LABEL_47;
  }
LABEL_43:
  *((_BYTE *)v36 + 23) = v35;
  if (v35)
LABEL_48:
    memmove(v36, v39, v35);
LABEL_49:
  *((_BYTE *)v36 + v35) = 0;
  v51[0] = *MEMORY[0x24BEDB7F0];
  v44 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v51 + *(_QWORD *)(v51[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v52[0] = v44;
  v52[1] = MEMORY[0x24BEDB848] + 16;
  if (v58 < 0)
    operator delete(v57);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](&v61);
}

void sub_20F463690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  sub_20E863784((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_20F4636E0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  _QWORD *i;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  _BYTE *v23;
  int64_t v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  __int128 v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  int64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  char v62;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  __int128 v71;
  __int128 v72;
  char *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  unint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  int v94;
  int v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t **v103;
  uint64_t **v104;
  uint64_t *v105;
  unsigned int v106;
  char *v107;
  uint64_t *v108;
  void *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  _QWORD *v113;
  _QWORD *v114;
  BOOL v115;
  __int128 v116;
  uint64_t *v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t *v123;
  __int128 v124;
  __int128 v125;
  unint64_t v126;
  __int128 v127;
  unint64_t v128;
  __int128 v129;
  uint64_t v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *__p[93];
  __int128 v142;
  uint64_t v143;
  _OWORD v144[2];
  _OWORD __dst[32];
  uint64_t v146;

  v146 = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t **)a1;
  v2 = *(uint64_t **)(a1 + 8);
  v128 = 0;
  v127 = 0uLL;
  if (v2 != v3)
  {
    v4 = 0xF128CFC4A33F128DLL * (v2 - v3);
    if (v4 > 0x5C0B81702E05C0)
      sub_20E92CED8();
    __p[4] = &v128;
    __p[0] = operator new(712 * v4);
    __p[1] = __p[0];
    __p[2] = __p[0];
    __p[3] = (char *)__p[0] + 712 * v4;
    sub_20E93C9B8((uint64_t *)&v127, __p);
    v6 = __p[1];
    for (i = __p[2]; __p[2] != v6; i = __p[2])
    {
      __p[2] = i - 89;
      sub_20E9385B0(i - 89);
    }
    if (__p[0])
      operator delete(__p[0]);
    v3 = *(uint64_t **)a1;
    v2 = *(uint64_t **)(a1 + 8);
  }
  if (v3 != v2)
  {
    v119 = v2;
    while (1)
    {
      v7 = v3[66];
      v123 = v3;
      v8 = v3[67];
      memset(__dst, 0, 24);
      v9 = v8 - v7;
      if (v8 != v7)
        break;
      v11 = 0;
      v23 = 0;
LABEL_35:
      sub_20FCD1F04(*v123, (uint64_t)&v129);
      memcpy(__dst, v123 + 2, sizeof(__dst));
      sub_20E9417E0((uint64_t)&__p[1], &v129);
      memcpy(&__p[22], __dst, 0x200uLL);
      memset(&__p[86], 0, 24);
      v24 = v11 - v23;
      if (v24)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v24 >> 3) > 0xAAAAAAAAAAAAAAALL)
          sub_20E92CED8();
        __p[86] = operator new(v24);
        __p[87] = __p[86];
        v25 = (char *)__p[86] + 8 * (v24 >> 3);
        __p[88] = v25;
        memcpy(__p[86], v23, v24);
        __p[87] = v25;
      }
      if (v139)
      {
        v140 = v139;
        operator delete(v139);
      }
      if (v137)
      {
        v138 = v137;
        operator delete(v137);
      }
      if (v135)
      {
        v136 = v135;
        operator delete(v135);
      }
      if (v133)
      {
        v134 = v133;
        operator delete(v133);
      }
      if (v131)
      {
        v132 = v131;
        operator delete(v131);
      }
      if (v23)
        operator delete(v23);
      v26 = *((_QWORD *)&v127 + 1);
      if (*((_QWORD *)&v127 + 1) >= v128)
      {
        v28 = 0xF47E8FD1FA3F47E9 * ((uint64_t)(*((_QWORD *)&v127 + 1) - v127) >> 3);
        v29 = v28 + 1;
        if (v28 + 1 > 0x5C0B81702E05C0)
          sub_20E92CED8();
        if (0xE8FD1FA3F47E8FD2 * ((uint64_t)(v128 - v127) >> 3) > v29)
          v29 = 0xE8FD1FA3F47E8FD2 * ((uint64_t)(v128 - v127) >> 3);
        if (0xF47E8FD1FA3F47E9 * ((uint64_t)(v128 - v127) >> 3) >= 0x2E05C0B81702E0)
          v30 = 0x5C0B81702E05C0;
        else
          v30 = v29;
        *(_QWORD *)&__dst[2] = &v128;
        if (v30 > 0x5C0B81702E05C0)
          sub_20E877A38();
        v31 = (char *)operator new(712 * v30);
        v32 = *(_OWORD *)&__p[3];
        v33 = &v31[712 * v28];
        *(_OWORD *)(v33 + 8) = *(_OWORD *)&__p[1];
        *(_QWORD *)&__dst[0] = v31;
        *((_QWORD *)&__dst[0] + 1) = v33;
        *((_QWORD *)&__dst[1] + 1) = &v31[712 * v30];
        *(_OWORD *)(v33 + 24) = v32;
        *(_OWORD *)(v33 + 40) = *(_OWORD *)&__p[5];
        *((void **)v33 + 7) = __p[7];
        memset(&__p[5], 0, 24);
        *((_QWORD *)v33 + 10) = 0;
        *((_OWORD *)v33 + 4) = *(_OWORD *)&__p[8];
        *((void **)v33 + 10) = __p[10];
        memset(&__p[8], 0, 24);
        v33[88] = (char)__p[11];
        *((_QWORD *)v33 + 13) = 0;
        *((_QWORD *)v33 + 14) = 0;
        *((_OWORD *)v33 + 6) = *(_OWORD *)&__p[12];
        *((void **)v33 + 14) = __p[14];
        memset(&__p[12], 0, 24);
        v33[120] = (char)__p[15];
        *((_QWORD *)v33 + 17) = 0;
        *((_QWORD *)v33 + 18) = 0;
        *((_OWORD *)v33 + 8) = *(_OWORD *)&__p[16];
        v34 = __p[21];
        *((void **)v33 + 18) = __p[18];
        memset(&__p[16], 0, 24);
        *((_QWORD *)v33 + 20) = 0;
        *((_QWORD *)v33 + 21) = 0;
        *(_OWORD *)(v33 + 152) = *(_OWORD *)&__p[19];
        *((_QWORD *)v33 + 21) = v34;
        memset(&__p[19], 0, 24);
        memcpy(v33 + 176, &__p[22], 0x200uLL);
        *((_OWORD *)v33 + 43) = *(_OWORD *)&__p[86];
        *((void **)v33 + 88) = __p[88];
        memset(&__p[86], 0, 24);
        *(_QWORD *)&__dst[1] = v33 + 712;
        sub_20E93C9B8((uint64_t *)&v127, __dst);
        v35 = *((_QWORD *)&v127 + 1);
        v36 = *((_QWORD *)&__dst[0] + 1);
        while (1)
        {
          v37 = *(_QWORD *)&__dst[1];
          if (*(_QWORD *)&__dst[1] == v36)
            break;
          *(_QWORD *)&__dst[1] -= 712;
          v38 = *(void **)(v37 - 24);
          if (v38)
          {
            *(_QWORD *)(v37 - 16) = v38;
            operator delete(v38);
          }
          v39 = *(void **)(v37 - 560);
          if (v39)
          {
            *(_QWORD *)(v37 - 552) = v39;
            operator delete(v39);
          }
          v40 = *(void **)(v37 - 584);
          if (v40)
          {
            *(_QWORD *)(v37 - 576) = v40;
            operator delete(v40);
          }
          v41 = *(void **)(v37 - 616);
          if (v41)
          {
            *(_QWORD *)(v37 - 608) = v41;
            operator delete(v41);
          }
          v42 = *(void **)(v37 - 648);
          if (v42)
          {
            *(_QWORD *)(v37 - 640) = v42;
            operator delete(v42);
          }
          v43 = *(void **)(v37 - 672);
          if (v43)
          {
            *(_QWORD *)(v37 - 664) = v43;
            operator delete(v43);
          }
        }
        if (*(_QWORD *)&__dst[0])
          operator delete(*(void **)&__dst[0]);
        *((_QWORD *)&v127 + 1) = v35;
        if (__p[86])
        {
          __p[87] = __p[86];
          operator delete(__p[86]);
        }
      }
      else
      {
        v27 = *(_OWORD *)&__p[1];
        *(_OWORD *)(*((_QWORD *)&v127 + 1) + 24) = *(_OWORD *)&__p[3];
        *(_OWORD *)(v26 + 8) = v27;
        *(_QWORD *)(v26 + 56) = 0;
        *(_QWORD *)(v26 + 64) = 0;
        *(_QWORD *)(v26 + 40) = 0;
        *(_QWORD *)(v26 + 48) = 0;
        *(_OWORD *)(v26 + 40) = *(_OWORD *)&__p[5];
        *(void **)(v26 + 56) = __p[7];
        memset(&__p[5], 0, 24);
        *(_QWORD *)(v26 + 72) = 0;
        *(_QWORD *)(v26 + 80) = 0;
        *(_OWORD *)(v26 + 64) = *(_OWORD *)&__p[8];
        *(void **)(v26 + 80) = __p[10];
        memset(&__p[8], 0, 24);
        *(_BYTE *)(v26 + 88) = __p[11];
        *(_QWORD *)(v26 + 96) = 0;
        *(_QWORD *)(v26 + 104) = 0;
        *(_QWORD *)(v26 + 112) = 0;
        *(_OWORD *)(v26 + 96) = *(_OWORD *)&__p[12];
        *(void **)(v26 + 112) = __p[14];
        memset(&__p[12], 0, 24);
        *(_BYTE *)(v26 + 120) = __p[15];
        *(_QWORD *)(v26 + 128) = 0;
        *(_QWORD *)(v26 + 136) = 0;
        *(_QWORD *)(v26 + 144) = 0;
        *(_QWORD *)(v26 + 152) = 0;
        *(_OWORD *)(v26 + 128) = *(_OWORD *)&__p[16];
        *(void **)(v26 + 144) = __p[18];
        memset(&__p[16], 0, 24);
        *(_QWORD *)(v26 + 160) = 0;
        *(_QWORD *)(v26 + 168) = 0;
        *(_OWORD *)(v26 + 152) = *(_OWORD *)&__p[19];
        *(void **)(v26 + 168) = __p[21];
        memset(&__p[19], 0, 24);
        memcpy((void *)(v26 + 176), &__p[22], 0x200uLL);
        *(_QWORD *)(v26 + 688) = 0;
        *(_QWORD *)(v26 + 704) = 0;
        *(_QWORD *)(v26 + 696) = 0;
        *(_OWORD *)(v26 + 688) = *(_OWORD *)&__p[86];
        *(void **)(v26 + 704) = __p[88];
        memset(&__p[86], 0, 24);
        *((_QWORD *)&v127 + 1) = v26 + 712;
      }
      if (__p[19])
      {
        __p[20] = __p[19];
        operator delete(__p[19]);
      }
      if (__p[16])
      {
        __p[17] = __p[16];
        operator delete(__p[16]);
      }
      if (__p[12])
      {
        __p[13] = __p[12];
        operator delete(__p[12]);
      }
      if (__p[8])
      {
        __p[9] = __p[8];
        operator delete(__p[8]);
      }
      if (__p[5])
      {
        __p[6] = __p[5];
        operator delete(__p[5]);
      }
      v3 = v123 + 69;
      if (v123 + 69 == v119)
        goto LABEL_87;
    }
    v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      sub_20E92CED8();
    v11 = (char *)operator new(v9);
    *(_QWORD *)&__dst[0] = v11;
    *((_QWORD *)&__dst[0] + 1) = v11;
    *(_QWORD *)&__dst[1] = &v11[24 * v10];
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v12 = *(_DWORD *)v7;
          v13 = *(_QWORD *)(v7 + 8);
          v14 = *(_DWORD *)(v7 + 16);
          if ((unint64_t)v11 >= *(_QWORD *)&__dst[1])
            break;
          *(_DWORD *)v11 = v12;
          *((_QWORD *)v11 + 1) = v13;
          *((_DWORD *)v11 + 4) = v14;
          v11 += 24;
          *((_QWORD *)&__dst[0] + 1) = v11;
          v7 += 24;
          if (v7 == v8)
            goto LABEL_33;
        }
        v15 = *(char **)&__dst[0];
        v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v11[-*(_QWORD *)&__dst[0]] >> 3);
        v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20E92CED8();
        if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&__dst[1] - *(_QWORD *)&__dst[0]) >> 3) > v17)
          v17 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&__dst[1] - *(_QWORD *)&__dst[0]) >> 3);
        v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__dst[1] - *(_QWORD *)&__dst[0]) >> 3) >= 0x555555555555555
            ? 0xAAAAAAAAAAAAAAALL
            : v17;
        if (v18)
        {
          if (v18 > 0xAAAAAAAAAAAAAAALL)
            sub_20E877A38();
          v19 = (char *)operator new(24 * v18);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[24 * v16];
        *(_DWORD *)v20 = v12;
        *((_QWORD *)v20 + 1) = v13;
        *((_DWORD *)v20 + 4) = v14;
        v21 = v20 + 24;
        if (v11 != v15)
          break;
        *(_QWORD *)&__dst[0] = &v19[24 * v16];
        *(_QWORD *)&__dst[1] = &v19[24 * v18];
        v15 = v11;
LABEL_32:
        operator delete(v15);
        v11 = v21;
        *((_QWORD *)&__dst[0] + 1) = v21;
        v7 += 24;
        if (v7 == v8)
        {
LABEL_33:
          v23 = *(_BYTE **)&__dst[0];
          goto LABEL_35;
        }
      }
      do
      {
        v22 = *(_OWORD *)(v11 - 24);
        *((_QWORD *)v20 - 1) = *((_QWORD *)v11 - 1);
        *(_OWORD *)(v20 - 24) = v22;
        v20 -= 24;
        v11 -= 24;
      }
      while (v11 != v15);
      *(_QWORD *)&__dst[0] = v20;
      *(_QWORD *)&__dst[1] = &v19[24 * v18];
      if (v15)
        goto LABEL_32;
      v11 = v21;
      *((_QWORD *)&__dst[0] + 1) = v21;
      v7 += 24;
      if (v7 == v8)
        goto LABEL_33;
    }
  }
LABEL_87:
  v125 = v127;
  v126 = v128;
  v44 = a1;
  v45 = *(uint64_t **)(a1 + 24);
  v46 = *(uint64_t **)(a1 + 32);
  memset(__dst, 0, 24);
  v47 = (char *)v46 - (char *)v45;
  if (v46 != v45)
  {
    v48 = 0xEEEEEEEEEEEEEEEFLL * (v47 >> 3);
    if (v48 > 0x222222222222222)
      sub_20E92CED8();
    v49 = (char *)operator new(v47);
    *(_QWORD *)&__dst[0] = v49;
    *((_QWORD *)&__dst[0] + 1) = v49;
    *(_QWORD *)&__dst[1] = &v49[120 * v48];
    while (1)
    {
      while (!*((_BYTE *)v45 + 112))
      {
        v54 = 0;
        v62 = 0;
        v55 = *v45;
        v56 = *((unsigned int *)v45 + 2);
        v58 = v45[2];
        v57 = v45[3];
        v59 = v45[4];
        v63 = *(_QWORD *)&__dst[1];
        if ((unint64_t)v49 >= *(_QWORD *)&__dst[1])
          goto LABEL_95;
LABEL_90:
        *(_QWORD *)v49 = v55;
        *((_QWORD *)v49 + 1) = v56;
        *((_QWORD *)v49 + 2) = v58;
        *((_QWORD *)v49 + 3) = v57;
        *((_QWORD *)v49 + 4) = v59;
        v49[40] = v54;
        v50 = *(uint64_t *)((char *)&__p[7] + 7);
        v52 = *(_OWORD *)&__p[4];
        v51 = *(_OWORD *)&__p[6];
        v53 = *(_OWORD *)__p;
        *(_OWORD *)(v49 + 57) = *(_OWORD *)&__p[2];
        *(_OWORD *)(v49 + 73) = v52;
        *(_OWORD *)(v49 + 89) = v51;
        *((_QWORD *)v49 + 13) = v50;
        *(_OWORD *)(v49 + 41) = v53;
        v49[112] = v62;
        v49 += 120;
        *((_QWORD *)&__dst[0] + 1) = v49;
        v45 += 15;
        if (v45 == v46)
          goto LABEL_112;
      }
      v54 = *((_BYTE *)v45 + 40);
      v55 = *v45;
      v56 = *((unsigned int *)v45 + 2);
      v58 = v45[2];
      v57 = v45[3];
      v59 = v45[4];
      v60 = *(_OWORD *)((char *)v45 + 57);
      v61 = *(_OWORD *)((char *)v45 + 89);
      *(_OWORD *)&__p[4] = *(_OWORD *)((char *)v45 + 73);
      *(_OWORD *)&__p[6] = v61;
      *(void **)((char *)&__p[7] + 7) = (void *)v45[13];
      *(_OWORD *)__p = *(_OWORD *)((char *)v45 + 41);
      *(_OWORD *)&__p[2] = v60;
      v62 = 1;
      v63 = *(_QWORD *)&__dst[1];
      if ((unint64_t)v49 < *(_QWORD *)&__dst[1])
        goto LABEL_90;
LABEL_95:
      v64 = *(char **)&__dst[0];
      v65 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v49[-*(_QWORD *)&__dst[0]] >> 3);
      v66 = v65 + 1;
      if (v65 + 1 > 0x222222222222222)
        sub_20E92CED8();
      v67 = 0xEEEEEEEEEEEEEEEFLL * ((v63 - *(_QWORD *)&__dst[0]) >> 3);
      if (2 * v67 > v66)
        v66 = 2 * v67;
      if (v67 >= 0x111111111111111)
        v68 = 0x222222222222222;
      else
        v68 = v66;
      if (v68)
      {
        if (v68 > 0x222222222222222)
          sub_20E877A38();
        v69 = (char *)operator new(120 * v68);
      }
      else
      {
        v69 = 0;
      }
      v70 = &v69[120 * v65];
      *(_QWORD *)v70 = v55;
      *((_QWORD *)v70 + 1) = v56;
      *((_QWORD *)v70 + 2) = v58;
      *((_QWORD *)v70 + 3) = v57;
      *((_QWORD *)v70 + 4) = v59;
      v70[40] = v54;
      v71 = *(_OWORD *)__p;
      *(_OWORD *)(v70 + 57) = *(_OWORD *)&__p[2];
      v72 = *(_OWORD *)&__p[6];
      *(_OWORD *)(v70 + 73) = *(_OWORD *)&__p[4];
      *(_OWORD *)(v70 + 89) = v72;
      *((void **)v70 + 13) = *(void **)((char *)&__p[7] + 7);
      *(_OWORD *)(v70 + 41) = v71;
      v73 = v70 + 120;
      v70[112] = v62;
      if (v49 == v64)
      {
        *(_QWORD *)&__dst[0] = &v69[120 * v65];
        *((_QWORD *)&__dst[0] + 1) = v70 + 120;
        v64 = v49;
        *(_QWORD *)&__dst[1] = &v69[120 * v68];
      }
      else
      {
        do
        {
          v74 = *(_OWORD *)(v49 - 120);
          v75 = *(_OWORD *)(v49 - 104);
          v76 = *(_OWORD *)(v49 - 88);
          *(_OWORD *)(v70 - 72) = *(_OWORD *)(v49 - 72);
          *(_OWORD *)(v70 - 88) = v76;
          *(_OWORD *)(v70 - 104) = v75;
          *(_OWORD *)(v70 - 120) = v74;
          v77 = *(_OWORD *)(v49 - 56);
          v78 = *(_OWORD *)(v49 - 40);
          v79 = *(_OWORD *)(v49 - 24);
          *((_QWORD *)v70 - 1) = *((_QWORD *)v49 - 1);
          *(_OWORD *)(v70 - 24) = v79;
          *(_OWORD *)(v70 - 40) = v78;
          *(_OWORD *)(v70 - 56) = v77;
          v70 -= 120;
          v49 -= 120;
        }
        while (v49 != v64);
        *(_QWORD *)&__dst[0] = v70;
        *((_QWORD *)&__dst[0] + 1) = v73;
        *(_QWORD *)&__dst[1] = &v69[120 * v68];
        if (!v64)
          goto LABEL_111;
      }
      operator delete(v64);
LABEL_111:
      v49 = v73;
      *((_QWORD *)&__dst[0] + 1) = v73;
      v45 += 15;
      if (v45 == v46)
      {
LABEL_112:
        v122 = *(_QWORD *)&__dst[0];
        v80 = *(_QWORD *)&__dst[1];
        v44 = a1;
        goto LABEL_114;
      }
    }
  }
  v80 = 0;
  v49 = 0;
  v122 = 0;
LABEL_114:
  v81 = *(_QWORD *)(v44 + 904);
  v82 = *(_QWORD *)(v44 + 912);
  memset(__dst, 0, 24);
  v83 = v82 - v81;
  if (v82 == v81)
  {
    v91 = v80;
    v120 = 0;
    v121 = 0u;
  }
  else
  {
    v84 = 0xCBEEA4E1A08AD8F3 * (v83 >> 3);
    if (v84 >= 0x8AD8F2FBA93869)
      sub_20E92CED8();
    *(_QWORD *)&__dst[0] = operator new(v83);
    *((_QWORD *)&__dst[0] + 1) = *(_QWORD *)&__dst[0];
    *(_QWORD *)&__dst[1] = *(_QWORD *)&__dst[0] + 472 * v84;
    *(_QWORD *)&v129 = __dst;
    do
    {
      __p[0] = *(void **)v81;
      LODWORD(__p[1]) = *(_DWORD *)(v81 + 8);
      LODWORD(__p[2]) = *(_DWORD *)(v81 + 16);
      __p[3] = *(void **)(v81 + 24);
      LODWORD(__p[4]) = *(_DWORD *)(v81 + 32);
      LODWORD(__p[5]) = *(_DWORD *)(v81 + 40);
      v85 = *(_OWORD *)(v81 + 160);
      v87 = *(_OWORD *)(v81 + 112);
      v86 = *(_OWORD *)(v81 + 128);
      *(_OWORD *)&__p[18] = *(_OWORD *)(v81 + 144);
      *(_OWORD *)&__p[20] = v85;
      *(_OWORD *)&__p[14] = v87;
      *(_OWORD *)&__p[16] = v86;
      v88 = *(_OWORD *)(v81 + 64);
      v90 = *(_OWORD *)(v81 + 80);
      v89 = *(_OWORD *)(v81 + 96);
      *(_OWORD *)&__p[6] = *(_OWORD *)(v81 + 48);
      *(_OWORD *)&__p[8] = v88;
      *(_OWORD *)&__p[10] = v90;
      *(_OWORD *)&__p[12] = v89;
      memcpy(&__p[22], (const void *)(v81 + 176), 0x124uLL);
      sub_20EE66D34((void ***)&v129, __p);
      v81 += 472;
    }
    while (v81 != v82);
    v91 = v80;
    v121 = __dst[0];
    v120 = *(_QWORD *)&__dst[1];
  }
  *((_QWORD *)&v129 + 1) = 0;
  v130 = 0;
  *(_QWORD *)&v129 = (char *)&v129 + 8;
  v92 = *(_QWORD **)(a1 + 928);
  if (v92 != (_QWORD *)(a1 + 936))
  {
    do
    {
      v99 = *(_OWORD *)(v92 + 7);
      __p[8] = *((void **)v92 + 13);
      v100 = *(_OWORD *)(v92 + 11);
      *(_OWORD *)&__p[4] = *(_OWORD *)(v92 + 9);
      *(_OWORD *)&__p[6] = v100;
      *(_OWORD *)__p = *(_OWORD *)(v92 + 5);
      *(_OWORD *)&__p[2] = v99;
      v124 = *((_OWORD *)v92 + 7);
      v101 = v92[16];
      v102 = *((_DWORD *)v92 + 8);
      v103 = (uint64_t **)&v129 + 1;
      v104 = (uint64_t **)&v129 + 1;
      if (*((_QWORD *)&v129 + 1))
      {
        v105 = (uint64_t *)*((_QWORD *)&v129 + 1);
        while (1)
        {
          while (1)
          {
            v104 = (uint64_t **)v105;
            v106 = *((_DWORD *)v105 + 8);
            if (v102 >= v106)
              break;
            v105 = *v104;
            v103 = v104;
            if (!*v104)
              goto LABEL_131;
          }
          if (v106 >= v102)
            break;
          v105 = v104[1];
          if (!v105)
          {
            v103 = v104 + 1;
            goto LABEL_131;
          }
        }
        v107 = (char *)v104;
      }
      else
      {
LABEL_131:
        v107 = (char *)operator new(0x88uLL);
        *((_DWORD *)v107 + 8) = v102;
        *(_OWORD *)(v107 + 40) = 0u;
        *(_OWORD *)(v107 + 56) = 0u;
        *(_OWORD *)(v107 + 72) = 0u;
        *(_OWORD *)(v107 + 88) = 0u;
        *(_OWORD *)(v107 + 104) = 0u;
        *(_OWORD *)(v107 + 120) = 0u;
        *(_QWORD *)v107 = 0;
        *((_QWORD *)v107 + 1) = 0;
        *((_QWORD *)v107 + 2) = v104;
        *v103 = (uint64_t *)v107;
        v108 = (uint64_t *)v107;
        if (*(_QWORD *)v129)
        {
          *(_QWORD *)&v129 = *(_QWORD *)v129;
          v108 = *v103;
        }
        sub_20E868578(*((uint64_t **)&v129 + 1), v108);
        ++v130;
      }
      v109 = __p[8];
      v111 = *(_OWORD *)&__p[4];
      v110 = *(_OWORD *)&__p[6];
      v112 = *(_OWORD *)__p;
      *(_OWORD *)(v107 + 56) = *(_OWORD *)&__p[2];
      *(_OWORD *)(v107 + 72) = v111;
      *(_OWORD *)(v107 + 88) = v110;
      *((_QWORD *)v107 + 13) = v109;
      *(_OWORD *)(v107 + 40) = v112;
      *((_OWORD *)v107 + 7) = v124;
      *((_QWORD *)v107 + 16) = v101;
      v113 = (_QWORD *)v92[1];
      if (v113)
      {
        do
        {
          v114 = v113;
          v113 = (_QWORD *)*v113;
        }
        while (v113);
      }
      else
      {
        do
        {
          v114 = (_QWORD *)v92[2];
          v115 = *v114 == (_QWORD)v92;
          v92 = v114;
        }
        while (!v115);
      }
      v92 = v114;
    }
    while (v114 != (_QWORD *)(a1 + 936));
  }
  sub_20FCD0980(*(_QWORD *)(a1 + 880), *(_QWORD *)(a1 + 888), a1 + 48, (uint64_t)__p);
  v93 = *(_QWORD *)(a1 + 896);
  *(_QWORD *)&__dst[0] = *(_QWORD *)(a1 + 952);
  v94 = *(_DWORD *)(a1 + 960);
  *(_QWORD *)((char *)__dst + 12) = *(_QWORD *)(a1 + 964);
  v95 = *(_DWORD *)(a1 + 972);
  DWORD2(__dst[0]) = v94;
  DWORD1(__dst[1]) = v95;
  *(_OWORD *)((char *)&__dst[1] + 8) = *(_OWORD *)(a1 + 976);
  *(_OWORD *)(a2 + 8) = v125;
  *(_QWORD *)(a2 + 24) = v126;
  *(_QWORD *)(a2 + 32) = v122;
  *(_QWORD *)(a2 + 40) = v49;
  *(_QWORD *)(a2 + 48) = v91;
  memcpy((void *)(a2 + 56), __p, 0x2E8uLL);
  *(_OWORD *)(a2 + 800) = v142;
  *(_QWORD *)(a2 + 816) = v143;
  v142 = 0u;
  v143 = 0;
  *(_OWORD *)(a2 + 824) = v144[0];
  *(_OWORD *)(a2 + 836) = *(_OWORD *)((char *)v144 + 12);
  *(_OWORD *)(a2 + 856) = v121;
  *(_QWORD *)(a2 + 872) = v120;
  *(_QWORD *)(a2 + 880) = v93;
  v96 = (_QWORD *)*((_QWORD *)&v129 + 1);
  *(_QWORD *)(a2 + 888) = v129;
  v97 = a2 + 896;
  *(_QWORD *)(a2 + 896) = v96;
  v98 = v130;
  *(_QWORD *)(a2 + 904) = v130;
  if (v98)
  {
    v96[2] = v97;
    *(_QWORD *)&v129 = (char *)&v129 + 8;
    *((_QWORD *)&v129 + 1) = 0;
    v130 = 0;
    v96 = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 888) = v97;
  }
  v116 = __dst[1];
  *(_OWORD *)(a2 + 912) = __dst[0];
  *(_OWORD *)(a2 + 928) = v116;
  *(_QWORD *)(a2 + 944) = *(_QWORD *)&__dst[2];
  sub_20E86872C((uint64_t)&v129, v96);
}

void sub_20F4645B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  sub_20E93CBAC((uint64_t)&a53);
  sub_20E938550(&a29);
  _Unwind_Resume(a1);
}

void sub_20F4645D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33)
{
  sub_20E86872C((uint64_t)&a32, (_QWORD *)a33);
  if (a19)
    operator delete(a19);
  if (__p)
    operator delete(__p);
  sub_20E938550(&a25);
  _Unwind_Resume(a1);
}

void sub_20F464874()
{
  unint64_t v0;

  if (v0)
  {
    STACK[0x488] = v0;
    JUMPOUT(0x20F46488CLL);
  }
  JUMPOUT(0x20F464894);
}

double sub_20F4648A4(uint64_t a1, char **a2)
{
  int v2;
  __int128 v3;
  char **v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char *v9;
  __int128 v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int *v15;
  int *v16;
  int64_t v17;
  unint64_t v18;
  char *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  _BYTE *v30;
  char *v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __n128 v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t *v47;
  int64_t v48;
  unint64_t v49;
  char *v50;
  __int128 v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  __int128 v60;
  char v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int8x16_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  __int128 v73;
  char *v74;
  char *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  char *v80;
  char *v81;
  char *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  int64_t v87;
  unint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  char *v113;
  _QWORD *v114;
  char *v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t **v118;
  uint64_t *v119;
  uint64_t **v120;
  uint64_t **v121;
  unsigned int v122;
  unsigned int v123;
  char *v124;
  uint64_t *v125;
  char *v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  _QWORD *v132;
  _QWORD *v133;
  BOOL v134;
  double result;
  __int128 v136;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  void *v147[2];
  void *v148[2];
  _QWORD *v149;
  int8x16_t v150;
  uint64_t v151;
  _QWORD *v152;
  int8x16_t v153;
  uint64_t v154;
  uint64_t v155;
  int8x16_t v156;
  int8x16_t v157;
  _QWORD *v158;
  __n128 v159;
  __int128 v160;
  __int128 v161;
  int8x16_t v162;
  _BYTE v164[744];
  char *v165;
  __int128 v166;
  __int128 v167;
  char *v168;
  __int128 v169;
  char *v170;
  __int128 v171;
  __n128 v172;
  unint64_t v173;
  _BYTE *v174;
  char *v175;
  char *v176;
  _OWORD __dst[32];
  uint64_t v178;

  v178 = *MEMORY[0x24BDAC8D0];
  a2[112] = *(char **)(a1 + 880);
  v2 = *(_DWORD *)(a1 + 848);
  a2[110] = *(char **)(a1 + 840);
  *((_DWORD *)a2 + 222) = v2;
  sub_20FCD0CB8((__int128 *)(a1 + 56), (uint64_t)v164);
  v3 = *(_OWORD *)&v164[144];
  v4 = a2;
  *((_OWORD *)a2 + 11) = *(_OWORD *)&v164[128];
  *((_OWORD *)a2 + 12) = v3;
  a2[26] = *(char **)&v164[160];
  v5 = *(_OWORD *)&v164[80];
  *((_OWORD *)a2 + 7) = *(_OWORD *)&v164[64];
  *((_OWORD *)a2 + 8) = v5;
  v6 = *(_OWORD *)&v164[112];
  *((_OWORD *)a2 + 9) = *(_OWORD *)&v164[96];
  *((_OWORD *)a2 + 10) = v6;
  v7 = *(_OWORD *)&v164[16];
  *((_OWORD *)a2 + 3) = *(_OWORD *)v164;
  *((_OWORD *)a2 + 4) = v7;
  v8 = *(_OWORD *)&v164[48];
  *((_OWORD *)a2 + 5) = *(_OWORD *)&v164[32];
  *((_OWORD *)a2 + 6) = v8;
  memcpy(a2 + 27, &v164[168], 0x120uLL);
  memcpy(a2 + 63, &v164[456], 0x120uLL);
  v9 = a2[99];
  if (v9)
  {
    a2[100] = v9;
    operator delete(v9);
    a2[99] = 0;
    a2[100] = 0;
    a2[101] = 0;
  }
  a2[99] = v165;
  v10 = v167;
  *((_OWORD *)a2 + 50) = v166;
  *((_OWORD *)a2 + 51) = v10;
  a2[104] = v168;
  a2[107] = v170;
  *(_OWORD *)(a2 + 105) = v169;
  *((_OWORD *)a2 + 54) = v171;
  v11 = 0xF47E8FD1FA3F47E9 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v172 = 0uLL;
  v173 = 0;
  sub_20F469798((uint64_t)&v172, v11);
  v12 = *(_QWORD **)(a1 + 8);
  v149 = *(_QWORD **)(a1 + 16);
  if (v12 != v149)
  {
    while (1)
    {
      memset(__dst, 0, sizeof(__dst));
      v13 = operator new(0x300uLL);
      v13[1] = 0;
      v13[2] = 0;
      *v13 = &off_24C9FC5B0;
      v158 = v13;
      v14 = (uint64_t)(v13 + 3);
      sub_20F469B44((uint64_t)(v13 + 3));
      sub_20FCD2B24((uint64_t)(v12 + 1), v14, 1);
      memcpy(__dst, v12 + 22, sizeof(__dst));
      v15 = (int *)v12[86];
      v16 = (int *)v12[87];
      v175 = 0;
      v174 = 0;
      v176 = 0;
      v17 = (char *)v16 - (char *)v15;
      v155 = v14;
      if (v16 != v15)
        break;
      v31 = 0;
      v19 = 0;
      v20 = 0;
LABEL_31:
      *(_QWORD *)v164 = v155;
      *(_QWORD *)&v164[8] = v158;
      memcpy(&v164[16], __dst, 0x200uLL);
      *(_QWORD *)&v164[528] = v20;
      *(_QWORD *)&v164[536] = v19;
      *(_QWORD *)&v164[544] = v31;
      v32 = (_QWORD *)v172.n128_u64[1];
      if (v172.n128_u64[1] >= v173)
      {
        v4 = a2;
        v172.n128_u64[1] = (unint64_t)sub_20F469930((void **)&v172, (uint64_t)v164);
        if (*(_QWORD *)&v164[528])
        {
          *(_QWORD *)&v164[536] = *(_QWORD *)&v164[528];
          operator delete(*(void **)&v164[528]);
        }
      }
      else
      {
        *(_QWORD *)v172.n128_u64[1] = v155;
        v32[1] = v158;
        *(_OWORD *)v164 = 0uLL;
        memcpy(v32 + 2, &v164[16], 0x200uLL);
        v32[66] = 0;
        v32[68] = 0;
        v32[67] = 0;
        *((_OWORD *)v32 + 33) = *(_OWORD *)&v164[528];
        v32[68] = *(_QWORD *)&v164[544];
        memset(&v164[528], 0, 24);
        v172.n128_u64[1] = (unint64_t)(v32 + 69);
        v4 = a2;
      }
      v33 = *(std::__shared_weak_count **)&v164[8];
      if (*(_QWORD *)&v164[8])
      {
        v34 = (unint64_t *)(*(_QWORD *)&v164[8] + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v12 += 89;
      if (v12 == v149)
        goto LABEL_40;
    }
    v152 = v12;
    v18 = 0xAAAAAAAAAAAAAAABLL * (v17 >> 3);
    if (v18 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v19 = (char *)operator new(v17);
    v175 = v19;
    v176 = &v19[24 * v18];
    v20 = v19;
    while (1)
    {
      while (1)
      {
        v21 = *((_QWORD *)v15 + 1);
        v22 = v15[4];
        v23 = *v15;
        if (v19 >= v176)
          break;
        *(_DWORD *)v19 = v23;
        *((_QWORD *)v19 + 1) = v21;
        *((_QWORD *)v19 + 2) = v22;
        v19 += 24;
        v15 += 6;
        if (v15 == v16)
          goto LABEL_29;
      }
      v24 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v20) >> 3) + 1;
      if (v24 > 0xAAAAAAAAAAAAAAALL)
      {
        v175 = v19;
        v174 = v20;
        sub_20E867F44();
      }
      if (0x5555555555555556 * ((v176 - v20) >> 3) > v24)
        v24 = 0x5555555555555556 * ((v176 - v20) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v176 - v20) >> 3) >= 0x555555555555555)
        v25 = 0xAAAAAAAAAAAAAAALL;
      else
        v25 = v24;
      if (v25)
      {
        if (v25 > 0xAAAAAAAAAAAAAAALL)
        {
          v175 = v19;
          v174 = v20;
          sub_20E877A38();
        }
        v26 = (char *)operator new(24 * v25);
        v27 = (uint64_t)&v26[8 * ((v19 - v20) >> 3)];
        *(_DWORD *)v27 = v23;
        *(_QWORD *)(v27 + 8) = v21;
        *(_QWORD *)(v27 + 16) = v22;
        if (v19 == v20)
        {
LABEL_27:
          v30 = (_BYTE *)v27;
          v19 = (char *)(v27 + 24);
          v176 = &v26[24 * v25];
          if (!v20)
            goto LABEL_24;
          goto LABEL_23;
        }
      }
      else
      {
        v26 = 0;
        v27 = 8 * ((v19 - v20) >> 3);
        *(_DWORD *)v27 = v23;
        *(_QWORD *)(v27 + 8) = v21;
        *(_QWORD *)(v27 + 16) = v22;
        if (v19 == v20)
          goto LABEL_27;
      }
      v28 = v27;
      do
      {
        v29 = *(_OWORD *)(v19 - 24);
        v30 = (_BYTE *)(v28 - 24);
        *(_QWORD *)(v28 - 8) = *((_QWORD *)v19 - 1);
        *(_OWORD *)(v28 - 24) = v29;
        v19 -= 24;
        v28 -= 24;
      }
      while (v19 != v20);
      v19 = (char *)(v27 + 24);
      v176 = &v26[24 * v25];
      if (!v20)
        goto LABEL_24;
LABEL_23:
      operator delete(v20);
LABEL_24:
      v20 = v30;
      v15 += 6;
      if (v15 == v16)
      {
LABEL_29:
        v31 = v176;
        v12 = v152;
        goto LABEL_31;
      }
    }
  }
LABEL_40:
  v36 = v172;
  v37 = v173;
  v38 = *v4;
  if (*v4)
  {
    v159 = v172;
    v39 = v4[1];
    v40 = *v4;
    if (v39 != v38)
    {
      do
      {
        v41 = (void *)*((_QWORD *)v39 - 3);
        if (v41)
        {
          *((_QWORD *)v39 - 2) = v41;
          operator delete(v41);
        }
        v42 = (std::__shared_weak_count *)*((_QWORD *)v39 - 68);
        if (v42)
        {
          p_shared_owners = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldaxr(p_shared_owners);
          while (__stlxr(v44 - 1, p_shared_owners));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v42->__on_zero_shared)(v42, v36);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v39 -= 552;
      }
      while (v39 != v38);
      v40 = *v4;
    }
    v4[1] = v38;
    operator delete(v40);
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    v36 = v159;
  }
  *(__n128 *)v4 = v36;
  v4[2] = (char *)v37;
  v45 = (_QWORD *)a1;
  v46 = *(uint64_t **)(a1 + 32);
  v47 = *(uint64_t **)(a1 + 40);
  memset(v164, 0, 24);
  v48 = (char *)v47 - (char *)v46;
  if (v47 != v46)
  {
    v49 = 0xEEEEEEEEEEEEEEEFLL * (v48 >> 3);
    if (v49 > 0x222222222222222)
      sub_20E867F44();
    v50 = (char *)operator new(v48);
    *(_QWORD *)v164 = v50;
    *(_QWORD *)&v164[8] = v50;
    *(_QWORD *)&v164[16] = &v50[120 * v49];
    while (1)
    {
      while (1)
      {
        if (*((_BYTE *)v46 + 112))
        {
          *(_QWORD *)&v51 = v46[13];
          v55 = *(int8x16_t *)(v46 + 11);
          v54 = *(int8x16_t *)(v46 + 9);
          v53 = *(int8x16_t *)(v46 + 7);
          v52 = *(int8x16_t *)(v46 + 5);
          v59 = vextq_s8(v55, v55, 8uLL);
          v58 = vextq_s8(v54, v54, 8uLL);
          v57 = vextq_s8(v53, v53, 8uLL);
          v56 = vextq_s8(v52, v52, 8uLL);
          v61 = 1;
        }
        else
        {
          v61 = 0;
        }
        v62 = *v46;
        v63 = *((_DWORD *)v46 + 2);
        v64 = v46[4];
        v65 = *((int8x16_t *)v46 + 1);
        v66 = vextq_s8(v65, v65, 8uLL).u64[0];
        if ((unint64_t)v50 >= *(_QWORD *)&v164[16])
          break;
        *(_QWORD *)v50 = v62;
        *((_DWORD *)v50 + 2) = v63;
        *((_QWORD *)v50 + 4) = v64;
        v65.i64[1] = v66;
        *((int8x16_t *)v50 + 1) = v65;
        *(_QWORD *)&v60 = v52.i64[0];
        *((_QWORD *)&v60 + 1) = v56.i64[0];
        *(_OWORD *)(v50 + 40) = v60;
        *(_QWORD *)&v60 = v53.i64[0];
        *((_QWORD *)&v60 + 1) = v57.i64[0];
        *(_OWORD *)(v50 + 56) = v60;
        *(_QWORD *)&v60 = v54.i64[0];
        *((_QWORD *)&v60 + 1) = v58.i64[0];
        *(_OWORD *)(v50 + 72) = v60;
        *((_QWORD *)v50 + 13) = v51;
        *(_QWORD *)&v60 = v55.i64[0];
        *((_QWORD *)&v60 + 1) = v59.i64[0];
        *(_OWORD *)(v50 + 88) = v60;
        v50[112] = v61;
        v50 += 120;
        *(_QWORD *)&v164[8] = v50;
        v46 += 15;
        if (v46 == v47)
          goto LABEL_77;
      }
      v67 = *(char **)v164;
      v68 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v50[-*(_QWORD *)v164] >> 3);
      v69 = v68 + 1;
      if (v68 + 1 > 0x222222222222222)
        sub_20E867F44();
      v138 = v46[4];
      v139 = v66;
      v140 = v46[2];
      v141 = v59;
      v142 = v58;
      v143 = v57;
      v145 = v56;
      *(int8x16_t *)v147 = v55;
      v150 = v54;
      v153 = v53;
      v156 = v52;
      v160 = v51;
      if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)(*(_QWORD *)&v164[16] - *(_QWORD *)v164) >> 3) > v69)
        v69 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(*(_QWORD *)&v164[16] - *(_QWORD *)v164) >> 3);
      if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)&v164[16] - *(_QWORD *)v164) >> 3) >= 0x111111111111111)
        v70 = 0x222222222222222;
      else
        v70 = v69;
      if (v70 > 0x222222222222222)
        sub_20E877A38();
      v71 = (char *)operator new(120 * v70);
      v72 = &v71[120 * v68];
      *(_QWORD *)v72 = v62;
      *((_DWORD *)v72 + 2) = v63;
      *((_QWORD *)v72 + 4) = v138;
      *(_QWORD *)&v73 = v140;
      *((_QWORD *)&v73 + 1) = v139;
      *((_OWORD *)v72 + 1) = v73;
      v53 = v153;
      v52 = v156;
      *(_QWORD *)&v73 = v156.i64[0];
      v57 = v143;
      v56 = v145;
      *((_QWORD *)&v73 + 1) = v145.i64[0];
      *(_OWORD *)(v72 + 40) = v73;
      *(_QWORD *)&v73 = v153.i64[0];
      *((_QWORD *)&v73 + 1) = v143.i64[0];
      *(_OWORD *)(v72 + 56) = v73;
      v55 = *(int8x16_t *)v147;
      v54 = v150;
      *(_QWORD *)&v73 = v150.i64[0];
      v59 = v141;
      v58 = v142;
      *((_QWORD *)&v73 + 1) = v142.i64[0];
      *(_OWORD *)(v72 + 72) = v73;
      v51 = v160;
      *((_QWORD *)v72 + 13) = v160;
      *(void **)&v73 = v147[0];
      *((_QWORD *)&v73 + 1) = v141.i64[0];
      *(_OWORD *)(v72 + 88) = v73;
      v72[112] = v61;
      if (v50 == v67)
      {
        v50 = v72 + 120;
        *(_QWORD *)v164 = &v71[120 * v68];
        *(_QWORD *)&v164[8] = v72 + 120;
        *(_QWORD *)&v164[16] = &v71[120 * v70];
        if (!v67)
          goto LABEL_73;
      }
      else
      {
        v74 = &v71[120 * v68];
        do
        {
          v75 = v74 - 120;
          *(_OWORD *)(v74 - 120) = *(_OWORD *)(v50 - 120);
          v76 = *(_OWORD *)(v50 - 104);
          *((_QWORD *)v74 - 11) = *((_QWORD *)v50 - 11);
          *(_OWORD *)(v74 - 104) = v76;
          v78 = *((_OWORD *)v50 - 3);
          v77 = *((_OWORD *)v50 - 2);
          v79 = *((_OWORD *)v50 - 4);
          *((_QWORD *)v74 - 2) = *((_QWORD *)v50 - 2);
          *((_OWORD *)v74 - 3) = v78;
          *((_OWORD *)v74 - 2) = v77;
          *((_OWORD *)v74 - 4) = v79;
          *((_OWORD *)v74 - 5) = *((_OWORD *)v50 - 5);
          *(v74 - 8) = *(v50 - 8);
          v50 -= 120;
          v74 -= 120;
        }
        while (v50 != v67);
        v50 = v72 + 120;
        *(_QWORD *)v164 = v75;
        *(_QWORD *)&v164[8] = v72 + 120;
        *(_QWORD *)&v164[16] = &v71[120 * v70];
        if (!v67)
          goto LABEL_73;
      }
      operator delete(v67);
      v59 = v141;
      v58 = v142;
      v57 = v143;
      v56 = v145;
      v55 = *(int8x16_t *)v147;
      v54 = v150;
      v53 = v153;
      v52 = v156;
      v51 = v160;
LABEL_73:
      *(_QWORD *)&v164[8] = v50;
      v46 += 15;
      if (v46 == v47)
      {
LABEL_77:
        v4 = a2;
        v80 = *(char **)v164;
        v81 = *(char **)&v164[16];
        v45 = (_QWORD *)a1;
        v83 = a2 + 3;
        v82 = a2[3];
        if (v82)
          goto LABEL_78;
        goto LABEL_79;
      }
    }
  }
  v81 = 0;
  v50 = 0;
  v80 = 0;
  v83 = v4 + 3;
  v82 = v4[3];
  if (v82)
  {
LABEL_78:
    v4[4] = v82;
    operator delete(v82);
    v45 = (_QWORD *)a1;
    *v83 = 0;
    v83[1] = 0;
    v83[2] = 0;
  }
LABEL_79:
  v4[3] = v80;
  v4[4] = v50;
  v4[5] = v81;
  v84 = v45[107];
  v85 = v45[108];
  v86 = 0uLL;
  memset(__dst, 0, 24);
  v87 = v85 - v84;
  if (v85 == v84)
  {
    v113 = 0;
    v114 = v4 + 113;
    v115 = v4[113];
    if (v115)
    {
LABEL_84:
      v4[114] = v115;
      v161 = v86;
      operator delete(v115);
      v86 = v161;
      v45 = (_QWORD *)a1;
      *v114 = 0;
      v114[1] = 0;
      v114[2] = 0;
    }
  }
  else
  {
    v88 = 0xCBEEA4E1A08AD8F3 * (v87 >> 3);
    if (v88 >= 0x8AD8F2FBA93869)
      sub_20E867F44();
    *(_QWORD *)&__dst[0] = operator new(v87);
    *((_QWORD *)&__dst[0] + 1) = *(_QWORD *)&__dst[0];
    *(_QWORD *)&__dst[1] = *(_QWORD *)&__dst[0] + 472 * v88;
    do
    {
      *(_QWORD *)&v164[8] = 0;
      *(_QWORD *)v164 = *(_QWORD *)v84;
      *(_DWORD *)&v164[8] = *(_DWORD *)(v84 + 8);
      *(_DWORD *)&v164[16] = *(_DWORD *)(v84 + 16);
      *(_QWORD *)&v164[32] = 0;
      *(_QWORD *)&v164[24] = *(_QWORD *)(v84 + 24);
      *(_DWORD *)&v164[32] = *(_DWORD *)(v84 + 32);
      *(_DWORD *)&v164[40] = *(_DWORD *)(v84 + 40);
      v90 = *(_OWORD *)(v84 + 48);
      v89 = *(_OWORD *)(v84 + 64);
      v92 = *(_OWORD *)(v84 + 80);
      v91 = *(_OWORD *)(v84 + 96);
      v94 = *(_OWORD *)(v84 + 112);
      v93 = *(_OWORD *)(v84 + 128);
      v95 = *(_OWORD *)(v84 + 160);
      *(_OWORD *)&v164[144] = *(_OWORD *)(v84 + 144);
      *(_OWORD *)&v164[160] = v95;
      *(_OWORD *)&v164[112] = v94;
      *(_OWORD *)&v164[128] = v93;
      *(_OWORD *)&v164[80] = v92;
      *(_OWORD *)&v164[96] = v91;
      *(_OWORD *)&v164[48] = v90;
      *(_OWORD *)&v164[64] = v89;
      v97 = *(_OWORD *)(v84 + 432);
      v96 = *(_OWORD *)(v84 + 448);
      v99 = *(_OWORD *)(v84 + 400);
      v98 = *(_OWORD *)(v84 + 416);
      v101 = *(_OWORD *)(v84 + 368);
      v100 = *(_OWORD *)(v84 + 384);
      v103 = *(_OWORD *)(v84 + 336);
      v102 = *(_OWORD *)(v84 + 352);
      v105 = *(_OWORD *)(v84 + 304);
      v104 = *(_OWORD *)(v84 + 320);
      v107 = *(_OWORD *)(v84 + 272);
      v106 = *(_OWORD *)(v84 + 288);
      v109 = *(_OWORD *)(v84 + 240);
      v108 = *(_OWORD *)(v84 + 256);
      v111 = *(_OWORD *)(v84 + 208);
      v110 = *(_OWORD *)(v84 + 224);
      v112 = *(_OWORD *)(v84 + 192);
      *(_OWORD *)&v164[176] = *(_OWORD *)(v84 + 176);
      *(_OWORD *)&v164[192] = v112;
      *(_OWORD *)&v164[208] = v111;
      *(_OWORD *)&v164[224] = v110;
      *(_OWORD *)&v164[240] = v109;
      *(_OWORD *)&v164[256] = v108;
      *(_OWORD *)&v164[272] = v107;
      *(_OWORD *)&v164[288] = v106;
      *(_OWORD *)&v164[304] = v105;
      *(_OWORD *)&v164[320] = v104;
      *(_OWORD *)&v164[336] = v103;
      *(_OWORD *)&v164[352] = v102;
      *(_OWORD *)&v164[368] = v101;
      *(_OWORD *)&v164[384] = v100;
      *(_OWORD *)&v164[400] = v99;
      *(_OWORD *)&v164[416] = v98;
      *(_OWORD *)&v164[432] = v97;
      *(_OWORD *)&v164[448] = v96;
      *(_DWORD *)&v164[464] = *(_DWORD *)(v84 + 464);
      v164[468] = 0;
      sub_20F269ED8((char **)__dst, (__int128 *)v164);
      v84 += 472;
    }
    while (v84 != v85);
    v86 = __dst[0];
    v113 = *(char **)&__dst[1];
    v45 = (_QWORD *)a1;
    v114 = v4 + 113;
    v115 = v4[113];
    if (v115)
      goto LABEL_84;
  }
  *(_OWORD *)v114 = v86;
  v4[115] = v113;
  v116 = (_QWORD *)v45[111];
  v117 = v45 + 112;
  if (v116 != v45 + 112)
  {
    v118 = (uint64_t **)(v4 + 117);
    do
    {
      v151 = v116[13];
      v146 = *(int8x16_t *)(v116 + 7);
      *(_OWORD *)v148 = *(_OWORD *)(v116 + 9);
      v144 = *(int8x16_t *)(v116 + 5);
      v154 = v116[16];
      v157 = *(int8x16_t *)(v116 + 11);
      v162 = *((int8x16_t *)v116 + 7);
      v119 = *v118;
      v120 = v118;
      v121 = v118;
      v122 = *((_DWORD *)v116 + 8);
      if (*v118)
      {
        while (1)
        {
          while (1)
          {
            v121 = (uint64_t **)v119;
            v123 = *((_DWORD *)v119 + 8);
            if (v122 >= v123)
              break;
            v119 = *v121;
            v120 = v121;
            if (!*v121)
              goto LABEL_95;
          }
          if (v123 >= v122)
            break;
          v119 = v121[1];
          if (!v119)
          {
            v120 = v121 + 1;
            goto LABEL_95;
          }
        }
        v124 = (char *)v121;
        v4 = a2;
      }
      else
      {
LABEL_95:
        v124 = (char *)operator new(0x88uLL);
        *((_DWORD *)v124 + 8) = v122;
        *((_OWORD *)v124 + 3) = 0u;
        *((_OWORD *)v124 + 4) = 0u;
        *((_OWORD *)v124 + 5) = 0u;
        *((_QWORD *)v124 + 5) = 0x3FF0000000000000;
        *((_QWORD *)v124 + 9) = 0x3FF0000000000000;
        *((_QWORD *)v124 + 12) = 0;
        *((_QWORD *)v124 + 13) = 0x3FF0000000000000;
        *((_QWORD *)v124 + 15) = 0;
        *((_QWORD *)v124 + 16) = 0;
        *((_QWORD *)v124 + 14) = 0;
        *(_QWORD *)v124 = 0;
        *((_QWORD *)v124 + 1) = 0;
        *((_QWORD *)v124 + 2) = v121;
        *v120 = (uint64_t *)v124;
        v4 = a2;
        v125 = (uint64_t *)v124;
        v126 = *(char **)a2[116];
        if (v126)
        {
          a2[116] = v126;
          v125 = *v120;
        }
        sub_20E868578((uint64_t *)a2[117], v125);
        ++a2[118];
      }
      v128 = v157;
      v127 = v162;
      v130 = v146;
      v129 = *(int8x16_t *)v148;
      v131 = v144;
      v131.i64[1] = vextq_s8(v131, v131, 8uLL).u64[0];
      *(int8x16_t *)(v124 + 40) = v131;
      v130.i64[1] = vextq_s8(v130, v130, 8uLL).u64[0];
      *(int8x16_t *)(v124 + 56) = v130;
      v129.i64[1] = vextq_s8(v129, v129, 8uLL).u64[0];
      *(int8x16_t *)(v124 + 72) = v129;
      *((_QWORD *)v124 + 13) = v151;
      v128.i64[1] = vextq_s8(v128, v128, 8uLL).u64[0];
      *(int8x16_t *)(v124 + 88) = v128;
      *((_QWORD *)v124 + 16) = v154;
      v127.i64[1] = vextq_s8(v127, v127, 8uLL).u64[0];
      *((int8x16_t *)v124 + 7) = v127;
      v132 = (_QWORD *)v116[1];
      if (v132)
      {
        do
        {
          v133 = v132;
          v132 = (_QWORD *)*v132;
        }
        while (v132);
      }
      else
      {
        do
        {
          v133 = (_QWORD *)v116[2];
          v134 = *v133 == (_QWORD)v116;
          v116 = v133;
        }
        while (!v134);
      }
      v116 = v133;
    }
    while (v133 != v117);
  }
  *(_QWORD *)v164 = *(_QWORD *)(a1 + 912);
  *(_DWORD *)&v164[8] = *(_DWORD *)(a1 + 920);
  *(_QWORD *)&v164[12] = *(_QWORD *)(a1 + 924);
  *(_DWORD *)&v164[20] = *(_DWORD *)(a1 + 932);
  *(_QWORD *)&v164[24] = *(_QWORD *)(a1 + 936);
  *(_QWORD *)&v164[29] = *(_QWORD *)(a1 + 941);
  result = *(double *)v164;
  v136 = *(_OWORD *)&v164[16];
  *(_OWORD *)(v4 + 119) = *(_OWORD *)v164;
  *(_OWORD *)(v4 + 121) = v136;
  v4[123] = *(char **)&v164[32];
  return result;
}

void sub_20F465578(_Unwind_Exception *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = STACK[0x420];
  if (STACK[0x420])
  {
    v3 = STACK[0x428];
    v4 = (void *)STACK[0x420];
    if (STACK[0x428] != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v6 = *(std::__shared_weak_count **)(v3 - 544);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v3 -= 552;
      }
      while (v3 != v2);
      v4 = (void *)STACK[0x420];
    }
    STACK[0x428] = v2;
    operator delete(v4);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20F4657D0(_QWORD *a1, const char *a2)
{
  char *v3;
  const char *v4;

  *a1 = &off_24C9BFC10;
  v3 = (char *)(a1 + 1);
  v4 = "User info is not provided";
  if (a2)
    v4 = a2;
  snprintf(v3, 0x576uLL, "[%s] %s", "Unknown", v4);
  *a1 = &off_24CA05150;
  return a1;
}

void sub_20F46583C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  const char *v17;
  char *v18;
  int8x16_t v19;
  int32x4_t v20;
  int32x4_t v21;
  float64x2_t v22;
  float64x2_t v23;
  __int128 v24;
  unsigned int *v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t i;
  unsigned __int8 v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  int8x16_t v45;
  int8x8_t v46;
  unint64_t v47;
  uint8x8_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  char *v59;
  char *v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  float v74;
  uint64_t v75;
  unsigned int v76;
  double v77;
  double v78;
  double v79;
  uint64_t v80;
  float64x2_t *v81;
  float64x2_t *v82;
  uint64_t v83;
  float64x2_t v84;
  double *v85;
  uint64_t v86;
  float64x2_t *v87;
  float64x2_t *v88;
  uint64_t v89;
  char v90;
  float64x2_t *v91;
  float64x2_t *v92;
  uint64_t v93;
  float64x2_t *v94;
  float64x2_t *v95;
  double *v96;
  double *v97;
  float64x2_t *v98;
  float64x2_t *v99;
  uint64_t v100;
  double *v101;
  float64x2_t *v102;
  uint64_t v103;
  double v104;
  int8x16_t v105;
  __int128 v106;
  double v113;
  __int128 v116;
  int64x2_t v117;
  float64x2_t *v118;
  float64x2_t *v119;
  uint64_t v120;
  double v121;
  uint64_t *v125;
  unsigned __int8 v126;
  char *v128;
  size_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t j;
  uint64_t v133;
  uint64_t *v134;
  uint64_t *v135;
  unsigned __int8 v136;
  uint64_t v137;
  uint64_t k;
  unsigned __int8 v139;
  int8x16_t *v140;
  unsigned __int8 v141;
  uint64_t v142;
  uint64_t m;
  unsigned __int8 v144;
  float64x2_t v145;
  float32x2_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int32x4_t v149;
  float32x4_t v150;
  int32x4_t v151;
  unint64_t *v152;
  unint64_t v153;
  char *v154;
  unsigned __int8 v155;
  const char *v156;
  size_t v157;
  _BYTE *v158;
  unint64_t v159;
  const char *v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  NSObject *v169;
  size_t v170;
  std::__shared_weak_count_vtbl *v171;
  std::__shared_weak_count *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  void *v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  void *v198;
  const char *v199;
  _QWORD *v200;
  _QWORD *exception;
  _QWORD *v202;
  char *v203;
  uint64_t v204;
  unsigned int *v205;
  uint64_t v207;
  std::__shared_weak_count *v208;
  __int128 v209;
  uint64_t v210;
  float64x2_t v211;
  unint64_t v212;
  int8x16_t v213;
  uint64_t v214;
  float64x2_t *v215;
  float64x2_t *v216;
  float64x2_t *v217;
  float64x2_t *v218;
  uint64_t v219;
  _BYTE object[24];
  __int128 v221;
  void *v222;
  __int128 v223;
  void *v224;
  char v225;
  char v226;
  void *v227;
  char v228;
  void *__p;
  char v230;
  int64x2_t v231;
  float64_t v232;
  int64x2_t v233;
  float64_t v234;
  float64x2_t v235;
  uint64_t v236;
  float64x2_t v237;
  __uint64_t v238[2];
  int64x2_t v239;
  int64x2_t v240;
  int8x16_t v241;
  std::__shared_weak_count *v242;
  double v243;
  uint64_t v244;
  uint64_t v245;

  v245 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 880);
  v204 = a1;
  v5 = *(_QWORD *)(a1 + 888);
  v6 = *(_QWORD *)(v3 + 56);
  if (!v6)
    goto LABEL_22;
  v7 = v3 + 56;
  do
  {
    v8 = *(_QWORD *)(v6 + 32);
    if (v8 < v4)
    {
      v6 += 8;
    }
    else if (v8 == v4)
    {
      if (*(_DWORD *)(v6 + 40) < v5)
        v6 += 8;
      else
        v7 = v6;
    }
    else
    {
      v7 = v6;
    }
    v6 = *(_QWORD *)v6;
  }
  while (v6);
  if (v7 == v3 + 56
    || (v9 = *(_QWORD *)(v7 + 32), v4 < v9)
    || v4 == v9 && *(_DWORD *)(v7 + 40) > v5
    || !*(_QWORD *)(v7 + 48))
  {
LABEL_22:
    sub_20F283D18(v3, v4, v5, v204 + 48);
    v18 = *(char **)v204;
    v203 = *(char **)(v204 + 8);
    if (*(char **)v204 == v203)
      return;
    while (1)
    {
      if ((sub_20F286CA4(a2, v18) & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x580uLL);
        v202 = sub_20F4657D0(exception, "Failed to add Frame!");
        __cxa_throw(v202, (struct type_info *)&unk_24CA05168, (void (*)(void *))std::exception::~exception);
      }
      v24 = *(_OWORD *)*(_QWORD *)v18;
      v210 = *(_QWORD *)(*(_QWORD *)v18 + 16);
      v209 = v24;
      v25 = (unsigned int *)*((_QWORD *)v18 + 66);
      v26 = (unsigned int *)*((_QWORD *)v18 + 67);
      v205 = v26;
      if (v25 != v26)
        break;
LABEL_24:
      v18 += 552;
      if (v18 == v203)
        return;
    }
LABEL_29:
    v27 = a2[1];
    v30 = *(uint64_t **)(v27 + 8);
    v28 = v27 + 8;
    v29 = v30;
    if (v30)
    {
      v31 = *((_QWORD *)v25 + 1);
      v32 = v25[4];
      v33 = (uint64_t *)v28;
      do
      {
        v34 = v29[4];
        if (v34 < v31)
        {
          ++v29;
        }
        else if (v34 == v31)
        {
          if (*((_DWORD *)v29 + 10) < v32)
            ++v29;
          else
            v33 = v29;
        }
        else
        {
          v33 = v29;
        }
        v29 = (uint64_t *)*v29;
      }
      while (v29);
      if (v33 == (uint64_t *)v28)
      {
        v50 = 0;
LABEL_60:
        v207 = v50;
        v208 = 0;
        if (v50)
          goto LABEL_61;
        goto LABEL_42;
      }
      v35 = v33[4];
      if (v31 >= v35 && (v31 != v35 || v32 >= *((_DWORD *)v33 + 10)))
      {
        v50 = v33[6];
        v62 = (std::__shared_weak_count *)v33[7];
        if (v62)
        {
          p_shared_owners = (unint64_t *)&v62->__shared_owners_;
          do
            v64 = __ldxr(p_shared_owners);
          while (__stxr(v64 + 1, p_shared_owners));
          v207 = v50;
          v208 = v62;
          do
            v65 = __ldxr(p_shared_owners);
          while (__stxr(v65 + 1, p_shared_owners));
          do
            v66 = __ldaxr(p_shared_owners);
          while (__stlxr(v66 - 1, p_shared_owners));
          if (v66)
          {
            if (v50)
              goto LABEL_61;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
            if (v50)
            {
LABEL_61:
              v51 = *(_QWORD *)(*(_QWORD *)v18 + 72) + 40 * *v25;
              *(_OWORD *)object = v209;
              *(_QWORD *)&object[16] = v210;
              *(_QWORD *)&v221 = v51;
              v52 = *(_QWORD *)(v50 + 200);
              v53 = *(char **)(v50 + 208);
              if (v53 == (char *)v52)
              {
LABEL_72:
                if ((char *)v52 == v53
                  || *(_DWORD *)(v52 + 16) != (_DWORD)v210
                  || *(_QWORD *)v52 != (_QWORD)v209
                  || (v59 = *(char **)(v50 + 208), *(_DWORD *)(v52 + 8) != DWORD2(v209)))
                {
                  v59 = sub_20F287F84((char **)(v50 + 200), (char *)v52, object);
                  v53 = *(char **)(v50 + 208);
                }
                if (v53 != v59)
                {
                  *(_QWORD *)object = v51;
                  sub_20EE6BDF0((uint64_t *)v50, (uint64_t *)&v209, (uint64_t)object);
                }
                v60 = *(char **)(v207 + 208);
                if (v60 == v59)
                {
                  v198 = __cxa_allocate_exception(0x580uLL);
                  v199 = "Adding node failed!";
                }
                else
                {
                  if ((unint64_t)&v60[-*(_QWORD *)(v207 + 200)] > 0x3F)
                  {
                    v61 = v208;
                    if (v208)
                      goto LABEL_266;
                    goto LABEL_28;
                  }
                  v198 = __cxa_allocate_exception(0x580uLL);
                  v199 = "Track length < 2!";
                }
                v200 = (_QWORD *)sub_20EA59064((uint64_t)v198, v199, "Unknown");
                *v200 = &off_24CA05150;
                __cxa_throw(v200, (struct type_info *)&unk_24CA05168, (void (*)(void *))std::exception::~exception);
              }
              v54 = (uint64_t)&v53[-v52] >> 5;
              while (2)
              {
                v55 = v54 >> 1;
                v56 = v52 + 32 * (v54 >> 1);
                v57 = *(_DWORD *)(v56 + 16);
                _CF = v57 >= *(_DWORD *)&object[16];
                if (v57 == *(_DWORD *)&object[16])
                {
                  if (*(_QWORD *)v56 >= *(_QWORD *)object)
                  {
                    if (*(_QWORD *)v56 == *(_QWORD *)object)
                    {
                      _CF = *(_DWORD *)(v56 + 8) >= *(_DWORD *)&object[8];
                      goto LABEL_69;
                    }
LABEL_64:
                    v54 = v55;
                    if (!v55)
                      goto LABEL_72;
                    continue;
                  }
                }
                else
                {
LABEL_69:
                  if (_CF)
                    goto LABEL_64;
                }
                break;
              }
              v52 = v56 + 32;
              v55 = v54 + ~v55;
              goto LABEL_64;
            }
          }
          goto LABEL_42;
        }
        goto LABEL_60;
      }
    }
    v208 = 0;
LABEL_42:
    v37 = *(_QWORD *)(v204 + 24);
    v36 = *(_QWORD *)(v204 + 32);
    if (v37 != v36)
    {
      while (*((_QWORD *)v25 + 1) != *(_QWORD *)v37 || v25[4] != *(_DWORD *)(v37 + 8))
      {
        v37 += 120;
        if (v37 == v36)
          goto LABEL_48;
      }
    }
    if (v37 == v36)
    {
LABEL_48:
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/VIODatabaseCMUtil.cpp", 262, (uint64_t)"track_iter != keyframe_cm.tracks.end()", 38, (uint64_t)"Fail to find track sample!", 26, (void (*)(void **))sub_21023DDB0);
      v38 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68 || byte_254A6DE70)
      {
        v39 = qword_254A6DE40;
        for (i = qword_254A6DE48; v39 != i; v39 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v39)(*(_QWORD *)(v39 + 8), "track_iter != keyframe_cm.tracks.end()", 38, "Fail to find track sample!", 26);
      }
      v41 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68)
        abort();
      qword_254A6DE58(unk_254A6DE60, "track_iter != keyframe_cm.tracks.end()", 38, "Fail to find track sample!", 26);
      v37 = v36;
    }
    v42 = *v25;
    v43 = *(_DWORD *)(v37 + 8);
    v44 = *(_QWORD *)(*(_QWORD *)v18 + 16);
    v45 = *(int8x16_t *)*(_QWORD *)v18;
    v213 = v45;
    v214 = v44;
    v46 = *(int8x8_t *)(*a2 + 1792);
    if (!*(_QWORD *)&v46)
      goto LABEL_286;
    v47 = (v213.i32[2] ^ __ROR4__(v44, 13));
    v48 = (uint8x8_t)vcnt_s8(v46);
    v48.i16[0] = vaddlv_u8(v48);
    if (v48.u32[0] > 1uLL)
    {
      v49 = v47;
      if (*(_QWORD *)&v46 <= v47)
        v49 = v47 % *(_QWORD *)&v46;
    }
    else
    {
      v49 = (v46.i32[0] - 1) & v47;
    }
    v67 = *(uint64_t ***)(*(_QWORD *)(*a2 + 1784) + 8 * v49);
    if (!v67 || (v68 = *v67) == 0)
    {
LABEL_286:
      v154 = (char *)__cxa_allocate_exception(0x580uLL);
      *(_QWORD *)v154 = &off_24C9BFC10;
      snprintf(v154 + 8, 0x576uLL, "[%s] %s", "Unknown", "Failed to find pose_ref!");
      *(_QWORD *)v154 = &off_24CA05150;
      __cxa_throw(v154, (struct type_info *)&unk_24CA05168, (void (*)(void *))std::exception::~exception);
    }
    if (v48.u32[0] < 2uLL)
    {
      v69 = *(_QWORD *)&v46 - 1;
      while (1)
      {
        v71 = v68[1];
        if (v71 == v47)
        {
          if (*((_DWORD *)v68 + 8) == (_DWORD)v44 && v68[2] == v213.i64[0] && *((_DWORD *)v68 + 6) == v213.i32[2])
            goto LABEL_115;
        }
        else if ((v71 & v69) != v49)
        {
          goto LABEL_286;
        }
        v68 = (uint64_t *)*v68;
        if (!v68)
          goto LABEL_286;
      }
    }
    while (1)
    {
      v70 = v68[1];
      if (v70 == v47)
      {
        if (*((_DWORD *)v68 + 8) == (_DWORD)v44 && v68[2] == v213.i64[0] && *((_DWORD *)v68 + 6) == v213.i32[2])
        {
LABEL_115:
          v72 = *(_QWORD *)(*(_QWORD *)v18 + 72) + 40 * v42;
          v73 = *(float *)(v72 + 8);
          v74 = *(float *)(v72 + 12);
          v75 = v68[13];
          v76 = *(_DWORD *)(v75 + 992);
          if (v76 == -1)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_369;
            }
            v76 = *(_DWORD *)(v75 + 992);
            v77 = v73;
            v78 = v74;
            if (v76 > 7)
              goto LABEL_121;
LABEL_117:
            if (v76)
            {
LABEL_122:
              *(double *)v20.i64 = *(double *)(v75 + 88) + *(double *)(v75 + 72) * v77 + *(double *)(v75 + 80) * v78;
              v79 = *(double *)(v75 + 104);
              v19.i64[0] = *(_QWORD *)(v75 + 112);
              *(double *)v45.i64 = v79 * v78 + *(double *)v19.i64;
              v243 = *(double *)v20.i64;
              v244 = v45.i64[0];
LABEL_123:
              v215 = &v211;
              v216 = (float64x2_t *)&v243;
              v218 = 0;
              v219 = 0;
              v217 = 0;
              if (v76 > 7)
                goto LABEL_167;
LABEL_124:
              if (v76 > 3)
              {
                v86 = (uint64_t)v215;
                v85 = (double *)v216;
                v87 = v217;
                v88 = v218;
                v89 = v219;
                if (v76 > 5)
                {
                  if (v76 == 6)
                    v90 = sub_20EB41C58((double *)v75, (uint64_t)v215, v216->f64, v217, (uint64_t)v218, v219);
                  else
                    v90 = sub_20EB306CC(v75, (uint64_t)v215, v216, v217, (unint64_t)v218, v219, *(double *)v45.i64, v79, v19, (int8x16_t)v20, *(double *)v21.i64, v22.f64[0], v23);
                }
                else if (v76 == 5)
                {
                  if (v217)
                  {
                    v217->f64[0] = 0.0;
                    v87->f64[1] = 0.0;
                    v87[1].f64[0] = 0.0;
                  }
                  if (v89)
                  {
                    *(_QWORD *)(v89 + 64) = 0;
                    *(_OWORD *)(v89 + 32) = 0u;
                    *(_OWORD *)(v89 + 48) = 0u;
                    *(_OWORD *)v89 = 0u;
                    *(_OWORD *)(v89 + 16) = 0u;
                  }
                  if (v88)
                    v90 = sub_20EB28F10(v86, (uint64_t)v88, v85, v75 + 168, 5);
                  else
                    v90 = sub_20EB2886C(v86, v85, v75 + 168, 5);
                }
                else
                {
                  if (v217)
                  {
                    v217->f64[0] = 0.0;
                    v87->f64[1] = 0.0;
                    v87[1].f64[0] = 0.0;
                  }
                  if (v89)
                  {
                    *(_QWORD *)(v89 + 64) = 0;
                    v45 = 0uLL;
                    *(_OWORD *)(v89 + 32) = 0u;
                    *(_OWORD *)(v89 + 48) = 0u;
                    *(_OWORD *)v89 = 0u;
                    *(_OWORD *)(v89 + 16) = 0u;
                  }
                  if (v88)
                  {
                    if (!*(_BYTE *)(v75 + 468))
                    {
                      v45.i64[0] = sub_20EB27C0C(v75 + 204, (double *)(v75 + 168), 0x32uLL, v45, v79, v19, (int8x16_t)v20).u64[0];
                      *(_BYTE *)(v75 + 468) = 1;
                    }
                    v90 = sub_20EA8D684(v86, (uint64_t)v85, (int64x2_t *)(v75 + 168), (float *)(v75 + 204), v88, 5, *(double *)v45.i64, v79, *(double *)v19.i64, *(double *)v20.i64, *(double *)v21.i64, v22.f64[0], v23);
                  }
                  else
                  {
                    if (!*(_BYTE *)(v75 + 468))
                    {
                      v45.i64[0] = sub_20EB27C0C(v75 + 204, (double *)(v75 + 168), 0x32uLL, v45, v79, v19, (int8x16_t)v20).u64[0];
                      *(_BYTE *)(v75 + 468) = 1;
                    }
                    v90 = sub_20EA8D684(v86, (uint64_t)v85, (int64x2_t *)(v75 + 168), (float *)(v75 + 204), 0, 5, *(double *)v45.i64, v79, *(double *)v19.i64, *(double *)v20.i64, *(double *)v21.i64, v22.f64[0], v23);
                  }
                }
                goto LABEL_214;
              }
              if (v76 > 1)
              {
                if (v76 == 2)
                {
                  v90 = sub_20EA8D22C((uint64_t)&v215, v75);
                }
                else
                {
                  v96 = (double *)v215;
                  v97 = (double *)v216;
                  v99 = v217;
                  v98 = v218;
                  v100 = v219;
                  if (v217)
                  {
                    v217->f64[0] = 0.0;
                    v99->f64[1] = 0.0;
                    v99[1].f64[0] = 0.0;
                  }
                  if (v100)
                  {
                    *(_QWORD *)(v100 + 64) = 0;
                    v45.i64[0] = 0;
                    *(_OWORD *)(v100 + 32) = 0u;
                    *(_OWORD *)(v100 + 48) = 0u;
                    *(_OWORD *)v100 = 0u;
                    *(_OWORD *)(v100 + 16) = 0u;
                  }
                  if (v98)
                    v90 = sub_20EB27398(v96, (uint64_t)v98, v97, (int64x2_t *)(v75 + 168), 20, *(double *)v45.i64, v79, *(double *)v19.i64, *(double *)v20.i64, (int64x2_t)v21);
                  else
                    v90 = sub_20EB23DF0((uint64_t)v96, v97, (int64x2_t *)(v75 + 168), 20, *(double *)v45.i64, v79, *(double *)v19.i64, *(double *)v20.i64, (int64x2_t)v21, v22);
                }
                goto LABEL_214;
              }
              if (v76)
              {
                v80 = (uint64_t)v215;
                v82 = v217;
                v81 = v218;
                v83 = v219;
                v84 = *v216;
                *v215 = *v216;
                *(_QWORD *)(v80 + 16) = 0x3FF0000000000000;
                if (v82)
                {
                  v82->f64[0] = 0.0;
                  v82->f64[1] = 0.0;
                  v82[1].f64[0] = 0.0;
                }
                if (v81)
                {
                  *v81 = (float64x2_t)xmmword_210312EC0;
                  v81[1] = (float64x2_t)unk_210312ED0;
                  v84.f64[1] = 0.0;
                  v81[2] = (float64x2_t)xmmword_210312EE0;
                }
                if (v83)
                {
                  *(_QWORD *)(v83 + 64) = 0;
                  v84.f64[1] = 0.0;
                  *(_OWORD *)(v83 + 32) = 0u;
                  *(_OWORD *)(v83 + 48) = 0u;
                  *(_OWORD *)v83 = 0u;
                  *(_OWORD *)(v83 + 16) = 0u;
                }
                goto LABEL_215;
              }
            }
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
            goto LABEL_369;
          }
          v77 = v73;
          v78 = v74;
          if (v76 <= 7)
            goto LABEL_117;
LABEL_121:
          if (v76 <= 0xD)
            goto LABEL_122;
          v79 = *(double *)(v75 + 88) + *(double *)(v75 + 72) * v77 + *(double *)(v75 + 80) * v78;
          v19.i64[0] = *(_QWORD *)(v75 + 104);
          v20.i64[0] = *(_QWORD *)(v75 + 112);
          *(double *)v45.i64 = *(double *)v19.i64 * v78 + *(double *)v20.i64;
          v243 = v79;
          v244 = v45.i64[0];
          if (v76 == 14)
            goto LABEL_123;
          v91 = &v211;
          v92 = (float64x2_t *)&v243;
          v215 = &v211;
          v216 = (float64x2_t *)&v243;
          v218 = 0;
          v219 = 0;
          v217 = 0;
          if (v76 != -1)
          {
            v93 = 0;
            v94 = 0;
            v95 = 0;
            goto LABEL_194;
          }
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_369;
          }
          v76 = *(_DWORD *)(v75 + 992);
          if (v76 <= 7)
            goto LABEL_124;
LABEL_167:
          v91 = v215;
          if (v76 > 0xB)
          {
            if (v76 <= 0xD)
            {
              if (v76 == 13)
              {
                v90 = sub_20EB43734((double *)v75, (uint64_t)v215, (uint64_t)v216, v217, (uint64_t)v218, v219);
                goto LABEL_214;
              }
              v119 = v217;
              v118 = v218;
              v120 = v219;
              if (v217)
              {
                v217->f64[0] = 0.0;
                v119->f64[1] = 0.0;
                v119[1].f64[0] = 0.0;
              }
              if (v120)
              {
                *(_QWORD *)(v120 + 64) = 0;
                *(_OWORD *)(v120 + 32) = 0u;
                *(_OWORD *)(v120 + 48) = 0u;
                *(_OWORD *)v120 = 0u;
                *(_OWORD *)(v120 + 16) = 0u;
              }
              v91->f64[0] = 0.0;
              v91->f64[1] = 0.0;
              v91[1].f64[0] = 0.0;
              if (v118)
              {
                v118[1] = 0u;
                v118[2] = 0u;
                *v118 = 0u;
              }
              goto LABEL_216;
            }
            v92 = v216;
            v95 = v217;
            v94 = v218;
            v93 = v219;
            if (v76 != 14)
            {
LABEL_194:
              v90 = sub_20EB3CED8(v75, (uint64_t)v91, v92, v95, v94, v93);
              goto LABEL_214;
            }
            if (v217)
            {
              v217->f64[0] = 0.0;
              v95->f64[1] = 0.0;
              v95[1].f64[0] = 0.0;
            }
            if (v93)
            {
              *(_QWORD *)(v93 + 64) = 0;
              *(_OWORD *)(v93 + 32) = 0u;
              *(_OWORD *)(v93 + 48) = 0u;
              *(_OWORD *)v93 = 0u;
              *(_OWORD *)(v93 + 16) = 0u;
            }
            v113 = (*(double *)v75 + *(double *)(v75 + 32)) * 0.5;
            v90 = sub_20EB253A0((uint64_t)v91, (uint64_t)v92, (double *)(v75 + 168), (double *)(v75 + 392), 0x14u, v113);
            if (v94)
            {
              if ((v90 & 1) == 0)
                goto LABEL_216;
              if (!sub_20EB2498C(&v237, (uint64_t)v238, &v235, (uint64_t)v91, (double *)(v75 + 168), v113))
                goto LABEL_216;
              v105.i64[0] = *(_QWORD *)&v91[1].f64[0];
              *(_QWORD *)&v106 = v239.i64[0];
              _Q3 = *(_OWORD *)v238;
              v241 = *(int8x16_t *)v91;
              v242 = (std::__shared_weak_count *)v105.i64[0];
              v236 = 0;
              *(_QWORD *)&_Q5.f64[0] = v105.i64[0];
              *(_QWORD *)&_Q5.f64[1] = v241.i64[0];
              _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v240, _Q5), (float64x2_t)vzip2q_s64(v240, v239), (float64x2_t)vextq_s8(v241, v105, 8uLL)).f64[1];
              __asm { FMLA            D6, D5, V3.D[1] }
              if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v239, (float64x2_t)v241), 1), (float64x2_t)v240, (float64x2_t)v241).f64[0], *(double *)v239.i64)) < 0.00000001)goto LABEL_216;
LABEL_193:
              *(_QWORD *)&v116 = vextq_s8(*(int8x16_t *)v238, *(int8x16_t *)v238, 8uLL).u64[0];
              *((_QWORD *)&_Q3 + 1) = vextq_s8((int8x16_t)v239, (int8x16_t)v239, 8uLL).u64[0];
              *((_QWORD *)&v116 + 1) = v240.i64[0];
              *((_QWORD *)&v106 + 1) = vextq_s8((int8x16_t)v240, (int8x16_t)v240, 8uLL).u64[0];
              *(_OWORD *)object = _Q3;
              *(_QWORD *)&object[16] = v241.i64[0];
              v222 = (void *)vextq_s8(v241, v241, 8uLL).u64[0];
              v221 = v116;
              v224 = (void *)v105.i64[0];
              v223 = v106;
              sub_20E8BE424((uint64_t)&v231);
              v84.f64[0] = v232;
              v117 = vzip2q_s64(v231, v233);
              v84.f64[1] = v234;
              *(int64x2_t *)v94 = vzip1q_s64(v231, v233);
              v94[1] = (float64x2_t)v117;
              v94[2] = v84;
            }
            else
            {
LABEL_214:
              if ((v90 & 1) == 0)
                goto LABEL_216;
            }
LABEL_215:
            *(_QWORD *)&v84.f64[0] = v212;
            _Q1 = v211;
            _Q2 = vmulq_f64(_Q1, _Q1);
            _D3 = v211.f64[1];
            __asm { FMLA            D2, D3, V1.D[1] }
            _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + v84.f64[0] * v84.f64[0]);
            v211 = vmulq_n_f64(v211, _Q2.f64[0]);
            v212 = *(_OWORD *)&vmulq_f64(v84, _Q2);
            goto LABEL_238;
          }
          v101 = (double *)v216;
          v102 = v217;
          v94 = v218;
          v103 = v219;
          if (v76 <= 9)
          {
            if (v76 == 9)
            {
              v90 = sub_20EB35004(v75, (uint64_t)v215, v216, v217, (unint64_t)v218, v219, *(double *)v45.i64, v79, *(double *)v19.i64, v20, v21);
            }
            else
            {
              if (v217)
              {
                v217->f64[0] = 0.0;
                v102->f64[1] = 0.0;
                v102[1].f64[0] = 0.0;
              }
              if (v103)
              {
                *(_QWORD *)(v103 + 64) = 0;
                v45.i64[0] = 0;
                *(_OWORD *)(v103 + 32) = 0u;
                *(_OWORD *)(v103 + 48) = 0u;
                *(_OWORD *)v103 = 0u;
                *(_OWORD *)(v103 + 16) = 0u;
              }
              if (v94)
              {
                v90 = sub_20EB277C4((uint64_t)v91, (uint64_t)v94, v101, v75 + 168, 20, *(double *)v45.i64, v79, *(double *)v19.i64, v20, v21);
              }
              else
              {
                v121 = sqrt(*v101 * *v101 + v101[1] * v101[1]);
                v90 = sub_20EB24018((uint64_t)v91, v101, (double *)(v75 + 168), 20, v121, v121, *(double *)v19.i64, v20, v21);
              }
            }
            goto LABEL_214;
          }
          if (v76 != 10)
          {
            v90 = sub_20EB38E20(v75, (uint64_t)v215, v216, v217, v218, v219);
            goto LABEL_214;
          }
          if (v217)
          {
            v217->f64[0] = 0.0;
            v102->f64[1] = 0.0;
            v102[1].f64[0] = 0.0;
          }
          if (v103)
          {
            *(_QWORD *)(v103 + 64) = 0;
            *(_OWORD *)(v103 + 32) = 0u;
            *(_OWORD *)(v103 + 48) = 0u;
            *(_OWORD *)v103 = 0u;
            *(_OWORD *)(v103 + 16) = 0u;
          }
          v104 = (*(double *)v75 + *(double *)(v75 + 32)) * 0.5;
          v90 = sub_20EB24F38((uint64_t)v91, (uint64_t)v101, v75 + 168, (double *)(v75 + 280), 0x14u, v104);
          if (!v94)
            goto LABEL_214;
          if ((v90 & 1) != 0)
          {
            if (sub_20EB2450C(&v237, (uint64_t)v238, &v235, (uint64_t)v91, (double *)(v75 + 168), v104))
            {
              v105.i64[0] = *(_QWORD *)&v91[1].f64[0];
              *(_QWORD *)&v106 = v239.i64[0];
              _Q3 = *(_OWORD *)v238;
              v241 = *(int8x16_t *)v91;
              v242 = (std::__shared_weak_count *)v105.i64[0];
              v236 = 0;
              *(_QWORD *)&_Q5.f64[0] = v105.i64[0];
              *(_QWORD *)&_Q5.f64[1] = v241.i64[0];
              _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v240, _Q5), (float64x2_t)vzip2q_s64(v240, v239), (float64x2_t)vextq_s8(v241, v105, 8uLL)).f64[1];
              __asm { FMLA            D6, D5, V3.D[1] }
              if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v239, (float64x2_t)v241), 1), (float64x2_t)v240, (float64x2_t)v241).f64[0], *(double *)v239.i64)) >= 0.00000001)goto LABEL_193;
            }
          }
LABEL_216:
          v125 = sub_210219C18();
          v126 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
          if ((v126 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
          {
            __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DDD0);
          }
          if (atomic_load(&qword_254A5A450))
          {
            *(_WORD *)object = 0;
            v128 = (char *)_os_log_send_and_compose_impl();
            v129 = strlen(v128);
            v238[0] = 0;
            pthread_threadid_np(0, v238);
            v130 = v238[0];
            timespec_get((timespec *)v238, 1);
            sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "AddVIOTrackCMToVIODatabase", 0x1AuLL, (__int128 *)(v125 + 1), (__int128 *)(v125 + 5), "Fail to compute calibrated measurement", 0x26uLL, v128, v129, v130, v238);
            std::mutex::lock(&stru_254A5A410);
            v131 = qword_254A5A458;
            for (j = unk_254A5A460; v131 != j; v131 += 40)
            {
              v133 = *(_QWORD *)(v131 + 32);
              if (!v133)
                sub_20E86D37C();
              (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v133 + 48))(v133, object);
            }
            std::mutex::unlock(&stru_254A5A410);
            if (v230 < 0)
            {
              operator delete(__p);
              if (v228 < 0)
                goto LABEL_226;
LABEL_223:
              if (v226)
              {
LABEL_227:
                if (v225 < 0)
                  operator delete(v224);
              }
            }
            else
            {
              if ((v228 & 0x80000000) == 0)
                goto LABEL_223;
LABEL_226:
              operator delete(v227);
              if (v226)
                goto LABEL_227;
            }
            if (BYTE8(v223) && SBYTE7(v223) < 0)
              operator delete(*((void **)&v221 + 1));
            if (SBYTE7(v221) < 0)
            {
              operator delete(*(void **)&object[8]);
              if (v128)
LABEL_234:
                free(v128);
            }
            else if (v128)
            {
              goto LABEL_234;
            }
          }
          if (os_signpost_enabled((os_log_t)*v125))
          {
            *(_WORD *)object = 0;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          v211 = (float64x2_t)xmmword_2103B4870;
          v212 = 0xBFF0000000000000;
LABEL_238:
          v134 = sub_20F25C29C(v43, v213.i64, *a2, (__int128 *)(v37 + 16), (__int128 *)&v211, a2[1], *(_QWORD *)(*(_QWORD *)v18 + 72) + 40 * v42);
          v135 = v134;
          if (!v134)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/VIODatabaseCMUtil.cpp", 212, (uint64_t)"new_map_track", 13, (uint64_t)"We should be always able to add tracks", 38, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_369;
            }
            if (MEMORY[0xD0] - MEMORY[0xC8] == 32)
              goto LABEL_251;
LABEL_243:
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/VIODatabaseCMUtil.cpp", 214, (uint64_t)"(new_map_track->getTrackLength() == 1u)", 39, (uint64_t)"Length of trak is 1 when first added", 36, (void (*)(void **))sub_21023DDB0);
            v136 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v136 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v137 = qword_254A6DE40;
              for (k = qword_254A6DE48; v137 != k; v137 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v137)(*(_QWORD *)(v137 + 8), "(new_map_track->getTrackLength() == 1u)", 39, "Length of trak is 1 when first added", 36);
            }
            v139 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v139 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (byte_254A6DE68)
            {
              qword_254A6DE58(unk_254A6DE60, "(new_map_track->getTrackLength() == 1u)", 39, "Length of trak is 1 when first added", 36);
              goto LABEL_251;
            }
            goto LABEL_369;
          }
          if (v134[26] - v134[25] != 32)
            goto LABEL_243;
LABEL_251:
          if (*((_BYTE *)v135 + 192))
            v140 = (int8x16_t *)(v135 + 5);
          else
            v140 = 0;
          if (v140[9].i8[4])
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/VIODatabaseCMUtil.cpp", 219, (uint64_t)"!new_track_structure->ValidStructureCovariance()", 48, (uint64_t)"New structure initialized to valid covariance.", 46, (void (*)(void **))sub_21023DDB0);
            v141 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v141 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v142 = qword_254A6DE40;
              for (m = qword_254A6DE48; v142 != m; v142 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v142)(*(_QWORD *)(v142 + 8), "!new_track_structure->ValidStructureCovariance()", 48, "New structure initialized to valid covariance.", 46);
            }
            v144 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v144 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (byte_254A6DE68)
            {
              qword_254A6DE58(unk_254A6DE60, "!new_track_structure->ValidStructureCovariance()", 48, "New structure initialized to valid covariance.", 46);
              goto LABEL_263;
            }
LABEL_369:
            abort();
          }
LABEL_263:
          if (*(_BYTE *)(v37 + 112))
          {
            v145 = *(float64x2_t *)(v37 + 56);
            v146 = vcvt_f32_f64(*(float64x2_t *)(v37 + 40));
            v147 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)v146, v145);
            v140[7] = v147;
            v20.i64[0] = *(_QWORD *)(v37 + 104);
            *(float *)v20.i32 = *(double *)v20.i64;
            v148 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v37 + 72)), *(float64x2_t *)(v37 + 88));
            v140[8] = v148;
            v140[9].i32[0] = v20.i32[0];
            v149 = (int32x4_t)vextq_s8(v147, v148, 0xCuLL);
            v150 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v149, (int8x16_t)v149, 0xCuLL), (int8x16_t)v149, 8uLL);
            v151 = (int32x4_t)vextq_s8(v148, (int8x16_t)v20, 8uLL);
            v22 = (float64x2_t)vextq_s8((int8x16_t)vuzp1q_s32(v151, v151), (int8x16_t)v151, 0xCuLL);
            v19 = vextq_s8((int8x16_t)vuzp1q_s32(v149, v149), (int8x16_t)v149, 0xCuLL);
            v23 = (float64x2_t)vextq_s8((int8x16_t)v151, (int8x16_t)v151, 0xCuLL);
            v20 = (int32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)v151, 8uLL);
            v21 = (int32x4_t)vmlsq_f32(vmulq_f32(v150, (float32x4_t)v22), (float32x4_t)v19, (float32x4_t)v20);
            v140[9].i8[4] = vmla_f32(vmla_lane_f32(vmul_f32(v146, *(float32x2_t *)v21.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1), v146, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL), vcvt_f32_f64(v145)).f32[0] > 0.0;
          }
          v26 = v205;
          v61 = v208;
          if (v208)
          {
LABEL_266:
            v152 = (unint64_t *)&v61->__shared_owners_;
            do
              v153 = __ldaxr(v152);
            while (__stlxr(v153 - 1, v152));
            if (!v153)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
LABEL_28:
          v25 += 6;
          if (v25 == v26)
            goto LABEL_24;
          goto LABEL_29;
        }
      }
      else
      {
        if (v70 >= *(_QWORD *)&v46)
          v70 %= *(_QWORD *)&v46;
        if (v70 != v49)
          goto LABEL_286;
      }
      v68 = (uint64_t *)*v68;
      if (!v68)
        goto LABEL_286;
    }
  }
  v10 = atomic_load((unsigned __int8 *)&qword_254A68A28);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254A68A28))
  {
    sub_21021D3D8(v238);
    sub_20E8610C0(object, "cv3d.vio");
    sub_20E8C4068((uint64_t **)v238, (uint64_t)object, &qword_254A68A20);
    if ((object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_guard_release(&qword_254A68A28);
  }
  *(_QWORD *)&v235.f64[0] = qword_254A68A20;
  if (**(int **)(qword_254A68A20 + 56) <= 2)
  {
    v11 = *(unsigned __int8 *)(qword_254A68A20 + 72);
    v12 = sub_20E8C31DC(qword_254A68A20, "OSLogSurrogateAppender", 1, 0);
    v13 = v12;
    if (v11 || v12)
    {
      v238[0] = (__uint64_t)&v235;
      v238[1] = std::chrono::steady_clock::now().__d_.__rep_;
      *(std::chrono::system_clock::time_point *)v239.i8 = std::chrono::system_clock::now();
      v239.i32[2] = 2;
      v240.i64[0] = (uint64_t)"unknown file";
      v240.i32[2] = 231;
      v241.i64[1] = 0;
      v242 = 0;
      v241.i64[0] = (uint64_t)"unknown function";
      v14 = *(_QWORD *)v238[0];
      v15 = *(_QWORD *)v238[0] + 16;
      if (*(char *)(*(_QWORD *)v238[0] + 39) < 0)
      {
        v17 = *(const char **)(v14 + 16);
        v16 = *(_QWORD *)(v14 + 24);
      }
      else
      {
        v16 = *(unsigned __int8 *)(*(_QWORD *)v238[0] + 39);
        v17 = (const char *)(v14 + 16);
      }
      v155 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v155 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v221 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v156 = byte_254A4A4F8;
      else
        v156 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v157 = byte_254A4A4F8[23];
      else
        v157 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v156, v17);
      v158 = &object[8];
      if (v157 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v157 >= 0x17)
      {
        v159 = v13;
        v160 = v17;
        v161 = v14;
        v162 = v11;
        v163 = v15;
        v164 = (v157 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v157 | 7) != 0x17)
          v164 = v157 | 7;
        v165 = v164 + 1;
        v158 = operator new(v164 + 1);
        *(_QWORD *)&object[16] = v157;
        *(_QWORD *)&v221 = v165 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v158;
        v15 = v163;
        v11 = v162;
        v14 = v161;
        v17 = v160;
        v13 = v159;
      }
      else
      {
        BYTE7(v221) = v157;
        if (!v157)
        {
LABEL_303:
          v158[v157] = 0;
          BYTE8(v221) = 1;
          v166 = &v222;
          if (v16 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v16 >= 0x17)
          {
            v167 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v16 | 7) != 0x17)
              v167 = v16 | 7;
            v168 = v167 + 1;
            v166 = operator new(v167 + 1);
            *(_QWORD *)&v223 = v16;
            *((_QWORD *)&v223 + 1) = v168 | 0x8000000000000000;
            v222 = v166;
          }
          else
          {
            HIBYTE(v223) = v16;
            if (!v16)
              goto LABEL_311;
          }
          memmove(v166, v17, v16);
LABEL_311:
          *((_BYTE *)v166 + v16) = 0;
          LOBYTE(v224) = 1;
          v169 = *(NSObject **)object;
          if (SHIBYTE(v223) < 0)
            operator delete(v222);
          if (BYTE8(v221) && SBYTE7(v221) < 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v13 && *(_QWORD *)(v13 + 24))
          {
            v170 = _os_log_pack_size();
            v171 = (std::__shared_weak_count_vtbl *)operator new(v170, (std::align_val_t)8uLL);
            v172 = (std::__shared_weak_count *)operator new();
            v173 = v172;
            v172->__shared_owners_ = 0;
            v174 = (unint64_t *)&v172->__shared_owners_;
            v172->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v172->__shared_weak_owners_ = 0;
            v172[1].__vftable = v171;
            *(_QWORD *)object = v171;
            *(_QWORD *)&object[8] = v171;
            *(_QWORD *)&object[16] = v172;
            do
              v175 = __ldxr(v174);
            while (__stxr(v175 + 1, v174));
            v221 = 0uLL;
            v222 = 0;
            do
              v176 = __ldaxr(v174);
            while (__stlxr(v176 - 1, v174));
            if (!v176)
            {
              ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
              std::__shared_weak_count::__release_weak(v173);
            }
            v177 = *(_QWORD *)object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v178 = operator new();
            v179 = *(unsigned __int8 *)(v14 + 39);
            if ((v179 & 0x80u) == 0)
              v180 = v15;
            else
              v180 = *(_QWORD *)(v14 + 16);
            if ((v179 & 0x80u) != 0)
              v179 = *(_QWORD *)(v14 + 24);
            *(_QWORD *)v178 = v177;
            *(_OWORD *)(v178 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v178 + 24) = v221;
            v221 = 0uLL;
            *(_QWORD *)(v178 + 40) = v180;
            *(_QWORD *)(v178 + 48) = v179;
            *(_BYTE *)(v178 + 56) = 2;
            v215 = 0;
            v231.i64[0] = v178;
            (*(void (**)(_QWORD, int64x2_t *))(**(_QWORD **)(v13 + 24) + 40))(*(_QWORD *)(v13 + 24), &v231);
            v181 = v231.i64[0];
            v231.i64[0] = 0;
            if (v181)
            {
              v182 = *(std::__shared_weak_count **)(v181 + 32);
              if (v182)
              {
                v183 = (unint64_t *)&v182->__shared_owners_;
                do
                  v184 = __ldaxr(v183);
                while (__stlxr(v184 - 1, v183));
                if (!v184)
                {
                  ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                  std::__shared_weak_count::__release_weak(v182);
                }
              }
              v185 = *(std::__shared_weak_count **)(v181 + 16);
              if (v185)
              {
                v186 = (unint64_t *)&v185->__shared_owners_;
                do
                  v187 = __ldaxr(v186);
                while (__stlxr(v187 - 1, v186));
                if (!v187)
                {
                  ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                  std::__shared_weak_count::__release_weak(v185);
                }
              }
              MEMORY[0x212BC6398](v181, 0x10F0C40B62ED6C6);
              v215 = 0;
            }
            v188 = (std::__shared_weak_count *)*((_QWORD *)&v221 + 1);
            if (*((_QWORD *)&v221 + 1))
            {
              v189 = (unint64_t *)(*((_QWORD *)&v221 + 1) + 8);
              do
                v190 = __ldaxr(v189);
              while (__stlxr(v190 - 1, v189));
              if (!v190)
              {
                ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                std::__shared_weak_count::__release_weak(v188);
              }
            }
            v191 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v192 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v193 = __ldaxr(v192);
              while (__stlxr(v193 - 1, v192));
              if (!v193)
              {
                ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                std::__shared_weak_count::__release_weak(v191);
              }
            }
          }
          else
          {
            os_log_type_enabled(v169, OS_LOG_TYPE_DEBUG);
            *(_WORD *)object = 0;
            v194 = (void *)_os_log_send_and_compose_impl();
            if (v194)
              free(v194);
          }
          if (v11)
          {
            sub_20E8C003C((uint64_t)v238, "State already exists in vio database");
            sub_20E863570((uint64_t)v238);
          }
          sub_20E863570((uint64_t)v238);
          v195 = v242;
          if (v242)
          {
            v196 = (unint64_t *)&v242->__shared_owners_;
            do
              v197 = __ldaxr(v196);
            while (__stlxr(v197 - 1, v196));
            if (!v197)
            {
              ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
              std::__shared_weak_count::__release_weak(v195);
            }
          }
          return;
        }
      }
      memmove(v158, v156, v157);
      goto LABEL_303;
    }
  }
}

void sub_20F467544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  uint64_t v43;

  if (a43)
  {
    if (a42 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v43 - 240);
  _Unwind_Resume(a1);
}

void sub_20F467584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68A28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68A28);
  _Unwind_Resume(a1);
}

void sub_20F4675DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t v59;

  sub_20E86E8C4(&a59);
  sub_20E86E8C4(&a32);
  sub_20E86E658((uint64_t)&a37);
  sub_20E863714(v59 - 240);
  _Unwind_Resume(a1);
}

void sub_20F467608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  sub_20E86E658((uint64_t)&a37);
  sub_20E863714(v37 - 240);
  _Unwind_Resume(a1);
}

void sub_20F467624(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  sub_20E863714(v2 - 240);
  _Unwind_Resume(a1);
}

void sub_20F467650(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 240);
  _Unwind_Resume(a1);
}

void sub_20F467664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *object,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F4676E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;

  sub_20E96E218((uint64_t)&a37);
  if (v37)
  {
    free(v37);
    sub_20E86665C((uint64_t)&a19);
    _Unwind_Resume(a1);
  }
  sub_20E86665C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20F467758(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  char *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  BOOL v21;
  __int128 v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = a1[29];
  if (v4)
  {
    if (v4 >> 60)
      sub_20E969238();
    v5 = (char *)operator new(16 * v4);
    *a2 = (uint64_t)v5;
    a2[1] = (uint64_t)v5;
    a2[2] = (uint64_t)&v5[16 * v4];
  }
  v6 = (unsigned __int8 *)a1[27];
  v7 = (unsigned __int8 *)(a1 + 28);
  if (v6 != (unsigned __int8 *)(a1 + 28))
  {
    while (1)
    {
      sub_210232668(v6 + 32, (uint64_t)&v22);
      if (v23)
        break;
LABEL_22:
      v19 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = *(unsigned __int8 **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
          v21 = *(_QWORD *)v20 == (_QWORD)v6;
          v6 = v20;
        }
        while (!v21);
      }
      v6 = v20;
      if (v20 == v7)
        return;
    }
    v9 = (_OWORD *)a2[1];
    v8 = a2[2];
    if ((unint64_t)v9 < v8)
    {
      *v9 = v22;
      v10 = v9 + 1;
LABEL_21:
      a2[1] = (uint64_t)v10;
      goto LABEL_22;
    }
    v11 = (_OWORD *)*a2;
    v12 = ((uint64_t)v9 - *a2) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      sub_20E969238();
    v14 = v8 - (_QWORD)v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 60)
        sub_20E877A38();
      v16 = (char *)operator new(16 * v15);
      v17 = &v16[16 * v12];
      *(_OWORD *)v17 = v22;
      v18 = (uint64_t)v17;
      if (v9 == v11)
      {
LABEL_19:
        v10 = v17 + 16;
        *a2 = v18;
        a2[1] = (uint64_t)(v17 + 16);
        a2[2] = (uint64_t)&v16[16 * v15];
        if (!v9)
          goto LABEL_21;
LABEL_20:
        operator delete(v9);
        goto LABEL_21;
      }
    }
    else
    {
      v16 = 0;
      v17 = (char *)(16 * v12);
      *(_OWORD *)(16 * v12) = v22;
      v18 = 16 * v12;
      if (v9 == v11)
        goto LABEL_19;
    }
    do
    {
      *(_OWORD *)(v18 - 16) = *(v9 - 1);
      v18 -= 16;
      --v9;
    }
    while (v9 != v11);
    v9 = (_OWORD *)*a2;
    v10 = v17 + 16;
    *a2 = v18;
    a2[1] = (uint64_t)(v17 + 16);
    a2[2] = (uint64_t)&v16[16 * v15];
    if (!v9)
      goto LABEL_21;
    goto LABEL_20;
  }
}

void sub_20F467970(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F467994(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t i;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  int8x8_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t **v33;
  uint64_t **v34;
  uint64_t *v35;
  unsigned int v36;
  char *v37;
  uint64_t *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _QWORD *v43;
  _QWORD *v44;
  BOOL v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t v48;

  v4 = a2[1];
  v5 = a2[2];
  if (v4 != v5)
  {
    v6 = a1[1];
    if (v6)
    {
      v7 = *a1;
      v8 = v6 - 1;
      if ((v6 & (v6 - 1)) != 0)
      {
        do
        {
          v13 = *(unsigned int *)(v4 + 24);
          v14 = v13;
          if (v6 <= v13)
            v14 = v13 % v6;
          v15 = *(uint64_t **)(v7 + 8 * v14);
          if (v15)
          {
            while (1)
            {
              v15 = (uint64_t *)*v15;
              if (!v15)
                break;
              v16 = v15[1];
              if (v16 == v13)
              {
                if (*((_DWORD *)v15 + 4) == (_DWORD)v13)
                {
                  *(_DWORD *)(v4 + 24) = *((_DWORD *)v15 + 5);
                  break;
                }
              }
              else
              {
                if (v16 >= v6)
                  v16 %= v6;
                if (v16 != v14)
                  break;
              }
            }
          }
          v4 += 712;
        }
        while (v4 != v5);
      }
      else
      {
        v9 = v6 + 0xFFFFFFFF;
        do
        {
          v10 = *(unsigned int *)(v4 + 24);
          v11 = *(uint64_t **)(v7 + 8 * (v9 & v10));
          if (v11)
          {
            while (1)
            {
              v11 = (uint64_t *)*v11;
              if (!v11)
                break;
              v12 = v11[1];
              if (v12 == v10)
              {
                if (*((_DWORD *)v11 + 4) == (_DWORD)v10)
                {
                  *(_DWORD *)(v4 + 24) = *((_DWORD *)v11 + 5);
                  break;
                }
              }
              else if ((v12 & v8) != (v9 & v10))
              {
                break;
              }
            }
          }
          v4 += 712;
        }
        while (v4 != v5);
      }
    }
  }
  v17 = a2[107];
  for (i = a2[108]; v17 != i; v17 += 472)
    sub_20F467D8C(a1, v17);
  v47 = 0;
  v48 = 0;
  v46 = &v47;
  v19 = (_QWORD *)a2[111];
  v20 = a2 + 112;
  if (v19 != a2 + 112)
  {
LABEL_31:
    v23 = *((unsigned int *)v19 + 8);
    v24 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v24)
      goto LABEL_51;
    v25 = (uint8x8_t)vcnt_s8(v24);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      v26 = *((unsigned int *)v19 + 8);
      if (*(_QWORD *)&v24 <= v23)
        v26 = v23 % *(_QWORD *)&v24;
    }
    else
    {
      v26 = (v24.i32[0] - 1) & v23;
    }
    v27 = *(uint64_t ***)(*a1 + 8 * v26);
    if (!v27 || (v28 = *v27) == 0)
    {
LABEL_51:
      v32 = v47;
      v33 = &v47;
      v34 = &v47;
      if (!v47)
        goto LABEL_58;
      goto LABEL_52;
    }
    if (v25.u32[0] < 2uLL)
    {
      v29 = *(_QWORD *)&v24 - 1;
      while (1)
      {
        v31 = v28[1];
        if (v31 == v23)
        {
          if (*((_DWORD *)v28 + 4) == (_DWORD)v23)
            goto LABEL_68;
        }
        else if ((v31 & v29) != v26)
        {
          goto LABEL_51;
        }
        v28 = (uint64_t *)*v28;
        if (!v28)
          goto LABEL_51;
      }
    }
    while (1)
    {
      v30 = v28[1];
      if (v30 == v23)
      {
        if (*((_DWORD *)v28 + 4) == (_DWORD)v23)
        {
LABEL_68:
          LODWORD(v23) = *((_DWORD *)v28 + 5);
          v32 = v47;
          v33 = &v47;
          v34 = &v47;
          if (!v47)
          {
LABEL_58:
            v37 = (char *)operator new(0x88uLL);
            *((_DWORD *)v37 + 8) = v23;
            *(_OWORD *)(v37 + 40) = 0u;
            *(_OWORD *)(v37 + 56) = 0u;
            *(_OWORD *)(v37 + 72) = 0u;
            *(_OWORD *)(v37 + 88) = 0u;
            *(_OWORD *)(v37 + 104) = 0u;
            *(_OWORD *)(v37 + 120) = 0u;
            *(_QWORD *)v37 = 0;
            *((_QWORD *)v37 + 1) = 0;
            *((_QWORD *)v37 + 2) = v34;
            *v33 = (uint64_t *)v37;
            v38 = (uint64_t *)v37;
            if (*v46)
            {
              v46 = (uint64_t **)*v46;
              v38 = *v33;
            }
            sub_20E868578(v47, v38);
            ++v48;
            goto LABEL_62;
          }
LABEL_52:
          v35 = v32;
          while (1)
          {
            while (1)
            {
              v34 = (uint64_t **)v35;
              v36 = *((_DWORD *)v35 + 8);
              if (v23 >= v36)
                break;
              v35 = *v34;
              v33 = v34;
              if (!*v34)
                goto LABEL_58;
            }
            if (v36 >= v23)
              break;
            v35 = v34[1];
            if (!v35)
            {
              v33 = v34 + 1;
              goto LABEL_58;
            }
          }
          v37 = (char *)v34;
LABEL_62:
          v39 = *(_OWORD *)(v19 + 5);
          *(_OWORD *)(v37 + 56) = *(_OWORD *)(v19 + 7);
          *(_OWORD *)(v37 + 40) = v39;
          v40 = *(_OWORD *)(v19 + 9);
          v41 = *(_OWORD *)(v19 + 11);
          v42 = *(_OWORD *)(v19 + 13);
          *(_OWORD *)(v37 + 120) = *(_OWORD *)(v19 + 15);
          *(_OWORD *)(v37 + 104) = v42;
          *(_OWORD *)(v37 + 88) = v41;
          *(_OWORD *)(v37 + 72) = v40;
          v43 = (_QWORD *)v19[1];
          if (v43)
          {
            do
            {
              v44 = v43;
              v43 = (_QWORD *)*v43;
            }
            while (v43);
          }
          else
          {
            do
            {
              v44 = (_QWORD *)v19[2];
              v45 = *v44 == (_QWORD)v19;
              v19 = v44;
            }
            while (!v45);
          }
          v19 = v44;
          if (v44 == v20)
            break;
          goto LABEL_31;
        }
      }
      else
      {
        if (v30 >= *(_QWORD *)&v24)
          v30 %= *(_QWORD *)&v24;
        if (v30 != v26)
          goto LABEL_51;
      }
      v28 = (uint64_t *)*v28;
      if (!v28)
        goto LABEL_51;
    }
  }
  sub_20E86872C((uint64_t)(a2 + 111), (_QWORD *)a2[112]);
  v21 = v47;
  a2[111] = v46;
  a2[112] = v21;
  v22 = v48;
  a2[113] = v48;
  if (v22)
  {
    v21[2] = (uint64_t)v20;
    v46 = &v47;
    v47 = 0;
    v48 = 0;
    v21 = 0;
  }
  else
  {
    a2[111] = v20;
  }
  sub_20E86872C((uint64_t)&v46, v21);
}

void sub_20F467D74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  sub_20E86872C((uint64_t)va, v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F467D8C(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int8x8_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v2 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v2 != -1)
  {
    v3 = (int8x8_t)result[1];
    if (v3)
    {
      v4 = (uint8x8_t)vcnt_s8(v3);
      v4.i16[0] = vaddlv_u8(v4);
      if (v4.u32[0] > 1uLL)
      {
        v5 = *(unsigned int *)(a2 + 40);
        if (*(_QWORD *)&v3 <= v2)
          v5 = v2 % *(_QWORD *)&v3;
      }
      else
      {
        v5 = (v3.i32[0] - 1) & v2;
      }
      v6 = *(uint64_t ***)(*result + 8 * v5);
      if (v6)
      {
        v7 = *v6;
        if (v7)
        {
          if (v4.u32[0] < 2uLL)
          {
            v8 = *(_QWORD *)&v3 - 1;
            while (1)
            {
              v10 = v7[1];
              if (v10 == v2)
              {
                if (*((_DWORD *)v7 + 4) == (_DWORD)v2)
                  goto LABEL_23;
              }
              else if ((v10 & v8) != v5)
              {
                goto LABEL_24;
              }
              v7 = (uint64_t *)*v7;
              if (!v7)
                goto LABEL_24;
            }
          }
          do
          {
            v9 = v7[1];
            if (v9 == v2)
            {
              if (*((_DWORD *)v7 + 4) == (_DWORD)v2)
              {
LABEL_23:
                *(_DWORD *)(a2 + 40) = *((_DWORD *)v7 + 5);
                break;
              }
            }
            else
            {
              if (v9 >= *(_QWORD *)&v3)
                v9 %= *(_QWORD *)&v3;
              if (v9 != v5)
                break;
            }
            v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
      }
    }
  }
LABEL_24:
  v11 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v11 != -1)
  {
    v12 = (int8x8_t)result[1];
    if (v12)
    {
      v13 = (uint8x8_t)vcnt_s8(v12);
      v13.i16[0] = vaddlv_u8(v13);
      if (v13.u32[0] > 1uLL)
      {
        v14 = *(unsigned int *)(a2 + 16);
        if (*(_QWORD *)&v12 <= v11)
          v14 = v11 % *(_QWORD *)&v12;
      }
      else
      {
        v14 = (v12.i32[0] - 1) & v11;
      }
      v15 = *(uint64_t ***)(*result + 8 * v14);
      if (v15)
      {
        v16 = *v15;
        if (v16)
        {
          if (v13.u32[0] < 2uLL)
          {
            v17 = *(_QWORD *)&v12 - 1;
            while (1)
            {
              v19 = v16[1];
              if (v19 == v11)
              {
                if (*((_DWORD *)v16 + 4) == (_DWORD)v11)
                  goto LABEL_46;
              }
              else if ((v19 & v17) != v14)
              {
                return result;
              }
              v16 = (uint64_t *)*v16;
              if (!v16)
                return result;
            }
          }
          do
          {
            v18 = v16[1];
            if (v18 == v11)
            {
              if (*((_DWORD *)v16 + 4) == (_DWORD)v11)
              {
LABEL_46:
                *(_DWORD *)(a2 + 16) = *((_DWORD *)v16 + 5);
                return result;
              }
            }
            else
            {
              if (v18 >= *(_QWORD *)&v12)
                v18 %= *(_QWORD *)&v12;
              if (v18 != v14)
                return result;
            }
            v16 = (uint64_t *)*v16;
          }
          while (v16);
        }
      }
    }
  }
  return result;
}

void sub_20F467F58(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  char *v16;
  char *v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t **v20;
  unsigned int v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  _QWORD *v42;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t **v50;
  uint64_t *v51;
  uint64_t v52;

  v51 = 0;
  v52 = 0;
  v50 = &v51;
  v2 = *(_QWORD **)a2;
  v42 = (_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 != a2 + 8)
  {
    do
    {
      v3 = *((unsigned int *)v2 + 8);
      v4 = (int8x8_t)a1[1];
      if (v4)
      {
        v5 = (uint8x8_t)vcnt_s8(v4);
        v5.i16[0] = vaddlv_u8(v5);
        if (v5.u32[0] > 1uLL)
        {
          v6 = *((unsigned int *)v2 + 8);
          if (*(_QWORD *)&v4 <= v3)
            v6 = v3 % *(_QWORD *)&v4;
        }
        else
        {
          v6 = (v4.i32[0] - 1) & v3;
        }
        v7 = *(uint64_t ***)(*a1 + 8 * v6);
        if (v7)
        {
          v8 = *v7;
          if (v8)
          {
            if (v5.u32[0] < 2uLL)
            {
              v9 = *(_QWORD *)&v4 - 1;
              while (1)
              {
                v11 = v8[1];
                if (v11 == v3)
                {
                  if (*((_DWORD *)v8 + 4) == (_DWORD)v3)
                    goto LABEL_25;
                }
                else if ((v11 & v9) != v6)
                {
                  goto LABEL_26;
                }
                v8 = (uint64_t *)*v8;
                if (!v8)
                  goto LABEL_26;
              }
            }
            do
            {
              v10 = v8[1];
              if (v10 == v3)
              {
                if (*((_DWORD *)v8 + 4) == (_DWORD)v3)
                {
LABEL_25:
                  LODWORD(v3) = *((_DWORD *)v8 + 5);
                  break;
                }
              }
              else
              {
                if (v10 >= *(_QWORD *)&v4)
                  v10 %= *(_QWORD *)&v4;
                if (v10 != v6)
                  break;
              }
              v8 = (uint64_t *)*v8;
            }
            while (v8);
          }
        }
      }
LABEL_26:
      v48 = *(_OWORD *)(v2 + 13);
      v49 = *(_OWORD *)(v2 + 15);
      v46 = *(_OWORD *)(v2 + 9);
      v47 = *(_OWORD *)(v2 + 11);
      v44 = *(_OWORD *)(v2 + 5);
      v45 = *(_OWORD *)(v2 + 7);
      v12 = *((_BYTE *)v2 + 136);
      v14 = (_BYTE *)v2[18];
      v13 = (_BYTE *)v2[19];
      v15 = v13 - v14;
      if (v13 == v14)
      {
        v17 = 0;
        v16 = 0;
        v18 = v51;
        v19 = &v51;
        v20 = &v51;
        if (v51)
          goto LABEL_33;
      }
      else
      {
        if (v15 < 0)
          sub_20E867F44();
        v16 = (char *)operator new(v13 - v14);
        v17 = &v16[8 * (v15 >> 3)];
        memcpy(v16, v14, v15);
        v18 = v51;
        v19 = &v51;
        v20 = &v51;
        if (v51)
        {
          while (1)
          {
LABEL_33:
            while (1)
            {
              v20 = (uint64_t **)v18;
              v21 = *((_DWORD *)v18 + 8);
              if (v3 >= v21)
                break;
              v18 = *v20;
              v19 = v20;
              if (!*v20)
                goto LABEL_37;
            }
            if (v21 >= v3)
              goto LABEL_40;
            v18 = v20[1];
            if (!v18)
            {
              v19 = v20 + 1;
              break;
            }
          }
        }
      }
LABEL_37:
      v22 = (char *)operator new(0xA8uLL);
      *(_OWORD *)(v22 + 72) = v46;
      *(_OWORD *)(v22 + 88) = v47;
      *(_OWORD *)(v22 + 104) = v48;
      *(_OWORD *)(v22 + 120) = v49;
      *(_OWORD *)(v22 + 40) = v44;
      *((_DWORD *)v22 + 8) = v3;
      *(_OWORD *)(v22 + 56) = v45;
      v22[136] = v12;
      *((_QWORD *)v22 + 18) = v16;
      *((_QWORD *)v22 + 19) = v17;
      *((_QWORD *)v22 + 20) = v17;
      *(_QWORD *)v22 = 0;
      *((_QWORD *)v22 + 1) = 0;
      *((_QWORD *)v22 + 2) = v20;
      *v19 = (uint64_t *)v22;
      if (*v50)
      {
        v50 = (uint64_t **)*v50;
        v22 = (char *)*v19;
      }
      sub_20E868578(v51, (uint64_t *)v22);
      ++v52;
      v16 = 0;
LABEL_40:
      if (v16)
        operator delete(v16);
      v23 = (_QWORD *)v2[1];
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v2[2];
          v25 = *v24 == (_QWORD)v2;
          v2 = v24;
        }
        while (!v25);
      }
      v2 = v24;
    }
    while (v24 != v42);
  }
  sub_20E8FB1C0(a2, *(_QWORD **)(a2 + 8));
  v26 = v51;
  *(_QWORD *)a2 = v50;
  *(_QWORD *)(a2 + 8) = v26;
  v27 = v52;
  *(_QWORD *)(a2 + 16) = v52;
  if (v27)
  {
    v26[2] = (uint64_t)v42;
    v50 = &v51;
    v51 = 0;
    v52 = 0;
    v26 = 0;
    v28 = *(_QWORD *)(a2 + 48);
    v29 = *(_QWORD *)(a2 + 56);
    if (v28 == v29)
      goto LABEL_75;
  }
  else
  {
    *(_QWORD *)a2 = v42;
    v28 = *(_QWORD *)(a2 + 48);
    v29 = *(_QWORD *)(a2 + 56);
    if (v28 == v29)
      goto LABEL_75;
  }
  v30 = a1[1];
  if (v30)
  {
    v31 = *a1;
    v32 = v30 - 1;
    if ((v30 & (v30 - 1)) != 0)
    {
      do
      {
        v34 = *(unsigned int *)(v28 + 16);
        v35 = v34;
        if (v30 <= v34)
          v35 = v34 % v30;
        v36 = *(uint64_t **)(v31 + 8 * v35);
        if (v36)
        {
          while (1)
          {
            v36 = (uint64_t *)*v36;
            if (!v36)
              break;
            v37 = v36[1];
            if (v37 == v34)
            {
              if (*((_DWORD *)v36 + 4) == (_DWORD)v34)
              {
                *(_DWORD *)(v28 + 16) = *((_DWORD *)v36 + 5);
                break;
              }
            }
            else
            {
              if (v37 >= v30)
                v37 %= v30;
              if (v37 != v35)
                break;
            }
          }
        }
        v28 += 168;
      }
      while (v28 != v29);
    }
    else
    {
      v33 = v30 + 0xFFFFFFFF;
      do
      {
        v38 = *(unsigned int *)(v28 + 16);
        v39 = *(uint64_t **)(v31 + 8 * (v33 & v38));
        if (v39)
        {
          while (1)
          {
            v39 = (uint64_t *)*v39;
            if (!v39)
              break;
            v40 = v39[1];
            if (v40 == v38)
            {
              if (*((_DWORD *)v39 + 4) == (_DWORD)v38)
              {
                *(_DWORD *)(v28 + 16) = *((_DWORD *)v39 + 5);
                break;
              }
            }
            else if ((v40 & v32) != (v33 & v38))
            {
              break;
            }
          }
        }
        v28 += 168;
      }
      while (v28 != v29);
    }
  }
LABEL_75:
  sub_20E8FB1C0((uint64_t)&v50, v26);
}

void sub_20F4683BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;

  if (__p)
    operator delete(__p);
  sub_20E8FB1C0(v27 - 112, *(_QWORD **)(v27 - 104));
  _Unwind_Resume(a1);
}

void sub_20F46840C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t **v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint8x8_t v22;
  unint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  _QWORD **v31;
  BOOL v32;
  __int128 v33;
  uint64_t v34;
  _QWORD **v35;
  _QWORD *v36[2];
  __int128 *v37;

  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = a1[1];
    if (v6)
    {
      v7 = *a1;
      v8 = v6 - 1;
      if ((v6 & (v6 - 1)) != 0)
      {
        do
        {
          v13 = *(unsigned int *)(v4 + 40);
          v14 = v13;
          if (v6 <= v13)
            v14 = v13 % v6;
          v15 = *(uint64_t **)(v7 + 8 * v14);
          if (v15)
          {
            while (1)
            {
              v15 = (uint64_t *)*v15;
              if (!v15)
                break;
              v16 = v15[1];
              if (v16 == v13)
              {
                if (*((_DWORD *)v15 + 4) == (_DWORD)v13)
                {
                  *(_DWORD *)(v4 + 40) = *((_DWORD *)v15 + 5);
                  break;
                }
              }
              else
              {
                if (v16 >= v6)
                  v16 %= v6;
                if (v16 != v14)
                  break;
              }
            }
          }
          v4 += 48;
        }
        while (v4 != v5);
      }
      else
      {
        v9 = v6 + 0xFFFFFFFF;
        do
        {
          v10 = *(unsigned int *)(v4 + 40);
          v11 = *(uint64_t **)(v7 + 8 * (v9 & v10));
          if (v11)
          {
            while (1)
            {
              v11 = (uint64_t *)*v11;
              if (!v11)
                break;
              v12 = v11[1];
              if (v12 == v10)
              {
                if (*((_DWORD *)v11 + 4) == (_DWORD)v10)
                {
                  *(_DWORD *)(v4 + 40) = *((_DWORD *)v11 + 5);
                  break;
                }
              }
              else if ((v12 & v8) != (v9 & v10))
              {
                break;
              }
            }
          }
          v4 += 48;
        }
        while (v4 != v5);
      }
    }
  }
  v18 = (uint64_t **)(a2 + 3);
  v17 = (_QWORD *)a2[3];
  v36[0] = 0;
  v36[1] = 0;
  v35 = v36;
  sub_20E94F000((uint64_t *)&v35, v17, a2 + 4);
  sub_20E86872C((uint64_t)(a2 + 3), (_QWORD *)a2[4]);
  a2[4] = 0;
  a2[5] = 0;
  a2[3] = a2 + 4;
  v19 = (uint64_t)v35;
  if (v35 != v36)
  {
    do
    {
      v33 = *(_OWORD *)(v19 + 32);
      v20 = *(_QWORD *)(v19 + 48);
      v34 = v20;
      v21 = a1[1];
      if (v21)
      {
        v22 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
        v22.i16[0] = vaddlv_u8(v22);
        if (v22.u32[0] > 1uLL)
        {
          v23 = v20;
          if (v21 <= v20)
            v23 = v20 % v21;
        }
        else
        {
          v23 = ((_DWORD)v21 - 1) & v20;
        }
        v24 = *(uint64_t ***)(*a1 + 8 * v23);
        if (v24)
        {
          v25 = *v24;
          if (v25)
          {
            if (v22.u32[0] < 2uLL)
            {
              v26 = v21 - 1;
              while (1)
              {
                v28 = v25[1];
                if (v28 == v20)
                {
                  if (*((_DWORD *)v25 + 4) == (_DWORD)v20)
                    goto LABEL_49;
                }
                else if ((v28 & v26) != v23)
                {
                  goto LABEL_50;
                }
                v25 = (uint64_t *)*v25;
                if (!v25)
                  goto LABEL_50;
              }
            }
            do
            {
              v27 = v25[1];
              if (v27 == v20)
              {
                if (*((_DWORD *)v25 + 4) == (_DWORD)v20)
                {
LABEL_49:
                  LODWORD(v34) = *((_DWORD *)v25 + 5);
                  break;
                }
              }
              else
              {
                if (v27 >= v21)
                  v27 %= v21;
                if (v27 != v23)
                  break;
              }
              v25 = (uint64_t *)*v25;
            }
            while (v25);
          }
        }
      }
LABEL_50:
      v37 = &v33;
      v29 = sub_20F4485F0(v18, (uint64_t *)&v33, (uint64_t)&unk_2102DB95C, &v37);
      memcpy(v29 + 7, (const void *)(v19 + 56), 0x200uLL);
      v30 = *(_QWORD **)(v19 + 8);
      if (v30)
      {
        do
        {
          v31 = (_QWORD **)v30;
          v30 = (_QWORD *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = *(_QWORD ***)(v19 + 16);
          v32 = *v31 == (_QWORD *)v19;
          v19 = (uint64_t)v31;
        }
        while (!v32);
      }
      v19 = (uint64_t)v31;
    }
    while (v31 != v36);
  }
  sub_20E86872C((uint64_t)&v35, v36[0]);
}

void sub_20F4686FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_20E86872C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20F468714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_20E86872C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F46872C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = result[1];
    if (v4)
    {
      v5 = *result;
      v6 = v4 - 1;
      if ((v4 & (v4 - 1)) != 0)
      {
        do
        {
          v11 = *(unsigned int *)(v2 + 16);
          v12 = v11;
          if (v4 <= v11)
            v12 = v11 % v4;
          v13 = *(uint64_t **)(v5 + 8 * v12);
          if (v13)
          {
            while (1)
            {
              v13 = (uint64_t *)*v13;
              if (!v13)
                break;
              v14 = v13[1];
              if (v14 == v11)
              {
                if (*((_DWORD *)v13 + 4) == (_DWORD)v11)
                {
                  *(_DWORD *)(v2 + 16) = *((_DWORD *)v13 + 5);
                  break;
                }
              }
              else
              {
                if (v14 >= v4)
                  v14 %= v4;
                if (v14 != v12)
                  break;
              }
            }
          }
          v2 += 48;
        }
        while (v2 != v3);
      }
      else
      {
        v7 = v4 + 0xFFFFFFFF;
        do
        {
          v8 = *(unsigned int *)(v2 + 16);
          v9 = *(uint64_t **)(v5 + 8 * (v7 & v8));
          if (v9)
          {
            while (1)
            {
              v9 = (uint64_t *)*v9;
              if (!v9)
                break;
              v10 = v9[1];
              if (v10 == v8)
              {
                if (*((_DWORD *)v9 + 4) == (_DWORD)v8)
                {
                  *(_DWORD *)(v2 + 16) = *((_DWORD *)v9 + 5);
                  break;
                }
              }
              else if ((v10 & v6) != (v7 & v8))
              {
                break;
              }
            }
          }
          v2 += 48;
        }
        while (v2 != v3);
      }
    }
  }
  return result;
}

__n128 sub_20F468830@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, float64x2_t *a5@<X4>, _QWORD *a6@<X5>, unsigned int **a7@<X6>, _DWORD *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v16;
  float64x2_t **v17;
  uint64_t *v18;
  uint64_t *v19;
  float64x2_t v21;
  double v22;
  float64x2_t v23;
  double v24;
  float64x2_t *v26;
  double v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  double v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v45;
  double v47;
  float64x2_t v49;
  unsigned int *v50;
  unsigned int *v51;
  float32x2_t v52;
  uint64_t v53;
  float v54;
  float32x4_t v55;
  float32x4_t v56;
  int64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  float64x2_t v81;
  float64x2_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  int64x2_t v138;
  int64x2_t v139;
  int64x2_t v140;
  int64x2_t v141;
  int64x2_t v142;
  int64x2_t v143;
  int64x2_t v144;
  int64x2_t v145;
  int64x2_t v146;
  __n128 result;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  float64x2_t v154;
  float64x2_t v155;
  double v156;
  double v157;
  double v158;
  double v159;
  float64x2_t v160;
  float64x2_t v161;
  int64x2_t v162;
  int64x2_t v163;
  int8x16_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  int8x16_t v180;
  int8x16_t v181;
  double v182;
  int8x16_t v183;
  double v184;
  int8x16_t v185;
  int8x16_t v186;
  double v187;
  int8x16_t v188;
  float64x2_t v189;
  float64_t v190;
  float64x2_t v191;
  float64_t v192;
  float64x2_t v193;
  float64_t v194;
  float64x2_t v195;
  uint64_t v196;
  simd_double2x2 v197;
  float64x2_t v198;
  float64x2_t v199;
  double v200;
  float64x2_t v201;
  double v202;
  float64x2_t v203;
  double v204;
  float64x2_t v205;
  double v206;
  float64x2_t v207;
  double v208;
  simd_double2x2 v209;
  double v210[2];
  double v211[4];

  *a8 = 0;
  v16 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)a1 + 1784), a3);
  if (v16)
    v17 = (float64x2_t **)(v16 + 5);
  else
    v17 = 0;
  if (!v16
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/VIODatabaseCMUtil.cpp", 582, (uint64_t)"ref_proj_ref", 12, (uint64_t)"Failed to find projection ref", 29, (void (*)(void **))sub_21023DDB0)|| ((v18 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)a2 + 1784), a4)) != 0 ? (v19 = v18 + 5) : (v19 = 0), !v18&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/VIODatabaseCMUtil.cpp", 584, (uint64_t)"query_pose_ref", 14, (uint64_t)"Failed to find projection ref", 29, (void (*)(void **))sub_21023DDB0)))
  {
    abort();
  }
  _Q6.f64[0] = (*v17)[1].f64[0];
  v21 = **v17;
  v22 = (*v17)[2].f64[1];
  v23 = *(float64x2_t *)((char *)*v17 + 24);
  v24 = (*v17)[4].f64[0];
  _Q4 = (*v17)[3];
  v26 = v17[2];
  v27 = v26[1].f64[0];
  v28 = a5[1];
  v29 = vmulq_n_f64(*a5, _Q6.f64[0]);
  v30 = vmulq_n_f64(v28, _Q6.f64[0]);
  _Q6.f64[1] = v22;
  v31 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v21, (int64x2_t)v23), v26->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v21, (int64x2_t)v23), *v26, 1), _Q6, v27);
  _D16 = v26->f64[1];
  __asm { FMLA            D6, D16, V4.D[1] }
  _Q6.f64[0] = _Q6.f64[0] + v24 * v27;
  *(_QWORD *)&v37 = *(_OWORD *)&vnegq_f64(v31);
  v39 = a5[2];
  v38 = a5[3];
  v41 = a5[4];
  v40 = a5[5];
  v43 = a5[6];
  v42 = a5[7];
  _Q24 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v29, v39, v22), v41, v24), (float64x2_t)0, v43);
  v45 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v30, v38, v22), v40, v24), (float64x2_t)0, v42);
  _Q0 = vaddq_f64(v43, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(*a5, v37), v39, v31, 1), v41, _Q6.f64[0], 0));
  *(_QWORD *)&v47 = *(_OWORD *)&vaddq_f64(v42, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v28, v37), v38, v31, 1), v40, _Q6.f64[0], 0));
  v150 = (int8x16_t)vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v28, v21, 1), v38, v23, 1), v40, _Q4, 1), (float64x2_t)0, v42);
  v151 = (int8x16_t)vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(*a5, v21, 1), v39, v23, 1), v41, _Q4, 1), (float64x2_t)0, v43);
  v148 = (int8x16_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v28, v21.f64[0]), v38, v23.f64[0]), v40, _Q4.f64[0]), (float64x2_t)0, v42);
  v149 = (int8x16_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*a5, v21.f64[0]), v39, v23.f64[0]), v41, _Q4.f64[0]), (float64x2_t)0, v43);
  _Q3 = (float64x2_t)vzip2q_s64((int64x2_t)v149, (int64x2_t)v151);
  v189 = (float64x2_t)vzip1q_s64((int64x2_t)v149, (int64x2_t)v151);
  v192 = _Q24.f64[1];
  v190 = _Q24.f64[0];
  v191 = _Q3;
  v193 = (float64x2_t)vzip1q_s64((int64x2_t)v148, (int64x2_t)v150);
  v194 = v45.f64[0];
  v49 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v189, _Q0.f64[0]), _Q3, _Q0, 1), v193, v47);
  _Q0.f64[0] = _Q0.f64[1];
  v152 = (int8x16_t)v45;
  v153 = (int8x16_t)_Q24;
  __asm { FMLA            D3, D0, V24.D[1] }
  _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v47, v45.f64[0]);
  v195 = vnegq_f64(v49);
  v196 = *(_OWORD *)&vnegq_f64(_Q3);
  v50 = *a7;
  v51 = a7[1];
  if (*a7 == v51)
  {
    v176 = 0.0;
    v178 = 0.0;
    v168 = 0.0;
    v179 = 0.0;
    v170 = 0.0;
    v180.i64[0] = 0;
    v181.i64[0] = 0;
    v172 = 0.0;
    v182 = 0.0;
    v169 = 0.0;
    v183.i64[0] = 0;
    v175 = 0.0;
    v184 = 0.0;
    v173 = 0.0;
    v185.i64[0] = 0;
    v186.i64[0] = 0;
    v177 = 0.0;
    v187 = 0.0;
    v174 = 0.0;
    v188.i64[0] = 0;
    v171 = 0.0;
  }
  else
  {
    v176 = 0.0;
    v167 = 0;
    v178 = 0.0;
    v168 = 0.0;
    v179 = 0.0;
    v170 = 0.0;
    v180.i64[0] = 0;
    v166 = 0;
    v181.i64[0] = 0;
    v172 = 0.0;
    v182 = 0.0;
    v169 = 0.0;
    v183.i64[0] = 0;
    v175 = 0.0;
    v184 = 0.0;
    v173 = 0.0;
    v185.i64[0] = 0;
    v165 = 0;
    v186.i64[0] = 0;
    v177 = 0.0;
    v187 = 0.0;
    v174 = 0.0;
    v188.i64[0] = 0;
    v52.i32[1] = 0;
    v171 = 0.0;
    do
    {
      v53 = *(_QWORD *)(*a6 + 40 * *v50 + 32);
      if (*(_BYTE *)(v53 + 148))
      {
        v54 = *(float *)(*(_QWORD *)(*a6 + 40 * *v50 + 24) + 32);
        v52.i32[0] = *(_DWORD *)(v53 + 144);
        v56 = *(float32x4_t *)(v53 + 112);
        v55 = *(float32x4_t *)(v53 + 128);
        v198 = vcvtq_f64_f32(*(float32x2_t *)v55.f32);
        v199 = vcvt_hight_f64_f32(v55);
        *(_QWORD *)&v200 = *(_OWORD *)&vcvtq_f64_f32(v52);
        v197.columns[0] = (simd_double2)vcvtq_f64_f32(*(float32x2_t *)v56.f32);
        v197.columns[1] = (simd_double2)vcvt_hight_f64_f32(v56);
        if ((sub_20FC62D74(v211, v210, (uint64_t)&v209, (uint64_t)&v205, (uint64_t)&v201, 0, (uint64_t)&v189, &v195, v200, v199.f64[0], (float64x2_t)v197.columns[1], (float64x2_t *)(v53 + 8), (float64x2_t)v197.columns[0], (float64x2_t *)&v197, v19[4]) & 1) != 0)
        {
          v154 = v207;
          v155 = v205;
          *(double *)v57.i64 = v206;
          v156 = v206;
          *(double *)&v57.i64[1] = v208;
          v163 = v57;
          v57.i64[0] = *(_QWORD *)&v201.f64[0];
          v157 = v202;
          v158 = v208;
          v159 = v204;
          v160 = v203;
          v161 = v201;
          v57.i64[1] = *(_QWORD *)&v203.f64[0];
          v162 = v57;
          *(double *)v57.i64 = v202;
          *(double *)&v57.i64[1] = v204;
          v164 = (int8x16_t)v57;
          v58.f64[0] = v209.columns[0].f64[0];
          v58.f64[1] = v209.columns[1].f64[1];
          v59 = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v54 * v54), 0), v58);
          v209.columns[1].f64[1] = v59.f64[1];
          v209.columns[0].f64[0] = v59.f64[0];
          sub_20E8BE3B0(&v209, &v197);
          v60 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v197.columns[0], v155.f64[0]), (float64x2_t)v197.columns[1], v154.f64[0]);
          v61 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v197.columns[0], v156), (float64x2_t)v197.columns[1], v158);
          v62 = vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)v197.columns[0], v155, 1), (float64x2_t)v197.columns[1], v154, 1);
          v63 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v197.columns[0], v157), (float64x2_t)v197.columns[1], v159);
          v64 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v197.columns[0], v161.f64[0]), (float64x2_t)v197.columns[1], v160.f64[0]);
          v65 = vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)v197.columns[0], v161, 1), (float64x2_t)v197.columns[1], v160, 1);
          v67.f64[0] = v187;
          *(_QWORD *)&v66.f64[0] = v188.i64[0];
          v66.f64[1] = v171;
          v69.f64[0] = v184;
          *(_QWORD *)&v68.f64[0] = v185.i64[0];
          *(_QWORD *)&v68.f64[1] = v165;
          v67.f64[1] = v174;
          v69.f64[1] = v173;
          v71.f64[0] = v182;
          *(_QWORD *)&v70.f64[0] = v183.i64[0];
          v71.f64[1] = v169;
          *(_QWORD *)&v73.f64[0] = v180.i64[0];
          *(_QWORD *)&v72.f64[0] = v181.i64[0];
          *(_QWORD *)&v73.f64[1] = v166;
          *(_QWORD *)&v74.f64[0] = v186.i64[0];
          v75.f64[0] = v178;
          v74.f64[1] = v177;
          v76.f64[0] = v176;
          v70.f64[1] = v175;
          v72.f64[1] = v172;
          v77.f64[0] = v179;
          v77.f64[1] = v170;
          v75.f64[1] = v168;
          *(_QWORD *)&v76.f64[1] = v167;
          v78 = (int8x16_t)vaddq_f64(v76, vmlaq_laneq_f64(vmulq_n_f64(v155, v60.f64[0]), v154, v60, 1));
          v79 = (int8x16_t)vaddq_f64(v75, vmlaq_laneq_f64(vmulq_n_f64(v155, v62.f64[0]), v154, v62, 1));
          v80 = (int8x16_t)vaddq_f64(v77, vmlaq_laneq_f64(vmulq_n_f64(v155, v61.f64[0]), v154, v61, 1));
          *(_QWORD *)&v60.f64[0] = v163.i64[0];
          *(_QWORD *)&v60.f64[1] = v162.i64[0];
          v81 = (float64x2_t)vzip2q_s64(v163, v162);
          v82 = vmlaq_laneq_f64(vmulq_n_f64(v60, v61.f64[0]), v81, v61, 1);
          v83 = (int8x16_t)vaddq_f64(v71, vmlaq_laneq_f64(vmulq_n_f64(v60, v64.f64[0]), v81, v64, 1));
          v84 = (int8x16_t)vaddq_f64(v69, vmlaq_laneq_f64(vmulq_n_f64(v60, v65.f64[0]), v81, v65, 1));
          v85 = (int8x16_t)vaddq_f64(v67, vmlaq_laneq_f64(vmulq_n_f64(v60, v63.f64[0]), v81, v63, 1));
          *(_QWORD *)&v60.f64[1] = v164.i64[1];
          v86 = (float64x2_t)vextq_s8((int8x16_t)v161, v164, 8uLL);
          v60.f64[0] = v160.f64[1];
          v178 = *(double *)v79.i64;
          v179 = *(double *)v80.i64;
          v167 = vextq_s8(v78, v78, 8uLL).u64[0];
          *(_QWORD *)&v168 = vextq_s8(v79, v79, 8uLL).u64[0];
          v180 = (int8x16_t)vaddq_f64(v73, v82);
          v181 = (int8x16_t)vaddq_f64(v72, vmlaq_laneq_f64(vmulq_n_f64(v155, v64.f64[0]), v154, v64, 1));
          v182 = *(double *)v83.i64;
          v183 = (int8x16_t)vaddq_f64(v70, vmlaq_laneq_f64(vmulq_n_f64(v155, v65.f64[0]), v154, v65, 1));
          *(_QWORD *)&v169 = vextq_s8(v83, v83, 8uLL).u64[0];
          *(_QWORD *)&v170 = vextq_s8(v80, v80, 8uLL).u64[0];
          *(_QWORD *)&v175 = vextq_s8(v183, v183, 8uLL).u64[0];
          v176 = *(double *)v78.i64;
          v184 = *(double *)v84.i64;
          v185 = (int8x16_t)vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v86, v65.f64[0]), v60, v65, 1), v68);
          *(_QWORD *)&v172 = vextq_s8(v181, v181, 8uLL).u64[0];
          *(_QWORD *)&v173 = vextq_s8(v84, v84, 8uLL).u64[0];
          v165 = vextq_s8(v185, v185, 8uLL).u64[0];
          v166 = vextq_s8(v180, v180, 8uLL).u64[0];
          v186 = (int8x16_t)vaddq_f64(v74, vmlaq_laneq_f64(vmulq_n_f64(v155, v63.f64[0]), v154, v63, 1));
          v187 = *(double *)v85.i64;
          *(_QWORD *)&v177 = vextq_s8(v186, v186, 8uLL).u64[0];
          *(_QWORD *)&v174 = vextq_s8(v85, v85, 8uLL).u64[0];
          v188 = (int8x16_t)vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v86, v63.f64[0]), v60, v63, 1), v66);
          v52 = (float32x2_t)vextq_s8(v188, v188, 8uLL).u64[0];
          v171 = *(double *)&v52;
          ++*a8;
        }
      }
      ++v50;
    }
    while (v50 != v51);
  }
  v87 = (float64x2_t)vextq_s8(v149, v148, 8uLL);
  v88 = (float64x2_t)vdupq_lane_s64(v149.i64[0], 0);
  v89.f64[0] = 0.0;
  v89.f64[1] = vnegq_f64(v88).f64[1];
  v90 = (float64x2_t)vextq_s8(v151, v150, 8uLL);
  v91 = (float64x2_t)vdupq_lane_s64(v151.i64[0], 0);
  v92.f64[0] = 0.0;
  v92.f64[1] = vnegq_f64(v91).f64[1];
  v93 = (float64x2_t)vdupq_lane_s64(v153.i64[0], 0);
  v94 = (float64x2_t)vextq_s8(v153, v152, 8uLL);
  v95.f64[0] = 0.0;
  v95.f64[1] = vnegq_f64(v93).f64[1];
  v96 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)0, v176), (float64x2_t)0, v178);
  v97 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)0, v178), (float64x2_t)0, v168);
  v98 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)0, v179), (float64x2_t)0, v170);
  v99 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)0, *(double *)v181.i64), (float64x2_t)0, v172);
  v100 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)0, *(double *)v183.i64), (float64x2_t)0, v175);
  v101 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_21030D340, v176), (float64x2_t)xmmword_21030D330, v178), (float64x2_t)0, v179), (float64x2_t)0, *(double *)v181.i64), (float64x2_t)0, *(double *)v183.i64), (float64x2_t)0, *(double *)v186.i64);
  v102 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v96, (float64x2_t)xmmword_21030D340, v179), v89, *(double *)v181.i64), v92, *(double *)v183.i64), v95, *(double *)v186.i64);
  v103 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_21030D340, v178), (float64x2_t)xmmword_21030D330, v168), (float64x2_t)0, v170), (float64x2_t)0, v172), (float64x2_t)0, v175), (float64x2_t)0, v177);
  v104 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v97, (float64x2_t)xmmword_21030D340, v170), v89, v172), v92, v175), v95, v177);
  v105 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)0, *(double *)v186.i64), (float64x2_t)0, v177);
  v106 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v98, (float64x2_t)xmmword_21030D340, *(double *)v180.i64), v89, v182), v92, v184), v95, v187);
  v107 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v99, (float64x2_t)xmmword_21030D340, v182), v89, v169), v92, v173), v95, v174);
  v108 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v100, (float64x2_t)xmmword_21030D340, v184), v89, v173), v92, *(double *)v185.i64), v95, *(double *)v188.i64);
  v109 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v105, (float64x2_t)xmmword_21030D340, v187), v89, v174), v92, *(double *)v188.i64), v95, v171);
  v110 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_21030D340, v179), (float64x2_t)xmmword_21030D330, v170), (float64x2_t)0, *(double *)v180.i64), (float64x2_t)0, v182), (float64x2_t)0, v184), (float64x2_t)0, v187);
  v111 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_21030D340, *(double *)v181.i64), (float64x2_t)xmmword_21030D330, v172), (float64x2_t)0, v182), (float64x2_t)0, v169), (float64x2_t)0, v173), (float64x2_t)0, v174);
  v112 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlaq_n_f64(v99, (float64x2_t)0, v182), v87, v169, 0), v90, v173, 0), v94, v174, 0);
  v113 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_21030D340, *(double *)v183.i64), (float64x2_t)xmmword_21030D330, v175), (float64x2_t)0, v184), (float64x2_t)0, v173), (float64x2_t)0, *(double *)v185.i64), (float64x2_t)0, *(double *)v188.i64);
  v114 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlaq_n_f64(v100, (float64x2_t)0, v184), v87, v173, 0), v90, *(double *)v185.i64, 0), v94, *(double *)v188.i64, 0);
  v115 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_21030D340, *(double *)v186.i64), (float64x2_t)xmmword_21030D330, v177), (float64x2_t)0, v187), (float64x2_t)0, v174), (float64x2_t)0, *(double *)v188.i64), (float64x2_t)0, v171);
  v116 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlaq_n_f64(v105, (float64x2_t)0, v187), v87, v174, 0), v90, *(double *)v188.i64, 0), v94, v171, 0);
  v117 = vmlaq_f64(vnegq_f64(v101), (float64x2_t)0, v103);
  v118 = vmulq_f64(v101, (float64x2_t)0);
  __asm { FMOV            V12.2D, #-1.0 }
  v120 = vmlaq_f64(v118, _Q12, v103);
  v121 = vmlaq_f64(v118, (float64x2_t)0, v103);
  v122 = vmlaq_f64(v121, _Q12, v110);
  v123 = vmlaq_f64(vmulq_f64(v102, (float64x2_t)0), (float64x2_t)0, v104);
  v124 = vmlaq_f64(v123, _Q12, v106);
  v125 = vmlaq_f64(vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlaq_n_f64(v96, (float64x2_t)0, v179), v87, *(double *)v181.i64, 0), v90, *(double *)v183.i64, 0), v94, *(double *)v186.i64, 0), (float64x2_t)0), (float64x2_t)0, vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlaq_n_f64(v97, (float64x2_t)0, v170), v87, v172, 0), v90, v175, 0), v94, v177, 0));
  v126 = vmlaq_f64(v121, (float64x2_t)0, v110);
  v127 = vmlsq_laneq_f64(v126, v111, v88, 1);
  v128 = vmlaq_f64(v123, (float64x2_t)0, v106);
  v129 = vmlsq_laneq_f64(v128, v107, v88, 1);
  v130 = vmlaq_f64(vmlaq_f64(v117, (float64x2_t)0, v110), (float64x2_t)0, v111);
  v131 = vmlaq_f64(vmlaq_f64(v120, (float64x2_t)0, v110), (float64x2_t)0, v111);
  v132 = vmlaq_f64(v122, (float64x2_t)0, v111);
  v133 = vmlaq_f64(v125, (float64x2_t)0, vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlaq_n_f64(v98, (float64x2_t)0, *(double *)v180.i64), v87, v182, 0), v90, v184, 0), v94, v187, 0));
  v134 = vmlsq_lane_f64(v126, v111, v87.f64[0], 0);
  v135 = vmlsq_laneq_f64(v126, v111, v87, 1);
  v136 = vmlsq_lane_f64(v133, v112, v87.f64[0], 0);
  v137 = vmlsq_laneq_f64(v133, v112, v87, 1);
  v138 = (int64x2_t)vmlaq_f64(vmlaq_f64(v131, (float64x2_t)0, v113), (float64x2_t)0, v115);
  v139 = (int64x2_t)vmlaq_f64(vmlaq_f64(v132, (float64x2_t)0, v113), (float64x2_t)0, v115);
  v140 = (int64x2_t)vmlsq_laneq_f64(vmlsq_laneq_f64(v127, v113, v91, 1), v115, v93, 1);
  v141 = (int64x2_t)vmlsq_laneq_f64(vmlsq_laneq_f64(v129, v108, v91, 1), v109, v93, 1);
  v142 = (int64x2_t)vmlsq_lane_f64(vmlsq_lane_f64(v134, v113, v90.f64[0], 0), v115, v94.f64[0], 0);
  v143 = (int64x2_t)vmlsq_laneq_f64(vmlsq_laneq_f64(v135, v113, v90, 1), v115, v94, 1);
  v144 = (int64x2_t)vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(v128, v107, v87.f64[0], 0), v108, v90.f64[0], 0), v109, v94.f64[0], 0);
  v145 = (int64x2_t)vmlsq_laneq_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(v128, v107, v87, 1), v108, v90, 1), v109, v94, 1);
  v146 = (int64x2_t)vmlsq_laneq_f64(vmlsq_laneq_f64(v137, v114, v90, 1), v116, v94, 1);
  *(int64x2_t *)(a9 + 208) = v144;
  *(int64x2_t *)(a9 + 224) = vzip1q_s64((int64x2_t)vmlsq_lane_f64(vmlsq_lane_f64(v136, v114, v90.f64[0], 0), v116, v94.f64[0], 0), v146);
  *(int64x2_t *)(a9 + 160) = v141;
  *(int64x2_t *)(a9 + 176) = vzip2q_s64(v144, v145);
  *(int64x2_t *)(a9 + 256) = v145;
  *(int64x2_t *)(a9 + 272) = v146;
  *(int64x2_t *)(a9 + 112) = vzip1q_s64((int64x2_t)vmlaq_f64(vmlaq_f64(vmlaq_f64(v124, (float64x2_t)0, v107), (float64x2_t)0, v108), (float64x2_t)0, v109), v141);
  *(int64x2_t *)(a9 + 128) = vzip1q_s64(v144, v145);
  *(int64x2_t *)(a9 + 32) = vzip1q_s64(v142, v143);
  *(int64x2_t *)(a9 + 48) = v138;
  *(int64x2_t *)(a9 + 144) = v140;
  result.n128_u64[0] = vdupq_laneq_s64(v139, 1).u64[0];
  result.n128_u64[1] = v140.u64[1];
  *(int64x2_t *)(a9 + 240) = v143;
  *(int64x2_t *)(a9 + 192) = v142;
  *(int64x2_t *)a9 = vzip1q_s64((int64x2_t)vmlaq_f64(vmlaq_f64(v130, (float64x2_t)0, v113), (float64x2_t)0, v115), v138);
  *(int64x2_t *)(a9 + 16) = vzip1q_s64(v139, v140);
  *(int64x2_t *)(a9 + 80) = vzip2q_s64(v142, v143);
  *(int64x2_t *)(a9 + 96) = v139;
  *(__n128 *)(a9 + 64) = result;
  *(_BYTE *)(a9 + 288) = 1;
  return result;
}

uint64_t *sub_20F4692BC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v15;
  int64x2_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int v20;
  int v21;
  uint64_t v23;
  unint64_t v24;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  float64x2_t v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  float64x2_t v36;
  int8x16_t v37;
  int64x2_t v38;
  float64x2_t v40;
  int8x16_t v41;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  float64x2_t v50;
  float64x2_t v52;
  int64x2_t v54;
  float64x2_t v55;
  float64x2_t v57;
  unint64_t v58;
  float64_t v59;
  uint64_t v60;
  double v61;
  float64x2_t v62;
  double v63;
  float64x2_t v64;
  double v65;
  double v67;
  float64x2_t v68;
  double v70;
  int64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v75;
  float64x2_t v76;
  int8x16_t v78;
  int64x2_t v79;
  float64x2_t v80;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  double v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  double v98;
  float64x2_t v99;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;

  v5 = *result;
  v6 = result[1];
  if (*result == v6)
  {
LABEL_15:
    v16 = (int64x2_t *)result[113];
    v17 = (uint64_t *)result[114];
    if (v16 != (int64x2_t *)v17)
    {
      v18 = *(_QWORD *)(a2 + 424);
      do
      {
        v20 = v16[1].i32[0];
        v21 = v16[2].i32[2];
        if (v20 == -1 && v21 == -1)
        {
          v24 = v16[1].u64[1];
          v23 = v16[2].i64[0];
          _Q3 = (float64x2_t)v16[9];
          _Q2 = v16[10];
          v28 = v16[7];
          _Q1 = v16[8];
          v30 = v16[5];
          v29 = v16[6];
          v32 = (float64x2_t)v16[3];
          v31 = v16[4];
          if (v24 == result[110] && v16[2].i32[0] == *((_DWORD *)result + 222))
          {
            v33 = 0;
            v34 = 0;
            v24 = v16->i64[0];
            v23 = v16->i64[1];
            do
            {
              v35 = v34 < 2;
              if (v34 < 2)
                ++v34;
              else
                v34 = 0;
              if (v35)
                ++v33;
              else
                v33 += 4;
            }
            while (v33 != 18);
            v36 = (float64x2_t)vzip2q_s64((int64x2_t)v32, v30);
            v32 = (float64x2_t)vzip1q_s64((int64x2_t)v32, v30);
            v37 = (int8x16_t)vdupq_laneq_s64(v28, 1);
            v38 = vzip1q_s64(v28, (int64x2_t)v36);
            _D4 = v16[7].i64[1];
            v40 = (float64x2_t)vzip1q_s64(v31, v29);
            v41 = vextq_s8((int8x16_t)v36, v37, 8uLL);
            __asm
            {
              FMLS            D20, D4, V3.D[1]
              FMLS            D20, D1, V2.D[0]
            }
            v30.i64[0] = vdupq_laneq_s64(v38, 1).u64[0];
            v30.i64[1] = v41.i64[0];
            v31 = (int64x2_t)v38.u64[0];
            v29 = (int64x2_t)v41.u64[1];
            _Q20.i64[1] = 1.0;
            v28 = (int64x2_t)v40;
            _Q3 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v32, vnegq_f64(_Q3).f64[0]), v36, _Q3, 1), v40, *(double *)_Q2.i64, 0);
            _Q2.i64[0] = _Q20.i64[0];
          }
          v45 = *(_QWORD *)(*(_QWORD *)v18 + 56);
          if (v45)
          {
            v46 = *(_QWORD *)v18 + 56;
            do
            {
              v47 = *(_QWORD *)(v45 + 32);
              if (v47 < v24)
              {
                v45 += 8;
              }
              else if (v47 == v24)
              {
                if (*(_DWORD *)(v45 + 40) < v23)
                  v45 += 8;
                else
                  v46 = v45;
              }
              else
              {
                v46 = v45;
              }
              v45 = *(_QWORD *)v45;
            }
            while (v45);
            if (v46 != *(_QWORD *)v18 + 56)
            {
              v48 = *(_QWORD *)(v46 + 32);
              if (v24 >= v48 && (v24 != v48 || *(_DWORD *)(v46 + 40) <= v23))
              {
                v49 = *(_QWORD *)(v46 + 48);
                if (v49)
                {
                  v50 = (float64x2_t)vzip1q_s64((int64x2_t)v32, v30);
                  _Q0 = (float64x2_t)vzip2q_s64((int64x2_t)v32, v30);
                  v52 = (float64x2_t)vzip1q_s64(v31, v29);
                  _Q17 = (float64x2_t)vextq_s8((int8x16_t)_Q0, (int8x16_t)vdupq_laneq_s64(v28, 1), 8uLL);
                  v54 = vzip1q_s64(v28, (int64x2_t)_Q0);
                  v55 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v50, vnegq_f64(_Q3).f64[0]), _Q0, _Q3, 1), v52, *(double *)_Q2.i64, 0);
                  _D4 = v28.i64[1];
                  __asm { FMLS            D0, D4, V3.D[1] }
                  *(_QWORD *)&v57.f64[0] = vdupq_laneq_s64(v54, 1).u64[0];
                  __asm { FMLS            D0, D1, V2.D[0] }
                  v57.f64[1] = _Q17.f64[0];
                  v58 = v16[8].u64[0];
                  v59 = _Q17.f64[1];
                  v60 = v54.i64[0];
                  v61 = *((double *)result + 8);
                  v62 = *((float64x2_t *)result + 3);
                  v63 = *((double *)result + 11);
                  v64 = *(float64x2_t *)(result + 9);
                  v65 = *((double *)result + 14);
                  _Q30 = *((float64x2_t *)result + 6);
                  v67 = *((double *)result + 17);
                  _Q17.f64[0] = v61;
                  _Q17.f64[1] = v63;
                  v68 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v62, (int64x2_t)v64), *((double *)result + 15)), (float64x2_t)vzip2q_s64((int64x2_t)v62, (int64x2_t)v64), *(float64x2_t *)(result + 15), 1), _Q17, v67);
                  _D3 = result[16];
                  __asm { FMLA            D17, D3, V30.D[1] }
                  v70 = _Q17.f64[0] + v65 * v67;
                  _Q20.i64[0] = *(_QWORD *)(v49 + 16);
                  _Q29.i64[0] = *(_QWORD *)(v49 + 40);
                  v71 = *(int64x2_t *)(v49 + 24);
                  v72 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v49, v71);
                  v73 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v49, v71);
                  v71.i64[0] = *(_QWORD *)(v49 + 88);
                  _Q10 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v72, *(double *)(v49 + 72)), v73, *(float64x2_t *)(v49 + 72), 1), (float64x2_t)vzip1q_s64(_Q20, (int64x2_t)_Q29), *(double *)v71.i64);
                  v75 = (float64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v73.f64[0], 0), (int8x16_t)vdupq_laneq_s64((int64x2_t)v73, 1), 8uLL);
                  v76 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v49, (int64x2_t)v75);
                  _Q25 = (float64x2_t)vzip2q_s64((int64x2_t)v72, (int64x2_t)v75);
                  v78 = vextq_s8((int8x16_t)_Q25, _Q29, 8uLL);
                  v79 = vzip1q_s64(_Q20, (int64x2_t)_Q25);
                  v80 = vmlaq_laneq_f64(vmulq_n_f64(v76, _Q10.f64[0]), _Q25, _Q10, 1);
                  *(_QWORD *)&v75.f64[0] = vdupq_laneq_s64(v79, 1).u64[0];
                  *(_QWORD *)&v75.f64[1] = v78.i64[0];
                  v78.i64[0] = v79.i64[0];
                  __asm { FMLA            D20, D29, V10.D[1] }
                  v82 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v50, v62.f64[0]), v57, v64.f64[0]), v52, _Q30.f64[0]);
                  v83 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)(unint64_t)v60, v62.f64[0]), (float64x2_t)*(unint64_t *)&v59, v64.f64[0]), (float64x2_t)v58, _Q30.f64[0]);
                  v84 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v50, v62, 1), v57, v64, 1), v52, _Q30, 1);
                  v85 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)(unint64_t)v60, v62, 1), (float64x2_t)*(unint64_t *)&v59, v64, 1), (float64x2_t)v58, _Q30, 1);
                  v86 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v50, v61), v57, v63), v52, v65);
                  v87 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)(unint64_t)v60, v61), (float64x2_t)*(unint64_t *)&v59, v63), (float64x2_t)v58, v65);
                  *(_QWORD *)&v88 = *(_OWORD *)&vnegq_f64(v68);
                  v89 = vmlaq_f64(v82, (float64x2_t)0, v55);
                  v90 = vmlaq_f64(v84, (float64x2_t)0, v55);
                  v91 = vmlaq_f64(v86, (float64x2_t)0, v55);
                  v92 = vaddq_f64(v55, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v50, v88), v57, v68, 1), v52, v70, 0));
                  v93 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)v60, v88), (float64x2_t)*(unint64_t *)&v59, v68, 1), (float64x2_t)v58, v70, 0);
                  v94 = vmlaq_laneq_f64(vmulq_n_f64(v76, v89.f64[0]), v75, v89, 1);
                  v95 = vmlaq_laneq_f64(vmulq_n_f64(v76, v90.f64[0]), v75, v90, 1);
                  v96 = vmlaq_laneq_f64(vmulq_n_f64(v76, v91.f64[0]), v75, v91, 1);
                  v97 = vmlaq_laneq_f64(vmulq_n_f64(v76, v92.f64[0]), v75, v92, 1);
                  v98 = *(double *)(v49 + 64);
                  v99 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v78.u64[0], v92.f64[0]), (float64x2_t)v78.u64[1], v92, 1);
                  _Q6 = *(float64x2_t *)(v49 + 48);
                  _D3 = *(_QWORD *)(v49 + 80);
                  __asm { FMLA            D25, D3, V6.D[1] }
                  *(double *)v71.i64 = _Q25.f64[0] + v98 * *(double *)v71.i64;
                  *(_QWORD *)&_Q6.f64[1] = vdupq_laneq_s64((int64x2_t)_Q6, 1).u64[0];
                  v102.f64[0] = _D20 + v98 * *(double *)v71.i64;
                  _Q0.f64[1] = 1.0;
                  v102.f64[1] = 1.0;
                  v103 = vmlaq_n_f64(v80, _Q6, *(double *)v71.i64);
                  v104 = vmlaq_f64(v83, (float64x2_t)0, _Q0);
                  v105 = vmlaq_f64(v85, (float64x2_t)0, _Q0);
                  v106 = vmlaq_f64(v87, (float64x2_t)0, _Q0);
                  v107 = vaddq_f64(_Q0, v93);
                  *(float64x2_t *)a3 = vmlaq_laneq_f64(vmlaq_n_f64(v94, _Q6, v104.f64[0]), v103, v104, 1);
                  *(float64x2_t *)(a3 + 16) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v78.u64[0], v89.f64[0]), (float64x2_t)v78.u64[1], v89, 1), (float64x2_t)*(unint64_t *)&v98, v104.f64[0]), v102, v104, 1);
                  *(float64x2_t *)(a3 + 32) = vmlaq_laneq_f64(vmlaq_n_f64(v95, _Q6, v105.f64[0]), v103, v105, 1);
                  *(float64x2_t *)(a3 + 48) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v78.u64[0], v90.f64[0]), (float64x2_t)v78.u64[1], v90, 1), (float64x2_t)*(unint64_t *)&v98, v105.f64[0]), v102, v105, 1);
                  *(float64x2_t *)(a3 + 64) = vmlaq_laneq_f64(vmlaq_n_f64(v96, _Q6, v106.f64[0]), v103, v106, 1);
                  *(float64x2_t *)(a3 + 80) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v78.u64[0], v91.f64[0]), (float64x2_t)v78.u64[1], v91, 1), (float64x2_t)*(unint64_t *)&v98, v106.f64[0]), v102, v106, 1);
                  *(float64x2_t *)(a3 + 96) = vmlaq_laneq_f64(vmlaq_n_f64(v97, _Q6, v107.f64[0]), v103, v107, 1);
                  *(float64x2_t *)(a3 + 112) = vmlaq_laneq_f64(vmlaq_n_f64(v99, (float64x2_t)*(unint64_t *)&v98, v107.f64[0]), v102, v107, 1);
                  *(_BYTE *)(a3 + 128) = 1;
                  return result;
                }
              }
            }
          }
        }
        else if (v20 == -1 || v21 == -1)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphEdgeUtil.cpp", 36, (uint64_t)"", 0, (uint64_t)"Invalid relocalization results", 30, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        v16 = (int64x2_t *)((char *)v16 + 472);
      }
      while (v16 != (int64x2_t *)v17);
    }
  }
  else
  {
    v7 = **(_QWORD **)(a2 + 424);
    v8 = *(_QWORD *)(v7 + 304);
    if (v8)
    {
      v9 = v7 + 304;
      while (1)
      {
        v10 = *(_DWORD *)(*(_QWORD *)v5 + 16);
        v11 = v9;
        v12 = v8;
        do
        {
          v13 = *(_DWORD *)(v12 + 32);
          _CF = v13 >= v10;
          if (v13 >= v10)
            v15 = (uint64_t *)v12;
          else
            v15 = (uint64_t *)(v12 + 8);
          if (_CF)
            v11 = v12;
          v12 = *v15;
        }
        while (*v15);
        if (v11 == v9 || *(_DWORD *)(v11 + 32) > v10)
          break;
        v5 += 552;
        if (v5 == v6)
          goto LABEL_15;
      }
    }
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 128) = 0;
  return result;
}

void sub_20F469798(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _OWORD *v12;
  char *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  v2 = *(char **)a1;
  if (0xF128CFC4A33F128DLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0x76B981DAE6076CLL)
      sub_20E867F44();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 552 * a2;
    v6 = (char *)operator new(552 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v4[v9];
        v12 = &v4[v9 - 552];
        *(_OWORD *)&v8[v9 - 552] = *v12;
        *v12 = 0u;
        memcpy(&v8[v9 - 536], &v4[v9 - 536], 0x200uLL);
        *(_OWORD *)(v10 - 24) = *(_OWORD *)&v4[v9 - 24];
        *((_QWORD *)v10 - 1) = *(_QWORD *)&v4[v9 - 8];
        *((_QWORD *)v11 - 3) = 0;
        *((_QWORD *)v11 - 2) = 0;
        *((_QWORD *)v11 - 1) = 0;
        v9 -= 552;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v13 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v13 != v2)
      {
        v14 = (void *)*((_QWORD *)v13 - 3);
        if (v14)
        {
          *((_QWORD *)v13 - 2) = v14;
          operator delete(v14);
        }
        v15 = (std::__shared_weak_count *)*((_QWORD *)v13 - 68);
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v13 -= 552;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

char *sub_20F469930(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;

  v3 = 0xF128CFC4A33F128DLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x76B981DAE6076BLL)
    sub_20E867F44();
  if (0xE2519F89467E251ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0xE2519F89467E251ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xF128CFC4A33F128DLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x3B5CC0ED7303B5)
    v5 = 0x76B981DAE6076BLL;
  else
    v5 = v4;
  if (v5 > 0x76B981DAE6076BLL)
    sub_20E877A38();
  v7 = 552 * v5;
  v8 = (char *)operator new(552 * v5);
  v9 = &v8[552 * v3];
  v10 = &v8[v7];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *(_OWORD *)a2 = 0u;
  memcpy(v9 + 16, (const void *)(a2 + 16), 0x200uLL);
  v11 = 0uLL;
  *(_OWORD *)(v9 + 536) = 0u;
  *((_OWORD *)v9 + 33) = *(_OWORD *)(a2 + 528);
  *((_QWORD *)v9 + 68) = *(_QWORD *)(a2 + 544);
  *(_OWORD *)(a2 + 528) = 0u;
  *(_QWORD *)(a2 + 544) = 0;
  v12 = v9 + 552;
  v14 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
  }
  else
  {
    v15 = 0;
    do
    {
      v16 = &v9[v15];
      v17 = &v13[v15];
      v18 = &v13[v15 - 552];
      *(_OWORD *)&v9[v15 - 552] = *(_OWORD *)v18;
      *(_OWORD *)v18 = v11;
      memcpy(&v9[v15 - 536], &v13[v15 - 536], 0x200uLL);
      v11 = 0uLL;
      *(_OWORD *)(v16 - 24) = *(_OWORD *)&v13[v15 - 24];
      *((_QWORD *)v16 - 1) = *(_QWORD *)&v13[v15 - 8];
      *((_QWORD *)v17 - 3) = 0;
      *((_QWORD *)v17 - 2) = 0;
      *((_QWORD *)v17 - 1) = 0;
      v15 -= 552;
    }
    while (&v13[v15] != v14);
    v13 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = &v9[v15];
    a1[1] = v12;
    a1[2] = v10;
    while (v19 != v13)
    {
      v20 = (void *)*((_QWORD *)v19 - 3);
      if (v20)
      {
        *((_QWORD *)v19 - 2) = v20;
        operator delete(v20);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)v19 - 68);
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v19 -= 552;
    }
  }
  if (v13)
    operator delete(v13);
  return v9 + 552;
}

uint64_t sub_20F469B44(uint64_t a1)
{
  __int128 v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_BYTE *)(a1 + 688) = 0;
  *(_BYTE *)(a1 + 736) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_BYTE *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_BYTE *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 728) = -1;
  *(_QWORD *)&v2 = -1;
  *((_QWORD *)&v2 + 1) = -1;
  *(_OWORD *)(a1 + 696) = v2;
  *(_OWORD *)(a1 + 712) = v2;
  v3 = operator new(0x348uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_24C9F1FA0;
  bzero(v3 + 3, 0x330uLL);
  sub_20EF6F198((uint64_t)(v3 + 3));
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v3 + 3;
  *(_QWORD *)(a1 + 64) = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_20F469C98(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  void **v7;
  void **v8;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  char **v15;
  char **v16;
  void **v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  std::__shared_weak_count::~__shared_weak_count(v6);
  operator delete(v10);
  v11 = *v8;
  if (*v8)
  {
    v1[83] = v11;
    operator delete(v11);
    v12 = *v7;
    if (!*v7)
    {
LABEL_3:
      v13 = (void *)v1[72];
      if (!v13)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else
  {
    v12 = *v7;
    if (!*v7)
      goto LABEL_3;
  }
  v1[78] = v12;
  operator delete(v12);
  v13 = (void *)v1[72];
  if (!v13)
  {
LABEL_4:
    v14 = (uint64_t)(v1 + 36);
    v15 = (char **)(v1 + 58);
    v16 = (char **)(v1 + 62);
    v17 = (void **)(v3 + 62);
    v18 = (void *)v1[69];
    if (!v18)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  v1[73] = v13;
  operator delete(v13);
  v14 = (uint64_t)(v1 + 36);
  v15 = (char **)(v1 + 58);
  v16 = (char **)(v1 + 62);
  v17 = (void **)(v3 + 62);
  v18 = (void *)v1[69];
  if (!v18)
  {
LABEL_5:
    v19 = *v17;
    if (!*v17)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_17:
  v1[70] = v18;
  operator delete(v18);
  v19 = *v17;
  if (!*v17)
  {
LABEL_7:
    sub_20F287CFC(v16);
    sub_20F287CFC(v15);
    sub_20F287D84(v14);
    sub_20F287D84(v4);
    v20 = (void *)v1[9];
    if (v20)
    {
      v1[10] = v20;
      operator delete(v20);
      sub_20E86665C(v5);
      v21 = *v3;
      *v3 = 0;
      if (!v21)
      {
LABEL_9:
        v22 = *v2;
        *v2 = 0;
        if (!v22)
          goto LABEL_10;
        goto LABEL_13;
      }
    }
    else
    {
      sub_20E86665C(v5);
      v21 = *v3;
      *v3 = 0;
      if (!v21)
        goto LABEL_9;
    }
    sub_20E8E931C((uint64_t)v3, v21);
    v22 = *v2;
    *v2 = 0;
    if (!v22)
LABEL_10:
      _Unwind_Resume(a1);
LABEL_13:
    sub_20E8E931C((uint64_t)v2, v22);
    _Unwind_Resume(a1);
  }
LABEL_6:
  v1[67] = v19;
  operator delete(v19);
  goto LABEL_7;
}

void sub_20F469DDC(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;

  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a1 + 528);
  if (!*(_QWORD *)a1)
    return;
  v3 = sub_20E9DF85C(a2, *(uint64_t **)a1);
  if (!v3)
    return;
  v4 = v3;
  v5 = v3[7];
  if (!v5)
  {
    v6 = 0;
    v8 = *(_QWORD *)(a1 + 528);
    v9 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 536) - v8) >> 3);
    goto LABEL_9;
  }
  v6 = 0;
  v7 = (_QWORD *)v3[7];
  do
  {
    ++v6;
    v7 = (_QWORD *)*v7;
  }
  while (v7);
  v8 = *(_QWORD *)(a1 + 528);
  v9 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 536) - v8) >> 3);
  if (v9 > v6 - 1)
  {
LABEL_9:
    if (v9 > v6)
      *(_QWORD *)(a1 + 536) = v8 + 24 * v6;
    goto LABEL_11;
  }
  sub_20F469F3C((char **)(a1 + 528), v6 - v9);
  v5 = v4[7];
  v8 = *(_QWORD *)(a1 + 528);
LABEL_11:
  while (v5)
  {
    v11 = *(_QWORD *)(v5 + 24);
    v12 = *(std::__shared_weak_count **)(v5 + 32);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      v15 = *(_OWORD *)(v11 + 24);
      *(_DWORD *)v8 = *(_DWORD *)(v5 + 40);
      *(_OWORD *)(v8 + 8) = v15;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    else
    {
      v10 = *(_OWORD *)(v11 + 24);
      *(_DWORD *)v8 = *(_DWORD *)(v5 + 40);
      *(_OWORD *)(v8 + 8) = v10;
    }
    v5 = *(_QWORD *)v5;
    v8 += 24;
  }
}

void sub_20F469F3C(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v5[24 * a2];
      do
      {
        *((_QWORD *)v5 + 1) = -1;
        *((_QWORD *)v5 + 2) = 0;
        *(_QWORD *)v5 = 0;
        *(_DWORD *)v5 = -1;
        *((_DWORD *)v5 + 4) = -1;
        v5 += 24;
      }
      while (v5 != v11);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[24 * v6];
    v13 = &v12[24 * a2];
    v14 = v12;
    do
    {
      *((_QWORD *)v14 + 1) = -1;
      *((_QWORD *)v14 + 2) = 0;
      *(_QWORD *)v14 = 0;
      *(_DWORD *)v14 = -1;
      *((_DWORD *)v14 + 4) = -1;
      v14 += 24;
    }
    while (v14 != v13);
    v15 = *a1;
    if (v5 != *a1)
    {
      do
      {
        v16 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v12 - 24) = v16;
        v12 -= 24;
        v5 -= 24;
      }
      while (v5 != v15);
      v5 = *a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v10[24 * v9];
    if (v5)
      operator delete(v5);
  }
}

void **sub_20F46A0E0(void **a1, _QWORD **a2, _QWORD *a3, uint64_t *a4, _QWORD *a5, void **a6, __int128 *a7, uint64_t a8, _QWORD *a9, char a10)
{
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  void *v40;
  __int128 v41;
  void *v42;
  _DWORD *v43;
  _BYTE *v44;
  char *v45;
  char *v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  unsigned int v53;
  BOOL v54;
  uint64_t v55;
  int v56;
  int8x8_t v57;
  unsigned int v58;
  unint64_t v59;
  uint8x8_t v60;
  unint64_t v61;
  uint64_t **v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  __n128 v77;
  void *v78;
  char *v79;
  char *v80;
  void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  void *v86;
  unint64_t v87;
  char *v88;
  _QWORD *v89;
  unint64_t *v90;
  unint64_t *v91;
  uint64_t *v92;
  _QWORD *v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  unsigned int v98;
  _QWORD *v99;
  uint64_t *v100;
  _QWORD *v101;
  _OWORD *v102;
  char *v103;
  _QWORD *v104;
  uint64_t *v105;
  _QWORD *v106;
  _QWORD *v107;
  _OWORD *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  int v114;
  double v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  uint64_t *v119;
  _QWORD *v120;
  _QWORD *v121;
  _OWORD *v122;
  char *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  int v137;
  double v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  int8x8_t v142;
  unint64_t v143;
  uint8x8_t v144;
  unint64_t v145;
  uint64_t **v146;
  uint64_t *v147;
  void *v148;
  uint64_t v149;
  BOOL v150;
  unint64_t v151;
  uint64_t v153;
  void *v154;
  _DWORD *v155;
  _DWORD *v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  BOOL v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t **v170;
  uint64_t *v171;
  uint64_t **v172;
  unsigned int v173;
  char *v174;
  uint64_t *v175;
  _QWORD *v176;
  __n128 v178;
  uint64_t *v179;
  void **v180;
  __int128 v181;
  uint64_t *v182;
  _QWORD *v183;
  _QWORD **v184;
  void **v185;
  void *v186;
  _BYTE *v187;
  _OWORD v188[2];
  _BYTE v189[528];
  void *__p[2];
  uint64_t v191;
  __int128 v192;

  v185 = a1 + 3;
  bzero(a1, 0x368uLL);
  a1[109] = (void *)0xBFF0000000000000;
  *((_OWORD *)a1 + 55) = *(_OWORD *)a4;
  a1[112] = *a6;
  v180 = a1 + 113;
  a1[114] = 0;
  a1[115] = 0;
  a1[113] = 0;
  a1[117] = 0;
  a1[118] = 0;
  v184 = (_QWORD **)(a1 + 116);
  a1[116] = a1 + 117;
  v17 = *a7;
  v18 = a7[1];
  a1[123] = (void *)*((_QWORD *)a7 + 4);
  *(_OWORD *)(a1 + 119) = v17;
  *(_OWORD *)(a1 + 121) = v18;
  v19 = (*a2)[7];
  if (!v19)
    goto LABEL_244;
  v179 = (uint64_t *)(a1 + 110);
  v20 = *a4;
  v21 = (uint64_t)(*a2 + 7);
  v22 = *((_DWORD *)a4 + 2);
  do
  {
    v23 = *(_QWORD *)(v19 + 32);
    if (v23 < v20)
    {
      v19 += 8;
    }
    else if (v23 == v20)
    {
      if (*(_DWORD *)(v19 + 40) < v22)
        v19 += 8;
      else
        v21 = v19;
    }
    else
    {
      v21 = v19;
    }
    v19 = *(_QWORD *)v19;
  }
  while (v19);
  if ((_QWORD *)v21 == *a2 + 7
    || (v24 = *(_QWORD *)(v21 + 32), v20 < v24)
    || v20 == v24 && *(_DWORD *)(v21 + 40) > v22
    || (v25 = *(__int128 **)(v21 + 48)) == 0)
  {
LABEL_244:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/VIOKeyframeCM.cpp", 64, (uint64_t)"state_ptr", 9, (uint64_t)"Failed to find state for keyframe", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v183 = a3;
  v26 = *v25;
  v27 = v25[2];
  *((_OWORD *)a1 + 4) = v25[1];
  *((_OWORD *)a1 + 5) = v27;
  *((_OWORD *)a1 + 3) = v26;
  v28 = v25[3];
  v29 = v25[4];
  v30 = v25[6];
  *((_OWORD *)a1 + 8) = v25[5];
  *((_OWORD *)a1 + 9) = v30;
  *((_OWORD *)a1 + 6) = v28;
  *((_OWORD *)a1 + 7) = v29;
  v31 = v25[7];
  v32 = v25[8];
  v33 = v25[9];
  a1[26] = (void *)*((_QWORD *)v25 + 20);
  *((_OWORD *)a1 + 11) = v32;
  *((_OWORD *)a1 + 12) = v33;
  *((_OWORD *)a1 + 10) = v31;
  memcpy(a1 + 27, (char *)v25 + 168, 0x120uLL);
  memcpy(a1 + 63, (char *)v25 + 456, 0x120uLL);
  v34 = *((_QWORD *)v25 + 93);
  v35 = *((_QWORD *)v25 + 94);
  memset(v188, 0, 24);
  v36 = v35 - v34;
  if (v35 == v34)
  {
    v40 = 0;
    v41 = 0uLL;
  }
  else
  {
    v37 = 0x6DB6DB6DB6DB6DB7 * (v36 >> 3);
    if (v37 >= 0x492492492492493)
      sub_20EABADD4();
    *(_QWORD *)&v188[0] = operator new(v36);
    *((_QWORD *)&v188[0] + 1) = *(_QWORD *)&v188[0];
    *(_QWORD *)&v188[1] = *(_QWORD *)&v188[0] + 56 * v37;
    do
    {
      *(_QWORD *)v189 = *(_QWORD *)v34;
      v38 = *(_OWORD *)(v34 + 8);
      *(_QWORD *)&v189[24] = *(_QWORD *)(v34 + 24);
      *(_OWORD *)&v189[8] = v38;
      v39 = *(_OWORD *)(v34 + 32);
      *(_QWORD *)&v189[48] = *(_QWORD *)(v34 + 48);
      *(_OWORD *)&v189[32] = v39;
      sub_20F1C4690((void **)v188, (uint64_t)v189);
      v34 += 56;
    }
    while (v34 != v35);
    v40 = *(void **)&v188[0];
    v41 = *(_OWORD *)((char *)v188 + 8);
    v42 = a1[99];
    if (v42)
    {
      a1[100] = v42;
      v181 = v41;
      operator delete(v42);
      v41 = v181;
      a1[99] = 0;
      a1[100] = 0;
      a1[101] = 0;
    }
  }
  a1[99] = v40;
  *((_OWORD *)a1 + 50) = v41;
  *((_OWORD *)a1 + 54) = v25[51];
  sub_20F23A0A0(*a2, (__int128 *)a4, (char **)&v186);
  v182 = a4;
  memset(v188, 0, 24);
  sub_20F469798((uint64_t)v188, 0xAAAAAAAAAAAAAAABLL * ((v187 - (_BYTE *)v186) >> 3));
  v43 = v186;
  v44 = v187;
  if (v186 != v187)
  {
    while (1)
    {
      v45 = (char *)a2[5];
      v46 = (char *)a2[6];
      if (v46 != v45)
      {
        v47 = (v46 - v45) >> 4;
        v48 = v43[4];
        v49 = *(_QWORD *)v43;
        while (1)
        {
          v50 = v47 >> 1;
          v51 = &v45[16 * (v47 >> 1)];
          v52 = *(_QWORD *)v51;
          v53 = *(_DWORD *)(*(_QWORD *)v51 + 16);
          v54 = v53 >= v48;
          if (v53 != v48)
            goto LABEL_34;
          if (*(_QWORD *)v52 >= v49)
            break;
LABEL_28:
          v45 = v51 + 16;
          v50 = v47 + ~v50;
LABEL_29:
          v47 = v50;
          if (!v50)
            goto LABEL_37;
        }
        if (*(_QWORD *)v52 != v49)
          goto LABEL_29;
        v54 = *(_DWORD *)(v52 + 8) >= v43[2];
LABEL_34:
        if (v54)
          goto LABEL_29;
        goto LABEL_28;
      }
LABEL_37:
      if (v45 == v46)
        break;
      v55 = *(_QWORD *)v45;
      v56 = *(_DWORD *)(*(_QWORD *)v45 + 16);
      if (v56 == v43[4])
      {
        if (*(_QWORD *)v55 != *(_QWORD *)v43)
          goto LABEL_45;
        if (*(_DWORD *)(v55 + 8) == v43[2])
          v46 = v45;
        v57 = (int8x8_t)a5[1];
        if (v57)
        {
LABEL_48:
          v58 = v43[2];
          v59 = v58 ^ __ROR4__(v56, 13);
          v60 = (uint8x8_t)vcnt_s8(v57);
          v60.i16[0] = vaddlv_u8(v60);
          if (v60.u32[0] > 1uLL)
          {
            v61 = v59;
            if (*(_QWORD *)&v57 <= v59)
              v61 = v59 % *(_QWORD *)&v57;
          }
          else
          {
            v61 = (v57.i32[0] - 1) & v59;
          }
          v62 = *(uint64_t ***)(*a5 + 8 * v61);
          if (v62)
          {
            v63 = *v62;
            if (v63)
            {
              v64 = *(_QWORD *)v43;
              if (v60.u32[0] < 2uLL)
              {
                v65 = *(_QWORD *)&v57 - 1;
                while (1)
                {
                  v67 = v63[1];
                  if (v67 == v59)
                  {
                    if (*((_DWORD *)v63 + 8) == v56 && v63[2] == v64 && *((_DWORD *)v63 + 6) == v58)
                      goto LABEL_74;
                  }
                  else if ((v67 & v65) != v61)
                  {
                    goto LABEL_72;
                  }
                  v63 = (uint64_t *)*v63;
                  if (!v63)
                    goto LABEL_72;
                }
              }
              do
              {
                v66 = v63[1];
                if (v66 == v59)
                {
                  if (*((_DWORD *)v63 + 8) == v56 && v63[2] == v64 && *((_DWORD *)v63 + 6) == v58)
                    goto LABEL_74;
                }
                else
                {
                  if (v66 >= *(_QWORD *)&v57)
                    v66 %= *(_QWORD *)&v57;
                  if (v66 != v61)
                    break;
                }
                v63 = (uint64_t *)*v63;
              }
              while (v63);
            }
          }
        }
      }
      else
      {
        v56 = v43[4];
        v57 = (int8x8_t)a5[1];
        if (v57)
          goto LABEL_48;
      }
LABEL_72:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/VIOKeyframeCM.cpp", 83, (uint64_t)"vlad_iter != vlad_descriptors.end()", 35, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v63 = 0;
LABEL_74:
      v68 = a2[1];
      v69 = *((_QWORD *)v46 + 1);
      *(_QWORD *)v189 = *(_QWORD *)v46;
      *(_QWORD *)&v189[8] = v69;
      if (v69)
      {
        v70 = (unint64_t *)(v69 + 8);
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
      }
      v72 = v68 + 3;
      memcpy(&v189[16], v63 + 5, 0x200uLL);
      __p[1] = 0;
      v191 = 0;
      __p[0] = 0;
      sub_20F469DDC((uint64_t)v189, v72);
      v73 = (_QWORD *)*((_QWORD *)&v188[0] + 1);
      if (*((_QWORD *)&v188[0] + 1) >= *(_QWORD *)&v188[1])
      {
        *((_QWORD *)&v188[0] + 1) = sub_20F469930((void **)v188, (uint64_t)v189);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      else
      {
        **((_OWORD **)&v188[0] + 1) = *(_OWORD *)v189;
        *(_QWORD *)v189 = 0;
        *(_QWORD *)&v189[8] = 0;
        memcpy(v73 + 2, &v189[16], 0x200uLL);
        v73[66] = 0;
        v73[68] = 0;
        v73[67] = 0;
        *((_OWORD *)v73 + 33) = *(_OWORD *)__p;
        v73[68] = v191;
        __p[0] = 0;
        __p[1] = 0;
        v191 = 0;
        *((_QWORD *)&v188[0] + 1) = v73 + 69;
      }
      v74 = *(std::__shared_weak_count **)&v189[8];
      if (*(_QWORD *)&v189[8])
      {
        v75 = (unint64_t *)(*(_QWORD *)&v189[8] + 8);
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v43 += 6;
      if (v43 == (_DWORD *)v44)
        goto LABEL_86;
    }
    v56 = v43[4];
LABEL_45:
    v57 = (int8x8_t)a5[1];
    if (v57)
      goto LABEL_48;
    goto LABEL_72;
  }
LABEL_86:
  v77 = (__n128)v188[0];
  v78 = *(void **)&v188[1];
  v79 = (char *)*a1;
  if (*a1)
  {
    v178 = (__n128)v188[0];
    v80 = (char *)a1[1];
    v81 = *a1;
    if (v80 != v79)
    {
      do
      {
        v82 = (void *)*((_QWORD *)v80 - 3);
        if (v82)
        {
          *((_QWORD *)v80 - 2) = v82;
          operator delete(v82);
        }
        v83 = (std::__shared_weak_count *)*((_QWORD *)v80 - 68);
        if (v83)
        {
          p_shared_owners = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(p_shared_owners);
          while (__stlxr(v85 - 1, p_shared_owners));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v77);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        v80 -= 552;
      }
      while (v80 != v79);
      v81 = *a1;
    }
    a1[1] = v79;
    operator delete(v81);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    v77 = v178;
  }
  *(__n128 *)a1 = v77;
  a1[2] = v78;
  v86 = a1[3];
  a1[4] = v86;
  v87 = a2[1][2];
  if (0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)a1[5] - (_BYTE *)v86) >> 3) < v87)
  {
    if (v87 >= 0x222222222222223)
      sub_20E867F44();
    v88 = (char *)operator new(120 * v87);
    a1[3] = v88;
    a1[4] = v88;
    a1[5] = &v88[120 * v87];
    if (v86)
      operator delete(v86);
  }
  v89 = a2[1];
  v91 = (unint64_t *)v186;
  v90 = (unint64_t *)v187;
  *((_QWORD *)&v188[0] + 1) = 0;
  *(_QWORD *)&v188[1] = 0;
  *(_QWORD *)&v188[0] = (char *)v188 + 8;
  if (v186 != v187)
  {
    do
    {
      v92 = sub_20F22F698((uint64_t **)v188, (uint64_t *)v188 + 1, (uint64_t **)v189, (uint64_t **)&v192, v91);
      if (!*v92)
      {
        v93 = operator new(0x38uLL);
        v94 = *(_OWORD *)v91;
        v93[6] = v91[2];
        *((_OWORD *)v93 + 2) = v94;
        v95 = *(_QWORD *)v189;
        *v93 = 0;
        v93[1] = 0;
        v93[2] = v95;
        *v92 = (uint64_t)v93;
        if (**(_QWORD **)&v188[0])
        {
          *(_QWORD *)&v188[0] = **(_QWORD **)&v188[0];
          v93 = (_QWORD *)*v92;
        }
        sub_20E868578(*((uint64_t **)&v188[0] + 1), v93);
        ++*(_QWORD *)&v188[1];
      }
      v91 += 3;
    }
    while (v91 != v90);
    v96 = *(_QWORD *)&v188[1];
    if (*(_QWORD *)&v188[1])
    {
      v97 = *(_QWORD **)&v188[0];
      if (*(_OWORD **)&v188[0] != (_OWORD *)((char *)v188 + 8))
      {
        v98 = 0;
        v99 = v89 + 3;
        do
        {
          v100 = sub_20E9DF85C(v89 + 3, v97 + 4);
          if (v100 && v100[8] > (unint64_t)v98)
            v98 = v100[8];
          v101 = (_QWORD *)v97[1];
          if (v101)
          {
            do
            {
              v102 = v101;
              v101 = (_QWORD *)*v101;
            }
            while (v101);
          }
          else
          {
            do
            {
              v102 = (_OWORD *)v97[2];
              v150 = *(_QWORD *)v102 == (_QWORD)v97;
              v97 = v102;
            }
            while (!v150);
          }
          v97 = v102;
        }
        while (v102 != (_OWORD *)((char *)v188 + 8));
        if (v98)
        {
          v103 = (char *)operator new(16 * v98);
          *(_QWORD *)v189 = v103;
          *(_QWORD *)&v189[8] = v103;
          *(_QWORD *)&v189[16] = &v103[16 * v98];
          v104 = *(_QWORD **)&v188[0];
          if (*(_OWORD **)&v188[0] == (_OWORD *)((char *)v188 + 8))
            goto LABEL_175;
          if (v96 == 1)
          {
            do
            {
              v105 = sub_20E9DF85C(v99, v104 + 4);
              if (v105)
              {
                v106 = (_QWORD *)v105[7];
                while (v106)
                {
                  v110 = v106[3];
                  v106 = (_QWORD *)*v106;
                  if (*(_BYTE *)(v110 + 192))
                  {
                    v111 = (char *)a1[4];
                    if (v111 >= a1[5])
                    {
                      v109 = sub_20F46C0B8(v185, v110);
                    }
                    else
                    {
                      *(_QWORD *)v111 = 0;
                      *((_DWORD *)v111 + 2) = 0;
                      v111[112] = 0;
                      v112 = *(_QWORD *)(v110 + 32);
                      *(_QWORD *)v111 = *(_QWORD *)(v110 + 24);
                      *((_DWORD *)v111 + 2) = v112;
                      v113 = *(_OWORD *)(v110 + 48);
                      *((_QWORD *)v111 + 4) = *(_QWORD *)(v110 + 64);
                      *((_OWORD *)v111 + 1) = v113;
                      v114 = *(unsigned __int8 *)(v110 + 188);
                      v111[112] = v114;
                      if (v114)
                      {
                        v115 = *(float *)(v110 + 184);
                        v116 = vcvtq_f64_f32(*(float32x2_t *)(v110 + 160));
                        v117 = vcvtq_f64_f32(*(float32x2_t *)(v110 + 168));
                        v118 = vcvtq_f64_f32(*(float32x2_t *)(v110 + 176));
                        *(float64x2_t *)(v111 + 40) = vcvtq_f64_f32(*(float32x2_t *)(v110 + 152));
                        *(float64x2_t *)(v111 + 56) = v116;
                        *(float64x2_t *)(v111 + 72) = v117;
                        *(float64x2_t *)(v111 + 88) = v118;
                        *((double *)v111 + 13) = v115;
                      }
                      v109 = v111 + 120;
                    }
                    a1[4] = v109;
                  }
                }
              }
              v107 = (_QWORD *)v104[1];
              if (v107)
              {
                do
                {
                  v108 = v107;
                  v107 = (_QWORD *)*v107;
                }
                while (v107);
              }
              else
              {
                do
                {
                  v108 = (_OWORD *)v104[2];
                  v150 = *(_QWORD *)v108 == (_QWORD)v104;
                  v104 = v108;
                }
                while (!v150);
              }
              v104 = v108;
            }
            while (v108 != (_OWORD *)((char *)v188 + 8));
          }
          else
          {
            do
            {
              v119 = sub_20E9DF85C(v99, v104 + 4);
              if (v119)
              {
                v120 = (_QWORD *)v119[7];
                while (v120)
                {
                  v124 = v120;
                  v125 = v120[3];
                  v127 = *(_QWORD *)(v125 + 24);
                  v126 = *(_QWORD *)(v125 + 32);
                  *(_QWORD *)&v192 = v127;
                  *((_QWORD *)&v192 + 1) = v126;
                  v120 = (_QWORD *)*v120;
                  if (*(_BYTE *)(v125 + 192))
                  {
                    v128 = *(char **)v189;
                    if (*(_QWORD *)&v189[8] != *(_QWORD *)v189)
                    {
                      v129 = (uint64_t)(*(_QWORD *)&v189[8] - *(_QWORD *)v189) >> 4;
                      do
                      {
                        v130 = v129 >> 1;
                        v131 = &v128[16 * (v129 >> 1)];
                        if (*(_QWORD *)v131 < v127
                          || *(_QWORD *)v131 == v127 && *(_DWORD *)&v128[16 * v130 + 8] < v126)
                        {
                          v128 = v131 + 16;
                          v130 = v129 + ~v130;
                        }
                        v129 = v130;
                      }
                      while (v130);
                    }
                    if (v128 == *(char **)&v189[8] || *(_QWORD *)v128 != v127 || *((_DWORD *)v128 + 2) != (_DWORD)v126)
                    {
                      sub_20F0527A0((char **)v189, v128, &v192);
                      v132 = v124[3];
                      v133 = (char *)a1[4];
                      if (v133 >= a1[5])
                      {
                        v123 = sub_20F46C0B8(v185, v132);
                      }
                      else
                      {
                        *(_QWORD *)v133 = 0;
                        *((_DWORD *)v133 + 2) = 0;
                        v133[112] = 0;
                        v134 = v132 + 40;
                        if (!*(_BYTE *)(v132 + 192))
                          v134 = 0;
                        v135 = *(_QWORD *)(v132 + 32);
                        *(_QWORD *)v133 = *(_QWORD *)(v132 + 24);
                        *((_DWORD *)v133 + 2) = v135;
                        v136 = *(_OWORD *)(v134 + 8);
                        *((_QWORD *)v133 + 4) = *(_QWORD *)(v134 + 24);
                        *((_OWORD *)v133 + 1) = v136;
                        v137 = *(unsigned __int8 *)(v134 + 148);
                        v133[112] = v137;
                        if (v137)
                        {
                          v138 = *(float *)(v134 + 144);
                          v139 = vcvtq_f64_f32(*(float32x2_t *)(v134 + 120));
                          v140 = vcvtq_f64_f32(*(float32x2_t *)(v134 + 128));
                          v141 = vcvtq_f64_f32(*(float32x2_t *)(v134 + 136));
                          *(float64x2_t *)(v133 + 40) = vcvtq_f64_f32(*(float32x2_t *)(v134 + 112));
                          *(float64x2_t *)(v133 + 56) = v139;
                          *(float64x2_t *)(v133 + 72) = v140;
                          *(float64x2_t *)(v133 + 88) = v141;
                          *((double *)v133 + 13) = v138;
                        }
                        v123 = v133 + 120;
                      }
                      a1[4] = v123;
                    }
                  }
                }
              }
              v121 = (_QWORD *)v104[1];
              if (v121)
              {
                do
                {
                  v122 = v121;
                  v121 = (_QWORD *)*v121;
                }
                while (v121);
              }
              else
              {
                do
                {
                  v122 = (_OWORD *)v104[2];
                  v150 = *(_QWORD *)v122 == (_QWORD)v104;
                  v104 = v122;
                }
                while (!v150);
              }
              v104 = v122;
            }
            while (v122 != (_OWORD *)((char *)v188 + 8));
          }
          v103 = *(char **)v189;
          if (*(_QWORD *)v189)
          {
LABEL_175:
            *(_QWORD *)&v189[8] = v103;
            operator delete(v103);
          }
        }
      }
    }
  }
  sub_20E86872C((uint64_t)v188, *((_QWORD **)&v188[0] + 1));
  if (v183[3])
  {
    v142 = (int8x8_t)v183[1];
    if (v142)
    {
      v143 = *((unsigned int *)v182 + 2);
      v144 = (uint8x8_t)vcnt_s8(v142);
      v144.i16[0] = vaddlv_u8(v144);
      if (v144.u32[0] > 1uLL)
      {
        v145 = *((unsigned int *)v182 + 2);
        if (*(_QWORD *)&v142 <= v143)
          v145 = v143 % *(_QWORD *)&v142;
      }
      else
      {
        v145 = (v142.i32[0] - 1) & v143;
      }
      v146 = *(uint64_t ***)(*v183 + 8 * v145);
      if (v146)
      {
        v147 = *v146;
        if (v147)
        {
          v148 = (void *)*v182;
          if (v144.u32[0] < 2uLL)
          {
            v149 = *(_QWORD *)&v142 - 1;
            while (1)
            {
              v153 = v147[1];
              if (v153 == v143)
              {
                if ((void *)v147[2] == v148 && *((_DWORD *)v147 + 6) == (_DWORD)v143)
                  goto LABEL_204;
              }
              else if ((v153 & v149) != v145)
              {
                goto LABEL_203;
              }
              v147 = (uint64_t *)*v147;
              if (!v147)
                goto LABEL_203;
            }
          }
          do
          {
            v151 = v147[1];
            if (v151 == v143)
            {
              v150 = (void *)v147[2] == v148 && *((_DWORD *)v147 + 6) == (_DWORD)v143;
              if (v150)
                goto LABEL_204;
            }
            else
            {
              if (v151 >= *(_QWORD *)&v142)
                v151 %= *(_QWORD *)&v142;
              if (v151 != v145)
                break;
            }
            v147 = (uint64_t *)*v147;
          }
          while (v147);
        }
      }
    }
LABEL_203:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/VIOKeyframeCM.cpp", 100, (uint64_t)"graph_node_iter != pose_graph.nodes().end()", 43, (uint64_t)"State does not exist in pose-graph graph", 40, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
LABEL_204:
    if (a10)
      sub_20F7CB71C(v183, v179, a9, (void **)v189);
    else
      sub_20F7C507C(v183, v179, v189);
    v154 = *v180;
    if (*v180)
    {
      a1[114] = v154;
      operator delete(v154);
      *v180 = 0;
      a1[114] = 0;
      a1[115] = 0;
    }
    *(_OWORD *)v180 = *(_OWORD *)v189;
    a1[115] = *(void **)&v189[16];
  }
  v155 = v186;
  if (a1[112] == (void *)*v182)
  {
    v156 = v187;
    if (v186 != v187)
    {
      do
      {
        v161 = (uint64_t)*a2;
        v162 = (*a2)[38];
        if (!v162)
          goto LABEL_226;
        v163 = v155[4];
        v164 = v161 + 304;
        v165 = v161 + 304;
        do
        {
          v166 = *(_DWORD *)(v162 + 32);
          v167 = v166 >= v163;
          if (v166 >= v163)
            v168 = (uint64_t *)v162;
          else
            v168 = (uint64_t *)(v162 + 8);
          if (v167)
            v165 = v162;
          v162 = *v168;
        }
        while (*v168);
        if (v165 != v164 && *(_DWORD *)(v165 + 32) <= v163)
        {
          v169 = v165 + 40;
        }
        else
        {
LABEL_226:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/VIOKeyframeCM.cpp", 115, (uint64_t)"T_ItoC", 6, (uint64_t)"Failed to find I_to_C transform", 31, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v169 = 0;
          v163 = v155[4];
        }
        v170 = (uint64_t **)(a1 + 117);
        while (1)
        {
          v171 = *v170;
          v172 = v170;
          if (!*v170)
            break;
          while (1)
          {
            v170 = (uint64_t **)v171;
            v173 = *((_DWORD *)v171 + 8);
            if (v163 < v173)
              break;
            if (v173 >= v163)
            {
              v174 = (char *)v170;
              goto LABEL_214;
            }
            v171 = v170[1];
            if (!v171)
            {
              v172 = v170 + 1;
              goto LABEL_234;
            }
          }
        }
LABEL_234:
        v174 = (char *)operator new(0x88uLL);
        *((_DWORD *)v174 + 8) = v163;
        *((_OWORD *)v174 + 3) = 0u;
        *((_OWORD *)v174 + 4) = 0u;
        *((_OWORD *)v174 + 5) = 0u;
        *((_QWORD *)v174 + 5) = 0x3FF0000000000000;
        *((_QWORD *)v174 + 9) = 0x3FF0000000000000;
        *((_QWORD *)v174 + 12) = 0;
        *((_QWORD *)v174 + 13) = 0x3FF0000000000000;
        *((_QWORD *)v174 + 15) = 0;
        *((_QWORD *)v174 + 16) = 0;
        *((_QWORD *)v174 + 14) = 0;
        *(_QWORD *)v174 = 0;
        *((_QWORD *)v174 + 1) = 0;
        *((_QWORD *)v174 + 2) = v170;
        *v172 = (uint64_t *)v174;
        v175 = (uint64_t *)v174;
        v176 = (_QWORD *)**v184;
        if (v176)
        {
          *v184 = v176;
          v175 = *v172;
        }
        sub_20E868578((uint64_t *)a1[117], v175);
        a1[118] = (char *)a1[118] + 1;
LABEL_214:
        *(_OWORD *)(v174 + 40) = *(_OWORD *)v169;
        v157 = *(_OWORD *)(v169 + 16);
        v158 = *(_OWORD *)(v169 + 32);
        v159 = *(_OWORD *)(v169 + 48);
        *((_QWORD *)v174 + 13) = *(_QWORD *)(v169 + 64);
        *(_OWORD *)(v174 + 88) = v159;
        *(_OWORD *)(v174 + 72) = v158;
        *(_OWORD *)(v174 + 56) = v157;
        v160 = *(_OWORD *)(v169 + 72);
        *((_QWORD *)v174 + 16) = *(_QWORD *)(v169 + 88);
        *((_OWORD *)v174 + 7) = v160;
        v155 += 6;
      }
      while (v155 != v156);
      v155 = v186;
    }
  }
  if (v155)
  {
    v187 = v155;
    operator delete(v155);
  }
  return a1;
}

void sub_20F46AFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD **a20,void **a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  sub_20E86872C((uint64_t)&a25, (_QWORD *)a26);
  if (__p)
  {
    operator delete(__p);
    sub_20E86872C(a19, *a20);
    v28 = *a14;
    if (!*a14)
    {
LABEL_3:
      v29 = *(void **)(v26 + 792);
      if (!v29)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    sub_20E86872C(a19, *a20);
    v28 = *a14;
    if (!*a14)
      goto LABEL_3;
  }
  *(_QWORD *)(v26 + 912) = v28;
  operator delete(v28);
  v29 = *(void **)(v26 + 792);
  if (!v29)
  {
LABEL_4:
    v30 = *a21;
    if (!*a21)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  *(_QWORD *)(v26 + 800) = v29;
  operator delete(v29);
  v30 = *a21;
  if (!*a21)
  {
LABEL_5:
    sub_20F22CA30((void **)v26);
    _Unwind_Resume(a1);
  }
LABEL_9:
  *(_QWORD *)(v26 + 32) = v30;
  operator delete(v30);
  sub_20F22CA30((void **)v26);
  _Unwind_Resume(a1);
}

uint64_t sub_20F46B1C4(uint64_t result, float64x2_t *a2)
{
  uint64_t v2;
  int v3;
  float64x2_t *v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  float64x2_t v13;
  float64x2_t v14;
  double v15;
  float64_t v16;
  double v23;
  double v25;
  double v28;
  double v32;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  uint64_t v169;
  uint64_t v170;
  double v171;
  double v173;
  double v176;
  double v178;
  double v180;
  double v182;
  float64x2_t v184;
  double v186;
  float64x2_t v187;
  float64x2_t v190;
  double v193;
  float64x2_t v194;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  double v213;
  float64x2_t v214;
  double v215;
  float64x2_t v216;
  double v217;
  float64x2_t v218;
  double v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  _BYTE v324[32];
  float64x2_t v325;
  _BYTE v326[32];
  float64x2_t v327;
  _BYTE v328[32];

  v2 = 0;
  v3 = 0;
  v4 = (float64x2_t *)(result + 264);
  do
  {
    v314.f64[v2] = 0.0;
    v5 = v3 < 2;
    if (v3 < 2)
      ++v3;
    else
      v3 = 0;
    if (v5)
      ++v2;
    else
      v2 += 4;
  }
  while (v2 != 18);
  v6 = 0;
  v7 = 0;
  v314.f64[0] = 1.0;
  v317.f64[1] = 1.0;
  v321.f64[0] = 1.0;
  do
  {
    v323.f64[v6] = 0.0;
    v8 = v7 < 2;
    if (v7 < 2)
      ++v7;
    else
      v7 = 0;
    if (v8)
      ++v6;
    else
      v6 += 4;
  }
  while (v6 != 18);
  v9 = 0;
  v10 = 0;
  do
  {
    v315.f64[v9 + 1] = 0.0;
    v11 = v10 < 2;
    if (v10 < 2)
      ++v10;
    else
      v10 = 0;
    if (v11)
      ++v9;
    else
      v9 += 4;
  }
  while (v9 != 18);
  _Q1 = *(float64x2_t *)(result + 48);
  v13 = a2[2];
  v14 = a2[4];
  v15 = *(double *)(result + 64);
  v220 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*a2, _Q1.f64[0]), v13, _Q1, 1), v14, v15);
  v16 = a2[1].f64[0];
  _D6 = a2[3].f64[0];
  __asm { FMLA            D5, D6, V1.D[1] }
  v23 = a2[5].f64[0];
  v219 = _D5 + v23 * v15;
  _Q1 = *(float64x2_t *)(result + 72);
  v25 = *(double *)(result + 88);
  v218 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*a2, _Q1.f64[0]), v13, _Q1, 1), v14, v25);
  __asm { FMLA            D5, D6, V1.D[1] }
  *(float64x2_t *)&v324[8] = *a2;
  v217 = _D5 + v23 * v25;
  _Q1 = *(float64x2_t *)(result + 96);
  v28 = *(double *)(result + 112);
  v216 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v324[8], _Q1.f64[0]), v13, _Q1, 1), v14, v28);
  *(float64_t *)&v324[24] = v16;
  *(float64_t *)&v326[24] = _D6;
  *(float64x2_t *)&v326[8] = v13;
  __asm { FMLA            D5, D6, V1.D[1] }
  _Q1.f64[0] = *(float64_t *)(result + 136);
  v215 = _D5 + v23 * v28;
  _Q3 = *(float64x2_t *)(result + 144);
  _Q5 = *(float64x2_t *)(result + 120);
  v32 = *(double *)(result + 160);
  v214 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v324[8], _Q3.f64[0]), v13, _Q3, 1), v14, v32);
  __asm { FMLA            D16, D6, V3.D[1] }
  v213 = _D16 + v23 * v32;
  _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v324[8], _Q5.f64[0]), v13, _Q5, 1), v14, _Q1.f64[0]);
  v212 = _Q0;
  __asm { FMLA            D0, D6, V5.D[1] }
  _Q0.f64[0] = _Q0.f64[0] + v23 * _Q1.f64[0];
  v35 = *(float64x2_t *)(result + 504);
  v211 = *(float64x2_t *)(result + 488);
  v37 = *(float64x2_t *)(result + 520);
  v36 = *(float64x2_t *)(result + 536);
  *(float64x2_t *)&v328[8] = v14;
  *(double *)&v328[24] = v23;
  v38 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v314, v35.f64[0]), v317, v35, 1), v320, v37.f64[0]), v323, v37, 1), v325, v36.f64[0]), v327, v36, 1);
  v39 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v315, v35.f64[0]), v318, v35, 1), v321, v37.f64[0]), *(float64x2_t *)v324, v37, 1), *(float64x2_t *)v326, v36.f64[0]), *(float64x2_t *)v328, v36, 1);
  v40 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v316, v35.f64[0]), v319, v35, 1), v322, v37.f64[0]), *(float64x2_t *)&v324[16], v37, 1), *(float64x2_t *)&v326[16], v36.f64[0]), *(float64x2_t *)&v328[16], v36, 1);
  v41 = *(float64x2_t *)(result + 552);
  v42 = vmlaq_laneq_f64(vmulq_n_f64(v314, v41.f64[0]), v317, v41, 1);
  v43 = vmlaq_laneq_f64(vmulq_n_f64(v315, v41.f64[0]), v318, v41, 1);
  v44 = vmlaq_laneq_f64(vmulq_n_f64(v316, v41.f64[0]), v319, v41, 1);
  v45 = *(float64x2_t *)(result + 568);
  v46 = vmlaq_laneq_f64(vmlaq_n_f64(v42, v320, v45.f64[0]), v323, v45, 1);
  v47 = vmlaq_laneq_f64(vmlaq_n_f64(v43, v321, v45.f64[0]), *(float64x2_t *)v324, v45, 1);
  v48 = vmlaq_laneq_f64(vmlaq_n_f64(v44, v322, v45.f64[0]), *(float64x2_t *)&v324[16], v45, 1);
  v49 = *(float64x2_t *)(result + 584);
  v50 = *(float64x2_t *)(result + 600);
  v51 = vmlaq_laneq_f64(vmlaq_n_f64(v46, v325, v49.f64[0]), v327, v49, 1);
  v52 = vmlaq_laneq_f64(vmlaq_n_f64(v47, *(float64x2_t *)v326, v49.f64[0]), *(float64x2_t *)v328, v49, 1);
  v53 = vmlaq_laneq_f64(vmlaq_n_f64(v48, *(float64x2_t *)&v326[16], v49.f64[0]), *(float64x2_t *)&v328[16], v49, 1);
  v54 = vmlaq_laneq_f64(vmulq_n_f64(v314, v50.f64[0]), v317, v50, 1);
  v55 = vmlaq_laneq_f64(vmulq_n_f64(v315, v50.f64[0]), v318, v50, 1);
  v56 = vmlaq_laneq_f64(vmulq_n_f64(v316, v50.f64[0]), v319, v50, 1);
  v57 = *(float64x2_t *)(result + 648);
  v208 = vmlaq_laneq_f64(vmulq_n_f64(v314, v57.f64[0]), v317, v57, 1);
  v207 = vmlaq_laneq_f64(vmulq_n_f64(v315, v57.f64[0]), v318, v57, 1);
  v201 = vmlaq_laneq_f64(vmulq_n_f64(v316, v57.f64[0]), v319, v57, 1);
  v58 = *(float64x2_t *)(result + 696);
  v265 = vmlaq_laneq_f64(vmulq_n_f64(v314, v58.f64[0]), v317, v58, 1);
  v263 = vmlaq_laneq_f64(vmulq_n_f64(v315, v58.f64[0]), v318, v58, 1);
  v209 = vmlaq_laneq_f64(vmulq_n_f64(v316, v58.f64[0]), v319, v58, 1);
  v59 = *(float64x2_t *)(result + 744);
  v259 = vmlaq_laneq_f64(vmulq_n_f64(v314, v59.f64[0]), v317, v59, 1);
  v261 = vmlaq_laneq_f64(vmulq_n_f64(v315, v59.f64[0]), v318, v59, 1);
  v210 = vmlaq_laneq_f64(vmulq_n_f64(v316, v59.f64[0]), v319, v59, 1);
  v281 = vmlaq_n_f64(vmulq_n_f64(v38, v314.f64[0]), v51, v317.f64[0]);
  v278 = vmlaq_laneq_f64(vmulq_laneq_f64(v38, v314, 1), v51, v317, 1);
  v290 = vmlaq_n_f64(vmulq_n_f64(v38, v315.f64[0]), v51, v318.f64[0]);
  v272 = vmlaq_laneq_f64(vmulq_laneq_f64(v38, v315, 1), v51, v318, 1);
  v287 = vmlaq_n_f64(vmulq_n_f64(v38, v316.f64[0]), v51, v319.f64[0]);
  v284 = vmlaq_laneq_f64(vmulq_laneq_f64(v38, v316, 1), v51, v319, 1);
  v275 = vmlaq_n_f64(vmulq_n_f64(v39, v314.f64[0]), v52, v317.f64[0]);
  v206 = vmlaq_laneq_f64(vmulq_laneq_f64(v39, v314, 1), v52, v317, 1);
  v205 = vmlaq_n_f64(vmulq_n_f64(v39, v315.f64[0]), v52, v318.f64[0]);
  v302 = vmlaq_laneq_f64(vmulq_laneq_f64(v39, v315, 1), v52, v318, 1);
  v296 = vmlaq_n_f64(vmulq_n_f64(v39, v316.f64[0]), v52, v319.f64[0]);
  v293 = vmlaq_laneq_f64(vmulq_laneq_f64(v39, v316, 1), v52, v319, 1);
  v305 = vmlaq_n_f64(vmulq_n_f64(v40, v314.f64[0]), v53, v317.f64[0]);
  v267 = vmlaq_laneq_f64(vmulq_laneq_f64(v40, v314, 1), v53, v317, 1);
  v269 = vmlaq_n_f64(vmulq_n_f64(v40, v315.f64[0]), v53, v318.f64[0]);
  v308 = vmlaq_laneq_f64(vmulq_laneq_f64(v40, v315, 1), v53, v318, 1);
  v311 = vmlaq_n_f64(vmulq_n_f64(v40, v316.f64[0]), v53, v319.f64[0]);
  v299 = vmlaq_laneq_f64(vmulq_laneq_f64(v40, v316, 1), v53, v319, 1);
  v60 = *(float64x2_t *)(result + 216);
  v61 = vmlaq_laneq_f64(vmulq_n_f64(v314, v60.f64[0]), v317, v60, 1);
  v62 = vmlaq_laneq_f64(vmulq_n_f64(v315, v60.f64[0]), v318, v60, 1);
  v63 = vmlaq_laneq_f64(vmulq_n_f64(v316, v60.f64[0]), v319, v60, 1);
  v64 = *(float64x2_t *)(result + 232);
  v65 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v320, v64.f64[0]), v323, v64, 1);
  v66 = vmlaq_laneq_f64(vmlaq_n_f64(v62, v321, v64.f64[0]), *(float64x2_t *)v324, v64, 1);
  v67 = vmlaq_laneq_f64(vmlaq_n_f64(v63, v322, v64.f64[0]), *(float64x2_t *)&v324[16], v64, 1);
  v68 = *(float64x2_t *)(result + 248);
  v69 = vmlaq_laneq_f64(vmlaq_n_f64(v65, v325, v68.f64[0]), v327, v68, 1);
  v70 = vmlaq_laneq_f64(vmlaq_n_f64(v66, *(float64x2_t *)v326, v68.f64[0]), *(float64x2_t *)v328, v68, 1);
  v71 = vmlaq_laneq_f64(vmlaq_n_f64(v67, *(float64x2_t *)&v326[16], v68.f64[0]), *(float64x2_t *)&v328[16], v68, 1);
  v72 = *(float64x2_t *)(result + 280);
  v73 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v314, v4->f64[0]), v317, *v4, 1), v320, v72.f64[0]), v323, v72, 1);
  v74 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v315, v4->f64[0]), v318, *v4, 1), v321, v72.f64[0]), *(float64x2_t *)v324, v72, 1);
  v75 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v316, v4->f64[0]), v319, *v4, 1), v322, v72.f64[0]), *(float64x2_t *)&v324[16], v72, 1);
  v76 = *(float64x2_t *)(result + 296);
  v77 = *(float64x2_t *)(result + 312);
  v78 = vmlaq_laneq_f64(vmlaq_n_f64(v73, v325, v76.f64[0]), v327, v76, 1);
  v79 = vmlaq_laneq_f64(vmlaq_n_f64(v74, *(float64x2_t *)v326, v76.f64[0]), *(float64x2_t *)v328, v76, 1);
  v80 = vmlaq_laneq_f64(vmlaq_n_f64(v75, *(float64x2_t *)&v326[16], v76.f64[0]), *(float64x2_t *)&v328[16], v76, 1);
  v204 = vmlaq_laneq_f64(vmulq_n_f64(v314, v77.f64[0]), v317, v77, 1);
  v203 = vmlaq_laneq_f64(vmulq_n_f64(v315, v77.f64[0]), v318, v77, 1);
  v202 = vmlaq_laneq_f64(vmulq_n_f64(v316, v77.f64[0]), v319, v77, 1);
  v81 = *(float64x2_t *)(result + 360);
  v257 = vmlaq_laneq_f64(vmulq_n_f64(v314, v81.f64[0]), v317, v81, 1);
  v255 = vmlaq_laneq_f64(vmulq_n_f64(v315, v81.f64[0]), v318, v81, 1);
  v254 = vmlaq_laneq_f64(vmulq_n_f64(v316, v81.f64[0]), v319, v81, 1);
  v82 = *(float64x2_t *)(result + 408);
  v250 = vmlaq_laneq_f64(vmulq_n_f64(v314, v82.f64[0]), v317, v82, 1);
  v252 = vmlaq_laneq_f64(vmulq_n_f64(v315, v82.f64[0]), v318, v82, 1);
  v248 = vmlaq_laneq_f64(vmulq_n_f64(v316, v82.f64[0]), v319, v82, 1);
  v83 = *(float64x2_t *)(result + 456);
  v244 = vmlaq_laneq_f64(vmulq_n_f64(v314, v83.f64[0]), v317, v83, 1);
  v246 = vmlaq_laneq_f64(vmulq_n_f64(v315, v83.f64[0]), v318, v83, 1);
  v200 = vmlaq_n_f64(vmulq_n_f64(v69, v314.f64[0]), v78, v317.f64[0]);
  v199 = vmlaq_n_f64(vmulq_n_f64(v70, v314.f64[0]), v79, v317.f64[0]);
  v238 = vmlaq_n_f64(vmulq_n_f64(v71, v314.f64[0]), v80, v317.f64[0]);
  v240 = vmlaq_laneq_f64(vmulq_laneq_f64(v69, v314, 1), v78, v317, 1);
  v242 = vmlaq_laneq_f64(vmulq_n_f64(v316, v83.f64[0]), v319, v83, 1);
  v237 = vmlaq_laneq_f64(vmulq_laneq_f64(v70, v314, 1), v79, v317, 1);
  v235 = vmlaq_laneq_f64(vmulq_laneq_f64(v71, v314, 1), v80, v317, 1);
  v233 = vmlaq_n_f64(vmulq_n_f64(v69, v315.f64[0]), v78, v318.f64[0]);
  v84 = vmlaq_n_f64(vmulq_n_f64(v70, v315.f64[0]), v79, v318.f64[0]);
  v198 = vmlaq_n_f64(vmulq_n_f64(v71, v315.f64[0]), v80, v318.f64[0]);
  v231 = vmlaq_laneq_f64(vmulq_laneq_f64(v69, v315, 1), v78, v318, 1);
  v229 = vmlaq_laneq_f64(vmulq_laneq_f64(v70, v315, 1), v79, v318, 1);
  v227 = vmlaq_laneq_f64(vmulq_laneq_f64(v71, v315, 1), v80, v318, 1);
  v223 = vmlaq_laneq_f64(vmulq_laneq_f64(v69, v316, 1), v78, v319, 1);
  v225 = vmlaq_n_f64(vmulq_n_f64(v69, v316.f64[0]), v78, v319.f64[0]);
  v221 = vmlaq_n_f64(vmulq_n_f64(v70, v316.f64[0]), v79, v319.f64[0]);
  v197 = vmlaq_laneq_f64(vmulq_laneq_f64(v70, v316, 1), v79, v319, 1);
  v85 = vmlaq_n_f64(vmulq_n_f64(v71, v316.f64[0]), v80, v319.f64[0]);
  v86 = vmlaq_laneq_f64(vmulq_laneq_f64(v71, v316, 1), v80, v319, 1);
  v87 = *(float64x2_t *)(result + 616);
  v88 = vmlaq_laneq_f64(vmlaq_n_f64(v54, v320, v87.f64[0]), v323, v87, 1);
  v89 = vmlaq_laneq_f64(vmlaq_n_f64(v55, v321, v87.f64[0]), *(float64x2_t *)v324, v87, 1);
  v90 = vmlaq_laneq_f64(vmlaq_n_f64(v56, v322, v87.f64[0]), *(float64x2_t *)&v324[16], v87, 1);
  v91 = *(float64x2_t *)(result + 632);
  v92 = vmlaq_laneq_f64(vmlaq_n_f64(v88, v325, v91.f64[0]), v327, v91, 1);
  v93 = vmlaq_laneq_f64(vmlaq_n_f64(v89, *(float64x2_t *)v326, v91.f64[0]), *(float64x2_t *)v328, v91, 1);
  v94 = vmlaq_laneq_f64(vmlaq_n_f64(v90, *(float64x2_t *)&v326[16], v91.f64[0]), *(float64x2_t *)&v328[16], v91, 1);
  v95 = *(float64x2_t *)(result + 664);
  v96 = vmlaq_laneq_f64(vmlaq_n_f64(v208, v320, v95.f64[0]), v323, v95, 1);
  v97 = vmlaq_laneq_f64(vmlaq_n_f64(v207, v321, v95.f64[0]), *(float64x2_t *)v324, v95, 1);
  v98 = vmlaq_laneq_f64(vmlaq_n_f64(v201, v322, v95.f64[0]), *(float64x2_t *)&v324[16], v95, 1);
  v99 = *(float64x2_t *)(result + 680);
  v100 = vmlaq_laneq_f64(vmlaq_n_f64(v96, v325, v99.f64[0]), v327, v99, 1);
  v101 = vmlaq_laneq_f64(vmlaq_n_f64(v97, *(float64x2_t *)v326, v99.f64[0]), *(float64x2_t *)v328, v99, 1);
  v102 = vmlaq_laneq_f64(vmlaq_n_f64(v98, *(float64x2_t *)&v326[16], v99.f64[0]), *(float64x2_t *)&v328[16], v99, 1);
  v103 = *(float64x2_t *)(result + 712);
  v266 = vmlaq_laneq_f64(vmlaq_n_f64(v265, v320, v103.f64[0]), v323, v103, 1);
  v264 = vmlaq_laneq_f64(vmlaq_n_f64(v263, v321, v103.f64[0]), *(float64x2_t *)v324, v103, 1);
  v104 = vmlaq_laneq_f64(vmlaq_n_f64(v209, v322, v103.f64[0]), *(float64x2_t *)&v324[16], v103, 1);
  v105 = *(float64x2_t *)(result + 760);
  v260 = vmlaq_laneq_f64(vmlaq_n_f64(v259, v320, v105.f64[0]), v323, v105, 1);
  v262 = vmlaq_laneq_f64(vmlaq_n_f64(v261, v321, v105.f64[0]), *(float64x2_t *)v324, v105, 1);
  v106 = vmlaq_laneq_f64(vmlaq_n_f64(v210, v322, v105.f64[0]), *(float64x2_t *)&v324[16], v105, 1);
  v279 = vmlaq_laneq_f64(vmlaq_laneq_f64(v278, v92, v320, 1), v100, v323, 1);
  v282 = vmlaq_n_f64(vmlaq_n_f64(v281, v92, v320.f64[0]), v100, v323.f64[0]);
  v291 = vmlaq_n_f64(vmlaq_n_f64(v290, v92, v321.f64[0]), v100, *(double *)v324);
  v273 = vmlaq_laneq_f64(vmlaq_laneq_f64(v272, v92, v321, 1), v100, *(float64x2_t *)v324, 1);
  v288 = vmlaq_n_f64(vmlaq_n_f64(v287, v92, v322.f64[0]), v100, *(double *)&v324[16]);
  v285 = vmlaq_laneq_f64(vmlaq_laneq_f64(v284, v92, v322, 1), v100, *(float64x2_t *)&v324[16], 1);
  v276 = vmlaq_n_f64(vmlaq_n_f64(v275, v93, v320.f64[0]), v101, v323.f64[0]);
  v107 = vmlaq_laneq_f64(vmlaq_laneq_f64(v206, v93, v320, 1), v101, v323, 1);
  v108 = vmlaq_n_f64(vmlaq_n_f64(v205, v93, v321.f64[0]), v101, *(double *)v324);
  v303 = vmlaq_laneq_f64(vmlaq_laneq_f64(v302, v93, v321, 1), v101, *(float64x2_t *)v324, 1);
  v297 = vmlaq_n_f64(vmlaq_n_f64(v296, v93, v322.f64[0]), v101, *(double *)&v324[16]);
  v294 = vmlaq_laneq_f64(vmlaq_laneq_f64(v293, v93, v322, 1), v101, *(float64x2_t *)&v324[16], 1);
  v306 = vmlaq_n_f64(vmlaq_n_f64(v305, v94, v320.f64[0]), v102, v323.f64[0]);
  v268 = vmlaq_laneq_f64(vmlaq_laneq_f64(v267, v94, v320, 1), v102, v323, 1);
  v270 = vmlaq_n_f64(vmlaq_n_f64(v269, v94, v321.f64[0]), v102, *(double *)v324);
  v309 = vmlaq_laneq_f64(vmlaq_laneq_f64(v308, v94, v321, 1), v102, *(float64x2_t *)v324, 1);
  v312 = vmlaq_n_f64(vmlaq_n_f64(v311, v94, v322.f64[0]), v102, *(double *)&v324[16]);
  v300 = vmlaq_laneq_f64(vmlaq_laneq_f64(v299, v94, v322, 1), v102, *(float64x2_t *)&v324[16], 1);
  v109 = *(float64x2_t *)(result + 328);
  v110 = vmlaq_laneq_f64(vmlaq_n_f64(v204, v320, v109.f64[0]), v323, v109, 1);
  v111 = vmlaq_laneq_f64(vmlaq_n_f64(v203, v321, v109.f64[0]), *(float64x2_t *)v324, v109, 1);
  v112 = vmlaq_laneq_f64(vmlaq_n_f64(v202, v322, v109.f64[0]), *(float64x2_t *)&v324[16], v109, 1);
  v113 = *(float64x2_t *)(result + 344);
  v114 = vmlaq_laneq_f64(vmlaq_n_f64(v110, v325, v113.f64[0]), v327, v113, 1);
  v115 = vmlaq_laneq_f64(vmlaq_n_f64(v111, *(float64x2_t *)v326, v113.f64[0]), *(float64x2_t *)v328, v113, 1);
  v116 = vmlaq_laneq_f64(vmlaq_n_f64(v112, *(float64x2_t *)&v326[16], v113.f64[0]), *(float64x2_t *)&v328[16], v113, 1);
  v117 = *(float64x2_t *)(result + 376);
  v118 = vmlaq_laneq_f64(vmlaq_n_f64(v257, v320, v117.f64[0]), v323, v117, 1);
  v119 = vmlaq_laneq_f64(vmlaq_n_f64(v255, v321, v117.f64[0]), *(float64x2_t *)v324, v117, 1);
  v120 = vmlaq_laneq_f64(vmlaq_n_f64(v254, v322, v117.f64[0]), *(float64x2_t *)&v324[16], v117, 1);
  v121 = *(float64x2_t *)(result + 392);
  v256 = vmlaq_laneq_f64(vmlaq_n_f64(v119, *(float64x2_t *)v326, v121.f64[0]), *(float64x2_t *)v328, v121, 1);
  v258 = vmlaq_laneq_f64(vmlaq_n_f64(v118, v325, v121.f64[0]), v327, v121, 1);
  v122 = vmlaq_laneq_f64(vmlaq_n_f64(v120, *(float64x2_t *)&v326[16], v121.f64[0]), *(float64x2_t *)&v328[16], v121, 1);
  v123 = *(float64x2_t *)(result + 424);
  v251 = vmlaq_laneq_f64(vmlaq_n_f64(v250, v320, v123.f64[0]), v323, v123, 1);
  v253 = vmlaq_laneq_f64(vmlaq_n_f64(v252, v321, v123.f64[0]), *(float64x2_t *)v324, v123, 1);
  v249 = vmlaq_laneq_f64(vmlaq_n_f64(v248, v322, v123.f64[0]), *(float64x2_t *)&v324[16], v123, 1);
  v124 = *(float64x2_t *)(result + 472);
  v125 = vmlaq_n_f64(v200, v114, v320.f64[0]);
  v126 = vmlaq_n_f64(v84, v115, v321.f64[0]);
  v245 = vmlaq_laneq_f64(vmlaq_n_f64(v244, v320, v124.f64[0]), v323, v124, 1);
  v247 = vmlaq_laneq_f64(vmlaq_n_f64(v246, v321, v124.f64[0]), *(float64x2_t *)v324, v124, 1);
  v243 = vmlaq_laneq_f64(vmlaq_n_f64(v242, v322, v124.f64[0]), *(float64x2_t *)&v324[16], v124, 1);
  v239 = vmlaq_n_f64(vmlaq_n_f64(v238, v116, v320.f64[0]), v122, v323.f64[0]);
  v241 = vmlaq_laneq_f64(vmlaq_laneq_f64(v240, v114, v320, 1), v258, v323, 1);
  v236 = vmlaq_laneq_f64(vmlaq_laneq_f64(v235, v116, v320, 1), v122, v323, 1);
  v232 = vmlaq_laneq_f64(vmlaq_laneq_f64(v231, v114, v321, 1), v258, *(float64x2_t *)v324, 1);
  v234 = vmlaq_n_f64(vmlaq_n_f64(v233, v114, v321.f64[0]), v258, *(double *)v324);
  v228 = vmlaq_laneq_f64(vmlaq_laneq_f64(v227, v116, v321, 1), v122, *(float64x2_t *)v324, 1);
  v230 = vmlaq_laneq_f64(vmlaq_laneq_f64(v229, v115, v321, 1), v256, *(float64x2_t *)v324, 1);
  v224 = vmlaq_laneq_f64(vmlaq_laneq_f64(v223, v114, v322, 1), v258, *(float64x2_t *)&v324[16], 1);
  v226 = vmlaq_n_f64(vmlaq_n_f64(v225, v114, v322.f64[0]), v258, *(double *)&v324[16]);
  v222 = vmlaq_n_f64(vmlaq_n_f64(v221, v115, v322.f64[0]), v256, *(double *)&v324[16]);
  v127 = vmlaq_laneq_f64(vmlaq_laneq_f64(v197, v115, v322, 1), v256, *(float64x2_t *)&v324[16], 1);
  v128 = vmlaq_n_f64(vmlaq_n_f64(v85, v116, v322.f64[0]), v122, *(double *)&v324[16]);
  v129 = vmlaq_laneq_f64(vmlaq_laneq_f64(v86, v116, v322, 1), v122, *(float64x2_t *)&v324[16], 1);
  v130 = *(float64x2_t *)(result + 728);
  v131 = vmlaq_laneq_f64(vmlaq_n_f64(v266, v325, v130.f64[0]), v327, v130, 1);
  v132 = vmlaq_laneq_f64(vmlaq_n_f64(v264, *(float64x2_t *)v326, v130.f64[0]), *(float64x2_t *)v328, v130, 1);
  v133 = vmlaq_laneq_f64(vmlaq_n_f64(v104, *(float64x2_t *)&v326[16], v130.f64[0]), *(float64x2_t *)&v328[16], v130, 1);
  v134 = *(float64x2_t *)(result + 776);
  v135 = vmlaq_laneq_f64(vmlaq_n_f64(v260, v325, v134.f64[0]), v327, v134, 1);
  v136 = vmlaq_laneq_f64(vmlaq_n_f64(v262, *(float64x2_t *)v326, v134.f64[0]), *(float64x2_t *)v328, v134, 1);
  v137 = vmlaq_laneq_f64(vmlaq_n_f64(v106, *(float64x2_t *)&v326[16], v134.f64[0]), *(float64x2_t *)&v328[16], v134, 1);
  v280 = vmlaq_laneq_f64(vmlaq_laneq_f64(v279, v131, v325, 1), v135, v327, 1);
  v283 = vmlaq_n_f64(vmlaq_n_f64(v282, v131, v325.f64[0]), v135, v327.f64[0]);
  v292 = vmlaq_n_f64(vmlaq_n_f64(v291, v131, *(double *)v326), v135, *(double *)v328);
  v289 = vmlaq_n_f64(vmlaq_n_f64(v288, v131, *(double *)&v326[16]), v135, *(double *)&v328[16]);
  v286 = vmlaq_laneq_f64(vmlaq_laneq_f64(v285, v131, *(float64x2_t *)&v326[16], 1), v135, *(float64x2_t *)&v328[16], 1);
  v274 = vmlaq_laneq_f64(vmlaq_laneq_f64(v273, v131, *(float64x2_t *)v326, 1), v135, *(float64x2_t *)v328, 1);
  v277 = vmlaq_n_f64(vmlaq_n_f64(v276, v132, v325.f64[0]), v136, v327.f64[0]);
  v138 = vmlaq_laneq_f64(vmlaq_laneq_f64(v107, v132, v325, 1), v136, v327, 1);
  v139 = vmlaq_n_f64(vmlaq_n_f64(v108, v132, *(double *)v326), v136, *(double *)v328);
  v304 = vmlaq_laneq_f64(vmlaq_laneq_f64(v303, v132, *(float64x2_t *)v326, 1), v136, *(float64x2_t *)v328, 1);
  v298 = vmlaq_n_f64(vmlaq_n_f64(v297, v132, *(double *)&v326[16]), v136, *(double *)&v328[16]);
  v295 = vmlaq_laneq_f64(vmlaq_laneq_f64(v294, v132, *(float64x2_t *)&v326[16], 1), v136, *(float64x2_t *)&v328[16], 1);
  v307 = vmlaq_n_f64(vmlaq_n_f64(v306, v133, v325.f64[0]), v137, v327.f64[0]);
  v140 = vmlaq_laneq_f64(vmlaq_laneq_f64(v268, v133, v325, 1), v137, v327, 1);
  v271 = vmlaq_n_f64(vmlaq_n_f64(v270, v133, *(double *)v326), v137, *(double *)v328);
  v310 = vmlaq_laneq_f64(vmlaq_laneq_f64(v309, v133, *(float64x2_t *)v326, 1), v137, *(float64x2_t *)v328, 1);
  v313 = vmlaq_n_f64(vmlaq_n_f64(v312, v133, *(double *)&v326[16]), v137, *(double *)&v328[16]);
  v301 = vmlaq_laneq_f64(vmlaq_laneq_f64(v300, v133, *(float64x2_t *)&v326[16], 1), v137, *(float64x2_t *)&v328[16], 1);
  v141 = *(float64x2_t *)(result + 440);
  v142 = vmlaq_laneq_f64(vmlaq_n_f64(v251, v325, v141.f64[0]), v327, v141, 1);
  v143 = vmlaq_laneq_f64(vmlaq_n_f64(v253, *(float64x2_t *)v326, v141.f64[0]), *(float64x2_t *)v328, v141, 1);
  v144 = vmlaq_laneq_f64(vmlaq_n_f64(v249, *(float64x2_t *)&v326[16], v141.f64[0]), *(float64x2_t *)&v328[16], v141, 1);
  v145 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v198, v116, v321.f64[0]), v122, *(double *)v324), v144, *(double *)v326);
  v146 = vmlaq_laneq_f64(vmlaq_n_f64(v245, v325, v211.f64[0]), v327, v211, 1);
  v141.f64[1] = *(float64_t *)&v328[8];
  v147 = vmlaq_laneq_f64(vmlaq_n_f64(v247, *(float64x2_t *)v326, v211.f64[0]), *(float64x2_t *)v328, v211, 1);
  v148 = vmlaq_laneq_f64(vmlaq_n_f64(v243, *(float64x2_t *)&v326[16], v211.f64[0]), *(float64x2_t *)&v328[16], v211, 1);
  v149 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v125, v258, v323.f64[0]), v142, v325.f64[0]), v146, v327.f64[0]);
  v150 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v199, v115, v320.f64[0]), v256, v323.f64[0]), v143, v325.f64[0]), v147, v327.f64[0]);
  _Q2 = vmlaq_n_f64(vmlaq_n_f64(v239, v144, v325.f64[0]), v148, v327.f64[0]);
  v152 = vmlaq_laneq_f64(vmlaq_laneq_f64(v241, v142, v325, 1), v146, v327, 1);
  v153 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v237, v115, v320, 1), v256, v323, 1), v143, v325, 1), v147, v327, 1);
  v154 = vmlaq_laneq_f64(vmlaq_laneq_f64(v236, v144, v325, 1), v148, v327, 1);
  v155 = vmlaq_n_f64(vmlaq_n_f64(v234, v142, *(double *)v326), v146, *(double *)v328);
  v156 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v126, v256, *(double *)v324), v143, *(double *)v326), v147, *(double *)v328);
  v157 = vmlaq_n_f64(v145, v148, *(double *)v328);
  v158 = vmlaq_laneq_f64(vmlaq_laneq_f64(v232, v142, *(float64x2_t *)v326, 1), v146, *(float64x2_t *)v328, 1);
  v159 = vmlaq_laneq_f64(vmlaq_laneq_f64(v230, v143, *(float64x2_t *)v326, 1), v147, *(float64x2_t *)v328, 1);
  v160 = vmlaq_laneq_f64(vmlaq_laneq_f64(v228, v144, *(float64x2_t *)v326, 1), v148, *(float64x2_t *)v328, 1);
  v161 = vmlaq_n_f64(vmlaq_n_f64(v226, v142, *(double *)&v326[16]), v146, *(double *)&v328[16]);
  v162 = vmlaq_laneq_f64(vmlaq_laneq_f64(v224, v142, *(float64x2_t *)&v326[16], 1), v146, *(float64x2_t *)&v328[16], 1);
  v163 = vmlaq_n_f64(vmlaq_n_f64(v222, v143, *(double *)&v326[16]), v147, *(double *)&v328[16]);
  v164 = vmlaq_laneq_f64(vmlaq_laneq_f64(v127, v143, *(float64x2_t *)&v326[16], 1), v147, *(float64x2_t *)&v328[16], 1);
  v165 = vmlaq_n_f64(vmlaq_n_f64(v128, v144, *(double *)&v326[16]), v148, *(double *)&v328[16]);
  v166 = vmlaq_laneq_f64(vmlaq_laneq_f64(v129, v144, *(float64x2_t *)&v326[16], 1), v148, *(float64x2_t *)&v328[16], 1);
  v141.f64[0] = a2[7].f64[0];
  v167 = a2[6];
  *(float64x2_t *)(result + 48) = v220;
  *(double *)(result + 64) = v219;
  *(float64x2_t *)(result + 72) = v218;
  *(double *)(result + 88) = v217;
  *(float64x2_t *)(result + 96) = v216;
  *(double *)(result + 112) = v215;
  *(float64x2_t *)(result + 120) = vaddq_f64(v167, v212);
  *(_QWORD *)(result + 136) = *(_OWORD *)&vaddq_f64(v141, _Q0);
  *(float64x2_t *)(result + 144) = v214;
  *(double *)(result + 160) = v213;
  *(float64x2_t *)(result + 520) = v277;
  *(float64x2_t *)(result + 536) = v307;
  *(float64x2_t *)(result + 552) = v280;
  *(float64x2_t *)(result + 568) = v138;
  *(float64x2_t *)(result + 616) = v139;
  *(float64x2_t *)(result + 632) = v271;
  *(float64x2_t *)(result + 584) = v140;
  *(float64x2_t *)(result + 600) = v292;
  *(float64x2_t *)(result + 648) = v274;
  *(float64x2_t *)(result + 664) = v304;
  *(float64x2_t *)(result + 712) = v298;
  *(float64x2_t *)(result + 728) = v313;
  *(float64x2_t *)(result + 680) = v310;
  *(float64x2_t *)(result + 696) = v289;
  *(float64x2_t *)(result + 760) = v295;
  *(float64x2_t *)(result + 776) = v301;
  *(float64x2_t *)(result + 744) = v286;
  *(float64x2_t *)(result + 248) = _Q2;
  *(float64x2_t *)(result + 232) = v150;
  *(float64x2_t *)(result + 216) = v149;
  *v4 = v152;
  *(float64x2_t *)(result + 280) = v153;
  *(float64x2_t *)(result + 328) = v156;
  *(float64x2_t *)(result + 344) = v157;
  *(float64x2_t *)(result + 296) = v154;
  *(float64x2_t *)(result + 312) = v155;
  *(float64x2_t *)(result + 360) = v158;
  *(float64x2_t *)(result + 376) = v159;
  *(float64x2_t *)(result + 424) = v163;
  *(float64x2_t *)(result + 440) = v165;
  *(float64x2_t *)(result + 392) = v160;
  *(float64x2_t *)(result + 408) = v161;
  _Q0.f64[1] = v283.f64[1];
  *(float64x2_t *)(result + 488) = v166;
  *(float64x2_t *)(result + 504) = v283;
  *(float64x2_t *)(result + 456) = v162;
  *(float64x2_t *)(result + 472) = v164;
  v169 = *(_QWORD *)(result + 24);
  v170 = *(_QWORD *)(result + 32);
  while (v169 != v170)
  {
    _Q2.f64[0] = a2[3].f64[0];
    v171 = *(double *)(v169 + 32);
    _Q7 = *(float64x2_t *)(v169 + 16);
    __asm { FMLA            D0, D2, V7.D[1] }
    _Q0.f64[0] = _Q0.f64[0] + a2[5].f64[0] * v171;
    _Q2.f64[0] = a2[7].f64[0];
    _Q0 = vaddq_f64(_Q0, _Q2);
    *(float64x2_t *)(v169 + 16) = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*a2, _Q7.f64[0]), a2[2], _Q7, 1), a2[4], v171), a2[6]);
    *(float64_t *)(v169 + 32) = _Q0.f64[0];
    if (*(_BYTE *)(v169 + 112))
    {
      v173 = a2[1].f64[0];
      _D2 = a2[3].f64[0];
      _Q3 = a2[2];
      v176 = a2[5].f64[0];
      _Q5 = a2[4];
      v178 = *(double *)(v169 + 56);
      _Q7 = *(float64x2_t *)(v169 + 40);
      v180 = *(double *)(v169 + 80);
      _Q17 = *(float64x2_t *)(v169 + 64);
      v182 = *(double *)(v169 + 104);
      _Q19 = *(float64x2_t *)(v169 + 88);
      v184 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*a2, _Q7.f64[0]), _Q3, _Q7, 1), _Q5, v178);
      __asm { FMLA            D21, D2, V7.D[1] }
      v186 = _D21 + v176 * v178;
      v187 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*a2, _Q17.f64[0]), _Q3, _Q17, 1), _Q5, v180);
      __asm { FMLA            D21, D2, V17.D[1] }
      _D16 = _D21 + v176 * v180;
      v190 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*a2, _Q19.f64[0]), _Q3, _Q19, 1), _Q5, v182);
      __asm { FMLA            D21, D2, V19.D[1] }
      _D18 = _D21 + v176 * v182;
      v193 = vmlad_n_f64(vmlad_n_f64(v186 * a2->f64[0], _D16, _Q3.f64[0]), _D18, _Q5.f64[0]);
      v194 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v184, *a2, 1), v187, _Q3, 1), v190, _Q5, 1);
      __asm
      {
        FMLA            D1, D16, V3.D[1]
        FMLA            D1, D18, V5.D[1]
      }
      *(float64x2_t *)(v169 + 40) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v184, a2->f64[0]), v187, _Q3.f64[0]), v190, _Q5.f64[0]);
      *(double *)(v169 + 56) = v193;
      *(float64x2_t *)(v169 + 64) = v194;
      *(_QWORD *)(v169 + 80) = _D1;
      *(float64x2_t *)(v169 + 88) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v184, v173), v187, _D2), v190, v176);
      *(double *)(v169 + 104) = v186 * v173 + _D16 * _D2 + _D18 * v176;
    }
    v169 += 120;
  }
  return result;
}

char *sub_20F46C0B8(void **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char *v14;
  float32x2_t v15;
  float32x2_t v16;
  double v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = 0xEEEEEEEEEEEEEEEFLL * ((v3 - (_BYTE *)*a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x222222222222222)
    sub_20E867F44();
  if (0xDDDDDDDDDDDDDDDELL * (((_BYTE *)a1[2] - v4) >> 3) > v6)
    v6 = 0xDDDDDDDDDDDDDDDELL * (((_BYTE *)a1[2] - v4) >> 3);
  if (0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)a1[2] - v4) >> 3) >= 0x111111111111111)
    v8 = 0x222222222222222;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x222222222222222)
      sub_20E877A38();
    v9 = (char *)operator new(120 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[120 * v5];
  v11 = a2 + 40;
  if (!*(_BYTE *)(a2 + 192))
    v11 = 0;
  v12 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)v10 = *(_QWORD *)(a2 + 24);
  *((_DWORD *)v10 + 2) = v12;
  *((_OWORD *)v10 + 1) = *(_OWORD *)(v11 + 8);
  *((_QWORD *)v10 + 4) = *(_QWORD *)(v11 + 24);
  v13 = *(unsigned __int8 *)(v11 + 148);
  v10[112] = v13;
  if (v13)
  {
    v14 = &v9[120 * v5];
    v15 = *(float32x2_t *)(v11 + 120);
    *(float64x2_t *)(v14 + 40) = vcvtq_f64_f32(*(float32x2_t *)(v11 + 112));
    *(float64x2_t *)(v14 + 56) = vcvtq_f64_f32(v15);
    v16 = *(float32x2_t *)(v11 + 136);
    *(float64x2_t *)(v14 + 72) = vcvtq_f64_f32(*(float32x2_t *)(v11 + 128));
    v17 = *(float *)(v11 + 144);
    *(float64x2_t *)(v14 + 88) = vcvtq_f64_f32(v16);
    *((double *)v14 + 13) = v17;
  }
  v18 = v10 + 120;
  if (v3 != v4)
  {
    do
    {
      *(_OWORD *)(v10 - 120) = *(_OWORD *)(v3 - 120);
      v19 = *(_OWORD *)(v3 - 104);
      *((_QWORD *)v10 - 11) = *((_QWORD *)v3 - 11);
      *(_OWORD *)(v10 - 104) = v19;
      v21 = *((_OWORD *)v3 - 3);
      v20 = *((_OWORD *)v3 - 2);
      v22 = *((_OWORD *)v3 - 4);
      *((_QWORD *)v10 - 2) = *((_QWORD *)v3 - 2);
      *((_OWORD *)v10 - 3) = v21;
      *((_OWORD *)v10 - 2) = v20;
      *((_OWORD *)v10 - 4) = v22;
      *((_OWORD *)v10 - 5) = *((_OWORD *)v3 - 5);
      *(v10 - 8) = *(v3 - 8);
      v10 -= 120;
      v3 -= 120;
    }
    while (v3 != v4);
    v3 = (char *)*a1;
  }
  *a1 = v10;
  a1[1] = v18;
  a1[2] = &v9[120 * v8];
  if (v3)
    operator delete(v3);
  return v18;
}

_QWORD *sub_20F46C268(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA001F8;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F46C2CC(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>, float64x2_t a5@<Q1>)
{
  uint64_t v9;
  _OWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _BYTE *v20;
  void *v21;
  _BYTE v22[24];
  _OWORD v23[2];
  void *v24;
  char v25;
  void *__p;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  _BYTE v38[512];
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41[3];

  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 24) = 0;
  *(_BYTE *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  v9 = a4 + 40;
  *(_QWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 56) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a4 + 64) = _Q0;
  v15 = (_OWORD *)(a4 + 64);
  *(_QWORD *)(a4 + 80) = 0xBFF0000000000000;
  *(_BYTE *)(a4 + 88) = 0;
  sub_20F49AA24(*(_QWORD *)(a1 + 16), v41, a5);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 80))(&v24, a1);
  *(_BYTE *)(a4 + 32) = v28 != 0;
  if (!*(_BYTE *)(a1 + 232))
  {
    if (*(_QWORD *)(a4 + 40) == *(_QWORD *)(a4 + 48))
      goto LABEL_8;
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(v22, a1, a3);
  v16 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(a4 + 48) = v16;
    operator delete(v16);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = 0;
  }
  v17 = *(_QWORD *)v22;
  *(_QWORD *)(a4 + 40) = *(_QWORD *)v22;
  v18 = *(_QWORD *)&v22[8];
  *(_OWORD *)(a4 + 48) = *(_OWORD *)&v22[8];
  *v15 = v23[0];
  *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)((char *)v23 + 9);
  if (v17 != v18)
LABEL_7:
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, v9, v41);
LABEL_8:
  if (!a2)
    goto LABEL_13;
  sub_20F49B054(*(_QWORD **)(a1 + 16), v41, (uint64_t *)v22);
  if (*(_BYTE *)(a4 + 24))
  {
    v19 = *(void **)a4;
    if (*(_QWORD *)a4)
    {
      *(_QWORD *)(a4 + 8) = v19;
      operator delete(v19);
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
    }
    *(_OWORD *)a4 = *(_OWORD *)v22;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)&v22[16];
LABEL_13:
    v40 = 0;
    v20 = v39;
    if (v39 == v38)
      goto LABEL_16;
    goto LABEL_14;
  }
  *(_OWORD *)a4 = *(_OWORD *)v22;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)&v22[16];
  *(_BYTE *)(a4 + 24) = 1;
  v40 = 0;
  v20 = v39;
  if (v39 == v38)
    goto LABEL_16;
LABEL_14:
  if (v20)
    MEMORY[0x212BC6368](v20, 0x1000C8000313F17);
LABEL_16:
  v37 = 0;
  if (v36 != &v35 && v36)
    MEMORY[0x212BC6368]();
  v34 = 0;
  if (v33 != &v32 && v33)
    MEMORY[0x212BC6368]();
  v31 = 0;
  if (v30 != &v29)
  {
    if (v30)
      MEMORY[0x212BC6368]();
  }
  if (v27 < 0)
  {
    operator delete(__p);
    if ((v25 & 0x80000000) == 0)
    {
LABEL_27:
      v21 = (void *)v41[0];
      if (!v41[0])
        return;
      goto LABEL_28;
    }
  }
  else if ((v25 & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(v24);
  v21 = (void *)v41[0];
  if (v41[0])
  {
LABEL_28:
    v41[1] = (uint64_t)v21;
    operator delete(v21);
  }
}

void sub_20F46C574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v10;
  void *v12;
  va_list va;

  va_start(va, a9);
  sub_20F2C524C((uint64_t)va);
  v12 = *(void **)(v10 - 88);
  if (v12)
  {
    *(_QWORD *)(v10 - 80) = v12;
    operator delete(v12);
    sub_20F26CCE0(v9);
    _Unwind_Resume(a1);
  }
  sub_20F26CCE0(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F46C5C4()
{
  return 2;
}

uint64_t sub_20F46C5CC()
{
  return 2;
}

uint64_t sub_20F46C5D4()
{
  return 2;
}

void sub_20F46C5E0(_QWORD *a1@<X8>)
{
  a1[1] = 0;
  *a1 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
}

void sub_20F46C5FC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  _DWORD *v5;
  int v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  size_t v10;
  const char *v11;
  int v12;
  unsigned __int8 v13;
  const char *v14;
  size_t v15;
  void *v16;
  int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  int v26;
  size_t v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  void *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  const char *__src;
  unint64_t v70;
  _QWORD v71[3];
  int v72;
  const char *v73;
  int v74;
  const char *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *object;
  void *v82[2];
  __int128 v83;
  void *__p[2];
  unint64_t v85;
  char v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 32))
  {
    v5 = (_DWORD *)(a1 + 24);
    if (*(_DWORD *)(a1 + 24))
    {
      sub_20F46CEC8(&v78);
      if (**(int **)(v78 + 56) > 3
        || ((v6 = *(unsigned __int8 *)(v78 + 72), v7 = sub_20E8C31DC(v78, "OSLogSurrogateAppender", 1, 0), !v6)
          ? (v8 = v7 == 0)
          : (v8 = 0),
            v8))
      {
LABEL_94:
        --*v5;
        *(_OWORD *)a2 = *(_OWORD *)v5;
        v3 = 1;
        goto LABEL_95;
      }
      v9 = v7;
      v71[0] = &v78;
      v71[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v71[2] = std::chrono::system_clock::now().__d_.__rep_;
      v72 = 3;
      v73 = "unknown file";
      v74 = 50;
      v76 = 0;
      v77 = 0;
      v75 = "unknown function";
      v67 = v78;
      v70 = v9;
      if (*(char *)(v78 + 39) < 0)
      {
        v11 = *(const char **)(v78 + 16);
        v10 = *(_QWORD *)(v78 + 24);
      }
      else
      {
        v10 = *(unsigned __int8 *)(v78 + 39);
        v11 = (const char *)(v78 + 16);
      }
      v66 = v78 + 16;
      v12 = *(_DWORD *)(a1 + 16);
      v68 = *(_DWORD *)(a1 + 24);
      v13 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
        if ((_BYTE)v83 && SHIBYTE(v82[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v14 = byte_254A4A4F8;
      else
        v14 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v15 = byte_254A4A4F8[23];
      else
        v15 = *(_QWORD *)&byte_254A4A4F8[8];
      __src = v11;
      object = os_log_create(v14, v11);
      v16 = v82;
      if (v15 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v17 = v6;
      if (v15 >= 0x17)
      {
        v65 = v12;
        v20 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17)
          v20 = v15 | 7;
        v21 = v20 + 1;
        v16 = operator new(v20 + 1);
        v82[1] = (void *)v15;
        *(_QWORD *)&v83 = v21 | 0x8000000000000000;
        v82[0] = v16;
        v17 = v6;
        v19 = v70;
        v18 = v65;
      }
      else
      {
        BYTE7(v83) = v15;
        v18 = v12;
        v19 = v70;
        if (!v15)
        {
LABEL_27:
          *((_BYTE *)v16 + v15) = 0;
          BYTE8(v83) = 1;
          v22 = __p;
          if (v10 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v10 >= 0x17)
          {
            v23 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v10 | 7) != 0x17)
              v23 = v10 | 7;
            v24 = v23 + 1;
            v22 = operator new(v23 + 1);
            __p[1] = (void *)v10;
            v85 = v24 | 0x8000000000000000;
            __p[0] = v22;
          }
          else
          {
            HIBYTE(v85) = v10;
            if (!v10)
              goto LABEL_35;
          }
          memmove(v22, __src, v10);
LABEL_35:
          *((_BYTE *)v22 + v10) = 0;
          v86 = 1;
          v25 = object;
          if (SHIBYTE(v85) < 0)
            operator delete(__p[0]);
          if (BYTE8(v83) && SBYTE7(v83) < 0)
            operator delete(v82[0]);
          if (object)
            os_release(object);
          v26 = v18 - v68 + 1;
          if (v19 && *(_QWORD *)(v19 + 24))
          {
            v27 = _os_log_pack_size();
            v28 = (std::__shared_weak_count_vtbl *)operator new(v27, (std::align_val_t)8uLL);
            v29 = (std::__shared_weak_count *)operator new();
            v30 = v29;
            v29->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v29->__shared_owners_;
            v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v29->__shared_weak_owners_ = 0;
            v29[1].__vftable = v28;
            object = v28;
            v82[0] = v28;
            v82[1] = v29;
            do
              v32 = __ldxr(p_shared_owners);
            while (__stxr(v32 + 1, p_shared_owners));
            v83 = 0uLL;
            __p[0] = 0;
            do
              v33 = __ldaxr(p_shared_owners);
            while (__stlxr(v33 - 1, p_shared_owners));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v30);
            }
            v34 = object;
            v35 = _os_log_pack_fill();
            v36 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)v35 = 67109376;
            *(_DWORD *)(v35 + 4) = v26;
            *(_WORD *)(v35 + 8) = 1024;
            *(_DWORD *)(v35 + 10) = v36;
            v37 = operator new();
            v38 = *(unsigned __int8 *)(v67 + 39);
            v39 = v66;
            if ((v38 & 0x80u) != 0)
            {
              v39 = *(_QWORD *)(v67 + 16);
              v38 = *(_QWORD *)(v67 + 24);
            }
            *(_QWORD *)v37 = v34;
            *(_OWORD *)(v37 + 8) = *(_OWORD *)v82;
            v82[0] = 0;
            v82[1] = 0;
            *(_OWORD *)(v37 + 24) = v83;
            v83 = 0uLL;
            *(_QWORD *)(v37 + 40) = v39;
            *(_QWORD *)(v37 + 48) = v38;
            *(_BYTE *)(v37 + 56) = 1;
            v79 = 0;
            v80 = v37;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v19 + 24) + 40))(*(_QWORD *)(v19 + 24), &v80);
            v40 = v80;
            v80 = 0;
            if (v40)
            {
              v41 = *(std::__shared_weak_count **)(v40 + 32);
              if (v41)
              {
                v42 = (unint64_t *)&v41->__shared_owners_;
                do
                  v43 = __ldaxr(v42);
                while (__stlxr(v43 - 1, v42));
                if (!v43)
                {
                  ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                  std::__shared_weak_count::__release_weak(v41);
                }
              }
              v44 = *(std::__shared_weak_count **)(v40 + 16);
              if (v44)
              {
                v45 = (unint64_t *)&v44->__shared_owners_;
                do
                  v46 = __ldaxr(v45);
                while (__stlxr(v46 - 1, v45));
                if (!v46)
                {
                  ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                  std::__shared_weak_count::__release_weak(v44);
                }
              }
              MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
              v47 = v79;
              v79 = 0;
              if (v47)
              {
                v48 = *(std::__shared_weak_count **)(v47 + 32);
                if (v48)
                {
                  v49 = (unint64_t *)&v48->__shared_owners_;
                  do
                    v50 = __ldaxr(v49);
                  while (__stlxr(v50 - 1, v49));
                  if (!v50)
                  {
                    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                    std::__shared_weak_count::__release_weak(v48);
                  }
                }
                v51 = *(std::__shared_weak_count **)(v47 + 16);
                if (v51)
                {
                  v52 = (unint64_t *)&v51->__shared_owners_;
                  do
                    v53 = __ldaxr(v52);
                  while (__stlxr(v53 - 1, v52));
                  if (!v53)
                  {
                    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                    std::__shared_weak_count::__release_weak(v51);
                  }
                }
                MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
              }
            }
            v54 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
            if (*((_QWORD *)&v83 + 1))
            {
              v55 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 - 1, v55));
              if (!v56)
              {
                ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
            }
            v57 = (std::__shared_weak_count *)v82[1];
            if (v82[1])
            {
              v58 = (unint64_t *)((char *)v82[1] + 8);
              do
                v59 = __ldaxr(v58);
              while (__stlxr(v59 - 1, v58));
              if (!v59)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
          }
          else
          {
            os_log_type_enabled(v25, OS_LOG_TYPE_INFO);
            v60 = *(_DWORD *)(a1 + 16);
            LODWORD(object) = 67109376;
            HIDWORD(object) = v18 - v68 + 1;
            LOWORD(v82[0]) = 1024;
            *(_DWORD *)((char *)v82 + 2) = v60;
            v61 = (void *)_os_log_send_and_compose_impl();
            if (v61)
              free(v61);
          }
          if (v17)
          {
            sub_20E8C003C((uint64_t)v71, "Pose graph: resuming optimization after it did not converge in the last frame (resume %ul / %ul)", *(_DWORD *)(a1 + 16) - *(_DWORD *)(a1 + 24) + 1, *(_DWORD *)(a1 + 16));
            sub_20E863570((uint64_t)v71);
          }
          sub_20E863570((uint64_t)v71);
          v62 = v77;
          if (v77)
          {
            v63 = (unint64_t *)&v77->__shared_owners_;
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
          goto LABEL_94;
        }
      }
      memmove(v16, v14, v15);
      goto LABEL_27;
    }
  }
  v3 = 0;
  *(_BYTE *)a2 = 0;
LABEL_95:
  *(_BYTE *)(a2 + 16) = v3;
}

void sub_20F46CD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a35)
  {
    if (a34 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F46CDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20E86E8C4(&a28);
  sub_20E86E8C4(&a27);
  sub_20E86E658((uint64_t)&a29);
  sub_20E863714((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F46CE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  MEMORY[0x212BC6398](v9, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F46CE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F46CE50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F46CEC8(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A68A38);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68A38))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.map_optimization");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A68A30);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A68A38);
  }
  *a1 = qword_254A68A30;
}

void sub_20F46CF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68A38);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68A38);
  _Unwind_Resume(a1);
}

void sub_20F46CFBC(uint64_t a1)
{
  int v1;
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  const char *v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  const char *v11;
  size_t v12;
  void *v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD v60[3];
  int v61;
  const char *v62;
  int v63;
  const char *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  void *object;
  void *v69[2];
  __int128 v70;
  void *__p[2];
  unint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;

  *(_BYTE *)(a1 + 33) = 1;
  sub_20F46CEC8(&v67);
  if (**(int **)(v67 + 56) > 3)
    return;
  v1 = *(unsigned __int8 *)(v67 + 72);
  v2 = sub_20E8C31DC(v67, "OSLogSurrogateAppender", 1, 0);
  if (!v1 && v2 == 0)
    return;
  v4 = v2;
  v60[0] = &v67;
  v60[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v60[2] = std::chrono::system_clock::now().__d_.__rep_;
  v61 = 3;
  v62 = "unknown file";
  v63 = 60;
  v65 = 0;
  v66 = 0;
  v64 = "unknown function";
  v5 = v67;
  v6 = v67 + 16;
  if (*(char *)(v67 + 39) < 0)
  {
    v8 = *(const char **)(v67 + 16);
    v7 = *(_QWORD *)(v67 + 24);
    v10 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v10 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v7 = *(unsigned __int8 *)(v67 + 39);
    v8 = (const char *)(*(_QWORD *)v60[0] + 16);
    v9 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v9 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)&object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
    if ((_BYTE)v70 && SHIBYTE(v69[1]) < 0)
      operator delete(object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_10:
  if (byte_254A4A4F8[23] >= 0)
    v11 = byte_254A4A4F8;
  else
    v11 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v12 = byte_254A4A4F8[23];
  else
    v12 = *(_QWORD *)&byte_254A4A4F8[8];
  object = os_log_create(v11, v8);
  v13 = v69;
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v14 = v4;
    v15 = v8;
    v16 = v5;
    v17 = v1;
    v18 = v6;
    v19 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v19 = v12 | 7;
    v20 = v19 + 1;
    v13 = operator new(v19 + 1);
    v69[1] = (void *)v12;
    *(_QWORD *)&v70 = v20 | 0x8000000000000000;
    v69[0] = v13;
    v6 = v18;
    v1 = v17;
    v5 = v16;
    v8 = v15;
    v4 = v14;
    goto LABEL_23;
  }
  BYTE7(v70) = v12;
  if (v12)
LABEL_23:
    memmove(v13, v11, v12);
  *((_BYTE *)v13 + v12) = 0;
  BYTE8(v70) = 1;
  v21 = __p;
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v7 >= 0x17)
  {
    v23 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v23 = v7 | 7;
    v24 = v23 + 1;
    v21 = operator new(v23 + 1);
    __p[1] = (void *)v7;
    v72 = v24 | 0x8000000000000000;
    __p[0] = v21;
  }
  else
  {
    HIBYTE(v72) = v7;
    if (!v7)
    {
      LOBYTE(__p[0]) = 0;
      v73 = 1;
      v22 = object;
      if ((SHIBYTE(v72) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v21, v8, v7);
  *((_BYTE *)v21 + v7) = 0;
  v73 = 1;
  v22 = object;
  if ((SHIBYTE(v72) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v70))
      goto LABEL_37;
LABEL_35:
    if (SBYTE7(v70) < 0)
      operator delete(v69[0]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(__p[0]);
  if (BYTE8(v70))
    goto LABEL_35;
LABEL_37:
  if (object)
    os_release(object);
  if (v4 && *(_QWORD *)(v4 + 24))
  {
    v25 = _os_log_pack_size();
    v26 = (std::__shared_weak_count_vtbl *)operator new(v25, (std::align_val_t)8uLL);
    v27 = (std::__shared_weak_count *)operator new();
    v28 = v27;
    v27->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    v27->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v27->__shared_weak_owners_ = 0;
    v27[1].__vftable = v26;
    object = v26;
    v69[0] = v26;
    v69[1] = v27;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
    v70 = 0uLL;
    __p[0] = 0;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v28);
    }
    v32 = object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v33 = operator new();
    v34 = *(unsigned __int8 *)(v5 + 39);
    if ((v34 & 0x80u) == 0)
      v35 = v6;
    else
      v35 = *(_QWORD *)(v5 + 16);
    if ((v34 & 0x80u) != 0)
      v34 = *(_QWORD *)(v5 + 24);
    *(_QWORD *)v33 = v32;
    *(_OWORD *)(v33 + 8) = *(_OWORD *)v69;
    v69[0] = 0;
    v69[1] = 0;
    *(_OWORD *)(v33 + 24) = v70;
    v70 = 0uLL;
    *(_QWORD *)(v33 + 40) = v35;
    *(_QWORD *)(v33 + 48) = v34;
    *(_BYTE *)(v33 + 56) = 1;
    v74 = 0;
    v75 = v33;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v4 + 24) + 40))(*(_QWORD *)(v4 + 24), &v75);
    v36 = v75;
    v75 = 0;
    if (v36)
    {
      v37 = *(std::__shared_weak_count **)(v36 + 32);
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = *(std::__shared_weak_count **)(v36 + 16);
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      MEMORY[0x212BC6398](v36, 0x10F0C40B62ED6C6);
      v43 = v74;
      v74 = 0;
      if (v43)
      {
        v44 = *(std::__shared_weak_count **)(v43 + 32);
        if (v44)
        {
          v45 = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v47 = *(std::__shared_weak_count **)(v43 + 16);
        if (v47)
        {
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        MEMORY[0x212BC6398](v43, 0x10F0C40B62ED6C6);
      }
    }
    v50 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
    if (*((_QWORD *)&v70 + 1))
    {
      v51 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = (std::__shared_weak_count *)v69[1];
    if (v69[1])
    {
      v54 = (unint64_t *)((char *)v69[1] + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
  }
  else
  {
    os_log_type_enabled(v22, OS_LOG_TYPE_INFO);
    LOWORD(object) = 0;
    v56 = (void *)_os_log_send_and_compose_impl();
    if (v56)
      free(v56);
  }
  if (v1)
  {
    sub_20E8C003C((uint64_t)v60, "[FG] Enable pose-graph because adding new keyframe");
    sub_20E863570((uint64_t)v60);
  }
  sub_20E863570((uint64_t)v60);
  v57 = v66;
  if (v66)
  {
    v58 = (unint64_t *)&v66->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
}

void sub_20F46D6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a27)
  {
    if (a26 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F46D6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_20E86E8C4((uint64_t *)(v3 - 96));
  sub_20E86E8C4((uint64_t *)(v3 - 104));
  sub_20E86E658((uint64_t)va1);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F46D718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x212BC6398](v3, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F46D744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F46D760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F46D774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28 && a27 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20F46D7B8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  size_t v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v13;
  std::ios_base v14;
  uint64_t v15;
  int v16;
  uint64_t __sb;
  const void *v18;
  uint64_t v19;
  const void *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  int v24;

  std::streambuf::basic_streambuf();
  v2 = MEMORY[0x24BEDB848];
  __sb = MEMORY[0x24BEDB848] + 16;
  v22 = 0u;
  v23 = 0u;
  v24 = 24;
  v13 = MEMORY[0x24BEDB828] + 24;
  v14.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v14, &__sb);
  v15 = 0;
  v16 = -1;
  sub_20E86A980(&v13, (uint64_t)" map optmization count: ", 24);
  v3 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v3, (uint64_t)"/", 1);
  v4 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v4, (uint64_t)" budget: ", 9);
  v5 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v5, (uint64_t)" converged: ", 12);
  std::ostream::operator<<();
  if ((v24 & 0x10) != 0)
  {
    v7 = *((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1) < v21)
    {
      *((_QWORD *)&v23 + 1) = v21;
      v7 = v21;
    }
    v8 = v20;
    v6 = v7 - (_QWORD)v20;
    if (v7 - (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_18;
  }
  else
  {
    if ((v24 & 8) == 0)
    {
      v6 = 0;
      a1[23] = 0;
      goto LABEL_14;
    }
    v8 = v18;
    v6 = v19 - (_QWORD)v18;
    if ((unint64_t)(v19 - (_QWORD)v18) >= 0x7FFFFFFFFFFFFFF8)
LABEL_18:
      sub_20E860B7C();
  }
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v11;
    a1 = v11;
    goto LABEL_13;
  }
  a1[23] = v6;
  if (v6)
LABEL_13:
    memmove(a1, v8, v6);
LABEL_14:
  a1[v6] = 0;
  std::ostream::~ostream();
  __sb = v2 + 16;
  if (SBYTE7(v23) < 0)
    operator delete((void *)v22);
  return std::streambuf::~streambuf();
}

uint64_t *sub_20F46D9E0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  __int128 v10;

  __p = operator new(0x28uLL);
  v10 = xmmword_2102DBA80;
  strcpy((char *)__p, "Map optimization logic parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 80, 40);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DB90((double *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "MapOptimizationLogicConfig.min_health_adding_map_constraints", v4, "Minimum health required to add a pose-graph edge");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DCF0((unsigned int *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "MapOptimizationLogicConfig.max_optimization_resume_trials", v5, "Maximum number of frames in which the map optimization can be resumed, after failing to converge after initial optimization");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EAA14D8((_BYTE *)(a1 + 20));
  sub_20E8B2F9C((uint64_t *)&__p, "MapOptimizationLogicConfig.enable_map_optimization", v6, "A flag indicating whether to enable map optimziation.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DB90((double *)(a1 + 8));
  return sub_20E8B2F9C((uint64_t *)&__p, "MapOptimizationLogicConfig.max_consecutive_map_keyframe_delta_pose_error_to_declare_converged_m", v7, "When constructing the map keyframe, the current pose might not be aligned to the corresponding odometry edge. If the delta motion error exceeds this value, we declare the optimization is not converged.");
}

void sub_20F46DB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20F46DB70(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count **v7;
  std::__shared_weak_count **v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  double *v14;
  double *v15;
  double v16;
  double v17;
  std::__shared_weak_count_vtbl *v18;
  uint64_t p_shared_owners;
  char *v20;
  double v21;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  size_t v28;
  const char *v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  const char *v32;
  size_t v33;
  void **v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  std::__shared_weak_count_vtbl *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  void (__cdecl **p_on_zero_shared_weak)(std::__shared_weak_count *__hidden);
  void *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  int64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  int v87;
  void (__cdecl *v88)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count_vtbl **on_zero_shared;
  char *v90;
  char *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t *v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  void **v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count *v106;
  uint64_t get_deleter;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  void *v111;
  std::__shared_weak_count *v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  void (__cdecl *v116)(std::__shared_weak_count *__hidden);
  double v117;
  double v118;
  double v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  size_t v125;
  const char *v126;
  unsigned __int8 v127;
  unsigned __int8 v128;
  const char *v129;
  size_t v130;
  void **v131;
  uint64_t v132;
  uint64_t v133;
  void **v134;
  uint64_t v135;
  uint64_t v136;
  NSObject *v137;
  double v138;
  double v139;
  double v140;
  size_t v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  float64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  void *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  void *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  uint64_t *v178;
  _QWORD *v179;
  std::__shared_weak_count_vtbl *v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t *v188;
  uint64_t *v189;
  char v190;
  char *v191;
  uint64_t v192;
  char *v193;
  uint64_t *v194;
  uint64_t v195;
  char *v196;
  char *v197;
  unint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  _BYTE *v205;
  _DWORD *v206;
  char *v207;
  int64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  _OWORD *v213;
  char *v214;
  uint64_t v215;
  __int128 v216;
  int v217;
  unint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  int v233;
  uint64_t *v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  __n128 v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  int v257;
  __int128 *v258;
  __int128 *v259;
  unint64_t v260;
  unint64_t v261;
  __int128 *v262;
  __int128 *v263;
  unsigned int v264;
  int v265;
  float64_t v266;
  float64_t v267;
  float64_t v268;
  float64_t v269;
  float64_t v270;
  float64_t v271;
  float64_t v272;
  float64_t v273;
  void *v274;
  int v275;
  unint64_t v276;
  char v277;
  unint64_t v278;
  _QWORD *v279;
  _QWORD *v280;
  void *v281;
  _QWORD *v282;
  _QWORD *v283;
  void *v284;
  char *v285;
  unint64_t v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  unint64_t v293;
  _BYTE *v294;
  _DWORD *v295;
  int64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  _OWORD *v301;
  char *v302;
  uint64_t v303;
  __int128 v304;
  int v305;
  __n128 v306;
  uint64_t **v307;
  uint64_t *v308;
  uint64_t *v309;
  __int128 *v310;
  unsigned __int8 v311;
  BOOL v312;
  uint64_t v313;
  uint64_t i;
  unsigned __int8 v315;
  __int128 v316;
  uint64_t v317;
  _QWORD *v318;
  _QWORD *v319;
  uint64_t v320;
  uint64_t j;
  void *v322;
  void *v323;
  unint64_t v324;
  void *v325;
  void *v326;
  unint64_t v327;
  _QWORD *v328;
  unint64_t v329;
  char *v330;
  _QWORD *v331;
  _QWORD *v332;
  _QWORD *v333;
  _QWORD *v334;
  _QWORD *v335;
  void *v336;
  uint64_t v337;
  _QWORD *v338;
  _QWORD *v339;
  void *v340;
  float64_t v341;
  double v342;
  float64_t v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  unsigned int v350;
  unint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unsigned int v354;
  uint64_t v356;
  int v357;
  uint64_t v358;
  char *v359;
  unint64_t v360;
  unint64_t v361;
  uint64_t *v362;
  unint64_t v363;
  unint64_t v364;
  char *v365;
  char *v366;
  char *v367;
  char *v368;
  __int128 v369;
  _QWORD *v370;
  _QWORD *v371;
  uint64_t v372;
  std::__shared_weak_count **v373;
  uint64_t *v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  int v381;
  __int128 *v382;
  __int128 *v383;
  unint64_t v384;
  unint64_t v385;
  __int128 *v386;
  __int128 *v387;
  unsigned int v388;
  int v389;
  float64_t v390;
  float64_t v391;
  float64_t v392;
  float64_t v393;
  float64_t v394;
  float64_t v395;
  float64_t v396;
  float64_t v397;
  float64_t v398;
  int v399;
  unint64_t v400;
  char v401;
  unint64_t v402;
  _QWORD *v403;
  _QWORD *v404;
  void *v405;
  _QWORD *v406;
  _QWORD *v407;
  void *v408;
  char *v409;
  unint64_t v410;
  uint64_t v411;
  char *v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  unint64_t v417;
  _BYTE *v418;
  _DWORD *v419;
  int64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  char *v424;
  _OWORD *v425;
  char *v426;
  uint64_t v427;
  __int128 v428;
  int v429;
  uint64_t **v430;
  uint64_t *v431;
  uint64_t *v432;
  __int128 *v433;
  unsigned __int8 v434;
  BOOL v435;
  uint64_t v436;
  uint64_t k;
  unsigned __int8 v438;
  __int128 v439;
  uint64_t v440;
  uint64_t v441;
  _QWORD *v442;
  unint64_t v443;
  char *v444;
  _QWORD *v445;
  _QWORD *v446;
  _QWORD *v447;
  _QWORD *v448;
  _QWORD *v449;
  void *v450;
  uint64_t v451;
  _QWORD *v452;
  _QWORD *v453;
  void *v454;
  float64_t v455;
  double v456;
  float64_t v457;
  uint64_t v458;
  uint64_t v459;
  unsigned int v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  unsigned int v464;
  unint64_t v465;
  unint64_t v466;
  uint64_t v467;
  unsigned int v468;
  BOOL v469;
  uint64_t v470;
  int v471;
  uint64_t v472;
  uint64_t *v473;
  char *v474;
  unint64_t v475;
  unint64_t v476;
  unint64_t v477;
  unint64_t v478;
  char *v479;
  char *v480;
  char *v481;
  char *v482;
  __int128 v483;
  char *v484;
  _QWORD *v485;
  _QWORD *v486;
  _QWORD *v487;
  _QWORD *v488;
  _QWORD *v489;
  _QWORD *v490;
  uint64_t v491;
  unsigned int v492;
  char *v493;
  char *v494;
  uint64_t v495;
  unint64_t v496;
  unint64_t v497;
  char *v498;
  char *v499;
  unsigned int v500;
  uint64_t v501;
  int v502;
  void *v503;
  BOOL v509;
  uint64_t *v510;
  uint64_t v511;
  double *v512;
  uint64_t v513;
  double *v514;
  double v516;
  float64x2_t v519;
  double v521;
  double v522;
  double v524;
  _QWORD *v535;
  _QWORD *v536;
  int v537;
  std::__shared_weak_count_vtbl *v538;
  int64x2_t *v539;
  void (__cdecl *v540)(std::__shared_weak_count *__hidden);
  void **v541;
  int64_t v542;
  char *v543;
  double v544;
  unint64_t *v545;
  char *v546;
  double v547;
  int64x2_t v548;
  uint64_t v549;
  int64x2_t *v550;
  unint64_t v551;
  unint64_t v552;
  unint64_t v553;
  unint64_t v554;
  unint64_t v555;
  uint64_t v556;
  char *v557;
  char *v558;
  float64_t v559;
  unsigned int v560;
  float64x2_t v561;
  float64x2_t v562;
  unint64_t v563;
  char *v564;
  uint64_t v565;
  unint64_t v566;
  char *v567;
  unint64_t v568;
  char *v569;
  unint64_t v570;
  char *v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  void **v577;
  uint64_t v578;
  unint64_t v579;
  unint64_t v580;
  void **v581;
  void **v582;
  unsigned int v583;
  uint64_t v584;
  uint64_t v585;
  unint64_t v586;
  char *v587;
  char *v588;
  char *v589;
  __int128 v590;
  __int128 v591;
  uint64_t v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  uint64_t v598;
  char *v599;
  std::__shared_weak_count *v600;
  unint64_t *v601;
  unint64_t v602;
  char *v603;
  std::__shared_weak_count *v604;
  unint64_t *v605;
  unint64_t v606;
  char *v607;
  char *v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  __int128 v613;
  std::__shared_weak_count *v614;
  unint64_t *v615;
  unint64_t v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  uint64_t v621;
  __int128 v622;
  std::__shared_weak_count *v623;
  unint64_t *v624;
  unint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t *v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  int v637;
  int v638;
  char v639;
  std::__shared_weak_count *v640;
  unint64_t *v641;
  unint64_t v642;
  std::__shared_weak_count *v643;
  unint64_t *v644;
  unint64_t v645;
  int v646;
  std::__shared_weak_count *v647;
  unint64_t *v648;
  unint64_t v649;
  float64_t v650;
  unint64_t *v651;
  unint64_t v652;
  uint64_t *v653;
  unint64_t v654;
  int64x2_t *v655;
  float64_t v656;
  char *v657;
  char *v658;
  char *v659;
  unint64_t v660;
  char *v661;
  unint64_t v662;
  unint64_t *v663;
  unint64_t v664;
  char *v665;
  char *v666;
  char *v667;
  int64x2_t *v668;
  unint64_t v669;
  unint64_t v670;
  unsigned int *v671;
  char *v672;
  unsigned int v673;
  void **v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  unint64_t v678;
  unint64_t v679;
  unsigned int *v680;
  _DWORD *v681;
  unsigned int v682;
  uint64_t v683;
  unint64_t v684;
  char *v685;
  char *v686;
  char *v687;
  __int128 v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  uint64_t v693;
  __int128 v694;
  __int128 v695;
  __int128 v696;
  __int128 v697;
  __int128 v698;
  __int128 v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  __int128 v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  uint64_t v708;
  unint64_t v709;
  char *v710;
  std::__shared_weak_count *v711;
  unint64_t *v712;
  unint64_t v713;
  char *v714;
  std::__shared_weak_count *v715;
  unint64_t *v716;
  unint64_t v717;
  char *v718;
  char *v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  __int128 v724;
  uint64_t v725;
  __int128 v726;
  __int128 v727;
  __int128 v728;
  std::__shared_weak_count *v729;
  unint64_t *v730;
  unint64_t v731;
  __int128 v732;
  __int128 v733;
  __int128 v734;
  __int128 v735;
  __int128 v736;
  __int128 v737;
  __int128 v738;
  __int128 v739;
  __int128 v740;
  __int128 v741;
  __int128 v742;
  __int128 v743;
  uint64_t v744;
  __int128 v745;
  std::__shared_weak_count *v746;
  unint64_t *v747;
  unint64_t v748;
  char v749;
  std::__shared_weak_count *v750;
  unint64_t *v751;
  unint64_t v752;
  std::__shared_weak_count *v753;
  unint64_t *v754;
  unint64_t v755;
  uint64_t *v756;
  unint64_t v757;
  float64_t v758;
  unint64_t *v759;
  unint64_t v760;
  std::__shared_weak_count *v761;
  unint64_t *v762;
  unint64_t v763;
  uint64_t *v764;
  uint64_t v765;
  unint64_t v766;
  unint64_t v767;
  std::__shared_weak_count **v768;
  std::__shared_weak_count **v769;
  std::__shared_weak_count *v770;
  std::__shared_weak_count *v771;
  unint64_t v772;
  unint64_t shared_owners_low;
  BOOL v774;
  char v775;
  std::__shared_weak_count *v776;
  unint64_t v777;
  unint64_t v778;
  BOOL v779;
  char v780;
  char v781;
  std::__shared_weak_count *v782;
  std::__shared_weak_count *v783;
  uint64_t shared_weak_owners;
  std::__shared_weak_count *v785;
  std::__shared_weak_count_vtbl *v786;
  _BYTE *p_get_deleter;
  int get_deleter_low;
  uint64_t shared_owners;
  int v790;
  uint64_t *v791;
  uint64_t v792;
  std::__shared_weak_count_vtbl *v793;
  std::__shared_weak_count *v794;
  std::__shared_weak_count **v795;
  std::__shared_weak_count **v796;
  unint64_t v797;
  unint64_t v798;
  BOOL v799;
  char v800;
  char v801;
  std::__shared_weak_count *v802;
  std::__shared_weak_count *v803;
  uint64_t v804;
  std::__shared_weak_count *v805;
  std::__shared_weak_count_vtbl *v806;
  _BYTE *v807;
  int v808;
  uint64_t v809;
  int v810;
  uint64_t *v811;
  uint64_t v812;
  std::__shared_weak_count_vtbl *v813;
  std::__shared_weak_count *v814;
  uint64_t v815;
  uint64_t v816;
  __int128 v817;
  __n128 v818;
  __int128 v819;
  double v820;
  double v821;
  double v822;
  double v823;
  double v824;
  double v825;
  double v826;
  double v827;
  double v828;
  double v829;
  double v830;
  double v831;
  __n128 v832;
  double v833;
  __n128 v834;
  __n128 v835;
  __n128 v836;
  __n128 v837;
  __n128 v838;
  __n128 v839;
  __n128 v840;
  _QWORD *v841;
  _QWORD *v842;
  float64_t v843;
  unint64_t v844;
  _QWORD *v845;
  unint64_t v846;
  unint64_t *v847;
  unint64_t v848;
  _QWORD *v849;
  char v850;
  int64x2_t *v851;
  char *v852;
  char *v853;
  uint64_t v854;
  int64x2_t *v855;
  unint64_t v856;
  char *v857;
  unint64_t v858;
  unint64_t v859;
  unsigned int *v860;
  char *v861;
  unsigned int v862;
  uint64_t v863;
  unint64_t v864;
  unsigned int *v865;
  char *v866;
  unsigned int v867;
  uint64_t v868;
  uint64_t v869;
  int64_t v870;
  unint64_t v871;
  _QWORD *v872;
  _QWORD *v873;
  _QWORD *v874;
  __int128 v875;
  __int128 v876;
  __int128 v877;
  __int128 v878;
  __int128 v879;
  __int128 v880;
  __int128 v881;
  __int128 v882;
  __int128 v883;
  __int128 v884;
  uint64_t v885;
  _QWORD *v886;
  std::__shared_weak_count *v887;
  unint64_t *v888;
  unint64_t v889;
  _QWORD *v890;
  _QWORD *v891;
  __int128 v892;
  __int128 v893;
  __int128 v894;
  __int128 v895;
  __int128 v896;
  __int128 v897;
  __int128 v898;
  __int128 v899;
  __int128 v900;
  __int128 v901;
  uint64_t v902;
  __int128 v903;
  std::__shared_weak_count *v904;
  unint64_t *v905;
  unint64_t v906;
  std::__shared_weak_count *v907;
  unint64_t *v908;
  unint64_t v909;
  int v910;
  std::__shared_weak_count *v911;
  unint64_t *v912;
  unint64_t v913;
  uint64_t v914;
  void *v915;
  void *v916;
  std::ios_base *v917;
  char *v918;
  char *v919;
  char *v920;
  unint64_t v921;
  unint64_t v922;
  unsigned int *v923;
  char *v924;
  unsigned int v925;
  _QWORD *v926;
  uint64_t v927;
  uint64_t v928;
  _QWORD *v929;
  _QWORD *v930;
  int v931;
  uint64_t v932;
  unint64_t v933;
  char *v934;
  unint64_t v935;
  unint64_t v936;
  unsigned int *v937;
  char *v938;
  unsigned int v939;
  unint64_t v940;
  unsigned int *v941;
  char *v942;
  unsigned int v943;
  uint64_t v944;
  _QWORD *v945;
  uint64_t v946;
  uint64_t v947;
  _QWORD *v948;
  _QWORD *v949;
  _QWORD *v950;
  _QWORD *v951;
  const char *v952;
  uint64_t v953;
  _QWORD *v954;
  int v955;
  char *v956;
  char *v957;
  char *v958;
  uint64_t v959;
  uint64_t v960;
  _QWORD *v961;
  uint64_t v962;
  uint64_t v963;
  _QWORD *v964;
  _QWORD *v965;
  unint64_t v966;
  unint64_t v967;
  unsigned int *v968;
  char *v969;
  unsigned int v970;
  unint64_t v971;
  unint64_t v972;
  unsigned int *v973;
  char *v974;
  unsigned int v975;
  uint64_t v976;
  _QWORD *v977;
  uint64_t v978;
  uint64_t v979;
  _QWORD *v980;
  _QWORD *v981;
  _QWORD *v982;
  _QWORD *v983;
  const char *v984;
  uint64_t v985;
  _QWORD *v986;
  char *v987;
  char *v988;
  uint64_t v989;
  _QWORD *v990;
  uint64_t v991;
  uint64_t v992;
  _QWORD *v993;
  _QWORD *v994;
  unint64_t v995;
  unint64_t v996;
  unint64_t *v997;
  unint64_t v998;
  char *v999;
  _QWORD *v1000;
  uint64_t v1001;
  uint64_t v1002;
  _QWORD *v1003;
  _QWORD *v1004;
  BOOL v1005;
  char v1006;
  size_t v1007;
  void *v1008;
  _QWORD *v1009;
  uint64_t v1010;
  uint64_t v1011;
  _QWORD *v1012;
  _QWORD *v1013;
  _BYTE *v1014;
  void **v1015;
  void *v1016;
  uint64_t v1017;
  uint64_t v1018;
  char v1019;
  unint64_t v1020;
  _BYTE *v1021;
  size_t v1022;
  unint64_t v1023;
  size_t v1024;
  unint64_t v1025;
  char *v1026;
  BOOL v1027;
  uint64_t v1028;
  char *v1029;
  unint64_t v1030;
  uint64_t v1031;
  char *v1032;
  char *v1033;
  char *v1034;
  size_t v1035;
  size_t v1036;
  unint64_t v1037;
  __int128 *v1038;
  unint64_t v1039;
  size_t v1040;
  unint64_t v1041;
  __int128 *v1042;
  unint64_t v1043;
  uint64_t v1044;
  char *v1045;
  char *v1046;
  char *v1047;
  char *v1048;
  char *v1049;
  size_t v1050;
  void **v1051;
  uint64_t v1052;
  unsigned __int8 v1053;
  uint64_t v1054;
  uint64_t m;
  unsigned __int8 v1056;
  int v1057;
  uint64_t v1058;
  unint64_t v1059;
  unint64_t v1060;
  unint64_t v1061;
  char *v1062;
  _QWORD *v1063;
  __int128 v1064;
  __int128 v1065;
  __n128 v1066;
  __int128 v1067;
  __int128 v1068;
  __int128 v1069;
  __int128 v1070;
  __int128 v1071;
  unint64_t v1072;
  float64_t v1073;
  uint64_t v1074;
  unint64_t v1075;
  char *v1076;
  char *v1077;
  _OWORD *v1078;
  uint64_t v1079;
  __int128 v1080;
  __n128 v1081;
  __int128 v1082;
  __n128 v1083;
  __int128 v1084;
  __int128 v1085;
  __int128 v1086;
  unint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  _OWORD *v1093;
  __int128 v1094;
  __int128 v1095;
  __int128 v1096;
  __int128 v1097;
  __int128 v1098;
  __int128 v1099;
  __int128 v1100;
  __int128 v1101;
  __int128 v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  __int128 v1106;
  __int128 v1107;
  __int128 v1108;
  __int128 v1109;
  __int128 v1110;
  __int128 v1111;
  __int128 v1112;
  __int128 v1113;
  uint64_t v1114;
  float64_t v1115;
  float64_t v1116;
  std::__shared_weak_count *v1117;
  unint64_t *v1118;
  unint64_t v1119;
  std::__shared_weak_count *v1120;
  unint64_t *v1121;
  unint64_t v1122;
  std::__shared_weak_count *v1123;
  unint64_t *v1124;
  unint64_t v1125;
  std::__shared_weak_count *v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t *v1129;
  __int128 v1130;
  uint64_t v1131;
  char v1132;
  double v1134;
  char v1135;
  int v1136;
  uint64_t v1137;
  uint64_t v1138;
  int v1139;
  double v1140;
  double v1141;
  double v1142;
  double v1143;
  double v1144;
  double v1145;
  _QWORD *v1146;
  const std::locale::facet *v1147;
  int v1148;
  __int128 *v1149;
  uint64_t v1150;
  size_t v1151;
  unint64_t v1152;
  _OWORD *v1153;
  uint64_t v1154;
  uint64_t v1155;
  unint64_t v1156;
  uint64_t *v1157;
  unint64_t v1158;
  _OWORD *v1159;
  __int128 *v1160;
  uint64_t v1161;
  __int128 v1162;
  uint64_t v1163;
  uint64_t v1164;
  double *v1165;
  double v1166;
  uint64_t jj;
  double *v1168;
  uint64_t v1169;
  double v1170;
  double v1171;
  _QWORD *v1172;
  const std::locale::facet *v1173;
  _QWORD *v1174;
  double v1175;
  uint64_t v1176;
  uint64_t v1177;
  double v1178;
  unsigned int v1179;
  uint64_t v1180;
  double *v1181;
  double v1182;
  double *v1183;
  unint64_t v1184;
  unint64_t v1185;
  float64x2_t *v1186;
  uint64_t v1187;
  float64x2_t v1188;
  float64x2_t v1189;
  double *v1190;
  double v1191;
  double v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  double *v1196;
  uint64_t v1197;
  double v1198;
  double v1199;
  int v1200;
  uint64_t v1201;
  double *v1202;
  int v1203;
  double v1204;
  void *v1205;
  double v1206;
  double v1207;
  double v1208;
  double v1209;
  double v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  __int128 v1214;
  __int128 v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  __int128 v1219;
  __int128 v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  __int128 v1227;
  __int128 v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  __int128 v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  __int128 v1237;
  __int128 v1238;
  __int128 v1239;
  __int128 v1240;
  __int128 v1241;
  __int128 v1242;
  __n128 v1243;
  __int128 v1244;
  uint64_t **n;
  uint64_t v1246;
  uint64_t ii;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  _OWORD *v1251;
  uint64_t v1252;
  __int128 v1253;
  uint64_t v1254;
  uint64_t v1255;
  __int128 v1256;
  __int128 v1257;
  unsigned int v1258;
  uint64_t v1259;
  _QWORD *v1260;
  _QWORD *v1261;
  const std::locale::facet *v1262;
  unint64_t v1263;
  unint64_t v1264;
  unint64_t v1265;
  char *v1266;
  _QWORD *v1267;
  const std::locale::facet *v1268;
  _QWORD *v1269;
  _QWORD *v1270;
  const std::locale::facet *v1271;
  _QWORD *v1272;
  const std::locale::facet *v1273;
  int v1274;
  unint64_t v1275;
  unint64_t v1276;
  unint64_t v1277;
  char *v1278;
  _QWORD *v1279;
  const std::locale::facet *v1280;
  char *v1281;
  __int128 v1282;
  __int128 v1283;
  void *v1284;
  void *v1285;
  __int128 v1286;
  __int128 v1287;
  __int128 v1288;
  __int128 v1289;
  void *v1290;
  char *v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  _QWORD *v1295;
  unint64_t v1296;
  char *v1297;
  __int128 v1298;
  __int128 v1299;
  __int128 v1300;
  __int128 v1301;
  __int128 v1302;
  __int128 v1303;
  void *v1304;
  char *v1305;
  char *v1306;
  uint64_t v1307;
  char *v1308;
  char *v1309;
  __int128 v1310;
  __int128 v1311;
  __int128 v1312;
  __int128 v1313;
  __int128 v1314;
  __int128 v1315;
  __int128 v1316;
  __int128 v1317;
  uint64_t v1318;
  char *v1319;
  __int128 v1320;
  __int128 v1321;
  uint64_t v1322;
  __int128 v1323;
  __int128 v1324;
  __int128 v1325;
  __int128 v1326;
  __int128 v1327;
  uint64_t v1328;
  char *v1329;
  void *v1330;
  std::__shared_weak_count *v1331;
  unint64_t *v1332;
  unint64_t v1333;
  std::__shared_weak_count *v1334;
  unint64_t *v1335;
  unint64_t v1336;
  std::__shared_weak_count *v1337;
  unint64_t *v1338;
  unint64_t v1339;
  std::__shared_weak_count *v1340;
  unint64_t *v1341;
  unint64_t v1342;
  std::__shared_weak_count *v1343;
  unint64_t *v1344;
  unint64_t v1345;
  char *v1346;
  __int128 v1347;
  __int128 v1348;
  __int128 v1349;
  __int128 v1350;
  __int128 v1351;
  __int128 v1352;
  __int128 v1353;
  void *v1354;
  __int128 v1355;
  __int128 v1356;
  __int128 v1357;
  __int128 v1358;
  __int128 v1359;
  __int128 v1360;
  __int128 v1361;
  __int128 v1362;
  __int128 v1363;
  __int128 v1364;
  __int128 v1365;
  __int128 v1366;
  void *v1367;
  char *v1368;
  uint64_t v1369;
  uint64_t v1370;
  float64_t *v1371;
  uint64_t v1372;
  float64x2_t v1373;
  _QWORD *v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  int64x2_t v1380;
  int64x2_t v1381;
  float64x2_t v1384;
  int8x16_t v1386;
  int8x16_t v1387;
  double v1388;
  float64x2_t v1391;
  int64x2_t v1392;
  float64x2_t v1393;
  float64x2_t v1394;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  int64x2_t v1400;
  int64x2_t v1401;
  float64x2_t v1404;
  int8x16_t v1406;
  int8x16_t v1407;
  double v1408;
  float64x2_t v1411;
  int64x2_t v1412;
  float64x2_t v1413;
  float64x2_t v1414;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  __int128 v1421;
  __int128 v1422;
  __int128 v1423;
  uint64_t v1424;
  uint64_t kk;
  uint64_t v1426;
  uint64_t v1427;
  float64x2_t v1428;
  float64x2_t v1429;
  uint64_t v1430;
  uint64_t *v1431;
  uint64_t v1432;
  float64x2_t *v1433;
  uint64_t v1434;
  float64x2_t *v1435;
  double v1437;
  float64x2_t v1440;
  float64x2_t v1441;
  float64x2_t v1444;
  uint64_t v1445;
  uint64_t mm;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  __int128 v1452;
  uint64_t v1453;
  _QWORD *v1454;
  _QWORD *v1455;
  uint64_t v1456;
  uint64_t nn;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  _OWORD *v1461;
  __int128 v1462;
  __int128 v1463;
  __int128 v1464;
  __int128 v1465;
  __int128 v1466;
  __int128 v1467;
  __int128 v1468;
  __int128 v1469;
  __int128 v1470;
  __int128 v1471;
  _QWORD *v1472;
  _QWORD *v1473;
  uint64_t v1474;
  uint64_t i1;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  __int128 v1480;
  __int128 v1481;
  __int128 v1482;
  _QWORD *v1483;
  _QWORD *v1484;
  uint64_t v1485;
  uint64_t i2;
  void (__cdecl *v1487)(std::__shared_weak_count *__hidden);
  double v1488;
  double v1489;
  double v1490;
  int v1491;
  unint64_t v1492;
  unint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  size_t v1496;
  const char *v1497;
  unsigned __int8 v1498;
  unsigned __int8 v1499;
  const char *v1500;
  size_t v1501;
  _BYTE *v1502;
  uint64_t v1503;
  uint64_t v1504;
  _BYTE *v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  NSObject *v1509;
  double v1510;
  double v1511;
  double v1512;
  size_t v1513;
  std::__shared_weak_count_vtbl *v1514;
  std::__shared_weak_count *v1515;
  std::__shared_weak_count *v1516;
  unint64_t *v1517;
  unint64_t v1518;
  unint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  char *v1522;
  uint64_t v1523;
  uint64_t v1524;
  void *v1525;
  std::__shared_weak_count *v1526;
  unint64_t *v1527;
  unint64_t v1528;
  std::__shared_weak_count *v1529;
  unint64_t *v1530;
  unint64_t v1531;
  uint64_t v1532;
  std::__shared_weak_count *v1533;
  unint64_t *v1534;
  unint64_t v1535;
  std::__shared_weak_count *v1536;
  unint64_t *v1537;
  unint64_t v1538;
  std::__shared_weak_count *v1539;
  unint64_t *v1540;
  unint64_t v1541;
  std::__shared_weak_count *v1542;
  unint64_t *v1543;
  unint64_t v1544;
  void *v1545;
  float64_t v1546;
  unint64_t *v1547;
  unint64_t v1548;
  _QWORD *v1550;
  _QWORD *v1551;
  _QWORD *v1552;
  uint64_t v1553;
  _QWORD *v1554;
  uint64_t v1555;
  _QWORD *v1556;
  uint64_t v1557;
  _QWORD *v1558;
  uint64_t v1559;
  uint64_t result;
  unint64_t v1561;
  char *v1562;
  __int128 v1563;
  __int128 v1564;
  __int128 v1565;
  __int128 v1566;
  __int128 v1567;
  __int128 v1568;
  __int128 v1569;
  __int128 v1570;
  __int128 v1571;
  __int128 v1572;
  __int128 v1573;
  __int128 v1574;
  __int128 v1575;
  __int128 v1576;
  __int128 v1577;
  void *v1578;
  _QWORD *v1579;
  char *v1580;
  char *v1581;
  char *v1582;
  char *v1583;
  __int128 v1584;
  __int128 v1585;
  __int128 v1586;
  __int128 v1587;
  __int128 v1588;
  uint64_t v1589;
  __int128 v1590;
  __int128 v1591;
  uint64_t v1592;
  unint64_t *v1593;
  unint64_t v1594;
  __int128 v1595;
  __int128 v1596;
  uint64_t v1597;
  __int128 v1598;
  __int128 v1599;
  __int128 v1600;
  __int128 v1601;
  __int128 v1602;
  __int128 v1603;
  __int128 v1604;
  __int128 v1605;
  __int128 v1606;
  uint64_t v1607;
  uint64_t v1608;
  unint64_t *v1609;
  unint64_t v1610;
  char *v1611;
  __int128 v1612;
  __int128 v1613;
  __int128 v1614;
  __int128 v1615;
  __int128 v1616;
  uint64_t v1617;
  __int128 v1618;
  __int128 v1619;
  uint64_t v1620;
  unint64_t *v1621;
  unint64_t v1622;
  __int128 v1623;
  __int128 v1624;
  __int128 v1625;
  __int128 v1626;
  __int128 v1627;
  __int128 v1628;
  __int128 v1629;
  __int128 v1630;
  __int128 v1631;
  __int128 v1632;
  __int128 v1633;
  __int128 v1634;
  uint64_t v1635;
  uint64_t v1636;
  unint64_t *v1637;
  unint64_t v1638;
  char *v1639;
  void *v1640;
  std::__shared_weak_count *v1641;
  unint64_t *v1642;
  unint64_t v1643;
  std::__shared_weak_count *v1644;
  unint64_t *v1645;
  unint64_t v1646;
  std::__shared_weak_count *v1647;
  unint64_t *v1648;
  unint64_t v1649;
  std::__shared_weak_count *v1650;
  unint64_t *v1651;
  unint64_t v1652;
  std::__shared_weak_count *v1653;
  unint64_t *v1654;
  unint64_t v1655;
  void **v1656;
  double v1657;
  __int128 v1658;
  unint64_t v1659;
  int v1660;
  std::__shared_weak_count **v1661;
  _QWORD *v1662;
  uint64_t v1663;
  float64_t v1664;
  void *v1665;
  void *v1666;
  void *v1667;
  uint64_t v1668;
  void *v1669;
  uint64_t v1670;
  void **v1671;
  void *v1672;
  void **v1673;
  void *v1674;
  void *v1675;
  uint64_t v1676;
  void *v1677;
  uint64_t v1678;
  void *v1679;
  void *v1680;
  char **v1681;
  _BYTE *v1682;
  _BYTE *v1683;
  char v1684;
  void *v1685;
  char v1686;
  float64_t v1687;
  uint64_t *v1688;
  _QWORD *__sb;
  char __sba;
  float64_t __sbb;
  double **__sbc;
  int8x16_t v1693;
  std::__shared_weak_count_vtbl *v1694;
  uint64_t v1695;
  void *__dst[2];
  uint64_t __dsta;
  uint64_t v1698;
  int8x16_t v1699;
  char *v1700;
  char *v1701;
  int8x16_t v1702;
  char *v1703;
  __int128 v1704;
  unsigned int v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  int8x16_t v1709;
  int64_t v1710;
  int64x2_t *v1711;
  uint64_t v1712;
  uint64_t v1713;
  std::__shared_weak_count **v1714;
  std::__shared_weak_count *v1715;
  uint64_t v1716;
  uint64_t v1717;
  std::__shared_weak_count *v1718;
  uint64_t *v1719;
  uint64_t v1720[2];
  uint64_t v1721;
  _QWORD v1722[3];
  std::__shared_weak_count *v1723;
  uint64_t v1724;
  std::__shared_weak_count *v1725;
  unint64_t v1726;
  char v1727;
  __int128 v1728;
  void *object[75];
  __int128 v1730;
  __int128 v1731;
  __n128 v1732;
  __n128 v1733;
  __int128 v1734;
  __int128 v1735;
  __int128 v1736;
  __n128 v1737;
  char v1738;
  __int128 v1739;
  __int128 v1740;
  __int128 v1741;
  __int128 v1742;
  __int128 v1743;
  __int128 v1744;
  __n128 v1745;
  unint64_t v1746;
  char v1747;
  __int128 v1748;
  char v1749;
  void *v1750;
  unint64_t v1751;
  __int128 v1752;
  _BYTE v1753[512];
  _BYTE *v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  uint64_t v1758;
  _BYTE v1759[512];
  _BYTE *v1760;
  __int128 v1761;
  _DWORD v1762[2];
  char v1763;
  int64x2_t v1764;
  uint64_t v1765;
  uint64_t v1766;
  uint64_t *v1767;
  uint64_t v1768;
  _QWORD v1769[3];
  _QWORD *v1770;
  _BYTE v1771[24];
  _BYTE *v1772;
  _BYTE v1773[24];
  _BYTE *v1774;
  _BYTE v1775[24];
  _BYTE *v1776;
  uint64_t v1777;
  char v1778;
  char v1779;
  char v1780;
  char v1781;
  char v1782;
  void *v1783;
  char v1784;
  void *v1785;
  char v1786;
  void *v1787;
  char v1788;
  char v1789;
  char v1790;
  unsigned __int8 v1791;
  char v1792;
  int v1793;
  float64x2_t v1794[18];
  void *v1795;
  int v1796;
  char v1797;
  __int128 v1798;
  __int128 v1799;
  __n128 v1800;
  __n128 v1801;
  __int128 v1802;
  __int128 v1803;
  __int128 v1804;
  __n128 v1805;
  _OWORD v1806[18];
  _BYTE oslog[592];
  __int128 v1808;
  __int128 v1809;
  __n128 v1810;
  __n128 v1811;
  __int128 v1812;
  __int128 v1813;
  __int128 v1814;
  __n128 v1815;
  char v1816;
  __int128 v1817;
  __int128 v1818;
  __int128 v1819;
  __int128 v1820;
  __int128 v1821;
  __int128 v1822;
  __n128 v1823;
  unint64_t v1824;
  char v1825;
  uint64_t v1826;
  std::__shared_weak_count *v1827;
  char v1828;
  __int128 v1829;
  __int128 v1830;
  __n128 v1831;
  __int128 v1832;
  __int128 v1833;
  __int128 v1834;
  __int128 v1835;
  __int128 v1836;
  __n128 v1837;
  __n128 v1838;
  __int128 v1839;
  __int128 v1840;
  __int128 v1841;
  __n128 v1842;
  void *v1843[40];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v1668 = v6;
  v8 = v7;
  v10 = v9;
  v11 = v1;
  v1843[37] = *(void **)MEMORY[0x24BDAC8D0];
  v1722[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v1722[1] = 0;
  sub_20F49BCEC((uint64_t)v1762);
  v1764 = vdupq_n_s64(0x3E45798EE2308C3AuLL);
  v12 = *(_QWORD *)(v11 + 16);
  v1762[0] = 1;
  v1762[1] = v12;
  v1763 = v3;
  v1765 = 0x3E45798EE2308C3ALL;
  v1777 = 0x3DDB7CDFD9D7BDBBLL;
  v1778 = *(_BYTE *)(v11 + 163);
  v1782 = *(_BYTE *)(v11 + 164);
  v1780 = *(_BYTE *)(v11 + 165);
  v1781 = *(_BYTE *)(v11 + 166);
  v1779 = *(_BYTE *)(v11 + 167);
  v1789 = *(_BYTE *)(v11 + 7);
  v1790 = 1;
  v1793 = *(_QWORD *)(v11 + 40);
  v1792 = *(_BYTE *)(v11 + 5);
  v1676 = v11;
  v13 = *(unsigned __int8 *)(v11 + 162);
  v1791 = *(_BYTE *)(v11 + 162);
  v1670 = v5;
  if (!v5
    && !v13
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/MapOptimizationUtil.cpp", 95, (uint64_t)"minimizer_parameters.use_IMU", 28, (uint64_t)"Offline BA not supported for vision-only SLAM", 45, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = (double *)v10[6];
  v15 = (double *)v10[7];
  v1661 = v8;
  v1660 = v3;
  if (v14 != v15)
  {
    __sb = v10;
    v16 = *v14;
    v17 = *(v15 - 7);
    memset(v1843, 0, 24);
    v18 = (*v8)[2].__vftable;
    p_shared_owners = (uint64_t)&(*v8)[2].__shared_owners_;
    if (v18 == (std::__shared_weak_count_vtbl *)p_shared_owners)
    {
      v20 = 0;
      v92 = v8[1];
      v94 = &v92->__shared_owners_;
      v93 = v92->__vftable;
      if ((uint64_t *)v92->__vftable != &v92->__shared_owners_)
        goto LABEL_141;
      goto LABEL_154;
    }
    v20 = 0;
    v1698 = (uint64_t)&(*v8)[2].__shared_owners_;
    while (1)
    {
      v21 = *((double *)v18[1].~__shared_weak_count_0 + 102);
      if (v21 >= v16 && v21 <= v17)
        goto LABEL_119;
      sub_20F49BBF8(&v1835);
      if (**(int **)(v1835 + 56) <= 4)
      {
        v23 = *(unsigned __int8 *)(v1835 + 72);
        v24 = sub_20E8C31DC(v1835, "OSLogSurrogateAppender", 1, 0);
        v25 = v24;
        _ZF = !v23 && v24 == 0;
        if (!_ZF)
          break;
      }
LABEL_103:
      p_on_zero_shared_weak = &v18->__on_zero_shared_weak;
      if (v20 >= v1843[2])
      {
        v78 = (char *)v1843[0];
        v79 = (v20 - (char *)v1843[0]) >> 4;
        v80 = v79 + 1;
        if ((unint64_t)(v79 + 1) >> 60)
          sub_20E867F44();
        v81 = (char *)v1843[2] - (char *)v1843[0];
        if (((char *)v1843[2] - (char *)v1843[0]) >> 3 > v80)
          v80 = v81 >> 3;
        if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0)
          v82 = 0xFFFFFFFFFFFFFFFLL;
        else
          v82 = v80;
        if (v82)
        {
          if (v82 >> 60)
            sub_20E877A38();
          v83 = (char *)operator new(16 * v82);
          v84 = &v83[16 * v79];
          *(_OWORD *)v84 = *(_OWORD *)p_on_zero_shared_weak;
          v85 = v84;
          if (v20 != v78)
            goto LABEL_114;
LABEL_126:
          v8 = v1661;
          v3 = v1660;
          v77 = v84 + 16;
          v1843[0] = v85;
          v1843[1] = v84 + 16;
          v1843[2] = &v83[16 * v82];
          if (!v20)
            goto LABEL_118;
        }
        else
        {
          v83 = 0;
          v84 = (char *)(16 * v79);
          *(_OWORD *)(16 * v79) = *(_OWORD *)p_on_zero_shared_weak;
          v85 = (char *)(16 * v79);
          if (v20 == v78)
            goto LABEL_126;
LABEL_114:
          v8 = v1661;
          v3 = v1660;
          do
          {
            v86 = *((_QWORD *)v20 - 2);
            v20 -= 16;
            v87 = *((_DWORD *)v20 + 2);
            *((_QWORD *)v85 - 2) = v86;
            v85 -= 16;
            *((_DWORD *)v85 + 2) = v87;
          }
          while (v20 != v78);
          v20 = (char *)v1843[0];
          v77 = v84 + 16;
          v1843[0] = v85;
          v1843[1] = v84 + 16;
          v1843[2] = &v83[16 * v82];
          if (!v20)
            goto LABEL_118;
        }
        operator delete(v20);
        goto LABEL_118;
      }
      *(_OWORD *)v20 = *(_OWORD *)p_on_zero_shared_weak;
      v77 = v20 + 16;
      v8 = v1661;
LABEL_118:
      v1843[1] = v77;
      v20 = (char *)v77;
LABEL_119:
      v88 = v18->~__shared_weak_count_0;
      if (v88)
      {
        do
        {
          on_zero_shared = (std::__shared_weak_count_vtbl **)v88;
          v88 = *(void (__cdecl **)(std::__shared_weak_count *__hidden))v88;
        }
        while (v88);
      }
      else
      {
        do
        {
          on_zero_shared = (std::__shared_weak_count_vtbl **)v18->__on_zero_shared;
          _ZF = *on_zero_shared == v18;
          v18 = (std::__shared_weak_count_vtbl *)on_zero_shared;
        }
        while (!_ZF);
      }
      v18 = (std::__shared_weak_count_vtbl *)on_zero_shared;
      if (on_zero_shared == (std::__shared_weak_count_vtbl **)p_shared_owners)
      {
        v90 = (char *)v1843[0];
        if (v1843[0] != v20)
        {
          v91 = (char *)v1843[0];
          do
          {
            if ((sub_20F49BEDC(v1661, *(_QWORD *)v91, *((_QWORD *)v91 + 1)) & 1) == 0
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/MapOptimizationUtil.cpp", 114, (uint64_t)"ret", 3, (uint64_t)"Fail to remove state", 20, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v91 += 16;
          }
          while (v91 != v20);
          v20 = v90;
          v8 = v1661;
          v3 = v1660;
        }
        v92 = v8[1];
        v94 = &v92->__shared_owners_;
        v93 = v92->__vftable;
        if ((uint64_t *)v92->__vftable != &v92->__shared_owners_)
        {
LABEL_141:
          v95 = *(_QWORD *)(v1676 + 40);
          do
          {
            if (v95 > (uint64_t)(*((_QWORD *)v93[1].~__shared_weak_count_0 + 68)
                               - *((_QWORD *)v93[1].~__shared_weak_count_0 + 67)) >> 5)
            {
              v96 = sub_20F2DFE8C(v92, (uint64_t *)&v93->__on_zero_shared_weak);
            }
            else
            {
              v97 = (uint64_t *)v93->~__shared_weak_count_0;
              if (v97)
              {
                do
                {
                  v96 = v97;
                  v97 = (uint64_t *)*v97;
                }
                while (v97);
              }
              else
              {
                do
                {
                  v96 = (uint64_t *)v93->__on_zero_shared;
                  _ZF = *v96 == (_QWORD)v93;
                  v93 = (std::__shared_weak_count_vtbl *)v96;
                }
                while (!_ZF);
              }
            }
            v93 = (std::__shared_weak_count_vtbl *)v96;
          }
          while (v96 != v94);
          v20 = (char *)v1843[0];
          v8 = v1661;
          if (!v1843[0])
          {
LABEL_156:
            v10 = __sb;
            goto LABEL_157;
          }
LABEL_155:
          v1843[1] = v20;
          operator delete(v20);
          goto LABEL_156;
        }
LABEL_154:
        if (!v20)
          goto LABEL_156;
        goto LABEL_155;
      }
    }
    *(_QWORD *)oslog = &v1835;
    *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
    *(_DWORD *)&oslog[24] = 4;
    *(_QWORD *)&oslog[32] = "unknown file";
    *(_DWORD *)&oslog[40] = 107;
    *(_QWORD *)&oslog[48] = "unknown function";
    *(_QWORD *)&oslog[56] = 0;
    *(_QWORD *)&oslog[64] = 0;
    v27 = **(_QWORD **)oslog;
    if (*(char *)(**(_QWORD **)oslog + 39) < 0)
    {
      v29 = *(const char **)(v27 + 16);
      v28 = *(_QWORD *)(v27 + 24);
      v1706 = **(_QWORD **)oslog + 16;
      v31 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v31 & 1) != 0)
        goto LABEL_21;
    }
    else
    {
      v28 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
      v29 = (const char *)(**(_QWORD **)oslog + 16);
      v1706 = (uint64_t)v29;
      v30 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v30 & 1) != 0)
        goto LABEL_21;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v1794);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v1794);
      if (LOBYTE(v1794[1].f64[1]) && SHIBYTE(v1794[1].f64[0]) < 0)
        operator delete(*(void **)&v1794[0].f64[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
      v3 = v1660;
    }
LABEL_21:
    if (byte_254A4A4F8[23] >= 0)
      v32 = byte_254A4A4F8;
    else
      v32 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v33 = byte_254A4A4F8[23];
    else
      v33 = *(_QWORD *)&byte_254A4A4F8[8];
    object[0] = os_log_create(v32, v29);
    if (v33 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v33 >= 0x17)
    {
      v35 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v33 | 7) != 0x17)
        v35 = v33 | 7;
      v36 = v35 + 1;
      v34 = (void **)operator new(v35 + 1);
      object[3] = (void *)(v36 | 0x8000000000000000);
      object[1] = v34;
      object[2] = (void *)v33;
      v3 = v1660;
    }
    else
    {
      HIBYTE(object[3]) = v33;
      v34 = &object[1];
      if (!v33)
      {
LABEL_35:
        *((_BYTE *)v34 + v33) = 0;
        LOBYTE(object[4]) = 1;
        if (v28 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        p_shared_owners = v1698;
        if (v28 >= 0x17)
        {
          v39 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v28 | 7) != 0x17)
            v39 = v28 | 7;
          v40 = v39 + 1;
          v37 = (void **)operator new(v39 + 1);
          object[7] = (void *)(v40 | 0x8000000000000000);
          object[5] = v37;
          object[6] = (void *)v28;
          v3 = v1660;
        }
        else
        {
          HIBYTE(object[7]) = v28;
          v37 = &object[5];
          if (!v28)
          {
            LOBYTE(object[5]) = 0;
            LOBYTE(object[8]) = 1;
            v38 = object[0];
            if ((SHIBYTE(object[7]) & 0x80000000) == 0)
              goto LABEL_39;
            goto LABEL_45;
          }
        }
        memmove(v37, v29, v28);
        *((_BYTE *)v37 + v28) = 0;
        LOBYTE(object[8]) = 1;
        v38 = object[0];
        if ((SHIBYTE(object[7]) & 0x80000000) == 0)
        {
LABEL_39:
          if (!LOBYTE(object[4]))
            goto LABEL_48;
          goto LABEL_46;
        }
LABEL_45:
        operator delete(object[5]);
        if (!LOBYTE(object[4]))
        {
LABEL_48:
          if (object[0])
            os_release(object[0]);
          if (v25 && *(_QWORD *)(v25 + 24))
          {
            v41 = _os_log_pack_size();
            v42 = (std::__shared_weak_count_vtbl *)operator new(v41, (std::align_val_t)8uLL);
            v43 = (std::__shared_weak_count *)operator new();
            v44 = v43;
            v43->__shared_owners_ = 0;
            v45 = (unint64_t *)&v43->__shared_owners_;
            v43->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v43->__shared_weak_owners_ = 0;
            v43[1].__vftable = v42;
            object[0] = v42;
            object[1] = v42;
            object[2] = v43;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            memset(&object[3], 0, 24);
            do
              v47 = __ldaxr(v45);
            while (__stlxr(v47 - 1, v45));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v44);
            }
            v48 = object[0];
            *(_WORD *)_os_log_pack_fill() = 0;
            v49 = operator new();
            v50 = *(unsigned __int8 *)(v27 + 39);
            v51 = v1706;
            if ((v50 & 0x80u) != 0)
            {
              v51 = *(_QWORD *)(v27 + 16);
              v50 = *(_QWORD *)(v27 + 24);
            }
            *(_QWORD *)v49 = v48;
            *(_OWORD *)(v49 + 8) = *(_OWORD *)&object[1];
            object[1] = 0;
            object[2] = 0;
            *(_OWORD *)(v49 + 24) = *(_OWORD *)&object[3];
            object[3] = 0;
            object[4] = 0;
            *(_QWORD *)(v49 + 40) = v51;
            *(_QWORD *)(v49 + 48) = v50;
            *(_BYTE *)(v49 + 56) = 16;
            *(_QWORD *)&v1806[0] = 0;
            *(_QWORD *)&v1794[0].f64[0] = v49;
            (*(void (**)(_QWORD, float64x2_t *))(**(_QWORD **)(v25 + 24) + 40))(*(_QWORD *)(v25 + 24), v1794);
            v52 = v1794[0].f64[0];
            v1794[0].f64[0] = 0.0;
            if (v52 != 0.0)
            {
              v53 = *(std::__shared_weak_count **)(*(_QWORD *)&v52 + 32);
              if (v53)
              {
                v54 = (unint64_t *)&v53->__shared_owners_;
                do
                  v55 = __ldaxr(v54);
                while (__stlxr(v55 - 1, v54));
                if (!v55)
                {
                  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                  std::__shared_weak_count::__release_weak(v53);
                }
              }
              v56 = *(std::__shared_weak_count **)(*(_QWORD *)&v52 + 16);
              if (v56)
              {
                v57 = (unint64_t *)&v56->__shared_owners_;
                do
                  v58 = __ldaxr(v57);
                while (__stlxr(v58 - 1, v57));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                  std::__shared_weak_count::__release_weak(v56);
                }
              }
              MEMORY[0x212BC6398](*(_QWORD *)&v52, 0x10F0C40B62ED6C6);
              v59 = *(_QWORD *)&v1806[0];
              *(_QWORD *)&v1806[0] = 0;
              if (v59)
              {
                v60 = *(std::__shared_weak_count **)(v59 + 32);
                if (v60)
                {
                  v61 = (unint64_t *)&v60->__shared_owners_;
                  do
                    v62 = __ldaxr(v61);
                  while (__stlxr(v62 - 1, v61));
                  if (!v62)
                  {
                    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                    std::__shared_weak_count::__release_weak(v60);
                  }
                }
                v63 = *(std::__shared_weak_count **)(v59 + 16);
                if (v63)
                {
                  v64 = (unint64_t *)&v63->__shared_owners_;
                  do
                    v65 = __ldaxr(v64);
                  while (__stlxr(v65 - 1, v64));
                  if (!v65)
                  {
                    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                    std::__shared_weak_count::__release_weak(v63);
                  }
                }
                MEMORY[0x212BC6398](v59, 0x10F0C40B62ED6C6);
              }
            }
            v66 = (std::__shared_weak_count *)object[4];
            if (object[4])
            {
              v67 = (unint64_t *)((char *)object[4] + 8);
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
            v69 = (std::__shared_weak_count *)object[2];
            if (object[2])
            {
              v70 = (unint64_t *)((char *)object[2] + 8);
              do
                v71 = __ldaxr(v70);
              while (__stlxr(v71 - 1, v70));
              if (!v71)
              {
                ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                std::__shared_weak_count::__release_weak(v69);
              }
            }
          }
          else
          {
            os_log_type_enabled(v38, OS_LOG_TYPE_ERROR);
            LOWORD(object[0]) = 0;
            LODWORD(v1657) = 2;
            v1656 = object;
            v72 = (void *)_os_log_send_and_compose_impl();
            if (v72)
              free(v72);
          }
          if (v23)
          {
            sub_20E8C003C((uint64_t)oslog, "IMU buffer does not cover the map-database. Please check the IMUdata");
            sub_20E863570((uint64_t)oslog);
          }
          sub_20E863570((uint64_t)oslog);
          v73 = *(std::__shared_weak_count **)&oslog[64];
          if (*(_QWORD *)&oslog[64])
          {
            v74 = (unint64_t *)(*(_QWORD *)&oslog[64] + 8);
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          v20 = (char *)v1843[1];
          goto LABEL_103;
        }
LABEL_46:
        if (SHIBYTE(object[3]) < 0)
          operator delete(object[1]);
        goto LABEL_48;
      }
    }
    memmove(v34, v32, v33);
    goto LABEL_35;
  }
LABEL_157:
  v1721 = 0;
  if (v3)
  {
    object[0] = &off_24CA00328;
    object[1] = v1722;
    object[2] = &v1721;
    object[3] = object;
    sub_20EDB40D8(object, v1769);
    v99 = (void **)object[3];
    if (object[3] == object)
    {
      v100 = 4;
      v99 = object;
    }
    else
    {
      if (!object[3])
        goto LABEL_163;
      v100 = 5;
    }
    (*((void (**)(void **, uint64_t))*v99 + v100))(v99, v98);
  }
LABEL_163:
  if (*(unsigned __int8 *)(v1676 + 165) | *(unsigned __int8 *)(v1676 + 166))
  {
    v105 = v8[5];
    v106 = v8[6];
    while (v105 != v106)
    {
      if (!v105->__on_zero_shared_weak)
      {
        get_deleter = (uint64_t)v105->__get_deleter;
        v108 = operator new();
        sub_20E972DB4(v108, get_deleter);
        memcpy((void *)(v108 + 1000), (const void *)(get_deleter + 1000), 0x1B8uLL);
        v109 = (uint64_t *)&v105->__on_zero_shared_weak;
        v110 = *v109;
        object[0] = 0;
        *v109 = v108;
        if (v110)
        {
          sub_20E8E931C((uint64_t)v109, v110);
          v111 = object[0];
          object[0] = 0;
          if (v111)
            sub_20E8E931C((uint64_t)object, (uint64_t)v111);
        }
        v8 = v1661;
      }
      v105 = (std::__shared_weak_count *)((char *)v105 + 16);
    }
  }
  v101 = *v8;
  v102 = *v8 + 3;
  v1720[1] = 0;
  v1720[0] = 0;
  v1719 = v1720;
  if (v1792)
  {
    v103 = v8[1];
    object[0] = 0;
    object[1] = v101;
    memset(&object[3], 0, 72);
    object[2] = v103;
    object[12] = v102;
    object[13] = &v101[3].__shared_owners_;
    object[15] = 0;
    object[14] = 0;
    object[16] = v8 + 5;
    object[17] = v8 + 10;
  }
  else
  {
    v112 = v8[1];
    object[0] = v8[8];
    object[1] = v101;
    memset(&object[3], 0, 72);
    object[2] = v112;
    object[12] = v102;
    object[13] = &v101[3].__shared_owners_;
    object[14] = 0;
    object[15] = v10;
    object[16] = v8 + 5;
    object[17] = 0;
  }
  v104 = operator new();
  sub_20F4DF308((uint64_t *)v104, (__int128 *)object, (uint64_t)v1762);
  v113 = *(_QWORD *)(v104 + 2160);
  *(_QWORD *)(v104 + 14320) = v113;
  *(_QWORD *)(v104 + 24664) = v113;
  *(_DWORD *)(v104 + 6596) = 1;
  v114 = (_QWORD *)v1721;
  v1721 = v104;
  if (v114)
  {
    v115 = sub_20F4E0254(v114);
    MEMORY[0x212BC6398](v115, 0x10F2C408963B0DFLL);
  }
  if ((*v8)[2].__shared_weak_owners_)
  {
    v116 = (*v8)[2].__vftable[1].~__shared_weak_count_0;
    v117 = atan2(-*((double *)v116 + 5), *((long double *)v116 + 8));
    v118 = asin(*((long double *)v116 + 2));
    v119 = atan2(-*((double *)v116 + 1), *(long double *)v116);
    sub_20F49BBF8(v1806);
    if (**(int **)(*(_QWORD *)&v1806[0] + 56) <= 2)
    {
      v120 = *(unsigned __int8 *)(*(_QWORD *)&v1806[0] + 72);
      v121 = sub_20E8C31DC(*(uint64_t *)&v1806[0], "OSLogSurrogateAppender", 1, 0);
      v122 = v121;
      if (v120 || v121)
      {
        *(_QWORD *)oslog = v1806;
        *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
        *(_DWORD *)&oslog[24] = 2;
        *(_QWORD *)&oslog[32] = "unknown file";
        *(_DWORD *)&oslog[40] = 181;
        *(_QWORD *)&oslog[64] = 0;
        *(_QWORD *)&oslog[48] = "unknown function";
        *(_QWORD *)&oslog[56] = 0;
        v123 = **(_QWORD **)oslog;
        v124 = **(_QWORD **)oslog + 16;
        if (*(char *)(**(_QWORD **)oslog + 39) < 0)
        {
          v126 = *(const char **)(v123 + 16);
          v125 = *(_QWORD *)(v123 + 24);
          v128 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v128 & 1) != 0)
            goto LABEL_185;
        }
        else
        {
          v125 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
          v126 = (const char *)(**(_QWORD **)oslog + 16);
          v127 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v127 & 1) != 0)
            goto LABEL_185;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
            operator delete(object[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_185:
        if (byte_254A4A4F8[23] >= 0)
          v129 = byte_254A4A4F8;
        else
          v129 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v130 = byte_254A4A4F8[23];
        else
          v130 = *(_QWORD *)&byte_254A4A4F8[8];
        object[0] = os_log_create(v129, v126);
        v131 = &object[1];
        if (v130 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v130 >= 0x17)
        {
          v132 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v130 | 7) != 0x17)
            v132 = v130 | 7;
          v133 = v132 + 1;
          v131 = (void **)operator new(v132 + 1);
          object[3] = (void *)(v133 | 0x8000000000000000);
          object[1] = v131;
          object[2] = (void *)v130;
        }
        else
        {
          HIBYTE(object[3]) = v130;
          if (!v130)
          {
LABEL_199:
            *((_BYTE *)v131 + v130) = 0;
            LOBYTE(object[4]) = 1;
            v134 = &object[5];
            if (v125 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v125 >= 0x17)
            {
              v135 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v125 | 7) != 0x17)
                v135 = v125 | 7;
              v136 = v135 + 1;
              v134 = (void **)operator new(v135 + 1);
              object[7] = (void *)(v136 | 0x8000000000000000);
              object[5] = v134;
              object[6] = (void *)v125;
            }
            else
            {
              HIBYTE(object[7]) = v125;
              if (!v125)
                goto LABEL_207;
            }
            memmove(v134, v126, v125);
LABEL_207:
            *((_BYTE *)v134 + v125) = 0;
            LOBYTE(object[8]) = 1;
            v137 = object[0];
            if (SHIBYTE(object[7]) < 0)
              operator delete(object[5]);
            if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
              operator delete(object[1]);
            if (object[0])
              os_release(object[0]);
            v138 = v117 * 57.2957795;
            v139 = v118 * 57.2957795;
            v140 = v119 * 57.2957795;
            if (v122 && *(_QWORD *)(v122 + 24))
            {
              v141 = _os_log_pack_size();
              v142 = (std::__shared_weak_count_vtbl *)operator new(v141, (std::align_val_t)8uLL);
              v143 = (std::__shared_weak_count *)operator new();
              v144 = v143;
              v143->__shared_owners_ = 0;
              v145 = (unint64_t *)&v143->__shared_owners_;
              v143->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v143->__shared_weak_owners_ = 0;
              v143[1].__vftable = v142;
              object[0] = v142;
              object[1] = v142;
              object[2] = v143;
              do
                v146 = __ldxr(v145);
              while (__stxr(v146 + 1, v145));
              memset(&object[3], 0, 24);
              do
                v147 = __ldaxr(v145);
              while (__stlxr(v147 - 1, v145));
              if (!v147)
              {
                ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                std::__shared_weak_count::__release_weak(v144);
              }
              v148 = object[0];
              v149 = _os_log_pack_fill();
              *(_DWORD *)v149 = 134218496;
              *(double *)(v149 + 4) = v138;
              *(_WORD *)(v149 + 12) = 2048;
              *(double *)(v149 + 14) = v139;
              *(_WORD *)(v149 + 22) = 2048;
              *(double *)(v149 + 24) = v140;
              v150 = operator new();
              v151 = *(unsigned __int8 *)(v123 + 39);
              if ((v151 & 0x80u) == 0)
                v152 = v124;
              else
                v152 = *(_QWORD *)(v123 + 16);
              if ((v151 & 0x80u) != 0)
                v151 = *(_QWORD *)(v123 + 24);
              *(_QWORD *)v150 = v148;
              *(_OWORD *)(v150 + 8) = *(_OWORD *)&object[1];
              object[1] = 0;
              object[2] = 0;
              *(_OWORD *)(v150 + 24) = *(_OWORD *)&object[3];
              object[3] = 0;
              object[4] = 0;
              *(_QWORD *)(v150 + 40) = v152;
              *(_QWORD *)(v150 + 48) = v151;
              *(_BYTE *)(v150 + 56) = 2;
              v1843[0] = 0;
              *(_QWORD *)&v1794[0].f64[0] = v150;
              (*(void (**)(_QWORD, float64x2_t *))(**(_QWORD **)(v122 + 24) + 40))(*(_QWORD *)(v122 + 24), v1794);
              v153 = v1794[0].f64[0];
              v1794[0].f64[0] = 0.0;
              v8 = v1661;
              if (v153 != 0.0)
              {
                v154 = *(std::__shared_weak_count **)(*(_QWORD *)&v153 + 32);
                if (v154)
                {
                  v155 = (unint64_t *)&v154->__shared_owners_;
                  do
                    v156 = __ldaxr(v155);
                  while (__stlxr(v156 - 1, v155));
                  if (!v156)
                  {
                    ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                    std::__shared_weak_count::__release_weak(v154);
                  }
                }
                v157 = *(std::__shared_weak_count **)(*(_QWORD *)&v153 + 16);
                if (v157)
                {
                  v158 = (unint64_t *)&v157->__shared_owners_;
                  do
                    v159 = __ldaxr(v158);
                  while (__stlxr(v159 - 1, v158));
                  if (!v159)
                  {
                    ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                    std::__shared_weak_count::__release_weak(v157);
                  }
                }
                MEMORY[0x212BC6398](*(_QWORD *)&v153, 0x10F0C40B62ED6C6);
                v160 = v1843[0];
                v1843[0] = 0;
                if (v160)
                {
                  v161 = (std::__shared_weak_count *)*((_QWORD *)v160 + 4);
                  if (v161)
                  {
                    v162 = (unint64_t *)&v161->__shared_owners_;
                    do
                      v163 = __ldaxr(v162);
                    while (__stlxr(v163 - 1, v162));
                    if (!v163)
                    {
                      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                      std::__shared_weak_count::__release_weak(v161);
                    }
                  }
                  v164 = (std::__shared_weak_count *)*((_QWORD *)v160 + 2);
                  if (v164)
                  {
                    v165 = (unint64_t *)&v164->__shared_owners_;
                    do
                      v166 = __ldaxr(v165);
                    while (__stlxr(v166 - 1, v165));
                    if (!v166)
                    {
                      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                      std::__shared_weak_count::__release_weak(v164);
                    }
                  }
                  MEMORY[0x212BC6398](v160, 0x10F0C40B62ED6C6);
                }
              }
              v167 = (std::__shared_weak_count *)object[4];
              if (object[4])
              {
                v168 = (unint64_t *)((char *)object[4] + 8);
                do
                  v169 = __ldaxr(v168);
                while (__stlxr(v169 - 1, v168));
                if (!v169)
                {
                  ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                  std::__shared_weak_count::__release_weak(v167);
                }
              }
              v170 = (std::__shared_weak_count *)object[2];
              if (object[2])
              {
                v171 = (unint64_t *)((char *)object[2] + 8);
                do
                  v172 = __ldaxr(v171);
                while (__stlxr(v172 - 1, v171));
                if (!v172)
                {
                  ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                  std::__shared_weak_count::__release_weak(v170);
                }
              }
            }
            else
            {
              os_log_type_enabled(v137, OS_LOG_TYPE_DEBUG);
              LODWORD(object[0]) = 134218496;
              *(void **)((char *)object + 4) = *(void **)&v138;
              WORD2(object[1]) = 2048;
              *(void **)((char *)&object[1] + 6) = *(void **)&v139;
              HIWORD(object[2]) = 2048;
              object[3] = *(void **)&v140;
              LODWORD(v1657) = 32;
              v1656 = object;
              v173 = (void *)_os_log_send_and_compose_impl();
              v8 = v1661;
              if (v173)
                free(v173);
            }
            if (v120)
            {
              sub_20E8C003C((uint64_t)oslog, "Before optimize: Roll %f, pitch %f, Yaw %f", v138, v139, v140);
              sub_20E863570((uint64_t)oslog);
            }
            sub_20E863570((uint64_t)oslog);
            v174 = *(std::__shared_weak_count **)&oslog[64];
            if (*(_QWORD *)&oslog[64])
            {
              v175 = (unint64_t *)(*(_QWORD *)&oslog[64] + 8);
              do
                v176 = __ldaxr(v175);
              while (__stlxr(v176 - 1, v175));
              if (!v176)
              {
                ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                std::__shared_weak_count::__release_weak(v174);
              }
            }
            goto LABEL_269;
          }
        }
        memmove(v131, v129, v130);
        goto LABEL_199;
      }
    }
  }
LABEL_269:
  v177 = v8[1];
  v180 = v177->__vftable;
  v178 = &v177->__shared_owners_;
  v179 = &v180->~__shared_weak_count;
  if (v180 != (std::__shared_weak_count_vtbl *)v178)
  {
    while (1)
    {
      v181 = v179[6];
      if (!v181)
        break;
      v182 = v181 + 40;
      v183 = *(unsigned __int8 *)(v181 + 528);
      if (v183)
        v184 = v182;
      else
        v184 = 0;
      if (!v183)
        goto LABEL_283;
LABEL_284:
      *(_BYTE *)(v184 + 56) = 0;
      v188 = (uint64_t *)v179[1];
      if (v188)
      {
        do
        {
          v189 = v188;
          v188 = (uint64_t *)*v188;
        }
        while (v188);
      }
      else
      {
        do
        {
          v189 = (uint64_t *)v179[2];
          _ZF = *v189 == (_QWORD)v179;
          v179 = v189;
        }
        while (!_ZF);
      }
      v179 = v189;
      if (v189 == v178)
        goto LABEL_290;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/MapOptimizationUtil.cpp", 186, (uint64_t)"track.second", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v185 = v179[6];
    v186 = v185 + 40;
    v187 = *(unsigned __int8 *)(v185 + 528);
    if (v187)
      v184 = v186;
    else
      v184 = 0;
    if (v187)
      goto LABEL_284;
LABEL_283:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/MapOptimizationUtil.cpp", 188, (uint64_t)"structure", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    goto LABEL_284;
  }
LABEL_290:
  v190 = *(_BYTE *)(v1676 + 167);
  v191 = *(char **)(v1721 + 5032);
  v192 = v1721;
  v193 = *(char **)(v1721 + 5040);
  if (v193 == v191 || *(_DWORD *)v191)
  {
    v194 = *(uint64_t **)(v1721 + 96);
    if (v194)
    {
      v195 = *v194;
      if (v193 == v191)
        v191 = *(char **)(v1721 + 5040);
      if (v193 == v191)
        goto LABEL_303;
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 194, (uint64_t)"this->viobadata_ref_.state_to_imu_sample_time_offset", 52, (uint64_t)"Error the timeoffset variable is not set", 40, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_2016;
      }
      v194 = *(uint64_t **)(v192 + 96);
      if (!v194)
      {
        v191 = *(char **)(v192 + 5040);
        goto LABEL_327;
      }
      v191 = *(char **)(v192 + 5032);
      v193 = *(char **)(v192 + 5040);
      v195 = *v194;
      if (v193 == v191)
        v191 = *(char **)(v192 + 5040);
      if (v193 == v191)
      {
LABEL_303:
        v196 = (char *)sub_20F619254(v192 + 5056);
        *(_DWORD *)v196 = -1;
        v196[4] = 1;
        *((_DWORD *)v196 + 2) = 0;
        *((_DWORD *)v196 + 4) = 0;
        v196[20] = 1;
        *(_WORD *)(v196 + 21) = LOWORD(v1794[0].f64[0]);
        v196[23] = BYTE2(v1794[0].f64[0]);
        *((_QWORD *)v196 + 3) = v194;
        *((_QWORD *)v196 + 4) = v195;
        v196[40] = 0;
        *(_DWORD *)(v196 + 41) = *(_DWORD *)oslog;
        *((_DWORD *)v196 + 11) = *(_DWORD *)&oslog[3];
        LODWORD(object[0]) = 0;
        object[1] = v196;
        v191 = sub_20F618FEC((char **)(v192 + 5032), (__int128 *)v191, (uint64_t)object);
        v197 = *(char **)(v192 + 6256);
        v198 = *(_QWORD *)(v192 + 6264);
        if ((unint64_t)v197 < v198)
        {
          *(_DWORD *)v197 = 0;
          v199 = (uint64_t)(v197 + 4);
LABEL_326:
          *(_QWORD *)(v192 + 6256) = v199;
          *(_BYTE *)(v192 + 5810) = 0;
          *(_BYTE *)(v192 + 5808) = 0;
          *(_BYTE *)(v192 + 6588) = 0;
          *(_DWORD *)(v192 + 6584) = 0;
          goto LABEL_327;
        }
        v200 = *(char **)(v192 + 6248);
        v201 = (v197 - v200) >> 2;
        v202 = v201 + 1;
        if ((unint64_t)(v201 + 1) >> 62)
          sub_20E867F44();
        v203 = v198 - (_QWORD)v200;
        if (v203 >> 1 > v202)
          v202 = v203 >> 1;
        if ((unint64_t)v203 >= 0x7FFFFFFFFFFFFFFCLL)
          v204 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v204 = v202;
        if (v204)
        {
          if (v204 >> 62)
            sub_20E877A38();
          v205 = operator new(4 * v204);
          v206 = &v205[4 * v201];
          v207 = &v205[4 * v204];
          *v206 = 0;
          v199 = (uint64_t)(v206 + 1);
          v208 = v197 - v200;
          if (v197 == v200)
            goto LABEL_324;
        }
        else
        {
          v205 = 0;
          v206 = (_DWORD *)(4 * v201);
          v207 = 0;
          *(_DWORD *)(4 * v201) = 0;
          v199 = 4 * v201 + 4;
          v208 = v197 - v200;
          if (v197 == v200)
          {
LABEL_324:
            *(_QWORD *)(v192 + 6248) = v206;
            *(_QWORD *)(v192 + 6256) = v199;
            *(_QWORD *)(v192 + 6264) = v207;
            if (v200)
              operator delete(v200);
            goto LABEL_326;
          }
        }
        v209 = v208 - 4;
        if (v209 < 0x2C)
          goto LABEL_2057;
        if ((unint64_t)(v200 - v205) < 0x20)
          goto LABEL_2057;
        v210 = (v209 >> 2) + 1;
        v211 = 4 * (v210 & 0x7FFFFFFFFFFFFFF8);
        v212 = &v197[-v211];
        v206 = (_DWORD *)((char *)v206 - v211);
        v213 = &v205[4 * v201 - 16];
        v214 = v197 - 16;
        v215 = v210 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v216 = *(_OWORD *)v214;
          *(v213 - 1) = *((_OWORD *)v214 - 1);
          *v213 = v216;
          v213 -= 2;
          v214 -= 32;
          v215 -= 8;
        }
        while (v215);
        v197 = v212;
        if (v210 != (v210 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_2057:
          do
          {
            v217 = *((_DWORD *)v197 - 1);
            v197 -= 4;
            *--v206 = v217;
          }
          while (v197 != v200);
        }
        goto LABEL_324;
      }
    }
    if (*(_DWORD *)v191)
      goto LABEL_303;
    v191 = v193;
LABEL_327:
    v192 = v1721;
  }
  *(_BYTE *)(*((_QWORD *)v191 + 1) + 20) = v190;
  v218 = *(_QWORD *)(v192 + 5328) - *(_QWORD *)(v192 + 5320);
  v219 = (v218 >> 4);
  v220 = *(_QWORD **)(v192 + 8);
  if (v219 == v220[39])
    goto LABEL_533;
  v1686 = *(_BYTE *)(v1676 + 166);
  v1682 = (_BYTE *)(v192 + 5808);
  v1707 = v192;
  if (!*(_BYTE *)(v192 + 5808))
  {
    memset(object, 0, 32);
    if (sub_20F5B8114((_QWORD *)(v192 + 4832), (int *)object, oslog, 1))
    {
      *(_QWORD *)(v192 + 6400) = *(_QWORD *)(v192 + 6392);
      *(_QWORD *)(v192 + 6424) = *(_QWORD *)(v192 + 6416);
      *(_QWORD *)(v192 + 6448) = *(_QWORD *)(v192 + 6440);
      *(_QWORD *)(v192 + 6472) = *(_QWORD *)(v192 + 6464);
      *(_QWORD *)(v192 + 6496) = *(_QWORD *)(v192 + 6488);
      *(_QWORD *)(v192 + 6520) = *(_QWORD *)(v192 + 6512);
      *(_QWORD *)(v192 + 6544) = *(_QWORD *)(v192 + 6536);
      *(_QWORD *)(v192 + 6568) = *(_QWORD *)(v192 + 6560);
      v221 = *(_QWORD *)(v192 + 5608);
      v222 = *(_QWORD *)(v192 + 5616);
      while (v221 != v222)
      {
        v223 = *(_QWORD *)(v221 + 208);
        if (*(_BYTE *)(v221 + 496)
          || (*(_BYTE *)(v223 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v221 + 216) + 4) & 6) != 0)
        {
          sub_20F394A20(v192 + 6392, v223);
          sub_20F3D35E0((_QWORD *)(v192 + 6392), *(_QWORD *)(v221 + 216));
        }
        v221 += 504;
      }
      v224 = *(_QWORD *)(v192 + 5632);
      v225 = *(_QWORD *)(v192 + 5640);
      while (v224 != v225)
      {
        v226 = *(_QWORD *)(v224 + 136);
        if (*(_BYTE *)(v224 + 272) || (*(_BYTE *)(v226 + 4) & 6) != 0)
          sub_20F394A20(v192 + 6392, v226);
        v224 += 280;
      }
      v227 = (uint64_t *)v192;
      sub_20F5B8680(*(_QWORD *)(v192 + 5656), *(_QWORD *)(v192 + 5664), (_QWORD *)(v192 + 6392));
      sub_20F5B85BC(v227[710], v227[711], (_QWORD *)(v192 + 6392));
      sub_20F5B8444(v227[713], v227[714], (_QWORD *)(v192 + 6392));
      v228 = *(_QWORD *)(v192 + 5728);
      v229 = *(_QWORD *)(v192 + 5736);
      while (v228 != v229)
      {
        v230 = *(_QWORD *)(v228 + 736);
        if (*(_BYTE *)(v228 + 880)
          || (*(_BYTE *)(v230 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v228 + 744) + 4) & 6) != 0)
        {
          sub_20F394A20(v192 + 6392, v230);
          sub_20F394A20(v192 + 6392, *(_QWORD *)(v228 + 744));
        }
        v228 += 888;
      }
      v231 = (*(_QWORD *)(v192 + 6520) - *(_QWORD *)(v192 + 6512)) >> 2;
      if (HIDWORD(object[2]) > v231)
        LODWORD(v231) = HIDWORD(object[2]);
      _CF = *(_DWORD *)&oslog[20] >= v231;
      v232 = *(_DWORD *)&oslog[20] - v231;
      if (_CF)
        v233 = v232;
      else
        v233 = 0;
      sub_20F59A618((_QWORD *)(v192 + 4832));
      if (!v233)
        goto LABEL_363;
    }
    else if (!*(_DWORD *)&oslog[20])
    {
      goto LABEL_363;
    }
LABEL_362:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 271, (uint64_t)"!this->linear_system_.graph().template numberOfVariable<VARIABLE_TYPE>()", 72, (uint64_t)"CameraCalibVariables of this type have already been added.", 58, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_2016;
    }
    goto LABEL_363;
  }
  if ((v218 >> 4))
    goto LABEL_362;
LABEL_363:
  v234 = (uint64_t *)v220[47];
  if (v234)
  {
    v1673 = (void **)(v1707 + 6320);
    while (1)
    {
      LODWORD(v1794[0].f64[0]) = *((_DWORD *)v234 + 4);
      BYTE4(v1794[0].f64[0]) = 1;
      *(_QWORD *)&v1794[0].f64[1] = v234 + 3;
      v1796 = 1065353216;
      v1797 = 0;
      memset(&v1794[15], 0, 48);
      v1795 = 0;
      v235 = *(float64x2_t *)(v234 + 5);
      v1794[1] = *(float64x2_t *)(v234 + 3);
      v1794[2] = v235;
      v236 = *(float64x2_t *)(v234 + 9);
      v237 = *(float64x2_t *)(v234 + 13);
      v238 = *(float64x2_t *)(v234 + 7);
      v1794[5] = *(float64x2_t *)(v234 + 11);
      v1794[6] = v237;
      v1794[3] = v238;
      v1794[4] = v236;
      v239 = *(float64x2_t *)(v234 + 17);
      v240 = *(float64x2_t *)(v234 + 21);
      v241 = *(float64x2_t *)(v234 + 15);
      v1794[9] = *(float64x2_t *)(v234 + 19);
      v1794[10] = v240;
      v1794[7] = v241;
      v1794[8] = v239;
      v242 = *(float64x2_t *)(v234 + 25);
      v243 = *(float64x2_t *)(v234 + 29);
      v244 = *(float64x2_t *)(v234 + 23);
      v1794[13] = *(float64x2_t *)(v234 + 27);
      v1794[14] = v243;
      v1794[11] = v244;
      v1794[12] = v242;
      sub_20F6178A8((uint64_t)v1794);
      BYTE4(v1794[0].f64[0]) = v1686;
      v245 = v1794[17].f64[1];
      v246 = *(float64x2_t *)(*(_QWORD *)&v1794[0].f64[1] + 16);
      v1794[1] = **(float64x2_t **)&v1794[0].f64[1];
      v1794[2] = v246;
      v247 = *(float64x2_t *)(*(_QWORD *)&v1794[0].f64[1] + 80);
      v249 = *(float64x2_t *)(*(_QWORD *)&v1794[0].f64[1] + 32);
      v248 = *(float64x2_t *)(*(_QWORD *)&v1794[0].f64[1] + 48);
      v1794[5] = *(float64x2_t *)(*(_QWORD *)&v1794[0].f64[1] + 64);
      v1794[6] = v247;
      v1794[3] = v249;
      v1794[4] = v248;
      v250 = *(float64x2_t *)(*(_QWORD *)&v1794[0].f64[1] + 144);
      v252 = *(float64x2_t *)(*(_QWORD *)&v1794[0].f64[1] + 96);
      v251 = *(float64x2_t *)(*(_QWORD *)&v1794[0].f64[1] + 112);
      v1794[9] = *(float64x2_t *)(*(_QWORD *)&v1794[0].f64[1] + 128);
      v1794[10] = v250;
      v1794[7] = v252;
      v1794[8] = v251;
      v253 = *(__n128 *)(*(_QWORD *)&v1794[0].f64[1] + 192);
      v254 = *(float64x2_t *)(*(_QWORD *)&v1794[0].f64[1] + 208);
      v256 = *(float64x2_t *)(*(_QWORD *)&v1794[0].f64[1] + 160);
      v255 = *(float64x2_t *)(*(_QWORD *)&v1794[0].f64[1] + 176);
      v1794[13] = (float64x2_t)v253;
      v1794[14] = v254;
      v1794[11] = v256;
      v1794[12] = v255;
      if (*(_QWORD *)&v1794[17].f64[1])
      {
        do
        {
          v253.n128_f64[0] = sub_20F6182A0(*(char **)(*(_QWORD *)&v245 + 40), &v1794[1], v253);
          v245 = **(double **)&v245;
        }
        while (v245 != 0.0);
      }
      sub_20F6178A8((uint64_t)v1794);
      v257 = LODWORD(v1794[0].f64[0]);
      v258 = *(__int128 **)(v1707 + 5320);
      v259 = *(__int128 **)(v1707 + 5328);
      if (v259 == v258)
      {
        v258 = *(__int128 **)(v1707 + 5328);
      }
      else
      {
        v260 = v259 - v258;
        do
        {
          v261 = v260 >> 1;
          v262 = &v258[v260 >> 1];
          v264 = *(_DWORD *)v262;
          v263 = v262 + 1;
          v260 += ~(v260 >> 1);
          if (v264 < LODWORD(v1794[0].f64[0]))
            v258 = v263;
          else
            v260 = v261;
        }
        while (v260);
        if (v259 != v258 && LODWORD(v1794[0].f64[0]) == *(_DWORD *)v258)
        {
          v1700 = *(char **)(v1707 + 5328);
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 283, (uint64_t)"result", 6, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          goto LABEL_428;
        }
      }
      v265 = BYTE4(v1794[0].f64[0]);
      oslog[4] = 1;
      *(_DWORD *)oslog = -1;
      *(_DWORD *)&oslog[8] = 0;
      v267 = v1794[0].f64[1];
      v266 = v1794[0].f64[0];
      *(float64x2_t *)&oslog[16] = v1794[0];
      *(float64x2_t *)&oslog[192] = v1794[11];
      *(float64x2_t *)&oslog[208] = v1794[12];
      *(float64x2_t *)&oslog[224] = v1794[13];
      *(float64x2_t *)&oslog[240] = v1794[14];
      *(float64x2_t *)&oslog[128] = v1794[7];
      *(float64x2_t *)&oslog[144] = v1794[8];
      *(float64x2_t *)&oslog[160] = v1794[9];
      *(float64x2_t *)&oslog[176] = v1794[10];
      *(float64x2_t *)&oslog[64] = v1794[3];
      *(float64x2_t *)&oslog[80] = v1794[4];
      *(float64x2_t *)&oslog[96] = v1794[5];
      *(float64x2_t *)&oslog[112] = v1794[6];
      *(float64x2_t *)&oslog[32] = v1794[1];
      *(float64x2_t *)&oslog[48] = v1794[2];
      v269 = v1794[15].f64[1];
      v268 = v1794[15].f64[0];
      *(float64x2_t *)&oslog[256] = v1794[15];
      v270 = v1794[16].f64[1];
      v271 = v1794[16].f64[0];
      memset(&v1794[15], 0, 40);
      v273 = v1794[17].f64[1];
      v272 = v1794[17].f64[0];
      *(_OWORD *)&oslog[272] = __PAIR128__(*(unint64_t *)&v270, *(unint64_t *)&v271);
      *(float64x2_t *)&oslog[288] = v1794[17];
      v274 = v1795;
      *(_QWORD *)&oslog[304] = v1795;
      v275 = v1796;
      *(_DWORD *)&oslog[312] = v1796;
      if (v1795)
      {
        v276 = *(_QWORD *)(*(_QWORD *)&v1794[17].f64[1] + 8);
        if ((*(_QWORD *)&v1794[17].f64[0] & (*(_QWORD *)&v1794[17].f64[0] - 1)) != 0)
        {
          if (v276 >= *(_QWORD *)&v1794[17].f64[0])
            v276 %= *(_QWORD *)&v1794[17].f64[0];
        }
        else
        {
          v276 &= *(_QWORD *)&v1794[17].f64[0] - 1;
        }
        *(_QWORD *)(*(_QWORD *)&v270 + 8 * v276) = &oslog[296];
        v1794[17].f64[1] = 0.0;
        v1795 = 0;
        v266 = *(double *)&oslog[16];
        v267 = *(double *)&oslog[24];
        v268 = *(double *)&oslog[256];
        v269 = *(double *)&oslog[264];
        v271 = *(float64_t *)&oslog[272];
        v270 = *(float64_t *)&oslog[280];
        v272 = *(double *)&oslog[288];
        v273 = *(double *)&oslog[296];
        v274 = *(void **)&oslog[304];
        v275 = *(_DWORD *)&oslog[312];
      }
      v277 = v1797;
      oslog[320] = v1797;
      memset(&oslog[328], 0, 224);
      LODWORD(object[0]) = v257;
      LODWORD(object[2]) = *(_DWORD *)&oslog[8];
      object[1] = *(void **)oslog;
      object[3] = *(void **)&v266;
      object[4] = *(void **)&v267;
      *(_OWORD *)&object[5] = *(_OWORD *)&oslog[32];
      *(_OWORD *)&object[7] = *(_OWORD *)&oslog[48];
      *(_OWORD *)&object[13] = *(_OWORD *)&oslog[96];
      *(_OWORD *)&object[15] = *(_OWORD *)&oslog[112];
      *(_OWORD *)&object[9] = *(_OWORD *)&oslog[64];
      *(_OWORD *)&object[11] = *(_OWORD *)&oslog[80];
      *(_OWORD *)&object[21] = *(_OWORD *)&oslog[160];
      *(_OWORD *)&object[23] = *(_OWORD *)&oslog[176];
      *(_OWORD *)&object[17] = *(_OWORD *)&oslog[128];
      *(_OWORD *)&object[19] = *(_OWORD *)&oslog[144];
      *(_OWORD *)&object[29] = *(_OWORD *)&oslog[224];
      *(_OWORD *)&object[31] = *(_OWORD *)&oslog[240];
      *(_OWORD *)&object[25] = *(_OWORD *)&oslog[192];
      *(_OWORD *)&object[27] = *(_OWORD *)&oslog[208];
      object[33] = *(void **)&v268;
      object[34] = *(void **)&v269;
      memset(&oslog[256], 0, 40);
      object[35] = *(void **)&v271;
      object[36] = *(void **)&v270;
      object[37] = *(void **)&v272;
      object[38] = *(void **)&v273;
      object[39] = v274;
      LODWORD(object[40]) = v275;
      if (v274)
      {
        v278 = *(_QWORD *)(*(_QWORD *)&v273 + 8);
        if ((*(_QWORD *)&v272 & (*(_QWORD *)&v272 - 1)) != 0)
        {
          if (v278 >= *(_QWORD *)&v272)
            v278 %= *(_QWORD *)&v272;
        }
        else
        {
          v278 &= *(_QWORD *)&v272 - 1;
        }
        *(_QWORD *)(*(_QWORD *)&v270 + 8 * v278) = &object[38];
        *(_QWORD *)&oslog[296] = 0;
        *(_QWORD *)&oslog[304] = 0;
      }
      LOBYTE(object[41]) = v277;
      *(_OWORD *)&object[62] = *(_OWORD *)&oslog[488];
      *(_OWORD *)&object[64] = *(_OWORD *)&oslog[504];
      *(_OWORD *)&object[66] = *(_OWORD *)&oslog[520];
      *(_OWORD *)&object[68] = *(_OWORD *)&oslog[536];
      *(_OWORD *)&object[54] = *(_OWORD *)&oslog[424];
      *(_OWORD *)&object[56] = *(_OWORD *)&oslog[440];
      *(_OWORD *)&object[58] = *(_OWORD *)&oslog[456];
      *(_OWORD *)&object[60] = *(_OWORD *)&oslog[472];
      *(_OWORD *)&object[46] = *(_OWORD *)&oslog[360];
      *(_OWORD *)&object[48] = *(_OWORD *)&oslog[376];
      *(_OWORD *)&object[50] = *(_OWORD *)&oslog[392];
      *(_OWORD *)&object[52] = *(_OWORD *)&oslog[408];
      *(_OWORD *)&object[42] = *(_OWORD *)&oslog[328];
      *(_OWORD *)&object[44] = *(_OWORD *)&oslog[344];
      v1700 = sub_20F619554((char **)(v1707 + 5320), v258, (int *)object);
      v279 = object[38];
      if (object[38])
      {
        do
        {
          v280 = (_QWORD *)*v279;
          operator delete(v279);
          v279 = v280;
        }
        while (v280);
      }
      v281 = object[36];
      object[36] = 0;
      if (v281)
        operator delete(v281);
      if (object[33])
      {
        object[34] = object[33];
        operator delete(object[33]);
      }
      v282 = *(_QWORD **)&oslog[296];
      if (*(_QWORD *)&oslog[296])
      {
        do
        {
          v283 = (_QWORD *)*v282;
          operator delete(v282);
          v282 = v283;
        }
        while (v283);
      }
      v284 = *(void **)&oslog[280];
      *(_QWORD *)&oslog[280] = 0;
      if (v284)
        operator delete(v284);
      if (*(_QWORD *)&oslog[256])
      {
        *(_QWORD *)&oslog[264] = *(_QWORD *)&oslog[256];
        operator delete(*(void **)&oslog[256]);
      }
      if (v265)
        break;
LABEL_427:
      v1682[2] = 0;
      *v1682 = 0;
      *(_DWORD *)(v1707 + 6584) = 0;
      *(_BYTE *)(v1707 + 6588) = 0;
LABEL_428:
      v306.n128_u32[1] = 0;
      v306.n128_u64[1] = 0;
      memset(object, 0, 32);
      LODWORD(object[4]) = 1065353216;
      v307 = *(uint64_t ***)(v1707 + 128);
      v308 = *v307;
      v309 = v307[1];
      while (v308 != v309)
      {
        v310 = (__int128 *)*v308;
        if (*(_QWORD *)(*v308 + 24))
        {
          if (*((_DWORD *)v310 + 4) != *((_DWORD *)v234 + 4))
            goto LABEL_429;
LABEL_444:
          v316 = *v310;
          *(_QWORD *)&oslog[16] = *((_QWORD *)v310 + 2);
          *(_OWORD *)oslog = v316;
          *(_OWORD *)&oslog[24] = *(__int128 *)((char *)v310 + 24);
          sub_20F61A180((uint64_t)object, (uint64_t *)oslog, (uint64_t)oslog);
          goto LABEL_429;
        }
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 288, (uint64_t)"frame->lens_model_", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v311 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v311 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (byte_254A6DE68)
          v312 = byte_254A6DE70 == 0;
        else
          v312 = 0;
        if (!v312)
        {
          v313 = qword_254A6DE40;
          for (i = qword_254A6DE48; v313 != i; v313 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v313)(*(_QWORD *)(v313 + 8), "frame->lens_model_", 18, "", 0);
        }
        v315 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v315 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "frame->lens_model_", 18, "", 0);
        v310 = (__int128 *)*v308;
        if (*(_DWORD *)(*v308 + 16) == *((_DWORD *)v234 + 4))
          goto LABEL_444;
LABEL_429:
        v308 += 2;
      }
      v317 = *((_QWORD *)v1700 + 1);
      if (*(_QWORD *)(v317 + 304))
      {
        v318 = *(_QWORD **)(v317 + 296);
        if (v318)
        {
          do
          {
            v319 = (_QWORD *)*v318;
            operator delete(v318);
            v318 = v319;
          }
          while (v319);
        }
        *(_QWORD *)(v317 + 296) = 0;
        v320 = *(_QWORD *)(v317 + 288);
        if (v320)
        {
          for (j = 0; j != v320; ++j)
            *(_QWORD *)(*(_QWORD *)(v317 + 280) + 8 * j) = 0;
        }
        *(_QWORD *)(v317 + 304) = 0;
      }
      v322 = object[0];
      object[0] = 0;
      v323 = *(void **)(v317 + 280);
      *(_QWORD *)(v317 + 280) = v322;
      if (v323)
        operator delete(v323);
      v324 = (unint64_t)object[1];
      v325 = object[2];
      object[1] = 0;
      v326 = object[3];
      *(void **)(v317 + 296) = object[2];
      *(_QWORD *)(v317 + 304) = v326;
      v306.n128_u32[0] = (unsigned __int32)object[4];
      *(_DWORD *)(v317 + 312) = object[4];
      *(_QWORD *)(v317 + 288) = v324;
      if (v326)
      {
        v327 = *((_QWORD *)v325 + 1);
        if ((v324 & (v324 - 1)) != 0)
        {
          if (v327 >= v324)
            v327 %= v324;
        }
        else
        {
          v327 &= v324 - 1;
        }
        *(_QWORD *)(*(_QWORD *)(v317 + 280) + 8 * v327) = v317 + 296;
        object[2] = 0;
        object[3] = 0;
        v325 = *(void **)(v317 + 296);
      }
      for (; v325; v325 = *(void **)v325)
        v306.n128_f64[0] = sub_20F6182A0(*((char **)v325 + 5), (float64x2_t *)(v317 + 32), v306);
      sub_20F6178A8(v317 + 16);
      memset(oslog, 0, 24);
      v328 = *(_QWORD **)(v1707 + 16);
      v329 = v328[2];
      if (v329)
      {
        if (v329 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        v330 = (char *)operator new(24 * v329);
        *(_QWORD *)oslog = v330;
        *(_QWORD *)&oslog[8] = v330;
        *(_QWORD *)&oslog[16] = &v330[24 * v329];
        v333 = (_QWORD *)*v328;
        v332 = v328 + 1;
        v331 = v333;
        if (v333 == v332)
          goto LABEL_471;
LABEL_486:
        while (2)
        {
          v344 = v331[6];
          if (*(_BYTE *)(v344 + 528))
            v345 = v344 + 40;
          else
            v345 = 0;
          if (*(_BYTE *)(v344 + 528))
          {
            v346 = *(_DWORD *)(v344 + 88);
            if (v346 == *((_DWORD *)v234 + 4))
            {
              v347 = *(_QWORD *)(v344 + 536);
              v348 = *(_QWORD *)(v344 + 544);
              v349 = *(_QWORD *)(v344 + 72);
              v350 = *(_DWORD *)(v344 + 80);
              if (v348 != v347)
              {
                v351 = (v348 - v347) >> 5;
                while (1)
                {
                  v352 = v351 >> 1;
                  v353 = v347 + 32 * (v351 >> 1);
                  v354 = *(_DWORD *)(v353 + 16);
                  _CF = v354 >= v346;
                  if (v354 != v346)
                    goto LABEL_499;
                  if (*(_QWORD *)v353 >= v349)
                    break;
LABEL_493:
                  v347 = v353 + 32;
                  v352 = v351 + ~v352;
LABEL_494:
                  v351 = v352;
                  if (!v352)
                    goto LABEL_502;
                }
                if (*(_QWORD *)v353 != v349)
                  goto LABEL_494;
                _CF = *(_DWORD *)(v353 + 8) >= v350;
LABEL_499:
                if (_CF)
                  goto LABEL_494;
                goto LABEL_493;
              }
LABEL_502:
              if (v347 != v348
                && *(_DWORD *)(v347 + 16) == v346
                && *(_QWORD *)v347 == v349
                && *(_DWORD *)(v347 + 8) == v350)
              {
                v356 = *(_QWORD *)(v347 + 24);
                v357 = *(_DWORD *)(v344 + 32);
                v358 = *(_QWORD *)&oslog[16];
                if ((unint64_t)v330 >= *(_QWORD *)&oslog[16])
                  goto LABEL_507;
LABEL_517:
                *(_DWORD *)v330 = v357;
                v366 = v330 + 24;
                *((_QWORD *)v330 + 1) = v356;
                *((_QWORD *)v330 + 2) = v345;
              }
              else
              {
                v356 = 0;
                v357 = *(_DWORD *)(v344 + 32);
                v358 = *(_QWORD *)&oslog[16];
                if ((unint64_t)v330 < *(_QWORD *)&oslog[16])
                  goto LABEL_517;
LABEL_507:
                v359 = *(char **)oslog;
                v360 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v330[-*(_QWORD *)oslog] >> 3);
                v361 = v360 + 1;
                if (v360 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_20E867F44();
                v362 = v234;
                v363 = 0xAAAAAAAAAAAAAAABLL * ((v358 - *(_QWORD *)oslog) >> 3);
                if (2 * v363 > v361)
                  v361 = 2 * v363;
                if (v363 >= 0x555555555555555)
                  v364 = 0xAAAAAAAAAAAAAAALL;
                else
                  v364 = v361;
                if (v364)
                {
                  if (v364 > 0xAAAAAAAAAAAAAAALL)
                    sub_20E877A38();
                  v365 = (char *)operator new(24 * v364);
                }
                else
                {
                  v365 = 0;
                }
                v367 = &v365[24 * v360];
                *(_DWORD *)v367 = v357;
                *((_QWORD *)v367 + 1) = v356;
                *((_QWORD *)v367 + 2) = v345;
                v368 = v367;
                if (v330 != v359)
                {
                  do
                  {
                    v369 = *(_OWORD *)(v330 - 24);
                    *((_QWORD *)v368 - 1) = *((_QWORD *)v330 - 1);
                    *(_OWORD *)(v368 - 24) = v369;
                    v368 -= 24;
                    v330 -= 24;
                  }
                  while (v330 != v359);
                  v330 = *(char **)oslog;
                }
                v366 = v367 + 24;
                *(_QWORD *)oslog = v368;
                *(_QWORD *)&oslog[8] = v367 + 24;
                *(_QWORD *)&oslog[16] = &v365[24 * v364];
                if (v330)
                  operator delete(v330);
                v234 = v362;
              }
              *(_QWORD *)&oslog[8] = v366;
              v330 = v366;
            }
          }
          v370 = (_QWORD *)v331[1];
          if (v370)
          {
            do
            {
              v371 = v370;
              v370 = (_QWORD *)*v370;
            }
            while (v370);
          }
          else
          {
            do
            {
              v371 = (_QWORD *)v331[2];
              _ZF = *v371 == (_QWORD)v331;
              v331 = v371;
            }
            while (!_ZF);
          }
          v331 = v371;
          if (v371 == v332)
            goto LABEL_471;
          continue;
        }
      }
      v330 = 0;
      v334 = (_QWORD *)*v328;
      v332 = v328 + 1;
      v331 = v334;
      if (v334 != v332)
        goto LABEL_486;
LABEL_471:
      v335 = (_QWORD *)*((_QWORD *)v1700 + 1);
      v336 = (void *)v335[32];
      if (v336)
      {
        v335[33] = v336;
        operator delete(v336);
        v335[32] = 0;
        v335[33] = 0;
        v335[34] = 0;
        v330 = *(char **)&oslog[8];
      }
      v337 = *(_QWORD *)&oslog[16];
      v335[32] = *(_QWORD *)oslog;
      v335[33] = v330;
      v335[34] = v337;
      memset(oslog, 0, 24);
      sub_20F6178A8((uint64_t)(v335 + 2));
      if (*(_QWORD *)oslog)
      {
        *(_QWORD *)&oslog[8] = *(_QWORD *)oslog;
        operator delete(*(void **)oslog);
      }
      v338 = object[2];
      if (object[2])
      {
        do
        {
          v339 = (_QWORD *)*v338;
          operator delete(v338);
          v338 = v339;
        }
        while (v339);
      }
      v340 = object[0];
      object[0] = 0;
      if (v340)
        operator delete(v340);
      v341 = v1794[17].f64[1];
      if (*(_QWORD *)&v1794[17].f64[1])
      {
        do
        {
          v342 = **(double **)&v341;
          operator delete(*(void **)&v341);
          v341 = v342;
        }
        while (v342 != 0.0);
      }
      v343 = v1794[16].f64[1];
      v1794[16].f64[1] = 0.0;
      if (v343 != 0.0)
        operator delete(*(void **)&v343);
      if (*(_QWORD *)&v1794[15].f64[0])
      {
        v1794[15].f64[1] = v1794[15].f64[0];
        operator delete(*(void **)&v1794[15].f64[0]);
      }
      v234 = (uint64_t *)*v234;
      if (!v234)
        goto LABEL_532;
    }
    v285 = *(char **)(v1707 + 6328);
    v286 = *(_QWORD *)(v1707 + 6336);
    if ((unint64_t)v285 < v286)
    {
      *(_DWORD *)v285 = v257;
      v287 = (uint64_t)(v285 + 4);
LABEL_426:
      *(_QWORD *)(v1707 + 6328) = v287;
      goto LABEL_427;
    }
    v288 = (char *)*v1673;
    v289 = v285 - (_BYTE *)*v1673;
    v290 = v289 >> 2;
    v291 = (v289 >> 2) + 1;
    if (v291 >> 62)
      sub_20E867F44();
    v292 = v286 - (_QWORD)v288;
    if (v292 >> 1 > v291)
      v291 = v292 >> 1;
    if ((unint64_t)v292 >= 0x7FFFFFFFFFFFFFFCLL)
      v293 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v293 = v291;
    if (v293)
    {
      if (v293 >> 62)
        sub_20E877A38();
      v294 = operator new(4 * v293);
      v295 = &v294[4 * v290];
      *v295 = v257;
      v287 = (uint64_t)(v295 + 1);
      v296 = v285 - v288;
      if (v285 == v288)
        goto LABEL_424;
    }
    else
    {
      v294 = 0;
      v295 = (_DWORD *)(4 * v290);
      *(_DWORD *)(4 * v290) = v257;
      v287 = 4 * v290 + 4;
      v296 = v285 - v288;
      if (v285 == v288)
      {
LABEL_424:
        *(_QWORD *)(v1707 + 6320) = v295;
        *(_QWORD *)(v1707 + 6328) = v287;
        *(_QWORD *)(v1707 + 6336) = &v294[4 * v293];
        if (v288)
          operator delete(v288);
        goto LABEL_426;
      }
    }
    v297 = v296 - 4;
    if (v297 < 0x2C)
      goto LABEL_2058;
    if ((unint64_t)(v285 - v294 - v289) < 0x20)
      goto LABEL_2058;
    v298 = (v297 >> 2) + 1;
    v299 = 4 * (v298 & 0x7FFFFFFFFFFFFFF8);
    v300 = &v285[-v299];
    v295 = (_DWORD *)((char *)v295 - v299);
    v301 = &v294[4 * v290 - 16];
    v302 = v285 - 16;
    v303 = v298 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v304 = *(_OWORD *)v302;
      *(v301 - 1) = *((_OWORD *)v302 - 1);
      *v301 = v304;
      v301 -= 2;
      v302 -= 32;
      v303 -= 8;
    }
    while (v303);
    v285 = v300;
    if (v298 != (v298 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_2058:
      do
      {
        v305 = *((_DWORD *)v285 - 1);
        v285 -= 4;
        *--v295 = v305;
      }
      while (v285 != v288);
    }
    goto LABEL_424;
  }
LABEL_532:
  v192 = v1721;
  v220 = *(_QWORD **)(v1721 + 8);
  v219 = v220[39];
LABEL_533:
  v372 = (*(_QWORD *)(v192 + 5424) - *(_QWORD *)(v192 + 5416)) >> 4;
  v1708 = v192;
  if (v219 != v372)
  {
    __sba = *(_BYTE *)(v1676 + 168);
    v1683 = (_BYTE *)(v192 + 5808);
    if (*(_BYTE *)(v192 + 5808))
    {
      if (!(_DWORD)v372)
      {
LABEL_539:
        v374 = (uint64_t *)v220[52];
        v373 = v1661;
        if (!v374)
        {
LABEL_688:
          v1708 = v1721;
          if (!v1789)
            goto LABEL_726;
          goto LABEL_689;
        }
        v1681 = (char **)(v192 + 5416);
        v1671 = (void **)(v192 + 6344);
        v1678 = v192 + 6584;
        while (1)
        {
          LODWORD(v1794[0].f64[0]) = *((_DWORD *)v374 + 4);
          BYTE4(v1794[0].f64[0]) = 1;
          v1794[2].f64[1] = 0.0;
          *(float64x2_t *)((char *)&v1794[3] + 8) = 0u;
          v1794[4].f64[1] = 0.0;
          *(float64x2_t *)((char *)&v1794[1] + 8) = 0u;
          *(_QWORD *)&v1794[0].f64[1] = v374 + 3;
          v1794[1].f64[0] = 1.0;
          v1794[3].f64[0] = 1.0;
          v1794[5].f64[0] = 1.0;
          *(float64x2_t *)((char *)&v1794[5] + 8) = 0u;
          *(float64x2_t *)((char *)&v1794[6] + 8) = 0u;
          *(float64x2_t *)((char *)&v1794[7] + 8) = 0u;
          v1794[8].f64[1] = 0.0;
          LODWORD(v1794[9].f64[0]) = 1065353216;
          LOBYTE(v1794[9].f64[1]) = 0;
          v1794[1] = *(float64x2_t *)(v374 + 3);
          v375 = *(float64x2_t *)(v374 + 5);
          v376 = *(float64x2_t *)(v374 + 7);
          v377 = *(float64x2_t *)(v374 + 9);
          *(_QWORD *)&v1794[5].f64[0] = v374[11];
          v1794[3] = v376;
          v1794[4] = v377;
          v1794[2] = v375;
          sub_20F811C04((uint64_t)v1794);
          BYTE4(v1794[0].f64[0]) = __sba;
          v1794[1] = **(float64x2_t **)&v1794[0].f64[1];
          v379 = *(float64x2_t *)(*(_QWORD *)&v1794[0].f64[1] + 32);
          v378 = *(float64x2_t *)(*(_QWORD *)&v1794[0].f64[1] + 48);
          v380 = *(float64x2_t *)(*(_QWORD *)&v1794[0].f64[1] + 16);
          v1794[5].f64[0] = *(float64_t *)(*(_QWORD *)&v1794[0].f64[1] + 64);
          v1794[3] = v379;
          v1794[4] = v378;
          v1794[2] = v380;
          sub_20F811C04((uint64_t)v1794);
          v381 = LODWORD(v1794[0].f64[0]);
          v382 = *(__int128 **)(v1708 + 5416);
          v383 = *(__int128 **)(v1708 + 5424);
          if (v383 == v382)
          {
            v382 = *(__int128 **)(v1708 + 5424);
          }
          else
          {
            v384 = v383 - v382;
            do
            {
              v385 = v384 >> 1;
              v386 = &v382[v384 >> 1];
              v388 = *(_DWORD *)v386;
              v387 = v386 + 1;
              v384 += ~(v384 >> 1);
              if (v388 < LODWORD(v1794[0].f64[0]))
                v382 = v387;
              else
                v384 = v385;
            }
            while (v384);
            if (v383 != v382 && LODWORD(v1794[0].f64[0]) == *(_DWORD *)v382)
            {
              v1701 = *(char **)(v1708 + 5424);
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 283, (uint64_t)"result", 6, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              goto LABEL_602;
            }
          }
          v389 = BYTE4(v1794[0].f64[0]);
          oslog[4] = 1;
          *(_DWORD *)oslog = -1;
          *(_DWORD *)&oslog[8] = 0;
          v391 = v1794[0].f64[1];
          v390 = v1794[0].f64[0];
          *(float64x2_t *)&oslog[16] = v1794[0];
          *(float64x2_t *)&oslog[64] = v1794[3];
          *(float64x2_t *)&oslog[80] = v1794[4];
          *(float64x2_t *)&oslog[96] = v1794[5];
          *(float64x2_t *)&oslog[32] = v1794[1];
          *(float64x2_t *)&oslog[48] = v1794[2];
          v392 = v1794[5].f64[1];
          v394 = v1794[6].f64[1];
          v393 = v1794[6].f64[0];
          *(float64_t *)&oslog[112] = v1794[6].f64[0];
          v395 = v1794[7].f64[0];
          memset(&v1794[6], 0, 32);
          v1794[5].f64[1] = 0.0;
          v396 = v1794[7].f64[1];
          v397 = v1794[8].f64[0];
          *(float64_t *)&oslog[120] = v394;
          *(_OWORD *)&oslog[128] = __PAIR128__(*(unint64_t *)&v1794[7].f64[1], *(unint64_t *)&v395);
          v398 = v1794[8].f64[1];
          *(float64x2_t *)&oslog[144] = v1794[8];
          v399 = LODWORD(v1794[9].f64[0]);
          *(_DWORD *)&oslog[160] = LODWORD(v1794[9].f64[0]);
          if (*(_QWORD *)&v1794[8].f64[1])
          {
            v400 = *(_QWORD *)(*(_QWORD *)&v1794[8].f64[0] + 8);
            if ((*(_QWORD *)&v1794[7].f64[1] & (*(_QWORD *)&v1794[7].f64[1] - 1)) != 0)
            {
              if (v400 >= *(_QWORD *)&v1794[7].f64[1])
                v400 %= *(_QWORD *)&v1794[7].f64[1];
            }
            else
            {
              v400 &= *(_QWORD *)&v1794[7].f64[1] - 1;
            }
            *(_QWORD *)(*(_QWORD *)&v395 + 8 * v400) = &oslog[144];
            v1794[8] = 0uLL;
            v390 = *(double *)&oslog[16];
            v391 = *(double *)&oslog[24];
            v392 = *(double *)&oslog[104];
            v393 = *(double *)&oslog[112];
            v394 = *(double *)&oslog[120];
            v395 = *(float64_t *)&oslog[128];
            v396 = *(double *)&oslog[136];
            v397 = *(double *)&oslog[144];
            v398 = *(double *)&oslog[152];
            v399 = *(_DWORD *)&oslog[160];
          }
          v401 = LOBYTE(v1794[9].f64[1]);
          oslog[168] = LOBYTE(v1794[9].f64[1]);
          memset(&oslog[216], 0, 24);
          memset(&oslog[184], 0, 24);
          *(_QWORD *)&oslog[208] = 0x3FF0000000000000;
          *(_QWORD *)&oslog[240] = 0x3FF0000000000000;
          LODWORD(object[0]) = v381;
          object[1] = *(void **)oslog;
          LODWORD(object[2]) = *(_DWORD *)&oslog[8];
          object[3] = *(void **)&v390;
          object[4] = *(void **)&v391;
          object[13] = *(void **)&oslog[96];
          *(_OWORD *)&object[9] = *(_OWORD *)&oslog[64];
          *(_OWORD *)&object[11] = *(_OWORD *)&oslog[80];
          *(_OWORD *)&object[5] = *(_OWORD *)&oslog[32];
          *(_OWORD *)&object[7] = *(_OWORD *)&oslog[48];
          object[14] = *(void **)&v392;
          object[15] = *(void **)&v393;
          memset(&oslog[104], 0, 40);
          object[16] = *(void **)&v394;
          object[17] = *(void **)&v395;
          *(_QWORD *)&oslog[176] = 0x3FF0000000000000;
          object[18] = *(void **)&v396;
          object[19] = *(void **)&v397;
          object[20] = *(void **)&v398;
          LODWORD(object[21]) = v399;
          if (v398 != 0.0)
          {
            v402 = *(_QWORD *)(*(_QWORD *)&v397 + 8);
            if ((*(_QWORD *)&v396 & (*(_QWORD *)&v396 - 1)) != 0)
            {
              if (v402 >= *(_QWORD *)&v396)
                v402 %= *(_QWORD *)&v396;
            }
            else
            {
              v402 &= *(_QWORD *)&v396 - 1;
            }
            *(_QWORD *)(*(_QWORD *)&v395 + 8 * v402) = &object[19];
            *(_QWORD *)&oslog[144] = 0;
            *(_QWORD *)&oslog[152] = 0;
          }
          LOBYTE(object[22]) = v401;
          *(_OWORD *)&object[27] = *(_OWORD *)&oslog[208];
          *(_OWORD *)&object[29] = *(_OWORD *)&oslog[224];
          object[31] = *(void **)&oslog[240];
          *(_OWORD *)&object[23] = *(_OWORD *)&oslog[176];
          *(_OWORD *)&object[25] = *(_OWORD *)&oslog[192];
          v1701 = sub_20F61A4C4(v1681, v382, (int *)object);
          v403 = object[19];
          if (object[19])
          {
            do
            {
              v404 = (_QWORD *)*v403;
              operator delete(v403);
              v403 = v404;
            }
            while (v404);
          }
          v405 = object[17];
          object[17] = 0;
          if (v405)
            operator delete(v405);
          if (object[14])
          {
            object[15] = object[14];
            operator delete(object[14]);
          }
          v406 = *(_QWORD **)&oslog[144];
          if (*(_QWORD *)&oslog[144])
          {
            do
            {
              v407 = (_QWORD *)*v406;
              operator delete(v406);
              v406 = v407;
            }
            while (v407);
          }
          v408 = *(void **)&oslog[128];
          *(_QWORD *)&oslog[128] = 0;
          if (v408)
            operator delete(v408);
          if (*(_QWORD *)&oslog[104])
          {
            *(_QWORD *)&oslog[112] = *(_QWORD *)&oslog[104];
            operator delete(*(void **)&oslog[104]);
          }
          if (v389)
            break;
LABEL_601:
          v1683[2] = 0;
          *v1683 = 0;
          *(_DWORD *)v1678 = 0;
          *(_BYTE *)(v1678 + 4) = 0;
LABEL_602:
          memset(object, 0, 32);
          LODWORD(object[4]) = 1065353216;
          v430 = *(uint64_t ***)(v1708 + 128);
          v431 = *v430;
          v432 = v430[1];
          while (v431 != v432)
          {
            v433 = (__int128 *)*v431;
            if (*(_QWORD *)(*v431 + 24))
            {
              if (*((_DWORD *)v433 + 4) != *((_DWORD *)v374 + 4))
                goto LABEL_603;
LABEL_618:
              v439 = *v433;
              *(_QWORD *)&oslog[16] = *((_QWORD *)v433 + 2);
              *(_OWORD *)oslog = v439;
              *(_OWORD *)&oslog[24] = *(__int128 *)((char *)v433 + 24);
              sub_20F61A180((uint64_t)object, (uint64_t *)oslog, (uint64_t)oslog);
              goto LABEL_603;
            }
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 288, (uint64_t)"frame->lens_model_", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v434 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v434 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (byte_254A6DE68)
              v435 = byte_254A6DE70 == 0;
            else
              v435 = 0;
            if (!v435)
            {
              v436 = qword_254A6DE40;
              for (k = qword_254A6DE48; v436 != k; v436 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v436)(*(_QWORD *)(v436 + 8), "frame->lens_model_", 18, "", 0);
            }
            v438 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v438 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              abort();
            qword_254A6DE58(unk_254A6DE60, "frame->lens_model_", 18, "", 0);
            v433 = (__int128 *)*v431;
            if (*(_DWORD *)(*v431 + 16) == *((_DWORD *)v374 + 4))
              goto LABEL_618;
LABEL_603:
            v431 += 2;
          }
          v440 = *((_QWORD *)v1701 + 1);
          v441 = v440 + 16;
          sub_20EB0F04C(v440 + 128, (uint64_t *)object);
          sub_20F811C04(v441);
          memset(oslog, 0, 24);
          v442 = *(_QWORD **)(v1708 + 16);
          v443 = v442[2];
          if (v443)
          {
            if (v443 > 0xAAAAAAAAAAAAAAALL)
              sub_20E867F44();
            v444 = (char *)operator new(24 * v443);
            *(_QWORD *)oslog = v444;
            *(_QWORD *)&oslog[8] = v444;
            *(_QWORD *)&oslog[16] = &v444[24 * v443];
            v447 = (_QWORD *)*v442;
            v446 = v442 + 1;
            v445 = v447;
            if (v447 == v446)
              goto LABEL_628;
LABEL_643:
            while (2)
            {
              v458 = v445[6];
              if (*(_BYTE *)(v458 + 528))
                v459 = v458 + 40;
              else
                v459 = 0;
              if (*(_BYTE *)(v458 + 528))
              {
                v460 = *(_DWORD *)(v458 + 88);
                if (v460 == *((_DWORD *)v374 + 4))
                {
                  v461 = *(_QWORD *)(v458 + 536);
                  v462 = *(_QWORD *)(v458 + 544);
                  v463 = *(_QWORD *)(v458 + 72);
                  v464 = *(_DWORD *)(v458 + 80);
                  if (v462 != v461)
                  {
                    v465 = (v462 - v461) >> 5;
                    while (1)
                    {
                      v466 = v465 >> 1;
                      v467 = v461 + 32 * (v465 >> 1);
                      v468 = *(_DWORD *)(v467 + 16);
                      v469 = v468 >= v460;
                      if (v468 != v460)
                        goto LABEL_656;
                      if (*(_QWORD *)v467 >= v463)
                        break;
LABEL_650:
                      v461 = v467 + 32;
                      v466 = v465 + ~v466;
LABEL_651:
                      v465 = v466;
                      if (!v466)
                        goto LABEL_659;
                    }
                    if (*(_QWORD *)v467 != v463)
                      goto LABEL_651;
                    v469 = *(_DWORD *)(v467 + 8) >= v464;
LABEL_656:
                    if (v469)
                      goto LABEL_651;
                    goto LABEL_650;
                  }
LABEL_659:
                  if (v461 != v462
                    && *(_DWORD *)(v461 + 16) == v460
                    && *(_QWORD *)v461 == v463
                    && *(_DWORD *)(v461 + 8) == v464)
                  {
                    v470 = *(_QWORD *)(v461 + 24);
                    v471 = *(_DWORD *)(v458 + 32);
                    v472 = *(_QWORD *)&oslog[16];
                    if ((unint64_t)v444 >= *(_QWORD *)&oslog[16])
                      goto LABEL_664;
LABEL_674:
                    *(_DWORD *)v444 = v471;
                    v480 = v444 + 24;
                    *((_QWORD *)v444 + 1) = v470;
                    *((_QWORD *)v444 + 2) = v459;
                  }
                  else
                  {
                    v470 = 0;
                    v471 = *(_DWORD *)(v458 + 32);
                    v472 = *(_QWORD *)&oslog[16];
                    if ((unint64_t)v444 < *(_QWORD *)&oslog[16])
                      goto LABEL_674;
LABEL_664:
                    v473 = v374;
                    v474 = *(char **)oslog;
                    v475 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v444[-*(_QWORD *)oslog] >> 3);
                    v476 = v475 + 1;
                    if (v475 + 1 > 0xAAAAAAAAAAAAAAALL)
                      sub_20E867F44();
                    v477 = 0xAAAAAAAAAAAAAAABLL * ((v472 - *(_QWORD *)oslog) >> 3);
                    if (2 * v477 > v476)
                      v476 = 2 * v477;
                    if (v477 >= 0x555555555555555)
                      v478 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v478 = v476;
                    if (v478)
                    {
                      if (v478 > 0xAAAAAAAAAAAAAAALL)
                        sub_20E877A38();
                      v479 = (char *)operator new(24 * v478);
                    }
                    else
                    {
                      v479 = 0;
                    }
                    v481 = &v479[24 * v475];
                    *(_DWORD *)v481 = v471;
                    *((_QWORD *)v481 + 1) = v470;
                    *((_QWORD *)v481 + 2) = v459;
                    v482 = v481;
                    v374 = v473;
                    if (v444 != v474)
                    {
                      do
                      {
                        v483 = *(_OWORD *)(v444 - 24);
                        *((_QWORD *)v482 - 1) = *((_QWORD *)v444 - 1);
                        *(_OWORD *)(v482 - 24) = v483;
                        v482 -= 24;
                        v444 -= 24;
                      }
                      while (v444 != v474);
                      v444 = *(char **)oslog;
                    }
                    v484 = &v479[24 * v478];
                    v480 = v481 + 24;
                    *(_QWORD *)oslog = v482;
                    *(_QWORD *)&oslog[8] = v481 + 24;
                    *(_QWORD *)&oslog[16] = v484;
                    if (v444)
                      operator delete(v444);
                  }
                  *(_QWORD *)&oslog[8] = v480;
                  v444 = v480;
                }
              }
              v485 = (_QWORD *)v445[1];
              if (v485)
              {
                do
                {
                  v486 = v485;
                  v485 = (_QWORD *)*v485;
                }
                while (v485);
              }
              else
              {
                do
                {
                  v486 = (_QWORD *)v445[2];
                  _ZF = *v486 == (_QWORD)v445;
                  v445 = v486;
                }
                while (!_ZF);
              }
              v445 = v486;
              if (v486 == v446)
                goto LABEL_628;
              continue;
            }
          }
          v444 = 0;
          v448 = (_QWORD *)*v442;
          v446 = v442 + 1;
          v445 = v448;
          if (v448 != v446)
            goto LABEL_643;
LABEL_628:
          v449 = (_QWORD *)*((_QWORD *)v1701 + 1);
          v450 = (void *)v449[13];
          if (v450)
          {
            v449[14] = v450;
            operator delete(v450);
            v449[13] = 0;
            v449[14] = 0;
            v449[15] = 0;
            v444 = *(char **)&oslog[8];
          }
          v451 = *(_QWORD *)&oslog[16];
          v449[13] = *(_QWORD *)oslog;
          v449[14] = v444;
          v449[15] = v451;
          memset(oslog, 0, 24);
          sub_20F811E38((uint64_t)(v449 + 2));
          v373 = v1661;
          if (*(_QWORD *)oslog)
          {
            *(_QWORD *)&oslog[8] = *(_QWORD *)oslog;
            operator delete(*(void **)oslog);
          }
          v452 = object[2];
          if (object[2])
          {
            do
            {
              v453 = (_QWORD *)*v452;
              operator delete(v452);
              v452 = v453;
            }
            while (v453);
          }
          v454 = object[0];
          object[0] = 0;
          if (v454)
            operator delete(v454);
          v455 = v1794[8].f64[0];
          if (*(_QWORD *)&v1794[8].f64[0])
          {
            do
            {
              v456 = **(double **)&v455;
              operator delete(*(void **)&v455);
              v455 = v456;
            }
            while (v456 != 0.0);
          }
          v457 = v1794[7].f64[0];
          v1794[7].f64[0] = 0.0;
          if (v457 != 0.0)
            operator delete(*(void **)&v457);
          if (*(_QWORD *)&v1794[5].f64[1])
          {
            v1794[6].f64[0] = v1794[5].f64[1];
            operator delete(*(void **)&v1794[5].f64[1]);
          }
          v374 = (uint64_t *)*v374;
          if (!v374)
            goto LABEL_688;
        }
        v409 = *(char **)(v1708 + 6352);
        v410 = *(_QWORD *)(v1708 + 6360);
        if ((unint64_t)v409 < v410)
        {
          *(_DWORD *)v409 = v381;
          v411 = (uint64_t)(v409 + 4);
LABEL_600:
          *(_QWORD *)(v1708 + 6352) = v411;
          goto LABEL_601;
        }
        v412 = (char *)*v1671;
        v413 = v409 - (_BYTE *)*v1671;
        v414 = v413 >> 2;
        v415 = (v413 >> 2) + 1;
        if (v415 >> 62)
          sub_20E867F44();
        v416 = v410 - (_QWORD)v412;
        if (v416 >> 1 > v415)
          v415 = v416 >> 1;
        if ((unint64_t)v416 >= 0x7FFFFFFFFFFFFFFCLL)
          v417 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v417 = v415;
        if (v417)
        {
          if (v417 >> 62)
            sub_20E877A38();
          v418 = operator new(4 * v417);
          v419 = &v418[4 * v414];
          *v419 = v381;
          v411 = (uint64_t)(v419 + 1);
          v420 = v409 - v412;
          if (v409 == v412)
            goto LABEL_598;
        }
        else
        {
          v418 = 0;
          v419 = (_DWORD *)(4 * v414);
          *(_DWORD *)(4 * v414) = v381;
          v411 = 4 * v414 + 4;
          v420 = v409 - v412;
          if (v409 == v412)
          {
LABEL_598:
            *(_QWORD *)(v1708 + 6344) = v419;
            *(_QWORD *)(v1708 + 6352) = v411;
            *(_QWORD *)(v1708 + 6360) = &v418[4 * v417];
            if (v412)
              operator delete(v412);
            goto LABEL_600;
          }
        }
        v421 = v420 - 4;
        if (v421 < 0x2C)
          goto LABEL_2059;
        if ((unint64_t)(v409 - v418 - v413) < 0x20)
          goto LABEL_2059;
        v422 = (v421 >> 2) + 1;
        v423 = 4 * (v422 & 0x7FFFFFFFFFFFFFF8);
        v424 = &v409[-v423];
        v419 = (_DWORD *)((char *)v419 - v423);
        v425 = &v418[4 * v414 - 16];
        v426 = v409 - 16;
        v427 = v422 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v428 = *(_OWORD *)v426;
          *(v425 - 1) = *((_OWORD *)v426 - 1);
          *v425 = v428;
          v425 -= 2;
          v426 -= 32;
          v427 -= 8;
        }
        while (v427);
        v409 = v424;
        if (v422 != (v422 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_2059:
          do
          {
            v429 = *((_DWORD *)v409 - 1);
            v409 -= 4;
            *--v419 = v429;
          }
          while (v409 != v412);
        }
        goto LABEL_598;
      }
    }
    else
    {
      memset(object, 0, 32);
      if (sub_20F5B8114((_QWORD *)(v192 + 4832), (int *)object, oslog, 1))
      {
        *(_QWORD *)(v192 + 6400) = *(_QWORD *)(v192 + 6392);
        *(_QWORD *)(v192 + 6424) = *(_QWORD *)(v192 + 6416);
        *(_QWORD *)(v192 + 6448) = *(_QWORD *)(v192 + 6440);
        *(_QWORD *)(v192 + 6472) = *(_QWORD *)(v192 + 6464);
        *(_QWORD *)(v192 + 6496) = *(_QWORD *)(v192 + 6488);
        *(_QWORD *)(v192 + 6520) = *(_QWORD *)(v192 + 6512);
        *(_QWORD *)(v192 + 6544) = *(_QWORD *)(v192 + 6536);
        *(_QWORD *)(v192 + 6568) = *(_QWORD *)(v192 + 6560);
        v626 = *(_QWORD *)(v192 + 5608);
        v627 = *(_QWORD *)(v192 + 5616);
        while (v626 != v627)
        {
          v628 = *(_QWORD *)(v626 + 208);
          if (*(_BYTE *)(v626 + 496)
            || (*(_BYTE *)(v628 + 4) & 6) != 0
            || (*(_BYTE *)(*(_QWORD *)(v626 + 216) + 4) & 6) != 0)
          {
            sub_20F394A20(v192 + 6392, v628);
            sub_20F3D35E0((_QWORD *)(v192 + 6392), *(_QWORD *)(v626 + 216));
          }
          v626 += 504;
        }
        v629 = *(_QWORD *)(v192 + 5632);
        v630 = *(_QWORD *)(v192 + 5640);
        while (v629 != v630)
        {
          v631 = *(_QWORD *)(v629 + 136);
          if (*(_BYTE *)(v629 + 272) || (*(_BYTE *)(v631 + 4) & 6) != 0)
            sub_20F394A20(v192 + 6392, v631);
          v629 += 280;
        }
        v632 = (uint64_t *)v192;
        sub_20F5B8680(*(_QWORD *)(v192 + 5656), *(_QWORD *)(v192 + 5664), (_QWORD *)(v192 + 6392));
        sub_20F5B85BC(v632[710], v632[711], (_QWORD *)(v192 + 6392));
        sub_20F5B8444(v632[713], v632[714], (_QWORD *)(v192 + 6392));
        v633 = *(_QWORD *)(v192 + 5728);
        v634 = *(_QWORD *)(v192 + 5736);
        while (v633 != v634)
        {
          v635 = *(_QWORD *)(v633 + 736);
          if (*(_BYTE *)(v633 + 880)
            || (*(_BYTE *)(v635 + 4) & 6) != 0
            || (*(_BYTE *)(*(_QWORD *)(v633 + 744) + 4) & 6) != 0)
          {
            sub_20F394A20(v192 + 6392, v635);
            sub_20F394A20(v192 + 6392, *(_QWORD *)(v633 + 744));
          }
          v633 += 888;
        }
        v636 = (*(_QWORD *)(v192 + 6544) - *(_QWORD *)(v192 + 6536)) >> 2;
        if (LODWORD(object[3]) > v636)
          LODWORD(v636) = object[3];
        _CF = *(_DWORD *)&oslog[24] >= v636;
        v637 = *(_DWORD *)&oslog[24] - v636;
        if (_CF)
          v638 = v637;
        else
          v638 = 0;
        sub_20F59A618((_QWORD *)(v192 + 4832));
        if (!v638)
          goto LABEL_539;
      }
      else if (!*(_DWORD *)&oslog[24])
      {
        goto LABEL_539;
      }
    }
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 271, (uint64_t)"!this->linear_system_.graph().template numberOfVariable<VARIABLE_TYPE>()", 72, (uint64_t)"CameraCalibVariables of this type have already been added.", 58, (void (*)(void **))sub_21023DDB0))goto LABEL_539;
LABEL_2016:
    abort();
  }
  v373 = v1661;
  if (!v1789)
    goto LABEL_726;
LABEL_689:
  v487 = *(_QWORD **)(v1708 + 16);
  if (v487)
  {
    v490 = (_QWORD *)*v487;
    v489 = v487 + 1;
    v488 = v490;
    if (v490 != v489)
    {
      while (1)
      {
        v491 = v488[6];
        if (*(_BYTE *)(v491 + 528))
          break;
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 769, (uint64_t)"track->getStructure()", 21, (uint64_t)"The track does not have the structure", 37, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_2016;
        }
        v491 = v488[6];
        v492 = *(_DWORD *)(v491 + 32);
        v493 = *(char **)(v1708 + 5512);
        v494 = *(char **)(v1708 + 5520);
        v495 = v494 - v493;
        if (v494 != v493)
          goto LABEL_698;
LABEL_703:
        if (v493 == v494 || *(_DWORD *)v493 != v492)
        {
          v501 = v491 + 40;
          v502 = *(unsigned __int8 *)(v491 + 528);
          v503 = *(_BYTE *)(v491 + 528) ? (void *)(v491 + 40) : 0;
          LODWORD(object[0]) = v492;
          BYTE4(object[0]) = 1;
          object[1] = v503;
          if (v502)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v501 + 24))(v491 + 40))
            {
              _Q1 = *(_OWORD *)(v491 + 104);
              _D3 = *(_QWORD *)(v491 + 112);
              __asm { FMLA            D2, D3, V1.D[1] }
              if (fabs(sqrt(_D2 + *(double *)(v491 + 120) * *(double *)(v491 + 120)) + -1.0) > 0.000001)
              {
                v509 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
LABEL_713:
                if (v509)
                  goto LABEL_2016;
              }
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v501 + 24))(v491 + 40))
              {
                v510 = *(uint64_t **)(v491 + 136);
                v511 = *v510;
                v512 = (double *)v510[2];
                v513 = v510[4];
                v514 = (double *)v510[6];
                _D1 = *(double *)(v491 + 56) - v512[1];
                v516 = *(double *)(v491 + 64) - v512[2];
                _Q3.f64[0] = *(float64_t *)(v511 + 16);
                _Q7 = *(_OWORD *)(v511 + 48);
                _Q3.f64[1] = *(float64_t *)(v511 + 40);
                v519 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v511, *(int64x2_t *)(v511 + 24)), *(double *)(v491 + 48) - *v512), (float64x2_t)vzip2q_s64(*(int64x2_t *)v511, *(int64x2_t *)(v511 + 24)), _D1), _Q3, v516);
                __asm { FMLA            D2, D1, V7.D[1] }
                v521 = _D2 + *(double *)(v511 + 64) * v516;
                v522 = v519.f64[0] - *v514;
                _D2 = v519.f64[1] - v514[1];
                v524 = v521 - v514[2];
                _Q3.f64[0] = *(float64_t *)(v513 + 16);
                _Q4 = *(int64x2_t *)v513;
                _Q6 = *(int64x2_t *)(v513 + 24);
                _Q16 = *(_OWORD *)(v513 + 48);
                __asm { FMLA            D19, D2, V4.D[1] }
                _Q3.f64[1] = *(float64_t *)(v513 + 40);
                _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v513, _Q6), v522), (float64x2_t)vzip2q_s64(*(int64x2_t *)v513, _Q6), _D2), _Q3, v524);
                __asm
                {
                  FMLA            D3, D2, V16.D[1]
                  FMLA            D1, D2, V6.D[1]
                }
                _D1 = _D1 + v524 * _Q3.f64[1];
                __asm { FMLA            D2, D1, V17.D[1] }
                object[2] = COERCE_VOID_(sqrt(_D2+ (_Q3.f64[0] + v524 * *(double *)(v513 + 64))* (_Q3.f64[0] + *(double *)(v513 + 64) * v524)));
                _Q1 = *(_OWORD *)(v491 + 104);
                _Q3.f64[0] = *(float64_t *)(v491 + 112);
                __asm { FMLA            D2, D3, V1.D[1] }
                if (fabs(sqrt(_D2 + *(double *)(v491 + 120) * *(double *)(v491 + 120)) + -1.0) > 0.000001
                  && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_2016;
                }
                if (sub_20F61AC24(v1708 + 4832, (unsigned int *)object))
                {
                  *(_BYTE *)(v1708 + 6588) = 0;
                  *(_DWORD *)(v1708 + 6584) = 0;
                }
              }
              goto LABEL_719;
            }
            v509 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 44, (uint64_t)"initializeImpl()", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            goto LABEL_713;
          }
        }
LABEL_719:
        v535 = (_QWORD *)v488[1];
        if (v535)
        {
          do
          {
            v536 = v535;
            v535 = (_QWORD *)*v535;
          }
          while (v535);
        }
        else
        {
          do
          {
            v536 = (_QWORD *)v488[2];
            _ZF = *v536 == (_QWORD)v488;
            v488 = v536;
          }
          while (!_ZF);
        }
        v488 = v536;
        if (v536 == v489)
        {
          v373 = v1661;
          goto LABEL_726;
        }
      }
      v492 = *(_DWORD *)(v491 + 32);
      v493 = *(char **)(v1708 + 5512);
      v494 = *(char **)(v1708 + 5520);
      v495 = v494 - v493;
      if (v494 == v493)
        goto LABEL_703;
LABEL_698:
      v496 = v495 >> 4;
      do
      {
        v497 = v496 >> 1;
        v498 = &v493[16 * (v496 >> 1)];
        v500 = *(_DWORD *)v498;
        v499 = v498 + 16;
        v496 += ~(v496 >> 1);
        if (v500 < v492)
          v493 = v499;
        else
          v496 = v497;
      }
      while (v496);
      goto LABEL_703;
    }
  }
LABEL_726:
  memset(object, 0, 24);
  sub_20F4A05D4();
  if (object[0])
    operator delete(object[0]);
  if (!(*v373)[2].__shared_weak_owners_)
    goto LABEL_933;
  v537 = v1791;
  v538 = (*v373)[2].__vftable;
  v539 = (int64x2_t *)v1721;
  v540 = v538[1].~__shared_weak_count_0;
  v1687 = *((double *)v540 + 8);
  v1699 = *((int8x16_t *)v540 + 2);
  v1702 = *((int8x16_t *)v540 + 3);
  v1693 = *(int8x16_t *)v540;
  *(_OWORD *)__dst = *((_OWORD *)v540 + 1);
  __sbb = *((double *)v540 + 11);
  v1709 = *(int8x16_t *)((char *)v540 + 72);
  v543 = (char *)operator new(0x58uLL);
  v544 = dbl_2103B48F0[v537 == 0];
  *((_QWORD *)v543 + 1) = 0;
  v545 = (unint64_t *)(v543 + 8);
  *((_QWORD *)v543 + 2) = 0;
  *(_QWORD *)v543 = &off_24CA016C8;
  *((_QWORD *)v543 + 3) = &off_24CA01718;
  v546 = v543 + 24;
  v547 = sqrt(v544);
  *((double *)v543 + 5) = v547;
  *((double *)v543 + 6) = v547;
  v548 = vdupq_n_s64(0x40F86A0000000000uLL);
  *(int64x2_t *)(v543 + 56) = v548;
  *(int64x2_t *)(v543 + 72) = v548;
  v543[32] = 1;
  v1715 = (std::__shared_weak_count *)v543;
  v549 = v539->i64[1];
  if (!*(_QWORD *)(v549 + 64))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 968, (uint64_t)"!this->viobadata_ref_.state_set->empty()", 40, (uint64_t)"First VIOState must exist to add the prior.", 43, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v549 = v539->i64[1];
  }
  v550 = v539 + 363;
  v551 = vextq_s8(v1702, v1702, 8uLL).u64[0];
  v552 = vextq_s8(v1699, v1699, 8uLL).u64[0];
  v553 = vextq_s8(*(int8x16_t *)__dst, *(int8x16_t *)__dst, 8uLL).u64[0];
  v554 = vextq_s8(v1693, v1693, 8uLL).u64[0];
  v555 = vextq_s8(v1709, v1709, 8uLL).u64[0];
  v556 = *(_QWORD *)(v549 + 48);
  v557 = (char *)v539[352].i64[1];
  v558 = (char *)v539[352].i64[0];
  if (v557 == v558)
    v559 = 0.0;
  else
    *(_QWORD *)&v559 = (*((_DWORD *)v557 - 68) + 1);
  v560 = *(_DWORD *)(v556 + 40);
  *(_QWORD *)&v561.f64[0] = v1693.i64[0];
  *(void **)&v562.f64[0] = __dst[0];
  *(_QWORD *)&v561.f64[1] = v554;
  v1794[0].f64[0] = v559;
  *(_QWORD *)&v562.f64[1] = v553;
  v1794[1] = v561;
  v1794[2] = v562;
  *(_QWORD *)&v561.f64[0] = v1699.i64[0];
  *(_QWORD *)&v562.f64[0] = v1702.i64[0];
  *(_QWORD *)&v561.f64[1] = v552;
  *(_QWORD *)&v562.f64[1] = v551;
  v1794[3] = v561;
  v1794[4] = v562;
  *(_QWORD *)&v561.f64[0] = v1709.i64[0];
  *(_QWORD *)&v561.f64[1] = v555;
  v1794[5].f64[0] = v1687;
  v1794[6].f64[1] = __sbb;
  *(float64x2_t *)((char *)&v1794[5] + 8) = v561;
  *(_QWORD *)&v1794[7].f64[0] = v543 + 24;
  *(_QWORD *)&v1794[7].f64[1] = v543;
  do
    v563 = __ldxr(v545);
  while (__stxr(v563 + 1, v545));
  v1728 = 0uLL;
  v564 = v557;
  v1829 = 0uLL;
  v565 = v557 - v558;
  if (v557 != v558)
  {
    v564 = v557;
    if (*((_QWORD *)v557 - 35) >= *(_QWORD *)&v559)
    {
      v566 = 0xAF8AF8AF8AF8AF8BLL * (v565 >> 3);
      v567 = v558;
      do
      {
        v568 = v566 >> 1;
        v569 = &v567[280 * (v566 >> 1)];
        v570 = *(_QWORD *)v569;
        v571 = v569 + 280;
        v566 += ~(v566 >> 1);
        if (v570 < *(_QWORD *)&v559)
          v567 = v571;
        else
          v566 = v568;
      }
      while (v566);
      v564 = v557;
      if (v567 != v557)
      {
        v564 = v567;
        if (*(_QWORD *)v567 == *(_QWORD *)&v559)
          goto LABEL_827;
      }
    }
  }
  *(_QWORD *)&v572 = v1693.i64[0];
  *((_QWORD *)&v572 + 1) = v554;
  *(float64x2_t *)oslog = v1794[0];
  *(_OWORD *)&oslog[16] = v572;
  *(void **)&v573 = __dst[0];
  *((_QWORD *)&v573 + 1) = v553;
  *(_QWORD *)&v574 = v1699.i64[0];
  *((_QWORD *)&v574 + 1) = v552;
  *(_OWORD *)&oslog[32] = v573;
  *(_OWORD *)&oslog[48] = v574;
  *(_QWORD *)&v575 = v1702.i64[0];
  *((_QWORD *)&v575 + 1) = v551;
  *(_OWORD *)&oslog[64] = v575;
  *(float64_t *)&oslog[80] = v1687;
  *(float64_t *)&oslog[104] = __sbb;
  *(_QWORD *)&v576 = v1709.i64[0];
  *((_QWORD *)&v576 + 1) = v555;
  *(_OWORD *)&oslog[88] = v576;
  *(_QWORD *)&oslog[112] = v543 + 24;
  *(_QWORD *)&oslog[120] = v543;
  v1794[7] = 0uLL;
  memset(&oslog[248], 0, 17);
  *(_QWORD *)&oslog[128] = 0;
  *(_QWORD *)&oslog[232] = 0xBFF0000000000000;
  oslog[240] = 0;
  v577 = (void **)v539[302].i64[1];
  v578 = v539[303].i64[0];
  if ((void **)v578 != v577)
  {
    v579 = (v578 - (uint64_t)v577) >> 4;
    do
    {
      v580 = v579 >> 1;
      v581 = &v577[2 * (v579 >> 1)];
      v583 = *(_DWORD *)v581;
      v582 = v581 + 2;
      v541 = (void **)v583;
      v542 = ~(v579 >> 1);
      v579 += v542;
      if (v583 < v560)
        v577 = v582;
      else
        v579 = v580;
    }
    while (v579);
    if (v577 != (void **)v578 && *(_DWORD *)v577 == v560)
    {
      *(_QWORD *)&oslog[128] = v577[1];
      v584 = *(_QWORD *)&oslog[128];
      ++*((_DWORD *)v577[1] + 2);
      if (*(_BYTE *)(v584 + 20))
      {
        *(_OWORD *)&object[1] = *(_OWORD *)oslog;
        *(_OWORD *)&object[5] = *(_OWORD *)&oslog[32];
        *(_OWORD *)&object[7] = *(_OWORD *)&oslog[48];
        *(_OWORD *)&object[9] = *(_OWORD *)&oslog[64];
        object[0] = *(void **)&v559;
        object[11] = *(void **)&oslog[80];
        *(_OWORD *)&object[3] = *(_OWORD *)&oslog[16];
        *(_OWORD *)&object[12] = *(_OWORD *)&oslog[88];
        object[14] = *(void **)&oslog[104];
        object[15] = v543 + 24;
        *(_QWORD *)&oslog[112] = 0;
        *(_QWORD *)&oslog[120] = 0;
        object[16] = v543;
        object[17] = (void *)v584;
        *(_OWORD *)&object[18] = *(_OWORD *)&oslog[136];
        *(_OWORD *)&object[20] = *(_OWORD *)&oslog[152];
        *(_OWORD *)&object[22] = *(_OWORD *)&oslog[168];
        *(_OWORD *)&object[24] = *(_OWORD *)&oslog[184];
        *(_OWORD *)&object[26] = *(_OWORD *)&oslog[200];
        *(_OWORD *)&object[28] = *(_OWORD *)&oslog[216];
        LOBYTE(object[31]) = oslog[240];
        object[30] = *(void **)&oslog[232];
        memset(&object[32], 0, 17);
        *(_QWORD *)&oslog[248] = 0;
        *(_QWORD *)&oslog[256] = 0;
        if (v557 == v564 || *(_QWORD *)v564 != *(_QWORD *)&v559)
        {
          __dsta = v584;
          v541 = &object[3];
          v582 = &object[12];
          v1703 = v558;
          v585 = v564 - v558;
          v1710 = 0xAF8AF8AF8AF8AF8BLL * ((v564 - v558) >> 3);
          v586 = v539[353].u64[0];
          if ((unint64_t)v557 >= v586)
          {
            v1263 = 1 - 0x5075075075075075 * (v565 >> 3);
            if (v1263 > 0xEA0EA0EA0EA0EALL)
              sub_20E867F44();
            v1264 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v586 - (_QWORD)v558) >> 3);
            if (2 * v1264 > v1263)
              v1263 = 2 * v1264;
            if (v1264 >= 0x75075075075075)
              v1265 = 0xEA0EA0EA0EA0EALL;
            else
              v1265 = v1263;
            v1843[4] = &v539[353];
            if (v1265)
            {
              if (v1265 > 0xEA0EA0EA0EA0EALL)
                sub_20E877A38();
              v1266 = (char *)operator new(280 * v1265);
            }
            else
            {
              v1266 = 0;
            }
            v1291 = &v1266[280 * v1710];
            v1843[0] = v1266;
            v1843[1] = v1291;
            v1843[2] = v1291;
            v1843[3] = &v1266[280 * v1265];
            if (v1710 == v1265)
            {
              if (v585 < 1)
              {
                if (v1703 == v564)
                  v1296 = 1;
                else
                  v1296 = 2 * v1710;
                if (v1296 > 0xEA0EA0EA0EA0EALL)
                  sub_20E877A38();
                v1297 = (char *)operator new(280 * v1296);
                v1291 = &v1297[280 * (v1296 >> 2)];
                v1843[0] = v1297;
                v1843[1] = v1291;
                v1843[3] = &v1297[280 * v1296];
                if (v1266)
                  operator delete(v1266);
                v1294 = (uint64_t)v1291;
              }
              else
              {
                v1292 = v1710 + 2;
                if (v1710 >= -1)
                  v1292 = v1710 + 1;
                v1293 = v1292 >> 1;
                v1294 = sub_20F5B6660((uint64_t)v1291, (uint64_t)v1291, (uint64_t)&v1291[-280 * (v1292 >> 1)]);
                v1291 = (char *)v1843[1] - 280 * v1293;
                v1843[1] = v1291;
                v559 = *(double *)object;
              }
            }
            else
            {
              v1294 = (uint64_t)&v1266[280 * v1710];
            }
            *(float64_t *)v1294 = v559;
            *(_OWORD *)(v1294 + 8) = *(_OWORD *)&object[1];
            v1298 = *(_OWORD *)&object[3];
            *(_OWORD *)(v1294 + 40) = *(_OWORD *)&object[5];
            v1299 = *(_OWORD *)&object[9];
            *(_OWORD *)(v1294 + 56) = *(_OWORD *)&object[7];
            *(_OWORD *)(v1294 + 72) = v1299;
            *(void **)(v1294 + 88) = object[11];
            *(_OWORD *)(v1294 + 24) = v1298;
            *(void **)(v1294 + 112) = object[14];
            *(_OWORD *)(v1294 + 96) = *(_OWORD *)&object[12];
            *(_OWORD *)(v1294 + 120) = *(_OWORD *)&object[15];
            object[15] = 0;
            object[16] = 0;
            *(void **)(v1294 + 136) = object[17];
            v1300 = *(_OWORD *)&object[18];
            v1301 = *(_OWORD *)&object[22];
            *(_OWORD *)(v1294 + 160) = *(_OWORD *)&object[20];
            *(_OWORD *)(v1294 + 176) = v1301;
            *(_OWORD *)(v1294 + 144) = v1300;
            v1302 = *(_OWORD *)&object[24];
            v1303 = *(_OWORD *)&object[28];
            *(_OWORD *)(v1294 + 208) = *(_OWORD *)&object[26];
            *(_OWORD *)(v1294 + 224) = v1303;
            *(_OWORD *)(v1294 + 192) = v1302;
            v1304 = object[30];
            *(_BYTE *)(v1294 + 248) = object[31];
            *(_QWORD *)(v1294 + 240) = v1304;
            *(_OWORD *)(v1294 + 256) = *(_OWORD *)&object[32];
            object[32] = 0;
            object[33] = 0;
            *(_BYTE *)(v1294 + 272) = object[34];
            v1305 = (char *)(v1294 + 280);
            v1843[2] = (void *)(v1294 + 280);
            v1306 = (char *)v539[352].i64[0];
            if (v1306 == v564)
            {
              v550 = v539 + 363;
            }
            else
            {
              v1307 = 0;
              v550 = v539 + 363;
              do
              {
                v1308 = &v1291[v1307];
                v1309 = &v564[v1307];
                *(_QWORD *)&v1291[v1307 - 280] = *(_QWORD *)&v564[v1307 - 280];
                *(_OWORD *)&v1291[v1307 - 272] = *(_OWORD *)&v564[v1307 - 272];
                v1311 = *(_OWORD *)&v564[v1307 - 224];
                v1310 = *(_OWORD *)&v564[v1307 - 208];
                v1312 = *(_OWORD *)&v564[v1307 - 240];
                *((_QWORD *)v1308 - 24) = *(_QWORD *)&v564[v1307 - 192];
                *((_OWORD *)v1308 - 14) = v1311;
                *((_OWORD *)v1308 - 13) = v1310;
                *((_OWORD *)v1308 - 15) = v1312;
                *((_OWORD *)v1308 - 16) = *(_OWORD *)&v564[v1307 - 256];
                v1313 = *(_OWORD *)&v564[v1307 - 184];
                *((_QWORD *)v1308 - 21) = *(_QWORD *)&v564[v1307 - 168];
                *(_OWORD *)(v1308 - 184) = v1313;
                *((_OWORD *)v1308 - 10) = *(_OWORD *)&v564[v1307 - 160];
                *((_QWORD *)v1309 - 20) = 0;
                *((_QWORD *)v1309 - 19) = 0;
                *((_QWORD *)v1308 - 18) = *(_QWORD *)&v564[v1307 - 144];
                v1314 = *(_OWORD *)&v564[v1307 - 136];
                v1315 = *(_OWORD *)&v564[v1307 - 120];
                *(_OWORD *)(v1308 - 104) = *(_OWORD *)&v564[v1307 - 104];
                *(_OWORD *)(v1308 - 120) = v1315;
                *(_OWORD *)(v1308 - 136) = v1314;
                v1316 = *(_OWORD *)&v564[v1307 - 88];
                v1317 = *(_OWORD *)&v564[v1307 - 72];
                *(_OWORD *)(v1308 - 56) = *(_OWORD *)&v564[v1307 - 56];
                *(_OWORD *)(v1308 - 72) = v1317;
                *(_OWORD *)(v1308 - 88) = v1316;
                v1318 = *(_QWORD *)&v564[v1307 - 40];
                *(v1308 - 32) = v564[v1307 - 32];
                *((_QWORD *)v1308 - 5) = v1318;
                *(_OWORD *)(v1308 - 24) = *(_OWORD *)&v564[v1307 - 24];
                *((_QWORD *)v1309 - 3) = 0;
                *((_QWORD *)v1309 - 2) = 0;
                *(v1308 - 8) = v564[v1307 - 8];
                v1307 -= 280;
              }
              while (&v564[v1307] != v1306);
              v1305 = (char *)v1843[2];
              v1291 += v1307;
            }
            v1843[1] = v1291;
            v1319 = (char *)v539[352].i64[1];
            if (v1319 != v564)
            {
              do
              {
                *(_QWORD *)v1305 = *(_QWORD *)v564;
                *(_OWORD *)(v1305 + 8) = *(_OWORD *)(v564 + 8);
                v1320 = *(_OWORD *)(v564 + 56);
                v1321 = *(_OWORD *)(v564 + 72);
                v1322 = *((_QWORD *)v564 + 11);
                *(_OWORD *)(v1305 + 40) = *(_OWORD *)(v564 + 40);
                *((_QWORD *)v1305 + 11) = v1322;
                *(_OWORD *)(v1305 + 72) = v1321;
                *(_OWORD *)(v1305 + 56) = v1320;
                *(_OWORD *)(v1305 + 24) = *(_OWORD *)(v564 + 24);
                v1323 = *((_OWORD *)v564 + 6);
                *((_QWORD *)v1305 + 14) = *((_QWORD *)v564 + 14);
                *((_OWORD *)v1305 + 6) = v1323;
                *(_OWORD *)(v1305 + 120) = *(_OWORD *)(v564 + 120);
                *((_QWORD *)v564 + 15) = 0;
                *((_QWORD *)v564 + 16) = 0;
                *((_QWORD *)v1305 + 17) = *((_QWORD *)v564 + 17);
                v1324 = *((_OWORD *)v564 + 9);
                v1325 = *((_OWORD *)v564 + 11);
                *((_OWORD *)v1305 + 10) = *((_OWORD *)v564 + 10);
                *((_OWORD *)v1305 + 11) = v1325;
                *((_OWORD *)v1305 + 9) = v1324;
                v1326 = *((_OWORD *)v564 + 12);
                v1327 = *((_OWORD *)v564 + 14);
                *((_OWORD *)v1305 + 13) = *((_OWORD *)v564 + 13);
                *((_OWORD *)v1305 + 14) = v1327;
                *((_OWORD *)v1305 + 12) = v1326;
                v1328 = *((_QWORD *)v564 + 30);
                v1305[248] = v564[248];
                *((_QWORD *)v1305 + 30) = v1328;
                *((_OWORD *)v1305 + 16) = *((_OWORD *)v564 + 16);
                *((_QWORD *)v564 + 32) = 0;
                *((_QWORD *)v564 + 33) = 0;
                v1305[272] = v564[272];
                v1305 += 280;
                v564 += 280;
              }
              while (v564 != v1319);
              v1291 = (char *)v1843[1];
              v564 = (char *)v539[352].i64[1];
            }
            v1329 = (char *)v539[352].i64[0];
            v539[352].i64[0] = (uint64_t)v1291;
            v539[352].i64[1] = (uint64_t)v1305;
            v1330 = (void *)v539[353].i64[0];
            v539[353].i64[0] = (uint64_t)v1843[3];
            v1843[3] = v1330;
            v1843[1] = v1329;
            v1843[0] = v1329;
            if (v564 != v1329)
            {
              do
              {
                v1843[2] = v564 - 280;
                v1331 = (std::__shared_weak_count *)*((_QWORD *)v564 - 2);
                if (v1331)
                {
                  v1332 = (unint64_t *)&v1331->__shared_owners_;
                  do
                    v1333 = __ldaxr(v1332);
                  while (__stlxr(v1333 - 1, v1332));
                  if (!v1333)
                  {
                    ((void (*)(std::__shared_weak_count *))v1331->__on_zero_shared)(v1331);
                    std::__shared_weak_count::__release_weak(v1331);
                  }
                }
                v1334 = (std::__shared_weak_count *)*((_QWORD *)v564 - 19);
                if (v1334)
                {
                  v1335 = (unint64_t *)&v1334->__shared_owners_;
                  do
                    v1336 = __ldaxr(v1335);
                  while (__stlxr(v1336 - 1, v1335));
                  if (!v1336)
                  {
                    ((void (*)(std::__shared_weak_count *))v1334->__on_zero_shared)(v1334);
                    std::__shared_weak_count::__release_weak(v1334);
                  }
                }
                v564 = (char *)v1843[2];
              }
              while (v1843[2] != v1329);
              v564 = (char *)v1843[0];
            }
            if (v564)
              operator delete(v564);
          }
          else if (v564 == v557)
          {
            *(float64_t *)v557 = v559;
            v1281 = &v558[8 * ((v564 - v558) >> 3)];
            *(_OWORD *)(v1281 + 8) = *(_OWORD *)&object[1];
            v1283 = *(_OWORD *)&object[7];
            v1282 = *(_OWORD *)&object[9];
            v1284 = object[11];
            *(_OWORD *)(v1281 + 40) = *(_OWORD *)&object[5];
            *((_QWORD *)v1281 + 11) = v1284;
            *(_OWORD *)(v1281 + 72) = v1282;
            *(_OWORD *)(v1281 + 56) = v1283;
            *(_OWORD *)(v1281 + 24) = *(_OWORD *)&object[3];
            v1285 = object[14];
            *((_OWORD *)v1281 + 6) = *(_OWORD *)&object[12];
            *((_QWORD *)v1281 + 14) = v1285;
            *((_QWORD *)v1281 + 15) = v546;
            *((_QWORD *)v1281 + 16) = v543;
            object[15] = 0;
            object[16] = 0;
            *((_QWORD *)v1281 + 17) = v584;
            v1286 = *(_OWORD *)&object[18];
            v1287 = *(_OWORD *)&object[22];
            *((_OWORD *)v1281 + 10) = *(_OWORD *)&object[20];
            *((_OWORD *)v1281 + 11) = v1287;
            *((_OWORD *)v1281 + 9) = v1286;
            v1288 = *(_OWORD *)&object[24];
            v1289 = *(_OWORD *)&object[28];
            *((_OWORD *)v1281 + 13) = *(_OWORD *)&object[26];
            *((_OWORD *)v1281 + 14) = v1289;
            *((_OWORD *)v1281 + 12) = v1288;
            v1290 = object[30];
            v1281[248] = (char)object[31];
            *((_QWORD *)v1281 + 30) = v1290;
            *((_QWORD *)v1281 + 32) = 0;
            *((_QWORD *)v1281 + 33) = 0;
            object[32] = 0;
            object[33] = 0;
            v1281[272] = 0;
            v539[352].i64[1] = (uint64_t)(v557 + 280);
            v550 = v539 + 363;
          }
          else
          {
            v1832 = *(_OWORD *)oslog;
            *(_OWORD *)&v1843[2] = *(_OWORD *)&oslog[32];
            *(_OWORD *)&v1843[4] = *(_OWORD *)&oslog[48];
            *(_OWORD *)&v1843[6] = *(_OWORD *)&oslog[64];
            v1843[8] = *(void **)&oslog[80];
            *(_OWORD *)v1843 = *(_OWORD *)&oslog[16];
            *(_QWORD *)&v1799 = *(_QWORD *)&oslog[104];
            v1798 = *(_OWORD *)&oslog[88];
            object[15] = 0;
            object[16] = 0;
            v1806[1] = *(_OWORD *)&oslog[152];
            v1806[2] = *(_OWORD *)&oslog[168];
            v1806[0] = *(_OWORD *)&oslog[136];
            v1836 = *(_OWORD *)&oslog[200];
            v1837 = *(__n128 *)&oslog[216];
            v1835 = *(_OWORD *)&oslog[184];
            LOBYTE(v1725) = oslog[240];
            v1724 = *(_QWORD *)&oslog[232];
            v587 = v557 - 280;
            v588 = v557;
            object[32] = 0;
            object[33] = 0;
            if ((unint64_t)v557 >= 0x118)
            {
              v589 = v557 - 280;
              v588 = v557;
              do
              {
                *(_QWORD *)v588 = *(_QWORD *)v589;
                *(_OWORD *)(v588 + 8) = *(_OWORD *)(v589 + 8);
                v590 = *(_OWORD *)(v589 + 56);
                v591 = *(_OWORD *)(v589 + 72);
                v592 = *((_QWORD *)v589 + 11);
                *(_OWORD *)(v588 + 40) = *(_OWORD *)(v589 + 40);
                *((_QWORD *)v588 + 11) = v592;
                *(_OWORD *)(v588 + 72) = v591;
                *(_OWORD *)(v588 + 56) = v590;
                *(_OWORD *)(v588 + 24) = *(_OWORD *)(v589 + 24);
                v593 = *((_OWORD *)v589 + 6);
                *((_QWORD *)v588 + 14) = *((_QWORD *)v589 + 14);
                *((_OWORD *)v588 + 6) = v593;
                *(_OWORD *)(v588 + 120) = *(_OWORD *)(v589 + 120);
                *((_QWORD *)v589 + 15) = 0;
                *((_QWORD *)v589 + 16) = 0;
                *((_QWORD *)v588 + 17) = *((_QWORD *)v589 + 17);
                v594 = *((_OWORD *)v589 + 9);
                v595 = *((_OWORD *)v589 + 11);
                *((_OWORD *)v588 + 10) = *((_OWORD *)v589 + 10);
                *((_OWORD *)v588 + 11) = v595;
                *((_OWORD *)v588 + 9) = v594;
                v596 = *((_OWORD *)v589 + 12);
                v597 = *((_OWORD *)v589 + 14);
                *((_OWORD *)v588 + 13) = *((_OWORD *)v589 + 13);
                *((_OWORD *)v588 + 14) = v597;
                *((_OWORD *)v588 + 12) = v596;
                v598 = *((_QWORD *)v589 + 30);
                v588[248] = v589[248];
                *((_QWORD *)v588 + 30) = v598;
                *((_OWORD *)v588 + 16) = *((_OWORD *)v589 + 16);
                *((_QWORD *)v589 + 32) = 0;
                *((_QWORD *)v589 + 33) = 0;
                v588[272] = v589[272];
                v588 += 280;
                v589 += 280;
              }
              while (v589 < v557);
            }
            v1694 = v538;
            v539[352].i64[1] = (uint64_t)v588;
            if (v557 != v564 + 280)
            {
              do
              {
                v607 = v587 - 280;
                v608 = v557 - 280;
                *(_QWORD *)v608 = *((_QWORD *)v587 - 35);
                *(_OWORD *)(v608 + 8) = *((_OWORD *)v587 - 17);
                v610 = *((_OWORD *)v587 - 14);
                v609 = *((_OWORD *)v587 - 13);
                v611 = *((_OWORD *)v587 - 15);
                *((_QWORD *)v557 - 24) = *((_QWORD *)v587 - 24);
                *((_OWORD *)v557 - 14) = v610;
                *((_OWORD *)v557 - 13) = v609;
                *((_OWORD *)v557 - 15) = v611;
                *((_OWORD *)v557 - 16) = *((_OWORD *)v587 - 16);
                v612 = *(_OWORD *)(v587 - 184);
                *((_QWORD *)v557 - 21) = *((_QWORD *)v587 - 21);
                *(_OWORD *)(v557 - 184) = v612;
                v613 = *((_OWORD *)v587 - 10);
                *((_QWORD *)v587 - 20) = 0;
                *((_QWORD *)v587 - 19) = 0;
                v614 = (std::__shared_weak_count *)*((_QWORD *)v557 - 19);
                *((_OWORD *)v557 - 10) = v613;
                if (v614)
                {
                  v615 = (unint64_t *)&v614->__shared_owners_;
                  do
                    v616 = __ldaxr(v615);
                  while (__stlxr(v616 - 1, v615));
                  if (!v616)
                  {
                    ((void (*)(std::__shared_weak_count *, void **, void **))v614->__on_zero_shared)(v614, v582, v541);
                    std::__shared_weak_count::__release_weak(v614);
                  }
                }
                *((_QWORD *)v557 - 18) = *((_QWORD *)v587 - 18);
                v617 = *(_OWORD *)(v587 - 136);
                v618 = *(_OWORD *)(v587 - 120);
                *(_OWORD *)(v557 - 104) = *(_OWORD *)(v587 - 104);
                *(_OWORD *)(v557 - 120) = v618;
                *(_OWORD *)(v557 - 136) = v617;
                v619 = *(_OWORD *)(v587 - 88);
                v620 = *(_OWORD *)(v587 - 72);
                *(_OWORD *)(v557 - 56) = *(_OWORD *)(v587 - 56);
                *(_OWORD *)(v557 - 72) = v620;
                *(_OWORD *)(v557 - 88) = v619;
                v621 = *((_QWORD *)v587 - 5);
                *(v557 - 32) = *(v587 - 32);
                *((_QWORD *)v557 - 5) = v621;
                v622 = *(_OWORD *)(v587 - 24);
                *((_QWORD *)v587 - 3) = 0;
                *((_QWORD *)v587 - 2) = 0;
                v623 = (std::__shared_weak_count *)*((_QWORD *)v557 - 2);
                *(_OWORD *)(v557 - 24) = v622;
                if (v623)
                {
                  v624 = (unint64_t *)&v623->__shared_owners_;
                  do
                    v625 = __ldaxr(v624);
                  while (__stlxr(v625 - 1, v624));
                  if (!v625)
                  {
                    ((void (*)(std::__shared_weak_count *, void **, void **))v623->__on_zero_shared)(v623, v582, v541);
                    std::__shared_weak_count::__release_weak(v623);
                  }
                }
                *(v557 - 8) = *(v587 - 8);
                v557 -= 280;
                v587 -= 280;
              }
              while (v607 != v564);
            }
            *(float64_t *)v564 = v559;
            v599 = &v1703[280 * v1710];
            *(_OWORD *)(v599 + 8) = v1832;
            *(_OWORD *)(v599 + 40) = *(_OWORD *)&v1843[2];
            *(_OWORD *)(v599 + 56) = *(_OWORD *)&v1843[4];
            *(_OWORD *)(v599 + 72) = *(_OWORD *)&v1843[6];
            *((void **)v599 + 11) = v1843[8];
            *(_OWORD *)(v599 + 24) = *(_OWORD *)v1843;
            *((_OWORD *)v599 + 6) = v1798;
            *((_QWORD *)v599 + 14) = v1799;
            *((_QWORD *)v599 + 15) = v546;
            v600 = (std::__shared_weak_count *)*((_QWORD *)v599 + 16);
            *((_QWORD *)v599 + 16) = v543;
            v538 = v1694;
            v550 = v539 + 363;
            if (v600)
            {
              v601 = (unint64_t *)&v600->__shared_owners_;
              do
                v602 = __ldaxr(v601);
              while (__stlxr(v602 - 1, v601));
              if (!v602)
              {
                ((void (*)(std::__shared_weak_count *, void **, void **))v600->__on_zero_shared)(v600, v582, v541);
                std::__shared_weak_count::__release_weak(v600);
              }
            }
            v603 = &v1703[280 * v1710];
            *((_QWORD *)v603 + 17) = __dsta;
            *((_OWORD *)v603 + 9) = v1806[0];
            *((_OWORD *)v603 + 10) = v1806[1];
            *((_OWORD *)v603 + 11) = v1806[2];
            *((_OWORD *)v603 + 12) = v1835;
            *((_OWORD *)v603 + 13) = v1836;
            *((__n128 *)v603 + 14) = v1837;
            *((_QWORD *)v603 + 30) = v1724;
            v603[248] = (char)v1725;
            v604 = (std::__shared_weak_count *)*((_QWORD *)v603 + 33);
            *((_QWORD *)v603 + 32) = 0;
            *((_QWORD *)v603 + 33) = 0;
            if (v604)
            {
              v605 = (unint64_t *)&v604->__shared_owners_;
              do
                v606 = __ldaxr(v605);
              while (__stlxr(v606 - 1, v605));
              if (!v606)
              {
                ((void (*)(std::__shared_weak_count *, void **, void **))v604->__on_zero_shared)(v604, v582, v541);
                std::__shared_weak_count::__release_weak(v604);
              }
            }
            v1703[280 * v1710 + 272] = 0;
          }
          v1337 = (std::__shared_weak_count *)object[33];
          if (object[33])
          {
            v1338 = (unint64_t *)((char *)object[33] + 8);
            do
              v1339 = __ldaxr(v1338);
            while (__stlxr(v1339 - 1, v1338));
            if (!v1339)
            {
              ((void (*)(std::__shared_weak_count *, void **, void **))v1337->__on_zero_shared)(v1337, v582, v541);
              std::__shared_weak_count::__release_weak(v1337);
            }
          }
        }
        v1340 = (std::__shared_weak_count *)object[16];
        if (object[16])
        {
          v1341 = (unint64_t *)((char *)object[16] + 8);
          do
            v1342 = __ldaxr(v1341);
          while (__stlxr(v1342 - 1, v1341));
          if (!v1342)
          {
            ((void (*)(std::__shared_weak_count *, void **, void **))v1340->__on_zero_shared)(v1340, v582, v541);
            std::__shared_weak_count::__release_weak(v1340);
          }
        }
        v550->i8[2] = 0;
        v550->i8[0] = 0;
        v539[362] = vaddq_s64(v539[362], (int64x2_t)xmmword_2103B2300);
        v1343 = *(std::__shared_weak_count **)&oslog[256];
        if (*(_QWORD *)&oslog[256])
        {
          v1344 = (unint64_t *)(*(_QWORD *)&oslog[256] + 8);
          do
            v1345 = __ldaxr(v1344);
          while (__stlxr(v1345 - 1, v1344));
          if (!v1345)
          {
            ((void (*)(std::__shared_weak_count *, void **, void **))v1343->__on_zero_shared)(v1343, v582, v541);
            std::__shared_weak_count::__release_weak(v1343);
          }
        }
        v639 = 0;
        v640 = *(std::__shared_weak_count **)&oslog[120];
        if (!*(_QWORD *)&oslog[120])
          goto LABEL_822;
        goto LABEL_818;
      }
      --*(_DWORD *)(v584 + 8);
      *(_QWORD *)&oslog[128] = 0;
    }
  }
  v639 = 1;
  v640 = *(std::__shared_weak_count **)&oslog[120];
  if (*(_QWORD *)&oslog[120])
  {
LABEL_818:
    v641 = (unint64_t *)&v640->__shared_owners_;
    do
      v642 = __ldaxr(v641);
    while (__stlxr(v642 - 1, v641));
    if (!v642)
    {
      ((void (*)(std::__shared_weak_count *))v640->__on_zero_shared)(v640);
      std::__shared_weak_count::__release_weak(v640);
    }
  }
LABEL_822:
  v643 = (std::__shared_weak_count *)*((_QWORD *)&v1829 + 1);
  if (!*((_QWORD *)&v1829 + 1))
    goto LABEL_826;
  v644 = (unint64_t *)(*((_QWORD *)&v1829 + 1) + 8);
  do
    v645 = __ldaxr(v644);
  while (__stlxr(v645 - 1, v644));
  if (v645)
  {
LABEL_826:
    if ((v639 & 1) != 0)
      goto LABEL_827;
LABEL_830:
    v646 = 0;
    v539[411].i8[12] = 0;
    v539[411].i32[2] = 0;
    v647 = (std::__shared_weak_count *)*((_QWORD *)&v1728 + 1);
    if (!*((_QWORD *)&v1728 + 1))
      goto LABEL_834;
    goto LABEL_831;
  }
  ((void (*)(std::__shared_weak_count *))v643->__on_zero_shared)(v643);
  std::__shared_weak_count::__release_weak(v643);
  if ((v639 & 1) == 0)
    goto LABEL_830;
LABEL_827:
  v646 = 1;
  v647 = (std::__shared_weak_count *)*((_QWORD *)&v1728 + 1);
  if (!*((_QWORD *)&v1728 + 1))
    goto LABEL_834;
LABEL_831:
  v648 = (unint64_t *)&v647->__shared_owners_;
  do
    v649 = __ldaxr(v648);
  while (__stlxr(v649 - 1, v648));
  if (v649)
  {
LABEL_834:
    if (!v646)
      goto LABEL_836;
    goto LABEL_835;
  }
  ((void (*)(std::__shared_weak_count *))v647->__on_zero_shared)(v647);
  std::__shared_weak_count::__release_weak(v647);
  if (!v646)
    goto LABEL_836;
LABEL_835:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 988, (uint64_t)"ret.second", 10, (uint64_t)"Failed to add Pose prior factor", 31, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_836:
  v650 = v1794[7].f64[1];
  if (*(_QWORD *)&v1794[7].f64[1])
  {
    v651 = (unint64_t *)(*(_QWORD *)&v1794[7].f64[1] + 8);
    do
      v652 = __ldaxr(v651);
    while (__stlxr(v652 - 1, v651));
    if (!v652)
    {
      (*(void (**)(float64_t))(**(_QWORD **)&v650 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v650));
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v650);
    }
  }
  if (v1715)
  {
    v653 = &v1715->__shared_owners_;
    do
      v654 = __ldaxr((unint64_t *)v653);
    while (__stlxr(v654 - 1, (unint64_t *)v653));
    if (!v654)
    {
      ((void (*)(std::__shared_weak_count *))v1715->__on_zero_shared)(v1715);
      std::__shared_weak_count::__release_weak(v1715);
    }
  }
  v655 = (int64x2_t *)v1721;
  v1829 = 0uLL;
  *(_QWORD *)&v656 = LODWORD(v538[1].~__shared_weak_count);
  v1794[0].f64[0] = v656;
  memset(&v1794[1], 0, 184);
  v1718 = 0;
  v1717 = 0;
  v1832 = 0uLL;
  v657 = *(char **)(v1721 + 5608);
  v658 = *(char **)(v1721 + 5616);
  if (v657 == v658)
  {
    v659 = *(char **)(v1721 + 5608);
  }
  else
  {
    v659 = *(char **)(v1721 + 5616);
    if (*((_QWORD *)v658 - 63) >= *(_QWORD *)&v656)
    {
      v660 = 0xEFBEFBEFBEFBEFBFLL * ((v658 - v657) >> 3);
      v661 = *(char **)(v1721 + 5608);
      do
      {
        v662 = v660 >> 1;
        v663 = (unint64_t *)&v661[504 * (v660 >> 1)];
        v664 = *v663;
        v665 = (char *)(v663 + 63);
        v660 += ~(v660 >> 1);
        if (v664 < *(_QWORD *)&v656)
          v661 = v665;
        else
          v660 = v662;
      }
      while (v660);
      v659 = *(char **)(v1721 + 5616);
      if (v661 != v658)
      {
        v659 = v661;
        if (*(_QWORD *)v661 == *(_QWORD *)&v656)
          goto LABEL_920;
      }
    }
  }
  *(float64x2_t *)oslog = v1794[0];
  memset(&oslog[16], 0, 200);
  v1794[12].f64[0] = 0.0;
  v1794[11].f64[1] = 0.0;
  memset(&oslog[472], 0, 17);
  *(_QWORD *)&oslog[456] = 0xBFF0000000000000;
  oslog[464] = 0;
  v666 = *(char **)(v1721 + 4840);
  v667 = *(char **)(v1721 + 4848);
  if (v667 == v666)
    goto LABEL_909;
  v668 = (int64x2_t *)(v1721 + 5808);
  v669 = (v667 - v666) >> 4;
  do
  {
    v670 = v669 >> 1;
    v671 = (unsigned int *)&v666[16 * (v669 >> 1)];
    v673 = *v671;
    v672 = (char *)(v671 + 4);
    v674 = (void **)~(v669 >> 1);
    v669 += (unint64_t)v674;
    if (v673 < LODWORD(v656))
      v666 = v672;
    else
      v669 = v670;
  }
  while (v669);
  if (v666 == v667 || *(_DWORD *)v666 != LODWORD(v656))
  {
LABEL_909:
    v749 = 1;
    v750 = *(std::__shared_weak_count **)&oslog[192];
    if (!*(_QWORD *)&oslog[192])
      goto LABEL_914;
    goto LABEL_910;
  }
  v675 = *((_QWORD *)v666 + 1);
  *(_QWORD *)&oslog[200] = v675;
  ++*(_DWORD *)(*((_QWORD *)v666 + 1) + 8);
  v676 = v655[308].i64[1];
  v677 = v655[309].i64[0];
  if (v677 != v676)
  {
    v678 = (v677 - v676) >> 4;
    do
    {
      v679 = v678 >> 1;
      v680 = (unsigned int *)(v676 + 16 * (v678 >> 1));
      v682 = *v680;
      v681 = v680 + 4;
      v674 = (void **)v682;
      v541 = (void **)~(v678 >> 1);
      v678 += (unint64_t)v541;
      if (v682 < LODWORD(v656))
        v676 = (uint64_t)v681;
      else
        v678 = v679;
    }
    while (v678);
  }
  if (v676 == v677 || *(_DWORD *)v676 != LODWORD(v656))
  {
    if (v675)
      --*(_DWORD *)(v675 + 8);
    goto LABEL_909;
  }
  v683 = *(_QWORD *)(v676 + 8);
  *(_QWORD *)&oslog[208] = v683;
  ++*(_DWORD *)(*(_QWORD *)(v676 + 8) + 8);
  if (!*(_BYTE *)(v675 + 20) && !*(_BYTE *)(v683 + 20))
  {
    --*(_DWORD *)(v675 + 8);
    --*(_DWORD *)(v683 + 8);
    *(_QWORD *)&oslog[208] = 0;
    *(_QWORD *)&oslog[200] = 0;
    v749 = 1;
    v750 = *(std::__shared_weak_count **)&oslog[192];
    if (!*(_QWORD *)&oslog[192])
      goto LABEL_914;
    goto LABEL_910;
  }
  *(_OWORD *)&object[1] = *(_OWORD *)oslog;
  *(_OWORD *)&object[17] = *(_OWORD *)&oslog[128];
  *(_OWORD *)&object[19] = *(_OWORD *)&oslog[144];
  *(_OWORD *)&object[21] = *(_OWORD *)&oslog[160];
  *(_OWORD *)&object[9] = *(_OWORD *)&oslog[64];
  *(_OWORD *)&object[11] = *(_OWORD *)&oslog[80];
  object[0] = *(void **)&v656;
  object[23] = *(void **)&oslog[176];
  *(_OWORD *)&object[13] = *(_OWORD *)&oslog[96];
  *(_OWORD *)&object[15] = *(_OWORD *)&oslog[112];
  *(_OWORD *)&object[3] = *(_OWORD *)&oslog[16];
  *(_OWORD *)&object[5] = *(_OWORD *)&oslog[32];
  *(_OWORD *)&object[7] = *(_OWORD *)&oslog[48];
  object[25] = 0;
  object[24] = 0;
  *(_QWORD *)&oslog[184] = 0;
  *(_QWORD *)&oslog[192] = 0;
  *(_OWORD *)&object[38] = *(_OWORD *)&oslog[296];
  *(_OWORD *)&object[40] = *(_OWORD *)&oslog[312];
  *(_OWORD *)&object[26] = *(_OWORD *)&oslog[200];
  *(_OWORD *)&object[28] = *(_OWORD *)&oslog[216];
  *(_OWORD *)&object[30] = *(_OWORD *)&oslog[232];
  *(_OWORD *)&object[32] = *(_OWORD *)&oslog[248];
  *(_OWORD *)&object[34] = *(_OWORD *)&oslog[264];
  *(_OWORD *)&object[36] = *(_OWORD *)&oslog[280];
  *(_OWORD *)&object[51] = *(_OWORD *)&oslog[400];
  *(_OWORD *)&object[53] = *(_OWORD *)&oslog[416];
  *(_OWORD *)&object[55] = *(_OWORD *)&oslog[432];
  *(_OWORD *)&object[43] = *(_OWORD *)&oslog[336];
  *(_OWORD *)&object[45] = *(_OWORD *)&oslog[352];
  *(_OWORD *)&object[47] = *(_OWORD *)&oslog[368];
  *(_OWORD *)&object[49] = *(_OWORD *)&oslog[384];
  object[42] = *(void **)&oslog[328];
  object[57] = *(void **)&oslog[448];
  LOBYTE(object[59]) = oslog[464];
  object[58] = *(void **)&oslog[456];
  memset(&object[60], 0, 17);
  *(_QWORD *)&oslog[472] = 0;
  *(_QWORD *)&oslog[480] = 0;
  if (v658 == v659 || *(_QWORD *)v659 != *(_QWORD *)&v656)
  {
    v541 = &object[26];
    v674 = &object[28];
    v542 = 0xEFBEFBEFBEFBEFBFLL * ((v659 - v657) >> 3);
    v684 = v655[351].u64[1];
    if ((unint64_t)v658 >= v684)
    {
      v1275 = 1 - 0x1041041041041041 * ((v658 - v657) >> 3);
      if (v1275 > 0x82082082082082)
        sub_20E867F44();
      v1276 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(v684 - (_QWORD)v657) >> 3);
      if (2 * v1276 > v1275)
        v1275 = 2 * v1276;
      if (v1276 >= 0x41041041041041)
        v1277 = 0x82082082082082;
      else
        v1277 = v1275;
      v1843[4] = &v655[351].u64[1];
      if (v1277)
      {
        if (v1277 > 0x82082082082082)
          sub_20E877A38();
        v1278 = (char *)operator new(504 * v1277);
        v542 = 0xEFBEFBEFBEFBEFBFLL * ((v659 - v657) >> 3);
      }
      else
      {
        v1278 = 0;
      }
      v1368 = &v1278[504 * v542];
      v1843[0] = v1278;
      v1843[1] = v1368;
      v1843[2] = v1368;
      v1843[3] = &v1278[504 * v1277];
      if (v542 == v1277)
      {
        v668 = v655 + 363;
        if (v659 - v657 < 1)
        {
          if (v657 == v659)
            v1561 = 1;
          else
            v1561 = 2 * v542;
          if (v1561 > 0x82082082082082)
            sub_20E877A38();
          v1562 = (char *)operator new(504 * v1561);
          v1368 = &v1562[504 * (v1561 >> 2)];
          v1843[0] = v1562;
          v1843[1] = v1368;
          v1843[2] = v1368;
          v1843[3] = &v1562[504 * v1561];
          if (v1278)
            operator delete(v1278);
          v1371 = (float64_t *)v1368;
        }
        else
        {
          v1369 = v542 + 2;
          if (v542 >= -1)
            v1369 = v542 + 1;
          v1370 = v1369 >> 1;
          v1371 = (float64_t *)sub_20F5B64A0((uint64_t)v1368, (uint64_t)v1368, (uint64_t)&v1368[-504 * (v1369 >> 1)]);
          v1368 = (char *)v1843[1] - 504 * v1370;
          v1843[2] = v1371;
          v1843[1] = v1368;
          v656 = *(double *)object;
        }
      }
      else
      {
        v1371 = (float64_t *)&v1278[504 * v542];
        v668 = v655 + 363;
      }
      *v1371 = v656;
      *(_OWORD *)(v1371 + 1) = *(_OWORD *)&object[1];
      v1563 = *(_OWORD *)&object[17];
      *(_OWORD *)(v1371 + 15) = *(_OWORD *)&object[15];
      v1564 = *(_OWORD *)&object[11];
      *(_OWORD *)(v1371 + 13) = *(_OWORD *)&object[13];
      *(_OWORD *)(v1371 + 11) = v1564;
      v1565 = *(_OWORD *)&object[7];
      *(_OWORD *)(v1371 + 9) = *(_OWORD *)&object[9];
      v1371[23] = *(float64_t *)&object[23];
      v1566 = *(_OWORD *)&object[19];
      *(_OWORD *)(v1371 + 21) = *(_OWORD *)&object[21];
      *(_OWORD *)(v1371 + 19) = v1566;
      *(_OWORD *)(v1371 + 17) = v1563;
      v1567 = *(_OWORD *)&object[5];
      *(_OWORD *)(v1371 + 3) = *(_OWORD *)&object[3];
      *(_OWORD *)(v1371 + 5) = v1567;
      *(_OWORD *)(v1371 + 7) = v1565;
      *((_OWORD *)v1371 + 12) = *(_OWORD *)&object[24];
      object[24] = 0;
      object[25] = 0;
      *((_OWORD *)v1371 + 13) = *(_OWORD *)&object[26];
      v1371[42] = *(float64_t *)&object[42];
      v1568 = *(_OWORD *)&object[40];
      v1569 = *(_OWORD *)&object[36];
      *((_OWORD *)v1371 + 19) = *(_OWORD *)&object[38];
      *((_OWORD *)v1371 + 20) = v1568;
      v1570 = *(_OWORD *)&object[30];
      *((_OWORD *)v1371 + 14) = *(_OWORD *)&object[28];
      *((_OWORD *)v1371 + 15) = v1570;
      v1571 = *(_OWORD *)&object[34];
      *((_OWORD *)v1371 + 16) = *(_OWORD *)&object[32];
      *((_OWORD *)v1371 + 17) = v1571;
      *((_OWORD *)v1371 + 18) = v1569;
      v1572 = *(_OWORD *)&object[43];
      v1573 = *(_OWORD *)&object[45];
      v1574 = *(_OWORD *)&object[49];
      *(_OWORD *)(v1371 + 47) = *(_OWORD *)&object[47];
      *(_OWORD *)(v1371 + 49) = v1574;
      *(_OWORD *)(v1371 + 43) = v1572;
      *(_OWORD *)(v1371 + 45) = v1573;
      v1575 = *(_OWORD *)&object[51];
      v1576 = *(_OWORD *)&object[53];
      v1577 = *(_OWORD *)&object[55];
      v1371[57] = *(float64_t *)&object[57];
      *(_OWORD *)(v1371 + 53) = v1576;
      *(_OWORD *)(v1371 + 55) = v1577;
      *(_OWORD *)(v1371 + 51) = v1575;
      v1578 = object[58];
      *((_BYTE *)v1371 + 472) = object[59];
      *((_QWORD *)v1371 + 58) = v1578;
      *((_OWORD *)v1371 + 30) = *(_OWORD *)&object[60];
      object[60] = 0;
      object[61] = 0;
      *((_BYTE *)v1371 + 496) = object[62];
      v1579 = v1371 + 63;
      v1580 = (char *)v655[350].i64[1];
      if (v1580 == v659)
      {
        v1582 = v1368;
      }
      else
      {
        v1581 = v659;
        do
        {
          v1582 = v1368 - 504;
          v1583 = v1581 - 504;
          *(_QWORD *)v1582 = *((_QWORD *)v1581 - 63);
          *(_OWORD *)(v1582 + 8) = *((_OWORD *)v1581 - 31);
          v1584 = *((_OWORD *)v1581 - 26);
          v1585 = *((_OWORD *)v1581 - 25);
          v1586 = *((_OWORD *)v1581 - 24);
          *(_OWORD *)(v1582 + 72) = *((_OWORD *)v1581 - 27);
          *(_OWORD *)(v1582 + 120) = v1586;
          *(_OWORD *)(v1582 + 104) = v1585;
          *(_OWORD *)(v1582 + 88) = v1584;
          v1587 = *((_OWORD *)v1581 - 22);
          v1588 = *((_OWORD *)v1581 - 21);
          v1589 = *((_QWORD *)v1581 - 40);
          *(_OWORD *)(v1582 + 136) = *((_OWORD *)v1581 - 23);
          *((_QWORD *)v1582 + 23) = v1589;
          *(_OWORD *)(v1582 + 168) = v1588;
          *(_OWORD *)(v1582 + 152) = v1587;
          v1590 = *((_OWORD *)v1581 - 30);
          v1591 = *((_OWORD *)v1581 - 29);
          *(_OWORD *)(v1582 + 56) = *((_OWORD *)v1581 - 28);
          *(_OWORD *)(v1582 + 40) = v1591;
          *(_OWORD *)(v1582 + 24) = v1590;
          *((_QWORD *)v1582 + 24) = *((_QWORD *)v1581 - 39);
          v1592 = *((_QWORD *)v1581 - 38);
          *((_QWORD *)v1582 + 25) = v1592;
          if (v1592)
          {
            v1593 = (unint64_t *)(v1592 + 8);
            do
              v1594 = __ldxr(v1593);
            while (__stxr(v1594 + 1, v1593));
          }
          *(_OWORD *)(v1368 - 296) = *(_OWORD *)(v1581 - 296);
          v1595 = *(_OWORD *)(v1581 - 200);
          v1596 = *(_OWORD *)(v1581 - 184);
          v1597 = *((_QWORD *)v1581 - 21);
          *(_OWORD *)(v1368 - 216) = *(_OWORD *)(v1581 - 216);
          *((_QWORD *)v1368 - 21) = v1597;
          *(_OWORD *)(v1368 - 184) = v1596;
          *(_OWORD *)(v1368 - 200) = v1595;
          v1598 = *(_OWORD *)(v1581 - 280);
          v1599 = *(_OWORD *)(v1581 - 264);
          v1600 = *(_OWORD *)(v1581 - 248);
          *(_OWORD *)(v1368 - 232) = *(_OWORD *)(v1581 - 232);
          *(_OWORD *)(v1368 - 248) = v1600;
          *(_OWORD *)(v1368 - 280) = v1598;
          *(_OWORD *)(v1368 - 264) = v1599;
          v1602 = *((_OWORD *)v1581 - 5);
          v1601 = *((_OWORD *)v1581 - 4);
          v1603 = *((_OWORD *)v1581 - 6);
          *((_QWORD *)v1368 - 6) = *((_QWORD *)v1581 - 6);
          *((_OWORD *)v1368 - 5) = v1602;
          *((_OWORD *)v1368 - 4) = v1601;
          *((_OWORD *)v1368 - 6) = v1603;
          v1604 = *((_OWORD *)v1581 - 10);
          v1605 = *((_OWORD *)v1581 - 9);
          v1606 = *((_OWORD *)v1581 - 7);
          *((_OWORD *)v1368 - 8) = *((_OWORD *)v1581 - 8);
          *((_OWORD *)v1368 - 7) = v1606;
          *((_OWORD *)v1368 - 10) = v1604;
          *((_OWORD *)v1368 - 9) = v1605;
          v1607 = *((_QWORD *)v1581 - 5);
          *(v1368 - 32) = *(v1581 - 32);
          *((_QWORD *)v1368 - 5) = v1607;
          *((_QWORD *)v1368 - 3) = *((_QWORD *)v1581 - 3);
          v1608 = *((_QWORD *)v1581 - 2);
          *((_QWORD *)v1368 - 2) = v1608;
          if (v1608)
          {
            v1609 = (unint64_t *)(v1608 + 8);
            do
              v1610 = __ldxr(v1609);
            while (__stxr(v1610 + 1, v1609));
          }
          *(v1368 - 8) = *(v1581 - 8);
          v1368 -= 504;
          v1581 -= 504;
        }
        while (v1583 != v1580);
      }
      v1843[1] = v1582;
      v1611 = (char *)v655[351].i64[0];
      if (v1611 != v659)
      {
        do
        {
          *v1579 = *(_QWORD *)v659;
          *(_OWORD *)(v1579 + 1) = *(_OWORD *)(v659 + 8);
          v1612 = *(_OWORD *)(v659 + 88);
          v1613 = *(_OWORD *)(v659 + 104);
          v1614 = *(_OWORD *)(v659 + 120);
          *(_OWORD *)(v1579 + 9) = *(_OWORD *)(v659 + 72);
          *(_OWORD *)(v1579 + 15) = v1614;
          *(_OWORD *)(v1579 + 13) = v1613;
          *(_OWORD *)(v1579 + 11) = v1612;
          v1615 = *(_OWORD *)(v659 + 152);
          v1616 = *(_OWORD *)(v659 + 168);
          v1617 = *((_QWORD *)v659 + 23);
          *(_OWORD *)(v1579 + 17) = *(_OWORD *)(v659 + 136);
          v1579[23] = v1617;
          *(_OWORD *)(v1579 + 21) = v1616;
          *(_OWORD *)(v1579 + 19) = v1615;
          v1618 = *(_OWORD *)(v659 + 24);
          v1619 = *(_OWORD *)(v659 + 40);
          *(_OWORD *)(v1579 + 7) = *(_OWORD *)(v659 + 56);
          *(_OWORD *)(v1579 + 5) = v1619;
          *(_OWORD *)(v1579 + 3) = v1618;
          v1579[24] = *((_QWORD *)v659 + 24);
          v1620 = *((_QWORD *)v659 + 25);
          v1579[25] = v1620;
          if (v1620)
          {
            v1621 = (unint64_t *)(v1620 + 8);
            do
              v1622 = __ldxr(v1621);
            while (__stxr(v1622 + 1, v1621));
          }
          *((_OWORD *)v1579 + 13) = *((_OWORD *)v659 + 13);
          v1624 = *((_OWORD *)v659 + 19);
          v1623 = *((_OWORD *)v659 + 20);
          v1625 = *((_OWORD *)v659 + 18);
          v1579[42] = *((_QWORD *)v659 + 42);
          *((_OWORD *)v1579 + 19) = v1624;
          *((_OWORD *)v1579 + 20) = v1623;
          *((_OWORD *)v1579 + 18) = v1625;
          v1626 = *((_OWORD *)v659 + 14);
          v1627 = *((_OWORD *)v659 + 15);
          v1628 = *((_OWORD *)v659 + 17);
          *((_OWORD *)v1579 + 16) = *((_OWORD *)v659 + 16);
          *((_OWORD *)v1579 + 17) = v1628;
          *((_OWORD *)v1579 + 14) = v1626;
          *((_OWORD *)v1579 + 15) = v1627;
          v1630 = *(_OWORD *)(v659 + 424);
          v1629 = *(_OWORD *)(v659 + 440);
          v1631 = *(_OWORD *)(v659 + 408);
          v1579[57] = *((_QWORD *)v659 + 57);
          *(_OWORD *)(v1579 + 53) = v1630;
          *(_OWORD *)(v1579 + 55) = v1629;
          *(_OWORD *)(v1579 + 51) = v1631;
          v1632 = *(_OWORD *)(v659 + 344);
          v1633 = *(_OWORD *)(v659 + 360);
          v1634 = *(_OWORD *)(v659 + 392);
          *(_OWORD *)(v1579 + 47) = *(_OWORD *)(v659 + 376);
          *(_OWORD *)(v1579 + 49) = v1634;
          *(_OWORD *)(v1579 + 43) = v1632;
          *(_OWORD *)(v1579 + 45) = v1633;
          v1635 = *((_QWORD *)v659 + 58);
          *((_BYTE *)v1579 + 472) = v659[472];
          v1579[58] = v1635;
          v1579[60] = *((_QWORD *)v659 + 60);
          v1636 = *((_QWORD *)v659 + 61);
          v1579[61] = v1636;
          if (v1636)
          {
            v1637 = (unint64_t *)(v1636 + 8);
            do
              v1638 = __ldxr(v1637);
            while (__stxr(v1638 + 1, v1637));
          }
          *((_BYTE *)v1579 + 496) = v659[496];
          v659 += 504;
          v1579 += 63;
        }
        while (v659 != v1611);
        v1582 = (char *)v1843[1];
        v659 = (char *)v655[351].i64[0];
      }
      v1639 = (char *)v655[350].i64[1];
      v655[350].i64[1] = (uint64_t)v1582;
      v655[351].i64[0] = (uint64_t)v1579;
      v1640 = (void *)v655[351].i64[1];
      v655[351].i64[1] = (uint64_t)v1843[3];
      v1843[3] = v1640;
      v1843[1] = v1639;
      v1843[0] = v1639;
      if (v659 != v1639)
      {
        do
        {
          v1843[2] = v659 - 504;
          v1641 = (std::__shared_weak_count *)*((_QWORD *)v659 - 2);
          if (v1641)
          {
            v1642 = (unint64_t *)&v1641->__shared_owners_;
            do
              v1643 = __ldaxr(v1642);
            while (__stlxr(v1643 - 1, v1642));
            if (!v1643)
            {
              ((void (*)(std::__shared_weak_count *))v1641->__on_zero_shared)(v1641);
              std::__shared_weak_count::__release_weak(v1641);
            }
          }
          v1644 = (std::__shared_weak_count *)*((_QWORD *)v659 - 38);
          if (v1644)
          {
            v1645 = (unint64_t *)&v1644->__shared_owners_;
            do
              v1646 = __ldaxr(v1645);
            while (__stlxr(v1646 - 1, v1645));
            if (!v1646)
            {
              ((void (*)(std::__shared_weak_count *))v1644->__on_zero_shared)(v1644);
              std::__shared_weak_count::__release_weak(v1644);
            }
          }
          v659 = (char *)v1843[2];
        }
        while (v1843[2] != v1639);
        v659 = (char *)v1843[0];
      }
      if (v659)
        operator delete(v659);
    }
    else if (v659 == v658)
    {
      *(float64_t *)v658 = v656;
      v1346 = &v657[8 * ((v659 - v657) >> 3)];
      *(_OWORD *)(v1346 + 8) = *(_OWORD *)&object[1];
      v1348 = *(_OWORD *)&object[5];
      v1347 = *(_OWORD *)&object[7];
      *(_OWORD *)(v1346 + 24) = *(_OWORD *)&object[3];
      *(_OWORD *)(v1346 + 56) = v1347;
      *(_OWORD *)(v1346 + 40) = v1348;
      v1349 = *(_OWORD *)&object[9];
      v1350 = *(_OWORD *)&object[11];
      v1351 = *(_OWORD *)&object[13];
      *(_OWORD *)(v1346 + 120) = *(_OWORD *)&object[15];
      *(_OWORD *)(v1346 + 104) = v1351;
      *(_OWORD *)(v1346 + 88) = v1350;
      *(_OWORD *)(v1346 + 72) = v1349;
      v1352 = *(_OWORD *)&object[17];
      v1353 = *(_OWORD *)&object[19];
      v1354 = object[23];
      *(_OWORD *)(v1346 + 168) = *(_OWORD *)&object[21];
      *(_OWORD *)(v1346 + 152) = v1353;
      *(_OWORD *)(v1346 + 136) = v1352;
      *((_QWORD *)v1346 + 23) = v1354;
      *((_QWORD *)v1346 + 24) = 0;
      *((_QWORD *)v1346 + 25) = 0;
      object[24] = 0;
      object[25] = 0;
      *((_OWORD *)v1346 + 13) = *(_OWORD *)&object[26];
      v1356 = *(_OWORD *)&object[38];
      v1355 = *(_OWORD *)&object[40];
      v1357 = *(_OWORD *)&object[36];
      *((void **)v1346 + 42) = object[42];
      *((_OWORD *)v1346 + 19) = v1356;
      *((_OWORD *)v1346 + 20) = v1355;
      *((_OWORD *)v1346 + 18) = v1357;
      v1358 = *(_OWORD *)&object[28];
      v1359 = *(_OWORD *)&object[30];
      v1360 = *(_OWORD *)&object[34];
      *((_OWORD *)v1346 + 16) = *(_OWORD *)&object[32];
      *((_OWORD *)v1346 + 17) = v1360;
      *((_OWORD *)v1346 + 14) = v1358;
      *((_OWORD *)v1346 + 15) = v1359;
      v1362 = *(_OWORD *)&object[53];
      v1361 = *(_OWORD *)&object[55];
      v1363 = *(_OWORD *)&object[51];
      *((void **)v1346 + 57) = object[57];
      *(_OWORD *)(v1346 + 424) = v1362;
      *(_OWORD *)(v1346 + 440) = v1361;
      *(_OWORD *)(v1346 + 408) = v1363;
      v1364 = *(_OWORD *)&object[43];
      v1365 = *(_OWORD *)&object[45];
      v1366 = *(_OWORD *)&object[49];
      *(_OWORD *)(v1346 + 376) = *(_OWORD *)&object[47];
      *(_OWORD *)(v1346 + 392) = v1366;
      *(_OWORD *)(v1346 + 344) = v1364;
      *(_OWORD *)(v1346 + 360) = v1365;
      v1367 = object[58];
      v1346[472] = (char)object[59];
      *((_QWORD *)v1346 + 58) = v1367;
      *((_QWORD *)v1346 + 60) = 0;
      *((_QWORD *)v1346 + 61) = 0;
      object[60] = 0;
      object[61] = 0;
      v1346[496] = 0;
      v655[351].i64[0] = (uint64_t)(v658 + 504);
    }
    else
    {
      v1798 = *(_OWORD *)oslog;
      *(_OWORD *)&v1843[14] = *(_OWORD *)&oslog[128];
      *(_OWORD *)&v1843[16] = *(_OWORD *)&oslog[144];
      *(_OWORD *)&v1843[18] = *(_OWORD *)&oslog[160];
      *(_OWORD *)&v1843[6] = *(_OWORD *)&oslog[64];
      *(_OWORD *)&v1843[8] = *(_OWORD *)&oslog[80];
      v1843[20] = *(void **)&oslog[176];
      *(_OWORD *)&v1843[10] = *(_OWORD *)&oslog[96];
      *(_OWORD *)&v1843[12] = *(_OWORD *)&oslog[112];
      *(_OWORD *)v1843 = *(_OWORD *)&oslog[16];
      *(_OWORD *)&v1843[2] = *(_OWORD *)&oslog[32];
      *(_OWORD *)&v1843[4] = *(_OWORD *)&oslog[48];
      object[24] = 0;
      object[25] = 0;
      v1704 = *(_OWORD *)&object[26];
      v1806[4] = *(_OWORD *)&oslog[280];
      v1806[5] = *(_OWORD *)&oslog[296];
      v1806[6] = *(_OWORD *)&oslog[312];
      *(_QWORD *)&v1806[7] = *(_QWORD *)&oslog[328];
      v1806[0] = *(_OWORD *)&oslog[216];
      v1806[1] = *(_OWORD *)&oslog[232];
      v1806[2] = *(_OWORD *)&oslog[248];
      v1806[3] = *(_OWORD *)&oslog[264];
      v1842.n128_u64[0] = *(_QWORD *)&oslog[448];
      v1841 = *(_OWORD *)&oslog[432];
      v1840 = *(_OWORD *)&oslog[416];
      v1839 = *(_OWORD *)&oslog[400];
      v1837 = *(__n128 *)&oslog[368];
      v1838 = *(__n128 *)&oslog[384];
      v1835 = *(_OWORD *)&oslog[336];
      v1836 = *(_OWORD *)&oslog[352];
      LOBYTE(v1715) = oslog[464];
      v1713 = *(_QWORD *)&oslog[456];
      v685 = v658 - 504;
      v686 = v658;
      object[60] = 0;
      object[61] = 0;
      if ((unint64_t)v658 >= 0x1F8)
      {
        v687 = v658 - 504;
        v686 = v658;
        do
        {
          *(_QWORD *)v686 = *(_QWORD *)v687;
          *(_OWORD *)(v686 + 8) = *(_OWORD *)(v687 + 8);
          v688 = *(_OWORD *)(v687 + 88);
          v689 = *(_OWORD *)(v687 + 104);
          v690 = *(_OWORD *)(v687 + 120);
          *(_OWORD *)(v686 + 72) = *(_OWORD *)(v687 + 72);
          *(_OWORD *)(v686 + 120) = v690;
          *(_OWORD *)(v686 + 104) = v689;
          *(_OWORD *)(v686 + 88) = v688;
          v691 = *(_OWORD *)(v687 + 152);
          v692 = *(_OWORD *)(v687 + 168);
          v693 = *((_QWORD *)v687 + 23);
          *(_OWORD *)(v686 + 136) = *(_OWORD *)(v687 + 136);
          *((_QWORD *)v686 + 23) = v693;
          *(_OWORD *)(v686 + 168) = v692;
          *(_OWORD *)(v686 + 152) = v691;
          v694 = *(_OWORD *)(v687 + 24);
          v695 = *(_OWORD *)(v687 + 40);
          *(_OWORD *)(v686 + 56) = *(_OWORD *)(v687 + 56);
          *(_OWORD *)(v686 + 40) = v695;
          *(_OWORD *)(v686 + 24) = v694;
          *((_OWORD *)v686 + 12) = *((_OWORD *)v687 + 12);
          *((_QWORD *)v687 + 24) = 0;
          *((_QWORD *)v687 + 25) = 0;
          *((_OWORD *)v686 + 13) = *((_OWORD *)v687 + 13);
          v697 = *((_OWORD *)v687 + 19);
          v696 = *((_OWORD *)v687 + 20);
          v698 = *((_OWORD *)v687 + 18);
          *((_QWORD *)v686 + 42) = *((_QWORD *)v687 + 42);
          *((_OWORD *)v686 + 19) = v697;
          *((_OWORD *)v686 + 20) = v696;
          *((_OWORD *)v686 + 18) = v698;
          v699 = *((_OWORD *)v687 + 14);
          v700 = *((_OWORD *)v687 + 15);
          v701 = *((_OWORD *)v687 + 17);
          *((_OWORD *)v686 + 16) = *((_OWORD *)v687 + 16);
          *((_OWORD *)v686 + 17) = v701;
          *((_OWORD *)v686 + 14) = v699;
          *((_OWORD *)v686 + 15) = v700;
          v703 = *(_OWORD *)(v687 + 424);
          v702 = *(_OWORD *)(v687 + 440);
          v704 = *(_OWORD *)(v687 + 408);
          *((_QWORD *)v686 + 57) = *((_QWORD *)v687 + 57);
          *(_OWORD *)(v686 + 424) = v703;
          *(_OWORD *)(v686 + 440) = v702;
          *(_OWORD *)(v686 + 408) = v704;
          v705 = *(_OWORD *)(v687 + 344);
          v706 = *(_OWORD *)(v687 + 360);
          v707 = *(_OWORD *)(v687 + 392);
          *(_OWORD *)(v686 + 376) = *(_OWORD *)(v687 + 376);
          *(_OWORD *)(v686 + 392) = v707;
          *(_OWORD *)(v686 + 344) = v705;
          *(_OWORD *)(v686 + 360) = v706;
          v708 = *((_QWORD *)v687 + 58);
          v686[472] = v687[472];
          *((_QWORD *)v686 + 58) = v708;
          *((_OWORD *)v686 + 30) = *((_OWORD *)v687 + 30);
          *((_QWORD *)v687 + 60) = 0;
          *((_QWORD *)v687 + 61) = 0;
          v686[496] = v687[496];
          v686 += 504;
          v687 += 504;
        }
        while (v687 < v658);
      }
      v709 = 0xEFBEFBEFBEFBEFBFLL * ((v659 - v657) >> 3);
      v655[351].i64[0] = (uint64_t)v686;
      if (v658 != v659 + 504)
      {
        do
        {
          v718 = v685 - 504;
          v719 = v658 - 504;
          *(_QWORD *)v719 = *((_QWORD *)v685 - 63);
          *(_OWORD *)(v719 + 8) = *((_OWORD *)v685 - 31);
          v720 = *((_OWORD *)v685 - 26);
          v721 = *((_OWORD *)v685 - 25);
          v722 = *((_OWORD *)v685 - 24);
          *(_OWORD *)(v719 + 72) = *((_OWORD *)v685 - 27);
          *(_OWORD *)(v719 + 120) = v722;
          *(_OWORD *)(v719 + 104) = v721;
          *(_OWORD *)(v719 + 88) = v720;
          v723 = *((_OWORD *)v685 - 22);
          v724 = *((_OWORD *)v685 - 21);
          v725 = *((_QWORD *)v685 - 40);
          *(_OWORD *)(v719 + 136) = *((_OWORD *)v685 - 23);
          *((_QWORD *)v719 + 23) = v725;
          *(_OWORD *)(v719 + 168) = v724;
          *(_OWORD *)(v719 + 152) = v723;
          v726 = *((_OWORD *)v685 - 30);
          v727 = *((_OWORD *)v685 - 29);
          *(_OWORD *)(v719 + 56) = *((_OWORD *)v685 - 28);
          *(_OWORD *)(v719 + 40) = v727;
          *(_OWORD *)(v719 + 24) = v726;
          v728 = *(_OWORD *)(v685 - 312);
          *((_QWORD *)v718 + 24) = 0;
          *((_QWORD *)v718 + 25) = 0;
          v729 = (std::__shared_weak_count *)*((_QWORD *)v658 - 38);
          *((_OWORD *)v719 + 12) = v728;
          if (v729)
          {
            v730 = (unint64_t *)&v729->__shared_owners_;
            do
              v731 = __ldaxr(v730);
            while (__stlxr(v731 - 1, v730));
            if (!v731)
            {
              ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v729->__on_zero_shared)(v729, v674, v541, v542);
              std::__shared_weak_count::__release_weak(v729);
            }
          }
          *((_QWORD *)v658 - 37) = *((_QWORD *)v685 - 37);
          *((_QWORD *)v658 - 36) = *((_QWORD *)v685 - 36);
          v732 = *(_OWORD *)(v685 - 280);
          v733 = *(_OWORD *)(v685 - 264);
          v734 = *(_OWORD *)(v685 - 248);
          *(_OWORD *)(v658 - 232) = *(_OWORD *)(v685 - 232);
          *(_OWORD *)(v658 - 248) = v734;
          *(_OWORD *)(v658 - 280) = v732;
          *(_OWORD *)(v658 - 264) = v733;
          v735 = *(_OWORD *)(v685 - 216);
          v736 = *(_OWORD *)(v685 - 200);
          v737 = *(_OWORD *)(v685 - 184);
          *((_QWORD *)v658 - 21) = *((_QWORD *)v685 - 21);
          *(_OWORD *)(v658 - 184) = v737;
          *(_OWORD *)(v658 - 200) = v736;
          *(_OWORD *)(v658 - 216) = v735;
          v739 = *((_OWORD *)v685 - 5);
          v738 = *((_OWORD *)v685 - 4);
          v740 = *((_OWORD *)v685 - 6);
          *((_QWORD *)v658 - 6) = *((_QWORD *)v685 - 6);
          *((_OWORD *)v658 - 5) = v739;
          *((_OWORD *)v658 - 4) = v738;
          *((_OWORD *)v658 - 6) = v740;
          v741 = *((_OWORD *)v685 - 10);
          v742 = *((_OWORD *)v685 - 9);
          v743 = *((_OWORD *)v685 - 7);
          *((_OWORD *)v658 - 8) = *((_OWORD *)v685 - 8);
          *((_OWORD *)v658 - 7) = v743;
          *((_OWORD *)v658 - 10) = v741;
          *((_OWORD *)v658 - 9) = v742;
          v744 = *((_QWORD *)v685 - 5);
          *(v658 - 32) = *(v685 - 32);
          *((_QWORD *)v658 - 5) = v744;
          v745 = *(_OWORD *)(v685 - 24);
          *((_QWORD *)v685 - 3) = 0;
          *((_QWORD *)v685 - 2) = 0;
          v746 = (std::__shared_weak_count *)*((_QWORD *)v658 - 2);
          *(_OWORD *)(v658 - 24) = v745;
          if (v746)
          {
            v747 = (unint64_t *)&v746->__shared_owners_;
            do
              v748 = __ldaxr(v747);
            while (__stlxr(v748 - 1, v747));
            if (!v748)
            {
              ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v746->__on_zero_shared)(v746, v674, v541, v542);
              std::__shared_weak_count::__release_weak(v746);
            }
          }
          *(v658 - 8) = *(v685 - 8);
          v658 -= 504;
          v685 -= 504;
        }
        while (v718 != v659);
      }
      *(float64_t *)v659 = v656;
      v710 = &v657[8 * ((v659 - v657) >> 3)];
      *(_OWORD *)(v710 + 8) = v1798;
      *(_OWORD *)(v710 + 136) = *(_OWORD *)&v1843[14];
      *(_OWORD *)(v710 + 152) = *(_OWORD *)&v1843[16];
      *(_OWORD *)(v710 + 168) = *(_OWORD *)&v1843[18];
      *((void **)v710 + 23) = v1843[20];
      *(_OWORD *)(v710 + 72) = *(_OWORD *)&v1843[6];
      *(_OWORD *)(v710 + 88) = *(_OWORD *)&v1843[8];
      *(_OWORD *)(v710 + 104) = *(_OWORD *)&v1843[10];
      *(_OWORD *)(v710 + 120) = *(_OWORD *)&v1843[12];
      *(_OWORD *)(v710 + 24) = *(_OWORD *)v1843;
      *(_OWORD *)(v710 + 40) = *(_OWORD *)&v1843[2];
      *(_OWORD *)(v710 + 56) = *(_OWORD *)&v1843[4];
      v711 = (std::__shared_weak_count *)*((_QWORD *)v710 + 25);
      *((_QWORD *)v710 + 24) = 0;
      *((_QWORD *)v710 + 25) = 0;
      v668 = v655 + 363;
      if (v711)
      {
        v712 = (unint64_t *)&v711->__shared_owners_;
        do
          v713 = __ldaxr(v712);
        while (__stlxr(v713 - 1, v712));
        if (!v713)
        {
          ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v711->__on_zero_shared)(v711, v674, v541, v542);
          std::__shared_weak_count::__release_weak(v711);
        }
      }
      v714 = &v657[504 * v709];
      *((_OWORD *)v714 + 13) = v1704;
      *((_OWORD *)v714 + 18) = v1806[4];
      *((_OWORD *)v714 + 19) = v1806[5];
      *((_OWORD *)v714 + 20) = v1806[6];
      *((_QWORD *)v714 + 42) = *(_QWORD *)&v1806[7];
      *((_OWORD *)v714 + 14) = v1806[0];
      *((_OWORD *)v714 + 15) = v1806[1];
      *((_OWORD *)v714 + 16) = v1806[2];
      *((_OWORD *)v714 + 17) = v1806[3];
      *(__n128 *)(v714 + 392) = v1838;
      *(__n128 *)(v714 + 376) = v1837;
      *(_OWORD *)(v714 + 360) = v1836;
      *(_OWORD *)(v714 + 344) = v1835;
      *((_QWORD *)v714 + 57) = v1842.n128_u64[0];
      *(_OWORD *)(v714 + 440) = v1841;
      *(_OWORD *)(v714 + 424) = v1840;
      *(_OWORD *)(v714 + 408) = v1839;
      v714[472] = (char)v1715;
      *((_QWORD *)v714 + 58) = v1713;
      v715 = (std::__shared_weak_count *)*((_QWORD *)v714 + 61);
      *((_QWORD *)v714 + 60) = 0;
      *((_QWORD *)v714 + 61) = 0;
      if (v715)
      {
        v716 = (unint64_t *)&v715->__shared_owners_;
        do
          v717 = __ldaxr(v716);
        while (__stlxr(v717 - 1, v716));
        if (!v717)
        {
          ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v715->__on_zero_shared)(v715, v674, v541, v542);
          std::__shared_weak_count::__release_weak(v715);
        }
      }
      v657[504 * v709 + 496] = 0;
    }
    v1647 = (std::__shared_weak_count *)object[61];
    if (object[61])
    {
      v1648 = (unint64_t *)((char *)object[61] + 8);
      do
        v1649 = __ldaxr(v1648);
      while (__stlxr(v1649 - 1, v1648));
      if (!v1649)
      {
        ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v1647->__on_zero_shared)(v1647, v674, v541, v542);
        std::__shared_weak_count::__release_weak(v1647);
      }
    }
  }
  v1650 = (std::__shared_weak_count *)object[25];
  if (object[25])
  {
    v1651 = (unint64_t *)((char *)object[25] + 8);
    do
      v1652 = __ldaxr(v1651);
    while (__stlxr(v1652 - 1, v1651));
    if (!v1652)
    {
      ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v1650->__on_zero_shared)(v1650, v674, v541, v542);
      std::__shared_weak_count::__release_weak(v1650);
    }
  }
  v668->i8[2] = 0;
  v668->i8[0] = 0;
  v655[362] = vaddq_s64(v655[362], (int64x2_t)xmmword_2103B4900);
  v1653 = *(std::__shared_weak_count **)&oslog[480];
  if (*(_QWORD *)&oslog[480])
  {
    v1654 = (unint64_t *)(*(_QWORD *)&oslog[480] + 8);
    do
      v1655 = __ldaxr(v1654);
    while (__stlxr(v1655 - 1, v1654));
    if (!v1655)
    {
      ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v1653->__on_zero_shared)(v1653, v674, v541, v542);
      std::__shared_weak_count::__release_weak(v1653);
    }
  }
  v749 = 0;
  v750 = *(std::__shared_weak_count **)&oslog[192];
  if (*(_QWORD *)&oslog[192])
  {
LABEL_910:
    v751 = (unint64_t *)&v750->__shared_owners_;
    do
      v752 = __ldaxr(v751);
    while (__stlxr(v752 - 1, v751));
    if (!v752)
    {
      ((void (*)(std::__shared_weak_count *))v750->__on_zero_shared)(v750);
      std::__shared_weak_count::__release_weak(v750);
    }
  }
LABEL_914:
  v753 = (std::__shared_weak_count *)*((_QWORD *)&v1832 + 1);
  if (!*((_QWORD *)&v1832 + 1))
    goto LABEL_918;
  v754 = (unint64_t *)(*((_QWORD *)&v1832 + 1) + 8);
  do
    v755 = __ldaxr(v754);
  while (__stlxr(v755 - 1, v754));
  if (v755)
  {
LABEL_918:
    if ((v749 & 1) != 0)
      goto LABEL_920;
    goto LABEL_919;
  }
  ((void (*)(std::__shared_weak_count *))v753->__on_zero_shared)(v753);
  std::__shared_weak_count::__release_weak(v753);
  if ((v749 & 1) == 0)
  {
LABEL_919:
    v655[411].i8[12] = 0;
    v655[411].i32[2] = 0;
  }
LABEL_920:
  if (v1718)
  {
    v756 = &v1718->__shared_owners_;
    do
      v757 = __ldaxr((unint64_t *)v756);
    while (__stlxr(v757 - 1, (unint64_t *)v756));
    if (!v757)
    {
      ((void (*)(std::__shared_weak_count *))v1718->__on_zero_shared)(v1718);
      std::__shared_weak_count::__release_weak(v1718);
    }
  }
  v758 = v1794[12].f64[0];
  if (!*(_QWORD *)&v1794[12].f64[0])
    goto LABEL_929;
  v759 = (unint64_t *)(*(_QWORD *)&v1794[12].f64[0] + 8);
  do
    v760 = __ldaxr(v759);
  while (__stlxr(v760 - 1, v759));
  if (!v760)
  {
    (*(void (**)(float64_t))(**(_QWORD **)&v758 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v758));
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v758);
    v761 = (std::__shared_weak_count *)*((_QWORD *)&v1829 + 1);
    if (!*((_QWORD *)&v1829 + 1))
      goto LABEL_933;
  }
  else
  {
LABEL_929:
    v761 = (std::__shared_weak_count *)*((_QWORD *)&v1829 + 1);
    if (!*((_QWORD *)&v1829 + 1))
      goto LABEL_933;
  }
  v762 = (unint64_t *)&v761->__shared_owners_;
  do
    v763 = __ldaxr(v762);
  while (__stlxr(v763 - 1, v762));
  if (!v763)
  {
    ((void (*)(std::__shared_weak_count *))v761->__on_zero_shared)(v761);
    std::__shared_weak_count::__release_weak(v761);
    if (!v1670)
      goto LABEL_1414;
    goto LABEL_934;
  }
LABEL_933:
  if (!v1670)
    goto LABEL_1414;
LABEL_934:
  if (*(_BYTE *)(v1676 + 6))
  {
    v1716 = 0;
    v1715 = 0;
    v1714 = &v1715;
    v764 = *(uint64_t **)(v1668 + 16);
    if (v764)
    {
      v1705 = 0;
      v1680 = *(void **)(MEMORY[0x24BEDB7F0] + 16);
      v1679 = *(void **)(MEMORY[0x24BEDB7F0] + 24);
      v1677 = *(void **)(MEMORY[0x24BEDB7F0] + 32);
      v1675 = *(void **)(MEMORY[0x24BEDB7F0] + 40);
      v1674 = *(void **)(MEMORY[0x24BEDB7F0] + 48);
      v1672 = *(void **)(MEMORY[0x24BEDB7F0] + 8);
      v1666 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
      v1667 = (void *)*MEMORY[0x24BEDB7F0];
      v1665 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
      v1669 = (void *)(MEMORY[0x24BEDB848] + 16);
      while (1)
      {
        v765 = v764[6];
        v1695 = v764[7];
        if (v765 != v1695)
          break;
LABEL_937:
        v764 = (uint64_t *)*v764;
        if (!v764)
        {
          v1126 = v1715;
          goto LABEL_1413;
        }
      }
      v1688 = v764;
      while (1)
      {
        v766 = *((unsigned int *)v764 + 6);
        v767 = *(unsigned int *)(v765 + 24);
        v768 = &v1715;
        v769 = &v1715;
        v770 = v1715;
        if (v1715)
        {
          v771 = v1715;
          while (1)
          {
            v772 = HIDWORD(v771[1].__vftable);
            if (v766 == v772)
            {
              shared_owners_low = LODWORD(v771[1].__shared_owners_);
              if (v767 >= shared_owners_low)
              {
                _CF = shared_owners_low >= v767;
                v774 = shared_owners_low == v767;
                v775 = -1;
                if (_CF)
                  v775 = 1;
                if (v774)
                  v775 = 0;
LABEL_946:
                if ((v775 & 0x80) == 0)
                  goto LABEL_943;
                v771 = (std::__shared_weak_count *)((char *)v771 + 8);
              }
            }
            else if (v766 >= v772)
            {
              _CF = v772 >= v766;
              v775 = -1;
              if (_CF)
                v775 = 1;
              goto LABEL_946;
            }
            v771 = (std::__shared_weak_count *)v771->__vftable;
            if (!v771)
            {
              v776 = v1715;
              while (1)
              {
                while (1)
                {
                  v768 = (std::__shared_weak_count **)v776;
                  v777 = HIDWORD(v776[1].__vftable);
                  if (v766 == v777)
                    break;
                  if (v766 >= v777)
                  {
                    _CF = v777 >= v766;
                    v781 = -1;
                    if (_CF)
                      v781 = 1;
                    if ((v781 & 0x80) == 0)
                      goto LABEL_1004;
                    goto LABEL_977;
                  }
LABEL_962:
                  v776 = *v768;
                  v769 = v768;
                  if (!*v768)
                    goto LABEL_979;
                }
                v778 = *((unsigned int *)v768 + 8);
                if (v767 < v778)
                  goto LABEL_962;
                _CF = v778 >= v767;
                v779 = v778 == v767;
                v780 = -1;
                if (_CF)
                  v780 = 1;
                if (v779)
                  v780 = 0;
                if ((v780 & 0x80) == 0)
                  goto LABEL_1004;
LABEL_977:
                v776 = v768[1];
                if (!v776)
                {
                  v769 = v768 + 1;
                  goto LABEL_979;
                }
              }
            }
          }
        }
LABEL_979:
        v782 = (std::__shared_weak_count *)operator new(0x28uLL);
        *(std::__shared_weak_count_vtbl **)((char *)&v782[1].__vftable + 4) = (std::__shared_weak_count_vtbl *)(v766 | (v767 << 32));
        v782->__vftable = 0;
        v782->__shared_owners_ = 0;
        v782->__shared_weak_owners_ = (uint64_t)v768;
        *v769 = v782;
        if (*v1714)
        {
          v1714 = (std::__shared_weak_count **)*v1714;
          v782 = *v769;
        }
        v783 = v1715;
        _ZF = v782 == v1715;
        LOBYTE(v782[1].__vftable) = v782 == v1715;
        if (!_ZF)
        {
          do
          {
            shared_weak_owners = v782->__shared_weak_owners_;
            if (*(_BYTE *)(shared_weak_owners + 24))
              break;
            v785 = *(std::__shared_weak_count **)(shared_weak_owners + 16);
            v786 = v785->__vftable;
            if (v785->__vftable == (std::__shared_weak_count_vtbl *)shared_weak_owners)
            {
              shared_owners = v785->__shared_owners_;
              if (!shared_owners
                || (v790 = *(unsigned __int8 *)(shared_owners + 24), p_get_deleter = (_BYTE *)(shared_owners + 24), v790))
              {
                if (*(std::__shared_weak_count **)shared_weak_owners == v782)
                {
                  *(_BYTE *)(shared_weak_owners + 24) = 1;
                  LOBYTE(v785[1].__vftable) = 0;
                  v793 = *(std::__shared_weak_count_vtbl **)(shared_weak_owners + 8);
                  v785->__vftable = v793;
                  if (v793)
                    goto LABEL_996;
                }
                else
                {
                  v791 = *(uint64_t **)(shared_weak_owners + 8);
                  v792 = *v791;
                  *(_QWORD *)(shared_weak_owners + 8) = *v791;
                  if (v792)
                  {
                    *(_QWORD *)(v792 + 16) = shared_weak_owners;
                    v785 = *(std::__shared_weak_count **)(shared_weak_owners + 16);
                  }
                  v791[2] = (uint64_t)v785;
                  *(_QWORD *)(*(_QWORD *)(shared_weak_owners + 16)
                            + 8 * (**(_QWORD **)(shared_weak_owners + 16) != shared_weak_owners)) = v791;
                  *v791 = shared_weak_owners;
                  *(_QWORD *)(shared_weak_owners + 16) = v791;
                  v785 = (std::__shared_weak_count *)v791[2];
                  shared_weak_owners = (uint64_t)v785->__vftable;
                  *((_BYTE *)v791 + 24) = 1;
                  LOBYTE(v785[1].__vftable) = 0;
                  v793 = *(std::__shared_weak_count_vtbl **)(shared_weak_owners + 8);
                  v785->__vftable = v793;
                  if (v793)
LABEL_996:
                    v793->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v785;
                }
                *(_QWORD *)(shared_weak_owners + 16) = v785->__shared_weak_owners_;
                *(_QWORD *)(v785->__shared_weak_owners_ + 8 * (*(_QWORD *)v785->__shared_weak_owners_ != (_QWORD)v785)) = shared_weak_owners;
                *(_QWORD *)(shared_weak_owners + 8) = v785;
LABEL_1002:
                v785->__shared_weak_owners_ = shared_weak_owners;
                break;
              }
            }
            else if (!v786
                   || (get_deleter_low = LOBYTE(v786->__get_deleter),
                       p_get_deleter = &v786->__get_deleter,
                       get_deleter_low))
            {
              if (*(std::__shared_weak_count **)shared_weak_owners == v782)
              {
                v960 = v782->__shared_owners_;
                *(_QWORD *)shared_weak_owners = v960;
                if (v960)
                {
                  *(_QWORD *)(v960 + 16) = shared_weak_owners;
                  v785 = *(std::__shared_weak_count **)(shared_weak_owners + 16);
                }
                v782->__shared_weak_owners_ = (uint64_t)v785;
                *(_QWORD *)(*(_QWORD *)(shared_weak_owners + 16)
                          + 8 * (**(_QWORD **)(shared_weak_owners + 16) != shared_weak_owners)) = v782;
                v782->__shared_owners_ = shared_weak_owners;
                *(_QWORD *)(shared_weak_owners + 16) = v782;
                v785 = (std::__shared_weak_count *)v782->__shared_weak_owners_;
                LOBYTE(v782[1].__vftable) = 1;
                LOBYTE(v785[1].__vftable) = 0;
                shared_weak_owners = v785->__shared_owners_;
                v794 = *(std::__shared_weak_count **)shared_weak_owners;
                v785->__shared_owners_ = *(_QWORD *)shared_weak_owners;
                if (v794)
LABEL_1000:
                  v794->__shared_weak_owners_ = (uint64_t)v785;
              }
              else
              {
                *(_BYTE *)(shared_weak_owners + 24) = 1;
                LOBYTE(v785[1].__vftable) = 0;
                shared_weak_owners = v785->__shared_owners_;
                v794 = *(std::__shared_weak_count **)shared_weak_owners;
                v785->__shared_owners_ = *(_QWORD *)shared_weak_owners;
                if (v794)
                  goto LABEL_1000;
              }
              *(_QWORD *)(shared_weak_owners + 16) = v785->__shared_weak_owners_;
              *(_QWORD *)(v785->__shared_weak_owners_ + 8 * (*(_QWORD *)v785->__shared_weak_owners_ != (_QWORD)v785)) = shared_weak_owners;
              *(_QWORD *)shared_weak_owners = v785;
              goto LABEL_1002;
            }
            *(_BYTE *)(shared_weak_owners + 24) = 1;
            v782 = v785;
            LOBYTE(v785[1].__vftable) = v785 == v783;
            *p_get_deleter = 1;
          }
          while (v785 != v783);
        }
        v770 = v1715;
        ++v1716;
        v767 = *(unsigned int *)(v765 + 24);
        v766 = *((unsigned int *)v764 + 6);
LABEL_1004:
        v795 = &v1715;
LABEL_1006:
        v796 = v795;
        if (v770)
        {
          do
          {
            v795 = (std::__shared_weak_count **)v770;
            v797 = HIDWORD(v770[1].__vftable);
            if (v767 == v797)
            {
              v798 = *((unsigned int *)v795 + 8);
              if (v766 < v798)
                goto LABEL_1005;
              _CF = v798 >= v766;
              v799 = v798 == v766;
              v800 = -1;
              if (_CF)
                v800 = 1;
              if (v799)
                v800 = 0;
              if ((v800 & 0x80) == 0)
                goto LABEL_1048;
            }
            else
            {
              if (v767 < v797)
              {
LABEL_1005:
                v770 = *v795;
                goto LABEL_1006;
              }
              _CF = v797 >= v767;
              v801 = -1;
              if (_CF)
                v801 = 1;
              if ((v801 & 0x80) == 0)
                goto LABEL_1048;
            }
            v770 = v795[1];
          }
          while (v770);
          v796 = v795 + 1;
        }
        v802 = (std::__shared_weak_count *)operator new(0x28uLL);
        *(std::__shared_weak_count_vtbl **)((char *)&v802[1].__vftable + 4) = (std::__shared_weak_count_vtbl *)(v767 | (v766 << 32));
        v802->__vftable = 0;
        v802->__shared_owners_ = 0;
        v802->__shared_weak_owners_ = (uint64_t)v795;
        *v796 = v802;
        if (*v1714)
        {
          v1714 = (std::__shared_weak_count **)*v1714;
          v802 = *v796;
        }
        v803 = v1715;
        _ZF = v802 == v1715;
        LOBYTE(v802[1].__vftable) = v802 == v1715;
        if (!_ZF)
        {
          do
          {
            v804 = v802->__shared_weak_owners_;
            if (*(_BYTE *)(v804 + 24))
              break;
            v805 = *(std::__shared_weak_count **)(v804 + 16);
            v806 = v805->__vftable;
            if (v805->__vftable == (std::__shared_weak_count_vtbl *)v804)
            {
              v809 = v805->__shared_owners_;
              if (!v809 || (v810 = *(unsigned __int8 *)(v809 + 24), v807 = (_BYTE *)(v809 + 24), v810))
              {
                if (*(std::__shared_weak_count **)v804 == v802)
                {
                  *(_BYTE *)(v804 + 24) = 1;
                  LOBYTE(v805[1].__vftable) = 0;
                  v813 = *(std::__shared_weak_count_vtbl **)(v804 + 8);
                  v805->__vftable = v813;
                  if (v813)
                    goto LABEL_1040;
                }
                else
                {
                  v811 = *(uint64_t **)(v804 + 8);
                  v812 = *v811;
                  *(_QWORD *)(v804 + 8) = *v811;
                  if (v812)
                  {
                    *(_QWORD *)(v812 + 16) = v804;
                    v805 = *(std::__shared_weak_count **)(v804 + 16);
                  }
                  v811[2] = (uint64_t)v805;
                  *(_QWORD *)(*(_QWORD *)(v804 + 16) + 8 * (**(_QWORD **)(v804 + 16) != v804)) = v811;
                  *v811 = v804;
                  *(_QWORD *)(v804 + 16) = v811;
                  v805 = (std::__shared_weak_count *)v811[2];
                  v804 = (uint64_t)v805->__vftable;
                  *((_BYTE *)v811 + 24) = 1;
                  LOBYTE(v805[1].__vftable) = 0;
                  v813 = *(std::__shared_weak_count_vtbl **)(v804 + 8);
                  v805->__vftable = v813;
                  if (v813)
LABEL_1040:
                    v813->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v805;
                }
                *(_QWORD *)(v804 + 16) = v805->__shared_weak_owners_;
                *(_QWORD *)(v805->__shared_weak_owners_ + 8 * (*(_QWORD *)v805->__shared_weak_owners_ != (_QWORD)v805)) = v804;
                *(_QWORD *)(v804 + 8) = v805;
LABEL_1046:
                v805->__shared_weak_owners_ = v804;
                break;
              }
            }
            else if (!v806 || (v808 = LOBYTE(v806->__get_deleter), v807 = &v806->__get_deleter, v808))
            {
              if (*(std::__shared_weak_count **)v804 == v802)
              {
                v1058 = v802->__shared_owners_;
                *(_QWORD *)v804 = v1058;
                if (v1058)
                {
                  *(_QWORD *)(v1058 + 16) = v804;
                  v805 = *(std::__shared_weak_count **)(v804 + 16);
                }
                v802->__shared_weak_owners_ = (uint64_t)v805;
                *(_QWORD *)(*(_QWORD *)(v804 + 16) + 8 * (**(_QWORD **)(v804 + 16) != v804)) = v802;
                v802->__shared_owners_ = v804;
                *(_QWORD *)(v804 + 16) = v802;
                v805 = (std::__shared_weak_count *)v802->__shared_weak_owners_;
                LOBYTE(v802[1].__vftable) = 1;
                LOBYTE(v805[1].__vftable) = 0;
                v804 = v805->__shared_owners_;
                v814 = *(std::__shared_weak_count **)v804;
                v805->__shared_owners_ = *(_QWORD *)v804;
                if (v814)
LABEL_1044:
                  v814->__shared_weak_owners_ = (uint64_t)v805;
              }
              else
              {
                *(_BYTE *)(v804 + 24) = 1;
                LOBYTE(v805[1].__vftable) = 0;
                v804 = v805->__shared_owners_;
                v814 = *(std::__shared_weak_count **)v804;
                v805->__shared_owners_ = *(_QWORD *)v804;
                if (v814)
                  goto LABEL_1044;
              }
              *(_QWORD *)(v804 + 16) = v805->__shared_weak_owners_;
              *(_QWORD *)(v805->__shared_weak_owners_ + 8 * (*(_QWORD *)v805->__shared_weak_owners_ != (_QWORD)v805)) = v804;
              *(_QWORD *)v804 = v805;
              goto LABEL_1046;
            }
            *(_BYTE *)(v804 + 24) = 1;
            v802 = v805;
            LOBYTE(v805[1].__vftable) = v805 == v803;
            *v807 = 1;
          }
          while (v805 != v803);
        }
        ++v1716;
LABEL_1048:
        if (!*(_BYTE *)(v765 + 160)
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/MapOptimizationUtil.cpp", 258, (uint64_t)"edge.T_source_to_neighbor", 25, (uint64_t)"Edge transfomation not exist", 28, (void (*)(void **))sub_21023DDB0)|| !*(_BYTE *)(v765 + 456)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/MapOptimizationUtil.cpp", 260, (uint64_t)"edge.JtJ_source_to_neighbor", 27, (uint64_t)"Edge transfomation not exist", 28, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if (!*(_BYTE *)(v765 + 160) || !*(_BYTE *)(v765 + 456))
          sub_20E866B34();
        v815 = v764[3];
        v816 = *(_QWORD *)(v765 + 24);
        memcpy(v1806, (const void *)(v765 + 168), sizeof(v1806));
        v817 = *(_OWORD *)(v765 + 112);
        v1802 = *(_OWORD *)(v765 + 96);
        v1803 = v817;
        v818 = *(__n128 *)(v765 + 144);
        v1804 = *(_OWORD *)(v765 + 128);
        v1805 = v818;
        v819 = *(_OWORD *)(v765 + 48);
        v1798 = *(_OWORD *)(v765 + 32);
        v1799 = v819;
        v839 = *(__n128 *)(v765 + 64);
        v840 = *(__n128 *)(v765 + 80);
        v1800 = v839;
        v1801 = v840;
        v820 = *(double *)(v765 + 168);
        v822 = *(double *)(v765 + 216);
        v821 = *(double *)(v765 + 224);
        v823 = *(double *)(v765 + 264);
        v824 = *(double *)(v765 + 272);
        v825 = *(double *)(v765 + 280);
        v826 = *(double *)(v765 + 312);
        v827 = *(double *)(v765 + 320);
        v829 = *(double *)(v765 + 328);
        v828 = *(double *)(v765 + 336);
        v831 = *(double *)(v765 + 360);
        v830 = *(double *)(v765 + 368);
        v833 = *(double *)(v765 + 376);
        v832.n128_u64[0] = *(_QWORD *)(v765 + 384);
        v834.n128_u64[0] = *(_QWORD *)(v765 + 392);
        v836.n128_u64[0] = *(_QWORD *)(v765 + 408);
        v835.n128_u64[0] = *(_QWORD *)(v765 + 416);
        v838.n128_u64[0] = *(_QWORD *)(v765 + 424);
        v837.n128_u64[0] = *(_QWORD *)(v765 + 432);
        v840.n128_u64[0] = *(_QWORD *)(v765 + 440);
        v839.n128_u64[0] = *(_QWORD *)(v765 + 448);
        v1723 = 0;
        v1722[2] = 0;
        v1725 = 0;
        v1724 = 0;
        v841 = *(_QWORD **)(v1721 + 5728);
        v1711 = (int64x2_t *)v1721;
        v842 = *(_QWORD **)(v1721 + 5736);
        if (v841 == v842)
        {
          v843 = *(double *)(v1721 + 5728);
        }
        else
        {
          v843 = *(double *)(v1721 + 5736);
          if (*(v842 - 111) >= (unint64_t)v1705)
          {
            v844 = 0xB195E8EFDB195E8FLL * (v842 - v841);
            v845 = *(_QWORD **)(v1721 + 5728);
            do
            {
              v846 = v844 >> 1;
              v847 = &v845[111 * (v844 >> 1)];
              v848 = *v847;
              v849 = v847 + 111;
              v844 += ~(v844 >> 1);
              if (v848 < v1705)
                v845 = v849;
              else
                v844 = v846;
            }
            while (v844);
            v843 = *(double *)(v1721 + 5736);
            if (v845 != v842)
            {
              v843 = *(double *)&v845;
              if (*v845 == v1705)
              {
LABEL_1110:
                v910 = 1;
                v911 = v1723;
                if (!v1723)
                  goto LABEL_1116;
                goto LABEL_1113;
              }
            }
          }
        }
        *(_QWORD *)oslog = v1705;
        memset(&oslog[24], 0, 40);
        *(_QWORD *)&oslog[16] = sqrt(v820);
        *(double *)&oslog[64] = v822 / *(double *)&oslog[16];
        memset(&oslog[80], 0, 32);
        *(_QWORD *)&oslog[72] = sqrt(v821 - *(double *)&oslog[64] * *(double *)&oslog[64]);
        *(double *)&oslog[112] = v823 / *(double *)&oslog[16];
        *(double *)&oslog[120] = (v824 - v822 / *(double *)&oslog[16] * (v823 / *(double *)&oslog[16]))
                               / *(double *)&oslog[72];
        *(_QWORD *)&oslog[128] = sqrt(v825- *(double *)&oslog[112] * *(double *)&oslog[112]- *(double *)&oslog[120] * *(double *)&oslog[120]);
        memset(&oslog[136], 0, 24);
        *(double *)&oslog[160] = v826 / *(double *)&oslog[16];
        *(double *)&oslog[168] = (v827 - v822 / *(double *)&oslog[16] * (v826 / *(double *)&oslog[16]))
                               / *(double *)&oslog[72];
        *(double *)&oslog[176] = (v829
                                - v823 / *(double *)&oslog[16] * (v826 / *(double *)&oslog[16])
                                - *(double *)&oslog[120] * *(double *)&oslog[168])
                               / *(double *)&oslog[128];
        *(_QWORD *)&oslog[184] = sqrt(v828- *(double *)&oslog[160] * *(double *)&oslog[160]- *(double *)&oslog[168] * *(double *)&oslog[168]- *(double *)&oslog[176] * *(double *)&oslog[176]);
        *(_QWORD *)&oslog[192] = 0;
        *(_QWORD *)&oslog[200] = 0;
        *(double *)&oslog[208] = v831 / *(double *)&oslog[16];
        *(double *)&oslog[216] = (v830 - v822 / *(double *)&oslog[16] * (v831 / *(double *)&oslog[16]))
                               / *(double *)&oslog[72];
        *(double *)&oslog[224] = (v833
                                - v823 / *(double *)&oslog[16] * (v831 / *(double *)&oslog[16])
                                - *(double *)&oslog[120] * *(double *)&oslog[216])
                               / *(double *)&oslog[128];
        *(double *)&oslog[232] = (v832.n128_f64[0]
                                - v826 / *(double *)&oslog[16] * (v831 / *(double *)&oslog[16])
                                - *(double *)&oslog[168] * *(double *)&oslog[216]
                                - *(double *)&oslog[176] * *(double *)&oslog[224])
                               / *(double *)&oslog[184];
        *(_QWORD *)&oslog[240] = sqrt(v834.n128_f64[0]- *(double *)&oslog[208] * *(double *)&oslog[208]- *(double *)&oslog[216] * *(double *)&oslog[216]- *(double *)&oslog[224] * *(double *)&oslog[224]- *(double *)&oslog[232] * *(double *)&oslog[232]);
        *(_QWORD *)&oslog[248] = 0;
        *(double *)&oslog[256] = v836.n128_f64[0] / *(double *)&oslog[16];
        *(double *)&oslog[264] = (v835.n128_f64[0]
                                - v822 / *(double *)&oslog[16] * (v836.n128_f64[0] / *(double *)&oslog[16]))
                               / *(double *)&oslog[72];
        *(double *)&oslog[272] = (v838.n128_f64[0]
                                - v823 / *(double *)&oslog[16] * (v836.n128_f64[0] / *(double *)&oslog[16])
                                - *(double *)&oslog[120] * *(double *)&oslog[264])
                               / *(double *)&oslog[128];
        *(double *)&oslog[280] = (v837.n128_f64[0]
                                - v826 / *(double *)&oslog[16] * (v836.n128_f64[0] / *(double *)&oslog[16])
                                - *(double *)&oslog[168] * *(double *)&oslog[264]
                                - *(double *)&oslog[176] * *(double *)&oslog[272])
                               / *(double *)&oslog[184];
        *(double *)&oslog[288] = (v840.n128_f64[0]
                                - v831 / *(double *)&oslog[16] * (v836.n128_f64[0] / *(double *)&oslog[16])
                                - *(double *)&oslog[216] * *(double *)&oslog[264]
                                - *(double *)&oslog[224] * *(double *)&oslog[272]
                                - *(double *)&oslog[232] * *(double *)&oslog[280])
                               / *(double *)&oslog[240];
        *(_QWORD *)&oslog[296] = sqrt(v839.n128_f64[0]- *(double *)&oslog[256] * *(double *)&oslog[256]- *(double *)&oslog[264] * *(double *)&oslog[264]- *(double *)&oslog[272] * *(double *)&oslog[272]- *(double *)&oslog[280] * *(double *)&oslog[280]- *(double *)&oslog[288] * *(double *)&oslog[288]);
        memcpy(&oslog[304], v1806, 0x120uLL);
        v1812 = v1802;
        v1813 = v1803;
        v1814 = v1804;
        v1815 = v1805;
        v1808 = v1798;
        v1809 = v1799;
        v839 = v1800;
        v840 = v1801;
        v1810 = v1800;
        v1811 = v1801;
        v850 = 1;
        v1816 = 1;
        v1817 = 0uLL;
        v1826 = 0;
        v1827 = 0;
        v1824 = 0xBFF0000000000000;
        v1825 = 0;
        v1828 = 0;
        v851 = (int64x2_t *)v1721;
        v852 = *(char **)(v1721 + 4840);
        v853 = *(char **)(v1721 + 4848);
        v854 = v853 - v852;
        if (v853 == v852)
          goto LABEL_1104;
        v855 = (int64x2_t *)(v1721 + 5808);
        v856 = v854 >> 4;
        v857 = *(char **)(v1721 + 4840);
        v858 = v854 >> 4;
        do
        {
          v859 = v858 >> 1;
          v860 = (unsigned int *)&v857[16 * (v858 >> 1)];
          v862 = *v860;
          v861 = (char *)(v860 + 4);
          v858 += ~(v858 >> 1);
          if (v862 < v815)
            v857 = v861;
          else
            v858 = v859;
        }
        while (v858);
        if (v857 == v853 || *(_DWORD *)v857 != (_DWORD)v815)
          goto LABEL_1103;
        v1662 = v841;
        v863 = *((_QWORD *)v857 + 1);
        *(_QWORD *)&v1817 = v863;
        ++*(_DWORD *)(*((_QWORD *)v857 + 1) + 8);
        do
        {
          v864 = v856 >> 1;
          v865 = (unsigned int *)&v852[16 * (v856 >> 1)];
          v867 = *v865;
          v866 = (char *)(v865 + 4);
          v856 += ~(v856 >> 1);
          if (v867 < v816)
            v852 = v866;
          else
            v856 = v864;
        }
        while (v856);
        if (v852 == v853 || *(_DWORD *)v852 != (_DWORD)v816)
        {
          if (v863)
            --*(_DWORD *)(v863 + 8);
          goto LABEL_1103;
        }
        v868 = *((_QWORD *)v852 + 1);
        *((_QWORD *)&v1817 + 1) = v868;
        ++*(_DWORD *)(*((_QWORD *)v852 + 1) + 8);
        if (!*(_BYTE *)(v863 + 20) && !*(_BYTE *)(v868 + 20))
        {
          --*(_DWORD *)(v863 + 8);
          --*(_DWORD *)(v868 + 8);
LABEL_1103:
          v850 = 1;
LABEL_1104:
          v907 = v1725;
          if (!v1725)
            goto LABEL_1109;
          goto LABEL_1105;
        }
        object[0] = (void *)v1705;
        *(_OWORD *)&object[1] = *(_OWORD *)oslog;
        memcpy(&object[3], &oslog[16], 0x120uLL);
        memcpy(&object[39], &oslog[304], 0x120uLL);
        v1734 = v1812;
        v1735 = v1813;
        v1736 = v1814;
        v1737 = v1815;
        v1730 = v1808;
        v1731 = v1809;
        v1732 = v1810;
        v1733 = v1811;
        v1738 = 1;
        v1739 = v1817;
        v1740 = v1818;
        v1741 = v1819;
        v1742 = v1820;
        v1743 = v1821;
        v1744 = v1822;
        v1745 = v1823;
        v1746 = v1824;
        v1747 = v1825;
        v1748 = 0uLL;
        v1826 = 0;
        v1827 = 0;
        v1749 = 0;
        if (v842 == *(_QWORD **)&v843 || **(_QWORD **)&v843 != v1705)
          break;
LABEL_1397:
        v855->i8[2] = 0;
        v855->i8[0] = 0;
        v840 = (__n128)xmmword_2103B2300;
        v839 = (__n128)vaddq_s64(v851[362], (int64x2_t)xmmword_2103B2300);
        v851[362] = (int64x2_t)v839;
        v1123 = v1827;
        if (!v1827)
          goto LABEL_1401;
        v1124 = (unint64_t *)&v1827->__shared_owners_;
        do
          v1125 = __ldaxr(v1124);
        while (__stlxr(v1125 - 1, v1124));
        if (!v1125)
        {
          ((void (*)(std::__shared_weak_count *))v1123->__on_zero_shared)(v1123);
          std::__shared_weak_count::__release_weak(v1123);
          v850 = 0;
          v907 = v1725;
          if (!v1725)
            goto LABEL_1109;
        }
        else
        {
LABEL_1401:
          v850 = 0;
          v907 = v1725;
          if (!v1725)
            goto LABEL_1109;
        }
LABEL_1105:
        v908 = (unint64_t *)&v907->__shared_owners_;
        do
          v909 = __ldaxr(v908);
        while (__stlxr(v909 - 1, v908));
        if (!v909)
        {
          ((void (*)(std::__shared_weak_count *))v907->__on_zero_shared)(v907);
          std::__shared_weak_count::__release_weak(v907);
        }
LABEL_1109:
        if ((v850 & 1) != 0)
          goto LABEL_1110;
        v910 = 0;
        v851[411].i8[12] = 0;
        v851[411].i32[2] = 0;
        v911 = v1723;
        if (!v1723)
          goto LABEL_1116;
LABEL_1113:
        v912 = (unint64_t *)&v911->__shared_owners_;
        do
          v913 = __ldaxr(v912);
        while (__stlxr(v913 - 1, v912));
        if (v913)
        {
LABEL_1116:
          if (v910)
            goto LABEL_1117;
          goto LABEL_942;
        }
        ((void (*)(std::__shared_weak_count *, __n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128, double, double))v911->__on_zero_shared)(v911, v839, v840, v837, v838, v835, v836, v834, v832, *(double *)&v1656, v1657);
        std::__shared_weak_count::__release_weak(v911);
        if (v910)
        {
LABEL_1117:
          v914 = MEMORY[0x24BEDB858];
          v915 = (void *)(MEMORY[0x24BEDB858] + 104);
          object[16] = (void *)(MEMORY[0x24BEDB858] + 104);
          v916 = (void *)(MEMORY[0x24BEDB858] + 64);
          object[2] = (void *)(MEMORY[0x24BEDB858] + 64);
          object[0] = v1680;
          *(void **)((char *)object + *((_QWORD *)v1680 - 3)) = v1679;
          object[1] = 0;
          v917 = (std::ios_base *)((char *)object + *((_QWORD *)object[0] - 3));
          std::ios_base::init(v917, &object[3]);
          v917[1].__vftable = 0;
          v917[1].__fmtflags_ = -1;
          object[2] = v1677;
          *(void **)((char *)&object[2] + *((_QWORD *)v1677 - 3)) = v1675;
          object[0] = v1672;
          *(void **)((char *)object + *((_QWORD *)v1672 - 3)) = v1674;
          object[16] = v915;
          object[0] = (void *)(v914 + 24);
          object[2] = v916;
          std::streambuf::basic_streambuf();
          object[3] = v1669;
          memset(&object[11], 0, 32);
          LODWORD(object[15]) = 24;
          v918 = (char *)v1711[302].i64[1];
          v919 = (char *)v1711[303].i64[0];
          v920 = v918;
          if (v919 != v918)
          {
            v921 = (v919 - v918) >> 4;
            v920 = (char *)v1711[302].i64[1];
            do
            {
              v922 = v921 >> 1;
              v923 = (unsigned int *)&v920[16 * (v921 >> 1)];
              v925 = *v923;
              v924 = (char *)(v923 + 4);
              v921 += ~(v921 >> 1);
              if (v925 < v816)
                v920 = v924;
              else
                v921 = v922;
            }
            while (v921);
          }
          if (v920 == v919 || *(_DWORD *)v920 != (_DWORD)v816)
          {
            v931 = 1;
            v932 = v919 - v918;
            if (v919 == v918)
              goto LABEL_1172;
          }
          else
          {
            v926 = sub_20E86A980(&object[2], (uint64_t)"error: landmark variable ", 25);
            sub_20F622E88((uint64_t)v1794);
            if (v1794[1].f64[0] >= 0.0)
              v927 = (uint64_t)v1794;
            else
              v927 = *(_QWORD *)&v1794[0].f64[0];
            if (v1794[1].f64[0] >= 0.0)
              v928 = HIBYTE(v1794[1].f64[0]);
            else
              v928 = *(_QWORD *)&v1794[0].f64[1];
            v929 = sub_20E86A980(v926, v927, v928);
            sub_20E86A980(v929, (uint64_t)" with ID ", 9);
            v930 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v930, (uint64_t)" was not found.\n", 16);
            if (SHIBYTE(v1794[1].f64[0]) < 0)
            {
              operator delete(*(void **)&v1794[0].f64[0]);
              v931 = 0;
              v918 = (char *)v1711[302].i64[1];
              v919 = (char *)v1711[303].i64[0];
              v932 = v919 - v918;
              if (v919 == v918)
                goto LABEL_1172;
            }
            else
            {
              v931 = 0;
              v918 = (char *)v1711[302].i64[1];
              v919 = (char *)v1711[303].i64[0];
              v932 = v919 - v918;
              if (v919 == v918)
                goto LABEL_1172;
            }
          }
          v933 = v932 >> 4;
          v934 = v918;
          v935 = v933;
          do
          {
            v936 = v935 >> 1;
            v937 = (unsigned int *)&v934[16 * (v935 >> 1)];
            v939 = *v937;
            v938 = (char *)(v937 + 4);
            v935 += ~(v935 >> 1);
            if (v939 < v815)
              v934 = v938;
            else
              v935 = v936;
          }
          while (v935);
          if (v934 == v919 || *(_DWORD *)v934 != (_DWORD)v815)
          {
LABEL_1172:
            v961 = sub_20E86A980(&object[2], (uint64_t)"error: variable ", 16);
            sub_20F622E88((uint64_t)v1794);
            if (v1794[1].f64[0] >= 0.0)
              v962 = (uint64_t)v1794;
            else
              v962 = *(_QWORD *)&v1794[0].f64[0];
            if (v1794[1].f64[0] >= 0.0)
              v963 = HIBYTE(v1794[1].f64[0]);
            else
              v963 = *(_QWORD *)&v1794[0].f64[1];
            v964 = sub_20E86A980(v961, v962, v963);
            sub_20E86A980(v964, (uint64_t)" with ID ", 9);
            v965 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v965, (uint64_t)" not found\n", 11);
            if (SHIBYTE(v1794[1].f64[0]) < 0)
              operator delete(*(void **)&v1794[0].f64[0]);
            v931 = 0;
            v955 = 0;
            v956 = (char *)v1711[302].i64[1];
            v957 = (char *)v1711[303].i64[0];
            v958 = v956;
            v959 = v957 - v956;
            if (v957 == v956)
              goto LABEL_1186;
          }
          else
          {
            do
            {
              v940 = v933 >> 1;
              v941 = (unsigned int *)&v918[16 * (v933 >> 1)];
              v943 = *v941;
              v942 = (char *)(v941 + 4);
              v933 += ~(v933 >> 1);
              if (v943 < v815)
                v918 = v942;
              else
                v933 = v940;
            }
            while (v933);
            if (v918 == v919 || *(_DWORD *)v918 != (_DWORD)v815)
              v918 = v919;
            v944 = *((_QWORD *)v918 + 1);
            v945 = sub_20E86A980(&object[2], (uint64_t)"debug: variable ", 16);
            sub_20F622E88((uint64_t)v1794);
            if (v1794[1].f64[0] >= 0.0)
              v946 = (uint64_t)v1794;
            else
              v946 = *(_QWORD *)&v1794[0].f64[0];
            if (v1794[1].f64[0] >= 0.0)
              v947 = HIBYTE(v1794[1].f64[0]);
            else
              v947 = *(_QWORD *)&v1794[0].f64[1];
            v948 = sub_20E86A980(v945, v946, v947);
            sub_20E86A980(v948, (uint64_t)" with ID ", 9);
            v949 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v949, (uint64_t)" found (", 8);
            v950 = (_QWORD *)std::ostream::operator<<();
            v951 = sub_20E86A980(v950, (uint64_t)", ", 2);
            if (*(_BYTE *)(v944 + 20))
              v952 = "free";
            else
              v952 = "fixed";
            if (*(_BYTE *)(v944 + 20))
              v953 = 4;
            else
              v953 = 5;
            v954 = sub_20E86A980(v951, (uint64_t)v952, v953);
            sub_20E86A980(v954, (uint64_t)")\n", 2);
            if (SHIBYTE(v1794[1].f64[0]) < 0)
              operator delete(*(void **)&v1794[0].f64[0]);
            v955 = *(unsigned __int8 *)(v944 + 20);
            v956 = (char *)v1711[302].i64[1];
            v957 = (char *)v1711[303].i64[0];
            v958 = v956;
            v959 = v957 - v956;
            if (v957 == v956)
            {
LABEL_1186:
              if (v958 != v957 && *(_DWORD *)v958 == (_DWORD)v816)
              {
                if (v957 != v956)
                {
                  v971 = (v957 - v956) >> 4;
                  do
                  {
                    v972 = v971 >> 1;
                    v973 = (unsigned int *)&v956[16 * (v971 >> 1)];
                    v975 = *v973;
                    v974 = (char *)(v973 + 4);
                    v971 += ~(v971 >> 1);
                    if (v975 < v816)
                      v956 = v974;
                    else
                      v971 = v972;
                  }
                  while (v971);
                }
                if (v956 == v957 || *(_DWORD *)v956 != (_DWORD)v816)
                  v956 = v957;
                v976 = *((_QWORD *)v956 + 1);
                v977 = sub_20E86A980(&object[2], (uint64_t)"debug: variable ", 16);
                sub_20F622E88((uint64_t)v1794);
                if (v1794[1].f64[0] >= 0.0)
                  v978 = (uint64_t)v1794;
                else
                  v978 = *(_QWORD *)&v1794[0].f64[0];
                if (v1794[1].f64[0] >= 0.0)
                  v979 = HIBYTE(v1794[1].f64[0]);
                else
                  v979 = *(_QWORD *)&v1794[0].f64[1];
                v980 = sub_20E86A980(v977, v978, v979);
                sub_20E86A980(v980, (uint64_t)" with ID ", 9);
                v981 = (_QWORD *)std::ostream::operator<<();
                sub_20E86A980(v981, (uint64_t)" found (", 8);
                v982 = (_QWORD *)std::ostream::operator<<();
                v983 = sub_20E86A980(v982, (uint64_t)", ", 2);
                if (*(_BYTE *)(v976 + 20))
                  v984 = "free";
                else
                  v984 = "fixed";
                if (*(_BYTE *)(v976 + 20))
                  v985 = 4;
                else
                  v985 = 5;
                v986 = sub_20E86A980(v983, (uint64_t)v984, v985);
                sub_20E86A980(v986, (uint64_t)")\n", 2);
                if (SHIBYTE(v1794[1].f64[0]) < 0)
                  operator delete(*(void **)&v1794[0].f64[0]);
                v955 |= *(unsigned __int8 *)(v976 + 20);
                v987 = (char *)v1711[358].i64[0];
                v988 = (char *)v1711[358].i64[1];
                v989 = v988 - v987;
                if (v988 == v987)
                  goto LABEL_1238;
LABEL_1222:
                v995 = 0xB195E8EFDB195E8FLL * (v989 >> 3);
                do
                {
                  v996 = v995 >> 1;
                  v997 = (unint64_t *)&v987[888 * (v995 >> 1)];
                  v998 = *v997;
                  v999 = (char *)(v997 + 111);
                  v995 += ~(v995 >> 1);
                  if (v998 < v1705)
                    v987 = v999;
                  else
                    v995 = v996;
                }
                while (v995);
                if (v988 != v987 && *(_QWORD *)v987 == v1705)
                {
                  v1000 = sub_20E86A980(&object[2], (uint64_t)"error: factor ", 14);
                  sub_20F626DE0((uint64_t)v1794);
                  if (v1794[1].f64[0] >= 0.0)
                    v1001 = (uint64_t)v1794;
                  else
                    v1001 = *(_QWORD *)&v1794[0].f64[0];
                  if (v1794[1].f64[0] >= 0.0)
                    v1002 = HIBYTE(v1794[1].f64[0]);
                  else
                    v1002 = *(_QWORD *)&v1794[0].f64[1];
                  v1003 = sub_20E86A980(v1000, v1001, v1002);
                  sub_20E86A980(v1003, (uint64_t)" with the same ID ", 18);
                  v1004 = (_QWORD *)std::ostream::operator<<();
                  sub_20E86A980(v1004, (uint64_t)" already exists.\n", 17);
                  if (SHIBYTE(v1794[1].f64[0]) < 0)
                    operator delete(*(void **)&v1794[0].f64[0]);
                  v931 = 0;
                }
                goto LABEL_1238;
              }
              v990 = sub_20E86A980(&object[2], (uint64_t)"error: variable ", 16);
              sub_20F622E88((uint64_t)v1794);
              if (v1794[1].f64[0] >= 0.0)
                v991 = (uint64_t)v1794;
              else
                v991 = *(_QWORD *)&v1794[0].f64[0];
              if (v1794[1].f64[0] >= 0.0)
                v992 = HIBYTE(v1794[1].f64[0]);
              else
                v992 = *(_QWORD *)&v1794[0].f64[1];
              v993 = sub_20E86A980(v990, v991, v992);
              sub_20E86A980(v993, (uint64_t)" with ID ", 9);
              v994 = (_QWORD *)std::ostream::operator<<();
              sub_20E86A980(v994, (uint64_t)" not found\n", 11);
              if (SHIBYTE(v1794[1].f64[0]) < 0)
                operator delete(*(void **)&v1794[0].f64[0]);
              v931 = 0;
              v987 = (char *)v1711[358].i64[0];
              v988 = (char *)v1711[358].i64[1];
              v989 = v988 - v987;
              if (v988 != v987)
                goto LABEL_1222;
LABEL_1238:
              if (v955)
              {
                v1005 = v931 != 0;
                v1006 = (char)object[15];
                if (((uint64_t)object[15] & 0x10) == 0)
                  goto LABEL_1240;
LABEL_1250:
                v1014 = object[14];
                v1015 = &object[8];
                if (object[14] < object[9])
                {
                  object[14] = object[9];
                  v1014 = object[9];
                  v1015 = &object[8];
                }
LABEL_1253:
                v1016 = *v1015;
                v1007 = v1014 - (_BYTE *)*v1015;
                if (v1007 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v1007 >= 0x17)
                {
                  v1017 = (v1007 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v1007 | 7) != 0x17)
                    v1017 = v1007 | 7;
                  v1018 = v1017 + 1;
                  v1008 = operator new(v1017 + 1);
                  *(_QWORD *)&v1794[1].f64[0] = v1018 | 0x8000000000000000;
                  *(_QWORD *)&v1794[0].f64[0] = v1008;
                  *(_QWORD *)&v1794[0].f64[1] = v1007;
                }
                else
                {
                  HIBYTE(v1794[1].f64[0]) = (_BYTE)v1014 - *(_BYTE *)v1015;
                  v1008 = v1794;
                  if (!v1007)
                    goto LABEL_1261;
                }
                memmove(v1008, v1016, v1007);
                goto LABEL_1261;
              }
              v1009 = sub_20E86A980(&object[2], (uint64_t)"error: factor ", 14);
              sub_20F626DE0((uint64_t)v1794);
              if (v1794[1].f64[0] >= 0.0)
                v1010 = (uint64_t)v1794;
              else
                v1010 = *(_QWORD *)&v1794[0].f64[0];
              if (v1794[1].f64[0] >= 0.0)
                v1011 = HIBYTE(v1794[1].f64[0]);
              else
                v1011 = *(_QWORD *)&v1794[0].f64[1];
              v1012 = sub_20E86A980(v1009, v1010, v1011);
              sub_20E86A980(v1012, (uint64_t)" with ID ", 9);
              v1013 = (_QWORD *)std::ostream::operator<<();
              sub_20E86A980(v1013, (uint64_t)" cannot be added: all variables are fixed.\n", 43);
              if (SHIBYTE(v1794[1].f64[0]) < 0)
              {
                operator delete(*(void **)&v1794[0].f64[0]);
                v1005 = 0;
                v1006 = (char)object[15];
                if (((uint64_t)object[15] & 0x10) != 0)
                  goto LABEL_1250;
              }
              else
              {
                v1005 = 0;
                v1006 = (char)object[15];
                if (((uint64_t)object[15] & 0x10) != 0)
                  goto LABEL_1250;
              }
LABEL_1240:
              if ((v1006 & 8) != 0)
              {
                v1014 = object[7];
                v1015 = &object[5];
                goto LABEL_1253;
              }
              v1007 = 0;
              HIBYTE(v1794[1].f64[0]) = 0;
              v1008 = v1794;
LABEL_1261:
              *((_BYTE *)v1008 + v1007) = 0;
              *(float64x2_t *)oslog = v1794[0];
              *(float64_t *)&oslog[16] = v1794[1].f64[0];
              oslog[24] = v1005;
              object[0] = v1667;
              *(void **)((char *)object + *((_QWORD *)v1667 - 3)) = v1666;
              object[2] = v1665;
              object[3] = (void *)(MEMORY[0x24BEDB848] + 16);
              if (SHIBYTE(object[13]) < 0)
                operator delete(object[11]);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x212BC6290](&object[16]);
              v1019 = oslog[23];
              if ((oslog[23] & 0x80000000) != 0)
              {
                v1022 = *(_QWORD *)&oslog[8];
                v1023 = (*(_QWORD *)&oslog[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if (v1023 - *(_QWORD *)&oslog[8] < 0x5B)
                {
                  v1020 = *(_QWORD *)&oslog[8] + 91;
                  if (0x7FFFFFFFFFFFFFF7 - (*(_QWORD *)&oslog[16] & 0x7FFFFFFFFFFFFFFFuLL) < *(_QWORD *)&oslog[8]
                                                                                              + 91
                                                                                              - v1023)
                    sub_20E860B7C();
                  v1021 = *(_BYTE **)oslog;
                  v1024 = 0x7FFFFFFFFFFFFFF7;
                  if (v1023 < 0x3FFFFFFFFFFFFFF3)
                  {
LABEL_1269:
                    v1025 = 2 * v1023;
                    if (v1020 > 2 * v1023)
                      v1025 = v1020;
                    if (v1025 >= 0x17)
                    {
                      v1030 = (v1025 & 0xFFFFFFFFFFFFFFF8) + 8;
                      v1031 = v1025 | 7;
                      if (v1031 == 23)
                        v1031 = v1030;
                      v1024 = v1031 + 1;
                    }
                    else
                    {
                      v1024 = 23;
                    }
                  }
                  v1032 = (char *)operator new(v1024);
                  v1033 = v1032;
                  qmemcpy(v1032, "Failed to add a factor into the linear system. This could be due to duplicate factor IDs ('", 91);
                  if (v1022)
                    memmove(v1032 + 91, v1021, v1022);
                  if (v1023 != 22)
                    operator delete(v1021);
                  *(_QWORD *)&oslog[16] = v1024 | 0x8000000000000000;
                  *(_QWORD *)oslog = v1033;
                  *(_QWORD *)&oslog[8] = v1020;
                  v1034 = &v1033[v1020];
                  goto LABEL_1295;
                }
                v1026 = *(char **)oslog;
                if (*(_QWORD *)&oslog[8])
                  goto LABEL_1274;
              }
              else
              {
                if (oslog[23] < 0x17u)
                {
                  v1020 = oslog[23] + 91;
                  v1021 = oslog;
                  v1022 = oslog[23];
                  v1023 = 22;
                  goto LABEL_1269;
                }
                v1026 = oslog;
                v1022 = oslog[23];
                if (oslog[23])
                {
LABEL_1274:
                  v1027 = &v1026[v1022] <= "Failed to add a factor into the linear system. This could be due to duplicate factor IDs ('"
                       || v1026 > "Failed to add a factor into the linear system. This could be due to duplicate factor IDs ('";
                  v1028 = 91;
                  if (v1027)
                    v1028 = 0;
                  v1029 = &aFailedToAddAFa[v1028];
                  memmove(v1026 + 91, v1026, v1022);
LABEL_1291:
                  *((_OWORD *)v1026 + 2) = *((_OWORD *)v1029 + 2);
                  *((_OWORD *)v1026 + 3) = *((_OWORD *)v1029 + 3);
                  *((_OWORD *)v1026 + 4) = *((_OWORD *)v1029 + 4);
                  *(_OWORD *)(v1026 + 75) = *(_OWORD *)(v1029 + 75);
                  *(_OWORD *)v1026 = *(_OWORD *)v1029;
                  *((_OWORD *)v1026 + 1) = *((_OWORD *)v1029 + 1);
                  v1035 = v1022 + 91;
                  if (v1019 < 0)
                    *(_QWORD *)&oslog[8] = v1022 + 91;
                  else
                    oslog[23] = v1035 & 0x7F;
                  v1034 = &v1026[v1035];
LABEL_1295:
                  *v1034 = 0;
                  *(_QWORD *)&v1836 = *(_QWORD *)&oslog[16];
                  v1835 = *(_OWORD *)oslog;
                  memset(oslog, 0, 24);
                  if (SBYTE7(v1836) < 0)
                  {
                    v1036 = *((_QWORD *)&v1835 + 1);
                    v1039 = (v1836 & 0x7FFFFFFFFFFFFFFFLL) - 1;
                    if (v1039 - *((_QWORD *)&v1835 + 1) >= 3)
                    {
                      v1042 = (__int128 *)v1835;
                      goto LABEL_1316;
                    }
                    v1037 = *((_QWORD *)&v1835 + 1) + 3;
                    if (0x7FFFFFFFFFFFFFF7 - ((unint64_t)v1836 & 0x7FFFFFFFFFFFFFFFLL) < *((_QWORD *)&v1835 + 1)
                                                                                                 + 3
                                                                                                 - v1039)
LABEL_2008:
                      sub_20E860B7C();
                    v1038 = (__int128 *)v1835;
                    v1040 = 0x7FFFFFFFFFFFFFF7;
                    if (v1039 < 0x3FFFFFFFFFFFFFF3)
                    {
LABEL_1302:
                      v1041 = 2 * v1039;
                      if (v1037 > 2 * v1039)
                        v1041 = v1037;
                      if (v1041 >= 0x17)
                      {
                        v1043 = (v1041 & 0xFFFFFFFFFFFFFFF8) + 8;
                        v1044 = v1041 | 7;
                        if (v1044 == 23)
                          v1044 = v1043;
                        v1040 = v1044 + 1;
                      }
                      else
                      {
                        v1040 = 23;
                      }
                    }
                    v1045 = (char *)operator new(v1040);
                    v1046 = v1045;
                    if (v1036)
                      memmove(v1045, v1038, v1036);
                    v1047 = &v1046[v1036];
                    v1047[2] = 46;
                    *(_WORD *)v1047 = 10535;
                    if (v1039 != 22)
                      operator delete(v1038);
                    *(_QWORD *)&v1836 = v1040 | 0x8000000000000000;
                    *(_QWORD *)&v1835 = v1046;
                    *((_QWORD *)&v1835 + 1) = v1037;
                    v1048 = &v1046[v1037];
                  }
                  else
                  {
                    v1036 = BYTE7(v1836);
                    if ((unint64_t)BYTE7(v1836) - 20 < 3)
                    {
                      if (BYTE7(v1836) <= 0x12u)
                        goto LABEL_2008;
                      v1037 = BYTE7(v1836) + 3;
                      v1038 = &v1835;
                      v1039 = 22;
                      goto LABEL_1302;
                    }
                    v1042 = &v1835;
LABEL_1316:
                    v1049 = (char *)v1042 + v1036;
                    v1049[2] = 46;
                    *(_WORD *)v1049 = 10535;
                    v1050 = v1036 + 3;
                    if (SBYTE7(v1836) < 0)
                      *((_QWORD *)&v1835 + 1) = v1036 + 3;
                    else
                      BYTE7(v1836) = v1050 & 0x7F;
                    v1048 = (char *)v1042 + v1050;
                  }
                  *v1048 = 0;
                  v1843[2] = (void *)v1836;
                  *(_OWORD *)v1843 = v1835;
                  *(_QWORD *)&v1836 = 0;
                  v1835 = 0uLL;
                  if (SHIBYTE(v1843[2]) >= 0)
                    v1051 = v1843;
                  else
                    v1051 = (void **)v1843[0];
                  if (SHIBYTE(v1843[2]) >= 0)
                    v1052 = HIBYTE(v1843[2]);
                  else
                    v1052 = (uint64_t)v1843[1];
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 232, (uint64_t)"ret.second", 10, (uint64_t)v1051, v1052, (void (*)(void **))sub_21023DDB0);
                  v1053 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v1053 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v1054 = qword_254A6DE40;
                    for (m = qword_254A6DE48; v1054 != m; v1054 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, void **, uint64_t))v1054)(*(_QWORD *)(v1054 + 8), "ret.second", 10, v1051, v1052);
                  }
                  v1056 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v1056 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v1057 = byte_254A6DE68;
                  if (byte_254A6DE68)
                    qword_254A6DE58(unk_254A6DE60, "ret.second", 10, v1051, v1052);
                  if (SHIBYTE(v1843[2]) < 0)
                  {
                    operator delete(v1843[0]);
                    if ((SBYTE7(v1836) & 0x80000000) == 0)
                      goto LABEL_1338;
LABEL_940:
                    operator delete((void *)v1835);
                    if ((oslog[23] & 0x80000000) != 0)
                      goto LABEL_1339;
                  }
                  else
                  {
                    if (SBYTE7(v1836) < 0)
                      goto LABEL_940;
LABEL_1338:
                    if ((oslog[23] & 0x80000000) != 0)
                    {
LABEL_1339:
                      operator delete(*(void **)oslog);
                      if (!v1057)
LABEL_2004:
                        abort();
                      goto LABEL_942;
                    }
                  }
                  if (!v1057)
                    goto LABEL_2004;
                  goto LABEL_942;
                }
              }
              v1029 = "Failed to add a factor into the linear system. This could be due to duplicate factor IDs ('";
              goto LABEL_1291;
            }
          }
          v966 = v959 >> 4;
          v958 = v956;
          do
          {
            v967 = v966 >> 1;
            v968 = (unsigned int *)&v958[16 * (v966 >> 1)];
            v970 = *v968;
            v969 = (char *)(v968 + 4);
            v966 += ~(v966 >> 1);
            if (v970 < v816)
              v958 = v969;
            else
              v966 = v967;
          }
          while (v966);
          goto LABEL_1186;
        }
LABEL_942:
        ++v1705;
        v764 = v1688;
LABEL_943:
        v765 += 472;
        if (v765 == v1695)
          goto LABEL_937;
      }
      v869 = *(_QWORD *)&v843 - (_QWORD)v841;
      v870 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)&v843 - (_QWORD)v841) >> 3);
      v871 = v1711[359].u64[0];
      if ((unint64_t)v842 < v871)
      {
        if (*(_QWORD **)&v843 == v842)
        {
          *v842 = v1705;
          v1063 = &v841[(uint64_t)(*(_QWORD *)&v843 - (_QWORD)v841) >> 3];
          *(_OWORD *)(v1063 + 1) = *(_OWORD *)&object[1];
          memcpy(v1063 + 3, &object[3], 0x120uLL);
          memcpy(v1063 + 39, &object[39], 0x120uLL);
          v1064 = v1730;
          v1065 = v1731;
          v1066 = v1733;
          *(__n128 *)(v1063 + 79) = v1732;
          *(__n128 *)(v1063 + 81) = v1066;
          *(_OWORD *)(v1063 + 75) = v1064;
          *(_OWORD *)(v1063 + 77) = v1065;
          v1067 = v1734;
          v1068 = v1735;
          v838 = v1737;
          *(_OWORD *)(v1063 + 87) = v1736;
          *(__n128 *)(v1063 + 89) = v838;
          *(_OWORD *)(v1063 + 83) = v1067;
          *(_OWORD *)(v1063 + 85) = v1068;
          *((_BYTE *)v1063 + 728) = 1;
          *((_OWORD *)v1063 + 46) = v1739;
          v1069 = v1742;
          v1070 = v1740;
          *((_OWORD *)v1063 + 48) = v1741;
          *((_OWORD *)v1063 + 49) = v1069;
          *((_OWORD *)v1063 + 47) = v1070;
          v1071 = v1743;
          v837 = v1745;
          *((_OWORD *)v1063 + 51) = v1744;
          *((__n128 *)v1063 + 52) = v837;
          *((_OWORD *)v1063 + 50) = v1071;
          v1072 = v1746;
          *((_BYTE *)v1063 + 856) = v1747;
          v1063[106] = v1072;
          *((_OWORD *)v1063 + 54) = 0u;
          v1748 = 0uLL;
          *((_BYTE *)v1063 + 880) = 0;
          v1711[358].i64[1] = (uint64_t)(v842 + 111);
          v855 = v1711 + 363;
        }
        else
        {
          v1659 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)&v843 - (_QWORD)v841) >> 3);
          v1728 = *(_OWORD *)oslog;
          memcpy(v1794, &oslog[16], sizeof(v1794));
          memcpy(v1843, &oslog[304], 0x120uLL);
          v1839 = v1812;
          v1840 = v1813;
          v1841 = v1814;
          v1842 = v1815;
          v1835 = v1808;
          v1836 = v1809;
          v1837 = v1810;
          v1838 = v1811;
          v1658 = v1739;
          v1833 = v1819;
          v1834 = v1820;
          v1831 = v1823;
          v1832 = v1818;
          v1829 = v1821;
          v1830 = v1822;
          v1727 = v1825;
          v1726 = v1824;
          v872 = v842 - 111;
          v873 = v842;
          v874 = v842 - 111;
          v1748 = 0uLL;
          if ((unint64_t)v842 >= 0x378)
          {
            do
            {
              *v873 = *v874;
              *(_OWORD *)(v873 + 1) = *(_OWORD *)(v874 + 1);
              memcpy(v873 + 3, v874 + 3, 0x120uLL);
              memcpy(v873 + 39, v874 + 39, 0x120uLL);
              v875 = *(_OWORD *)(v874 + 81);
              v877 = *(_OWORD *)(v874 + 75);
              v876 = *(_OWORD *)(v874 + 77);
              *(_OWORD *)(v873 + 79) = *(_OWORD *)(v874 + 79);
              *(_OWORD *)(v873 + 81) = v875;
              *(_OWORD *)(v873 + 75) = v877;
              *(_OWORD *)(v873 + 77) = v876;
              v878 = *(_OWORD *)(v874 + 89);
              v880 = *(_OWORD *)(v874 + 83);
              v879 = *(_OWORD *)(v874 + 85);
              *(_OWORD *)(v873 + 87) = *(_OWORD *)(v874 + 87);
              *(_OWORD *)(v873 + 89) = v878;
              *(_OWORD *)(v873 + 83) = v880;
              *(_OWORD *)(v873 + 85) = v879;
              *((_BYTE *)v873 + 728) = *((_BYTE *)v874 + 728);
              *((_OWORD *)v873 + 46) = *((_OWORD *)v874 + 46);
              v881 = *((_OWORD *)v874 + 49);
              v882 = *((_OWORD *)v874 + 47);
              *((_OWORD *)v873 + 48) = *((_OWORD *)v874 + 48);
              *((_OWORD *)v873 + 49) = v881;
              *((_OWORD *)v873 + 47) = v882;
              v883 = *((_OWORD *)v874 + 50);
              v884 = *((_OWORD *)v874 + 52);
              *((_OWORD *)v873 + 51) = *((_OWORD *)v874 + 51);
              *((_OWORD *)v873 + 52) = v884;
              *((_OWORD *)v873 + 50) = v883;
              v885 = v874[106];
              *((_BYTE *)v873 + 856) = *((_BYTE *)v874 + 856);
              v873[106] = v885;
              *((_OWORD *)v873 + 54) = *((_OWORD *)v874 + 54);
              *((_OWORD *)v874 + 54) = 0u;
              *((_BYTE *)v873 + 880) = *((_BYTE *)v874 + 880);
              v873 += 111;
              v874 += 111;
            }
            while (v874 < v842);
          }
          v1711[358].i64[1] = (uint64_t)v873;
          if (v842 != (_QWORD *)(*(_QWORD *)&v843 + 888))
          {
            do
            {
              v890 = v872 - 111;
              v891 = v842 - 111;
              *v891 = *(v872 - 111);
              *(_OWORD *)(v891 + 1) = *((_OWORD *)v872 - 55);
              memcpy(v842 - 108, v872 - 108, 0x120uLL);
              memcpy(v842 - 72, v872 - 72, 0x120uLL);
              v892 = *((_OWORD *)v872 - 12);
              v893 = *((_OWORD *)v872 - 11);
              v894 = *((_OWORD *)v872 - 13);
              *((_OWORD *)v842 - 14) = *((_OWORD *)v872 - 14);
              *((_OWORD *)v842 - 13) = v894;
              v895 = *((_OWORD *)v872 - 18);
              v896 = *((_OWORD *)v872 - 17);
              v897 = *((_OWORD *)v872 - 15);
              *((_OWORD *)v842 - 16) = *((_OWORD *)v872 - 16);
              *((_OWORD *)v842 - 15) = v897;
              *((_OWORD *)v842 - 18) = v895;
              *((_OWORD *)v842 - 17) = v896;
              *((_OWORD *)v842 - 12) = v892;
              *((_OWORD *)v842 - 11) = v893;
              *((_BYTE *)v842 - 160) = *((_BYTE *)v872 - 160);
              *(v842 - 19) = *(v872 - 19);
              *(v842 - 18) = *(v872 - 18);
              v898 = *(_OWORD *)(v872 - 13);
              v899 = *(_OWORD *)(v872 - 15);
              *(_OWORD *)(v842 - 17) = *(_OWORD *)(v872 - 17);
              *(_OWORD *)(v842 - 15) = v899;
              *(_OWORD *)(v842 - 13) = v898;
              v900 = *(_OWORD *)(v872 - 11);
              v901 = *(_OWORD *)(v872 - 9);
              *(_OWORD *)(v842 - 7) = *(_OWORD *)(v872 - 7);
              *(_OWORD *)(v842 - 9) = v901;
              *(_OWORD *)(v842 - 11) = v900;
              v902 = *(v872 - 5);
              *((_BYTE *)v842 - 32) = *((_BYTE *)v872 - 32);
              *(v842 - 5) = v902;
              v903 = *(_OWORD *)(v872 - 3);
              *(v872 - 3) = 0;
              *(v872 - 2) = 0;
              v904 = (std::__shared_weak_count *)*(v842 - 2);
              *(_OWORD *)(v842 - 3) = v903;
              if (v904)
              {
                v905 = (unint64_t *)&v904->__shared_owners_;
                do
                  v906 = __ldaxr(v905);
                while (__stlxr(v906 - 1, v905));
                if (!v906)
                {
                  ((void (*)(std::__shared_weak_count *))v904->__on_zero_shared)(v904);
                  std::__shared_weak_count::__release_weak(v904);
                }
              }
              *((_BYTE *)v842 - 8) = *((_BYTE *)v872 - 8);
              v842 -= 111;
              v872 -= 111;
            }
            while (v890 != *(_QWORD **)&v843);
          }
          **(_QWORD **)&v843 = v1705;
          v886 = &v1662[111 * v1659];
          *(_OWORD *)(v886 + 1) = v1728;
          memcpy(v886 + 3, v1794, 0x120uLL);
          memcpy(v886 + 39, v1843, 0x120uLL);
          *(_OWORD *)(v886 + 83) = v1839;
          *(_OWORD *)(v886 + 85) = v1840;
          *(_OWORD *)(v886 + 87) = v1841;
          *(__n128 *)(v886 + 89) = v1842;
          *(_OWORD *)(v886 + 75) = v1835;
          *(_OWORD *)(v886 + 77) = v1836;
          *(__n128 *)(v886 + 79) = v1837;
          *(__n128 *)(v886 + 81) = v1838;
          *((_BYTE *)v886 + 728) = 1;
          *((_OWORD *)v886 + 46) = v1658;
          *((_OWORD *)v886 + 47) = v1832;
          *((_OWORD *)v886 + 48) = v1833;
          *((_OWORD *)v886 + 49) = v1834;
          *((_OWORD *)v886 + 50) = v1829;
          *((_OWORD *)v886 + 51) = v1830;
          *((__n128 *)v886 + 52) = v1831;
          v886[106] = v1726;
          *((_BYTE *)v886 + 856) = v1727;
          v887 = (std::__shared_weak_count *)v886[109];
          *((_OWORD *)v886 + 54) = 0u;
          v855 = v1711 + 363;
          if (v887)
          {
            v888 = (unint64_t *)&v887->__shared_owners_;
            do
              v889 = __ldaxr(v888);
            while (__stlxr(v889 - 1, v888));
            if (!v889)
            {
              ((void (*)(std::__shared_weak_count *))v887->__on_zero_shared)(v887);
              std::__shared_weak_count::__release_weak(v887);
            }
          }
          LOBYTE(v1662[111 * v1659 + 110]) = 0;
          v851 = v1711;
        }
        goto LABEL_1392;
      }
      v1059 = 1 - 0x4E6A171024E6A171 * (v842 - v841);
      if (v1059 > 0x49CD42E2049CD4)
        sub_20E867F44();
      v1060 = 0xB195E8EFDB195E8FLL * ((uint64_t)(v871 - (_QWORD)v841) >> 3);
      if (2 * v1060 > v1059)
        v1059 = 2 * v1060;
      if (v1060 >= 0x24E6A171024E6ALL)
        v1061 = 0x49CD42E2049CD4;
      else
        v1061 = v1059;
      *(_QWORD *)&v1794[2].f64[0] = v1711[359].i64;
      if (v1061)
      {
        v1663 = *(_QWORD *)&v843 - (_QWORD)v841;
        if (v1061 > 0x49CD42E2049CD4)
          sub_20E877A38();
        v1062 = (char *)operator new(888 * v1061);
        v869 = v1663;
      }
      else
      {
        v1062 = 0;
      }
      *(_QWORD *)&v1073 = &v1062[888 * v870];
      *(_QWORD *)&v1794[0].f64[0] = v1062;
      v1794[0].f64[1] = v1073;
      v1794[1].f64[0] = v1073;
      *(_QWORD *)&v1794[1].f64[1] = &v1062[888 * v1061];
      if (v870 == v1061)
      {
        if (v869 < 1)
        {
          if (v1662 == *(_QWORD **)&v843)
            v1075 = 1;
          else
            v1075 = 2 * v870;
          if (v1075 > 0x49CD42E2049CD4)
            sub_20E877A38();
          v1076 = (char *)operator new(888 * v1075);
          *(_QWORD *)&v1073 = &v1076[888 * (v1075 >> 2)];
          *(_QWORD *)&v1794[0].f64[0] = v1076;
          v1794[0].f64[1] = v1073;
          *(_QWORD *)&v1794[1].f64[1] = &v1076[888 * v1075];
          if (v1062)
          {
            v1077 = &v1076[888 * (v1075 >> 2)];
            operator delete(v1062);
            v1073 = *(double *)&v1077;
          }
        }
        else
        {
          v1074 = v870 + 2;
          if (v870 >= -1)
            v1074 = v870 + 1;
          *(_QWORD *)&v1073 -= 888 * (v1074 >> 1);
          v1794[0].f64[1] = v1073;
        }
      }
      v1664 = v1073;
      **(_QWORD **)&v1073 = v1705;
      v1078 = (_OWORD *)(*(_QWORD *)&v1073 + 8);
      *(_OWORD *)(*(_QWORD *)&v1073 + 8) = *(_OWORD *)oslog;
      memcpy((void *)(*(_QWORD *)&v1073 + 24), &object[3], 0x120uLL);
      memcpy((void *)(*(_QWORD *)&v1664 + 312), &object[39], 0x120uLL);
      v1079 = *(_QWORD *)&v1664;
      v1080 = v1735;
      v1078[41] = v1734;
      v1078[42] = v1080;
      v1081 = v1737;
      v1078[43] = v1736;
      v1078[44] = v1081;
      v1082 = v1731;
      v1078[37] = v1730;
      v1078[38] = v1082;
      v1083 = v1733;
      v1078[39] = v1732;
      v1078[40] = v1083;
      *(_BYTE *)(*(_QWORD *)&v1664 + 728) = v1738;
      *(_OWORD *)(*(_QWORD *)&v1664 + 736) = v1739;
      v1084 = v1740;
      v1085 = v1742;
      *(_OWORD *)(*(_QWORD *)&v1664 + 768) = v1741;
      *(_OWORD *)(*(_QWORD *)&v1664 + 784) = v1085;
      *(_OWORD *)(*(_QWORD *)&v1664 + 752) = v1084;
      v1086 = v1743;
      v837 = v1745;
      *(_OWORD *)(*(_QWORD *)&v1664 + 816) = v1744;
      *(__n128 *)(*(_QWORD *)&v1664 + 832) = v837;
      *(_OWORD *)(*(_QWORD *)&v1664 + 800) = v1086;
      v1087 = v1746;
      *(_BYTE *)(*(_QWORD *)&v1664 + 856) = v1747;
      *(_QWORD *)(*(_QWORD *)&v1664 + 848) = v1087;
      *(_OWORD *)(*(_QWORD *)&v1664 + 864) = v1748;
      v1748 = 0uLL;
      *(_BYTE *)(*(_QWORD *)&v1664 + 880) = v1749;
      v1088 = *(_QWORD *)&v1664 + 888;
      *(_QWORD *)&v1794[1].f64[0] = *(_QWORD *)&v1664 + 888;
      v1089 = v1711[358].i64[0];
      if (v1089 != *(_QWORD *)&v843)
      {
        v1090 = 0;
        do
        {
          v1091 = v1079 + v1090;
          v1092 = *(_QWORD *)&v843 + v1090;
          *(_QWORD *)(v1079 + v1090 - 888) = *(_QWORD *)(*(_QWORD *)&v843 + v1090 - 888);
          *(_OWORD *)(v1079 + v1090 - 880) = *(_OWORD *)(*(_QWORD *)&v843 + v1090 - 880);
          memcpy((void *)(v1079 + v1090 - 864), (const void *)(*(_QWORD *)&v843 + v1090 - 864), 0x120uLL);
          memcpy((void *)(v1091 - 576), (const void *)(*(_QWORD *)&v843 + v1090 - 576), 0x120uLL);
          v1079 = *(_QWORD *)&v1664;
          v1093 = (_OWORD *)(v1091 - 288);
          v1094 = *(_OWORD *)(*(_QWORD *)&v843 + v1090 - 240);
          v1096 = *(_OWORD *)(*(_QWORD *)&v843 + v1090 - 288);
          v1095 = *(_OWORD *)(*(_QWORD *)&v843 + v1090 - 272);
          *(_OWORD *)(v1091 - 256) = *(_OWORD *)(*(_QWORD *)&v843 + v1090 - 256);
          *(_OWORD *)(v1091 - 240) = v1094;
          *v1093 = v1096;
          v1093[1] = v1095;
          v1097 = *(_OWORD *)(*(_QWORD *)&v843 + v1090 - 176);
          v838 = *(__n128 *)(*(_QWORD *)&v843 + v1090 - 224);
          v1098 = *(_OWORD *)(*(_QWORD *)&v843 + v1090 - 208);
          *(_OWORD *)(v1091 - 192) = *(_OWORD *)(*(_QWORD *)&v843 + v1090 - 192);
          *(_OWORD *)(v1091 - 176) = v1097;
          *(__n128 *)(v1091 - 224) = v838;
          *(_OWORD *)(v1091 - 208) = v1098;
          *(_BYTE *)(v1091 - 160) = *(_BYTE *)(*(_QWORD *)&v843 + v1090 - 160);
          *(_OWORD *)(v1091 - 152) = *(_OWORD *)(*(_QWORD *)&v843 + v1090 - 152);
          v1099 = *(_OWORD *)(*(_QWORD *)&v843 + v1090 - 120);
          v1100 = *(_OWORD *)(*(_QWORD *)&v843 + v1090 - 104);
          *(_OWORD *)(v1091 - 136) = *(_OWORD *)(*(_QWORD *)&v843 + v1090 - 136);
          *(_OWORD *)(v1091 - 104) = v1100;
          *(_OWORD *)(v1091 - 120) = v1099;
          v1101 = *(_OWORD *)(*(_QWORD *)&v843 + v1090 - 72);
          v1102 = *(_OWORD *)(*(_QWORD *)&v843 + v1090 - 88);
          v837 = *(__n128 *)(*(_QWORD *)&v843 + v1090 - 56);
          *(__n128 *)(v1091 - 56) = v837;
          *(_OWORD *)(v1091 - 88) = v1102;
          *(_OWORD *)(v1091 - 72) = v1101;
          v1103 = *(_QWORD *)(*(_QWORD *)&v843 + v1090 - 40);
          *(_BYTE *)(v1091 - 32) = *(_BYTE *)(*(_QWORD *)&v843 + v1090 - 32);
          *(_QWORD *)(v1091 - 40) = v1103;
          *(_OWORD *)(v1091 - 24) = *(_OWORD *)(*(_QWORD *)&v843 + v1090 - 24);
          *(_QWORD *)(v1092 - 24) = 0;
          *(_QWORD *)(v1092 - 16) = 0;
          *(_BYTE *)(v1091 - 8) = *(_BYTE *)(*(_QWORD *)&v843 + v1090 - 8);
          v1090 -= 888;
        }
        while (*(_QWORD *)&v843 + v1090 != v1089);
        v1079 = *(_QWORD *)&v1664 + v1090;
        v851 = v1711;
      }
      v1104 = v851[358].i64[1];
      if (v1104 != *(_QWORD *)&v843)
      {
        v1105 = v1079;
        do
        {
          *(_QWORD *)v1088 = **(_QWORD **)&v843;
          *(_OWORD *)(v1088 + 8) = *(_OWORD *)(*(_QWORD *)&v843 + 8);
          memcpy((void *)(v1088 + 24), (const void *)(*(_QWORD *)&v843 + 24), 0x120uLL);
          memcpy((void *)(v1088 + 312), (const void *)(*(_QWORD *)&v843 + 312), 0x120uLL);
          v1106 = *(_OWORD *)(*(_QWORD *)&v843 + 648);
          v1108 = *(_OWORD *)(*(_QWORD *)&v843 + 600);
          v1107 = *(_OWORD *)(*(_QWORD *)&v843 + 616);
          *(_OWORD *)(v1088 + 632) = *(_OWORD *)(*(_QWORD *)&v843 + 632);
          *(_OWORD *)(v1088 + 648) = v1106;
          *(_OWORD *)(v1088 + 600) = v1108;
          *(_OWORD *)(v1088 + 616) = v1107;
          v1109 = *(_OWORD *)(*(_QWORD *)&v843 + 712);
          v838 = *(__n128 *)(*(_QWORD *)&v843 + 664);
          v1110 = *(_OWORD *)(*(_QWORD *)&v843 + 680);
          *(_OWORD *)(v1088 + 696) = *(_OWORD *)(*(_QWORD *)&v843 + 696);
          *(_OWORD *)(v1088 + 712) = v1109;
          *(__n128 *)(v1088 + 664) = v838;
          *(_OWORD *)(v1088 + 680) = v1110;
          *(_BYTE *)(v1088 + 728) = *(_BYTE *)(*(_QWORD *)&v843 + 728);
          *(_OWORD *)(v1088 + 736) = *(_OWORD *)(*(_QWORD *)&v843 + 736);
          v1111 = *(_OWORD *)(*(_QWORD *)&v843 + 784);
          v1112 = *(_OWORD *)(*(_QWORD *)&v843 + 752);
          *(_OWORD *)(v1088 + 768) = *(_OWORD *)(*(_QWORD *)&v843 + 768);
          *(_OWORD *)(v1088 + 784) = v1111;
          *(_OWORD *)(v1088 + 752) = v1112;
          v1113 = *(_OWORD *)(*(_QWORD *)&v843 + 800);
          v837 = *(__n128 *)(*(_QWORD *)&v843 + 832);
          *(_OWORD *)(v1088 + 816) = *(_OWORD *)(*(_QWORD *)&v843 + 816);
          *(__n128 *)(v1088 + 832) = v837;
          *(_OWORD *)(v1088 + 800) = v1113;
          v1114 = *(_QWORD *)(*(_QWORD *)&v843 + 848);
          *(_BYTE *)(v1088 + 856) = *(_BYTE *)(*(_QWORD *)&v843 + 856);
          *(_QWORD *)(v1088 + 848) = v1114;
          *(_OWORD *)(v1088 + 864) = *(_OWORD *)(*(_QWORD *)&v843 + 864);
          *(_OWORD *)(*(_QWORD *)&v843 + 864) = 0u;
          *(_BYTE *)(v1088 + 880) = *(_BYTE *)(*(_QWORD *)&v843 + 880);
          v1088 += 888;
          *(_QWORD *)&v843 += 888;
        }
        while (*(_QWORD *)&v843 != v1104);
        v843 = *(double *)&v851[358].i64[1];
        v1079 = v1105;
      }
      v1115 = *(double *)v851[358].i64;
      v851[358].i64[0] = v1079;
      v851[358].i64[1] = v1088;
      v1116 = *(double *)v851[359].i64;
      v851[359].i64[0] = *(_QWORD *)&v1794[1].f64[1];
      v1794[1].f64[1] = v1116;
      v1794[0].f64[1] = v1115;
      v1794[0].f64[0] = v1115;
      if (*(_QWORD *)&v843 == *(_QWORD *)&v1115)
      {
        v855 = v1711 + 363;
        if (v843 == 0.0)
          goto LABEL_1392;
      }
      else
      {
        v855 = v1711 + 363;
        do
        {
          *(_QWORD *)&v1794[1].f64[0] = *(_QWORD *)&v843 - 888;
          v1117 = *(std::__shared_weak_count **)(*(_QWORD *)&v843 - 16);
          if (v1117)
          {
            v1118 = (unint64_t *)&v1117->__shared_owners_;
            do
              v1119 = __ldaxr(v1118);
            while (__stlxr(v1119 - 1, v1118));
            if (!v1119)
            {
              ((void (*)(std::__shared_weak_count *))v1117->__on_zero_shared)(v1117);
              std::__shared_weak_count::__release_weak(v1117);
            }
          }
          v843 = v1794[1].f64[0];
        }
        while (*(_QWORD *)&v1794[1].f64[0] != *(_QWORD *)&v1115);
        v843 = v1794[0].f64[0];
        if (!*(_QWORD *)&v1794[0].f64[0])
          goto LABEL_1392;
      }
      operator delete(*(void **)&v843);
LABEL_1392:
      v1120 = (std::__shared_weak_count *)*((_QWORD *)&v1748 + 1);
      if (*((_QWORD *)&v1748 + 1))
      {
        v1121 = (unint64_t *)(*((_QWORD *)&v1748 + 1) + 8);
        do
          v1122 = __ldaxr(v1121);
        while (__stlxr(v1122 - 1, v1121));
        if (!v1122)
        {
          ((void (*)(std::__shared_weak_count *))v1120->__on_zero_shared)(v1120);
          std::__shared_weak_count::__release_weak(v1120);
        }
      }
      goto LABEL_1397;
    }
    v1126 = 0;
LABEL_1413:
    sub_20E9BCAA8(v1126);
  }
LABEL_1414:
  v1127 = v1721;
  v1128 = v1721 + 24880;
  sub_20F626FF4(v1721 + 24880, (__int128 *)(v1721 + 528));
  v1129 = (uint64_t *)(v1127 + 24872);
  v1130 = *(_OWORD *)(v1127 + 1272);
  *(_OWORD *)(v1127 + 25640) = *(_OWORD *)(v1127 + 1256);
  *(_OWORD *)(v1127 + 25656) = v1130;
  *(_OWORD *)(v1127 + 25672) = *(_OWORD *)(v1127 + 1288);
  kdebug_trace();
  kdebug_trace();
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)(v1127 + 24872) + 16))(oslog, v1127 + 24872);
  v1131 = v1127 + 4712;
  (**(void (***)(float64x2_t *__return_ptr, uint64_t))(v1127 + 4712))(v1794, v1127 + 4712);
  if ((oslog[23] & 0x80000000) != 0)
  {
    sub_20E860C04(object, *(void **)oslog, *(unint64_t *)&oslog[8]);
  }
  else
  {
    *(_OWORD *)object = *(_OWORD *)oslog;
    object[2] = *(void **)&oslog[16];
  }
  v1132 = HIBYTE(v1794[1].f64[0]);
  if (SHIBYTE(v1794[1].f64[0]) < 0)
  {
    sub_20E860C04(&object[3], *(void **)&v1794[0].f64[0], *(unint64_t *)&v1794[0].f64[1]);
    v1132 = HIBYTE(v1794[1].f64[0]);
  }
  else
  {
    *(float64x2_t *)&object[3] = v1794[0];
    object[5] = *(void **)&v1794[1].f64[0];
  }
  object[6] = 0;
  LODWORD(object[7]) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&object[8] = _Q0;
  object[74] = &object[10];
  v1730 = xmmword_210378040;
  v1750 = &v1731;
  v1751 = 64;
  v1752 = 0u;
  v1754 = v1753;
  v1755 = 64;
  v1756 = 0;
  v1758 = 0;
  v1757 = 0;
  v1760 = v1759;
  v1761 = xmmword_210378040;
  if (v1132 < 0)
  {
    operator delete(*(void **)&v1794[0].f64[0]);
    if ((oslog[23] & 0x80000000) == 0)
      goto LABEL_1422;
  }
  else if ((oslog[23] & 0x80000000) == 0)
  {
    goto LABEL_1422;
  }
  operator delete(*(void **)oslog);
LABEL_1422:
  sub_20F2C3BE8(object, 6uLL, 8uLL);
  *(_QWORD *)&v1794[0].f64[0] = v1127 + 4712;
  *(_QWORD *)&v1794[0].f64[1] = object;
  v1134 = (*(double (**)(uint64_t))(*(_QWORD *)v1131 + 40))(v1127 + 4712);
  v1135 = *(_BYTE *)(v1127 + 6600);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v1127 + 24872) + 24))(v1127 + 24872))
  {
    *(_BYTE *)(v1127 + 6600) = 1;
    v1136 = (*(uint64_t (**)(uint64_t))(*v1129 + 40))(v1127 + 24872);
    v1137 = *v1129;
    if (v1136)
      (*(void (**)(uint64_t, double))(v1137 + 48))(v1127 + 24872, 0.0);
    else
      (*(void (**)(uint64_t))(v1137 + 56))(v1127 + 24872);
    (*(void (**)(uint64_t))(*v1129 + 32))(v1127 + 24872);
    (*(void (**)(uint64_t))(*(_QWORD *)v1131 + 104))(v1127 + 4712);
  }
  kdebug_trace();
  if (*(_BYTE *)(v1128 + 40))
  {
    v1138 = *(_QWORD *)(v1127 + 25464);
    if (!*(_BYTE *)(v1128 + 593))
    {
      if (v1138)
      {
        *(_QWORD *)oslog = *(_QWORD *)(v1127 + 25448);
        *(_DWORD *)&oslog[8] = 0;
        sub_20F627D2C(v1127 + 4712, (double **)oslog, *(_BYTE *)(v1128 + 592));
      }
      else
      {
        sub_20F627590(v1127 + 4712, (double *)(v1127 + 24928), *(_BYTE *)(v1128 + 592));
      }
      goto LABEL_1457;
    }
    if (v1138)
    {
      v1139 = *(unsigned __int8 *)(v1128 + 592);
      sub_20F62BC2C(v1127 + 4712, (double *)oslog, *(double **)(v1127 + 25448));
      v1140 = 1.0;
      v1141 = *(double *)oslog;
      v1142 = 1.0;
      if (!v1139)
      {
        if (*(double *)oslog <= 0.0)
        {
          v1142 = 1.0e20;
          v1140 = 1.0e-10;
        }
        else
        {
          v1140 = *(double *)oslog;
          v1142 = 1.0 / (*(double *)oslog * *(double *)oslog);
        }
      }
      *(double *)(v1127 + 4720) = v1140;
      *(double *)(v1127 + 4728) = v1142;
      *(double *)(v1127 + 4736) = v1140;
      *(double *)(v1127 + 4744) = v1142;
      *(double *)(v1127 + 4752) = v1140;
      *(double *)(v1127 + 4760) = v1142;
      *(double *)(v1127 + 4768) = v1140;
      *(double *)(v1127 + 4776) = v1142;
      if (v1141 <= 0.0)
      {
        v1145 = 1.0e20;
        v1141 = 1.0e-10;
LABEL_1454:
        *(double *)(v1127 + 4784) = v1141;
        *(double *)(v1127 + 4792) = v1145;
        if (v1139)
        {
          v1141 = 1.0;
          v1145 = 1.0;
        }
        *(double *)(v1127 + 4816) = v1141;
        *(double *)(v1127 + 4824) = v1145;
        *(_BYTE *)(v1127 + 6589) = 0;
        *(_DWORD *)(v1127 + 6584) = 0;
        goto LABEL_1457;
      }
    }
    else
    {
      v1139 = *(unsigned __int8 *)(v1128 + 592);
      sub_20F62BC2C(v1127 + 4712, (double *)oslog, (double *)(v1127 + 24928));
      v1143 = 1.0;
      v1141 = *(double *)oslog;
      v1144 = 1.0;
      if (!v1139)
      {
        if (*(double *)oslog <= 0.0)
        {
          v1144 = 1.0e20;
          v1143 = 1.0e-10;
        }
        else
        {
          v1143 = *(double *)oslog;
          v1144 = 1.0 / (*(double *)oslog * *(double *)oslog);
        }
      }
      *(double *)(v1127 + 4720) = v1143;
      *(double *)(v1127 + 4728) = v1144;
      *(double *)(v1127 + 4736) = v1143;
      *(double *)(v1127 + 4744) = v1144;
      *(double *)(v1127 + 4752) = v1143;
      *(double *)(v1127 + 4760) = v1144;
      *(double *)(v1127 + 4768) = v1143;
      *(double *)(v1127 + 4776) = v1144;
      if (v1141 <= 0.0)
      {
        v1145 = 1.0e20;
        v1141 = 1.0e-10;
        goto LABEL_1454;
      }
    }
    v1145 = 1.0 / (v1141 * v1141);
    goto LABEL_1454;
  }
LABEL_1457:
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v1131 + 8))(v1127 + 4712))
  {
    sub_20F6284F4((uint64_t)v1794);
    object[8] = COERCE_VOID_(sub_20F62AAD0(v1127 + 4712, &object[10]));
    object[9] = object[8];
    *(void **)(v1127 + 25608) = object[8];
    v1149 = (__int128 *)object[74];
    v1150 = *((_QWORD *)&v1730 + 1);
    v1151 = 8 * *((_QWORD *)&v1730 + 1);
    *(_QWORD *)&v1752 = 0;
    v1152 = *((_QWORD *)&v1730 + 1) & 0x1FFFFFFFFFFFFFFFLL;
    if ((*((_QWORD *)&v1730 + 1) & 0x1FFFFFFFFFFFFFFFuLL) <= v1751)
    {
      if (!*((_QWORD *)&v1730 + 1))
        goto LABEL_1480;
      v1153 = v1750;
    }
    else
    {
      if (2 * v1751 > v1152)
        v1152 = 2 * v1751;
      v1751 = v1152;
      v1153 = (_OWORD *)operator new[]();
      if (v1750 != &v1731 && v1750)
        MEMORY[0x212BC6368]();
      v1750 = v1153;
      v1154 = v1752;
      if ((_QWORD)v1752)
      {
        *(_QWORD *)&v1752 = v1752 + v1150;
        memmove((char *)v1153 + 8 * v1150, v1153, 8 * v1154);
        memcpy(v1153, v1149, v1151);
LABEL_1480:
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*v1129 + 24))(v1127 + 24872))
        {
          if ((*(unsigned int (**)(uint64_t))(*v1129 + 40))(v1127 + 24872))
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1131 + 96))(v1127 + 4712);
            (*(void (**)(uint64_t))(*v1129 + 48))(v1127 + 24872);
          }
          else
          {
            (*(void (**)(uint64_t))(*v1129 + 56))(v1127 + 24872);
          }
          (*(void (**)(uint64_t))(*v1129 + 32))(v1127 + 24872);
          (*(void (**)(uint64_t))(*(_QWORD *)v1131 + 104))(v1127 + 4712);
        }
        v1164 = *(unsigned int *)(v1127 + 6640);
        v1148 = v1660;
        __sbc = (double **)(v1127 + 6624);
        if ((_DWORD)v1164)
        {
          v1165 = *(double **)(v1127 + 6624);
          v1166 = fabs(*v1165);
          if ((_DWORD)v1164 == 1)
          {
            jj = v1127 + 6584;
          }
          else
          {
            v1168 = v1165 + 1;
            v1169 = 8 * v1164 - 8;
            jj = v1127 + 6584;
            do
            {
              v1170 = *v1168++;
              v1171 = fabs(v1170);
              if (v1166 < v1171)
                v1166 = v1171;
              v1169 -= 8;
            }
            while (v1169);
          }
        }
        else
        {
          v1166 = 1.0;
          jj = v1127 + 6584;
        }
        if (v1166 < v1166 * *(double *)(v1127 + 24896))
        {
          if (*(_BYTE *)(v1128 + 8))
          {
            v1172 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
            std::ios_base::getloc((const std::ios_base *)((char *)v1172 + *(_QWORD *)(*v1172 - 24)));
            v1173 = std::locale::use_facet((const std::locale *)oslog, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v1173->__vftable[2].~facet_0)(v1173, 10);
            std::locale::~locale((std::locale *)oslog);
            std::ostream::put();
            std::ostream::flush();
            sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"[error][grad < gtol][", 21);
            v1174 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v1174, (uint64_t)"][", 2);
            if (v1166 == 0.0)
              sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
            else
              std::ostream::operator<<();
            sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
            v1260 = (_QWORD *)std::ostream::operator<<();
            v1261 = sub_20E86A980(v1260, (uint64_t)"]", 1);
            std::ios_base::getloc((const std::ios_base *)((char *)v1261 + *(_QWORD *)(*v1261 - 24)));
            v1262 = std::locale::use_facet((const std::locale *)oslog, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v1262->__vftable[2].~facet_0)(v1262, 10);
            std::locale::~locale((std::locale *)oslog);
            std::ostream::put();
            std::ostream::flush();
          }
          LODWORD(object[7]) = 1;
LABEL_1729:
          *(_BYTE *)(jj + 16) = v1135;
          goto LABEL_1730;
        }
        v1175 = *(double *)(v1127 + 25608);
        kdebug_trace();
        v1684 = v1135;
        v1712 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1131 + 24))(v1127 + 4712);
        v1176 = *(_QWORD *)(v1127 + 25536);
        if (v1176)
          (*(void (**)(uint64_t))(*(_QWORD *)v1176 + 48))(v1176);
        v1177 = LODWORD(object[6]);
        if (LODWORD(object[6]) >= *(_DWORD *)(v1128 + 4))
        {
LABEL_1727:
          object[9] = *(void **)(v1127 + 25608);
          v1372 = *(_QWORD *)(v1127 + 25504);
          v1135 = v1684;
          if (v1372)
            (*(void (**)(uint64_t))(*(_QWORD *)v1372 + 48))(v1372);
          goto LABEL_1729;
        }
        v1685 = (void *)(v1127 + 25616);
        v1178 = v1166;
        while (1)
        {
          v1179 = v1177 + 1;
          LODWORD(object[6]) = v1177 + 1;
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v1131 + 16))(v1127 + 4712, v1712))
          {
            if (*(_BYTE *)(v1128 + 8))
            {
              v1267 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Solve FAILED", 12);
              std::ios_base::getloc((const std::ios_base *)((char *)v1267 + *(_QWORD *)(*v1267 - 24)));
              v1268 = std::locale::use_facet((const std::locale *)oslog, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v1268->__vftable[2].~facet_0)(v1268, 10);
              std::locale::~locale((std::locale *)oslog);
              std::ostream::put();
              std::ostream::flush();
            }
            LODWORD(object[7]) = 0;
            goto LABEL_1727;
          }
          ++HIDWORD(object[6]);
          v1180 = *(unsigned int *)(v1712 + 16);
          if ((_DWORD)v1180)
          {
            v1181 = *(double **)v1712;
            v1182 = **(double **)v1712 * **(double **)v1712;
            if ((_DWORD)v1180 != 1)
            {
              v1183 = v1181 + 1;
              v1184 = (v1180 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
              if (v1184 < 3)
                goto LABEL_1508;
              v1185 = v1184 + 1;
              v1183 += v1185 & 0x3FFFFFFFFFFFFFFCLL;
              v1186 = (float64x2_t *)(v1181 + 3);
              v1187 = v1185 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v1188 = vmulq_f64(v1186[-1], v1186[-1]);
                v1189 = vmulq_f64(*v1186, *v1186);
                v1182 = v1182 + v1188.f64[0] + v1188.f64[1] + v1189.f64[0] + v1189.f64[1];
                v1186 += 2;
                v1187 -= 4;
              }
              while (v1187);
              if (v1185 != (v1185 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1508:
                v1190 = &v1181[v1180];
                do
                {
                  v1191 = *v1183++;
                  v1182 = v1182 + v1191 * v1191;
                }
                while (v1183 != v1190);
              }
            }
            v1192 = sqrt(v1182);
            if (v1177 < *(_DWORD *)v1128)
              goto LABEL_1518;
          }
          else
          {
            v1192 = sqrt(0.0);
            if (v1177 < *(_DWORD *)v1128)
              goto LABEL_1518;
          }
          v1193 = *(_QWORD *)(v1127 + 25600);
          if (v1193)
          {
            *(_DWORD *)oslog = *(_DWORD *)(v1712 + 16);
            *(_QWORD *)&oslog[8] = *(_QWORD *)v1712;
            *(_DWORD *)&oslog[16] = 0;
            v1843[0] = *(void **)&v1192;
            if (((*(uint64_t (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v1193 + 48))(v1193, v1843, oslog) & 1) != 0)
              goto LABEL_1654;
          }
          else if ((_DWORD)v1180 && v1192 < *(double *)(v1127 + 24904) * (v1134 + *(double *)(v1127 + 24904)))
          {
LABEL_1654:
            if (*(_BYTE *)(v1128 + 8))
            {
              v1279 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the parameters", 29);
              std::ios_base::getloc((const std::ios_base *)((char *)v1279 + *(_QWORD *)(*v1279 - 24)));
              v1280 = std::locale::use_facet((const std::locale *)oslog, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v1280->__vftable[2].~facet_0)(v1280, 10);
              std::locale::~locale((std::locale *)oslog);
              std::ostream::put();
              std::ostream::flush();
              (*(void (**)(uint64_t, uint64_t, double, double, double, double, double))(*v1129 + 64))(v1127 + 24872, v1177, v1175, v1192, v1178, v1166, v1134);
            }
            v1274 = 2;
            goto LABEL_1726;
          }
LABEL_1518:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1131 + 48))(v1127 + 4712, v1712);
          v1194 = *(_QWORD *)(v1127 + 25568);
          if (v1194)
            (*(void (**)(uint64_t))(*(_QWORD *)v1194 + 48))(v1194);
          if ((_QWORD)v1752)
            memcpy(oslog, v1750, 8 * v1752);
          v1175 = sub_20F62AAD0(v1127 + 4712, &v1731);
          v1195 = *(unsigned int *)(v1127 + 6640);
          if (!(_DWORD)v1195)
          {
            v1178 = 1.0;
            if (!*(_BYTE *)(v1128 + 8))
              goto LABEL_1532;
LABEL_1531:
            (*(void (**)(uint64_t, uint64_t, double, double, double, double, double))(*v1129 + 64))(v1127 + 24872, v1177, v1175, v1192, v1178, v1166, v1134);
            goto LABEL_1532;
          }
          v1178 = fabs(**__sbc);
          if ((_DWORD)v1195 != 1)
          {
            v1196 = *__sbc + 1;
            v1197 = 8 * v1195 - 8;
            do
            {
              v1198 = *v1196++;
              v1199 = fabs(v1198);
              if (v1178 < v1199)
                v1178 = v1199;
              v1197 -= 8;
            }
            while (v1197);
          }
          if (*(_BYTE *)(v1128 + 8))
            goto LABEL_1531;
LABEL_1532:
          if (v1175 == 0.0)
          {
            if (*(_BYTE *)(v1128 + 8))
            {
              v1269 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
              v1270 = sub_20E86A980(v1269, (uint64_t)"N.A.", 4);
              std::ios_base::getloc((const std::ios_base *)((char *)v1270 + *(_QWORD *)(*v1270 - 24)));
              v1271 = std::locale::use_facet((const std::locale *)v1843, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v1271->__vftable[2].~facet_0)(v1271, 10);
              std::locale::~locale((std::locale *)v1843);
              std::ostream::put();
              goto LABEL_1643;
            }
LABEL_1644:
            *(double *)(v1127 + 25608) = v1175;
            v1274 = 3;
LABEL_1726:
            LODWORD(object[7]) = v1274;
            goto LABEL_1727;
          }
          if (vabdd_f64(v1175, *(double *)(v1127 + 25608)) < v1175 * *(double *)(v1127 + 24912)
            && v1177 >= *(_DWORD *)v1128)
          {
            if (*(_BYTE *)(v1128 + 8))
            {
              sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
              v1272 = (_QWORD *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v1272 + *(_QWORD *)(*v1272 - 24)));
              v1273 = std::locale::use_facet((const std::locale *)v1843, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v1273->__vftable[2].~facet_0)(v1273, 10);
              std::locale::~locale((std::locale *)v1843);
              std::ostream::put();
LABEL_1643:
              std::ostream::flush();
            }
            goto LABEL_1644;
          }
          if (*(_DWORD *)(v1127 + 6616))
          {
            (*(void (**)(uint64_t, void *))(*(_QWORD *)v1131 + 160))(v1127 + 4712, v1685);
            v1200 = (*(uint64_t (**)(uint64_t, uint64_t, double **, void *, double))(*v1129 + 80))(v1127 + 24872, v1712, __sbc, v1685, v1175);
          }
          else
          {
            v1200 = (*(uint64_t (**)(uint64_t, uint64_t, double **, double))(*v1129 + 72))(v1127 + 24872, v1712, __sbc, v1175);
          }
          if (!v1200)
          {
            --HIDWORD(object[6]);
            v1211 = *(_QWORD *)(v1127 + 4840);
            v1212 = *(_QWORD *)(v1127 + 4848);
            while (v1211 != v1212)
            {
              v1213 = *(_QWORD *)(v1211 + 8);
              if (*(_BYTE *)(v1213 + 20))
              {
                v1214 = *(_OWORD *)(v1213 + 200);
                v1215 = *(_OWORD *)(v1213 + 232);
                *(_OWORD *)(v1213 + 64) = *(_OWORD *)(v1213 + 216);
                *(_OWORD *)(v1213 + 80) = v1215;
                *(_QWORD *)(v1213 + 96) = *(_QWORD *)(v1213 + 248);
                *(_OWORD *)(v1213 + 32) = *(_OWORD *)(v1213 + 184);
                *(_OWORD *)(v1213 + 48) = v1214;
                *(_OWORD *)(v1213 + 104) = *(_OWORD *)(v1213 + 256);
                *(_QWORD *)(v1213 + 120) = *(_QWORD *)(v1213 + 272);
                *(_BYTE *)(v1213 + 128) = 0;
              }
              v1211 += 16;
            }
            v1216 = *(_QWORD *)(v1127 + 4936);
            v1217 = *(_QWORD *)(v1127 + 4944);
            while (v1216 != v1217)
            {
              v1218 = *(_QWORD *)(v1216 + 8);
              if (*(_BYTE *)(v1218 + 20))
              {
                v1219 = *(_OWORD *)(v1218 + 160);
                *(_OWORD *)(v1218 + 64) = *(_OWORD *)(v1218 + 144);
                *(_OWORD *)(v1218 + 80) = v1219;
                *(_QWORD *)(v1218 + 96) = *(_QWORD *)(v1218 + 176);
                v1220 = *(_OWORD *)(v1218 + 128);
                *(_OWORD *)(v1218 + 32) = *(_OWORD *)(v1218 + 112);
                *(_OWORD *)(v1218 + 48) = v1220;
                *(_BYTE *)(v1218 + 104) = 0;
              }
              v1216 += 16;
            }
            v1221 = *(_QWORD *)(v1127 + 5032);
            v1222 = *(_QWORD *)(v1127 + 5040);
            while (v1221 != v1222)
            {
              v1223 = *(_QWORD *)(v1221 + 8);
              if (*(_BYTE *)(v1223 + 20))
              {
                *(_QWORD *)(v1223 + 32) = *(_QWORD *)(v1223 + 48);
                *(_BYTE *)(v1223 + 40) = 0;
              }
              v1221 += 16;
            }
            v1224 = *(_QWORD *)(v1127 + 5128);
            v1225 = *(_QWORD *)(v1127 + 5136);
            while (v1224 != v1225)
            {
              v1226 = *(_QWORD *)(v1224 + 8);
              if (*(_BYTE *)(v1226 + 20))
              {
                v1227 = *(_OWORD *)(v1226 + 152);
                v1228 = *(_OWORD *)(v1226 + 184);
                *(_OWORD *)(v1226 + 64) = *(_OWORD *)(v1226 + 168);
                *(_OWORD *)(v1226 + 80) = v1228;
                *(_QWORD *)(v1226 + 96) = *(_QWORD *)(v1226 + 200);
                *(_OWORD *)(v1226 + 32) = *(_OWORD *)(v1226 + 136);
                *(_OWORD *)(v1226 + 48) = v1227;
                *(_OWORD *)(v1226 + 104) = *(_OWORD *)(v1226 + 208);
                *(_QWORD *)(v1226 + 120) = *(_QWORD *)(v1226 + 224);
              }
              v1224 += 16;
            }
            v1229 = *(_QWORD *)(v1127 + 5224);
            v1230 = *(_QWORD *)(v1127 + 5232);
            while (v1229 != v1230)
            {
              v1231 = *(_QWORD *)(v1229 + 8);
              if (*(_BYTE *)(v1231 + 20))
              {
                v1232 = v1231 + 16;
                v1233 = *(_OWORD *)(v1231 + 168);
                *(_OWORD *)(v1231 + 32) = *(_OWORD *)(v1231 + 152);
                *(_OWORD *)(v1231 + 48) = v1233;
                *(_QWORD *)(v1231 + 64) = *(_QWORD *)(v1231 + 184);
                *(_BYTE *)(v1231 + 72) = *(_BYTE *)(v1231 + 192);
                sub_20F6169C8(v1231 + 16);
                sub_20F616F2C(v1232);
              }
              v1229 += 16;
            }
            v1234 = *(_QWORD *)(v1127 + 5320);
            v1235 = *(_QWORD *)(v1127 + 5328);
            while (v1234 != v1235)
            {
              v1236 = *(_QWORD *)(v1234 + 8);
              if (*(_BYTE *)(v1236 + 20))
              {
                v1237 = *(_OWORD *)(v1236 + 504);
                *(_OWORD *)(v1236 + 192) = *(_OWORD *)(v1236 + 488);
                *(_OWORD *)(v1236 + 208) = v1237;
                v1238 = *(_OWORD *)(v1236 + 536);
                *(_OWORD *)(v1236 + 224) = *(_OWORD *)(v1236 + 520);
                *(_OWORD *)(v1236 + 240) = v1238;
                v1239 = *(_OWORD *)(v1236 + 440);
                *(_OWORD *)(v1236 + 128) = *(_OWORD *)(v1236 + 424);
                *(_OWORD *)(v1236 + 144) = v1239;
                v1240 = *(_OWORD *)(v1236 + 472);
                *(_OWORD *)(v1236 + 160) = *(_OWORD *)(v1236 + 456);
                *(_OWORD *)(v1236 + 176) = v1240;
                v1241 = *(_OWORD *)(v1236 + 376);
                *(_OWORD *)(v1236 + 64) = *(_OWORD *)(v1236 + 360);
                *(_OWORD *)(v1236 + 80) = v1241;
                v1242 = *(_OWORD *)(v1236 + 408);
                *(_OWORD *)(v1236 + 96) = *(_OWORD *)(v1236 + 392);
                *(_OWORD *)(v1236 + 112) = v1242;
                v1243 = *(__n128 *)(v1236 + 328);
                v1244 = *(_OWORD *)(v1236 + 344);
                *(__n128 *)(v1236 + 32) = v1243;
                *(_OWORD *)(v1236 + 48) = v1244;
                for (n = *(uint64_t ***)(v1236 + 296); n; n = (uint64_t **)*n)
                  v1243.n128_f64[0] = sub_20F6182A0((char *)n[5], (float64x2_t *)(v1236 + 32), v1243);
                sub_20F6178A8(v1236 + 16);
              }
              v1234 += 16;
            }
            v1246 = *(_QWORD *)(v1127 + 5416);
            for (ii = *(_QWORD *)(v1127 + 5424); v1246 != ii; v1246 += 16)
            {
              v1255 = *(_QWORD *)(v1246 + 8);
              if (*(_BYTE *)(v1255 + 20))
              {
                v1256 = *(_OWORD *)(v1255 + 224);
                *(_OWORD *)(v1255 + 64) = *(_OWORD *)(v1255 + 208);
                *(_OWORD *)(v1255 + 80) = v1256;
                *(_QWORD *)(v1255 + 96) = *(_QWORD *)(v1255 + 240);
                v1257 = *(_OWORD *)(v1255 + 192);
                *(_OWORD *)(v1255 + 32) = *(_OWORD *)(v1255 + 176);
                *(_OWORD *)(v1255 + 48) = v1257;
                sub_20F811C04(v1255 + 16);
              }
            }
            v1248 = *(_QWORD *)(v1127 + 5512);
            v1249 = *(_QWORD *)(v1127 + 5520);
            for (jj = v1127 + 6584; v1248 != v1249; v1248 += 16)
            {
              v1254 = *(_QWORD *)(v1248 + 8);
              if (*(_BYTE *)(v1254 + 20))
                *(_QWORD *)(v1254 + 32) = *(_QWORD *)(v1254 + 40);
            }
            *(_BYTE *)(v1127 + 6589) = 0;
            *(_BYTE *)(v1127 + 6584) = 0;
            *(_WORD *)(v1127 + 6587) = 0;
            *(_BYTE *)(v1127 + 6585) = *(_BYTE *)(v1127 + 6586);
            *(_QWORD *)&v1752 = 0;
            if (v1751 >= 6)
            {
              v1251 = v1750;
            }
            else
            {
              v1250 = 2 * v1751;
              if (2 * v1751 <= 6)
                v1250 = 6;
              v1751 = v1250;
              v1251 = (_OWORD *)operator new[]();
              if (v1750 != &v1731 && v1750)
                MEMORY[0x212BC6368]();
              v1750 = v1251;
              v1252 = v1752;
              if ((_QWORD)v1752)
              {
                *(_QWORD *)&v1752 = v1752 + 6;
                memmove(v1251 + 3, v1251, 8 * v1252);
                v1253 = *(_OWORD *)&oslog[16];
                *v1251 = *(_OWORD *)oslog;
                v1251[1] = v1253;
                v1251[2] = *(_OWORD *)&oslog[32];
                goto LABEL_1611;
              }
            }
            *v1251 = *(_OWORD *)oslog;
            v1251[1] = *(_OWORD *)&oslog[16];
            v1251[2] = *(_OWORD *)&oslog[32];
            *(_QWORD *)&v1752 = 6;
LABEL_1611:
            if ((*(unsigned int (**)(uint64_t))(*v1129 + 24))(v1127 + 24872))
            {
              (*(void (**)(uint64_t))(*v1129 + 32))(v1127 + 24872);
              (*(void (**)(uint64_t))(*(_QWORD *)v1131 + 104))(v1127 + 4712);
            }
LABEL_1613:
            v1258 = *(_DWORD *)(v1128 + 4);
            if (v1179 >= v1258)
              goto LABEL_1616;
            goto LABEL_1614;
          }
          if ((*(unsigned int (**)(uint64_t))(*v1129 + 24))(v1127 + 24872))
          {
            (*(void (**)(uint64_t))(*v1129 + 32))(v1127 + 24872);
            (*(void (**)(uint64_t))(*(_QWORD *)v1131 + 104))(v1127 + 4712);
          }
          if (v1178 < v1166 * *(double *)(v1127 + 24896) && v1177 >= *(_DWORD *)v1128)
          {
            if (*(_BYTE *)(v1128 + 8))
            {
              v1295 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
              v1148 = v1660;
              sub_20E8C81A0(v1295);
              (*(void (**)(uint64_t, uint64_t, double, double, double, double, double))(*v1129 + 64))(v1127 + 24872, v1177, v1175, v1192, v1178, v1166, v1134);
              v1274 = 1;
            }
            else
            {
              v1274 = 1;
              v1148 = v1660;
            }
            goto LABEL_1726;
          }
          if (v1179 >= *(_DWORD *)(v1128 + 4) || !*(_BYTE *)(v1128 + 40))
            goto LABEL_1613;
          v1201 = *(_QWORD *)(v1127 + 25464);
          if (*(_BYTE *)(v1128 + 593))
          {
            v1202 = (double *)(v1127 + 24928);
            if (v1201)
              v1202 = *(double **)(v1127 + 25448);
            v1203 = *(unsigned __int8 *)(v1128 + 592);
            sub_20F62BC2C(v1127 + 4712, (double *)v1843, v1202);
            v1204 = 1.0;
            v1205 = v1843[0];
            v1206 = 1.0;
            if (!v1203)
            {
              v1204 = 1.0e-10;
              v1206 = 1.0e20;
              if (*(double *)v1843 > 0.0)
              {
                v1204 = *(double *)v1843;
                v1206 = 1.0 / (*(double *)v1843 * *(double *)v1843);
              }
            }
            *(double *)(v1127 + 4720) = v1204;
            *(double *)(v1127 + 4728) = v1206;
            *(double *)(v1127 + 4736) = v1204;
            *(double *)(v1127 + 4744) = v1206;
            *(double *)(v1127 + 4752) = v1204;
            *(double *)(v1127 + 4760) = v1206;
            *(double *)(v1127 + 4768) = v1204;
            v1207 = 1.0e-10;
            v1208 = 1.0e20;
            *(double *)(v1127 + 4776) = v1206;
            if (*(double *)&v1205 > 0.0)
            {
              v1207 = *(double *)&v1205;
              v1208 = 1.0 / (*(double *)&v1205 * *(double *)&v1205);
            }
            *(double *)(v1127 + 4784) = v1207;
            *(double *)(v1127 + 4792) = v1208;
            if (v1203)
              v1209 = 1.0;
            else
              v1209 = v1207;
            if (v1203)
              v1210 = 1.0;
            else
              v1210 = v1208;
            *(double *)(v1127 + 4816) = v1209;
            *(double *)(v1127 + 4824) = v1210;
            *(_BYTE *)(jj + 5) = 0;
            *(_DWORD *)(v1127 + 6584) = 0;
          }
          else if (v1201)
          {
            v1843[0] = *(void **)(v1127 + 25448);
            LODWORD(v1843[1]) = 0;
            sub_20F627D2C(v1127 + 4712, (double **)v1843, *(_BYTE *)(v1128 + 592));
          }
          else
          {
            sub_20F627590(v1127 + 4712, (double *)(v1127 + 24928), *(_BYTE *)(v1128 + 592));
          }
          *(double *)(v1127 + 25608) = sub_20F62AAD0(v1127 + 4712, &v1731);
          v1258 = *(_DWORD *)(v1128 + 4);
          if (v1179 >= v1258)
            goto LABEL_1616;
LABEL_1614:
          v1259 = *(_QWORD *)(v1127 + 25504);
          v1148 = v1660;
          if (v1259)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1259 + 48))(v1259);
            v1258 = *(_DWORD *)(v1128 + 4);
LABEL_1616:
            v1148 = v1660;
          }
          v1177 = LODWORD(object[6]);
          if (LODWORD(object[6]) >= v1258)
            goto LABEL_1727;
        }
      }
    }
    v1155 = 0;
    v1156 = (v1150 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v1156 < 3)
    {
      v1157 = (uint64_t *)v1149;
    }
    else
    {
      v1157 = (uint64_t *)v1149;
      if ((unint64_t)((char *)v1153 - (char *)v1149) >= 0x20)
      {
        v1158 = v1156 + 1;
        v1155 = v1158 & 0x3FFFFFFFFFFFFFFCLL;
        v1157 = (uint64_t *)v1149 + (v1158 & 0x3FFFFFFFFFFFFFFCLL);
        v1159 = v1153 + 1;
        v1160 = v1149 + 1;
        v1161 = v1158 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1162 = *v1160;
          *(v1159 - 1) = *(v1160 - 1);
          *v1159 = v1162;
          v1159 += 2;
          v1160 += 2;
          v1161 -= 4;
        }
        while (v1161);
        if (v1158 == v1155)
          goto LABEL_1479;
      }
    }
    do
    {
      v1163 = *v1157++;
      *((_QWORD *)v1153 + v1155++) = v1163;
    }
    while (v1157 != (uint64_t *)((char *)v1149 + v1151));
LABEL_1479:
    *(_QWORD *)&v1752 = v1155;
    goto LABEL_1480;
  }
  if (*(_BYTE *)(v1128 + 8))
  {
    v1146 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Linearize FAILED", 16);
    std::ios_base::getloc((const std::ios_base *)((char *)v1146 + *(_QWORD *)(*v1146 - 24)));
    v1147 = std::locale::use_facet((const std::locale *)oslog, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v1147->__vftable[2].~facet_0)(v1147, 10);
    std::locale::~locale((std::locale *)oslog);
    std::ostream::put();
    std::ostream::flush();
  }
  LODWORD(object[7]) = 0;
  *(_BYTE *)(v1127 + 6600) = v1135;
  sub_20F6284F4((uint64_t)v1794);
  v1148 = v1660;
LABEL_1730:
  kdebug_trace();
  if (v1148)
  {
    oslog[23] = 12;
    strcpy(oslog, "OfflineMapBA");
    sub_20F4ACDC8((uint64_t)object, MEMORY[0x24BEDB318], (uint64_t)oslog);
    if ((oslog[23] & 0x80000000) != 0)
      operator delete(*(void **)oslog);
  }
  v1375 = (_QWORD *)v1721;
  v1376 = *(_QWORD *)(v1721 + 5128);
  v1377 = *(_QWORD *)(v1721 + 5136);
  while (v1376 != v1377)
  {
    v1378 = *(_QWORD *)(v1376 + 8);
    if (*(_BYTE *)(v1378 + 20))
    {
      v1379 = *(_QWORD *)(v1378 + 24);
      v1373.f64[0] = *(float64_t *)(v1378 + 48);
      v1380 = *(int64x2_t *)(v1378 + 32);
      _Q2.i64[0] = *(_QWORD *)(v1378 + 72);
      v1381 = *(int64x2_t *)(v1378 + 56);
      _D4 = *(double *)(v1378 + 96);
      _Q5 = *(float64x2_t *)(v1378 + 80);
      v1384 = (float64x2_t)vzip1q_s64(v1380, v1381);
      _Q3 = (float64x2_t)vzip2q_s64(v1380, v1381);
      v1386 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
      v1387 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
      v1388 = *(double *)(v1378 + 120);
      _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1384, *(double *)(v1378 + 104)), _Q3, *(float64x2_t *)(v1378 + 104), 1), (float64x2_t)vzip1q_s64((int64x2_t)v1373, _Q2), v1388);
      _D16 = *(_QWORD *)(v1378 + 112);
      __asm { FMLA            D3, D16, V5.D[1] }
      _Q3.f64[0] = _Q3.f64[0] + _D4 * v1388;
      v1391 = vnegq_f64(_Q21);
      v1392 = (int64x2_t)vextq_s8(v1387, v1386, 8uLL);
      v1393 = (float64x2_t)vzip1q_s64(v1380, v1392);
      v1394 = (float64x2_t)vzip2q_s64((int64x2_t)v1384, v1392);
      *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
      *(float64_t *)(v1379 + 16) = v1373.f64[0];
      *(float64x2_t *)v1379 = v1393;
      *(_QWORD *)(v1379 + 40) = _Q2.i64[0];
      *(float64x2_t *)(v1379 + 24) = v1394;
      *(double *)(v1379 + 64) = _D4;
      *(float64x2_t *)(v1379 + 48) = _Q5;
      _Q0 = vmulq_f64(v1373, v1391);
      __asm
      {
        FMLS            D0, D2, V21.D[1]
        FMLS            D0, D4, V3.D[0]
      }
      v1373 = vnegq_f64(_Q0);
      *(float64x2_t *)(v1379 + 72) = vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v1393, v1391.f64[0]), v1394, _Q21, 1), _Q5, _Q3.f64[0], 0));
      *(float64_t *)(v1379 + 88) = v1373.f64[0];
    }
    v1376 += 16;
  }
  v1396 = v1375[605];
  v1397 = v1375[606];
  while (v1396 != v1397)
  {
    v1398 = *(_QWORD *)(v1396 + 8);
    if (*(_BYTE *)(v1398 + 20))
    {
      v1399 = *(_QWORD *)(v1398 + 24);
      v1373.f64[0] = *(float64_t *)(v1398 + 48);
      v1400 = *(int64x2_t *)(v1398 + 32);
      _Q2.i64[0] = *(_QWORD *)(v1398 + 72);
      v1401 = *(int64x2_t *)(v1398 + 56);
      _D4 = *(double *)(v1398 + 96);
      _Q5 = *(float64x2_t *)(v1398 + 80);
      v1404 = (float64x2_t)vzip1q_s64(v1400, v1401);
      _Q3 = (float64x2_t)vzip2q_s64(v1400, v1401);
      v1406 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
      v1407 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
      v1408 = *(double *)(v1398 + 120);
      _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1404, *(double *)(v1398 + 104)), _Q3, *(float64x2_t *)(v1398 + 104), 1), (float64x2_t)vzip1q_s64((int64x2_t)v1373, _Q2), v1408);
      _D16 = *(_QWORD *)(v1398 + 112);
      __asm { FMLA            D3, D16, V5.D[1] }
      _Q3.f64[0] = _Q3.f64[0] + _D4 * v1408;
      v1411 = vnegq_f64(_Q21);
      v1412 = (int64x2_t)vextq_s8(v1407, v1406, 8uLL);
      v1413 = (float64x2_t)vzip1q_s64(v1400, v1412);
      v1414 = (float64x2_t)vzip2q_s64((int64x2_t)v1404, v1412);
      *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
      *(float64_t *)(v1399 + 16) = v1373.f64[0];
      *(float64x2_t *)v1399 = v1413;
      *(_QWORD *)(v1399 + 40) = _Q2.i64[0];
      *(float64x2_t *)(v1399 + 24) = v1414;
      *(double *)(v1399 + 64) = _D4;
      *(float64x2_t *)(v1399 + 48) = _Q5;
      _Q0 = vmulq_f64(v1373, v1411);
      __asm
      {
        FMLS            D0, D2, V21.D[1]
        FMLS            D0, D4, V3.D[0]
      }
      v1373 = vnegq_f64(_Q0);
      *(float64x2_t *)(v1399 + 72) = vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v1413, v1411.f64[0]), v1414, _Q21, 1), _Q5, _Q3.f64[0], 0));
      *(float64_t *)(v1399 + 88) = v1373.f64[0];
    }
    v1396 += 16;
  }
  v1416 = v1375[617];
  v1417 = v1375[618];
  while (v1416 != v1417)
  {
    v1418 = *(_QWORD *)(v1416 + 8);
    if (*(_BYTE *)(v1418 + 20))
    {
      v1419 = *(_QWORD *)(v1418 + 24);
      v1420 = *(_QWORD *)(v1418 + 96);
      v1421 = *(_OWORD *)(v1418 + 80);
      v1422 = *(_OWORD *)(v1418 + 32);
      v1423 = *(_OWORD *)(v1418 + 48);
      *(_OWORD *)(v1419 + 128) = *(_OWORD *)(v1418 + 64);
      *(_OWORD *)(v1419 + 144) = v1421;
      *(_QWORD *)(v1419 + 160) = v1420;
      *(_OWORD *)(v1419 + 96) = v1422;
      *(_OWORD *)(v1419 + 112) = v1423;
    }
    v1416 += 16;
  }
  v1424 = v1375[689];
  for (kk = v1375[690]; v1424 != kk; v1424 += 16)
  {
    v1426 = *(_QWORD *)(v1424 + 8);
    v1427 = *(_QWORD *)(v1426 + 24);
    if (v1427 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1427 + 24))(v1427) & 1) != 0
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 90, (uint64_t)"this->m_entity && this->m_entity->isSetup()", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v1430 = *(_QWORD *)(v1426 + 24);
      v1431 = *(uint64_t **)(v1430 + 96);
      v1428.f64[0] = *(float64_t *)(v1426 + 32);
      v1432 = *v1431;
      v1433 = (float64x2_t *)v1431[2];
      v1434 = v1431[4];
      v1435 = (float64x2_t *)v1431[6];
      v1429.f64[0] = *(float64_t *)(v1430 + 80);
      _Q2 = *(float64x2_t *)(v1430 + 64);
      *(_QWORD *)&v1437 = *(_OWORD *)&vmulq_f64(v1428, v1429);
      _Q0 = vmulq_n_f64(_Q2, v1428.f64[0]);
      _D4 = *(_QWORD *)(v1434 + 40);
      v1440 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1434, _Q0.f64[0]), *(float64x2_t *)(v1434 + 24), _Q0, 1), *(float64x2_t *)(v1434 + 48), v1437);
      __asm { FMLA            D2, D4, V0.D[1] }
      _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v1434 + 64), v1437);
      _Q0.f64[0] = v1435[1].f64[0];
      v1441 = vaddq_f64(_Q2, _Q0);
      _Q1 = vaddq_f64(v1440, *v1435);
      _D4 = *(_QWORD *)(v1432 + 40);
      v1444 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1432, _Q1.f64[0]), *(float64x2_t *)(v1432 + 24), _Q1, 1), *(float64x2_t *)(v1432 + 48), v1441.f64[0]);
      __asm { FMLA            D2, D4, V1.D[1] }
      _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v1432 + 64), v1441.f64[0]);
      v1441.f64[0] = v1433[1].f64[0];
      *(float64x2_t *)(v1430 + 8) = vaddq_f64(v1444, *v1433);
      *(_QWORD *)(v1430 + 24) = *(_OWORD *)&vaddq_f64(_Q2, v1441);
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1426 + 24) + 16))(*(_QWORD *)(v1426 + 24)) & 1) != 0
        || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 117, (uint64_t)"this->m_entity->update()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        continue;
      }
    }
    abort();
  }
  v1445 = v1375[629];
  for (mm = v1375[630]; v1445 != mm; v1445 += 16)
  {
    v1449 = *(_QWORD *)(v1445 + 8);
    if (*(_BYTE *)(v1449 + 20))
      **(_QWORD **)(v1449 + 24) = *(_QWORD *)(v1449 + 32);
  }
  v1447 = v1375[653];
  v1448 = v1375[654];
  while (v1447 != v1448)
  {
    v1450 = *(_QWORD *)(v1447 + 8);
    if (*(_BYTE *)(v1450 + 20))
    {
      v1451 = *(_QWORD *)(v1450 + 24);
      v1452 = *(_OWORD *)(v1450 + 48);
      *(_OWORD *)v1451 = *(_OWORD *)(v1450 + 32);
      *(_OWORD *)(v1451 + 16) = v1452;
      v1453 = *(_QWORD *)(v1450 + 64);
      *(_BYTE *)(v1451 + 40) = *(_BYTE *)(v1450 + 72);
      *(_QWORD *)(v1451 + 32) = v1453;
      sub_20F62E744(v1450 + 16);
      *(_QWORD *)(v1450 + 88) = *(_QWORD *)(v1450 + 80);
      if (*(_QWORD *)(v1450 + 128))
      {
        v1454 = *(_QWORD **)(v1450 + 120);
        if (v1454)
        {
          do
          {
            v1455 = (_QWORD *)*v1454;
            operator delete(v1454);
            v1454 = v1455;
          }
          while (v1455);
        }
        *(_QWORD *)(v1450 + 120) = 0;
        v1456 = *(_QWORD *)(v1450 + 112);
        if (v1456)
        {
          for (nn = 0; nn != v1456; ++nn)
            *(_QWORD *)(*(_QWORD *)(v1450 + 104) + 8 * nn) = 0;
        }
        *(_QWORD *)(v1450 + 128) = 0;
      }
    }
    v1447 += 16;
  }
  v1458 = v1375[665];
  v1459 = v1375[666];
  while (v1458 != v1459)
  {
    v1460 = *(_QWORD *)(v1458 + 8);
    if (*(_BYTE *)(v1460 + 20))
    {
      v1461 = *(_OWORD **)(v1460 + 24);
      v1462 = *(_OWORD *)(v1460 + 48);
      *v1461 = *(_OWORD *)(v1460 + 32);
      v1461[1] = v1462;
      v1463 = *(_OWORD *)(v1460 + 64);
      v1464 = *(_OWORD *)(v1460 + 80);
      v1465 = *(_OWORD *)(v1460 + 112);
      v1461[4] = *(_OWORD *)(v1460 + 96);
      v1461[5] = v1465;
      v1461[2] = v1463;
      v1461[3] = v1464;
      v1466 = *(_OWORD *)(v1460 + 128);
      v1467 = *(_OWORD *)(v1460 + 144);
      v1468 = *(_OWORD *)(v1460 + 176);
      v1461[8] = *(_OWORD *)(v1460 + 160);
      v1461[9] = v1468;
      v1461[6] = v1466;
      v1461[7] = v1467;
      v1469 = *(_OWORD *)(v1460 + 192);
      v1470 = *(_OWORD *)(v1460 + 208);
      v1471 = *(_OWORD *)(v1460 + 240);
      v1461[12] = *(_OWORD *)(v1460 + 224);
      v1461[13] = v1471;
      v1461[10] = v1469;
      v1461[11] = v1470;
      sub_20F62F34C(v1460 + 16);
      *(_QWORD *)(v1460 + 264) = *(_QWORD *)(v1460 + 256);
      if (*(_QWORD *)(v1460 + 304))
      {
        v1472 = *(_QWORD **)(v1460 + 296);
        if (v1472)
        {
          do
          {
            v1473 = (_QWORD *)*v1472;
            operator delete(v1472);
            v1472 = v1473;
          }
          while (v1473);
        }
        *(_QWORD *)(v1460 + 296) = 0;
        v1474 = *(_QWORD *)(v1460 + 288);
        if (v1474)
        {
          for (i1 = 0; i1 != v1474; ++i1)
            *(_QWORD *)(*(_QWORD *)(v1460 + 280) + 8 * i1) = 0;
        }
        *(_QWORD *)(v1460 + 304) = 0;
      }
    }
    v1458 += 16;
  }
  v1476 = v1375[677];
  v1477 = v1375[678];
  while (v1476 != v1477)
  {
    v1478 = *(_QWORD *)(v1476 + 8);
    if (*(_BYTE *)(v1478 + 20))
    {
      v1479 = *(_QWORD *)(v1478 + 24);
      *(_OWORD *)v1479 = *(_OWORD *)(v1478 + 32);
      v1480 = *(_OWORD *)(v1478 + 48);
      v1481 = *(_OWORD *)(v1478 + 64);
      v1482 = *(_OWORD *)(v1478 + 80);
      *(_QWORD *)(v1479 + 64) = *(_QWORD *)(v1478 + 96);
      *(_OWORD *)(v1479 + 32) = v1481;
      *(_OWORD *)(v1479 + 48) = v1482;
      *(_OWORD *)(v1479 + 16) = v1480;
      *(_QWORD *)(v1478 + 112) = *(_QWORD *)(v1478 + 104);
      if (*(_QWORD *)(v1478 + 152))
      {
        v1483 = *(_QWORD **)(v1478 + 144);
        if (v1483)
        {
          do
          {
            v1484 = (_QWORD *)*v1483;
            operator delete(v1483);
            v1483 = v1484;
          }
          while (v1484);
        }
        *(_QWORD *)(v1478 + 144) = 0;
        v1485 = *(_QWORD *)(v1478 + 136);
        if (v1485)
        {
          for (i2 = 0; i2 != v1485; ++i2)
            *(_QWORD *)(*(_QWORD *)(v1478 + 128) + 8 * i2) = 0;
        }
        *(_QWORD *)(v1478 + 152) = 0;
      }
    }
    v1476 += 16;
  }
  if ((*v1661)[2].__shared_weak_owners_)
  {
    v1487 = (*v1661)[2].__vftable[1].~__shared_weak_count_0;
    v1488 = atan2(-*((double *)v1487 + 5), *((long double *)v1487 + 8));
    v1489 = asin(*((long double *)v1487 + 2));
    v1490 = atan2(-*((double *)v1487 + 1), *(long double *)v1487);
    sub_20F49BBF8(&v1835);
    if (**(int **)(v1835 + 56) <= 2)
    {
      v1491 = *(unsigned __int8 *)(v1835 + 72);
      v1492 = sub_20E8C31DC(v1835, "OSLogSurrogateAppender", 1, 0);
      v1493 = v1492;
      if (v1491 || v1492)
      {
        *(_QWORD *)&v1794[0].f64[0] = &v1835;
        *(std::chrono::steady_clock::time_point *)&v1794[0].f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
        *(std::chrono::system_clock::time_point *)&v1794[1].f64[0] = (std::chrono::system_clock::time_point)std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v1794[1].f64[1]) = 2;
        *(_QWORD *)&v1794[2].f64[0] = "unknown file";
        LODWORD(v1794[2].f64[1]) = 288;
        v1794[4].f64[0] = 0.0;
        *(_QWORD *)&v1794[3].f64[0] = "unknown function";
        v1794[3].f64[1] = 0.0;
        v1494 = **(_QWORD **)&v1794[0].f64[0];
        v1495 = **(_QWORD **)&v1794[0].f64[0] + 16;
        if (*(char *)(**(_QWORD **)&v1794[0].f64[0] + 39) < 0)
        {
          v1497 = *(const char **)(v1494 + 16);
          v1496 = *(_QWORD *)(v1494 + 24);
          v1499 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v1499 & 1) != 0)
            goto LABEL_1805;
        }
        else
        {
          v1496 = *(unsigned __int8 *)(**(_QWORD **)&v1794[0].f64[0] + 39);
          v1497 = (const char *)(**(_QWORD **)&v1794[0].f64[0] + 16);
          v1498 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v1498 & 1) != 0)
            goto LABEL_1805;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)oslog);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)oslog);
          if (oslog[24] && (oslog[23] & 0x80000000) != 0)
            operator delete(*(void **)oslog);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_1805:
        if (byte_254A4A4F8[23] >= 0)
          v1500 = byte_254A4A4F8;
        else
          v1500 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v1501 = byte_254A4A4F8[23];
        else
          v1501 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)oslog = os_log_create(v1500, v1497);
        v1502 = &oslog[8];
        if (v1501 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v1501 >= 0x17)
        {
          v1503 = (v1501 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v1501 | 7) != 0x17)
            v1503 = v1501 | 7;
          v1504 = v1503 + 1;
          v1502 = operator new(v1503 + 1);
          *(_QWORD *)&oslog[24] = v1504 | 0x8000000000000000;
          *(_QWORD *)&oslog[8] = v1502;
          *(_QWORD *)&oslog[16] = v1501;
        }
        else
        {
          oslog[31] = v1501;
          if (!v1501)
          {
LABEL_1819:
            v1502[v1501] = 0;
            oslog[32] = 1;
            v1505 = &oslog[40];
            if (v1496 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v1496 >= 0x17)
            {
              v1507 = (v1496 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v1496 | 7) != 0x17)
                v1507 = v1496 | 7;
              v1508 = v1507 + 1;
              v1505 = operator new(v1507 + 1);
              v1506 = v1495;
              *(_QWORD *)&oslog[56] = v1508 | 0x8000000000000000;
              *(_QWORD *)&oslog[40] = v1505;
              *(_QWORD *)&oslog[48] = v1496;
            }
            else
            {
              v1506 = v1495;
              oslog[63] = v1496;
              if (!v1496)
                goto LABEL_1827;
            }
            memmove(v1505, v1497, v1496);
LABEL_1827:
            v1505[v1496] = 0;
            oslog[64] = 1;
            v1509 = *(NSObject **)oslog;
            if ((oslog[63] & 0x80000000) != 0)
              operator delete(*(void **)&oslog[40]);
            if (oslog[32] && (oslog[31] & 0x80000000) != 0)
              operator delete(*(void **)&oslog[8]);
            if (*(_QWORD *)oslog)
              os_release(*(void **)oslog);
            v1510 = v1488 * 57.2957795;
            v1511 = v1489 * 57.2957795;
            v1512 = v1490 * 57.2957795;
            if (v1493 && *(_QWORD *)(v1493 + 24))
            {
              v1513 = _os_log_pack_size();
              v1514 = (std::__shared_weak_count_vtbl *)operator new(v1513, (std::align_val_t)8uLL);
              v1515 = (std::__shared_weak_count *)operator new();
              v1516 = v1515;
              v1515->__shared_owners_ = 0;
              v1517 = (unint64_t *)&v1515->__shared_owners_;
              v1515->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v1515->__shared_weak_owners_ = 0;
              v1515[1].__vftable = v1514;
              *(_QWORD *)oslog = v1514;
              *(_QWORD *)&oslog[8] = v1514;
              *(_QWORD *)&oslog[16] = v1515;
              do
                v1518 = __ldxr(v1517);
              while (__stxr(v1518 + 1, v1517));
              memset(&oslog[24], 0, 24);
              do
                v1519 = __ldaxr(v1517);
              while (__stlxr(v1519 - 1, v1517));
              if (!v1519)
              {
                ((void (*)(std::__shared_weak_count *))v1515->__on_zero_shared)(v1515);
                std::__shared_weak_count::__release_weak(v1516);
              }
              v1520 = *(_QWORD *)oslog;
              v1521 = _os_log_pack_fill();
              *(_DWORD *)v1521 = 134218496;
              *(double *)(v1521 + 4) = v1510;
              *(_WORD *)(v1521 + 12) = 2048;
              *(double *)(v1521 + 14) = v1511;
              *(_WORD *)(v1521 + 22) = 2048;
              *(double *)(v1521 + 24) = v1512;
              v1522 = (char *)operator new();
              v1523 = *(unsigned __int8 *)(v1494 + 39);
              if ((v1523 & 0x80u) == 0)
                v1524 = v1506;
              else
                v1524 = *(_QWORD *)(v1494 + 16);
              if ((v1523 & 0x80u) != 0)
                v1523 = *(_QWORD *)(v1494 + 24);
              *(_QWORD *)v1522 = v1520;
              *(_OWORD *)(v1522 + 8) = *(_OWORD *)&oslog[8];
              *(_QWORD *)&oslog[8] = 0;
              *(_QWORD *)&oslog[16] = 0;
              *(_OWORD *)(v1522 + 24) = *(_OWORD *)&oslog[24];
              *(_QWORD *)&oslog[24] = 0;
              *(_QWORD *)&oslog[32] = 0;
              *((_QWORD *)v1522 + 5) = v1524;
              *((_QWORD *)v1522 + 6) = v1523;
              v1522[56] = 2;
              *(_QWORD *)&v1806[0] = 0;
              v1843[0] = v1522;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1493 + 24) + 40))(*(_QWORD *)(v1493 + 24), v1843);
              v1525 = v1843[0];
              v1843[0] = 0;
              if (v1525)
              {
                v1526 = (std::__shared_weak_count *)*((_QWORD *)v1525 + 4);
                if (v1526)
                {
                  v1527 = (unint64_t *)&v1526->__shared_owners_;
                  do
                    v1528 = __ldaxr(v1527);
                  while (__stlxr(v1528 - 1, v1527));
                  if (!v1528)
                  {
                    ((void (*)(std::__shared_weak_count *))v1526->__on_zero_shared)(v1526);
                    std::__shared_weak_count::__release_weak(v1526);
                  }
                }
                v1529 = (std::__shared_weak_count *)*((_QWORD *)v1525 + 2);
                if (v1529)
                {
                  v1530 = (unint64_t *)&v1529->__shared_owners_;
                  do
                    v1531 = __ldaxr(v1530);
                  while (__stlxr(v1531 - 1, v1530));
                  if (!v1531)
                  {
                    ((void (*)(std::__shared_weak_count *))v1529->__on_zero_shared)(v1529);
                    std::__shared_weak_count::__release_weak(v1529);
                  }
                }
                MEMORY[0x212BC6398](v1525, 0x10F0C40B62ED6C6);
                v1532 = *(_QWORD *)&v1806[0];
                *(_QWORD *)&v1806[0] = 0;
                if (v1532)
                {
                  v1533 = *(std::__shared_weak_count **)(v1532 + 32);
                  if (v1533)
                  {
                    v1534 = (unint64_t *)&v1533->__shared_owners_;
                    do
                      v1535 = __ldaxr(v1534);
                    while (__stlxr(v1535 - 1, v1534));
                    if (!v1535)
                    {
                      ((void (*)(std::__shared_weak_count *))v1533->__on_zero_shared)(v1533);
                      std::__shared_weak_count::__release_weak(v1533);
                    }
                  }
                  v1536 = *(std::__shared_weak_count **)(v1532 + 16);
                  if (v1536)
                  {
                    v1537 = (unint64_t *)&v1536->__shared_owners_;
                    do
                      v1538 = __ldaxr(v1537);
                    while (__stlxr(v1538 - 1, v1537));
                    if (!v1538)
                    {
                      ((void (*)(std::__shared_weak_count *))v1536->__on_zero_shared)(v1536);
                      std::__shared_weak_count::__release_weak(v1536);
                    }
                  }
                  MEMORY[0x212BC6398](v1532, 0x10F0C40B62ED6C6);
                }
              }
              v1539 = *(std::__shared_weak_count **)&oslog[32];
              if (*(_QWORD *)&oslog[32])
              {
                v1540 = (unint64_t *)(*(_QWORD *)&oslog[32] + 8);
                do
                  v1541 = __ldaxr(v1540);
                while (__stlxr(v1541 - 1, v1540));
                if (!v1541)
                {
                  ((void (*)(std::__shared_weak_count *))v1539->__on_zero_shared)(v1539);
                  std::__shared_weak_count::__release_weak(v1539);
                }
              }
              v1542 = *(std::__shared_weak_count **)&oslog[16];
              if (*(_QWORD *)&oslog[16])
              {
                v1543 = (unint64_t *)(*(_QWORD *)&oslog[16] + 8);
                do
                  v1544 = __ldaxr(v1543);
                while (__stlxr(v1544 - 1, v1543));
                if (!v1544)
                {
                  ((void (*)(std::__shared_weak_count *))v1542->__on_zero_shared)(v1542);
                  std::__shared_weak_count::__release_weak(v1542);
                }
              }
            }
            else
            {
              os_log_type_enabled(v1509, OS_LOG_TYPE_DEBUG);
              *(_DWORD *)oslog = 134218496;
              *(double *)&oslog[4] = v1510;
              *(_WORD *)&oslog[12] = 2048;
              *(double *)&oslog[14] = v1511;
              *(_WORD *)&oslog[22] = 2048;
              *(double *)&oslog[24] = v1512;
              v1545 = (void *)_os_log_send_and_compose_impl();
              if (v1545)
                free(v1545);
            }
            if (v1491)
            {
              sub_20E8C003C((uint64_t)v1794, "After optimize: Roll %f, pitch %f, Yaw %f", v1510, v1511, v1512);
              sub_20E863570((uint64_t)v1794);
            }
            sub_20E863570((uint64_t)v1794);
            v1546 = v1794[4].f64[0];
            if (*(_QWORD *)&v1794[4].f64[0])
            {
              v1547 = (unint64_t *)(*(_QWORD *)&v1794[4].f64[0] + 8);
              do
                v1548 = __ldaxr(v1547);
              while (__stlxr(v1548 - 1, v1547));
              if (!v1548)
              {
                (*(void (**)(float64_t))(**(_QWORD **)&v1546 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v1546));
                std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v1546);
              }
            }
            goto LABEL_1889;
          }
        }
        memmove(v1502, v1500, v1501);
        goto LABEL_1819;
      }
    }
  }
LABEL_1889:
  *((_QWORD *)&v1761 + 1) = 0;
  if (v1760 != v1759 && v1760 != 0)
    MEMORY[0x212BC6368]();
  v1756 = 0;
  if (v1754 != v1753 && v1754)
    MEMORY[0x212BC6368]();
  *(_QWORD *)&v1752 = 0;
  if (v1750 != &v1731 && v1750)
    MEMORY[0x212BC6368]();
  *((_QWORD *)&v1730 + 1) = 0;
  if (object[74] != &object[10] && object[74])
    MEMORY[0x212BC6368]();
  if (SHIBYTE(object[5]) < 0)
  {
    operator delete(object[3]);
    if ((SHIBYTE(object[2]) & 0x80000000) == 0)
    {
LABEL_1905:
      sub_20E8D1F68((uint64_t)&v1719, v1720[0]);
      v1550 = (_QWORD *)v1721;
      v1721 = 0;
      if (!v1550)
        goto LABEL_1907;
      goto LABEL_1906;
    }
  }
  else if ((SHIBYTE(object[2]) & 0x80000000) == 0)
  {
    goto LABEL_1905;
  }
  operator delete(object[0]);
  sub_20E8D1F68((uint64_t)&v1719, v1720[0]);
  v1550 = (_QWORD *)v1721;
  v1721 = 0;
  if (v1550)
  {
LABEL_1906:
    v1551 = sub_20F4E0254(v1550);
    MEMORY[0x212BC6398](v1551, 0x10F2C408963B0DFLL);
  }
LABEL_1907:
  if (v1788 < 0)
  {
    operator delete(v1787);
    if ((v1786 & 0x80000000) == 0)
    {
LABEL_1909:
      if ((v1784 & 0x80000000) == 0)
        goto LABEL_1910;
LABEL_1918:
      operator delete(v1783);
      v1552 = v1776;
      if (v1776 != v1775)
        goto LABEL_1911;
LABEL_1919:
      v1553 = 4;
      v1552 = v1775;
      goto LABEL_1920;
    }
  }
  else if ((v1786 & 0x80000000) == 0)
  {
    goto LABEL_1909;
  }
  operator delete(v1785);
  if (v1784 < 0)
    goto LABEL_1918;
LABEL_1910:
  v1552 = v1776;
  if (v1776 == v1775)
    goto LABEL_1919;
LABEL_1911:
  if (!v1552)
    goto LABEL_1921;
  v1553 = 5;
LABEL_1920:
  (*(void (**)(void))(*v1552 + 8 * v1553))();
LABEL_1921:
  v1554 = v1774;
  if (v1774 == v1773)
  {
    v1555 = 4;
    v1554 = v1773;
  }
  else
  {
    if (!v1774)
      goto LABEL_1926;
    v1555 = 5;
  }
  (*(void (**)(void))(*v1554 + 8 * v1555))();
LABEL_1926:
  v1556 = v1772;
  if (v1772 == v1771)
  {
    v1557 = 4;
    v1556 = v1771;
  }
  else
  {
    if (!v1772)
      goto LABEL_1931;
    v1557 = 5;
  }
  (*(void (**)(void))(*v1556 + 8 * v1557))();
LABEL_1931:
  v1558 = v1770;
  if (v1770 == v1769)
  {
    v1559 = 4;
    v1558 = v1769;
    goto LABEL_1935;
  }
  if (v1770)
  {
    v1559 = 5;
LABEL_1935:
    (*(void (**)(void))(*v1558 + 8 * v1559))();
  }
  v1768 = 0;
  result = (uint64_t)v1767;
  if (v1767 != &v1766 && v1767)
    return MEMORY[0x212BC6368]();
  return result;
}

void sub_20F478618(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x14D8]))
  {
    if (SLOBYTE(STACK[0x14D7]) < 0)
      operator delete((void *)STACK[0x14C0]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x11E8]);
  sub_20F2C524C((uint64_t)&STACK[0x2A0]);
  sub_20E8D1F68((uint64_t)&STACK[0x230], STACK[0x238]);
  sub_20F4A0590((_QWORD **)&STACK[0x248]);
  sub_20F6304A4((uint64_t)&STACK[0xB70]);
  _Unwind_Resume(a1);
}

uint64_t sub_20F47901C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double *v13;
  double *v14;
  double v15;
  double v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  double v20;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  size_t v27;
  const char *v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  const char *v31;
  size_t v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  std::__shared_weak_count_vtbl *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  void *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _OWORD *v75;
  void *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  int64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  int v86;
  _QWORD *v87;
  _QWORD *v88;
  char *v89;
  void **v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  unint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  void **v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  void *v110;
  void *v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  double v116;
  double v117;
  double v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  size_t v124;
  const char *v125;
  unsigned __int8 v126;
  unsigned __int8 v127;
  const char *v128;
  size_t v129;
  void **v130;
  uint64_t v131;
  uint64_t v132;
  void **v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  double v137;
  double v138;
  double v139;
  size_t v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  void *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  void *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  _QWORD *v187;
  _QWORD *v188;
  char v189;
  char *v190;
  uint64_t v191;
  char *v192;
  uint64_t *v193;
  uint64_t v194;
  char *v195;
  char *v196;
  unint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  _BYTE *v204;
  _DWORD *v205;
  char *v206;
  int64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  _OWORD *v212;
  char *v213;
  uint64_t v214;
  __int128 v215;
  int v216;
  unint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  int v232;
  uint64_t *v233;
  _QWORD *v234;
  const char *v235;
  _OWORD *v236;
  unsigned int v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  char *v248;
  char *v249;
  unint64_t v250;
  unint64_t v251;
  char *v252;
  char *v253;
  unsigned int v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  _QWORD *v275;
  _QWORD *v276;
  void *v277;
  _QWORD *v278;
  _QWORD *v279;
  char *v280;
  unint64_t v281;
  uint64_t v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  _BYTE *v290;
  unsigned int *v291;
  int64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  _OWORD *v297;
  char *v298;
  uint64_t v299;
  __int128 v300;
  unsigned int v301;
  __n128 v302;
  uint64_t **v303;
  uint64_t *v304;
  uint64_t *v305;
  __int128 *v306;
  unsigned __int8 v307;
  BOOL v308;
  uint64_t v309;
  uint64_t i;
  unsigned __int8 v311;
  __int128 v312;
  uint64_t v313;
  _QWORD *v314;
  _QWORD *v315;
  uint64_t v316;
  uint64_t j;
  void *v318;
  void *v319;
  unint64_t v320;
  void *v321;
  void *v322;
  unint64_t v323;
  _QWORD *v324;
  unint64_t v325;
  char *v326;
  _QWORD *v327;
  char *v328;
  _QWORD *v329;
  _QWORD *v330;
  _QWORD *v331;
  _QWORD *v332;
  void *v333;
  uint64_t v334;
  _QWORD *v335;
  _QWORD *v336;
  void *v337;
  _QWORD *v338;
  _QWORD *v339;
  uint64_t v340;
  uint64_t v341;
  unsigned int v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  unsigned int v346;
  unint64_t v347;
  unint64_t v348;
  uint64_t v349;
  unsigned int v350;
  uint64_t v352;
  int v353;
  uint64_t v354;
  uint64_t *v355;
  const char *v356;
  char *v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  char *v362;
  char *v363;
  char *v364;
  char *v365;
  __int128 v366;
  char *v367;
  _QWORD *v368;
  _QWORD *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t *v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  int v379;
  _QWORD *v380;
  char *v381;
  char *v382;
  unint64_t v383;
  unint64_t v384;
  char *v385;
  char *v386;
  unsigned int v387;
  int v388;
  void *v389;
  void *v390;
  void *v391;
  void *v392;
  void *v393;
  _QWORD *v394;
  unint64_t v395;
  _QWORD *v396;
  void *v397;
  int v398;
  unint64_t v399;
  char v400;
  unint64_t v401;
  char *v402;
  _QWORD *v403;
  _QWORD *v404;
  void *v405;
  _QWORD *v406;
  _QWORD *v407;
  void *v408;
  char *v409;
  unint64_t v410;
  uint64_t v411;
  char *v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  unint64_t v417;
  _BYTE *v418;
  _DWORD *v419;
  int64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  char *v424;
  _OWORD *v425;
  char *v426;
  uint64_t v427;
  __int128 v428;
  int v429;
  char *v430;
  uint64_t **v431;
  uint64_t *v432;
  uint64_t *v433;
  __int128 *v434;
  unsigned __int8 v435;
  BOOL v436;
  uint64_t v437;
  uint64_t k;
  unsigned __int8 v439;
  __int128 v440;
  uint64_t v441;
  uint64_t v442;
  _QWORD *v443;
  unint64_t v444;
  char *v445;
  _QWORD *v446;
  _QWORD *v447;
  _QWORD *v448;
  _QWORD *v449;
  _QWORD *v450;
  _QWORD *v451;
  void *v452;
  _QWORD *v453;
  _QWORD *v454;
  void *v455;
  uint64_t v456;
  uint64_t v457;
  unsigned int v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  unsigned int v462;
  unint64_t v463;
  unint64_t v464;
  uint64_t v465;
  unsigned int v466;
  BOOL v467;
  uint64_t v468;
  int v469;
  uint64_t v470;
  uint64_t *v471;
  char *v472;
  unint64_t v473;
  unint64_t v474;
  unint64_t v475;
  unint64_t v476;
  char *v477;
  char *v478;
  char *v479;
  char *v480;
  __int128 v481;
  _QWORD *v482;
  _QWORD *v483;
  uint64_t v484;
  _QWORD *v485;
  _QWORD *v486;
  _QWORD *v487;
  _QWORD *v488;
  uint64_t v489;
  unsigned int v490;
  char *v491;
  char *v492;
  uint64_t v493;
  unint64_t v494;
  unint64_t v495;
  char *v496;
  char *v497;
  unsigned int v498;
  uint64_t v499;
  int v500;
  void *v501;
  BOOL v507;
  uint64_t *v508;
  uint64_t v509;
  double *v510;
  uint64_t v511;
  double *v512;
  double v514;
  float64x2_t v517;
  double v519;
  double v520;
  double v522;
  _QWORD *v533;
  _QWORD *v534;
  uint64_t v535;
  int v536;
  _QWORD *v537;
  int64x2_t *v538;
  uint64_t v539;
  int64_t v540;
  char *v541;
  double v542;
  unint64_t *v543;
  char *v544;
  double v545;
  int64x2_t v546;
  uint64_t v547;
  int64x2_t *v548;
  unint64_t v549;
  unint64_t v550;
  unint64_t v551;
  unint64_t v552;
  unint64_t v553;
  uint64_t v554;
  void **v555;
  char *v556;
  unint64_t v557;
  unsigned int v558;
  __int128 v559;
  __int128 v560;
  unint64_t v561;
  void **v562;
  uint64_t v563;
  unint64_t v564;
  void **v565;
  unint64_t v566;
  unint64_t *v567;
  unint64_t v568;
  void **v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  void **v575;
  uint64_t v576;
  unint64_t v577;
  unint64_t v578;
  void **v579;
  void **v580;
  unsigned int v581;
  void **v582;
  void *v583;
  uint64_t v584;
  unint64_t v585;
  void **v586;
  void **v587;
  void **v588;
  __int128 v589;
  __int128 v590;
  void *v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  void *v597;
  void **v598;
  std::__shared_weak_count *v599;
  unint64_t *v600;
  unint64_t v601;
  void **v602;
  std::__shared_weak_count *v603;
  unint64_t *v604;
  unint64_t v605;
  void **v606;
  void **v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  std::__shared_weak_count *v613;
  unint64_t *v614;
  unint64_t v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  void *v620;
  __int128 v621;
  std::__shared_weak_count *v622;
  unint64_t *v623;
  unint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t *v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  int v636;
  int v637;
  char v638;
  std::__shared_weak_count *v639;
  unint64_t *v640;
  unint64_t v641;
  std::__shared_weak_count *v642;
  unint64_t *v643;
  unint64_t v644;
  int v645;
  std::__shared_weak_count *v646;
  unint64_t *v647;
  unint64_t v648;
  std::__shared_weak_count *v649;
  unint64_t *v650;
  unint64_t v651;
  uint64_t *v652;
  unint64_t v653;
  int64x2_t *v654;
  void *v655;
  void **v656;
  void **v657;
  void **v658;
  unint64_t v659;
  void **v660;
  unint64_t v661;
  unint64_t *v662;
  unint64_t v663;
  void **v664;
  char *v665;
  char *v666;
  int64x2_t *v667;
  unint64_t v668;
  unint64_t v669;
  unsigned int *v670;
  char *v671;
  unsigned int v672;
  void **v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  unint64_t v677;
  unint64_t v678;
  unsigned int *v679;
  _DWORD *v680;
  unsigned int v681;
  uint64_t v682;
  unint64_t v683;
  void **v684;
  void **v685;
  void **v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  void *v692;
  __int128 v693;
  __int128 v694;
  __int128 v695;
  __int128 v696;
  __int128 v697;
  __int128 v698;
  __int128 v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  __int128 v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  void *v707;
  unint64_t v708;
  void **v709;
  std::__shared_weak_count *v710;
  unint64_t *v711;
  unint64_t v712;
  void **v713;
  std::__shared_weak_count *v714;
  unint64_t *v715;
  unint64_t v716;
  void **v717;
  void **v718;
  __int128 v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  void *v724;
  __int128 v725;
  __int128 v726;
  __int128 v727;
  std::__shared_weak_count *v728;
  unint64_t *v729;
  unint64_t v730;
  __int128 v731;
  __int128 v732;
  __int128 v733;
  __int128 v734;
  __int128 v735;
  __int128 v736;
  __int128 v737;
  __int128 v738;
  __int128 v739;
  __int128 v740;
  __int128 v741;
  __int128 v742;
  void *v743;
  __int128 v744;
  std::__shared_weak_count *v745;
  unint64_t *v746;
  unint64_t v747;
  char v748;
  std::__shared_weak_count *v749;
  unint64_t *v750;
  unint64_t v751;
  std::__shared_weak_count *v752;
  unint64_t *v753;
  unint64_t v754;
  uint64_t *v755;
  unint64_t v756;
  std::__shared_weak_count *v757;
  unint64_t *v758;
  unint64_t v759;
  std::__shared_weak_count *v760;
  unint64_t *v761;
  unint64_t v762;
  uint64_t *v763;
  uint64_t v764;
  unint64_t v765;
  unint64_t v766;
  std::__shared_weak_count **v767;
  std::__shared_weak_count **v768;
  std::__shared_weak_count *v769;
  std::__shared_weak_count *v770;
  unint64_t v771;
  unint64_t shared_owners_low;
  BOOL v773;
  char v774;
  std::__shared_weak_count *v775;
  unint64_t v776;
  unint64_t v777;
  BOOL v778;
  char v779;
  char v780;
  std::__shared_weak_count *v781;
  std::__shared_weak_count *v782;
  uint64_t shared_weak_owners;
  std::__shared_weak_count *v784;
  std::__shared_weak_count_vtbl *v785;
  _BYTE *p_get_deleter;
  int get_deleter_low;
  uint64_t shared_owners;
  int v789;
  uint64_t *v790;
  uint64_t v791;
  std::__shared_weak_count_vtbl *v792;
  std::__shared_weak_count *v793;
  std::__shared_weak_count **v794;
  std::__shared_weak_count **v795;
  unint64_t v796;
  unint64_t v797;
  BOOL v798;
  char v799;
  char v800;
  std::__shared_weak_count *v801;
  std::__shared_weak_count *v802;
  uint64_t v803;
  std::__shared_weak_count *v804;
  std::__shared_weak_count_vtbl *v805;
  _BYTE *v806;
  int v807;
  uint64_t v808;
  int v809;
  uint64_t *v810;
  uint64_t v811;
  std::__shared_weak_count_vtbl *v812;
  std::__shared_weak_count *v813;
  uint64_t v814;
  uint64_t v815;
  __int128 v816;
  __n128 v817;
  __int128 v818;
  double v819;
  double v820;
  double v821;
  double v822;
  double v823;
  double v824;
  double v825;
  double v826;
  double v827;
  double v828;
  double v829;
  double v830;
  __n128 v831;
  double v832;
  __n128 v833;
  __n128 v834;
  __n128 v835;
  __n128 v836;
  __n128 v837;
  __n128 v838;
  __n128 v839;
  _QWORD *v840;
  _QWORD *v841;
  _QWORD *v842;
  unint64_t v843;
  _QWORD *v844;
  unint64_t v845;
  unint64_t *v846;
  unint64_t v847;
  _QWORD *v848;
  char v849;
  int64x2_t *v850;
  char *v851;
  char *v852;
  uint64_t v853;
  int64x2_t *v854;
  unint64_t v855;
  char *v856;
  unint64_t v857;
  unint64_t v858;
  unsigned int *v859;
  char *v860;
  unsigned int v861;
  uint64_t v862;
  unint64_t v863;
  unsigned int *v864;
  char *v865;
  unsigned int v866;
  uint64_t v867;
  uint64_t v868;
  int64_t v869;
  unint64_t v870;
  _QWORD *v871;
  _QWORD *v872;
  _QWORD *v873;
  __int128 v874;
  __int128 v875;
  __int128 v876;
  __int128 v877;
  __int128 v878;
  __int128 v879;
  __int128 v880;
  __int128 v881;
  __int128 v882;
  __int128 v883;
  uint64_t v884;
  char *v885;
  std::__shared_weak_count *v886;
  unint64_t *v887;
  unint64_t v888;
  _QWORD *v889;
  _QWORD *v890;
  __int128 v891;
  __int128 v892;
  __int128 v893;
  __int128 v894;
  __int128 v895;
  __int128 v896;
  __int128 v897;
  __int128 v898;
  __int128 v899;
  __int128 v900;
  uint64_t v901;
  __int128 v902;
  std::__shared_weak_count *v903;
  unint64_t *v904;
  unint64_t v905;
  std::__shared_weak_count *v906;
  unint64_t *v907;
  unint64_t v908;
  int v909;
  std::__shared_weak_count *v910;
  unint64_t *v911;
  unint64_t v912;
  uint64_t v913;
  void *v914;
  void *v915;
  std::ios_base *v916;
  char *v917;
  char *v918;
  char *v919;
  unint64_t v920;
  unint64_t v921;
  unsigned int *v922;
  char *v923;
  unsigned int v924;
  _QWORD *v925;
  _BYTE *v926;
  uint64_t v927;
  _QWORD *v928;
  _QWORD *v929;
  int v930;
  uint64_t v931;
  unint64_t v932;
  char *v933;
  unint64_t v934;
  unint64_t v935;
  unsigned int *v936;
  char *v937;
  unsigned int v938;
  unint64_t v939;
  unsigned int *v940;
  char *v941;
  unsigned int v942;
  uint64_t v943;
  _QWORD *v944;
  _BYTE *v945;
  uint64_t v946;
  _QWORD *v947;
  _QWORD *v948;
  _QWORD *v949;
  _QWORD *v950;
  const char *v951;
  uint64_t v952;
  _QWORD *v953;
  int v954;
  char *v955;
  char *v956;
  char *v957;
  uint64_t v958;
  uint64_t v959;
  _QWORD *v960;
  _BYTE *v961;
  uint64_t v962;
  _QWORD *v963;
  _QWORD *v964;
  unint64_t v965;
  unint64_t v966;
  unsigned int *v967;
  char *v968;
  unsigned int v969;
  unint64_t v970;
  unint64_t v971;
  unsigned int *v972;
  char *v973;
  unsigned int v974;
  uint64_t v975;
  _QWORD *v976;
  _BYTE *v977;
  uint64_t v978;
  _QWORD *v979;
  _QWORD *v980;
  _QWORD *v981;
  _QWORD *v982;
  const char *v983;
  uint64_t v984;
  _QWORD *v985;
  char *v986;
  char *v987;
  uint64_t v988;
  _QWORD *v989;
  _BYTE *v990;
  uint64_t v991;
  _QWORD *v992;
  _QWORD *v993;
  unint64_t v994;
  unint64_t v995;
  unint64_t *v996;
  unint64_t v997;
  char *v998;
  _QWORD *v999;
  _BYTE *v1000;
  uint64_t v1001;
  _QWORD *v1002;
  _QWORD *v1003;
  BOOL v1004;
  char v1005;
  size_t v1006;
  _BYTE *v1007;
  _QWORD *v1008;
  _BYTE *v1009;
  uint64_t v1010;
  _QWORD *v1011;
  _QWORD *v1012;
  _BYTE *v1013;
  void **v1014;
  void *v1015;
  uint64_t v1016;
  uint64_t v1017;
  char v1018;
  unint64_t v1019;
  _BYTE *v1020;
  size_t v1021;
  unint64_t v1022;
  size_t v1023;
  unint64_t v1024;
  char *v1025;
  BOOL v1026;
  uint64_t v1027;
  char *v1028;
  unint64_t v1029;
  uint64_t v1030;
  char *v1031;
  char *v1032;
  char *v1033;
  size_t v1034;
  size_t v1035;
  unint64_t v1036;
  __int128 *v1037;
  unint64_t v1038;
  size_t v1039;
  unint64_t v1040;
  __int128 *v1041;
  unint64_t v1042;
  uint64_t v1043;
  char *v1044;
  char *v1045;
  char *v1046;
  char *v1047;
  char *v1048;
  size_t v1049;
  void **v1050;
  uint64_t v1051;
  unsigned __int8 v1052;
  uint64_t v1053;
  uint64_t m;
  unsigned __int8 v1055;
  int v1056;
  uint64_t v1057;
  unint64_t v1058;
  unint64_t v1059;
  unint64_t v1060;
  char *v1061;
  _QWORD *v1062;
  __int128 v1063;
  __int128 v1064;
  __n128 v1065;
  __int128 v1066;
  __int128 v1067;
  __int128 v1068;
  __int128 v1069;
  __int128 v1070;
  unint64_t v1071;
  char *v1072;
  uint64_t v1073;
  unint64_t v1074;
  char *v1075;
  char *v1076;
  _OWORD *v1077;
  uint64_t v1078;
  __int128 v1079;
  __n128 v1080;
  __int128 v1081;
  __n128 v1082;
  __int128 v1083;
  __int128 v1084;
  __int128 v1085;
  unint64_t v1086;
  uint64_t v1087;
  _QWORD *v1088;
  uint64_t v1089;
  uint64_t v1090;
  char *v1091;
  _OWORD *v1092;
  __int128 v1093;
  __int128 v1094;
  __int128 v1095;
  __int128 v1096;
  __int128 v1097;
  __int128 v1098;
  __int128 v1099;
  __int128 v1100;
  __int128 v1101;
  uint64_t v1102;
  _QWORD *v1103;
  uint64_t v1104;
  __int128 v1105;
  __int128 v1106;
  __int128 v1107;
  __int128 v1108;
  __int128 v1109;
  __int128 v1110;
  __int128 v1111;
  __int128 v1112;
  uint64_t v1113;
  _QWORD *v1114;
  uint64_t v1115;
  std::__shared_weak_count *v1116;
  unint64_t *v1117;
  unint64_t v1118;
  std::__shared_weak_count *v1119;
  unint64_t *v1120;
  unint64_t v1121;
  std::__shared_weak_count *v1122;
  unint64_t *v1123;
  unint64_t v1124;
  std::__shared_weak_count *v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t *v1128;
  __int128 v1129;
  uint64_t v1130;
  char v1131;
  double v1133;
  char v1134;
  int v1135;
  uint64_t v1136;
  uint64_t v1137;
  int v1138;
  double v1139;
  double v1140;
  double v1141;
  double v1142;
  double v1143;
  double v1144;
  _QWORD *v1145;
  const std::locale::facet *v1146;
  int v1147;
  __int128 *v1148;
  uint64_t v1149;
  size_t v1150;
  unint64_t v1151;
  _OWORD *v1152;
  uint64_t v1153;
  uint64_t v1154;
  unint64_t v1155;
  uint64_t *v1156;
  unint64_t v1157;
  _OWORD *v1158;
  __int128 *v1159;
  uint64_t v1160;
  __int128 v1161;
  uint64_t v1162;
  double **v1163;
  uint64_t v1164;
  double v1165;
  uint64_t ii;
  double *v1167;
  uint64_t v1168;
  double v1169;
  double v1170;
  _QWORD *v1171;
  const std::locale::facet *v1172;
  _QWORD *v1173;
  double v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  double v1178;
  unsigned int v1179;
  uint64_t v1180;
  double *v1181;
  double v1182;
  double *v1183;
  unint64_t v1184;
  unint64_t v1185;
  float64x2_t *v1186;
  uint64_t v1187;
  float64x2_t v1188;
  float64x2_t v1189;
  double *v1190;
  double v1191;
  double v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  double *v1196;
  uint64_t v1197;
  double v1198;
  double v1199;
  int v1200;
  uint64_t v1201;
  double *v1202;
  int v1203;
  double v1204;
  void *v1205;
  double v1206;
  double v1207;
  double v1208;
  double v1209;
  double v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  __int128 v1214;
  __int128 v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  __int128 v1219;
  __int128 v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  __int128 v1227;
  __int128 v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  __int128 v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  __int128 v1236;
  __int128 v1237;
  __int128 v1238;
  __int128 v1239;
  __int128 v1240;
  __int128 v1241;
  __n128 v1242;
  __int128 v1243;
  uint64_t **v1244;
  float64x2_t *v1245;
  uint64_t v1246;
  uint64_t n;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  _OWORD *v1251;
  uint64_t v1252;
  __int128 v1253;
  uint64_t v1254;
  uint64_t v1255;
  __int128 v1256;
  __int128 v1257;
  unsigned int v1258;
  uint64_t v1259;
  _QWORD *v1260;
  _QWORD *v1261;
  const std::locale::facet *v1262;
  unint64_t v1263;
  unint64_t v1264;
  unint64_t v1265;
  char *v1266;
  _QWORD *v1267;
  const std::locale::facet *v1268;
  _QWORD *v1269;
  _QWORD *v1270;
  const std::locale::facet *v1271;
  _QWORD *v1272;
  const std::locale::facet *v1273;
  int v1274;
  unint64_t v1275;
  unint64_t v1276;
  unint64_t v1277;
  char *v1278;
  _QWORD *v1279;
  const std::locale::facet *v1280;
  char *v1281;
  __int128 v1282;
  __int128 v1283;
  void *v1284;
  void *v1285;
  __int128 v1286;
  __int128 v1287;
  __int128 v1288;
  __int128 v1289;
  void *v1290;
  char *v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  _QWORD *v1295;
  unint64_t v1296;
  char *v1297;
  __int128 v1298;
  __int128 v1299;
  __int128 v1300;
  __int128 v1301;
  __int128 v1302;
  __int128 v1303;
  void *v1304;
  char *v1305;
  void **v1306;
  uint64_t v1307;
  char *v1308;
  void **v1309;
  __int128 v1310;
  __int128 v1311;
  __int128 v1312;
  __int128 v1313;
  __int128 v1314;
  __int128 v1315;
  __int128 v1316;
  __int128 v1317;
  void *v1318;
  void **v1319;
  __int128 v1320;
  __int128 v1321;
  void *v1322;
  __int128 v1323;
  __int128 v1324;
  __int128 v1325;
  __int128 v1326;
  __int128 v1327;
  void *v1328;
  void **v1329;
  void *v1330;
  std::__shared_weak_count *v1331;
  unint64_t *v1332;
  unint64_t v1333;
  std::__shared_weak_count *v1334;
  unint64_t *v1335;
  unint64_t v1336;
  std::__shared_weak_count *v1337;
  unint64_t *v1338;
  unint64_t v1339;
  std::__shared_weak_count *v1340;
  unint64_t *v1341;
  unint64_t v1342;
  std::__shared_weak_count *v1343;
  unint64_t *v1344;
  unint64_t v1345;
  void **v1346;
  __int128 v1347;
  __int128 v1348;
  __int128 v1349;
  __int128 v1350;
  __int128 v1351;
  __int128 v1352;
  __int128 v1353;
  void *v1354;
  __int128 v1355;
  __int128 v1356;
  __int128 v1357;
  __int128 v1358;
  __int128 v1359;
  __int128 v1360;
  __int128 v1361;
  __int128 v1362;
  __int128 v1363;
  __int128 v1364;
  __int128 v1365;
  __int128 v1366;
  void *v1367;
  char *v1368;
  uint64_t v1369;
  uint64_t v1370;
  char *v1371;
  uint64_t v1372;
  float64x2_t v1373;
  _QWORD *v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  int64x2_t v1380;
  int64x2_t v1381;
  float64x2_t v1384;
  int8x16_t v1386;
  int8x16_t v1387;
  double v1388;
  float64x2_t v1391;
  int64x2_t v1392;
  float64x2_t v1393;
  float64x2_t v1394;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  int64x2_t v1400;
  int64x2_t v1401;
  float64x2_t v1404;
  int8x16_t v1406;
  int8x16_t v1407;
  double v1408;
  float64x2_t v1411;
  int64x2_t v1412;
  float64x2_t v1413;
  float64x2_t v1414;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  __int128 v1421;
  __int128 v1422;
  __int128 v1423;
  uint64_t v1424;
  uint64_t jj;
  uint64_t v1426;
  uint64_t v1427;
  float64x2_t v1428;
  float64x2_t v1429;
  uint64_t v1430;
  uint64_t *v1431;
  uint64_t v1432;
  float64x2_t *v1433;
  uint64_t v1434;
  float64x2_t *v1435;
  double v1437;
  float64x2_t v1440;
  float64x2_t v1441;
  float64x2_t v1444;
  uint64_t v1445;
  uint64_t kk;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  __int128 v1452;
  uint64_t v1453;
  _QWORD *v1454;
  _QWORD *v1455;
  uint64_t v1456;
  uint64_t mm;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  _OWORD *v1461;
  __int128 v1462;
  __int128 v1463;
  __int128 v1464;
  __int128 v1465;
  __int128 v1466;
  __int128 v1467;
  __int128 v1468;
  __int128 v1469;
  __int128 v1470;
  __int128 v1471;
  _QWORD *v1472;
  _QWORD *v1473;
  uint64_t v1474;
  uint64_t nn;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  __int128 v1480;
  __int128 v1481;
  __int128 v1482;
  _QWORD *v1483;
  _QWORD *v1484;
  uint64_t v1485;
  uint64_t i1;
  uint64_t v1487;
  double v1488;
  double v1489;
  double v1490;
  int v1491;
  unint64_t v1492;
  unint64_t v1493;
  uint64_t v1494;
  const char *v1495;
  size_t v1496;
  unsigned __int8 v1497;
  unsigned __int8 v1498;
  const char *v1499;
  size_t v1500;
  _BYTE *v1501;
  uint64_t v1502;
  uint64_t v1503;
  _BYTE *v1504;
  uint64_t v1505;
  uint64_t v1506;
  NSObject *v1507;
  double v1508;
  double v1509;
  double v1510;
  size_t v1511;
  std::__shared_weak_count_vtbl *v1512;
  std::__shared_weak_count *v1513;
  std::__shared_weak_count *v1514;
  unint64_t *v1515;
  unint64_t v1516;
  unint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  char *v1520;
  uint64_t v1521;
  const char *v1522;
  void *v1523;
  std::__shared_weak_count *v1524;
  unint64_t *v1525;
  unint64_t v1526;
  std::__shared_weak_count *v1527;
  unint64_t *v1528;
  unint64_t v1529;
  uint64_t v1530;
  std::__shared_weak_count *v1531;
  unint64_t *v1532;
  unint64_t v1533;
  std::__shared_weak_count *v1534;
  unint64_t *v1535;
  unint64_t v1536;
  std::__shared_weak_count *v1537;
  unint64_t *v1538;
  unint64_t v1539;
  std::__shared_weak_count *v1540;
  unint64_t *v1541;
  unint64_t v1542;
  void *v1543;
  std::__shared_weak_count *v1544;
  unint64_t *v1545;
  unint64_t v1546;
  _QWORD *v1548;
  _QWORD *v1549;
  _QWORD *v1550;
  uint64_t v1551;
  _QWORD *v1552;
  uint64_t v1553;
  _QWORD *v1554;
  uint64_t v1555;
  _QWORD *v1556;
  uint64_t v1557;
  uint64_t result;
  unint64_t v1559;
  char *v1560;
  __int128 v1561;
  __int128 v1562;
  __int128 v1563;
  __int128 v1564;
  __int128 v1565;
  __int128 v1566;
  __int128 v1567;
  __int128 v1568;
  __int128 v1569;
  __int128 v1570;
  __int128 v1571;
  __int128 v1572;
  __int128 v1573;
  __int128 v1574;
  __int128 v1575;
  void *v1576;
  void **v1577;
  void **v1578;
  void **v1579;
  char *v1580;
  void **v1581;
  __int128 v1582;
  __int128 v1583;
  __int128 v1584;
  __int128 v1585;
  __int128 v1586;
  uint64_t v1587;
  __int128 v1588;
  __int128 v1589;
  uint64_t v1590;
  unint64_t *v1591;
  unint64_t v1592;
  __int128 v1593;
  __int128 v1594;
  uint64_t v1595;
  __int128 v1596;
  __int128 v1597;
  __int128 v1598;
  __int128 v1599;
  __int128 v1600;
  __int128 v1601;
  __int128 v1602;
  __int128 v1603;
  __int128 v1604;
  uint64_t v1605;
  uint64_t v1606;
  unint64_t *v1607;
  unint64_t v1608;
  void **v1609;
  __int128 v1610;
  __int128 v1611;
  __int128 v1612;
  __int128 v1613;
  __int128 v1614;
  void *v1615;
  __int128 v1616;
  __int128 v1617;
  unint64_t *v1618;
  unint64_t *v1619;
  unint64_t v1620;
  __int128 v1621;
  __int128 v1622;
  __int128 v1623;
  __int128 v1624;
  __int128 v1625;
  __int128 v1626;
  __int128 v1627;
  __int128 v1628;
  __int128 v1629;
  __int128 v1630;
  __int128 v1631;
  __int128 v1632;
  void *v1633;
  unint64_t *v1634;
  unint64_t *v1635;
  unint64_t v1636;
  void **v1637;
  void *v1638;
  std::__shared_weak_count *v1639;
  unint64_t *v1640;
  unint64_t v1641;
  std::__shared_weak_count *v1642;
  unint64_t *v1643;
  unint64_t v1644;
  std::__shared_weak_count *v1645;
  unint64_t *v1646;
  unint64_t v1647;
  std::__shared_weak_count *v1648;
  unint64_t *v1649;
  unint64_t v1650;
  std::__shared_weak_count *v1651;
  unint64_t *v1652;
  unint64_t v1653;
  void **v1654;
  double v1655;
  __int128 v1656;
  unint64_t v1657;
  int v1658;
  uint64_t *v1659;
  _BYTE *v1660;
  char *v1661;
  char *v1662;
  void *v1663;
  void *v1664;
  void *v1665;
  uint64_t v1666;
  uint64_t v1667;
  void *v1668;
  void **v1669;
  uint64_t v1670;
  void *v1671;
  void **v1672;
  void *v1673;
  uint64_t v1674;
  void *v1675;
  void *v1676;
  uint64_t v1677;
  void *v1678;
  void *v1679;
  uint64_t v1680;
  _BYTE *v1681;
  void *v1682;
  _QWORD *v1683;
  char v1684;
  _QWORD *v1685;
  _BYTE *v1686;
  uint64_t v1687;
  uint64_t *v1688;
  uint64_t v1689;
  _QWORD *__sb;
  char __sba;
  uint64_t __sbb;
  int8x16_t v1693;
  uint64_t v1694;
  double **v1695;
  const char *v1696;
  int __dst;
  void *__dsta[2];
  void *__dstb;
  uint64_t v1700;
  _QWORD *v1701;
  int8x16_t v1702;
  _QWORD *v1703;
  _QWORD *v1704;
  int8x16_t v1705;
  void **v1706;
  __int128 v1707;
  unsigned int v1708;
  uint64_t v1709;
  char *v1710;
  char *v1711;
  int8x16_t v1712;
  int64_t v1713;
  int64x2_t *v1714;
  void *v1715;
  std::__shared_weak_count **v1716;
  std::__shared_weak_count *v1717;
  uint64_t v1718;
  uint64_t v1719;
  std::__shared_weak_count *v1720;
  uint64_t *v1721;
  uint64_t v1722[2];
  uint64_t v1723;
  _QWORD v1724[3];
  std::__shared_weak_count *v1725;
  void *v1726;
  std::__shared_weak_count *v1727;
  unint64_t v1728;
  char v1729;
  __int128 v1730;
  void *object[75];
  __int128 v1732;
  __int128 v1733;
  __n128 v1734;
  __n128 v1735;
  __int128 v1736;
  __int128 v1737;
  __int128 v1738;
  __n128 v1739;
  char v1740;
  __int128 v1741;
  __int128 v1742;
  __int128 v1743;
  __int128 v1744;
  __int128 v1745;
  __int128 v1746;
  __n128 v1747;
  unint64_t v1748;
  char v1749;
  __int128 v1750;
  char v1751;
  void *v1752;
  unint64_t v1753;
  __int128 v1754;
  _BYTE v1755[512];
  _BYTE *v1756;
  uint64_t v1757;
  uint64_t v1758;
  uint64_t v1759;
  uint64_t v1760;
  _BYTE v1761[512];
  _BYTE *v1762;
  __int128 v1763;
  _DWORD v1764[2];
  char v1765;
  int64x2_t v1766;
  uint64_t v1767;
  uint64_t v1768;
  uint64_t *v1769;
  uint64_t v1770;
  _QWORD v1771[3];
  _QWORD *v1772;
  _BYTE v1773[24];
  _BYTE *v1774;
  _BYTE v1775[24];
  _BYTE *v1776;
  _BYTE v1777[24];
  _BYTE *v1778;
  uint64_t v1779;
  char v1780;
  char v1781;
  char v1782;
  char v1783;
  char v1784;
  void *v1785;
  char v1786;
  void *v1787;
  char v1788;
  void *v1789;
  char v1790;
  char v1791;
  char v1792;
  unsigned __int8 v1793;
  char v1794;
  int v1795;
  _BYTE v1796[296];
  int v1797;
  char v1798;
  __int128 v1799;
  __int128 v1800;
  __n128 v1801;
  __n128 v1802;
  __int128 v1803;
  __int128 v1804;
  __int128 v1805;
  __n128 v1806;
  _OWORD v1807[18];
  _BYTE oslog[592];
  __int128 v1809;
  __int128 v1810;
  __n128 v1811;
  __n128 v1812;
  __int128 v1813;
  __int128 v1814;
  __int128 v1815;
  __n128 v1816;
  char v1817;
  __int128 v1818;
  __int128 v1819;
  __int128 v1820;
  __int128 v1821;
  __int128 v1822;
  __int128 v1823;
  __n128 v1824;
  unint64_t v1825;
  char v1826;
  uint64_t v1827;
  std::__shared_weak_count *v1828;
  char v1829;
  __int128 v1830;
  __int128 v1831;
  __n128 v1832;
  __int128 v1833;
  __int128 v1834;
  __int128 v1835;
  __int128 v1836;
  __int128 v1837;
  __n128 v1838;
  __n128 v1839;
  __int128 v1840;
  __int128 v1841;
  __int128 v1842;
  __n128 v1843;
  void *v1844[40];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v1666 = v6;
  v1659 = v7;
  v9 = v8;
  v10 = v1;
  v1844[37] = *(void **)MEMORY[0x24BDAC8D0];
  v1724[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v1724[1] = 0;
  sub_20F49BCEC((uint64_t)v1764);
  v1766 = vdupq_n_s64(0x3E45798EE2308C3AuLL);
  v11 = *(_QWORD *)(v10 + 16);
  v1764[0] = 1;
  v1764[1] = v11;
  v1765 = v3;
  v1767 = 0x3E45798EE2308C3ALL;
  v1779 = 0x3DDB7CDFD9D7BDBBLL;
  v1780 = *(_BYTE *)(v10 + 163);
  v1784 = *(_BYTE *)(v10 + 164);
  v1782 = *(_BYTE *)(v10 + 165);
  v1783 = *(_BYTE *)(v10 + 166);
  v1781 = *(_BYTE *)(v10 + 167);
  v1791 = *(_BYTE *)(v10 + 7);
  v1792 = 1;
  v1795 = *(_QWORD *)(v10 + 40);
  v1794 = *(_BYTE *)(v10 + 5);
  v12 = *(unsigned __int8 *)(v10 + 162);
  v1793 = *(_BYTE *)(v10 + 162);
  v1667 = v5;
  if (!v5
    && !v12
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/MapOptimizationUtil.cpp", 95, (uint64_t)"minimizer_parameters.use_IMU", 28, (uint64_t)"Offline BA not supported for vision-only SLAM", 45, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v13 = (double *)v9[6];
  v14 = (double *)v9[7];
  v1658 = v3;
  v1670 = v10;
  if (v13 != v14)
  {
    __sb = v9;
    v15 = *v13;
    v16 = *(v14 - 7);
    memset(v1844, 0, 24);
    v17 = *(_QWORD **)(*v1659 + 48);
    v18 = *v1659 + 56;
    if (v17 == (_QWORD *)v18)
    {
      v19 = 0;
      v91 = (_QWORD *)v1659[1];
      v93 = v91 + 1;
      v92 = (_QWORD *)*v91;
      if ((_QWORD *)*v91 != v91 + 1)
        goto LABEL_141;
      goto LABEL_154;
    }
    v19 = 0;
    v1700 = *v1659 + 56;
    while (1)
    {
      v20 = *(double *)(v17[6] + 816);
      if (v20 >= v15 && v20 <= v16)
        goto LABEL_119;
      sub_20F49BBF8(&v1836);
      if (**(int **)(v1836 + 56) <= 4)
      {
        v22 = *(unsigned __int8 *)(v1836 + 72);
        v23 = sub_20E8C31DC(v1836, "OSLogSurrogateAppender", 1, 0);
        v24 = v23;
        _ZF = !v22 && v23 == 0;
        if (!_ZF)
          break;
      }
LABEL_103:
      v75 = v17 + 4;
      if (v19 >= v1844[2])
      {
        v77 = (char *)v1844[0];
        v78 = (v19 - (char *)v1844[0]) >> 4;
        v79 = v78 + 1;
        if ((unint64_t)(v78 + 1) >> 60)
          sub_20E867F44();
        v80 = (char *)v1844[2] - (char *)v1844[0];
        if (((char *)v1844[2] - (char *)v1844[0]) >> 3 > v79)
          v79 = v80 >> 3;
        if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF0)
          v81 = 0xFFFFFFFFFFFFFFFLL;
        else
          v81 = v79;
        if (v81)
        {
          if (v81 >> 60)
            sub_20E877A38();
          v82 = (char *)operator new(16 * v81);
          v83 = &v82[16 * v78];
          *(_OWORD *)v83 = *v75;
          v84 = v83;
          if (v19 != v77)
            goto LABEL_114;
LABEL_126:
          v3 = v1658;
          v76 = v83 + 16;
          v1844[0] = v84;
          v1844[1] = v83 + 16;
          v1844[2] = &v82[16 * v81];
          if (!v19)
            goto LABEL_118;
        }
        else
        {
          v82 = 0;
          v83 = (char *)(16 * v78);
          *(_OWORD *)(16 * v78) = *v75;
          v84 = (char *)(16 * v78);
          if (v19 == v77)
            goto LABEL_126;
LABEL_114:
          v3 = v1658;
          do
          {
            v85 = *((_QWORD *)v19 - 2);
            v19 -= 16;
            v86 = *((_DWORD *)v19 + 2);
            *((_QWORD *)v84 - 2) = v85;
            v84 -= 16;
            *((_DWORD *)v84 + 2) = v86;
          }
          while (v19 != v77);
          v19 = (char *)v1844[0];
          v76 = v83 + 16;
          v1844[0] = v84;
          v1844[1] = v83 + 16;
          v1844[2] = &v82[16 * v81];
          if (!v19)
            goto LABEL_118;
        }
        operator delete(v19);
        goto LABEL_118;
      }
      *(_OWORD *)v19 = *v75;
      v76 = v19 + 16;
LABEL_118:
      v1844[1] = v76;
      v19 = (char *)v76;
LABEL_119:
      v87 = (_QWORD *)v17[1];
      if (v87)
      {
        do
        {
          v88 = v87;
          v87 = (_QWORD *)*v87;
        }
        while (v87);
      }
      else
      {
        do
        {
          v88 = (_QWORD *)v17[2];
          _ZF = *v88 == (_QWORD)v17;
          v17 = v88;
        }
        while (!_ZF);
      }
      v17 = v88;
      if (v88 == (_QWORD *)v18)
      {
        v89 = (char *)v1844[0];
        if (v1844[0] != v19)
        {
          v90 = (void **)v1844[0];
          do
          {
            if ((sub_20F26F650(v1659, *v90, v90[1], 1u) & 1) == 0
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/MapOptimizationUtil.cpp", 114, (uint64_t)"ret", 3, (uint64_t)"Fail to remove state", 20, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v90 += 2;
          }
          while (v90 != (void **)v19);
          v19 = v89;
          v3 = v1658;
        }
        v91 = (_QWORD *)v1659[1];
        v93 = v91 + 1;
        v92 = (_QWORD *)*v91;
        if ((_QWORD *)*v91 != v91 + 1)
        {
LABEL_141:
          v94 = *(_QWORD *)(v1670 + 40);
          do
          {
            if (v94 > (uint64_t)(*(_QWORD *)(v92[6] + 208) - *(_QWORD *)(v92[6] + 200)) >> 5)
            {
              v95 = sub_20F25F344(v91, v92 + 4);
            }
            else
            {
              v96 = (_QWORD *)v92[1];
              if (v96)
              {
                do
                {
                  v95 = v96;
                  v96 = (_QWORD *)*v96;
                }
                while (v96);
              }
              else
              {
                do
                {
                  v95 = (_QWORD *)v92[2];
                  _ZF = *v95 == (_QWORD)v92;
                  v92 = v95;
                }
                while (!_ZF);
              }
            }
            v92 = v95;
          }
          while (v95 != v93);
          v19 = (char *)v1844[0];
          if (!v1844[0])
          {
LABEL_156:
            v10 = v1670;
            v9 = __sb;
            goto LABEL_157;
          }
LABEL_155:
          v1844[1] = v19;
          operator delete(v19);
          goto LABEL_156;
        }
LABEL_154:
        if (!v19)
          goto LABEL_156;
        goto LABEL_155;
      }
    }
    *(_QWORD *)oslog = &v1836;
    *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
    *(_DWORD *)&oslog[24] = 4;
    *(_QWORD *)&oslog[32] = "unknown file";
    *(_DWORD *)&oslog[40] = 107;
    *(_QWORD *)&oslog[48] = "unknown function";
    *(_QWORD *)&oslog[56] = 0;
    *(_QWORD *)&oslog[64] = 0;
    v26 = **(_QWORD **)oslog;
    if (*(char *)(**(_QWORD **)oslog + 39) < 0)
    {
      v28 = *(const char **)(v26 + 16);
      v27 = *(_QWORD *)(v26 + 24);
      v1709 = **(_QWORD **)oslog + 16;
      v30 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v30 & 1) != 0)
        goto LABEL_21;
    }
    else
    {
      v27 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
      v28 = (const char *)(**(_QWORD **)oslog + 16);
      v1709 = (uint64_t)v28;
      v29 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v29 & 1) != 0)
        goto LABEL_21;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v1796);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v1796);
      if (v1796[24] && (v1796[23] & 0x80000000) != 0)
        operator delete(*(void **)v1796);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
      v3 = v1658;
    }
LABEL_21:
    if (byte_254A4A4F8[23] >= 0)
      v31 = byte_254A4A4F8;
    else
      v31 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v32 = byte_254A4A4F8[23];
    else
      v32 = *(_QWORD *)&byte_254A4A4F8[8];
    object[0] = os_log_create(v31, v28);
    if (v32 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v32 >= 0x17)
    {
      v34 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v32 | 7) != 0x17)
        v34 = v32 | 7;
      v35 = v34 + 1;
      v33 = (void **)operator new(v34 + 1);
      object[3] = (void *)(v35 | 0x8000000000000000);
      object[1] = v33;
      object[2] = (void *)v32;
      v3 = v1658;
    }
    else
    {
      HIBYTE(object[3]) = v32;
      v33 = &object[1];
      if (!v32)
      {
LABEL_35:
        *((_BYTE *)v33 + v32) = 0;
        LOBYTE(object[4]) = 1;
        if (v27 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        v18 = v1700;
        if (v27 >= 0x17)
        {
          v38 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v27 | 7) != 0x17)
            v38 = v27 | 7;
          v39 = v38 + 1;
          v36 = (void **)operator new(v38 + 1);
          object[7] = (void *)(v39 | 0x8000000000000000);
          object[5] = v36;
          object[6] = (void *)v27;
          v3 = v1658;
        }
        else
        {
          HIBYTE(object[7]) = v27;
          v36 = &object[5];
          if (!v27)
          {
            LOBYTE(object[5]) = 0;
            LOBYTE(object[8]) = 1;
            v37 = object[0];
            if ((SHIBYTE(object[7]) & 0x80000000) == 0)
              goto LABEL_39;
            goto LABEL_45;
          }
        }
        memmove(v36, v28, v27);
        *((_BYTE *)v36 + v27) = 0;
        LOBYTE(object[8]) = 1;
        v37 = object[0];
        if ((SHIBYTE(object[7]) & 0x80000000) == 0)
        {
LABEL_39:
          if (!LOBYTE(object[4]))
            goto LABEL_48;
          goto LABEL_46;
        }
LABEL_45:
        operator delete(object[5]);
        if (!LOBYTE(object[4]))
        {
LABEL_48:
          if (object[0])
            os_release(object[0]);
          if (v24 && *(_QWORD *)(v24 + 24))
          {
            v40 = _os_log_pack_size();
            v41 = (std::__shared_weak_count_vtbl *)operator new(v40, (std::align_val_t)8uLL);
            v42 = (std::__shared_weak_count *)operator new();
            v43 = v42;
            v42->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v42->__shared_owners_;
            v42->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v42->__shared_weak_owners_ = 0;
            v42[1].__vftable = v41;
            object[0] = v41;
            object[1] = v41;
            object[2] = v42;
            do
              v45 = __ldxr(p_shared_owners);
            while (__stxr(v45 + 1, p_shared_owners));
            memset(&object[3], 0, 24);
            do
              v46 = __ldaxr(p_shared_owners);
            while (__stlxr(v46 - 1, p_shared_owners));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v43);
            }
            v47 = object[0];
            *(_WORD *)_os_log_pack_fill() = 0;
            v48 = operator new();
            v49 = *(unsigned __int8 *)(v26 + 39);
            v50 = v1709;
            if ((v49 & 0x80u) != 0)
            {
              v50 = *(_QWORD *)(v26 + 16);
              v49 = *(_QWORD *)(v26 + 24);
            }
            *(_QWORD *)v48 = v47;
            *(_OWORD *)(v48 + 8) = *(_OWORD *)&object[1];
            object[1] = 0;
            object[2] = 0;
            *(_OWORD *)(v48 + 24) = *(_OWORD *)&object[3];
            object[3] = 0;
            object[4] = 0;
            *(_QWORD *)(v48 + 40) = v50;
            *(_QWORD *)(v48 + 48) = v49;
            *(_BYTE *)(v48 + 56) = 16;
            *(_QWORD *)&v1807[0] = 0;
            *(_QWORD *)v1796 = v48;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v24 + 24) + 40))(*(_QWORD *)(v24 + 24), v1796);
            v51 = *(_QWORD *)v1796;
            *(_QWORD *)v1796 = 0;
            if (v51)
            {
              v52 = *(std::__shared_weak_count **)(v51 + 32);
              if (v52)
              {
                v53 = (unint64_t *)&v52->__shared_owners_;
                do
                  v54 = __ldaxr(v53);
                while (__stlxr(v54 - 1, v53));
                if (!v54)
                {
                  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                  std::__shared_weak_count::__release_weak(v52);
                }
              }
              v55 = *(std::__shared_weak_count **)(v51 + 16);
              if (v55)
              {
                v56 = (unint64_t *)&v55->__shared_owners_;
                do
                  v57 = __ldaxr(v56);
                while (__stlxr(v57 - 1, v56));
                if (!v57)
                {
                  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                  std::__shared_weak_count::__release_weak(v55);
                }
              }
              MEMORY[0x212BC6398](v51, 0x10F0C40B62ED6C6);
              v58 = *(_QWORD *)&v1807[0];
              *(_QWORD *)&v1807[0] = 0;
              if (v58)
              {
                v59 = *(std::__shared_weak_count **)(v58 + 32);
                if (v59)
                {
                  v60 = (unint64_t *)&v59->__shared_owners_;
                  do
                    v61 = __ldaxr(v60);
                  while (__stlxr(v61 - 1, v60));
                  if (!v61)
                  {
                    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                    std::__shared_weak_count::__release_weak(v59);
                  }
                }
                v62 = *(std::__shared_weak_count **)(v58 + 16);
                if (v62)
                {
                  v63 = (unint64_t *)&v62->__shared_owners_;
                  do
                    v64 = __ldaxr(v63);
                  while (__stlxr(v64 - 1, v63));
                  if (!v64)
                  {
                    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                    std::__shared_weak_count::__release_weak(v62);
                  }
                }
                MEMORY[0x212BC6398](v58, 0x10F0C40B62ED6C6);
              }
            }
            v65 = (std::__shared_weak_count *)object[4];
            if (object[4])
            {
              v66 = (unint64_t *)((char *)object[4] + 8);
              do
                v67 = __ldaxr(v66);
              while (__stlxr(v67 - 1, v66));
              if (!v67)
              {
                ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                std::__shared_weak_count::__release_weak(v65);
              }
            }
            v68 = (std::__shared_weak_count *)object[2];
            if (object[2])
            {
              v69 = (unint64_t *)((char *)object[2] + 8);
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
          }
          else
          {
            os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
            LOWORD(object[0]) = 0;
            LODWORD(v1655) = 2;
            v1654 = object;
            v71 = (void *)_os_log_send_and_compose_impl();
            if (v71)
              free(v71);
          }
          if (v22)
          {
            sub_20E8C003C((uint64_t)oslog, "IMU buffer does not cover the map-database. Please check the IMUdata");
            sub_20E863570((uint64_t)oslog);
          }
          sub_20E863570((uint64_t)oslog);
          v72 = *(std::__shared_weak_count **)&oslog[64];
          if (*(_QWORD *)&oslog[64])
          {
            v73 = (unint64_t *)(*(_QWORD *)&oslog[64] + 8);
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          v19 = (char *)v1844[1];
          goto LABEL_103;
        }
LABEL_46:
        if (SHIBYTE(object[3]) < 0)
          operator delete(object[1]);
        goto LABEL_48;
      }
    }
    memmove(v33, v31, v32);
    goto LABEL_35;
  }
LABEL_157:
  v1723 = 0;
  if (v3)
  {
    object[0] = &off_24CA017A8;
    object[1] = v1724;
    object[2] = &v1723;
    object[3] = object;
    sub_20EDB40D8(object, v1771);
    v98 = (void **)object[3];
    if (object[3] == object)
    {
      v99 = 4;
      v98 = object;
      v10 = v1670;
    }
    else
    {
      v10 = v1670;
      if (!object[3])
        goto LABEL_163;
      v99 = 5;
    }
    (*((void (**)(void **, uint64_t))*v98 + v99))(v98, v97);
  }
LABEL_163:
  if (*(unsigned __int8 *)(v10 + 165) | *(unsigned __int8 *)(v10 + 166))
  {
    v104 = v1659[5];
    v105 = v1659[6];
    while (v104 != v105)
    {
      if (!*(_QWORD *)(*(_QWORD *)v104 + 32))
      {
        v106 = *(_QWORD *)(*(_QWORD *)v104 + 24);
        v107 = operator new();
        sub_20E972DB4(v107, v106);
        memcpy((void *)(v107 + 1000), (const void *)(v106 + 1000), 0x1B8uLL);
        v108 = (uint64_t *)(*(_QWORD *)v104 + 32);
        v109 = *v108;
        object[0] = 0;
        *v108 = v107;
        if (v109)
        {
          sub_20E8E931C((uint64_t)v108, v109);
          v110 = object[0];
          object[0] = 0;
          if (v110)
            sub_20E8E931C((uint64_t)object, (uint64_t)v110);
        }
      }
      v104 += 16;
    }
  }
  v100 = *v1659;
  v101 = (void *)(*v1659 + 72);
  v1722[1] = 0;
  v1722[0] = 0;
  v1721 = v1722;
  if (v1794)
  {
    v102 = (void *)v1659[1];
    object[0] = 0;
    object[1] = (void *)v100;
    memset(&object[3], 0, 72);
    object[2] = v102;
    object[12] = v101;
    object[13] = (void *)(v100 + 80);
    object[15] = 0;
    object[14] = 0;
    object[16] = v1659 + 5;
    object[17] = v1659 + 10;
  }
  else
  {
    v111 = (void *)v1659[1];
    object[0] = (void *)v1659[8];
    object[1] = (void *)v100;
    memset(&object[3], 0, 72);
    object[2] = v111;
    object[12] = v101;
    object[13] = (void *)(v100 + 80);
    object[14] = 0;
    object[15] = v9;
    object[16] = v1659 + 5;
    object[17] = 0;
  }
  v103 = operator new();
  sub_20F63E6F4((uint64_t *)v103, (__int128 *)object, (uint64_t)v1764);
  v112 = *(_QWORD *)(v103 + 2160);
  *(_QWORD *)(v103 + 14320) = v112;
  *(_QWORD *)(v103 + 24664) = v112;
  *(_DWORD *)(v103 + 6596) = 1;
  v113 = (_QWORD *)v1723;
  v1723 = v103;
  if (v113)
  {
    v114 = sub_20F63F644(v113);
    MEMORY[0x212BC6398](v114, 0x10F2C408963B0DFLL);
  }
  if (*(_QWORD *)(*v1659 + 64))
  {
    v115 = *(_QWORD *)(*(_QWORD *)(*v1659 + 48) + 48);
    v116 = atan2(-*(double *)(v115 + 40), *(long double *)(v115 + 64));
    v117 = asin(*(long double *)(v115 + 16));
    v118 = atan2(-*(double *)(v115 + 8), *(long double *)v115);
    sub_20F49BBF8(v1807);
    if (**(int **)(*(_QWORD *)&v1807[0] + 56) <= 2)
    {
      v119 = *(unsigned __int8 *)(*(_QWORD *)&v1807[0] + 72);
      v120 = sub_20E8C31DC(*(uint64_t *)&v1807[0], "OSLogSurrogateAppender", 1, 0);
      v121 = v120;
      if (v119 || v120)
      {
        *(_QWORD *)oslog = v1807;
        *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
        *(_DWORD *)&oslog[24] = 2;
        *(_QWORD *)&oslog[32] = "unknown file";
        *(_DWORD *)&oslog[40] = 181;
        *(_QWORD *)&oslog[64] = 0;
        *(_QWORD *)&oslog[48] = "unknown function";
        *(_QWORD *)&oslog[56] = 0;
        v122 = **(_QWORD **)oslog;
        v123 = **(_QWORD **)oslog + 16;
        if (*(char *)(**(_QWORD **)oslog + 39) < 0)
        {
          v125 = *(const char **)(v122 + 16);
          v124 = *(_QWORD *)(v122 + 24);
          v127 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v127 & 1) != 0)
            goto LABEL_184;
        }
        else
        {
          v124 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
          v125 = (const char *)(**(_QWORD **)oslog + 16);
          v126 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v126 & 1) != 0)
            goto LABEL_184;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
            operator delete(object[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_184:
        if (byte_254A4A4F8[23] >= 0)
          v128 = byte_254A4A4F8;
        else
          v128 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v129 = byte_254A4A4F8[23];
        else
          v129 = *(_QWORD *)&byte_254A4A4F8[8];
        object[0] = os_log_create(v128, v125);
        v130 = &object[1];
        if (v129 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v129 >= 0x17)
        {
          v131 = (v129 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v129 | 7) != 0x17)
            v131 = v129 | 7;
          v132 = v131 + 1;
          v130 = (void **)operator new(v131 + 1);
          object[3] = (void *)(v132 | 0x8000000000000000);
          object[1] = v130;
          object[2] = (void *)v129;
        }
        else
        {
          HIBYTE(object[3]) = v129;
          if (!v129)
          {
LABEL_198:
            *((_BYTE *)v130 + v129) = 0;
            LOBYTE(object[4]) = 1;
            v133 = &object[5];
            if (v124 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v124 >= 0x17)
            {
              v134 = (v124 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v124 | 7) != 0x17)
                v134 = v124 | 7;
              v135 = v134 + 1;
              v133 = (void **)operator new(v134 + 1);
              object[7] = (void *)(v135 | 0x8000000000000000);
              object[5] = v133;
              object[6] = (void *)v124;
            }
            else
            {
              HIBYTE(object[7]) = v124;
              if (!v124)
                goto LABEL_206;
            }
            memmove(v133, v125, v124);
LABEL_206:
            *((_BYTE *)v133 + v124) = 0;
            LOBYTE(object[8]) = 1;
            v136 = object[0];
            if (SHIBYTE(object[7]) < 0)
              operator delete(object[5]);
            if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
              operator delete(object[1]);
            if (object[0])
              os_release(object[0]);
            v137 = v116 * 57.2957795;
            v138 = v117 * 57.2957795;
            v139 = v118 * 57.2957795;
            if (v121 && *(_QWORD *)(v121 + 24))
            {
              v140 = _os_log_pack_size();
              v141 = (std::__shared_weak_count_vtbl *)operator new(v140, (std::align_val_t)8uLL);
              v142 = (std::__shared_weak_count *)operator new();
              v143 = v142;
              v142->__shared_owners_ = 0;
              v144 = (unint64_t *)&v142->__shared_owners_;
              v142->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v142->__shared_weak_owners_ = 0;
              v142[1].__vftable = v141;
              object[0] = v141;
              object[1] = v141;
              object[2] = v142;
              do
                v145 = __ldxr(v144);
              while (__stxr(v145 + 1, v144));
              memset(&object[3], 0, 24);
              do
                v146 = __ldaxr(v144);
              while (__stlxr(v146 - 1, v144));
              if (!v146)
              {
                ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                std::__shared_weak_count::__release_weak(v143);
              }
              v147 = object[0];
              v148 = _os_log_pack_fill();
              *(_DWORD *)v148 = 134218496;
              *(double *)(v148 + 4) = v137;
              *(_WORD *)(v148 + 12) = 2048;
              *(double *)(v148 + 14) = v138;
              *(_WORD *)(v148 + 22) = 2048;
              *(double *)(v148 + 24) = v139;
              v149 = operator new();
              v150 = *(unsigned __int8 *)(v122 + 39);
              if ((v150 & 0x80u) == 0)
                v151 = v123;
              else
                v151 = *(_QWORD *)(v122 + 16);
              if ((v150 & 0x80u) != 0)
                v150 = *(_QWORD *)(v122 + 24);
              *(_QWORD *)v149 = v147;
              *(_OWORD *)(v149 + 8) = *(_OWORD *)&object[1];
              object[1] = 0;
              object[2] = 0;
              *(_OWORD *)(v149 + 24) = *(_OWORD *)&object[3];
              object[3] = 0;
              object[4] = 0;
              *(_QWORD *)(v149 + 40) = v151;
              *(_QWORD *)(v149 + 48) = v150;
              *(_BYTE *)(v149 + 56) = 2;
              v1844[0] = 0;
              *(_QWORD *)v1796 = v149;
              (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v121 + 24) + 40))(*(_QWORD *)(v121 + 24), v1796);
              v152 = *(_QWORD *)v1796;
              *(_QWORD *)v1796 = 0;
              if (v152)
              {
                v153 = *(std::__shared_weak_count **)(v152 + 32);
                if (v153)
                {
                  v154 = (unint64_t *)&v153->__shared_owners_;
                  do
                    v155 = __ldaxr(v154);
                  while (__stlxr(v155 - 1, v154));
                  if (!v155)
                  {
                    ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                    std::__shared_weak_count::__release_weak(v153);
                  }
                }
                v156 = *(std::__shared_weak_count **)(v152 + 16);
                if (v156)
                {
                  v157 = (unint64_t *)&v156->__shared_owners_;
                  do
                    v158 = __ldaxr(v157);
                  while (__stlxr(v158 - 1, v157));
                  if (!v158)
                  {
                    ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                    std::__shared_weak_count::__release_weak(v156);
                  }
                }
                MEMORY[0x212BC6398](v152, 0x10F0C40B62ED6C6);
                v159 = v1844[0];
                v1844[0] = 0;
                if (v159)
                {
                  v160 = (std::__shared_weak_count *)*((_QWORD *)v159 + 4);
                  if (v160)
                  {
                    v161 = (unint64_t *)&v160->__shared_owners_;
                    do
                      v162 = __ldaxr(v161);
                    while (__stlxr(v162 - 1, v161));
                    if (!v162)
                    {
                      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                      std::__shared_weak_count::__release_weak(v160);
                    }
                  }
                  v163 = (std::__shared_weak_count *)*((_QWORD *)v159 + 2);
                  if (v163)
                  {
                    v164 = (unint64_t *)&v163->__shared_owners_;
                    do
                      v165 = __ldaxr(v164);
                    while (__stlxr(v165 - 1, v164));
                    if (!v165)
                    {
                      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                      std::__shared_weak_count::__release_weak(v163);
                    }
                  }
                  MEMORY[0x212BC6398](v159, 0x10F0C40B62ED6C6);
                }
              }
              v166 = (std::__shared_weak_count *)object[4];
              if (object[4])
              {
                v167 = (unint64_t *)((char *)object[4] + 8);
                do
                  v168 = __ldaxr(v167);
                while (__stlxr(v168 - 1, v167));
                if (!v168)
                {
                  ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                  std::__shared_weak_count::__release_weak(v166);
                }
              }
              v169 = (std::__shared_weak_count *)object[2];
              if (object[2])
              {
                v170 = (unint64_t *)((char *)object[2] + 8);
                do
                  v171 = __ldaxr(v170);
                while (__stlxr(v171 - 1, v170));
                if (!v171)
                {
                  ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                  std::__shared_weak_count::__release_weak(v169);
                }
              }
            }
            else
            {
              os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG);
              LODWORD(object[0]) = 134218496;
              *(void **)((char *)object + 4) = *(void **)&v137;
              WORD2(object[1]) = 2048;
              *(void **)((char *)&object[1] + 6) = *(void **)&v138;
              HIWORD(object[2]) = 2048;
              object[3] = *(void **)&v139;
              LODWORD(v1655) = 32;
              v1654 = object;
              v172 = (void *)_os_log_send_and_compose_impl();
              if (v172)
                free(v172);
            }
            if (v119)
            {
              sub_20E8C003C((uint64_t)oslog, "Before optimize: Roll %f, pitch %f, Yaw %f", v137, v138, v139);
              sub_20E863570((uint64_t)oslog);
            }
            sub_20E863570((uint64_t)oslog);
            v173 = *(std::__shared_weak_count **)&oslog[64];
            if (*(_QWORD *)&oslog[64])
            {
              v174 = (unint64_t *)(*(_QWORD *)&oslog[64] + 8);
              do
                v175 = __ldaxr(v174);
              while (__stlxr(v175 - 1, v174));
              if (!v175)
              {
                ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                std::__shared_weak_count::__release_weak(v173);
              }
            }
            goto LABEL_268;
          }
        }
        memmove(v130, v128, v129);
        goto LABEL_198;
      }
    }
  }
LABEL_268:
  v176 = (_QWORD *)v1659[1];
  v179 = (_QWORD *)*v176;
  v177 = v176 + 1;
  v178 = v179;
  if (v179 != v177)
  {
    while (1)
    {
      v180 = v178[6];
      if (!v180)
        break;
      v181 = v180 + 40;
      v182 = *(unsigned __int8 *)(v180 + 192);
      if (v182)
        v183 = v181;
      else
        v183 = 0;
      if (!v182)
        goto LABEL_282;
LABEL_283:
      *(_BYTE *)(v183 + 56) = 0;
      v187 = (_QWORD *)v178[1];
      if (v187)
      {
        do
        {
          v188 = v187;
          v187 = (_QWORD *)*v187;
        }
        while (v187);
      }
      else
      {
        do
        {
          v188 = (_QWORD *)v178[2];
          _ZF = *v188 == (_QWORD)v178;
          v178 = v188;
        }
        while (!_ZF);
      }
      v178 = v188;
      if (v188 == v177)
        goto LABEL_289;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/MapOptimizationUtil.cpp", 186, (uint64_t)"track.second", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v184 = v178[6];
    v185 = v184 + 40;
    v186 = *(unsigned __int8 *)(v184 + 192);
    if (v186)
      v183 = v185;
    else
      v183 = 0;
    if (v186)
      goto LABEL_283;
LABEL_282:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/MapOptimizationUtil.cpp", 188, (uint64_t)"structure", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    goto LABEL_283;
  }
LABEL_289:
  v189 = *(_BYTE *)(v1670 + 167);
  v190 = *(char **)(v1723 + 5032);
  v191 = v1723;
  v192 = *(char **)(v1723 + 5040);
  if (v192 == v190 || *(_DWORD *)v190)
  {
    v193 = *(uint64_t **)(v1723 + 96);
    if (v193)
    {
      v194 = *v193;
      if (v192 == v190)
        v190 = *(char **)(v1723 + 5040);
      if (v192 == v190)
        goto LABEL_302;
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 194, (uint64_t)"this->viobadata_ref_.state_to_imu_sample_time_offset", 52, (uint64_t)"Error the timeoffset variable is not set", 40, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_1995;
      }
      v193 = *(uint64_t **)(v191 + 96);
      if (!v193)
      {
        v190 = *(char **)(v191 + 5040);
        goto LABEL_326;
      }
      v190 = *(char **)(v191 + 5032);
      v192 = *(char **)(v191 + 5040);
      v194 = *v193;
      if (v192 == v190)
        v190 = *(char **)(v191 + 5040);
      if (v192 == v190)
      {
LABEL_302:
        v195 = (char *)sub_20F619254(v191 + 5056);
        *(_DWORD *)v195 = -1;
        v195[4] = 1;
        *((_DWORD *)v195 + 2) = 0;
        *((_DWORD *)v195 + 4) = 0;
        v195[20] = 1;
        *(_WORD *)(v195 + 21) = *(_WORD *)v1796;
        v195[23] = v1796[2];
        *((_QWORD *)v195 + 3) = v193;
        *((_QWORD *)v195 + 4) = v194;
        v195[40] = 0;
        *(_DWORD *)(v195 + 41) = *(_DWORD *)oslog;
        *((_DWORD *)v195 + 11) = *(_DWORD *)&oslog[3];
        LODWORD(object[0]) = 0;
        object[1] = v195;
        v190 = sub_20F618FEC((char **)(v191 + 5032), (__int128 *)v190, (uint64_t)object);
        v196 = *(char **)(v191 + 6256);
        v197 = *(_QWORD *)(v191 + 6264);
        if ((unint64_t)v196 < v197)
        {
          *(_DWORD *)v196 = 0;
          v198 = (uint64_t)(v196 + 4);
LABEL_325:
          *(_QWORD *)(v191 + 6256) = v198;
          *(_BYTE *)(v191 + 5810) = 0;
          *(_BYTE *)(v191 + 5808) = 0;
          *(_BYTE *)(v191 + 6588) = 0;
          *(_DWORD *)(v191 + 6584) = 0;
          goto LABEL_326;
        }
        v199 = *(char **)(v191 + 6248);
        v200 = (v196 - v199) >> 2;
        v201 = v200 + 1;
        if ((unint64_t)(v200 + 1) >> 62)
          sub_20E867F44();
        v202 = v197 - (_QWORD)v199;
        if (v202 >> 1 > v201)
          v201 = v202 >> 1;
        if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFFCLL)
          v203 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v203 = v201;
        if (v203)
        {
          if (v203 >> 62)
            sub_20E877A38();
          v204 = operator new(4 * v203);
          v205 = &v204[4 * v200];
          v206 = &v204[4 * v203];
          *v205 = 0;
          v198 = (uint64_t)(v205 + 1);
          v207 = v196 - v199;
          if (v196 == v199)
            goto LABEL_323;
        }
        else
        {
          v204 = 0;
          v205 = (_DWORD *)(4 * v200);
          v206 = 0;
          *(_DWORD *)(4 * v200) = 0;
          v198 = 4 * v200 + 4;
          v207 = v196 - v199;
          if (v196 == v199)
          {
LABEL_323:
            *(_QWORD *)(v191 + 6248) = v205;
            *(_QWORD *)(v191 + 6256) = v198;
            *(_QWORD *)(v191 + 6264) = v206;
            if (v199)
              operator delete(v199);
            goto LABEL_325;
          }
        }
        v208 = v207 - 4;
        if (v208 < 0x2C)
          goto LABEL_2036;
        if ((unint64_t)(v199 - v204) < 0x20)
          goto LABEL_2036;
        v209 = (v208 >> 2) + 1;
        v210 = 4 * (v209 & 0x7FFFFFFFFFFFFFF8);
        v211 = &v196[-v210];
        v205 = (_DWORD *)((char *)v205 - v210);
        v212 = &v204[4 * v200 - 16];
        v213 = v196 - 16;
        v214 = v209 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v215 = *(_OWORD *)v213;
          *(v212 - 1) = *((_OWORD *)v213 - 1);
          *v212 = v215;
          v212 -= 2;
          v213 -= 32;
          v214 -= 8;
        }
        while (v214);
        v196 = v211;
        if (v209 != (v209 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_2036:
          do
          {
            v216 = *((_DWORD *)v196 - 1);
            v196 -= 4;
            *--v205 = v216;
          }
          while (v196 != v199);
        }
        goto LABEL_323;
      }
    }
    if (*(_DWORD *)v190)
      goto LABEL_302;
    v190 = v192;
LABEL_326:
    v191 = v1723;
  }
  *(_BYTE *)(*((_QWORD *)v190 + 1) + 20) = v189;
  v217 = *(_QWORD *)(v191 + 5328) - *(_QWORD *)(v191 + 5320);
  v218 = (v217 >> 4);
  v219 = *(_QWORD **)(v191 + 8);
  if (v218 == v219[39])
    goto LABEL_517;
  __dst = *(unsigned __int8 *)(v1670 + 166);
  v1686 = (_BYTE *)(v191 + 5808);
  v1703 = (_QWORD *)v191;
  if (!*(_BYTE *)(v191 + 5808))
  {
    memset(object, 0, 32);
    if (sub_20F5B8114((_QWORD *)(v191 + 4832), (int *)object, oslog, 1))
    {
      *(_QWORD *)(v191 + 6400) = *(_QWORD *)(v191 + 6392);
      *(_QWORD *)(v191 + 6424) = *(_QWORD *)(v191 + 6416);
      *(_QWORD *)(v191 + 6448) = *(_QWORD *)(v191 + 6440);
      *(_QWORD *)(v191 + 6472) = *(_QWORD *)(v191 + 6464);
      *(_QWORD *)(v191 + 6496) = *(_QWORD *)(v191 + 6488);
      *(_QWORD *)(v191 + 6520) = *(_QWORD *)(v191 + 6512);
      *(_QWORD *)(v191 + 6544) = *(_QWORD *)(v191 + 6536);
      *(_QWORD *)(v191 + 6568) = *(_QWORD *)(v191 + 6560);
      v220 = *(_QWORD *)(v191 + 5608);
      v221 = *(_QWORD *)(v191 + 5616);
      while (v220 != v221)
      {
        v222 = *(_QWORD *)(v220 + 208);
        if (*(_BYTE *)(v220 + 496)
          || (*(_BYTE *)(v222 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v220 + 216) + 4) & 6) != 0)
        {
          sub_20F394A20(v191 + 6392, v222);
          sub_20F3D35E0((_QWORD *)(v191 + 6392), *(_QWORD *)(v220 + 216));
        }
        v220 += 504;
      }
      v223 = *(_QWORD *)(v191 + 5632);
      v224 = *(_QWORD *)(v191 + 5640);
      while (v223 != v224)
      {
        v225 = *(_QWORD *)(v223 + 136);
        if (*(_BYTE *)(v223 + 272) || (*(_BYTE *)(v225 + 4) & 6) != 0)
          sub_20F394A20(v191 + 6392, v225);
        v223 += 280;
      }
      v226 = (uint64_t *)v191;
      sub_20F5B8680(*(_QWORD *)(v191 + 5656), *(_QWORD *)(v191 + 5664), (_QWORD *)(v191 + 6392));
      sub_20F5B85BC(v226[710], v226[711], (_QWORD *)(v191 + 6392));
      sub_20F5B8444(v226[713], v226[714], (_QWORD *)(v191 + 6392));
      v227 = *(_QWORD *)(v191 + 5728);
      v228 = *(_QWORD *)(v191 + 5736);
      while (v227 != v228)
      {
        v229 = *(_QWORD *)(v227 + 736);
        if (*(_BYTE *)(v227 + 880)
          || (*(_BYTE *)(v229 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v227 + 744) + 4) & 6) != 0)
        {
          sub_20F394A20(v191 + 6392, v229);
          sub_20F394A20(v191 + 6392, *(_QWORD *)(v227 + 744));
        }
        v227 += 888;
      }
      v230 = (*(_QWORD *)(v191 + 6520) - *(_QWORD *)(v191 + 6512)) >> 2;
      if (HIDWORD(object[2]) > v230)
        LODWORD(v230) = HIDWORD(object[2]);
      _CF = *(_DWORD *)&oslog[20] >= v230;
      v231 = *(_DWORD *)&oslog[20] - v230;
      if (_CF)
        v232 = v231;
      else
        v232 = 0;
      sub_20F59A618((_QWORD *)(v191 + 4832));
      if (!v232)
        goto LABEL_362;
    }
    else if (!*(_DWORD *)&oslog[20])
    {
      goto LABEL_362;
    }
LABEL_361:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 271, (uint64_t)"!this->linear_system_.graph().template numberOfVariable<VARIABLE_TYPE>()", 72, (uint64_t)"CameraCalibVariables of this type have already been added.", 58, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_1995;
    }
    goto LABEL_362;
  }
  if ((v217 >> 4))
    goto LABEL_361;
LABEL_362:
  v233 = (uint64_t *)v219[47];
  v234 = (_QWORD *)v191;
  if (v233)
  {
    v1682 = (void *)(v191 + 5320);
    v1669 = (void **)(v191 + 6320);
    v1674 = v191 + 6584;
    v235 = "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp";
    while (1)
    {
      v236 = v233 + 3;
      v237 = *((_DWORD *)v233 + 4);
      *(_DWORD *)v1796 = v237;
      *(_QWORD *)&v1796[8] = v233 + 3;
      v1797 = 1065353216;
      v1798 = 0;
      memset(&v1796[240], 0, 56);
      v1796[4] = __dst;
      v238 = *(_OWORD *)(v233 + 25);
      v239 = *(_OWORD *)(v233 + 23);
      v240 = *(_OWORD *)(v233 + 29);
      *(_OWORD *)&v1796[208] = *(_OWORD *)(v233 + 27);
      *(_OWORD *)&v1796[224] = v240;
      *(_OWORD *)&v1796[176] = v239;
      *(_OWORD *)&v1796[192] = v238;
      v241 = *(_OWORD *)(v233 + 17);
      v242 = *(_OWORD *)(v233 + 15);
      v243 = *(_OWORD *)(v233 + 21);
      *(_OWORD *)&v1796[144] = *(_OWORD *)(v233 + 19);
      *(_OWORD *)&v1796[160] = v243;
      *(_OWORD *)&v1796[112] = v242;
      *(_OWORD *)&v1796[128] = v241;
      v244 = *(_OWORD *)(v233 + 9);
      v245 = *(_OWORD *)(v233 + 7);
      v246 = *(_OWORD *)(v233 + 13);
      *(_OWORD *)&v1796[80] = *(_OWORD *)(v233 + 11);
      *(_OWORD *)&v1796[96] = v246;
      *(_OWORD *)&v1796[48] = v245;
      *(_OWORD *)&v1796[64] = v244;
      v247 = *(_OWORD *)(v233 + 5);
      *(_OWORD *)&v1796[16] = *(_OWORD *)(v233 + 3);
      *(_OWORD *)&v1796[32] = v247;
      v248 = (char *)v234[665];
      v249 = (char *)v234[666];
      if (v249 == v248)
      {
        v248 = (char *)v234[666];
      }
      else
      {
        v250 = (v249 - v248) >> 4;
        do
        {
          v251 = v250 >> 1;
          v252 = &v248[16 * (v250 >> 1)];
          v254 = *(_DWORD *)v252;
          v253 = v252 + 16;
          v250 += ~(v250 >> 1);
          if (v254 < v237)
            v248 = v253;
          else
            v250 = v251;
        }
        while (v250);
        v1710 = (char *)v234[666];
        if (v249 != v248 && v237 == *(_DWORD *)v248)
        {
          if (sub_21023D5B4(v235, 283, (uint64_t)"result", 6, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          goto LABEL_414;
        }
      }
      oslog[4] = 1;
      *(_DWORD *)oslog = -1;
      *(_DWORD *)&oslog[8] = 0;
      *(_QWORD *)&oslog[16] = *(_QWORD *)v1796;
      *(_QWORD *)&oslog[24] = v233 + 3;
      v255 = *(_OWORD *)(v233 + 5);
      *(_OWORD *)&oslog[32] = *v236;
      *(_OWORD *)&oslog[48] = v255;
      v256 = *(_OWORD *)(v233 + 7);
      v257 = *(_OWORD *)(v233 + 9);
      v258 = *(_OWORD *)(v233 + 13);
      *(_OWORD *)&oslog[96] = *(_OWORD *)(v233 + 11);
      *(_OWORD *)&oslog[112] = v258;
      *(_OWORD *)&oslog[64] = v256;
      *(_OWORD *)&oslog[80] = v257;
      v259 = *(_OWORD *)(v233 + 15);
      v260 = *(_OWORD *)(v233 + 17);
      v261 = *(_OWORD *)(v233 + 21);
      *(_OWORD *)&oslog[160] = *(_OWORD *)(v233 + 19);
      *(_OWORD *)&oslog[176] = v261;
      *(_OWORD *)&oslog[128] = v259;
      *(_OWORD *)&oslog[144] = v260;
      v262 = *(_OWORD *)(v233 + 23);
      v263 = *(_OWORD *)(v233 + 25);
      v264 = *(_OWORD *)(v233 + 29);
      *(_OWORD *)&oslog[224] = *(_OWORD *)(v233 + 27);
      *(_OWORD *)&oslog[240] = v264;
      *(_OWORD *)&oslog[192] = v262;
      *(_OWORD *)&oslog[208] = v263;
      memset(&v1796[240], 0, 40);
      *(_DWORD *)&oslog[312] = 1065353216;
      oslog[320] = 0;
      memset(&oslog[328], 0, 224);
      LODWORD(object[0]) = v237;
      LODWORD(object[2]) = 0;
      object[1] = *(void **)oslog;
      object[3] = *(void **)v1796;
      object[4] = v233 + 3;
      v266 = *(_OWORD *)(v233 + 27);
      v265 = *(_OWORD *)(v233 + 29);
      v267 = *(_OWORD *)(v233 + 25);
      *(_OWORD *)&object[25] = *(_OWORD *)(v233 + 23);
      *(_OWORD *)&object[27] = v267;
      *(_OWORD *)&object[29] = v266;
      *(_OWORD *)&object[31] = v265;
      v269 = *(_OWORD *)(v233 + 19);
      v268 = *(_OWORD *)(v233 + 21);
      v270 = *(_OWORD *)(v233 + 17);
      *(_OWORD *)&object[17] = *(_OWORD *)(v233 + 15);
      *(_OWORD *)&object[19] = v270;
      *(_OWORD *)&object[21] = v269;
      *(_OWORD *)&object[23] = v268;
      v272 = *(_OWORD *)(v233 + 11);
      v271 = *(_OWORD *)(v233 + 13);
      v273 = *(_OWORD *)(v233 + 9);
      *(_OWORD *)&object[9] = *(_OWORD *)(v233 + 7);
      *(_OWORD *)&object[11] = v273;
      *(_OWORD *)&object[13] = v272;
      *(_OWORD *)&object[15] = v271;
      v274 = *(_OWORD *)(v233 + 5);
      *(_OWORD *)&object[5] = *v236;
      *(_OWORD *)&object[7] = v274;
      memset(&object[33], 0, 56);
      memset(&oslog[256], 0, 56);
      LODWORD(object[40]) = 1065353216;
      LOBYTE(object[41]) = 0;
      memset(&object[42], 0, 224);
      v1710 = sub_20F7157B4((uint64_t)v1682, v248, (int *)object);
      v275 = object[38];
      if (object[38])
      {
        do
        {
          v276 = (_QWORD *)*v275;
          operator delete(v275);
          v275 = v276;
        }
        while (v276);
      }
      v277 = object[36];
      object[36] = 0;
      if (v277)
        operator delete(v277);
      if (object[33])
      {
        object[34] = object[33];
        operator delete(object[33]);
      }
      v278 = *(_QWORD **)&oslog[296];
      if (*(_QWORD *)&oslog[296])
      {
        do
        {
          v279 = (_QWORD *)*v278;
          operator delete(v278);
          v278 = v279;
        }
        while (v279);
      }
      if (*(_QWORD *)&oslog[280])
        operator delete(*(void **)&oslog[280]);
      v234 = v1703;
      if (*(_QWORD *)&oslog[256])
        operator delete(*(void **)&oslog[256]);
      if (__dst)
        break;
LABEL_413:
      v1686[2] = 0;
      *v1686 = 0;
      *(_DWORD *)v1674 = 0;
      *(_BYTE *)(v1674 + 4) = 0;
LABEL_414:
      v302.n128_u32[1] = 0;
      v302.n128_u64[1] = 0;
      memset(object, 0, 32);
      LODWORD(object[4]) = 1065353216;
      v303 = (uint64_t **)v234[16];
      v304 = *v303;
      v305 = v303[1];
      while (v304 != v305)
      {
        v306 = (__int128 *)*v304;
        if (*(_QWORD *)(*v304 + 24))
        {
          if (*((_DWORD *)v306 + 4) != *((_DWORD *)v233 + 4))
            goto LABEL_415;
LABEL_430:
          v312 = *v306;
          *(_QWORD *)&oslog[16] = *((_QWORD *)v306 + 2);
          *(_OWORD *)oslog = v312;
          *(_OWORD *)&oslog[24] = *(__int128 *)((char *)v306 + 24);
          sub_20F61A180((uint64_t)object, (uint64_t *)oslog, (uint64_t)oslog);
          goto LABEL_415;
        }
        sub_21023D70C(v235, 288, (uint64_t)"frame->lens_model_", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v307 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v307 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (byte_254A6DE68)
          v308 = byte_254A6DE70 == 0;
        else
          v308 = 0;
        if (!v308)
        {
          v309 = qword_254A6DE40;
          for (i = qword_254A6DE48; v309 != i; v309 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v309)(*(_QWORD *)(v309 + 8), "frame->lens_model_", 18, "", 0);
        }
        v311 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v311 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "frame->lens_model_", 18, "", 0);
        v306 = (__int128 *)*v304;
        if (*(_DWORD *)(*v304 + 16) == *((_DWORD *)v233 + 4))
          goto LABEL_430;
LABEL_415:
        v304 += 2;
      }
      v313 = *((_QWORD *)v1710 + 1);
      if (*(_QWORD *)(v313 + 304))
      {
        v314 = *(_QWORD **)(v313 + 296);
        if (v314)
        {
          do
          {
            v315 = (_QWORD *)*v314;
            operator delete(v314);
            v314 = v315;
          }
          while (v315);
        }
        *(_QWORD *)(v313 + 296) = 0;
        v316 = *(_QWORD *)(v313 + 288);
        if (v316)
        {
          for (j = 0; j != v316; ++j)
            *(_QWORD *)(*(_QWORD *)(v313 + 280) + 8 * j) = 0;
        }
        *(_QWORD *)(v313 + 304) = 0;
      }
      v318 = object[0];
      object[0] = 0;
      v319 = *(void **)(v313 + 280);
      *(_QWORD *)(v313 + 280) = v318;
      if (v319)
        operator delete(v319);
      v320 = (unint64_t)object[1];
      v321 = object[2];
      object[1] = 0;
      v322 = object[3];
      *(void **)(v313 + 296) = object[2];
      *(_QWORD *)(v313 + 304) = v322;
      v302.n128_u32[0] = (unsigned __int32)object[4];
      *(_DWORD *)(v313 + 312) = object[4];
      *(_QWORD *)(v313 + 288) = v320;
      if (v322)
      {
        v323 = *((_QWORD *)v321 + 1);
        if ((v320 & (v320 - 1)) != 0)
        {
          if (v323 >= v320)
            v323 %= v320;
        }
        else
        {
          v323 &= v320 - 1;
        }
        *(_QWORD *)(*(_QWORD *)(v313 + 280) + 8 * v323) = v313 + 296;
        object[2] = 0;
        object[3] = 0;
        v321 = *(void **)(v313 + 296);
      }
      for (; v321; v321 = *(void **)v321)
        v302.n128_f64[0] = sub_20F6182A0(*((char **)v321 + 5), (float64x2_t *)(v313 + 32), v302);
      memset(oslog, 0, 24);
      v324 = (_QWORD *)v1703[2];
      v325 = v324[2];
      if (v325)
      {
        v326 = v1710;
        if (v325 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        v327 = (_QWORD *)v1703[2];
        v328 = (char *)operator new(24 * v325);
        *(_QWORD *)oslog = v328;
        *(_QWORD *)&oslog[8] = v328;
        *(_QWORD *)&oslog[16] = &v328[24 * v325];
        v329 = v327 + 1;
        v330 = (_QWORD *)*v327;
        v1701 = v327 + 1;
        if ((_QWORD *)*v327 == v327 + 1)
          goto LABEL_457;
LABEL_470:
        while (2)
        {
          v340 = v330[6];
          if (*(_BYTE *)(v340 + 192))
            v341 = v340 + 40;
          else
            v341 = 0;
          if (*(_BYTE *)(v340 + 192))
          {
            v342 = *(_DWORD *)(v340 + 88);
            if (v342 == *((_DWORD *)v233 + 4))
            {
              v343 = *(_QWORD *)(v340 + 200);
              v344 = *(_QWORD *)(v340 + 208);
              v345 = *(_QWORD *)(v340 + 72);
              v346 = *(_DWORD *)(v340 + 80);
              if (v344 != v343)
              {
                v347 = (v344 - v343) >> 5;
                while (1)
                {
                  v348 = v347 >> 1;
                  v349 = v343 + 32 * (v347 >> 1);
                  v350 = *(_DWORD *)(v349 + 16);
                  _CF = v350 >= v342;
                  if (v350 != v342)
                    goto LABEL_483;
                  if (*(_QWORD *)v349 >= v345)
                    break;
LABEL_477:
                  v343 = v349 + 32;
                  v348 = v347 + ~v348;
LABEL_478:
                  v347 = v348;
                  if (!v348)
                    goto LABEL_486;
                }
                if (*(_QWORD *)v349 != v345)
                  goto LABEL_478;
                _CF = *(_DWORD *)(v349 + 8) >= v346;
LABEL_483:
                if (_CF)
                  goto LABEL_478;
                goto LABEL_477;
              }
LABEL_486:
              if (v343 != v344
                && *(_DWORD *)(v343 + 16) == v342
                && *(_QWORD *)v343 == v345
                && *(_DWORD *)(v343 + 8) == v346)
              {
                v352 = *(_QWORD *)(v343 + 24);
                v353 = *(_DWORD *)(v340 + 32);
                v354 = *(_QWORD *)&oslog[16];
                if ((unint64_t)v328 >= *(_QWORD *)&oslog[16])
                  goto LABEL_491;
LABEL_501:
                *(_DWORD *)v328 = v353;
                v363 = v328 + 24;
                *((_QWORD *)v328 + 1) = v352;
                *((_QWORD *)v328 + 2) = v341;
              }
              else
              {
                v352 = 0;
                v353 = *(_DWORD *)(v340 + 32);
                v354 = *(_QWORD *)&oslog[16];
                if ((unint64_t)v328 < *(_QWORD *)&oslog[16])
                  goto LABEL_501;
LABEL_491:
                v355 = v233;
                v356 = v235;
                v357 = *(char **)oslog;
                v358 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v328[-*(_QWORD *)oslog] >> 3);
                v359 = v358 + 1;
                if (v358 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_20E867F44();
                v360 = 0xAAAAAAAAAAAAAAABLL * ((v354 - *(_QWORD *)oslog) >> 3);
                if (2 * v360 > v359)
                  v359 = 2 * v360;
                if (v360 >= 0x555555555555555)
                  v361 = 0xAAAAAAAAAAAAAAALL;
                else
                  v361 = v359;
                if (v361)
                {
                  if (v361 > 0xAAAAAAAAAAAAAAALL)
                    sub_20E877A38();
                  v362 = (char *)operator new(24 * v361);
                }
                else
                {
                  v362 = 0;
                }
                v364 = &v362[24 * v358];
                *(_DWORD *)v364 = v353;
                *((_QWORD *)v364 + 1) = v352;
                *((_QWORD *)v364 + 2) = v341;
                v365 = v364;
                v235 = v356;
                if (v328 != v357)
                {
                  do
                  {
                    v366 = *(_OWORD *)(v328 - 24);
                    *((_QWORD *)v365 - 1) = *((_QWORD *)v328 - 1);
                    *(_OWORD *)(v365 - 24) = v366;
                    v365 -= 24;
                    v328 -= 24;
                  }
                  while (v328 != v357);
                  v328 = *(char **)oslog;
                }
                v233 = v355;
                v367 = &v362[24 * v361];
                v363 = v364 + 24;
                *(_QWORD *)oslog = v365;
                *(_QWORD *)&oslog[8] = v364 + 24;
                *(_QWORD *)&oslog[16] = v367;
                v326 = v1710;
                if (v328)
                  operator delete(v328);
                v329 = v1701;
              }
              *(_QWORD *)&oslog[8] = v363;
              v328 = v363;
            }
          }
          v368 = (_QWORD *)v330[1];
          if (v368)
          {
            do
            {
              v369 = v368;
              v368 = (_QWORD *)*v368;
            }
            while (v368);
          }
          else
          {
            do
            {
              v369 = (_QWORD *)v330[2];
              _ZF = *v369 == (_QWORD)v330;
              v330 = v369;
            }
            while (!_ZF);
          }
          v330 = v369;
          if (v369 == v329)
            goto LABEL_457;
          continue;
        }
      }
      v328 = 0;
      v326 = v1710;
      v331 = (_QWORD *)*v324;
      v329 = v324 + 1;
      v330 = v331;
      v1701 = v329;
      if (v331 != v329)
        goto LABEL_470;
LABEL_457:
      v332 = (_QWORD *)*((_QWORD *)v326 + 1);
      v333 = (void *)v332[32];
      if (v333)
      {
        v332[33] = v333;
        operator delete(v333);
        v332[32] = 0;
        v332[33] = 0;
        v332[34] = 0;
        v328 = *(char **)&oslog[8];
      }
      v334 = *(_QWORD *)&oslog[16];
      v332[32] = *(_QWORD *)oslog;
      v332[33] = v328;
      v332[34] = v334;
      v335 = object[2];
      if (object[2])
      {
        do
        {
          v336 = (_QWORD *)*v335;
          operator delete(v335);
          v335 = v336;
        }
        while (v336);
      }
      v337 = object[0];
      object[0] = 0;
      if (v337)
        operator delete(v337);
      v338 = *(_QWORD **)&v1796[280];
      if (*(_QWORD *)&v1796[280])
      {
        do
        {
          v339 = (_QWORD *)*v338;
          operator delete(v338);
          v338 = v339;
        }
        while (v339);
      }
      if (*(_QWORD *)&v1796[264])
        operator delete(*(void **)&v1796[264]);
      v234 = v1703;
      if (*(_QWORD *)&v1796[240])
        operator delete(*(void **)&v1796[240]);
      v233 = (uint64_t *)*v233;
      if (!v233)
        goto LABEL_516;
    }
    v280 = (char *)v1703[791];
    v281 = v1703[792];
    if ((unint64_t)v280 < v281)
    {
      *(_DWORD *)v280 = v237;
      v282 = (uint64_t)(v280 + 4);
LABEL_412:
      v1703[791] = v282;
      v234 = v1703;
      goto LABEL_413;
    }
    v283 = (char *)*v1669;
    v284 = v280 - (_BYTE *)*v1669;
    v285 = v284 >> 2;
    v286 = (v284 >> 2) + 1;
    if (v286 >> 62)
      sub_20E867F44();
    v287 = v281 - (_QWORD)v283;
    if (v287 >> 1 > v286)
      v286 = v287 >> 1;
    if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFFCLL)
      v288 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v288 = v286;
    if (v288)
    {
      if (v288 >> 62)
        sub_20E877A38();
      v289 = v288;
      v290 = operator new(4 * v288);
      v288 = v289;
      v291 = (unsigned int *)&v290[4 * v285];
      *v291 = v237;
      v282 = (uint64_t)(v291 + 1);
      v292 = v280 - v283;
      if (v280 == v283)
        goto LABEL_410;
    }
    else
    {
      v290 = 0;
      v291 = (unsigned int *)(4 * v285);
      *(_DWORD *)(4 * v285) = v237;
      v282 = 4 * v285 + 4;
      v292 = v280 - v283;
      if (v280 == v283)
      {
LABEL_410:
        v1703[790] = v291;
        v1703[791] = v282;
        v1703[792] = &v290[4 * v288];
        if (v283)
          operator delete(v283);
        goto LABEL_412;
      }
    }
    v293 = v292 - 4;
    if (v293 < 0x2C)
      goto LABEL_2037;
    if ((unint64_t)(v280 - v290 - v284) < 0x20)
      goto LABEL_2037;
    v294 = (v293 >> 2) + 1;
    v295 = 4 * (v294 & 0x7FFFFFFFFFFFFFF8);
    v296 = &v280[-v295];
    v291 = (unsigned int *)((char *)v291 - v295);
    v297 = &v290[4 * v285 - 16];
    v298 = v280 - 16;
    v299 = v294 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v300 = *(_OWORD *)v298;
      *(v297 - 1) = *((_OWORD *)v298 - 1);
      *v297 = v300;
      v297 -= 2;
      v298 -= 32;
      v299 -= 8;
    }
    while (v299);
    v280 = v296;
    if (v294 != (v294 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_2037:
      do
      {
        v301 = *((_DWORD *)v280 - 1);
        v280 -= 4;
        *--v291 = v301;
      }
      while (v280 != v283);
    }
    goto LABEL_410;
  }
LABEL_516:
  v191 = v1723;
  v219 = *(_QWORD **)(v1723 + 8);
  v218 = v219[39];
LABEL_517:
  v370 = (*(_QWORD *)(v191 + 5424) - *(_QWORD *)(v191 + 5416)) >> 4;
  if (v218 != v370)
  {
    __sba = *(_BYTE *)(v1670 + 168);
    v1681 = (_BYTE *)(v191 + 5808);
    v1704 = (_QWORD *)v191;
    if (*(_BYTE *)(v191 + 5808))
    {
      if (!(_DWORD)v370)
      {
LABEL_523:
        v372 = (uint64_t *)v219[52];
        if (!v372)
        {
LABEL_670:
          v371 = v1723;
          if (!v1791)
            goto LABEL_709;
          goto LABEL_671;
        }
        v1680 = v191 + 5416;
        v1672 = (void **)(v191 + 6344);
        v1677 = v191 + 6584;
        while (1)
        {
          *(_DWORD *)v1796 = *((_DWORD *)v372 + 4);
          v1796[4] = 1;
          *(_QWORD *)&v1796[40] = 0;
          memset(&v1796[56], 0, 24);
          *(_OWORD *)&v1796[24] = 0u;
          *(_QWORD *)&v1796[8] = v372 + 3;
          *(_QWORD *)&v1796[16] = 0x3FF0000000000000;
          *(_QWORD *)&v1796[48] = 0x3FF0000000000000;
          *(_QWORD *)&v1796[80] = 0x3FF0000000000000;
          memset(&v1796[88], 0, 56);
          *(_DWORD *)&v1796[144] = 1065353216;
          v1796[152] = 0;
          *(_OWORD *)&v1796[16] = *(_OWORD *)(v372 + 3);
          v373 = *(_OWORD *)(v372 + 5);
          v374 = *(_OWORD *)(v372 + 7);
          v375 = *(_OWORD *)(v372 + 9);
          *(_QWORD *)&v1796[80] = v372[11];
          *(_OWORD *)&v1796[48] = v374;
          *(_OWORD *)&v1796[64] = v375;
          *(_OWORD *)&v1796[32] = v373;
          sub_20F813110((uint64_t)v1796);
          v1796[4] = __sba;
          *(_OWORD *)&v1796[16] = **(_OWORD **)&v1796[8];
          v377 = *(_OWORD *)(*(_QWORD *)&v1796[8] + 32);
          v376 = *(_OWORD *)(*(_QWORD *)&v1796[8] + 48);
          v378 = *(_OWORD *)(*(_QWORD *)&v1796[8] + 16);
          *(_QWORD *)&v1796[80] = *(_QWORD *)(*(_QWORD *)&v1796[8] + 64);
          *(_OWORD *)&v1796[48] = v377;
          *(_OWORD *)&v1796[64] = v376;
          *(_OWORD *)&v1796[32] = v378;
          sub_20F813110((uint64_t)v1796);
          v379 = *(_DWORD *)v1796;
          v380 = v1704;
          v381 = (char *)v1704[677];
          v382 = (char *)v1704[678];
          if (v382 == v381)
          {
            v381 = (char *)v1704[678];
          }
          else
          {
            v383 = (v382 - v381) >> 4;
            do
            {
              v384 = v383 >> 1;
              v385 = &v381[16 * (v383 >> 1)];
              v387 = *(_DWORD *)v385;
              v386 = v385 + 16;
              v383 += ~(v383 >> 1);
              if (v387 < *(_DWORD *)v1796)
                v381 = v386;
              else
                v383 = v384;
            }
            while (v383);
            if (v382 != v381 && *(_DWORD *)v1796 == *(_DWORD *)v381)
            {
              v1711 = (char *)v1704[678];
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 283, (uint64_t)"result", 6, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              goto LABEL_586;
            }
          }
          v388 = v1796[4];
          oslog[4] = 1;
          *(_DWORD *)oslog = -1;
          *(_DWORD *)&oslog[8] = 0;
          v389 = *(void **)v1796;
          v390 = *(void **)&v1796[8];
          *(_QWORD *)&oslog[16] = *(_QWORD *)v1796;
          *(_QWORD *)&oslog[24] = *(_QWORD *)&v1796[8];
          *(_OWORD *)&oslog[64] = *(_OWORD *)&v1796[48];
          *(_OWORD *)&oslog[80] = *(_OWORD *)&v1796[64];
          *(_QWORD *)&oslog[96] = *(_QWORD *)&v1796[80];
          *(_OWORD *)&oslog[32] = *(_OWORD *)&v1796[16];
          *(_OWORD *)&oslog[48] = *(_OWORD *)&v1796[32];
          v391 = *(void **)&v1796[88];
          v392 = *(void **)&v1796[96];
          *(_QWORD *)&oslog[104] = *(_QWORD *)&v1796[88];
          *(_QWORD *)&oslog[112] = *(_QWORD *)&v1796[96];
          v393 = *(void **)&v1796[104];
          v394 = *(_QWORD **)&v1796[112];
          memset(&v1796[88], 0, 40);
          v395 = *(_QWORD *)&v1796[120];
          v396 = *(_QWORD **)&v1796[128];
          *(_QWORD *)&oslog[120] = v393;
          *(_QWORD *)&oslog[128] = v394;
          *(_QWORD *)&oslog[136] = *(_QWORD *)&v1796[120];
          *(_QWORD *)&oslog[144] = *(_QWORD *)&v1796[128];
          v397 = *(void **)&v1796[136];
          *(_QWORD *)&oslog[152] = *(_QWORD *)&v1796[136];
          v398 = *(_DWORD *)&v1796[144];
          *(_DWORD *)&oslog[160] = *(_DWORD *)&v1796[144];
          if (*(_QWORD *)&v1796[136])
          {
            v399 = *(_QWORD *)(*(_QWORD *)&v1796[128] + 8);
            if ((*(_QWORD *)&v1796[120] & (*(_QWORD *)&v1796[120] - 1)) != 0)
            {
              if (v399 >= *(_QWORD *)&v1796[120])
                v399 %= *(_QWORD *)&v1796[120];
            }
            else
            {
              v399 &= *(_QWORD *)&v1796[120] - 1;
            }
            v394[v399] = &oslog[144];
            *(_QWORD *)&v1796[128] = 0;
            *(_QWORD *)&v1796[136] = 0;
            v389 = *(void **)&oslog[16];
            v390 = *(void **)&oslog[24];
            v391 = *(void **)&oslog[104];
            v392 = *(void **)&oslog[112];
            v393 = *(void **)&oslog[120];
            v394 = *(_QWORD **)&oslog[128];
            v395 = *(_QWORD *)&oslog[136];
            v396 = *(_QWORD **)&oslog[144];
            v397 = *(void **)&oslog[152];
            v398 = *(_DWORD *)&oslog[160];
          }
          v400 = v1796[152];
          oslog[168] = v1796[152];
          memset(&oslog[216], 0, 24);
          memset(&oslog[184], 0, 24);
          *(_QWORD *)&oslog[208] = 0x3FF0000000000000;
          *(_QWORD *)&oslog[240] = 0x3FF0000000000000;
          LODWORD(object[0]) = v379;
          object[1] = *(void **)oslog;
          LODWORD(object[2]) = *(_DWORD *)&oslog[8];
          object[3] = v389;
          object[4] = v390;
          object[13] = *(void **)&oslog[96];
          *(_OWORD *)&object[9] = *(_OWORD *)&oslog[64];
          *(_OWORD *)&object[11] = *(_OWORD *)&oslog[80];
          *(_OWORD *)&object[5] = *(_OWORD *)&oslog[32];
          *(_OWORD *)&object[7] = *(_OWORD *)&oslog[48];
          object[14] = v391;
          object[15] = v392;
          memset(&oslog[104], 0, 40);
          object[16] = v393;
          object[17] = v394;
          *(_QWORD *)&oslog[176] = 0x3FF0000000000000;
          object[18] = (void *)v395;
          object[19] = v396;
          object[20] = v397;
          LODWORD(object[21]) = v398;
          if (v397)
          {
            v401 = v396[1];
            if ((v395 & (v395 - 1)) != 0)
            {
              if (v401 >= v395)
                v401 %= v395;
            }
            else
            {
              v401 &= v395 - 1;
            }
            v394[v401] = &object[19];
            *(_QWORD *)&oslog[144] = 0;
            *(_QWORD *)&oslog[152] = 0;
          }
          LOBYTE(object[22]) = v400;
          *(_OWORD *)&object[27] = *(_OWORD *)&oslog[208];
          *(_OWORD *)&object[29] = *(_OWORD *)&oslog[224];
          object[31] = *(void **)&oslog[240];
          *(_OWORD *)&object[23] = *(_OWORD *)&oslog[176];
          *(_OWORD *)&object[25] = *(_OWORD *)&oslog[192];
          v402 = sub_20F715E20(v1680, v381, (int *)object);
          v403 = object[19];
          if (object[19])
          {
            do
            {
              v404 = (_QWORD *)*v403;
              operator delete(v403);
              v403 = v404;
            }
            while (v404);
          }
          v405 = object[17];
          object[17] = 0;
          if (v405)
            operator delete(v405);
          if (object[14])
          {
            object[15] = object[14];
            operator delete(object[14]);
          }
          v406 = *(_QWORD **)&oslog[144];
          if (*(_QWORD *)&oslog[144])
          {
            do
            {
              v407 = (_QWORD *)*v406;
              operator delete(v406);
              v406 = v407;
            }
            while (v407);
          }
          v408 = *(void **)&oslog[128];
          *(_QWORD *)&oslog[128] = 0;
          if (v408)
            operator delete(v408);
          v380 = v1704;
          if (*(_QWORD *)&oslog[104])
          {
            *(_QWORD *)&oslog[112] = *(_QWORD *)&oslog[104];
            operator delete(*(void **)&oslog[104]);
          }
          v1711 = v402;
          if (v388)
            break;
LABEL_585:
          v1681[2] = 0;
          *v1681 = 0;
          *(_DWORD *)v1677 = 0;
          *(_BYTE *)(v1677 + 4) = 0;
LABEL_586:
          memset(object, 0, 32);
          LODWORD(object[4]) = 1065353216;
          v431 = (uint64_t **)v380[16];
          v432 = *v431;
          v433 = v431[1];
          while (v432 != v433)
          {
            v434 = (__int128 *)*v432;
            if (*(_QWORD *)(*v432 + 24))
            {
              if (*((_DWORD *)v434 + 4) != *((_DWORD *)v372 + 4))
                goto LABEL_587;
LABEL_602:
              v440 = *v434;
              *(_QWORD *)&oslog[16] = *((_QWORD *)v434 + 2);
              *(_OWORD *)oslog = v440;
              *(_OWORD *)&oslog[24] = *(__int128 *)((char *)v434 + 24);
              sub_20F61A180((uint64_t)object, (uint64_t *)oslog, (uint64_t)oslog);
              goto LABEL_587;
            }
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 288, (uint64_t)"frame->lens_model_", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v435 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v435 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (byte_254A6DE68)
              v436 = byte_254A6DE70 == 0;
            else
              v436 = 0;
            if (!v436)
            {
              v437 = qword_254A6DE40;
              for (k = qword_254A6DE48; v437 != k; v437 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v437)(*(_QWORD *)(v437 + 8), "frame->lens_model_", 18, "", 0);
            }
            v439 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v439 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              abort();
            qword_254A6DE58(unk_254A6DE60, "frame->lens_model_", 18, "", 0);
            v434 = (__int128 *)*v432;
            if (*(_DWORD *)(*v432 + 16) == *((_DWORD *)v372 + 4))
              goto LABEL_602;
LABEL_587:
            v432 += 2;
          }
          v441 = *((_QWORD *)v1711 + 1);
          v442 = v441 + 16;
          sub_20EB0F04C(v441 + 128, (uint64_t *)object);
          sub_20F813110(v442);
          memset(oslog, 0, 24);
          v443 = (_QWORD *)v1704[2];
          v444 = v443[2];
          if (v444)
          {
            if (v444 > 0xAAAAAAAAAAAAAAALL)
              sub_20E867F44();
            v445 = (char *)operator new(24 * v444);
            *(_QWORD *)oslog = v445;
            *(_QWORD *)&oslog[8] = v445;
            *(_QWORD *)&oslog[16] = &v445[24 * v444];
            v448 = (_QWORD *)*v443;
            v447 = v443 + 1;
            v446 = v448;
            if (v448 == v447)
              goto LABEL_612;
LABEL_625:
            while (2)
            {
              v456 = v446[6];
              if (*(_BYTE *)(v456 + 192))
                v457 = v456 + 40;
              else
                v457 = 0;
              if (*(_BYTE *)(v456 + 192))
              {
                v458 = *(_DWORD *)(v456 + 88);
                if (v458 == *((_DWORD *)v372 + 4))
                {
                  v459 = *(_QWORD *)(v456 + 200);
                  v460 = *(_QWORD *)(v456 + 208);
                  v461 = *(_QWORD *)(v456 + 72);
                  v462 = *(_DWORD *)(v456 + 80);
                  if (v460 != v459)
                  {
                    v463 = (v460 - v459) >> 5;
                    while (1)
                    {
                      v464 = v463 >> 1;
                      v465 = v459 + 32 * (v463 >> 1);
                      v466 = *(_DWORD *)(v465 + 16);
                      v467 = v466 >= v458;
                      if (v466 != v458)
                        goto LABEL_638;
                      if (*(_QWORD *)v465 >= v461)
                        break;
LABEL_632:
                      v459 = v465 + 32;
                      v464 = v463 + ~v464;
LABEL_633:
                      v463 = v464;
                      if (!v464)
                        goto LABEL_641;
                    }
                    if (*(_QWORD *)v465 != v461)
                      goto LABEL_633;
                    v467 = *(_DWORD *)(v465 + 8) >= v462;
LABEL_638:
                    if (v467)
                      goto LABEL_633;
                    goto LABEL_632;
                  }
LABEL_641:
                  if (v459 != v460
                    && *(_DWORD *)(v459 + 16) == v458
                    && *(_QWORD *)v459 == v461
                    && *(_DWORD *)(v459 + 8) == v462)
                  {
                    v468 = *(_QWORD *)(v459 + 24);
                    v469 = *(_DWORD *)(v456 + 32);
                    v470 = *(_QWORD *)&oslog[16];
                    if ((unint64_t)v445 >= *(_QWORD *)&oslog[16])
                      goto LABEL_646;
LABEL_656:
                    *(_DWORD *)v445 = v469;
                    v478 = v445 + 24;
                    *((_QWORD *)v445 + 1) = v468;
                    *((_QWORD *)v445 + 2) = v457;
                  }
                  else
                  {
                    v468 = 0;
                    v469 = *(_DWORD *)(v456 + 32);
                    v470 = *(_QWORD *)&oslog[16];
                    if ((unint64_t)v445 < *(_QWORD *)&oslog[16])
                      goto LABEL_656;
LABEL_646:
                    v471 = v372;
                    v472 = *(char **)oslog;
                    v473 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v445[-*(_QWORD *)oslog] >> 3);
                    v474 = v473 + 1;
                    if (v473 + 1 > 0xAAAAAAAAAAAAAAALL)
                      sub_20E867F44();
                    v475 = 0xAAAAAAAAAAAAAAABLL * ((v470 - *(_QWORD *)oslog) >> 3);
                    if (2 * v475 > v474)
                      v474 = 2 * v475;
                    if (v475 >= 0x555555555555555)
                      v476 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v476 = v474;
                    if (v476)
                    {
                      if (v476 > 0xAAAAAAAAAAAAAAALL)
                        sub_20E877A38();
                      v477 = (char *)operator new(24 * v476);
                    }
                    else
                    {
                      v477 = 0;
                    }
                    v479 = &v477[24 * v473];
                    *(_DWORD *)v479 = v469;
                    *((_QWORD *)v479 + 1) = v468;
                    *((_QWORD *)v479 + 2) = v457;
                    v480 = v479;
                    v372 = v471;
                    if (v445 != v472)
                    {
                      do
                      {
                        v481 = *(_OWORD *)(v445 - 24);
                        *((_QWORD *)v480 - 1) = *((_QWORD *)v445 - 1);
                        *(_OWORD *)(v480 - 24) = v481;
                        v480 -= 24;
                        v445 -= 24;
                      }
                      while (v445 != v472);
                      v445 = *(char **)oslog;
                    }
                    v478 = v479 + 24;
                    *(_QWORD *)oslog = v480;
                    *(_QWORD *)&oslog[8] = v479 + 24;
                    *(_QWORD *)&oslog[16] = &v477[24 * v476];
                    if (v445)
                      operator delete(v445);
                  }
                  *(_QWORD *)&oslog[8] = v478;
                  v445 = v478;
                }
              }
              v482 = (_QWORD *)v446[1];
              if (v482)
              {
                do
                {
                  v483 = v482;
                  v482 = (_QWORD *)*v482;
                }
                while (v482);
              }
              else
              {
                do
                {
                  v483 = (_QWORD *)v446[2];
                  _ZF = *v483 == (_QWORD)v446;
                  v446 = v483;
                }
                while (!_ZF);
              }
              v446 = v483;
              if (v483 == v447)
                goto LABEL_612;
              continue;
            }
          }
          v445 = 0;
          v449 = (_QWORD *)*v443;
          v447 = v443 + 1;
          v446 = v449;
          if (v449 != v447)
            goto LABEL_625;
LABEL_612:
          sub_20F813380((_QWORD *)(*((_QWORD *)v1711 + 1) + 16), (uint64_t)oslog);
          if (*(_QWORD *)oslog)
          {
            *(_QWORD *)&oslog[8] = *(_QWORD *)oslog;
            operator delete(*(void **)oslog);
          }
          v450 = object[2];
          if (object[2])
          {
            do
            {
              v451 = (_QWORD *)*v450;
              operator delete(v450);
              v450 = v451;
            }
            while (v451);
          }
          v452 = object[0];
          object[0] = 0;
          if (v452)
            operator delete(v452);
          v453 = *(_QWORD **)&v1796[128];
          if (*(_QWORD *)&v1796[128])
          {
            do
            {
              v454 = (_QWORD *)*v453;
              operator delete(v453);
              v453 = v454;
            }
            while (v454);
          }
          v455 = *(void **)&v1796[112];
          *(_QWORD *)&v1796[112] = 0;
          if (v455)
            operator delete(v455);
          if (*(_QWORD *)&v1796[88])
          {
            *(_QWORD *)&v1796[96] = *(_QWORD *)&v1796[88];
            operator delete(*(void **)&v1796[88]);
          }
          v372 = (uint64_t *)*v372;
          if (!v372)
            goto LABEL_670;
        }
        v409 = (char *)v1704[794];
        v410 = v1704[795];
        if ((unint64_t)v409 < v410)
        {
          *(_DWORD *)v409 = v379;
          v411 = (uint64_t)(v409 + 4);
LABEL_584:
          v380[794] = v411;
          goto LABEL_585;
        }
        v412 = (char *)*v1672;
        v413 = v409 - (_BYTE *)*v1672;
        v414 = v413 >> 2;
        v415 = (v413 >> 2) + 1;
        if (v415 >> 62)
          sub_20E867F44();
        v416 = v410 - (_QWORD)v412;
        if (v416 >> 1 > v415)
          v415 = v416 >> 1;
        if ((unint64_t)v416 >= 0x7FFFFFFFFFFFFFFCLL)
          v417 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v417 = v415;
        if (v417)
        {
          if (v417 >> 62)
            sub_20E877A38();
          v418 = operator new(4 * v417);
          v419 = &v418[4 * v414];
          *v419 = v379;
          v411 = (uint64_t)(v419 + 1);
          v420 = v409 - v412;
          if (v409 == v412)
            goto LABEL_582;
        }
        else
        {
          v418 = 0;
          v419 = (_DWORD *)(4 * v414);
          *(_DWORD *)(4 * v414) = v379;
          v411 = 4 * v414 + 4;
          v420 = v409 - v412;
          if (v409 == v412)
          {
LABEL_582:
            v1704[793] = v419;
            v430 = &v418[4 * v417];
            v380 = v1704;
            v1704[794] = v411;
            v1704[795] = v430;
            if (v412)
              operator delete(v412);
            goto LABEL_584;
          }
        }
        v421 = v420 - 4;
        if (v421 < 0x2C)
          goto LABEL_2038;
        if ((unint64_t)(v409 - v418 - v413) < 0x20)
          goto LABEL_2038;
        v422 = (v421 >> 2) + 1;
        v423 = 4 * (v422 & 0x7FFFFFFFFFFFFFF8);
        v424 = &v409[-v423];
        v419 = (_DWORD *)((char *)v419 - v423);
        v425 = &v418[4 * v414 - 16];
        v426 = v409 - 16;
        v427 = v422 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v428 = *(_OWORD *)v426;
          *(v425 - 1) = *((_OWORD *)v426 - 1);
          *v425 = v428;
          v425 -= 2;
          v426 -= 32;
          v427 -= 8;
        }
        while (v427);
        v409 = v424;
        if (v422 != (v422 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_2038:
          do
          {
            v429 = *((_DWORD *)v409 - 1);
            v409 -= 4;
            *--v419 = v429;
          }
          while (v409 != v412);
        }
        goto LABEL_582;
      }
    }
    else
    {
      memset(object, 0, 32);
      if (sub_20F5B8114((_QWORD *)(v191 + 4832), (int *)object, oslog, 1))
      {
        *(_QWORD *)(v191 + 6400) = *(_QWORD *)(v191 + 6392);
        *(_QWORD *)(v191 + 6424) = *(_QWORD *)(v191 + 6416);
        *(_QWORD *)(v191 + 6448) = *(_QWORD *)(v191 + 6440);
        *(_QWORD *)(v191 + 6472) = *(_QWORD *)(v191 + 6464);
        *(_QWORD *)(v191 + 6496) = *(_QWORD *)(v191 + 6488);
        *(_QWORD *)(v191 + 6520) = *(_QWORD *)(v191 + 6512);
        *(_QWORD *)(v191 + 6544) = *(_QWORD *)(v191 + 6536);
        *(_QWORD *)(v191 + 6568) = *(_QWORD *)(v191 + 6560);
        v625 = *(_QWORD *)(v191 + 5608);
        v626 = *(_QWORD *)(v191 + 5616);
        while (v625 != v626)
        {
          v627 = *(_QWORD *)(v625 + 208);
          if (*(_BYTE *)(v625 + 496)
            || (*(_BYTE *)(v627 + 4) & 6) != 0
            || (*(_BYTE *)(*(_QWORD *)(v625 + 216) + 4) & 6) != 0)
          {
            sub_20F394A20(v191 + 6392, v627);
            sub_20F3D35E0((_QWORD *)(v191 + 6392), *(_QWORD *)(v625 + 216));
          }
          v625 += 504;
        }
        v628 = *(_QWORD *)(v191 + 5632);
        v629 = *(_QWORD *)(v191 + 5640);
        while (v628 != v629)
        {
          v630 = *(_QWORD *)(v628 + 136);
          if (*(_BYTE *)(v628 + 272) || (*(_BYTE *)(v630 + 4) & 6) != 0)
            sub_20F394A20(v191 + 6392, v630);
          v628 += 280;
        }
        v631 = (uint64_t *)v191;
        sub_20F5B8680(*(_QWORD *)(v191 + 5656), *(_QWORD *)(v191 + 5664), (_QWORD *)(v191 + 6392));
        sub_20F5B85BC(v631[710], v631[711], (_QWORD *)(v191 + 6392));
        sub_20F5B8444(v631[713], v631[714], (_QWORD *)(v191 + 6392));
        v632 = *(_QWORD *)(v191 + 5728);
        v633 = *(_QWORD *)(v191 + 5736);
        while (v632 != v633)
        {
          v634 = *(_QWORD *)(v632 + 736);
          if (*(_BYTE *)(v632 + 880)
            || (*(_BYTE *)(v634 + 4) & 6) != 0
            || (*(_BYTE *)(*(_QWORD *)(v632 + 744) + 4) & 6) != 0)
          {
            sub_20F394A20(v191 + 6392, v634);
            sub_20F394A20(v191 + 6392, *(_QWORD *)(v632 + 744));
          }
          v632 += 888;
        }
        v635 = (*(_QWORD *)(v191 + 6544) - *(_QWORD *)(v191 + 6536)) >> 2;
        if (LODWORD(object[3]) > v635)
          LODWORD(v635) = object[3];
        _CF = *(_DWORD *)&oslog[24] >= v635;
        v636 = *(_DWORD *)&oslog[24] - v635;
        if (_CF)
          v637 = v636;
        else
          v637 = 0;
        sub_20F59A618((_QWORD *)(v191 + 4832));
        if (!v637)
          goto LABEL_523;
      }
      else if (!*(_DWORD *)&oslog[24])
      {
        goto LABEL_523;
      }
    }
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 271, (uint64_t)"!this->linear_system_.graph().template numberOfVariable<VARIABLE_TYPE>()", 72, (uint64_t)"CameraCalibVariables of this type have already been added.", 58, (void (*)(void **))sub_21023DDB0))goto LABEL_523;
LABEL_1995:
    abort();
  }
  v371 = v191;
  if (!v1791)
    goto LABEL_709;
LABEL_671:
  v484 = v371;
  v485 = *(_QWORD **)(v371 + 16);
  if (v485)
  {
    v488 = (_QWORD *)*v485;
    v486 = v485 + 1;
    v487 = v488;
    if (v488 != v486)
    {
      while (1)
      {
        v489 = v487[6];
        if (*(_BYTE *)(v489 + 192))
          break;
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 769, (uint64_t)"track->getStructure()", 21, (uint64_t)"The track does not have the structure", 37, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1995;
        }
        v489 = v487[6];
        v490 = *(_DWORD *)(v489 + 32);
        v491 = *(char **)(v484 + 5512);
        v492 = *(char **)(v484 + 5520);
        v493 = v492 - v491;
        if (v492 != v491)
          goto LABEL_680;
LABEL_685:
        if (v491 == v492 || *(_DWORD *)v491 != v490)
        {
          v499 = v489 + 40;
          v500 = *(unsigned __int8 *)(v489 + 192);
          v501 = *(_BYTE *)(v489 + 192) ? (void *)(v489 + 40) : 0;
          LODWORD(object[0]) = v490;
          BYTE4(object[0]) = 1;
          object[1] = v501;
          if (v500)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v499 + 24))(v489 + 40))
            {
              _Q1 = *(_OWORD *)(v489 + 104);
              _D3 = *(_QWORD *)(v489 + 112);
              __asm { FMLA            D2, D3, V1.D[1] }
              if (fabs(sqrt(_D2 + *(double *)(v489 + 120) * *(double *)(v489 + 120)) + -1.0) > 0.000001)
              {
                v507 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
LABEL_695:
                if (v507)
                  goto LABEL_1995;
              }
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v499 + 24))(v489 + 40))
              {
                v508 = *(uint64_t **)(v489 + 136);
                v509 = *v508;
                v510 = (double *)v508[2];
                v511 = v508[4];
                v512 = (double *)v508[6];
                _D1 = *(double *)(v489 + 56) - v510[1];
                v514 = *(double *)(v489 + 64) - v510[2];
                _Q3.f64[0] = *(float64_t *)(v509 + 16);
                _Q7 = *(_OWORD *)(v509 + 48);
                _Q3.f64[1] = *(float64_t *)(v509 + 40);
                v517 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v509, *(int64x2_t *)(v509 + 24)), *(double *)(v489 + 48) - *v510), (float64x2_t)vzip2q_s64(*(int64x2_t *)v509, *(int64x2_t *)(v509 + 24)), _D1), _Q3, v514);
                __asm { FMLA            D2, D1, V7.D[1] }
                v519 = _D2 + *(double *)(v509 + 64) * v514;
                v520 = v517.f64[0] - *v512;
                _D2 = v517.f64[1] - v512[1];
                v522 = v519 - v512[2];
                _Q3.f64[0] = *(float64_t *)(v511 + 16);
                _Q4 = *(int64x2_t *)v511;
                _Q6 = *(int64x2_t *)(v511 + 24);
                _Q16 = *(_OWORD *)(v511 + 48);
                __asm { FMLA            D19, D2, V4.D[1] }
                _Q3.f64[1] = *(float64_t *)(v511 + 40);
                _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v511, _Q6), v520), (float64x2_t)vzip2q_s64(*(int64x2_t *)v511, _Q6), _D2), _Q3, v522);
                __asm
                {
                  FMLA            D3, D2, V16.D[1]
                  FMLA            D1, D2, V6.D[1]
                }
                _D1 = _D1 + v522 * _Q3.f64[1];
                __asm { FMLA            D2, D1, V17.D[1] }
                object[2] = COERCE_VOID_(sqrt(_D2+ (_Q3.f64[0] + v522 * *(double *)(v511 + 64))* (_Q3.f64[0] + *(double *)(v511 + 64) * v522)));
                _Q1 = *(_OWORD *)(v489 + 104);
                _Q3.f64[0] = *(float64_t *)(v489 + 112);
                __asm { FMLA            D2, D3, V1.D[1] }
                if (fabs(sqrt(_D2 + *(double *)(v489 + 120) * *(double *)(v489 + 120)) + -1.0) > 0.000001
                  && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_1995;
                }
                if (sub_20F716438(v484 + 4832, (unsigned int *)object))
                {
                  *(_BYTE *)(v484 + 6588) = 0;
                  *(_DWORD *)(v484 + 6584) = 0;
                }
              }
              goto LABEL_701;
            }
            v507 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 44, (uint64_t)"initializeImpl()", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            goto LABEL_695;
          }
        }
LABEL_701:
        v533 = (_QWORD *)v487[1];
        if (v533)
        {
          do
          {
            v534 = v533;
            v533 = (_QWORD *)*v533;
          }
          while (v533);
        }
        else
        {
          do
          {
            v534 = (_QWORD *)v487[2];
            _ZF = *v534 == (_QWORD)v487;
            v487 = v534;
          }
          while (!_ZF);
        }
        v487 = v534;
        if (v534 == v486)
        {
          v371 = v1723;
          goto LABEL_709;
        }
      }
      v490 = *(_DWORD *)(v489 + 32);
      v491 = *(char **)(v484 + 5512);
      v492 = *(char **)(v484 + 5520);
      v493 = v492 - v491;
      if (v492 == v491)
        goto LABEL_685;
LABEL_680:
      v494 = v493 >> 4;
      do
      {
        v495 = v494 >> 1;
        v496 = &v491[16 * (v494 >> 1)];
        v498 = *(_DWORD *)v496;
        v497 = v496 + 16;
        v494 += ~(v494 >> 1);
        if (v498 < v490)
          v491 = v497;
        else
          v494 = v495;
      }
      while (v494);
      goto LABEL_685;
    }
  }
LABEL_709:
  memset(object, 0, 24);
  sub_20F630644(v371);
  v535 = v1670;
  if (object[0])
    operator delete(object[0]);
  if (*(_QWORD *)(*v1659 + 64))
  {
    v536 = v1793;
    v537 = *(_QWORD **)(*v1659 + 48);
    v538 = (int64x2_t *)v1723;
    v539 = v537[6];
    v1687 = *(_QWORD *)(v539 + 64);
    v1702 = *(int8x16_t *)(v539 + 32);
    v1705 = *(int8x16_t *)(v539 + 48);
    v1693 = *(int8x16_t *)v539;
    *(_OWORD *)__dsta = *(_OWORD *)(v539 + 16);
    __sbb = *(_QWORD *)(v539 + 88);
    v1712 = *(int8x16_t *)(v539 + 72);
    v541 = (char *)operator new(0x58uLL);
    v542 = dbl_2103B48F0[v536 == 0];
    *((_QWORD *)v541 + 1) = 0;
    v543 = (unint64_t *)(v541 + 8);
    *((_QWORD *)v541 + 2) = 0;
    *(_QWORD *)v541 = &off_24CA016C8;
    *((_QWORD *)v541 + 3) = &off_24CA01718;
    v544 = v541 + 24;
    v545 = sqrt(v542);
    *((double *)v541 + 5) = v545;
    *((double *)v541 + 6) = v545;
    v546 = vdupq_n_s64(0x40F86A0000000000uLL);
    *(int64x2_t *)(v541 + 56) = v546;
    *(int64x2_t *)(v541 + 72) = v546;
    v541[32] = 1;
    v1717 = (std::__shared_weak_count *)v541;
    v547 = v538->i64[1];
    if (!*(_QWORD *)(v547 + 64))
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 968, (uint64_t)"!this->viobadata_ref_.state_set->empty()", 40, (uint64_t)"First VIOState must exist to add the prior.", 43, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v547 = v538->i64[1];
    }
    v548 = v538 + 363;
    v549 = vextq_s8(v1705, v1705, 8uLL).u64[0];
    v550 = vextq_s8(v1702, v1702, 8uLL).u64[0];
    v551 = vextq_s8(*(int8x16_t *)__dsta, *(int8x16_t *)__dsta, 8uLL).u64[0];
    v552 = vextq_s8(v1693, v1693, 8uLL).u64[0];
    v553 = vextq_s8(v1712, v1712, 8uLL).u64[0];
    v554 = *(_QWORD *)(v547 + 48);
    v555 = (void **)v538[352].i64[1];
    v556 = (char *)v538[352].i64[0];
    if (v555 == (void **)v556)
      v557 = 0;
    else
      v557 = (*((_DWORD *)v555 - 68) + 1);
    v558 = *(_DWORD *)(v554 + 40);
    *(_QWORD *)&v559 = v1693.i64[0];
    *(void **)&v560 = __dsta[0];
    *((_QWORD *)&v559 + 1) = v552;
    *(_QWORD *)v1796 = v557;
    *((_QWORD *)&v560 + 1) = v551;
    *(_OWORD *)&v1796[16] = v559;
    *(_OWORD *)&v1796[32] = v560;
    *(_QWORD *)&v559 = v1702.i64[0];
    *(_QWORD *)&v560 = v1705.i64[0];
    *((_QWORD *)&v559 + 1) = v550;
    *((_QWORD *)&v560 + 1) = v549;
    *(_OWORD *)&v1796[48] = v559;
    *(_OWORD *)&v1796[64] = v560;
    *(_QWORD *)&v559 = v1712.i64[0];
    *((_QWORD *)&v559 + 1) = v553;
    *(_QWORD *)&v1796[80] = v1687;
    *(_QWORD *)&v1796[104] = __sbb;
    *(_OWORD *)&v1796[88] = v559;
    *(_QWORD *)&v1796[112] = v541 + 24;
    *(_QWORD *)&v1796[120] = v541;
    do
      v561 = __ldxr(v543);
    while (__stxr(v561 + 1, v543));
    v1730 = 0uLL;
    v562 = v555;
    v1830 = 0uLL;
    v563 = (char *)v555 - v556;
    if (v555 != (void **)v556)
    {
      v562 = v555;
      if ((unint64_t)*(v555 - 35) >= v557)
      {
        v564 = 0xAF8AF8AF8AF8AF8BLL * (v563 >> 3);
        v565 = (void **)v556;
        do
        {
          v566 = v564 >> 1;
          v567 = (unint64_t *)&v565[35 * (v564 >> 1)];
          v568 = *v567;
          v569 = (void **)(v567 + 35);
          v564 += ~(v564 >> 1);
          if (v568 < v557)
            v565 = v569;
          else
            v564 = v566;
        }
        while (v564);
        v562 = v555;
        if (v565 != v555)
        {
          v562 = v565;
          if (*v565 == (void *)v557)
            goto LABEL_810;
        }
      }
    }
    *(_QWORD *)&v570 = v1693.i64[0];
    *((_QWORD *)&v570 + 1) = v552;
    *(_OWORD *)oslog = *(_OWORD *)v1796;
    *(_OWORD *)&oslog[16] = v570;
    *(void **)&v571 = __dsta[0];
    *((_QWORD *)&v571 + 1) = v551;
    *(_QWORD *)&v572 = v1702.i64[0];
    *((_QWORD *)&v572 + 1) = v550;
    *(_OWORD *)&oslog[32] = v571;
    *(_OWORD *)&oslog[48] = v572;
    *(_QWORD *)&v573 = v1705.i64[0];
    *((_QWORD *)&v573 + 1) = v549;
    *(_OWORD *)&oslog[64] = v573;
    *(_QWORD *)&oslog[80] = v1687;
    *(_QWORD *)&oslog[104] = __sbb;
    *(_QWORD *)&v574 = v1712.i64[0];
    *((_QWORD *)&v574 + 1) = v553;
    *(_OWORD *)&oslog[88] = v574;
    *(_QWORD *)&oslog[112] = v541 + 24;
    *(_QWORD *)&oslog[120] = v541;
    *(_QWORD *)&v1796[112] = 0;
    *(_QWORD *)&v1796[120] = 0;
    memset(&oslog[248], 0, 17);
    *(_QWORD *)&oslog[128] = 0;
    *(_QWORD *)&oslog[232] = 0xBFF0000000000000;
    oslog[240] = 0;
    v575 = (void **)v538[302].i64[1];
    v576 = v538[303].i64[0];
    if ((void **)v576 != v575)
    {
      v577 = (v576 - (uint64_t)v575) >> 4;
      do
      {
        v578 = v577 >> 1;
        v579 = &v575[2 * (v577 >> 1)];
        v581 = *(_DWORD *)v579;
        v580 = v579 + 2;
        v540 = v581;
        v582 = (void **)~(v577 >> 1);
        v577 += (unint64_t)v582;
        if (v581 < v558)
          v575 = v580;
        else
          v577 = v578;
      }
      while (v577);
      if (v575 != (void **)v576 && *(_DWORD *)v575 == v558)
      {
        *(_QWORD *)&oslog[128] = v575[1];
        v583 = *(void **)&oslog[128];
        ++*((_DWORD *)v575[1] + 2);
        if (*((_BYTE *)v583 + 20))
        {
          *(_OWORD *)&object[1] = *(_OWORD *)oslog;
          *(_OWORD *)&object[5] = *(_OWORD *)&oslog[32];
          *(_OWORD *)&object[7] = *(_OWORD *)&oslog[48];
          *(_OWORD *)&object[9] = *(_OWORD *)&oslog[64];
          object[0] = (void *)v557;
          object[11] = *(void **)&oslog[80];
          *(_OWORD *)&object[3] = *(_OWORD *)&oslog[16];
          *(_OWORD *)&object[12] = *(_OWORD *)&oslog[88];
          object[14] = *(void **)&oslog[104];
          object[15] = v541 + 24;
          *(_QWORD *)&oslog[112] = 0;
          *(_QWORD *)&oslog[120] = 0;
          object[16] = v541;
          object[17] = v583;
          *(_OWORD *)&object[18] = *(_OWORD *)&oslog[136];
          *(_OWORD *)&object[20] = *(_OWORD *)&oslog[152];
          *(_OWORD *)&object[22] = *(_OWORD *)&oslog[168];
          *(_OWORD *)&object[24] = *(_OWORD *)&oslog[184];
          *(_OWORD *)&object[26] = *(_OWORD *)&oslog[200];
          *(_OWORD *)&object[28] = *(_OWORD *)&oslog[216];
          LOBYTE(object[31]) = oslog[240];
          object[30] = *(void **)&oslog[232];
          memset(&object[32], 0, 17);
          *(_QWORD *)&oslog[248] = 0;
          *(_QWORD *)&oslog[256] = 0;
          if (v555 == v562 || *v562 != (void *)v557)
          {
            __dstb = v583;
            v582 = &object[1];
            v540 = (int64_t)&object[3];
            v580 = &object[12];
            v1706 = (void **)v556;
            v584 = (char *)v562 - v556;
            v1713 = 0xAF8AF8AF8AF8AF8BLL * (((char *)v562 - v556) >> 3);
            v585 = v538[353].u64[0];
            if ((unint64_t)v555 >= v585)
            {
              v1263 = 1 - 0x5075075075075075 * (v563 >> 3);
              if (v1263 > 0xEA0EA0EA0EA0EALL)
                sub_20E867F44();
              v1264 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v585 - (_QWORD)v556) >> 3);
              if (2 * v1264 > v1263)
                v1263 = 2 * v1264;
              if (v1264 >= 0x75075075075075)
                v1265 = 0xEA0EA0EA0EA0EALL;
              else
                v1265 = v1263;
              v1844[4] = &v538[353];
              v1685 = v537;
              if (v1265)
              {
                if (v1265 > 0xEA0EA0EA0EA0EALL)
                  sub_20E877A38();
                v1266 = (char *)operator new(280 * v1265);
                v580 = &object[12];
                v540 = (int64_t)&object[3];
                v582 = &object[1];
              }
              else
              {
                v1266 = 0;
              }
              v1291 = &v1266[280 * v1713];
              v1844[0] = v1266;
              v1844[1] = v1291;
              v1844[2] = v1291;
              v1844[3] = &v1266[280 * v1265];
              if (v1713 == v1265)
              {
                if (v584 < 1)
                {
                  if (v1706 == v562)
                    v1296 = 1;
                  else
                    v1296 = 2 * v1713;
                  if (v1296 > 0xEA0EA0EA0EA0EALL)
                    sub_20E877A38();
                  v1297 = (char *)operator new(280 * v1296);
                  v548 = v538 + 363;
                  v1291 = &v1297[280 * (v1296 >> 2)];
                  v1844[0] = v1297;
                  v1844[1] = v1291;
                  v1844[3] = &v1297[280 * v1296];
                  if (v1266)
                    operator delete(v1266);
                  v1294 = (uint64_t)v1291;
                }
                else
                {
                  v1292 = v1713 + 2;
                  if (v1713 >= -1)
                    v1292 = v1713 + 1;
                  v1293 = v1292 >> 1;
                  v1294 = sub_20F5B6660((uint64_t)v1291, (uint64_t)v1291, (uint64_t)&v1291[-280 * (v1292 >> 1)]);
                  v548 = v538 + 363;
                  v1291 = (char *)v1844[1] - 280 * v1293;
                  v1844[1] = v1291;
                  v557 = (unint64_t)object[0];
                }
                v580 = &object[12];
                v540 = (int64_t)&object[3];
                v582 = &object[1];
              }
              else
              {
                v1294 = (uint64_t)&v1266[280 * v1713];
                v548 = v538 + 363;
              }
              *(_QWORD *)v1294 = v557;
              *(_OWORD *)(v1294 + 8) = *(_OWORD *)&object[1];
              v1298 = *(_OWORD *)&object[3];
              *(_OWORD *)(v1294 + 40) = *(_OWORD *)&object[5];
              v1299 = *(_OWORD *)&object[9];
              *(_OWORD *)(v1294 + 56) = *(_OWORD *)&object[7];
              *(_OWORD *)(v1294 + 72) = v1299;
              *(void **)(v1294 + 88) = object[11];
              *(_OWORD *)(v1294 + 24) = v1298;
              *(void **)(v1294 + 112) = object[14];
              *(_OWORD *)(v1294 + 96) = *(_OWORD *)&object[12];
              *(_OWORD *)(v1294 + 120) = *(_OWORD *)&object[15];
              object[15] = 0;
              object[16] = 0;
              *(void **)(v1294 + 136) = object[17];
              v1300 = *(_OWORD *)&object[18];
              v1301 = *(_OWORD *)&object[22];
              *(_OWORD *)(v1294 + 160) = *(_OWORD *)&object[20];
              *(_OWORD *)(v1294 + 176) = v1301;
              *(_OWORD *)(v1294 + 144) = v1300;
              v1302 = *(_OWORD *)&object[24];
              v1303 = *(_OWORD *)&object[28];
              *(_OWORD *)(v1294 + 208) = *(_OWORD *)&object[26];
              *(_OWORD *)(v1294 + 224) = v1303;
              *(_OWORD *)(v1294 + 192) = v1302;
              v1304 = object[30];
              *(_BYTE *)(v1294 + 248) = object[31];
              *(_QWORD *)(v1294 + 240) = v1304;
              *(_OWORD *)(v1294 + 256) = *(_OWORD *)&object[32];
              object[32] = 0;
              object[33] = 0;
              *(_BYTE *)(v1294 + 272) = object[34];
              v1305 = (char *)(v1294 + 280);
              v1844[2] = (void *)(v1294 + 280);
              v1306 = (void **)v538[352].i64[0];
              if (v1306 != v562)
              {
                v1307 = 0;
                do
                {
                  v1308 = &v1291[v1307 * 8];
                  v1309 = &v562[v1307];
                  *(_QWORD *)&v1291[v1307 * 8 - 280] = v562[v1307 - 35];
                  *(_OWORD *)&v1291[v1307 * 8 - 272] = *(_OWORD *)&v562[v1307 - 34];
                  v1311 = *(_OWORD *)&v562[v1307 - 28];
                  v1310 = *(_OWORD *)&v562[v1307 - 26];
                  v1312 = *(_OWORD *)&v562[v1307 - 30];
                  *((_QWORD *)v1308 - 24) = v562[v1307 - 24];
                  *((_OWORD *)v1308 - 14) = v1311;
                  *((_OWORD *)v1308 - 13) = v1310;
                  *((_OWORD *)v1308 - 15) = v1312;
                  *((_OWORD *)v1308 - 16) = *(_OWORD *)&v562[v1307 - 32];
                  v1313 = *(_OWORD *)&v562[v1307 - 23];
                  *((_QWORD *)v1308 - 21) = v562[v1307 - 21];
                  *(_OWORD *)(v1308 - 184) = v1313;
                  *((_OWORD *)v1308 - 10) = *(_OWORD *)&v562[v1307 - 20];
                  *(v1309 - 20) = 0;
                  *(v1309 - 19) = 0;
                  *((_QWORD *)v1308 - 18) = v562[v1307 - 18];
                  v1314 = *(_OWORD *)&v562[v1307 - 17];
                  v1315 = *(_OWORD *)&v562[v1307 - 15];
                  *(_OWORD *)(v1308 - 104) = *(_OWORD *)&v562[v1307 - 13];
                  *(_OWORD *)(v1308 - 120) = v1315;
                  *(_OWORD *)(v1308 - 136) = v1314;
                  v1316 = *(_OWORD *)&v562[v1307 - 11];
                  v1317 = *(_OWORD *)&v562[v1307 - 9];
                  *(_OWORD *)(v1308 - 56) = *(_OWORD *)&v562[v1307 - 7];
                  *(_OWORD *)(v1308 - 72) = v1317;
                  *(_OWORD *)(v1308 - 88) = v1316;
                  v1318 = v562[v1307 - 5];
                  *(v1308 - 32) = (char)v562[v1307 - 4];
                  *((_QWORD *)v1308 - 5) = v1318;
                  *(_OWORD *)(v1308 - 24) = *(_OWORD *)&v562[v1307 - 3];
                  *(v1309 - 3) = 0;
                  *(v1309 - 2) = 0;
                  *(v1308 - 8) = (char)v562[v1307 - 1];
                  v1307 -= 35;
                }
                while (&v562[v1307] != v1306);
                v1305 = (char *)v1844[2];
                v1291 += v1307 * 8;
              }
              v1844[1] = v1291;
              v1319 = (void **)v538[352].i64[1];
              if (v1319 != v562)
              {
                do
                {
                  *(_QWORD *)v1305 = *v562;
                  *(_OWORD *)(v1305 + 8) = *(_OWORD *)(v562 + 1);
                  v1320 = *(_OWORD *)(v562 + 7);
                  v1321 = *(_OWORD *)(v562 + 9);
                  v1322 = v562[11];
                  *(_OWORD *)(v1305 + 40) = *(_OWORD *)(v562 + 5);
                  *((_QWORD *)v1305 + 11) = v1322;
                  *(_OWORD *)(v1305 + 72) = v1321;
                  *(_OWORD *)(v1305 + 56) = v1320;
                  *(_OWORD *)(v1305 + 24) = *(_OWORD *)(v562 + 3);
                  v1323 = *((_OWORD *)v562 + 6);
                  *((_QWORD *)v1305 + 14) = v562[14];
                  *((_OWORD *)v1305 + 6) = v1323;
                  *(_OWORD *)(v1305 + 120) = *(_OWORD *)(v562 + 15);
                  v562[15] = 0;
                  v562[16] = 0;
                  *((_QWORD *)v1305 + 17) = v562[17];
                  v1324 = *((_OWORD *)v562 + 9);
                  v1325 = *((_OWORD *)v562 + 11);
                  *((_OWORD *)v1305 + 10) = *((_OWORD *)v562 + 10);
                  *((_OWORD *)v1305 + 11) = v1325;
                  *((_OWORD *)v1305 + 9) = v1324;
                  v1326 = *((_OWORD *)v562 + 12);
                  v1327 = *((_OWORD *)v562 + 14);
                  *((_OWORD *)v1305 + 13) = *((_OWORD *)v562 + 13);
                  *((_OWORD *)v1305 + 14) = v1327;
                  *((_OWORD *)v1305 + 12) = v1326;
                  v1328 = v562[30];
                  v1305[248] = *((_BYTE *)v562 + 248);
                  *((_QWORD *)v1305 + 30) = v1328;
                  *((_OWORD *)v1305 + 16) = *((_OWORD *)v562 + 16);
                  v562[32] = 0;
                  v562[33] = 0;
                  v1305[272] = *((_BYTE *)v562 + 272);
                  v1305 += 280;
                  v562 += 35;
                }
                while (v562 != v1319);
                v1291 = (char *)v1844[1];
                v562 = (void **)v538[352].i64[1];
              }
              v1329 = (void **)v538[352].i64[0];
              v538[352].i64[0] = (uint64_t)v1291;
              v538[352].i64[1] = (uint64_t)v1305;
              v1330 = (void *)v538[353].i64[0];
              v538[353].i64[0] = (uint64_t)v1844[3];
              v1844[3] = v1330;
              v1844[1] = v1329;
              v1844[0] = v1329;
              if (v562 != v1329)
              {
                do
                {
                  v1844[2] = v562 - 35;
                  v1331 = (std::__shared_weak_count *)*(v562 - 2);
                  if (v1331)
                  {
                    v1332 = (unint64_t *)&v1331->__shared_owners_;
                    do
                      v1333 = __ldaxr(v1332);
                    while (__stlxr(v1333 - 1, v1332));
                    if (!v1333)
                    {
                      ((void (*)(std::__shared_weak_count *))v1331->__on_zero_shared)(v1331);
                      std::__shared_weak_count::__release_weak(v1331);
                    }
                  }
                  v1334 = (std::__shared_weak_count *)*(v562 - 19);
                  if (v1334)
                  {
                    v1335 = (unint64_t *)&v1334->__shared_owners_;
                    do
                      v1336 = __ldaxr(v1335);
                    while (__stlxr(v1336 - 1, v1335));
                    if (!v1336)
                    {
                      ((void (*)(std::__shared_weak_count *))v1334->__on_zero_shared)(v1334);
                      std::__shared_weak_count::__release_weak(v1334);
                    }
                  }
                  v562 = (void **)v1844[2];
                }
                while (v1844[2] != v1329);
                v562 = (void **)v1844[0];
              }
              v537 = v1685;
              if (v562)
                operator delete(v562);
            }
            else if (v562 == v555)
            {
              *v555 = (void *)v557;
              v1281 = &v556[8 * (((char *)v562 - v556) >> 3)];
              *(_OWORD *)(v1281 + 8) = *(_OWORD *)&object[1];
              v1283 = *(_OWORD *)&object[7];
              v1282 = *(_OWORD *)&object[9];
              v1284 = object[11];
              *(_OWORD *)(v1281 + 40) = *(_OWORD *)&object[5];
              *((_QWORD *)v1281 + 11) = v1284;
              *(_OWORD *)(v1281 + 72) = v1282;
              *(_OWORD *)(v1281 + 56) = v1283;
              *(_OWORD *)(v1281 + 24) = *(_OWORD *)&object[3];
              v1285 = object[14];
              *((_OWORD *)v1281 + 6) = *(_OWORD *)&object[12];
              *((_QWORD *)v1281 + 14) = v1285;
              *((_QWORD *)v1281 + 15) = v544;
              *((_QWORD *)v1281 + 16) = v541;
              object[15] = 0;
              object[16] = 0;
              *((_QWORD *)v1281 + 17) = v583;
              v1286 = *(_OWORD *)&object[18];
              v1287 = *(_OWORD *)&object[22];
              *((_OWORD *)v1281 + 10) = *(_OWORD *)&object[20];
              *((_OWORD *)v1281 + 11) = v1287;
              *((_OWORD *)v1281 + 9) = v1286;
              v1288 = *(_OWORD *)&object[24];
              v1289 = *(_OWORD *)&object[28];
              *((_OWORD *)v1281 + 13) = *(_OWORD *)&object[26];
              *((_OWORD *)v1281 + 14) = v1289;
              *((_OWORD *)v1281 + 12) = v1288;
              v1290 = object[30];
              v1281[248] = (char)object[31];
              *((_QWORD *)v1281 + 30) = v1290;
              *((_QWORD *)v1281 + 32) = 0;
              *((_QWORD *)v1281 + 33) = 0;
              object[32] = 0;
              object[33] = 0;
              v1281[272] = 0;
              v538[352].i64[1] = (uint64_t)(v555 + 35);
            }
            else
            {
              v1833 = *(_OWORD *)oslog;
              *(_OWORD *)&v1844[2] = *(_OWORD *)&oslog[32];
              *(_OWORD *)&v1844[4] = *(_OWORD *)&oslog[48];
              *(_OWORD *)&v1844[6] = *(_OWORD *)&oslog[64];
              v1844[8] = *(void **)&oslog[80];
              *(_OWORD *)v1844 = *(_OWORD *)&oslog[16];
              *(_QWORD *)&v1800 = *(_QWORD *)&oslog[104];
              v1799 = *(_OWORD *)&oslog[88];
              object[15] = 0;
              object[16] = 0;
              v1807[1] = *(_OWORD *)&oslog[152];
              v1807[2] = *(_OWORD *)&oslog[168];
              v1807[0] = *(_OWORD *)&oslog[136];
              v1837 = *(_OWORD *)&oslog[200];
              v1838 = *(__n128 *)&oslog[216];
              v1836 = *(_OWORD *)&oslog[184];
              LOBYTE(v1727) = oslog[240];
              v1726 = *(void **)&oslog[232];
              v586 = v555 - 35;
              v587 = v555;
              object[32] = 0;
              object[33] = 0;
              if ((unint64_t)v555 >= 0x118)
              {
                v588 = v555 - 35;
                v587 = v555;
                do
                {
                  *v587 = *v588;
                  *(_OWORD *)(v587 + 1) = *(_OWORD *)(v588 + 1);
                  v589 = *(_OWORD *)(v588 + 7);
                  v590 = *(_OWORD *)(v588 + 9);
                  v591 = v588[11];
                  *(_OWORD *)(v587 + 5) = *(_OWORD *)(v588 + 5);
                  v587[11] = v591;
                  *(_OWORD *)(v587 + 9) = v590;
                  *(_OWORD *)(v587 + 7) = v589;
                  *(_OWORD *)(v587 + 3) = *(_OWORD *)(v588 + 3);
                  v592 = *((_OWORD *)v588 + 6);
                  v587[14] = v588[14];
                  *((_OWORD *)v587 + 6) = v592;
                  *(_OWORD *)(v587 + 15) = *(_OWORD *)(v588 + 15);
                  v588[15] = 0;
                  v588[16] = 0;
                  v587[17] = v588[17];
                  v593 = *((_OWORD *)v588 + 9);
                  v594 = *((_OWORD *)v588 + 11);
                  *((_OWORD *)v587 + 10) = *((_OWORD *)v588 + 10);
                  *((_OWORD *)v587 + 11) = v594;
                  *((_OWORD *)v587 + 9) = v593;
                  v595 = *((_OWORD *)v588 + 12);
                  v596 = *((_OWORD *)v588 + 14);
                  *((_OWORD *)v587 + 13) = *((_OWORD *)v588 + 13);
                  *((_OWORD *)v587 + 14) = v596;
                  *((_OWORD *)v587 + 12) = v595;
                  v597 = v588[30];
                  *((_BYTE *)v587 + 248) = *((_BYTE *)v588 + 248);
                  v587[30] = v597;
                  *((_OWORD *)v587 + 16) = *((_OWORD *)v588 + 16);
                  v588[32] = 0;
                  v588[33] = 0;
                  *((_BYTE *)v587 + 272) = *((_BYTE *)v588 + 272);
                  v587 += 35;
                  v588 += 35;
                }
                while (v588 < v555);
              }
              v1683 = v537;
              v538[352].i64[1] = (uint64_t)v587;
              if (v555 != v562 + 35)
              {
                do
                {
                  v606 = v586 - 35;
                  v607 = v555 - 35;
                  *v607 = *(v586 - 35);
                  *(_OWORD *)(v607 + 1) = *((_OWORD *)v586 - 17);
                  v609 = *((_OWORD *)v586 - 14);
                  v608 = *((_OWORD *)v586 - 13);
                  v610 = *((_OWORD *)v586 - 15);
                  *(v555 - 24) = *(v586 - 24);
                  *((_OWORD *)v555 - 14) = v609;
                  *((_OWORD *)v555 - 13) = v608;
                  *((_OWORD *)v555 - 15) = v610;
                  *((_OWORD *)v555 - 16) = *((_OWORD *)v586 - 16);
                  v611 = *(_OWORD *)(v586 - 23);
                  *(v555 - 21) = *(v586 - 21);
                  *(_OWORD *)(v555 - 23) = v611;
                  v612 = *((_OWORD *)v586 - 10);
                  *(v586 - 20) = 0;
                  *(v586 - 19) = 0;
                  v613 = (std::__shared_weak_count *)*(v555 - 19);
                  *((_OWORD *)v555 - 10) = v612;
                  if (v613)
                  {
                    v614 = (unint64_t *)&v613->__shared_owners_;
                    do
                      v615 = __ldaxr(v614);
                    while (__stlxr(v615 - 1, v614));
                    if (!v615)
                    {
                      ((void (*)(std::__shared_weak_count *, void **, int64_t, void **))v613->__on_zero_shared)(v613, v580, v540, v582);
                      std::__shared_weak_count::__release_weak(v613);
                    }
                  }
                  *(v555 - 18) = *(v586 - 18);
                  v616 = *(_OWORD *)(v586 - 17);
                  v617 = *(_OWORD *)(v586 - 15);
                  *(_OWORD *)(v555 - 13) = *(_OWORD *)(v586 - 13);
                  *(_OWORD *)(v555 - 15) = v617;
                  *(_OWORD *)(v555 - 17) = v616;
                  v618 = *(_OWORD *)(v586 - 11);
                  v619 = *(_OWORD *)(v586 - 9);
                  *(_OWORD *)(v555 - 7) = *(_OWORD *)(v586 - 7);
                  *(_OWORD *)(v555 - 9) = v619;
                  *(_OWORD *)(v555 - 11) = v618;
                  v620 = *(v586 - 5);
                  *((_BYTE *)v555 - 32) = *((_BYTE *)v586 - 32);
                  *(v555 - 5) = v620;
                  v621 = *(_OWORD *)(v586 - 3);
                  *(v586 - 3) = 0;
                  *(v586 - 2) = 0;
                  v622 = (std::__shared_weak_count *)*(v555 - 2);
                  *(_OWORD *)(v555 - 3) = v621;
                  if (v622)
                  {
                    v623 = (unint64_t *)&v622->__shared_owners_;
                    do
                      v624 = __ldaxr(v623);
                    while (__stlxr(v624 - 1, v623));
                    if (!v624)
                    {
                      ((void (*)(std::__shared_weak_count *, void **, int64_t, void **))v622->__on_zero_shared)(v622, v580, v540, v582);
                      std::__shared_weak_count::__release_weak(v622);
                    }
                  }
                  *((_BYTE *)v555 - 8) = *((_BYTE *)v586 - 8);
                  v555 -= 35;
                  v586 -= 35;
                }
                while (v606 != v562);
              }
              *v562 = (void *)v557;
              v598 = &v1706[35 * v1713];
              *(_OWORD *)(v598 + 1) = v1833;
              *(_OWORD *)(v598 + 5) = *(_OWORD *)&v1844[2];
              *(_OWORD *)(v598 + 7) = *(_OWORD *)&v1844[4];
              *(_OWORD *)(v598 + 9) = *(_OWORD *)&v1844[6];
              v598[11] = v1844[8];
              *(_OWORD *)(v598 + 3) = *(_OWORD *)v1844;
              *((_OWORD *)v598 + 6) = v1799;
              v598[14] = (void *)v1800;
              v598[15] = v544;
              v599 = (std::__shared_weak_count *)v598[16];
              v598[16] = v541;
              v548 = v538 + 363;
              if (v599)
              {
                v600 = (unint64_t *)&v599->__shared_owners_;
                do
                  v601 = __ldaxr(v600);
                while (__stlxr(v601 - 1, v600));
                if (!v601)
                {
                  ((void (*)(std::__shared_weak_count *, void **, int64_t, void **))v599->__on_zero_shared)(v599, v580, v540, v582);
                  std::__shared_weak_count::__release_weak(v599);
                }
              }
              v602 = &v1706[35 * v1713];
              v602[17] = __dstb;
              *((_OWORD *)v602 + 9) = v1807[0];
              *((_OWORD *)v602 + 10) = v1807[1];
              *((_OWORD *)v602 + 11) = v1807[2];
              *((_OWORD *)v602 + 12) = v1836;
              *((_OWORD *)v602 + 13) = v1837;
              *((__n128 *)v602 + 14) = v1838;
              v602[30] = v1726;
              *((_BYTE *)v602 + 248) = (_BYTE)v1727;
              v603 = (std::__shared_weak_count *)v602[33];
              v602[32] = 0;
              v602[33] = 0;
              v537 = v1683;
              if (v603)
              {
                v604 = (unint64_t *)&v603->__shared_owners_;
                do
                  v605 = __ldaxr(v604);
                while (__stlxr(v605 - 1, v604));
                if (!v605)
                {
                  ((void (*)(std::__shared_weak_count *, void **, int64_t, void **))v603->__on_zero_shared)(v603, v580, v540, v582);
                  std::__shared_weak_count::__release_weak(v603);
                }
              }
              LOBYTE(v1706[35 * v1713 + 34]) = 0;
            }
            v1337 = (std::__shared_weak_count *)object[33];
            if (object[33])
            {
              v1338 = (unint64_t *)((char *)object[33] + 8);
              do
                v1339 = __ldaxr(v1338);
              while (__stlxr(v1339 - 1, v1338));
              if (!v1339)
              {
                ((void (*)(std::__shared_weak_count *, void **, int64_t, void **))v1337->__on_zero_shared)(v1337, v580, v540, v582);
                std::__shared_weak_count::__release_weak(v1337);
              }
            }
          }
          v1340 = (std::__shared_weak_count *)object[16];
          if (object[16])
          {
            v1341 = (unint64_t *)((char *)object[16] + 8);
            do
              v1342 = __ldaxr(v1341);
            while (__stlxr(v1342 - 1, v1341));
            if (!v1342)
            {
              ((void (*)(std::__shared_weak_count *, void **, int64_t, void **))v1340->__on_zero_shared)(v1340, v580, v540, v582);
              std::__shared_weak_count::__release_weak(v1340);
            }
          }
          v548->i8[2] = 0;
          v548->i8[0] = 0;
          v538[362] = vaddq_s64(v538[362], (int64x2_t)xmmword_2103B2300);
          v1343 = *(std::__shared_weak_count **)&oslog[256];
          if (*(_QWORD *)&oslog[256])
          {
            v1344 = (unint64_t *)(*(_QWORD *)&oslog[256] + 8);
            do
              v1345 = __ldaxr(v1344);
            while (__stlxr(v1345 - 1, v1344));
            if (!v1345)
            {
              ((void (*)(std::__shared_weak_count *, void **, int64_t, void **))v1343->__on_zero_shared)(v1343, v580, v540, v582);
              std::__shared_weak_count::__release_weak(v1343);
            }
          }
          v638 = 0;
          v639 = *(std::__shared_weak_count **)&oslog[120];
          if (!*(_QWORD *)&oslog[120])
            goto LABEL_805;
          goto LABEL_801;
        }
        --*((_DWORD *)v583 + 2);
        *(_QWORD *)&oslog[128] = 0;
      }
    }
    v638 = 1;
    v639 = *(std::__shared_weak_count **)&oslog[120];
    if (!*(_QWORD *)&oslog[120])
    {
LABEL_805:
      v642 = (std::__shared_weak_count *)*((_QWORD *)&v1830 + 1);
      if (!*((_QWORD *)&v1830 + 1))
        goto LABEL_809;
      v643 = (unint64_t *)(*((_QWORD *)&v1830 + 1) + 8);
      do
        v644 = __ldaxr(v643);
      while (__stlxr(v644 - 1, v643));
      if (v644)
      {
LABEL_809:
        if ((v638 & 1) != 0)
          goto LABEL_810;
LABEL_813:
        v645 = 0;
        v538[411].i8[12] = 0;
        v538[411].i32[2] = 0;
        v646 = (std::__shared_weak_count *)*((_QWORD *)&v1730 + 1);
        if (!*((_QWORD *)&v1730 + 1))
          goto LABEL_817;
LABEL_814:
        v647 = (unint64_t *)&v646->__shared_owners_;
        do
          v648 = __ldaxr(v647);
        while (__stlxr(v648 - 1, v647));
        if (!v648)
        {
          ((void (*)(std::__shared_weak_count *))v646->__on_zero_shared)(v646);
          std::__shared_weak_count::__release_weak(v646);
          if (!v645)
            goto LABEL_819;
LABEL_818:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 988, (uint64_t)"ret.second", 10, (uint64_t)"Failed to add Pose prior factor", 31, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
LABEL_819:
          v649 = *(std::__shared_weak_count **)&v1796[120];
          if (*(_QWORD *)&v1796[120])
          {
            v650 = (unint64_t *)(*(_QWORD *)&v1796[120] + 8);
            do
              v651 = __ldaxr(v650);
            while (__stlxr(v651 - 1, v650));
            if (!v651)
            {
              ((void (*)(std::__shared_weak_count *))v649->__on_zero_shared)(v649);
              std::__shared_weak_count::__release_weak(v649);
            }
          }
          if (v1717)
          {
            v652 = &v1717->__shared_owners_;
            do
              v653 = __ldaxr((unint64_t *)v652);
            while (__stlxr(v653 - 1, (unint64_t *)v652));
            if (!v653)
            {
              ((void (*)(std::__shared_weak_count *))v1717->__on_zero_shared)(v1717);
              std::__shared_weak_count::__release_weak(v1717);
            }
          }
          v654 = (int64x2_t *)v1723;
          v1830 = 0uLL;
          v655 = (void *)*((unsigned int *)v537 + 10);
          *(_QWORD *)v1796 = v655;
          memset(&v1796[16], 0, 184);
          v1720 = 0;
          v1719 = 0;
          v1833 = 0uLL;
          v656 = *(void ***)(v1723 + 5608);
          v657 = *(void ***)(v1723 + 5616);
          if (v656 == v657)
          {
            v658 = *(void ***)(v1723 + 5608);
          }
          else
          {
            v658 = *(void ***)(v1723 + 5616);
            if (*(v657 - 63) >= v655)
            {
              v659 = 0xEFBEFBEFBEFBEFBFLL * (v657 - v656);
              v660 = *(void ***)(v1723 + 5608);
              do
              {
                v661 = v659 >> 1;
                v662 = (unint64_t *)&v660[63 * (v659 >> 1)];
                v663 = *v662;
                v664 = (void **)(v662 + 63);
                v659 += ~(v659 >> 1);
                if (v663 < (unint64_t)v655)
                  v660 = v664;
                else
                  v659 = v661;
              }
              while (v659);
              v658 = *(void ***)(v1723 + 5616);
              if (v660 != v657)
              {
                v658 = v660;
                if (*v660 == v655)
                  goto LABEL_903;
              }
            }
          }
          *(_OWORD *)oslog = *(_OWORD *)v1796;
          memset(&oslog[16], 0, 200);
          *(_QWORD *)&v1796[192] = 0;
          *(_QWORD *)&v1796[184] = 0;
          memset(&oslog[472], 0, 17);
          *(_QWORD *)&oslog[456] = 0xBFF0000000000000;
          oslog[464] = 0;
          v665 = *(char **)(v1723 + 4840);
          v666 = *(char **)(v1723 + 4848);
          if (v666 != v665)
          {
            v667 = (int64x2_t *)(v1723 + 5808);
            v668 = (v666 - v665) >> 4;
            do
            {
              v669 = v668 >> 1;
              v670 = (unsigned int *)&v665[16 * (v668 >> 1)];
              v672 = *v670;
              v671 = (char *)(v670 + 4);
              v673 = (void **)~(v668 >> 1);
              v668 += (unint64_t)v673;
              if (v672 < v655)
                v665 = v671;
              else
                v668 = v669;
            }
            while (v668);
            if (v665 != v666 && *(_DWORD *)v665 == (_DWORD)v655)
            {
              v674 = *((_QWORD *)v665 + 1);
              *(_QWORD *)&oslog[200] = v674;
              ++*(_DWORD *)(*((_QWORD *)v665 + 1) + 8);
              v675 = v654[308].i64[1];
              v676 = v654[309].i64[0];
              if (v676 != v675)
              {
                v677 = (v676 - v675) >> 4;
                do
                {
                  v678 = v677 >> 1;
                  v679 = (unsigned int *)(v675 + 16 * (v677 >> 1));
                  v681 = *v679;
                  v680 = v679 + 4;
                  v673 = (void **)v681;
                  v540 = ~(v677 >> 1);
                  v677 += v540;
                  if (v681 < v655)
                    v675 = (uint64_t)v680;
                  else
                    v677 = v678;
                }
                while (v677);
              }
              if (v675 != v676 && *(_DWORD *)v675 == (_DWORD)v655)
              {
                v682 = *(_QWORD *)(v675 + 8);
                *(_QWORD *)&oslog[208] = v682;
                ++*(_DWORD *)(*(_QWORD *)(v675 + 8) + 8);
                if (*(_BYTE *)(v674 + 20) || *(_BYTE *)(v682 + 20))
                {
                  *(_OWORD *)&object[1] = *(_OWORD *)oslog;
                  *(_OWORD *)&object[17] = *(_OWORD *)&oslog[128];
                  *(_OWORD *)&object[19] = *(_OWORD *)&oslog[144];
                  *(_OWORD *)&object[21] = *(_OWORD *)&oslog[160];
                  *(_OWORD *)&object[9] = *(_OWORD *)&oslog[64];
                  *(_OWORD *)&object[11] = *(_OWORD *)&oslog[80];
                  object[0] = v655;
                  object[23] = *(void **)&oslog[176];
                  *(_OWORD *)&object[13] = *(_OWORD *)&oslog[96];
                  *(_OWORD *)&object[15] = *(_OWORD *)&oslog[112];
                  *(_OWORD *)&object[3] = *(_OWORD *)&oslog[16];
                  *(_OWORD *)&object[5] = *(_OWORD *)&oslog[32];
                  *(_OWORD *)&object[7] = *(_OWORD *)&oslog[48];
                  object[25] = 0;
                  object[24] = 0;
                  *(_QWORD *)&oslog[184] = 0;
                  *(_QWORD *)&oslog[192] = 0;
                  *(_OWORD *)&object[38] = *(_OWORD *)&oslog[296];
                  *(_OWORD *)&object[40] = *(_OWORD *)&oslog[312];
                  *(_OWORD *)&object[26] = *(_OWORD *)&oslog[200];
                  *(_OWORD *)&object[28] = *(_OWORD *)&oslog[216];
                  *(_OWORD *)&object[30] = *(_OWORD *)&oslog[232];
                  *(_OWORD *)&object[32] = *(_OWORD *)&oslog[248];
                  *(_OWORD *)&object[34] = *(_OWORD *)&oslog[264];
                  *(_OWORD *)&object[36] = *(_OWORD *)&oslog[280];
                  *(_OWORD *)&object[51] = *(_OWORD *)&oslog[400];
                  *(_OWORD *)&object[53] = *(_OWORD *)&oslog[416];
                  *(_OWORD *)&object[55] = *(_OWORD *)&oslog[432];
                  *(_OWORD *)&object[43] = *(_OWORD *)&oslog[336];
                  *(_OWORD *)&object[45] = *(_OWORD *)&oslog[352];
                  *(_OWORD *)&object[47] = *(_OWORD *)&oslog[368];
                  *(_OWORD *)&object[49] = *(_OWORD *)&oslog[384];
                  object[42] = *(void **)&oslog[328];
                  object[57] = *(void **)&oslog[448];
                  LOBYTE(object[59]) = oslog[464];
                  object[58] = *(void **)&oslog[456];
                  memset(&object[60], 0, 17);
                  *(_QWORD *)&oslog[472] = 0;
                  *(_QWORD *)&oslog[480] = 0;
                  if (v657 == v658 || *v658 != v655)
                  {
                    v673 = &object[26];
                    v540 = 0xEFBEFBEFBEFBEFBFLL * (v658 - v656);
                    v683 = v654[351].u64[1];
                    if ((unint64_t)v657 >= v683)
                    {
                      v1275 = 1 - 0x1041041041041041 * (v657 - v656);
                      if (v1275 > 0x82082082082082)
                        sub_20E867F44();
                      v1276 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(v683 - (_QWORD)v656) >> 3);
                      if (2 * v1276 > v1275)
                        v1275 = 2 * v1276;
                      if (v1276 >= 0x41041041041041)
                        v1277 = 0x82082082082082;
                      else
                        v1277 = v1275;
                      v1844[4] = &v654[351].u64[1];
                      if (v1277)
                      {
                        if (v1277 > 0x82082082082082)
                          sub_20E877A38();
                        v1278 = (char *)operator new(504 * v1277);
                        v540 = 0xEFBEFBEFBEFBEFBFLL * (v658 - v656);
                      }
                      else
                      {
                        v1278 = 0;
                      }
                      v1368 = &v1278[504 * v540];
                      v1844[0] = v1278;
                      v1844[1] = v1368;
                      v1844[2] = v1368;
                      v1844[3] = &v1278[504 * v1277];
                      if (v540 == v1277)
                      {
                        v667 = v654 + 363;
                        if ((char *)v658 - (char *)v656 < 1)
                        {
                          if (v656 == v658)
                            v1559 = 1;
                          else
                            v1559 = 2 * v540;
                          if (v1559 > 0x82082082082082)
                            sub_20E877A38();
                          v1560 = (char *)operator new(504 * v1559);
                          v1368 = &v1560[504 * (v1559 >> 2)];
                          v1844[0] = v1560;
                          v1844[1] = v1368;
                          v1844[2] = v1368;
                          v1844[3] = &v1560[504 * v1559];
                          if (v1278)
                            operator delete(v1278);
                          v1371 = v1368;
                        }
                        else
                        {
                          v1369 = v540 + 2;
                          if (v540 >= -1)
                            v1369 = v540 + 1;
                          v1370 = v1369 >> 1;
                          v1371 = (char *)sub_20F5B64A0((uint64_t)v1368, (uint64_t)v1368, (uint64_t)&v1368[-504 * (v1369 >> 1)]);
                          v1368 = (char *)v1844[1] - 504 * v1370;
                          v1844[2] = v1371;
                          v1844[1] = v1368;
                          v655 = object[0];
                        }
                      }
                      else
                      {
                        v1371 = &v1278[504 * v540];
                        v667 = v654 + 363;
                      }
                      *(_QWORD *)v1371 = v655;
                      *(_OWORD *)(v1371 + 8) = *(_OWORD *)&object[1];
                      v1561 = *(_OWORD *)&object[17];
                      *(_OWORD *)(v1371 + 120) = *(_OWORD *)&object[15];
                      v1562 = *(_OWORD *)&object[11];
                      *(_OWORD *)(v1371 + 104) = *(_OWORD *)&object[13];
                      *(_OWORD *)(v1371 + 88) = v1562;
                      v1563 = *(_OWORD *)&object[7];
                      *(_OWORD *)(v1371 + 72) = *(_OWORD *)&object[9];
                      *((void **)v1371 + 23) = object[23];
                      v1564 = *(_OWORD *)&object[19];
                      *(_OWORD *)(v1371 + 168) = *(_OWORD *)&object[21];
                      *(_OWORD *)(v1371 + 152) = v1564;
                      *(_OWORD *)(v1371 + 136) = v1561;
                      v1565 = *(_OWORD *)&object[5];
                      *(_OWORD *)(v1371 + 24) = *(_OWORD *)&object[3];
                      *(_OWORD *)(v1371 + 40) = v1565;
                      *(_OWORD *)(v1371 + 56) = v1563;
                      *((_OWORD *)v1371 + 12) = *(_OWORD *)&object[24];
                      object[24] = 0;
                      object[25] = 0;
                      *((_OWORD *)v1371 + 13) = *(_OWORD *)&object[26];
                      *((void **)v1371 + 42) = object[42];
                      v1566 = *(_OWORD *)&object[40];
                      v1567 = *(_OWORD *)&object[36];
                      *((_OWORD *)v1371 + 19) = *(_OWORD *)&object[38];
                      *((_OWORD *)v1371 + 20) = v1566;
                      v1568 = *(_OWORD *)&object[30];
                      *((_OWORD *)v1371 + 14) = *(_OWORD *)&object[28];
                      *((_OWORD *)v1371 + 15) = v1568;
                      v1569 = *(_OWORD *)&object[34];
                      *((_OWORD *)v1371 + 16) = *(_OWORD *)&object[32];
                      *((_OWORD *)v1371 + 17) = v1569;
                      *((_OWORD *)v1371 + 18) = v1567;
                      v1570 = *(_OWORD *)&object[43];
                      v1571 = *(_OWORD *)&object[45];
                      v1572 = *(_OWORD *)&object[49];
                      *(_OWORD *)(v1371 + 376) = *(_OWORD *)&object[47];
                      *(_OWORD *)(v1371 + 392) = v1572;
                      *(_OWORD *)(v1371 + 344) = v1570;
                      *(_OWORD *)(v1371 + 360) = v1571;
                      v1573 = *(_OWORD *)&object[51];
                      v1574 = *(_OWORD *)&object[53];
                      v1575 = *(_OWORD *)&object[55];
                      *((void **)v1371 + 57) = object[57];
                      *(_OWORD *)(v1371 + 424) = v1574;
                      *(_OWORD *)(v1371 + 440) = v1575;
                      *(_OWORD *)(v1371 + 408) = v1573;
                      v1576 = object[58];
                      v1371[472] = (char)object[59];
                      *((_QWORD *)v1371 + 58) = v1576;
                      *((_OWORD *)v1371 + 30) = *(_OWORD *)&object[60];
                      object[60] = 0;
                      object[61] = 0;
                      v1371[496] = (char)object[62];
                      v1577 = (void **)(v1371 + 504);
                      v1578 = (void **)v654[350].i64[1];
                      if (v1578 == v658)
                      {
                        v1580 = v1368;
                      }
                      else
                      {
                        v1579 = v658;
                        do
                        {
                          v1580 = v1368 - 504;
                          v1581 = v1579 - 63;
                          *(_QWORD *)v1580 = *(v1579 - 63);
                          *(_OWORD *)(v1580 + 8) = *((_OWORD *)v1579 - 31);
                          v1582 = *((_OWORD *)v1579 - 26);
                          v1583 = *((_OWORD *)v1579 - 25);
                          v1584 = *((_OWORD *)v1579 - 24);
                          *(_OWORD *)(v1580 + 72) = *((_OWORD *)v1579 - 27);
                          *(_OWORD *)(v1580 + 120) = v1584;
                          *(_OWORD *)(v1580 + 104) = v1583;
                          *(_OWORD *)(v1580 + 88) = v1582;
                          v1585 = *((_OWORD *)v1579 - 22);
                          v1586 = *((_OWORD *)v1579 - 21);
                          v1587 = (uint64_t)*(v1579 - 40);
                          *(_OWORD *)(v1580 + 136) = *((_OWORD *)v1579 - 23);
                          *((_QWORD *)v1580 + 23) = v1587;
                          *(_OWORD *)(v1580 + 168) = v1586;
                          *(_OWORD *)(v1580 + 152) = v1585;
                          v1588 = *((_OWORD *)v1579 - 30);
                          v1589 = *((_OWORD *)v1579 - 29);
                          *(_OWORD *)(v1580 + 56) = *((_OWORD *)v1579 - 28);
                          *(_OWORD *)(v1580 + 40) = v1589;
                          *(_OWORD *)(v1580 + 24) = v1588;
                          *((_QWORD *)v1580 + 24) = *(v1579 - 39);
                          v1590 = (uint64_t)*(v1579 - 38);
                          *((_QWORD *)v1580 + 25) = v1590;
                          if (v1590)
                          {
                            v1591 = (unint64_t *)(v1590 + 8);
                            do
                              v1592 = __ldxr(v1591);
                            while (__stxr(v1592 + 1, v1591));
                          }
                          *(_OWORD *)(v1368 - 296) = *(_OWORD *)(v1579 - 37);
                          v1593 = *(_OWORD *)(v1579 - 25);
                          v1594 = *(_OWORD *)(v1579 - 23);
                          v1595 = (uint64_t)*(v1579 - 21);
                          *(_OWORD *)(v1368 - 216) = *(_OWORD *)(v1579 - 27);
                          *((_QWORD *)v1368 - 21) = v1595;
                          *(_OWORD *)(v1368 - 184) = v1594;
                          *(_OWORD *)(v1368 - 200) = v1593;
                          v1596 = *(_OWORD *)(v1579 - 35);
                          v1597 = *(_OWORD *)(v1579 - 33);
                          v1598 = *(_OWORD *)(v1579 - 31);
                          *(_OWORD *)(v1368 - 232) = *(_OWORD *)(v1579 - 29);
                          *(_OWORD *)(v1368 - 248) = v1598;
                          *(_OWORD *)(v1368 - 280) = v1596;
                          *(_OWORD *)(v1368 - 264) = v1597;
                          v1600 = *((_OWORD *)v1579 - 5);
                          v1599 = *((_OWORD *)v1579 - 4);
                          v1601 = *((_OWORD *)v1579 - 6);
                          *((_QWORD *)v1368 - 6) = *(v1579 - 6);
                          *((_OWORD *)v1368 - 5) = v1600;
                          *((_OWORD *)v1368 - 4) = v1599;
                          *((_OWORD *)v1368 - 6) = v1601;
                          v1602 = *((_OWORD *)v1579 - 10);
                          v1603 = *((_OWORD *)v1579 - 9);
                          v1604 = *((_OWORD *)v1579 - 7);
                          *((_OWORD *)v1368 - 8) = *((_OWORD *)v1579 - 8);
                          *((_OWORD *)v1368 - 7) = v1604;
                          *((_OWORD *)v1368 - 10) = v1602;
                          *((_OWORD *)v1368 - 9) = v1603;
                          v1605 = (uint64_t)*(v1579 - 5);
                          *(v1368 - 32) = *((_BYTE *)v1579 - 32);
                          *((_QWORD *)v1368 - 5) = v1605;
                          *((_QWORD *)v1368 - 3) = *(v1579 - 3);
                          v1606 = (uint64_t)*(v1579 - 2);
                          *((_QWORD *)v1368 - 2) = v1606;
                          if (v1606)
                          {
                            v1607 = (unint64_t *)(v1606 + 8);
                            do
                              v1608 = __ldxr(v1607);
                            while (__stxr(v1608 + 1, v1607));
                          }
                          *(v1368 - 8) = *((_BYTE *)v1579 - 8);
                          v1368 -= 504;
                          v1579 -= 63;
                        }
                        while (v1581 != v1578);
                      }
                      v1844[1] = v1580;
                      v1609 = (void **)v654[351].i64[0];
                      if (v1609 != v658)
                      {
                        do
                        {
                          *v1577 = *v658;
                          *(_OWORD *)(v1577 + 1) = *(_OWORD *)(v658 + 1);
                          v1610 = *(_OWORD *)(v658 + 11);
                          v1611 = *(_OWORD *)(v658 + 13);
                          v1612 = *(_OWORD *)(v658 + 15);
                          *(_OWORD *)(v1577 + 9) = *(_OWORD *)(v658 + 9);
                          *(_OWORD *)(v1577 + 15) = v1612;
                          *(_OWORD *)(v1577 + 13) = v1611;
                          *(_OWORD *)(v1577 + 11) = v1610;
                          v1613 = *(_OWORD *)(v658 + 19);
                          v1614 = *(_OWORD *)(v658 + 21);
                          v1615 = v658[23];
                          *(_OWORD *)(v1577 + 17) = *(_OWORD *)(v658 + 17);
                          v1577[23] = v1615;
                          *(_OWORD *)(v1577 + 21) = v1614;
                          *(_OWORD *)(v1577 + 19) = v1613;
                          v1616 = *(_OWORD *)(v658 + 3);
                          v1617 = *(_OWORD *)(v658 + 5);
                          *(_OWORD *)(v1577 + 7) = *(_OWORD *)(v658 + 7);
                          *(_OWORD *)(v1577 + 5) = v1617;
                          *(_OWORD *)(v1577 + 3) = v1616;
                          v1577[24] = v658[24];
                          v1618 = (unint64_t *)v658[25];
                          v1577[25] = v1618;
                          if (v1618)
                          {
                            v1619 = v1618 + 1;
                            do
                              v1620 = __ldxr(v1619);
                            while (__stxr(v1620 + 1, v1619));
                          }
                          *((_OWORD *)v1577 + 13) = *((_OWORD *)v658 + 13);
                          v1622 = *((_OWORD *)v658 + 19);
                          v1621 = *((_OWORD *)v658 + 20);
                          v1623 = *((_OWORD *)v658 + 18);
                          v1577[42] = v658[42];
                          *((_OWORD *)v1577 + 19) = v1622;
                          *((_OWORD *)v1577 + 20) = v1621;
                          *((_OWORD *)v1577 + 18) = v1623;
                          v1624 = *((_OWORD *)v658 + 14);
                          v1625 = *((_OWORD *)v658 + 15);
                          v1626 = *((_OWORD *)v658 + 17);
                          *((_OWORD *)v1577 + 16) = *((_OWORD *)v658 + 16);
                          *((_OWORD *)v1577 + 17) = v1626;
                          *((_OWORD *)v1577 + 14) = v1624;
                          *((_OWORD *)v1577 + 15) = v1625;
                          v1628 = *(_OWORD *)(v658 + 53);
                          v1627 = *(_OWORD *)(v658 + 55);
                          v1629 = *(_OWORD *)(v658 + 51);
                          v1577[57] = v658[57];
                          *(_OWORD *)(v1577 + 53) = v1628;
                          *(_OWORD *)(v1577 + 55) = v1627;
                          *(_OWORD *)(v1577 + 51) = v1629;
                          v1630 = *(_OWORD *)(v658 + 43);
                          v1631 = *(_OWORD *)(v658 + 45);
                          v1632 = *(_OWORD *)(v658 + 49);
                          *(_OWORD *)(v1577 + 47) = *(_OWORD *)(v658 + 47);
                          *(_OWORD *)(v1577 + 49) = v1632;
                          *(_OWORD *)(v1577 + 43) = v1630;
                          *(_OWORD *)(v1577 + 45) = v1631;
                          v1633 = v658[58];
                          *((_BYTE *)v1577 + 472) = *((_BYTE *)v658 + 472);
                          v1577[58] = v1633;
                          v1577[60] = v658[60];
                          v1634 = (unint64_t *)v658[61];
                          v1577[61] = v1634;
                          if (v1634)
                          {
                            v1635 = v1634 + 1;
                            do
                              v1636 = __ldxr(v1635);
                            while (__stxr(v1636 + 1, v1635));
                          }
                          *((_BYTE *)v1577 + 496) = *((_BYTE *)v658 + 496);
                          v658 += 63;
                          v1577 += 63;
                        }
                        while (v658 != v1609);
                        v1580 = (char *)v1844[1];
                        v658 = (void **)v654[351].i64[0];
                      }
                      v1637 = (void **)v654[350].i64[1];
                      v654[350].i64[1] = (uint64_t)v1580;
                      v654[351].i64[0] = (uint64_t)v1577;
                      v1638 = (void *)v654[351].i64[1];
                      v654[351].i64[1] = (uint64_t)v1844[3];
                      v1844[3] = v1638;
                      v1844[1] = v1637;
                      v1844[0] = v1637;
                      if (v658 != v1637)
                      {
                        do
                        {
                          v1844[2] = v658 - 63;
                          v1639 = (std::__shared_weak_count *)*(v658 - 2);
                          if (v1639)
                          {
                            v1640 = (unint64_t *)&v1639->__shared_owners_;
                            do
                              v1641 = __ldaxr(v1640);
                            while (__stlxr(v1641 - 1, v1640));
                            if (!v1641)
                            {
                              ((void (*)(std::__shared_weak_count *))v1639->__on_zero_shared)(v1639);
                              std::__shared_weak_count::__release_weak(v1639);
                            }
                          }
                          v1642 = (std::__shared_weak_count *)*(v658 - 38);
                          if (v1642)
                          {
                            v1643 = (unint64_t *)&v1642->__shared_owners_;
                            do
                              v1644 = __ldaxr(v1643);
                            while (__stlxr(v1644 - 1, v1643));
                            if (!v1644)
                            {
                              ((void (*)(std::__shared_weak_count *))v1642->__on_zero_shared)(v1642);
                              std::__shared_weak_count::__release_weak(v1642);
                            }
                          }
                          v658 = (void **)v1844[2];
                        }
                        while (v1844[2] != v1637);
                        v658 = (void **)v1844[0];
                      }
                      if (v658)
                        operator delete(v658);
                    }
                    else if (v658 == v657)
                    {
                      *v657 = v655;
                      v1346 = &v656[v658 - v656];
                      *(_OWORD *)(v1346 + 1) = *(_OWORD *)&object[1];
                      v1348 = *(_OWORD *)&object[5];
                      v1347 = *(_OWORD *)&object[7];
                      *(_OWORD *)(v1346 + 3) = *(_OWORD *)&object[3];
                      *(_OWORD *)(v1346 + 7) = v1347;
                      *(_OWORD *)(v1346 + 5) = v1348;
                      v1349 = *(_OWORD *)&object[9];
                      v1350 = *(_OWORD *)&object[11];
                      v1351 = *(_OWORD *)&object[13];
                      *(_OWORD *)(v1346 + 15) = *(_OWORD *)&object[15];
                      *(_OWORD *)(v1346 + 13) = v1351;
                      *(_OWORD *)(v1346 + 11) = v1350;
                      *(_OWORD *)(v1346 + 9) = v1349;
                      v1352 = *(_OWORD *)&object[17];
                      v1353 = *(_OWORD *)&object[19];
                      v1354 = object[23];
                      *(_OWORD *)(v1346 + 21) = *(_OWORD *)&object[21];
                      *(_OWORD *)(v1346 + 19) = v1353;
                      *(_OWORD *)(v1346 + 17) = v1352;
                      v1346[23] = v1354;
                      v1346[24] = 0;
                      v1346[25] = 0;
                      object[24] = 0;
                      object[25] = 0;
                      *((_OWORD *)v1346 + 13) = *(_OWORD *)&object[26];
                      v1356 = *(_OWORD *)&object[38];
                      v1355 = *(_OWORD *)&object[40];
                      v1357 = *(_OWORD *)&object[36];
                      v1346[42] = object[42];
                      *((_OWORD *)v1346 + 19) = v1356;
                      *((_OWORD *)v1346 + 20) = v1355;
                      *((_OWORD *)v1346 + 18) = v1357;
                      v1358 = *(_OWORD *)&object[28];
                      v1359 = *(_OWORD *)&object[30];
                      v1360 = *(_OWORD *)&object[34];
                      *((_OWORD *)v1346 + 16) = *(_OWORD *)&object[32];
                      *((_OWORD *)v1346 + 17) = v1360;
                      *((_OWORD *)v1346 + 14) = v1358;
                      *((_OWORD *)v1346 + 15) = v1359;
                      v1362 = *(_OWORD *)&object[53];
                      v1361 = *(_OWORD *)&object[55];
                      v1363 = *(_OWORD *)&object[51];
                      v1346[57] = object[57];
                      *(_OWORD *)(v1346 + 53) = v1362;
                      *(_OWORD *)(v1346 + 55) = v1361;
                      *(_OWORD *)(v1346 + 51) = v1363;
                      v1364 = *(_OWORD *)&object[43];
                      v1365 = *(_OWORD *)&object[45];
                      v1366 = *(_OWORD *)&object[49];
                      *(_OWORD *)(v1346 + 47) = *(_OWORD *)&object[47];
                      *(_OWORD *)(v1346 + 49) = v1366;
                      *(_OWORD *)(v1346 + 43) = v1364;
                      *(_OWORD *)(v1346 + 45) = v1365;
                      v1367 = object[58];
                      *((_BYTE *)v1346 + 472) = object[59];
                      v1346[58] = v1367;
                      v1346[60] = 0;
                      v1346[61] = 0;
                      object[60] = 0;
                      object[61] = 0;
                      *((_BYTE *)v1346 + 496) = 0;
                      v654[351].i64[0] = (uint64_t)(v657 + 63);
                    }
                    else
                    {
                      v1799 = *(_OWORD *)oslog;
                      *(_OWORD *)&v1844[14] = *(_OWORD *)&oslog[128];
                      *(_OWORD *)&v1844[16] = *(_OWORD *)&oslog[144];
                      *(_OWORD *)&v1844[18] = *(_OWORD *)&oslog[160];
                      *(_OWORD *)&v1844[6] = *(_OWORD *)&oslog[64];
                      *(_OWORD *)&v1844[8] = *(_OWORD *)&oslog[80];
                      v1844[20] = *(void **)&oslog[176];
                      *(_OWORD *)&v1844[10] = *(_OWORD *)&oslog[96];
                      *(_OWORD *)&v1844[12] = *(_OWORD *)&oslog[112];
                      *(_OWORD *)v1844 = *(_OWORD *)&oslog[16];
                      *(_OWORD *)&v1844[2] = *(_OWORD *)&oslog[32];
                      *(_OWORD *)&v1844[4] = *(_OWORD *)&oslog[48];
                      object[24] = 0;
                      object[25] = 0;
                      v1707 = *(_OWORD *)&object[26];
                      v1807[4] = *(_OWORD *)&oslog[280];
                      v1807[5] = *(_OWORD *)&oslog[296];
                      v1807[6] = *(_OWORD *)&oslog[312];
                      *(_QWORD *)&v1807[7] = *(_QWORD *)&oslog[328];
                      v1807[0] = *(_OWORD *)&oslog[216];
                      v1807[1] = *(_OWORD *)&oslog[232];
                      v1807[2] = *(_OWORD *)&oslog[248];
                      v1807[3] = *(_OWORD *)&oslog[264];
                      v1843.n128_u64[0] = *(_QWORD *)&oslog[448];
                      v1842 = *(_OWORD *)&oslog[432];
                      v1841 = *(_OWORD *)&oslog[416];
                      v1840 = *(_OWORD *)&oslog[400];
                      v1838 = *(__n128 *)&oslog[368];
                      v1839 = *(__n128 *)&oslog[384];
                      v1836 = *(_OWORD *)&oslog[336];
                      v1837 = *(_OWORD *)&oslog[352];
                      LOBYTE(v1717) = oslog[464];
                      v1715 = *(void **)&oslog[456];
                      v684 = v657 - 63;
                      v685 = v657;
                      object[60] = 0;
                      object[61] = 0;
                      if ((unint64_t)v657 >= 0x1F8)
                      {
                        v686 = v657 - 63;
                        v685 = v657;
                        do
                        {
                          *v685 = *v686;
                          *(_OWORD *)(v685 + 1) = *(_OWORD *)(v686 + 1);
                          v687 = *(_OWORD *)(v686 + 11);
                          v688 = *(_OWORD *)(v686 + 13);
                          v689 = *(_OWORD *)(v686 + 15);
                          *(_OWORD *)(v685 + 9) = *(_OWORD *)(v686 + 9);
                          *(_OWORD *)(v685 + 15) = v689;
                          *(_OWORD *)(v685 + 13) = v688;
                          *(_OWORD *)(v685 + 11) = v687;
                          v690 = *(_OWORD *)(v686 + 19);
                          v691 = *(_OWORD *)(v686 + 21);
                          v692 = v686[23];
                          *(_OWORD *)(v685 + 17) = *(_OWORD *)(v686 + 17);
                          v685[23] = v692;
                          *(_OWORD *)(v685 + 21) = v691;
                          *(_OWORD *)(v685 + 19) = v690;
                          v693 = *(_OWORD *)(v686 + 3);
                          v694 = *(_OWORD *)(v686 + 5);
                          *(_OWORD *)(v685 + 7) = *(_OWORD *)(v686 + 7);
                          *(_OWORD *)(v685 + 5) = v694;
                          *(_OWORD *)(v685 + 3) = v693;
                          *((_OWORD *)v685 + 12) = *((_OWORD *)v686 + 12);
                          v686[24] = 0;
                          v686[25] = 0;
                          *((_OWORD *)v685 + 13) = *((_OWORD *)v686 + 13);
                          v696 = *((_OWORD *)v686 + 19);
                          v695 = *((_OWORD *)v686 + 20);
                          v697 = *((_OWORD *)v686 + 18);
                          v685[42] = v686[42];
                          *((_OWORD *)v685 + 19) = v696;
                          *((_OWORD *)v685 + 20) = v695;
                          *((_OWORD *)v685 + 18) = v697;
                          v698 = *((_OWORD *)v686 + 14);
                          v699 = *((_OWORD *)v686 + 15);
                          v700 = *((_OWORD *)v686 + 17);
                          *((_OWORD *)v685 + 16) = *((_OWORD *)v686 + 16);
                          *((_OWORD *)v685 + 17) = v700;
                          *((_OWORD *)v685 + 14) = v698;
                          *((_OWORD *)v685 + 15) = v699;
                          v702 = *(_OWORD *)(v686 + 53);
                          v701 = *(_OWORD *)(v686 + 55);
                          v703 = *(_OWORD *)(v686 + 51);
                          v685[57] = v686[57];
                          *(_OWORD *)(v685 + 53) = v702;
                          *(_OWORD *)(v685 + 55) = v701;
                          *(_OWORD *)(v685 + 51) = v703;
                          v704 = *(_OWORD *)(v686 + 43);
                          v705 = *(_OWORD *)(v686 + 45);
                          v706 = *(_OWORD *)(v686 + 49);
                          *(_OWORD *)(v685 + 47) = *(_OWORD *)(v686 + 47);
                          *(_OWORD *)(v685 + 49) = v706;
                          *(_OWORD *)(v685 + 43) = v704;
                          *(_OWORD *)(v685 + 45) = v705;
                          v707 = v686[58];
                          *((_BYTE *)v685 + 472) = *((_BYTE *)v686 + 472);
                          v685[58] = v707;
                          *((_OWORD *)v685 + 30) = *((_OWORD *)v686 + 30);
                          v686[60] = 0;
                          v686[61] = 0;
                          *((_BYTE *)v685 + 496) = *((_BYTE *)v686 + 496);
                          v685 += 63;
                          v686 += 63;
                        }
                        while (v686 < v657);
                      }
                      v708 = 0xEFBEFBEFBEFBEFBFLL * (v658 - v656);
                      v654[351].i64[0] = (uint64_t)v685;
                      if (v657 != v658 + 63)
                      {
                        do
                        {
                          v717 = v684 - 63;
                          v718 = v657 - 63;
                          *v718 = *(v684 - 63);
                          *(_OWORD *)(v718 + 1) = *((_OWORD *)v684 - 31);
                          v719 = *((_OWORD *)v684 - 26);
                          v720 = *((_OWORD *)v684 - 25);
                          v721 = *((_OWORD *)v684 - 24);
                          *(_OWORD *)(v718 + 9) = *((_OWORD *)v684 - 27);
                          *(_OWORD *)(v718 + 15) = v721;
                          *(_OWORD *)(v718 + 13) = v720;
                          *(_OWORD *)(v718 + 11) = v719;
                          v722 = *((_OWORD *)v684 - 22);
                          v723 = *((_OWORD *)v684 - 21);
                          v724 = *(v684 - 40);
                          *(_OWORD *)(v718 + 17) = *((_OWORD *)v684 - 23);
                          v718[23] = v724;
                          *(_OWORD *)(v718 + 21) = v723;
                          *(_OWORD *)(v718 + 19) = v722;
                          v725 = *((_OWORD *)v684 - 30);
                          v726 = *((_OWORD *)v684 - 29);
                          *(_OWORD *)(v718 + 7) = *((_OWORD *)v684 - 28);
                          *(_OWORD *)(v718 + 5) = v726;
                          *(_OWORD *)(v718 + 3) = v725;
                          v727 = *(_OWORD *)(v684 - 39);
                          v717[24] = 0;
                          v717[25] = 0;
                          v728 = (std::__shared_weak_count *)*(v657 - 38);
                          *((_OWORD *)v718 + 12) = v727;
                          if (v728)
                          {
                            v729 = (unint64_t *)&v728->__shared_owners_;
                            do
                              v730 = __ldaxr(v729);
                            while (__stlxr(v730 - 1, v729));
                            if (!v730)
                            {
                              ((void (*)(std::__shared_weak_count *, void **, int64_t))v728->__on_zero_shared)(v728, v673, v540);
                              std::__shared_weak_count::__release_weak(v728);
                            }
                          }
                          *(v657 - 37) = *(v684 - 37);
                          *(v657 - 36) = *(v684 - 36);
                          v731 = *(_OWORD *)(v684 - 35);
                          v732 = *(_OWORD *)(v684 - 33);
                          v733 = *(_OWORD *)(v684 - 31);
                          *(_OWORD *)(v657 - 29) = *(_OWORD *)(v684 - 29);
                          *(_OWORD *)(v657 - 31) = v733;
                          *(_OWORD *)(v657 - 35) = v731;
                          *(_OWORD *)(v657 - 33) = v732;
                          v734 = *(_OWORD *)(v684 - 27);
                          v735 = *(_OWORD *)(v684 - 25);
                          v736 = *(_OWORD *)(v684 - 23);
                          *(v657 - 21) = *(v684 - 21);
                          *(_OWORD *)(v657 - 23) = v736;
                          *(_OWORD *)(v657 - 25) = v735;
                          *(_OWORD *)(v657 - 27) = v734;
                          v738 = *((_OWORD *)v684 - 5);
                          v737 = *((_OWORD *)v684 - 4);
                          v739 = *((_OWORD *)v684 - 6);
                          *(v657 - 6) = *(v684 - 6);
                          *((_OWORD *)v657 - 5) = v738;
                          *((_OWORD *)v657 - 4) = v737;
                          *((_OWORD *)v657 - 6) = v739;
                          v740 = *((_OWORD *)v684 - 10);
                          v741 = *((_OWORD *)v684 - 9);
                          v742 = *((_OWORD *)v684 - 7);
                          *((_OWORD *)v657 - 8) = *((_OWORD *)v684 - 8);
                          *((_OWORD *)v657 - 7) = v742;
                          *((_OWORD *)v657 - 10) = v740;
                          *((_OWORD *)v657 - 9) = v741;
                          v743 = *(v684 - 5);
                          *((_BYTE *)v657 - 32) = *((_BYTE *)v684 - 32);
                          *(v657 - 5) = v743;
                          v744 = *(_OWORD *)(v684 - 3);
                          *(v684 - 3) = 0;
                          *(v684 - 2) = 0;
                          v745 = (std::__shared_weak_count *)*(v657 - 2);
                          *(_OWORD *)(v657 - 3) = v744;
                          if (v745)
                          {
                            v746 = (unint64_t *)&v745->__shared_owners_;
                            do
                              v747 = __ldaxr(v746);
                            while (__stlxr(v747 - 1, v746));
                            if (!v747)
                            {
                              ((void (*)(std::__shared_weak_count *, void **, int64_t))v745->__on_zero_shared)(v745, v673, v540);
                              std::__shared_weak_count::__release_weak(v745);
                            }
                          }
                          *((_BYTE *)v657 - 8) = *((_BYTE *)v684 - 8);
                          v657 -= 63;
                          v684 -= 63;
                        }
                        while (v717 != v658);
                      }
                      *v658 = v655;
                      v709 = &v656[v658 - v656];
                      *(_OWORD *)(v709 + 1) = v1799;
                      *(_OWORD *)(v709 + 17) = *(_OWORD *)&v1844[14];
                      *(_OWORD *)(v709 + 19) = *(_OWORD *)&v1844[16];
                      *(_OWORD *)(v709 + 21) = *(_OWORD *)&v1844[18];
                      v709[23] = v1844[20];
                      *(_OWORD *)(v709 + 9) = *(_OWORD *)&v1844[6];
                      *(_OWORD *)(v709 + 11) = *(_OWORD *)&v1844[8];
                      *(_OWORD *)(v709 + 13) = *(_OWORD *)&v1844[10];
                      *(_OWORD *)(v709 + 15) = *(_OWORD *)&v1844[12];
                      *(_OWORD *)(v709 + 3) = *(_OWORD *)v1844;
                      *(_OWORD *)(v709 + 5) = *(_OWORD *)&v1844[2];
                      *(_OWORD *)(v709 + 7) = *(_OWORD *)&v1844[4];
                      v710 = (std::__shared_weak_count *)v709[25];
                      v709[24] = 0;
                      v709[25] = 0;
                      v667 = v654 + 363;
                      if (v710)
                      {
                        v711 = (unint64_t *)&v710->__shared_owners_;
                        do
                          v712 = __ldaxr(v711);
                        while (__stlxr(v712 - 1, v711));
                        if (!v712)
                        {
                          ((void (*)(std::__shared_weak_count *, void **, int64_t))v710->__on_zero_shared)(v710, v673, v540);
                          std::__shared_weak_count::__release_weak(v710);
                        }
                      }
                      v713 = &v656[63 * v708];
                      *((_OWORD *)v713 + 13) = v1707;
                      *((_OWORD *)v713 + 18) = v1807[4];
                      *((_OWORD *)v713 + 19) = v1807[5];
                      *((_OWORD *)v713 + 20) = v1807[6];
                      v713[42] = *(void **)&v1807[7];
                      *((_OWORD *)v713 + 14) = v1807[0];
                      *((_OWORD *)v713 + 15) = v1807[1];
                      *((_OWORD *)v713 + 16) = v1807[2];
                      *((_OWORD *)v713 + 17) = v1807[3];
                      *(__n128 *)(v713 + 49) = v1839;
                      *(__n128 *)(v713 + 47) = v1838;
                      *(_OWORD *)(v713 + 45) = v1837;
                      *(_OWORD *)(v713 + 43) = v1836;
                      v713[57] = (void *)v1843.n128_u64[0];
                      *(_OWORD *)(v713 + 55) = v1842;
                      *(_OWORD *)(v713 + 53) = v1841;
                      *(_OWORD *)(v713 + 51) = v1840;
                      *((_BYTE *)v713 + 472) = (_BYTE)v1717;
                      v713[58] = v1715;
                      v714 = (std::__shared_weak_count *)v713[61];
                      v713[60] = 0;
                      v713[61] = 0;
                      if (v714)
                      {
                        v715 = (unint64_t *)&v714->__shared_owners_;
                        do
                          v716 = __ldaxr(v715);
                        while (__stlxr(v716 - 1, v715));
                        if (!v716)
                        {
                          ((void (*)(std::__shared_weak_count *, void **, int64_t))v714->__on_zero_shared)(v714, v673, v540);
                          std::__shared_weak_count::__release_weak(v714);
                        }
                      }
                      LOBYTE(v656[63 * v708 + 62]) = 0;
                    }
                    v1645 = (std::__shared_weak_count *)object[61];
                    if (object[61])
                    {
                      v1646 = (unint64_t *)((char *)object[61] + 8);
                      do
                        v1647 = __ldaxr(v1646);
                      while (__stlxr(v1647 - 1, v1646));
                      if (!v1647)
                      {
                        ((void (*)(std::__shared_weak_count *, void **, int64_t))v1645->__on_zero_shared)(v1645, v673, v540);
                        std::__shared_weak_count::__release_weak(v1645);
                      }
                    }
                  }
                  v1648 = (std::__shared_weak_count *)object[25];
                  if (object[25])
                  {
                    v1649 = (unint64_t *)((char *)object[25] + 8);
                    do
                      v1650 = __ldaxr(v1649);
                    while (__stlxr(v1650 - 1, v1649));
                    if (!v1650)
                    {
                      ((void (*)(std::__shared_weak_count *, void **, int64_t))v1648->__on_zero_shared)(v1648, v673, v540);
                      std::__shared_weak_count::__release_weak(v1648);
                    }
                  }
                  v667->i8[2] = 0;
                  v667->i8[0] = 0;
                  v654[362] = vaddq_s64(v654[362], (int64x2_t)xmmword_2103B4900);
                  v1651 = *(std::__shared_weak_count **)&oslog[480];
                  if (*(_QWORD *)&oslog[480])
                  {
                    v1652 = (unint64_t *)(*(_QWORD *)&oslog[480] + 8);
                    do
                      v1653 = __ldaxr(v1652);
                    while (__stlxr(v1653 - 1, v1652));
                    if (!v1653)
                    {
                      ((void (*)(std::__shared_weak_count *, void **, int64_t))v1651->__on_zero_shared)(v1651, v673, v540);
                      std::__shared_weak_count::__release_weak(v1651);
                    }
                  }
                  v748 = 0;
                  v749 = *(std::__shared_weak_count **)&oslog[192];
                  if (!*(_QWORD *)&oslog[192])
                  {
LABEL_897:
                    v752 = (std::__shared_weak_count *)*((_QWORD *)&v1833 + 1);
                    if (!*((_QWORD *)&v1833 + 1))
                      goto LABEL_901;
                    v753 = (unint64_t *)(*((_QWORD *)&v1833 + 1) + 8);
                    do
                      v754 = __ldaxr(v753);
                    while (__stlxr(v754 - 1, v753));
                    if (!v754)
                    {
                      ((void (*)(std::__shared_weak_count *))v752->__on_zero_shared)(v752);
                      std::__shared_weak_count::__release_weak(v752);
                      if ((v748 & 1) != 0)
                      {
LABEL_903:
                        if (v1720)
                        {
                          v755 = &v1720->__shared_owners_;
                          do
                            v756 = __ldaxr((unint64_t *)v755);
                          while (__stlxr(v756 - 1, (unint64_t *)v755));
                          if (!v756)
                          {
                            ((void (*)(std::__shared_weak_count *))v1720->__on_zero_shared)(v1720);
                            std::__shared_weak_count::__release_weak(v1720);
                          }
                        }
                        v757 = *(std::__shared_weak_count **)&v1796[192];
                        if (*(_QWORD *)&v1796[192])
                        {
                          v758 = (unint64_t *)(*(_QWORD *)&v1796[192] + 8);
                          do
                            v759 = __ldaxr(v758);
                          while (__stlxr(v759 - 1, v758));
                          if (!v759)
                          {
                            ((void (*)(std::__shared_weak_count *))v757->__on_zero_shared)(v757);
                            std::__shared_weak_count::__release_weak(v757);
                          }
                        }
                        v760 = (std::__shared_weak_count *)*((_QWORD *)&v1830 + 1);
                        if (*((_QWORD *)&v1830 + 1))
                        {
                          v761 = (unint64_t *)(*((_QWORD *)&v1830 + 1) + 8);
                          do
                            v762 = __ldaxr(v761);
                          while (__stlxr(v762 - 1, v761));
                          if (!v762)
                          {
                            ((void (*)(std::__shared_weak_count *))v760->__on_zero_shared)(v760);
                            std::__shared_weak_count::__release_weak(v760);
                          }
                        }
                        v535 = v1670;
                        goto LABEL_919;
                      }
                    }
                    else
                    {
LABEL_901:
                      if ((v748 & 1) != 0)
                        goto LABEL_903;
                    }
                    v654[411].i8[12] = 0;
                    v654[411].i32[2] = 0;
                    goto LABEL_903;
                  }
                }
                else
                {
                  --*(_DWORD *)(v674 + 8);
                  --*(_DWORD *)(v682 + 8);
                  *(_QWORD *)&oslog[208] = 0;
                  *(_QWORD *)&oslog[200] = 0;
                  v748 = 1;
                  v749 = *(std::__shared_weak_count **)&oslog[192];
                  if (!*(_QWORD *)&oslog[192])
                    goto LABEL_897;
                }
LABEL_893:
                v750 = (unint64_t *)&v749->__shared_owners_;
                do
                  v751 = __ldaxr(v750);
                while (__stlxr(v751 - 1, v750));
                if (!v751)
                {
                  ((void (*)(std::__shared_weak_count *))v749->__on_zero_shared)(v749);
                  std::__shared_weak_count::__release_weak(v749);
                }
                goto LABEL_897;
              }
              if (v674)
                --*(_DWORD *)(v674 + 8);
            }
          }
          v748 = 1;
          v749 = *(std::__shared_weak_count **)&oslog[192];
          if (!*(_QWORD *)&oslog[192])
            goto LABEL_897;
          goto LABEL_893;
        }
LABEL_817:
        if (!v645)
          goto LABEL_819;
        goto LABEL_818;
      }
      ((void (*)(std::__shared_weak_count *))v642->__on_zero_shared)(v642);
      std::__shared_weak_count::__release_weak(v642);
      if ((v638 & 1) == 0)
        goto LABEL_813;
LABEL_810:
      v645 = 1;
      v646 = (std::__shared_weak_count *)*((_QWORD *)&v1730 + 1);
      if (!*((_QWORD *)&v1730 + 1))
        goto LABEL_817;
      goto LABEL_814;
    }
LABEL_801:
    v640 = (unint64_t *)&v639->__shared_owners_;
    do
      v641 = __ldaxr(v640);
    while (__stlxr(v641 - 1, v640));
    if (!v641)
    {
      ((void (*)(std::__shared_weak_count *))v639->__on_zero_shared)(v639);
      std::__shared_weak_count::__release_weak(v639);
    }
    goto LABEL_805;
  }
LABEL_919:
  if (v1667 && *(_BYTE *)(v535 + 6))
  {
    v1718 = 0;
    v1717 = 0;
    v1716 = &v1717;
    v763 = *(uint64_t **)(v1666 + 16);
    if (v763)
    {
      v1708 = 0;
      v1679 = *(void **)(MEMORY[0x24BEDB7F0] + 16);
      v1678 = *(void **)(MEMORY[0x24BEDB7F0] + 24);
      v1676 = *(void **)(MEMORY[0x24BEDB7F0] + 32);
      v1675 = *(void **)(MEMORY[0x24BEDB7F0] + 40);
      v1673 = *(void **)(MEMORY[0x24BEDB7F0] + 48);
      v1671 = *(void **)(MEMORY[0x24BEDB7F0] + 8);
      v1664 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
      v1665 = (void *)*MEMORY[0x24BEDB7F0];
      v1663 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
      v1668 = (void *)(MEMORY[0x24BEDB848] + 16);
      while (1)
      {
        v764 = v763[6];
        v1694 = v763[7];
        if (v764 != v1694)
          break;
LABEL_923:
        v763 = (uint64_t *)*v763;
        if (!v763)
        {
          v1125 = v1717;
          goto LABEL_1399;
        }
      }
      v1688 = v763;
      while (1)
      {
        v765 = *((unsigned int *)v763 + 6);
        v766 = *(unsigned int *)(v764 + 24);
        v767 = &v1717;
        v768 = &v1717;
        v769 = v1717;
        if (v1717)
        {
          v770 = v1717;
          while (1)
          {
            v771 = HIDWORD(v770[1].__vftable);
            if (v765 == v771)
            {
              shared_owners_low = LODWORD(v770[1].__shared_owners_);
              if (v766 >= shared_owners_low)
              {
                _CF = shared_owners_low >= v766;
                v773 = shared_owners_low == v766;
                v774 = -1;
                if (_CF)
                  v774 = 1;
                if (v773)
                  v774 = 0;
LABEL_932:
                if ((v774 & 0x80) == 0)
                  goto LABEL_929;
                v770 = (std::__shared_weak_count *)((char *)v770 + 8);
              }
            }
            else if (v765 >= v771)
            {
              _CF = v771 >= v765;
              v774 = -1;
              if (_CF)
                v774 = 1;
              goto LABEL_932;
            }
            v770 = (std::__shared_weak_count *)v770->__vftable;
            if (!v770)
            {
              v775 = v1717;
              while (1)
              {
                while (1)
                {
                  v767 = (std::__shared_weak_count **)v775;
                  v776 = HIDWORD(v775[1].__vftable);
                  if (v765 == v776)
                    break;
                  if (v765 >= v776)
                  {
                    _CF = v776 >= v765;
                    v780 = -1;
                    if (_CF)
                      v780 = 1;
                    if ((v780 & 0x80) == 0)
                      goto LABEL_990;
                    goto LABEL_963;
                  }
LABEL_948:
                  v775 = *v767;
                  v768 = v767;
                  if (!*v767)
                    goto LABEL_965;
                }
                v777 = *((unsigned int *)v767 + 8);
                if (v766 < v777)
                  goto LABEL_948;
                _CF = v777 >= v766;
                v778 = v777 == v766;
                v779 = -1;
                if (_CF)
                  v779 = 1;
                if (v778)
                  v779 = 0;
                if ((v779 & 0x80) == 0)
                  goto LABEL_990;
LABEL_963:
                v775 = v767[1];
                if (!v775)
                {
                  v768 = v767 + 1;
                  goto LABEL_965;
                }
              }
            }
          }
        }
LABEL_965:
        v781 = (std::__shared_weak_count *)operator new(0x28uLL);
        *(std::__shared_weak_count_vtbl **)((char *)&v781[1].__vftable + 4) = (std::__shared_weak_count_vtbl *)(v765 | (v766 << 32));
        v781->__vftable = 0;
        v781->__shared_owners_ = 0;
        v781->__shared_weak_owners_ = (uint64_t)v767;
        *v768 = v781;
        if (*v1716)
        {
          v1716 = (std::__shared_weak_count **)*v1716;
          v781 = *v768;
        }
        v782 = v1717;
        _ZF = v781 == v1717;
        LOBYTE(v781[1].__vftable) = v781 == v1717;
        if (!_ZF)
        {
          do
          {
            shared_weak_owners = v781->__shared_weak_owners_;
            if (*(_BYTE *)(shared_weak_owners + 24))
              break;
            v784 = *(std::__shared_weak_count **)(shared_weak_owners + 16);
            v785 = v784->__vftable;
            if (v784->__vftable == (std::__shared_weak_count_vtbl *)shared_weak_owners)
            {
              shared_owners = v784->__shared_owners_;
              if (!shared_owners
                || (v789 = *(unsigned __int8 *)(shared_owners + 24), p_get_deleter = (_BYTE *)(shared_owners + 24), v789))
              {
                if (*(std::__shared_weak_count **)shared_weak_owners == v781)
                {
                  *(_BYTE *)(shared_weak_owners + 24) = 1;
                  LOBYTE(v784[1].__vftable) = 0;
                  v792 = *(std::__shared_weak_count_vtbl **)(shared_weak_owners + 8);
                  v784->__vftable = v792;
                  if (v792)
                    goto LABEL_982;
                }
                else
                {
                  v790 = *(uint64_t **)(shared_weak_owners + 8);
                  v791 = *v790;
                  *(_QWORD *)(shared_weak_owners + 8) = *v790;
                  if (v791)
                  {
                    *(_QWORD *)(v791 + 16) = shared_weak_owners;
                    v784 = *(std::__shared_weak_count **)(shared_weak_owners + 16);
                  }
                  v790[2] = (uint64_t)v784;
                  *(_QWORD *)(*(_QWORD *)(shared_weak_owners + 16)
                            + 8 * (**(_QWORD **)(shared_weak_owners + 16) != shared_weak_owners)) = v790;
                  *v790 = shared_weak_owners;
                  *(_QWORD *)(shared_weak_owners + 16) = v790;
                  v784 = (std::__shared_weak_count *)v790[2];
                  shared_weak_owners = (uint64_t)v784->__vftable;
                  *((_BYTE *)v790 + 24) = 1;
                  LOBYTE(v784[1].__vftable) = 0;
                  v792 = *(std::__shared_weak_count_vtbl **)(shared_weak_owners + 8);
                  v784->__vftable = v792;
                  if (v792)
LABEL_982:
                    v792->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v784;
                }
                *(_QWORD *)(shared_weak_owners + 16) = v784->__shared_weak_owners_;
                *(_QWORD *)(v784->__shared_weak_owners_ + 8 * (*(_QWORD *)v784->__shared_weak_owners_ != (_QWORD)v784)) = shared_weak_owners;
                *(_QWORD *)(shared_weak_owners + 8) = v784;
LABEL_988:
                v784->__shared_weak_owners_ = shared_weak_owners;
                break;
              }
            }
            else if (!v785
                   || (get_deleter_low = LOBYTE(v785->__get_deleter),
                       p_get_deleter = &v785->__get_deleter,
                       get_deleter_low))
            {
              if (*(std::__shared_weak_count **)shared_weak_owners == v781)
              {
                v959 = v781->__shared_owners_;
                *(_QWORD *)shared_weak_owners = v959;
                if (v959)
                {
                  *(_QWORD *)(v959 + 16) = shared_weak_owners;
                  v784 = *(std::__shared_weak_count **)(shared_weak_owners + 16);
                }
                v781->__shared_weak_owners_ = (uint64_t)v784;
                *(_QWORD *)(*(_QWORD *)(shared_weak_owners + 16)
                          + 8 * (**(_QWORD **)(shared_weak_owners + 16) != shared_weak_owners)) = v781;
                v781->__shared_owners_ = shared_weak_owners;
                *(_QWORD *)(shared_weak_owners + 16) = v781;
                v784 = (std::__shared_weak_count *)v781->__shared_weak_owners_;
                LOBYTE(v781[1].__vftable) = 1;
                LOBYTE(v784[1].__vftable) = 0;
                shared_weak_owners = v784->__shared_owners_;
                v793 = *(std::__shared_weak_count **)shared_weak_owners;
                v784->__shared_owners_ = *(_QWORD *)shared_weak_owners;
                if (v793)
LABEL_986:
                  v793->__shared_weak_owners_ = (uint64_t)v784;
              }
              else
              {
                *(_BYTE *)(shared_weak_owners + 24) = 1;
                LOBYTE(v784[1].__vftable) = 0;
                shared_weak_owners = v784->__shared_owners_;
                v793 = *(std::__shared_weak_count **)shared_weak_owners;
                v784->__shared_owners_ = *(_QWORD *)shared_weak_owners;
                if (v793)
                  goto LABEL_986;
              }
              *(_QWORD *)(shared_weak_owners + 16) = v784->__shared_weak_owners_;
              *(_QWORD *)(v784->__shared_weak_owners_ + 8 * (*(_QWORD *)v784->__shared_weak_owners_ != (_QWORD)v784)) = shared_weak_owners;
              *(_QWORD *)shared_weak_owners = v784;
              goto LABEL_988;
            }
            *(_BYTE *)(shared_weak_owners + 24) = 1;
            v781 = v784;
            LOBYTE(v784[1].__vftable) = v784 == v782;
            *p_get_deleter = 1;
          }
          while (v784 != v782);
        }
        v769 = v1717;
        ++v1718;
        v766 = *(unsigned int *)(v764 + 24);
        v765 = *((unsigned int *)v763 + 6);
LABEL_990:
        v794 = &v1717;
LABEL_992:
        v795 = v794;
        if (v769)
        {
          do
          {
            v794 = (std::__shared_weak_count **)v769;
            v796 = HIDWORD(v769[1].__vftable);
            if (v766 == v796)
            {
              v797 = *((unsigned int *)v794 + 8);
              if (v765 < v797)
                goto LABEL_991;
              _CF = v797 >= v765;
              v798 = v797 == v765;
              v799 = -1;
              if (_CF)
                v799 = 1;
              if (v798)
                v799 = 0;
              if ((v799 & 0x80) == 0)
                goto LABEL_1034;
            }
            else
            {
              if (v766 < v796)
              {
LABEL_991:
                v769 = *v794;
                goto LABEL_992;
              }
              _CF = v796 >= v766;
              v800 = -1;
              if (_CF)
                v800 = 1;
              if ((v800 & 0x80) == 0)
                goto LABEL_1034;
            }
            v769 = v794[1];
          }
          while (v769);
          v795 = v794 + 1;
        }
        v801 = (std::__shared_weak_count *)operator new(0x28uLL);
        *(std::__shared_weak_count_vtbl **)((char *)&v801[1].__vftable + 4) = (std::__shared_weak_count_vtbl *)(v766 | (v765 << 32));
        v801->__vftable = 0;
        v801->__shared_owners_ = 0;
        v801->__shared_weak_owners_ = (uint64_t)v794;
        *v795 = v801;
        if (*v1716)
        {
          v1716 = (std::__shared_weak_count **)*v1716;
          v801 = *v795;
        }
        v802 = v1717;
        _ZF = v801 == v1717;
        LOBYTE(v801[1].__vftable) = v801 == v1717;
        if (!_ZF)
        {
          do
          {
            v803 = v801->__shared_weak_owners_;
            if (*(_BYTE *)(v803 + 24))
              break;
            v804 = *(std::__shared_weak_count **)(v803 + 16);
            v805 = v804->__vftable;
            if (v804->__vftable == (std::__shared_weak_count_vtbl *)v803)
            {
              v808 = v804->__shared_owners_;
              if (!v808 || (v809 = *(unsigned __int8 *)(v808 + 24), v806 = (_BYTE *)(v808 + 24), v809))
              {
                if (*(std::__shared_weak_count **)v803 == v801)
                {
                  *(_BYTE *)(v803 + 24) = 1;
                  LOBYTE(v804[1].__vftable) = 0;
                  v812 = *(std::__shared_weak_count_vtbl **)(v803 + 8);
                  v804->__vftable = v812;
                  if (v812)
                    goto LABEL_1026;
                }
                else
                {
                  v810 = *(uint64_t **)(v803 + 8);
                  v811 = *v810;
                  *(_QWORD *)(v803 + 8) = *v810;
                  if (v811)
                  {
                    *(_QWORD *)(v811 + 16) = v803;
                    v804 = *(std::__shared_weak_count **)(v803 + 16);
                  }
                  v810[2] = (uint64_t)v804;
                  *(_QWORD *)(*(_QWORD *)(v803 + 16) + 8 * (**(_QWORD **)(v803 + 16) != v803)) = v810;
                  *v810 = v803;
                  *(_QWORD *)(v803 + 16) = v810;
                  v804 = (std::__shared_weak_count *)v810[2];
                  v803 = (uint64_t)v804->__vftable;
                  *((_BYTE *)v810 + 24) = 1;
                  LOBYTE(v804[1].__vftable) = 0;
                  v812 = *(std::__shared_weak_count_vtbl **)(v803 + 8);
                  v804->__vftable = v812;
                  if (v812)
LABEL_1026:
                    v812->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v804;
                }
                *(_QWORD *)(v803 + 16) = v804->__shared_weak_owners_;
                *(_QWORD *)(v804->__shared_weak_owners_ + 8 * (*(_QWORD *)v804->__shared_weak_owners_ != (_QWORD)v804)) = v803;
                *(_QWORD *)(v803 + 8) = v804;
LABEL_1032:
                v804->__shared_weak_owners_ = v803;
                break;
              }
            }
            else if (!v805 || (v807 = LOBYTE(v805->__get_deleter), v806 = &v805->__get_deleter, v807))
            {
              if (*(std::__shared_weak_count **)v803 == v801)
              {
                v1057 = v801->__shared_owners_;
                *(_QWORD *)v803 = v1057;
                if (v1057)
                {
                  *(_QWORD *)(v1057 + 16) = v803;
                  v804 = *(std::__shared_weak_count **)(v803 + 16);
                }
                v801->__shared_weak_owners_ = (uint64_t)v804;
                *(_QWORD *)(*(_QWORD *)(v803 + 16) + 8 * (**(_QWORD **)(v803 + 16) != v803)) = v801;
                v801->__shared_owners_ = v803;
                *(_QWORD *)(v803 + 16) = v801;
                v804 = (std::__shared_weak_count *)v801->__shared_weak_owners_;
                LOBYTE(v801[1].__vftable) = 1;
                LOBYTE(v804[1].__vftable) = 0;
                v803 = v804->__shared_owners_;
                v813 = *(std::__shared_weak_count **)v803;
                v804->__shared_owners_ = *(_QWORD *)v803;
                if (v813)
LABEL_1030:
                  v813->__shared_weak_owners_ = (uint64_t)v804;
              }
              else
              {
                *(_BYTE *)(v803 + 24) = 1;
                LOBYTE(v804[1].__vftable) = 0;
                v803 = v804->__shared_owners_;
                v813 = *(std::__shared_weak_count **)v803;
                v804->__shared_owners_ = *(_QWORD *)v803;
                if (v813)
                  goto LABEL_1030;
              }
              *(_QWORD *)(v803 + 16) = v804->__shared_weak_owners_;
              *(_QWORD *)(v804->__shared_weak_owners_ + 8 * (*(_QWORD *)v804->__shared_weak_owners_ != (_QWORD)v804)) = v803;
              *(_QWORD *)v803 = v804;
              goto LABEL_1032;
            }
            *(_BYTE *)(v803 + 24) = 1;
            v801 = v804;
            LOBYTE(v804[1].__vftable) = v804 == v802;
            *v806 = 1;
          }
          while (v804 != v802);
        }
        ++v1718;
LABEL_1034:
        if (!*(_BYTE *)(v764 + 160)
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/MapOptimizationUtil.cpp", 258, (uint64_t)"edge.T_source_to_neighbor", 25, (uint64_t)"Edge transfomation not exist", 28, (void (*)(void **))sub_21023DDB0)|| !*(_BYTE *)(v764 + 456)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/MapOptimizationUtil.cpp", 260, (uint64_t)"edge.JtJ_source_to_neighbor", 27, (uint64_t)"Edge transfomation not exist", 28, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if (!*(_BYTE *)(v764 + 160) || !*(_BYTE *)(v764 + 456))
          sub_20E866B34();
        v814 = v763[3];
        v815 = *(_QWORD *)(v764 + 24);
        memcpy(v1807, (const void *)(v764 + 168), sizeof(v1807));
        v816 = *(_OWORD *)(v764 + 112);
        v1803 = *(_OWORD *)(v764 + 96);
        v1804 = v816;
        v817 = *(__n128 *)(v764 + 144);
        v1805 = *(_OWORD *)(v764 + 128);
        v1806 = v817;
        v818 = *(_OWORD *)(v764 + 48);
        v1799 = *(_OWORD *)(v764 + 32);
        v1800 = v818;
        v838 = *(__n128 *)(v764 + 64);
        v839 = *(__n128 *)(v764 + 80);
        v1801 = v838;
        v1802 = v839;
        v819 = *(double *)(v764 + 168);
        v821 = *(double *)(v764 + 216);
        v820 = *(double *)(v764 + 224);
        v822 = *(double *)(v764 + 264);
        v823 = *(double *)(v764 + 272);
        v824 = *(double *)(v764 + 280);
        v825 = *(double *)(v764 + 312);
        v826 = *(double *)(v764 + 320);
        v828 = *(double *)(v764 + 328);
        v827 = *(double *)(v764 + 336);
        v830 = *(double *)(v764 + 360);
        v829 = *(double *)(v764 + 368);
        v832 = *(double *)(v764 + 376);
        v831.n128_u64[0] = *(_QWORD *)(v764 + 384);
        v833.n128_u64[0] = *(_QWORD *)(v764 + 392);
        v835.n128_u64[0] = *(_QWORD *)(v764 + 408);
        v834.n128_u64[0] = *(_QWORD *)(v764 + 416);
        v837.n128_u64[0] = *(_QWORD *)(v764 + 424);
        v836.n128_u64[0] = *(_QWORD *)(v764 + 432);
        v839.n128_u64[0] = *(_QWORD *)(v764 + 440);
        v838.n128_u64[0] = *(_QWORD *)(v764 + 448);
        v1725 = 0;
        v1724[2] = 0;
        v1727 = 0;
        v1726 = 0;
        v840 = *(_QWORD **)(v1723 + 5728);
        v1714 = (int64x2_t *)v1723;
        v841 = *(_QWORD **)(v1723 + 5736);
        if (v840 == v841)
        {
          v842 = *(_QWORD **)(v1723 + 5728);
        }
        else
        {
          v842 = *(_QWORD **)(v1723 + 5736);
          if (*(v841 - 111) >= (unint64_t)v1708)
          {
            v843 = 0xB195E8EFDB195E8FLL * (v841 - v840);
            v844 = *(_QWORD **)(v1723 + 5728);
            do
            {
              v845 = v843 >> 1;
              v846 = &v844[111 * (v843 >> 1)];
              v847 = *v846;
              v848 = v846 + 111;
              v843 += ~(v843 >> 1);
              if (v847 < v1708)
                v844 = v848;
              else
                v843 = v845;
            }
            while (v843);
            v842 = *(_QWORD **)(v1723 + 5736);
            if (v844 != v841)
            {
              v842 = v844;
              if (*v844 == v1708)
              {
LABEL_1096:
                v909 = 1;
                v910 = v1725;
                if (!v1725)
                  goto LABEL_1102;
                goto LABEL_1099;
              }
            }
          }
        }
        *(_QWORD *)oslog = v1708;
        memset(&oslog[24], 0, 40);
        *(_QWORD *)&oslog[16] = sqrt(v819);
        *(double *)&oslog[64] = v821 / *(double *)&oslog[16];
        memset(&oslog[80], 0, 32);
        *(_QWORD *)&oslog[72] = sqrt(v820 - *(double *)&oslog[64] * *(double *)&oslog[64]);
        *(double *)&oslog[112] = v822 / *(double *)&oslog[16];
        *(double *)&oslog[120] = (v823 - v821 / *(double *)&oslog[16] * (v822 / *(double *)&oslog[16]))
                               / *(double *)&oslog[72];
        *(_QWORD *)&oslog[128] = sqrt(v824- *(double *)&oslog[112] * *(double *)&oslog[112]- *(double *)&oslog[120] * *(double *)&oslog[120]);
        memset(&oslog[136], 0, 24);
        *(double *)&oslog[160] = v825 / *(double *)&oslog[16];
        *(double *)&oslog[168] = (v826 - v821 / *(double *)&oslog[16] * (v825 / *(double *)&oslog[16]))
                               / *(double *)&oslog[72];
        *(double *)&oslog[176] = (v828
                                - v822 / *(double *)&oslog[16] * (v825 / *(double *)&oslog[16])
                                - *(double *)&oslog[120] * *(double *)&oslog[168])
                               / *(double *)&oslog[128];
        *(_QWORD *)&oslog[184] = sqrt(v827- *(double *)&oslog[160] * *(double *)&oslog[160]- *(double *)&oslog[168] * *(double *)&oslog[168]- *(double *)&oslog[176] * *(double *)&oslog[176]);
        *(_QWORD *)&oslog[192] = 0;
        *(_QWORD *)&oslog[200] = 0;
        *(double *)&oslog[208] = v830 / *(double *)&oslog[16];
        *(double *)&oslog[216] = (v829 - v821 / *(double *)&oslog[16] * (v830 / *(double *)&oslog[16]))
                               / *(double *)&oslog[72];
        *(double *)&oslog[224] = (v832
                                - v822 / *(double *)&oslog[16] * (v830 / *(double *)&oslog[16])
                                - *(double *)&oslog[120] * *(double *)&oslog[216])
                               / *(double *)&oslog[128];
        *(double *)&oslog[232] = (v831.n128_f64[0]
                                - v825 / *(double *)&oslog[16] * (v830 / *(double *)&oslog[16])
                                - *(double *)&oslog[168] * *(double *)&oslog[216]
                                - *(double *)&oslog[176] * *(double *)&oslog[224])
                               / *(double *)&oslog[184];
        *(_QWORD *)&oslog[240] = sqrt(v833.n128_f64[0]- *(double *)&oslog[208] * *(double *)&oslog[208]- *(double *)&oslog[216] * *(double *)&oslog[216]- *(double *)&oslog[224] * *(double *)&oslog[224]- *(double *)&oslog[232] * *(double *)&oslog[232]);
        *(_QWORD *)&oslog[248] = 0;
        *(double *)&oslog[256] = v835.n128_f64[0] / *(double *)&oslog[16];
        *(double *)&oslog[264] = (v834.n128_f64[0]
                                - v821 / *(double *)&oslog[16] * (v835.n128_f64[0] / *(double *)&oslog[16]))
                               / *(double *)&oslog[72];
        *(double *)&oslog[272] = (v837.n128_f64[0]
                                - v822 / *(double *)&oslog[16] * (v835.n128_f64[0] / *(double *)&oslog[16])
                                - *(double *)&oslog[120] * *(double *)&oslog[264])
                               / *(double *)&oslog[128];
        *(double *)&oslog[280] = (v836.n128_f64[0]
                                - v825 / *(double *)&oslog[16] * (v835.n128_f64[0] / *(double *)&oslog[16])
                                - *(double *)&oslog[168] * *(double *)&oslog[264]
                                - *(double *)&oslog[176] * *(double *)&oslog[272])
                               / *(double *)&oslog[184];
        *(double *)&oslog[288] = (v839.n128_f64[0]
                                - v830 / *(double *)&oslog[16] * (v835.n128_f64[0] / *(double *)&oslog[16])
                                - *(double *)&oslog[216] * *(double *)&oslog[264]
                                - *(double *)&oslog[224] * *(double *)&oslog[272]
                                - *(double *)&oslog[232] * *(double *)&oslog[280])
                               / *(double *)&oslog[240];
        *(_QWORD *)&oslog[296] = sqrt(v838.n128_f64[0]- *(double *)&oslog[256] * *(double *)&oslog[256]- *(double *)&oslog[264] * *(double *)&oslog[264]- *(double *)&oslog[272] * *(double *)&oslog[272]- *(double *)&oslog[280] * *(double *)&oslog[280]- *(double *)&oslog[288] * *(double *)&oslog[288]);
        memcpy(&oslog[304], v1807, 0x120uLL);
        v1813 = v1803;
        v1814 = v1804;
        v1815 = v1805;
        v1816 = v1806;
        v1809 = v1799;
        v1810 = v1800;
        v838 = v1801;
        v839 = v1802;
        v1811 = v1801;
        v1812 = v1802;
        v849 = 1;
        v1817 = 1;
        v1818 = 0uLL;
        v1827 = 0;
        v1828 = 0;
        v1825 = 0xBFF0000000000000;
        v1826 = 0;
        v1829 = 0;
        v850 = (int64x2_t *)v1723;
        v851 = *(char **)(v1723 + 4840);
        v852 = *(char **)(v1723 + 4848);
        v853 = v852 - v851;
        if (v852 == v851)
          goto LABEL_1090;
        v854 = (int64x2_t *)(v1723 + 5808);
        v855 = v853 >> 4;
        v856 = *(char **)(v1723 + 4840);
        v857 = v853 >> 4;
        do
        {
          v858 = v857 >> 1;
          v859 = (unsigned int *)&v856[16 * (v857 >> 1)];
          v861 = *v859;
          v860 = (char *)(v859 + 4);
          v857 += ~(v857 >> 1);
          if (v861 < v814)
            v856 = v860;
          else
            v857 = v858;
        }
        while (v857);
        if (v856 == v852 || *(_DWORD *)v856 != (_DWORD)v814)
          goto LABEL_1089;
        v1660 = v840;
        v862 = *((_QWORD *)v856 + 1);
        *(_QWORD *)&v1818 = v862;
        ++*(_DWORD *)(*((_QWORD *)v856 + 1) + 8);
        do
        {
          v863 = v855 >> 1;
          v864 = (unsigned int *)&v851[16 * (v855 >> 1)];
          v866 = *v864;
          v865 = (char *)(v864 + 4);
          v855 += ~(v855 >> 1);
          if (v866 < v815)
            v851 = v865;
          else
            v855 = v863;
        }
        while (v855);
        if (v851 == v852 || *(_DWORD *)v851 != (_DWORD)v815)
        {
          if (v862)
            --*(_DWORD *)(v862 + 8);
          goto LABEL_1089;
        }
        v867 = *((_QWORD *)v851 + 1);
        *((_QWORD *)&v1818 + 1) = v867;
        ++*(_DWORD *)(*((_QWORD *)v851 + 1) + 8);
        if (!*(_BYTE *)(v862 + 20) && !*(_BYTE *)(v867 + 20))
        {
          --*(_DWORD *)(v862 + 8);
          --*(_DWORD *)(v867 + 8);
LABEL_1089:
          v849 = 1;
LABEL_1090:
          v906 = v1727;
          if (!v1727)
            goto LABEL_1095;
          goto LABEL_1091;
        }
        object[0] = (void *)v1708;
        *(_OWORD *)&object[1] = *(_OWORD *)oslog;
        memcpy(&object[3], &oslog[16], 0x120uLL);
        memcpy(&object[39], &oslog[304], 0x120uLL);
        v1736 = v1813;
        v1737 = v1814;
        v1738 = v1815;
        v1739 = v1816;
        v1732 = v1809;
        v1733 = v1810;
        v1734 = v1811;
        v1735 = v1812;
        v1740 = 1;
        v1741 = v1818;
        v1742 = v1819;
        v1743 = v1820;
        v1744 = v1821;
        v1745 = v1822;
        v1746 = v1823;
        v1747 = v1824;
        v1748 = v1825;
        v1749 = v1826;
        v1750 = 0uLL;
        v1827 = 0;
        v1828 = 0;
        v1751 = 0;
        if (v841 == v842 || *v842 != v1708)
          break;
LABEL_1383:
        v854->i8[2] = 0;
        v854->i8[0] = 0;
        v839 = (__n128)xmmword_2103B2300;
        v838 = (__n128)vaddq_s64(v850[362], (int64x2_t)xmmword_2103B2300);
        v850[362] = (int64x2_t)v838;
        v1122 = v1828;
        if (!v1828)
          goto LABEL_1387;
        v1123 = (unint64_t *)&v1828->__shared_owners_;
        do
          v1124 = __ldaxr(v1123);
        while (__stlxr(v1124 - 1, v1123));
        if (!v1124)
        {
          ((void (*)(std::__shared_weak_count *))v1122->__on_zero_shared)(v1122);
          std::__shared_weak_count::__release_weak(v1122);
          v849 = 0;
          v906 = v1727;
          if (!v1727)
            goto LABEL_1095;
        }
        else
        {
LABEL_1387:
          v849 = 0;
          v906 = v1727;
          if (!v1727)
            goto LABEL_1095;
        }
LABEL_1091:
        v907 = (unint64_t *)&v906->__shared_owners_;
        do
          v908 = __ldaxr(v907);
        while (__stlxr(v908 - 1, v907));
        if (!v908)
        {
          ((void (*)(std::__shared_weak_count *))v906->__on_zero_shared)(v906);
          std::__shared_weak_count::__release_weak(v906);
        }
LABEL_1095:
        if ((v849 & 1) != 0)
          goto LABEL_1096;
        v909 = 0;
        v850[411].i8[12] = 0;
        v850[411].i32[2] = 0;
        v910 = v1725;
        if (!v1725)
          goto LABEL_1102;
LABEL_1099:
        v911 = (unint64_t *)&v910->__shared_owners_;
        do
          v912 = __ldaxr(v911);
        while (__stlxr(v912 - 1, v911));
        if (v912)
        {
LABEL_1102:
          if (v909)
            goto LABEL_1103;
          goto LABEL_928;
        }
        ((void (*)(std::__shared_weak_count *, __n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128, double, double))v910->__on_zero_shared)(v910, v838, v839, v836, v837, v834, v835, v833, v831, *(double *)&v1654, v1655);
        std::__shared_weak_count::__release_weak(v910);
        if (v909)
        {
LABEL_1103:
          v913 = MEMORY[0x24BEDB858];
          v914 = (void *)(MEMORY[0x24BEDB858] + 104);
          object[16] = (void *)(MEMORY[0x24BEDB858] + 104);
          v915 = (void *)(MEMORY[0x24BEDB858] + 64);
          object[2] = (void *)(MEMORY[0x24BEDB858] + 64);
          object[0] = v1679;
          *(void **)((char *)object + *((_QWORD *)v1679 - 3)) = v1678;
          object[1] = 0;
          v916 = (std::ios_base *)((char *)object + *((_QWORD *)object[0] - 3));
          std::ios_base::init(v916, &object[3]);
          v916[1].__vftable = 0;
          v916[1].__fmtflags_ = -1;
          object[2] = v1676;
          *(void **)((char *)&object[2] + *((_QWORD *)v1676 - 3)) = v1675;
          object[0] = v1671;
          *(void **)((char *)object + *((_QWORD *)v1671 - 3)) = v1673;
          object[16] = v914;
          object[0] = (void *)(v913 + 24);
          object[2] = v915;
          std::streambuf::basic_streambuf();
          object[3] = v1668;
          memset(&object[11], 0, 32);
          LODWORD(object[15]) = 24;
          v917 = (char *)v1714[302].i64[1];
          v918 = (char *)v1714[303].i64[0];
          v919 = v917;
          if (v918 != v917)
          {
            v920 = (v918 - v917) >> 4;
            v919 = (char *)v1714[302].i64[1];
            do
            {
              v921 = v920 >> 1;
              v922 = (unsigned int *)&v919[16 * (v920 >> 1)];
              v924 = *v922;
              v923 = (char *)(v922 + 4);
              v920 += ~(v920 >> 1);
              if (v924 < v815)
                v919 = v923;
              else
                v920 = v921;
            }
            while (v920);
          }
          if (v919 == v918 || *(_DWORD *)v919 != (_DWORD)v815)
          {
            v930 = 1;
            v931 = v918 - v917;
            if (v918 == v917)
              goto LABEL_1158;
          }
          else
          {
            v925 = sub_20E86A980(&object[2], (uint64_t)"error: landmark variable ", 25);
            sub_20F622E88((uint64_t)v1796);
            if (v1796[23] >= 0)
              v926 = v1796;
            else
              v926 = *(_BYTE **)v1796;
            if (v1796[23] >= 0)
              v927 = v1796[23];
            else
              v927 = *(_QWORD *)&v1796[8];
            v928 = sub_20E86A980(v925, (uint64_t)v926, v927);
            sub_20E86A980(v928, (uint64_t)" with ID ", 9);
            v929 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v929, (uint64_t)" was not found.\n", 16);
            if ((v1796[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)v1796);
              v930 = 0;
              v917 = (char *)v1714[302].i64[1];
              v918 = (char *)v1714[303].i64[0];
              v931 = v918 - v917;
              if (v918 == v917)
                goto LABEL_1158;
            }
            else
            {
              v930 = 0;
              v917 = (char *)v1714[302].i64[1];
              v918 = (char *)v1714[303].i64[0];
              v931 = v918 - v917;
              if (v918 == v917)
                goto LABEL_1158;
            }
          }
          v932 = v931 >> 4;
          v933 = v917;
          v934 = v932;
          do
          {
            v935 = v934 >> 1;
            v936 = (unsigned int *)&v933[16 * (v934 >> 1)];
            v938 = *v936;
            v937 = (char *)(v936 + 4);
            v934 += ~(v934 >> 1);
            if (v938 < v814)
              v933 = v937;
            else
              v934 = v935;
          }
          while (v934);
          if (v933 == v918 || *(_DWORD *)v933 != (_DWORD)v814)
          {
LABEL_1158:
            v960 = sub_20E86A980(&object[2], (uint64_t)"error: variable ", 16);
            sub_20F622E88((uint64_t)v1796);
            if (v1796[23] >= 0)
              v961 = v1796;
            else
              v961 = *(_BYTE **)v1796;
            if (v1796[23] >= 0)
              v962 = v1796[23];
            else
              v962 = *(_QWORD *)&v1796[8];
            v963 = sub_20E86A980(v960, (uint64_t)v961, v962);
            sub_20E86A980(v963, (uint64_t)" with ID ", 9);
            v964 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v964, (uint64_t)" not found\n", 11);
            if ((v1796[23] & 0x80000000) != 0)
              operator delete(*(void **)v1796);
            v930 = 0;
            v954 = 0;
            v955 = (char *)v1714[302].i64[1];
            v956 = (char *)v1714[303].i64[0];
            v957 = v955;
            v958 = v956 - v955;
            if (v956 == v955)
              goto LABEL_1172;
          }
          else
          {
            do
            {
              v939 = v932 >> 1;
              v940 = (unsigned int *)&v917[16 * (v932 >> 1)];
              v942 = *v940;
              v941 = (char *)(v940 + 4);
              v932 += ~(v932 >> 1);
              if (v942 < v814)
                v917 = v941;
              else
                v932 = v939;
            }
            while (v932);
            if (v917 == v918 || *(_DWORD *)v917 != (_DWORD)v814)
              v917 = v918;
            v943 = *((_QWORD *)v917 + 1);
            v944 = sub_20E86A980(&object[2], (uint64_t)"debug: variable ", 16);
            sub_20F622E88((uint64_t)v1796);
            if (v1796[23] >= 0)
              v945 = v1796;
            else
              v945 = *(_BYTE **)v1796;
            if (v1796[23] >= 0)
              v946 = v1796[23];
            else
              v946 = *(_QWORD *)&v1796[8];
            v947 = sub_20E86A980(v944, (uint64_t)v945, v946);
            sub_20E86A980(v947, (uint64_t)" with ID ", 9);
            v948 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v948, (uint64_t)" found (", 8);
            v949 = (_QWORD *)std::ostream::operator<<();
            v950 = sub_20E86A980(v949, (uint64_t)", ", 2);
            if (*(_BYTE *)(v943 + 20))
              v951 = "free";
            else
              v951 = "fixed";
            if (*(_BYTE *)(v943 + 20))
              v952 = 4;
            else
              v952 = 5;
            v953 = sub_20E86A980(v950, (uint64_t)v951, v952);
            sub_20E86A980(v953, (uint64_t)")\n", 2);
            if ((v1796[23] & 0x80000000) != 0)
              operator delete(*(void **)v1796);
            v954 = *(unsigned __int8 *)(v943 + 20);
            v955 = (char *)v1714[302].i64[1];
            v956 = (char *)v1714[303].i64[0];
            v957 = v955;
            v958 = v956 - v955;
            if (v956 == v955)
            {
LABEL_1172:
              if (v957 != v956 && *(_DWORD *)v957 == (_DWORD)v815)
              {
                if (v956 != v955)
                {
                  v970 = (v956 - v955) >> 4;
                  do
                  {
                    v971 = v970 >> 1;
                    v972 = (unsigned int *)&v955[16 * (v970 >> 1)];
                    v974 = *v972;
                    v973 = (char *)(v972 + 4);
                    v970 += ~(v970 >> 1);
                    if (v974 < v815)
                      v955 = v973;
                    else
                      v970 = v971;
                  }
                  while (v970);
                }
                if (v955 == v956 || *(_DWORD *)v955 != (_DWORD)v815)
                  v955 = v956;
                v975 = *((_QWORD *)v955 + 1);
                v976 = sub_20E86A980(&object[2], (uint64_t)"debug: variable ", 16);
                sub_20F622E88((uint64_t)v1796);
                if (v1796[23] >= 0)
                  v977 = v1796;
                else
                  v977 = *(_BYTE **)v1796;
                if (v1796[23] >= 0)
                  v978 = v1796[23];
                else
                  v978 = *(_QWORD *)&v1796[8];
                v979 = sub_20E86A980(v976, (uint64_t)v977, v978);
                sub_20E86A980(v979, (uint64_t)" with ID ", 9);
                v980 = (_QWORD *)std::ostream::operator<<();
                sub_20E86A980(v980, (uint64_t)" found (", 8);
                v981 = (_QWORD *)std::ostream::operator<<();
                v982 = sub_20E86A980(v981, (uint64_t)", ", 2);
                if (*(_BYTE *)(v975 + 20))
                  v983 = "free";
                else
                  v983 = "fixed";
                if (*(_BYTE *)(v975 + 20))
                  v984 = 4;
                else
                  v984 = 5;
                v985 = sub_20E86A980(v982, (uint64_t)v983, v984);
                sub_20E86A980(v985, (uint64_t)")\n", 2);
                if ((v1796[23] & 0x80000000) != 0)
                  operator delete(*(void **)v1796);
                v954 |= *(unsigned __int8 *)(v975 + 20);
                v986 = (char *)v1714[358].i64[0];
                v987 = (char *)v1714[358].i64[1];
                v988 = v987 - v986;
                if (v987 == v986)
                  goto LABEL_1224;
LABEL_1208:
                v994 = 0xB195E8EFDB195E8FLL * (v988 >> 3);
                do
                {
                  v995 = v994 >> 1;
                  v996 = (unint64_t *)&v986[888 * (v994 >> 1)];
                  v997 = *v996;
                  v998 = (char *)(v996 + 111);
                  v994 += ~(v994 >> 1);
                  if (v997 < v1708)
                    v986 = v998;
                  else
                    v994 = v995;
                }
                while (v994);
                if (v987 != v986 && *(_QWORD *)v986 == v1708)
                {
                  v999 = sub_20E86A980(&object[2], (uint64_t)"error: factor ", 14);
                  sub_20F626DE0((uint64_t)v1796);
                  if (v1796[23] >= 0)
                    v1000 = v1796;
                  else
                    v1000 = *(_BYTE **)v1796;
                  if (v1796[23] >= 0)
                    v1001 = v1796[23];
                  else
                    v1001 = *(_QWORD *)&v1796[8];
                  v1002 = sub_20E86A980(v999, (uint64_t)v1000, v1001);
                  sub_20E86A980(v1002, (uint64_t)" with the same ID ", 18);
                  v1003 = (_QWORD *)std::ostream::operator<<();
                  sub_20E86A980(v1003, (uint64_t)" already exists.\n", 17);
                  if ((v1796[23] & 0x80000000) != 0)
                    operator delete(*(void **)v1796);
                  v930 = 0;
                }
                goto LABEL_1224;
              }
              v989 = sub_20E86A980(&object[2], (uint64_t)"error: variable ", 16);
              sub_20F622E88((uint64_t)v1796);
              if (v1796[23] >= 0)
                v990 = v1796;
              else
                v990 = *(_BYTE **)v1796;
              if (v1796[23] >= 0)
                v991 = v1796[23];
              else
                v991 = *(_QWORD *)&v1796[8];
              v992 = sub_20E86A980(v989, (uint64_t)v990, v991);
              sub_20E86A980(v992, (uint64_t)" with ID ", 9);
              v993 = (_QWORD *)std::ostream::operator<<();
              sub_20E86A980(v993, (uint64_t)" not found\n", 11);
              if ((v1796[23] & 0x80000000) != 0)
                operator delete(*(void **)v1796);
              v930 = 0;
              v986 = (char *)v1714[358].i64[0];
              v987 = (char *)v1714[358].i64[1];
              v988 = v987 - v986;
              if (v987 != v986)
                goto LABEL_1208;
LABEL_1224:
              if (v954)
              {
                v1004 = v930 != 0;
                v1005 = (char)object[15];
                if (((uint64_t)object[15] & 0x10) == 0)
                  goto LABEL_1226;
LABEL_1236:
                v1013 = object[14];
                v1014 = &object[8];
                if (object[14] < object[9])
                {
                  object[14] = object[9];
                  v1013 = object[9];
                  v1014 = &object[8];
                }
LABEL_1239:
                v1015 = *v1014;
                v1006 = v1013 - (_BYTE *)*v1014;
                if (v1006 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v1006 >= 0x17)
                {
                  v1016 = (v1006 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v1006 | 7) != 0x17)
                    v1016 = v1006 | 7;
                  v1017 = v1016 + 1;
                  v1007 = operator new(v1016 + 1);
                  *(_QWORD *)&v1796[16] = v1017 | 0x8000000000000000;
                  *(_QWORD *)v1796 = v1007;
                  *(_QWORD *)&v1796[8] = v1006;
                }
                else
                {
                  v1796[23] = (_BYTE)v1013 - *(_BYTE *)v1014;
                  v1007 = v1796;
                  if (!v1006)
                    goto LABEL_1247;
                }
                memmove(v1007, v1015, v1006);
                goto LABEL_1247;
              }
              v1008 = sub_20E86A980(&object[2], (uint64_t)"error: factor ", 14);
              sub_20F626DE0((uint64_t)v1796);
              if (v1796[23] >= 0)
                v1009 = v1796;
              else
                v1009 = *(_BYTE **)v1796;
              if (v1796[23] >= 0)
                v1010 = v1796[23];
              else
                v1010 = *(_QWORD *)&v1796[8];
              v1011 = sub_20E86A980(v1008, (uint64_t)v1009, v1010);
              sub_20E86A980(v1011, (uint64_t)" with ID ", 9);
              v1012 = (_QWORD *)std::ostream::operator<<();
              sub_20E86A980(v1012, (uint64_t)" cannot be added: all variables are fixed.\n", 43);
              if ((v1796[23] & 0x80000000) != 0)
              {
                operator delete(*(void **)v1796);
                v1004 = 0;
                v1005 = (char)object[15];
                if (((uint64_t)object[15] & 0x10) != 0)
                  goto LABEL_1236;
              }
              else
              {
                v1004 = 0;
                v1005 = (char)object[15];
                if (((uint64_t)object[15] & 0x10) != 0)
                  goto LABEL_1236;
              }
LABEL_1226:
              if ((v1005 & 8) != 0)
              {
                v1013 = object[7];
                v1014 = &object[5];
                goto LABEL_1239;
              }
              v1006 = 0;
              v1796[23] = 0;
              v1007 = v1796;
LABEL_1247:
              v1007[v1006] = 0;
              *(_OWORD *)oslog = *(_OWORD *)v1796;
              *(_QWORD *)&oslog[16] = *(_QWORD *)&v1796[16];
              oslog[24] = v1004;
              object[0] = v1665;
              *(void **)((char *)object + *((_QWORD *)v1665 - 3)) = v1664;
              object[2] = v1663;
              object[3] = (void *)(MEMORY[0x24BEDB848] + 16);
              if (SHIBYTE(object[13]) < 0)
                operator delete(object[11]);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x212BC6290](&object[16]);
              v1018 = oslog[23];
              if ((oslog[23] & 0x80000000) != 0)
              {
                v1021 = *(_QWORD *)&oslog[8];
                v1022 = (*(_QWORD *)&oslog[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if (v1022 - *(_QWORD *)&oslog[8] < 0x5B)
                {
                  v1019 = *(_QWORD *)&oslog[8] + 91;
                  if (0x7FFFFFFFFFFFFFF7 - (*(_QWORD *)&oslog[16] & 0x7FFFFFFFFFFFFFFFuLL) < *(_QWORD *)&oslog[8]
                                                                                              + 91
                                                                                              - v1022)
                    sub_20E860B7C();
                  v1020 = *(_BYTE **)oslog;
                  v1023 = 0x7FFFFFFFFFFFFFF7;
                  if (v1022 < 0x3FFFFFFFFFFFFFF3)
                  {
LABEL_1255:
                    v1024 = 2 * v1022;
                    if (v1019 > 2 * v1022)
                      v1024 = v1019;
                    if (v1024 >= 0x17)
                    {
                      v1029 = (v1024 & 0xFFFFFFFFFFFFFFF8) + 8;
                      v1030 = v1024 | 7;
                      if (v1030 == 23)
                        v1030 = v1029;
                      v1023 = v1030 + 1;
                    }
                    else
                    {
                      v1023 = 23;
                    }
                  }
                  v1031 = (char *)operator new(v1023);
                  v1032 = v1031;
                  qmemcpy(v1031, "Failed to add a factor into the linear system. This could be due to duplicate factor IDs ('", 91);
                  if (v1021)
                    memmove(v1031 + 91, v1020, v1021);
                  if (v1022 != 22)
                    operator delete(v1020);
                  *(_QWORD *)&oslog[16] = v1023 | 0x8000000000000000;
                  *(_QWORD *)oslog = v1032;
                  *(_QWORD *)&oslog[8] = v1019;
                  v1033 = &v1032[v1019];
                  goto LABEL_1281;
                }
                v1025 = *(char **)oslog;
                if (*(_QWORD *)&oslog[8])
                  goto LABEL_1260;
              }
              else
              {
                if (oslog[23] < 0x17u)
                {
                  v1019 = oslog[23] + 91;
                  v1020 = oslog;
                  v1021 = oslog[23];
                  v1022 = 22;
                  goto LABEL_1255;
                }
                v1025 = oslog;
                v1021 = oslog[23];
                if (oslog[23])
                {
LABEL_1260:
                  v1026 = &v1025[v1021] <= "Failed to add a factor into the linear system. This could be due to duplicate factor IDs ('"
                       || v1025 > "Failed to add a factor into the linear system. This could be due to duplicate factor IDs ('";
                  v1027 = 91;
                  if (v1026)
                    v1027 = 0;
                  v1028 = &aFailedToAddAFa[v1027];
                  memmove(v1025 + 91, v1025, v1021);
LABEL_1277:
                  *((_OWORD *)v1025 + 2) = *((_OWORD *)v1028 + 2);
                  *((_OWORD *)v1025 + 3) = *((_OWORD *)v1028 + 3);
                  *((_OWORD *)v1025 + 4) = *((_OWORD *)v1028 + 4);
                  *(_OWORD *)(v1025 + 75) = *(_OWORD *)(v1028 + 75);
                  *(_OWORD *)v1025 = *(_OWORD *)v1028;
                  *((_OWORD *)v1025 + 1) = *((_OWORD *)v1028 + 1);
                  v1034 = v1021 + 91;
                  if (v1018 < 0)
                    *(_QWORD *)&oslog[8] = v1021 + 91;
                  else
                    oslog[23] = v1034 & 0x7F;
                  v1033 = &v1025[v1034];
LABEL_1281:
                  *v1033 = 0;
                  *(_QWORD *)&v1837 = *(_QWORD *)&oslog[16];
                  v1836 = *(_OWORD *)oslog;
                  memset(oslog, 0, 24);
                  if (SBYTE7(v1837) < 0)
                  {
                    v1035 = *((_QWORD *)&v1836 + 1);
                    v1038 = (v1837 & 0x7FFFFFFFFFFFFFFFLL) - 1;
                    if (v1038 - *((_QWORD *)&v1836 + 1) >= 3)
                    {
                      v1041 = (__int128 *)v1836;
                      goto LABEL_1302;
                    }
                    v1036 = *((_QWORD *)&v1836 + 1) + 3;
                    if (0x7FFFFFFFFFFFFFF7 - ((unint64_t)v1837 & 0x7FFFFFFFFFFFFFFFLL) < *((_QWORD *)&v1836 + 1)
                                                                                                 + 3
                                                                                                 - v1038)
LABEL_1987:
                      sub_20E860B7C();
                    v1037 = (__int128 *)v1836;
                    v1039 = 0x7FFFFFFFFFFFFFF7;
                    if (v1038 < 0x3FFFFFFFFFFFFFF3)
                    {
LABEL_1288:
                      v1040 = 2 * v1038;
                      if (v1036 > 2 * v1038)
                        v1040 = v1036;
                      if (v1040 >= 0x17)
                      {
                        v1042 = (v1040 & 0xFFFFFFFFFFFFFFF8) + 8;
                        v1043 = v1040 | 7;
                        if (v1043 == 23)
                          v1043 = v1042;
                        v1039 = v1043 + 1;
                      }
                      else
                      {
                        v1039 = 23;
                      }
                    }
                    v1044 = (char *)operator new(v1039);
                    v1045 = v1044;
                    if (v1035)
                      memmove(v1044, v1037, v1035);
                    v1046 = &v1045[v1035];
                    v1046[2] = 46;
                    *(_WORD *)v1046 = 10535;
                    if (v1038 != 22)
                      operator delete(v1037);
                    *(_QWORD *)&v1837 = v1039 | 0x8000000000000000;
                    *(_QWORD *)&v1836 = v1045;
                    *((_QWORD *)&v1836 + 1) = v1036;
                    v1047 = &v1045[v1036];
                  }
                  else
                  {
                    v1035 = BYTE7(v1837);
                    if ((unint64_t)BYTE7(v1837) - 20 < 3)
                    {
                      if (BYTE7(v1837) <= 0x12u)
                        goto LABEL_1987;
                      v1036 = BYTE7(v1837) + 3;
                      v1037 = &v1836;
                      v1038 = 22;
                      goto LABEL_1288;
                    }
                    v1041 = &v1836;
LABEL_1302:
                    v1048 = (char *)v1041 + v1035;
                    v1048[2] = 46;
                    *(_WORD *)v1048 = 10535;
                    v1049 = v1035 + 3;
                    if (SBYTE7(v1837) < 0)
                      *((_QWORD *)&v1836 + 1) = v1035 + 3;
                    else
                      BYTE7(v1837) = v1049 & 0x7F;
                    v1047 = (char *)v1041 + v1049;
                  }
                  *v1047 = 0;
                  v1844[2] = (void *)v1837;
                  *(_OWORD *)v1844 = v1836;
                  *(_QWORD *)&v1837 = 0;
                  v1836 = 0uLL;
                  if (SHIBYTE(v1844[2]) >= 0)
                    v1050 = v1844;
                  else
                    v1050 = (void **)v1844[0];
                  if (SHIBYTE(v1844[2]) >= 0)
                    v1051 = HIBYTE(v1844[2]);
                  else
                    v1051 = (uint64_t)v1844[1];
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 232, (uint64_t)"ret.second", 10, (uint64_t)v1050, v1051, (void (*)(void **))sub_21023DDB0);
                  v1052 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v1052 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v1053 = qword_254A6DE40;
                    for (m = qword_254A6DE48; v1053 != m; v1053 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, void **, uint64_t))v1053)(*(_QWORD *)(v1053 + 8), "ret.second", 10, v1050, v1051);
                  }
                  v1055 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v1055 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v1056 = byte_254A6DE68;
                  if (byte_254A6DE68)
                    qword_254A6DE58(unk_254A6DE60, "ret.second", 10, v1050, v1051);
                  if (SHIBYTE(v1844[2]) < 0)
                  {
                    operator delete(v1844[0]);
                    if ((SBYTE7(v1837) & 0x80000000) == 0)
                      goto LABEL_1324;
LABEL_926:
                    operator delete((void *)v1836);
                    if ((oslog[23] & 0x80000000) != 0)
                      goto LABEL_1325;
                  }
                  else
                  {
                    if (SBYTE7(v1837) < 0)
                      goto LABEL_926;
LABEL_1324:
                    if ((oslog[23] & 0x80000000) != 0)
                    {
LABEL_1325:
                      operator delete(*(void **)oslog);
                      if (!v1056)
LABEL_1983:
                        abort();
                      goto LABEL_928;
                    }
                  }
                  if (!v1056)
                    goto LABEL_1983;
                  goto LABEL_928;
                }
              }
              v1028 = "Failed to add a factor into the linear system. This could be due to duplicate factor IDs ('";
              goto LABEL_1277;
            }
          }
          v965 = v958 >> 4;
          v957 = v955;
          do
          {
            v966 = v965 >> 1;
            v967 = (unsigned int *)&v957[16 * (v965 >> 1)];
            v969 = *v967;
            v968 = (char *)(v967 + 4);
            v965 += ~(v965 >> 1);
            if (v969 < v815)
              v957 = v968;
            else
              v965 = v966;
          }
          while (v965);
          goto LABEL_1172;
        }
LABEL_928:
        ++v1708;
        v763 = v1688;
LABEL_929:
        v764 += 472;
        if (v764 == v1694)
          goto LABEL_923;
      }
      v868 = (char *)v842 - (char *)v840;
      v869 = 0xB195E8EFDB195E8FLL * (v842 - v840);
      v870 = v1714[359].u64[0];
      if ((unint64_t)v841 < v870)
      {
        if (v842 == v841)
        {
          *v841 = v1708;
          v1062 = &v840[v842 - v840];
          *(_OWORD *)(v1062 + 1) = *(_OWORD *)&object[1];
          memcpy(v1062 + 3, &object[3], 0x120uLL);
          memcpy(v1062 + 39, &object[39], 0x120uLL);
          v1063 = v1732;
          v1064 = v1733;
          v1065 = v1735;
          *(__n128 *)(v1062 + 79) = v1734;
          *(__n128 *)(v1062 + 81) = v1065;
          *(_OWORD *)(v1062 + 75) = v1063;
          *(_OWORD *)(v1062 + 77) = v1064;
          v1066 = v1736;
          v1067 = v1737;
          v837 = v1739;
          *(_OWORD *)(v1062 + 87) = v1738;
          *(__n128 *)(v1062 + 89) = v837;
          *(_OWORD *)(v1062 + 83) = v1066;
          *(_OWORD *)(v1062 + 85) = v1067;
          *((_BYTE *)v1062 + 728) = 1;
          *((_OWORD *)v1062 + 46) = v1741;
          v1068 = v1744;
          v1069 = v1742;
          *((_OWORD *)v1062 + 48) = v1743;
          *((_OWORD *)v1062 + 49) = v1068;
          *((_OWORD *)v1062 + 47) = v1069;
          v1070 = v1745;
          v836 = v1747;
          *((_OWORD *)v1062 + 51) = v1746;
          *((__n128 *)v1062 + 52) = v836;
          *((_OWORD *)v1062 + 50) = v1070;
          v1071 = v1748;
          *((_BYTE *)v1062 + 856) = v1749;
          v1062[106] = v1071;
          *((_OWORD *)v1062 + 54) = 0u;
          v1750 = 0uLL;
          *((_BYTE *)v1062 + 880) = 0;
          v1714[358].i64[1] = (uint64_t)(v841 + 111);
          v854 = v1714 + 363;
        }
        else
        {
          v1657 = 0xB195E8EFDB195E8FLL * (v842 - v840);
          v1730 = *(_OWORD *)oslog;
          memcpy(v1796, &oslog[16], 0x120uLL);
          memcpy(v1844, &oslog[304], 0x120uLL);
          v1840 = v1813;
          v1841 = v1814;
          v1842 = v1815;
          v1843 = v1816;
          v1836 = v1809;
          v1837 = v1810;
          v1838 = v1811;
          v1839 = v1812;
          v1656 = v1741;
          v1834 = v1820;
          v1835 = v1821;
          v1832 = v1824;
          v1833 = v1819;
          v1830 = v1822;
          v1831 = v1823;
          v1729 = v1826;
          v1728 = v1825;
          v871 = v841 - 111;
          v872 = v841;
          v873 = v841 - 111;
          v1750 = 0uLL;
          if ((unint64_t)v841 >= 0x378)
          {
            do
            {
              *v872 = *v873;
              *(_OWORD *)(v872 + 1) = *(_OWORD *)(v873 + 1);
              memcpy(v872 + 3, v873 + 3, 0x120uLL);
              memcpy(v872 + 39, v873 + 39, 0x120uLL);
              v874 = *(_OWORD *)(v873 + 81);
              v876 = *(_OWORD *)(v873 + 75);
              v875 = *(_OWORD *)(v873 + 77);
              *(_OWORD *)(v872 + 79) = *(_OWORD *)(v873 + 79);
              *(_OWORD *)(v872 + 81) = v874;
              *(_OWORD *)(v872 + 75) = v876;
              *(_OWORD *)(v872 + 77) = v875;
              v877 = *(_OWORD *)(v873 + 89);
              v879 = *(_OWORD *)(v873 + 83);
              v878 = *(_OWORD *)(v873 + 85);
              *(_OWORD *)(v872 + 87) = *(_OWORD *)(v873 + 87);
              *(_OWORD *)(v872 + 89) = v877;
              *(_OWORD *)(v872 + 83) = v879;
              *(_OWORD *)(v872 + 85) = v878;
              *((_BYTE *)v872 + 728) = *((_BYTE *)v873 + 728);
              *((_OWORD *)v872 + 46) = *((_OWORD *)v873 + 46);
              v880 = *((_OWORD *)v873 + 49);
              v881 = *((_OWORD *)v873 + 47);
              *((_OWORD *)v872 + 48) = *((_OWORD *)v873 + 48);
              *((_OWORD *)v872 + 49) = v880;
              *((_OWORD *)v872 + 47) = v881;
              v882 = *((_OWORD *)v873 + 50);
              v883 = *((_OWORD *)v873 + 52);
              *((_OWORD *)v872 + 51) = *((_OWORD *)v873 + 51);
              *((_OWORD *)v872 + 52) = v883;
              *((_OWORD *)v872 + 50) = v882;
              v884 = v873[106];
              *((_BYTE *)v872 + 856) = *((_BYTE *)v873 + 856);
              v872[106] = v884;
              *((_OWORD *)v872 + 54) = *((_OWORD *)v873 + 54);
              *((_OWORD *)v873 + 54) = 0u;
              *((_BYTE *)v872 + 880) = *((_BYTE *)v873 + 880);
              v872 += 111;
              v873 += 111;
            }
            while (v873 < v841);
          }
          v1714[358].i64[1] = (uint64_t)v872;
          if (v841 != v842 + 111)
          {
            do
            {
              v889 = v871 - 111;
              v890 = v841 - 111;
              *v890 = *(v871 - 111);
              *(_OWORD *)(v890 + 1) = *((_OWORD *)v871 - 55);
              memcpy(v841 - 108, v871 - 108, 0x120uLL);
              memcpy(v841 - 72, v871 - 72, 0x120uLL);
              v891 = *((_OWORD *)v871 - 12);
              v892 = *((_OWORD *)v871 - 11);
              v893 = *((_OWORD *)v871 - 13);
              *((_OWORD *)v841 - 14) = *((_OWORD *)v871 - 14);
              *((_OWORD *)v841 - 13) = v893;
              v894 = *((_OWORD *)v871 - 18);
              v895 = *((_OWORD *)v871 - 17);
              v896 = *((_OWORD *)v871 - 15);
              *((_OWORD *)v841 - 16) = *((_OWORD *)v871 - 16);
              *((_OWORD *)v841 - 15) = v896;
              *((_OWORD *)v841 - 18) = v894;
              *((_OWORD *)v841 - 17) = v895;
              *((_OWORD *)v841 - 12) = v891;
              *((_OWORD *)v841 - 11) = v892;
              *((_BYTE *)v841 - 160) = *((_BYTE *)v871 - 160);
              *(v841 - 19) = *(v871 - 19);
              *(v841 - 18) = *(v871 - 18);
              v897 = *(_OWORD *)(v871 - 13);
              v898 = *(_OWORD *)(v871 - 15);
              *(_OWORD *)(v841 - 17) = *(_OWORD *)(v871 - 17);
              *(_OWORD *)(v841 - 15) = v898;
              *(_OWORD *)(v841 - 13) = v897;
              v899 = *(_OWORD *)(v871 - 11);
              v900 = *(_OWORD *)(v871 - 9);
              *(_OWORD *)(v841 - 7) = *(_OWORD *)(v871 - 7);
              *(_OWORD *)(v841 - 9) = v900;
              *(_OWORD *)(v841 - 11) = v899;
              v901 = *(v871 - 5);
              *((_BYTE *)v841 - 32) = *((_BYTE *)v871 - 32);
              *(v841 - 5) = v901;
              v902 = *(_OWORD *)(v871 - 3);
              *(v871 - 3) = 0;
              *(v871 - 2) = 0;
              v903 = (std::__shared_weak_count *)*(v841 - 2);
              *(_OWORD *)(v841 - 3) = v902;
              if (v903)
              {
                v904 = (unint64_t *)&v903->__shared_owners_;
                do
                  v905 = __ldaxr(v904);
                while (__stlxr(v905 - 1, v904));
                if (!v905)
                {
                  ((void (*)(std::__shared_weak_count *))v903->__on_zero_shared)(v903);
                  std::__shared_weak_count::__release_weak(v903);
                }
              }
              *((_BYTE *)v841 - 8) = *((_BYTE *)v871 - 8);
              v841 -= 111;
              v871 -= 111;
            }
            while (v889 != v842);
          }
          *v842 = v1708;
          v885 = &v1660[888 * v1657];
          *(_OWORD *)(v885 + 8) = v1730;
          memcpy(v885 + 24, v1796, 0x120uLL);
          memcpy(v885 + 312, v1844, 0x120uLL);
          *(_OWORD *)(v885 + 664) = v1840;
          *(_OWORD *)(v885 + 680) = v1841;
          *(_OWORD *)(v885 + 696) = v1842;
          *(__n128 *)(v885 + 712) = v1843;
          *(_OWORD *)(v885 + 600) = v1836;
          *(_OWORD *)(v885 + 616) = v1837;
          *(__n128 *)(v885 + 632) = v1838;
          *(__n128 *)(v885 + 648) = v1839;
          v885[728] = 1;
          *((_OWORD *)v885 + 46) = v1656;
          *((_OWORD *)v885 + 47) = v1833;
          *((_OWORD *)v885 + 48) = v1834;
          *((_OWORD *)v885 + 49) = v1835;
          *((_OWORD *)v885 + 50) = v1830;
          *((_OWORD *)v885 + 51) = v1831;
          *((__n128 *)v885 + 52) = v1832;
          *((_QWORD *)v885 + 106) = v1728;
          v885[856] = v1729;
          v886 = (std::__shared_weak_count *)*((_QWORD *)v885 + 109);
          *((_OWORD *)v885 + 54) = 0u;
          v854 = v1714 + 363;
          if (v886)
          {
            v887 = (unint64_t *)&v886->__shared_owners_;
            do
              v888 = __ldaxr(v887);
            while (__stlxr(v888 - 1, v887));
            if (!v888)
            {
              ((void (*)(std::__shared_weak_count *))v886->__on_zero_shared)(v886);
              std::__shared_weak_count::__release_weak(v886);
            }
          }
          v1660[888 * v1657 + 880] = 0;
          v850 = v1714;
        }
        goto LABEL_1378;
      }
      v1058 = 1 - 0x4E6A171024E6A171 * (v841 - v840);
      if (v1058 > 0x49CD42E2049CD4)
        sub_20E867F44();
      v1059 = 0xB195E8EFDB195E8FLL * ((uint64_t)(v870 - (_QWORD)v840) >> 3);
      if (2 * v1059 > v1058)
        v1058 = 2 * v1059;
      if (v1059 >= 0x24E6A171024E6ALL)
        v1060 = 0x49CD42E2049CD4;
      else
        v1060 = v1058;
      *(_QWORD *)&v1796[32] = v1714 + 359;
      if (v1060)
      {
        v1661 = (char *)((char *)v842 - (char *)v840);
        if (v1060 > 0x49CD42E2049CD4)
          sub_20E877A38();
        v1061 = (char *)operator new(888 * v1060);
        v868 = (uint64_t)v1661;
      }
      else
      {
        v1061 = 0;
      }
      v1072 = &v1061[888 * v869];
      *(_QWORD *)v1796 = v1061;
      *(_QWORD *)&v1796[8] = v1072;
      *(_QWORD *)&v1796[16] = v1072;
      *(_QWORD *)&v1796[24] = &v1061[888 * v1060];
      if (v869 == v1060)
      {
        if (v868 < 1)
        {
          if (v1660 == (_BYTE *)v842)
            v1074 = 1;
          else
            v1074 = 2 * v869;
          if (v1074 > 0x49CD42E2049CD4)
            sub_20E877A38();
          v1075 = (char *)operator new(888 * v1074);
          v1072 = &v1075[888 * (v1074 >> 2)];
          *(_QWORD *)v1796 = v1075;
          *(_QWORD *)&v1796[8] = v1072;
          *(_QWORD *)&v1796[24] = &v1075[888 * v1074];
          if (v1061)
          {
            v1076 = &v1075[888 * (v1074 >> 2)];
            operator delete(v1061);
            v1072 = v1076;
          }
        }
        else
        {
          v1073 = v869 + 2;
          if (v869 >= -1)
            v1073 = v869 + 1;
          v1072 -= 888 * (v1073 >> 1);
          *(_QWORD *)&v1796[8] = v1072;
        }
      }
      v1662 = v1072;
      *(_QWORD *)v1072 = v1708;
      v1077 = v1072 + 8;
      *(_OWORD *)(v1072 + 8) = *(_OWORD *)oslog;
      memcpy(v1072 + 24, &object[3], 0x120uLL);
      memcpy(v1662 + 312, &object[39], 0x120uLL);
      v1078 = (uint64_t)v1662;
      v1079 = v1737;
      v1077[41] = v1736;
      v1077[42] = v1079;
      v1080 = v1739;
      v1077[43] = v1738;
      v1077[44] = v1080;
      v1081 = v1733;
      v1077[37] = v1732;
      v1077[38] = v1081;
      v1082 = v1735;
      v1077[39] = v1734;
      v1077[40] = v1082;
      v1662[728] = v1740;
      *((_OWORD *)v1662 + 46) = v1741;
      v1083 = v1742;
      v1084 = v1744;
      *((_OWORD *)v1662 + 48) = v1743;
      *((_OWORD *)v1662 + 49) = v1084;
      *((_OWORD *)v1662 + 47) = v1083;
      v1085 = v1745;
      v836 = v1747;
      *((_OWORD *)v1662 + 51) = v1746;
      *((__n128 *)v1662 + 52) = v836;
      *((_OWORD *)v1662 + 50) = v1085;
      v1086 = v1748;
      v1662[856] = v1749;
      *((_QWORD *)v1662 + 106) = v1086;
      *((_OWORD *)v1662 + 54) = v1750;
      v1750 = 0uLL;
      v1662[880] = v1751;
      v1087 = (uint64_t)(v1662 + 888);
      *(_QWORD *)&v1796[16] = v1662 + 888;
      v1088 = (_QWORD *)v1714[358].i64[0];
      if (v1088 != v842)
      {
        v1089 = 0;
        do
        {
          v1090 = v1078 + v1089 * 8;
          v1091 = (char *)&v842[v1089];
          *(_QWORD *)(v1078 + v1089 * 8 - 888) = v842[v1089 - 111];
          *(_OWORD *)(v1078 + v1089 * 8 - 880) = *(_OWORD *)&v842[v1089 - 110];
          memcpy((void *)(v1078 + v1089 * 8 - 864), &v842[v1089 - 108], 0x120uLL);
          memcpy((void *)(v1090 - 576), &v842[v1089 - 72], 0x120uLL);
          v1078 = (uint64_t)v1662;
          v1092 = (_OWORD *)(v1090 - 288);
          v1093 = *(_OWORD *)&v842[v1089 - 30];
          v1095 = *(_OWORD *)&v842[v1089 - 36];
          v1094 = *(_OWORD *)&v842[v1089 - 34];
          *(_OWORD *)(v1090 - 256) = *(_OWORD *)&v842[v1089 - 32];
          *(_OWORD *)(v1090 - 240) = v1093;
          *v1092 = v1095;
          v1092[1] = v1094;
          v1096 = *(_OWORD *)&v842[v1089 - 22];
          v837 = *(__n128 *)&v842[v1089 - 28];
          v1097 = *(_OWORD *)&v842[v1089 - 26];
          *(_OWORD *)(v1090 - 192) = *(_OWORD *)&v842[v1089 - 24];
          *(_OWORD *)(v1090 - 176) = v1096;
          *(__n128 *)(v1090 - 224) = v837;
          *(_OWORD *)(v1090 - 208) = v1097;
          *(_BYTE *)(v1090 - 160) = v842[v1089 - 20];
          *(_OWORD *)(v1090 - 152) = *(_OWORD *)&v842[v1089 - 19];
          v1098 = *(_OWORD *)&v842[v1089 - 15];
          v1099 = *(_OWORD *)&v842[v1089 - 13];
          *(_OWORD *)(v1090 - 136) = *(_OWORD *)&v842[v1089 - 17];
          *(_OWORD *)(v1090 - 104) = v1099;
          *(_OWORD *)(v1090 - 120) = v1098;
          v1100 = *(_OWORD *)&v842[v1089 - 9];
          v1101 = *(_OWORD *)&v842[v1089 - 11];
          v836 = *(__n128 *)&v842[v1089 - 7];
          *(__n128 *)(v1090 - 56) = v836;
          *(_OWORD *)(v1090 - 88) = v1101;
          *(_OWORD *)(v1090 - 72) = v1100;
          v1102 = v842[v1089 - 5];
          *(_BYTE *)(v1090 - 32) = v842[v1089 - 4];
          *(_QWORD *)(v1090 - 40) = v1102;
          *(_OWORD *)(v1090 - 24) = *(_OWORD *)&v842[v1089 - 3];
          *((_QWORD *)v1091 - 3) = 0;
          *((_QWORD *)v1091 - 2) = 0;
          *(_BYTE *)(v1090 - 8) = v842[v1089 - 1];
          v1089 -= 111;
        }
        while (&v842[v1089] != v1088);
        v1078 = (uint64_t)&v1662[v1089 * 8];
        v850 = v1714;
      }
      v1103 = (_QWORD *)v850[358].i64[1];
      if (v1103 != v842)
      {
        v1104 = v1078;
        do
        {
          *(_QWORD *)v1087 = *v842;
          *(_OWORD *)(v1087 + 8) = *(_OWORD *)(v842 + 1);
          memcpy((void *)(v1087 + 24), v842 + 3, 0x120uLL);
          memcpy((void *)(v1087 + 312), v842 + 39, 0x120uLL);
          v1105 = *(_OWORD *)(v842 + 81);
          v1107 = *(_OWORD *)(v842 + 75);
          v1106 = *(_OWORD *)(v842 + 77);
          *(_OWORD *)(v1087 + 632) = *(_OWORD *)(v842 + 79);
          *(_OWORD *)(v1087 + 648) = v1105;
          *(_OWORD *)(v1087 + 600) = v1107;
          *(_OWORD *)(v1087 + 616) = v1106;
          v1108 = *(_OWORD *)(v842 + 89);
          v837 = *(__n128 *)(v842 + 83);
          v1109 = *(_OWORD *)(v842 + 85);
          *(_OWORD *)(v1087 + 696) = *(_OWORD *)(v842 + 87);
          *(_OWORD *)(v1087 + 712) = v1108;
          *(__n128 *)(v1087 + 664) = v837;
          *(_OWORD *)(v1087 + 680) = v1109;
          *(_BYTE *)(v1087 + 728) = *((_BYTE *)v842 + 728);
          *(_OWORD *)(v1087 + 736) = *((_OWORD *)v842 + 46);
          v1110 = *((_OWORD *)v842 + 49);
          v1111 = *((_OWORD *)v842 + 47);
          *(_OWORD *)(v1087 + 768) = *((_OWORD *)v842 + 48);
          *(_OWORD *)(v1087 + 784) = v1110;
          *(_OWORD *)(v1087 + 752) = v1111;
          v1112 = *((_OWORD *)v842 + 50);
          v836 = *((__n128 *)v842 + 52);
          *(_OWORD *)(v1087 + 816) = *((_OWORD *)v842 + 51);
          *(__n128 *)(v1087 + 832) = v836;
          *(_OWORD *)(v1087 + 800) = v1112;
          v1113 = v842[106];
          *(_BYTE *)(v1087 + 856) = *((_BYTE *)v842 + 856);
          *(_QWORD *)(v1087 + 848) = v1113;
          *(_OWORD *)(v1087 + 864) = *((_OWORD *)v842 + 54);
          *((_OWORD *)v842 + 54) = 0u;
          *(_BYTE *)(v1087 + 880) = *((_BYTE *)v842 + 880);
          v1087 += 888;
          v842 += 111;
        }
        while (v842 != v1103);
        v842 = (_QWORD *)v850[358].i64[1];
        v1078 = v1104;
      }
      v1114 = (_QWORD *)v850[358].i64[0];
      v850[358].i64[0] = v1078;
      v850[358].i64[1] = v1087;
      v1115 = v850[359].i64[0];
      v850[359].i64[0] = *(_QWORD *)&v1796[24];
      *(_QWORD *)&v1796[24] = v1115;
      *(_QWORD *)&v1796[8] = v1114;
      *(_QWORD *)v1796 = v1114;
      if (v842 == v1114)
      {
        v854 = v1714 + 363;
        if (!v842)
          goto LABEL_1378;
      }
      else
      {
        v854 = v1714 + 363;
        do
        {
          *(_QWORD *)&v1796[16] = v842 - 111;
          v1116 = (std::__shared_weak_count *)*(v842 - 2);
          if (v1116)
          {
            v1117 = (unint64_t *)&v1116->__shared_owners_;
            do
              v1118 = __ldaxr(v1117);
            while (__stlxr(v1118 - 1, v1117));
            if (!v1118)
            {
              ((void (*)(std::__shared_weak_count *))v1116->__on_zero_shared)(v1116);
              std::__shared_weak_count::__release_weak(v1116);
            }
          }
          v842 = *(_QWORD **)&v1796[16];
        }
        while (*(_QWORD **)&v1796[16] != v1114);
        v842 = *(_QWORD **)v1796;
        if (!*(_QWORD *)v1796)
          goto LABEL_1378;
      }
      operator delete(v842);
LABEL_1378:
      v1119 = (std::__shared_weak_count *)*((_QWORD *)&v1750 + 1);
      if (*((_QWORD *)&v1750 + 1))
      {
        v1120 = (unint64_t *)(*((_QWORD *)&v1750 + 1) + 8);
        do
          v1121 = __ldaxr(v1120);
        while (__stlxr(v1121 - 1, v1120));
        if (!v1121)
        {
          ((void (*)(std::__shared_weak_count *))v1119->__on_zero_shared)(v1119);
          std::__shared_weak_count::__release_weak(v1119);
        }
      }
      goto LABEL_1383;
    }
    v1125 = 0;
LABEL_1399:
    sub_20E9BCAA8(v1125);
  }
  v1126 = v1723;
  v1127 = v1723 + 24880;
  sub_20F626FF4(v1723 + 24880, (__int128 *)(v1723 + 528));
  v1128 = (uint64_t *)(v1126 + 24872);
  v1129 = *(_OWORD *)(v1126 + 1272);
  *(_OWORD *)(v1126 + 25640) = *(_OWORD *)(v1126 + 1256);
  *(_OWORD *)(v1126 + 25656) = v1129;
  *(_OWORD *)(v1126 + 25672) = *(_OWORD *)(v1126 + 1288);
  kdebug_trace();
  kdebug_trace();
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)(v1126 + 24872) + 16))(oslog, v1126 + 24872);
  v1130 = v1126 + 4712;
  (**(void (***)(_BYTE *__return_ptr, uint64_t))(v1126 + 4712))(v1796, v1126 + 4712);
  if ((oslog[23] & 0x80000000) != 0)
  {
    sub_20E860C04(object, *(void **)oslog, *(unint64_t *)&oslog[8]);
  }
  else
  {
    *(_OWORD *)object = *(_OWORD *)oslog;
    object[2] = *(void **)&oslog[16];
  }
  v1131 = v1796[23];
  if ((v1796[23] & 0x80000000) != 0)
  {
    sub_20E860C04(&object[3], *(void **)v1796, *(unint64_t *)&v1796[8]);
    v1131 = v1796[23];
  }
  else
  {
    *(_OWORD *)&object[3] = *(_OWORD *)v1796;
    object[5] = *(void **)&v1796[16];
  }
  object[6] = 0;
  LODWORD(object[7]) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&object[8] = _Q0;
  object[74] = &object[10];
  v1732 = xmmword_210378040;
  v1752 = &v1733;
  v1753 = 64;
  v1754 = 0u;
  v1756 = v1755;
  v1757 = 64;
  v1758 = 0;
  v1760 = 0;
  v1759 = 0;
  v1762 = v1761;
  v1763 = xmmword_210378040;
  if (v1131 < 0)
  {
    operator delete(*(void **)v1796);
    if ((oslog[23] & 0x80000000) == 0)
      goto LABEL_1408;
  }
  else if ((oslog[23] & 0x80000000) == 0)
  {
    goto LABEL_1408;
  }
  operator delete(*(void **)oslog);
LABEL_1408:
  sub_20F2C3BE8(object, 6uLL, 8uLL);
  *(_QWORD *)v1796 = v1126 + 4712;
  *(_QWORD *)&v1796[8] = object;
  v1133 = (*(double (**)(uint64_t))(*(_QWORD *)v1130 + 40))(v1126 + 4712);
  v1134 = *(_BYTE *)(v1126 + 6600);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v1126 + 24872) + 24))(v1126 + 24872))
  {
    *(_BYTE *)(v1126 + 6600) = 1;
    v1135 = (*(uint64_t (**)(uint64_t))(*v1128 + 40))(v1126 + 24872);
    v1136 = *v1128;
    if (v1135)
      (*(void (**)(uint64_t, double))(v1136 + 48))(v1126 + 24872, 0.0);
    else
      (*(void (**)(uint64_t))(v1136 + 56))(v1126 + 24872);
    (*(void (**)(uint64_t))(*v1128 + 32))(v1126 + 24872);
    (*(void (**)(uint64_t))(*(_QWORD *)v1130 + 104))(v1126 + 4712);
  }
  kdebug_trace();
  if (*(_BYTE *)(v1127 + 40))
  {
    v1137 = *(_QWORD *)(v1126 + 25464);
    if (!*(_BYTE *)(v1127 + 593))
    {
      if (v1137)
      {
        *(_QWORD *)oslog = *(_QWORD *)(v1126 + 25448);
        *(_DWORD *)&oslog[8] = 0;
        sub_20F71D5F8(v1126 + 4712, (double **)oslog, *(_BYTE *)(v1127 + 592));
      }
      else
      {
        sub_20F71CE5C(v1126 + 4712, (double *)(v1126 + 24928), *(_BYTE *)(v1127 + 592));
      }
      goto LABEL_1439;
    }
    if (v1137)
    {
      v1138 = *(unsigned __int8 *)(v1127 + 592);
      sub_20F7214F8(v1126 + 4712, (double *)oslog, *(double **)(v1126 + 25448));
      v1139 = 1.0;
      v1140 = *(double *)oslog;
      v1141 = 1.0;
      if (!v1138)
      {
        if (*(double *)oslog <= 0.0)
        {
          v1141 = 1.0e20;
          v1139 = 1.0e-10;
        }
        else
        {
          v1139 = *(double *)oslog;
          v1141 = 1.0 / (*(double *)oslog * *(double *)oslog);
        }
      }
      *(double *)(v1126 + 4720) = v1139;
      *(double *)(v1126 + 4728) = v1141;
      *(double *)(v1126 + 4736) = v1139;
      *(double *)(v1126 + 4744) = v1141;
      *(double *)(v1126 + 4752) = v1139;
      *(double *)(v1126 + 4760) = v1141;
      *(double *)(v1126 + 4768) = v1139;
      *(double *)(v1126 + 4776) = v1141;
      if (v1140 <= 0.0)
      {
        v1144 = 1.0e20;
        v1140 = 1.0e-10;
LABEL_1436:
        *(double *)(v1126 + 4784) = v1140;
        *(double *)(v1126 + 4792) = v1144;
        if (v1138)
        {
          v1140 = 1.0;
          v1144 = 1.0;
        }
        *(double *)(v1126 + 4816) = v1140;
        *(double *)(v1126 + 4824) = v1144;
        *(_BYTE *)(v1126 + 6589) = 0;
        *(_DWORD *)(v1126 + 6584) = 0;
        goto LABEL_1439;
      }
    }
    else
    {
      v1138 = *(unsigned __int8 *)(v1127 + 592);
      sub_20F7214F8(v1126 + 4712, (double *)oslog, (double *)(v1126 + 24928));
      v1142 = 1.0;
      v1140 = *(double *)oslog;
      v1143 = 1.0;
      if (!v1138)
      {
        if (*(double *)oslog <= 0.0)
        {
          v1143 = 1.0e20;
          v1142 = 1.0e-10;
        }
        else
        {
          v1142 = *(double *)oslog;
          v1143 = 1.0 / (*(double *)oslog * *(double *)oslog);
        }
      }
      *(double *)(v1126 + 4720) = v1142;
      *(double *)(v1126 + 4728) = v1143;
      *(double *)(v1126 + 4736) = v1142;
      *(double *)(v1126 + 4744) = v1143;
      *(double *)(v1126 + 4752) = v1142;
      *(double *)(v1126 + 4760) = v1143;
      *(double *)(v1126 + 4768) = v1142;
      *(double *)(v1126 + 4776) = v1143;
      if (v1140 <= 0.0)
      {
        v1144 = 1.0e20;
        v1140 = 1.0e-10;
        goto LABEL_1436;
      }
    }
    v1144 = 1.0 / (v1140 * v1140);
    goto LABEL_1436;
  }
LABEL_1439:
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v1130 + 8))(v1126 + 4712))
  {
    sub_20F71DDC0((uint64_t)v1796);
    object[8] = COERCE_VOID_(sub_20F72039C(v1126 + 4712, &object[10]));
    object[9] = object[8];
    *(void **)(v1126 + 25608) = object[8];
    v1148 = (__int128 *)object[74];
    v1149 = *((_QWORD *)&v1732 + 1);
    v1150 = 8 * *((_QWORD *)&v1732 + 1);
    *(_QWORD *)&v1754 = 0;
    v1151 = *((_QWORD *)&v1732 + 1) & 0x1FFFFFFFFFFFFFFFLL;
    if ((*((_QWORD *)&v1732 + 1) & 0x1FFFFFFFFFFFFFFFuLL) <= v1753)
    {
      if (!*((_QWORD *)&v1732 + 1))
        goto LABEL_1462;
      v1152 = v1752;
    }
    else
    {
      if (2 * v1753 > v1151)
        v1151 = 2 * v1753;
      v1753 = v1151;
      v1152 = (_OWORD *)operator new[]();
      if (v1752 != &v1733 && v1752)
        MEMORY[0x212BC6368]();
      v1752 = v1152;
      v1153 = v1754;
      if ((_QWORD)v1754)
      {
        *(_QWORD *)&v1754 = v1754 + v1149;
        memmove((char *)v1152 + 8 * v1149, v1152, 8 * v1153);
        memcpy(v1152, v1148, v1150);
LABEL_1462:
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*v1128 + 24))(v1126 + 24872))
        {
          if ((*(unsigned int (**)(uint64_t))(*v1128 + 40))(v1126 + 24872))
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1130 + 96))(v1126 + 4712);
            (*(void (**)(uint64_t))(*v1128 + 48))(v1126 + 24872);
          }
          else
          {
            (*(void (**)(uint64_t))(*v1128 + 56))(v1126 + 24872);
          }
          (*(void (**)(uint64_t))(*v1128 + 32))(v1126 + 24872);
          (*(void (**)(uint64_t))(*(_QWORD *)v1130 + 104))(v1126 + 4712);
        }
        v1163 = (double **)(v1126 + 6624);
        v1164 = *(unsigned int *)(v1126 + 6640);
        v1147 = v1658;
        if ((_DWORD)v1164)
        {
          v1165 = fabs(**v1163);
          if ((_DWORD)v1164 == 1)
          {
            ii = v1126 + 6584;
          }
          else
          {
            v1167 = *v1163 + 1;
            v1168 = 8 * v1164 - 8;
            ii = v1126 + 6584;
            do
            {
              v1169 = *v1167++;
              v1170 = fabs(v1169);
              if (v1165 < v1170)
                v1165 = v1170;
              v1168 -= 8;
            }
            while (v1168);
          }
        }
        else
        {
          v1165 = 1.0;
          ii = v1126 + 6584;
        }
        if (v1165 < v1165 * *(double *)(v1126 + 24896))
        {
          if (*(_BYTE *)(v1127 + 8))
          {
            v1171 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
            std::ios_base::getloc((const std::ios_base *)((char *)v1171 + *(_QWORD *)(*v1171 - 24)));
            v1172 = std::locale::use_facet((const std::locale *)oslog, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v1172->__vftable[2].~facet_0)(v1172, 10);
            std::locale::~locale((std::locale *)oslog);
            std::ostream::put();
            std::ostream::flush();
            sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"[error][grad < gtol][", 21);
            v1173 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v1173, (uint64_t)"][", 2);
            if (v1165 == 0.0)
              sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
            else
              std::ostream::operator<<();
            sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
            v1260 = (_QWORD *)std::ostream::operator<<();
            v1261 = sub_20E86A980(v1260, (uint64_t)"]", 1);
            std::ios_base::getloc((const std::ios_base *)((char *)v1261 + *(_QWORD *)(*v1261 - 24)));
            v1262 = std::locale::use_facet((const std::locale *)oslog, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v1262->__vftable[2].~facet_0)(v1262, 10);
            std::locale::~locale((std::locale *)oslog);
            std::ostream::put();
            std::ostream::flush();
          }
          LODWORD(object[7]) = 1;
LABEL_1711:
          *(_BYTE *)(ii + 16) = v1134;
          goto LABEL_1712;
        }
        v1695 = (double **)(v1126 + 6624);
        v1174 = *(double *)(v1126 + 25608);
        kdebug_trace();
        v1684 = v1134;
        v1175 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1130 + 24))(v1126 + 4712);
        v1176 = *(_QWORD *)(v1126 + 25536);
        if (v1176)
          (*(void (**)(uint64_t))(*(_QWORD *)v1176 + 48))(v1176);
        v1177 = LODWORD(object[6]);
        if (LODWORD(object[6]) >= *(_DWORD *)(v1127 + 4))
        {
LABEL_1709:
          object[9] = *(void **)(v1126 + 25608);
          v1372 = *(_QWORD *)(v1126 + 25504);
          v1134 = v1684;
          if (v1372)
            (*(void (**)(uint64_t))(*(_QWORD *)v1372 + 48))(v1372);
          goto LABEL_1711;
        }
        v1689 = v1126 + 25616;
        v1178 = v1165;
        while (1)
        {
          v1179 = v1177 + 1;
          LODWORD(object[6]) = v1177 + 1;
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v1130 + 16))(v1126 + 4712, v1175))
          {
            if (*(_BYTE *)(v1127 + 8))
            {
              v1267 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Solve FAILED", 12);
              std::ios_base::getloc((const std::ios_base *)((char *)v1267 + *(_QWORD *)(*v1267 - 24)));
              v1268 = std::locale::use_facet((const std::locale *)oslog, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v1268->__vftable[2].~facet_0)(v1268, 10);
              std::locale::~locale((std::locale *)oslog);
              std::ostream::put();
              std::ostream::flush();
            }
            LODWORD(object[7]) = 0;
            goto LABEL_1709;
          }
          ++HIDWORD(object[6]);
          v1180 = *(unsigned int *)(v1175 + 16);
          if ((_DWORD)v1180)
          {
            v1181 = *(double **)v1175;
            v1182 = **(double **)v1175 * **(double **)v1175;
            if ((_DWORD)v1180 != 1)
            {
              v1183 = v1181 + 1;
              v1184 = (v1180 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
              if (v1184 < 3)
                goto LABEL_1490;
              v1185 = v1184 + 1;
              v1183 += v1185 & 0x3FFFFFFFFFFFFFFCLL;
              v1186 = (float64x2_t *)(v1181 + 3);
              v1187 = v1185 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v1188 = vmulq_f64(v1186[-1], v1186[-1]);
                v1189 = vmulq_f64(*v1186, *v1186);
                v1182 = v1182 + v1188.f64[0] + v1188.f64[1] + v1189.f64[0] + v1189.f64[1];
                v1186 += 2;
                v1187 -= 4;
              }
              while (v1187);
              if (v1185 != (v1185 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1490:
                v1190 = &v1181[v1180];
                do
                {
                  v1191 = *v1183++;
                  v1182 = v1182 + v1191 * v1191;
                }
                while (v1183 != v1190);
              }
            }
            v1192 = sqrt(v1182);
            if (v1177 < *(_DWORD *)v1127)
              goto LABEL_1500;
          }
          else
          {
            v1192 = sqrt(0.0);
            if (v1177 < *(_DWORD *)v1127)
              goto LABEL_1500;
          }
          v1193 = *(_QWORD *)(v1126 + 25600);
          if (v1193)
          {
            *(_DWORD *)oslog = *(_DWORD *)(v1175 + 16);
            *(_QWORD *)&oslog[8] = *(_QWORD *)v1175;
            *(_DWORD *)&oslog[16] = 0;
            v1844[0] = *(void **)&v1192;
            if (((*(uint64_t (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v1193 + 48))(v1193, v1844, oslog) & 1) != 0)
              goto LABEL_1636;
          }
          else if ((_DWORD)v1180 && v1192 < *(double *)(v1126 + 24904) * (v1133 + *(double *)(v1126 + 24904)))
          {
LABEL_1636:
            if (*(_BYTE *)(v1127 + 8))
            {
              v1279 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the parameters", 29);
              std::ios_base::getloc((const std::ios_base *)((char *)v1279 + *(_QWORD *)(*v1279 - 24)));
              v1280 = std::locale::use_facet((const std::locale *)oslog, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v1280->__vftable[2].~facet_0)(v1280, 10);
              std::locale::~locale((std::locale *)oslog);
              std::ostream::put();
              std::ostream::flush();
              (*(void (**)(uint64_t, uint64_t, double, double, double, double, double))(*v1128 + 64))(v1126 + 24872, v1177, v1174, v1192, v1178, v1165, v1133);
            }
            v1274 = 2;
            goto LABEL_1708;
          }
LABEL_1500:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1130 + 48))(v1126 + 4712, v1175);
          v1194 = *(_QWORD *)(v1126 + 25568);
          if (v1194)
            (*(void (**)(uint64_t))(*(_QWORD *)v1194 + 48))(v1194);
          if ((_QWORD)v1754)
            memcpy(oslog, v1752, 8 * v1754);
          v1174 = sub_20F72039C(v1126 + 4712, &v1733);
          v1195 = *(unsigned int *)(v1126 + 6640);
          if (!(_DWORD)v1195)
          {
            v1178 = 1.0;
            if (!*(_BYTE *)(v1127 + 8))
              goto LABEL_1514;
LABEL_1513:
            (*(void (**)(uint64_t, uint64_t, double, double, double, double, double))(*v1128 + 64))(v1126 + 24872, v1177, v1174, v1192, v1178, v1165, v1133);
            goto LABEL_1514;
          }
          v1178 = fabs(**v1695);
          if ((_DWORD)v1195 != 1)
          {
            v1196 = *v1695 + 1;
            v1197 = 8 * v1195 - 8;
            do
            {
              v1198 = *v1196++;
              v1199 = fabs(v1198);
              if (v1178 < v1199)
                v1178 = v1199;
              v1197 -= 8;
            }
            while (v1197);
          }
          if (*(_BYTE *)(v1127 + 8))
            goto LABEL_1513;
LABEL_1514:
          if (v1174 == 0.0)
          {
            if (*(_BYTE *)(v1127 + 8))
            {
              v1269 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
              v1270 = sub_20E86A980(v1269, (uint64_t)"N.A.", 4);
              std::ios_base::getloc((const std::ios_base *)((char *)v1270 + *(_QWORD *)(*v1270 - 24)));
              v1271 = std::locale::use_facet((const std::locale *)v1844, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v1271->__vftable[2].~facet_0)(v1271, 10);
              std::locale::~locale((std::locale *)v1844);
              std::ostream::put();
              goto LABEL_1625;
            }
LABEL_1626:
            *(double *)(v1126 + 25608) = v1174;
            v1274 = 3;
LABEL_1708:
            LODWORD(object[7]) = v1274;
            goto LABEL_1709;
          }
          if (vabdd_f64(v1174, *(double *)(v1126 + 25608)) < v1174 * *(double *)(v1126 + 24912)
            && v1177 >= *(_DWORD *)v1127)
          {
            if (*(_BYTE *)(v1127 + 8))
            {
              sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
              v1272 = (_QWORD *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v1272 + *(_QWORD *)(*v1272 - 24)));
              v1273 = std::locale::use_facet((const std::locale *)v1844, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v1273->__vftable[2].~facet_0)(v1273, 10);
              std::locale::~locale((std::locale *)v1844);
              std::ostream::put();
LABEL_1625:
              std::ostream::flush();
            }
            goto LABEL_1626;
          }
          if (*(_DWORD *)(v1126 + 6616))
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1130 + 160))(v1126 + 4712, v1689);
            v1200 = (*(uint64_t (**)(uint64_t, uint64_t, double **, uint64_t, double))(*v1128 + 80))(v1126 + 24872, v1175, v1695, v1689, v1174);
          }
          else
          {
            v1200 = (*(uint64_t (**)(uint64_t, uint64_t, double **, double))(*v1128 + 72))(v1126 + 24872, v1175, v1695, v1174);
          }
          if (!v1200)
          {
            --HIDWORD(object[6]);
            v1211 = *(_QWORD *)(v1126 + 4840);
            v1212 = *(_QWORD *)(v1126 + 4848);
            while (v1211 != v1212)
            {
              v1213 = *(_QWORD *)(v1211 + 8);
              if (*(_BYTE *)(v1213 + 20))
              {
                v1214 = *(_OWORD *)(v1213 + 200);
                v1215 = *(_OWORD *)(v1213 + 232);
                *(_OWORD *)(v1213 + 64) = *(_OWORD *)(v1213 + 216);
                *(_OWORD *)(v1213 + 80) = v1215;
                *(_QWORD *)(v1213 + 96) = *(_QWORD *)(v1213 + 248);
                *(_OWORD *)(v1213 + 32) = *(_OWORD *)(v1213 + 184);
                *(_OWORD *)(v1213 + 48) = v1214;
                *(_OWORD *)(v1213 + 104) = *(_OWORD *)(v1213 + 256);
                *(_QWORD *)(v1213 + 120) = *(_QWORD *)(v1213 + 272);
                *(_BYTE *)(v1213 + 128) = 0;
              }
              v1211 += 16;
            }
            v1216 = *(_QWORD *)(v1126 + 4936);
            v1217 = *(_QWORD *)(v1126 + 4944);
            while (v1216 != v1217)
            {
              v1218 = *(_QWORD *)(v1216 + 8);
              if (*(_BYTE *)(v1218 + 20))
              {
                v1219 = *(_OWORD *)(v1218 + 160);
                *(_OWORD *)(v1218 + 64) = *(_OWORD *)(v1218 + 144);
                *(_OWORD *)(v1218 + 80) = v1219;
                *(_QWORD *)(v1218 + 96) = *(_QWORD *)(v1218 + 176);
                v1220 = *(_OWORD *)(v1218 + 128);
                *(_OWORD *)(v1218 + 32) = *(_OWORD *)(v1218 + 112);
                *(_OWORD *)(v1218 + 48) = v1220;
                *(_BYTE *)(v1218 + 104) = 0;
              }
              v1216 += 16;
            }
            v1221 = *(_QWORD *)(v1126 + 5032);
            v1222 = *(_QWORD *)(v1126 + 5040);
            while (v1221 != v1222)
            {
              v1223 = *(_QWORD *)(v1221 + 8);
              if (*(_BYTE *)(v1223 + 20))
              {
                *(_QWORD *)(v1223 + 32) = *(_QWORD *)(v1223 + 48);
                *(_BYTE *)(v1223 + 40) = 0;
              }
              v1221 += 16;
            }
            v1224 = *(_QWORD *)(v1126 + 5128);
            v1225 = *(_QWORD *)(v1126 + 5136);
            while (v1224 != v1225)
            {
              v1226 = *(_QWORD *)(v1224 + 8);
              if (*(_BYTE *)(v1226 + 20))
              {
                v1227 = *(_OWORD *)(v1226 + 152);
                v1228 = *(_OWORD *)(v1226 + 184);
                *(_OWORD *)(v1226 + 64) = *(_OWORD *)(v1226 + 168);
                *(_OWORD *)(v1226 + 80) = v1228;
                *(_QWORD *)(v1226 + 96) = *(_QWORD *)(v1226 + 200);
                *(_OWORD *)(v1226 + 32) = *(_OWORD *)(v1226 + 136);
                *(_OWORD *)(v1226 + 48) = v1227;
                *(_OWORD *)(v1226 + 104) = *(_OWORD *)(v1226 + 208);
                *(_QWORD *)(v1226 + 120) = *(_QWORD *)(v1226 + 224);
              }
              v1224 += 16;
            }
            v1229 = *(_QWORD *)(v1126 + 5224);
            v1230 = *(_QWORD *)(v1126 + 5232);
            while (v1229 != v1230)
            {
              v1231 = *(_QWORD *)(v1229 + 8);
              if (*(_BYTE *)(v1231 + 20))
              {
                v1232 = *(_OWORD *)(v1231 + 168);
                *(_OWORD *)(v1231 + 32) = *(_OWORD *)(v1231 + 152);
                *(_OWORD *)(v1231 + 48) = v1232;
                *(_QWORD *)(v1231 + 64) = *(_QWORD *)(v1231 + 184);
                *(_BYTE *)(v1231 + 72) = *(_BYTE *)(v1231 + 192);
                sub_20F6169C8(v1231 + 16);
              }
              v1229 += 16;
            }
            v1233 = *(_QWORD *)(v1126 + 5320);
            v1234 = *(_QWORD *)(v1126 + 5328);
            while (v1233 != v1234)
            {
              v1235 = *(_QWORD *)(v1233 + 8);
              if (*(_BYTE *)(v1235 + 20))
              {
                v1236 = *(_OWORD *)(v1235 + 504);
                *(_OWORD *)(v1235 + 192) = *(_OWORD *)(v1235 + 488);
                *(_OWORD *)(v1235 + 208) = v1236;
                v1237 = *(_OWORD *)(v1235 + 536);
                *(_OWORD *)(v1235 + 224) = *(_OWORD *)(v1235 + 520);
                *(_OWORD *)(v1235 + 240) = v1237;
                v1238 = *(_OWORD *)(v1235 + 440);
                *(_OWORD *)(v1235 + 128) = *(_OWORD *)(v1235 + 424);
                *(_OWORD *)(v1235 + 144) = v1238;
                v1239 = *(_OWORD *)(v1235 + 472);
                *(_OWORD *)(v1235 + 160) = *(_OWORD *)(v1235 + 456);
                *(_OWORD *)(v1235 + 176) = v1239;
                v1240 = *(_OWORD *)(v1235 + 376);
                *(_OWORD *)(v1235 + 64) = *(_OWORD *)(v1235 + 360);
                *(_OWORD *)(v1235 + 80) = v1240;
                v1241 = *(_OWORD *)(v1235 + 408);
                *(_OWORD *)(v1235 + 96) = *(_OWORD *)(v1235 + 392);
                *(_OWORD *)(v1235 + 112) = v1241;
                v1242 = *(__n128 *)(v1235 + 328);
                v1243 = *(_OWORD *)(v1235 + 344);
                *(__n128 *)(v1235 + 32) = v1242;
                *(_OWORD *)(v1235 + 48) = v1243;
                v1244 = *(uint64_t ***)(v1235 + 296);
                if (v1244)
                {
                  v1245 = (float64x2_t *)(v1235 + 32);
                  do
                  {
                    v1242.n128_f64[0] = sub_20F6182A0((char *)v1244[5], v1245, v1242);
                    v1244 = (uint64_t **)*v1244;
                  }
                  while (v1244);
                }
              }
              v1233 += 16;
            }
            v1246 = *(_QWORD *)(v1126 + 5416);
            for (n = *(_QWORD *)(v1126 + 5424); v1246 != n; v1246 += 16)
            {
              v1255 = *(_QWORD *)(v1246 + 8);
              if (*(_BYTE *)(v1255 + 20))
              {
                v1256 = *(_OWORD *)(v1255 + 224);
                *(_OWORD *)(v1255 + 64) = *(_OWORD *)(v1255 + 208);
                *(_OWORD *)(v1255 + 80) = v1256;
                *(_QWORD *)(v1255 + 96) = *(_QWORD *)(v1255 + 240);
                v1257 = *(_OWORD *)(v1255 + 192);
                *(_OWORD *)(v1255 + 32) = *(_OWORD *)(v1255 + 176);
                *(_OWORD *)(v1255 + 48) = v1257;
                sub_20F813110(v1255 + 16);
              }
            }
            v1248 = *(_QWORD *)(v1126 + 5512);
            v1249 = *(_QWORD *)(v1126 + 5520);
            for (ii = v1126 + 6584; v1248 != v1249; v1248 += 16)
            {
              v1254 = *(_QWORD *)(v1248 + 8);
              if (*(_BYTE *)(v1254 + 20))
                *(_QWORD *)(v1254 + 32) = *(_QWORD *)(v1254 + 40);
            }
            *(_BYTE *)(v1126 + 6589) = 0;
            *(_BYTE *)(v1126 + 6584) = 0;
            *(_WORD *)(v1126 + 6587) = 0;
            *(_BYTE *)(v1126 + 6585) = *(_BYTE *)(v1126 + 6586);
            *(_QWORD *)&v1754 = 0;
            if (v1753 >= 6)
            {
              v1251 = v1752;
            }
            else
            {
              v1250 = 2 * v1753;
              if (2 * v1753 <= 6)
                v1250 = 6;
              v1753 = v1250;
              v1251 = (_OWORD *)operator new[]();
              if (v1752 != &v1733 && v1752)
                MEMORY[0x212BC6368]();
              v1752 = v1251;
              v1252 = v1754;
              if ((_QWORD)v1754)
              {
                *(_QWORD *)&v1754 = v1754 + 6;
                memmove(v1251 + 3, v1251, 8 * v1252);
                v1253 = *(_OWORD *)&oslog[16];
                *v1251 = *(_OWORD *)oslog;
                v1251[1] = v1253;
                v1251[2] = *(_OWORD *)&oslog[32];
                goto LABEL_1593;
              }
            }
            *v1251 = *(_OWORD *)oslog;
            v1251[1] = *(_OWORD *)&oslog[16];
            v1251[2] = *(_OWORD *)&oslog[32];
            *(_QWORD *)&v1754 = 6;
LABEL_1593:
            if ((*(unsigned int (**)(uint64_t))(*v1128 + 24))(v1126 + 24872))
            {
              (*(void (**)(uint64_t))(*v1128 + 32))(v1126 + 24872);
              (*(void (**)(uint64_t))(*(_QWORD *)v1130 + 104))(v1126 + 4712);
            }
LABEL_1595:
            v1258 = *(_DWORD *)(v1127 + 4);
            if (v1179 >= v1258)
              goto LABEL_1598;
            goto LABEL_1596;
          }
          if ((*(unsigned int (**)(uint64_t))(*v1128 + 24))(v1126 + 24872))
          {
            (*(void (**)(uint64_t))(*v1128 + 32))(v1126 + 24872);
            (*(void (**)(uint64_t))(*(_QWORD *)v1130 + 104))(v1126 + 4712);
          }
          if (v1178 < v1165 * *(double *)(v1126 + 24896) && v1177 >= *(_DWORD *)v1127)
          {
            if (*(_BYTE *)(v1127 + 8))
            {
              v1295 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
              v1147 = v1658;
              sub_20E8C81A0(v1295);
              (*(void (**)(uint64_t, uint64_t, double, double, double, double, double))(*v1128 + 64))(v1126 + 24872, v1177, v1174, v1192, v1178, v1165, v1133);
              v1274 = 1;
            }
            else
            {
              v1274 = 1;
              v1147 = v1658;
            }
            goto LABEL_1708;
          }
          if (v1179 >= *(_DWORD *)(v1127 + 4) || !*(_BYTE *)(v1127 + 40))
            goto LABEL_1595;
          v1201 = *(_QWORD *)(v1126 + 25464);
          if (*(_BYTE *)(v1127 + 593))
          {
            v1202 = (double *)(v1126 + 24928);
            if (v1201)
              v1202 = *(double **)(v1126 + 25448);
            v1203 = *(unsigned __int8 *)(v1127 + 592);
            sub_20F7214F8(v1126 + 4712, (double *)v1844, v1202);
            v1204 = 1.0;
            v1205 = v1844[0];
            v1206 = 1.0;
            if (!v1203)
            {
              v1204 = 1.0e-10;
              v1206 = 1.0e20;
              if (*(double *)v1844 > 0.0)
              {
                v1204 = *(double *)v1844;
                v1206 = 1.0 / (*(double *)v1844 * *(double *)v1844);
              }
            }
            *(double *)(v1126 + 4720) = v1204;
            *(double *)(v1126 + 4728) = v1206;
            *(double *)(v1126 + 4736) = v1204;
            *(double *)(v1126 + 4744) = v1206;
            *(double *)(v1126 + 4752) = v1204;
            *(double *)(v1126 + 4760) = v1206;
            *(double *)(v1126 + 4768) = v1204;
            v1207 = 1.0e-10;
            v1208 = 1.0e20;
            *(double *)(v1126 + 4776) = v1206;
            if (*(double *)&v1205 > 0.0)
            {
              v1207 = *(double *)&v1205;
              v1208 = 1.0 / (*(double *)&v1205 * *(double *)&v1205);
            }
            *(double *)(v1126 + 4784) = v1207;
            *(double *)(v1126 + 4792) = v1208;
            if (v1203)
              v1209 = 1.0;
            else
              v1209 = v1207;
            if (v1203)
              v1210 = 1.0;
            else
              v1210 = v1208;
            *(double *)(v1126 + 4816) = v1209;
            *(double *)(v1126 + 4824) = v1210;
            *(_BYTE *)(ii + 5) = 0;
            *(_DWORD *)(v1126 + 6584) = 0;
          }
          else if (v1201)
          {
            v1844[0] = *(void **)(v1126 + 25448);
            LODWORD(v1844[1]) = 0;
            sub_20F71D5F8(v1126 + 4712, (double **)v1844, *(_BYTE *)(v1127 + 592));
          }
          else
          {
            sub_20F71CE5C(v1126 + 4712, (double *)(v1126 + 24928), *(_BYTE *)(v1127 + 592));
          }
          *(double *)(v1126 + 25608) = sub_20F72039C(v1126 + 4712, &v1733);
          v1258 = *(_DWORD *)(v1127 + 4);
          if (v1179 >= v1258)
            goto LABEL_1598;
LABEL_1596:
          v1259 = *(_QWORD *)(v1126 + 25504);
          v1147 = v1658;
          if (v1259)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1259 + 48))(v1259);
            v1258 = *(_DWORD *)(v1127 + 4);
LABEL_1598:
            v1147 = v1658;
          }
          v1177 = LODWORD(object[6]);
          if (LODWORD(object[6]) >= v1258)
            goto LABEL_1709;
        }
      }
    }
    v1154 = 0;
    v1155 = (v1149 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v1155 < 3)
    {
      v1156 = (uint64_t *)v1148;
    }
    else
    {
      v1156 = (uint64_t *)v1148;
      if ((unint64_t)((char *)v1152 - (char *)v1148) >= 0x20)
      {
        v1157 = v1155 + 1;
        v1154 = v1157 & 0x3FFFFFFFFFFFFFFCLL;
        v1156 = (uint64_t *)v1148 + (v1157 & 0x3FFFFFFFFFFFFFFCLL);
        v1158 = v1152 + 1;
        v1159 = v1148 + 1;
        v1160 = v1157 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1161 = *v1159;
          *(v1158 - 1) = *(v1159 - 1);
          *v1158 = v1161;
          v1158 += 2;
          v1159 += 2;
          v1160 -= 4;
        }
        while (v1160);
        if (v1157 == v1154)
          goto LABEL_1461;
      }
    }
    do
    {
      v1162 = *v1156++;
      *((_QWORD *)v1152 + v1154++) = v1162;
    }
    while (v1156 != (uint64_t *)((char *)v1148 + v1150));
LABEL_1461:
    *(_QWORD *)&v1754 = v1154;
    goto LABEL_1462;
  }
  if (*(_BYTE *)(v1127 + 8))
  {
    v1145 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Linearize FAILED", 16);
    std::ios_base::getloc((const std::ios_base *)((char *)v1145 + *(_QWORD *)(*v1145 - 24)));
    v1146 = std::locale::use_facet((const std::locale *)oslog, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v1146->__vftable[2].~facet_0)(v1146, 10);
    std::locale::~locale((std::locale *)oslog);
    std::ostream::put();
    std::ostream::flush();
  }
  LODWORD(object[7]) = 0;
  *(_BYTE *)(v1126 + 6600) = v1134;
  sub_20F71DDC0((uint64_t)v1796);
  v1147 = v1658;
LABEL_1712:
  kdebug_trace();
  if (v1147)
  {
    oslog[23] = 12;
    strcpy(oslog, "OfflineMapBA");
    sub_20F4ACDC8((uint64_t)object, MEMORY[0x24BEDB318], (uint64_t)oslog);
    if ((oslog[23] & 0x80000000) != 0)
      operator delete(*(void **)oslog);
  }
  v1375 = (_QWORD *)v1723;
  v1376 = *(_QWORD *)(v1723 + 5128);
  v1377 = *(_QWORD *)(v1723 + 5136);
  while (v1376 != v1377)
  {
    v1378 = *(_QWORD *)(v1376 + 8);
    if (*(_BYTE *)(v1378 + 20))
    {
      v1379 = *(_QWORD *)(v1378 + 24);
      v1373.f64[0] = *(float64_t *)(v1378 + 48);
      v1380 = *(int64x2_t *)(v1378 + 32);
      _Q2.i64[0] = *(_QWORD *)(v1378 + 72);
      v1381 = *(int64x2_t *)(v1378 + 56);
      _D4 = *(double *)(v1378 + 96);
      _Q5 = *(float64x2_t *)(v1378 + 80);
      v1384 = (float64x2_t)vzip1q_s64(v1380, v1381);
      _Q3 = (float64x2_t)vzip2q_s64(v1380, v1381);
      v1386 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
      v1387 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
      v1388 = *(double *)(v1378 + 120);
      _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1384, *(double *)(v1378 + 104)), _Q3, *(float64x2_t *)(v1378 + 104), 1), (float64x2_t)vzip1q_s64((int64x2_t)v1373, _Q2), v1388);
      _D16 = *(_QWORD *)(v1378 + 112);
      __asm { FMLA            D3, D16, V5.D[1] }
      _Q3.f64[0] = _Q3.f64[0] + _D4 * v1388;
      v1391 = vnegq_f64(_Q21);
      v1392 = (int64x2_t)vextq_s8(v1387, v1386, 8uLL);
      v1393 = (float64x2_t)vzip1q_s64(v1380, v1392);
      v1394 = (float64x2_t)vzip2q_s64((int64x2_t)v1384, v1392);
      *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
      *(float64_t *)(v1379 + 16) = v1373.f64[0];
      *(float64x2_t *)v1379 = v1393;
      *(_QWORD *)(v1379 + 40) = _Q2.i64[0];
      *(float64x2_t *)(v1379 + 24) = v1394;
      *(double *)(v1379 + 64) = _D4;
      *(float64x2_t *)(v1379 + 48) = _Q5;
      _Q0 = vmulq_f64(v1373, v1391);
      __asm
      {
        FMLS            D0, D2, V21.D[1]
        FMLS            D0, D4, V3.D[0]
      }
      v1373 = vnegq_f64(_Q0);
      *(float64x2_t *)(v1379 + 72) = vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v1393, v1391.f64[0]), v1394, _Q21, 1), _Q5, _Q3.f64[0], 0));
      *(float64_t *)(v1379 + 88) = v1373.f64[0];
    }
    v1376 += 16;
  }
  v1396 = v1375[605];
  v1397 = v1375[606];
  while (v1396 != v1397)
  {
    v1398 = *(_QWORD *)(v1396 + 8);
    if (*(_BYTE *)(v1398 + 20))
    {
      v1399 = *(_QWORD *)(v1398 + 24);
      v1373.f64[0] = *(float64_t *)(v1398 + 48);
      v1400 = *(int64x2_t *)(v1398 + 32);
      _Q2.i64[0] = *(_QWORD *)(v1398 + 72);
      v1401 = *(int64x2_t *)(v1398 + 56);
      _D4 = *(double *)(v1398 + 96);
      _Q5 = *(float64x2_t *)(v1398 + 80);
      v1404 = (float64x2_t)vzip1q_s64(v1400, v1401);
      _Q3 = (float64x2_t)vzip2q_s64(v1400, v1401);
      v1406 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
      v1407 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
      v1408 = *(double *)(v1398 + 120);
      _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1404, *(double *)(v1398 + 104)), _Q3, *(float64x2_t *)(v1398 + 104), 1), (float64x2_t)vzip1q_s64((int64x2_t)v1373, _Q2), v1408);
      _D16 = *(_QWORD *)(v1398 + 112);
      __asm { FMLA            D3, D16, V5.D[1] }
      _Q3.f64[0] = _Q3.f64[0] + _D4 * v1408;
      v1411 = vnegq_f64(_Q21);
      v1412 = (int64x2_t)vextq_s8(v1407, v1406, 8uLL);
      v1413 = (float64x2_t)vzip1q_s64(v1400, v1412);
      v1414 = (float64x2_t)vzip2q_s64((int64x2_t)v1404, v1412);
      *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
      *(float64_t *)(v1399 + 16) = v1373.f64[0];
      *(float64x2_t *)v1399 = v1413;
      *(_QWORD *)(v1399 + 40) = _Q2.i64[0];
      *(float64x2_t *)(v1399 + 24) = v1414;
      *(double *)(v1399 + 64) = _D4;
      *(float64x2_t *)(v1399 + 48) = _Q5;
      _Q0 = vmulq_f64(v1373, v1411);
      __asm
      {
        FMLS            D0, D2, V21.D[1]
        FMLS            D0, D4, V3.D[0]
      }
      v1373 = vnegq_f64(_Q0);
      *(float64x2_t *)(v1399 + 72) = vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v1413, v1411.f64[0]), v1414, _Q21, 1), _Q5, _Q3.f64[0], 0));
      *(float64_t *)(v1399 + 88) = v1373.f64[0];
    }
    v1396 += 16;
  }
  v1416 = v1375[617];
  v1417 = v1375[618];
  while (v1416 != v1417)
  {
    v1418 = *(_QWORD *)(v1416 + 8);
    if (*(_BYTE *)(v1418 + 20))
    {
      v1419 = *(_QWORD *)(v1418 + 24);
      v1420 = *(_QWORD *)(v1418 + 96);
      v1421 = *(_OWORD *)(v1418 + 80);
      v1422 = *(_OWORD *)(v1418 + 32);
      v1423 = *(_OWORD *)(v1418 + 48);
      *(_OWORD *)(v1419 + 128) = *(_OWORD *)(v1418 + 64);
      *(_OWORD *)(v1419 + 144) = v1421;
      *(_QWORD *)(v1419 + 160) = v1420;
      *(_OWORD *)(v1419 + 96) = v1422;
      *(_OWORD *)(v1419 + 112) = v1423;
    }
    v1416 += 16;
  }
  v1424 = v1375[689];
  for (jj = v1375[690]; v1424 != jj; v1424 += 16)
  {
    v1426 = *(_QWORD *)(v1424 + 8);
    v1427 = *(_QWORD *)(v1426 + 24);
    if (v1427 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1427 + 24))(v1427) & 1) != 0
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 90, (uint64_t)"this->m_entity && this->m_entity->isSetup()", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v1430 = *(_QWORD *)(v1426 + 24);
      v1431 = *(uint64_t **)(v1430 + 96);
      v1428.f64[0] = *(float64_t *)(v1426 + 32);
      v1432 = *v1431;
      v1433 = (float64x2_t *)v1431[2];
      v1434 = v1431[4];
      v1435 = (float64x2_t *)v1431[6];
      v1429.f64[0] = *(float64_t *)(v1430 + 80);
      _Q2 = *(float64x2_t *)(v1430 + 64);
      *(_QWORD *)&v1437 = *(_OWORD *)&vmulq_f64(v1428, v1429);
      _Q0 = vmulq_n_f64(_Q2, v1428.f64[0]);
      _D4 = *(_QWORD *)(v1434 + 40);
      v1440 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1434, _Q0.f64[0]), *(float64x2_t *)(v1434 + 24), _Q0, 1), *(float64x2_t *)(v1434 + 48), v1437);
      __asm { FMLA            D2, D4, V0.D[1] }
      _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v1434 + 64), v1437);
      _Q0.f64[0] = v1435[1].f64[0];
      v1441 = vaddq_f64(_Q2, _Q0);
      _Q1 = vaddq_f64(v1440, *v1435);
      _D4 = *(_QWORD *)(v1432 + 40);
      v1444 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1432, _Q1.f64[0]), *(float64x2_t *)(v1432 + 24), _Q1, 1), *(float64x2_t *)(v1432 + 48), v1441.f64[0]);
      __asm { FMLA            D2, D4, V1.D[1] }
      _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v1432 + 64), v1441.f64[0]);
      v1441.f64[0] = v1433[1].f64[0];
      *(float64x2_t *)(v1430 + 8) = vaddq_f64(v1444, *v1433);
      *(_QWORD *)(v1430 + 24) = *(_OWORD *)&vaddq_f64(_Q2, v1441);
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1426 + 24) + 16))(*(_QWORD *)(v1426 + 24)) & 1) != 0
        || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 117, (uint64_t)"this->m_entity->update()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        continue;
      }
    }
    abort();
  }
  v1445 = v1375[629];
  for (kk = v1375[630]; v1445 != kk; v1445 += 16)
  {
    v1449 = *(_QWORD *)(v1445 + 8);
    if (*(_BYTE *)(v1449 + 20))
      **(_QWORD **)(v1449 + 24) = *(_QWORD *)(v1449 + 32);
  }
  v1447 = v1375[653];
  v1448 = v1375[654];
  while (v1447 != v1448)
  {
    v1450 = *(_QWORD *)(v1447 + 8);
    if (*(_BYTE *)(v1450 + 20))
    {
      v1451 = *(_QWORD *)(v1450 + 24);
      v1452 = *(_OWORD *)(v1450 + 48);
      *(_OWORD *)v1451 = *(_OWORD *)(v1450 + 32);
      *(_OWORD *)(v1451 + 16) = v1452;
      v1453 = *(_QWORD *)(v1450 + 64);
      *(_BYTE *)(v1451 + 40) = *(_BYTE *)(v1450 + 72);
      *(_QWORD *)(v1451 + 32) = v1453;
      *(_QWORD *)(v1450 + 88) = *(_QWORD *)(v1450 + 80);
      if (*(_QWORD *)(v1450 + 128))
      {
        v1454 = *(_QWORD **)(v1450 + 120);
        if (v1454)
        {
          do
          {
            v1455 = (_QWORD *)*v1454;
            operator delete(v1454);
            v1454 = v1455;
          }
          while (v1455);
        }
        *(_QWORD *)(v1450 + 120) = 0;
        v1456 = *(_QWORD *)(v1450 + 112);
        if (v1456)
        {
          for (mm = 0; mm != v1456; ++mm)
            *(_QWORD *)(*(_QWORD *)(v1450 + 104) + 8 * mm) = 0;
        }
        *(_QWORD *)(v1450 + 128) = 0;
      }
    }
    v1447 += 16;
  }
  v1458 = v1375[665];
  v1459 = v1375[666];
  while (v1458 != v1459)
  {
    v1460 = *(_QWORD *)(v1458 + 8);
    if (*(_BYTE *)(v1460 + 20))
    {
      v1461 = *(_OWORD **)(v1460 + 24);
      v1462 = *(_OWORD *)(v1460 + 48);
      *v1461 = *(_OWORD *)(v1460 + 32);
      v1461[1] = v1462;
      v1463 = *(_OWORD *)(v1460 + 64);
      v1464 = *(_OWORD *)(v1460 + 80);
      v1465 = *(_OWORD *)(v1460 + 112);
      v1461[4] = *(_OWORD *)(v1460 + 96);
      v1461[5] = v1465;
      v1461[2] = v1463;
      v1461[3] = v1464;
      v1466 = *(_OWORD *)(v1460 + 128);
      v1467 = *(_OWORD *)(v1460 + 144);
      v1468 = *(_OWORD *)(v1460 + 176);
      v1461[8] = *(_OWORD *)(v1460 + 160);
      v1461[9] = v1468;
      v1461[6] = v1466;
      v1461[7] = v1467;
      v1469 = *(_OWORD *)(v1460 + 192);
      v1470 = *(_OWORD *)(v1460 + 208);
      v1471 = *(_OWORD *)(v1460 + 240);
      v1461[12] = *(_OWORD *)(v1460 + 224);
      v1461[13] = v1471;
      v1461[10] = v1469;
      v1461[11] = v1470;
      *(_QWORD *)(v1460 + 264) = *(_QWORD *)(v1460 + 256);
      if (*(_QWORD *)(v1460 + 304))
      {
        v1472 = *(_QWORD **)(v1460 + 296);
        if (v1472)
        {
          do
          {
            v1473 = (_QWORD *)*v1472;
            operator delete(v1472);
            v1472 = v1473;
          }
          while (v1473);
        }
        *(_QWORD *)(v1460 + 296) = 0;
        v1474 = *(_QWORD *)(v1460 + 288);
        if (v1474)
        {
          for (nn = 0; nn != v1474; ++nn)
            *(_QWORD *)(*(_QWORD *)(v1460 + 280) + 8 * nn) = 0;
        }
        *(_QWORD *)(v1460 + 304) = 0;
      }
    }
    v1458 += 16;
  }
  v1476 = v1375[677];
  v1477 = v1375[678];
  while (v1476 != v1477)
  {
    v1478 = *(_QWORD *)(v1476 + 8);
    if (*(_BYTE *)(v1478 + 20))
    {
      v1479 = *(_QWORD *)(v1478 + 24);
      *(_OWORD *)v1479 = *(_OWORD *)(v1478 + 32);
      v1480 = *(_OWORD *)(v1478 + 48);
      v1481 = *(_OWORD *)(v1478 + 64);
      v1482 = *(_OWORD *)(v1478 + 80);
      *(_QWORD *)(v1479 + 64) = *(_QWORD *)(v1478 + 96);
      *(_OWORD *)(v1479 + 32) = v1481;
      *(_OWORD *)(v1479 + 48) = v1482;
      *(_OWORD *)(v1479 + 16) = v1480;
      *(_QWORD *)(v1478 + 112) = *(_QWORD *)(v1478 + 104);
      if (*(_QWORD *)(v1478 + 152))
      {
        v1483 = *(_QWORD **)(v1478 + 144);
        if (v1483)
        {
          do
          {
            v1484 = (_QWORD *)*v1483;
            operator delete(v1483);
            v1483 = v1484;
          }
          while (v1484);
        }
        *(_QWORD *)(v1478 + 144) = 0;
        v1485 = *(_QWORD *)(v1478 + 136);
        if (v1485)
        {
          for (i1 = 0; i1 != v1485; ++i1)
            *(_QWORD *)(*(_QWORD *)(v1478 + 128) + 8 * i1) = 0;
        }
        *(_QWORD *)(v1478 + 152) = 0;
      }
    }
    v1476 += 16;
  }
  if (*(_QWORD *)(*v1659 + 64))
  {
    v1487 = *(_QWORD *)(*(_QWORD *)(*v1659 + 48) + 48);
    v1488 = atan2(-*(double *)(v1487 + 40), *(long double *)(v1487 + 64));
    v1489 = asin(*(long double *)(v1487 + 16));
    v1490 = atan2(-*(double *)(v1487 + 8), *(long double *)v1487);
    sub_20F49BBF8(&v1836);
    if (**(int **)(v1836 + 56) <= 2)
    {
      v1491 = *(unsigned __int8 *)(v1836 + 72);
      v1492 = sub_20E8C31DC(v1836, "OSLogSurrogateAppender", 1, 0);
      v1493 = v1492;
      if (v1491 || v1492)
      {
        *(_QWORD *)v1796 = &v1836;
        *(std::chrono::steady_clock::time_point *)&v1796[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v1796[16] = std::chrono::system_clock::now();
        *(_DWORD *)&v1796[24] = 2;
        *(_QWORD *)&v1796[32] = "unknown file";
        *(_DWORD *)&v1796[40] = 288;
        *(_QWORD *)&v1796[64] = 0;
        *(_QWORD *)&v1796[48] = "unknown function";
        *(_QWORD *)&v1796[56] = 0;
        v1494 = **(_QWORD **)v1796;
        v1495 = (const char *)(**(_QWORD **)v1796 + 16);
        v1696 = v1495;
        if (*(char *)(**(_QWORD **)v1796 + 39) < 0)
        {
          v1495 = *(const char **)(v1494 + 16);
          v1496 = *(_QWORD *)(v1494 + 24);
          v1498 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v1498 & 1) != 0)
            goto LABEL_1787;
        }
        else
        {
          v1496 = *(unsigned __int8 *)(**(_QWORD **)v1796 + 39);
          v1497 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v1497 & 1) != 0)
            goto LABEL_1787;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)oslog);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)oslog);
          if (oslog[24] && (oslog[23] & 0x80000000) != 0)
            operator delete(*(void **)oslog);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_1787:
        if (byte_254A4A4F8[23] >= 0)
          v1499 = byte_254A4A4F8;
        else
          v1499 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v1500 = byte_254A4A4F8[23];
        else
          v1500 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)oslog = os_log_create(v1499, v1495);
        v1501 = &oslog[8];
        if (v1500 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v1500 >= 0x17)
        {
          v1502 = (v1500 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v1500 | 7) != 0x17)
            v1502 = v1500 | 7;
          v1503 = v1502 + 1;
          v1501 = operator new(v1502 + 1);
          *(_QWORD *)&oslog[24] = v1503 | 0x8000000000000000;
          *(_QWORD *)&oslog[8] = v1501;
          *(_QWORD *)&oslog[16] = v1500;
        }
        else
        {
          oslog[31] = v1500;
          if (!v1500)
          {
LABEL_1801:
            v1501[v1500] = 0;
            oslog[32] = 1;
            v1504 = &oslog[40];
            if (v1496 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v1496 >= 0x17)
            {
              v1505 = (v1496 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v1496 | 7) != 0x17)
                v1505 = v1496 | 7;
              v1506 = v1505 + 1;
              v1504 = operator new(v1505 + 1);
              *(_QWORD *)&oslog[56] = v1506 | 0x8000000000000000;
              *(_QWORD *)&oslog[40] = v1504;
              *(_QWORD *)&oslog[48] = v1496;
            }
            else
            {
              oslog[63] = v1496;
              if (!v1496)
                goto LABEL_1809;
            }
            memmove(v1504, v1495, v1496);
LABEL_1809:
            v1504[v1496] = 0;
            oslog[64] = 1;
            v1507 = *(NSObject **)oslog;
            if ((oslog[63] & 0x80000000) != 0)
              operator delete(*(void **)&oslog[40]);
            if (oslog[32] && (oslog[31] & 0x80000000) != 0)
              operator delete(*(void **)&oslog[8]);
            if (*(_QWORD *)oslog)
              os_release(*(void **)oslog);
            v1508 = v1488 * 57.2957795;
            v1509 = v1489 * 57.2957795;
            v1510 = v1490 * 57.2957795;
            if (v1493 && *(_QWORD *)(v1493 + 24))
            {
              v1511 = _os_log_pack_size();
              v1512 = (std::__shared_weak_count_vtbl *)operator new(v1511, (std::align_val_t)8uLL);
              v1513 = (std::__shared_weak_count *)operator new();
              v1514 = v1513;
              v1513->__shared_owners_ = 0;
              v1515 = (unint64_t *)&v1513->__shared_owners_;
              v1513->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v1513->__shared_weak_owners_ = 0;
              v1513[1].__vftable = v1512;
              *(_QWORD *)oslog = v1512;
              *(_QWORD *)&oslog[8] = v1512;
              *(_QWORD *)&oslog[16] = v1513;
              do
                v1516 = __ldxr(v1515);
              while (__stxr(v1516 + 1, v1515));
              memset(&oslog[24], 0, 24);
              do
                v1517 = __ldaxr(v1515);
              while (__stlxr(v1517 - 1, v1515));
              if (!v1517)
              {
                ((void (*)(std::__shared_weak_count *))v1513->__on_zero_shared)(v1513);
                std::__shared_weak_count::__release_weak(v1514);
              }
              v1518 = *(_QWORD *)oslog;
              v1519 = _os_log_pack_fill();
              *(_DWORD *)v1519 = 134218496;
              *(double *)(v1519 + 4) = v1508;
              *(_WORD *)(v1519 + 12) = 2048;
              *(double *)(v1519 + 14) = v1509;
              *(_WORD *)(v1519 + 22) = 2048;
              *(double *)(v1519 + 24) = v1510;
              v1520 = (char *)operator new();
              v1521 = *(unsigned __int8 *)(v1494 + 39);
              v1522 = v1696;
              if ((v1521 & 0x80u) != 0)
              {
                v1522 = *(const char **)(v1494 + 16);
                v1521 = *(_QWORD *)(v1494 + 24);
              }
              *(_QWORD *)v1520 = v1518;
              *(_OWORD *)(v1520 + 8) = *(_OWORD *)&oslog[8];
              *(_QWORD *)&oslog[8] = 0;
              *(_QWORD *)&oslog[16] = 0;
              *(_OWORD *)(v1520 + 24) = *(_OWORD *)&oslog[24];
              *(_QWORD *)&oslog[24] = 0;
              *(_QWORD *)&oslog[32] = 0;
              *((_QWORD *)v1520 + 5) = v1522;
              *((_QWORD *)v1520 + 6) = v1521;
              v1520[56] = 2;
              *(_QWORD *)&v1807[0] = 0;
              v1844[0] = v1520;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1493 + 24) + 40))(*(_QWORD *)(v1493 + 24), v1844);
              v1523 = v1844[0];
              v1844[0] = 0;
              if (v1523)
              {
                v1524 = (std::__shared_weak_count *)*((_QWORD *)v1523 + 4);
                if (v1524)
                {
                  v1525 = (unint64_t *)&v1524->__shared_owners_;
                  do
                    v1526 = __ldaxr(v1525);
                  while (__stlxr(v1526 - 1, v1525));
                  if (!v1526)
                  {
                    ((void (*)(std::__shared_weak_count *))v1524->__on_zero_shared)(v1524);
                    std::__shared_weak_count::__release_weak(v1524);
                  }
                }
                v1527 = (std::__shared_weak_count *)*((_QWORD *)v1523 + 2);
                if (v1527)
                {
                  v1528 = (unint64_t *)&v1527->__shared_owners_;
                  do
                    v1529 = __ldaxr(v1528);
                  while (__stlxr(v1529 - 1, v1528));
                  if (!v1529)
                  {
                    ((void (*)(std::__shared_weak_count *))v1527->__on_zero_shared)(v1527);
                    std::__shared_weak_count::__release_weak(v1527);
                  }
                }
                MEMORY[0x212BC6398](v1523, 0x10F0C40B62ED6C6);
                v1530 = *(_QWORD *)&v1807[0];
                *(_QWORD *)&v1807[0] = 0;
                if (v1530)
                {
                  v1531 = *(std::__shared_weak_count **)(v1530 + 32);
                  if (v1531)
                  {
                    v1532 = (unint64_t *)&v1531->__shared_owners_;
                    do
                      v1533 = __ldaxr(v1532);
                    while (__stlxr(v1533 - 1, v1532));
                    if (!v1533)
                    {
                      ((void (*)(std::__shared_weak_count *))v1531->__on_zero_shared)(v1531);
                      std::__shared_weak_count::__release_weak(v1531);
                    }
                  }
                  v1534 = *(std::__shared_weak_count **)(v1530 + 16);
                  if (v1534)
                  {
                    v1535 = (unint64_t *)&v1534->__shared_owners_;
                    do
                      v1536 = __ldaxr(v1535);
                    while (__stlxr(v1536 - 1, v1535));
                    if (!v1536)
                    {
                      ((void (*)(std::__shared_weak_count *))v1534->__on_zero_shared)(v1534);
                      std::__shared_weak_count::__release_weak(v1534);
                    }
                  }
                  MEMORY[0x212BC6398](v1530, 0x10F0C40B62ED6C6);
                }
              }
              v1537 = *(std::__shared_weak_count **)&oslog[32];
              if (*(_QWORD *)&oslog[32])
              {
                v1538 = (unint64_t *)(*(_QWORD *)&oslog[32] + 8);
                do
                  v1539 = __ldaxr(v1538);
                while (__stlxr(v1539 - 1, v1538));
                if (!v1539)
                {
                  ((void (*)(std::__shared_weak_count *))v1537->__on_zero_shared)(v1537);
                  std::__shared_weak_count::__release_weak(v1537);
                }
              }
              v1540 = *(std::__shared_weak_count **)&oslog[16];
              if (*(_QWORD *)&oslog[16])
              {
                v1541 = (unint64_t *)(*(_QWORD *)&oslog[16] + 8);
                do
                  v1542 = __ldaxr(v1541);
                while (__stlxr(v1542 - 1, v1541));
                if (!v1542)
                {
                  ((void (*)(std::__shared_weak_count *))v1540->__on_zero_shared)(v1540);
                  std::__shared_weak_count::__release_weak(v1540);
                }
              }
            }
            else
            {
              os_log_type_enabled(v1507, OS_LOG_TYPE_DEBUG);
              *(_DWORD *)oslog = 134218496;
              *(double *)&oslog[4] = v1508;
              *(_WORD *)&oslog[12] = 2048;
              *(double *)&oslog[14] = v1509;
              *(_WORD *)&oslog[22] = 2048;
              *(double *)&oslog[24] = v1510;
              v1543 = (void *)_os_log_send_and_compose_impl();
              if (v1543)
                free(v1543);
            }
            if (v1491)
            {
              sub_20E8C003C((uint64_t)v1796, "After optimize: Roll %f, pitch %f, Yaw %f", v1508, v1509, v1510);
              sub_20E863570((uint64_t)v1796);
            }
            sub_20E863570((uint64_t)v1796);
            v1544 = *(std::__shared_weak_count **)&v1796[64];
            if (*(_QWORD *)&v1796[64])
            {
              v1545 = (unint64_t *)(*(_QWORD *)&v1796[64] + 8);
              do
                v1546 = __ldaxr(v1545);
              while (__stlxr(v1546 - 1, v1545));
              if (!v1546)
              {
                ((void (*)(std::__shared_weak_count *))v1544->__on_zero_shared)(v1544);
                std::__shared_weak_count::__release_weak(v1544);
              }
            }
            goto LABEL_1868;
          }
        }
        memmove(v1501, v1499, v1500);
        goto LABEL_1801;
      }
    }
  }
LABEL_1868:
  *((_QWORD *)&v1763 + 1) = 0;
  if (v1762 != v1761 && v1762 != 0)
    MEMORY[0x212BC6368]();
  v1758 = 0;
  if (v1756 != v1755 && v1756)
    MEMORY[0x212BC6368]();
  *(_QWORD *)&v1754 = 0;
  if (v1752 != &v1733 && v1752)
    MEMORY[0x212BC6368]();
  *((_QWORD *)&v1732 + 1) = 0;
  if (object[74] != &object[10] && object[74])
    MEMORY[0x212BC6368]();
  if (SHIBYTE(object[5]) < 0)
  {
    operator delete(object[3]);
    if ((SHIBYTE(object[2]) & 0x80000000) == 0)
    {
LABEL_1884:
      sub_20E8D1F68((uint64_t)&v1721, v1722[0]);
      v1548 = (_QWORD *)v1723;
      v1723 = 0;
      if (!v1548)
        goto LABEL_1886;
      goto LABEL_1885;
    }
  }
  else if ((SHIBYTE(object[2]) & 0x80000000) == 0)
  {
    goto LABEL_1884;
  }
  operator delete(object[0]);
  sub_20E8D1F68((uint64_t)&v1721, v1722[0]);
  v1548 = (_QWORD *)v1723;
  v1723 = 0;
  if (v1548)
  {
LABEL_1885:
    v1549 = sub_20F63F644(v1548);
    MEMORY[0x212BC6398](v1549, 0x10F2C408963B0DFLL);
  }
LABEL_1886:
  if (v1790 < 0)
  {
    operator delete(v1789);
    if ((v1788 & 0x80000000) == 0)
    {
LABEL_1888:
      if ((v1786 & 0x80000000) == 0)
        goto LABEL_1889;
LABEL_1897:
      operator delete(v1785);
      v1550 = v1778;
      if (v1778 != v1777)
        goto LABEL_1890;
LABEL_1898:
      v1551 = 4;
      v1550 = v1777;
      goto LABEL_1899;
    }
  }
  else if ((v1788 & 0x80000000) == 0)
  {
    goto LABEL_1888;
  }
  operator delete(v1787);
  if (v1786 < 0)
    goto LABEL_1897;
LABEL_1889:
  v1550 = v1778;
  if (v1778 == v1777)
    goto LABEL_1898;
LABEL_1890:
  if (!v1550)
    goto LABEL_1900;
  v1551 = 5;
LABEL_1899:
  (*(void (**)(void))(*v1550 + 8 * v1551))();
LABEL_1900:
  v1552 = v1776;
  if (v1776 == v1775)
  {
    v1553 = 4;
    v1552 = v1775;
  }
  else
  {
    if (!v1776)
      goto LABEL_1905;
    v1553 = 5;
  }
  (*(void (**)(void))(*v1552 + 8 * v1553))();
LABEL_1905:
  v1554 = v1774;
  if (v1774 == v1773)
  {
    v1555 = 4;
    v1554 = v1773;
  }
  else
  {
    if (!v1774)
      goto LABEL_1910;
    v1555 = 5;
  }
  (*(void (**)(void))(*v1554 + 8 * v1555))();
LABEL_1910:
  v1556 = v1772;
  if (v1772 == v1771)
  {
    v1557 = 4;
    v1556 = v1771;
    goto LABEL_1914;
  }
  if (v1772)
  {
    v1557 = 5;
LABEL_1914:
    (*(void (**)(void))(*v1556 + 8 * v1557))();
  }
  v1770 = 0;
  result = (uint64_t)v1769;
  if (v1769 != &v1768 && v1769)
    return MEMORY[0x212BC6368]();
  return result;
}

void sub_20F483908(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x14D8]))
  {
    if (SLOBYTE(STACK[0x14D7]) < 0)
      operator delete((void *)STACK[0x14C0]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x11E8]);
  sub_20F2C524C((uint64_t)&STACK[0x2A0]);
  sub_20E8D1F68((uint64_t)&STACK[0x230], STACK[0x238]);
  sub_20F630600((_QWORD **)&STACK[0x248]);
  sub_20F6304A4((uint64_t)&STACK[0xB70]);
  _Unwind_Resume(a1);
}

uint64_t sub_20F4842B0(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count **v7;
  std::__shared_weak_count **v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  double *v14;
  double *v15;
  double v16;
  double v17;
  std::__shared_weak_count_vtbl *v18;
  uint64_t p_shared_owners;
  char *v20;
  double v21;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  size_t v28;
  const char *v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  const char *v32;
  size_t v33;
  void **v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  std::__shared_weak_count_vtbl *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  void (__cdecl **p_on_zero_shared_weak)(std::__shared_weak_count *__hidden);
  void *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  int64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  int v87;
  void (__cdecl *v88)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count_vtbl **on_zero_shared;
  char *v90;
  char *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t *v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  void **v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count *v106;
  uint64_t get_deleter;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  void *v111;
  std::__shared_weak_count *v112;
  _QWORD *v113;
  _QWORD *v114;
  void (__cdecl *v115)(std::__shared_weak_count *__hidden);
  double v116;
  double v117;
  double v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  size_t v124;
  const char *v125;
  unsigned __int8 v126;
  unsigned __int8 v127;
  const char *v128;
  size_t v129;
  void **v130;
  uint64_t v131;
  uint64_t v132;
  void **v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  double v137;
  double v138;
  double v139;
  size_t v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  float64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  void *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  void *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  uint64_t *v177;
  _QWORD *v178;
  std::__shared_weak_count_vtbl *v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t *v187;
  uint64_t *v188;
  char v189;
  char *v190;
  uint64_t v191;
  char *v192;
  uint64_t *v193;
  uint64_t v194;
  char *v195;
  char *v196;
  unint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  _BYTE *v204;
  _DWORD *v205;
  char *v206;
  int64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  _OWORD *v212;
  char *v213;
  uint64_t v214;
  __int128 v215;
  int v216;
  unint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  int v232;
  uint64_t *v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  __n128 v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  int v256;
  __int128 *v257;
  __int128 *v258;
  unint64_t v259;
  unint64_t v260;
  __int128 *v261;
  __int128 *v262;
  unsigned int v263;
  int v264;
  float64_t v265;
  float64_t v266;
  float64_t v267;
  float64_t v268;
  float64_t v269;
  float64_t v270;
  float64_t v271;
  float64_t v272;
  void *v273;
  int v274;
  unint64_t v275;
  char v276;
  unint64_t v277;
  _QWORD *v278;
  _QWORD *v279;
  void *v280;
  _QWORD *v281;
  _QWORD *v282;
  void *v283;
  char *v284;
  unint64_t v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  _BYTE *v293;
  _DWORD *v294;
  int64_t v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  _OWORD *v300;
  char *v301;
  uint64_t v302;
  __int128 v303;
  int v304;
  __n128 v305;
  uint64_t **v306;
  uint64_t *v307;
  uint64_t *v308;
  __int128 *v309;
  unsigned __int8 v310;
  BOOL v311;
  uint64_t v312;
  uint64_t i;
  unsigned __int8 v314;
  __int128 v315;
  uint64_t v316;
  _QWORD *v317;
  _QWORD *v318;
  uint64_t v319;
  uint64_t j;
  void *v321;
  void *v322;
  unint64_t v323;
  void *v324;
  void *v325;
  unint64_t v326;
  _QWORD *v327;
  unint64_t v328;
  char *v329;
  _QWORD *v330;
  _QWORD *v331;
  _QWORD *v332;
  _QWORD *v333;
  _QWORD *v334;
  void *v335;
  uint64_t v336;
  _QWORD *v337;
  _QWORD *v338;
  void *v339;
  float64_t v340;
  double v341;
  float64_t v342;
  uint64_t v343;
  uint64_t v344;
  unsigned int v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  unsigned int v349;
  unint64_t v350;
  unint64_t v351;
  uint64_t v352;
  unsigned int v353;
  uint64_t v355;
  int v356;
  uint64_t v357;
  char *v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t *v361;
  unint64_t v362;
  unint64_t v363;
  char *v364;
  char *v365;
  char *v366;
  char *v367;
  __int128 v368;
  _QWORD *v369;
  _QWORD *v370;
  uint64_t v371;
  std::__shared_weak_count **v372;
  uint64_t *v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  int v380;
  __int128 *v381;
  __int128 *v382;
  unint64_t v383;
  unint64_t v384;
  __int128 *v385;
  __int128 *v386;
  unsigned int v387;
  int v388;
  float64_t v389;
  float64_t v390;
  float64_t v391;
  float64_t v392;
  float64_t v393;
  float64_t v394;
  float64_t v395;
  float64_t v396;
  float64_t v397;
  int v398;
  unint64_t v399;
  char v400;
  unint64_t v401;
  _QWORD *v402;
  _QWORD *v403;
  void *v404;
  _QWORD *v405;
  _QWORD *v406;
  void *v407;
  char *v408;
  unint64_t v409;
  uint64_t v410;
  char *v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  unint64_t v416;
  _BYTE *v417;
  _DWORD *v418;
  int64_t v419;
  unint64_t v420;
  uint64_t v421;
  uint64_t v422;
  char *v423;
  _OWORD *v424;
  char *v425;
  uint64_t v426;
  __int128 v427;
  int v428;
  uint64_t **v429;
  uint64_t *v430;
  uint64_t *v431;
  __int128 *v432;
  unsigned __int8 v433;
  BOOL v434;
  uint64_t v435;
  uint64_t k;
  unsigned __int8 v437;
  __int128 v438;
  uint64_t v439;
  uint64_t v440;
  _QWORD *v441;
  unint64_t v442;
  char *v443;
  _QWORD *v444;
  _QWORD *v445;
  _QWORD *v446;
  _QWORD *v447;
  _QWORD *v448;
  void *v449;
  uint64_t v450;
  _QWORD *v451;
  _QWORD *v452;
  void *v453;
  float64_t v454;
  double v455;
  float64_t v456;
  uint64_t v457;
  uint64_t v458;
  unsigned int v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  unsigned int v463;
  unint64_t v464;
  unint64_t v465;
  uint64_t v466;
  unsigned int v467;
  BOOL v468;
  uint64_t v469;
  int v470;
  uint64_t v471;
  uint64_t *v472;
  char *v473;
  unint64_t v474;
  unint64_t v475;
  unint64_t v476;
  unint64_t v477;
  char *v478;
  char *v479;
  char *v480;
  char *v481;
  __int128 v482;
  char *v483;
  _QWORD *v484;
  _QWORD *v485;
  _QWORD *v486;
  _QWORD *v487;
  _QWORD *v488;
  _QWORD *v489;
  uint64_t v490;
  unsigned int v491;
  char *v492;
  char *v493;
  uint64_t v494;
  unint64_t v495;
  unint64_t v496;
  char *v497;
  char *v498;
  unsigned int v499;
  uint64_t v500;
  int v501;
  void *v502;
  BOOL v508;
  uint64_t *v509;
  uint64_t v510;
  double *v511;
  uint64_t v512;
  double *v513;
  double v515;
  float64x2_t v518;
  double v520;
  double v521;
  double v523;
  _QWORD *v534;
  _QWORD *v535;
  int v536;
  std::__shared_weak_count_vtbl *v537;
  int64x2_t *v538;
  void (__cdecl *v539)(std::__shared_weak_count *__hidden);
  void **v540;
  int64_t v541;
  char *v542;
  double v543;
  unint64_t *v544;
  char *v545;
  double v546;
  int64x2_t v547;
  uint64_t v548;
  int64x2_t *v549;
  unint64_t v550;
  unint64_t v551;
  unint64_t v552;
  unint64_t v553;
  unint64_t v554;
  uint64_t v555;
  char *v556;
  char *v557;
  float64_t v558;
  unsigned int v559;
  float64x2_t v560;
  float64x2_t v561;
  unint64_t v562;
  char *v563;
  uint64_t v564;
  unint64_t v565;
  char *v566;
  unint64_t v567;
  char *v568;
  unint64_t v569;
  char *v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  void **v576;
  uint64_t v577;
  unint64_t v578;
  unint64_t v579;
  void **v580;
  void **v581;
  unsigned int v582;
  uint64_t v583;
  uint64_t v584;
  unint64_t v585;
  char *v586;
  char *v587;
  char *v588;
  __int128 v589;
  __int128 v590;
  uint64_t v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  uint64_t v597;
  char *v598;
  std::__shared_weak_count *v599;
  unint64_t *v600;
  unint64_t v601;
  char *v602;
  std::__shared_weak_count *v603;
  unint64_t *v604;
  unint64_t v605;
  char *v606;
  char *v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  std::__shared_weak_count *v613;
  unint64_t *v614;
  unint64_t v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  uint64_t v620;
  __int128 v621;
  std::__shared_weak_count *v622;
  unint64_t *v623;
  unint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t *v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  int v636;
  int v637;
  char v638;
  std::__shared_weak_count *v639;
  unint64_t *v640;
  unint64_t v641;
  std::__shared_weak_count *v642;
  unint64_t *v643;
  unint64_t v644;
  int v645;
  std::__shared_weak_count *v646;
  unint64_t *v647;
  unint64_t v648;
  float64_t v649;
  unint64_t *v650;
  unint64_t v651;
  uint64_t *v652;
  unint64_t v653;
  int64x2_t *v654;
  float64_t v655;
  char *v656;
  char *v657;
  char *v658;
  unint64_t v659;
  char *v660;
  unint64_t v661;
  unint64_t *v662;
  unint64_t v663;
  char *v664;
  char *v665;
  char *v666;
  int64x2_t *v667;
  unint64_t v668;
  unint64_t v669;
  unsigned int *v670;
  char *v671;
  unsigned int v672;
  void **v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  unint64_t v677;
  unint64_t v678;
  unsigned int *v679;
  _DWORD *v680;
  unsigned int v681;
  uint64_t v682;
  unint64_t v683;
  char *v684;
  char *v685;
  char *v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  uint64_t v692;
  __int128 v693;
  __int128 v694;
  __int128 v695;
  __int128 v696;
  __int128 v697;
  __int128 v698;
  __int128 v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  __int128 v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  uint64_t v707;
  unint64_t v708;
  char *v709;
  std::__shared_weak_count *v710;
  unint64_t *v711;
  unint64_t v712;
  char *v713;
  std::__shared_weak_count *v714;
  unint64_t *v715;
  unint64_t v716;
  char *v717;
  char *v718;
  __int128 v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  uint64_t v724;
  __int128 v725;
  __int128 v726;
  __int128 v727;
  std::__shared_weak_count *v728;
  unint64_t *v729;
  unint64_t v730;
  __int128 v731;
  __int128 v732;
  __int128 v733;
  __int128 v734;
  __int128 v735;
  __int128 v736;
  __int128 v737;
  __int128 v738;
  __int128 v739;
  __int128 v740;
  __int128 v741;
  __int128 v742;
  uint64_t v743;
  __int128 v744;
  std::__shared_weak_count *v745;
  unint64_t *v746;
  unint64_t v747;
  char v748;
  std::__shared_weak_count *v749;
  unint64_t *v750;
  unint64_t v751;
  std::__shared_weak_count *v752;
  unint64_t *v753;
  unint64_t v754;
  uint64_t *v755;
  unint64_t v756;
  float64_t v757;
  unint64_t *v758;
  unint64_t v759;
  std::__shared_weak_count *v760;
  unint64_t *v761;
  unint64_t v762;
  uint64_t *v763;
  uint64_t v764;
  unint64_t v765;
  unint64_t v766;
  std::__shared_weak_count **v767;
  std::__shared_weak_count **v768;
  std::__shared_weak_count *v769;
  std::__shared_weak_count *v770;
  unint64_t v771;
  unint64_t shared_owners_low;
  BOOL v773;
  char v774;
  std::__shared_weak_count *v775;
  unint64_t v776;
  unint64_t v777;
  BOOL v778;
  char v779;
  char v780;
  std::__shared_weak_count *v781;
  std::__shared_weak_count *v782;
  uint64_t shared_weak_owners;
  std::__shared_weak_count *v784;
  std::__shared_weak_count_vtbl *v785;
  _BYTE *p_get_deleter;
  int get_deleter_low;
  uint64_t shared_owners;
  int v789;
  uint64_t *v790;
  uint64_t v791;
  std::__shared_weak_count_vtbl *v792;
  std::__shared_weak_count *v793;
  std::__shared_weak_count **v794;
  std::__shared_weak_count **v795;
  unint64_t v796;
  unint64_t v797;
  BOOL v798;
  char v799;
  char v800;
  std::__shared_weak_count *v801;
  std::__shared_weak_count *v802;
  uint64_t v803;
  std::__shared_weak_count *v804;
  std::__shared_weak_count_vtbl *v805;
  _BYTE *v806;
  int v807;
  uint64_t v808;
  int v809;
  uint64_t *v810;
  uint64_t v811;
  std::__shared_weak_count_vtbl *v812;
  std::__shared_weak_count *v813;
  uint64_t v814;
  uint64_t v815;
  __int128 v816;
  __n128 v817;
  __int128 v818;
  double v819;
  double v820;
  double v821;
  double v822;
  double v823;
  double v824;
  double v825;
  double v826;
  double v827;
  double v828;
  double v829;
  double v830;
  __n128 v831;
  double v832;
  __n128 v833;
  __n128 v834;
  __n128 v835;
  __n128 v836;
  __n128 v837;
  __n128 v838;
  __n128 v839;
  _QWORD *v840;
  _QWORD *v841;
  float64_t v842;
  unint64_t v843;
  _QWORD *v844;
  unint64_t v845;
  unint64_t *v846;
  unint64_t v847;
  _QWORD *v848;
  char v849;
  int64x2_t *v850;
  char *v851;
  char *v852;
  uint64_t v853;
  int64x2_t *v854;
  unint64_t v855;
  char *v856;
  unint64_t v857;
  unint64_t v858;
  unsigned int *v859;
  char *v860;
  unsigned int v861;
  uint64_t v862;
  unint64_t v863;
  unsigned int *v864;
  char *v865;
  unsigned int v866;
  uint64_t v867;
  uint64_t v868;
  int64_t v869;
  unint64_t v870;
  _QWORD *v871;
  _QWORD *v872;
  _QWORD *v873;
  __int128 v874;
  __int128 v875;
  __int128 v876;
  __int128 v877;
  __int128 v878;
  __int128 v879;
  __int128 v880;
  __int128 v881;
  __int128 v882;
  __int128 v883;
  uint64_t v884;
  _QWORD *v885;
  std::__shared_weak_count *v886;
  unint64_t *v887;
  unint64_t v888;
  _QWORD *v889;
  _QWORD *v890;
  __int128 v891;
  __int128 v892;
  __int128 v893;
  __int128 v894;
  __int128 v895;
  __int128 v896;
  __int128 v897;
  __int128 v898;
  __int128 v899;
  __int128 v900;
  uint64_t v901;
  __int128 v902;
  std::__shared_weak_count *v903;
  unint64_t *v904;
  unint64_t v905;
  std::__shared_weak_count *v906;
  unint64_t *v907;
  unint64_t v908;
  int v909;
  std::__shared_weak_count *v910;
  unint64_t *v911;
  unint64_t v912;
  uint64_t v913;
  void *v914;
  void *v915;
  std::ios_base *v916;
  char *v917;
  char *v918;
  char *v919;
  unint64_t v920;
  unint64_t v921;
  unsigned int *v922;
  char *v923;
  unsigned int v924;
  _QWORD *v925;
  uint64_t v926;
  uint64_t v927;
  _QWORD *v928;
  _QWORD *v929;
  int v930;
  uint64_t v931;
  unint64_t v932;
  char *v933;
  unint64_t v934;
  unint64_t v935;
  unsigned int *v936;
  char *v937;
  unsigned int v938;
  unint64_t v939;
  unsigned int *v940;
  char *v941;
  unsigned int v942;
  uint64_t v943;
  _QWORD *v944;
  uint64_t v945;
  uint64_t v946;
  _QWORD *v947;
  _QWORD *v948;
  _QWORD *v949;
  _QWORD *v950;
  const char *v951;
  uint64_t v952;
  _QWORD *v953;
  int v954;
  char *v955;
  char *v956;
  char *v957;
  uint64_t v958;
  uint64_t v959;
  _QWORD *v960;
  uint64_t v961;
  uint64_t v962;
  _QWORD *v963;
  _QWORD *v964;
  unint64_t v965;
  unint64_t v966;
  unsigned int *v967;
  char *v968;
  unsigned int v969;
  unint64_t v970;
  unint64_t v971;
  unsigned int *v972;
  char *v973;
  unsigned int v974;
  uint64_t v975;
  _QWORD *v976;
  uint64_t v977;
  uint64_t v978;
  _QWORD *v979;
  _QWORD *v980;
  _QWORD *v981;
  _QWORD *v982;
  const char *v983;
  uint64_t v984;
  _QWORD *v985;
  char *v986;
  char *v987;
  uint64_t v988;
  _QWORD *v989;
  uint64_t v990;
  uint64_t v991;
  _QWORD *v992;
  _QWORD *v993;
  unint64_t v994;
  unint64_t v995;
  unint64_t *v996;
  unint64_t v997;
  char *v998;
  _QWORD *v999;
  uint64_t v1000;
  uint64_t v1001;
  _QWORD *v1002;
  _QWORD *v1003;
  BOOL v1004;
  char v1005;
  size_t v1006;
  void *v1007;
  _QWORD *v1008;
  uint64_t v1009;
  uint64_t v1010;
  _QWORD *v1011;
  _QWORD *v1012;
  _BYTE *v1013;
  void **v1014;
  void *v1015;
  uint64_t v1016;
  uint64_t v1017;
  char v1018;
  unint64_t v1019;
  _BYTE *v1020;
  size_t v1021;
  unint64_t v1022;
  size_t v1023;
  unint64_t v1024;
  char *v1025;
  BOOL v1026;
  uint64_t v1027;
  char *v1028;
  unint64_t v1029;
  uint64_t v1030;
  char *v1031;
  char *v1032;
  char *v1033;
  size_t v1034;
  size_t v1035;
  unint64_t v1036;
  __int128 *v1037;
  unint64_t v1038;
  size_t v1039;
  unint64_t v1040;
  __int128 *v1041;
  unint64_t v1042;
  uint64_t v1043;
  char *v1044;
  char *v1045;
  char *v1046;
  char *v1047;
  char *v1048;
  size_t v1049;
  void **v1050;
  uint64_t v1051;
  unsigned __int8 v1052;
  uint64_t v1053;
  uint64_t m;
  unsigned __int8 v1055;
  int v1056;
  uint64_t v1057;
  unint64_t v1058;
  unint64_t v1059;
  unint64_t v1060;
  char *v1061;
  _QWORD *v1062;
  __int128 v1063;
  __int128 v1064;
  __n128 v1065;
  __int128 v1066;
  __int128 v1067;
  __int128 v1068;
  __int128 v1069;
  __int128 v1070;
  unint64_t v1071;
  float64_t v1072;
  uint64_t v1073;
  unint64_t v1074;
  char *v1075;
  char *v1076;
  _OWORD *v1077;
  uint64_t v1078;
  __int128 v1079;
  __n128 v1080;
  __int128 v1081;
  __n128 v1082;
  __int128 v1083;
  __int128 v1084;
  __int128 v1085;
  unint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  _OWORD *v1092;
  __int128 v1093;
  __int128 v1094;
  __int128 v1095;
  __int128 v1096;
  __int128 v1097;
  __int128 v1098;
  __int128 v1099;
  __int128 v1100;
  __int128 v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  __int128 v1105;
  __int128 v1106;
  __int128 v1107;
  __int128 v1108;
  __int128 v1109;
  __int128 v1110;
  __int128 v1111;
  __int128 v1112;
  uint64_t v1113;
  float64_t v1114;
  float64_t v1115;
  std::__shared_weak_count *v1116;
  unint64_t *v1117;
  unint64_t v1118;
  std::__shared_weak_count *v1119;
  unint64_t *v1120;
  unint64_t v1121;
  std::__shared_weak_count *v1122;
  unint64_t *v1123;
  unint64_t v1124;
  std::__shared_weak_count *v1125;
  uint64_t v1126;
  uint64_t v1127;
  __int128 v1128;
  uint64_t *v1129;
  uint64_t v1130;
  char v1131;
  double v1133;
  char v1134;
  int v1135;
  uint64_t v1136;
  uint64_t v1137;
  int v1138;
  double v1139;
  double v1140;
  double v1141;
  double v1142;
  double v1143;
  double v1144;
  _QWORD *v1145;
  const std::locale::facet *v1146;
  int v1147;
  __int128 *v1148;
  uint64_t v1149;
  size_t v1150;
  unint64_t v1151;
  _OWORD *v1152;
  uint64_t v1153;
  uint64_t v1154;
  unint64_t v1155;
  uint64_t *v1156;
  unint64_t v1157;
  _OWORD *v1158;
  __int128 *v1159;
  uint64_t v1160;
  __int128 v1161;
  uint64_t v1162;
  uint64_t v1163;
  double *v1164;
  double v1165;
  uint64_t jj;
  double *v1167;
  uint64_t v1168;
  double v1169;
  double v1170;
  _QWORD *v1171;
  const std::locale::facet *v1172;
  _QWORD *v1173;
  double v1174;
  uint64_t v1175;
  uint64_t v1176;
  double v1177;
  unsigned int v1178;
  uint64_t v1179;
  double *v1180;
  double v1181;
  double *v1182;
  unint64_t v1183;
  unint64_t v1184;
  float64x2_t *v1185;
  uint64_t v1186;
  float64x2_t v1187;
  float64x2_t v1188;
  double *v1189;
  double v1190;
  double v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  double *v1195;
  uint64_t v1196;
  double v1197;
  double v1198;
  int v1199;
  uint64_t v1200;
  double *v1201;
  int v1202;
  double v1203;
  void *v1204;
  double v1205;
  double v1206;
  double v1207;
  double v1208;
  double v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  __int128 v1213;
  __int128 v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  __int128 v1218;
  __int128 v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  __int128 v1226;
  __int128 v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  __int128 v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  __int128 v1236;
  __int128 v1237;
  __int128 v1238;
  __int128 v1239;
  __int128 v1240;
  __int128 v1241;
  __n128 v1242;
  __int128 v1243;
  uint64_t **n;
  uint64_t v1245;
  uint64_t ii;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  _OWORD *v1250;
  uint64_t v1251;
  __int128 v1252;
  uint64_t v1253;
  uint64_t v1254;
  __int128 v1255;
  __int128 v1256;
  unsigned int v1257;
  uint64_t v1258;
  _QWORD *v1259;
  _QWORD *v1260;
  const std::locale::facet *v1261;
  unint64_t v1262;
  unint64_t v1263;
  unint64_t v1264;
  char *v1265;
  _QWORD *v1266;
  const std::locale::facet *v1267;
  _QWORD *v1268;
  _QWORD *v1269;
  const std::locale::facet *v1270;
  _QWORD *v1271;
  const std::locale::facet *v1272;
  int v1273;
  unint64_t v1274;
  unint64_t v1275;
  unint64_t v1276;
  char *v1277;
  _QWORD *v1278;
  const std::locale::facet *v1279;
  char *v1280;
  __int128 v1281;
  __int128 v1282;
  void *v1283;
  void *v1284;
  __int128 v1285;
  __int128 v1286;
  __int128 v1287;
  __int128 v1288;
  void *v1289;
  char *v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  _QWORD *v1294;
  unint64_t v1295;
  char *v1296;
  __int128 v1297;
  __int128 v1298;
  __int128 v1299;
  __int128 v1300;
  __int128 v1301;
  __int128 v1302;
  void *v1303;
  char *v1304;
  char *v1305;
  uint64_t v1306;
  char *v1307;
  char *v1308;
  __int128 v1309;
  __int128 v1310;
  __int128 v1311;
  __int128 v1312;
  __int128 v1313;
  __int128 v1314;
  __int128 v1315;
  __int128 v1316;
  uint64_t v1317;
  char *v1318;
  __int128 v1319;
  __int128 v1320;
  uint64_t v1321;
  __int128 v1322;
  __int128 v1323;
  __int128 v1324;
  __int128 v1325;
  __int128 v1326;
  uint64_t v1327;
  char *v1328;
  void *v1329;
  std::__shared_weak_count *v1330;
  unint64_t *v1331;
  unint64_t v1332;
  std::__shared_weak_count *v1333;
  unint64_t *v1334;
  unint64_t v1335;
  std::__shared_weak_count *v1336;
  unint64_t *v1337;
  unint64_t v1338;
  std::__shared_weak_count *v1339;
  unint64_t *v1340;
  unint64_t v1341;
  std::__shared_weak_count *v1342;
  unint64_t *v1343;
  unint64_t v1344;
  char *v1345;
  __int128 v1346;
  __int128 v1347;
  __int128 v1348;
  __int128 v1349;
  __int128 v1350;
  __int128 v1351;
  __int128 v1352;
  void *v1353;
  __int128 v1354;
  __int128 v1355;
  __int128 v1356;
  __int128 v1357;
  __int128 v1358;
  __int128 v1359;
  __int128 v1360;
  __int128 v1361;
  __int128 v1362;
  __int128 v1363;
  __int128 v1364;
  __int128 v1365;
  void *v1366;
  char *v1367;
  uint64_t v1368;
  uint64_t v1369;
  float64_t *v1370;
  uint64_t v1371;
  float64x2_t v1372;
  _QWORD *v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  int64x2_t v1379;
  int64x2_t v1380;
  float64x2_t v1383;
  int8x16_t v1385;
  int8x16_t v1386;
  double v1387;
  float64x2_t v1390;
  int64x2_t v1391;
  float64x2_t v1392;
  float64x2_t v1393;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  int64x2_t v1399;
  int64x2_t v1400;
  float64x2_t v1403;
  int8x16_t v1405;
  int8x16_t v1406;
  double v1407;
  float64x2_t v1410;
  int64x2_t v1411;
  float64x2_t v1412;
  float64x2_t v1413;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  __int128 v1420;
  __int128 v1421;
  __int128 v1422;
  uint64_t v1423;
  uint64_t kk;
  uint64_t v1425;
  uint64_t v1426;
  float64x2_t v1427;
  float64x2_t v1428;
  uint64_t v1429;
  uint64_t *v1430;
  uint64_t v1431;
  float64x2_t *v1432;
  uint64_t v1433;
  float64x2_t *v1434;
  double v1436;
  float64x2_t v1439;
  float64x2_t v1440;
  float64x2_t v1443;
  uint64_t v1444;
  uint64_t mm;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  __int128 v1451;
  uint64_t v1452;
  _QWORD *v1453;
  _QWORD *v1454;
  uint64_t v1455;
  uint64_t nn;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  _OWORD *v1460;
  __int128 v1461;
  __int128 v1462;
  __int128 v1463;
  __int128 v1464;
  __int128 v1465;
  __int128 v1466;
  __int128 v1467;
  __int128 v1468;
  __int128 v1469;
  __int128 v1470;
  _QWORD *v1471;
  _QWORD *v1472;
  uint64_t v1473;
  uint64_t i1;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  __int128 v1479;
  __int128 v1480;
  __int128 v1481;
  _QWORD *v1482;
  _QWORD *v1483;
  uint64_t v1484;
  uint64_t i2;
  void (__cdecl *v1486)(std::__shared_weak_count *__hidden);
  double v1487;
  double v1488;
  double v1489;
  int v1490;
  unint64_t v1491;
  unint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  size_t v1495;
  const char *v1496;
  unsigned __int8 v1497;
  unsigned __int8 v1498;
  const char *v1499;
  size_t v1500;
  _BYTE *v1501;
  uint64_t v1502;
  uint64_t v1503;
  _BYTE *v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  NSObject *v1508;
  double v1509;
  double v1510;
  double v1511;
  size_t v1512;
  std::__shared_weak_count_vtbl *v1513;
  std::__shared_weak_count *v1514;
  std::__shared_weak_count *v1515;
  unint64_t *v1516;
  unint64_t v1517;
  unint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  char *v1521;
  uint64_t v1522;
  uint64_t v1523;
  void *v1524;
  std::__shared_weak_count *v1525;
  unint64_t *v1526;
  unint64_t v1527;
  std::__shared_weak_count *v1528;
  unint64_t *v1529;
  unint64_t v1530;
  uint64_t v1531;
  std::__shared_weak_count *v1532;
  unint64_t *v1533;
  unint64_t v1534;
  std::__shared_weak_count *v1535;
  unint64_t *v1536;
  unint64_t v1537;
  std::__shared_weak_count *v1538;
  unint64_t *v1539;
  unint64_t v1540;
  std::__shared_weak_count *v1541;
  unint64_t *v1542;
  unint64_t v1543;
  void *v1544;
  float64_t v1545;
  unint64_t *v1546;
  unint64_t v1547;
  _QWORD *v1549;
  _QWORD *v1550;
  _QWORD *v1551;
  uint64_t v1552;
  _QWORD *v1553;
  uint64_t v1554;
  _QWORD *v1555;
  uint64_t v1556;
  _QWORD *v1557;
  uint64_t v1558;
  uint64_t result;
  unint64_t v1560;
  char *v1561;
  __int128 v1562;
  __int128 v1563;
  __int128 v1564;
  __int128 v1565;
  __int128 v1566;
  __int128 v1567;
  __int128 v1568;
  __int128 v1569;
  __int128 v1570;
  __int128 v1571;
  __int128 v1572;
  __int128 v1573;
  __int128 v1574;
  __int128 v1575;
  __int128 v1576;
  void *v1577;
  _QWORD *v1578;
  char *v1579;
  char *v1580;
  char *v1581;
  char *v1582;
  __int128 v1583;
  __int128 v1584;
  __int128 v1585;
  __int128 v1586;
  __int128 v1587;
  uint64_t v1588;
  __int128 v1589;
  __int128 v1590;
  uint64_t v1591;
  unint64_t *v1592;
  unint64_t v1593;
  __int128 v1594;
  __int128 v1595;
  uint64_t v1596;
  __int128 v1597;
  __int128 v1598;
  __int128 v1599;
  __int128 v1600;
  __int128 v1601;
  __int128 v1602;
  __int128 v1603;
  __int128 v1604;
  __int128 v1605;
  uint64_t v1606;
  uint64_t v1607;
  unint64_t *v1608;
  unint64_t v1609;
  char *v1610;
  __int128 v1611;
  __int128 v1612;
  __int128 v1613;
  __int128 v1614;
  __int128 v1615;
  uint64_t v1616;
  __int128 v1617;
  __int128 v1618;
  uint64_t v1619;
  unint64_t *v1620;
  unint64_t v1621;
  __int128 v1622;
  __int128 v1623;
  __int128 v1624;
  __int128 v1625;
  __int128 v1626;
  __int128 v1627;
  __int128 v1628;
  __int128 v1629;
  __int128 v1630;
  __int128 v1631;
  __int128 v1632;
  __int128 v1633;
  uint64_t v1634;
  uint64_t v1635;
  unint64_t *v1636;
  unint64_t v1637;
  char *v1638;
  void *v1639;
  std::__shared_weak_count *v1640;
  unint64_t *v1641;
  unint64_t v1642;
  std::__shared_weak_count *v1643;
  unint64_t *v1644;
  unint64_t v1645;
  std::__shared_weak_count *v1646;
  unint64_t *v1647;
  unint64_t v1648;
  std::__shared_weak_count *v1649;
  unint64_t *v1650;
  unint64_t v1651;
  std::__shared_weak_count *v1652;
  unint64_t *v1653;
  unint64_t v1654;
  void **v1655;
  double v1656;
  __int128 v1657;
  unint64_t v1658;
  int v1659;
  std::__shared_weak_count **v1660;
  _QWORD *v1661;
  uint64_t v1662;
  float64_t v1663;
  void *v1664;
  void *v1665;
  void *v1666;
  uint64_t v1667;
  void *v1668;
  uint64_t v1669;
  void **v1670;
  void *v1671;
  void **v1672;
  void *v1673;
  void *v1674;
  uint64_t v1675;
  void *v1676;
  uint64_t v1677;
  void *v1678;
  void *v1679;
  char **v1680;
  _BYTE *v1681;
  _BYTE *v1682;
  char v1683;
  void *v1684;
  char v1685;
  float64_t v1686;
  uint64_t *v1687;
  _QWORD *__sb;
  char __sba;
  float64_t __sbb;
  double **__sbc;
  int8x16_t v1692;
  std::__shared_weak_count_vtbl *v1693;
  uint64_t v1694;
  void *__dst[2];
  uint64_t __dsta;
  uint64_t v1697;
  int8x16_t v1698;
  char *v1699;
  char *v1700;
  int8x16_t v1701;
  char *v1702;
  __int128 v1703;
  unsigned int v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  int8x16_t v1708;
  int64_t v1709;
  int64x2_t *v1710;
  uint64_t v1711;
  uint64_t v1712;
  std::__shared_weak_count **v1713;
  std::__shared_weak_count *v1714;
  uint64_t v1715;
  uint64_t v1716;
  std::__shared_weak_count *v1717;
  uint64_t *v1718;
  uint64_t v1719[2];
  uint64_t v1720;
  _QWORD v1721[3];
  std::__shared_weak_count *v1722;
  uint64_t v1723;
  std::__shared_weak_count *v1724;
  unint64_t v1725;
  char v1726;
  __int128 v1727;
  void *object[75];
  __int128 v1729;
  __int128 v1730;
  __n128 v1731;
  __n128 v1732;
  __int128 v1733;
  __int128 v1734;
  __int128 v1735;
  __n128 v1736;
  char v1737;
  __int128 v1738;
  __int128 v1739;
  __int128 v1740;
  __int128 v1741;
  __int128 v1742;
  __int128 v1743;
  __n128 v1744;
  unint64_t v1745;
  char v1746;
  __int128 v1747;
  char v1748;
  void *v1749;
  unint64_t v1750;
  __int128 v1751;
  _BYTE v1752[512];
  _BYTE *v1753;
  uint64_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  _BYTE v1758[512];
  _BYTE *v1759;
  __int128 v1760;
  _DWORD v1761[2];
  char v1762;
  int64x2_t v1763;
  uint64_t v1764;
  uint64_t v1765;
  uint64_t *v1766;
  uint64_t v1767;
  _QWORD v1768[3];
  _QWORD *v1769;
  _BYTE v1770[24];
  _BYTE *v1771;
  _BYTE v1772[24];
  _BYTE *v1773;
  _BYTE v1774[24];
  _BYTE *v1775;
  uint64_t v1776;
  char v1777;
  char v1778;
  char v1779;
  char v1780;
  char v1781;
  void *v1782;
  char v1783;
  void *v1784;
  char v1785;
  void *v1786;
  char v1787;
  char v1788;
  char v1789;
  unsigned __int8 v1790;
  char v1791;
  int v1792;
  float64x2_t v1793[18];
  void *v1794;
  int v1795;
  char v1796;
  __int128 v1797;
  __int128 v1798;
  __n128 v1799;
  __n128 v1800;
  __int128 v1801;
  __int128 v1802;
  __int128 v1803;
  __n128 v1804;
  _OWORD v1805[18];
  _BYTE oslog[592];
  __int128 v1807;
  __int128 v1808;
  __n128 v1809;
  __n128 v1810;
  __int128 v1811;
  __int128 v1812;
  __int128 v1813;
  __n128 v1814;
  char v1815;
  __int128 v1816;
  __int128 v1817;
  __int128 v1818;
  __int128 v1819;
  __int128 v1820;
  __int128 v1821;
  __n128 v1822;
  unint64_t v1823;
  char v1824;
  uint64_t v1825;
  std::__shared_weak_count *v1826;
  char v1827;
  __int128 v1828;
  __int128 v1829;
  __n128 v1830;
  __int128 v1831;
  __int128 v1832;
  __int128 v1833;
  __int128 v1834;
  __int128 v1835;
  __n128 v1836;
  __n128 v1837;
  __int128 v1838;
  __int128 v1839;
  __int128 v1840;
  __n128 v1841;
  void *v1842[40];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v1667 = v6;
  v8 = v7;
  v10 = v9;
  v11 = v1;
  v1842[37] = *(void **)MEMORY[0x24BDAC8D0];
  v1721[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v1721[1] = 0;
  sub_20F49BCEC((uint64_t)v1761);
  v1763 = vdupq_n_s64(0x3E45798EE2308C3AuLL);
  v12 = *(_QWORD *)(v11 + 16);
  v1761[0] = 1;
  v1761[1] = v12;
  v1762 = v3;
  v1764 = 0x3E45798EE2308C3ALL;
  v1776 = 0x3DDB7CDFD9D7BDBBLL;
  v1777 = *(_BYTE *)(v11 + 163);
  v1781 = *(_BYTE *)(v11 + 164);
  v1779 = *(_BYTE *)(v11 + 165);
  v1780 = *(_BYTE *)(v11 + 166);
  v1778 = *(_BYTE *)(v11 + 167);
  v1788 = *(_BYTE *)(v11 + 7);
  v1789 = 1;
  v1792 = *(_QWORD *)(v11 + 40);
  v1791 = *(_BYTE *)(v11 + 5);
  v1675 = v11;
  v13 = *(unsigned __int8 *)(v11 + 162);
  v1790 = *(_BYTE *)(v11 + 162);
  v1669 = v5;
  if (!v5
    && !v13
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/MapOptimizationUtil.cpp", 95, (uint64_t)"minimizer_parameters.use_IMU", 28, (uint64_t)"Offline BA not supported for vision-only SLAM", 45, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = (double *)v10[6];
  v15 = (double *)v10[7];
  v1660 = v8;
  v1659 = v3;
  if (v14 != v15)
  {
    __sb = v10;
    v16 = *v14;
    v17 = *(v15 - 7);
    memset(v1842, 0, 24);
    v18 = (*v8)[2].__vftable;
    p_shared_owners = (uint64_t)&(*v8)[2].__shared_owners_;
    if (v18 == (std::__shared_weak_count_vtbl *)p_shared_owners)
    {
      v20 = 0;
      v92 = v8[1];
      v94 = &v92->__shared_owners_;
      v93 = v92->__vftable;
      if ((uint64_t *)v92->__vftable != &v92->__shared_owners_)
        goto LABEL_141;
      goto LABEL_154;
    }
    v20 = 0;
    v1697 = (uint64_t)&(*v8)[2].__shared_owners_;
    while (1)
    {
      v21 = *((double *)v18[1].~__shared_weak_count_0 + 102);
      if (v21 >= v16 && v21 <= v17)
        goto LABEL_119;
      sub_20F49BBF8(&v1834);
      if (**(int **)(v1834 + 56) <= 4)
      {
        v23 = *(unsigned __int8 *)(v1834 + 72);
        v24 = sub_20E8C31DC(v1834, "OSLogSurrogateAppender", 1, 0);
        v25 = v24;
        _ZF = !v23 && v24 == 0;
        if (!_ZF)
          break;
      }
LABEL_103:
      p_on_zero_shared_weak = &v18->__on_zero_shared_weak;
      if (v20 >= v1842[2])
      {
        v78 = (char *)v1842[0];
        v79 = (v20 - (char *)v1842[0]) >> 4;
        v80 = v79 + 1;
        if ((unint64_t)(v79 + 1) >> 60)
          sub_20E867F44();
        v81 = (char *)v1842[2] - (char *)v1842[0];
        if (((char *)v1842[2] - (char *)v1842[0]) >> 3 > v80)
          v80 = v81 >> 3;
        if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0)
          v82 = 0xFFFFFFFFFFFFFFFLL;
        else
          v82 = v80;
        if (v82)
        {
          if (v82 >> 60)
            sub_20E877A38();
          v83 = (char *)operator new(16 * v82);
          v84 = &v83[16 * v79];
          *(_OWORD *)v84 = *(_OWORD *)p_on_zero_shared_weak;
          v85 = v84;
          if (v20 != v78)
            goto LABEL_114;
LABEL_126:
          v8 = v1660;
          v3 = v1659;
          v77 = v84 + 16;
          v1842[0] = v85;
          v1842[1] = v84 + 16;
          v1842[2] = &v83[16 * v82];
          if (!v20)
            goto LABEL_118;
        }
        else
        {
          v83 = 0;
          v84 = (char *)(16 * v79);
          *(_OWORD *)(16 * v79) = *(_OWORD *)p_on_zero_shared_weak;
          v85 = (char *)(16 * v79);
          if (v20 == v78)
            goto LABEL_126;
LABEL_114:
          v8 = v1660;
          v3 = v1659;
          do
          {
            v86 = *((_QWORD *)v20 - 2);
            v20 -= 16;
            v87 = *((_DWORD *)v20 + 2);
            *((_QWORD *)v85 - 2) = v86;
            v85 -= 16;
            *((_DWORD *)v85 + 2) = v87;
          }
          while (v20 != v78);
          v20 = (char *)v1842[0];
          v77 = v84 + 16;
          v1842[0] = v85;
          v1842[1] = v84 + 16;
          v1842[2] = &v83[16 * v82];
          if (!v20)
            goto LABEL_118;
        }
        operator delete(v20);
        goto LABEL_118;
      }
      *(_OWORD *)v20 = *(_OWORD *)p_on_zero_shared_weak;
      v77 = v20 + 16;
      v8 = v1660;
LABEL_118:
      v1842[1] = v77;
      v20 = (char *)v77;
LABEL_119:
      v88 = v18->~__shared_weak_count_0;
      if (v88)
      {
        do
        {
          on_zero_shared = (std::__shared_weak_count_vtbl **)v88;
          v88 = *(void (__cdecl **)(std::__shared_weak_count *__hidden))v88;
        }
        while (v88);
      }
      else
      {
        do
        {
          on_zero_shared = (std::__shared_weak_count_vtbl **)v18->__on_zero_shared;
          _ZF = *on_zero_shared == v18;
          v18 = (std::__shared_weak_count_vtbl *)on_zero_shared;
        }
        while (!_ZF);
      }
      v18 = (std::__shared_weak_count_vtbl *)on_zero_shared;
      if (on_zero_shared == (std::__shared_weak_count_vtbl **)p_shared_owners)
      {
        v90 = (char *)v1842[0];
        if (v1842[0] != v20)
        {
          v91 = (char *)v1842[0];
          do
          {
            if ((sub_20F49BEDC(v1660, *(_QWORD *)v91, *((_QWORD *)v91 + 1)) & 1) == 0
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/MapOptimizationUtil.cpp", 114, (uint64_t)"ret", 3, (uint64_t)"Fail to remove state", 20, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v91 += 16;
          }
          while (v91 != v20);
          v20 = v90;
          v8 = v1660;
          v3 = v1659;
        }
        v92 = v8[1];
        v94 = &v92->__shared_owners_;
        v93 = v92->__vftable;
        if ((uint64_t *)v92->__vftable != &v92->__shared_owners_)
        {
LABEL_141:
          v95 = *(_QWORD *)(v1675 + 40);
          do
          {
            if (v95 > (uint64_t)(*((_QWORD *)v93[1].~__shared_weak_count_0 + 68)
                               - *((_QWORD *)v93[1].~__shared_weak_count_0 + 67)) >> 5)
            {
              v96 = sub_20F2DFE8C(v92, (uint64_t *)&v93->__on_zero_shared_weak);
            }
            else
            {
              v97 = (uint64_t *)v93->~__shared_weak_count_0;
              if (v97)
              {
                do
                {
                  v96 = v97;
                  v97 = (uint64_t *)*v97;
                }
                while (v97);
              }
              else
              {
                do
                {
                  v96 = (uint64_t *)v93->__on_zero_shared;
                  _ZF = *v96 == (_QWORD)v93;
                  v93 = (std::__shared_weak_count_vtbl *)v96;
                }
                while (!_ZF);
              }
            }
            v93 = (std::__shared_weak_count_vtbl *)v96;
          }
          while (v96 != v94);
          v20 = (char *)v1842[0];
          v8 = v1660;
          if (!v1842[0])
          {
LABEL_156:
            v10 = __sb;
            goto LABEL_157;
          }
LABEL_155:
          v1842[1] = v20;
          operator delete(v20);
          goto LABEL_156;
        }
LABEL_154:
        if (!v20)
          goto LABEL_156;
        goto LABEL_155;
      }
    }
    *(_QWORD *)oslog = &v1834;
    *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
    *(_DWORD *)&oslog[24] = 4;
    *(_QWORD *)&oslog[32] = "unknown file";
    *(_DWORD *)&oslog[40] = 107;
    *(_QWORD *)&oslog[48] = "unknown function";
    *(_QWORD *)&oslog[56] = 0;
    *(_QWORD *)&oslog[64] = 0;
    v27 = **(_QWORD **)oslog;
    if (*(char *)(**(_QWORD **)oslog + 39) < 0)
    {
      v29 = *(const char **)(v27 + 16);
      v28 = *(_QWORD *)(v27 + 24);
      v1705 = **(_QWORD **)oslog + 16;
      v31 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v31 & 1) != 0)
        goto LABEL_21;
    }
    else
    {
      v28 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
      v29 = (const char *)(**(_QWORD **)oslog + 16);
      v1705 = (uint64_t)v29;
      v30 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v30 & 1) != 0)
        goto LABEL_21;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v1793);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v1793);
      if (LOBYTE(v1793[1].f64[1]) && SHIBYTE(v1793[1].f64[0]) < 0)
        operator delete(*(void **)&v1793[0].f64[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
      v3 = v1659;
    }
LABEL_21:
    if (byte_254A4A4F8[23] >= 0)
      v32 = byte_254A4A4F8;
    else
      v32 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v33 = byte_254A4A4F8[23];
    else
      v33 = *(_QWORD *)&byte_254A4A4F8[8];
    object[0] = os_log_create(v32, v29);
    if (v33 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v33 >= 0x17)
    {
      v35 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v33 | 7) != 0x17)
        v35 = v33 | 7;
      v36 = v35 + 1;
      v34 = (void **)operator new(v35 + 1);
      object[3] = (void *)(v36 | 0x8000000000000000);
      object[1] = v34;
      object[2] = (void *)v33;
      v3 = v1659;
    }
    else
    {
      HIBYTE(object[3]) = v33;
      v34 = &object[1];
      if (!v33)
      {
LABEL_35:
        *((_BYTE *)v34 + v33) = 0;
        LOBYTE(object[4]) = 1;
        if (v28 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        p_shared_owners = v1697;
        if (v28 >= 0x17)
        {
          v39 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v28 | 7) != 0x17)
            v39 = v28 | 7;
          v40 = v39 + 1;
          v37 = (void **)operator new(v39 + 1);
          object[7] = (void *)(v40 | 0x8000000000000000);
          object[5] = v37;
          object[6] = (void *)v28;
          v3 = v1659;
        }
        else
        {
          HIBYTE(object[7]) = v28;
          v37 = &object[5];
          if (!v28)
          {
            LOBYTE(object[5]) = 0;
            LOBYTE(object[8]) = 1;
            v38 = object[0];
            if ((SHIBYTE(object[7]) & 0x80000000) == 0)
              goto LABEL_39;
            goto LABEL_45;
          }
        }
        memmove(v37, v29, v28);
        *((_BYTE *)v37 + v28) = 0;
        LOBYTE(object[8]) = 1;
        v38 = object[0];
        if ((SHIBYTE(object[7]) & 0x80000000) == 0)
        {
LABEL_39:
          if (!LOBYTE(object[4]))
            goto LABEL_48;
          goto LABEL_46;
        }
LABEL_45:
        operator delete(object[5]);
        if (!LOBYTE(object[4]))
        {
LABEL_48:
          if (object[0])
            os_release(object[0]);
          if (v25 && *(_QWORD *)(v25 + 24))
          {
            v41 = _os_log_pack_size();
            v42 = (std::__shared_weak_count_vtbl *)operator new(v41, (std::align_val_t)8uLL);
            v43 = (std::__shared_weak_count *)operator new();
            v44 = v43;
            v43->__shared_owners_ = 0;
            v45 = (unint64_t *)&v43->__shared_owners_;
            v43->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v43->__shared_weak_owners_ = 0;
            v43[1].__vftable = v42;
            object[0] = v42;
            object[1] = v42;
            object[2] = v43;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            memset(&object[3], 0, 24);
            do
              v47 = __ldaxr(v45);
            while (__stlxr(v47 - 1, v45));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v44);
            }
            v48 = object[0];
            *(_WORD *)_os_log_pack_fill() = 0;
            v49 = operator new();
            v50 = *(unsigned __int8 *)(v27 + 39);
            v51 = v1705;
            if ((v50 & 0x80u) != 0)
            {
              v51 = *(_QWORD *)(v27 + 16);
              v50 = *(_QWORD *)(v27 + 24);
            }
            *(_QWORD *)v49 = v48;
            *(_OWORD *)(v49 + 8) = *(_OWORD *)&object[1];
            object[1] = 0;
            object[2] = 0;
            *(_OWORD *)(v49 + 24) = *(_OWORD *)&object[3];
            object[3] = 0;
            object[4] = 0;
            *(_QWORD *)(v49 + 40) = v51;
            *(_QWORD *)(v49 + 48) = v50;
            *(_BYTE *)(v49 + 56) = 16;
            *(_QWORD *)&v1805[0] = 0;
            *(_QWORD *)&v1793[0].f64[0] = v49;
            (*(void (**)(_QWORD, float64x2_t *))(**(_QWORD **)(v25 + 24) + 40))(*(_QWORD *)(v25 + 24), v1793);
            v52 = v1793[0].f64[0];
            v1793[0].f64[0] = 0.0;
            if (v52 != 0.0)
            {
              v53 = *(std::__shared_weak_count **)(*(_QWORD *)&v52 + 32);
              if (v53)
              {
                v54 = (unint64_t *)&v53->__shared_owners_;
                do
                  v55 = __ldaxr(v54);
                while (__stlxr(v55 - 1, v54));
                if (!v55)
                {
                  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                  std::__shared_weak_count::__release_weak(v53);
                }
              }
              v56 = *(std::__shared_weak_count **)(*(_QWORD *)&v52 + 16);
              if (v56)
              {
                v57 = (unint64_t *)&v56->__shared_owners_;
                do
                  v58 = __ldaxr(v57);
                while (__stlxr(v58 - 1, v57));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                  std::__shared_weak_count::__release_weak(v56);
                }
              }
              MEMORY[0x212BC6398](*(_QWORD *)&v52, 0x10F0C40B62ED6C6);
              v59 = *(_QWORD *)&v1805[0];
              *(_QWORD *)&v1805[0] = 0;
              if (v59)
              {
                v60 = *(std::__shared_weak_count **)(v59 + 32);
                if (v60)
                {
                  v61 = (unint64_t *)&v60->__shared_owners_;
                  do
                    v62 = __ldaxr(v61);
                  while (__stlxr(v62 - 1, v61));
                  if (!v62)
                  {
                    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                    std::__shared_weak_count::__release_weak(v60);
                  }
                }
                v63 = *(std::__shared_weak_count **)(v59 + 16);
                if (v63)
                {
                  v64 = (unint64_t *)&v63->__shared_owners_;
                  do
                    v65 = __ldaxr(v64);
                  while (__stlxr(v65 - 1, v64));
                  if (!v65)
                  {
                    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                    std::__shared_weak_count::__release_weak(v63);
                  }
                }
                MEMORY[0x212BC6398](v59, 0x10F0C40B62ED6C6);
              }
            }
            v66 = (std::__shared_weak_count *)object[4];
            if (object[4])
            {
              v67 = (unint64_t *)((char *)object[4] + 8);
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
            v69 = (std::__shared_weak_count *)object[2];
            if (object[2])
            {
              v70 = (unint64_t *)((char *)object[2] + 8);
              do
                v71 = __ldaxr(v70);
              while (__stlxr(v71 - 1, v70));
              if (!v71)
              {
                ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                std::__shared_weak_count::__release_weak(v69);
              }
            }
          }
          else
          {
            os_log_type_enabled(v38, OS_LOG_TYPE_ERROR);
            LOWORD(object[0]) = 0;
            LODWORD(v1656) = 2;
            v1655 = object;
            v72 = (void *)_os_log_send_and_compose_impl();
            if (v72)
              free(v72);
          }
          if (v23)
          {
            sub_20E8C003C((uint64_t)oslog, "IMU buffer does not cover the map-database. Please check the IMUdata");
            sub_20E863570((uint64_t)oslog);
          }
          sub_20E863570((uint64_t)oslog);
          v73 = *(std::__shared_weak_count **)&oslog[64];
          if (*(_QWORD *)&oslog[64])
          {
            v74 = (unint64_t *)(*(_QWORD *)&oslog[64] + 8);
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          v20 = (char *)v1842[1];
          goto LABEL_103;
        }
LABEL_46:
        if (SHIBYTE(object[3]) < 0)
          operator delete(object[1]);
        goto LABEL_48;
      }
    }
    memmove(v34, v32, v33);
    goto LABEL_35;
  }
LABEL_157:
  v1720 = 0;
  if (v3)
  {
    object[0] = &off_24CA01CE8;
    object[1] = v1721;
    object[2] = &v1720;
    object[3] = object;
    sub_20EDB40D8(object, v1768);
    v99 = (void **)object[3];
    if (object[3] == object)
    {
      v100 = 4;
      v99 = object;
    }
    else
    {
      if (!object[3])
        goto LABEL_163;
      v100 = 5;
    }
    (*((void (**)(void **, uint64_t))*v99 + v100))(v99, v98);
  }
LABEL_163:
  if (*(unsigned __int8 *)(v1675 + 165) | *(unsigned __int8 *)(v1675 + 166))
  {
    v105 = v8[5];
    v106 = v8[6];
    while (v105 != v106)
    {
      if (!v105->__on_zero_shared_weak)
      {
        get_deleter = (uint64_t)v105->__get_deleter;
        v108 = operator new();
        sub_20E972DB4(v108, get_deleter);
        memcpy((void *)(v108 + 1000), (const void *)(get_deleter + 1000), 0x1B8uLL);
        v109 = (uint64_t *)&v105->__on_zero_shared_weak;
        v110 = *v109;
        object[0] = 0;
        *v109 = v108;
        if (v110)
        {
          sub_20E8E931C((uint64_t)v109, v110);
          v111 = object[0];
          object[0] = 0;
          if (v111)
            sub_20E8E931C((uint64_t)object, (uint64_t)v111);
        }
        v8 = v1660;
      }
      v105 = (std::__shared_weak_count *)((char *)v105 + 16);
    }
  }
  v101 = *v8;
  v102 = *v8 + 3;
  v1719[1] = 0;
  v1719[0] = 0;
  v1718 = v1719;
  if (v1791)
  {
    v103 = v8[1];
    object[0] = 0;
    object[1] = v101;
    memset(&object[3], 0, 72);
    object[2] = v103;
    object[12] = v102;
    object[13] = &v101[3].__shared_owners_;
    object[15] = 0;
    object[14] = 0;
    object[16] = v8 + 5;
    object[17] = v8 + 10;
  }
  else
  {
    v112 = v8[1];
    object[0] = v8[8];
    object[1] = v101;
    memset(&object[3], 0, 72);
    object[2] = v112;
    object[12] = v102;
    object[13] = &v101[3].__shared_owners_;
    object[14] = 0;
    object[15] = v10;
    object[16] = v8 + 5;
    object[17] = 0;
  }
  v104 = operator new();
  sub_20F72FC04((uint64_t *)v104, (__int128 *)object, (uint64_t)v1761);
  *(_QWORD *)(v104 + 23232) = *(_QWORD *)(v104 + 2160);
  *(_DWORD *)(v104 + 6644) = 1;
  v113 = (_QWORD *)v1720;
  v1720 = v104;
  if (v113)
  {
    v114 = sub_20F7307F4(v113);
    MEMORY[0x212BC6398](v114, 0x10F2C40DA2C9B81);
  }
  if ((*v8)[2].__shared_weak_owners_)
  {
    v115 = (*v8)[2].__vftable[1].~__shared_weak_count_0;
    v116 = atan2(-*((double *)v115 + 5), *((long double *)v115 + 8));
    v117 = asin(*((long double *)v115 + 2));
    v118 = atan2(-*((double *)v115 + 1), *(long double *)v115);
    sub_20F49BBF8(v1805);
    if (**(int **)(*(_QWORD *)&v1805[0] + 56) <= 2)
    {
      v119 = *(unsigned __int8 *)(*(_QWORD *)&v1805[0] + 72);
      v120 = sub_20E8C31DC(*(uint64_t *)&v1805[0], "OSLogSurrogateAppender", 1, 0);
      v121 = v120;
      if (v119 || v120)
      {
        *(_QWORD *)oslog = v1805;
        *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
        *(_DWORD *)&oslog[24] = 2;
        *(_QWORD *)&oslog[32] = "unknown file";
        *(_DWORD *)&oslog[40] = 181;
        *(_QWORD *)&oslog[64] = 0;
        *(_QWORD *)&oslog[48] = "unknown function";
        *(_QWORD *)&oslog[56] = 0;
        v122 = **(_QWORD **)oslog;
        v123 = **(_QWORD **)oslog + 16;
        if (*(char *)(**(_QWORD **)oslog + 39) < 0)
        {
          v125 = *(const char **)(v122 + 16);
          v124 = *(_QWORD *)(v122 + 24);
          v127 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v127 & 1) != 0)
            goto LABEL_185;
        }
        else
        {
          v124 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
          v125 = (const char *)(**(_QWORD **)oslog + 16);
          v126 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v126 & 1) != 0)
            goto LABEL_185;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
            operator delete(object[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_185:
        if (byte_254A4A4F8[23] >= 0)
          v128 = byte_254A4A4F8;
        else
          v128 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v129 = byte_254A4A4F8[23];
        else
          v129 = *(_QWORD *)&byte_254A4A4F8[8];
        object[0] = os_log_create(v128, v125);
        v130 = &object[1];
        if (v129 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v129 >= 0x17)
        {
          v131 = (v129 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v129 | 7) != 0x17)
            v131 = v129 | 7;
          v132 = v131 + 1;
          v130 = (void **)operator new(v131 + 1);
          object[3] = (void *)(v132 | 0x8000000000000000);
          object[1] = v130;
          object[2] = (void *)v129;
        }
        else
        {
          HIBYTE(object[3]) = v129;
          if (!v129)
          {
LABEL_199:
            *((_BYTE *)v130 + v129) = 0;
            LOBYTE(object[4]) = 1;
            v133 = &object[5];
            if (v124 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v124 >= 0x17)
            {
              v134 = (v124 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v124 | 7) != 0x17)
                v134 = v124 | 7;
              v135 = v134 + 1;
              v133 = (void **)operator new(v134 + 1);
              object[7] = (void *)(v135 | 0x8000000000000000);
              object[5] = v133;
              object[6] = (void *)v124;
            }
            else
            {
              HIBYTE(object[7]) = v124;
              if (!v124)
                goto LABEL_207;
            }
            memmove(v133, v125, v124);
LABEL_207:
            *((_BYTE *)v133 + v124) = 0;
            LOBYTE(object[8]) = 1;
            v136 = object[0];
            if (SHIBYTE(object[7]) < 0)
              operator delete(object[5]);
            if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
              operator delete(object[1]);
            if (object[0])
              os_release(object[0]);
            v137 = v116 * 57.2957795;
            v138 = v117 * 57.2957795;
            v139 = v118 * 57.2957795;
            if (v121 && *(_QWORD *)(v121 + 24))
            {
              v140 = _os_log_pack_size();
              v141 = (std::__shared_weak_count_vtbl *)operator new(v140, (std::align_val_t)8uLL);
              v142 = (std::__shared_weak_count *)operator new();
              v143 = v142;
              v142->__shared_owners_ = 0;
              v144 = (unint64_t *)&v142->__shared_owners_;
              v142->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v142->__shared_weak_owners_ = 0;
              v142[1].__vftable = v141;
              object[0] = v141;
              object[1] = v141;
              object[2] = v142;
              do
                v145 = __ldxr(v144);
              while (__stxr(v145 + 1, v144));
              memset(&object[3], 0, 24);
              do
                v146 = __ldaxr(v144);
              while (__stlxr(v146 - 1, v144));
              if (!v146)
              {
                ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                std::__shared_weak_count::__release_weak(v143);
              }
              v147 = object[0];
              v148 = _os_log_pack_fill();
              *(_DWORD *)v148 = 134218496;
              *(double *)(v148 + 4) = v137;
              *(_WORD *)(v148 + 12) = 2048;
              *(double *)(v148 + 14) = v138;
              *(_WORD *)(v148 + 22) = 2048;
              *(double *)(v148 + 24) = v139;
              v149 = operator new();
              v150 = *(unsigned __int8 *)(v122 + 39);
              if ((v150 & 0x80u) == 0)
                v151 = v123;
              else
                v151 = *(_QWORD *)(v122 + 16);
              if ((v150 & 0x80u) != 0)
                v150 = *(_QWORD *)(v122 + 24);
              *(_QWORD *)v149 = v147;
              *(_OWORD *)(v149 + 8) = *(_OWORD *)&object[1];
              object[1] = 0;
              object[2] = 0;
              *(_OWORD *)(v149 + 24) = *(_OWORD *)&object[3];
              object[3] = 0;
              object[4] = 0;
              *(_QWORD *)(v149 + 40) = v151;
              *(_QWORD *)(v149 + 48) = v150;
              *(_BYTE *)(v149 + 56) = 2;
              v1842[0] = 0;
              *(_QWORD *)&v1793[0].f64[0] = v149;
              (*(void (**)(_QWORD, float64x2_t *))(**(_QWORD **)(v121 + 24) + 40))(*(_QWORD *)(v121 + 24), v1793);
              v152 = v1793[0].f64[0];
              v1793[0].f64[0] = 0.0;
              v8 = v1660;
              if (v152 != 0.0)
              {
                v153 = *(std::__shared_weak_count **)(*(_QWORD *)&v152 + 32);
                if (v153)
                {
                  v154 = (unint64_t *)&v153->__shared_owners_;
                  do
                    v155 = __ldaxr(v154);
                  while (__stlxr(v155 - 1, v154));
                  if (!v155)
                  {
                    ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                    std::__shared_weak_count::__release_weak(v153);
                  }
                }
                v156 = *(std::__shared_weak_count **)(*(_QWORD *)&v152 + 16);
                if (v156)
                {
                  v157 = (unint64_t *)&v156->__shared_owners_;
                  do
                    v158 = __ldaxr(v157);
                  while (__stlxr(v158 - 1, v157));
                  if (!v158)
                  {
                    ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                    std::__shared_weak_count::__release_weak(v156);
                  }
                }
                MEMORY[0x212BC6398](*(_QWORD *)&v152, 0x10F0C40B62ED6C6);
                v159 = v1842[0];
                v1842[0] = 0;
                if (v159)
                {
                  v160 = (std::__shared_weak_count *)*((_QWORD *)v159 + 4);
                  if (v160)
                  {
                    v161 = (unint64_t *)&v160->__shared_owners_;
                    do
                      v162 = __ldaxr(v161);
                    while (__stlxr(v162 - 1, v161));
                    if (!v162)
                    {
                      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                      std::__shared_weak_count::__release_weak(v160);
                    }
                  }
                  v163 = (std::__shared_weak_count *)*((_QWORD *)v159 + 2);
                  if (v163)
                  {
                    v164 = (unint64_t *)&v163->__shared_owners_;
                    do
                      v165 = __ldaxr(v164);
                    while (__stlxr(v165 - 1, v164));
                    if (!v165)
                    {
                      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                      std::__shared_weak_count::__release_weak(v163);
                    }
                  }
                  MEMORY[0x212BC6398](v159, 0x10F0C40B62ED6C6);
                }
              }
              v166 = (std::__shared_weak_count *)object[4];
              if (object[4])
              {
                v167 = (unint64_t *)((char *)object[4] + 8);
                do
                  v168 = __ldaxr(v167);
                while (__stlxr(v168 - 1, v167));
                if (!v168)
                {
                  ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                  std::__shared_weak_count::__release_weak(v166);
                }
              }
              v169 = (std::__shared_weak_count *)object[2];
              if (object[2])
              {
                v170 = (unint64_t *)((char *)object[2] + 8);
                do
                  v171 = __ldaxr(v170);
                while (__stlxr(v171 - 1, v170));
                if (!v171)
                {
                  ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                  std::__shared_weak_count::__release_weak(v169);
                }
              }
            }
            else
            {
              os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG);
              LODWORD(object[0]) = 134218496;
              *(void **)((char *)object + 4) = *(void **)&v137;
              WORD2(object[1]) = 2048;
              *(void **)((char *)&object[1] + 6) = *(void **)&v138;
              HIWORD(object[2]) = 2048;
              object[3] = *(void **)&v139;
              LODWORD(v1656) = 32;
              v1655 = object;
              v172 = (void *)_os_log_send_and_compose_impl();
              v8 = v1660;
              if (v172)
                free(v172);
            }
            if (v119)
            {
              sub_20E8C003C((uint64_t)oslog, "Before optimize: Roll %f, pitch %f, Yaw %f", v137, v138, v139);
              sub_20E863570((uint64_t)oslog);
            }
            sub_20E863570((uint64_t)oslog);
            v173 = *(std::__shared_weak_count **)&oslog[64];
            if (*(_QWORD *)&oslog[64])
            {
              v174 = (unint64_t *)(*(_QWORD *)&oslog[64] + 8);
              do
                v175 = __ldaxr(v174);
              while (__stlxr(v175 - 1, v174));
              if (!v175)
              {
                ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                std::__shared_weak_count::__release_weak(v173);
              }
            }
            goto LABEL_269;
          }
        }
        memmove(v130, v128, v129);
        goto LABEL_199;
      }
    }
  }
LABEL_269:
  v176 = v8[1];
  v179 = v176->__vftable;
  v177 = &v176->__shared_owners_;
  v178 = &v179->~__shared_weak_count;
  if (v179 != (std::__shared_weak_count_vtbl *)v177)
  {
    while (1)
    {
      v180 = v178[6];
      if (!v180)
        break;
      v181 = v180 + 40;
      v182 = *(unsigned __int8 *)(v180 + 528);
      if (v182)
        v183 = v181;
      else
        v183 = 0;
      if (!v182)
        goto LABEL_283;
LABEL_284:
      *(_BYTE *)(v183 + 56) = 0;
      v187 = (uint64_t *)v178[1];
      if (v187)
      {
        do
        {
          v188 = v187;
          v187 = (uint64_t *)*v187;
        }
        while (v187);
      }
      else
      {
        do
        {
          v188 = (uint64_t *)v178[2];
          _ZF = *v188 == (_QWORD)v178;
          v178 = v188;
        }
        while (!_ZF);
      }
      v178 = v188;
      if (v188 == v177)
        goto LABEL_290;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/MapOptimizationUtil.cpp", 186, (uint64_t)"track.second", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v184 = v178[6];
    v185 = v184 + 40;
    v186 = *(unsigned __int8 *)(v184 + 528);
    if (v186)
      v183 = v185;
    else
      v183 = 0;
    if (v186)
      goto LABEL_284;
LABEL_283:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/MapOptimizationUtil.cpp", 188, (uint64_t)"structure", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    goto LABEL_284;
  }
LABEL_290:
  v189 = *(_BYTE *)(v1675 + 167);
  v190 = *(char **)(v1720 + 5080);
  v191 = v1720;
  v192 = *(char **)(v1720 + 5088);
  if (v192 == v190 || *(_DWORD *)v190)
  {
    v193 = *(uint64_t **)(v1720 + 96);
    if (v193)
    {
      v194 = *v193;
      if (v192 == v190)
        v190 = *(char **)(v1720 + 5088);
      if (v192 == v190)
        goto LABEL_303;
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 194, (uint64_t)"this->viobadata_ref_.state_to_imu_sample_time_offset", 52, (uint64_t)"Error the timeoffset variable is not set", 40, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_2016;
      }
      v193 = *(uint64_t **)(v191 + 96);
      if (!v193)
      {
        v190 = *(char **)(v191 + 5088);
        goto LABEL_327;
      }
      v190 = *(char **)(v191 + 5080);
      v192 = *(char **)(v191 + 5088);
      v194 = *v193;
      if (v192 == v190)
        v190 = *(char **)(v191 + 5088);
      if (v192 == v190)
      {
LABEL_303:
        v195 = (char *)sub_20F619254(v191 + 5104);
        *(_DWORD *)v195 = -1;
        v195[4] = 1;
        *((_DWORD *)v195 + 2) = 0;
        *((_DWORD *)v195 + 4) = 0;
        v195[20] = 1;
        *(_WORD *)(v195 + 21) = LOWORD(v1793[0].f64[0]);
        v195[23] = BYTE2(v1793[0].f64[0]);
        *((_QWORD *)v195 + 3) = v193;
        *((_QWORD *)v195 + 4) = v194;
        v195[40] = 0;
        *(_DWORD *)(v195 + 41) = *(_DWORD *)oslog;
        *((_DWORD *)v195 + 11) = *(_DWORD *)&oslog[3];
        LODWORD(object[0]) = 0;
        object[1] = v195;
        v190 = sub_20F618FEC((char **)(v191 + 5080), (__int128 *)v190, (uint64_t)object);
        v196 = *(char **)(v191 + 6304);
        v197 = *(_QWORD *)(v191 + 6312);
        if ((unint64_t)v196 < v197)
        {
          *(_DWORD *)v196 = 0;
          v198 = (uint64_t)(v196 + 4);
LABEL_326:
          *(_QWORD *)(v191 + 6304) = v198;
          *(_BYTE *)(v191 + 5858) = 0;
          *(_BYTE *)(v191 + 5856) = 0;
          *(_BYTE *)(v191 + 6636) = 0;
          *(_DWORD *)(v191 + 6632) = 0;
          goto LABEL_327;
        }
        v199 = *(char **)(v191 + 6296);
        v200 = (v196 - v199) >> 2;
        v201 = v200 + 1;
        if ((unint64_t)(v200 + 1) >> 62)
          sub_20E867F44();
        v202 = v197 - (_QWORD)v199;
        if (v202 >> 1 > v201)
          v201 = v202 >> 1;
        if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFFCLL)
          v203 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v203 = v201;
        if (v203)
        {
          if (v203 >> 62)
            sub_20E877A38();
          v204 = operator new(4 * v203);
          v205 = &v204[4 * v200];
          v206 = &v204[4 * v203];
          *v205 = 0;
          v198 = (uint64_t)(v205 + 1);
          v207 = v196 - v199;
          if (v196 == v199)
            goto LABEL_324;
        }
        else
        {
          v204 = 0;
          v205 = (_DWORD *)(4 * v200);
          v206 = 0;
          *(_DWORD *)(4 * v200) = 0;
          v198 = 4 * v200 + 4;
          v207 = v196 - v199;
          if (v196 == v199)
          {
LABEL_324:
            *(_QWORD *)(v191 + 6296) = v205;
            *(_QWORD *)(v191 + 6304) = v198;
            *(_QWORD *)(v191 + 6312) = v206;
            if (v199)
              operator delete(v199);
            goto LABEL_326;
          }
        }
        v208 = v207 - 4;
        if (v208 < 0x2C)
          goto LABEL_2057;
        if ((unint64_t)(v199 - v204) < 0x20)
          goto LABEL_2057;
        v209 = (v208 >> 2) + 1;
        v210 = 4 * (v209 & 0x7FFFFFFFFFFFFFF8);
        v211 = &v196[-v210];
        v205 = (_DWORD *)((char *)v205 - v210);
        v212 = &v204[4 * v200 - 16];
        v213 = v196 - 16;
        v214 = v209 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v215 = *(_OWORD *)v213;
          *(v212 - 1) = *((_OWORD *)v213 - 1);
          *v212 = v215;
          v212 -= 2;
          v213 -= 32;
          v214 -= 8;
        }
        while (v214);
        v196 = v211;
        if (v209 != (v209 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_2057:
          do
          {
            v216 = *((_DWORD *)v196 - 1);
            v196 -= 4;
            *--v205 = v216;
          }
          while (v196 != v199);
        }
        goto LABEL_324;
      }
    }
    if (*(_DWORD *)v190)
      goto LABEL_303;
    v190 = v192;
LABEL_327:
    v191 = v1720;
  }
  *(_BYTE *)(*((_QWORD *)v190 + 1) + 20) = v189;
  v217 = *(_QWORD *)(v191 + 5376) - *(_QWORD *)(v191 + 5368);
  v218 = (v217 >> 4);
  v219 = *(_QWORD **)(v191 + 8);
  if (v218 == v219[39])
    goto LABEL_533;
  v1685 = *(_BYTE *)(v1675 + 166);
  v1681 = (_BYTE *)(v191 + 5856);
  v1706 = v191;
  if (!*(_BYTE *)(v191 + 5856))
  {
    memset(object, 0, 32);
    if (sub_20F5B8114((_QWORD *)(v191 + 4880), (int *)object, oslog, 1))
    {
      *(_QWORD *)(v191 + 6448) = *(_QWORD *)(v191 + 6440);
      *(_QWORD *)(v191 + 6472) = *(_QWORD *)(v191 + 6464);
      *(_QWORD *)(v191 + 6496) = *(_QWORD *)(v191 + 6488);
      *(_QWORD *)(v191 + 6520) = *(_QWORD *)(v191 + 6512);
      *(_QWORD *)(v191 + 6544) = *(_QWORD *)(v191 + 6536);
      *(_QWORD *)(v191 + 6568) = *(_QWORD *)(v191 + 6560);
      *(_QWORD *)(v191 + 6592) = *(_QWORD *)(v191 + 6584);
      *(_QWORD *)(v191 + 6616) = *(_QWORD *)(v191 + 6608);
      v220 = *(_QWORD *)(v191 + 5656);
      v221 = *(_QWORD *)(v191 + 5664);
      while (v220 != v221)
      {
        v222 = *(_QWORD *)(v220 + 208);
        if (*(_BYTE *)(v220 + 496)
          || (*(_BYTE *)(v222 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v220 + 216) + 4) & 6) != 0)
        {
          sub_20F394A20(v191 + 6440, v222);
          sub_20F3D35E0((_QWORD *)(v191 + 6440), *(_QWORD *)(v220 + 216));
        }
        v220 += 504;
      }
      v223 = *(_QWORD *)(v191 + 5680);
      v224 = *(_QWORD *)(v191 + 5688);
      while (v223 != v224)
      {
        v225 = *(_QWORD *)(v223 + 136);
        if (*(_BYTE *)(v223 + 272) || (*(_BYTE *)(v225 + 4) & 6) != 0)
          sub_20F394A20(v191 + 6440, v225);
        v223 += 280;
      }
      v226 = (uint64_t *)v191;
      sub_20F5B8680(*(_QWORD *)(v191 + 5704), *(_QWORD *)(v191 + 5712), (_QWORD *)(v191 + 6440));
      sub_20F5B85BC(v226[716], v226[717], (_QWORD *)(v191 + 6440));
      sub_20F5B8444(v226[719], v226[720], (_QWORD *)(v191 + 6440));
      v227 = *(_QWORD *)(v191 + 5776);
      v228 = *(_QWORD *)(v191 + 5784);
      while (v227 != v228)
      {
        v229 = *(_QWORD *)(v227 + 736);
        if (*(_BYTE *)(v227 + 880)
          || (*(_BYTE *)(v229 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v227 + 744) + 4) & 6) != 0)
        {
          sub_20F394A20(v191 + 6440, v229);
          sub_20F394A20(v191 + 6440, *(_QWORD *)(v227 + 744));
        }
        v227 += 888;
      }
      v230 = (*(_QWORD *)(v191 + 6568) - *(_QWORD *)(v191 + 6560)) >> 2;
      if (HIDWORD(object[2]) > v230)
        LODWORD(v230) = HIDWORD(object[2]);
      _CF = *(_DWORD *)&oslog[20] >= v230;
      v231 = *(_DWORD *)&oslog[20] - v230;
      if (_CF)
        v232 = v231;
      else
        v232 = 0;
      sub_20F59A618((_QWORD *)(v191 + 4880));
      if (!v232)
        goto LABEL_363;
    }
    else if (!*(_DWORD *)&oslog[20])
    {
      goto LABEL_363;
    }
LABEL_362:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 271, (uint64_t)"!this->linear_system_.graph().template numberOfVariable<VARIABLE_TYPE>()", 72, (uint64_t)"CameraCalibVariables of this type have already been added.", 58, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_2016;
    }
    goto LABEL_363;
  }
  if ((v217 >> 4))
    goto LABEL_362;
LABEL_363:
  v233 = (uint64_t *)v219[47];
  if (v233)
  {
    v1672 = (void **)(v1706 + 6368);
    while (1)
    {
      LODWORD(v1793[0].f64[0]) = *((_DWORD *)v233 + 4);
      BYTE4(v1793[0].f64[0]) = 1;
      *(_QWORD *)&v1793[0].f64[1] = v233 + 3;
      v1795 = 1065353216;
      v1796 = 0;
      memset(&v1793[15], 0, 48);
      v1794 = 0;
      v234 = *(float64x2_t *)(v233 + 5);
      v1793[1] = *(float64x2_t *)(v233 + 3);
      v1793[2] = v234;
      v235 = *(float64x2_t *)(v233 + 9);
      v236 = *(float64x2_t *)(v233 + 13);
      v237 = *(float64x2_t *)(v233 + 7);
      v1793[5] = *(float64x2_t *)(v233 + 11);
      v1793[6] = v236;
      v1793[3] = v237;
      v1793[4] = v235;
      v238 = *(float64x2_t *)(v233 + 17);
      v239 = *(float64x2_t *)(v233 + 21);
      v240 = *(float64x2_t *)(v233 + 15);
      v1793[9] = *(float64x2_t *)(v233 + 19);
      v1793[10] = v239;
      v1793[7] = v240;
      v1793[8] = v238;
      v241 = *(float64x2_t *)(v233 + 25);
      v242 = *(float64x2_t *)(v233 + 29);
      v243 = *(float64x2_t *)(v233 + 23);
      v1793[13] = *(float64x2_t *)(v233 + 27);
      v1793[14] = v242;
      v1793[11] = v243;
      v1793[12] = v241;
      sub_20F6178A8((uint64_t)v1793);
      BYTE4(v1793[0].f64[0]) = v1685;
      v244 = v1793[17].f64[1];
      v245 = *(float64x2_t *)(*(_QWORD *)&v1793[0].f64[1] + 16);
      v1793[1] = **(float64x2_t **)&v1793[0].f64[1];
      v1793[2] = v245;
      v246 = *(float64x2_t *)(*(_QWORD *)&v1793[0].f64[1] + 80);
      v248 = *(float64x2_t *)(*(_QWORD *)&v1793[0].f64[1] + 32);
      v247 = *(float64x2_t *)(*(_QWORD *)&v1793[0].f64[1] + 48);
      v1793[5] = *(float64x2_t *)(*(_QWORD *)&v1793[0].f64[1] + 64);
      v1793[6] = v246;
      v1793[3] = v248;
      v1793[4] = v247;
      v249 = *(float64x2_t *)(*(_QWORD *)&v1793[0].f64[1] + 144);
      v251 = *(float64x2_t *)(*(_QWORD *)&v1793[0].f64[1] + 96);
      v250 = *(float64x2_t *)(*(_QWORD *)&v1793[0].f64[1] + 112);
      v1793[9] = *(float64x2_t *)(*(_QWORD *)&v1793[0].f64[1] + 128);
      v1793[10] = v249;
      v1793[7] = v251;
      v1793[8] = v250;
      v252 = *(__n128 *)(*(_QWORD *)&v1793[0].f64[1] + 192);
      v253 = *(float64x2_t *)(*(_QWORD *)&v1793[0].f64[1] + 208);
      v255 = *(float64x2_t *)(*(_QWORD *)&v1793[0].f64[1] + 160);
      v254 = *(float64x2_t *)(*(_QWORD *)&v1793[0].f64[1] + 176);
      v1793[13] = (float64x2_t)v252;
      v1793[14] = v253;
      v1793[11] = v255;
      v1793[12] = v254;
      if (*(_QWORD *)&v1793[17].f64[1])
      {
        do
        {
          v252.n128_f64[0] = sub_20F6182A0(*(char **)(*(_QWORD *)&v244 + 40), &v1793[1], v252);
          v244 = **(double **)&v244;
        }
        while (v244 != 0.0);
      }
      sub_20F6178A8((uint64_t)v1793);
      v256 = LODWORD(v1793[0].f64[0]);
      v257 = *(__int128 **)(v1706 + 5368);
      v258 = *(__int128 **)(v1706 + 5376);
      if (v258 == v257)
      {
        v257 = *(__int128 **)(v1706 + 5376);
      }
      else
      {
        v259 = v258 - v257;
        do
        {
          v260 = v259 >> 1;
          v261 = &v257[v259 >> 1];
          v263 = *(_DWORD *)v261;
          v262 = v261 + 1;
          v259 += ~(v259 >> 1);
          if (v263 < LODWORD(v1793[0].f64[0]))
            v257 = v262;
          else
            v259 = v260;
        }
        while (v259);
        if (v258 != v257 && LODWORD(v1793[0].f64[0]) == *(_DWORD *)v257)
        {
          v1699 = *(char **)(v1706 + 5376);
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 283, (uint64_t)"result", 6, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          goto LABEL_428;
        }
      }
      v264 = BYTE4(v1793[0].f64[0]);
      oslog[4] = 1;
      *(_DWORD *)oslog = -1;
      *(_DWORD *)&oslog[8] = 0;
      v266 = v1793[0].f64[1];
      v265 = v1793[0].f64[0];
      *(float64x2_t *)&oslog[16] = v1793[0];
      *(float64x2_t *)&oslog[192] = v1793[11];
      *(float64x2_t *)&oslog[208] = v1793[12];
      *(float64x2_t *)&oslog[224] = v1793[13];
      *(float64x2_t *)&oslog[240] = v1793[14];
      *(float64x2_t *)&oslog[128] = v1793[7];
      *(float64x2_t *)&oslog[144] = v1793[8];
      *(float64x2_t *)&oslog[160] = v1793[9];
      *(float64x2_t *)&oslog[176] = v1793[10];
      *(float64x2_t *)&oslog[64] = v1793[3];
      *(float64x2_t *)&oslog[80] = v1793[4];
      *(float64x2_t *)&oslog[96] = v1793[5];
      *(float64x2_t *)&oslog[112] = v1793[6];
      *(float64x2_t *)&oslog[32] = v1793[1];
      *(float64x2_t *)&oslog[48] = v1793[2];
      v268 = v1793[15].f64[1];
      v267 = v1793[15].f64[0];
      *(float64x2_t *)&oslog[256] = v1793[15];
      v269 = v1793[16].f64[1];
      v270 = v1793[16].f64[0];
      memset(&v1793[15], 0, 40);
      v272 = v1793[17].f64[1];
      v271 = v1793[17].f64[0];
      *(_OWORD *)&oslog[272] = __PAIR128__(*(unint64_t *)&v269, *(unint64_t *)&v270);
      *(float64x2_t *)&oslog[288] = v1793[17];
      v273 = v1794;
      *(_QWORD *)&oslog[304] = v1794;
      v274 = v1795;
      *(_DWORD *)&oslog[312] = v1795;
      if (v1794)
      {
        v275 = *(_QWORD *)(*(_QWORD *)&v1793[17].f64[1] + 8);
        if ((*(_QWORD *)&v1793[17].f64[0] & (*(_QWORD *)&v1793[17].f64[0] - 1)) != 0)
        {
          if (v275 >= *(_QWORD *)&v1793[17].f64[0])
            v275 %= *(_QWORD *)&v1793[17].f64[0];
        }
        else
        {
          v275 &= *(_QWORD *)&v1793[17].f64[0] - 1;
        }
        *(_QWORD *)(*(_QWORD *)&v269 + 8 * v275) = &oslog[296];
        v1793[17].f64[1] = 0.0;
        v1794 = 0;
        v265 = *(double *)&oslog[16];
        v266 = *(double *)&oslog[24];
        v267 = *(double *)&oslog[256];
        v268 = *(double *)&oslog[264];
        v270 = *(float64_t *)&oslog[272];
        v269 = *(float64_t *)&oslog[280];
        v271 = *(double *)&oslog[288];
        v272 = *(double *)&oslog[296];
        v273 = *(void **)&oslog[304];
        v274 = *(_DWORD *)&oslog[312];
      }
      v276 = v1796;
      oslog[320] = v1796;
      memset(&oslog[328], 0, 224);
      LODWORD(object[0]) = v256;
      LODWORD(object[2]) = *(_DWORD *)&oslog[8];
      object[1] = *(void **)oslog;
      object[3] = *(void **)&v265;
      object[4] = *(void **)&v266;
      *(_OWORD *)&object[5] = *(_OWORD *)&oslog[32];
      *(_OWORD *)&object[7] = *(_OWORD *)&oslog[48];
      *(_OWORD *)&object[13] = *(_OWORD *)&oslog[96];
      *(_OWORD *)&object[15] = *(_OWORD *)&oslog[112];
      *(_OWORD *)&object[9] = *(_OWORD *)&oslog[64];
      *(_OWORD *)&object[11] = *(_OWORD *)&oslog[80];
      *(_OWORD *)&object[21] = *(_OWORD *)&oslog[160];
      *(_OWORD *)&object[23] = *(_OWORD *)&oslog[176];
      *(_OWORD *)&object[17] = *(_OWORD *)&oslog[128];
      *(_OWORD *)&object[19] = *(_OWORD *)&oslog[144];
      *(_OWORD *)&object[29] = *(_OWORD *)&oslog[224];
      *(_OWORD *)&object[31] = *(_OWORD *)&oslog[240];
      *(_OWORD *)&object[25] = *(_OWORD *)&oslog[192];
      *(_OWORD *)&object[27] = *(_OWORD *)&oslog[208];
      object[33] = *(void **)&v267;
      object[34] = *(void **)&v268;
      memset(&oslog[256], 0, 40);
      object[35] = *(void **)&v270;
      object[36] = *(void **)&v269;
      object[37] = *(void **)&v271;
      object[38] = *(void **)&v272;
      object[39] = v273;
      LODWORD(object[40]) = v274;
      if (v273)
      {
        v277 = *(_QWORD *)(*(_QWORD *)&v272 + 8);
        if ((*(_QWORD *)&v271 & (*(_QWORD *)&v271 - 1)) != 0)
        {
          if (v277 >= *(_QWORD *)&v271)
            v277 %= *(_QWORD *)&v271;
        }
        else
        {
          v277 &= *(_QWORD *)&v271 - 1;
        }
        *(_QWORD *)(*(_QWORD *)&v269 + 8 * v277) = &object[38];
        *(_QWORD *)&oslog[296] = 0;
        *(_QWORD *)&oslog[304] = 0;
      }
      LOBYTE(object[41]) = v276;
      *(_OWORD *)&object[62] = *(_OWORD *)&oslog[488];
      *(_OWORD *)&object[64] = *(_OWORD *)&oslog[504];
      *(_OWORD *)&object[66] = *(_OWORD *)&oslog[520];
      *(_OWORD *)&object[68] = *(_OWORD *)&oslog[536];
      *(_OWORD *)&object[54] = *(_OWORD *)&oslog[424];
      *(_OWORD *)&object[56] = *(_OWORD *)&oslog[440];
      *(_OWORD *)&object[58] = *(_OWORD *)&oslog[456];
      *(_OWORD *)&object[60] = *(_OWORD *)&oslog[472];
      *(_OWORD *)&object[46] = *(_OWORD *)&oslog[360];
      *(_OWORD *)&object[48] = *(_OWORD *)&oslog[376];
      *(_OWORD *)&object[50] = *(_OWORD *)&oslog[392];
      *(_OWORD *)&object[52] = *(_OWORD *)&oslog[408];
      *(_OWORD *)&object[42] = *(_OWORD *)&oslog[328];
      *(_OWORD *)&object[44] = *(_OWORD *)&oslog[344];
      v1699 = sub_20F619554((char **)(v1706 + 5368), v257, (int *)object);
      v278 = object[38];
      if (object[38])
      {
        do
        {
          v279 = (_QWORD *)*v278;
          operator delete(v278);
          v278 = v279;
        }
        while (v279);
      }
      v280 = object[36];
      object[36] = 0;
      if (v280)
        operator delete(v280);
      if (object[33])
      {
        object[34] = object[33];
        operator delete(object[33]);
      }
      v281 = *(_QWORD **)&oslog[296];
      if (*(_QWORD *)&oslog[296])
      {
        do
        {
          v282 = (_QWORD *)*v281;
          operator delete(v281);
          v281 = v282;
        }
        while (v282);
      }
      v283 = *(void **)&oslog[280];
      *(_QWORD *)&oslog[280] = 0;
      if (v283)
        operator delete(v283);
      if (*(_QWORD *)&oslog[256])
      {
        *(_QWORD *)&oslog[264] = *(_QWORD *)&oslog[256];
        operator delete(*(void **)&oslog[256]);
      }
      if (v264)
        break;
LABEL_427:
      v1681[2] = 0;
      *v1681 = 0;
      *(_DWORD *)(v1706 + 6632) = 0;
      *(_BYTE *)(v1706 + 6636) = 0;
LABEL_428:
      v305.n128_u32[1] = 0;
      v305.n128_u64[1] = 0;
      memset(object, 0, 32);
      LODWORD(object[4]) = 1065353216;
      v306 = *(uint64_t ***)(v1706 + 128);
      v307 = *v306;
      v308 = v306[1];
      while (v307 != v308)
      {
        v309 = (__int128 *)*v307;
        if (*(_QWORD *)(*v307 + 24))
        {
          if (*((_DWORD *)v309 + 4) != *((_DWORD *)v233 + 4))
            goto LABEL_429;
LABEL_444:
          v315 = *v309;
          *(_QWORD *)&oslog[16] = *((_QWORD *)v309 + 2);
          *(_OWORD *)oslog = v315;
          *(_OWORD *)&oslog[24] = *(__int128 *)((char *)v309 + 24);
          sub_20F61A180((uint64_t)object, (uint64_t *)oslog, (uint64_t)oslog);
          goto LABEL_429;
        }
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 288, (uint64_t)"frame->lens_model_", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v310 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v310 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (byte_254A6DE68)
          v311 = byte_254A6DE70 == 0;
        else
          v311 = 0;
        if (!v311)
        {
          v312 = qword_254A6DE40;
          for (i = qword_254A6DE48; v312 != i; v312 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v312)(*(_QWORD *)(v312 + 8), "frame->lens_model_", 18, "", 0);
        }
        v314 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v314 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "frame->lens_model_", 18, "", 0);
        v309 = (__int128 *)*v307;
        if (*(_DWORD *)(*v307 + 16) == *((_DWORD *)v233 + 4))
          goto LABEL_444;
LABEL_429:
        v307 += 2;
      }
      v316 = *((_QWORD *)v1699 + 1);
      if (*(_QWORD *)(v316 + 304))
      {
        v317 = *(_QWORD **)(v316 + 296);
        if (v317)
        {
          do
          {
            v318 = (_QWORD *)*v317;
            operator delete(v317);
            v317 = v318;
          }
          while (v318);
        }
        *(_QWORD *)(v316 + 296) = 0;
        v319 = *(_QWORD *)(v316 + 288);
        if (v319)
        {
          for (j = 0; j != v319; ++j)
            *(_QWORD *)(*(_QWORD *)(v316 + 280) + 8 * j) = 0;
        }
        *(_QWORD *)(v316 + 304) = 0;
      }
      v321 = object[0];
      object[0] = 0;
      v322 = *(void **)(v316 + 280);
      *(_QWORD *)(v316 + 280) = v321;
      if (v322)
        operator delete(v322);
      v323 = (unint64_t)object[1];
      v324 = object[2];
      object[1] = 0;
      v325 = object[3];
      *(void **)(v316 + 296) = object[2];
      *(_QWORD *)(v316 + 304) = v325;
      v305.n128_u32[0] = (unsigned __int32)object[4];
      *(_DWORD *)(v316 + 312) = object[4];
      *(_QWORD *)(v316 + 288) = v323;
      if (v325)
      {
        v326 = *((_QWORD *)v324 + 1);
        if ((v323 & (v323 - 1)) != 0)
        {
          if (v326 >= v323)
            v326 %= v323;
        }
        else
        {
          v326 &= v323 - 1;
        }
        *(_QWORD *)(*(_QWORD *)(v316 + 280) + 8 * v326) = v316 + 296;
        object[2] = 0;
        object[3] = 0;
        v324 = *(void **)(v316 + 296);
      }
      for (; v324; v324 = *(void **)v324)
        v305.n128_f64[0] = sub_20F6182A0(*((char **)v324 + 5), (float64x2_t *)(v316 + 32), v305);
      sub_20F6178A8(v316 + 16);
      memset(oslog, 0, 24);
      v327 = *(_QWORD **)(v1706 + 16);
      v328 = v327[2];
      if (v328)
      {
        if (v328 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        v329 = (char *)operator new(24 * v328);
        *(_QWORD *)oslog = v329;
        *(_QWORD *)&oslog[8] = v329;
        *(_QWORD *)&oslog[16] = &v329[24 * v328];
        v332 = (_QWORD *)*v327;
        v331 = v327 + 1;
        v330 = v332;
        if (v332 == v331)
          goto LABEL_471;
LABEL_486:
        while (2)
        {
          v343 = v330[6];
          if (*(_BYTE *)(v343 + 528))
            v344 = v343 + 40;
          else
            v344 = 0;
          if (*(_BYTE *)(v343 + 528))
          {
            v345 = *(_DWORD *)(v343 + 88);
            if (v345 == *((_DWORD *)v233 + 4))
            {
              v346 = *(_QWORD *)(v343 + 536);
              v347 = *(_QWORD *)(v343 + 544);
              v348 = *(_QWORD *)(v343 + 72);
              v349 = *(_DWORD *)(v343 + 80);
              if (v347 != v346)
              {
                v350 = (v347 - v346) >> 5;
                while (1)
                {
                  v351 = v350 >> 1;
                  v352 = v346 + 32 * (v350 >> 1);
                  v353 = *(_DWORD *)(v352 + 16);
                  _CF = v353 >= v345;
                  if (v353 != v345)
                    goto LABEL_499;
                  if (*(_QWORD *)v352 >= v348)
                    break;
LABEL_493:
                  v346 = v352 + 32;
                  v351 = v350 + ~v351;
LABEL_494:
                  v350 = v351;
                  if (!v351)
                    goto LABEL_502;
                }
                if (*(_QWORD *)v352 != v348)
                  goto LABEL_494;
                _CF = *(_DWORD *)(v352 + 8) >= v349;
LABEL_499:
                if (_CF)
                  goto LABEL_494;
                goto LABEL_493;
              }
LABEL_502:
              if (v346 != v347
                && *(_DWORD *)(v346 + 16) == v345
                && *(_QWORD *)v346 == v348
                && *(_DWORD *)(v346 + 8) == v349)
              {
                v355 = *(_QWORD *)(v346 + 24);
                v356 = *(_DWORD *)(v343 + 32);
                v357 = *(_QWORD *)&oslog[16];
                if ((unint64_t)v329 >= *(_QWORD *)&oslog[16])
                  goto LABEL_507;
LABEL_517:
                *(_DWORD *)v329 = v356;
                v365 = v329 + 24;
                *((_QWORD *)v329 + 1) = v355;
                *((_QWORD *)v329 + 2) = v344;
              }
              else
              {
                v355 = 0;
                v356 = *(_DWORD *)(v343 + 32);
                v357 = *(_QWORD *)&oslog[16];
                if ((unint64_t)v329 < *(_QWORD *)&oslog[16])
                  goto LABEL_517;
LABEL_507:
                v358 = *(char **)oslog;
                v359 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v329[-*(_QWORD *)oslog] >> 3);
                v360 = v359 + 1;
                if (v359 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_20E867F44();
                v361 = v233;
                v362 = 0xAAAAAAAAAAAAAAABLL * ((v357 - *(_QWORD *)oslog) >> 3);
                if (2 * v362 > v360)
                  v360 = 2 * v362;
                if (v362 >= 0x555555555555555)
                  v363 = 0xAAAAAAAAAAAAAAALL;
                else
                  v363 = v360;
                if (v363)
                {
                  if (v363 > 0xAAAAAAAAAAAAAAALL)
                    sub_20E877A38();
                  v364 = (char *)operator new(24 * v363);
                }
                else
                {
                  v364 = 0;
                }
                v366 = &v364[24 * v359];
                *(_DWORD *)v366 = v356;
                *((_QWORD *)v366 + 1) = v355;
                *((_QWORD *)v366 + 2) = v344;
                v367 = v366;
                if (v329 != v358)
                {
                  do
                  {
                    v368 = *(_OWORD *)(v329 - 24);
                    *((_QWORD *)v367 - 1) = *((_QWORD *)v329 - 1);
                    *(_OWORD *)(v367 - 24) = v368;
                    v367 -= 24;
                    v329 -= 24;
                  }
                  while (v329 != v358);
                  v329 = *(char **)oslog;
                }
                v365 = v366 + 24;
                *(_QWORD *)oslog = v367;
                *(_QWORD *)&oslog[8] = v366 + 24;
                *(_QWORD *)&oslog[16] = &v364[24 * v363];
                if (v329)
                  operator delete(v329);
                v233 = v361;
              }
              *(_QWORD *)&oslog[8] = v365;
              v329 = v365;
            }
          }
          v369 = (_QWORD *)v330[1];
          if (v369)
          {
            do
            {
              v370 = v369;
              v369 = (_QWORD *)*v369;
            }
            while (v369);
          }
          else
          {
            do
            {
              v370 = (_QWORD *)v330[2];
              _ZF = *v370 == (_QWORD)v330;
              v330 = v370;
            }
            while (!_ZF);
          }
          v330 = v370;
          if (v370 == v331)
            goto LABEL_471;
          continue;
        }
      }
      v329 = 0;
      v333 = (_QWORD *)*v327;
      v331 = v327 + 1;
      v330 = v333;
      if (v333 != v331)
        goto LABEL_486;
LABEL_471:
      v334 = (_QWORD *)*((_QWORD *)v1699 + 1);
      v335 = (void *)v334[32];
      if (v335)
      {
        v334[33] = v335;
        operator delete(v335);
        v334[32] = 0;
        v334[33] = 0;
        v334[34] = 0;
        v329 = *(char **)&oslog[8];
      }
      v336 = *(_QWORD *)&oslog[16];
      v334[32] = *(_QWORD *)oslog;
      v334[33] = v329;
      v334[34] = v336;
      memset(oslog, 0, 24);
      sub_20F6178A8((uint64_t)(v334 + 2));
      if (*(_QWORD *)oslog)
      {
        *(_QWORD *)&oslog[8] = *(_QWORD *)oslog;
        operator delete(*(void **)oslog);
      }
      v337 = object[2];
      if (object[2])
      {
        do
        {
          v338 = (_QWORD *)*v337;
          operator delete(v337);
          v337 = v338;
        }
        while (v338);
      }
      v339 = object[0];
      object[0] = 0;
      if (v339)
        operator delete(v339);
      v340 = v1793[17].f64[1];
      if (*(_QWORD *)&v1793[17].f64[1])
      {
        do
        {
          v341 = **(double **)&v340;
          operator delete(*(void **)&v340);
          v340 = v341;
        }
        while (v341 != 0.0);
      }
      v342 = v1793[16].f64[1];
      v1793[16].f64[1] = 0.0;
      if (v342 != 0.0)
        operator delete(*(void **)&v342);
      if (*(_QWORD *)&v1793[15].f64[0])
      {
        v1793[15].f64[1] = v1793[15].f64[0];
        operator delete(*(void **)&v1793[15].f64[0]);
      }
      v233 = (uint64_t *)*v233;
      if (!v233)
        goto LABEL_532;
    }
    v284 = *(char **)(v1706 + 6376);
    v285 = *(_QWORD *)(v1706 + 6384);
    if ((unint64_t)v284 < v285)
    {
      *(_DWORD *)v284 = v256;
      v286 = (uint64_t)(v284 + 4);
LABEL_426:
      *(_QWORD *)(v1706 + 6376) = v286;
      goto LABEL_427;
    }
    v287 = (char *)*v1672;
    v288 = v284 - (_BYTE *)*v1672;
    v289 = v288 >> 2;
    v290 = (v288 >> 2) + 1;
    if (v290 >> 62)
      sub_20E867F44();
    v291 = v285 - (_QWORD)v287;
    if (v291 >> 1 > v290)
      v290 = v291 >> 1;
    if ((unint64_t)v291 >= 0x7FFFFFFFFFFFFFFCLL)
      v292 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v292 = v290;
    if (v292)
    {
      if (v292 >> 62)
        sub_20E877A38();
      v293 = operator new(4 * v292);
      v294 = &v293[4 * v289];
      *v294 = v256;
      v286 = (uint64_t)(v294 + 1);
      v295 = v284 - v287;
      if (v284 == v287)
        goto LABEL_424;
    }
    else
    {
      v293 = 0;
      v294 = (_DWORD *)(4 * v289);
      *(_DWORD *)(4 * v289) = v256;
      v286 = 4 * v289 + 4;
      v295 = v284 - v287;
      if (v284 == v287)
      {
LABEL_424:
        *(_QWORD *)(v1706 + 6368) = v294;
        *(_QWORD *)(v1706 + 6376) = v286;
        *(_QWORD *)(v1706 + 6384) = &v293[4 * v292];
        if (v287)
          operator delete(v287);
        goto LABEL_426;
      }
    }
    v296 = v295 - 4;
    if (v296 < 0x2C)
      goto LABEL_2058;
    if ((unint64_t)(v284 - v293 - v288) < 0x20)
      goto LABEL_2058;
    v297 = (v296 >> 2) + 1;
    v298 = 4 * (v297 & 0x7FFFFFFFFFFFFFF8);
    v299 = &v284[-v298];
    v294 = (_DWORD *)((char *)v294 - v298);
    v300 = &v293[4 * v289 - 16];
    v301 = v284 - 16;
    v302 = v297 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v303 = *(_OWORD *)v301;
      *(v300 - 1) = *((_OWORD *)v301 - 1);
      *v300 = v303;
      v300 -= 2;
      v301 -= 32;
      v302 -= 8;
    }
    while (v302);
    v284 = v299;
    if (v297 != (v297 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_2058:
      do
      {
        v304 = *((_DWORD *)v284 - 1);
        v284 -= 4;
        *--v294 = v304;
      }
      while (v284 != v287);
    }
    goto LABEL_424;
  }
LABEL_532:
  v191 = v1720;
  v219 = *(_QWORD **)(v1720 + 8);
  v218 = v219[39];
LABEL_533:
  v371 = (*(_QWORD *)(v191 + 5472) - *(_QWORD *)(v191 + 5464)) >> 4;
  v1707 = v191;
  if (v218 != v371)
  {
    __sba = *(_BYTE *)(v1675 + 168);
    v1682 = (_BYTE *)(v191 + 5856);
    if (*(_BYTE *)(v191 + 5856))
    {
      if (!(_DWORD)v371)
      {
LABEL_539:
        v373 = (uint64_t *)v219[52];
        v372 = v1660;
        if (!v373)
        {
LABEL_688:
          v1707 = v1720;
          if (!v1788)
            goto LABEL_726;
          goto LABEL_689;
        }
        v1680 = (char **)(v191 + 5464);
        v1670 = (void **)(v191 + 6392);
        v1677 = v191 + 6632;
        while (1)
        {
          LODWORD(v1793[0].f64[0]) = *((_DWORD *)v373 + 4);
          BYTE4(v1793[0].f64[0]) = 1;
          v1793[2].f64[1] = 0.0;
          *(float64x2_t *)((char *)&v1793[3] + 8) = 0u;
          v1793[4].f64[1] = 0.0;
          *(float64x2_t *)((char *)&v1793[1] + 8) = 0u;
          *(_QWORD *)&v1793[0].f64[1] = v373 + 3;
          v1793[1].f64[0] = 1.0;
          v1793[3].f64[0] = 1.0;
          v1793[5].f64[0] = 1.0;
          *(float64x2_t *)((char *)&v1793[5] + 8) = 0u;
          *(float64x2_t *)((char *)&v1793[6] + 8) = 0u;
          *(float64x2_t *)((char *)&v1793[7] + 8) = 0u;
          v1793[8].f64[1] = 0.0;
          LODWORD(v1793[9].f64[0]) = 1065353216;
          LOBYTE(v1793[9].f64[1]) = 0;
          v1793[1] = *(float64x2_t *)(v373 + 3);
          v374 = *(float64x2_t *)(v373 + 5);
          v375 = *(float64x2_t *)(v373 + 7);
          v376 = *(float64x2_t *)(v373 + 9);
          *(_QWORD *)&v1793[5].f64[0] = v373[11];
          v1793[3] = v375;
          v1793[4] = v376;
          v1793[2] = v374;
          sub_20F811C04((uint64_t)v1793);
          BYTE4(v1793[0].f64[0]) = __sba;
          v1793[1] = **(float64x2_t **)&v1793[0].f64[1];
          v378 = *(float64x2_t *)(*(_QWORD *)&v1793[0].f64[1] + 32);
          v377 = *(float64x2_t *)(*(_QWORD *)&v1793[0].f64[1] + 48);
          v379 = *(float64x2_t *)(*(_QWORD *)&v1793[0].f64[1] + 16);
          v1793[5].f64[0] = *(float64_t *)(*(_QWORD *)&v1793[0].f64[1] + 64);
          v1793[3] = v378;
          v1793[4] = v377;
          v1793[2] = v379;
          sub_20F811C04((uint64_t)v1793);
          v380 = LODWORD(v1793[0].f64[0]);
          v381 = *(__int128 **)(v1707 + 5464);
          v382 = *(__int128 **)(v1707 + 5472);
          if (v382 == v381)
          {
            v381 = *(__int128 **)(v1707 + 5472);
          }
          else
          {
            v383 = v382 - v381;
            do
            {
              v384 = v383 >> 1;
              v385 = &v381[v383 >> 1];
              v387 = *(_DWORD *)v385;
              v386 = v385 + 1;
              v383 += ~(v383 >> 1);
              if (v387 < LODWORD(v1793[0].f64[0]))
                v381 = v386;
              else
                v383 = v384;
            }
            while (v383);
            if (v382 != v381 && LODWORD(v1793[0].f64[0]) == *(_DWORD *)v381)
            {
              v1700 = *(char **)(v1707 + 5472);
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 283, (uint64_t)"result", 6, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              goto LABEL_602;
            }
          }
          v388 = BYTE4(v1793[0].f64[0]);
          oslog[4] = 1;
          *(_DWORD *)oslog = -1;
          *(_DWORD *)&oslog[8] = 0;
          v390 = v1793[0].f64[1];
          v389 = v1793[0].f64[0];
          *(float64x2_t *)&oslog[16] = v1793[0];
          *(float64x2_t *)&oslog[64] = v1793[3];
          *(float64x2_t *)&oslog[80] = v1793[4];
          *(float64x2_t *)&oslog[96] = v1793[5];
          *(float64x2_t *)&oslog[32] = v1793[1];
          *(float64x2_t *)&oslog[48] = v1793[2];
          v391 = v1793[5].f64[1];
          v393 = v1793[6].f64[1];
          v392 = v1793[6].f64[0];
          *(float64_t *)&oslog[112] = v1793[6].f64[0];
          v394 = v1793[7].f64[0];
          memset(&v1793[6], 0, 32);
          v1793[5].f64[1] = 0.0;
          v395 = v1793[7].f64[1];
          v396 = v1793[8].f64[0];
          *(float64_t *)&oslog[120] = v393;
          *(_OWORD *)&oslog[128] = __PAIR128__(*(unint64_t *)&v1793[7].f64[1], *(unint64_t *)&v394);
          v397 = v1793[8].f64[1];
          *(float64x2_t *)&oslog[144] = v1793[8];
          v398 = LODWORD(v1793[9].f64[0]);
          *(_DWORD *)&oslog[160] = LODWORD(v1793[9].f64[0]);
          if (*(_QWORD *)&v1793[8].f64[1])
          {
            v399 = *(_QWORD *)(*(_QWORD *)&v1793[8].f64[0] + 8);
            if ((*(_QWORD *)&v1793[7].f64[1] & (*(_QWORD *)&v1793[7].f64[1] - 1)) != 0)
            {
              if (v399 >= *(_QWORD *)&v1793[7].f64[1])
                v399 %= *(_QWORD *)&v1793[7].f64[1];
            }
            else
            {
              v399 &= *(_QWORD *)&v1793[7].f64[1] - 1;
            }
            *(_QWORD *)(*(_QWORD *)&v394 + 8 * v399) = &oslog[144];
            v1793[8] = 0uLL;
            v389 = *(double *)&oslog[16];
            v390 = *(double *)&oslog[24];
            v391 = *(double *)&oslog[104];
            v392 = *(double *)&oslog[112];
            v393 = *(double *)&oslog[120];
            v394 = *(float64_t *)&oslog[128];
            v395 = *(double *)&oslog[136];
            v396 = *(double *)&oslog[144];
            v397 = *(double *)&oslog[152];
            v398 = *(_DWORD *)&oslog[160];
          }
          v400 = LOBYTE(v1793[9].f64[1]);
          oslog[168] = LOBYTE(v1793[9].f64[1]);
          memset(&oslog[216], 0, 24);
          memset(&oslog[184], 0, 24);
          *(_QWORD *)&oslog[208] = 0x3FF0000000000000;
          *(_QWORD *)&oslog[240] = 0x3FF0000000000000;
          LODWORD(object[0]) = v380;
          object[1] = *(void **)oslog;
          LODWORD(object[2]) = *(_DWORD *)&oslog[8];
          object[3] = *(void **)&v389;
          object[4] = *(void **)&v390;
          object[13] = *(void **)&oslog[96];
          *(_OWORD *)&object[9] = *(_OWORD *)&oslog[64];
          *(_OWORD *)&object[11] = *(_OWORD *)&oslog[80];
          *(_OWORD *)&object[5] = *(_OWORD *)&oslog[32];
          *(_OWORD *)&object[7] = *(_OWORD *)&oslog[48];
          object[14] = *(void **)&v391;
          object[15] = *(void **)&v392;
          memset(&oslog[104], 0, 40);
          object[16] = *(void **)&v393;
          object[17] = *(void **)&v394;
          *(_QWORD *)&oslog[176] = 0x3FF0000000000000;
          object[18] = *(void **)&v395;
          object[19] = *(void **)&v396;
          object[20] = *(void **)&v397;
          LODWORD(object[21]) = v398;
          if (v397 != 0.0)
          {
            v401 = *(_QWORD *)(*(_QWORD *)&v396 + 8);
            if ((*(_QWORD *)&v395 & (*(_QWORD *)&v395 - 1)) != 0)
            {
              if (v401 >= *(_QWORD *)&v395)
                v401 %= *(_QWORD *)&v395;
            }
            else
            {
              v401 &= *(_QWORD *)&v395 - 1;
            }
            *(_QWORD *)(*(_QWORD *)&v394 + 8 * v401) = &object[19];
            *(_QWORD *)&oslog[144] = 0;
            *(_QWORD *)&oslog[152] = 0;
          }
          LOBYTE(object[22]) = v400;
          *(_OWORD *)&object[27] = *(_OWORD *)&oslog[208];
          *(_OWORD *)&object[29] = *(_OWORD *)&oslog[224];
          object[31] = *(void **)&oslog[240];
          *(_OWORD *)&object[23] = *(_OWORD *)&oslog[176];
          *(_OWORD *)&object[25] = *(_OWORD *)&oslog[192];
          v1700 = sub_20F61A4C4(v1680, v381, (int *)object);
          v402 = object[19];
          if (object[19])
          {
            do
            {
              v403 = (_QWORD *)*v402;
              operator delete(v402);
              v402 = v403;
            }
            while (v403);
          }
          v404 = object[17];
          object[17] = 0;
          if (v404)
            operator delete(v404);
          if (object[14])
          {
            object[15] = object[14];
            operator delete(object[14]);
          }
          v405 = *(_QWORD **)&oslog[144];
          if (*(_QWORD *)&oslog[144])
          {
            do
            {
              v406 = (_QWORD *)*v405;
              operator delete(v405);
              v405 = v406;
            }
            while (v406);
          }
          v407 = *(void **)&oslog[128];
          *(_QWORD *)&oslog[128] = 0;
          if (v407)
            operator delete(v407);
          if (*(_QWORD *)&oslog[104])
          {
            *(_QWORD *)&oslog[112] = *(_QWORD *)&oslog[104];
            operator delete(*(void **)&oslog[104]);
          }
          if (v388)
            break;
LABEL_601:
          v1682[2] = 0;
          *v1682 = 0;
          *(_DWORD *)v1677 = 0;
          *(_BYTE *)(v1677 + 4) = 0;
LABEL_602:
          memset(object, 0, 32);
          LODWORD(object[4]) = 1065353216;
          v429 = *(uint64_t ***)(v1707 + 128);
          v430 = *v429;
          v431 = v429[1];
          while (v430 != v431)
          {
            v432 = (__int128 *)*v430;
            if (*(_QWORD *)(*v430 + 24))
            {
              if (*((_DWORD *)v432 + 4) != *((_DWORD *)v373 + 4))
                goto LABEL_603;
LABEL_618:
              v438 = *v432;
              *(_QWORD *)&oslog[16] = *((_QWORD *)v432 + 2);
              *(_OWORD *)oslog = v438;
              *(_OWORD *)&oslog[24] = *(__int128 *)((char *)v432 + 24);
              sub_20F61A180((uint64_t)object, (uint64_t *)oslog, (uint64_t)oslog);
              goto LABEL_603;
            }
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 288, (uint64_t)"frame->lens_model_", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v433 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v433 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (byte_254A6DE68)
              v434 = byte_254A6DE70 == 0;
            else
              v434 = 0;
            if (!v434)
            {
              v435 = qword_254A6DE40;
              for (k = qword_254A6DE48; v435 != k; v435 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v435)(*(_QWORD *)(v435 + 8), "frame->lens_model_", 18, "", 0);
            }
            v437 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v437 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              abort();
            qword_254A6DE58(unk_254A6DE60, "frame->lens_model_", 18, "", 0);
            v432 = (__int128 *)*v430;
            if (*(_DWORD *)(*v430 + 16) == *((_DWORD *)v373 + 4))
              goto LABEL_618;
LABEL_603:
            v430 += 2;
          }
          v439 = *((_QWORD *)v1700 + 1);
          v440 = v439 + 16;
          sub_20EB0F04C(v439 + 128, (uint64_t *)object);
          sub_20F811C04(v440);
          memset(oslog, 0, 24);
          v441 = *(_QWORD **)(v1707 + 16);
          v442 = v441[2];
          if (v442)
          {
            if (v442 > 0xAAAAAAAAAAAAAAALL)
              sub_20E867F44();
            v443 = (char *)operator new(24 * v442);
            *(_QWORD *)oslog = v443;
            *(_QWORD *)&oslog[8] = v443;
            *(_QWORD *)&oslog[16] = &v443[24 * v442];
            v446 = (_QWORD *)*v441;
            v445 = v441 + 1;
            v444 = v446;
            if (v446 == v445)
              goto LABEL_628;
LABEL_643:
            while (2)
            {
              v457 = v444[6];
              if (*(_BYTE *)(v457 + 528))
                v458 = v457 + 40;
              else
                v458 = 0;
              if (*(_BYTE *)(v457 + 528))
              {
                v459 = *(_DWORD *)(v457 + 88);
                if (v459 == *((_DWORD *)v373 + 4))
                {
                  v460 = *(_QWORD *)(v457 + 536);
                  v461 = *(_QWORD *)(v457 + 544);
                  v462 = *(_QWORD *)(v457 + 72);
                  v463 = *(_DWORD *)(v457 + 80);
                  if (v461 != v460)
                  {
                    v464 = (v461 - v460) >> 5;
                    while (1)
                    {
                      v465 = v464 >> 1;
                      v466 = v460 + 32 * (v464 >> 1);
                      v467 = *(_DWORD *)(v466 + 16);
                      v468 = v467 >= v459;
                      if (v467 != v459)
                        goto LABEL_656;
                      if (*(_QWORD *)v466 >= v462)
                        break;
LABEL_650:
                      v460 = v466 + 32;
                      v465 = v464 + ~v465;
LABEL_651:
                      v464 = v465;
                      if (!v465)
                        goto LABEL_659;
                    }
                    if (*(_QWORD *)v466 != v462)
                      goto LABEL_651;
                    v468 = *(_DWORD *)(v466 + 8) >= v463;
LABEL_656:
                    if (v468)
                      goto LABEL_651;
                    goto LABEL_650;
                  }
LABEL_659:
                  if (v460 != v461
                    && *(_DWORD *)(v460 + 16) == v459
                    && *(_QWORD *)v460 == v462
                    && *(_DWORD *)(v460 + 8) == v463)
                  {
                    v469 = *(_QWORD *)(v460 + 24);
                    v470 = *(_DWORD *)(v457 + 32);
                    v471 = *(_QWORD *)&oslog[16];
                    if ((unint64_t)v443 >= *(_QWORD *)&oslog[16])
                      goto LABEL_664;
LABEL_674:
                    *(_DWORD *)v443 = v470;
                    v479 = v443 + 24;
                    *((_QWORD *)v443 + 1) = v469;
                    *((_QWORD *)v443 + 2) = v458;
                  }
                  else
                  {
                    v469 = 0;
                    v470 = *(_DWORD *)(v457 + 32);
                    v471 = *(_QWORD *)&oslog[16];
                    if ((unint64_t)v443 < *(_QWORD *)&oslog[16])
                      goto LABEL_674;
LABEL_664:
                    v472 = v373;
                    v473 = *(char **)oslog;
                    v474 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v443[-*(_QWORD *)oslog] >> 3);
                    v475 = v474 + 1;
                    if (v474 + 1 > 0xAAAAAAAAAAAAAAALL)
                      sub_20E867F44();
                    v476 = 0xAAAAAAAAAAAAAAABLL * ((v471 - *(_QWORD *)oslog) >> 3);
                    if (2 * v476 > v475)
                      v475 = 2 * v476;
                    if (v476 >= 0x555555555555555)
                      v477 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v477 = v475;
                    if (v477)
                    {
                      if (v477 > 0xAAAAAAAAAAAAAAALL)
                        sub_20E877A38();
                      v478 = (char *)operator new(24 * v477);
                    }
                    else
                    {
                      v478 = 0;
                    }
                    v480 = &v478[24 * v474];
                    *(_DWORD *)v480 = v470;
                    *((_QWORD *)v480 + 1) = v469;
                    *((_QWORD *)v480 + 2) = v458;
                    v481 = v480;
                    v373 = v472;
                    if (v443 != v473)
                    {
                      do
                      {
                        v482 = *(_OWORD *)(v443 - 24);
                        *((_QWORD *)v481 - 1) = *((_QWORD *)v443 - 1);
                        *(_OWORD *)(v481 - 24) = v482;
                        v481 -= 24;
                        v443 -= 24;
                      }
                      while (v443 != v473);
                      v443 = *(char **)oslog;
                    }
                    v483 = &v478[24 * v477];
                    v479 = v480 + 24;
                    *(_QWORD *)oslog = v481;
                    *(_QWORD *)&oslog[8] = v480 + 24;
                    *(_QWORD *)&oslog[16] = v483;
                    if (v443)
                      operator delete(v443);
                  }
                  *(_QWORD *)&oslog[8] = v479;
                  v443 = v479;
                }
              }
              v484 = (_QWORD *)v444[1];
              if (v484)
              {
                do
                {
                  v485 = v484;
                  v484 = (_QWORD *)*v484;
                }
                while (v484);
              }
              else
              {
                do
                {
                  v485 = (_QWORD *)v444[2];
                  _ZF = *v485 == (_QWORD)v444;
                  v444 = v485;
                }
                while (!_ZF);
              }
              v444 = v485;
              if (v485 == v445)
                goto LABEL_628;
              continue;
            }
          }
          v443 = 0;
          v447 = (_QWORD *)*v441;
          v445 = v441 + 1;
          v444 = v447;
          if (v447 != v445)
            goto LABEL_643;
LABEL_628:
          v448 = (_QWORD *)*((_QWORD *)v1700 + 1);
          v449 = (void *)v448[13];
          if (v449)
          {
            v448[14] = v449;
            operator delete(v449);
            v448[13] = 0;
            v448[14] = 0;
            v448[15] = 0;
            v443 = *(char **)&oslog[8];
          }
          v450 = *(_QWORD *)&oslog[16];
          v448[13] = *(_QWORD *)oslog;
          v448[14] = v443;
          v448[15] = v450;
          memset(oslog, 0, 24);
          sub_20F811E38((uint64_t)(v448 + 2));
          v372 = v1660;
          if (*(_QWORD *)oslog)
          {
            *(_QWORD *)&oslog[8] = *(_QWORD *)oslog;
            operator delete(*(void **)oslog);
          }
          v451 = object[2];
          if (object[2])
          {
            do
            {
              v452 = (_QWORD *)*v451;
              operator delete(v451);
              v451 = v452;
            }
            while (v452);
          }
          v453 = object[0];
          object[0] = 0;
          if (v453)
            operator delete(v453);
          v454 = v1793[8].f64[0];
          if (*(_QWORD *)&v1793[8].f64[0])
          {
            do
            {
              v455 = **(double **)&v454;
              operator delete(*(void **)&v454);
              v454 = v455;
            }
            while (v455 != 0.0);
          }
          v456 = v1793[7].f64[0];
          v1793[7].f64[0] = 0.0;
          if (v456 != 0.0)
            operator delete(*(void **)&v456);
          if (*(_QWORD *)&v1793[5].f64[1])
          {
            v1793[6].f64[0] = v1793[5].f64[1];
            operator delete(*(void **)&v1793[5].f64[1]);
          }
          v373 = (uint64_t *)*v373;
          if (!v373)
            goto LABEL_688;
        }
        v408 = *(char **)(v1707 + 6400);
        v409 = *(_QWORD *)(v1707 + 6408);
        if ((unint64_t)v408 < v409)
        {
          *(_DWORD *)v408 = v380;
          v410 = (uint64_t)(v408 + 4);
LABEL_600:
          *(_QWORD *)(v1707 + 6400) = v410;
          goto LABEL_601;
        }
        v411 = (char *)*v1670;
        v412 = v408 - (_BYTE *)*v1670;
        v413 = v412 >> 2;
        v414 = (v412 >> 2) + 1;
        if (v414 >> 62)
          sub_20E867F44();
        v415 = v409 - (_QWORD)v411;
        if (v415 >> 1 > v414)
          v414 = v415 >> 1;
        if ((unint64_t)v415 >= 0x7FFFFFFFFFFFFFFCLL)
          v416 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v416 = v414;
        if (v416)
        {
          if (v416 >> 62)
            sub_20E877A38();
          v417 = operator new(4 * v416);
          v418 = &v417[4 * v413];
          *v418 = v380;
          v410 = (uint64_t)(v418 + 1);
          v419 = v408 - v411;
          if (v408 == v411)
            goto LABEL_598;
        }
        else
        {
          v417 = 0;
          v418 = (_DWORD *)(4 * v413);
          *(_DWORD *)(4 * v413) = v380;
          v410 = 4 * v413 + 4;
          v419 = v408 - v411;
          if (v408 == v411)
          {
LABEL_598:
            *(_QWORD *)(v1707 + 6392) = v418;
            *(_QWORD *)(v1707 + 6400) = v410;
            *(_QWORD *)(v1707 + 6408) = &v417[4 * v416];
            if (v411)
              operator delete(v411);
            goto LABEL_600;
          }
        }
        v420 = v419 - 4;
        if (v420 < 0x2C)
          goto LABEL_2059;
        if ((unint64_t)(v408 - v417 - v412) < 0x20)
          goto LABEL_2059;
        v421 = (v420 >> 2) + 1;
        v422 = 4 * (v421 & 0x7FFFFFFFFFFFFFF8);
        v423 = &v408[-v422];
        v418 = (_DWORD *)((char *)v418 - v422);
        v424 = &v417[4 * v413 - 16];
        v425 = v408 - 16;
        v426 = v421 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v427 = *(_OWORD *)v425;
          *(v424 - 1) = *((_OWORD *)v425 - 1);
          *v424 = v427;
          v424 -= 2;
          v425 -= 32;
          v426 -= 8;
        }
        while (v426);
        v408 = v423;
        if (v421 != (v421 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_2059:
          do
          {
            v428 = *((_DWORD *)v408 - 1);
            v408 -= 4;
            *--v418 = v428;
          }
          while (v408 != v411);
        }
        goto LABEL_598;
      }
    }
    else
    {
      memset(object, 0, 32);
      if (sub_20F5B8114((_QWORD *)(v191 + 4880), (int *)object, oslog, 1))
      {
        *(_QWORD *)(v191 + 6448) = *(_QWORD *)(v191 + 6440);
        *(_QWORD *)(v191 + 6472) = *(_QWORD *)(v191 + 6464);
        *(_QWORD *)(v191 + 6496) = *(_QWORD *)(v191 + 6488);
        *(_QWORD *)(v191 + 6520) = *(_QWORD *)(v191 + 6512);
        *(_QWORD *)(v191 + 6544) = *(_QWORD *)(v191 + 6536);
        *(_QWORD *)(v191 + 6568) = *(_QWORD *)(v191 + 6560);
        *(_QWORD *)(v191 + 6592) = *(_QWORD *)(v191 + 6584);
        *(_QWORD *)(v191 + 6616) = *(_QWORD *)(v191 + 6608);
        v625 = *(_QWORD *)(v191 + 5656);
        v626 = *(_QWORD *)(v191 + 5664);
        while (v625 != v626)
        {
          v627 = *(_QWORD *)(v625 + 208);
          if (*(_BYTE *)(v625 + 496)
            || (*(_BYTE *)(v627 + 4) & 6) != 0
            || (*(_BYTE *)(*(_QWORD *)(v625 + 216) + 4) & 6) != 0)
          {
            sub_20F394A20(v191 + 6440, v627);
            sub_20F3D35E0((_QWORD *)(v191 + 6440), *(_QWORD *)(v625 + 216));
          }
          v625 += 504;
        }
        v628 = *(_QWORD *)(v191 + 5680);
        v629 = *(_QWORD *)(v191 + 5688);
        while (v628 != v629)
        {
          v630 = *(_QWORD *)(v628 + 136);
          if (*(_BYTE *)(v628 + 272) || (*(_BYTE *)(v630 + 4) & 6) != 0)
            sub_20F394A20(v191 + 6440, v630);
          v628 += 280;
        }
        v631 = (uint64_t *)v191;
        sub_20F5B8680(*(_QWORD *)(v191 + 5704), *(_QWORD *)(v191 + 5712), (_QWORD *)(v191 + 6440));
        sub_20F5B85BC(v631[716], v631[717], (_QWORD *)(v191 + 6440));
        sub_20F5B8444(v631[719], v631[720], (_QWORD *)(v191 + 6440));
        v632 = *(_QWORD *)(v191 + 5776);
        v633 = *(_QWORD *)(v191 + 5784);
        while (v632 != v633)
        {
          v634 = *(_QWORD *)(v632 + 736);
          if (*(_BYTE *)(v632 + 880)
            || (*(_BYTE *)(v634 + 4) & 6) != 0
            || (*(_BYTE *)(*(_QWORD *)(v632 + 744) + 4) & 6) != 0)
          {
            sub_20F394A20(v191 + 6440, v634);
            sub_20F394A20(v191 + 6440, *(_QWORD *)(v632 + 744));
          }
          v632 += 888;
        }
        v635 = (*(_QWORD *)(v191 + 6592) - *(_QWORD *)(v191 + 6584)) >> 2;
        if (LODWORD(object[3]) > v635)
          LODWORD(v635) = object[3];
        _CF = *(_DWORD *)&oslog[24] >= v635;
        v636 = *(_DWORD *)&oslog[24] - v635;
        if (_CF)
          v637 = v636;
        else
          v637 = 0;
        sub_20F59A618((_QWORD *)(v191 + 4880));
        if (!v637)
          goto LABEL_539;
      }
      else if (!*(_DWORD *)&oslog[24])
      {
        goto LABEL_539;
      }
    }
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 271, (uint64_t)"!this->linear_system_.graph().template numberOfVariable<VARIABLE_TYPE>()", 72, (uint64_t)"CameraCalibVariables of this type have already been added.", 58, (void (*)(void **))sub_21023DDB0))goto LABEL_539;
LABEL_2016:
    abort();
  }
  v372 = v1660;
  if (!v1788)
    goto LABEL_726;
LABEL_689:
  v486 = *(_QWORD **)(v1707 + 16);
  if (v486)
  {
    v489 = (_QWORD *)*v486;
    v488 = v486 + 1;
    v487 = v489;
    if (v489 != v488)
    {
      while (1)
      {
        v490 = v487[6];
        if (*(_BYTE *)(v490 + 528))
          break;
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 769, (uint64_t)"track->getStructure()", 21, (uint64_t)"The track does not have the structure", 37, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_2016;
        }
        v490 = v487[6];
        v491 = *(_DWORD *)(v490 + 32);
        v492 = *(char **)(v1707 + 5560);
        v493 = *(char **)(v1707 + 5568);
        v494 = v493 - v492;
        if (v493 != v492)
          goto LABEL_698;
LABEL_703:
        if (v492 == v493 || *(_DWORD *)v492 != v491)
        {
          v500 = v490 + 40;
          v501 = *(unsigned __int8 *)(v490 + 528);
          v502 = *(_BYTE *)(v490 + 528) ? (void *)(v490 + 40) : 0;
          LODWORD(object[0]) = v491;
          BYTE4(object[0]) = 1;
          object[1] = v502;
          if (v501)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v500 + 24))(v490 + 40))
            {
              _Q1 = *(_OWORD *)(v490 + 104);
              _D3 = *(_QWORD *)(v490 + 112);
              __asm { FMLA            D2, D3, V1.D[1] }
              if (fabs(sqrt(_D2 + *(double *)(v490 + 120) * *(double *)(v490 + 120)) + -1.0) > 0.000001)
              {
                v508 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
LABEL_713:
                if (v508)
                  goto LABEL_2016;
              }
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v500 + 24))(v490 + 40))
              {
                v509 = *(uint64_t **)(v490 + 136);
                v510 = *v509;
                v511 = (double *)v509[2];
                v512 = v509[4];
                v513 = (double *)v509[6];
                _D1 = *(double *)(v490 + 56) - v511[1];
                v515 = *(double *)(v490 + 64) - v511[2];
                _Q3.f64[0] = *(float64_t *)(v510 + 16);
                _Q7 = *(_OWORD *)(v510 + 48);
                _Q3.f64[1] = *(float64_t *)(v510 + 40);
                v518 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v510, *(int64x2_t *)(v510 + 24)), *(double *)(v490 + 48) - *v511), (float64x2_t)vzip2q_s64(*(int64x2_t *)v510, *(int64x2_t *)(v510 + 24)), _D1), _Q3, v515);
                __asm { FMLA            D2, D1, V7.D[1] }
                v520 = _D2 + *(double *)(v510 + 64) * v515;
                v521 = v518.f64[0] - *v513;
                _D2 = v518.f64[1] - v513[1];
                v523 = v520 - v513[2];
                _Q3.f64[0] = *(float64_t *)(v512 + 16);
                _Q4 = *(int64x2_t *)v512;
                _Q6 = *(int64x2_t *)(v512 + 24);
                _Q16 = *(_OWORD *)(v512 + 48);
                __asm { FMLA            D19, D2, V4.D[1] }
                _Q3.f64[1] = *(float64_t *)(v512 + 40);
                _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v512, _Q6), v521), (float64x2_t)vzip2q_s64(*(int64x2_t *)v512, _Q6), _D2), _Q3, v523);
                __asm
                {
                  FMLA            D3, D2, V16.D[1]
                  FMLA            D1, D2, V6.D[1]
                }
                _D1 = _D1 + v523 * _Q3.f64[1];
                __asm { FMLA            D2, D1, V17.D[1] }
                object[2] = COERCE_VOID_(sqrt(_D2+ (_Q3.f64[0] + v523 * *(double *)(v512 + 64))* (_Q3.f64[0] + *(double *)(v512 + 64) * v523)));
                _Q1 = *(_OWORD *)(v490 + 104);
                _Q3.f64[0] = *(float64_t *)(v490 + 112);
                __asm { FMLA            D2, D3, V1.D[1] }
                if (fabs(sqrt(_D2 + *(double *)(v490 + 120) * *(double *)(v490 + 120)) + -1.0) > 0.000001
                  && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_2016;
                }
                if (sub_20F76CD14(v1707 + 4880, (unsigned int *)object))
                {
                  *(_BYTE *)(v1707 + 6636) = 0;
                  *(_DWORD *)(v1707 + 6632) = 0;
                }
              }
              goto LABEL_719;
            }
            v508 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 44, (uint64_t)"initializeImpl()", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            goto LABEL_713;
          }
        }
LABEL_719:
        v534 = (_QWORD *)v487[1];
        if (v534)
        {
          do
          {
            v535 = v534;
            v534 = (_QWORD *)*v534;
          }
          while (v534);
        }
        else
        {
          do
          {
            v535 = (_QWORD *)v487[2];
            _ZF = *v535 == (_QWORD)v487;
            v487 = v535;
          }
          while (!_ZF);
        }
        v487 = v535;
        if (v535 == v488)
        {
          v1707 = v1720;
          v372 = v1660;
          goto LABEL_726;
        }
      }
      v491 = *(_DWORD *)(v490 + 32);
      v492 = *(char **)(v1707 + 5560);
      v493 = *(char **)(v1707 + 5568);
      v494 = v493 - v492;
      if (v493 == v492)
        goto LABEL_703;
LABEL_698:
      v495 = v494 >> 4;
      do
      {
        v496 = v495 >> 1;
        v497 = &v492[16 * (v495 >> 1)];
        v499 = *(_DWORD *)v497;
        v498 = v497 + 16;
        v495 += ~(v495 >> 1);
        if (v499 < v491)
          v492 = v498;
        else
          v495 = v496;
      }
      while (v495);
      goto LABEL_703;
    }
  }
LABEL_726:
  memset(object, 0, 24);
  sub_20F721B00(v1707);
  if (object[0])
    operator delete(object[0]);
  if (!(*v372)[2].__shared_weak_owners_)
    goto LABEL_933;
  v536 = v1790;
  v537 = (*v372)[2].__vftable;
  v538 = (int64x2_t *)v1720;
  v539 = v537[1].~__shared_weak_count_0;
  v1686 = *((double *)v539 + 8);
  v1698 = *((int8x16_t *)v539 + 2);
  v1701 = *((int8x16_t *)v539 + 3);
  v1692 = *(int8x16_t *)v539;
  *(_OWORD *)__dst = *((_OWORD *)v539 + 1);
  __sbb = *((double *)v539 + 11);
  v1708 = *(int8x16_t *)((char *)v539 + 72);
  v542 = (char *)operator new(0x58uLL);
  v543 = dbl_2103B48F0[v536 == 0];
  *((_QWORD *)v542 + 1) = 0;
  v544 = (unint64_t *)(v542 + 8);
  *((_QWORD *)v542 + 2) = 0;
  *(_QWORD *)v542 = &off_24CA016C8;
  *((_QWORD *)v542 + 3) = &off_24CA01718;
  v545 = v542 + 24;
  v546 = sqrt(v543);
  *((double *)v542 + 5) = v546;
  *((double *)v542 + 6) = v546;
  v547 = vdupq_n_s64(0x40F86A0000000000uLL);
  *(int64x2_t *)(v542 + 56) = v547;
  *(int64x2_t *)(v542 + 72) = v547;
  v542[32] = 1;
  v1714 = (std::__shared_weak_count *)v542;
  v548 = v538->i64[1];
  if (!*(_QWORD *)(v548 + 64))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 968, (uint64_t)"!this->viobadata_ref_.state_set->empty()", 40, (uint64_t)"First VIOState must exist to add the prior.", 43, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v548 = v538->i64[1];
  }
  v549 = v538 + 366;
  v550 = vextq_s8(v1701, v1701, 8uLL).u64[0];
  v551 = vextq_s8(v1698, v1698, 8uLL).u64[0];
  v552 = vextq_s8(*(int8x16_t *)__dst, *(int8x16_t *)__dst, 8uLL).u64[0];
  v553 = vextq_s8(v1692, v1692, 8uLL).u64[0];
  v554 = vextq_s8(v1708, v1708, 8uLL).u64[0];
  v555 = *(_QWORD *)(v548 + 48);
  v556 = (char *)v538[355].i64[1];
  v557 = (char *)v538[355].i64[0];
  if (v556 == v557)
    v558 = 0.0;
  else
    *(_QWORD *)&v558 = (*((_DWORD *)v556 - 68) + 1);
  v559 = *(_DWORD *)(v555 + 40);
  *(_QWORD *)&v560.f64[0] = v1692.i64[0];
  *(void **)&v561.f64[0] = __dst[0];
  *(_QWORD *)&v560.f64[1] = v553;
  v1793[0].f64[0] = v558;
  *(_QWORD *)&v561.f64[1] = v552;
  v1793[1] = v560;
  v1793[2] = v561;
  *(_QWORD *)&v560.f64[0] = v1698.i64[0];
  *(_QWORD *)&v561.f64[0] = v1701.i64[0];
  *(_QWORD *)&v560.f64[1] = v551;
  *(_QWORD *)&v561.f64[1] = v550;
  v1793[3] = v560;
  v1793[4] = v561;
  *(_QWORD *)&v560.f64[0] = v1708.i64[0];
  *(_QWORD *)&v560.f64[1] = v554;
  v1793[5].f64[0] = v1686;
  v1793[6].f64[1] = __sbb;
  *(float64x2_t *)((char *)&v1793[5] + 8) = v560;
  *(_QWORD *)&v1793[7].f64[0] = v542 + 24;
  *(_QWORD *)&v1793[7].f64[1] = v542;
  do
    v562 = __ldxr(v544);
  while (__stxr(v562 + 1, v544));
  v1727 = 0uLL;
  v563 = v556;
  v1828 = 0uLL;
  v564 = v556 - v557;
  if (v556 != v557)
  {
    v563 = v556;
    if (*((_QWORD *)v556 - 35) >= *(_QWORD *)&v558)
    {
      v565 = 0xAF8AF8AF8AF8AF8BLL * (v564 >> 3);
      v566 = v557;
      do
      {
        v567 = v565 >> 1;
        v568 = &v566[280 * (v565 >> 1)];
        v569 = *(_QWORD *)v568;
        v570 = v568 + 280;
        v565 += ~(v565 >> 1);
        if (v569 < *(_QWORD *)&v558)
          v566 = v570;
        else
          v565 = v567;
      }
      while (v565);
      v563 = v556;
      if (v566 != v556)
      {
        v563 = v566;
        if (*(_QWORD *)v566 == *(_QWORD *)&v558)
          goto LABEL_827;
      }
    }
  }
  *(_QWORD *)&v571 = v1692.i64[0];
  *((_QWORD *)&v571 + 1) = v553;
  *(float64x2_t *)oslog = v1793[0];
  *(_OWORD *)&oslog[16] = v571;
  *(void **)&v572 = __dst[0];
  *((_QWORD *)&v572 + 1) = v552;
  *(_QWORD *)&v573 = v1698.i64[0];
  *((_QWORD *)&v573 + 1) = v551;
  *(_OWORD *)&oslog[32] = v572;
  *(_OWORD *)&oslog[48] = v573;
  *(_QWORD *)&v574 = v1701.i64[0];
  *((_QWORD *)&v574 + 1) = v550;
  *(_OWORD *)&oslog[64] = v574;
  *(float64_t *)&oslog[80] = v1686;
  *(float64_t *)&oslog[104] = __sbb;
  *(_QWORD *)&v575 = v1708.i64[0];
  *((_QWORD *)&v575 + 1) = v554;
  *(_OWORD *)&oslog[88] = v575;
  *(_QWORD *)&oslog[112] = v542 + 24;
  *(_QWORD *)&oslog[120] = v542;
  v1793[7] = 0uLL;
  memset(&oslog[248], 0, 17);
  *(_QWORD *)&oslog[128] = 0;
  *(_QWORD *)&oslog[232] = 0xBFF0000000000000;
  oslog[240] = 0;
  v576 = (void **)v538[305].i64[1];
  v577 = v538[306].i64[0];
  if ((void **)v577 != v576)
  {
    v578 = (v577 - (uint64_t)v576) >> 4;
    do
    {
      v579 = v578 >> 1;
      v580 = &v576[2 * (v578 >> 1)];
      v582 = *(_DWORD *)v580;
      v581 = v580 + 2;
      v540 = (void **)v582;
      v541 = ~(v578 >> 1);
      v578 += v541;
      if (v582 < v559)
        v576 = v581;
      else
        v578 = v579;
    }
    while (v578);
    if (v576 != (void **)v577 && *(_DWORD *)v576 == v559)
    {
      *(_QWORD *)&oslog[128] = v576[1];
      v583 = *(_QWORD *)&oslog[128];
      ++*((_DWORD *)v576[1] + 2);
      if (*(_BYTE *)(v583 + 20))
      {
        *(_OWORD *)&object[1] = *(_OWORD *)oslog;
        *(_OWORD *)&object[5] = *(_OWORD *)&oslog[32];
        *(_OWORD *)&object[7] = *(_OWORD *)&oslog[48];
        *(_OWORD *)&object[9] = *(_OWORD *)&oslog[64];
        object[0] = *(void **)&v558;
        object[11] = *(void **)&oslog[80];
        *(_OWORD *)&object[3] = *(_OWORD *)&oslog[16];
        *(_OWORD *)&object[12] = *(_OWORD *)&oslog[88];
        object[14] = *(void **)&oslog[104];
        object[15] = v542 + 24;
        *(_QWORD *)&oslog[112] = 0;
        *(_QWORD *)&oslog[120] = 0;
        object[16] = v542;
        object[17] = (void *)v583;
        *(_OWORD *)&object[18] = *(_OWORD *)&oslog[136];
        *(_OWORD *)&object[20] = *(_OWORD *)&oslog[152];
        *(_OWORD *)&object[22] = *(_OWORD *)&oslog[168];
        *(_OWORD *)&object[24] = *(_OWORD *)&oslog[184];
        *(_OWORD *)&object[26] = *(_OWORD *)&oslog[200];
        *(_OWORD *)&object[28] = *(_OWORD *)&oslog[216];
        LOBYTE(object[31]) = oslog[240];
        object[30] = *(void **)&oslog[232];
        memset(&object[32], 0, 17);
        *(_QWORD *)&oslog[248] = 0;
        *(_QWORD *)&oslog[256] = 0;
        if (v556 == v563 || *(_QWORD *)v563 != *(_QWORD *)&v558)
        {
          __dsta = v583;
          v540 = &object[3];
          v581 = &object[12];
          v1702 = v557;
          v584 = v563 - v557;
          v1709 = 0xAF8AF8AF8AF8AF8BLL * ((v563 - v557) >> 3);
          v585 = v538[356].u64[0];
          if ((unint64_t)v556 >= v585)
          {
            v1262 = 1 - 0x5075075075075075 * (v564 >> 3);
            if (v1262 > 0xEA0EA0EA0EA0EALL)
              sub_20E867F44();
            v1263 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v585 - (_QWORD)v557) >> 3);
            if (2 * v1263 > v1262)
              v1262 = 2 * v1263;
            if (v1263 >= 0x75075075075075)
              v1264 = 0xEA0EA0EA0EA0EALL;
            else
              v1264 = v1262;
            v1842[4] = &v538[356];
            if (v1264)
            {
              if (v1264 > 0xEA0EA0EA0EA0EALL)
                sub_20E877A38();
              v1265 = (char *)operator new(280 * v1264);
            }
            else
            {
              v1265 = 0;
            }
            v1290 = &v1265[280 * v1709];
            v1842[0] = v1265;
            v1842[1] = v1290;
            v1842[2] = v1290;
            v1842[3] = &v1265[280 * v1264];
            if (v1709 == v1264)
            {
              if (v584 < 1)
              {
                if (v1702 == v563)
                  v1295 = 1;
                else
                  v1295 = 2 * v1709;
                if (v1295 > 0xEA0EA0EA0EA0EALL)
                  sub_20E877A38();
                v1296 = (char *)operator new(280 * v1295);
                v1290 = &v1296[280 * (v1295 >> 2)];
                v1842[0] = v1296;
                v1842[1] = v1290;
                v1842[3] = &v1296[280 * v1295];
                if (v1265)
                  operator delete(v1265);
                v1293 = (uint64_t)v1290;
              }
              else
              {
                v1291 = v1709 + 2;
                if (v1709 >= -1)
                  v1291 = v1709 + 1;
                v1292 = v1291 >> 1;
                v1293 = sub_20F5B6660((uint64_t)v1290, (uint64_t)v1290, (uint64_t)&v1290[-280 * (v1291 >> 1)]);
                v1290 = (char *)v1842[1] - 280 * v1292;
                v1842[1] = v1290;
                v558 = *(double *)object;
              }
            }
            else
            {
              v1293 = (uint64_t)&v1265[280 * v1709];
            }
            *(float64_t *)v1293 = v558;
            *(_OWORD *)(v1293 + 8) = *(_OWORD *)&object[1];
            v1297 = *(_OWORD *)&object[3];
            *(_OWORD *)(v1293 + 40) = *(_OWORD *)&object[5];
            v1298 = *(_OWORD *)&object[9];
            *(_OWORD *)(v1293 + 56) = *(_OWORD *)&object[7];
            *(_OWORD *)(v1293 + 72) = v1298;
            *(void **)(v1293 + 88) = object[11];
            *(_OWORD *)(v1293 + 24) = v1297;
            *(void **)(v1293 + 112) = object[14];
            *(_OWORD *)(v1293 + 96) = *(_OWORD *)&object[12];
            *(_OWORD *)(v1293 + 120) = *(_OWORD *)&object[15];
            object[15] = 0;
            object[16] = 0;
            *(void **)(v1293 + 136) = object[17];
            v1299 = *(_OWORD *)&object[18];
            v1300 = *(_OWORD *)&object[22];
            *(_OWORD *)(v1293 + 160) = *(_OWORD *)&object[20];
            *(_OWORD *)(v1293 + 176) = v1300;
            *(_OWORD *)(v1293 + 144) = v1299;
            v1301 = *(_OWORD *)&object[24];
            v1302 = *(_OWORD *)&object[28];
            *(_OWORD *)(v1293 + 208) = *(_OWORD *)&object[26];
            *(_OWORD *)(v1293 + 224) = v1302;
            *(_OWORD *)(v1293 + 192) = v1301;
            v1303 = object[30];
            *(_BYTE *)(v1293 + 248) = object[31];
            *(_QWORD *)(v1293 + 240) = v1303;
            *(_OWORD *)(v1293 + 256) = *(_OWORD *)&object[32];
            object[32] = 0;
            object[33] = 0;
            *(_BYTE *)(v1293 + 272) = object[34];
            v1304 = (char *)(v1293 + 280);
            v1842[2] = (void *)(v1293 + 280);
            v1305 = (char *)v538[355].i64[0];
            if (v1305 == v563)
            {
              v549 = v538 + 366;
            }
            else
            {
              v1306 = 0;
              v549 = v538 + 366;
              do
              {
                v1307 = &v1290[v1306];
                v1308 = &v563[v1306];
                *(_QWORD *)&v1290[v1306 - 280] = *(_QWORD *)&v563[v1306 - 280];
                *(_OWORD *)&v1290[v1306 - 272] = *(_OWORD *)&v563[v1306 - 272];
                v1310 = *(_OWORD *)&v563[v1306 - 224];
                v1309 = *(_OWORD *)&v563[v1306 - 208];
                v1311 = *(_OWORD *)&v563[v1306 - 240];
                *((_QWORD *)v1307 - 24) = *(_QWORD *)&v563[v1306 - 192];
                *((_OWORD *)v1307 - 14) = v1310;
                *((_OWORD *)v1307 - 13) = v1309;
                *((_OWORD *)v1307 - 15) = v1311;
                *((_OWORD *)v1307 - 16) = *(_OWORD *)&v563[v1306 - 256];
                v1312 = *(_OWORD *)&v563[v1306 - 184];
                *((_QWORD *)v1307 - 21) = *(_QWORD *)&v563[v1306 - 168];
                *(_OWORD *)(v1307 - 184) = v1312;
                *((_OWORD *)v1307 - 10) = *(_OWORD *)&v563[v1306 - 160];
                *((_QWORD *)v1308 - 20) = 0;
                *((_QWORD *)v1308 - 19) = 0;
                *((_QWORD *)v1307 - 18) = *(_QWORD *)&v563[v1306 - 144];
                v1313 = *(_OWORD *)&v563[v1306 - 136];
                v1314 = *(_OWORD *)&v563[v1306 - 120];
                *(_OWORD *)(v1307 - 104) = *(_OWORD *)&v563[v1306 - 104];
                *(_OWORD *)(v1307 - 120) = v1314;
                *(_OWORD *)(v1307 - 136) = v1313;
                v1315 = *(_OWORD *)&v563[v1306 - 88];
                v1316 = *(_OWORD *)&v563[v1306 - 72];
                *(_OWORD *)(v1307 - 56) = *(_OWORD *)&v563[v1306 - 56];
                *(_OWORD *)(v1307 - 72) = v1316;
                *(_OWORD *)(v1307 - 88) = v1315;
                v1317 = *(_QWORD *)&v563[v1306 - 40];
                *(v1307 - 32) = v563[v1306 - 32];
                *((_QWORD *)v1307 - 5) = v1317;
                *(_OWORD *)(v1307 - 24) = *(_OWORD *)&v563[v1306 - 24];
                *((_QWORD *)v1308 - 3) = 0;
                *((_QWORD *)v1308 - 2) = 0;
                *(v1307 - 8) = v563[v1306 - 8];
                v1306 -= 280;
              }
              while (&v563[v1306] != v1305);
              v1304 = (char *)v1842[2];
              v1290 += v1306;
            }
            v1842[1] = v1290;
            v1318 = (char *)v538[355].i64[1];
            if (v1318 != v563)
            {
              do
              {
                *(_QWORD *)v1304 = *(_QWORD *)v563;
                *(_OWORD *)(v1304 + 8) = *(_OWORD *)(v563 + 8);
                v1319 = *(_OWORD *)(v563 + 56);
                v1320 = *(_OWORD *)(v563 + 72);
                v1321 = *((_QWORD *)v563 + 11);
                *(_OWORD *)(v1304 + 40) = *(_OWORD *)(v563 + 40);
                *((_QWORD *)v1304 + 11) = v1321;
                *(_OWORD *)(v1304 + 72) = v1320;
                *(_OWORD *)(v1304 + 56) = v1319;
                *(_OWORD *)(v1304 + 24) = *(_OWORD *)(v563 + 24);
                v1322 = *((_OWORD *)v563 + 6);
                *((_QWORD *)v1304 + 14) = *((_QWORD *)v563 + 14);
                *((_OWORD *)v1304 + 6) = v1322;
                *(_OWORD *)(v1304 + 120) = *(_OWORD *)(v563 + 120);
                *((_QWORD *)v563 + 15) = 0;
                *((_QWORD *)v563 + 16) = 0;
                *((_QWORD *)v1304 + 17) = *((_QWORD *)v563 + 17);
                v1323 = *((_OWORD *)v563 + 9);
                v1324 = *((_OWORD *)v563 + 11);
                *((_OWORD *)v1304 + 10) = *((_OWORD *)v563 + 10);
                *((_OWORD *)v1304 + 11) = v1324;
                *((_OWORD *)v1304 + 9) = v1323;
                v1325 = *((_OWORD *)v563 + 12);
                v1326 = *((_OWORD *)v563 + 14);
                *((_OWORD *)v1304 + 13) = *((_OWORD *)v563 + 13);
                *((_OWORD *)v1304 + 14) = v1326;
                *((_OWORD *)v1304 + 12) = v1325;
                v1327 = *((_QWORD *)v563 + 30);
                v1304[248] = v563[248];
                *((_QWORD *)v1304 + 30) = v1327;
                *((_OWORD *)v1304 + 16) = *((_OWORD *)v563 + 16);
                *((_QWORD *)v563 + 32) = 0;
                *((_QWORD *)v563 + 33) = 0;
                v1304[272] = v563[272];
                v1304 += 280;
                v563 += 280;
              }
              while (v563 != v1318);
              v1290 = (char *)v1842[1];
              v563 = (char *)v538[355].i64[1];
            }
            v1328 = (char *)v538[355].i64[0];
            v538[355].i64[0] = (uint64_t)v1290;
            v538[355].i64[1] = (uint64_t)v1304;
            v1329 = (void *)v538[356].i64[0];
            v538[356].i64[0] = (uint64_t)v1842[3];
            v1842[3] = v1329;
            v1842[1] = v1328;
            v1842[0] = v1328;
            if (v563 != v1328)
            {
              do
              {
                v1842[2] = v563 - 280;
                v1330 = (std::__shared_weak_count *)*((_QWORD *)v563 - 2);
                if (v1330)
                {
                  v1331 = (unint64_t *)&v1330->__shared_owners_;
                  do
                    v1332 = __ldaxr(v1331);
                  while (__stlxr(v1332 - 1, v1331));
                  if (!v1332)
                  {
                    ((void (*)(std::__shared_weak_count *))v1330->__on_zero_shared)(v1330);
                    std::__shared_weak_count::__release_weak(v1330);
                  }
                }
                v1333 = (std::__shared_weak_count *)*((_QWORD *)v563 - 19);
                if (v1333)
                {
                  v1334 = (unint64_t *)&v1333->__shared_owners_;
                  do
                    v1335 = __ldaxr(v1334);
                  while (__stlxr(v1335 - 1, v1334));
                  if (!v1335)
                  {
                    ((void (*)(std::__shared_weak_count *))v1333->__on_zero_shared)(v1333);
                    std::__shared_weak_count::__release_weak(v1333);
                  }
                }
                v563 = (char *)v1842[2];
              }
              while (v1842[2] != v1328);
              v563 = (char *)v1842[0];
            }
            if (v563)
              operator delete(v563);
          }
          else if (v563 == v556)
          {
            *(float64_t *)v556 = v558;
            v1280 = &v557[8 * ((v563 - v557) >> 3)];
            *(_OWORD *)(v1280 + 8) = *(_OWORD *)&object[1];
            v1282 = *(_OWORD *)&object[7];
            v1281 = *(_OWORD *)&object[9];
            v1283 = object[11];
            *(_OWORD *)(v1280 + 40) = *(_OWORD *)&object[5];
            *((_QWORD *)v1280 + 11) = v1283;
            *(_OWORD *)(v1280 + 72) = v1281;
            *(_OWORD *)(v1280 + 56) = v1282;
            *(_OWORD *)(v1280 + 24) = *(_OWORD *)&object[3];
            v1284 = object[14];
            *((_OWORD *)v1280 + 6) = *(_OWORD *)&object[12];
            *((_QWORD *)v1280 + 14) = v1284;
            *((_QWORD *)v1280 + 15) = v545;
            *((_QWORD *)v1280 + 16) = v542;
            object[15] = 0;
            object[16] = 0;
            *((_QWORD *)v1280 + 17) = v583;
            v1285 = *(_OWORD *)&object[18];
            v1286 = *(_OWORD *)&object[22];
            *((_OWORD *)v1280 + 10) = *(_OWORD *)&object[20];
            *((_OWORD *)v1280 + 11) = v1286;
            *((_OWORD *)v1280 + 9) = v1285;
            v1287 = *(_OWORD *)&object[24];
            v1288 = *(_OWORD *)&object[28];
            *((_OWORD *)v1280 + 13) = *(_OWORD *)&object[26];
            *((_OWORD *)v1280 + 14) = v1288;
            *((_OWORD *)v1280 + 12) = v1287;
            v1289 = object[30];
            v1280[248] = (char)object[31];
            *((_QWORD *)v1280 + 30) = v1289;
            *((_QWORD *)v1280 + 32) = 0;
            *((_QWORD *)v1280 + 33) = 0;
            object[32] = 0;
            object[33] = 0;
            v1280[272] = 0;
            v538[355].i64[1] = (uint64_t)(v556 + 280);
            v549 = v538 + 366;
          }
          else
          {
            v1831 = *(_OWORD *)oslog;
            *(_OWORD *)&v1842[2] = *(_OWORD *)&oslog[32];
            *(_OWORD *)&v1842[4] = *(_OWORD *)&oslog[48];
            *(_OWORD *)&v1842[6] = *(_OWORD *)&oslog[64];
            v1842[8] = *(void **)&oslog[80];
            *(_OWORD *)v1842 = *(_OWORD *)&oslog[16];
            *(_QWORD *)&v1798 = *(_QWORD *)&oslog[104];
            v1797 = *(_OWORD *)&oslog[88];
            object[15] = 0;
            object[16] = 0;
            v1805[1] = *(_OWORD *)&oslog[152];
            v1805[2] = *(_OWORD *)&oslog[168];
            v1805[0] = *(_OWORD *)&oslog[136];
            v1835 = *(_OWORD *)&oslog[200];
            v1836 = *(__n128 *)&oslog[216];
            v1834 = *(_OWORD *)&oslog[184];
            LOBYTE(v1724) = oslog[240];
            v1723 = *(_QWORD *)&oslog[232];
            v586 = v556 - 280;
            v587 = v556;
            object[32] = 0;
            object[33] = 0;
            if ((unint64_t)v556 >= 0x118)
            {
              v588 = v556 - 280;
              v587 = v556;
              do
              {
                *(_QWORD *)v587 = *(_QWORD *)v588;
                *(_OWORD *)(v587 + 8) = *(_OWORD *)(v588 + 8);
                v589 = *(_OWORD *)(v588 + 56);
                v590 = *(_OWORD *)(v588 + 72);
                v591 = *((_QWORD *)v588 + 11);
                *(_OWORD *)(v587 + 40) = *(_OWORD *)(v588 + 40);
                *((_QWORD *)v587 + 11) = v591;
                *(_OWORD *)(v587 + 72) = v590;
                *(_OWORD *)(v587 + 56) = v589;
                *(_OWORD *)(v587 + 24) = *(_OWORD *)(v588 + 24);
                v592 = *((_OWORD *)v588 + 6);
                *((_QWORD *)v587 + 14) = *((_QWORD *)v588 + 14);
                *((_OWORD *)v587 + 6) = v592;
                *(_OWORD *)(v587 + 120) = *(_OWORD *)(v588 + 120);
                *((_QWORD *)v588 + 15) = 0;
                *((_QWORD *)v588 + 16) = 0;
                *((_QWORD *)v587 + 17) = *((_QWORD *)v588 + 17);
                v593 = *((_OWORD *)v588 + 9);
                v594 = *((_OWORD *)v588 + 11);
                *((_OWORD *)v587 + 10) = *((_OWORD *)v588 + 10);
                *((_OWORD *)v587 + 11) = v594;
                *((_OWORD *)v587 + 9) = v593;
                v595 = *((_OWORD *)v588 + 12);
                v596 = *((_OWORD *)v588 + 14);
                *((_OWORD *)v587 + 13) = *((_OWORD *)v588 + 13);
                *((_OWORD *)v587 + 14) = v596;
                *((_OWORD *)v587 + 12) = v595;
                v597 = *((_QWORD *)v588 + 30);
                v587[248] = v588[248];
                *((_QWORD *)v587 + 30) = v597;
                *((_OWORD *)v587 + 16) = *((_OWORD *)v588 + 16);
                *((_QWORD *)v588 + 32) = 0;
                *((_QWORD *)v588 + 33) = 0;
                v587[272] = v588[272];
                v587 += 280;
                v588 += 280;
              }
              while (v588 < v556);
            }
            v1693 = v537;
            v538[355].i64[1] = (uint64_t)v587;
            if (v556 != v563 + 280)
            {
              do
              {
                v606 = v586 - 280;
                v607 = v556 - 280;
                *(_QWORD *)v607 = *((_QWORD *)v586 - 35);
                *(_OWORD *)(v607 + 8) = *((_OWORD *)v586 - 17);
                v609 = *((_OWORD *)v586 - 14);
                v608 = *((_OWORD *)v586 - 13);
                v610 = *((_OWORD *)v586 - 15);
                *((_QWORD *)v556 - 24) = *((_QWORD *)v586 - 24);
                *((_OWORD *)v556 - 14) = v609;
                *((_OWORD *)v556 - 13) = v608;
                *((_OWORD *)v556 - 15) = v610;
                *((_OWORD *)v556 - 16) = *((_OWORD *)v586 - 16);
                v611 = *(_OWORD *)(v586 - 184);
                *((_QWORD *)v556 - 21) = *((_QWORD *)v586 - 21);
                *(_OWORD *)(v556 - 184) = v611;
                v612 = *((_OWORD *)v586 - 10);
                *((_QWORD *)v586 - 20) = 0;
                *((_QWORD *)v586 - 19) = 0;
                v613 = (std::__shared_weak_count *)*((_QWORD *)v556 - 19);
                *((_OWORD *)v556 - 10) = v612;
                if (v613)
                {
                  v614 = (unint64_t *)&v613->__shared_owners_;
                  do
                    v615 = __ldaxr(v614);
                  while (__stlxr(v615 - 1, v614));
                  if (!v615)
                  {
                    ((void (*)(std::__shared_weak_count *, void **, void **))v613->__on_zero_shared)(v613, v581, v540);
                    std::__shared_weak_count::__release_weak(v613);
                  }
                }
                *((_QWORD *)v556 - 18) = *((_QWORD *)v586 - 18);
                v616 = *(_OWORD *)(v586 - 136);
                v617 = *(_OWORD *)(v586 - 120);
                *(_OWORD *)(v556 - 104) = *(_OWORD *)(v586 - 104);
                *(_OWORD *)(v556 - 120) = v617;
                *(_OWORD *)(v556 - 136) = v616;
                v618 = *(_OWORD *)(v586 - 88);
                v619 = *(_OWORD *)(v586 - 72);
                *(_OWORD *)(v556 - 56) = *(_OWORD *)(v586 - 56);
                *(_OWORD *)(v556 - 72) = v619;
                *(_OWORD *)(v556 - 88) = v618;
                v620 = *((_QWORD *)v586 - 5);
                *(v556 - 32) = *(v586 - 32);
                *((_QWORD *)v556 - 5) = v620;
                v621 = *(_OWORD *)(v586 - 24);
                *((_QWORD *)v586 - 3) = 0;
                *((_QWORD *)v586 - 2) = 0;
                v622 = (std::__shared_weak_count *)*((_QWORD *)v556 - 2);
                *(_OWORD *)(v556 - 24) = v621;
                if (v622)
                {
                  v623 = (unint64_t *)&v622->__shared_owners_;
                  do
                    v624 = __ldaxr(v623);
                  while (__stlxr(v624 - 1, v623));
                  if (!v624)
                  {
                    ((void (*)(std::__shared_weak_count *, void **, void **))v622->__on_zero_shared)(v622, v581, v540);
                    std::__shared_weak_count::__release_weak(v622);
                  }
                }
                *(v556 - 8) = *(v586 - 8);
                v556 -= 280;
                v586 -= 280;
              }
              while (v606 != v563);
            }
            *(float64_t *)v563 = v558;
            v598 = &v1702[280 * v1709];
            *(_OWORD *)(v598 + 8) = v1831;
            *(_OWORD *)(v598 + 40) = *(_OWORD *)&v1842[2];
            *(_OWORD *)(v598 + 56) = *(_OWORD *)&v1842[4];
            *(_OWORD *)(v598 + 72) = *(_OWORD *)&v1842[6];
            *((void **)v598 + 11) = v1842[8];
            *(_OWORD *)(v598 + 24) = *(_OWORD *)v1842;
            *((_OWORD *)v598 + 6) = v1797;
            *((_QWORD *)v598 + 14) = v1798;
            *((_QWORD *)v598 + 15) = v545;
            v599 = (std::__shared_weak_count *)*((_QWORD *)v598 + 16);
            *((_QWORD *)v598 + 16) = v542;
            v537 = v1693;
            v549 = v538 + 366;
            if (v599)
            {
              v600 = (unint64_t *)&v599->__shared_owners_;
              do
                v601 = __ldaxr(v600);
              while (__stlxr(v601 - 1, v600));
              if (!v601)
              {
                ((void (*)(std::__shared_weak_count *, void **, void **))v599->__on_zero_shared)(v599, v581, v540);
                std::__shared_weak_count::__release_weak(v599);
              }
            }
            v602 = &v1702[280 * v1709];
            *((_QWORD *)v602 + 17) = __dsta;
            *((_OWORD *)v602 + 9) = v1805[0];
            *((_OWORD *)v602 + 10) = v1805[1];
            *((_OWORD *)v602 + 11) = v1805[2];
            *((_OWORD *)v602 + 12) = v1834;
            *((_OWORD *)v602 + 13) = v1835;
            *((__n128 *)v602 + 14) = v1836;
            *((_QWORD *)v602 + 30) = v1723;
            v602[248] = (char)v1724;
            v603 = (std::__shared_weak_count *)*((_QWORD *)v602 + 33);
            *((_QWORD *)v602 + 32) = 0;
            *((_QWORD *)v602 + 33) = 0;
            if (v603)
            {
              v604 = (unint64_t *)&v603->__shared_owners_;
              do
                v605 = __ldaxr(v604);
              while (__stlxr(v605 - 1, v604));
              if (!v605)
              {
                ((void (*)(std::__shared_weak_count *, void **, void **))v603->__on_zero_shared)(v603, v581, v540);
                std::__shared_weak_count::__release_weak(v603);
              }
            }
            v1702[280 * v1709 + 272] = 0;
          }
          v1336 = (std::__shared_weak_count *)object[33];
          if (object[33])
          {
            v1337 = (unint64_t *)((char *)object[33] + 8);
            do
              v1338 = __ldaxr(v1337);
            while (__stlxr(v1338 - 1, v1337));
            if (!v1338)
            {
              ((void (*)(std::__shared_weak_count *, void **, void **))v1336->__on_zero_shared)(v1336, v581, v540);
              std::__shared_weak_count::__release_weak(v1336);
            }
          }
        }
        v1339 = (std::__shared_weak_count *)object[16];
        if (object[16])
        {
          v1340 = (unint64_t *)((char *)object[16] + 8);
          do
            v1341 = __ldaxr(v1340);
          while (__stlxr(v1341 - 1, v1340));
          if (!v1341)
          {
            ((void (*)(std::__shared_weak_count *, void **, void **))v1339->__on_zero_shared)(v1339, v581, v540);
            std::__shared_weak_count::__release_weak(v1339);
          }
        }
        v549->i8[2] = 0;
        v549->i8[0] = 0;
        v538[365] = vaddq_s64(v538[365], (int64x2_t)xmmword_2103B2300);
        v1342 = *(std::__shared_weak_count **)&oslog[256];
        if (*(_QWORD *)&oslog[256])
        {
          v1343 = (unint64_t *)(*(_QWORD *)&oslog[256] + 8);
          do
            v1344 = __ldaxr(v1343);
          while (__stlxr(v1344 - 1, v1343));
          if (!v1344)
          {
            ((void (*)(std::__shared_weak_count *, void **, void **))v1342->__on_zero_shared)(v1342, v581, v540);
            std::__shared_weak_count::__release_weak(v1342);
          }
        }
        v638 = 0;
        v639 = *(std::__shared_weak_count **)&oslog[120];
        if (!*(_QWORD *)&oslog[120])
          goto LABEL_822;
        goto LABEL_818;
      }
      --*(_DWORD *)(v583 + 8);
      *(_QWORD *)&oslog[128] = 0;
    }
  }
  v638 = 1;
  v639 = *(std::__shared_weak_count **)&oslog[120];
  if (*(_QWORD *)&oslog[120])
  {
LABEL_818:
    v640 = (unint64_t *)&v639->__shared_owners_;
    do
      v641 = __ldaxr(v640);
    while (__stlxr(v641 - 1, v640));
    if (!v641)
    {
      ((void (*)(std::__shared_weak_count *))v639->__on_zero_shared)(v639);
      std::__shared_weak_count::__release_weak(v639);
    }
  }
LABEL_822:
  v642 = (std::__shared_weak_count *)*((_QWORD *)&v1828 + 1);
  if (!*((_QWORD *)&v1828 + 1))
    goto LABEL_826;
  v643 = (unint64_t *)(*((_QWORD *)&v1828 + 1) + 8);
  do
    v644 = __ldaxr(v643);
  while (__stlxr(v644 - 1, v643));
  if (v644)
  {
LABEL_826:
    if ((v638 & 1) != 0)
      goto LABEL_827;
LABEL_830:
    v645 = 0;
    v538[414].i8[12] = 0;
    v538[414].i32[2] = 0;
    v646 = (std::__shared_weak_count *)*((_QWORD *)&v1727 + 1);
    if (!*((_QWORD *)&v1727 + 1))
      goto LABEL_834;
    goto LABEL_831;
  }
  ((void (*)(std::__shared_weak_count *))v642->__on_zero_shared)(v642);
  std::__shared_weak_count::__release_weak(v642);
  if ((v638 & 1) == 0)
    goto LABEL_830;
LABEL_827:
  v645 = 1;
  v646 = (std::__shared_weak_count *)*((_QWORD *)&v1727 + 1);
  if (!*((_QWORD *)&v1727 + 1))
    goto LABEL_834;
LABEL_831:
  v647 = (unint64_t *)&v646->__shared_owners_;
  do
    v648 = __ldaxr(v647);
  while (__stlxr(v648 - 1, v647));
  if (v648)
  {
LABEL_834:
    if (!v645)
      goto LABEL_836;
    goto LABEL_835;
  }
  ((void (*)(std::__shared_weak_count *))v646->__on_zero_shared)(v646);
  std::__shared_weak_count::__release_weak(v646);
  if (!v645)
    goto LABEL_836;
LABEL_835:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 988, (uint64_t)"ret.second", 10, (uint64_t)"Failed to add Pose prior factor", 31, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_836:
  v649 = v1793[7].f64[1];
  if (*(_QWORD *)&v1793[7].f64[1])
  {
    v650 = (unint64_t *)(*(_QWORD *)&v1793[7].f64[1] + 8);
    do
      v651 = __ldaxr(v650);
    while (__stlxr(v651 - 1, v650));
    if (!v651)
    {
      (*(void (**)(float64_t))(**(_QWORD **)&v649 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v649));
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v649);
    }
  }
  if (v1714)
  {
    v652 = &v1714->__shared_owners_;
    do
      v653 = __ldaxr((unint64_t *)v652);
    while (__stlxr(v653 - 1, (unint64_t *)v652));
    if (!v653)
    {
      ((void (*)(std::__shared_weak_count *))v1714->__on_zero_shared)(v1714);
      std::__shared_weak_count::__release_weak(v1714);
    }
  }
  v654 = (int64x2_t *)v1720;
  v1828 = 0uLL;
  *(_QWORD *)&v655 = LODWORD(v537[1].~__shared_weak_count);
  v1793[0].f64[0] = v655;
  memset(&v1793[1], 0, 184);
  v1717 = 0;
  v1716 = 0;
  v1831 = 0uLL;
  v656 = *(char **)(v1720 + 5656);
  v657 = *(char **)(v1720 + 5664);
  if (v656 == v657)
  {
    v658 = *(char **)(v1720 + 5656);
  }
  else
  {
    v658 = *(char **)(v1720 + 5664);
    if (*((_QWORD *)v657 - 63) >= *(_QWORD *)&v655)
    {
      v659 = 0xEFBEFBEFBEFBEFBFLL * ((v657 - v656) >> 3);
      v660 = *(char **)(v1720 + 5656);
      do
      {
        v661 = v659 >> 1;
        v662 = (unint64_t *)&v660[504 * (v659 >> 1)];
        v663 = *v662;
        v664 = (char *)(v662 + 63);
        v659 += ~(v659 >> 1);
        if (v663 < *(_QWORD *)&v655)
          v660 = v664;
        else
          v659 = v661;
      }
      while (v659);
      v658 = *(char **)(v1720 + 5664);
      if (v660 != v657)
      {
        v658 = v660;
        if (*(_QWORD *)v660 == *(_QWORD *)&v655)
          goto LABEL_920;
      }
    }
  }
  *(float64x2_t *)oslog = v1793[0];
  memset(&oslog[16], 0, 200);
  v1793[12].f64[0] = 0.0;
  v1793[11].f64[1] = 0.0;
  memset(&oslog[472], 0, 17);
  *(_QWORD *)&oslog[456] = 0xBFF0000000000000;
  oslog[464] = 0;
  v665 = *(char **)(v1720 + 4888);
  v666 = *(char **)(v1720 + 4896);
  if (v666 == v665)
    goto LABEL_909;
  v667 = (int64x2_t *)(v1720 + 5856);
  v668 = (v666 - v665) >> 4;
  do
  {
    v669 = v668 >> 1;
    v670 = (unsigned int *)&v665[16 * (v668 >> 1)];
    v672 = *v670;
    v671 = (char *)(v670 + 4);
    v673 = (void **)~(v668 >> 1);
    v668 += (unint64_t)v673;
    if (v672 < LODWORD(v655))
      v665 = v671;
    else
      v668 = v669;
  }
  while (v668);
  if (v665 == v666 || *(_DWORD *)v665 != LODWORD(v655))
  {
LABEL_909:
    v748 = 1;
    v749 = *(std::__shared_weak_count **)&oslog[192];
    if (!*(_QWORD *)&oslog[192])
      goto LABEL_914;
    goto LABEL_910;
  }
  v674 = *((_QWORD *)v665 + 1);
  *(_QWORD *)&oslog[200] = v674;
  ++*(_DWORD *)(*((_QWORD *)v665 + 1) + 8);
  v675 = v654[311].i64[1];
  v676 = v654[312].i64[0];
  if (v676 != v675)
  {
    v677 = (v676 - v675) >> 4;
    do
    {
      v678 = v677 >> 1;
      v679 = (unsigned int *)(v675 + 16 * (v677 >> 1));
      v681 = *v679;
      v680 = v679 + 4;
      v673 = (void **)v681;
      v540 = (void **)~(v677 >> 1);
      v677 += (unint64_t)v540;
      if (v681 < LODWORD(v655))
        v675 = (uint64_t)v680;
      else
        v677 = v678;
    }
    while (v677);
  }
  if (v675 == v676 || *(_DWORD *)v675 != LODWORD(v655))
  {
    if (v674)
      --*(_DWORD *)(v674 + 8);
    goto LABEL_909;
  }
  v682 = *(_QWORD *)(v675 + 8);
  *(_QWORD *)&oslog[208] = v682;
  ++*(_DWORD *)(*(_QWORD *)(v675 + 8) + 8);
  if (!*(_BYTE *)(v674 + 20) && !*(_BYTE *)(v682 + 20))
  {
    --*(_DWORD *)(v674 + 8);
    --*(_DWORD *)(v682 + 8);
    *(_QWORD *)&oslog[208] = 0;
    *(_QWORD *)&oslog[200] = 0;
    v748 = 1;
    v749 = *(std::__shared_weak_count **)&oslog[192];
    if (!*(_QWORD *)&oslog[192])
      goto LABEL_914;
    goto LABEL_910;
  }
  *(_OWORD *)&object[1] = *(_OWORD *)oslog;
  *(_OWORD *)&object[17] = *(_OWORD *)&oslog[128];
  *(_OWORD *)&object[19] = *(_OWORD *)&oslog[144];
  *(_OWORD *)&object[21] = *(_OWORD *)&oslog[160];
  *(_OWORD *)&object[9] = *(_OWORD *)&oslog[64];
  *(_OWORD *)&object[11] = *(_OWORD *)&oslog[80];
  object[0] = *(void **)&v655;
  object[23] = *(void **)&oslog[176];
  *(_OWORD *)&object[13] = *(_OWORD *)&oslog[96];
  *(_OWORD *)&object[15] = *(_OWORD *)&oslog[112];
  *(_OWORD *)&object[3] = *(_OWORD *)&oslog[16];
  *(_OWORD *)&object[5] = *(_OWORD *)&oslog[32];
  *(_OWORD *)&object[7] = *(_OWORD *)&oslog[48];
  object[25] = 0;
  object[24] = 0;
  *(_QWORD *)&oslog[184] = 0;
  *(_QWORD *)&oslog[192] = 0;
  *(_OWORD *)&object[38] = *(_OWORD *)&oslog[296];
  *(_OWORD *)&object[40] = *(_OWORD *)&oslog[312];
  *(_OWORD *)&object[26] = *(_OWORD *)&oslog[200];
  *(_OWORD *)&object[28] = *(_OWORD *)&oslog[216];
  *(_OWORD *)&object[30] = *(_OWORD *)&oslog[232];
  *(_OWORD *)&object[32] = *(_OWORD *)&oslog[248];
  *(_OWORD *)&object[34] = *(_OWORD *)&oslog[264];
  *(_OWORD *)&object[36] = *(_OWORD *)&oslog[280];
  *(_OWORD *)&object[51] = *(_OWORD *)&oslog[400];
  *(_OWORD *)&object[53] = *(_OWORD *)&oslog[416];
  *(_OWORD *)&object[55] = *(_OWORD *)&oslog[432];
  *(_OWORD *)&object[43] = *(_OWORD *)&oslog[336];
  *(_OWORD *)&object[45] = *(_OWORD *)&oslog[352];
  *(_OWORD *)&object[47] = *(_OWORD *)&oslog[368];
  *(_OWORD *)&object[49] = *(_OWORD *)&oslog[384];
  object[42] = *(void **)&oslog[328];
  object[57] = *(void **)&oslog[448];
  LOBYTE(object[59]) = oslog[464];
  object[58] = *(void **)&oslog[456];
  memset(&object[60], 0, 17);
  *(_QWORD *)&oslog[472] = 0;
  *(_QWORD *)&oslog[480] = 0;
  if (v657 == v658 || *(_QWORD *)v658 != *(_QWORD *)&v655)
  {
    v540 = &object[26];
    v673 = &object[28];
    v541 = 0xEFBEFBEFBEFBEFBFLL * ((v658 - v656) >> 3);
    v683 = v654[354].u64[1];
    if ((unint64_t)v657 >= v683)
    {
      v1274 = 1 - 0x1041041041041041 * ((v657 - v656) >> 3);
      if (v1274 > 0x82082082082082)
        sub_20E867F44();
      v1275 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(v683 - (_QWORD)v656) >> 3);
      if (2 * v1275 > v1274)
        v1274 = 2 * v1275;
      if (v1275 >= 0x41041041041041)
        v1276 = 0x82082082082082;
      else
        v1276 = v1274;
      v1842[4] = &v654[354].u64[1];
      if (v1276)
      {
        if (v1276 > 0x82082082082082)
          sub_20E877A38();
        v1277 = (char *)operator new(504 * v1276);
        v541 = 0xEFBEFBEFBEFBEFBFLL * ((v658 - v656) >> 3);
      }
      else
      {
        v1277 = 0;
      }
      v1367 = &v1277[504 * v541];
      v1842[0] = v1277;
      v1842[1] = v1367;
      v1842[2] = v1367;
      v1842[3] = &v1277[504 * v1276];
      if (v541 == v1276)
      {
        v667 = v654 + 366;
        if (v658 - v656 < 1)
        {
          if (v656 == v658)
            v1560 = 1;
          else
            v1560 = 2 * v541;
          if (v1560 > 0x82082082082082)
            sub_20E877A38();
          v1561 = (char *)operator new(504 * v1560);
          v1367 = &v1561[504 * (v1560 >> 2)];
          v1842[0] = v1561;
          v1842[1] = v1367;
          v1842[2] = v1367;
          v1842[3] = &v1561[504 * v1560];
          if (v1277)
            operator delete(v1277);
          v1370 = (float64_t *)v1367;
        }
        else
        {
          v1368 = v541 + 2;
          if (v541 >= -1)
            v1368 = v541 + 1;
          v1369 = v1368 >> 1;
          v1370 = (float64_t *)sub_20F5B64A0((uint64_t)v1367, (uint64_t)v1367, (uint64_t)&v1367[-504 * (v1368 >> 1)]);
          v1367 = (char *)v1842[1] - 504 * v1369;
          v1842[2] = v1370;
          v1842[1] = v1367;
          v655 = *(double *)object;
        }
      }
      else
      {
        v1370 = (float64_t *)&v1277[504 * v541];
        v667 = v654 + 366;
      }
      *v1370 = v655;
      *(_OWORD *)(v1370 + 1) = *(_OWORD *)&object[1];
      v1562 = *(_OWORD *)&object[17];
      *(_OWORD *)(v1370 + 15) = *(_OWORD *)&object[15];
      v1563 = *(_OWORD *)&object[11];
      *(_OWORD *)(v1370 + 13) = *(_OWORD *)&object[13];
      *(_OWORD *)(v1370 + 11) = v1563;
      v1564 = *(_OWORD *)&object[7];
      *(_OWORD *)(v1370 + 9) = *(_OWORD *)&object[9];
      v1370[23] = *(float64_t *)&object[23];
      v1565 = *(_OWORD *)&object[19];
      *(_OWORD *)(v1370 + 21) = *(_OWORD *)&object[21];
      *(_OWORD *)(v1370 + 19) = v1565;
      *(_OWORD *)(v1370 + 17) = v1562;
      v1566 = *(_OWORD *)&object[5];
      *(_OWORD *)(v1370 + 3) = *(_OWORD *)&object[3];
      *(_OWORD *)(v1370 + 5) = v1566;
      *(_OWORD *)(v1370 + 7) = v1564;
      *((_OWORD *)v1370 + 12) = *(_OWORD *)&object[24];
      object[24] = 0;
      object[25] = 0;
      *((_OWORD *)v1370 + 13) = *(_OWORD *)&object[26];
      v1370[42] = *(float64_t *)&object[42];
      v1567 = *(_OWORD *)&object[40];
      v1568 = *(_OWORD *)&object[36];
      *((_OWORD *)v1370 + 19) = *(_OWORD *)&object[38];
      *((_OWORD *)v1370 + 20) = v1567;
      v1569 = *(_OWORD *)&object[30];
      *((_OWORD *)v1370 + 14) = *(_OWORD *)&object[28];
      *((_OWORD *)v1370 + 15) = v1569;
      v1570 = *(_OWORD *)&object[34];
      *((_OWORD *)v1370 + 16) = *(_OWORD *)&object[32];
      *((_OWORD *)v1370 + 17) = v1570;
      *((_OWORD *)v1370 + 18) = v1568;
      v1571 = *(_OWORD *)&object[43];
      v1572 = *(_OWORD *)&object[45];
      v1573 = *(_OWORD *)&object[49];
      *(_OWORD *)(v1370 + 47) = *(_OWORD *)&object[47];
      *(_OWORD *)(v1370 + 49) = v1573;
      *(_OWORD *)(v1370 + 43) = v1571;
      *(_OWORD *)(v1370 + 45) = v1572;
      v1574 = *(_OWORD *)&object[51];
      v1575 = *(_OWORD *)&object[53];
      v1576 = *(_OWORD *)&object[55];
      v1370[57] = *(float64_t *)&object[57];
      *(_OWORD *)(v1370 + 53) = v1575;
      *(_OWORD *)(v1370 + 55) = v1576;
      *(_OWORD *)(v1370 + 51) = v1574;
      v1577 = object[58];
      *((_BYTE *)v1370 + 472) = object[59];
      *((_QWORD *)v1370 + 58) = v1577;
      *((_OWORD *)v1370 + 30) = *(_OWORD *)&object[60];
      object[60] = 0;
      object[61] = 0;
      *((_BYTE *)v1370 + 496) = object[62];
      v1578 = v1370 + 63;
      v1579 = (char *)v654[353].i64[1];
      if (v1579 == v658)
      {
        v1581 = v1367;
      }
      else
      {
        v1580 = v658;
        do
        {
          v1581 = v1367 - 504;
          v1582 = v1580 - 504;
          *(_QWORD *)v1581 = *((_QWORD *)v1580 - 63);
          *(_OWORD *)(v1581 + 8) = *((_OWORD *)v1580 - 31);
          v1583 = *((_OWORD *)v1580 - 26);
          v1584 = *((_OWORD *)v1580 - 25);
          v1585 = *((_OWORD *)v1580 - 24);
          *(_OWORD *)(v1581 + 72) = *((_OWORD *)v1580 - 27);
          *(_OWORD *)(v1581 + 120) = v1585;
          *(_OWORD *)(v1581 + 104) = v1584;
          *(_OWORD *)(v1581 + 88) = v1583;
          v1586 = *((_OWORD *)v1580 - 22);
          v1587 = *((_OWORD *)v1580 - 21);
          v1588 = *((_QWORD *)v1580 - 40);
          *(_OWORD *)(v1581 + 136) = *((_OWORD *)v1580 - 23);
          *((_QWORD *)v1581 + 23) = v1588;
          *(_OWORD *)(v1581 + 168) = v1587;
          *(_OWORD *)(v1581 + 152) = v1586;
          v1589 = *((_OWORD *)v1580 - 30);
          v1590 = *((_OWORD *)v1580 - 29);
          *(_OWORD *)(v1581 + 56) = *((_OWORD *)v1580 - 28);
          *(_OWORD *)(v1581 + 40) = v1590;
          *(_OWORD *)(v1581 + 24) = v1589;
          *((_QWORD *)v1581 + 24) = *((_QWORD *)v1580 - 39);
          v1591 = *((_QWORD *)v1580 - 38);
          *((_QWORD *)v1581 + 25) = v1591;
          if (v1591)
          {
            v1592 = (unint64_t *)(v1591 + 8);
            do
              v1593 = __ldxr(v1592);
            while (__stxr(v1593 + 1, v1592));
          }
          *(_OWORD *)(v1367 - 296) = *(_OWORD *)(v1580 - 296);
          v1594 = *(_OWORD *)(v1580 - 200);
          v1595 = *(_OWORD *)(v1580 - 184);
          v1596 = *((_QWORD *)v1580 - 21);
          *(_OWORD *)(v1367 - 216) = *(_OWORD *)(v1580 - 216);
          *((_QWORD *)v1367 - 21) = v1596;
          *(_OWORD *)(v1367 - 184) = v1595;
          *(_OWORD *)(v1367 - 200) = v1594;
          v1597 = *(_OWORD *)(v1580 - 280);
          v1598 = *(_OWORD *)(v1580 - 264);
          v1599 = *(_OWORD *)(v1580 - 248);
          *(_OWORD *)(v1367 - 232) = *(_OWORD *)(v1580 - 232);
          *(_OWORD *)(v1367 - 248) = v1599;
          *(_OWORD *)(v1367 - 280) = v1597;
          *(_OWORD *)(v1367 - 264) = v1598;
          v1601 = *((_OWORD *)v1580 - 5);
          v1600 = *((_OWORD *)v1580 - 4);
          v1602 = *((_OWORD *)v1580 - 6);
          *((_QWORD *)v1367 - 6) = *((_QWORD *)v1580 - 6);
          *((_OWORD *)v1367 - 5) = v1601;
          *((_OWORD *)v1367 - 4) = v1600;
          *((_OWORD *)v1367 - 6) = v1602;
          v1603 = *((_OWORD *)v1580 - 10);
          v1604 = *((_OWORD *)v1580 - 9);
          v1605 = *((_OWORD *)v1580 - 7);
          *((_OWORD *)v1367 - 8) = *((_OWORD *)v1580 - 8);
          *((_OWORD *)v1367 - 7) = v1605;
          *((_OWORD *)v1367 - 10) = v1603;
          *((_OWORD *)v1367 - 9) = v1604;
          v1606 = *((_QWORD *)v1580 - 5);
          *(v1367 - 32) = *(v1580 - 32);
          *((_QWORD *)v1367 - 5) = v1606;
          *((_QWORD *)v1367 - 3) = *((_QWORD *)v1580 - 3);
          v1607 = *((_QWORD *)v1580 - 2);
          *((_QWORD *)v1367 - 2) = v1607;
          if (v1607)
          {
            v1608 = (unint64_t *)(v1607 + 8);
            do
              v1609 = __ldxr(v1608);
            while (__stxr(v1609 + 1, v1608));
          }
          *(v1367 - 8) = *(v1580 - 8);
          v1367 -= 504;
          v1580 -= 504;
        }
        while (v1582 != v1579);
      }
      v1842[1] = v1581;
      v1610 = (char *)v654[354].i64[0];
      if (v1610 != v658)
      {
        do
        {
          *v1578 = *(_QWORD *)v658;
          *(_OWORD *)(v1578 + 1) = *(_OWORD *)(v658 + 8);
          v1611 = *(_OWORD *)(v658 + 88);
          v1612 = *(_OWORD *)(v658 + 104);
          v1613 = *(_OWORD *)(v658 + 120);
          *(_OWORD *)(v1578 + 9) = *(_OWORD *)(v658 + 72);
          *(_OWORD *)(v1578 + 15) = v1613;
          *(_OWORD *)(v1578 + 13) = v1612;
          *(_OWORD *)(v1578 + 11) = v1611;
          v1614 = *(_OWORD *)(v658 + 152);
          v1615 = *(_OWORD *)(v658 + 168);
          v1616 = *((_QWORD *)v658 + 23);
          *(_OWORD *)(v1578 + 17) = *(_OWORD *)(v658 + 136);
          v1578[23] = v1616;
          *(_OWORD *)(v1578 + 21) = v1615;
          *(_OWORD *)(v1578 + 19) = v1614;
          v1617 = *(_OWORD *)(v658 + 24);
          v1618 = *(_OWORD *)(v658 + 40);
          *(_OWORD *)(v1578 + 7) = *(_OWORD *)(v658 + 56);
          *(_OWORD *)(v1578 + 5) = v1618;
          *(_OWORD *)(v1578 + 3) = v1617;
          v1578[24] = *((_QWORD *)v658 + 24);
          v1619 = *((_QWORD *)v658 + 25);
          v1578[25] = v1619;
          if (v1619)
          {
            v1620 = (unint64_t *)(v1619 + 8);
            do
              v1621 = __ldxr(v1620);
            while (__stxr(v1621 + 1, v1620));
          }
          *((_OWORD *)v1578 + 13) = *((_OWORD *)v658 + 13);
          v1623 = *((_OWORD *)v658 + 19);
          v1622 = *((_OWORD *)v658 + 20);
          v1624 = *((_OWORD *)v658 + 18);
          v1578[42] = *((_QWORD *)v658 + 42);
          *((_OWORD *)v1578 + 19) = v1623;
          *((_OWORD *)v1578 + 20) = v1622;
          *((_OWORD *)v1578 + 18) = v1624;
          v1625 = *((_OWORD *)v658 + 14);
          v1626 = *((_OWORD *)v658 + 15);
          v1627 = *((_OWORD *)v658 + 17);
          *((_OWORD *)v1578 + 16) = *((_OWORD *)v658 + 16);
          *((_OWORD *)v1578 + 17) = v1627;
          *((_OWORD *)v1578 + 14) = v1625;
          *((_OWORD *)v1578 + 15) = v1626;
          v1629 = *(_OWORD *)(v658 + 424);
          v1628 = *(_OWORD *)(v658 + 440);
          v1630 = *(_OWORD *)(v658 + 408);
          v1578[57] = *((_QWORD *)v658 + 57);
          *(_OWORD *)(v1578 + 53) = v1629;
          *(_OWORD *)(v1578 + 55) = v1628;
          *(_OWORD *)(v1578 + 51) = v1630;
          v1631 = *(_OWORD *)(v658 + 344);
          v1632 = *(_OWORD *)(v658 + 360);
          v1633 = *(_OWORD *)(v658 + 392);
          *(_OWORD *)(v1578 + 47) = *(_OWORD *)(v658 + 376);
          *(_OWORD *)(v1578 + 49) = v1633;
          *(_OWORD *)(v1578 + 43) = v1631;
          *(_OWORD *)(v1578 + 45) = v1632;
          v1634 = *((_QWORD *)v658 + 58);
          *((_BYTE *)v1578 + 472) = v658[472];
          v1578[58] = v1634;
          v1578[60] = *((_QWORD *)v658 + 60);
          v1635 = *((_QWORD *)v658 + 61);
          v1578[61] = v1635;
          if (v1635)
          {
            v1636 = (unint64_t *)(v1635 + 8);
            do
              v1637 = __ldxr(v1636);
            while (__stxr(v1637 + 1, v1636));
          }
          *((_BYTE *)v1578 + 496) = v658[496];
          v658 += 504;
          v1578 += 63;
        }
        while (v658 != v1610);
        v1581 = (char *)v1842[1];
        v658 = (char *)v654[354].i64[0];
      }
      v1638 = (char *)v654[353].i64[1];
      v654[353].i64[1] = (uint64_t)v1581;
      v654[354].i64[0] = (uint64_t)v1578;
      v1639 = (void *)v654[354].i64[1];
      v654[354].i64[1] = (uint64_t)v1842[3];
      v1842[3] = v1639;
      v1842[1] = v1638;
      v1842[0] = v1638;
      if (v658 != v1638)
      {
        do
        {
          v1842[2] = v658 - 504;
          v1640 = (std::__shared_weak_count *)*((_QWORD *)v658 - 2);
          if (v1640)
          {
            v1641 = (unint64_t *)&v1640->__shared_owners_;
            do
              v1642 = __ldaxr(v1641);
            while (__stlxr(v1642 - 1, v1641));
            if (!v1642)
            {
              ((void (*)(std::__shared_weak_count *))v1640->__on_zero_shared)(v1640);
              std::__shared_weak_count::__release_weak(v1640);
            }
          }
          v1643 = (std::__shared_weak_count *)*((_QWORD *)v658 - 38);
          if (v1643)
          {
            v1644 = (unint64_t *)&v1643->__shared_owners_;
            do
              v1645 = __ldaxr(v1644);
            while (__stlxr(v1645 - 1, v1644));
            if (!v1645)
            {
              ((void (*)(std::__shared_weak_count *))v1643->__on_zero_shared)(v1643);
              std::__shared_weak_count::__release_weak(v1643);
            }
          }
          v658 = (char *)v1842[2];
        }
        while (v1842[2] != v1638);
        v658 = (char *)v1842[0];
      }
      if (v658)
        operator delete(v658);
    }
    else if (v658 == v657)
    {
      *(float64_t *)v657 = v655;
      v1345 = &v656[8 * ((v658 - v656) >> 3)];
      *(_OWORD *)(v1345 + 8) = *(_OWORD *)&object[1];
      v1347 = *(_OWORD *)&object[5];
      v1346 = *(_OWORD *)&object[7];
      *(_OWORD *)(v1345 + 24) = *(_OWORD *)&object[3];
      *(_OWORD *)(v1345 + 56) = v1346;
      *(_OWORD *)(v1345 + 40) = v1347;
      v1348 = *(_OWORD *)&object[9];
      v1349 = *(_OWORD *)&object[11];
      v1350 = *(_OWORD *)&object[13];
      *(_OWORD *)(v1345 + 120) = *(_OWORD *)&object[15];
      *(_OWORD *)(v1345 + 104) = v1350;
      *(_OWORD *)(v1345 + 88) = v1349;
      *(_OWORD *)(v1345 + 72) = v1348;
      v1351 = *(_OWORD *)&object[17];
      v1352 = *(_OWORD *)&object[19];
      v1353 = object[23];
      *(_OWORD *)(v1345 + 168) = *(_OWORD *)&object[21];
      *(_OWORD *)(v1345 + 152) = v1352;
      *(_OWORD *)(v1345 + 136) = v1351;
      *((_QWORD *)v1345 + 23) = v1353;
      *((_QWORD *)v1345 + 24) = 0;
      *((_QWORD *)v1345 + 25) = 0;
      object[24] = 0;
      object[25] = 0;
      *((_OWORD *)v1345 + 13) = *(_OWORD *)&object[26];
      v1355 = *(_OWORD *)&object[38];
      v1354 = *(_OWORD *)&object[40];
      v1356 = *(_OWORD *)&object[36];
      *((void **)v1345 + 42) = object[42];
      *((_OWORD *)v1345 + 19) = v1355;
      *((_OWORD *)v1345 + 20) = v1354;
      *((_OWORD *)v1345 + 18) = v1356;
      v1357 = *(_OWORD *)&object[28];
      v1358 = *(_OWORD *)&object[30];
      v1359 = *(_OWORD *)&object[34];
      *((_OWORD *)v1345 + 16) = *(_OWORD *)&object[32];
      *((_OWORD *)v1345 + 17) = v1359;
      *((_OWORD *)v1345 + 14) = v1357;
      *((_OWORD *)v1345 + 15) = v1358;
      v1361 = *(_OWORD *)&object[53];
      v1360 = *(_OWORD *)&object[55];
      v1362 = *(_OWORD *)&object[51];
      *((void **)v1345 + 57) = object[57];
      *(_OWORD *)(v1345 + 424) = v1361;
      *(_OWORD *)(v1345 + 440) = v1360;
      *(_OWORD *)(v1345 + 408) = v1362;
      v1363 = *(_OWORD *)&object[43];
      v1364 = *(_OWORD *)&object[45];
      v1365 = *(_OWORD *)&object[49];
      *(_OWORD *)(v1345 + 376) = *(_OWORD *)&object[47];
      *(_OWORD *)(v1345 + 392) = v1365;
      *(_OWORD *)(v1345 + 344) = v1363;
      *(_OWORD *)(v1345 + 360) = v1364;
      v1366 = object[58];
      v1345[472] = (char)object[59];
      *((_QWORD *)v1345 + 58) = v1366;
      *((_QWORD *)v1345 + 60) = 0;
      *((_QWORD *)v1345 + 61) = 0;
      object[60] = 0;
      object[61] = 0;
      v1345[496] = 0;
      v654[354].i64[0] = (uint64_t)(v657 + 504);
    }
    else
    {
      v1797 = *(_OWORD *)oslog;
      *(_OWORD *)&v1842[14] = *(_OWORD *)&oslog[128];
      *(_OWORD *)&v1842[16] = *(_OWORD *)&oslog[144];
      *(_OWORD *)&v1842[18] = *(_OWORD *)&oslog[160];
      *(_OWORD *)&v1842[6] = *(_OWORD *)&oslog[64];
      *(_OWORD *)&v1842[8] = *(_OWORD *)&oslog[80];
      v1842[20] = *(void **)&oslog[176];
      *(_OWORD *)&v1842[10] = *(_OWORD *)&oslog[96];
      *(_OWORD *)&v1842[12] = *(_OWORD *)&oslog[112];
      *(_OWORD *)v1842 = *(_OWORD *)&oslog[16];
      *(_OWORD *)&v1842[2] = *(_OWORD *)&oslog[32];
      *(_OWORD *)&v1842[4] = *(_OWORD *)&oslog[48];
      object[24] = 0;
      object[25] = 0;
      v1703 = *(_OWORD *)&object[26];
      v1805[4] = *(_OWORD *)&oslog[280];
      v1805[5] = *(_OWORD *)&oslog[296];
      v1805[6] = *(_OWORD *)&oslog[312];
      *(_QWORD *)&v1805[7] = *(_QWORD *)&oslog[328];
      v1805[0] = *(_OWORD *)&oslog[216];
      v1805[1] = *(_OWORD *)&oslog[232];
      v1805[2] = *(_OWORD *)&oslog[248];
      v1805[3] = *(_OWORD *)&oslog[264];
      v1841.n128_u64[0] = *(_QWORD *)&oslog[448];
      v1840 = *(_OWORD *)&oslog[432];
      v1839 = *(_OWORD *)&oslog[416];
      v1838 = *(_OWORD *)&oslog[400];
      v1836 = *(__n128 *)&oslog[368];
      v1837 = *(__n128 *)&oslog[384];
      v1834 = *(_OWORD *)&oslog[336];
      v1835 = *(_OWORD *)&oslog[352];
      LOBYTE(v1714) = oslog[464];
      v1712 = *(_QWORD *)&oslog[456];
      v684 = v657 - 504;
      v685 = v657;
      object[60] = 0;
      object[61] = 0;
      if ((unint64_t)v657 >= 0x1F8)
      {
        v686 = v657 - 504;
        v685 = v657;
        do
        {
          *(_QWORD *)v685 = *(_QWORD *)v686;
          *(_OWORD *)(v685 + 8) = *(_OWORD *)(v686 + 8);
          v687 = *(_OWORD *)(v686 + 88);
          v688 = *(_OWORD *)(v686 + 104);
          v689 = *(_OWORD *)(v686 + 120);
          *(_OWORD *)(v685 + 72) = *(_OWORD *)(v686 + 72);
          *(_OWORD *)(v685 + 120) = v689;
          *(_OWORD *)(v685 + 104) = v688;
          *(_OWORD *)(v685 + 88) = v687;
          v690 = *(_OWORD *)(v686 + 152);
          v691 = *(_OWORD *)(v686 + 168);
          v692 = *((_QWORD *)v686 + 23);
          *(_OWORD *)(v685 + 136) = *(_OWORD *)(v686 + 136);
          *((_QWORD *)v685 + 23) = v692;
          *(_OWORD *)(v685 + 168) = v691;
          *(_OWORD *)(v685 + 152) = v690;
          v693 = *(_OWORD *)(v686 + 24);
          v694 = *(_OWORD *)(v686 + 40);
          *(_OWORD *)(v685 + 56) = *(_OWORD *)(v686 + 56);
          *(_OWORD *)(v685 + 40) = v694;
          *(_OWORD *)(v685 + 24) = v693;
          *((_OWORD *)v685 + 12) = *((_OWORD *)v686 + 12);
          *((_QWORD *)v686 + 24) = 0;
          *((_QWORD *)v686 + 25) = 0;
          *((_OWORD *)v685 + 13) = *((_OWORD *)v686 + 13);
          v696 = *((_OWORD *)v686 + 19);
          v695 = *((_OWORD *)v686 + 20);
          v697 = *((_OWORD *)v686 + 18);
          *((_QWORD *)v685 + 42) = *((_QWORD *)v686 + 42);
          *((_OWORD *)v685 + 19) = v696;
          *((_OWORD *)v685 + 20) = v695;
          *((_OWORD *)v685 + 18) = v697;
          v698 = *((_OWORD *)v686 + 14);
          v699 = *((_OWORD *)v686 + 15);
          v700 = *((_OWORD *)v686 + 17);
          *((_OWORD *)v685 + 16) = *((_OWORD *)v686 + 16);
          *((_OWORD *)v685 + 17) = v700;
          *((_OWORD *)v685 + 14) = v698;
          *((_OWORD *)v685 + 15) = v699;
          v702 = *(_OWORD *)(v686 + 424);
          v701 = *(_OWORD *)(v686 + 440);
          v703 = *(_OWORD *)(v686 + 408);
          *((_QWORD *)v685 + 57) = *((_QWORD *)v686 + 57);
          *(_OWORD *)(v685 + 424) = v702;
          *(_OWORD *)(v685 + 440) = v701;
          *(_OWORD *)(v685 + 408) = v703;
          v704 = *(_OWORD *)(v686 + 344);
          v705 = *(_OWORD *)(v686 + 360);
          v706 = *(_OWORD *)(v686 + 392);
          *(_OWORD *)(v685 + 376) = *(_OWORD *)(v686 + 376);
          *(_OWORD *)(v685 + 392) = v706;
          *(_OWORD *)(v685 + 344) = v704;
          *(_OWORD *)(v685 + 360) = v705;
          v707 = *((_QWORD *)v686 + 58);
          v685[472] = v686[472];
          *((_QWORD *)v685 + 58) = v707;
          *((_OWORD *)v685 + 30) = *((_OWORD *)v686 + 30);
          *((_QWORD *)v686 + 60) = 0;
          *((_QWORD *)v686 + 61) = 0;
          v685[496] = v686[496];
          v685 += 504;
          v686 += 504;
        }
        while (v686 < v657);
      }
      v708 = 0xEFBEFBEFBEFBEFBFLL * ((v658 - v656) >> 3);
      v654[354].i64[0] = (uint64_t)v685;
      if (v657 != v658 + 504)
      {
        do
        {
          v717 = v684 - 504;
          v718 = v657 - 504;
          *(_QWORD *)v718 = *((_QWORD *)v684 - 63);
          *(_OWORD *)(v718 + 8) = *((_OWORD *)v684 - 31);
          v719 = *((_OWORD *)v684 - 26);
          v720 = *((_OWORD *)v684 - 25);
          v721 = *((_OWORD *)v684 - 24);
          *(_OWORD *)(v718 + 72) = *((_OWORD *)v684 - 27);
          *(_OWORD *)(v718 + 120) = v721;
          *(_OWORD *)(v718 + 104) = v720;
          *(_OWORD *)(v718 + 88) = v719;
          v722 = *((_OWORD *)v684 - 22);
          v723 = *((_OWORD *)v684 - 21);
          v724 = *((_QWORD *)v684 - 40);
          *(_OWORD *)(v718 + 136) = *((_OWORD *)v684 - 23);
          *((_QWORD *)v718 + 23) = v724;
          *(_OWORD *)(v718 + 168) = v723;
          *(_OWORD *)(v718 + 152) = v722;
          v725 = *((_OWORD *)v684 - 30);
          v726 = *((_OWORD *)v684 - 29);
          *(_OWORD *)(v718 + 56) = *((_OWORD *)v684 - 28);
          *(_OWORD *)(v718 + 40) = v726;
          *(_OWORD *)(v718 + 24) = v725;
          v727 = *(_OWORD *)(v684 - 312);
          *((_QWORD *)v717 + 24) = 0;
          *((_QWORD *)v717 + 25) = 0;
          v728 = (std::__shared_weak_count *)*((_QWORD *)v657 - 38);
          *((_OWORD *)v718 + 12) = v727;
          if (v728)
          {
            v729 = (unint64_t *)&v728->__shared_owners_;
            do
              v730 = __ldaxr(v729);
            while (__stlxr(v730 - 1, v729));
            if (!v730)
            {
              ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v728->__on_zero_shared)(v728, v673, v540, v541);
              std::__shared_weak_count::__release_weak(v728);
            }
          }
          *((_QWORD *)v657 - 37) = *((_QWORD *)v684 - 37);
          *((_QWORD *)v657 - 36) = *((_QWORD *)v684 - 36);
          v731 = *(_OWORD *)(v684 - 280);
          v732 = *(_OWORD *)(v684 - 264);
          v733 = *(_OWORD *)(v684 - 248);
          *(_OWORD *)(v657 - 232) = *(_OWORD *)(v684 - 232);
          *(_OWORD *)(v657 - 248) = v733;
          *(_OWORD *)(v657 - 280) = v731;
          *(_OWORD *)(v657 - 264) = v732;
          v734 = *(_OWORD *)(v684 - 216);
          v735 = *(_OWORD *)(v684 - 200);
          v736 = *(_OWORD *)(v684 - 184);
          *((_QWORD *)v657 - 21) = *((_QWORD *)v684 - 21);
          *(_OWORD *)(v657 - 184) = v736;
          *(_OWORD *)(v657 - 200) = v735;
          *(_OWORD *)(v657 - 216) = v734;
          v738 = *((_OWORD *)v684 - 5);
          v737 = *((_OWORD *)v684 - 4);
          v739 = *((_OWORD *)v684 - 6);
          *((_QWORD *)v657 - 6) = *((_QWORD *)v684 - 6);
          *((_OWORD *)v657 - 5) = v738;
          *((_OWORD *)v657 - 4) = v737;
          *((_OWORD *)v657 - 6) = v739;
          v740 = *((_OWORD *)v684 - 10);
          v741 = *((_OWORD *)v684 - 9);
          v742 = *((_OWORD *)v684 - 7);
          *((_OWORD *)v657 - 8) = *((_OWORD *)v684 - 8);
          *((_OWORD *)v657 - 7) = v742;
          *((_OWORD *)v657 - 10) = v740;
          *((_OWORD *)v657 - 9) = v741;
          v743 = *((_QWORD *)v684 - 5);
          *(v657 - 32) = *(v684 - 32);
          *((_QWORD *)v657 - 5) = v743;
          v744 = *(_OWORD *)(v684 - 24);
          *((_QWORD *)v684 - 3) = 0;
          *((_QWORD *)v684 - 2) = 0;
          v745 = (std::__shared_weak_count *)*((_QWORD *)v657 - 2);
          *(_OWORD *)(v657 - 24) = v744;
          if (v745)
          {
            v746 = (unint64_t *)&v745->__shared_owners_;
            do
              v747 = __ldaxr(v746);
            while (__stlxr(v747 - 1, v746));
            if (!v747)
            {
              ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v745->__on_zero_shared)(v745, v673, v540, v541);
              std::__shared_weak_count::__release_weak(v745);
            }
          }
          *(v657 - 8) = *(v684 - 8);
          v657 -= 504;
          v684 -= 504;
        }
        while (v717 != v658);
      }
      *(float64_t *)v658 = v655;
      v709 = &v656[8 * ((v658 - v656) >> 3)];
      *(_OWORD *)(v709 + 8) = v1797;
      *(_OWORD *)(v709 + 136) = *(_OWORD *)&v1842[14];
      *(_OWORD *)(v709 + 152) = *(_OWORD *)&v1842[16];
      *(_OWORD *)(v709 + 168) = *(_OWORD *)&v1842[18];
      *((void **)v709 + 23) = v1842[20];
      *(_OWORD *)(v709 + 72) = *(_OWORD *)&v1842[6];
      *(_OWORD *)(v709 + 88) = *(_OWORD *)&v1842[8];
      *(_OWORD *)(v709 + 104) = *(_OWORD *)&v1842[10];
      *(_OWORD *)(v709 + 120) = *(_OWORD *)&v1842[12];
      *(_OWORD *)(v709 + 24) = *(_OWORD *)v1842;
      *(_OWORD *)(v709 + 40) = *(_OWORD *)&v1842[2];
      *(_OWORD *)(v709 + 56) = *(_OWORD *)&v1842[4];
      v710 = (std::__shared_weak_count *)*((_QWORD *)v709 + 25);
      *((_QWORD *)v709 + 24) = 0;
      *((_QWORD *)v709 + 25) = 0;
      v667 = v654 + 366;
      if (v710)
      {
        v711 = (unint64_t *)&v710->__shared_owners_;
        do
          v712 = __ldaxr(v711);
        while (__stlxr(v712 - 1, v711));
        if (!v712)
        {
          ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v710->__on_zero_shared)(v710, v673, v540, v541);
          std::__shared_weak_count::__release_weak(v710);
        }
      }
      v713 = &v656[504 * v708];
      *((_OWORD *)v713 + 13) = v1703;
      *((_OWORD *)v713 + 18) = v1805[4];
      *((_OWORD *)v713 + 19) = v1805[5];
      *((_OWORD *)v713 + 20) = v1805[6];
      *((_QWORD *)v713 + 42) = *(_QWORD *)&v1805[7];
      *((_OWORD *)v713 + 14) = v1805[0];
      *((_OWORD *)v713 + 15) = v1805[1];
      *((_OWORD *)v713 + 16) = v1805[2];
      *((_OWORD *)v713 + 17) = v1805[3];
      *(__n128 *)(v713 + 392) = v1837;
      *(__n128 *)(v713 + 376) = v1836;
      *(_OWORD *)(v713 + 360) = v1835;
      *(_OWORD *)(v713 + 344) = v1834;
      *((_QWORD *)v713 + 57) = v1841.n128_u64[0];
      *(_OWORD *)(v713 + 440) = v1840;
      *(_OWORD *)(v713 + 424) = v1839;
      *(_OWORD *)(v713 + 408) = v1838;
      v713[472] = (char)v1714;
      *((_QWORD *)v713 + 58) = v1712;
      v714 = (std::__shared_weak_count *)*((_QWORD *)v713 + 61);
      *((_QWORD *)v713 + 60) = 0;
      *((_QWORD *)v713 + 61) = 0;
      if (v714)
      {
        v715 = (unint64_t *)&v714->__shared_owners_;
        do
          v716 = __ldaxr(v715);
        while (__stlxr(v716 - 1, v715));
        if (!v716)
        {
          ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v714->__on_zero_shared)(v714, v673, v540, v541);
          std::__shared_weak_count::__release_weak(v714);
        }
      }
      v656[504 * v708 + 496] = 0;
    }
    v1646 = (std::__shared_weak_count *)object[61];
    if (object[61])
    {
      v1647 = (unint64_t *)((char *)object[61] + 8);
      do
        v1648 = __ldaxr(v1647);
      while (__stlxr(v1648 - 1, v1647));
      if (!v1648)
      {
        ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v1646->__on_zero_shared)(v1646, v673, v540, v541);
        std::__shared_weak_count::__release_weak(v1646);
      }
    }
  }
  v1649 = (std::__shared_weak_count *)object[25];
  if (object[25])
  {
    v1650 = (unint64_t *)((char *)object[25] + 8);
    do
      v1651 = __ldaxr(v1650);
    while (__stlxr(v1651 - 1, v1650));
    if (!v1651)
    {
      ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v1649->__on_zero_shared)(v1649, v673, v540, v541);
      std::__shared_weak_count::__release_weak(v1649);
    }
  }
  v667->i8[2] = 0;
  v667->i8[0] = 0;
  v654[365] = vaddq_s64(v654[365], (int64x2_t)xmmword_2103B4900);
  v1652 = *(std::__shared_weak_count **)&oslog[480];
  if (*(_QWORD *)&oslog[480])
  {
    v1653 = (unint64_t *)(*(_QWORD *)&oslog[480] + 8);
    do
      v1654 = __ldaxr(v1653);
    while (__stlxr(v1654 - 1, v1653));
    if (!v1654)
    {
      ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v1652->__on_zero_shared)(v1652, v673, v540, v541);
      std::__shared_weak_count::__release_weak(v1652);
    }
  }
  v748 = 0;
  v749 = *(std::__shared_weak_count **)&oslog[192];
  if (*(_QWORD *)&oslog[192])
  {
LABEL_910:
    v750 = (unint64_t *)&v749->__shared_owners_;
    do
      v751 = __ldaxr(v750);
    while (__stlxr(v751 - 1, v750));
    if (!v751)
    {
      ((void (*)(std::__shared_weak_count *))v749->__on_zero_shared)(v749);
      std::__shared_weak_count::__release_weak(v749);
    }
  }
LABEL_914:
  v752 = (std::__shared_weak_count *)*((_QWORD *)&v1831 + 1);
  if (!*((_QWORD *)&v1831 + 1))
    goto LABEL_918;
  v753 = (unint64_t *)(*((_QWORD *)&v1831 + 1) + 8);
  do
    v754 = __ldaxr(v753);
  while (__stlxr(v754 - 1, v753));
  if (v754)
  {
LABEL_918:
    if ((v748 & 1) != 0)
      goto LABEL_920;
    goto LABEL_919;
  }
  ((void (*)(std::__shared_weak_count *))v752->__on_zero_shared)(v752);
  std::__shared_weak_count::__release_weak(v752);
  if ((v748 & 1) == 0)
  {
LABEL_919:
    v654[414].i8[12] = 0;
    v654[414].i32[2] = 0;
  }
LABEL_920:
  if (v1717)
  {
    v755 = &v1717->__shared_owners_;
    do
      v756 = __ldaxr((unint64_t *)v755);
    while (__stlxr(v756 - 1, (unint64_t *)v755));
    if (!v756)
    {
      ((void (*)(std::__shared_weak_count *))v1717->__on_zero_shared)(v1717);
      std::__shared_weak_count::__release_weak(v1717);
    }
  }
  v757 = v1793[12].f64[0];
  if (!*(_QWORD *)&v1793[12].f64[0])
    goto LABEL_929;
  v758 = (unint64_t *)(*(_QWORD *)&v1793[12].f64[0] + 8);
  do
    v759 = __ldaxr(v758);
  while (__stlxr(v759 - 1, v758));
  if (!v759)
  {
    (*(void (**)(float64_t))(**(_QWORD **)&v757 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v757));
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v757);
    v760 = (std::__shared_weak_count *)*((_QWORD *)&v1828 + 1);
    if (!*((_QWORD *)&v1828 + 1))
      goto LABEL_933;
  }
  else
  {
LABEL_929:
    v760 = (std::__shared_weak_count *)*((_QWORD *)&v1828 + 1);
    if (!*((_QWORD *)&v1828 + 1))
      goto LABEL_933;
  }
  v761 = (unint64_t *)&v760->__shared_owners_;
  do
    v762 = __ldaxr(v761);
  while (__stlxr(v762 - 1, v761));
  if (!v762)
  {
    ((void (*)(std::__shared_weak_count *))v760->__on_zero_shared)(v760);
    std::__shared_weak_count::__release_weak(v760);
    if (!v1669)
      goto LABEL_1414;
    goto LABEL_934;
  }
LABEL_933:
  if (!v1669)
    goto LABEL_1414;
LABEL_934:
  if (*(_BYTE *)(v1675 + 6))
  {
    v1715 = 0;
    v1714 = 0;
    v1713 = &v1714;
    v763 = *(uint64_t **)(v1667 + 16);
    if (v763)
    {
      v1704 = 0;
      v1679 = *(void **)(MEMORY[0x24BEDB7F0] + 16);
      v1678 = *(void **)(MEMORY[0x24BEDB7F0] + 24);
      v1676 = *(void **)(MEMORY[0x24BEDB7F0] + 32);
      v1674 = *(void **)(MEMORY[0x24BEDB7F0] + 40);
      v1673 = *(void **)(MEMORY[0x24BEDB7F0] + 48);
      v1671 = *(void **)(MEMORY[0x24BEDB7F0] + 8);
      v1665 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
      v1666 = (void *)*MEMORY[0x24BEDB7F0];
      v1664 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
      v1668 = (void *)(MEMORY[0x24BEDB848] + 16);
      while (1)
      {
        v764 = v763[6];
        v1694 = v763[7];
        if (v764 != v1694)
          break;
LABEL_937:
        v763 = (uint64_t *)*v763;
        if (!v763)
        {
          v1125 = v1714;
          goto LABEL_1413;
        }
      }
      v1687 = v763;
      while (1)
      {
        v765 = *((unsigned int *)v763 + 6);
        v766 = *(unsigned int *)(v764 + 24);
        v767 = &v1714;
        v768 = &v1714;
        v769 = v1714;
        if (v1714)
        {
          v770 = v1714;
          while (1)
          {
            v771 = HIDWORD(v770[1].__vftable);
            if (v765 == v771)
            {
              shared_owners_low = LODWORD(v770[1].__shared_owners_);
              if (v766 >= shared_owners_low)
              {
                _CF = shared_owners_low >= v766;
                v773 = shared_owners_low == v766;
                v774 = -1;
                if (_CF)
                  v774 = 1;
                if (v773)
                  v774 = 0;
LABEL_946:
                if ((v774 & 0x80) == 0)
                  goto LABEL_943;
                v770 = (std::__shared_weak_count *)((char *)v770 + 8);
              }
            }
            else if (v765 >= v771)
            {
              _CF = v771 >= v765;
              v774 = -1;
              if (_CF)
                v774 = 1;
              goto LABEL_946;
            }
            v770 = (std::__shared_weak_count *)v770->__vftable;
            if (!v770)
            {
              v775 = v1714;
              while (1)
              {
                while (1)
                {
                  v767 = (std::__shared_weak_count **)v775;
                  v776 = HIDWORD(v775[1].__vftable);
                  if (v765 == v776)
                    break;
                  if (v765 >= v776)
                  {
                    _CF = v776 >= v765;
                    v780 = -1;
                    if (_CF)
                      v780 = 1;
                    if ((v780 & 0x80) == 0)
                      goto LABEL_1004;
                    goto LABEL_977;
                  }
LABEL_962:
                  v775 = *v767;
                  v768 = v767;
                  if (!*v767)
                    goto LABEL_979;
                }
                v777 = *((unsigned int *)v767 + 8);
                if (v766 < v777)
                  goto LABEL_962;
                _CF = v777 >= v766;
                v778 = v777 == v766;
                v779 = -1;
                if (_CF)
                  v779 = 1;
                if (v778)
                  v779 = 0;
                if ((v779 & 0x80) == 0)
                  goto LABEL_1004;
LABEL_977:
                v775 = v767[1];
                if (!v775)
                {
                  v768 = v767 + 1;
                  goto LABEL_979;
                }
              }
            }
          }
        }
LABEL_979:
        v781 = (std::__shared_weak_count *)operator new(0x28uLL);
        *(std::__shared_weak_count_vtbl **)((char *)&v781[1].__vftable + 4) = (std::__shared_weak_count_vtbl *)(v765 | (v766 << 32));
        v781->__vftable = 0;
        v781->__shared_owners_ = 0;
        v781->__shared_weak_owners_ = (uint64_t)v767;
        *v768 = v781;
        if (*v1713)
        {
          v1713 = (std::__shared_weak_count **)*v1713;
          v781 = *v768;
        }
        v782 = v1714;
        _ZF = v781 == v1714;
        LOBYTE(v781[1].__vftable) = v781 == v1714;
        if (!_ZF)
        {
          do
          {
            shared_weak_owners = v781->__shared_weak_owners_;
            if (*(_BYTE *)(shared_weak_owners + 24))
              break;
            v784 = *(std::__shared_weak_count **)(shared_weak_owners + 16);
            v785 = v784->__vftable;
            if (v784->__vftable == (std::__shared_weak_count_vtbl *)shared_weak_owners)
            {
              shared_owners = v784->__shared_owners_;
              if (!shared_owners
                || (v789 = *(unsigned __int8 *)(shared_owners + 24), p_get_deleter = (_BYTE *)(shared_owners + 24), v789))
              {
                if (*(std::__shared_weak_count **)shared_weak_owners == v781)
                {
                  *(_BYTE *)(shared_weak_owners + 24) = 1;
                  LOBYTE(v784[1].__vftable) = 0;
                  v792 = *(std::__shared_weak_count_vtbl **)(shared_weak_owners + 8);
                  v784->__vftable = v792;
                  if (v792)
                    goto LABEL_996;
                }
                else
                {
                  v790 = *(uint64_t **)(shared_weak_owners + 8);
                  v791 = *v790;
                  *(_QWORD *)(shared_weak_owners + 8) = *v790;
                  if (v791)
                  {
                    *(_QWORD *)(v791 + 16) = shared_weak_owners;
                    v784 = *(std::__shared_weak_count **)(shared_weak_owners + 16);
                  }
                  v790[2] = (uint64_t)v784;
                  *(_QWORD *)(*(_QWORD *)(shared_weak_owners + 16)
                            + 8 * (**(_QWORD **)(shared_weak_owners + 16) != shared_weak_owners)) = v790;
                  *v790 = shared_weak_owners;
                  *(_QWORD *)(shared_weak_owners + 16) = v790;
                  v784 = (std::__shared_weak_count *)v790[2];
                  shared_weak_owners = (uint64_t)v784->__vftable;
                  *((_BYTE *)v790 + 24) = 1;
                  LOBYTE(v784[1].__vftable) = 0;
                  v792 = *(std::__shared_weak_count_vtbl **)(shared_weak_owners + 8);
                  v784->__vftable = v792;
                  if (v792)
LABEL_996:
                    v792->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v784;
                }
                *(_QWORD *)(shared_weak_owners + 16) = v784->__shared_weak_owners_;
                *(_QWORD *)(v784->__shared_weak_owners_ + 8 * (*(_QWORD *)v784->__shared_weak_owners_ != (_QWORD)v784)) = shared_weak_owners;
                *(_QWORD *)(shared_weak_owners + 8) = v784;
LABEL_1002:
                v784->__shared_weak_owners_ = shared_weak_owners;
                break;
              }
            }
            else if (!v785
                   || (get_deleter_low = LOBYTE(v785->__get_deleter),
                       p_get_deleter = &v785->__get_deleter,
                       get_deleter_low))
            {
              if (*(std::__shared_weak_count **)shared_weak_owners == v781)
              {
                v959 = v781->__shared_owners_;
                *(_QWORD *)shared_weak_owners = v959;
                if (v959)
                {
                  *(_QWORD *)(v959 + 16) = shared_weak_owners;
                  v784 = *(std::__shared_weak_count **)(shared_weak_owners + 16);
                }
                v781->__shared_weak_owners_ = (uint64_t)v784;
                *(_QWORD *)(*(_QWORD *)(shared_weak_owners + 16)
                          + 8 * (**(_QWORD **)(shared_weak_owners + 16) != shared_weak_owners)) = v781;
                v781->__shared_owners_ = shared_weak_owners;
                *(_QWORD *)(shared_weak_owners + 16) = v781;
                v784 = (std::__shared_weak_count *)v781->__shared_weak_owners_;
                LOBYTE(v781[1].__vftable) = 1;
                LOBYTE(v784[1].__vftable) = 0;
                shared_weak_owners = v784->__shared_owners_;
                v793 = *(std::__shared_weak_count **)shared_weak_owners;
                v784->__shared_owners_ = *(_QWORD *)shared_weak_owners;
                if (v793)
LABEL_1000:
                  v793->__shared_weak_owners_ = (uint64_t)v784;
              }
              else
              {
                *(_BYTE *)(shared_weak_owners + 24) = 1;
                LOBYTE(v784[1].__vftable) = 0;
                shared_weak_owners = v784->__shared_owners_;
                v793 = *(std::__shared_weak_count **)shared_weak_owners;
                v784->__shared_owners_ = *(_QWORD *)shared_weak_owners;
                if (v793)
                  goto LABEL_1000;
              }
              *(_QWORD *)(shared_weak_owners + 16) = v784->__shared_weak_owners_;
              *(_QWORD *)(v784->__shared_weak_owners_ + 8 * (*(_QWORD *)v784->__shared_weak_owners_ != (_QWORD)v784)) = shared_weak_owners;
              *(_QWORD *)shared_weak_owners = v784;
              goto LABEL_1002;
            }
            *(_BYTE *)(shared_weak_owners + 24) = 1;
            v781 = v784;
            LOBYTE(v784[1].__vftable) = v784 == v782;
            *p_get_deleter = 1;
          }
          while (v784 != v782);
        }
        v769 = v1714;
        ++v1715;
        v766 = *(unsigned int *)(v764 + 24);
        v765 = *((unsigned int *)v763 + 6);
LABEL_1004:
        v794 = &v1714;
LABEL_1006:
        v795 = v794;
        if (v769)
        {
          do
          {
            v794 = (std::__shared_weak_count **)v769;
            v796 = HIDWORD(v769[1].__vftable);
            if (v766 == v796)
            {
              v797 = *((unsigned int *)v794 + 8);
              if (v765 < v797)
                goto LABEL_1005;
              _CF = v797 >= v765;
              v798 = v797 == v765;
              v799 = -1;
              if (_CF)
                v799 = 1;
              if (v798)
                v799 = 0;
              if ((v799 & 0x80) == 0)
                goto LABEL_1048;
            }
            else
            {
              if (v766 < v796)
              {
LABEL_1005:
                v769 = *v794;
                goto LABEL_1006;
              }
              _CF = v796 >= v766;
              v800 = -1;
              if (_CF)
                v800 = 1;
              if ((v800 & 0x80) == 0)
                goto LABEL_1048;
            }
            v769 = v794[1];
          }
          while (v769);
          v795 = v794 + 1;
        }
        v801 = (std::__shared_weak_count *)operator new(0x28uLL);
        *(std::__shared_weak_count_vtbl **)((char *)&v801[1].__vftable + 4) = (std::__shared_weak_count_vtbl *)(v766 | (v765 << 32));
        v801->__vftable = 0;
        v801->__shared_owners_ = 0;
        v801->__shared_weak_owners_ = (uint64_t)v794;
        *v795 = v801;
        if (*v1713)
        {
          v1713 = (std::__shared_weak_count **)*v1713;
          v801 = *v795;
        }
        v802 = v1714;
        _ZF = v801 == v1714;
        LOBYTE(v801[1].__vftable) = v801 == v1714;
        if (!_ZF)
        {
          do
          {
            v803 = v801->__shared_weak_owners_;
            if (*(_BYTE *)(v803 + 24))
              break;
            v804 = *(std::__shared_weak_count **)(v803 + 16);
            v805 = v804->__vftable;
            if (v804->__vftable == (std::__shared_weak_count_vtbl *)v803)
            {
              v808 = v804->__shared_owners_;
              if (!v808 || (v809 = *(unsigned __int8 *)(v808 + 24), v806 = (_BYTE *)(v808 + 24), v809))
              {
                if (*(std::__shared_weak_count **)v803 == v801)
                {
                  *(_BYTE *)(v803 + 24) = 1;
                  LOBYTE(v804[1].__vftable) = 0;
                  v812 = *(std::__shared_weak_count_vtbl **)(v803 + 8);
                  v804->__vftable = v812;
                  if (v812)
                    goto LABEL_1040;
                }
                else
                {
                  v810 = *(uint64_t **)(v803 + 8);
                  v811 = *v810;
                  *(_QWORD *)(v803 + 8) = *v810;
                  if (v811)
                  {
                    *(_QWORD *)(v811 + 16) = v803;
                    v804 = *(std::__shared_weak_count **)(v803 + 16);
                  }
                  v810[2] = (uint64_t)v804;
                  *(_QWORD *)(*(_QWORD *)(v803 + 16) + 8 * (**(_QWORD **)(v803 + 16) != v803)) = v810;
                  *v810 = v803;
                  *(_QWORD *)(v803 + 16) = v810;
                  v804 = (std::__shared_weak_count *)v810[2];
                  v803 = (uint64_t)v804->__vftable;
                  *((_BYTE *)v810 + 24) = 1;
                  LOBYTE(v804[1].__vftable) = 0;
                  v812 = *(std::__shared_weak_count_vtbl **)(v803 + 8);
                  v804->__vftable = v812;
                  if (v812)
LABEL_1040:
                    v812->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v804;
                }
                *(_QWORD *)(v803 + 16) = v804->__shared_weak_owners_;
                *(_QWORD *)(v804->__shared_weak_owners_ + 8 * (*(_QWORD *)v804->__shared_weak_owners_ != (_QWORD)v804)) = v803;
                *(_QWORD *)(v803 + 8) = v804;
LABEL_1046:
                v804->__shared_weak_owners_ = v803;
                break;
              }
            }
            else if (!v805 || (v807 = LOBYTE(v805->__get_deleter), v806 = &v805->__get_deleter, v807))
            {
              if (*(std::__shared_weak_count **)v803 == v801)
              {
                v1057 = v801->__shared_owners_;
                *(_QWORD *)v803 = v1057;
                if (v1057)
                {
                  *(_QWORD *)(v1057 + 16) = v803;
                  v804 = *(std::__shared_weak_count **)(v803 + 16);
                }
                v801->__shared_weak_owners_ = (uint64_t)v804;
                *(_QWORD *)(*(_QWORD *)(v803 + 16) + 8 * (**(_QWORD **)(v803 + 16) != v803)) = v801;
                v801->__shared_owners_ = v803;
                *(_QWORD *)(v803 + 16) = v801;
                v804 = (std::__shared_weak_count *)v801->__shared_weak_owners_;
                LOBYTE(v801[1].__vftable) = 1;
                LOBYTE(v804[1].__vftable) = 0;
                v803 = v804->__shared_owners_;
                v813 = *(std::__shared_weak_count **)v803;
                v804->__shared_owners_ = *(_QWORD *)v803;
                if (v813)
LABEL_1044:
                  v813->__shared_weak_owners_ = (uint64_t)v804;
              }
              else
              {
                *(_BYTE *)(v803 + 24) = 1;
                LOBYTE(v804[1].__vftable) = 0;
                v803 = v804->__shared_owners_;
                v813 = *(std::__shared_weak_count **)v803;
                v804->__shared_owners_ = *(_QWORD *)v803;
                if (v813)
                  goto LABEL_1044;
              }
              *(_QWORD *)(v803 + 16) = v804->__shared_weak_owners_;
              *(_QWORD *)(v804->__shared_weak_owners_ + 8 * (*(_QWORD *)v804->__shared_weak_owners_ != (_QWORD)v804)) = v803;
              *(_QWORD *)v803 = v804;
              goto LABEL_1046;
            }
            *(_BYTE *)(v803 + 24) = 1;
            v801 = v804;
            LOBYTE(v804[1].__vftable) = v804 == v802;
            *v806 = 1;
          }
          while (v804 != v802);
        }
        ++v1715;
LABEL_1048:
        if (!*(_BYTE *)(v764 + 160)
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/MapOptimizationUtil.cpp", 258, (uint64_t)"edge.T_source_to_neighbor", 25, (uint64_t)"Edge transfomation not exist", 28, (void (*)(void **))sub_21023DDB0)|| !*(_BYTE *)(v764 + 456)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/MapOptimizationUtil.cpp", 260, (uint64_t)"edge.JtJ_source_to_neighbor", 27, (uint64_t)"Edge transfomation not exist", 28, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if (!*(_BYTE *)(v764 + 160) || !*(_BYTE *)(v764 + 456))
          sub_20E866B34();
        v814 = v763[3];
        v815 = *(_QWORD *)(v764 + 24);
        memcpy(v1805, (const void *)(v764 + 168), sizeof(v1805));
        v816 = *(_OWORD *)(v764 + 112);
        v1801 = *(_OWORD *)(v764 + 96);
        v1802 = v816;
        v817 = *(__n128 *)(v764 + 144);
        v1803 = *(_OWORD *)(v764 + 128);
        v1804 = v817;
        v818 = *(_OWORD *)(v764 + 48);
        v1797 = *(_OWORD *)(v764 + 32);
        v1798 = v818;
        v838 = *(__n128 *)(v764 + 64);
        v839 = *(__n128 *)(v764 + 80);
        v1799 = v838;
        v1800 = v839;
        v819 = *(double *)(v764 + 168);
        v821 = *(double *)(v764 + 216);
        v820 = *(double *)(v764 + 224);
        v822 = *(double *)(v764 + 264);
        v823 = *(double *)(v764 + 272);
        v824 = *(double *)(v764 + 280);
        v825 = *(double *)(v764 + 312);
        v826 = *(double *)(v764 + 320);
        v828 = *(double *)(v764 + 328);
        v827 = *(double *)(v764 + 336);
        v830 = *(double *)(v764 + 360);
        v829 = *(double *)(v764 + 368);
        v832 = *(double *)(v764 + 376);
        v831.n128_u64[0] = *(_QWORD *)(v764 + 384);
        v833.n128_u64[0] = *(_QWORD *)(v764 + 392);
        v835.n128_u64[0] = *(_QWORD *)(v764 + 408);
        v834.n128_u64[0] = *(_QWORD *)(v764 + 416);
        v837.n128_u64[0] = *(_QWORD *)(v764 + 424);
        v836.n128_u64[0] = *(_QWORD *)(v764 + 432);
        v839.n128_u64[0] = *(_QWORD *)(v764 + 440);
        v838.n128_u64[0] = *(_QWORD *)(v764 + 448);
        v1722 = 0;
        v1721[2] = 0;
        v1724 = 0;
        v1723 = 0;
        v840 = *(_QWORD **)(v1720 + 5776);
        v1710 = (int64x2_t *)v1720;
        v841 = *(_QWORD **)(v1720 + 5784);
        if (v840 == v841)
        {
          v842 = *(double *)(v1720 + 5776);
        }
        else
        {
          v842 = *(double *)(v1720 + 5784);
          if (*(v841 - 111) >= (unint64_t)v1704)
          {
            v843 = 0xB195E8EFDB195E8FLL * (v841 - v840);
            v844 = *(_QWORD **)(v1720 + 5776);
            do
            {
              v845 = v843 >> 1;
              v846 = &v844[111 * (v843 >> 1)];
              v847 = *v846;
              v848 = v846 + 111;
              v843 += ~(v843 >> 1);
              if (v847 < v1704)
                v844 = v848;
              else
                v843 = v845;
            }
            while (v843);
            v842 = *(double *)(v1720 + 5784);
            if (v844 != v841)
            {
              v842 = *(double *)&v844;
              if (*v844 == v1704)
              {
LABEL_1110:
                v909 = 1;
                v910 = v1722;
                if (!v1722)
                  goto LABEL_1116;
                goto LABEL_1113;
              }
            }
          }
        }
        *(_QWORD *)oslog = v1704;
        memset(&oslog[24], 0, 40);
        *(_QWORD *)&oslog[16] = sqrt(v819);
        *(double *)&oslog[64] = v821 / *(double *)&oslog[16];
        memset(&oslog[80], 0, 32);
        *(_QWORD *)&oslog[72] = sqrt(v820 - *(double *)&oslog[64] * *(double *)&oslog[64]);
        *(double *)&oslog[112] = v822 / *(double *)&oslog[16];
        *(double *)&oslog[120] = (v823 - v821 / *(double *)&oslog[16] * (v822 / *(double *)&oslog[16]))
                               / *(double *)&oslog[72];
        *(_QWORD *)&oslog[128] = sqrt(v824- *(double *)&oslog[112] * *(double *)&oslog[112]- *(double *)&oslog[120] * *(double *)&oslog[120]);
        memset(&oslog[136], 0, 24);
        *(double *)&oslog[160] = v825 / *(double *)&oslog[16];
        *(double *)&oslog[168] = (v826 - v821 / *(double *)&oslog[16] * (v825 / *(double *)&oslog[16]))
                               / *(double *)&oslog[72];
        *(double *)&oslog[176] = (v828
                                - v822 / *(double *)&oslog[16] * (v825 / *(double *)&oslog[16])
                                - *(double *)&oslog[120] * *(double *)&oslog[168])
                               / *(double *)&oslog[128];
        *(_QWORD *)&oslog[184] = sqrt(v827- *(double *)&oslog[160] * *(double *)&oslog[160]- *(double *)&oslog[168] * *(double *)&oslog[168]- *(double *)&oslog[176] * *(double *)&oslog[176]);
        *(_QWORD *)&oslog[192] = 0;
        *(_QWORD *)&oslog[200] = 0;
        *(double *)&oslog[208] = v830 / *(double *)&oslog[16];
        *(double *)&oslog[216] = (v829 - v821 / *(double *)&oslog[16] * (v830 / *(double *)&oslog[16]))
                               / *(double *)&oslog[72];
        *(double *)&oslog[224] = (v832
                                - v822 / *(double *)&oslog[16] * (v830 / *(double *)&oslog[16])
                                - *(double *)&oslog[120] * *(double *)&oslog[216])
                               / *(double *)&oslog[128];
        *(double *)&oslog[232] = (v831.n128_f64[0]
                                - v825 / *(double *)&oslog[16] * (v830 / *(double *)&oslog[16])
                                - *(double *)&oslog[168] * *(double *)&oslog[216]
                                - *(double *)&oslog[176] * *(double *)&oslog[224])
                               / *(double *)&oslog[184];
        *(_QWORD *)&oslog[240] = sqrt(v833.n128_f64[0]- *(double *)&oslog[208] * *(double *)&oslog[208]- *(double *)&oslog[216] * *(double *)&oslog[216]- *(double *)&oslog[224] * *(double *)&oslog[224]- *(double *)&oslog[232] * *(double *)&oslog[232]);
        *(_QWORD *)&oslog[248] = 0;
        *(double *)&oslog[256] = v835.n128_f64[0] / *(double *)&oslog[16];
        *(double *)&oslog[264] = (v834.n128_f64[0]
                                - v821 / *(double *)&oslog[16] * (v835.n128_f64[0] / *(double *)&oslog[16]))
                               / *(double *)&oslog[72];
        *(double *)&oslog[272] = (v837.n128_f64[0]
                                - v822 / *(double *)&oslog[16] * (v835.n128_f64[0] / *(double *)&oslog[16])
                                - *(double *)&oslog[120] * *(double *)&oslog[264])
                               / *(double *)&oslog[128];
        *(double *)&oslog[280] = (v836.n128_f64[0]
                                - v825 / *(double *)&oslog[16] * (v835.n128_f64[0] / *(double *)&oslog[16])
                                - *(double *)&oslog[168] * *(double *)&oslog[264]
                                - *(double *)&oslog[176] * *(double *)&oslog[272])
                               / *(double *)&oslog[184];
        *(double *)&oslog[288] = (v839.n128_f64[0]
                                - v830 / *(double *)&oslog[16] * (v835.n128_f64[0] / *(double *)&oslog[16])
                                - *(double *)&oslog[216] * *(double *)&oslog[264]
                                - *(double *)&oslog[224] * *(double *)&oslog[272]
                                - *(double *)&oslog[232] * *(double *)&oslog[280])
                               / *(double *)&oslog[240];
        *(_QWORD *)&oslog[296] = sqrt(v838.n128_f64[0]- *(double *)&oslog[256] * *(double *)&oslog[256]- *(double *)&oslog[264] * *(double *)&oslog[264]- *(double *)&oslog[272] * *(double *)&oslog[272]- *(double *)&oslog[280] * *(double *)&oslog[280]- *(double *)&oslog[288] * *(double *)&oslog[288]);
        memcpy(&oslog[304], v1805, 0x120uLL);
        v1811 = v1801;
        v1812 = v1802;
        v1813 = v1803;
        v1814 = v1804;
        v1807 = v1797;
        v1808 = v1798;
        v838 = v1799;
        v839 = v1800;
        v1809 = v1799;
        v1810 = v1800;
        v849 = 1;
        v1815 = 1;
        v1816 = 0uLL;
        v1825 = 0;
        v1826 = 0;
        v1823 = 0xBFF0000000000000;
        v1824 = 0;
        v1827 = 0;
        v850 = (int64x2_t *)v1720;
        v851 = *(char **)(v1720 + 4888);
        v852 = *(char **)(v1720 + 4896);
        v853 = v852 - v851;
        if (v852 == v851)
          goto LABEL_1104;
        v854 = (int64x2_t *)(v1720 + 5856);
        v855 = v853 >> 4;
        v856 = *(char **)(v1720 + 4888);
        v857 = v853 >> 4;
        do
        {
          v858 = v857 >> 1;
          v859 = (unsigned int *)&v856[16 * (v857 >> 1)];
          v861 = *v859;
          v860 = (char *)(v859 + 4);
          v857 += ~(v857 >> 1);
          if (v861 < v814)
            v856 = v860;
          else
            v857 = v858;
        }
        while (v857);
        if (v856 == v852 || *(_DWORD *)v856 != (_DWORD)v814)
          goto LABEL_1103;
        v1661 = v840;
        v862 = *((_QWORD *)v856 + 1);
        *(_QWORD *)&v1816 = v862;
        ++*(_DWORD *)(*((_QWORD *)v856 + 1) + 8);
        do
        {
          v863 = v855 >> 1;
          v864 = (unsigned int *)&v851[16 * (v855 >> 1)];
          v866 = *v864;
          v865 = (char *)(v864 + 4);
          v855 += ~(v855 >> 1);
          if (v866 < v815)
            v851 = v865;
          else
            v855 = v863;
        }
        while (v855);
        if (v851 == v852 || *(_DWORD *)v851 != (_DWORD)v815)
        {
          if (v862)
            --*(_DWORD *)(v862 + 8);
          goto LABEL_1103;
        }
        v867 = *((_QWORD *)v851 + 1);
        *((_QWORD *)&v1816 + 1) = v867;
        ++*(_DWORD *)(*((_QWORD *)v851 + 1) + 8);
        if (!*(_BYTE *)(v862 + 20) && !*(_BYTE *)(v867 + 20))
        {
          --*(_DWORD *)(v862 + 8);
          --*(_DWORD *)(v867 + 8);
LABEL_1103:
          v849 = 1;
LABEL_1104:
          v906 = v1724;
          if (!v1724)
            goto LABEL_1109;
          goto LABEL_1105;
        }
        object[0] = (void *)v1704;
        *(_OWORD *)&object[1] = *(_OWORD *)oslog;
        memcpy(&object[3], &oslog[16], 0x120uLL);
        memcpy(&object[39], &oslog[304], 0x120uLL);
        v1733 = v1811;
        v1734 = v1812;
        v1735 = v1813;
        v1736 = v1814;
        v1729 = v1807;
        v1730 = v1808;
        v1731 = v1809;
        v1732 = v1810;
        v1737 = 1;
        v1738 = v1816;
        v1739 = v1817;
        v1740 = v1818;
        v1741 = v1819;
        v1742 = v1820;
        v1743 = v1821;
        v1744 = v1822;
        v1745 = v1823;
        v1746 = v1824;
        v1747 = 0uLL;
        v1825 = 0;
        v1826 = 0;
        v1748 = 0;
        if (v841 == *(_QWORD **)&v842 || **(_QWORD **)&v842 != v1704)
          break;
LABEL_1397:
        v854->i8[2] = 0;
        v854->i8[0] = 0;
        v839 = (__n128)xmmword_2103B2300;
        v838 = (__n128)vaddq_s64(v850[365], (int64x2_t)xmmword_2103B2300);
        v850[365] = (int64x2_t)v838;
        v1122 = v1826;
        if (!v1826)
          goto LABEL_1401;
        v1123 = (unint64_t *)&v1826->__shared_owners_;
        do
          v1124 = __ldaxr(v1123);
        while (__stlxr(v1124 - 1, v1123));
        if (!v1124)
        {
          ((void (*)(std::__shared_weak_count *))v1122->__on_zero_shared)(v1122);
          std::__shared_weak_count::__release_weak(v1122);
          v849 = 0;
          v906 = v1724;
          if (!v1724)
            goto LABEL_1109;
        }
        else
        {
LABEL_1401:
          v849 = 0;
          v906 = v1724;
          if (!v1724)
            goto LABEL_1109;
        }
LABEL_1105:
        v907 = (unint64_t *)&v906->__shared_owners_;
        do
          v908 = __ldaxr(v907);
        while (__stlxr(v908 - 1, v907));
        if (!v908)
        {
          ((void (*)(std::__shared_weak_count *))v906->__on_zero_shared)(v906);
          std::__shared_weak_count::__release_weak(v906);
        }
LABEL_1109:
        if ((v849 & 1) != 0)
          goto LABEL_1110;
        v909 = 0;
        v850[414].i8[12] = 0;
        v850[414].i32[2] = 0;
        v910 = v1722;
        if (!v1722)
          goto LABEL_1116;
LABEL_1113:
        v911 = (unint64_t *)&v910->__shared_owners_;
        do
          v912 = __ldaxr(v911);
        while (__stlxr(v912 - 1, v911));
        if (v912)
        {
LABEL_1116:
          if (v909)
            goto LABEL_1117;
          goto LABEL_942;
        }
        ((void (*)(std::__shared_weak_count *, __n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128, double, double))v910->__on_zero_shared)(v910, v838, v839, v836, v837, v834, v835, v833, v831, *(double *)&v1655, v1656);
        std::__shared_weak_count::__release_weak(v910);
        if (v909)
        {
LABEL_1117:
          v913 = MEMORY[0x24BEDB858];
          v914 = (void *)(MEMORY[0x24BEDB858] + 104);
          object[16] = (void *)(MEMORY[0x24BEDB858] + 104);
          v915 = (void *)(MEMORY[0x24BEDB858] + 64);
          object[2] = (void *)(MEMORY[0x24BEDB858] + 64);
          object[0] = v1679;
          *(void **)((char *)object + *((_QWORD *)v1679 - 3)) = v1678;
          object[1] = 0;
          v916 = (std::ios_base *)((char *)object + *((_QWORD *)object[0] - 3));
          std::ios_base::init(v916, &object[3]);
          v916[1].__vftable = 0;
          v916[1].__fmtflags_ = -1;
          object[2] = v1676;
          *(void **)((char *)&object[2] + *((_QWORD *)v1676 - 3)) = v1674;
          object[0] = v1671;
          *(void **)((char *)object + *((_QWORD *)v1671 - 3)) = v1673;
          object[16] = v914;
          object[0] = (void *)(v913 + 24);
          object[2] = v915;
          std::streambuf::basic_streambuf();
          object[3] = v1668;
          memset(&object[11], 0, 32);
          LODWORD(object[15]) = 24;
          v917 = (char *)v1710[305].i64[1];
          v918 = (char *)v1710[306].i64[0];
          v919 = v917;
          if (v918 != v917)
          {
            v920 = (v918 - v917) >> 4;
            v919 = (char *)v1710[305].i64[1];
            do
            {
              v921 = v920 >> 1;
              v922 = (unsigned int *)&v919[16 * (v920 >> 1)];
              v924 = *v922;
              v923 = (char *)(v922 + 4);
              v920 += ~(v920 >> 1);
              if (v924 < v815)
                v919 = v923;
              else
                v920 = v921;
            }
            while (v920);
          }
          if (v919 == v918 || *(_DWORD *)v919 != (_DWORD)v815)
          {
            v930 = 1;
            v931 = v918 - v917;
            if (v918 == v917)
              goto LABEL_1172;
          }
          else
          {
            v925 = sub_20E86A980(&object[2], (uint64_t)"error: landmark variable ", 25);
            sub_20F622E88((uint64_t)v1793);
            if (v1793[1].f64[0] >= 0.0)
              v926 = (uint64_t)v1793;
            else
              v926 = *(_QWORD *)&v1793[0].f64[0];
            if (v1793[1].f64[0] >= 0.0)
              v927 = HIBYTE(v1793[1].f64[0]);
            else
              v927 = *(_QWORD *)&v1793[0].f64[1];
            v928 = sub_20E86A980(v925, v926, v927);
            sub_20E86A980(v928, (uint64_t)" with ID ", 9);
            v929 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v929, (uint64_t)" was not found.\n", 16);
            if (SHIBYTE(v1793[1].f64[0]) < 0)
            {
              operator delete(*(void **)&v1793[0].f64[0]);
              v930 = 0;
              v917 = (char *)v1710[305].i64[1];
              v918 = (char *)v1710[306].i64[0];
              v931 = v918 - v917;
              if (v918 == v917)
                goto LABEL_1172;
            }
            else
            {
              v930 = 0;
              v917 = (char *)v1710[305].i64[1];
              v918 = (char *)v1710[306].i64[0];
              v931 = v918 - v917;
              if (v918 == v917)
                goto LABEL_1172;
            }
          }
          v932 = v931 >> 4;
          v933 = v917;
          v934 = v932;
          do
          {
            v935 = v934 >> 1;
            v936 = (unsigned int *)&v933[16 * (v934 >> 1)];
            v938 = *v936;
            v937 = (char *)(v936 + 4);
            v934 += ~(v934 >> 1);
            if (v938 < v814)
              v933 = v937;
            else
              v934 = v935;
          }
          while (v934);
          if (v933 == v918 || *(_DWORD *)v933 != (_DWORD)v814)
          {
LABEL_1172:
            v960 = sub_20E86A980(&object[2], (uint64_t)"error: variable ", 16);
            sub_20F622E88((uint64_t)v1793);
            if (v1793[1].f64[0] >= 0.0)
              v961 = (uint64_t)v1793;
            else
              v961 = *(_QWORD *)&v1793[0].f64[0];
            if (v1793[1].f64[0] >= 0.0)
              v962 = HIBYTE(v1793[1].f64[0]);
            else
              v962 = *(_QWORD *)&v1793[0].f64[1];
            v963 = sub_20E86A980(v960, v961, v962);
            sub_20E86A980(v963, (uint64_t)" with ID ", 9);
            v964 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v964, (uint64_t)" not found\n", 11);
            if (SHIBYTE(v1793[1].f64[0]) < 0)
              operator delete(*(void **)&v1793[0].f64[0]);
            v930 = 0;
            v954 = 0;
            v955 = (char *)v1710[305].i64[1];
            v956 = (char *)v1710[306].i64[0];
            v957 = v955;
            v958 = v956 - v955;
            if (v956 == v955)
              goto LABEL_1186;
          }
          else
          {
            do
            {
              v939 = v932 >> 1;
              v940 = (unsigned int *)&v917[16 * (v932 >> 1)];
              v942 = *v940;
              v941 = (char *)(v940 + 4);
              v932 += ~(v932 >> 1);
              if (v942 < v814)
                v917 = v941;
              else
                v932 = v939;
            }
            while (v932);
            if (v917 == v918 || *(_DWORD *)v917 != (_DWORD)v814)
              v917 = v918;
            v943 = *((_QWORD *)v917 + 1);
            v944 = sub_20E86A980(&object[2], (uint64_t)"debug: variable ", 16);
            sub_20F622E88((uint64_t)v1793);
            if (v1793[1].f64[0] >= 0.0)
              v945 = (uint64_t)v1793;
            else
              v945 = *(_QWORD *)&v1793[0].f64[0];
            if (v1793[1].f64[0] >= 0.0)
              v946 = HIBYTE(v1793[1].f64[0]);
            else
              v946 = *(_QWORD *)&v1793[0].f64[1];
            v947 = sub_20E86A980(v944, v945, v946);
            sub_20E86A980(v947, (uint64_t)" with ID ", 9);
            v948 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v948, (uint64_t)" found (", 8);
            v949 = (_QWORD *)std::ostream::operator<<();
            v950 = sub_20E86A980(v949, (uint64_t)", ", 2);
            if (*(_BYTE *)(v943 + 20))
              v951 = "free";
            else
              v951 = "fixed";
            if (*(_BYTE *)(v943 + 20))
              v952 = 4;
            else
              v952 = 5;
            v953 = sub_20E86A980(v950, (uint64_t)v951, v952);
            sub_20E86A980(v953, (uint64_t)")\n", 2);
            if (SHIBYTE(v1793[1].f64[0]) < 0)
              operator delete(*(void **)&v1793[0].f64[0]);
            v954 = *(unsigned __int8 *)(v943 + 20);
            v955 = (char *)v1710[305].i64[1];
            v956 = (char *)v1710[306].i64[0];
            v957 = v955;
            v958 = v956 - v955;
            if (v956 == v955)
            {
LABEL_1186:
              if (v957 != v956 && *(_DWORD *)v957 == (_DWORD)v815)
              {
                if (v956 != v955)
                {
                  v970 = (v956 - v955) >> 4;
                  do
                  {
                    v971 = v970 >> 1;
                    v972 = (unsigned int *)&v955[16 * (v970 >> 1)];
                    v974 = *v972;
                    v973 = (char *)(v972 + 4);
                    v970 += ~(v970 >> 1);
                    if (v974 < v815)
                      v955 = v973;
                    else
                      v970 = v971;
                  }
                  while (v970);
                }
                if (v955 == v956 || *(_DWORD *)v955 != (_DWORD)v815)
                  v955 = v956;
                v975 = *((_QWORD *)v955 + 1);
                v976 = sub_20E86A980(&object[2], (uint64_t)"debug: variable ", 16);
                sub_20F622E88((uint64_t)v1793);
                if (v1793[1].f64[0] >= 0.0)
                  v977 = (uint64_t)v1793;
                else
                  v977 = *(_QWORD *)&v1793[0].f64[0];
                if (v1793[1].f64[0] >= 0.0)
                  v978 = HIBYTE(v1793[1].f64[0]);
                else
                  v978 = *(_QWORD *)&v1793[0].f64[1];
                v979 = sub_20E86A980(v976, v977, v978);
                sub_20E86A980(v979, (uint64_t)" with ID ", 9);
                v980 = (_QWORD *)std::ostream::operator<<();
                sub_20E86A980(v980, (uint64_t)" found (", 8);
                v981 = (_QWORD *)std::ostream::operator<<();
                v982 = sub_20E86A980(v981, (uint64_t)", ", 2);
                if (*(_BYTE *)(v975 + 20))
                  v983 = "free";
                else
                  v983 = "fixed";
                if (*(_BYTE *)(v975 + 20))
                  v984 = 4;
                else
                  v984 = 5;
                v985 = sub_20E86A980(v982, (uint64_t)v983, v984);
                sub_20E86A980(v985, (uint64_t)")\n", 2);
                if (SHIBYTE(v1793[1].f64[0]) < 0)
                  operator delete(*(void **)&v1793[0].f64[0]);
                v954 |= *(unsigned __int8 *)(v975 + 20);
                v986 = (char *)v1710[361].i64[0];
                v987 = (char *)v1710[361].i64[1];
                v988 = v987 - v986;
                if (v987 == v986)
                  goto LABEL_1238;
LABEL_1222:
                v994 = 0xB195E8EFDB195E8FLL * (v988 >> 3);
                do
                {
                  v995 = v994 >> 1;
                  v996 = (unint64_t *)&v986[888 * (v994 >> 1)];
                  v997 = *v996;
                  v998 = (char *)(v996 + 111);
                  v994 += ~(v994 >> 1);
                  if (v997 < v1704)
                    v986 = v998;
                  else
                    v994 = v995;
                }
                while (v994);
                if (v987 != v986 && *(_QWORD *)v986 == v1704)
                {
                  v999 = sub_20E86A980(&object[2], (uint64_t)"error: factor ", 14);
                  sub_20F626DE0((uint64_t)v1793);
                  if (v1793[1].f64[0] >= 0.0)
                    v1000 = (uint64_t)v1793;
                  else
                    v1000 = *(_QWORD *)&v1793[0].f64[0];
                  if (v1793[1].f64[0] >= 0.0)
                    v1001 = HIBYTE(v1793[1].f64[0]);
                  else
                    v1001 = *(_QWORD *)&v1793[0].f64[1];
                  v1002 = sub_20E86A980(v999, v1000, v1001);
                  sub_20E86A980(v1002, (uint64_t)" with the same ID ", 18);
                  v1003 = (_QWORD *)std::ostream::operator<<();
                  sub_20E86A980(v1003, (uint64_t)" already exists.\n", 17);
                  if (SHIBYTE(v1793[1].f64[0]) < 0)
                    operator delete(*(void **)&v1793[0].f64[0]);
                  v930 = 0;
                }
                goto LABEL_1238;
              }
              v989 = sub_20E86A980(&object[2], (uint64_t)"error: variable ", 16);
              sub_20F622E88((uint64_t)v1793);
              if (v1793[1].f64[0] >= 0.0)
                v990 = (uint64_t)v1793;
              else
                v990 = *(_QWORD *)&v1793[0].f64[0];
              if (v1793[1].f64[0] >= 0.0)
                v991 = HIBYTE(v1793[1].f64[0]);
              else
                v991 = *(_QWORD *)&v1793[0].f64[1];
              v992 = sub_20E86A980(v989, v990, v991);
              sub_20E86A980(v992, (uint64_t)" with ID ", 9);
              v993 = (_QWORD *)std::ostream::operator<<();
              sub_20E86A980(v993, (uint64_t)" not found\n", 11);
              if (SHIBYTE(v1793[1].f64[0]) < 0)
                operator delete(*(void **)&v1793[0].f64[0]);
              v930 = 0;
              v986 = (char *)v1710[361].i64[0];
              v987 = (char *)v1710[361].i64[1];
              v988 = v987 - v986;
              if (v987 != v986)
                goto LABEL_1222;
LABEL_1238:
              if (v954)
              {
                v1004 = v930 != 0;
                v1005 = (char)object[15];
                if (((uint64_t)object[15] & 0x10) == 0)
                  goto LABEL_1240;
LABEL_1250:
                v1013 = object[14];
                v1014 = &object[8];
                if (object[14] < object[9])
                {
                  object[14] = object[9];
                  v1013 = object[9];
                  v1014 = &object[8];
                }
LABEL_1253:
                v1015 = *v1014;
                v1006 = v1013 - (_BYTE *)*v1014;
                if (v1006 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v1006 >= 0x17)
                {
                  v1016 = (v1006 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v1006 | 7) != 0x17)
                    v1016 = v1006 | 7;
                  v1017 = v1016 + 1;
                  v1007 = operator new(v1016 + 1);
                  *(_QWORD *)&v1793[1].f64[0] = v1017 | 0x8000000000000000;
                  *(_QWORD *)&v1793[0].f64[0] = v1007;
                  *(_QWORD *)&v1793[0].f64[1] = v1006;
                }
                else
                {
                  HIBYTE(v1793[1].f64[0]) = (_BYTE)v1013 - *(_BYTE *)v1014;
                  v1007 = v1793;
                  if (!v1006)
                    goto LABEL_1261;
                }
                memmove(v1007, v1015, v1006);
                goto LABEL_1261;
              }
              v1008 = sub_20E86A980(&object[2], (uint64_t)"error: factor ", 14);
              sub_20F626DE0((uint64_t)v1793);
              if (v1793[1].f64[0] >= 0.0)
                v1009 = (uint64_t)v1793;
              else
                v1009 = *(_QWORD *)&v1793[0].f64[0];
              if (v1793[1].f64[0] >= 0.0)
                v1010 = HIBYTE(v1793[1].f64[0]);
              else
                v1010 = *(_QWORD *)&v1793[0].f64[1];
              v1011 = sub_20E86A980(v1008, v1009, v1010);
              sub_20E86A980(v1011, (uint64_t)" with ID ", 9);
              v1012 = (_QWORD *)std::ostream::operator<<();
              sub_20E86A980(v1012, (uint64_t)" cannot be added: all variables are fixed.\n", 43);
              if (SHIBYTE(v1793[1].f64[0]) < 0)
              {
                operator delete(*(void **)&v1793[0].f64[0]);
                v1004 = 0;
                v1005 = (char)object[15];
                if (((uint64_t)object[15] & 0x10) != 0)
                  goto LABEL_1250;
              }
              else
              {
                v1004 = 0;
                v1005 = (char)object[15];
                if (((uint64_t)object[15] & 0x10) != 0)
                  goto LABEL_1250;
              }
LABEL_1240:
              if ((v1005 & 8) != 0)
              {
                v1013 = object[7];
                v1014 = &object[5];
                goto LABEL_1253;
              }
              v1006 = 0;
              HIBYTE(v1793[1].f64[0]) = 0;
              v1007 = v1793;
LABEL_1261:
              *((_BYTE *)v1007 + v1006) = 0;
              *(float64x2_t *)oslog = v1793[0];
              *(float64_t *)&oslog[16] = v1793[1].f64[0];
              oslog[24] = v1004;
              object[0] = v1666;
              *(void **)((char *)object + *((_QWORD *)v1666 - 3)) = v1665;
              object[2] = v1664;
              object[3] = (void *)(MEMORY[0x24BEDB848] + 16);
              if (SHIBYTE(object[13]) < 0)
                operator delete(object[11]);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x212BC6290](&object[16]);
              v1018 = oslog[23];
              if ((oslog[23] & 0x80000000) != 0)
              {
                v1021 = *(_QWORD *)&oslog[8];
                v1022 = (*(_QWORD *)&oslog[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if (v1022 - *(_QWORD *)&oslog[8] < 0x5B)
                {
                  v1019 = *(_QWORD *)&oslog[8] + 91;
                  if (0x7FFFFFFFFFFFFFF7 - (*(_QWORD *)&oslog[16] & 0x7FFFFFFFFFFFFFFFuLL) < *(_QWORD *)&oslog[8]
                                                                                              + 91
                                                                                              - v1022)
                    sub_20E860B7C();
                  v1020 = *(_BYTE **)oslog;
                  v1023 = 0x7FFFFFFFFFFFFFF7;
                  if (v1022 < 0x3FFFFFFFFFFFFFF3)
                  {
LABEL_1269:
                    v1024 = 2 * v1022;
                    if (v1019 > 2 * v1022)
                      v1024 = v1019;
                    if (v1024 >= 0x17)
                    {
                      v1029 = (v1024 & 0xFFFFFFFFFFFFFFF8) + 8;
                      v1030 = v1024 | 7;
                      if (v1030 == 23)
                        v1030 = v1029;
                      v1023 = v1030 + 1;
                    }
                    else
                    {
                      v1023 = 23;
                    }
                  }
                  v1031 = (char *)operator new(v1023);
                  v1032 = v1031;
                  qmemcpy(v1031, "Failed to add a factor into the linear system. This could be due to duplicate factor IDs ('", 91);
                  if (v1021)
                    memmove(v1031 + 91, v1020, v1021);
                  if (v1022 != 22)
                    operator delete(v1020);
                  *(_QWORD *)&oslog[16] = v1023 | 0x8000000000000000;
                  *(_QWORD *)oslog = v1032;
                  *(_QWORD *)&oslog[8] = v1019;
                  v1033 = &v1032[v1019];
                  goto LABEL_1295;
                }
                v1025 = *(char **)oslog;
                if (*(_QWORD *)&oslog[8])
                  goto LABEL_1274;
              }
              else
              {
                if (oslog[23] < 0x17u)
                {
                  v1019 = oslog[23] + 91;
                  v1020 = oslog;
                  v1021 = oslog[23];
                  v1022 = 22;
                  goto LABEL_1269;
                }
                v1025 = oslog;
                v1021 = oslog[23];
                if (oslog[23])
                {
LABEL_1274:
                  v1026 = &v1025[v1021] <= "Failed to add a factor into the linear system. This could be due to duplicate factor IDs ('"
                       || v1025 > "Failed to add a factor into the linear system. This could be due to duplicate factor IDs ('";
                  v1027 = 91;
                  if (v1026)
                    v1027 = 0;
                  v1028 = &aFailedToAddAFa[v1027];
                  memmove(v1025 + 91, v1025, v1021);
LABEL_1291:
                  *((_OWORD *)v1025 + 2) = *((_OWORD *)v1028 + 2);
                  *((_OWORD *)v1025 + 3) = *((_OWORD *)v1028 + 3);
                  *((_OWORD *)v1025 + 4) = *((_OWORD *)v1028 + 4);
                  *(_OWORD *)(v1025 + 75) = *(_OWORD *)(v1028 + 75);
                  *(_OWORD *)v1025 = *(_OWORD *)v1028;
                  *((_OWORD *)v1025 + 1) = *((_OWORD *)v1028 + 1);
                  v1034 = v1021 + 91;
                  if (v1018 < 0)
                    *(_QWORD *)&oslog[8] = v1021 + 91;
                  else
                    oslog[23] = v1034 & 0x7F;
                  v1033 = &v1025[v1034];
LABEL_1295:
                  *v1033 = 0;
                  *(_QWORD *)&v1835 = *(_QWORD *)&oslog[16];
                  v1834 = *(_OWORD *)oslog;
                  memset(oslog, 0, 24);
                  if (SBYTE7(v1835) < 0)
                  {
                    v1035 = *((_QWORD *)&v1834 + 1);
                    v1038 = (v1835 & 0x7FFFFFFFFFFFFFFFLL) - 1;
                    if (v1038 - *((_QWORD *)&v1834 + 1) >= 3)
                    {
                      v1041 = (__int128 *)v1834;
                      goto LABEL_1316;
                    }
                    v1036 = *((_QWORD *)&v1834 + 1) + 3;
                    if (0x7FFFFFFFFFFFFFF7 - ((unint64_t)v1835 & 0x7FFFFFFFFFFFFFFFLL) < *((_QWORD *)&v1834 + 1)
                                                                                                 + 3
                                                                                                 - v1038)
LABEL_2008:
                      sub_20E860B7C();
                    v1037 = (__int128 *)v1834;
                    v1039 = 0x7FFFFFFFFFFFFFF7;
                    if (v1038 < 0x3FFFFFFFFFFFFFF3)
                    {
LABEL_1302:
                      v1040 = 2 * v1038;
                      if (v1036 > 2 * v1038)
                        v1040 = v1036;
                      if (v1040 >= 0x17)
                      {
                        v1042 = (v1040 & 0xFFFFFFFFFFFFFFF8) + 8;
                        v1043 = v1040 | 7;
                        if (v1043 == 23)
                          v1043 = v1042;
                        v1039 = v1043 + 1;
                      }
                      else
                      {
                        v1039 = 23;
                      }
                    }
                    v1044 = (char *)operator new(v1039);
                    v1045 = v1044;
                    if (v1035)
                      memmove(v1044, v1037, v1035);
                    v1046 = &v1045[v1035];
                    v1046[2] = 46;
                    *(_WORD *)v1046 = 10535;
                    if (v1038 != 22)
                      operator delete(v1037);
                    *(_QWORD *)&v1835 = v1039 | 0x8000000000000000;
                    *(_QWORD *)&v1834 = v1045;
                    *((_QWORD *)&v1834 + 1) = v1036;
                    v1047 = &v1045[v1036];
                  }
                  else
                  {
                    v1035 = BYTE7(v1835);
                    if ((unint64_t)BYTE7(v1835) - 20 < 3)
                    {
                      if (BYTE7(v1835) <= 0x12u)
                        goto LABEL_2008;
                      v1036 = BYTE7(v1835) + 3;
                      v1037 = &v1834;
                      v1038 = 22;
                      goto LABEL_1302;
                    }
                    v1041 = &v1834;
LABEL_1316:
                    v1048 = (char *)v1041 + v1035;
                    v1048[2] = 46;
                    *(_WORD *)v1048 = 10535;
                    v1049 = v1035 + 3;
                    if (SBYTE7(v1835) < 0)
                      *((_QWORD *)&v1834 + 1) = v1035 + 3;
                    else
                      BYTE7(v1835) = v1049 & 0x7F;
                    v1047 = (char *)v1041 + v1049;
                  }
                  *v1047 = 0;
                  v1842[2] = (void *)v1835;
                  *(_OWORD *)v1842 = v1834;
                  *(_QWORD *)&v1835 = 0;
                  v1834 = 0uLL;
                  if (SHIBYTE(v1842[2]) >= 0)
                    v1050 = v1842;
                  else
                    v1050 = (void **)v1842[0];
                  if (SHIBYTE(v1842[2]) >= 0)
                    v1051 = HIBYTE(v1842[2]);
                  else
                    v1051 = (uint64_t)v1842[1];
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 232, (uint64_t)"ret.second", 10, (uint64_t)v1050, v1051, (void (*)(void **))sub_21023DDB0);
                  v1052 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v1052 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v1053 = qword_254A6DE40;
                    for (m = qword_254A6DE48; v1053 != m; v1053 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, void **, uint64_t))v1053)(*(_QWORD *)(v1053 + 8), "ret.second", 10, v1050, v1051);
                  }
                  v1055 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v1055 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v1056 = byte_254A6DE68;
                  if (byte_254A6DE68)
                    qword_254A6DE58(unk_254A6DE60, "ret.second", 10, v1050, v1051);
                  if (SHIBYTE(v1842[2]) < 0)
                  {
                    operator delete(v1842[0]);
                    if ((SBYTE7(v1835) & 0x80000000) == 0)
                      goto LABEL_1338;
LABEL_940:
                    operator delete((void *)v1834);
                    if ((oslog[23] & 0x80000000) != 0)
                      goto LABEL_1339;
                  }
                  else
                  {
                    if (SBYTE7(v1835) < 0)
                      goto LABEL_940;
LABEL_1338:
                    if ((oslog[23] & 0x80000000) != 0)
                    {
LABEL_1339:
                      operator delete(*(void **)oslog);
                      if (!v1056)
LABEL_2004:
                        abort();
                      goto LABEL_942;
                    }
                  }
                  if (!v1056)
                    goto LABEL_2004;
                  goto LABEL_942;
                }
              }
              v1028 = "Failed to add a factor into the linear system. This could be due to duplicate factor IDs ('";
              goto LABEL_1291;
            }
          }
          v965 = v958 >> 4;
          v957 = v955;
          do
          {
            v966 = v965 >> 1;
            v967 = (unsigned int *)&v957[16 * (v965 >> 1)];
            v969 = *v967;
            v968 = (char *)(v967 + 4);
            v965 += ~(v965 >> 1);
            if (v969 < v815)
              v957 = v968;
            else
              v965 = v966;
          }
          while (v965);
          goto LABEL_1186;
        }
LABEL_942:
        ++v1704;
        v763 = v1687;
LABEL_943:
        v764 += 472;
        if (v764 == v1694)
          goto LABEL_937;
      }
      v868 = *(_QWORD *)&v842 - (_QWORD)v840;
      v869 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)&v842 - (_QWORD)v840) >> 3);
      v870 = v1710[362].u64[0];
      if ((unint64_t)v841 < v870)
      {
        if (*(_QWORD **)&v842 == v841)
        {
          *v841 = v1704;
          v1062 = &v840[(uint64_t)(*(_QWORD *)&v842 - (_QWORD)v840) >> 3];
          *(_OWORD *)(v1062 + 1) = *(_OWORD *)&object[1];
          memcpy(v1062 + 3, &object[3], 0x120uLL);
          memcpy(v1062 + 39, &object[39], 0x120uLL);
          v1063 = v1729;
          v1064 = v1730;
          v1065 = v1732;
          *(__n128 *)(v1062 + 79) = v1731;
          *(__n128 *)(v1062 + 81) = v1065;
          *(_OWORD *)(v1062 + 75) = v1063;
          *(_OWORD *)(v1062 + 77) = v1064;
          v1066 = v1733;
          v1067 = v1734;
          v837 = v1736;
          *(_OWORD *)(v1062 + 87) = v1735;
          *(__n128 *)(v1062 + 89) = v837;
          *(_OWORD *)(v1062 + 83) = v1066;
          *(_OWORD *)(v1062 + 85) = v1067;
          *((_BYTE *)v1062 + 728) = 1;
          *((_OWORD *)v1062 + 46) = v1738;
          v1068 = v1741;
          v1069 = v1739;
          *((_OWORD *)v1062 + 48) = v1740;
          *((_OWORD *)v1062 + 49) = v1068;
          *((_OWORD *)v1062 + 47) = v1069;
          v1070 = v1742;
          v836 = v1744;
          *((_OWORD *)v1062 + 51) = v1743;
          *((__n128 *)v1062 + 52) = v836;
          *((_OWORD *)v1062 + 50) = v1070;
          v1071 = v1745;
          *((_BYTE *)v1062 + 856) = v1746;
          v1062[106] = v1071;
          *((_OWORD *)v1062 + 54) = 0u;
          v1747 = 0uLL;
          *((_BYTE *)v1062 + 880) = 0;
          v1710[361].i64[1] = (uint64_t)(v841 + 111);
          v854 = v1710 + 366;
        }
        else
        {
          v1658 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)&v842 - (_QWORD)v840) >> 3);
          v1727 = *(_OWORD *)oslog;
          memcpy(v1793, &oslog[16], sizeof(v1793));
          memcpy(v1842, &oslog[304], 0x120uLL);
          v1838 = v1811;
          v1839 = v1812;
          v1840 = v1813;
          v1841 = v1814;
          v1834 = v1807;
          v1835 = v1808;
          v1836 = v1809;
          v1837 = v1810;
          v1657 = v1738;
          v1832 = v1818;
          v1833 = v1819;
          v1830 = v1822;
          v1831 = v1817;
          v1828 = v1820;
          v1829 = v1821;
          v1726 = v1824;
          v1725 = v1823;
          v871 = v841 - 111;
          v872 = v841;
          v873 = v841 - 111;
          v1747 = 0uLL;
          if ((unint64_t)v841 >= 0x378)
          {
            do
            {
              *v872 = *v873;
              *(_OWORD *)(v872 + 1) = *(_OWORD *)(v873 + 1);
              memcpy(v872 + 3, v873 + 3, 0x120uLL);
              memcpy(v872 + 39, v873 + 39, 0x120uLL);
              v874 = *(_OWORD *)(v873 + 81);
              v876 = *(_OWORD *)(v873 + 75);
              v875 = *(_OWORD *)(v873 + 77);
              *(_OWORD *)(v872 + 79) = *(_OWORD *)(v873 + 79);
              *(_OWORD *)(v872 + 81) = v874;
              *(_OWORD *)(v872 + 75) = v876;
              *(_OWORD *)(v872 + 77) = v875;
              v877 = *(_OWORD *)(v873 + 89);
              v879 = *(_OWORD *)(v873 + 83);
              v878 = *(_OWORD *)(v873 + 85);
              *(_OWORD *)(v872 + 87) = *(_OWORD *)(v873 + 87);
              *(_OWORD *)(v872 + 89) = v877;
              *(_OWORD *)(v872 + 83) = v879;
              *(_OWORD *)(v872 + 85) = v878;
              *((_BYTE *)v872 + 728) = *((_BYTE *)v873 + 728);
              *((_OWORD *)v872 + 46) = *((_OWORD *)v873 + 46);
              v880 = *((_OWORD *)v873 + 49);
              v881 = *((_OWORD *)v873 + 47);
              *((_OWORD *)v872 + 48) = *((_OWORD *)v873 + 48);
              *((_OWORD *)v872 + 49) = v880;
              *((_OWORD *)v872 + 47) = v881;
              v882 = *((_OWORD *)v873 + 50);
              v883 = *((_OWORD *)v873 + 52);
              *((_OWORD *)v872 + 51) = *((_OWORD *)v873 + 51);
              *((_OWORD *)v872 + 52) = v883;
              *((_OWORD *)v872 + 50) = v882;
              v884 = v873[106];
              *((_BYTE *)v872 + 856) = *((_BYTE *)v873 + 856);
              v872[106] = v884;
              *((_OWORD *)v872 + 54) = *((_OWORD *)v873 + 54);
              *((_OWORD *)v873 + 54) = 0u;
              *((_BYTE *)v872 + 880) = *((_BYTE *)v873 + 880);
              v872 += 111;
              v873 += 111;
            }
            while (v873 < v841);
          }
          v1710[361].i64[1] = (uint64_t)v872;
          if (v841 != (_QWORD *)(*(_QWORD *)&v842 + 888))
          {
            do
            {
              v889 = v871 - 111;
              v890 = v841 - 111;
              *v890 = *(v871 - 111);
              *(_OWORD *)(v890 + 1) = *((_OWORD *)v871 - 55);
              memcpy(v841 - 108, v871 - 108, 0x120uLL);
              memcpy(v841 - 72, v871 - 72, 0x120uLL);
              v891 = *((_OWORD *)v871 - 12);
              v892 = *((_OWORD *)v871 - 11);
              v893 = *((_OWORD *)v871 - 13);
              *((_OWORD *)v841 - 14) = *((_OWORD *)v871 - 14);
              *((_OWORD *)v841 - 13) = v893;
              v894 = *((_OWORD *)v871 - 18);
              v895 = *((_OWORD *)v871 - 17);
              v896 = *((_OWORD *)v871 - 15);
              *((_OWORD *)v841 - 16) = *((_OWORD *)v871 - 16);
              *((_OWORD *)v841 - 15) = v896;
              *((_OWORD *)v841 - 18) = v894;
              *((_OWORD *)v841 - 17) = v895;
              *((_OWORD *)v841 - 12) = v891;
              *((_OWORD *)v841 - 11) = v892;
              *((_BYTE *)v841 - 160) = *((_BYTE *)v871 - 160);
              *(v841 - 19) = *(v871 - 19);
              *(v841 - 18) = *(v871 - 18);
              v897 = *(_OWORD *)(v871 - 13);
              v898 = *(_OWORD *)(v871 - 15);
              *(_OWORD *)(v841 - 17) = *(_OWORD *)(v871 - 17);
              *(_OWORD *)(v841 - 15) = v898;
              *(_OWORD *)(v841 - 13) = v897;
              v899 = *(_OWORD *)(v871 - 11);
              v900 = *(_OWORD *)(v871 - 9);
              *(_OWORD *)(v841 - 7) = *(_OWORD *)(v871 - 7);
              *(_OWORD *)(v841 - 9) = v900;
              *(_OWORD *)(v841 - 11) = v899;
              v901 = *(v871 - 5);
              *((_BYTE *)v841 - 32) = *((_BYTE *)v871 - 32);
              *(v841 - 5) = v901;
              v902 = *(_OWORD *)(v871 - 3);
              *(v871 - 3) = 0;
              *(v871 - 2) = 0;
              v903 = (std::__shared_weak_count *)*(v841 - 2);
              *(_OWORD *)(v841 - 3) = v902;
              if (v903)
              {
                v904 = (unint64_t *)&v903->__shared_owners_;
                do
                  v905 = __ldaxr(v904);
                while (__stlxr(v905 - 1, v904));
                if (!v905)
                {
                  ((void (*)(std::__shared_weak_count *))v903->__on_zero_shared)(v903);
                  std::__shared_weak_count::__release_weak(v903);
                }
              }
              *((_BYTE *)v841 - 8) = *((_BYTE *)v871 - 8);
              v841 -= 111;
              v871 -= 111;
            }
            while (v889 != *(_QWORD **)&v842);
          }
          **(_QWORD **)&v842 = v1704;
          v885 = &v1661[111 * v1658];
          *(_OWORD *)(v885 + 1) = v1727;
          memcpy(v885 + 3, v1793, 0x120uLL);
          memcpy(v885 + 39, v1842, 0x120uLL);
          *(_OWORD *)(v885 + 83) = v1838;
          *(_OWORD *)(v885 + 85) = v1839;
          *(_OWORD *)(v885 + 87) = v1840;
          *(__n128 *)(v885 + 89) = v1841;
          *(_OWORD *)(v885 + 75) = v1834;
          *(_OWORD *)(v885 + 77) = v1835;
          *(__n128 *)(v885 + 79) = v1836;
          *(__n128 *)(v885 + 81) = v1837;
          *((_BYTE *)v885 + 728) = 1;
          *((_OWORD *)v885 + 46) = v1657;
          *((_OWORD *)v885 + 47) = v1831;
          *((_OWORD *)v885 + 48) = v1832;
          *((_OWORD *)v885 + 49) = v1833;
          *((_OWORD *)v885 + 50) = v1828;
          *((_OWORD *)v885 + 51) = v1829;
          *((__n128 *)v885 + 52) = v1830;
          v885[106] = v1725;
          *((_BYTE *)v885 + 856) = v1726;
          v886 = (std::__shared_weak_count *)v885[109];
          *((_OWORD *)v885 + 54) = 0u;
          v854 = v1710 + 366;
          if (v886)
          {
            v887 = (unint64_t *)&v886->__shared_owners_;
            do
              v888 = __ldaxr(v887);
            while (__stlxr(v888 - 1, v887));
            if (!v888)
            {
              ((void (*)(std::__shared_weak_count *))v886->__on_zero_shared)(v886);
              std::__shared_weak_count::__release_weak(v886);
            }
          }
          LOBYTE(v1661[111 * v1658 + 110]) = 0;
          v850 = v1710;
        }
        goto LABEL_1392;
      }
      v1058 = 1 - 0x4E6A171024E6A171 * (v841 - v840);
      if (v1058 > 0x49CD42E2049CD4)
        sub_20E867F44();
      v1059 = 0xB195E8EFDB195E8FLL * ((uint64_t)(v870 - (_QWORD)v840) >> 3);
      if (2 * v1059 > v1058)
        v1058 = 2 * v1059;
      if (v1059 >= 0x24E6A171024E6ALL)
        v1060 = 0x49CD42E2049CD4;
      else
        v1060 = v1058;
      *(_QWORD *)&v1793[2].f64[0] = v1710[362].i64;
      if (v1060)
      {
        v1662 = *(_QWORD *)&v842 - (_QWORD)v840;
        if (v1060 > 0x49CD42E2049CD4)
          sub_20E877A38();
        v1061 = (char *)operator new(888 * v1060);
        v868 = v1662;
      }
      else
      {
        v1061 = 0;
      }
      *(_QWORD *)&v1072 = &v1061[888 * v869];
      *(_QWORD *)&v1793[0].f64[0] = v1061;
      v1793[0].f64[1] = v1072;
      v1793[1].f64[0] = v1072;
      *(_QWORD *)&v1793[1].f64[1] = &v1061[888 * v1060];
      if (v869 == v1060)
      {
        if (v868 < 1)
        {
          if (v1661 == *(_QWORD **)&v842)
            v1074 = 1;
          else
            v1074 = 2 * v869;
          if (v1074 > 0x49CD42E2049CD4)
            sub_20E877A38();
          v1075 = (char *)operator new(888 * v1074);
          *(_QWORD *)&v1072 = &v1075[888 * (v1074 >> 2)];
          *(_QWORD *)&v1793[0].f64[0] = v1075;
          v1793[0].f64[1] = v1072;
          *(_QWORD *)&v1793[1].f64[1] = &v1075[888 * v1074];
          if (v1061)
          {
            v1076 = &v1075[888 * (v1074 >> 2)];
            operator delete(v1061);
            v1072 = *(double *)&v1076;
          }
        }
        else
        {
          v1073 = v869 + 2;
          if (v869 >= -1)
            v1073 = v869 + 1;
          *(_QWORD *)&v1072 -= 888 * (v1073 >> 1);
          v1793[0].f64[1] = v1072;
        }
      }
      v1663 = v1072;
      **(_QWORD **)&v1072 = v1704;
      v1077 = (_OWORD *)(*(_QWORD *)&v1072 + 8);
      *(_OWORD *)(*(_QWORD *)&v1072 + 8) = *(_OWORD *)oslog;
      memcpy((void *)(*(_QWORD *)&v1072 + 24), &object[3], 0x120uLL);
      memcpy((void *)(*(_QWORD *)&v1663 + 312), &object[39], 0x120uLL);
      v1078 = *(_QWORD *)&v1663;
      v1079 = v1734;
      v1077[41] = v1733;
      v1077[42] = v1079;
      v1080 = v1736;
      v1077[43] = v1735;
      v1077[44] = v1080;
      v1081 = v1730;
      v1077[37] = v1729;
      v1077[38] = v1081;
      v1082 = v1732;
      v1077[39] = v1731;
      v1077[40] = v1082;
      *(_BYTE *)(*(_QWORD *)&v1663 + 728) = v1737;
      *(_OWORD *)(*(_QWORD *)&v1663 + 736) = v1738;
      v1083 = v1739;
      v1084 = v1741;
      *(_OWORD *)(*(_QWORD *)&v1663 + 768) = v1740;
      *(_OWORD *)(*(_QWORD *)&v1663 + 784) = v1084;
      *(_OWORD *)(*(_QWORD *)&v1663 + 752) = v1083;
      v1085 = v1742;
      v836 = v1744;
      *(_OWORD *)(*(_QWORD *)&v1663 + 816) = v1743;
      *(__n128 *)(*(_QWORD *)&v1663 + 832) = v836;
      *(_OWORD *)(*(_QWORD *)&v1663 + 800) = v1085;
      v1086 = v1745;
      *(_BYTE *)(*(_QWORD *)&v1663 + 856) = v1746;
      *(_QWORD *)(*(_QWORD *)&v1663 + 848) = v1086;
      *(_OWORD *)(*(_QWORD *)&v1663 + 864) = v1747;
      v1747 = 0uLL;
      *(_BYTE *)(*(_QWORD *)&v1663 + 880) = v1748;
      v1087 = *(_QWORD *)&v1663 + 888;
      *(_QWORD *)&v1793[1].f64[0] = *(_QWORD *)&v1663 + 888;
      v1088 = v1710[361].i64[0];
      if (v1088 != *(_QWORD *)&v842)
      {
        v1089 = 0;
        do
        {
          v1090 = v1078 + v1089;
          v1091 = *(_QWORD *)&v842 + v1089;
          *(_QWORD *)(v1078 + v1089 - 888) = *(_QWORD *)(*(_QWORD *)&v842 + v1089 - 888);
          *(_OWORD *)(v1078 + v1089 - 880) = *(_OWORD *)(*(_QWORD *)&v842 + v1089 - 880);
          memcpy((void *)(v1078 + v1089 - 864), (const void *)(*(_QWORD *)&v842 + v1089 - 864), 0x120uLL);
          memcpy((void *)(v1090 - 576), (const void *)(*(_QWORD *)&v842 + v1089 - 576), 0x120uLL);
          v1078 = *(_QWORD *)&v1663;
          v1092 = (_OWORD *)(v1090 - 288);
          v1093 = *(_OWORD *)(*(_QWORD *)&v842 + v1089 - 240);
          v1095 = *(_OWORD *)(*(_QWORD *)&v842 + v1089 - 288);
          v1094 = *(_OWORD *)(*(_QWORD *)&v842 + v1089 - 272);
          *(_OWORD *)(v1090 - 256) = *(_OWORD *)(*(_QWORD *)&v842 + v1089 - 256);
          *(_OWORD *)(v1090 - 240) = v1093;
          *v1092 = v1095;
          v1092[1] = v1094;
          v1096 = *(_OWORD *)(*(_QWORD *)&v842 + v1089 - 176);
          v837 = *(__n128 *)(*(_QWORD *)&v842 + v1089 - 224);
          v1097 = *(_OWORD *)(*(_QWORD *)&v842 + v1089 - 208);
          *(_OWORD *)(v1090 - 192) = *(_OWORD *)(*(_QWORD *)&v842 + v1089 - 192);
          *(_OWORD *)(v1090 - 176) = v1096;
          *(__n128 *)(v1090 - 224) = v837;
          *(_OWORD *)(v1090 - 208) = v1097;
          *(_BYTE *)(v1090 - 160) = *(_BYTE *)(*(_QWORD *)&v842 + v1089 - 160);
          *(_OWORD *)(v1090 - 152) = *(_OWORD *)(*(_QWORD *)&v842 + v1089 - 152);
          v1098 = *(_OWORD *)(*(_QWORD *)&v842 + v1089 - 120);
          v1099 = *(_OWORD *)(*(_QWORD *)&v842 + v1089 - 104);
          *(_OWORD *)(v1090 - 136) = *(_OWORD *)(*(_QWORD *)&v842 + v1089 - 136);
          *(_OWORD *)(v1090 - 104) = v1099;
          *(_OWORD *)(v1090 - 120) = v1098;
          v1100 = *(_OWORD *)(*(_QWORD *)&v842 + v1089 - 72);
          v1101 = *(_OWORD *)(*(_QWORD *)&v842 + v1089 - 88);
          v836 = *(__n128 *)(*(_QWORD *)&v842 + v1089 - 56);
          *(__n128 *)(v1090 - 56) = v836;
          *(_OWORD *)(v1090 - 88) = v1101;
          *(_OWORD *)(v1090 - 72) = v1100;
          v1102 = *(_QWORD *)(*(_QWORD *)&v842 + v1089 - 40);
          *(_BYTE *)(v1090 - 32) = *(_BYTE *)(*(_QWORD *)&v842 + v1089 - 32);
          *(_QWORD *)(v1090 - 40) = v1102;
          *(_OWORD *)(v1090 - 24) = *(_OWORD *)(*(_QWORD *)&v842 + v1089 - 24);
          *(_QWORD *)(v1091 - 24) = 0;
          *(_QWORD *)(v1091 - 16) = 0;
          *(_BYTE *)(v1090 - 8) = *(_BYTE *)(*(_QWORD *)&v842 + v1089 - 8);
          v1089 -= 888;
        }
        while (*(_QWORD *)&v842 + v1089 != v1088);
        v1078 = *(_QWORD *)&v1663 + v1089;
        v850 = v1710;
      }
      v1103 = v850[361].i64[1];
      if (v1103 != *(_QWORD *)&v842)
      {
        v1104 = v1078;
        do
        {
          *(_QWORD *)v1087 = **(_QWORD **)&v842;
          *(_OWORD *)(v1087 + 8) = *(_OWORD *)(*(_QWORD *)&v842 + 8);
          memcpy((void *)(v1087 + 24), (const void *)(*(_QWORD *)&v842 + 24), 0x120uLL);
          memcpy((void *)(v1087 + 312), (const void *)(*(_QWORD *)&v842 + 312), 0x120uLL);
          v1105 = *(_OWORD *)(*(_QWORD *)&v842 + 648);
          v1107 = *(_OWORD *)(*(_QWORD *)&v842 + 600);
          v1106 = *(_OWORD *)(*(_QWORD *)&v842 + 616);
          *(_OWORD *)(v1087 + 632) = *(_OWORD *)(*(_QWORD *)&v842 + 632);
          *(_OWORD *)(v1087 + 648) = v1105;
          *(_OWORD *)(v1087 + 600) = v1107;
          *(_OWORD *)(v1087 + 616) = v1106;
          v1108 = *(_OWORD *)(*(_QWORD *)&v842 + 712);
          v837 = *(__n128 *)(*(_QWORD *)&v842 + 664);
          v1109 = *(_OWORD *)(*(_QWORD *)&v842 + 680);
          *(_OWORD *)(v1087 + 696) = *(_OWORD *)(*(_QWORD *)&v842 + 696);
          *(_OWORD *)(v1087 + 712) = v1108;
          *(__n128 *)(v1087 + 664) = v837;
          *(_OWORD *)(v1087 + 680) = v1109;
          *(_BYTE *)(v1087 + 728) = *(_BYTE *)(*(_QWORD *)&v842 + 728);
          *(_OWORD *)(v1087 + 736) = *(_OWORD *)(*(_QWORD *)&v842 + 736);
          v1110 = *(_OWORD *)(*(_QWORD *)&v842 + 784);
          v1111 = *(_OWORD *)(*(_QWORD *)&v842 + 752);
          *(_OWORD *)(v1087 + 768) = *(_OWORD *)(*(_QWORD *)&v842 + 768);
          *(_OWORD *)(v1087 + 784) = v1110;
          *(_OWORD *)(v1087 + 752) = v1111;
          v1112 = *(_OWORD *)(*(_QWORD *)&v842 + 800);
          v836 = *(__n128 *)(*(_QWORD *)&v842 + 832);
          *(_OWORD *)(v1087 + 816) = *(_OWORD *)(*(_QWORD *)&v842 + 816);
          *(__n128 *)(v1087 + 832) = v836;
          *(_OWORD *)(v1087 + 800) = v1112;
          v1113 = *(_QWORD *)(*(_QWORD *)&v842 + 848);
          *(_BYTE *)(v1087 + 856) = *(_BYTE *)(*(_QWORD *)&v842 + 856);
          *(_QWORD *)(v1087 + 848) = v1113;
          *(_OWORD *)(v1087 + 864) = *(_OWORD *)(*(_QWORD *)&v842 + 864);
          *(_OWORD *)(*(_QWORD *)&v842 + 864) = 0u;
          *(_BYTE *)(v1087 + 880) = *(_BYTE *)(*(_QWORD *)&v842 + 880);
          v1087 += 888;
          *(_QWORD *)&v842 += 888;
        }
        while (*(_QWORD *)&v842 != v1103);
        v842 = *(double *)&v850[361].i64[1];
        v1078 = v1104;
      }
      v1114 = *(double *)v850[361].i64;
      v850[361].i64[0] = v1078;
      v850[361].i64[1] = v1087;
      v1115 = *(double *)v850[362].i64;
      v850[362].i64[0] = *(_QWORD *)&v1793[1].f64[1];
      v1793[1].f64[1] = v1115;
      v1793[0].f64[1] = v1114;
      v1793[0].f64[0] = v1114;
      if (*(_QWORD *)&v842 == *(_QWORD *)&v1114)
      {
        v854 = v1710 + 366;
        if (v842 == 0.0)
          goto LABEL_1392;
      }
      else
      {
        v854 = v1710 + 366;
        do
        {
          *(_QWORD *)&v1793[1].f64[0] = *(_QWORD *)&v842 - 888;
          v1116 = *(std::__shared_weak_count **)(*(_QWORD *)&v842 - 16);
          if (v1116)
          {
            v1117 = (unint64_t *)&v1116->__shared_owners_;
            do
              v1118 = __ldaxr(v1117);
            while (__stlxr(v1118 - 1, v1117));
            if (!v1118)
            {
              ((void (*)(std::__shared_weak_count *))v1116->__on_zero_shared)(v1116);
              std::__shared_weak_count::__release_weak(v1116);
            }
          }
          v842 = v1793[1].f64[0];
        }
        while (*(_QWORD *)&v1793[1].f64[0] != *(_QWORD *)&v1114);
        v842 = v1793[0].f64[0];
        if (!*(_QWORD *)&v1793[0].f64[0])
          goto LABEL_1392;
      }
      operator delete(*(void **)&v842);
LABEL_1392:
      v1119 = (std::__shared_weak_count *)*((_QWORD *)&v1747 + 1);
      if (*((_QWORD *)&v1747 + 1))
      {
        v1120 = (unint64_t *)(*((_QWORD *)&v1747 + 1) + 8);
        do
          v1121 = __ldaxr(v1120);
        while (__stlxr(v1121 - 1, v1120));
        if (!v1121)
        {
          ((void (*)(std::__shared_weak_count *))v1119->__on_zero_shared)(v1119);
          std::__shared_weak_count::__release_weak(v1119);
        }
      }
      goto LABEL_1397;
    }
    v1125 = 0;
LABEL_1413:
    sub_20E9BCAA8(v1125);
  }
LABEL_1414:
  v1126 = v1720;
  v1127 = v1720 + 23256;
  sub_20F626FF4(v1720 + 23256, (__int128 *)(v1720 + 528));
  v1128 = *(_OWORD *)(v1126 + 1272);
  *(_OWORD *)(v1126 + 24016) = *(_OWORD *)(v1126 + 1256);
  *(_OWORD *)(v1126 + 24032) = v1128;
  *(_OWORD *)(v1126 + 24048) = *(_OWORD *)(v1126 + 1288);
  kdebug_trace();
  kdebug_trace();
  v1129 = (uint64_t *)(v1126 + 23248);
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)(v1126 + 23248) + 16))(oslog, v1126 + 23248);
  v1130 = v1126 + 4760;
  (**(void (***)(float64x2_t *__return_ptr, uint64_t))(v1126 + 4760))(v1793, v1126 + 4760);
  if ((oslog[23] & 0x80000000) != 0)
  {
    sub_20E860C04(object, *(void **)oslog, *(unint64_t *)&oslog[8]);
  }
  else
  {
    *(_OWORD *)object = *(_OWORD *)oslog;
    object[2] = *(void **)&oslog[16];
  }
  v1131 = HIBYTE(v1793[1].f64[0]);
  if (SHIBYTE(v1793[1].f64[0]) < 0)
  {
    sub_20E860C04(&object[3], *(void **)&v1793[0].f64[0], *(unint64_t *)&v1793[0].f64[1]);
    v1131 = HIBYTE(v1793[1].f64[0]);
  }
  else
  {
    *(float64x2_t *)&object[3] = v1793[0];
    object[5] = *(void **)&v1793[1].f64[0];
  }
  object[6] = 0;
  LODWORD(object[7]) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&object[8] = _Q0;
  object[74] = &object[10];
  v1729 = xmmword_210378040;
  v1749 = &v1730;
  v1750 = 64;
  v1751 = 0u;
  v1753 = v1752;
  v1754 = 64;
  v1755 = 0;
  v1757 = 0;
  v1756 = 0;
  v1759 = v1758;
  v1760 = xmmword_210378040;
  if (v1131 < 0)
  {
    operator delete(*(void **)&v1793[0].f64[0]);
    if ((oslog[23] & 0x80000000) == 0)
      goto LABEL_1422;
  }
  else if ((oslog[23] & 0x80000000) == 0)
  {
    goto LABEL_1422;
  }
  operator delete(*(void **)oslog);
LABEL_1422:
  sub_20F2C3BE8(object, 6uLL, 8uLL);
  *(_QWORD *)&v1793[0].f64[0] = v1126 + 4760;
  *(_QWORD *)&v1793[0].f64[1] = object;
  v1133 = (*(double (**)(uint64_t))(*(_QWORD *)v1130 + 40))(v1126 + 4760);
  v1134 = *(_BYTE *)(v1126 + 6648);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v1126 + 23248) + 24))(v1126 + 23248))
  {
    *(_BYTE *)(v1126 + 6648) = 1;
    v1135 = (*(uint64_t (**)(uint64_t))(*v1129 + 40))(v1126 + 23248);
    v1136 = *v1129;
    if (v1135)
      (*(void (**)(uint64_t, double))(v1136 + 48))(v1126 + 23248, 0.0);
    else
      (*(void (**)(uint64_t))(v1136 + 56))(v1126 + 23248);
    (*(void (**)(uint64_t))(*v1129 + 32))(v1126 + 23248);
    (*(void (**)(uint64_t))(*(_QWORD *)v1130 + 104))(v1126 + 4760);
  }
  kdebug_trace();
  if (*(_BYTE *)(v1127 + 40))
  {
    v1137 = *(_QWORD *)(v1126 + 23840);
    if (!*(_BYTE *)(v1127 + 593))
    {
      if (v1137)
      {
        *(_QWORD *)oslog = *(_QWORD *)(v1126 + 23824);
        *(_DWORD *)&oslog[8] = 0;
        sub_20F772A64(v1126 + 4760, (double **)oslog, *(_BYTE *)(v1127 + 592));
      }
      else
      {
        sub_20F7722C8(v1126 + 4760, (double *)(v1126 + 23304), *(_BYTE *)(v1127 + 592));
      }
      goto LABEL_1457;
    }
    if (v1137)
    {
      v1138 = *(unsigned __int8 *)(v1127 + 592);
      sub_20F776964(v1126 + 4760, (double *)oslog, *(double **)(v1126 + 23824));
      v1139 = 1.0;
      v1140 = *(double *)oslog;
      v1141 = 1.0;
      if (!v1138)
      {
        if (*(double *)oslog <= 0.0)
        {
          v1141 = 1.0e20;
          v1139 = 1.0e-10;
        }
        else
        {
          v1139 = *(double *)oslog;
          v1141 = 1.0 / (*(double *)oslog * *(double *)oslog);
        }
      }
      *(double *)(v1126 + 4768) = v1139;
      *(double *)(v1126 + 4776) = v1141;
      *(double *)(v1126 + 4784) = v1139;
      *(double *)(v1126 + 4792) = v1141;
      *(double *)(v1126 + 4800) = v1139;
      *(double *)(v1126 + 4808) = v1141;
      *(double *)(v1126 + 4816) = v1139;
      *(double *)(v1126 + 4824) = v1141;
      if (v1140 <= 0.0)
      {
        v1144 = 1.0e20;
        v1140 = 1.0e-10;
LABEL_1454:
        *(double *)(v1126 + 4832) = v1140;
        *(double *)(v1126 + 4840) = v1144;
        if (v1138)
        {
          v1140 = 1.0;
          v1144 = 1.0;
        }
        *(double *)(v1126 + 4864) = v1140;
        *(double *)(v1126 + 4872) = v1144;
        *(_BYTE *)(v1126 + 6637) = 0;
        *(_DWORD *)(v1126 + 6632) = 0;
        goto LABEL_1457;
      }
    }
    else
    {
      v1138 = *(unsigned __int8 *)(v1127 + 592);
      sub_20F776964(v1126 + 4760, (double *)oslog, (double *)(v1126 + 23304));
      v1142 = 1.0;
      v1140 = *(double *)oslog;
      v1143 = 1.0;
      if (!v1138)
      {
        if (*(double *)oslog <= 0.0)
        {
          v1143 = 1.0e20;
          v1142 = 1.0e-10;
        }
        else
        {
          v1142 = *(double *)oslog;
          v1143 = 1.0 / (*(double *)oslog * *(double *)oslog);
        }
      }
      *(double *)(v1126 + 4768) = v1142;
      *(double *)(v1126 + 4776) = v1143;
      *(double *)(v1126 + 4784) = v1142;
      *(double *)(v1126 + 4792) = v1143;
      *(double *)(v1126 + 4800) = v1142;
      *(double *)(v1126 + 4808) = v1143;
      *(double *)(v1126 + 4816) = v1142;
      *(double *)(v1126 + 4824) = v1143;
      if (v1140 <= 0.0)
      {
        v1144 = 1.0e20;
        v1140 = 1.0e-10;
        goto LABEL_1454;
      }
    }
    v1144 = 1.0 / (v1140 * v1140);
    goto LABEL_1454;
  }
LABEL_1457:
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v1130 + 8))(v1126 + 4760))
  {
    sub_20F77322C((uint64_t)v1793);
    object[8] = COERCE_VOID_(sub_20F775808(v1126 + 4760, &object[10]));
    object[9] = object[8];
    *(void **)(v1126 + 23984) = object[8];
    v1148 = (__int128 *)object[74];
    v1149 = *((_QWORD *)&v1729 + 1);
    v1150 = 8 * *((_QWORD *)&v1729 + 1);
    *(_QWORD *)&v1751 = 0;
    v1151 = *((_QWORD *)&v1729 + 1) & 0x1FFFFFFFFFFFFFFFLL;
    if ((*((_QWORD *)&v1729 + 1) & 0x1FFFFFFFFFFFFFFFuLL) <= v1750)
    {
      if (!*((_QWORD *)&v1729 + 1))
        goto LABEL_1480;
      v1152 = v1749;
    }
    else
    {
      if (2 * v1750 > v1151)
        v1151 = 2 * v1750;
      v1750 = v1151;
      v1152 = (_OWORD *)operator new[]();
      if (v1749 != &v1730 && v1749)
        MEMORY[0x212BC6368]();
      v1749 = v1152;
      v1153 = v1751;
      if ((_QWORD)v1751)
      {
        *(_QWORD *)&v1751 = v1751 + v1149;
        memmove((char *)v1152 + 8 * v1149, v1152, 8 * v1153);
        memcpy(v1152, v1148, v1150);
LABEL_1480:
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*v1129 + 24))(v1126 + 23248))
        {
          if ((*(unsigned int (**)(uint64_t))(*v1129 + 40))(v1126 + 23248))
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1130 + 96))(v1126 + 4760);
            (*(void (**)(uint64_t))(*v1129 + 48))(v1126 + 23248);
          }
          else
          {
            (*(void (**)(uint64_t))(*v1129 + 56))(v1126 + 23248);
          }
          (*(void (**)(uint64_t))(*v1129 + 32))(v1126 + 23248);
          (*(void (**)(uint64_t))(*(_QWORD *)v1130 + 104))(v1126 + 4760);
        }
        v1163 = *(unsigned int *)(v1126 + 6688);
        v1147 = v1659;
        __sbc = (double **)(v1126 + 6672);
        if ((_DWORD)v1163)
        {
          v1164 = *(double **)(v1126 + 6672);
          v1165 = fabs(*v1164);
          if ((_DWORD)v1163 == 1)
          {
            jj = v1126 + 6632;
          }
          else
          {
            v1167 = v1164 + 1;
            v1168 = 8 * v1163 - 8;
            jj = v1126 + 6632;
            do
            {
              v1169 = *v1167++;
              v1170 = fabs(v1169);
              if (v1165 < v1170)
                v1165 = v1170;
              v1168 -= 8;
            }
            while (v1168);
          }
        }
        else
        {
          v1165 = 1.0;
          jj = v1126 + 6632;
        }
        if (v1165 < v1165 * *(double *)(v1126 + 23272))
        {
          if (*(_BYTE *)(v1127 + 8))
          {
            v1171 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
            std::ios_base::getloc((const std::ios_base *)((char *)v1171 + *(_QWORD *)(*v1171 - 24)));
            v1172 = std::locale::use_facet((const std::locale *)oslog, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v1172->__vftable[2].~facet_0)(v1172, 10);
            std::locale::~locale((std::locale *)oslog);
            std::ostream::put();
            std::ostream::flush();
            sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"[error][grad < gtol][", 21);
            v1173 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v1173, (uint64_t)"][", 2);
            if (v1165 == 0.0)
              sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
            else
              std::ostream::operator<<();
            sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
            v1259 = (_QWORD *)std::ostream::operator<<();
            v1260 = sub_20E86A980(v1259, (uint64_t)"]", 1);
            std::ios_base::getloc((const std::ios_base *)((char *)v1260 + *(_QWORD *)(*v1260 - 24)));
            v1261 = std::locale::use_facet((const std::locale *)oslog, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v1261->__vftable[2].~facet_0)(v1261, 10);
            std::locale::~locale((std::locale *)oslog);
            std::ostream::put();
            std::ostream::flush();
          }
          LODWORD(object[7]) = 1;
LABEL_1729:
          *(_BYTE *)(jj + 16) = v1134;
          goto LABEL_1730;
        }
        v1174 = *(double *)(v1126 + 23984);
        kdebug_trace();
        v1683 = v1134;
        v1711 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1130 + 24))(v1126 + 4760);
        v1175 = *(_QWORD *)(v1126 + 23912);
        if (v1175)
          (*(void (**)(uint64_t))(*(_QWORD *)v1175 + 48))(v1175);
        v1176 = LODWORD(object[6]);
        if (LODWORD(object[6]) >= *(_DWORD *)(v1127 + 4))
        {
LABEL_1727:
          object[9] = *(void **)(v1126 + 23984);
          v1371 = *(_QWORD *)(v1126 + 23880);
          v1134 = v1683;
          if (v1371)
            (*(void (**)(uint64_t))(*(_QWORD *)v1371 + 48))(v1371);
          goto LABEL_1729;
        }
        v1684 = (void *)(v1126 + 23992);
        v1177 = v1165;
        while (1)
        {
          v1178 = v1176 + 1;
          LODWORD(object[6]) = v1176 + 1;
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v1130 + 16))(v1126 + 4760, v1711))
          {
            if (*(_BYTE *)(v1127 + 8))
            {
              v1266 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Solve FAILED", 12);
              std::ios_base::getloc((const std::ios_base *)((char *)v1266 + *(_QWORD *)(*v1266 - 24)));
              v1267 = std::locale::use_facet((const std::locale *)oslog, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v1267->__vftable[2].~facet_0)(v1267, 10);
              std::locale::~locale((std::locale *)oslog);
              std::ostream::put();
              std::ostream::flush();
            }
            LODWORD(object[7]) = 0;
            goto LABEL_1727;
          }
          ++HIDWORD(object[6]);
          v1179 = *(unsigned int *)(v1711 + 16);
          if ((_DWORD)v1179)
          {
            v1180 = *(double **)v1711;
            v1181 = **(double **)v1711 * **(double **)v1711;
            if ((_DWORD)v1179 != 1)
            {
              v1182 = v1180 + 1;
              v1183 = (v1179 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
              if (v1183 < 3)
                goto LABEL_1508;
              v1184 = v1183 + 1;
              v1182 += v1184 & 0x3FFFFFFFFFFFFFFCLL;
              v1185 = (float64x2_t *)(v1180 + 3);
              v1186 = v1184 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v1187 = vmulq_f64(v1185[-1], v1185[-1]);
                v1188 = vmulq_f64(*v1185, *v1185);
                v1181 = v1181 + v1187.f64[0] + v1187.f64[1] + v1188.f64[0] + v1188.f64[1];
                v1185 += 2;
                v1186 -= 4;
              }
              while (v1186);
              if (v1184 != (v1184 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1508:
                v1189 = &v1180[v1179];
                do
                {
                  v1190 = *v1182++;
                  v1181 = v1181 + v1190 * v1190;
                }
                while (v1182 != v1189);
              }
            }
            v1191 = sqrt(v1181);
            if (v1176 < *(_DWORD *)v1127)
              goto LABEL_1518;
          }
          else
          {
            v1191 = sqrt(0.0);
            if (v1176 < *(_DWORD *)v1127)
              goto LABEL_1518;
          }
          v1192 = *(_QWORD *)(v1126 + 23976);
          if (v1192)
          {
            *(_DWORD *)oslog = *(_DWORD *)(v1711 + 16);
            *(_QWORD *)&oslog[8] = *(_QWORD *)v1711;
            *(_DWORD *)&oslog[16] = 0;
            v1842[0] = *(void **)&v1191;
            if (((*(uint64_t (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v1192 + 48))(v1192, v1842, oslog) & 1) != 0)
              goto LABEL_1654;
          }
          else if ((_DWORD)v1179 && v1191 < *(double *)(v1126 + 23280) * (v1133 + *(double *)(v1126 + 23280)))
          {
LABEL_1654:
            if (*(_BYTE *)(v1127 + 8))
            {
              v1278 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the parameters", 29);
              std::ios_base::getloc((const std::ios_base *)((char *)v1278 + *(_QWORD *)(*v1278 - 24)));
              v1279 = std::locale::use_facet((const std::locale *)oslog, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v1279->__vftable[2].~facet_0)(v1279, 10);
              std::locale::~locale((std::locale *)oslog);
              std::ostream::put();
              std::ostream::flush();
              (*(void (**)(uint64_t, uint64_t, double, double, double, double, double))(*v1129 + 64))(v1126 + 23248, v1176, v1174, v1191, v1177, v1165, v1133);
            }
            v1273 = 2;
            goto LABEL_1726;
          }
LABEL_1518:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1130 + 48))(v1126 + 4760, v1711);
          v1193 = *(_QWORD *)(v1126 + 23944);
          if (v1193)
            (*(void (**)(uint64_t))(*(_QWORD *)v1193 + 48))(v1193);
          if ((_QWORD)v1751)
            memcpy(oslog, v1749, 8 * v1751);
          v1174 = sub_20F775808(v1126 + 4760, &v1730);
          v1194 = *(unsigned int *)(v1126 + 6688);
          if (!(_DWORD)v1194)
          {
            v1177 = 1.0;
            if (!*(_BYTE *)(v1127 + 8))
              goto LABEL_1532;
LABEL_1531:
            (*(void (**)(uint64_t, uint64_t, double, double, double, double, double))(*v1129 + 64))(v1126 + 23248, v1176, v1174, v1191, v1177, v1165, v1133);
            goto LABEL_1532;
          }
          v1177 = fabs(**__sbc);
          if ((_DWORD)v1194 != 1)
          {
            v1195 = *__sbc + 1;
            v1196 = 8 * v1194 - 8;
            do
            {
              v1197 = *v1195++;
              v1198 = fabs(v1197);
              if (v1177 < v1198)
                v1177 = v1198;
              v1196 -= 8;
            }
            while (v1196);
          }
          if (*(_BYTE *)(v1127 + 8))
            goto LABEL_1531;
LABEL_1532:
          if (v1174 == 0.0)
          {
            if (*(_BYTE *)(v1127 + 8))
            {
              v1268 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
              v1269 = sub_20E86A980(v1268, (uint64_t)"N.A.", 4);
              std::ios_base::getloc((const std::ios_base *)((char *)v1269 + *(_QWORD *)(*v1269 - 24)));
              v1270 = std::locale::use_facet((const std::locale *)v1842, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v1270->__vftable[2].~facet_0)(v1270, 10);
              std::locale::~locale((std::locale *)v1842);
              std::ostream::put();
              goto LABEL_1643;
            }
LABEL_1644:
            *(double *)(v1126 + 23984) = v1174;
            v1273 = 3;
LABEL_1726:
            LODWORD(object[7]) = v1273;
            goto LABEL_1727;
          }
          if (vabdd_f64(v1174, *(double *)(v1126 + 23984)) < v1174 * *(double *)(v1126 + 23288)
            && v1176 >= *(_DWORD *)v1127)
          {
            if (*(_BYTE *)(v1127 + 8))
            {
              sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
              v1271 = (_QWORD *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v1271 + *(_QWORD *)(*v1271 - 24)));
              v1272 = std::locale::use_facet((const std::locale *)v1842, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v1272->__vftable[2].~facet_0)(v1272, 10);
              std::locale::~locale((std::locale *)v1842);
              std::ostream::put();
LABEL_1643:
              std::ostream::flush();
            }
            goto LABEL_1644;
          }
          if (*(_DWORD *)(v1126 + 6664))
          {
            (*(void (**)(uint64_t, void *))(*(_QWORD *)v1130 + 160))(v1126 + 4760, v1684);
            v1199 = (*(uint64_t (**)(uint64_t, uint64_t, double **, void *, double))(*v1129 + 80))(v1126 + 23248, v1711, __sbc, v1684, v1174);
          }
          else
          {
            v1199 = (*(uint64_t (**)(uint64_t, uint64_t, double **, double))(*v1129 + 72))(v1126 + 23248, v1711, __sbc, v1174);
          }
          if (!v1199)
          {
            --HIDWORD(object[6]);
            v1210 = *(_QWORD *)(v1126 + 4888);
            v1211 = *(_QWORD *)(v1126 + 4896);
            while (v1210 != v1211)
            {
              v1212 = *(_QWORD *)(v1210 + 8);
              if (*(_BYTE *)(v1212 + 20))
              {
                v1213 = *(_OWORD *)(v1212 + 200);
                v1214 = *(_OWORD *)(v1212 + 232);
                *(_OWORD *)(v1212 + 64) = *(_OWORD *)(v1212 + 216);
                *(_OWORD *)(v1212 + 80) = v1214;
                *(_QWORD *)(v1212 + 96) = *(_QWORD *)(v1212 + 248);
                *(_OWORD *)(v1212 + 32) = *(_OWORD *)(v1212 + 184);
                *(_OWORD *)(v1212 + 48) = v1213;
                *(_OWORD *)(v1212 + 104) = *(_OWORD *)(v1212 + 256);
                *(_QWORD *)(v1212 + 120) = *(_QWORD *)(v1212 + 272);
                *(_BYTE *)(v1212 + 128) = 0;
              }
              v1210 += 16;
            }
            v1215 = *(_QWORD *)(v1126 + 4984);
            v1216 = *(_QWORD *)(v1126 + 4992);
            while (v1215 != v1216)
            {
              v1217 = *(_QWORD *)(v1215 + 8);
              if (*(_BYTE *)(v1217 + 20))
              {
                v1218 = *(_OWORD *)(v1217 + 160);
                *(_OWORD *)(v1217 + 64) = *(_OWORD *)(v1217 + 144);
                *(_OWORD *)(v1217 + 80) = v1218;
                *(_QWORD *)(v1217 + 96) = *(_QWORD *)(v1217 + 176);
                v1219 = *(_OWORD *)(v1217 + 128);
                *(_OWORD *)(v1217 + 32) = *(_OWORD *)(v1217 + 112);
                *(_OWORD *)(v1217 + 48) = v1219;
                *(_BYTE *)(v1217 + 104) = 0;
              }
              v1215 += 16;
            }
            v1220 = *(_QWORD *)(v1126 + 5080);
            v1221 = *(_QWORD *)(v1126 + 5088);
            while (v1220 != v1221)
            {
              v1222 = *(_QWORD *)(v1220 + 8);
              if (*(_BYTE *)(v1222 + 20))
              {
                *(_QWORD *)(v1222 + 32) = *(_QWORD *)(v1222 + 48);
                *(_BYTE *)(v1222 + 40) = 0;
              }
              v1220 += 16;
            }
            v1223 = *(_QWORD *)(v1126 + 5176);
            v1224 = *(_QWORD *)(v1126 + 5184);
            while (v1223 != v1224)
            {
              v1225 = *(_QWORD *)(v1223 + 8);
              if (*(_BYTE *)(v1225 + 20))
              {
                v1226 = *(_OWORD *)(v1225 + 152);
                v1227 = *(_OWORD *)(v1225 + 184);
                *(_OWORD *)(v1225 + 64) = *(_OWORD *)(v1225 + 168);
                *(_OWORD *)(v1225 + 80) = v1227;
                *(_QWORD *)(v1225 + 96) = *(_QWORD *)(v1225 + 200);
                *(_OWORD *)(v1225 + 32) = *(_OWORD *)(v1225 + 136);
                *(_OWORD *)(v1225 + 48) = v1226;
                *(_OWORD *)(v1225 + 104) = *(_OWORD *)(v1225 + 208);
                *(_QWORD *)(v1225 + 120) = *(_QWORD *)(v1225 + 224);
              }
              v1223 += 16;
            }
            v1228 = *(_QWORD *)(v1126 + 5272);
            v1229 = *(_QWORD *)(v1126 + 5280);
            while (v1228 != v1229)
            {
              v1230 = *(_QWORD *)(v1228 + 8);
              if (*(_BYTE *)(v1230 + 20))
              {
                v1231 = v1230 + 16;
                v1232 = *(_OWORD *)(v1230 + 168);
                *(_OWORD *)(v1230 + 32) = *(_OWORD *)(v1230 + 152);
                *(_OWORD *)(v1230 + 48) = v1232;
                *(_QWORD *)(v1230 + 64) = *(_QWORD *)(v1230 + 184);
                *(_BYTE *)(v1230 + 72) = *(_BYTE *)(v1230 + 192);
                sub_20F6169C8(v1230 + 16);
                sub_20F616F2C(v1231);
              }
              v1228 += 16;
            }
            v1233 = *(_QWORD *)(v1126 + 5368);
            v1234 = *(_QWORD *)(v1126 + 5376);
            while (v1233 != v1234)
            {
              v1235 = *(_QWORD *)(v1233 + 8);
              if (*(_BYTE *)(v1235 + 20))
              {
                v1236 = *(_OWORD *)(v1235 + 504);
                *(_OWORD *)(v1235 + 192) = *(_OWORD *)(v1235 + 488);
                *(_OWORD *)(v1235 + 208) = v1236;
                v1237 = *(_OWORD *)(v1235 + 536);
                *(_OWORD *)(v1235 + 224) = *(_OWORD *)(v1235 + 520);
                *(_OWORD *)(v1235 + 240) = v1237;
                v1238 = *(_OWORD *)(v1235 + 440);
                *(_OWORD *)(v1235 + 128) = *(_OWORD *)(v1235 + 424);
                *(_OWORD *)(v1235 + 144) = v1238;
                v1239 = *(_OWORD *)(v1235 + 472);
                *(_OWORD *)(v1235 + 160) = *(_OWORD *)(v1235 + 456);
                *(_OWORD *)(v1235 + 176) = v1239;
                v1240 = *(_OWORD *)(v1235 + 376);
                *(_OWORD *)(v1235 + 64) = *(_OWORD *)(v1235 + 360);
                *(_OWORD *)(v1235 + 80) = v1240;
                v1241 = *(_OWORD *)(v1235 + 408);
                *(_OWORD *)(v1235 + 96) = *(_OWORD *)(v1235 + 392);
                *(_OWORD *)(v1235 + 112) = v1241;
                v1242 = *(__n128 *)(v1235 + 328);
                v1243 = *(_OWORD *)(v1235 + 344);
                *(__n128 *)(v1235 + 32) = v1242;
                *(_OWORD *)(v1235 + 48) = v1243;
                for (n = *(uint64_t ***)(v1235 + 296); n; n = (uint64_t **)*n)
                  v1242.n128_f64[0] = sub_20F6182A0((char *)n[5], (float64x2_t *)(v1235 + 32), v1242);
                sub_20F6178A8(v1235 + 16);
              }
              v1233 += 16;
            }
            v1245 = *(_QWORD *)(v1126 + 5464);
            for (ii = *(_QWORD *)(v1126 + 5472); v1245 != ii; v1245 += 16)
            {
              v1254 = *(_QWORD *)(v1245 + 8);
              if (*(_BYTE *)(v1254 + 20))
              {
                v1255 = *(_OWORD *)(v1254 + 224);
                *(_OWORD *)(v1254 + 64) = *(_OWORD *)(v1254 + 208);
                *(_OWORD *)(v1254 + 80) = v1255;
                *(_QWORD *)(v1254 + 96) = *(_QWORD *)(v1254 + 240);
                v1256 = *(_OWORD *)(v1254 + 192);
                *(_OWORD *)(v1254 + 32) = *(_OWORD *)(v1254 + 176);
                *(_OWORD *)(v1254 + 48) = v1256;
                sub_20F811C04(v1254 + 16);
              }
            }
            v1247 = *(_QWORD *)(v1126 + 5560);
            v1248 = *(_QWORD *)(v1126 + 5568);
            for (jj = v1126 + 6632; v1247 != v1248; v1247 += 16)
            {
              v1253 = *(_QWORD *)(v1247 + 8);
              if (*(_BYTE *)(v1253 + 20))
                *(_QWORD *)(v1253 + 32) = *(_QWORD *)(v1253 + 40);
            }
            *(_BYTE *)(v1126 + 6637) = 0;
            *(_BYTE *)(v1126 + 6632) = 0;
            *(_WORD *)(v1126 + 6635) = 0;
            *(_BYTE *)(v1126 + 6633) = *(_BYTE *)(v1126 + 6634);
            *(_QWORD *)&v1751 = 0;
            if (v1750 >= 6)
            {
              v1250 = v1749;
            }
            else
            {
              v1249 = 2 * v1750;
              if (2 * v1750 <= 6)
                v1249 = 6;
              v1750 = v1249;
              v1250 = (_OWORD *)operator new[]();
              if (v1749 != &v1730 && v1749)
                MEMORY[0x212BC6368]();
              v1749 = v1250;
              v1251 = v1751;
              if ((_QWORD)v1751)
              {
                *(_QWORD *)&v1751 = v1751 + 6;
                memmove(v1250 + 3, v1250, 8 * v1251);
                v1252 = *(_OWORD *)&oslog[16];
                *v1250 = *(_OWORD *)oslog;
                v1250[1] = v1252;
                v1250[2] = *(_OWORD *)&oslog[32];
                goto LABEL_1611;
              }
            }
            *v1250 = *(_OWORD *)oslog;
            v1250[1] = *(_OWORD *)&oslog[16];
            v1250[2] = *(_OWORD *)&oslog[32];
            *(_QWORD *)&v1751 = 6;
LABEL_1611:
            if ((*(unsigned int (**)(uint64_t))(*v1129 + 24))(v1126 + 23248))
            {
              (*(void (**)(uint64_t))(*v1129 + 32))(v1126 + 23248);
              (*(void (**)(uint64_t))(*(_QWORD *)v1130 + 104))(v1126 + 4760);
            }
LABEL_1613:
            v1257 = *(_DWORD *)(v1127 + 4);
            if (v1178 >= v1257)
              goto LABEL_1616;
            goto LABEL_1614;
          }
          if ((*(unsigned int (**)(uint64_t))(*v1129 + 24))(v1126 + 23248))
          {
            (*(void (**)(uint64_t))(*v1129 + 32))(v1126 + 23248);
            (*(void (**)(uint64_t))(*(_QWORD *)v1130 + 104))(v1126 + 4760);
          }
          if (v1177 < v1165 * *(double *)(v1126 + 23272) && v1176 >= *(_DWORD *)v1127)
          {
            if (*(_BYTE *)(v1127 + 8))
            {
              v1294 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
              v1147 = v1659;
              sub_20E8C81A0(v1294);
              (*(void (**)(uint64_t, uint64_t, double, double, double, double, double))(*v1129 + 64))(v1126 + 23248, v1176, v1174, v1191, v1177, v1165, v1133);
              v1273 = 1;
            }
            else
            {
              v1273 = 1;
              v1147 = v1659;
            }
            goto LABEL_1726;
          }
          if (v1178 >= *(_DWORD *)(v1127 + 4) || !*(_BYTE *)(v1127 + 40))
            goto LABEL_1613;
          v1200 = *(_QWORD *)(v1126 + 23840);
          if (*(_BYTE *)(v1127 + 593))
          {
            v1201 = (double *)(v1126 + 23304);
            if (v1200)
              v1201 = *(double **)(v1126 + 23824);
            v1202 = *(unsigned __int8 *)(v1127 + 592);
            sub_20F776964(v1126 + 4760, (double *)v1842, v1201);
            v1203 = 1.0;
            v1204 = v1842[0];
            v1205 = 1.0;
            if (!v1202)
            {
              v1203 = 1.0e-10;
              v1205 = 1.0e20;
              if (*(double *)v1842 > 0.0)
              {
                v1203 = *(double *)v1842;
                v1205 = 1.0 / (*(double *)v1842 * *(double *)v1842);
              }
            }
            *(double *)(v1126 + 4768) = v1203;
            *(double *)(v1126 + 4776) = v1205;
            *(double *)(v1126 + 4784) = v1203;
            *(double *)(v1126 + 4792) = v1205;
            *(double *)(v1126 + 4800) = v1203;
            *(double *)(v1126 + 4808) = v1205;
            *(double *)(v1126 + 4816) = v1203;
            v1206 = 1.0e-10;
            v1207 = 1.0e20;
            *(double *)(v1126 + 4824) = v1205;
            if (*(double *)&v1204 > 0.0)
            {
              v1206 = *(double *)&v1204;
              v1207 = 1.0 / (*(double *)&v1204 * *(double *)&v1204);
            }
            *(double *)(v1126 + 4832) = v1206;
            *(double *)(v1126 + 4840) = v1207;
            if (v1202)
              v1208 = 1.0;
            else
              v1208 = v1206;
            if (v1202)
              v1209 = 1.0;
            else
              v1209 = v1207;
            *(double *)(v1126 + 4864) = v1208;
            *(double *)(v1126 + 4872) = v1209;
            *(_BYTE *)(jj + 5) = 0;
            *(_DWORD *)(v1126 + 6632) = 0;
          }
          else if (v1200)
          {
            v1842[0] = *(void **)(v1126 + 23824);
            LODWORD(v1842[1]) = 0;
            sub_20F772A64(v1126 + 4760, (double **)v1842, *(_BYTE *)(v1127 + 592));
          }
          else
          {
            sub_20F7722C8(v1126 + 4760, (double *)(v1126 + 23304), *(_BYTE *)(v1127 + 592));
          }
          *(double *)(v1126 + 23984) = sub_20F775808(v1126 + 4760, &v1730);
          v1257 = *(_DWORD *)(v1127 + 4);
          if (v1178 >= v1257)
            goto LABEL_1616;
LABEL_1614:
          v1258 = *(_QWORD *)(v1126 + 23880);
          v1147 = v1659;
          if (v1258)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1258 + 48))(v1258);
            v1257 = *(_DWORD *)(v1127 + 4);
LABEL_1616:
            v1147 = v1659;
          }
          v1176 = LODWORD(object[6]);
          if (LODWORD(object[6]) >= v1257)
            goto LABEL_1727;
        }
      }
    }
    v1154 = 0;
    v1155 = (v1149 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v1155 < 3)
    {
      v1156 = (uint64_t *)v1148;
    }
    else
    {
      v1156 = (uint64_t *)v1148;
      if ((unint64_t)((char *)v1152 - (char *)v1148) >= 0x20)
      {
        v1157 = v1155 + 1;
        v1154 = v1157 & 0x3FFFFFFFFFFFFFFCLL;
        v1156 = (uint64_t *)v1148 + (v1157 & 0x3FFFFFFFFFFFFFFCLL);
        v1158 = v1152 + 1;
        v1159 = v1148 + 1;
        v1160 = v1157 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1161 = *v1159;
          *(v1158 - 1) = *(v1159 - 1);
          *v1158 = v1161;
          v1158 += 2;
          v1159 += 2;
          v1160 -= 4;
        }
        while (v1160);
        if (v1157 == v1154)
          goto LABEL_1479;
      }
    }
    do
    {
      v1162 = *v1156++;
      *((_QWORD *)v1152 + v1154++) = v1162;
    }
    while (v1156 != (uint64_t *)((char *)v1148 + v1150));
LABEL_1479:
    *(_QWORD *)&v1751 = v1154;
    goto LABEL_1480;
  }
  if (*(_BYTE *)(v1127 + 8))
  {
    v1145 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Linearize FAILED", 16);
    std::ios_base::getloc((const std::ios_base *)((char *)v1145 + *(_QWORD *)(*v1145 - 24)));
    v1146 = std::locale::use_facet((const std::locale *)oslog, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v1146->__vftable[2].~facet_0)(v1146, 10);
    std::locale::~locale((std::locale *)oslog);
    std::ostream::put();
    std::ostream::flush();
  }
  LODWORD(object[7]) = 0;
  *(_BYTE *)(v1126 + 6648) = v1134;
  sub_20F77322C((uint64_t)v1793);
  v1147 = v1659;
LABEL_1730:
  kdebug_trace();
  if (v1147)
  {
    oslog[23] = 12;
    strcpy(oslog, "OfflineMapBA");
    sub_20F4ACDC8((uint64_t)object, MEMORY[0x24BEDB318], (uint64_t)oslog);
    if ((oslog[23] & 0x80000000) != 0)
      operator delete(*(void **)oslog);
  }
  v1374 = (_QWORD *)v1720;
  v1375 = *(_QWORD *)(v1720 + 5176);
  v1376 = *(_QWORD *)(v1720 + 5184);
  while (v1375 != v1376)
  {
    v1377 = *(_QWORD *)(v1375 + 8);
    if (*(_BYTE *)(v1377 + 20))
    {
      v1378 = *(_QWORD *)(v1377 + 24);
      v1372.f64[0] = *(float64_t *)(v1377 + 48);
      v1379 = *(int64x2_t *)(v1377 + 32);
      _Q2.i64[0] = *(_QWORD *)(v1377 + 72);
      v1380 = *(int64x2_t *)(v1377 + 56);
      _D4 = *(double *)(v1377 + 96);
      _Q5 = *(float64x2_t *)(v1377 + 80);
      v1383 = (float64x2_t)vzip1q_s64(v1379, v1380);
      _Q3 = (float64x2_t)vzip2q_s64(v1379, v1380);
      v1385 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
      v1386 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
      v1387 = *(double *)(v1377 + 120);
      _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1383, *(double *)(v1377 + 104)), _Q3, *(float64x2_t *)(v1377 + 104), 1), (float64x2_t)vzip1q_s64((int64x2_t)v1372, _Q2), v1387);
      _D16 = *(_QWORD *)(v1377 + 112);
      __asm { FMLA            D3, D16, V5.D[1] }
      _Q3.f64[0] = _Q3.f64[0] + _D4 * v1387;
      v1390 = vnegq_f64(_Q21);
      v1391 = (int64x2_t)vextq_s8(v1386, v1385, 8uLL);
      v1392 = (float64x2_t)vzip1q_s64(v1379, v1391);
      v1393 = (float64x2_t)vzip2q_s64((int64x2_t)v1383, v1391);
      *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
      *(float64_t *)(v1378 + 16) = v1372.f64[0];
      *(float64x2_t *)v1378 = v1392;
      *(_QWORD *)(v1378 + 40) = _Q2.i64[0];
      *(float64x2_t *)(v1378 + 24) = v1393;
      *(double *)(v1378 + 64) = _D4;
      *(float64x2_t *)(v1378 + 48) = _Q5;
      _Q0 = vmulq_f64(v1372, v1390);
      __asm
      {
        FMLS            D0, D2, V21.D[1]
        FMLS            D0, D4, V3.D[0]
      }
      v1372 = vnegq_f64(_Q0);
      *(float64x2_t *)(v1378 + 72) = vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v1392, v1390.f64[0]), v1393, _Q21, 1), _Q5, _Q3.f64[0], 0));
      *(float64_t *)(v1378 + 88) = v1372.f64[0];
    }
    v1375 += 16;
  }
  v1395 = v1374[611];
  v1396 = v1374[612];
  while (v1395 != v1396)
  {
    v1397 = *(_QWORD *)(v1395 + 8);
    if (*(_BYTE *)(v1397 + 20))
    {
      v1398 = *(_QWORD *)(v1397 + 24);
      v1372.f64[0] = *(float64_t *)(v1397 + 48);
      v1399 = *(int64x2_t *)(v1397 + 32);
      _Q2.i64[0] = *(_QWORD *)(v1397 + 72);
      v1400 = *(int64x2_t *)(v1397 + 56);
      _D4 = *(double *)(v1397 + 96);
      _Q5 = *(float64x2_t *)(v1397 + 80);
      v1403 = (float64x2_t)vzip1q_s64(v1399, v1400);
      _Q3 = (float64x2_t)vzip2q_s64(v1399, v1400);
      v1405 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
      v1406 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
      v1407 = *(double *)(v1397 + 120);
      _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1403, *(double *)(v1397 + 104)), _Q3, *(float64x2_t *)(v1397 + 104), 1), (float64x2_t)vzip1q_s64((int64x2_t)v1372, _Q2), v1407);
      _D16 = *(_QWORD *)(v1397 + 112);
      __asm { FMLA            D3, D16, V5.D[1] }
      _Q3.f64[0] = _Q3.f64[0] + _D4 * v1407;
      v1410 = vnegq_f64(_Q21);
      v1411 = (int64x2_t)vextq_s8(v1406, v1405, 8uLL);
      v1412 = (float64x2_t)vzip1q_s64(v1399, v1411);
      v1413 = (float64x2_t)vzip2q_s64((int64x2_t)v1403, v1411);
      *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
      *(float64_t *)(v1398 + 16) = v1372.f64[0];
      *(float64x2_t *)v1398 = v1412;
      *(_QWORD *)(v1398 + 40) = _Q2.i64[0];
      *(float64x2_t *)(v1398 + 24) = v1413;
      *(double *)(v1398 + 64) = _D4;
      *(float64x2_t *)(v1398 + 48) = _Q5;
      _Q0 = vmulq_f64(v1372, v1410);
      __asm
      {
        FMLS            D0, D2, V21.D[1]
        FMLS            D0, D4, V3.D[0]
      }
      v1372 = vnegq_f64(_Q0);
      *(float64x2_t *)(v1398 + 72) = vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v1412, v1410.f64[0]), v1413, _Q21, 1), _Q5, _Q3.f64[0], 0));
      *(float64_t *)(v1398 + 88) = v1372.f64[0];
    }
    v1395 += 16;
  }
  v1415 = v1374[623];
  v1416 = v1374[624];
  while (v1415 != v1416)
  {
    v1417 = *(_QWORD *)(v1415 + 8);
    if (*(_BYTE *)(v1417 + 20))
    {
      v1418 = *(_QWORD *)(v1417 + 24);
      v1419 = *(_QWORD *)(v1417 + 96);
      v1420 = *(_OWORD *)(v1417 + 80);
      v1421 = *(_OWORD *)(v1417 + 32);
      v1422 = *(_OWORD *)(v1417 + 48);
      *(_OWORD *)(v1418 + 128) = *(_OWORD *)(v1417 + 64);
      *(_OWORD *)(v1418 + 144) = v1420;
      *(_QWORD *)(v1418 + 160) = v1419;
      *(_OWORD *)(v1418 + 96) = v1421;
      *(_OWORD *)(v1418 + 112) = v1422;
    }
    v1415 += 16;
  }
  v1423 = v1374[695];
  for (kk = v1374[696]; v1423 != kk; v1423 += 16)
  {
    v1425 = *(_QWORD *)(v1423 + 8);
    v1426 = *(_QWORD *)(v1425 + 24);
    if (v1426 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1426 + 24))(v1426) & 1) != 0
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 90, (uint64_t)"this->m_entity && this->m_entity->isSetup()", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v1429 = *(_QWORD *)(v1425 + 24);
      v1430 = *(uint64_t **)(v1429 + 96);
      v1427.f64[0] = *(float64_t *)(v1425 + 32);
      v1431 = *v1430;
      v1432 = (float64x2_t *)v1430[2];
      v1433 = v1430[4];
      v1434 = (float64x2_t *)v1430[6];
      v1428.f64[0] = *(float64_t *)(v1429 + 80);
      _Q2 = *(float64x2_t *)(v1429 + 64);
      *(_QWORD *)&v1436 = *(_OWORD *)&vmulq_f64(v1427, v1428);
      _Q0 = vmulq_n_f64(_Q2, v1427.f64[0]);
      _D4 = *(_QWORD *)(v1433 + 40);
      v1439 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1433, _Q0.f64[0]), *(float64x2_t *)(v1433 + 24), _Q0, 1), *(float64x2_t *)(v1433 + 48), v1436);
      __asm { FMLA            D2, D4, V0.D[1] }
      _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v1433 + 64), v1436);
      _Q0.f64[0] = v1434[1].f64[0];
      v1440 = vaddq_f64(_Q2, _Q0);
      _Q1 = vaddq_f64(v1439, *v1434);
      _D4 = *(_QWORD *)(v1431 + 40);
      v1443 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1431, _Q1.f64[0]), *(float64x2_t *)(v1431 + 24), _Q1, 1), *(float64x2_t *)(v1431 + 48), v1440.f64[0]);
      __asm { FMLA            D2, D4, V1.D[1] }
      _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v1431 + 64), v1440.f64[0]);
      v1440.f64[0] = v1432[1].f64[0];
      *(float64x2_t *)(v1429 + 8) = vaddq_f64(v1443, *v1432);
      *(_QWORD *)(v1429 + 24) = *(_OWORD *)&vaddq_f64(_Q2, v1440);
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1425 + 24) + 16))(*(_QWORD *)(v1425 + 24)) & 1) != 0
        || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 117, (uint64_t)"this->m_entity->update()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        continue;
      }
    }
    abort();
  }
  v1444 = v1374[635];
  for (mm = v1374[636]; v1444 != mm; v1444 += 16)
  {
    v1448 = *(_QWORD *)(v1444 + 8);
    if (*(_BYTE *)(v1448 + 20))
      **(_QWORD **)(v1448 + 24) = *(_QWORD *)(v1448 + 32);
  }
  v1446 = v1374[659];
  v1447 = v1374[660];
  while (v1446 != v1447)
  {
    v1449 = *(_QWORD *)(v1446 + 8);
    if (*(_BYTE *)(v1449 + 20))
    {
      v1450 = *(_QWORD *)(v1449 + 24);
      v1451 = *(_OWORD *)(v1449 + 48);
      *(_OWORD *)v1450 = *(_OWORD *)(v1449 + 32);
      *(_OWORD *)(v1450 + 16) = v1451;
      v1452 = *(_QWORD *)(v1449 + 64);
      *(_BYTE *)(v1450 + 40) = *(_BYTE *)(v1449 + 72);
      *(_QWORD *)(v1450 + 32) = v1452;
      sub_20F62E744(v1449 + 16);
      *(_QWORD *)(v1449 + 88) = *(_QWORD *)(v1449 + 80);
      if (*(_QWORD *)(v1449 + 128))
      {
        v1453 = *(_QWORD **)(v1449 + 120);
        if (v1453)
        {
          do
          {
            v1454 = (_QWORD *)*v1453;
            operator delete(v1453);
            v1453 = v1454;
          }
          while (v1454);
        }
        *(_QWORD *)(v1449 + 120) = 0;
        v1455 = *(_QWORD *)(v1449 + 112);
        if (v1455)
        {
          for (nn = 0; nn != v1455; ++nn)
            *(_QWORD *)(*(_QWORD *)(v1449 + 104) + 8 * nn) = 0;
        }
        *(_QWORD *)(v1449 + 128) = 0;
      }
    }
    v1446 += 16;
  }
  v1457 = v1374[671];
  v1458 = v1374[672];
  while (v1457 != v1458)
  {
    v1459 = *(_QWORD *)(v1457 + 8);
    if (*(_BYTE *)(v1459 + 20))
    {
      v1460 = *(_OWORD **)(v1459 + 24);
      v1461 = *(_OWORD *)(v1459 + 48);
      *v1460 = *(_OWORD *)(v1459 + 32);
      v1460[1] = v1461;
      v1462 = *(_OWORD *)(v1459 + 64);
      v1463 = *(_OWORD *)(v1459 + 80);
      v1464 = *(_OWORD *)(v1459 + 112);
      v1460[4] = *(_OWORD *)(v1459 + 96);
      v1460[5] = v1464;
      v1460[2] = v1462;
      v1460[3] = v1463;
      v1465 = *(_OWORD *)(v1459 + 128);
      v1466 = *(_OWORD *)(v1459 + 144);
      v1467 = *(_OWORD *)(v1459 + 176);
      v1460[8] = *(_OWORD *)(v1459 + 160);
      v1460[9] = v1467;
      v1460[6] = v1465;
      v1460[7] = v1466;
      v1468 = *(_OWORD *)(v1459 + 192);
      v1469 = *(_OWORD *)(v1459 + 208);
      v1470 = *(_OWORD *)(v1459 + 240);
      v1460[12] = *(_OWORD *)(v1459 + 224);
      v1460[13] = v1470;
      v1460[10] = v1468;
      v1460[11] = v1469;
      sub_20F62F34C(v1459 + 16);
      *(_QWORD *)(v1459 + 264) = *(_QWORD *)(v1459 + 256);
      if (*(_QWORD *)(v1459 + 304))
      {
        v1471 = *(_QWORD **)(v1459 + 296);
        if (v1471)
        {
          do
          {
            v1472 = (_QWORD *)*v1471;
            operator delete(v1471);
            v1471 = v1472;
          }
          while (v1472);
        }
        *(_QWORD *)(v1459 + 296) = 0;
        v1473 = *(_QWORD *)(v1459 + 288);
        if (v1473)
        {
          for (i1 = 0; i1 != v1473; ++i1)
            *(_QWORD *)(*(_QWORD *)(v1459 + 280) + 8 * i1) = 0;
        }
        *(_QWORD *)(v1459 + 304) = 0;
      }
    }
    v1457 += 16;
  }
  v1475 = v1374[683];
  v1476 = v1374[684];
  while (v1475 != v1476)
  {
    v1477 = *(_QWORD *)(v1475 + 8);
    if (*(_BYTE *)(v1477 + 20))
    {
      v1478 = *(_QWORD *)(v1477 + 24);
      *(_OWORD *)v1478 = *(_OWORD *)(v1477 + 32);
      v1479 = *(_OWORD *)(v1477 + 48);
      v1480 = *(_OWORD *)(v1477 + 64);
      v1481 = *(_OWORD *)(v1477 + 80);
      *(_QWORD *)(v1478 + 64) = *(_QWORD *)(v1477 + 96);
      *(_OWORD *)(v1478 + 32) = v1480;
      *(_OWORD *)(v1478 + 48) = v1481;
      *(_OWORD *)(v1478 + 16) = v1479;
      *(_QWORD *)(v1477 + 112) = *(_QWORD *)(v1477 + 104);
      if (*(_QWORD *)(v1477 + 152))
      {
        v1482 = *(_QWORD **)(v1477 + 144);
        if (v1482)
        {
          do
          {
            v1483 = (_QWORD *)*v1482;
            operator delete(v1482);
            v1482 = v1483;
          }
          while (v1483);
        }
        *(_QWORD *)(v1477 + 144) = 0;
        v1484 = *(_QWORD *)(v1477 + 136);
        if (v1484)
        {
          for (i2 = 0; i2 != v1484; ++i2)
            *(_QWORD *)(*(_QWORD *)(v1477 + 128) + 8 * i2) = 0;
        }
        *(_QWORD *)(v1477 + 152) = 0;
      }
    }
    v1475 += 16;
  }
  if ((*v1660)[2].__shared_weak_owners_)
  {
    v1486 = (*v1660)[2].__vftable[1].~__shared_weak_count_0;
    v1487 = atan2(-*((double *)v1486 + 5), *((long double *)v1486 + 8));
    v1488 = asin(*((long double *)v1486 + 2));
    v1489 = atan2(-*((double *)v1486 + 1), *(long double *)v1486);
    sub_20F49BBF8(&v1834);
    if (**(int **)(v1834 + 56) <= 2)
    {
      v1490 = *(unsigned __int8 *)(v1834 + 72);
      v1491 = sub_20E8C31DC(v1834, "OSLogSurrogateAppender", 1, 0);
      v1492 = v1491;
      if (v1490 || v1491)
      {
        *(_QWORD *)&v1793[0].f64[0] = &v1834;
        *(std::chrono::steady_clock::time_point *)&v1793[0].f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
        *(std::chrono::system_clock::time_point *)&v1793[1].f64[0] = (std::chrono::system_clock::time_point)std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v1793[1].f64[1]) = 2;
        *(_QWORD *)&v1793[2].f64[0] = "unknown file";
        LODWORD(v1793[2].f64[1]) = 288;
        v1793[4].f64[0] = 0.0;
        *(_QWORD *)&v1793[3].f64[0] = "unknown function";
        v1793[3].f64[1] = 0.0;
        v1493 = **(_QWORD **)&v1793[0].f64[0];
        v1494 = **(_QWORD **)&v1793[0].f64[0] + 16;
        if (*(char *)(**(_QWORD **)&v1793[0].f64[0] + 39) < 0)
        {
          v1496 = *(const char **)(v1493 + 16);
          v1495 = *(_QWORD *)(v1493 + 24);
          v1498 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v1498 & 1) != 0)
            goto LABEL_1805;
        }
        else
        {
          v1495 = *(unsigned __int8 *)(**(_QWORD **)&v1793[0].f64[0] + 39);
          v1496 = (const char *)(**(_QWORD **)&v1793[0].f64[0] + 16);
          v1497 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v1497 & 1) != 0)
            goto LABEL_1805;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)oslog);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)oslog);
          if (oslog[24] && (oslog[23] & 0x80000000) != 0)
            operator delete(*(void **)oslog);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_1805:
        if (byte_254A4A4F8[23] >= 0)
          v1499 = byte_254A4A4F8;
        else
          v1499 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v1500 = byte_254A4A4F8[23];
        else
          v1500 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)oslog = os_log_create(v1499, v1496);
        v1501 = &oslog[8];
        if (v1500 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v1500 >= 0x17)
        {
          v1502 = (v1500 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v1500 | 7) != 0x17)
            v1502 = v1500 | 7;
          v1503 = v1502 + 1;
          v1501 = operator new(v1502 + 1);
          *(_QWORD *)&oslog[24] = v1503 | 0x8000000000000000;
          *(_QWORD *)&oslog[8] = v1501;
          *(_QWORD *)&oslog[16] = v1500;
        }
        else
        {
          oslog[31] = v1500;
          if (!v1500)
          {
LABEL_1819:
            v1501[v1500] = 0;
            oslog[32] = 1;
            v1504 = &oslog[40];
            if (v1495 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v1495 >= 0x17)
            {
              v1506 = (v1495 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v1495 | 7) != 0x17)
                v1506 = v1495 | 7;
              v1507 = v1506 + 1;
              v1504 = operator new(v1506 + 1);
              v1505 = v1494;
              *(_QWORD *)&oslog[56] = v1507 | 0x8000000000000000;
              *(_QWORD *)&oslog[40] = v1504;
              *(_QWORD *)&oslog[48] = v1495;
            }
            else
            {
              v1505 = v1494;
              oslog[63] = v1495;
              if (!v1495)
                goto LABEL_1827;
            }
            memmove(v1504, v1496, v1495);
LABEL_1827:
            v1504[v1495] = 0;
            oslog[64] = 1;
            v1508 = *(NSObject **)oslog;
            if ((oslog[63] & 0x80000000) != 0)
              operator delete(*(void **)&oslog[40]);
            if (oslog[32] && (oslog[31] & 0x80000000) != 0)
              operator delete(*(void **)&oslog[8]);
            if (*(_QWORD *)oslog)
              os_release(*(void **)oslog);
            v1509 = v1487 * 57.2957795;
            v1510 = v1488 * 57.2957795;
            v1511 = v1489 * 57.2957795;
            if (v1492 && *(_QWORD *)(v1492 + 24))
            {
              v1512 = _os_log_pack_size();
              v1513 = (std::__shared_weak_count_vtbl *)operator new(v1512, (std::align_val_t)8uLL);
              v1514 = (std::__shared_weak_count *)operator new();
              v1515 = v1514;
              v1514->__shared_owners_ = 0;
              v1516 = (unint64_t *)&v1514->__shared_owners_;
              v1514->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v1514->__shared_weak_owners_ = 0;
              v1514[1].__vftable = v1513;
              *(_QWORD *)oslog = v1513;
              *(_QWORD *)&oslog[8] = v1513;
              *(_QWORD *)&oslog[16] = v1514;
              do
                v1517 = __ldxr(v1516);
              while (__stxr(v1517 + 1, v1516));
              memset(&oslog[24], 0, 24);
              do
                v1518 = __ldaxr(v1516);
              while (__stlxr(v1518 - 1, v1516));
              if (!v1518)
              {
                ((void (*)(std::__shared_weak_count *))v1514->__on_zero_shared)(v1514);
                std::__shared_weak_count::__release_weak(v1515);
              }
              v1519 = *(_QWORD *)oslog;
              v1520 = _os_log_pack_fill();
              *(_DWORD *)v1520 = 134218496;
              *(double *)(v1520 + 4) = v1509;
              *(_WORD *)(v1520 + 12) = 2048;
              *(double *)(v1520 + 14) = v1510;
              *(_WORD *)(v1520 + 22) = 2048;
              *(double *)(v1520 + 24) = v1511;
              v1521 = (char *)operator new();
              v1522 = *(unsigned __int8 *)(v1493 + 39);
              if ((v1522 & 0x80u) == 0)
                v1523 = v1505;
              else
                v1523 = *(_QWORD *)(v1493 + 16);
              if ((v1522 & 0x80u) != 0)
                v1522 = *(_QWORD *)(v1493 + 24);
              *(_QWORD *)v1521 = v1519;
              *(_OWORD *)(v1521 + 8) = *(_OWORD *)&oslog[8];
              *(_QWORD *)&oslog[8] = 0;
              *(_QWORD *)&oslog[16] = 0;
              *(_OWORD *)(v1521 + 24) = *(_OWORD *)&oslog[24];
              *(_QWORD *)&oslog[24] = 0;
              *(_QWORD *)&oslog[32] = 0;
              *((_QWORD *)v1521 + 5) = v1523;
              *((_QWORD *)v1521 + 6) = v1522;
              v1521[56] = 2;
              *(_QWORD *)&v1805[0] = 0;
              v1842[0] = v1521;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1492 + 24) + 40))(*(_QWORD *)(v1492 + 24), v1842);
              v1524 = v1842[0];
              v1842[0] = 0;
              if (v1524)
              {
                v1525 = (std::__shared_weak_count *)*((_QWORD *)v1524 + 4);
                if (v1525)
                {
                  v1526 = (unint64_t *)&v1525->__shared_owners_;
                  do
                    v1527 = __ldaxr(v1526);
                  while (__stlxr(v1527 - 1, v1526));
                  if (!v1527)
                  {
                    ((void (*)(std::__shared_weak_count *))v1525->__on_zero_shared)(v1525);
                    std::__shared_weak_count::__release_weak(v1525);
                  }
                }
                v1528 = (std::__shared_weak_count *)*((_QWORD *)v1524 + 2);
                if (v1528)
                {
                  v1529 = (unint64_t *)&v1528->__shared_owners_;
                  do
                    v1530 = __ldaxr(v1529);
                  while (__stlxr(v1530 - 1, v1529));
                  if (!v1530)
                  {
                    ((void (*)(std::__shared_weak_count *))v1528->__on_zero_shared)(v1528);
                    std::__shared_weak_count::__release_weak(v1528);
                  }
                }
                MEMORY[0x212BC6398](v1524, 0x10F0C40B62ED6C6);
                v1531 = *(_QWORD *)&v1805[0];
                *(_QWORD *)&v1805[0] = 0;
                if (v1531)
                {
                  v1532 = *(std::__shared_weak_count **)(v1531 + 32);
                  if (v1532)
                  {
                    v1533 = (unint64_t *)&v1532->__shared_owners_;
                    do
                      v1534 = __ldaxr(v1533);
                    while (__stlxr(v1534 - 1, v1533));
                    if (!v1534)
                    {
                      ((void (*)(std::__shared_weak_count *))v1532->__on_zero_shared)(v1532);
                      std::__shared_weak_count::__release_weak(v1532);
                    }
                  }
                  v1535 = *(std::__shared_weak_count **)(v1531 + 16);
                  if (v1535)
                  {
                    v1536 = (unint64_t *)&v1535->__shared_owners_;
                    do
                      v1537 = __ldaxr(v1536);
                    while (__stlxr(v1537 - 1, v1536));
                    if (!v1537)
                    {
                      ((void (*)(std::__shared_weak_count *))v1535->__on_zero_shared)(v1535);
                      std::__shared_weak_count::__release_weak(v1535);
                    }
                  }
                  MEMORY[0x212BC6398](v1531, 0x10F0C40B62ED6C6);
                }
              }
              v1538 = *(std::__shared_weak_count **)&oslog[32];
              if (*(_QWORD *)&oslog[32])
              {
                v1539 = (unint64_t *)(*(_QWORD *)&oslog[32] + 8);
                do
                  v1540 = __ldaxr(v1539);
                while (__stlxr(v1540 - 1, v1539));
                if (!v1540)
                {
                  ((void (*)(std::__shared_weak_count *))v1538->__on_zero_shared)(v1538);
                  std::__shared_weak_count::__release_weak(v1538);
                }
              }
              v1541 = *(std::__shared_weak_count **)&oslog[16];
              if (*(_QWORD *)&oslog[16])
              {
                v1542 = (unint64_t *)(*(_QWORD *)&oslog[16] + 8);
                do
                  v1543 = __ldaxr(v1542);
                while (__stlxr(v1543 - 1, v1542));
                if (!v1543)
                {
                  ((void (*)(std::__shared_weak_count *))v1541->__on_zero_shared)(v1541);
                  std::__shared_weak_count::__release_weak(v1541);
                }
              }
            }
            else
            {
              os_log_type_enabled(v1508, OS_LOG_TYPE_DEBUG);
              *(_DWORD *)oslog = 134218496;
              *(double *)&oslog[4] = v1509;
              *(_WORD *)&oslog[12] = 2048;
              *(double *)&oslog[14] = v1510;
              *(_WORD *)&oslog[22] = 2048;
              *(double *)&oslog[24] = v1511;
              v1544 = (void *)_os_log_send_and_compose_impl();
              if (v1544)
                free(v1544);
            }
            if (v1490)
            {
              sub_20E8C003C((uint64_t)v1793, "After optimize: Roll %f, pitch %f, Yaw %f", v1509, v1510, v1511);
              sub_20E863570((uint64_t)v1793);
            }
            sub_20E863570((uint64_t)v1793);
            v1545 = v1793[4].f64[0];
            if (*(_QWORD *)&v1793[4].f64[0])
            {
              v1546 = (unint64_t *)(*(_QWORD *)&v1793[4].f64[0] + 8);
              do
                v1547 = __ldaxr(v1546);
              while (__stlxr(v1547 - 1, v1546));
              if (!v1547)
              {
                (*(void (**)(float64_t))(**(_QWORD **)&v1545 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v1545));
                std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v1545);
              }
            }
            goto LABEL_1889;
          }
        }
        memmove(v1501, v1499, v1500);
        goto LABEL_1819;
      }
    }
  }
LABEL_1889:
  *((_QWORD *)&v1760 + 1) = 0;
  if (v1759 != v1758 && v1759 != 0)
    MEMORY[0x212BC6368]();
  v1755 = 0;
  if (v1753 != v1752 && v1753)
    MEMORY[0x212BC6368]();
  *(_QWORD *)&v1751 = 0;
  if (v1749 != &v1730 && v1749)
    MEMORY[0x212BC6368]();
  *((_QWORD *)&v1729 + 1) = 0;
  if (object[74] != &object[10] && object[74])
    MEMORY[0x212BC6368]();
  if (SHIBYTE(object[5]) < 0)
  {
    operator delete(object[3]);
    if ((SHIBYTE(object[2]) & 0x80000000) == 0)
    {
LABEL_1905:
      sub_20E8D1F68((uint64_t)&v1718, v1719[0]);
      v1549 = (_QWORD *)v1720;
      v1720 = 0;
      if (!v1549)
        goto LABEL_1907;
      goto LABEL_1906;
    }
  }
  else if ((SHIBYTE(object[2]) & 0x80000000) == 0)
  {
    goto LABEL_1905;
  }
  operator delete(object[0]);
  sub_20E8D1F68((uint64_t)&v1718, v1719[0]);
  v1549 = (_QWORD *)v1720;
  v1720 = 0;
  if (v1549)
  {
LABEL_1906:
    v1550 = sub_20F7307F4(v1549);
    MEMORY[0x212BC6398](v1550, 0x10F2C40DA2C9B81);
  }
LABEL_1907:
  if (v1787 < 0)
  {
    operator delete(v1786);
    if ((v1785 & 0x80000000) == 0)
    {
LABEL_1909:
      if ((v1783 & 0x80000000) == 0)
        goto LABEL_1910;
LABEL_1918:
      operator delete(v1782);
      v1551 = v1775;
      if (v1775 != v1774)
        goto LABEL_1911;
LABEL_1919:
      v1552 = 4;
      v1551 = v1774;
      goto LABEL_1920;
    }
  }
  else if ((v1785 & 0x80000000) == 0)
  {
    goto LABEL_1909;
  }
  operator delete(v1784);
  if (v1783 < 0)
    goto LABEL_1918;
LABEL_1910:
  v1551 = v1775;
  if (v1775 == v1774)
    goto LABEL_1919;
LABEL_1911:
  if (!v1551)
    goto LABEL_1921;
  v1552 = 5;
LABEL_1920:
  (*(void (**)(void))(*v1551 + 8 * v1552))();
LABEL_1921:
  v1553 = v1773;
  if (v1773 == v1772)
  {
    v1554 = 4;
    v1553 = v1772;
  }
  else
  {
    if (!v1773)
      goto LABEL_1926;
    v1554 = 5;
  }
  (*(void (**)(void))(*v1553 + 8 * v1554))();
LABEL_1926:
  v1555 = v1771;
  if (v1771 == v1770)
  {
    v1556 = 4;
    v1555 = v1770;
  }
  else
  {
    if (!v1771)
      goto LABEL_1931;
    v1556 = 5;
  }
  (*(void (**)(void))(*v1555 + 8 * v1556))();
LABEL_1931:
  v1557 = v1769;
  if (v1769 == v1768)
  {
    v1558 = 4;
    v1557 = v1768;
    goto LABEL_1935;
  }
  if (v1769)
  {
    v1558 = 5;
LABEL_1935:
    (*(void (**)(void))(*v1557 + 8 * v1558))();
  }
  v1767 = 0;
  result = (uint64_t)v1766;
  if (v1766 != &v1765 && v1766)
    return MEMORY[0x212BC6368]();
  return result;
}

void sub_20F48ED58(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x14D8]))
  {
    if (SLOBYTE(STACK[0x14D7]) < 0)
      operator delete((void *)STACK[0x14C0]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x11E8]);
  sub_20F2C524C((uint64_t)&STACK[0x2A0]);
  sub_20E8D1F68((uint64_t)&STACK[0x230], STACK[0x238]);
  sub_20F721ABC((_QWORD **)&STACK[0x248]);
  sub_20F6304A4((uint64_t)&STACK[0xB70]);
  _Unwind_Resume(a1);
}

uint64_t sub_20F48F75C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  double *v14;
  double *v15;
  double v16;
  double v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  double v21;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  size_t v28;
  const char *v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  const char *v32;
  size_t v33;
  void **v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  std::__shared_weak_count_vtbl *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  _OWORD *v76;
  void *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  int64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  int v87;
  _QWORD *v88;
  _QWORD *v89;
  char *v90;
  void **v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  unint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  void **v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  void *v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  void *v112;
  void *v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  double v117;
  double v118;
  double v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  size_t v125;
  const char *v126;
  unsigned __int8 v127;
  unsigned __int8 v128;
  const char *v129;
  size_t v130;
  void **v131;
  uint64_t v132;
  uint64_t v133;
  void **v134;
  uint64_t v135;
  uint64_t v136;
  NSObject *v137;
  double v138;
  double v139;
  double v140;
  size_t v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  void *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  void *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  _QWORD *v188;
  _QWORD *v189;
  char v190;
  char *v191;
  uint64_t v192;
  char *v193;
  uint64_t *v194;
  uint64_t v195;
  char *v196;
  char *v197;
  unint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  _BYTE *v205;
  _DWORD *v206;
  char *v207;
  int64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  _OWORD *v213;
  char *v214;
  uint64_t v215;
  __int128 v216;
  int v217;
  unint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  int v233;
  uint64_t *v234;
  const char *v235;
  _OWORD *v236;
  unsigned int v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  char *v248;
  char *v249;
  unint64_t v250;
  unint64_t v251;
  char *v252;
  char *v253;
  unsigned int v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  _QWORD *v275;
  _QWORD *v276;
  void *v277;
  _QWORD *v278;
  _QWORD *v279;
  char *v280;
  unint64_t v281;
  uint64_t v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  _BYTE *v290;
  unsigned int *v291;
  int64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  _OWORD *v297;
  char *v298;
  uint64_t v299;
  __int128 v300;
  unsigned int v301;
  __n128 v302;
  uint64_t **v303;
  uint64_t *v304;
  uint64_t *v305;
  __int128 *v306;
  unsigned __int8 v307;
  BOOL v308;
  uint64_t v309;
  uint64_t i;
  unsigned __int8 v311;
  __int128 v312;
  uint64_t v313;
  _QWORD *v314;
  _QWORD *v315;
  uint64_t v316;
  uint64_t j;
  void *v318;
  void *v319;
  unint64_t v320;
  void *v321;
  void *v322;
  unint64_t v323;
  _QWORD *v324;
  unint64_t v325;
  char *v326;
  _QWORD *v327;
  char *v328;
  _QWORD *v329;
  _QWORD *v330;
  _QWORD *v331;
  _QWORD *v332;
  void *v333;
  uint64_t v334;
  _QWORD *v335;
  _QWORD *v336;
  void *v337;
  _QWORD *v338;
  _QWORD *v339;
  uint64_t v340;
  uint64_t v341;
  unsigned int v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  unsigned int v346;
  unint64_t v347;
  unint64_t v348;
  uint64_t v349;
  unsigned int v350;
  uint64_t v352;
  int v353;
  uint64_t v354;
  uint64_t *v355;
  const char *v356;
  char *v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  char *v362;
  char *v363;
  char *v364;
  char *v365;
  __int128 v366;
  char *v367;
  _QWORD *v368;
  _QWORD *v369;
  uint64_t v370;
  uint64_t *v371;
  uint64_t *v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  int v379;
  char *v380;
  char *v381;
  unint64_t v382;
  unint64_t v383;
  char *v384;
  char *v385;
  unsigned int v386;
  int v387;
  void *v388;
  void *v389;
  void *v390;
  void *v391;
  void *v392;
  _QWORD *v393;
  unint64_t v394;
  _QWORD *v395;
  void *v396;
  int v397;
  unint64_t v398;
  char v399;
  unint64_t v400;
  char *v401;
  _QWORD *v402;
  _QWORD *v403;
  void *v404;
  _QWORD *v405;
  _QWORD *v406;
  void *v407;
  char *v408;
  unint64_t v409;
  uint64_t v410;
  char *v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  unint64_t v416;
  _BYTE *v417;
  _DWORD *v418;
  int64_t v419;
  unint64_t v420;
  uint64_t v421;
  uint64_t v422;
  char *v423;
  _OWORD *v424;
  char *v425;
  uint64_t v426;
  __int128 v427;
  int v428;
  uint64_t **v429;
  uint64_t *v430;
  uint64_t *v431;
  __int128 *v432;
  unsigned __int8 v433;
  BOOL v434;
  uint64_t v435;
  uint64_t k;
  unsigned __int8 v437;
  __int128 v438;
  uint64_t v439;
  uint64_t v440;
  _QWORD *v441;
  unint64_t v442;
  char *v443;
  _QWORD *v444;
  _QWORD *v445;
  _QWORD *v446;
  _QWORD *v447;
  _QWORD *v448;
  _QWORD *v449;
  void *v450;
  _QWORD *v451;
  _QWORD *v452;
  void *v453;
  uint64_t v454;
  uint64_t v455;
  unsigned int v456;
  uint64_t v457;
  uint64_t v458;
  unint64_t v459;
  unsigned int v460;
  unint64_t v461;
  unint64_t v462;
  uint64_t v463;
  unsigned int v464;
  BOOL v465;
  uint64_t v466;
  int v467;
  uint64_t v468;
  uint64_t *v469;
  char *v470;
  unint64_t v471;
  unint64_t v472;
  unint64_t v473;
  unint64_t v474;
  char *v475;
  char *v476;
  char *v477;
  char *v478;
  __int128 v479;
  _QWORD *v480;
  _QWORD *v481;
  _QWORD *v482;
  _QWORD *v483;
  _QWORD *v484;
  _QWORD *v485;
  uint64_t v486;
  unsigned int v487;
  char *v488;
  char *v489;
  uint64_t v490;
  unint64_t v491;
  unint64_t v492;
  char *v493;
  char *v494;
  unsigned int v495;
  uint64_t v496;
  int v497;
  void *v498;
  BOOL v504;
  uint64_t *v505;
  uint64_t v506;
  double *v507;
  uint64_t v508;
  double *v509;
  double v511;
  float64x2_t v514;
  double v516;
  double v517;
  double v519;
  _QWORD *v530;
  _QWORD *v531;
  uint64_t v532;
  int v533;
  _QWORD *v534;
  int64x2_t *v535;
  uint64_t v536;
  void **v537;
  int64_t v538;
  char *v539;
  double v540;
  unint64_t *v541;
  char *v542;
  double v543;
  int64x2_t v544;
  uint64_t v545;
  int64x2_t *v546;
  unint64_t v547;
  unint64_t v548;
  unint64_t v549;
  unint64_t v550;
  unint64_t v551;
  uint64_t v552;
  void **v553;
  char *v554;
  unint64_t v555;
  unsigned int v556;
  __int128 v557;
  __int128 v558;
  unint64_t v559;
  void **v560;
  uint64_t v561;
  unint64_t v562;
  void **v563;
  unint64_t v564;
  unint64_t *v565;
  unint64_t v566;
  void **v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  void **v573;
  uint64_t v574;
  unint64_t v575;
  unint64_t v576;
  void **v577;
  void **v578;
  unsigned int v579;
  void *v580;
  uint64_t v581;
  unint64_t v582;
  void **v583;
  void **v584;
  void **v585;
  __int128 v586;
  __int128 v587;
  void *v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  void *v594;
  void **v595;
  std::__shared_weak_count *v596;
  unint64_t *v597;
  unint64_t v598;
  void **v599;
  std::__shared_weak_count *v600;
  unint64_t *v601;
  unint64_t v602;
  void **v603;
  void **v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  std::__shared_weak_count *v610;
  unint64_t *v611;
  unint64_t v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  void *v617;
  __int128 v618;
  std::__shared_weak_count *v619;
  unint64_t *v620;
  unint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t *v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  int v633;
  int v634;
  char v635;
  std::__shared_weak_count *v636;
  unint64_t *v637;
  unint64_t v638;
  std::__shared_weak_count *v639;
  unint64_t *v640;
  unint64_t v641;
  int v642;
  std::__shared_weak_count *v643;
  unint64_t *v644;
  unint64_t v645;
  std::__shared_weak_count *v646;
  unint64_t *v647;
  unint64_t v648;
  uint64_t *v649;
  unint64_t v650;
  int64x2_t *v651;
  void *v652;
  void **v653;
  void **v654;
  void **v655;
  unint64_t v656;
  void **v657;
  unint64_t v658;
  unint64_t *v659;
  unint64_t v660;
  void **v661;
  char *v662;
  char *v663;
  int64x2_t *v664;
  unint64_t v665;
  unint64_t v666;
  unsigned int *v667;
  char *v668;
  unsigned int v669;
  void **v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  unint64_t v674;
  unint64_t v675;
  unsigned int *v676;
  _DWORD *v677;
  unsigned int v678;
  uint64_t v679;
  unint64_t v680;
  void **v681;
  void **v682;
  void **v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  void *v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  __int128 v693;
  __int128 v694;
  __int128 v695;
  __int128 v696;
  __int128 v697;
  __int128 v698;
  __int128 v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  __int128 v703;
  void *v704;
  unint64_t v705;
  void **v706;
  std::__shared_weak_count *v707;
  unint64_t *v708;
  unint64_t v709;
  void **v710;
  std::__shared_weak_count *v711;
  unint64_t *v712;
  unint64_t v713;
  void **v714;
  void **v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  __int128 v720;
  void *v721;
  __int128 v722;
  __int128 v723;
  __int128 v724;
  std::__shared_weak_count *v725;
  unint64_t *v726;
  unint64_t v727;
  __int128 v728;
  __int128 v729;
  __int128 v730;
  __int128 v731;
  __int128 v732;
  __int128 v733;
  __int128 v734;
  __int128 v735;
  __int128 v736;
  __int128 v737;
  __int128 v738;
  __int128 v739;
  void *v740;
  __int128 v741;
  std::__shared_weak_count *v742;
  unint64_t *v743;
  unint64_t v744;
  char v745;
  std::__shared_weak_count *v746;
  unint64_t *v747;
  unint64_t v748;
  std::__shared_weak_count *v749;
  unint64_t *v750;
  unint64_t v751;
  uint64_t *v752;
  unint64_t v753;
  std::__shared_weak_count *v754;
  unint64_t *v755;
  unint64_t v756;
  std::__shared_weak_count *v757;
  unint64_t *v758;
  unint64_t v759;
  uint64_t v760;
  uint64_t *v761;
  uint64_t v762;
  unint64_t v763;
  unint64_t v764;
  std::__shared_weak_count **v765;
  std::__shared_weak_count **v766;
  std::__shared_weak_count *v767;
  std::__shared_weak_count *v768;
  unint64_t v769;
  unint64_t shared_owners_low;
  BOOL v771;
  char v772;
  std::__shared_weak_count *v773;
  unint64_t v774;
  unint64_t v775;
  BOOL v776;
  char v777;
  char v778;
  std::__shared_weak_count *v779;
  std::__shared_weak_count *v780;
  uint64_t shared_weak_owners;
  std::__shared_weak_count *v782;
  std::__shared_weak_count_vtbl *v783;
  _BYTE *p_get_deleter;
  int get_deleter_low;
  uint64_t shared_owners;
  int v787;
  uint64_t *v788;
  uint64_t v789;
  std::__shared_weak_count_vtbl *v790;
  std::__shared_weak_count *v791;
  std::__shared_weak_count **v792;
  std::__shared_weak_count **v793;
  unint64_t v794;
  unint64_t v795;
  BOOL v796;
  char v797;
  char v798;
  std::__shared_weak_count *v799;
  std::__shared_weak_count *v800;
  uint64_t v801;
  std::__shared_weak_count *v802;
  std::__shared_weak_count_vtbl *v803;
  _BYTE *v804;
  int v805;
  uint64_t v806;
  int v807;
  uint64_t *v808;
  uint64_t v809;
  std::__shared_weak_count_vtbl *v810;
  std::__shared_weak_count *v811;
  uint64_t v812;
  uint64_t v813;
  __int128 v814;
  __n128 v815;
  __int128 v816;
  double v817;
  double v818;
  double v819;
  double v820;
  double v821;
  double v822;
  double v823;
  double v824;
  double v825;
  double v826;
  double v827;
  double v828;
  __n128 v829;
  double v830;
  __n128 v831;
  __n128 v832;
  __n128 v833;
  __n128 v834;
  __n128 v835;
  __n128 v836;
  __n128 v837;
  _QWORD *v838;
  _QWORD *v839;
  _QWORD *v840;
  unint64_t v841;
  _QWORD *v842;
  unint64_t v843;
  unint64_t *v844;
  unint64_t v845;
  _QWORD *v846;
  char v847;
  int64x2_t *v848;
  char *v849;
  char *v850;
  uint64_t v851;
  int64x2_t *v852;
  unint64_t v853;
  char *v854;
  unint64_t v855;
  unint64_t v856;
  unsigned int *v857;
  char *v858;
  unsigned int v859;
  uint64_t v860;
  unint64_t v861;
  unsigned int *v862;
  char *v863;
  unsigned int v864;
  uint64_t v865;
  uint64_t v866;
  int64_t v867;
  unint64_t v868;
  _QWORD *v869;
  _QWORD *v870;
  _QWORD *v871;
  __int128 v872;
  __int128 v873;
  __int128 v874;
  __int128 v875;
  __int128 v876;
  __int128 v877;
  __int128 v878;
  __int128 v879;
  __int128 v880;
  __int128 v881;
  uint64_t v882;
  char *v883;
  std::__shared_weak_count *v884;
  unint64_t *v885;
  unint64_t v886;
  _QWORD *v887;
  _QWORD *v888;
  __int128 v889;
  __int128 v890;
  __int128 v891;
  __int128 v892;
  __int128 v893;
  __int128 v894;
  __int128 v895;
  __int128 v896;
  __int128 v897;
  __int128 v898;
  uint64_t v899;
  __int128 v900;
  std::__shared_weak_count *v901;
  unint64_t *v902;
  unint64_t v903;
  std::__shared_weak_count *v904;
  unint64_t *v905;
  unint64_t v906;
  int v907;
  std::__shared_weak_count *v908;
  unint64_t *v909;
  unint64_t v910;
  uint64_t v911;
  void *v912;
  void *v913;
  std::ios_base *v914;
  char *v915;
  char *v916;
  char *v917;
  unint64_t v918;
  unint64_t v919;
  unsigned int *v920;
  char *v921;
  unsigned int v922;
  _QWORD *v923;
  _BYTE *v924;
  uint64_t v925;
  _QWORD *v926;
  _QWORD *v927;
  int v928;
  uint64_t v929;
  unint64_t v930;
  char *v931;
  unint64_t v932;
  unint64_t v933;
  unsigned int *v934;
  char *v935;
  unsigned int v936;
  unint64_t v937;
  unsigned int *v938;
  char *v939;
  unsigned int v940;
  uint64_t v941;
  _QWORD *v942;
  _BYTE *v943;
  uint64_t v944;
  _QWORD *v945;
  _QWORD *v946;
  _QWORD *v947;
  _QWORD *v948;
  const char *v949;
  uint64_t v950;
  _QWORD *v951;
  int v952;
  char *v953;
  char *v954;
  char *v955;
  uint64_t v956;
  uint64_t v957;
  _QWORD *v958;
  _BYTE *v959;
  uint64_t v960;
  _QWORD *v961;
  _QWORD *v962;
  unint64_t v963;
  unint64_t v964;
  unsigned int *v965;
  char *v966;
  unsigned int v967;
  unint64_t v968;
  unint64_t v969;
  unsigned int *v970;
  char *v971;
  unsigned int v972;
  uint64_t v973;
  _QWORD *v974;
  _BYTE *v975;
  uint64_t v976;
  _QWORD *v977;
  _QWORD *v978;
  _QWORD *v979;
  _QWORD *v980;
  const char *v981;
  uint64_t v982;
  _QWORD *v983;
  char *v984;
  char *v985;
  uint64_t v986;
  _QWORD *v987;
  _BYTE *v988;
  uint64_t v989;
  _QWORD *v990;
  _QWORD *v991;
  unint64_t v992;
  unint64_t v993;
  unint64_t *v994;
  unint64_t v995;
  char *v996;
  _QWORD *v997;
  _BYTE *v998;
  uint64_t v999;
  _QWORD *v1000;
  _QWORD *v1001;
  BOOL v1002;
  char v1003;
  size_t v1004;
  _BYTE *v1005;
  _QWORD *v1006;
  _BYTE *v1007;
  uint64_t v1008;
  _QWORD *v1009;
  _QWORD *v1010;
  _BYTE *v1011;
  void **v1012;
  void *v1013;
  uint64_t v1014;
  uint64_t v1015;
  char v1016;
  unint64_t v1017;
  _BYTE *v1018;
  size_t v1019;
  unint64_t v1020;
  size_t v1021;
  unint64_t v1022;
  char *v1023;
  BOOL v1024;
  uint64_t v1025;
  char *v1026;
  unint64_t v1027;
  uint64_t v1028;
  char *v1029;
  char *v1030;
  char *v1031;
  size_t v1032;
  size_t v1033;
  unint64_t v1034;
  __int128 *v1035;
  unint64_t v1036;
  size_t v1037;
  unint64_t v1038;
  __int128 *v1039;
  unint64_t v1040;
  uint64_t v1041;
  char *v1042;
  char *v1043;
  char *v1044;
  char *v1045;
  char *v1046;
  size_t v1047;
  void **v1048;
  uint64_t v1049;
  unsigned __int8 v1050;
  uint64_t v1051;
  uint64_t m;
  unsigned __int8 v1053;
  int v1054;
  uint64_t v1055;
  unint64_t v1056;
  unint64_t v1057;
  unint64_t v1058;
  char *v1059;
  _QWORD *v1060;
  __int128 v1061;
  __int128 v1062;
  __n128 v1063;
  __int128 v1064;
  __int128 v1065;
  __int128 v1066;
  __int128 v1067;
  __int128 v1068;
  unint64_t v1069;
  char *v1070;
  uint64_t v1071;
  unint64_t v1072;
  char *v1073;
  char *v1074;
  _OWORD *v1075;
  uint64_t v1076;
  __int128 v1077;
  __n128 v1078;
  __int128 v1079;
  __n128 v1080;
  __int128 v1081;
  __int128 v1082;
  __int128 v1083;
  unint64_t v1084;
  uint64_t v1085;
  _QWORD *v1086;
  uint64_t v1087;
  uint64_t v1088;
  char *v1089;
  _OWORD *v1090;
  __int128 v1091;
  __int128 v1092;
  __int128 v1093;
  __int128 v1094;
  __int128 v1095;
  __int128 v1096;
  __int128 v1097;
  __int128 v1098;
  __int128 v1099;
  uint64_t v1100;
  _QWORD *v1101;
  uint64_t v1102;
  __int128 v1103;
  __int128 v1104;
  __int128 v1105;
  __int128 v1106;
  __int128 v1107;
  __int128 v1108;
  __int128 v1109;
  __int128 v1110;
  uint64_t v1111;
  _QWORD *v1112;
  uint64_t v1113;
  std::__shared_weak_count *v1114;
  unint64_t *v1115;
  unint64_t v1116;
  std::__shared_weak_count *v1117;
  unint64_t *v1118;
  unint64_t v1119;
  std::__shared_weak_count *v1120;
  unint64_t *v1121;
  unint64_t v1122;
  std::__shared_weak_count *v1123;
  uint64_t v1124;
  uint64_t v1125;
  __int128 v1126;
  uint64_t *v1127;
  uint64_t v1128;
  char v1129;
  double v1131;
  char v1132;
  int v1133;
  uint64_t v1134;
  uint64_t v1135;
  int v1136;
  double v1137;
  double v1138;
  double v1139;
  double v1140;
  double v1141;
  double v1142;
  _QWORD *v1143;
  const std::locale::facet *v1144;
  int v1145;
  __int128 *v1146;
  uint64_t v1147;
  size_t v1148;
  unint64_t v1149;
  _OWORD *v1150;
  uint64_t v1151;
  uint64_t v1152;
  unint64_t v1153;
  uint64_t *v1154;
  unint64_t v1155;
  _OWORD *v1156;
  __int128 *v1157;
  uint64_t v1158;
  __int128 v1159;
  uint64_t v1160;
  double **v1161;
  uint64_t v1162;
  double v1163;
  uint64_t ii;
  double *v1165;
  uint64_t v1166;
  double v1167;
  double v1168;
  _QWORD *v1169;
  const std::locale::facet *v1170;
  _QWORD *v1171;
  double v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  double v1176;
  unsigned int v1177;
  uint64_t v1178;
  double *v1179;
  double v1180;
  double *v1181;
  unint64_t v1182;
  unint64_t v1183;
  float64x2_t *v1184;
  uint64_t v1185;
  float64x2_t v1186;
  float64x2_t v1187;
  double *v1188;
  double v1189;
  double v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  double *v1194;
  uint64_t v1195;
  double v1196;
  double v1197;
  int v1198;
  uint64_t v1199;
  double *v1200;
  int v1201;
  double v1202;
  void *v1203;
  double v1204;
  double v1205;
  double v1206;
  double v1207;
  double v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  __int128 v1212;
  __int128 v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  __int128 v1217;
  __int128 v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  __int128 v1225;
  __int128 v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  __int128 v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  __int128 v1234;
  __int128 v1235;
  __int128 v1236;
  __int128 v1237;
  __int128 v1238;
  __int128 v1239;
  __n128 v1240;
  __int128 v1241;
  uint64_t **v1242;
  float64x2_t *v1243;
  uint64_t v1244;
  uint64_t n;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  _OWORD *v1249;
  uint64_t v1250;
  __int128 v1251;
  uint64_t v1252;
  uint64_t v1253;
  __int128 v1254;
  __int128 v1255;
  unsigned int v1256;
  uint64_t v1257;
  _QWORD *v1258;
  _QWORD *v1259;
  const std::locale::facet *v1260;
  unint64_t v1261;
  unint64_t v1262;
  unint64_t v1263;
  char *v1264;
  _QWORD *v1265;
  const std::locale::facet *v1266;
  _QWORD *v1267;
  _QWORD *v1268;
  const std::locale::facet *v1269;
  _QWORD *v1270;
  const std::locale::facet *v1271;
  int v1272;
  unint64_t v1273;
  unint64_t v1274;
  unint64_t v1275;
  char *v1276;
  _QWORD *v1277;
  const std::locale::facet *v1278;
  char *v1279;
  __int128 v1280;
  __int128 v1281;
  void *v1282;
  void *v1283;
  __int128 v1284;
  __int128 v1285;
  __int128 v1286;
  __int128 v1287;
  void *v1288;
  char *v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  _QWORD *v1293;
  unint64_t v1294;
  char *v1295;
  __int128 v1296;
  __int128 v1297;
  __int128 v1298;
  __int128 v1299;
  __int128 v1300;
  __int128 v1301;
  void *v1302;
  char *v1303;
  void **v1304;
  uint64_t v1305;
  char *v1306;
  void **v1307;
  __int128 v1308;
  __int128 v1309;
  __int128 v1310;
  __int128 v1311;
  __int128 v1312;
  __int128 v1313;
  __int128 v1314;
  __int128 v1315;
  void *v1316;
  void **v1317;
  __int128 v1318;
  __int128 v1319;
  void *v1320;
  __int128 v1321;
  __int128 v1322;
  __int128 v1323;
  __int128 v1324;
  __int128 v1325;
  void *v1326;
  void **v1327;
  void *v1328;
  std::__shared_weak_count *v1329;
  unint64_t *v1330;
  unint64_t v1331;
  std::__shared_weak_count *v1332;
  unint64_t *v1333;
  unint64_t v1334;
  std::__shared_weak_count *v1335;
  unint64_t *v1336;
  unint64_t v1337;
  std::__shared_weak_count *v1338;
  unint64_t *v1339;
  unint64_t v1340;
  std::__shared_weak_count *v1341;
  unint64_t *v1342;
  unint64_t v1343;
  void **v1344;
  __int128 v1345;
  __int128 v1346;
  __int128 v1347;
  __int128 v1348;
  __int128 v1349;
  __int128 v1350;
  __int128 v1351;
  void *v1352;
  __int128 v1353;
  __int128 v1354;
  __int128 v1355;
  __int128 v1356;
  __int128 v1357;
  __int128 v1358;
  __int128 v1359;
  __int128 v1360;
  __int128 v1361;
  __int128 v1362;
  __int128 v1363;
  __int128 v1364;
  void *v1365;
  char *v1366;
  uint64_t v1367;
  uint64_t v1368;
  char *v1369;
  uint64_t v1370;
  float64x2_t v1371;
  _QWORD *v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  int64x2_t v1378;
  int64x2_t v1379;
  float64x2_t v1382;
  int8x16_t v1384;
  int8x16_t v1385;
  double v1386;
  float64x2_t v1389;
  int64x2_t v1390;
  float64x2_t v1391;
  float64x2_t v1392;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  int64x2_t v1398;
  int64x2_t v1399;
  float64x2_t v1402;
  int8x16_t v1404;
  int8x16_t v1405;
  double v1406;
  float64x2_t v1409;
  int64x2_t v1410;
  float64x2_t v1411;
  float64x2_t v1412;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  __int128 v1419;
  __int128 v1420;
  __int128 v1421;
  uint64_t v1422;
  uint64_t jj;
  uint64_t v1424;
  uint64_t v1425;
  float64x2_t v1426;
  float64x2_t v1427;
  uint64_t v1428;
  uint64_t *v1429;
  uint64_t v1430;
  float64x2_t *v1431;
  uint64_t v1432;
  float64x2_t *v1433;
  double v1435;
  float64x2_t v1438;
  float64x2_t v1439;
  float64x2_t v1442;
  uint64_t v1443;
  uint64_t kk;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  __int128 v1450;
  uint64_t v1451;
  _QWORD *v1452;
  _QWORD *v1453;
  uint64_t v1454;
  uint64_t mm;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  _OWORD *v1459;
  __int128 v1460;
  __int128 v1461;
  __int128 v1462;
  __int128 v1463;
  __int128 v1464;
  __int128 v1465;
  __int128 v1466;
  __int128 v1467;
  __int128 v1468;
  __int128 v1469;
  _QWORD *v1470;
  _QWORD *v1471;
  uint64_t v1472;
  uint64_t nn;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  __int128 v1478;
  __int128 v1479;
  __int128 v1480;
  _QWORD *v1481;
  _QWORD *v1482;
  uint64_t v1483;
  uint64_t i1;
  uint64_t v1485;
  double v1486;
  double v1487;
  double v1488;
  int v1489;
  unint64_t v1490;
  unint64_t v1491;
  uint64_t v1492;
  const char *v1493;
  size_t v1494;
  unsigned __int8 v1495;
  unsigned __int8 v1496;
  const char *v1497;
  size_t v1498;
  _BYTE *v1499;
  uint64_t v1500;
  uint64_t v1501;
  _BYTE *v1502;
  uint64_t v1503;
  uint64_t v1504;
  NSObject *v1505;
  double v1506;
  double v1507;
  double v1508;
  size_t v1509;
  std::__shared_weak_count_vtbl *v1510;
  std::__shared_weak_count *v1511;
  std::__shared_weak_count *v1512;
  unint64_t *v1513;
  unint64_t v1514;
  unint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  char *v1518;
  uint64_t v1519;
  const char *v1520;
  void *v1521;
  std::__shared_weak_count *v1522;
  unint64_t *v1523;
  unint64_t v1524;
  std::__shared_weak_count *v1525;
  unint64_t *v1526;
  unint64_t v1527;
  uint64_t v1528;
  std::__shared_weak_count *v1529;
  unint64_t *v1530;
  unint64_t v1531;
  std::__shared_weak_count *v1532;
  unint64_t *v1533;
  unint64_t v1534;
  std::__shared_weak_count *v1535;
  unint64_t *v1536;
  unint64_t v1537;
  std::__shared_weak_count *v1538;
  unint64_t *v1539;
  unint64_t v1540;
  void *v1541;
  std::__shared_weak_count *v1542;
  unint64_t *v1543;
  unint64_t v1544;
  _QWORD *v1546;
  _QWORD *v1547;
  _QWORD *v1548;
  uint64_t v1549;
  _QWORD *v1550;
  uint64_t v1551;
  _QWORD *v1552;
  uint64_t v1553;
  _QWORD *v1554;
  uint64_t v1555;
  uint64_t result;
  unint64_t v1557;
  char *v1558;
  __int128 v1559;
  __int128 v1560;
  __int128 v1561;
  __int128 v1562;
  __int128 v1563;
  __int128 v1564;
  __int128 v1565;
  __int128 v1566;
  __int128 v1567;
  __int128 v1568;
  __int128 v1569;
  __int128 v1570;
  __int128 v1571;
  __int128 v1572;
  __int128 v1573;
  void *v1574;
  void **v1575;
  void **v1576;
  void **v1577;
  char *v1578;
  void **v1579;
  __int128 v1580;
  __int128 v1581;
  __int128 v1582;
  __int128 v1583;
  __int128 v1584;
  uint64_t v1585;
  __int128 v1586;
  __int128 v1587;
  uint64_t v1588;
  unint64_t *v1589;
  unint64_t v1590;
  __int128 v1591;
  __int128 v1592;
  uint64_t v1593;
  __int128 v1594;
  __int128 v1595;
  __int128 v1596;
  __int128 v1597;
  __int128 v1598;
  __int128 v1599;
  __int128 v1600;
  __int128 v1601;
  __int128 v1602;
  uint64_t v1603;
  uint64_t v1604;
  unint64_t *v1605;
  unint64_t v1606;
  void **v1607;
  __int128 v1608;
  __int128 v1609;
  __int128 v1610;
  __int128 v1611;
  __int128 v1612;
  void *v1613;
  __int128 v1614;
  __int128 v1615;
  unint64_t *v1616;
  unint64_t *v1617;
  unint64_t v1618;
  __int128 v1619;
  __int128 v1620;
  __int128 v1621;
  __int128 v1622;
  __int128 v1623;
  __int128 v1624;
  __int128 v1625;
  __int128 v1626;
  __int128 v1627;
  __int128 v1628;
  __int128 v1629;
  __int128 v1630;
  void *v1631;
  unint64_t *v1632;
  unint64_t *v1633;
  unint64_t v1634;
  void **v1635;
  void *v1636;
  std::__shared_weak_count *v1637;
  unint64_t *v1638;
  unint64_t v1639;
  std::__shared_weak_count *v1640;
  unint64_t *v1641;
  unint64_t v1642;
  std::__shared_weak_count *v1643;
  unint64_t *v1644;
  unint64_t v1645;
  std::__shared_weak_count *v1646;
  unint64_t *v1647;
  unint64_t v1648;
  std::__shared_weak_count *v1649;
  unint64_t *v1650;
  unint64_t v1651;
  void **v1652;
  double v1653;
  __int128 v1654;
  unint64_t v1655;
  int v1656;
  uint64_t *v1657;
  _BYTE *v1658;
  char *v1659;
  char *v1660;
  void *v1661;
  void *v1662;
  void *v1663;
  uint64_t v1664;
  uint64_t v1665;
  void *v1666;
  void **v1667;
  uint64_t v1668;
  void *v1669;
  void **v1670;
  void *v1671;
  uint64_t v1672;
  void *v1673;
  void *v1674;
  uint64_t v1675;
  void *v1676;
  void *v1677;
  uint64_t v1678;
  _BYTE *v1679;
  void *v1680;
  _QWORD *v1681;
  char v1682;
  _QWORD *v1683;
  _BYTE *v1684;
  uint64_t v1685;
  uint64_t *v1686;
  uint64_t v1687;
  _QWORD *__sb;
  char __sba;
  uint64_t __sbb;
  int8x16_t v1691;
  uint64_t v1692;
  double **v1693;
  const char *v1694;
  int __dst;
  void *__dsta[2];
  void *__dstb;
  uint64_t v1698;
  _QWORD *v1699;
  int8x16_t v1700;
  char *v1701;
  char *v1702;
  int8x16_t v1703;
  void **v1704;
  __int128 v1705;
  unsigned int v1706;
  uint64_t v1707;
  _QWORD *v1708;
  uint64_t v1709;
  int8x16_t v1710;
  int64_t v1711;
  int64x2_t *v1712;
  void *v1713;
  std::__shared_weak_count **v1714;
  std::__shared_weak_count *v1715;
  uint64_t v1716;
  uint64_t v1717;
  std::__shared_weak_count *v1718;
  uint64_t *v1719;
  uint64_t v1720[2];
  uint64_t v1721;
  _QWORD v1722[3];
  std::__shared_weak_count *v1723;
  void *v1724;
  std::__shared_weak_count *v1725;
  unint64_t v1726;
  char v1727;
  __int128 v1728;
  void *object[75];
  __int128 v1730;
  __int128 v1731;
  __n128 v1732;
  __n128 v1733;
  __int128 v1734;
  __int128 v1735;
  __int128 v1736;
  __n128 v1737;
  char v1738;
  __int128 v1739;
  __int128 v1740;
  __int128 v1741;
  __int128 v1742;
  __int128 v1743;
  __int128 v1744;
  __n128 v1745;
  unint64_t v1746;
  char v1747;
  __int128 v1748;
  char v1749;
  void *v1750;
  unint64_t v1751;
  __int128 v1752;
  _BYTE v1753[512];
  _BYTE *v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  uint64_t v1758;
  _BYTE v1759[512];
  _BYTE *v1760;
  __int128 v1761;
  _DWORD v1762[2];
  char v1763;
  int64x2_t v1764;
  uint64_t v1765;
  uint64_t v1766;
  uint64_t *v1767;
  uint64_t v1768;
  _QWORD v1769[3];
  _QWORD *v1770;
  _BYTE v1771[24];
  _BYTE *v1772;
  _BYTE v1773[24];
  _BYTE *v1774;
  _BYTE v1775[24];
  _BYTE *v1776;
  uint64_t v1777;
  char v1778;
  char v1779;
  char v1780;
  char v1781;
  char v1782;
  void *v1783;
  char v1784;
  void *v1785;
  char v1786;
  void *v1787;
  char v1788;
  char v1789;
  char v1790;
  unsigned __int8 v1791;
  char v1792;
  int v1793;
  _BYTE v1794[296];
  int v1795;
  char v1796;
  __int128 v1797;
  __int128 v1798;
  __n128 v1799;
  __n128 v1800;
  __int128 v1801;
  __int128 v1802;
  __int128 v1803;
  __n128 v1804;
  _OWORD v1805[18];
  _BYTE oslog[592];
  __int128 v1807;
  __int128 v1808;
  __n128 v1809;
  __n128 v1810;
  __int128 v1811;
  __int128 v1812;
  __int128 v1813;
  __n128 v1814;
  char v1815;
  __int128 v1816;
  __int128 v1817;
  __int128 v1818;
  __int128 v1819;
  __int128 v1820;
  __int128 v1821;
  __n128 v1822;
  unint64_t v1823;
  char v1824;
  uint64_t v1825;
  std::__shared_weak_count *v1826;
  char v1827;
  __int128 v1828;
  __int128 v1829;
  __n128 v1830;
  __int128 v1831;
  __int128 v1832;
  __int128 v1833;
  __int128 v1834;
  __int128 v1835;
  __n128 v1836;
  __n128 v1837;
  __int128 v1838;
  __int128 v1839;
  __int128 v1840;
  __n128 v1841;
  void *v1842[40];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v1664 = v6;
  v8 = v7;
  v10 = v9;
  v11 = v1;
  v1842[37] = *(void **)MEMORY[0x24BDAC8D0];
  v1722[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v1722[1] = 0;
  sub_20F49BCEC((uint64_t)v1762);
  v1764 = vdupq_n_s64(0x3E45798EE2308C3AuLL);
  v12 = *(_QWORD *)(v11 + 16);
  v1762[0] = 1;
  v1762[1] = v12;
  v1763 = v3;
  v1765 = 0x3E45798EE2308C3ALL;
  v1777 = 0x3DDB7CDFD9D7BDBBLL;
  v1778 = *(_BYTE *)(v11 + 163);
  v1782 = *(_BYTE *)(v11 + 164);
  v1780 = *(_BYTE *)(v11 + 165);
  v1781 = *(_BYTE *)(v11 + 166);
  v1779 = *(_BYTE *)(v11 + 167);
  v1789 = *(_BYTE *)(v11 + 7);
  v1790 = 1;
  v1793 = *(_QWORD *)(v11 + 40);
  v1792 = *(_BYTE *)(v11 + 5);
  v1668 = v11;
  v13 = *(unsigned __int8 *)(v11 + 162);
  v1791 = *(_BYTE *)(v11 + 162);
  v1665 = v5;
  if (!v5
    && !v13
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/MapOptimizationUtil.cpp", 95, (uint64_t)"minimizer_parameters.use_IMU", 28, (uint64_t)"Offline BA not supported for vision-only SLAM", 45, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = (double *)v10[6];
  v15 = (double *)v10[7];
  v1657 = v8;
  v1656 = v3;
  if (v14 != v15)
  {
    __sb = v10;
    v16 = *v14;
    v17 = *(v15 - 7);
    memset(v1842, 0, 24);
    v18 = *(_QWORD **)(*v8 + 48);
    v19 = *v8 + 56;
    if (v18 == (_QWORD *)v19)
    {
      v20 = 0;
      v92 = (_QWORD *)v8[1];
      v94 = v92 + 1;
      v93 = (_QWORD *)*v92;
      if ((_QWORD *)*v92 == v92 + 1)
        goto LABEL_155;
      goto LABEL_144;
    }
    v20 = 0;
    v1698 = *v8 + 56;
    while (1)
    {
      v21 = *(double *)(v18[6] + 816);
      if (v21 >= v16 && v21 <= v17)
        goto LABEL_119;
      sub_20F49BBF8(&v1834);
      if (**(int **)(v1834 + 56) <= 4)
      {
        v23 = *(unsigned __int8 *)(v1834 + 72);
        v24 = sub_20E8C31DC(v1834, "OSLogSurrogateAppender", 1, 0);
        v25 = v24;
        _ZF = !v23 && v24 == 0;
        if (!_ZF)
          break;
      }
LABEL_103:
      v76 = v18 + 4;
      if (v20 >= v1842[2])
      {
        v78 = (char *)v1842[0];
        v79 = (v20 - (char *)v1842[0]) >> 4;
        v80 = v79 + 1;
        if ((unint64_t)(v79 + 1) >> 60)
          sub_20E867F44();
        v81 = (char *)v1842[2] - (char *)v1842[0];
        if (((char *)v1842[2] - (char *)v1842[0]) >> 3 > v80)
          v80 = v81 >> 3;
        if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0)
          v82 = 0xFFFFFFFFFFFFFFFLL;
        else
          v82 = v80;
        if (v82)
        {
          if (v82 >> 60)
            sub_20E877A38();
          v83 = (char *)operator new(16 * v82);
          v84 = &v83[16 * v79];
          *(_OWORD *)v84 = *v76;
          v85 = v84;
          if (v20 != v78)
            goto LABEL_114;
LABEL_126:
          v3 = v1656;
          v77 = v84 + 16;
          v1842[0] = v85;
          v1842[1] = v84 + 16;
          v1842[2] = &v83[16 * v82];
          if (!v20)
            goto LABEL_118;
        }
        else
        {
          v83 = 0;
          v84 = (char *)(16 * v79);
          *(_OWORD *)(16 * v79) = *v76;
          v85 = (char *)(16 * v79);
          if (v20 == v78)
            goto LABEL_126;
LABEL_114:
          v3 = v1656;
          do
          {
            v86 = *((_QWORD *)v20 - 2);
            v20 -= 16;
            v87 = *((_DWORD *)v20 + 2);
            *((_QWORD *)v85 - 2) = v86;
            v85 -= 16;
            *((_DWORD *)v85 + 2) = v87;
          }
          while (v20 != v78);
          v20 = (char *)v1842[0];
          v77 = v84 + 16;
          v1842[0] = v85;
          v1842[1] = v84 + 16;
          v1842[2] = &v83[16 * v82];
          if (!v20)
            goto LABEL_118;
        }
        operator delete(v20);
        goto LABEL_118;
      }
      *(_OWORD *)v20 = *v76;
      v77 = v20 + 16;
LABEL_118:
      v1842[1] = v77;
      v20 = (char *)v77;
LABEL_119:
      v88 = (_QWORD *)v18[1];
      if (v88)
      {
        do
        {
          v89 = v88;
          v88 = (_QWORD *)*v88;
        }
        while (v88);
      }
      else
      {
        do
        {
          v89 = (_QWORD *)v18[2];
          _ZF = *v89 == (_QWORD)v18;
          v18 = v89;
        }
        while (!_ZF);
      }
      v18 = v89;
      if (v89 == (_QWORD *)v19)
      {
        v90 = (char *)v1842[0];
        if (v1842[0] == v20)
        {
          v92 = (_QWORD *)v1657[1];
          v94 = v92 + 1;
          v93 = (_QWORD *)*v92;
          if ((_QWORD *)*v92 == v92 + 1)
            goto LABEL_155;
        }
        else
        {
          v91 = (void **)v1842[0];
          do
          {
            if ((sub_20F26F650(v1657, *v91, v91[1], 1u) & 1) == 0
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/MapOptimizationUtil.cpp", 114, (uint64_t)"ret", 3, (uint64_t)"Fail to remove state", 20, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v91 += 2;
          }
          while (v91 != (void **)v20);
          v20 = v90;
          v3 = v1656;
          v92 = (_QWORD *)v1657[1];
          v94 = v92 + 1;
          v93 = (_QWORD *)*v92;
          if ((_QWORD *)*v92 == v92 + 1)
          {
LABEL_155:
            if (v20)
            {
              v1842[1] = v20;
              operator delete(v20);
            }
            v10 = __sb;
            goto LABEL_158;
          }
        }
LABEL_144:
        v95 = *(_QWORD *)(v1668 + 40);
        do
        {
          if (v95 > (uint64_t)(*(_QWORD *)(v93[6] + 208) - *(_QWORD *)(v93[6] + 200)) >> 5)
          {
            v96 = sub_20F25F344(v92, v93 + 4);
          }
          else
          {
            v97 = (_QWORD *)v93[1];
            if (v97)
            {
              do
              {
                v96 = v97;
                v97 = (_QWORD *)*v97;
              }
              while (v97);
            }
            else
            {
              do
              {
                v96 = (_QWORD *)v93[2];
                _ZF = *v96 == (_QWORD)v93;
                v93 = v96;
              }
              while (!_ZF);
            }
          }
          v93 = v96;
        }
        while (v96 != v94);
        v20 = (char *)v1842[0];
        goto LABEL_155;
      }
    }
    *(_QWORD *)oslog = &v1834;
    *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
    *(_DWORD *)&oslog[24] = 4;
    *(_QWORD *)&oslog[32] = "unknown file";
    *(_DWORD *)&oslog[40] = 107;
    *(_QWORD *)&oslog[48] = "unknown function";
    *(_QWORD *)&oslog[56] = 0;
    *(_QWORD *)&oslog[64] = 0;
    v27 = **(_QWORD **)oslog;
    if (*(char *)(**(_QWORD **)oslog + 39) < 0)
    {
      v29 = *(const char **)(v27 + 16);
      v28 = *(_QWORD *)(v27 + 24);
      v1707 = **(_QWORD **)oslog + 16;
      v31 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v31 & 1) != 0)
        goto LABEL_21;
    }
    else
    {
      v28 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
      v29 = (const char *)(**(_QWORD **)oslog + 16);
      v1707 = (uint64_t)v29;
      v30 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v30 & 1) != 0)
        goto LABEL_21;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v1794);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v1794);
      if (v1794[24] && (v1794[23] & 0x80000000) != 0)
        operator delete(*(void **)v1794);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
      v3 = v1656;
    }
LABEL_21:
    if (byte_254A4A4F8[23] >= 0)
      v32 = byte_254A4A4F8;
    else
      v32 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v33 = byte_254A4A4F8[23];
    else
      v33 = *(_QWORD *)&byte_254A4A4F8[8];
    object[0] = os_log_create(v32, v29);
    if (v33 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v33 >= 0x17)
    {
      v35 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v33 | 7) != 0x17)
        v35 = v33 | 7;
      v36 = v35 + 1;
      v34 = (void **)operator new(v35 + 1);
      object[3] = (void *)(v36 | 0x8000000000000000);
      object[1] = v34;
      object[2] = (void *)v33;
      v3 = v1656;
    }
    else
    {
      HIBYTE(object[3]) = v33;
      v34 = &object[1];
      if (!v33)
      {
LABEL_35:
        *((_BYTE *)v34 + v33) = 0;
        LOBYTE(object[4]) = 1;
        if (v28 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        v19 = v1698;
        if (v28 >= 0x17)
        {
          v39 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v28 | 7) != 0x17)
            v39 = v28 | 7;
          v40 = v39 + 1;
          v37 = (void **)operator new(v39 + 1);
          object[7] = (void *)(v40 | 0x8000000000000000);
          object[5] = v37;
          object[6] = (void *)v28;
          v3 = v1656;
        }
        else
        {
          HIBYTE(object[7]) = v28;
          v37 = &object[5];
          if (!v28)
          {
            LOBYTE(object[5]) = 0;
            LOBYTE(object[8]) = 1;
            v38 = object[0];
            if ((SHIBYTE(object[7]) & 0x80000000) == 0)
              goto LABEL_39;
            goto LABEL_45;
          }
        }
        memmove(v37, v29, v28);
        *((_BYTE *)v37 + v28) = 0;
        LOBYTE(object[8]) = 1;
        v38 = object[0];
        if ((SHIBYTE(object[7]) & 0x80000000) == 0)
        {
LABEL_39:
          if (!LOBYTE(object[4]))
            goto LABEL_48;
          goto LABEL_46;
        }
LABEL_45:
        operator delete(object[5]);
        if (!LOBYTE(object[4]))
        {
LABEL_48:
          if (object[0])
            os_release(object[0]);
          if (v25 && *(_QWORD *)(v25 + 24))
          {
            v41 = _os_log_pack_size();
            v42 = (std::__shared_weak_count_vtbl *)operator new(v41, (std::align_val_t)8uLL);
            v43 = (std::__shared_weak_count *)operator new();
            v44 = v43;
            v43->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v43->__shared_owners_;
            v43->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v43->__shared_weak_owners_ = 0;
            v43[1].__vftable = v42;
            object[0] = v42;
            object[1] = v42;
            object[2] = v43;
            do
              v46 = __ldxr(p_shared_owners);
            while (__stxr(v46 + 1, p_shared_owners));
            memset(&object[3], 0, 24);
            do
              v47 = __ldaxr(p_shared_owners);
            while (__stlxr(v47 - 1, p_shared_owners));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v44);
            }
            v48 = object[0];
            *(_WORD *)_os_log_pack_fill() = 0;
            v49 = operator new();
            v50 = *(unsigned __int8 *)(v27 + 39);
            v51 = v1707;
            if ((v50 & 0x80u) != 0)
            {
              v51 = *(_QWORD *)(v27 + 16);
              v50 = *(_QWORD *)(v27 + 24);
            }
            *(_QWORD *)v49 = v48;
            *(_OWORD *)(v49 + 8) = *(_OWORD *)&object[1];
            object[1] = 0;
            object[2] = 0;
            *(_OWORD *)(v49 + 24) = *(_OWORD *)&object[3];
            object[3] = 0;
            object[4] = 0;
            *(_QWORD *)(v49 + 40) = v51;
            *(_QWORD *)(v49 + 48) = v50;
            *(_BYTE *)(v49 + 56) = 16;
            *(_QWORD *)&v1805[0] = 0;
            *(_QWORD *)v1794 = v49;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v25 + 24) + 40))(*(_QWORD *)(v25 + 24), v1794);
            v52 = *(_QWORD *)v1794;
            *(_QWORD *)v1794 = 0;
            if (v52)
            {
              v53 = *(std::__shared_weak_count **)(v52 + 32);
              if (v53)
              {
                v54 = (unint64_t *)&v53->__shared_owners_;
                do
                  v55 = __ldaxr(v54);
                while (__stlxr(v55 - 1, v54));
                if (!v55)
                {
                  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                  std::__shared_weak_count::__release_weak(v53);
                }
              }
              v56 = *(std::__shared_weak_count **)(v52 + 16);
              if (v56)
              {
                v57 = (unint64_t *)&v56->__shared_owners_;
                do
                  v58 = __ldaxr(v57);
                while (__stlxr(v58 - 1, v57));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                  std::__shared_weak_count::__release_weak(v56);
                }
              }
              MEMORY[0x212BC6398](v52, 0x10F0C40B62ED6C6);
              v59 = *(_QWORD *)&v1805[0];
              *(_QWORD *)&v1805[0] = 0;
              if (v59)
              {
                v60 = *(std::__shared_weak_count **)(v59 + 32);
                if (v60)
                {
                  v61 = (unint64_t *)&v60->__shared_owners_;
                  do
                    v62 = __ldaxr(v61);
                  while (__stlxr(v62 - 1, v61));
                  if (!v62)
                  {
                    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                    std::__shared_weak_count::__release_weak(v60);
                  }
                }
                v63 = *(std::__shared_weak_count **)(v59 + 16);
                if (v63)
                {
                  v64 = (unint64_t *)&v63->__shared_owners_;
                  do
                    v65 = __ldaxr(v64);
                  while (__stlxr(v65 - 1, v64));
                  if (!v65)
                  {
                    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                    std::__shared_weak_count::__release_weak(v63);
                  }
                }
                MEMORY[0x212BC6398](v59, 0x10F0C40B62ED6C6);
              }
            }
            v66 = (std::__shared_weak_count *)object[4];
            if (object[4])
            {
              v67 = (unint64_t *)((char *)object[4] + 8);
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
            v69 = (std::__shared_weak_count *)object[2];
            if (object[2])
            {
              v70 = (unint64_t *)((char *)object[2] + 8);
              do
                v71 = __ldaxr(v70);
              while (__stlxr(v71 - 1, v70));
              if (!v71)
              {
                ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                std::__shared_weak_count::__release_weak(v69);
              }
            }
          }
          else
          {
            os_log_type_enabled(v38, OS_LOG_TYPE_ERROR);
            LOWORD(object[0]) = 0;
            LODWORD(v1653) = 2;
            v1652 = object;
            v72 = (void *)_os_log_send_and_compose_impl();
            if (v72)
              free(v72);
          }
          if (v23)
          {
            sub_20E8C003C((uint64_t)oslog, "IMU buffer does not cover the map-database. Please check the IMUdata");
            sub_20E863570((uint64_t)oslog);
          }
          sub_20E863570((uint64_t)oslog);
          v73 = *(std::__shared_weak_count **)&oslog[64];
          if (*(_QWORD *)&oslog[64])
          {
            v74 = (unint64_t *)(*(_QWORD *)&oslog[64] + 8);
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          v20 = (char *)v1842[1];
          goto LABEL_103;
        }
LABEL_46:
        if (SHIBYTE(object[3]) < 0)
          operator delete(object[1]);
        goto LABEL_48;
      }
    }
    memmove(v34, v32, v33);
    goto LABEL_35;
  }
LABEL_158:
  v1721 = 0;
  if (v3)
  {
    object[0] = &off_24CA028A0;
    object[1] = v1722;
    object[2] = &v1721;
    object[3] = object;
    sub_20EDB40D8(object, v1769);
    v99 = (void **)object[3];
    if (object[3] == object)
    {
      v100 = 4;
      v99 = object;
    }
    else
    {
      if (!object[3])
        goto LABEL_164;
      v100 = 5;
    }
    (*((void (**)(void **, uint64_t))*v99 + v100))(v99, v98);
  }
LABEL_164:
  if (*(unsigned __int8 *)(v1668 + 165) | *(unsigned __int8 *)(v1668 + 166))
  {
    v106 = v1657[5];
    v107 = v1657[6];
    while (v106 != v107)
    {
      if (!*(_QWORD *)(*(_QWORD *)v106 + 32))
      {
        v108 = *(_QWORD *)(*(_QWORD *)v106 + 24);
        v109 = operator new();
        sub_20E972DB4(v109, v108);
        memcpy((void *)(v109 + 1000), (const void *)(v108 + 1000), 0x1B8uLL);
        v110 = (uint64_t *)(*(_QWORD *)v106 + 32);
        v111 = *v110;
        object[0] = 0;
        *v110 = v109;
        if (v111)
        {
          sub_20E8E931C((uint64_t)v110, v111);
          v112 = object[0];
          object[0] = 0;
          if (v112)
            sub_20E8E931C((uint64_t)object, (uint64_t)v112);
        }
      }
      v106 += 16;
    }
  }
  v101 = v1657;
  v102 = *v1657;
  v103 = (void *)(*v1657 + 72);
  v1720[1] = 0;
  v1720[0] = 0;
  v1719 = v1720;
  if (v1792)
  {
    v104 = (void *)v1657[1];
    object[0] = 0;
    object[1] = (void *)v102;
    memset(&object[3], 0, 72);
    object[2] = v104;
    object[12] = v103;
    object[13] = (void *)(v102 + 80);
    object[15] = 0;
    object[14] = 0;
    object[16] = v1657 + 5;
    object[17] = v1657 + 10;
  }
  else
  {
    v113 = (void *)v1657[1];
    object[0] = (void *)v1657[8];
    object[1] = (void *)v102;
    memset(&object[3], 0, 72);
    object[2] = v113;
    object[12] = v103;
    object[13] = (void *)(v102 + 80);
    object[14] = 0;
    object[15] = v10;
    object[16] = v1657 + 5;
    object[17] = 0;
  }
  v105 = operator new();
  sub_20F784DEC((uint64_t *)v105, (__int128 *)object, (uint64_t)v1762);
  *(_QWORD *)(v105 + 23232) = *(_QWORD *)(v105 + 2160);
  *(_DWORD *)(v105 + 6644) = 1;
  v114 = (_QWORD *)v1721;
  v1721 = v105;
  if (v114)
  {
    v115 = sub_20F7859E0(v114);
    MEMORY[0x212BC6398](v115, 0x10F2C40DA2C9B81);
  }
  if (*(_QWORD *)(*v1657 + 64))
  {
    v116 = *(_QWORD *)(*(_QWORD *)(*v1657 + 48) + 48);
    v117 = atan2(-*(double *)(v116 + 40), *(long double *)(v116 + 64));
    v118 = asin(*(long double *)(v116 + 16));
    v119 = atan2(-*(double *)(v116 + 8), *(long double *)v116);
    sub_20F49BBF8(v1805);
    if (**(int **)(*(_QWORD *)&v1805[0] + 56) > 2
      || (v120 = *(unsigned __int8 *)(*(_QWORD *)&v1805[0] + 72),
          v121 = sub_20E8C31DC(*(uint64_t *)&v1805[0], "OSLogSurrogateAppender", 1, 0),
          v122 = v121,
          !v120)
      && !v121)
    {
LABEL_269:
      v101 = v1657;
      goto LABEL_270;
    }
    *(_QWORD *)oslog = v1805;
    *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
    *(_DWORD *)&oslog[24] = 2;
    *(_QWORD *)&oslog[32] = "unknown file";
    *(_DWORD *)&oslog[40] = 181;
    *(_QWORD *)&oslog[64] = 0;
    *(_QWORD *)&oslog[48] = "unknown function";
    *(_QWORD *)&oslog[56] = 0;
    v123 = **(_QWORD **)oslog;
    v124 = **(_QWORD **)oslog + 16;
    if (*(char *)(**(_QWORD **)oslog + 39) < 0)
    {
      v126 = *(const char **)(v123 + 16);
      v125 = *(_QWORD *)(v123 + 24);
      v128 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v128 & 1) != 0)
        goto LABEL_185;
    }
    else
    {
      v125 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
      v126 = (const char *)(**(_QWORD **)oslog + 16);
      v127 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v127 & 1) != 0)
        goto LABEL_185;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
        operator delete(object[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_185:
    if (byte_254A4A4F8[23] >= 0)
      v129 = byte_254A4A4F8;
    else
      v129 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v130 = byte_254A4A4F8[23];
    else
      v130 = *(_QWORD *)&byte_254A4A4F8[8];
    object[0] = os_log_create(v129, v126);
    v131 = &object[1];
    if (v130 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v130 >= 0x17)
    {
      v132 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v130 | 7) != 0x17)
        v132 = v130 | 7;
      v133 = v132 + 1;
      v131 = (void **)operator new(v132 + 1);
      object[3] = (void *)(v133 | 0x8000000000000000);
      object[1] = v131;
      object[2] = (void *)v130;
    }
    else
    {
      HIBYTE(object[3]) = v130;
      if (!v130)
      {
LABEL_199:
        *((_BYTE *)v131 + v130) = 0;
        LOBYTE(object[4]) = 1;
        v134 = &object[5];
        if (v125 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v125 >= 0x17)
        {
          v135 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v125 | 7) != 0x17)
            v135 = v125 | 7;
          v136 = v135 + 1;
          v134 = (void **)operator new(v135 + 1);
          object[7] = (void *)(v136 | 0x8000000000000000);
          object[5] = v134;
          object[6] = (void *)v125;
        }
        else
        {
          HIBYTE(object[7]) = v125;
          if (!v125)
            goto LABEL_207;
        }
        memmove(v134, v126, v125);
LABEL_207:
        *((_BYTE *)v134 + v125) = 0;
        LOBYTE(object[8]) = 1;
        v137 = object[0];
        if (SHIBYTE(object[7]) < 0)
          operator delete(object[5]);
        if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
          operator delete(object[1]);
        if (object[0])
          os_release(object[0]);
        v138 = v117 * 57.2957795;
        v139 = v118 * 57.2957795;
        v140 = v119 * 57.2957795;
        if (v122 && *(_QWORD *)(v122 + 24))
        {
          v141 = _os_log_pack_size();
          v142 = (std::__shared_weak_count_vtbl *)operator new(v141, (std::align_val_t)8uLL);
          v143 = (std::__shared_weak_count *)operator new();
          v144 = v143;
          v143->__shared_owners_ = 0;
          v145 = (unint64_t *)&v143->__shared_owners_;
          v143->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v143->__shared_weak_owners_ = 0;
          v143[1].__vftable = v142;
          object[0] = v142;
          object[1] = v142;
          object[2] = v143;
          do
            v146 = __ldxr(v145);
          while (__stxr(v146 + 1, v145));
          memset(&object[3], 0, 24);
          do
            v147 = __ldaxr(v145);
          while (__stlxr(v147 - 1, v145));
          if (!v147)
          {
            ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
            std::__shared_weak_count::__release_weak(v144);
          }
          v148 = object[0];
          v149 = _os_log_pack_fill();
          *(_DWORD *)v149 = 134218496;
          *(double *)(v149 + 4) = v138;
          *(_WORD *)(v149 + 12) = 2048;
          *(double *)(v149 + 14) = v139;
          *(_WORD *)(v149 + 22) = 2048;
          *(double *)(v149 + 24) = v140;
          v150 = operator new();
          v151 = *(unsigned __int8 *)(v123 + 39);
          if ((v151 & 0x80u) == 0)
            v152 = v124;
          else
            v152 = *(_QWORD *)(v123 + 16);
          if ((v151 & 0x80u) != 0)
            v151 = *(_QWORD *)(v123 + 24);
          *(_QWORD *)v150 = v148;
          *(_OWORD *)(v150 + 8) = *(_OWORD *)&object[1];
          object[1] = 0;
          object[2] = 0;
          *(_OWORD *)(v150 + 24) = *(_OWORD *)&object[3];
          object[3] = 0;
          object[4] = 0;
          *(_QWORD *)(v150 + 40) = v152;
          *(_QWORD *)(v150 + 48) = v151;
          *(_BYTE *)(v150 + 56) = 2;
          v1842[0] = 0;
          *(_QWORD *)v1794 = v150;
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v122 + 24) + 40))(*(_QWORD *)(v122 + 24), v1794);
          v153 = *(_QWORD *)v1794;
          *(_QWORD *)v1794 = 0;
          if (v153)
          {
            v154 = *(std::__shared_weak_count **)(v153 + 32);
            if (v154)
            {
              v155 = (unint64_t *)&v154->__shared_owners_;
              do
                v156 = __ldaxr(v155);
              while (__stlxr(v156 - 1, v155));
              if (!v156)
              {
                ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                std::__shared_weak_count::__release_weak(v154);
              }
            }
            v157 = *(std::__shared_weak_count **)(v153 + 16);
            if (v157)
            {
              v158 = (unint64_t *)&v157->__shared_owners_;
              do
                v159 = __ldaxr(v158);
              while (__stlxr(v159 - 1, v158));
              if (!v159)
              {
                ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                std::__shared_weak_count::__release_weak(v157);
              }
            }
            MEMORY[0x212BC6398](v153, 0x10F0C40B62ED6C6);
            v160 = v1842[0];
            v1842[0] = 0;
            if (v160)
            {
              v161 = (std::__shared_weak_count *)*((_QWORD *)v160 + 4);
              if (v161)
              {
                v162 = (unint64_t *)&v161->__shared_owners_;
                do
                  v163 = __ldaxr(v162);
                while (__stlxr(v163 - 1, v162));
                if (!v163)
                {
                  ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                  std::__shared_weak_count::__release_weak(v161);
                }
              }
              v164 = (std::__shared_weak_count *)*((_QWORD *)v160 + 2);
              if (v164)
              {
                v165 = (unint64_t *)&v164->__shared_owners_;
                do
                  v166 = __ldaxr(v165);
                while (__stlxr(v166 - 1, v165));
                if (!v166)
                {
                  ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                  std::__shared_weak_count::__release_weak(v164);
                }
              }
              MEMORY[0x212BC6398](v160, 0x10F0C40B62ED6C6);
            }
          }
          v167 = (std::__shared_weak_count *)object[4];
          if (object[4])
          {
            v168 = (unint64_t *)((char *)object[4] + 8);
            do
              v169 = __ldaxr(v168);
            while (__stlxr(v169 - 1, v168));
            if (!v169)
            {
              ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
              std::__shared_weak_count::__release_weak(v167);
            }
          }
          v170 = (std::__shared_weak_count *)object[2];
          if (object[2])
          {
            v171 = (unint64_t *)((char *)object[2] + 8);
            do
              v172 = __ldaxr(v171);
            while (__stlxr(v172 - 1, v171));
            if (!v172)
            {
              ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
              std::__shared_weak_count::__release_weak(v170);
            }
          }
        }
        else
        {
          os_log_type_enabled(v137, OS_LOG_TYPE_DEBUG);
          LODWORD(object[0]) = 134218496;
          *(void **)((char *)object + 4) = *(void **)&v138;
          WORD2(object[1]) = 2048;
          *(void **)((char *)&object[1] + 6) = *(void **)&v139;
          HIWORD(object[2]) = 2048;
          object[3] = *(void **)&v140;
          LODWORD(v1653) = 32;
          v1652 = object;
          v173 = (void *)_os_log_send_and_compose_impl();
          if (v173)
            free(v173);
        }
        if (v120)
        {
          sub_20E8C003C((uint64_t)oslog, "Before optimize: Roll %f, pitch %f, Yaw %f", v138, v139, v140);
          sub_20E863570((uint64_t)oslog);
        }
        sub_20E863570((uint64_t)oslog);
        v174 = *(std::__shared_weak_count **)&oslog[64];
        if (*(_QWORD *)&oslog[64])
        {
          v175 = (unint64_t *)(*(_QWORD *)&oslog[64] + 8);
          do
            v176 = __ldaxr(v175);
          while (__stlxr(v176 - 1, v175));
          if (!v176)
          {
            ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
            std::__shared_weak_count::__release_weak(v174);
          }
        }
        goto LABEL_269;
      }
    }
    memmove(v131, v129, v130);
    goto LABEL_199;
  }
LABEL_270:
  v177 = (_QWORD *)v101[1];
  v180 = (_QWORD *)*v177;
  v178 = v177 + 1;
  v179 = v180;
  if (v180 != v178)
  {
    while (1)
    {
      v181 = v179[6];
      if (!v181)
        break;
      v182 = v181 + 40;
      v183 = *(unsigned __int8 *)(v181 + 192);
      if (v183)
        v184 = v182;
      else
        v184 = 0;
      if (!v183)
        goto LABEL_284;
LABEL_285:
      *(_BYTE *)(v184 + 56) = 0;
      v188 = (_QWORD *)v179[1];
      if (v188)
      {
        do
        {
          v189 = v188;
          v188 = (_QWORD *)*v188;
        }
        while (v188);
      }
      else
      {
        do
        {
          v189 = (_QWORD *)v179[2];
          _ZF = *v189 == (_QWORD)v179;
          v179 = v189;
        }
        while (!_ZF);
      }
      v179 = v189;
      if (v189 == v178)
        goto LABEL_291;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/MapOptimizationUtil.cpp", 186, (uint64_t)"track.second", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v185 = v179[6];
    v186 = v185 + 40;
    v187 = *(unsigned __int8 *)(v185 + 192);
    if (v187)
      v184 = v186;
    else
      v184 = 0;
    if (v187)
      goto LABEL_285;
LABEL_284:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/MapOptimizationUtil.cpp", 188, (uint64_t)"structure", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    goto LABEL_285;
  }
LABEL_291:
  v190 = *(_BYTE *)(v1668 + 167);
  v191 = *(char **)(v1721 + 5080);
  v192 = v1721;
  v193 = *(char **)(v1721 + 5088);
  if (v193 == v191 || *(_DWORD *)v191)
  {
    v194 = *(uint64_t **)(v1721 + 96);
    if (v194)
    {
      v195 = *v194;
      if (v193 == v191)
        v191 = *(char **)(v1721 + 5088);
      if (v193 == v191)
        goto LABEL_304;
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 194, (uint64_t)"this->viobadata_ref_.state_to_imu_sample_time_offset", 52, (uint64_t)"Error the timeoffset variable is not set", 40, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_1998;
      }
      v194 = *(uint64_t **)(v192 + 96);
      if (!v194)
      {
        v191 = *(char **)(v192 + 5088);
        goto LABEL_328;
      }
      v191 = *(char **)(v192 + 5080);
      v193 = *(char **)(v192 + 5088);
      v195 = *v194;
      if (v193 == v191)
        v191 = *(char **)(v192 + 5088);
      if (v193 == v191)
      {
LABEL_304:
        v196 = (char *)sub_20F619254(v192 + 5104);
        *(_DWORD *)v196 = -1;
        v196[4] = 1;
        *((_DWORD *)v196 + 2) = 0;
        *((_DWORD *)v196 + 4) = 0;
        v196[20] = 1;
        *(_WORD *)(v196 + 21) = *(_WORD *)v1794;
        v196[23] = v1794[2];
        *((_QWORD *)v196 + 3) = v194;
        *((_QWORD *)v196 + 4) = v195;
        v196[40] = 0;
        *(_DWORD *)(v196 + 41) = *(_DWORD *)oslog;
        *((_DWORD *)v196 + 11) = *(_DWORD *)&oslog[3];
        LODWORD(object[0]) = 0;
        object[1] = v196;
        v191 = sub_20F618FEC((char **)(v192 + 5080), (__int128 *)v191, (uint64_t)object);
        v197 = *(char **)(v192 + 6304);
        v198 = *(_QWORD *)(v192 + 6312);
        if ((unint64_t)v197 < v198)
        {
          *(_DWORD *)v197 = 0;
          v199 = (uint64_t)(v197 + 4);
LABEL_327:
          *(_QWORD *)(v192 + 6304) = v199;
          *(_BYTE *)(v192 + 5858) = 0;
          *(_BYTE *)(v192 + 5856) = 0;
          *(_BYTE *)(v192 + 6636) = 0;
          *(_DWORD *)(v192 + 6632) = 0;
          goto LABEL_328;
        }
        v200 = *(char **)(v192 + 6296);
        v201 = (v197 - v200) >> 2;
        v202 = v201 + 1;
        if ((unint64_t)(v201 + 1) >> 62)
          sub_20E867F44();
        v203 = v198 - (_QWORD)v200;
        if (v203 >> 1 > v202)
          v202 = v203 >> 1;
        if ((unint64_t)v203 >= 0x7FFFFFFFFFFFFFFCLL)
          v204 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v204 = v202;
        if (v204)
        {
          if (v204 >> 62)
            sub_20E877A38();
          v205 = operator new(4 * v204);
          v206 = &v205[4 * v201];
          v207 = &v205[4 * v204];
          *v206 = 0;
          v199 = (uint64_t)(v206 + 1);
          v208 = v197 - v200;
          if (v197 == v200)
            goto LABEL_325;
        }
        else
        {
          v205 = 0;
          v206 = (_DWORD *)(4 * v201);
          v207 = 0;
          *(_DWORD *)(4 * v201) = 0;
          v199 = 4 * v201 + 4;
          v208 = v197 - v200;
          if (v197 == v200)
          {
LABEL_325:
            *(_QWORD *)(v192 + 6296) = v206;
            *(_QWORD *)(v192 + 6304) = v199;
            *(_QWORD *)(v192 + 6312) = v207;
            if (v200)
              operator delete(v200);
            goto LABEL_327;
          }
        }
        v209 = v208 - 4;
        if (v209 < 0x2C)
          goto LABEL_2039;
        if ((unint64_t)(v200 - v205) < 0x20)
          goto LABEL_2039;
        v210 = (v209 >> 2) + 1;
        v211 = 4 * (v210 & 0x7FFFFFFFFFFFFFF8);
        v212 = &v197[-v211];
        v206 = (_DWORD *)((char *)v206 - v211);
        v213 = &v205[4 * v201 - 16];
        v214 = v197 - 16;
        v215 = v210 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v216 = *(_OWORD *)v214;
          *(v213 - 1) = *((_OWORD *)v214 - 1);
          *v213 = v216;
          v213 -= 2;
          v214 -= 32;
          v215 -= 8;
        }
        while (v215);
        v197 = v212;
        if (v210 != (v210 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_2039:
          do
          {
            v217 = *((_DWORD *)v197 - 1);
            v197 -= 4;
            *--v206 = v217;
          }
          while (v197 != v200);
        }
        goto LABEL_325;
      }
    }
    if (*(_DWORD *)v191)
      goto LABEL_304;
    v191 = v193;
LABEL_328:
    v192 = v1721;
  }
  *(_BYTE *)(*((_QWORD *)v191 + 1) + 20) = v190;
  v218 = *(_QWORD *)(v192 + 5376) - *(_QWORD *)(v192 + 5368);
  v219 = (v218 >> 4);
  v220 = *(_QWORD **)(v192 + 8);
  if (v219 == v220[39])
    goto LABEL_519;
  __dst = *(unsigned __int8 *)(v1668 + 166);
  v1684 = (_BYTE *)(v192 + 5856);
  v1708 = (_QWORD *)v192;
  if (!*(_BYTE *)(v192 + 5856))
  {
    memset(object, 0, 32);
    if (sub_20F5B8114((_QWORD *)(v192 + 4880), (int *)object, oslog, 1))
    {
      *(_QWORD *)(v192 + 6448) = *(_QWORD *)(v192 + 6440);
      *(_QWORD *)(v192 + 6472) = *(_QWORD *)(v192 + 6464);
      *(_QWORD *)(v192 + 6496) = *(_QWORD *)(v192 + 6488);
      *(_QWORD *)(v192 + 6520) = *(_QWORD *)(v192 + 6512);
      *(_QWORD *)(v192 + 6544) = *(_QWORD *)(v192 + 6536);
      *(_QWORD *)(v192 + 6568) = *(_QWORD *)(v192 + 6560);
      *(_QWORD *)(v192 + 6592) = *(_QWORD *)(v192 + 6584);
      *(_QWORD *)(v192 + 6616) = *(_QWORD *)(v192 + 6608);
      v221 = *(_QWORD *)(v192 + 5656);
      v222 = *(_QWORD *)(v192 + 5664);
      while (v221 != v222)
      {
        v223 = *(_QWORD *)(v221 + 208);
        if (*(_BYTE *)(v221 + 496)
          || (*(_BYTE *)(v223 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v221 + 216) + 4) & 6) != 0)
        {
          sub_20F394A20(v192 + 6440, v223);
          sub_20F3D35E0((_QWORD *)(v192 + 6440), *(_QWORD *)(v221 + 216));
        }
        v221 += 504;
      }
      v224 = *(_QWORD *)(v192 + 5680);
      v225 = *(_QWORD *)(v192 + 5688);
      while (v224 != v225)
      {
        v226 = *(_QWORD *)(v224 + 136);
        if (*(_BYTE *)(v224 + 272) || (*(_BYTE *)(v226 + 4) & 6) != 0)
          sub_20F394A20(v192 + 6440, v226);
        v224 += 280;
      }
      v227 = (uint64_t *)v192;
      sub_20F5B8680(*(_QWORD *)(v192 + 5704), *(_QWORD *)(v192 + 5712), (_QWORD *)(v192 + 6440));
      sub_20F5B85BC(v227[716], v227[717], (_QWORD *)(v192 + 6440));
      sub_20F5B8444(v227[719], v227[720], (_QWORD *)(v192 + 6440));
      v228 = *(_QWORD *)(v192 + 5776);
      v229 = *(_QWORD *)(v192 + 5784);
      while (v228 != v229)
      {
        v230 = *(_QWORD *)(v228 + 736);
        if (*(_BYTE *)(v228 + 880)
          || (*(_BYTE *)(v230 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v228 + 744) + 4) & 6) != 0)
        {
          sub_20F394A20(v192 + 6440, v230);
          sub_20F394A20(v192 + 6440, *(_QWORD *)(v228 + 744));
        }
        v228 += 888;
      }
      v231 = (*(_QWORD *)(v192 + 6568) - *(_QWORD *)(v192 + 6560)) >> 2;
      if (HIDWORD(object[2]) > v231)
        LODWORD(v231) = HIDWORD(object[2]);
      _CF = *(_DWORD *)&oslog[20] >= v231;
      v232 = *(_DWORD *)&oslog[20] - v231;
      if (_CF)
        v233 = v232;
      else
        v233 = 0;
      sub_20F59A618((_QWORD *)(v192 + 4880));
      if (!v233)
        goto LABEL_364;
    }
    else if (!*(_DWORD *)&oslog[20])
    {
      goto LABEL_364;
    }
LABEL_363:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 271, (uint64_t)"!this->linear_system_.graph().template numberOfVariable<VARIABLE_TYPE>()", 72, (uint64_t)"CameraCalibVariables of this type have already been added.", 58, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_1998;
    }
    goto LABEL_364;
  }
  if ((v218 >> 4))
    goto LABEL_363;
LABEL_364:
  v234 = (uint64_t *)v220[47];
  if (v234)
  {
    v1680 = (void *)(v192 + 5368);
    v1667 = (void **)(v192 + 6368);
    v1672 = v192 + 6632;
    v235 = "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp";
    while (1)
    {
      v236 = v234 + 3;
      v237 = *((_DWORD *)v234 + 4);
      *(_DWORD *)v1794 = v237;
      *(_QWORD *)&v1794[8] = v234 + 3;
      v1795 = 1065353216;
      v1796 = 0;
      memset(&v1794[240], 0, 56);
      v1794[4] = __dst;
      v238 = *(_OWORD *)(v234 + 25);
      v239 = *(_OWORD *)(v234 + 23);
      v240 = *(_OWORD *)(v234 + 29);
      *(_OWORD *)&v1794[208] = *(_OWORD *)(v234 + 27);
      *(_OWORD *)&v1794[224] = v240;
      *(_OWORD *)&v1794[176] = v239;
      *(_OWORD *)&v1794[192] = v238;
      v241 = *(_OWORD *)(v234 + 17);
      v242 = *(_OWORD *)(v234 + 15);
      v243 = *(_OWORD *)(v234 + 21);
      *(_OWORD *)&v1794[144] = *(_OWORD *)(v234 + 19);
      *(_OWORD *)&v1794[160] = v243;
      *(_OWORD *)&v1794[112] = v242;
      *(_OWORD *)&v1794[128] = v241;
      v244 = *(_OWORD *)(v234 + 9);
      v245 = *(_OWORD *)(v234 + 7);
      v246 = *(_OWORD *)(v234 + 13);
      *(_OWORD *)&v1794[80] = *(_OWORD *)(v234 + 11);
      *(_OWORD *)&v1794[96] = v246;
      *(_OWORD *)&v1794[48] = v245;
      *(_OWORD *)&v1794[64] = v244;
      v247 = *(_OWORD *)(v234 + 5);
      *(_OWORD *)&v1794[16] = *(_OWORD *)(v234 + 3);
      *(_OWORD *)&v1794[32] = v247;
      v248 = (char *)v1708[671];
      v249 = (char *)v1708[672];
      if (v249 == v248)
      {
        v248 = (char *)v1708[672];
      }
      else
      {
        v250 = (v249 - v248) >> 4;
        do
        {
          v251 = v250 >> 1;
          v252 = &v248[16 * (v250 >> 1)];
          v254 = *(_DWORD *)v252;
          v253 = v252 + 16;
          v250 += ~(v250 >> 1);
          if (v254 < v237)
            v248 = v253;
          else
            v250 = v251;
        }
        while (v250);
        v1701 = (char *)v1708[672];
        if (v249 != v248 && v237 == *(_DWORD *)v248)
        {
          if (sub_21023D5B4(v235, 283, (uint64_t)"result", 6, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          goto LABEL_416;
        }
      }
      oslog[4] = 1;
      *(_DWORD *)oslog = -1;
      *(_DWORD *)&oslog[8] = 0;
      *(_QWORD *)&oslog[16] = *(_QWORD *)v1794;
      *(_QWORD *)&oslog[24] = v234 + 3;
      v255 = *(_OWORD *)(v234 + 5);
      *(_OWORD *)&oslog[32] = *v236;
      *(_OWORD *)&oslog[48] = v255;
      v256 = *(_OWORD *)(v234 + 7);
      v257 = *(_OWORD *)(v234 + 9);
      v258 = *(_OWORD *)(v234 + 13);
      *(_OWORD *)&oslog[96] = *(_OWORD *)(v234 + 11);
      *(_OWORD *)&oslog[112] = v258;
      *(_OWORD *)&oslog[64] = v256;
      *(_OWORD *)&oslog[80] = v257;
      v259 = *(_OWORD *)(v234 + 15);
      v260 = *(_OWORD *)(v234 + 17);
      v261 = *(_OWORD *)(v234 + 21);
      *(_OWORD *)&oslog[160] = *(_OWORD *)(v234 + 19);
      *(_OWORD *)&oslog[176] = v261;
      *(_OWORD *)&oslog[128] = v259;
      *(_OWORD *)&oslog[144] = v260;
      v262 = *(_OWORD *)(v234 + 23);
      v263 = *(_OWORD *)(v234 + 25);
      v264 = *(_OWORD *)(v234 + 29);
      *(_OWORD *)&oslog[224] = *(_OWORD *)(v234 + 27);
      *(_OWORD *)&oslog[240] = v264;
      *(_OWORD *)&oslog[192] = v262;
      *(_OWORD *)&oslog[208] = v263;
      memset(&v1794[240], 0, 40);
      *(_DWORD *)&oslog[312] = 1065353216;
      oslog[320] = 0;
      memset(&oslog[328], 0, 224);
      LODWORD(object[0]) = v237;
      LODWORD(object[2]) = 0;
      object[1] = *(void **)oslog;
      object[3] = *(void **)v1794;
      object[4] = v234 + 3;
      v266 = *(_OWORD *)(v234 + 27);
      v265 = *(_OWORD *)(v234 + 29);
      v267 = *(_OWORD *)(v234 + 25);
      *(_OWORD *)&object[25] = *(_OWORD *)(v234 + 23);
      *(_OWORD *)&object[27] = v267;
      *(_OWORD *)&object[29] = v266;
      *(_OWORD *)&object[31] = v265;
      v269 = *(_OWORD *)(v234 + 19);
      v268 = *(_OWORD *)(v234 + 21);
      v270 = *(_OWORD *)(v234 + 17);
      *(_OWORD *)&object[17] = *(_OWORD *)(v234 + 15);
      *(_OWORD *)&object[19] = v270;
      *(_OWORD *)&object[21] = v269;
      *(_OWORD *)&object[23] = v268;
      v272 = *(_OWORD *)(v234 + 11);
      v271 = *(_OWORD *)(v234 + 13);
      v273 = *(_OWORD *)(v234 + 9);
      *(_OWORD *)&object[9] = *(_OWORD *)(v234 + 7);
      *(_OWORD *)&object[11] = v273;
      *(_OWORD *)&object[13] = v272;
      *(_OWORD *)&object[15] = v271;
      v274 = *(_OWORD *)(v234 + 5);
      *(_OWORD *)&object[5] = *v236;
      *(_OWORD *)&object[7] = v274;
      memset(&object[33], 0, 56);
      memset(&oslog[256], 0, 56);
      LODWORD(object[40]) = 1065353216;
      LOBYTE(object[41]) = 0;
      memset(&object[42], 0, 224);
      v1701 = sub_20F7157B4((uint64_t)v1680, v248, (int *)object);
      v275 = object[38];
      if (object[38])
      {
        do
        {
          v276 = (_QWORD *)*v275;
          operator delete(v275);
          v275 = v276;
        }
        while (v276);
      }
      v277 = object[36];
      object[36] = 0;
      if (v277)
        operator delete(v277);
      if (object[33])
      {
        object[34] = object[33];
        operator delete(object[33]);
      }
      v278 = *(_QWORD **)&oslog[296];
      if (*(_QWORD *)&oslog[296])
      {
        do
        {
          v279 = (_QWORD *)*v278;
          operator delete(v278);
          v278 = v279;
        }
        while (v279);
      }
      if (*(_QWORD *)&oslog[280])
        operator delete(*(void **)&oslog[280]);
      if (*(_QWORD *)&oslog[256])
        operator delete(*(void **)&oslog[256]);
      if (__dst)
        break;
LABEL_415:
      v1684[2] = 0;
      *v1684 = 0;
      *(_DWORD *)v1672 = 0;
      *(_BYTE *)(v1672 + 4) = 0;
LABEL_416:
      v302.n128_u32[1] = 0;
      v302.n128_u64[1] = 0;
      memset(object, 0, 32);
      LODWORD(object[4]) = 1065353216;
      v303 = (uint64_t **)v1708[16];
      v304 = *v303;
      v305 = v303[1];
      while (v304 != v305)
      {
        v306 = (__int128 *)*v304;
        if (*(_QWORD *)(*v304 + 24))
        {
          if (*((_DWORD *)v306 + 4) != *((_DWORD *)v234 + 4))
            goto LABEL_417;
LABEL_432:
          v312 = *v306;
          *(_QWORD *)&oslog[16] = *((_QWORD *)v306 + 2);
          *(_OWORD *)oslog = v312;
          *(_OWORD *)&oslog[24] = *(__int128 *)((char *)v306 + 24);
          sub_20F61A180((uint64_t)object, (uint64_t *)oslog, (uint64_t)oslog);
          goto LABEL_417;
        }
        sub_21023D70C(v235, 288, (uint64_t)"frame->lens_model_", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v307 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v307 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (byte_254A6DE68)
          v308 = byte_254A6DE70 == 0;
        else
          v308 = 0;
        if (!v308)
        {
          v309 = qword_254A6DE40;
          for (i = qword_254A6DE48; v309 != i; v309 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v309)(*(_QWORD *)(v309 + 8), "frame->lens_model_", 18, "", 0);
        }
        v311 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v311 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "frame->lens_model_", 18, "", 0);
        v306 = (__int128 *)*v304;
        if (*(_DWORD *)(*v304 + 16) == *((_DWORD *)v234 + 4))
          goto LABEL_432;
LABEL_417:
        v304 += 2;
      }
      v313 = *((_QWORD *)v1701 + 1);
      if (*(_QWORD *)(v313 + 304))
      {
        v314 = *(_QWORD **)(v313 + 296);
        if (v314)
        {
          do
          {
            v315 = (_QWORD *)*v314;
            operator delete(v314);
            v314 = v315;
          }
          while (v315);
        }
        *(_QWORD *)(v313 + 296) = 0;
        v316 = *(_QWORD *)(v313 + 288);
        if (v316)
        {
          for (j = 0; j != v316; ++j)
            *(_QWORD *)(*(_QWORD *)(v313 + 280) + 8 * j) = 0;
        }
        *(_QWORD *)(v313 + 304) = 0;
      }
      v318 = object[0];
      object[0] = 0;
      v319 = *(void **)(v313 + 280);
      *(_QWORD *)(v313 + 280) = v318;
      if (v319)
        operator delete(v319);
      v320 = (unint64_t)object[1];
      v321 = object[2];
      object[1] = 0;
      v322 = object[3];
      *(void **)(v313 + 296) = object[2];
      *(_QWORD *)(v313 + 304) = v322;
      v302.n128_u32[0] = (unsigned __int32)object[4];
      *(_DWORD *)(v313 + 312) = object[4];
      *(_QWORD *)(v313 + 288) = v320;
      if (v322)
      {
        v323 = *((_QWORD *)v321 + 1);
        if ((v320 & (v320 - 1)) != 0)
        {
          if (v323 >= v320)
            v323 %= v320;
        }
        else
        {
          v323 &= v320 - 1;
        }
        *(_QWORD *)(*(_QWORD *)(v313 + 280) + 8 * v323) = v313 + 296;
        object[2] = 0;
        object[3] = 0;
        v321 = *(void **)(v313 + 296);
      }
      for (; v321; v321 = *(void **)v321)
        v302.n128_f64[0] = sub_20F6182A0(*((char **)v321 + 5), (float64x2_t *)(v313 + 32), v302);
      memset(oslog, 0, 24);
      v324 = (_QWORD *)v1708[2];
      v325 = v324[2];
      if (v325)
      {
        v326 = v1701;
        if (v325 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        v327 = (_QWORD *)v1708[2];
        v328 = (char *)operator new(24 * v325);
        *(_QWORD *)oslog = v328;
        *(_QWORD *)&oslog[8] = v328;
        *(_QWORD *)&oslog[16] = &v328[24 * v325];
        v329 = v327 + 1;
        v330 = (_QWORD *)*v327;
        v1699 = v327 + 1;
        if ((_QWORD *)*v327 == v327 + 1)
          goto LABEL_459;
LABEL_472:
        while (2)
        {
          v340 = v330[6];
          if (*(_BYTE *)(v340 + 192))
            v341 = v340 + 40;
          else
            v341 = 0;
          if (*(_BYTE *)(v340 + 192))
          {
            v342 = *(_DWORD *)(v340 + 88);
            if (v342 == *((_DWORD *)v234 + 4))
            {
              v343 = *(_QWORD *)(v340 + 200);
              v344 = *(_QWORD *)(v340 + 208);
              v345 = *(_QWORD *)(v340 + 72);
              v346 = *(_DWORD *)(v340 + 80);
              if (v344 != v343)
              {
                v347 = (v344 - v343) >> 5;
                while (1)
                {
                  v348 = v347 >> 1;
                  v349 = v343 + 32 * (v347 >> 1);
                  v350 = *(_DWORD *)(v349 + 16);
                  _CF = v350 >= v342;
                  if (v350 != v342)
                    goto LABEL_485;
                  if (*(_QWORD *)v349 >= v345)
                    break;
LABEL_479:
                  v343 = v349 + 32;
                  v348 = v347 + ~v348;
LABEL_480:
                  v347 = v348;
                  if (!v348)
                    goto LABEL_488;
                }
                if (*(_QWORD *)v349 != v345)
                  goto LABEL_480;
                _CF = *(_DWORD *)(v349 + 8) >= v346;
LABEL_485:
                if (_CF)
                  goto LABEL_480;
                goto LABEL_479;
              }
LABEL_488:
              if (v343 != v344
                && *(_DWORD *)(v343 + 16) == v342
                && *(_QWORD *)v343 == v345
                && *(_DWORD *)(v343 + 8) == v346)
              {
                v352 = *(_QWORD *)(v343 + 24);
                v353 = *(_DWORD *)(v340 + 32);
                v354 = *(_QWORD *)&oslog[16];
                if ((unint64_t)v328 >= *(_QWORD *)&oslog[16])
                  goto LABEL_493;
LABEL_503:
                *(_DWORD *)v328 = v353;
                v363 = v328 + 24;
                *((_QWORD *)v328 + 1) = v352;
                *((_QWORD *)v328 + 2) = v341;
              }
              else
              {
                v352 = 0;
                v353 = *(_DWORD *)(v340 + 32);
                v354 = *(_QWORD *)&oslog[16];
                if ((unint64_t)v328 < *(_QWORD *)&oslog[16])
                  goto LABEL_503;
LABEL_493:
                v355 = v234;
                v356 = v235;
                v357 = *(char **)oslog;
                v358 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v328[-*(_QWORD *)oslog] >> 3);
                v359 = v358 + 1;
                if (v358 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_20E867F44();
                v360 = 0xAAAAAAAAAAAAAAABLL * ((v354 - *(_QWORD *)oslog) >> 3);
                if (2 * v360 > v359)
                  v359 = 2 * v360;
                if (v360 >= 0x555555555555555)
                  v361 = 0xAAAAAAAAAAAAAAALL;
                else
                  v361 = v359;
                if (v361)
                {
                  if (v361 > 0xAAAAAAAAAAAAAAALL)
                    sub_20E877A38();
                  v362 = (char *)operator new(24 * v361);
                }
                else
                {
                  v362 = 0;
                }
                v364 = &v362[24 * v358];
                *(_DWORD *)v364 = v353;
                *((_QWORD *)v364 + 1) = v352;
                *((_QWORD *)v364 + 2) = v341;
                v365 = v364;
                v235 = v356;
                if (v328 != v357)
                {
                  do
                  {
                    v366 = *(_OWORD *)(v328 - 24);
                    *((_QWORD *)v365 - 1) = *((_QWORD *)v328 - 1);
                    *(_OWORD *)(v365 - 24) = v366;
                    v365 -= 24;
                    v328 -= 24;
                  }
                  while (v328 != v357);
                  v328 = *(char **)oslog;
                }
                v234 = v355;
                v367 = &v362[24 * v361];
                v363 = v364 + 24;
                *(_QWORD *)oslog = v365;
                *(_QWORD *)&oslog[8] = v364 + 24;
                *(_QWORD *)&oslog[16] = v367;
                v326 = v1701;
                if (v328)
                  operator delete(v328);
                v329 = v1699;
              }
              *(_QWORD *)&oslog[8] = v363;
              v328 = v363;
            }
          }
          v368 = (_QWORD *)v330[1];
          if (v368)
          {
            do
            {
              v369 = v368;
              v368 = (_QWORD *)*v368;
            }
            while (v368);
          }
          else
          {
            do
            {
              v369 = (_QWORD *)v330[2];
              _ZF = *v369 == (_QWORD)v330;
              v330 = v369;
            }
            while (!_ZF);
          }
          v330 = v369;
          if (v369 == v329)
            goto LABEL_459;
          continue;
        }
      }
      v328 = 0;
      v326 = v1701;
      v331 = (_QWORD *)*v324;
      v329 = v324 + 1;
      v330 = v331;
      v1699 = v329;
      if (v331 != v329)
        goto LABEL_472;
LABEL_459:
      v332 = (_QWORD *)*((_QWORD *)v326 + 1);
      v333 = (void *)v332[32];
      if (v333)
      {
        v332[33] = v333;
        operator delete(v333);
        v332[32] = 0;
        v332[33] = 0;
        v332[34] = 0;
        v328 = *(char **)&oslog[8];
      }
      v334 = *(_QWORD *)&oslog[16];
      v332[32] = *(_QWORD *)oslog;
      v332[33] = v328;
      v332[34] = v334;
      v335 = object[2];
      if (object[2])
      {
        do
        {
          v336 = (_QWORD *)*v335;
          operator delete(v335);
          v335 = v336;
        }
        while (v336);
      }
      v337 = object[0];
      object[0] = 0;
      if (v337)
        operator delete(v337);
      v338 = *(_QWORD **)&v1794[280];
      if (*(_QWORD *)&v1794[280])
      {
        do
        {
          v339 = (_QWORD *)*v338;
          operator delete(v338);
          v338 = v339;
        }
        while (v339);
      }
      if (*(_QWORD *)&v1794[264])
        operator delete(*(void **)&v1794[264]);
      if (*(_QWORD *)&v1794[240])
        operator delete(*(void **)&v1794[240]);
      v234 = (uint64_t *)*v234;
      if (!v234)
        goto LABEL_518;
    }
    v280 = (char *)v1708[797];
    v281 = v1708[798];
    if ((unint64_t)v280 < v281)
    {
      *(_DWORD *)v280 = v237;
      v282 = (uint64_t)(v280 + 4);
LABEL_414:
      v1708[797] = v282;
      goto LABEL_415;
    }
    v283 = (char *)*v1667;
    v284 = v280 - (_BYTE *)*v1667;
    v285 = v284 >> 2;
    v286 = (v284 >> 2) + 1;
    if (v286 >> 62)
      sub_20E867F44();
    v287 = v281 - (_QWORD)v283;
    if (v287 >> 1 > v286)
      v286 = v287 >> 1;
    if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFFCLL)
      v288 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v288 = v286;
    if (v288)
    {
      if (v288 >> 62)
        sub_20E877A38();
      v289 = v288;
      v290 = operator new(4 * v288);
      v288 = v289;
      v291 = (unsigned int *)&v290[4 * v285];
      *v291 = v237;
      v282 = (uint64_t)(v291 + 1);
      v292 = v280 - v283;
      if (v280 == v283)
        goto LABEL_412;
    }
    else
    {
      v290 = 0;
      v291 = (unsigned int *)(4 * v285);
      *(_DWORD *)(4 * v285) = v237;
      v282 = 4 * v285 + 4;
      v292 = v280 - v283;
      if (v280 == v283)
      {
LABEL_412:
        v1708[796] = v291;
        v1708[797] = v282;
        v1708[798] = &v290[4 * v288];
        if (v283)
          operator delete(v283);
        goto LABEL_414;
      }
    }
    v293 = v292 - 4;
    if (v293 < 0x2C)
      goto LABEL_2040;
    if ((unint64_t)(v280 - v290 - v284) < 0x20)
      goto LABEL_2040;
    v294 = (v293 >> 2) + 1;
    v295 = 4 * (v294 & 0x7FFFFFFFFFFFFFF8);
    v296 = &v280[-v295];
    v291 = (unsigned int *)((char *)v291 - v295);
    v297 = &v290[4 * v285 - 16];
    v298 = v280 - 16;
    v299 = v294 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v300 = *(_OWORD *)v298;
      *(v297 - 1) = *((_OWORD *)v298 - 1);
      *v297 = v300;
      v297 -= 2;
      v298 -= 32;
      v299 -= 8;
    }
    while (v299);
    v280 = v296;
    if (v294 != (v294 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_2040:
      do
      {
        v301 = *((_DWORD *)v280 - 1);
        v280 -= 4;
        *--v291 = v301;
      }
      while (v280 != v283);
    }
    goto LABEL_412;
  }
LABEL_518:
  v192 = v1721;
  v220 = *(_QWORD **)(v1721 + 8);
  v219 = v220[39];
LABEL_519:
  v370 = (*(_QWORD *)(v192 + 5472) - *(_QWORD *)(v192 + 5464)) >> 4;
  v1709 = v192;
  if (v219 != v370)
  {
    __sba = *(_BYTE *)(v1668 + 168);
    v1679 = (_BYTE *)(v192 + 5856);
    if (*(_BYTE *)(v192 + 5856))
    {
      if (!(_DWORD)v370)
      {
LABEL_525:
        v372 = (uint64_t *)v220[52];
        v371 = v1657;
        if (!v372)
        {
LABEL_672:
          v1709 = v1721;
          if (!v1789)
            goto LABEL_711;
LABEL_673:
          v482 = *(_QWORD **)(v1709 + 16);
          if (!v482 || (v485 = (_QWORD *)*v482, v483 = v482 + 1, v484 = v485, v485 == v483))
          {
LABEL_710:
            v371 = v1657;
            goto LABEL_711;
          }
          while (1)
          {
            v486 = v484[6];
            if (*(_BYTE *)(v486 + 192))
              break;
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 769, (uint64_t)"track->getStructure()", 21, (uint64_t)"The track does not have the structure", 37, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_1998;
            }
            v486 = v484[6];
            v487 = *(_DWORD *)(v486 + 32);
            v488 = *(char **)(v1709 + 5560);
            v489 = *(char **)(v1709 + 5568);
            v490 = v489 - v488;
            if (v489 != v488)
              goto LABEL_682;
LABEL_687:
            if (v488 == v489 || *(_DWORD *)v488 != v487)
            {
              v496 = v486 + 40;
              v497 = *(unsigned __int8 *)(v486 + 192);
              v498 = *(_BYTE *)(v486 + 192) ? (void *)(v486 + 40) : 0;
              LODWORD(object[0]) = v487;
              BYTE4(object[0]) = 1;
              object[1] = v498;
              if (v497)
              {
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v496 + 24))(v486 + 40))
                {
                  _Q1 = *(_OWORD *)(v486 + 104);
                  _D3 = *(_QWORD *)(v486 + 112);
                  __asm { FMLA            D2, D3, V1.D[1] }
                  if (fabs(sqrt(_D2 + *(double *)(v486 + 120) * *(double *)(v486 + 120)) + -1.0) > 0.000001)
                  {
                    v504 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
LABEL_697:
                    if (v504)
                      goto LABEL_1998;
                  }
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v496 + 24))(v486 + 40))
                  {
                    v505 = *(uint64_t **)(v486 + 136);
                    v506 = *v505;
                    v507 = (double *)v505[2];
                    v508 = v505[4];
                    v509 = (double *)v505[6];
                    _D1 = *(double *)(v486 + 56) - v507[1];
                    v511 = *(double *)(v486 + 64) - v507[2];
                    _Q3.f64[0] = *(float64_t *)(v506 + 16);
                    _Q7 = *(_OWORD *)(v506 + 48);
                    _Q3.f64[1] = *(float64_t *)(v506 + 40);
                    v514 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v506, *(int64x2_t *)(v506 + 24)), *(double *)(v486 + 48) - *v507), (float64x2_t)vzip2q_s64(*(int64x2_t *)v506, *(int64x2_t *)(v506 + 24)), _D1), _Q3, v511);
                    __asm { FMLA            D2, D1, V7.D[1] }
                    v516 = _D2 + *(double *)(v506 + 64) * v511;
                    v517 = v514.f64[0] - *v509;
                    _D2 = v514.f64[1] - v509[1];
                    v519 = v516 - v509[2];
                    _Q3.f64[0] = *(float64_t *)(v508 + 16);
                    _Q4 = *(int64x2_t *)v508;
                    _Q6 = *(int64x2_t *)(v508 + 24);
                    _Q16 = *(_OWORD *)(v508 + 48);
                    __asm { FMLA            D19, D2, V4.D[1] }
                    _Q3.f64[1] = *(float64_t *)(v508 + 40);
                    _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v508, _Q6), v517), (float64x2_t)vzip2q_s64(*(int64x2_t *)v508, _Q6), _D2), _Q3, v519);
                    __asm
                    {
                      FMLA            D3, D2, V16.D[1]
                      FMLA            D1, D2, V6.D[1]
                    }
                    _D1 = _D1 + v519 * _Q3.f64[1];
                    __asm { FMLA            D2, D1, V17.D[1] }
                    object[2] = COERCE_VOID_(sqrt(_D2+ (_Q3.f64[0] + v519 * *(double *)(v508 + 64))* (_Q3.f64[0] + *(double *)(v508 + 64) * v519)));
                    _Q1 = *(_OWORD *)(v486 + 104);
                    _Q3.f64[0] = *(float64_t *)(v486 + 112);
                    __asm { FMLA            D2, D3, V1.D[1] }
                    if (fabs(sqrt(_D2 + *(double *)(v486 + 120) * *(double *)(v486 + 120)) + -1.0) > 0.000001
                      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                    {
                      goto LABEL_1998;
                    }
                    if (sub_20F7B73E4(v1709 + 4880, (unsigned int *)object))
                    {
                      *(_BYTE *)(v1709 + 6636) = 0;
                      *(_DWORD *)(v1709 + 6632) = 0;
                    }
                  }
                  goto LABEL_703;
                }
                v504 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 44, (uint64_t)"initializeImpl()", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                goto LABEL_697;
              }
            }
LABEL_703:
            v530 = (_QWORD *)v484[1];
            if (v530)
            {
              do
              {
                v531 = v530;
                v530 = (_QWORD *)*v530;
              }
              while (v530);
            }
            else
            {
              do
              {
                v531 = (_QWORD *)v484[2];
                _ZF = *v531 == (_QWORD)v484;
                v484 = v531;
              }
              while (!_ZF);
            }
            v484 = v531;
            if (v531 == v483)
            {
              v1709 = v1721;
              goto LABEL_710;
            }
          }
          v487 = *(_DWORD *)(v486 + 32);
          v488 = *(char **)(v1709 + 5560);
          v489 = *(char **)(v1709 + 5568);
          v490 = v489 - v488;
          if (v489 == v488)
            goto LABEL_687;
LABEL_682:
          v491 = v490 >> 4;
          do
          {
            v492 = v491 >> 1;
            v493 = &v488[16 * (v491 >> 1)];
            v495 = *(_DWORD *)v493;
            v494 = v493 + 16;
            v491 += ~(v491 >> 1);
            if (v495 < v487)
              v488 = v494;
            else
              v491 = v492;
          }
          while (v491);
          goto LABEL_687;
        }
        v1678 = v192 + 5464;
        v1670 = (void **)(v192 + 6392);
        v1675 = v192 + 6632;
        while (1)
        {
          *(_DWORD *)v1794 = *((_DWORD *)v372 + 4);
          v1794[4] = 1;
          *(_QWORD *)&v1794[40] = 0;
          memset(&v1794[56], 0, 24);
          *(_OWORD *)&v1794[24] = 0u;
          *(_QWORD *)&v1794[8] = v372 + 3;
          *(_QWORD *)&v1794[16] = 0x3FF0000000000000;
          *(_QWORD *)&v1794[48] = 0x3FF0000000000000;
          *(_QWORD *)&v1794[80] = 0x3FF0000000000000;
          memset(&v1794[88], 0, 56);
          *(_DWORD *)&v1794[144] = 1065353216;
          v1794[152] = 0;
          *(_OWORD *)&v1794[16] = *(_OWORD *)(v372 + 3);
          v373 = *(_OWORD *)(v372 + 5);
          v374 = *(_OWORD *)(v372 + 7);
          v375 = *(_OWORD *)(v372 + 9);
          *(_QWORD *)&v1794[80] = v372[11];
          *(_OWORD *)&v1794[48] = v374;
          *(_OWORD *)&v1794[64] = v375;
          *(_OWORD *)&v1794[32] = v373;
          sub_20F813110((uint64_t)v1794);
          v1794[4] = __sba;
          *(_OWORD *)&v1794[16] = **(_OWORD **)&v1794[8];
          v377 = *(_OWORD *)(*(_QWORD *)&v1794[8] + 32);
          v376 = *(_OWORD *)(*(_QWORD *)&v1794[8] + 48);
          v378 = *(_OWORD *)(*(_QWORD *)&v1794[8] + 16);
          *(_QWORD *)&v1794[80] = *(_QWORD *)(*(_QWORD *)&v1794[8] + 64);
          *(_OWORD *)&v1794[48] = v377;
          *(_OWORD *)&v1794[64] = v376;
          *(_OWORD *)&v1794[32] = v378;
          sub_20F813110((uint64_t)v1794);
          v379 = *(_DWORD *)v1794;
          v380 = *(char **)(v1709 + 5464);
          v381 = *(char **)(v1709 + 5472);
          if (v381 == v380)
          {
            v380 = *(char **)(v1709 + 5472);
          }
          else
          {
            v382 = (v381 - v380) >> 4;
            do
            {
              v383 = v382 >> 1;
              v384 = &v380[16 * (v382 >> 1)];
              v386 = *(_DWORD *)v384;
              v385 = v384 + 16;
              v382 += ~(v382 >> 1);
              if (v386 < *(_DWORD *)v1794)
                v380 = v385;
              else
                v382 = v383;
            }
            while (v382);
            if (v381 != v380 && *(_DWORD *)v1794 == *(_DWORD *)v380)
            {
              v1702 = *(char **)(v1709 + 5472);
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 283, (uint64_t)"result", 6, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              goto LABEL_588;
            }
          }
          v387 = v1794[4];
          oslog[4] = 1;
          *(_DWORD *)oslog = -1;
          *(_DWORD *)&oslog[8] = 0;
          v388 = *(void **)v1794;
          v389 = *(void **)&v1794[8];
          *(_QWORD *)&oslog[16] = *(_QWORD *)v1794;
          *(_QWORD *)&oslog[24] = *(_QWORD *)&v1794[8];
          *(_OWORD *)&oslog[64] = *(_OWORD *)&v1794[48];
          *(_OWORD *)&oslog[80] = *(_OWORD *)&v1794[64];
          *(_QWORD *)&oslog[96] = *(_QWORD *)&v1794[80];
          *(_OWORD *)&oslog[32] = *(_OWORD *)&v1794[16];
          *(_OWORD *)&oslog[48] = *(_OWORD *)&v1794[32];
          v390 = *(void **)&v1794[88];
          v391 = *(void **)&v1794[96];
          *(_QWORD *)&oslog[104] = *(_QWORD *)&v1794[88];
          *(_QWORD *)&oslog[112] = *(_QWORD *)&v1794[96];
          v392 = *(void **)&v1794[104];
          v393 = *(_QWORD **)&v1794[112];
          memset(&v1794[88], 0, 40);
          v394 = *(_QWORD *)&v1794[120];
          v395 = *(_QWORD **)&v1794[128];
          *(_QWORD *)&oslog[120] = v392;
          *(_QWORD *)&oslog[128] = v393;
          *(_QWORD *)&oslog[136] = *(_QWORD *)&v1794[120];
          *(_QWORD *)&oslog[144] = *(_QWORD *)&v1794[128];
          v396 = *(void **)&v1794[136];
          *(_QWORD *)&oslog[152] = *(_QWORD *)&v1794[136];
          v397 = *(_DWORD *)&v1794[144];
          *(_DWORD *)&oslog[160] = *(_DWORD *)&v1794[144];
          if (*(_QWORD *)&v1794[136])
          {
            v398 = *(_QWORD *)(*(_QWORD *)&v1794[128] + 8);
            if ((*(_QWORD *)&v1794[120] & (*(_QWORD *)&v1794[120] - 1)) != 0)
            {
              if (v398 >= *(_QWORD *)&v1794[120])
                v398 %= *(_QWORD *)&v1794[120];
            }
            else
            {
              v398 &= *(_QWORD *)&v1794[120] - 1;
            }
            v393[v398] = &oslog[144];
            *(_QWORD *)&v1794[128] = 0;
            *(_QWORD *)&v1794[136] = 0;
            v388 = *(void **)&oslog[16];
            v389 = *(void **)&oslog[24];
            v390 = *(void **)&oslog[104];
            v391 = *(void **)&oslog[112];
            v392 = *(void **)&oslog[120];
            v393 = *(_QWORD **)&oslog[128];
            v394 = *(_QWORD *)&oslog[136];
            v395 = *(_QWORD **)&oslog[144];
            v396 = *(void **)&oslog[152];
            v397 = *(_DWORD *)&oslog[160];
          }
          v399 = v1794[152];
          oslog[168] = v1794[152];
          memset(&oslog[216], 0, 24);
          memset(&oslog[184], 0, 24);
          *(_QWORD *)&oslog[208] = 0x3FF0000000000000;
          *(_QWORD *)&oslog[240] = 0x3FF0000000000000;
          LODWORD(object[0]) = v379;
          object[1] = *(void **)oslog;
          LODWORD(object[2]) = *(_DWORD *)&oslog[8];
          object[3] = v388;
          object[4] = v389;
          object[13] = *(void **)&oslog[96];
          *(_OWORD *)&object[9] = *(_OWORD *)&oslog[64];
          *(_OWORD *)&object[11] = *(_OWORD *)&oslog[80];
          *(_OWORD *)&object[5] = *(_OWORD *)&oslog[32];
          *(_OWORD *)&object[7] = *(_OWORD *)&oslog[48];
          object[14] = v390;
          object[15] = v391;
          memset(&oslog[104], 0, 40);
          object[16] = v392;
          object[17] = v393;
          *(_QWORD *)&oslog[176] = 0x3FF0000000000000;
          object[18] = (void *)v394;
          object[19] = v395;
          object[20] = v396;
          LODWORD(object[21]) = v397;
          if (v396)
          {
            v400 = v395[1];
            if ((v394 & (v394 - 1)) != 0)
            {
              if (v400 >= v394)
                v400 %= v394;
            }
            else
            {
              v400 &= v394 - 1;
            }
            v393[v400] = &object[19];
            *(_QWORD *)&oslog[144] = 0;
            *(_QWORD *)&oslog[152] = 0;
          }
          LOBYTE(object[22]) = v399;
          *(_OWORD *)&object[27] = *(_OWORD *)&oslog[208];
          *(_OWORD *)&object[29] = *(_OWORD *)&oslog[224];
          object[31] = *(void **)&oslog[240];
          *(_OWORD *)&object[23] = *(_OWORD *)&oslog[176];
          *(_OWORD *)&object[25] = *(_OWORD *)&oslog[192];
          v401 = sub_20F715E20(v1678, v380, (int *)object);
          v402 = object[19];
          if (object[19])
          {
            do
            {
              v403 = (_QWORD *)*v402;
              operator delete(v402);
              v402 = v403;
            }
            while (v403);
          }
          v404 = object[17];
          object[17] = 0;
          if (v404)
            operator delete(v404);
          if (object[14])
          {
            object[15] = object[14];
            operator delete(object[14]);
          }
          v405 = *(_QWORD **)&oslog[144];
          if (*(_QWORD *)&oslog[144])
          {
            do
            {
              v406 = (_QWORD *)*v405;
              operator delete(v405);
              v405 = v406;
            }
            while (v406);
          }
          v407 = *(void **)&oslog[128];
          *(_QWORD *)&oslog[128] = 0;
          if (v407)
            operator delete(v407);
          if (*(_QWORD *)&oslog[104])
          {
            *(_QWORD *)&oslog[112] = *(_QWORD *)&oslog[104];
            operator delete(*(void **)&oslog[104]);
          }
          v1702 = v401;
          if (v387)
            break;
LABEL_587:
          v1679[2] = 0;
          *v1679 = 0;
          *(_DWORD *)v1675 = 0;
          *(_BYTE *)(v1675 + 4) = 0;
LABEL_588:
          memset(object, 0, 32);
          LODWORD(object[4]) = 1065353216;
          v429 = *(uint64_t ***)(v1709 + 128);
          v430 = *v429;
          v431 = v429[1];
          while (v430 != v431)
          {
            v432 = (__int128 *)*v430;
            if (*(_QWORD *)(*v430 + 24))
            {
              if (*((_DWORD *)v432 + 4) != *((_DWORD *)v372 + 4))
                goto LABEL_589;
LABEL_604:
              v438 = *v432;
              *(_QWORD *)&oslog[16] = *((_QWORD *)v432 + 2);
              *(_OWORD *)oslog = v438;
              *(_OWORD *)&oslog[24] = *(__int128 *)((char *)v432 + 24);
              sub_20F61A180((uint64_t)object, (uint64_t *)oslog, (uint64_t)oslog);
              goto LABEL_589;
            }
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 288, (uint64_t)"frame->lens_model_", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v433 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v433 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (byte_254A6DE68)
              v434 = byte_254A6DE70 == 0;
            else
              v434 = 0;
            if (!v434)
            {
              v435 = qword_254A6DE40;
              for (k = qword_254A6DE48; v435 != k; v435 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v435)(*(_QWORD *)(v435 + 8), "frame->lens_model_", 18, "", 0);
            }
            v437 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v437 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              abort();
            qword_254A6DE58(unk_254A6DE60, "frame->lens_model_", 18, "", 0);
            v432 = (__int128 *)*v430;
            if (*(_DWORD *)(*v430 + 16) == *((_DWORD *)v372 + 4))
              goto LABEL_604;
LABEL_589:
            v430 += 2;
          }
          v439 = *((_QWORD *)v1702 + 1);
          v440 = v439 + 16;
          sub_20EB0F04C(v439 + 128, (uint64_t *)object);
          sub_20F813110(v440);
          memset(oslog, 0, 24);
          v441 = *(_QWORD **)(v1709 + 16);
          v442 = v441[2];
          if (v442)
          {
            if (v442 > 0xAAAAAAAAAAAAAAALL)
              sub_20E867F44();
            v443 = (char *)operator new(24 * v442);
            *(_QWORD *)oslog = v443;
            *(_QWORD *)&oslog[8] = v443;
            *(_QWORD *)&oslog[16] = &v443[24 * v442];
            v446 = (_QWORD *)*v441;
            v445 = v441 + 1;
            v444 = v446;
            if (v446 == v445)
              goto LABEL_614;
LABEL_627:
            while (2)
            {
              v454 = v444[6];
              if (*(_BYTE *)(v454 + 192))
                v455 = v454 + 40;
              else
                v455 = 0;
              if (*(_BYTE *)(v454 + 192))
              {
                v456 = *(_DWORD *)(v454 + 88);
                if (v456 == *((_DWORD *)v372 + 4))
                {
                  v457 = *(_QWORD *)(v454 + 200);
                  v458 = *(_QWORD *)(v454 + 208);
                  v459 = *(_QWORD *)(v454 + 72);
                  v460 = *(_DWORD *)(v454 + 80);
                  if (v458 != v457)
                  {
                    v461 = (v458 - v457) >> 5;
                    while (1)
                    {
                      v462 = v461 >> 1;
                      v463 = v457 + 32 * (v461 >> 1);
                      v464 = *(_DWORD *)(v463 + 16);
                      v465 = v464 >= v456;
                      if (v464 != v456)
                        goto LABEL_640;
                      if (*(_QWORD *)v463 >= v459)
                        break;
LABEL_634:
                      v457 = v463 + 32;
                      v462 = v461 + ~v462;
LABEL_635:
                      v461 = v462;
                      if (!v462)
                        goto LABEL_643;
                    }
                    if (*(_QWORD *)v463 != v459)
                      goto LABEL_635;
                    v465 = *(_DWORD *)(v463 + 8) >= v460;
LABEL_640:
                    if (v465)
                      goto LABEL_635;
                    goto LABEL_634;
                  }
LABEL_643:
                  if (v457 != v458
                    && *(_DWORD *)(v457 + 16) == v456
                    && *(_QWORD *)v457 == v459
                    && *(_DWORD *)(v457 + 8) == v460)
                  {
                    v466 = *(_QWORD *)(v457 + 24);
                    v467 = *(_DWORD *)(v454 + 32);
                    v468 = *(_QWORD *)&oslog[16];
                    if ((unint64_t)v443 >= *(_QWORD *)&oslog[16])
                      goto LABEL_648;
LABEL_658:
                    *(_DWORD *)v443 = v467;
                    v476 = v443 + 24;
                    *((_QWORD *)v443 + 1) = v466;
                    *((_QWORD *)v443 + 2) = v455;
                  }
                  else
                  {
                    v466 = 0;
                    v467 = *(_DWORD *)(v454 + 32);
                    v468 = *(_QWORD *)&oslog[16];
                    if ((unint64_t)v443 < *(_QWORD *)&oslog[16])
                      goto LABEL_658;
LABEL_648:
                    v469 = v372;
                    v470 = *(char **)oslog;
                    v471 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v443[-*(_QWORD *)oslog] >> 3);
                    v472 = v471 + 1;
                    if (v471 + 1 > 0xAAAAAAAAAAAAAAALL)
                      sub_20E867F44();
                    v473 = 0xAAAAAAAAAAAAAAABLL * ((v468 - *(_QWORD *)oslog) >> 3);
                    if (2 * v473 > v472)
                      v472 = 2 * v473;
                    if (v473 >= 0x555555555555555)
                      v474 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v474 = v472;
                    if (v474)
                    {
                      if (v474 > 0xAAAAAAAAAAAAAAALL)
                        sub_20E877A38();
                      v475 = (char *)operator new(24 * v474);
                    }
                    else
                    {
                      v475 = 0;
                    }
                    v477 = &v475[24 * v471];
                    *(_DWORD *)v477 = v467;
                    *((_QWORD *)v477 + 1) = v466;
                    *((_QWORD *)v477 + 2) = v455;
                    v478 = v477;
                    v372 = v469;
                    if (v443 != v470)
                    {
                      do
                      {
                        v479 = *(_OWORD *)(v443 - 24);
                        *((_QWORD *)v478 - 1) = *((_QWORD *)v443 - 1);
                        *(_OWORD *)(v478 - 24) = v479;
                        v478 -= 24;
                        v443 -= 24;
                      }
                      while (v443 != v470);
                      v443 = *(char **)oslog;
                    }
                    v476 = v477 + 24;
                    *(_QWORD *)oslog = v478;
                    *(_QWORD *)&oslog[8] = v477 + 24;
                    *(_QWORD *)&oslog[16] = &v475[24 * v474];
                    if (v443)
                      operator delete(v443);
                  }
                  *(_QWORD *)&oslog[8] = v476;
                  v443 = v476;
                }
              }
              v480 = (_QWORD *)v444[1];
              if (v480)
              {
                do
                {
                  v481 = v480;
                  v480 = (_QWORD *)*v480;
                }
                while (v480);
              }
              else
              {
                do
                {
                  v481 = (_QWORD *)v444[2];
                  _ZF = *v481 == (_QWORD)v444;
                  v444 = v481;
                }
                while (!_ZF);
              }
              v444 = v481;
              if (v481 == v445)
                goto LABEL_614;
              continue;
            }
          }
          v443 = 0;
          v447 = (_QWORD *)*v441;
          v445 = v441 + 1;
          v444 = v447;
          if (v447 != v445)
            goto LABEL_627;
LABEL_614:
          sub_20F813380((_QWORD *)(*((_QWORD *)v1702 + 1) + 16), (uint64_t)oslog);
          if (*(_QWORD *)oslog)
          {
            *(_QWORD *)&oslog[8] = *(_QWORD *)oslog;
            operator delete(*(void **)oslog);
          }
          v448 = object[2];
          if (object[2])
          {
            do
            {
              v449 = (_QWORD *)*v448;
              operator delete(v448);
              v448 = v449;
            }
            while (v449);
          }
          v450 = object[0];
          object[0] = 0;
          if (v450)
            operator delete(v450);
          v451 = *(_QWORD **)&v1794[128];
          if (*(_QWORD *)&v1794[128])
          {
            do
            {
              v452 = (_QWORD *)*v451;
              operator delete(v451);
              v451 = v452;
            }
            while (v452);
          }
          v453 = *(void **)&v1794[112];
          *(_QWORD *)&v1794[112] = 0;
          if (v453)
            operator delete(v453);
          v371 = v1657;
          if (*(_QWORD *)&v1794[88])
          {
            *(_QWORD *)&v1794[96] = *(_QWORD *)&v1794[88];
            operator delete(*(void **)&v1794[88]);
          }
          v372 = (uint64_t *)*v372;
          if (!v372)
            goto LABEL_672;
        }
        v408 = *(char **)(v1709 + 6400);
        v409 = *(_QWORD *)(v1709 + 6408);
        if ((unint64_t)v408 < v409)
        {
          *(_DWORD *)v408 = v379;
          v410 = (uint64_t)(v408 + 4);
LABEL_586:
          *(_QWORD *)(v1709 + 6400) = v410;
          goto LABEL_587;
        }
        v411 = (char *)*v1670;
        v412 = v408 - (_BYTE *)*v1670;
        v413 = v412 >> 2;
        v414 = (v412 >> 2) + 1;
        if (v414 >> 62)
          sub_20E867F44();
        v415 = v409 - (_QWORD)v411;
        if (v415 >> 1 > v414)
          v414 = v415 >> 1;
        if ((unint64_t)v415 >= 0x7FFFFFFFFFFFFFFCLL)
          v416 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v416 = v414;
        if (v416)
        {
          if (v416 >> 62)
            sub_20E877A38();
          v417 = operator new(4 * v416);
          v418 = &v417[4 * v413];
          *v418 = v379;
          v410 = (uint64_t)(v418 + 1);
          v419 = v408 - v411;
          if (v408 == v411)
            goto LABEL_584;
        }
        else
        {
          v417 = 0;
          v418 = (_DWORD *)(4 * v413);
          *(_DWORD *)(4 * v413) = v379;
          v410 = 4 * v413 + 4;
          v419 = v408 - v411;
          if (v408 == v411)
          {
LABEL_584:
            *(_QWORD *)(v1709 + 6392) = v418;
            *(_QWORD *)(v1709 + 6400) = v410;
            *(_QWORD *)(v1709 + 6408) = &v417[4 * v416];
            if (v411)
              operator delete(v411);
            goto LABEL_586;
          }
        }
        v420 = v419 - 4;
        if (v420 < 0x2C)
          goto LABEL_2041;
        if ((unint64_t)(v408 - v417 - v412) < 0x20)
          goto LABEL_2041;
        v421 = (v420 >> 2) + 1;
        v422 = 4 * (v421 & 0x7FFFFFFFFFFFFFF8);
        v423 = &v408[-v422];
        v418 = (_DWORD *)((char *)v418 - v422);
        v424 = &v417[4 * v413 - 16];
        v425 = v408 - 16;
        v426 = v421 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v427 = *(_OWORD *)v425;
          *(v424 - 1) = *((_OWORD *)v425 - 1);
          *v424 = v427;
          v424 -= 2;
          v425 -= 32;
          v426 -= 8;
        }
        while (v426);
        v408 = v423;
        if (v421 != (v421 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_2041:
          do
          {
            v428 = *((_DWORD *)v408 - 1);
            v408 -= 4;
            *--v418 = v428;
          }
          while (v408 != v411);
        }
        goto LABEL_584;
      }
    }
    else
    {
      memset(object, 0, 32);
      if (sub_20F5B8114((_QWORD *)(v192 + 4880), (int *)object, oslog, 1))
      {
        *(_QWORD *)(v192 + 6448) = *(_QWORD *)(v192 + 6440);
        *(_QWORD *)(v192 + 6472) = *(_QWORD *)(v192 + 6464);
        *(_QWORD *)(v192 + 6496) = *(_QWORD *)(v192 + 6488);
        *(_QWORD *)(v192 + 6520) = *(_QWORD *)(v192 + 6512);
        *(_QWORD *)(v192 + 6544) = *(_QWORD *)(v192 + 6536);
        *(_QWORD *)(v192 + 6568) = *(_QWORD *)(v192 + 6560);
        *(_QWORD *)(v192 + 6592) = *(_QWORD *)(v192 + 6584);
        *(_QWORD *)(v192 + 6616) = *(_QWORD *)(v192 + 6608);
        v622 = *(_QWORD *)(v192 + 5656);
        v623 = *(_QWORD *)(v192 + 5664);
        while (v622 != v623)
        {
          v624 = *(_QWORD *)(v622 + 208);
          if (*(_BYTE *)(v622 + 496)
            || (*(_BYTE *)(v624 + 4) & 6) != 0
            || (*(_BYTE *)(*(_QWORD *)(v622 + 216) + 4) & 6) != 0)
          {
            sub_20F394A20(v192 + 6440, v624);
            sub_20F3D35E0((_QWORD *)(v192 + 6440), *(_QWORD *)(v622 + 216));
          }
          v622 += 504;
        }
        v625 = *(_QWORD *)(v192 + 5680);
        v626 = *(_QWORD *)(v192 + 5688);
        while (v625 != v626)
        {
          v627 = *(_QWORD *)(v625 + 136);
          if (*(_BYTE *)(v625 + 272) || (*(_BYTE *)(v627 + 4) & 6) != 0)
            sub_20F394A20(v192 + 6440, v627);
          v625 += 280;
        }
        v628 = (uint64_t *)v192;
        sub_20F5B8680(*(_QWORD *)(v192 + 5704), *(_QWORD *)(v192 + 5712), (_QWORD *)(v192 + 6440));
        sub_20F5B85BC(v628[716], v628[717], (_QWORD *)(v192 + 6440));
        sub_20F5B8444(v628[719], v628[720], (_QWORD *)(v192 + 6440));
        v629 = *(_QWORD *)(v192 + 5776);
        v630 = *(_QWORD *)(v192 + 5784);
        while (v629 != v630)
        {
          v631 = *(_QWORD *)(v629 + 736);
          if (*(_BYTE *)(v629 + 880)
            || (*(_BYTE *)(v631 + 4) & 6) != 0
            || (*(_BYTE *)(*(_QWORD *)(v629 + 744) + 4) & 6) != 0)
          {
            sub_20F394A20(v192 + 6440, v631);
            sub_20F394A20(v192 + 6440, *(_QWORD *)(v629 + 744));
          }
          v629 += 888;
        }
        v632 = (*(_QWORD *)(v192 + 6592) - *(_QWORD *)(v192 + 6584)) >> 2;
        if (LODWORD(object[3]) > v632)
          LODWORD(v632) = object[3];
        _CF = *(_DWORD *)&oslog[24] >= v632;
        v633 = *(_DWORD *)&oslog[24] - v632;
        if (_CF)
          v634 = v633;
        else
          v634 = 0;
        sub_20F59A618((_QWORD *)(v192 + 4880));
        if (!v634)
          goto LABEL_525;
      }
      else if (!*(_DWORD *)&oslog[24])
      {
        goto LABEL_525;
      }
    }
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 271, (uint64_t)"!this->linear_system_.graph().template numberOfVariable<VARIABLE_TYPE>()", 72, (uint64_t)"CameraCalibVariables of this type have already been added.", 58, (void (*)(void **))sub_21023DDB0))goto LABEL_525;
LABEL_1998:
    abort();
  }
  v371 = v1657;
  if (v1789)
    goto LABEL_673;
LABEL_711:
  memset(object, 0, 24);
  sub_20F776D44(v1709);
  if (object[0])
    operator delete(object[0]);
  v532 = *v371;
  if (!*(_QWORD *)(*v371 + 64))
    goto LABEL_918;
  v533 = v1791;
  v534 = *(_QWORD **)(v532 + 48);
  v535 = (int64x2_t *)v1721;
  v536 = v534[6];
  v1685 = *(_QWORD *)(v536 + 64);
  v1700 = *(int8x16_t *)(v536 + 32);
  v1703 = *(int8x16_t *)(v536 + 48);
  v1691 = *(int8x16_t *)v536;
  *(_OWORD *)__dsta = *(_OWORD *)(v536 + 16);
  __sbb = *(_QWORD *)(v536 + 88);
  v1710 = *(int8x16_t *)(v536 + 72);
  v539 = (char *)operator new(0x58uLL);
  v540 = dbl_2103B48F0[v533 == 0];
  *((_QWORD *)v539 + 1) = 0;
  v541 = (unint64_t *)(v539 + 8);
  *((_QWORD *)v539 + 2) = 0;
  *(_QWORD *)v539 = &off_24CA016C8;
  *((_QWORD *)v539 + 3) = &off_24CA01718;
  v542 = v539 + 24;
  v543 = sqrt(v540);
  *((double *)v539 + 5) = v543;
  *((double *)v539 + 6) = v543;
  v544 = vdupq_n_s64(0x40F86A0000000000uLL);
  *(int64x2_t *)(v539 + 56) = v544;
  *(int64x2_t *)(v539 + 72) = v544;
  v539[32] = 1;
  v1715 = (std::__shared_weak_count *)v539;
  v545 = v535->i64[1];
  if (!*(_QWORD *)(v545 + 64))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 968, (uint64_t)"!this->viobadata_ref_.state_set->empty()", 40, (uint64_t)"First VIOState must exist to add the prior.", 43, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v545 = v535->i64[1];
  }
  v546 = v535 + 366;
  v547 = vextq_s8(v1703, v1703, 8uLL).u64[0];
  v548 = vextq_s8(v1700, v1700, 8uLL).u64[0];
  v549 = vextq_s8(*(int8x16_t *)__dsta, *(int8x16_t *)__dsta, 8uLL).u64[0];
  v550 = vextq_s8(v1691, v1691, 8uLL).u64[0];
  v551 = vextq_s8(v1710, v1710, 8uLL).u64[0];
  v552 = *(_QWORD *)(v545 + 48);
  v553 = (void **)v535[355].i64[1];
  v554 = (char *)v535[355].i64[0];
  if (v553 == (void **)v554)
    v555 = 0;
  else
    v555 = (*((_DWORD *)v553 - 68) + 1);
  v556 = *(_DWORD *)(v552 + 40);
  *(_QWORD *)&v557 = v1691.i64[0];
  *(void **)&v558 = __dsta[0];
  *((_QWORD *)&v557 + 1) = v550;
  *(_QWORD *)v1794 = v555;
  *((_QWORD *)&v558 + 1) = v549;
  *(_OWORD *)&v1794[16] = v557;
  *(_OWORD *)&v1794[32] = v558;
  *(_QWORD *)&v557 = v1700.i64[0];
  *(_QWORD *)&v558 = v1703.i64[0];
  *((_QWORD *)&v557 + 1) = v548;
  *((_QWORD *)&v558 + 1) = v547;
  *(_OWORD *)&v1794[48] = v557;
  *(_OWORD *)&v1794[64] = v558;
  *(_QWORD *)&v557 = v1710.i64[0];
  *((_QWORD *)&v557 + 1) = v551;
  *(_QWORD *)&v1794[80] = v1685;
  *(_QWORD *)&v1794[104] = __sbb;
  *(_OWORD *)&v1794[88] = v557;
  *(_QWORD *)&v1794[112] = v539 + 24;
  *(_QWORD *)&v1794[120] = v539;
  do
    v559 = __ldxr(v541);
  while (__stxr(v559 + 1, v541));
  v1728 = 0uLL;
  v560 = v553;
  v1828 = 0uLL;
  v561 = (char *)v553 - v554;
  if (v553 != (void **)v554)
  {
    v560 = v553;
    if ((unint64_t)*(v553 - 35) >= v555)
    {
      v562 = 0xAF8AF8AF8AF8AF8BLL * (v561 >> 3);
      v563 = (void **)v554;
      do
      {
        v564 = v562 >> 1;
        v565 = (unint64_t *)&v563[35 * (v562 >> 1)];
        v566 = *v565;
        v567 = (void **)(v565 + 35);
        v562 += ~(v562 >> 1);
        if (v566 < v555)
          v563 = v567;
        else
          v562 = v564;
      }
      while (v562);
      v560 = v553;
      if (v563 != v553)
      {
        v560 = v563;
        if (*v563 == (void *)v555)
          goto LABEL_812;
      }
    }
  }
  *(_QWORD *)&v568 = v1691.i64[0];
  *((_QWORD *)&v568 + 1) = v550;
  *(_OWORD *)oslog = *(_OWORD *)v1794;
  *(_OWORD *)&oslog[16] = v568;
  *(void **)&v569 = __dsta[0];
  *((_QWORD *)&v569 + 1) = v549;
  *(_QWORD *)&v570 = v1700.i64[0];
  *((_QWORD *)&v570 + 1) = v548;
  *(_OWORD *)&oslog[32] = v569;
  *(_OWORD *)&oslog[48] = v570;
  *(_QWORD *)&v571 = v1703.i64[0];
  *((_QWORD *)&v571 + 1) = v547;
  *(_OWORD *)&oslog[64] = v571;
  *(_QWORD *)&oslog[80] = v1685;
  *(_QWORD *)&oslog[104] = __sbb;
  *(_QWORD *)&v572 = v1710.i64[0];
  *((_QWORD *)&v572 + 1) = v551;
  *(_OWORD *)&oslog[88] = v572;
  *(_QWORD *)&oslog[112] = v539 + 24;
  *(_QWORD *)&oslog[120] = v539;
  *(_QWORD *)&v1794[112] = 0;
  *(_QWORD *)&v1794[120] = 0;
  memset(&oslog[248], 0, 17);
  *(_QWORD *)&oslog[128] = 0;
  *(_QWORD *)&oslog[232] = 0xBFF0000000000000;
  oslog[240] = 0;
  v573 = (void **)v535[305].i64[1];
  v574 = v535[306].i64[0];
  if ((void **)v574 != v573)
  {
    v575 = (v574 - (uint64_t)v573) >> 4;
    do
    {
      v576 = v575 >> 1;
      v577 = &v573[2 * (v575 >> 1)];
      v579 = *(_DWORD *)v577;
      v578 = v577 + 2;
      v537 = (void **)v579;
      v538 = ~(v575 >> 1);
      v575 += v538;
      if (v579 < v556)
        v573 = v578;
      else
        v575 = v576;
    }
    while (v575);
    if (v573 != (void **)v574 && *(_DWORD *)v573 == v556)
    {
      *(_QWORD *)&oslog[128] = v573[1];
      v580 = *(void **)&oslog[128];
      ++*((_DWORD *)v573[1] + 2);
      if (*((_BYTE *)v580 + 20))
      {
        *(_OWORD *)&object[1] = *(_OWORD *)oslog;
        *(_OWORD *)&object[5] = *(_OWORD *)&oslog[32];
        *(_OWORD *)&object[7] = *(_OWORD *)&oslog[48];
        *(_OWORD *)&object[9] = *(_OWORD *)&oslog[64];
        object[0] = (void *)v555;
        object[11] = *(void **)&oslog[80];
        *(_OWORD *)&object[3] = *(_OWORD *)&oslog[16];
        *(_OWORD *)&object[12] = *(_OWORD *)&oslog[88];
        object[14] = *(void **)&oslog[104];
        object[15] = v539 + 24;
        *(_QWORD *)&oslog[112] = 0;
        *(_QWORD *)&oslog[120] = 0;
        object[16] = v539;
        object[17] = v580;
        *(_OWORD *)&object[18] = *(_OWORD *)&oslog[136];
        *(_OWORD *)&object[20] = *(_OWORD *)&oslog[152];
        *(_OWORD *)&object[22] = *(_OWORD *)&oslog[168];
        *(_OWORD *)&object[24] = *(_OWORD *)&oslog[184];
        *(_OWORD *)&object[26] = *(_OWORD *)&oslog[200];
        *(_OWORD *)&object[28] = *(_OWORD *)&oslog[216];
        LOBYTE(object[31]) = oslog[240];
        object[30] = *(void **)&oslog[232];
        memset(&object[32], 0, 17);
        *(_QWORD *)&oslog[248] = 0;
        *(_QWORD *)&oslog[256] = 0;
        if (v553 == v560 || *v560 != (void *)v555)
        {
          __dstb = v580;
          v538 = (int64_t)&object[1];
          v537 = &object[3];
          v578 = &object[12];
          v1704 = (void **)v554;
          v581 = (char *)v560 - v554;
          v1711 = 0xAF8AF8AF8AF8AF8BLL * (((char *)v560 - v554) >> 3);
          v582 = v535[356].u64[0];
          if ((unint64_t)v553 >= v582)
          {
            v1261 = 1 - 0x5075075075075075 * (v561 >> 3);
            if (v1261 > 0xEA0EA0EA0EA0EALL)
              sub_20E867F44();
            v1262 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v582 - (_QWORD)v554) >> 3);
            if (2 * v1262 > v1261)
              v1261 = 2 * v1262;
            if (v1262 >= 0x75075075075075)
              v1263 = 0xEA0EA0EA0EA0EALL;
            else
              v1263 = v1261;
            v1842[4] = &v535[356];
            v1683 = v534;
            if (v1263)
            {
              if (v1263 > 0xEA0EA0EA0EA0EALL)
                sub_20E877A38();
              v1264 = (char *)operator new(280 * v1263);
              v578 = &object[12];
              v537 = &object[3];
              v538 = (int64_t)&object[1];
            }
            else
            {
              v1264 = 0;
            }
            v1289 = &v1264[280 * v1711];
            v1842[0] = v1264;
            v1842[1] = v1289;
            v1842[2] = v1289;
            v1842[3] = &v1264[280 * v1263];
            if (v1711 == v1263)
            {
              if (v581 < 1)
              {
                if (v1704 == v560)
                  v1294 = 1;
                else
                  v1294 = 2 * v1711;
                if (v1294 > 0xEA0EA0EA0EA0EALL)
                  sub_20E877A38();
                v1295 = (char *)operator new(280 * v1294);
                v546 = v535 + 366;
                v1289 = &v1295[280 * (v1294 >> 2)];
                v1842[0] = v1295;
                v1842[1] = v1289;
                v1842[3] = &v1295[280 * v1294];
                if (v1264)
                  operator delete(v1264);
                v1292 = (uint64_t)v1289;
              }
              else
              {
                v1290 = v1711 + 2;
                if (v1711 >= -1)
                  v1290 = v1711 + 1;
                v1291 = v1290 >> 1;
                v1292 = sub_20F5B6660((uint64_t)v1289, (uint64_t)v1289, (uint64_t)&v1289[-280 * (v1290 >> 1)]);
                v546 = v535 + 366;
                v1289 = (char *)v1842[1] - 280 * v1291;
                v1842[1] = v1289;
                v555 = (unint64_t)object[0];
              }
              v578 = &object[12];
              v537 = &object[3];
              v538 = (int64_t)&object[1];
            }
            else
            {
              v1292 = (uint64_t)&v1264[280 * v1711];
              v546 = v535 + 366;
            }
            *(_QWORD *)v1292 = v555;
            *(_OWORD *)(v1292 + 8) = *(_OWORD *)&object[1];
            v1296 = *(_OWORD *)&object[3];
            *(_OWORD *)(v1292 + 40) = *(_OWORD *)&object[5];
            v1297 = *(_OWORD *)&object[9];
            *(_OWORD *)(v1292 + 56) = *(_OWORD *)&object[7];
            *(_OWORD *)(v1292 + 72) = v1297;
            *(void **)(v1292 + 88) = object[11];
            *(_OWORD *)(v1292 + 24) = v1296;
            *(void **)(v1292 + 112) = object[14];
            *(_OWORD *)(v1292 + 96) = *(_OWORD *)&object[12];
            *(_OWORD *)(v1292 + 120) = *(_OWORD *)&object[15];
            object[15] = 0;
            object[16] = 0;
            *(void **)(v1292 + 136) = object[17];
            v1298 = *(_OWORD *)&object[18];
            v1299 = *(_OWORD *)&object[22];
            *(_OWORD *)(v1292 + 160) = *(_OWORD *)&object[20];
            *(_OWORD *)(v1292 + 176) = v1299;
            *(_OWORD *)(v1292 + 144) = v1298;
            v1300 = *(_OWORD *)&object[24];
            v1301 = *(_OWORD *)&object[28];
            *(_OWORD *)(v1292 + 208) = *(_OWORD *)&object[26];
            *(_OWORD *)(v1292 + 224) = v1301;
            *(_OWORD *)(v1292 + 192) = v1300;
            v1302 = object[30];
            *(_BYTE *)(v1292 + 248) = object[31];
            *(_QWORD *)(v1292 + 240) = v1302;
            *(_OWORD *)(v1292 + 256) = *(_OWORD *)&object[32];
            object[32] = 0;
            object[33] = 0;
            *(_BYTE *)(v1292 + 272) = object[34];
            v1303 = (char *)(v1292 + 280);
            v1842[2] = (void *)(v1292 + 280);
            v1304 = (void **)v535[355].i64[0];
            if (v1304 != v560)
            {
              v1305 = 0;
              do
              {
                v1306 = &v1289[v1305 * 8];
                v1307 = &v560[v1305];
                *(_QWORD *)&v1289[v1305 * 8 - 280] = v560[v1305 - 35];
                *(_OWORD *)&v1289[v1305 * 8 - 272] = *(_OWORD *)&v560[v1305 - 34];
                v1309 = *(_OWORD *)&v560[v1305 - 28];
                v1308 = *(_OWORD *)&v560[v1305 - 26];
                v1310 = *(_OWORD *)&v560[v1305 - 30];
                *((_QWORD *)v1306 - 24) = v560[v1305 - 24];
                *((_OWORD *)v1306 - 14) = v1309;
                *((_OWORD *)v1306 - 13) = v1308;
                *((_OWORD *)v1306 - 15) = v1310;
                *((_OWORD *)v1306 - 16) = *(_OWORD *)&v560[v1305 - 32];
                v1311 = *(_OWORD *)&v560[v1305 - 23];
                *((_QWORD *)v1306 - 21) = v560[v1305 - 21];
                *(_OWORD *)(v1306 - 184) = v1311;
                *((_OWORD *)v1306 - 10) = *(_OWORD *)&v560[v1305 - 20];
                *(v1307 - 20) = 0;
                *(v1307 - 19) = 0;
                *((_QWORD *)v1306 - 18) = v560[v1305 - 18];
                v1312 = *(_OWORD *)&v560[v1305 - 17];
                v1313 = *(_OWORD *)&v560[v1305 - 15];
                *(_OWORD *)(v1306 - 104) = *(_OWORD *)&v560[v1305 - 13];
                *(_OWORD *)(v1306 - 120) = v1313;
                *(_OWORD *)(v1306 - 136) = v1312;
                v1314 = *(_OWORD *)&v560[v1305 - 11];
                v1315 = *(_OWORD *)&v560[v1305 - 9];
                *(_OWORD *)(v1306 - 56) = *(_OWORD *)&v560[v1305 - 7];
                *(_OWORD *)(v1306 - 72) = v1315;
                *(_OWORD *)(v1306 - 88) = v1314;
                v1316 = v560[v1305 - 5];
                *(v1306 - 32) = (char)v560[v1305 - 4];
                *((_QWORD *)v1306 - 5) = v1316;
                *(_OWORD *)(v1306 - 24) = *(_OWORD *)&v560[v1305 - 3];
                *(v1307 - 3) = 0;
                *(v1307 - 2) = 0;
                *(v1306 - 8) = (char)v560[v1305 - 1];
                v1305 -= 35;
              }
              while (&v560[v1305] != v1304);
              v1303 = (char *)v1842[2];
              v1289 += v1305 * 8;
            }
            v1842[1] = v1289;
            v1317 = (void **)v535[355].i64[1];
            if (v1317 != v560)
            {
              do
              {
                *(_QWORD *)v1303 = *v560;
                *(_OWORD *)(v1303 + 8) = *(_OWORD *)(v560 + 1);
                v1318 = *(_OWORD *)(v560 + 7);
                v1319 = *(_OWORD *)(v560 + 9);
                v1320 = v560[11];
                *(_OWORD *)(v1303 + 40) = *(_OWORD *)(v560 + 5);
                *((_QWORD *)v1303 + 11) = v1320;
                *(_OWORD *)(v1303 + 72) = v1319;
                *(_OWORD *)(v1303 + 56) = v1318;
                *(_OWORD *)(v1303 + 24) = *(_OWORD *)(v560 + 3);
                v1321 = *((_OWORD *)v560 + 6);
                *((_QWORD *)v1303 + 14) = v560[14];
                *((_OWORD *)v1303 + 6) = v1321;
                *(_OWORD *)(v1303 + 120) = *(_OWORD *)(v560 + 15);
                v560[15] = 0;
                v560[16] = 0;
                *((_QWORD *)v1303 + 17) = v560[17];
                v1322 = *((_OWORD *)v560 + 9);
                v1323 = *((_OWORD *)v560 + 11);
                *((_OWORD *)v1303 + 10) = *((_OWORD *)v560 + 10);
                *((_OWORD *)v1303 + 11) = v1323;
                *((_OWORD *)v1303 + 9) = v1322;
                v1324 = *((_OWORD *)v560 + 12);
                v1325 = *((_OWORD *)v560 + 14);
                *((_OWORD *)v1303 + 13) = *((_OWORD *)v560 + 13);
                *((_OWORD *)v1303 + 14) = v1325;
                *((_OWORD *)v1303 + 12) = v1324;
                v1326 = v560[30];
                v1303[248] = *((_BYTE *)v560 + 248);
                *((_QWORD *)v1303 + 30) = v1326;
                *((_OWORD *)v1303 + 16) = *((_OWORD *)v560 + 16);
                v560[32] = 0;
                v560[33] = 0;
                v1303[272] = *((_BYTE *)v560 + 272);
                v1303 += 280;
                v560 += 35;
              }
              while (v560 != v1317);
              v1289 = (char *)v1842[1];
              v560 = (void **)v535[355].i64[1];
            }
            v1327 = (void **)v535[355].i64[0];
            v535[355].i64[0] = (uint64_t)v1289;
            v535[355].i64[1] = (uint64_t)v1303;
            v1328 = (void *)v535[356].i64[0];
            v535[356].i64[0] = (uint64_t)v1842[3];
            v1842[3] = v1328;
            v1842[1] = v1327;
            v1842[0] = v1327;
            if (v560 != v1327)
            {
              do
              {
                v1842[2] = v560 - 35;
                v1329 = (std::__shared_weak_count *)*(v560 - 2);
                if (v1329)
                {
                  v1330 = (unint64_t *)&v1329->__shared_owners_;
                  do
                    v1331 = __ldaxr(v1330);
                  while (__stlxr(v1331 - 1, v1330));
                  if (!v1331)
                  {
                    ((void (*)(std::__shared_weak_count *))v1329->__on_zero_shared)(v1329);
                    std::__shared_weak_count::__release_weak(v1329);
                  }
                }
                v1332 = (std::__shared_weak_count *)*(v560 - 19);
                if (v1332)
                {
                  v1333 = (unint64_t *)&v1332->__shared_owners_;
                  do
                    v1334 = __ldaxr(v1333);
                  while (__stlxr(v1334 - 1, v1333));
                  if (!v1334)
                  {
                    ((void (*)(std::__shared_weak_count *))v1332->__on_zero_shared)(v1332);
                    std::__shared_weak_count::__release_weak(v1332);
                  }
                }
                v560 = (void **)v1842[2];
              }
              while (v1842[2] != v1327);
              v560 = (void **)v1842[0];
            }
            v534 = v1683;
            if (v560)
              operator delete(v560);
          }
          else if (v560 == v553)
          {
            *v553 = (void *)v555;
            v1279 = &v554[8 * (((char *)v560 - v554) >> 3)];
            *(_OWORD *)(v1279 + 8) = *(_OWORD *)&object[1];
            v1281 = *(_OWORD *)&object[7];
            v1280 = *(_OWORD *)&object[9];
            v1282 = object[11];
            *(_OWORD *)(v1279 + 40) = *(_OWORD *)&object[5];
            *((_QWORD *)v1279 + 11) = v1282;
            *(_OWORD *)(v1279 + 72) = v1280;
            *(_OWORD *)(v1279 + 56) = v1281;
            *(_OWORD *)(v1279 + 24) = *(_OWORD *)&object[3];
            v1283 = object[14];
            *((_OWORD *)v1279 + 6) = *(_OWORD *)&object[12];
            *((_QWORD *)v1279 + 14) = v1283;
            *((_QWORD *)v1279 + 15) = v542;
            *((_QWORD *)v1279 + 16) = v539;
            object[15] = 0;
            object[16] = 0;
            *((_QWORD *)v1279 + 17) = v580;
            v1284 = *(_OWORD *)&object[18];
            v1285 = *(_OWORD *)&object[22];
            *((_OWORD *)v1279 + 10) = *(_OWORD *)&object[20];
            *((_OWORD *)v1279 + 11) = v1285;
            *((_OWORD *)v1279 + 9) = v1284;
            v1286 = *(_OWORD *)&object[24];
            v1287 = *(_OWORD *)&object[28];
            *((_OWORD *)v1279 + 13) = *(_OWORD *)&object[26];
            *((_OWORD *)v1279 + 14) = v1287;
            *((_OWORD *)v1279 + 12) = v1286;
            v1288 = object[30];
            v1279[248] = (char)object[31];
            *((_QWORD *)v1279 + 30) = v1288;
            *((_QWORD *)v1279 + 32) = 0;
            *((_QWORD *)v1279 + 33) = 0;
            object[32] = 0;
            object[33] = 0;
            v1279[272] = 0;
            v535[355].i64[1] = (uint64_t)(v553 + 35);
          }
          else
          {
            v1831 = *(_OWORD *)oslog;
            *(_OWORD *)&v1842[2] = *(_OWORD *)&oslog[32];
            *(_OWORD *)&v1842[4] = *(_OWORD *)&oslog[48];
            *(_OWORD *)&v1842[6] = *(_OWORD *)&oslog[64];
            v1842[8] = *(void **)&oslog[80];
            *(_OWORD *)v1842 = *(_OWORD *)&oslog[16];
            *(_QWORD *)&v1798 = *(_QWORD *)&oslog[104];
            v1797 = *(_OWORD *)&oslog[88];
            object[15] = 0;
            object[16] = 0;
            v1805[1] = *(_OWORD *)&oslog[152];
            v1805[2] = *(_OWORD *)&oslog[168];
            v1805[0] = *(_OWORD *)&oslog[136];
            v1835 = *(_OWORD *)&oslog[200];
            v1836 = *(__n128 *)&oslog[216];
            v1834 = *(_OWORD *)&oslog[184];
            LOBYTE(v1725) = oslog[240];
            v1724 = *(void **)&oslog[232];
            v583 = v553 - 35;
            v584 = v553;
            object[32] = 0;
            object[33] = 0;
            if ((unint64_t)v553 >= 0x118)
            {
              v585 = v553 - 35;
              v584 = v553;
              do
              {
                *v584 = *v585;
                *(_OWORD *)(v584 + 1) = *(_OWORD *)(v585 + 1);
                v586 = *(_OWORD *)(v585 + 7);
                v587 = *(_OWORD *)(v585 + 9);
                v588 = v585[11];
                *(_OWORD *)(v584 + 5) = *(_OWORD *)(v585 + 5);
                v584[11] = v588;
                *(_OWORD *)(v584 + 9) = v587;
                *(_OWORD *)(v584 + 7) = v586;
                *(_OWORD *)(v584 + 3) = *(_OWORD *)(v585 + 3);
                v589 = *((_OWORD *)v585 + 6);
                v584[14] = v585[14];
                *((_OWORD *)v584 + 6) = v589;
                *(_OWORD *)(v584 + 15) = *(_OWORD *)(v585 + 15);
                v585[15] = 0;
                v585[16] = 0;
                v584[17] = v585[17];
                v590 = *((_OWORD *)v585 + 9);
                v591 = *((_OWORD *)v585 + 11);
                *((_OWORD *)v584 + 10) = *((_OWORD *)v585 + 10);
                *((_OWORD *)v584 + 11) = v591;
                *((_OWORD *)v584 + 9) = v590;
                v592 = *((_OWORD *)v585 + 12);
                v593 = *((_OWORD *)v585 + 14);
                *((_OWORD *)v584 + 13) = *((_OWORD *)v585 + 13);
                *((_OWORD *)v584 + 14) = v593;
                *((_OWORD *)v584 + 12) = v592;
                v594 = v585[30];
                *((_BYTE *)v584 + 248) = *((_BYTE *)v585 + 248);
                v584[30] = v594;
                *((_OWORD *)v584 + 16) = *((_OWORD *)v585 + 16);
                v585[32] = 0;
                v585[33] = 0;
                *((_BYTE *)v584 + 272) = *((_BYTE *)v585 + 272);
                v584 += 35;
                v585 += 35;
              }
              while (v585 < v553);
            }
            v1681 = v534;
            v535[355].i64[1] = (uint64_t)v584;
            if (v553 != v560 + 35)
            {
              do
              {
                v603 = v583 - 35;
                v604 = v553 - 35;
                *v604 = *(v583 - 35);
                *(_OWORD *)(v604 + 1) = *((_OWORD *)v583 - 17);
                v606 = *((_OWORD *)v583 - 14);
                v605 = *((_OWORD *)v583 - 13);
                v607 = *((_OWORD *)v583 - 15);
                *(v553 - 24) = *(v583 - 24);
                *((_OWORD *)v553 - 14) = v606;
                *((_OWORD *)v553 - 13) = v605;
                *((_OWORD *)v553 - 15) = v607;
                *((_OWORD *)v553 - 16) = *((_OWORD *)v583 - 16);
                v608 = *(_OWORD *)(v583 - 23);
                *(v553 - 21) = *(v583 - 21);
                *(_OWORD *)(v553 - 23) = v608;
                v609 = *((_OWORD *)v583 - 10);
                *(v583 - 20) = 0;
                *(v583 - 19) = 0;
                v610 = (std::__shared_weak_count *)*(v553 - 19);
                *((_OWORD *)v553 - 10) = v609;
                if (v610)
                {
                  v611 = (unint64_t *)&v610->__shared_owners_;
                  do
                    v612 = __ldaxr(v611);
                  while (__stlxr(v612 - 1, v611));
                  if (!v612)
                  {
                    ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v610->__on_zero_shared)(v610, v578, v537, v538);
                    std::__shared_weak_count::__release_weak(v610);
                  }
                }
                *(v553 - 18) = *(v583 - 18);
                v613 = *(_OWORD *)(v583 - 17);
                v614 = *(_OWORD *)(v583 - 15);
                *(_OWORD *)(v553 - 13) = *(_OWORD *)(v583 - 13);
                *(_OWORD *)(v553 - 15) = v614;
                *(_OWORD *)(v553 - 17) = v613;
                v615 = *(_OWORD *)(v583 - 11);
                v616 = *(_OWORD *)(v583 - 9);
                *(_OWORD *)(v553 - 7) = *(_OWORD *)(v583 - 7);
                *(_OWORD *)(v553 - 9) = v616;
                *(_OWORD *)(v553 - 11) = v615;
                v617 = *(v583 - 5);
                *((_BYTE *)v553 - 32) = *((_BYTE *)v583 - 32);
                *(v553 - 5) = v617;
                v618 = *(_OWORD *)(v583 - 3);
                *(v583 - 3) = 0;
                *(v583 - 2) = 0;
                v619 = (std::__shared_weak_count *)*(v553 - 2);
                *(_OWORD *)(v553 - 3) = v618;
                if (v619)
                {
                  v620 = (unint64_t *)&v619->__shared_owners_;
                  do
                    v621 = __ldaxr(v620);
                  while (__stlxr(v621 - 1, v620));
                  if (!v621)
                  {
                    ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v619->__on_zero_shared)(v619, v578, v537, v538);
                    std::__shared_weak_count::__release_weak(v619);
                  }
                }
                *((_BYTE *)v553 - 8) = *((_BYTE *)v583 - 8);
                v553 -= 35;
                v583 -= 35;
              }
              while (v603 != v560);
            }
            *v560 = (void *)v555;
            v595 = &v1704[35 * v1711];
            *(_OWORD *)(v595 + 1) = v1831;
            *(_OWORD *)(v595 + 5) = *(_OWORD *)&v1842[2];
            *(_OWORD *)(v595 + 7) = *(_OWORD *)&v1842[4];
            *(_OWORD *)(v595 + 9) = *(_OWORD *)&v1842[6];
            v595[11] = v1842[8];
            *(_OWORD *)(v595 + 3) = *(_OWORD *)v1842;
            *((_OWORD *)v595 + 6) = v1797;
            v595[14] = (void *)v1798;
            v595[15] = v542;
            v596 = (std::__shared_weak_count *)v595[16];
            v595[16] = v539;
            v546 = v535 + 366;
            if (v596)
            {
              v597 = (unint64_t *)&v596->__shared_owners_;
              do
                v598 = __ldaxr(v597);
              while (__stlxr(v598 - 1, v597));
              if (!v598)
              {
                ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v596->__on_zero_shared)(v596, v578, v537, v538);
                std::__shared_weak_count::__release_weak(v596);
              }
            }
            v599 = &v1704[35 * v1711];
            v599[17] = __dstb;
            *((_OWORD *)v599 + 9) = v1805[0];
            *((_OWORD *)v599 + 10) = v1805[1];
            *((_OWORD *)v599 + 11) = v1805[2];
            *((_OWORD *)v599 + 12) = v1834;
            *((_OWORD *)v599 + 13) = v1835;
            *((__n128 *)v599 + 14) = v1836;
            v599[30] = v1724;
            *((_BYTE *)v599 + 248) = (_BYTE)v1725;
            v600 = (std::__shared_weak_count *)v599[33];
            v599[32] = 0;
            v599[33] = 0;
            v534 = v1681;
            if (v600)
            {
              v601 = (unint64_t *)&v600->__shared_owners_;
              do
                v602 = __ldaxr(v601);
              while (__stlxr(v602 - 1, v601));
              if (!v602)
              {
                ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v600->__on_zero_shared)(v600, v578, v537, v538);
                std::__shared_weak_count::__release_weak(v600);
              }
            }
            LOBYTE(v1704[35 * v1711 + 34]) = 0;
          }
          v1335 = (std::__shared_weak_count *)object[33];
          if (object[33])
          {
            v1336 = (unint64_t *)((char *)object[33] + 8);
            do
              v1337 = __ldaxr(v1336);
            while (__stlxr(v1337 - 1, v1336));
            if (!v1337)
            {
              ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v1335->__on_zero_shared)(v1335, v578, v537, v538);
              std::__shared_weak_count::__release_weak(v1335);
            }
          }
        }
        v1338 = (std::__shared_weak_count *)object[16];
        if (object[16])
        {
          v1339 = (unint64_t *)((char *)object[16] + 8);
          do
            v1340 = __ldaxr(v1339);
          while (__stlxr(v1340 - 1, v1339));
          if (!v1340)
          {
            ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v1338->__on_zero_shared)(v1338, v578, v537, v538);
            std::__shared_weak_count::__release_weak(v1338);
          }
        }
        v546->i8[2] = 0;
        v546->i8[0] = 0;
        v535[365] = vaddq_s64(v535[365], (int64x2_t)xmmword_2103B2300);
        v1341 = *(std::__shared_weak_count **)&oslog[256];
        if (*(_QWORD *)&oslog[256])
        {
          v1342 = (unint64_t *)(*(_QWORD *)&oslog[256] + 8);
          do
            v1343 = __ldaxr(v1342);
          while (__stlxr(v1343 - 1, v1342));
          if (!v1343)
          {
            ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v1341->__on_zero_shared)(v1341, v578, v537, v538);
            std::__shared_weak_count::__release_weak(v1341);
          }
        }
        v635 = 0;
        v636 = *(std::__shared_weak_count **)&oslog[120];
        if (!*(_QWORD *)&oslog[120])
          goto LABEL_807;
        goto LABEL_803;
      }
      --*((_DWORD *)v580 + 2);
      *(_QWORD *)&oslog[128] = 0;
    }
  }
  v635 = 1;
  v636 = *(std::__shared_weak_count **)&oslog[120];
  if (*(_QWORD *)&oslog[120])
  {
LABEL_803:
    v637 = (unint64_t *)&v636->__shared_owners_;
    do
      v638 = __ldaxr(v637);
    while (__stlxr(v638 - 1, v637));
    if (!v638)
    {
      ((void (*)(std::__shared_weak_count *))v636->__on_zero_shared)(v636);
      std::__shared_weak_count::__release_weak(v636);
    }
  }
LABEL_807:
  v639 = (std::__shared_weak_count *)*((_QWORD *)&v1828 + 1);
  if (!*((_QWORD *)&v1828 + 1))
    goto LABEL_811;
  v640 = (unint64_t *)(*((_QWORD *)&v1828 + 1) + 8);
  do
    v641 = __ldaxr(v640);
  while (__stlxr(v641 - 1, v640));
  if (v641)
  {
LABEL_811:
    if ((v635 & 1) != 0)
      goto LABEL_812;
LABEL_815:
    v642 = 0;
    v535[414].i8[12] = 0;
    v535[414].i32[2] = 0;
    v643 = (std::__shared_weak_count *)*((_QWORD *)&v1728 + 1);
    if (!*((_QWORD *)&v1728 + 1))
      goto LABEL_819;
    goto LABEL_816;
  }
  ((void (*)(std::__shared_weak_count *))v639->__on_zero_shared)(v639);
  std::__shared_weak_count::__release_weak(v639);
  if ((v635 & 1) == 0)
    goto LABEL_815;
LABEL_812:
  v642 = 1;
  v643 = (std::__shared_weak_count *)*((_QWORD *)&v1728 + 1);
  if (!*((_QWORD *)&v1728 + 1))
    goto LABEL_819;
LABEL_816:
  v644 = (unint64_t *)&v643->__shared_owners_;
  do
    v645 = __ldaxr(v644);
  while (__stlxr(v645 - 1, v644));
  if (v645)
  {
LABEL_819:
    if (!v642)
      goto LABEL_821;
    goto LABEL_820;
  }
  ((void (*)(std::__shared_weak_count *))v643->__on_zero_shared)(v643);
  std::__shared_weak_count::__release_weak(v643);
  if (!v642)
    goto LABEL_821;
LABEL_820:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 988, (uint64_t)"ret.second", 10, (uint64_t)"Failed to add Pose prior factor", 31, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_821:
  v646 = *(std::__shared_weak_count **)&v1794[120];
  if (*(_QWORD *)&v1794[120])
  {
    v647 = (unint64_t *)(*(_QWORD *)&v1794[120] + 8);
    do
      v648 = __ldaxr(v647);
    while (__stlxr(v648 - 1, v647));
    if (!v648)
    {
      ((void (*)(std::__shared_weak_count *))v646->__on_zero_shared)(v646);
      std::__shared_weak_count::__release_weak(v646);
    }
  }
  if (v1715)
  {
    v649 = &v1715->__shared_owners_;
    do
      v650 = __ldaxr((unint64_t *)v649);
    while (__stlxr(v650 - 1, (unint64_t *)v649));
    if (!v650)
    {
      ((void (*)(std::__shared_weak_count *))v1715->__on_zero_shared)(v1715);
      std::__shared_weak_count::__release_weak(v1715);
    }
  }
  v651 = (int64x2_t *)v1721;
  v1828 = 0uLL;
  v652 = (void *)*((unsigned int *)v534 + 10);
  *(_QWORD *)v1794 = v652;
  memset(&v1794[16], 0, 184);
  v1718 = 0;
  v1717 = 0;
  v1831 = 0uLL;
  v653 = *(void ***)(v1721 + 5656);
  v654 = *(void ***)(v1721 + 5664);
  if (v653 == v654)
  {
    v655 = *(void ***)(v1721 + 5656);
  }
  else
  {
    v655 = *(void ***)(v1721 + 5664);
    if (*(v654 - 63) >= v652)
    {
      v656 = 0xEFBEFBEFBEFBEFBFLL * (v654 - v653);
      v657 = *(void ***)(v1721 + 5656);
      do
      {
        v658 = v656 >> 1;
        v659 = (unint64_t *)&v657[63 * (v656 >> 1)];
        v660 = *v659;
        v661 = (void **)(v659 + 63);
        v656 += ~(v656 >> 1);
        if (v660 < (unint64_t)v652)
          v657 = v661;
        else
          v656 = v658;
      }
      while (v656);
      v655 = *(void ***)(v1721 + 5664);
      if (v657 != v654)
      {
        v655 = v657;
        if (*v657 == v652)
          goto LABEL_905;
      }
    }
  }
  *(_OWORD *)oslog = *(_OWORD *)v1794;
  memset(&oslog[16], 0, 200);
  *(_QWORD *)&v1794[192] = 0;
  *(_QWORD *)&v1794[184] = 0;
  memset(&oslog[472], 0, 17);
  *(_QWORD *)&oslog[456] = 0xBFF0000000000000;
  oslog[464] = 0;
  v662 = *(char **)(v1721 + 4888);
  v663 = *(char **)(v1721 + 4896);
  if (v663 == v662)
    goto LABEL_894;
  v664 = (int64x2_t *)(v1721 + 5856);
  v665 = (v663 - v662) >> 4;
  do
  {
    v666 = v665 >> 1;
    v667 = (unsigned int *)&v662[16 * (v665 >> 1)];
    v669 = *v667;
    v668 = (char *)(v667 + 4);
    v670 = (void **)~(v665 >> 1);
    v665 += (unint64_t)v670;
    if (v669 < v652)
      v662 = v668;
    else
      v665 = v666;
  }
  while (v665);
  if (v662 == v663 || *(_DWORD *)v662 != (_DWORD)v652)
  {
LABEL_894:
    v745 = 1;
    v746 = *(std::__shared_weak_count **)&oslog[192];
    if (!*(_QWORD *)&oslog[192])
      goto LABEL_899;
    goto LABEL_895;
  }
  v671 = *((_QWORD *)v662 + 1);
  *(_QWORD *)&oslog[200] = v671;
  ++*(_DWORD *)(*((_QWORD *)v662 + 1) + 8);
  v672 = v651[311].i64[1];
  v673 = v651[312].i64[0];
  if (v673 != v672)
  {
    v674 = (v673 - v672) >> 4;
    do
    {
      v675 = v674 >> 1;
      v676 = (unsigned int *)(v672 + 16 * (v674 >> 1));
      v678 = *v676;
      v677 = v676 + 4;
      v670 = (void **)v678;
      v537 = (void **)~(v674 >> 1);
      v674 += (unint64_t)v537;
      if (v678 < v652)
        v672 = (uint64_t)v677;
      else
        v674 = v675;
    }
    while (v674);
  }
  if (v672 == v673 || *(_DWORD *)v672 != (_DWORD)v652)
  {
    if (v671)
      --*(_DWORD *)(v671 + 8);
    goto LABEL_894;
  }
  v679 = *(_QWORD *)(v672 + 8);
  *(_QWORD *)&oslog[208] = v679;
  ++*(_DWORD *)(*(_QWORD *)(v672 + 8) + 8);
  if (!*(_BYTE *)(v671 + 20) && !*(_BYTE *)(v679 + 20))
  {
    --*(_DWORD *)(v671 + 8);
    --*(_DWORD *)(v679 + 8);
    *(_QWORD *)&oslog[208] = 0;
    *(_QWORD *)&oslog[200] = 0;
    v745 = 1;
    v746 = *(std::__shared_weak_count **)&oslog[192];
    if (!*(_QWORD *)&oslog[192])
      goto LABEL_899;
    goto LABEL_895;
  }
  *(_OWORD *)&object[1] = *(_OWORD *)oslog;
  *(_OWORD *)&object[17] = *(_OWORD *)&oslog[128];
  *(_OWORD *)&object[19] = *(_OWORD *)&oslog[144];
  *(_OWORD *)&object[21] = *(_OWORD *)&oslog[160];
  *(_OWORD *)&object[9] = *(_OWORD *)&oslog[64];
  *(_OWORD *)&object[11] = *(_OWORD *)&oslog[80];
  object[0] = v652;
  object[23] = *(void **)&oslog[176];
  *(_OWORD *)&object[13] = *(_OWORD *)&oslog[96];
  *(_OWORD *)&object[15] = *(_OWORD *)&oslog[112];
  *(_OWORD *)&object[3] = *(_OWORD *)&oslog[16];
  *(_OWORD *)&object[5] = *(_OWORD *)&oslog[32];
  *(_OWORD *)&object[7] = *(_OWORD *)&oslog[48];
  object[25] = 0;
  object[24] = 0;
  *(_QWORD *)&oslog[184] = 0;
  *(_QWORD *)&oslog[192] = 0;
  *(_OWORD *)&object[38] = *(_OWORD *)&oslog[296];
  *(_OWORD *)&object[40] = *(_OWORD *)&oslog[312];
  *(_OWORD *)&object[26] = *(_OWORD *)&oslog[200];
  *(_OWORD *)&object[28] = *(_OWORD *)&oslog[216];
  *(_OWORD *)&object[30] = *(_OWORD *)&oslog[232];
  *(_OWORD *)&object[32] = *(_OWORD *)&oslog[248];
  *(_OWORD *)&object[34] = *(_OWORD *)&oslog[264];
  *(_OWORD *)&object[36] = *(_OWORD *)&oslog[280];
  *(_OWORD *)&object[51] = *(_OWORD *)&oslog[400];
  *(_OWORD *)&object[53] = *(_OWORD *)&oslog[416];
  *(_OWORD *)&object[55] = *(_OWORD *)&oslog[432];
  *(_OWORD *)&object[43] = *(_OWORD *)&oslog[336];
  *(_OWORD *)&object[45] = *(_OWORD *)&oslog[352];
  *(_OWORD *)&object[47] = *(_OWORD *)&oslog[368];
  *(_OWORD *)&object[49] = *(_OWORD *)&oslog[384];
  object[42] = *(void **)&oslog[328];
  object[57] = *(void **)&oslog[448];
  LOBYTE(object[59]) = oslog[464];
  object[58] = *(void **)&oslog[456];
  memset(&object[60], 0, 17);
  *(_QWORD *)&oslog[472] = 0;
  *(_QWORD *)&oslog[480] = 0;
  if (v654 == v655 || *v655 != v652)
  {
    v537 = &object[26];
    v670 = &object[28];
    v538 = 0xEFBEFBEFBEFBEFBFLL * (v655 - v653);
    v680 = v651[354].u64[1];
    if ((unint64_t)v654 >= v680)
    {
      v1273 = 1 - 0x1041041041041041 * (v654 - v653);
      if (v1273 > 0x82082082082082)
        sub_20E867F44();
      v1274 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(v680 - (_QWORD)v653) >> 3);
      if (2 * v1274 > v1273)
        v1273 = 2 * v1274;
      if (v1274 >= 0x41041041041041)
        v1275 = 0x82082082082082;
      else
        v1275 = v1273;
      v1842[4] = &v651[354].u64[1];
      if (v1275)
      {
        if (v1275 > 0x82082082082082)
          sub_20E877A38();
        v1276 = (char *)operator new(504 * v1275);
        v538 = 0xEFBEFBEFBEFBEFBFLL * (v655 - v653);
      }
      else
      {
        v1276 = 0;
      }
      v1366 = &v1276[504 * v538];
      v1842[0] = v1276;
      v1842[1] = v1366;
      v1842[2] = v1366;
      v1842[3] = &v1276[504 * v1275];
      if (v538 == v1275)
      {
        v664 = v651 + 366;
        if ((char *)v655 - (char *)v653 < 1)
        {
          if (v653 == v655)
            v1557 = 1;
          else
            v1557 = 2 * v538;
          if (v1557 > 0x82082082082082)
            sub_20E877A38();
          v1558 = (char *)operator new(504 * v1557);
          v1366 = &v1558[504 * (v1557 >> 2)];
          v1842[0] = v1558;
          v1842[1] = v1366;
          v1842[2] = v1366;
          v1842[3] = &v1558[504 * v1557];
          if (v1276)
            operator delete(v1276);
          v1369 = v1366;
        }
        else
        {
          v1367 = v538 + 2;
          if (v538 >= -1)
            v1367 = v538 + 1;
          v1368 = v1367 >> 1;
          v1369 = (char *)sub_20F5B64A0((uint64_t)v1366, (uint64_t)v1366, (uint64_t)&v1366[-504 * (v1367 >> 1)]);
          v1366 = (char *)v1842[1] - 504 * v1368;
          v1842[2] = v1369;
          v1842[1] = v1366;
          v652 = object[0];
        }
      }
      else
      {
        v1369 = &v1276[504 * v538];
        v664 = v651 + 366;
      }
      *(_QWORD *)v1369 = v652;
      *(_OWORD *)(v1369 + 8) = *(_OWORD *)&object[1];
      v1559 = *(_OWORD *)&object[17];
      *(_OWORD *)(v1369 + 120) = *(_OWORD *)&object[15];
      v1560 = *(_OWORD *)&object[11];
      *(_OWORD *)(v1369 + 104) = *(_OWORD *)&object[13];
      *(_OWORD *)(v1369 + 88) = v1560;
      v1561 = *(_OWORD *)&object[7];
      *(_OWORD *)(v1369 + 72) = *(_OWORD *)&object[9];
      *((void **)v1369 + 23) = object[23];
      v1562 = *(_OWORD *)&object[19];
      *(_OWORD *)(v1369 + 168) = *(_OWORD *)&object[21];
      *(_OWORD *)(v1369 + 152) = v1562;
      *(_OWORD *)(v1369 + 136) = v1559;
      v1563 = *(_OWORD *)&object[5];
      *(_OWORD *)(v1369 + 24) = *(_OWORD *)&object[3];
      *(_OWORD *)(v1369 + 40) = v1563;
      *(_OWORD *)(v1369 + 56) = v1561;
      *((_OWORD *)v1369 + 12) = *(_OWORD *)&object[24];
      object[24] = 0;
      object[25] = 0;
      *((_OWORD *)v1369 + 13) = *(_OWORD *)&object[26];
      *((void **)v1369 + 42) = object[42];
      v1564 = *(_OWORD *)&object[40];
      v1565 = *(_OWORD *)&object[36];
      *((_OWORD *)v1369 + 19) = *(_OWORD *)&object[38];
      *((_OWORD *)v1369 + 20) = v1564;
      v1566 = *(_OWORD *)&object[30];
      *((_OWORD *)v1369 + 14) = *(_OWORD *)&object[28];
      *((_OWORD *)v1369 + 15) = v1566;
      v1567 = *(_OWORD *)&object[34];
      *((_OWORD *)v1369 + 16) = *(_OWORD *)&object[32];
      *((_OWORD *)v1369 + 17) = v1567;
      *((_OWORD *)v1369 + 18) = v1565;
      v1568 = *(_OWORD *)&object[43];
      v1569 = *(_OWORD *)&object[45];
      v1570 = *(_OWORD *)&object[49];
      *(_OWORD *)(v1369 + 376) = *(_OWORD *)&object[47];
      *(_OWORD *)(v1369 + 392) = v1570;
      *(_OWORD *)(v1369 + 344) = v1568;
      *(_OWORD *)(v1369 + 360) = v1569;
      v1571 = *(_OWORD *)&object[51];
      v1572 = *(_OWORD *)&object[53];
      v1573 = *(_OWORD *)&object[55];
      *((void **)v1369 + 57) = object[57];
      *(_OWORD *)(v1369 + 424) = v1572;
      *(_OWORD *)(v1369 + 440) = v1573;
      *(_OWORD *)(v1369 + 408) = v1571;
      v1574 = object[58];
      v1369[472] = (char)object[59];
      *((_QWORD *)v1369 + 58) = v1574;
      *((_OWORD *)v1369 + 30) = *(_OWORD *)&object[60];
      object[60] = 0;
      object[61] = 0;
      v1369[496] = (char)object[62];
      v1575 = (void **)(v1369 + 504);
      v1576 = (void **)v651[353].i64[1];
      if (v1576 == v655)
      {
        v1578 = v1366;
      }
      else
      {
        v1577 = v655;
        do
        {
          v1578 = v1366 - 504;
          v1579 = v1577 - 63;
          *(_QWORD *)v1578 = *(v1577 - 63);
          *(_OWORD *)(v1578 + 8) = *((_OWORD *)v1577 - 31);
          v1580 = *((_OWORD *)v1577 - 26);
          v1581 = *((_OWORD *)v1577 - 25);
          v1582 = *((_OWORD *)v1577 - 24);
          *(_OWORD *)(v1578 + 72) = *((_OWORD *)v1577 - 27);
          *(_OWORD *)(v1578 + 120) = v1582;
          *(_OWORD *)(v1578 + 104) = v1581;
          *(_OWORD *)(v1578 + 88) = v1580;
          v1583 = *((_OWORD *)v1577 - 22);
          v1584 = *((_OWORD *)v1577 - 21);
          v1585 = (uint64_t)*(v1577 - 40);
          *(_OWORD *)(v1578 + 136) = *((_OWORD *)v1577 - 23);
          *((_QWORD *)v1578 + 23) = v1585;
          *(_OWORD *)(v1578 + 168) = v1584;
          *(_OWORD *)(v1578 + 152) = v1583;
          v1586 = *((_OWORD *)v1577 - 30);
          v1587 = *((_OWORD *)v1577 - 29);
          *(_OWORD *)(v1578 + 56) = *((_OWORD *)v1577 - 28);
          *(_OWORD *)(v1578 + 40) = v1587;
          *(_OWORD *)(v1578 + 24) = v1586;
          *((_QWORD *)v1578 + 24) = *(v1577 - 39);
          v1588 = (uint64_t)*(v1577 - 38);
          *((_QWORD *)v1578 + 25) = v1588;
          if (v1588)
          {
            v1589 = (unint64_t *)(v1588 + 8);
            do
              v1590 = __ldxr(v1589);
            while (__stxr(v1590 + 1, v1589));
          }
          *(_OWORD *)(v1366 - 296) = *(_OWORD *)(v1577 - 37);
          v1591 = *(_OWORD *)(v1577 - 25);
          v1592 = *(_OWORD *)(v1577 - 23);
          v1593 = (uint64_t)*(v1577 - 21);
          *(_OWORD *)(v1366 - 216) = *(_OWORD *)(v1577 - 27);
          *((_QWORD *)v1366 - 21) = v1593;
          *(_OWORD *)(v1366 - 184) = v1592;
          *(_OWORD *)(v1366 - 200) = v1591;
          v1594 = *(_OWORD *)(v1577 - 35);
          v1595 = *(_OWORD *)(v1577 - 33);
          v1596 = *(_OWORD *)(v1577 - 31);
          *(_OWORD *)(v1366 - 232) = *(_OWORD *)(v1577 - 29);
          *(_OWORD *)(v1366 - 248) = v1596;
          *(_OWORD *)(v1366 - 280) = v1594;
          *(_OWORD *)(v1366 - 264) = v1595;
          v1598 = *((_OWORD *)v1577 - 5);
          v1597 = *((_OWORD *)v1577 - 4);
          v1599 = *((_OWORD *)v1577 - 6);
          *((_QWORD *)v1366 - 6) = *(v1577 - 6);
          *((_OWORD *)v1366 - 5) = v1598;
          *((_OWORD *)v1366 - 4) = v1597;
          *((_OWORD *)v1366 - 6) = v1599;
          v1600 = *((_OWORD *)v1577 - 10);
          v1601 = *((_OWORD *)v1577 - 9);
          v1602 = *((_OWORD *)v1577 - 7);
          *((_OWORD *)v1366 - 8) = *((_OWORD *)v1577 - 8);
          *((_OWORD *)v1366 - 7) = v1602;
          *((_OWORD *)v1366 - 10) = v1600;
          *((_OWORD *)v1366 - 9) = v1601;
          v1603 = (uint64_t)*(v1577 - 5);
          *(v1366 - 32) = *((_BYTE *)v1577 - 32);
          *((_QWORD *)v1366 - 5) = v1603;
          *((_QWORD *)v1366 - 3) = *(v1577 - 3);
          v1604 = (uint64_t)*(v1577 - 2);
          *((_QWORD *)v1366 - 2) = v1604;
          if (v1604)
          {
            v1605 = (unint64_t *)(v1604 + 8);
            do
              v1606 = __ldxr(v1605);
            while (__stxr(v1606 + 1, v1605));
          }
          *(v1366 - 8) = *((_BYTE *)v1577 - 8);
          v1366 -= 504;
          v1577 -= 63;
        }
        while (v1579 != v1576);
      }
      v1842[1] = v1578;
      v1607 = (void **)v651[354].i64[0];
      if (v1607 != v655)
      {
        do
        {
          *v1575 = *v655;
          *(_OWORD *)(v1575 + 1) = *(_OWORD *)(v655 + 1);
          v1608 = *(_OWORD *)(v655 + 11);
          v1609 = *(_OWORD *)(v655 + 13);
          v1610 = *(_OWORD *)(v655 + 15);
          *(_OWORD *)(v1575 + 9) = *(_OWORD *)(v655 + 9);
          *(_OWORD *)(v1575 + 15) = v1610;
          *(_OWORD *)(v1575 + 13) = v1609;
          *(_OWORD *)(v1575 + 11) = v1608;
          v1611 = *(_OWORD *)(v655 + 19);
          v1612 = *(_OWORD *)(v655 + 21);
          v1613 = v655[23];
          *(_OWORD *)(v1575 + 17) = *(_OWORD *)(v655 + 17);
          v1575[23] = v1613;
          *(_OWORD *)(v1575 + 21) = v1612;
          *(_OWORD *)(v1575 + 19) = v1611;
          v1614 = *(_OWORD *)(v655 + 3);
          v1615 = *(_OWORD *)(v655 + 5);
          *(_OWORD *)(v1575 + 7) = *(_OWORD *)(v655 + 7);
          *(_OWORD *)(v1575 + 5) = v1615;
          *(_OWORD *)(v1575 + 3) = v1614;
          v1575[24] = v655[24];
          v1616 = (unint64_t *)v655[25];
          v1575[25] = v1616;
          if (v1616)
          {
            v1617 = v1616 + 1;
            do
              v1618 = __ldxr(v1617);
            while (__stxr(v1618 + 1, v1617));
          }
          *((_OWORD *)v1575 + 13) = *((_OWORD *)v655 + 13);
          v1620 = *((_OWORD *)v655 + 19);
          v1619 = *((_OWORD *)v655 + 20);
          v1621 = *((_OWORD *)v655 + 18);
          v1575[42] = v655[42];
          *((_OWORD *)v1575 + 19) = v1620;
          *((_OWORD *)v1575 + 20) = v1619;
          *((_OWORD *)v1575 + 18) = v1621;
          v1622 = *((_OWORD *)v655 + 14);
          v1623 = *((_OWORD *)v655 + 15);
          v1624 = *((_OWORD *)v655 + 17);
          *((_OWORD *)v1575 + 16) = *((_OWORD *)v655 + 16);
          *((_OWORD *)v1575 + 17) = v1624;
          *((_OWORD *)v1575 + 14) = v1622;
          *((_OWORD *)v1575 + 15) = v1623;
          v1626 = *(_OWORD *)(v655 + 53);
          v1625 = *(_OWORD *)(v655 + 55);
          v1627 = *(_OWORD *)(v655 + 51);
          v1575[57] = v655[57];
          *(_OWORD *)(v1575 + 53) = v1626;
          *(_OWORD *)(v1575 + 55) = v1625;
          *(_OWORD *)(v1575 + 51) = v1627;
          v1628 = *(_OWORD *)(v655 + 43);
          v1629 = *(_OWORD *)(v655 + 45);
          v1630 = *(_OWORD *)(v655 + 49);
          *(_OWORD *)(v1575 + 47) = *(_OWORD *)(v655 + 47);
          *(_OWORD *)(v1575 + 49) = v1630;
          *(_OWORD *)(v1575 + 43) = v1628;
          *(_OWORD *)(v1575 + 45) = v1629;
          v1631 = v655[58];
          *((_BYTE *)v1575 + 472) = *((_BYTE *)v655 + 472);
          v1575[58] = v1631;
          v1575[60] = v655[60];
          v1632 = (unint64_t *)v655[61];
          v1575[61] = v1632;
          if (v1632)
          {
            v1633 = v1632 + 1;
            do
              v1634 = __ldxr(v1633);
            while (__stxr(v1634 + 1, v1633));
          }
          *((_BYTE *)v1575 + 496) = *((_BYTE *)v655 + 496);
          v655 += 63;
          v1575 += 63;
        }
        while (v655 != v1607);
        v1578 = (char *)v1842[1];
        v655 = (void **)v651[354].i64[0];
      }
      v1635 = (void **)v651[353].i64[1];
      v651[353].i64[1] = (uint64_t)v1578;
      v651[354].i64[0] = (uint64_t)v1575;
      v1636 = (void *)v651[354].i64[1];
      v651[354].i64[1] = (uint64_t)v1842[3];
      v1842[3] = v1636;
      v1842[1] = v1635;
      v1842[0] = v1635;
      if (v655 != v1635)
      {
        do
        {
          v1842[2] = v655 - 63;
          v1637 = (std::__shared_weak_count *)*(v655 - 2);
          if (v1637)
          {
            v1638 = (unint64_t *)&v1637->__shared_owners_;
            do
              v1639 = __ldaxr(v1638);
            while (__stlxr(v1639 - 1, v1638));
            if (!v1639)
            {
              ((void (*)(std::__shared_weak_count *))v1637->__on_zero_shared)(v1637);
              std::__shared_weak_count::__release_weak(v1637);
            }
          }
          v1640 = (std::__shared_weak_count *)*(v655 - 38);
          if (v1640)
          {
            v1641 = (unint64_t *)&v1640->__shared_owners_;
            do
              v1642 = __ldaxr(v1641);
            while (__stlxr(v1642 - 1, v1641));
            if (!v1642)
            {
              ((void (*)(std::__shared_weak_count *))v1640->__on_zero_shared)(v1640);
              std::__shared_weak_count::__release_weak(v1640);
            }
          }
          v655 = (void **)v1842[2];
        }
        while (v1842[2] != v1635);
        v655 = (void **)v1842[0];
      }
      if (v655)
        operator delete(v655);
    }
    else if (v655 == v654)
    {
      *v654 = v652;
      v1344 = &v653[v655 - v653];
      *(_OWORD *)(v1344 + 1) = *(_OWORD *)&object[1];
      v1346 = *(_OWORD *)&object[5];
      v1345 = *(_OWORD *)&object[7];
      *(_OWORD *)(v1344 + 3) = *(_OWORD *)&object[3];
      *(_OWORD *)(v1344 + 7) = v1345;
      *(_OWORD *)(v1344 + 5) = v1346;
      v1347 = *(_OWORD *)&object[9];
      v1348 = *(_OWORD *)&object[11];
      v1349 = *(_OWORD *)&object[13];
      *(_OWORD *)(v1344 + 15) = *(_OWORD *)&object[15];
      *(_OWORD *)(v1344 + 13) = v1349;
      *(_OWORD *)(v1344 + 11) = v1348;
      *(_OWORD *)(v1344 + 9) = v1347;
      v1350 = *(_OWORD *)&object[17];
      v1351 = *(_OWORD *)&object[19];
      v1352 = object[23];
      *(_OWORD *)(v1344 + 21) = *(_OWORD *)&object[21];
      *(_OWORD *)(v1344 + 19) = v1351;
      *(_OWORD *)(v1344 + 17) = v1350;
      v1344[23] = v1352;
      v1344[24] = 0;
      v1344[25] = 0;
      object[24] = 0;
      object[25] = 0;
      *((_OWORD *)v1344 + 13) = *(_OWORD *)&object[26];
      v1354 = *(_OWORD *)&object[38];
      v1353 = *(_OWORD *)&object[40];
      v1355 = *(_OWORD *)&object[36];
      v1344[42] = object[42];
      *((_OWORD *)v1344 + 19) = v1354;
      *((_OWORD *)v1344 + 20) = v1353;
      *((_OWORD *)v1344 + 18) = v1355;
      v1356 = *(_OWORD *)&object[28];
      v1357 = *(_OWORD *)&object[30];
      v1358 = *(_OWORD *)&object[34];
      *((_OWORD *)v1344 + 16) = *(_OWORD *)&object[32];
      *((_OWORD *)v1344 + 17) = v1358;
      *((_OWORD *)v1344 + 14) = v1356;
      *((_OWORD *)v1344 + 15) = v1357;
      v1360 = *(_OWORD *)&object[53];
      v1359 = *(_OWORD *)&object[55];
      v1361 = *(_OWORD *)&object[51];
      v1344[57] = object[57];
      *(_OWORD *)(v1344 + 53) = v1360;
      *(_OWORD *)(v1344 + 55) = v1359;
      *(_OWORD *)(v1344 + 51) = v1361;
      v1362 = *(_OWORD *)&object[43];
      v1363 = *(_OWORD *)&object[45];
      v1364 = *(_OWORD *)&object[49];
      *(_OWORD *)(v1344 + 47) = *(_OWORD *)&object[47];
      *(_OWORD *)(v1344 + 49) = v1364;
      *(_OWORD *)(v1344 + 43) = v1362;
      *(_OWORD *)(v1344 + 45) = v1363;
      v1365 = object[58];
      *((_BYTE *)v1344 + 472) = object[59];
      v1344[58] = v1365;
      v1344[60] = 0;
      v1344[61] = 0;
      object[60] = 0;
      object[61] = 0;
      *((_BYTE *)v1344 + 496) = 0;
      v651[354].i64[0] = (uint64_t)(v654 + 63);
    }
    else
    {
      v1797 = *(_OWORD *)oslog;
      *(_OWORD *)&v1842[14] = *(_OWORD *)&oslog[128];
      *(_OWORD *)&v1842[16] = *(_OWORD *)&oslog[144];
      *(_OWORD *)&v1842[18] = *(_OWORD *)&oslog[160];
      *(_OWORD *)&v1842[6] = *(_OWORD *)&oslog[64];
      *(_OWORD *)&v1842[8] = *(_OWORD *)&oslog[80];
      v1842[20] = *(void **)&oslog[176];
      *(_OWORD *)&v1842[10] = *(_OWORD *)&oslog[96];
      *(_OWORD *)&v1842[12] = *(_OWORD *)&oslog[112];
      *(_OWORD *)v1842 = *(_OWORD *)&oslog[16];
      *(_OWORD *)&v1842[2] = *(_OWORD *)&oslog[32];
      *(_OWORD *)&v1842[4] = *(_OWORD *)&oslog[48];
      object[24] = 0;
      object[25] = 0;
      v1705 = *(_OWORD *)&object[26];
      v1805[4] = *(_OWORD *)&oslog[280];
      v1805[5] = *(_OWORD *)&oslog[296];
      v1805[6] = *(_OWORD *)&oslog[312];
      *(_QWORD *)&v1805[7] = *(_QWORD *)&oslog[328];
      v1805[0] = *(_OWORD *)&oslog[216];
      v1805[1] = *(_OWORD *)&oslog[232];
      v1805[2] = *(_OWORD *)&oslog[248];
      v1805[3] = *(_OWORD *)&oslog[264];
      v1841.n128_u64[0] = *(_QWORD *)&oslog[448];
      v1840 = *(_OWORD *)&oslog[432];
      v1839 = *(_OWORD *)&oslog[416];
      v1838 = *(_OWORD *)&oslog[400];
      v1836 = *(__n128 *)&oslog[368];
      v1837 = *(__n128 *)&oslog[384];
      v1834 = *(_OWORD *)&oslog[336];
      v1835 = *(_OWORD *)&oslog[352];
      LOBYTE(v1715) = oslog[464];
      v1713 = *(void **)&oslog[456];
      v681 = v654 - 63;
      v682 = v654;
      object[60] = 0;
      object[61] = 0;
      if ((unint64_t)v654 >= 0x1F8)
      {
        v683 = v654 - 63;
        v682 = v654;
        do
        {
          *v682 = *v683;
          *(_OWORD *)(v682 + 1) = *(_OWORD *)(v683 + 1);
          v684 = *(_OWORD *)(v683 + 11);
          v685 = *(_OWORD *)(v683 + 13);
          v686 = *(_OWORD *)(v683 + 15);
          *(_OWORD *)(v682 + 9) = *(_OWORD *)(v683 + 9);
          *(_OWORD *)(v682 + 15) = v686;
          *(_OWORD *)(v682 + 13) = v685;
          *(_OWORD *)(v682 + 11) = v684;
          v687 = *(_OWORD *)(v683 + 19);
          v688 = *(_OWORD *)(v683 + 21);
          v689 = v683[23];
          *(_OWORD *)(v682 + 17) = *(_OWORD *)(v683 + 17);
          v682[23] = v689;
          *(_OWORD *)(v682 + 21) = v688;
          *(_OWORD *)(v682 + 19) = v687;
          v690 = *(_OWORD *)(v683 + 3);
          v691 = *(_OWORD *)(v683 + 5);
          *(_OWORD *)(v682 + 7) = *(_OWORD *)(v683 + 7);
          *(_OWORD *)(v682 + 5) = v691;
          *(_OWORD *)(v682 + 3) = v690;
          *((_OWORD *)v682 + 12) = *((_OWORD *)v683 + 12);
          v683[24] = 0;
          v683[25] = 0;
          *((_OWORD *)v682 + 13) = *((_OWORD *)v683 + 13);
          v693 = *((_OWORD *)v683 + 19);
          v692 = *((_OWORD *)v683 + 20);
          v694 = *((_OWORD *)v683 + 18);
          v682[42] = v683[42];
          *((_OWORD *)v682 + 19) = v693;
          *((_OWORD *)v682 + 20) = v692;
          *((_OWORD *)v682 + 18) = v694;
          v695 = *((_OWORD *)v683 + 14);
          v696 = *((_OWORD *)v683 + 15);
          v697 = *((_OWORD *)v683 + 17);
          *((_OWORD *)v682 + 16) = *((_OWORD *)v683 + 16);
          *((_OWORD *)v682 + 17) = v697;
          *((_OWORD *)v682 + 14) = v695;
          *((_OWORD *)v682 + 15) = v696;
          v699 = *(_OWORD *)(v683 + 53);
          v698 = *(_OWORD *)(v683 + 55);
          v700 = *(_OWORD *)(v683 + 51);
          v682[57] = v683[57];
          *(_OWORD *)(v682 + 53) = v699;
          *(_OWORD *)(v682 + 55) = v698;
          *(_OWORD *)(v682 + 51) = v700;
          v701 = *(_OWORD *)(v683 + 43);
          v702 = *(_OWORD *)(v683 + 45);
          v703 = *(_OWORD *)(v683 + 49);
          *(_OWORD *)(v682 + 47) = *(_OWORD *)(v683 + 47);
          *(_OWORD *)(v682 + 49) = v703;
          *(_OWORD *)(v682 + 43) = v701;
          *(_OWORD *)(v682 + 45) = v702;
          v704 = v683[58];
          *((_BYTE *)v682 + 472) = *((_BYTE *)v683 + 472);
          v682[58] = v704;
          *((_OWORD *)v682 + 30) = *((_OWORD *)v683 + 30);
          v683[60] = 0;
          v683[61] = 0;
          *((_BYTE *)v682 + 496) = *((_BYTE *)v683 + 496);
          v682 += 63;
          v683 += 63;
        }
        while (v683 < v654);
      }
      v705 = 0xEFBEFBEFBEFBEFBFLL * (v655 - v653);
      v651[354].i64[0] = (uint64_t)v682;
      if (v654 != v655 + 63)
      {
        do
        {
          v714 = v681 - 63;
          v715 = v654 - 63;
          *v715 = *(v681 - 63);
          *(_OWORD *)(v715 + 1) = *((_OWORD *)v681 - 31);
          v716 = *((_OWORD *)v681 - 26);
          v717 = *((_OWORD *)v681 - 25);
          v718 = *((_OWORD *)v681 - 24);
          *(_OWORD *)(v715 + 9) = *((_OWORD *)v681 - 27);
          *(_OWORD *)(v715 + 15) = v718;
          *(_OWORD *)(v715 + 13) = v717;
          *(_OWORD *)(v715 + 11) = v716;
          v719 = *((_OWORD *)v681 - 22);
          v720 = *((_OWORD *)v681 - 21);
          v721 = *(v681 - 40);
          *(_OWORD *)(v715 + 17) = *((_OWORD *)v681 - 23);
          v715[23] = v721;
          *(_OWORD *)(v715 + 21) = v720;
          *(_OWORD *)(v715 + 19) = v719;
          v722 = *((_OWORD *)v681 - 30);
          v723 = *((_OWORD *)v681 - 29);
          *(_OWORD *)(v715 + 7) = *((_OWORD *)v681 - 28);
          *(_OWORD *)(v715 + 5) = v723;
          *(_OWORD *)(v715 + 3) = v722;
          v724 = *(_OWORD *)(v681 - 39);
          v714[24] = 0;
          v714[25] = 0;
          v725 = (std::__shared_weak_count *)*(v654 - 38);
          *((_OWORD *)v715 + 12) = v724;
          if (v725)
          {
            v726 = (unint64_t *)&v725->__shared_owners_;
            do
              v727 = __ldaxr(v726);
            while (__stlxr(v727 - 1, v726));
            if (!v727)
            {
              ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v725->__on_zero_shared)(v725, v670, v537, v538);
              std::__shared_weak_count::__release_weak(v725);
            }
          }
          *(v654 - 37) = *(v681 - 37);
          *(v654 - 36) = *(v681 - 36);
          v728 = *(_OWORD *)(v681 - 35);
          v729 = *(_OWORD *)(v681 - 33);
          v730 = *(_OWORD *)(v681 - 31);
          *(_OWORD *)(v654 - 29) = *(_OWORD *)(v681 - 29);
          *(_OWORD *)(v654 - 31) = v730;
          *(_OWORD *)(v654 - 35) = v728;
          *(_OWORD *)(v654 - 33) = v729;
          v731 = *(_OWORD *)(v681 - 27);
          v732 = *(_OWORD *)(v681 - 25);
          v733 = *(_OWORD *)(v681 - 23);
          *(v654 - 21) = *(v681 - 21);
          *(_OWORD *)(v654 - 23) = v733;
          *(_OWORD *)(v654 - 25) = v732;
          *(_OWORD *)(v654 - 27) = v731;
          v735 = *((_OWORD *)v681 - 5);
          v734 = *((_OWORD *)v681 - 4);
          v736 = *((_OWORD *)v681 - 6);
          *(v654 - 6) = *(v681 - 6);
          *((_OWORD *)v654 - 5) = v735;
          *((_OWORD *)v654 - 4) = v734;
          *((_OWORD *)v654 - 6) = v736;
          v737 = *((_OWORD *)v681 - 10);
          v738 = *((_OWORD *)v681 - 9);
          v739 = *((_OWORD *)v681 - 7);
          *((_OWORD *)v654 - 8) = *((_OWORD *)v681 - 8);
          *((_OWORD *)v654 - 7) = v739;
          *((_OWORD *)v654 - 10) = v737;
          *((_OWORD *)v654 - 9) = v738;
          v740 = *(v681 - 5);
          *((_BYTE *)v654 - 32) = *((_BYTE *)v681 - 32);
          *(v654 - 5) = v740;
          v741 = *(_OWORD *)(v681 - 3);
          *(v681 - 3) = 0;
          *(v681 - 2) = 0;
          v742 = (std::__shared_weak_count *)*(v654 - 2);
          *(_OWORD *)(v654 - 3) = v741;
          if (v742)
          {
            v743 = (unint64_t *)&v742->__shared_owners_;
            do
              v744 = __ldaxr(v743);
            while (__stlxr(v744 - 1, v743));
            if (!v744)
            {
              ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v742->__on_zero_shared)(v742, v670, v537, v538);
              std::__shared_weak_count::__release_weak(v742);
            }
          }
          *((_BYTE *)v654 - 8) = *((_BYTE *)v681 - 8);
          v654 -= 63;
          v681 -= 63;
        }
        while (v714 != v655);
      }
      *v655 = v652;
      v706 = &v653[v655 - v653];
      *(_OWORD *)(v706 + 1) = v1797;
      *(_OWORD *)(v706 + 17) = *(_OWORD *)&v1842[14];
      *(_OWORD *)(v706 + 19) = *(_OWORD *)&v1842[16];
      *(_OWORD *)(v706 + 21) = *(_OWORD *)&v1842[18];
      v706[23] = v1842[20];
      *(_OWORD *)(v706 + 9) = *(_OWORD *)&v1842[6];
      *(_OWORD *)(v706 + 11) = *(_OWORD *)&v1842[8];
      *(_OWORD *)(v706 + 13) = *(_OWORD *)&v1842[10];
      *(_OWORD *)(v706 + 15) = *(_OWORD *)&v1842[12];
      *(_OWORD *)(v706 + 3) = *(_OWORD *)v1842;
      *(_OWORD *)(v706 + 5) = *(_OWORD *)&v1842[2];
      *(_OWORD *)(v706 + 7) = *(_OWORD *)&v1842[4];
      v707 = (std::__shared_weak_count *)v706[25];
      v706[24] = 0;
      v706[25] = 0;
      v664 = v651 + 366;
      if (v707)
      {
        v708 = (unint64_t *)&v707->__shared_owners_;
        do
          v709 = __ldaxr(v708);
        while (__stlxr(v709 - 1, v708));
        if (!v709)
        {
          ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v707->__on_zero_shared)(v707, v670, v537, v538);
          std::__shared_weak_count::__release_weak(v707);
        }
      }
      v710 = &v653[63 * v705];
      *((_OWORD *)v710 + 13) = v1705;
      *((_OWORD *)v710 + 18) = v1805[4];
      *((_OWORD *)v710 + 19) = v1805[5];
      *((_OWORD *)v710 + 20) = v1805[6];
      v710[42] = *(void **)&v1805[7];
      *((_OWORD *)v710 + 14) = v1805[0];
      *((_OWORD *)v710 + 15) = v1805[1];
      *((_OWORD *)v710 + 16) = v1805[2];
      *((_OWORD *)v710 + 17) = v1805[3];
      *(__n128 *)(v710 + 49) = v1837;
      *(__n128 *)(v710 + 47) = v1836;
      *(_OWORD *)(v710 + 45) = v1835;
      *(_OWORD *)(v710 + 43) = v1834;
      v710[57] = (void *)v1841.n128_u64[0];
      *(_OWORD *)(v710 + 55) = v1840;
      *(_OWORD *)(v710 + 53) = v1839;
      *(_OWORD *)(v710 + 51) = v1838;
      *((_BYTE *)v710 + 472) = (_BYTE)v1715;
      v710[58] = v1713;
      v711 = (std::__shared_weak_count *)v710[61];
      v710[60] = 0;
      v710[61] = 0;
      if (v711)
      {
        v712 = (unint64_t *)&v711->__shared_owners_;
        do
          v713 = __ldaxr(v712);
        while (__stlxr(v713 - 1, v712));
        if (!v713)
        {
          ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v711->__on_zero_shared)(v711, v670, v537, v538);
          std::__shared_weak_count::__release_weak(v711);
        }
      }
      LOBYTE(v653[63 * v705 + 62]) = 0;
    }
    v1643 = (std::__shared_weak_count *)object[61];
    if (object[61])
    {
      v1644 = (unint64_t *)((char *)object[61] + 8);
      do
        v1645 = __ldaxr(v1644);
      while (__stlxr(v1645 - 1, v1644));
      if (!v1645)
      {
        ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v1643->__on_zero_shared)(v1643, v670, v537, v538);
        std::__shared_weak_count::__release_weak(v1643);
      }
    }
  }
  v1646 = (std::__shared_weak_count *)object[25];
  if (object[25])
  {
    v1647 = (unint64_t *)((char *)object[25] + 8);
    do
      v1648 = __ldaxr(v1647);
    while (__stlxr(v1648 - 1, v1647));
    if (!v1648)
    {
      ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v1646->__on_zero_shared)(v1646, v670, v537, v538);
      std::__shared_weak_count::__release_weak(v1646);
    }
  }
  v664->i8[2] = 0;
  v664->i8[0] = 0;
  v651[365] = vaddq_s64(v651[365], (int64x2_t)xmmword_2103B4900);
  v1649 = *(std::__shared_weak_count **)&oslog[480];
  if (*(_QWORD *)&oslog[480])
  {
    v1650 = (unint64_t *)(*(_QWORD *)&oslog[480] + 8);
    do
      v1651 = __ldaxr(v1650);
    while (__stlxr(v1651 - 1, v1650));
    if (!v1651)
    {
      ((void (*)(std::__shared_weak_count *, void **, void **, int64_t))v1649->__on_zero_shared)(v1649, v670, v537, v538);
      std::__shared_weak_count::__release_weak(v1649);
    }
  }
  v745 = 0;
  v746 = *(std::__shared_weak_count **)&oslog[192];
  if (*(_QWORD *)&oslog[192])
  {
LABEL_895:
    v747 = (unint64_t *)&v746->__shared_owners_;
    do
      v748 = __ldaxr(v747);
    while (__stlxr(v748 - 1, v747));
    if (!v748)
    {
      ((void (*)(std::__shared_weak_count *))v746->__on_zero_shared)(v746);
      std::__shared_weak_count::__release_weak(v746);
    }
  }
LABEL_899:
  v749 = (std::__shared_weak_count *)*((_QWORD *)&v1831 + 1);
  if (!*((_QWORD *)&v1831 + 1))
    goto LABEL_903;
  v750 = (unint64_t *)(*((_QWORD *)&v1831 + 1) + 8);
  do
    v751 = __ldaxr(v750);
  while (__stlxr(v751 - 1, v750));
  if (v751)
  {
LABEL_903:
    if ((v745 & 1) != 0)
      goto LABEL_905;
    goto LABEL_904;
  }
  ((void (*)(std::__shared_weak_count *))v749->__on_zero_shared)(v749);
  std::__shared_weak_count::__release_weak(v749);
  if ((v745 & 1) == 0)
  {
LABEL_904:
    v651[414].i8[12] = 0;
    v651[414].i32[2] = 0;
  }
LABEL_905:
  if (v1718)
  {
    v752 = &v1718->__shared_owners_;
    do
      v753 = __ldaxr((unint64_t *)v752);
    while (__stlxr(v753 - 1, (unint64_t *)v752));
    if (!v753)
    {
      ((void (*)(std::__shared_weak_count *))v1718->__on_zero_shared)(v1718);
      std::__shared_weak_count::__release_weak(v1718);
    }
  }
  v754 = *(std::__shared_weak_count **)&v1794[192];
  if (!*(_QWORD *)&v1794[192])
    goto LABEL_914;
  v755 = (unint64_t *)(*(_QWORD *)&v1794[192] + 8);
  do
    v756 = __ldaxr(v755);
  while (__stlxr(v756 - 1, v755));
  if (!v756)
  {
    ((void (*)(std::__shared_weak_count *))v754->__on_zero_shared)(v754);
    std::__shared_weak_count::__release_weak(v754);
    v757 = (std::__shared_weak_count *)*((_QWORD *)&v1828 + 1);
    if (!*((_QWORD *)&v1828 + 1))
      goto LABEL_918;
  }
  else
  {
LABEL_914:
    v757 = (std::__shared_weak_count *)*((_QWORD *)&v1828 + 1);
    if (!*((_QWORD *)&v1828 + 1))
      goto LABEL_918;
  }
  v758 = (unint64_t *)&v757->__shared_owners_;
  do
    v759 = __ldaxr(v758);
  while (__stlxr(v759 - 1, v758));
  if (!v759)
  {
    ((void (*)(std::__shared_weak_count *))v757->__on_zero_shared)(v757);
    std::__shared_weak_count::__release_weak(v757);
    v760 = v1668;
    if (!v1665)
      goto LABEL_1399;
    goto LABEL_919;
  }
LABEL_918:
  v760 = v1668;
  if (!v1665)
    goto LABEL_1399;
LABEL_919:
  if (*(_BYTE *)(v760 + 6))
  {
    v1716 = 0;
    v1715 = 0;
    v1714 = &v1715;
    v761 = *(uint64_t **)(v1664 + 16);
    if (v761)
    {
      v1706 = 0;
      v1677 = *(void **)(MEMORY[0x24BEDB7F0] + 16);
      v1676 = *(void **)(MEMORY[0x24BEDB7F0] + 24);
      v1674 = *(void **)(MEMORY[0x24BEDB7F0] + 32);
      v1673 = *(void **)(MEMORY[0x24BEDB7F0] + 40);
      v1671 = *(void **)(MEMORY[0x24BEDB7F0] + 48);
      v1669 = *(void **)(MEMORY[0x24BEDB7F0] + 8);
      v1662 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
      v1663 = (void *)*MEMORY[0x24BEDB7F0];
      v1661 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
      v1666 = (void *)(MEMORY[0x24BEDB848] + 16);
      while (1)
      {
        v762 = v761[6];
        v1692 = v761[7];
        if (v762 != v1692)
          break;
LABEL_922:
        v761 = (uint64_t *)*v761;
        if (!v761)
        {
          v1123 = v1715;
          goto LABEL_1398;
        }
      }
      v1686 = v761;
      while (1)
      {
        v763 = *((unsigned int *)v761 + 6);
        v764 = *(unsigned int *)(v762 + 24);
        v765 = &v1715;
        v766 = &v1715;
        v767 = v1715;
        if (v1715)
        {
          v768 = v1715;
          while (1)
          {
            v769 = HIDWORD(v768[1].__vftable);
            if (v763 == v769)
            {
              shared_owners_low = LODWORD(v768[1].__shared_owners_);
              if (v764 >= shared_owners_low)
              {
                _CF = shared_owners_low >= v764;
                v771 = shared_owners_low == v764;
                v772 = -1;
                if (_CF)
                  v772 = 1;
                if (v771)
                  v772 = 0;
LABEL_931:
                if ((v772 & 0x80) == 0)
                  goto LABEL_928;
                v768 = (std::__shared_weak_count *)((char *)v768 + 8);
              }
            }
            else if (v763 >= v769)
            {
              _CF = v769 >= v763;
              v772 = -1;
              if (_CF)
                v772 = 1;
              goto LABEL_931;
            }
            v768 = (std::__shared_weak_count *)v768->__vftable;
            if (!v768)
            {
              v773 = v1715;
              while (1)
              {
                while (1)
                {
                  v765 = (std::__shared_weak_count **)v773;
                  v774 = HIDWORD(v773[1].__vftable);
                  if (v763 == v774)
                    break;
                  if (v763 >= v774)
                  {
                    _CF = v774 >= v763;
                    v778 = -1;
                    if (_CF)
                      v778 = 1;
                    if ((v778 & 0x80) == 0)
                      goto LABEL_989;
                    goto LABEL_962;
                  }
LABEL_947:
                  v773 = *v765;
                  v766 = v765;
                  if (!*v765)
                    goto LABEL_964;
                }
                v775 = *((unsigned int *)v765 + 8);
                if (v764 < v775)
                  goto LABEL_947;
                _CF = v775 >= v764;
                v776 = v775 == v764;
                v777 = -1;
                if (_CF)
                  v777 = 1;
                if (v776)
                  v777 = 0;
                if ((v777 & 0x80) == 0)
                  goto LABEL_989;
LABEL_962:
                v773 = v765[1];
                if (!v773)
                {
                  v766 = v765 + 1;
                  goto LABEL_964;
                }
              }
            }
          }
        }
LABEL_964:
        v779 = (std::__shared_weak_count *)operator new(0x28uLL);
        *(std::__shared_weak_count_vtbl **)((char *)&v779[1].__vftable + 4) = (std::__shared_weak_count_vtbl *)(v763 | (v764 << 32));
        v779->__vftable = 0;
        v779->__shared_owners_ = 0;
        v779->__shared_weak_owners_ = (uint64_t)v765;
        *v766 = v779;
        if (*v1714)
        {
          v1714 = (std::__shared_weak_count **)*v1714;
          v779 = *v766;
        }
        v780 = v1715;
        _ZF = v779 == v1715;
        LOBYTE(v779[1].__vftable) = v779 == v1715;
        if (!_ZF)
        {
          do
          {
            shared_weak_owners = v779->__shared_weak_owners_;
            if (*(_BYTE *)(shared_weak_owners + 24))
              break;
            v782 = *(std::__shared_weak_count **)(shared_weak_owners + 16);
            v783 = v782->__vftable;
            if (v782->__vftable == (std::__shared_weak_count_vtbl *)shared_weak_owners)
            {
              shared_owners = v782->__shared_owners_;
              if (!shared_owners
                || (v787 = *(unsigned __int8 *)(shared_owners + 24), p_get_deleter = (_BYTE *)(shared_owners + 24), v787))
              {
                if (*(std::__shared_weak_count **)shared_weak_owners == v779)
                {
                  *(_BYTE *)(shared_weak_owners + 24) = 1;
                  LOBYTE(v782[1].__vftable) = 0;
                  v790 = *(std::__shared_weak_count_vtbl **)(shared_weak_owners + 8);
                  v782->__vftable = v790;
                  if (v790)
                    goto LABEL_981;
                }
                else
                {
                  v788 = *(uint64_t **)(shared_weak_owners + 8);
                  v789 = *v788;
                  *(_QWORD *)(shared_weak_owners + 8) = *v788;
                  if (v789)
                  {
                    *(_QWORD *)(v789 + 16) = shared_weak_owners;
                    v782 = *(std::__shared_weak_count **)(shared_weak_owners + 16);
                  }
                  v788[2] = (uint64_t)v782;
                  *(_QWORD *)(*(_QWORD *)(shared_weak_owners + 16)
                            + 8 * (**(_QWORD **)(shared_weak_owners + 16) != shared_weak_owners)) = v788;
                  *v788 = shared_weak_owners;
                  *(_QWORD *)(shared_weak_owners + 16) = v788;
                  v782 = (std::__shared_weak_count *)v788[2];
                  shared_weak_owners = (uint64_t)v782->__vftable;
                  *((_BYTE *)v788 + 24) = 1;
                  LOBYTE(v782[1].__vftable) = 0;
                  v790 = *(std::__shared_weak_count_vtbl **)(shared_weak_owners + 8);
                  v782->__vftable = v790;
                  if (v790)
LABEL_981:
                    v790->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v782;
                }
                *(_QWORD *)(shared_weak_owners + 16) = v782->__shared_weak_owners_;
                *(_QWORD *)(v782->__shared_weak_owners_ + 8 * (*(_QWORD *)v782->__shared_weak_owners_ != (_QWORD)v782)) = shared_weak_owners;
                *(_QWORD *)(shared_weak_owners + 8) = v782;
LABEL_987:
                v782->__shared_weak_owners_ = shared_weak_owners;
                break;
              }
            }
            else if (!v783
                   || (get_deleter_low = LOBYTE(v783->__get_deleter),
                       p_get_deleter = &v783->__get_deleter,
                       get_deleter_low))
            {
              if (*(std::__shared_weak_count **)shared_weak_owners == v779)
              {
                v957 = v779->__shared_owners_;
                *(_QWORD *)shared_weak_owners = v957;
                if (v957)
                {
                  *(_QWORD *)(v957 + 16) = shared_weak_owners;
                  v782 = *(std::__shared_weak_count **)(shared_weak_owners + 16);
                }
                v779->__shared_weak_owners_ = (uint64_t)v782;
                *(_QWORD *)(*(_QWORD *)(shared_weak_owners + 16)
                          + 8 * (**(_QWORD **)(shared_weak_owners + 16) != shared_weak_owners)) = v779;
                v779->__shared_owners_ = shared_weak_owners;
                *(_QWORD *)(shared_weak_owners + 16) = v779;
                v782 = (std::__shared_weak_count *)v779->__shared_weak_owners_;
                LOBYTE(v779[1].__vftable) = 1;
                LOBYTE(v782[1].__vftable) = 0;
                shared_weak_owners = v782->__shared_owners_;
                v791 = *(std::__shared_weak_count **)shared_weak_owners;
                v782->__shared_owners_ = *(_QWORD *)shared_weak_owners;
                if (v791)
LABEL_985:
                  v791->__shared_weak_owners_ = (uint64_t)v782;
              }
              else
              {
                *(_BYTE *)(shared_weak_owners + 24) = 1;
                LOBYTE(v782[1].__vftable) = 0;
                shared_weak_owners = v782->__shared_owners_;
                v791 = *(std::__shared_weak_count **)shared_weak_owners;
                v782->__shared_owners_ = *(_QWORD *)shared_weak_owners;
                if (v791)
                  goto LABEL_985;
              }
              *(_QWORD *)(shared_weak_owners + 16) = v782->__shared_weak_owners_;
              *(_QWORD *)(v782->__shared_weak_owners_ + 8 * (*(_QWORD *)v782->__shared_weak_owners_ != (_QWORD)v782)) = shared_weak_owners;
              *(_QWORD *)shared_weak_owners = v782;
              goto LABEL_987;
            }
            *(_BYTE *)(shared_weak_owners + 24) = 1;
            v779 = v782;
            LOBYTE(v782[1].__vftable) = v782 == v780;
            *p_get_deleter = 1;
          }
          while (v782 != v780);
        }
        v767 = v1715;
        ++v1716;
        v764 = *(unsigned int *)(v762 + 24);
        v763 = *((unsigned int *)v761 + 6);
LABEL_989:
        v792 = &v1715;
LABEL_991:
        v793 = v792;
        if (v767)
        {
          do
          {
            v792 = (std::__shared_weak_count **)v767;
            v794 = HIDWORD(v767[1].__vftable);
            if (v764 == v794)
            {
              v795 = *((unsigned int *)v792 + 8);
              if (v763 < v795)
                goto LABEL_990;
              _CF = v795 >= v763;
              v796 = v795 == v763;
              v797 = -1;
              if (_CF)
                v797 = 1;
              if (v796)
                v797 = 0;
              if ((v797 & 0x80) == 0)
                goto LABEL_1033;
            }
            else
            {
              if (v764 < v794)
              {
LABEL_990:
                v767 = *v792;
                goto LABEL_991;
              }
              _CF = v794 >= v764;
              v798 = -1;
              if (_CF)
                v798 = 1;
              if ((v798 & 0x80) == 0)
                goto LABEL_1033;
            }
            v767 = v792[1];
          }
          while (v767);
          v793 = v792 + 1;
        }
        v799 = (std::__shared_weak_count *)operator new(0x28uLL);
        *(std::__shared_weak_count_vtbl **)((char *)&v799[1].__vftable + 4) = (std::__shared_weak_count_vtbl *)(v764 | (v763 << 32));
        v799->__vftable = 0;
        v799->__shared_owners_ = 0;
        v799->__shared_weak_owners_ = (uint64_t)v792;
        *v793 = v799;
        if (*v1714)
        {
          v1714 = (std::__shared_weak_count **)*v1714;
          v799 = *v793;
        }
        v800 = v1715;
        _ZF = v799 == v1715;
        LOBYTE(v799[1].__vftable) = v799 == v1715;
        if (!_ZF)
        {
          do
          {
            v801 = v799->__shared_weak_owners_;
            if (*(_BYTE *)(v801 + 24))
              break;
            v802 = *(std::__shared_weak_count **)(v801 + 16);
            v803 = v802->__vftable;
            if (v802->__vftable == (std::__shared_weak_count_vtbl *)v801)
            {
              v806 = v802->__shared_owners_;
              if (!v806 || (v807 = *(unsigned __int8 *)(v806 + 24), v804 = (_BYTE *)(v806 + 24), v807))
              {
                if (*(std::__shared_weak_count **)v801 == v799)
                {
                  *(_BYTE *)(v801 + 24) = 1;
                  LOBYTE(v802[1].__vftable) = 0;
                  v810 = *(std::__shared_weak_count_vtbl **)(v801 + 8);
                  v802->__vftable = v810;
                  if (v810)
                    goto LABEL_1025;
                }
                else
                {
                  v808 = *(uint64_t **)(v801 + 8);
                  v809 = *v808;
                  *(_QWORD *)(v801 + 8) = *v808;
                  if (v809)
                  {
                    *(_QWORD *)(v809 + 16) = v801;
                    v802 = *(std::__shared_weak_count **)(v801 + 16);
                  }
                  v808[2] = (uint64_t)v802;
                  *(_QWORD *)(*(_QWORD *)(v801 + 16) + 8 * (**(_QWORD **)(v801 + 16) != v801)) = v808;
                  *v808 = v801;
                  *(_QWORD *)(v801 + 16) = v808;
                  v802 = (std::__shared_weak_count *)v808[2];
                  v801 = (uint64_t)v802->__vftable;
                  *((_BYTE *)v808 + 24) = 1;
                  LOBYTE(v802[1].__vftable) = 0;
                  v810 = *(std::__shared_weak_count_vtbl **)(v801 + 8);
                  v802->__vftable = v810;
                  if (v810)
LABEL_1025:
                    v810->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v802;
                }
                *(_QWORD *)(v801 + 16) = v802->__shared_weak_owners_;
                *(_QWORD *)(v802->__shared_weak_owners_ + 8 * (*(_QWORD *)v802->__shared_weak_owners_ != (_QWORD)v802)) = v801;
                *(_QWORD *)(v801 + 8) = v802;
LABEL_1031:
                v802->__shared_weak_owners_ = v801;
                break;
              }
            }
            else if (!v803 || (v805 = LOBYTE(v803->__get_deleter), v804 = &v803->__get_deleter, v805))
            {
              if (*(std::__shared_weak_count **)v801 == v799)
              {
                v1055 = v799->__shared_owners_;
                *(_QWORD *)v801 = v1055;
                if (v1055)
                {
                  *(_QWORD *)(v1055 + 16) = v801;
                  v802 = *(std::__shared_weak_count **)(v801 + 16);
                }
                v799->__shared_weak_owners_ = (uint64_t)v802;
                *(_QWORD *)(*(_QWORD *)(v801 + 16) + 8 * (**(_QWORD **)(v801 + 16) != v801)) = v799;
                v799->__shared_owners_ = v801;
                *(_QWORD *)(v801 + 16) = v799;
                v802 = (std::__shared_weak_count *)v799->__shared_weak_owners_;
                LOBYTE(v799[1].__vftable) = 1;
                LOBYTE(v802[1].__vftable) = 0;
                v801 = v802->__shared_owners_;
                v811 = *(std::__shared_weak_count **)v801;
                v802->__shared_owners_ = *(_QWORD *)v801;
                if (v811)
LABEL_1029:
                  v811->__shared_weak_owners_ = (uint64_t)v802;
              }
              else
              {
                *(_BYTE *)(v801 + 24) = 1;
                LOBYTE(v802[1].__vftable) = 0;
                v801 = v802->__shared_owners_;
                v811 = *(std::__shared_weak_count **)v801;
                v802->__shared_owners_ = *(_QWORD *)v801;
                if (v811)
                  goto LABEL_1029;
              }
              *(_QWORD *)(v801 + 16) = v802->__shared_weak_owners_;
              *(_QWORD *)(v802->__shared_weak_owners_ + 8 * (*(_QWORD *)v802->__shared_weak_owners_ != (_QWORD)v802)) = v801;
              *(_QWORD *)v801 = v802;
              goto LABEL_1031;
            }
            *(_BYTE *)(v801 + 24) = 1;
            v799 = v802;
            LOBYTE(v802[1].__vftable) = v802 == v800;
            *v804 = 1;
          }
          while (v802 != v800);
        }
        ++v1716;
LABEL_1033:
        if (!*(_BYTE *)(v762 + 160)
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/MapOptimizationUtil.cpp", 258, (uint64_t)"edge.T_source_to_neighbor", 25, (uint64_t)"Edge transfomation not exist", 28, (void (*)(void **))sub_21023DDB0)|| !*(_BYTE *)(v762 + 456)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/MapOptimizationUtil.cpp", 260, (uint64_t)"edge.JtJ_source_to_neighbor", 27, (uint64_t)"Edge transfomation not exist", 28, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if (!*(_BYTE *)(v762 + 160) || !*(_BYTE *)(v762 + 456))
          sub_20E866B34();
        v812 = v761[3];
        v813 = *(_QWORD *)(v762 + 24);
        memcpy(v1805, (const void *)(v762 + 168), sizeof(v1805));
        v814 = *(_OWORD *)(v762 + 112);
        v1801 = *(_OWORD *)(v762 + 96);
        v1802 = v814;
        v815 = *(__n128 *)(v762 + 144);
        v1803 = *(_OWORD *)(v762 + 128);
        v1804 = v815;
        v816 = *(_OWORD *)(v762 + 48);
        v1797 = *(_OWORD *)(v762 + 32);
        v1798 = v816;
        v836 = *(__n128 *)(v762 + 64);
        v837 = *(__n128 *)(v762 + 80);
        v1799 = v836;
        v1800 = v837;
        v817 = *(double *)(v762 + 168);
        v819 = *(double *)(v762 + 216);
        v818 = *(double *)(v762 + 224);
        v820 = *(double *)(v762 + 264);
        v821 = *(double *)(v762 + 272);
        v822 = *(double *)(v762 + 280);
        v823 = *(double *)(v762 + 312);
        v824 = *(double *)(v762 + 320);
        v826 = *(double *)(v762 + 328);
        v825 = *(double *)(v762 + 336);
        v828 = *(double *)(v762 + 360);
        v827 = *(double *)(v762 + 368);
        v830 = *(double *)(v762 + 376);
        v829.n128_u64[0] = *(_QWORD *)(v762 + 384);
        v831.n128_u64[0] = *(_QWORD *)(v762 + 392);
        v833.n128_u64[0] = *(_QWORD *)(v762 + 408);
        v832.n128_u64[0] = *(_QWORD *)(v762 + 416);
        v835.n128_u64[0] = *(_QWORD *)(v762 + 424);
        v834.n128_u64[0] = *(_QWORD *)(v762 + 432);
        v837.n128_u64[0] = *(_QWORD *)(v762 + 440);
        v836.n128_u64[0] = *(_QWORD *)(v762 + 448);
        v1723 = 0;
        v1722[2] = 0;
        v1725 = 0;
        v1724 = 0;
        v838 = *(_QWORD **)(v1721 + 5776);
        v1712 = (int64x2_t *)v1721;
        v839 = *(_QWORD **)(v1721 + 5784);
        if (v838 == v839)
        {
          v840 = *(_QWORD **)(v1721 + 5776);
        }
        else
        {
          v840 = *(_QWORD **)(v1721 + 5784);
          if (*(v839 - 111) >= (unint64_t)v1706)
          {
            v841 = 0xB195E8EFDB195E8FLL * (v839 - v838);
            v842 = *(_QWORD **)(v1721 + 5776);
            do
            {
              v843 = v841 >> 1;
              v844 = &v842[111 * (v841 >> 1)];
              v845 = *v844;
              v846 = v844 + 111;
              v841 += ~(v841 >> 1);
              if (v845 < v1706)
                v842 = v846;
              else
                v841 = v843;
            }
            while (v841);
            v840 = *(_QWORD **)(v1721 + 5784);
            if (v842 != v839)
            {
              v840 = v842;
              if (*v842 == v1706)
              {
LABEL_1095:
                v907 = 1;
                v908 = v1723;
                if (!v1723)
                  goto LABEL_1101;
                goto LABEL_1098;
              }
            }
          }
        }
        *(_QWORD *)oslog = v1706;
        memset(&oslog[24], 0, 40);
        *(_QWORD *)&oslog[16] = sqrt(v817);
        *(double *)&oslog[64] = v819 / *(double *)&oslog[16];
        memset(&oslog[80], 0, 32);
        *(_QWORD *)&oslog[72] = sqrt(v818 - *(double *)&oslog[64] * *(double *)&oslog[64]);
        *(double *)&oslog[112] = v820 / *(double *)&oslog[16];
        *(double *)&oslog[120] = (v821 - v819 / *(double *)&oslog[16] * (v820 / *(double *)&oslog[16]))
                               / *(double *)&oslog[72];
        *(_QWORD *)&oslog[128] = sqrt(v822- *(double *)&oslog[112] * *(double *)&oslog[112]- *(double *)&oslog[120] * *(double *)&oslog[120]);
        memset(&oslog[136], 0, 24);
        *(double *)&oslog[160] = v823 / *(double *)&oslog[16];
        *(double *)&oslog[168] = (v824 - v819 / *(double *)&oslog[16] * (v823 / *(double *)&oslog[16]))
                               / *(double *)&oslog[72];
        *(double *)&oslog[176] = (v826
                                - v820 / *(double *)&oslog[16] * (v823 / *(double *)&oslog[16])
                                - *(double *)&oslog[120] * *(double *)&oslog[168])
                               / *(double *)&oslog[128];
        *(_QWORD *)&oslog[184] = sqrt(v825- *(double *)&oslog[160] * *(double *)&oslog[160]- *(double *)&oslog[168] * *(double *)&oslog[168]- *(double *)&oslog[176] * *(double *)&oslog[176]);
        *(_QWORD *)&oslog[192] = 0;
        *(_QWORD *)&oslog[200] = 0;
        *(double *)&oslog[208] = v828 / *(double *)&oslog[16];
        *(double *)&oslog[216] = (v827 - v819 / *(double *)&oslog[16] * (v828 / *(double *)&oslog[16]))
                               / *(double *)&oslog[72];
        *(double *)&oslog[224] = (v830
                                - v820 / *(double *)&oslog[16] * (v828 / *(double *)&oslog[16])
                                - *(double *)&oslog[120] * *(double *)&oslog[216])
                               / *(double *)&oslog[128];
        *(double *)&oslog[232] = (v829.n128_f64[0]
                                - v823 / *(double *)&oslog[16] * (v828 / *(double *)&oslog[16])
                                - *(double *)&oslog[168] * *(double *)&oslog[216]
                                - *(double *)&oslog[176] * *(double *)&oslog[224])
                               / *(double *)&oslog[184];
        *(_QWORD *)&oslog[240] = sqrt(v831.n128_f64[0]- *(double *)&oslog[208] * *(double *)&oslog[208]- *(double *)&oslog[216] * *(double *)&oslog[216]- *(double *)&oslog[224] * *(double *)&oslog[224]- *(double *)&oslog[232] * *(double *)&oslog[232]);
        *(_QWORD *)&oslog[248] = 0;
        *(double *)&oslog[256] = v833.n128_f64[0] / *(double *)&oslog[16];
        *(double *)&oslog[264] = (v832.n128_f64[0]
                                - v819 / *(double *)&oslog[16] * (v833.n128_f64[0] / *(double *)&oslog[16]))
                               / *(double *)&oslog[72];
        *(double *)&oslog[272] = (v835.n128_f64[0]
                                - v820 / *(double *)&oslog[16] * (v833.n128_f64[0] / *(double *)&oslog[16])
                                - *(double *)&oslog[120] * *(double *)&oslog[264])
                               / *(double *)&oslog[128];
        *(double *)&oslog[280] = (v834.n128_f64[0]
                                - v823 / *(double *)&oslog[16] * (v833.n128_f64[0] / *(double *)&oslog[16])
                                - *(double *)&oslog[168] * *(double *)&oslog[264]
                                - *(double *)&oslog[176] * *(double *)&oslog[272])
                               / *(double *)&oslog[184];
        *(double *)&oslog[288] = (v837.n128_f64[0]
                                - v828 / *(double *)&oslog[16] * (v833.n128_f64[0] / *(double *)&oslog[16])
                                - *(double *)&oslog[216] * *(double *)&oslog[264]
                                - *(double *)&oslog[224] * *(double *)&oslog[272]
                                - *(double *)&oslog[232] * *(double *)&oslog[280])
                               / *(double *)&oslog[240];
        *(_QWORD *)&oslog[296] = sqrt(v836.n128_f64[0]- *(double *)&oslog[256] * *(double *)&oslog[256]- *(double *)&oslog[264] * *(double *)&oslog[264]- *(double *)&oslog[272] * *(double *)&oslog[272]- *(double *)&oslog[280] * *(double *)&oslog[280]- *(double *)&oslog[288] * *(double *)&oslog[288]);
        memcpy(&oslog[304], v1805, 0x120uLL);
        v1811 = v1801;
        v1812 = v1802;
        v1813 = v1803;
        v1814 = v1804;
        v1807 = v1797;
        v1808 = v1798;
        v836 = v1799;
        v837 = v1800;
        v1809 = v1799;
        v1810 = v1800;
        v847 = 1;
        v1815 = 1;
        v1816 = 0uLL;
        v1825 = 0;
        v1826 = 0;
        v1823 = 0xBFF0000000000000;
        v1824 = 0;
        v1827 = 0;
        v848 = (int64x2_t *)v1721;
        v849 = *(char **)(v1721 + 4888);
        v850 = *(char **)(v1721 + 4896);
        v851 = v850 - v849;
        if (v850 == v849)
          goto LABEL_1089;
        v852 = (int64x2_t *)(v1721 + 5856);
        v853 = v851 >> 4;
        v854 = *(char **)(v1721 + 4888);
        v855 = v851 >> 4;
        do
        {
          v856 = v855 >> 1;
          v857 = (unsigned int *)&v854[16 * (v855 >> 1)];
          v859 = *v857;
          v858 = (char *)(v857 + 4);
          v855 += ~(v855 >> 1);
          if (v859 < v812)
            v854 = v858;
          else
            v855 = v856;
        }
        while (v855);
        if (v854 == v850 || *(_DWORD *)v854 != (_DWORD)v812)
          goto LABEL_1088;
        v1658 = v838;
        v860 = *((_QWORD *)v854 + 1);
        *(_QWORD *)&v1816 = v860;
        ++*(_DWORD *)(*((_QWORD *)v854 + 1) + 8);
        do
        {
          v861 = v853 >> 1;
          v862 = (unsigned int *)&v849[16 * (v853 >> 1)];
          v864 = *v862;
          v863 = (char *)(v862 + 4);
          v853 += ~(v853 >> 1);
          if (v864 < v813)
            v849 = v863;
          else
            v853 = v861;
        }
        while (v853);
        if (v849 == v850 || *(_DWORD *)v849 != (_DWORD)v813)
        {
          if (v860)
            --*(_DWORD *)(v860 + 8);
          goto LABEL_1088;
        }
        v865 = *((_QWORD *)v849 + 1);
        *((_QWORD *)&v1816 + 1) = v865;
        ++*(_DWORD *)(*((_QWORD *)v849 + 1) + 8);
        if (!*(_BYTE *)(v860 + 20) && !*(_BYTE *)(v865 + 20))
        {
          --*(_DWORD *)(v860 + 8);
          --*(_DWORD *)(v865 + 8);
LABEL_1088:
          v847 = 1;
LABEL_1089:
          v904 = v1725;
          if (!v1725)
            goto LABEL_1094;
          goto LABEL_1090;
        }
        object[0] = (void *)v1706;
        *(_OWORD *)&object[1] = *(_OWORD *)oslog;
        memcpy(&object[3], &oslog[16], 0x120uLL);
        memcpy(&object[39], &oslog[304], 0x120uLL);
        v1734 = v1811;
        v1735 = v1812;
        v1736 = v1813;
        v1737 = v1814;
        v1730 = v1807;
        v1731 = v1808;
        v1732 = v1809;
        v1733 = v1810;
        v1738 = 1;
        v1739 = v1816;
        v1740 = v1817;
        v1741 = v1818;
        v1742 = v1819;
        v1743 = v1820;
        v1744 = v1821;
        v1745 = v1822;
        v1746 = v1823;
        v1747 = v1824;
        v1748 = 0uLL;
        v1825 = 0;
        v1826 = 0;
        v1749 = 0;
        if (v839 == v840 || *v840 != v1706)
          break;
LABEL_1382:
        v852->i8[2] = 0;
        v852->i8[0] = 0;
        v837 = (__n128)xmmword_2103B2300;
        v836 = (__n128)vaddq_s64(v848[365], (int64x2_t)xmmword_2103B2300);
        v848[365] = (int64x2_t)v836;
        v1120 = v1826;
        if (!v1826)
          goto LABEL_1386;
        v1121 = (unint64_t *)&v1826->__shared_owners_;
        do
          v1122 = __ldaxr(v1121);
        while (__stlxr(v1122 - 1, v1121));
        if (!v1122)
        {
          ((void (*)(std::__shared_weak_count *))v1120->__on_zero_shared)(v1120);
          std::__shared_weak_count::__release_weak(v1120);
          v847 = 0;
          v904 = v1725;
          if (!v1725)
            goto LABEL_1094;
        }
        else
        {
LABEL_1386:
          v847 = 0;
          v904 = v1725;
          if (!v1725)
            goto LABEL_1094;
        }
LABEL_1090:
        v905 = (unint64_t *)&v904->__shared_owners_;
        do
          v906 = __ldaxr(v905);
        while (__stlxr(v906 - 1, v905));
        if (!v906)
        {
          ((void (*)(std::__shared_weak_count *))v904->__on_zero_shared)(v904);
          std::__shared_weak_count::__release_weak(v904);
        }
LABEL_1094:
        if ((v847 & 1) != 0)
          goto LABEL_1095;
        v907 = 0;
        v848[414].i8[12] = 0;
        v848[414].i32[2] = 0;
        v908 = v1723;
        if (!v1723)
          goto LABEL_1101;
LABEL_1098:
        v909 = (unint64_t *)&v908->__shared_owners_;
        do
          v910 = __ldaxr(v909);
        while (__stlxr(v910 - 1, v909));
        if (v910)
        {
LABEL_1101:
          if (v907)
            goto LABEL_1102;
          goto LABEL_927;
        }
        ((void (*)(std::__shared_weak_count *, __n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128, double, double))v908->__on_zero_shared)(v908, v836, v837, v834, v835, v832, v833, v831, v829, *(double *)&v1652, v1653);
        std::__shared_weak_count::__release_weak(v908);
        if (v907)
        {
LABEL_1102:
          v911 = MEMORY[0x24BEDB858];
          v912 = (void *)(MEMORY[0x24BEDB858] + 104);
          object[16] = (void *)(MEMORY[0x24BEDB858] + 104);
          v913 = (void *)(MEMORY[0x24BEDB858] + 64);
          object[2] = (void *)(MEMORY[0x24BEDB858] + 64);
          object[0] = v1677;
          *(void **)((char *)object + *((_QWORD *)v1677 - 3)) = v1676;
          object[1] = 0;
          v914 = (std::ios_base *)((char *)object + *((_QWORD *)object[0] - 3));
          std::ios_base::init(v914, &object[3]);
          v914[1].__vftable = 0;
          v914[1].__fmtflags_ = -1;
          object[2] = v1674;
          *(void **)((char *)&object[2] + *((_QWORD *)v1674 - 3)) = v1673;
          object[0] = v1669;
          *(void **)((char *)object + *((_QWORD *)v1669 - 3)) = v1671;
          object[16] = v912;
          object[0] = (void *)(v911 + 24);
          object[2] = v913;
          std::streambuf::basic_streambuf();
          object[3] = v1666;
          memset(&object[11], 0, 32);
          LODWORD(object[15]) = 24;
          v915 = (char *)v1712[305].i64[1];
          v916 = (char *)v1712[306].i64[0];
          v917 = v915;
          if (v916 != v915)
          {
            v918 = (v916 - v915) >> 4;
            v917 = (char *)v1712[305].i64[1];
            do
            {
              v919 = v918 >> 1;
              v920 = (unsigned int *)&v917[16 * (v918 >> 1)];
              v922 = *v920;
              v921 = (char *)(v920 + 4);
              v918 += ~(v918 >> 1);
              if (v922 < v813)
                v917 = v921;
              else
                v918 = v919;
            }
            while (v918);
          }
          if (v917 == v916 || *(_DWORD *)v917 != (_DWORD)v813)
          {
            v928 = 1;
            v929 = v916 - v915;
            if (v916 == v915)
              goto LABEL_1157;
          }
          else
          {
            v923 = sub_20E86A980(&object[2], (uint64_t)"error: landmark variable ", 25);
            sub_20F622E88((uint64_t)v1794);
            if (v1794[23] >= 0)
              v924 = v1794;
            else
              v924 = *(_BYTE **)v1794;
            if (v1794[23] >= 0)
              v925 = v1794[23];
            else
              v925 = *(_QWORD *)&v1794[8];
            v926 = sub_20E86A980(v923, (uint64_t)v924, v925);
            sub_20E86A980(v926, (uint64_t)" with ID ", 9);
            v927 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v927, (uint64_t)" was not found.\n", 16);
            if ((v1794[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)v1794);
              v928 = 0;
              v915 = (char *)v1712[305].i64[1];
              v916 = (char *)v1712[306].i64[0];
              v929 = v916 - v915;
              if (v916 == v915)
                goto LABEL_1157;
            }
            else
            {
              v928 = 0;
              v915 = (char *)v1712[305].i64[1];
              v916 = (char *)v1712[306].i64[0];
              v929 = v916 - v915;
              if (v916 == v915)
                goto LABEL_1157;
            }
          }
          v930 = v929 >> 4;
          v931 = v915;
          v932 = v930;
          do
          {
            v933 = v932 >> 1;
            v934 = (unsigned int *)&v931[16 * (v932 >> 1)];
            v936 = *v934;
            v935 = (char *)(v934 + 4);
            v932 += ~(v932 >> 1);
            if (v936 < v812)
              v931 = v935;
            else
              v932 = v933;
          }
          while (v932);
          if (v931 == v916 || *(_DWORD *)v931 != (_DWORD)v812)
          {
LABEL_1157:
            v958 = sub_20E86A980(&object[2], (uint64_t)"error: variable ", 16);
            sub_20F622E88((uint64_t)v1794);
            if (v1794[23] >= 0)
              v959 = v1794;
            else
              v959 = *(_BYTE **)v1794;
            if (v1794[23] >= 0)
              v960 = v1794[23];
            else
              v960 = *(_QWORD *)&v1794[8];
            v961 = sub_20E86A980(v958, (uint64_t)v959, v960);
            sub_20E86A980(v961, (uint64_t)" with ID ", 9);
            v962 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v962, (uint64_t)" not found\n", 11);
            if ((v1794[23] & 0x80000000) != 0)
              operator delete(*(void **)v1794);
            v928 = 0;
            v952 = 0;
            v953 = (char *)v1712[305].i64[1];
            v954 = (char *)v1712[306].i64[0];
            v955 = v953;
            v956 = v954 - v953;
            if (v954 == v953)
              goto LABEL_1171;
          }
          else
          {
            do
            {
              v937 = v930 >> 1;
              v938 = (unsigned int *)&v915[16 * (v930 >> 1)];
              v940 = *v938;
              v939 = (char *)(v938 + 4);
              v930 += ~(v930 >> 1);
              if (v940 < v812)
                v915 = v939;
              else
                v930 = v937;
            }
            while (v930);
            if (v915 == v916 || *(_DWORD *)v915 != (_DWORD)v812)
              v915 = v916;
            v941 = *((_QWORD *)v915 + 1);
            v942 = sub_20E86A980(&object[2], (uint64_t)"debug: variable ", 16);
            sub_20F622E88((uint64_t)v1794);
            if (v1794[23] >= 0)
              v943 = v1794;
            else
              v943 = *(_BYTE **)v1794;
            if (v1794[23] >= 0)
              v944 = v1794[23];
            else
              v944 = *(_QWORD *)&v1794[8];
            v945 = sub_20E86A980(v942, (uint64_t)v943, v944);
            sub_20E86A980(v945, (uint64_t)" with ID ", 9);
            v946 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v946, (uint64_t)" found (", 8);
            v947 = (_QWORD *)std::ostream::operator<<();
            v948 = sub_20E86A980(v947, (uint64_t)", ", 2);
            if (*(_BYTE *)(v941 + 20))
              v949 = "free";
            else
              v949 = "fixed";
            if (*(_BYTE *)(v941 + 20))
              v950 = 4;
            else
              v950 = 5;
            v951 = sub_20E86A980(v948, (uint64_t)v949, v950);
            sub_20E86A980(v951, (uint64_t)")\n", 2);
            if ((v1794[23] & 0x80000000) != 0)
              operator delete(*(void **)v1794);
            v952 = *(unsigned __int8 *)(v941 + 20);
            v953 = (char *)v1712[305].i64[1];
            v954 = (char *)v1712[306].i64[0];
            v955 = v953;
            v956 = v954 - v953;
            if (v954 == v953)
            {
LABEL_1171:
              if (v955 != v954 && *(_DWORD *)v955 == (_DWORD)v813)
              {
                if (v954 != v953)
                {
                  v968 = (v954 - v953) >> 4;
                  do
                  {
                    v969 = v968 >> 1;
                    v970 = (unsigned int *)&v953[16 * (v968 >> 1)];
                    v972 = *v970;
                    v971 = (char *)(v970 + 4);
                    v968 += ~(v968 >> 1);
                    if (v972 < v813)
                      v953 = v971;
                    else
                      v968 = v969;
                  }
                  while (v968);
                }
                if (v953 == v954 || *(_DWORD *)v953 != (_DWORD)v813)
                  v953 = v954;
                v973 = *((_QWORD *)v953 + 1);
                v974 = sub_20E86A980(&object[2], (uint64_t)"debug: variable ", 16);
                sub_20F622E88((uint64_t)v1794);
                if (v1794[23] >= 0)
                  v975 = v1794;
                else
                  v975 = *(_BYTE **)v1794;
                if (v1794[23] >= 0)
                  v976 = v1794[23];
                else
                  v976 = *(_QWORD *)&v1794[8];
                v977 = sub_20E86A980(v974, (uint64_t)v975, v976);
                sub_20E86A980(v977, (uint64_t)" with ID ", 9);
                v978 = (_QWORD *)std::ostream::operator<<();
                sub_20E86A980(v978, (uint64_t)" found (", 8);
                v979 = (_QWORD *)std::ostream::operator<<();
                v980 = sub_20E86A980(v979, (uint64_t)", ", 2);
                if (*(_BYTE *)(v973 + 20))
                  v981 = "free";
                else
                  v981 = "fixed";
                if (*(_BYTE *)(v973 + 20))
                  v982 = 4;
                else
                  v982 = 5;
                v983 = sub_20E86A980(v980, (uint64_t)v981, v982);
                sub_20E86A980(v983, (uint64_t)")\n", 2);
                if ((v1794[23] & 0x80000000) != 0)
                  operator delete(*(void **)v1794);
                v952 |= *(unsigned __int8 *)(v973 + 20);
                v984 = (char *)v1712[361].i64[0];
                v985 = (char *)v1712[361].i64[1];
                v986 = v985 - v984;
                if (v985 == v984)
                  goto LABEL_1223;
LABEL_1207:
                v992 = 0xB195E8EFDB195E8FLL * (v986 >> 3);
                do
                {
                  v993 = v992 >> 1;
                  v994 = (unint64_t *)&v984[888 * (v992 >> 1)];
                  v995 = *v994;
                  v996 = (char *)(v994 + 111);
                  v992 += ~(v992 >> 1);
                  if (v995 < v1706)
                    v984 = v996;
                  else
                    v992 = v993;
                }
                while (v992);
                if (v985 != v984 && *(_QWORD *)v984 == v1706)
                {
                  v997 = sub_20E86A980(&object[2], (uint64_t)"error: factor ", 14);
                  sub_20F626DE0((uint64_t)v1794);
                  if (v1794[23] >= 0)
                    v998 = v1794;
                  else
                    v998 = *(_BYTE **)v1794;
                  if (v1794[23] >= 0)
                    v999 = v1794[23];
                  else
                    v999 = *(_QWORD *)&v1794[8];
                  v1000 = sub_20E86A980(v997, (uint64_t)v998, v999);
                  sub_20E86A980(v1000, (uint64_t)" with the same ID ", 18);
                  v1001 = (_QWORD *)std::ostream::operator<<();
                  sub_20E86A980(v1001, (uint64_t)" already exists.\n", 17);
                  if ((v1794[23] & 0x80000000) != 0)
                    operator delete(*(void **)v1794);
                  v928 = 0;
                }
                goto LABEL_1223;
              }
              v987 = sub_20E86A980(&object[2], (uint64_t)"error: variable ", 16);
              sub_20F622E88((uint64_t)v1794);
              if (v1794[23] >= 0)
                v988 = v1794;
              else
                v988 = *(_BYTE **)v1794;
              if (v1794[23] >= 0)
                v989 = v1794[23];
              else
                v989 = *(_QWORD *)&v1794[8];
              v990 = sub_20E86A980(v987, (uint64_t)v988, v989);
              sub_20E86A980(v990, (uint64_t)" with ID ", 9);
              v991 = (_QWORD *)std::ostream::operator<<();
              sub_20E86A980(v991, (uint64_t)" not found\n", 11);
              if ((v1794[23] & 0x80000000) != 0)
                operator delete(*(void **)v1794);
              v928 = 0;
              v984 = (char *)v1712[361].i64[0];
              v985 = (char *)v1712[361].i64[1];
              v986 = v985 - v984;
              if (v985 != v984)
                goto LABEL_1207;
LABEL_1223:
              if (v952)
              {
                v1002 = v928 != 0;
                v1003 = (char)object[15];
                if (((uint64_t)object[15] & 0x10) == 0)
                  goto LABEL_1225;
LABEL_1235:
                v1011 = object[14];
                v1012 = &object[8];
                if (object[14] < object[9])
                {
                  object[14] = object[9];
                  v1011 = object[9];
                  v1012 = &object[8];
                }
LABEL_1238:
                v1013 = *v1012;
                v1004 = v1011 - (_BYTE *)*v1012;
                if (v1004 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v1004 >= 0x17)
                {
                  v1014 = (v1004 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v1004 | 7) != 0x17)
                    v1014 = v1004 | 7;
                  v1015 = v1014 + 1;
                  v1005 = operator new(v1014 + 1);
                  *(_QWORD *)&v1794[16] = v1015 | 0x8000000000000000;
                  *(_QWORD *)v1794 = v1005;
                  *(_QWORD *)&v1794[8] = v1004;
                }
                else
                {
                  v1794[23] = (_BYTE)v1011 - *(_BYTE *)v1012;
                  v1005 = v1794;
                  if (!v1004)
                    goto LABEL_1246;
                }
                memmove(v1005, v1013, v1004);
                goto LABEL_1246;
              }
              v1006 = sub_20E86A980(&object[2], (uint64_t)"error: factor ", 14);
              sub_20F626DE0((uint64_t)v1794);
              if (v1794[23] >= 0)
                v1007 = v1794;
              else
                v1007 = *(_BYTE **)v1794;
              if (v1794[23] >= 0)
                v1008 = v1794[23];
              else
                v1008 = *(_QWORD *)&v1794[8];
              v1009 = sub_20E86A980(v1006, (uint64_t)v1007, v1008);
              sub_20E86A980(v1009, (uint64_t)" with ID ", 9);
              v1010 = (_QWORD *)std::ostream::operator<<();
              sub_20E86A980(v1010, (uint64_t)" cannot be added: all variables are fixed.\n", 43);
              if ((v1794[23] & 0x80000000) != 0)
              {
                operator delete(*(void **)v1794);
                v1002 = 0;
                v1003 = (char)object[15];
                if (((uint64_t)object[15] & 0x10) != 0)
                  goto LABEL_1235;
              }
              else
              {
                v1002 = 0;
                v1003 = (char)object[15];
                if (((uint64_t)object[15] & 0x10) != 0)
                  goto LABEL_1235;
              }
LABEL_1225:
              if ((v1003 & 8) != 0)
              {
                v1011 = object[7];
                v1012 = &object[5];
                goto LABEL_1238;
              }
              v1004 = 0;
              v1794[23] = 0;
              v1005 = v1794;
LABEL_1246:
              v1005[v1004] = 0;
              *(_OWORD *)oslog = *(_OWORD *)v1794;
              *(_QWORD *)&oslog[16] = *(_QWORD *)&v1794[16];
              oslog[24] = v1002;
              object[0] = v1663;
              *(void **)((char *)object + *((_QWORD *)v1663 - 3)) = v1662;
              object[2] = v1661;
              object[3] = (void *)(MEMORY[0x24BEDB848] + 16);
              if (SHIBYTE(object[13]) < 0)
                operator delete(object[11]);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x212BC6290](&object[16]);
              v1016 = oslog[23];
              if ((oslog[23] & 0x80000000) != 0)
              {
                v1019 = *(_QWORD *)&oslog[8];
                v1020 = (*(_QWORD *)&oslog[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if (v1020 - *(_QWORD *)&oslog[8] < 0x5B)
                {
                  v1017 = *(_QWORD *)&oslog[8] + 91;
                  if (0x7FFFFFFFFFFFFFF7 - (*(_QWORD *)&oslog[16] & 0x7FFFFFFFFFFFFFFFuLL) < *(_QWORD *)&oslog[8]
                                                                                              + 91
                                                                                              - v1020)
                    sub_20E860B7C();
                  v1018 = *(_BYTE **)oslog;
                  v1021 = 0x7FFFFFFFFFFFFFF7;
                  if (v1020 < 0x3FFFFFFFFFFFFFF3)
                  {
LABEL_1254:
                    v1022 = 2 * v1020;
                    if (v1017 > 2 * v1020)
                      v1022 = v1017;
                    if (v1022 >= 0x17)
                    {
                      v1027 = (v1022 & 0xFFFFFFFFFFFFFFF8) + 8;
                      v1028 = v1022 | 7;
                      if (v1028 == 23)
                        v1028 = v1027;
                      v1021 = v1028 + 1;
                    }
                    else
                    {
                      v1021 = 23;
                    }
                  }
                  v1029 = (char *)operator new(v1021);
                  v1030 = v1029;
                  qmemcpy(v1029, "Failed to add a factor into the linear system. This could be due to duplicate factor IDs ('", 91);
                  if (v1019)
                    memmove(v1029 + 91, v1018, v1019);
                  if (v1020 != 22)
                    operator delete(v1018);
                  *(_QWORD *)&oslog[16] = v1021 | 0x8000000000000000;
                  *(_QWORD *)oslog = v1030;
                  *(_QWORD *)&oslog[8] = v1017;
                  v1031 = &v1030[v1017];
                  goto LABEL_1280;
                }
                v1023 = *(char **)oslog;
                if (*(_QWORD *)&oslog[8])
                  goto LABEL_1259;
              }
              else
              {
                if (oslog[23] < 0x17u)
                {
                  v1017 = oslog[23] + 91;
                  v1018 = oslog;
                  v1019 = oslog[23];
                  v1020 = 22;
                  goto LABEL_1254;
                }
                v1023 = oslog;
                v1019 = oslog[23];
                if (oslog[23])
                {
LABEL_1259:
                  v1024 = &v1023[v1019] <= "Failed to add a factor into the linear system. This could be due to duplicate factor IDs ('"
                       || v1023 > "Failed to add a factor into the linear system. This could be due to duplicate factor IDs ('";
                  v1025 = 91;
                  if (v1024)
                    v1025 = 0;
                  v1026 = &aFailedToAddAFa[v1025];
                  memmove(v1023 + 91, v1023, v1019);
LABEL_1276:
                  *((_OWORD *)v1023 + 2) = *((_OWORD *)v1026 + 2);
                  *((_OWORD *)v1023 + 3) = *((_OWORD *)v1026 + 3);
                  *((_OWORD *)v1023 + 4) = *((_OWORD *)v1026 + 4);
                  *(_OWORD *)(v1023 + 75) = *(_OWORD *)(v1026 + 75);
                  *(_OWORD *)v1023 = *(_OWORD *)v1026;
                  *((_OWORD *)v1023 + 1) = *((_OWORD *)v1026 + 1);
                  v1032 = v1019 + 91;
                  if (v1016 < 0)
                    *(_QWORD *)&oslog[8] = v1019 + 91;
                  else
                    oslog[23] = v1032 & 0x7F;
                  v1031 = &v1023[v1032];
LABEL_1280:
                  *v1031 = 0;
                  *(_QWORD *)&v1835 = *(_QWORD *)&oslog[16];
                  v1834 = *(_OWORD *)oslog;
                  memset(oslog, 0, 24);
                  if (SBYTE7(v1835) < 0)
                  {
                    v1033 = *((_QWORD *)&v1834 + 1);
                    v1036 = (v1835 & 0x7FFFFFFFFFFFFFFFLL) - 1;
                    if (v1036 - *((_QWORD *)&v1834 + 1) >= 3)
                    {
                      v1039 = (__int128 *)v1834;
                      goto LABEL_1301;
                    }
                    v1034 = *((_QWORD *)&v1834 + 1) + 3;
                    if (0x7FFFFFFFFFFFFFF7 - ((unint64_t)v1835 & 0x7FFFFFFFFFFFFFFFLL) < *((_QWORD *)&v1834 + 1)
                                                                                                 + 3
                                                                                                 - v1036)
LABEL_1990:
                      sub_20E860B7C();
                    v1035 = (__int128 *)v1834;
                    v1037 = 0x7FFFFFFFFFFFFFF7;
                    if (v1036 < 0x3FFFFFFFFFFFFFF3)
                    {
LABEL_1287:
                      v1038 = 2 * v1036;
                      if (v1034 > 2 * v1036)
                        v1038 = v1034;
                      if (v1038 >= 0x17)
                      {
                        v1040 = (v1038 & 0xFFFFFFFFFFFFFFF8) + 8;
                        v1041 = v1038 | 7;
                        if (v1041 == 23)
                          v1041 = v1040;
                        v1037 = v1041 + 1;
                      }
                      else
                      {
                        v1037 = 23;
                      }
                    }
                    v1042 = (char *)operator new(v1037);
                    v1043 = v1042;
                    if (v1033)
                      memmove(v1042, v1035, v1033);
                    v1044 = &v1043[v1033];
                    v1044[2] = 46;
                    *(_WORD *)v1044 = 10535;
                    if (v1036 != 22)
                      operator delete(v1035);
                    *(_QWORD *)&v1835 = v1037 | 0x8000000000000000;
                    *(_QWORD *)&v1834 = v1043;
                    *((_QWORD *)&v1834 + 1) = v1034;
                    v1045 = &v1043[v1034];
                  }
                  else
                  {
                    v1033 = BYTE7(v1835);
                    if ((unint64_t)BYTE7(v1835) - 20 < 3)
                    {
                      if (BYTE7(v1835) <= 0x12u)
                        goto LABEL_1990;
                      v1034 = BYTE7(v1835) + 3;
                      v1035 = &v1834;
                      v1036 = 22;
                      goto LABEL_1287;
                    }
                    v1039 = &v1834;
LABEL_1301:
                    v1046 = (char *)v1039 + v1033;
                    v1046[2] = 46;
                    *(_WORD *)v1046 = 10535;
                    v1047 = v1033 + 3;
                    if (SBYTE7(v1835) < 0)
                      *((_QWORD *)&v1834 + 1) = v1033 + 3;
                    else
                      BYTE7(v1835) = v1047 & 0x7F;
                    v1045 = (char *)v1039 + v1047;
                  }
                  *v1045 = 0;
                  v1842[2] = (void *)v1835;
                  *(_OWORD *)v1842 = v1834;
                  *(_QWORD *)&v1835 = 0;
                  v1834 = 0uLL;
                  if (SHIBYTE(v1842[2]) >= 0)
                    v1048 = v1842;
                  else
                    v1048 = (void **)v1842[0];
                  if (SHIBYTE(v1842[2]) >= 0)
                    v1049 = HIBYTE(v1842[2]);
                  else
                    v1049 = (uint64_t)v1842[1];
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 232, (uint64_t)"ret.second", 10, (uint64_t)v1048, v1049, (void (*)(void **))sub_21023DDB0);
                  v1050 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v1050 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v1051 = qword_254A6DE40;
                    for (m = qword_254A6DE48; v1051 != m; v1051 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, void **, uint64_t))v1051)(*(_QWORD *)(v1051 + 8), "ret.second", 10, v1048, v1049);
                  }
                  v1053 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v1053 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v1054 = byte_254A6DE68;
                  if (byte_254A6DE68)
                    qword_254A6DE58(unk_254A6DE60, "ret.second", 10, v1048, v1049);
                  if (SHIBYTE(v1842[2]) < 0)
                  {
                    operator delete(v1842[0]);
                    if ((SBYTE7(v1835) & 0x80000000) == 0)
                      goto LABEL_1323;
LABEL_925:
                    operator delete((void *)v1834);
                    if ((oslog[23] & 0x80000000) != 0)
                      goto LABEL_1324;
                  }
                  else
                  {
                    if (SBYTE7(v1835) < 0)
                      goto LABEL_925;
LABEL_1323:
                    if ((oslog[23] & 0x80000000) != 0)
                    {
LABEL_1324:
                      operator delete(*(void **)oslog);
                      if (!v1054)
LABEL_1986:
                        abort();
                      goto LABEL_927;
                    }
                  }
                  if (!v1054)
                    goto LABEL_1986;
                  goto LABEL_927;
                }
              }
              v1026 = "Failed to add a factor into the linear system. This could be due to duplicate factor IDs ('";
              goto LABEL_1276;
            }
          }
          v963 = v956 >> 4;
          v955 = v953;
          do
          {
            v964 = v963 >> 1;
            v965 = (unsigned int *)&v955[16 * (v963 >> 1)];
            v967 = *v965;
            v966 = (char *)(v965 + 4);
            v963 += ~(v963 >> 1);
            if (v967 < v813)
              v955 = v966;
            else
              v963 = v964;
          }
          while (v963);
          goto LABEL_1171;
        }
LABEL_927:
        ++v1706;
        v761 = v1686;
LABEL_928:
        v762 += 472;
        if (v762 == v1692)
          goto LABEL_922;
      }
      v866 = (char *)v840 - (char *)v838;
      v867 = 0xB195E8EFDB195E8FLL * (v840 - v838);
      v868 = v1712[362].u64[0];
      if ((unint64_t)v839 < v868)
      {
        if (v840 == v839)
        {
          *v839 = v1706;
          v1060 = &v838[v840 - v838];
          *(_OWORD *)(v1060 + 1) = *(_OWORD *)&object[1];
          memcpy(v1060 + 3, &object[3], 0x120uLL);
          memcpy(v1060 + 39, &object[39], 0x120uLL);
          v1061 = v1730;
          v1062 = v1731;
          v1063 = v1733;
          *(__n128 *)(v1060 + 79) = v1732;
          *(__n128 *)(v1060 + 81) = v1063;
          *(_OWORD *)(v1060 + 75) = v1061;
          *(_OWORD *)(v1060 + 77) = v1062;
          v1064 = v1734;
          v1065 = v1735;
          v835 = v1737;
          *(_OWORD *)(v1060 + 87) = v1736;
          *(__n128 *)(v1060 + 89) = v835;
          *(_OWORD *)(v1060 + 83) = v1064;
          *(_OWORD *)(v1060 + 85) = v1065;
          *((_BYTE *)v1060 + 728) = 1;
          *((_OWORD *)v1060 + 46) = v1739;
          v1066 = v1742;
          v1067 = v1740;
          *((_OWORD *)v1060 + 48) = v1741;
          *((_OWORD *)v1060 + 49) = v1066;
          *((_OWORD *)v1060 + 47) = v1067;
          v1068 = v1743;
          v834 = v1745;
          *((_OWORD *)v1060 + 51) = v1744;
          *((__n128 *)v1060 + 52) = v834;
          *((_OWORD *)v1060 + 50) = v1068;
          v1069 = v1746;
          *((_BYTE *)v1060 + 856) = v1747;
          v1060[106] = v1069;
          *((_OWORD *)v1060 + 54) = 0u;
          v1748 = 0uLL;
          *((_BYTE *)v1060 + 880) = 0;
          v1712[361].i64[1] = (uint64_t)(v839 + 111);
          v852 = v1712 + 366;
        }
        else
        {
          v1655 = 0xB195E8EFDB195E8FLL * (v840 - v838);
          v1728 = *(_OWORD *)oslog;
          memcpy(v1794, &oslog[16], 0x120uLL);
          memcpy(v1842, &oslog[304], 0x120uLL);
          v1838 = v1811;
          v1839 = v1812;
          v1840 = v1813;
          v1841 = v1814;
          v1834 = v1807;
          v1835 = v1808;
          v1836 = v1809;
          v1837 = v1810;
          v1654 = v1739;
          v1832 = v1818;
          v1833 = v1819;
          v1830 = v1822;
          v1831 = v1817;
          v1828 = v1820;
          v1829 = v1821;
          v1727 = v1824;
          v1726 = v1823;
          v869 = v839 - 111;
          v870 = v839;
          v871 = v839 - 111;
          v1748 = 0uLL;
          if ((unint64_t)v839 >= 0x378)
          {
            do
            {
              *v870 = *v871;
              *(_OWORD *)(v870 + 1) = *(_OWORD *)(v871 + 1);
              memcpy(v870 + 3, v871 + 3, 0x120uLL);
              memcpy(v870 + 39, v871 + 39, 0x120uLL);
              v872 = *(_OWORD *)(v871 + 81);
              v874 = *(_OWORD *)(v871 + 75);
              v873 = *(_OWORD *)(v871 + 77);
              *(_OWORD *)(v870 + 79) = *(_OWORD *)(v871 + 79);
              *(_OWORD *)(v870 + 81) = v872;
              *(_OWORD *)(v870 + 75) = v874;
              *(_OWORD *)(v870 + 77) = v873;
              v875 = *(_OWORD *)(v871 + 89);
              v877 = *(_OWORD *)(v871 + 83);
              v876 = *(_OWORD *)(v871 + 85);
              *(_OWORD *)(v870 + 87) = *(_OWORD *)(v871 + 87);
              *(_OWORD *)(v870 + 89) = v875;
              *(_OWORD *)(v870 + 83) = v877;
              *(_OWORD *)(v870 + 85) = v876;
              *((_BYTE *)v870 + 728) = *((_BYTE *)v871 + 728);
              *((_OWORD *)v870 + 46) = *((_OWORD *)v871 + 46);
              v878 = *((_OWORD *)v871 + 49);
              v879 = *((_OWORD *)v871 + 47);
              *((_OWORD *)v870 + 48) = *((_OWORD *)v871 + 48);
              *((_OWORD *)v870 + 49) = v878;
              *((_OWORD *)v870 + 47) = v879;
              v880 = *((_OWORD *)v871 + 50);
              v881 = *((_OWORD *)v871 + 52);
              *((_OWORD *)v870 + 51) = *((_OWORD *)v871 + 51);
              *((_OWORD *)v870 + 52) = v881;
              *((_OWORD *)v870 + 50) = v880;
              v882 = v871[106];
              *((_BYTE *)v870 + 856) = *((_BYTE *)v871 + 856);
              v870[106] = v882;
              *((_OWORD *)v870 + 54) = *((_OWORD *)v871 + 54);
              *((_OWORD *)v871 + 54) = 0u;
              *((_BYTE *)v870 + 880) = *((_BYTE *)v871 + 880);
              v870 += 111;
              v871 += 111;
            }
            while (v871 < v839);
          }
          v1712[361].i64[1] = (uint64_t)v870;
          if (v839 != v840 + 111)
          {
            do
            {
              v887 = v869 - 111;
              v888 = v839 - 111;
              *v888 = *(v869 - 111);
              *(_OWORD *)(v888 + 1) = *((_OWORD *)v869 - 55);
              memcpy(v839 - 108, v869 - 108, 0x120uLL);
              memcpy(v839 - 72, v869 - 72, 0x120uLL);
              v889 = *((_OWORD *)v869 - 12);
              v890 = *((_OWORD *)v869 - 11);
              v891 = *((_OWORD *)v869 - 13);
              *((_OWORD *)v839 - 14) = *((_OWORD *)v869 - 14);
              *((_OWORD *)v839 - 13) = v891;
              v892 = *((_OWORD *)v869 - 18);
              v893 = *((_OWORD *)v869 - 17);
              v894 = *((_OWORD *)v869 - 15);
              *((_OWORD *)v839 - 16) = *((_OWORD *)v869 - 16);
              *((_OWORD *)v839 - 15) = v894;
              *((_OWORD *)v839 - 18) = v892;
              *((_OWORD *)v839 - 17) = v893;
              *((_OWORD *)v839 - 12) = v889;
              *((_OWORD *)v839 - 11) = v890;
              *((_BYTE *)v839 - 160) = *((_BYTE *)v869 - 160);
              *(v839 - 19) = *(v869 - 19);
              *(v839 - 18) = *(v869 - 18);
              v895 = *(_OWORD *)(v869 - 13);
              v896 = *(_OWORD *)(v869 - 15);
              *(_OWORD *)(v839 - 17) = *(_OWORD *)(v869 - 17);
              *(_OWORD *)(v839 - 15) = v896;
              *(_OWORD *)(v839 - 13) = v895;
              v897 = *(_OWORD *)(v869 - 11);
              v898 = *(_OWORD *)(v869 - 9);
              *(_OWORD *)(v839 - 7) = *(_OWORD *)(v869 - 7);
              *(_OWORD *)(v839 - 9) = v898;
              *(_OWORD *)(v839 - 11) = v897;
              v899 = *(v869 - 5);
              *((_BYTE *)v839 - 32) = *((_BYTE *)v869 - 32);
              *(v839 - 5) = v899;
              v900 = *(_OWORD *)(v869 - 3);
              *(v869 - 3) = 0;
              *(v869 - 2) = 0;
              v901 = (std::__shared_weak_count *)*(v839 - 2);
              *(_OWORD *)(v839 - 3) = v900;
              if (v901)
              {
                v902 = (unint64_t *)&v901->__shared_owners_;
                do
                  v903 = __ldaxr(v902);
                while (__stlxr(v903 - 1, v902));
                if (!v903)
                {
                  ((void (*)(std::__shared_weak_count *))v901->__on_zero_shared)(v901);
                  std::__shared_weak_count::__release_weak(v901);
                }
              }
              *((_BYTE *)v839 - 8) = *((_BYTE *)v869 - 8);
              v839 -= 111;
              v869 -= 111;
            }
            while (v887 != v840);
          }
          *v840 = v1706;
          v883 = &v1658[888 * v1655];
          *(_OWORD *)(v883 + 8) = v1728;
          memcpy(v883 + 24, v1794, 0x120uLL);
          memcpy(v883 + 312, v1842, 0x120uLL);
          *(_OWORD *)(v883 + 664) = v1838;
          *(_OWORD *)(v883 + 680) = v1839;
          *(_OWORD *)(v883 + 696) = v1840;
          *(__n128 *)(v883 + 712) = v1841;
          *(_OWORD *)(v883 + 600) = v1834;
          *(_OWORD *)(v883 + 616) = v1835;
          *(__n128 *)(v883 + 632) = v1836;
          *(__n128 *)(v883 + 648) = v1837;
          v883[728] = 1;
          *((_OWORD *)v883 + 46) = v1654;
          *((_OWORD *)v883 + 47) = v1831;
          *((_OWORD *)v883 + 48) = v1832;
          *((_OWORD *)v883 + 49) = v1833;
          *((_OWORD *)v883 + 50) = v1828;
          *((_OWORD *)v883 + 51) = v1829;
          *((__n128 *)v883 + 52) = v1830;
          *((_QWORD *)v883 + 106) = v1726;
          v883[856] = v1727;
          v884 = (std::__shared_weak_count *)*((_QWORD *)v883 + 109);
          *((_OWORD *)v883 + 54) = 0u;
          v852 = v1712 + 366;
          if (v884)
          {
            v885 = (unint64_t *)&v884->__shared_owners_;
            do
              v886 = __ldaxr(v885);
            while (__stlxr(v886 - 1, v885));
            if (!v886)
            {
              ((void (*)(std::__shared_weak_count *))v884->__on_zero_shared)(v884);
              std::__shared_weak_count::__release_weak(v884);
            }
          }
          v1658[888 * v1655 + 880] = 0;
          v848 = v1712;
        }
        goto LABEL_1377;
      }
      v1056 = 1 - 0x4E6A171024E6A171 * (v839 - v838);
      if (v1056 > 0x49CD42E2049CD4)
        sub_20E867F44();
      v1057 = 0xB195E8EFDB195E8FLL * ((uint64_t)(v868 - (_QWORD)v838) >> 3);
      if (2 * v1057 > v1056)
        v1056 = 2 * v1057;
      if (v1057 >= 0x24E6A171024E6ALL)
        v1058 = 0x49CD42E2049CD4;
      else
        v1058 = v1056;
      *(_QWORD *)&v1794[32] = v1712 + 362;
      if (v1058)
      {
        v1659 = (char *)((char *)v840 - (char *)v838);
        if (v1058 > 0x49CD42E2049CD4)
          sub_20E877A38();
        v1059 = (char *)operator new(888 * v1058);
        v866 = (uint64_t)v1659;
      }
      else
      {
        v1059 = 0;
      }
      v1070 = &v1059[888 * v867];
      *(_QWORD *)v1794 = v1059;
      *(_QWORD *)&v1794[8] = v1070;
      *(_QWORD *)&v1794[16] = v1070;
      *(_QWORD *)&v1794[24] = &v1059[888 * v1058];
      if (v867 == v1058)
      {
        if (v866 < 1)
        {
          if (v1658 == (_BYTE *)v840)
            v1072 = 1;
          else
            v1072 = 2 * v867;
          if (v1072 > 0x49CD42E2049CD4)
            sub_20E877A38();
          v1073 = (char *)operator new(888 * v1072);
          v1070 = &v1073[888 * (v1072 >> 2)];
          *(_QWORD *)v1794 = v1073;
          *(_QWORD *)&v1794[8] = v1070;
          *(_QWORD *)&v1794[24] = &v1073[888 * v1072];
          if (v1059)
          {
            v1074 = &v1073[888 * (v1072 >> 2)];
            operator delete(v1059);
            v1070 = v1074;
          }
        }
        else
        {
          v1071 = v867 + 2;
          if (v867 >= -1)
            v1071 = v867 + 1;
          v1070 -= 888 * (v1071 >> 1);
          *(_QWORD *)&v1794[8] = v1070;
        }
      }
      v1660 = v1070;
      *(_QWORD *)v1070 = v1706;
      v1075 = v1070 + 8;
      *(_OWORD *)(v1070 + 8) = *(_OWORD *)oslog;
      memcpy(v1070 + 24, &object[3], 0x120uLL);
      memcpy(v1660 + 312, &object[39], 0x120uLL);
      v1076 = (uint64_t)v1660;
      v1077 = v1735;
      v1075[41] = v1734;
      v1075[42] = v1077;
      v1078 = v1737;
      v1075[43] = v1736;
      v1075[44] = v1078;
      v1079 = v1731;
      v1075[37] = v1730;
      v1075[38] = v1079;
      v1080 = v1733;
      v1075[39] = v1732;
      v1075[40] = v1080;
      v1660[728] = v1738;
      *((_OWORD *)v1660 + 46) = v1739;
      v1081 = v1740;
      v1082 = v1742;
      *((_OWORD *)v1660 + 48) = v1741;
      *((_OWORD *)v1660 + 49) = v1082;
      *((_OWORD *)v1660 + 47) = v1081;
      v1083 = v1743;
      v834 = v1745;
      *((_OWORD *)v1660 + 51) = v1744;
      *((__n128 *)v1660 + 52) = v834;
      *((_OWORD *)v1660 + 50) = v1083;
      v1084 = v1746;
      v1660[856] = v1747;
      *((_QWORD *)v1660 + 106) = v1084;
      *((_OWORD *)v1660 + 54) = v1748;
      v1748 = 0uLL;
      v1660[880] = v1749;
      v1085 = (uint64_t)(v1660 + 888);
      *(_QWORD *)&v1794[16] = v1660 + 888;
      v1086 = (_QWORD *)v1712[361].i64[0];
      if (v1086 != v840)
      {
        v1087 = 0;
        do
        {
          v1088 = v1076 + v1087 * 8;
          v1089 = (char *)&v840[v1087];
          *(_QWORD *)(v1076 + v1087 * 8 - 888) = v840[v1087 - 111];
          *(_OWORD *)(v1076 + v1087 * 8 - 880) = *(_OWORD *)&v840[v1087 - 110];
          memcpy((void *)(v1076 + v1087 * 8 - 864), &v840[v1087 - 108], 0x120uLL);
          memcpy((void *)(v1088 - 576), &v840[v1087 - 72], 0x120uLL);
          v1076 = (uint64_t)v1660;
          v1090 = (_OWORD *)(v1088 - 288);
          v1091 = *(_OWORD *)&v840[v1087 - 30];
          v1093 = *(_OWORD *)&v840[v1087 - 36];
          v1092 = *(_OWORD *)&v840[v1087 - 34];
          *(_OWORD *)(v1088 - 256) = *(_OWORD *)&v840[v1087 - 32];
          *(_OWORD *)(v1088 - 240) = v1091;
          *v1090 = v1093;
          v1090[1] = v1092;
          v1094 = *(_OWORD *)&v840[v1087 - 22];
          v835 = *(__n128 *)&v840[v1087 - 28];
          v1095 = *(_OWORD *)&v840[v1087 - 26];
          *(_OWORD *)(v1088 - 192) = *(_OWORD *)&v840[v1087 - 24];
          *(_OWORD *)(v1088 - 176) = v1094;
          *(__n128 *)(v1088 - 224) = v835;
          *(_OWORD *)(v1088 - 208) = v1095;
          *(_BYTE *)(v1088 - 160) = v840[v1087 - 20];
          *(_OWORD *)(v1088 - 152) = *(_OWORD *)&v840[v1087 - 19];
          v1096 = *(_OWORD *)&v840[v1087 - 15];
          v1097 = *(_OWORD *)&v840[v1087 - 13];
          *(_OWORD *)(v1088 - 136) = *(_OWORD *)&v840[v1087 - 17];
          *(_OWORD *)(v1088 - 104) = v1097;
          *(_OWORD *)(v1088 - 120) = v1096;
          v1098 = *(_OWORD *)&v840[v1087 - 9];
          v1099 = *(_OWORD *)&v840[v1087 - 11];
          v834 = *(__n128 *)&v840[v1087 - 7];
          *(__n128 *)(v1088 - 56) = v834;
          *(_OWORD *)(v1088 - 88) = v1099;
          *(_OWORD *)(v1088 - 72) = v1098;
          v1100 = v840[v1087 - 5];
          *(_BYTE *)(v1088 - 32) = v840[v1087 - 4];
          *(_QWORD *)(v1088 - 40) = v1100;
          *(_OWORD *)(v1088 - 24) = *(_OWORD *)&v840[v1087 - 3];
          *((_QWORD *)v1089 - 3) = 0;
          *((_QWORD *)v1089 - 2) = 0;
          *(_BYTE *)(v1088 - 8) = v840[v1087 - 1];
          v1087 -= 111;
        }
        while (&v840[v1087] != v1086);
        v1076 = (uint64_t)&v1660[v1087 * 8];
        v848 = v1712;
      }
      v1101 = (_QWORD *)v848[361].i64[1];
      if (v1101 != v840)
      {
        v1102 = v1076;
        do
        {
          *(_QWORD *)v1085 = *v840;
          *(_OWORD *)(v1085 + 8) = *(_OWORD *)(v840 + 1);
          memcpy((void *)(v1085 + 24), v840 + 3, 0x120uLL);
          memcpy((void *)(v1085 + 312), v840 + 39, 0x120uLL);
          v1103 = *(_OWORD *)(v840 + 81);
          v1105 = *(_OWORD *)(v840 + 75);
          v1104 = *(_OWORD *)(v840 + 77);
          *(_OWORD *)(v1085 + 632) = *(_OWORD *)(v840 + 79);
          *(_OWORD *)(v1085 + 648) = v1103;
          *(_OWORD *)(v1085 + 600) = v1105;
          *(_OWORD *)(v1085 + 616) = v1104;
          v1106 = *(_OWORD *)(v840 + 89);
          v835 = *(__n128 *)(v840 + 83);
          v1107 = *(_OWORD *)(v840 + 85);
          *(_OWORD *)(v1085 + 696) = *(_OWORD *)(v840 + 87);
          *(_OWORD *)(v1085 + 712) = v1106;
          *(__n128 *)(v1085 + 664) = v835;
          *(_OWORD *)(v1085 + 680) = v1107;
          *(_BYTE *)(v1085 + 728) = *((_BYTE *)v840 + 728);
          *(_OWORD *)(v1085 + 736) = *((_OWORD *)v840 + 46);
          v1108 = *((_OWORD *)v840 + 49);
          v1109 = *((_OWORD *)v840 + 47);
          *(_OWORD *)(v1085 + 768) = *((_OWORD *)v840 + 48);
          *(_OWORD *)(v1085 + 784) = v1108;
          *(_OWORD *)(v1085 + 752) = v1109;
          v1110 = *((_OWORD *)v840 + 50);
          v834 = *((__n128 *)v840 + 52);
          *(_OWORD *)(v1085 + 816) = *((_OWORD *)v840 + 51);
          *(__n128 *)(v1085 + 832) = v834;
          *(_OWORD *)(v1085 + 800) = v1110;
          v1111 = v840[106];
          *(_BYTE *)(v1085 + 856) = *((_BYTE *)v840 + 856);
          *(_QWORD *)(v1085 + 848) = v1111;
          *(_OWORD *)(v1085 + 864) = *((_OWORD *)v840 + 54);
          *((_OWORD *)v840 + 54) = 0u;
          *(_BYTE *)(v1085 + 880) = *((_BYTE *)v840 + 880);
          v1085 += 888;
          v840 += 111;
        }
        while (v840 != v1101);
        v840 = (_QWORD *)v848[361].i64[1];
        v1076 = v1102;
      }
      v1112 = (_QWORD *)v848[361].i64[0];
      v848[361].i64[0] = v1076;
      v848[361].i64[1] = v1085;
      v1113 = v848[362].i64[0];
      v848[362].i64[0] = *(_QWORD *)&v1794[24];
      *(_QWORD *)&v1794[24] = v1113;
      *(_QWORD *)&v1794[8] = v1112;
      *(_QWORD *)v1794 = v1112;
      if (v840 == v1112)
      {
        v852 = v1712 + 366;
        if (!v840)
          goto LABEL_1377;
      }
      else
      {
        v852 = v1712 + 366;
        do
        {
          *(_QWORD *)&v1794[16] = v840 - 111;
          v1114 = (std::__shared_weak_count *)*(v840 - 2);
          if (v1114)
          {
            v1115 = (unint64_t *)&v1114->__shared_owners_;
            do
              v1116 = __ldaxr(v1115);
            while (__stlxr(v1116 - 1, v1115));
            if (!v1116)
            {
              ((void (*)(std::__shared_weak_count *))v1114->__on_zero_shared)(v1114);
              std::__shared_weak_count::__release_weak(v1114);
            }
          }
          v840 = *(_QWORD **)&v1794[16];
        }
        while (*(_QWORD **)&v1794[16] != v1112);
        v840 = *(_QWORD **)v1794;
        if (!*(_QWORD *)v1794)
          goto LABEL_1377;
      }
      operator delete(v840);
LABEL_1377:
      v1117 = (std::__shared_weak_count *)*((_QWORD *)&v1748 + 1);
      if (*((_QWORD *)&v1748 + 1))
      {
        v1118 = (unint64_t *)(*((_QWORD *)&v1748 + 1) + 8);
        do
          v1119 = __ldaxr(v1118);
        while (__stlxr(v1119 - 1, v1118));
        if (!v1119)
        {
          ((void (*)(std::__shared_weak_count *))v1117->__on_zero_shared)(v1117);
          std::__shared_weak_count::__release_weak(v1117);
        }
      }
      goto LABEL_1382;
    }
    v1123 = 0;
LABEL_1398:
    sub_20E9BCAA8(v1123);
  }
LABEL_1399:
  v1124 = v1721;
  v1125 = v1721 + 23256;
  sub_20F626FF4(v1721 + 23256, (__int128 *)(v1721 + 528));
  v1126 = *(_OWORD *)(v1124 + 1272);
  *(_OWORD *)(v1124 + 24016) = *(_OWORD *)(v1124 + 1256);
  *(_OWORD *)(v1124 + 24032) = v1126;
  *(_OWORD *)(v1124 + 24048) = *(_OWORD *)(v1124 + 1288);
  kdebug_trace();
  kdebug_trace();
  v1127 = (uint64_t *)(v1124 + 23248);
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)(v1124 + 23248) + 16))(oslog, v1124 + 23248);
  v1128 = v1124 + 4760;
  (**(void (***)(_BYTE *__return_ptr, uint64_t))(v1124 + 4760))(v1794, v1124 + 4760);
  if ((oslog[23] & 0x80000000) != 0)
  {
    sub_20E860C04(object, *(void **)oslog, *(unint64_t *)&oslog[8]);
  }
  else
  {
    *(_OWORD *)object = *(_OWORD *)oslog;
    object[2] = *(void **)&oslog[16];
  }
  v1129 = v1794[23];
  if ((v1794[23] & 0x80000000) != 0)
  {
    sub_20E860C04(&object[3], *(void **)v1794, *(unint64_t *)&v1794[8]);
    v1129 = v1794[23];
  }
  else
  {
    *(_OWORD *)&object[3] = *(_OWORD *)v1794;
    object[5] = *(void **)&v1794[16];
  }
  object[6] = 0;
  LODWORD(object[7]) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&object[8] = _Q0;
  object[74] = &object[10];
  v1730 = xmmword_210378040;
  v1750 = &v1731;
  v1751 = 64;
  v1752 = 0u;
  v1754 = v1753;
  v1755 = 64;
  v1756 = 0;
  v1758 = 0;
  v1757 = 0;
  v1760 = v1759;
  v1761 = xmmword_210378040;
  if (v1129 < 0)
  {
    operator delete(*(void **)v1794);
    if ((oslog[23] & 0x80000000) == 0)
      goto LABEL_1407;
  }
  else if ((oslog[23] & 0x80000000) == 0)
  {
    goto LABEL_1407;
  }
  operator delete(*(void **)oslog);
LABEL_1407:
  sub_20F2C3BE8(object, 6uLL, 8uLL);
  *(_QWORD *)v1794 = v1124 + 4760;
  *(_QWORD *)&v1794[8] = object;
  v1131 = (*(double (**)(uint64_t))(*(_QWORD *)v1128 + 40))(v1124 + 4760);
  v1132 = *(_BYTE *)(v1124 + 6648);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v1124 + 23248) + 24))(v1124 + 23248))
  {
    *(_BYTE *)(v1124 + 6648) = 1;
    v1133 = (*(uint64_t (**)(uint64_t))(*v1127 + 40))(v1124 + 23248);
    v1134 = *v1127;
    if (v1133)
      (*(void (**)(uint64_t, double))(v1134 + 48))(v1124 + 23248, 0.0);
    else
      (*(void (**)(uint64_t))(v1134 + 56))(v1124 + 23248);
    (*(void (**)(uint64_t))(*v1127 + 32))(v1124 + 23248);
    (*(void (**)(uint64_t))(*(_QWORD *)v1128 + 104))(v1124 + 4760);
  }
  kdebug_trace();
  if (*(_BYTE *)(v1125 + 40))
  {
    v1135 = *(_QWORD *)(v1124 + 23840);
    if (!*(_BYTE *)(v1125 + 593))
    {
      if (v1135)
      {
        *(_QWORD *)oslog = *(_QWORD *)(v1124 + 23824);
        *(_DWORD *)&oslog[8] = 0;
        sub_20F7BD064(v1124 + 4760, (double **)oslog, *(_BYTE *)(v1125 + 592));
      }
      else
      {
        sub_20F7BC8C8(v1124 + 4760, (double *)(v1124 + 23304), *(_BYTE *)(v1125 + 592));
      }
      goto LABEL_1442;
    }
    if (v1135)
    {
      v1136 = *(unsigned __int8 *)(v1125 + 592);
      sub_20F7C0F64(v1124 + 4760, (double *)oslog, *(double **)(v1124 + 23824));
      v1137 = 1.0;
      v1138 = *(double *)oslog;
      v1139 = 1.0;
      if (!v1136)
      {
        if (*(double *)oslog <= 0.0)
        {
          v1139 = 1.0e20;
          v1137 = 1.0e-10;
        }
        else
        {
          v1137 = *(double *)oslog;
          v1139 = 1.0 / (*(double *)oslog * *(double *)oslog);
        }
      }
      *(double *)(v1124 + 4768) = v1137;
      *(double *)(v1124 + 4776) = v1139;
      *(double *)(v1124 + 4784) = v1137;
      *(double *)(v1124 + 4792) = v1139;
      *(double *)(v1124 + 4800) = v1137;
      *(double *)(v1124 + 4808) = v1139;
      *(double *)(v1124 + 4816) = v1137;
      *(double *)(v1124 + 4824) = v1139;
      if (v1138 <= 0.0)
      {
        v1142 = 1.0e20;
        v1138 = 1.0e-10;
LABEL_1439:
        *(double *)(v1124 + 4832) = v1138;
        *(double *)(v1124 + 4840) = v1142;
        if (v1136)
        {
          v1138 = 1.0;
          v1142 = 1.0;
        }
        *(double *)(v1124 + 4864) = v1138;
        *(double *)(v1124 + 4872) = v1142;
        *(_BYTE *)(v1124 + 6637) = 0;
        *(_DWORD *)(v1124 + 6632) = 0;
        goto LABEL_1442;
      }
    }
    else
    {
      v1136 = *(unsigned __int8 *)(v1125 + 592);
      sub_20F7C0F64(v1124 + 4760, (double *)oslog, (double *)(v1124 + 23304));
      v1140 = 1.0;
      v1138 = *(double *)oslog;
      v1141 = 1.0;
      if (!v1136)
      {
        if (*(double *)oslog <= 0.0)
        {
          v1141 = 1.0e20;
          v1140 = 1.0e-10;
        }
        else
        {
          v1140 = *(double *)oslog;
          v1141 = 1.0 / (*(double *)oslog * *(double *)oslog);
        }
      }
      *(double *)(v1124 + 4768) = v1140;
      *(double *)(v1124 + 4776) = v1141;
      *(double *)(v1124 + 4784) = v1140;
      *(double *)(v1124 + 4792) = v1141;
      *(double *)(v1124 + 4800) = v1140;
      *(double *)(v1124 + 4808) = v1141;
      *(double *)(v1124 + 4816) = v1140;
      *(double *)(v1124 + 4824) = v1141;
      if (v1138 <= 0.0)
      {
        v1142 = 1.0e20;
        v1138 = 1.0e-10;
        goto LABEL_1439;
      }
    }
    v1142 = 1.0 / (v1138 * v1138);
    goto LABEL_1439;
  }
LABEL_1442:
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v1128 + 8))(v1124 + 4760))
  {
    sub_20F7BD82C((uint64_t)v1794);
    object[8] = COERCE_VOID_(sub_20F7BFE08(v1124 + 4760, &object[10]));
    object[9] = object[8];
    *(void **)(v1124 + 23984) = object[8];
    v1146 = (__int128 *)object[74];
    v1147 = *((_QWORD *)&v1730 + 1);
    v1148 = 8 * *((_QWORD *)&v1730 + 1);
    *(_QWORD *)&v1752 = 0;
    v1149 = *((_QWORD *)&v1730 + 1) & 0x1FFFFFFFFFFFFFFFLL;
    if ((*((_QWORD *)&v1730 + 1) & 0x1FFFFFFFFFFFFFFFuLL) <= v1751)
    {
      if (!*((_QWORD *)&v1730 + 1))
        goto LABEL_1465;
      v1150 = v1750;
    }
    else
    {
      if (2 * v1751 > v1149)
        v1149 = 2 * v1751;
      v1751 = v1149;
      v1150 = (_OWORD *)operator new[]();
      if (v1750 != &v1731 && v1750)
        MEMORY[0x212BC6368]();
      v1750 = v1150;
      v1151 = v1752;
      if ((_QWORD)v1752)
      {
        *(_QWORD *)&v1752 = v1752 + v1147;
        memmove((char *)v1150 + 8 * v1147, v1150, 8 * v1151);
        memcpy(v1150, v1146, v1148);
LABEL_1465:
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*v1127 + 24))(v1124 + 23248))
        {
          if ((*(unsigned int (**)(uint64_t))(*v1127 + 40))(v1124 + 23248))
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1128 + 96))(v1124 + 4760);
            (*(void (**)(uint64_t))(*v1127 + 48))(v1124 + 23248);
          }
          else
          {
            (*(void (**)(uint64_t))(*v1127 + 56))(v1124 + 23248);
          }
          (*(void (**)(uint64_t))(*v1127 + 32))(v1124 + 23248);
          (*(void (**)(uint64_t))(*(_QWORD *)v1128 + 104))(v1124 + 4760);
        }
        v1161 = (double **)(v1124 + 6672);
        v1162 = *(unsigned int *)(v1124 + 6688);
        v1145 = v1656;
        if ((_DWORD)v1162)
        {
          v1163 = fabs(**v1161);
          if ((_DWORD)v1162 == 1)
          {
            ii = v1124 + 6632;
          }
          else
          {
            v1165 = *v1161 + 1;
            v1166 = 8 * v1162 - 8;
            ii = v1124 + 6632;
            do
            {
              v1167 = *v1165++;
              v1168 = fabs(v1167);
              if (v1163 < v1168)
                v1163 = v1168;
              v1166 -= 8;
            }
            while (v1166);
          }
        }
        else
        {
          v1163 = 1.0;
          ii = v1124 + 6632;
        }
        if (v1163 < v1163 * *(double *)(v1124 + 23272))
        {
          if (*(_BYTE *)(v1125 + 8))
          {
            v1169 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
            std::ios_base::getloc((const std::ios_base *)((char *)v1169 + *(_QWORD *)(*v1169 - 24)));
            v1170 = std::locale::use_facet((const std::locale *)oslog, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v1170->__vftable[2].~facet_0)(v1170, 10);
            std::locale::~locale((std::locale *)oslog);
            std::ostream::put();
            std::ostream::flush();
            sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"[error][grad < gtol][", 21);
            v1171 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v1171, (uint64_t)"][", 2);
            if (v1163 == 0.0)
              sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
            else
              std::ostream::operator<<();
            sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
            v1258 = (_QWORD *)std::ostream::operator<<();
            v1259 = sub_20E86A980(v1258, (uint64_t)"]", 1);
            std::ios_base::getloc((const std::ios_base *)((char *)v1259 + *(_QWORD *)(*v1259 - 24)));
            v1260 = std::locale::use_facet((const std::locale *)oslog, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v1260->__vftable[2].~facet_0)(v1260, 10);
            std::locale::~locale((std::locale *)oslog);
            std::ostream::put();
            std::ostream::flush();
          }
          LODWORD(object[7]) = 1;
LABEL_1714:
          *(_BYTE *)(ii + 16) = v1132;
          goto LABEL_1715;
        }
        v1693 = (double **)(v1124 + 6672);
        v1172 = *(double *)(v1124 + 23984);
        kdebug_trace();
        v1682 = v1132;
        v1173 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1128 + 24))(v1124 + 4760);
        v1174 = *(_QWORD *)(v1124 + 23912);
        if (v1174)
          (*(void (**)(uint64_t))(*(_QWORD *)v1174 + 48))(v1174);
        v1175 = LODWORD(object[6]);
        if (LODWORD(object[6]) >= *(_DWORD *)(v1125 + 4))
        {
LABEL_1712:
          object[9] = *(void **)(v1124 + 23984);
          v1370 = *(_QWORD *)(v1124 + 23880);
          v1132 = v1682;
          if (v1370)
            (*(void (**)(uint64_t))(*(_QWORD *)v1370 + 48))(v1370);
          goto LABEL_1714;
        }
        v1687 = v1124 + 23992;
        v1176 = v1163;
        while (1)
        {
          v1177 = v1175 + 1;
          LODWORD(object[6]) = v1175 + 1;
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v1128 + 16))(v1124 + 4760, v1173))
          {
            if (*(_BYTE *)(v1125 + 8))
            {
              v1265 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Solve FAILED", 12);
              std::ios_base::getloc((const std::ios_base *)((char *)v1265 + *(_QWORD *)(*v1265 - 24)));
              v1266 = std::locale::use_facet((const std::locale *)oslog, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v1266->__vftable[2].~facet_0)(v1266, 10);
              std::locale::~locale((std::locale *)oslog);
              std::ostream::put();
              std::ostream::flush();
            }
            LODWORD(object[7]) = 0;
            goto LABEL_1712;
          }
          ++HIDWORD(object[6]);
          v1178 = *(unsigned int *)(v1173 + 16);
          if ((_DWORD)v1178)
          {
            v1179 = *(double **)v1173;
            v1180 = **(double **)v1173 * **(double **)v1173;
            if ((_DWORD)v1178 != 1)
            {
              v1181 = v1179 + 1;
              v1182 = (v1178 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
              if (v1182 < 3)
                goto LABEL_1493;
              v1183 = v1182 + 1;
              v1181 += v1183 & 0x3FFFFFFFFFFFFFFCLL;
              v1184 = (float64x2_t *)(v1179 + 3);
              v1185 = v1183 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v1186 = vmulq_f64(v1184[-1], v1184[-1]);
                v1187 = vmulq_f64(*v1184, *v1184);
                v1180 = v1180 + v1186.f64[0] + v1186.f64[1] + v1187.f64[0] + v1187.f64[1];
                v1184 += 2;
                v1185 -= 4;
              }
              while (v1185);
              if (v1183 != (v1183 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1493:
                v1188 = &v1179[v1178];
                do
                {
                  v1189 = *v1181++;
                  v1180 = v1180 + v1189 * v1189;
                }
                while (v1181 != v1188);
              }
            }
            v1190 = sqrt(v1180);
            if (v1175 < *(_DWORD *)v1125)
              goto LABEL_1503;
          }
          else
          {
            v1190 = sqrt(0.0);
            if (v1175 < *(_DWORD *)v1125)
              goto LABEL_1503;
          }
          v1191 = *(_QWORD *)(v1124 + 23976);
          if (v1191)
          {
            *(_DWORD *)oslog = *(_DWORD *)(v1173 + 16);
            *(_QWORD *)&oslog[8] = *(_QWORD *)v1173;
            *(_DWORD *)&oslog[16] = 0;
            v1842[0] = *(void **)&v1190;
            if (((*(uint64_t (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v1191 + 48))(v1191, v1842, oslog) & 1) != 0)
              goto LABEL_1639;
          }
          else if ((_DWORD)v1178 && v1190 < *(double *)(v1124 + 23280) * (v1131 + *(double *)(v1124 + 23280)))
          {
LABEL_1639:
            if (*(_BYTE *)(v1125 + 8))
            {
              v1277 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the parameters", 29);
              std::ios_base::getloc((const std::ios_base *)((char *)v1277 + *(_QWORD *)(*v1277 - 24)));
              v1278 = std::locale::use_facet((const std::locale *)oslog, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v1278->__vftable[2].~facet_0)(v1278, 10);
              std::locale::~locale((std::locale *)oslog);
              std::ostream::put();
              std::ostream::flush();
              (*(void (**)(uint64_t, uint64_t, double, double, double, double, double))(*v1127 + 64))(v1124 + 23248, v1175, v1172, v1190, v1176, v1163, v1131);
            }
            v1272 = 2;
            goto LABEL_1711;
          }
LABEL_1503:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1128 + 48))(v1124 + 4760, v1173);
          v1192 = *(_QWORD *)(v1124 + 23944);
          if (v1192)
            (*(void (**)(uint64_t))(*(_QWORD *)v1192 + 48))(v1192);
          if ((_QWORD)v1752)
            memcpy(oslog, v1750, 8 * v1752);
          v1172 = sub_20F7BFE08(v1124 + 4760, &v1731);
          v1193 = *(unsigned int *)(v1124 + 6688);
          if (!(_DWORD)v1193)
          {
            v1176 = 1.0;
            if (!*(_BYTE *)(v1125 + 8))
              goto LABEL_1517;
LABEL_1516:
            (*(void (**)(uint64_t, uint64_t, double, double, double, double, double))(*v1127 + 64))(v1124 + 23248, v1175, v1172, v1190, v1176, v1163, v1131);
            goto LABEL_1517;
          }
          v1176 = fabs(**v1693);
          if ((_DWORD)v1193 != 1)
          {
            v1194 = *v1693 + 1;
            v1195 = 8 * v1193 - 8;
            do
            {
              v1196 = *v1194++;
              v1197 = fabs(v1196);
              if (v1176 < v1197)
                v1176 = v1197;
              v1195 -= 8;
            }
            while (v1195);
          }
          if (*(_BYTE *)(v1125 + 8))
            goto LABEL_1516;
LABEL_1517:
          if (v1172 == 0.0)
          {
            if (*(_BYTE *)(v1125 + 8))
            {
              v1267 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
              v1268 = sub_20E86A980(v1267, (uint64_t)"N.A.", 4);
              std::ios_base::getloc((const std::ios_base *)((char *)v1268 + *(_QWORD *)(*v1268 - 24)));
              v1269 = std::locale::use_facet((const std::locale *)v1842, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v1269->__vftable[2].~facet_0)(v1269, 10);
              std::locale::~locale((std::locale *)v1842);
              std::ostream::put();
              goto LABEL_1628;
            }
LABEL_1629:
            *(double *)(v1124 + 23984) = v1172;
            v1272 = 3;
LABEL_1711:
            LODWORD(object[7]) = v1272;
            goto LABEL_1712;
          }
          if (vabdd_f64(v1172, *(double *)(v1124 + 23984)) < v1172 * *(double *)(v1124 + 23288)
            && v1175 >= *(_DWORD *)v1125)
          {
            if (*(_BYTE *)(v1125 + 8))
            {
              sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
              v1270 = (_QWORD *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v1270 + *(_QWORD *)(*v1270 - 24)));
              v1271 = std::locale::use_facet((const std::locale *)v1842, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v1271->__vftable[2].~facet_0)(v1271, 10);
              std::locale::~locale((std::locale *)v1842);
              std::ostream::put();
LABEL_1628:
              std::ostream::flush();
            }
            goto LABEL_1629;
          }
          if (*(_DWORD *)(v1124 + 6664))
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1128 + 160))(v1124 + 4760, v1687);
            v1198 = (*(uint64_t (**)(uint64_t, uint64_t, double **, uint64_t, double))(*v1127 + 80))(v1124 + 23248, v1173, v1693, v1687, v1172);
          }
          else
          {
            v1198 = (*(uint64_t (**)(uint64_t, uint64_t, double **, double))(*v1127 + 72))(v1124 + 23248, v1173, v1693, v1172);
          }
          if (!v1198)
          {
            --HIDWORD(object[6]);
            v1209 = *(_QWORD *)(v1124 + 4888);
            v1210 = *(_QWORD *)(v1124 + 4896);
            while (v1209 != v1210)
            {
              v1211 = *(_QWORD *)(v1209 + 8);
              if (*(_BYTE *)(v1211 + 20))
              {
                v1212 = *(_OWORD *)(v1211 + 200);
                v1213 = *(_OWORD *)(v1211 + 232);
                *(_OWORD *)(v1211 + 64) = *(_OWORD *)(v1211 + 216);
                *(_OWORD *)(v1211 + 80) = v1213;
                *(_QWORD *)(v1211 + 96) = *(_QWORD *)(v1211 + 248);
                *(_OWORD *)(v1211 + 32) = *(_OWORD *)(v1211 + 184);
                *(_OWORD *)(v1211 + 48) = v1212;
                *(_OWORD *)(v1211 + 104) = *(_OWORD *)(v1211 + 256);
                *(_QWORD *)(v1211 + 120) = *(_QWORD *)(v1211 + 272);
                *(_BYTE *)(v1211 + 128) = 0;
              }
              v1209 += 16;
            }
            v1214 = *(_QWORD *)(v1124 + 4984);
            v1215 = *(_QWORD *)(v1124 + 4992);
            while (v1214 != v1215)
            {
              v1216 = *(_QWORD *)(v1214 + 8);
              if (*(_BYTE *)(v1216 + 20))
              {
                v1217 = *(_OWORD *)(v1216 + 160);
                *(_OWORD *)(v1216 + 64) = *(_OWORD *)(v1216 + 144);
                *(_OWORD *)(v1216 + 80) = v1217;
                *(_QWORD *)(v1216 + 96) = *(_QWORD *)(v1216 + 176);
                v1218 = *(_OWORD *)(v1216 + 128);
                *(_OWORD *)(v1216 + 32) = *(_OWORD *)(v1216 + 112);
                *(_OWORD *)(v1216 + 48) = v1218;
                *(_BYTE *)(v1216 + 104) = 0;
              }
              v1214 += 16;
            }
            v1219 = *(_QWORD *)(v1124 + 5080);
            v1220 = *(_QWORD *)(v1124 + 5088);
            while (v1219 != v1220)
            {
              v1221 = *(_QWORD *)(v1219 + 8);
              if (*(_BYTE *)(v1221 + 20))
              {
                *(_QWORD *)(v1221 + 32) = *(_QWORD *)(v1221 + 48);
                *(_BYTE *)(v1221 + 40) = 0;
              }
              v1219 += 16;
            }
            v1222 = *(_QWORD *)(v1124 + 5176);
            v1223 = *(_QWORD *)(v1124 + 5184);
            while (v1222 != v1223)
            {
              v1224 = *(_QWORD *)(v1222 + 8);
              if (*(_BYTE *)(v1224 + 20))
              {
                v1225 = *(_OWORD *)(v1224 + 152);
                v1226 = *(_OWORD *)(v1224 + 184);
                *(_OWORD *)(v1224 + 64) = *(_OWORD *)(v1224 + 168);
                *(_OWORD *)(v1224 + 80) = v1226;
                *(_QWORD *)(v1224 + 96) = *(_QWORD *)(v1224 + 200);
                *(_OWORD *)(v1224 + 32) = *(_OWORD *)(v1224 + 136);
                *(_OWORD *)(v1224 + 48) = v1225;
                *(_OWORD *)(v1224 + 104) = *(_OWORD *)(v1224 + 208);
                *(_QWORD *)(v1224 + 120) = *(_QWORD *)(v1224 + 224);
              }
              v1222 += 16;
            }
            v1227 = *(_QWORD *)(v1124 + 5272);
            v1228 = *(_QWORD *)(v1124 + 5280);
            while (v1227 != v1228)
            {
              v1229 = *(_QWORD *)(v1227 + 8);
              if (*(_BYTE *)(v1229 + 20))
              {
                v1230 = *(_OWORD *)(v1229 + 168);
                *(_OWORD *)(v1229 + 32) = *(_OWORD *)(v1229 + 152);
                *(_OWORD *)(v1229 + 48) = v1230;
                *(_QWORD *)(v1229 + 64) = *(_QWORD *)(v1229 + 184);
                *(_BYTE *)(v1229 + 72) = *(_BYTE *)(v1229 + 192);
                sub_20F6169C8(v1229 + 16);
              }
              v1227 += 16;
            }
            v1231 = *(_QWORD *)(v1124 + 5368);
            v1232 = *(_QWORD *)(v1124 + 5376);
            while (v1231 != v1232)
            {
              v1233 = *(_QWORD *)(v1231 + 8);
              if (*(_BYTE *)(v1233 + 20))
              {
                v1234 = *(_OWORD *)(v1233 + 504);
                *(_OWORD *)(v1233 + 192) = *(_OWORD *)(v1233 + 488);
                *(_OWORD *)(v1233 + 208) = v1234;
                v1235 = *(_OWORD *)(v1233 + 536);
                *(_OWORD *)(v1233 + 224) = *(_OWORD *)(v1233 + 520);
                *(_OWORD *)(v1233 + 240) = v1235;
                v1236 = *(_OWORD *)(v1233 + 440);
                *(_OWORD *)(v1233 + 128) = *(_OWORD *)(v1233 + 424);
                *(_OWORD *)(v1233 + 144) = v1236;
                v1237 = *(_OWORD *)(v1233 + 472);
                *(_OWORD *)(v1233 + 160) = *(_OWORD *)(v1233 + 456);
                *(_OWORD *)(v1233 + 176) = v1237;
                v1238 = *(_OWORD *)(v1233 + 376);
                *(_OWORD *)(v1233 + 64) = *(_OWORD *)(v1233 + 360);
                *(_OWORD *)(v1233 + 80) = v1238;
                v1239 = *(_OWORD *)(v1233 + 408);
                *(_OWORD *)(v1233 + 96) = *(_OWORD *)(v1233 + 392);
                *(_OWORD *)(v1233 + 112) = v1239;
                v1240 = *(__n128 *)(v1233 + 328);
                v1241 = *(_OWORD *)(v1233 + 344);
                *(__n128 *)(v1233 + 32) = v1240;
                *(_OWORD *)(v1233 + 48) = v1241;
                v1242 = *(uint64_t ***)(v1233 + 296);
                if (v1242)
                {
                  v1243 = (float64x2_t *)(v1233 + 32);
                  do
                  {
                    v1240.n128_f64[0] = sub_20F6182A0((char *)v1242[5], v1243, v1240);
                    v1242 = (uint64_t **)*v1242;
                  }
                  while (v1242);
                }
              }
              v1231 += 16;
            }
            v1244 = *(_QWORD *)(v1124 + 5464);
            for (n = *(_QWORD *)(v1124 + 5472); v1244 != n; v1244 += 16)
            {
              v1253 = *(_QWORD *)(v1244 + 8);
              if (*(_BYTE *)(v1253 + 20))
              {
                v1254 = *(_OWORD *)(v1253 + 224);
                *(_OWORD *)(v1253 + 64) = *(_OWORD *)(v1253 + 208);
                *(_OWORD *)(v1253 + 80) = v1254;
                *(_QWORD *)(v1253 + 96) = *(_QWORD *)(v1253 + 240);
                v1255 = *(_OWORD *)(v1253 + 192);
                *(_OWORD *)(v1253 + 32) = *(_OWORD *)(v1253 + 176);
                *(_OWORD *)(v1253 + 48) = v1255;
                sub_20F813110(v1253 + 16);
              }
            }
            v1246 = *(_QWORD *)(v1124 + 5560);
            v1247 = *(_QWORD *)(v1124 + 5568);
            for (ii = v1124 + 6632; v1246 != v1247; v1246 += 16)
            {
              v1252 = *(_QWORD *)(v1246 + 8);
              if (*(_BYTE *)(v1252 + 20))
                *(_QWORD *)(v1252 + 32) = *(_QWORD *)(v1252 + 40);
            }
            *(_BYTE *)(v1124 + 6637) = 0;
            *(_BYTE *)(v1124 + 6632) = 0;
            *(_WORD *)(v1124 + 6635) = 0;
            *(_BYTE *)(v1124 + 6633) = *(_BYTE *)(v1124 + 6634);
            *(_QWORD *)&v1752 = 0;
            if (v1751 >= 6)
            {
              v1249 = v1750;
            }
            else
            {
              v1248 = 2 * v1751;
              if (2 * v1751 <= 6)
                v1248 = 6;
              v1751 = v1248;
              v1249 = (_OWORD *)operator new[]();
              if (v1750 != &v1731 && v1750)
                MEMORY[0x212BC6368]();
              v1750 = v1249;
              v1250 = v1752;
              if ((_QWORD)v1752)
              {
                *(_QWORD *)&v1752 = v1752 + 6;
                memmove(v1249 + 3, v1249, 8 * v1250);
                v1251 = *(_OWORD *)&oslog[16];
                *v1249 = *(_OWORD *)oslog;
                v1249[1] = v1251;
                v1249[2] = *(_OWORD *)&oslog[32];
                goto LABEL_1596;
              }
            }
            *v1249 = *(_OWORD *)oslog;
            v1249[1] = *(_OWORD *)&oslog[16];
            v1249[2] = *(_OWORD *)&oslog[32];
            *(_QWORD *)&v1752 = 6;
LABEL_1596:
            if ((*(unsigned int (**)(uint64_t))(*v1127 + 24))(v1124 + 23248))
            {
              (*(void (**)(uint64_t))(*v1127 + 32))(v1124 + 23248);
              (*(void (**)(uint64_t))(*(_QWORD *)v1128 + 104))(v1124 + 4760);
            }
LABEL_1598:
            v1256 = *(_DWORD *)(v1125 + 4);
            if (v1177 >= v1256)
              goto LABEL_1601;
            goto LABEL_1599;
          }
          if ((*(unsigned int (**)(uint64_t))(*v1127 + 24))(v1124 + 23248))
          {
            (*(void (**)(uint64_t))(*v1127 + 32))(v1124 + 23248);
            (*(void (**)(uint64_t))(*(_QWORD *)v1128 + 104))(v1124 + 4760);
          }
          if (v1176 < v1163 * *(double *)(v1124 + 23272) && v1175 >= *(_DWORD *)v1125)
          {
            if (*(_BYTE *)(v1125 + 8))
            {
              v1293 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
              v1145 = v1656;
              sub_20E8C81A0(v1293);
              (*(void (**)(uint64_t, uint64_t, double, double, double, double, double))(*v1127 + 64))(v1124 + 23248, v1175, v1172, v1190, v1176, v1163, v1131);
              v1272 = 1;
            }
            else
            {
              v1272 = 1;
              v1145 = v1656;
            }
            goto LABEL_1711;
          }
          if (v1177 >= *(_DWORD *)(v1125 + 4) || !*(_BYTE *)(v1125 + 40))
            goto LABEL_1598;
          v1199 = *(_QWORD *)(v1124 + 23840);
          if (*(_BYTE *)(v1125 + 593))
          {
            v1200 = (double *)(v1124 + 23304);
            if (v1199)
              v1200 = *(double **)(v1124 + 23824);
            v1201 = *(unsigned __int8 *)(v1125 + 592);
            sub_20F7C0F64(v1124 + 4760, (double *)v1842, v1200);
            v1202 = 1.0;
            v1203 = v1842[0];
            v1204 = 1.0;
            if (!v1201)
            {
              v1202 = 1.0e-10;
              v1204 = 1.0e20;
              if (*(double *)v1842 > 0.0)
              {
                v1202 = *(double *)v1842;
                v1204 = 1.0 / (*(double *)v1842 * *(double *)v1842);
              }
            }
            *(double *)(v1124 + 4768) = v1202;
            *(double *)(v1124 + 4776) = v1204;
            *(double *)(v1124 + 4784) = v1202;
            *(double *)(v1124 + 4792) = v1204;
            *(double *)(v1124 + 4800) = v1202;
            *(double *)(v1124 + 4808) = v1204;
            *(double *)(v1124 + 4816) = v1202;
            v1205 = 1.0e-10;
            v1206 = 1.0e20;
            *(double *)(v1124 + 4824) = v1204;
            if (*(double *)&v1203 > 0.0)
            {
              v1205 = *(double *)&v1203;
              v1206 = 1.0 / (*(double *)&v1203 * *(double *)&v1203);
            }
            *(double *)(v1124 + 4832) = v1205;
            *(double *)(v1124 + 4840) = v1206;
            if (v1201)
              v1207 = 1.0;
            else
              v1207 = v1205;
            if (v1201)
              v1208 = 1.0;
            else
              v1208 = v1206;
            *(double *)(v1124 + 4864) = v1207;
            *(double *)(v1124 + 4872) = v1208;
            *(_BYTE *)(ii + 5) = 0;
            *(_DWORD *)(v1124 + 6632) = 0;
          }
          else if (v1199)
          {
            v1842[0] = *(void **)(v1124 + 23824);
            LODWORD(v1842[1]) = 0;
            sub_20F7BD064(v1124 + 4760, (double **)v1842, *(_BYTE *)(v1125 + 592));
          }
          else
          {
            sub_20F7BC8C8(v1124 + 4760, (double *)(v1124 + 23304), *(_BYTE *)(v1125 + 592));
          }
          *(double *)(v1124 + 23984) = sub_20F7BFE08(v1124 + 4760, &v1731);
          v1256 = *(_DWORD *)(v1125 + 4);
          if (v1177 >= v1256)
            goto LABEL_1601;
LABEL_1599:
          v1257 = *(_QWORD *)(v1124 + 23880);
          v1145 = v1656;
          if (v1257)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1257 + 48))(v1257);
            v1256 = *(_DWORD *)(v1125 + 4);
LABEL_1601:
            v1145 = v1656;
          }
          v1175 = LODWORD(object[6]);
          if (LODWORD(object[6]) >= v1256)
            goto LABEL_1712;
        }
      }
    }
    v1152 = 0;
    v1153 = (v1147 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v1153 < 3)
    {
      v1154 = (uint64_t *)v1146;
    }
    else
    {
      v1154 = (uint64_t *)v1146;
      if ((unint64_t)((char *)v1150 - (char *)v1146) >= 0x20)
      {
        v1155 = v1153 + 1;
        v1152 = v1155 & 0x3FFFFFFFFFFFFFFCLL;
        v1154 = (uint64_t *)v1146 + (v1155 & 0x3FFFFFFFFFFFFFFCLL);
        v1156 = v1150 + 1;
        v1157 = v1146 + 1;
        v1158 = v1155 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1159 = *v1157;
          *(v1156 - 1) = *(v1157 - 1);
          *v1156 = v1159;
          v1156 += 2;
          v1157 += 2;
          v1158 -= 4;
        }
        while (v1158);
        if (v1155 == v1152)
          goto LABEL_1464;
      }
    }
    do
    {
      v1160 = *v1154++;
      *((_QWORD *)v1150 + v1152++) = v1160;
    }
    while (v1154 != (uint64_t *)((char *)v1146 + v1148));
LABEL_1464:
    *(_QWORD *)&v1752 = v1152;
    goto LABEL_1465;
  }
  if (*(_BYTE *)(v1125 + 8))
  {
    v1143 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Linearize FAILED", 16);
    std::ios_base::getloc((const std::ios_base *)((char *)v1143 + *(_QWORD *)(*v1143 - 24)));
    v1144 = std::locale::use_facet((const std::locale *)oslog, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v1144->__vftable[2].~facet_0)(v1144, 10);
    std::locale::~locale((std::locale *)oslog);
    std::ostream::put();
    std::ostream::flush();
  }
  LODWORD(object[7]) = 0;
  *(_BYTE *)(v1124 + 6648) = v1132;
  sub_20F7BD82C((uint64_t)v1794);
  v1145 = v1656;
LABEL_1715:
  kdebug_trace();
  if (v1145)
  {
    oslog[23] = 12;
    strcpy(oslog, "OfflineMapBA");
    sub_20F4ACDC8((uint64_t)object, MEMORY[0x24BEDB318], (uint64_t)oslog);
    if ((oslog[23] & 0x80000000) != 0)
      operator delete(*(void **)oslog);
  }
  v1373 = (_QWORD *)v1721;
  v1374 = *(_QWORD *)(v1721 + 5176);
  v1375 = *(_QWORD *)(v1721 + 5184);
  while (v1374 != v1375)
  {
    v1376 = *(_QWORD *)(v1374 + 8);
    if (*(_BYTE *)(v1376 + 20))
    {
      v1377 = *(_QWORD *)(v1376 + 24);
      v1371.f64[0] = *(float64_t *)(v1376 + 48);
      v1378 = *(int64x2_t *)(v1376 + 32);
      _Q2.i64[0] = *(_QWORD *)(v1376 + 72);
      v1379 = *(int64x2_t *)(v1376 + 56);
      _D4 = *(double *)(v1376 + 96);
      _Q5 = *(float64x2_t *)(v1376 + 80);
      v1382 = (float64x2_t)vzip1q_s64(v1378, v1379);
      _Q3 = (float64x2_t)vzip2q_s64(v1378, v1379);
      v1384 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
      v1385 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
      v1386 = *(double *)(v1376 + 120);
      _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1382, *(double *)(v1376 + 104)), _Q3, *(float64x2_t *)(v1376 + 104), 1), (float64x2_t)vzip1q_s64((int64x2_t)v1371, _Q2), v1386);
      _D16 = *(_QWORD *)(v1376 + 112);
      __asm { FMLA            D3, D16, V5.D[1] }
      _Q3.f64[0] = _Q3.f64[0] + _D4 * v1386;
      v1389 = vnegq_f64(_Q21);
      v1390 = (int64x2_t)vextq_s8(v1385, v1384, 8uLL);
      v1391 = (float64x2_t)vzip1q_s64(v1378, v1390);
      v1392 = (float64x2_t)vzip2q_s64((int64x2_t)v1382, v1390);
      *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
      *(float64_t *)(v1377 + 16) = v1371.f64[0];
      *(float64x2_t *)v1377 = v1391;
      *(_QWORD *)(v1377 + 40) = _Q2.i64[0];
      *(float64x2_t *)(v1377 + 24) = v1392;
      *(double *)(v1377 + 64) = _D4;
      *(float64x2_t *)(v1377 + 48) = _Q5;
      _Q0 = vmulq_f64(v1371, v1389);
      __asm
      {
        FMLS            D0, D2, V21.D[1]
        FMLS            D0, D4, V3.D[0]
      }
      v1371 = vnegq_f64(_Q0);
      *(float64x2_t *)(v1377 + 72) = vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v1391, v1389.f64[0]), v1392, _Q21, 1), _Q5, _Q3.f64[0], 0));
      *(float64_t *)(v1377 + 88) = v1371.f64[0];
    }
    v1374 += 16;
  }
  v1394 = v1373[611];
  v1395 = v1373[612];
  while (v1394 != v1395)
  {
    v1396 = *(_QWORD *)(v1394 + 8);
    if (*(_BYTE *)(v1396 + 20))
    {
      v1397 = *(_QWORD *)(v1396 + 24);
      v1371.f64[0] = *(float64_t *)(v1396 + 48);
      v1398 = *(int64x2_t *)(v1396 + 32);
      _Q2.i64[0] = *(_QWORD *)(v1396 + 72);
      v1399 = *(int64x2_t *)(v1396 + 56);
      _D4 = *(double *)(v1396 + 96);
      _Q5 = *(float64x2_t *)(v1396 + 80);
      v1402 = (float64x2_t)vzip1q_s64(v1398, v1399);
      _Q3 = (float64x2_t)vzip2q_s64(v1398, v1399);
      v1404 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
      v1405 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
      v1406 = *(double *)(v1396 + 120);
      _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1402, *(double *)(v1396 + 104)), _Q3, *(float64x2_t *)(v1396 + 104), 1), (float64x2_t)vzip1q_s64((int64x2_t)v1371, _Q2), v1406);
      _D16 = *(_QWORD *)(v1396 + 112);
      __asm { FMLA            D3, D16, V5.D[1] }
      _Q3.f64[0] = _Q3.f64[0] + _D4 * v1406;
      v1409 = vnegq_f64(_Q21);
      v1410 = (int64x2_t)vextq_s8(v1405, v1404, 8uLL);
      v1411 = (float64x2_t)vzip1q_s64(v1398, v1410);
      v1412 = (float64x2_t)vzip2q_s64((int64x2_t)v1402, v1410);
      *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
      *(float64_t *)(v1397 + 16) = v1371.f64[0];
      *(float64x2_t *)v1397 = v1411;
      *(_QWORD *)(v1397 + 40) = _Q2.i64[0];
      *(float64x2_t *)(v1397 + 24) = v1412;
      *(double *)(v1397 + 64) = _D4;
      *(float64x2_t *)(v1397 + 48) = _Q5;
      _Q0 = vmulq_f64(v1371, v1409);
      __asm
      {
        FMLS            D0, D2, V21.D[1]
        FMLS            D0, D4, V3.D[0]
      }
      v1371 = vnegq_f64(_Q0);
      *(float64x2_t *)(v1397 + 72) = vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v1411, v1409.f64[0]), v1412, _Q21, 1), _Q5, _Q3.f64[0], 0));
      *(float64_t *)(v1397 + 88) = v1371.f64[0];
    }
    v1394 += 16;
  }
  v1414 = v1373[623];
  v1415 = v1373[624];
  while (v1414 != v1415)
  {
    v1416 = *(_QWORD *)(v1414 + 8);
    if (*(_BYTE *)(v1416 + 20))
    {
      v1417 = *(_QWORD *)(v1416 + 24);
      v1418 = *(_QWORD *)(v1416 + 96);
      v1419 = *(_OWORD *)(v1416 + 80);
      v1420 = *(_OWORD *)(v1416 + 32);
      v1421 = *(_OWORD *)(v1416 + 48);
      *(_OWORD *)(v1417 + 128) = *(_OWORD *)(v1416 + 64);
      *(_OWORD *)(v1417 + 144) = v1419;
      *(_QWORD *)(v1417 + 160) = v1418;
      *(_OWORD *)(v1417 + 96) = v1420;
      *(_OWORD *)(v1417 + 112) = v1421;
    }
    v1414 += 16;
  }
  v1422 = v1373[695];
  for (jj = v1373[696]; v1422 != jj; v1422 += 16)
  {
    v1424 = *(_QWORD *)(v1422 + 8);
    v1425 = *(_QWORD *)(v1424 + 24);
    if (v1425 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1425 + 24))(v1425) & 1) != 0
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 90, (uint64_t)"this->m_entity && this->m_entity->isSetup()", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v1428 = *(_QWORD *)(v1424 + 24);
      v1429 = *(uint64_t **)(v1428 + 96);
      v1426.f64[0] = *(float64_t *)(v1424 + 32);
      v1430 = *v1429;
      v1431 = (float64x2_t *)v1429[2];
      v1432 = v1429[4];
      v1433 = (float64x2_t *)v1429[6];
      v1427.f64[0] = *(float64_t *)(v1428 + 80);
      _Q2 = *(float64x2_t *)(v1428 + 64);
      *(_QWORD *)&v1435 = *(_OWORD *)&vmulq_f64(v1426, v1427);
      _Q0 = vmulq_n_f64(_Q2, v1426.f64[0]);
      _D4 = *(_QWORD *)(v1432 + 40);
      v1438 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1432, _Q0.f64[0]), *(float64x2_t *)(v1432 + 24), _Q0, 1), *(float64x2_t *)(v1432 + 48), v1435);
      __asm { FMLA            D2, D4, V0.D[1] }
      _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v1432 + 64), v1435);
      _Q0.f64[0] = v1433[1].f64[0];
      v1439 = vaddq_f64(_Q2, _Q0);
      _Q1 = vaddq_f64(v1438, *v1433);
      _D4 = *(_QWORD *)(v1430 + 40);
      v1442 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1430, _Q1.f64[0]), *(float64x2_t *)(v1430 + 24), _Q1, 1), *(float64x2_t *)(v1430 + 48), v1439.f64[0]);
      __asm { FMLA            D2, D4, V1.D[1] }
      _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v1430 + 64), v1439.f64[0]);
      v1439.f64[0] = v1431[1].f64[0];
      *(float64x2_t *)(v1428 + 8) = vaddq_f64(v1442, *v1431);
      *(_QWORD *)(v1428 + 24) = *(_OWORD *)&vaddq_f64(_Q2, v1439);
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1424 + 24) + 16))(*(_QWORD *)(v1424 + 24)) & 1) != 0
        || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 117, (uint64_t)"this->m_entity->update()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        continue;
      }
    }
    abort();
  }
  v1443 = v1373[635];
  for (kk = v1373[636]; v1443 != kk; v1443 += 16)
  {
    v1447 = *(_QWORD *)(v1443 + 8);
    if (*(_BYTE *)(v1447 + 20))
      **(_QWORD **)(v1447 + 24) = *(_QWORD *)(v1447 + 32);
  }
  v1445 = v1373[659];
  v1446 = v1373[660];
  while (v1445 != v1446)
  {
    v1448 = *(_QWORD *)(v1445 + 8);
    if (*(_BYTE *)(v1448 + 20))
    {
      v1449 = *(_QWORD *)(v1448 + 24);
      v1450 = *(_OWORD *)(v1448 + 48);
      *(_OWORD *)v1449 = *(_OWORD *)(v1448 + 32);
      *(_OWORD *)(v1449 + 16) = v1450;
      v1451 = *(_QWORD *)(v1448 + 64);
      *(_BYTE *)(v1449 + 40) = *(_BYTE *)(v1448 + 72);
      *(_QWORD *)(v1449 + 32) = v1451;
      *(_QWORD *)(v1448 + 88) = *(_QWORD *)(v1448 + 80);
      if (*(_QWORD *)(v1448 + 128))
      {
        v1452 = *(_QWORD **)(v1448 + 120);
        if (v1452)
        {
          do
          {
            v1453 = (_QWORD *)*v1452;
            operator delete(v1452);
            v1452 = v1453;
          }
          while (v1453);
        }
        *(_QWORD *)(v1448 + 120) = 0;
        v1454 = *(_QWORD *)(v1448 + 112);
        if (v1454)
        {
          for (mm = 0; mm != v1454; ++mm)
            *(_QWORD *)(*(_QWORD *)(v1448 + 104) + 8 * mm) = 0;
        }
        *(_QWORD *)(v1448 + 128) = 0;
      }
    }
    v1445 += 16;
  }
  v1456 = v1373[671];
  v1457 = v1373[672];
  while (v1456 != v1457)
  {
    v1458 = *(_QWORD *)(v1456 + 8);
    if (*(_BYTE *)(v1458 + 20))
    {
      v1459 = *(_OWORD **)(v1458 + 24);
      v1460 = *(_OWORD *)(v1458 + 48);
      *v1459 = *(_OWORD *)(v1458 + 32);
      v1459[1] = v1460;
      v1461 = *(_OWORD *)(v1458 + 64);
      v1462 = *(_OWORD *)(v1458 + 80);
      v1463 = *(_OWORD *)(v1458 + 112);
      v1459[4] = *(_OWORD *)(v1458 + 96);
      v1459[5] = v1463;
      v1459[2] = v1461;
      v1459[3] = v1462;
      v1464 = *(_OWORD *)(v1458 + 128);
      v1465 = *(_OWORD *)(v1458 + 144);
      v1466 = *(_OWORD *)(v1458 + 176);
      v1459[8] = *(_OWORD *)(v1458 + 160);
      v1459[9] = v1466;
      v1459[6] = v1464;
      v1459[7] = v1465;
      v1467 = *(_OWORD *)(v1458 + 192);
      v1468 = *(_OWORD *)(v1458 + 208);
      v1469 = *(_OWORD *)(v1458 + 240);
      v1459[12] = *(_OWORD *)(v1458 + 224);
      v1459[13] = v1469;
      v1459[10] = v1467;
      v1459[11] = v1468;
      *(_QWORD *)(v1458 + 264) = *(_QWORD *)(v1458 + 256);
      if (*(_QWORD *)(v1458 + 304))
      {
        v1470 = *(_QWORD **)(v1458 + 296);
        if (v1470)
        {
          do
          {
            v1471 = (_QWORD *)*v1470;
            operator delete(v1470);
            v1470 = v1471;
          }
          while (v1471);
        }
        *(_QWORD *)(v1458 + 296) = 0;
        v1472 = *(_QWORD *)(v1458 + 288);
        if (v1472)
        {
          for (nn = 0; nn != v1472; ++nn)
            *(_QWORD *)(*(_QWORD *)(v1458 + 280) + 8 * nn) = 0;
        }
        *(_QWORD *)(v1458 + 304) = 0;
      }
    }
    v1456 += 16;
  }
  v1474 = v1373[683];
  v1475 = v1373[684];
  while (v1474 != v1475)
  {
    v1476 = *(_QWORD *)(v1474 + 8);
    if (*(_BYTE *)(v1476 + 20))
    {
      v1477 = *(_QWORD *)(v1476 + 24);
      *(_OWORD *)v1477 = *(_OWORD *)(v1476 + 32);
      v1478 = *(_OWORD *)(v1476 + 48);
      v1479 = *(_OWORD *)(v1476 + 64);
      v1480 = *(_OWORD *)(v1476 + 80);
      *(_QWORD *)(v1477 + 64) = *(_QWORD *)(v1476 + 96);
      *(_OWORD *)(v1477 + 32) = v1479;
      *(_OWORD *)(v1477 + 48) = v1480;
      *(_OWORD *)(v1477 + 16) = v1478;
      *(_QWORD *)(v1476 + 112) = *(_QWORD *)(v1476 + 104);
      if (*(_QWORD *)(v1476 + 152))
      {
        v1481 = *(_QWORD **)(v1476 + 144);
        if (v1481)
        {
          do
          {
            v1482 = (_QWORD *)*v1481;
            operator delete(v1481);
            v1481 = v1482;
          }
          while (v1482);
        }
        *(_QWORD *)(v1476 + 144) = 0;
        v1483 = *(_QWORD *)(v1476 + 136);
        if (v1483)
        {
          for (i1 = 0; i1 != v1483; ++i1)
            *(_QWORD *)(*(_QWORD *)(v1476 + 128) + 8 * i1) = 0;
        }
        *(_QWORD *)(v1476 + 152) = 0;
      }
    }
    v1474 += 16;
  }
  if (*(_QWORD *)(*v1657 + 64))
  {
    v1485 = *(_QWORD *)(*(_QWORD *)(*v1657 + 48) + 48);
    v1486 = atan2(-*(double *)(v1485 + 40), *(long double *)(v1485 + 64));
    v1487 = asin(*(long double *)(v1485 + 16));
    v1488 = atan2(-*(double *)(v1485 + 8), *(long double *)v1485);
    sub_20F49BBF8(&v1834);
    if (**(int **)(v1834 + 56) <= 2)
    {
      v1489 = *(unsigned __int8 *)(v1834 + 72);
      v1490 = sub_20E8C31DC(v1834, "OSLogSurrogateAppender", 1, 0);
      v1491 = v1490;
      if (v1489 || v1490)
      {
        *(_QWORD *)v1794 = &v1834;
        *(std::chrono::steady_clock::time_point *)&v1794[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v1794[16] = std::chrono::system_clock::now();
        *(_DWORD *)&v1794[24] = 2;
        *(_QWORD *)&v1794[32] = "unknown file";
        *(_DWORD *)&v1794[40] = 288;
        *(_QWORD *)&v1794[64] = 0;
        *(_QWORD *)&v1794[48] = "unknown function";
        *(_QWORD *)&v1794[56] = 0;
        v1492 = **(_QWORD **)v1794;
        v1493 = (const char *)(**(_QWORD **)v1794 + 16);
        v1694 = v1493;
        if (*(char *)(**(_QWORD **)v1794 + 39) < 0)
        {
          v1493 = *(const char **)(v1492 + 16);
          v1494 = *(_QWORD *)(v1492 + 24);
          v1496 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v1496 & 1) != 0)
            goto LABEL_1790;
        }
        else
        {
          v1494 = *(unsigned __int8 *)(**(_QWORD **)v1794 + 39);
          v1495 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v1495 & 1) != 0)
            goto LABEL_1790;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)oslog);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)oslog);
          if (oslog[24] && (oslog[23] & 0x80000000) != 0)
            operator delete(*(void **)oslog);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_1790:
        if (byte_254A4A4F8[23] >= 0)
          v1497 = byte_254A4A4F8;
        else
          v1497 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v1498 = byte_254A4A4F8[23];
        else
          v1498 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)oslog = os_log_create(v1497, v1493);
        v1499 = &oslog[8];
        if (v1498 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v1498 >= 0x17)
        {
          v1500 = (v1498 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v1498 | 7) != 0x17)
            v1500 = v1498 | 7;
          v1501 = v1500 + 1;
          v1499 = operator new(v1500 + 1);
          *(_QWORD *)&oslog[24] = v1501 | 0x8000000000000000;
          *(_QWORD *)&oslog[8] = v1499;
          *(_QWORD *)&oslog[16] = v1498;
        }
        else
        {
          oslog[31] = v1498;
          if (!v1498)
          {
LABEL_1804:
            v1499[v1498] = 0;
            oslog[32] = 1;
            v1502 = &oslog[40];
            if (v1494 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v1494 >= 0x17)
            {
              v1503 = (v1494 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v1494 | 7) != 0x17)
                v1503 = v1494 | 7;
              v1504 = v1503 + 1;
              v1502 = operator new(v1503 + 1);
              *(_QWORD *)&oslog[56] = v1504 | 0x8000000000000000;
              *(_QWORD *)&oslog[40] = v1502;
              *(_QWORD *)&oslog[48] = v1494;
            }
            else
            {
              oslog[63] = v1494;
              if (!v1494)
                goto LABEL_1812;
            }
            memmove(v1502, v1493, v1494);
LABEL_1812:
            v1502[v1494] = 0;
            oslog[64] = 1;
            v1505 = *(NSObject **)oslog;
            if ((oslog[63] & 0x80000000) != 0)
              operator delete(*(void **)&oslog[40]);
            if (oslog[32] && (oslog[31] & 0x80000000) != 0)
              operator delete(*(void **)&oslog[8]);
            if (*(_QWORD *)oslog)
              os_release(*(void **)oslog);
            v1506 = v1486 * 57.2957795;
            v1507 = v1487 * 57.2957795;
            v1508 = v1488 * 57.2957795;
            if (v1491 && *(_QWORD *)(v1491 + 24))
            {
              v1509 = _os_log_pack_size();
              v1510 = (std::__shared_weak_count_vtbl *)operator new(v1509, (std::align_val_t)8uLL);
              v1511 = (std::__shared_weak_count *)operator new();
              v1512 = v1511;
              v1511->__shared_owners_ = 0;
              v1513 = (unint64_t *)&v1511->__shared_owners_;
              v1511->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v1511->__shared_weak_owners_ = 0;
              v1511[1].__vftable = v1510;
              *(_QWORD *)oslog = v1510;
              *(_QWORD *)&oslog[8] = v1510;
              *(_QWORD *)&oslog[16] = v1511;
              do
                v1514 = __ldxr(v1513);
              while (__stxr(v1514 + 1, v1513));
              memset(&oslog[24], 0, 24);
              do
                v1515 = __ldaxr(v1513);
              while (__stlxr(v1515 - 1, v1513));
              if (!v1515)
              {
                ((void (*)(std::__shared_weak_count *))v1511->__on_zero_shared)(v1511);
                std::__shared_weak_count::__release_weak(v1512);
              }
              v1516 = *(_QWORD *)oslog;
              v1517 = _os_log_pack_fill();
              *(_DWORD *)v1517 = 134218496;
              *(double *)(v1517 + 4) = v1506;
              *(_WORD *)(v1517 + 12) = 2048;
              *(double *)(v1517 + 14) = v1507;
              *(_WORD *)(v1517 + 22) = 2048;
              *(double *)(v1517 + 24) = v1508;
              v1518 = (char *)operator new();
              v1519 = *(unsigned __int8 *)(v1492 + 39);
              v1520 = v1694;
              if ((v1519 & 0x80u) != 0)
              {
                v1520 = *(const char **)(v1492 + 16);
                v1519 = *(_QWORD *)(v1492 + 24);
              }
              *(_QWORD *)v1518 = v1516;
              *(_OWORD *)(v1518 + 8) = *(_OWORD *)&oslog[8];
              *(_QWORD *)&oslog[8] = 0;
              *(_QWORD *)&oslog[16] = 0;
              *(_OWORD *)(v1518 + 24) = *(_OWORD *)&oslog[24];
              *(_QWORD *)&oslog[24] = 0;
              *(_QWORD *)&oslog[32] = 0;
              *((_QWORD *)v1518 + 5) = v1520;
              *((_QWORD *)v1518 + 6) = v1519;
              v1518[56] = 2;
              *(_QWORD *)&v1805[0] = 0;
              v1842[0] = v1518;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1491 + 24) + 40))(*(_QWORD *)(v1491 + 24), v1842);
              v1521 = v1842[0];
              v1842[0] = 0;
              if (v1521)
              {
                v1522 = (std::__shared_weak_count *)*((_QWORD *)v1521 + 4);
                if (v1522)
                {
                  v1523 = (unint64_t *)&v1522->__shared_owners_;
                  do
                    v1524 = __ldaxr(v1523);
                  while (__stlxr(v1524 - 1, v1523));
                  if (!v1524)
                  {
                    ((void (*)(std::__shared_weak_count *))v1522->__on_zero_shared)(v1522);
                    std::__shared_weak_count::__release_weak(v1522);
                  }
                }
                v1525 = (std::__shared_weak_count *)*((_QWORD *)v1521 + 2);
                if (v1525)
                {
                  v1526 = (unint64_t *)&v1525->__shared_owners_;
                  do
                    v1527 = __ldaxr(v1526);
                  while (__stlxr(v1527 - 1, v1526));
                  if (!v1527)
                  {
                    ((void (*)(std::__shared_weak_count *))v1525->__on_zero_shared)(v1525);
                    std::__shared_weak_count::__release_weak(v1525);
                  }
                }
                MEMORY[0x212BC6398](v1521, 0x10F0C40B62ED6C6);
                v1528 = *(_QWORD *)&v1805[0];
                *(_QWORD *)&v1805[0] = 0;
                if (v1528)
                {
                  v1529 = *(std::__shared_weak_count **)(v1528 + 32);
                  if (v1529)
                  {
                    v1530 = (unint64_t *)&v1529->__shared_owners_;
                    do
                      v1531 = __ldaxr(v1530);
                    while (__stlxr(v1531 - 1, v1530));
                    if (!v1531)
                    {
                      ((void (*)(std::__shared_weak_count *))v1529->__on_zero_shared)(v1529);
                      std::__shared_weak_count::__release_weak(v1529);
                    }
                  }
                  v1532 = *(std::__shared_weak_count **)(v1528 + 16);
                  if (v1532)
                  {
                    v1533 = (unint64_t *)&v1532->__shared_owners_;
                    do
                      v1534 = __ldaxr(v1533);
                    while (__stlxr(v1534 - 1, v1533));
                    if (!v1534)
                    {
                      ((void (*)(std::__shared_weak_count *))v1532->__on_zero_shared)(v1532);
                      std::__shared_weak_count::__release_weak(v1532);
                    }
                  }
                  MEMORY[0x212BC6398](v1528, 0x10F0C40B62ED6C6);
                }
              }
              v1535 = *(std::__shared_weak_count **)&oslog[32];
              if (*(_QWORD *)&oslog[32])
              {
                v1536 = (unint64_t *)(*(_QWORD *)&oslog[32] + 8);
                do
                  v1537 = __ldaxr(v1536);
                while (__stlxr(v1537 - 1, v1536));
                if (!v1537)
                {
                  ((void (*)(std::__shared_weak_count *))v1535->__on_zero_shared)(v1535);
                  std::__shared_weak_count::__release_weak(v1535);
                }
              }
              v1538 = *(std::__shared_weak_count **)&oslog[16];
              if (*(_QWORD *)&oslog[16])
              {
                v1539 = (unint64_t *)(*(_QWORD *)&oslog[16] + 8);
                do
                  v1540 = __ldaxr(v1539);
                while (__stlxr(v1540 - 1, v1539));
                if (!v1540)
                {
                  ((void (*)(std::__shared_weak_count *))v1538->__on_zero_shared)(v1538);
                  std::__shared_weak_count::__release_weak(v1538);
                }
              }
            }
            else
            {
              os_log_type_enabled(v1505, OS_LOG_TYPE_DEBUG);
              *(_DWORD *)oslog = 134218496;
              *(double *)&oslog[4] = v1506;
              *(_WORD *)&oslog[12] = 2048;
              *(double *)&oslog[14] = v1507;
              *(_WORD *)&oslog[22] = 2048;
              *(double *)&oslog[24] = v1508;
              v1541 = (void *)_os_log_send_and_compose_impl();
              if (v1541)
                free(v1541);
            }
            if (v1489)
            {
              sub_20E8C003C((uint64_t)v1794, "After optimize: Roll %f, pitch %f, Yaw %f", v1506, v1507, v1508);
              sub_20E863570((uint64_t)v1794);
            }
            sub_20E863570((uint64_t)v1794);
            v1542 = *(std::__shared_weak_count **)&v1794[64];
            if (*(_QWORD *)&v1794[64])
            {
              v1543 = (unint64_t *)(*(_QWORD *)&v1794[64] + 8);
              do
                v1544 = __ldaxr(v1543);
              while (__stlxr(v1544 - 1, v1543));
              if (!v1544)
              {
                ((void (*)(std::__shared_weak_count *))v1542->__on_zero_shared)(v1542);
                std::__shared_weak_count::__release_weak(v1542);
              }
            }
            goto LABEL_1871;
          }
        }
        memmove(v1499, v1497, v1498);
        goto LABEL_1804;
      }
    }
  }
LABEL_1871:
  *((_QWORD *)&v1761 + 1) = 0;
  if (v1760 != v1759 && v1760 != 0)
    MEMORY[0x212BC6368]();
  v1756 = 0;
  if (v1754 != v1753 && v1754)
    MEMORY[0x212BC6368]();
  *(_QWORD *)&v1752 = 0;
  if (v1750 != &v1731 && v1750)
    MEMORY[0x212BC6368]();
  *((_QWORD *)&v1730 + 1) = 0;
  if (object[74] != &object[10] && object[74])
    MEMORY[0x212BC6368]();
  if (SHIBYTE(object[5]) < 0)
  {
    operator delete(object[3]);
    if ((SHIBYTE(object[2]) & 0x80000000) == 0)
    {
LABEL_1887:
      sub_20E8D1F68((uint64_t)&v1719, v1720[0]);
      v1546 = (_QWORD *)v1721;
      v1721 = 0;
      if (!v1546)
        goto LABEL_1889;
      goto LABEL_1888;
    }
  }
  else if ((SHIBYTE(object[2]) & 0x80000000) == 0)
  {
    goto LABEL_1887;
  }
  operator delete(object[0]);
  sub_20E8D1F68((uint64_t)&v1719, v1720[0]);
  v1546 = (_QWORD *)v1721;
  v1721 = 0;
  if (v1546)
  {
LABEL_1888:
    v1547 = sub_20F7859E0(v1546);
    MEMORY[0x212BC6398](v1547, 0x10F2C40DA2C9B81);
  }
LABEL_1889:
  if (v1788 < 0)
  {
    operator delete(v1787);
    if ((v1786 & 0x80000000) == 0)
    {
LABEL_1891:
      if ((v1784 & 0x80000000) == 0)
        goto LABEL_1892;
LABEL_1900:
      operator delete(v1783);
      v1548 = v1776;
      if (v1776 != v1775)
        goto LABEL_1893;
LABEL_1901:
      v1549 = 4;
      v1548 = v1775;
      goto LABEL_1902;
    }
  }
  else if ((v1786 & 0x80000000) == 0)
  {
    goto LABEL_1891;
  }
  operator delete(v1785);
  if (v1784 < 0)
    goto LABEL_1900;
LABEL_1892:
  v1548 = v1776;
  if (v1776 == v1775)
    goto LABEL_1901;
LABEL_1893:
  if (!v1548)
    goto LABEL_1903;
  v1549 = 5;
LABEL_1902:
  (*(void (**)(void))(*v1548 + 8 * v1549))();
LABEL_1903:
  v1550 = v1774;
  if (v1774 == v1773)
  {
    v1551 = 4;
    v1550 = v1773;
  }
  else
  {
    if (!v1774)
      goto LABEL_1908;
    v1551 = 5;
  }
  (*(void (**)(void))(*v1550 + 8 * v1551))();
LABEL_1908:
  v1552 = v1772;
  if (v1772 == v1771)
  {
    v1553 = 4;
    v1552 = v1771;
  }
  else
  {
    if (!v1772)
      goto LABEL_1913;
    v1553 = 5;
  }
  (*(void (**)(void))(*v1552 + 8 * v1553))();
LABEL_1913:
  v1554 = v1770;
  if (v1770 == v1769)
  {
    v1555 = 4;
    v1554 = v1769;
    goto LABEL_1917;
  }
  if (v1770)
  {
    v1555 = 5;
LABEL_1917:
    (*(void (**)(void))(*v1554 + 8 * v1555))();
  }
  v1768 = 0;
  result = (uint64_t)v1767;
  if (v1767 != &v1766 && v1767)
    return MEMORY[0x212BC6368]();
  return result;
}

void sub_20F49A084(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x14D8]))
  {
    if (SLOBYTE(STACK[0x14D7]) < 0)
      operator delete((void *)STACK[0x14C0]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x11E8]);
  sub_20F2C524C((uint64_t)&STACK[0x2A0]);
  sub_20E8D1F68((uint64_t)&STACK[0x230], STACK[0x238]);
  sub_20F776D00((_QWORD **)&STACK[0x248]);
  sub_20F6304A4((uint64_t)&STACK[0xB70]);
  _Unwind_Resume(a1);
}

void sub_20F49AA24(uint64_t a1@<X0>, uint64_t *a2@<X8>, float64x2_t a3@<Q1>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t v9;
  int64x2_t v10;
  __int128 v11;
  float64x2_t v13;
  float64x2_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  float64x2_t v23;
  float64x2_t v24;
  __int128 v31;
  float64x2_t v32;
  float64x2_t v33;
  int8x16_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _OWORD *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  unsigned int v61;
  char *v62;
  uint64_t v63;
  char *v64;
  int64_t v65;
  uint64_t v66;
  _OWORD *v67;
  unint64_t v68;
  char *v69;
  void *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  void *v86;
  _QWORD *v87;
  _QWORD *v88;
  int v89;
  _QWORD *v90;
  uint64_t v92;
  unsigned int v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  __int128 v105;
  __int128 v106;
  float64x2_t v107;
  float64x2_t v108;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD **)(a1 + 48);
  v4 = (_QWORD *)(a1 + 56);
  if (v3 != (_QWORD *)(a1 + 56))
  {
    v5 = a2;
    v6 = 0;
    v7 = 0;
    v90 = (_QWORD *)(a1 + 56);
    do
    {
      v8 = v3[6];
      v14.f64[0] = *(float64_t *)(v8 + 16);
      v9 = *(int64x2_t *)v8;
      v10 = *(int64x2_t *)(v8 + 24);
      *(_QWORD *)&v11 = *(_QWORD *)(v8 + 64);
      _Q0 = *(int64x2_t *)(v8 + 48);
      a3.f64[0] = *(float64_t *)(v8 + 88);
      v13 = *(float64x2_t *)(v8 + 72);
      v14.f64[1] = *(float64_t *)(v8 + 40);
      v15 = v3[4];
      v17 = *((_DWORD *)v3 + 10);
      v16 = *((_DWORD *)v3 + 11);
      v18 = v6 - v7;
      if (v6 == v7)
      {
        v20 = v6;
      }
      else
      {
        v19 = 0x8E38E38E38E38E39 * (v18 >> 4);
        v20 = v7;
        do
        {
          v21 = v19 >> 1;
          v22 = v20 + 144 * (v19 >> 1);
          if (*(_QWORD *)v22 < v15 || *(_QWORD *)v22 == v15 && *(_DWORD *)(v22 + 8) < v17)
          {
            v20 = v22 + 144;
            v21 = v19 + ~v21;
          }
          v19 = v21;
        }
        while (v21);
        if (v20 != v6 && *(_QWORD *)v20 == v15 && *(_DWORD *)(v20 + 8) == v17)
          goto LABEL_57;
      }
      v23 = (float64x2_t)vzip1q_s64(v9, v10);
      v33 = (float64x2_t)vzip2q_s64(v9, v10);
      v24 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, v13.f64[0]), v33, v13, 1), v14, a3.f64[0]);
      _D2 = v13.f64[1];
      __asm { FMLA            D5, D2, V0.D[1] }
      a3.f64[0] = _D5 + *(double *)&v11 * a3.f64[0];
      v31 = _Q0.u64[0];
      v32 = vnegq_f64(v24);
      v34 = vextq_s8((int8x16_t)v33, (int8x16_t)vdupq_laneq_s64(_Q0, 1), 8uLL);
      *(_QWORD *)&v33.f64[1] = v34.i64[0];
      v35 = v34.u64[1];
      *(_QWORD *)&v36 = *(_OWORD *)&vnegq_f64(a3);
      *((_QWORD *)&v11 + 1) = 0;
      *((_QWORD *)&v36 + 1) = 1.0;
      v37 = (uint64_t)(v20 - v7) / 144;
      v38 = v7 + 144 * v37;
      v39 = v5[2];
      if (v6 < v39)
      {
        if (v38 == v6)
        {
          *(_QWORD *)v6 = v15;
          *(_DWORD *)(v6 + 8) = v17;
          *(_DWORD *)(v6 + 12) = v16;
          v67 = (_OWORD *)(v7 + 144 * v37);
          v67[3] = v33;
          v67[4] = v34.u64[1];
          v67[1] = v23;
          v67[2] = _Q0.u64[0];
          v67[5] = v14;
          v67[6] = v11;
          v67[7] = v32;
          v67[8] = v36;
          v6 += 144;
          v5[1] = v6;
        }
        else
        {
          v40 = v6 - 144;
          v41 = v6;
          v42 = v6 - 144;
          if (v6 >= 0x90)
          {
            do
            {
              *(_OWORD *)v41 = *(_OWORD *)v42;
              v43 = *(_OWORD *)(v42 + 128);
              v45 = *(_OWORD *)(v42 + 80);
              v44 = *(_OWORD *)(v42 + 96);
              *(_OWORD *)(v41 + 112) = *(_OWORD *)(v42 + 112);
              *(_OWORD *)(v41 + 128) = v43;
              *(_OWORD *)(v41 + 80) = v45;
              *(_OWORD *)(v41 + 96) = v44;
              v46 = *(_OWORD *)(v42 + 16);
              a3 = *(float64x2_t *)(v42 + 32);
              v47 = *(_OWORD *)(v42 + 64);
              *(_OWORD *)(v41 + 48) = *(_OWORD *)(v42 + 48);
              *(_OWORD *)(v41 + 64) = v47;
              *(_OWORD *)(v41 + 16) = v46;
              *(float64x2_t *)(v41 + 32) = a3;
              v41 += 144;
              v42 += 144;
            }
            while (v42 < v6);
          }
          v5[1] = v41;
          if (v6 != v38 + 144)
          {
            v48 = v7 + 144 * v37 - 144;
            v49 = 16 * ((uint64_t)(v6 - (v38 + 144)) >> 4);
            do
            {
              v50 = *(_QWORD *)(v48 + v49);
              *(_DWORD *)(v40 + 8) = *(_DWORD *)(v48 + v49 + 8);
              *(_QWORD *)v40 = v50;
              v51 = *(_OWORD *)(v48 + v49 + 128);
              v53 = *(_OWORD *)(v48 + v49 + 80);
              v52 = *(_OWORD *)(v48 + v49 + 96);
              *(_OWORD *)(v40 + 112) = *(_OWORD *)(v48 + v49 + 112);
              *(_OWORD *)(v40 + 128) = v51;
              *(_OWORD *)(v40 + 80) = v53;
              *(_OWORD *)(v40 + 96) = v52;
              v54 = *(_OWORD *)(v48 + v49 + 16);
              a3 = *(float64x2_t *)(v48 + v49 + 32);
              v55 = *(_OWORD *)(v48 + v49 + 64);
              *(_OWORD *)(v40 + 48) = *(_OWORD *)(v48 + v49 + 48);
              *(_OWORD *)(v40 + 64) = v55;
              *(_OWORD *)(v40 + 16) = v54;
              *(float64x2_t *)(v40 + 32) = a3;
              v40 -= 144;
              v49 -= 144;
            }
            while (v49);
          }
          *(_QWORD *)v38 = v15;
          *(_DWORD *)(v38 + 8) = v17;
          v56 = (_OWORD *)(v7 + 144 * v37);
          v56[3] = v33;
          v56[4] = v34.u64[1];
          v56[1] = v23;
          v56[2] = v31;
          v56[5] = v14;
          v56[6] = v11;
          v56[7] = v32;
          v56[8] = v36;
          v6 = v41;
        }
        goto LABEL_57;
      }
      v57 = 0x8E38E38E38E38E39 * (v18 >> 4) + 1;
      if (v57 > 0x1C71C71C71C71C7)
        sub_20EABADD4();
      v58 = 0x8E38E38E38E38E39 * ((uint64_t)(v39 - v7) >> 4);
      if (2 * v58 > v57)
        v57 = 2 * v58;
      if (v58 >= 0xE38E38E38E38E3)
        v59 = 0x1C71C71C71C71C7;
      else
        v59 = v57;
      if (v59)
      {
        v92 = (uint64_t)(v20 - v7) / 144;
        v95 = _Q0.u64[0];
        v97 = v36;
        v99 = v32;
        v101 = v33;
        v103 = v23;
        v105 = v11;
        v107 = v14;
        if (v59 > 0x1C71C71C71C71C7)
          sub_20E877A38();
        v60 = *((_DWORD *)v3 + 11);
        v61 = *((_DWORD *)v3 + 10);
        v62 = (char *)operator new(144 * v59);
        v14 = v107;
        v23 = v103;
        v11 = v105;
        v17 = v61;
        v32 = v99;
        v33 = v101;
        v31 = v95;
        v36 = v97;
        v35 = v34.u64[1];
        v16 = v60;
        v37 = (uint64_t)(v20 - v7) / 144;
        v63 = (uint64_t)&v62[144 * v92];
        v64 = &v62[144 * v59];
        if (v92 != v59)
        {
LABEL_41:
          v5 = a2;
          goto LABEL_49;
        }
      }
      else
      {
        v62 = 0;
        v63 = 144 * v37;
        v64 = 0;
        if (v37)
          goto LABEL_41;
      }
      v5 = a2;
      if ((uint64_t)(v20 - v7) < 1)
      {
        v89 = v16;
        v94 = v35;
        v96 = v31;
        v98 = v36;
        v100 = v32;
        v102 = v33;
        v104 = v23;
        v93 = v17;
        v106 = v11;
        v108 = v14;
        if (v7 == v20)
          v68 = 1;
        else
          v68 = 2 * v37;
        if (v68 > 0x1C71C71C71C71C7)
          sub_20E877A38();
        v69 = (char *)operator new(144 * v68);
        v63 = (uint64_t)&v69[144 * (v68 >> 2)];
        v64 = &v69[144 * v68];
        if (v62)
        {
          v70 = v62;
          v71 = v64;
          operator delete(v70);
          v64 = v71;
        }
        v14 = v108;
        v23 = v104;
        v11 = v106;
        v17 = v93;
        v32 = v100;
        v33 = v102;
        v31 = v96;
        v36 = v98;
        v35 = v94;
        v16 = v89;
      }
      else
      {
        v65 = 0x8E38E38E38E38E39 * ((v63 - (uint64_t)v62) >> 4);
        if (v65 >= -1)
          v66 = v65 + 1;
        else
          v66 = v65 + 2;
        v63 -= 144 * (v66 >> 1);
      }
LABEL_49:
      *(_QWORD *)v63 = v15;
      *(_DWORD *)(v63 + 8) = v17;
      *(_DWORD *)(v63 + 12) = v16;
      *(float64x2_t *)(v63 + 16) = v23;
      *(_OWORD *)(v63 + 32) = v31;
      *(float64x2_t *)(v63 + 48) = v33;
      *(_OWORD *)(v63 + 64) = v35;
      *(float64x2_t *)(v63 + 80) = v14;
      *(_OWORD *)(v63 + 96) = v11;
      *(float64x2_t *)(v63 + 112) = v32;
      *(_OWORD *)(v63 + 128) = v36;
      v72 = (char *)*v5;
      v7 = v63;
      if (*v5 != v38)
      {
        v73 = (char *)v38;
        v74 = v63;
        do
        {
          v7 = v74 - 144;
          *(_OWORD *)(v74 - 144) = *((_OWORD *)v73 - 9);
          v75 = *((_OWORD *)v73 - 1);
          v77 = *((_OWORD *)v73 - 4);
          v76 = *((_OWORD *)v73 - 3);
          *(_OWORD *)(v74 - 32) = *((_OWORD *)v73 - 2);
          *(_OWORD *)(v74 - 16) = v75;
          *(_OWORD *)(v74 - 64) = v77;
          *(_OWORD *)(v74 - 48) = v76;
          v78 = *((_OWORD *)v73 - 8);
          a3 = *((float64x2_t *)v73 - 7);
          v79 = *((_OWORD *)v73 - 5);
          *(_OWORD *)(v74 - 96) = *((_OWORD *)v73 - 6);
          *(_OWORD *)(v74 - 80) = v79;
          *(_OWORD *)(v74 - 128) = v78;
          *(float64x2_t *)(v74 - 112) = a3;
          v73 -= 144;
          v74 -= 144;
        }
        while (v73 != v72);
      }
      v6 = v63 + 144;
      v80 = v5[1];
      if (v80 == v38)
      {
        v4 = v90;
        v86 = (void *)*v5;
        *v5 = v7;
        v5[1] = v6;
        v5[2] = (uint64_t)v64;
        if (!v86)
          goto LABEL_57;
LABEL_56:
        operator delete(v86);
        goto LABEL_57;
      }
      v4 = v90;
      do
      {
        *(_OWORD *)v6 = *(_OWORD *)v38;
        v81 = *(_OWORD *)(v38 + 128);
        v83 = *(_OWORD *)(v38 + 80);
        v82 = *(_OWORD *)(v38 + 96);
        *(_OWORD *)(v6 + 112) = *(_OWORD *)(v38 + 112);
        *(_OWORD *)(v6 + 128) = v81;
        *(_OWORD *)(v6 + 80) = v83;
        *(_OWORD *)(v6 + 96) = v82;
        v84 = *(_OWORD *)(v38 + 16);
        a3 = *(float64x2_t *)(v38 + 32);
        v85 = *(_OWORD *)(v38 + 64);
        *(_OWORD *)(v6 + 48) = *(_OWORD *)(v38 + 48);
        *(_OWORD *)(v6 + 64) = v85;
        *(_OWORD *)(v6 + 16) = v84;
        *(float64x2_t *)(v6 + 32) = a3;
        v6 += 144;
        v38 += 144;
      }
      while (v38 != v80);
      v86 = (void *)*v5;
      *v5 = v7;
      v5[1] = v6;
      v5[2] = (uint64_t)v64;
      if (v86)
        goto LABEL_56;
LABEL_57:
      v87 = (_QWORD *)v3[1];
      if (v87)
      {
        do
        {
          v88 = v87;
          v87 = (_QWORD *)*v87;
        }
        while (v87);
      }
      else
      {
        do
        {
          v88 = (_QWORD *)v3[2];
          _ZF = *v88 == (_QWORD)v3;
          v3 = v88;
        }
        while (!_ZF);
      }
      v3 = v88;
    }
    while (v88 != v4);
  }
}

void sub_20F49AFF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  void *v13;

  if (v11)
  {
    operator delete(v11);
    v13 = *(void **)a11;
    if (!*(_QWORD *)a11)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v13 = *(void **)a11;
    if (!*(_QWORD *)a11)
      goto LABEL_3;
  }
  *(_QWORD *)(a11 + 8) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_20F49B054(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  float64x2_t v3;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  const char *v33;
  size_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  int64x2_t v37;
  float64x2_t v38;
  int64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  uint64_t v51;
  float64x2_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unsigned __int8 v55;
  const char *v56;
  size_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  NSObject *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  size_t v66;
  std::__shared_weak_count_vtbl *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  const char *v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  void *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  float64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  int64x2_t v105;
  int64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  const char *v118;
  float64x2_t v119;
  int v120;
  float64x2_t v121;
  _QWORD v122[3];
  int v123;
  const char *v124;
  int v125;
  const char *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  uint64_t v129;
  void *__p[2];
  char v131;
  char v132;
  uint64_t v133;
  _BYTE v134[48];
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;

  v6 = a3;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v7 = a1[8];
  if (v7)
  {
    if (v7 >= 0x1C71C71C71C71C8)
      sub_20EABADD4();
    v8 = (char *)operator new(144 * v7);
    *v6 = (uint64_t)v8;
    v6[1] = (uint64_t)v8;
    v6[2] = (uint64_t)&v8[144 * v7];
  }
  v9 = (_QWORD *)a1[6];
  v10 = a1 + 7;
  if (v9 != v10)
  {
    v104 = a2;
    __asm { FMOV            V0.2D, #1.0 }
    v102 = *((double *)&_Q0 + 1);
    v103 = v10;
    do
    {
      v15 = *a2;
      v16 = a2[1];
      if (v16 != *a2)
      {
        v17 = 0x8E38E38E38E38E39 * ((v16 - *a2) >> 4);
        v18 = v9[4];
        do
        {
          v19 = v17 >> 1;
          v20 = v15 + 144 * (v17 >> 1);
          if (*(_QWORD *)v20 < v18 || *(_QWORD *)v20 == v18 && *(_DWORD *)(v20 + 8) < *((_DWORD *)v9 + 10))
          {
            v15 = v20 + 144;
            v19 = v17 + ~v19;
          }
          v17 = v19;
        }
        while (v19);
      }
      if (v15 != v16)
      {
        v21 = v9 + 4;
        if (*(_QWORD *)v15 == v9[4] && *(_DWORD *)(v15 + 8) == *((_DWORD *)v9 + 10))
        {
          v22 = *v6;
          v23 = v6[1];
          if (v23 != *v6)
          {
            v24 = 0x8E38E38E38E38E39 * ((v23 - *v6) >> 4);
            v25 = v9[4];
            do
            {
              v26 = v24 >> 1;
              v27 = v22 + 144 * (v24 >> 1);
              if (*(_QWORD *)v27 < v25 || *(_QWORD *)v27 == v25 && *(_DWORD *)(v27 + 8) < *((_DWORD *)v9 + 10))
              {
                v22 = v27 + 144;
                v26 = v24 + ~v26;
              }
              v24 = v26;
            }
            while (v26);
          }
          v36 = v9[6];
          v38 = *(float64x2_t *)v36;
          v37 = *(int64x2_t *)(v36 + 16);
          v39 = *(int64x2_t *)(v36 + 32);
          v40 = *(float64x2_t *)(v36 + 48);
          v41 = *(float64x2_t *)(v36 + 72);
          v3.f64[0] = *(float64_t *)(v36 + 64);
          v42.f64[1] = v102;
          v42.f64[0] = *(float64_t *)(v36 + 88);
          v44 = *(float64x2_t *)(v15 + 16);
          v43 = *(float64x2_t *)(v15 + 32);
          v46 = *(float64x2_t *)(v15 + 48);
          v45 = *(float64x2_t *)(v15 + 64);
          v48 = *(float64x2_t *)(v15 + 80);
          v47 = *(float64x2_t *)(v15 + 96);
          v50 = *(float64x2_t *)(v15 + 112);
          v49 = *(float64x2_t *)(v15 + 128);
          if (v22 == v23 || *(_QWORD *)v22 != *(_QWORD *)v21 || *(_DWORD *)(v22 + 8) != *((_DWORD *)v9 + 10))
          {
            v105 = *(int64x2_t *)(v36 + 32);
            v106 = *(int64x2_t *)(v36 + 16);
            v107 = *(float64x2_t *)(v15 + 16);
            v108 = *(float64x2_t *)(v15 + 32);
            v109 = *(float64x2_t *)(v15 + 48);
            v110 = *(float64x2_t *)(v15 + 64);
            v111 = *(float64x2_t *)(v15 + 80);
            v112 = *(float64x2_t *)(v15 + 96);
            v113 = *(float64x2_t *)(v15 + 112);
            v114 = *(float64x2_t *)v36;
            v115 = *(float64x2_t *)(v36 + 48);
            v116 = *(float64x2_t *)(v36 + 72);
            v117 = *(float64x2_t *)(v15 + 128);
            v119 = v3;
            v121 = v42;
            v137 = xmmword_2103B5F40;
            v138 = unk_2103B5F50;
            v139 = xmmword_2103B5F60;
            v140 = unk_2103B5F70;
            v135 = xmmword_2103B5F20;
            v136 = unk_2103B5F30;
            *(_OWORD *)&v134[16] = xmmword_2103B5F00;
            *(_OWORD *)&v134[32] = *(_OWORD *)algn_2103B5F10;
            *(_OWORD *)v134 = *v21;
            v22 = sub_20F052E54((char **)v6, v22, (uint64_t)v134);
            v3 = v119;
            v42 = v121;
            v41 = v116;
            v49 = v117;
            v38 = v114;
            v40 = v115;
            v47 = v112;
            v50 = v113;
            v45 = v110;
            v48 = v111;
            v43 = v108;
            v46 = v109;
            v37 = v106;
            v44 = v107;
            v39 = v105;
          }
          v51 = v37.i64[0];
          v52 = (float64x2_t)vzip1q_s64(vdupq_laneq_s64(v37, 1), v39);
          *(float64x2_t *)(v22 + 16) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v38, v44.f64[0]), v52, v44, 1), v40, v43.f64[0]), v41, v43, 1);
          *(float64x2_t *)(v22 + 32) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)v51, v44.f64[0]), (float64x2_t)v39.u64[1], v44, 1), v3, v43.f64[0]), v42, v43, 1);
          *(float64x2_t *)(v22 + 48) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v38, v46.f64[0]), v52, v46, 1), v40, v45.f64[0]), v41, v45, 1);
          *(float64x2_t *)(v22 + 64) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)v51, v46.f64[0]), (float64x2_t)v39.u64[1], v46, 1), v3, v45.f64[0]), v42, v45, 1);
          *(float64x2_t *)(v22 + 80) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v38, v48.f64[0]), v52, v48, 1), v40, v47.f64[0]), v41, v47, 1);
          *(float64x2_t *)(v22 + 96) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)v51, v48.f64[0]), (float64x2_t)v39.u64[1], v48, 1), v3, v47.f64[0]), v42, v47, 1);
          *(float64x2_t *)(v22 + 112) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v38, v50.f64[0]), v52, v50, 1), v40, v49.f64[0]), v41, v49, 1);
          *(float64x2_t *)(v22 + 128) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)v51, v50.f64[0]), (float64x2_t)v39.u64[1], v50, 1), v3, v49.f64[0]), v42, v49, 1);
LABEL_39:
          v53 = (_QWORD *)v9[1];
          if (!v53)
            goto LABEL_124;
          goto LABEL_40;
        }
      }
      sub_20F49BBF8(&v129);
      if (**(int **)(v129 + 56) > 5)
        goto LABEL_39;
      v28 = *(unsigned __int8 *)(v129 + 72);
      v29 = sub_20E8C31DC(v129, "OSLogSurrogateAppender", 1, 0);
      v30 = v29;
      _ZF = !v28 && v29 == 0;
      if (_ZF)
        goto LABEL_39;
      v122[0] = &v129;
      v122[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v122[2] = std::chrono::system_clock::now().__d_.__rep_;
      v123 = 5;
      v124 = "unknown file";
      v125 = 367;
      v126 = "unknown function";
      v127 = 0;
      v128 = 0;
      v32 = *(_QWORD *)v122[0];
      v33 = (const char *)(*(_QWORD *)v122[0] + 16);
      v118 = v33;
      if (*(char *)(*(_QWORD *)v122[0] + 39) < 0)
      {
        v33 = *(const char **)(v32 + 16);
        v34 = *(_QWORD *)(v32 + 24);
        v120 = v28;
        v55 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v55 & 1) != 0)
          goto LABEL_43;
      }
      else
      {
        v34 = *(unsigned __int8 *)(*(_QWORD *)v122[0] + 39);
        v120 = v28;
        v35 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v35 & 1) != 0)
          goto LABEL_43;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)__p);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
        if (v132 && v131 < 0)
          operator delete(__p[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
        v6 = a3;
      }
LABEL_43:
      if (byte_254A4A4F8[23] >= 0)
        v56 = byte_254A4A4F8;
      else
        v56 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v57 = byte_254A4A4F8[23];
      else
        v57 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v134 = os_log_create(v56, v33);
      if (v57 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v57 >= 0x17)
      {
        v59 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v57 | 7) != 0x17)
          v59 = v57 | 7;
        v60 = v59 + 1;
        v58 = operator new(v59 + 1);
        *(_QWORD *)&v134[16] = v57;
        *(_QWORD *)&v134[24] = v60 | 0x8000000000000000;
        *(_QWORD *)&v134[8] = v58;
        v6 = a3;
LABEL_56:
        memmove(v58, v56, v57);
        goto LABEL_57;
      }
      v134[31] = v57;
      v58 = &v134[8];
      if (v57)
        goto LABEL_56;
LABEL_57:
      v58[v57] = 0;
      v134[32] = 1;
      if (v34 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v34 >= 0x17)
      {
        v64 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v34 | 7) != 0x17)
          v64 = v34 | 7;
        v65 = v64 + 1;
        v61 = operator new(v64 + 1);
        *(_QWORD *)&v135 = v34;
        *((_QWORD *)&v135 + 1) = v65 | 0x8000000000000000;
        *(_QWORD *)&v134[40] = v61;
      }
      else
      {
        HIBYTE(v135) = v34;
        v61 = &v134[40];
        if (!v34)
        {
          v134[40] = 0;
          LOBYTE(v136) = 1;
          v62 = *(NSObject **)v134;
          if ((SHIBYTE(v135) & 0x80000000) == 0)
            goto LABEL_61;
          goto LABEL_67;
        }
      }
      memmove(v61, v33, v34);
      v61[v34] = 0;
      LOBYTE(v136) = 1;
      v62 = *(NSObject **)v134;
      if ((SHIBYTE(v135) & 0x80000000) == 0)
      {
LABEL_61:
        v63 = v120;
        if (!v134[32])
          goto LABEL_70;
        goto LABEL_68;
      }
LABEL_67:
      operator delete(*(void **)&v134[40]);
      v63 = v120;
      if (!v134[32])
        goto LABEL_70;
LABEL_68:
      if ((v134[31] & 0x80000000) != 0)
        operator delete(*(void **)&v134[8]);
LABEL_70:
      if (*(_QWORD *)v134)
        os_release(*(void **)v134);
      if (v30 && *(_QWORD *)(v30 + 24))
      {
        v66 = _os_log_pack_size();
        v67 = (std::__shared_weak_count_vtbl *)operator new(v66, (std::align_val_t)8uLL);
        v68 = (std::__shared_weak_count *)operator new();
        v69 = v68;
        v68->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v68->__shared_owners_;
        v68->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v68->__shared_weak_owners_ = 0;
        v68[1].__vftable = v67;
        *(_QWORD *)v134 = v67;
        *(_QWORD *)&v134[8] = v67;
        *(_QWORD *)&v134[16] = v68;
        do
          v71 = __ldxr(p_shared_owners);
        while (__stxr(v71 + 1, p_shared_owners));
        memset(&v134[24], 0, 24);
        do
          v72 = __ldaxr(p_shared_owners);
        while (__stlxr(v72 - 1, p_shared_owners));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v69);
        }
        v73 = *(_QWORD *)v134;
        *(_WORD *)_os_log_pack_fill() = 0;
        v74 = (char *)operator new();
        v75 = *(unsigned __int8 *)(v32 + 39);
        v76 = v118;
        if ((v75 & 0x80u) != 0)
        {
          v76 = *(const char **)(v32 + 16);
          v75 = *(_QWORD *)(v32 + 24);
        }
        *(_QWORD *)v74 = v73;
        *(_OWORD *)(v74 + 8) = *(_OWORD *)&v134[8];
        *(_QWORD *)&v134[8] = 0;
        *(_QWORD *)&v134[16] = 0;
        *(_OWORD *)(v74 + 24) = *(_OWORD *)&v134[24];
        *(_QWORD *)&v134[24] = 0;
        *(_QWORD *)&v134[32] = 0;
        *((_QWORD *)v74 + 5) = v76;
        *((_QWORD *)v74 + 6) = v75;
        v74[56] = 16;
        v133 = 0;
        __p[0] = v74;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v30 + 24) + 40))(*(_QWORD *)(v30 + 24), __p);
        v77 = __p[0];
        __p[0] = 0;
        a2 = v104;
        if (v77)
        {
          v78 = (std::__shared_weak_count *)*((_QWORD *)v77 + 4);
          if (v78)
          {
            v79 = (unint64_t *)&v78->__shared_owners_;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          v81 = (std::__shared_weak_count *)*((_QWORD *)v77 + 2);
          if (v81)
          {
            v82 = (unint64_t *)&v81->__shared_owners_;
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
          MEMORY[0x212BC6398](v77, 0x10F0C40B62ED6C6);
          v84 = v133;
          v133 = 0;
          if (v84)
          {
            v85 = *(std::__shared_weak_count **)(v84 + 32);
            if (v85)
            {
              v86 = (unint64_t *)&v85->__shared_owners_;
              do
                v87 = __ldaxr(v86);
              while (__stlxr(v87 - 1, v86));
              if (!v87)
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v85);
              }
            }
            v88 = *(std::__shared_weak_count **)(v84 + 16);
            if (v88)
            {
              v89 = (unint64_t *)&v88->__shared_owners_;
              do
                v90 = __ldaxr(v89);
              while (__stlxr(v90 - 1, v89));
              if (!v90)
              {
                ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                std::__shared_weak_count::__release_weak(v88);
              }
            }
            MEMORY[0x212BC6398](v84, 0x10F0C40B62ED6C6);
          }
        }
        v91 = *(std::__shared_weak_count **)&v134[32];
        if (*(_QWORD *)&v134[32])
        {
          v92 = (unint64_t *)(*(_QWORD *)&v134[32] + 8);
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        v94 = *(std::__shared_weak_count **)&v134[16];
        if (*(_QWORD *)&v134[16])
        {
          v95 = (unint64_t *)(*(_QWORD *)&v134[16] + 8);
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
      }
      else
      {
        os_log_type_enabled(v62, OS_LOG_TYPE_ERROR);
        *(_WORD *)v134 = 0;
        v97 = (void *)_os_log_send_and_compose_impl();
        a2 = v104;
        if (v97)
          free(v97);
      }
      if (v63)
      {
        sub_20E8C003C((uint64_t)v122, "there is a map state view id that does not exist in transformation_from_old_global_to_new_global_");
        sub_20E863570((uint64_t)v122);
      }
      sub_20E863570((uint64_t)v122);
      v98 = v128;
      if (!v128)
        goto LABEL_123;
      v99 = (unint64_t *)&v128->__shared_owners_;
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
        v10 = v103;
        v53 = (_QWORD *)v9[1];
        if (!v53)
        {
          do
          {
LABEL_124:
            v54 = (_QWORD *)v9[2];
            _ZF = *v54 == (_QWORD)v9;
            v9 = v54;
          }
          while (!_ZF);
          goto LABEL_6;
        }
      }
      else
      {
LABEL_123:
        v10 = v103;
        v53 = (_QWORD *)v9[1];
        if (!v53)
          goto LABEL_124;
      }
      do
      {
LABEL_40:
        v54 = v53;
        v53 = (_QWORD *)*v53;
      }
      while (v53);
LABEL_6:
      v9 = v54;
    }
    while (v54 != v10);
  }
}

void sub_20F49BADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a69;
  char a70;
  void *v71;

  if (a70 && a69 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a54);
  v71 = *(void **)a13;
  if (*(_QWORD *)a13)
  {
    *(_QWORD *)(a13 + 8) = v71;
    operator delete(v71);
  }
  _Unwind_Resume(a1);
}

void sub_20F49BBF8(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A68A48);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68A48))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.map_optimization");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A68A40);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A68A48);
  }
  *a1 = qword_254A68A40;
}

void sub_20F49BC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68A48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68A48);
  _Unwind_Resume(a1);
}

uint64_t sub_20F49BCEC(uint64_t a1)
{
  *(_QWORD *)a1 = 0xA00000001;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_21039D460;
  *(_QWORD *)(a1 + 32) = 0x3EB0C6F7A0B5ED8DLL;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0x3FF7B8BAC710CB29;
  *(_QWORD *)(a1 + 568) = a1 + 56;
  *(_OWORD *)(a1 + 576) = xmmword_210378040;
  *(_WORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 728) = 0x3EB0C6F7A0B5ED8DLL;
  *(_QWORD *)(a1 + 736) = 0x3F50624DD2F1A9FCLL;
  *(_BYTE *)(a1 + 744) = 1;
  *(_OWORD *)(a1 + 752) = xmmword_2102DBD20;
  *(_QWORD *)(a1 + 768) = 0x4000000000000000;
  sub_20EE81D98(a1 + 776);
  *(_DWORD *)(a1 + 1616) = 65537;
  *(_WORD *)(a1 + 1620) = 0;
  *(_QWORD *)(a1 + 1624) = 0x200000002;
  *(_OWORD *)(a1 + 1632) = xmmword_2103B4910;
  *(_QWORD *)(a1 + 1648) = 0x3FF0000000000000;
  return a1;
}

void sub_20F49BDE8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (_QWORD *)v1[90];
  if (v4 == v1 + 87)
  {
    v5 = 4;
    v4 = v1 + 87;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (_QWORD *)v1[86];
  if (v6 == v1 + 83)
  {
    v7 = 4;
    v6 = v1 + 83;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = (_QWORD *)v1[82];
  if (v8 == v1 + 79)
  {
    v9 = 4;
    v8 = v1 + 79;
  }
  else
  {
    if (!v8)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  v10 = (_QWORD *)v1[78];
  if (v10 == v1 + 75)
  {
    v11 = 4;
    v10 = v1 + 75;
  }
  else
  {
    if (!v10)
      goto LABEL_21;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_21:
  v1[73] = 0;
  v12 = v1[71];
  if (v12 != v2)
  {
    if (v12)
      MEMORY[0x212BC6368](v12, 0x1000C8000313F17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F49BEDC(std::__shared_weak_count **a1, unint64_t a2, uint64_t a3)
{
  uint64_t shared_owners;
  uint64_t p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count_vtbl *v8;
  char *v9;
  int v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t i;
  unsigned __int8 v18;
  uint64_t v19;
  __int128 *v20;
  char v21;
  float64x2_t v22;
  float64x2_t v24;
  uint64_t v26;
  int8x8_t shared_weak_owners;
  int v28;
  unsigned int v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint64_t **v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int8x16_t v40;
  int32x4_t v41;
  float64x2_t v42;
  uint64_t *v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t j;
  unsigned __int8 v47;
  unsigned __int8 v48;
  uint64_t v49;
  uint64_t k;
  unsigned __int8 v51;
  uint64_t v52;
  float v53;
  float v54;
  unsigned int v55;
  double v56;
  double v57;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t m;
  unsigned __int8 v61;
  unsigned __int8 v62;
  uint64_t v63;
  uint64_t n;
  unsigned __int8 v65;
  int64x2_t v66;
  float64x2_t *v67;
  _QWORD *v68;
  uint64_t v69;
  float64x2_t *v70;
  float64x2_t *v71;
  float64x2_t *v72;
  uint64_t v73;
  float64x2_t *v74;
  int64x2_t v75;
  _QWORD *f64;
  float64x2_t *v77;
  uint64_t v78;
  int64x2_t *v79;
  double *v80;
  _QWORD *v81;
  uint64_t v82;
  double v83;
  int8x16_t v84;
  std::__shared_count v85;
  double v91;
  int v92;
  float64x2_t *v95;
  _QWORD *v96;
  uint64_t v97;
  double v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  unint64_t v111;
  float64x2_t **v112;
  uint64_t v113;
  float64x2_t *v114;
  _QWORD *v115;
  uint64_t v116;
  std::__shared_count v117;
  float64x2_t v118;
  int64x2_t v119;
  double v121;
  double v123;
  float64x2_t v124;
  uint64_t v125;
  float64x2_t v126;
  float64x2_t v128;
  double v129;
  float64x2_t v130;
  float64x2_t *v131;
  float64x2_t v135;
  float64x2_t v137;
  float64x2_t v139;
  float64x2_t *v141;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v146;
  double v147;
  float64x2_t v148;
  double v150;
  double v152;
  double v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t *v156;
  float64x2_t *v158;
  float64x2_t v160;
  float64x2_t v162;
  double v163;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v170;
  float64x2_t v172;
  float64x2_t v173;
  int64x2_t v175;
  double v176;
  float64x2_t *v178;
  float64x2_t *v179;
  float64x2_t v181;
  double v184;
  double v186;
  float v187;
  __int128 v188;
  int v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v193;
  uint64_t v194;
  size_t v195;
  const char *v196;
  unsigned __int8 v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count_vtbl *v210;
  std::__shared_weak_count_vtbl *v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  BOOL v216;
  char v217;
  unsigned int v218;
  uint64_t v220;
  std::__shared_weak_count *v221;
  uint64_t v222;
  unint64_t v225;
  std::__shared_weak_count_vtbl *v226;
  uint64_t v227;
  unsigned __int8 v228;
  const char *v229;
  size_t v230;
  _BYTE *v231;
  unint64_t v232;
  const char *v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  void *v239;
  NSObject *v240;
  uint64_t v241;
  uint64_t v242;
  size_t v243;
  std::__shared_weak_count_vtbl *v244;
  std::__shared_weak_count *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v250;
  _DWORD *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  void *v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v273;
  std::__shared_weak_count_vtbl *v274;
  char *v275;
  int v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t *v282;
  float64x2_t v283;
  uint64_t v284;
  float64x2_t v288;
  uint64_t v292;
  int v293;
  int v294;
  unint64_t v295;
  std::__shared_weak_count *v296;
  std::__shared_weak_count_vtbl *v297;
  char *v298;
  int v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  int v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  _QWORD *v307;
  uint64_t v308;
  unint64_t v309;
  __int32 v310;
  _QWORD *v311;
  uint64_t *v312;
  std::__shared_weak_count **v313;
  uint64_t *v314;
  _QWORD *v315;
  uint64_t v316;
  char *v317;
  uint64_t *v318;
  uint64_t v319;
  _BYTE *v320;
  int v321;
  uint64_t *v322;
  std::__shared_weak_count **v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  char *v327;
  char *v328;
  char *v329;
  __int128 v330;
  uint64_t v331;
  uint64_t *v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t *v335;
  uint64_t v336;
  uint64_t v337;
  unsigned int v338;
  _QWORD *v339;
  uint64_t *v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t *v343;
  double *v344;
  float64_t v345;
  uint64_t *v346;
  _QWORD *v347;
  _QWORD *v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t *v355;
  std::__shared_count_vtbl *v356;
  uint64_t v357;
  int64x2_t v358;
  std::__shared_weak_count **v359;
  std::__shared_weak_count *v360;
  std::__shared_weak_count *v361;
  unint64_t v362;
  unint64_t v363;
  std::__shared_weak_count *v364;
  uint64_t v365;
  uint64_t *p_shared_weak_owners;
  std::__shared_weak_count_vtbl *v367;
  void *v368;
  std::__shared_weak_count_vtbl *v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  std::__shared_count v373;
  __int128 v374;
  __int128 v375;
  std::__shared_count v376;
  __int128 v377;
  __int128 v378;
  std::__shared_weak_count_vtbl *v379;
  __int128 v380;
  std::__shared_count v381;
  __int128 v382;
  __int128 v383;
  std::__shared_count v384;
  __int128 v385;
  __int128 v386;
  std::__shared_weak_count_vtbl *v387;
  __int128 v388;
  std::__shared_count v389;
  __int128 v390;
  __int128 v391;
  std::__shared_count v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  std::__shared_count v397;
  std::__shared_weak_count *v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  std::__shared_count v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  std::__shared_count v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  std::__shared_count v411;
  __int128 v412;
  __int128 v413;
  std::__shared_count v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  std::__shared_count v419;
  __int128 v420;
  __int128 v421;
  std::__shared_count v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  std::__shared_count v427;
  __int128 v428;
  std::__shared_weak_count *v429;
  char **v430;
  _QWORD *v431;
  uint64_t v432;
  std::__shared_weak_count *v433;
  std::__shared_weak_count *v434;
  unsigned int v435;
  std::__shared_weak_count *v436;
  unint64_t v437;
  unint64_t v438;
  std::__shared_count *v439;
  std::__shared_count_vtbl *v440;
  unsigned int on_zero_shared;
  BOOL v442;
  std::__shared_weak_count_vtbl *v443;
  std::__shared_weak_count *v444;
  _QWORD *v445;
  _QWORD *v446;
  int v447;
  unsigned __int8 *v448;
  char *v449;
  int v450;
  unsigned __int8 *v451;
  char *v452;
  int v453;
  unint64_t v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  unint64_t v458;
  __int128 *v459;
  __int128 *v460;
  float64_t v461;
  uint64_t v462;
  __int128 v463;
  unint64_t v464;
  unint64_t v465;
  char *v466;
  __int128 v467;
  char *v468;
  char *v469;
  __int128 v470;
  void *v471;
  double v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  unsigned int v476;
  unsigned int v477;
  unint64_t v478;
  unint64_t v479;
  uint64_t v480;
  unsigned int v481;
  BOOL v482;
  _QWORD *v483;
  int8x8_t v484;
  unint64_t v485;
  uint8x8_t v486;
  unint64_t v487;
  int8x8_t **v488;
  int8x8_t *v489;
  unint64_t v490;
  uint64_t v491;
  int8x8_t v492;
  int8x8_t v493;
  int8x8_t v494;
  uint8x8_t v495;
  unint64_t v496;
  int8x8_t *v497;
  uint64_t **v498;
  uint64_t *v499;
  uint64_t v500;
  unint64_t v501;
  uint64_t v502;
  unsigned __int8 v503;
  uint64_t v504;
  uint64_t ii;
  unsigned __int8 v506;
  _QWORD *v507;
  std::__shared_weak_count *v508;
  unint64_t *v509;
  unint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  unint64_t *v514;
  unint64_t v515;
  int v516;
  int v517;
  unint64_t v518;
  int v519;
  unsigned int v520;
  unint64_t v521;
  uint64_t *v522;
  uint64_t *v523;
  int v524;
  std::__shared_weak_count *v525;
  _QWORD *v526;
  uint64_t *v527;
  _QWORD *v528;
  uint64_t *v529;
  uint64_t *v530;
  int8x8_t v531;
  unint64_t v532;
  uint8x8_t v533;
  std::__shared_weak_count *v534;
  _QWORD *v535;
  unint64_t *v536;
  unint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  std::__shared_weak_count *v542;
  _QWORD *v543;
  uint64_t v544;
  uint64_t v545;
  _QWORD *v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t v551;
  unint64_t v552;
  char *v553;
  char *v554;
  uint64_t v555;
  uint64_t v556;
  int v557;
  unint64_t *v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t *v561;
  uint64_t *v562;
  unint64_t v563;
  unint64_t v564;
  unint64_t v565;
  _QWORD *v566;
  void *v567;
  int8x16_t v568;
  uint64_t *v569;
  uint64_t *v570;
  uint64_t v571;
  _QWORD *v572;
  std::__shared_weak_count *v573;
  unint64_t *v574;
  unint64_t v575;
  unint64_t v576;
  unsigned int v577;
  uint64_t *v578;
  unint64_t v579;
  unint64_t v580;
  uint64_t v581;
  uint64_t *v582;
  uint64_t *v583;
  std::__shared_weak_count_vtbl *v584;
  void (__cdecl *v585)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count_vtbl *v586;
  uint64_t *v587;
  std::__shared_weak_count *v588;
  unint64_t *v589;
  unint64_t v590;
  int8x8_t v591;
  int v592;
  unsigned int v593;
  unint64_t v594;
  uint8x8_t v595;
  unint64_t v596;
  int8x8_t **v597;
  int8x8_t *v598;
  unint64_t v599;
  uint64_t v600;
  uint64_t v601;
  int8x8_t v602;
  int8x8_t v603;
  int8x8_t v604;
  uint8x8_t v605;
  unint64_t v606;
  int8x8_t *v607;
  uint64_t **v608;
  uint64_t *v609;
  uint64_t v610;
  unint64_t v611;
  uint64_t v612;
  _QWORD *v613;
  std::__shared_weak_count *v614;
  unint64_t *v615;
  unint64_t v616;
  std::__shared_weak_count *v617;
  std::__shared_weak_count *v618;
  unint64_t v619;
  unint64_t v620;
  std::__shared_count *v621;
  std::__shared_count_vtbl *v622;
  unsigned int v623;
  BOOL v624;
  std::__shared_weak_count_vtbl *v625;
  std::__shared_weak_count *v626;
  std::__shared_weak_count *v627;
  std::__shared_count v628;
  std::__shared_weak_count *v629;
  unint64_t *v630;
  unint64_t v631;
  std::__shared_weak_count *v632;
  unint64_t *v633;
  unint64_t v634;
  uint64_t *v635;
  uint64_t *v636;
  uint64_t *v637;
  unsigned int v638;
  uint64_t v639;
  char v640;
  char *v641;
  int v642;
  unsigned __int8 *v643;
  unint64_t v644;
  char *v645;
  std::__shared_weak_count *v646;
  unint64_t *v647;
  unint64_t v648;
  uint64_t v649;
  uint64_t v650;
  char *v651;
  uint64_t v652;
  unint64_t v653;
  unint64_t v654;
  BOOL v655;
  unint64_t v656;
  std::__shared_weak_count *v657;
  __int128 *v659;
  std::__shared_weak_count *v660;
  std::__shared_weak_count *v661;
  uint64_t *v662;
  unsigned int v663;
  uint64_t v664;
  char **v665;
  std::__shared_weak_count *v666;
  std::__shared_weak_count *v667;
  float64x2_t **v668;
  __int32 v669;
  _QWORD *v670;
  uint64_t *v671;
  char *__p;
  char *v673;
  int64x2_t v674;
  _BYTE v675[24];
  int8x16_t v676;
  double v677;
  int64x2_t v678;
  float64x2_t *v679;
  float64x2_t *v680;
  uint64_t v681;
  int64x2_t v682;
  char *v683;
  int64x2_t v684;
  float64_t v685;
  float64x2_t v686;
  uint64_t v687;
  float64x2_t v688;
  int8x16_t v689;
  int64x2_t v690;
  int64x2_t v691;
  int8x16_t v692;
  std::__shared_weak_count *v693;
  double v694;
  uint64_t v695;
  _BYTE object[24];
  std::__shared_count v697;
  void *v698;
  std::__shared_count v699;
  __int128 v700;
  __int128 v701;
  std::__shared_count v702;
  __int128 v703;
  __int128 v704;
  std::__shared_weak_count_vtbl *v705;
  __int128 v706;
  std::__shared_count v707;
  __int128 v708;
  __int128 v709;
  std::__shared_weak_count_vtbl *v710;
  __int128 v711;
  std::__shared_count v712;
  __int128 v713;
  __int128 v714;
  std::__shared_weak_count_vtbl *v715;
  __int128 v716;
  std::__shared_count v717;
  __int128 v718;
  __int128 v719;
  std::__shared_weak_count_vtbl *v720;
  __int128 v721;
  std::__shared_count v722;
  __int128 v723;
  __int128 v724;
  std::__shared_weak_count_vtbl *v725;
  __int128 v726;
  std::__shared_count v727;
  __int128 v728;
  __int128 v729;
  std::__shared_weak_count_vtbl *v730;
  __int128 v731;
  std::__shared_count v732;
  __int128 v733;
  __int128 v734;
  std::__shared_weak_count_vtbl *v735;
  __int128 v736;
  std::__shared_count v737;
  __int128 v738;
  __int128 v739;
  std::__shared_weak_count_vtbl *v740;
  _BYTE v741[648];
  __int128 v742;
  std::__shared_weak_count_vtbl *v743;
  __int128 v744;
  std::__shared_weak_count_vtbl *v745;
  _BYTE v746[648];
  _BYTE v747[648];
  uint64_t v748;

  v748 = *MEMORY[0x24BDAC8D0];
  v674.i64[0] = a2;
  v674.i64[1] = a3;
  shared_owners = (*a1)[2].__shared_owners_;
  if (!shared_owners)
    goto LABEL_265;
  p_shared_owners = (uint64_t)&(*a1)[2].__shared_owners_;
  do
  {
    v5 = *(_QWORD *)(shared_owners + 32);
    if (v5 < a2)
    {
      shared_owners += 8;
    }
    else if (v5 == a2)
    {
      if (*(_DWORD *)(shared_owners + 40) < a3)
        shared_owners += 8;
      else
        p_shared_owners = shared_owners;
    }
    else
    {
      p_shared_owners = shared_owners;
    }
    shared_owners = *(_QWORD *)shared_owners;
  }
  while (shared_owners);
  if ((uint64_t *)p_shared_owners == &(*a1)[2].__shared_owners_
    || (v6 = *(_QWORD *)(p_shared_owners + 32), a2 < v6)
    || a2 == v6 && *(_DWORD *)(p_shared_owners + 40) > a3
    || !*(_QWORD *)(p_shared_owners + 48))
  {
LABEL_265:
    sub_20F4AD5FC(&v686);
    if (**(int **)(*(_QWORD *)&v686.f64[0] + 56) > 4)
      return 0;
    v189 = *(unsigned __int8 *)(*(_QWORD *)&v686.f64[0] + 72);
    v190 = sub_20E8C31DC(*(uint64_t *)&v686.f64[0], "OSLogSurrogateAppender", 1, 0);
    v191 = v190;
    _ZF = !v189 && v190 == 0;
    if (_ZF)
      return 0;
    v689.i64[0] = (uint64_t)&v686;
    v689.u64[1] = std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)v690.i8 = std::chrono::system_clock::now();
    v690.i32[2] = 4;
    v691.i64[0] = (uint64_t)"unknown file";
    v691.i32[2] = 408;
    v692.i64[1] = 0;
    v693 = 0;
    v692.i64[0] = (uint64_t)"unknown function";
    v193 = *(_QWORD *)v689.i64[0];
    v194 = *(_QWORD *)v689.i64[0] + 16;
    if (*(char *)(*(_QWORD *)v689.i64[0] + 39) < 0)
    {
      v196 = *(const char **)(v193 + 16);
      v195 = *(_QWORD *)(v193 + 24);
      v669 = v674.i32[2];
      v228 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v228 & 1) != 0)
        goto LABEL_302;
    }
    else
    {
      v195 = *(unsigned __int8 *)(*(_QWORD *)v689.i64[0] + 39);
      v196 = (const char *)(*(_QWORD *)v689.i64[0] + 16);
      v669 = v674.i32[2];
      v197 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v197 & 1) != 0)
        goto LABEL_302;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (LOBYTE(v697.__vftable) && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_302:
    if (byte_254A4A4F8[23] >= 0)
      v229 = byte_254A4A4F8;
    else
      v229 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v230 = byte_254A4A4F8[23];
    else
      v230 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v229, v196);
    v231 = &object[8];
    if (v230 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v230 >= 0x17)
    {
      v232 = v191;
      v233 = v196;
      v234 = v193;
      v235 = v189;
      v236 = v194;
      v237 = (v230 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v230 | 7) != 0x17)
        v237 = v230 | 7;
      v238 = v237 + 1;
      v231 = operator new(v237 + 1);
      *(_QWORD *)&object[16] = v230;
      v697.__vftable = (std::__shared_count_vtbl *)(v238 | 0x8000000000000000);
      *(_QWORD *)&object[8] = v231;
      v194 = v236;
      v189 = v235;
      v193 = v234;
      v196 = v233;
      v191 = v232;
    }
    else
    {
      HIBYTE(v697.__vftable) = v230;
      if (!v230)
      {
LABEL_316:
        v231[v230] = 0;
        LOBYTE(v697.__shared_owners_) = 1;
        v239 = &v698;
        if (v195 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v195 >= 0x17)
        {
          v241 = (v195 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v195 | 7) != 0x17)
            v241 = v195 | 7;
          v242 = v241 + 1;
          v239 = operator new(v241 + 1);
          v699.__vftable = (std::__shared_count_vtbl *)v195;
          v699.__shared_owners_ = v242 | 0x8000000000000000;
          v698 = v239;
        }
        else
        {
          HIBYTE(v699.__shared_owners_) = v195;
          if (!v195)
          {
            LOBYTE(v698) = 0;
            LOBYTE(v700) = 1;
            v240 = *(NSObject **)object;
            if ((SHIBYTE(v699.__shared_owners_) & 0x80000000) == 0)
              goto LABEL_320;
            goto LABEL_326;
          }
        }
        memmove(v239, v196, v195);
        *((_BYTE *)v239 + v195) = 0;
        LOBYTE(v700) = 1;
        v240 = *(NSObject **)object;
        if ((SHIBYTE(v699.__shared_owners_) & 0x80000000) == 0)
        {
LABEL_320:
          if (!LOBYTE(v697.__shared_owners_))
            goto LABEL_329;
          goto LABEL_327;
        }
LABEL_326:
        operator delete(v698);
        if (!LOBYTE(v697.__shared_owners_))
        {
LABEL_329:
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v191 && *(_QWORD *)(v191 + 24))
          {
            v243 = _os_log_pack_size();
            v244 = (std::__shared_weak_count_vtbl *)operator new(v243, (std::align_val_t)8uLL);
            v245 = (std::__shared_weak_count *)operator new();
            v246 = v245;
            v245->__shared_owners_ = 0;
            v247 = (unint64_t *)&v245->__shared_owners_;
            v245->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v245->__shared_weak_owners_ = 0;
            v245[1].__vftable = v244;
            *(_QWORD *)object = v244;
            *(_QWORD *)&object[8] = v244;
            *(_QWORD *)&object[16] = v245;
            do
              v248 = __ldxr(v247);
            while (__stxr(v248 + 1, v247));
            v697 = (std::__shared_count)0;
            v698 = 0;
            do
              v249 = __ldaxr(v247);
            while (__stlxr(v249 - 1, v247));
            if (!v249)
            {
              ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
              std::__shared_weak_count::__release_weak(v246);
            }
            v250 = *(_QWORD *)object;
            v251 = (_DWORD *)_os_log_pack_fill();
            *v251 = 67109120;
            v251[1] = v669;
            v252 = operator new();
            v253 = *(unsigned __int8 *)(v193 + 39);
            if ((v253 & 0x80u) == 0)
              v254 = v194;
            else
              v254 = *(_QWORD *)(v193 + 16);
            if ((v253 & 0x80u) != 0)
              v253 = *(_QWORD *)(v193 + 24);
            *(_QWORD *)v252 = v250;
            *(_OWORD *)(v252 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(std::__shared_count *)(v252 + 24) = v697;
            v697 = (std::__shared_count)0;
            *(_QWORD *)(v252 + 40) = v254;
            *(_QWORD *)(v252 + 48) = v253;
            *(_BYTE *)(v252 + 56) = 16;
            v678.i64[0] = 0;
            v682.i64[0] = v252;
            (*(void (**)(_QWORD, int64x2_t *))(**(_QWORD **)(v191 + 24) + 40))(*(_QWORD *)(v191 + 24), &v682);
            v255 = v682.i64[0];
            v682.i64[0] = 0;
            if (v255)
            {
              v256 = *(std::__shared_weak_count **)(v255 + 32);
              if (v256)
              {
                v257 = (unint64_t *)&v256->__shared_owners_;
                do
                  v258 = __ldaxr(v257);
                while (__stlxr(v258 - 1, v257));
                if (!v258)
                {
                  ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
                  std::__shared_weak_count::__release_weak(v256);
                }
              }
              v259 = *(std::__shared_weak_count **)(v255 + 16);
              if (v259)
              {
                v260 = (unint64_t *)&v259->__shared_owners_;
                do
                  v261 = __ldaxr(v260);
                while (__stlxr(v261 - 1, v260));
                if (!v261)
                {
                  ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
                  std::__shared_weak_count::__release_weak(v259);
                }
              }
              MEMORY[0x212BC6398](v255, 0x10F0C40B62ED6C6);
              v678.i64[0] = 0;
            }
            v262 = (std::__shared_weak_count *)v697.__shared_owners_;
            if (v697.__shared_owners_)
            {
              v263 = (unint64_t *)(v697.__shared_owners_ + 8);
              do
                v264 = __ldaxr(v263);
              while (__stlxr(v264 - 1, v263));
              if (!v264)
              {
                ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
                std::__shared_weak_count::__release_weak(v262);
              }
            }
            v265 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v266 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v267 = __ldaxr(v266);
              while (__stlxr(v267 - 1, v266));
              if (!v267)
              {
                ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                std::__shared_weak_count::__release_weak(v265);
              }
            }
          }
          else
          {
            os_log_type_enabled(v240, OS_LOG_TYPE_ERROR);
            *(_DWORD *)object = 67109120;
            *(_DWORD *)&object[4] = v669;
            v268 = (void *)_os_log_send_and_compose_impl();
            if (v268)
              free(v268);
          }
          if (v189)
          {
            sub_20E8C003C((uint64_t)&v689, "Failed to prune a candidate state (view: %d)", v674.i32[2]);
            sub_20E863570((uint64_t)&v689);
          }
          sub_20E863570((uint64_t)&v689);
          v269 = v693;
          if (v693)
          {
            v270 = (unint64_t *)&v693->__shared_owners_;
            do
              v271 = __ldaxr(v270);
            while (__stlxr(v271 - 1, v270));
            if (!v271)
            {
              ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
              std::__shared_weak_count::__release_weak(v269);
            }
          }
          return 0;
        }
LABEL_327:
        if (SHIBYTE(v697.__vftable) < 0)
          operator delete(*(void **)&object[8]);
        goto LABEL_329;
      }
    }
    memmove(v231, v229, v230);
    goto LABEL_316;
  }
  __p = 0;
  v673 = 0;
  v7 = a1[2];
  v8 = v7->__vftable;
  v9 = (char *)v7->__shared_owners_;
  v10 = (int)v7->~__shared_weak_count;
  if (v10 <= -2)
  {
    do
    {
      v11 = (__clz(__rbit64((((unint64_t)v8->~__shared_weak_count >> 7) & ~(uint64_t)v8->~__shared_weak_count | 0xFEFEFEFEFEFEFELL)+ 1))+ 7) >> 3;
      v8 = (std::__shared_weak_count_vtbl *)((char *)v8 + v11);
      v9 += 32 * v11;
      v10 = SLOBYTE(v8->~__shared_weak_count);
    }
    while (v10 < -1);
  }
  if (v10 == 255)
  {
    v12 = 0;
    v657 = a1[3];
    v274 = v657->__vftable;
    v275 = (char *)v657->__shared_owners_;
    v276 = (int)v657->~__shared_weak_count;
    if (v276 <= -2)
      goto LABEL_378;
    goto LABEL_379;
  }
  v12 = 0;
  while (2)
  {
    v13 = *((_QWORD *)v9 + 2);
    if (*(_BYTE *)(v13 + 528))
      v14 = v13 + 40;
    else
      v14 = 0;
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
      goto LABEL_236;
    v660 = *a1;
    v664 = *((_QWORD *)v9 + 2);
    if (!*(_BYTE *)(v664 + 528)
      || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v664 + 40) + 24))(v664 + 40) & 1) == 0)
    {
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 90, (uint64_t)"track.getStructure() && track.getStructure()->isSetup()", 55, (uint64_t)"track does not has structure or is not setup", 44, (void (*)(void **))sub_21023DDB0);
      v15 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68 || byte_254A6DE70)
      {
        v16 = qword_254A6DE40;
        for (i = qword_254A6DE48; v16 != i; v16 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v16)(*(_QWORD *)(v16 + 8), "track.getStructure() && track.getStructure()->isSetup()", 55, "track does not has structure or is not setup", 44);
      }
      v18 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68)
        goto LABEL_966;
      qword_254A6DE58(unk_254A6DE60, "track.getStructure() && track.getStructure()->isSetup()", 55, "track does not has structure or is not setup", 44);
    }
    v19 = v664 + 40;
    if (!*(_BYTE *)(v664 + 528))
      v19 = 0;
    if (v674.i64[0] != *(_QWORD *)(v19 + 32) || v674.i32[2] != *(_DWORD *)(v19 + 40))
      goto LABEL_236;
    v20 = *(__int128 **)(v664 + 536);
    v659 = *(__int128 **)(v664 + 544);
    if (v20 == v659)
    {
LABEL_217:
      if (v12 < v673)
      {
        *(_OWORD *)v12 = *(_OWORD *)v9;
        v99 = v12 + 16;
LABEL_235:
        v12 = v99;
        goto LABEL_236;
      }
      v100 = (v12 - __p) >> 4;
      v101 = v100 + 1;
      if ((unint64_t)(v100 + 1) >> 60)
        sub_20E867F44();
      v102 = v673 - __p;
      if ((v673 - __p) >> 3 > v101)
        v101 = v102 >> 3;
      if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0)
        v103 = 0xFFFFFFFFFFFFFFFLL;
      else
        v103 = v101;
      if (v103)
      {
        if (v103 >> 60)
          sub_20E877A38();
        v104 = (char *)operator new(16 * v103);
        v105 = &v104[16 * v100];
        *(_OWORD *)v105 = *(_OWORD *)v9;
        v106 = (uint64_t)v105;
        if (v12 == __p)
        {
LABEL_233:
          v99 = v105 + 16;
          __p = (char *)v106;
          v673 = &v104[16 * v103];
          if (!v12)
            goto LABEL_235;
LABEL_234:
          operator delete(v12);
          goto LABEL_235;
        }
      }
      else
      {
        v104 = 0;
        v105 = (char *)(16 * v100);
        *(_OWORD *)(16 * v100) = *(_OWORD *)v9;
        v106 = 16 * v100;
        if (v12 == __p)
          goto LABEL_233;
      }
      do
      {
        v107 = *((_QWORD *)v12 - 2);
        v12 -= 16;
        v108 = *((_DWORD *)v12 + 2);
        *(_QWORD *)(v106 - 16) = v107;
        v106 -= 16;
        *(_DWORD *)(v106 + 8) = v108;
      }
      while (v12 != __p);
      v12 = __p;
      v99 = v105 + 16;
      __p = (char *)v106;
      v673 = &v104[16 * v103];
      if (!v12)
        goto LABEL_235;
      goto LABEL_234;
    }
    v662 = &v660[74].__shared_owners_;
    while (1)
    {
      if (*(_QWORD *)v20 == v674.i64[0] && *((_DWORD *)v20 + 2) == v674.i32[2])
        goto LABEL_43;
      if (*(_BYTE *)(v664 + 528))
        v26 = v664 + 40;
      else
        v26 = 0;
      shared_weak_owners = (int8x8_t)v660[74].__shared_weak_owners_;
      if (!*(_QWORD *)&shared_weak_owners)
        goto LABEL_74;
      v28 = *(_DWORD *)(v26 + 48);
      v29 = *(_DWORD *)(v26 + 40);
      v30 = v29 ^ __ROR4__(v28, 13);
      v31 = (uint8x8_t)vcnt_s8(shared_weak_owners);
      v31.i16[0] = vaddlv_u8(v31);
      if (v31.u32[0] > 1uLL)
      {
        v32 = v30;
        if (*(_QWORD *)&shared_weak_owners <= v30)
          v32 = v30 % *(_QWORD *)&shared_weak_owners;
      }
      else
      {
        v32 = (shared_weak_owners.i32[0] - 1) & v30;
      }
      v33 = *(uint64_t ***)(*v662 + 8 * v32);
      if (v33)
      {
        v34 = *v33;
        if (*v33)
        {
          v35 = *(_QWORD *)(v26 + 32);
          if (v31.u32[0] < 2uLL)
          {
            v36 = *(_QWORD *)&shared_weak_owners - 1;
            while (1)
            {
              v38 = v34[1];
              if (v38 == v30)
              {
                if (*((_DWORD *)v34 + 8) == v28 && v34[2] == v35 && *((_DWORD *)v34 + 6) == v29)
                  goto LABEL_75;
              }
              else if ((v38 & v36) != v32)
              {
                goto LABEL_74;
              }
              v34 = (uint64_t *)*v34;
              if (!v34)
                goto LABEL_75;
            }
          }
          do
          {
            v37 = v34[1];
            if (v37 == v30)
            {
              if (*((_DWORD *)v34 + 8) == v28 && v34[2] == v35 && *((_DWORD *)v34 + 6) == v29)
                break;
            }
            else
            {
              if (v37 >= *(_QWORD *)&shared_weak_owners)
                v37 %= *(_QWORD *)&shared_weak_owners;
              if (v37 != v32)
                goto LABEL_74;
            }
            v34 = (uint64_t *)*v34;
          }
          while (v34);
        }
      }
      else
      {
LABEL_74:
        v34 = 0;
      }
LABEL_75:
      v39 = sub_20E9DF85C(v662, (uint64_t *)v20);
      v43 = v39 + 5;
      if (!v39)
        v43 = 0;
      v668 = (float64x2_t **)v43;
      if (!v34)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 111, (uint64_t)"old_anchor_pose_ref != nullptr", 30, (uint64_t)"Cannot find the pose ref", 24, (void (*)(void **))sub_21023DDB0);
        v44 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v45 = qword_254A6DE40;
          for (j = qword_254A6DE48; v45 != j; v45 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v45)(*(_QWORD *)(v45 + 8), "old_anchor_pose_ref != nullptr", 30, "Cannot find the pose ref", 24);
        }
        v47 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_966;
        qword_254A6DE58(unk_254A6DE60, "old_anchor_pose_ref != nullptr", 30, "Cannot find the pose ref", 24);
      }
      if (!v39)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 112, (uint64_t)"new_anchor_pose_ref != nullptr", 30, (uint64_t)"Cannot find the pose ref", 24, (void (*)(void **))sub_21023DDB0);
        v48 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v49 = qword_254A6DE40;
          for (k = qword_254A6DE48; v49 != k; v49 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v49)(*(_QWORD *)(v49 + 8), "new_anchor_pose_ref != nullptr", 30, "Cannot find the pose ref", 24);
        }
        v51 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_966;
        qword_254A6DE58(unk_254A6DE60, "new_anchor_pose_ref != nullptr", 30, "Cannot find the pose ref", 24);
      }
      v52 = (uint64_t)v668[8];
      if (v52)
      {
        v53 = *((float *)v20 + 8);
        v54 = *((float *)v20 + 9);
        v55 = *(_DWORD *)(v52 + 992);
        if (v55 != -1)
          goto LABEL_97;
      }
      else
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 115, (uint64_t)"new_anchor_pose_ref->lens", 25, (uint64_t)"Lens does not exist", 19, (void (*)(void **))sub_21023DDB0);
        v58 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v59 = qword_254A6DE40;
          for (m = qword_254A6DE48; v59 != m; v59 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v59)(*(_QWORD *)(v59 + 8), "new_anchor_pose_ref->lens", 25, "Lens does not exist", 19);
        }
        v61 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_966;
        qword_254A6DE58(unk_254A6DE60, "new_anchor_pose_ref->lens", 25, "Lens does not exist", 19);
        v52 = (uint64_t)v668[8];
        v53 = *((float *)v20 + 8);
        v54 = *((float *)v20 + 9);
        v55 = *(_DWORD *)(v52 + 992);
        if (v55 != -1)
        {
LABEL_97:
          v56 = v53;
          *(double *)v40.i64 = v54;
          if (v55 <= 7)
            goto LABEL_98;
          goto LABEL_116;
        }
      }
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v62 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v62 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68 || byte_254A6DE70)
      {
        v63 = qword_254A6DE40;
        for (n = qword_254A6DE48; v63 != n; v63 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v63)(*(_QWORD *)(v63 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
      }
      v65 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v65 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68)
        goto LABEL_966;
      qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
      v55 = *(_DWORD *)(v52 + 992);
      v56 = v53;
      *(double *)v40.i64 = v54;
      if (v55 <= 7)
      {
LABEL_98:
        if (!v55)
          goto LABEL_965;
        v41.i64[0] = *(_QWORD *)(v52 + 80);
        v694 = *(double *)(v52 + 88) + *(double *)(v52 + 72) * v56 + *(double *)v41.i64 * *(double *)v40.i64;
        v57 = *(double *)(v52 + 104);
        v22.f64[0] = *(float64_t *)(v52 + 112);
        *(double *)v40.i64 = v57 * *(double *)v40.i64 + v22.f64[0];
LABEL_117:
        v695 = v40.i64[0];
LABEL_118:
        v678.i64[0] = (uint64_t)&v676;
        v678.i64[1] = (uint64_t)&v694;
        v679 = (float64x2_t *)v675;
        v680 = 0;
        v681 = 0;
        if (v55 <= 7)
          goto LABEL_119;
        goto LABEL_152;
      }
LABEL_116:
      v41.i64[0] = *(_QWORD *)(v52 + 80);
      v694 = *(double *)(v52 + 88) + *(double *)(v52 + 72) * v56 + *(double *)v41.i64 * *(double *)v40.i64;
      v57 = *(double *)(v52 + 104);
      v22.f64[0] = *(float64_t *)(v52 + 112);
      *(double *)v40.i64 = v57 * *(double *)v40.i64 + v22.f64[0];
      if (v55 < 0xE)
        goto LABEL_117;
      v695 = v40.i64[0];
      if (v55 == 14)
        goto LABEL_118;
      v70 = (float64x2_t *)&v676;
      v71 = (float64x2_t *)&v694;
      v678.i64[0] = (uint64_t)&v676;
      v678.i64[1] = (uint64_t)&v694;
      v72 = (float64x2_t *)v675;
      v679 = (float64x2_t *)v675;
      v680 = 0;
      v681 = 0;
      if (v55 != -1)
      {
        v73 = 0;
        v74 = 0;
LABEL_179:
        v21 = sub_20EB3CED8(v52, (uint64_t)v70, v71, v72, v74, v73);
LABEL_42:
        if ((v21 & 1) != 0)
          goto LABEL_248;
        goto LABEL_43;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_966;
      }
      v55 = *(_DWORD *)(v52 + 992);
      if (v55 <= 7)
      {
LABEL_119:
        if (v55 > 3)
        {
          v75 = v678;
          f64 = (_QWORD *)v679->f64;
          v77 = v680;
          v78 = v681;
          if (v55 > 5)
          {
            if (v55 == 6)
              v21 = sub_20EB41C58((double *)v52, v678.i64[0], (double *)v678.i64[1], v679, (uint64_t)v680, v681);
            else
              v21 = sub_20EB306CC(v52, v678.i64[0], (float64x2_t *)v678.i64[1], v679, (unint64_t)v680, v681, *(double *)v40.i64, v57, (int8x16_t)v22, (int8x16_t)v41, _Q4.f64[0], v42.f64[0], v24);
          }
          else if (v55 == 5)
          {
            if (v679)
            {
              v679->f64[0] = 0.0;
              f64[1] = 0;
              f64[2] = 0;
            }
            if (v78)
            {
              *(_QWORD *)(v78 + 64) = 0;
              *(_OWORD *)(v78 + 32) = 0u;
              *(_OWORD *)(v78 + 48) = 0u;
              *(_OWORD *)v78 = 0u;
              *(_OWORD *)(v78 + 16) = 0u;
            }
            if (v77)
              v21 = sub_20EB28F10(v75.i64[0], (uint64_t)v77, (double *)v75.i64[1], v52 + 168, 5);
            else
              v21 = sub_20EB2886C(v75.i64[0], (double *)v75.i64[1], v52 + 168, 5);
          }
          else
          {
            if (v679)
            {
              v679->f64[0] = 0.0;
              f64[1] = 0;
              f64[2] = 0;
            }
            if (v78)
            {
              *(_QWORD *)(v78 + 64) = 0;
              v40 = 0uLL;
              *(_OWORD *)(v78 + 32) = 0u;
              *(_OWORD *)(v78 + 48) = 0u;
              *(_OWORD *)v78 = 0u;
              *(_OWORD *)(v78 + 16) = 0u;
            }
            v79 = (int64x2_t *)(v52 + 168);
            if (v77)
            {
              if (!*(_BYTE *)(v52 + 468))
              {
                v40.i64[0] = sub_20EB27C0C(v52 + 204, (double *)(v52 + 168), 0x32uLL, v40, v57, (int8x16_t)v22, (int8x16_t)v41).u64[0];
                *(_BYTE *)(v52 + 468) = 1;
                v79 = (int64x2_t *)(v52 + 168);
              }
              v21 = sub_20EA8D684(v75.i64[0], v75.i64[1], v79, (float *)(v52 + 204), v77, 5, *(double *)v40.i64, v57, v22.f64[0], *(double *)v41.i64, _Q4.f64[0], v42.f64[0], v24);
            }
            else
            {
              if (!*(_BYTE *)(v52 + 468))
              {
                v40.i64[0] = sub_20EB27C0C(v52 + 204, (double *)(v52 + 168), 0x32uLL, v40, v57, (int8x16_t)v22, (int8x16_t)v41).u64[0];
                *(_BYTE *)(v52 + 468) = 1;
                v79 = (int64x2_t *)(v52 + 168);
              }
              v21 = sub_20EA8D684(v75.i64[0], v75.i64[1], v79, (float *)(v52 + 204), 0, 5, *(double *)v40.i64, v57, v22.f64[0], *(double *)v41.i64, _Q4.f64[0], v42.f64[0], v24);
            }
          }
        }
        else
        {
          if (v55 <= 1)
          {
            v112 = (float64x2_t **)(v34 + 5);
            if (!v34)
              v112 = 0;
            if (v55)
            {
              v113 = v678.i64[0];
              v115 = (_QWORD *)v679->f64;
              v114 = v680;
              v116 = v681;
              *(_OWORD *)v678.i64[0] = *(_OWORD *)v678.i64[1];
              *(_QWORD *)(v113 + 16) = 0x3FF0000000000000;
              if (v115)
              {
                *v115 = 0;
                v115[1] = 0;
                v115[2] = 0;
              }
              if (v114)
              {
                *v114 = (float64x2_t)xmmword_210312EC0;
                v114[1] = (float64x2_t)unk_210312ED0;
                v114[2] = (float64x2_t)xmmword_210312EE0;
              }
              if (v116)
              {
                *(_QWORD *)(v116 + 64) = 0;
                *(_OWORD *)(v116 + 32) = 0u;
                *(_OWORD *)(v116 + 48) = 0u;
                *(_OWORD *)v116 = 0u;
                *(_OWORD *)(v116 + 16) = 0u;
              }
              goto LABEL_250;
            }
LABEL_965:
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_966:
            abort();
          }
          if (v55 == 2)
          {
            v21 = sub_20EA8D22C((uint64_t)&v678, v52);
          }
          else
          {
            v66 = v678;
            v68 = (_QWORD *)v679->f64;
            v67 = v680;
            v69 = v681;
            if (v679)
            {
              v679->f64[0] = 0.0;
              v68[1] = 0;
              v68[2] = 0;
            }
            if (v69)
            {
              *(_QWORD *)(v69 + 64) = 0;
              v40.i64[0] = 0;
              *(_OWORD *)(v69 + 32) = 0u;
              *(_OWORD *)(v69 + 48) = 0u;
              *(_OWORD *)v69 = 0u;
              *(_OWORD *)(v69 + 16) = 0u;
            }
            if (v67)
              v21 = sub_20EB27398((double *)v66.i64[0], (uint64_t)v67, (double *)v66.i64[1], (int64x2_t *)(v52 + 168), 20, *(double *)v40.i64, v57, v22.f64[0], *(double *)v41.i64, (int64x2_t)_Q4);
            else
              v21 = sub_20EB23DF0(v66.i64[0], (double *)v66.i64[1], (int64x2_t *)(v52 + 168), 20, *(double *)v40.i64, v57, v22.f64[0], *(double *)v41.i64, (int64x2_t)_Q4, v42);
          }
        }
        goto LABEL_42;
      }
LABEL_152:
      v70 = (float64x2_t *)v678.i64[0];
      if (v55 > 0xB)
        break;
      v80 = (double *)v678.i64[1];
      v81 = (_QWORD *)v679->f64;
      v74 = v680;
      v82 = v681;
      if (v55 <= 9)
      {
        if (v55 == 9)
        {
          v21 = sub_20EB35004(v52, v678.i64[0], (float64x2_t *)v678.i64[1], v679, (unint64_t)v680, v681, *(double *)v40.i64, v57, v22.f64[0], v41, (int32x4_t)_Q4);
        }
        else
        {
          if (v679)
          {
            v679->f64[0] = 0.0;
            v81[1] = 0;
            v81[2] = 0;
          }
          if (v82)
          {
            *(_QWORD *)(v82 + 64) = 0;
            v40.i64[0] = 0;
            *(_OWORD *)(v82 + 32) = 0u;
            *(_OWORD *)(v82 + 48) = 0u;
            *(_OWORD *)v82 = 0u;
            *(_OWORD *)(v82 + 16) = 0u;
          }
          if (v74)
          {
            v21 = sub_20EB277C4((uint64_t)v70, (uint64_t)v74, v80, v52 + 168, 20, *(double *)v40.i64, v57, v22.f64[0], v41, (int32x4_t)_Q4);
          }
          else
          {
            v98 = sqrt(*v80 * *v80 + v80[1] * v80[1]);
            v21 = sub_20EB24018((uint64_t)v70, v80, (double *)(v52 + 168), 20, v98, v98, v22.f64[0], v41, (int32x4_t)_Q4);
          }
        }
        goto LABEL_42;
      }
      if (v55 != 10)
      {
        v21 = sub_20EB38E20(v52, v678.i64[0], (float64x2_t *)v678.i64[1], v679, v680, v681);
        goto LABEL_42;
      }
      if (v679)
      {
        v679->f64[0] = 0.0;
        v81[1] = 0;
        v81[2] = 0;
      }
      if (v82)
      {
        *(_QWORD *)(v82 + 64) = 0;
        *(_OWORD *)(v82 + 32) = 0u;
        *(_OWORD *)(v82 + 48) = 0u;
        *(_OWORD *)v82 = 0u;
        *(_OWORD *)(v82 + 16) = 0u;
      }
      v83 = (*(double *)v52 + *(double *)(v52 + 32)) * 0.5;
      v21 = sub_20EB24F38((uint64_t)v70, (uint64_t)v80, v52 + 168, (double *)(v52 + 280), 0x14u, v83);
      if (!v74)
        goto LABEL_42;
      if ((v21 & 1) != 0)
      {
        if (sub_20EB2450C(&v688, (uint64_t)&v689, &v686, (uint64_t)v70, (double *)(v52 + 168), v83))
        {
          v84.i64[0] = *(_QWORD *)&v70[1].f64[0];
          v85.__vftable = (std::__shared_count_vtbl *)v690.i64[0];
          _Q3 = v689;
          v692 = *(int8x16_t *)v70;
          v693 = (std::__shared_weak_count *)v84.i64[0];
          v687 = 0;
          *(_QWORD *)&_Q5.f64[0] = v84.i64[0];
          *(_QWORD *)&_Q5.f64[1] = v692.i64[0];
          _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v691, _Q5), (float64x2_t)vzip2q_s64(v691, v690), (float64x2_t)vextq_s8(v692, v84, 8uLL)).f64[1];
          __asm { FMLA            D6, D5, V3.D[1] }
          if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v690, (float64x2_t)v692), 1), (float64x2_t)v691, (float64x2_t)v692).f64[0], *(double *)v690.i64)) >= 0.00000001)goto LABEL_168;
        }
      }
LABEL_43:
      v20 += 4;
      if (v20 == v659)
        goto LABEL_217;
    }
    if (v55 <= 0xD)
    {
      if (v55 == 13)
      {
        v21 = sub_20EB43734((double *)v52, v678.i64[0], v678.i64[1], v679, (uint64_t)v680, v681);
        goto LABEL_42;
      }
      v96 = (_QWORD *)v679->f64;
      v95 = v680;
      v97 = v681;
      if (v679)
      {
        v679->f64[0] = 0.0;
        v96[1] = 0;
        v96[2] = 0;
      }
      if (v97)
      {
        *(_QWORD *)(v97 + 64) = 0;
        *(_OWORD *)(v97 + 32) = 0u;
        *(_OWORD *)(v97 + 48) = 0u;
        *(_OWORD *)v97 = 0u;
        *(_OWORD *)(v97 + 16) = 0u;
      }
      v70->f64[0] = 0.0;
      v70->f64[1] = 0.0;
      v70[1].f64[0] = 0.0;
      if (v95)
      {
        v95[1] = 0u;
        v95[2] = 0u;
        *v95 = 0u;
      }
      goto LABEL_43;
    }
    v71 = (float64x2_t *)v678.i64[1];
    v72 = v679;
    v74 = v680;
    v73 = v681;
    if (v55 != 14)
      goto LABEL_179;
    if (v679)
    {
      v679->f64[0] = 0.0;
      v72->f64[1] = 0.0;
      v72[1].f64[0] = 0.0;
    }
    if (v73)
    {
      *(_QWORD *)(v73 + 64) = 0;
      *(_OWORD *)(v73 + 32) = 0u;
      *(_OWORD *)(v73 + 48) = 0u;
      *(_OWORD *)v73 = 0u;
      *(_OWORD *)(v73 + 16) = 0u;
    }
    v91 = (*(double *)v52 + *(double *)(v52 + 32)) * 0.5;
    v92 = sub_20EB253A0((uint64_t)v70, (uint64_t)v71, (double *)(v52 + 168), (double *)(v52 + 392), 0x14u, v91);
    if (!v74)
    {
      if (v92)
        goto LABEL_248;
      goto LABEL_43;
    }
    if ((v92 & 1) == 0)
      goto LABEL_43;
    if (!sub_20EB2498C(&v688, (uint64_t)&v689, &v686, (uint64_t)v70, (double *)(v52 + 168), v91))
      goto LABEL_43;
    v84.i64[0] = *(_QWORD *)&v70[1].f64[0];
    v85.__vftable = (std::__shared_count_vtbl *)v690.i64[0];
    _Q3 = v689;
    v692 = *(int8x16_t *)v70;
    v693 = (std::__shared_weak_count *)v84.i64[0];
    v687 = 0;
    *(_QWORD *)&_Q5.f64[0] = v84.i64[0];
    *(_QWORD *)&_Q5.f64[1] = v692.i64[0];
    _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v691, _Q5), (float64x2_t)vzip2q_s64(v691, v690), (float64x2_t)vextq_s8(v692, v84, 8uLL)).f64[1];
    __asm { FMLA            D6, D5, V3.D[1] }
    if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v690, (float64x2_t)v692), 1), (float64x2_t)v691, (float64x2_t)v692).f64[0], *(double *)v690.i64)) < 0.00000001)goto LABEL_43;
LABEL_168:
    v117.__vftable = (std::__shared_count_vtbl *)vextq_s8(v689, v689, 8uLL).u64[0];
    _Q3.i64[1] = vextq_s8((int8x16_t)v690, (int8x16_t)v690, 8uLL).u64[0];
    v117.__shared_owners_ = v691.i64[0];
    v85.__shared_owners_ = vextq_s8((int8x16_t)v691, (int8x16_t)v691, 8uLL).u64[0];
    *(int8x16_t *)object = _Q3;
    *(_QWORD *)&object[16] = v692.i64[0];
    v698 = (void *)vextq_s8(v692, v692, 8uLL).u64[0];
    v697 = v117;
    *(_QWORD *)&v700 = v84.i64[0];
    v699 = v85;
    sub_20E8BE424((uint64_t)&v682);
    *(_QWORD *)&v118.f64[0] = v683;
    *(_QWORD *)&v22.f64[1] = v684.i64[1];
    v119 = vzip2q_s64(v682, v684);
    v118.f64[1] = v685;
    *(int64x2_t *)v74 = vzip1q_s64(v682, v684);
    v74[1] = (float64x2_t)v119;
    v74[2] = v118;
LABEL_248:
    v112 = (float64x2_t **)(v34 + 5);
    if (!v34)
      v112 = 0;
LABEL_250:
    v22.f64[0] = v677;
    _Q1 = v676;
    *(_QWORD *)&v121 = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
    *(_QWORD *)&_Q4.f64[0] = v676.i64[1];
    __asm { FMLA            D0, D4, V1.D[1] }
    _Q4.f64[0] = 1.0 / sqrt(_D0 + v22.f64[0] * v22.f64[0]);
    *(_QWORD *)&v123 = *(_OWORD *)&vmulq_f64(v22, _Q4);
    v124 = vmulq_n_f64((float64x2_t)v676, _Q4.f64[0]);
    v676 = (int8x16_t)v124;
    v677 = v123;
    if (*(_BYTE *)(v664 + 528))
      v125 = v664 + 40;
    else
      v125 = 0;
    v24.f64[0] = *(float64_t *)(v125 + 376);
    v126 = **v112;
    _D17 = (*v112)[2].f64[1];
    v128 = *(float64x2_t *)((char *)*v112 + 24);
    v129 = (*v112)[4].f64[0];
    v130 = (*v112)[3];
    v131 = v112[4];
    _Q21 = *v131;
    _Q22 = *(float64x2_t *)((char *)v131 + 24);
    _Q23 = v131[3];
    v135 = vmlaq_laneq_f64(vmulq_n_f64(v126, v131->f64[0]), v128, *v131, 1);
    __asm { FMLA            D25, D17, V21.D[1] }
    v137 = vmlaq_laneq_f64(vmulq_n_f64(v126, _Q22.f64[0]), v128, _Q22, 1);
    __asm { FMLA            D26, D17, V22.D[1] }
    v139 = vmlaq_laneq_f64(vmulq_n_f64(v126, _Q23.f64[0]), v128, _Q23, 1);
    __asm { FMLA            D27, D17, V23.D[1] }
    v141 = v112[6];
    _Q23 = *v141;
    v143 = vmlaq_laneq_f64(vmulq_n_f64(v126, v141->f64[0]), v128, *v141, 1);
    v144 = **v668;
    __asm { FMLA            D16, D17, V23.D[1] }
    _D17 = (*v668)[2].f64[1];
    v146 = vmlaq_n_f64(v135, v130, v131[1].f64[0]);
    v147 = v131[2].f64[1];
    v148 = vmlaq_n_f64(v137, v130, v147);
    _D25 = _D26 + v129 * v147;
    v150 = v131[4].f64[0];
    _Q22 = vmlaq_n_f64(v139, v130, v150);
    v152 = _D27 + v129 * v150;
    v153 = v141[1].f64[0];
    v154 = vmlaq_n_f64(v143, v130, v153);
    v155 = *(float64x2_t *)((char *)*v668 + 24);
    v156 = v668[4];
    _Q16.f64[0] = _Q16.f64[0] + v129 * v153;
    _Q19 = *v156;
    v158 = v668[6];
    _Q27 = vmulq_n_f64(*(float64x2_t *)(v125 + 64), v24.f64[0]);
    v160 = vmlaq_laneq_f64(vmulq_n_f64(v146, _Q27.f64[0]), v148, _Q27, 1);
    _Q21 = *v158;
    __asm { FMLA            D23, D25, V27.D[1] }
    v162 = vmlaq_laneq_f64(vmulq_n_f64(v144, v158->f64[0]), v155, *v158, 1);
    __asm { FMLA            D27, D17, V21.D[1] }
    _Q21.f64[0] = *(float64_t *)(v125 + 80);
    *(_QWORD *)&v163 = *(_OWORD *)&vmulq_f64(v24, _Q21);
    _Q21 = *(float64x2_t *)((char *)v156 + 24);
    v165 = vmlaq_n_f64(v160, _Q22, v163);
    _Q23.f64[0] = vmlad_n_f64(_Q23.f64[0], v152, v163);
    v166 = vmlaq_laneq_f64(vmulq_n_f64(v144, v156->f64[0]), v155, *v156, 1);
    __asm { FMLA            D22, D17, V19.D[1] }
    v167 = vmlaq_laneq_f64(vmulq_n_f64(v144, _Q21.f64[0]), v155, _Q21, 1);
    __asm { FMLA            D26, D17, V21.D[1] }
    _Q21 = v156[3];
    v170 = vmlaq_laneq_f64(vmulq_n_f64(v144, _Q21.f64[0]), v155, _Q21, 1);
    v155.f64[0] = (*v668)[4].f64[0];
    __asm { FMLA            D5, D17, V21.D[1] }
    v172 = (*v668)[3];
    _Q21.f64[0] = v158[1].f64[0];
    v173 = vmlaq_n_f64(v162, v172, _Q21.f64[0]);
    _Q21.f64[0] = _Q27.f64[0] + v155.f64[0] * _Q21.f64[0];
    _Q27.f64[0] = v156[1].f64[0];
    _Q6 = (int64x2_t)vmlaq_n_f64(v166, v172, _Q27.f64[0]);
    _Q22.f64[0] = _Q22.f64[0] + v155.f64[0] * _Q27.f64[0];
    _Q27.f64[0] = v156[2].f64[1];
    v175 = (int64x2_t)vmlaq_n_f64(v167, v172, _Q27.f64[0]);
    v176 = _D26 + v155.f64[0] * _Q27.f64[0];
    _Q27.f64[0] = v156[4].f64[0];
    _Q18 = vmlaq_n_f64(v170, v172, _Q27.f64[0]);
    v178 = v668[2];
    v179 = v112[2];
    _Q7 = vsubq_f64(vaddq_f64(vaddq_f64(v154, *v179), v165), vaddq_f64(v173, *v178));
    v181 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(_Q6, v175), _Q7.f64[0]), (float64x2_t)vzip2q_s64(_Q6, v175), _Q7, 1);
    _Q7.f64[0] = _Q7.f64[1];
    __asm { FMLA            D6, D7, V18.D[1] }
    _Q7.f64[0] = v178[1].f64[0];
    _Q18.f64[0] = v179[1].f64[0];
    *(_QWORD *)&_Q7.f64[0] = *(_OWORD *)&vsubq_f64(vaddq_f64(vaddq_f64(_Q16, _Q18), _Q23), vaddq_f64(_Q21, _Q7));
    _Q22.f64[1] = v176;
    _Q17 = vmlaq_n_f64(v181, _Q22, _Q7.f64[0]);
    _D3 = v121 * _Q4.f64[0];
    v184 = v22.f64[0] * _Q4.f64[0];
    __asm { FMLA            D4, D3, V17.D[1] }
    v186 = _D4 + v184 * vmlad_n_f64(*(double *)_Q6.i64, _D5 + v155.f64[0] * _Q27.f64[0], _Q7.f64[0]);
    if (v186 <= 0.0)
    {
      *(_QWORD *)(v125 + 376) = 0x7FF8000000000000;
      *(_QWORD *)(v125 + 384) = 0x7FF8000000000000;
    }
    else
    {
      *(double *)(v125 + 376) = v186;
    }
    v187 = *((float *)v20 + 9);
    if (fabs(sqrt(vmulq_f64(v124, v124).f64[0]+ _D3 * *(double *)vextq_s8((int8x16_t)v124, (int8x16_t)v124, 8uLL).i64+ v184 * v123)+ -1.0) > 0.000001&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 41, (uint64_t)"std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, (uint64_t)"anchor direction should be normalized to 1", 42, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_966;
    }
    v188 = *v20;
    *(_DWORD *)(v125 + 48) = *((_DWORD *)v20 + 4);
    *(_OWORD *)(v125 + 32) = v188;
    *(_QWORD *)(v125 + 96) = v668;
    *(int8x16_t *)(v125 + 64) = v676;
    *(double *)(v125 + 80) = v677;
    *(double *)(v125 + 88) = v187;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v125 + 16))(v125) & 1) == 0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 159, (uint64_t)"ret", 3, (uint64_t)"When re-anchoring, failed to set anchor for track using frame ", 62, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_966;
    }
LABEL_236:
    v110 = SBYTE1(v8->~__shared_weak_count);
    v8 = (std::__shared_weak_count_vtbl *)((char *)v8 + 1);
    LOBYTE(v109) = v110;
    v9 += 32;
    if (v110 <= -2)
    {
      do
      {
        v111 = (__clz(__rbit64((((unint64_t)v8->~__shared_weak_count >> 7) & ~(uint64_t)v8->~__shared_weak_count | 0xFEFEFEFEFEFEFELL)+ 1))+ 7) >> 3;
        v8 = (std::__shared_weak_count_vtbl *)((char *)v8 + v111);
        v9 += 32 * v111;
        v109 = SLOBYTE(v8->~__shared_weak_count);
      }
      while (v109 < -1);
    }
    if (v109 != 255)
      continue;
    break;
  }
  v198 = __p;
  if (__p != v12)
  {
    do
    {
      v205 = 0;
      v221 = a1[2];
      v222 = *((_QWORD *)v198 + 1);
      _X27 = v221->__vftable;
      __asm { PRFM            #4, [X27] }
      v225 = (0x376ADF16980614E5 - 0x622015F714C7D297 * v222) ^ ((0x376ADF16980614E5
                                                                                  - 0x622015F714C7D297
                                                                                  * (unint64_t)v222) >> 32);
      v226 = v221[1].__vftable;
      v206 = (v225 >> 7) ^ 0x13701D;
      v227 = 0x101010101010101 * (v225 & 0x7F);
      while (1)
      {
        v199 = v206 & (unint64_t)v226;
        v200 = *(uint64_t *)((char *)&_X27->~__shared_weak_count + v199);
        v201 = ((v200 ^ v227) - 0x101010101010101) & ~(v200 ^ v227) & 0x8080808080808080;
        if (v201)
          break;
LABEL_281:
        if ((v200 & (~v200 << 6) & 0x8080808080808080) != 0)
          goto LABEL_299;
        v205 += 8;
        v206 = v205 + v199;
      }
      while (1)
      {
        v202 = (v199 + (__clz(__rbit64(v201)) >> 3)) & (unint64_t)v226;
        v203 = v221->__shared_owners_ + 32 * v202;
        if (*(_QWORD *)v203 == *(_QWORD *)v198 && *(_DWORD *)(v203 + 8) == (_DWORD)v222)
          break;
        v201 &= v201 - 1;
        if (!v201)
          goto LABEL_281;
      }
      if (_X27)
      {
        v207 = *(std::__shared_weak_count **)(v203 + 24);
        if (v207)
        {
          v208 = (unint64_t *)&v207->__shared_owners_;
          do
            v209 = __ldaxr(v208);
          while (__stlxr(v209 - 1, v208));
          if (!v209)
          {
            ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
            std::__shared_weak_count::__release_weak(v207);
          }
        }
        v210 = v221[1].__vftable;
        --v221->__shared_weak_owners_;
        v211 = v221->__vftable;
        v212 = (char *)_X27 + v202 - (char *)v221->__vftable;
        v213 = *(uint64_t *)((char *)&v221->~__shared_weak_count + ((v212 - 8) & (unint64_t)v210));
        v214 = *(uint64_t *)((_BYTE *)&_X27->~__shared_weak_count + v202) & (~*(uint64_t *)((char *)&_X27->~__shared_weak_count
                                                                                        + v202) << 6) & 0x8080808080808080;
        v215 = v213 & (~v213 << 6) & 0x8080808080808080;
        if (v215)
          v216 = v214 == 0;
        else
          v216 = 1;
        if (v216)
        {
          v220 = 0;
          v217 = -2;
        }
        else
        {
          v218 = (__clz(v215) >> 3) + (__clz(__rbit64(v214)) >> 3);
          _CF = v218 >= 8;
          v220 = v218 < 8;
          if (_CF)
            v217 = -2;
          else
            v217 = 0x80;
        }
        *((_BYTE *)&v211->~__shared_weak_count + v212) = v217;
        *((_BYTE *)&v211->~__shared_weak_count + ((v212 - 7) & (unint64_t)v210) + (v210 & 7)) = v217;
        v221[1].__shared_owners_ += v220;
      }
LABEL_299:
      v198 += 16;
    }
    while (v198 != v12);
    v12 = __p;
  }
  v273 = a1[3];
  v274 = v273->__vftable;
  v275 = (char *)v273->__shared_owners_;
  v276 = (int)v273->~__shared_weak_count;
  if (v276 <= -2)
  {
    do
    {
LABEL_378:
      v277 = (__clz(__rbit64((((unint64_t)v274->~__shared_weak_count >> 7) & ~(uint64_t)v274->~__shared_weak_count | 0xFEFEFEFEFEFEFELL)+ 1))+ 7) >> 3;
      v274 = (std::__shared_weak_count_vtbl *)((char *)v274 + v277);
      v275 += 32 * v277;
      v276 = SLOBYTE(v274->~__shared_weak_count);
    }
    while (v276 < -1);
  }
LABEL_379:
  if (v276 != 255)
  {
    do
    {
      v278 = *((_QWORD *)v275 + 2);
      if (*(_BYTE *)(v278 + 968))
        v279 = v278 + 40;
      else
        v279 = 0;
      if (*(_QWORD *)(v279 + 920))
      {
        if (v674.i64[0] == *(_QWORD *)(v279 + 896) && v674.i32[2] == *(_DWORD *)(v279 + 904))
        {
          v280 = *(_QWORD *)(v278 + 976);
          v281 = *(_QWORD *)(v278 + 984);
          if (v280 != v281)
          {
            while (*(_QWORD *)v280 == v674.i64[0] && *(_DWORD *)(v280 + 8) == v674.i32[2])
            {
              v280 += 152;
              if (v280 == v281)
                goto LABEL_405;
            }
            v282 = sub_20E9DF85C(&(*a1)[74].__shared_owners_, (uint64_t *)v280);
            if (v282)
              v284 = (uint64_t)(v282 + 5);
            else
              v284 = 0;
            if (!v282
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 193, (uint64_t)"pose_ref != nullptr", 19, (uint64_t)"Cannot find the pose ref", 24, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_967;
            }
            if (!*(_QWORD *)(v284 + 64)
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 196, (uint64_t)"pose_ref->lens", 14, (uint64_t)"Lens does not exist", 19, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_967;
            }
            _Q0 = *(float64x2_t *)(v280 + 112);
            v283.f64[0] = 1.0;
            _Q2 = vmulq_f64(_Q0, _Q0);
            _D3 = *(_QWORD *)(v280 + 120);
            __asm { FMLA            D2, D3, V0.D[1] }
            _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + 1.0 * 1.0);
            v288 = vmulq_f64(v283, _Q2);
            *(float64x2_t *)object = vmulq_n_f64(_Q0, _Q2.f64[0]);
            *(float64_t *)&object[16] = v288.f64[0];
            _Q0 = *(float64x2_t *)(v280 + 128);
            v288.f64[0] = 1.0;
            _Q2 = vmulq_f64(_Q0, _Q0);
            _D3 = *(_QWORD *)(v280 + 136);
            __asm { FMLA            D2, D3, V0.D[1] }
            _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + 1.0 * 1.0);
            v689 = (int8x16_t)vmulq_n_f64(_Q0, _Q2.f64[0]);
            v690.i64[0] = *(_OWORD *)&vmulq_f64(v288, _Q2);
            v292 = *(_BYTE *)(v278 + 968) ? v278 + 40 : 0;
            if (!sub_20FCCD298(v292, (__int128 *)object, (__int128 *)v689.i8, (__int128 *)v280, v284)
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 210, (uint64_t)"ret", 3, (uint64_t)"When re-anchoring, failed to set anchor for track using frame ", 62, (void (*)(void **))sub_21023DDB0))
            {
LABEL_967:
              abort();
            }
          }
        }
      }
LABEL_405:
      v294 = SBYTE1(v274->~__shared_weak_count);
      v274 = (std::__shared_weak_count_vtbl *)((char *)v274 + 1);
      LOBYTE(v293) = v294;
      v275 += 32;
      if (v294 <= -2)
      {
        do
        {
          v295 = (__clz(__rbit64((((unint64_t)v274->~__shared_weak_count >> 7) & ~(uint64_t)v274->~__shared_weak_count | 0xFEFEFEFEFEFEFELL)+ 1))+ 7) >> 3;
          v274 = (std::__shared_weak_count_vtbl *)((char *)v274 + v295);
          v275 += 32 * v295;
          v293 = SLOBYTE(v274->~__shared_weak_count);
        }
        while (v293 < -1);
      }
    }
    while (v293 != 255);
  }
  v296 = a1[4];
  v297 = v296->__vftable;
  v298 = (char *)v296->__shared_owners_;
  v299 = (int)v296->~__shared_weak_count;
  if (v299 <= -2)
  {
    do
    {
      v300 = (__clz(__rbit64((((unint64_t)v297->~__shared_weak_count >> 7) & ~(uint64_t)v297->~__shared_weak_count | 0xFEFEFEFEFEFEFELL)+ 1))+ 7) >> 3;
      v297 = (std::__shared_weak_count_vtbl *)((char *)v297 + v300);
      v298 += 32 * v300;
      v299 = SLOBYTE(v297->~__shared_weak_count);
    }
    while (v299 < -1);
  }
  while (v299 != 255)
  {
    v301 = *((_QWORD *)v298 + 2);
    v302 = v301 + 40;
    if (!*(_BYTE *)(v301 + 280))
      v302 = 0;
    if (*(_BYTE *)(v302 + 152))
      sub_20F293B94((uint64_t)&v674, (uint64_t)*a1, v301);
    v303 = SBYTE1(v297->~__shared_weak_count);
    v297 = (std::__shared_weak_count_vtbl *)((char *)v297 + 1);
    LOBYTE(v299) = v303;
    v298 += 32;
    if (v303 <= -2)
    {
      do
      {
        v304 = (__clz(__rbit64((((unint64_t)v297->~__shared_weak_count >> 7) & ~(uint64_t)v297->~__shared_weak_count | 0xFEFEFEFEFEFEFELL)+ 1))+ 7) >> 3;
        v297 = (std::__shared_weak_count_vtbl *)((char *)v297 + v304);
        v298 += 32 * v304;
        v299 = SLOBYTE(v297->~__shared_weak_count);
      }
      while (v299 < -1);
    }
  }
  if (v12)
    operator delete(v12);
  v305 = v674.i64[1];
  v306 = v674.i64[0];
  v307 = operator new(0x20uLL);
  *v307 = &off_24CA00298;
  v307[1] = a1;
  *((_DWORD *)v307 + 6) = v674.i32[2];
  v307[2] = v674.i64[0];
  v697.__vftable = (std::__shared_count_vtbl *)v307;
  v308 = (uint64_t)*a1;
  v309 = (unint64_t)(*a1)[13].__vftable;
  if (v309 == 1)
  {
    v310 = *(_DWORD *)(*(_QWORD *)(v308 + 296) + 32);
    v689 = (int8x16_t)__PAIR128__(v305, v306);
    v690.i32[0] = v310;
    v311 = &a1[1][1].__vftable;
    v312 = sub_20E9DF85C(v311, v689.i64);
    v313 = a1;
    if (v312)
    {
      if (*((_DWORD *)v312 + 16))
      {
        v314 = sub_20E9DF85C(v311, v689.i64);
        if (v314)
        {
          v315 = (_QWORD *)v314[7];
          while (v315)
          {
            v316 = v315[3];
            v315 = (_QWORD *)*v315;
            if (*(_BYTE *)(v316 + 528))
            {
              v682.i64[0] = v316;
              if (!v697.__vftable)
                sub_20E86D37C();
              (*((void (**)(std::__shared_count_vtbl *, int64x2_t *))v697.~__shared_count + 6))(v697.__vftable, &v682);
            }
          }
        }
      }
    }
    goto LABEL_507;
  }
  v682 = 0uLL;
  v683 = 0;
  if (v309)
  {
    if (v309 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v317 = (char *)operator new(24 * v309);
    v682.i64[0] = (uint64_t)v317;
    v682.i64[1] = (uint64_t)v317;
    v683 = &v317[24 * v309];
    v318 = *(uint64_t **)(v308 + 296);
    if (v318 != (uint64_t *)(v308 + 304))
    {
LABEL_433:
      v319 = v305;
      v320 = v317;
      while (1)
      {
        v321 = *((_DWORD *)v318 + 8);
        if (v317 < v683)
        {
          *(_QWORD *)v317 = v306;
          *((_QWORD *)v317 + 1) = v319;
          *((_DWORD *)v317 + 4) = v321;
          v317 += 24;
          v682.i64[1] = (uint64_t)v317;
          v322 = (uint64_t *)v318[1];
          v323 = a1;
          if (v322)
            goto LABEL_451;
          goto LABEL_453;
        }
        v324 = 0xAAAAAAAAAAAAAAABLL * ((v317 - v320) >> 3);
        v325 = v324 + 1;
        if (v324 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        if (0x5555555555555556 * ((v683 - v320) >> 3) > v325)
          v325 = 0x5555555555555556 * ((v683 - v320) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v683 - v320) >> 3) >= 0x555555555555555)
          v326 = 0xAAAAAAAAAAAAAAALL;
        else
          v326 = v325;
        if (v326 > 0xAAAAAAAAAAAAAAALL)
          sub_20E877A38();
        v327 = (char *)operator new(24 * v326);
        v328 = &v327[8 * ((v317 - v320) >> 3)];
        *(_QWORD *)v328 = v306;
        *((_QWORD *)v328 + 1) = v319;
        *((_DWORD *)v328 + 4) = v321;
        if (v317 == v320)
        {
          v331 = (uint64_t)&v327[8 * ((v317 - v320) >> 3)];
          v317 = v328 + 24;
          v682.i64[0] = (uint64_t)&v327[24 * v324];
          v683 = &v327[24 * v326];
          if (v320)
            goto LABEL_449;
        }
        else
        {
          v329 = &v327[8 * ((v317 - v320) >> 3)];
          do
          {
            v330 = *(_OWORD *)(v317 - 24);
            v331 = (uint64_t)(v329 - 24);
            *((_DWORD *)v329 - 2) = *((_DWORD *)v317 - 2);
            *(_OWORD *)(v329 - 24) = v330;
            v317 -= 24;
            v329 -= 24;
          }
          while (v317 != v320);
          v317 = v328 + 24;
          v682.i64[0] = v331;
          v683 = &v327[24 * v326];
          if (v320)
LABEL_449:
            operator delete(v320);
        }
        v320 = (_BYTE *)v331;
        v682.i64[1] = (uint64_t)v317;
        v322 = (uint64_t *)v318[1];
        v323 = a1;
        if (v322)
        {
          do
          {
LABEL_451:
            v332 = v322;
            v322 = (uint64_t *)*v322;
          }
          while (v322);
          goto LABEL_434;
        }
        do
        {
LABEL_453:
          v332 = (uint64_t *)v318[2];
          _ZF = *v332 == (_QWORD)v318;
          v318 = v332;
        }
        while (!_ZF);
LABEL_434:
        v318 = v332;
        if (v332 == &(*v323)[12].__shared_weak_owners_)
          goto LABEL_460;
      }
    }
  }
  else
  {
    v317 = 0;
    v318 = *(uint64_t **)(v308 + 296);
    if (v318 != (uint64_t *)(v308 + 304))
      goto LABEL_433;
  }
  v320 = v317;
LABEL_460:
  v333 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v317 - v320) >> 3));
  if (v317 == v320)
    v334 = 0;
  else
    v334 = v333;
  sub_20F2803D4((uint64_t)v320, (__int128 *)v317, (uint64_t)&v689, v334, 1);
  v336 = v682.i64[1];
  v335 = (uint64_t *)v682.i64[0];
  v337 = v682.i64[1] - v682.i64[0];
  if (v682.i64[1] != v682.i64[0] && v682.i64[0] != v682.i64[1])
  {
    v338 = 0;
    v339 = &a1[1][1].__vftable;
    do
    {
      v340 = sub_20E9DF85C(v339, v335);
      if (v340 && v340[8] > (unint64_t)v338)
        v338 = v340[8];
      v335 += 3;
    }
    while (v335 != (uint64_t *)v336);
    if (v338)
    {
      v689.i64[0] = (uint64_t)operator new(16 * v338);
      v689.i64[1] = v689.i64[0];
      v690.i64[0] = v689.i64[0] + 16 * v338;
      v342 = v682.i64[1];
      v341 = (uint64_t *)v682.i64[0];
      if (v682.i64[0] != v682.i64[1])
      {
        if (v337 == 24)
        {
          do
          {
            v343 = sub_20E9DF85C(v339, v341);
            if (v343)
            {
              v344 = (double *)v343[7];
              while (v344)
              {
                v345 = v344[3];
                v344 = *(double **)v344;
                if (*(_BYTE *)(*(_QWORD *)&v345 + 528))
                {
                  v686.f64[0] = v345;
                  if (!v697.__vftable)
                    sub_20E86D37C();
                  (*((void (**)(std::__shared_count_vtbl *, float64x2_t *))v697.~__shared_count + 6))(v697.__vftable, &v686);
                }
              }
            }
            v341 += 3;
          }
          while (v341 != (uint64_t *)v342);
        }
        else
        {
          do
          {
            v346 = sub_20E9DF85C(v339, v341);
            if (v346)
            {
              v347 = (_QWORD *)v346[7];
              while (v347)
              {
                v348 = v347;
                v349 = v347[3];
                v351 = *(_QWORD *)(v349 + 24);
                v350 = *(_QWORD *)(v349 + 32);
                v678.i64[0] = v351;
                v678.i64[1] = v350;
                v347 = (_QWORD *)*v347;
                if (*(_BYTE *)(v349 + 528))
                {
                  v352 = v689.i64[0];
                  if (v689.i64[1] != v689.i64[0])
                  {
                    v353 = (v689.i64[1] - v689.i64[0]) >> 4;
                    do
                    {
                      v354 = v353 >> 1;
                      v355 = (unint64_t *)(v352 + 16 * (v353 >> 1));
                      if (*v355 < v351 || *v355 == v351 && *(_DWORD *)(v352 + 16 * v354 + 8) < v350)
                      {
                        v352 = (uint64_t)(v355 + 2);
                        v354 = v353 + ~v354;
                      }
                      v353 = v354;
                    }
                    while (v354);
                  }
                  if (v352 == v689.i64[1] || *(_QWORD *)v352 != v351 || *(_DWORD *)(v352 + 8) != (_DWORD)v350)
                  {
                    sub_20F0527A0((char **)&v689, (char *)v352, &v678);
                    v686.f64[0] = (float64_t)v348[3];
                    if (!v697.__vftable)
                      sub_20E86D37C();
                    (*((void (**)(std::__shared_count_vtbl *, float64x2_t *))v697.~__shared_count + 6))(v697.__vftable, &v686);
                  }
                }
              }
            }
            v341 += 3;
          }
          while (v341 != (uint64_t *)v342);
        }
      }
      if (v689.i64[0])
      {
        v689.i64[1] = v689.i64[0];
        operator delete((void *)v689.i64[0]);
      }
    }
  }
  if (v682.i64[0])
  {
    v682.i64[1] = v682.i64[0];
    operator delete((void *)v682.i64[0]);
  }
  v313 = a1;
LABEL_507:
  v356 = v697.__vftable;
  if (v697.__vftable == (std::__shared_count_vtbl *)object)
  {
    v357 = 4;
    v356 = (std::__shared_count_vtbl *)object;
LABEL_511:
    (*((void (**)(void))v356->~__shared_count + v357))();
  }
  else if (v697.__vftable)
  {
    v357 = 5;
    goto LABEL_511;
  }
  v358 = v674;
  v678 = v674;
  if (!sub_20F29632C(*v313, (void *)v674.i64[0], (void *)v674.i64[1]))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viodatabase.hpp", 449, (uint64_t)"ret", 3, (uint64_t)"Fail to remove state, this should not happen!", 45, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    return 1;
  }
  v359 = a1;
  v360 = a1[10];
  v361 = a1[11];
  if (v361 != v360)
  {
    v362 = 0x80BFA02FE80BFA03 * (((char *)v361 - (char *)v360) >> 4);
    do
    {
      v363 = v362 >> 1;
      v364 = &v360[114 * (v362 >> 1)];
      if (v364->__vftable < (std::__shared_weak_count_vtbl *)v358.i64[0]
        || v364->__vftable == (std::__shared_weak_count_vtbl *)v358.i64[0]
        && LODWORD(v364->__shared_owners_) < v358.i32[2])
      {
        v360 = v364 + 114;
        v363 = v362 + ~v363;
      }
      v362 = v363;
    }
    while (v363);
  }
  if (v360 == v361
    || v360->__vftable != (std::__shared_weak_count_vtbl *)v358.i64[0]
    || LODWORD(v360->__shared_owners_) != v358.i32[2])
  {
    v360 = a1[11];
  }
  if (v361 != v360)
  {
    if (&v360[114] != v361)
    {
      v365 = v360->__shared_weak_owners_;
      if (v365 == v360[114].__shared_weak_owners_)
      {
        p_shared_weak_owners = &v360[114].__shared_weak_owners_;
        v367 = (*a1)[2].__vftable;
        if (v360->__vftable == (std::__shared_weak_count_vtbl *)v367->__on_zero_shared_weak
          && LODWORD(v360->__shared_owners_) == LODWORD(v367[1].~__shared_weak_count))
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viodatabase.hpp", 307, (uint64_t)"preint_iter->first != this->state_set()->begin()->first", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v365 = *p_shared_weak_owners;
        }
        if ((v360[1].__shared_owners_ != v365 || LODWORD(v360[1].__shared_weak_owners_) != LODWORD(v360[115].__vftable))
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viodatabase.hpp", 310, (uint64_t)"preint_iter->second.state_id1 == next_preint_iter->second.state_id0", 67, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        sub_20F2965C4((uint64_t)&v360[2], (uint64_t)&v360[116], (uint64_t)object);
        v368 = v698;
        v360[116].__shared_weak_owners_ = *(_QWORD *)&object[16];
        v360[116].std::__shared_count = *(std::__shared_count *)object;
        v360[117].__shared_weak_owners_ = (uint64_t)v368;
        v369 = v710;
        v360[122].__vftable = v705;
        v360[117].std::__shared_count = v697;
        v370 = v700;
        v360[118].std::__shared_count = v699;
        *(_OWORD *)&v360[118].__shared_weak_owners_ = v370;
        v371 = v703;
        *(_OWORD *)&v360[121].__shared_owners_ = v704;
        *(_OWORD *)&v360[120].__shared_weak_owners_ = v371;
        v372 = v701;
        v360[120].std::__shared_count = v702;
        *(_OWORD *)&v360[119].__shared_owners_ = v372;
        *(_OWORD *)&v360[122].__shared_owners_ = v706;
        v373 = v707;
        v374 = v708;
        v375 = v709;
        v360[125].__vftable = v369;
        *(_OWORD *)&v360[124].__shared_owners_ = v375;
        *(_OWORD *)&v360[123].__shared_weak_owners_ = v374;
        v360[123].std::__shared_count = v373;
        v376 = v712;
        *(_OWORD *)&v360[125].__shared_owners_ = v711;
        v377 = v713;
        v378 = v714;
        v379 = v720;
        v360[128].__vftable = v715;
        *(_OWORD *)&v360[127].__shared_owners_ = v378;
        *(_OWORD *)&v360[126].__shared_weak_owners_ = v377;
        v360[126].std::__shared_count = v376;
        v380 = v716;
        v381 = v717;
        v382 = v718;
        v383 = v719;
        v360[131].__vftable = v379;
        *(_OWORD *)&v360[129].__shared_weak_owners_ = v382;
        *(_OWORD *)&v360[130].__shared_owners_ = v383;
        *(_OWORD *)&v360[128].__shared_owners_ = v380;
        v360[129].std::__shared_count = v381;
        v384 = v722;
        *(_OWORD *)&v360[131].__shared_owners_ = v721;
        v385 = v723;
        v386 = v724;
        v387 = v730;
        v360[134].__vftable = v725;
        *(_OWORD *)&v360[133].__shared_owners_ = v386;
        *(_OWORD *)&v360[132].__shared_weak_owners_ = v385;
        v360[132].std::__shared_count = v384;
        v388 = v726;
        v389 = v727;
        v390 = v728;
        v391 = v729;
        v360[137].__vftable = v387;
        *(_OWORD *)&v360[135].__shared_weak_owners_ = v390;
        *(_OWORD *)&v360[136].__shared_owners_ = v391;
        *(_OWORD *)&v360[134].__shared_owners_ = v388;
        v360[135].std::__shared_count = v389;
        v392 = v732;
        *(_OWORD *)&v360[137].__shared_owners_ = v731;
        v393 = v733;
        v394 = v734;
        v360[140].__vftable = v735;
        *(_OWORD *)&v360[139].__shared_owners_ = v394;
        *(_OWORD *)&v360[138].__shared_weak_owners_ = v393;
        v395 = v739;
        *(_OWORD *)&v360[141].__shared_weak_owners_ = v738;
        *(_OWORD *)&v360[142].__shared_owners_ = v395;
        v396 = v736;
        v397 = v737;
        v360[143].__vftable = v740;
        *(_OWORD *)&v360[140].__shared_owners_ = v396;
        v360[141].std::__shared_count = v397;
        v360[138].std::__shared_count = v392;
        memcpy(&v360[143].__shared_owners_, v741, 0x288uLL);
        *(_OWORD *)&v360[170].__shared_owners_ = v742;
        v360[171].__vftable = v743;
        *(_OWORD *)&v360[171].__shared_owners_ = v744;
        v360[172].__vftable = v745;
        memcpy(&v360[172].__shared_owners_, v746, 0x288uLL);
        memcpy(&v360[199].__shared_owners_, v747, 0x288uLL);
        LODWORD(v360[115].__vftable) = v360[1].__vftable;
        *p_shared_weak_owners = v360->__shared_weak_owners_;
        v361 = a1[11];
      }
    }
    if (&v360[114] != v361)
    {
      do
      {
        v398 = v360 + 114;
        v360->__vftable = v360[114].__vftable;
        LODWORD(v360->__shared_owners_) = v360[114].__shared_owners_;
        *(_OWORD *)&v360->__shared_weak_owners_ = *(_OWORD *)&v360[114].__shared_weak_owners_;
        *(std::__shared_count *)((char *)&v360[1].std::__shared_count + 4) = *(std::__shared_count *)((char *)&v360[115].std::__shared_count + 4);
        v360[2].std::__shared_count = v360[116].std::__shared_count;
        v360[2].__shared_weak_owners_ = v360[116].__shared_weak_owners_;
        v360[3].__shared_weak_owners_ = v360[117].__shared_weak_owners_;
        v360[3].std::__shared_count = v360[117].std::__shared_count;
        v399 = *(_OWORD *)&v360[118].__shared_weak_owners_;
        v360[4].std::__shared_count = v360[118].std::__shared_count;
        *(_OWORD *)&v360[4].__shared_weak_owners_ = v399;
        v400 = *(_OWORD *)&v360[119].__shared_owners_;
        v360[8].__vftable = v360[122].__vftable;
        v401 = *(_OWORD *)&v360[121].__shared_owners_;
        *(_OWORD *)&v360[6].__shared_weak_owners_ = *(_OWORD *)&v360[120].__shared_weak_owners_;
        *(_OWORD *)&v360[7].__shared_owners_ = v401;
        v402 = v360[120].std::__shared_count;
        *(_OWORD *)&v360[5].__shared_owners_ = v400;
        v360[6].std::__shared_count = v402;
        v403 = *(_OWORD *)&v360[122].__shared_owners_;
        v360[9].std::__shared_count = v360[123].std::__shared_count;
        v404 = *(_OWORD *)&v360[124].__shared_owners_;
        *(_OWORD *)&v360[9].__shared_weak_owners_ = *(_OWORD *)&v360[123].__shared_weak_owners_;
        *(_OWORD *)&v360[10].__shared_owners_ = v404;
        v360[11].__vftable = v360[125].__vftable;
        *(_OWORD *)&v360[8].__shared_owners_ = v403;
        v405 = *(_OWORD *)&v360[125].__shared_owners_;
        v406 = v360[126].std::__shared_count;
        v407 = *(_OWORD *)&v360[126].__shared_weak_owners_;
        v408 = *(_OWORD *)&v360[127].__shared_owners_;
        v360[14].__vftable = v360[128].__vftable;
        *(_OWORD *)&v360[12].__shared_weak_owners_ = v407;
        *(_OWORD *)&v360[13].__shared_owners_ = v408;
        *(_OWORD *)&v360[11].__shared_owners_ = v405;
        v360[12].std::__shared_count = v406;
        v409 = *(_OWORD *)&v360[129].__shared_weak_owners_;
        v410 = *(_OWORD *)&v360[130].__shared_owners_;
        v360[17].__vftable = v360[131].__vftable;
        v412 = *(_OWORD *)&v360[128].__shared_owners_;
        v411 = v360[129].std::__shared_count;
        *(_OWORD *)&v360[15].__shared_weak_owners_ = v409;
        *(_OWORD *)&v360[16].__shared_owners_ = v410;
        *(_OWORD *)&v360[14].__shared_owners_ = v412;
        v360[15].std::__shared_count = v411;
        v413 = *(_OWORD *)&v360[131].__shared_owners_;
        v414 = v360[132].std::__shared_count;
        v415 = *(_OWORD *)&v360[132].__shared_weak_owners_;
        v416 = *(_OWORD *)&v360[133].__shared_owners_;
        v360[20].__vftable = v360[134].__vftable;
        *(_OWORD *)&v360[18].__shared_weak_owners_ = v415;
        *(_OWORD *)&v360[19].__shared_owners_ = v416;
        *(_OWORD *)&v360[17].__shared_owners_ = v413;
        v360[18].std::__shared_count = v414;
        v417 = *(_OWORD *)&v360[135].__shared_weak_owners_;
        v418 = *(_OWORD *)&v360[136].__shared_owners_;
        v360[23].__vftable = v360[137].__vftable;
        v420 = *(_OWORD *)&v360[134].__shared_owners_;
        v419 = v360[135].std::__shared_count;
        *(_OWORD *)&v360[21].__shared_weak_owners_ = v417;
        *(_OWORD *)&v360[22].__shared_owners_ = v418;
        *(_OWORD *)&v360[20].__shared_owners_ = v420;
        v360[21].std::__shared_count = v419;
        v421 = *(_OWORD *)&v360[137].__shared_owners_;
        v422 = v360[138].std::__shared_count;
        v423 = *(_OWORD *)&v360[138].__shared_weak_owners_;
        v424 = *(_OWORD *)&v360[139].__shared_owners_;
        v360[26].__vftable = v360[140].__vftable;
        *(_OWORD *)&v360[24].__shared_weak_owners_ = v423;
        *(_OWORD *)&v360[25].__shared_owners_ = v424;
        *(_OWORD *)&v360[23].__shared_owners_ = v421;
        v360[24].std::__shared_count = v422;
        v425 = *(_OWORD *)&v360[141].__shared_weak_owners_;
        v426 = *(_OWORD *)&v360[142].__shared_owners_;
        v360[29].__vftable = v360[143].__vftable;
        v428 = *(_OWORD *)&v360[140].__shared_owners_;
        v427 = v360[141].std::__shared_count;
        *(_OWORD *)&v360[27].__shared_weak_owners_ = v425;
        *(_OWORD *)&v360[28].__shared_owners_ = v426;
        *(_OWORD *)&v360[26].__shared_owners_ = v428;
        v360[27].std::__shared_count = v427;
        memcpy(&v360[29].__shared_owners_, &v360[143].__shared_owners_, 0x288uLL);
        v360[57].__vftable = v360[171].__vftable;
        *(_OWORD *)&v360[56].__shared_owners_ = *(_OWORD *)&v360[170].__shared_owners_;
        *(_OWORD *)&v360[57].__shared_owners_ = *(_OWORD *)&v360[171].__shared_owners_;
        v360[58].__vftable = v360[172].__vftable;
        memcpy(&v360[58].__shared_owners_, &v360[172].__shared_owners_, 0x288uLL);
        memcpy(&v360[85].__shared_owners_, &v360[199].__shared_owners_, 0x288uLL);
        v360[113].__vftable = v360[227].__vftable;
        *(_OWORD *)&v360[112].__shared_owners_ = *(_OWORD *)&v360[226].__shared_owners_;
        *(_OWORD *)&v360[113].__shared_owners_ = *(_OWORD *)&v360[227].__shared_owners_;
        v429 = v360 + 228;
        v360 += 114;
      }
      while (v429 != v361);
      v360 = v398;
    }
    v359 = a1;
    a1[11] = v360;
  }
  v430 = (char **)v359[2];
  if (!v430)
    goto LABEL_717;
  v431 = (_QWORD *)(*v359)[12].__shared_owners_;
  v432 = (uint64_t)&(*v359)[12].__shared_weak_owners_;
  if (v431 == (_QWORD *)v432)
  {
LABEL_573:
    v447 = 1;
    goto LABEL_575;
  }
  v433 = v359[5];
  v434 = v359[6];
  while (2)
  {
    v435 = *((_DWORD *)v431 + 8);
    v436 = v359[5];
    if (v434 != v433)
    {
      v437 = ((char *)v434 - (char *)v433) >> 4;
      while (1)
      {
        v438 = v437 >> 1;
        v439 = (std::__shared_weak_count *)((char *)v436 + 16 * (v437 >> 1));
        v440 = v439->__vftable;
        on_zero_shared = v439->__on_zero_shared;
        v442 = on_zero_shared >= v435;
        if (on_zero_shared != v435)
          goto LABEL_554;
        if ((char *)v440->~__shared_count >= (char *)v678.i64[0])
          break;
LABEL_548:
        v436 = (std::__shared_weak_count *)&v439[1];
        v438 = v437 + ~v438;
LABEL_549:
        v437 = v438;
        if (!v438)
          goto LABEL_557;
      }
      if (v440->~__shared_count != (void (__cdecl *)(std::__shared_count *__hidden))v678.i64[0])
        goto LABEL_549;
      v442 = LODWORD(v440->~__shared_count_0) >= v678.i32[2];
LABEL_554:
      if (v442)
        goto LABEL_549;
      goto LABEL_548;
    }
LABEL_557:
    if (v436 == v434)
      goto LABEL_567;
    v443 = v436->__vftable;
    v444 = v359[6];
    if (LODWORD(v436->__on_zero_shared) == v435)
    {
      v444 = v359[6];
      if (v443->~__shared_weak_count == (void (__cdecl *)(std::__shared_weak_count *__hidden))v678.i64[0])
      {
        if (LODWORD(v443->~__shared_weak_count_0) == v678.i32[2])
          v444 = v436;
        else
          v444 = v359[6];
      }
    }
    if (v434 == v444 || !LOBYTE(v444->__vftable[18].__on_zero_shared))
    {
LABEL_567:
      v445 = (_QWORD *)v431[1];
      if (v445)
      {
        do
        {
          v446 = v445;
          v445 = (_QWORD *)*v445;
        }
        while (v445);
      }
      else
      {
        do
        {
          v446 = (_QWORD *)v431[2];
          _ZF = *v446 == (_QWORD)v431;
          v431 = v446;
        }
        while (!_ZF);
      }
      v431 = v446;
      if (v446 == (_QWORD *)v432)
        goto LABEL_573;
      continue;
    }
    break;
  }
  v447 = 2;
LABEL_575:
  v663 = v447;
  v689 = 0uLL;
  v690.i64[0] = 0;
  v449 = *v430;
  v448 = (unsigned __int8 *)v430[1];
  v665 = v430;
  v450 = **v430;
  v451 = v448;
  v452 = *v430;
  v453 = v450;
  if (**v430 <= -2)
  {
    v451 = (unsigned __int8 *)v430[1];
    v452 = *v430;
    do
    {
      v454 = (__clz(__rbit64(((*(_QWORD *)v452 >> 7) & ~*(_QWORD *)v452 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v452 += v454;
      v451 += 32 * v454;
    }
    while (*v452 < -1);
    v453 = *v452;
  }
  if (v453 != 255)
  {
LABEL_582:
    v455 = (std::__shared_weak_count *)*((_QWORD *)v451 + 3);
    v670 = (_QWORD *)*((_QWORD *)v451 + 2);
    if (v455)
    {
      v456 = (unint64_t *)&v455->__shared_owners_;
      do
        v457 = __ldxr(v456);
      while (__stxr(v457 + 1, v456));
    }
    v666 = v455;
    v458 = v689.i64[0];
    v689.i64[1] = v689.i64[0];
    v459 = (__int128 *)v670[67];
    v460 = (__int128 *)v670[68];
    if (v459 == v460)
      goto LABEL_698;
    v461 = *(double *)v690.i64;
    v462 = v689.i64[0];
    while (2)
    {
      if (*(_QWORD *)v459 == v678.i64[0] && *((_DWORD *)v459 + 2) == v678.i32[2])
      {
        if (v458 < *(_QWORD *)&v461)
        {
          v463 = *v459;
          *(_QWORD *)(v458 + 16) = *((_QWORD *)v459 + 2);
          *(_OWORD *)v458 = v463;
          v458 += 24;
        }
        else
        {
          v464 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v458 - v462) >> 3) + 1;
          if (v464 > 0xAAAAAAAAAAAAAAALL)
          {
            v689.i64[1] = v458;
            *(float64_t *)v690.i64 = v461;
            v689.i64[0] = v462;
            sub_20E867F44();
          }
          if (0x5555555555555556 * ((*(_QWORD *)&v461 - v462) >> 3) > v464)
            v464 = 0x5555555555555556 * ((*(_QWORD *)&v461 - v462) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)&v461 - v462) >> 3) >= 0x555555555555555)
            v465 = 0xAAAAAAAAAAAAAAALL;
          else
            v465 = v464;
          if (v465)
          {
            if (v465 > 0xAAAAAAAAAAAAAAALL)
            {
              v689.i64[1] = v458;
              *(float64_t *)v690.i64 = v461;
              v689.i64[0] = v462;
              sub_20E877A38();
            }
            v466 = (char *)operator new(24 * v465);
          }
          else
          {
            v466 = 0;
          }
          v467 = *v459;
          v468 = &v466[8 * ((uint64_t)(v458 - v462) >> 3)];
          *((_QWORD *)v468 + 2) = *((_QWORD *)v459 + 2);
          *(_OWORD *)v468 = v467;
          if (v458 == v462)
          {
            v471 = (void *)v458;
            v462 = (uint64_t)&v466[8 * ((uint64_t)(v458 - v462) >> 3)];
            *(_QWORD *)&v461 = &v466[24 * v465];
            v458 = (unint64_t)(v468 + 24);
            if (v471)
              goto LABEL_606;
          }
          else
          {
            v469 = &v466[8 * ((uint64_t)(v458 - v462) >> 3)];
            do
            {
              v470 = *(_OWORD *)(v458 - 24);
              *((_DWORD *)v469 - 2) = *(_DWORD *)(v458 - 8);
              *(_OWORD *)(v469 - 24) = v470;
              v469 -= 24;
              v458 -= 24;
            }
            while (v458 != v462);
            v471 = (void *)v462;
            v462 = (uint64_t)v469;
            *(_QWORD *)&v461 = &v466[24 * v465];
            v458 = (unint64_t)(v468 + 24);
            if (v471)
            {
LABEL_606:
              v472 = v461;
              operator delete(v471);
              v461 = v472;
            }
          }
        }
      }
      v459 += 4;
      if (v459 != v460)
        continue;
      break;
    }
    v689.i64[1] = v458;
    *(float64_t *)v690.i64 = v461;
    v689.i64[0] = v462;
    if (v462 == v458)
      goto LABEL_698;
LABEL_611:
    v473 = v670[67];
    v474 = v670[68];
    v475 = *(_QWORD *)v462;
    v476 = *(_DWORD *)(v462 + 8);
    v477 = *(_DWORD *)(v462 + 16);
    if (v474 == v473)
    {
LABEL_622:
      if (v473 == v474 || *(_DWORD *)(v473 + 16) != v477 || *(_QWORD *)v473 != v475 || *(_DWORD *)(v473 + 8) != v476)
        goto LABEL_671;
      v483 = (_QWORD *)v670[2];
      if (!v483)
        goto LABEL_689;
      v484 = (int8x8_t)v483[1];
      if (!*(_QWORD *)&v484)
        goto LABEL_671;
      v485 = v476 ^ __ROR4__(v477, 13);
      v486 = (uint8x8_t)vcnt_s8(v484);
      v486.i16[0] = vaddlv_u8(v486);
      if (v486.u32[0] > 1uLL)
      {
        v487 = v485;
        if (*(_QWORD *)&v484 <= v485)
          v487 = v485 % *(_QWORD *)&v484;
      }
      else
      {
        v487 = (v484.i32[0] - 1) & v485;
      }
      v488 = *(int8x8_t ***)(*v483 + 8 * v487);
      if (!v488)
        goto LABEL_671;
      v489 = *v488;
      if (!*v488)
        goto LABEL_671;
      v490 = *(unsigned int *)(v473 + 28);
      if (v486.u32[0] < 2uLL)
      {
        v491 = *(_QWORD *)&v484 - 1;
        while (1)
        {
          v493 = v489[1];
          if (*(_QWORD *)&v493 == v485)
          {
            if (v489[4].i32[0] == v477 && *(_QWORD *)&v489[2] == v475 && v489[3].i32[0] == v476)
              goto LABEL_651;
          }
          else if ((*(_QWORD *)&v493 & v491) != v487)
          {
            goto LABEL_671;
          }
          v489 = (int8x8_t *)*v489;
          if (!v489)
            goto LABEL_671;
        }
      }
      while (1)
      {
        v492 = v489[1];
        if (*(_QWORD *)&v492 == v485)
        {
          if (v489[4].i32[0] == v477 && *(_QWORD *)&v489[2] == v475 && v489[3].i32[0] == v476)
          {
LABEL_651:
            v494 = v489[6];
            if (v494)
            {
              v495 = (uint8x8_t)vcnt_s8(v494);
              v495.i16[0] = vaddlv_u8(v495);
              if (v495.u32[0] > 1uLL)
              {
                v496 = *(unsigned int *)(v473 + 28);
                if (*(_QWORD *)&v494 <= v490)
                  v496 = v490 % *(_QWORD *)&v494;
              }
              else
              {
                v496 = (v494.i32[0] - 1) & v490;
              }
              v497 = v489 + 5;
              v498 = *(uint64_t ***)(*(_QWORD *)&v489[5] + 8 * v496);
              if (v498)
              {
                v499 = *v498;
                if (*v498)
                {
                  if (v495.u32[0] < 2uLL)
                  {
                    v500 = *(_QWORD *)&v494 - 1;
                    while (1)
                    {
                      v502 = v499[1];
                      if (v502 == v490)
                      {
                        if (*((_DWORD *)v499 + 4) == (_DWORD)v490)
                          goto LABEL_680;
                      }
                      else if ((v502 & v500) != v496)
                      {
                        goto LABEL_671;
                      }
                      v499 = (uint64_t *)*v499;
                      if (!v499)
                        goto LABEL_671;
                    }
                  }
                  do
                  {
                    v501 = v499[1];
                    if (v501 == v490)
                    {
                      if (*((_DWORD *)v499 + 4) == (_DWORD)v490)
                      {
LABEL_680:
                        sub_20E8D2CE8(v497, v499, (uint64_t)object);
                        v507 = *(_QWORD **)object;
                        *(_QWORD *)object = 0;
                        if (v507)
                        {
                          if (object[16])
                          {
                            v508 = (std::__shared_weak_count *)v507[4];
                            if (v508)
                            {
                              v509 = (unint64_t *)&v508->__shared_owners_;
                              do
                                v510 = __ldaxr(v509);
                              while (__stlxr(v510 - 1, v509));
                              if (!v510)
                              {
                                v661 = v508;
                                ((void (*)(std::__shared_weak_count *))v508->__on_zero_shared)(v508);
                                std::__shared_weak_count::__release_weak(v661);
                              }
                            }
                          }
                          operator delete(v507);
                        }
                        v474 = v670[68];
LABEL_689:
                        if (v473 + 64 != v474)
                        {
                          do
                          {
                            v511 = v473 + 64;
                            *(_OWORD *)v473 = *(_OWORD *)(v473 + 64);
                            *(_DWORD *)(v473 + 16) = *(_DWORD *)(v473 + 80);
                            v512 = *(_QWORD *)(v473 + 96);
                            *(_QWORD *)(v473 + 24) = *(_QWORD *)(v473 + 88);
                            *(_QWORD *)(v473 + 32) = v512;
                            *(_OWORD *)(v473 + 40) = *(_OWORD *)(v473 + 104);
                            v513 = v473 + 128;
                            *(_DWORD *)(v473 + 56) = *(_DWORD *)(v473 + 120);
                            v473 += 64;
                          }
                          while (v513 != v474);
                          v473 = v511;
                        }
                        v670[68] = v473;
                        v462 += 24;
                        if (v462 != v458)
                          goto LABEL_611;
                        if (!v666)
                          goto LABEL_702;
LABEL_698:
                        v514 = (unint64_t *)&v666->__shared_owners_;
                        do
                          v515 = __ldaxr(v514);
                        while (__stlxr(v515 - 1, v514));
                        if (!v515)
                        {
                          ((void (*)(std::__shared_weak_count *))v666->__on_zero_shared)(v666);
                          std::__shared_weak_count::__release_weak(v666);
                          v519 = *++v452;
                          LOBYTE(v516) = v519;
                          v451 += 32;
                          if (v519 <= -2)
                            goto LABEL_703;
                        }
                        else
                        {
LABEL_702:
                          v517 = *++v452;
                          LOBYTE(v516) = v517;
                          v451 += 32;
                          if (v517 <= -2)
                          {
                            do
                            {
LABEL_703:
                              v518 = (__clz(__rbit64(((*(_QWORD *)v452 >> 7) & ~*(_QWORD *)v452 | 0xFEFEFEFEFEFEFELL) + 1))
                                    + 7) >> 3;
                              v452 += v518;
                              v451 += 32 * v518;
                              v516 = *v452;
                            }
                            while (v516 < -1);
                          }
                        }
                        if (v516 == 255)
                        {
                          v449 = *v665;
                          v448 = (unsigned __int8 *)v665[1];
                          v450 = **v665;
                          goto LABEL_708;
                        }
                        goto LABEL_582;
                      }
                    }
                    else
                    {
                      if (v501 >= *(_QWORD *)&v494)
                        v501 %= *(_QWORD *)&v494;
                      if (v501 != v496)
                        break;
                    }
                    v499 = (uint64_t *)*v499;
                  }
                  while (v499);
                }
              }
            }
LABEL_671:
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 66, (uint64_t)"ret", 3, (uint64_t)"Fail to remove node. this is not possible", 41, (void (*)(void **))sub_21023DDB0);
            v503 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v503 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v504 = qword_254A6DE40;
              for (ii = qword_254A6DE48; v504 != ii; v504 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v504)(*(_QWORD *)(v504 + 8), "ret", 3, "Fail to remove node. this is not possible", 41);
            }
            v506 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v506 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              abort();
            qword_254A6DE58(unk_254A6DE60, "ret", 3, "Fail to remove node. this is not possible", 41);
            v462 += 24;
            if (v462 == v458)
              goto LABEL_698;
            goto LABEL_611;
          }
        }
        else
        {
          if (*(_QWORD *)&v492 >= *(_QWORD *)&v484)
            *(_QWORD *)&v492 %= *(_QWORD *)&v484;
          if (*(_QWORD *)&v492 != v487)
            goto LABEL_671;
        }
        v489 = (int8x8_t *)*v489;
        if (!v489)
          goto LABEL_671;
      }
    }
    v478 = (v474 - v473) >> 6;
    while (2)
    {
      v479 = v478 >> 1;
      v480 = v473 + (v478 >> 1 << 6);
      v481 = *(_DWORD *)(v480 + 16);
      v482 = v481 >= v477;
      if (v481 == v477)
      {
        if (*(_QWORD *)v480 >= v475)
        {
          if (*(_QWORD *)v480 == v475)
          {
            v482 = *(_DWORD *)(v480 + 8) >= v476;
            goto LABEL_619;
          }
LABEL_614:
          v478 = v479;
          if (!v479)
            goto LABEL_622;
          continue;
        }
      }
      else
      {
LABEL_619:
        if (v482)
          goto LABEL_614;
      }
      break;
    }
    v473 = v480 + 64;
    v479 = v478 + ~v479;
    goto LABEL_614;
  }
LABEL_708:
  if ((char)v450 > -2)
  {
    v522 = (uint64_t *)v665;
    v520 = v663;
  }
  else
  {
    v520 = v663;
    do
    {
      v521 = (__clz(__rbit64(((*(_QWORD *)v449 >> 7) & ~*(_QWORD *)v449 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v449 += v521;
      v448 += 32 * v521;
    }
    while (*v449 < -1);
    v450 = *v449;
    v522 = (uint64_t *)v665;
  }
  if (v450 != 255)
  {
    do
    {
      if (v520 <= (unint64_t)((uint64_t)(*(_QWORD *)(*((_QWORD *)v448 + 2) + 544)
                                              - *(_QWORD *)(*((_QWORD *)v448 + 2) + 536)) >> 6))
      {
        v645 = v449 + 1;
        v643 = v448 + 32;
        if (v449[1] > -2)
        {
          if (v449[1] == 255)
            break;
        }
        else
        {
          do
          {
            v656 = (__clz(__rbit64(((*(_QWORD *)v645 >> 7) & ~*(_QWORD *)v645 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v645 += v656;
            v643 += 32 * v656;
          }
          while (*v645 < -1);
          if (*v645 == 255)
            break;
        }
      }
      else
      {
        v641 = v449 + 1;
        v642 = v449[1];
        v643 = v448 + 32;
        if (v642 <= -2)
        {
          do
          {
            v644 = (__clz(__rbit64(((*(_QWORD *)v641 >> 7) & ~*(_QWORD *)v641 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v641 += v644;
            v643 += 32 * v644;
            v642 = *v641;
          }
          while (v642 < -1);
        }
        if (v642 == 255)
          v645 = 0;
        else
          v645 = v641;
        v646 = (std::__shared_weak_count *)*((_QWORD *)v448 + 3);
        if (v646)
        {
          v647 = (unint64_t *)&v646->__shared_owners_;
          do
            v648 = __ldaxr(v647);
          while (__stlxr(v648 - 1, v647));
          if (!v648)
          {
            ((void (*)(std::__shared_weak_count *))v646->__on_zero_shared)(v646);
            std::__shared_weak_count::__release_weak(v646);
          }
        }
        v649 = v522[3];
        --v522[2];
        v650 = *v522;
        v651 = &v449[-*v522];
        v652 = *(_QWORD *)(*v522 + ((unint64_t)(v651 - 8) & v649));
        v653 = *(_QWORD *)v449 & (~*(_QWORD *)v449 << 6) & 0x8080808080808080;
        v654 = v652 & (~v652 << 6) & 0x8080808080808080;
        if (v654)
          v655 = v653 == 0;
        else
          v655 = 1;
        if (v655)
        {
          v639 = 0;
          v640 = -2;
        }
        else
        {
          v638 = (__clz(v654) >> 3) + (__clz(__rbit64(v653)) >> 3);
          _CF = v638 >= 8;
          v639 = v638 < 8;
          if (_CF)
            v640 = -2;
          else
            v640 = 0x80;
        }
        v651[v650] = v640;
        *(_BYTE *)(v650 + ((unint64_t)(v651 - 7) & v649) + (v649 & 7)) = v640;
        v522[4] += v639;
      }
      v449 = v645;
      v448 = v643;
    }
    while (v645);
  }
  if (v689.i64[0])
    operator delete((void *)v689.i64[0]);
  sub_20F29AEF0((uint64_t)&v678, v520, (uint64_t *)a1[3]);
  sub_20F29B92C((uint64_t)&v678, 1u, (uint64_t *)a1[4]);
  v359 = a1;
LABEL_717:
  v523 = (uint64_t *)(*v359)[12].__shared_owners_;
  if (v523 != &(*v359)[12].__shared_weak_owners_)
  {
    while (1)
    {
      v671 = v523;
      v524 = *((_DWORD *)v523 + 8);
      v682 = v678;
      LODWORD(v683) = v524;
      v525 = v359[1];
      v526 = &v525[1].__vftable;
      v527 = sub_20E9DF85C(&v525[1].__vftable, v682.i64);
      if (!v527)
        goto LABEL_889;
      v689 = 0uLL;
      v690.i64[0] = 0;
      v689.i64[0] = (uint64_t)operator new(0x3E80uLL);
      v689.i64[1] = v689.i64[0];
      v690.i64[0] = v689.i64[0] + 16000;
      v528 = (_QWORD *)v527[7];
      if (v528)
        break;
LABEL_722:
      v529 = sub_20E9DF85C(v526, v682.i64);
      v530 = v529;
      if (v529)
      {
        v531 = (int8x8_t)v525[1].__shared_owners_;
        v532 = v529[1];
        v533 = (uint8x8_t)vcnt_s8(v531);
        v533.i16[0] = vaddlv_u8(v533);
        if (v533.u32[0] > 1uLL)
        {
          if (v532 >= *(_QWORD *)&v531)
            v532 %= *(_QWORD *)&v531;
        }
        else
        {
          v532 &= *(_QWORD *)&v531 - 1;
        }
        v560 = *v529;
        v561 = *(uint64_t **)(*v526 + 8 * v532);
        do
        {
          v562 = v561;
          v561 = (uint64_t *)*v561;
        }
        while (v561 != v529);
        if (v562 == &v525[1].__shared_weak_owners_)
          goto LABEL_780;
        v563 = v562[1];
        if (v533.u32[0] > 1uLL)
        {
          if (v563 >= *(_QWORD *)&v531)
            v563 %= *(_QWORD *)&v531;
        }
        else
        {
          v563 &= *(_QWORD *)&v531 - 1;
        }
        if (v563 != v532)
        {
LABEL_780:
          if (v560)
          {
            v564 = *(_QWORD *)(v560 + 8);
            if (v533.u32[0] > 1uLL)
            {
              v565 = *(_QWORD *)(v560 + 8);
              if (v564 >= *(_QWORD *)&v531)
                v565 = v564 % *(_QWORD *)&v531;
            }
            else
            {
              v565 = v564 & (*(_QWORD *)&v531 - 1);
            }
            if (v565 == v532)
              goto LABEL_784;
          }
          *(_QWORD *)(*v526 + 8 * v532) = 0;
          v560 = *v529;
        }
        if (!v560)
        {
LABEL_790:
          *v562 = v560;
          *v529 = 0;
          --v525[2].__vftable;
          v566 = (_QWORD *)v529[7];
          while (v566)
          {
            v572 = v566;
            v566 = (_QWORD *)*v566;
            v573 = (std::__shared_weak_count *)v572[4];
            if (v573)
            {
              v574 = (unint64_t *)&v573->__shared_owners_;
              do
                v575 = __ldaxr(v574);
              while (__stlxr(v575 - 1, v574));
              if (!v575)
              {
                ((void (*)(std::__shared_weak_count *))v573->__on_zero_shared)(v573);
                std::__shared_weak_count::__release_weak(v573);
              }
            }
            operator delete(v572);
          }
          v567 = (void *)v530[5];
          v530[5] = 0;
          if (v567)
            operator delete(v567);
          operator delete(v530);
          goto LABEL_794;
        }
        v564 = *(_QWORD *)(v560 + 8);
LABEL_784:
        if (v533.u32[0] > 1uLL)
        {
          if (v564 >= *(_QWORD *)&v531)
            v564 %= *(_QWORD *)&v531;
        }
        else
        {
          v564 &= *(_QWORD *)&v531 - 1;
        }
        if (v564 != v532)
        {
          *(_QWORD *)(*v526 + 8 * v564) = v562;
          v560 = *v529;
        }
        goto LABEL_790;
      }
LABEL_794:
      v568 = v689;
      if (v689.i64[0] == v689.i64[1])
        goto LABEL_887;
      v570 = &v525->__shared_owners_;
      v569 = (uint64_t *)v525->__shared_owners_;
      if (!v569)
        goto LABEL_887;
      v571 = v689.i64[0];
LABEL_804:
      v576 = *(_QWORD *)v571;
      v577 = *(_DWORD *)(v571 + 8);
      v578 = &v525->__shared_owners_;
      do
      {
        v579 = v569[4];
        if (v579 < v576)
        {
          ++v569;
        }
        else if (v579 == v576)
        {
          if (*((_DWORD *)v569 + 10) < v577)
            ++v569;
          else
            v578 = v569;
        }
        else
        {
          v578 = v569;
        }
        v569 = (uint64_t *)*v569;
      }
      while (v569);
      if (v578 == v570)
        goto LABEL_886;
      v580 = v578[4];
      if (v576 < v580 || v576 == v580 && v577 < *((_DWORD *)v578 + 10))
        goto LABEL_886;
      v581 = v578[6];
      v582 = *(uint64_t **)(v581 + 536);
      v583 = *(uint64_t **)(v581 + 544);
      if (v582 == v583 || !v525[1].__shared_owners_)
        goto LABEL_819;
      while (2)
      {
        v591 = (int8x8_t)v525[1].__shared_owners_;
        if (!*(_QWORD *)&v591)
          goto LABEL_833;
        v592 = *((_DWORD *)v582 + 4);
        v593 = *((_DWORD *)v582 + 2);
        v594 = v593 ^ __ROR4__(v592, 13);
        v595 = (uint8x8_t)vcnt_s8(v591);
        v595.i16[0] = vaddlv_u8(v595);
        if (v595.u32[0] > 1uLL)
        {
          v596 = v594;
          if (*(_QWORD *)&v591 <= v594)
            v596 = v594 % *(_QWORD *)&v591;
        }
        else
        {
          v596 = (v591.i32[0] - 1) & v594;
        }
        v597 = *(int8x8_t ***)(*v526 + 8 * v596);
        if (!v597)
          goto LABEL_833;
        v598 = *v597;
        if (!*v597)
          goto LABEL_833;
        v599 = *(unsigned int *)(v582[3] + 4);
        v600 = *v582;
        if (v595.u32[0] < 2uLL)
        {
          v601 = *(_QWORD *)&v591 - 1;
          while (1)
          {
            v603 = v598[1];
            if (*(_QWORD *)&v603 == v594)
            {
              if (v598[4].i32[0] == v592 && *(_QWORD *)&v598[2] == v600 && v598[3].i32[0] == v593)
                goto LABEL_858;
            }
            else if ((*(_QWORD *)&v603 & v601) != v596)
            {
              goto LABEL_833;
            }
            v598 = (int8x8_t *)*v598;
            if (!v598)
              goto LABEL_833;
          }
        }
        while (1)
        {
          v602 = v598[1];
          if (*(_QWORD *)&v602 == v594)
            break;
          if (*(_QWORD *)&v602 >= *(_QWORD *)&v591)
            *(_QWORD *)&v602 %= *(_QWORD *)&v591;
          if (*(_QWORD *)&v602 != v596)
            goto LABEL_833;
LABEL_844:
          v598 = (int8x8_t *)*v598;
          if (!v598)
            goto LABEL_833;
        }
        if (v598[4].i32[0] != v592 || *(_QWORD *)&v598[2] != v600 || v598[3].i32[0] != v593)
          goto LABEL_844;
LABEL_858:
        v604 = v598[6];
        if (v604)
        {
          v605 = (uint8x8_t)vcnt_s8(v604);
          v605.i16[0] = vaddlv_u8(v605);
          if (v605.u32[0] > 1uLL)
          {
            v606 = *(unsigned int *)(v582[3] + 4);
            if (*(_QWORD *)&v604 <= v599)
              v606 = v599 % *(_QWORD *)&v604;
          }
          else
          {
            v606 = (v604.i32[0] - 1) & v599;
          }
          v607 = v598 + 5;
          v608 = *(uint64_t ***)(*(_QWORD *)&v598[5] + 8 * v606);
          if (v608)
          {
            v609 = *v608;
            if (*v608)
            {
              if (v605.u32[0] < 2uLL)
              {
                v610 = *(_QWORD *)&v604 - 1;
                while (1)
                {
                  v612 = v609[1];
                  if (v612 == v599)
                  {
                    if (*((_DWORD *)v609 + 4) == (_DWORD)v599)
                      goto LABEL_879;
                  }
                  else if ((v612 & v610) != v606)
                  {
                    goto LABEL_833;
                  }
                  v609 = (uint64_t *)*v609;
                  if (!v609)
                    goto LABEL_833;
                }
              }
              do
              {
                v611 = v609[1];
                if (v611 == v599)
                {
                  if (*((_DWORD *)v609 + 4) == (_DWORD)v599)
                  {
LABEL_879:
                    sub_20E8D2CE8(v607, v609, (uint64_t)object);
                    v613 = *(_QWORD **)object;
                    *(_QWORD *)object = 0;
                    if (v613)
                    {
                      if (object[16])
                      {
                        v614 = (std::__shared_weak_count *)v613[4];
                        if (v614)
                        {
                          v615 = (unint64_t *)&v614->__shared_owners_;
                          do
                            v616 = __ldaxr(v615);
                          while (__stlxr(v616 - 1, v615));
                          if (!v616)
                          {
                            v667 = v614;
                            ((void (*)(std::__shared_weak_count *))v614->__on_zero_shared)(v614);
                            std::__shared_weak_count::__release_weak(v667);
                          }
                        }
                      }
                      operator delete(v613);
                    }
                    break;
                  }
                }
                else
                {
                  if (v611 >= *(_QWORD *)&v604)
                    v611 %= *(_QWORD *)&v604;
                  if (v611 != v606)
                    break;
                }
                v609 = (uint64_t *)*v609;
              }
              while (v609);
            }
          }
        }
LABEL_833:
        v582 += 4;
        if (v582 != v583)
          continue;
        break;
      }
LABEL_819:
      v584 = (std::__shared_weak_count_vtbl *)v578[1];
      v585 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v578;
      if (v584)
      {
        do
        {
          v586 = v584;
          v584 = (std::__shared_weak_count_vtbl *)v584->~__shared_weak_count;
        }
        while (v584);
      }
      else
      {
        do
        {
          v586 = (std::__shared_weak_count_vtbl *)*((_QWORD *)v585 + 2);
          _ZF = v586->~__shared_weak_count == v585;
          v585 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v586;
        }
        while (!_ZF);
      }
      if ((uint64_t *)v525->__vftable == v578)
        v525->__vftable = v586;
      v587 = (uint64_t *)v525->__shared_owners_;
      --v525->__shared_weak_owners_;
      sub_20E8D2134(v587, v578);
      v588 = (std::__shared_weak_count *)v578[7];
      if (v588)
      {
        v589 = (unint64_t *)&v588->__shared_owners_;
        do
          v590 = __ldaxr(v589);
        while (__stlxr(v590 - 1, v589));
        if (!v590)
        {
          ((void (*)(std::__shared_weak_count *))v588->__on_zero_shared)(v588);
          std::__shared_weak_count::__release_weak(v588);
        }
      }
      operator delete(v578);
LABEL_886:
      while (1)
      {
        v571 += 16;
        if (v571 == v568.i64[1])
          break;
        v569 = (uint64_t *)*v570;
        if (*v570)
          goto LABEL_804;
      }
LABEL_887:
      if (v568.i64[0])
        operator delete((void *)v568.i64[0]);
LABEL_889:
      v359 = a1;
      v617 = a1[5];
      v618 = a1[6];
      if (v618 != v617)
      {
        v619 = ((char *)v618 - (char *)v617) >> 4;
        while (1)
        {
          v620 = v619 >> 1;
          v621 = (std::__shared_weak_count *)((char *)v617 + 16 * (v619 >> 1));
          v622 = v621->__vftable;
          v623 = v621->__on_zero_shared;
          v624 = v623 >= v683;
          if (v623 != (_DWORD)v683)
            goto LABEL_897;
          if ((char *)v622->~__shared_count >= (char *)v682.i64[0])
            break;
LABEL_891:
          v617 = (std::__shared_weak_count *)&v621[1];
          v620 = v619 + ~v620;
LABEL_892:
          v619 = v620;
          if (!v620)
            goto LABEL_900;
        }
        if (v622->~__shared_count != (void (__cdecl *)(std::__shared_count *__hidden))v682.i64[0])
          goto LABEL_892;
        v624 = LODWORD(v622->~__shared_count_0) >= v682.i32[2];
LABEL_897:
        if (v624)
          goto LABEL_892;
        goto LABEL_891;
      }
LABEL_900:
      if (v617 == v618)
      {
        v626 = a1[6];
      }
      else
      {
        v625 = v617->__vftable;
        v626 = a1[6];
        if (LODWORD(v617->__on_zero_shared) == (_DWORD)v683)
        {
          v626 = a1[6];
          if (v625->~__shared_weak_count == (void (__cdecl *)(std::__shared_weak_count *__hidden))v682.i64[0])
          {
            if (LODWORD(v625->~__shared_weak_count_0) == v682.i32[2])
              v626 = v617;
            else
              v626 = a1[6];
          }
        }
      }
      if (v618 != v626)
      {
        v627 = (std::__shared_weak_count *)&v626->__shared_weak_owners_;
        if (&v626->__shared_weak_owners_ != (uint64_t *)v618)
        {
          do
          {
            v628 = v627->std::__shared_count;
            v627->__vftable = 0;
            v627->__shared_owners_ = 0;
            v629 = (std::__shared_weak_count *)v626->__shared_owners_;
            v626->std::__shared_count = v628;
            if (v629)
            {
              v630 = (unint64_t *)&v629->__shared_owners_;
              do
                v631 = __ldaxr(v630);
              while (__stlxr(v631 - 1, v630));
              if (!v631)
              {
                ((void (*)(std::__shared_weak_count *))v629->__on_zero_shared)(v629);
                std::__shared_weak_count::__release_weak(v629);
              }
            }
            v627 = (std::__shared_weak_count *)((char *)v627 + 16);
            v626 = (std::__shared_weak_count *)((char *)v626 + 16);
          }
          while (v627 != v618);
          v618 = a1[6];
        }
        while (v618 != v626)
        {
          v632 = (std::__shared_weak_count *)v618[-1].__shared_weak_owners_;
          if (v632)
          {
            v633 = (unint64_t *)&v632->__shared_owners_;
            do
              v634 = __ldaxr(v633);
            while (__stlxr(v634 - 1, v633));
            if (!v634)
            {
              ((void (*)(std::__shared_weak_count *))v632->__on_zero_shared)(v632);
              std::__shared_weak_count::__release_weak(v632);
            }
          }
          v618 = (std::__shared_weak_count *)((char *)v618 - 16);
        }
        a1[6] = v626;
      }
      v635 = v671;
      v636 = (uint64_t *)v671[1];
      if (v636)
      {
        do
        {
          v637 = v636;
          v636 = (uint64_t *)*v636;
        }
        while (v636);
      }
      else
      {
        do
        {
          v637 = (uint64_t *)v635[2];
          _ZF = *v637 == (_QWORD)v635;
          v635 = v637;
        }
        while (!_ZF);
      }
      v523 = v637;
      if (v637 == &(*a1)[12].__shared_weak_owners_)
        return 1;
    }
    while (1)
    {
      v535 = (_QWORD *)v528[3];
      v534 = (std::__shared_weak_count *)v528[4];
      *(_QWORD *)object = v535;
      *(_QWORD *)&object[8] = v534;
      if (v534)
      {
        v536 = (unint64_t *)&v534->__shared_owners_;
        do
          v537 = __ldxr(v536);
        while (__stxr(v537 + 1, v536));
      }
      v538 = v535[67];
      v539 = v535[68];
      v540 = v538;
      if (v538 != v539)
      {
        v540 = v535[67];
        while (*(_DWORD *)(v540 + 16) != (_DWORD)v683
             || *(_QWORD *)v540 != v682.i64[0]
             || *(_DWORD *)(v540 + 8) != v682.i32[2])
        {
          v540 += 32;
          if (v540 == v539)
            goto LABEL_739;
        }
      }
      if (v540 != v539)
      {
        v541 = v539 - (v540 + 32);
        if (v539 != v540 + 32)
        {
          memmove((void *)v540, (const void *)(v540 + 32), v539 - (v540 + 32));
          v538 = v535[67];
        }
        v539 = v540 + v541;
        v535[68] = v540 + v541;
      }
LABEL_739:
      if (v539 != v538)
      {
        if (v534)
          goto LABEL_761;
        goto LABEL_725;
      }
      v542 = v525;
      v543 = v526;
      v545 = v535[3];
      v544 = v535[4];
      v546 = (_QWORD *)v689.i64[1];
      if (v689.i64[1] < (unint64_t)v690.i64[0])
      {
        *(_QWORD *)v689.i64[1] = v545;
        v546[1] = v544;
        v547 = (uint64_t)(v546 + 2);
        goto LABEL_760;
      }
      v548 = v689.i64[0];
      v549 = (v689.i64[1] - v689.i64[0]) >> 4;
      v550 = v549 + 1;
      if ((unint64_t)(v549 + 1) >> 60)
        sub_20E867F44();
      v551 = v690.i64[0] - v689.i64[0];
      if ((v690.i64[0] - v689.i64[0]) >> 3 > v550)
        v550 = v551 >> 3;
      if ((unint64_t)v551 >= 0x7FFFFFFFFFFFFFF0)
        v552 = 0xFFFFFFFFFFFFFFFLL;
      else
        v552 = v550;
      if (v552)
      {
        if (v552 >> 60)
          sub_20E877A38();
        v553 = (char *)operator new(16 * v552);
        v554 = &v553[16 * v549];
        *(_QWORD *)v554 = v545;
        *((_QWORD *)v554 + 1) = v544;
        v555 = (uint64_t)v554;
        if (v546 == (_QWORD *)v548)
        {
LABEL_758:
          v547 = (uint64_t)(v554 + 16);
          v689.i64[0] = v555;
          v690.i64[0] = (uint64_t)&v553[16 * v552];
          if (!v546)
            goto LABEL_760;
LABEL_759:
          operator delete(v546);
          goto LABEL_760;
        }
      }
      else
      {
        v553 = 0;
        v554 = (char *)(16 * v549);
        *(_QWORD *)v554 = v545;
        *((_QWORD *)v554 + 1) = v544;
        v555 = 16 * v549;
        if (v546 == (_QWORD *)v548)
          goto LABEL_758;
      }
      do
      {
        v556 = *(v546 - 2);
        v546 -= 2;
        v557 = *((_DWORD *)v546 + 2);
        *(_QWORD *)(v555 - 16) = v556;
        v555 -= 16;
        *(_DWORD *)(v555 + 8) = v557;
      }
      while (v546 != (_QWORD *)v548);
      v546 = (_QWORD *)v548;
      v547 = (uint64_t)(v554 + 16);
      v689.i64[0] = v555;
      v690.i64[0] = (uint64_t)&v553[16 * v552];
      if (v548)
        goto LABEL_759;
LABEL_760:
      v689.i64[1] = v547;
      v526 = v543;
      v525 = v542;
      if (v534)
      {
LABEL_761:
        v558 = (unint64_t *)&v534->__shared_owners_;
        do
          v559 = __ldaxr(v558);
        while (__stlxr(v559 - 1, v558));
        if (!v559)
        {
          ((void (*)(std::__shared_weak_count *))v534->__on_zero_shared)(v534);
          std::__shared_weak_count::__release_weak(v534);
        }
      }
LABEL_725:
      v528 = (_QWORD *)*v528;
      if (!v528)
        goto LABEL_722;
    }
  }
  return 1;
}

void sub_20F4A02A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  char a68;
  char a69;

  if (a69)
  {
    if (a68 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void sub_20F4A02E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_20E86E8C4(&a37);
  sub_20E86E8C4(&a31);
  sub_20E86E658((uint64_t)&a63);
  sub_20E863714((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void sub_20F4A030C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_20E86E658((uint64_t)&a63);
  sub_20E863714((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void sub_20F4A0328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  MEMORY[0x212BC6398](v51, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void sub_20F4A0354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  sub_20E863714((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void sub_20F4A0368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *object)
{
  uint64_t a66;
  void *v67;
  uint64_t v68;

  if (__p)
  {
    operator delete(__p);
    v67 = a37;
    if (!a37)
    {
LABEL_3:
      v68 = a66;
      if ((void **)a66 == &object)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v67 = a37;
    if (!a37)
      goto LABEL_3;
  }
  operator delete(v67);
  v68 = a66;
  if ((void **)a66 == &object)
  {
LABEL_4:
    (*((void (**)(void))object + 4))();
    _Unwind_Resume(a1);
  }
LABEL_7:
  if (v68)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 40))(v68);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_QWORD **sub_20F4A0590(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20F4E0254(v2);
    MEMORY[0x212BC6398](v3, 0x10F2C408963B0DFLL);
  }
  return a1;
}

uint64_t sub_20F4A05D4()
{
  unint64_t v0;
  uint64_t v1;
  float64x2_t v2;
  int64x2_t v3;
  int64x2_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  __int128 *v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int *v22;
  __int128 *v23;
  unsigned int v24;
  uint64_t v26;
  __int16 v27;
  BOOL v28;
  uint64_t v29;
  float64x2_t v30;
  int8x16_t v34;
  int8x16_t v35;
  float64x2_t v40;
  int64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  int8x16_t v45;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  _DWORD *v57;
  int64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  float64x2_t *v63;
  float64x2_t *v64;
  uint64_t v65;
  int v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  float64_t v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  char v86;
  int v87;
  __int128 *v88;
  __int128 *v89;
  unint64_t v90;
  unint64_t v91;
  __int128 *v92;
  __int128 *v93;
  unsigned int v94;
  int v95;
  void *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  unint64_t v106;
  __int16 v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  void *v111;
  _QWORD *v112;
  _QWORD *v113;
  void *v114;
  char *v115;
  unint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  _BYTE *v124;
  _DWORD *v125;
  int64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  _OWORD *v131;
  char *v132;
  uint64_t v133;
  __int128 v134;
  int v135;
  uint64_t **v136;
  uint64_t *v137;
  uint64_t *v138;
  __int128 *v139;
  unsigned __int8 v140;
  uint64_t v142;
  uint64_t i;
  unsigned __int8 v144;
  __int128 v145;
  uint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t j;
  uint64_t v151;
  void *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  unint64_t v158;
  char *v159;
  _QWORD *v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  void *v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  void *v169;
  _QWORD *v170;
  _QWORD *v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unsigned int v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v185;
  int v186;
  uint64_t v187;
  char *v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  char *v195;
  char *v196;
  __int128 v197;
  char *v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t v201;
  double v202;
  uint64_t v203;
  double v204;
  uint64_t v205;
  uint64_t v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  double v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  _QWORD *v228;
  float64x2_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  unsigned int v241;
  char v242;
  uint64_t *v243;
  uint64_t *v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t *v248;
  uint64_t *v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  __int128 *v255;
  __int128 *v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unsigned int *v260;
  __int128 *v261;
  unsigned int v262;
  int v263;
  int v264;
  unint64_t v265;
  uint64_t v266;
  const char *v267;
  size_t v268;
  unsigned __int8 v269;
  unsigned __int8 v270;
  const char *v271;
  size_t v272;
  _BYTE *v273;
  uint64_t v274;
  uint64_t v275;
  _BYTE *v276;
  NSObject *v277;
  uint64_t v278;
  uint64_t v279;
  size_t v280;
  std::__shared_weak_count_vtbl *v281;
  std::__shared_weak_count *v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  _DWORD *v288;
  char *v289;
  uint64_t v290;
  const char *v291;
  void *v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  uint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  std::__shared_weak_count *v306;
  int v307;
  unint64_t *v308;
  unint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  void *v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  int v317;
  int v318;
  unint64_t v319;
  uint64_t v320;
  const char *v321;
  size_t v322;
  unsigned __int8 v323;
  unsigned __int8 v324;
  const char *v325;
  size_t v326;
  _BYTE *v327;
  uint64_t v328;
  uint64_t v329;
  _BYTE *v330;
  NSObject *v331;
  uint64_t v332;
  uint64_t v333;
  size_t v334;
  std::__shared_weak_count_vtbl *v335;
  std::__shared_weak_count *v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  unint64_t v340;
  uint64_t v341;
  char *v342;
  uint64_t v343;
  const char *v344;
  void *v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  uint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  void *v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  _QWORD *v369;
  _QWORD *v370;
  char v371;
  char *v372;
  float64x2_t v374;
  __int128 v375;
  float64x2_t v378;
  int8x16_t v379;
  int8x16_t v380;
  float64x2_t v381;
  float64x2_t v383;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  int8x16_t v393;
  char *v394;
  unint64_t v395;
  uint64_t v396;
  char *v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t v401;
  unint64_t v402;
  unint64_t v403;
  _BYTE *v404;
  _DWORD *v405;
  int64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  char *v410;
  _OWORD *v411;
  char *v412;
  uint64_t v413;
  __int128 v414;
  int v415;
  __int128 *v416;
  __int128 *v417;
  unint64_t v418;
  unint64_t v419;
  unsigned int *v420;
  __int128 *v421;
  unsigned int v422;
  uint64_t v423;
  int8x16_t v424;
  int8x16_t v425;
  int8x16_t v426;
  int8x16_t v427;
  char *v428;
  unint64_t v429;
  uint64_t v430;
  char *v431;
  uint64_t v432;
  uint64_t v433;
  unint64_t v434;
  uint64_t v435;
  unint64_t v436;
  unint64_t v437;
  _BYTE *v438;
  _DWORD *v439;
  int64_t v440;
  unint64_t v441;
  uint64_t v442;
  uint64_t v443;
  char *v444;
  _OWORD *v445;
  char *v446;
  uint64_t v447;
  __int128 v448;
  int v449;
  char v450;
  _QWORD *v451;
  unint64_t v452;
  uint64_t v453;
  unint64_t v454;
  unsigned __int8 v455;
  unsigned int v456;
  unint64_t v457;
  char v458;
  unsigned int v459;
  uint64_t v460;
  _QWORD *v461;
  _QWORD *v462;
  _QWORD *v463;
  _QWORD *v464;
  _QWORD *v465;
  uint64_t v466;
  uint64_t v467;
  unsigned int v469;
  _QWORD *v470;
  uint64_t *v471;
  uint64_t *v472;
  _QWORD *v473;
  _QWORD *v474;
  uint64_t *v475;
  unint64_t v476;
  unint64_t v477;
  uint64_t v478;
  uint64_t v479;
  unint64_t v480;
  unint64_t v481;
  _BOOL4 v482;
  int8x16_t v483;
  int8x16_t v484;
  _QWORD *v485;
  uint64_t *v486;
  uint64_t v487;
  uint64_t v488;
  unint64_t v489;
  unint64_t v490;
  uint64_t v491;
  uint64_t v492;
  __int128 v494;
  std::__shared_weak_count *v495;
  unint64_t *p_shared_owners;
  unint64_t v497;
  std::__shared_weak_count *v498;
  unint64_t *v499;
  unint64_t v500;
  std::__shared_weak_count *v501;
  unint64_t *v502;
  unint64_t v503;
  unsigned int v504;
  unint64_t *v505;
  unint64_t v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  uint64_t v523;
  uint64_t v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  uint64_t v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  int8x16_t v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  uint64_t v544;
  uint64_t v545;
  __int128 v546;
  uint64_t v547;
  __int128 v548;
  __int128 v549;
  uint64_t v550;
  __int128 v551;
  __int128 v552;
  uint64_t v553;
  __int128 v554;
  __int128 v555;
  uint64_t v556;
  __int128 v557;
  __int128 v558;
  uint64_t v559;
  __int128 v560;
  __int128 v561;
  uint64_t v562;
  __int128 v563;
  __int128 v564;
  uint64_t v565;
  __int128 v566;
  __int128 v567;
  uint64_t v568;
  __int128 v569;
  __int128 v570;
  uint64_t v571;
  uint64_t v572;
  __int128 v573;
  unint64_t *v574;
  unsigned int v575;
  unint64_t v576;
  unint64_t v577;
  uint64_t v578;
  uint64_t v579;
  void *v580;
  __int8 v581;
  int v582;
  uint64_t v583;
  unint64_t v584;
  std::__shared_weak_count *v585;
  unint64_t *v586;
  unint64_t v587;
  char *v588;
  char *v589;
  unint64_t v590;
  unint64_t v591;
  unint64_t *v592;
  unint64_t v593;
  char *v594;
  uint64_t v595;
  unint64_t *v596;
  unint64_t v597;
  uint64_t v598;
  int v599;
  __int16 v600;
  __int128 v601;
  unint64_t *v602;
  unint64_t v603;
  unint64_t v604;
  char *v605;
  char *v606;
  char *v607;
  unint64_t v608;
  unint64_t v609;
  unsigned int *v610;
  char *v611;
  unsigned int v612;
  uint64_t v613;
  char *v614;
  char *v615;
  char *v616;
  unint64_t v617;
  unint64_t v618;
  unsigned int *v619;
  char *v620;
  unsigned int v621;
  uint64_t v622;
  unint64_t v623;
  unint64_t v624;
  unsigned int *v625;
  char *v626;
  unsigned int v627;
  uint64_t v628;
  unint64_t v629;
  unint64_t v630;
  unsigned int *v631;
  char *v632;
  unsigned int v633;
  uint64_t v634;
  uint64_t v635;
  std::__shared_weak_count *v636;
  unint64_t *v637;
  unint64_t v638;
  unint64_t *v639;
  unint64_t v640;
  std::__shared_weak_count *v641;
  unint64_t *v642;
  unint64_t v643;
  std::__shared_weak_count *v644;
  unint64_t *v645;
  unint64_t v646;
  void *v647;
  void **v648;
  void **v649;
  unint64_t v650;
  unint64_t v651;
  void **v652;
  void *v653;
  void **v654;
  uint64_t v655;
  unint64_t *v656;
  unint64_t v657;
  unint64_t *v658;
  unint64_t v659;
  unint64_t v660;
  char *v661;
  char *v662;
  char *v663;
  unint64_t v664;
  unint64_t v665;
  unsigned int *v666;
  char *v667;
  unsigned int v668;
  uint64_t v669;
  char *v670;
  char *v671;
  char *v672;
  unint64_t v673;
  unint64_t v674;
  unsigned int *v675;
  char *v676;
  unsigned int v677;
  uint64_t v678;
  unint64_t v679;
  unint64_t v680;
  unsigned int *v681;
  char *v682;
  unsigned int v683;
  uint64_t v684;
  unint64_t v685;
  unint64_t v686;
  unsigned int *v687;
  char *v688;
  unsigned int v689;
  uint64_t v690;
  void *v691;
  void **v692;
  char *v693;
  uint64_t v694;
  void **v695;
  unint64_t v696;
  void **v697;
  void **v698;
  uint64_t v699;
  void **v700;
  void **v701;
  __int128 v704;
  void *v705;
  __int128 v706;
  __int128 v707;
  __int128 v708;
  void *v709;
  __int128 v710;
  __int128 v711;
  __int128 v712;
  __int128 v713;
  __int128 v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  __int128 v724;
  __int128 v725;
  __int128 v726;
  __int128 v727;
  __int128 v728;
  __int128 v729;
  __int128 v730;
  __int128 v731;
  void *v732;
  void *v733;
  __int128 v735;
  __int128 v736;
  __int128 v737;
  void *v738;
  __int128 v739;
  __int128 v740;
  __int128 v741;
  __int128 v742;
  __int128 v743;
  __int128 v744;
  __int128 v745;
  __int128 v746;
  __int128 v747;
  void *v748;
  _QWORD *v749;
  char v751;
  uint64_t v752;
  uint64_t v753;
  void **v754;
  __int128 v755;
  __int128 v756;
  __int128 v757;
  __int128 v758;
  __int128 v759;
  __int128 v760;
  __int128 v761;
  __int128 v762;
  __int128 v763;
  __int128 v764;
  __int128 v765;
  __int128 v766;
  __int128 v767;
  __int128 v768;
  __int128 v769;
  __int128 v770;
  std::__shared_weak_count *v771;
  unint64_t *v772;
  unint64_t v773;
  std::__shared_weak_count *v774;
  unint64_t *v775;
  unint64_t v776;
  unint64_t *v777;
  unint64_t v778;
  unint64_t *v779;
  unint64_t v780;
  int v781;
  unint64_t v782;
  unint64_t v783;
  uint64_t v785;
  size_t v786;
  unsigned __int8 v787;
  const char *v788;
  size_t v789;
  _BYTE *v790;
  unint64_t v791;
  uint64_t v792;
  uint64_t v793;
  _BYTE *v794;
  uint64_t v795;
  uint64_t v796;
  NSObject *v797;
  size_t v798;
  std::__shared_weak_count_vtbl *v799;
  std::__shared_weak_count *v800;
  int v801;
  std::__shared_weak_count *v802;
  unint64_t *v803;
  unint64_t v804;
  unint64_t v805;
  uint64_t v806;
  uint64_t v807;
  char *v808;
  uint64_t v809;
  uint64_t v810;
  void *v811;
  std::__shared_weak_count *v812;
  unint64_t *v813;
  unint64_t v814;
  std::__shared_weak_count *v815;
  unint64_t *v816;
  unint64_t v817;
  uint64_t v818;
  std::__shared_weak_count *v819;
  unint64_t *v820;
  unint64_t v821;
  std::__shared_weak_count *v822;
  unint64_t *v823;
  unint64_t v824;
  std::__shared_weak_count *v825;
  unint64_t *v826;
  unint64_t v827;
  std::__shared_weak_count *v828;
  unint64_t *v829;
  unint64_t v830;
  void *v831;
  std::__shared_weak_count *v832;
  unint64_t *v833;
  unint64_t v834;
  unint64_t *v835;
  unint64_t v836;
  unint64_t *v837;
  uint64_t v838;
  uint64_t v839;
  std::__shared_weak_count *v840;
  char *v841;
  char *v842;
  uint64_t v843;
  unint64_t v844;
  unint64_t v845;
  unint64_t v846;
  unint64_t v847;
  char *v848;
  _QWORD *v849;
  unint64_t v850;
  char *v852;
  __int128 v853;
  __int128 v854;
  char *v855;
  __int128 v856;
  __int128 v857;
  __int128 v858;
  __int128 v859;
  __int128 v860;
  __int128 v861;
  __int128 v862;
  __int128 v863;
  uint64_t v864;
  __int128 v865;
  __int128 v866;
  __int128 v867;
  uint64_t v868;
  char *v870;
  __int128 v874;
  __int128 v876;
  __int128 v877;
  __int128 v878;
  __int128 v879;
  __int128 v880;
  __int128 v881;
  uint64_t v882;
  __int128 v883;
  __int128 v884;
  __int128 v885;
  __int128 v886;
  __int128 v887;
  char *v890;
  __int128 v891;
  __int128 v892;
  __int128 v893;
  __int128 v894;
  __int128 v895;
  uint64_t v896;
  unint64_t v898;
  unint64_t v899;
  unint64_t v900;
  char *v901;
  char *v902;
  uint64_t v903;
  _QWORD *v904;
  __int128 v905;
  char *v906;
  __int128 v907;
  __int128 v908;
  __int128 v909;
  __int128 v910;
  __int128 v911;
  __int128 v912;
  uint64_t v913;
  __int128 v914;
  __int128 v915;
  __int128 v916;
  __int128 v917;
  __int128 v918;
  char *v919;
  __int128 v920;
  __int128 v921;
  __int128 v922;
  __int128 v923;
  __int128 v924;
  __int128 v925;
  char *v926;
  __int128 v927;
  __int128 v928;
  __int128 v929;
  __int128 v930;
  uint64_t v931;
  __int128 v932;
  __int128 v933;
  __int128 v934;
  __int128 v935;
  __int128 v936;
  uint64_t v937;
  __int128 v938;
  __int128 v939;
  __int128 v940;
  unint64_t v941;
  uint64_t v942;
  uint64_t v943;
  char *v944;
  char *v945;
  char *v946;
  char *v947;
  std::__shared_weak_count *v948;
  unint64_t *v949;
  unint64_t v950;
  unint64_t v951;
  unint64_t v952;
  unint64_t v953;
  char *v954;
  unint64_t v955;
  __int128 v956;
  __int128 v957;
  __int128 v958;
  __int128 v959;
  __int128 v960;
  __int128 v961;
  __int128 v962;
  __int128 v963;
  __int128 v964;
  __int128 v965;
  __int128 v966;
  __int128 v967;
  __int128 v968;
  __int128 v969;
  __int128 v970;
  __int128 v971;
  __int128 v972;
  __int128 v973;
  __int128 v974;
  __int128 v975;
  unint64_t v976;
  uint64_t v977;
  unint64_t v978;
  char *v979;
  char *v980;
  char *v981;
  uint64_t v982;
  char *v983;
  unint64_t v985;
  __int128 v986;
  __int128 v987;
  _OWORD *v988;
  __int128 v989;
  __int128 v990;
  uint64_t v991;
  __int128 v992;
  __int128 v993;
  __int128 v994;
  __int128 v995;
  __int128 v996;
  __int128 v997;
  __int128 v998;
  __int128 v999;
  __int128 v1000;
  uint64_t v1001;
  _OWORD *v1005;
  __int128 v1007;
  unint64_t v1009;
  __int128 v1010;
  __int128 v1011;
  __int128 v1012;
  __int128 v1013;
  __int128 v1014;
  __int128 v1015;
  uint64_t v1016;
  __int128 v1017;
  __int128 v1018;
  __int128 v1019;
  __int128 v1020;
  __int128 v1021;
  unint64_t v1022;
  char *v1023;
  unint64_t v1026;
  __int128 v1027;
  __int128 v1028;
  __int128 v1029;
  __int128 v1030;
  __int128 v1031;
  __int128 v1032;
  unint64_t v1034;
  char *v1035;
  uint64_t v1036;
  uint64_t v1038;
  __int128 v1039;
  __int128 v1040;
  _OWORD *v1041;
  __int128 v1042;
  __int128 v1043;
  __int128 v1044;
  __int128 v1045;
  __int128 v1046;
  __int128 v1047;
  __int128 v1048;
  __int128 v1049;
  uint64_t v1050;
  __int128 v1051;
  __int128 v1052;
  __int128 v1053;
  uint64_t v1054;
  uint64_t v1056;
  __int128 v1060;
  __int128 v1062;
  __int128 v1063;
  __int128 v1064;
  __int128 v1065;
  __int128 v1066;
  __int128 v1067;
  uint64_t v1068;
  __int128 v1069;
  __int128 v1070;
  __int128 v1071;
  __int128 v1072;
  __int128 v1073;
  uint64_t v1076;
  __int128 v1077;
  __int128 v1078;
  __int128 v1079;
  __int128 v1080;
  __int128 v1081;
  uint64_t v1082;
  char *v1084;
  uint64_t v1085;
  char *v1086;
  std::__shared_weak_count *v1087;
  unint64_t *v1088;
  unint64_t v1089;
  unint64_t *v1090;
  unint64_t v1091;
  char *v1092;
  __int128 v1093;
  uint64_t v1094;
  __int128 v1095;
  __int128 v1096;
  __int128 v1097;
  uint64_t v1098;
  __int128 v1099;
  __int128 v1100;
  __int128 v1101;
  __int128 v1102;
  __int128 v1103;
  __int128 v1104;
  __int128 v1105;
  __int128 v1106;
  __int128 v1107;
  __int128 v1108;
  __int128 v1109;
  __int128 v1110;
  __int128 v1111;
  __int128 v1112;
  __int128 v1113;
  __int128 v1114;
  __int128 v1115;
  __int128 v1116;
  __int128 v1117;
  __int128 v1118;
  __int128 v1119;
  __int128 v1120;
  uint64_t v1121;
  __int128 v1122;
  __int128 v1123;
  __int128 v1124;
  __int128 v1125;
  __int128 v1126;
  __int128 v1127;
  __int128 v1128;
  uint64_t v1129;
  __int128 v1130;
  __int128 v1131;
  __int128 v1132;
  __int128 v1133;
  __int128 v1134;
  uint64_t v1135;
  char *v1136;
  uint64_t v1137;
  unint64_t v1138;
  char *v1139;
  __int128 v1140;
  __int128 v1141;
  __int128 v1142;
  __int128 v1143;
  __int128 v1144;
  __int128 v1145;
  __int128 v1146;
  __int128 v1147;
  __int128 v1148;
  __int128 v1149;
  __int128 v1150;
  __int128 v1151;
  __int128 v1152;
  __int128 v1153;
  __int128 v1154;
  __int128 v1155;
  __int128 v1156;
  __int128 v1157;
  __int128 v1158;
  __int128 v1159;
  __int128 v1160;
  __int128 v1161;
  __int128 v1162;
  __int128 v1163;
  __int128 v1164;
  __int128 v1165;
  __int128 v1166;
  __int128 v1167;
  __int128 v1168;
  __int128 v1169;
  __int128 v1170;
  __int128 v1171;
  __int128 v1172;
  __int128 v1173;
  __int128 v1174;
  __int128 v1175;
  __int128 v1176;
  __int128 v1177;
  uint64_t v1178;
  void **v1179;
  unint64_t v1180;
  void **v1181;
  char *v1184;
  char *v1185;
  uint64_t v1186;
  __int128 v1187;
  uint64_t v1188;
  uint64_t v1189;
  char *v1190;
  __int128 v1191;
  uint64_t v1192;
  __int128 v1193;
  __int128 v1194;
  __int128 v1195;
  uint64_t v1196;
  __int128 v1197;
  __int128 v1198;
  __int128 v1199;
  uint64_t v1200;
  __int128 v1201;
  __int128 v1202;
  __int128 v1203;
  uint64_t v1204;
  __int128 v1205;
  __int128 v1206;
  __int128 v1207;
  uint64_t v1208;
  __int128 v1209;
  __int128 v1210;
  __int128 v1211;
  uint64_t v1212;
  __int128 v1213;
  __int128 v1214;
  __int128 v1215;
  uint64_t v1216;
  __int128 v1217;
  __int128 v1218;
  __int128 v1219;
  uint64_t v1220;
  __int128 v1221;
  __int128 v1222;
  __int128 v1223;
  uint64_t v1224;
  __int128 v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  __int128 v1229;
  void **v1230;
  char *v1232;
  __int128 v1233;
  char *v1234;
  __int128 v1235;
  __int128 v1236;
  uint64_t v1237;
  __int128 v1238;
  __int128 v1239;
  __int128 v1240;
  __int128 v1241;
  __int128 v1242;
  __int128 v1243;
  __int128 v1244;
  __int128 v1245;
  __int128 v1246;
  uint64_t v1247;
  void **v1249;
  uint64_t v1250;
  void **v1251;
  _QWORD *v1252;
  char *v1253;
  __int128 v1256;
  void *v1257;
  __int128 v1258;
  __int128 v1259;
  __int128 v1260;
  void *v1261;
  __int128 v1262;
  __int128 v1263;
  __int128 v1264;
  __int128 v1265;
  __int128 v1266;
  __int128 v1267;
  __int128 v1268;
  __int128 v1269;
  __int128 v1270;
  __int128 v1271;
  __int128 v1272;
  __int128 v1273;
  __int128 v1274;
  __int128 v1275;
  __int128 v1276;
  __int128 v1277;
  __int128 v1278;
  __int128 v1279;
  __int128 v1280;
  __int128 v1281;
  __int128 v1282;
  __int128 v1283;
  void *v1284;
  void *v1285;
  __int128 v1287;
  __int128 v1288;
  __int128 v1289;
  void *v1290;
  __int128 v1291;
  __int128 v1292;
  __int128 v1293;
  __int128 v1294;
  __int128 v1295;
  __int128 v1296;
  __int128 v1297;
  __int128 v1298;
  __int128 v1299;
  void *v1300;
  _QWORD *v1301;
  char v1303;
  void **v1304;
  uint64_t v1305;
  std::__shared_weak_count *v1306;
  unint64_t *v1307;
  unint64_t v1308;
  unint64_t *v1309;
  unint64_t v1310;
  __int128 v1311;
  __int128 v1312;
  __int128 v1313;
  __int128 v1314;
  __int128 v1315;
  __int128 v1316;
  __int128 v1317;
  __int128 v1318;
  __int128 v1319;
  __int128 v1320;
  __int128 v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t *v1325;
  uint64_t *v1326;
  uint64_t v1327;
  unint64_t v1328;
  uint64_t v1329;
  unsigned int v1330;
  _QWORD *v1331;
  unint64_t v1332;
  unint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  _QWORD *v1336;
  _QWORD *v1337;
  __int128 v1338;
  _QWORD *v1339;
  _QWORD *v1340;
  int v1341;
  uint64_t v1342;
  unint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  _QWORD *v1347;
  _QWORD *v1348;
  _QWORD *v1349;
  _QWORD *v1350;
  uint64_t v1351;
  uint64_t *v1352;
  uint64_t *v1353;
  uint64_t *v1354;
  unsigned int v1355;
  unint64_t v1356;
  uint64_t *v1357;
  unint64_t v1358;
  unint64_t v1359;
  uint64_t v1360;
  std::__shared_weak_count *v1361;
  unint64_t *v1362;
  unint64_t v1363;
  unint64_t v1364;
  unint64_t v1365;
  char *v1366;
  char *v1367;
  unint64_t v1368;
  unint64_t v1369;
  unsigned int *v1370;
  char *v1371;
  unsigned int v1372;
  uint64_t v1373;
  int v1374;
  uint64_t v1375;
  uint64_t *v1379;
  uint64_t v1380;
  double *v1381;
  uint64_t v1382;
  double *v1383;
  double v1385;
  float64x2_t v1388;
  double v1390;
  double v1391;
  double v1393;
  uint64_t v1404;
  unsigned int v1405;
  __int128 *v1406;
  uint64_t *v1409;
  std::string::size_type v1410;
  unint64_t *v1411;
  unint64_t v1412;
  void *v1413;
  uint64_t v1414;
  void (***v1415)(uint64_t);
  void (**v1416)(uint64_t);
  uint64_t v1417;
  double v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  unsigned int v1422;
  uint64_t v1423;
  uint64_t v1424;
  float32x2_t *v1425;
  char *v1426;
  char *v1427;
  unint64_t v1428;
  unint64_t v1429;
  unsigned int *v1430;
  char *v1431;
  unsigned int v1432;
  int v1433;
  uint64_t v1434;
  void *v1435;
  int v1436;
  void *v1437;
  double *v1438;
  uint64_t *v1442;
  uint64_t v1443;
  double *v1444;
  uint64_t v1445;
  double *v1446;
  double v1448;
  float64x2_t v1451;
  double v1453;
  double v1454;
  double v1456;
  uint64_t v1467;
  void *v1468;
  unsigned int v1469;
  __int128 *v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  _QWORD *v1474;
  _QWORD *v1475;
  void *v1476;
  void *v1477;
  _QWORD *v1478;
  _QWORD *v1479;
  int v1480;
  uint64_t *v1483;
  std::string::size_type v1484;
  _QWORD *v1485;
  _QWORD *v1486;
  _QWORD *v1487;
  _QWORD *v1488;
  uint64_t v1489;
  uint64_t k;
  unsigned int v1491;
  char *v1492;
  char *v1493;
  unint64_t v1494;
  unint64_t v1495;
  unsigned int *v1496;
  char *v1497;
  unsigned int v1498;
  int v1499;
  uint64_t *v1500;
  uint64_t v1501;
  uint64_t v1502;
  unint64_t v1503;
  unint64_t v1504;
  BOOL v1505;
  uint64_t v1506;
  uint64_t v1507;
  _DWORD *v1508;
  unsigned int v1509;
  char *v1510;
  char *v1511;
  unint64_t v1512;
  unint64_t v1513;
  unsigned int *v1514;
  char *v1515;
  unsigned int v1516;
  int v1517;
  char v1518;
  _QWORD *v1519;
  _QWORD *v1520;
  _QWORD *v1521;
  _QWORD *v1522;
  uint64_t v1523;
  std::__shared_weak_count *v1524;
  unint64_t *v1525;
  unint64_t v1526;
  unsigned int v1527;
  char *v1528;
  char *v1529;
  unint64_t v1530;
  unint64_t v1531;
  unsigned int *v1532;
  char *v1533;
  unsigned int v1534;
  unint64_t *v1535;
  unint64_t v1536;
  _QWORD *v1537;
  _QWORD *v1538;
  _QWORD *v1540;
  unint64_t v1541;
  _QWORD *v1542;
  uint64_t v1543;
  _QWORD *v1544;
  _QWORD *v1545;
  double v1546;
  double v1547;
  double v1548;
  double v1549;
  double v1550;
  unsigned int v1551;
  _QWORD *v1552;
  unint64_t v1553;
  _DWORD *v1554;
  _QWORD *v1555;
  _DWORD *v1556;
  _BYTE *v1557;
  int v1558;
  _QWORD *v1559;
  uint64_t v1560;
  unint64_t v1561;
  unint64_t v1562;
  _BYTE *v1563;
  _DWORD *v1564;
  int64_t v1565;
  unint64_t v1566;
  _DWORD *v1567;
  int v1568;
  _QWORD *v1569;
  unint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  _OWORD *v1573;
  __int128 *v1574;
  uint64_t v1575;
  __int128 v1576;
  uint64_t v1577;
  _QWORD *v1578;
  uint64_t *v1579;
  _QWORD *v1580;
  _QWORD *v1581;
  double *v1582;
  double *v1583;
  uint64_t v1584;
  uint64_t *v1585;
  uint64_t *v1586;
  unint64_t v1587;
  unint64_t v1588;
  uint64_t *v1589;
  unint64_t v1590;
  uint64_t v1591;
  unint64_t v1592;
  uint64_t v1593;
  unint64_t v1594;
  unint64_t v1595;
  unint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  char *v1601;
  char *v1602;
  unint64_t v1603;
  unint64_t v1604;
  unsigned int *v1605;
  char *v1606;
  unsigned int v1607;
  double *v1608;
  double v1609;
  uint64_t v1610;
  double *v1612;
  int64x2_t *v1613;
  double *v1614;
  double v1615;
  double v1616;
  float64x2_t v1617;
  float64x2_t v1619;
  double v1621;
  double v1623;
  double v1625;
  uint64_t v1626;
  float v1627;
  float v1628;
  float v1629;
  double v1630;
  int8x8_t v1631;
  unint64_t v1632;
  uint8x8_t v1633;
  unint64_t v1634;
  uint64_t **v1635;
  uint64_t *v1636;
  uint64_t v1637;
  unint64_t v1638;
  uint64_t v1639;
  unint64_t v1640;
  char *v1641;
  char *v1642;
  unint64_t v1643;
  unint64_t v1644;
  unsigned int *v1645;
  char *v1646;
  unsigned int v1647;
  char *v1648;
  char *v1649;
  unint64_t v1650;
  unint64_t v1651;
  unsigned int *v1652;
  char *v1653;
  unsigned int v1654;
  uint64_t v1655;
  unint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  double *v1660;
  int64x2_t *v1661;
  double *v1662;
  double v1663;
  double v1664;
  float64x2_t v1665;
  float64x2_t v1667;
  double v1669;
  double v1671;
  double v1673;
  double v1674;
  double *v1675;
  float v1676;
  float v1677;
  double v1678;
  unint64_t v1679;
  unint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  unint64_t v1685;
  unint64_t v1686;
  uint64_t v1687;
  unint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  double v1692;
  uint64_t v1693;
  uint64_t v1694;
  double *v1696;
  int64x2_t *v1697;
  double *v1698;
  double v1699;
  double v1700;
  float64x2_t v1701;
  float64x2_t v1703;
  double v1705;
  double v1707;
  double v1709;
  uint64_t v1710;
  double *v1711;
  float v1712;
  float v1713;
  float v1714;
  double v1715;
  unint64_t v1716;
  unint64_t v1717;
  unint64_t v1718;
  size_t v1719;
  __int128 v1720;
  double v1721;
  float32x2_t v1723;
  uint64_t *v1724;
  int v1725;
  double *v1726;
  double *v1727;
  uint64_t v1728;
  uint64_t v1729;
  __int32 v1730;
  unint64_t v1731;
  uint64_t v1732;
  uint64_t *v1733;
  uint64_t *v1734;
  uint64_t v1735;
  uint64_t *v1736;
  uint64_t *v1737;
  uint64_t *v1738;
  unsigned int v1739;
  _DWORD *v1740;
  unint64_t v1741;
  unint64_t v1742;
  unsigned int *v1743;
  _DWORD *v1744;
  unsigned int v1745;
  unint64_t v1746;
  unsigned int v1747;
  uint64_t *v1748;
  unint64_t v1749;
  unint64_t v1750;
  double *v1751;
  uint64_t v1752;
  uint64_t *v1753;
  uint64_t *v1754;
  uint64_t *v1755;
  double v1756;
  int v1757;
  double v1758;
  unsigned int v1759;
  uint64_t v1760;
  uint64_t v1761;
  uint64_t v1762;
  unsigned int v1763;
  BOOL v1764;
  uint64_t *v1765;
  uint64_t v1766;
  unsigned int v1767;
  float32x2_t *v1768;
  float32x2_t *v1769;
  char v1770;
  float32x2_t v1771;
  float v1772;
  float64x2_t v1773;
  float32x2_t v1774;
  float32x2_t v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  int v1779;
  __int32 *v1782;
  __int32 *v1783;
  __int32 *v1784;
  uint64_t v1785;
  unint64_t v1786;
  unint64_t v1787;
  char *v1788;
  uint64_t v1789;
  uint64_t v1790;
  double *v1791;
  uint64_t v1792;
  unint64_t v1793;
  unint64_t v1794;
  char *v1795;
  uint64_t v1796;
  uint64_t v1797;
  double *v1798;
  uint64_t v1799;
  int v1800;
  uint64_t v1801;
  unint64_t v1802;
  const std::nothrow_t *v1803;
  unint64_t v1804;
  double *v1805;
  double v1806;
  unint64_t v1807;
  unsigned int v1808;
  double *v1809;
  const std::nothrow_t *v1810;
  unint64_t v1811;
  double *v1812;
  void *v1813;
  int v1814;
  uint64_t v1815;
  uint64_t v1816;
  unsigned int v1817;
  unsigned int *v1818;
  uint64_t v1819;
  unsigned int v1820;
  unsigned int v1821;
  unsigned int v1822;
  unsigned int v1823;
  unsigned int v1824;
  double *v1825;
  unsigned int v1826;
  _DWORD *v1827;
  unint64_t v1828;
  char *v1829;
  char *v1830;
  unint64_t v1831;
  unint64_t v1832;
  unsigned int *v1833;
  char *v1834;
  unsigned int v1835;
  int8x8_t v1836;
  uint8x8_t v1837;
  unint64_t v1838;
  uint64_t **v1839;
  uint64_t *v1840;
  uint64_t v1841;
  unint64_t v1842;
  uint64_t v1843;
  uint64_t v1844;
  uint64_t v1845;
  _BOOL4 v1846;
  unsigned int *v1847;
  unint64_t v1848;
  char *v1849;
  char *v1850;
  unint64_t v1851;
  unint64_t v1852;
  unsigned int *v1853;
  char *v1854;
  unsigned int v1855;
  int8x8_t v1856;
  uint8x8_t v1857;
  unint64_t v1858;
  uint64_t **v1859;
  uint64_t *v1860;
  uint64_t v1861;
  unint64_t v1862;
  uint64_t v1863;
  uint64_t v1864;
  uint64_t v1865;
  BOOL v1866;
  uint64_t v1867;
  unint64_t v1868;
  uint64_t v1869;
  __int128 v1870;
  __int128 v1871;
  __int128 v1872;
  __int128 v1873;
  __int128 v1874;
  __int128 v1875;
  __int128 v1876;
  __int128 v1877;
  __int128 v1878;
  __int128 v1879;
  __int128 v1880;
  __int128 v1881;
  __int128 v1882;
  __int128 v1883;
  __int128 v1884;
  __int128 v1885;
  __int128 v1886;
  __int128 v1887;
  __int128 v1888;
  __int128 v1889;
  __int128 v1890;
  __int128 v1891;
  __int128 v1892;
  __int128 v1893;
  __int128 v1894;
  __int128 v1895;
  __int128 v1896;
  __int128 v1897;
  __int128 v1898;
  __int128 v1899;
  __int128 v1900;
  __int128 v1901;
  __int128 v1902;
  __int128 v1903;
  __int128 v1904;
  __int128 v1905;
  __int128 v1906;
  __int128 v1907;
  __int128 v1908;
  __int128 v1909;
  __int128 v1910;
  __int128 v1911;
  __int128 v1912;
  __int128 v1913;
  __int128 v1914;
  __int128 v1915;
  uint64_t v1916;
  uint64_t v1917;
  __int128 v1918;
  __int128 v1919;
  char *v1920;
  __int128 v1921;
  __int128 v1922;
  __int128 v1923;
  __int128 v1924;
  __int128 v1925;
  uint64_t v1926;
  __int128 v1927;
  __int128 v1928;
  __int8 v1929;
  __int8 v1930;
  __int8 v1931;
  __int8 v1932;
  __int8 v1933;
  __int8 v1934;
  __int8 v1935;
  __int8 v1936;
  __int8 v1937;
  __int8 v1938;
  __int8 v1939;
  __int8 v1940;
  __int8 v1941;
  __int8 v1942;
  __int8 v1943;
  __int8 v1944;
  __int8 v1945;
  __int8 v1946;
  __int8 v1947;
  __int8 v1948;
  __int8 v1949;
  __int8 v1950;
  __int8 v1951;
  __int8 v1952;
  __int8 v1953;
  __int8 v1954;
  __int8 v1955;
  __int8 v1956;
  __int8 v1957;
  __int8 v1958;
  int v1959;
  int8x16_t v1960;
  int8x16_t v1961;
  uint64_t *v1962;
  void **v1963;
  void **v1964;
  void **v1965;
  int64x2_t v1966;
  uint64_t v1967;
  __int128 v1968;
  void *v1969;
  char *v1970;
  int64x2_t v1971;
  uint64_t v1972;
  uint64_t v1973;
  char *v1974;
  uint64_t v1975;
  int64x2_t v1976;
  char v1977;
  uint64_t v1978;
  void **v1979;
  float64x2_t v1980;
  int8x16_t v1981;
  uint64_t v1982;
  char v1983;
  _QWORD *v1984;
  int8x16_t v1985;
  uint64_t v1986;
  int8x16_t v1987;
  double v1988;
  int8x16_t v1989;
  double v1990;
  char *categoryf[2];
  uint64_t category;
  uint64_t categoryg;
  double categoryh;
  std::__shared_weak_count *categorya;
  const char *categoryb;
  char *categoryc;
  void **categoryd;
  _QWORD *categorye;
  _DWORD *v2000;
  char **v2001;
  unsigned int v2002;
  void **v2003;
  _QWORD *v2004;
  _BYTE *v2005;
  char *v2006;
  char **v2007;
  char v2008;
  const char *v2009;
  int v2010;
  unsigned int v2011;
  _QWORD *v2012;
  uint64_t v2013;
  float64_t v2014;
  uint64_t *v2015;
  uint64_t v2016;
  int v2017;
  _BYTE *v2018;
  int64x2_t **v2019;
  uint64_t *v2020;
  uint64_t v2021;
  unint64_t v2022;
  void *__dsta[2];
  float64x2_t __dstb;
  uint64_t *__dst;
  float64x2_t v2026;
  int v2027;
  unint64_t v2028;
  double v2029;
  float64x2_t *v2030;
  _QWORD *v2031;
  unint64_t v2032;
  uint64_t v2033;
  uint64_t v2034;
  __int32 v2035;
  int64x2_t v2036;
  unint64_t v2037;
  uint64_t *v2038;
  uint64_t v2039;
  uint64_t *v2040;
  int v2041;
  int64x2_t __szj;
  size_t __sz[2];
  int __sza;
  const char *__szb;
  void *__szc;
  uint64_t __szd;
  char *__sze;
  uint64_t __szf;
  unint64_t __szg;
  float64x2_t __szk;
  float64x2_t __szl;
  unint64_t __szh;
  double __szi;
  int64x2_t v2055;
  char *v2056;
  _QWORD *v2057;
  uint64_t v2058;
  unsigned int v2059;
  uint64_t v2060;
  double *v2061;
  uint64_t *v2062;
  float64x2_t v2063;
  float64x2_t v2064;
  uint64_t v2065;
  unint64_t v2066;
  uint64_t v2067;
  std::__shared_weak_count *v2068;
  uint64_t v2069;
  std::__shared_weak_count *v2070;
  std::__shared_weak_count *v2071;
  std::__shared_weak_count *v2072;
  void *v2073;
  char v2074;
  __int128 v2075;
  void *v2076;
  __int128 v2077;
  void *v2078;
  __int128 v2079;
  void *v2080;
  __int128 v2081;
  __int128 v2082;
  __int128 v2083;
  void *v2084;
  __int128 v2085;
  void *v2086;
  __int128 v2087;
  __int128 v2088;
  __int128 v2089;
  __int128 v2090;
  __int128 v2091;
  __int128 v2092;
  __int128 v2093;
  __int128 v2094;
  void *v2095;
  __int128 v2096;
  __int128 v2097;
  uint64_t v2098;
  __int128 v2099;
  __int128 v2100;
  __int128 v2101;
  __int128 v2102;
  __int128 v2103;
  __int128 v2104;
  void *v2105;
  _OWORD v2106[113];
  _OWORD v2107[41];
  __int128 v2108;
  __int128 v2109;
  __int128 v2110;
  __int128 v2111;
  void *v2112;
  __int128 v2113;
  __int128 v2114;
  __int128 v2115;
  __int128 v2116;
  void *v2117;
  __int128 v2118;
  __int128 v2119;
  __int128 v2120;
  __int128 v2121;
  void *v2122;
  __int128 v2123;
  __int128 v2124;
  __int128 v2125;
  __int128 v2126;
  void *v2127;
  __int128 v2128;
  __int128 v2129;
  __int128 v2130;
  __int128 v2131;
  void *v2132;
  __int128 v2133;
  __int128 v2134;
  __int128 v2135;
  __int128 v2136;
  void *v2137;
  __int128 v2138;
  __int128 v2139;
  __int128 v2140;
  __int128 v2141;
  void *v2142;
  __int128 v2143;
  __int128 v2144;
  __int128 v2145;
  __int128 v2146;
  void *v2147;
  _OWORD v2148[113];
  void *v2149[2];
  _BYTE v2150[1864];
  _OWORD v2151[247];
  uint64_t v2152;
  char v2153;
  __int8 v2154;
  _BYTE v2155[1800];
  uint64_t v2156;
  char v2157;
  __int16 v2158;
  __int128 v2159;
  __int128 v2160;
  uint64_t v2161;
  __int128 v2162;
  __int128 v2163;
  __int128 v2164;
  __int128 v2165;
  __int128 v2166;
  __int128 v2167;
  __int128 v2168;
  uint64_t v2169;
  __int128 v2170;
  __int128 v2171;
  __int128 v2172;
  __int128 v2173;
  __int128 v2174;
  __int128 v2175;
  __int128 v2176;
  uint64_t v2177;
  unint64_t v2178;
  char v2179;
  __int128 v2180;
  char v2181;
  _BYTE v2182[5728];
  __int128 v2183;
  __int128 v2184;
  __int128 v2185;
  __int128 v2186;
  __int128 v2187;
  __int128 v2188;
  __int128 v2189;
  uint64_t v2190;
  char v2191;
  uint64_t (**v2192)();
  __int8 v2193;
  _BYTE v2194[1800];
  uint64_t v2195;
  char v2196;
  __int16 v2197;
  __int128 v2198;
  __int128 v2199;
  uint64_t v2200;
  __int128 v2201;
  __int128 v2202;
  __int128 v2203;
  __int128 v2204;
  __int128 v2205;
  __int128 v2206;
  __int128 v2207;
  uint64_t v2208;
  __int128 v2209;
  __int128 v2210;
  __int128 v2211;
  __int128 v2212;
  __int128 v2213;
  __int128 v2214;
  __int128 v2215;
  uint64_t v2216;
  unint64_t v2217;
  char v2218;
  __int128 v2219;
  char v2220;
  _BYTE object[1888];
  _OWORD v2222[247];
  uint64_t v2223;
  char v2224;
  uint64_t (**v2225)();
  __int8 v2226;
  _BYTE v2227[1800];
  uint64_t v2228;
  char v2229;
  __int16 v2230;
  __int128 v2231;
  __int128 v2232;
  uint64_t v2233;
  __int128 v2234;
  __int128 v2235;
  __int128 v2236;
  __int128 v2237;
  __int128 v2238;
  __int128 v2239;
  __int128 v2240;
  uint64_t v2241;
  __int128 v2242;
  __int128 v2243;
  __int128 v2244;
  __int128 v2245;
  __int128 v2246;
  __int128 v2247;
  __int128 v2248;
  uint64_t v2249;
  unint64_t v2250;
  char v2251;
  uint64_t v2252;
  std::__shared_weak_count *v2253;
  char v2254;
  uint64_t v2255;
  uint64_t v2256;

  v1 = MEMORY[0x24BDAC7A8]();
  v2015 = v5;
  v2256 = *MEMORY[0x24BDAC8D0];
  v2018 = (_BYTE *)(v1 + 5808);
  if (*(_BYTE *)(v1 + 2146))
  {
    v6 = *(_QWORD *)(v1 + 120);
    v7 = v1 + 176;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  *(_QWORD *)(v1 + 5776) = v6;
  *(_QWORD *)(v1 + 5784) = v7;
  v8 = *(_QWORD *)(v1 + 8);
  v9 = *(_QWORD **)(v8 + 296);
  v10 = (_QWORD *)(v8 + 304);
  v2067 = v1;
  if (v9 != (_QWORD *)(v8 + 304))
  {
    v2007 = (char **)(v1 + 5128);
    v2005 = (_BYTE *)(v1 + 6584);
    v2021 = v1 + 5152;
    v2003 = (void **)(v1 + 6272);
    while (1)
    {
      v11 = *((unsigned int *)v9 + 8);
      v12 = *(__int128 **)(v2067 + 5128);
      v13 = *(__int128 **)(v2067 + 5136);
      v14 = v12;
      if (v13 != v12)
      {
        v15 = v13 - v12;
        v14 = *(__int128 **)(v2067 + 5128);
        do
        {
          v16 = v15 >> 1;
          v17 = (unsigned int *)&v14[v15 >> 1];
          v19 = *v17;
          v18 = (__int128 *)(v17 + 4);
          v15 += ~(v15 >> 1);
          if (v19 < v11)
            v14 = v18;
          else
            v15 = v16;
        }
        while (v15);
      }
      if (v14 != v13 && *(_DWORD *)v14 == (_DWORD)v11)
        goto LABEL_49;
      if (v13 == v12)
      {
        v12 = *(__int128 **)(v2067 + 5136);
      }
      else
      {
        v20 = v13 - v12;
        do
        {
          v21 = v20 >> 1;
          v22 = (unsigned int *)&v12[v20 >> 1];
          v24 = *v22;
          v23 = (__int128 *)(v22 + 4);
          v20 += ~(v20 >> 1);
          if (v24 < v11)
            v12 = v23;
          else
            v20 = v21;
        }
        while (v20);
      }
      _D8 = *((double *)v9 + 13);
      v4 = *((int64x2_t *)v9 + 7);
      v26 = *(unsigned __int8 *)(v2067 + 1720);
      v0 = v0 & 0xFFFFFF0000000000 | v11 | (v26 << 32);
      v27 = *(unsigned __int8 *)(v2067 + 1788);
      if (v13 != v12 && (_DWORD)v11 == *(_DWORD *)v12)
        goto LABEL_49;
      *(_OWORD *)__dsta = *((_OWORD *)v9 + 4);
      v2026 = *((float64x2_t *)v9 + 7);
      v2029 = *((double *)v9 + 16);
      v2036 = *(int64x2_t *)(v9 + 5);
      __szj = *(int64x2_t *)(v9 + 11);
      v3.i64[0] = v9[10];
      v2055 = v3;
      v2.f64[0] = (float64_t)v9[7];
      v2063 = v2;
      v28 = (_DWORD)v26 == 0;
      v29 = sub_20F61B11C(v2021);
      v30 = (float64x2_t)vzip1q_s64(v2036, *(int64x2_t *)__dsta);
      _Q1 = (float64x2_t)vzip2q_s64(v2036, *(int64x2_t *)__dsta);
      _Q19 = (float64x2_t)__szj;
      _D18 = v2055.i64[0];
      v34 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q1, 1);
      v35 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q1.f64[0], 0);
      _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v30, v2026.f64[0]), _Q1, v2026, 1), (float64x2_t)vzip1q_s64((int64x2_t)v2063, v2055), v2029);
      _D2 = v2026.f64[1];
      __asm { FMLA            D1, D2, V19.D[1] }
      _Q1.f64[0] = _Q1.f64[0] + _D8 * v2029;
      v40 = vnegq_f64(_Q0);
      v41 = (int64x2_t)vextq_s8(v35, v34, 8uLL);
      v42 = (float64x2_t)vzip1q_s64(v2036, v41);
      v43 = (float64x2_t)vzip2q_s64((int64x2_t)v30, v41);
      *(_QWORD *)&_Q19.f64[1] = vdupq_laneq_s64(__szj, 1).u64[0];
      v44 = vmlsq_laneq_f64(vmulq_n_f64(v42, v40.f64[0]), v43, _Q0, 1);
      *(_DWORD *)v29 = -1;
      *(_BYTE *)(v29 + 4) = 1;
      *(_DWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v29 + 16) = v0;
      *(_QWORD *)(v29 + 24) = v9 + 5;
      *(float64_t *)(v29 + 48) = v2063.f64[0];
      *(_QWORD *)&v42.f64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
      *(float64x2_t *)(v29 + 32) = v42;
      v45 = (int8x16_t)vnegq_f64(vmlsq_lane_f64(v44, _Q19, _Q1.f64[0], 0));
      *(_QWORD *)&v43.f64[1] = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u64[0];
      *(_QWORD *)(v29 + 72) = v2055.i64[0];
      *(float64x2_t *)(v29 + 56) = v43;
      *(double *)(v29 + 96) = _D8;
      *(_QWORD *)&_Q19.f64[1] = vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL).u64[0];
      *(float64x2_t *)(v29 + 80) = _Q19;
      v45.i64[1] = vextq_s8(v45, v45, 8uLL).u64[0];
      _Q2 = vmulq_f64(v2063, v40);
      __asm
      {
        FMLS            D2, D18, V0.D[1]
        FMLS            D2, D8, V1.D[0]
      }
      *(_QWORD *)(v29 + 120) = *(_OWORD *)&vnegq_f64(_Q2);
      *(int8x16_t *)(v29 + 104) = v45;
      *(_WORD *)(v29 + 128) = v27 | 0x100;
      *(_QWORD *)(v29 + 136) = 0x3FF0000000000000;
      *(_QWORD *)(v29 + 144) = 0;
      *(_QWORD *)(v29 + 152) = 0;
      *(_QWORD *)(v29 + 160) = 0;
      *(_QWORD *)(v29 + 168) = 0x3FF0000000000000;
      *(_QWORD *)(v29 + 176) = 0;
      *(_QWORD *)(v29 + 184) = 0;
      *(_QWORD *)(v29 + 192) = 0;
      *(_QWORD *)(v29 + 200) = 0x3FF0000000000000;
      *(_QWORD *)(v29 + 208) = 0;
      *(_QWORD *)(v29 + 216) = 0;
      *(_QWORD *)(v29 + 224) = 0;
      *(_DWORD *)object = v11;
      *(_QWORD *)&object[8] = v29;
      sub_20F61AEB4(v2007, v12, (uint64_t)object);
      if (!v28)
        break;
LABEL_48:
      v2018[2] = 0;
      *v2018 = 0;
      *(_DWORD *)v2005 = 0;
      v2005[4] = 0;
LABEL_49:
      v67 = (_QWORD *)v9[1];
      if (v67)
      {
        do
        {
          v68 = v67;
          v67 = (_QWORD *)*v67;
        }
        while (v67);
      }
      else
      {
        do
        {
          v68 = (_QWORD *)v9[2];
          _ZF = *v68 == (_QWORD)v9;
          v9 = v68;
        }
        while (!_ZF);
      }
      v9 = v68;
      if (v68 == v10)
      {
        v69 = v2067;
        v8 = *(_QWORD *)(v2067 + 8);
        goto LABEL_57;
      }
    }
    v47 = *(char **)(v2067 + 6280);
    v48 = *(_QWORD *)(v2067 + 6288);
    if ((unint64_t)v47 < v48)
    {
      *(_DWORD *)v47 = v11;
      v49 = (uint64_t)(v47 + 4);
LABEL_47:
      *(_QWORD *)(v2067 + 6280) = v49;
      goto LABEL_48;
    }
    v50 = (char *)*v2003;
    v51 = v47 - (_BYTE *)*v2003;
    v52 = v51 >> 2;
    v53 = (v51 >> 2) + 1;
    if (v53 >> 62)
      sub_20E867F44();
    v54 = v48 - (_QWORD)v50;
    if (v54 >> 1 > v53)
      v53 = v54 >> 1;
    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
      v55 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v55 = v53;
    if (v55)
    {
      if (v55 >> 62)
        sub_20E877A38();
      v56 = operator new(4 * v55);
      v57 = &v56[4 * v52];
      *v57 = v11;
      v49 = (uint64_t)(v57 + 1);
      v58 = v47 - v50;
      if (v47 == v50)
        goto LABEL_45;
    }
    else
    {
      v56 = 0;
      v57 = (_DWORD *)(4 * v52);
      *(_DWORD *)(4 * v52) = v11;
      v49 = 4 * v52 + 4;
      v58 = v47 - v50;
      if (v47 == v50)
      {
LABEL_45:
        *(_QWORD *)(v2067 + 6272) = v57;
        *(_QWORD *)(v2067 + 6280) = v49;
        *(_QWORD *)(v2067 + 6288) = &v56[4 * v55];
        if (v50)
          operator delete(v50);
        goto LABEL_47;
      }
    }
    v59 = v58 - 4;
    if (v59 < 0x2C)
      goto LABEL_1907;
    if ((unint64_t)(v47 - v56 - v51) < 0x20)
      goto LABEL_1907;
    v60 = (v59 >> 2) + 1;
    v61 = 4 * (v60 & 0x7FFFFFFFFFFFFFF8);
    v62 = &v47[-v61];
    v57 = (_DWORD *)((char *)v57 - v61);
    v63 = (float64x2_t *)&v56[4 * v52 - 16];
    v64 = (float64x2_t *)(v47 - 16);
    v65 = v60 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v3 = (int64x2_t)v64[-1];
      v2 = *v64;
      v63[-1] = (float64x2_t)v3;
      *v63 = v2;
      v63 -= 2;
      v64 -= 2;
      v65 -= 8;
    }
    while (v65);
    v47 = v62;
    if (v60 != (v60 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_1907:
      do
      {
        v66 = *((_DWORD *)v47 - 1);
        v47 -= 4;
        *--v57 = v66;
      }
      while (v47 != v50);
    }
    goto LABEL_45;
  }
  v69 = v1;
LABEL_57:
  v2008 = *(_BYTE *)(v69 + 1730);
  v2004 = (_QWORD *)(v69 + 4832);
  if (*v2018)
  {
    if (!((*(_QWORD *)(v69 + 5232) - *(_QWORD *)(v69 + 5224)) >> 4))
      goto LABEL_91;
    goto LABEL_90;
  }
  memset(object, 0, 32);
  if (!sub_20F5B8114((_QWORD *)(v69 + 4832), (int *)object, v2182, 1))
  {
    if (!*(_DWORD *)&v2182[16])
      goto LABEL_91;
    goto LABEL_90;
  }
  *(_QWORD *)(v69 + 6400) = *(_QWORD *)(v69 + 6392);
  *(_QWORD *)(v69 + 6424) = *(_QWORD *)(v69 + 6416);
  *(_QWORD *)(v69 + 6448) = *(_QWORD *)(v69 + 6440);
  *(_QWORD *)(v69 + 6472) = *(_QWORD *)(v69 + 6464);
  *(_QWORD *)(v69 + 6496) = *(_QWORD *)(v69 + 6488);
  *(_QWORD *)(v69 + 6520) = *(_QWORD *)(v69 + 6512);
  *(_QWORD *)(v69 + 6544) = *(_QWORD *)(v69 + 6536);
  *(_QWORD *)(v69 + 6568) = *(_QWORD *)(v69 + 6560);
  v70 = *(_QWORD *)(v69 + 5608);
  v71 = *(_QWORD *)(v69 + 5616);
  while (v70 != v71)
  {
    v72 = *(_QWORD *)(v70 + 208);
    if (*(_BYTE *)(v70 + 496) || (*(_BYTE *)(v72 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v70 + 216) + 4) & 6) != 0)
    {
      sub_20F394A20(v69 + 6392, v72);
      sub_20F3D35E0((_QWORD *)(v69 + 6392), *(_QWORD *)(v70 + 216));
    }
    v70 += 504;
  }
  v73 = *(_QWORD *)(v69 + 5632);
  v74 = *(_QWORD *)(v69 + 5640);
  while (v73 != v74)
  {
    v75 = *(_QWORD *)(v73 + 136);
    if (*(_BYTE *)(v73 + 272) || (*(_BYTE *)(v75 + 4) & 6) != 0)
      sub_20F394A20(v69 + 6392, v75);
    v73 += 280;
  }
  sub_20F5B8680(*(_QWORD *)(v69 + 5656), *(_QWORD *)(v69 + 5664), (_QWORD *)(v69 + 6392));
  sub_20F5B85BC(*(_QWORD *)(v69 + 5680), *(_QWORD *)(v69 + 5688), (_QWORD *)(v69 + 6392));
  sub_20F5B8444(*(_QWORD *)(v69 + 5704), *(_QWORD *)(v69 + 5712), (_QWORD *)(v69 + 6392));
  v76 = *(_QWORD *)(v69 + 5728);
  v77 = *(_QWORD *)(v69 + 5736);
  while (v76 != v77)
  {
    v78 = *(_QWORD *)(v76 + 736);
    if (*(_BYTE *)(v76 + 880) || (*(_BYTE *)(v78 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v76 + 744) + 4) & 6) != 0)
    {
      sub_20F394A20(v69 + 6392, v78);
      sub_20F394A20(v69 + 6392, *(_QWORD *)(v76 + 744));
    }
    v76 += 888;
  }
  v79 = (*(_QWORD *)(v69 + 6496) - *(_QWORD *)(v69 + 6488)) >> 2;
  if (*(_DWORD *)&object[16] > v79)
    LODWORD(v79) = *(_DWORD *)&object[16];
  _CF = *(_DWORD *)&v2182[16] >= v79;
  v80 = *(_DWORD *)&v2182[16] - v79;
  if (_CF)
    v81 = v80;
  else
    v81 = 0;
  sub_20F59A618(v2004);
  if (v81)
  {
LABEL_90:
    v69 = v2067;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 271, (uint64_t)"!this->linear_system_.graph().template numberOfVariable<VARIABLE_TYPE>()", 72, (uint64_t)"CameraCalibVariables of this type have already been added.", 58, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
LABEL_91:
  v82 = *(double *)(v8 + 336);
  if (v82 != 0.0)
  {
    v2001 = (char **)(v69 + 5224);
    *(_QWORD *)&v2026.f64[0] = &v2182[32];
    v1989.i64[0] = (uint64_t)&object[72];
    v1987.i64[0] = (uint64_t)&object[160];
    v1985.i64[0] = (uint64_t)&object[192];
    v1965 = (void **)(v69 + 6296);
    v1975 = v69 + 6584;
    while (1)
    {
      LODWORD(v2149[0]) = *(_DWORD *)(*(_QWORD *)&v82 + 16);
      BYTE4(v2149[0]) = 1;
      v2149[1] = (void *)(*(_QWORD *)&v82 + 24);
      memset(&v2150[48], 0, 56);
      *(_DWORD *)&v2150[104] = 1065353216;
      *(_WORD *)&v2150[112] = 1;
      v83 = *(_OWORD *)(*(_QWORD *)&v82 + 40);
      *(_OWORD *)v2150 = *(_OWORD *)(*(_QWORD *)&v82 + 24);
      *(_OWORD *)&v2150[16] = v83;
      v84 = *(_QWORD *)(*(_QWORD *)&v82 + 56);
      v2063.f64[0] = v82;
      v2150[40] = *(_BYTE *)(*(_QWORD *)&v82 + 64);
      *(_QWORD *)&v2150[32] = v84;
      sub_20F6169C8((uint64_t)v2149);
      sub_20F616F2C((uint64_t)v2149);
      BYTE4(v2149[0]) = v2008;
      v85 = *((_OWORD *)v2149[1] + 1);
      *(_OWORD *)v2150 = *(_OWORD *)v2149[1];
      *(_OWORD *)&v2150[16] = v85;
      v86 = *((_BYTE *)v2149[1] + 40);
      *(_QWORD *)&v2150[32] = *((_QWORD *)v2149[1] + 4);
      v2150[40] = v86;
      sub_20F6169C8((uint64_t)v2149);
      sub_20F616F2C((uint64_t)v2149);
      v87 = (int)v2149[0];
      v88 = *(__int128 **)(v69 + 5224);
      v89 = *(__int128 **)(v69 + 5232);
      if (v89 == v88)
      {
        v88 = *(__int128 **)(v69 + 5232);
      }
      else
      {
        v90 = v89 - v88;
        do
        {
          v91 = v90 >> 1;
          v92 = &v88[v90 >> 1];
          v94 = *(_DWORD *)v92;
          v93 = v92 + 1;
          v90 += ~(v90 >> 1);
          if (v94 < LODWORD(v2149[0]))
            v88 = v93;
          else
            v90 = v91;
        }
        while (v90);
        if (v89 != v88 && LODWORD(v2149[0]) == *(_DWORD *)v88)
        {
          v2056 = *(char **)(v69 + 5232);
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 283, (uint64_t)"result", 6, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          goto LABEL_155;
        }
      }
      v95 = BYTE4(v2149[0]);
      v2182[4] = 1;
      *(_DWORD *)v2182 = -1;
      *(_DWORD *)&v2182[8] = 0;
      v96 = v2149[0];
      v97 = v2149[1];
      *(_OWORD *)&v2182[16] = *(_OWORD *)v2149;
      *(_OWORD *)&v2182[32] = *(_OWORD *)v2150;
      *(_OWORD *)&v2182[48] = *(_OWORD *)&v2150[16];
      *(_OWORD *)&v2182[64] = *(_OWORD *)&v2150[32];
      v98 = *(_QWORD *)&v2150[48];
      v99 = *(_QWORD *)&v2150[56];
      *(_QWORD *)&v2182[80] = *(_QWORD *)&v2150[48];
      *(_QWORD *)&v2182[88] = *(_QWORD *)&v2150[56];
      memset(&v2150[48], 0, 40);
      v100 = *(_QWORD *)&v2150[64];
      v101 = *(_QWORD *)&v2150[72];
      *(_QWORD *)&v2182[96] = *(_QWORD *)&v2150[64];
      *(_QWORD *)&v2182[104] = *(_QWORD *)&v2150[72];
      v102 = *(_QWORD *)&v2150[80];
      v103 = *(_QWORD *)&v2150[88];
      *(_QWORD *)&v2182[112] = *(_QWORD *)&v2150[80];
      *(_QWORD *)&v2182[120] = *(_QWORD *)&v2150[88];
      v104 = *(_QWORD *)&v2150[96];
      *(_QWORD *)&v2182[128] = *(_QWORD *)&v2150[96];
      v105 = *(_DWORD *)&v2150[104];
      *(_DWORD *)&v2182[136] = *(_DWORD *)&v2150[104];
      if (*(_QWORD *)&v2150[96])
      {
        v106 = *(_QWORD *)(*(_QWORD *)&v2150[88] + 8);
        if ((*(_QWORD *)&v2150[80] & (*(_QWORD *)&v2150[80] - 1)) != 0)
        {
          if (v106 >= *(_QWORD *)&v2150[80])
            v106 %= *(_QWORD *)&v2150[80];
        }
        else
        {
          v106 &= *(_QWORD *)&v2150[80] - 1;
        }
        *(_QWORD *)(*(_QWORD *)&v2150[72] + 8 * v106) = &v2182[120];
        *(_QWORD *)&v2150[88] = 0;
        *(_QWORD *)&v2150[96] = 0;
        v97 = *(void **)&v2182[24];
        v96 = *(void **)&v2182[16];
        v98 = *(_QWORD *)&v2182[80];
        v99 = *(_QWORD *)&v2182[88];
        v100 = *(_QWORD *)&v2182[96];
        v101 = *(_QWORD *)&v2182[104];
        v102 = *(_QWORD *)&v2182[112];
        v103 = *(_QWORD *)&v2182[120];
        v104 = *(_QWORD *)&v2182[128];
        v105 = *(_DWORD *)&v2182[136];
      }
      v107 = *(_WORD *)&v2150[112];
      *(_WORD *)&v2182[144] = *(_WORD *)&v2150[112];
      v2182[192] = 0;
      memset(&v2182[152], 0, 33);
      *(_DWORD *)object = v87;
      *(_QWORD *)&object[8] = *(_QWORD *)v2182;
      *(_DWORD *)&object[16] = *(_DWORD *)&v2182[8];
      *(_QWORD *)&object[24] = v96;
      *(_QWORD *)&object[32] = v97;
      *(_OWORD *)&object[40] = *(_OWORD *)&v2182[32];
      *(_OWORD *)&object[56] = *(_OWORD *)&v2182[48];
      *(_OWORD *)&object[72] = *(_OWORD *)&v2182[64];
      *(_QWORD *)&object[88] = v98;
      *(_QWORD *)&object[96] = v99;
      memset(&v2182[80], 0, 40);
      *(_QWORD *)&object[104] = v100;
      *(_QWORD *)&object[112] = v101;
      *(_QWORD *)&object[120] = v102;
      *(_QWORD *)&object[128] = v103;
      *(_QWORD *)&object[136] = v104;
      *(_DWORD *)&object[144] = v105;
      if (v104)
      {
        v108 = *(_QWORD *)(v103 + 8);
        if ((v102 & (v102 - 1)) != 0)
        {
          if (v108 >= v102)
            v108 %= v102;
        }
        else
        {
          v108 &= v102 - 1;
        }
        *(_QWORD *)(v101 + 8 * v108) = &object[128];
        *(_QWORD *)&v2182[120] = 0;
        *(_QWORD *)&v2182[128] = 0;
        v107 = *(_WORD *)&v2182[144];
      }
      *(_WORD *)&object[152] = v107;
      *(_OWORD *)&object[160] = *(_OWORD *)&v2182[152];
      *(_OWORD *)&object[176] = *(_OWORD *)&v2182[168];
      *(_OWORD *)&object[192] = *(_OWORD *)&v2182[184];
      v2056 = sub_20F61B41C(v2001, v88, (int *)object);
      v109 = *(_QWORD **)&object[128];
      if (*(_QWORD *)&object[128])
      {
        do
        {
          v110 = (_QWORD *)*v109;
          operator delete(v109);
          v109 = v110;
        }
        while (v110);
      }
      v111 = *(void **)&object[112];
      *(_QWORD *)&object[112] = 0;
      if (v111)
        operator delete(v111);
      if (*(_QWORD *)&object[88])
      {
        *(_QWORD *)&object[96] = *(_QWORD *)&object[88];
        operator delete(*(void **)&object[88]);
      }
      v112 = *(_QWORD **)&v2182[120];
      if (*(_QWORD *)&v2182[120])
      {
        do
        {
          v113 = (_QWORD *)*v112;
          operator delete(v112);
          v112 = v113;
        }
        while (v113);
      }
      v114 = *(void **)&v2182[104];
      *(_QWORD *)&v2182[104] = 0;
      if (v114)
        operator delete(v114);
      if (*(_QWORD *)&v2182[80])
      {
        *(_QWORD *)&v2182[88] = *(_QWORD *)&v2182[80];
        operator delete(*(void **)&v2182[80]);
      }
      if (v95)
        break;
LABEL_154:
      v2018[2] = 0;
      *v2018 = 0;
      *(_DWORD *)v1975 = 0;
      *(_BYTE *)(v1975 + 4) = 0;
LABEL_155:
      memset(object, 0, 32);
      *(_DWORD *)&object[32] = 1065353216;
      v136 = *(uint64_t ***)(v69 + 128);
      v137 = *v136;
      v138 = v136[1];
      while (v137 != v138)
      {
        v139 = (__int128 *)*v137;
        if (*(_QWORD *)(*v137 + 24))
        {
          if (*((_DWORD *)v139 + 4) != *(_DWORD *)(*(_QWORD *)&v82 + 16))
            goto LABEL_156;
LABEL_171:
          v145 = *v139;
          *(_QWORD *)&v2182[16] = *((_QWORD *)v139 + 2);
          *(_OWORD *)v2182 = v145;
          *(_OWORD *)&v2182[24] = *(__int128 *)((char *)v139 + 24);
          sub_20F61A180((uint64_t)object, (uint64_t *)v2182, (uint64_t)v2182);
          goto LABEL_156;
        }
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 288, (uint64_t)"frame->lens_model_", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v140 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v140 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (byte_254A6DE68)
          _ZF = byte_254A6DE70 == 0;
        else
          _ZF = 0;
        if (!_ZF)
        {
          v142 = qword_254A6DE40;
          for (i = qword_254A6DE48; v142 != i; v142 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v142)(*(_QWORD *)(v142 + 8), "frame->lens_model_", 18, "", 0);
        }
        v144 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v144 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "frame->lens_model_", 18, "", 0);
        v139 = (__int128 *)*v137;
        if (*(_DWORD *)(*v137 + 16) == *(_DWORD *)(*(_QWORD *)&v82 + 16))
          goto LABEL_171;
LABEL_156:
        v137 += 2;
      }
      v146 = *((_QWORD *)v2056 + 1);
      if (*(_QWORD *)(v146 + 128))
      {
        v147 = *(_QWORD **)(v146 + 120);
        if (v147)
        {
          do
          {
            v148 = (_QWORD *)*v147;
            operator delete(v147);
            v147 = v148;
          }
          while (v148);
        }
        *(_QWORD *)(v146 + 120) = 0;
        v149 = *(_QWORD *)(v146 + 112);
        if (v149)
        {
          for (j = 0; j != v149; ++j)
            *(_QWORD *)(*(_QWORD *)(v146 + 104) + 8 * j) = 0;
        }
        *(_QWORD *)(v146 + 128) = 0;
      }
      v151 = *(_QWORD *)object;
      *(_QWORD *)object = 0;
      v152 = *(void **)(v146 + 104);
      *(_QWORD *)(v146 + 104) = v151;
      if (v152)
        operator delete(v152);
      v153 = *(_QWORD *)&object[8];
      v154 = *(_QWORD *)&object[16];
      *(_QWORD *)(v146 + 120) = *(_QWORD *)&object[16];
      *(_QWORD *)(v146 + 112) = v153;
      *(_QWORD *)&object[8] = 0;
      v155 = *(_QWORD *)&object[24];
      *(_QWORD *)(v146 + 128) = *(_QWORD *)&object[24];
      *(_DWORD *)(v146 + 136) = *(_DWORD *)&object[32];
      if (v155)
      {
        v156 = *(_QWORD *)(v154 + 8);
        if ((v153 & (v153 - 1)) != 0)
        {
          if (v156 >= v153)
            v156 %= v153;
        }
        else
        {
          v156 &= v153 - 1;
        }
        *(_QWORD *)(*(_QWORD *)(v146 + 104) + 8 * v156) = v146 + 120;
        *(_QWORD *)&object[16] = 0;
        *(_QWORD *)&object[24] = 0;
      }
      sub_20F6169C8(v146 + 16);
      sub_20F616F2C(v146 + 16);
      memset(v2182, 0, 24);
      v157 = *(_QWORD **)(v69 + 16);
      v158 = v157[2];
      if (v158)
      {
        if (v158 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        v159 = (char *)operator new(24 * v158);
        *(_QWORD *)v2182 = v159;
        *(_QWORD *)&v2182[8] = v159;
        *(_QWORD *)&v2182[16] = &v159[24 * v158];
        v162 = (_QWORD *)*v157;
        v160 = v157 + 1;
        v161 = v162;
        if (v162 == v160)
          goto LABEL_196;
LABEL_211:
        while (2)
        {
          v173 = v161[6];
          if (*(_BYTE *)(v173 + 528))
            v174 = v173 + 40;
          else
            v174 = 0;
          if (*(_BYTE *)(v173 + 528))
          {
            v175 = *(_DWORD *)(v173 + 88);
            if (v175 == *(_DWORD *)(*(_QWORD *)&v82 + 16))
            {
              v176 = *(_QWORD *)(v173 + 536);
              v177 = *(_QWORD *)(v173 + 544);
              v178 = *(_QWORD *)(v173 + 72);
              v179 = *(_DWORD *)(v173 + 80);
              if (v177 != v176)
              {
                v180 = (v177 - v176) >> 5;
                while (1)
                {
                  v181 = v180 >> 1;
                  v182 = v176 + 32 * (v180 >> 1);
                  v183 = *(_DWORD *)(v182 + 16);
                  _CF = v183 >= v175;
                  if (v183 != v175)
                    goto LABEL_224;
                  if (*(_QWORD *)v182 >= v178)
                    break;
LABEL_218:
                  v176 = v182 + 32;
                  v181 = v180 + ~v181;
LABEL_219:
                  v180 = v181;
                  if (!v181)
                    goto LABEL_227;
                }
                if (*(_QWORD *)v182 != v178)
                  goto LABEL_219;
                _CF = *(_DWORD *)(v182 + 8) >= v179;
LABEL_224:
                if (_CF)
                  goto LABEL_219;
                goto LABEL_218;
              }
LABEL_227:
              if (v176 != v177
                && *(_DWORD *)(v176 + 16) == v175
                && *(_QWORD *)v176 == v178
                && *(_DWORD *)(v176 + 8) == v179)
              {
                v185 = *(_QWORD *)(v176 + 24);
                v186 = *(_DWORD *)(v173 + 32);
                v187 = *(_QWORD *)&v2182[16];
                if ((unint64_t)v159 >= *(_QWORD *)&v2182[16])
                  goto LABEL_232;
LABEL_242:
                *(_DWORD *)v159 = v186;
                v194 = v159 + 24;
                *((_QWORD *)v159 + 1) = v185;
                *((_QWORD *)v159 + 2) = v174;
                v82 = v2063.f64[0];
              }
              else
              {
                v185 = 0;
                v186 = *(_DWORD *)(v173 + 32);
                v187 = *(_QWORD *)&v2182[16];
                if ((unint64_t)v159 < *(_QWORD *)&v2182[16])
                  goto LABEL_242;
LABEL_232:
                v188 = *(char **)v2182;
                v189 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v159[-*(_QWORD *)v2182] >> 3);
                v190 = v189 + 1;
                if (v189 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_20E867F44();
                v191 = 0xAAAAAAAAAAAAAAABLL * ((v187 - *(_QWORD *)v2182) >> 3);
                if (2 * v191 > v190)
                  v190 = 2 * v191;
                if (v191 >= 0x555555555555555)
                  v192 = 0xAAAAAAAAAAAAAAALL;
                else
                  v192 = v190;
                if (v192)
                {
                  if (v192 > 0xAAAAAAAAAAAAAAALL)
                    sub_20E877A38();
                  v193 = (char *)operator new(24 * v192);
                }
                else
                {
                  v193 = 0;
                }
                v195 = &v193[24 * v189];
                *(_DWORD *)v195 = v186;
                *((_QWORD *)v195 + 1) = v185;
                *((_QWORD *)v195 + 2) = v174;
                v196 = v195;
                if (v159 == v188)
                {
                  v69 = v2067;
                  v82 = v2063.f64[0];
                }
                else
                {
                  v69 = v2067;
                  v82 = v2063.f64[0];
                  do
                  {
                    v197 = *(_OWORD *)(v159 - 24);
                    *((_QWORD *)v196 - 1) = *((_QWORD *)v159 - 1);
                    *(_OWORD *)(v196 - 24) = v197;
                    v196 -= 24;
                    v159 -= 24;
                  }
                  while (v159 != v188);
                  v159 = *(char **)v2182;
                }
                v198 = &v193[24 * v192];
                v194 = v195 + 24;
                *(_QWORD *)v2182 = v196;
                *(_QWORD *)&v2182[8] = v195 + 24;
                *(_QWORD *)&v2182[16] = v198;
                if (v159)
                  operator delete(v159);
              }
              *(_QWORD *)&v2182[8] = v194;
              v159 = v194;
            }
          }
          v199 = (_QWORD *)v161[1];
          if (v199)
          {
            do
            {
              v200 = v199;
              v199 = (_QWORD *)*v199;
            }
            while (v199);
          }
          else
          {
            do
            {
              v200 = (_QWORD *)v161[2];
              _ZF = *v200 == (_QWORD)v161;
              v161 = v200;
            }
            while (!_ZF);
          }
          v161 = v200;
          if (v200 == v160)
            goto LABEL_196;
          continue;
        }
      }
      v159 = 0;
      v163 = (_QWORD *)*v157;
      v160 = v157 + 1;
      v161 = v163;
      if (v163 != v160)
        goto LABEL_211;
LABEL_196:
      v164 = (_QWORD *)*((_QWORD *)v2056 + 1);
      v165 = (void *)v164[10];
      if (v165)
      {
        v164[11] = v165;
        operator delete(v165);
        v164[10] = 0;
        v164[11] = 0;
        v164[12] = 0;
        v159 = *(char **)&v2182[8];
      }
      v166 = *(_QWORD *)&v2182[16];
      v164[10] = *(_QWORD *)v2182;
      v164[11] = v159;
      v164[12] = v166;
      memset(v2182, 0, 24);
      sub_20F616F2C((uint64_t)(v164 + 2));
      if (*(_QWORD *)v2182)
      {
        *(_QWORD *)&v2182[8] = *(_QWORD *)v2182;
        operator delete(*(void **)v2182);
      }
      v167 = *(_QWORD **)&object[16];
      if (*(_QWORD *)&object[16])
      {
        do
        {
          v168 = (_QWORD *)*v167;
          operator delete(v167);
          v167 = v168;
        }
        while (v168);
      }
      v169 = *(void **)object;
      *(_QWORD *)object = 0;
      if (v169)
        operator delete(v169);
      v170 = *(_QWORD **)&v2150[88];
      if (*(_QWORD *)&v2150[88])
      {
        do
        {
          v171 = (_QWORD *)*v170;
          operator delete(v170);
          v170 = v171;
        }
        while (v171);
      }
      v172 = *(void **)&v2150[72];
      *(_QWORD *)&v2150[72] = 0;
      if (v172)
        operator delete(v172);
      if (*(_QWORD *)&v2150[48])
      {
        *(_QWORD *)&v2150[56] = *(_QWORD *)&v2150[48];
        operator delete(*(void **)&v2150[48]);
      }
      v82 = **(double **)&v82;
      if (v82 == 0.0)
        goto LABEL_258;
    }
    v115 = *(char **)(v69 + 6304);
    v116 = *(_QWORD *)(v69 + 6312);
    if ((unint64_t)v115 < v116)
    {
      *(_DWORD *)v115 = v87;
      v117 = (uint64_t)(v115 + 4);
LABEL_153:
      *(_QWORD *)(v69 + 6304) = v117;
      goto LABEL_154;
    }
    v118 = (char *)*v1965;
    v119 = v115 - (_BYTE *)*v1965;
    v120 = v119 >> 2;
    v121 = (v119 >> 2) + 1;
    if (v121 >> 62)
      sub_20E867F44();
    v122 = v116 - (_QWORD)v118;
    if (v122 >> 1 > v121)
      v121 = v122 >> 1;
    if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL)
      v123 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v123 = v121;
    if (v123)
    {
      if (v123 >> 62)
        sub_20E877A38();
      v124 = operator new(4 * v123);
      v125 = &v124[4 * v120];
      *v125 = v87;
      v117 = (uint64_t)(v125 + 1);
      v126 = v115 - v118;
      if (v115 == v118)
        goto LABEL_150;
    }
    else
    {
      v124 = 0;
      v125 = (_DWORD *)(4 * v120);
      *(_DWORD *)(4 * v120) = v87;
      v117 = 4 * v120 + 4;
      v126 = v115 - v118;
      if (v115 == v118)
      {
LABEL_150:
        *(_QWORD *)(v69 + 6296) = v125;
        *(_QWORD *)(v69 + 6304) = v117;
        *(_QWORD *)(v69 + 6312) = &v124[4 * v123];
        if (v118)
          operator delete(v118);
        v82 = v2063.f64[0];
        goto LABEL_153;
      }
    }
    v127 = v126 - 4;
    if (v127 < 0x2C)
      goto LABEL_1908;
    if ((unint64_t)(v115 - v124 - v119) < 0x20)
      goto LABEL_1908;
    v128 = (v127 >> 2) + 1;
    v129 = 4 * (v128 & 0x7FFFFFFFFFFFFFF8);
    v130 = &v115[-v129];
    v125 = (_DWORD *)((char *)v125 - v129);
    v131 = &v124[4 * v120 - 16];
    v132 = v115 - 16;
    v133 = v128 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v134 = *(_OWORD *)v132;
      *(v131 - 1) = *((_OWORD *)v132 - 1);
      *v131 = v134;
      v131 -= 2;
      v132 -= 32;
      v133 -= 8;
    }
    while (v133);
    v115 = v130;
    if (v128 != (v128 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_1908:
      do
      {
        v135 = *((_DWORD *)v115 - 1);
        v115 -= 4;
        *--v125 = v135;
      }
      while (v115 != v118);
    }
    goto LABEL_150;
  }
LABEL_258:
  v201 = *(_QWORD *)v69;
  if (!*(_QWORD *)v69)
  {
LABEL_261:
    v227 = *(_QWORD *)(v69 + 8);
    v228 = *(_QWORD **)(v227 + 48);
    v2057 = (_QWORD *)(v227 + 56);
    if (v228 != (_QWORD *)(v227 + 56))
    {
LABEL_262:
      v1964 = (void **)(v2067 + 6200);
      v2000 = (_DWORD *)(v2067 + 6584);
      v1963 = (void **)(v2067 + 6224);
      v2030 = (float64x2_t *)(v2067 + 176);
      v1962 = (uint64_t *)(v2067 + 504);
      while (1)
      {
        v229 = v2063;
        LOBYTE(v229.f64[0]) = 0;
        v2063 = v229;
        v230 = *v2015;
        v231 = v2015[1];
        if (*v2015 != v231)
        {
          while (*(_DWORD *)v230 != *((_DWORD *)v228 + 10))
          {
            v230 += 48;
            if (v230 == v231)
              goto LABEL_278;
          }
        }
        if (v230 == v231)
        {
LABEL_278:
          v232 = 1;
          v233 = v228[4];
          v234 = *((unsigned int *)v228 + 10);
          v235 = v2067;
          if (*(_BYTE *)(v2067 + 2145))
            goto LABEL_279;
        }
        else
        {
          *(_OWORD *)__sz = *(_OWORD *)(v230 + 32);
          v2064 = *(float64x2_t *)(v230 + 16);
          if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtzq_f64(v2064), (int32x4_t)vcgtzq_f64(*(float64x2_t *)__sz))))) & 1) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2478, (uint64_t)"(scales.e() > .0).all()", 23, (uint64_t)"IMU noise scaling must be nonzero.", 34, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v232 = 0;
          v2026 = vmulq_f64(*(float64x2_t *)__sz, *(float64x2_t *)(v2067 + 192));
          v229 = vmulq_f64(v2064, *v2030);
          v2063 = v229;
          v233 = v228[4];
          v234 = *((unsigned int *)v228 + 10);
          v235 = v2067;
          if (*(_BYTE *)(v2067 + 2145))
          {
LABEL_279:
            v246 = *(_QWORD *)(v235 + 8);
            v241 = v234;
            v242 = 0;
            v247 = *(uint64_t **)(v246 + 56);
            v243 = (uint64_t *)(v246 + 56);
            v244 = v247;
            if (!v247)
              goto LABEL_305;
            goto LABEL_282;
          }
        }
        v236 = *(_QWORD *)(v235 + 8);
        v237 = *(_QWORD *)(v236 + 48);
        v238 = *(_QWORD *)(v237 + 32);
        v239 = *(_DWORD *)(v237 + 40);
        if (v233 == v238 && (_DWORD)v234 == v239)
        {
          v242 = 1;
          v241 = v234;
          v248 = *(uint64_t **)(v236 + 56);
          v243 = (uint64_t *)(v236 + 56);
          v244 = v248;
          if (!v248)
            goto LABEL_305;
        }
        else
        {
          v241 = v234;
          v242 = 0;
          v245 = *(uint64_t **)(v236 + 56);
          v243 = (uint64_t *)(v236 + 56);
          v244 = v245;
          if (!v245)
            goto LABEL_305;
        }
LABEL_282:
        v249 = v243;
        do
        {
          v250 = v244[4];
          if (v250 < v233)
          {
            ++v244;
          }
          else if (v250 == v233)
          {
            if (*((_DWORD *)v244 + 10) < v241)
              ++v244;
            else
              v249 = v244;
          }
          else
          {
            v249 = v244;
          }
          v244 = (uint64_t *)*v244;
        }
        while (v244);
        if (v249 != v243)
        {
          v251 = v249[4];
          if (v233 >= v251 && (v233 != v251 || *((_DWORD *)v249 + 10) <= v241))
          {
            v252 = v249[6];
            if (v252)
            {
              v253 = v234;
              if ((v242 & 1) != 0
                || (v253 = v234 | 0x100000000, v254 = v234 | 0x100000000, !*(_BYTE *)(v2067 + 2146)))
              {
                v254 = v234;
                v255 = *(__int128 **)(v2067 + 4840);
                v256 = *(__int128 **)(v2067 + 4848);
                v257 = (char *)v256 - (char *)v255;
                if (v256 != v255)
                  goto LABEL_299;
              }
              else
              {
                v255 = *(__int128 **)(v2067 + 4840);
                v256 = *(__int128 **)(v2067 + 4848);
                v257 = (char *)v256 - (char *)v255;
                if (v256 != v255)
                {
LABEL_299:
                  v258 = v257 >> 4;
                  do
                  {
                    v259 = v258 >> 1;
                    v260 = (unsigned int *)&v255[v258 >> 1];
                    v262 = *v260;
                    v261 = (__int128 *)(v260 + 4);
                    v258 += ~(v258 >> 1);
                    if (v262 < v253)
                      v255 = v261;
                    else
                      v258 = v259;
                  }
                  while (v258);
LABEL_488:
                  __szc = (void *)v234;
                  v2010 = v232;
                  if (v256 != v255 && *(_DWORD *)v255 == (_DWORD)v253)
                  {
                    v371 = 0;
                    goto LABEL_515;
                  }
                  v1966 = *(int64x2_t *)(v252 + 24);
                  v1971 = *(int64x2_t *)v252;
                  v4.i64[0] = *(_QWORD *)(v252 + 16);
                  v1976 = v4;
                  v1980 = *(float64x2_t *)(v252 + 72);
                  v1985.i64[0] = *(_QWORD *)(v252 + 88);
                  v1987 = *(int8x16_t *)(v252 + 48);
                  v1989.i64[0] = *(_QWORD *)(v252 + 64);
                  v229.f64[0] = *(float64_t *)(v252 + 40);
                  *(float64x2_t *)categoryf = v229;
                  *(_OWORD *)v2182 = *(_OWORD *)(v252 + 792);
                  *(_QWORD *)&v2182[16] = *(_QWORD *)(v252 + 808);
                  *(_OWORD *)&object[7] = *(_OWORD *)(v252 + 768);
                  *(_QWORD *)&object[23] = *(_QWORD *)(v252 + 784);
                  v372 = (char *)sub_20F61BD6C(v2067 + 4864);
                  _D3 = vextq_s8(v1987, v1987, 8uLL).u64[0];
                  v374 = (float64x2_t)vzip1q_s64(v1971, v1966);
                  *(_QWORD *)&v375 = vextq_s8((int8x16_t)v374, (int8x16_t)v374, 8uLL).u64[0];
                  _Q5 = (float64x2_t)vzip2q_s64(v1971, v1966);
                  _D21 = categoryf[0];
                  v378 = (float64x2_t)vzip1q_s64(v1976, *(int64x2_t *)categoryf);
                  v379 = vextq_s8((int8x16_t)_Q5, (int8x16_t)vdupq_laneq_s64((int64x2_t)v1987, 1), 8uLL);
                  v380 = vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q5.f64[0], 0), v379, 8uLL);
                  v381 = (float64x2_t)vzip1q_s64((int64x2_t)v374, (int64x2_t)v380);
                  *(_QWORD *)&v374.f64[1] = v375;
                  _V20.D[1] = v1980.f64[1];
                  *(_QWORD *)&_Q5.f64[1] = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
                  v383.f64[0] = v378.f64[0];
                  *(_QWORD *)&v383.f64[1] = vextq_s8((int8x16_t)v378, (int8x16_t)v378, 8uLL).u64[0];
                  _Q4 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v374, v1980.f64[0]), _Q5, v1980, 1), v383, *(double *)v1985.i64);
                  __asm { FMLA            D5, D3, V20.D[1] }
                  _D22 = v1989.i64[0];
                  _D3 = _Q5.f64[0] + *(double *)v1989.i64 * *(double *)v1985.i64;
                  v387 = vnegq_f64(_Q4);
                  *(_QWORD *)&v388.f64[0] = v375;
                  *(_QWORD *)&v388.f64[1] = vextq_s8(v380, v380, 8uLL).u64[0];
                  v389 = (float64x2_t)vzip1q_s64((int64x2_t)v1987, vdupq_laneq_s64((int64x2_t)v379, 1));
                  v390 = vmlsq_laneq_f64(vmulq_n_f64(v381, v387.f64[0]), v388, _Q4, 1);
                  *(_DWORD *)v372 = -1;
                  v372[4] = 1;
                  *((_DWORD *)v372 + 2) = 0;
                  *((_QWORD *)v372 + 2) = v253;
                  *((_QWORD *)v372 + 3) = v252;
                  *((_QWORD *)v372 + 6) = *(_QWORD *)&v378.f64[0];
                  *(_QWORD *)&v381.f64[1] = vextq_s8((int8x16_t)v381, (int8x16_t)v381, 8uLL).u64[0];
                  *((float64x2_t *)v372 + 2) = v381;
                  *((_QWORD *)v372 + 9) = *(_QWORD *)&v383.f64[1];
                  *((_QWORD *)&v375 + 1) = *(_QWORD *)&v388.f64[1];
                  *(_OWORD *)(v372 + 56) = v375;
                  *((_QWORD *)v372 + 12) = v1989.i64[0];
                  v391 = vmlsq_lane_f64(v390, v389, _D3, 0);
                  *(_QWORD *)&v389.f64[1] = vextq_s8((int8x16_t)v389, (int8x16_t)v389, 8uLL).u64[0];
                  *((float64x2_t *)v372 + 5) = v389;
                  _Q0 = vmulq_f64(v378, v387);
                  __asm
                  {
                    FMLS            D0, D21, V4.D[1]
                    FMLS            D0, D22, V3.D[0]
                  }
                  *((_QWORD *)v372 + 15) = *(_OWORD *)&vnegq_f64(_Q0);
                  v393 = (int8x16_t)vnegq_f64(v391);
                  v393.i64[1] = vextq_s8(v393, v393, 8uLL).u64[0];
                  *(int8x16_t *)(v372 + 104) = v393;
                  v372[128] = 0;
                  *(_OWORD *)(v372 + 136) = *(_OWORD *)&object[7];
                  *((_QWORD *)v372 + 19) = *(_QWORD *)&object[23];
                  *((_OWORD *)v372 + 10) = *(_OWORD *)v2182;
                  *((_QWORD *)v372 + 22) = *(_QWORD *)&v2182[16];
                  *((_QWORD *)v372 + 23) = 0x3FF0000000000000;
                  *((_QWORD *)v372 + 24) = 0;
                  *((_QWORD *)v372 + 25) = 0;
                  *((_QWORD *)v372 + 26) = 0;
                  *((_QWORD *)v372 + 27) = 0x3FF0000000000000;
                  *((_QWORD *)v372 + 28) = 0;
                  *((_QWORD *)v372 + 29) = 0;
                  *((_QWORD *)v372 + 30) = 0;
                  *((_QWORD *)v372 + 31) = 0x3FF0000000000000;
                  *((_QWORD *)v372 + 33) = 0;
                  *((_QWORD *)v372 + 34) = 0;
                  *((_QWORD *)v372 + 32) = 0;
                  LODWORD(v2149[0]) = v253;
                  v2149[1] = v372;
                  sub_20F61BB04((char **)(v2067 + 4840), v255, (uint64_t)v2149);
                  if ((v253 & 0x100000000) != 0)
                  {
                    v394 = *(char **)(v2067 + 6208);
                    v395 = *(_QWORD *)(v2067 + 6216);
                    if ((unint64_t)v394 < v395)
                    {
                      *(_DWORD *)v394 = v253;
                      v396 = (uint64_t)(v394 + 4);
                      goto LABEL_513;
                    }
                    v397 = (char *)*v1964;
                    v398 = v394 - (_BYTE *)*v1964;
                    v399 = v398 >> 2;
                    v400 = (v398 >> 2) + 1;
                    if (v400 >> 62)
                      sub_20E867F44();
                    v401 = v395 - (_QWORD)v397;
                    if (v401 >> 1 > v400)
                      v400 = v401 >> 1;
                    if ((unint64_t)v401 >= 0x7FFFFFFFFFFFFFFCLL)
                      v402 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v402 = v400;
                    if (v402)
                    {
                      v1989.i64[0] = v394 - (_BYTE *)*v1964;
                      category = v398 >> 2;
                      if (v402 >> 62)
                        sub_20E877A38();
                      v403 = v402;
                      v404 = operator new(4 * v402);
                      v402 = v403;
                      v399 = category;
                      v398 = v1989.i64[0];
                      v405 = &v404[4 * category];
                      *v405 = v253;
                      v396 = (uint64_t)(v405 + 1);
                      v406 = v394 - v397;
                      if (v394 == v397)
                        goto LABEL_511;
LABEL_505:
                      v407 = v406 - 4;
                      if (v407 < 0x2C)
                        goto LABEL_1909;
                      if ((unint64_t)(v394 - v404 - v398) < 0x20)
                        goto LABEL_1909;
                      v408 = (v407 >> 2) + 1;
                      v409 = 4 * (v408 & 0x7FFFFFFFFFFFFFF8);
                      v410 = &v394[-v409];
                      v405 = (_DWORD *)((char *)v405 - v409);
                      v411 = &v404[4 * v399 - 16];
                      v412 = v394 - 16;
                      v413 = v408 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v414 = *(_OWORD *)v412;
                        *(v411 - 1) = *((_OWORD *)v412 - 1);
                        *v411 = v414;
                        v411 -= 2;
                        v412 -= 32;
                        v413 -= 8;
                      }
                      while (v413);
                      v394 = v410;
                      if (v408 != (v408 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_1909:
                        do
                        {
                          v415 = *((_DWORD *)v394 - 1);
                          v394 -= 4;
                          *--v405 = v415;
                        }
                        while (v394 != v397);
                      }
                    }
                    else
                    {
                      v404 = 0;
                      v405 = (_DWORD *)(4 * v399);
                      *(_DWORD *)(4 * v399) = v253;
                      v396 = 4 * v399 + 4;
                      v406 = v394 - v397;
                      if (v394 != v397)
                        goto LABEL_505;
                    }
LABEL_511:
                    *(_QWORD *)(v2067 + 6200) = v405;
                    *(_QWORD *)(v2067 + 6208) = v396;
                    *(_QWORD *)(v2067 + 6216) = &v404[4 * v402];
                    if (v397)
                      operator delete(v397);
LABEL_513:
                    *(_QWORD *)(v2067 + 6208) = v396;
                  }
                  v2018[2] = 0;
                  *v2018 = 0;
                  *v2000 = 0;
                  v371 = 1;
                  *(_BYTE *)(v2067 + 6588) = 0;
LABEL_515:
                  v416 = *(__int128 **)(v2067 + 4936);
                  v417 = *(__int128 **)(v2067 + 4944);
                  if (v417 == v416)
                  {
                    v416 = *(__int128 **)(v2067 + 4944);
                    goto LABEL_525;
                  }
                  v418 = v417 - v416;
                  do
                  {
                    v419 = v418 >> 1;
                    v420 = (unsigned int *)&v416[v418 >> 1];
                    v422 = *v420;
                    v421 = (__int128 *)(v420 + 4);
                    v418 += ~(v418 >> 1);
                    if (v422 < v254)
                      v416 = v421;
                    else
                      v418 = v419;
                  }
                  while (v418);
                  if (v417 != v416 && *(_DWORD *)v416 == (_DWORD)v254)
                    goto LABEL_549;
LABEL_525:
                  v1981 = *(int8x16_t *)(v252 + 96);
                  v1985 = *(int8x16_t *)(v252 + 112);
                  v1987 = *(int8x16_t *)(v252 + 128);
                  v1989 = *(int8x16_t *)(v252 + 144);
                  categoryg = *(_QWORD *)(v252 + 160);
                  v1977 = v371;
                  v423 = sub_20F61C2D4(v2067 + 4960);
                  v424 = v1989;
                  v425 = v1987;
                  v426 = v1985;
                  *(_DWORD *)v423 = -1;
                  v427 = v1981;
                  *(_BYTE *)(v423 + 4) = 1;
                  *(_DWORD *)(v423 + 8) = 0;
                  *(_QWORD *)(v423 + 16) = v254;
                  *(_QWORD *)(v423 + 24) = v252;
                  v427.i64[1] = vextq_s8(v427, v427, 8uLL).u64[0];
                  v426.i64[1] = vextq_s8(v426, v426, 8uLL).u64[0];
                  *(int8x16_t *)(v423 + 32) = v427;
                  *(int8x16_t *)(v423 + 48) = v426;
                  v425.i64[1] = vextq_s8(v425, v425, 8uLL).u64[0];
                  v424.i64[1] = vextq_s8(v424, v424, 8uLL).u64[0];
                  *(_QWORD *)(v423 + 96) = categoryg;
                  *(int8x16_t *)(v423 + 64) = v425;
                  *(int8x16_t *)(v423 + 80) = v424;
                  *(_BYTE *)(v423 + 104) = 0;
                  *(_DWORD *)object = v254;
                  *(_QWORD *)&object[8] = v423;
                  sub_20F61C06C((char **)(v2067 + 4936), v416, (uint64_t)object);
                  if ((v254 & 0x100000000) != 0)
                  {
                    v428 = *(char **)(v2067 + 6232);
                    v429 = *(_QWORD *)(v2067 + 6240);
                    if ((unint64_t)v428 < v429)
                    {
                      *(_DWORD *)v428 = v254;
                      v430 = (uint64_t)(v428 + 4);
                      goto LABEL_547;
                    }
                    v431 = (char *)*v1963;
                    v432 = v428 - (_BYTE *)*v1963;
                    v433 = v432 >> 2;
                    v434 = (v432 >> 2) + 1;
                    if (v434 >> 62)
                      sub_20E867F44();
                    v435 = v429 - (_QWORD)v431;
                    if (v435 >> 1 > v434)
                      v434 = v435 >> 1;
                    if ((unint64_t)v435 >= 0x7FFFFFFFFFFFFFFCLL)
                      v436 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v436 = v434;
                    if (v436)
                    {
                      if (v436 >> 62)
                        sub_20E877A38();
                      v437 = v436;
                      v438 = operator new(4 * v436);
                      v436 = v437;
                      v439 = &v438[4 * v433];
                      *v439 = v254;
                      v430 = (uint64_t)(v439 + 1);
                      v440 = v428 - v431;
                      if (v428 == v431)
                        goto LABEL_545;
LABEL_539:
                      v441 = v440 - 4;
                      if (v441 < 0x2C)
                        goto LABEL_1910;
                      if ((unint64_t)(v428 - v438 - v432) < 0x20)
                        goto LABEL_1910;
                      v442 = (v441 >> 2) + 1;
                      v443 = 4 * (v442 & 0x7FFFFFFFFFFFFFF8);
                      v444 = &v428[-v443];
                      v439 = (_DWORD *)((char *)v439 - v443);
                      v445 = &v438[4 * v433 - 16];
                      v446 = v428 - 16;
                      v447 = v442 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v448 = *(_OWORD *)v446;
                        *(v445 - 1) = *((_OWORD *)v446 - 1);
                        *v445 = v448;
                        v445 -= 2;
                        v446 -= 32;
                        v447 -= 8;
                      }
                      while (v447);
                      v428 = v444;
                      if (v442 != (v442 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_1910:
                        do
                        {
                          v449 = *((_DWORD *)v428 - 1);
                          v428 -= 4;
                          *--v439 = v449;
                        }
                        while (v428 != v431);
                      }
                    }
                    else
                    {
                      v438 = 0;
                      v439 = (_DWORD *)(4 * v433);
                      *(_DWORD *)(4 * v433) = v254;
                      v430 = 4 * v433 + 4;
                      v440 = v428 - v431;
                      if (v428 != v431)
                        goto LABEL_539;
                    }
LABEL_545:
                    *(_QWORD *)(v2067 + 6224) = v439;
                    *(_QWORD *)(v2067 + 6232) = v430;
                    *(_QWORD *)(v2067 + 6240) = &v438[4 * v436];
                    if (v431)
                      operator delete(v431);
LABEL_547:
                    *(_QWORD *)(v2067 + 6232) = v430;
                  }
                  v2018[2] = 0;
                  *v2018 = 0;
                  *v2000 = 0;
                  *(_BYTE *)(v2067 + 6588) = 0;
                  if ((v1977 & 1) == 0)
                  {
LABEL_549:
                    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 582, (uint64_t)"ret.second && ret2.second", 25, (uint64_t)"Failed to add PoseVariable or VelAndBiasVariable.", 49, (void (*)(void **))sub_21023DDB0))
                    {
                      abort();
                    }
                  }
                  if (*(_BYTE *)(v2067 + 2146))
                    v450 = v242;
                  else
                    v450 = 1;
                  if ((v450 & 1) != 0)
                    goto LABEL_480;
                  v451 = *(_QWORD **)(v2067 + 8);
                  v452 = v451[8];
                  v453 = v451[39] * v452;
                  if (!v453)
                    goto LABEL_480;
                  v454 = 0;
                  v455 = 0;
                  v456 = 0;
                  v457 = 0;
                  v458 = 1;
                  v459 = __szc;
                  while (1)
                  {
                    v460 = v457 % v452;
                    if (((v457 % v452) & 0x8000000000000000) != 0)
                    {
                      v464 = (_QWORD *)v451[6];
                      do
                      {
                        v465 = (_QWORD *)*v464;
                        if (*v464)
                        {
                          do
                          {
                            v461 = v465;
                            v465 = (_QWORD *)v465[1];
                          }
                          while (v465);
                        }
                        else
                        {
                          do
                          {
                            v461 = (_QWORD *)v464[2];
                            _ZF = *v461 == (_QWORD)v464;
                            v464 = v461;
                          }
                          while (_ZF);
                        }
                        v464 = v461;
                        _CF = __CFADD__(v460++, 1);
                      }
                      while (!_CF);
                    }
                    else
                    {
                      v461 = (_QWORD *)v451[6];
                      if (v460)
                      {
                        v462 = (_QWORD *)v451[6];
                        do
                        {
                          v463 = (_QWORD *)v462[1];
                          if (v463)
                          {
                            do
                            {
                              v461 = v463;
                              v463 = (_QWORD *)*v463;
                            }
                            while (v463);
                          }
                          else
                          {
                            do
                            {
                              v461 = (_QWORD *)v462[2];
                              _ZF = *v461 == (_QWORD)v462;
                              v462 = v461;
                            }
                            while (!_ZF);
                          }
                          v462 = v461;
                          v1505 = v460-- <= 1;
                        }
                        while (!v1505);
                      }
                    }
                    v466 = v461[4];
                    v467 = v461[5];
                    if (v466 == v233 && v241 == (_DWORD)v467)
                      break;
                    v458 = 0;
                    v456 = v467;
                    v454 = v466 & 0xFFFFFFFFFFFFFF00;
                    ++v457;
                    v455 = v466;
                    if (v457 == v453)
                      goto LABEL_480;
                  }
                  if ((v458 & 1) != 0 || v233 != (v455 | v454))
                    goto LABEL_480;
                  if (v2010)
                    v469 = -1;
                  else
                    v469 = 0;
                  v472 = (uint64_t *)v451[7];
                  v470 = v451 + 7;
                  v471 = v472;
                  if (v472)
                  {
                    v473 = v470;
                    v474 = v470;
                    v475 = v471;
                    do
                    {
                      v476 = v475[4];
                      if (v476 < v233)
                      {
                        ++v475;
                      }
                      else if (v476 == v233)
                      {
                        if (*((_DWORD *)v475 + 10) < __szc)
                          ++v475;
                        else
                          v474 = v475;
                      }
                      else
                      {
                        v474 = v475;
                      }
                      v475 = (uint64_t *)*v475;
                    }
                    while (v475);
                    if (v474 == v470)
                    {
                      v478 = 0;
                    }
                    else
                    {
                      v477 = v474[4];
                      if (v233 >= v477)
                      {
                        if (v233 == v477 && *((_DWORD *)v474 + 10) > __szc)
                          v478 = 0;
                        else
                          v478 = v474[6];
                      }
                      else
                      {
                        v478 = 0;
                      }
                    }
                    do
                    {
                      v480 = v471[4];
                      if (v480 < v233)
                      {
                        ++v471;
                      }
                      else if (v480 == v233)
                      {
                        if (*((_DWORD *)v471 + 10) < v456)
                          ++v471;
                        else
                          v473 = v471;
                      }
                      else
                      {
                        v473 = v471;
                      }
                      v471 = (uint64_t *)*v471;
                    }
                    while (v471);
                    if (v473 != v470)
                    {
                      v481 = v473[4];
                      if (v233 >= v481 && (v233 != v481 || *((_DWORD *)v473 + 10) <= v456))
                      {
                        v479 = v473[6];
                        if (!v478 || !v479)
                          goto LABEL_614;
LABEL_615:
                        v483 = v1961;
                        v483.i8[0] = 0;
                        v484 = vdupq_n_s8(v469);
                        v1960 = vbslq_s8(v484, v1960, (int8x16_t)v2026);
                        v1961 = vbslq_s8(v484, v483, (int8x16_t)v2063);
                        v485 = (_QWORD *)v2067;
                        if (*(_BYTE *)(v2067 + 2148))
                        {
                          v486 = *(uint64_t **)(v2067 + 136);
                          if (v486)
                          {
                            v488 = *v486;
                            v487 = v486[1];
                            if (v487 != v488)
                            {
                              v489 = 0x80BFA02FE80BFA03 * ((v487 - v488) >> 4);
                              do
                              {
                                v490 = v489 >> 1;
                                v491 = v488 + 2736 * (v489 >> 1);
                                if (*(_QWORD *)v491 < v233 || *(_QWORD *)v491 == v233 && *(_DWORD *)(v491 + 8) < v459)
                                {
                                  v488 = v491 + 2736;
                                  v490 = v489 + ~v490;
                                }
                                v489 = v490;
                              }
                              while (v490);
                            }
                            v485 = (_QWORD *)v2067;
                            if (v488 != v487 && *(_QWORD *)v488 == v233 && *(_DWORD *)(v488 + 8) == v459)
                            {
                              v2070 = 0;
                              v2069 = 0;
                              if (*(_BYTE *)(v2067 + 1317))
                              {
                                v492 = *v1962;
                                if (!*v1962)
                                {
                                  __asm { FMOV            V0.2D, #1.0 }
                                  *(_OWORD *)&object[72] = _Q0;
                                  *(_OWORD *)&object[88] = _Q0;
                                  *(_OWORD *)&object[104] = _Q0;
                                  *(double *)object = *(double *)(v2067 + 1328) * *(double *)(v2067 + 1328);
                                  *(_QWORD *)&object[8] = *(_QWORD *)object;
                                  *(_QWORD *)&object[16] = *(_QWORD *)object;
                                  *(_QWORD *)&object[24] = *(_QWORD *)object;
                                  *(_QWORD *)&object[32] = *(_QWORD *)object;
                                  *(_QWORD *)&object[40] = *(_QWORD *)object;
                                  *(double *)&object[48] = *(double *)(v2067 + 1320) * *(double *)(v2067 + 1320);
                                  *(_QWORD *)&object[56] = *(_QWORD *)&object[48];
                                  *(_QWORD *)&object[64] = *(_QWORD *)&object[48];
                                  LODWORD(v2149[0]) = 0;
                                  sub_20F61C5D4((double *)object, (unsigned int *)v2149, v2182);
                                  v494 = *(_OWORD *)v2182;
                                  *(_QWORD *)v2182 = 0;
                                  *(_QWORD *)&v2182[8] = 0;
                                  v495 = *(std::__shared_weak_count **)(v2067 + 512);
                                  *(_OWORD *)v1962 = v494;
                                  if (v495)
                                  {
                                    p_shared_owners = (unint64_t *)&v495->__shared_owners_;
                                    do
                                      v497 = __ldaxr(p_shared_owners);
                                    while (__stlxr(v497 - 1, p_shared_owners));
                                    if (!v497)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v495->__on_zero_shared)(v495);
                                      std::__shared_weak_count::__release_weak(v495);
                                    }
                                  }
                                  v498 = *(std::__shared_weak_count **)&v2182[8];
                                  if (*(_QWORD *)&v2182[8])
                                  {
                                    v499 = (unint64_t *)(*(_QWORD *)&v2182[8] + 8);
                                    do
                                      v500 = __ldaxr(v499);
                                    while (__stlxr(v500 - 1, v499));
                                    if (!v500)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v498->__on_zero_shared)(v498);
                                      std::__shared_weak_count::__release_weak(v498);
                                    }
                                  }
                                  v492 = *v1962;
                                }
                                v501 = *(std::__shared_weak_count **)(v2067 + 512);
                                if (v501)
                                {
                                  v502 = (unint64_t *)&v501->__shared_owners_;
                                  do
                                    v503 = __ldxr(v502);
                                  while (__stxr(v503 + 1, v502));
                                }
                                v2069 = v492;
                                v2070 = v501;
                              }
                              else
                              {
                                v501 = 0;
                              }
                              v2011 = *(_DWORD *)(v488 + 40);
                              v504 = *(_DWORD *)(v488 + 24);
                              v2068 = v501;
                              if (v501)
                              {
                                v505 = (unint64_t *)&v501->__shared_owners_;
                                do
                                  v506 = __ldxr(v505);
                                while (__stxr(v506 + 1, v505));
                              }
                              v1990 = *(double *)(v488 + 2720);
                              categoryh = *(double *)(v488 + 2728);
                              v2149[0] = __szc;
                              v1988 = *(double *)(v488 + 1616);
                              bzero(&object[8], 0x6F8uLL);
                              *(_QWORD *)object = 0x3FF0000000000000;
                              *(_QWORD *)&object[128] = 0x3FF0000000000000;
                              *(_QWORD *)&object[256] = 0x3FF0000000000000;
                              *(_QWORD *)&object[384] = 0x3FF0000000000000;
                              *(_QWORD *)&object[512] = 0x3FF0000000000000;
                              *(_QWORD *)&object[640] = 0x3FF0000000000000;
                              *(_QWORD *)&object[768] = 0x3FF0000000000000;
                              *(_QWORD *)&object[896] = 0x3FF0000000000000;
                              *(_QWORD *)&object[1024] = 0x3FF0000000000000;
                              v1982 = *(_QWORD *)(v488 + 2112);
                              v507 = *(_OWORD *)(v488 + 2080);
                              v1927 = *(_OWORD *)(v488 + 2096);
                              v508 = *(_OWORD *)(v488 + 2064);
                              v1978 = *(_QWORD *)(v488 + 2184);
                              v1923 = *(_OWORD *)(v488 + 2168);
                              v1915 = *(_OWORD *)(v488 + 2152);
                              v509 = *(_OWORD *)(v488 + 2136);
                              v510 = *(_OWORD *)(v488 + 2120);
                              v1986 = *(_QWORD *)(v488 + 2256);
                              v1921 = *(_OWORD *)(v488 + 2240);
                              v511 = *(_OWORD *)(v488 + 2208);
                              v1913 = *(_OWORD *)(v488 + 2224);
                              v512 = *(_OWORD *)(v488 + 2192);
                              v1972 = *(_QWORD *)(v488 + 2328);
                              v513 = *(_OWORD *)(v488 + 2264);
                              v1912 = *(_OWORD *)(v488 + 2312);
                              v514 = *(_OWORD *)(v488 + 2296);
                              v515 = *(_OWORD *)(v488 + 2280);
                              v1967 = *(_QWORD *)(v488 + 2400);
                              v516 = *(_OWORD *)(v488 + 2368);
                              v1918 = *(_OWORD *)(v488 + 2384);
                              v517 = *(_OWORD *)(v488 + 2336);
                              v518 = *(_OWORD *)(v488 + 2352);
                              v520 = *(_OWORD *)(v488 + 2440);
                              v519 = *(_OWORD *)(v488 + 2456);
                              v522 = *(_OWORD *)(v488 + 2408);
                              v521 = *(_OWORD *)(v488 + 2424);
                              v523 = *(_QWORD *)(v488 + 2472);
                              v524 = *(_QWORD *)(v488 + 2544);
                              v525 = *(_OWORD *)(v488 + 2512);
                              v526 = *(_OWORD *)(v488 + 2528);
                              v527 = *(_OWORD *)(v488 + 2480);
                              v528 = *(_OWORD *)(v488 + 2496);
                              v529 = *(_QWORD *)(v488 + 2616);
                              v530 = *(_OWORD *)(v488 + 2584);
                              v531 = *(_OWORD *)(v488 + 2600);
                              v532 = *(_OWORD *)(v488 + 2552);
                              v533 = *(_OWORD *)(v488 + 2568);
                              v1916 = *(_QWORD *)(v488 + 2688);
                              v535 = *(_OWORD *)(v488 + 2656);
                              v534 = *(_OWORD *)(v488 + 2672);
                              v536 = *(_OWORD *)(v488 + 2624);
                              v537 = *(_OWORD *)(v488 + 2640);
                              *(_OWORD *)object = *(_OWORD *)(v488 + 2048);
                              *(_OWORD *)&object[16] = v508;
                              *(_OWORD *)&object[32] = v507;
                              *(_OWORD *)&object[48] = v1927;
                              *(_OWORD *)&object[120] = v510;
                              *(_OWORD *)&object[136] = v509;
                              *(_OWORD *)&object[152] = v1915;
                              *(_OWORD *)&object[168] = v1923;
                              *(_QWORD *)&object[64] = v1982;
                              *(_QWORD *)&object[184] = v1978;
                              *(_OWORD *)&object[240] = v512;
                              *(_OWORD *)&object[256] = v511;
                              *(_OWORD *)&object[272] = v1913;
                              *(_OWORD *)&object[288] = v1921;
                              *(_OWORD *)&object[360] = v513;
                              *(_OWORD *)&object[376] = v515;
                              *(_OWORD *)&object[392] = v514;
                              *(_OWORD *)&object[408] = v1912;
                              *(_QWORD *)&object[424] = v1972;
                              *(_OWORD *)&object[480] = v517;
                              *(_OWORD *)&object[496] = v518;
                              *(_OWORD *)&object[512] = v516;
                              *(_OWORD *)&object[528] = v1918;
                              *(_QWORD *)&object[544] = v1967;
                              *(_OWORD *)&object[600] = v522;
                              *(_OWORD *)&object[616] = v521;
                              *(_OWORD *)&object[632] = v520;
                              *(_OWORD *)&object[648] = v519;
                              *(_QWORD *)&object[664] = v523;
                              *(_OWORD *)&object[720] = v527;
                              *(_OWORD *)&object[736] = v528;
                              *(_OWORD *)&object[752] = v525;
                              *(_OWORD *)&object[768] = v526;
                              *(_QWORD *)&object[784] = v524;
                              *(_OWORD *)&object[840] = v532;
                              *(_OWORD *)&object[856] = v533;
                              *(_OWORD *)&object[872] = v530;
                              *(_OWORD *)&object[888] = v531;
                              *(_QWORD *)&object[904] = v529;
                              *(_OWORD *)&object[960] = v536;
                              *(_OWORD *)&object[976] = v537;
                              *(_OWORD *)&object[992] = v535;
                              *(_OWORD *)&object[1008] = v534;
                              *(_QWORD *)&object[1024] = v1916;
                              *(_QWORD *)&object[304] = v1986;
                              *(double *)&object[1152] = v1990 * v1990 * v1988;
                              *(double *)&object[1280] = *(double *)&object[1152];
                              *(double *)&object[1408] = *(double *)&object[1152];
                              *(double *)&object[1536] = categoryh * categoryh * v1988;
                              *(double *)&object[1664] = *(double *)&object[1536];
                              *(double *)&object[1792] = *(double *)&object[1536];
                              sub_20F61DEF0((float64x2_t *)object, (uint64_t)v2150);
                              v538.i64[0] = vdupq_laneq_s64(*(int64x2_t *)&v2150[256], 1).u64[0];
                              v538.i64[1] = *(_QWORD *)&v2150[384];
                              v1989 = v538;
                              v538.i64[0] = vdupq_laneq_s64(*(int64x2_t *)&v2150[496], 1).u64[0];
                              v538.i64[1] = *(_QWORD *)&v2150[624];
                              v1985 = v538;
                              v1987 = (int8x16_t)vzip2q_s64(*(int64x2_t *)&v2150[16], *(int64x2_t *)&v2150[136]);
                              *(_QWORD *)&v539 = vdupq_laneq_s64(*(int64x2_t *)&v2150[736], 1).u64[0];
                              *((_QWORD *)&v539 + 1) = *(_QWORD *)&v2150[864];
                              v1968 = v539;
                              *(_QWORD *)&v539 = vdupq_laneq_s64(*(int64x2_t *)&v2150[976], 1).u64[0];
                              *((_QWORD *)&v539 + 1) = *(_QWORD *)&v2150[1104];
                              v1924 = v539;
                              *(_QWORD *)&v539 = vdupq_laneq_s64(*(int64x2_t *)&v2150[1216], 1).u64[0];
                              *((_QWORD *)&v539 + 1) = *(_QWORD *)&v2150[1344];
                              v1914 = v539;
                              *(_QWORD *)&v539 = vdupq_laneq_s64(*(int64x2_t *)&v2150[1456], 1).u64[0];
                              *((_QWORD *)&v539 + 1) = *(_QWORD *)&v2150[1584];
                              v1909 = v539;
                              *(_QWORD *)&v540 = vdupq_laneq_s64(*(int64x2_t *)&v2150[272], 1).u64[0];
                              *((_QWORD *)&v540 + 1) = *(_QWORD *)&v2150[400];
                              v1928 = v540;
                              *(_QWORD *)&v540 = vdupq_laneq_s64(*(int64x2_t *)&v2150[512], 1).u64[0];
                              *((_QWORD *)&v540 + 1) = *(_QWORD *)&v2150[640];
                              v1919 = v540;
                              *(_QWORD *)&v540 = vdupq_laneq_s64(*(int64x2_t *)&v2150[752], 1).u64[0];
                              *((_QWORD *)&v540 + 1) = *(_QWORD *)&v2150[880];
                              v1911 = v540;
                              *(_QWORD *)&v540 = vdupq_laneq_s64(*(int64x2_t *)&v2150[992], 1).u64[0];
                              *((_QWORD *)&v540 + 1) = *(_QWORD *)&v2150[1120];
                              v1908 = v540;
                              *(_QWORD *)&v541 = vdupq_laneq_s64(*(int64x2_t *)&v2150[1232], 1).u64[0];
                              *((_QWORD *)&v541 + 1) = *(_QWORD *)&v2150[1360];
                              v1906 = v541;
                              *(_QWORD *)&v541 = vdupq_laneq_s64(*(int64x2_t *)&v2150[1472], 1).u64[0];
                              *((_QWORD *)&v541 + 1) = *(_QWORD *)&v2150[1600];
                              v1904 = v541;
                              *(_QWORD *)&v541 = vdupq_laneq_s64(*(int64x2_t *)&v2150[288], 1).u64[0];
                              *((_QWORD *)&v541 + 1) = *(_QWORD *)&v2150[416];
                              v1910 = v541;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2150[528], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2150[656];
                              v1907 = v542;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2150[768], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2150[896];
                              v1903 = v543;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2150[1008], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2150[1136];
                              v1901 = v542;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2150[1248], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2150[1376];
                              v1898 = v542;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2150[1488], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2150[1616];
                              v1896 = v542;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2150[304], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2150[432];
                              v1905 = v543;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2150[544], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2150[672];
                              v1902 = v542;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2150[784], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2150[912];
                              v1899 = v543;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2150[1024], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2150[1152];
                              v1895 = v542;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2150[1264], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2150[1392];
                              v1892 = v543;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2150[1504], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2150[1632];
                              v1890 = v542;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2150[320], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2150[448];
                              v1900 = v542;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2150[560], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2150[688];
                              v1897 = v542;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2150[800], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2150[928];
                              v1893 = v543;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2150[1040], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2150[1168];
                              v1891 = v542;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2150[1280], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2150[1408];
                              v1887 = v543;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2150[1520], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2150[1648];
                              v1884 = v542;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2150[336], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2150[464];
                              v1894 = v543;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2150[576], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2150[704];
                              v1888 = v542;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2150[816], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2150[944];
                              v1886 = v543;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2150[1056], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2150[1184];
                              v1883 = v542;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2150[1296], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2150[1424];
                              v1881 = v542;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2150[1536], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2150[1664];
                              v1880 = v542;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2150[352], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2150[480];
                              v1889 = v543;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2150[592], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2150[720];
                              v1885 = v542;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2150[832], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2150[960];
                              v1882 = v543;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2150[1072], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2150[1200];
                              v1879 = v542;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2150[1312], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2150[1440];
                              v1878 = v543;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2150[1552], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2150[1680];
                              v1877 = v542;
                              v544 = *(_QWORD *)(v488 + 64);
                              *(_QWORD *)&v534 = *(_QWORD *)(v488 + 1616);
                              *(_OWORD *)&v2150[1816] = *(_OWORD *)(v488 + 48);
                              *(_QWORD *)&v2150[1832] = v544;
                              v545 = *(_QWORD *)(v488 + 88);
                              *(_OWORD *)&v2150[1840] = *(_OWORD *)(v488 + 72);
                              *(_QWORD *)&v2150[1856] = v545;
                              v546 = *(_OWORD *)(v488 + 112);
                              v2151[0] = *(_OWORD *)(v488 + 96);
                              v2151[1] = v546;
                              v2151[2] = *(_OWORD *)(v488 + 128);
                              v547 = *(_QWORD *)(v488 + 192);
                              v548 = *(_OWORD *)(v488 + 144);
                              v549 = *(_OWORD *)(v488 + 176);
                              v2151[4] = *(_OWORD *)(v488 + 160);
                              v2151[5] = v549;
                              v2151[3] = v548;
                              *(_QWORD *)&v2151[6] = v547;
                              *(_OWORD *)((char *)&v2151[6] + 8) = *(_OWORD *)(v488 + 200);
                              v550 = *(_QWORD *)(v488 + 264);
                              v551 = *(_OWORD *)(v488 + 216);
                              v552 = *(_OWORD *)(v488 + 248);
                              *(_OWORD *)((char *)&v2151[8] + 8) = *(_OWORD *)(v488 + 232);
                              *(_OWORD *)((char *)&v2151[9] + 8) = v552;
                              *(_OWORD *)((char *)&v2151[7] + 8) = v551;
                              *((_QWORD *)&v2151[10] + 1) = v550;
                              v2151[11] = *(_OWORD *)(v488 + 272);
                              v553 = *(_QWORD *)(v488 + 336);
                              v554 = *(_OWORD *)(v488 + 288);
                              v555 = *(_OWORD *)(v488 + 320);
                              v2151[13] = *(_OWORD *)(v488 + 304);
                              v2151[14] = v555;
                              v2151[12] = v554;
                              *(_QWORD *)&v2151[15] = v553;
                              *(_OWORD *)((char *)&v2151[15] + 8) = *(_OWORD *)(v488 + 344);
                              v556 = *(_QWORD *)(v488 + 408);
                              v557 = *(_OWORD *)(v488 + 360);
                              v558 = *(_OWORD *)(v488 + 392);
                              *(_OWORD *)((char *)&v2151[17] + 8) = *(_OWORD *)(v488 + 376);
                              *(_OWORD *)((char *)&v2151[18] + 8) = v558;
                              *(_OWORD *)((char *)&v2151[16] + 8) = v557;
                              *((_QWORD *)&v2151[19] + 1) = v556;
                              v2151[20] = *(_OWORD *)(v488 + 416);
                              v559 = *(_QWORD *)(v488 + 480);
                              v560 = *(_OWORD *)(v488 + 432);
                              v561 = *(_OWORD *)(v488 + 464);
                              v2151[22] = *(_OWORD *)(v488 + 448);
                              v2151[23] = v561;
                              v2151[21] = v560;
                              *(_QWORD *)&v2151[24] = v559;
                              *(_OWORD *)((char *)&v2151[24] + 8) = *(_OWORD *)(v488 + 488);
                              v562 = *(_QWORD *)(v488 + 552);
                              v563 = *(_OWORD *)(v488 + 504);
                              v564 = *(_OWORD *)(v488 + 536);
                              *(_OWORD *)((char *)&v2151[26] + 8) = *(_OWORD *)(v488 + 520);
                              *(_OWORD *)((char *)&v2151[27] + 8) = v564;
                              *(_OWORD *)((char *)&v2151[25] + 8) = v563;
                              *((_QWORD *)&v2151[28] + 1) = v562;
                              v2151[29] = *(_OWORD *)(v488 + 560);
                              v565 = *(_QWORD *)(v488 + 624);
                              v566 = *(_OWORD *)(v488 + 576);
                              v567 = *(_OWORD *)(v488 + 608);
                              v2151[31] = *(_OWORD *)(v488 + 592);
                              v2151[32] = v567;
                              v2151[30] = v566;
                              *(_QWORD *)&v2151[33] = v565;
                              *(_OWORD *)((char *)&v2151[33] + 8) = *(_OWORD *)(v488 + 632);
                              v568 = *(_QWORD *)(v488 + 696);
                              v569 = *(_OWORD *)(v488 + 648);
                              v570 = *(_OWORD *)(v488 + 680);
                              *(_OWORD *)((char *)&v2151[35] + 8) = *(_OWORD *)(v488 + 664);
                              *(_OWORD *)((char *)&v2151[36] + 8) = v570;
                              *(_QWORD *)&v546 = *(_QWORD *)&v2150[128];
                              *((_QWORD *)&v546 + 1) = *(_QWORD *)&v2150[248];
                              v1876 = v546;
                              *(_QWORD *)&v546 = *(_QWORD *)&v2150[368];
                              *((_QWORD *)&v546 + 1) = *(_QWORD *)&v2150[488];
                              v1875 = v546;
                              *(_QWORD *)&v546 = *(_QWORD *)&v2150[608];
                              *((_QWORD *)&v546 + 1) = *(_QWORD *)&v2150[728];
                              v1874 = v546;
                              *(_QWORD *)&v546 = *(_QWORD *)&v2150[848];
                              *((_QWORD *)&v546 + 1) = *(_QWORD *)&v2150[968];
                              v1873 = v546;
                              *(_QWORD *)&v546 = *(_QWORD *)&v2150[1088];
                              *((_QWORD *)&v546 + 1) = *(_QWORD *)&v2150[1208];
                              v1872 = v546;
                              *(_QWORD *)&v546 = *(_QWORD *)&v2150[1328];
                              *((_QWORD *)&v546 + 1) = *(_QWORD *)&v2150[1448];
                              v1871 = v546;
                              *(_QWORD *)&v546 = *(_QWORD *)&v2150[1568];
                              *((_QWORD *)&v546 + 1) = *(_QWORD *)&v2150[1688];
                              *(_OWORD *)((char *)&v2151[34] + 8) = v569;
                              *((_QWORD *)&v2151[37] + 1) = v568;
                              v1870 = v546;
                              memcpy(&v2151[38], (const void *)(v488 + 704), 0x288uLL);
                              v571 = *(_QWORD *)(v488 + 1368);
                              *(_OWORD *)((char *)&v2151[78] + 8) = *(_OWORD *)(v488 + 1352);
                              *((_QWORD *)&v2151[79] + 1) = v571;
                              v572 = *(_QWORD *)(v488 + 1392);
                              v2151[80] = *(_OWORD *)(v488 + 1376);
                              *(int64x2_t *)((char *)&v2151[86] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[1216], *(int64x2_t *)&v2150[1336]);
                              *(int64x2_t *)((char *)&v2151[87] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[1456], *(int64x2_t *)&v2150[1576]);
                              *(int64x2_t *)((char *)&v2151[84] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[736], *(int64x2_t *)&v2150[856]);
                              *(int64x2_t *)((char *)&v2151[85] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[976], *(int64x2_t *)&v2150[1096]);
                              *(_QWORD *)&v2151[96] = *(_QWORD *)&v2150[1704];
                              *((_QWORD *)&v2151[88] + 1) = *(_QWORD *)&v2150[1696];
                              *(int64x2_t *)((char *)&v2151[82] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[256], *(int64x2_t *)&v2150[376]);
                              *(int64x2_t *)((char *)&v2151[83] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[496], *(int64x2_t *)&v2150[616]);
                              *(int64x2_t *)((char *)&v2151[81] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[16], *(int64x2_t *)&v2150[136]);
                              v2151[95] = v1909;
                              v2151[94] = v1914;
                              v2151[93] = v1924;
                              v2151[92] = v1968;
                              v2151[91] = v1985;
                              v2151[90] = v1989;
                              v2151[89] = v1987;
                              *(int64x2_t *)((char *)&v2151[101] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[1232], *(int64x2_t *)&v2150[1352]);
                              *(int64x2_t *)((char *)&v2151[102] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[1472], *(int64x2_t *)&v2150[1592]);
                              *(int64x2_t *)((char *)&v2151[99] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[752], *(int64x2_t *)&v2150[872]);
                              *(int64x2_t *)((char *)&v2151[100] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[992], *(int64x2_t *)&v2150[1112]);
                              *(_QWORD *)&v2151[111] = *(_QWORD *)&v2150[1720];
                              *((_QWORD *)&v2151[103] + 1) = *(_QWORD *)&v2150[1712];
                              *(int64x2_t *)((char *)&v2151[97] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[272], *(int64x2_t *)&v2150[392]);
                              *(int64x2_t *)((char *)&v2151[98] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[512], *(int64x2_t *)&v2150[632]);
                              *(int64x2_t *)((char *)&v2151[96] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[32], *(int64x2_t *)&v2150[152]);
                              v2151[109] = v1906;
                              v2151[110] = v1904;
                              v2151[107] = v1911;
                              v2151[108] = v1908;
                              v2151[105] = v1928;
                              v2151[106] = v1919;
                              v2151[104] = vzip2q_s64(*(int64x2_t *)&v2150[32], *(int64x2_t *)&v2150[152]);
                              *(int64x2_t *)((char *)&v2151[116] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[1248], *(int64x2_t *)&v2150[1368]);
                              *(int64x2_t *)((char *)&v2151[117] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[1488], *(int64x2_t *)&v2150[1608]);
                              *(int64x2_t *)((char *)&v2151[114] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[768], *(int64x2_t *)&v2150[888]);
                              *(int64x2_t *)((char *)&v2151[115] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[1008], *(int64x2_t *)&v2150[1128]);
                              *(_QWORD *)&v2151[126] = *(_QWORD *)&v2150[1736];
                              *((_QWORD *)&v2151[118] + 1) = *(_QWORD *)&v2150[1728];
                              *(int64x2_t *)((char *)&v2151[112] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[288], *(int64x2_t *)&v2150[408]);
                              *(int64x2_t *)((char *)&v2151[113] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[528], *(int64x2_t *)&v2150[648]);
                              *(int64x2_t *)((char *)&v2151[111] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[48], *(int64x2_t *)&v2150[168]);
                              v2151[124] = v1898;
                              v2151[125] = v1896;
                              v2151[122] = v1903;
                              v2151[123] = v1901;
                              v2151[120] = v1910;
                              v2151[121] = v1907;
                              v2151[119] = vzip2q_s64(*(int64x2_t *)&v2150[48], *(int64x2_t *)&v2150[168]);
                              *(int64x2_t *)((char *)&v2151[131] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[1264], *(int64x2_t *)&v2150[1384]);
                              *(int64x2_t *)((char *)&v2151[132] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[1504], *(int64x2_t *)&v2150[1624]);
                              *(int64x2_t *)((char *)&v2151[129] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[784], *(int64x2_t *)&v2150[904]);
                              *(int64x2_t *)((char *)&v2151[130] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[1024], *(int64x2_t *)&v2150[1144]);
                              *(_QWORD *)&v2151[141] = *(_QWORD *)&v2150[1752];
                              *((_QWORD *)&v2151[133] + 1) = *(_QWORD *)&v2150[1744];
                              *(int64x2_t *)((char *)&v2151[127] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[304], *(int64x2_t *)&v2150[424]);
                              *(int64x2_t *)((char *)&v2151[128] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[544], *(int64x2_t *)&v2150[664]);
                              *(int64x2_t *)((char *)&v2151[126] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[64], *(int64x2_t *)&v2150[184]);
                              v2151[139] = v1892;
                              v2151[140] = v1890;
                              v2151[137] = v1899;
                              v2151[138] = v1895;
                              v2151[135] = v1905;
                              v2151[136] = v1902;
                              v2151[134] = vzip2q_s64(*(int64x2_t *)&v2150[64], *(int64x2_t *)&v2150[184]);
                              *(int64x2_t *)((char *)&v2151[146] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[1280], *(int64x2_t *)&v2150[1400]);
                              *(int64x2_t *)((char *)&v2151[147] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[1520], *(int64x2_t *)&v2150[1640]);
                              *(int64x2_t *)((char *)&v2151[144] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[800], *(int64x2_t *)&v2150[920]);
                              *(int64x2_t *)((char *)&v2151[145] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[1040], *(int64x2_t *)&v2150[1160]);
                              *(_QWORD *)&v2151[156] = *(_QWORD *)&v2150[1768];
                              *((_QWORD *)&v2151[148] + 1) = *(_QWORD *)&v2150[1760];
                              *(int64x2_t *)((char *)&v2151[142] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[320], *(int64x2_t *)&v2150[440]);
                              *(int64x2_t *)((char *)&v2151[143] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[560], *(int64x2_t *)&v2150[680]);
                              *(int64x2_t *)((char *)&v2151[141] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[80], *(int64x2_t *)&v2150[200]);
                              v2151[154] = v1887;
                              v2151[155] = v1884;
                              v2151[152] = v1893;
                              v2151[153] = v1891;
                              v2151[150] = v1900;
                              v2151[151] = v1897;
                              v2151[149] = vzip2q_s64(*(int64x2_t *)&v2150[80], *(int64x2_t *)&v2150[200]);
                              *(int64x2_t *)((char *)&v2151[161] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[1296], *(int64x2_t *)&v2150[1416]);
                              *(int64x2_t *)((char *)&v2151[162] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[1536], *(int64x2_t *)&v2150[1656]);
                              *(int64x2_t *)((char *)&v2151[159] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[816], *(int64x2_t *)&v2150[936]);
                              *(int64x2_t *)((char *)&v2151[160] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[1056], *(int64x2_t *)&v2150[1176]);
                              *(_QWORD *)&v2151[171] = *(_QWORD *)&v2150[1784];
                              *((_QWORD *)&v2151[163] + 1) = *(_QWORD *)&v2150[1776];
                              *(int64x2_t *)((char *)&v2151[157] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[336], *(int64x2_t *)&v2150[456]);
                              *(int64x2_t *)((char *)&v2151[158] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[576], *(int64x2_t *)&v2150[696]);
                              *(int64x2_t *)((char *)&v2151[156] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[96], *(int64x2_t *)&v2150[216]);
                              v2151[169] = v1881;
                              v2151[170] = v1880;
                              v2151[167] = v1886;
                              v2151[168] = v1883;
                              v2151[165] = v1894;
                              v2151[166] = v1888;
                              v2151[164] = vzip2q_s64(*(int64x2_t *)&v2150[96], *(int64x2_t *)&v2150[216]);
                              *(int64x2_t *)((char *)&v2151[176] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[1312], *(int64x2_t *)&v2150[1432]);
                              *(int64x2_t *)((char *)&v2151[177] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[1552], *(int64x2_t *)&v2150[1672]);
                              *(int64x2_t *)((char *)&v2151[174] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[832], *(int64x2_t *)&v2150[952]);
                              *(int64x2_t *)((char *)&v2151[175] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[1072], *(int64x2_t *)&v2150[1192]);
                              *(_QWORD *)&v2151[186] = *(_QWORD *)&v2150[1800];
                              *((_QWORD *)&v2151[178] + 1) = *(_QWORD *)&v2150[1792];
                              *(int64x2_t *)((char *)&v2151[172] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[352], *(int64x2_t *)&v2150[472]);
                              *(int64x2_t *)((char *)&v2151[173] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[592], *(int64x2_t *)&v2150[712]);
                              *(int64x2_t *)((char *)&v2151[171] + 8) = vzip1q_s64(*(int64x2_t *)&v2150[112], *(int64x2_t *)&v2150[232]);
                              v2151[184] = v1878;
                              v2151[185] = v1877;
                              v2151[182] = v1882;
                              v2151[183] = v1879;
                              v2151[180] = v1889;
                              v2151[181] = v1885;
                              v2151[179] = vzip2q_s64(*(int64x2_t *)&v2150[112], *(int64x2_t *)&v2150[232]);
                              *((_QWORD *)&v2151[193] + 1) = *(_QWORD *)&v2150[1808];
                              *(_OWORD *)((char *)&v2151[191] + 8) = v1871;
                              *(_OWORD *)((char *)&v2151[192] + 8) = v1870;
                              *(_OWORD *)((char *)&v2151[189] + 8) = v1873;
                              *(_OWORD *)((char *)&v2151[190] + 8) = v1872;
                              *(_QWORD *)&v2151[81] = v572;
                              *(_OWORD *)((char *)&v2151[187] + 8) = v1875;
                              *(_OWORD *)((char *)&v2151[188] + 8) = v1874;
                              *(_OWORD *)((char *)&v2151[186] + 8) = v1876;
                              v573 = *(_OWORD *)(v488 + 2696);
                              *(_QWORD *)&v2151[195] = *(_QWORD *)(v488 + 2712);
                              v2151[194] = v573;
                              *((_QWORD *)&v2151[195] + 1) = v534;
                              v2071 = v501;
                              if (v501)
                              {
                                v574 = (unint64_t *)&v501->__shared_owners_;
                                v575 = v2011;
                                do
                                  v576 = __ldxr(v574);
                                while (__stxr(v576 + 1, v574));
                                v2072 = v501;
                                do
                                  v577 = __ldxr(v574);
                                while (__stxr(v577 + 1, v574));
                              }
                              else
                              {
                                v2072 = 0;
                                v575 = v2011;
                              }
                              v647 = v2149[0];
                              v648 = *(void ***)(v2067 + 5680);
                              v649 = *(void ***)(v2067 + 5688);
                              if (v648 == v649)
                              {
                                v649 = *(void ***)(v2067 + 5680);
                              }
                              else if (*(v649 - 667) >= v2149[0])
                              {
                                v650 = 0x4515E08719B71393 * (v649 - v648);
                                do
                                {
                                  v651 = v650 >> 1;
                                  v652 = &v648[667 * (v650 >> 1)];
                                  v653 = *v652;
                                  v654 = v652 + 667;
                                  v650 += ~(v650 >> 1);
                                  if (v653 < v2149[0])
                                    v648 = v654;
                                  else
                                    v650 = v651;
                                }
                                while (v650);
                                if (v648 != v649)
                                {
                                  v649 = v648;
                                  if (*v648 == v2149[0])
                                  {
                                    v655 = 0;
                                    goto LABEL_850;
                                  }
                                }
                              }
                              if (v501)
                              {
                                v656 = (unint64_t *)&v501->__shared_owners_;
                                do
                                  v657 = __ldxr(v656);
                                while (__stxr(v657 + 1, v656));
                              }
                              *(_OWORD *)v2182 = *(_OWORD *)v2149;
                              v2182[24] = v2150[8];
                              *(_QWORD *)&v2182[16] = &off_24CA00398;
                              memcpy(&v2182[32], &v2150[16], 0x708uLL);
                              *(_OWORD *)&v2182[1832] = *(_OWORD *)&v2150[1816];
                              *(_QWORD *)&v2182[1848] = *(_QWORD *)&v2150[1832];
                              *(_OWORD *)&v2182[1856] = *(_OWORD *)&v2150[1840];
                              *(_QWORD *)&v2182[1872] = *(_QWORD *)&v2150[1856];
                              *(_OWORD *)&v2182[1880] = v2151[0];
                              *(_OWORD *)&v2182[1896] = v2151[1];
                              *(_QWORD *)&v2182[1976] = *(_QWORD *)&v2151[6];
                              *(_OWORD *)&v2182[1944] = v2151[4];
                              *(_OWORD *)&v2182[1960] = v2151[5];
                              *(_OWORD *)&v2182[1912] = v2151[2];
                              *(_OWORD *)&v2182[1928] = v2151[3];
                              *(_QWORD *)&v2182[2048] = *((_QWORD *)&v2151[10] + 1);
                              *(_OWORD *)&v2182[2016] = *(_OWORD *)((char *)&v2151[8] + 8);
                              *(_OWORD *)&v2182[2032] = *(_OWORD *)((char *)&v2151[9] + 8);
                              *(_OWORD *)&v2182[1984] = *(_OWORD *)((char *)&v2151[6] + 8);
                              *(_OWORD *)&v2182[2000] = *(_OWORD *)((char *)&v2151[7] + 8);
                              *(_QWORD *)&v2182[2120] = *(_QWORD *)&v2151[15];
                              *(_OWORD *)&v2182[2088] = v2151[13];
                              *(_OWORD *)&v2182[2104] = v2151[14];
                              *(_OWORD *)&v2182[2056] = v2151[11];
                              *(_OWORD *)&v2182[2072] = v2151[12];
                              *(_QWORD *)&v2182[2192] = *((_QWORD *)&v2151[19] + 1);
                              *(_OWORD *)&v2182[2160] = *(_OWORD *)((char *)&v2151[17] + 8);
                              *(_OWORD *)&v2182[2176] = *(_OWORD *)((char *)&v2151[18] + 8);
                              *(_OWORD *)&v2182[2128] = *(_OWORD *)((char *)&v2151[15] + 8);
                              *(_OWORD *)&v2182[2144] = *(_OWORD *)((char *)&v2151[16] + 8);
                              *(_QWORD *)&v2182[2264] = *(_QWORD *)&v2151[24];
                              *(_OWORD *)&v2182[2232] = v2151[22];
                              *(_OWORD *)&v2182[2248] = v2151[23];
                              *(_OWORD *)&v2182[2200] = v2151[20];
                              *(_OWORD *)&v2182[2216] = v2151[21];
                              *(_QWORD *)&v2182[2336] = *((_QWORD *)&v2151[28] + 1);
                              *(_OWORD *)&v2182[2304] = *(_OWORD *)((char *)&v2151[26] + 8);
                              *(_OWORD *)&v2182[2320] = *(_OWORD *)((char *)&v2151[27] + 8);
                              *(_OWORD *)&v2182[2272] = *(_OWORD *)((char *)&v2151[24] + 8);
                              *(_OWORD *)&v2182[2288] = *(_OWORD *)((char *)&v2151[25] + 8);
                              *(_QWORD *)&v2182[2408] = *(_QWORD *)&v2151[33];
                              *(_OWORD *)&v2182[2376] = v2151[31];
                              *(_OWORD *)&v2182[2392] = v2151[32];
                              *(_OWORD *)&v2182[2344] = v2151[29];
                              *(_OWORD *)&v2182[2360] = v2151[30];
                              *(_QWORD *)&v2182[2480] = *((_QWORD *)&v2151[37] + 1);
                              *(_OWORD *)&v2182[2448] = *(_OWORD *)((char *)&v2151[35] + 8);
                              *(_OWORD *)&v2182[2464] = *(_OWORD *)((char *)&v2151[36] + 8);
                              *(_OWORD *)&v2182[2416] = *(_OWORD *)((char *)&v2151[33] + 8);
                              *(_OWORD *)&v2182[2432] = *(_OWORD *)((char *)&v2151[34] + 8);
                              memcpy(&v2182[2488], &v2151[38], 0x288uLL);
                              *(_OWORD *)&v2182[3136] = *(_OWORD *)((char *)&v2151[78] + 8);
                              *(_QWORD *)&v2182[3152] = *((_QWORD *)&v2151[79] + 1);
                              *(_OWORD *)&v2182[3160] = v2151[80];
                              *(_QWORD *)&v2182[3176] = *(_QWORD *)&v2151[81];
                              memcpy(&v2182[3184], (char *)&v2151[81] + 8, 0x708uLL);
                              *(_OWORD *)&v2182[4984] = v2151[194];
                              *(_OWORD *)&v2182[5000] = v2151[195];
                              memset(&v2182[5016], 0, 32);
                              *(_QWORD *)&v2182[5304] = v2069;
                              *(_QWORD *)&v2182[5312] = v501;
                              if (v501)
                              {
                                v658 = (unint64_t *)&v501->__shared_owners_;
                                do
                                  v659 = __ldxr(v658);
                                while (__stxr(v659 + 1, v658));
                                *(_QWORD *)&v2182[5288] = 0xBFF0000000000000;
                                v2182[5296] = 0;
                                v2182[5320] = 0;
                                do
                                  v660 = __ldaxr(v658);
                                while (__stlxr(v660 - 1, v658));
                                if (!v660)
                                {
                                  ((void (*)(std::__shared_weak_count *))v501->__on_zero_shared)(v501);
                                  std::__shared_weak_count::__release_weak(v501);
                                }
                              }
                              else
                              {
                                *(_QWORD *)&v2182[5288] = 0xBFF0000000000000;
                                v2182[5296] = 0;
                                v2182[5320] = 0;
                              }
                              v661 = *(char **)(v2067 + 4840);
                              v662 = *(char **)(v2067 + 4848);
                              v663 = v661;
                              if (v662 != v661)
                              {
                                v664 = (v662 - v661) >> 4;
                                v663 = *(char **)(v2067 + 4840);
                                do
                                {
                                  v665 = v664 >> 1;
                                  v666 = (unsigned int *)&v663[16 * (v664 >> 1)];
                                  v668 = *v666;
                                  v667 = (char *)(v666 + 4);
                                  v664 += ~(v664 >> 1);
                                  if (v668 < v504)
                                    v663 = v667;
                                  else
                                    v664 = v665;
                                }
                                while (v664);
                              }
                              if (v663 == v662 || *(_DWORD *)v663 != v504)
                                goto LABEL_836;
                              v669 = *((_QWORD *)v663 + 1);
                              *(_QWORD *)&v2182[5016] = v669;
                              ++*(_DWORD *)(*((_QWORD *)v663 + 1) + 8);
                              v670 = *(char **)(v2067 + 4936);
                              v671 = *(char **)(v2067 + 4944);
                              v672 = v670;
                              if (v671 != v670)
                              {
                                v673 = (v671 - v670) >> 4;
                                v672 = *(char **)(v2067 + 4936);
                                do
                                {
                                  v674 = v673 >> 1;
                                  v675 = (unsigned int *)&v672[16 * (v673 >> 1)];
                                  v677 = *v675;
                                  v676 = (char *)(v675 + 4);
                                  v673 += ~(v673 >> 1);
                                  if (v677 < v504)
                                    v672 = v676;
                                  else
                                    v673 = v674;
                                }
                                while (v673);
                              }
                              if (v672 == v671 || *(_DWORD *)v672 != v504)
                                goto LABEL_836;
                              v678 = *((_QWORD *)v672 + 1);
                              *(_QWORD *)&v2182[5024] = v678;
                              ++*(_DWORD *)(*((_QWORD *)v672 + 1) + 8);
                              if (v662 != v661)
                              {
                                v679 = (v662 - v661) >> 4;
                                do
                                {
                                  v680 = v679 >> 1;
                                  v681 = (unsigned int *)&v661[16 * (v679 >> 1)];
                                  v683 = *v681;
                                  v682 = (char *)(v681 + 4);
                                  v679 += ~(v679 >> 1);
                                  if (v683 < v575)
                                    v661 = v682;
                                  else
                                    v679 = v680;
                                }
                                while (v679);
                              }
                              if (v661 == v662 || *(_DWORD *)v661 != v575)
                                goto LABEL_836;
                              v684 = *((_QWORD *)v661 + 1);
                              *(_QWORD *)&v2182[5032] = v684;
                              ++*(_DWORD *)(*((_QWORD *)v661 + 1) + 8);
                              if (v671 != v670)
                              {
                                v685 = (v671 - v670) >> 4;
                                do
                                {
                                  v686 = v685 >> 1;
                                  v687 = (unsigned int *)&v670[16 * (v685 >> 1)];
                                  v689 = *v687;
                                  v688 = (char *)(v687 + 4);
                                  v685 += ~(v685 >> 1);
                                  if (v689 < v575)
                                    v670 = v688;
                                  else
                                    v685 = v686;
                                }
                                while (v685);
                              }
                              if (v670 == v671 || *(_DWORD *)v670 != v575)
                              {
LABEL_836:
                                if (*(_QWORD *)&v2182[5016])
                                  --*(_DWORD *)(*(_QWORD *)&v2182[5016] + 8);
                                if (*(_QWORD *)&v2182[5024])
                                  --*(_DWORD *)(*(_QWORD *)&v2182[5024] + 8);
                                if (*(_QWORD *)&v2182[5032])
                                  --*(_DWORD *)(*(_QWORD *)&v2182[5032] + 8);
                                v655 = 0;
                                if (*(_QWORD *)&v2182[5040])
                                  --*(_DWORD *)(*(_QWORD *)&v2182[5040] + 8);
                              }
                              else
                              {
                                v690 = *((_QWORD *)v670 + 1);
                                *(_QWORD *)&v2182[5040] = v690;
                                ++*(_DWORD *)(*((_QWORD *)v670 + 1) + 8);
                                if (*(_BYTE *)(v669 + 20)
                                  || *(_BYTE *)(v678 + 20)
                                  || *(_BYTE *)(v684 + 20)
                                  || *(_BYTE *)(v690 + 20))
                                {
                                  *(_OWORD *)&object[8] = *(_OWORD *)v2182;
                                  v1983 = v2182[24];
                                  object[32] = v2182[24];
                                  *(_QWORD *)object = v647;
                                  *(_QWORD *)&object[24] = &off_24CA00398;
                                  memcpy(&object[40], &v2182[32], 0x708uLL);
                                  *(_OWORD *)&object[1840] = *(_OWORD *)&v2182[1832];
                                  *(_QWORD *)&object[1856] = *(_QWORD *)&v2182[1848];
                                  *(_OWORD *)&object[1864] = *(_OWORD *)&v2182[1856];
                                  *(_QWORD *)&object[1880] = *(_QWORD *)&v2182[1872];
                                  v2222[0] = *(_OWORD *)&v2182[1880];
                                  v2222[1] = *(_OWORD *)&v2182[1896];
                                  *(_QWORD *)&v2222[6] = *(_QWORD *)&v2182[1976];
                                  v2222[4] = *(_OWORD *)&v2182[1944];
                                  v2222[5] = *(_OWORD *)&v2182[1960];
                                  v2222[2] = *(_OWORD *)&v2182[1912];
                                  v2222[3] = *(_OWORD *)&v2182[1928];
                                  *((_QWORD *)&v2222[10] + 1) = *(_QWORD *)&v2182[2048];
                                  *(_OWORD *)((char *)&v2222[8] + 8) = *(_OWORD *)&v2182[2016];
                                  *(_OWORD *)((char *)&v2222[9] + 8) = *(_OWORD *)&v2182[2032];
                                  *(_OWORD *)((char *)&v2222[6] + 8) = *(_OWORD *)&v2182[1984];
                                  *(_OWORD *)((char *)&v2222[7] + 8) = *(_OWORD *)&v2182[2000];
                                  *(_QWORD *)&v2222[15] = *(_QWORD *)&v2182[2120];
                                  v2222[13] = *(_OWORD *)&v2182[2088];
                                  v2222[14] = *(_OWORD *)&v2182[2104];
                                  v2222[11] = *(_OWORD *)&v2182[2056];
                                  v2222[12] = *(_OWORD *)&v2182[2072];
                                  *((_QWORD *)&v2222[19] + 1) = *(_QWORD *)&v2182[2192];
                                  *(_OWORD *)((char *)&v2222[17] + 8) = *(_OWORD *)&v2182[2160];
                                  *(_OWORD *)((char *)&v2222[18] + 8) = *(_OWORD *)&v2182[2176];
                                  *(_OWORD *)((char *)&v2222[15] + 8) = *(_OWORD *)&v2182[2128];
                                  *(_OWORD *)((char *)&v2222[16] + 8) = *(_OWORD *)&v2182[2144];
                                  *(_QWORD *)&v2222[24] = *(_QWORD *)&v2182[2264];
                                  v2222[22] = *(_OWORD *)&v2182[2232];
                                  v2222[23] = *(_OWORD *)&v2182[2248];
                                  v2222[20] = *(_OWORD *)&v2182[2200];
                                  v2222[21] = *(_OWORD *)&v2182[2216];
                                  *((_QWORD *)&v2222[28] + 1) = *(_QWORD *)&v2182[2336];
                                  *(_OWORD *)((char *)&v2222[26] + 8) = *(_OWORD *)&v2182[2304];
                                  *(_OWORD *)((char *)&v2222[27] + 8) = *(_OWORD *)&v2182[2320];
                                  *(_OWORD *)((char *)&v2222[24] + 8) = *(_OWORD *)&v2182[2272];
                                  *(_OWORD *)((char *)&v2222[25] + 8) = *(_OWORD *)&v2182[2288];
                                  *(_QWORD *)&v2222[33] = *(_QWORD *)&v2182[2408];
                                  v2222[31] = *(_OWORD *)&v2182[2376];
                                  v2222[32] = *(_OWORD *)&v2182[2392];
                                  v2222[29] = *(_OWORD *)&v2182[2344];
                                  v2222[30] = *(_OWORD *)&v2182[2360];
                                  *((_QWORD *)&v2222[37] + 1) = *(_QWORD *)&v2182[2480];
                                  *(_OWORD *)((char *)&v2222[35] + 8) = *(_OWORD *)&v2182[2448];
                                  *(_OWORD *)((char *)&v2222[36] + 8) = *(_OWORD *)&v2182[2464];
                                  *(_OWORD *)((char *)&v2222[33] + 8) = *(_OWORD *)&v2182[2416];
                                  *(_OWORD *)((char *)&v2222[34] + 8) = *(_OWORD *)&v2182[2432];
                                  memcpy(&v2222[38], &v2182[2488], 0x288uLL);
                                  *(_OWORD *)((char *)&v2222[78] + 8) = *(_OWORD *)&v2182[3136];
                                  *((_QWORD *)&v2222[79] + 1) = *(_QWORD *)&v2182[3152];
                                  v2222[80] = *(_OWORD *)&v2182[3160];
                                  *(_QWORD *)&v2222[81] = *(_QWORD *)&v2182[3176];
                                  memcpy((char *)&v2222[81] + 8, &v2182[3184], 0x708uLL);
                                  v2222[194] = *(_OWORD *)&v2182[4984];
                                  v2222[195] = *(_OWORD *)&v2182[5000];
                                  v691 = *(void **)&v2182[5008];
                                  v2222[196] = *(_OWORD *)&v2182[5016];
                                  v2222[197] = *(_OWORD *)&v2182[5032];
                                  *(_QWORD *)&v2222[205] = *(_QWORD *)&v2182[5160];
                                  v4.i64[1] = *(_QWORD *)&v2182[5120];
                                  v2222[203] = *(_OWORD *)&v2182[5128];
                                  v2222[204] = *(_OWORD *)&v2182[5144];
                                  v2222[201] = *(_OWORD *)&v2182[5096];
                                  v2222[202] = *(_OWORD *)&v2182[5112];
                                  v2222[199] = *(_OWORD *)&v2182[5064];
                                  v2222[200] = *(_OWORD *)&v2182[5080];
                                  v2222[198] = *(_OWORD *)&v2182[5048];
                                  *(_OWORD *)((char *)&v2222[207] + 8) = *(_OWORD *)&v2182[5200];
                                  *(_OWORD *)((char *)&v2222[208] + 8) = *(_OWORD *)&v2182[5216];
                                  *(_OWORD *)((char *)&v2222[205] + 8) = *(_OWORD *)&v2182[5168];
                                  *(_OWORD *)((char *)&v2222[206] + 8) = *(_OWORD *)&v2182[5184];
                                  *((_QWORD *)&v2222[212] + 1) = *(_QWORD *)&v2182[5280];
                                  *(_OWORD *)((char *)&v2222[210] + 8) = *(_OWORD *)&v2182[5248];
                                  *(_OWORD *)((char *)&v2222[211] + 8) = *(_OWORD *)&v2182[5264];
                                  *(_OWORD *)((char *)&v2222[209] + 8) = *(_OWORD *)&v2182[5232];
                                  BYTE8(v2222[213]) = v2182[5296];
                                  *(_QWORD *)&v2222[213] = *(_QWORD *)&v2182[5288];
                                  v1969 = *(void **)&v2182[5304];
                                  v2222[214] = *(_OWORD *)&v2182[5304];
                                  categorya = *(std::__shared_weak_count **)&v2182[5312];
                                  *(_OWORD *)&v2182[5304] = 0uLL;
                                  v1985.i32[0] = v2182[5320];
                                  LOBYTE(v2222[215]) = v2182[5320];
                                  v692 = *(void ***)(v2067 + 5688);
                                  if (v692 == v649 || *v649 != v647)
                                  {
                                    v693 = *(char **)(v2067 + 5680);
                                    v694 = (char *)v649 - v693;
                                    v1979 = (void **)v693;
                                    v1973 = ((char *)v649 - v693) / 5336;
                                    v695 = (void **)&v693[5336 * v1973];
                                    v696 = *(_QWORD *)(v2067 + 5696);
                                    if ((unint64_t)v692 >= v696)
                                    {
                                      v951 = 0x4515E08719B71393 * (((char *)v692 - v693) >> 3) + 1;
                                      if (v951 > 0xC4827EA81BA25)
                                        sub_20E867F44();
                                      v952 = 0x4515E08719B71393 * ((uint64_t)(v696 - (_QWORD)v693) >> 3);
                                      if (2 * v952 > v951)
                                        v951 = 2 * v952;
                                      if (v952 >= 0x62413F540DD12)
                                        v953 = 0xC4827EA81BA25;
                                      else
                                        v953 = v951;
                                      *(_QWORD *)&v2148[2] = v2067 + 5696;
                                      if (v953)
                                      {
                                        if (v953 > 0xC4827EA81BA25)
                                          sub_20E877A38();
                                        v954 = (char *)operator new(5336 * v953);
                                      }
                                      else
                                      {
                                        v954 = 0;
                                      }
                                      v1136 = &v954[5336 * v1973];
                                      *(_QWORD *)&v2148[0] = v954;
                                      *((_QWORD *)&v2148[0] + 1) = v1136;
                                      *(_QWORD *)&v2148[1] = v1136;
                                      *((_QWORD *)&v2148[1] + 1) = &v954[5336 * v953];
                                      if (v1973 == v953)
                                      {
                                        if (v694 < 1)
                                        {
                                          if (v1979 == v649)
                                            v1138 = 1;
                                          else
                                            v1138 = 2 * v1973;
                                          if (v1138 > 0xC4827EA81BA25)
                                            sub_20E877A38();
                                          v1139 = (char *)operator new(5336 * v1138);
                                          v1136 = &v1139[5336 * (v1138 >> 2)];
                                          *(_QWORD *)&v2148[0] = v1139;
                                          *((_QWORD *)&v2148[0] + 1) = v1136;
                                          *((_QWORD *)&v2148[1] + 1) = &v1139[5336 * v1138];
                                          if (v954)
                                            operator delete(v954);
                                        }
                                        else
                                        {
                                          v1137 = v1973 + 2;
                                          if (v1973 >= -1)
                                            v1137 = v1973 + 1;
                                          v1136 -= 5336 * (v1137 >> 1);
                                          *((_QWORD *)&v2148[0] + 1) = v1136;
                                        }
                                      }
                                      *(_QWORD *)v1136 = v647;
                                      *(_OWORD *)(v1136 + 8) = *(_OWORD *)v2182;
                                      v1136[32] = object[32];
                                      *((_QWORD *)v1136 + 3) = &off_24CA00398;
                                      memcpy(v1136 + 40, &object[40], 0x708uLL);
                                      *((_QWORD *)v1136 + 232) = *(_QWORD *)&object[1856];
                                      *((_OWORD *)v1136 + 115) = *(_OWORD *)&object[1840];
                                      *((_QWORD *)v1136 + 235) = *(_QWORD *)&object[1880];
                                      *(_OWORD *)(v1136 + 1864) = *(_OWORD *)&object[1864];
                                      v1140 = v2222[1];
                                      *((_OWORD *)v1136 + 118) = v2222[0];
                                      *((_OWORD *)v1136 + 119) = v1140;
                                      v1141 = v2222[3];
                                      *((_OWORD *)v1136 + 120) = v2222[2];
                                      v1142 = v2222[4];
                                      v1143 = v2222[5];
                                      *((_QWORD *)v1136 + 248) = *(_QWORD *)&v2222[6];
                                      *((_OWORD *)v1136 + 123) = v1143;
                                      *((_OWORD *)v1136 + 122) = v1142;
                                      *((_OWORD *)v1136 + 121) = v1141;
                                      v1144 = *(_OWORD *)((char *)&v2222[7] + 8);
                                      *(_OWORD *)(v1136 + 1992) = *(_OWORD *)((char *)&v2222[6] + 8);
                                      v1145 = *(_OWORD *)((char *)&v2222[8] + 8);
                                      v1146 = *(_OWORD *)((char *)&v2222[9] + 8);
                                      *((_QWORD *)v1136 + 257) = *((_QWORD *)&v2222[10] + 1);
                                      *(_OWORD *)(v1136 + 2040) = v1146;
                                      *(_OWORD *)(v1136 + 2024) = v1145;
                                      *(_OWORD *)(v1136 + 2008) = v1144;
                                      v1147 = v2222[12];
                                      *((_OWORD *)v1136 + 129) = v2222[11];
                                      v1148 = v2222[13];
                                      v1149 = v2222[14];
                                      *((_QWORD *)v1136 + 266) = *(_QWORD *)&v2222[15];
                                      *((_OWORD *)v1136 + 132) = v1149;
                                      *((_OWORD *)v1136 + 131) = v1148;
                                      *((_OWORD *)v1136 + 130) = v1147;
                                      v1150 = *(_OWORD *)((char *)&v2222[16] + 8);
                                      *(_OWORD *)(v1136 + 2136) = *(_OWORD *)((char *)&v2222[15] + 8);
                                      v1151 = *(_OWORD *)((char *)&v2222[17] + 8);
                                      v1152 = *(_OWORD *)((char *)&v2222[18] + 8);
                                      *((_QWORD *)v1136 + 275) = *((_QWORD *)&v2222[19] + 1);
                                      *(_OWORD *)(v1136 + 2184) = v1152;
                                      *(_OWORD *)(v1136 + 2168) = v1151;
                                      *(_OWORD *)(v1136 + 2152) = v1150;
                                      v1153 = v2222[21];
                                      *((_OWORD *)v1136 + 138) = v2222[20];
                                      v1154 = v2222[22];
                                      v1155 = v2222[23];
                                      *((_QWORD *)v1136 + 284) = *(_QWORD *)&v2222[24];
                                      *((_OWORD *)v1136 + 141) = v1155;
                                      *((_OWORD *)v1136 + 140) = v1154;
                                      *((_OWORD *)v1136 + 139) = v1153;
                                      v1156 = *(_OWORD *)((char *)&v2222[25] + 8);
                                      *(_OWORD *)(v1136 + 2280) = *(_OWORD *)((char *)&v2222[24] + 8);
                                      v1157 = *(_OWORD *)((char *)&v2222[26] + 8);
                                      v1158 = *(_OWORD *)((char *)&v2222[27] + 8);
                                      *((_QWORD *)v1136 + 293) = *((_QWORD *)&v2222[28] + 1);
                                      *(_OWORD *)(v1136 + 2328) = v1158;
                                      *(_OWORD *)(v1136 + 2312) = v1157;
                                      *(_OWORD *)(v1136 + 2296) = v1156;
                                      v1159 = v2222[30];
                                      *((_OWORD *)v1136 + 147) = v2222[29];
                                      v1160 = v2222[31];
                                      v1161 = v2222[32];
                                      *((_QWORD *)v1136 + 302) = *(_QWORD *)&v2222[33];
                                      *((_OWORD *)v1136 + 150) = v1161;
                                      *((_OWORD *)v1136 + 149) = v1160;
                                      *((_OWORD *)v1136 + 148) = v1159;
                                      v1162 = *(_OWORD *)((char *)&v2222[34] + 8);
                                      *(_OWORD *)(v1136 + 2424) = *(_OWORD *)((char *)&v2222[33] + 8);
                                      v1163 = *(_OWORD *)((char *)&v2222[35] + 8);
                                      v1164 = *(_OWORD *)((char *)&v2222[36] + 8);
                                      *((_QWORD *)v1136 + 311) = *((_QWORD *)&v2222[37] + 1);
                                      *(_OWORD *)(v1136 + 2472) = v1164;
                                      *(_OWORD *)(v1136 + 2456) = v1163;
                                      *(_OWORD *)(v1136 + 2440) = v1162;
                                      memcpy(v1136 + 2496, &v2222[38], 0x288uLL);
                                      *(_OWORD *)(v1136 + 3144) = *(_OWORD *)((char *)&v2222[78] + 8);
                                      *((_QWORD *)v1136 + 395) = *((_QWORD *)&v2222[79] + 1);
                                      *((_OWORD *)v1136 + 198) = v2222[80];
                                      *((_QWORD *)v1136 + 398) = *(_QWORD *)&v2222[81];
                                      memcpy(v1136 + 3192, (char *)&v2222[81] + 8, 0x708uLL);
                                      *((_QWORD *)v1136 + 626) = *(_QWORD *)&v2222[195];
                                      *((_OWORD *)v1136 + 312) = v2222[194];
                                      *((_QWORD *)v1136 + 627) = *((_QWORD *)&v2222[195] + 1);
                                      v1165 = v2222[197];
                                      *((_OWORD *)v1136 + 314) = v2222[196];
                                      *((_OWORD *)v1136 + 315) = v1165;
                                      v1166 = v2222[198];
                                      v1167 = v2222[199];
                                      v1168 = v2222[200];
                                      *((_OWORD *)v1136 + 319) = v2222[201];
                                      *((_OWORD *)v1136 + 318) = v1168;
                                      *((_OWORD *)v1136 + 317) = v1167;
                                      *((_OWORD *)v1136 + 316) = v1166;
                                      v1169 = v2222[202];
                                      v1170 = v2222[203];
                                      v1171 = v2222[204];
                                      *((_QWORD *)v1136 + 646) = *(_QWORD *)&v2222[205];
                                      *((_OWORD *)v1136 + 322) = v1171;
                                      *((_OWORD *)v1136 + 321) = v1170;
                                      *((_OWORD *)v1136 + 320) = v1169;
                                      v1172 = *(_OWORD *)((char *)&v2222[205] + 8);
                                      v1173 = *(_OWORD *)((char *)&v2222[206] + 8);
                                      v1174 = *(_OWORD *)((char *)&v2222[207] + 8);
                                      *(_OWORD *)(v1136 + 5224) = *(_OWORD *)((char *)&v2222[208] + 8);
                                      *(_OWORD *)(v1136 + 5208) = v1174;
                                      *(_OWORD *)(v1136 + 5192) = v1173;
                                      *(_OWORD *)(v1136 + 5176) = v1172;
                                      v1175 = *(_OWORD *)((char *)&v2222[209] + 8);
                                      v1176 = *(_OWORD *)((char *)&v2222[210] + 8);
                                      v1177 = *(_OWORD *)((char *)&v2222[211] + 8);
                                      *((_QWORD *)v1136 + 661) = *((_QWORD *)&v2222[212] + 1);
                                      *(_OWORD *)(v1136 + 5272) = v1177;
                                      *(_OWORD *)(v1136 + 5256) = v1176;
                                      *(_OWORD *)(v1136 + 5240) = v1175;
                                      v1178 = *(_QWORD *)&v2222[213];
                                      v1136[5304] = BYTE8(v2222[213]);
                                      *((_QWORD *)v1136 + 662) = v1178;
                                      *((_OWORD *)v1136 + 332) = v2222[214];
                                      v2222[214] = 0uLL;
                                      v1136[5328] = v2222[215];
                                      v1970 = v1136 + 5336;
                                      *(_QWORD *)&v2148[1] = v1136 + 5336;
                                      v1179 = *(void ***)(v2067 + 5680);
                                      if (v1179 != v695)
                                      {
                                        v1180 = 0;
                                        v1181 = &v1979[667 * v1973];
                                        categoryd = v1181 - 667;
                                        v1989.i64[0] = (uint64_t)(v1181 - 1334);
                                        v1987.i64[0] = (uint64_t)(v1181 - 663);
                                        v1985.i64[0] = (uint64_t)(v1136 - 5336);
                                        do
                                        {
                                          _X26 = v1989.i64[0] + v1180;
                                          __asm { PRFM            #0, [X26] }
                                          *(_QWORD *)(v1985.i64[0] + v1180) = categoryd[v1180 / 8];
                                          v1184 = &v1136[v1180 - 5296];
                                          *((_OWORD *)v1184 - 2) = *(_OWORD *)(v1989.i64[0] + v1180 + 5344);
                                          v1136[v1180 - 5304] = *(_BYTE *)(v1987.i64[0] + v1180);
                                          *((_QWORD *)v1184 - 2) = &off_24CA00398;
                                          memcpy(v1184, (const void *)(v1989.i64[0] + v1180 + 5376), 0x708uLL);
                                          v1185 = &v1136[v1180];
                                          v1186 = (uint64_t)&v1136[v1180 - 3496];
                                          v1187 = *(_OWORD *)(v1989.i64[0] + v1180 + 7176);
                                          *(_QWORD *)(v1186 + 16) = *(_QWORD *)(v1989.i64[0] + v1180 + 7192);
                                          *(_OWORD *)v1186 = v1187;
                                          v1188 = (uint64_t)&v1136[v1180 - 3472];
                                          v1189 = *(_QWORD *)(v1989.i64[0] + v1180 + 7216);
                                          *(_OWORD *)v1188 = *(_OWORD *)(v1989.i64[0] + v1180 + 7200);
                                          *(_QWORD *)(v1188 + 16) = v1189;
                                          v1190 = &v1136[v1180 - 3448];
                                          v1191 = *(_OWORD *)(v1989.i64[0] + v1180 + 7240);
                                          *(_OWORD *)v1190 = *(_OWORD *)(v1989.i64[0] + v1180 + 7224);
                                          *((_OWORD *)v1190 + 1) = v1191;
                                          v1192 = (uint64_t)&v1136[v1180 - 3416];
                                          *(_OWORD *)v1192 = *(_OWORD *)(v1989.i64[0] + v1180 + 7256);
                                          v1194 = *(_OWORD *)(v1989.i64[0] + v1180 + 7288);
                                          v1193 = *(_OWORD *)(v1989.i64[0] + v1180 + 7304);
                                          v1195 = *(_OWORD *)(v1989.i64[0] + v1180 + 7272);
                                          *(_QWORD *)(v1192 + 64) = *(_QWORD *)(v1989.i64[0] + v1180 + 7320);
                                          *(_OWORD *)(v1192 + 32) = v1194;
                                          *(_OWORD *)(v1192 + 48) = v1193;
                                          *(_OWORD *)(v1192 + 16) = v1195;
                                          v1196 = (uint64_t)&v1136[v1180 - 3344];
                                          v1197 = *(_OWORD *)(v1989.i64[0] + v1180 + 7360);
                                          v1198 = *(_OWORD *)(v1989.i64[0] + v1180 + 7376);
                                          v1199 = *(_OWORD *)(v1989.i64[0] + v1180 + 7344);
                                          *(_QWORD *)(v1196 + 64) = *(_QWORD *)(v1989.i64[0] + v1180 + 7392);
                                          *(_OWORD *)(v1196 + 32) = v1197;
                                          *(_OWORD *)(v1196 + 48) = v1198;
                                          *(_OWORD *)(v1196 + 16) = v1199;
                                          *(_OWORD *)v1196 = *(_OWORD *)(v1989.i64[0] + v1180 + 7328);
                                          v1200 = (uint64_t)&v1136[v1180 - 3272];
                                          v1201 = *(_OWORD *)(v1989.i64[0] + v1180 + 7416);
                                          v1202 = *(_OWORD *)(v1989.i64[0] + v1180 + 7432);
                                          v1203 = *(_OWORD *)(v1989.i64[0] + v1180 + 7448);
                                          *(_QWORD *)(v1200 + 64) = *(_QWORD *)(v1989.i64[0] + v1180 + 7464);
                                          *(_OWORD *)(v1200 + 32) = v1202;
                                          *(_OWORD *)(v1200 + 48) = v1203;
                                          *(_OWORD *)(v1200 + 16) = v1201;
                                          *(_OWORD *)v1200 = *(_OWORD *)(v1989.i64[0] + v1180 + 7400);
                                          v1204 = (uint64_t)&v1136[v1180 - 3200];
                                          v1205 = *(_OWORD *)(v1989.i64[0] + v1180 + 7488);
                                          v1206 = *(_OWORD *)(v1989.i64[0] + v1180 + 7504);
                                          v1207 = *(_OWORD *)(v1989.i64[0] + v1180 + 7520);
                                          *(_QWORD *)(v1204 + 64) = *(_QWORD *)(v1989.i64[0] + v1180 + 7536);
                                          *(_OWORD *)(v1204 + 32) = v1206;
                                          *(_OWORD *)(v1204 + 48) = v1207;
                                          *(_OWORD *)(v1204 + 16) = v1205;
                                          *(_OWORD *)v1204 = *(_OWORD *)(v1989.i64[0] + v1180 + 7472);
                                          v1208 = (uint64_t)&v1136[v1180 - 3128];
                                          v1209 = *(_OWORD *)(v1989.i64[0] + v1180 + 7560);
                                          v1210 = *(_OWORD *)(v1989.i64[0] + v1180 + 7576);
                                          v1211 = *(_OWORD *)(v1989.i64[0] + v1180 + 7592);
                                          *(_QWORD *)(v1208 + 64) = *(_QWORD *)(v1989.i64[0] + v1180 + 7608);
                                          *(_OWORD *)(v1208 + 32) = v1210;
                                          *(_OWORD *)(v1208 + 48) = v1211;
                                          *(_OWORD *)(v1208 + 16) = v1209;
                                          *(_OWORD *)v1208 = *(_OWORD *)(v1989.i64[0] + v1180 + 7544);
                                          v1212 = (uint64_t)&v1136[v1180 - 3056];
                                          v1213 = *(_OWORD *)(v1989.i64[0] + v1180 + 7632);
                                          v1214 = *(_OWORD *)(v1989.i64[0] + v1180 + 7648);
                                          v1215 = *(_OWORD *)(v1989.i64[0] + v1180 + 7664);
                                          *(_QWORD *)(v1212 + 64) = *(_QWORD *)(v1989.i64[0] + v1180 + 7680);
                                          *(_OWORD *)(v1212 + 32) = v1214;
                                          *(_OWORD *)(v1212 + 48) = v1215;
                                          *(_OWORD *)(v1212 + 16) = v1213;
                                          *(_OWORD *)v1212 = *(_OWORD *)(v1989.i64[0] + v1180 + 7616);
                                          v1216 = (uint64_t)&v1136[v1180 - 2984];
                                          v1217 = *(_OWORD *)(v1989.i64[0] + v1180 + 7704);
                                          v1218 = *(_OWORD *)(v1989.i64[0] + v1180 + 7720);
                                          v1219 = *(_OWORD *)(v1989.i64[0] + v1180 + 7736);
                                          *(_QWORD *)(v1216 + 64) = *(_QWORD *)(v1989.i64[0] + v1180 + 7752);
                                          *(_OWORD *)(v1216 + 32) = v1218;
                                          *(_OWORD *)(v1216 + 48) = v1219;
                                          *(_OWORD *)(v1216 + 16) = v1217;
                                          *(_OWORD *)v1216 = *(_OWORD *)(v1989.i64[0] + v1180 + 7688);
                                          v1220 = (uint64_t)&v1136[v1180 - 2912];
                                          v1221 = *(_OWORD *)(v1989.i64[0] + v1180 + 7776);
                                          v1222 = *(_OWORD *)(v1989.i64[0] + v1180 + 7792);
                                          v1223 = *(_OWORD *)(v1989.i64[0] + v1180 + 7808);
                                          *(_QWORD *)(v1220 + 64) = *(_QWORD *)(v1989.i64[0] + v1180 + 7824);
                                          *(_OWORD *)(v1220 + 32) = v1222;
                                          *(_OWORD *)(v1220 + 48) = v1223;
                                          *(_OWORD *)(v1220 + 16) = v1221;
                                          *(_OWORD *)v1220 = *(_OWORD *)(v1989.i64[0] + v1180 + 7760);
                                          memcpy(&v1136[v1180 - 2840], (const void *)(v1989.i64[0] + v1180 + 7832), 0x288uLL);
                                          v1224 = (uint64_t)&v1136[v1180 - 2192];
                                          v1225 = *(_OWORD *)(v1989.i64[0] + v1180 + 8480);
                                          *(_QWORD *)(v1224 + 16) = *(_QWORD *)(v1989.i64[0] + v1180 + 8496);
                                          *(_OWORD *)v1224 = v1225;
                                          v1226 = (uint64_t)&v1136[v1180 - 2168];
                                          v1227 = *(_QWORD *)(v1989.i64[0] + v1180 + 8520);
                                          *(_OWORD *)v1226 = *(_OWORD *)(v1989.i64[0] + v1180 + 8504);
                                          *(_QWORD *)(v1226 + 16) = v1227;
                                          memcpy(&v1136[v1180 - 2144], (const void *)(v1989.i64[0] + v1180 + 8528), 0x708uLL);
                                          v1228 = (uint64_t)&v1136[v1180 - 344];
                                          v1229 = *(_OWORD *)(v1989.i64[0] + v1180 + 10328);
                                          *(_QWORD *)(v1228 + 16) = *(_QWORD *)(v1989.i64[0] + v1180 + 10344);
                                          *(_OWORD *)v1228 = v1229;
                                          v1230 = &v695[v1180 / 8];
                                          __asm { PRFM            #0, [X26,#0x1398] }
                                          v1232 = &v1136[v1180 - 312];
                                          *((_QWORD *)v1185 - 40) = v695[v1180 / 8 - 40];
                                          v1233 = *(_OWORD *)(v1989.i64[0] + v1180 + 10376);
                                          v1234 = &v1136[v1180 - 280];
                                          *(_OWORD *)v1232 = *(_OWORD *)(v1989.i64[0] + v1180 + 10360);
                                          *((_OWORD *)v1232 + 1) = v1233;
                                          v1236 = *(_OWORD *)(v1989.i64[0] + v1180 + 10472);
                                          v1235 = *(_OWORD *)(v1989.i64[0] + v1180 + 10488);
                                          v1237 = *(_QWORD *)(v1989.i64[0] + v1180 + 10504);
                                          *(_OWORD *)(v1185 - 216) = *(_OWORD *)(v1989.i64[0] + v1180 + 10456);
                                          *((_QWORD *)v1185 - 21) = v1237;
                                          *(_OWORD *)(v1185 - 184) = v1235;
                                          *(_OWORD *)(v1185 - 200) = v1236;
                                          v1238 = *(_OWORD *)(v1989.i64[0] + v1180 + 10392);
                                          v1239 = *(_OWORD *)(v1989.i64[0] + v1180 + 10408);
                                          v1240 = *(_OWORD *)(v1989.i64[0] + v1180 + 10424);
                                          *(_OWORD *)(v1185 - 232) = *(_OWORD *)(v1989.i64[0] + v1180 + 10440);
                                          *(_OWORD *)(v1185 - 248) = v1240;
                                          *(_OWORD *)v1234 = v1238;
                                          *((_OWORD *)v1234 + 1) = v1239;
                                          v1241 = *(_OWORD *)(v1989.i64[0] + v1180 + 10592);
                                          v1242 = *(_OWORD *)(v1989.i64[0] + v1180 + 10608);
                                          v1243 = *(_OWORD *)(v1989.i64[0] + v1180 + 10576);
                                          *((_QWORD *)v1185 - 6) = *(_QWORD *)(v1989.i64[0] + v1180 + 10624);
                                          *((_OWORD *)v1185 - 5) = v1241;
                                          *((_OWORD *)v1185 - 4) = v1242;
                                          *((_OWORD *)v1185 - 6) = v1243;
                                          v1244 = *(_OWORD *)(v1989.i64[0] + v1180 + 10512);
                                          v1245 = *(_OWORD *)(v1989.i64[0] + v1180 + 10528);
                                          v1246 = *(_OWORD *)(v1989.i64[0] + v1180 + 10560);
                                          *((_OWORD *)v1185 - 8) = *(_OWORD *)(v1989.i64[0] + v1180 + 10544);
                                          *((_OWORD *)v1185 - 7) = v1246;
                                          *((_OWORD *)v1185 - 10) = v1244;
                                          *((_OWORD *)v1185 - 9) = v1245;
                                          v1247 = *(_QWORD *)(v1989.i64[0] + v1180 + 10632);
                                          *(v1185 - 32) = *(_BYTE *)(v1989.i64[0] + v1180 + 10640);
                                          *((_QWORD *)v1185 - 5) = v1247;
                                          __asm { PRFM            #0, [X26,#0x14C0] }
                                          *(_OWORD *)(v1185 - 24) = *(_OWORD *)&v695[v1180 / 8 - 3];
                                          *(v1230 - 3) = 0;
                                          *(v1230 - 2) = 0;
                                          *(v1185 - 8) = (char)v695[v1180 / 8 - 1];
                                          v1180 -= 5336;
                                        }
                                        while (&v695[v1180 / 8] != v1179);
                                        v1136 += v1180;
                                      }
                                      v1249 = *(void ***)(v2067 + 5688);
                                      if (v1249 != v695)
                                      {
                                        v1250 = 0;
                                        v1251 = &v1979[667 * v1973];
                                        categorye = v1251 + 666;
                                        v1252 = v1251 + 664;
                                        do
                                        {
                                          v1253 = &v1970[v1250 * 8];
                                          _X24 = &v695[v1250];
                                          __asm { PRFM            #0, [X24,#0x29B0] }
                                          *(_QWORD *)v1253 = v695[v1250];
                                          *(_OWORD *)(v1253 + 8) = *(_OWORD *)&v695[v1250 + 1];
                                          v1253[32] = (char)v695[v1250 + 4];
                                          *((_QWORD *)v1253 + 3) = &off_24CA00398;
                                          memcpy(&v1970[v1250 * 8 + 40], &v695[v1250 + 5], 0x708uLL);
                                          v1256 = *(_OWORD *)&v695[v1250 + 230];
                                          *((_QWORD *)v1253 + 232) = v695[v1250 + 232];
                                          *((_OWORD *)v1253 + 115) = v1256;
                                          v1257 = v695[v1250 + 235];
                                          *(_OWORD *)(v1253 + 1864) = *(_OWORD *)&v695[v1250 + 233];
                                          *((_QWORD *)v1253 + 235) = v1257;
                                          v1258 = *(_OWORD *)&v695[v1250 + 238];
                                          *((_OWORD *)v1253 + 118) = *(_OWORD *)&v695[v1250 + 236];
                                          *((_OWORD *)v1253 + 119) = v1258;
                                          *((_OWORD *)v1253 + 120) = *(_OWORD *)&v695[v1250 + 240];
                                          v1259 = *(_OWORD *)&v695[v1250 + 244];
                                          v1260 = *(_OWORD *)&v695[v1250 + 246];
                                          v1261 = v695[v1250 + 248];
                                          *((_OWORD *)v1253 + 121) = *(_OWORD *)&v695[v1250 + 242];
                                          *((_QWORD *)v1253 + 248) = v1261;
                                          *((_OWORD *)v1253 + 123) = v1260;
                                          *((_OWORD *)v1253 + 122) = v1259;
                                          v1263 = *(_OWORD *)&v695[v1250 + 253];
                                          v1262 = *(_OWORD *)&v695[v1250 + 255];
                                          v1264 = *(_OWORD *)&v695[v1250 + 251];
                                          *((_QWORD *)v1253 + 257) = v695[v1250 + 257];
                                          *(_OWORD *)(v1253 + 2024) = v1263;
                                          *(_OWORD *)(v1253 + 2040) = v1262;
                                          *(_OWORD *)(v1253 + 2008) = v1264;
                                          *(_OWORD *)(v1253 + 1992) = *(_OWORD *)&v695[v1250 + 249];
                                          v1265 = *(_OWORD *)&v695[v1250 + 260];
                                          v1266 = *(_OWORD *)&v695[v1250 + 262];
                                          v1267 = *(_OWORD *)&v695[v1250 + 264];
                                          *((_QWORD *)v1253 + 266) = v695[v1250 + 266];
                                          *((_OWORD *)v1253 + 132) = v1267;
                                          *((_OWORD *)v1253 + 131) = v1266;
                                          *((_OWORD *)v1253 + 130) = v1265;
                                          *((_OWORD *)v1253 + 129) = *(_OWORD *)&v695[v1250 + 258];
                                          v1268 = *(_OWORD *)&v695[v1250 + 269];
                                          v1269 = *(_OWORD *)&v695[v1250 + 271];
                                          v1270 = *(_OWORD *)&v695[v1250 + 273];
                                          *((_QWORD *)v1253 + 275) = v695[v1250 + 275];
                                          *(_OWORD *)(v1253 + 2168) = v1269;
                                          *(_OWORD *)(v1253 + 2184) = v1270;
                                          *(_OWORD *)(v1253 + 2152) = v1268;
                                          *(_OWORD *)(v1253 + 2136) = *(_OWORD *)&v695[v1250 + 267];
                                          v1271 = *(_OWORD *)&v695[v1250 + 278];
                                          v1272 = *(_OWORD *)&v695[v1250 + 280];
                                          v1273 = *(_OWORD *)&v695[v1250 + 282];
                                          *((_QWORD *)v1253 + 284) = v695[v1250 + 284];
                                          *((_OWORD *)v1253 + 141) = v1273;
                                          *((_OWORD *)v1253 + 140) = v1272;
                                          *((_OWORD *)v1253 + 139) = v1271;
                                          *((_OWORD *)v1253 + 138) = *(_OWORD *)&v695[v1250 + 276];
                                          v1274 = *(_OWORD *)&v695[v1250 + 287];
                                          v1275 = *(_OWORD *)&v695[v1250 + 289];
                                          v1276 = *(_OWORD *)&v695[v1250 + 291];
                                          *((_QWORD *)v1253 + 293) = v695[v1250 + 293];
                                          *(_OWORD *)(v1253 + 2312) = v1275;
                                          *(_OWORD *)(v1253 + 2328) = v1276;
                                          *(_OWORD *)(v1253 + 2296) = v1274;
                                          *(_OWORD *)(v1253 + 2280) = *(_OWORD *)&v695[v1250 + 285];
                                          v1277 = *(_OWORD *)&v695[v1250 + 296];
                                          v1278 = *(_OWORD *)&v695[v1250 + 298];
                                          v1279 = *(_OWORD *)&v695[v1250 + 300];
                                          *((_QWORD *)v1253 + 302) = v695[v1250 + 302];
                                          *((_OWORD *)v1253 + 150) = v1279;
                                          *((_OWORD *)v1253 + 149) = v1278;
                                          *((_OWORD *)v1253 + 148) = v1277;
                                          *((_OWORD *)v1253 + 147) = *(_OWORD *)&v695[v1250 + 294];
                                          v1280 = *(_OWORD *)&v695[v1250 + 305];
                                          v1281 = *(_OWORD *)&v695[v1250 + 307];
                                          v1282 = *(_OWORD *)&v695[v1250 + 309];
                                          *((_QWORD *)v1253 + 311) = v695[v1250 + 311];
                                          *(_OWORD *)(v1253 + 2456) = v1281;
                                          *(_OWORD *)(v1253 + 2472) = v1282;
                                          *(_OWORD *)(v1253 + 2440) = v1280;
                                          *(_OWORD *)(v1253 + 2424) = *(_OWORD *)&v695[v1250 + 303];
                                          memcpy(&v1970[v1250 * 8 + 2496], &v695[v1250 + 312], 0x288uLL);
                                          v1283 = *(_OWORD *)&v695[v1250 + 393];
                                          *((_QWORD *)v1253 + 395) = v695[v1250 + 395];
                                          *(_OWORD *)(v1253 + 3144) = v1283;
                                          v1284 = v695[v1250 + 398];
                                          *((_OWORD *)v1253 + 198) = *(_OWORD *)&v695[v1250 + 396];
                                          *((_QWORD *)v1253 + 398) = v1284;
                                          memcpy(&v1970[v1250 * 8 + 3192], &v695[v1250 + 399], 0x708uLL);
                                          v1285 = v695[v1250 + 626];
                                          *((_OWORD *)v1253 + 312) = *(_OWORD *)&v695[v1250 + 624];
                                          *((_QWORD *)v1253 + 626) = v1285;
                                          __asm { PRFM            #0, [X24,#0x3D48] }
                                          *((_QWORD *)v1253 + 627) = v695[v1250 + 627];
                                          v1287 = *(_OWORD *)&v695[v1250 + 628];
                                          *((_OWORD *)v1253 + 315) = *(_OWORD *)&v695[v1250 + 630];
                                          *((_OWORD *)v1253 + 314) = v1287;
                                          v1288 = *(_OWORD *)&v695[v1250 + 642];
                                          v1289 = *(_OWORD *)&v695[v1250 + 644];
                                          v1290 = v695[v1250 + 646];
                                          *((_OWORD *)v1253 + 320) = *(_OWORD *)&v695[v1250 + 640];
                                          *((_QWORD *)v1253 + 646) = v1290;
                                          *((_OWORD *)v1253 + 322) = v1289;
                                          *((_OWORD *)v1253 + 321) = v1288;
                                          v1291 = *(_OWORD *)&v695[v1250 + 632];
                                          v1292 = *(_OWORD *)&v695[v1250 + 634];
                                          v1293 = *(_OWORD *)&v695[v1250 + 636];
                                          *((_OWORD *)v1253 + 319) = *(_OWORD *)&v695[v1250 + 638];
                                          *((_OWORD *)v1253 + 318) = v1293;
                                          *((_OWORD *)v1253 + 317) = v1292;
                                          *((_OWORD *)v1253 + 316) = v1291;
                                          v1295 = *(_OWORD *)&v695[v1250 + 657];
                                          v1294 = *(_OWORD *)&v695[v1250 + 659];
                                          v1296 = *(_OWORD *)&v695[v1250 + 655];
                                          *((_QWORD *)v1253 + 661) = v695[v1250 + 661];
                                          *(_OWORD *)(v1253 + 5256) = v1295;
                                          *(_OWORD *)(v1253 + 5272) = v1294;
                                          *(_OWORD *)(v1253 + 5240) = v1296;
                                          v1297 = *(_OWORD *)&v695[v1250 + 647];
                                          v1298 = *(_OWORD *)&v695[v1250 + 649];
                                          v1299 = *(_OWORD *)&v695[v1250 + 653];
                                          *(_OWORD *)(v1253 + 5208) = *(_OWORD *)&v695[v1250 + 651];
                                          *(_OWORD *)(v1253 + 5224) = v1299;
                                          *(_OWORD *)(v1253 + 5176) = v1297;
                                          *(_OWORD *)(v1253 + 5192) = v1298;
                                          v1300 = v695[v1250 + 662];
                                          v1253[5304] = (char)v695[v1250 + 663];
                                          v1301 = &v1252[v1250];
                                          *((_QWORD *)v1253 + 662) = v1300;
                                          __asm { PRFM            #0, [X24,#0x3E70] }
                                          *((_OWORD *)v1253 + 332) = *(_OWORD *)&v1252[v1250];
                                          v1303 = categorye[v1250];
                                          *v1301 = 0;
                                          v1301[1] = 0;
                                          v1253[5328] = v1303;
                                          v1250 += 667;
                                        }
                                        while (&v695[v1250] != v1249);
                                        v695 = *(void ***)(v2067 + 5688);
                                        v1970 += v1250 * 8;
                                      }
                                      v1304 = *(void ***)(v2067 + 5680);
                                      *(_QWORD *)(v2067 + 5680) = v1136;
                                      *(_QWORD *)(v2067 + 5688) = v1970;
                                      v1305 = *(_QWORD *)(v2067 + 5696);
                                      *(_QWORD *)(v2067 + 5696) = *((_QWORD *)&v2148[1] + 1);
                                      *((_QWORD *)&v2148[1] + 1) = v1305;
                                      *((_QWORD *)&v2148[0] + 1) = v1304;
                                      *(_QWORD *)&v2148[0] = v1304;
                                      if (v695 != v1304)
                                      {
                                        do
                                        {
                                          *(_QWORD *)&v2148[1] = v695 - 667;
                                          v1306 = (std::__shared_weak_count *)*(v695 - 2);
                                          if (v1306)
                                          {
                                            v1307 = (unint64_t *)&v1306->__shared_owners_;
                                            do
                                              v1308 = __ldaxr(v1307);
                                            while (__stlxr(v1308 - 1, v1307));
                                            if (!v1308)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v1306->__on_zero_shared)(v1306);
                                              std::__shared_weak_count::__release_weak(v1306);
                                            }
                                          }
                                          v695 = *(void ***)&v2148[1];
                                        }
                                        while (*(void ***)&v2148[1] != v1304);
                                        v695 = *(void ***)&v2148[0];
                                      }
                                      if (v695)
                                        operator delete(v695);
                                    }
                                    else if (v695 == v692)
                                    {
                                      *v692 = v647;
                                      v1092 = &v693[5336 * v1973];
                                      *(_OWORD *)(v1092 + 8) = *(_OWORD *)&object[8];
                                      v1092[32] = object[32];
                                      *((_QWORD *)v1092 + 3) = &off_24CA00398;
                                      memcpy(v1092 + 40, &object[40], 0x708uLL);
                                      v1093 = *(_OWORD *)&object[1840];
                                      *((_QWORD *)v1092 + 232) = *(_QWORD *)&object[1856];
                                      *((_OWORD *)v1092 + 115) = v1093;
                                      v1094 = *(_QWORD *)&object[1880];
                                      *(_OWORD *)(v1092 + 1864) = *(_OWORD *)&object[1864];
                                      *((_QWORD *)v1092 + 235) = v1094;
                                      v1095 = v2222[1];
                                      *((_OWORD *)v1092 + 118) = v2222[0];
                                      *((_OWORD *)v1092 + 119) = v1095;
                                      *((_OWORD *)v1092 + 120) = v2222[2];
                                      v1097 = v2222[4];
                                      v1096 = v2222[5];
                                      v1098 = *(_QWORD *)&v2222[6];
                                      *((_OWORD *)v1092 + 121) = v2222[3];
                                      *((_QWORD *)v1092 + 248) = v1098;
                                      *((_OWORD *)v1092 + 123) = v1096;
                                      *((_OWORD *)v1092 + 122) = v1097;
                                      v1100 = *(_OWORD *)((char *)&v2222[8] + 8);
                                      v1099 = *(_OWORD *)((char *)&v2222[9] + 8);
                                      v1101 = *(_OWORD *)((char *)&v2222[7] + 8);
                                      *((_QWORD *)v1092 + 257) = *((_QWORD *)&v2222[10] + 1);
                                      *(_OWORD *)(v1092 + 2008) = v1101;
                                      *(_OWORD *)(v1092 + 2040) = v1099;
                                      *(_OWORD *)(v1092 + 2024) = v1100;
                                      *(_OWORD *)(v1092 + 1992) = *(_OWORD *)((char *)&v2222[6] + 8);
                                      v1102 = v2222[12];
                                      v1103 = v2222[13];
                                      v1104 = v2222[14];
                                      *((_QWORD *)v1092 + 266) = *(_QWORD *)&v2222[15];
                                      *((_OWORD *)v1092 + 132) = v1104;
                                      *((_OWORD *)v1092 + 131) = v1103;
                                      *((_OWORD *)v1092 + 130) = v1102;
                                      *((_OWORD *)v1092 + 129) = v2222[11];
                                      v1105 = *(_OWORD *)((char *)&v2222[16] + 8);
                                      v1106 = *(_OWORD *)((char *)&v2222[17] + 8);
                                      v1107 = *(_OWORD *)((char *)&v2222[18] + 8);
                                      *((_QWORD *)v1092 + 275) = *((_QWORD *)&v2222[19] + 1);
                                      *(_OWORD *)(v1092 + 2184) = v1107;
                                      *(_OWORD *)(v1092 + 2168) = v1106;
                                      *(_OWORD *)(v1092 + 2152) = v1105;
                                      *(_OWORD *)(v1092 + 2136) = *(_OWORD *)((char *)&v2222[15] + 8);
                                      v1108 = v2222[21];
                                      v1109 = v2222[22];
                                      v1110 = v2222[23];
                                      *((_QWORD *)v1092 + 284) = *(_QWORD *)&v2222[24];
                                      *((_OWORD *)v1092 + 141) = v1110;
                                      *((_OWORD *)v1092 + 140) = v1109;
                                      *((_OWORD *)v1092 + 139) = v1108;
                                      *((_OWORD *)v1092 + 138) = v2222[20];
                                      v1111 = *(_OWORD *)((char *)&v2222[25] + 8);
                                      v1112 = *(_OWORD *)((char *)&v2222[26] + 8);
                                      v1113 = *(_OWORD *)((char *)&v2222[27] + 8);
                                      *((_QWORD *)v1092 + 293) = *((_QWORD *)&v2222[28] + 1);
                                      *(_OWORD *)(v1092 + 2328) = v1113;
                                      *(_OWORD *)(v1092 + 2312) = v1112;
                                      *(_OWORD *)(v1092 + 2296) = v1111;
                                      *(_OWORD *)(v1092 + 2280) = *(_OWORD *)((char *)&v2222[24] + 8);
                                      v1114 = v2222[30];
                                      v1115 = v2222[31];
                                      v1116 = v2222[32];
                                      *((_QWORD *)v1092 + 302) = *(_QWORD *)&v2222[33];
                                      *((_OWORD *)v1092 + 150) = v1116;
                                      *((_OWORD *)v1092 + 149) = v1115;
                                      *((_OWORD *)v1092 + 148) = v1114;
                                      *((_OWORD *)v1092 + 147) = v2222[29];
                                      v1117 = *(_OWORD *)((char *)&v2222[34] + 8);
                                      v1118 = *(_OWORD *)((char *)&v2222[35] + 8);
                                      v1119 = *(_OWORD *)((char *)&v2222[36] + 8);
                                      *((_QWORD *)v1092 + 311) = *((_QWORD *)&v2222[37] + 1);
                                      *(_OWORD *)(v1092 + 2472) = v1119;
                                      *(_OWORD *)(v1092 + 2456) = v1118;
                                      *(_OWORD *)(v1092 + 2440) = v1117;
                                      *(_OWORD *)(v1092 + 2424) = *(_OWORD *)((char *)&v2222[33] + 8);
                                      memcpy(v1092 + 2496, &v2222[38], 0x288uLL);
                                      v1120 = *(_OWORD *)((char *)&v2222[78] + 8);
                                      *((_QWORD *)v1092 + 395) = *((_QWORD *)&v2222[79] + 1);
                                      *(_OWORD *)(v1092 + 3144) = v1120;
                                      v1121 = *(_QWORD *)&v2222[81];
                                      *((_OWORD *)v1092 + 198) = v2222[80];
                                      *((_QWORD *)v1092 + 398) = v1121;
                                      memcpy(v1092 + 3192, (char *)&v2222[81] + 8, 0x708uLL);
                                      v1122 = v2222[194];
                                      *((_QWORD *)v1092 + 626) = *(_QWORD *)&v2222[195];
                                      *((_OWORD *)v1092 + 312) = v1122;
                                      *((_QWORD *)v1092 + 627) = *((_QWORD *)&v2222[195] + 1);
                                      v1123 = v2222[196];
                                      *((_OWORD *)v1092 + 315) = v2222[197];
                                      *((_OWORD *)v1092 + 314) = v1123;
                                      v1124 = v2222[200];
                                      v1125 = v2222[201];
                                      v1126 = v2222[199];
                                      *((_OWORD *)v1092 + 316) = v2222[198];
                                      *((_OWORD *)v1092 + 319) = v1125;
                                      *((_OWORD *)v1092 + 318) = v1124;
                                      *((_OWORD *)v1092 + 317) = v1126;
                                      v1128 = v2222[203];
                                      v1127 = v2222[204];
                                      v1129 = *(_QWORD *)&v2222[205];
                                      *((_OWORD *)v1092 + 320) = v2222[202];
                                      *((_QWORD *)v1092 + 646) = v1129;
                                      *((_OWORD *)v1092 + 322) = v1127;
                                      *((_OWORD *)v1092 + 321) = v1128;
                                      v1130 = *(_OWORD *)((char *)&v2222[207] + 8);
                                      v1131 = *(_OWORD *)((char *)&v2222[208] + 8);
                                      v1132 = *(_OWORD *)((char *)&v2222[206] + 8);
                                      *(_OWORD *)(v1092 + 5176) = *(_OWORD *)((char *)&v2222[205] + 8);
                                      *(_OWORD *)(v1092 + 5224) = v1131;
                                      *(_OWORD *)(v1092 + 5208) = v1130;
                                      *(_OWORD *)(v1092 + 5192) = v1132;
                                      v1134 = *(_OWORD *)((char *)&v2222[210] + 8);
                                      v1133 = *(_OWORD *)((char *)&v2222[211] + 8);
                                      v1135 = *((_QWORD *)&v2222[212] + 1);
                                      *(_OWORD *)(v1092 + 5240) = *(_OWORD *)((char *)&v2222[209] + 8);
                                      *((_QWORD *)v1092 + 661) = v1135;
                                      *(_OWORD *)(v1092 + 5272) = v1133;
                                      *(_OWORD *)(v1092 + 5256) = v1134;
                                      LOBYTE(v1135) = BYTE8(v2222[213]);
                                      *((_QWORD *)v1092 + 662) = *(_QWORD *)&v2222[213];
                                      v1092[5304] = v1135;
                                      *((_OWORD *)v1092 + 332) = v2222[214];
                                      v2222[214] = 0uLL;
                                      v1092[5328] = v2222[215];
                                      *(_QWORD *)(v2067 + 5688) = v692 + 667;
                                    }
                                    else
                                    {
                                      v2087 = *(_OWORD *)v2182;
                                      memcpy((char *)v2148 + 7, &v2182[32], 0x708uLL);
                                      v2085 = *(_OWORD *)&v2182[1832];
                                      v2086 = *(void **)&v2182[1848];
                                      v2083 = *(_OWORD *)&v2182[1856];
                                      v2084 = *(void **)&v2182[1872];
                                      v2081 = *(_OWORD *)&v2182[1880];
                                      v2082 = *(_OWORD *)&v2182[1896];
                                      v2147 = *(void **)&v2182[1976];
                                      v2146 = *(_OWORD *)&v2182[1960];
                                      v2145 = *(_OWORD *)&v2182[1944];
                                      v2144 = *(_OWORD *)&v2182[1928];
                                      v2143 = *(_OWORD *)&v2182[1912];
                                      v2142 = *(void **)&v2182[2048];
                                      v2141 = *(_OWORD *)&v2182[2032];
                                      v2140 = *(_OWORD *)&v2182[2016];
                                      v2138 = *(_OWORD *)&v2182[1984];
                                      v2139 = *(_OWORD *)&v2182[2000];
                                      v2137 = *(void **)&v2182[2120];
                                      v2136 = *(_OWORD *)&v2182[2104];
                                      v2135 = *(_OWORD *)&v2182[2088];
                                      v2133 = *(_OWORD *)&v2182[2056];
                                      v2134 = *(_OWORD *)&v2182[2072];
                                      v2132 = *(void **)&v2182[2192];
                                      v2131 = *(_OWORD *)&v2182[2176];
                                      v2130 = *(_OWORD *)&v2182[2160];
                                      v2128 = *(_OWORD *)&v2182[2128];
                                      v2129 = *(_OWORD *)&v2182[2144];
                                      v2127 = *(void **)&v2182[2264];
                                      v2126 = *(_OWORD *)&v2182[2248];
                                      v2125 = *(_OWORD *)&v2182[2232];
                                      v2123 = *(_OWORD *)&v2182[2200];
                                      v2124 = *(_OWORD *)&v2182[2216];
                                      v2122 = *(void **)&v2182[2336];
                                      v2121 = *(_OWORD *)&v2182[2320];
                                      v2120 = *(_OWORD *)&v2182[2304];
                                      v2118 = *(_OWORD *)&v2182[2272];
                                      v2119 = *(_OWORD *)&v2182[2288];
                                      v2117 = *(void **)&v2182[2408];
                                      v2116 = *(_OWORD *)&v2182[2392];
                                      v2115 = *(_OWORD *)&v2182[2376];
                                      v2113 = *(_OWORD *)&v2182[2344];
                                      v2114 = *(_OWORD *)&v2182[2360];
                                      v2112 = *(void **)&v2182[2480];
                                      v2111 = *(_OWORD *)&v2182[2464];
                                      v2110 = *(_OWORD *)&v2182[2448];
                                      v2108 = *(_OWORD *)&v2182[2416];
                                      v2109 = *(_OWORD *)&v2182[2432];
                                      memcpy(v2107, &v2182[2488], 0x288uLL);
                                      v2079 = *(_OWORD *)&v2182[3136];
                                      v2080 = *(void **)&v2182[3152];
                                      v2077 = *(_OWORD *)&v2182[3160];
                                      v2078 = *(void **)&v2182[3176];
                                      memcpy(v2106, &v2182[3184], 0x708uLL);
                                      v2075 = *(_OWORD *)&v2182[4984];
                                      v2076 = *(void **)&v2182[5000];
                                      v1925 = v2222[196];
                                      v1922 = v2222[197];
                                      v2102 = *(_OWORD *)&v2182[5112];
                                      v2103 = *(_OWORD *)&v2182[5128];
                                      v2104 = *(_OWORD *)&v2182[5144];
                                      v2105 = *(void **)&v2182[5160];
                                      v2097 = *(_OWORD *)&v2182[5048];
                                      v2099 = *(_OWORD *)&v2182[5064];
                                      v2100 = *(_OWORD *)&v2182[5080];
                                      v2101 = *(_OWORD *)&v2182[5096];
                                      v2091 = *(_OWORD *)&v2182[5216];
                                      v2090 = *(_OWORD *)&v2182[5200];
                                      v2089 = *(_OWORD *)&v2182[5184];
                                      v2088 = *(_OWORD *)&v2182[5168];
                                      v2095 = *(void **)&v2182[5280];
                                      v2094 = *(_OWORD *)&v2182[5264];
                                      v2093 = *(_OWORD *)&v2182[5248];
                                      v2092 = *(_OWORD *)&v2182[5232];
                                      v2074 = v2182[5296];
                                      v2073 = *(void **)&v2182[5288];
                                      v697 = v692 - 667;
                                      v698 = v692;
                                      v2222[214] = 0uLL;
                                      if ((unint64_t)v692 >= 0x14D8)
                                      {
                                        v699 = 0;
                                        v700 = &v1979[667 * v1973] + v692 - (v695 + 667);
                                        v1989.i64[0] = (uint64_t)(v700 + 666);
                                        v1987.i64[0] = (uint64_t)(v700 + 664);
                                        do
                                        {
                                          v701 = &v692[v699];
                                          _X23 = &v697[v699];
                                          __asm { PRFM            #0, [X23,#0x29B0] }
                                          *v701 = v697[v699];
                                          *(_OWORD *)(v701 + 1) = *(_OWORD *)&v697[v699 + 1];
                                          *((_BYTE *)v701 + 32) = v697[v699 + 4];
                                          v701[3] = &off_24CA00398;
                                          memcpy(&v692[v699 + 5], &v697[v699 + 5], 0x708uLL);
                                          v704 = *(_OWORD *)&v697[v699 + 230];
                                          v701[232] = v697[v699 + 232];
                                          *((_OWORD *)v701 + 115) = v704;
                                          v705 = v697[v699 + 235];
                                          *(_OWORD *)(v701 + 233) = *(_OWORD *)&v697[v699 + 233];
                                          v701[235] = v705;
                                          v706 = *(_OWORD *)&v697[v699 + 238];
                                          *((_OWORD *)v701 + 118) = *(_OWORD *)&v697[v699 + 236];
                                          *((_OWORD *)v701 + 119) = v706;
                                          *((_OWORD *)v701 + 120) = *(_OWORD *)&v697[v699 + 240];
                                          v707 = *(_OWORD *)&v697[v699 + 244];
                                          v708 = *(_OWORD *)&v697[v699 + 246];
                                          v709 = v697[v699 + 248];
                                          *((_OWORD *)v701 + 121) = *(_OWORD *)&v697[v699 + 242];
                                          v701[248] = v709;
                                          *((_OWORD *)v701 + 123) = v708;
                                          *((_OWORD *)v701 + 122) = v707;
                                          v711 = *(_OWORD *)&v697[v699 + 253];
                                          v710 = *(_OWORD *)&v697[v699 + 255];
                                          v712 = *(_OWORD *)&v697[v699 + 251];
                                          v701[257] = v697[v699 + 257];
                                          *(_OWORD *)(v701 + 253) = v711;
                                          *(_OWORD *)(v701 + 255) = v710;
                                          *(_OWORD *)(v701 + 251) = v712;
                                          *(_OWORD *)(v701 + 249) = *(_OWORD *)&v697[v699 + 249];
                                          v713 = *(_OWORD *)&v697[v699 + 260];
                                          v714 = *(_OWORD *)&v697[v699 + 262];
                                          v715 = *(_OWORD *)&v697[v699 + 264];
                                          v701[266] = v697[v699 + 266];
                                          *((_OWORD *)v701 + 132) = v715;
                                          *((_OWORD *)v701 + 131) = v714;
                                          *((_OWORD *)v701 + 130) = v713;
                                          *((_OWORD *)v701 + 129) = *(_OWORD *)&v697[v699 + 258];
                                          v716 = *(_OWORD *)&v697[v699 + 269];
                                          v717 = *(_OWORD *)&v697[v699 + 271];
                                          v718 = *(_OWORD *)&v697[v699 + 273];
                                          v701[275] = v697[v699 + 275];
                                          *(_OWORD *)(v701 + 271) = v717;
                                          *(_OWORD *)(v701 + 273) = v718;
                                          *(_OWORD *)(v701 + 269) = v716;
                                          *(_OWORD *)(v701 + 267) = *(_OWORD *)&v697[v699 + 267];
                                          v719 = *(_OWORD *)&v697[v699 + 278];
                                          v720 = *(_OWORD *)&v697[v699 + 280];
                                          v721 = *(_OWORD *)&v697[v699 + 282];
                                          v701[284] = v697[v699 + 284];
                                          *((_OWORD *)v701 + 141) = v721;
                                          *((_OWORD *)v701 + 140) = v720;
                                          *((_OWORD *)v701 + 139) = v719;
                                          *((_OWORD *)v701 + 138) = *(_OWORD *)&v697[v699 + 276];
                                          v722 = *(_OWORD *)&v697[v699 + 287];
                                          v723 = *(_OWORD *)&v697[v699 + 289];
                                          v724 = *(_OWORD *)&v697[v699 + 291];
                                          v701[293] = v697[v699 + 293];
                                          *(_OWORD *)(v701 + 289) = v723;
                                          *(_OWORD *)(v701 + 291) = v724;
                                          *(_OWORD *)(v701 + 287) = v722;
                                          *(_OWORD *)(v701 + 285) = *(_OWORD *)&v697[v699 + 285];
                                          v725 = *(_OWORD *)&v697[v699 + 296];
                                          v726 = *(_OWORD *)&v697[v699 + 298];
                                          v727 = *(_OWORD *)&v697[v699 + 300];
                                          v701[302] = v697[v699 + 302];
                                          *((_OWORD *)v701 + 150) = v727;
                                          *((_OWORD *)v701 + 149) = v726;
                                          *((_OWORD *)v701 + 148) = v725;
                                          *((_OWORD *)v701 + 147) = *(_OWORD *)&v697[v699 + 294];
                                          v728 = *(_OWORD *)&v697[v699 + 305];
                                          v729 = *(_OWORD *)&v697[v699 + 307];
                                          v730 = *(_OWORD *)&v697[v699 + 309];
                                          v701[311] = v697[v699 + 311];
                                          *(_OWORD *)(v701 + 307) = v729;
                                          *(_OWORD *)(v701 + 309) = v730;
                                          *(_OWORD *)(v701 + 305) = v728;
                                          *(_OWORD *)(v701 + 303) = *(_OWORD *)&v697[v699 + 303];
                                          memcpy(&v692[v699 + 312], &v697[v699 + 312], 0x288uLL);
                                          v731 = *(_OWORD *)&v697[v699 + 393];
                                          v701[395] = v697[v699 + 395];
                                          *(_OWORD *)(v701 + 393) = v731;
                                          v732 = v697[v699 + 398];
                                          *((_OWORD *)v701 + 198) = *(_OWORD *)&v697[v699 + 396];
                                          v701[398] = v732;
                                          memcpy(&v692[v699 + 399], &v697[v699 + 399], 0x708uLL);
                                          v733 = v697[v699 + 626];
                                          *((_OWORD *)v701 + 312) = *(_OWORD *)&v697[v699 + 624];
                                          v701[626] = v733;
                                          __asm { PRFM            #0, [X23,#0x3D48] }
                                          v701[627] = v697[v699 + 627];
                                          v735 = *(_OWORD *)&v697[v699 + 628];
                                          *((_OWORD *)v701 + 315) = *(_OWORD *)&v697[v699 + 630];
                                          *((_OWORD *)v701 + 314) = v735;
                                          v736 = *(_OWORD *)&v697[v699 + 642];
                                          v737 = *(_OWORD *)&v697[v699 + 644];
                                          v738 = v697[v699 + 646];
                                          *((_OWORD *)v701 + 320) = *(_OWORD *)&v697[v699 + 640];
                                          v701[646] = v738;
                                          *((_OWORD *)v701 + 322) = v737;
                                          *((_OWORD *)v701 + 321) = v736;
                                          v739 = *(_OWORD *)&v697[v699 + 632];
                                          v740 = *(_OWORD *)&v697[v699 + 634];
                                          v741 = *(_OWORD *)&v697[v699 + 636];
                                          *((_OWORD *)v701 + 319) = *(_OWORD *)&v697[v699 + 638];
                                          *((_OWORD *)v701 + 318) = v741;
                                          *((_OWORD *)v701 + 317) = v740;
                                          *((_OWORD *)v701 + 316) = v739;
                                          v743 = *(_OWORD *)&v697[v699 + 657];
                                          v742 = *(_OWORD *)&v697[v699 + 659];
                                          v744 = *(_OWORD *)&v697[v699 + 655];
                                          v701[661] = v697[v699 + 661];
                                          *(_OWORD *)(v701 + 657) = v743;
                                          *(_OWORD *)(v701 + 659) = v742;
                                          *(_OWORD *)(v701 + 655) = v744;
                                          v745 = *(_OWORD *)&v697[v699 + 647];
                                          v746 = *(_OWORD *)&v697[v699 + 649];
                                          v747 = *(_OWORD *)&v697[v699 + 653];
                                          *(_OWORD *)(v701 + 651) = *(_OWORD *)&v697[v699 + 651];
                                          *(_OWORD *)(v701 + 653) = v747;
                                          *(_OWORD *)(v701 + 647) = v745;
                                          *(_OWORD *)(v701 + 649) = v746;
                                          v748 = v697[v699 + 662];
                                          *((_BYTE *)v701 + 5304) = v697[v699 + 663];
                                          v749 = (_QWORD *)(v1987.i64[0] + v699 * 8);
                                          v701[662] = v748;
                                          __asm { PRFM            #0, [X23,#0x3E70] }
                                          *((_OWORD *)v701 + 332) = *(_OWORD *)(v1987.i64[0] + v699 * 8);
                                          v751 = *(_BYTE *)(v1989.i64[0] + v699 * 8);
                                          *v749 = 0;
                                          v749[1] = 0;
                                          *((_BYTE *)v701 + 5328) = v751;
                                          v699 += 667;
                                        }
                                        while (&v697[v699] < v692);
                                        v698 = &v692[v699];
                                      }
                                      *(_QWORD *)(v2067 + 5688) = v698;
                                      if (v692 != v695 + 667)
                                      {
                                        v752 = (uint64_t)(v692 - 667);
                                        v753 = 8 * (v692 - (v695 + 667));
                                        do
                                        {
                                          v752 = sub_20F5B6B10(v752, (uint64_t)&v1979[667 * v1973 - 667] + v753) - 5336;
                                          v753 -= 5336;
                                        }
                                        while (v753);
                                      }
                                      *v695 = v647;
                                      v754 = &v1979[667 * v1973];
                                      *(_OWORD *)(v754 + 1) = v2087;
                                      *((_BYTE *)v754 + 32) = v1983;
                                      memcpy(v754 + 5, (char *)v2148 + 7, 0x708uLL);
                                      *((_OWORD *)v754 + 115) = v2085;
                                      *(_OWORD *)(v754 + 233) = v2083;
                                      *((_OWORD *)v754 + 118) = v2081;
                                      *((_OWORD *)v754 + 119) = v2082;
                                      v755 = v2144;
                                      *((_OWORD *)v754 + 120) = v2143;
                                      v756 = v2145;
                                      *((_OWORD *)v754 + 123) = v2146;
                                      *((_OWORD *)v754 + 122) = v756;
                                      *((_OWORD *)v754 + 121) = v755;
                                      v757 = v2139;
                                      *(_OWORD *)(v754 + 249) = v2138;
                                      v758 = v2140;
                                      *(_OWORD *)(v754 + 255) = v2141;
                                      *(_OWORD *)(v754 + 253) = v758;
                                      *(_OWORD *)(v754 + 251) = v757;
                                      v759 = v2136;
                                      *((_OWORD *)v754 + 131) = v2135;
                                      *((_OWORD *)v754 + 132) = v759;
                                      v760 = v2134;
                                      *((_OWORD *)v754 + 129) = v2133;
                                      *((_OWORD *)v754 + 130) = v760;
                                      v761 = v2129;
                                      *(_OWORD *)(v754 + 267) = v2128;
                                      v762 = v2130;
                                      *(_OWORD *)(v754 + 273) = v2131;
                                      *(_OWORD *)(v754 + 271) = v762;
                                      *(_OWORD *)(v754 + 269) = v761;
                                      v763 = v2126;
                                      *((_OWORD *)v754 + 140) = v2125;
                                      *((_OWORD *)v754 + 141) = v763;
                                      v764 = v2124;
                                      *((_OWORD *)v754 + 138) = v2123;
                                      *((_OWORD *)v754 + 139) = v764;
                                      v765 = v2119;
                                      *(_OWORD *)(v754 + 285) = v2118;
                                      v766 = v2120;
                                      *(_OWORD *)(v754 + 291) = v2121;
                                      *(_OWORD *)(v754 + 289) = v766;
                                      *(_OWORD *)(v754 + 287) = v765;
                                      v767 = v2116;
                                      *((_OWORD *)v754 + 149) = v2115;
                                      *((_OWORD *)v754 + 150) = v767;
                                      v768 = v2114;
                                      *((_OWORD *)v754 + 147) = v2113;
                                      *((_OWORD *)v754 + 148) = v768;
                                      v769 = v2109;
                                      *(_OWORD *)(v754 + 303) = v2108;
                                      v770 = v2110;
                                      *(_OWORD *)(v754 + 309) = v2111;
                                      *(_OWORD *)(v754 + 307) = v770;
                                      v754[232] = v2086;
                                      v754[235] = v2084;
                                      v754[248] = v2147;
                                      v754[257] = v2142;
                                      v754[266] = v2137;
                                      v754[275] = v2132;
                                      v754[284] = v2127;
                                      v754[293] = v2122;
                                      v754[302] = v2117;
                                      v754[311] = v2112;
                                      *(_OWORD *)(v754 + 305) = v769;
                                      memcpy(v754 + 312, v2107, 0x288uLL);
                                      *(_OWORD *)(v754 + 393) = v2079;
                                      v754[395] = v2080;
                                      *((_OWORD *)v754 + 198) = v2077;
                                      v754[398] = v2078;
                                      memcpy(v754 + 399, v2106, 0x708uLL);
                                      *((_OWORD *)v754 + 312) = v2075;
                                      v754[626] = v2076;
                                      v754[627] = v691;
                                      *((_OWORD *)v754 + 314) = v1925;
                                      *((_OWORD *)v754 + 315) = v1922;
                                      *((_OWORD *)v754 + 320) = v2102;
                                      *((_OWORD *)v754 + 321) = v2103;
                                      *((_OWORD *)v754 + 322) = v2104;
                                      v754[646] = v2105;
                                      *((_OWORD *)v754 + 316) = v2097;
                                      *((_OWORD *)v754 + 317) = v2099;
                                      *((_OWORD *)v754 + 318) = v2100;
                                      *((_OWORD *)v754 + 319) = v2101;
                                      v754[661] = v2095;
                                      *(_OWORD *)(v754 + 659) = v2094;
                                      *(_OWORD *)(v754 + 657) = v2093;
                                      *(_OWORD *)(v754 + 655) = v2092;
                                      *(_OWORD *)(v754 + 653) = v2091;
                                      *(_OWORD *)(v754 + 651) = v2090;
                                      *(_OWORD *)(v754 + 649) = v2089;
                                      *(_OWORD *)(v754 + 647) = v2088;
                                      *((_BYTE *)v754 + 5304) = v2074;
                                      v754[662] = v2073;
                                      v754[664] = v1969;
                                      v771 = (std::__shared_weak_count *)v754[665];
                                      v754[665] = categorya;
                                      if (v771)
                                      {
                                        v772 = (unint64_t *)&v771->__shared_owners_;
                                        do
                                          v773 = __ldaxr(v772);
                                        while (__stlxr(v773 - 1, v772));
                                        if (!v773)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v771->__on_zero_shared)(v771);
                                          std::__shared_weak_count::__release_weak(v771);
                                        }
                                      }
                                      LOBYTE(v1979[667 * v1973 + 666]) = v1985.i8[0];
                                    }
                                    categorya = (std::__shared_weak_count *)*((_QWORD *)&v2222[214] + 1);
                                  }
                                  if (categorya)
                                  {
                                    v1309 = (unint64_t *)&categorya->__shared_owners_;
                                    do
                                      v1310 = __ldaxr(v1309);
                                    while (__stlxr(v1310 - 1, v1309));
                                    if (!v1310)
                                    {
                                      ((void (*)(std::__shared_weak_count *))categorya->__on_zero_shared)(categorya);
                                      std::__shared_weak_count::__release_weak(categorya);
                                    }
                                  }
                                  v2018[2] = 0;
                                  *v2018 = 0;
                                  *(int64x2_t *)(v2067 + 5792) = vaddq_s64(*(int64x2_t *)(v2067 + 5792), (int64x2_t)xmmword_2103B4900);
                                  v655 = 1;
                                }
                                else
                                {
                                  v655 = 0;
                                  --*(_DWORD *)(v669 + 8);
                                  --*(_DWORD *)(v678 + 8);
                                  *(_OWORD *)&v2182[5016] = 0u;
                                  --*(_DWORD *)(v684 + 8);
                                  --*(_DWORD *)(v690 + 8);
                                  *(_OWORD *)&v2182[5032] = 0u;
                                }
                              }
                              v774 = *(std::__shared_weak_count **)&v2182[5312];
                              if (*(_QWORD *)&v2182[5312])
                              {
                                v775 = (unint64_t *)(*(_QWORD *)&v2182[5312] + 8);
                                do
                                  v776 = __ldaxr(v775);
                                while (__stlxr(v776 - 1, v775));
                                if (!v776)
                                {
                                  ((void (*)(std::__shared_weak_count *))v774->__on_zero_shared)(v774);
                                  std::__shared_weak_count::__release_weak(v774);
                                }
                              }
                              v501 = v2072;
LABEL_850:
                              if (v501)
                              {
                                v777 = (unint64_t *)&v501->__shared_owners_;
                                do
                                  v778 = __ldaxr(v777);
                                while (__stlxr(v778 - 1, v777));
                                if (!v778)
                                {
                                  ((void (*)(std::__shared_weak_count *))v501->__on_zero_shared)(v501);
                                  std::__shared_weak_count::__release_weak(v501);
                                }
                              }
                              if (v655)
                              {
                                *(_BYTE *)(v2067 + 6588) = 0;
                                *v2000 = 0;
                              }
                              if (v2071)
                              {
                                v779 = (unint64_t *)&v2071->__shared_owners_;
                                do
                                  v780 = __ldaxr(v779);
                                while (__stlxr(v780 - 1, v779));
                                if (!v780)
                                {
                                  ((void (*)(std::__shared_weak_count *))v2071->__on_zero_shared)(v2071);
                                  std::__shared_weak_count::__release_weak(v2071);
                                }
                              }
                              if (!v655)
                              {
                                sub_20F4AD5FC(v2106);
                                if (**(int **)(*(_QWORD *)&v2106[0] + 56) <= 4)
                                {
                                  v781 = *(unsigned __int8 *)(*(_QWORD *)&v2106[0] + 72);
                                  v782 = sub_20E8C31DC(*(uint64_t *)&v2106[0], "OSLogSurrogateAppender", 1, 0);
                                  v783 = v782;
                                  if (v781 || v782 != 0)
                                  {
                                    *(_QWORD *)v2182 = v2106;
                                    *(std::chrono::steady_clock::time_point *)&v2182[8] = std::chrono::steady_clock::now();
                                    *(std::chrono::system_clock::time_point *)&v2182[16] = std::chrono::system_clock::now();
                                    *(_DWORD *)&v2182[24] = 4;
                                    *(_QWORD *)&v2182[32] = "unknown file";
                                    *(_DWORD *)&v2182[40] = 184;
                                    *(_QWORD *)&v2182[48] = "unknown function";
                                    *(_QWORD *)&v2182[56] = 0;
                                    *(_QWORD *)&v2182[64] = 0;
                                    v785 = **(_QWORD **)v2182;
                                    if (*(char *)(**(_QWORD **)v2182 + 39) < 0)
                                    {
                                      v786 = *(_QWORD *)(v785 + 24);
                                      categoryb = *(const char **)(v785 + 16);
                                    }
                                    else
                                    {
                                      v786 = *(unsigned __int8 *)(**(_QWORD **)v2182 + 39);
                                      categoryb = (const char *)(**(_QWORD **)v2182 + 16);
                                    }
                                    v1989.i64[0] = **(_QWORD **)v2182 + 16;
                                    v787 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                                    if ((v787 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                                    {
                                      sub_20E9E46F8((uint64_t)v2149);
                                      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2149);
                                      if (v2150[8] && (v2150[7] & 0x80000000) != 0)
                                        operator delete(v2149[0]);
                                      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                                      __cxa_guard_release(&qword_254A4A510);
                                    }
                                    if (byte_254A4A4F8[23] >= 0)
                                      v788 = byte_254A4A4F8;
                                    else
                                      v788 = *(const char **)byte_254A4A4F8;
                                    if (byte_254A4A4F8[23] >= 0)
                                      v789 = byte_254A4A4F8[23];
                                    else
                                      v789 = *(_QWORD *)&byte_254A4A4F8[8];
                                    *(_QWORD *)object = os_log_create(v788, categoryb);
                                    if (v789 > 0x7FFFFFFFFFFFFFF7)
                                      sub_20E860B7C();
                                    if (v789 >= 0x17)
                                    {
                                      v791 = v783;
                                      v792 = (v789 & 0xFFFFFFFFFFFFFFF8) + 8;
                                      if ((v789 | 7) != 0x17)
                                        v792 = v789 | 7;
                                      v793 = v792 + 1;
                                      v790 = operator new(v792 + 1);
                                      *(_QWORD *)&object[24] = v793 | 0x8000000000000000;
                                      *(_QWORD *)&object[8] = v790;
                                      *(_QWORD *)&object[16] = v789;
                                      v783 = v791;
                                    }
                                    else
                                    {
                                      object[31] = v789;
                                      v790 = &object[8];
                                      if (!v789)
                                      {
LABEL_886:
                                        v790[v789] = 0;
                                        object[32] = 1;
                                        if (v786 > 0x7FFFFFFFFFFFFFF7)
                                          sub_20E860B7C();
                                        if (v786 >= 0x17)
                                        {
                                          v795 = (v786 & 0xFFFFFFFFFFFFFFF8) + 8;
                                          if ((v786 | 7) != 0x17)
                                            v795 = v786 | 7;
                                          v796 = v795 + 1;
                                          v794 = operator new(v795 + 1);
                                          *(_QWORD *)&object[56] = v796 | 0x8000000000000000;
                                          *(_QWORD *)&object[40] = v794;
                                          *(_QWORD *)&object[48] = v786;
                                        }
                                        else
                                        {
                                          object[63] = v786;
                                          v794 = &object[40];
                                          if (!v786)
                                          {
LABEL_894:
                                            v794[v786] = 0;
                                            object[64] = 1;
                                            v797 = *(NSObject **)object;
                                            if ((object[63] & 0x80000000) != 0)
                                              operator delete(*(void **)&object[40]);
                                            if (object[32] && (object[31] & 0x80000000) != 0)
                                              operator delete(*(void **)&object[8]);
                                            if (*(_QWORD *)object)
                                              os_release(*(void **)object);
                                            if (v783 && *(_QWORD *)(v783 + 24))
                                            {
                                              v798 = _os_log_pack_size();
                                              v799 = (std::__shared_weak_count_vtbl *)operator new(v798, (std::align_val_t)8uLL);
                                              v800 = (std::__shared_weak_count *)operator new();
                                              v801 = v2011;
                                              v802 = v800;
                                              v800->__shared_owners_ = 0;
                                              v803 = (unint64_t *)&v800->__shared_owners_;
                                              v800->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                                              v800->__shared_weak_owners_ = 0;
                                              v800[1].__vftable = v799;
                                              *(_QWORD *)object = v799;
                                              *(_QWORD *)&object[8] = v799;
                                              *(_QWORD *)&object[16] = v800;
                                              do
                                                v804 = __ldxr(v803);
                                              while (__stxr(v804 + 1, v803));
                                              memset(&object[24], 0, 24);
                                              do
                                                v805 = __ldaxr(v803);
                                              while (__stlxr(v805 - 1, v803));
                                              if (!v805)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v800->__on_zero_shared)(v800);
                                                std::__shared_weak_count::__release_weak(v802);
                                              }
                                              v806 = *(_QWORD *)object;
                                              v807 = _os_log_pack_fill();
                                              *(_DWORD *)v807 = 134218496;
                                              *(_QWORD *)(v807 + 4) = __szc;
                                              *(_WORD *)(v807 + 12) = 1024;
                                              *(_DWORD *)(v807 + 14) = v504;
                                              *(_WORD *)(v807 + 18) = 1024;
                                              *(_DWORD *)(v807 + 20) = v2011;
                                              v808 = (char *)operator new();
                                              v809 = *(unsigned __int8 *)(v785 + 39);
                                              v810 = v1989.i64[0];
                                              if ((v809 & 0x80u) != 0)
                                              {
                                                v810 = *(_QWORD *)(v785 + 16);
                                                v809 = *(_QWORD *)(v785 + 24);
                                              }
                                              *(_QWORD *)v808 = v806;
                                              *(_OWORD *)(v808 + 8) = *(_OWORD *)&object[8];
                                              *(_QWORD *)&object[8] = 0;
                                              *(_QWORD *)&object[16] = 0;
                                              *(_OWORD *)(v808 + 24) = *(_OWORD *)&object[24];
                                              *(_QWORD *)&object[24] = 0;
                                              *(_QWORD *)&object[32] = 0;
                                              *((_QWORD *)v808 + 5) = v810;
                                              *((_QWORD *)v808 + 6) = v809;
                                              v808[56] = 16;
                                              *(_QWORD *)&v2148[0] = 0;
                                              v2149[0] = v808;
                                              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v783 + 24) + 40))(*(_QWORD *)(v783 + 24), v2149);
                                              v811 = v2149[0];
                                              v2149[0] = 0;
                                              if (v811)
                                              {
                                                v812 = (std::__shared_weak_count *)*((_QWORD *)v811 + 4);
                                                if (v812)
                                                {
                                                  v813 = (unint64_t *)&v812->__shared_owners_;
                                                  do
                                                    v814 = __ldaxr(v813);
                                                  while (__stlxr(v814 - 1, v813));
                                                  if (!v814)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v812->__on_zero_shared)(v812);
                                                    std::__shared_weak_count::__release_weak(v812);
                                                  }
                                                }
                                                v815 = (std::__shared_weak_count *)*((_QWORD *)v811 + 2);
                                                if (v815)
                                                {
                                                  v816 = (unint64_t *)&v815->__shared_owners_;
                                                  do
                                                    v817 = __ldaxr(v816);
                                                  while (__stlxr(v817 - 1, v816));
                                                  if (!v817)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v815->__on_zero_shared)(v815);
                                                    std::__shared_weak_count::__release_weak(v815);
                                                  }
                                                }
                                                MEMORY[0x212BC6398](v811, 0x10F0C40B62ED6C6);
                                                v818 = *(_QWORD *)&v2148[0];
                                                *(_QWORD *)&v2148[0] = 0;
                                                v801 = v2011;
                                                if (v818)
                                                {
                                                  v819 = *(std::__shared_weak_count **)(v818 + 32);
                                                  if (v819)
                                                  {
                                                    v820 = (unint64_t *)&v819->__shared_owners_;
                                                    do
                                                      v821 = __ldaxr(v820);
                                                    while (__stlxr(v821 - 1, v820));
                                                    if (!v821)
                                                    {
                                                      ((void (*)(std::__shared_weak_count *))v819->__on_zero_shared)(v819);
                                                      std::__shared_weak_count::__release_weak(v819);
                                                    }
                                                  }
                                                  v822 = *(std::__shared_weak_count **)(v818 + 16);
                                                  if (v822)
                                                  {
                                                    v823 = (unint64_t *)&v822->__shared_owners_;
                                                    do
                                                      v824 = __ldaxr(v823);
                                                    while (__stlxr(v824 - 1, v823));
                                                    if (!v824)
                                                    {
                                                      ((void (*)(std::__shared_weak_count *))v822->__on_zero_shared)(v822);
                                                      std::__shared_weak_count::__release_weak(v822);
                                                    }
                                                  }
                                                  MEMORY[0x212BC6398](v818, 0x10F0C40B62ED6C6);
                                                  v801 = v2011;
                                                }
                                              }
                                              v825 = *(std::__shared_weak_count **)&object[32];
                                              if (*(_QWORD *)&object[32])
                                              {
                                                v826 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                                                do
                                                  v827 = __ldaxr(v826);
                                                while (__stlxr(v827 - 1, v826));
                                                if (!v827)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v825->__on_zero_shared)(v825);
                                                  std::__shared_weak_count::__release_weak(v825);
                                                }
                                              }
                                              v828 = *(std::__shared_weak_count **)&object[16];
                                              if (*(_QWORD *)&object[16])
                                              {
                                                v829 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                                                do
                                                  v830 = __ldaxr(v829);
                                                while (__stlxr(v830 - 1, v829));
                                                if (!v830)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v828->__on_zero_shared)(v828);
                                                  std::__shared_weak_count::__release_weak(v828);
                                                }
                                              }
                                            }
                                            else
                                            {
                                              os_log_type_enabled(v797, OS_LOG_TYPE_ERROR);
                                              *(_DWORD *)object = 134218496;
                                              *(_QWORD *)&object[4] = __szc;
                                              *(_WORD *)&object[12] = 1024;
                                              *(_DWORD *)&object[14] = v504;
                                              *(_WORD *)&object[18] = 1024;
                                              v801 = v2011;
                                              *(_DWORD *)&object[20] = v2011;
                                              v831 = (void *)_os_log_send_and_compose_impl();
                                              if (v831)
                                                free(v831);
                                            }
                                            if (v781)
                                            {
                                              sub_20E8C003C((uint64_t)v2182, "Failed to add the pre-integrated factor: %zu, state: %d -> %d.\n", (size_t)__szc, v504, v801);
                                              sub_20E863570((uint64_t)v2182);
                                            }
                                            sub_20E863570((uint64_t)v2182);
                                            v832 = *(std::__shared_weak_count **)&v2182[64];
                                            if (*(_QWORD *)&v2182[64])
                                            {
                                              v833 = (unint64_t *)(*(_QWORD *)&v2182[64] + 8);
                                              do
                                                v834 = __ldaxr(v833);
                                              while (__stlxr(v834 - 1, v833));
                                              if (!v834)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v832->__on_zero_shared)(v832);
                                                std::__shared_weak_count::__release_weak(v832);
                                              }
                                            }
                                            goto LABEL_953;
                                          }
                                        }
                                        memmove(v794, categoryb, v786);
                                        goto LABEL_894;
                                      }
                                    }
                                    memmove(v790, v788, v789);
                                    goto LABEL_886;
                                  }
                                }
                              }
LABEL_953:
                              if (v2068)
                              {
                                v835 = (unint64_t *)&v2068->__shared_owners_;
                                do
                                  v836 = __ldaxr(v835);
                                while (__stlxr(v836 - 1, v835));
                                if (!v836)
                                {
                                  ((void (*)(std::__shared_weak_count *))v2068->__on_zero_shared)(v2068);
                                  std::__shared_weak_count::__release_weak(v2068);
                                }
                              }
                              v644 = v2070;
                              if (!v2070)
                                goto LABEL_480;
                              v837 = (unint64_t *)&v2070->__shared_owners_;
                              do
                                v646 = __ldaxr(v837);
                              while (__stlxr(v646 - 1, v837));
LABEL_753:
                              if (!v646)
                              {
                                ((void (*)(std::__shared_weak_count *))v644->__on_zero_shared)(v644);
                                std::__shared_weak_count::__release_weak(v644);
                              }
                              goto LABEL_480;
                            }
                          }
                        }
                        v578 = *(_QWORD *)(v478 + 824);
                        v579 = *(_QWORD *)(v479 + 824);
                        v485[722] = v485[15];
                        v485[723] = v2030;
                        sub_20F61F108(v2067 + 480, v2106);
                        if ((v2010 & 1) != 0)
                        {
                          v581 = 0;
                          v582 = v1959;
                          v583 = *(_QWORD *)&v2106[0];
                          v584 = *(_QWORD *)&v2106[0];
                          if (!*(_QWORD *)&v2106[0])
                          {
LABEL_659:
                            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOIMUFactor.hpp", 179, (uint64_t)"sqrt_I_ != nullptr", 18, (uint64_t)"Covariance cannot be nullptr", 28, (void (*)(void **))sub_21023DDB0))
                            {
                              abort();
                            }
                            v584 = *(_QWORD *)&v2106[0];
                          }
                        }
                        else
                        {
                          v581 = v1961.i8[0];
                          v582 = v1961.u8[15];
                          v1958 = v1961.i8[14];
                          v1957 = v1961.i8[13];
                          v1956 = v1961.i8[12];
                          v1955 = v1961.i8[11];
                          v1954 = v1961.i8[10];
                          v1953 = v1961.i8[9];
                          v1952 = v1961.i8[8];
                          v1951 = v1961.i8[7];
                          v1950 = v1961.i8[6];
                          v1949 = v1961.i8[5];
                          v1948 = v1961.i8[4];
                          v1947 = v1961.i8[3];
                          v1946 = v1961.i8[2];
                          v1945 = v1961.i8[1];
                          v1944 = v1960.i8[15];
                          v1943 = v1960.i8[14];
                          v1942 = v1960.i8[13];
                          v1941 = v1960.i8[12];
                          v1940 = v1960.i8[11];
                          v1939 = v1960.i8[10];
                          v1938 = v1960.i8[9];
                          v1937 = v1960.i8[8];
                          v1936 = v1960.i8[7];
                          v1935 = v1960.i8[6];
                          v1934 = v1960.i8[5];
                          v1933 = v1960.i8[4];
                          v1932 = v1960.i8[3];
                          v1931 = v1960.i8[2];
                          v1930 = v1960.i8[1];
                          v1929 = v1960.i8[0];
                          v583 = *(_QWORD *)&v2106[0];
                          v584 = *(_QWORD *)&v2106[0];
                          if (!*(_QWORD *)&v2106[0])
                            goto LABEL_659;
                        }
                        v585 = (std::__shared_weak_count *)*((_QWORD *)&v2106[0] + 1);
                        *(_QWORD *)&v2107[0] = v584;
                        *((_QWORD *)&v2107[0] + 1) = *((_QWORD *)&v2106[0] + 1);
                        v2106[0] = 0uLL;
                        v2148[0] = __PAIR128__(*((unint64_t *)&v2107[0] + 1), v584);
                        if (*((_QWORD *)&v2107[0] + 1))
                        {
                          v586 = (unint64_t *)&v585->__shared_owners_;
                          do
                            v587 = __ldxr(v586);
                          while (__stxr(v587 + 1, v586));
                        }
                        v588 = *(char **)(v2067 + 5656);
                        v589 = *(char **)(v2067 + 5664);
                        v1959 = v582;
                        if (v588 == v589)
                        {
                          v589 = *(char **)(v2067 + 5656);
                        }
                        else if (*((_QWORD *)v589 - 1002) >= (unint64_t)__szc)
                        {
                          v590 = 0x2F028E0D4911E25DLL * ((v589 - v588) >> 4);
                          do
                          {
                            v591 = v590 >> 1;
                            v592 = (unint64_t *)&v588[8016 * (v590 >> 1)];
                            v593 = *v592;
                            v594 = (char *)(v592 + 1002);
                            v590 += ~(v590 >> 1);
                            if (v593 < (unint64_t)__szc)
                              v588 = v594;
                            else
                              v590 = v591;
                          }
                          while (v590);
                          if (v588 != v589)
                          {
                            v589 = v588;
                            if (*(void **)v588 == __szc)
                            {
                              v595 = 0;
LABEL_738:
                              if (v585)
                              {
                                v639 = (unint64_t *)&v585->__shared_owners_;
                                do
                                  v640 = __ldaxr(v639);
                                while (__stlxr(v640 - 1, v639));
                                if (!v640)
                                {
                                  ((void (*)(std::__shared_weak_count *))v585->__on_zero_shared)(v585);
                                  std::__shared_weak_count::__release_weak(v585);
                                }
                              }
                              if (v595)
                              {
                                *(_BYTE *)(v2067 + 6588) = 0;
                                *v2000 = 0;
                              }
                              v641 = (std::__shared_weak_count *)*((_QWORD *)&v2107[0] + 1);
                              if (*((_QWORD *)&v2107[0] + 1))
                              {
                                v642 = (unint64_t *)(*((_QWORD *)&v2107[0] + 1) + 8);
                                do
                                  v643 = __ldaxr(v642);
                                while (__stlxr(v643 - 1, v642));
                                if (!v643)
                                {
                                  ((void (*)(std::__shared_weak_count *))v641->__on_zero_shared)(v641);
                                  std::__shared_weak_count::__release_weak(v641);
                                }
                              }
                              v644 = (std::__shared_weak_count *)*((_QWORD *)&v2106[0] + 1);
                              if (!*((_QWORD *)&v2106[0] + 1))
                                goto LABEL_480;
                              v645 = (unint64_t *)(*((_QWORD *)&v2106[0] + 1) + 8);
                              do
                                v646 = __ldaxr(v645);
                              while (__stlxr(v646 - 1, v645));
                              goto LABEL_753;
                            }
                          }
                        }
                        if (v585)
                        {
                          v596 = (unint64_t *)&v585->__shared_owners_;
                          do
                            v597 = __ldxr(v596);
                          while (__stxr(v597 + 1, v596));
                        }
                        v2149[0] = __szc;
                        *(_QWORD *)v2150 = v583;
                        v2150[8] = 0;
                        v2150[40] = 0;
                        if ((v2010 & 1) == 0)
                        {
                          LOBYTE(v598) = v1930;
                          BYTE1(v598) = v1931;
                          BYTE2(v598) = v1932;
                          BYTE3(v598) = v1933;
                          BYTE4(v598) = v1934;
                          BYTE5(v598) = v1935;
                          BYTE6(v598) = v1936;
                          HIBYTE(v598) = v1937;
                          LOBYTE(v599) = v1938;
                          BYTE1(v599) = v1939;
                          BYTE2(v599) = v1940;
                          HIBYTE(v599) = v1941;
                          LOBYTE(v600) = v1942;
                          HIBYTE(v600) = v1943;
                          *(_WORD *)&v2150[37] = v600;
                          *(_DWORD *)&v2150[33] = v599;
                          v2150[8] = v581;
                          LOBYTE(v601) = v1945;
                          BYTE1(v601) = v1946;
                          BYTE2(v601) = v1947;
                          BYTE3(v601) = v1948;
                          BYTE4(v601) = v1949;
                          BYTE5(v601) = v1950;
                          BYTE6(v601) = v1951;
                          BYTE7(v601) = v1952;
                          BYTE8(v601) = v1953;
                          BYTE9(v601) = v1954;
                          BYTE10(v601) = v1955;
                          BYTE11(v601) = v1956;
                          BYTE12(v601) = v1957;
                          BYTE13(v601) = v1958;
                          BYTE14(v601) = v582;
                          HIBYTE(v601) = v1929;
                          *(_OWORD *)&v2150[9] = v601;
                          v2150[39] = v1944;
                          *(_QWORD *)&v2150[25] = v598;
                          v2150[40] = 1;
                        }
                        *(_QWORD *)&v2150[48] = v579;
                        *(_QWORD *)&v2150[56] = v578;
                        BYTE8(v2151[127]) = 0;
                        v2157 = 0;
                        v2158 = 257;
                        v2159 = 0u;
                        v2160 = 0u;
                        v2161 = 0;
                        *(_QWORD *)&v2180 = v584;
                        *((_QWORD *)&v2180 + 1) = v585;
                        if (v585)
                        {
                          v602 = (unint64_t *)&v585->__shared_owners_;
                          do
                            v603 = __ldxr(v602);
                          while (__stxr(v603 + 1, v602));
                          v2178 = 0xBFF0000000000000;
                          v2179 = 0;
                          v2181 = 0;
                          do
                            v604 = __ldaxr(v602);
                          while (__stlxr(v604 - 1, v602));
                          if (!v604)
                          {
                            ((void (*)(std::__shared_weak_count *))v585->__on_zero_shared)(v585);
                            std::__shared_weak_count::__release_weak(v585);
                          }
                        }
                        else
                        {
                          v2178 = 0xBFF0000000000000;
                          v2179 = 0;
                          v2181 = 0;
                        }
                        v605 = *(char **)(v2067 + 4840);
                        v606 = *(char **)(v2067 + 4848);
                        v607 = v605;
                        if (v606 != v605)
                        {
                          v608 = (v606 - v605) >> 4;
                          v607 = *(char **)(v2067 + 4840);
                          do
                          {
                            v609 = v608 >> 1;
                            v610 = (unsigned int *)&v607[16 * (v608 >> 1)];
                            v612 = *v610;
                            v611 = (char *)(v610 + 4);
                            v608 += ~(v608 >> 1);
                            if (v612 < v456)
                              v607 = v611;
                            else
                              v608 = v609;
                          }
                          while (v608);
                        }
                        if (v607 == v606 || *(_DWORD *)v607 != v456)
                          goto LABEL_722;
                        v613 = *((_QWORD *)v607 + 1);
                        *(_QWORD *)&v2159 = v613;
                        ++*(_DWORD *)(*((_QWORD *)v607 + 1) + 8);
                        v614 = *(char **)(v2067 + 4936);
                        v615 = *(char **)(v2067 + 4944);
                        v616 = v614;
                        if (v615 != v614)
                        {
                          v617 = (v615 - v614) >> 4;
                          v616 = *(char **)(v2067 + 4936);
                          do
                          {
                            v618 = v617 >> 1;
                            v619 = (unsigned int *)&v616[16 * (v617 >> 1)];
                            v621 = *v619;
                            v620 = (char *)(v619 + 4);
                            v617 += ~(v617 >> 1);
                            if (v621 < v456)
                              v616 = v620;
                            else
                              v617 = v618;
                          }
                          while (v617);
                        }
                        if (v616 == v615 || *(_DWORD *)v616 != v456)
                          goto LABEL_722;
                        v622 = *((_QWORD *)v616 + 1);
                        *((_QWORD *)&v2159 + 1) = v622;
                        ++*(_DWORD *)(*((_QWORD *)v616 + 1) + 8);
                        if (v606 != v605)
                        {
                          v623 = (v606 - v605) >> 4;
                          v580 = __szc;
                          do
                          {
                            v624 = v623 >> 1;
                            v625 = (unsigned int *)&v605[16 * (v623 >> 1)];
                            v627 = *v625;
                            v626 = (char *)(v625 + 4);
                            v623 += ~(v623 >> 1);
                            if (v627 < __szc)
                              v605 = v626;
                            else
                              v623 = v624;
                          }
                          while (v623);
                        }
                        if (v605 == v606 || *(_DWORD *)v605 != (_DWORD)__szc)
                          goto LABEL_722;
                        v628 = *((_QWORD *)v605 + 1);
                        *(_QWORD *)&v2160 = v628;
                        ++*(_DWORD *)(*((_QWORD *)v605 + 1) + 8);
                        if (v615 != v614)
                        {
                          v629 = (v615 - v614) >> 4;
                          do
                          {
                            v630 = v629 >> 1;
                            v631 = (unsigned int *)&v614[16 * (v629 >> 1)];
                            v633 = *v631;
                            v632 = (char *)(v631 + 4);
                            v629 += ~(v629 >> 1);
                            if (v633 < __szc)
                              v614 = v632;
                            else
                              v629 = v630;
                          }
                          while (v629);
                        }
                        if (v614 == v615
                          || *(_DWORD *)v614 != (_DWORD)__szc
                          || (v634 = *((_QWORD *)v614 + 1),
                              *((_QWORD *)&v2160 + 1) = v634,
                              ++*(_DWORD *)(*((_QWORD *)v614 + 1) + 8),
                              v635 = *(_QWORD *)(v2067 + 5032),
                              *(_QWORD *)(v2067 + 5040) == v635)
                          || *(_DWORD *)v635)
                        {
LABEL_722:
                          if ((_QWORD)v2159)
                            --*(_DWORD *)(v2159 + 8);
                          if (*((_QWORD *)&v2159 + 1))
                            --*(_DWORD *)(*((_QWORD *)&v2159 + 1) + 8);
                          if ((_QWORD)v2160)
                            --*(_DWORD *)(v2160 + 8);
                          if (*((_QWORD *)&v2160 + 1))
                            --*(_DWORD *)(*((_QWORD *)&v2160 + 1) + 8);
                          v595 = 0;
                          if (v2161)
                            --*(_DWORD *)(v2161 + 8);
                        }
                        else
                        {
                          v838 = *(_QWORD *)(v635 + 8);
                          v2161 = v838;
                          ++*(_DWORD *)(*(_QWORD *)(v635 + 8) + 8);
                          if (*(_BYTE *)(v613 + 20)
                            || *(_BYTE *)(v622 + 20)
                            || *(_BYTE *)(v628 + 20)
                            || *(_BYTE *)(v634 + 20)
                            || *(_BYTE *)(v838 + 20))
                          {
                            *(_OWORD *)&v2182[8] = *(_OWORD *)v2149;
                            *(_QWORD *)v2182 = __szc;
                            *(_QWORD *)&v2182[24] = *(_QWORD *)v2150;
                            v2182[32] = 0;
                            v2182[64] = 0;
                            if (v2150[40])
                            {
                              *(_OWORD *)&v2182[32] = *(_OWORD *)&v2150[8];
                              *(_OWORD *)&v2182[48] = *(_OWORD *)&v2150[24];
                              v2182[64] = 1;
                            }
                            *(_OWORD *)&v2182[72] = *(_OWORD *)&v2150[48];
                            memcpy(&v2182[88], &v2150[64], 0x708uLL);
                            memcpy(&v2182[1888], v2151, 0x708uLL);
                            *(_OWORD *)&v2182[3752] = *(_OWORD *)((char *)&v2151[116] + 8);
                            *(_OWORD *)&v2182[3768] = *(_OWORD *)((char *)&v2151[117] + 8);
                            *(_OWORD *)&v2182[3784] = *(_OWORD *)((char *)&v2151[118] + 8);
                            *(_QWORD *)&v2182[3800] = *((_QWORD *)&v2151[119] + 1);
                            *(_OWORD *)&v2182[3688] = *(_OWORD *)((char *)&v2151[112] + 8);
                            *(_OWORD *)&v2182[3704] = *(_OWORD *)((char *)&v2151[113] + 8);
                            *(_OWORD *)&v2182[3720] = *(_OWORD *)((char *)&v2151[114] + 8);
                            *(_OWORD *)&v2182[3736] = *(_OWORD *)((char *)&v2151[115] + 8);
                            *(_OWORD *)&v2182[3872] = v2151[124];
                            *(_OWORD *)&v2182[3888] = v2151[125];
                            *(_OWORD *)&v2182[3904] = v2151[126];
                            *(_QWORD *)&v2182[3920] = *(_QWORD *)&v2151[127];
                            *(_OWORD *)&v2182[3808] = v2151[120];
                            *(_OWORD *)&v2182[3824] = v2151[121];
                            *(_OWORD *)&v2182[3840] = v2151[122];
                            *(_OWORD *)&v2182[3856] = v2151[123];
                            v2182[3928] = 0;
                            v2196 = 0;
                            if (v2157)
                            {
                              memcpy(&v2182[3928], (char *)&v2151[127] + 8, 0x708uLL);
                              v2187 = v2151[244];
                              v2188 = v2151[245];
                              v2189 = v2151[246];
                              v2190 = v2152;
                              v2183 = v2151[240];
                              v2184 = v2151[241];
                              v2185 = v2151[242];
                              v2186 = v2151[243];
                              v1989.i8[0] = v2153;
                              v2191 = v2153;
                              v1987.i8[0] = v2154;
                              v2193 = v2154;
                              v2192 = &off_24CA00398;
                              memcpy(v2194, v2155, sizeof(v2194));
                              v1985.i64[0] = v2156;
                              v2195 = v2156;
                              v2196 = 1;
                            }
                            v2197 = v2158;
                            v2198 = v2159;
                            v2199 = v2160;
                            v2200 = v2161;
                            v2205 = v2166;
                            v2206 = v2167;
                            v2207 = v2168;
                            v2208 = v2169;
                            v2201 = v2162;
                            v2202 = v2163;
                            v2203 = v2164;
                            v2204 = v2165;
                            v2216 = v2177;
                            v2214 = v2175;
                            v2215 = v2176;
                            v2212 = v2173;
                            v2213 = v2174;
                            v2210 = v2171;
                            v2211 = v2172;
                            v2209 = v2170;
                            v2218 = v2179;
                            v2217 = v2178;
                            v839 = v2180;
                            v2219 = v2180;
                            v840 = (std::__shared_weak_count *)*((_QWORD *)&v2180 + 1);
                            v2180 = 0uLL;
                            v2220 = v2181;
                            v841 = *(char **)(v2067 + 5664);
                            if (v841 == v589 || *(void **)v589 != __szc)
                            {
                              v842 = *(char **)(v2067 + 5656);
                              v843 = v589 - v842;
                              v1920 = v842;
                              v1917 = (v589 - v842) / 8016;
                              v844 = *(_QWORD *)(v2067 + 5672);
                              categoryc = &v842[8016 * v1917];
                              if ((unint64_t)v841 >= v844)
                              {
                                v898 = 0x2F028E0D4911E25DLL * ((v841 - v842) >> 4) + 1;
                                if (v898 > 0x82CF750393AC3)
                                  sub_20E867F44();
                                v899 = 0x2F028E0D4911E25DLL * ((uint64_t)(v844 - (_QWORD)v842) >> 4);
                                if (2 * v899 > v898)
                                  v898 = 2 * v899;
                                if (v899 >= 0x4167BA81C9D61)
                                  v900 = 0x82CF750393AC3;
                                else
                                  v900 = v898;
                                *(_QWORD *)&object[32] = v2067 + 5672;
                                if (v900)
                                {
                                  if (v900 > 0x82CF750393AC3)
                                    sub_20E877A38();
                                  v901 = (char *)operator new(8016 * v900);
                                }
                                else
                                {
                                  v901 = 0;
                                }
                                *(_QWORD *)object = v901;
                                *(_QWORD *)&object[8] = &v901[8016 * v1917];
                                v2013 = *(_QWORD *)&object[8];
                                *(_QWORD *)&object[16] = *(_QWORD *)&object[8];
                                *(_QWORD *)&object[24] = &v901[8016 * v900];
                                if (v1917 == v900)
                                {
                                  if (v843 < 1)
                                  {
                                    if (v1920 == v589)
                                      v955 = 1;
                                    else
                                      v955 = 2 * v1917;
                                    if (v955 > 0x82CF750393AC3)
                                      sub_20E877A38();
                                    *(_QWORD *)object = operator new(8016 * v955);
                                    *(_QWORD *)&object[8] = *(_QWORD *)object + 8016 * (v955 >> 2);
                                    v2013 = *(_QWORD *)&object[8];
                                    *(_QWORD *)&object[16] = *(_QWORD *)&object[8];
                                    *(_QWORD *)&object[24] = *(_QWORD *)object + 8016 * v955;
                                    if (v901)
                                      operator delete(v901);
                                  }
                                  else
                                  {
                                    v942 = v1917 + 2;
                                    if (v1917 >= -1)
                                      v942 = v1917 + 1;
                                    v2013 = *(_QWORD *)&object[8] - 8016 * (v942 >> 1);
                                    *(_QWORD *)&object[16] = v2013;
                                    *(_QWORD *)&object[8] = v2013;
                                  }
                                }
                                *(_QWORD *)v2013 = __szc;
                                *(_OWORD *)(v2013 + 8) = *(_OWORD *)v2149;
                                *(_QWORD *)(v2013 + 24) = *(_QWORD *)&v2182[24];
                                *(_BYTE *)(v2013 + 32) = 0;
                                *(_BYTE *)(v2013 + 64) = 0;
                                if (v2182[64])
                                {
                                  v956 = *(_OWORD *)&v2182[48];
                                  *(_OWORD *)(v2013 + 32) = *(_OWORD *)&v2182[32];
                                  *(_OWORD *)(v2013 + 48) = v956;
                                  *(_BYTE *)(v2013 + 64) = 1;
                                }
                                *(_OWORD *)(v2013 + 72) = *(_OWORD *)&v2182[72];
                                memcpy((void *)(v2013 + 88), &v2182[88], 0x708uLL);
                                memcpy((void *)(v2013 + 1888), &v2182[1888], 0x708uLL);
                                v957 = *(_OWORD *)&v2182[3720];
                                *(_OWORD *)(v2013 + 3736) = *(_OWORD *)&v2182[3736];
                                *(_OWORD *)(v2013 + 3720) = v957;
                                v958 = *(_OWORD *)&v2182[3688];
                                *(_OWORD *)(v2013 + 3704) = *(_OWORD *)&v2182[3704];
                                *(_OWORD *)(v2013 + 3688) = v958;
                                *(_QWORD *)(v2013 + 3800) = *(_QWORD *)&v2182[3800];
                                *(_OWORD *)(v2013 + 3784) = *(_OWORD *)&v2182[3784];
                                v959 = *(_OWORD *)&v2182[3752];
                                *(_OWORD *)(v2013 + 3768) = *(_OWORD *)&v2182[3768];
                                *(_OWORD *)(v2013 + 3752) = v959;
                                v960 = *(_OWORD *)&v2182[3824];
                                *(_OWORD *)(v2013 + 3808) = *(_OWORD *)&v2182[3808];
                                *(_OWORD *)(v2013 + 3824) = v960;
                                v961 = *(_OWORD *)&v2182[3856];
                                *(_OWORD *)(v2013 + 3840) = *(_OWORD *)&v2182[3840];
                                *(_OWORD *)(v2013 + 3856) = v961;
                                *(_OWORD *)(v2013 + 3904) = *(_OWORD *)&v2182[3904];
                                v962 = *(_OWORD *)&v2182[3872];
                                *(_OWORD *)(v2013 + 3888) = *(_OWORD *)&v2182[3888];
                                *(_QWORD *)(v2013 + 3920) = *(_QWORD *)&v2182[3920];
                                *(_OWORD *)(v2013 + 3872) = v962;
                                *(_BYTE *)(v2013 + 3928) = 0;
                                *(_BYTE *)(v2013 + 7680) = 0;
                                if (v2196)
                                {
                                  memcpy((void *)(v2013 + 3928), &v2182[3928], 0x708uLL);
                                  v963 = v2188;
                                  *(_OWORD *)(v2013 + 5792) = v2187;
                                  *(_OWORD *)(v2013 + 5808) = v963;
                                  *(_OWORD *)(v2013 + 5824) = v2189;
                                  v964 = v2184;
                                  *(_OWORD *)(v2013 + 5728) = v2183;
                                  *(_OWORD *)(v2013 + 5744) = v964;
                                  v965 = v2186;
                                  *(_OWORD *)(v2013 + 5760) = v2185;
                                  *(_QWORD *)(v2013 + 5840) = v2190;
                                  *(_OWORD *)(v2013 + 5776) = v965;
                                  *(_BYTE *)(v2013 + 5848) = v2191;
                                  *(_BYTE *)(v2013 + 5864) = v2193;
                                  *(_QWORD *)(v2013 + 5856) = &off_24CA00398;
                                  memcpy((void *)(v2013 + 5872), v2194, 0x708uLL);
                                  *(_QWORD *)(v2013 + 7672) = v2195;
                                  *(_BYTE *)(v2013 + 7680) = 1;
                                }
                                *(_WORD *)(v2013 + 7688) = v2197;
                                v966 = v2199;
                                *(_OWORD *)(v2013 + 7696) = v2198;
                                *(_OWORD *)(v2013 + 7712) = v966;
                                *(_QWORD *)(v2013 + 7728) = v2200;
                                v967 = v2202;
                                *(_OWORD *)(v2013 + 7736) = v2201;
                                *(_OWORD *)(v2013 + 7752) = v967;
                                v968 = v2204;
                                *(_OWORD *)(v2013 + 7768) = v2203;
                                *(_OWORD *)(v2013 + 7784) = v968;
                                *(_QWORD *)(v2013 + 7848) = v2208;
                                *(_OWORD *)(v2013 + 7832) = v2207;
                                v969 = v2205;
                                *(_OWORD *)(v2013 + 7816) = v2206;
                                *(_OWORD *)(v2013 + 7800) = v969;
                                v970 = v2209;
                                v971 = v2210;
                                v972 = v2211;
                                *(_OWORD *)(v2013 + 7904) = v2212;
                                *(_OWORD *)(v2013 + 7888) = v972;
                                *(_OWORD *)(v2013 + 7872) = v971;
                                *(_OWORD *)(v2013 + 7856) = v970;
                                v973 = v2213;
                                v974 = v2214;
                                v975 = v2215;
                                *(_QWORD *)(v2013 + 7968) = v2216;
                                *(_OWORD *)(v2013 + 7952) = v975;
                                *(_OWORD *)(v2013 + 7936) = v974;
                                *(_OWORD *)(v2013 + 7920) = v973;
                                v976 = v2217;
                                *(_BYTE *)(v2013 + 7984) = v2218;
                                *(_QWORD *)(v2013 + 7976) = v976;
                                *(_OWORD *)(v2013 + 7992) = v2219;
                                v2219 = 0uLL;
                                *(_BYTE *)(v2013 + 8008) = v2220;
                                v977 = v2013 + 8016;
                                *(_QWORD *)&object[16] = v2013 + 8016;
                                v1989.i64[0] = *(_QWORD *)(v2067 + 5656);
                                if ((char *)v1989.i64[0] != categoryc)
                                {
                                  v978 = 0;
                                  v979 = &v1920[8016 * v1917];
                                  v980 = v979 - 8016;
                                  v1987.i64[0] = (uint64_t)(v979 - 7952);
                                  v981 = v979 - 24048;
                                  __szd = v2013 - 8016;
                                  v1985.i64[0] = v2013 - 4208;
                                  v982 = v2013 - 7952;
                                  v1926 = v2013 - 7984;
                                  v983 = categoryc;
                                  do
                                  {
                                    _X22 = &v981[v978];
                                    __asm { PRFM            #0, [X22] }
                                    *(_QWORD *)(__szd + v978) = *(_QWORD *)&v980[v978];
                                    *(_OWORD *)(v2013 - 8008 + v978) = *(_OWORD *)&v981[v978 + 16040];
                                    *(_QWORD *)(v2013 - 7992 + v978) = *(_QWORD *)&v981[v978 + 16056];
                                    v1005 = (_OWORD *)(v1926 + v978);
                                    *(_BYTE *)(v1926 + v978) = 0;
                                    *(_BYTE *)(v982 + v978) = 0;
                                    __asm { PRFM            #0, [X22,#0x40] }
                                    if (*(_BYTE *)(v1987.i64[0] + v978))
                                    {
                                      v1007 = *((_OWORD *)_X22 + 1005);
                                      *v1005 = *((_OWORD *)_X22 + 1004);
                                      v1005[1] = v1007;
                                      *(_BYTE *)(v982 + v978) = 1;
                                    }
                                    _X21 = _X22 + 7680;
                                    *(_OWORD *)(v2013 - 7944 + v978) = *(_OWORD *)(_X22 + 16104);
                                    memcpy((void *)(v2013 - 7928 + v978), _X22 + 16120, 0x708uLL);
                                    memcpy((void *)(v2013 - 6128 + v978), _X22 + 17920, 0x708uLL);
                                    v1009 = v1985.i64[0] + v978;
                                    v1010 = *(_OWORD *)(_X22 + 19720);
                                    v1011 = *(_OWORD *)(_X22 + 19736);
                                    v1012 = *(_OWORD *)(_X22 + 19752);
                                    *(_OWORD *)(v1009 - 72) = *(_OWORD *)(_X22 + 19768);
                                    *(_OWORD *)(v1009 - 88) = v1012;
                                    *(_OWORD *)(v1009 - 104) = v1011;
                                    *(_OWORD *)(v1009 - 120) = v1010;
                                    v1013 = *(_OWORD *)(_X22 + 19784);
                                    v1014 = *(_OWORD *)(_X22 + 19800);
                                    v1015 = *(_OWORD *)(_X22 + 19816);
                                    *(_QWORD *)(v1009 - 8) = *((_QWORD *)_X22 + 2479);
                                    *(_OWORD *)(v1009 - 24) = v1015;
                                    *(_OWORD *)(v1009 - 40) = v1014;
                                    *(_OWORD *)(v1009 - 56) = v1013;
                                    v1016 = *((_QWORD *)_X22 + 2494);
                                    v1017 = *((_OWORD *)_X22 + 1244);
                                    v1018 = *((_OWORD *)_X22 + 1246);
                                    *(_OWORD *)(v1009 + 80) = *((_OWORD *)_X22 + 1245);
                                    *(_OWORD *)(v1009 + 96) = v1018;
                                    *(_OWORD *)(v1009 + 64) = v1017;
                                    *(_QWORD *)(v1009 + 112) = v1016;
                                    v1019 = *((_OWORD *)_X22 + 1240);
                                    v1020 = *((_OWORD *)_X22 + 1241);
                                    v1021 = *((_OWORD *)_X22 + 1243);
                                    *(_OWORD *)(v1009 + 32) = *((_OWORD *)_X22 + 1242);
                                    *(_OWORD *)(v1009 + 48) = v1021;
                                    *(_OWORD *)v1009 = v1019;
                                    *(_OWORD *)(v1009 + 16) = v1020;
                                    v1022 = v2013 + v978;
                                    *(_BYTE *)(v1022 - 4088) = 0;
                                    *(_BYTE *)(v1022 - 336) = 0;
                                    v1023 = &v983[v978];
                                    __asm { PRFM            #0, [X21] }
                                    if (v983[v978 - 336])
                                    {
                                      _X21 = _X22 + 5848;
                                      memcpy((void *)(v1022 - 4088), &v981[v978 + 19960], 0x708uLL);
                                      v1026 = v1022 - 2288;
                                      v1027 = *(_OWORD *)&v981[v978 + 21776];
                                      v1028 = *(_OWORD *)&v981[v978 + 21808];
                                      v1029 = *(_OWORD *)&v981[v978 + 21760];
                                      *(_OWORD *)(v1026 + 32) = *(_OWORD *)&v981[v978 + 21792];
                                      *(_OWORD *)(v1026 + 48) = v1028;
                                      *(_OWORD *)v1026 = v1029;
                                      *(_OWORD *)(v1026 + 16) = v1027;
                                      v1030 = *(_OWORD *)&v981[v978 + 21840];
                                      v1031 = *(_OWORD *)&v981[v978 + 21856];
                                      v1032 = *(_OWORD *)&v981[v978 + 21824];
                                      *(_QWORD *)(v1026 + 112) = *(_QWORD *)&v981[v978 + 21872];
                                      *(_OWORD *)(v1026 + 80) = v1030;
                                      *(_OWORD *)(v1026 + 96) = v1031;
                                      *(_OWORD *)(v1026 + 64) = v1032;
                                      __asm { PRFM            #0, [X21] }
                                      *(_BYTE *)(v1022 - 2168) = *(v1023 - 2168);
                                      *(_BYTE *)(v1022 - 2152) = *(v1023 - 2152);
                                      *(_QWORD *)(v1022 - 2160) = &off_24CA00398;
                                      v983 = categoryc;
                                      memcpy((void *)(v1022 - 2144), &v981[v978 + 21904], 0x708uLL);
                                      *(_QWORD *)(__szd + v978 + 7672) = *(_QWORD *)&v980[v978 + 7672];
                                      *(_BYTE *)(v1022 - 336) = 1;
                                    }
                                    _X8 = _X22 + 7992;
                                    *(_WORD *)(v1022 - 328) = *((_WORD *)v1023 - 164);
                                    v985 = v1022 - 320;
                                    v986 = *(_OWORD *)&v981[v978 + 23728];
                                    v987 = *(_OWORD *)&v981[v978 + 23744];
                                    *(_QWORD *)(v985 + 32) = *(_QWORD *)&v981[v978 + 23760];
                                    *(_OWORD *)v985 = v986;
                                    *(_OWORD *)(v985 + 16) = v987;
                                    v988 = (_OWORD *)(v1022 - 280);
                                    v990 = *(_OWORD *)&v981[v978 + 23848];
                                    v989 = *(_OWORD *)&v981[v978 + 23864];
                                    v991 = *(_QWORD *)&v981[v978 + 23880];
                                    *(_OWORD *)(v1022 - 216) = *(_OWORD *)&v981[v978 + 23832];
                                    *(_QWORD *)(v1022 - 168) = v991;
                                    *(_OWORD *)(v1022 - 184) = v989;
                                    *(_OWORD *)(v1022 - 200) = v990;
                                    v992 = *(_OWORD *)&v981[v978 + 23768];
                                    v993 = *(_OWORD *)&v981[v978 + 23784];
                                    v994 = *(_OWORD *)&v981[v978 + 23800];
                                    *(_OWORD *)(v1022 - 232) = *(_OWORD *)&v981[v978 + 23816];
                                    *(_OWORD *)(v1022 - 248) = v994;
                                    *v988 = v992;
                                    v988[1] = v993;
                                    v995 = *(_OWORD *)&v981[v978 + 23968];
                                    v996 = *(_OWORD *)&v981[v978 + 23984];
                                    v997 = *(_OWORD *)&v981[v978 + 23952];
                                    *(_QWORD *)(v1022 - 48) = *(_QWORD *)&v981[v978 + 24000];
                                    *(_OWORD *)(v1022 - 80) = v995;
                                    *(_OWORD *)(v1022 - 64) = v996;
                                    *(_OWORD *)(v1022 - 96) = v997;
                                    v998 = *(_OWORD *)&v981[v978 + 23888];
                                    v999 = *(_OWORD *)&v981[v978 + 23904];
                                    v1000 = *(_OWORD *)&v981[v978 + 23936];
                                    *(_OWORD *)(v1022 - 128) = *(_OWORD *)&v981[v978 + 23920];
                                    *(_OWORD *)(v1022 - 112) = v1000;
                                    *(_OWORD *)(v1022 - 160) = v998;
                                    *(_OWORD *)(v1022 - 144) = v999;
                                    v1001 = *(_QWORD *)&v981[v978 + 24008];
                                    *(_BYTE *)(v1022 - 32) = v981[v978 + 24016];
                                    *(_QWORD *)(v1022 - 40) = v1001;
                                    __asm { PRFM            #0, [X8] }
                                    *(_OWORD *)(v1022 - 24) = *(_OWORD *)(v1023 - 24);
                                    *((_QWORD *)v1023 - 3) = 0;
                                    *((_QWORD *)v1023 - 2) = 0;
                                    *(_BYTE *)(v1022 - 8) = *(v1023 - 8);
                                    v978 -= 8016;
                                    v982 = v2013 - 7952;
                                  }
                                  while (&v983[v978] != (char *)v1989.i64[0]);
                                  v977 = *(_QWORD *)&object[16];
                                  v2013 += v978;
                                }
                                __sze = *(char **)(v2067 + 5664);
                                if (__sze != categoryc)
                                {
                                  v1034 = 0;
                                  v1035 = &v1920[8016 * v1917];
                                  v1989.i64[0] = (uint64_t)(v1035 + 8008);
                                  v1985.i64[0] = (uint64_t)(v1035 + 5864);
                                  v1984 = v1035 + 5848;
                                  v1987.i64[0] = (uint64_t)(v1035 + 7680);
                                  v1036 = v977 + 7680;
                                  do
                                  {
                                    v1056 = v977 + v1034;
                                    _X19 = &categoryc[v1034];
                                    __asm { PRFM            #0, [X19,#0x3EA0] }
                                    *(_QWORD *)v1056 = *(_QWORD *)&categoryc[v1034];
                                    *(_OWORD *)(v1056 + 8) = *(_OWORD *)&categoryc[v1034 + 8];
                                    *(_QWORD *)(v1056 + 24) = *(_QWORD *)&categoryc[v1034 + 24];
                                    *(_BYTE *)(v977 + v1034 + 32) = 0;
                                    *(_BYTE *)(v1056 + 64) = 0;
                                    __asm { PRFM            #0, [X19,#0x3EE0] }
                                    if (categoryc[v1034 + 64])
                                    {
                                      v1060 = *((_OWORD *)_X19 + 3);
                                      *(_OWORD *)(v977 + v1034 + 32) = *((_OWORD *)_X19 + 2);
                                      *(_OWORD *)(v977 + v1034 + 48) = v1060;
                                      *(_BYTE *)(v1056 + 64) = 1;
                                    }
                                    _X22 = _X19 + 23712;
                                    *(_OWORD *)(v1056 + 72) = *(_OWORD *)(_X19 + 72);
                                    memcpy((void *)(v1056 + 88), _X19 + 88, 0x708uLL);
                                    memcpy((void *)(v1056 + 1888), _X19 + 1888, 0x708uLL);
                                    v1062 = *(_OWORD *)(_X19 + 3688);
                                    v1063 = *(_OWORD *)(_X19 + 3704);
                                    v1064 = *(_OWORD *)(_X19 + 3736);
                                    *(_OWORD *)(v1056 + 3720) = *(_OWORD *)(_X19 + 3720);
                                    *(_OWORD *)(v1056 + 3736) = v1064;
                                    *(_OWORD *)(v1056 + 3688) = v1062;
                                    *(_OWORD *)(v1056 + 3704) = v1063;
                                    v1065 = *(_OWORD *)(_X19 + 3752);
                                    v1066 = *(_OWORD *)(_X19 + 3768);
                                    v1067 = *(_OWORD *)(_X19 + 3784);
                                    *(_QWORD *)(v1056 + 3800) = *((_QWORD *)_X19 + 475);
                                    *(_OWORD *)(v1056 + 3768) = v1066;
                                    *(_OWORD *)(v1056 + 3784) = v1067;
                                    *(_OWORD *)(v1056 + 3752) = v1065;
                                    v1068 = *((_QWORD *)_X19 + 490);
                                    v1069 = *((_OWORD *)_X19 + 242);
                                    v1070 = *((_OWORD *)_X19 + 243);
                                    *(_OWORD *)(v1056 + 3904) = *((_OWORD *)_X19 + 244);
                                    *(_OWORD *)(v1056 + 3888) = v1070;
                                    *(_OWORD *)(v1056 + 3872) = v1069;
                                    *(_QWORD *)(v1056 + 3920) = v1068;
                                    v1071 = *((_OWORD *)_X19 + 238);
                                    v1072 = *((_OWORD *)_X19 + 239);
                                    v1073 = *((_OWORD *)_X19 + 240);
                                    *(_OWORD *)(v1056 + 3856) = *((_OWORD *)_X19 + 241);
                                    *(_OWORD *)(v1056 + 3840) = v1073;
                                    *(_OWORD *)(v1056 + 3824) = v1072;
                                    *(_OWORD *)(v1056 + 3808) = v1071;
                                    *(_BYTE *)(v1056 + 3928) = 0;
                                    *(_BYTE *)(v1036 + v1034) = 0;
                                    __asm { PRFM            #0, [X22] }
                                    if (*(_BYTE *)(v1987.i64[0] + v1034))
                                    {
                                      _X22 = _X19 + 21880;
                                      memcpy((void *)(v1056 + 3928), &categoryc[v1034 + 3928], 0x708uLL);
                                      v1076 = v977 + v1034;
                                      v1077 = *(_OWORD *)&categoryc[v1034 + 5744];
                                      v1078 = *(_OWORD *)&categoryc[v1034 + 5760];
                                      v1079 = *(_OWORD *)&categoryc[v1034 + 5776];
                                      *(_OWORD *)(v1076 + 5728) = *(_OWORD *)&categoryc[v1034 + 5728];
                                      *(_OWORD *)(v1076 + 5776) = v1079;
                                      *(_OWORD *)(v1076 + 5760) = v1078;
                                      *(_OWORD *)(v1076 + 5744) = v1077;
                                      v1080 = *(_OWORD *)&categoryc[v1034 + 5808];
                                      v1081 = *(_OWORD *)&categoryc[v1034 + 5824];
                                      v1082 = *(_QWORD *)&categoryc[v1034 + 5840];
                                      *(_OWORD *)(v1076 + 5792) = *(_OWORD *)&categoryc[v1034 + 5792];
                                      *(_QWORD *)(v1076 + 5840) = v1082;
                                      *(_OWORD *)(v1076 + 5824) = v1081;
                                      *(_OWORD *)(v1076 + 5808) = v1080;
                                      __asm { PRFM            #0, [X22] }
                                      *(_BYTE *)(v977 + 5848 + v1034) = v1984[v1034 / 8];
                                      *(_BYTE *)(v977 + 5864 + v1034) = *(_BYTE *)(v1985.i64[0] + v1034);
                                      *(_QWORD *)(v1076 + 5856) = &off_24CA00398;
                                      memcpy((void *)(v977 + v1034 + 5872), &categoryc[v1034 + 5872], 0x708uLL);
                                      *(_QWORD *)(v1076 + 7672) = *(_QWORD *)&categoryc[v1034 + 7672];
                                      *(_BYTE *)(v1036 + v1034) = 1;
                                    }
                                    _X8 = _X19 + 24024;
                                    v1038 = v977 + v1034;
                                    *(_WORD *)(v1038 + 7688) = *(_WORD *)&categoryc[v1034 + 7688];
                                    v1039 = *(_OWORD *)&categoryc[v1034 + 7696];
                                    v1040 = *(_OWORD *)&categoryc[v1034 + 7712];
                                    *(_QWORD *)(v1038 + 7728) = *(_QWORD *)&categoryc[v1034 + 7728];
                                    *(_OWORD *)(v1038 + 7712) = v1040;
                                    *(_OWORD *)(v1038 + 7696) = v1039;
                                    v1041 = (_OWORD *)(v977 + v1034 + 7736);
                                    v1043 = *(_OWORD *)&categoryc[v1034 + 7816];
                                    v1042 = *(_OWORD *)&categoryc[v1034 + 7832];
                                    v1044 = *(_OWORD *)&categoryc[v1034 + 7800];
                                    *(_QWORD *)(v1038 + 7848) = *(_QWORD *)&categoryc[v1034 + 7848];
                                    v1041[5] = v1043;
                                    v1041[6] = v1042;
                                    v1041[4] = v1044;
                                    v1045 = *(_OWORD *)&categoryc[v1034 + 7736];
                                    v1046 = *(_OWORD *)&categoryc[v1034 + 7752];
                                    v1047 = *(_OWORD *)&categoryc[v1034 + 7784];
                                    v1041[2] = *(_OWORD *)&categoryc[v1034 + 7768];
                                    v1041[3] = v1047;
                                    *v1041 = v1045;
                                    v1041[1] = v1046;
                                    v1048 = *(_OWORD *)&categoryc[v1034 + 7936];
                                    v1049 = *(_OWORD *)&categoryc[v1034 + 7952];
                                    v1050 = *(_QWORD *)&categoryc[v1034 + 7968];
                                    *(_OWORD *)(v1038 + 7920) = *(_OWORD *)&categoryc[v1034 + 7920];
                                    *(_QWORD *)(v1038 + 7968) = v1050;
                                    *(_OWORD *)(v1038 + 7952) = v1049;
                                    *(_OWORD *)(v1038 + 7936) = v1048;
                                    v1051 = *(_OWORD *)&categoryc[v1034 + 7856];
                                    v1052 = *(_OWORD *)&categoryc[v1034 + 7872];
                                    v1053 = *(_OWORD *)&categoryc[v1034 + 7888];
                                    *(_OWORD *)(v1038 + 7904) = *(_OWORD *)&categoryc[v1034 + 7904];
                                    *(_OWORD *)(v1038 + 7888) = v1053;
                                    *(_OWORD *)(v1038 + 7872) = v1052;
                                    *(_OWORD *)(v1038 + 7856) = v1051;
                                    v1054 = *(_QWORD *)&categoryc[v1034 + 7976];
                                    *(_BYTE *)(v977 + v1034 + 7984) = categoryc[v1034 + 7984];
                                    *(_QWORD *)(v1038 + 7976) = v1054;
                                    __asm { PRFM            #0, [X8] }
                                    *(_QWORD *)(v1038 + 7992) = *(_QWORD *)&categoryc[v1034 + 7992];
                                    *(_QWORD *)(v1038 + 8000) = *(_QWORD *)&categoryc[v1034 + 8000];
                                    *(_OWORD *)&categoryc[v1034 + 7992] = 0u;
                                    *(_BYTE *)(v977 + 8008 + v1034) = *(_BYTE *)(v1989.i64[0] + v1034);
                                    v1034 += 8016;
                                  }
                                  while (&categoryc[v1034] != __sze);
                                  categoryc = *(char **)(v2067 + 5664);
                                  v977 += v1034;
                                }
                                v1084 = *(char **)(v2067 + 5656);
                                *(_QWORD *)(v2067 + 5656) = v2013;
                                *(_QWORD *)(v2067 + 5664) = v977;
                                v1085 = *(_QWORD *)(v2067 + 5672);
                                *(_QWORD *)(v2067 + 5672) = *(_QWORD *)&object[24];
                                *(_QWORD *)&object[24] = v1085;
                                *(_QWORD *)&object[8] = v1084;
                                *(_QWORD *)object = v1084;
                                if (categoryc != v1084)
                                {
                                  v1086 = categoryc;
                                  do
                                  {
                                    *(_QWORD *)&object[16] = v1086 - 8016;
                                    v1087 = (std::__shared_weak_count *)*((_QWORD *)v1086 - 2);
                                    if (v1087)
                                    {
                                      v1088 = (unint64_t *)&v1087->__shared_owners_;
                                      do
                                        v1089 = __ldaxr(v1088);
                                      while (__stlxr(v1089 - 1, v1088));
                                      if (!v1089)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v1087->__on_zero_shared)(v1087);
                                        std::__shared_weak_count::__release_weak(v1087);
                                      }
                                    }
                                    v1086 = *(char **)&object[16];
                                  }
                                  while (*(char **)&object[16] != v1084);
                                  categoryc = *(char **)object;
                                }
                                if (categoryc)
                                  operator delete(categoryc);
                              }
                              else
                              {
                                v845 = *(_QWORD *)(v2067 + 5664);
                                v1974 = (char *)v845;
                                if (&v842[8016 * v1917] == v841)
                                {
                                  *(_QWORD *)v841 = __szc;
                                  v902 = &v842[8016 * v1917];
                                  *(_OWORD *)(v902 + 8) = *(_OWORD *)&v2182[8];
                                  v903 = *(_QWORD *)&v2182[24];
                                  v902[32] = 0;
                                  v904 = v902 + 32;
                                  *(v904 - 1) = v903;
                                  *((_BYTE *)v904 + 32) = 0;
                                  if (v2182[64])
                                  {
                                    v905 = *(_OWORD *)&v2182[48];
                                    *(_OWORD *)v904 = *(_OWORD *)&v2182[32];
                                    *((_OWORD *)v904 + 1) = v905;
                                    *((_BYTE *)v904 + 32) = 1;
                                  }
                                  v906 = &v842[8016 * v1917];
                                  *(_OWORD *)(v906 + 72) = *(_OWORD *)&v2182[72];
                                  memcpy(v906 + 88, &v2182[88], 0x708uLL);
                                  memcpy(v906 + 1888, &v2182[1888], 0x708uLL);
                                  v907 = *(_OWORD *)&v2182[3688];
                                  v908 = *(_OWORD *)&v2182[3704];
                                  v909 = *(_OWORD *)&v2182[3720];
                                  *(_OWORD *)(v906 + 3736) = *(_OWORD *)&v2182[3736];
                                  *(_OWORD *)(v906 + 3720) = v909;
                                  *(_OWORD *)(v906 + 3704) = v908;
                                  *(_OWORD *)(v906 + 3688) = v907;
                                  v910 = *(_OWORD *)&v2182[3752];
                                  v911 = *(_OWORD *)&v2182[3768];
                                  v912 = *(_OWORD *)&v2182[3784];
                                  *((_QWORD *)v906 + 475) = *(_QWORD *)&v2182[3800];
                                  *(_OWORD *)(v906 + 3784) = v912;
                                  *(_OWORD *)(v906 + 3768) = v911;
                                  *(_OWORD *)(v906 + 3752) = v910;
                                  v913 = *(_QWORD *)&v2182[3920];
                                  v914 = *(_OWORD *)&v2182[3872];
                                  v915 = *(_OWORD *)&v2182[3888];
                                  *((_OWORD *)v906 + 244) = *(_OWORD *)&v2182[3904];
                                  *((_OWORD *)v906 + 243) = v915;
                                  *((_OWORD *)v906 + 242) = v914;
                                  *((_QWORD *)v906 + 490) = v913;
                                  v916 = *(_OWORD *)&v2182[3808];
                                  v917 = *(_OWORD *)&v2182[3824];
                                  v918 = *(_OWORD *)&v2182[3840];
                                  *((_OWORD *)v906 + 241) = *(_OWORD *)&v2182[3856];
                                  *((_OWORD *)v906 + 240) = v918;
                                  *((_OWORD *)v906 + 239) = v917;
                                  *((_OWORD *)v906 + 238) = v916;
                                  v906[3928] = 0;
                                  v906[7680] = 0;
                                  if (v2196)
                                  {
                                    memcpy(v906 + 3928, &v2182[3928], 0x708uLL);
                                    v919 = &v1920[8016 * v1917];
                                    v920 = v2183;
                                    v921 = v2184;
                                    v922 = v2185;
                                    *((_OWORD *)v919 + 361) = v2186;
                                    *((_OWORD *)v919 + 360) = v922;
                                    *((_OWORD *)v919 + 359) = v921;
                                    *((_OWORD *)v919 + 358) = v920;
                                    v923 = v2187;
                                    v924 = v2188;
                                    v925 = v2189;
                                    *((_QWORD *)v919 + 730) = v2190;
                                    *((_OWORD *)v919 + 364) = v925;
                                    *((_OWORD *)v919 + 363) = v924;
                                    *((_OWORD *)v919 + 362) = v923;
                                    v919[5848] = v2191;
                                    v919[5864] = v2193;
                                    *((_QWORD *)v919 + 732) = &off_24CA00398;
                                    memcpy(v919 + 5872, v2194, 0x708uLL);
                                    *((_QWORD *)v919 + 959) = v2195;
                                    v906[7680] = 1;
                                  }
                                  v926 = &v1920[8016 * v1917];
                                  *((_WORD *)v926 + 3844) = v2197;
                                  v927 = v2198;
                                  v928 = v2199;
                                  *((_QWORD *)v926 + 966) = v2200;
                                  *((_OWORD *)v926 + 482) = v928;
                                  *((_OWORD *)v926 + 481) = v927;
                                  v930 = v2206;
                                  v929 = v2207;
                                  v931 = v2208;
                                  *(_OWORD *)(v926 + 7800) = v2205;
                                  *((_QWORD *)v926 + 981) = v931;
                                  *(_OWORD *)(v926 + 7832) = v929;
                                  *(_OWORD *)(v926 + 7816) = v930;
                                  v932 = v2201;
                                  v933 = v2202;
                                  v934 = v2203;
                                  *(_OWORD *)(v926 + 7784) = v2204;
                                  *(_OWORD *)(v926 + 7768) = v934;
                                  *(_OWORD *)(v926 + 7752) = v933;
                                  *(_OWORD *)(v926 + 7736) = v932;
                                  v936 = v2214;
                                  v935 = v2215;
                                  v937 = v2216;
                                  *((_OWORD *)v926 + 495) = v2213;
                                  *((_QWORD *)v926 + 996) = v937;
                                  *((_OWORD *)v926 + 497) = v935;
                                  *((_OWORD *)v926 + 496) = v936;
                                  v938 = v2209;
                                  v939 = v2210;
                                  v940 = v2211;
                                  *((_OWORD *)v926 + 494) = v2212;
                                  *((_OWORD *)v926 + 493) = v940;
                                  *((_OWORD *)v926 + 492) = v939;
                                  *((_OWORD *)v926 + 491) = v938;
                                  v941 = v2217;
                                  v926[7984] = v2218;
                                  *((_QWORD *)v926 + 997) = v941;
                                  *(_OWORD *)(v926 + 7992) = v2219;
                                  v2219 = 0uLL;
                                  v926[8008] = v2220;
                                  *(_QWORD *)(v2067 + 5664) = v845 + 8016;
                                }
                                else
                                {
                                  v2255 = v2067 + 5672;
                                  *(_OWORD *)&object[8] = *(_OWORD *)v2149;
                                  *(_QWORD *)object = __szc;
                                  *(_QWORD *)&object[24] = *(_QWORD *)v2150;
                                  object[32] = 0;
                                  object[64] = 0;
                                  if (v2150[40])
                                  {
                                    *(_OWORD *)&object[32] = *(_OWORD *)&v2182[32];
                                    *(_OWORD *)&object[48] = *(_OWORD *)&v2182[48];
                                    object[64] = 1;
                                  }
                                  *(_OWORD *)&object[72] = *(_OWORD *)&v2150[48];
                                  memcpy(&object[88], &v2150[64], 0x708uLL);
                                  memcpy(v2222, v2151, 0x708uLL);
                                  *(_OWORD *)((char *)&v2222[116] + 8) = *(_OWORD *)((char *)&v2151[116] + 8);
                                  *(_OWORD *)((char *)&v2222[117] + 8) = *(_OWORD *)((char *)&v2151[117] + 8);
                                  *(_OWORD *)((char *)&v2222[118] + 8) = *(_OWORD *)((char *)&v2151[118] + 8);
                                  *((_QWORD *)&v2222[119] + 1) = *((_QWORD *)&v2151[119] + 1);
                                  *(_OWORD *)((char *)&v2222[112] + 8) = *(_OWORD *)((char *)&v2151[112] + 8);
                                  *(_OWORD *)((char *)&v2222[113] + 8) = *(_OWORD *)((char *)&v2151[113] + 8);
                                  *(_OWORD *)((char *)&v2222[114] + 8) = *(_OWORD *)((char *)&v2151[114] + 8);
                                  *(_OWORD *)((char *)&v2222[115] + 8) = *(_OWORD *)((char *)&v2151[115] + 8);
                                  v2222[124] = v2151[124];
                                  v2222[125] = v2151[125];
                                  v2222[126] = v2151[126];
                                  *(_QWORD *)&v2222[127] = *(_QWORD *)&v2151[127];
                                  v2222[120] = v2151[120];
                                  v2222[121] = v2151[121];
                                  v2222[122] = v2151[122];
                                  v2222[123] = v2151[123];
                                  BYTE8(v2222[127]) = 0;
                                  v2229 = 0;
                                  if (v2157)
                                  {
                                    memcpy((char *)&v2222[127] + 8, &v2182[3928], 0x708uLL);
                                    v2222[244] = v2187;
                                    v2222[245] = v2188;
                                    v2222[246] = v2189;
                                    v2223 = v2190;
                                    v2222[240] = v2183;
                                    v2222[241] = v2184;
                                    v2222[242] = v2185;
                                    v2222[243] = v2186;
                                    v2224 = v1989.i8[0];
                                    v2226 = v1987.i8[0];
                                    v2225 = &off_24CA00398;
                                    memcpy(v2227, v2194, sizeof(v2227));
                                    v2228 = v1985.i64[0];
                                    v2229 = 1;
                                  }
                                  v2230 = v2158;
                                  v2231 = v2159;
                                  v2232 = v2160;
                                  v2233 = v2161;
                                  v2238 = v2166;
                                  v2239 = v2167;
                                  v2240 = v2168;
                                  v2241 = v2169;
                                  v2234 = v2162;
                                  v2235 = v2163;
                                  v2236 = v2164;
                                  v2237 = v2165;
                                  v2244 = v2172;
                                  v2245 = v2173;
                                  v2242 = v2170;
                                  v2243 = v2171;
                                  v2249 = v2177;
                                  v2247 = v2175;
                                  v2248 = v2176;
                                  v2246 = v2174;
                                  v2251 = v2179;
                                  v2250 = v2178;
                                  v2252 = v839;
                                  v2253 = v840;
                                  v2219 = 0uLL;
                                  v846 = v845 - 8016;
                                  v2254 = v2181;
                                  if (v845 >= 0x1F50)
                                  {
                                    v847 = 0;
                                    v848 = &v1920[8016 * v1917
                                                + 16 * ((uint64_t)(v845 - (_QWORD)(categoryc + 8016)) >> 4)];
                                    v849 = v848 + 8008;
                                    v1987.i64[0] = (uint64_t)(v848 + 5864);
                                    v1985.i64[0] = (uint64_t)(v848 + 5848);
                                    v2012 = v848 + 7680;
                                    v1989.i64[0] = v845 + 8008;
                                    v850 = v845 + 7680;
                                    do
                                    {
                                      v870 = &v1974[v847];
                                      _X22 = v846 + v847;
                                      __asm { PRFM            #0, [X22,#0x3EA0] }
                                      *(_QWORD *)v870 = *(_QWORD *)(v846 + v847);
                                      *(_OWORD *)(v870 + 8) = *(_OWORD *)(v846 + v847 + 8);
                                      *((_QWORD *)v870 + 3) = *(_QWORD *)(v846 + v847 + 24);
                                      v1974[v847 + 32] = 0;
                                      v870[64] = 0;
                                      __asm { PRFM            #0, [X22,#0x3EE0] }
                                      if (*(_BYTE *)(v846 + v847 + 64))
                                      {
                                        v874 = *(_OWORD *)(_X22 + 48);
                                        *(_OWORD *)&v1974[v847 + 32] = *(_OWORD *)(_X22 + 32);
                                        *(_OWORD *)&v1974[v847 + 48] = v874;
                                        v870[64] = 1;
                                      }
                                      _X27 = _X22 + 23712;
                                      *(_OWORD *)(v870 + 72) = *(_OWORD *)(_X22 + 72);
                                      memcpy(v870 + 88, (const void *)(_X22 + 88), 0x708uLL);
                                      memcpy(v870 + 1888, (const void *)(_X22 + 1888), 0x708uLL);
                                      v876 = *(_OWORD *)(_X22 + 3688);
                                      v877 = *(_OWORD *)(_X22 + 3704);
                                      v878 = *(_OWORD *)(_X22 + 3736);
                                      *(_OWORD *)(v870 + 3720) = *(_OWORD *)(_X22 + 3720);
                                      *(_OWORD *)(v870 + 3736) = v878;
                                      *(_OWORD *)(v870 + 3688) = v876;
                                      *(_OWORD *)(v870 + 3704) = v877;
                                      v879 = *(_OWORD *)(_X22 + 3752);
                                      v880 = *(_OWORD *)(_X22 + 3768);
                                      v881 = *(_OWORD *)(_X22 + 3784);
                                      *((_QWORD *)v870 + 475) = *(_QWORD *)(_X22 + 3800);
                                      *(_OWORD *)(v870 + 3768) = v880;
                                      *(_OWORD *)(v870 + 3784) = v881;
                                      *(_OWORD *)(v870 + 3752) = v879;
                                      v882 = *(_QWORD *)(_X22 + 3920);
                                      v883 = *(_OWORD *)(_X22 + 3872);
                                      v884 = *(_OWORD *)(_X22 + 3888);
                                      *((_OWORD *)v870 + 244) = *(_OWORD *)(_X22 + 3904);
                                      *((_OWORD *)v870 + 243) = v884;
                                      *((_OWORD *)v870 + 242) = v883;
                                      *((_QWORD *)v870 + 490) = v882;
                                      v885 = *(_OWORD *)(_X22 + 3808);
                                      v886 = *(_OWORD *)(_X22 + 3824);
                                      v887 = *(_OWORD *)(_X22 + 3840);
                                      *((_OWORD *)v870 + 241) = *(_OWORD *)(_X22 + 3856);
                                      *((_OWORD *)v870 + 240) = v887;
                                      *((_OWORD *)v870 + 239) = v886;
                                      *((_OWORD *)v870 + 238) = v885;
                                      v870[3928] = 0;
                                      *(_BYTE *)(v850 + v847) = 0;
                                      __asm { PRFM            #0, [X27] }
                                      if (LOBYTE(v2012[v847 / 8]))
                                      {
                                        _X27 = _X22 + 21880;
                                        memcpy(v870 + 3928, (const void *)(v846 + v847 + 3928), 0x708uLL);
                                        v890 = &v1974[v847];
                                        v891 = *(_OWORD *)(v846 + v847 + 5744);
                                        v892 = *(_OWORD *)(v846 + v847 + 5760);
                                        v893 = *(_OWORD *)(v846 + v847 + 5776);
                                        *((_OWORD *)v890 + 358) = *(_OWORD *)(v846 + v847 + 5728);
                                        *((_OWORD *)v890 + 361) = v893;
                                        *((_OWORD *)v890 + 360) = v892;
                                        *((_OWORD *)v890 + 359) = v891;
                                        v894 = *(_OWORD *)(v846 + v847 + 5808);
                                        v895 = *(_OWORD *)(v846 + v847 + 5824);
                                        v896 = *(_QWORD *)(v846 + v847 + 5840);
                                        *((_OWORD *)v890 + 362) = *(_OWORD *)(v846 + v847 + 5792);
                                        *((_QWORD *)v890 + 730) = v896;
                                        *((_OWORD *)v890 + 364) = v895;
                                        *((_OWORD *)v890 + 363) = v894;
                                        __asm { PRFM            #0, [X27] }
                                        v1974[v847 + 5848] = *(_BYTE *)(v1985.i64[0] + v847);
                                        v1974[v847 + 5864] = *(_BYTE *)(v1987.i64[0] + v847);
                                        *((_QWORD *)v890 + 732) = &off_24CA00398;
                                        memcpy(&v1974[v847 + 5872], (const void *)(v846 + v847 + 5872), 0x708uLL);
                                        *((_QWORD *)v890 + 959) = *(_QWORD *)(v846 + v847 + 7672);
                                        *(_BYTE *)(v850 + v847) = 1;
                                      }
                                      _X8 = _X22 + 24024;
                                      v852 = &v1974[v847];
                                      *((_WORD *)v852 + 3844) = *(_WORD *)(v846 + v847 + 7688);
                                      v853 = *(_OWORD *)(v846 + v847 + 7696);
                                      v854 = *(_OWORD *)(v846 + v847 + 7712);
                                      *((_QWORD *)v852 + 966) = *(_QWORD *)(v846 + v847 + 7728);
                                      *((_OWORD *)v852 + 482) = v854;
                                      *((_OWORD *)v852 + 481) = v853;
                                      v855 = &v1974[v847 + 7736];
                                      v857 = *(_OWORD *)(v846 + v847 + 7816);
                                      v856 = *(_OWORD *)(v846 + v847 + 7832);
                                      v858 = *(_OWORD *)(v846 + v847 + 7800);
                                      *((_QWORD *)v852 + 981) = *(_QWORD *)(v846 + v847 + 7848);
                                      *((_OWORD *)v855 + 5) = v857;
                                      *((_OWORD *)v855 + 6) = v856;
                                      *((_OWORD *)v855 + 4) = v858;
                                      v859 = *(_OWORD *)(v846 + v847 + 7736);
                                      v860 = *(_OWORD *)(v846 + v847 + 7752);
                                      v861 = *(_OWORD *)(v846 + v847 + 7784);
                                      *((_OWORD *)v855 + 2) = *(_OWORD *)(v846 + v847 + 7768);
                                      *((_OWORD *)v855 + 3) = v861;
                                      *(_OWORD *)v855 = v859;
                                      *((_OWORD *)v855 + 1) = v860;
                                      v862 = *(_OWORD *)(v846 + v847 + 7936);
                                      v863 = *(_OWORD *)(v846 + v847 + 7952);
                                      v864 = *(_QWORD *)(v846 + v847 + 7968);
                                      *((_OWORD *)v852 + 495) = *(_OWORD *)(v846 + v847 + 7920);
                                      *((_QWORD *)v852 + 996) = v864;
                                      *((_OWORD *)v852 + 497) = v863;
                                      *((_OWORD *)v852 + 496) = v862;
                                      v865 = *(_OWORD *)(v846 + v847 + 7856);
                                      v866 = *(_OWORD *)(v846 + v847 + 7872);
                                      v867 = *(_OWORD *)(v846 + v847 + 7888);
                                      *((_OWORD *)v852 + 494) = *(_OWORD *)(v846 + v847 + 7904);
                                      *((_OWORD *)v852 + 493) = v867;
                                      *((_OWORD *)v852 + 492) = v866;
                                      *((_OWORD *)v852 + 491) = v865;
                                      v868 = *(_QWORD *)(v846 + v847 + 7976);
                                      v1974[v847 + 7984] = *(_BYTE *)(v846 + v847 + 7984);
                                      *((_QWORD *)v852 + 997) = v868;
                                      __asm { PRFM            #0, [X8] }
                                      *((_QWORD *)v852 + 999) = *(_QWORD *)(v846 + v847 + 7992);
                                      *((_QWORD *)v852 + 1000) = *(_QWORD *)(v846 + v847 + 8000);
                                      *(_OWORD *)(v846 + v847 + 7992) = 0u;
                                      *(_BYTE *)(v1989.i64[0] + v847) = v849[v847 / 8];
                                      v847 += 8016;
                                    }
                                    while (v846 + v847 < (unint64_t)v1974);
                                    v845 = (unint64_t)&v1974[v847];
                                  }
                                  *(_QWORD *)(v2067 + 5664) = v845;
                                  if (v1974 != categoryc + 8016)
                                  {
                                    v943 = 0;
                                    v944 = &v1920[8016 * v1917 + 16 * ((v1974 - (categoryc + 8016)) >> 4)];
                                    v945 = v944 - 8008;
                                    v946 = v944 - 8016;
                                    do
                                    {
                                      *(_QWORD *)&v1974[v943 - 8016] = *(_QWORD *)&v946[v943];
                                      sub_20F5B67C0((uint64_t)&v1974[v943 - 8008], (uint64_t)&v945[v943]);
                                      v1974[v943 - 8] = *(_BYTE *)(v846 + v943 - 8);
                                      v943 -= 8016;
                                    }
                                    while (-16 * ((v1974 - (categoryc + 8016)) >> 4) != v943);
                                  }
                                  *(_QWORD *)categoryc = __szc;
                                  v947 = &v1920[8016 * v1917];
                                  sub_20F5B67C0((uint64_t)(v947 + 8), (uint64_t)&object[8]);
                                  v947[8008] = v2254;
                                  v948 = v2253;
                                  if (v2253)
                                  {
                                    v949 = (unint64_t *)&v2253->__shared_owners_;
                                    do
                                      v950 = __ldaxr(v949);
                                    while (__stlxr(v950 - 1, v949));
                                    if (!v950)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v948->__on_zero_shared)(v948);
                                      std::__shared_weak_count::__release_weak(v948);
                                    }
                                  }
                                }
                              }
                              v840 = (std::__shared_weak_count *)*((_QWORD *)&v2219 + 1);
                            }
                            if (v840)
                            {
                              v1090 = (unint64_t *)&v840->__shared_owners_;
                              do
                                v1091 = __ldaxr(v1090);
                              while (__stlxr(v1091 - 1, v1090));
                              if (!v1091)
                              {
                                ((void (*)(std::__shared_weak_count *))v840->__on_zero_shared)(v840);
                                std::__shared_weak_count::__release_weak(v840);
                              }
                            }
                            v2018[2] = 0;
                            *v2018 = 0;
                            *(int64x2_t *)(v2067 + 5792) = vaddq_s64(*(int64x2_t *)(v2067 + 5792), (int64x2_t)xmmword_2103B4900);
                            v595 = 1;
                          }
                          else
                          {
                            v595 = 0;
                            --*(_DWORD *)(v613 + 8);
                            --*(_DWORD *)(v622 + 8);
                            v2159 = 0u;
                            --*(_DWORD *)(v628 + 8);
                            --*(_DWORD *)(v634 + 8);
                            v2160 = 0u;
                            --*(_DWORD *)(v838 + 8);
                            v2161 = 0;
                          }
                        }
                        v636 = (std::__shared_weak_count *)*((_QWORD *)&v2180 + 1);
                        if (*((_QWORD *)&v2180 + 1))
                        {
                          v637 = (unint64_t *)(*((_QWORD *)&v2180 + 1) + 8);
                          do
                            v638 = __ldaxr(v637);
                          while (__stlxr(v638 - 1, v637));
                          if (!v638)
                          {
                            ((void (*)(std::__shared_weak_count *, void *))v636->__on_zero_shared)(v636, v580);
                            std::__shared_weak_count::__release_weak(v636);
                          }
                        }
                        v585 = (std::__shared_weak_count *)*((_QWORD *)&v2148[0] + 1);
                        goto LABEL_738;
                      }
                    }
                    v479 = 0;
                  }
                  else
                  {
                    v479 = 0;
                    v478 = 0;
                  }
LABEL_614:
                  v482 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 594, (uint64_t)"curr_state && prev_state", 24, (uint64_t)"[VIOBABase]: Cannot find the state IDs.", 39, (void (*)(void **))sub_21023DDB0);
                  v459 = __szc;
                  if (v482)
                    abort();
                  goto LABEL_615;
                }
              }
              v255 = v256;
              goto LABEL_488;
            }
          }
        }
LABEL_305:
        sub_20F4AD5FC(v2106);
        if (**(int **)(*(_QWORD *)&v2106[0] + 56) > 5)
          goto LABEL_392;
        v263 = *(unsigned __int8 *)(*(_QWORD *)&v2106[0] + 72);
        v264 = *(_BYTE *)(*(_QWORD *)&v2106[0] + 72) != 0;
        v265 = sub_20E8C31DC(*(uint64_t *)&v2106[0], "OSLogSurrogateAppender", 1, 0);
        if (((v265 == 0) & ~v264) != 0)
          goto LABEL_392;
        __sza = v263;
        *(_QWORD *)v2182 = v2106;
        *(std::chrono::steady_clock::time_point *)&v2182[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v2182[16] = std::chrono::system_clock::now();
        *(_DWORD *)&v2182[24] = 5;
        *(_QWORD *)&v2182[32] = "unknown file";
        *(_DWORD *)&v2182[40] = 556;
        *(_QWORD *)&v2182[48] = "unknown function";
        *(_QWORD *)&v2182[56] = 0;
        *(_QWORD *)&v2182[64] = 0;
        v266 = **(_QWORD **)v2182;
        v267 = (const char *)(**(_QWORD **)v2182 + 16);
        v2009 = v267;
        if (*(char *)(**(_QWORD **)v2182 + 39) < 0)
        {
          v267 = *(const char **)(v266 + 16);
          v268 = *(_QWORD *)(v266 + 24);
          v270 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v270 & 1) != 0)
            goto LABEL_311;
        }
        else
        {
          v268 = *(unsigned __int8 *)(**(_QWORD **)v2182 + 39);
          v269 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v269 & 1) != 0)
            goto LABEL_311;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v2149);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2149);
          if (v2150[8] && (v2150[7] & 0x80000000) != 0)
            operator delete(v2149[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_311:
        if (byte_254A4A4F8[23] >= 0)
          v271 = byte_254A4A4F8;
        else
          v271 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v272 = byte_254A4A4F8[23];
        else
          v272 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)object = os_log_create(v271, v267);
        if (v272 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v272 >= 0x17)
        {
          v274 = (v272 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v272 | 7) != 0x17)
            v274 = v272 | 7;
          v275 = v274 + 1;
          v273 = operator new(v274 + 1);
          *(_QWORD *)&object[24] = v275 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v273;
          *(_QWORD *)&object[16] = v272;
LABEL_324:
          memmove(v273, v271, v272);
          goto LABEL_325;
        }
        object[31] = v272;
        v273 = &object[8];
        if (v272)
          goto LABEL_324;
LABEL_325:
        v273[v272] = 0;
        object[32] = 1;
        if (v268 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v268 >= 0x17)
        {
          v278 = (v268 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v268 | 7) != 0x17)
            v278 = v268 | 7;
          v279 = v278 + 1;
          v276 = operator new(v278 + 1);
          *(_QWORD *)&object[56] = v279 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v276;
          *(_QWORD *)&object[48] = v268;
        }
        else
        {
          object[63] = v268;
          v276 = &object[40];
          if (!v268)
          {
            object[40] = 0;
            object[64] = 1;
            v277 = *(NSObject **)object;
            if ((object[63] & 0x80000000) == 0)
              goto LABEL_329;
            goto LABEL_335;
          }
        }
        memmove(v276, v267, v268);
        v276[v268] = 0;
        object[64] = 1;
        v277 = *(NSObject **)object;
        if ((object[63] & 0x80000000) == 0)
        {
LABEL_329:
          if (object[32])
            goto LABEL_336;
          goto LABEL_338;
        }
LABEL_335:
        operator delete(*(void **)&object[40]);
        if (object[32])
        {
LABEL_336:
          if ((object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
        }
LABEL_338:
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v265 && *(_QWORD *)(v265 + 24))
        {
          v280 = _os_log_pack_size();
          v281 = (std::__shared_weak_count_vtbl *)operator new(v280, (std::align_val_t)8uLL);
          v282 = (std::__shared_weak_count *)operator new();
          v283 = v282;
          v282->__shared_owners_ = 0;
          v284 = (unint64_t *)&v282->__shared_owners_;
          v282->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v282->__shared_weak_owners_ = 0;
          v282[1].__vftable = v281;
          *(_QWORD *)object = v281;
          *(_QWORD *)&object[8] = v281;
          *(_QWORD *)&object[16] = v282;
          do
            v285 = __ldxr(v284);
          while (__stxr(v285 + 1, v284));
          memset(&object[24], 0, 24);
          do
            v286 = __ldaxr(v284);
          while (__stlxr(v286 - 1, v284));
          if (!v286)
          {
            ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
            std::__shared_weak_count::__release_weak(v283);
          }
          v287 = *(_QWORD *)object;
          v288 = (_DWORD *)_os_log_pack_fill();
          *v288 = 67109120;
          v288[1] = v241;
          v289 = (char *)operator new();
          v290 = *(unsigned __int8 *)(v266 + 39);
          v291 = v2009;
          if ((v290 & 0x80u) != 0)
          {
            v291 = *(const char **)(v266 + 16);
            v290 = *(_QWORD *)(v266 + 24);
          }
          *(_QWORD *)v289 = v287;
          *(_OWORD *)(v289 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v289 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *((_QWORD *)v289 + 5) = v291;
          *((_QWORD *)v289 + 6) = v290;
          v289[56] = 16;
          *(_QWORD *)&v2148[0] = 0;
          v2149[0] = v289;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v265 + 24) + 40))(*(_QWORD *)(v265 + 24), v2149);
          v292 = v2149[0];
          v2149[0] = 0;
          if (v292)
          {
            v293 = (std::__shared_weak_count *)*((_QWORD *)v292 + 4);
            if (v293)
            {
              v294 = (unint64_t *)&v293->__shared_owners_;
              do
                v295 = __ldaxr(v294);
              while (__stlxr(v295 - 1, v294));
              if (!v295)
              {
                ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
                std::__shared_weak_count::__release_weak(v293);
              }
            }
            v296 = (std::__shared_weak_count *)*((_QWORD *)v292 + 2);
            if (v296)
            {
              v297 = (unint64_t *)&v296->__shared_owners_;
              do
                v298 = __ldaxr(v297);
              while (__stlxr(v298 - 1, v297));
              if (!v298)
              {
                ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
                std::__shared_weak_count::__release_weak(v296);
              }
            }
            MEMORY[0x212BC6398](v292, 0x10F0C40B62ED6C6);
            v299 = *(_QWORD *)&v2148[0];
            *(_QWORD *)&v2148[0] = 0;
            if (v299)
            {
              v300 = *(std::__shared_weak_count **)(v299 + 32);
              if (v300)
              {
                v301 = (unint64_t *)&v300->__shared_owners_;
                do
                  v302 = __ldaxr(v301);
                while (__stlxr(v302 - 1, v301));
                if (!v302)
                {
                  ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
                  std::__shared_weak_count::__release_weak(v300);
                }
              }
              v303 = *(std::__shared_weak_count **)(v299 + 16);
              if (v303)
              {
                v304 = (unint64_t *)&v303->__shared_owners_;
                do
                  v305 = __ldaxr(v304);
                while (__stlxr(v305 - 1, v304));
                if (!v305)
                {
                  ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
                  std::__shared_weak_count::__release_weak(v303);
                }
              }
              MEMORY[0x212BC6398](v299, 0x10F0C40B62ED6C6);
            }
          }
          v306 = *(std::__shared_weak_count **)&object[32];
          v307 = __sza;
          if (*(_QWORD *)&object[32])
          {
            v308 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v309 = __ldaxr(v308);
            while (__stlxr(v309 - 1, v308));
            if (!v309)
            {
              ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
              std::__shared_weak_count::__release_weak(v306);
            }
          }
          v310 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v311 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v312 = __ldaxr(v311);
            while (__stlxr(v312 - 1, v311));
            if (!v312)
            {
              ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
              std::__shared_weak_count::__release_weak(v310);
            }
          }
        }
        else
        {
          os_log_type_enabled(v277, OS_LOG_TYPE_ERROR);
          *(_DWORD *)object = 67109120;
          *(_DWORD *)&object[4] = v241;
          v313 = (void *)_os_log_send_and_compose_impl();
          v307 = __sza;
          if (v313)
            free(v313);
        }
        if (v307)
        {
          sub_20E8C003C((uint64_t)v2182, "The requested IMU State (%d) does not exist in the StateSet", v241);
          sub_20E863570((uint64_t)v2182);
        }
        sub_20E863570((uint64_t)v2182);
        v314 = *(std::__shared_weak_count **)&v2182[64];
        if (*(_QWORD *)&v2182[64])
        {
          v315 = (unint64_t *)(*(_QWORD *)&v2182[64] + 8);
          do
            v316 = __ldaxr(v315);
          while (__stlxr(v316 - 1, v315));
          if (!v316)
          {
            ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
            std::__shared_weak_count::__release_weak(v314);
          }
        }
LABEL_392:
        sub_20F4AD5FC(v2106);
        if (**(int **)(*(_QWORD *)&v2106[0] + 56) <= 5)
        {
          v317 = *(unsigned __int8 *)(*(_QWORD *)&v2106[0] + 72);
          v318 = *(_BYTE *)(*(_QWORD *)&v2106[0] + 72) != 0;
          v319 = sub_20E8C31DC(*(uint64_t *)&v2106[0], "OSLogSurrogateAppender", 1, 0);
          if (((v319 == 0) & ~v318) == 0)
          {
            *(_QWORD *)v2182 = v2106;
            *(std::chrono::steady_clock::time_point *)&v2182[8] = std::chrono::steady_clock::now();
            *(std::chrono::system_clock::time_point *)&v2182[16] = std::chrono::system_clock::now();
            *(_DWORD *)&v2182[24] = 5;
            *(_QWORD *)&v2182[32] = "unknown file";
            *(_DWORD *)&v2182[40] = 244;
            *(_QWORD *)&v2182[48] = "unknown function";
            *(_QWORD *)&v2182[56] = 0;
            *(_QWORD *)&v2182[64] = 0;
            v320 = **(_QWORD **)v2182;
            v321 = (const char *)(**(_QWORD **)v2182 + 16);
            __szb = v321;
            if (*(char *)(**(_QWORD **)v2182 + 39) < 0)
            {
              v321 = *(const char **)(v320 + 16);
              v322 = *(_QWORD *)(v320 + 24);
              v324 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v324 & 1) == 0)
              {
LABEL_1080:
                if (__cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)v2149);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2149);
                  if (v2150[8] && (v2150[7] & 0x80000000) != 0)
                    operator delete(v2149[0]);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                }
              }
            }
            else
            {
              v322 = *(unsigned __int8 *)(**(_QWORD **)v2182 + 39);
              v323 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v323 & 1) == 0)
                goto LABEL_1080;
            }
            if (byte_254A4A4F8[23] >= 0)
              v325 = byte_254A4A4F8;
            else
              v325 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v326 = byte_254A4A4F8[23];
            else
              v326 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)object = os_log_create(v325, v321);
            if (v326 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v326 >= 0x17)
            {
              v328 = (v326 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v326 | 7) != 0x17)
                v328 = v326 | 7;
              v329 = v328 + 1;
              v327 = operator new(v328 + 1);
              *(_QWORD *)&object[24] = v329 | 0x8000000000000000;
              *(_QWORD *)&object[8] = v327;
              *(_QWORD *)&object[16] = v326;
            }
            else
            {
              object[31] = v326;
              v327 = &object[8];
              if (!v326)
              {
LABEL_412:
                v327[v326] = 0;
                object[32] = 1;
                if (v322 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v322 >= 0x17)
                {
                  v332 = (v322 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v322 | 7) != 0x17)
                    v332 = v322 | 7;
                  v333 = v332 + 1;
                  v330 = operator new(v332 + 1);
                  *(_QWORD *)&object[56] = v333 | 0x8000000000000000;
                  *(_QWORD *)&object[40] = v330;
                  *(_QWORD *)&object[48] = v322;
                }
                else
                {
                  object[63] = v322;
                  v330 = &object[40];
                  if (!v322)
                  {
                    object[40] = 0;
                    object[64] = 1;
                    v331 = *(NSObject **)object;
                    if ((object[63] & 0x80000000) == 0)
                      goto LABEL_416;
LABEL_422:
                    operator delete(*(void **)&object[40]);
                    if (object[32])
                      goto LABEL_423;
                    goto LABEL_425;
                  }
                }
                memmove(v330, v321, v322);
                v330[v322] = 0;
                object[64] = 1;
                v331 = *(NSObject **)object;
                if ((object[63] & 0x80000000) != 0)
                  goto LABEL_422;
LABEL_416:
                if (object[32])
                {
LABEL_423:
                  if ((object[31] & 0x80000000) != 0)
                    operator delete(*(void **)&object[8]);
                }
LABEL_425:
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                if (v319 && *(_QWORD *)(v319 + 24))
                {
                  v334 = _os_log_pack_size();
                  v335 = (std::__shared_weak_count_vtbl *)operator new(v334, (std::align_val_t)8uLL);
                  v336 = (std::__shared_weak_count *)operator new();
                  v337 = v336;
                  v336->__shared_owners_ = 0;
                  v338 = (unint64_t *)&v336->__shared_owners_;
                  v336->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v336->__shared_weak_owners_ = 0;
                  v336[1].__vftable = v335;
                  *(_QWORD *)object = v335;
                  *(_QWORD *)&object[8] = v335;
                  *(_QWORD *)&object[16] = v336;
                  do
                    v339 = __ldxr(v338);
                  while (__stxr(v339 + 1, v338));
                  memset(&object[24], 0, 24);
                  do
                    v340 = __ldaxr(v338);
                  while (__stlxr(v340 - 1, v338));
                  if (!v340)
                  {
                    ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
                    std::__shared_weak_count::__release_weak(v337);
                  }
                  v341 = *(_QWORD *)object;
                  *(_WORD *)_os_log_pack_fill() = 0;
                  v342 = (char *)operator new();
                  v343 = *(unsigned __int8 *)(v320 + 39);
                  v344 = __szb;
                  if ((v343 & 0x80u) != 0)
                  {
                    v344 = *(const char **)(v320 + 16);
                    v343 = *(_QWORD *)(v320 + 24);
                  }
                  *(_QWORD *)v342 = v341;
                  *(_OWORD *)(v342 + 8) = *(_OWORD *)&object[8];
                  *(_QWORD *)&object[8] = 0;
                  *(_QWORD *)&object[16] = 0;
                  *(_OWORD *)(v342 + 24) = *(_OWORD *)&object[24];
                  *(_QWORD *)&object[24] = 0;
                  *(_QWORD *)&object[32] = 0;
                  *((_QWORD *)v342 + 5) = v344;
                  *((_QWORD *)v342 + 6) = v343;
                  v342[56] = 16;
                  *(_QWORD *)&v2148[0] = 0;
                  v2149[0] = v342;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v319 + 24) + 40))(*(_QWORD *)(v319 + 24), v2149);
                  v345 = v2149[0];
                  v2149[0] = 0;
                  if (v345)
                  {
                    v346 = (std::__shared_weak_count *)*((_QWORD *)v345 + 4);
                    if (v346)
                    {
                      v347 = (unint64_t *)&v346->__shared_owners_;
                      do
                        v348 = __ldaxr(v347);
                      while (__stlxr(v348 - 1, v347));
                      if (!v348)
                      {
                        ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
                        std::__shared_weak_count::__release_weak(v346);
                      }
                    }
                    v349 = (std::__shared_weak_count *)*((_QWORD *)v345 + 2);
                    if (v349)
                    {
                      v350 = (unint64_t *)&v349->__shared_owners_;
                      do
                        v351 = __ldaxr(v350);
                      while (__stlxr(v351 - 1, v350));
                      if (!v351)
                      {
                        ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
                        std::__shared_weak_count::__release_weak(v349);
                      }
                    }
                    MEMORY[0x212BC6398](v345, 0x10F0C40B62ED6C6);
                    v352 = *(_QWORD *)&v2148[0];
                    *(_QWORD *)&v2148[0] = 0;
                    if (v352)
                    {
                      v353 = *(std::__shared_weak_count **)(v352 + 32);
                      if (v353)
                      {
                        v354 = (unint64_t *)&v353->__shared_owners_;
                        do
                          v355 = __ldaxr(v354);
                        while (__stlxr(v355 - 1, v354));
                        if (!v355)
                        {
                          ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
                          std::__shared_weak_count::__release_weak(v353);
                        }
                      }
                      v356 = *(std::__shared_weak_count **)(v352 + 16);
                      if (v356)
                      {
                        v357 = (unint64_t *)&v356->__shared_owners_;
                        do
                          v358 = __ldaxr(v357);
                        while (__stlxr(v358 - 1, v357));
                        if (!v358)
                        {
                          ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
                          std::__shared_weak_count::__release_weak(v356);
                        }
                      }
                      MEMORY[0x212BC6398](v352, 0x10F0C40B62ED6C6);
                    }
                  }
                  v359 = *(std::__shared_weak_count **)&object[32];
                  if (*(_QWORD *)&object[32])
                  {
                    v360 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                    do
                      v361 = __ldaxr(v360);
                    while (__stlxr(v361 - 1, v360));
                    if (!v361)
                    {
                      ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
                      std::__shared_weak_count::__release_weak(v359);
                    }
                  }
                  v362 = *(std::__shared_weak_count **)&object[16];
                  if (*(_QWORD *)&object[16])
                  {
                    v363 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                    do
                      v364 = __ldaxr(v363);
                    while (__stlxr(v364 - 1, v363));
                    if (!v364)
                    {
                      ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
                      std::__shared_weak_count::__release_weak(v362);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v331, OS_LOG_TYPE_ERROR);
                  *(_WORD *)object = 0;
                  v365 = (void *)_os_log_send_and_compose_impl();
                  if (v365)
                    free(v365);
                }
                if (v317)
                {
                  sub_20E8C003C((uint64_t)v2182, "Unable to add IMU State");
                  sub_20E863570((uint64_t)v2182);
                }
                sub_20E863570((uint64_t)v2182);
                v366 = *(std::__shared_weak_count **)&v2182[64];
                if (*(_QWORD *)&v2182[64])
                {
                  v367 = (unint64_t *)(*(_QWORD *)&v2182[64] + 8);
                  do
                    v368 = __ldaxr(v367);
                  while (__stlxr(v368 - 1, v367));
                  if (!v368)
                  {
                    ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
                    std::__shared_weak_count::__release_weak(v366);
                  }
                }
                goto LABEL_479;
              }
            }
            memmove(v327, v325, v326);
            goto LABEL_412;
          }
        }
LABEL_479:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 188, (uint64_t)"did_add_state", 13, (uint64_t)"Failed to add keyframe. This should never happen.", 49, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
LABEL_480:
        v369 = (_QWORD *)v228[1];
        if (v369)
        {
          do
          {
            v370 = v369;
            v369 = (_QWORD *)*v369;
          }
          while (v369);
        }
        else
        {
          do
          {
            v370 = (_QWORD *)v228[2];
            _ZF = *v370 == (_QWORD)v228;
            v228 = v370;
          }
          while (!_ZF);
        }
        v228 = v370;
        if (v370 == v2057)
          goto LABEL_1125;
      }
    }
    goto LABEL_1125;
  }
  if (*(_BYTE *)(v69 + 1317))
  {
    v202 = *(double *)v201;
    v203 = *(_QWORD *)(v201 + 8);
    v204 = *(double *)(v201 + 16);
    v205 = *(_QWORD *)(v201 + 24);
    *(_OWORD *)v2149 = *(_OWORD *)(v201 + 32);
    *(_QWORD *)v2150 = *(_QWORD *)(v201 + 48);
    v206 = *(_QWORD *)(v201 + 56);
    v2148[0] = *(_OWORD *)(v201 + 64);
    *(_QWORD *)&v2148[1] = *(_QWORD *)(v201 + 80);
    v207 = *(_OWORD *)(v201 + 88);
    *(_QWORD *)&v2106[1] = *(_QWORD *)(v201 + 104);
    v2106[0] = v207;
    v208 = *(_OWORD *)(v201 + 112);
    *(_QWORD *)&v2107[1] = *(_QWORD *)(v201 + 128);
    v2107[0] = v208;
    v2098 = *(_QWORD *)(v201 + 152);
    v2096 = *(_OWORD *)(v201 + 136);
    v209 = *(_OWORD *)(v201 + 160);
    v210 = *(_OWORD *)(v201 + 176);
    v211 = *(_OWORD *)(v201 + 192);
    v212 = *(_OWORD *)(v201 + 208);
    *(_QWORD *)&object[64] = *(_QWORD *)(v201 + 224);
    *(_OWORD *)&object[48] = v212;
    *(_OWORD *)&object[32] = v211;
    *(_OWORD *)object = v209;
    *(_OWORD *)&object[16] = v210;
    v213 = *(_OWORD *)(v201 + 232);
    v4 = *(int64x2_t *)(v201 + 248);
    v214 = *(_OWORD *)(v201 + 264);
    v215 = *(_OWORD *)(v201 + 280);
    *(_QWORD *)&v2182[64] = *(_QWORD *)(v201 + 296);
    *(_OWORD *)&v2182[48] = v215;
    *(_OWORD *)&v2182[32] = v214;
    *(double *)(v69 + 176) = v202 * *(double *)(v69 + 1320);
    *(_OWORD *)v2182 = v213;
    *(int64x2_t *)&v2182[16] = v4;
    v216 = v204 * *(double *)(v69 + 1328);
    *(_QWORD *)(v69 + 184) = v203;
    *(double *)(v69 + 192) = v216;
    *(_QWORD *)(v69 + 200) = v205;
    *(_OWORD *)(v69 + 208) = *(_OWORD *)v2149;
    *(_QWORD *)(v69 + 224) = *(_QWORD *)v2150;
    *(_QWORD *)(v69 + 232) = v206;
    v217 = v2148[0];
    *(_QWORD *)(v69 + 256) = *(_QWORD *)&v2148[1];
    *(_OWORD *)(v69 + 240) = v217;
    v218 = v2106[0];
    *(_QWORD *)(v69 + 280) = *(_QWORD *)&v2106[1];
    *(_OWORD *)(v69 + 264) = v218;
    v219 = v2107[0];
    *(_QWORD *)(v69 + 304) = *(_QWORD *)&v2107[1];
    *(_OWORD *)(v69 + 288) = v219;
    *(_QWORD *)(v69 + 328) = v2098;
    *(_OWORD *)(v69 + 312) = v2096;
    v220 = *(_OWORD *)object;
    v221 = *(_OWORD *)&object[16];
    v222 = *(_OWORD *)&object[32];
    v223 = *(_OWORD *)&object[48];
    *(_QWORD *)(v69 + 400) = *(_QWORD *)&object[64];
    *(_OWORD *)(v69 + 368) = v222;
    *(_OWORD *)(v69 + 384) = v223;
    *(_OWORD *)(v69 + 336) = v220;
    *(_OWORD *)(v69 + 352) = v221;
    v224 = *(_OWORD *)&v2182[16];
    *(_OWORD *)(v69 + 408) = *(_OWORD *)v2182;
    v225 = *(_OWORD *)&v2182[32];
    v226 = *(_OWORD *)&v2182[48];
    *(_QWORD *)(v69 + 472) = *(_QWORD *)&v2182[64];
    *(_OWORD *)(v69 + 440) = v225;
    *(_OWORD *)(v69 + 456) = v226;
    *(_OWORD *)(v69 + 424) = v224;
    goto LABEL_261;
  }
  v1311 = *(_OWORD *)(v201 + 16);
  *(_OWORD *)(v69 + 176) = *(_OWORD *)v201;
  *(_OWORD *)(v69 + 192) = v1311;
  v1312 = *(_OWORD *)(v201 + 32);
  *(_QWORD *)(v69 + 224) = *(_QWORD *)(v201 + 48);
  *(_OWORD *)(v69 + 208) = v1312;
  *(_QWORD *)(v69 + 232) = *(_QWORD *)(v201 + 56);
  v1313 = *(_OWORD *)(v201 + 64);
  *(_QWORD *)(v69 + 256) = *(_QWORD *)(v201 + 80);
  *(_OWORD *)(v69 + 240) = v1313;
  v1314 = *(_OWORD *)(v201 + 88);
  *(_QWORD *)(v69 + 280) = *(_QWORD *)(v201 + 104);
  *(_OWORD *)(v69 + 264) = v1314;
  v1315 = *(_OWORD *)(v201 + 112);
  *(_QWORD *)(v69 + 304) = *(_QWORD *)(v201 + 128);
  *(_OWORD *)(v69 + 288) = v1315;
  v1316 = *(_OWORD *)(v201 + 136);
  *(_QWORD *)(v69 + 328) = *(_QWORD *)(v201 + 152);
  *(_OWORD *)(v69 + 312) = v1316;
  v1318 = *(_OWORD *)(v201 + 192);
  v1317 = *(_OWORD *)(v201 + 208);
  v1319 = *(_OWORD *)(v201 + 176);
  *(_QWORD *)(v69 + 400) = *(_QWORD *)(v201 + 224);
  *(_OWORD *)(v69 + 368) = v1318;
  *(_OWORD *)(v69 + 384) = v1317;
  *(_OWORD *)(v69 + 352) = v1319;
  *(_OWORD *)(v69 + 336) = *(_OWORD *)(v201 + 160);
  v1320 = *(_OWORD *)(v201 + 264);
  v1321 = *(_OWORD *)(v201 + 280);
  v1322 = *(_QWORD *)(v201 + 296);
  *(_OWORD *)(v69 + 424) = *(_OWORD *)(v201 + 248);
  *(_QWORD *)(v69 + 472) = v1322;
  *(_OWORD *)(v69 + 440) = v1320;
  *(_OWORD *)(v69 + 456) = v1321;
  *(_OWORD *)(v69 + 408) = *(_OWORD *)(v201 + 232);
  v1323 = *(_QWORD *)(v69 + 8);
  v228 = *(_QWORD **)(v1323 + 48);
  v2057 = (_QWORD *)(v1323 + 56);
  if (v228 != (_QWORD *)(v1323 + 56))
    goto LABEL_262;
LABEL_1125:
  if (*(_BYTE *)(v2067 + 2144))
  {
    v1324 = v2067;
    if (!*(_BYTE *)(v2067 + 2149))
    {
      v1331 = *(_QWORD **)(v2067 + 8);
      v1332 = v1331[8];
      v2065 = v1331[39] * v1332;
      if (v2065)
      {
        v1333 = 0;
        v2037 = v1331[8];
        v2031 = *(_QWORD **)(v2067 + 8);
        while (1)
        {
          v1334 = v1333 / v1332;
          v1335 = v1333 % v1332;
          v1336 = (_QWORD *)v1331[6];
          if (((v1333 % v1332) & 0x8000000000000000) != 0)
          {
            do
            {
              v1348 = (_QWORD *)*v1336;
              if (*v1336)
              {
                do
                {
                  v1337 = v1348;
                  v1348 = (_QWORD *)v1348[1];
                }
                while (v1348);
              }
              else
              {
                do
                {
                  v1337 = (_QWORD *)v1336[2];
                  _ZF = *v1337 == (_QWORD)v1336;
                  v1336 = v1337;
                }
                while (_ZF);
              }
              v1336 = v1337;
              _CF = __CFADD__(v1335++, 1);
            }
            while (!_CF);
          }
          else if (v1335)
          {
            do
            {
              v1347 = (_QWORD *)v1336[1];
              if (v1347)
              {
                do
                {
                  v1337 = v1347;
                  v1347 = (_QWORD *)*v1347;
                }
                while (v1347);
              }
              else
              {
                do
                {
                  v1337 = (_QWORD *)v1336[2];
                  _ZF = *v1337 == (_QWORD)v1336;
                  v1336 = v1337;
                }
                while (!_ZF);
              }
              v1336 = v1337;
              v1505 = v1335-- <= 1;
            }
            while (!v1505);
          }
          else
          {
            v1337 = (_QWORD *)v1331[6];
          }
          v1338 = *((_OWORD *)v1337 + 2);
          v1339 = (_QWORD *)v1331[37];
          if (v1334 < 0)
          {
            do
            {
              v1349 = (_QWORD *)*v1339;
              if (*v1339)
              {
                do
                {
                  v1340 = v1349;
                  v1349 = (_QWORD *)v1349[1];
                }
                while (v1349);
              }
              else
              {
                do
                {
                  v1340 = (_QWORD *)v1339[2];
                  _ZF = *v1340 == (_QWORD)v1339;
                  v1339 = v1340;
                }
                while (_ZF);
              }
              v1339 = v1340;
              _CF = __CFADD__(v1334++, 1);
            }
            while (!_CF);
          }
          else if (v1332 <= v1333)
          {
            do
            {
              v1350 = (_QWORD *)v1339[1];
              if (v1350)
              {
                do
                {
                  v1340 = v1350;
                  v1350 = (_QWORD *)*v1350;
                }
                while (v1350);
              }
              else
              {
                do
                {
                  v1340 = (_QWORD *)v1339[2];
                  _ZF = *v1340 == (_QWORD)v1339;
                  v1339 = v1340;
                }
                while (!_ZF);
              }
              v1339 = v1340;
              v1505 = v1334-- <= 1;
            }
            while (!v1505);
          }
          else
          {
            v1340 = (_QWORD *)v1331[37];
          }
          v1341 = *((_DWORD *)v1340 + 8);
          *(_OWORD *)v2149 = v1338;
          *(_DWORD *)v2150 = v1341;
          v1342 = *(_QWORD *)(v1324 + 16);
          if (v1342)
            break;
LABEL_1136:
          if (++v1333 == v2065)
            goto LABEL_1127;
        }
        v1343 = *(unsigned int *)(v1324 + 2156);
        *(_OWORD *)object = *(_OWORD *)v2149;
        *(_QWORD *)&object[16] = *(_QWORD *)v2150;
        memset(&object[24], 0, 24);
        sub_20F61F394(v1342, (uint64_t)object);
        v1344 = *(_QWORD *)(v1324 + 5712);
        if (v1344 == *(_QWORD *)(v1324 + 5704))
        {
          v2059 = 0;
          v1345 = *(_QWORD *)&object[24];
          v1346 = *(_QWORD *)&object[32];
          if (*(_QWORD *)&object[24] == *(_QWORD *)&object[32])
            goto LABEL_1248;
        }
        else
        {
          v2059 = *(_DWORD *)(v1344 - 208) + 1;
          v1345 = *(_QWORD *)&object[24];
          v1346 = *(_QWORD *)&object[32];
          if (*(_QWORD *)&object[24] == *(_QWORD *)&object[32])
          {
LABEL_1248:
            if (v1345)
            {
              v1413 = (void *)v1345;
              if (*(_QWORD *)&object[32] != v1345)
              {
                v1414 = *(_QWORD *)&object[32] - 40;
                v1415 = (void (***)(uint64_t))(*(_QWORD *)&object[32] - 40);
                do
                {
                  v1416 = *v1415;
                  v1415 -= 5;
                  (*v1416)(v1414);
                  _ZF = v1414 == v1345;
                  v1414 = (uint64_t)v1415;
                }
                while (!_ZF);
                v1413 = *(void **)&object[24];
              }
              *(_QWORD *)&object[32] = v1345;
              operator delete(v1413);
            }
            v1332 = v2037;
            goto LABEL_1136;
          }
        }
        if (!*(_QWORD *)(*(_QWORD *)(v1324 + 16) + 8))
          goto LABEL_1248;
        while (1)
        {
          v1351 = *(_QWORD *)(v1324 + 16);
          v1354 = *(uint64_t **)(v1351 + 8);
          v1352 = (uint64_t *)(v1351 + 8);
          v1353 = v1354;
          if (v1354)
          {
            v1355 = *(_DWORD *)(v1345 + 16);
            v1356 = *(_QWORD *)(v1345 + 8);
            v1357 = v1352;
            do
            {
              v1358 = v1353[4];
              if (v1358 < v1356)
              {
                ++v1353;
              }
              else if (v1358 == v1356)
              {
                if (*((_DWORD *)v1353 + 10) < v1355)
                  ++v1353;
                else
                  v1357 = v1353;
              }
              else
              {
                v1357 = v1353;
              }
              v1353 = (uint64_t *)*v1353;
            }
            while (v1353);
            if (v1357 != v1352)
            {
              v1359 = v1357[4];
              if (v1356 >= v1359 && (v1356 != v1359 || v1355 >= *((_DWORD *)v1357 + 10)))
                break;
            }
          }
LABEL_1176:
          v1345 += 40;
          if (v1345 == v1346)
          {
            v1345 = *(_QWORD *)&object[24];
            goto LABEL_1248;
          }
        }
        v1360 = v1357[6];
        v1361 = (std::__shared_weak_count *)v1357[7];
        if (!v1361)
          goto LABEL_1197;
        v1362 = (unint64_t *)&v1361->__shared_owners_;
        do
          v1363 = __ldxr(v1362);
        while (__stxr(v1363 + 1, v1362));
        do
          v1364 = __ldxr(v1362);
        while (__stxr(v1364 + 1, v1362));
        do
          v1365 = __ldaxr(v1362);
        while (__stlxr(v1365 - 1, v1362));
        if (!v1365)
        {
          ((void (*)(std::__shared_weak_count *))v1361->__on_zero_shared)(v1361);
          std::__shared_weak_count::__release_weak(v1361);
          if (!v1360)
            goto LABEL_1242;
        }
        else
        {
LABEL_1197:
          if (!v1360)
            goto LABEL_1242;
        }
        if (v1343 <= (uint64_t)(*(_QWORD *)(v1360 + 544) - *(_QWORD *)(v1360 + 536)) >> 5)
        {
          if (!*(_BYTE *)(v1360 + 528)
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 132, (uint64_t)"track->getStructure()", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v1366 = *(char **)(v1324 + 5512);
          v1367 = *(char **)(v1324 + 5520);
          if (v1367 != v1366)
          {
            v1368 = (v1367 - v1366) >> 4;
            do
            {
              v1369 = v1368 >> 1;
              v1370 = (unsigned int *)&v1366[16 * (v1368 >> 1)];
              v1372 = *v1370;
              v1371 = (char *)(v1370 + 4);
              v1368 += ~(v1368 >> 1);
              if (v1372 < v1355)
                v1366 = v1371;
              else
                v1368 = v1369;
            }
            while (v1368);
          }
          if (v1366 == v1367 || *(_DWORD *)v1366 != v1355)
          {
            v1373 = v1360 + 40;
            v1374 = *(unsigned __int8 *)(v1360 + 528);
            v1375 = *(_BYTE *)(v1360 + 528) ? v1360 + 40 : 0;
            *(_DWORD *)v2182 = v1355;
            v2182[4] = 1;
            *(_QWORD *)&v2182[8] = v1375;
            if (v1374)
            {
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1373 + 24))(v1360 + 40))
              {
                _Q1 = *(_OWORD *)(v1360 + 104);
                _D3 = *(_QWORD *)(v1360 + 112);
                __asm { FMLA            D2, D3, V1.D[1] }
                if (fabs(sqrt(_D2 + *(double *)(v1360 + 120) * *(double *)(v1360 + 120)) + -1.0) > 0.000001
                  && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
LABEL_1876:
                  abort();
                }
              }
              else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 44, (uint64_t)"initializeImpl()", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_1876;
              }
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1373 + 24))(v1360 + 40))
              {
                v1379 = *(uint64_t **)(v1360 + 136);
                v1380 = *v1379;
                v1381 = (double *)v1379[2];
                v1382 = v1379[4];
                v1383 = (double *)v1379[6];
                _D1 = *(double *)(v1360 + 56) - v1381[1];
                v1385 = *(double *)(v1360 + 64) - v1381[2];
                _Q3.f64[0] = *(float64_t *)(v1380 + 16);
                _Q7 = *(_OWORD *)(v1380 + 48);
                _Q3.f64[1] = *(float64_t *)(v1380 + 40);
                v1388 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v1380, *(int64x2_t *)(v1380 + 24)), *(double *)(v1360 + 48) - *v1381), (float64x2_t)vzip2q_s64(*(int64x2_t *)v1380, *(int64x2_t *)(v1380 + 24)), _D1), _Q3, v1385);
                __asm { FMLA            D2, D1, V7.D[1] }
                v1390 = _D2 + *(double *)(v1380 + 64) * v1385;
                v1391 = v1388.f64[0] - *v1383;
                _D2 = v1388.f64[1] - v1383[1];
                v1393 = v1390 - v1383[2];
                _Q3.f64[0] = *(float64_t *)(v1382 + 16);
                _Q4 = *(int64x2_t *)v1382;
                _Q6 = *(int64x2_t *)(v1382 + 24);
                _Q16 = *(_OWORD *)(v1382 + 48);
                __asm { FMLA            D19, D2, V4.D[1] }
                _Q3.f64[1] = *(float64_t *)(v1382 + 40);
                _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v1382, _Q6), v1391), (float64x2_t)vzip2q_s64(*(int64x2_t *)v1382, _Q6), _D2), _Q3, v1393);
                __asm
                {
                  FMLA            D3, D2, V16.D[1]
                  FMLA            D1, D2, V6.D[1]
                }
                _D1 = _D1 + v1393 * _Q3.f64[1];
                __asm { FMLA            D2, D1, V17.D[1] }
                *(_QWORD *)&v2182[16] = sqrt(_D2+ (_Q3.f64[0] + v1393 * *(double *)(v1382 + 64))* (_Q3.f64[0] + *(double *)(v1382 + 64) * v1393));
                _Q1 = *(_OWORD *)(v1360 + 104);
                _Q3.f64[0] = *(float64_t *)(v1360 + 112);
                __asm { FMLA            D2, D3, V1.D[1] }
                if (fabs(sqrt(_D2 + *(double *)(v1360 + 120) * *(double *)(v1360 + 120)) + -1.0) > 0.000001
                  && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_1876;
                }
                if (sub_20F61AC24((uint64_t)v2004, (unsigned int *)v2182))
                {
                  *(_BYTE *)(v2067 + 6588) = 0;
                  *(_DWORD *)(v2067 + 6584) = 0;
                }
              }
            }
          }
          v1404 = v1360 + 40;
          if (!*(_BYTE *)(v1360 + 528))
            v1404 = 0;
          v1405 = *(_DWORD *)(v1404 + 40);
          v1406 = (__int128 *)*(unsigned int *)(v1404 + 48);
          if ((_DWORD)v1406 == *(_DWORD *)v2150 && *(void **)(v1404 + 32) == v2149[0] && v1405 == LODWORD(v2149[1]))
            goto LABEL_1241;
          v1409 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)(v2067 + 8) + 1784), (uint64_t *)v2149);
          if (v1409)
          {
            v1410 = v1409[13];
            if (v1355 == *(_DWORD *)(v1360 + 32))
              goto LABEL_1240;
          }
          else
          {
            v1410 = 0;
            if (v1355 == *(_DWORD *)(v1360 + 32))
            {
LABEL_1240:
              sub_20F61F708(v1405, v1406, v2149[1], *(unsigned int *)v2150, v1355, v1410, v2067 + 3144, v2059++, (__n128)vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)(v1345 + 24) + 8)), *(float *)(*(_QWORD *)(v1345 + 24) + 32), v2067 + 4712);
LABEL_1241:
              v1324 = v2067;
              v1331 = v2031;
              goto LABEL_1242;
            }
          }
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 144, (uint64_t)"landmarkID == track->ID().key()", 31, (uint64_t)"Landmark ID and track ID is different", 37, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v1355 = *(_DWORD *)(v1360 + 32);
          goto LABEL_1240;
        }
LABEL_1242:
        if (v1361)
        {
          v1411 = (unint64_t *)&v1361->__shared_owners_;
          do
            v1412 = __ldaxr(v1411);
          while (__stlxr(v1412 - 1, v1411));
          if (!v1412)
          {
            ((void (*)(std::__shared_weak_count *))v1361->__on_zero_shared)(v1361);
            std::__shared_weak_count::__release_weak(v1361);
          }
        }
        goto LABEL_1176;
      }
    }
LABEL_1127:
    v1326 = *(uint64_t **)(v1324 + 24);
    v1325 = *(uint64_t **)(v1324 + 32);
    if (v1326 != v1325)
    {
      v2058 = *(_QWORD *)(v2067 + 8);
      __szf = *(_QWORD *)(v2058 + 64);
      if (__szf)
      {
        v1327 = *(_QWORD *)(v2058 + 312);
        if (v1327)
        {
          v1328 = *(unsigned int *)(v2067 + 2152);
          v1329 = *(_QWORD *)(v2067 + 5712);
          if (v1329 == *(_QWORD *)(v2067 + 5704))
            v1330 = 0;
          else
            v1330 = *(_DWORD *)(v1329 - 208) + 1;
          v1417 = v1327 * __szf;
          v1418 = *(double *)(v2067 + 2168);
          v2038 = *(uint64_t **)(v1324 + 32);
          v2032 = *(unsigned int *)(v2067 + 2152);
          while (1)
          {
            v1419 = *v1326;
            v1420 = *(_QWORD *)(*v1326 + 544);
            v1421 = *(_QWORD *)(*v1326 + 536);
            if (v1328 <= (v1420 - v1421) >> 6 && *(_DWORD *)(v1419 + 560) != 2)
              break;
LABEL_1257:
            if (++v1326 == v1325)
              goto LABEL_1340;
          }
          v1422 = *(_DWORD *)(v1419 + 32);
          v1423 = *(_QWORD *)(*(_QWORD *)(v2067 + 8) + 64);
          *(_QWORD *)v2182 = *(_QWORD *)(v2067 + 8);
          *(_QWORD *)&v2182[8] = v1423;
          *(_QWORD *)&v2182[16] = 0;
          *(_QWORD *)&v2148[0] = v1421;
          *(_QWORD *)object = v2182;
          *(_QWORD *)&object[8] = v2148;
          *(_QWORD *)&object[16] = v2058;
          *(_QWORD *)&object[24] = __szf;
          *(_QWORD *)&object[32] = v1417;
          *(_QWORD *)&object[40] = v1420;
          *(_QWORD *)&object[48] = v1419;
          v1424 = sub_20F6236F0((uint64_t **)object);
          if (!v1424)
            goto LABEL_1340;
          v1425 = (float32x2_t *)v1424;
          if (!*(_BYTE *)(*v1326 + 528)
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 1321, (uint64_t)"track_ptr->getStructure()", 25, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v1426 = *(char **)(v2067 + 5512);
          v1427 = *(char **)(v2067 + 5520);
          if (v1427 != v1426)
          {
            v1428 = (v1427 - v1426) >> 4;
            do
            {
              v1429 = v1428 >> 1;
              v1430 = (unsigned int *)&v1426[16 * (v1428 >> 1)];
              v1432 = *v1430;
              v1431 = (char *)(v1430 + 4);
              v1428 += ~(v1428 >> 1);
              if (v1432 < v1422)
                v1426 = v1431;
              else
                v1428 = v1429;
            }
            while (v1428);
          }
          if (v1426 == v1427)
          {
            v1434 = *v1326;
          }
          else
          {
            v1433 = *(_DWORD *)v1426;
            v1434 = *v1326;
            if (v1433 == v1422)
            {
LABEL_1289:
              if (*(_BYTE *)(v1434 + 528))
                v1467 = v1434 + 40;
              else
                v1467 = 0;
              v1468 = *(void **)(v1467 + 32);
              v1469 = *(_DWORD *)(v1467 + 40);
              v1470 = (__int128 *)*(unsigned int *)(v1467 + 48);
              do
              {
                v1471 = *(_QWORD *)&v2182[16];
                v1472 = *(_QWORD *)&v2182[16] / *(_QWORD *)&v2182[8];
                v1473 = *(_QWORD *)&v2182[16] % *(_QWORD *)&v2182[8];
                v1474 = *(_QWORD **)(*(_QWORD *)v2182 + 48);
                if (((*(_QWORD *)&v2182[16] % *(_QWORD *)&v2182[8]) & 0x8000000000000000) != 0)
                {
                  do
                  {
                    v1486 = (_QWORD *)*v1474;
                    if (*v1474)
                    {
                      do
                      {
                        v1475 = v1486;
                        v1486 = (_QWORD *)v1486[1];
                      }
                      while (v1486);
                    }
                    else
                    {
                      do
                      {
                        v1475 = (_QWORD *)v1474[2];
                        _ZF = *v1475 == (_QWORD)v1474;
                        v1474 = v1475;
                      }
                      while (_ZF);
                    }
                    v1474 = v1475;
                    _CF = __CFADD__(v1473++, 1);
                  }
                  while (!_CF);
                }
                else if (v1473)
                {
                  do
                  {
                    v1485 = (_QWORD *)v1474[1];
                    if (v1485)
                    {
                      do
                      {
                        v1475 = v1485;
                        v1485 = (_QWORD *)*v1485;
                      }
                      while (v1485);
                    }
                    else
                    {
                      do
                      {
                        v1475 = (_QWORD *)v1474[2];
                        _ZF = *v1475 == (_QWORD)v1474;
                        v1474 = v1475;
                      }
                      while (!_ZF);
                    }
                    v1474 = v1475;
                    v1505 = v1473-- <= 1;
                  }
                  while (!v1505);
                }
                else
                {
                  v1475 = *(_QWORD **)(*(_QWORD *)v2182 + 48);
                }
                v1476 = (void *)v1475[4];
                v1477 = (void *)v1475[5];
                v1478 = *(_QWORD **)(*(_QWORD *)v2182 + 296);
                if (v1472 < 0)
                {
                  do
                  {
                    v1487 = (_QWORD *)*v1478;
                    if (*v1478)
                    {
                      do
                      {
                        v1479 = v1487;
                        v1487 = (_QWORD *)v1487[1];
                      }
                      while (v1487);
                    }
                    else
                    {
                      do
                      {
                        v1479 = (_QWORD *)v1478[2];
                        _ZF = *v1479 == (_QWORD)v1478;
                        v1478 = v1479;
                      }
                      while (_ZF);
                    }
                    v1478 = v1479;
                    _CF = __CFADD__(v1472++, 1);
                  }
                  while (!_CF);
                }
                else if (*(_QWORD *)&v2182[8] <= *(_QWORD *)&v2182[16])
                {
                  do
                  {
                    v1488 = (_QWORD *)v1478[1];
                    if (v1488)
                    {
                      do
                      {
                        v1479 = v1488;
                        v1488 = (_QWORD *)*v1488;
                      }
                      while (v1488);
                    }
                    else
                    {
                      do
                      {
                        v1479 = (_QWORD *)v1478[2];
                        _ZF = *v1479 == (_QWORD)v1478;
                        v1478 = v1479;
                      }
                      while (!_ZF);
                    }
                    v1478 = v1479;
                    v1505 = v1472-- <= 1;
                  }
                  while (!v1505);
                }
                else
                {
                  v1479 = *(_QWORD **)(*(_QWORD *)v2182 + 296);
                }
                v1480 = *((_DWORD *)v1479 + 8);
                v2149[0] = v1476;
                v2149[1] = v1477;
                *(_DWORD *)v2150 = v1480;
                if ((_DWORD)v1470 != v1480 || v1468 != v1476 || v1469 != (_DWORD)v1477)
                {
                  v1483 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)(v2067 + 8) + 1784), (uint64_t *)v2149);
                  if (v1483)
                    v1484 = v1483[13];
                  else
                    v1484 = 0;
                  sub_20F61F708(v1469, v1470, v2149[1], *(unsigned int *)v2150, v1422, v1484, v2067 + 3144, v1330++, (__n128)vcvtq_f64_f32(v1425[1]), v1418 * v1425[4].f32[0], v2067 + 4712);
                  v1471 = *(_QWORD *)&v2182[16];
                }
                *(_QWORD *)&v2182[16] = v1471 + 1;
                if (v1471 + 1 == v1417)
                  break;
                *(_QWORD *)&v2148[0] += 64;
                if (*(_QWORD *)&v2148[0] == v1420)
                  break;
                v1425 = (float32x2_t *)sub_20F6236F0((uint64_t **)object);
              }
              while (v1425);
              v1325 = v2038;
              v1328 = v2032;
              goto LABEL_1257;
            }
          }
          v1435 = (void *)(v1434 + 40);
          v1436 = *(unsigned __int8 *)(v1434 + 528);
          if (v1436)
            v1437 = v1435;
          else
            v1437 = 0;
          LODWORD(v2149[0]) = v1422;
          BYTE4(v2149[0]) = 1;
          v2149[1] = v1437;
          if (v1436)
          {
            if ((*(unsigned int (**)(void *))(*(_QWORD *)v1435 + 24))(v1435))
            {
              v1438 = (double *)v2149[1];
              _Q1 = *((_OWORD *)v2149[1] + 4);
              _D3 = *((_QWORD *)v2149[1] + 9);
              __asm { FMLA            D2, D3, V1.D[1] }
              if (fabs(sqrt(_D2 + *((double *)v2149[1] + 10) * *((double *)v2149[1] + 10)) + -1.0) > 0.000001
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
            }
            else
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 44, (uint64_t)"initializeImpl()", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              v1438 = (double *)v2149[1];
              if (!v2149[1])
                goto LABEL_1288;
            }
            if ((*(unsigned int (**)(double *))(*(_QWORD *)v1438 + 24))(v1438))
            {
              v1442 = (uint64_t *)*((_QWORD *)v1438 + 12);
              v1443 = *v1442;
              v1444 = (double *)v1442[2];
              v1445 = v1442[4];
              v1446 = (double *)v1442[6];
              _D1 = v1438[2] - v1444[1];
              v1448 = v1438[3] - v1444[2];
              _Q3.f64[0] = *(float64_t *)(v1443 + 16);
              _Q7 = *(_OWORD *)(v1443 + 48);
              _Q3.f64[1] = *(float64_t *)(v1443 + 40);
              v1451 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v1443, *(int64x2_t *)(v1443 + 24)), v1438[1] - *v1444), (float64x2_t)vzip2q_s64(*(int64x2_t *)v1443, *(int64x2_t *)(v1443 + 24)), _D1), _Q3, v1448);
              __asm { FMLA            D2, D1, V7.D[1] }
              v1453 = _D2 + *(double *)(v1443 + 64) * v1448;
              v1454 = v1451.f64[0] - *v1446;
              _D2 = v1451.f64[1] - v1446[1];
              v1456 = v1453 - v1446[2];
              _Q3.f64[0] = *(float64_t *)(v1445 + 16);
              _Q4 = *(int64x2_t *)v1445;
              _Q6 = *(int64x2_t *)(v1445 + 24);
              _Q16 = *(_OWORD *)(v1445 + 48);
              __asm { FMLA            D19, D2, V4.D[1] }
              _Q3.f64[1] = *(float64_t *)(v1445 + 40);
              _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v1445, _Q6), v1454), (float64x2_t)vzip2q_s64(*(int64x2_t *)v1445, _Q6), _D2), _Q3, v1456);
              __asm
              {
                FMLA            D3, D2, V16.D[1]
                FMLA            D1, D2, V6.D[1]
              }
              _D1 = _D1 + v1456 * _Q3.f64[1];
              __asm { FMLA            D2, D1, V17.D[1] }
              *(_QWORD *)v2150 = sqrt(_D2+ (_Q3.f64[0] + v1456 * *(double *)(v1445 + 64))* (_Q3.f64[0] + *(double *)(v1445 + 64) * v1456));
              _Q1 = *((_OWORD *)v1438 + 4);
              _Q3.f64[0] = v1438[9];
              __asm { FMLA            D2, D3, V1.D[1] }
              if (fabs(sqrt(_D2 + v1438[10] * v1438[10]) + -1.0) > 0.000001
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              if (sub_20F61AC24((uint64_t)v2004, (unsigned int *)v2149))
              {
                *(_BYTE *)(v2067 + 6588) = 0;
                *(_DWORD *)(v2067 + 6584) = 0;
              }
            }
          }
LABEL_1288:
          v1434 = *v1326;
          *(_DWORD *)(*v1326 + 560) = 1;
          goto LABEL_1289;
        }
      }
    }
  }
LABEL_1340:
  v2066 = *(unsigned int *)(v2067 + 2152);
  v2022 = *(unsigned int *)(v2067 + 1920);
  v1489 = *(_QWORD *)(v2067 + 24);
  for (k = *(_QWORD *)(v2067 + 32); v1489 != k; v1489 += 8)
  {
    if (v2066 > (uint64_t)(*(_QWORD *)(*(_QWORD *)v1489 + 544) - *(_QWORD *)(*(_QWORD *)v1489 + 536)) >> 6)
    {
      v1491 = *(_DWORD *)(*(_QWORD *)v1489 + 32);
      v1492 = *(char **)(v2067 + 5512);
      v1493 = *(char **)(v2067 + 5520);
      if (v1493 != v1492)
      {
        v1494 = (v1493 - v1492) >> 4;
        do
        {
          v1495 = v1494 >> 1;
          v1496 = (unsigned int *)&v1492[16 * (v1494 >> 1)];
          v1498 = *v1496;
          v1497 = (char *)(v1496 + 4);
          v1494 += ~(v1494 >> 1);
          if (v1498 < v1491)
            v1492 = v1497;
          else
            v1494 = v1495;
        }
        while (v1494);
      }
      if (v1492 != v1493 && *(_DWORD *)v1492 == v1491)
      {
        if (sub_20F623A0C((uint64_t)v2004, v1491))
        {
          *(_WORD *)(v2067 + 6588) = 0;
          *(_DWORD *)(v2067 + 6584) = 0;
        }
        else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2372, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        *(_DWORD *)(*(_QWORD *)v1489 + 560) = 0;
      }
    }
  }
  v1499 = sub_20F5BB4F0((uint64_t)v2004);
  v1500 = (uint64_t *)v2067;
  v1502 = *(_QWORD *)(v2067 + 24);
  v1501 = *(_QWORD *)(v2067 + 32);
  v1503 = v1501 - v1502;
  v1504 = (v1501 - v1502) >> 3;
  v1505 = v1504 > v2022 && *(_DWORD *)(v2067 + 2184) + v1499 > v2022;
  if (v1505)
  {
    if (*(_BYTE *)(v2067 + 2104))
    {
      v1540 = *(_QWORD **)(v2067 + 8);
      v1541 = v1540[8];
      v1542 = (_QWORD *)v1540[6];
      if ((v1541 & 0x1FFFFFFFELL) != 0)
      {
        v1543 = (v1541 >> 1);
        do
        {
          v1544 = (_QWORD *)v1542[1];
          if (v1544)
          {
            do
            {
              v1545 = v1544;
              v1544 = (_QWORD *)*v1544;
            }
            while (v1544);
          }
          else
          {
            do
            {
              v1545 = (_QWORD *)v1542[2];
              _ZF = *v1545 == (_QWORD)v1542;
              v1542 = v1545;
            }
            while (!_ZF);
          }
          v1542 = v1545;
          v1505 = v1543-- <= 1;
        }
        while (!v1505);
      }
      else
      {
        v1545 = (_QWORD *)v1540[6];
      }
      v1577 = v1540[225];
      *(_OWORD *)object = *((_OWORD *)v1545 + 2);
      v1578 = (_QWORD *)v1540[37];
      if (v1578 == v1540 + 38)
      {
        v2019 = (int64x2_t **)(v1577 + 40);
      }
      else
      {
        v1500 = (uint64_t *)v2067;
        do
        {
          *(_DWORD *)&object[16] = *((_DWORD *)v1578 + 8);
          v1579 = sub_20E9DF85C(v1540 + 223, (uint64_t *)object);
          if (v1579)
          {
            v2019 = (int64x2_t **)(v1579 + 5);
            v1500 = (uint64_t *)v2067;
            goto LABEL_1479;
          }
          v1580 = (_QWORD *)v1578[1];
          if (v1580)
          {
            do
            {
              v1581 = v1580;
              v1580 = (_QWORD *)*v1580;
            }
            while (v1580);
          }
          else
          {
            do
            {
              v1581 = (_QWORD *)v1578[2];
              _ZF = *v1581 == (_QWORD)v1578;
              v1578 = v1581;
            }
            while (!_ZF);
          }
          v1540 = *(_QWORD **)(v2067 + 8);
          v1578 = v1581;
        }
        while (v1581 != v1540 + 38);
        v2019 = 0;
      }
LABEL_1479:
      v1585 = v1500 + 4;
      v1586 = v1500 + 3;
      v1587 = (v1500[4] - v1500[3]) >> 3;
      *(int64x2_t *)object = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v2040 = v1500 + 396;
      sub_20F623C14((uint64_t)(v1500 + 396), v1587, object);
      v2149[0] = *(void **)(*(_QWORD *)(v2067 + 8) + 48);
      v1588 = v1500[3];
      v1589 = (uint64_t *)v1500[4];
      v1590 = 126 - 2 * __clz((uint64_t)((uint64_t)v1589 - v1588) >> 3);
      *(_QWORD *)object = v2067;
      *(_QWORD *)&object[8] = v2149;
      *(_QWORD *)v2182 = object;
      if (v1589 == (uint64_t *)v1588)
        v1591 = 0;
      else
        v1591 = v1590;
      sub_20F623E78(v1588, v1589, (_QWORD ***)v2182, v1591, 1);
      v2034 = v2067 + 3216;
      bzero((void *)(v2067 + 3216), 0x480uLL);
      v1592 = (*v1585 - *v1586) >> 3;
      v2182[0] = 0;
      v2062 = (uint64_t *)(v2067 + 3192);
      sub_20EDCA4D0(v2067 + 3192, v1592, v2182);
      v1593 = *v1586;
      if (*v1585 == *v1586)
      {
        v1595 = 0;
        v2016 = *v1585;
        v1593 = *v1585;
        v2028 = 0;
        if (v2022)
          goto LABEL_1558;
LABEL_1849:
        v1867 = v2016;
        v1500 = (uint64_t *)v2067;
        if (v2016 != v1593)
        {
          v1868 = 0;
          do
          {
            if (((*(_QWORD *)(*v2062 + ((v1868 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v1868) & 1) == 0)
            {
              v1869 = *(_QWORD *)(v1593 + 8 * v1868);
              if (sub_20F623A0C((uint64_t)v2004, *(_DWORD *)(v1869 + 32)))
              {
                *(_WORD *)(v2067 + 6588) = 0;
                *(_DWORD *)(v2067 + 6584) = 0;
              }
              else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2285, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              *(_DWORD *)(v1869 + 560) = 0;
              v1500 = (uint64_t *)v2067;
              v1593 = *(_QWORD *)(v2067 + 24);
              v1867 = *(_QWORD *)(v2067 + 32);
            }
            ++v1868;
          }
          while (v1868 < (v1867 - v1593) >> 3);
        }
        goto LABEL_1361;
      }
      v1594 = 0;
      v1595 = 0;
      v1596 = 0;
      if ((unint64_t)((*v1585 - *v1586) >> 3) <= 1)
        v1597 = 1;
      else
        v1597 = (*v1585 - *v1586) >> 3;
      v1598 = v2067;
LABEL_1489:
      v1599 = *(_QWORD *)(v1593 + 8 * v1596);
      v1600 = *(_QWORD *)(v1599 + 32);
      if (*(_DWORD *)(v1599 + 560) == 2)
      {
        v1601 = *(char **)(v2067 + 5512);
        v1602 = *(char **)(v2067 + 5520);
        if (v1602 != v1601)
        {
          v1603 = (v1602 - v1601) >> 4;
          do
          {
            v1604 = v1603 >> 1;
            v1605 = (unsigned int *)&v1601[16 * (v1603 >> 1)];
            v1607 = *v1605;
            v1606 = (char *)(v1605 + 4);
            v1603 += ~(v1603 >> 1);
            if (v1607 < v1600)
              v1601 = v1606;
            else
              v1603 = v1604;
          }
          while (v1603);
        }
        if (v1601 != v1602 && *(_DWORD *)v1601 == (_DWORD)v1600)
          goto LABEL_1498;
      }
      v1631 = *(int8x8_t *)(v2067 + 3112);
      if (!*(_QWORD *)&v1631)
        goto LABEL_1533;
      v1632 = *(_QWORD *)(v1599 + 32);
      v1633 = (uint8x8_t)vcnt_s8(v1631);
      v1633.i16[0] = vaddlv_u8(v1633);
      if (v1633.u32[0] > 1uLL)
      {
        v1634 = *(_QWORD *)(v1599 + 32);
        if (*(_QWORD *)&v1631 <= v1632)
          v1634 = v1632 % *(_QWORD *)&v1631;
      }
      else
      {
        v1634 = (v1631.i32[0] - 1) & v1632;
      }
      v1635 = *(uint64_t ***)(*(_QWORD *)(v2067 + 3104) + 8 * v1634);
      if (!v1635 || (v1636 = *v1635) == 0)
      {
LABEL_1533:
        v1648 = *(char **)(v2067 + 5512);
        v1649 = *(char **)(v2067 + 5520);
        if (v1649 != v1648)
        {
          v1650 = (v1649 - v1648) >> 4;
          do
          {
            v1651 = v1650 >> 1;
            v1652 = (unsigned int *)&v1648[16 * (v1650 >> 1)];
            v1654 = *v1652;
            v1653 = (char *)(v1652 + 4);
            v1650 += ~(v1650 >> 1);
            if (v1654 < v1600)
              v1648 = v1653;
            else
              v1650 = v1651;
          }
          while (v1650);
        }
        if (v1648 == v1649 || *(_DWORD *)v1648 != (_DWORD)v1600)
        {
          *(_QWORD *)(*v2062 + ((v1596 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v1596;
          ++v1595;
        }
        goto LABEL_1488;
      }
      if (v1633.u32[0] < 2uLL)
      {
        v1637 = *(_QWORD *)&v1631 - 1;
        while (1)
        {
          v1639 = v1636[1];
          if (v1639 == v1632)
          {
            if (*((_DWORD *)v1636 + 4) == (_DWORD)v1600)
              goto LABEL_1525;
          }
          else if ((v1639 & v1637) != v1634)
          {
            goto LABEL_1533;
          }
          v1636 = (uint64_t *)*v1636;
          if (!v1636)
            goto LABEL_1533;
        }
      }
      while (1)
      {
        v1638 = v1636[1];
        if (v1638 == v1632)
        {
          if (*((_DWORD *)v1636 + 4) == (_DWORD)v1600)
          {
LABEL_1525:
            v1641 = *(char **)(v2067 + 5512);
            v1642 = *(char **)(v2067 + 5520);
            if (v1642 != v1641)
            {
              v1643 = (v1642 - v1641) >> 4;
              do
              {
                v1644 = v1643 >> 1;
                v1645 = (unsigned int *)&v1641[16 * (v1643 >> 1)];
                v1647 = *v1645;
                v1646 = (char *)(v1645 + 4);
                v1643 += ~(v1643 >> 1);
                if (v1647 < v1600)
                  v1641 = v1646;
                else
                  v1643 = v1644;
              }
              while (v1643);
            }
            if (v1641 == v1642 || *(_DWORD *)v1641 != (_DWORD)v1600)
              goto LABEL_1533;
LABEL_1498:
            v1608 = (double *)(*v2040 + 16 * v1596);
            v1609 = *v1608;
            if (*v1608 <= 6.28318531)
            {
              v1630 = v1608[1];
            }
            else
            {
              v1610 = v1599 + 40;
              if (!*(_BYTE *)(v1599 + 528))
                v1610 = 0;
              _Q1 = *(_OWORD *)(v1610 + 8);
              v1612 = (double *)v2019[2];
              v1613 = v2019[4];
              v1614 = (double *)v2019[6];
              v1615 = *(double *)&_Q1 - *v1612;
              *(double *)&_Q1 = *((double *)&_Q1 + 1) - v1612[1];
              v1616 = *(double *)(v1610 + 24) - v1612[2];
              *(_QWORD *)&v1617.f64[0] = (*v2019)[1].i64[0];
              _Q7 = (*v2019)[3];
              *(_QWORD *)&v1617.f64[1] = (*v2019)[2].i64[1];
              v1619 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(**v2019, *(int64x2_t *)((char *)*v2019 + 24)), v1615), (float64x2_t)vzip2q_s64(**v2019, *(int64x2_t *)((char *)*v2019 + 24)), *(double *)&_Q1), v1617, v1616);
              __asm { FMLA            D2, D1, V7.D[1] }
              v1621 = _D2 + *(double *)(*v2019)[4].i64 * v1616;
              _D2 = v1619.f64[1] - v1614[1];
              v1623 = v1621 - v1614[2];
              *(_QWORD *)&v1617.f64[0] = v1613[1].i64[0];
              _Q7 = v1613[3];
              *(_QWORD *)&v1617.f64[1] = v1613[2].i64[1];
              __szk = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*v1613, *(int64x2_t *)((char *)v1613 + 24)), v1619.f64[0] - *v1614), (float64x2_t)vzip2q_s64(*v1613, *(int64x2_t *)((char *)v1613 + 24)), _D2), v1617, v1623);
              __asm { FMLA            D1, D2, V7.D[1] }
              v1625 = *(double *)&_Q1 + *(double *)v1613[4].i64 * v1623;
              *(float *)&v1623 = __szk.f64[0];
              *(float *)&_Q1 = v1625;
              v1626 = v1593;
              v1609 = atan2f(*(float *)&v1623, *(float *)&_Q1) + 3.14159265;
              *v1608 = v1609;
              v1627 = __szk.f64[1];
              v1628 = sqrt(vmulq_f64(__szk, __szk).f64[0] + v1625 * v1625);
              v1629 = atan2f(v1627, v1628);
              v1593 = v1626;
              v1630 = v1629 + 1.57079633;
              v1608[1] = v1630;
            }
            v1640 = (unint64_t)(v1609 * 3.81971863) - ((unint64_t)(v1609 * 3.81971863) == 24);
            ++*(_DWORD *)(v2034
                        + 48 * v1640
                        + 4 * ((unint64_t)(v1630 * 3.81971863) - ((unint64_t)(v1630 * 3.81971863) == 12)));
            ++v1594;
            ++v1595;
            *(_QWORD *)(*v2062 + ((v1596 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v1596;
LABEL_1488:
            if (++v1596 == v1597)
            {
              v1655 = 0;
              v1656 = 0;
              do
              {
                if ((*(_QWORD *)(*v2062 + 8 * (v1656 >> 6)) & (1 << v1656)) == 0)
                {
                  v1681 = *(_QWORD *)(v1593 + 8 * v1656);
                  v1682 = *(_QWORD *)(v1681 + 544);
                  v1683 = *(_QWORD *)(v1681 + 536);
                  if (*(unsigned int *)(v1598 + 2112) <= (unint64_t)((v1682 - v1683) >> 6))
                  {
                    v1598 = v2067;
                    if (sub_20F623D44(v1683, v1682) >= (unint64_t)*(unsigned int *)(v2067 + 2108))
                    {
                      ++v1594;
                      ++v1595;
                      *(_QWORD *)(*v2062 + 8 * (v1656 >> 6)) |= 1 << v1656;
                      if (v1594 >= v2022)
                      {
                        v1593 = *(_QWORD *)(v2067 + 24);
                        v2016 = *(_QWORD *)(v2067 + 32);
                        goto LABEL_1849;
                      }
                      v1684 = *v2040;
                      v1674 = *(double *)(*v2040 + v1655);
                      if (v1674 > 6.28318531)
                      {
                        v1657 = *(_QWORD *)(*(_QWORD *)(v2067 + 24) + 8 * v1656);
                        if (*(_BYTE *)(v1657 + 528))
                          v1658 = v1657 + 40;
                        else
                          v1658 = 0;
                        _Q1 = *(_OWORD *)(v1658 + 8);
                        v1660 = (double *)v2019[2];
                        v1661 = v2019[4];
                        v1662 = (double *)v2019[6];
                        v1663 = *(double *)&_Q1 - *v1660;
                        *(double *)&_Q1 = *((double *)&_Q1 + 1) - v1660[1];
                        v1664 = *(double *)(v1658 + 24) - v1660[2];
                        *(_QWORD *)&v1665.f64[0] = (*v2019)[1].i64[0];
                        _Q7 = (*v2019)[3];
                        *(_QWORD *)&v1665.f64[1] = (*v2019)[2].i64[1];
                        v1667 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(**v2019, *(int64x2_t *)((char *)*v2019 + 24)), v1663), (float64x2_t)vzip2q_s64(**v2019, *(int64x2_t *)((char *)*v2019 + 24)), *(double *)&_Q1), v1665, v1664);
                        __asm { FMLA            D2, D1, V7.D[1] }
                        v1669 = _D2 + *(double *)(*v2019)[4].i64 * v1664;
                        _D2 = v1667.f64[1] - v1662[1];
                        v1671 = v1669 - v1662[2];
                        *(_QWORD *)&v1665.f64[0] = v1661[1].i64[0];
                        _Q7 = v1661[3];
                        *(_QWORD *)&v1665.f64[1] = v1661[2].i64[1];
                        __szl = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*v1661, *(int64x2_t *)((char *)v1661 + 24)), v1667.f64[0] - *v1662), (float64x2_t)vzip2q_s64(*v1661, *(int64x2_t *)((char *)v1661 + 24)), _D2), v1665, v1671);
                        __asm { FMLA            D1, D2, V7.D[1] }
                        v1673 = *(double *)&_Q1 + *(double *)v1661[4].i64 * v1671;
                        *(float *)&v1671 = __szl.f64[0];
                        *(float *)&_Q1 = v1673;
                        v1674 = atan2f(*(float *)&v1671, *(float *)&_Q1) + 3.14159265;
                        v1675 = (double *)(v1684 + v1655);
                        *v1675 = v1674;
                        v1676 = __szl.f64[1];
                        v1677 = sqrt(vmulq_f64(__szl, __szl).f64[0] + v1673 * v1673);
                        v1678 = atan2f(v1676, v1677) + 1.57079633;
                        v1675[1] = v1678;
                      }
                      else
                      {
                        v1678 = *(double *)(v1684 + v1655 + 8);
                      }
                      v1679 = (unint64_t)(v1674 * 3.81971863) - ((unint64_t)(v1674 * 3.81971863) == 24);
                      v1680 = 4
                            * ((unint64_t)(v1678 * 3.81971863) - ((unint64_t)(v1678 * 3.81971863) == 12));
                      ++*(_DWORD *)(v2034 + 48 * v1679 + v1680);
                    }
                  }
                }
                ++v1656;
                v1593 = *(_QWORD *)(v1598 + 24);
                v1655 += 16;
              }
              while (v1656 < (*(_QWORD *)(v1598 + 32) - v1593) >> 3);
              v2016 = *(_QWORD *)(v1598 + 32);
              v2028 = v1594;
              if (v1594 >= v2022)
                goto LABEL_1849;
LABEL_1558:
              v1685 = (v2016 - v1593) >> 3;
              if (v2016 == v1593)
              {
                if (v1595 < v1685)
                {
                  while (1)
                    ;
                }
                goto LABEL_1849;
              }
              v1686 = 1;
LABEL_1563:
              if (v1595 >= v1685)
                goto LABEL_1849;
              __szh = v1595;
              v1687 = 0;
              v1688 = 0;
              v1689 = *v2062;
              while (1)
              {
                v1690 = *(_QWORD *)(v1689 + 8 * (v1688 >> 6));
                if ((v1690 & (1 << v1688)) == 0)
                {
                  v1691 = *v2040;
                  v1692 = *(double *)(*v2040 + v1687);
                  if (v1692 <= 6.28318531)
                  {
                    v1715 = *(double *)(v1691 + v1687 + 8);
                  }
                  else
                  {
                    v1693 = *(_QWORD *)(v1593 + 8 * v1688);
                    v1694 = *(_BYTE *)(v1693 + 528) ? v1693 + 40 : 0;
                    _Q1 = *(_OWORD *)(v1694 + 8);
                    v1696 = (double *)v2019[2];
                    v1697 = v2019[4];
                    v1698 = (double *)v2019[6];
                    v1699 = *(double *)&_Q1 - *v1696;
                    *(double *)&_Q1 = *((double *)&_Q1 + 1) - v1696[1];
                    v1700 = *(double *)(v1694 + 24) - v1696[2];
                    *(_QWORD *)&v1701.f64[0] = (*v2019)[1].i64[0];
                    _Q7 = (*v2019)[3];
                    *(_QWORD *)&v1701.f64[1] = (*v2019)[2].i64[1];
                    v1703 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(**v2019, *(int64x2_t *)((char *)*v2019 + 24)), v1699), (float64x2_t)vzip2q_s64(**v2019, *(int64x2_t *)((char *)*v2019 + 24)), *(double *)&_Q1), v1701, v1700);
                    __asm { FMLA            D2, D1, V7.D[1] }
                    v1705 = _D2 + *(double *)(*v2019)[4].i64 * v1700;
                    _D2 = v1703.f64[1] - v1698[1];
                    v1707 = v1705 - v1698[2];
                    *(_QWORD *)&v1701.f64[0] = v1697[1].i64[0];
                    _Q7 = v1697[3];
                    *(_QWORD *)&v1701.f64[1] = v1697[2].i64[1];
                    __dstb = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*v1697, *(int64x2_t *)((char *)v1697 + 24)), v1703.f64[0] - *v1698), (float64x2_t)vzip2q_s64(*v1697, *(int64x2_t *)((char *)v1697 + 24)), _D2), v1701, v1707);
                    __asm { FMLA            D1, D2, V7.D[1] }
                    v1709 = *(double *)&_Q1 + *(double *)v1697[4].i64 * v1707;
                    *(float *)&v1707 = __dstb.f64[0];
                    *(float *)&_Q1 = v1709;
                    v1710 = v1593;
                    v1692 = atan2f(*(float *)&v1707, *(float *)&_Q1) + 3.14159265;
                    v1711 = (double *)(v1691 + v1687);
                    *v1711 = v1692;
                    v1712 = __dstb.f64[1];
                    v1713 = sqrt(vmulq_f64(__dstb, __dstb).f64[0] + v1709 * v1709);
                    v1714 = atan2f(v1712, v1713);
                    v1593 = v1710;
                    v1715 = v1714 + 1.57079633;
                    v1711[1] = v1715;
                  }
                  v1716 = (unint64_t)(v1715 * 3.81971863) - ((unint64_t)(v1715 * 3.81971863) == 12);
                  v1717 = v2034
                        + 48 * ((unint64_t)(v1692 * 3.81971863) - ((unint64_t)(v1692 * 3.81971863) == 24));
                  v1718 = *(unsigned int *)(v1717 + 4 * v1716);
                  if (v1686 > v1718)
                  {
                    ++__szh;
                    *(_QWORD *)(v1689 + 8 * (v1688 >> 6)) = v1690 | (1 << v1688);
                    if (++v2028 >= v2022)
                    {
LABEL_1562:
                      ++v1686;
                      v1595 = __szh;
                      if (v2028 >= v2022)
                        goto LABEL_1849;
                      goto LABEL_1563;
                    }
                    *(_DWORD *)(v1717 + 4 * v1716) = v1718 + 1;
                  }
                }
                ++v1688;
                v1687 += 16;
                if (v1685 == v1688)
                  goto LABEL_1562;
              }
            }
            goto LABEL_1489;
          }
        }
        else
        {
          if (v1638 >= *(_QWORD *)&v1631)
            v1638 %= *(_QWORD *)&v1631;
          if (v1638 != v1634)
            goto LABEL_1533;
        }
        v1636 = (uint64_t *)*v1636;
        if (!v1636)
          goto LABEL_1533;
      }
    }
    v1546 = *(double *)(v2067 + 1992);
    v1547 = *(double *)(v2067 + 2000);
    v1548 = *(double *)(v2067 + 2008);
    v1549 = *(double *)(v2067 + 2016);
    v1550 = *(double *)(v2067 + 2024);
    v1551 = *(_DWORD *)(v2067 + 2100);
    v2027 = *(unsigned __int8 *)(v2067 + 2116);
    memset(v2182, 0, 24);
    v1552 = *(_QWORD **)(v2067 + 8);
    v1553 = v1552[39];
    v2002 = v1551;
    if (v1553)
    {
      if (v1553 >> 62)
        sub_20E867F44();
      v1554 = operator new(4 * v1553);
      v1553 = (unint64_t)&v1554[v1553];
      *(_QWORD *)v2182 = v1554;
      *(_QWORD *)&v2182[8] = v1554;
      *(_QWORD *)&v2182[16] = v1553;
      v1555 = (_QWORD *)v1552[37];
      if (v1555 != v1552 + 38)
        goto LABEL_1424;
    }
    else
    {
      v1554 = 0;
      v1555 = (_QWORD *)v1552[37];
      if (v1555 != v1552 + 38)
      {
LABEL_1424:
        v2033 = v1502;
        v2039 = v1501;
        __szg = v1501 - v1502;
        v2060 = (v1501 - v1502) >> 3;
        v1556 = v1554;
        v1557 = v1554;
        while (1)
        {
          if (!(unsigned __int16)*((_DWORD *)v1555 + 8))
            goto LABEL_1429;
          v1558 = HIWORD(*((_DWORD *)v1555 + 8));
          if ((unint64_t)v1556 < v1553)
          {
            *v1556++ = v1558;
            v1554 = v1556;
LABEL_1429:
            v1559 = (_QWORD *)v1555[1];
            if (v1559)
              goto LABEL_1448;
            goto LABEL_1450;
          }
          v1560 = ((char *)v1556 - v1557) >> 2;
          v1561 = v1560 + 1;
          if ((unint64_t)(v1560 + 1) >> 62)
          {
            *(_QWORD *)&v2182[8] = v1554;
            sub_20E867F44();
          }
          if ((uint64_t)(v1553 - (_QWORD)v1557) >> 1 > v1561)
            v1561 = (uint64_t)(v1553 - (_QWORD)v1557) >> 1;
          if (v1553 - (unint64_t)v1557 >= 0x7FFFFFFFFFFFFFFCLL)
            v1562 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v1562 = v1561;
          if (v1562)
          {
            if (v1562 >> 62)
            {
              *(_QWORD *)&v2182[8] = v1554;
              sub_20E877A38();
            }
            v1563 = operator new(4 * v1562);
            v1564 = &v1563[4 * v1560];
            *v1564 = v1558;
            v1554 = v1564 + 1;
            v1565 = (char *)v1556 - v1557;
            if (v1556 == (_DWORD *)v1557)
              goto LABEL_1445;
          }
          else
          {
            v1563 = 0;
            v1564 = (_DWORD *)(4 * v1560);
            *(_DWORD *)(4 * v1560) = v1558;
            v1554 = (_DWORD *)(4 * v1560 + 4);
            v1565 = (char *)v1556 - v1557;
            if (v1556 == (_DWORD *)v1557)
              goto LABEL_1445;
          }
          v1566 = v1565 - 4;
          if (v1566 < 0xBC)
          {
            v1567 = v1556;
            goto LABEL_1444;
          }
          v1570 = ((char *)(v1556 - 1) - v1557) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v1563[(char *)v1556 - v1557 - 4 - v1570] > &v1563[(char *)v1556 - v1557 - 4])
          {
            v1567 = v1556;
            do
            {
LABEL_1444:
              v1568 = *--v1567;
              *--v1564 = v1568;
            }
            while (v1567 != (_DWORD *)v1557);
            goto LABEL_1445;
          }
          if ((_DWORD *)((char *)v1556 - v1570 - 4) > v1556 - 1)
          {
            v1567 = v1556;
            goto LABEL_1444;
          }
          if ((unint64_t)(v1557 - v1563) < 0x20)
          {
            v1567 = v1556;
            goto LABEL_1444;
          }
          v1571 = (v1566 >> 2) + 1;
          v1572 = 4 * (v1571 & 0x7FFFFFFFFFFFFFF8);
          v1567 = &v1556[v1572 / 0xFFFFFFFFFFFFFFFCLL];
          v1564 = (_DWORD *)((char *)v1564 - v1572);
          v1573 = &v1563[4 * v1560 - 16];
          v1574 = (__int128 *)(v1556 - 4);
          v1575 = v1571 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v1576 = *v1574;
            *(v1573 - 1) = *(v1574 - 1);
            *v1573 = v1576;
            v1573 -= 2;
            v1574 -= 2;
            v1575 -= 8;
          }
          while (v1575);
          if (v1571 != (v1571 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_1444;
LABEL_1445:
          v1553 = (unint64_t)&v1563[4 * v1562];
          *(_QWORD *)v2182 = v1564;
          *(_QWORD *)&v2182[16] = v1553;
          if (v1557)
            operator delete(v1557);
          v1556 = v1554;
          v1557 = v1564;
          v1559 = (_QWORD *)v1555[1];
          if (v1559)
          {
            do
            {
LABEL_1448:
              v1569 = v1559;
              v1559 = (_QWORD *)*v1559;
            }
            while (v1559);
            goto LABEL_1425;
          }
          do
          {
LABEL_1450:
            v1569 = (_QWORD *)v1555[2];
            _ZF = *v1569 == (_QWORD)v1555;
            v1555 = v1569;
          }
          while (!_ZF);
LABEL_1425:
          v1552 = *(_QWORD **)(v2067 + 8);
          v1555 = v1569;
          if (v1569 == v1552 + 38)
          {
            *(_QWORD *)&v2182[8] = v1554;
            v1504 = v2060;
            v1503 = __szg;
            memset(object, 0, 48);
            if (v2039 == v2033)
              goto LABEL_1476;
LABEL_1578:
            v1584 = v2067;
            if (v1503 >= 0x7FFFFFFFFFFFFFF9)
              sub_20E867F44();
            v1719 = 2 * v1503;
            v1583 = (double *)operator new(v1719);
            *(_QWORD *)object = v1583;
            *(_QWORD *)&object[8] = v1583;
            v2061 = &v1583[2 * v1504];
            *(_QWORD *)&object[16] = v2061;
            v1582 = (double *)operator new(v1719);
            *(_QWORD *)&object[24] = v1582;
            *(_QWORD *)&object[32] = v1582;
            v2006 = (char *)&v1582[2 * v1504];
            *(_QWORD *)&object[40] = v2006;
            goto LABEL_1580;
          }
        }
      }
    }
    memset(object, 0, 48);
    if (v1501 != v1502)
      goto LABEL_1578;
LABEL_1476:
    v2006 = 0;
    v2061 = 0;
    v1582 = 0;
    v1583 = 0;
    v1584 = v2067;
LABEL_1580:
    v2149[0] = operator new(0x10uLL);
    v2149[1] = v2149[0];
    *(_QWORD *)v2150 = (char *)v2149[0] + 16;
    v1724 = *(uint64_t **)(v1584 + 24);
    __dst = *(uint64_t **)(v1584 + 32);
    if (v1724 == __dst)
    {
      v1725 = 0;
      v2017 = 0;
      v1801 = (uint64_t)v1582;
      v1727 = v1582;
      v1726 = v1583;
      v1802 = 0;
      goto LABEL_1730;
    }
    v1725 = 0;
    v2017 = 0;
    v2020 = (uint64_t *)v1552[6];
    v1726 = v1583;
    v1727 = v1582;
    while (1)
    {
      v1729 = *(_QWORD *)(*v1724 + 536);
      v1730 = *(unsigned __int16 *)(v1729 + 18);
      v1731 = (unint64_t)(*(_QWORD *)(*v1724 + 544) - v1729) >> 6;
      if (!(_DWORD)v1731)
      {
        v1756 = -1000.0;
        v1757 = *(_DWORD *)(*v1724 + 32);
        if (!v2027)
          goto LABEL_1678;
        goto LABEL_1674;
      }
      v2041 = v1725;
      v2149[1] = v2149[0];
      v1732 = *v1724;
      v1733 = *(uint64_t **)(*v1724 + 536);
      v1734 = *(uint64_t **)(*v1724 + 544);
      if (v1733 != v1734)
        break;
      v1735 = *(_QWORD *)(v2067 + 8);
      v1736 = (uint64_t *)(v1735 + 56);
      v1737 = *(uint64_t **)(v1735 + 56);
      v1738 = v2020;
      if (!v1737)
        goto LABEL_1615;
LABEL_1604:
      v1746 = *v1733;
      v1747 = *((_DWORD *)v1733 + 2);
      v1748 = v1736;
      do
      {
        v1749 = v1737[4];
        if (v1749 < v1746)
        {
          ++v1737;
        }
        else if (v1749 == v1746)
        {
          if (*((_DWORD *)v1737 + 10) < v1747)
            ++v1737;
          else
            v1748 = v1737;
        }
        else
        {
          v1748 = v1737;
        }
        v1737 = (uint64_t *)*v1737;
      }
      while (v1737);
      if (v1748 == v1736 || (v1750 = v1748[4], v1746 < v1750) || v1746 == v1750 && *((_DWORD *)v1748 + 10) > v1747)
LABEL_1615:
        v1748 = v1736;
      v2035 = v1730;
      v1751 = v1582;
      if (v1738 == v1748)
      {
        v1752 = 0;
      }
      else
      {
        v1752 = 0;
        v1753 = v1738;
        do
        {
          v1754 = (uint64_t *)v1753[1];
          if (v1754)
          {
            do
            {
              v1755 = v1754;
              v1754 = (uint64_t *)*v1754;
            }
            while (v1754);
          }
          else
          {
            do
            {
              v1755 = (uint64_t *)v1753[2];
              _ZF = *v1755 == (_QWORD)v1753;
              v1753 = v1755;
            }
            while (!_ZF);
          }
          ++v1752;
          v1753 = v1755;
        }
        while (v1755 != v1748);
      }
      __szi = 0.0;
      if (v1549 == 0.0)
      {
        v1758 = 0.0;
LABEL_1646:
        v1725 = v2041;
        if (v1550 == 0.0)
          goto LABEL_1673;
LABEL_1668:
        v1776 = *(_QWORD *)(v1732 + 536);
        v1777 = *(_QWORD *)(v1732 + 544);
        while (v1777 != v1776)
        {
          v1778 = v1777 - 64;
          v1779 = *(_DWORD *)(v1777 - 48);
          v1777 -= 64;
          if (v1779 == *(_DWORD *)(v1776 + 16))
          {
            v1776 = v1778 + 64;
            break;
          }
        }
        _Q1 = *(_OWORD *)(v1776 - 24);
        _D2 = *(_QWORD *)(v1776 - 16);
        __asm { FMLA            D3, D2, V1.D[1] }
        __szi = *(double *)&_D3;
        goto LABEL_1673;
      }
      v1758 = 15.0;
      if (*(_QWORD *)(v1732 + 544) - (_QWORD)v1733 < 0x80uLL)
        goto LABEL_1646;
      v1759 = *((_DWORD *)v1733 + 4);
      v1760 = *(_QWORD *)(v1735 + 1768);
      if (!v1760)
        goto LABEL_1641;
      v1761 = v1735 + 1768;
      v1762 = v1735 + 1768;
      do
      {
        v1763 = *(_DWORD *)(v1760 + 32);
        v1764 = v1763 >= v1759;
        if (v1763 >= v1759)
          v1765 = (uint64_t *)v1760;
        else
          v1765 = (uint64_t *)(v1760 + 8);
        if (v1764)
          v1762 = v1760;
        v1760 = *v1765;
      }
      while (*v1765);
      if (v1762 != v1761 && *(_DWORD *)(v1762 + 32) <= v1759)
      {
        v1766 = *(_QWORD *)(v1762 + 40);
        v1767 = *(_DWORD *)(v1766 + 992);
        if (v1767 != -1)
        {
LABEL_1642:
          if (v1767 <= 7)
            goto LABEL_1643;
          goto LABEL_1654;
        }
      }
      else
      {
LABEL_1641:
        v1766 = 0;
        v1767 = MEMORY[0x3E0];
        if (MEMORY[0x3E0] != -1)
          goto LABEL_1642;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_1887;
      }
      v1767 = *(_DWORD *)(v1766 + 992);
      if (v1767 <= 7)
      {
LABEL_1643:
        if (!v1767)
        {
LABEL_1882:
          *(_QWORD *)&object[32] = v1727;
          *(_QWORD *)&object[16] = v2061;
          *(_QWORD *)&object[8] = v1583;
          *(_QWORD *)object = v1726;
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          goto LABEL_1888;
        }
LABEL_1655:
        v2014 = *(double *)(v1766 + 16);
        goto LABEL_1656;
      }
LABEL_1654:
      if (v1767 < 0xF)
        goto LABEL_1655;
      v2014 = *(double *)(v1766 + 16);
      if (v1767 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_1887:
          *(_QWORD *)&object[32] = v1727;
          *(_QWORD *)&object[16] = v2061;
          *(_QWORD *)&object[8] = v1583;
          *(_QWORD *)object = v1726;
LABEL_1888:
          abort();
        }
        if (!*(_DWORD *)(v1766 + 992))
          goto LABEL_1882;
      }
LABEL_1656:
      v1768 = *(float32x2_t **)(v1732 + 536);
      v1769 = *(float32x2_t **)(v1732 + 544);
      if (v1768 == v1769)
      {
        LODWORD(v1721) = 0;
        v1771 = 0;
      }
      else
      {
        v1770 = 0;
        v1771 = 0;
        v1772 = 1.0;
        LODWORD(v1721) = 0;
        do
        {
          while (v1768[2].i32[0] != v1759)
          {
            _D3 = v1723;
            v1768 += 8;
            if (v1768 == v1769)
              goto LABEL_1665;
          }
          _D3 = v1768[4];
          if ((v1770 & 1) != 0)
          {
            v1771 = vadd_f32(v1771, vmul_n_f32(vsub_f32(_D3, v1723), v1772));
            *(float *)&v1721 = *(float *)&v1721 + v1772;
            v1772 = v1772 * 1.2;
          }
          v1770 = 1;
          v1768 += 8;
          v1723 = _D3;
        }
        while (v1768 != v1769);
      }
LABEL_1665:
      v1773.f64[0] = v2014;
      v1773.f64[1] = *(float64_t *)(v1766 + 40);
      *(float32x2_t *)&v1773.f64[0] = vcvt_f32_f64(v1773);
      v1774 = vdiv_f32(v1771, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v1721, 0));
      v1775 = vdiv_f32(vsub_f32((float32x2_t)vand_s8((int8x8_t)vadd_f32(*(float32x2_t *)&v1773.f64[0], *(float32x2_t *)&v1773.f64[0]), (int8x8_t)vcgtz_f32(v1774)), _D3), v1774);
      if (v1775.f32[1] < v1775.f32[0])
        v1775.f32[0] = v1775.f32[1];
      v1758 = fminf(fmaxf(v1775.f32[0], 0.0), 15.0);
      v1732 = *v1724;
      v1725 = v2041;
      if (v1550 != 0.0)
        goto LABEL_1668;
LABEL_1673:
      *(double *)&v1720 = v1549 * v1758
                        + v1548 * (double)v1752
                        + v1547 * (double)v1731
                        + v1546 * (double)(unint64_t)((((char *)v2149[1] - (char *)v2149[0]) >> 2) - 1);
      v1721 = v1550 * __szi;
      v1756 = v1550 * __szi + *(double *)&v1720;
      v1582 = v1751;
      v1730 = v2035;
      v1757 = *(_DWORD *)(v1732 + 32);
      if (!v2027)
        goto LABEL_1678;
LABEL_1674:
      v1782 = *(__int32 **)&v2182[8];
      v1783 = wmemchr(*(__int32 **)v2182, v1730, (uint64_t)(*(_QWORD *)&v2182[8] - *(_QWORD *)v2182) >> 2);
      if (v1783)
        v1784 = v1783;
      else
        v1784 = v1782;
      if (v1784 != v1782 || *(_QWORD *)v2182 == *(_QWORD *)&v2182[8])
      {
LABEL_1678:
        if (v1583 >= v2061)
        {
          v1785 = ((char *)v1583 - (char *)v1726) >> 4;
          v1786 = v1785 + 1;
          if ((unint64_t)(v1785 + 1) >> 60)
            goto LABEL_1872;
          if (v2061 - v1726 > v1786)
            v1786 = v2061 - v1726;
          if ((unint64_t)((char *)v2061 - (char *)v1726) >= 0x7FFFFFFFFFFFFFF0)
            v1787 = 0xFFFFFFFFFFFFFFFLL;
          else
            v1787 = v1786;
          if (v1787)
          {
            if (v1787 >> 60)
              goto LABEL_1874;
            v1788 = (char *)operator new(16 * v1787);
            v1789 = (uint64_t)&v1788[16 * v1785];
            *(double *)v1789 = v1756;
            *(_DWORD *)(v1789 + 8) = v1757;
            if (v1583 != v1726)
            {
LABEL_1688:
              v1790 = v1789;
              do
              {
                v1791 = (double *)(v1790 - 16);
                v1720 = *((_OWORD *)v1583 - 1);
                *(_OWORD *)(v1790 - 16) = v1720;
                v1583 -= 2;
                v1790 -= 16;
              }
              while (v1583 != v1726);
              v2061 = (double *)&v1788[16 * v1787];
              v1583 = (double *)(v1789 + 16);
              if (!v1726)
                goto LABEL_1692;
LABEL_1691:
              operator delete(v1726);
LABEL_1692:
              v1726 = v1791;
              goto LABEL_1583;
            }
          }
          else
          {
            v1788 = 0;
            v1789 = 16 * v1785;
            *(double *)v1789 = v1756;
            *(_DWORD *)(v1789 + 8) = v1757;
            if (v1583 != v1726)
              goto LABEL_1688;
          }
          v1791 = (double *)v1789;
          v2061 = (double *)&v1788[16 * v1787];
          v1583 = (double *)(v1789 + 16);
          if (!v1726)
            goto LABEL_1692;
          goto LABEL_1691;
        }
        *v1583 = v1756;
        *((_DWORD *)v1583 + 2) = v1757;
        v1583 += 2;
LABEL_1583:
        v1728 = *v1724++;
        if (*(_DWORD *)(v1728 + 560) == 2)
          ++v1725;
        if (v1724 == __dst)
        {
LABEL_1724:
          v1801 = (uint64_t)v1582;
          *(_QWORD *)&object[32] = v1727;
          *(_QWORD *)&object[16] = v2061;
          *(_QWORD *)&object[8] = v1583;
          *(_QWORD *)object = v1726;
          v1802 = ((char *)v1583 - (char *)v1726) >> 4;
          if ((char *)v1583 - (char *)v1726 >= 1)
          {
            v1803 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
            v1804 = ((char *)v1583 - (char *)v1726) >> 4;
            while (1)
            {
              v1805 = (double *)operator new(16 * v1804, v1803);
              if (v1805)
                break;
              v1505 = v1804 > 1;
              v1804 >>= 1;
              if (!v1505)
                goto LABEL_1730;
            }
            v1809 = v1805;
            sub_20F625E6C((uint64_t)v1726, v1583, ((char *)v1583 - (char *)v1726) >> 4, v1805, v1804, *(double *)&v1720);
            operator delete(v1809);
            v1807 = ((uint64_t)v1727 - v1801) >> 4;
            v1808 = v2002;
            if ((uint64_t)v1727 - v1801 < 1)
            {
LABEL_1736:
              sub_20F625E6C(v1801, v1727, v1807, 0, 0, v1806);
              v1813 = v2149[0];
              v1814 = v2017;
              if (!v2149[0])
              {
LABEL_1738:
                if (*(_QWORD *)v2182)
                {
                  *(_QWORD *)&v2182[8] = *(_QWORD *)v2182;
                  operator delete(*(void **)v2182);
                }
                v1815 = *(_QWORD *)&object[8];
                v1816 = *(_QWORD *)object;
                v1817 = ((*(_QWORD *)&object[8] - *(_QWORD *)object) >> 4) - v1725;
                v1818 = *(unsigned int **)&object[24];
                v1819 = (*(_QWORD *)&object[32] - *(_QWORD *)&object[24]) >> 4;
                v1820 = v1819 - v1814;
                v1821 = v1819 - v1814 + v1817;
                v1822 = v2022 - (v1725 + v1814);
                v1823 = v1821 - v1822;
                if (v1821 > v1822)
                {
                  if ((_DWORD)v1819 == v1814)
                  {
                    v1824 = 0;
                  }
                  else if (v1820 < v1808 || v1823 > v1821 - v1808)
                  {
                    if (v1820 >= v1822)
                      v1824 = v1820 - v1822;
                    else
                      v1824 = 0;
                    v1823 -= v1824;
                  }
                  else
                  {
                    _CF = v1817 >= v1822 - v1808;
                    v1826 = v1817 - (v1822 - v1808);
                    if (!_CF)
                      v1826 = 0;
                    v1824 = v1823 - v1826;
                    v1823 = v1826;
                  }
                  v1827 = (_DWORD *)(v2067 + 6584);
                  if (*(_QWORD *)object != *(_QWORD *)&object[8] && v1823)
                  {
                    do
                    {
                      v1828 = *(unsigned int *)(v1816 + 8);
                      v1829 = *(char **)(v2067 + 5512);
                      v1830 = *(char **)(v2067 + 5520);
                      if (v1830 != v1829)
                      {
                        v1831 = (v1830 - v1829) >> 4;
                        do
                        {
                          v1832 = v1831 >> 1;
                          v1833 = (unsigned int *)&v1829[16 * (v1831 >> 1)];
                          v1835 = *v1833;
                          v1834 = (char *)(v1833 + 4);
                          v1831 += ~(v1831 >> 1);
                          if (v1835 < v1828)
                            v1829 = v1834;
                          else
                            v1831 = v1832;
                        }
                        while (v1831);
                      }
                      if (v1829 == v1830 || *(_DWORD *)v1829 != (_DWORD)v1828)
                        v1829 = *(char **)(v2067 + 5520);
                      v1836 = *(int8x8_t *)(v2067 + 3112);
                      if (v1836)
                      {
                        v1837 = (uint8x8_t)vcnt_s8(v1836);
                        v1837.i16[0] = vaddlv_u8(v1837);
                        if (v1837.u32[0] > 1uLL)
                        {
                          v1838 = *(unsigned int *)(v1816 + 8);
                          if (*(_QWORD *)&v1836 <= v1828)
                            v1838 = v1828 % *(_QWORD *)&v1836;
                        }
                        else
                        {
                          v1838 = (v1836.i32[0] - 1) & v1828;
                        }
                        v1839 = *(uint64_t ***)(*(_QWORD *)(v2067 + 3104) + 8 * v1838);
                        if (v1839)
                        {
                          v1840 = *v1839;
                          if (v1840)
                          {
                            if (v1837.u32[0] < 2uLL)
                            {
                              v1841 = *(_QWORD *)&v1836 - 1;
                              while (1)
                              {
                                v1843 = v1840[1];
                                if (v1843 == v1828)
                                {
                                  if (*((_DWORD *)v1840 + 4) == (_DWORD)v1828)
                                    goto LABEL_1759;
                                }
                                else if ((v1843 & v1841) != v1838)
                                {
                                  goto LABEL_1789;
                                }
                                v1840 = (uint64_t *)*v1840;
                                if (!v1840)
                                  goto LABEL_1789;
                              }
                            }
                            do
                            {
                              v1842 = v1840[1];
                              if (v1842 == v1828)
                              {
                                if (*((_DWORD *)v1840 + 4) == (_DWORD)v1828)
                                  goto LABEL_1759;
                              }
                              else
                              {
                                if (v1842 >= *(_QWORD *)&v1836)
                                  v1842 %= *(_QWORD *)&v1836;
                                if (v1842 != v1838)
                                  break;
                              }
                              v1840 = (uint64_t *)*v1840;
                            }
                            while (v1840);
                          }
                        }
                      }
LABEL_1789:
                      if (v1829 != v1830)
                      {
                        if (sub_20F623A0C((uint64_t)v2004, v1828))
                        {
                          *(_WORD *)(v2067 + 6588) = 0;
                          *v1827 = 0;
                        }
                        else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2336, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
                        {
LABEL_1880:
                          abort();
                        }
                        v1844 = *(_QWORD *)(v2067 + 24);
                        v1845 = *(_QWORD *)(v2067 + 32);
                        if (v1844 != v1845)
                        {
                          while (*(_DWORD *)(v1816 + 8) != *(_DWORD *)(*(_QWORD *)v1844 + 32))
                          {
                            v1844 += 8;
                            if (v1844 == v1845)
                              goto LABEL_1796;
                          }
                        }
                        if (v1844 == v1845)
                        {
LABEL_1796:
                          v1846 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2343, (uint64_t)"track_iter != viobadata_ref_.front_end_tracks.end()", 51, (uint64_t)"Failed to find the track in the the front-end tracks.", 53, (void (*)(void **))sub_21023DDB0);
                          v1844 = v1845;
                          if (v1846)
LABEL_1842:
                            abort();
                        }
                        *(_DWORD *)(*(_QWORD *)v1844 + 560) = 0;
                        if (!--v1823)
                          break;
                      }
LABEL_1759:
                      v1816 += 16;
                    }
                    while (v1816 != v1815);
                    v1818 = *(unsigned int **)&object[24];
                  }
                  if (v1824)
                  {
                    v1847 = *(unsigned int **)&object[32];
                    if (v1818 != *(unsigned int **)&object[32])
                    {
                      do
                      {
                        v1848 = v1818[2];
                        v1849 = *(char **)(v2067 + 5512);
                        v1850 = *(char **)(v2067 + 5520);
                        if (v1850 != v1849)
                        {
                          v1851 = (v1850 - v1849) >> 4;
                          do
                          {
                            v1852 = v1851 >> 1;
                            v1853 = (unsigned int *)&v1849[16 * (v1851 >> 1)];
                            v1855 = *v1853;
                            v1854 = (char *)(v1853 + 4);
                            v1851 += ~(v1851 >> 1);
                            if (v1855 < v1848)
                              v1849 = v1854;
                            else
                              v1851 = v1852;
                          }
                          while (v1851);
                        }
                        if (v1849 == v1850 || *(_DWORD *)v1849 != (_DWORD)v1848)
                          v1849 = *(char **)(v2067 + 5520);
                        v1856 = *(int8x8_t *)(v2067 + 3112);
                        if (v1856)
                        {
                          v1857 = (uint8x8_t)vcnt_s8(v1856);
                          v1857.i16[0] = vaddlv_u8(v1857);
                          if (v1857.u32[0] >= 2uLL)
                          {
                            v1858 = v1818[2];
                            if (*(_QWORD *)&v1856 <= v1848)
                              v1858 = v1848 % *(_QWORD *)&v1856;
                          }
                          else
                          {
                            v1858 = (v1856.i32[0] - 1) & v1848;
                          }
                          v1859 = *(uint64_t ***)(*(_QWORD *)(v2067 + 3104) + 8 * v1858);
                          if (v1859)
                          {
                            v1860 = *v1859;
                            if (v1860)
                            {
                              if (v1857.u32[0] < 2uLL)
                              {
                                v1861 = *(_QWORD *)&v1856 - 1;
                                while (1)
                                {
                                  v1863 = v1860[1];
                                  if (v1863 == v1848)
                                  {
                                    if (*((_DWORD *)v1860 + 4) == (_DWORD)v1848)
                                      goto LABEL_1804;
                                  }
                                  else if ((v1863 & v1861) != v1858)
                                  {
                                    goto LABEL_1834;
                                  }
                                  v1860 = (uint64_t *)*v1860;
                                  if (!v1860)
                                    goto LABEL_1834;
                                }
                              }
                              do
                              {
                                v1862 = v1860[1];
                                if (v1862 == v1848)
                                {
                                  if (*((_DWORD *)v1860 + 4) == (_DWORD)v1848)
                                    goto LABEL_1804;
                                }
                                else
                                {
                                  if (v1862 >= *(_QWORD *)&v1856)
                                    v1862 %= *(_QWORD *)&v1856;
                                  if (v1862 != v1858)
                                    break;
                                }
                                v1860 = (uint64_t *)*v1860;
                              }
                              while (v1860);
                            }
                          }
                        }
LABEL_1834:
                        if (v1849 != v1850)
                        {
                          if ((sub_20F623A0C((uint64_t)v2004, v1848) & 1) != 0)
                          {
                            *(_WORD *)(v2067 + 6588) = 0;
                            *v1827 = 0;
                          }
                          else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2336, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
                          {
                            goto LABEL_1880;
                          }
                          v1864 = *(_QWORD *)(v2067 + 24);
                          v1865 = *(_QWORD *)(v2067 + 32);
                          if (v1864 != v1865)
                          {
                            while (v1818[2] != *(_DWORD *)(*(_QWORD *)v1864 + 32))
                            {
                              v1864 += 8;
                              if (v1864 == v1865)
                                goto LABEL_1841;
                            }
                          }
                          if (v1864 == v1865)
                          {
LABEL_1841:
                            v1866 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2343, (uint64_t)"track_iter != viobadata_ref_.front_end_tracks.end()", 51, (uint64_t)"Failed to find the track in the the front-end tracks.", 53, (void (*)(void **))sub_21023DDB0);
                            v1864 = v1865;
                            if (v1866)
                              goto LABEL_1842;
                          }
                          *(_DWORD *)(*(_QWORD *)v1864 + 560) = 0;
                          if (!--v1824)
                            break;
                        }
LABEL_1804:
                        v1818 += 4;
                      }
                      while (v1818 != v1847);
                      v1818 = *(unsigned int **)&object[24];
                    }
                  }
                }
                v1500 = (uint64_t *)v2067;
                if (v1818)
                {
                  *(_QWORD *)&object[32] = v1818;
                  operator delete(v1818);
                }
                if (*(_QWORD *)object)
                {
                  *(_QWORD *)&object[8] = *(_QWORD *)object;
                  operator delete(*(void **)object);
                }
                goto LABEL_1361;
              }
LABEL_1737:
              v2149[1] = v1813;
              operator delete(v1813);
              goto LABEL_1738;
            }
LABEL_1733:
            v1810 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
            v1811 = v1807;
            while (1)
            {
              v1812 = (double *)operator new(16 * v1811, v1810);
              if (v1812)
                break;
              v1505 = v1811 > 1;
              v1811 >>= 1;
              if (!v1505)
                goto LABEL_1736;
            }
            v1825 = v1812;
            sub_20F625E6C(v1801, v1727, v1807, v1812, v1811, v1806);
            operator delete(v1825);
            v1813 = v2149[0];
            v1814 = v2017;
            if (!v2149[0])
              goto LABEL_1738;
            goto LABEL_1737;
          }
LABEL_1730:
          v1806 = sub_20F625E6C((uint64_t)v1726, v1583, v1802, 0, 0, *(double *)&v1720);
          v1807 = ((uint64_t)v1727 - v1801) >> 4;
          v1808 = v2002;
          if ((uint64_t)v1727 - v1801 < 1)
            goto LABEL_1736;
          goto LABEL_1733;
        }
      }
      else
      {
        if (v1727 >= (double *)v2006)
        {
          v1792 = ((char *)v1727 - (char *)v1582) >> 4;
          v1793 = v1792 + 1;
          if (!((unint64_t)(v1792 + 1) >> 60))
          {
            if ((v2006 - (char *)v1582) >> 3 > v1793)
              v1793 = (v2006 - (char *)v1582) >> 3;
            if ((unint64_t)(v2006 - (char *)v1582) >= 0x7FFFFFFFFFFFFFF0)
              v1794 = 0xFFFFFFFFFFFFFFFLL;
            else
              v1794 = v1793;
            if (!v1794)
            {
              v1795 = 0;
              v1796 = 16 * v1792;
              *(double *)v1796 = v1756;
              *(_DWORD *)(v1796 + 8) = v1757;
              if (v1727 != v1582)
                goto LABEL_1708;
              goto LABEL_1722;
            }
            if (!(v1794 >> 60))
            {
              v1795 = (char *)operator new(16 * v1794);
              v1796 = (uint64_t)&v1795[16 * v1792];
              *(double *)v1796 = v1756;
              *(_DWORD *)(v1796 + 8) = v1757;
              if (v1727 != v1582)
              {
LABEL_1708:
                v1797 = v1796;
                do
                {
                  v1798 = (double *)(v1797 - 16);
                  v1720 = *((_OWORD *)v1727 - 1);
                  *(_OWORD *)(v1797 - 16) = v1720;
                  v1727 -= 2;
                  v1797 -= 16;
                }
                while (v1727 != v1582);
                v1727 = (double *)(v1796 + 16);
                *(_QWORD *)&object[24] = v1798;
                v2006 = &v1795[16 * v1794];
                *(_QWORD *)&object[40] = v2006;
                if (!v1582)
                  goto LABEL_1712;
LABEL_1711:
                operator delete(v1582);
LABEL_1712:
                v1582 = v1798;
                goto LABEL_1713;
              }
LABEL_1722:
              v1798 = (double *)v1796;
              v1727 = (double *)(v1796 + 16);
              *(_QWORD *)&object[24] = v1796;
              v2006 = &v1795[16 * v1794];
              *(_QWORD *)&object[40] = v2006;
              if (!v1582)
                goto LABEL_1712;
              goto LABEL_1711;
            }
LABEL_1874:
            *(_QWORD *)&object[32] = v1727;
            *(_QWORD *)&object[16] = v2061;
            *(_QWORD *)&object[8] = v1583;
            *(_QWORD *)object = v1726;
            sub_20E877A38();
          }
LABEL_1872:
          *(_QWORD *)&object[32] = v1727;
          *(_QWORD *)&object[16] = v2061;
          *(_QWORD *)&object[8] = v1583;
          *(_QWORD *)object = v1726;
          sub_20E867F44();
        }
        *v1727 = v1756;
        *((_DWORD *)v1727 + 2) = v1757;
        v1727 += 2;
LABEL_1713:
        v1799 = *v1724++;
        v1800 = v2017;
        if (*(_DWORD *)(v1799 + 560) == 2)
          v1800 = v2017 + 1;
        v2017 = v1800;
        if (v1724 == __dst)
          goto LABEL_1724;
      }
    }
    while (1)
    {
      v1739 = *((_DWORD *)v1733 + 4);
      v1740 = v2149[0];
      if (v2149[1] == v2149[0])
      {
        v1740 = v2149[1];
      }
      else
      {
        v1741 = ((char *)v2149[1] - (char *)v2149[0]) >> 2;
        do
        {
          v1742 = v1741 >> 1;
          v1743 = &v1740[v1741 >> 1];
          v1745 = *v1743;
          v1744 = v1743 + 1;
          v1741 += ~(v1741 >> 1);
          if (v1745 < v1739)
            v1740 = v1744;
          else
            v1741 = v1742;
        }
        while (v1741);
        if (v2149[1] != v1740 && *v1740 == v1739)
          goto LABEL_1591;
      }
      sub_20EDB3C7C(v2149, v1740, (char *)v1733 + 16);
LABEL_1591:
      v1733 += 8;
      if (v1733 == v1734)
      {
        v1732 = *v1724;
        v1733 = *(uint64_t **)(*v1724 + 536);
        v1735 = *(_QWORD *)(v2067 + 8);
        v1736 = (uint64_t *)(v1735 + 56);
        v1737 = *(uint64_t **)(v1735 + 56);
        v1738 = v2020;
        if (v1737)
          goto LABEL_1604;
        goto LABEL_1615;
      }
    }
  }
LABEL_1361:
  v1506 = v1500[6];
  v1507 = v1500[7];
  if (v1506 != v1507)
  {
    v1508 = (_DWORD *)(v2067 + 6584);
    do
    {
      if (0x86BCA1AF286BCA1BLL
         * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v1506 + 984) - *(_QWORD *)(*(_QWORD *)v1506 + 976)) >> 3) < v2066)
      {
        v1509 = *(_DWORD *)(*(_QWORD *)v1506 + 32);
        v1510 = *(char **)(v2067 + 5512);
        v1511 = *(char **)(v2067 + 5520);
        if (v1511 != v1510)
        {
          v1512 = (v1511 - v1510) >> 4;
          do
          {
            v1513 = v1512 >> 1;
            v1514 = (unsigned int *)&v1510[16 * (v1512 >> 1)];
            v1516 = *v1514;
            v1515 = (char *)(v1514 + 4);
            v1512 += ~(v1512 >> 1);
            if (v1516 < v1509)
              v1510 = v1515;
            else
              v1512 = v1513;
          }
          while (v1512);
        }
        if (v1510 != v1511 && *(_DWORD *)v1510 == v1509)
        {
          v1517 = sub_20F623A0C((uint64_t)v2004, v1509);
          v1518 = v1517;
          if (v1517)
          {
            *(_WORD *)(v2067 + 6588) = 0;
            *v1508 = 0;
          }
          if (!sub_20F623A0C((uint64_t)v2004, *(_DWORD *)(*(_QWORD *)v1506 + 32) + 1)
            || (*(_WORD *)(v2067 + 6588) = 0, *v1508 = 0, (v1518 & 1) == 0))
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2413, (uint64_t)"ret", 3, (uint64_t)"Failed to remove end point variables.", 37, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
          }
        }
      }
      v1506 += 8;
    }
    while (v1506 != v1507);
  }
  v1519 = *(_QWORD **)(v2067 + 16);
  if (v1519)
  {
    v1522 = (_QWORD *)*v1519;
    v1520 = v1519 + 1;
    v1521 = v1522;
    if (v1522 != v1520)
    {
      do
      {
        v1523 = v1521[6];
        v1524 = (std::__shared_weak_count *)v1521[7];
        *(_QWORD *)object = v1523;
        *(_QWORD *)&object[8] = v1524;
        if (v1524)
        {
          v1525 = (unint64_t *)&v1524->__shared_owners_;
          do
            v1526 = __ldxr(v1525);
          while (__stxr(v1526 + 1, v1525));
        }
        if (v2066 > (uint64_t)(*(_QWORD *)(v1523 + 544) - *(_QWORD *)(v1523 + 536)) >> 5)
        {
          v1527 = *(_DWORD *)(v1523 + 32);
          v1528 = *(char **)(v2067 + 5512);
          v1529 = *(char **)(v2067 + 5520);
          if (v1529 != v1528)
          {
            v1530 = (v1529 - v1528) >> 4;
            do
            {
              v1531 = v1530 >> 1;
              v1532 = (unsigned int *)&v1528[16 * (v1530 >> 1)];
              v1534 = *v1532;
              v1533 = (char *)(v1532 + 4);
              v1530 += ~(v1530 >> 1);
              if (v1534 < v1527)
                v1528 = v1533;
              else
                v1530 = v1531;
            }
            while (v1530);
          }
          if (v1528 != v1529 && *(_DWORD *)v1528 == v1527 && (*(_BYTE *)(*((_QWORD *)v1528 + 1) + 4) & 2) == 0)
          {
            if (sub_20F623A0C((uint64_t)v2004, v1527))
            {
              *(_WORD *)(v2067 + 6588) = 0;
              *(_DWORD *)(v2067 + 6584) = 0;
            }
            else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 179, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a landmark variable.", 37, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
          }
        }
        if (!v1524)
          goto LABEL_1403;
        v1535 = (unint64_t *)&v1524->__shared_owners_;
        do
          v1536 = __ldaxr(v1535);
        while (__stlxr(v1536 - 1, v1535));
        if (!v1536)
        {
          ((void (*)(std::__shared_weak_count *))v1524->__on_zero_shared)(v1524);
          std::__shared_weak_count::__release_weak(v1524);
          v1537 = (_QWORD *)v1521[1];
          if (!v1537)
          {
            do
            {
LABEL_1407:
              v1538 = (_QWORD *)v1521[2];
              _ZF = *v1538 == (_QWORD)v1521;
              v1521 = v1538;
            }
            while (!_ZF);
            goto LABEL_1382;
          }
        }
        else
        {
LABEL_1403:
          v1537 = (_QWORD *)v1521[1];
          if (!v1537)
            goto LABEL_1407;
        }
        do
        {
          v1538 = v1537;
          v1537 = (_QWORD *)*v1537;
        }
        while (v1537);
LABEL_1382:
        v1521 = v1538;
      }
      while (v1538 != v1520);
    }
  }
  sub_20F5BB4F0((uint64_t)v2004);
  return kdebug_trace();
}

void sub_20F4AC584(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x2278]))
  {
    if (SLOBYTE(STACK[0x2277]) < 0)
      operator delete((void *)STACK[0x2260]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x41B0]);
  _Unwind_Resume(a1);
}

void sub_20F4AC668()
{
  JUMPOUT(0x20F4AC708);
}

void sub_20F4AC670()
{
  sub_20E86E8C4((uint64_t *)&STACK[0x2260]);
  sub_20E86E8C4((uint64_t *)&STACK[0x1B50]);
  sub_20E86E658((uint64_t)&STACK[0x6100]);
  JUMPOUT(0x20F4AC708);
}

void sub_20F4AC6A4()
{
  uint64_t v0;

  MEMORY[0x212BC6398](v0, 0x10D0C40B950D02ALL);
  JUMPOUT(0x20F4AC708);
}

void sub_20F4AC6C4()
{
  JUMPOUT(0x20F4AC708);
}

void sub_20F4AC6D0()
{
  JUMPOUT(0x20F4AC6E0);
}

void sub_20F4AC7BC(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0xD20]);
  _Unwind_Resume(a1);
}

void sub_20F4AC7D0(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0xD10]);
  sub_20E86665C((uint64_t)&STACK[0xD20]);
  _Unwind_Resume(a1);
}

void sub_20F4AC7EC(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0xF30]);
  _Unwind_Resume(a1);
}

void sub_20F4AC800(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0xF30]);
  _Unwind_Resume(a1);
}

void sub_20F4AC814()
{
  JUMPOUT(0x20F4ACC84);
}

void sub_20F4AC81C()
{
  JUMPOUT(0x20F4ACC90);
}

void sub_20F4AC824(_Unwind_Exception *a1)
{
  sub_20E9AA8C8((uint64_t)&STACK[0x6100]);
  _Unwind_Resume(a1);
}

void sub_20F4AC83C(_Unwind_Exception *a1)
{
  sub_20E9AA8C8((uint64_t)&STACK[0x6100]);
  _Unwind_Resume(a1);
}

void sub_20F4AC858()
{
  JUMPOUT(0x20F4ACC84);
}

void sub_20F4AC860(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (**v10)(_QWORD);
  BOOL v11;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  v5 = STACK[0x6118];
  if (STACK[0x6118])
  {
    v6 = STACK[0x6120];
    v7 = (void *)STACK[0x6118];
    if (STACK[0x6120] != v5)
    {
      v8 = (void (***)(_QWORD))(v6 - 40);
      v9 = (void (***)(_QWORD))(v6 - 40);
      do
      {
        v10 = *v9;
        v9 -= 5;
        (*v10)(v8);
        v11 = v8 == (void (***)(_QWORD))v5;
        v8 = v9;
      }
      while (!v11);
      v7 = (void *)STACK[0x6118];
    }
    STACK[0x6120] = v5;
    operator delete(v7);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20F4ACD2CLL);
}

void sub_20F4ACAD8(_Unwind_Exception *a1)
{
  sub_20F59A618((_QWORD *)STACK[0xC50]);
  _Unwind_Resume(a1);
}

void sub_20F4ACAF0()
{
  JUMPOUT(0x20F4ACB1CLL);
}

void sub_20F4ACAF8()
{
  JUMPOUT(0x20F4ACB08);
}

void sub_20F4ACB30()
{
  JUMPOUT(0x20F4ACB5CLL);
}

void sub_20F4ACB38()
{
  JUMPOUT(0x20F4ACB48);
}

void sub_20F4ACB70(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

void sub_20F4ACD3C(_Unwind_Exception *a1)
{
  sub_20E8C25A8((uint64_t)&STACK[0x6100]);
  sub_20F4F17C8(&STACK[0x2260]);
  _Unwind_Resume(a1);
}

uint64_t sub_20F4ACD60(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 192);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F4ACDC8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  const char *v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  const std::locale::facet *v75;
  std::locale v77;

  if (*(char *)(a3 + 23) >= 0)
    v6 = *(unsigned __int8 *)(a3 + 23);
  else
    v6 = *(_QWORD *)(a3 + 8);
  v7 = sub_20E86A980(a2, (uint64_t)"MINIMIZER SUMMARY:", 18);
  if (v6)
  {
    v8 = sub_20E86A980(v7, (uint64_t)" ", 1);
    v9 = *(char *)(a3 + 23);
    if (v9 >= 0)
      v10 = a3;
    else
      v10 = *(_QWORD *)a3;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(a3 + 23);
    else
      v11 = *(_QWORD *)(a3 + 8);
    v7 = sub_20E86A980(v8, v10, v11);
  }
  LOBYTE(v77.__locale_) = 10;
  sub_20E86A980(v7, (uint64_t)&v77, 1);
  if (*(_QWORD *)(a1 + 1152))
  {
    v12 = sub_20E86A980(a2, (uint64_t)"         ", 9);
    v13 = sub_20E86A980(v12, (uint64_t)"METHOD: ", 8);
    v14 = *(char *)(a1 + 23);
    if (v14 >= 0)
      v15 = a1;
    else
      v15 = *(_QWORD *)a1;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a1 + 23);
    else
      v16 = *(_QWORD *)(a1 + 8);
    v17 = sub_20E86A980(v13, v15, v16);
    LOBYTE(v77.__locale_) = 10;
    sub_20E86A980(v17, (uint64_t)&v77, 1);
    v18 = sub_20E86A980(a2, (uint64_t)"         ", 9);
    v19 = sub_20E86A980(v18, (uint64_t)"FACTORIZATION: ", 15);
    v20 = *(char *)(a1 + 47);
    if (v20 >= 0)
      v21 = a1 + 24;
    else
      v21 = *(_QWORD *)(a1 + 24);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 47);
    else
      v22 = *(_QWORD *)(a1 + 32);
    v23 = sub_20E86A980(v19, v21, v22);
    LOBYTE(v77.__locale_) = 10;
    sub_20E86A980(v23, (uint64_t)&v77, 1);
    v24 = sub_20E86A980(a2, (uint64_t)"         ", 9);
    sub_20E86A980(v24, (uint64_t)"CONVERGENCE: ", 13);
    switch(*(_DWORD *)(a1 + 56))
    {
      case 0:
        v25 = "Maximum iterations exceeded.";
        goto LABEL_29;
      case 1:
        v25 = "Convergence in the gradient.";
LABEL_29:
        v28 = a2;
        v29 = 28;
        goto LABEL_32;
      case 2:
        v25 = "Convergence in the parameters.";
        v28 = a2;
        v29 = 30;
        goto LABEL_32;
      case 3:
        v25 = "Convergence in the cost.";
        v28 = a2;
        v29 = 24;
LABEL_32:
        v30 = sub_20E86A980(v28, (uint64_t)v25, v29);
        LOBYTE(v77.__locale_) = 10;
        sub_20E86A980(v30, (uint64_t)&v77, 1);
        break;
      default:
        break;
    }
    v31 = sub_20E86A980(a2, (uint64_t)"         ", 9);
    sub_20E86A980(v31, (uint64_t)"ITERATIONS: [Successful | Total][", 33);
    v32 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v32, (uint64_t)" | ", 3);
    v33 = (_QWORD *)std::ostream::operator<<();
    v34 = sub_20E86A980(v33, (uint64_t)"]", 1);
    LOBYTE(v77.__locale_) = 10;
    sub_20E86A980(v34, (uint64_t)&v77, 1);
    v35 = sub_20E86A980(a2, (uint64_t)"         ", 9);
    v36 = sub_20E86A980(v35, (uint64_t)"VARIABLES(s): ", 14);
    sub_20E86A980(v36, (uint64_t)"[ ", 2);
    v37 = *(_QWORD *)(a1 + 2240);
    if (v37)
    {
      v38 = *(_QWORD *)(a1 + 2224);
      v39 = 8 * v37;
      do
      {
        v38 += 8;
        v40 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v40, (uint64_t)" ", 1);
        v39 -= 8;
      }
      while (v39);
    }
    sub_20E86A980(a2, (uint64_t)"] = ", 4);
    v41 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v77.__locale_) = 10;
    sub_20E86A980(v41, (uint64_t)&v77, 1);
    v42 = sub_20E86A980(a2, (uint64_t)"         ", 9);
    sub_20E86A980(v42, (uint64_t)"SIZE OF VARIABLES(s): ", 22);
    v43 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v77.__locale_) = 10;
    sub_20E86A980(v43, (uint64_t)&v77, 1);
    v44 = sub_20E86A980(a2, (uint64_t)"         ", 9);
    v45 = sub_20E86A980(v44, (uint64_t)"FACTOR(s): ", 11);
    sub_20E86A980(v45, (uint64_t)"[ ", 2);
    v46 = *(_QWORD *)(a1 + 1688);
    if (v46)
    {
      v47 = *(_QWORD *)(a1 + 1672);
      v48 = 8 * v46;
      do
      {
        v47 += 8;
        v49 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v49, (uint64_t)" ", 1);
        v48 -= 8;
      }
      while (v48);
    }
    sub_20E86A980(a2, (uint64_t)"] = ", 4);
    v50 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v77.__locale_) = 10;
    sub_20E86A980(v50, (uint64_t)&v77, 1);
    v51 = sub_20E86A980(a2, (uint64_t)"         ", 9);
    v52 = sub_20E86A980(v51, (uint64_t)"START ERROR(s): ", 16);
    sub_20E86A980(v52, (uint64_t)"[ ", 2);
    v53 = *(_QWORD *)(a1 + 608);
    if (v53)
    {
      v54 = *(_QWORD *)(a1 + 592);
      v55 = 8 * v53;
      do
      {
        v54 += 8;
        v56 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v56, (uint64_t)" ", 1);
        v55 -= 8;
      }
      while (v55);
    }
    sub_20E86A980(a2, (uint64_t)"] = ", 4);
    v57 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v77.__locale_) = 10;
    sub_20E86A980(v57, (uint64_t)&v77, 1);
    v58 = sub_20E86A980(a2, (uint64_t)"         ", 9);
    v59 = sub_20E86A980(v58, (uint64_t)"END ERROR(s): ", 14);
    sub_20E86A980(v59, (uint64_t)"[ ", 2);
    v60 = *(_QWORD *)(a1 + 1144);
    if (v60)
    {
      v61 = *(_QWORD *)(a1 + 1128);
      v62 = 8 * v60;
      do
      {
        v61 += 8;
        v63 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v63, (uint64_t)" ", 1);
        v62 -= 8;
      }
      while (v62);
    }
    sub_20E86A980(a2, (uint64_t)"] = ", 4);
    v64 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v77.__locale_) = 10;
    sub_20E86A980(v64, (uint64_t)&v77, 1);
    v65 = sub_20E86A980(a2, (uint64_t)"         ", 9);
    v66 = sub_20E86A980(v65, (uint64_t)"AVERAGE START ERROR(s): ", 24);
    sub_20E86A980(v66, (uint64_t)"[ ", 2);
    if (*(_QWORD *)(a1 + 1688))
    {
      v67 = 0;
      do
      {
        while (!*(_QWORD *)(*(_QWORD *)(a1 + 1672) + 8 * v67))
        {
          sub_20E86A980(a2, (uint64_t)"N.A. ", 5);
          if (++v67 >= *(_QWORD *)(a1 + 1688))
            goto LABEL_50;
        }
        v68 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v68, (uint64_t)" ", 1);
        ++v67;
      }
      while (v67 < *(_QWORD *)(a1 + 1688));
    }
LABEL_50:
    sub_20E86A980(a2, (uint64_t)"] = ", 4);
    if (*(_QWORD *)(a1 + 1152))
      v69 = (_QWORD *)std::ostream::operator<<();
    else
      v69 = sub_20E86A980(a2, (uint64_t)"N.A.", 4);
    LOBYTE(v77.__locale_) = 10;
    sub_20E86A980(v69, (uint64_t)&v77, 1);
    v70 = sub_20E86A980(a2, (uint64_t)"         ", 9);
    v71 = sub_20E86A980(v70, (uint64_t)"AVERAGE END ERROR(s): ", 22);
    sub_20E86A980(v71, (uint64_t)"[ ", 2);
    if (*(_QWORD *)(a1 + 1688))
    {
      v72 = 0;
      do
      {
        while (!*(_QWORD *)(*(_QWORD *)(a1 + 1672) + 8 * v72))
        {
          sub_20E86A980(a2, (uint64_t)"N.A. ", 5);
          if (++v72 >= *(_QWORD *)(a1 + 1688))
            goto LABEL_58;
        }
        v73 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v73, (uint64_t)" ", 1);
        ++v72;
      }
      while (v72 < *(_QWORD *)(a1 + 1688));
    }
LABEL_58:
    sub_20E86A980(a2, (uint64_t)"] = ", 4);
    if (*(_QWORD *)(a1 + 1152))
      v74 = (_QWORD *)std::ostream::operator<<();
    else
      v74 = sub_20E86A980(a2, (uint64_t)"N.A.", 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v74 + *(_QWORD *)(*v74 - 24)));
    v75 = std::locale::use_facet(&v77, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v75->__vftable[2].~facet_0)(v75, 10);
  }
  else
  {
    v26 = sub_20E86A980(a2, (uint64_t)"Invalid LinearSystem.", 21);
    std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
    v27 = std::locale::use_facet(&v77, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
  }
  std::locale::~locale(&v77);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20F4AD5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_20F4AD5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_20F4AD5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_20F4AD5FC(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A68A58);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68A58))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A68A50);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A68A58);
  }
  *a1 = qword_254A68A50;
}

void sub_20F4AD698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68A58);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68A58);
  _Unwind_Resume(a1);
}

void sub_20F4AD6F4()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20F4AD708(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24CA00298;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20F4AD748(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA00298;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20F4AD770(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  __int128 *v9;
  char v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  int8x16_t v18;
  int8x16_t v19;
  int32x4_t v20;
  float64x2_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  unsigned int v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  double *v32;
  double *v33;
  float64x2_t *v34;
  _QWORD *v35;
  uint64_t v36;
  float64x2_t *v37;
  float64x2_t *v38;
  float64x2_t *v39;
  uint64_t v40;
  float64x2_t *v41;
  double *v42;
  uint64_t v43;
  _QWORD *v44;
  float64x2_t *v45;
  uint64_t v46;
  double *v47;
  _QWORD *v48;
  uint64_t v49;
  double v50;
  int8x16_t v51;
  __int128 v52;
  double v60;
  int v61;
  float64x2_t *v64;
  _QWORD *f64;
  uint64_t v66;
  double v67;
  float64x2_t **v68;
  uint64_t v69;
  float64x2_t *v70;
  _QWORD *v71;
  uint64_t v72;
  __int128 v73;
  float64x2_t v74;
  int64x2_t v75;
  double v77;
  double v80;
  float64x2_t v81;
  double v82;
  float64x2_t v83;
  float64x2_t v85;
  double v86;
  float64x2_t v87;
  float64x2_t *v88;
  float64x2_t v92;
  float64x2_t v94;
  float64x2_t v96;
  float64x2_t *v98;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v103;
  double v104;
  float64x2_t v105;
  double v107;
  double v109;
  double v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t *v113;
  float64x2_t *v115;
  float64x2_t v117;
  float64x2_t v119;
  double v120;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v127;
  float64x2_t v129;
  float64x2_t v130;
  int64x2_t v132;
  double v133;
  float64x2_t *v135;
  float64x2_t *v136;
  float64x2_t v138;
  double v141;
  double v143;
  float v144;
  __int128 v145;
  _QWORD *v146;
  __int128 *v147;
  _QWORD *v148;
  float64x2_t **v149;
  __int128 v150;
  _BYTE v151[24];
  int8x16_t v152;
  double v153;
  float64x2_t *v154;
  float64x2_t *v155;
  float64x2_t *v156;
  float64x2_t *v157;
  uint64_t v158;
  int64x2_t v159;
  float64_t v160;
  int64x2_t v161;
  float64_t v162;
  float64x2_t v163;
  uint64_t v164;
  float64x2_t v165;
  int8x16_t v166;
  int64x2_t v167;
  int64x2_t v168;
  int8x16_t v169;
  uint64_t v170;
  int8x16_t v171;
  float64_t v172;
  __int128 v173;
  unint64_t v174;
  __int128 v175;
  uint64_t v176;
  double v177;
  uint64_t v178;
  uint64_t v179;

  v179 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  v150 = *(_OWORD *)(*a2 + 24);
  v5 = *v4;
  v6 = v3 + 40;
  if (!*(_BYTE *)(v3 + 528)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v3 + 40), (result & 1) == 0))
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 90, (uint64_t)"track.getStructure() && track.getStructure()->isSetup()", 55, (uint64_t)"track does not has structure or is not setup", 44, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      abort();
  }
  if (*(_BYTE *)(v3 + 528))
    v8 = v3 + 40;
  else
    v8 = 0;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(v8 + 32) || *(_DWORD *)(a1 + 24) != *(_DWORD *)(v8 + 40))
    return result;
  v146 = v4;
  v9 = *(__int128 **)(v3 + 536);
  v147 = *(__int128 **)(v3 + 544);
  if (v9 == v147)
    return (uint64_t)sub_20F2DFE8C((_QWORD *)v146[1], (uint64_t *)&v150);
  v148 = (_QWORD *)(v5 + 1784);
  while (1)
  {
    if (*(_QWORD *)v9 == *(_QWORD *)(a1 + 16) && *((_DWORD *)v9 + 2) == *(_DWORD *)(a1 + 24))
      goto LABEL_13;
    if (*(_BYTE *)(v3 + 528))
      v15 = v3 + 40;
    else
      v15 = 0;
    v16 = sub_20E9DF85C(v148, (uint64_t *)(v15 + 32));
    v17 = sub_20E9DF85C(v148, (uint64_t *)v9);
    v22 = v17 + 5;
    if (!v17)
      v22 = 0;
    v149 = (float64x2_t **)v22;
    if (!v16
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 111, (uint64_t)"old_anchor_pose_ref != nullptr", 30, (uint64_t)"Cannot find the pose ref", 24, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    if (!v17
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 112, (uint64_t)"new_anchor_pose_ref != nullptr", 30, (uint64_t)"Cannot find the pose ref", 24, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v23 = (uint64_t)v149[8];
    if (v23)
    {
      v24 = *((_QWORD *)v9 + 3);
      v25 = *(float *)(v24 + 8);
      v26 = *(float *)(v24 + 12);
      v27 = *(_DWORD *)(v23 + 992);
      if (v27 != -1)
        goto LABEL_27;
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 115, (uint64_t)"new_anchor_pose_ref->lens", 25, (uint64_t)"Lens does not exist", 19, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v23 = (uint64_t)v149[8];
      v31 = *((_QWORD *)v9 + 3);
      v25 = *(float *)(v31 + 8);
      v26 = *(float *)(v31 + 12);
      v27 = *(_DWORD *)(v23 + 992);
      if (v27 != -1)
      {
LABEL_27:
        v28 = v25;
        v29 = v26;
        if (v27 <= 7)
          goto LABEL_28;
        goto LABEL_34;
      }
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v27 = *(_DWORD *)(v23 + 992);
    v28 = v25;
    v29 = v26;
    if (v27 <= 7)
    {
LABEL_28:
      if (!v27)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      v11.f64[0] = *(float64_t *)(v23 + 80);
      v177 = *(double *)(v23 + 88) + *(double *)(v23 + 72) * v28 + v11.f64[0] * v29;
      v30 = *(double *)(v23 + 104);
      v19.i64[0] = *(_QWORD *)(v23 + 112);
      *(double *)v18.i64 = v30 * v29 + *(double *)v19.i64;
LABEL_35:
      v178 = v18.i64[0];
LABEL_36:
      v154 = (float64x2_t *)&v152;
      v155 = (float64x2_t *)&v177;
      v156 = (float64x2_t *)v151;
      v157 = 0;
      v158 = 0;
      if (v27 <= 7)
        break;
      goto LABEL_70;
    }
LABEL_34:
    v11.f64[0] = *(float64_t *)(v23 + 80);
    v177 = *(double *)(v23 + 88) + *(double *)(v23 + 72) * v28 + v11.f64[0] * v29;
    v30 = *(double *)(v23 + 104);
    v19.i64[0] = *(_QWORD *)(v23 + 112);
    *(double *)v18.i64 = v30 * v29 + *(double *)v19.i64;
    if (v27 < 0xE)
      goto LABEL_35;
    v178 = v18.i64[0];
    if (v27 == 14)
      goto LABEL_36;
    v37 = (float64x2_t *)&v152;
    v38 = (float64x2_t *)&v177;
    v154 = (float64x2_t *)&v152;
    v155 = (float64x2_t *)&v177;
    v39 = (float64x2_t *)v151;
    v156 = (float64x2_t *)v151;
    v157 = 0;
    v158 = 0;
    if (v27 != -1)
    {
      v40 = 0;
      v41 = 0;
LABEL_97:
      v10 = sub_20EB3CED8(v23, (uint64_t)v37, v38, v39, v41, v40);
LABEL_12:
      if ((v10 & 1) != 0)
        goto LABEL_130;
      goto LABEL_13;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v27 = *(_DWORD *)(v23 + 992);
    if (v27 <= 7)
      break;
LABEL_70:
    v37 = v154;
    if (v27 > 0xB)
    {
      if (v27 <= 0xD)
      {
        if (v27 != 13)
        {
          f64 = (_QWORD *)v156->f64;
          v64 = v157;
          v66 = v158;
          if (v156)
          {
            v156->f64[0] = 0.0;
            f64[1] = 0;
            f64[2] = 0;
          }
          if (v66)
          {
            *(_QWORD *)(v66 + 64) = 0;
            *(_OWORD *)(v66 + 32) = 0u;
            *(_OWORD *)(v66 + 48) = 0u;
            *(_OWORD *)v66 = 0u;
            *(_OWORD *)(v66 + 16) = 0u;
          }
          v37->f64[0] = 0.0;
          v37->f64[1] = 0.0;
          v37[1].f64[0] = 0.0;
          if (v64)
          {
            v64[1] = 0u;
            v64[2] = 0u;
            *v64 = 0u;
          }
          goto LABEL_13;
        }
        v10 = sub_20EB43734((double *)v23, (uint64_t)v154, (uint64_t)v155, v156, (uint64_t)v157, v158);
        goto LABEL_12;
      }
      v38 = v155;
      v39 = v156;
      v41 = v157;
      v40 = v158;
      if (v27 != 14)
        goto LABEL_97;
      if (v156)
      {
        v156->f64[0] = 0.0;
        v39->f64[1] = 0.0;
        v39[1].f64[0] = 0.0;
      }
      if (v40)
      {
        *(_QWORD *)(v40 + 64) = 0;
        *(_OWORD *)(v40 + 32) = 0u;
        *(_OWORD *)(v40 + 48) = 0u;
        *(_OWORD *)v40 = 0u;
        *(_OWORD *)(v40 + 16) = 0u;
      }
      v60 = (*(double *)v23 + *(double *)(v23 + 32)) * 0.5;
      v61 = sub_20EB253A0((uint64_t)v37, (uint64_t)v38, (double *)(v23 + 168), (double *)(v23 + 392), 0x14u, v60);
      if (v41)
      {
        if ((v61 & 1) != 0)
        {
          if (sub_20EB2498C(&v165, (uint64_t)&v166, &v163, (uint64_t)v37, (double *)(v23 + 168), v60))
          {
            v51.i64[0] = *(_QWORD *)&v37[1].f64[0];
            *(_QWORD *)&v52 = v167.i64[0];
            _Q3 = v166;
            v169 = *(int8x16_t *)v37;
            v170 = v51.i64[0];
            v164 = 0;
            *(_QWORD *)&_Q5.f64[0] = v51.i64[0];
            *(_QWORD *)&_Q5.f64[1] = v169.i64[0];
            _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v168, _Q5), (float64x2_t)vzip2q_s64(v168, v167), (float64x2_t)vextq_s8(v169, v51, 8uLL)).f64[1];
            __asm { FMLA            D6, D5, V3.D[1] }
            if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v167, (float64x2_t)v169), 1), (float64x2_t)v168, (float64x2_t)v169).f64[0], *(double *)v167.i64)) >= 0.00000001)
            {
LABEL_86:
              *(_QWORD *)&v73 = vextq_s8(v166, v166, 8uLL).u64[0];
              _Q3.i64[1] = vextq_s8((int8x16_t)v167, (int8x16_t)v167, 8uLL).u64[0];
              *((_QWORD *)&v73 + 1) = v168.i64[0];
              *((_QWORD *)&v52 + 1) = vextq_s8((int8x16_t)v168, (int8x16_t)v168, 8uLL).u64[0];
              v171 = _Q3;
              v172 = *(double *)v169.i64;
              v174 = vextq_s8(v169, v169, 8uLL).u64[0];
              v173 = v73;
              v176 = v51.i64[0];
              v175 = v52;
              sub_20E8BE424((uint64_t)&v159);
              v74.f64[0] = v160;
              v11 = (float64x2_t)vzip1q_s64(v159, v161);
              v75 = vzip2q_s64(v159, v161);
              v74.f64[1] = v162;
              *v41 = v11;
              v41[1] = (float64x2_t)v75;
              v41[2] = v74;
LABEL_130:
              v68 = (float64x2_t **)(v16 + 5);
              if (!v16)
                v68 = 0;
              goto LABEL_132;
            }
          }
        }
      }
      else if (v61)
      {
        goto LABEL_130;
      }
    }
    else
    {
      v47 = (double *)v155;
      v48 = (_QWORD *)v156->f64;
      v41 = v157;
      v49 = v158;
      if (v27 <= 9)
      {
        if (v27 == 9)
        {
          v10 = sub_20EB35004(v23, (uint64_t)v154, v155, v156, (unint64_t)v157, v158, *(double *)v18.i64, v30, *(double *)v19.i64, (int32x4_t)v11, v20);
        }
        else
        {
          if (v156)
          {
            v156->f64[0] = 0.0;
            v48[1] = 0;
            v48[2] = 0;
          }
          if (v49)
          {
            *(_QWORD *)(v49 + 64) = 0;
            v18.i64[0] = 0;
            *(_OWORD *)(v49 + 32) = 0u;
            *(_OWORD *)(v49 + 48) = 0u;
            *(_OWORD *)v49 = 0u;
            *(_OWORD *)(v49 + 16) = 0u;
          }
          if (v41)
          {
            v10 = sub_20EB277C4((uint64_t)v37, (uint64_t)v41, v47, v23 + 168, 20, *(double *)v18.i64, v30, *(double *)v19.i64, (int32x4_t)v11, v20);
          }
          else
          {
            v67 = sqrt(*v47 * *v47 + v47[1] * v47[1]);
            v10 = sub_20EB24018((uint64_t)v37, v47, (double *)(v23 + 168), 20, v67, v67, *(double *)v19.i64, (int32x4_t)v11, v20);
          }
        }
        goto LABEL_12;
      }
      if (v27 != 10)
      {
        v10 = sub_20EB38E20(v23, (uint64_t)v154, v155, v156, v157, v158);
        goto LABEL_12;
      }
      if (v156)
      {
        v156->f64[0] = 0.0;
        v48[1] = 0;
        v48[2] = 0;
      }
      if (v49)
      {
        *(_QWORD *)(v49 + 64) = 0;
        *(_OWORD *)(v49 + 32) = 0u;
        *(_OWORD *)(v49 + 48) = 0u;
        *(_OWORD *)v49 = 0u;
        *(_OWORD *)(v49 + 16) = 0u;
      }
      v50 = (*(double *)v23 + *(double *)(v23 + 32)) * 0.5;
      v10 = sub_20EB24F38((uint64_t)v37, (uint64_t)v47, v23 + 168, (double *)(v23 + 280), 0x14u, v50);
      if (!v41)
        goto LABEL_12;
      if ((v10 & 1) != 0)
      {
        if (sub_20EB2450C(&v165, (uint64_t)&v166, &v163, (uint64_t)v37, (double *)(v23 + 168), v50))
        {
          v51.i64[0] = *(_QWORD *)&v37[1].f64[0];
          *(_QWORD *)&v52 = v167.i64[0];
          _Q3 = v166;
          v169 = *(int8x16_t *)v37;
          v170 = v51.i64[0];
          v164 = 0;
          *(_QWORD *)&_Q5.f64[0] = v51.i64[0];
          *(_QWORD *)&_Q5.f64[1] = v169.i64[0];
          _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v168, _Q5), (float64x2_t)vzip2q_s64(v168, v167), (float64x2_t)vextq_s8(v169, v51, 8uLL)).f64[1];
          __asm { FMLA            D6, D5, V3.D[1] }
          if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v167, (float64x2_t)v169), 1), (float64x2_t)v168, (float64x2_t)v169).f64[0], *(double *)v167.i64)) >= 0.00000001)goto LABEL_86;
        }
      }
    }
LABEL_13:
    v9 += 2;
    if (v9 == v147)
      return (uint64_t)sub_20F2DFE8C((_QWORD *)v146[1], (uint64_t *)&v150);
  }
  if (v27 > 3)
  {
    v43 = (uint64_t)v154;
    v42 = (double *)v155;
    v44 = (_QWORD *)v156->f64;
    v45 = v157;
    v46 = v158;
    if (v27 > 5)
    {
      if (v27 == 6)
        v10 = sub_20EB41C58((double *)v23, (uint64_t)v154, v155->f64, v156, (uint64_t)v157, v158);
      else
        v10 = sub_20EB306CC(v23, (uint64_t)v154, v155, v156, (unint64_t)v157, v158, *(double *)v18.i64, v30, v19, (int8x16_t)v11, *(double *)v20.i64, v12.f64[0], v21);
    }
    else if (v27 == 5)
    {
      if (v156)
      {
        v156->f64[0] = 0.0;
        v44[1] = 0;
        v44[2] = 0;
      }
      if (v46)
      {
        *(_QWORD *)(v46 + 64) = 0;
        *(_OWORD *)(v46 + 32) = 0u;
        *(_OWORD *)(v46 + 48) = 0u;
        *(_OWORD *)v46 = 0u;
        *(_OWORD *)(v46 + 16) = 0u;
      }
      if (v45)
        v10 = sub_20EB28F10(v43, (uint64_t)v45, v42, v23 + 168, 5);
      else
        v10 = sub_20EB2886C(v43, v42, v23 + 168, 5);
    }
    else
    {
      if (v156)
      {
        v156->f64[0] = 0.0;
        v44[1] = 0;
        v44[2] = 0;
      }
      if (v46)
      {
        *(_QWORD *)(v46 + 64) = 0;
        v18 = 0uLL;
        *(_OWORD *)(v46 + 32) = 0u;
        *(_OWORD *)(v46 + 48) = 0u;
        *(_OWORD *)v46 = 0u;
        *(_OWORD *)(v46 + 16) = 0u;
      }
      if (v45)
      {
        if (!*(_BYTE *)(v23 + 468))
        {
          v18.i64[0] = sub_20EB27C0C(v23 + 204, (double *)(v23 + 168), 0x32uLL, v18, v30, v19, (int8x16_t)v11).u64[0];
          *(_BYTE *)(v23 + 468) = 1;
        }
        v10 = sub_20EA8D684(v43, (uint64_t)v42, (int64x2_t *)(v23 + 168), (float *)(v23 + 204), v45, 5, *(double *)v18.i64, v30, *(double *)v19.i64, v11.f64[0], *(double *)v20.i64, v12.f64[0], v21);
      }
      else
      {
        if (!*(_BYTE *)(v23 + 468))
        {
          v18.i64[0] = sub_20EB27C0C(v23 + 204, (double *)(v23 + 168), 0x32uLL, v18, v30, v19, (int8x16_t)v11).u64[0];
          *(_BYTE *)(v23 + 468) = 1;
        }
        v10 = sub_20EA8D684(v43, (uint64_t)v42, (int64x2_t *)(v23 + 168), (float *)(v23 + 204), 0, 5, *(double *)v18.i64, v30, *(double *)v19.i64, v11.f64[0], *(double *)v20.i64, v12.f64[0], v21);
      }
    }
    goto LABEL_12;
  }
  if (v27 > 1)
  {
    if (v27 == 2)
    {
      v10 = sub_20EA8D22C((uint64_t)&v154, v23);
    }
    else
    {
      v32 = (double *)v154;
      v33 = (double *)v155;
      v35 = (_QWORD *)v156->f64;
      v34 = v157;
      v36 = v158;
      if (v156)
      {
        v156->f64[0] = 0.0;
        v35[1] = 0;
        v35[2] = 0;
      }
      if (v36)
      {
        *(_QWORD *)(v36 + 64) = 0;
        v18.i64[0] = 0;
        *(_OWORD *)(v36 + 32) = 0u;
        *(_OWORD *)(v36 + 48) = 0u;
        *(_OWORD *)v36 = 0u;
        *(_OWORD *)(v36 + 16) = 0u;
      }
      if (v34)
        v10 = sub_20EB27398(v32, (uint64_t)v34, v33, (int64x2_t *)(v23 + 168), 20, *(double *)v18.i64, v30, *(double *)v19.i64, v11.f64[0], (int64x2_t)v20);
      else
        v10 = sub_20EB23DF0((uint64_t)v32, v33, (int64x2_t *)(v23 + 168), 20, *(double *)v18.i64, v30, *(double *)v19.i64, v11.f64[0], (int64x2_t)v20, v12);
    }
    goto LABEL_12;
  }
  v68 = (float64x2_t **)(v16 + 5);
  if (!v16)
    v68 = 0;
  if (!v27)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v69 = (uint64_t)v154;
  v71 = (_QWORD *)v156->f64;
  v70 = v157;
  v72 = v158;
  *v154 = *v155;
  *(_QWORD *)(v69 + 16) = 0x3FF0000000000000;
  if (v71)
  {
    *v71 = 0;
    v71[1] = 0;
    v71[2] = 0;
  }
  if (v70)
  {
    *v70 = (float64x2_t)xmmword_210312EC0;
    v70[1] = (float64x2_t)unk_210312ED0;
    v70[2] = (float64x2_t)xmmword_210312EE0;
  }
  if (v72)
  {
    *(_QWORD *)(v72 + 64) = 0;
    *(_OWORD *)(v72 + 32) = 0u;
    *(_OWORD *)(v72 + 48) = 0u;
    *(_OWORD *)v72 = 0u;
    *(_OWORD *)(v72 + 16) = 0u;
  }
LABEL_132:
  v11.f64[0] = v153;
  _Q1 = v152;
  *(_QWORD *)&v77 = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
  _D2 = *(double *)&v152.i64[1];
  __asm { FMLA            D0, D2, V1.D[1] }
  v12.f64[0] = 1.0 / sqrt(_D0 + v11.f64[0] * v11.f64[0]);
  *(_QWORD *)&v80 = *(_OWORD *)&vmulq_f64(v11, v12);
  v81 = vmulq_n_f64((float64x2_t)v152, v12.f64[0]);
  *(_QWORD *)&v82 = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u64[0];
  v152 = (int8x16_t)v81;
  v153 = v80;
  if (!*(_BYTE *)(v3 + 528))
    v6 = 0;
  v13.f64[0] = *(float64_t *)(v6 + 376);
  v83 = **v68;
  _D18 = (*v68)[2].f64[1];
  v85 = *(float64x2_t *)((char *)*v68 + 24);
  v86 = (*v68)[4].f64[0];
  v87 = (*v68)[3];
  v88 = v68[4];
  _Q22 = *v88;
  _Q23 = *(float64x2_t *)((char *)v88 + 24);
  _Q24 = v88[3];
  v92 = vmlaq_laneq_f64(vmulq_n_f64(v83, v88->f64[0]), v85, *v88, 1);
  __asm { FMLA            D26, D18, V22.D[1] }
  v94 = vmlaq_laneq_f64(vmulq_n_f64(v83, _Q23.f64[0]), v85, _Q23, 1);
  __asm { FMLA            D27, D18, V23.D[1] }
  v96 = vmlaq_laneq_f64(vmulq_n_f64(v83, _Q24.f64[0]), v85, _Q24, 1);
  __asm { FMLA            D28, D18, V24.D[1] }
  v98 = v68[6];
  _Q24 = *v98;
  v100 = vmlaq_laneq_f64(vmulq_n_f64(v83, v98->f64[0]), v85, *v98, 1);
  v101 = **v149;
  __asm { FMLA            D17, D18, V24.D[1] }
  _D18 = (*v149)[2].f64[1];
  v103 = vmlaq_n_f64(v92, v87, v88[1].f64[0]);
  v104 = v88[2].f64[1];
  v105 = vmlaq_n_f64(v94, v87, v104);
  _D26 = _D27 + v86 * v104;
  v107 = v88[4].f64[0];
  _Q23 = vmlaq_n_f64(v96, v87, v107);
  v109 = _D28 + v86 * v107;
  v110 = v98[1].f64[0];
  v111 = vmlaq_n_f64(v100, v87, v110);
  v112 = *(float64x2_t *)((char *)*v149 + 24);
  v113 = v149[4];
  _Q17.f64[0] = _Q17.f64[0] + v86 * v110;
  _Q20 = *v113;
  v115 = v149[6];
  _Q28 = vmulq_n_f64(*(float64x2_t *)(v6 + 64), v13.f64[0]);
  v117 = vmlaq_laneq_f64(vmulq_n_f64(v103, _Q28.f64[0]), v105, _Q28, 1);
  _Q22 = *v115;
  __asm { FMLA            D24, D26, V28.D[1] }
  v119 = vmlaq_laneq_f64(vmulq_n_f64(v101, v115->f64[0]), v112, *v115, 1);
  __asm { FMLA            D28, D18, V22.D[1] }
  _Q22.f64[0] = *(float64_t *)(v6 + 80);
  *(_QWORD *)&v120 = *(_OWORD *)&vmulq_f64(v13, _Q22);
  _Q22 = *(float64x2_t *)((char *)v113 + 24);
  v122 = vmlaq_n_f64(v117, _Q23, v120);
  _Q24.f64[0] = vmlad_n_f64(_Q24.f64[0], v109, v120);
  v123 = vmlaq_laneq_f64(vmulq_n_f64(v101, v113->f64[0]), v112, *v113, 1);
  __asm { FMLA            D23, D18, V20.D[1] }
  v124 = vmlaq_laneq_f64(vmulq_n_f64(v101, _Q22.f64[0]), v112, _Q22, 1);
  __asm { FMLA            D27, D18, V22.D[1] }
  _Q22 = v113[3];
  v127 = vmlaq_laneq_f64(vmulq_n_f64(v101, _Q22.f64[0]), v112, _Q22, 1);
  v112.f64[0] = (*v149)[4].f64[0];
  __asm { FMLA            D6, D18, V22.D[1] }
  v129 = (*v149)[3];
  _Q22.f64[0] = v115[1].f64[0];
  v130 = vmlaq_n_f64(v119, v129, _Q22.f64[0]);
  _Q22.f64[0] = _Q28.f64[0] + v112.f64[0] * _Q22.f64[0];
  _Q28.f64[0] = v113[1].f64[0];
  _Q7 = (int64x2_t)vmlaq_n_f64(v123, v129, _Q28.f64[0]);
  _Q23.f64[0] = _Q23.f64[0] + v112.f64[0] * _Q28.f64[0];
  _Q28.f64[0] = v113[2].f64[1];
  v132 = (int64x2_t)vmlaq_n_f64(v124, v129, _Q28.f64[0]);
  v133 = _D27 + v112.f64[0] * _Q28.f64[0];
  _Q28.f64[0] = v113[4].f64[0];
  _Q19 = vmlaq_n_f64(v127, v129, _Q28.f64[0]);
  v135 = v149[2];
  v136 = v68[2];
  _Q16 = vsubq_f64(vaddq_f64(vaddq_f64(v111, *v136), v122), vaddq_f64(v130, *v135));
  v138 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(_Q7, v132), _Q16.f64[0]), (float64x2_t)vzip2q_s64(_Q7, v132), _Q16, 1);
  _Q16.f64[0] = _Q16.f64[1];
  __asm { FMLA            D7, D16, V19.D[1] }
  _Q16.f64[0] = v135[1].f64[0];
  _Q19.f64[0] = v136[1].f64[0];
  *(_QWORD *)&_Q16.f64[0] = *(_OWORD *)&vsubq_f64(vaddq_f64(vaddq_f64(_Q17, _Q19), _Q24), vaddq_f64(_Q22, _Q16));
  _Q23.f64[1] = v133;
  _Q18 = vmlaq_n_f64(v138, _Q23, _Q16.f64[0]);
  _D4 = v77 * v12.f64[0];
  v141 = v11.f64[0] * v12.f64[0];
  __asm { FMLA            D5, D4, V18.D[1] }
  v143 = _D5 + v141 * vmlad_n_f64(*(double *)_Q7.i64, _D6 + v112.f64[0] * _Q28.f64[0], _Q16.f64[0]);
  if (v143 <= 0.0)
  {
    *(_QWORD *)(v6 + 376) = 0x7FF8000000000000;
    *(_QWORD *)(v6 + 384) = 0x7FF8000000000000;
  }
  else
  {
    *(double *)(v6 + 376) = v143;
  }
  v144 = *(float *)(*((_QWORD *)v9 + 3) + 12);
  if (fabs(sqrt(vmulq_f64(v81, v81).f64[0] + _D4 * v82 + v141 * v80) + -1.0) > 0.000001
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 41, (uint64_t)"std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, (uint64_t)"anchor direction should be normalized to 1", 42, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v145 = *v9;
  *(_DWORD *)(v6 + 48) = *((_DWORD *)v9 + 4);
  *(_OWORD *)(v6 + 32) = v145;
  *(_QWORD *)(v6 + 96) = v149;
  *(int8x16_t *)(v6 + 64) = v152;
  *(double *)(v6 + 80) = v153;
  *(double *)(v6 + 88) = v144;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  if ((result & 1) == 0)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 159, (uint64_t)"ret", 3, (uint64_t)"When re-anchoring, failed to set anchor for track using frame ", 62, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      abort();
  }
  return result;
}

uint64_t sub_20F4AE590(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio11VIODatabaseINS0_8VIOFrameILNS0_9eVIOStateE2ENS0_13VIOPoint2DNSPEdEENS0_25VIOAnchoredPo"
                     "int3DWithCovIdLb1EEES7_Lb0EE22RemoveStateAndReanchorENS0_4util18UUIDHashU32KeyPairEjEUlPN3cva5TrackIS4_S7_Lb0EEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio11VIODatabaseINS0_8VIOFrameILNS0_9eVIOStateE2ENS0_13VIOPoint2DNSPEdEENS0_25VI"
                                "OAnchoredPoint3DWithCovIdLb1EEES7_Lb0EE22RemoveStateAndReanchorENS0_4util18UUIDHashU32Ke"
                                "yPairEjEUlPN3cva5TrackIS4_S7_Lb0EEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio11VIODatabaseINS0_8VIOFrameILNS0_9eVIOStateE2ENS0_13VIOPoint2DNSPEdEENS0_25VIOAnchoredPoint3DWithCovIdLb1EEES7_Lb0EE22RemoveStateAndReanchorENS0_4util18UUIDHashU32KeyPairEjEUlPN3cva5TrackIS4_S7_Lb0EEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio11VIODatabaseINS0_8VIOFrameILNS0_9eVIOStateE2ENS0_13VIOPoint2DNSPEdEENS0_25VIOAnchoredPoint3DWithCovIdLb1EEES7_Lb0EE22RemoveStateAndReanchorENS0_4util18UUIDHashU32KeyPairEjEUlPN3cva5TrackIS4_S7_Lb0EEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F4AE5FC()
{
  return &unk_24CA00308;
}

void sub_20F4AE60C()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20F4AE620(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24CA00328;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20F4AE658(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA00328;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20F4AE678(uint64_t a1)
{
  int v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  std::chrono::steady_clock::time_point v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  const char *v16;
  size_t v17;
  _BYTE *v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *p_p;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  std::chrono::steady_clock::time_point v50;
  double v51;
  uint64_t v52;
  double v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  const char *v57;
  _QWORD v58[3];
  int v59;
  const char *v60;
  int v61;
  const char *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  _BYTE object[24];
  unint64_t v67;
  char v68;
  void *__p;
  size_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  sub_20F49BBF8(&v65);
  if (**(int **)(v65 + 56) > 3)
    return;
  v2 = *(unsigned __int8 *)(v65 + 72);
  v3 = sub_20E8C31DC(v65, "OSLogSurrogateAppender", 1, 0);
  if (!v2 && v3 == 0)
    return;
  v5 = v3;
  v58[0] = &v65;
  v58[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v58[2] = std::chrono::system_clock::now().__d_.__rep_;
  v59 = 3;
  v60 = "unknown file";
  v61 = 123;
  v63 = 0;
  v64 = 0;
  v62 = "unknown function";
  v6 = *(_QWORD *)(a1 + 8);
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = (double)(v7.__d_.__rep_ - *(_QWORD *)v6) / 1000000000.0;
  *(std::chrono::steady_clock::time_point *)v6 = v7;
  *(double *)(v6 + 8) = *(double *)(v6 + 8) + v8;
  v9 = **(_QWORD **)(a1 + 16) + 4712;
  LODWORD(v70) = 0;
  v10 = sub_20F4AEF78(v9, (uint64_t)object);
  v11 = *(_QWORD *)v58[0];
  v12 = (const char *)(*(_QWORD *)v58[0] + 16);
  v57 = v12;
  if (*(char *)(*(_QWORD *)v58[0] + 39) < 0)
  {
    v12 = *(const char **)(v11 + 16);
    v13 = *(_QWORD *)(v11 + 24);
    v15 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v15 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v13 = *(unsigned __int8 *)(*(_QWORD *)v58[0] + 39);
    v14 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v14 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    if ((_BYTE)v67)
    {
      *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
      *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
    }
    else
    {
      byte_254A4A4F8[23] = 14;
      strcpy(byte_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_10:
  if (byte_254A4A4F8[23] >= 0)
    v16 = byte_254A4A4F8;
  else
    v16 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v17 = byte_254A4A4F8[23];
  else
    v17 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v16, v12);
  v18 = &object[8];
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v17 >= 0x17)
  {
    v19 = v5;
    v20 = v12;
    v21 = v11;
    v22 = a1;
    v23 = v2;
    v24 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v24 = v17 | 7;
    v25 = v24 + 1;
    v18 = operator new(v24 + 1);
    *(_QWORD *)&object[16] = v17;
    v67 = v25 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v18;
    v2 = v23;
    a1 = v22;
    v11 = v21;
    v12 = v20;
    v5 = v19;
    goto LABEL_23;
  }
  HIBYTE(v67) = v17;
  if (v17)
LABEL_23:
    memmove(v18, v16, v17);
  v18[v17] = 0;
  v68 = 1;
  p_p = &__p;
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v13 >= 0x17)
  {
    v28 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v28 = v13 | 7;
    v29 = v28 + 1;
    p_p = operator new(v28 + 1);
    v70 = v13;
    v71 = v29 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v71) = v13;
    if (!v13)
    {
      LOBYTE(__p) = 0;
      v72 = 1;
      v27 = *(NSObject **)object;
      if ((SHIBYTE(v71) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(p_p, v12, v13);
  *((_BYTE *)p_p + v13) = 0;
  v72 = 1;
  v27 = *(NSObject **)object;
  if ((SHIBYTE(v71) & 0x80000000) == 0)
  {
LABEL_28:
    if (!v68)
      goto LABEL_37;
LABEL_35:
    if (SHIBYTE(v67) < 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(__p);
  if (v68)
    goto LABEL_35;
LABEL_37:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v5 && *(_QWORD *)(v5 + 24))
  {
    v30 = _os_log_pack_size();
    v31 = (std::__shared_weak_count_vtbl *)operator new(v30, (std::align_val_t)8uLL);
    v32 = (std::__shared_weak_count *)operator new();
    v33 = v32;
    v32->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v32->__shared_weak_owners_ = 0;
    v32[1].__vftable = v31;
    do
      v35 = __ldxr(p_shared_owners);
    while (__stxr(v35 + 1, p_shared_owners));
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v33);
    }
    v37 = _os_log_pack_fill();
    *(_DWORD *)v37 = 134218240;
    *(double *)(v37 + 4) = v8;
    *(_WORD *)(v37 + 12) = 2048;
    *(double *)(v37 + 14) = v10;
    v38 = operator new();
    v39 = *(unsigned __int8 *)(v11 + 39);
    v40 = v57;
    if ((v39 & 0x80u) != 0)
    {
      v40 = *(const char **)(v11 + 16);
      v39 = *(_QWORD *)(v11 + 24);
    }
    *(_QWORD *)v38 = v31;
    *(_QWORD *)(v38 + 8) = v31;
    *(_QWORD *)(v38 + 16) = v33;
    *(_QWORD *)(v38 + 24) = 0;
    *(_QWORD *)(v38 + 32) = 0;
    *(_QWORD *)(v38 + 40) = v40;
    *(_QWORD *)(v38 + 48) = v39;
    *(_BYTE *)(v38 + 56) = 1;
    *(_QWORD *)object = v38;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v5 + 24) + 40))(*(_QWORD *)(v5 + 24), object);
    v41 = *(_QWORD *)object;
    *(_QWORD *)object = 0;
    if (v41)
    {
      v42 = *(std::__shared_weak_count **)(v41 + 32);
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = *(std::__shared_weak_count **)(v41 + 16);
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      MEMORY[0x212BC6398](v41, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(v27, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 134218240;
    *(double *)&object[4] = v8;
    *(_WORD *)&object[12] = 2048;
    *(double *)&object[14] = v10;
    v48 = (void *)_os_log_send_and_compose_impl();
    if (v48)
      free(v48);
  }
  if (v2)
  {
    v49 = *(_QWORD *)(a1 + 8);
    v50.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v51 = (double)(v50.__d_.__rep_ - *(_QWORD *)v49) / 1000000000.0;
    *(std::chrono::steady_clock::time_point *)v49 = v50;
    *(double *)(v49 + 8) = *(double *)(v49 + 8) + v51;
    v52 = **(_QWORD **)(a1 + 16) + 4712;
    LODWORD(v70) = 0;
    v53 = sub_20F4AEF78(v52, (uint64_t)object);
    sub_20E8C003C((uint64_t)v58, "BA pulse (%f seconds / iteration, cost %f).", v51, v53);
    sub_20E863570((uint64_t)v58);
  }
  sub_20E863570((uint64_t)v58);
  v54 = v64;
  if (v64)
  {
    v55 = (unint64_t *)&v64->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
}

void sub_20F4AED50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a13);
  v31 = a21;
  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20F4AEF00(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio16map_optimization16OfflineMapBAImplILb0ELb1EEEvRKNS1_28OfflineMapOptimizationConfigERKN"
                     "S0_19batch_least_squares15IMUSampleBufferERNS0_13MapDataTraitsIXT0_EE15VIODatabaseTypeENS_3esn11Opt"
                     "ionalRefIKNS1_18PoseGraphNodeGroupEEEybbEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio16map_optimization16OfflineMapBAImplILb0ELb1EEEvRKNS1_28OfflineMapOptimizatio"
                                "nConfigERKNS0_19batch_least_squares15IMUSampleBufferERNS0_13MapDataTraitsIXT0_EE15VIODat"
                                "abaseTypeENS_3esn11OptionalRefIKNS1_18PoseGraphNodeGroupEEEybbEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio16map_optimization16OfflineMapBAImplILb0ELb1EEEvRKNS1_28OfflineMapOptimizationConfigERKNS0_19batch_least_squares15IMUSampleBufferERNS0_13MapDataTraitsIXT0_EE15VIODatabaseTypeENS_3esn11OptionalRefIKNS1_18PoseGraphNodeGroupEEEybbEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio16map_optimization16OfflineMapBAImplILb0ELb1EEEvRKNS1_28OfflineMapOptimizationConfigERKNS0_19batch_least_squares15IMUSampleBufferERNS0_13MapDataTraitsIXT0_EE15VIODatabaseTypeENS_3esn11OptionalRefIKNS1_18PoseGraphNodeGroupEEEybbEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F4AEF6C()
{
  return &unk_24CA00498;
}

double sub_20F4AEF78(uint64_t a1, uint64_t a2)
{
  float64x2_t v4;
  double v5;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  double v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  double *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  __int128 *v24;
  _BOOL4 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v30;
  int8x16_t *v46;
  int8x16_t *v47;
  int8x16_t *v48;
  uint64_t *v49;
  uint64_t v50;
  float64x2_t v51;
  float64x2_t v53;
  float64x2_t v55;
  double v57;
  double v59;
  float64x2_t v61;
  double v62;
  float64x2_t v63;
  int8x16_t *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t *v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t *v70;
  int8x16_t v71;
  float64_t v72;
  double v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  _OWORD *v78;
  int v79;
  uint64_t v82;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  double v97;
  __int128 *v98;
  __int128 *v99;
  __int128 v100;
  __int128 v103;
  double v116;
  uint64_t v117;
  uint64_t v118;
  float64x2_t v119;
  double v120;
  double v121;
  float64x2_t v122;
  double v123;
  double v124;
  float64x2_t v125;
  double v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  double v131;
  double *v132;
  int v133;
  uint64_t v134;
  double v137;
  long double v138;
  long double v139;
  uint64_t v140;
  uint64_t v141;
  double *v142;
  _OWORD *v143;
  _BOOL4 v144;
  uint64_t v145;
  __int128 v146;
  double v153;
  double v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  __int128 v161;
  unint64_t v167;
  uint64_t v168;
  uint64_t v170;
  double v171;
  double v172;
  uint64_t v173;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  double v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  double v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  double v223;
  double v224;
  unint64_t v225;
  unint64_t v226;
  double *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  double v235;
  long double v236;
  long double v237;
  long double v238;
  __int128 v239;
  unint64_t v245;
  uint64_t v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  float64x2_t v255;
  float64x2_t v256;
  _QWORD *v257;
  double *v258;
  float64x2_t v259;
  double v260;
  float64x2_t v261;
  float64_t v262;
  float64x2_t v263;
  double v264;
  float64x2_t v265;
  uint64_t v266;
  double v267;
  char v268;

  kdebug_trace();
  v11 = *(unsigned int *)(a2 + 48);
  if (v11 <= 5)
    bzero((void *)(a2 + 8 * v11), 48 - 8 * v11);
  *(_DWORD *)(a2 + 48) = 6;
  if (*(_BYTE *)(a1 + 1876))
  {
    v12 = *(_QWORD *)(a1 + 896);
    v13 = *(__int128 **)(a1 + 904);
    v14 = 0.0;
    v15 = 0.0;
    if ((__int128 *)v12 == v13)
      goto LABEL_57;
    if (*(_BYTE *)(a1 + 1875))
    {
      v16 = (unint64_t)v13 - v12 - 504;
      if (v16 < 0x1F8)
      {
        v17 = *(_QWORD *)(a1 + 896);
        do
        {
LABEL_56:
          v15 = v15 + *(double *)(v17 + 464);
          v17 += 504;
        }
        while ((__int128 *)v17 != v13);
        goto LABEL_57;
      }
      v155 = v16 / 0x1F8 + 1;
      v17 = v12 + 504 * (v155 & 0x1FFFFFFFFFFFFFELL);
      v156 = v155 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v15 = v15 + *(double *)(v12 + 464) + *(double *)(v12 + 968);
        v12 += 1008;
        v156 -= 2;
      }
      while (v156);
      if (v155 != (v155 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_56;
    }
    else
    {
      v98 = (__int128 *)(v12 + 344);
      do
      {
        if (*((_BYTE *)v98 + 128))
        {
          *((_QWORD *)v98 + 14) = *((_QWORD *)v98 - 1);
          v100 = *(__int128 *)((char *)v98 - 24);
          _Q5 = *(__int128 *)((char *)v98 - 56);
          v98[5] = *(__int128 *)((char *)v98 - 40);
          v98[6] = v100;
          _Q4 = *(__int128 *)((char *)v98 - 88);
          v98[3] = *(__int128 *)((char *)v98 - 72);
          v98[4] = _Q5;
          v103 = *(__int128 *)((char *)v98 - 120);
          v98[1] = *(__int128 *)((char *)v98 - 104);
          v98[2] = _Q4;
          *v98 = v103;
          _Q17 = *v98;
          _D19 = *((_QWORD *)v98 + 1);
          __asm { FMLA            D18, D19, V17.D[1] }
          *(_QWORD *)&_Q17 = *((_QWORD *)v98 + 3);
          __asm { FMLA            D18, D17, V16.D[1] }
          _D16 = *((_QWORD *)v98 + 5);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *((_QWORD *)v98 + 7);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *((_QWORD *)v98 + 9);
          __asm { FMLA            D18, D6, V5.D[1] }
          *(_QWORD *)&_Q5 = *((_QWORD *)v98 + 11);
          __asm { FMLA            D18, D5, V4.D[1] }
          *(_QWORD *)&_Q4 = *((_QWORD *)v98 + 13);
          __asm { FMLA            D18, D4, V3.D[1] }
          v116 = *(double *)(a1 + 16) * (_D18 + *((double *)v98 + 14) * *((double *)v98 + 14));
          *((double *)v98 + 15) = v116;
          v15 = v15 + v116;
        }
        v99 = v98 + 10;
        v98 = (__int128 *)((char *)v98 + 504);
      }
      while (v99 != v13);
    }
LABEL_57:
    *(double *)a2 = v15 * 0.5;
    v157 = *(_QWORD *)(a1 + 920);
    v158 = *(_QWORD *)(a1 + 928);
    if (v157 == v158)
      goto LABEL_69;
    if (*(_BYTE *)(a1 + 1875))
    {
      v159 = v158 - v157 - 280;
      v14 = 0.0;
      if (v159 < 0x118)
      {
        v160 = *(_QWORD *)(a1 + 920);
        do
        {
LABEL_68:
          v14 = v14 + *(double *)(v160 + 240);
          v160 += 280;
        }
        while (v160 != v158);
        goto LABEL_69;
      }
      v167 = v159 / 0x118 + 1;
      v160 = v157 + 280 * (v167 & 0x1FFFFFFFFFFFFFELL);
      v168 = v167 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v14 = v14 + *(double *)(v157 + 240) + *(double *)(v157 + 520);
        v157 += 560;
        v168 -= 2;
      }
      while (v168);
      if (v167 != (v167 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_68;
    }
    else
    {
      v14 = 0.0;
      do
      {
        if (*(_BYTE *)(v157 + 248))
        {
          v161 = *(_OWORD *)(v157 + 160);
          *(_OWORD *)(v157 + 192) = *(_OWORD *)(v157 + 144);
          *(_OWORD *)(v157 + 208) = v161;
          _Q3 = *(_OWORD *)(v157 + 192);
          *(_OWORD *)(v157 + 224) = *(_OWORD *)(v157 + 176);
          _D6 = *((_QWORD *)&_Q3 + 1);
          __asm { FMLA            D5, D6, V3.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v157 + 216);
          __asm { FMLA            D5, D3, V4.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v157 + 232);
          __asm { FMLA            D5, D3, V1.D[1] }
          *(double *)&v161 = *(double *)(a1 + 32) * _D5;
          *(_QWORD *)(v157 + 240) = v161;
          v14 = v14 + *(double *)&v161;
        }
        v157 += 280;
      }
      while (v157 != v158);
    }
LABEL_69:
    *(double *)(a2 + 8) = v14 * 0.5;
    _X9 = *(_QWORD *)(a1 + 944);
    v170 = *(_QWORD *)(a1 + 952);
    v171 = 0.0;
    v172 = 0.0;
    if (_X9 == v170)
      goto LABEL_81;
    if (*(_BYTE *)(a1 + 1875))
    {
      if ((unint64_t)(v170 - _X9 - 8016) >> 4 < 0x1F5)
      {
        v173 = *(_QWORD *)(a1 + 944);
        do
        {
LABEL_80:
          v172 = v172 + *(double *)(v173 + 7976);
          v173 += 8016;
        }
        while (v173 != v170);
        goto LABEL_81;
      }
      v195 = (v170 - _X9 - 8016) / 0x1F50uLL + 1;
      v173 = _X9 + 8016 * (v195 & 0x1FFFFFFFFFFFFELL);
      v196 = v195 & 0x1FFFFFFFFFFFFELL;
      do
      {
        v172 = v172 + *(double *)(_X9 + 7976) + *(double *)(_X9 + 15992);
        _X9 += 16032;
        v196 -= 2;
      }
      while (v196);
      if (v195 != (v195 & 0x1FFFFFFFFFFFFELL))
        goto LABEL_80;
    }
    else
    {
      do
      {
        __asm { PRFM            #0, [X9,#0x7D20] }
        if (*(_BYTE *)(_X9 + 7984))
        {
          _X14 = _X9 + 31904;
          *(_QWORD *)(_X9 + 7968) = *(_QWORD *)(_X9 + 7848);
          v176 = *(_OWORD *)(_X9 + 7816);
          *(_OWORD *)(_X9 + 7920) = *(_OWORD *)(_X9 + 7800);
          *(_OWORD *)(_X9 + 7936) = v176;
          *(_OWORD *)(_X9 + 7952) = *(_OWORD *)(_X9 + 7832);
          v177 = *(_OWORD *)(_X9 + 7752);
          *(_OWORD *)(_X9 + 7856) = *(_OWORD *)(_X9 + 7736);
          *(_OWORD *)(_X9 + 7872) = v177;
          v178 = *(_OWORD *)(_X9 + 7784);
          *(_OWORD *)(_X9 + 7888) = *(_OWORD *)(_X9 + 7768);
          *(_OWORD *)(_X9 + 7904) = v178;
          __asm { PRFM            #0, [X14] }
          _Q17 = *(_OWORD *)(_X9 + 7856);
          _D19 = *(_QWORD *)(_X9 + 7864);
          __asm { FMLA            D18, D19, V17.D[1] }
          *(_QWORD *)&_Q17 = *(_QWORD *)(_X9 + 7880);
          __asm { FMLA            D18, D17, V16.D[1] }
          _D16 = *(_QWORD *)(_X9 + 7896);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *(_QWORD *)(_X9 + 7912);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *(_QWORD *)(_X9 + 7928);
          __asm { FMLA            D18, D6, V5.D[1] }
          _D5 = *(_QWORD *)(_X9 + 7944);
          __asm { FMLA            D18, D5, V4.D[1] }
          _D4 = *(_QWORD *)(_X9 + 7960);
          __asm { FMLA            D18, D4, V3.D[1] }
          v194 = *(double *)(a1 + 48) * (_D18 + *(double *)(_X9 + 7968) * *(double *)(_X9 + 7968));
          *(double *)(_X9 + 7976) = v194;
          v172 = v172 + v194;
        }
        _X9 += 8016;
      }
      while (_X9 != v170);
    }
LABEL_81:
    *(double *)(a2 + 16) = v172 * 0.5;
    _X9 = *(_QWORD *)(a1 + 968);
    v198 = *(_QWORD *)(a1 + 976);
    if (_X9 == v198)
      goto LABEL_93;
    if (*(_BYTE *)(a1 + 1875))
    {
      v199 = v198 - _X9 - 5336;
      v171 = 0.0;
      if (v199 >> 3 < 0x29B)
      {
        v200 = *(_QWORD *)(a1 + 968);
        do
        {
LABEL_92:
          v171 = v171 + *(double *)(v200 + 5296);
          v200 += 5336;
        }
        while (v200 != v198);
        goto LABEL_93;
      }
      v219 = v199 / 0x14D8 + 1;
      v200 = _X9 + 5336 * (v219 & 0x1FFFFFFFFFFFFELL);
      v220 = v219 & 0x1FFFFFFFFFFFFELL;
      do
      {
        v171 = v171 + *(double *)(_X9 + 5296) + *(double *)(_X9 + 10632);
        _X9 += 10672;
        v220 -= 2;
      }
      while (v220);
      if (v219 != (v219 & 0x1FFFFFFFFFFFFELL))
        goto LABEL_92;
    }
    else
    {
      v171 = 0.0;
      do
      {
        __asm { PRFM            #0, [X9,#0x5340] }
        if (*(_BYTE *)(_X9 + 5304))
        {
          _X14 = _X9 + 21184;
          *(_QWORD *)(_X9 + 5288) = *(_QWORD *)(_X9 + 5168);
          *(_OWORD *)(_X9 + 5240) = *(_OWORD *)(_X9 + 5120);
          *(_OWORD *)(_X9 + 5256) = *(_OWORD *)(_X9 + 5136);
          *(_OWORD *)(_X9 + 5272) = *(_OWORD *)(_X9 + 5152);
          *(_OWORD *)(_X9 + 5176) = *(_OWORD *)(_X9 + 5056);
          *(_OWORD *)(_X9 + 5192) = *(_OWORD *)(_X9 + 5072);
          *(_OWORD *)(_X9 + 5208) = *(_OWORD *)(_X9 + 5088);
          *(_OWORD *)(_X9 + 5224) = *(_OWORD *)(_X9 + 5104);
          __asm { PRFM            #0, [X14] }
          _Q16 = *(_OWORD *)(_X9 + 5176);
          _D19 = *(_QWORD *)(_X9 + 5184);
          __asm { FMLA            D18, D19, V16.D[1] }
          *(_QWORD *)&_Q16 = *(_QWORD *)(_X9 + 5200);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *(_QWORD *)(_X9 + 5216);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *(_QWORD *)(_X9 + 5232);
          __asm { FMLA            D18, D6, V5.D[1] }
          _D5 = *(_QWORD *)(_X9 + 5248);
          __asm { FMLA            D18, D5, V4.D[1] }
          _D4 = *(_QWORD *)(_X9 + 5264);
          __asm { FMLA            D18, D4, V3.D[1] }
          _D3 = *(_QWORD *)(_X9 + 5280);
          __asm { FMLA            D18, D3, V2.D[1] }
          v218 = *(double *)(a1 + 64) * (_D18 + *(double *)(_X9 + 5288) * *(double *)(_X9 + 5288));
          *(double *)(_X9 + 5296) = v218;
          v171 = v171 + v218;
        }
        _X9 += 5336;
      }
      while (_X9 != v198);
    }
LABEL_93:
    *(double *)(a2 + 24) = v171 * 0.5;
    v221 = *(_QWORD *)(a1 + 992);
    v222 = *(_QWORD *)(a1 + 1000);
    v223 = 0.0;
    v224 = 0.0;
    if (v221 != v222)
    {
      if (*(_BYTE *)(a1 + 1875))
      {
        v225 = v222 - v221 - 216;
        if (v225 < 0xD8)
          goto LABEL_120;
        v226 = v225 / 0xD8 + 1;
        v227 = (double *)(v221 + 392);
        v228 = v226 & 0x3FFFFFFFFFFFFFELL;
        do
        {
          v224 = v224 + *(v227 - 27) + *v227;
          v227 += 54;
          v228 -= 2;
        }
        while (v228);
        v221 += 216 * (v226 & 0x3FFFFFFFFFFFFFELL);
        if (v226 != (v226 & 0x3FFFFFFFFFFFFFELL))
        {
LABEL_120:
          do
          {
            v224 = v224 + *(double *)(v221 + 176);
            v221 += 216;
          }
          while (v221 != v222);
        }
      }
      else
      {
        do
        {
          if (*(_BYTE *)(v221 + 184))
          {
            *(_OWORD *)(v221 + 160) = *(_OWORD *)(v221 + 144);
            v256 = *(float64x2_t *)(v221 + 160);
            _D1 = v256.f64[1];
            __asm { FMLA            D0, D1, V2.D[1] }
            v235 = *(double *)(a1 + 88);
            v236 = *(double *)(a1 + 96) * (*(double *)(a1 + 80) * _D0);
            v237 = v236 + 1.0;
            v238 = v235 * log1p(v236);
            *(long double *)(v221 + 176) = v238;
            *(float64x2_t *)(v221 + 160) = vmulq_n_f64(v256, sqrt(1.0 / v237));
            v224 = v224 + v238;
          }
          v221 += 216;
        }
        while (v221 != v222);
      }
    }
    *(double *)(a2 + 32) = v224 * 0.5;
    v229 = *(_QWORD *)(a1 + 1016);
    v230 = *(_QWORD *)(a1 + 1024);
    if (v229 == v230)
      goto LABEL_116;
    if (!*(_BYTE *)(a1 + 1875))
    {
      v223 = 0.0;
      do
      {
        if (*(_BYTE *)(v229 + 856))
        {
          v239 = *(_OWORD *)(v229 + 768);
          *(_OWORD *)(v229 + 800) = *(_OWORD *)(v229 + 752);
          *(_OWORD *)(v229 + 816) = v239;
          _Q2 = *(_OWORD *)(v229 + 800);
          *(_OWORD *)(v229 + 832) = *(_OWORD *)(v229 + 784);
          _D5 = *((_QWORD *)&_Q2 + 1);
          __asm { FMLA            D4, D5, V2.D[1] }
          *(_QWORD *)&_Q2 = *(_QWORD *)(v229 + 824);
          __asm { FMLA            D4, D2, V3.D[1] }
          *(_QWORD *)&_Q2 = *(_QWORD *)(v229 + 840);
          __asm { FMLA            D4, D2, V1.D[1] }
          *(double *)&v239 = *(double *)(a1 + 112) * _D4;
          *(_QWORD *)(v229 + 848) = v239;
          v223 = v223 + *(double *)&v239;
        }
        v229 += 888;
      }
      while (v229 != v230);
      goto LABEL_116;
    }
    v231 = v230 - v229 - 888;
    v223 = 0.0;
    if (v231 >= 0x378)
    {
      v245 = v231 / 0x378 + 1;
      v232 = v229 + 888 * (v245 & 0xFFFFFFFFFFFFFELL);
      v246 = v245 & 0xFFFFFFFFFFFFFELL;
      do
      {
        v223 = v223 + *(double *)(v229 + 848) + *(double *)(v229 + 1736);
        v229 += 1776;
        v246 -= 2;
      }
      while (v246);
      if (v245 == (v245 & 0xFFFFFFFFFFFFFELL))
        goto LABEL_116;
    }
    else
    {
      v232 = *(_QWORD *)(a1 + 1016);
    }
    do
    {
      v223 = v223 + *(double *)(v232 + 848);
      v232 += 888;
    }
    while (v232 != v230);
LABEL_116:
    v154 = v223 * 0.5;
    goto LABEL_117;
  }
  v18 = (double *)(a1 + 8);
  v19 = (_QWORD *)(a1 + 120);
  v257 = (_QWORD *)(a1 + 120);
  v258 = (double *)(a1 + 8);
  v20 = *(_QWORD *)(a1 + 896);
  v21 = *(_QWORD *)(a1 + 904);
  v22 = 0.0;
  v23 = 0.0;
  if (v20 != v21)
  {
    do
    {
      while (1)
      {
        v24 = (__int128 *)(v20 + 344);
        v25 = sub_20F4AFF88((char *)(v20 + 8), (float64x2_t **)(v20 + 208), v20 + 344);
        *(_BYTE *)(v20 + 472) = v25;
        if (v25)
          break;
        *(_QWORD *)(v20 + 464) = 0;
        v20 += 504;
        if (v20 == v21)
          goto LABEL_15;
      }
      v26 = *(_QWORD *)(v20 + 480);
      if (v26)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 24))(v26, v20 + 344);
      _Q1 = *(_OWORD *)(v20 + 408);
      v27 = *(_OWORD *)(v20 + 424);
      _Q3 = *(_OWORD *)(v20 + 392);
      *(_OWORD *)(v20 + 288) = _Q1;
      *(_OWORD *)(v20 + 304) = v27;
      _Q2 = *(float64x2_t *)(v20 + 424);
      *(_OWORD *)(v20 + 320) = *(_OWORD *)(v20 + 440);
      *(_QWORD *)(v20 + 336) = *(_QWORD *)(v20 + 456);
      v30 = *(_OWORD *)(v20 + 360);
      _Q5 = *v24;
      _V7.D[1] = *((_QWORD *)&v30 + 1);
      *(_OWORD *)(v20 + 224) = *v24;
      *(_OWORD *)(v20 + 240) = v30;
      _Q4 = *(_OWORD *)(v20 + 376);
      v4 = *(float64x2_t *)(v20 + 392);
      *(_OWORD *)(v20 + 256) = _Q4;
      *(float64x2_t *)(v20 + 272) = v4;
      _Q6 = *(float64x2_t *)(v20 + 440);
      _D17 = *((_QWORD *)&_Q5 + 1);
      __asm { FMLA            D16, D17, V5.D[1] }
      *(_QWORD *)&_Q5 = _V7.D[1];
      __asm { FMLA            D16, D5, V7.D[1] }
      _D5 = *((double *)&_Q4 + 1);
      __asm { FMLA            D16, D5, V4.D[1] }
      _D4 = *((double *)&_Q3 + 1);
      __asm { FMLA            D16, D4, V3.D[1] }
      _D3 = *((double *)&_Q1 + 1);
      __asm { FMLA            D16, D3, V1.D[1] }
      *(float64_t *)&_Q1 = _Q2.f64[1];
      __asm { FMLA            D16, D1, V2.D[1] }
      *(float64_t *)&_Q1 = _Q6.f64[1];
      __asm { FMLA            D16, D1, V6.D[1] }
      v5 = *(double *)(a1 + 16);
      v4.f64[0] = v5 * (_D16 + *(double *)(v20 + 456) * *(double *)(v20 + 456));
      *(float64_t *)(v20 + 464) = v4.f64[0];
      v23 = v23 + v4.f64[0];
      v20 += 504;
    }
    while (v20 != v21);
LABEL_15:
    v19 = v257;
    v18 = v258;
  }
  *(double *)a2 = v23 * 0.5;
  v46 = (int8x16_t *)v19[100];
  v47 = (int8x16_t *)v19[101];
  if (v46 != v47)
  {
    v48 = v46 + 16;
    v22 = 0.0;
    do
    {
      while (!v48[-9].i64[1])
      {
        v48[-1].i8[8] = 0;
        v48[-1].i64[0] = 0;
        v49 = &v48[1].i64[1];
        v48 = (int8x16_t *)((char *)v48 + 280);
        if (v49 == (uint64_t *)v47)
          goto LABEL_23;
      }
      v50 = v48[-8].i64[1];
      v4.f64[0] = *(float64_t *)(v50 + 48);
      v51 = *(float64x2_t *)(v50 + 32);
      _D2 = *(double *)(v50 + 72);
      v53 = *(float64x2_t *)(v50 + 56);
      _D4 = *(double *)(v50 + 96);
      v55 = *(float64x2_t *)(v50 + 80);
      *(_QWORD *)&_Q6.f64[0] = v48[-14].i64[1];
      _Q7 = *(float64x2_t *)((char *)&v48[-15] + 8);
      v57 = *(double *)v48[-12].i64;
      _Q17 = (float64x2_t)v48[-13];
      v59 = *(double *)&v48[-11].i64[1];
      _Q19 = *(float64x2_t *)((char *)&v48[-12] + 8);
      v61 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v51, _Q7.f64[0]), v53, _Q17.f64[0]), v55, _Q19.f64[0]);
      v62 = vmlad_n_f64(vmlad_n_f64(v4.f64[0] * _Q7.f64[0], _D2, _Q17.f64[0]), _D4, _Q19.f64[0]);
      v63 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v51, _Q7, 1), v53, _Q17, 1), v55, _Q19, 1);
      __asm
      {
        FMLA            D7, D2, V17.D[1]
        FMLA            D7, D4, V19.D[1]
      }
      v260 = v62;
      v259 = v61;
      v262 = _Q7.f64[0];
      v261 = v63;
      v263 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v51, _Q6.f64[0]), v53, v57), v55, v59);
      v264 = vmulq_f64(v4, _Q6).f64[0] + _D2 * v57 + _D4 * v59;
      v266 = 0;
      v265 = 0uLL;
      sub_20E9733B8(&v259, v265.f64);
      v64 = v48 - 4;
      v65 = v265;
      v48[-3].i64[0] = v266;
      v48[-4] = (int8x16_t)v65;
      v65.f64[0] = *(float64_t *)(v50 + 120);
      *(_QWORD *)&v66.f64[0] = v48[-9].i64[0];
      *(float64x2_t *)((char *)&v48[-3] + 8) = vsubq_f64(*(float64x2_t *)(v50 + 104), (float64x2_t)v48[-10]);
      v48[-2].i64[1] = *(_OWORD *)&vsubq_f64(v65, v66);
      v67 = (float64x2_t *)v48[-9].i64[1];
      v4 = vmulq_f64((float64x2_t)v48[-2], v67[3]);
      v68 = (int8x16_t)vmulq_f64((float64x2_t)v48[-3], v67[2]);
      v69 = (int8x16_t)vmulq_f64((float64x2_t)v48[-4], v67[1]);
      v48[-4] = v69;
      v48[-3] = v68;
      v48[-2] = (int8x16_t)v4;
      v48[-1].i8[8] = 1;
      if (v48->i64[0])
      {
        (*(void (**)(uint64_t, int8x16_t *))(*(_QWORD *)v48->i64[0] + 24))(v48->i64[0], v48 - 4);
        v68 = v48[-3];
        v4 = (float64x2_t)v48[-2];
        v69 = *v64;
      }
      _D3 = *(double *)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL).i64;
      _D4 = *(double *)vextq_s8(v68, v68, 8uLL).i64;
      _D5 = *(double *)vextq_s8(v69, v69, 8uLL).i64;
      v70 = v48 - 7;
      v71 = v48[-3];
      *v70 = *v64;
      v70[1] = v71;
      _Q6 = (float64x2_t)v48[-2];
      v70[2] = (int8x16_t)_Q6;
      _Q2.f64[1] = _D5;
      _Q2.f64[0] = vmulq_f64(_Q2, _Q2).f64[0] + _D5 * _D5;
      v72 = _Q2.f64[0] + *(double *)v68.i64 * *(double *)v68.i64 + _D4 * _D4 + v4.f64[0] * v4.f64[0] + _D3 * _D3;
      v5 = v18[3];
      v73 = v5 * v72;
      *(double *)v48[-1].i64 = v73;
      v22 = v22 + v73;
      v74 = &v48[1].i64[1];
      v48 = (int8x16_t *)((char *)v48 + 280);
    }
    while (v74 != (uint64_t *)v47);
LABEL_23:
    v19 = v257;
    v18 = v258;
  }
  *(double *)(a2 + 8) = v22 * 0.5;
  v75 = v19[103];
  v76 = v19[104];
  if (v75 == v76)
  {
    v77 = 0.0;
  }
  else
  {
    v77 = 0.0;
    do
    {
      while (1)
      {
        v78 = (_OWORD *)(v75 + 7856);
        v79 = sub_20F4B0BC8();
        *(_BYTE *)(v75 + 7984) = v79;
        if (v79)
          break;
        *(_QWORD *)(v75 + 7976) = 0;
        v75 += 8016;
        if (v75 == v76)
          goto LABEL_31;
      }
      _X8 = v75 + 24024;
      __asm { PRFM            #0, [X8] }
      v82 = *(_QWORD *)(v75 + 7992);
      if (v82)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v82 + 24))(v82, v75 + 7856);
      _X8 = v75 + 23888;
      v84 = *(_OWORD *)(v75 + 7936);
      *(_OWORD *)(v75 + 7800) = *(_OWORD *)(v75 + 7920);
      *(_OWORD *)(v75 + 7816) = v84;
      _Q2 = *(float64x2_t *)(v75 + 7936);
      *(_OWORD *)(v75 + 7832) = *(_OWORD *)(v75 + 7952);
      *(_QWORD *)(v75 + 7848) = *(_QWORD *)(v75 + 7968);
      v85 = *(_OWORD *)(v75 + 7872);
      *(_OWORD *)(v75 + 7736) = *v78;
      *(_OWORD *)(v75 + 7752) = v85;
      v86 = *(_OWORD *)(v75 + 7904);
      *(_OWORD *)(v75 + 7768) = *(_OWORD *)(v75 + 7888);
      *(_OWORD *)(v75 + 7784) = v86;
      __asm { PRFM            #0, [X8] }
      _Q6 = *(float64x2_t *)(v75 + 7872);
      _Q7 = *v78;
      _D17 = *(_QWORD *)(v75 + 7864);
      __asm { FMLA            D16, D17, V7.D[1] }
      *(float64_t *)&_Q7 = _Q6.f64[1];
      __asm { FMLA            D16, D7, V6.D[1] }
      _Q6.f64[0] = *(float64_t *)(v75 + 7896);
      __asm { FMLA            D16, D6, V5.D[1] }
      _D5 = *(double *)(v75 + 7912);
      __asm { FMLA            D16, D5, V4.D[1] }
      _D4 = *(double *)(v75 + 7928);
      __asm { FMLA            D16, D4, V3.D[1] }
      _D3 = _Q2.f64[1];
      __asm { FMLA            D16, D3, V2.D[1] }
      _Q2.f64[0] = *(float64_t *)(v75 + 7960);
      __asm { FMLA            D16, D2, V1.D[1] }
      v5 = v18[5];
      v97 = v5 * (_D16 + *(double *)(v75 + 7968) * *(double *)(v75 + 7968));
      *(double *)(v75 + 7976) = v97;
      v77 = v77 + v97;
      v75 += 8016;
    }
    while (v75 != v76);
LABEL_31:
    v19 = v257;
    v18 = v258;
  }
  *(double *)(a2 + 16) = v77 * 0.5;
  v268 = *(_BYTE *)(a1 + 1875);
  v267 = 0.0;
  v117 = v19[106];
  v118 = v19[107];
  *(_QWORD *)&v259.f64[0] = &v268;
  *(_QWORD *)&v259.f64[1] = v18 + 6;
  v260 = COERCE_DOUBLE(&v257);
  *(_QWORD *)&v261.f64[0] = &v267;
  sub_20F4D78F4(&v265, v117, v118, (uint64_t)&v259, v77 * 0.5, v5, _Q2.f64[0], _D3, _D4, _D5, _Q6);
  v126 = v267 * 0.5;
  *(double *)(a2 + 24) = v267 * 0.5;
  v127 = v257;
  v128 = v257[109];
  v129 = v257[110];
  v130 = 0.0;
  v131 = 0.0;
  if (v128 != v129)
  {
    v132 = v258;
    do
    {
      while (1)
      {
        v133 = sub_20FC7133C(v128 + 8, (uint64_t *)(v128 + 56), v128 + 160, v126, v119.f64[0], v120, v121, v122, v123, v124, v125);
        *(_BYTE *)(v128 + 184) = v133;
        if (v133)
          break;
        *(_QWORD *)(v128 + 176) = 0;
        v128 += 216;
        if (v128 == v129)
          goto LABEL_44;
      }
      v134 = *(_QWORD *)(v128 + 192);
      if (v134)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v134 + 24))(v134, v128 + 160);
      *(_OWORD *)(v128 + 144) = *(_OWORD *)(v128 + 160);
      v255 = *(float64x2_t *)(v128 + 160);
      _D1 = v255.f64[1];
      __asm { FMLA            D0, D1, V2.D[1] }
      v137 = v132[10];
      v138 = v132[11] * (v132[9] * _D0);
      v139 = v138 + 1.0;
      v126 = v137 * log1p(v138);
      *(double *)(v128 + 176) = v126;
      v120 = v255.f64[0];
      v119 = vmulq_n_f64(v255, sqrt(1.0 / v139));
      *(float64x2_t *)(v128 + 160) = v119;
      v131 = v131 + v126;
      v128 += 216;
    }
    while (v128 != v129);
LABEL_44:
    v127 = v257;
  }
  *(double *)(a2 + 32) = v131 * 0.5;
  v140 = v127[112];
  v141 = v127[113];
  if (v140 != v141)
  {
    v130 = 0.0;
    v142 = v258;
    do
    {
      while (1)
      {
        v143 = (_OWORD *)(v140 + 800);
        v144 = sub_20F3E115C(v140 + 8, (_QWORD *)(v140 + 736), (float64x2_t *)(v140 + 800));
        *(_BYTE *)(v140 + 856) = v144;
        if (v144)
          break;
        *(_QWORD *)(v140 + 848) = 0;
        v140 += 888;
        if (v140 == v141)
          goto LABEL_52;
      }
      v145 = *(_QWORD *)(v140 + 864);
      if (v145)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v145 + 24))(v145, v140 + 800);
      v146 = *(_OWORD *)(v140 + 816);
      *(_OWORD *)(v140 + 752) = *v143;
      *(_OWORD *)(v140 + 768) = v146;
      _Q2 = *v143;
      _Q1 = *(_OWORD *)(v140 + 816);
      *(_OWORD *)(v140 + 784) = *(_OWORD *)(v140 + 832);
      _D4 = *((_QWORD *)&_Q2 + 1);
      __asm { FMLA            D3, D4, V2.D[1] }
      *(_QWORD *)&_Q2 = *((_QWORD *)&_Q1 + 1);
      __asm { FMLA            D3, D2, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v140 + 840);
      __asm { FMLA            D3, D1, V0.D[1] }
      v153 = v142[13] * _D3;
      *(double *)(v140 + 848) = v153;
      v130 = v130 + v153;
      v140 += 888;
    }
    while (v140 != v141);
  }
LABEL_52:
  v154 = v130 * 0.5;
LABEL_117:
  *(double *)(a2 + 40) = v154;
  *(_WORD *)(a1 + 1875) = 257;
  v247 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v248 = *(double *)a2;
  v249 = *(double *)(a2 + 8);
  v250 = *(double *)(a2 + 16);
  v251 = *(double *)(a2 + 24);
  v252 = *(double *)(a2 + 32);
  v253 = *(double *)(a2 + 40);
  kdebug_trace();
  return v247 + v248 + v249 + v250 + v251 + v252 + v253;
}

void sub_20F4AFEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F4AFF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F4AFF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F4AFF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F4AFF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F4AFF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F4AFF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

BOOL sub_20F4AFF88(char *a1, float64x2_t **a2, unint64_t a3)
{
  float64x2_t v3;
  int64x2_t v4;
  uint64_t v5;
  float64x2_t *v7;
  const double *v8;
  double v9;
  double v10;
  double v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  unint64_t v15;
  float64x2_t v16;
  unint64_t v17;
  double v18;
  float64x2_t v20;
  double v27;
  float64x2_t v28;
  float64x2_t v31;
  double v34;
  float64_t v35;
  float64x2_t v36;
  float64x2_t v37;
  int64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  double v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  int64x2_t v49;
  float64x2_t v50;
  int8x16_t v51;
  int8x16_t v52;
  const void *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  float64x2_t v60;
  float64x2_t v63;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  double v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v104;
  float64x2_t v106;
  _BYTE v108[1800];
  uint64_t v109;
  float64x2x3_t v110;

  v109 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 23);
  if (v5)
  {
    v7 = a2[1];
    v8 = (const double *)(a1 + 16);
    v9 = (*a2)[3].f64[0];
    v10 = (*a2)[4].f64[1];
    v11 = (*a2)[6].f64[0];
    v12 = *(float64x2_t *)((char *)v7 + 56);
    v110 = vld3q_f64(v8);
    v13 = v7[5];
    *(_QWORD *)&v14.f64[0] = vextq_s8(*(int8x16_t *)((char *)&(*a2)[6] + 8), *(int8x16_t *)((char *)&(*a2)[6] + 8), 8uLL).u64[0];
    v15 = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
    *(_QWORD *)&v16.f64[0] = vextq_s8((int8x16_t)v7[2], (int8x16_t)v7[2], 8uLL).u64[0];
    v17 = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
    v18 = *((double *)a1 + 10);
    _Q8 = *((_OWORD *)a1 + 4);
    v20 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v110.val[0], (*a2)[2].f64[0]), v110.val[1], (*a2)[2], 1), v110.val[2], v9);
    _D24 = (*a2)[2].f64[1];
    __asm { FMLA            D25, D24, V8.D[1] }
    v27 = _D25 + v18 * v9;
    v28 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v110.val[0], (*a2)[3].f64[1]), v110.val[1], *(float64x2_t *)((char *)*a2 + 56), 1), v110.val[2], v10);
    _D27 = (*a2)[4].f64[0];
    __asm { FMLA            D24, D27, V8.D[1] }
    *(double *)v4.i64 = _D24 + v18 * v10;
    v31 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v110.val[0], (*a2)[5].f64[0]), v110.val[1], (*a2)[5], 1), v110.val[2], v11);
    _D22 = (*a2)[5].f64[1];
    __asm { FMLA            D27, D22, V8.D[1] }
    v34 = _D27 + v18 * v11;
    if (v34 >= 0.0)
    {
      if (v20.f64[0] >= -v28.f64[1])
      {
        v40 = (float64x2_t)vzip1q_s64(v4, (int64x2_t)v31);
        *(_QWORD *)&v41.f64[0] = vdupq_laneq_s64((int64x2_t)v31, 1).u64[0];
        v41.f64[1] = v27;
        v37 = vsubq_f64(v40, v41);
        v3 = vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v20, 1), v28);
        v20.f64[0] = v34 + 1.0 + v20.f64[0] + v28.f64[1];
      }
      else
      {
        v37.f64[0] = v31.f64[0] + v27;
        v3.f64[0] = v34 + 1.0 - (v20.f64[0] + v28.f64[1]);
        v37.f64[1] = *(double *)v4.i64 + v31.f64[1];
        v20.f64[0] = v3.f64[0];
      }
    }
    else if (v20.f64[0] <= v28.f64[1])
    {
      v38 = (int64x2_t)vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v20, 1), v28);
      *(_QWORD *)&v39.f64[1] = v4.i64[0];
      v39.f64[0] = 1.0 - v34;
      v31.f64[0] = v28.f64[1] - v20.f64[0];
      v20 = vaddq_f64(v39, v31);
      v37 = (float64x2_t)vzip1q_s64(v38, (int64x2_t)v20);
      v3 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v20, 1);
    }
    else
    {
      v35 = v20.f64[0] - v28.f64[1];
      v20.f64[0] = 1.0 - v34;
      v36 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v28.f64[0], 0);
      v36.f64[0] = v35;
      v37 = vaddq_f64(v20, v36);
      v3.f64[0] = v31.f64[0] + v27;
      v20.f64[0] = v37.f64[0];
    }
    v42 = 0.5 / sqrt(v20.f64[0]);
    v43 = vmulq_n_f64(v37, v42);
    v44 = vmulq_n_f64(v3, v42);
    v45 = *(float64x2_t *)(a1 + 88);
    *(_QWORD *)&v13.f64[1] = v15;
    v46 = vsubq_f64(v13, *(float64x2_t *)(a1 + 136));
    *(_QWORD *)&v12.f64[1] = v17;
    v16.f64[1] = v7[3].f64[0];
    v47 = vsubq_f64(v16, *(float64x2_t *)(a1 + 120));
    v48.f64[1] = v7[2].f64[0];
    v48.f64[0] = v7[4].f64[1];
    v49 = (int64x2_t)vsubq_f64(v48, *(float64x2_t *)(a1 + 104));
    v50.f64[1] = (*a2)[6].f64[1];
    v50.f64[0] = v7[6].f64[0];
    v51 = (int8x16_t)vsubq_f64(v50, *(float64x2_t *)(a1 + 152));
    v14.f64[1] = (*a2)[7].f64[1];
    v52 = (int8x16_t)vsubq_f64(v14, *(float64x2_t *)(a1 + 168));
    *(float64x2_t *)a3 = vaddq_f64(v43, v43);
    *(_QWORD *)(a3 + 16) = *(_OWORD *)&vaddq_f64(v44, v44);
    *(int8x16_t *)(a3 + 24) = vextq_s8(v51, v52, 8uLL);
    *(int64x2_t *)(a3 + 40) = vzip2q_s64((int64x2_t)v52, v49);
    *(float64x2_t *)(a3 + 56) = v47;
    *(float64x2_t *)(a3 + 72) = vsubq_f64(v12, v45);
    *(_QWORD *)(a3 + 88) = v49.i64[0];
    *(float64x2_t *)(a3 + 96) = v46;
    *(_QWORD *)(a3 + 112) = v51.i64[0];
    if (a3 + 120 > v5 + 16 && v5 + 1816 > a3)
    {
      ((void (*)(void))MEMORY[0x24BDAC7A8])();
      a1 = (char *)memcpy(v108, v53, sizeof(v108));
    }
    MEMORY[0x24BDAC7A8](a1);
    v54 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v108[-128] = *(_OWORD *)a3;
    *(_OWORD *)&v108[-112] = v54;
    v55 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)&v108[-96] = *(_OWORD *)(a3 + 32);
    *(_OWORD *)&v108[-80] = v55;
    v56 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)&v108[-64] = *(_OWORD *)(a3 + 64);
    *(_OWORD *)&v108[-48] = v56;
    *(_QWORD *)&v108[-16] = *(_QWORD *)(a3 + 112);
    *(_OWORD *)&v108[-32] = *(_OWORD *)(a3 + 96);
    _Q7 = *(float64x2_t *)&v108[-128];
    _Q17 = _Q7;
    v60 = *(float64x2_t *)&v108[-112];
    _Q1 = v60;
    v63 = *(float64x2_t *)&v108[-96];
    _Q2 = v63;
    v65 = *(float64x2_t *)&v108[-80];
    v66 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v57 + 16), _Q7.f64[0]), *(float64x2_t *)(v57 + 136), _Q7, 1), *(float64x2_t *)(v57 + 256), v60.f64[0]), *(float64x2_t *)(v58 + 104), v60, 1), *(float64x2_t *)(v57 + 496), v63.f64[0]), *(float64x2_t *)(v57 + 616), v63,
                1),
              *(float64x2_t *)(v57 + 736),
              v65.f64[0]),
            *(float64x2_t *)(v57 + 856),
            v65,
            1);
    _Q3 = v65;
    v68 = *(float64x2_t *)&v108[-64];
    v69 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v57, _Q7.f64[0]), *(float64x2_t *)(v57 + 120), _Q7, 1), *(float64x2_t *)(v57 + 240), v60.f64[0]), *(float64x2_t *)(v58 + 88), v60, 1), *(float64x2_t *)(v57 + 480), v63.f64[0]),
                    *(float64x2_t *)(v57 + 600),
                    v63,
                    1),
                  *(float64x2_t *)(v57 + 720),
                  v65.f64[0]),
                *(float64x2_t *)(v57 + 840),
                v65,
                1),
              *(float64x2_t *)(v57 + 960),
              v68.f64[0]),
            *(float64x2_t *)(v57 + 1080),
            v68,
            1);
    _Q4 = v68;
    v71 = *(float64x2_t *)&v108[-48];
    v72 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v66, *(float64x2_t *)(v57 + 976), v68.f64[0]), *(float64x2_t *)(v57 + 1096), v68, 1), *(float64x2_t *)(v57 + 1216), v71.f64[0]), *(float64x2_t *)(v57 + 1336), v71, 1);
    _Q5 = v71;
    v74 = *(float64x2_t *)&v108[-32];
    v75 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v69, *(float64x2_t *)(v57 + 1200), v71.f64[0]), *(float64x2_t *)(v57 + 1320), v71, 1), *(float64x2_t *)(v57 + 1440), v74.f64[0]);
    v71.f64[0] = *(float64_t *)&v108[-16];
    v76 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v72, *(float64x2_t *)(v57 + 1456), v74.f64[0]), *(float64x2_t *)(v57 + 1576), v74, 1), *(float64x2_t *)(v57 + 1696), v71.f64[0]);
    *(float64x2_t *)a3 = vmlaq_n_f64(vmlaq_laneq_f64(v75, *(float64x2_t *)(v57 + 1560), v74, 1), *(float64x2_t *)(v57 + 1680), v71.f64[0]);
    *(float64x2_t *)(a3 + 16) = v76;
    v77 = *(float64x2_t *)&v108[-128];
    v78 = *(float64x2_t *)&v108[-112];
    v79 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v57 + 32), v77.f64[0]), *(float64x2_t *)(v57 + 152), v77, 1), *(float64x2_t *)(v57 + 272), v78.f64[0]), *(float64x2_t *)(v58 + 120), v78, 1);
    v80 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v57 + 48), v77.f64[0]), *(float64x2_t *)(v57 + 168), v77, 1), *(float64x2_t *)(v57 + 288), v78.f64[0]), *(float64x2_t *)(v58 + 136), v78, 1);
    v81 = *(float64x2_t *)&v108[-96];
    v82 = *(float64x2_t *)&v108[-80];
    v83 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v80, *(float64x2_t *)(v57 + 528), v81.f64[0]), *(float64x2_t *)(v57 + 648), v81, 1), *(float64x2_t *)(v57 + 768), v82.f64[0]), *(float64x2_t *)(v57 + 888), v82, 1);
    v84 = *(float64x2_t *)&v108[-64];
    v85 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v79, *(float64x2_t *)(v57 + 512), v81.f64[0]), *(float64x2_t *)(v57 + 632), v81, 1), *(float64x2_t *)(v57 + 752), v82.f64[0]), *(float64x2_t *)(v57 + 872), v82, 1), *(float64x2_t *)(v57 + 992), v84.f64[0]);
    v86 = *(float64x2_t *)&v108[-48];
    v87 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v85, *(float64x2_t *)(v57 + 1112), v84, 1), *(float64x2_t *)(v57 + 1232), v86.f64[0]), *(float64x2_t *)(v57 + 1352), v86, 1);
    v88 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v83, *(float64x2_t *)(v57 + 1008), v84.f64[0]), *(float64x2_t *)(v57 + 1128), v84, 1), *(float64x2_t *)(v57 + 1248), v86.f64[0]), *(float64x2_t *)(v57 + 1368), v86, 1);
    v89 = *(float64x2_t *)&v108[-32];
    v90 = *(double *)&v108[-16];
    v91 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v88, *(float64x2_t *)(v57 + 1488), v89.f64[0]), *(float64x2_t *)(v57 + 1608), v89, 1), *(float64x2_t *)(v57 + 1728), v90);
    *(float64x2_t *)(a3 + 32) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v87, *(float64x2_t *)(v57 + 1472), v89.f64[0]), *(float64x2_t *)(v57 + 1592), v89, 1), *(float64x2_t *)(v57 + 1712), v90);
    *(float64x2_t *)(a3 + 48) = v91;
    v92 = *(float64x2_t *)&v108[-128];
    _Q16 = *(float64x2_t *)&v108[-112];
    v94 = *(float64x2_t *)&v108[-96];
    v95 = *(float64x2_t *)&v108[-80];
    v96 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v57 + 64), v92.f64[0]), *(float64x2_t *)(v57 + 184), v92, 1), *(float64x2_t *)(v57 + 304), _Q16.f64[0]), *(float64x2_t *)(v58 + 152), _Q16, 1), *(float64x2_t *)(v57 + 544), v94.f64[0]), *(float64x2_t *)(v57 + 664), v94,
                1),
              *(float64x2_t *)(v57 + 784),
              v95.f64[0]),
            *(float64x2_t *)(v57 + 904),
            v95,
            1);
    v97 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v57 + 80), v92.f64[0]), *(float64x2_t *)(v57 + 200), v92, 1), *(float64x2_t *)(v57 + 320), _Q16.f64[0]), *(float64x2_t *)(v58 + 168), _Q16, 1), *(float64x2_t *)(v57 + 560), v94.f64[0]), *(float64x2_t *)(v57 + 680), v94,
                1),
              *(float64x2_t *)(v57 + 800),
              v95.f64[0]),
            *(float64x2_t *)(v57 + 920),
            v95,
            1);
    v98 = *(float64x2_t *)&v108[-64];
    _Q18 = *(float64x2_t *)&v108[-48];
    v100 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v96, *(float64x2_t *)(v57 + 1024), v98.f64[0]), *(float64x2_t *)(v57 + 1144), v98, 1), *(float64x2_t *)(v57 + 1264), _Q18.f64[0]), *(float64x2_t *)(v57 + 1384), _Q18, 1);
    v101 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v97, *(float64x2_t *)(v57 + 1040), v98.f64[0]), *(float64x2_t *)(v57 + 1160), v98, 1), *(float64x2_t *)(v57 + 1280), _Q18.f64[0]), *(float64x2_t *)(v57 + 1400), _Q18, 1);
    v102 = *(float64x2_t *)&v108[-32];
    _Q18.f64[0] = *(float64_t *)&v108[-16];
    _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v101, *(float64x2_t *)(v57 + 1520), v102.f64[0]), *(float64x2_t *)(v57 + 1640), v102, 1), *(float64x2_t *)(v57 + 1760), _Q18.f64[0]);
    *(float64x2_t *)(a3 + 64) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v100, *(float64x2_t *)(v57 + 1504), v102.f64[0]), *(float64x2_t *)(v57 + 1624), v102, 1), *(float64x2_t *)(v57 + 1744), _Q18.f64[0]);
    *(float64x2_t *)(a3 + 80) = _Q0;
    _Q7.f64[0] = *(float64_t *)(v57 + 232);
    _Q16.f64[0] = *(float64_t *)(v57 + 472);
    __asm
    {
      FMLA            D0, D7, V17.D[1]
      FMLA            D0, D16, V1.D[1]
    }
    _Q16.f64[0] = *(float64_t *)(v57 + 712);
    _Q7.f64[0] = *(float64_t *)(v57 + 952);
    v104 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v57 + 96), _Q17.f64[0]), *(float64x2_t *)(v57 + 216), _Q17, 1), *(float64x2_t *)(v57 + 336), _Q1.f64[0]), *(float64x2_t *)(v58 + 184), _Q1, 1), *(float64x2_t *)(v57 + 576), _Q2.f64[0]), *(float64x2_t *)(v57 + 696), _Q2,
                 1),
               *(float64x2_t *)(v57 + 816),
               _Q3.f64[0]),
             *(float64x2_t *)(v57 + 936),
             _Q3,
             1);
    __asm
    {
      FMLA            D0, D16, V2.D[1]
      FMLA            D0, D7, V3.D[1]
    }
    _Q3.f64[0] = *(float64_t *)(v57 + 1192);
    _Q18.f64[0] = *(float64_t *)(v57 + 1432);
    __asm
    {
      FMLA            D0, D3, V4.D[1]
      FMLA            D0, D18, V5.D[1]
    }
    _Q3.f64[0] = *(float64_t *)(v57 + 1672);
    _Q16.f64[0] = *(float64_t *)&v108[-16];
    _Q17 = *(float64x2_t *)&v108[-32];
    v106 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v104, *(float64x2_t *)(v57 + 1056), _Q4.f64[0]), *(float64x2_t *)(v57 + 1176), _Q4, 1), *(float64x2_t *)(v57 + 1296), _Q5.f64[0]), *(float64x2_t *)(v57 + 1416), _Q5, 1), *(float64x2_t *)(v57 + 1536), _Q17.f64[0]), *(float64x2_t *)(v57 + 1656), _Q17, 1),
             *(float64x2_t *)(v57 + 1776),
             _Q16.f64[0]);
    __asm { FMLA            D0, D3, V17.D[1] }
    *(double *)(a3 + 112) = _Q0.f64[0] + *(double *)(v57 + 1792) * _Q16.f64[0];
    *(float64x2_t *)(a3 + 96) = v106;
  }
  return v5 != 0;
}

float64_t sub_20F4B06A4(void *a1, unint64_t a2)
{
  const void *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  float64x2_t v10;
  float64x2_t v13;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  double v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v58;
  float64x2_t v60;
  float64_t result;
  _BYTE v62[1800];
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  if (a2 + 120 > (unint64_t)a1 + 16 && (unint64_t)a1 + 1816 > a2)
  {
    MEMORY[0x24BDAC7A8](a1);
    a1 = memcpy(v62, v3, sizeof(v62));
  }
  MEMORY[0x24BDAC7A8](a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&v62[-128] = *(_OWORD *)a2;
  *(_OWORD *)&v62[-112] = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v62[-96] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v62[-80] = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)&v62[-64] = *(_OWORD *)(a2 + 64);
  *(_OWORD *)&v62[-48] = v6;
  *(_QWORD *)&v62[-16] = *(_QWORD *)(a2 + 112);
  *(_OWORD *)&v62[-32] = *(_OWORD *)(a2 + 96);
  _Q7 = *(float64x2_t *)&v62[-128];
  _Q17 = _Q7;
  v10 = *(float64x2_t *)&v62[-112];
  _Q1 = v10;
  v13 = *(float64x2_t *)&v62[-96];
  _Q2 = v13;
  v15 = *(float64x2_t *)&v62[-80];
  v16 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v7 + 16), _Q7.f64[0]), *(float64x2_t *)(v7 + 136), _Q7, 1), *(float64x2_t *)(v7 + 256), v10.f64[0]), *(float64x2_t *)(v8 + 104), v10, 1), *(float64x2_t *)(v7 + 496), v13.f64[0]), *(float64x2_t *)(v7 + 616), v13,
              1),
            *(float64x2_t *)(v7 + 736),
            v15.f64[0]),
          *(float64x2_t *)(v7 + 856),
          v15,
          1);
  _Q3 = v15;
  v18 = *(float64x2_t *)&v62[-64];
  v19 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v7, _Q7.f64[0]), *(float64x2_t *)(v7 + 120), _Q7, 1), *(float64x2_t *)(v7 + 240), v10.f64[0]), *(float64x2_t *)(v8 + 88), v10, 1), *(float64x2_t *)(v7 + 480), v13.f64[0]), *(float64x2_t *)(v7 + 600), v13, 1), *(float64x2_t *)(v7 + 720),
                v15.f64[0]),
              *(float64x2_t *)(v7 + 840),
              v15,
              1),
            *(float64x2_t *)(v7 + 960),
            v18.f64[0]),
          *(float64x2_t *)(v7 + 1080),
          v18,
          1);
  _Q4 = v18;
  v21 = *(float64x2_t *)&v62[-48];
  v22 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v16, *(float64x2_t *)(v7 + 976), v18.f64[0]), *(float64x2_t *)(v7 + 1096), v18, 1), *(float64x2_t *)(v7 + 1216), v21.f64[0]), *(float64x2_t *)(v7 + 1336), v21, 1);
  _Q5 = v21;
  v24 = *(float64x2_t *)&v62[-32];
  v25 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v19, *(float64x2_t *)(v7 + 1200), v21.f64[0]), *(float64x2_t *)(v7 + 1320), v21, 1), *(float64x2_t *)(v7 + 1440), v24.f64[0]);
  v21.f64[0] = *(float64_t *)&v62[-16];
  v26 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v22, *(float64x2_t *)(v7 + 1456), v24.f64[0]), *(float64x2_t *)(v7 + 1576), v24, 1), *(float64x2_t *)(v7 + 1696), v21.f64[0]);
  *(float64x2_t *)a2 = vmlaq_n_f64(vmlaq_laneq_f64(v25, *(float64x2_t *)(v7 + 1560), v24, 1), *(float64x2_t *)(v7 + 1680), v21.f64[0]);
  *(float64x2_t *)(a2 + 16) = v26;
  v27 = *(float64x2_t *)&v62[-128];
  v28 = *(float64x2_t *)&v62[-112];
  v29 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v7 + 32), v27.f64[0]), *(float64x2_t *)(v7 + 152), v27, 1), *(float64x2_t *)(v7 + 272), v28.f64[0]), *(float64x2_t *)(v8 + 120), v28, 1);
  v30 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v7 + 48), v27.f64[0]), *(float64x2_t *)(v7 + 168), v27, 1), *(float64x2_t *)(v7 + 288), v28.f64[0]), *(float64x2_t *)(v8 + 136), v28, 1);
  v31 = *(float64x2_t *)&v62[-96];
  v32 = *(float64x2_t *)&v62[-80];
  v33 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v30, *(float64x2_t *)(v7 + 528), v31.f64[0]), *(float64x2_t *)(v7 + 648), v31, 1), *(float64x2_t *)(v7 + 768), v32.f64[0]), *(float64x2_t *)(v7 + 888), v32, 1);
  v34 = *(float64x2_t *)&v62[-64];
  v35 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v29, *(float64x2_t *)(v7 + 512), v31.f64[0]), *(float64x2_t *)(v7 + 632), v31, 1), *(float64x2_t *)(v7 + 752), v32.f64[0]), *(float64x2_t *)(v7 + 872), v32, 1), *(float64x2_t *)(v7 + 992), v34.f64[0]);
  v36 = *(float64x2_t *)&v62[-48];
  v37 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v35, *(float64x2_t *)(v7 + 1112), v34, 1), *(float64x2_t *)(v7 + 1232), v36.f64[0]), *(float64x2_t *)(v7 + 1352), v36, 1);
  v38 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v33, *(float64x2_t *)(v7 + 1008), v34.f64[0]), *(float64x2_t *)(v7 + 1128), v34, 1), *(float64x2_t *)(v7 + 1248), v36.f64[0]), *(float64x2_t *)(v7 + 1368), v36, 1);
  v39 = *(float64x2_t *)&v62[-32];
  v40 = *(double *)&v62[-16];
  v41 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v38, *(float64x2_t *)(v7 + 1488), v39.f64[0]), *(float64x2_t *)(v7 + 1608), v39, 1), *(float64x2_t *)(v7 + 1728), v40);
  *(float64x2_t *)(a2 + 32) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v37, *(float64x2_t *)(v7 + 1472), v39.f64[0]), *(float64x2_t *)(v7 + 1592), v39, 1), *(float64x2_t *)(v7 + 1712), v40);
  *(float64x2_t *)(a2 + 48) = v41;
  v42 = *(float64x2_t *)&v62[-128];
  _Q16 = *(float64x2_t *)&v62[-112];
  v44 = *(float64x2_t *)&v62[-96];
  v45 = *(float64x2_t *)&v62[-80];
  v46 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v7 + 64), v42.f64[0]), *(float64x2_t *)(v7 + 184), v42, 1), *(float64x2_t *)(v7 + 304), _Q16.f64[0]), *(float64x2_t *)(v8 + 152), _Q16, 1), *(float64x2_t *)(v7 + 544), v44.f64[0]), *(float64x2_t *)(v7 + 664), v44,
              1),
            *(float64x2_t *)(v7 + 784),
            v45.f64[0]),
          *(float64x2_t *)(v7 + 904),
          v45,
          1);
  v47 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v7 + 80), v42.f64[0]), *(float64x2_t *)(v7 + 200), v42, 1), *(float64x2_t *)(v7 + 320), _Q16.f64[0]), *(float64x2_t *)(v8 + 168), _Q16, 1), *(float64x2_t *)(v7 + 560), v44.f64[0]), *(float64x2_t *)(v7 + 680), v44,
              1),
            *(float64x2_t *)(v7 + 800),
            v45.f64[0]),
          *(float64x2_t *)(v7 + 920),
          v45,
          1);
  v48 = *(float64x2_t *)&v62[-64];
  _Q18 = *(float64x2_t *)&v62[-48];
  v50 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v46, *(float64x2_t *)(v7 + 1024), v48.f64[0]), *(float64x2_t *)(v7 + 1144), v48, 1), *(float64x2_t *)(v7 + 1264), _Q18.f64[0]), *(float64x2_t *)(v7 + 1384), _Q18, 1);
  v51 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v47, *(float64x2_t *)(v7 + 1040), v48.f64[0]), *(float64x2_t *)(v7 + 1160), v48, 1), *(float64x2_t *)(v7 + 1280), _Q18.f64[0]), *(float64x2_t *)(v7 + 1400), _Q18, 1);
  v52 = *(float64x2_t *)&v62[-32];
  _Q18.f64[0] = *(float64_t *)&v62[-16];
  _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v51, *(float64x2_t *)(v7 + 1520), v52.f64[0]), *(float64x2_t *)(v7 + 1640), v52, 1), *(float64x2_t *)(v7 + 1760), _Q18.f64[0]);
  *(float64x2_t *)(a2 + 64) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v50, *(float64x2_t *)(v7 + 1504), v52.f64[0]), *(float64x2_t *)(v7 + 1624), v52, 1), *(float64x2_t *)(v7 + 1744), _Q18.f64[0]);
  *(float64x2_t *)(a2 + 80) = _Q0;
  _Q7.f64[0] = *(float64_t *)(v7 + 232);
  _Q16.f64[0] = *(float64_t *)(v7 + 472);
  __asm
  {
    FMLA            D0, D7, V17.D[1]
    FMLA            D0, D16, V1.D[1]
  }
  _Q16.f64[0] = *(float64_t *)(v7 + 712);
  _Q7.f64[0] = *(float64_t *)(v7 + 952);
  v58 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v7 + 96), _Q17.f64[0]), *(float64x2_t *)(v7 + 216), _Q17, 1), *(float64x2_t *)(v7 + 336), _Q1.f64[0]), *(float64x2_t *)(v8 + 184), _Q1, 1), *(float64x2_t *)(v7 + 576), _Q2.f64[0]), *(float64x2_t *)(v7 + 696), _Q2,
              1),
            *(float64x2_t *)(v7 + 816),
            _Q3.f64[0]),
          *(float64x2_t *)(v7 + 936),
          _Q3,
          1);
  __asm
  {
    FMLA            D0, D16, V2.D[1]
    FMLA            D0, D7, V3.D[1]
  }
  _Q3.f64[0] = *(float64_t *)(v7 + 1192);
  _Q18.f64[0] = *(float64_t *)(v7 + 1432);
  __asm
  {
    FMLA            D0, D3, V4.D[1]
    FMLA            D0, D18, V5.D[1]
  }
  _Q3.f64[0] = *(float64_t *)(v7 + 1672);
  _Q16.f64[0] = *(float64_t *)&v62[-16];
  _Q17 = *(float64x2_t *)&v62[-32];
  v60 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v58, *(float64x2_t *)(v7 + 1056), _Q4.f64[0]), *(float64x2_t *)(v7 + 1176), _Q4, 1), *(float64x2_t *)(v7 + 1296), _Q5.f64[0]), *(float64x2_t *)(v7 + 1416), _Q5, 1), *(float64x2_t *)(v7 + 1536), _Q17.f64[0]), *(float64x2_t *)(v7 + 1656), _Q17, 1),
          *(float64x2_t *)(v7 + 1776),
          _Q16.f64[0]);
  __asm { FMLA            D0, D3, V17.D[1] }
  result = _Q0.f64[0] + *(double *)(v7 + 1792) * _Q16.f64[0];
  *(float64_t *)(a2 + 112) = result;
  *(float64x2_t *)(a2 + 96) = v60;
  return result;
}

float64x2_t sub_20F4B0B98(float64x2_t *a1, float64x2_t *a2)
{
  float64x2_t result;
  float64x2_t v3;

  result = vmulq_f64(*a2, a1[1]);
  v3 = vmulq_f64(a2[2], a1[3]);
  a2[1] = vmulq_f64(a2[1], a1[2]);
  a2[2] = v3;
  *a2 = result;
  return result;
}

uint64_t sub_20F4B0BC8()
{
  uint64_t v0;
  int8x16_t **v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t **v9;
  int8x16_t *v10;
  int8x16_t *v11;
  float64x2_t v12;
  int8x16_t *v13;
  int8x16_t *v14;
  int8x16_t *v15;
  _OWORD *v16;
  __int128 v17;
  _OWORD *v18;
  __int128 v19;
  double v20;
  double v21;
  double v22;
  double *v23;
  double *v24;
  unint64_t v25;
  double *v26;
  double *v27;
  double *v28;
  double *v29;
  double *v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  double *v34;
  int8x16_t v35;
  unint64_t v36;
  int v37;
  float64x2_t *v38;
  unint64_t v39;
  unint64_t v40;
  int8x16_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  float64x2_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  float64x2_t v50;
  float64x2_t v51;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  float64x2_t v62;
  double v63;
  float64x2_t v65;
  float64_t v66;
  float64x2_t v69;
  float64x2_t v71;
  float64x2_t v73;
  float64x2_t v75;
  double v81;
  double v82;
  double v83;
  double v84;
  float64x2_t v85;
  float64_t v86;
  double v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v94;
  float64x2_t v96;
  double v98;
  float64x2_t v99;
  float64x2_t v101;
  float64x2_t v104;
  uint64_t v105;
  float64x2_t v107;
  float64x2_t v109;
  float64x2_t v111;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v121;
  float64x2_t v122;
  double v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  uint64_t v152;
  double v153;
  double v154;
  double v155;
  float64x2_t v156;
  float64x2_t v157;
  double v158;
  double v159;
  float64x2_t v160;
  uint64_t v161;
  _BOOL4 v162;
  int v163;
  unint64_t v164;
  uint64_t v165;
  const char *v166;
  unsigned __int8 v167;
  const char *v168;
  size_t v169;
  void *v170;
  size_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  NSObject *v177;
  std::__shared_weak_count *v178;
  unint64_t *p_shared_owners;
  unint64_t v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  float64x2_t v218;
  unint64_t v219;
  float64x2_t v220;
  unint64_t v221;
  float64x2_t v222;
  float64x2_t v224;
  float64x2_t v225;
  int64x2_t v226;
  float64x2_t v228;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  int64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  double v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  uint64_t v262;
  unint64_t v263;
  int8x16_t v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  uint64_t v269;
  float64x2_t *v270;
  float64x2_t *v271;
  float64x2_t v272;
  int v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t *v277;
  size_t v278;
  const char *v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  uint64_t v360;
  double v361;
  int v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v366;
  uint64_t *v367;
  void *v368;
  void *v369;
  unsigned __int8 v370;
  const char *v371;
  size_t v372;
  _BYTE *v373;
  uint64_t v374;
  uint64_t v375;
  _BYTE *v376;
  uint64_t v377;
  uint64_t v378;
  NSObject *v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  unsigned __int8 v383;
  float64_t v384;
  const char *v385;
  NSObject *v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  int8x16_t v393;
  float64x2_t v394;
  int v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t *v399;
  void *v400;
  void *v401;
  int v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t *v405;
  void *v406;
  void *v407;
  unsigned __int8 v408;
  float64_t v409;
  const char *v410;
  NSObject *v411;
  unsigned __int8 v412;
  float64_t v413;
  const char *v414;
  NSObject *v415;
  float64x2_t v416;
  int v417;
  unint64_t v418;
  uint64_t v419;
  uint64_t *v420;
  void *v421;
  void *v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  int v429;
  unint64_t v430;
  uint64_t v431;
  uint64_t *v432;
  void *v433;
  void *v434;
  unsigned __int8 v435;
  float64_t v436;
  const char *v437;
  NSObject *v438;
  unsigned __int8 v440;
  float64_t v441;
  const char *v442;
  NSObject *v443;
  std::runtime_error *exception;
  const char *v445;
  uint64_t v446;
  __int128 v447;
  uint64_t v448;
  int64x2_t v449;
  int64x2_t v450;
  int64x2_t v451;
  int64x2_t v452;
  int64x2_t v453;
  int64x2_t v454;
  int64x2_t v455;
  int64x2_t v456;
  int64x2_t v457;
  int64x2_t v458;
  int64x2_t v459;
  int64x2_t v460;
  int64x2_t v461;
  int64x2_t v462;
  int64x2_t v463;
  int64x2_t v464;
  int64x2_t v465;
  int64x2_t v466;
  int64x2_t v467;
  int64x2_t v468;
  int64x2_t v469;
  int64x2_t v470;
  int64x2_t v471;
  int64x2_t v472;
  int64x2_t v473;
  int64x2_t v474;
  int64x2_t v475;
  int64x2_t v476;
  int64x2_t v477;
  __int128 v478;
  __int128 v479;
  int64x2_t v480;
  int64x2_t v481;
  int64x2_t v482;
  int64x2_t v483;
  int64x2_t v484;
  int64x2_t v485;
  __int128 v486;
  __int128 v487;
  int64x2_t v488;
  int64x2_t v489;
  __int128 v490;
  __int128 v491;
  int64x2_t v492;
  int64x2_t v493;
  __int128 v494;
  __int128 v495;
  int64x2_t v496;
  int64x2_t v497;
  __int128 v498;
  __int128 v499;
  int64x2_t v500;
  __int128 v501;
  int64x2_t v502;
  int64x2_t v503;
  int64x2_t v504;
  int64x2_t v505;
  __int128 v506;
  int64x2_t v507;
  __int128 v508;
  int64x2_t v509;
  __int128 v510;
  unint64_t v511;
  __int128 v512;
  unint64_t v513;
  int64x2_t v514;
  unint64_t v515;
  __int128 v516;
  unint64_t v517;
  int64x2_t v518;
  int8x16_t v519;
  double v520;
  int8x16_t v521;
  double v522;
  int8x16_t v523;
  double v524;
  float64_t v525;
  float64_t v526;
  float64_t v527;
  float64_t v528;
  uint64_t v529;
  unint64_t v530;
  __int128 v531;
  int8x16_t v532;
  double v533;
  __int128 v534;
  int8x16_t v535;
  int64x2_t v536;
  float64x2_t v537;
  __int128 v538;
  int8x16_t v539;
  __int128 v540;
  int8x16_t v541;
  int64x2_t v542;
  int8x16_t v543;
  int64x2_t v544;
  void *v545[2];
  const char *v546;
  void *v547[2];
  float64_t v548;
  double v549;
  const char *v550;
  void *v551[2];
  void *v552[2];
  double v553;
  uint64_t *v554;
  int64x2_t v555;
  int64x2_t v556;
  int v557[4];
  uint64_t v558;
  int v559[4];
  int64x2_t v560;
  float64x2_t v561;
  int v562;
  __int128 v563;
  int8x16_t v564;
  int8x16_t __len;
  size_t __lena;
  void *__lenc;
  int64x2_t __lend;
  size_t __lenb[2];
  double v570;
  float64x2_t v571;
  int8x16_t v572;
  int8x16_t v573;
  int8x16_t v574;
  float64_t v575;
  int8x16_t v576;
  float64x2_t v577;
  uint64_t v578[3];
  int v579;
  const char *v580;
  int v581;
  const char *v582;
  uint64_t v583;
  std::__shared_weak_count *v584;
  uint64_t v585;
  _BYTE __src[1800];
  float64x2_t v587;
  float64_t v588;
  float64x2_t v589;
  float64_t v590;
  float64x2_t v591;
  double v592;
  float64x2_t v593;
  _BYTE v594[32];
  float64x2_t v595;
  _BYTE v596[32];
  char v597;
  uint64_t v598;
  float64x2_t *v599;
  _OWORD v600[2];
  void *object;
  void *v602;
  size_t v603;
  unint64_t v604;
  char v605;
  void *__p[2];
  unint64_t v607;
  char v608;
  _BYTE __dst[1808];
  uint64_t v610;
  char v611;
  uint64_t v612;

  v0 = MEMORY[0x24BDAC7A8]();
  v612 = *MEMORY[0x24BDAC8D0];
  v5 = v0 + 3680;
  if (!*(_BYTE *)(v0 + 7681))
    return 0;
  v6 = v0;
  if (!*(_QWORD *)(v0 + 16))
    return 0;
  v7 = v3;
  v8 = v2;
  v9 = v1;
  v10 = *v1;
  v11 = v1[1];
  *(_QWORD *)&v4 = (*v1)[3].i64[0];
  *(_OWORD *)v557 = v4;
  v541 = (*v1)[2];
  v553 = *(double *)&(*v1)[4].i64[1];
  v543 = *(int8x16_t *)((char *)*v1 + 56);
  v549 = *(double *)(*v1)[6].i64;
  *(int8x16_t *)v545 = (*v1)[5];
  v529 = (*v1)[7].i64[1];
  v532 = *(int8x16_t *)((char *)*v1 + 104);
  v570 = *(double *)v11[3].i64;
  __len = v11[2];
  *(_QWORD *)&v12.f64[1] = v11[2].i64[1];
  *(_QWORD *)&v12.f64[0] = v11[4].i64[1];
  v561 = v12;
  v535 = *(int8x16_t *)((char *)v11 + 56);
  *(_QWORD *)&v12.f64[1] = v11[4].i64[0];
  *(_QWORD *)&v12.f64[0] = v11[6].i64[0];
  v537 = v12;
  v539 = v11[5];
  v13 = v1[2];
  v14 = v1[3];
  v520 = *(double *)v13[3].i64;
  v519 = v13[2];
  v522 = *(double *)&v13[4].i64[1];
  v521 = *(int8x16_t *)((char *)v13 + 56);
  v524 = *(double *)v13[6].i64;
  v523 = v13[5];
  v528 = *(double *)&v13[7].i64[1];
  v573 = *(int8x16_t *)((char *)v13 + 104);
  v526 = *(double *)v14[3].i64;
  v574 = v14[2];
  v527 = *(double *)&v14[4].i64[1];
  v576 = *(int8x16_t *)((char *)v14 + 56);
  v525 = *(double *)v14[6].i64;
  v572 = v14[5];
  v15 = v1[4];
  v16 = *(_OWORD **)(v3 + 32);
  v17 = v16[1];
  v600[0] = *v16;
  v600[1] = v17;
  v597 = 0;
  v598 = v3;
  v599 = (float64x2_t *)v600;
  if (*(_BYTE *)(v0 + 56))
  {
    v18 = (_OWORD *)(v0 + 24);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtzq_f64(*(float64x2_t *)(v0 + 24)), (int32x4_t)vcgtzq_f64(*(float64x2_t *)(v0 + 40)))))) & 1) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquares/include/VIO/BatchLeastSquares/Propagator.h", 159, (uint64_t)"(noise.e() > 0.).all()", 22, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v19 = *(_OWORD *)(v6 + 40);
    *v16 = *v18;
    v16[1] = v19;
    v10 = *v9;
  }
  if ((!v10[8].i8[0] || !v9[1][6].i8[8] || !v9[2][8].i8[0] || !v9[3][6].i8[8] || !v9[4][2].i8[8])
    && *(_BYTE *)(v5 + 3992))
  {
    *(_BYTE *)(v5 + 3992) = 0;
  }
  v20 = *(double *)v15[2].i64;
  v21 = *(double *)(v6 + 64) + v20;
  v22 = v20 + *(double *)(v6 + 72);
  sub_20FD33470(*(_QWORD **)(v7 + 24), v7, v21, v22);
  v24 = *(double **)v7;
  v23 = *(double **)(v7 + 8);
  v25 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v23 - *(_QWORD *)v7) >> 3);
  if (v25 >= 2)
  {
    v26 = v24 + 7;
    if (v24[7] - *v24 < 0.0001)
    {
      if (v24 + 14 != v23)
      {
        v27 = v24 + 11;
        do
        {
          *(v27 - 4) = v27[3];
          *(_OWORD *)(v27 - 3) = *((_OWORD *)v27 + 2);
          *(v27 - 1) = v27[6];
          *(_OWORD *)v27 = *(_OWORD *)(v27 + 7);
          v27[2] = v27[9];
          v28 = v27 + 10;
          v27 += 7;
          v26 += 7;
        }
        while (v28 != v23);
        v24 = *(double **)v7;
      }
      *(_QWORD *)(v7 + 8) = v26;
      v25 = 0x6DB6DB6DB6DB6DB7 * (v26 - v24);
      v23 = v26;
    }
    if (v25 >= 3)
    {
      v29 = &v24[7 * v25];
      v31 = *(v29 - 14);
      v30 = v29 - 14;
      if (*(v23 - 7) - v31 < 0.0001)
      {
        if (v30 + 7 == v23)
        {
          v23 = v30;
        }
        else
        {
          v32 = 112 - (_QWORD)v24;
          v33 = 7 * v25;
          do
          {
            v34 = &v24[v33];
            *(v34 - 14) = v24[v33 - 7];
            *(_OWORD *)(v34 - 13) = *(_OWORD *)&v24[v33 - 6];
            *(v34 - 11) = v24[v33 - 4];
            *((_OWORD *)v34 - 5) = *(_OWORD *)&v24[v33 - 3];
            *(v34 - 8) = v24[v33 - 1];
            v32 -= 56;
            v24 += 7;
          }
          while (&v24[v33 - 7] != v23);
          v24 = *(double **)v7;
          v23 = (double *)(56 * v25 - v32);
        }
        *(_QWORD *)(v7 + 8) = v23;
      }
    }
  }
  if (*v24 != v21 || *(v23 - 7) != v22)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E8610C0(__dst, "IMU resampler");
    std::runtime_error::runtime_error(exception, (const std::string *)__dst);
    exception->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
    __cxa_throw(exception, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v35 = v541;
  v36 = vextq_s8(v35, v35, 8uLL).u64[0];
  v37 = v15[1].u8[4];
  v35.i64[1] = v36;
  v38 = (float64x2_t *)(v6 + 1880);
  v587 = (float64x2_t)v35;
  v39 = vextq_s8(v543, v543, 8uLL).u64[0];
  v40 = vextq_s8(*(int8x16_t *)v545, *(int8x16_t *)v545, 8uLL).u64[0];
  v41 = v532;
  v42 = vextq_s8(__len, __len, 8uLL).u64[0];
  v43 = vextq_s8(v535, v535, 8uLL).u64[0];
  v588 = *(double *)v557;
  v590 = v553;
  v44 = vextq_s8(v539, v539, 8uLL).u64[0];
  *(_QWORD *)&v45.f64[0] = v543.i64[0];
  *(_QWORD *)&v45.f64[1] = v39;
  v589 = v45;
  *(void **)&v45.f64[0] = v545[0];
  *(_QWORD *)&v45.f64[1] = v40;
  v591 = v45;
  v592 = v549;
  *(float64_t *)v594 = v561.f64[0];
  *(_QWORD *)&v45.f64[0] = v535.i64[0];
  *(_QWORD *)&v45.f64[1] = v43;
  v593 = v45;
  *(_QWORD *)&v45.f64[0] = __len.i64[0];
  *(_QWORD *)&v45.f64[1] = v42;
  *(float64x2_t *)&v594[8] = v45;
  *(double *)&v594[24] = v570;
  *(float64_t *)v596 = v537.f64[0];
  *(_QWORD *)&v45.f64[0] = v539.i64[0];
  *(_QWORD *)&v45.f64[1] = v44;
  v595 = v45;
  *(_QWORD *)&v596[24] = v529;
  v41.i64[1] = vextq_s8(v41, v41, 8uLL).u64[0];
  *(int8x16_t *)&v596[8] = v41;
  if (*(_BYTE *)(v5 + 4000) && *(_BYTE *)(v5 + 3992) && (!v37 || *(_BYTE *)(v5 + 2160)))
  {
    sub_20F4BA010((uint64_t)&v587, *(_QWORD *)(v7 + 32), (uint64_t *)v7);
    v46 = *(_QWORD *)(v6 + 16);
    *(_BYTE *)(v46 + 8) = *(_BYTE *)(v5 + 2176);
    memcpy((void *)(v46 + 16), (const void *)(v6 + 5864), 0x708uLL);
    memcpy((void *)(v6 + 1880), (const void *)(v6 + 3920), 0x708uLL);
    v47 = *(_OWORD *)(v6 + 5800);
    *(_OWORD *)(v6 + 3744) = *(_OWORD *)(v6 + 5784);
    *(_OWORD *)(v6 + 3760) = v47;
    *(_OWORD *)(v6 + 3776) = *(_OWORD *)(v6 + 5816);
    v48 = *(_OWORD *)(v6 + 5736);
    *(_OWORD *)(v6 + 3680) = *(_OWORD *)(v6 + 5720);
    *(_OWORD *)(v6 + 3696) = v48;
    v49 = *(_OWORD *)(v6 + 5768);
    *(_OWORD *)(v6 + 3712) = *(_OWORD *)(v6 + 5752);
    *(_QWORD *)(v6 + 3792) = *(_QWORD *)(v6 + 5832);
    *(_OWORD *)(v6 + 3728) = v49;
    goto LABEL_94;
  }
  v511 = v43;
  v513 = v44;
  v515 = v39;
  v517 = v40;
  v530 = v36;
  v533 = *(double *)&v42;
  bzero(__src, 0x708uLL);
  sub_20F4BAD38();
  if (v37)
  {
    v54 = *(_QWORD *)v7;
    v55 = *(_QWORD *)(v7 + 8);
    if (!*(_QWORD *)v7
      && v55
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v56 = *(_QWORD *)(v7 + 32);
    v57 = *(double *)(v56 + 72);
    v58 = *(double *)(v56 + 96);
    v59 = *(double *)(v56 + 104);
    v61 = *(double *)(v56 + 80);
    v60 = *(double *)(v56 + 88);
    v51.f64[0] = *(float64_t *)(v56 + 176);
    v62 = *(float64x2_t *)(v56 + 160);
    v63 = *(double *)(v56 + 200);
    _Q20 = *(float64x2_t *)(v56 + 184);
    _Q7.f64[0] = *(float64_t *)(v56 + 224);
    v65 = *(float64x2_t *)(v56 + 208);
    v66 = v51.f64[0] * v60 + v63 * v57;
    _Q24 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v62, *(double *)(v56 + 64)), (float64x2_t)0, _Q20), (float64x2_t)0, v65);
    _Q25 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v62, v60), _Q20, v57), (float64x2_t)0, v65);
    v69 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v62, v58), _Q20, v59), v65, v61);
    _Q18.f64[0] = v51.f64[0] * v58 + v63 * v59 + _Q7.f64[0] * v61;
    _Q23 = *(float64x2_t *)(v56 + 232);
    v71 = vmlaq_laneq_f64(vmulq_n_f64(_Q24, _Q23.f64[0]), _Q25, _Q23, 1);
    _Q21 = *(float64x2_t *)(v56 + 256);
    v73 = vmlaq_laneq_f64(vmulq_n_f64(_Q24, _Q21.f64[0]), _Q25, _Q21, 1);
    _Q22 = *(float64x2_t *)(v56 + 280);
    v75 = vmlaq_laneq_f64(vmulq_n_f64(_Q24, _Q22.f64[0]), _Q25, _Q22, 1);
    _D28 = v66 + _Q7.f64[0] * 0.0;
    __asm
    {
      FMLA            D24, D28, V23.D[1]
      FMLA            D25, D28, V21.D[1]
      FMLA            D26, D28, V22.D[1]
    }
    v81 = *(double *)(v56 + 120);
    v82 = *(double *)(v56 + 128);
    v84 = *(double *)(v56 + 136);
    v83 = *(double *)(v56 + 144);
    v85 = vmlaq_n_f64(vmulq_n_f64(v62, v84), _Q20, v81);
    v86 = v51.f64[0] * v84 + v63 * v81;
    v87 = *(double *)(v56 + 152);
    v88 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v62, *(double *)(v56 + 112)), (float64x2_t)0, _Q20), (float64x2_t)0, v65);
    v89 = vmlaq_f64(v85, (float64x2_t)0, v65);
    _Q19 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v62, v83), _Q20, v87), v65, v82);
    v51.f64[0] = v51.f64[0] * v83 + v63 * v87 + _Q7.f64[0] * v82;
    _Q7.f64[0] = v86 + _Q7.f64[0] * 0.0;
    v91 = vmlaq_laneq_f64(vmulq_n_f64(v88, _Q23.f64[0]), v89, _Q23, 1);
    __asm { FMLA            D20, D7, V23.D[1] }
    v92 = vmlaq_laneq_f64(vmulq_n_f64(v88, _Q21.f64[0]), v89, _Q21, 1);
    __asm { FMLA            D27, D7, V21.D[1] }
    v94 = vmlaq_laneq_f64(vmulq_n_f64(v88, _Q22.f64[0]), v89, _Q22, 1);
    __asm { FMLA            D16, D7, V22.D[1] }
    _Q7.f64[0] = *(float64_t *)(v56 + 248);
    v96 = vmlaq_n_f64(v71, v69, _Q7.f64[0]);
    _Q22.f64[0] = *(float64_t *)(v56 + 272);
    _Q5 = vmlaq_n_f64(v73, v69, _Q22.f64[0]);
    v98 = *(double *)(v56 + 296);
    v99 = vmlaq_n_f64(v75, v69, v98);
    _Q25.f64[0] = _Q25.f64[0] + _Q18.f64[0] * _Q22.f64[0];
    _Q18.f64[0] = _D26 + _Q18.f64[0] * v98;
    _Q17 = vmlaq_n_f64(v91, _Q19, _Q7.f64[0]);
    v101 = vmlaq_n_f64(v92, _Q19, _Q22.f64[0]);
    _Q20.f64[0] = _D27 + v51.f64[0] * _Q22.f64[0];
    _Q21 = vmlaq_n_f64(v94, _Q19, v98);
    v51.f64[0] = _D16 + v51.f64[0] * v98;
    _Q2 = *(float64x2_t *)(v54 + 8);
    v104 = vmlaq_laneq_f64(vmulq_n_f64(_Q17, _Q2.f64[0]), v101, _Q2, 1);
    __asm { FMLA            D19, D20, V2.D[1] }
    v105 = v54 + 8 * ((v55 - v54) >> 3);
    _Q22 = *(float64x2_t *)(v105 - 48);
    v107 = vmlaq_laneq_f64(vmulq_n_f64(_Q17, _Q22.f64[0]), v101, _Q22, 1);
    __asm { FMLA            D17, D20, V22.D[1] }
    _Q7.f64[0] = *(float64_t *)(v54 + 24);
    _Q16 = vmlaq_n_f64(v104, _Q21, _Q7.f64[0]);
    _Q7.f64[0] = _Q19.f64[0] + v51.f64[0] * _Q7.f64[0];
    _Q19.f64[0] = *(float64_t *)(v105 - 32);
    v109 = vmlaq_n_f64(v107, _Q21, _Q19.f64[0]);
    v51.f64[0] = _Q17.f64[0] + v51.f64[0] * _Q19.f64[0];
    _Q17 = *(float64x2_t *)(v54 + 32);
    v111 = vmlaq_laneq_f64(vmulq_n_f64(v96, _Q17.f64[0]), _Q5, _Q17, 1);
    __asm { FMLA            D20, D25, V17.D[1] }
    _Q17 = *(float64x2_t *)(v105 - 24);
    v113 = vmlaq_laneq_f64(vmulq_n_f64(v96, _Q17.f64[0]), _Q5, _Q17, 1);
    __asm { FMLA            D5, D25, V17.D[1] }
    _Q17.f64[0] = *(float64_t *)(v54 + 48);
    v114 = vmlaq_n_f64(v111, v99, _Q17.f64[0]);
    _Q20.f64[0] = _Q20.f64[0] + _Q18.f64[0] * _Q17.f64[0];
    _Q17.f64[0] = *(float64_t *)(v105 - 8);
    v115 = vmlaq_n_f64(v113, v99, _Q17.f64[0]);
    _Q17.f64[0] = _Q5.f64[0] + _Q18.f64[0] * _Q17.f64[0];
    _Q6 = vsubq_f64(v115, v595);
    _Q5.f64[1] = v589.f64[1];
    v117 = vmlaq_laneq_f64(vmulq_n_f64(v587, _Q6.f64[0]), v589, _Q6, 1);
    _Q18.f64[0] = v590;
    __asm { FMLA            D5, D18, V6.D[1] }
    _Q18.f64[0] = *(float64_t *)v596;
    _Q6.f64[0] = *(float64_t *)&v594[24];
    *(_QWORD *)&_Q17.f64[0] = *(_OWORD *)&vsubq_f64(_Q17, _Q18);
    v118 = vmlaq_n_f64(v117, v591, _Q17.f64[0]);
    _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], v592, _Q17.f64[0]);
    *(_QWORD *)&_Q17.f64[0] = v535.i64[0];
    *(_QWORD *)&_Q17.f64[1] = v511;
    _Q17 = vsubq_f64(_Q16, _Q17);
    *(_QWORD *)&_Q20.f64[0] = *(_OWORD *)&vsubq_f64(_Q20, v537);
    *(_QWORD *)&_Q16.f64[0] = v539.i64[0];
    *(_QWORD *)&_Q16.f64[1] = v513;
    _Q19 = vsubq_f64(v114, _Q16);
    *(_QWORD *)&_Q16.f64[0] = v541.i64[0];
    *(_QWORD *)&_Q16.f64[1] = v530;
    v121 = vmulq_n_f64(_Q16, _Q19.f64[0]);
    *(_QWORD *)&_Q16.f64[0] = v543.i64[0];
    *(_QWORD *)&_Q16.f64[1] = v515;
    v122 = vmlaq_laneq_f64(v121, _Q16, _Q19, 1);
    *(void **)&_Q16.f64[0] = v545[0];
    *(_QWORD *)&_Q16.f64[1] = v517;
    _Q18 = vmlaq_n_f64(v122, _Q16, _Q20.f64[0]);
    _Q16.f64[1] = *(float64_t *)&v557[2];
    _Q21.f64[0] = v553;
    __asm { FMLA            D16, D21, V19.D[1] }
    _Q16.f64[0] = vmlad_n_f64(_Q16.f64[0], v549, _Q20.f64[0]);
    _D27 = *(_QWORD *)(v6 + 2112);
    __asm { FMLA            D19, D27, V17.D[1] }
    *(_QWORD *)&v125 = *(_OWORD *)&vsubq_f64(_Q7, v561);
    v126 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v38, _Q17.f64[0]), *(float64x2_t *)(v6 + 2000), _Q17, 1), *(float64x2_t *)(v6 + 2120), v125);
    v127 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v6 + 1896), _Q17.f64[0]), *(float64x2_t *)(v6 + 2016), _Q17, 1), *(float64x2_t *)(v6 + 2136), v125);
    v128 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v6 + 1912), _Q17.f64[0]), *(float64x2_t *)(v6 + 2032), _Q17, 1), *(float64x2_t *)(v6 + 2152), v125);
    v129 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v6 + 1928), _Q17.f64[0]), *(float64x2_t *)(v6 + 2048), _Q17, 1), *(float64x2_t *)(v6 + 2168), v125);
    v130 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v6 + 1944), _Q17.f64[0]), *(float64x2_t *)(v6 + 2064), _Q17, 1), *(float64x2_t *)(v6 + 2184), v125);
    v131 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v6 + 1960), _Q17.f64[0]), *(float64x2_t *)(v6 + 2080), _Q17, 1), *(float64x2_t *)(v6 + 2200), v125);
    v132 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v6 + 1976), _Q17.f64[0]), *(float64x2_t *)(v6 + 2096), _Q17, 1), *(float64x2_t *)(v6 + 2216), v125);
    v133 = *(float64x2_t *)(v56 + 32);
    _Q17 = vsubq_f64(_Q18, v133);
    v135 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v126, (float64x2_t)0, *(float64x2_t *)(v6 + 2240)), (float64x2_t)0, *(float64x2_t *)(v6 + 2360)), (float64x2_t)0, *(float64x2_t *)(v6 + 2480)), *(float64x2_t *)(v6 + 2600), _Q17.f64[0]), *(float64x2_t *)(v6 + 2720), _Q17, 1);
    v136 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v127, (float64x2_t)0, *(float64x2_t *)(v6 + 2256)), (float64x2_t)0, *(float64x2_t *)(v6 + 2376)), (float64x2_t)0, *(float64x2_t *)(v6 + 2496)), *(float64x2_t *)(v6 + 2616), _Q17.f64[0]), *(float64x2_t *)(v6 + 2736), _Q17, 1);
    v137 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v128, (float64x2_t)0, *(float64x2_t *)(v6 + 2272)), (float64x2_t)0, *(float64x2_t *)(v6 + 2392)), (float64x2_t)0, *(float64x2_t *)(v6 + 2512)), *(float64x2_t *)(v6 + 2632), _Q17.f64[0]), *(float64x2_t *)(v6 + 2752), _Q17, 1);
    v138 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v129, (float64x2_t)0, *(float64x2_t *)(v6 + 2288)), (float64x2_t)0, *(float64x2_t *)(v6 + 2408)), (float64x2_t)0, *(float64x2_t *)(v6 + 2528)), *(float64x2_t *)(v6 + 2648), _Q17.f64[0]), *(float64x2_t *)(v6 + 2768), _Q17, 1);
    v139 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v130, (float64x2_t)0, *(float64x2_t *)(v6 + 2304)), (float64x2_t)0, *(float64x2_t *)(v6 + 2424)), (float64x2_t)0, *(float64x2_t *)(v6 + 2544)), *(float64x2_t *)(v6 + 2664), _Q17.f64[0]), *(float64x2_t *)(v6 + 2784), _Q17, 1);
    v140 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v131, (float64x2_t)0, *(float64x2_t *)(v6 + 2320)), (float64x2_t)0, *(float64x2_t *)(v6 + 2440)), (float64x2_t)0, *(float64x2_t *)(v6 + 2560)), *(float64x2_t *)(v6 + 2680), _Q17.f64[0]), *(float64x2_t *)(v6 + 2800), _Q17, 1);
    v141 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v132, (float64x2_t)0, *(float64x2_t *)(v6 + 2336)), (float64x2_t)0, *(float64x2_t *)(v6 + 2456)), (float64x2_t)0, *(float64x2_t *)(v6 + 2576)), *(float64x2_t *)(v6 + 2696), _Q17.f64[0]), *(float64x2_t *)(v6 + 2816), _Q17, 1);
    _Q19.f64[0] = *(float64_t *)(v6 + 2832);
    __asm { FMLA            D18, D19, V17.D[1] }
    _Q17.f64[0] = *(float64_t *)(v56 + 48);
    *(_QWORD *)&_Q16.f64[0] = *(_OWORD *)&vsubq_f64(_Q16, _Q17);
    v142 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v135, *(float64x2_t *)(v6 + 2840), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v6 + 2960)), (float64x2_t)0, *(float64x2_t *)(v6 + 3080)), (float64x2_t)0, *(float64x2_t *)(v6 + 3200)), *(float64x2_t *)(v6 + 3320), *(double *)__len.i64), *(float64x2_t *)(v6 + 3440), v533), *(float64x2_t *)(v6 + 3560), v570);
    v143 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v136, *(float64x2_t *)(v6 + 2856), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v6 + 2976)), (float64x2_t)0, *(float64x2_t *)(v6 + 3096)), (float64x2_t)0, *(float64x2_t *)(v6 + 3216)), *(float64x2_t *)(v6 + 3336), *(double *)__len.i64), *(float64x2_t *)(v6 + 3456), v533), *(float64x2_t *)(v6 + 3576), v570);
    v144 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v137, *(float64x2_t *)(v6 + 2872), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v6 + 2992)), (float64x2_t)0, *(float64x2_t *)(v6 + 3112)), (float64x2_t)0, *(float64x2_t *)(v6 + 3232)), *(float64x2_t *)(v6 + 3352), *(double *)__len.i64), *(float64x2_t *)(v6 + 3472), v533), *(float64x2_t *)(v6 + 3592), v570);
    v145 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v138, *(float64x2_t *)(v6 + 2888), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v6 + 3008)), (float64x2_t)0, *(float64x2_t *)(v6 + 3128)), (float64x2_t)0, *(float64x2_t *)(v6 + 3248)), *(float64x2_t *)(v6 + 3368), *(double *)__len.i64), *(float64x2_t *)(v6 + 3488), v533), *(float64x2_t *)(v6 + 3608), v570);
    v146 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v139, *(float64x2_t *)(v6 + 2904), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v6 + 3024)), (float64x2_t)0, *(float64x2_t *)(v6 + 3144)), (float64x2_t)0, *(float64x2_t *)(v6 + 3264)), *(float64x2_t *)(v6 + 3384), *(double *)__len.i64), *(float64x2_t *)(v6 + 3504), v533), *(float64x2_t *)(v6 + 3624), v570);
    v147 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v140, *(float64x2_t *)(v6 + 2920), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v6 + 3040)), (float64x2_t)0, *(float64x2_t *)(v6 + 3160)), (float64x2_t)0, *(float64x2_t *)(v6 + 3280)), *(float64x2_t *)(v6 + 3400), *(double *)__len.i64), *(float64x2_t *)(v6 + 3520), v533), *(float64x2_t *)(v6 + 3640), v570);
    v148 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v141, *(float64x2_t *)(v6 + 2936), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v6 + 3056)), (float64x2_t)0, *(float64x2_t *)(v6 + 3176)), (float64x2_t)0, *(float64x2_t *)(v6 + 3296)), *(float64x2_t *)(v6 + 3416), *(double *)__len.i64), *(float64x2_t *)(v6 + 3536), v533), *(float64x2_t *)(v6 + 3656), v570);
    v50.f64[0] = vmlad_n_f64(_Q18.f64[0], *(double *)(v6 + 2952), _Q16.f64[0])
               + *(double *)(v6 + 3072) * 0.0
               + *(double *)(v6 + 3192) * 0.0
               + *(double *)(v6 + 3312) * 0.0
               + *(double *)(v6 + 3432) * *(double *)__len.i64
               + *(double *)(v6 + 3552) * v533
               + *(double *)(v6 + 3672) * v570;
    _Q16.f64[1] = v593.f64[1];
    _Q16.f64[0] = *(float64_t *)v594;
    v149 = vsubq_f64(vsubq_f64(v109, v593), v142);
    v150 = vsubq_f64(vsubq_f64(v118, v133), v145);
    v151 = vsubq_f64(*(float64x2_t *)&v594[8], v148);
    *(float64x2_t *)(v5 + 80) = vsubq_f64((float64x2_t)0, v147);
    *(float64x2_t *)(v5 + 96) = v151;
    *(float64x2_t *)(v5 + 48) = v150;
    *(float64x2_t *)(v5 + 64) = vsubq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vsubq_f64(_Q5, _Q17), v146);
    *(float64x2_t *)(v5 + 16) = vsubq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vsubq_f64(v51, _Q16), v143);
    *(float64x2_t *)(v5 + 32) = vsubq_f64((float64x2_t)0, v144);
    *(float64x2_t *)v5 = v149;
    *(_QWORD *)(v5 + 112) = *(_OWORD *)&vsubq_f64(_Q6, v50);
  }
  v152 = *(_QWORD *)(v6 + 16);
  memcpy(__dst, __src, 0x708uLL);
  bzero((void *)(v152 + 24), 0x6F8uLL);
  *(_QWORD *)(v152 + 16) = 0x3FF0000000000000;
  *(_QWORD *)(v152 + 144) = 0x3FF0000000000000;
  *(_QWORD *)(v152 + 272) = 0x3FF0000000000000;
  *(_QWORD *)(v152 + 400) = 0x3FF0000000000000;
  *(_QWORD *)(v152 + 528) = 0x3FF0000000000000;
  *(_QWORD *)(v152 + 656) = 0x3FF0000000000000;
  *(_QWORD *)(v152 + 784) = 0x3FF0000000000000;
  *(_QWORD *)(v152 + 912) = 0x3FF0000000000000;
  *(_QWORD *)(v152 + 1040) = 0x3FF0000000000000;
  *(_QWORD *)(v152 + 1168) = 0x3FF0000000000000;
  *(_QWORD *)(v152 + 1296) = 0x3FF0000000000000;
  *(_QWORD *)(v152 + 1424) = 0x3FF0000000000000;
  *(_QWORD *)(v152 + 1552) = 0x3FF0000000000000;
  *(_QWORD *)(v152 + 1680) = 0x3FF0000000000000;
  *(_QWORD *)(v152 + 1808) = 0x3FF0000000000000;
  *(_BYTE *)(v152 + 8) = sub_20F4C04B8((float64x2_t *)(v152 + 16), (float64x2_t *)__dst, 0, 0, v153, v154, v155, v156, v157, v158, v159, v160);
  if (!*(_BYTE *)(*(_QWORD *)(v6 + 16) + 8))
  {
    v161 = 0;
    do
    {
      v162 = (*(_QWORD *)&__src[v161] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)&__src[v161] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        break;
      _ZF = v161 == 1792;
      v161 += 8;
    }
    while (!_ZF);
    if (!v162)
    {
      v445 = "IMU covariance contains NaNs. Time to die.";
      v446 = 468;
      goto LABEL_257;
    }
    __dst[8] = 1;
    *(_QWORD *)__dst = &off_24CA00428;
    bzero(&__dst[24], 0x6F8uLL);
    *(_QWORD *)&__dst[16] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[144] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[272] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[400] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[528] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[656] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[784] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[912] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1040] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1168] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1296] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1424] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1552] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1680] = 0x3FF0000000000000;
    v610 = 0x3FF0000000000000;
    v611 = 1;
    sub_20F4CEBA4((uint64_t)__dst, (float64x2_t *)__src);
    if (!__dst[8])
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOIMUFactor.hpp", 474, (uint64_t)"", 0, (uint64_t)"LP Noise model failed. Fallback noise failed also. Time to die.", 63, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    sub_20F4AD5FC(&v585);
    if (**(int **)(v585 + 56) > 5)
      goto LABEL_93;
    v163 = *(unsigned __int8 *)(v585 + 72);
    v164 = sub_20E8C31DC(v585, "OSLogSurrogateAppender", 1, 0);
    v165 = v164 + 16;
    if (!v164)
      v165 = 0;
    if (!v163 && !v164)
    {
LABEL_93:
      __lend = vzip1q_s64(*(int64x2_t *)&__dst[256], *(int64x2_t *)&__dst[376]);
      *(_QWORD *)&v181 = vdupq_laneq_s64(*(int64x2_t *)&__dst[256], 1).u64[0];
      *((_QWORD *)&v181 + 1) = *(_QWORD *)&__dst[384];
      v563 = v181;
      v544 = vzip1q_s64(*(int64x2_t *)&__dst[496], *(int64x2_t *)&__dst[616]);
      *(_QWORD *)&v181 = vdupq_laneq_s64(*(int64x2_t *)&__dst[496], 1).u64[0];
      *((_QWORD *)&v181 + 1) = *(_QWORD *)&__dst[624];
      *(_OWORD *)v559 = v181;
      v555 = vzip2q_s64(*(int64x2_t *)&__dst[16], *(int64x2_t *)&__dst[136]);
      v536 = vzip1q_s64(*(int64x2_t *)&__dst[736], *(int64x2_t *)&__dst[856]);
      *(_QWORD *)&v182 = vdupq_laneq_s64(*(int64x2_t *)&__dst[736], 1).u64[0];
      *((_QWORD *)&v182 + 1) = *(_QWORD *)&__dst[864];
      *(_OWORD *)v551 = v182;
      v518 = vzip1q_s64(*(int64x2_t *)&__dst[976], *(int64x2_t *)&__dst[1096]);
      *(_QWORD *)&v182 = vdupq_laneq_s64(*(int64x2_t *)&__dst[976], 1).u64[0];
      *((_QWORD *)&v182 + 1) = *(_QWORD *)&__dst[1104];
      *(_OWORD *)v547 = v182;
      v514 = vzip1q_s64(*(int64x2_t *)&__dst[1216], *(int64x2_t *)&__dst[1336]);
      *(_QWORD *)&v182 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1216], 1).u64[0];
      *((_QWORD *)&v182 + 1) = *(_QWORD *)&__dst[1344];
      v538 = v182;
      *(_QWORD *)&v182 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1456], 1).u64[0];
      *((_QWORD *)&v182 + 1) = *(_QWORD *)&__dst[1584];
      v534 = v182;
      v542 = vzip1q_s64(*(int64x2_t *)&__dst[272], *(int64x2_t *)&__dst[392]);
      *(_QWORD *)&v183 = vdupq_laneq_s64(*(int64x2_t *)&__dst[272], 1).u64[0];
      *((_QWORD *)&v183 + 1) = *(_QWORD *)&__dst[400];
      v540 = v183;
      *(_QWORD *)&v183 = vdupq_laneq_s64(*(int64x2_t *)&__dst[512], 1).u64[0];
      *((_QWORD *)&v183 + 1) = *(_QWORD *)&__dst[640];
      v531 = v183;
      v504 = vzip1q_s64(*(int64x2_t *)&__dst[752], *(int64x2_t *)&__dst[872]);
      v505 = vzip1q_s64(*(int64x2_t *)&__dst[1456], *(int64x2_t *)&__dst[1576]);
      *(_QWORD *)&v183 = vdupq_laneq_s64(*(int64x2_t *)&__dst[752], 1).u64[0];
      *((_QWORD *)&v183 + 1) = *(_QWORD *)&__dst[880];
      v516 = v183;
      v500 = vzip1q_s64(*(int64x2_t *)&__dst[992], *(int64x2_t *)&__dst[1112]);
      *(_QWORD *)&v183 = vdupq_laneq_s64(*(int64x2_t *)&__dst[992], 1).u64[0];
      *((_QWORD *)&v183 + 1) = *(_QWORD *)&__dst[1120];
      v512 = v183;
      v489 = vzip1q_s64(*(int64x2_t *)&__dst[32], *(int64x2_t *)&__dst[152]);
      v502 = vzip1q_s64(*(int64x2_t *)&__dst[512], *(int64x2_t *)&__dst[632]);
      v503 = vzip2q_s64(*(int64x2_t *)&__dst[32], *(int64x2_t *)&__dst[152]);
      *(_QWORD *)&v184 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1232], 1).u64[0];
      *((_QWORD *)&v184 + 1) = *(_QWORD *)&__dst[1360];
      v506 = v184;
      v496 = vzip1q_s64(*(int64x2_t *)&__dst[1472], *(int64x2_t *)&__dst[1592]);
      v497 = vzip1q_s64(*(int64x2_t *)&__dst[1232], *(int64x2_t *)&__dst[1352]);
      *(_QWORD *)&v184 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1472], 1).u64[0];
      *((_QWORD *)&v184 + 1) = *(_QWORD *)&__dst[1600];
      v508 = v184;
      *(_QWORD *)&v184 = vdupq_laneq_s64(*(int64x2_t *)&__dst[288], 1).u64[0];
      *((_QWORD *)&v184 + 1) = *(_QWORD *)&__dst[416];
      v509 = vzip1q_s64(*(int64x2_t *)&__dst[288], *(int64x2_t *)&__dst[408]);
      v510 = v184;
      v507 = vzip2q_s64(*(int64x2_t *)&__dst[48], *(int64x2_t *)&__dst[168]);
      v492 = vzip1q_s64(*(int64x2_t *)&__dst[528], *(int64x2_t *)&__dst[648]);
      v493 = vzip1q_s64(*(int64x2_t *)&__dst[48], *(int64x2_t *)&__dst[168]);
      *(_QWORD *)&v185 = vdupq_laneq_s64(*(int64x2_t *)&__dst[528], 1).u64[0];
      *((_QWORD *)&v185 + 1) = *(_QWORD *)&__dst[656];
      v501 = v185;
      *(_QWORD *)&v186 = vdupq_laneq_s64(*(int64x2_t *)&__dst[768], 1).u64[0];
      v488 = vzip1q_s64(*(int64x2_t *)&__dst[768], *(int64x2_t *)&__dst[888]);
      *((_QWORD *)&v186 + 1) = *(_QWORD *)&__dst[896];
      v499 = v186;
      *(_QWORD *)&v185 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1008], 1).u64[0];
      *((_QWORD *)&v185 + 1) = *(_QWORD *)&__dst[1136];
      v495 = v185;
      *(_QWORD *)&v185 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1248], 1).u64[0];
      *((_QWORD *)&v185 + 1) = *(_QWORD *)&__dst[1376];
      v491 = v185;
      v477 = vzip1q_s64(*(int64x2_t *)&__dst[1488], *(int64x2_t *)&__dst[1608]);
      *(_QWORD *)&v185 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1488], 1).u64[0];
      *((_QWORD *)&v185 + 1) = *(_QWORD *)&__dst[1616];
      v485 = vzip1q_s64(*(int64x2_t *)&__dst[1008], *(int64x2_t *)&__dst[1128]);
      v486 = v185;
      *(_QWORD *)&v186 = vdupq_laneq_s64(*(int64x2_t *)&__dst[304], 1).u64[0];
      *((_QWORD *)&v186 + 1) = *(_QWORD *)&__dst[432];
      v498 = v186;
      v481 = vzip1q_s64(*(int64x2_t *)&__dst[1248], *(int64x2_t *)&__dst[1368]);
      v482 = vzip1q_s64(*(int64x2_t *)&__dst[304], *(int64x2_t *)&__dst[424]);
      v480 = vzip1q_s64(*(int64x2_t *)&__dst[544], *(int64x2_t *)&__dst[664]);
      *(_QWORD *)&v185 = vdupq_laneq_s64(*(int64x2_t *)&__dst[544], 1).u64[0];
      *((_QWORD *)&v185 + 1) = *(_QWORD *)&__dst[672];
      v494 = v185;
      *(_QWORD *)&v186 = vdupq_laneq_s64(*(int64x2_t *)&__dst[784], 1).u64[0];
      *((_QWORD *)&v186 + 1) = *(_QWORD *)&__dst[912];
      v490 = v186;
      v484 = vzip2q_s64(*(int64x2_t *)&__dst[64], *(int64x2_t *)&__dst[184]);
      v475 = vzip1q_s64(*(int64x2_t *)&__dst[1024], *(int64x2_t *)&__dst[1144]);
      v476 = vzip1q_s64(*(int64x2_t *)&__dst[784], *(int64x2_t *)&__dst[904]);
      *(_QWORD *)&v185 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1024], 1).u64[0];
      *((_QWORD *)&v185 + 1) = *(_QWORD *)&__dst[1152];
      v478 = v185;
      *(_QWORD *)&v187 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1264], 1).u64[0];
      v471 = vzip1q_s64(*(int64x2_t *)&__dst[1264], *(int64x2_t *)&__dst[1384]);
      v472 = vzip1q_s64(*(int64x2_t *)&__dst[64], *(int64x2_t *)&__dst[184]);
      *((_QWORD *)&v187 + 1) = *(_QWORD *)&__dst[1392];
      v470 = vzip1q_s64(*(int64x2_t *)&__dst[1504], *(int64x2_t *)&__dst[1624]);
      *(_QWORD *)&v188 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1504], 1).u64[0];
      *((_QWORD *)&v188 + 1) = *(_QWORD *)&__dst[1632];
      v483 = vzip1q_s64(*(int64x2_t *)&__dst[320], *(int64x2_t *)&__dst[440]);
      *(_QWORD *)&v185 = vdupq_laneq_s64(*(int64x2_t *)&__dst[320], 1).u64[0];
      *((_QWORD *)&v185 + 1) = *(_QWORD *)&__dst[448];
      v487 = v185;
      v473 = vzip1q_s64(*(int64x2_t *)&__dst[560], *(int64x2_t *)&__dst[680]);
      *(_QWORD *)&v185 = vdupq_laneq_s64(*(int64x2_t *)&__dst[560], 1).u64[0];
      *((_QWORD *)&v185 + 1) = *(_QWORD *)&__dst[688];
      v479 = v185;
      *(_QWORD *)&v189 = vdupq_laneq_s64(*(int64x2_t *)&__dst[800], 1).u64[0];
      *((_QWORD *)&v189 + 1) = *(_QWORD *)&__dst[928];
      v468 = vzip1q_s64(*(int64x2_t *)&__dst[1040], *(int64x2_t *)&__dst[1160]);
      v469 = vzip1q_s64(*(int64x2_t *)&__dst[800], *(int64x2_t *)&__dst[920]);
      *(_QWORD *)&v190 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1040], 1).u64[0];
      *((_QWORD *)&v190 + 1) = *(_QWORD *)&__dst[1168];
      *(_QWORD *)&v191 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1280], 1).u64[0];
      *((_QWORD *)&v191 + 1) = *(_QWORD *)&__dst[1408];
      v457 = vzip1q_s64(*(int64x2_t *)&__dst[80], *(int64x2_t *)&__dst[200]);
      v467 = vzip2q_s64(*(int64x2_t *)&__dst[80], *(int64x2_t *)&__dst[200]);
      *(_QWORD *)&v192 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1520], 1).u64[0];
      *((_QWORD *)&v192 + 1) = *(_QWORD *)&__dst[1648];
      *(_QWORD *)&v193 = vdupq_laneq_s64(*(int64x2_t *)&__dst[336], 1).u64[0];
      v465 = vzip1q_s64(*(int64x2_t *)&__dst[1280], *(int64x2_t *)&__dst[1400]);
      v466 = vzip1q_s64(*(int64x2_t *)&__dst[336], *(int64x2_t *)&__dst[456]);
      *((_QWORD *)&v193 + 1) = *(_QWORD *)&__dst[464];
      v464 = vzip1q_s64(*(int64x2_t *)&__dst[96], *(int64x2_t *)&__dst[216]);
      v474 = vzip2q_s64(*(int64x2_t *)&__dst[96], *(int64x2_t *)&__dst[216]);
      v462 = vzip1q_s64(*(int64x2_t *)&__dst[1520], *(int64x2_t *)&__dst[1640]);
      v463 = vzip1q_s64(*(int64x2_t *)&__dst[576], *(int64x2_t *)&__dst[696]);
      *(_QWORD *)&v194 = vdupq_laneq_s64(*(int64x2_t *)&__dst[576], 1).u64[0];
      *((_QWORD *)&v194 + 1) = *(_QWORD *)&__dst[704];
      *(_QWORD *)&v195 = vdupq_laneq_s64(*(int64x2_t *)&__dst[816], 1).u64[0];
      v461 = vzip1q_s64(*(int64x2_t *)&__dst[816], *(int64x2_t *)&__dst[936]);
      *((_QWORD *)&v195 + 1) = *(_QWORD *)&__dst[944];
      *(_QWORD *)&v196 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1056], 1).u64[0];
      *((_QWORD *)&v196 + 1) = *(_QWORD *)&__dst[1184];
      *(_QWORD *)&v197 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1296], 1).u64[0];
      *((_QWORD *)&v197 + 1) = *(_QWORD *)&__dst[1424];
      *(_QWORD *)&v198 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1536], 1).u64[0];
      *((_QWORD *)&v198 + 1) = *(_QWORD *)&__dst[1664];
      *(_QWORD *)&v199 = vdupq_laneq_s64(*(int64x2_t *)&__dst[352], 1).u64[0];
      *((_QWORD *)&v199 + 1) = *(_QWORD *)&__dst[480];
      v458 = vzip1q_s64(*(int64x2_t *)&__dst[352], *(int64x2_t *)&__dst[472]);
      v459 = vzip1q_s64(*(int64x2_t *)&__dst[1056], *(int64x2_t *)&__dst[1176]);
      v455 = vzip1q_s64(*(int64x2_t *)&__dst[1296], *(int64x2_t *)&__dst[1416]);
      v456 = vzip1q_s64(*(int64x2_t *)&__dst[592], *(int64x2_t *)&__dst[712]);
      *(_QWORD *)&v200 = vdupq_laneq_s64(*(int64x2_t *)&__dst[592], 1).u64[0];
      *((_QWORD *)&v200 + 1) = *(_QWORD *)&__dst[720];
      *(_QWORD *)&v201 = vdupq_laneq_s64(*(int64x2_t *)&__dst[832], 1).u64[0];
      v453 = vzip1q_s64(*(int64x2_t *)&__dst[1536], *(int64x2_t *)&__dst[1656]);
      v454 = vzip1q_s64(*(int64x2_t *)&__dst[832], *(int64x2_t *)&__dst[952]);
      *((_QWORD *)&v201 + 1) = *(_QWORD *)&__dst[960];
      v460 = vzip2q_s64(*(int64x2_t *)&__dst[112], *(int64x2_t *)&__dst[232]);
      v451 = vzip1q_s64(*(int64x2_t *)&__dst[112], *(int64x2_t *)&__dst[232]);
      v452 = vzip1q_s64(*(int64x2_t *)&__dst[1072], *(int64x2_t *)&__dst[1192]);
      *(_QWORD *)&v202 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1072], 1).u64[0];
      *((_QWORD *)&v202 + 1) = *(_QWORD *)&__dst[1200];
      *(_QWORD *)&v203 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1312], 1).u64[0];
      *((_QWORD *)&v203 + 1) = *(_QWORD *)&__dst[1440];
      v449 = vzip1q_s64(*(int64x2_t *)&__dst[1552], *(int64x2_t *)&__dst[1672]);
      v450 = vzip1q_s64(*(int64x2_t *)&__dst[1312], *(int64x2_t *)&__dst[1432]);
      *(_QWORD *)&v204 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1552], 1).u64[0];
      *((_QWORD *)&v204 + 1) = *(_QWORD *)&__dst[1680];
      v205 = *(_QWORD *)(v6 + 16);
      *(_QWORD *)&v181 = *(_QWORD *)&__dst[128];
      *((_QWORD *)&v181 + 1) = *(_QWORD *)&__dst[248];
      *(_QWORD *)&v206 = *(_QWORD *)&__dst[368];
      *((_QWORD *)&v206 + 1) = *(_QWORD *)&__dst[488];
      *(_QWORD *)&v207 = *(_QWORD *)&__dst[608];
      *((_QWORD *)&v207 + 1) = *(_QWORD *)&__dst[728];
      *(_QWORD *)&v208 = *(_QWORD *)&__dst[848];
      *((_QWORD *)&v208 + 1) = *(_QWORD *)&__dst[968];
      *(_QWORD *)&v209 = *(_QWORD *)&__dst[1088];
      *((_QWORD *)&v209 + 1) = *(_QWORD *)&__dst[1208];
      *(_QWORD *)&v182 = *(_QWORD *)&__dst[1328];
      *((_QWORD *)&v182 + 1) = *(_QWORD *)&__dst[1448];
      *(_QWORD *)&v183 = *(_QWORD *)&__dst[1568];
      *((_QWORD *)&v183 + 1) = *(_QWORD *)&__dst[1688];
      v448 = v610;
      v447 = *(_OWORD *)&__dst[1792];
      v210 = *(_OWORD *)&__dst[1776];
      v211 = *(_OWORD *)&__dst[1760];
      v212 = *(_OWORD *)&__dst[1744];
      v213 = *(_OWORD *)&__dst[1728];
      v214 = *(_OWORD *)&__dst[1712];
      v215 = *(_OWORD *)&__dst[1696];
      *(int64x2_t *)(v205 + 16) = vzip1q_s64(*(int64x2_t *)&__dst[16], *(int64x2_t *)&__dst[136]);
      *(int64x2_t *)(v205 + 32) = __lend;
      *(int64x2_t *)(v205 + 48) = v544;
      *(int64x2_t *)(v205 + 64) = v536;
      *(int64x2_t *)(v205 + 80) = v518;
      *(int64x2_t *)(v205 + 96) = v514;
      *(int64x2_t *)(v205 + 112) = v505;
      *(int64x2_t *)(v205 + 136) = v555;
      *(_OWORD *)(v205 + 152) = v563;
      *(_OWORD *)(v205 + 168) = *(_OWORD *)v559;
      *(_OWORD *)(v205 + 184) = *(_OWORD *)v551;
      *(_OWORD *)(v205 + 200) = *(_OWORD *)v547;
      *(_OWORD *)(v205 + 216) = v538;
      *(_OWORD *)(v205 + 232) = v534;
      *(_QWORD *)(v205 + 128) = v215;
      *(_QWORD *)(v205 + 248) = *((_QWORD *)&v215 + 1);
      *(int64x2_t *)(v205 + 256) = v489;
      *(int64x2_t *)(v205 + 272) = v542;
      *(int64x2_t *)(v205 + 288) = v502;
      *(int64x2_t *)(v205 + 304) = v504;
      *(int64x2_t *)(v205 + 320) = v500;
      *(int64x2_t *)(v205 + 336) = v497;
      *(int64x2_t *)(v205 + 352) = v496;
      *(int64x2_t *)(v205 + 376) = v503;
      *(_OWORD *)(v205 + 392) = v540;
      *(_OWORD *)(v205 + 408) = v531;
      *(_OWORD *)(v205 + 424) = v516;
      *(_OWORD *)(v205 + 440) = v512;
      *(_OWORD *)(v205 + 456) = v506;
      *(_QWORD *)(v205 + 368) = v214;
      *(_QWORD *)(v205 + 488) = *((_QWORD *)&v214 + 1);
      *(_OWORD *)(v205 + 472) = v508;
      *(int64x2_t *)(v205 + 496) = v493;
      *(int64x2_t *)(v205 + 512) = v509;
      *(int64x2_t *)(v205 + 528) = v492;
      *(int64x2_t *)(v205 + 544) = v488;
      *(int64x2_t *)(v205 + 560) = v485;
      *(int64x2_t *)(v205 + 576) = v481;
      *(int64x2_t *)(v205 + 592) = v477;
      *(int64x2_t *)(v205 + 616) = v507;
      *(_OWORD *)(v205 + 632) = v510;
      *(_OWORD *)(v205 + 648) = v501;
      *(_OWORD *)(v205 + 664) = v499;
      *(_OWORD *)(v205 + 680) = v495;
      *(_OWORD *)(v205 + 696) = v491;
      *(_OWORD *)(v205 + 712) = v486;
      *(_QWORD *)(v205 + 608) = v213;
      *(_QWORD *)(v205 + 728) = *((_QWORD *)&v213 + 1);
      *(int64x2_t *)(v205 + 736) = v472;
      *(int64x2_t *)(v205 + 752) = v482;
      *(int64x2_t *)(v205 + 768) = v480;
      *(int64x2_t *)(v205 + 784) = v476;
      *(int64x2_t *)(v205 + 800) = v475;
      *(int64x2_t *)(v205 + 816) = v471;
      *(int64x2_t *)(v205 + 832) = v470;
      *(int64x2_t *)(v205 + 856) = v484;
      *(_OWORD *)(v205 + 872) = v498;
      *(_OWORD *)(v205 + 888) = v494;
      *(_OWORD *)(v205 + 904) = v490;
      *(_OWORD *)(v205 + 920) = v478;
      *(_OWORD *)(v205 + 936) = v187;
      *(_OWORD *)(v205 + 952) = v188;
      *(_QWORD *)(v205 + 848) = v212;
      *(_QWORD *)(v205 + 968) = *((_QWORD *)&v212 + 1);
      *(int64x2_t *)(v205 + 976) = v457;
      *(int64x2_t *)(v205 + 992) = v483;
      *(int64x2_t *)(v205 + 1008) = v473;
      *(int64x2_t *)(v205 + 1024) = v469;
      *(int64x2_t *)(v205 + 1040) = v468;
      *(int64x2_t *)(v205 + 1056) = v465;
      *(int64x2_t *)(v205 + 1072) = v462;
      *(int64x2_t *)(v205 + 1096) = v467;
      *(_OWORD *)(v205 + 1112) = v487;
      *(_OWORD *)(v205 + 1128) = v479;
      *(_OWORD *)(v205 + 1144) = v189;
      *(_OWORD *)(v205 + 1160) = v190;
      *(_OWORD *)(v205 + 1176) = v191;
      *(_OWORD *)(v205 + 1192) = v192;
      *(_QWORD *)(v205 + 1088) = v211;
      *(_QWORD *)(v205 + 1208) = *((_QWORD *)&v211 + 1);
      *(int64x2_t *)(v205 + 1216) = v464;
      *(int64x2_t *)(v205 + 1232) = v466;
      *(int64x2_t *)(v205 + 1248) = v463;
      *(int64x2_t *)(v205 + 1264) = v461;
      *(int64x2_t *)(v205 + 1280) = v459;
      *(int64x2_t *)(v205 + 1296) = v455;
      *(int64x2_t *)(v205 + 1312) = v453;
      *(int64x2_t *)(v205 + 1336) = v474;
      *(_OWORD *)(v205 + 1352) = v193;
      *(_OWORD *)(v205 + 1368) = v194;
      *(_OWORD *)(v205 + 1384) = v195;
      *(_OWORD *)(v205 + 1400) = v196;
      *(_OWORD *)(v205 + 1416) = v197;
      *(_OWORD *)(v205 + 1432) = v198;
      *(_QWORD *)(v205 + 1328) = v210;
      *(_QWORD *)(v205 + 1448) = *((_QWORD *)&v210 + 1);
      *(int64x2_t *)(v205 + 1456) = v451;
      *(int64x2_t *)(v205 + 1472) = v458;
      *(int64x2_t *)(v205 + 1488) = v456;
      *(int64x2_t *)(v205 + 1504) = v454;
      *(int64x2_t *)(v205 + 1520) = v452;
      *(int64x2_t *)(v205 + 1536) = v450;
      *(int64x2_t *)(v205 + 1552) = v449;
      *(int64x2_t *)(v205 + 1576) = v460;
      *(_OWORD *)(v205 + 1592) = v199;
      *(_OWORD *)(v205 + 1608) = v200;
      *(_OWORD *)(v205 + 1624) = v201;
      *(_OWORD *)(v205 + 1640) = v202;
      *(_OWORD *)(v205 + 1656) = v203;
      *(_OWORD *)(v205 + 1672) = v204;
      *(_QWORD *)(v205 + 1568) = v447;
      *(_QWORD *)(v205 + 1688) = *((_QWORD *)&v447 + 1);
      *(_OWORD *)(v205 + 1696) = v181;
      *(_OWORD *)(v205 + 1712) = v206;
      *(_OWORD *)(v205 + 1728) = v207;
      *(_OWORD *)(v205 + 1744) = v208;
      *(_OWORD *)(v205 + 1760) = v209;
      *(_OWORD *)(v205 + 1776) = v182;
      *(_OWORD *)(v205 + 1792) = v183;
      *(_QWORD *)(v205 + 1808) = v448;
      *(_BYTE *)(v205 + 8) = 1;
      if (*(_BYTE *)(*(_QWORD *)(v6 + 16) + 8))
        goto LABEL_94;
      v445 = "IMU factor is in a bad shape. Time to die.";
      v446 = 483;
LABEL_257:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOIMUFactor.hpp", v446, (uint64_t)"", 0, (uint64_t)v445, 42, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v558 = v165;
    v578[0] = (uint64_t)&v585;
    v578[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v578[2] = std::chrono::system_clock::now().__d_.__rep_;
    v579 = 5;
    v580 = "unknown file";
    v581 = 476;
    v584 = 0;
    v582 = "unknown function";
    v583 = 0;
    if (*(char *)(v585 + 39) < 0)
    {
      v166 = *(const char **)(v585 + 16);
      __lena = *(_QWORD *)(v585 + 24);
    }
    else
    {
      __lena = *(unsigned __int8 *)(v585 + 39);
      v166 = (const char *)(v585 + 16);
    }
    v554 = (uint64_t *)(v585 + 16);
    v562 = v163;
    v167 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v167 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v604 && SHIBYTE(v603) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v168 = byte_254A4A4F8;
    else
      v168 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v169 = byte_254A4A4F8[23];
    else
      v169 = *(_QWORD *)&byte_254A4A4F8[8];
    v550 = v168;
    v546 = v166;
    object = os_log_create(v168, v166);
    v170 = &v602;
    v171 = __lena;
    if (v169 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v169 >= 0x17)
    {
      v172 = (v169 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v169 | 7) != 0x17)
        v172 = v169 | 7;
      v173 = v172 + 1;
      v170 = operator new(v172 + 1);
      v604 = v173 | 0x8000000000000000;
      v602 = v170;
      v603 = v169;
      v171 = __lena;
    }
    else
    {
      HIBYTE(v604) = v169;
      if (!v169)
      {
LABEL_71:
        *((_BYTE *)v170 + v169) = 0;
        v605 = 1;
        v174 = __p;
        if (v171 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v171 >= 0x17)
        {
          v175 = (v171 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v171 | 7) != 0x17)
            v175 = v171 | 7;
          __lenc = (void *)v171;
          v176 = v175 + 1;
          v174 = operator new(v175 + 1);
          v607 = v176 | 0x8000000000000000;
          __p[0] = v174;
          v171 = (size_t)__lenc;
          __p[1] = __lenc;
        }
        else
        {
          HIBYTE(v607) = v171;
          if (!v171)
            goto LABEL_79;
        }
        memmove(v174, v546, v171);
LABEL_79:
        *((_BYTE *)v174 + v171) = 0;
        v608 = 1;
        v177 = object;
        if (SHIBYTE(v607) < 0)
          operator delete(__p[0]);
        if (v605 && SHIBYTE(v604) < 0)
          operator delete(v602);
        if (object)
          os_release(object);
        sub_20F4D577C((int)&object, v558, v554, v177, OS_LOG_TYPE_ERROR);
        if (v562)
        {
          sub_20E8C003C((uint64_t)v578, "LP Noise model failed. Fallback succeeded.");
          sub_20E863570((uint64_t)v578);
        }
        sub_20E863570((uint64_t)v578);
        v178 = v584;
        if (v584)
        {
          p_shared_owners = (unint64_t *)&v584->__shared_owners_;
          do
            v180 = __ldaxr(p_shared_owners);
          while (__stlxr(v180 - 1, p_shared_owners));
          if (!v180)
          {
            ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
            std::__shared_weak_count::__release_weak(v178);
          }
        }
        goto LABEL_93;
      }
    }
    memmove(v170, v550, v169);
    goto LABEL_71;
  }
LABEL_94:
  _Q6 = vextq_s8(v519, v519, 8uLL);
  _Q5 = vextq_s8(v521, v521, 8uLL);
  _Q4 = vextq_s8(v523, v523, 8uLL);
  *(_QWORD *)&v218.f64[0] = vextq_s8(v573, v573, 8uLL).u64[0];
  v219 = vextq_s8(v572, v572, 8uLL).u64[0];
  *(_QWORD *)&v220.f64[0] = vextq_s8(v574, v574, 8uLL).u64[0];
  v221 = vextq_s8(v576, v576, 8uLL).u64[0];
  v222.f64[0] = v588;
  _V19.D[1] = v591.f64[1];
  v224 = (float64x2_t)vzip1q_s64((int64x2_t)v587, (int64x2_t)v589);
  v225 = (float64x2_t)vzip2q_s64((int64x2_t)v587, (int64x2_t)v589);
  v222.f64[1] = v590;
  v226 = (int64x2_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v224, *(double *)v519.i64), v225, *(double *)_Q6.i64), v222, v520);
  __asm { FMLA            D16, D6, V19.D[1] }
  *(double *)_Q6.i64 = _D16 + v592 * v520;
  v564 = _Q6;
  v228 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v224, *(double *)v521.i64), v225, *(double *)_Q5.i64), v222, v522);
  __asm { FMLA            D6, D5, V19.D[1] }
  *(double *)_Q5.i64 = *(double *)_Q6.i64 + v592 * v522;
  v556 = (int64x2_t)_Q5;
  v571 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v224, *(double *)v523.i64), v225, *(double *)_Q4.i64), v222, v524);
  __asm { FMLA            D5, D4, V19.D[1] }
  *(double *)_Q4.i64 = *(double *)_Q5.i64 + v592 * v524;
  v560 = (int64x2_t)v228;
  *(int8x16_t *)__lenb = _Q4;
  *(int64x2_t *)v552 = v226;
  v548 = v228.f64[1];
  if (*(double *)_Q4.i64 >= 0.0)
  {
    if (*(double *)v226.i64 >= -v228.f64[1])
    {
      *(_QWORD *)&v237.f64[0] = vdupq_laneq_s64((int64x2_t)v571, 1).u64[0];
      *(_QWORD *)&v237.f64[1] = v564.i64[0];
      v232 = vsubq_f64((float64x2_t)vzip1q_s64(v556, (int64x2_t)v571), v237);
      v233 = vsubq_f64((float64x2_t)vdupq_laneq_s64(v226, 1), v228);
      *(double *)v234.i64 = *(double *)__lenb + 1.0 + *(double *)v226.i64 + v228.f64[1];
    }
    else
    {
      v233.f64[1] = v571.f64[1];
      v232.f64[0] = v571.f64[0] + *(double *)v564.i64;
      v233.f64[0] = *(double *)__lenb + 1.0 - (*(double *)v226.i64 + v228.f64[1]);
      v232.f64[1] = *(double *)v556.i64 + v571.f64[1];
      *(double *)v234.i64 = v233.f64[0];
    }
  }
  else if (*(double *)v226.i64 <= v228.f64[1])
  {
    *(_QWORD *)&v235.f64[1] = v556.i64[0];
    v235.f64[0] = 1.0 - *(double *)_Q4.i64;
    v236.f64[1] = v571.f64[1];
    v236.f64[0] = v228.f64[1] - *(double *)v226.i64;
    v234 = (int64x2_t)vaddq_f64(v235, v236);
    v232 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64((float64x2_t)vdupq_laneq_s64(v226, 1), v228), v234);
    v233 = (float64x2_t)vdupq_laneq_s64(v234, 1);
  }
  else
  {
    *(_QWORD *)&v230.f64[1] = v226.i64[1];
    v230.f64[0] = 1.0 - *(double *)_Q4.i64;
    v231 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v228.f64[0], 0);
    v231.f64[0] = *(double *)v226.i64 - v228.f64[1];
    v232 = vaddq_f64(v230, v231);
    *(_QWORD *)&v233.f64[1] = v564.i64[1];
    v233.f64[0] = v571.f64[0] + *(double *)v564.i64;
    v234.i64[0] = *(_QWORD *)&v232.f64[0];
  }
  v238 = 0.5 / sqrt(*(double *)v234.i64);
  v239 = vmulq_n_f64(v233, v238);
  v240 = vmulq_n_f64(v232, v238);
  v241 = vaddq_f64(v240, v240);
  *(_QWORD *)(v5 + 136) = *(_OWORD *)&vaddq_f64(v239, v239);
  *(float64x2_t *)(v5 + 120) = v241;
  v242.f64[0] = v525;
  *(_QWORD *)&v242.f64[1] = v573.i64[0];
  *(_QWORD *)&v243.f64[0] = v572.i64[0];
  *(_QWORD *)&v243.f64[1] = v219;
  v244 = vsubq_f64(v242, *(float64x2_t *)v596);
  v245 = vsubq_f64(v243, v595);
  v220.f64[1] = v526;
  v242.f64[0] = v527;
  *(_QWORD *)&v242.f64[1] = v574.i64[0];
  v246 = vsubq_f64(v220, *(float64x2_t *)&v594[16]);
  v247 = vsubq_f64(v242, *(float64x2_t *)v594);
  *(_QWORD *)&v248.f64[0] = v576.i64[0];
  *(_QWORD *)&v248.f64[1] = v221;
  v218.f64[1] = v528;
  v249 = vsubq_f64(v218, *(float64x2_t *)&v596[16]);
  *(float64x2_t *)(v5 + 144) = vsubq_f64(v248, v593);
  *(float64x2_t *)(v5 + 160) = v247;
  *(float64x2_t *)(v5 + 176) = v246;
  *(float64x2_t *)(v5 + 192) = v245;
  *(float64x2_t *)(v5 + 208) = v244;
  *(float64x2_t *)(v5 + 224) = v249;
  v249.f64[0] = *(float64_t *)(v5 + 232);
  v250 = vnegq_f64(*(float64x2_t *)(v5 + 216));
  v251 = vnegq_f64(*(float64x2_t *)(v5 + 200));
  v252 = vnegq_f64(*(float64x2_t *)(v5 + 184));
  v253 = vnegq_f64(*(float64x2_t *)(v5 + 168));
  v254 = vnegq_f64(*(float64x2_t *)(v5 + 152));
  v255 = vnegq_f64(*(float64x2_t *)(v5 + 136));
  *(float64x2_t *)(v5 + 120) = vnegq_f64(v241);
  *(float64x2_t *)(v5 + 136) = v255;
  *(float64x2_t *)(v5 + 152) = v254;
  *(float64x2_t *)(v5 + 168) = v253;
  *(float64x2_t *)(v5 + 184) = v252;
  *(float64x2_t *)(v5 + 200) = v251;
  *(float64x2_t *)(v5 + 216) = v250;
  *(_QWORD *)(v5 + 232) = *(_OWORD *)&vnegq_f64(v249);
  v256 = *(_OWORD *)(v5 + 184);
  v257 = *(_OWORD *)(v5 + 200);
  v258 = *(_OWORD *)(v5 + 216);
  *(_QWORD *)(v8 + 112) = *(_QWORD *)(v5 + 232);
  *(_OWORD *)(v8 + 80) = v257;
  *(_OWORD *)(v8 + 96) = v258;
  *(_OWORD *)(v8 + 64) = v256;
  v259 = *(_OWORD *)(v5 + 120);
  v260 = *(_OWORD *)(v5 + 136);
  v261 = *(_OWORD *)(v5 + 168);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v5 + 152);
  *(_OWORD *)(v8 + 48) = v261;
  *(_OWORD *)v8 = v259;
  *(_OWORD *)(v8 + 16) = v260;
  if (*(_BYTE *)(v5 + 4000) && !*(_BYTE *)(v5 + 3992))
  {
    (*v9)[8].i8[0] = 1;
    v9[1][6].i8[8] = 1;
    v9[2][8].i8[0] = 1;
    v9[3][6].i8[8] = 1;
    v9[4][2].i8[8] = 1;
    *(_BYTE *)(v5 + 2176) = 1;
    *(_QWORD *)(v6 + 5848) = &off_24CA00398;
    *(_QWORD *)(v6 + 5864) = 0x3FF0000000000000;
    *(_OWORD *)(v6 + 5872) = 0u;
    *(_OWORD *)(v6 + 5888) = 0u;
    *(_OWORD *)(v6 + 5904) = 0u;
    *(_OWORD *)(v6 + 5920) = 0u;
    *(_OWORD *)(v6 + 5936) = 0u;
    *(_OWORD *)(v6 + 5952) = 0u;
    *(_OWORD *)(v6 + 5968) = 0u;
    *(_QWORD *)(v6 + 5984) = 0;
    *(_QWORD *)(v6 + 5992) = 0x3FF0000000000000;
    *(_OWORD *)(v6 + 6000) = 0u;
    *(_OWORD *)(v6 + 6016) = 0u;
    *(_OWORD *)(v6 + 6032) = 0u;
    *(_OWORD *)(v6 + 6048) = 0u;
    *(_OWORD *)(v6 + 6064) = 0u;
    *(_OWORD *)(v6 + 6080) = 0u;
    *(_OWORD *)(v6 + 6096) = 0u;
    *(_QWORD *)(v6 + 6112) = 0;
    *(_QWORD *)(v6 + 6120) = 0x3FF0000000000000;
    *(_OWORD *)(v6 + 6128) = 0u;
    *(_OWORD *)(v6 + 6144) = 0u;
    *(_OWORD *)(v6 + 6160) = 0u;
    *(_OWORD *)(v6 + 6176) = 0u;
    *(_OWORD *)(v6 + 6192) = 0u;
    *(_OWORD *)(v6 + 6208) = 0u;
    *(_OWORD *)(v6 + 6224) = 0u;
    *(_QWORD *)(v6 + 6240) = 0;
    *(_QWORD *)(v6 + 6248) = 0x3FF0000000000000;
    *(_OWORD *)(v6 + 6256) = 0u;
    *(_OWORD *)(v6 + 6272) = 0u;
    *(_OWORD *)(v6 + 6288) = 0u;
    *(_OWORD *)(v6 + 6304) = 0u;
    *(_OWORD *)(v6 + 6320) = 0u;
    *(_OWORD *)(v6 + 6336) = 0u;
    *(_OWORD *)(v6 + 6352) = 0u;
    *(_QWORD *)(v6 + 6368) = 0;
    *(_QWORD *)(v6 + 6376) = 0x3FF0000000000000;
    *(_OWORD *)(v6 + 6384) = 0u;
    *(_OWORD *)(v6 + 6400) = 0u;
    *(_OWORD *)(v6 + 6416) = 0u;
    *(_OWORD *)(v6 + 6432) = 0u;
    *(_OWORD *)(v6 + 6448) = 0u;
    *(_OWORD *)(v6 + 6464) = 0u;
    *(_OWORD *)(v6 + 6480) = 0u;
    *(_QWORD *)(v6 + 6496) = 0;
    *(_QWORD *)(v6 + 6504) = 0x3FF0000000000000;
    *(_OWORD *)(v6 + 6512) = 0u;
    *(_OWORD *)(v6 + 6528) = 0u;
    *(_OWORD *)(v6 + 6544) = 0u;
    *(_OWORD *)(v6 + 6560) = 0u;
    *(_OWORD *)(v6 + 6576) = 0u;
    *(_OWORD *)(v6 + 6592) = 0u;
    *(_OWORD *)(v6 + 6608) = 0u;
    *(_QWORD *)(v6 + 6624) = 0;
    *(_QWORD *)(v6 + 6632) = 0x3FF0000000000000;
    *(_QWORD *)(v6 + 6752) = 0;
    *(_OWORD *)(v6 + 6736) = 0u;
    *(_OWORD *)(v6 + 6720) = 0u;
    *(_OWORD *)(v6 + 6704) = 0u;
    *(_OWORD *)(v6 + 6688) = 0u;
    *(_OWORD *)(v6 + 6672) = 0u;
    *(_OWORD *)(v6 + 6656) = 0u;
    *(_OWORD *)(v6 + 6640) = 0u;
    *(_QWORD *)(v6 + 6760) = 0x3FF0000000000000;
    *(_QWORD *)(v6 + 6880) = 0;
    *(_OWORD *)(v6 + 6864) = 0u;
    *(_OWORD *)(v6 + 6848) = 0u;
    *(_OWORD *)(v6 + 6832) = 0u;
    *(_OWORD *)(v6 + 6816) = 0u;
    *(_OWORD *)(v6 + 6800) = 0u;
    *(_OWORD *)(v6 + 6784) = 0u;
    *(_OWORD *)(v6 + 6768) = 0u;
    *(_QWORD *)(v6 + 6888) = 0x3FF0000000000000;
    *(_QWORD *)(v6 + 7008) = 0;
    *(_OWORD *)(v6 + 6992) = 0u;
    *(_OWORD *)(v6 + 6976) = 0u;
    *(_OWORD *)(v6 + 6960) = 0u;
    *(_OWORD *)(v6 + 6944) = 0u;
    *(_OWORD *)(v6 + 6928) = 0u;
    *(_OWORD *)(v6 + 6912) = 0u;
    *(_OWORD *)(v6 + 6896) = 0u;
    *(_QWORD *)(v6 + 7016) = 0x3FF0000000000000;
    *(_QWORD *)(v6 + 7136) = 0;
    *(_OWORD *)(v6 + 7120) = 0u;
    *(_OWORD *)(v6 + 7104) = 0u;
    *(_OWORD *)(v6 + 7088) = 0u;
    *(_OWORD *)(v6 + 7072) = 0u;
    *(_OWORD *)(v6 + 7056) = 0u;
    *(_OWORD *)(v6 + 7040) = 0u;
    *(_OWORD *)(v6 + 7024) = 0u;
    *(_QWORD *)(v6 + 7144) = 0x3FF0000000000000;
    *(_QWORD *)(v6 + 7264) = 0;
    *(_OWORD *)(v6 + 7248) = 0u;
    *(_OWORD *)(v6 + 7232) = 0u;
    *(_OWORD *)(v6 + 7216) = 0u;
    *(_OWORD *)(v6 + 7200) = 0u;
    *(_OWORD *)(v6 + 7184) = 0u;
    *(_OWORD *)(v6 + 7168) = 0u;
    *(_OWORD *)(v6 + 7152) = 0u;
    *(_QWORD *)(v6 + 7272) = 0x3FF0000000000000;
    *(_QWORD *)(v6 + 7392) = 0;
    *(_OWORD *)(v6 + 7376) = 0u;
    *(_OWORD *)(v6 + 7360) = 0u;
    *(_OWORD *)(v6 + 7344) = 0u;
    *(_OWORD *)(v6 + 7328) = 0u;
    *(_OWORD *)(v6 + 7312) = 0u;
    *(_OWORD *)(v6 + 7296) = 0u;
    *(_OWORD *)(v6 + 7280) = 0u;
    *(_QWORD *)(v6 + 7400) = 0x3FF0000000000000;
    *(_QWORD *)(v6 + 7520) = 0;
    *(_OWORD *)(v6 + 7504) = 0u;
    *(_OWORD *)(v6 + 7488) = 0u;
    *(_OWORD *)(v6 + 7472) = 0u;
    *(_OWORD *)(v6 + 7456) = 0u;
    *(_OWORD *)(v6 + 7440) = 0u;
    *(_OWORD *)(v6 + 7424) = 0u;
    *(_OWORD *)(v6 + 7408) = 0u;
    *(_QWORD *)(v6 + 7528) = 0x3FF0000000000000;
    *(_QWORD *)(v6 + 7648) = 0;
    *(_OWORD *)(v6 + 7632) = 0u;
    *(_OWORD *)(v6 + 7616) = 0u;
    *(_OWORD *)(v6 + 7600) = 0u;
    *(_OWORD *)(v6 + 7584) = 0u;
    *(_OWORD *)(v6 + 7568) = 0u;
    *(_OWORD *)(v6 + 7552) = 0u;
    *(_OWORD *)(v6 + 7536) = 0u;
    *(_QWORD *)(v6 + 7656) = 0x3FF0000000000000;
    *(_BYTE *)(v5 + 3992) = 1;
    *(_QWORD *)(v6 + 7664) = -1;
    memcpy((void *)(v6 + 3920), (const void *)(v6 + 1880), 0x708uLL);
    v265 = *(_OWORD *)(v6 + 3728);
    *(_OWORD *)(v6 + 5752) = *(_OWORD *)(v6 + 3712);
    *(_OWORD *)(v6 + 5768) = v265;
    v266 = *(_OWORD *)(v6 + 3696);
    *(_OWORD *)(v6 + 5720) = *(_OWORD *)(v6 + 3680);
    *(_OWORD *)(v6 + 5736) = v266;
    *(_QWORD *)(v6 + 5832) = *(_QWORD *)(v6 + 3792);
    v267 = *(_OWORD *)(v6 + 3776);
    v268 = *(_OWORD *)(v6 + 3744);
    *(_OWORD *)(v6 + 5800) = *(_OWORD *)(v6 + 3760);
    *(_OWORD *)(v6 + 5816) = v267;
    *(_OWORD *)(v6 + 5784) = v268;
    *(_BYTE *)(v5 + 2160) = v37;
    v269 = *(_QWORD *)(v6 + 16);
    *(_BYTE *)(v5 + 2176) = *(_BYTE *)(v269 + 8);
    memcpy((void *)(v6 + 5864), (const void *)(v269 + 16), 0x708uLL);
    *(_DWORD *)(v6 + 7664) = (*v9)[1].i32[0];
    *(_DWORD *)(v6 + 7668) = v9[2][1].i32[0];
    if (v597)
    {
LABEL_104:
      if (*(_BYTE *)(*(_QWORD *)(v6 + 16) + 8))
        goto LABEL_105;
LABEL_113:
      sub_20F4AD5FC(&v587);
      if (**(int **)(*(_QWORD *)&v587.f64[0] + 56) > 5)
        return 0;
      v273 = *(unsigned __int8 *)(*(_QWORD *)&v587.f64[0] + 72);
      v274 = sub_20E8C31DC(*(uint64_t *)&v587.f64[0], "OSLogSurrogateAppender", 1, 0);
      v275 = v274 ? v274 + 16 : 0;
      if (!v273 && !v274)
        return 0;
      *(_QWORD *)__src = &v587;
      *(std::chrono::steady_clock::time_point *)&__src[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&__src[16] = std::chrono::system_clock::now();
      *(_DWORD *)&__src[24] = 5;
      *(_QWORD *)&__src[32] = "unknown file";
      *(_DWORD *)&__src[40] = 200;
      *(_QWORD *)&__src[64] = 0;
      *(_QWORD *)&__src[48] = "unknown function";
      *(_QWORD *)&__src[56] = 0;
      v276 = **(_QWORD **)__src;
      v277 = (uint64_t *)(**(_QWORD **)__src + 16);
      if (*(char *)(**(_QWORD **)__src + 39) < 0)
      {
        v279 = *(const char **)(v276 + 16);
        v278 = *(_QWORD *)(v276 + 24);
      }
      else
      {
        v278 = *(unsigned __int8 *)(**(_QWORD **)__src + 39);
        v279 = (const char *)(**(_QWORD **)__src + 16);
      }
      v370 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v370 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)__dst);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
        if (__dst[24] && (__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v371 = byte_254A4A4F8;
      else
        v371 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v372 = byte_254A4A4F8[23];
      else
        v372 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)__dst = os_log_create(v371, v279);
      v373 = &__dst[8];
      if (v372 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v372 >= 0x17)
      {
        v374 = (v372 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v372 | 7) != 0x17)
          v374 = v372 | 7;
        v375 = v374 + 1;
        v373 = operator new(v374 + 1);
        *(_QWORD *)&__dst[24] = v375 | 0x8000000000000000;
        *(_QWORD *)&__dst[8] = v373;
        *(_QWORD *)&__dst[16] = v372;
      }
      else
      {
        __dst[31] = v372;
        if (!v372)
        {
LABEL_151:
          v373[v372] = 0;
          __dst[32] = 1;
          v376 = &__dst[40];
          if (v278 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v278 >= 0x17)
          {
            v377 = (v278 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v278 | 7) != 0x17)
              v377 = v278 | 7;
            v378 = v377 + 1;
            v376 = operator new(v377 + 1);
            *(_QWORD *)&__dst[56] = v378 | 0x8000000000000000;
            *(_QWORD *)&__dst[40] = v376;
            *(_QWORD *)&__dst[48] = v278;
          }
          else
          {
            __dst[63] = v278;
            if (!v278)
              goto LABEL_159;
          }
          memmove(v376, v279, v278);
LABEL_159:
          v376[v278] = 0;
          __dst[64] = 1;
          v379 = *(NSObject **)__dst;
          if ((__dst[63] & 0x80000000) != 0)
            operator delete(*(void **)&__dst[40]);
          if (__dst[32] && (__dst[31] & 0x80000000) != 0)
            operator delete(*(void **)&__dst[8]);
          if (*(_QWORD *)__dst)
            os_release(*(void **)__dst);
          sub_20F4D5BF0((int)__dst, v275, v277, v379, OS_LOG_TYPE_ERROR);
          if (v273)
          {
            sub_20E8C003C((uint64_t)__src, "IMU factor failed to factorize the noise model.");
            sub_20E863570((uint64_t)__src);
          }
          sub_20E863570((uint64_t)__src);
          v380 = *(std::__shared_weak_count **)&__src[64];
          if (*(_QWORD *)&__src[64])
          {
            v381 = (unint64_t *)(*(_QWORD *)&__src[64] + 8);
            do
              v382 = __ldaxr(v381);
            while (__stlxr(v382 - 1, v381));
            if (!v382)
            {
              ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
              std::__shared_weak_count::__release_weak(v380);
            }
          }
          return 0;
        }
      }
      memmove(v373, v371, v372);
      goto LABEL_151;
    }
  }
  else if (v597)
  {
    goto LABEL_104;
  }
  v270 = v599;
  v271 = *(float64x2_t **)(v598 + 32);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtzq_f64(*v599), (int32x4_t)vcgtzq_f64(v599[1]))))) & 1) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquares/include/VIO/BatchLeastSquares/Propagator.h", 159, (uint64_t)"(noise.e() > 0.).all()", 22, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v272 = v270[1];
  *v271 = *v270;
  v271[1] = v272;
  if (!*(_BYTE *)(*(_QWORD *)(v6 + 16) + 8))
    goto LABEL_113;
LABEL_105:
  v262 = 0;
  v263 = vextq_s8((int8x16_t)v571, (int8x16_t)v571, 8uLL).u64[0];
  v264 = vextq_s8(*(int8x16_t *)v552, *(int8x16_t *)v552, 8uLL);
  do
  {
    _ZF = v262 == 1792;
    v262 += 8;
  }
  while (!_ZF);
  v577 = (float64x2_t)v264;
  v280 = *(float64x2_t *)(v6 + 3640);
  *(float64x2_t *)&__dst[1784] = vabsq_f64(*(float64x2_t *)(v6 + 3656));
  v281 = *(float64x2_t *)(v6 + 3624);
  *(float64x2_t *)&__dst[1768] = vabsq_f64(v280);
  v282 = *(float64x2_t *)(v6 + 3608);
  *(float64x2_t *)&__dst[1752] = vabsq_f64(v281);
  v283 = *(float64x2_t *)(v6 + 3592);
  *(float64x2_t *)&__dst[1736] = vabsq_f64(v282);
  v284 = *(float64x2_t *)(v6 + 3576);
  *(float64x2_t *)&__dst[1720] = vabsq_f64(v283);
  v285 = *(float64x2_t *)(v6 + 3560);
  *(float64x2_t *)&__dst[1704] = vabsq_f64(v284);
  v286 = *(float64x2_t *)(v6 + 3544);
  *(float64x2_t *)&__dst[1688] = vabsq_f64(v285);
  v287 = *(float64x2_t *)(v6 + 3528);
  *(float64x2_t *)&__dst[1672] = vabsq_f64(v286);
  v288 = *(float64x2_t *)(v6 + 3512);
  *(float64x2_t *)&__dst[1656] = vabsq_f64(v287);
  v289 = *(float64x2_t *)(v6 + 3496);
  *(float64x2_t *)&__dst[1640] = vabsq_f64(v288);
  v290 = *(float64x2_t *)(v6 + 3480);
  *(float64x2_t *)&__dst[1624] = vabsq_f64(v289);
  v291 = *(float64x2_t *)(v6 + 3464);
  *(float64x2_t *)&__dst[1608] = vabsq_f64(v290);
  v292 = *(float64x2_t *)(v6 + 3448);
  *(float64x2_t *)&__dst[1592] = vabsq_f64(v291);
  v293 = *(float64x2_t *)(v6 + 3432);
  *(float64x2_t *)&__dst[1576] = vabsq_f64(v292);
  v294 = *(float64x2_t *)(v6 + 3416);
  *(float64x2_t *)&__dst[1560] = vabsq_f64(v293);
  v295 = *(float64x2_t *)(v6 + 3400);
  *(float64x2_t *)&__dst[1544] = vabsq_f64(v294);
  v296 = *(float64x2_t *)(v6 + 3384);
  *(float64x2_t *)&__dst[1528] = vabsq_f64(v295);
  v297 = *(float64x2_t *)(v6 + 3368);
  *(float64x2_t *)&__dst[1512] = vabsq_f64(v296);
  v298 = *(float64x2_t *)(v6 + 3352);
  *(float64x2_t *)&__dst[1496] = vabsq_f64(v297);
  v299 = *(float64x2_t *)(v6 + 3336);
  *(float64x2_t *)&__dst[1480] = vabsq_f64(v298);
  v300 = *(float64x2_t *)(v6 + 3320);
  *(float64x2_t *)&__dst[1464] = vabsq_f64(v299);
  v301 = *(float64x2_t *)(v6 + 3304);
  *(float64x2_t *)&__dst[1448] = vabsq_f64(v300);
  v302 = *(float64x2_t *)(v6 + 3288);
  *(float64x2_t *)&__dst[1432] = vabsq_f64(v301);
  v303 = *(float64x2_t *)(v6 + 3272);
  *(float64x2_t *)&__dst[1416] = vabsq_f64(v302);
  v304 = *(float64x2_t *)(v6 + 3256);
  *(float64x2_t *)&__dst[1400] = vabsq_f64(v303);
  v305 = *(float64x2_t *)(v6 + 3240);
  *(float64x2_t *)&__dst[1384] = vabsq_f64(v304);
  v306 = *(float64x2_t *)(v6 + 3224);
  *(float64x2_t *)&__dst[1368] = vabsq_f64(v305);
  v307 = *(float64x2_t *)(v6 + 3208);
  *(float64x2_t *)&__dst[1352] = vabsq_f64(v306);
  v308 = *(float64x2_t *)(v6 + 3192);
  *(float64x2_t *)&__dst[1336] = vabsq_f64(v307);
  v309 = *(float64x2_t *)(v6 + 3176);
  *(float64x2_t *)&__dst[1320] = vabsq_f64(v308);
  v310 = *(float64x2_t *)(v6 + 3160);
  *(float64x2_t *)&__dst[1304] = vabsq_f64(v309);
  v311 = *(float64x2_t *)(v6 + 3144);
  *(float64x2_t *)&__dst[1288] = vabsq_f64(v310);
  v312 = *(float64x2_t *)(v6 + 3128);
  *(float64x2_t *)&__dst[1272] = vabsq_f64(v311);
  v313 = *(float64x2_t *)(v6 + 3112);
  *(float64x2_t *)&__dst[1256] = vabsq_f64(v312);
  v314 = *(float64x2_t *)(v6 + 3096);
  *(float64x2_t *)&__dst[1240] = vabsq_f64(v313);
  v315 = *(float64x2_t *)(v6 + 3080);
  *(float64x2_t *)&__dst[1224] = vabsq_f64(v314);
  v316 = *(float64x2_t *)(v6 + 3064);
  *(float64x2_t *)&__dst[1208] = vabsq_f64(v315);
  v317 = *(float64x2_t *)(v6 + 3048);
  *(float64x2_t *)&__dst[1192] = vabsq_f64(v316);
  v318 = *(float64x2_t *)(v6 + 3032);
  *(float64x2_t *)&__dst[1176] = vabsq_f64(v317);
  v319 = *(float64x2_t *)(v6 + 3016);
  *(float64x2_t *)&__dst[1160] = vabsq_f64(v318);
  v320 = *(float64x2_t *)(v6 + 3000);
  *(float64x2_t *)&__dst[1144] = vabsq_f64(v319);
  v321 = *(float64x2_t *)(v6 + 2984);
  *(float64x2_t *)&__dst[1128] = vabsq_f64(v320);
  v322 = *(float64x2_t *)(v6 + 2968);
  *(float64x2_t *)&__dst[1112] = vabsq_f64(v321);
  v323 = *(float64x2_t *)(v6 + 2952);
  *(float64x2_t *)&__dst[1096] = vabsq_f64(v322);
  v324 = *(float64x2_t *)(v6 + 2936);
  *(float64x2_t *)&__dst[1080] = vabsq_f64(v323);
  v325 = *(float64x2_t *)(v6 + 2920);
  *(float64x2_t *)&__dst[1064] = vabsq_f64(v324);
  v326 = vabsq_f64(*(float64x2_t *)(v6 + 2904));
  *(float64x2_t *)&__dst[1048] = vabsq_f64(v325);
  v327 = vabsq_f64(*(float64x2_t *)(v6 + 2872));
  *(float64x2_t *)&__dst[1016] = vabsq_f64(*(float64x2_t *)(v6 + 2888));
  *(float64x2_t *)&__dst[1032] = v326;
  v328 = vabsq_f64(*(float64x2_t *)(v6 + 2840));
  *(float64x2_t *)&__dst[984] = vabsq_f64(*(float64x2_t *)(v6 + 2856));
  *(float64x2_t *)&__dst[1000] = v327;
  v329 = vabsq_f64(*(float64x2_t *)(v6 + 2808));
  *(float64x2_t *)&__dst[952] = vabsq_f64(*(float64x2_t *)(v6 + 2824));
  *(float64x2_t *)&__dst[968] = v328;
  v330 = vabsq_f64(*(float64x2_t *)(v6 + 2776));
  *(float64x2_t *)&__dst[920] = vabsq_f64(*(float64x2_t *)(v6 + 2792));
  *(float64x2_t *)&__dst[936] = v329;
  v331 = vabsq_f64(*(float64x2_t *)(v6 + 2744));
  *(float64x2_t *)&__dst[888] = vabsq_f64(*(float64x2_t *)(v6 + 2760));
  *(float64x2_t *)&__dst[904] = v330;
  v332 = vabsq_f64(*(float64x2_t *)(v6 + 2712));
  *(float64x2_t *)&__dst[856] = vabsq_f64(*(float64x2_t *)(v6 + 2728));
  *(float64x2_t *)&__dst[872] = v331;
  v333 = vabsq_f64(*(float64x2_t *)(v6 + 2680));
  *(float64x2_t *)&__dst[824] = vabsq_f64(*(float64x2_t *)(v6 + 2696));
  *(float64x2_t *)&__dst[840] = v332;
  v334 = vabsq_f64(*(float64x2_t *)(v6 + 2648));
  *(float64x2_t *)&__dst[792] = vabsq_f64(*(float64x2_t *)(v6 + 2664));
  *(float64x2_t *)&__dst[808] = v333;
  v335 = vabsq_f64(*(float64x2_t *)(v6 + 2616));
  *(float64x2_t *)&__dst[760] = vabsq_f64(*(float64x2_t *)(v6 + 2632));
  *(float64x2_t *)&__dst[776] = v334;
  v336 = vabsq_f64(*(float64x2_t *)(v6 + 2584));
  *(float64x2_t *)&__dst[728] = vabsq_f64(*(float64x2_t *)(v6 + 2600));
  *(float64x2_t *)&__dst[744] = v335;
  v337 = vabsq_f64(*(float64x2_t *)(v6 + 2552));
  *(float64x2_t *)&__dst[696] = vabsq_f64(*(float64x2_t *)(v6 + 2568));
  *(float64x2_t *)&__dst[712] = v336;
  v338 = vabsq_f64(*(float64x2_t *)(v6 + 2520));
  *(float64x2_t *)&__dst[664] = vabsq_f64(*(float64x2_t *)(v6 + 2536));
  *(float64x2_t *)&__dst[680] = v337;
  v339 = vabsq_f64(*(float64x2_t *)(v6 + 2488));
  *(float64x2_t *)&__dst[632] = vabsq_f64(*(float64x2_t *)(v6 + 2504));
  *(float64x2_t *)&__dst[648] = v338;
  v340 = vabsq_f64(*(float64x2_t *)(v6 + 2456));
  *(float64x2_t *)&__dst[600] = vabsq_f64(*(float64x2_t *)(v6 + 2472));
  *(float64x2_t *)&__dst[616] = v339;
  v341 = vabsq_f64(*(float64x2_t *)(v6 + 2424));
  *(float64x2_t *)&__dst[568] = vabsq_f64(*(float64x2_t *)(v6 + 2440));
  *(float64x2_t *)&__dst[584] = v340;
  v342 = vabsq_f64(*(float64x2_t *)(v6 + 2392));
  *(float64x2_t *)&__dst[536] = vabsq_f64(*(float64x2_t *)(v6 + 2408));
  *(float64x2_t *)&__dst[552] = v341;
  v343 = vabsq_f64(*(float64x2_t *)(v6 + 2360));
  *(float64x2_t *)&__dst[504] = vabsq_f64(*(float64x2_t *)(v6 + 2376));
  *(float64x2_t *)&__dst[520] = v342;
  v344 = vabsq_f64(*(float64x2_t *)(v6 + 2328));
  *(float64x2_t *)&__dst[472] = vabsq_f64(*(float64x2_t *)(v6 + 2344));
  *(float64x2_t *)&__dst[488] = v343;
  v345 = vabsq_f64(*(float64x2_t *)(v6 + 2296));
  *(float64x2_t *)&__dst[440] = vabsq_f64(*(float64x2_t *)(v6 + 2312));
  *(float64x2_t *)&__dst[456] = v344;
  v346 = vabsq_f64(*(float64x2_t *)(v6 + 2264));
  *(float64x2_t *)&__dst[408] = vabsq_f64(*(float64x2_t *)(v6 + 2280));
  *(float64x2_t *)&__dst[424] = v345;
  v347 = vabsq_f64(*(float64x2_t *)(v6 + 2232));
  *(float64x2_t *)&__dst[376] = vabsq_f64(*(float64x2_t *)(v6 + 2248));
  *(float64x2_t *)&__dst[392] = v346;
  v348 = vabsq_f64(*(float64x2_t *)(v6 + 2200));
  *(float64x2_t *)&__dst[344] = vabsq_f64(*(float64x2_t *)(v6 + 2216));
  *(float64x2_t *)&__dst[360] = v347;
  v349 = vabsq_f64(*(float64x2_t *)(v6 + 2168));
  *(float64x2_t *)&__dst[312] = vabsq_f64(*(float64x2_t *)(v6 + 2184));
  *(float64x2_t *)&__dst[328] = v348;
  v350 = vabsq_f64(*(float64x2_t *)(v6 + 2136));
  *(float64x2_t *)&__dst[280] = vabsq_f64(*(float64x2_t *)(v6 + 2152));
  *(float64x2_t *)&__dst[296] = v349;
  *(float64x2_t *)&__dst[264] = v350;
  v351 = vabsq_f64(*(float64x2_t *)(v6 + 2104));
  *(float64x2_t *)&__dst[248] = vabsq_f64(*(float64x2_t *)(v6 + 2120));
  *(float64x2_t *)&__dst[232] = v351;
  v352 = vabsq_f64(*(float64x2_t *)(v6 + 2072));
  *(float64x2_t *)&__dst[216] = vabsq_f64(*(float64x2_t *)(v6 + 2088));
  *(float64x2_t *)&__dst[200] = v352;
  v353 = vabsq_f64(*(float64x2_t *)(v6 + 2040));
  *(float64x2_t *)&__dst[184] = vabsq_f64(*(float64x2_t *)(v6 + 2056));
  *(float64x2_t *)&__dst[168] = v353;
  v354 = vabsq_f64(*(float64x2_t *)(v6 + 2008));
  *(float64x2_t *)&__dst[152] = vabsq_f64(*(float64x2_t *)(v6 + 2024));
  *(float64x2_t *)&__dst[136] = v354;
  v355 = vabsq_f64(*(float64x2_t *)(v6 + 1976));
  *(float64x2_t *)&__dst[120] = vabsq_f64(*(float64x2_t *)(v6 + 1992));
  *(float64x2_t *)&__dst[104] = v355;
  v356 = vabsq_f64(*(float64x2_t *)(v6 + 1944));
  *(float64x2_t *)&__dst[88] = vabsq_f64(*(float64x2_t *)(v6 + 1960));
  *(float64x2_t *)&__dst[72] = v356;
  v357 = vabsq_f64(*(float64x2_t *)(v6 + 1912));
  *(float64x2_t *)&__dst[56] = vabsq_f64(*(float64x2_t *)(v6 + 1928));
  *(float64x2_t *)&__dst[40] = v357;
  v358 = *v38;
  *(float64x2_t *)&__dst[24] = vabsq_f64(*(float64x2_t *)(v6 + 1896));
  v359 = vabsq_f64(v358);
  *(float64x2_t *)&__dst[8] = v359;
  v359.f64[0] = *(float64_t *)(v6 + 3672);
  *(_QWORD *)&__dst[1800] = *(_OWORD *)&vabsq_f64(v359);
  v610 = 0x46293E5939A08CEALL;
  v360 = 8;
  do
  {
    v361 = *(double *)&__dst[v360];
    if (v361 > 1.0e30)
      break;
    _ZF = v360 == 1800;
    v360 += 8;
  }
  while (!_ZF);
  v575 = *(double *)&v263;
  if (v361 > 1.0e30)
  {
    sub_20F4AD5FC(v578);
    if (**(int **)(v578[0] + 56) <= 5)
    {
      v362 = *(unsigned __int8 *)(v578[0] + 72);
      v363 = sub_20E8C31DC(v578[0], "OSLogSurrogateAppender", 1, 0);
      v364 = v363 ? v363 + 16 : 0;
      _ZF = !v362 && v363 == 0;
      if (!_ZF)
      {
        *(_QWORD *)__src = v578;
        *(std::chrono::steady_clock::time_point *)&__src[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&__src[16] = std::chrono::system_clock::now();
        *(_DWORD *)&__src[24] = 5;
        *(_QWORD *)&__src[32] = "unknown file";
        *(_DWORD *)&__src[40] = 209;
        *(_QWORD *)&__src[64] = 0;
        *(_QWORD *)&__src[48] = "unknown function";
        *(_QWORD *)&__src[56] = 0;
        v366 = **(_QWORD **)__src;
        v367 = (uint64_t *)(**(_QWORD **)__src + 16);
        if (*(char *)(**(_QWORD **)__src + 39) < 0)
        {
          v369 = *(void **)(v366 + 16);
          v368 = *(void **)(v366 + 24);
        }
        else
        {
          v368 = (void *)*(unsigned __int8 *)(**(_QWORD **)__src + 39);
          v369 = (void *)(**(_QWORD **)__src + 16);
        }
        object = v369;
        v602 = v368;
        v383 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v383 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)__dst);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
          if (__dst[24] && (__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        *(_QWORD *)&v384 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v385 = byte_254A4A4F8;
        }
        else
        {
          v384 = *(double *)&byte_254A4A4F8[8];
          v385 = *(const char **)byte_254A4A4F8;
        }
        *(_QWORD *)&v587.f64[0] = v385;
        v587.f64[1] = v384;
        *(_QWORD *)__dst = os_log_create(v385, (const char *)object);
        sub_20E86E5A8(&__dst[8], (uint64_t)&v587);
        sub_20E86E5A8(&__dst[40], (uint64_t)&object);
        v386 = *(NSObject **)__dst;
        sub_20E86E44C((uint64_t)__dst);
        sub_20F4D63D0((int)__dst, v364, v367, v386, OS_LOG_TYPE_ERROR);
        if (v362)
        {
          sub_20E8C003C((uint64_t)__src, "IMU state factor reaches high magnitudes.");
          sub_20E863570((uint64_t)__src);
        }
        sub_20E863714((uint64_t)__src);
      }
    }
  }
  *(_QWORD *)&v387.f64[0] = vdupq_laneq_s64(v560, 1).u64[0];
  v388 = (float64x2_t)vdupq_lane_s64(v560.i64[0], 0);
  *(_QWORD *)&v388.f64[0] = v564.i64[0];
  *(_QWORD *)&v387.f64[1] = v556.i64[0];
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(v577), (int8x16_t)vcgezq_f64(v577)), (int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(v388), (int8x16_t)vcgezq_f64(v388))), (int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(v387), (int8x16_t)vcgezq_f64(v387)), (int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(v571), (int8x16_t)vcgezq_f64(v571))))))) & 1) != 0)
  {
    sub_20F4AD5FC(v578);
    if (**(int **)(v578[0] + 56) > 5)
      return 0;
    v402 = *(unsigned __int8 *)(v578[0] + 72);
    v403 = sub_20E8C31DC(v578[0], "OSLogSurrogateAppender", 1, 0);
    v404 = v403 ? v403 + 16 : 0;
    if (!v402 && !v403)
      return 0;
    *(_QWORD *)__src = v578;
    *(std::chrono::steady_clock::time_point *)&__src[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&__src[16] = std::chrono::system_clock::now();
    *(_DWORD *)&__src[24] = 5;
    *(_QWORD *)&__src[32] = "unknown file";
    *(_DWORD *)&__src[40] = 213;
    *(_QWORD *)&__src[64] = 0;
    *(_QWORD *)&__src[48] = "unknown function";
    *(_QWORD *)&__src[56] = 0;
    v405 = (uint64_t *)(v578[0] + 16);
    if (*(char *)(v578[0] + 39) < 0)
    {
      v407 = *(void **)(v578[0] + 16);
      v406 = *(void **)(v578[0] + 24);
    }
    else
    {
      v406 = (void *)*(unsigned __int8 *)(v578[0] + 39);
      v407 = (void *)(v578[0] + 16);
    }
    object = v407;
    v602 = v406;
    v408 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v408 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)__dst);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
      if (__dst[24] && (__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    *(_QWORD *)&v409 = byte_254A4A4F8[23];
    if (byte_254A4A4F8[23] >= 0)
    {
      v410 = byte_254A4A4F8;
    }
    else
    {
      v409 = *(double *)&byte_254A4A4F8[8];
      v410 = *(const char **)byte_254A4A4F8;
    }
    *(_QWORD *)&v587.f64[0] = v410;
    v587.f64[1] = v409;
    *(_QWORD *)__dst = os_log_create(v410, (const char *)object);
    sub_20E86E5A8(&__dst[8], (uint64_t)&v587);
    sub_20E86E5A8(&__dst[40], (uint64_t)&object);
    v411 = *(NSObject **)__dst;
    sub_20E86E44C((uint64_t)__dst);
    sub_20F4D67C0((int)__dst, v404, v405, v411, OS_LOG_TYPE_ERROR);
    if (v402)
    {
      sub_20E8C003C((uint64_t)__src, "IMU R factor contains NaNs.");
      sub_20E863570((uint64_t)__src);
    }
LABEL_241:
    sub_20E863714((uint64_t)__src);
    return 0;
  }
  *(_QWORD *)&v389.f64[0] = v564.i64[0];
  *(_QWORD *)&v389.f64[1] = v560.i64[0];
  v390.f64[0] = v548;
  *(_QWORD *)&v390.f64[1] = v556.i64[0];
  v391 = vabsq_f64(v390);
  v390.f64[0] = v571.f64[0];
  v390.f64[1] = v575;
  *(void **)&v392.f64[0] = v552[0];
  v392.f64[1] = v577.f64[0];
  v393 = (int8x16_t)vabsq_f64(v392);
  v394 = (float64x2_t)vdupq_n_s64(0x46293E5939A08CEAuLL);
  if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64((float64x2_t)vextq_s8(v393, v393, 8uLL), v394), (int32x4_t)vcgtq_f64(vabsq_f64(v389), v394)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v391, v394), (int32x4_t)vcgtq_f64(vabsq_f64(v390), v394))))) & 1) != 0|| vabsq_f64(*(float64x2_t *)__lenb).f64[0] > 1.0e30)
  {
    sub_20F4AD5FC(v578);
    if (**(int **)(v578[0] + 56) <= 5)
    {
      v395 = *(unsigned __int8 *)(v578[0] + 72);
      v396 = sub_20E8C31DC(v578[0], "OSLogSurrogateAppender", 1, 0);
      v397 = v396 ? v396 + 16 : 0;
      if (v395 || v396)
      {
        *(_QWORD *)__src = v578;
        *(std::chrono::steady_clock::time_point *)&__src[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&__src[16] = std::chrono::system_clock::now();
        *(_DWORD *)&__src[24] = 5;
        *(_QWORD *)&__src[32] = "unknown file";
        *(_DWORD *)&__src[40] = 217;
        *(_QWORD *)&__src[64] = 0;
        *(_QWORD *)&__src[48] = "unknown function";
        *(_QWORD *)&__src[56] = 0;
        v398 = **(_QWORD **)__src;
        v399 = (uint64_t *)(**(_QWORD **)__src + 16);
        if (*(char *)(**(_QWORD **)__src + 39) < 0)
        {
          v401 = *(void **)(v398 + 16);
          v400 = *(void **)(v398 + 24);
        }
        else
        {
          v400 = (void *)*(unsigned __int8 *)(**(_QWORD **)__src + 39);
          v401 = (void *)(**(_QWORD **)__src + 16);
        }
        object = v401;
        v602 = v400;
        v412 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v412 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)__dst);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
          if (__dst[24] && (__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        *(_QWORD *)&v413 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v414 = byte_254A4A4F8;
        }
        else
        {
          v413 = *(double *)&byte_254A4A4F8[8];
          v414 = *(const char **)byte_254A4A4F8;
        }
        *(_QWORD *)&v587.f64[0] = v414;
        v587.f64[1] = v413;
        *(_QWORD *)__dst = os_log_create(v414, (const char *)object);
        sub_20E86E5A8(&__dst[8], (uint64_t)&v587);
        sub_20E86E5A8(&__dst[40], (uint64_t)&object);
        v415 = *(NSObject **)__dst;
        sub_20E86E44C((uint64_t)__dst);
        sub_20F4D6BB0((int)__dst, v397, v399, v415, OS_LOG_TYPE_ERROR);
        if (v395)
        {
          sub_20E8C003C((uint64_t)__src, "IMU R factor reaches high magnitudes.");
          sub_20E863570((uint64_t)__src);
        }
        sub_20E863714((uint64_t)__src);
      }
    }
  }
  if (v9[4][1].i8[4])
  {
    *(_QWORD *)__dst = v5;
    *(_QWORD *)&__dst[8] = v5;
    if (sub_20F4D6FA0((double **)__dst))
    {
      sub_20F4AD5FC(v578);
      if (**(int **)(v578[0] + 56) > 5)
        return 0;
      v417 = *(unsigned __int8 *)(v578[0] + 72);
      v418 = sub_20E8C31DC(v578[0], "OSLogSurrogateAppender", 1, 0);
      v419 = v418 ? v418 + 16 : 0;
      if (!v417 && !v418)
        return 0;
      *(_QWORD *)__src = v578;
      *(std::chrono::steady_clock::time_point *)&__src[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&__src[16] = std::chrono::system_clock::now();
      *(_DWORD *)&__src[24] = 5;
      *(_QWORD *)&__src[32] = "unknown file";
      *(_DWORD *)&__src[40] = 221;
      *(_QWORD *)&__src[64] = 0;
      *(_QWORD *)&__src[48] = "unknown function";
      *(_QWORD *)&__src[56] = 0;
      v420 = (uint64_t *)(v578[0] + 16);
      if (*(char *)(v578[0] + 39) < 0)
      {
        v422 = *(void **)(v578[0] + 16);
        v421 = *(void **)(v578[0] + 24);
      }
      else
      {
        v421 = (void *)*(unsigned __int8 *)(v578[0] + 39);
        v422 = (void *)(v578[0] + 16);
      }
      object = v422;
      v602 = v421;
      v435 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v435 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)__dst);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
        if (__dst[24] && (__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      *(_QWORD *)&v436 = byte_254A4A4F8[23];
      if (byte_254A4A4F8[23] >= 0)
      {
        v437 = byte_254A4A4F8;
      }
      else
      {
        v436 = *(double *)&byte_254A4A4F8[8];
        v437 = *(const char **)byte_254A4A4F8;
      }
      *(_QWORD *)&v587.f64[0] = v437;
      v587.f64[1] = v436;
      *(_QWORD *)__dst = os_log_create(v437, (const char *)object);
      sub_20E86E5A8(&__dst[8], (uint64_t)&v587);
      sub_20E86E5A8(&__dst[40], (uint64_t)&object);
      v438 = *(NSObject **)__dst;
      sub_20E86E44C((uint64_t)__dst);
      sub_20F4D7114((int)__dst, v419, v420, v438, OS_LOG_TYPE_ERROR);
      if (v417)
      {
        sub_20E8C003C((uint64_t)__src, "IMU dt factor contains NaNs.");
        sub_20E863570((uint64_t)__src);
      }
      goto LABEL_241;
    }
    v416.f64[0] = *(float64_t *)(v5 + 112);
    v423 = vabsq_f64(*(float64x2_t *)v5);
    v424 = vabsq_f64(*(float64x2_t *)(v5 + 16));
    v425 = vabsq_f64(*(float64x2_t *)(v5 + 32));
    v426 = vabsq_f64(*(float64x2_t *)(v5 + 48));
    v427 = vabsq_f64(*(float64x2_t *)(v5 + 64));
    v428 = vabsq_f64(*(float64x2_t *)(v5 + 80));
    *(float64x2_t *)&__dst[104] = vabsq_f64(*(float64x2_t *)(v5 + 96));
    *(float64x2_t *)&__dst[88] = v428;
    *(float64x2_t *)&__dst[72] = v427;
    *(float64x2_t *)&__dst[56] = v426;
    *(float64x2_t *)&__dst[40] = v425;
    *(float64x2_t *)&__dst[24] = v424;
    *(float64x2_t *)&__dst[8] = v423;
    *(_QWORD *)&__dst[120] = *(_OWORD *)&vabsq_f64(v416);
    *(_QWORD *)&__dst[128] = 0x46293E5939A08CEALL;
    if (sub_20F4B473C((double *)__dst))
    {
      sub_20F4AD5FC(v578);
      if (**(int **)(v578[0] + 56) <= 5)
      {
        v429 = *(unsigned __int8 *)(v578[0] + 72);
        v430 = sub_20E8C31DC(v578[0], "OSLogSurrogateAppender", 1, 0);
        v431 = v430 ? v430 + 16 : 0;
        if (v429 || v430)
        {
          *(_QWORD *)__src = v578;
          *(std::chrono::steady_clock::time_point *)&__src[8] = std::chrono::steady_clock::now();
          *(std::chrono::system_clock::time_point *)&__src[16] = std::chrono::system_clock::now();
          *(_DWORD *)&__src[24] = 5;
          *(_QWORD *)&__src[32] = "unknown file";
          *(_DWORD *)&__src[40] = 225;
          *(_QWORD *)&__src[64] = 0;
          *(_QWORD *)&__src[48] = "unknown function";
          *(_QWORD *)&__src[56] = 0;
          v432 = (uint64_t *)(v578[0] + 16);
          if (*(char *)(v578[0] + 39) < 0)
          {
            v434 = *(void **)(v578[0] + 16);
            v433 = *(void **)(v578[0] + 24);
          }
          else
          {
            v433 = (void *)*(unsigned __int8 *)(v578[0] + 39);
            v434 = (void *)(v578[0] + 16);
          }
          object = v434;
          v602 = v433;
          v440 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v440 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)__dst);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
            if (__dst[24] && (__dst[23] & 0x80000000) != 0)
              operator delete(*(void **)__dst);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          *(_QWORD *)&v441 = byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v442 = byte_254A4A4F8;
          }
          else
          {
            v441 = *(double *)&byte_254A4A4F8[8];
            v442 = *(const char **)byte_254A4A4F8;
          }
          *(_QWORD *)&v587.f64[0] = v442;
          v587.f64[1] = v441;
          *(_QWORD *)__dst = os_log_create(v442, (const char *)object);
          sub_20E86E5A8(&__dst[8], (uint64_t)&v587);
          sub_20E86E5A8(&__dst[40], (uint64_t)&object);
          v443 = *(NSObject **)__dst;
          sub_20E86E44C((uint64_t)__dst);
          sub_20F4D7504((int)__dst, v431, v432, v443, OS_LOG_TYPE_ERROR);
          if (v429)
          {
            sub_20E8C003C((uint64_t)__src, "IMU dt factor reaches high magnitudes.");
            sub_20E863570((uint64_t)__src);
          }
          sub_20E863714((uint64_t)__src);
        }
      }
    }
  }
  return 1;
}

void sub_20F4B43B0(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0xEA0]))
  {
    if (SLOBYTE(STACK[0xE9F]) < 0)
      operator delete((void *)STACK[0xE88]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x658]);
  _Unwind_Resume(a1);
}

void sub_20F4B4458()
{
  if (LOBYTE(STACK[0xEA8]) && SLOBYTE(STACK[0xEA7]) < 0)
    operator delete((void *)STACK[0xE90]);
  if (STACK[0xE88])
    os_release((void *)STACK[0xE88]);
  JUMPOUT(0x20F4B461CLL);
}

void sub_20F4B4498()
{
  if (LOBYTE(STACK[0xEA8]) && SLOBYTE(STACK[0xEA7]) < 0)
    operator delete((void *)STACK[0xE90]);
  if (STACK[0xE88])
    os_release((void *)STACK[0xE88]);
  JUMPOUT(0x20F4B461CLL);
}

void sub_20F4B44DC()
{
  if (LOBYTE(STACK[0xEA8]) && SLOBYTE(STACK[0xEA7]) < 0)
    operator delete((void *)STACK[0xE90]);
  if (STACK[0xE88])
    os_release((void *)STACK[0xE88]);
  JUMPOUT(0x20F4B461CLL);
}

void sub_20F4B4520()
{
  if (LOBYTE(STACK[0xEA8]) && SLOBYTE(STACK[0xEA7]) < 0)
    operator delete((void *)STACK[0xE90]);
  if (STACK[0xE88])
    os_release((void *)STACK[0xE88]);
  JUMPOUT(0x20F4B461CLL);
}

void sub_20F4B455C()
{
  if (LOBYTE(STACK[0xEA8]) && SLOBYTE(STACK[0xEA7]) < 0)
    operator delete((void *)STACK[0xE90]);
  if (STACK[0xE88])
    os_release((void *)STACK[0xE88]);
  JUMPOUT(0x20F4B461CLL);
}

void sub_20F4B45B8()
{
  sub_20E863714(&STACK[0x608]);
  JUMPOUT(0x20F4B470CLL);
}

void sub_20F4B45D4()
{
  if (LOBYTE(STACK[0xE60]) && SLOBYTE(STACK[0xE5F]) < 0)
    operator delete((void *)STACK[0xE48]);
  if (STACK[0xE40])
    os_release((void *)STACK[0xE40]);
  sub_20E863714((uint64_t)&STACK[0x608]);
  JUMPOUT(0x20F4B470CLL);
}

void sub_20F4B4618(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x658]);
  _Unwind_Resume(a1);
}

void sub_20F4B462C()
{
  JUMPOUT(0x20F4B470CLL);
}

void sub_20F4B4724(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20F4B472CLL);
  sub_20E860DA4(a1);
}

BOOL sub_20F4B473C(double *a1)
{
  double v1;

  v1 = a1[16];
  if (a1[1] > v1)
    return 1;
  if (a1[2] > v1)
    return 1;
  if (a1[3] > v1)
    return 1;
  if (a1[4] > v1)
    return 1;
  if (a1[5] > v1)
    return 1;
  if (a1[6] > v1)
    return 1;
  if (a1[7] > v1)
    return 1;
  if (a1[8] > v1)
    return 1;
  if (a1[9] > v1)
    return 1;
  if (a1[10] > v1)
    return 1;
  if (a1[11] > v1)
    return 1;
  if (a1[12] > v1)
    return 1;
  if (a1[13] > v1)
    return 1;
  if (a1[14] <= v1)
    return a1[15] > v1;
  return 1;
}

void *sub_20F4B4874@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return memcpy(a2, (const void *)(a1 + 16), 0x708uLL);
}

void sub_20F4B488C()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F4B48A0()
{
  return 4;
}

float64x2_t sub_20F4B48A8(uint64_t a1, uint64_t a2)
{
  int64x2_t v2;
  int64x2_t v3;
  int64x2_t v4;
  int64x2_t v5;
  float64x2_t v6;
  int64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  int64x2_t v11;
  float64x2_t v12;
  int64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  int64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  int64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  float64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  float64x2_t v32;
  int64x2_t v33;
  float64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v42;
  float64x2_t v46;
  int64x2_t v47;
  float64x2_t v48;
  int64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  int64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  int64x2_t v81;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t result;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;

  v2 = *(int64x2_t *)(a1 + 272);
  v3 = *(int64x2_t *)(a1 + 288);
  v4 = *(int64x2_t *)(a1 + 256);
  v6 = *(float64x2_t *)(a1 + 512);
  v5 = *(int64x2_t *)(a1 + 528);
  v7 = *(int64x2_t *)(a1 + 496);
  v9 = *(float64x2_t *)(a1 + 752);
  v8 = *(float64x2_t *)(a1 + 768);
  v10 = *(float64x2_t *)(a1 + 736);
  v12 = *(float64x2_t *)(a1 + 992);
  v11 = *(int64x2_t *)(a1 + 1008);
  v13 = *(int64x2_t *)(a1 + 976);
  v14 = *(float64x2_t *)(a1 + 1232);
  v15 = *(float64x2_t *)(a1 + 1216);
  v16 = *(int64x2_t *)(a1 + 1472);
  v17 = *(float64x2_t *)(a1 + 1456);
  *(_QWORD *)&v18.f64[0] = vdupq_laneq_s64(v4, 1).u64[0];
  v119 = (float64x2_t)vzip1q_s64(v4, *(int64x2_t *)(a1 + 376));
  v18.f64[1] = *(float64_t *)(a1 + 384);
  v123 = (float64x2_t)vzip1q_s64(v7, *(int64x2_t *)(a1 + 616));
  *(_QWORD *)&v19.f64[0] = vdupq_laneq_s64(v7, 1).u64[0];
  v19.f64[1] = *(float64_t *)(a1 + 624);
  *(_QWORD *)&v20.f64[0] = vdupq_laneq_s64((int64x2_t)v10, 1).u64[0];
  v20.f64[1] = *(float64_t *)(a1 + 864);
  v127 = (float64x2_t)vzip1q_s64((int64x2_t)v10, *(int64x2_t *)(a1 + 856));
  v7.i64[0] = vdupq_laneq_s64(v13, 1).u64[0];
  v7.i64[1] = *(_QWORD *)(a1 + 1104);
  v130 = (float64x2_t)v7;
  v7.i64[0] = vdupq_laneq_s64((int64x2_t)v15, 1).u64[0];
  v7.i64[1] = *(_QWORD *)(a1 + 1344);
  v133 = (float64x2_t)v7;
  v134 = (float64x2_t)vzip1q_s64((int64x2_t)v15, *(int64x2_t *)(a1 + 1336));
  v21 = (float64x2_t)vzip1q_s64((int64x2_t)v17, *(int64x2_t *)(a1 + 1576));
  *(_QWORD *)&v17.f64[0] = vdupq_laneq_s64((int64x2_t)v17, 1).u64[0];
  v17.f64[1] = *(float64_t *)(a1 + 1584);
  v137 = v17;
  v138 = v21;
  *(_QWORD *)&v22.f64[0] = vdupq_laneq_s64(v2, 1).u64[0];
  v116 = (float64x2_t)vzip1q_s64(v2, *(int64x2_t *)(a1 + 392));
  v22.f64[1] = *(float64_t *)(a1 + 400);
  v120 = (float64x2_t)vzip1q_s64((int64x2_t)v6, *(int64x2_t *)(a1 + 632));
  *(_QWORD *)&v21.f64[0] = vdupq_laneq_s64((int64x2_t)v6, 1).u64[0];
  v21.f64[1] = *(float64_t *)(a1 + 640);
  *(_QWORD *)&v23.f64[0] = vdupq_laneq_s64((int64x2_t)v9, 1).u64[0];
  v23.f64[1] = *(float64_t *)(a1 + 880);
  v124 = (float64x2_t)vzip1q_s64((int64x2_t)v9, *(int64x2_t *)(a1 + 872));
  v128 = (float64x2_t)vzip1q_s64((int64x2_t)v12, *(int64x2_t *)(a1 + 1112));
  *(_QWORD *)&v10.f64[0] = vdupq_laneq_s64((int64x2_t)v12, 1).u64[0];
  v10.f64[1] = *(float64_t *)(a1 + 1120);
  v2.i64[0] = vdupq_laneq_s64((int64x2_t)v14, 1).u64[0];
  v2.i64[1] = *(_QWORD *)(a1 + 1360);
  v131 = (float64x2_t)v2;
  v132 = (float64x2_t)vzip1q_s64((int64x2_t)v14, *(int64x2_t *)(a1 + 1352));
  v24 = vzip1q_s64(v16, *(int64x2_t *)(a1 + 1592));
  v16.i64[0] = vdupq_laneq_s64(v16, 1).u64[0];
  v16.i64[1] = *(_QWORD *)(a1 + 1600);
  v135 = (float64x2_t)v16;
  v136 = (float64x2_t)v24;
  *(_QWORD *)&v25.f64[0] = vdupq_laneq_s64(v3, 1).u64[0];
  v114 = (float64x2_t)vzip1q_s64(v3, *(int64x2_t *)(a1 + 408));
  v25.f64[1] = *(float64_t *)(a1 + 416);
  v117 = (float64x2_t)vzip1q_s64(v5, *(int64x2_t *)(a1 + 648));
  *(_QWORD *)&v9.f64[0] = vdupq_laneq_s64(v5, 1).u64[0];
  v9.f64[1] = *(float64_t *)(a1 + 656);
  *(_QWORD *)&v15.f64[0] = vdupq_laneq_s64((int64x2_t)v8, 1).u64[0];
  v15.f64[1] = *(float64_t *)(a1 + 896);
  v121 = (float64x2_t)vzip1q_s64((int64x2_t)v8, *(int64x2_t *)(a1 + 888));
  *(_QWORD *)&v26.f64[0] = vdupq_laneq_s64(v11, 1).u64[0];
  v26.f64[1] = *(float64_t *)(a1 + 1136);
  v125 = (float64x2_t)vzip1q_s64(v11, *(int64x2_t *)(a1 + 1128));
  v27 = *(int64x2_t *)(a1 + 1248);
  v129 = (float64x2_t)vzip1q_s64(v27, *(int64x2_t *)(a1 + 1368));
  *(_QWORD *)&v14.f64[0] = vdupq_laneq_s64(v27, 1).u64[0];
  v14.f64[1] = *(float64_t *)(a1 + 1376);
  v28 = *(int64x2_t *)(a1 + 304);
  *(_QWORD *)&v29.f64[0] = vdupq_laneq_s64(v28, 1).u64[0];
  v112 = (float64x2_t)vzip1q_s64(v28, *(int64x2_t *)(a1 + 424));
  v29.f64[1] = *(float64_t *)(a1 + 432);
  v30 = *(int64x2_t *)(a1 + 544);
  v115 = (float64x2_t)vzip1q_s64(v30, *(int64x2_t *)(a1 + 664));
  *(_QWORD *)&v17.f64[0] = vdupq_laneq_s64(v30, 1).u64[0];
  v17.f64[1] = *(float64_t *)(a1 + 672);
  v31 = *(int64x2_t *)(a1 + 784);
  v118 = (float64x2_t)vzip1q_s64(v31, *(int64x2_t *)(a1 + 904));
  *(_QWORD *)&v32.f64[0] = vdupq_laneq_s64(v31, 1).u64[0];
  v32.f64[1] = *(float64_t *)(a1 + 912);
  v33 = *(int64x2_t *)(a1 + 1024);
  v122 = (float64x2_t)vzip1q_s64(v33, *(int64x2_t *)(a1 + 1144));
  *(_QWORD *)&v34.f64[0] = vdupq_laneq_s64(v33, 1).u64[0];
  v34.f64[1] = *(float64_t *)(a1 + 1152);
  v35 = *(int64x2_t *)(a1 + 1264);
  *(_QWORD *)&v12.f64[0] = vdupq_laneq_s64(v35, 1).u64[0];
  v12.f64[1] = *(float64_t *)(a1 + 1392);
  v126 = (float64x2_t)vzip1q_s64(v35, *(int64x2_t *)(a1 + 1384));
  v36 = *(int64x2_t *)(a1 + 320);
  v37 = vzip1q_s64(v36, *(int64x2_t *)(a1 + 440));
  *(_QWORD *)&v8.f64[0] = vdupq_laneq_s64(v36, 1).u64[0];
  v8.f64[1] = *(float64_t *)(a1 + 448);
  v38 = *(int64x2_t *)(a1 + 560);
  *(_QWORD *)&v6.f64[0] = vdupq_laneq_s64(v38, 1).u64[0];
  v113 = (float64x2_t)vzip1q_s64(v38, *(int64x2_t *)(a1 + 680));
  v6.f64[1] = *(float64_t *)(a1 + 688);
  v39 = *(float64x2_t *)(a1 + 336);
  v40 = (float64x2_t)vzip1q_s64((int64x2_t)v39, *(int64x2_t *)(a1 + 456));
  *(_QWORD *)&v39.f64[0] = vdupq_laneq_s64((int64x2_t)v39, 1).u64[0];
  v39.f64[1] = *(float64_t *)(a1 + 464);
  _Q1 = *(int64x2_t *)(a1 + 576);
  v111 = (float64x2_t)v37;
  *(_QWORD *)&v42.f64[0] = vdupq_laneq_s64(_Q1, 1).u64[0];
  v42.f64[1] = *(float64_t *)(a1 + 704);
  _Q2 = *(float64x2_t *)(a2 + 16);
  _Q3 = *(float64x2_t *)(a2 + 32);
  _Q4 = *(float64x2_t *)(a2 + 48);
  v46 = *(float64x2_t *)(a2 + 64);
  v47 = *(int64x2_t *)(a1 + 96);
  v48 = *(float64x2_t *)(a2 + 80);
  v49 = *(int64x2_t *)(a1 + 216);
  v50 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 16), *(int64x2_t *)(a1 + 136)), *(double *)a2), (float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 16), *(int64x2_t *)(a1 + 136)), *(float64x2_t *)a2, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 32), *(int64x2_t *)(a1 + 152)), _Q2.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 32), *(int64x2_t *)(a1 + 152)),
                          _Q2,
                          1),
                        (float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 48), *(int64x2_t *)(a1 + 168)),
                        _Q3.f64[0]),
                      (float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 48), *(int64x2_t *)(a1 + 168)),
                      _Q3,
                      1),
                    (float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 64), *(int64x2_t *)(a1 + 184)),
                    _Q4.f64[0]),
                  (float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 64), *(int64x2_t *)(a1 + 184)),
                  _Q4,
                  1),
                (float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 80), *(int64x2_t *)(a1 + 200)),
                v46.f64[0]),
              (float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 80), *(int64x2_t *)(a1 + 200)),
              v46,
              1),
            (float64x2_t)vzip1q_s64(v47, v49),
            v48.f64[0]),
          (float64x2_t)vzip2q_s64(v47, v49),
          v48,
          1);
  v51 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, *(double *)a2), v18, *(float64x2_t *)a2, 1), v116, _Q2.f64[0]), v22, _Q2, 1), v114, _Q3.f64[0]), v25, _Q3,
                      1),
                    v112,
                    _Q4.f64[0]),
                  v29,
                  _Q4,
                  1),
                v111,
                v46.f64[0]),
              v8,
              v46,
              1),
            v40,
            v48.f64[0]),
          v39,
          v48,
          1);
  v52 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v123, *(double *)a2), v19, *(float64x2_t *)a2, 1), v120, _Q2.f64[0]), v21, _Q2, 1), v117, _Q3.f64[0]), v9, _Q3,
                      1),
                    v115,
                    _Q4.f64[0]),
                  v17,
                  _Q4,
                  1),
                v113,
                v46.f64[0]),
              v6,
              v46,
              1),
            (float64x2_t)vzip1q_s64(_Q1, *(int64x2_t *)(a1 + 696)),
            v48.f64[0]),
          v42,
          v48,
          1);
  v53 = *(float64x2_t *)(a1 + 352);
  v54 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v127, *(double *)a2), v20, *(float64x2_t *)a2, 1), v124, _Q2.f64[0]), v23, _Q2, 1), v121, _Q3.f64[0]), v15, _Q3, 1), v118, _Q4.f64[0]), v32,
          _Q4,
          1);
  v55 = *(float64x2_t *)(a1 + 592);
  v57 = *(float64x2_t *)(a1 + 800);
  v56 = *(float64x2_t *)(a1 + 816);
  v58 = *(float64x2_t *)(a1 + 1056);
  v59 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v13, *(int64x2_t *)(a1 + 1096)), *(double *)a2), v130, *(float64x2_t *)a2, 1), v128, _Q2.f64[0]), v10, _Q2, 1), v125, _Q3.f64[0]), v26, _Q3,
              1),
            v122,
            _Q4.f64[0]),
          v34,
          _Q4,
          1);
  _Q27 = *(float64x2_t *)(a1 + 1040);
  _Q29 = *(float64x2_t *)(a1 + 1296);
  v62 = *(int64x2_t *)(a1 + 1280);
  v63 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v134, *(double *)a2), v133, *(float64x2_t *)a2, 1), v132, _Q2.f64[0]), v131, _Q2, 1), v129, _Q3.f64[0]), v14, _Q3, 1), v126, _Q4.f64[0]), v12,
          _Q4,
          1);
  v64 = *(float64x2_t *)(a1 + 1488);
  v65 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v138, *(double *)a2), v137, *(float64x2_t *)a2, 1), v136, _Q2.f64[0]), v135, _Q2, 1), (float64x2_t)vzip1q_s64((int64x2_t)v64, *(int64x2_t *)(a1 + 1608)), _Q3.f64[0]);
  v66 = *(float64x2_t *)(a1 + 1520);
  *(_QWORD *)&v64.f64[0] = vdupq_laneq_s64((int64x2_t)v64, 1).u64[0];
  v64.f64[1] = *(float64_t *)(a1 + 1616);
  v67 = vmlaq_laneq_f64(v65, v64, _Q3, 1);
  _Q25 = *(float64x2_t *)(a1 + 1504);
  v69 = (float64x2_t)vzip1q_s64((int64x2_t)_Q25, *(int64x2_t *)(a1 + 1624));
  *(_QWORD *)&_Q25.f64[0] = vdupq_laneq_s64((int64x2_t)_Q25, 1).u64[0];
  _Q25.f64[1] = *(float64_t *)(a1 + 1632);
  v70 = vmlaq_laneq_f64(vmlaq_n_f64(v67, v69, _Q4.f64[0]), _Q25, _Q4, 1);
  _Q11 = *(_OWORD *)(a1 + 1696);
  _Q13 = *(_OWORD *)(a1 + 1712);
  _Q1.i64[0] = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D25, D1, V11.D[1] }
  _Q2.f64[0] = *(float64_t *)(a2 + 24);
  __asm { FMLA            D25, D2, V13.D[1] }
  _Q2 = *(_OWORD *)(a1 + 1728);
  v78 = (float64x2_t)vzip1q_s64((int64x2_t)v57, *(int64x2_t *)(a1 + 920));
  *(_QWORD *)&v57.f64[0] = vdupq_laneq_s64((int64x2_t)v57, 1).u64[0];
  v57.f64[1] = *(float64_t *)(a1 + 928);
  v79 = (float64x2_t)vzip1q_s64((int64x2_t)_Q27, *(int64x2_t *)(a1 + 1160));
  *(_QWORD *)&_Q27.f64[0] = vdupq_laneq_s64((int64x2_t)_Q27, 1).u64[0];
  _Q27.f64[1] = *(float64_t *)(a1 + 1168);
  *(_QWORD *)&v18.f64[0] = vdupq_laneq_s64(v62, 1).u64[0];
  v18.f64[1] = *(float64_t *)(a1 + 1408);
  v80 = (float64x2_t)vzip1q_s64((int64x2_t)v66, *(int64x2_t *)(a1 + 1640));
  *(_QWORD *)&v66.f64[0] = vdupq_laneq_s64((int64x2_t)v66, 1).u64[0];
  v66.f64[1] = *(float64_t *)(a1 + 1648);
  v81 = *(int64x2_t *)(a1 + 1536);
  _Q3.f64[0] = *(float64_t *)(a2 + 40);
  __asm { FMLA            D25, D3, V2.D[1] }
  _Q2 = *(_OWORD *)(a1 + 1744);
  v83 = (float64x2_t)vzip1q_s64((int64x2_t)v56, *(int64x2_t *)(a1 + 936));
  *(_QWORD *)&v56.f64[0] = vdupq_laneq_s64((int64x2_t)v56, 1).u64[0];
  v56.f64[1] = *(float64_t *)(a1 + 944);
  v84 = (float64x2_t)vzip1q_s64((int64x2_t)v58, *(int64x2_t *)(a1 + 1176));
  *(_QWORD *)&v58.f64[0] = vdupq_laneq_s64((int64x2_t)v58, 1).u64[0];
  v58.f64[1] = *(float64_t *)(a1 + 1184);
  v85 = (float64x2_t)vzip1q_s64((int64x2_t)_Q29, *(int64x2_t *)(a1 + 1416));
  *(_QWORD *)&_Q29.f64[0] = vdupq_laneq_s64((int64x2_t)_Q29, 1).u64[0];
  _Q29.f64[1] = *(float64_t *)(a1 + 1424);
  *(_QWORD *)&v14.f64[0] = vdupq_laneq_s64(v81, 1).u64[0];
  v86 = (float64x2_t)vzip1q_s64(v81, *(int64x2_t *)(a1 + 1656));
  v14.f64[1] = *(float64_t *)(a1 + 1664);
  v139 = (float64x2_t)vzip1q_s64((int64x2_t)v53, *(int64x2_t *)(a1 + 472));
  *(_QWORD *)&v53.f64[0] = vdupq_laneq_s64((int64x2_t)v53, 1).u64[0];
  v53.f64[1] = *(float64_t *)(a1 + 480);
  _Q4.f64[0] = *(float64_t *)(a2 + 56);
  __asm { FMLA            D25, D4, V2.D[1] }
  v87 = *(float64x2_t *)(a1 + 832);
  v88 = (float64x2_t)vzip1q_s64((int64x2_t)v55, *(int64x2_t *)(a1 + 712));
  *(_QWORD *)&v55.f64[0] = vdupq_laneq_s64((int64x2_t)v55, 1).u64[0];
  v55.f64[1] = *(float64_t *)(a1 + 720);
  v89 = (float64x2_t)vzip1q_s64((int64x2_t)v87, *(int64x2_t *)(a1 + 952));
  *(_QWORD *)&v87.f64[0] = vdupq_laneq_s64((int64x2_t)v87, 1).u64[0];
  v87.f64[1] = *(float64_t *)(a1 + 960);
  v90 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v54, v78, v46.f64[0]), v57, v46, 1), v83, v48.f64[0]);
  _Q3 = *(float64x2_t *)(a1 + 1072);
  v92 = vmlaq_laneq_f64(v90, v56, v48, 1);
  v93 = (float64x2_t)vzip1q_s64((int64x2_t)_Q3, *(int64x2_t *)(a1 + 1192));
  *(_QWORD *)&_Q3.f64[0] = vdupq_laneq_s64((int64x2_t)_Q3, 1).u64[0];
  _Q3.f64[1] = *(float64_t *)(a1 + 1200);
  v94 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v59, v79, v46.f64[0]), _Q27, v46, 1), v84, v48.f64[0]);
  v95 = *(float64x2_t *)(a1 + 1312);
  v96 = *(float64x2_t *)(a1 + 1552);
  v97 = (float64x2_t)vzip1q_s64((int64x2_t)v95, *(int64x2_t *)(a1 + 1432));
  *(_QWORD *)&v95.f64[0] = vdupq_laneq_s64((int64x2_t)v95, 1).u64[0];
  v95.f64[1] = *(float64_t *)(a1 + 1440);
  _Q22 = *(_OWORD *)(a1 + 1760);
  _Q27.f64[0] = *(float64_t *)(a2 + 72);
  __asm { FMLA            D25, D27, V22.D[1] }
  v99 = (float64x2_t)vzip1q_s64((int64x2_t)v96, *(int64x2_t *)(a1 + 1672));
  *(_QWORD *)&v96.f64[0] = vdupq_laneq_s64((int64x2_t)v96, 1).u64[0];
  v96.f64[1] = *(float64_t *)(a1 + 1680);
  v100 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v63, (float64x2_t)vzip1q_s64(v62, *(int64x2_t *)(a1 + 1400)), v46.f64[0]), v18, v46, 1), v85, v48.f64[0]), _Q29, v48, 1);
  _Q28 = *(_OWORD *)(a1 + 1776);
  _Q29.f64[0] = *(float64_t *)(a2 + 88);
  __asm { FMLA            D25, D29, V28.D[1] }
  v102 = *(float64x2_t *)(a2 + 96);
  v103 = vmlaq_laneq_f64(vmlaq_n_f64(v92, v89, v102.f64[0]), v87, v102, 1);
  v104 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v94, v58, v48, 1), v93, v102.f64[0]), _Q3, v102, 1);
  v89.f64[0] = *(float64_t *)(a1 + 128);
  _Q2 = *(float64x2_t *)(a1 + 1792);
  _Q3.f64[0] = *(float64_t *)(a2 + 104);
  __asm { FMLA            D25, D3, V2.D[1] }
  _Q2.f64[0] = *(float64_t *)(a1 + 368);
  _Q3.f64[0] = *(float64_t *)(a2 + 112);
  v89.f64[1] = *(float64_t *)(a1 + 248);
  v106 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v50, (float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 112), *(int64x2_t *)(a1 + 232)), v102.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 112), *(int64x2_t *)(a1 + 232)), v102, 1), v89, _Q3.f64[0]);
  v89.f64[0] = *(float64_t *)(a1 + 608);
  _Q2.f64[1] = *(float64_t *)(a1 + 488);
  v107 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v51, v139, v102.f64[0]), v53, v102, 1), _Q2, _Q3.f64[0]);
  _Q2.f64[0] = *(float64_t *)(a1 + 848);
  v89.f64[1] = *(float64_t *)(a1 + 728);
  result = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v52, v88, v102.f64[0]), v55, v102, 1), v89, _Q3.f64[0]);
  v89.f64[0] = *(float64_t *)(a1 + 1088);
  _Q2.f64[1] = *(float64_t *)(a1 + 968);
  v109 = vmlaq_n_f64(v103, _Q2, _Q3.f64[0]);
  _Q2.f64[0] = *(float64_t *)(a1 + 1328);
  v89.f64[1] = *(float64_t *)(a1 + 1208);
  v110 = vmlaq_n_f64(v104, v89, _Q3.f64[0]);
  v89.f64[0] = *(float64_t *)(a1 + 1568);
  _Q2.f64[1] = *(float64_t *)(a1 + 1448);
  v89.f64[1] = *(float64_t *)(a1 + 1688);
  *(double *)(a2 + 112) = _Q25.f64[0] + *(double *)(a1 + 1808) * _Q3.f64[0];
  *(float64x2_t *)(a2 + 80) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v100, v97, v102.f64[0]), v95, v102, 1), _Q2, _Q3.f64[0]);
  *(float64x2_t *)(a2 + 96) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v70, v80, v46.f64[0]), v66, v46, 1), v86, v48.f64[0]), v14, v48, 1), v99, v102.f64[0]), v96, v102, 1), v89, _Q3.f64[0]);
  *(float64x2_t *)(a2 + 48) = v109;
  *(float64x2_t *)(a2 + 64) = v110;
  *(float64x2_t *)(a2 + 16) = v107;
  *(float64x2_t *)(a2 + 32) = result;
  *(float64x2_t *)a2 = v106;
  return result;
}

float64_t sub_20F4B4FE0(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  int64x2_t v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  float64x2_t v7;
  int64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  int64x2_t v12;
  float64x2_t v13;
  int64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  int64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  int64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  float64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  float64x2_t v33;
  int64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  float64x2_t v41;
  float64x2_t v43;
  float64x2_t v47;
  int64x2_t v48;
  float64x2_t v49;
  int64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  int64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  int64x2_t v82;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64_t result;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;

  v3 = *(int64x2_t *)(a1 + 272);
  v4 = *(int64x2_t *)(a1 + 288);
  v5 = *(int64x2_t *)(a1 + 256);
  v7 = *(float64x2_t *)(a1 + 512);
  v6 = *(int64x2_t *)(a1 + 528);
  v8 = *(int64x2_t *)(a1 + 496);
  v10 = *(float64x2_t *)(a1 + 752);
  v9 = *(float64x2_t *)(a1 + 768);
  v11 = *(float64x2_t *)(a1 + 736);
  v13 = *(float64x2_t *)(a1 + 992);
  v12 = *(int64x2_t *)(a1 + 1008);
  v14 = *(int64x2_t *)(a1 + 976);
  v15 = *(float64x2_t *)(a1 + 1232);
  v16 = *(float64x2_t *)(a1 + 1216);
  v17 = *(int64x2_t *)(a1 + 1472);
  v18 = *(float64x2_t *)(a1 + 1456);
  *(_QWORD *)&v19.f64[0] = vdupq_laneq_s64(v5, 1).u64[0];
  v121 = (float64x2_t)vzip1q_s64(v5, *(int64x2_t *)(a1 + 376));
  v19.f64[1] = *(float64_t *)(a1 + 384);
  v125 = (float64x2_t)vzip1q_s64(v8, *(int64x2_t *)(a1 + 616));
  *(_QWORD *)&v20.f64[0] = vdupq_laneq_s64(v8, 1).u64[0];
  v20.f64[1] = *(float64_t *)(a1 + 624);
  *(_QWORD *)&v21.f64[0] = vdupq_laneq_s64((int64x2_t)v11, 1).u64[0];
  v21.f64[1] = *(float64_t *)(a1 + 864);
  v129 = (float64x2_t)vzip1q_s64((int64x2_t)v11, *(int64x2_t *)(a1 + 856));
  v8.i64[0] = vdupq_laneq_s64(v14, 1).u64[0];
  v8.i64[1] = *(_QWORD *)(a1 + 1104);
  v132 = (float64x2_t)v8;
  v8.i64[0] = vdupq_laneq_s64((int64x2_t)v16, 1).u64[0];
  v8.i64[1] = *(_QWORD *)(a1 + 1344);
  v135 = (float64x2_t)v8;
  v136 = (float64x2_t)vzip1q_s64((int64x2_t)v16, *(int64x2_t *)(a1 + 1336));
  v22 = (float64x2_t)vzip1q_s64((int64x2_t)v18, *(int64x2_t *)(a1 + 1576));
  *(_QWORD *)&v18.f64[0] = vdupq_laneq_s64((int64x2_t)v18, 1).u64[0];
  v18.f64[1] = *(float64_t *)(a1 + 1584);
  v139 = v18;
  v140 = v22;
  *(_QWORD *)&v23.f64[0] = vdupq_laneq_s64(v3, 1).u64[0];
  v118 = (float64x2_t)vzip1q_s64(v3, *(int64x2_t *)(a1 + 392));
  v23.f64[1] = *(float64_t *)(a1 + 400);
  v122 = (float64x2_t)vzip1q_s64((int64x2_t)v7, *(int64x2_t *)(a1 + 632));
  *(_QWORD *)&v22.f64[0] = vdupq_laneq_s64((int64x2_t)v7, 1).u64[0];
  v22.f64[1] = *(float64_t *)(a1 + 640);
  *(_QWORD *)&v24.f64[0] = vdupq_laneq_s64((int64x2_t)v10, 1).u64[0];
  v24.f64[1] = *(float64_t *)(a1 + 880);
  v126 = (float64x2_t)vzip1q_s64((int64x2_t)v10, *(int64x2_t *)(a1 + 872));
  v130 = (float64x2_t)vzip1q_s64((int64x2_t)v13, *(int64x2_t *)(a1 + 1112));
  *(_QWORD *)&v11.f64[0] = vdupq_laneq_s64((int64x2_t)v13, 1).u64[0];
  v11.f64[1] = *(float64_t *)(a1 + 1120);
  v3.i64[0] = vdupq_laneq_s64((int64x2_t)v15, 1).u64[0];
  v3.i64[1] = *(_QWORD *)(a1 + 1360);
  v133 = (float64x2_t)v3;
  v134 = (float64x2_t)vzip1q_s64((int64x2_t)v15, *(int64x2_t *)(a1 + 1352));
  v25 = vzip1q_s64(v17, *(int64x2_t *)(a1 + 1592));
  v17.i64[0] = vdupq_laneq_s64(v17, 1).u64[0];
  v17.i64[1] = *(_QWORD *)(a1 + 1600);
  v137 = (float64x2_t)v17;
  v138 = (float64x2_t)v25;
  *(_QWORD *)&v26.f64[0] = vdupq_laneq_s64(v4, 1).u64[0];
  v116 = (float64x2_t)vzip1q_s64(v4, *(int64x2_t *)(a1 + 408));
  v26.f64[1] = *(float64_t *)(a1 + 416);
  v119 = (float64x2_t)vzip1q_s64(v6, *(int64x2_t *)(a1 + 648));
  *(_QWORD *)&v10.f64[0] = vdupq_laneq_s64(v6, 1).u64[0];
  v10.f64[1] = *(float64_t *)(a1 + 656);
  *(_QWORD *)&v16.f64[0] = vdupq_laneq_s64((int64x2_t)v9, 1).u64[0];
  v16.f64[1] = *(float64_t *)(a1 + 896);
  v123 = (float64x2_t)vzip1q_s64((int64x2_t)v9, *(int64x2_t *)(a1 + 888));
  *(_QWORD *)&v27.f64[0] = vdupq_laneq_s64(v12, 1).u64[0];
  v27.f64[1] = *(float64_t *)(a1 + 1136);
  v127 = (float64x2_t)vzip1q_s64(v12, *(int64x2_t *)(a1 + 1128));
  v28 = *(int64x2_t *)(a1 + 1248);
  v131 = (float64x2_t)vzip1q_s64(v28, *(int64x2_t *)(a1 + 1368));
  *(_QWORD *)&v15.f64[0] = vdupq_laneq_s64(v28, 1).u64[0];
  v15.f64[1] = *(float64_t *)(a1 + 1376);
  v29 = *(int64x2_t *)(a1 + 304);
  *(_QWORD *)&v30.f64[0] = vdupq_laneq_s64(v29, 1).u64[0];
  v114 = (float64x2_t)vzip1q_s64(v29, *(int64x2_t *)(a1 + 424));
  v30.f64[1] = *(float64_t *)(a1 + 432);
  v31 = *(int64x2_t *)(a1 + 544);
  v117 = (float64x2_t)vzip1q_s64(v31, *(int64x2_t *)(a1 + 664));
  *(_QWORD *)&v18.f64[0] = vdupq_laneq_s64(v31, 1).u64[0];
  v18.f64[1] = *(float64_t *)(a1 + 672);
  v32 = *(int64x2_t *)(a1 + 784);
  v120 = (float64x2_t)vzip1q_s64(v32, *(int64x2_t *)(a1 + 904));
  *(_QWORD *)&v33.f64[0] = vdupq_laneq_s64(v32, 1).u64[0];
  v33.f64[1] = *(float64_t *)(a1 + 912);
  v34 = *(int64x2_t *)(a1 + 1024);
  v124 = (float64x2_t)vzip1q_s64(v34, *(int64x2_t *)(a1 + 1144));
  *(_QWORD *)&v35.f64[0] = vdupq_laneq_s64(v34, 1).u64[0];
  v35.f64[1] = *(float64_t *)(a1 + 1152);
  v36 = *(float64x2_t *)(a1 + 1264);
  *(_QWORD *)&v13.f64[0] = vdupq_laneq_s64((int64x2_t)v36, 1).u64[0];
  v13.f64[1] = *(float64_t *)(a1 + 1392);
  v128 = (float64x2_t)vzip1q_s64((int64x2_t)v36, *(int64x2_t *)(a1 + 1384));
  v37 = *(int64x2_t *)(a1 + 320);
  v38 = vzip1q_s64(v37, *(int64x2_t *)(a1 + 440));
  *(_QWORD *)&v9.f64[0] = vdupq_laneq_s64(v37, 1).u64[0];
  v9.f64[1] = *(float64_t *)(a1 + 448);
  v39 = *(int64x2_t *)(a1 + 560);
  *(_QWORD *)&v7.f64[0] = vdupq_laneq_s64(v39, 1).u64[0];
  v115 = (float64x2_t)vzip1q_s64(v39, *(int64x2_t *)(a1 + 680));
  v7.f64[1] = *(float64_t *)(a1 + 688);
  v40 = *(int64x2_t *)(a1 + 336);
  v41 = (float64x2_t)vzip1q_s64(v40, *(int64x2_t *)(a1 + 456));
  *(_QWORD *)&v36.f64[0] = vdupq_laneq_s64(v40, 1).u64[0];
  v36.f64[1] = *(float64_t *)(a1 + 464);
  _Q0 = *(int64x2_t *)(a1 + 576);
  v113 = (float64x2_t)v38;
  *(_QWORD *)&v43.f64[0] = vdupq_laneq_s64(_Q0, 1).u64[0];
  v43.f64[1] = *(float64_t *)(a1 + 704);
  _Q2 = *(float64x2_t *)(a2 + 16);
  _Q3 = *(float64x2_t *)(a2 + 32);
  _Q4 = *(float64x2_t *)(a2 + 48);
  v47 = *(float64x2_t *)(a2 + 64);
  v48 = *(int64x2_t *)(a1 + 96);
  v49 = *(float64x2_t *)(a2 + 80);
  v50 = *(int64x2_t *)(a1 + 216);
  v51 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 16), *(int64x2_t *)(a1 + 136)), *(double *)a2), (float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 16), *(int64x2_t *)(a1 + 136)), *(float64x2_t *)a2, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 32), *(int64x2_t *)(a1 + 152)), _Q2.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 32), *(int64x2_t *)(a1 + 152)),
                          _Q2,
                          1),
                        (float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 48), *(int64x2_t *)(a1 + 168)),
                        _Q3.f64[0]),
                      (float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 48), *(int64x2_t *)(a1 + 168)),
                      _Q3,
                      1),
                    (float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 64), *(int64x2_t *)(a1 + 184)),
                    _Q4.f64[0]),
                  (float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 64), *(int64x2_t *)(a1 + 184)),
                  _Q4,
                  1),
                (float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 80), *(int64x2_t *)(a1 + 200)),
                v47.f64[0]),
              (float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 80), *(int64x2_t *)(a1 + 200)),
              v47,
              1),
            (float64x2_t)vzip1q_s64(v48, v50),
            v49.f64[0]),
          (float64x2_t)vzip2q_s64(v48, v50),
          v49,
          1);
  v52 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v121, *(double *)a2), v19, *(float64x2_t *)a2, 1), v118, _Q2.f64[0]), v23, _Q2, 1), v116, _Q3.f64[0]), v26, _Q3,
                      1),
                    v114,
                    _Q4.f64[0]),
                  v30,
                  _Q4,
                  1),
                v113,
                v47.f64[0]),
              v9,
              v47,
              1),
            v41,
            v49.f64[0]),
          v36,
          v49,
          1);
  v53 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v125, *(double *)a2), v20, *(float64x2_t *)a2, 1), v122, _Q2.f64[0]), v22, _Q2, 1), v119, _Q3.f64[0]), v10, _Q3,
                      1),
                    v117,
                    _Q4.f64[0]),
                  v18,
                  _Q4,
                  1),
                v115,
                v47.f64[0]),
              v7,
              v47,
              1),
            (float64x2_t)vzip1q_s64(_Q0, *(int64x2_t *)(a1 + 696)),
            v49.f64[0]),
          v43,
          v49,
          1);
  v54 = *(float64x2_t *)(a1 + 352);
  v55 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v129, *(double *)a2), v21, *(float64x2_t *)a2, 1), v126, _Q2.f64[0]), v24, _Q2, 1), v123, _Q3.f64[0]), v16, _Q3, 1), v120, _Q4.f64[0]), v33,
          _Q4,
          1);
  v56 = *(float64x2_t *)(a1 + 592);
  v58 = *(float64x2_t *)(a1 + 800);
  v57 = *(float64x2_t *)(a1 + 816);
  v59 = *(float64x2_t *)(a1 + 1056);
  v60 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v14, *(int64x2_t *)(a1 + 1096)), *(double *)a2), v132, *(float64x2_t *)a2, 1), v130, _Q2.f64[0]), v11, _Q2, 1), v127, _Q3.f64[0]), v27, _Q3,
              1),
            v124,
            _Q4.f64[0]),
          v35,
          _Q4,
          1);
  _Q27 = *(float64x2_t *)(a1 + 1040);
  _Q29 = *(float64x2_t *)(a1 + 1296);
  v63 = *(int64x2_t *)(a1 + 1280);
  v64 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v136, *(double *)a2), v135, *(float64x2_t *)a2, 1), v134, _Q2.f64[0]), v133, _Q2, 1), v131, _Q3.f64[0]), v15, _Q3, 1), v128, _Q4.f64[0]), v13,
          _Q4,
          1);
  v65 = *(float64x2_t *)(a1 + 1488);
  v66 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v140, *(double *)a2), v139, *(float64x2_t *)a2, 1), v138, _Q2.f64[0]), v137, _Q2, 1), (float64x2_t)vzip1q_s64((int64x2_t)v65, *(int64x2_t *)(a1 + 1608)), _Q3.f64[0]);
  v67 = *(float64x2_t *)(a1 + 1520);
  *(_QWORD *)&v65.f64[0] = vdupq_laneq_s64((int64x2_t)v65, 1).u64[0];
  v65.f64[1] = *(float64_t *)(a1 + 1616);
  v68 = vmlaq_laneq_f64(v66, v65, _Q3, 1);
  _Q25 = *(float64x2_t *)(a1 + 1504);
  v70 = (float64x2_t)vzip1q_s64((int64x2_t)_Q25, *(int64x2_t *)(a1 + 1624));
  *(_QWORD *)&_Q25.f64[0] = vdupq_laneq_s64((int64x2_t)_Q25, 1).u64[0];
  _Q25.f64[1] = *(float64_t *)(a1 + 1632);
  v71 = vmlaq_laneq_f64(vmlaq_n_f64(v68, v70, _Q4.f64[0]), _Q25, _Q4, 1);
  _Q11 = *(_OWORD *)(a1 + 1696);
  _Q13 = *(_OWORD *)(a1 + 1712);
  _Q0.i64[0] = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D25, D0, V11.D[1] }
  _Q2.f64[0] = *(float64_t *)(a2 + 24);
  __asm { FMLA            D25, D2, V13.D[1] }
  _Q2 = *(_OWORD *)(a1 + 1728);
  v79 = (float64x2_t)vzip1q_s64((int64x2_t)v58, *(int64x2_t *)(a1 + 920));
  *(_QWORD *)&v58.f64[0] = vdupq_laneq_s64((int64x2_t)v58, 1).u64[0];
  v58.f64[1] = *(float64_t *)(a1 + 928);
  v80 = (float64x2_t)vzip1q_s64((int64x2_t)_Q27, *(int64x2_t *)(a1 + 1160));
  *(_QWORD *)&_Q27.f64[0] = vdupq_laneq_s64((int64x2_t)_Q27, 1).u64[0];
  _Q27.f64[1] = *(float64_t *)(a1 + 1168);
  *(_QWORD *)&v19.f64[0] = vdupq_laneq_s64(v63, 1).u64[0];
  v19.f64[1] = *(float64_t *)(a1 + 1408);
  v81 = (float64x2_t)vzip1q_s64((int64x2_t)v67, *(int64x2_t *)(a1 + 1640));
  *(_QWORD *)&v67.f64[0] = vdupq_laneq_s64((int64x2_t)v67, 1).u64[0];
  v67.f64[1] = *(float64_t *)(a1 + 1648);
  v82 = *(int64x2_t *)(a1 + 1536);
  _Q3.f64[0] = *(float64_t *)(a2 + 40);
  __asm { FMLA            D25, D3, V2.D[1] }
  _Q2 = *(_OWORD *)(a1 + 1744);
  v84 = (float64x2_t)vzip1q_s64((int64x2_t)v57, *(int64x2_t *)(a1 + 936));
  *(_QWORD *)&v57.f64[0] = vdupq_laneq_s64((int64x2_t)v57, 1).u64[0];
  v57.f64[1] = *(float64_t *)(a1 + 944);
  v85 = (float64x2_t)vzip1q_s64((int64x2_t)v59, *(int64x2_t *)(a1 + 1176));
  *(_QWORD *)&v59.f64[0] = vdupq_laneq_s64((int64x2_t)v59, 1).u64[0];
  v59.f64[1] = *(float64_t *)(a1 + 1184);
  v86 = (float64x2_t)vzip1q_s64((int64x2_t)_Q29, *(int64x2_t *)(a1 + 1416));
  *(_QWORD *)&_Q29.f64[0] = vdupq_laneq_s64((int64x2_t)_Q29, 1).u64[0];
  _Q29.f64[1] = *(float64_t *)(a1 + 1424);
  *(_QWORD *)&v15.f64[0] = vdupq_laneq_s64(v82, 1).u64[0];
  v15.f64[1] = *(float64_t *)(a1 + 1664);
  v141 = (float64x2_t)vzip1q_s64((int64x2_t)v54, *(int64x2_t *)(a1 + 472));
  *(_QWORD *)&v54.f64[0] = vdupq_laneq_s64((int64x2_t)v54, 1).u64[0];
  v54.f64[1] = *(float64_t *)(a1 + 480);
  _Q4.f64[0] = *(float64_t *)(a2 + 56);
  __asm { FMLA            D25, D4, V2.D[1] }
  v87 = *(float64x2_t *)(a1 + 832);
  v88 = (float64x2_t)vzip1q_s64((int64x2_t)v56, *(int64x2_t *)(a1 + 712));
  *(_QWORD *)&v56.f64[0] = vdupq_laneq_s64((int64x2_t)v56, 1).u64[0];
  v56.f64[1] = *(float64_t *)(a1 + 720);
  v89 = (float64x2_t)vzip1q_s64((int64x2_t)v87, *(int64x2_t *)(a1 + 952));
  *(_QWORD *)&v87.f64[0] = vdupq_laneq_s64((int64x2_t)v87, 1).u64[0];
  v87.f64[1] = *(float64_t *)(a1 + 960);
  v90 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v55, v79, v47.f64[0]), v58, v47, 1), v84, v49.f64[0]);
  _Q3 = *(float64x2_t *)(a1 + 1072);
  v92 = vmlaq_laneq_f64(v90, v57, v49, 1);
  v93 = (float64x2_t)vzip1q_s64((int64x2_t)_Q3, *(int64x2_t *)(a1 + 1192));
  *(_QWORD *)&_Q3.f64[0] = vdupq_laneq_s64((int64x2_t)_Q3, 1).u64[0];
  _Q3.f64[1] = *(float64_t *)(a1 + 1200);
  v94 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v60, v80, v47.f64[0]), _Q27, v47, 1), v85, v49.f64[0]);
  v95 = *(float64x2_t *)(a1 + 1312);
  v96 = *(float64x2_t *)(a1 + 1552);
  v97 = (float64x2_t)vzip1q_s64((int64x2_t)v95, *(int64x2_t *)(a1 + 1432));
  *(_QWORD *)&v95.f64[0] = vdupq_laneq_s64((int64x2_t)v95, 1).u64[0];
  v95.f64[1] = *(float64_t *)(a1 + 1440);
  _Q22 = *(_OWORD *)(a1 + 1760);
  _Q27.f64[0] = *(float64_t *)(a2 + 72);
  __asm { FMLA            D25, D27, V22.D[1] }
  v99 = (float64x2_t)vzip1q_s64((int64x2_t)v96, *(int64x2_t *)(a1 + 1672));
  *(_QWORD *)&v96.f64[0] = vdupq_laneq_s64((int64x2_t)v96, 1).u64[0];
  v96.f64[1] = *(float64_t *)(a1 + 1680);
  v100 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v64, (float64x2_t)vzip1q_s64(v63, *(int64x2_t *)(a1 + 1400)), v47.f64[0]), v19, v47, 1), v86, v49.f64[0]), _Q29, v49, 1);
  _Q28 = *(_OWORD *)(a1 + 1776);
  _Q29.f64[0] = *(float64_t *)(a2 + 88);
  __asm { FMLA            D25, D29, V28.D[1] }
  v102 = *(float64x2_t *)(a2 + 96);
  v103 = vmlaq_laneq_f64(vmlaq_n_f64(v92, v89, v102.f64[0]), v87, v102, 1);
  v104 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v94, v59, v49, 1), v93, v102.f64[0]), _Q3, v102, 1);
  v89.f64[0] = *(float64_t *)(a1 + 128);
  _Q2 = *(float64x2_t *)(a1 + 1792);
  _Q3.f64[0] = *(float64_t *)(a2 + 104);
  __asm { FMLA            D25, D3, V2.D[1] }
  _Q2.f64[0] = *(float64_t *)(a1 + 368);
  _Q3.f64[0] = *(float64_t *)(a2 + 112);
  v89.f64[1] = *(float64_t *)(a1 + 248);
  v106 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v51, (float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 112), *(int64x2_t *)(a1 + 232)), v102.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 112), *(int64x2_t *)(a1 + 232)), v102, 1), v89, _Q3.f64[0]);
  v89.f64[0] = *(float64_t *)(a1 + 608);
  _Q2.f64[1] = *(float64_t *)(a1 + 488);
  v107 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v52, v141, v102.f64[0]), v54, v102, 1), _Q2, _Q3.f64[0]);
  _Q2.f64[0] = *(float64_t *)(a1 + 848);
  v89.f64[1] = *(float64_t *)(a1 + 728);
  v108 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v53, v88, v102.f64[0]), v56, v102, 1), v89, _Q3.f64[0]);
  v89.f64[0] = *(float64_t *)(a1 + 1088);
  _Q2.f64[1] = *(float64_t *)(a1 + 968);
  v109 = vmlaq_n_f64(v103, _Q2, _Q3.f64[0]);
  _Q2.f64[0] = *(float64_t *)(a1 + 1328);
  v89.f64[1] = *(float64_t *)(a1 + 1208);
  v110 = vmlaq_n_f64(v104, v89, _Q3.f64[0]);
  v89.f64[0] = *(float64_t *)(a1 + 1568);
  _Q2.f64[1] = *(float64_t *)(a1 + 1448);
  v89.f64[1] = *(float64_t *)(a1 + 1688);
  v111 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v71, v81, v47.f64[0]), v67, v47, 1), (float64x2_t)vzip1q_s64(v82, *(int64x2_t *)(a1 + 1656)), v49.f64[0]), v15, v49, 1), v99, v102.f64[0]), v96, v102, 1), v89, _Q3.f64[0]);
  result = _Q25.f64[0] + *(double *)(a1 + 1808) * _Q3.f64[0];
  a3[7].f64[0] = result;
  *a3 = v106;
  a3[1] = v107;
  a3[2] = v108;
  a3[3] = v109;
  a3[4] = v110;
  a3[5] = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v100, v97, v102.f64[0]), v95, v102, 1), _Q2, _Q3.f64[0]);
  a3[6] = v111;
  return result;
}

uint64_t sub_20F4B571C(uint64_t a1)
{
  _BYTE v2[1800];
  uint64_t v3;

  v3 = 0x200000001;
  memcpy(v2, (const void *)(a1 + 16), sizeof(v2));
  HIDWORD(v3) = sub_20E8BEB48() != 0;
  return sub_20E8BEAE8();
}

uint64_t sub_20F4B57B8(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v12[1800];
  uint64_t v13;

  v13 = 0x200000001;
  memcpy(v12, (const void *)(a1 + 16), sizeof(v12));
  HIDWORD(v13) = sub_20E8BEB48() != 0;
  v5 = a2[3];
  v7 = *a2;
  v6 = a2[1];
  *(_OWORD *)(a3 + 32) = a2[2];
  *(_OWORD *)(a3 + 48) = v5;
  *(_OWORD *)a3 = v7;
  *(_OWORD *)(a3 + 16) = v6;
  v9 = a2[5];
  v8 = a2[6];
  v10 = a2[4];
  *(_QWORD *)(a3 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a3 + 80) = v9;
  *(_OWORD *)(a3 + 96) = v8;
  *(_OWORD *)(a3 + 64) = v10;
  return sub_20E8BEAE8();
}

__n128 sub_20F4B5880@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int64x2_t v2;
  int64x2_t v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  __int128 v20;
  int64x2_t v21;
  __int128 v22;
  int64x2_t v23;
  __int128 v24;
  int64x2_t v25;
  __int128 v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  __int128 v37;
  int64x2_t v38;
  __int128 v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  __int128 v44;
  int64x2_t v45;
  __int128 v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  __int128 v53;
  int64x2_t v54;
  int64x2_t v55;
  __int128 v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  __int128 v64;
  int64x2_t v65;
  __int128 v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __n128 result;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int64x2_t v135;
  int64x2_t v136;
  int64x2_t v137;
  int64x2_t v138;
  int64x2_t v139;
  int64x2_t v140;
  int64x2_t v141;
  int64x2_t v142;
  int64x2_t v143;
  int64x2_t v144;
  int64x2_t v145;
  int64x2_t v146;
  int64x2_t v147;
  int64x2_t v148;
  __int128 v149;

  v3 = *(int64x2_t *)(a1 + 16);
  v2 = *(int64x2_t *)(a1 + 32);
  v4 = *(int64x2_t *)(a1 + 152);
  v5 = *(int64x2_t *)(a1 + 136);
  v7 = *(int64x2_t *)(a1 + 272);
  v6 = *(int64x2_t *)(a1 + 288);
  v8 = *(int64x2_t *)(a1 + 256);
  v10 = *(int64x2_t *)(a1 + 512);
  v9 = *(int64x2_t *)(a1 + 528);
  v11 = *(int64x2_t *)(a1 + 496);
  v13 = *(int64x2_t *)(a1 + 736);
  v12 = *(int64x2_t *)(a1 + 752);
  v15 = *(int64x2_t *)(a1 + 976);
  v14 = *(int64x2_t *)(a1 + 992);
  v16 = *(int64x2_t *)(a1 + 1232);
  v17 = *(int64x2_t *)(a1 + 1216);
  v18 = *(int64x2_t *)(a1 + 1472);
  v19 = *(int64x2_t *)(a1 + 1456);
  *(_QWORD *)&v20 = vdupq_laneq_s64(v8, 1).u64[0];
  *((_QWORD *)&v20 + 1) = *(_QWORD *)(a1 + 384);
  v149 = v20;
  v145 = vzip1q_s64(v8, *(int64x2_t *)(a1 + 376));
  v144 = vzip1q_s64(v11, *(int64x2_t *)(a1 + 616));
  v8.i64[0] = vdupq_laneq_s64(v11, 1).u64[0];
  v8.i64[1] = *(_QWORD *)(a1 + 624);
  v148 = v8;
  v8.i64[0] = vdupq_laneq_s64(v13, 1).u64[0];
  v8.i64[1] = *(_QWORD *)(a1 + 864);
  v147 = v8;
  v21 = vzip1q_s64(v3, v5);
  v142 = vzip2q_s64(v3, v5);
  v132 = vzip1q_s64(v15, *(int64x2_t *)(a1 + 1096));
  v3.i64[0] = vdupq_laneq_s64(v15, 1).u64[0];
  v3.i64[1] = *(_QWORD *)(a1 + 1104);
  v140 = vzip1q_s64(v13, *(int64x2_t *)(a1 + 856));
  v141 = v3;
  v128 = vzip1q_s64(v17, *(int64x2_t *)(a1 + 1336));
  v3.i64[0] = vdupq_laneq_s64(v17, 1).u64[0];
  v3.i64[1] = *(_QWORD *)(a1 + 1344);
  v134 = v3;
  v125 = vzip1q_s64(v19, *(int64x2_t *)(a1 + 1576));
  v3.i64[0] = vdupq_laneq_s64(v19, 1).u64[0];
  v3.i64[1] = *(_QWORD *)(a1 + 1584);
  v130 = v3;
  v3.i64[0] = vdupq_laneq_s64(v7, 1).u64[0];
  v138 = v21;
  v139 = vzip1q_s64(v7, *(int64x2_t *)(a1 + 392));
  v3.i64[1] = *(_QWORD *)(a1 + 400);
  v146 = v3;
  v133 = vzip1q_s64(v10, *(int64x2_t *)(a1 + 632));
  v7.i64[0] = vdupq_laneq_s64(v10, 1).u64[0];
  v7.i64[1] = *(_QWORD *)(a1 + 640);
  v143 = v7;
  v7.i64[0] = vdupq_laneq_s64(v12, 1).u64[0];
  v7.i64[1] = *(_QWORD *)(a1 + 880);
  v136 = v7;
  v127 = vzip1q_s64(v12, *(int64x2_t *)(a1 + 872));
  v124 = vzip1q_s64(v14, *(int64x2_t *)(a1 + 1112));
  v7.i64[0] = vdupq_laneq_s64(v14, 1).u64[0];
  v7.i64[1] = *(_QWORD *)(a1 + 1120);
  v83 = v7;
  v19.i64[0] = vdupq_laneq_s64(v16, 1).u64[0];
  v19.i64[1] = *(_QWORD *)(a1 + 1360);
  v120 = vzip1q_s64(v16, *(int64x2_t *)(a1 + 1352));
  v121 = vzip1q_s64(v2, v4);
  v129 = vzip2q_s64(v2, v4);
  v116 = vzip1q_s64(v18, *(int64x2_t *)(a1 + 1592));
  *(_QWORD *)&v22 = vdupq_laneq_s64(v18, 1).u64[0];
  *((_QWORD *)&v22 + 1) = *(_QWORD *)(a1 + 1600);
  v137 = vzip1q_s64(v6, *(int64x2_t *)(a1 + 408));
  v2.i64[0] = vdupq_laneq_s64(v6, 1).u64[0];
  v2.i64[1] = *(_QWORD *)(a1 + 416);
  v135 = v2;
  v123 = vzip1q_s64(v9, *(int64x2_t *)(a1 + 648));
  v6.i64[0] = vdupq_laneq_s64(v9, 1).u64[0];
  v6.i64[1] = *(_QWORD *)(a1 + 656);
  v131 = v6;
  v23 = *(int64x2_t *)(a1 + 768);
  v119 = vzip1q_s64(v23, *(int64x2_t *)(a1 + 888));
  *(_QWORD *)&v24 = vdupq_laneq_s64(v23, 1).u64[0];
  *((_QWORD *)&v24 + 1) = *(_QWORD *)(a1 + 896);
  v25 = *(int64x2_t *)(a1 + 1008);
  *(_QWORD *)&v26 = vdupq_laneq_s64(v25, 1).u64[0];
  *((_QWORD *)&v26 + 1) = *(_QWORD *)(a1 + 1136);
  v113 = vzip1q_s64(v25, *(int64x2_t *)(a1 + 1128));
  v27 = *(int64x2_t *)(a1 + 1248);
  v28 = vzip1q_s64(v27, *(int64x2_t *)(a1 + 1368));
  v15.i64[0] = vdupq_laneq_s64(v27, 1).u64[0];
  v15.i64[1] = *(_QWORD *)(a1 + 1376);
  v29 = *(int64x2_t *)(a1 + 1488);
  v16.i64[0] = vdupq_laneq_s64(v29, 1).u64[0];
  v107 = vzip1q_s64(v29, *(int64x2_t *)(a1 + 1608));
  v16.i64[1] = *(_QWORD *)(a1 + 1616);
  v30 = *(int64x2_t *)(a1 + 48);
  v31 = *(int64x2_t *)(a1 + 168);
  v110 = vzip1q_s64(v30, v31);
  v111 = v28;
  v118 = vzip2q_s64(v30, v31);
  v32 = *(int64x2_t *)(a1 + 304);
  v126 = vzip1q_s64(v32, *(int64x2_t *)(a1 + 424));
  *(_QWORD *)&v20 = vdupq_laneq_s64(v32, 1).u64[0];
  *((_QWORD *)&v20 + 1) = *(_QWORD *)(a1 + 432);
  v33 = *(int64x2_t *)(a1 + 544);
  v17.i64[0] = vdupq_laneq_s64(v33, 1).u64[0];
  v115 = vzip1q_s64(v33, *(int64x2_t *)(a1 + 664));
  v17.i64[1] = *(_QWORD *)(a1 + 672);
  v34 = *(int64x2_t *)(a1 + 64);
  v35 = *(int64x2_t *)(a1 + 184);
  v112 = vzip1q_s64(v34, v35);
  v122 = vzip2q_s64(v34, v35);
  v36 = *(int64x2_t *)(a1 + 784);
  v109 = vzip1q_s64(v36, *(int64x2_t *)(a1 + 904));
  *(_QWORD *)&v37 = vdupq_laneq_s64(v36, 1).u64[0];
  *((_QWORD *)&v37 + 1) = *(_QWORD *)(a1 + 912);
  v38 = *(int64x2_t *)(a1 + 1024);
  *(_QWORD *)&v39 = vdupq_laneq_s64(v38, 1).u64[0];
  v105 = vzip1q_s64(v38, *(int64x2_t *)(a1 + 1144));
  *((_QWORD *)&v39 + 1) = *(_QWORD *)(a1 + 1152);
  v40 = *(int64x2_t *)(a1 + 1264);
  v102 = vzip1q_s64(v40, *(int64x2_t *)(a1 + 1384));
  v11.i64[0] = vdupq_laneq_s64(v40, 1).u64[0];
  v11.i64[1] = *(_QWORD *)(a1 + 1392);
  v41 = *(int64x2_t *)(a1 + 1504);
  v97 = vzip1q_s64(v41, *(int64x2_t *)(a1 + 1624));
  v12.i64[0] = vdupq_laneq_s64(v41, 1).u64[0];
  v12.i64[1] = *(_QWORD *)(a1 + 1632);
  v42 = *(int64x2_t *)(a1 + 320);
  v117 = vzip1q_s64(v42, *(int64x2_t *)(a1 + 440));
  v18.i64[0] = vdupq_laneq_s64(v42, 1).u64[0];
  v18.i64[1] = *(_QWORD *)(a1 + 448);
  v43 = *(int64x2_t *)(a1 + 560);
  *(_QWORD *)&v44 = vdupq_laneq_s64(v43, 1).u64[0];
  *((_QWORD *)&v44 + 1) = *(_QWORD *)(a1 + 688);
  v106 = vzip1q_s64(v43, *(int64x2_t *)(a1 + 680));
  v45 = *(int64x2_t *)(a1 + 800);
  v104 = vzip1q_s64(v45, *(int64x2_t *)(a1 + 920));
  *(_QWORD *)&v46 = vdupq_laneq_s64(v45, 1).u64[0];
  *((_QWORD *)&v46 + 1) = *(_QWORD *)(a1 + 928);
  v47 = *(int64x2_t *)(a1 + 1040);
  v14.i64[0] = vdupq_laneq_s64(v47, 1).u64[0];
  v48 = vzip1q_s64(v47, *(int64x2_t *)(a1 + 1160));
  v14.i64[1] = *(_QWORD *)(a1 + 1168);
  v49 = *(int64x2_t *)(a1 + 80);
  v50 = *(int64x2_t *)(a1 + 200);
  v98 = vzip1q_s64(v49, v50);
  v99 = v48;
  v108 = vzip2q_s64(v49, v50);
  v51 = *(int64x2_t *)(a1 + 1280);
  v94 = vzip1q_s64(v51, *(int64x2_t *)(a1 + 1400));
  v5.i64[0] = vdupq_laneq_s64(v51, 1).u64[0];
  v5.i64[1] = *(_QWORD *)(a1 + 1408);
  v52 = *(int64x2_t *)(a1 + 1520);
  *(_QWORD *)&v53 = vdupq_laneq_s64(v52, 1).u64[0];
  v91 = vzip1q_s64(v52, *(int64x2_t *)(a1 + 1640));
  *((_QWORD *)&v53 + 1) = *(_QWORD *)(a1 + 1648);
  v54 = *(int64x2_t *)(a1 + 336);
  v114 = vzip1q_s64(v54, *(int64x2_t *)(a1 + 456));
  v13.i64[0] = vdupq_laneq_s64(v54, 1).u64[0];
  v13.i64[1] = *(_QWORD *)(a1 + 464);
  v55 = *(int64x2_t *)(a1 + 576);
  v101 = vzip1q_s64(v55, *(int64x2_t *)(a1 + 696));
  *(_QWORD *)&v56 = vdupq_laneq_s64(v55, 1).u64[0];
  *((_QWORD *)&v56 + 1) = *(_QWORD *)(a1 + 704);
  v57 = *(int64x2_t *)(a1 + 816);
  v96 = vzip1q_s64(v57, *(int64x2_t *)(a1 + 936));
  v21.i64[0] = vdupq_laneq_s64(v57, 1).u64[0];
  v21.i64[1] = *(_QWORD *)(a1 + 944);
  v58 = *(int64x2_t *)(a1 + 1056);
  v10.i64[0] = vdupq_laneq_s64(v58, 1).u64[0];
  v10.i64[1] = *(_QWORD *)(a1 + 1184);
  v92 = vzip1q_s64(v58, *(int64x2_t *)(a1 + 1176));
  v59 = *(int64x2_t *)(a1 + 1296);
  v90 = vzip1q_s64(v59, *(int64x2_t *)(a1 + 1416));
  v3.i64[0] = vdupq_laneq_s64(v59, 1).u64[0];
  v3.i64[1] = *(_QWORD *)(a1 + 1424);
  v60 = *(int64x2_t *)(a1 + 1536);
  v9.i64[0] = vdupq_laneq_s64(v60, 1).u64[0];
  v87 = vzip1q_s64(v60, *(int64x2_t *)(a1 + 1656));
  v9.i64[1] = *(_QWORD *)(a1 + 1664);
  v61 = *(int64x2_t *)(a1 + 96);
  v62 = *(int64x2_t *)(a1 + 216);
  v85 = vzip1q_s64(v61, v62);
  v95 = vzip2q_s64(v61, v62);
  v63 = *(int64x2_t *)(a1 + 352);
  v103 = vzip1q_s64(v63, *(int64x2_t *)(a1 + 472));
  *(_QWORD *)&v64 = vdupq_laneq_s64(v63, 1).u64[0];
  *((_QWORD *)&v64 + 1) = *(_QWORD *)(a1 + 480);
  v65 = *(int64x2_t *)(a1 + 592);
  *(_QWORD *)&v66 = vdupq_laneq_s64(v65, 1).u64[0];
  v93 = vzip1q_s64(v65, *(int64x2_t *)(a1 + 712));
  *((_QWORD *)&v66 + 1) = *(_QWORD *)(a1 + 720);
  v67 = *(int64x2_t *)(a1 + 112);
  v68 = *(int64x2_t *)(a1 + 232);
  v69 = vzip1q_s64(v67, v68);
  v100 = vzip2q_s64(v67, v68);
  v70 = *(int64x2_t *)(a1 + 832);
  v88 = v69;
  v89 = vzip1q_s64(v70, *(int64x2_t *)(a1 + 952));
  v7.i64[0] = vdupq_laneq_s64(v70, 1).u64[0];
  v7.i64[1] = *(_QWORD *)(a1 + 960);
  v71 = *(int64x2_t *)(a1 + 1072);
  v69.i64[0] = vdupq_laneq_s64(v71, 1).u64[0];
  v86 = vzip1q_s64(v71, *(int64x2_t *)(a1 + 1192));
  v69.i64[1] = *(_QWORD *)(a1 + 1200);
  v72 = *(int64x2_t *)(a1 + 1312);
  v84 = vzip1q_s64(v72, *(int64x2_t *)(a1 + 1432));
  v4.i64[0] = vdupq_laneq_s64(v72, 1).u64[0];
  v4.i64[1] = *(_QWORD *)(a1 + 1440);
  v73 = *(int64x2_t *)(a1 + 1552);
  v74 = vzip1q_s64(v73, *(int64x2_t *)(a1 + 1672));
  v73.i64[0] = vdupq_laneq_s64(v73, 1).u64[0];
  v73.i64[1] = *(_QWORD *)(a1 + 1680);
  *(int64x2_t *)(a2 + 96) = v125;
  *(int64x2_t *)(a2 + 80) = v128;
  *(int64x2_t *)(a2 + 64) = v132;
  *(int64x2_t *)(a2 + 48) = v140;
  *(int64x2_t *)(a2 + 32) = v144;
  *(int64x2_t *)a2 = v138;
  *(int64x2_t *)(a2 + 16) = v145;
  v75 = *(_OWORD *)(a1 + 1696);
  *(_QWORD *)(a2 + 112) = v75;
  *(_QWORD *)(a2 + 232) = *((_QWORD *)&v75 + 1);
  *(int64x2_t *)(a2 + 120) = v142;
  *(int64x2_t *)(a2 + 216) = v130;
  *(int64x2_t *)(a2 + 200) = v134;
  *(int64x2_t *)(a2 + 184) = v141;
  *(int64x2_t *)(a2 + 168) = v147;
  *(int64x2_t *)(a2 + 152) = v148;
  *(_OWORD *)(a2 + 136) = v149;
  *(int64x2_t *)(a2 + 336) = v116;
  *(int64x2_t *)(a2 + 320) = v120;
  *(int64x2_t *)(a2 + 304) = v124;
  *(int64x2_t *)(a2 + 288) = v127;
  *(int64x2_t *)(a2 + 272) = v133;
  *(int64x2_t *)(a2 + 240) = v121;
  *(int64x2_t *)(a2 + 256) = v139;
  v76 = *(_OWORD *)(a1 + 1712);
  *(_QWORD *)(a2 + 352) = v76;
  *(_QWORD *)(a2 + 472) = *((_QWORD *)&v76 + 1);
  *(int64x2_t *)(a2 + 440) = v19;
  *(_OWORD *)(a2 + 456) = v22;
  *(int64x2_t *)(a2 + 424) = v83;
  *(int64x2_t *)(a2 + 408) = v136;
  *(int64x2_t *)(a2 + 392) = v143;
  *(int64x2_t *)(a2 + 360) = v129;
  *(int64x2_t *)(a2 + 376) = v146;
  *(int64x2_t *)(a2 + 576) = v107;
  *(int64x2_t *)(a2 + 560) = v111;
  *(int64x2_t *)(a2 + 544) = v113;
  *(int64x2_t *)(a2 + 528) = v119;
  *(int64x2_t *)(a2 + 512) = v123;
  *(int64x2_t *)(a2 + 480) = v110;
  *(int64x2_t *)(a2 + 496) = v137;
  v77 = *(_OWORD *)(a1 + 1728);
  *(_QWORD *)(a2 + 592) = v77;
  *(_QWORD *)(a2 + 712) = *((_QWORD *)&v77 + 1);
  *(int64x2_t *)(a2 + 680) = v15;
  *(int64x2_t *)(a2 + 696) = v16;
  *(_OWORD *)(a2 + 648) = v24;
  *(_OWORD *)(a2 + 664) = v26;
  *(int64x2_t *)(a2 + 632) = v131;
  *(int64x2_t *)(a2 + 600) = v118;
  *(int64x2_t *)(a2 + 616) = v135;
  *(int64x2_t *)(a2 + 816) = v97;
  *(int64x2_t *)(a2 + 800) = v102;
  *(int64x2_t *)(a2 + 784) = v105;
  *(int64x2_t *)(a2 + 768) = v109;
  *(int64x2_t *)(a2 + 752) = v115;
  *(int64x2_t *)(a2 + 720) = v112;
  *(int64x2_t *)(a2 + 736) = v126;
  v78 = *(_OWORD *)(a1 + 1744);
  *(_QWORD *)(a2 + 832) = v78;
  *(_QWORD *)(a2 + 952) = *((_QWORD *)&v78 + 1);
  *(int64x2_t *)(a2 + 920) = v11;
  *(int64x2_t *)(a2 + 936) = v12;
  *(_OWORD *)(a2 + 888) = v37;
  *(_OWORD *)(a2 + 904) = v39;
  *(_OWORD *)(a2 + 856) = v20;
  *(int64x2_t *)(a2 + 872) = v17;
  *(int64x2_t *)(a2 + 840) = v122;
  *(int64x2_t *)(a2 + 1056) = v91;
  *(int64x2_t *)(a2 + 1040) = v94;
  *(int64x2_t *)(a2 + 1024) = v99;
  *(int64x2_t *)(a2 + 1008) = v104;
  *(int64x2_t *)(a2 + 992) = v106;
  *(int64x2_t *)(a2 + 960) = v98;
  *(int64x2_t *)(a2 + 976) = v117;
  v79 = *(_OWORD *)(a1 + 1760);
  *(_QWORD *)(a2 + 1072) = v79;
  *(_QWORD *)(a2 + 1192) = *((_QWORD *)&v79 + 1);
  *(int64x2_t *)(a2 + 1160) = v5;
  *(_OWORD *)(a2 + 1176) = v53;
  *(_OWORD *)(a2 + 1128) = v46;
  *(int64x2_t *)(a2 + 1144) = v14;
  *(int64x2_t *)(a2 + 1096) = v18;
  *(_OWORD *)(a2 + 1112) = v44;
  *(int64x2_t *)(a2 + 1080) = v108;
  *(int64x2_t *)(a2 + 1200) = v85;
  *(int64x2_t *)(a2 + 1296) = v87;
  *(int64x2_t *)(a2 + 1280) = v90;
  *(int64x2_t *)(a2 + 1264) = v92;
  *(int64x2_t *)(a2 + 1248) = v96;
  *(int64x2_t *)(a2 + 1232) = v101;
  v80 = *(_OWORD *)(a1 + 1776);
  *(_QWORD *)(a2 + 1312) = v80;
  *(_QWORD *)(a2 + 1432) = *((_QWORD *)&v80 + 1);
  *(int64x2_t *)(a2 + 1216) = v114;
  *(int64x2_t *)(a2 + 1400) = v3;
  *(int64x2_t *)(a2 + 1416) = v9;
  *(int64x2_t *)(a2 + 1368) = v21;
  *(int64x2_t *)(a2 + 1384) = v10;
  *(int64x2_t *)(a2 + 1336) = v13;
  *(_OWORD *)(a2 + 1352) = v56;
  *(int64x2_t *)(a2 + 1320) = v95;
  *(int64x2_t *)(a2 + 1440) = v88;
  *(int64x2_t *)(a2 + 1536) = v74;
  *(int64x2_t *)(a2 + 1520) = v84;
  *(int64x2_t *)(a2 + 1504) = v86;
  *(int64x2_t *)(a2 + 1488) = v89;
  *(int64x2_t *)(a2 + 1472) = v93;
  *(int64x2_t *)(a2 + 1456) = v103;
  v81 = *(_OWORD *)(a1 + 1792);
  *(_QWORD *)(a2 + 1552) = v81;
  *(_QWORD *)(a2 + 1672) = *((_QWORD *)&v81 + 1);
  *(int64x2_t *)(a2 + 1640) = v4;
  *(int64x2_t *)(a2 + 1656) = v73;
  *(int64x2_t *)(a2 + 1608) = v7;
  *(int64x2_t *)(a2 + 1624) = v69;
  *(_OWORD *)(a2 + 1576) = v64;
  *(_OWORD *)(a2 + 1592) = v66;
  *(int64x2_t *)(a2 + 1560) = v100;
  v73.i64[0] = *(_QWORD *)(a1 + 608);
  *(_QWORD *)(a2 + 1792) = *(_QWORD *)(a1 + 1808);
  *(_QWORD *)&v81 = *(_QWORD *)(a1 + 1568);
  *((_QWORD *)&v81 + 1) = *(_QWORD *)(a1 + 1688);
  *(_OWORD *)(a2 + 1776) = v81;
  *(_QWORD *)&v81 = *(_QWORD *)(a1 + 1328);
  *((_QWORD *)&v81 + 1) = *(_QWORD *)(a1 + 1448);
  *(_OWORD *)(a2 + 1760) = v81;
  *(_QWORD *)&v81 = *(_QWORD *)(a1 + 1088);
  *((_QWORD *)&v81 + 1) = *(_QWORD *)(a1 + 1208);
  *(_OWORD *)(a2 + 1744) = v81;
  *(_QWORD *)&v81 = *(_QWORD *)(a1 + 848);
  v73.i64[1] = *(_QWORD *)(a1 + 728);
  *((_QWORD *)&v81 + 1) = *(_QWORD *)(a1 + 968);
  *(_OWORD *)(a2 + 1728) = v81;
  *(int64x2_t *)(a2 + 1712) = v73;
  v73.i64[0] = *(_QWORD *)(a1 + 368);
  v73.i64[1] = *(_QWORD *)(a1 + 488);
  *(int64x2_t *)(a2 + 1696) = v73;
  result.n128_u64[0] = *(_QWORD *)(a1 + 128);
  result.n128_u64[1] = *(_QWORD *)(a1 + 248);
  *(__n128 *)(a2 + 1680) = result;
  return result;
}

double sub_20F4B60AC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float64x2_t a3@<Q0>)
{
  int64x2_t v3;
  float64x2_t v4;
  int64x2_t v5;
  float64x2_t v6;
  int64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  float64x2_t v31;
  int64x2_t v32;
  float64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  float64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  float64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  float64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  float64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  float64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  float64x2_t v57;
  int64x2_t v58;
  float64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  float64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  float64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  float64x2_t v72;
  int64x2_t v73;
  float64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  double result;
  uint64_t v109;
  uint64_t v110;
  float64x2_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  float64x2_t v115;
  float64x2_t v116;
  uint64_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;

  v4 = *(float64x2_t *)(a1 + 16);
  v3 = *(int64x2_t *)(a1 + 32);
  v5 = *(int64x2_t *)(a1 + 152);
  v6 = *(float64x2_t *)(a1 + 136);
  v8 = *(float64x2_t *)(a1 + 272);
  v7 = *(int64x2_t *)(a1 + 288);
  v9 = *(float64x2_t *)(a1 + 256);
  v11 = *(float64x2_t *)(a1 + 496);
  v10 = *(float64x2_t *)(a1 + 512);
  v13 = *(float64x2_t *)(a1 + 736);
  v12 = *(float64x2_t *)(a1 + 752);
  v15 = *(float64x2_t *)(a1 + 976);
  v14 = *(float64x2_t *)(a1 + 992);
  v16 = *(float64x2_t *)(a1 + 1232);
  v17 = *(float64x2_t *)(a1 + 1216);
  v18 = *(float64x2_t *)(a1 + 1472);
  v19 = *(float64x2_t *)(a1 + 1456);
  v20 = (float64x2_t)vzip1q_s64((int64x2_t)v9, *(int64x2_t *)(a1 + 376));
  *(_QWORD *)&v9.f64[0] = vdupq_laneq_s64((int64x2_t)v9, 1).u64[0];
  v9.f64[1] = *(float64_t *)(a1 + 384);
  v270 = v9;
  *(_QWORD *)&v9.f64[0] = vdupq_laneq_s64((int64x2_t)v11, 1).u64[0];
  v9.f64[1] = *(float64_t *)(a1 + 624);
  v268 = v9;
  v254 = (float64x2_t)vzip1q_s64((int64x2_t)v11, *(int64x2_t *)(a1 + 616));
  v258 = (float64x2_t)vzip1q_s64((int64x2_t)v13, *(int64x2_t *)(a1 + 856));
  *(_QWORD *)&v9.f64[0] = vdupq_laneq_s64((int64x2_t)v13, 1).u64[0];
  v9.f64[1] = *(float64_t *)(a1 + 864);
  v264 = v9;
  v246 = (float64x2_t)vzip1q_s64((int64x2_t)v15, *(int64x2_t *)(a1 + 1096));
  *(_QWORD *)&v9.f64[0] = vdupq_laneq_s64((int64x2_t)v15, 1).u64[0];
  v9.f64[1] = *(float64_t *)(a1 + 1104);
  v262 = v9;
  v248 = (float64x2_t)vzip1q_s64((int64x2_t)v4, (int64x2_t)v6);
  v266 = (float64x2_t)vzip2q_s64((int64x2_t)v4, (int64x2_t)v6);
  v242 = (float64x2_t)vzip1q_s64((int64x2_t)v17, *(int64x2_t *)(a1 + 1336));
  *(_QWORD *)&v4.f64[0] = vdupq_laneq_s64((int64x2_t)v17, 1).u64[0];
  v4.f64[1] = *(float64_t *)(a1 + 1344);
  v256 = v4;
  v238 = (float64x2_t)vzip1q_s64((int64x2_t)v19, *(int64x2_t *)(a1 + 1576));
  *(_QWORD *)&v4.f64[0] = vdupq_laneq_s64((int64x2_t)v19, 1).u64[0];
  v4.f64[1] = *(float64_t *)(a1 + 1584);
  v250 = v4;
  v260 = (float64x2_t)vzip1q_s64((int64x2_t)v8, *(int64x2_t *)(a1 + 392));
  *(_QWORD *)&v4.f64[0] = vdupq_laneq_s64((int64x2_t)v8, 1).u64[0];
  v4.f64[1] = *(float64_t *)(a1 + 400);
  v252 = v4;
  *(_QWORD *)&v4.f64[0] = vdupq_laneq_s64((int64x2_t)v10, 1).u64[0];
  v232 = (float64x2_t)vzip1q_s64((int64x2_t)v10, *(int64x2_t *)(a1 + 632));
  v4.f64[1] = *(float64_t *)(a1 + 640);
  v244 = v4;
  v228 = (float64x2_t)vzip1q_s64((int64x2_t)v12, *(int64x2_t *)(a1 + 872));
  *(_QWORD *)&v4.f64[0] = vdupq_laneq_s64((int64x2_t)v12, 1).u64[0];
  v4.f64[1] = *(float64_t *)(a1 + 880);
  v240 = v4;
  *(_QWORD *)&v4.f64[0] = vdupq_laneq_s64((int64x2_t)v14, 1).u64[0];
  v4.f64[1] = *(float64_t *)(a1 + 1120);
  v236 = v4;
  v216 = (float64x2_t)vzip1q_s64((int64x2_t)v14, *(int64x2_t *)(a1 + 1112));
  v218 = (float64x2_t)vzip1q_s64((int64x2_t)v16, *(int64x2_t *)(a1 + 1352));
  *(_QWORD *)&v4.f64[0] = vdupq_laneq_s64((int64x2_t)v16, 1).u64[0];
  v4.f64[1] = *(float64_t *)(a1 + 1360);
  v234 = v4;
  v210 = (float64x2_t)vzip1q_s64((int64x2_t)v18, *(int64x2_t *)(a1 + 1592));
  *(_QWORD *)&v4.f64[0] = vdupq_laneq_s64((int64x2_t)v18, 1).u64[0];
  v4.f64[1] = *(float64_t *)(a1 + 1600);
  v224 = v4;
  v208 = (float64x2_t)vzip1q_s64(v3, v5);
  v226 = (float64x2_t)vzip2q_s64(v3, v5);
  v230 = (float64x2_t)vzip1q_s64(v7, *(int64x2_t *)(a1 + 408));
  v3.i64[0] = vdupq_laneq_s64(v7, 1).u64[0];
  v3.i64[1] = *(_QWORD *)(a1 + 416);
  v222 = (float64x2_t)v3;
  v21 = *(int64x2_t *)(a1 + 528);
  v5.i64[0] = vdupq_laneq_s64(v21, 1).u64[0];
  v5.i64[1] = *(_QWORD *)(a1 + 656);
  v220 = (float64x2_t)v5;
  v204 = (float64x2_t)vzip1q_s64(v21, *(int64x2_t *)(a1 + 648));
  v22 = *(int64x2_t *)(a1 + 768);
  v202 = (float64x2_t)vzip1q_s64(v22, *(int64x2_t *)(a1 + 888));
  v22.i64[0] = vdupq_laneq_s64(v22, 1).u64[0];
  v22.i64[1] = *(_QWORD *)(a1 + 896);
  v212 = (float64x2_t)v22;
  v23 = *(int64x2_t *)(a1 + 1008);
  v5.i64[0] = vdupq_laneq_s64(v23, 1).u64[0];
  v194 = (float64x2_t)vzip1q_s64(v23, *(int64x2_t *)(a1 + 1128));
  v5.i64[1] = *(_QWORD *)(a1 + 1136);
  v206 = (float64x2_t)v5;
  v24 = *(int64x2_t *)(a1 + 48);
  v25 = *(int64x2_t *)(a1 + 168);
  v196 = (float64x2_t)vzip1q_s64(v24, v25);
  v214 = (float64x2_t)vzip2q_s64(v24, v25);
  v26 = *(int64x2_t *)(a1 + 1248);
  v188 = (float64x2_t)vzip1q_s64(v26, *(int64x2_t *)(a1 + 1368));
  v26.i64[0] = vdupq_laneq_s64(v26, 1).u64[0];
  v26.i64[1] = *(_QWORD *)(a1 + 1376);
  v192 = (float64x2_t)v26;
  v27 = *(int64x2_t *)(a1 + 1488);
  v5.i64[0] = vdupq_laneq_s64(v27, 1).u64[0];
  v184 = (float64x2_t)vzip1q_s64(v27, *(int64x2_t *)(a1 + 1608));
  v5.i64[1] = *(_QWORD *)(a1 + 1616);
  v190 = (float64x2_t)v5;
  v28 = *(int64x2_t *)(a1 + 304);
  v198 = (float64x2_t)vzip1q_s64(v28, *(int64x2_t *)(a1 + 424));
  v28.i64[0] = vdupq_laneq_s64(v28, 1).u64[0];
  v28.i64[1] = *(_QWORD *)(a1 + 432);
  v200 = (float64x2_t)v28;
  v29 = *(int64x2_t *)(a1 + 544);
  v186 = (float64x2_t)vzip1q_s64(v29, *(int64x2_t *)(a1 + 664));
  v29.i64[0] = vdupq_laneq_s64(v29, 1).u64[0];
  v29.i64[1] = *(_QWORD *)(a1 + 672);
  v111 = (float64x2_t)v29;
  v30 = *(int64x2_t *)(a1 + 784);
  v181 = (float64x2_t)vzip1q_s64(v30, *(int64x2_t *)(a1 + 904));
  *(_QWORD *)&v31.f64[0] = vdupq_laneq_s64(v30, 1).u64[0];
  v31.f64[1] = *(float64_t *)(a1 + 912);
  v32 = *(int64x2_t *)(a1 + 1024);
  *(_QWORD *)&v33.f64[0] = vdupq_laneq_s64(v32, 1).u64[0];
  v33.f64[1] = *(float64_t *)(a1 + 1152);
  v177 = (float64x2_t)vzip1q_s64(v32, *(int64x2_t *)(a1 + 1144));
  v34 = *(int64x2_t *)(a1 + 1264);
  v176 = (float64x2_t)vzip1q_s64(v34, *(int64x2_t *)(a1 + 1384));
  *(_QWORD *)&v19.f64[0] = vdupq_laneq_s64(v34, 1).u64[0];
  v19.f64[1] = *(float64_t *)(a1 + 1392);
  v35 = *(int64x2_t *)(a1 + 1504);
  *(_QWORD *)&v36.f64[0] = vdupq_laneq_s64(v35, 1).u64[0];
  v175 = (float64x2_t)vzip1q_s64(v35, *(int64x2_t *)(a1 + 1624));
  v36.f64[1] = *(float64_t *)(a1 + 1632);
  v37 = *(int64x2_t *)(a1 + 64);
  v38 = *(int64x2_t *)(a1 + 184);
  v39 = vzip1q_s64(v37, v38);
  v180 = (float64x2_t)vzip2q_s64(v37, v38);
  v40 = *(int64x2_t *)(a1 + 320);
  v179 = (float64x2_t)vzip1q_s64(v40, *(int64x2_t *)(a1 + 440));
  *(_QWORD *)&v17.f64[0] = vdupq_laneq_s64(v40, 1).u64[0];
  v17.f64[1] = *(float64_t *)(a1 + 448);
  v41 = *(int64x2_t *)(a1 + 560);
  *(_QWORD *)&v42.f64[0] = vdupq_laneq_s64(v41, 1).u64[0];
  v172 = (float64x2_t)vzip1q_s64(v41, *(int64x2_t *)(a1 + 680));
  v173 = (float64x2_t)v39;
  v42.f64[1] = *(float64_t *)(a1 + 688);
  v43 = *(int64x2_t *)(a1 + 80);
  v44 = *(int64x2_t *)(a1 + 200);
  v174 = (float64x2_t)vzip1q_s64(v43, v44);
  v183 = (float64x2_t)vzip2q_s64(v43, v44);
  v45 = *(int64x2_t *)(a1 + 800);
  v46 = (float64x2_t)vzip1q_s64(v45, *(int64x2_t *)(a1 + 920));
  *(_QWORD *)&v18.f64[0] = vdupq_laneq_s64(v45, 1).u64[0];
  v18.f64[1] = *(float64_t *)(a1 + 928);
  v47 = *(int64x2_t *)(a1 + 1040);
  *(_QWORD *)&v15.f64[0] = vdupq_laneq_s64(v47, 1).u64[0];
  v169 = (float64x2_t)vzip1q_s64(v47, *(int64x2_t *)(a1 + 1160));
  v170 = v46;
  v15.f64[1] = *(float64_t *)(a1 + 1168);
  v48 = *(int64x2_t *)(a1 + 1280);
  v49 = vzip1q_s64(v48, *(int64x2_t *)(a1 + 1400));
  *(_QWORD *)&v50.f64[0] = vdupq_laneq_s64(v48, 1).u64[0];
  v50.f64[1] = *(float64_t *)(a1 + 1408);
  v51 = *(int64x2_t *)(a1 + 1520);
  v166 = (float64x2_t)vzip1q_s64(v51, *(int64x2_t *)(a1 + 1640));
  v167 = (float64x2_t)v49;
  *(_QWORD *)&v13.f64[0] = vdupq_laneq_s64(v51, 1).u64[0];
  v13.f64[1] = *(float64_t *)(a1 + 1648);
  v52 = *(int64x2_t *)(a1 + 336);
  v171 = (float64x2_t)vzip1q_s64(v52, *(int64x2_t *)(a1 + 456));
  *(_QWORD *)&v53.f64[0] = vdupq_laneq_s64(v52, 1).u64[0];
  v53.f64[1] = *(float64_t *)(a1 + 464);
  v54 = *(int64x2_t *)(a1 + 576);
  *(_QWORD *)&v16.f64[0] = vdupq_laneq_s64(v54, 1).u64[0];
  v16.f64[1] = *(float64_t *)(a1 + 704);
  v55 = vzip1q_s64(v54, *(int64x2_t *)(a1 + 696));
  v56 = *(int64x2_t *)(a1 + 816);
  v164 = (float64x2_t)vzip1q_s64(v56, *(int64x2_t *)(a1 + 936));
  v165 = (float64x2_t)v55;
  *(_QWORD *)&v57.f64[0] = vdupq_laneq_s64(v56, 1).u64[0];
  v57.f64[1] = *(float64_t *)(a1 + 944);
  v58 = *(int64x2_t *)(a1 + 1056);
  *(_QWORD *)&v59.f64[0] = vdupq_laneq_s64(v58, 1).u64[0];
  v60 = vzip1q_s64(v58, *(int64x2_t *)(a1 + 1176));
  v59.f64[1] = *(float64_t *)(a1 + 1184);
  v61 = *(int64x2_t *)(a1 + 96);
  v62 = *(int64x2_t *)(a1 + 216);
  v161 = (float64x2_t)v60;
  v162 = (float64x2_t)vzip1q_s64(v61, v62);
  v168 = (float64x2_t)vzip2q_s64(v61, v62);
  v63 = *(int64x2_t *)(a1 + 1296);
  v64 = vzip1q_s64(v63, *(int64x2_t *)(a1 + 1416));
  *(_QWORD *)&v11.f64[0] = vdupq_laneq_s64(v63, 1).u64[0];
  v11.f64[1] = *(float64_t *)(a1 + 1424);
  v65 = *(int64x2_t *)(a1 + 1536);
  *(_QWORD *)&v66.f64[0] = vdupq_laneq_s64(v65, 1).u64[0];
  v66.f64[1] = *(float64_t *)(a1 + 1664);
  v67 = *(int64x2_t *)(a1 + 352);
  v163 = (float64x2_t)vzip1q_s64(v67, *(int64x2_t *)(a1 + 472));
  *(_QWORD *)&v14.f64[0] = vdupq_laneq_s64(v67, 1).u64[0];
  v14.f64[1] = *(float64_t *)(a1 + 480);
  v68 = *(int64x2_t *)(a1 + 592);
  v159 = (float64x2_t)vzip1q_s64(v68, *(int64x2_t *)(a1 + 712));
  v160 = (float64x2_t)v64;
  *(_QWORD *)&v69.f64[0] = vdupq_laneq_s64(v68, 1).u64[0];
  v69.f64[1] = *(float64_t *)(a1 + 720);
  v70 = *(int64x2_t *)(a1 + 832);
  v157 = (float64x2_t)vzip1q_s64(v70, *(int64x2_t *)(a1 + 952));
  v158 = (float64x2_t)vzip1q_s64(v65, *(int64x2_t *)(a1 + 1656));
  *(_QWORD *)&v12.f64[0] = vdupq_laneq_s64(v70, 1).u64[0];
  v12.f64[1] = *(float64_t *)(a1 + 960);
  v71 = *(int64x2_t *)(a1 + 1072);
  *(_QWORD *)&v9.f64[0] = vdupq_laneq_s64(v71, 1).u64[0];
  v9.f64[1] = *(float64_t *)(a1 + 1200);
  v72 = (float64x2_t)vzip1q_s64(v71, *(int64x2_t *)(a1 + 1192));
  v73 = *(int64x2_t *)(a1 + 1312);
  v150 = (float64x2_t)vzip1q_s64(v73, *(int64x2_t *)(a1 + 1432));
  v151 = v72;
  *(_QWORD *)&v74.f64[0] = vdupq_laneq_s64(v73, 1).u64[0];
  v74.f64[1] = *(float64_t *)(a1 + 1440);
  v75 = *(int64x2_t *)(a1 + 1552);
  *(_QWORD *)&v10.f64[0] = vdupq_laneq_s64(v75, 1).u64[0];
  v144 = (float64x2_t)vzip1q_s64(v75, *(int64x2_t *)(a1 + 1672));
  v10.f64[1] = *(float64_t *)(a1 + 1680);
  v76 = *(int64x2_t *)(a1 + 112);
  v77 = *(float64x2_t *)(a1 + 232);
  v138 = (float64x2_t)vzip1q_s64(v76, (int64x2_t)v77);
  v156 = (float64x2_t)vzip2q_s64(v76, (int64x2_t)v77);
  v6.f64[0] = *(float64_t *)(a1 + 128);
  v6.f64[1] = *(float64_t *)(a1 + 248);
  v78.f64[0] = *(float64_t *)(a1 + 368);
  v78.f64[1] = *(float64_t *)(a1 + 488);
  v8.f64[0] = *(float64_t *)(a1 + 608);
  v8.f64[1] = *(float64_t *)(a1 + 728);
  v4.f64[0] = *(float64_t *)(a1 + 848);
  v4.f64[1] = *(float64_t *)(a1 + 968);
  v72.f64[0] = *(float64_t *)(a1 + 1088);
  v72.f64[1] = *(float64_t *)(a1 + 1208);
  v46.f64[0] = *(float64_t *)(a1 + 1328);
  v46.f64[1] = *(float64_t *)(a1 + 1448);
  v77.f64[0] = *(float64_t *)(a1 + 1568);
  v77.f64[1] = *(float64_t *)(a1 + 1688);
  v149 = vmulq_n_f64(v20, a3.f64[0]);
  v142 = vmulq_n_f64(v254, a3.f64[0]);
  v133 = vmulq_n_f64(v258, a3.f64[0]);
  v126 = vmulq_n_f64(v246, a3.f64[0]);
  v120 = vmulq_n_f64(v242, a3.f64[0]);
  v116 = vmulq_n_f64(v238, a3.f64[0]);
  v123 = vmulq_n_f64(v248, a3.f64[0]);
  v153 = vmulq_n_f64(v270, a3.f64[0]);
  v146 = vmulq_n_f64(v268, a3.f64[0]);
  v137 = vmulq_n_f64(v264, a3.f64[0]);
  v129 = vmulq_n_f64(v262, a3.f64[0]);
  v122 = vmulq_n_f64(v256, a3.f64[0]);
  v118 = vmulq_n_f64(v250, a3.f64[0]);
  v115 = vmulq_n_f64(v266, a3.f64[0]);
  v79 = *(float64x2_t *)(a1 + 1696);
  v109 = *(_OWORD *)&vmulq_f64(a3, v79);
  v113 = *(_OWORD *)&vmulq_laneq_f64(a3, v79, 1);
  v155 = vmulq_n_f64(v260, a3.f64[0]);
  v148 = vmulq_n_f64(v232, a3.f64[0]);
  v141 = vmulq_n_f64(v228, a3.f64[0]);
  v132 = vmulq_n_f64(v216, a3.f64[0]);
  v125 = vmulq_n_f64(v218, a3.f64[0]);
  v119 = vmulq_n_f64(v210, a3.f64[0]);
  v130 = vmulq_n_f64(v208, a3.f64[0]);
  v209 = vmulq_n_f64(v252, a3.f64[0]);
  v152 = vmulq_n_f64(v244, a3.f64[0]);
  v145 = vmulq_n_f64(v240, a3.f64[0]);
  v136 = vmulq_n_f64(v236, a3.f64[0]);
  v128 = vmulq_n_f64(v234, a3.f64[0]);
  v121 = vmulq_n_f64(v224, a3.f64[0]);
  v134 = vmulq_n_f64(v226, a3.f64[0]);
  v80 = *(float64x2_t *)(a1 + 1712);
  v110 = *(_OWORD *)&vmulq_f64(a3, v80);
  v114 = *(_OWORD *)&vmulq_laneq_f64(a3, v80, 1);
  v217 = vmulq_n_f64(v230, a3.f64[0]);
  v154 = vmulq_n_f64(v204, a3.f64[0]);
  v147 = vmulq_n_f64(v202, a3.f64[0]);
  v140 = vmulq_n_f64(v194, a3.f64[0]);
  v131 = vmulq_n_f64(v188, a3.f64[0]);
  v124 = vmulq_n_f64(v184, a3.f64[0]);
  v139 = vmulq_n_f64(v196, a3.f64[0]);
  v225 = vmulq_n_f64(v222, a3.f64[0]);
  v205 = vmulq_n_f64(v220, a3.f64[0]);
  v195 = vmulq_n_f64(v212, a3.f64[0]);
  v185 = vmulq_n_f64(v206, a3.f64[0]);
  v135 = vmulq_n_f64(v192, a3.f64[0]);
  v127 = vmulq_n_f64(v190, a3.f64[0]);
  v143 = vmulq_n_f64(v214, a3.f64[0]);
  v81 = *(float64x2_t *)(a1 + 1728);
  v112 = *(_OWORD *)&vmulq_f64(a3, v81);
  v117 = *(_OWORD *)&vmulq_laneq_f64(a3, v81, 1);
  v231 = vmulq_n_f64(v198, a3.f64[0]);
  v215 = vmulq_n_f64(v186, a3.f64[0]);
  v199 = vmulq_n_f64(v181, a3.f64[0]);
  v191 = vmulq_n_f64(v177, a3.f64[0]);
  v182 = vmulq_n_f64(v176, a3.f64[0]);
  v178 = vmulq_n_f64(v175, a3.f64[0]);
  v187 = vmulq_n_f64(v173, a3.f64[0]);
  v245 = vmulq_n_f64(v200, a3.f64[0]);
  v229 = vmulq_n_f64(v111, a3.f64[0]);
  v213 = vmulq_n_f64(v31, a3.f64[0]);
  v201 = vmulq_n_f64(v33, a3.f64[0]);
  v189 = vmulq_n_f64(v19, a3.f64[0]);
  v82 = vmulq_n_f64(v36, a3.f64[0]);
  v197 = vmulq_n_f64(v180, a3.f64[0]);
  v83 = *(float64x2_t *)(a1 + 1744);
  *(_QWORD *)&v36.f64[0] = *(_OWORD *)&vmulq_f64(a3, v83);
  *(_QWORD *)&v19.f64[0] = *(_OWORD *)&vmulq_laneq_f64(a3, v83, 1);
  v251 = vmulq_n_f64(v179, a3.f64[0]);
  v237 = vmulq_n_f64(v172, a3.f64[0]);
  v223 = vmulq_n_f64(v170, a3.f64[0]);
  v207 = vmulq_n_f64(v169, a3.f64[0]);
  v193 = vmulq_n_f64(v167, a3.f64[0]);
  v84 = vmulq_n_f64(v166, a3.f64[0]);
  v203 = vmulq_n_f64(v174, a3.f64[0]);
  v263 = vmulq_n_f64(v17, a3.f64[0]);
  v249 = vmulq_n_f64(v42, a3.f64[0]);
  v235 = vmulq_n_f64(v18, a3.f64[0]);
  v221 = vmulq_n_f64(v15, a3.f64[0]);
  v85 = vmulq_n_f64(v50, a3.f64[0]);
  v86 = vmulq_n_f64(v13, a3.f64[0]);
  v219 = vmulq_n_f64(v183, a3.f64[0]);
  v87 = *(float64x2_t *)(a1 + 1760);
  *(_QWORD *)&v13.f64[0] = *(_OWORD *)&vmulq_f64(a3, v87);
  *(_QWORD *)&v20.f64[0] = *(_OWORD *)&vmulq_laneq_f64(a3, v87, 1);
  v267 = vmulq_n_f64(v171, a3.f64[0]);
  v255 = vmulq_n_f64(v165, a3.f64[0]);
  v243 = vmulq_n_f64(v164, a3.f64[0]);
  v227 = vmulq_n_f64(v161, a3.f64[0]);
  v211 = vmulq_n_f64(v160, a3.f64[0]);
  v88 = vmulq_n_f64(v158, a3.f64[0]);
  v89 = vmulq_n_f64(v162, a3.f64[0]);
  v272 = vmulq_n_f64(v53, a3.f64[0]);
  v265 = vmulq_n_f64(v16, a3.f64[0]);
  v253 = vmulq_n_f64(v57, a3.f64[0]);
  v241 = vmulq_n_f64(v59, a3.f64[0]);
  v90 = vmulq_n_f64(v11, a3.f64[0]);
  v91 = vmulq_n_f64(v66, a3.f64[0]);
  v239 = vmulq_n_f64(v168, a3.f64[0]);
  v92 = *(float64x2_t *)(a1 + 1776);
  *(_QWORD *)&v57.f64[0] = *(_OWORD *)&vmulq_f64(a3, v92);
  *(_QWORD *)&v66.f64[0] = *(_OWORD *)&vmulq_laneq_f64(a3, v92, 1);
  v93 = vmulq_n_f64(v163, a3.f64[0]);
  v271 = vmulq_n_f64(v159, a3.f64[0]);
  v261 = vmulq_n_f64(v157, a3.f64[0]);
  v247 = vmulq_n_f64(v151, a3.f64[0]);
  v233 = vmulq_n_f64(v150, a3.f64[0]);
  v94 = vmulq_n_f64(v144, a3.f64[0]);
  v95 = vmulq_n_f64(v138, a3.f64[0]);
  v96 = vmulq_n_f64(v14, a3.f64[0]);
  v97 = vmulq_n_f64(v69, a3.f64[0]);
  v269 = vmulq_n_f64(v12, a3.f64[0]);
  v259 = vmulq_n_f64(v9, a3.f64[0]);
  v98 = vmulq_n_f64(v74, a3.f64[0]);
  v99 = vmulq_n_f64(v10, a3.f64[0]);
  v257 = vmulq_n_f64(v156, a3.f64[0]);
  v100 = *(float64x2_t *)(a1 + 1792);
  *(_QWORD *)&v9.f64[0] = *(_OWORD *)&vmulq_f64(a3, v100);
  *(_QWORD *)&v10.f64[0] = *(_OWORD *)&vmulq_laneq_f64(a3, v100, 1);
  v101 = vmulq_n_f64(v6, a3.f64[0]);
  v102 = vmulq_n_f64(v78, a3.f64[0]);
  v103 = vmulq_n_f64(v8, a3.f64[0]);
  v104 = vmulq_n_f64(v4, a3.f64[0]);
  v105 = vmulq_n_f64(v72, a3.f64[0]);
  v106 = vmulq_n_f64(v46, a3.f64[0]);
  v107 = vmulq_n_f64(v77, a3.f64[0]);
  v46.f64[0] = *(float64_t *)(a1 + 1808);
  *(_QWORD *)&result = *(_OWORD *)&vmulq_f64(a3, v46);
  *(_QWORD *)(a2 + 112) = v109;
  *(float64x2_t *)(a2 + 96) = v116;
  *(float64x2_t *)(a2 + 80) = v120;
  *(float64x2_t *)(a2 + 64) = v126;
  *(float64x2_t *)(a2 + 48) = v133;
  *(float64x2_t *)(a2 + 32) = v142;
  *(float64x2_t *)a2 = v123;
  *(float64x2_t *)(a2 + 16) = v149;
  *(_QWORD *)(a2 + 232) = v113;
  *(float64x2_t *)(a2 + 120) = v115;
  *(float64x2_t *)(a2 + 216) = v118;
  *(float64x2_t *)(a2 + 200) = v122;
  *(float64x2_t *)(a2 + 184) = v129;
  *(float64x2_t *)(a2 + 168) = v137;
  *(float64x2_t *)(a2 + 152) = v146;
  *(float64x2_t *)(a2 + 136) = v153;
  *(_QWORD *)(a2 + 352) = v110;
  *(float64x2_t *)(a2 + 336) = v119;
  *(float64x2_t *)(a2 + 320) = v125;
  *(float64x2_t *)(a2 + 304) = v132;
  *(float64x2_t *)(a2 + 288) = v141;
  *(float64x2_t *)(a2 + 272) = v148;
  *(float64x2_t *)(a2 + 240) = v130;
  *(float64x2_t *)(a2 + 256) = v155;
  *(_QWORD *)(a2 + 472) = v114;
  *(float64x2_t *)(a2 + 456) = v121;
  *(float64x2_t *)(a2 + 440) = v128;
  *(float64x2_t *)(a2 + 424) = v136;
  *(float64x2_t *)(a2 + 408) = v145;
  *(float64x2_t *)(a2 + 392) = v152;
  *(float64x2_t *)(a2 + 360) = v134;
  *(float64x2_t *)(a2 + 376) = v209;
  *(_QWORD *)(a2 + 592) = v112;
  *(float64x2_t *)(a2 + 576) = v124;
  *(float64x2_t *)(a2 + 560) = v131;
  *(float64x2_t *)(a2 + 544) = v140;
  *(float64x2_t *)(a2 + 528) = v147;
  *(float64x2_t *)(a2 + 512) = v154;
  *(float64x2_t *)(a2 + 480) = v139;
  *(float64x2_t *)(a2 + 496) = v217;
  *(_QWORD *)(a2 + 712) = v117;
  *(float64x2_t *)(a2 + 696) = v127;
  *(float64x2_t *)(a2 + 680) = v135;
  *(float64x2_t *)(a2 + 664) = v185;
  *(float64x2_t *)(a2 + 648) = v195;
  *(float64x2_t *)(a2 + 632) = v205;
  *(float64x2_t *)(a2 + 600) = v143;
  *(float64x2_t *)(a2 + 616) = v225;
  *(float64_t *)(a2 + 832) = v36.f64[0];
  *(float64x2_t *)(a2 + 816) = v178;
  *(float64x2_t *)(a2 + 800) = v182;
  *(float64x2_t *)(a2 + 784) = v191;
  *(float64x2_t *)(a2 + 768) = v199;
  *(float64x2_t *)(a2 + 752) = v215;
  *(float64x2_t *)(a2 + 720) = v187;
  *(float64x2_t *)(a2 + 736) = v231;
  *(float64_t *)(a2 + 952) = v19.f64[0];
  *(float64x2_t *)(a2 + 920) = v189;
  *(float64x2_t *)(a2 + 936) = v82;
  *(float64x2_t *)(a2 + 904) = v201;
  *(float64x2_t *)(a2 + 888) = v213;
  *(float64x2_t *)(a2 + 872) = v229;
  *(float64x2_t *)(a2 + 840) = v197;
  *(float64x2_t *)(a2 + 856) = v245;
  *(float64_t *)(a2 + 1072) = v13.f64[0];
  *(float64x2_t *)(a2 + 1056) = v84;
  *(float64x2_t *)(a2 + 1040) = v193;
  *(float64x2_t *)(a2 + 1024) = v207;
  *(float64x2_t *)(a2 + 1008) = v223;
  *(float64x2_t *)(a2 + 992) = v237;
  *(float64x2_t *)(a2 + 960) = v203;
  *(float64x2_t *)(a2 + 976) = v251;
  *(float64_t *)(a2 + 1192) = v20.f64[0];
  *(float64x2_t *)(a2 + 1160) = v85;
  *(float64x2_t *)(a2 + 1176) = v86;
  *(float64x2_t *)(a2 + 1144) = v221;
  *(float64x2_t *)(a2 + 1128) = v235;
  *(float64x2_t *)(a2 + 1112) = v249;
  *(float64x2_t *)(a2 + 1080) = v219;
  *(float64x2_t *)(a2 + 1096) = v263;
  *(float64_t *)(a2 + 1312) = v57.f64[0];
  *(float64x2_t *)(a2 + 1200) = v89;
  *(float64x2_t *)(a2 + 1296) = v88;
  *(float64x2_t *)(a2 + 1280) = v211;
  *(float64x2_t *)(a2 + 1264) = v227;
  *(float64x2_t *)(a2 + 1248) = v243;
  *(float64x2_t *)(a2 + 1232) = v255;
  *(float64x2_t *)(a2 + 1216) = v267;
  *(float64_t *)(a2 + 1432) = v66.f64[0];
  *(float64x2_t *)(a2 + 1400) = v90;
  *(float64x2_t *)(a2 + 1416) = v91;
  *(float64x2_t *)(a2 + 1384) = v241;
  *(float64x2_t *)(a2 + 1368) = v253;
  *(float64x2_t *)(a2 + 1352) = v265;
  *(float64x2_t *)(a2 + 1320) = v239;
  *(float64x2_t *)(a2 + 1336) = v272;
  *(float64_t *)(a2 + 1552) = v9.f64[0];
  *(float64x2_t *)(a2 + 1440) = v95;
  *(float64x2_t *)(a2 + 1536) = v94;
  *(float64x2_t *)(a2 + 1520) = v233;
  *(float64x2_t *)(a2 + 1504) = v247;
  *(float64x2_t *)(a2 + 1488) = v261;
  *(float64x2_t *)(a2 + 1472) = v271;
  *(float64x2_t *)(a2 + 1456) = v93;
  *(float64_t *)(a2 + 1672) = v10.f64[0];
  *(float64x2_t *)(a2 + 1640) = v98;
  *(float64x2_t *)(a2 + 1656) = v99;
  *(float64x2_t *)(a2 + 1624) = v259;
  *(float64x2_t *)(a2 + 1592) = v97;
  *(float64x2_t *)(a2 + 1608) = v269;
  *(float64x2_t *)(a2 + 1560) = v257;
  *(float64x2_t *)(a2 + 1576) = v96;
  *(double *)(a2 + 1792) = result;
  *(float64x2_t *)(a2 + 1776) = v107;
  *(float64x2_t *)(a2 + 1760) = v106;
  *(float64x2_t *)(a2 + 1744) = v105;
  *(float64x2_t *)(a2 + 1728) = v104;
  *(float64x2_t *)(a2 + 1712) = v103;
  *(float64x2_t *)(a2 + 1696) = v102;
  *(float64x2_t *)(a2 + 1680) = v101;
  return result;
}

float64_t sub_20F4B6DC0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float64x2_t v2;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  double v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v35;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  double v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  double v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  double v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  double v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  double v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  double v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v236;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v268;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v347;
  float64x2_t v350;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v365;
  float64x2_t v367;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v468;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v479;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v485;
  float64x2_t v487;
  float64x2_t v490;
  float64x2_t v497;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v544;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v549;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v589;
  float64x2_t v590;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v617;
  float64x2_t v619;
  float64x2_t v621;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v666;
  float64x2_t v668;
  float64x2_t v670;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v676;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v682;
  float64_t result;
  float64x2_t v684;
  float64x2_t v685;
  float64_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v690;
  float64x2_t v691;
  float64x2_t v692;
  double v693;
  float64x2_t v694;
  float64x2_t v695;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v713;
  float64x2_t v714;
  float64x2_t v715;
  float64x2_t v716;
  float64x2_t v717;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64x2_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t v748;
  float64x2_t v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  double v799;
  float64x2_t v800;
  double v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v810;
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814;
  double v815;
  float64x2_t v816;
  double v817;
  double v818;
  float64x2_t v819;
  double v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  double v824;
  float64x2_t v825;
  double v826;
  double v827;
  float64x2_t v828;
  float64x2_t v829;
  double v830;
  float64x2_t v831;
  double v832;
  float64x2_t v833;
  double v834;
  float64x2_t v835;
  double v836;
  float64x2_t v837;
  double v838;
  float64x2_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  float64x2_t v851;
  float64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  float64x2_t v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  double v867;
  double v868;
  double v869;
  double v870;
  float64x2_t v871;
  float64x2_t v872;
  float64x2_t v873;
  float64x2_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  float64x2_t v878;
  float64x2_t v879;
  float64x2_t v880;
  float64x2_t v881;
  float64x2_t v882;
  float64x2_t v883;
  float64x2_t v884;
  float64x2_t v885;
  float64x2_t v886;
  float64x2_t v887;
  float64x2_t v888;
  float64x2_t v889;
  float64x2_t v890;
  float64x2_t v891;
  float64x2_t v892;
  float64x2_t v893;
  float64x2_t v894;
  float64x2_t v895;
  float64x2_t v896;
  float64x2_t v897;
  float64x2_t v898;
  float64x2_t v899;
  float64x2_t v900;
  float64x2_t v901;
  float64x2_t v902;
  float64x2_t v903;
  float64x2_t v904;
  float64x2_t v905;
  float64x2_t v906;
  float64x2_t v907;
  float64x2_t v908;
  float64x2_t v909;
  float64x2_t v910;
  float64x2_t v911;
  float64x2_t v912;
  float64x2_t v913;
  float64x2_t v914;
  float64x2_t v915;
  float64x2_t v916;
  float64x2_t v917;
  float64x2_t v918;
  float64x2_t v919;
  float64x2_t v920;
  float64x2_t v921;
  float64x2_t v922;
  float64x2_t v923;
  float64x2_t v924;
  float64x2_t v925;
  float64x2_t v926;
  float64x2_t v927;
  float64x2_t v928;
  float64x2_t v929;
  float64x2_t v930;
  float64x2_t v931;
  float64x2_t v932;
  float64x2_t v933;
  float64x2_t v934;
  float64x2_t v935;
  float64x2_t v936;
  float64x2_t v937;
  float64x2_t v938;
  float64x2_t v939;
  float64x2_t v940;
  float64x2_t v941;
  float64x2_t v942;
  float64x2_t v943;
  float64x2_t v944;
  float64x2_t v945;
  float64x2_t v946;
  float64x2_t v947;
  float64x2_t v948;
  float64x2_t v949;
  float64x2_t v950;
  float64x2_t v951;
  float64x2_t v952;
  float64x2_t v953;
  float64x2_t v954;
  float64x2_t v955;
  float64x2_t v956;
  float64x2_t v957;
  float64x2_t v958;
  float64x2_t v959;
  float64x2_t v960;
  float64x2_t v961;
  float64x2_t v962;
  float64x2_t v963;
  float64x2_t v964;
  float64x2_t v965;
  float64x2_t v966;
  float64x2_t v967;
  float64x2_t v968;
  float64x2_t v969;
  float64x2_t v970;
  float64x2_t v971;
  float64x2_t v972;
  float64x2_t v973;
  float64x2_t v974;
  float64x2_t v975;
  float64x2_t v976;
  float64x2_t v977;
  float64x2_t v978;
  float64x2_t v979;
  float64x2_t v980;

  v2 = *(float64x2_t *)(a1 + 16);
  _Q0 = *(float64x2_t *)(a1 + 136);
  v935 = vmlaq_n_f64(vmulq_n_f64(v2, v2.f64[0]), _Q0, _Q0.f64[0]);
  v4 = *(float64x2_t *)(a1 + 32);
  v5 = *(float64x2_t *)(a1 + 152);
  v962 = vmlaq_n_f64(vmulq_n_f64(v4, v2.f64[0]), v5, _Q0.f64[0]);
  v6 = *(float64x2_t *)(a1 + 48);
  v7 = *(float64x2_t *)(a1 + 168);
  v8 = vmlaq_n_f64(vmulq_n_f64(v6, v2.f64[0]), v7, _Q0.f64[0]);
  _Q22 = *(float64x2_t *)(a1 + 64);
  v10 = *(float64x2_t *)(a1 + 184);
  v946 = vmlaq_n_f64(vmulq_n_f64(_Q22, v2.f64[0]), v10, _Q0.f64[0]);
  v11 = *(float64x2_t *)(a1 + 80);
  v972 = vmlaq_n_f64(vmulq_n_f64(v11, v2.f64[0]), *(float64x2_t *)(a1 + 200), _Q0.f64[0]);
  v12 = *(float64x2_t *)(a1 + 200);
  v13 = *(float64x2_t *)(a1 + 96);
  v908 = vmlaq_n_f64(vmulq_n_f64(v13, v2.f64[0]), *(float64x2_t *)(a1 + 216), _Q0.f64[0]);
  v14 = *(float64x2_t *)(a1 + 216);
  v793 = *(float64x2_t *)(a1 + 112);
  v15 = vmlaq_n_f64(vmulq_n_f64(v793, v2.f64[0]), *(float64x2_t *)(a1 + 232), _Q0.f64[0]);
  v928 = v15;
  v794 = *(float64x2_t *)(a1 + 232);
  v15.f64[0] = *(float64_t *)(a1 + 128);
  v814 = v15;
  _D17 = *(double *)(a1 + 248);
  v17 = vmlad_n_f64(v15.f64[0] * v2.f64[0], _D17, _Q0.f64[0]);
  v815 = _D17;
  v18 = vmlaq_laneq_f64(vmulq_laneq_f64(v2, v2, 1), _Q0, _Q0, 1);
  v19 = vmlaq_laneq_f64(vmulq_laneq_f64(v4, v2, 1), v5, _Q0, 1);
  v20 = vmlaq_laneq_f64(vmulq_laneq_f64(v6, v2, 1), v7, _Q0, 1);
  v21 = vmlaq_laneq_f64(vmulq_laneq_f64(_Q22, v2, 1), v10, _Q0, 1);
  v22 = vmlaq_laneq_f64(vmulq_laneq_f64(v11, v2, 1), v12, _Q0, 1);
  v883 = vmlaq_laneq_f64(vmulq_laneq_f64(v13, v2, 1), v14, _Q0, 1);
  v23 = vmlaq_laneq_f64(vmulq_laneq_f64(v793, v2, 1), v794, _Q0, 1);
  __asm { FMLA            D11, D17, V0.D[1] }
  v852 = vmlaq_n_f64(vmulq_n_f64(v2, v4.f64[0]), _Q0, v5.f64[0]);
  v954 = vmlaq_laneq_f64(vmulq_laneq_f64(v2, v4, 1), _Q0, v5, 1);
  v735 = v7;
  v737 = v6;
  v29 = vmlaq_n_f64(vmulq_n_f64(v2, v6.f64[0]), _Q0, v7.f64[0]);
  v848 = vmlaq_laneq_f64(vmulq_laneq_f64(v2, v6, 1), _Q0, v7, 1);
  v771 = v10;
  v772 = _Q22;
  v30 = vmlaq_n_f64(vmulq_n_f64(v2, _Q22.f64[0]), _Q0, v10.f64[0]);
  v31 = vmlaq_laneq_f64(vmulq_laneq_f64(v2, _Q22, 1), _Q0, v10, 1);
  v792 = v11;
  v770 = v12;
  v32 = vmlaq_n_f64(vmulq_n_f64(v2, v11.f64[0]), _Q0, v12.f64[0]);
  v33 = vmlaq_laneq_f64(vmulq_laneq_f64(v2, v11, 1), _Q0, v12, 1);
  v791 = v13;
  v790 = v14;
  v766 = vmlaq_n_f64(vmulq_n_f64(v2, v13.f64[0]), _Q0, v14.f64[0]);
  v811 = vmlaq_laneq_f64(vmulq_laneq_f64(v2, v13, 1), _Q0, v14, 1);
  v871 = vmlaq_n_f64(vmulq_n_f64(v2, v793.f64[0]), _Q0, v794.f64[0]);
  v914 = vmlaq_laneq_f64(vmulq_laneq_f64(v2, v793, 1), _Q0, v794, 1);
  v921 = vmlaq_n_f64(vmulq_n_f64(v2, v15.f64[0]), _Q0, v815);
  _Q0 = *(float64x2_t *)(a1 + 256);
  v35 = vmlaq_n_f64(v935, _Q0, _Q0.f64[0]);
  v762 = *(float64x2_t *)(a1 + 272);
  _Q2 = vmlaq_n_f64(v962, v762, _Q0.f64[0]);
  v37 = *(float64x2_t *)(a1 + 304);
  v733 = *(float64x2_t *)(a1 + 288);
  v38 = vmlaq_n_f64(v8, v733, _Q0.f64[0]);
  v39 = vmlaq_n_f64(v946, v37, _Q0.f64[0]);
  v41 = *(float64x2_t *)(a1 + 320);
  v40 = *(float64x2_t *)(a1 + 336);
  v42 = vmlaq_n_f64(v972, v41, _Q0.f64[0]);
  v43 = vmlaq_n_f64(v908, v40, _Q0.f64[0]);
  v44 = *(float64x2_t *)(a1 + 352);
  v45 = vmlaq_n_f64(v928, v44, _Q0.f64[0]);
  _Q22.f64[0] = *(float64_t *)(a1 + 368);
  v46 = vmlad_n_f64(v17, _Q22.f64[0], _Q0.f64[0]);
  v47 = vmlaq_laneq_f64(v18, _Q0, _Q0, 1);
  v48 = vmlaq_laneq_f64(v19, v762, _Q0, 1);
  v49 = vmlaq_laneq_f64(v20, v733, _Q0, 1);
  v50 = vmlaq_laneq_f64(v21, v37, _Q0, 1);
  v51 = vmlaq_laneq_f64(v22, v41, _Q0, 1);
  v52 = vmlaq_laneq_f64(v883, v40, _Q0, 1);
  v53 = vmlaq_laneq_f64(v23, v44, _Q0, 1);
  __asm { FMLA            D11, D22, V0.D[1] }
  v838 = _Q22.f64[0];
  v55 = vmlaq_n_f64(v852, _Q0, v762.f64[0]);
  v56 = vmlaq_laneq_f64(v954, _Q0, v762, 1);
  v57 = vmlaq_n_f64(v29, _Q0, v733.f64[0]);
  v58 = vmlaq_laneq_f64(v848, _Q0, v733, 1);
  v757 = v37;
  v59 = vmlaq_n_f64(v30, _Q0, v37.f64[0]);
  v60 = vmlaq_laneq_f64(v31, _Q0, v37, 1);
  v789 = v41;
  v61 = vmlaq_n_f64(v32, _Q0, v41.f64[0]);
  v62 = vmlaq_laneq_f64(v33, _Q0, v41, 1);
  v806 = v40;
  v63 = vmlaq_n_f64(v766, _Q0, v40.f64[0]);
  v812 = vmlaq_laneq_f64(v811, _Q0, v40, 1);
  v839 = v44;
  v64 = vmlaq_n_f64(v871, _Q0, v44.f64[0]);
  v915 = vmlaq_laneq_f64(v914, _Q0, v44, 1);
  v922 = vmlaq_n_f64(v921, _Q0, _Q22.f64[0]);
  _Q0 = *(float64x2_t *)(a1 + 376);
  v936 = vmlaq_n_f64(v35, _Q0, _Q0.f64[0]);
  v66 = *(float64x2_t *)(a1 + 392);
  v963 = vmlaq_n_f64(_Q2, v66, _Q0.f64[0]);
  v67 = *(float64x2_t *)(a1 + 408);
  v68 = vmlaq_n_f64(v38, v67, _Q0.f64[0]);
  v69 = *(float64x2_t *)(a1 + 424);
  v947 = vmlaq_n_f64(v39, v69, _Q0.f64[0]);
  v70 = *(float64x2_t *)(a1 + 440);
  v973 = vmlaq_n_f64(v42, v70, _Q0.f64[0]);
  v71 = *(float64x2_t *)(a1 + 456);
  v909 = vmlaq_n_f64(v43, v71, _Q0.f64[0]);
  v72 = *(float64x2_t *)(a1 + 472);
  v73 = vmlaq_n_f64(v45, v72, _Q0.f64[0]);
  _Q2.f64[0] = *(float64_t *)(a1 + 488);
  v74 = vmlad_n_f64(v46, _Q2.f64[0], _Q0.f64[0]);
  v902 = vmlaq_laneq_f64(v47, _Q0, _Q0, 1);
  v75 = vmlaq_laneq_f64(v48, v66, _Q0, 1);
  v76 = vmlaq_laneq_f64(v49, v67, _Q0, 1);
  v77 = vmlaq_laneq_f64(v50, v69, _Q0, 1);
  v78 = vmlaq_laneq_f64(v51, v70, _Q0, 1);
  v79 = vmlaq_laneq_f64(v52, v71, _Q0, 1);
  v80 = vmlaq_laneq_f64(v53, v72, _Q0, 1);
  __asm { FMLA            D11, D2, V0.D[1] }
  v836 = _Q2.f64[0];
  v82 = vmlaq_n_f64(v55, _Q0, v66.f64[0]);
  v955 = vmlaq_laneq_f64(v56, _Q0, v66, 1);
  v731 = v67;
  v83 = vmlaq_n_f64(v57, _Q0, v67.f64[0]);
  v84 = vmlaq_laneq_f64(v58, _Q0, v67, 1);
  v756 = v69;
  v889 = vmlaq_n_f64(v59, _Q0, v69.f64[0]);
  v85 = vmlaq_laneq_f64(v60, _Q0, v69, 1);
  v788 = v70;
  v86 = vmlaq_n_f64(v61, _Q0, v70.f64[0]);
  v87 = vmlaq_laneq_f64(v62, _Q0, v70, 1);
  v805 = v71;
  v88 = vmlaq_n_f64(v63, _Q0, v71.f64[0]);
  v89 = vmlaq_laneq_f64(v812, _Q0, v71, 1);
  v837 = v72;
  v90 = vmlaq_n_f64(v64, _Q0, v72.f64[0]);
  v91 = vmlaq_laneq_f64(v915, _Q0, v72, 1);
  _Q24 = vmlaq_n_f64(v922, _Q0, _Q2.f64[0]);
  _Q0 = *(float64x2_t *)(a1 + 496);
  v937 = vmlaq_n_f64(v936, _Q0, _Q0.f64[0]);
  v705 = *(float64x2_t *)(a1 + 512);
  v964 = vmlaq_n_f64(v963, v705, _Q0.f64[0]);
  v94 = *(float64x2_t *)(a1 + 528);
  v95 = *(float64x2_t *)(a1 + 544);
  v96 = vmlaq_n_f64(v68, v94, _Q0.f64[0]);
  v97 = vmlaq_n_f64(v947, v95, _Q0.f64[0]);
  v99 = *(float64x2_t *)(a1 + 560);
  v98 = *(float64x2_t *)(a1 + 576);
  v974 = vmlaq_n_f64(v973, v99, _Q0.f64[0]);
  v100 = vmlaq_n_f64(v909, v98, _Q0.f64[0]);
  v101 = *(float64x2_t *)(a1 + 592);
  v929 = vmlaq_n_f64(v73, v101, _Q0.f64[0]);
  _Q2.f64[0] = *(float64_t *)(a1 + 608);
  v102 = vmlad_n_f64(v74, _Q2.f64[0], _Q0.f64[0]);
  v103 = vmlaq_laneq_f64(v902, _Q0, _Q0, 1);
  v104 = vmlaq_laneq_f64(v75, v705, _Q0, 1);
  v105 = vmlaq_laneq_f64(v76, v94, _Q0, 1);
  v106 = vmlaq_laneq_f64(v77, v95, _Q0, 1);
  v107 = vmlaq_laneq_f64(v78, v99, _Q0, 1);
  v108 = vmlaq_laneq_f64(v79, v98, _Q0, 1);
  v109 = vmlaq_laneq_f64(v80, v101, _Q0, 1);
  __asm { FMLA            D11, D2, V0.D[1] }
  v834 = _Q2.f64[0];
  v111 = vmlaq_n_f64(v82, _Q0, v705.f64[0]);
  v956 = vmlaq_laneq_f64(v955, _Q0, v705, 1);
  v729 = v94;
  v112 = vmlaq_n_f64(v83, _Q0, v94.f64[0]);
  v113 = vmlaq_laneq_f64(v84, _Q0, v94, 1);
  v755 = v95;
  v114 = vmlaq_n_f64(v889, _Q0, v95.f64[0]);
  v115 = vmlaq_laneq_f64(v85, _Q0, v95, 1);
  v787 = v99;
  v116 = vmlaq_n_f64(v86, _Q0, v99.f64[0]);
  v117 = vmlaq_laneq_f64(v87, _Q0, v99, 1);
  v804 = v98;
  v118 = vmlaq_n_f64(v88, _Q0, v98.f64[0]);
  v119 = vmlaq_laneq_f64(v89, _Q0, v98, 1);
  v835 = v101;
  v120 = vmlaq_n_f64(v90, _Q0, v101.f64[0]);
  v916 = vmlaq_laneq_f64(v91, _Q0, v101, 1);
  v121 = vmlaq_n_f64(_Q24, _Q0, _Q2.f64[0]);
  _Q0 = *(float64x2_t *)(a1 + 616);
  v938 = vmlaq_n_f64(v937, _Q0, _Q0.f64[0]);
  v123 = *(float64x2_t *)(a1 + 632);
  v965 = vmlaq_n_f64(v964, v123, _Q0.f64[0]);
  v124 = *(float64x2_t *)(a1 + 648);
  v125 = *(float64x2_t *)(a1 + 664);
  v126 = vmlaq_n_f64(v96, v124, _Q0.f64[0]);
  v948 = vmlaq_n_f64(v97, v125, _Q0.f64[0]);
  v127 = *(float64x2_t *)(a1 + 680);
  v128 = *(float64x2_t *)(a1 + 696);
  v129 = vmlaq_n_f64(v974, v127, _Q0.f64[0]);
  v130 = vmlaq_n_f64(v100, v128, _Q0.f64[0]);
  _Q21 = *(float64x2_t *)(a1 + 712);
  v930 = vmlaq_n_f64(v929, _Q21, _Q0.f64[0]);
  _Q24.f64[0] = *(float64_t *)(a1 + 728);
  v132 = vmlad_n_f64(v102, _Q24.f64[0], _Q0.f64[0]);
  v133 = vmlaq_laneq_f64(v103, _Q0, _Q0, 1);
  v877 = vmlaq_laneq_f64(v104, v123, _Q0, 1);
  v134 = vmlaq_laneq_f64(v105, v124, _Q0, 1);
  v135 = vmlaq_laneq_f64(v106, v125, _Q0, 1);
  v136 = vmlaq_laneq_f64(v107, v127, _Q0, 1);
  v137 = vmlaq_laneq_f64(v108, v128, _Q0, 1);
  v138 = vmlaq_laneq_f64(v109, _Q21, _Q0, 1);
  __asm { FMLA            D11, D24, V0.D[1] }
  v832 = _Q24.f64[0];
  v140 = vmlaq_n_f64(v111, _Q0, v123.f64[0]);
  v141 = vmlaq_laneq_f64(v956, _Q0, v123, 1);
  v727 = v124;
  v840 = vmlaq_n_f64(v112, _Q0, v124.f64[0]);
  v142 = vmlaq_laneq_f64(v113, _Q0, v124, 1);
  v753 = v125;
  v890 = vmlaq_n_f64(v114, _Q0, v125.f64[0]);
  v143 = vmlaq_laneq_f64(v115, _Q0, v125, 1);
  v786 = v127;
  v144 = vmlaq_n_f64(v116, _Q0, v127.f64[0]);
  v145 = vmlaq_laneq_f64(v117, _Q0, v127, 1);
  v785 = v128;
  v146 = vmlaq_n_f64(v118, _Q0, v128.f64[0]);
  v147 = vmlaq_laneq_f64(v119, _Q0, v128, 1);
  v833 = _Q21;
  v148 = vmlaq_n_f64(v120, _Q0, _Q21.f64[0]);
  v149 = vmlaq_laneq_f64(v916, _Q0, _Q21, 1);
  v150 = vmlaq_n_f64(v121, _Q0, _Q24.f64[0]);
  _Q0 = *(float64x2_t *)(a1 + 736);
  v152 = *(float64x2_t *)(a1 + 752);
  v153 = vmlaq_n_f64(v938, _Q0, _Q0.f64[0]);
  v154 = vmlaq_n_f64(v965, v152, _Q0.f64[0]);
  v155 = *(float64x2_t *)(a1 + 768);
  v156 = *(float64x2_t *)(a1 + 784);
  v157 = vmlaq_n_f64(v126, v155, _Q0.f64[0]);
  v949 = vmlaq_n_f64(v948, v156, _Q0.f64[0]);
  v158 = *(float64x2_t *)(a1 + 800);
  v975 = vmlaq_n_f64(v129, v158, _Q0.f64[0]);
  v159 = *(float64x2_t *)(a1 + 816);
  v160 = *(float64x2_t *)(a1 + 832);
  v161 = vmlaq_n_f64(v130, v159, _Q0.f64[0]);
  v162 = vmlaq_n_f64(v930, v160, _Q0.f64[0]);
  _Q21.f64[0] = *(float64_t *)(a1 + 848);
  v163 = vmlad_n_f64(v132, _Q21.f64[0], _Q0.f64[0]);
  v903 = vmlaq_laneq_f64(v133, _Q0, _Q0, 1);
  v878 = vmlaq_laneq_f64(v877, v152, _Q0, 1);
  v725 = v155;
  v164 = vmlaq_laneq_f64(v134, v155, _Q0, 1);
  v751 = v156;
  v165 = vmlaq_laneq_f64(v135, v156, _Q0, 1);
  v896 = vmlaq_laneq_f64(v136, v158, _Q0, 1);
  v166 = vmlaq_laneq_f64(v137, v159, _Q0, 1);
  v167 = vmlaq_laneq_f64(v138, v160, _Q0, 1);
  __asm { FMLA            D11, D21, V0.D[1] }
  v830 = _Q21.f64[0];
  v169 = vmlaq_n_f64(v140, _Q0, v152.f64[0]);
  v957 = vmlaq_laneq_f64(v141, _Q0, v152, 1);
  v170 = vmlaq_n_f64(v840, _Q0, v155.f64[0]);
  v171 = vmlaq_laneq_f64(v142, _Q0, v155, 1);
  v172 = vmlaq_n_f64(v890, _Q0, v156.f64[0]);
  v173 = vmlaq_laneq_f64(v143, _Q0, v156, 1);
  v784 = v158;
  v174 = vmlaq_n_f64(v144, _Q0, v158.f64[0]);
  v175 = vmlaq_laneq_f64(v145, _Q0, v158, 1);
  v803 = v159;
  v176 = vmlaq_n_f64(v146, _Q0, v159.f64[0]);
  v177 = vmlaq_laneq_f64(v147, _Q0, v159, 1);
  v831 = v160;
  v872 = vmlaq_n_f64(v148, _Q0, v160.f64[0]);
  v178 = vmlaq_laneq_f64(v149, _Q0, v160, 1);
  v923 = vmlaq_n_f64(v150, _Q0, _Q21.f64[0]);
  _Q0 = *(float64x2_t *)(a1 + 856);
  _Q2 = *(float64x2_t *)(a1 + 872);
  v181 = vmlaq_n_f64(v153, _Q0, _Q0.f64[0]);
  v182 = vmlaq_n_f64(v154, _Q2, _Q0.f64[0]);
  v183 = *(float64x2_t *)(a1 + 888);
  v184 = *(float64x2_t *)(a1 + 904);
  v185 = vmlaq_n_f64(v157, v183, _Q0.f64[0]);
  v186 = vmlaq_n_f64(v949, v184, _Q0.f64[0]);
  v187 = *(float64x2_t *)(a1 + 920);
  v188 = *(float64x2_t *)(a1 + 936);
  v976 = vmlaq_n_f64(v975, v187, _Q0.f64[0]);
  v910 = vmlaq_n_f64(v161, v188, _Q0.f64[0]);
  v189 = *(float64x2_t *)(a1 + 952);
  v190 = vmlaq_n_f64(v162, v189, _Q0.f64[0]);
  v191 = vmlad_n_f64(v163, *(double *)(a1 + 968), _Q0.f64[0]);
  v192 = vmlaq_laneq_f64(v903, _Q0, _Q0, 1);
  v193 = vmlaq_laneq_f64(v878, _Q2, _Q0, 1);
  v723 = v183;
  v194 = vmlaq_laneq_f64(v164, v183, _Q0, 1);
  v749 = v184;
  v195 = vmlaq_laneq_f64(v165, v184, _Q0, 1);
  v783 = v187;
  v897 = vmlaq_laneq_f64(v896, v187, _Q0, 1);
  v802 = v188;
  v196 = vmlaq_laneq_f64(v166, v188, _Q0, 1);
  v197 = vmlaq_laneq_f64(v167, v189, _Q0, 1);
  v801 = *(double *)(a1 + 968);
  __asm { FMLA            D11, D24, V0.D[1] }
  v199 = vmlaq_n_f64(v169, _Q0, _Q2.f64[0]);
  v958 = vmlaq_laneq_f64(v957, _Q0, _Q2, 1);
  v841 = vmlaq_n_f64(v170, _Q0, v183.f64[0]);
  v200 = vmlaq_laneq_f64(v171, _Q0, v183, 1);
  v891 = vmlaq_n_f64(v172, _Q0, v184.f64[0]);
  v201 = vmlaq_laneq_f64(v173, _Q0, v184, 1);
  v202 = vmlaq_n_f64(v174, _Q0, v187.f64[0]);
  v203 = vmlaq_laneq_f64(v175, _Q0, v187, 1);
  v204 = vmlaq_n_f64(v176, _Q0, v188.f64[0]);
  v205 = vmlaq_laneq_f64(v177, _Q0, v188, 1);
  v829 = v189;
  v206 = vmlaq_n_f64(v872, _Q0, v189.f64[0]);
  v207 = vmlaq_laneq_f64(v178, _Q0, v189, 1);
  v924 = vmlaq_n_f64(v923, _Q0, v801);
  _Q0 = *(float64x2_t *)(a1 + 976);
  v209 = *(float64x2_t *)(a1 + 992);
  v210 = vmlaq_n_f64(v181, _Q0, _Q0.f64[0]);
  v966 = vmlaq_n_f64(v182, v209, _Q0.f64[0]);
  v211 = *(float64x2_t *)(a1 + 1008);
  _Q20 = *(float64x2_t *)(a1 + 1024);
  v213 = vmlaq_n_f64(v185, v211, _Q0.f64[0]);
  v950 = vmlaq_n_f64(v186, _Q20, _Q0.f64[0]);
  v214 = *(float64x2_t *)(a1 + 1040);
  v215 = vmlaq_n_f64(v976, v214, _Q0.f64[0]);
  v216 = *(float64x2_t *)(a1 + 1056);
  v911 = vmlaq_n_f64(v910, v216, _Q0.f64[0]);
  v217 = *(float64x2_t *)(a1 + 1072);
  v218 = vmlaq_n_f64(v190, v217, _Q0.f64[0]);
  _Q2.f64[0] = *(float64_t *)(a1 + 1088);
  v867 = vmlad_n_f64(v191, _Q2.f64[0], _Q0.f64[0]);
  v904 = vmlaq_laneq_f64(v192, _Q0, _Q0, 1);
  v879 = vmlaq_laneq_f64(v193, v209, _Q0, 1);
  v862 = vmlaq_laneq_f64(v194, v211, _Q0, 1);
  v219 = vmlaq_laneq_f64(v195, _Q20, _Q0, 1);
  v898 = vmlaq_laneq_f64(v897, v214, _Q0, 1);
  v220 = vmlaq_laneq_f64(v196, v216, _Q0, 1);
  v221 = vmlaq_laneq_f64(v197, v217, _Q0, 1);
  __asm { FMLA            D11, D2, V0.D[1] }
  v827 = _Q2.f64[0];
  v223 = vmlaq_n_f64(v199, _Q0, v209.f64[0]);
  v224 = vmlaq_laneq_f64(v958, _Q0, v209, 1);
  v721 = v211;
  v225 = vmlaq_n_f64(v841, _Q0, v211.f64[0]);
  v849 = vmlaq_laneq_f64(v200, _Q0, v211, 1);
  v747 = _Q20;
  v226 = vmlaq_n_f64(v891, _Q0, _Q20.f64[0]);
  v227 = vmlaq_laneq_f64(v201, _Q0, _Q20, 1);
  v782 = v214;
  v228 = vmlaq_n_f64(v202, _Q0, v214.f64[0]);
  v229 = vmlaq_laneq_f64(v203, _Q0, v214, 1);
  v781 = v216;
  v230 = vmlaq_n_f64(v204, _Q0, v216.f64[0]);
  v231 = vmlaq_laneq_f64(v205, _Q0, v216, 1);
  v828 = v217;
  v232 = vmlaq_n_f64(v206, _Q0, v217.f64[0]);
  v917 = vmlaq_laneq_f64(v207, _Q0, v217, 1);
  v233 = vmlaq_n_f64(v924, _Q0, *(double *)(a1 + 1088));
  _Q0 = *(float64x2_t *)(a1 + 1096);
  _Q24 = vmlaq_n_f64(v210, _Q0, _Q0.f64[0]);
  _Q26 = *(float64x2_t *)(a1 + 1112);
  v236 = *(float64x2_t *)(a1 + 1128);
  v238 = vmlaq_n_f64(v966, _Q26, _Q0.f64[0]);
  v239 = vmlaq_n_f64(v213, v236, _Q0.f64[0]);
  v240 = *(float64x2_t *)(a1 + 1144);
  v241 = *(float64x2_t *)(a1 + 1160);
  v242 = vmlaq_n_f64(v950, v240, _Q0.f64[0]);
  v977 = vmlaq_n_f64(v215, v241, _Q0.f64[0]);
  v244 = *(float64x2_t *)(a1 + 1176);
  v243 = *(float64x2_t *)(a1 + 1192);
  v245 = vmlaq_n_f64(v911, v244, _Q0.f64[0]);
  v931 = vmlaq_n_f64(v218, v243, _Q0.f64[0]);
  _Q20.f64[0] = *(float64_t *)(a1 + 1208);
  v868 = vmlad_n_f64(v867, _Q20.f64[0], _Q0.f64[0]);
  v246 = vmlaq_laneq_f64(v904, _Q0, _Q0, 1);
  v247 = vmlaq_laneq_f64(v879, _Q26, _Q0, 1);
  v863 = vmlaq_laneq_f64(v862, v236, _Q0, 1);
  v248 = vmlaq_laneq_f64(v219, v240, _Q0, 1);
  v249 = vmlaq_laneq_f64(v898, v241, _Q0, 1);
  v884 = vmlaq_laneq_f64(v220, v244, _Q0, 1);
  v250 = vmlaq_laneq_f64(v221, v243, _Q0, 1);
  __asm { FMLA            D11, D20, V0.D[1] }
  v824 = _Q20.f64[0];
  v252 = vmlaq_n_f64(v223, _Q0, _Q26.f64[0]);
  v253 = vmlaq_laneq_f64(v224, _Q0, _Q26, 1);
  v719 = v236;
  v254 = vmlaq_n_f64(v225, _Q0, v236.f64[0]);
  v255 = vmlaq_laneq_f64(v849, _Q0, v236, 1);
  v746 = v240;
  v892 = vmlaq_n_f64(v226, _Q0, v240.f64[0]);
  v256 = vmlaq_laneq_f64(v227, _Q0, v240, 1);
  v780 = v241;
  v257 = vmlaq_n_f64(v228, _Q0, v241.f64[0]);
  v258 = vmlaq_laneq_f64(v229, _Q0, v241, 1);
  v800 = v244;
  v259 = vmlaq_n_f64(v230, _Q0, v244.f64[0]);
  v260 = vmlaq_laneq_f64(v231, _Q0, v244, 1);
  v825 = v243;
  v261 = vmlaq_n_f64(v232, _Q0, v243.f64[0]);
  v918 = vmlaq_laneq_f64(v917, _Q0, v243, 1);
  v925 = vmlaq_n_f64(v233, _Q0, *(double *)(a1 + 1208));
  _Q0 = *(float64x2_t *)(a1 + 1216);
  v939 = vmlaq_n_f64(_Q24, _Q0, _Q0.f64[0]);
  _Q30 = *(float64x2_t *)(a1 + 1232);
  v967 = vmlaq_n_f64(v238, _Q30, _Q0.f64[0]);
  v264 = *(float64x2_t *)(a1 + 1248);
  v265 = vmlaq_n_f64(v239, v264, _Q0.f64[0]);
  v266 = *(float64x2_t *)(a1 + 1264);
  _Q4 = vmlaq_n_f64(v242, v266, _Q0.f64[0]);
  v268 = *(float64x2_t *)(a1 + 1280);
  _Q6 = vmlaq_n_f64(v977, v268, _Q0.f64[0]);
  v270 = *(float64x2_t *)(a1 + 1296);
  v912 = vmlaq_n_f64(v245, v270, _Q0.f64[0]);
  v271 = *(float64x2_t *)(a1 + 1312);
  v272 = vmlaq_n_f64(v931, v271, _Q0.f64[0]);
  _Q24.f64[0] = *(float64_t *)(a1 + 1328);
  v869 = vmlad_n_f64(v868, _Q24.f64[0], _Q0.f64[0]);
  v905 = vmlaq_laneq_f64(v246, _Q0, _Q0, 1);
  v273 = vmlaq_laneq_f64(v247, _Q30, _Q0, 1);
  v864 = vmlaq_laneq_f64(v863, v264, _Q0, 1);
  v274 = vmlaq_laneq_f64(v248, v266, _Q0, 1);
  _Q29 = vmlaq_laneq_f64(v249, v268, _Q0, 1);
  v276 = vmlaq_laneq_f64(v884, v270, _Q0, 1);
  v277 = vmlaq_laneq_f64(v250, v271, _Q0, 1);
  __asm { FMLA            D11, D24, V0.D[1] }
  v820 = _Q24.f64[0];
  v279 = vmlaq_n_f64(v252, _Q0, _Q30.f64[0]);
  v280 = vmlaq_laneq_f64(v253, _Q0, _Q30, 1);
  v712 = v264;
  v842 = vmlaq_n_f64(v254, _Q0, v264.f64[0]);
  v850 = vmlaq_laneq_f64(v255, _Q0, v264, 1);
  v745 = v266;
  v893 = vmlaq_n_f64(v892, _Q0, v266.f64[0]);
  v281 = vmlaq_laneq_f64(v256, _Q0, v266, 1);
  v778 = v268;
  v282 = vmlaq_n_f64(v257, _Q0, v268.f64[0]);
  v283 = vmlaq_laneq_f64(v258, _Q0, v268, 1);
  v798 = v270;
  v284 = vmlaq_n_f64(v259, _Q0, v270.f64[0]);
  v285 = vmlaq_laneq_f64(v260, _Q0, v270, 1);
  v821 = v271;
  v873 = vmlaq_n_f64(v261, _Q0, v271.f64[0]);
  v286 = vmlaq_laneq_f64(v918, _Q0, v271, 1);
  v926 = vmlaq_n_f64(v925, _Q0, _Q24.f64[0]);
  _Q0 = *(float64x2_t *)(a1 + 1336);
  v288 = *(float64x2_t *)(a1 + 1352);
  v289 = vmlaq_n_f64(v939, _Q0, _Q0.f64[0]);
  v290 = vmlaq_n_f64(v967, v288, _Q0.f64[0]);
  v292 = *(float64x2_t *)(a1 + 1368);
  v291 = *(float64x2_t *)(a1 + 1384);
  v293 = vmlaq_n_f64(v265, v292, _Q0.f64[0]);
  v951 = vmlaq_n_f64(_Q4, v291, _Q0.f64[0]);
  v294 = *(float64x2_t *)(a1 + 1400);
  v295 = *(float64x2_t *)(a1 + 1416);
  v978 = vmlaq_n_f64(_Q6, v294, _Q0.f64[0]);
  v296 = vmlaq_n_f64(v912, v295, _Q0.f64[0]);
  v297 = *(float64x2_t *)(a1 + 1432);
  v932 = vmlaq_n_f64(v272, v297, _Q0.f64[0]);
  _Q4.f64[0] = *(float64_t *)(a1 + 1448);
  _Q6.f64[0] = vmlad_n_f64(v869, _Q4.f64[0], _Q0.f64[0]);
  v906 = vmlaq_laneq_f64(v905, _Q0, _Q0, 1);
  v880 = vmlaq_laneq_f64(v273, v288, _Q0, 1);
  v298 = vmlaq_laneq_f64(v864, v292, _Q0, 1);
  v844 = vmlaq_laneq_f64(v274, v291, _Q0, 1);
  v899 = vmlaq_laneq_f64(_Q29, v294, _Q0, 1);
  v885 = vmlaq_laneq_f64(v276, v295, _Q0, 1);
  v299 = vmlaq_laneq_f64(v277, v297, _Q0, 1);
  __asm { FMLA            D11, D4, V0.D[1] }
  v818 = _Q4.f64[0];
  v853 = vmlaq_n_f64(v279, _Q0, v288.f64[0]);
  v959 = vmlaq_laneq_f64(v280, _Q0, v288, 1);
  v714 = v292;
  v301 = vmlaq_n_f64(v842, _Q0, v292.f64[0]);
  v302 = vmlaq_laneq_f64(v850, _Q0, v292, 1);
  v742 = v291;
  v303 = vmlaq_n_f64(v893, _Q0, v291.f64[0]);
  _Q7 = vmlaq_laneq_f64(v281, _Q0, v291, 1);
  v779 = v294;
  v305 = vmlaq_n_f64(v282, _Q0, v294.f64[0]);
  v306 = vmlaq_laneq_f64(v283, _Q0, v294, 1);
  v796 = v295;
  v307 = vmlaq_n_f64(v284, _Q0, v295.f64[0]);
  v308 = vmlaq_laneq_f64(v285, _Q0, v295, 1);
  v823 = v297;
  v874 = vmlaq_n_f64(v873, _Q0, v297.f64[0]);
  v919 = vmlaq_laneq_f64(v286, _Q0, v297, 1);
  v309 = vmlaq_n_f64(v926, _Q0, *(double *)(a1 + 1448));
  _Q0 = *(float64x2_t *)(a1 + 1456);
  v940 = vmlaq_n_f64(v289, _Q0, _Q0.f64[0]);
  v311 = *(float64x2_t *)(a1 + 1472);
  v312 = vmlaq_n_f64(v290, v311, _Q0.f64[0]);
  v313 = *(float64x2_t *)(a1 + 1488);
  v314 = vmlaq_n_f64(v293, v313, _Q0.f64[0]);
  v315 = *(float64x2_t *)(a1 + 1504);
  v316 = vmlaq_n_f64(v951, v315, _Q0.f64[0]);
  v317 = *(float64x2_t *)(a1 + 1520);
  v979 = vmlaq_n_f64(v978, v317, _Q0.f64[0]);
  v318 = *(float64x2_t *)(a1 + 1536);
  v319 = vmlaq_n_f64(v296, v318, _Q0.f64[0]);
  v320 = *(float64x2_t *)(a1 + 1552);
  _Q2 = vmlaq_n_f64(v932, v320, _Q0.f64[0]);
  _Q29.f64[0] = *(float64_t *)(a1 + 1568);
  _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], _Q29.f64[0], _Q0.f64[0]);
  v322 = vmlaq_laneq_f64(v906, _Q0, _Q0, 1);
  v323 = vmlaq_laneq_f64(v880, v311, _Q0, 1);
  v865 = vmlaq_laneq_f64(v298, v313, _Q0, 1);
  v845 = vmlaq_laneq_f64(v844, v315, _Q0, 1);
  v900 = vmlaq_laneq_f64(v899, v317, _Q0, 1);
  v886 = vmlaq_laneq_f64(v885, v318, _Q0, 1);
  v808 = vmlaq_laneq_f64(v299, v320, _Q0, 1);
  __asm { FMLA            D11, D29, V0.D[1] }
  v817 = _Q29.f64[0];
  v325 = vmlaq_n_f64(v853, _Q0, v311.f64[0]);
  v326 = vmlaq_laneq_f64(v959, _Q0, v311, 1);
  v717 = v313;
  v327 = vmlaq_n_f64(v301, _Q0, v313.f64[0]);
  v328 = vmlaq_laneq_f64(v302, _Q0, v313, 1);
  v740 = v315;
  v894 = vmlaq_n_f64(v303, _Q0, v315.f64[0]);
  v329 = vmlaq_laneq_f64(_Q7, _Q0, v315, 1);
  v775 = v317;
  v330 = vmlaq_n_f64(v305, _Q0, v317.f64[0]);
  v331 = vmlaq_laneq_f64(v306, _Q0, v317, 1);
  v795 = v318;
  v332 = vmlaq_n_f64(v307, _Q0, v318.f64[0]);
  v333 = vmlaq_laneq_f64(v308, _Q0, v318, 1);
  v822 = v320;
  v334 = vmlaq_n_f64(v874, _Q0, v320.f64[0]);
  v335 = vmlaq_laneq_f64(v919, _Q0, v320, 1);
  v336 = vmlaq_n_f64(v309, _Q0, _Q29.f64[0]);
  _Q0 = *(float64x2_t *)(a1 + 1576);
  _Q17 = *(float64x2_t *)(a1 + 1592);
  v339 = *(float64x2_t *)(a1 + 1608);
  v340 = *(float64x2_t *)(a1 + 1624);
  v768 = vmlaq_n_f64(v314, v339, _Q0.f64[0]);
  v952 = vmlaq_n_f64(v316, v340, _Q0.f64[0]);
  v341 = *(float64x2_t *)(a1 + 1640);
  v342 = *(float64x2_t *)(a1 + 1656);
  v343 = *(float64x2_t *)(a1 + 1672);
  v933 = vmlaq_n_f64(_Q2, v343, _Q0.f64[0]);
  _Q7.f64[0] = *(float64_t *)(a1 + 1688);
  v881 = vmlaq_laneq_f64(v323, _Q17, _Q0, 1);
  v344 = vmlaq_laneq_f64(v865, v339, _Q0, 1);
  v846 = vmlaq_laneq_f64(v845, v340, _Q0, 1);
  v887 = vmlaq_laneq_f64(v886, v342, _Q0, 1);
  v809 = vmlaq_laneq_f64(v808, v343, _Q0, 1);
  __asm { FMLA            D2, D7, V0.D[1] }
  v826 = _Q7.f64[0];
  v854 = vmlaq_n_f64(v325, _Q0, _Q17.f64[0]);
  v960 = vmlaq_laneq_f64(v326, _Q0, _Q17, 1);
  v716 = v339;
  v345 = vmlaq_n_f64(v327, _Q0, v339.f64[0]);
  _Q7 = vmlaq_laneq_f64(v328, _Q0, v339, 1);
  v739 = v340;
  v347 = vmlaq_n_f64(v894, _Q0, v340.f64[0]);
  _Q3 = vmlaq_laneq_f64(v329, _Q0, v340, 1);
  v774 = v341;
  _Q4 = vmlaq_n_f64(v330, _Q0, v341.f64[0]);
  v350 = vmlaq_laneq_f64(v331, _Q0, v341, 1);
  v816 = v342;
  _Q5 = vmlaq_n_f64(v332, _Q0, v342.f64[0]);
  v352 = vmlaq_laneq_f64(v333, _Q0, v342, 1);
  v797 = v343;
  v353 = vmlaq_n_f64(v334, _Q0, v343.f64[0]);
  v354 = vmlaq_laneq_f64(v335, _Q0, v343, 1);
  v355 = vmlaq_n_f64(v336, _Q0, *(double *)(a1 + 1688));
  _Q12 = *(float64x2_t *)(a1 + 1696);
  v941 = vmlaq_n_f64(vmlaq_n_f64(v940, _Q0, _Q0.f64[0]), _Q12, _Q12.f64[0]);
  v357 = *(float64x2_t *)(a1 + 1712);
  v968 = vmlaq_n_f64(vmlaq_n_f64(v312, _Q17, _Q0.f64[0]), v357, _Q12.f64[0]);
  v358 = *(float64x2_t *)(a1 + 1728);
  v769 = vmlaq_n_f64(v768, v358, _Q12.f64[0]);
  v359 = *(float64x2_t *)(a1 + 1744);
  v953 = vmlaq_n_f64(v952, v359, _Q12.f64[0]);
  v360 = *(float64x2_t *)(a1 + 1760);
  v980 = vmlaq_n_f64(vmlaq_n_f64(v979, v341, _Q0.f64[0]), v360, _Q12.f64[0]);
  v361 = *(float64x2_t *)(a1 + 1776);
  v913 = vmlaq_n_f64(vmlaq_n_f64(v319, v342, _Q0.f64[0]), v361, _Q12.f64[0]);
  v362 = *(float64x2_t *)(a1 + 1792);
  v934 = vmlaq_n_f64(v933, v362, _Q12.f64[0]);
  _Q17.f64[0] = *(float64_t *)(a1 + 1808);
  v870 = vmlad_n_f64(vmlad_n_f64(_Q6.f64[0], *(double *)(a1 + 1688), _Q0.f64[0]), _Q17.f64[0], _Q12.f64[0]);
  v907 = vmlaq_laneq_f64(vmlaq_laneq_f64(v322, _Q0, _Q0, 1), _Q12, _Q12, 1);
  v882 = vmlaq_laneq_f64(v881, v357, _Q12, 1);
  v866 = vmlaq_laneq_f64(v344, v358, _Q12, 1);
  v847 = vmlaq_laneq_f64(v846, v359, _Q12, 1);
  v901 = vmlaq_laneq_f64(vmlaq_laneq_f64(v900, v341, _Q0, 1), v360, _Q12, 1);
  v888 = vmlaq_laneq_f64(v887, v361, _Q12, 1);
  v810 = vmlaq_laneq_f64(v809, v362, _Q12, 1);
  __asm { FMLA            D0, D17, V12.D[1] }
  v799 = _Q17.f64[0];
  v807 = _Q0.f64[0];
  v855 = vmlaq_n_f64(v854, _Q12, v357.f64[0]);
  v961 = vmlaq_laneq_f64(v960, _Q12, v357, 1);
  v843 = vmlaq_n_f64(v345, _Q12, v358.f64[0]);
  v851 = vmlaq_laneq_f64(_Q7, _Q12, v358, 1);
  v744 = v359;
  v895 = vmlaq_n_f64(v347, _Q12, v359.f64[0]);
  v777 = v360;
  v708 = vmlaq_laneq_f64(_Q3, _Q12, v359, 1);
  v709 = vmlaq_n_f64(_Q4, _Q12, v360.f64[0]);
  v710 = vmlaq_laneq_f64(v350, _Q12, v360, 1);
  v711 = v358;
  v776 = v361;
  v767 = vmlaq_n_f64(_Q5, _Q12, v361.f64[0]);
  v813 = vmlaq_laneq_f64(v352, _Q12, v361, 1);
  v819 = v362;
  v875 = vmlaq_n_f64(v353, _Q12, v362.f64[0]);
  v920 = vmlaq_laneq_f64(v354, _Q12, v362, 1);
  v927 = vmlaq_n_f64(v355, _Q12, _Q17.f64[0]);
  v363 = *(float64x2_t *)(a1 + 32);
  _Q1 = *(float64x2_t *)(a1 + 152);
  v365 = vmlaq_n_f64(vmulq_n_f64(v772, v363.f64[0]), v771, _Q1.f64[0]);
  v969 = vmlaq_n_f64(vmulq_n_f64(v792, v363.f64[0]), v770, _Q1.f64[0]);
  v758 = vmlaq_n_f64(vmulq_n_f64(v791, v363.f64[0]), v790, _Q1.f64[0]);
  v760 = vmlaq_n_f64(vmulq_n_f64(v793, v363.f64[0]), v794, _Q1.f64[0]);
  _Q12.f64[0] = *(float64_t *)(a1 + 248);
  v358.f64[0] = vmlad_n_f64(v814.f64[0] * v363.f64[0], v815, _Q1.f64[0]);
  __asm { FMLA            D7, D12, V1.D[1] }
  _Q14 = v762;
  v367 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v363, v363.f64[0]), _Q1, _Q1.f64[0]), _Q14, _Q14.f64[0]);
  _Q6.f64[0] = v838;
  __asm { FMLA            D4, D6, V14.D[1] }
  _Q15 = *(float64x2_t *)(a1 + 392);
  _Q5.f64[0] = v836;
  v369 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v363, v363, 1), _Q1, _Q1, 1), _Q14, _Q14, 1), _Q15, _Q15, 1);
  v370 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v737, v363, 1), v735, _Q1, 1), v733, v762, 1), v731, _Q15, 1);
  v371 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v772, v363, 1), v771, _Q1, 1), v757, v762, 1), v756, _Q15, 1);
  v372 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v792, v363, 1), v770, _Q1, 1), v789, v762, 1), v788, _Q15, 1);
  v373 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v791, v363, 1), v790, _Q1, 1), v806, v762, 1), v805, _Q15, 1);
  _Q12 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v793, v363, 1), v794, _Q1, 1), v839, v762, 1), v837, _Q15, 1);
  __asm { FMLA            D4, D5, V15.D[1] }
  v375 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v363, v737.f64[0]), _Q1, v735.f64[0]), v762, v733.f64[0]), _Q15, v731.f64[0]);
  v376 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v363, v737, 1), _Q1, v735, 1), v762, v733, 1), _Q15, v731, 1);
  v377 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v363, v772.f64[0]), _Q1, v771.f64[0]), v762, v757.f64[0]), _Q15, v756.f64[0]);
  v378 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v363, v772, 1), _Q1, v771, 1), v762, v757, 1), _Q15, v756, 1);
  v379 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v363, v792.f64[0]), _Q1, v770.f64[0]), v762, v789.f64[0]), _Q15, v788.f64[0]);
  v380 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v363, v792, 1), _Q1, v770, 1), v762, v789, 1), _Q15, v788, 1);
  v381 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v363, v791.f64[0]), _Q1, v790.f64[0]), v762, v806.f64[0]), _Q15, v805.f64[0]);
  v382 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v363, v791, 1), _Q1, v790, 1), v762, v806, 1), _Q15, v805, 1);
  v383 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v363, v793.f64[0]), _Q1, v794.f64[0]), v762, v839.f64[0]), _Q15, v837.f64[0]);
  v384 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v363, v793, 1), _Q1, v794, 1), v762, v839, 1), _Q15, v837, 1);
  v385 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v363, v814.f64[0]), _Q1, v815), v762, v838), _Q15, v836);
  _Q14 = v705;
  v387 = vmlaq_n_f64(vmlaq_n_f64(v367, _Q15, _Q15.f64[0]), _Q14, _Q14.f64[0]);
  v388 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v737, v363.f64[0]), v735, _Q1.f64[0]), v733, v762.f64[0]), v731, _Q15.f64[0]), v729, v705.f64[0]);
  v389 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v365, v757, v762.f64[0]), v756, _Q15.f64[0]), v755, v705.f64[0]);
  v390 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v969, v789, v762.f64[0]), v788, _Q15.f64[0]), v787, v705.f64[0]);
  v391 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v758, v806, v762.f64[0]), v805, _Q15.f64[0]), v804, v705.f64[0]);
  v392 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v760, v839, v762.f64[0]), v837, _Q15.f64[0]), v835, v705.f64[0]);
  _Q4.f64[0] = v834;
  v358.f64[0] = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(v358.f64[0], v838, v762.f64[0]), v836, _Q15.f64[0]), v834, v705.f64[0]);
  v393 = vmlaq_laneq_f64(v369, _Q14, _Q14, 1);
  v394 = vmlaq_laneq_f64(_Q12, v835, v705, 1);
  __asm { FMLA            D12, D4, V14.D[1] }
  _Q14 = *(float64x2_t *)(a1 + 632);
  v396 = vmlaq_n_f64(v387, _Q14, _Q14.f64[0]);
  v397 = vmlaq_n_f64(v388, v727, _Q14.f64[0]);
  v398 = vmlaq_n_f64(v389, v753, _Q14.f64[0]);
  v399 = vmlaq_n_f64(v390, v786, _Q14.f64[0]);
  v400 = vmlaq_n_f64(v391, v785, _Q14.f64[0]);
  v401 = vmlaq_n_f64(v392, v833, _Q14.f64[0]);
  _Q4.f64[0] = v832;
  v358.f64[0] = vmlad_n_f64(v358.f64[0], v832, _Q14.f64[0]);
  v856 = vmlaq_laneq_f64(v393, _Q14, _Q14, 1);
  v402 = vmlaq_laneq_f64(vmlaq_laneq_f64(v370, v729, v705, 1), v727, _Q14, 1);
  v403 = vmlaq_laneq_f64(vmlaq_laneq_f64(v371, v755, v705, 1), v753, _Q14, 1);
  v404 = vmlaq_laneq_f64(vmlaq_laneq_f64(v372, v787, v705, 1), v786, _Q14, 1);
  v405 = vmlaq_laneq_f64(vmlaq_laneq_f64(v373, v804, v705, 1), v785, _Q14, 1);
  v942 = vmlaq_laneq_f64(v394, v833, _Q14, 1);
  __asm { FMLA            D12, D4, V14.D[1] }
  v406 = vmlaq_n_f64(vmlaq_n_f64(v375, v705, v729.f64[0]), _Q14, v727.f64[0]);
  v407 = vmlaq_laneq_f64(vmlaq_laneq_f64(v376, v705, v729, 1), _Q14, v727, 1);
  v408 = vmlaq_n_f64(vmlaq_n_f64(v377, v705, v755.f64[0]), _Q14, v753.f64[0]);
  v409 = vmlaq_laneq_f64(vmlaq_laneq_f64(v378, v705, v755, 1), _Q14, v753, 1);
  v410 = vmlaq_n_f64(vmlaq_n_f64(v379, v705, v787.f64[0]), _Q14, v786.f64[0]);
  v411 = vmlaq_laneq_f64(vmlaq_laneq_f64(v380, v705, v787, 1), _Q14, v786, 1);
  v412 = vmlaq_n_f64(vmlaq_n_f64(v381, v705, v804.f64[0]), _Q14, v785.f64[0]);
  v413 = vmlaq_laneq_f64(vmlaq_laneq_f64(v382, v705, v804, 1), _Q14, v785, 1);
  v414 = vmlaq_n_f64(vmlaq_n_f64(v383, v705, v835.f64[0]), _Q14, v833.f64[0]);
  v415 = vmlaq_laneq_f64(vmlaq_laneq_f64(v384, v705, v835, 1), _Q14, v833, 1);
  v416 = vmlaq_n_f64(vmlaq_n_f64(v385, v705, v834), _Q14, v832);
  _Q14 = *(float64x2_t *)(a1 + 752);
  v418 = vmlaq_n_f64(v396, _Q14, _Q14.f64[0]);
  v419 = vmlaq_n_f64(v397, v725, _Q14.f64[0]);
  v420 = vmlaq_n_f64(v398, v751, _Q14.f64[0]);
  _Q1 = vmlaq_n_f64(v399, v784, _Q14.f64[0]);
  v422 = vmlaq_n_f64(v400, v803, _Q14.f64[0]);
  v423 = vmlaq_n_f64(v401, v831, _Q14.f64[0]);
  _Q4.f64[0] = v830;
  v358.f64[0] = vmlad_n_f64(v358.f64[0], v830, _Q14.f64[0]);
  v857 = vmlaq_laneq_f64(v856, _Q14, _Q14, 1);
  v424 = vmlaq_laneq_f64(v402, v725, _Q14, 1);
  v425 = vmlaq_laneq_f64(v403, v751, _Q14, 1);
  v426 = vmlaq_laneq_f64(v404, v784, _Q14, 1);
  v427 = vmlaq_laneq_f64(v405, v803, _Q14, 1);
  v943 = vmlaq_laneq_f64(v942, v831, _Q14, 1);
  __asm { FMLA            D12, D4, V14.D[1] }
  v428 = vmlaq_n_f64(v406, _Q14, v725.f64[0]);
  v429 = vmlaq_laneq_f64(v407, _Q14, v725, 1);
  v860 = vmlaq_n_f64(v408, _Q14, v751.f64[0]);
  v430 = vmlaq_laneq_f64(v409, _Q14, v751, 1);
  v431 = vmlaq_n_f64(v410, _Q14, v784.f64[0]);
  v432 = vmlaq_laneq_f64(v411, _Q14, v784, 1);
  v433 = vmlaq_n_f64(v412, _Q14, v803.f64[0]);
  v434 = vmlaq_laneq_f64(v413, _Q14, v803, 1);
  v435 = vmlaq_n_f64(v414, _Q14, v831.f64[0]);
  v436 = vmlaq_laneq_f64(v415, _Q14, v831, 1);
  v437 = vmlaq_n_f64(v416, _Q14, v830);
  _Q14 = *(float64x2_t *)(a1 + 872);
  v439 = vmlaq_n_f64(v418, _Q14, _Q14.f64[0]);
  v440 = vmlaq_n_f64(v419, v723, _Q14.f64[0]);
  v441 = vmlaq_n_f64(v420, v749, _Q14.f64[0]);
  v442 = vmlaq_n_f64(_Q1, v783, _Q14.f64[0]);
  v443 = vmlaq_n_f64(v422, v802, _Q14.f64[0]);
  v444 = vmlaq_n_f64(v423, v829, _Q14.f64[0]);
  _Q5.f64[0] = v801;
  v358.f64[0] = vmlad_n_f64(v358.f64[0], v801, _Q14.f64[0]);
  v858 = vmlaq_laneq_f64(v857, _Q14, _Q14, 1);
  v445 = vmlaq_laneq_f64(v424, v723, _Q14, 1);
  v446 = vmlaq_laneq_f64(v425, v749, _Q14, 1);
  v447 = vmlaq_laneq_f64(v426, v783, _Q14, 1);
  v448 = vmlaq_laneq_f64(v427, v802, _Q14, 1);
  v449 = vmlaq_laneq_f64(v943, v829, _Q14, 1);
  __asm { FMLA            D12, D5, V14.D[1] }
  v450 = vmlaq_n_f64(v428, _Q14, v723.f64[0]);
  v451 = vmlaq_laneq_f64(v429, _Q14, v723, 1);
  v452 = vmlaq_n_f64(v860, _Q14, v749.f64[0]);
  v453 = vmlaq_laneq_f64(v430, _Q14, v749, 1);
  v454 = vmlaq_n_f64(v431, _Q14, v783.f64[0]);
  v455 = vmlaq_laneq_f64(v432, _Q14, v783, 1);
  v456 = vmlaq_n_f64(v433, _Q14, v802.f64[0]);
  v457 = vmlaq_laneq_f64(v434, _Q14, v802, 1);
  v458 = vmlaq_n_f64(v435, _Q14, v829.f64[0]);
  v459 = vmlaq_laneq_f64(v436, _Q14, v829, 1);
  v460 = vmlaq_n_f64(v437, _Q14, v801);
  _Q14 = *(float64x2_t *)(a1 + 992);
  _Q5.f64[0] = v827;
  __asm { FMLA            D12, D5, V14.D[1] }
  v763 = vmlaq_laneq_f64(v451, _Q14, v721, 1);
  v462 = vmlaq_n_f64(vmlaq_n_f64(v439, _Q14, _Q14.f64[0]), _Q26, _Q26.f64[0]);
  v463 = vmlaq_n_f64(vmlaq_n_f64(v440, v721, _Q14.f64[0]), v719, _Q26.f64[0]);
  v464 = vmlaq_n_f64(vmlaq_n_f64(v441, v747, _Q14.f64[0]), v746, _Q26.f64[0]);
  _Q4.f64[0] = v824;
  __asm { FMLA            D12, D4, V26.D[1] }
  v970 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v442, v782, _Q14.f64[0]), v780, _Q26.f64[0]), v778, _Q30.f64[0]);
  _Q9 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v443, v781, _Q14.f64[0]), v800, _Q26.f64[0]), v798, _Q30.f64[0]);
  _Q2 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v444, v828, _Q14.f64[0]), v825, _Q26.f64[0]), v821, _Q30.f64[0]);
  _Q3.f64[0] = v820;
  v358.f64[0] = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(v358.f64[0], v827, _Q14.f64[0]), v824, _Q26.f64[0]), v820, _Q30.f64[0]);
  _Q18 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v858, _Q14, _Q14, 1), _Q26, _Q26, 1), _Q30, _Q30, 1);
  v468 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v445, v721, _Q14, 1), v719, _Q26, 1), v712, _Q30, 1);
  _Q24 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v446, v747, _Q14, 1), v746, _Q26, 1), v745, _Q30, 1);
  _Q27 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v447, v782, _Q14, 1), v780, _Q26, 1), v778, _Q30, 1);
  v471 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v448, v781, _Q14, 1), v800, _Q26, 1), v798, _Q30, 1);
  v472 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v449, v828, _Q14, 1), v825, _Q26, 1), v821, _Q30, 1);
  __asm { FMLA            D12, D3, V30.D[1] }
  v473 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v450, _Q14, v721.f64[0]), _Q26, v719.f64[0]), _Q30, v712.f64[0]);
  v474 = vmlaq_laneq_f64(vmlaq_laneq_f64(v763, _Q26, v719, 1), _Q30, v712, 1);
  v475 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v452, _Q14, v747.f64[0]), _Q26, v746.f64[0]), _Q30, v745.f64[0]);
  v476 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v453, _Q14, v747, 1), _Q26, v746, 1), _Q30, v745, 1);
  v477 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v454, _Q14, v782.f64[0]), _Q26, v780.f64[0]), _Q30, v778.f64[0]);
  _Q19 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v455, _Q14, v782, 1), _Q26, v780, 1), _Q30, v778, 1);
  v479 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v456, _Q14, v781.f64[0]), _Q26, v800.f64[0]), _Q30, v798.f64[0]);
  _Q7 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v457, _Q14, v781, 1), _Q26, v800, 1), _Q30, v798, 1);
  v481 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v458, _Q14, v828.f64[0]), _Q26, v825.f64[0]), _Q30, v821.f64[0]);
  v482 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v459, _Q14, v828, 1), _Q26, v825, 1), _Q30, v821, 1);
  v483 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v460, _Q14, v827), _Q26, v824), _Q30, v820);
  _Q14 = *(float64x2_t *)(a1 + 1352);
  v485 = vmlaq_n_f64(vmlaq_n_f64(v463, v712, _Q30.f64[0]), v714, _Q14.f64[0]);
  _Q1.f64[0] = v818;
  v944 = vmlaq_laneq_f64(v472, v823, _Q14, 1);
  __asm { FMLA            D12, D1, V14.D[1] }
  _Q15 = *(float64x2_t *)(a1 + 1472);
  _Q5.f64[0] = *(float64_t *)(a1 + 1568);
  __asm { FMLA            D12, D5, V15.D[1] }
  v487 = vmlaq_n_f64(vmlaq_n_f64(v479, _Q14, v796.f64[0]), _Q15, v795.f64[0]);
  _Q13 = *(float64x2_t *)(a1 + 1592);
  _Q0 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(_Q9, v796, _Q14.f64[0]), v795, _Q15.f64[0]), v816, _Q13.f64[0]);
  _Q5.f64[0] = v826;
  __asm { FMLA            D9, D5, V13.D[1] }
  v490 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v483, _Q14, v818), _Q15, v817), _Q13, v826);
  _Q31 = *(float64x2_t *)(a1 + 1712);
  v876 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v485, v717, _Q15.f64[0]), v716, _Q13.f64[0]), v711, _Q31.f64[0]);
  v691 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v462, _Q30, _Q30.f64[0]), _Q14, _Q14.f64[0]), _Q15, _Q15.f64[0]), _Q13, _Q13.f64[0]), _Q31, _Q31.f64[0]);
  v692 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v464, v745, _Q30.f64[0]), v742, _Q14.f64[0]), v740, _Q15.f64[0]), v739, _Q13.f64[0]), v744, _Q31.f64[0]);
  v971 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v970, v779, _Q14.f64[0]), v775, _Q15.f64[0]), v774, _Q13.f64[0]), v777, _Q31.f64[0]);
  v759 = vmlaq_n_f64(_Q0, v776, _Q31.f64[0]);
  v761 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(_Q2, v823, _Q14.f64[0]), v822, _Q15.f64[0]), v797, _Q13.f64[0]), v819, _Q31.f64[0]);
  _Q0.f64[0] = v799;
  v693 = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(v358.f64[0], v818, _Q14.f64[0]), v817, _Q15.f64[0]), v826, _Q13.f64[0]), v799, _Q31.f64[0]);
  v859 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(_Q18, _Q14, _Q14, 1), _Q15, _Q15, 1), _Q13, _Q13, 1), _Q31, _Q31, 1);
  v696 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v468, v714, _Q14, 1), v717, _Q15, 1), v716, _Q13, 1), v711, _Q31, 1);
  v697 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(_Q27, v779, _Q14, 1), v775, _Q15, 1), v774, _Q13, 1), v777, _Q31, 1);
  v694 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(_Q24, v742, _Q14, 1), v740, _Q15, 1), v739, _Q13, 1), v744, _Q31, 1);
  v695 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v471, v796, _Q14, 1), v795, _Q15, 1), v816, _Q13, 1), v776, _Q31, 1);
  v945 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v944, v822, _Q15, 1), v797, _Q13, 1), v819, _Q31, 1);
  __asm { FMLA            D9, D0, V31.D[1] }
  v765 = _Q9.f64[0];
  v764 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v474, _Q14, v714, 1), _Q15, v717, 1), _Q13, v716, 1), _Q31, v711, 1);
  v861 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v475, _Q14, v742.f64[0]), _Q15, v740.f64[0]), _Q13, v739.f64[0]), _Q31, v744.f64[0]);
  v698 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v473, _Q14, v714.f64[0]), _Q15, v717.f64[0]), _Q13, v716.f64[0]), _Q31, v711.f64[0]);
  v699 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v476, _Q14, v742, 1), _Q15, v740, 1), _Q13, v739, 1), _Q31, v744, 1);
  v700 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v477, _Q14, v779.f64[0]), _Q15, v775.f64[0]), _Q13, v774.f64[0]), _Q31, v777.f64[0]);
  v701 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(_Q19, _Q14, v779, 1), _Q15, v775, 1), _Q13, v774, 1), _Q31, v777, 1);
  v707 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v481, _Q14, v823.f64[0]), _Q15, v822.f64[0]), _Q13, v797.f64[0]), _Q31, v819.f64[0]);
  v702 = vmlaq_n_f64(vmlaq_n_f64(v487, _Q13, v816.f64[0]), _Q31, v776.f64[0]);
  v703 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v482, _Q14, v823, 1), _Q15, v822, 1), _Q13, v797, 1), _Q31, v819, 1);
  v704 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(_Q7, _Q14, v796, 1), _Q15, v795, 1), _Q13, v816, 1), _Q31, v776, 1);
  v706 = vmlaq_n_f64(v490, _Q31, v799);
  _Q30 = *(float64x2_t *)(a1 + 168);
  _Q28 = *(float64x2_t *)(a1 + 48);
  _Q24.f64[0] = *(float64_t *)(a1 + 248);
  __asm { FMLA            D0, D24, V30.D[1] }
  _Q26 = v733;
  _Q1 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q28, _Q28.f64[0]), _Q30, _Q30.f64[0]), _Q26, _Q26.f64[0]);
  _Q7.f64[0] = *(float64_t *)(a1 + 368);
  __asm { FMLA            D27, D7, V26.D[1] }
  _Q17 = *(float64x2_t *)(a1 + 408);
  _Q3.f64[0] = *(float64_t *)(a1 + 488);
  v497 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(_Q28, _Q28, 1), _Q30, _Q30, 1), _Q26, _Q26, 1), _Q17, _Q17, 1);
  __asm { FMLA            D27, D3, V17.D[1] }
  _Q26 = *(float64x2_t *)(a1 + 528);
  _Q4.f64[0] = *(float64_t *)(a1 + 608);
  __asm { FMLA            D27, D4, V26.D[1] }
  _Q29 = *(float64x2_t *)(a1 + 648);
  _Q2.f64[0] = *(float64_t *)(a1 + 728);
  __asm { FMLA            D27, D2, V29.D[1] }
  _Q20 = *(float64x2_t *)(a1 + 768);
  v501 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(_Q1, _Q17, _Q17.f64[0]), _Q26, _Q26.f64[0]), _Q29, _Q29.f64[0]), _Q20, _Q20.f64[0]);
  _Q7.f64[0] = *(float64_t *)(a1 + 848);
  v502 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v497, _Q26, _Q26, 1), _Q29, _Q29, 1), _Q20, _Q20, 1);
  __asm { FMLA            D19, D7, V20.D[1] }
  _Q20 = *(float64x2_t *)(a1 + 888);
  _Q18.f64[0] = v801;
  __asm { FMLA            D19, D18, V20.D[1] }
  _Q0 = *(float64x2_t *)(a1 + 1008);
  _Q5.f64[0] = *(float64_t *)(a1 + 1088);
  __asm { FMLA            D19, D5, V0.D[1] }
  _Q5 = *(float64x2_t *)(a1 + 1128);
  _Q2.f64[0] = *(float64_t *)(a1 + 1208);
  __asm { FMLA            D31, D2, V5.D[1] }
  _Q4 = *(float64x2_t *)(a1 + 1248);
  _Q3.f64[0] = *(float64_t *)(a1 + 1328);
  __asm { FMLA            D28, D3, V4.D[1] }
  _Q30 = *(float64x2_t *)(a1 + 1368);
  v508 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v501, _Q20, _Q20.f64[0]), _Q0, _Q0.f64[0]), _Q5, _Q5.f64[0]), _Q4, _Q4.f64[0]), _Q30, _Q30.f64[0]);
  _Q2.f64[0] = *(float64_t *)(a1 + 1448);
  v509 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v502, _Q20, _Q20, 1), _Q0, _Q0, 1), _Q5, _Q5, 1), _Q4, _Q4, 1), _Q30, _Q30, 1);
  __asm { FMLA            D28, D2, V30.D[1] }
  _Q30 = *(float64x2_t *)(a1 + 1488);
  v511 = vmlaq_n_f64(v508, _Q30, _Q30.f64[0]);
  _Q1.f64[0] = *(float64_t *)(a1 + 1568);
  v512 = vmlaq_laneq_f64(v509, _Q30, _Q30, 1);
  __asm { FMLA            D28, D1, V30.D[1] }
  _Q30 = *(float64x2_t *)(a1 + 1608);
  _Q19 = vmlaq_n_f64(v511, _Q30, _Q30.f64[0]);
  _Q0.f64[0] = *(float64_t *)(a1 + 1688);
  v515 = vmlaq_laneq_f64(v512, _Q30, _Q30, 1);
  v516 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v772, v737, 1), v771, v735, 1), v757, v733, 1), v756, v731, 1), v755,
                             v729,
                             1),
                           v753,
                           v727,
                           1),
                         v751,
                         v725,
                         1),
                       v749,
                       v723,
                       1),
                     v747,
                     v721,
                     1),
                   v746,
                   v719,
                   1),
                 v745,
                 v712,
                 1),
               v742,
               v714,
               1),
             v740,
             v717,
             1),
           v739,
           v716,
           1);
  v517 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v792, v737, 1), v770, v735, 1), v789, v733, 1), v788, v731, 1), v787,
                             v729,
                             1),
                           v786,
                           v727,
                           1),
                         v784,
                         v725,
                         1),
                       v783,
                       v723,
                       1),
                     v782,
                     v721,
                     1),
                   v780,
                   v719,
                   1),
                 v778,
                 v712,
                 1),
               v779,
               v714,
               1),
             v775,
             v717,
             1),
           v774,
           v716,
           1);
  v518 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v791, v737, 1), v790, v735, 1), v806, v733, 1), v805, v731, 1), v804,
                             v729,
                             1),
                           v785,
                           v727,
                           1),
                         v803,
                         v725,
                         1),
                       v802,
                       v723,
                       1),
                     v781,
                     v721,
                     1),
                   v800,
                   v719,
                   1),
                 v798,
                 v712,
                 1),
               v796,
               v714,
               1),
             v795,
             v717,
             1),
           v816,
           v716,
           1);
  v519 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v793, v737, 1), v794, v735, 1), v839, v733, 1), v837, v731, 1), v835,
                             v729,
                             1),
                           v833,
                           v727,
                           1),
                         v831,
                         v725,
                         1),
                       v829,
                       v723,
                       1),
                     v828,
                     v721,
                     1),
                   v825,
                   v719,
                   1),
                 v821,
                 v712,
                 1),
               v823,
               v714,
               1),
             v822,
             v717,
             1),
           v797,
           v716,
           1);
  __asm { FMLA            D28, D0, V30.D[1] }
  _Q24 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v737, v772.f64[0]), v735, v771.f64[0]), v733, v757.f64[0]), v731, v756.f64[0]), v729, v755.f64[0]), v727,
                           v753.f64[0]),
                         v725,
                         v751.f64[0]),
                       v723,
                       v749.f64[0]),
                     v721,
                     v747.f64[0]),
                   v719,
                   v746.f64[0]),
                 v712,
                 v745.f64[0]),
               v714,
               v742.f64[0]),
             v717,
             v740.f64[0]),
           v716,
           v739.f64[0]);
  _Q16 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v737, v772, 1), v735, v771, 1), v733, v757, 1), v731, v756, 1), v729,
                             v755,
                             1),
                           v727,
                           v753,
                           1),
                         v725,
                         v751,
                         1),
                       v723,
                       v749,
                       1),
                     v721,
                     v747,
                     1),
                   v719,
                   v746,
                   1),
                 v712,
                 v745,
                 1),
               v714,
               v742,
               1),
             v717,
             v740,
             1),
           v716,
           v739,
           1);
  v522 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v737, v792.f64[0]), v735, v770.f64[0]), v733, v789.f64[0]), v731, v788.f64[0]), v729, v787.f64[0]), v727,
                           v786.f64[0]),
                         v725,
                         v784.f64[0]),
                       v723,
                       v783.f64[0]),
                     v721,
                     v782.f64[0]),
                   v719,
                   v780.f64[0]),
                 v712,
                 v778.f64[0]),
               v714,
               v779.f64[0]),
             v717,
             v775.f64[0]),
           v716,
           v774.f64[0]);
  v523 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v737, v792, 1), v735, v770, 1), v733, v789, 1), v731, v788, 1), v729,
                             v787,
                             1),
                           v727,
                           v786,
                           1),
                         v725,
                         v784,
                         1),
                       v723,
                       v783,
                       1),
                     v721,
                     v782,
                     1),
                   v719,
                   v780,
                   1),
                 v712,
                 v778,
                 1),
               v714,
               v779,
               1),
             v717,
             v775,
             1),
           v716,
           v774,
           1);
  _Q12 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v737, v791.f64[0]), v735, v790.f64[0]), v733, v806.f64[0]), v731, v805.f64[0]), v729, v804.f64[0]), v727,
                           v785.f64[0]),
                         v725,
                         v803.f64[0]),
                       v723,
                       v802.f64[0]),
                     v721,
                     v781.f64[0]),
                   v719,
                   v800.f64[0]),
                 v712,
                 v798.f64[0]),
               v714,
               v796.f64[0]),
             v717,
             v795.f64[0]),
           v716,
           v816.f64[0]);
  v525 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v737, v791, 1), v735, v790, 1), v733, v806, 1), v731, v805, 1), v729,
                             v804,
                             1),
                           v727,
                           v785,
                           1),
                         v725,
                         v803,
                         1),
                       v723,
                       v802,
                       1),
                     v721,
                     v781,
                     1),
                   v719,
                   v800,
                   1),
                 v712,
                 v798,
                 1),
               v714,
               v796,
               1),
             v717,
             v795,
             1),
           v716,
           v816,
           1);
  v526 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v737, v793.f64[0]), v735, v794.f64[0]), v733, v839.f64[0]), v731, v837.f64[0]), v729, v835.f64[0]), v727,
                           v833.f64[0]),
                         v725,
                         v831.f64[0]),
                       v723,
                       v829.f64[0]),
                     v721,
                     v828.f64[0]),
                   v719,
                   v825.f64[0]),
                 v712,
                 v821.f64[0]),
               v714,
               v823.f64[0]),
             v717,
             v822.f64[0]),
           v716,
           v797.f64[0]);
  v527 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v737, v793, 1), v735, v794, 1), v733, v839, 1), v731, v837, 1), v729,
                             v835,
                             1),
                           v727,
                           v833,
                           1),
                         v725,
                         v831,
                         1),
                       v723,
                       v829,
                       1),
                     v721,
                     v828,
                     1),
                   v719,
                   v825,
                   1),
                 v712,
                 v821,
                 1),
               v714,
               v823,
               1),
             v717,
             v822,
             1),
           v716,
           v797,
           1);
  v528 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v737, v814.f64[0]), v735, v815), v733, v838), v731, v836), v729, v834), v727, v832), v725, v830),
                       v723,
                       v801),
                     v721,
                     v827),
                   v719,
                   v824),
                 v712,
                 v820),
               v714,
               v818),
             v717,
             v817),
           v716,
           v826);
  _Q30 = *(float64x2_t *)(a1 + 1728);
  _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v772, v737.f64[0]), v771, v735.f64[0]), v757, v733.f64[0]), v756, v731.f64[0]), v755, v729.f64[0]),
                             v753,
                             v727.f64[0]),
                           v751,
                           v725.f64[0]),
                         v749,
                         v723.f64[0]),
                       v747,
                       v721.f64[0]),
                     v746,
                     v719.f64[0]),
                   v745,
                   v712.f64[0]),
                 v742,
                 v714.f64[0]),
               v740,
               v717.f64[0]),
             v739,
             v716.f64[0]),
           v744,
           v711.f64[0]);
  v531 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v792, v737.f64[0]), v770, v735.f64[0]), v789, v733.f64[0]), v788, v731.f64[0]), v787, v729.f64[0]),
                             v786,
                             v727.f64[0]),
                           v784,
                           v725.f64[0]),
                         v783,
                         v723.f64[0]),
                       v782,
                       v721.f64[0]),
                     v780,
                     v719.f64[0]),
                   v778,
                   v712.f64[0]),
                 v779,
                 v714.f64[0]),
               v775,
               v717.f64[0]),
             v774,
             v716.f64[0]),
           v777,
           v711.f64[0]);
  v684 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v793, v737.f64[0]), v794, v735.f64[0]), v839, v733.f64[0]), v837, v731.f64[0]), v835, v729.f64[0]),
                             v833,
                             v727.f64[0]),
                           v831,
                           v725.f64[0]),
                         v829,
                         v723.f64[0]),
                       v828,
                       v721.f64[0]),
                     v825,
                     v719.f64[0]),
                   v821,
                   v712.f64[0]),
                 v823,
                 v714.f64[0]),
               v822,
               v717.f64[0]),
             v797,
             v716.f64[0]),
           v819,
           v711.f64[0]);
  v685 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v791, v737.f64[0]), v790, v735.f64[0]), v806, v733.f64[0]), v805, v731.f64[0]), v804, v729.f64[0]),
                             v785,
                             v727.f64[0]),
                           v803,
                           v725.f64[0]),
                         v802,
                         v723.f64[0]),
                       v781,
                       v721.f64[0]),
                     v800,
                     v719.f64[0]),
                   v798,
                   v712.f64[0]),
                 v796,
                 v714.f64[0]),
               v795,
               v717.f64[0]),
             v816,
             v716.f64[0]),
           v776,
           v711.f64[0]);
  _Q0.f64[0] = *(float64_t *)(a1 + 1808);
  v716.f64[0] = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(v814.f64[0] * v737.f64[0], v815, v735.f64[0]), v838, v733.f64[0]), v836, v731.f64[0]), v834, v729.f64[0]),
                                    v832,
                                    v727.f64[0]),
                                  v830,
                                  v725.f64[0]),
                                v801,
                                v723.f64[0]),
                              v827,
                              v721.f64[0]),
                            v824,
                            v719.f64[0]),
                          v820,
                          v712.f64[0]),
                        v818,
                        v714.f64[0]),
                      v817,
                      v717.f64[0]),
                    v826,
                    v716.f64[0]),
                  v799,
                  v711.f64[0]);
  v718 = vmlaq_laneq_f64(v516, v744, v711, 1);
  v713 = vmlaq_n_f64(_Q19, _Q30, _Q30.f64[0]);
  v715 = vmlaq_laneq_f64(v517, v777, v711, 1);
  v689 = _Q17;
  v690 = vmlaq_laneq_f64(v518, v776, v711, 1);
  v687 = v531;
  v688 = vmlaq_laneq_f64(v519, v819, v711, 1);
  __asm { FMLA            D28, D0, V30.D[1] }
  v686 = _Q28.f64[0];
  v720 = vmlaq_n_f64(_Q24, v711, v744.f64[0]);
  v722 = vmlaq_laneq_f64(v515, _Q30, _Q30, 1);
  v724 = vmlaq_laneq_f64(_Q16, v711, v744, 1);
  v726 = vmlaq_n_f64(v522, v711, v777.f64[0]);
  v728 = vmlaq_laneq_f64(v523, v711, v777, 1);
  v730 = vmlaq_n_f64(_Q12, v711, v776.f64[0]);
  v732 = vmlaq_laneq_f64(v525, v711, v776, 1);
  v734 = vmlaq_n_f64(v526, v711, v819.f64[0]);
  v736 = vmlaq_laneq_f64(v527, v711, v819, 1);
  v738 = vmlaq_n_f64(v528, v711, v799);
  _Q3 = *(float64x2_t *)(a1 + 184);
  v532 = *(float64x2_t *)(a1 + 64);
  _Q6 = *(float64x2_t *)(a1 + 200);
  v535 = v793;
  _Q24.f64[0] = *(float64_t *)(a1 + 248);
  v536 = vmlaq_laneq_f64(vmulq_laneq_f64(v532, v532, 1), _Q3, _Q3, 1);
  __asm { FMLA            D12, D24, V3.D[1] }
  _Q0 = *(float64x2_t *)(a1 + 304);
  _Q1 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v532, v532.f64[0]), _Q3, _Q3.f64[0]), _Q0, _Q0.f64[0]);
  _Q19.f64[0] = *(float64_t *)(a1 + 368);
  __asm { FMLA            D12, D19, V0.D[1] }
  _Q3 = *(float64x2_t *)(a1 + 424);
  v540 = vmlaq_n_f64(_Q1, _Q3, _Q3.f64[0]);
  _Q1.f64[0] = *(float64_t *)(a1 + 488);
  v541 = vmlaq_laneq_f64(vmlaq_laneq_f64(v536, _Q0, _Q0, 1), _Q3, _Q3, 1);
  __asm { FMLA            D12, D1, V3.D[1] }
  _Q20 = *(float64x2_t *)(a1 + 544);
  _Q3.f64[0] = *(float64_t *)(a1 + 608);
  __asm { FMLA            D12, D3, V20.D[1] }
  _Q3 = *(float64x2_t *)(a1 + 664);
  _Q1.f64[0] = *(float64_t *)(a1 + 728);
  v544 = vmlaq_laneq_f64(vmlaq_laneq_f64(v541, _Q20, _Q20, 1), _Q3, _Q3, 1);
  __asm { FMLA            D12, D1, V3.D[1] }
  _Q22 = *(float64x2_t *)(a1 + 784);
  v546 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v540, _Q20, _Q20.f64[0]), _Q3, _Q3.f64[0]), _Q22, _Q22.f64[0]);
  _Q3.f64[0] = *(float64_t *)(a1 + 848);
  v547 = vmlaq_laneq_f64(v544, _Q22, _Q22, 1);
  __asm { FMLA            D12, D3, V22.D[1] }
  _Q22 = *(float64x2_t *)(a1 + 904);
  _Q3.f64[0] = v801;
  v549 = vmlaq_laneq_f64(v547, _Q22, _Q22, 1);
  __asm { FMLA            D12, D3, V22.D[1] }
  _Q18 = *(float64x2_t *)(a1 + 1024);
  v551 = vmlaq_n_f64(vmlaq_n_f64(v546, _Q22, _Q22.f64[0]), _Q18, _Q18.f64[0]);
  _Q1.f64[0] = *(float64_t *)(a1 + 1088);
  v552 = vmlaq_laneq_f64(v549, _Q18, _Q18, 1);
  __asm { FMLA            D12, D1, V18.D[1] }
  _Q18 = *(float64x2_t *)(a1 + 1144);
  v554 = vmlaq_n_f64(v551, _Q18, _Q18.f64[0]);
  _Q2.f64[0] = *(float64_t *)(a1 + 1208);
  v555 = vmlaq_laneq_f64(v552, _Q18, _Q18, 1);
  __asm { FMLA            D12, D2, V18.D[1] }
  _Q18 = *(float64x2_t *)(a1 + 1264);
  v557 = vmlaq_n_f64(v554, _Q18, _Q18.f64[0]);
  _Q1.f64[0] = *(float64_t *)(a1 + 1328);
  v558 = vmlaq_laneq_f64(v555, _Q18, _Q18, 1);
  __asm { FMLA            D12, D1, V18.D[1] }
  _Q18 = *(float64x2_t *)(a1 + 1384);
  v560 = vmlaq_n_f64(v557, _Q18, _Q18.f64[0]);
  _Q1.f64[0] = *(float64_t *)(a1 + 1448);
  v561 = vmlaq_laneq_f64(v558, _Q18, _Q18, 1);
  __asm { FMLA            D12, D1, V18.D[1] }
  _Q18 = *(float64x2_t *)(a1 + 1504);
  _Q1.f64[0] = *(float64_t *)(a1 + 1568);
  __asm { FMLA            D12, D1, V18.D[1] }
  _Q3 = *(float64x2_t *)(a1 + 1624);
  _Q22 = vmlaq_n_f64(vmlaq_n_f64(v560, _Q18, _Q18.f64[0]), _Q3, _Q3.f64[0]);
  _Q13 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v791, v772.f64[0]), v790, v771.f64[0]), v806, v757.f64[0]), v805, v756.f64[0]), v804, v755.f64[0]), v785,
                           v753.f64[0]),
                         v803,
                         v751.f64[0]),
                       v802,
                       v749.f64[0]),
                     v781,
                     v747.f64[0]),
                   v800,
                   v746.f64[0]),
                 v798,
                 v745.f64[0]),
               v796,
               v742.f64[0]),
             v795,
             v740.f64[0]),
           v816,
           v739.f64[0]);
  _Q11 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v793, v772.f64[0]), v794, v771.f64[0]), v839, v757.f64[0]), v837, v756.f64[0]), v835, v755.f64[0]), v833,
                           v753.f64[0]),
                         v831,
                         v751.f64[0]),
                       v829,
                       v749.f64[0]),
                     v828,
                     v747.f64[0]),
                   v825,
                   v746.f64[0]),
                 v821,
                 v745.f64[0]),
               v823,
               v742.f64[0]),
             v822,
             v740.f64[0]),
           v797,
           v739.f64[0]);
  _Q2.f64[0] = *(float64_t *)(a1 + 1688);
  _Q9.f64[0] = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(v814.f64[0] * v772.f64[0], v815, v771.f64[0]), v838, v757.f64[0]), v836, v756.f64[0]), v834, v755.f64[0]), v832,
                                 v753.f64[0]),
                               v830,
                               v751.f64[0]),
                             v801,
                             v749.f64[0]),
                           v827,
                           v747.f64[0]),
                         v824,
                         v746.f64[0]),
                       v820,
                       v745.f64[0]),
                     v818,
                     v742.f64[0]),
                   v817,
                   v740.f64[0]),
                 v826,
                 v739.f64[0]);
  v567 = vmlaq_laneq_f64(vmlaq_laneq_f64(v561, _Q18, _Q18, 1), _Q3, _Q3, 1);
  v568 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v792, v772, 1), v770, v771, 1), v789, v757, 1), v788, v756, 1), v787,
                             v755,
                             1),
                           v786,
                           v753,
                           1),
                         v784,
                         v751,
                         1),
                       v783,
                       v749,
                       1),
                     v782,
                     v747,
                     1),
                   v780,
                   v746,
                   1),
                 v778,
                 v745,
                 1),
               v779,
               v742,
               1),
             v775,
             v740,
             1),
           v774,
           v739,
           1);
  v569 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v791, v772, 1), v790, v771, 1), v806, v757, 1), v805, v756, 1), v804,
                             v755,
                             1),
                           v785,
                           v753,
                           1),
                         v803,
                         v751,
                         1),
                       v802,
                       v749,
                       1),
                     v781,
                     v747,
                     1),
                   v800,
                   v746,
                   1),
                 v798,
                 v745,
                 1),
               v796,
               v742,
               1),
             v795,
             v740,
             1),
           v816,
           v739,
           1);
  v570 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v793, v772, 1), v794, v771, 1), v839, v757, 1), v837, v756, 1), v835,
                             v755,
                             1),
                           v833,
                           v753,
                           1),
                         v831,
                         v751,
                         1),
                       v829,
                       v749,
                       1),
                     v828,
                     v747,
                     1),
                   v825,
                   v746,
                   1),
                 v821,
                 v745,
                 1),
               v823,
               v742,
               1),
             v822,
             v740,
             1),
           v797,
           v739,
           1);
  __asm { FMLA            D12, D2, V3.D[1] }
  v571 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v772, v792.f64[0]), v771, v770.f64[0]), v757, v789.f64[0]), v756, v788.f64[0]), v755, v787.f64[0]), v753,
                           v786.f64[0]),
                         v751,
                         v784.f64[0]),
                       v749,
                       v783.f64[0]),
                     v747,
                     v782.f64[0]),
                   v746,
                   v780.f64[0]),
                 v745,
                 v778.f64[0]),
               v742,
               v779.f64[0]),
             v740,
             v775.f64[0]),
           v739,
           v774.f64[0]);
  v572 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v772, v792, 1), v771, v770, 1), v757, v789, 1), v756, v788, 1), v755,
                             v787,
                             1),
                           v753,
                           v786,
                           1),
                         v751,
                         v784,
                         1),
                       v749,
                       v783,
                       1),
                     v747,
                     v782,
                     1),
                   v746,
                   v780,
                   1),
                 v745,
                 v778,
                 1),
               v742,
               v779,
               1),
             v740,
             v775,
             1),
           v739,
           v774,
           1);
  v573 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v772, v791.f64[0]), v771, v790.f64[0]), v757, v806.f64[0]), v756, v805.f64[0]), v755, v804.f64[0]), v753,
                           v785.f64[0]),
                         v751,
                         v803.f64[0]),
                       v749,
                       v802.f64[0]),
                     v747,
                     v781.f64[0]),
                   v746,
                   v800.f64[0]),
                 v745,
                 v798.f64[0]),
               v742,
               v796.f64[0]),
             v740,
             v795.f64[0]),
           v739,
           v816.f64[0]);
  v574 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v772, v791, 1), v771, v790, 1), v757, v806, 1), v756, v805, 1), v755,
                             v804,
                             1),
                           v753,
                           v785,
                           1),
                         v751,
                         v803,
                         1),
                       v749,
                       v802,
                       1),
                     v747,
                     v781,
                     1),
                   v746,
                   v800,
                   1),
                 v745,
                 v798,
                 1),
               v742,
               v796,
               1),
             v740,
             v795,
             1),
           v739,
           v816,
           1);
  v575 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v772, v793.f64[0]), v771, v794.f64[0]), v757, v839.f64[0]), v756, v837.f64[0]), v755, v835.f64[0]), v753,
                           v833.f64[0]),
                         v751,
                         v831.f64[0]),
                       v749,
                       v829.f64[0]),
                     v747,
                     v828.f64[0]),
                   v746,
                   v825.f64[0]),
                 v745,
                 v821.f64[0]),
               v742,
               v823.f64[0]),
             v740,
             v822.f64[0]),
           v739,
           v797.f64[0]);
  v576 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v772, v793, 1), v771, v794, 1), v757, v839, 1), v756, v837, 1), v755,
                             v835,
                             1),
                           v753,
                           v833,
                           1),
                         v751,
                         v831,
                         1),
                       v749,
                       v829,
                       1),
                     v747,
                     v828,
                     1),
                   v746,
                   v825,
                   1),
                 v745,
                 v821,
                 1),
               v742,
               v823,
               1),
             v740,
             v822,
             1),
           v739,
           v797,
           1);
  v577 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v772, v814.f64[0]), v771, v815), v757, v838), v756, v836), v755, v834), v753, v832), v751, v830),
                       v749,
                       v801),
                     v747,
                     v827),
                   v746,
                   v824),
                 v745,
                 v820),
               v742,
               v818),
             v740,
             v817),
           v739,
           v826);
  _Q3 = *(float64x2_t *)(a1 + 1744);
  v741 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v792, v772.f64[0]), v770, v771.f64[0]), v789, v757.f64[0]), v788, v756.f64[0]), v787, v755.f64[0]),
                             v786,
                             v753.f64[0]),
                           v784,
                           v751.f64[0]),
                         v783,
                         v749.f64[0]),
                       v782,
                       v747.f64[0]),
                     v780,
                     v746.f64[0]),
                   v778,
                   v745.f64[0]),
                 v779,
                 v742.f64[0]),
               v775,
               v740.f64[0]),
             v774,
             v739.f64[0]),
           v777,
           v744.f64[0]);
  v743 = vmlaq_n_f64(_Q22, _Q3, _Q3.f64[0]);
  _Q16.f64[0] = *(float64_t *)(a1 + 1808);
  v748 = vmlaq_laneq_f64(v568, v777, v744, 1);
  v750 = vmlaq_laneq_f64(v567, _Q3, _Q3, 1);
  __asm { FMLA            D12, D16, V3.D[1] }
  v752 = vmlaq_n_f64(v571, v744, v777.f64[0]);
  v754 = vmlaq_laneq_f64(v572, v744, v777, 1);
  v773 = vmlaq_n_f64(v577, v744, v799);
  _Q5 = *(float64x2_t *)(a1 + 80);
  v580 = vmlaq_n_f64(vmulq_n_f64(_Q5, _Q5.f64[0]), _Q6, _Q6.f64[0]);
  _Q1.f64[0] = _Q24.f64[0];
  v581 = vmlaq_laneq_f64(vmulq_laneq_f64(_Q5, _Q5, 1), _Q6, _Q6, 1);
  __asm { FMLA            D24, D1, V6.D[1] }
  v582 = *(float64x2_t *)(a1 + 96);
  _Q1 = *(float64x2_t *)(a1 + 216);
  _Q6 = *(float64x2_t *)(a1 + 320);
  v585 = vmlaq_n_f64(v580, _Q6, _Q6.f64[0]);
  _Q3.f64[0] = _Q19.f64[0];
  v586 = vmlaq_laneq_f64(v581, _Q6, _Q6, 1);
  __asm { FMLA            D24, D3, V6.D[1] }
  _Q6 = *(float64x2_t *)(a1 + 440);
  _Q5.f64[0] = *(float64_t *)(a1 + 488);
  __asm { FMLA            D24, D5, V6.D[1] }
  _Q3 = *(float64x2_t *)(a1 + 560);
  v589 = vmlaq_n_f64(vmlaq_n_f64(v585, _Q6, _Q6.f64[0]), _Q3, _Q3.f64[0]);
  _Q5.f64[0] = *(float64_t *)(a1 + 608);
  v590 = vmlaq_laneq_f64(vmlaq_laneq_f64(v586, _Q6, _Q6, 1), _Q3, _Q3, 1);
  __asm { FMLA            D24, D5, V3.D[1] }
  _Q6 = *(float64x2_t *)(a1 + 680);
  v592 = vmlaq_n_f64(v589, _Q6, _Q6.f64[0]);
  _Q5.f64[0] = *(float64_t *)(a1 + 728);
  v593 = vmlaq_laneq_f64(v590, _Q6, _Q6, 1);
  __asm { FMLA            D24, D5, V6.D[1] }
  _Q6 = *(float64x2_t *)(a1 + 800);
  v595 = vmlaq_n_f64(v592, _Q6, _Q6.f64[0]);
  _Q5.f64[0] = *(float64_t *)(a1 + 848);
  v596 = vmlaq_laneq_f64(v593, _Q6, _Q6, 1);
  __asm { FMLA            D24, D5, V6.D[1] }
  _Q6 = *(float64x2_t *)(a1 + 920);
  v598 = vmlaq_n_f64(v595, _Q6, _Q6.f64[0]);
  _Q2.f64[0] = v801;
  v599 = vmlaq_laneq_f64(v596, _Q6, _Q6, 1);
  __asm { FMLA            D24, D2, V6.D[1] }
  _Q3.f64[0] = v801;
  _Q6 = *(float64x2_t *)(a1 + 1040);
  v601 = vmlaq_n_f64(v598, _Q6, _Q6.f64[0]);
  _Q5.f64[0] = *(float64_t *)(a1 + 1088);
  v602 = vmlaq_laneq_f64(v599, _Q6, _Q6, 1);
  __asm { FMLA            D24, D5, V6.D[1] }
  _Q6 = *(float64x2_t *)(a1 + 1160);
  v604 = vmlaq_n_f64(v601, _Q6, _Q6.f64[0]);
  _Q5.f64[0] = *(float64_t *)(a1 + 1208);
  v605 = vmlaq_laneq_f64(v602, _Q6, _Q6, 1);
  __asm { FMLA            D24, D5, V6.D[1] }
  _Q6 = *(float64x2_t *)(a1 + 1280);
  _Q5.f64[0] = *(float64_t *)(a1 + 1328);
  __asm { FMLA            D24, D5, V6.D[1] }
  _Q7 = *(float64x2_t *)(a1 + 1400);
  v608 = vmlaq_n_f64(vmlaq_n_f64(v604, _Q6, _Q6.f64[0]), _Q7, _Q7.f64[0]);
  _Q5.f64[0] = *(float64_t *)(a1 + 1448);
  v609 = vmlaq_laneq_f64(vmlaq_laneq_f64(v605, _Q6, _Q6, 1), _Q7, _Q7, 1);
  __asm { FMLA            D24, D5, V7.D[1] }
  _Q7 = *(float64x2_t *)(a1 + 1520);
  v611 = vmlaq_n_f64(v608, _Q7, _Q7.f64[0]);
  _Q5.f64[0] = *(float64_t *)(a1 + 1568);
  v612 = vmlaq_laneq_f64(v609, _Q7, _Q7, 1);
  __asm { FMLA            D24, D5, V7.D[1] }
  _Q7 = *(float64x2_t *)(a1 + 1640);
  v614 = vmlaq_n_f64(v611, _Q7, _Q7.f64[0]);
  _Q2.f64[0] = *(float64_t *)(a1 + 1688);
  v615 = vmlaq_laneq_f64(v612, _Q7, _Q7, 1);
  __asm { FMLA            D24, D2, V7.D[1] }
  _Q7 = *(float64x2_t *)(a1 + 1760);
  __asm { FMLA            D24, D16, V7.D[1] }
  v617 = vmlaq_n_f64(vmulq_n_f64(v582, v582.f64[0]), _Q1, _Q1.f64[0]);
  _Q14 = v794;
  _Q5.f64[0] = *(float64_t *)(a1 + 248);
  v619 = vmlaq_laneq_f64(vmulq_laneq_f64(v582, v582, 1), _Q1, _Q1, 1);
  __asm { FMLA            D17, D5, V1.D[1] }
  _Q0 = *(float64x2_t *)(a1 + 336);
  _Q2.f64[0] = _Q19.f64[0];
  v621 = vmlaq_laneq_f64(v619, _Q0, _Q0, 1);
  __asm { FMLA            D17, D2, V0.D[1] }
  _Q2 = *(float64x2_t *)(a1 + 456);
  v623 = vmlaq_n_f64(vmlaq_n_f64(v617, _Q0, _Q0.f64[0]), _Q2, _Q2.f64[0]);
  _Q0.f64[0] = *(float64_t *)(a1 + 488);
  v624 = vmlaq_laneq_f64(v621, _Q2, _Q2, 1);
  __asm { FMLA            D17, D0, V2.D[1] }
  _Q2 = *(float64x2_t *)(a1 + 576);
  v626 = vmlaq_n_f64(v623, _Q2, _Q2.f64[0]);
  _Q0.f64[0] = *(float64_t *)(a1 + 608);
  v627 = vmlaq_laneq_f64(v624, _Q2, _Q2, 1);
  __asm { FMLA            D17, D0, V2.D[1] }
  _Q2 = *(float64x2_t *)(a1 + 696);
  v629 = vmlaq_n_f64(v626, _Q2, _Q2.f64[0]);
  _Q0.f64[0] = *(float64_t *)(a1 + 728);
  v630 = vmlaq_laneq_f64(v627, _Q2, _Q2, 1);
  __asm { FMLA            D17, D0, V2.D[1] }
  _Q2 = *(float64x2_t *)(a1 + 816);
  v632 = vmlaq_n_f64(v629, _Q2, _Q2.f64[0]);
  _Q0.f64[0] = *(float64_t *)(a1 + 848);
  v633 = vmlaq_laneq_f64(v630, _Q2, _Q2, 1);
  __asm { FMLA            D17, D0, V2.D[1] }
  _Q2 = *(float64x2_t *)(a1 + 936);
  v635 = vmlaq_n_f64(v632, _Q2, _Q2.f64[0]);
  v636 = vmlaq_laneq_f64(v633, _Q2, _Q2, 1);
  __asm { FMLA            D17, D3, V2.D[1] }
  _Q2 = *(float64x2_t *)(a1 + 1056);
  v638 = vmlaq_n_f64(v635, _Q2, _Q2.f64[0]);
  _Q0.f64[0] = *(float64_t *)(a1 + 1088);
  v639 = vmlaq_laneq_f64(v636, _Q2, _Q2, 1);
  __asm { FMLA            D17, D0, V2.D[1] }
  _Q2 = *(float64x2_t *)(a1 + 1176);
  v641 = vmlaq_n_f64(v638, _Q2, _Q2.f64[0]);
  _Q0.f64[0] = *(float64_t *)(a1 + 1208);
  v642 = vmlaq_laneq_f64(v639, _Q2, _Q2, 1);
  __asm { FMLA            D17, D0, V2.D[1] }
  _Q2 = *(float64x2_t *)(a1 + 1296);
  v644 = vmlaq_n_f64(v641, _Q2, _Q2.f64[0]);
  _Q0.f64[0] = *(float64_t *)(a1 + 1328);
  v645 = vmlaq_laneq_f64(v642, _Q2, _Q2, 1);
  __asm { FMLA            D17, D0, V2.D[1] }
  *(float64x2_t *)(a2 + 80) = v913;
  *(float64x2_t *)(a2 + 96) = v934;
  _Q2 = v796;
  v647 = vmlaq_n_f64(v644, _Q2, _Q2.f64[0]);
  _Q0.f64[0] = v818;
  v648 = vmlaq_laneq_f64(v645, _Q2, _Q2, 1);
  __asm { FMLA            D17, D0, V2.D[1] }
  *(float64x2_t *)(a2 + 48) = v953;
  *(float64x2_t *)(a2 + 64) = v980;
  *(float64x2_t *)(a2 + 16) = v968;
  *(float64x2_t *)(a2 + 32) = v769;
  *(float64x2_t *)a2 = v941;
  *(double *)(a2 + 112) = v870;
  *(float64_t *)(a2 + 232) = v807;
  *(float64x2_t *)(a2 + 216) = v810;
  *(float64x2_t *)(a2 + 200) = v888;
  *(float64x2_t *)(a2 + 184) = v901;
  _Q2 = v795;
  v650 = vmlaq_n_f64(v647, _Q2, _Q2.f64[0]);
  _Q0.f64[0] = v817;
  v651 = vmlaq_laneq_f64(v648, _Q2, _Q2, 1);
  __asm { FMLA            D17, D0, V2.D[1] }
  *(float64x2_t *)(a2 + 168) = v847;
  *(float64x2_t *)(a2 + 152) = v866;
  *(float64x2_t *)(a2 + 136) = v882;
  *(float64x2_t *)(a2 + 120) = v907;
  *(float64x2_t *)(a2 + 320) = v759;
  *(float64x2_t *)(a2 + 336) = v761;
  *(float64x2_t *)(a2 + 288) = v692;
  *(float64x2_t *)(a2 + 304) = v971;
  _Q2 = v816;
  v653 = vmlaq_n_f64(v650, _Q2, _Q2.f64[0]);
  _Q0.f64[0] = v826;
  v654 = vmlaq_laneq_f64(v651, _Q2, _Q2, 1);
  __asm { FMLA            D17, D0, V2.D[1] }
  *(float64x2_t *)(a2 + 256) = v691;
  *(float64x2_t *)(a2 + 272) = v876;
  *(float64x2_t *)(a2 + 240) = v855;
  *(double *)(a2 + 352) = v693;
  *(float64_t *)(a2 + 472) = v765;
  *(float64x2_t *)(a2 + 440) = v695;
  *(float64x2_t *)(a2 + 456) = v945;
  *(float64x2_t *)(a2 + 408) = v694;
  *(float64x2_t *)(a2 + 424) = v697;
  _Q2 = v776;
  v656 = vmlaq_n_f64(v653, _Q2, _Q2.f64[0]);
  _Q0.f64[0] = v799;
  v657 = vmlaq_laneq_f64(v654, _Q2, _Q2, 1);
  __asm { FMLA            D17, D0, V2.D[1] }
  *(float64x2_t *)(a2 + 376) = v859;
  *(float64x2_t *)(a2 + 392) = v696;
  *(float64x2_t *)(a2 + 360) = v961;
  *(float64x2_t *)(a2 + 560) = v685;
  *(float64x2_t *)(a2 + 576) = v684;
  *(float64x2_t *)(a2 + 528) = v689;
  *(float64x2_t *)(a2 + 544) = v687;
  *(float64x2_t *)(a2 + 496) = v698;
  *(float64x2_t *)(a2 + 512) = v713;
  *(float64x2_t *)(a2 + 480) = v843;
  __asm { FMLA            D2, D5, V14.D[1] }
  *(float64_t *)(a2 + 592) = v716.f64[0];
  *(float64_t *)(a2 + 712) = v686;
  *(float64x2_t *)(a2 + 680) = v690;
  *(float64x2_t *)(a2 + 696) = v688;
  *(float64x2_t *)(a2 + 664) = v715;
  _Q6 = v839;
  _Q5.f64[0] = v838;
  __asm { FMLA            D2, D5, V6.D[1] }
  *(float64x2_t *)(a2 + 632) = v722;
  *(float64x2_t *)(a2 + 648) = v718;
  *(float64x2_t *)(a2 + 600) = v851;
  *(float64x2_t *)(a2 + 616) = v764;
  *(float64x2_t *)(a2 + 800) = vmlaq_n_f64(_Q13, v776, v744.f64[0]);
  *(float64x2_t *)(a2 + 816) = vmlaq_n_f64(_Q11, v819, v744.f64[0]);
  _Q5 = v837;
  v660 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v535, v535.f64[0]), _Q14, _Q14.f64[0]), _Q6, _Q6.f64[0]), _Q5, _Q5.f64[0]);
  _Q11.f64[0] = v836;
  v661 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v535, v535, 1), _Q14, _Q14, 1), _Q6, _Q6, 1), _Q5, _Q5, 1);
  __asm { FMLA            D2, D11, V5.D[1] }
  *(float64x2_t *)(a2 + 768) = v743;
  *(float64x2_t *)(a2 + 784) = v741;
  _Q14 = v835;
  v663 = vmlaq_n_f64(v660, _Q14, _Q14.f64[0]);
  _Q13.f64[0] = v834;
  v664 = vmlaq_laneq_f64(v661, _Q14, _Q14, 1);
  __asm { FMLA            D2, D13, V14.D[1] }
  *(float64x2_t *)(a2 + 736) = v861;
  *(float64x2_t *)(a2 + 752) = v720;
  *(float64x2_t *)(a2 + 720) = v895;
  *(double *)(a2 + 832) = vmlad_n_f64(_Q9.f64[0], v799, v744.f64[0]);
  *(float64_t *)(a2 + 952) = _Q12.f64[0];
  _Q14 = v833;
  _Q12.f64[0] = v832;
  v666 = vmlaq_laneq_f64(v664, _Q14, _Q14, 1);
  __asm { FMLA            D2, D12, V14.D[1] }
  *(float64x2_t *)(a2 + 920) = vmlaq_laneq_f64(v569, v776, v744, 1);
  *(float64x2_t *)(a2 + 936) = vmlaq_laneq_f64(v570, v819, v744, 1);
  *(float64x2_t *)(a2 + 888) = v750;
  *(float64x2_t *)(a2 + 904) = v748;
  *(float64x2_t *)(a2 + 856) = v699;
  *(float64x2_t *)(a2 + 872) = v724;
  *(float64x2_t *)(a2 + 840) = v708;
  _Q15 = v831;
  v668 = vmlaq_n_f64(vmlaq_n_f64(v663, _Q14, _Q14.f64[0]), _Q15, _Q15.f64[0]);
  _Q14.f64[0] = v830;
  __asm { FMLA            D2, D14, V15.D[1] }
  *(float64x2_t *)(a2 + 1056) = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v793, v792.f64[0]), v794, v770.f64[0]), v839, v789.f64[0]), v837, v788.f64[0]), v835, v787.f64[0]),
                                                    v833,
                                                    v786.f64[0]),
                                                  v831,
                                                  v784.f64[0]),
                                                v829,
                                                v783.f64[0]),
                                              v828,
                                              v782.f64[0]),
                                            v825,
                                            v780.f64[0]),
                                          v821,
                                          v778.f64[0]),
                                        v823,
                                        v779.f64[0]),
                                      v822,
                                      v775.f64[0]),
                                    v797,
                                    v774.f64[0]),
                                  v819,
                                  v777.f64[0]);
  *(float64x2_t *)(a2 + 1040) = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v791, v792.f64[0]), v790, v770.f64[0]), v806, v789.f64[0]), v805, v788.f64[0]), v804, v787.f64[0]),
                                                    v785,
                                                    v786.f64[0]),
                                                  v803,
                                                  v784.f64[0]),
                                                v802,
                                                v783.f64[0]),
                                              v781,
                                              v782.f64[0]),
                                            v800,
                                            v780.f64[0]),
                                          v798,
                                          v778.f64[0]),
                                        v796,
                                        v779.f64[0]),
                                      v795,
                                      v775.f64[0]),
                                    v816,
                                    v774.f64[0]),
                                  v776,
                                  v777.f64[0]);
  *(float64x2_t *)(a2 + 1008) = v752;
  *(float64x2_t *)(a2 + 1024) = vmlaq_n_f64(v614, _Q7, _Q7.f64[0]);
  _Q23 = v829;
  _Q22.f64[0] = v801;
  v670 = vmlaq_laneq_f64(vmlaq_laneq_f64(v666, _Q15, _Q15, 1), _Q23, _Q23, 1);
  __asm { FMLA            D2, D22, V23.D[1] }
  *(float64x2_t *)(a2 + 976) = v700;
  *(float64x2_t *)(a2 + 992) = v726;
  *(float64x2_t *)(a2 + 960) = v709;
  *(double *)(a2 + 1072) = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(v814.f64[0] * v792.f64[0], v815, v770.f64[0]), v838, v789.f64[0]), v836, v788.f64[0]), v834, v787.f64[0]),
                                               v832,
                                               v786.f64[0]),
                                             v830,
                                             v784.f64[0]),
                                           v801,
                                           v783.f64[0]),
                                         v827,
                                         v782.f64[0]),
                                       v824,
                                       v780.f64[0]),
                                     v820,
                                     v778.f64[0]),
                                   v818,
                                   v779.f64[0]),
                                 v817,
                                 v775.f64[0]),
                               v826,
                               v774.f64[0]),
                             v799,
                             v777.f64[0]);
  *(float64_t *)(a2 + 1192) = _Q24.f64[0];
  *(float64x2_t *)(a2 + 1160) = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v791, v792, 1), v790, v770, 1), v806, v789, 1), v805, v788, 1),
                                                      v804,
                                                      v787,
                                                      1),
                                                    v785,
                                                    v786,
                                                    1),
                                                  v803,
                                                  v784,
                                                  1),
                                                v802,
                                                v783,
                                                1),
                                              v781,
                                              v782,
                                              1),
                                            v800,
                                            v780,
                                            1),
                                          v798,
                                          v778,
                                          1),
                                        v796,
                                        v779,
                                        1),
                                      v795,
                                      v775,
                                      1),
                                    v816,
                                    v774,
                                    1),
                                  v776,
                                  v777,
                                  1);
  *(float64x2_t *)(a2 + 1176) = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v793, v792, 1), v794, v770, 1), v839, v789, 1), v837, v788, 1),
                                                      v835,
                                                      v787,
                                                      1),
                                                    v833,
                                                    v786,
                                                    1),
                                                  v831,
                                                  v784,
                                                  1),
                                                v829,
                                                v783,
                                                1),
                                              v828,
                                              v782,
                                              1),
                                            v825,
                                            v780,
                                            1),
                                          v821,
                                          v778,
                                          1),
                                        v823,
                                        v779,
                                        1),
                                      v822,
                                      v775,
                                      1),
                                    v797,
                                    v774,
                                    1),
                                  v819,
                                  v777,
                                  1);
  _Q24 = v828;
  v672 = vmlaq_n_f64(vmlaq_n_f64(v668, _Q23, _Q23.f64[0]), _Q24, _Q24.f64[0]);
  _Q23.f64[0] = v827;
  v673 = vmlaq_laneq_f64(v670, _Q24, _Q24, 1);
  __asm { FMLA            D2, D23, V24.D[1] }
  *(float64x2_t *)(a2 + 1128) = v754;
  *(float64x2_t *)(a2 + 1144) = vmlaq_laneq_f64(v615, _Q7, _Q7, 1);
  _Q25 = v825;
  _Q24.f64[0] = v824;
  __asm { FMLA            D2, D24, V25.D[1] }
  *(float64x2_t *)(a2 + 1096) = v701;
  *(float64x2_t *)(a2 + 1112) = v728;
  *(float64x2_t *)(a2 + 1080) = v710;
  *(float64x2_t *)(a2 + 1296) = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v793, v791.f64[0]), v794, v790.f64[0]), v839, v806.f64[0]), v837, v805.f64[0]), v835, v804.f64[0]),
                                                    v833,
                                                    v785.f64[0]),
                                                  v831,
                                                  v803.f64[0]),
                                                v829,
                                                v802.f64[0]),
                                              v828,
                                              v781.f64[0]),
                                            v825,
                                            v800.f64[0]),
                                          v821,
                                          v798.f64[0]),
                                        v823,
                                        v796.f64[0]),
                                      v822,
                                      v795.f64[0]),
                                    v797,
                                    v816.f64[0]),
                                  v819,
                                  v776.f64[0]);
  *(float64x2_t *)(a2 + 1280) = v656;
  *(float64x2_t *)(a2 + 1264) = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v792, v791.f64[0]), v770, v790.f64[0]), v789, v806.f64[0]), v788, v805.f64[0]), v787, v804.f64[0]),
                                                    v786,
                                                    v785.f64[0]),
                                                  v784,
                                                  v803.f64[0]),
                                                v783,
                                                v802.f64[0]),
                                              v782,
                                              v781.f64[0]),
                                            v780,
                                            v800.f64[0]),
                                          v778,
                                          v798.f64[0]),
                                        v779,
                                        v796.f64[0]),
                                      v775,
                                      v795.f64[0]),
                                    v774,
                                    v816.f64[0]),
                                  v777,
                                  v776.f64[0]);
  *(float64x2_t *)(a2 + 1248) = vmlaq_n_f64(v573, v744, v776.f64[0]);
  _Q6 = v821;
  _Q5.f64[0] = v820;
  v676 = vmlaq_laneq_f64(vmlaq_laneq_f64(v673, _Q25, _Q25, 1), _Q6, _Q6, 1);
  __asm { FMLA            D2, D5, V6.D[1] }
  *(float64x2_t *)(a2 + 1232) = v730;
  *(float64x2_t *)(a2 + 1216) = v702;
  *(float64x2_t *)(a2 + 1200) = v767;
  *(double *)(a2 + 1312) = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(v814.f64[0] * v791.f64[0], v815, v790.f64[0]), v838, v806.f64[0]), v836, v805.f64[0]), v834, v804.f64[0]),
                                               v832,
                                               v785.f64[0]),
                                             v830,
                                             v803.f64[0]),
                                           v801,
                                           v802.f64[0]),
                                         v827,
                                         v781.f64[0]),
                                       v824,
                                       v800.f64[0]),
                                     v820,
                                     v798.f64[0]),
                                   v818,
                                   v796.f64[0]),
                                 v817,
                                 v795.f64[0]),
                               v826,
                               v816.f64[0]),
                             v799,
                             v776.f64[0]);
  *(float64_t *)(a2 + 1432) = _Q17.f64[0];
  _Q7 = v823;
  v678 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v672, _Q25, _Q25.f64[0]), _Q6, _Q6.f64[0]), _Q7, _Q7.f64[0]);
  _Q6.f64[0] = v818;
  v679 = vmlaq_laneq_f64(v676, _Q7, _Q7, 1);
  __asm { FMLA            D2, D6, V7.D[1] }
  *(float64x2_t *)(a2 + 1400) = v657;
  *(float64x2_t *)(a2 + 1416) = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v793, v791, 1), v794, v790, 1), v839, v806, 1), v837, v805, 1),
                                                      v835,
                                                      v804,
                                                      1),
                                                    v833,
                                                    v785,
                                                    1),
                                                  v831,
                                                  v803,
                                                  1),
                                                v829,
                                                v802,
                                                1),
                                              v828,
                                              v781,
                                              1),
                                            v825,
                                            v800,
                                            1),
                                          v821,
                                          v798,
                                          1),
                                        v823,
                                        v796,
                                        1),
                                      v822,
                                      v795,
                                      1),
                                    v797,
                                    v816,
                                    1),
                                  v819,
                                  v776,
                                  1);
  *(float64x2_t *)(a2 + 1368) = vmlaq_laneq_f64(v574, v744, v776, 1);
  *(float64x2_t *)(a2 + 1384) = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v792, v791, 1), v770, v790, 1), v789, v806, 1), v788, v805, 1),
                                                      v787,
                                                      v804,
                                                      1),
                                                    v786,
                                                    v785,
                                                    1),
                                                  v784,
                                                  v803,
                                                  1),
                                                v783,
                                                v802,
                                                1),
                                              v782,
                                              v781,
                                              1),
                                            v780,
                                            v800,
                                            1),
                                          v778,
                                          v798,
                                          1),
                                        v779,
                                        v796,
                                        1),
                                      v775,
                                      v795,
                                      1),
                                    v774,
                                    v816,
                                    1),
                                  v777,
                                  v776,
                                  1);
  *(float64x2_t *)(a2 + 1352) = v732;
  _Q16 = v822;
  _Q0 = vmlaq_n_f64(v678, _Q16, _Q16.f64[0]);
  _Q7.f64[0] = v817;
  v682 = vmlaq_laneq_f64(v679, _Q16, _Q16, 1);
  __asm { FMLA            D2, D7, V16.D[1] }
  *(float64x2_t *)(a2 + 1320) = v813;
  *(float64x2_t *)(a2 + 1336) = v704;
  _Q16.f64[1] = v797.f64[1];
  _Q17.f64[1] = v819.f64[1];
  *(float64x2_t *)(a2 + 1536) = vmlaq_n_f64(vmlaq_n_f64(_Q0, v797, v797.f64[0]), v819, v819.f64[0]);
  *(float64x2_t *)(a2 + 1520) = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v791, v793.f64[0]), v790, v794.f64[0]), v806, v839.f64[0]), v805, v837.f64[0]), v804, v835.f64[0]),
                                                    v785,
                                                    v833.f64[0]),
                                                  v803,
                                                  v831.f64[0]),
                                                v802,
                                                v829.f64[0]),
                                              v781,
                                              v828.f64[0]),
                                            v800,
                                            v825.f64[0]),
                                          v798,
                                          v821.f64[0]),
                                        v796,
                                        v823.f64[0]),
                                      v795,
                                      v822.f64[0]),
                                    v816,
                                    v797.f64[0]),
                                  v776,
                                  v819.f64[0]);
  *(float64x2_t *)(a2 + 1504) = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v792, v793.f64[0]), v770, v794.f64[0]), v789, v839.f64[0]), v788, v837.f64[0]), v787, v835.f64[0]),
                                                    v786,
                                                    v833.f64[0]),
                                                  v784,
                                                  v831.f64[0]),
                                                v783,
                                                v829.f64[0]),
                                              v782,
                                              v828.f64[0]),
                                            v780,
                                            v825.f64[0]),
                                          v778,
                                          v821.f64[0]),
                                        v779,
                                        v823.f64[0]),
                                      v775,
                                      v822.f64[0]),
                                    v774,
                                    v797.f64[0]),
                                  v777,
                                  v819.f64[0]);
  *(float64x2_t *)(a2 + 1488) = vmlaq_n_f64(v575, v744, v819.f64[0]);
  _Q0.f64[0] = v826;
  __asm { FMLA            D2, D0, V16.D[1] }
  *(float64x2_t *)(a2 + 1472) = v734;
  *(float64x2_t *)(a2 + 1456) = v707;
  *(float64x2_t *)(a2 + 1440) = v875;
  _Q0.f64[0] = v799;
  *(double *)(a2 + 1552) = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(v814.f64[0] * v793.f64[0], v815, v794.f64[0]), v838, v839.f64[0]), v836, v837.f64[0]), v834, v835.f64[0]),
                                               v832,
                                               v833.f64[0]),
                                             v830,
                                             v831.f64[0]),
                                           v801,
                                           v829.f64[0]),
                                         v827,
                                         v828.f64[0]),
                                       v824,
                                       v825.f64[0]),
                                     v820,
                                     v821.f64[0]),
                                   v818,
                                   v823.f64[0]),
                                 v817,
                                 v822.f64[0]),
                               v826,
                               v797.f64[0]),
                             v799,
                             v819.f64[0]);
  __asm { FMLA            D2, D0, V17.D[1] }
  *(float64_t *)(a2 + 1672) = _Q2.f64[0];
  *(float64x2_t *)(a2 + 1640) = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v791, v793, 1), v790, v794, 1), v806, v839, 1), v805, v837, 1),
                                                      v804,
                                                      v835,
                                                      1),
                                                    v785,
                                                    v833,
                                                    1),
                                                  v803,
                                                  v831,
                                                  1),
                                                v802,
                                                v829,
                                                1),
                                              v781,
                                              v828,
                                              1),
                                            v800,
                                            v825,
                                            1),
                                          v798,
                                          v821,
                                          1),
                                        v796,
                                        v823,
                                        1),
                                      v795,
                                      v822,
                                      1),
                                    v816,
                                    v797,
                                    1),
                                  v776,
                                  v819,
                                  1);
  *(float64x2_t *)(a2 + 1656) = vmlaq_laneq_f64(vmlaq_laneq_f64(v682, v797, v797, 1), v819, v819, 1);
  *(float64x2_t *)(a2 + 1608) = vmlaq_laneq_f64(v576, v744, v819, 1);
  *(float64x2_t *)(a2 + 1624) = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v792, v793, 1), v770, v794, 1), v789, v839, 1), v788, v837, 1),
                                                      v787,
                                                      v835,
                                                      1),
                                                    v786,
                                                    v833,
                                                    1),
                                                  v784,
                                                  v831,
                                                  1),
                                                v783,
                                                v829,
                                                1),
                                              v782,
                                              v828,
                                              1),
                                            v780,
                                            v825,
                                            1),
                                          v778,
                                          v821,
                                          1),
                                        v779,
                                        v823,
                                        1),
                                      v775,
                                      v822,
                                      1),
                                    v774,
                                    v797,
                                    1),
                                  v777,
                                  v819,
                                  1);
  *(float64x2_t *)(a2 + 1576) = v703;
  *(float64x2_t *)(a2 + 1592) = v736;
  *(float64x2_t *)(a2 + 1560) = v920;
  *(float64x2_t *)(a2 + 1776) = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v793, v814.f64[0]), v794, v815), v839, v838), v837, v836), v835, v834),
                                                    v833,
                                                    v832),
                                                  v831,
                                                  v830),
                                                v829,
                                                v801),
                                              v828,
                                              v827),
                                            v825,
                                            v824),
                                          v821,
                                          v820),
                                        v823,
                                        v818),
                                      v822,
                                      v817),
                                    v797,
                                    v826),
                                  v819,
                                  v799);
  *(float64x2_t *)(a2 + 1760) = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v791, v814.f64[0]), v790, v815), v806, v838), v805, v836), v804, v834),
                                                    v785,
                                                    v832),
                                                  v803,
                                                  v830),
                                                v802,
                                                v801),
                                              v781,
                                              v827),
                                            v800,
                                            v824),
                                          v798,
                                          v820),
                                        v796,
                                        v818),
                                      v795,
                                      v817),
                                    v816,
                                    v826),
                                  v776,
                                  v799);
  *(float64x2_t *)(a2 + 1744) = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v792, v814.f64[0]), v770, v815), v789, v838), v788, v836), v787, v834),
                                                    v786,
                                                    v832),
                                                  v784,
                                                  v830),
                                                v783,
                                                v801),
                                              v782,
                                              v827),
                                            v780,
                                            v824),
                                          v778,
                                          v820),
                                        v779,
                                        v818),
                                      v775,
                                      v817),
                                    v774,
                                    v826),
                                  v777,
                                  v799);
  *(float64x2_t *)(a2 + 1728) = v773;
  *(float64x2_t *)(a2 + 1712) = v738;
  *(float64x2_t *)(a2 + 1696) = v706;
  *(float64x2_t *)(a2 + 1680) = v927;
  result = vmulq_f64(v814, v814).f64[0]
         + v815 * v815
         + v838 * v838
         + _Q11.f64[0] * _Q11.f64[0]
         + _Q13.f64[0] * _Q13.f64[0]
         + _Q12.f64[0] * _Q12.f64[0]
         + _Q14.f64[0] * _Q14.f64[0]
         + _Q22.f64[0] * _Q22.f64[0]
         + _Q23.f64[0] * _Q23.f64[0]
         + _Q24.f64[0] * _Q24.f64[0]
         + _Q5.f64[0] * _Q5.f64[0]
         + _Q6.f64[0] * _Q6.f64[0]
         + _Q7.f64[0] * _Q7.f64[0]
         + v826 * v826
         + v799 * v799;
  *(float64_t *)(a2 + 1792) = result;
  return result;
}

void sub_20F4B9E04(uint64_t a1)
{
  _QWORD v1[225];

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 72))(v1);
  sub_20F4B9E44();
}

void sub_20F4B9E44()
{
  const void *v0;
  void *v1;
  void *v2;
  void *v3;
  _BYTE v4[1800];

  v0 = (const void *)MEMORY[0x24BDAC7A8]();
  v2 = v1;
  memcpy(v4, v0, sizeof(v4));
  sub_20E8BED80();
  sub_20E8BEDB0();
  if ((int)0.0 > 0x3C0)
  {
    v3 = operator new((8 * (int)0.0 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    sub_20E8BED80();
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  }
  else
  {
    sub_20E8BED80();
  }
  memcpy(v2, v4, 0x708uLL);
}

void sub_20F4B9FEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void sub_20F4BA010(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  float64x2_t v11;
  double v12;
  float64x2_t v13;
  double v14;
  float64x2_t v15;
  double v16;
  double v18;
  double v20;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v34;
  double v35;
  double v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v48;
  double v49;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v61;
  double v64;
  double v67;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  uint64_t v76;
  float64x2_t v77;
  double v78;
  float64x2_t v79;
  double v80;
  uint64_t v81;
  float64x2_t v82;
  double v83;
  float64x2_t v84;
  double v85;
  __int128 v86;
  uint64_t v87;

  v4 = *(double *)(a2 + 64);
  v5 = *(double *)(a2 + 72);
  v7 = *(double *)(a2 + 96);
  v6 = *(double *)(a2 + 104);
  v9 = *(double *)(a2 + 80);
  v8 = *(double *)(a2 + 88);
  v10 = *(double *)(a2 + 176);
  v11 = *(float64x2_t *)(a2 + 160);
  v12 = *(double *)(a2 + 200);
  v13 = *(float64x2_t *)(a2 + 184);
  v14 = *(double *)(a2 + 224);
  v15 = *(float64x2_t *)(a2 + 208);
  v16 = *(double *)(a2 + 248);
  _Q5 = *(float64x2_t *)(a2 + 232);
  v18 = *(double *)(a2 + 272);
  _Q3 = *(float64x2_t *)(a2 + 256);
  v20 = *(double *)(a2 + 296);
  _Q1 = *(float64x2_t *)(a2 + 280);
  v23 = *(double *)(a2 + 112);
  v22 = *(double *)(a2 + 120);
  v25 = *(double *)(a2 + 144);
  v24 = *(double *)(a2 + 152);
  v26 = *(double *)(a2 + 128);
  v27 = *(double *)(a2 + 136);
  v28 = *(_OWORD *)(a2 + 32);
  v87 = *(_QWORD *)(a2 + 48);
  v29 = *a3;
  v30 = a3[1];
  v86 = v28;
  if (v29 != v30 - 56 || v29 + 56 != v30)
  {
    v31 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v11, v4), (float64x2_t)0, v13), (float64x2_t)0, v15);
    v32 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v11, v8), v13, v5), (float64x2_t)0, v15);
    _D31 = v10 * v8 + v12 * v5 + v14 * 0.0;
    v34 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v11, v7), v13, v6), v15, v9);
    v35 = v10 * v7 + v12 * v6 + v14 * v9;
    v75 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v31, _Q5.f64[0]), v32, _Q5, 1), v34, v16);
    __asm { FMLA            D29, D31, V5.D[1] }
    v74 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v31, _Q3.f64[0]), v32, _Q3, 1), v34, v18);
    __asm { FMLA            D29, D31, V3.D[1] }
    _D9 = _D29 + v35 * v18;
    v73 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v31, _Q1.f64[0]), v32, _Q1, 1), v34, v20);
    __asm { FMLA            D29, D31, V1.D[1] }
    v44 = _D29 + v35 * v20;
    v45 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v11, v23), (float64x2_t)0, v13), (float64x2_t)0, v15);
    v46 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v11, v27), v13, v22), (float64x2_t)0, v15);
    _D23 = v10 * v27 + v12 * v22 + v14 * 0.0;
    v48 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v11, v25), v13, v24), v15, v26);
    v49 = v10 * v25 + v12 * v24 + v14 * v26;
    v72 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, _Q5.f64[0]), v46, _Q5, 1), v48, v16);
    __asm { FMLA            D7, D23, V5.D[1] }
    v71 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, _Q3.f64[0]), v46, _Q3, 1), v48, v18);
    __asm { FMLA            D4, D23, V3.D[1] }
    _D12 = _D4 + v49 * v18;
    v70 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, _Q1.f64[0]), v46, _Q1, 1), v48, v20);
    __asm { FMLA            D2, D23, V1.D[1] }
    v54 = _D2 + v49 * v20;
    v55 = v29 + 112;
    do
    {
      do
      {
        v56 = v55;
        v81 = *(_QWORD *)(v55 - 112);
        v57 = v55 - 56;
        v76 = *(_QWORD *)(v55 - 56);
        v58 = *(double *)(v55 - 88);
        _Q1 = *(float64x2_t *)(v55 - 104);
        __asm { FMLA            D3, D12, V1.D[1] }
        v82 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v72, _Q1.f64[0]), v71, _Q1, 1), v70, v58);
        v83 = _D3 + v54 * v58;
        v61 = *(double *)(v55 - 64);
        _Q1 = *(float64x2_t *)(v55 - 80);
        __asm { FMLA            D3, D9, V1.D[1] }
        v84 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v75, _Q1.f64[0]), v74, _Q1, 1), v73, v61);
        v85 = _D3 + v44 * v61;
        v64 = *(double *)(v55 - 32);
        _Q1 = *(float64x2_t *)(v55 - 48);
        __asm { FMLA            D3, D12, V1.D[1] }
        v77 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v72, _Q1.f64[0]), v71, _Q1, 1), v70, v64);
        v78 = _D3 + v54 * v64;
        v67 = *(double *)(v55 - 8);
        _Q1 = *(float64x2_t *)(v55 - 24);
        __asm { FMLA            D3, D9, V1.D[1] }
        v79 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v75, _Q1.f64[0]), v74, _Q1, 1), v73, v67);
        v80 = _D3 + v44 * v67;
        sub_20F4BA308(a1, (uint64_t)&v86, (uint64_t)&v81, (uint64_t)&v76);
        v55 = v57 + 112;
      }
      while (v57 != v30 - 56);
    }
    while (v56 != v30);
  }
}

int8x16_t sub_20F4BA308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float64x2_t v4;
  float64x2_t v5;
  double v7;
  float64x2_t v8;
  int8x16_t v9;
  float64x2_t v10;
  int8x16_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  double v16;
  double v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  double v22;
  double v23;
  float64x2_t v24;
  float64x2_t v25;
  unint64_t v26;
  float64x2_t v27;
  unint64_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v33;
  float64x2_t v34;
  unint64_t v35;
  float64x2_t v36;
  unint64_t v37;
  float64x2_t v38;
  float64x2_t v39;
  double v40;
  float64x2_t v47;
  double v49;
  unint64_t v50;
  unint64_t v51;
  double v52;
  int8x16_t v53;
  unint64_t v54;
  double cosval;
  __double2 v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  double v62;
  double v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  int8x16_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  double v83;
  float64x2_t v84;
  float64x2_t v85;
  int8x16_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v112;
  float64x2_t v116;
  float64x2_t v117;
  int8x16_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  int8x16_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  int64x2_t v178;
  float64x2_t v180;
  int8x16_t v181;
  int8x16_t v182;
  int8x16_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v201;
  float64x2_t v202;
  int8x16_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  int8x16_t result;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  float64_t v224;
  float64x2_t v225;
  unint64_t v226;
  unint64_t v227;
  __int128 v228;
  double v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64_t v233;
  float64x2_t v234;
  double v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  int8x16_t v240;
  int8x16_t v241;
  unint64_t v242;
  float64_t v243;
  float64x2_t v244;
  unint64_t v245;
  int8x16_t v246;
  float64_t v247;
  float64x2_t v248;
  float64_t v249;
  uint64_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64_t v253;
  int8x16_t v254;
  float64x2_t v255;
  float64x2_t v256;
  int8x16_t v257;
  int8x16_t v258;
  float64x2_t v259;
  float64_t v260;
  float64x2_t v261;
  int8x16_t v262;
  float64x2_t v263;

  v7 = *(double *)(a1 + 64);
  v9 = *(int8x16_t *)(a1 + 32);
  v8 = *(float64x2_t *)(a1 + 48);
  v11 = *(int8x16_t *)a1;
  v10 = *(float64x2_t *)(a1 + 16);
  *(_QWORD *)&v12.f64[0] = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
  *(_QWORD *)&v13.f64[0] = vextq_s8(v9, v9, 8uLL).u64[0];
  *(_QWORD *)&v14.f64[0] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
  *(_QWORD *)&v15.f64[0] = vextq_s8(v11, v11, 8uLL).u64[0];
  if (v7 >= 0.0)
  {
    if (*(double *)v11.i64 >= -*(double *)v9.i64)
    {
      v13.f64[1] = *(float64_t *)(a1 + 48);
      v12.f64[1] = *(float64_t *)(a1 + 16);
      v20 = vsubq_f64(v13, v12);
      v21.f64[0] = v15.f64[0] - v14.f64[0];
      v22 = v7 + 1.0 + *(double *)v11.i64 + *(double *)v9.i64;
      v23 = v22;
    }
    else
    {
      v8.f64[1] = v13.f64[0];
      v10.f64[1] = v12.f64[0];
      v20 = vaddq_f64(v8, v10);
      v21.f64[0] = v7 + 1.0 - (*(double *)v11.i64 + *(double *)v9.i64);
      v22 = v15.f64[0] - v14.f64[0];
      v23 = v21.f64[0];
    }
  }
  else
  {
    v16 = 1.0 - v7;
    if (*(double *)v11.i64 <= *(double *)v9.i64)
    {
      v15.f64[1] = v16;
      v14.f64[1] = *(double *)v9.i64 - *(double *)v11.i64;
      v20 = vaddq_f64(v15, v14);
      v21.f64[0] = v13.f64[0] + v12.f64[0];
      v22 = v8.f64[0] - v10.f64[0];
      v23 = v20.f64[1];
    }
    else
    {
      v17 = *(double *)v11.i64 - *(double *)v9.i64;
      v18.f64[1] = v14.f64[0];
      v19.f64[1] = v15.f64[0];
      v19.f64[0] = v16;
      v18.f64[0] = v17;
      v20 = vaddq_f64(v19, v18);
      v21.f64[0] = v8.f64[0] + v10.f64[0];
      v22 = v13.f64[0] - v12.f64[0];
      v23 = v20.f64[0];
    }
  }
  v24 = *(float64x2_t *)(a1 + 88);
  v25 = *(float64x2_t *)(a1 + 72);
  v240 = *(int8x16_t *)(a1 + 152);
  v244 = (float64x2_t)vextq_s8(v240, v240, 8uLL);
  v257 = *(int8x16_t *)(a1 + 136);
  v245 = vextq_s8(v257, v257, 8uLL).u64[0];
  v262 = *(int8x16_t *)(a1 + 120);
  v26 = vextq_s8(v262, v262, 8uLL).u64[0];
  v241 = *(int8x16_t *)(a1 + 104);
  v27 = (float64x2_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL);
  v247 = v27.f64[0];
  v248 = (float64x2_t)vextq_s8(v241, v241, 8uLL);
  v28 = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
  v27.f64[0] = *(float64_t *)(a3 + 24);
  v29 = vsubq_f64(*(float64x2_t *)(a3 + 8), v25);
  v30 = vsubq_f64(v27, v24);
  v31 = (float64x2_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL);
  v253 = v31.f64[0];
  v31.f64[0] = *(float64_t *)(a4 + 24);
  _Q1 = vsubq_f64(*(float64x2_t *)(a4 + 8), v25);
  v249 = v24.f64[0];
  v33 = vsubq_f64(v31, v24);
  v242 = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
  v243 = v33.f64[0];
  v4.f64[0] = *(float64_t *)(a3 + 48);
  v34 = *(float64x2_t *)(a3 + 32);
  v35 = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
  v5.f64[0] = *(float64_t *)(a4 + 48);
  v36 = *(float64x2_t *)(a4 + 32);
  v37 = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
  v246 = (int8x16_t)_Q1;
  v38 = vsubq_f64(_Q1, v29);
  v39 = vsubq_f64(v33, v30);
  v40 = *(double *)a4 - *(double *)a3;
  __asm { FMOV            V0.2D, #0.5 }
  v254 = (int8x16_t)v29;
  v255 = v30;
  _Q5 = vmlaq_f64(v29, v38, _Q0);
  v256 = _Q0;
  v47 = vmlaq_f64(v30, v39, _Q0);
  _Q0 = vmulq_f64(_Q5, _Q5);
  _Q1.f64[0] = _Q5.f64[1];
  __asm { FMLA            D0, D1, V5.D[1] }
  v252 = v47;
  v49 = sqrt(vmlad_n_f64(_Q0.f64[0], v47.f64[0], v47.f64[0]));
  v50 = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
  _Q0.f64[0] = *(float64_t *)(a2 + 16);
  v236 = _Q0;
  v53 = *(int8x16_t *)a2;
  v258 = *(int8x16_t *)a2;
  v260 = _Q5.f64[0];
  v51 = vextq_s8(v53, v53, 8uLL).u64[0];
  v52 = 0.5;
  *(double *)&v250 = v40;
  *(double *)v53.i64 = v40 * 0.5;
  v54 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
  cosval = 1.0;
  v235 = v40 * 0.5;
  if (v49 >= 0.01)
  {
    v237 = v20;
    v232 = v4;
    v233 = v21.f64[0];
    v229 = v22;
    v230 = v5;
    v227 = v26;
    v228 = *(_OWORD *)(a1 + 72);
    v225 = v39;
    v226 = v28;
    v223 = v35;
    v224 = v38.f64[0];
    v221 = v51;
    v222 = v37;
    v219 = v54;
    v220 = v50;
    v56 = __sincos_stret(v40 * v49 * 0.5);
    cosval = v56.__cosval;
    v54 = v219;
    v50 = v220;
    v51 = v221;
    v37 = v222;
    v35 = v223;
    v38.f64[0] = v224;
    v39 = v225;
    v28 = v226;
    v26 = v227;
    *(_QWORD *)&v25.f64[0] = v228;
    v22 = v229;
    v5 = v230;
    v4 = v232;
    v21.f64[0] = v233;
    v20 = v237;
    v52 = 0.5;
    *(double *)v53.i64 = v56.__sinval / v49;
  }
  v234 = (float64x2_t)v53;
  *(_QWORD *)&v25.f64[1] = v28;
  v57.f64[0] = v260;
  *(_QWORD *)&v58.f64[0] = v262.i64[0];
  *(_QWORD *)&v58.f64[1] = v26;
  *(_QWORD *)&v38.f64[1] = v50;
  v21.f64[1] = v22;
  *(_QWORD *)&v34.f64[1] = v35;
  *(_QWORD *)&v36.f64[1] = v37;
  *(_QWORD *)&v59.f64[0] = v258.i64[0];
  *(_QWORD *)&v59.f64[1] = v51;
  *(_QWORD *)&v57.f64[1] = v54;
  v60 = v57;
  v259 = v59;
  v261 = v57;
  *(float64x2_t *)(a1 + 72) = v25;
  *(_QWORD *)&v61.f64[0] = v254.i64[0];
  v61.f64[1] = v253;
  v62 = v52 * vmlaq_f64(v255, v39, (float64x2_t)0).f64[0];
  v63 = 0.5 / sqrt(v23);
  v64 = vmulq_n_f64(v21, v63);
  v65 = vmulq_n_f64(v20, v63);
  v66 = vmulq_f64(vmlaq_f64(v61, v38, (float64x2_t)0), v256);
  v67 = (int8x16_t)vnegq_f64(v65);
  v59.f64[0] = v65.f64[0];
  *(_QWORD *)&v59.f64[1] = v67.i64[1];
  v238 = v59;
  v68.f64[0] = v62;
  v68.f64[1] = v66.f64[0];
  v239 = (float64x2_t)vextq_s8((int8x16_t)v64, v67, 8uLL);
  v69 = (float64x2_t)vextq_s8((int8x16_t)v65, (int8x16_t)v64, 8uLL);
  v70 = v64;
  v71 = vaddq_f64(vmulq_f64(v68, v69), vaddq_f64(vmulq_f64(v65, (float64x2_t)0), vmulq_laneq_f64(v66, v64, 1)));
  v72 = vsubq_f64(vaddq_f64(vmulq_laneq_f64(v59, v66, 1), vaddq_f64(vmulq_f64(v64, (float64x2_t)0), vmulq_f64(v68, v239))), vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v66, (int64x2_t)*(unint64_t *)&v62), v69));
  v59.f64[0] = v64.f64[0];
  v59.f64[1] = v65.f64[0];
  v251 = v59;
  v73 = vsubq_f64(v71, vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v66, (int8x16_t)*(unint64_t *)&v62, 8uLL), v59));
  *(_QWORD *)&v74.f64[0] = v257.i64[0];
  *(_QWORD *)&v64.f64[0] = v245;
  *(_QWORD *)&v74.f64[1] = v245;
  v75 = vsubq_f64(v4, v74);
  v76 = vsubq_f64(v5, v74);
  _Q20 = vaddq_f64(v65, vmulq_n_f64(v73, v235));
  _D22 = _Q20.f64[1];
  __asm { FMLA            D21, D22, V20.D[1] }
  _Q18 = vaddq_f64(v70, vmulq_n_f64(v72, v235));
  _D22 = _Q18.f64[1];
  __asm { FMLA            D21, D22, V18.D[1] }
  v83 = 1.0 / sqrt(_D21);
  v84 = vmulq_n_f64(_Q18, v83);
  v85 = vmulq_n_f64(_Q20, v83);
  v86 = (int8x16_t)vnegq_f64(v85);
  v87.f64[0] = v85.f64[0];
  *(_QWORD *)&v87.f64[1] = v86.i64[1];
  v88 = vmulq_f64(v60, v256);
  v89.f64[0] = v252.f64[0] * 0.5;
  v89.f64[1] = v88.f64[0];
  v90 = vaddq_f64(vmulq_f64(v84, (float64x2_t)0), vmulq_f64(v89, (float64x2_t)vextq_s8((int8x16_t)v84, v86, 8uLL)));
  _Q11.f64[0] = v84.f64[0];
  _Q11.f64[1] = v85.f64[0];
  v263 = v58;
  v92 = vsubq_f64(v34, v58);
  v93 = vsubq_f64(vsubq_f64(v36, v58), v92);
  v94 = vmlaq_f64(v92, v93, v256);
  v95 = vmlsq_laneq_f64(vmulq_laneq_f64(v85, v94, 1), v94, v85, 1);
  v96 = vsubq_f64(v76, v75);
  v97 = vmlaq_f64(v75, v96, v256);
  v98.f64[0] = v97.f64[0];
  v98.f64[1] = v94.f64[0];
  _Q12 = (float64x2_t)vextq_s8((int8x16_t)v85, (int8x16_t)v84, 8uLL);
  v100 = (float64x2_t)vextq_s8((int8x16_t)v94, (int8x16_t)v97, 8uLL);
  v101 = vmlsq_f64(vmulq_f64(v98, _Q12), v100, _Q11);
  v102 = vaddq_f64(v101, v101);
  v103 = vmlsq_laneq_f64(vmulq_laneq_f64(v85, v102, 1), v102, v85, 1);
  v104 = vaddq_f64(vmulq_f64(v89, _Q12), vaddq_f64(vmulq_f64(v85, (float64x2_t)0), vmulq_laneq_f64(v88, v84, 1)));
  v105 = vaddq_f64(vmulq_laneq_f64(v87, v88, 1), v90);
  v106 = (float64x2_t)vzip1q_s64((int64x2_t)v88, (int64x2_t)COERCE_UNSIGNED_INT64(v252.f64[0] * 0.5));
  v107 = vsubq_f64(v105, vmulq_f64(v106, _Q12));
  v108 = vaddq_f64(v95, v95);
  v109 = vmlaq_laneq_f64(v94, v102, v84, 1);
  v110 = vmlaq_laneq_f64(v97, v108, v84, 1);
  _Q8 = (float64x2_t)vextq_s8((int8x16_t)v102, (int8x16_t)v108, 8uLL);
  v108.f64[1] = v102.f64[0];
  v112 = vmlsq_f64(vmulq_f64(_Q12, v108), _Q11, _Q8);
  _Q31 = (float64x2_t)vextq_s8((int8x16_t)v88, (int8x16_t)COERCE_UNSIGNED_INT64(v252.f64[0] * 0.5), 8uLL);
  _Q29 = vaddq_f64(v65, vmulq_n_f64(vsubq_f64(v104, vmulq_f64(_Q31, _Q11)), v235));
  _Q11.f64[0] = _Q29.f64[1];
  __asm { FMLA            D8, D11, V29.D[1] }
  _Q11 = vaddq_f64(v70, vmulq_n_f64(v107, v235));
  _Q12.f64[0] = _Q11.f64[1];
  __asm { FMLA            D8, D12, V11.D[1] }
  _Q8.f64[0] = 1.0 / sqrt(_Q8.f64[0]);
  v116 = vmulq_n_f64(_Q11, _Q8.f64[0]);
  v117 = vmulq_n_f64(_Q29, _Q8.f64[0]);
  v118 = (int8x16_t)vnegq_f64(v117);
  _Q12.f64[0] = v117.f64[0];
  *(_QWORD *)&_Q12.f64[1] = v118.i64[1];
  v119 = vaddq_f64(vmulq_f64(v116, (float64x2_t)0), vmulq_f64(v89, (float64x2_t)vextq_s8((int8x16_t)v116, v118, 8uLL)));
  v104.f64[0] = v116.f64[0];
  v104.f64[1] = v117.f64[0];
  v120 = (float64x2_t)vextq_s8((int8x16_t)v117, (int8x16_t)v116, 8uLL);
  v121 = vmlsq_f64(vmulq_f64(v98, v120), v100, v104);
  v122 = vmlsq_laneq_f64(vmulq_laneq_f64(v117, v94, 1), v94, v117, 1);
  v123 = vaddq_f64(v121, v121);
  v124 = vmlsq_laneq_f64(vmulq_laneq_f64(v117, v123, 1), v123, v117, 1);
  v125 = vaddq_f64(vmulq_f64(v89, v120), vaddq_f64(vmulq_f64(v117, (float64x2_t)0), vmulq_laneq_f64(v88, v116, 1)));
  _Q8 = vaddq_f64(vmulq_laneq_f64(_Q12, v88, 1), v119);
  v127 = vaddq_f64(v122, v122);
  v128 = vmlaq_laneq_f64(v94, v123, v116, 1);
  v129 = vmlaq_laneq_f64(v97, v127, v116, 1);
  v130 = (float64x2_t)vextq_s8((int8x16_t)v123, (int8x16_t)v127, 8uLL);
  v127.f64[1] = v123.f64[0];
  v131 = vmlsq_f64(vmulq_f64(v120, v127), v104, v130);
  v132 = vsubq_f64(_Q8, vmulq_f64(v106, v120));
  _Q28 = vaddq_f64(v65, vmulq_n_f64(vsubq_f64(v125, vmulq_f64(_Q31, v104)), *(double *)&v250));
  _Q8.f64[0] = _Q28.f64[1];
  __asm { FMLA            D31, D8, V28.D[1] }
  _Q30 = vaddq_f64(v70, vmulq_n_f64(v132, *(double *)&v250));
  _Q8.f64[0] = _Q30.f64[1];
  __asm { FMLA            D31, D8, V30.D[1] }
  _Q31.f64[0] = 1.0 / sqrt(_Q31.f64[0]);
  v135 = vmulq_n_f64(_Q30, _Q31.f64[0]);
  v136 = vmulq_n_f64(_Q28, _Q31.f64[0]);
  v137 = vaddq_f64(v92, v93);
  v138 = vaddq_f64(v75, v96);
  v130.f64[0] = v138.f64[0];
  v130.f64[1] = v137.f64[0];
  v139 = (float64x2_t)vextq_s8((int8x16_t)v136, (int8x16_t)v135, 8uLL);
  v116.f64[0] = v135.f64[0];
  v116.f64[1] = v136.f64[0];
  v140 = vmlsq_f64(vmulq_f64(v130, v139), (float64x2_t)vextq_s8((int8x16_t)v137, (int8x16_t)v138, 8uLL), v116);
  v141 = vmlsq_laneq_f64(vmulq_laneq_f64(v136, v137, 1), v137, v136, 1);
  v142 = vaddq_f64(v140, v140);
  v143 = vaddq_f64(v141, v141);
  v144 = vmlaq_laneq_f64(v137, v142, v135, 1);
  v145 = vmlaq_laneq_f64(v138, v143, v135, 1);
  v146 = vmlsq_laneq_f64(vmulq_laneq_f64(v136, v142, 1), v142, v136, 1);
  v147 = (float64x2_t)vextq_s8((int8x16_t)v142, (int8x16_t)v143, 8uLL);
  v143.f64[1] = v142.f64[0];
  v148 = vmlsq_f64(vmulq_f64(v139, v143), v116, v147);
  *(_QWORD *)&v64.f64[1] = v240.i64[0];
  v149 = vmlaq_f64(v92, v93, (float64x2_t)0);
  v150 = vmlaq_f64(v75, v96, (float64x2_t)0);
  v93.f64[0] = v150.f64[0];
  v93.f64[1] = v149.f64[0];
  v151 = vmlsq_f64(vmulq_f64(v93, v69), (float64x2_t)vextq_s8((int8x16_t)v149, (int8x16_t)v150, 8uLL), v59);
  v231 = v65;
  v152 = vmlsq_laneq_f64(vmulq_laneq_f64(v65, v149, 1), v149, v65, 1);
  v153 = vaddq_f64(v152, v152);
  v154 = vaddq_f64(v151, v151);
  v155 = vmlaq_laneq_f64(v150, v153, v70, 1);
  v156 = (float64x2_t)vextq_s8((int8x16_t)v154, (int8x16_t)v153, 8uLL);
  v153.f64[1] = v154.f64[0];
  v157 = vaddq_f64(vmlaq_laneq_f64(v149, v154, v70, 1), vmlsq_f64(vmulq_f64(v69, v153), v59, v156));
  v158 = vaddq_f64(v155, vmlsq_laneq_f64(vmulq_laneq_f64(v65, v154, 1), v154, v65, 1));
  v159 = vaddq_f64(v109, v112);
  v160 = vaddq_f64(v110, v103);
  v119.f64[0] = v249;
  v103.f64[0] = v249;
  v120.f64[0] = v247;
  v103.f64[1] = v247;
  *(_QWORD *)&v110.f64[0] = v241.i64[0];
  *(_QWORD *)&v120.f64[1] = v241.i64[0];
  v109.f64[0] = *(double *)&v250 * 0.166666667;
  v110.f64[1] = v248.f64[0];
  v161 = vsubq_f64(v157, v259);
  v162 = (int8x16_t)vsubq_f64(v158, v236);
  v112.f64[0] = *(double *)&v250 * 0.333333333;
  v163 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v235, 0);
  v164 = (float64x2_t)vextq_s8((int8x16_t)v161, v162, 8uLL);
  v165 = vaddq_f64(v110, vmulq_n_f64(v164, v235));
  v166 = vaddq_f64(v128, v131);
  v167 = vaddq_f64(v129, v124);
  v168 = vsubq_f64(v160, v236);
  v169 = vsubq_f64(v159, v259);
  v170 = (float64x2_t)vextq_s8((int8x16_t)v169, (int8x16_t)v168, 8uLL);
  v171 = vaddq_f64(v110, vmulq_n_f64(v170, v235));
  v172 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v64, v120, *(double *)&v250 * 0.166666667), (float64x2_t)vextq_s8((int8x16_t)vaddq_f64(v103, vmulq_n_f64(v163, v161.f64[0])), (int8x16_t)v165, 8uLL), *(double *)&v250 * 0.333333333), (float64x2_t)vextq_s8((int8x16_t)vaddq_f64(v103, vmulq_n_f64(v163, v169.f64[0])), (int8x16_t)v171, 8uLL), *(double *)&v250 * 0.333333333);
  v173 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_n_f64(v244, v109, v248.f64[0]), v112, v165, 1), v112, v171, 1);
  v174 = vsubq_f64(v167, v236);
  v175 = vsubq_f64(v166, v259);
  v176 = (float64x2_t)vextq_s8((int8x16_t)v175, (int8x16_t)v174, 8uLL);
  v177 = vaddq_f64(v110, vmulq_n_f64(v176, *(double *)&v250));
  v178 = (int64x2_t)vsubq_f64(vaddq_f64(v144, v148), v259);
  _Q2 = (int8x16_t)vmlaq_n_f64(v172, (float64x2_t)vextq_s8((int8x16_t)vaddq_f64(v103, vmulq_n_f64((float64x2_t)vdupq_lane_s64(v250, 0), v175.f64[0])), (int8x16_t)v177, 8uLL), *(double *)&v250 * 0.166666667);
  v180 = vmlaq_n_f64(v248, v109, *(double *)v162.i64);
  v181 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v120, (float64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v161.f64[0], 0), (int8x16_t)v164, 8uLL), *(double *)&v250 * 0.166666667), (float64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v169.f64[0], 0), (int8x16_t)v170, 8uLL), *(double *)&v250 * 0.333333333), (float64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v175.f64[0], 0), (int8x16_t)v176, 8uLL), *(double *)&v250 * 0.333333333),
                      (float64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(v178.i64[0], 0), (int8x16_t)vdupq_laneq_s64(v178, 1), 8uLL), *(double *)&v250 * 0.166666667);
  v182 = vextq_s8(_Q2, (int8x16_t)vmlaq_laneq_f64(v173, v109, v177, 1), 8uLL);
  *(_QWORD *)&v119.f64[1] = v181.i64[0];
  *(_QWORD *)&v144.f64[0] = v257.i64[0];
  *(_QWORD *)&v144.f64[1] = _Q2.i64[0];
  *(_QWORD *)&v175.f64[0] = *(_OWORD *)&vmulq_f64(v252, v234);
  v175.f64[1] = cosval;
  v183 = (int8x16_t)vmlaq_f64(vmlaq_f64(vmlaq_f64(v180, v112, v168), v112, v174), v109, vsubq_f64(vaddq_f64(v145, v146), v236));
  *(_QWORD *)&v174.f64[0] = v254.i64[0];
  v174.f64[1] = v253;
  v145.f64[0] = 0.0;
  v161.f64[0] = v255.f64[0];
  *(_QWORD *)&v169.f64[0] = v246.i64[0];
  *(_QWORD *)&v169.f64[1] = v242;
  v168.f64[0] = v243;
  *(_QWORD *)&v109.f64[0] = v254.i64[0];
  v109.f64[1] = vnegq_f64(v174).f64[1];
  v184 = (float64x2_t)vextq_s8((int8x16_t)v174, (int8x16_t)*(unint64_t *)&v255.f64[0], 8uLL);
  *(_QWORD *)&v161.f64[1] = v254.i64[0];
  v185 = (float64x2_t)vextq_s8((int8x16_t)v169, (int8x16_t)*(unint64_t *)&v243, 8uLL);
  *(_QWORD *)&v168.f64[1] = v246.i64[0];
  *(_QWORD *)&v112.f64[0] = v246.i64[0];
  v112.f64[1] = v243;
  v186 = vmulq_f64(v184, v168);
  v187 = vmulq_f64(v184, v112);
  v188 = vmulq_f64(v161, v185);
  v189 = vsubq_f64(vsubq_f64(vmulq_laneq_f64(v109, v169, 1), v187), vmulq_f64((float64x2_t)vextq_s8((int8x16_t)0, v254, 8uLL), v168));
  v190 = vsubq_f64(vsubq_f64(v186, v188), vmulq_f64(v169, (float64x2_t)0));
  v169.f64[1] = vnegq_f64(v169).f64[1];
  v191 = vmulq_laneq_f64(v169, v174, 1);
  v192 = vmulq_f64(v174, (float64x2_t)0);
  v174.f64[1] = v255.f64[0];
  v193 = vsubq_f64(vsubq_f64(v191, vmulq_f64(v174, v185)), vmulq_f64((float64x2_t)vextq_s8((int8x16_t)0, v246, 8uLL), v161));
  v161.f64[0] = *(double *)&v250 * (*(double *)&v250 * 0.0208333333);
  _Q0 = vaddq_f64(vmulq_n_f64(vsubq_f64(v190, vsubq_f64(vsubq_f64(v188, v186), v192)), v161.f64[0]), vmulq_n_f64(v261, v234.f64[0]));
  v195 = vaddq_f64(vmulq_n_f64(vsubq_f64(v189, v193), v161.f64[0]), v175);
  v175.f64[0] = v195.f64[1];
  v196 = (float64x2_t)vzip1q_s64((int64x2_t)_Q0, (int64x2_t)v195);
  v197 = (float64x2_t)vextq_s8((int8x16_t)_Q0, (int8x16_t)v195, 8uLL);
  v195.f64[1] = _Q0.f64[0];
  v198 = vmulq_n_f64(v231, v175.f64[0]);
  _Q18 = vmlsq_f64(vmlaq_laneq_f64(vmlaq_f64(vmulq_n_f64(v70, v175.f64[0]), v239, v195), v238, _Q0, 1), v69, v196);
  _Q4 = vmlsq_f64(vmlaq_f64(vmlaq_laneq_f64(v198, _Q0, v70, 1), v69, v195), v251, v197);
  _Q2.i64[0] = *(_QWORD *)&_Q4.f64[1];
  __asm { FMLA            D0, D2, V4.D[1] }
  _Q2.i64[0] = *(_QWORD *)&_Q18.f64[1];
  __asm { FMLA            D0, D2, V18.D[1] }
  _Q0.f64[0] = 1.0 / sqrt(_Q0.f64[0]);
  v201 = vmulq_n_f64(_Q4, _Q0.f64[0]);
  v202 = vmulq_n_f64(_Q18, _Q0.f64[0]);
  v203 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v145, (float64x2_t)vdupq_laneq_s64((int64x2_t)v202, 1)).i64[0], 0);
  v204 = (float64x2_t)vbslq_s8(v203, (int8x16_t)vnegq_f64(v202), (int8x16_t)v202);
  v205 = (float64x2_t)vbslq_s8(v203, (int8x16_t)vnegq_f64(v201), (int8x16_t)v201);
  v61.f64[0] = vmuld_n_f64(v205.f64[0], v205.f64[0]);
  v201.f64[0] = vmuld_lane_f64(v205.f64[1], v205, 1);
  v206 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v205.f64[0], 0);
  v206.f64[0] = v201.f64[0];
  v69.f64[1] = v205.f64[1];
  v69.f64[0] = vmuld_n_f64(v204.f64[0], v204.f64[0]);
  v207 = vmulq_laneq_f64((float64x2_t)vextq_s8((int8x16_t)v205, (int8x16_t)v204, 8uLL), v204, 1);
  v208 = vmulq_n_f64(v205, v205.f64[0]);
  _Q18.f64[0] = v205.f64[0];
  _Q18.f64[1] = v204.f64[1];
  v209 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v204.f64[0], 0);
  v204.f64[1] = v205.f64[0];
  v205.f64[0] = v61.f64[0];
  v210 = vaddq_f64(v206, v69);
  v209.f64[0] = v69.f64[0];
  v211 = vaddq_f64(v205, v209);
  v212 = vmulq_f64(v205, v209);
  v213 = vmulq_f64(_Q18, v204);
  v214 = vaddq_f64(v207, v208);
  v208.f64[0] = v213.f64[0];
  *(_QWORD *)&v210.f64[0] = *(_OWORD *)&vsubq_f64(v256, v210);
  v210.f64[1] = v214.f64[1];
  v215 = vsubq_f64(v212, v213);
  v216 = vaddq_f64(v213, v212);
  *(_QWORD *)&_Q18.f64[0] = *(_OWORD *)&vaddq_f64(v207, v213);
  v213.f64[0] = 0.5;
  v217 = vsubq_f64(v208, v207);
  *(_QWORD *)&v213.f64[0] = *(_OWORD *)&vsubq_f64(v213, v211);
  v213.f64[1] = v216.f64[1];
  v215.f64[0] = _Q18.f64[0];
  *(double *)(a1 + 64) = 0.5 - (v61.f64[0] + v201.f64[0]) + 0.5 - (v61.f64[0] + v201.f64[0]);
  *(float64x2_t *)(a1 + 32) = vaddq_f64(v213, v213);
  *(float64x2_t *)(a1 + 48) = vaddq_f64(v215, v215);
  *(float64x2_t *)a1 = vaddq_f64(v210, v210);
  *(float64x2_t *)(a1 + 16) = vaddq_f64(v217, v217);
  *(float64x2_t *)(a1 + 120) = v263;
  *(int8x16_t *)(a1 + 152) = v182;
  *(float64x2_t *)(a1 + 136) = v144;
  result = vextq_s8(v181, v183, 8uLL);
  *(int8x16_t *)(a1 + 104) = result;
  *(float64x2_t *)(a1 + 88) = v119;
  return result;
}

double sub_20F4BAD38()
{
  float64x2_t v2;
  uint64_t v3;
  uint64_t *v4;
  float64x2_t *v5;
  float64x2_t *v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  double v10;
  double v11;
  float64x2_t *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  float64x2_t v18;
  double v19;
  float64x2_t v20;
  double v21;
  float64x2_t v22;
  double v23;
  double v25;
  float64x2_t v27;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  float64x2_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float64x2_t v39;
  float64x2_t v40;
  double v43;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v54;
  double v55;
  uint64_t v59;
  uint64_t v60;
  double v61;
  double v65;
  double v69;
  double v72;
  float64x2_t v74;
  float64x2_t *v76;
  double v77;
  double v78;
  double v79;
  _BYTE *v80;
  _BYTE *v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v91;
  float64x2_t v94;
  double v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v102;
  double v105;
  float64x2_t v107;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v118;
  float64x2_t v120;
  float64x2_t v124;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  double v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  double v137;
  double result;
  float64x2_t v139;
  float64x2_t v140;
  float64_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  uint64_t *v158;
  uint64_t v159;
  double v160;
  float64x2_t v161;
  double v162;
  float64x2_t v163;
  float64x2_t v164;
  double v165;
  float64x2_t v166;
  double v167;
  float64x2_t v168;
  float64x2_t v169;
  uint64_t v170;
  uint64_t v171;
  float64_t v172;
  double v173;
  float64_t v174;
  double v175;
  float64x2_t v176;
  uint64_t v177;
  float64x2_t v178;
  double v179;
  float64x2_t v180;
  float64_t v181;
  uint64_t v182;
  float64x2_t v183;
  double v184;
  float64x2_t v185;
  double v186;
  _BYTE v187[936];
  float64x2_t v188;
  float64x2_t v189;
  float64_t v190;
  float64x2_t v191;
  double v192;
  float64x2_t v193;
  float64_t v194;
  float64x2_t v195;
  float64_t v196;
  float64x2_t v197;
  float64_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64_t v201;
  float64x2_t v202;
  double v203;
  float64x2_t v204;
  float64_t v205;
  float64x2_t v206;
  float64_t v207;
  float64x2_t v208;
  float64_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64_t v217;
  float64x2_t v218;
  double v219;
  float64x2_t v220;
  float64_t v221;
  float64x2_t v222;
  float64_t v223;
  float64x2_t v224;
  float64_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64_t v230;
  double v231;
  double v232;
  _BYTE __src[1800];
  float64x2_t v234[2];
  __int128 v235;
  uint64_t v236;
  float64x2_t v237;
  double v238;
  float64x2_t v239;
  double v240;
  float64x2_t v241;
  double v242;
  float64x2_t v243;
  double v244;
  float64x2_t v245;
  double v246;
  float64x2_t v247;
  double v248;
  float64x2_t v249;
  float64_t v250;
  float64x2_t v251;
  float64_t v252;
  float64x2_t v253;
  float64_t v254;
  float64x2_t v255;
  float64_t v256;
  float64x2_t v257;
  float64_t v258;
  float64x2_t v259;
  float64_t v260;
  float64x2_t v261;
  float64x2_t v262[2];
  float64x2_t v263;
  float64_t v264;
  float64x2_t v265;
  float64_t v266;
  float64x2_t v267;
  float64_t v268;
  float64x2_t v269;
  float64_t v270;
  float64x2_t v271;
  float64_t v272;
  float64x2_t v273;
  float64_t v274;
  float64x2_t v275;
  float64_t v276;
  float64x2_t v277;
  float64x2_t v278[2];
  float64x2_t v279;
  float64_t v280;
  double v281;
  double v282;

  v3 = MEMORY[0x24BDAC7A8]();
  v6 = v5;
  v8 = v7;
  v171 = v3;
  v10 = *(double *)(v9 + 64);
  v11 = *(double *)(v9 + 72);
  v12 = v5 + 18;
  v14 = *(double *)(v9 + 96);
  v13 = *(double *)(v9 + 104);
  v16 = *(double *)(v9 + 80);
  v15 = *(double *)(v9 + 88);
  v17 = *(double *)(v9 + 176);
  v18 = *(float64x2_t *)(v9 + 160);
  v19 = *(double *)(v9 + 200);
  v20 = *(float64x2_t *)(v9 + 184);
  v21 = *(double *)(v9 + 224);
  v22 = *(float64x2_t *)(v9 + 208);
  v23 = *(double *)(v9 + 248);
  _Q5 = *(float64x2_t *)(v9 + 232);
  v25 = *(double *)(v9 + 272);
  _Q3 = *(float64x2_t *)(v9 + 256);
  v27.f64[0] = *(float64_t *)(v9 + 296);
  _Q1 = *(float64x2_t *)(v9 + 280);
  v30 = *(double *)(v9 + 112);
  v29 = *(double *)(v9 + 120);
  v32 = *(double *)(v9 + 144);
  v31 = *(double *)(v9 + 152);
  v33 = *(double *)(v9 + 128);
  v34 = *(double *)(v9 + 136);
  v35 = *(float64x2_t *)(v9 + 16);
  v235 = *(_OWORD *)(v9 + 32);
  v236 = *(_QWORD *)(v9 + 48);
  v36 = *v4;
  v37 = v4[1];
  v234[0] = *(float64x2_t *)v9;
  v234[1] = v35;
  v170 = v37 - 56;
  if (v36 != v37 - 56 || v36 + 56 != v37)
  {
    v158 = v4;
    v159 = v37;
    v38 = 0;
    v39 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v18, v10), (float64x2_t)0, v20), (float64x2_t)0, v22);
    v40 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v18, v15), v20, v11), (float64x2_t)0, v22);
    _D31 = v17 * v15 + v19 * v11 + v21 * 0.0;
    _Q8 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v18, v14), v20, v13), v22, v16);
    v43 = v17 * v14 + v19 * v13 + v21 * v16;
    v169 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v39, _Q5.f64[0]), v40, _Q5, 1), _Q8, v23);
    __asm { FMLA            D29, D31, V5.D[1] }
    v168 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v39, _Q3.f64[0]), v40, _Q3, 1), _Q8, v25);
    __asm { FMLA            D29, D31, V3.D[1] }
    v167 = _D29 + v43 * v25;
    v166 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v39, _Q1.f64[0]), v40, _Q1, 1), _Q8, v27.f64[0]);
    __asm { FMLA            D29, D31, V1.D[1] }
    v165 = _D29 + v43 * v27.f64[0];
    v51 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v18, v30), (float64x2_t)0, v20), (float64x2_t)0, v22);
    v52 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v18, v34), v20, v29), (float64x2_t)0, v22);
    _D23 = v17 * v34 + v19 * v29 + v21 * 0.0;
    v54 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v18, v32), v20, v31), v22, v33);
    v55 = v17 * v32 + v19 * v31 + v21 * v33;
    v164 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v51, _Q5.f64[0]), v52, _Q5, 1), v54, v23);
    __asm { FMLA            D7, D23, V5.D[1] }
    v163 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v51, _Q3.f64[0]), v52, _Q3, 1), v54, v25);
    __asm { FMLA            D4, D23, V3.D[1] }
    v162 = _D4 + v55 * v25;
    v161 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v51, _Q1.f64[0]), v52, _Q1, 1), v54, v27.f64[0]);
    __asm { FMLA            D2, D23, V1.D[1] }
    v160 = _D2 + v55 * v27.f64[0];
    v59 = v36 + 112;
    do
    {
      v60 = v59;
      v182 = *(_QWORD *)(v59 - 112);
      v177 = *(_QWORD *)(v59 - 56);
      v61 = *(double *)(v59 - 88);
      _Q1 = *(float64x2_t *)(v59 - 104);
      _D21 = v162;
      __asm { FMLA            D3, D21, V1.D[1] }
      v183 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v164, _Q1.f64[0]), v163, _Q1, 1), v161, v61);
      v184 = _D3 + v160 * v61;
      v65 = *(double *)(v59 - 64);
      _Q1 = *(float64x2_t *)(v59 - 80);
      _D7 = v167;
      __asm { FMLA            D3, D7, V1.D[1] }
      v185 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v169, _Q1.f64[0]), v168, _Q1, 1), v166, v65);
      v186 = _D3 + v165 * v65;
      v69 = *(double *)(v59 - 32);
      _Q1 = *(float64x2_t *)(v59 - 48);
      __asm { FMLA            D3, D21, V1.D[1] }
      v178 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v164, _Q1.f64[0]), v163, _Q1, 1), v161, v69);
      v179 = _D3 + v160 * v69;
      v72 = *(double *)(v59 - 8);
      _Q1 = *(float64x2_t *)(v59 - 24);
      v74 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v169, _Q1.f64[0]), v168, _Q1, 1), v166, v72);
      __asm { FMLA            D3, D7, V1.D[1] }
      v27.f64[0] = _D3 + v165 * v72;
      v180 = v74;
      v181 = v27.f64[0];
      if (v38)
        v76 = &v188;
      else
        v76 = &v237;
      sub_20F4BB8D4(v171, v76, (uint64_t)v187, (uint64_t)&v235, v234, (uint64_t)&v182, (uint64_t)&v177, v27, _Q1.f64[0], v74);
      if ((v38 & 1) != 0)
        v80 = v8;
      else
        v80 = __src;
      if ((v38 & 1) != 0)
        v81 = __src;
      else
        v81 = v8;
      v27 = sub_20F4BD84C((uint64_t)v80, (uint64_t)v81, (uint64_t)v76, (uint64_t)v187, v77, v78, v79);
      if (v38)
      {
        _Q1.f64[1] = v243.f64[1];
        v91.f64[1] = v216.f64[1];
        _Q8.f64[0] = v217;
        __asm { FMLA            D0, D8, V1.D[1] }
        v88.f64[0] = _D0 + v219 * v244;
        _V18.D[1] = v245.f64[1];
        v94.f64[1] = v215.f64[1];
        __asm { FMLA            D0, D8, V18.D[1] }
        _Q10.f64[0] = _D0 + v219 * v246;
        _V28.D[1] = v247.f64[1];
        v94.f64[0] = v232;
        __asm { FMLA            D0, D8, V28.D[1] }
        v82.f64[0] = _D0 + v219 * v248;
        v89.f64[0] = v260;
        v86.f64[0] = v256;
        v91.f64[0] = v254;
        v84.f64[0] = v258;
        v83.f64[0] = v281;
        v85.f64[0] = v221;
        v87.f64[0] = v272;
        *(_QWORD *)&v98 = *(_OWORD *)&vmlaq_f64(vmlaq_f64(v88, v94, v86), vaddq_f64(v85, v87), v83);
        v99.f64[1] = v271.f64[1];
        v100 = vaddq_f64(v220, v271);
        _Q5 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v215, v243.f64[0]), v216, v243, 1), v218, v244), v255, v232), v100, v281);
        v100.f64[0] = v223;
        v99.f64[0] = v274;
        v102 = vmlaq_f64(vmlaq_f64(_Q10, v94, v84), vaddq_f64(v100, v99), v83);
        v99.f64[1] = v273.f64[1];
        _Q20 = vaddq_f64(v222, v273);
        _Q25 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v215, v245.f64[0]), v216, v245, 1), v218, v246), v257, v232), _Q20, v281);
        _Q20.f64[0] = v225;
        v99.f64[0] = v276;
        *(_QWORD *)&v105 = *(_OWORD *)&vmlaq_f64(vmlaq_f64(v82, v94, v89), vaddq_f64(_Q20, v99), v83);
        v99.f64[1] = v275.f64[1];
        _Q11 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v215, v247.f64[0]), v216, v247, 1), v218, v248), v259, v232), vaddq_f64(v224, v275), v281);
        v99.f64[0] = v205;
        _Q20.f64[0] = v201;
        v107.f64[1] = v243.f64[1];
        v172 = v201;
        __asm { FMLA            D31, D20, V1.D[1] }
        _Q1.f64[0] = _D31 + v203 * v244;
        *(_QWORD *)&v173 = *(_OWORD *)&vmlaq_f64(_Q1, v83, vaddq_f64(v86, v99));
        v109.f64[1] = v200.f64[1];
        v110.f64[1] = v243.f64[1];
        _Q1 = vaddq_f64(v257, v206);
        v175 = v246;
        v112 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v199, v245.f64[0]), v200, v245, 1), v202, v246), _Q1, v281);
        v271 = _Q5;
        _Q1.f64[0] = v209;
        __asm { FMLA            D5, D20, V28.D[1] }
        v107.f64[0] = _Q5.f64[0] + v203 * v248;
        *(_QWORD *)&v107.f64[0] = *(_OWORD *)&vmlaq_f64(v107, v83, vaddq_f64(v89, _Q1));
        v272 = v98;
        v273 = _Q25;
        _Q25.f64[0] = v190;
        __asm { FMLA            D1, D25, V28.D[1] }
        v99.f64[0] = v194;
        v174 = v243.f64[1];
        _Q1.f64[0] = _Q1.f64[0] + v192 * v248;
        v274 = v102.f64[0];
        v275 = _Q11;
        v276 = v105;
        v113.f64[1] = v193.f64[1];
        v102.f64[0] = v207;
        v113.f64[0] = v231;
        _Q19 = vaddq_f64(v84, v102);
        v176 = _Q19;
        __asm { FMLA            D19, D25, V18.D[1] }
        _Q19.f64[0] = _Q19.f64[0] + v192 * v246;
        _Q10.f64[0] = v196;
        _Q11.f64[0] = v198;
        _Q19 = vmlaq_f64(_Q19, v83, _Q10);
        v255 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v199, v243.f64[0]), v200, v243, 1), v202, v244), vaddq_f64(v255, v204), v281);
        v257 = v112;
        v259 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v199, v247.f64[0]), v200, v247, 1), v202, v248), vaddq_f64(v259, v208), v281);
        v260 = v107.f64[0];
        _Q1 = vmlaq_f64(_Q1, v83, _Q11);
        v243 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v188, v243.f64[0]), v189, v243, 1), v191, v244), v193, v281);
        v245 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v188, v245.f64[0]), v189, v245, 1), v191, v246), v195, v281);
        v247 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v188, v247.f64[0]), v189, v247, 1), v191, v248), v197, v281);
        _Q10.f64[1] = v237.f64[1];
        _Q11.f64[1] = v239.f64[1];
        _V9.D[1] = v241.f64[1];
        v246 = _Q19.f64[0];
        v248 = _Q1.f64[0];
        __asm
        {
          FMLA            D1, D8, V10.D[1]
          FMLA            D19, D8, V11.D[1]
          FMLA            D14, D8, V9.D[1]
        }
        _Q1.f64[0] = _Q1.f64[0] + v219 * v238;
        _Q19.f64[0] = _Q19.f64[0] + v219 * v240;
        _Q8.f64[0] = _Q14.f64[0] + v219 * v242;
        _Q14.f64[0] = v250;
        v2.f64[0] = v252;
        v110.f64[0] = v266;
        v118.f64[1] = v265.f64[1];
        v118.f64[0] = v268;
        _Q19 = vmlaq_f64(vmlaq_f64(_Q19, v94, v2), v118, v113);
        v120.f64[1] = v267.f64[1];
        v120.f64[0] = v270;
        _Q8 = vmlaq_f64(vmlaq_f64(_Q8, v94, v91), v120, v113);
        v265 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v215, v237.f64[0]), v216, v237, 1), v218, v238), v249, v232), v265, v231);
        *(_QWORD *)&v266 = *(_OWORD *)&vmlaq_f64(vmlaq_f64(_Q1, v94, _Q14), v110, v113);
        v267 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v215, v239.f64[0]), v216, v239, 1), v218, v240), v251, v232), v267, v231);
        v268 = _Q19.f64[0];
        v269 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v215, v241.f64[0]), v216, v241, 1), v218, v242), v253, v232), v269, v231);
        v270 = _Q8.f64[0];
        _Q8.f64[0] = v201;
        __asm { FMLA            D4, D8, V10.D[1] }
        v109.f64[0] = _D4 + v203 * v238;
        _Q1 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v199, v237.f64[0]), v200, v237, 1), v202, v238), v249, v231);
        __asm { FMLA            D19, D8, V11.D[1] }
        _Q19.f64[0] = _Q19.f64[0] + v203 * v240;
        _Q19 = vmlaq_f64(_Q19, v2, v113);
        v249 = _Q1;
        v251 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v199, v239.f64[0]), v200, v239, 1), v202, v240), v251, v231);
        *(_QWORD *)&v250 = *(_OWORD *)&vmlaq_f64(v109, _Q14, v113);
        v252 = _Q19.f64[0];
        __asm { FMLA            D1, D8, V9.D[1] }
        _Q1.f64[0] = _Q1.f64[0] + v203 * v242;
        v124 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v199, v241.f64[0]), v200, v241, 1), v202, v242), v253, v231);
        v253 = v124;
        v256 = v173;
        *(_QWORD *)&v254 = *(_OWORD *)&vmlaq_f64(_Q1, v91, v113);
        v237 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v188, v237.f64[0]), v189, v237, 1), v191, v238);
        v239 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v188, v239.f64[0]), v189, v239, 1), v191, v240);
        __asm
        {
          FMLA            D1, D25, V10.D[1]
          FMLA            D2, D25, V11.D[1]
        }
        v238 = _Q1.f64[0] + v192 * v238;
        v240 = _D2 + v192 * v240;
        _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v188, v241.f64[0]), v189, v241, 1), v191, v242);
        v241 = _Q0;
        _Q1.f64[1] = v174;
        __asm { FMLA            D0, D25, V1.D[1] }
        _Q0.f64[0] = _Q0.f64[0] + v192 * v244;
        v127 = vmlaq_f64(_Q0, v83, v99);
        __asm { FMLA            D1, D25, V9.D[1] }
        v244 = v127.f64[0];
        v242 = _Q1.f64[0] + v192 * v242;
        v127.f64[0] = v230;
        v124.f64[0] = v280;
        v128 = vaddq_f64(v127, v124);
        v124.f64[1] = v279.f64[1];
        v124.f64[0] = v264;
        __asm { FMLA            D19, D8, V18.D[1] }
        _Q19.f64[0] = _Q19.f64[0] + v203 * v175;
        v129 = vaddq_f64(vmulq_f64(v94, v124), vmulq_f64(v83, v128));
        v278[1] = vaddq_f64(vmulq_n_f64(v262[1], v232), vmulq_n_f64(vaddq_f64(v228, v278[1]), v281));
        v279 = vaddq_f64(vmulq_n_f64(v263, v232), vmulq_n_f64(vaddq_f64(v229, v279), v281));
        v277 = vaddq_f64(vmulq_n_f64(v261, v232), vmulq_n_f64(vaddq_f64(v226, v277), v281));
        v278[0] = vaddq_f64(vmulq_n_f64(v262[0], v232), vmulq_n_f64(vaddq_f64(v227, v278[0]), v281));
        v280 = v129.f64[0];
        v27.f64[0] = v214;
        v263 = vmulq_n_f64(vaddq_f64(v263, v213), v281);
        v262[1] = vmulq_n_f64(vaddq_f64(v262[1], v212), v281);
        v262[0] = vmulq_n_f64(vaddq_f64(v262[0], v211), v281);
        v261 = vmulq_n_f64(vaddq_f64(v261, v210), v281);
        *(_QWORD *)&v264 = *(_OWORD *)&vmulq_f64(v83, vaddq_f64(v124, v27));
        v282 = v281 * (v232 + v282);
        v27.f64[1] = v176.f64[1];
        *(_QWORD *)&v258 = *(_OWORD *)&vmlaq_f64(_Q19, v83, v176);
        v281 = v281 * v231;
      }
      ++v38;
      v59 = v60 + 56;
    }
    while (v60 - 56 != v170 || v60 != v159);
    v36 = *v158;
    v37 = v158[1];
  }
  if ((((_DWORD)v37 - (_DWORD)v36) & 8) == 0)
    memcpy(v8, __src, 0x708uLL);
  bzero(v6, 0x700uLL);
  v130 = v237;
  v131 = v239;
  v132 = v240;
  v133 = v241;
  v6[1].f64[0] = v238;
  *v6 = v130;
  v6[8].f64[1] = v132;
  *(float64x2_t *)((char *)v6 + 120) = v131;
  v131.f64[0] = v244;
  v6[16].f64[0] = v242;
  v6[15] = v133;
  v134 = v243;
  v135 = v245;
  v136 = v247;
  v133.f64[0] = v246;
  v137 = v248;
  v12[5].f64[1] = v131.f64[0];
  *(float64x2_t *)((char *)v12 + 72) = v134;
  v12[13].f64[0] = v133.f64[0];
  v12[12] = v135;
  v12[20].f64[1] = v137;
  *(float64x2_t *)((char *)v12 + 312) = v136;
  result = v281;
  v131.f64[0] = v258;
  v6[24].f64[0] = v281;
  v6[32].f64[0] = result;
  v6[40].f64[0] = result;
  v139 = v249;
  v140 = v251;
  v141 = v252;
  v142 = v253;
  v6[4].f64[0] = v250;
  v6[3] = v139;
  v6[11].f64[1] = v141;
  *(float64x2_t *)((char *)v6 + 168) = v140;
  *v12 = v142;
  v140.f64[0] = v256;
  v12[1].f64[0] = v254;
  v143 = v255;
  v144 = v257;
  v145 = v259;
  v142.f64[0] = v260;
  v12[8].f64[1] = v140.f64[0];
  *(float64x2_t *)((char *)v12 + 120) = v143;
  v12[16].f64[0] = v131.f64[0];
  v12[15] = v144;
  v12[23].f64[1] = v142.f64[0];
  *(float64x2_t *)((char *)v12 + 360) = v145;
  v6[48].f64[0] = result;
  v6[56].f64[0] = result;
  v6[64].f64[0] = result;
  v146 = v261;
  v147 = *(float64x2_t *)((char *)v262 + 8);
  v144.f64[0] = v262[1].f64[1];
  v148 = v263;
  v142.f64[0] = v264;
  v12[53].f64[1] = v262[0].f64[0];
  *(float64x2_t *)((char *)v12 + 840) = v146;
  v12[61].f64[0] = v144.f64[0];
  v12[60] = v147;
  v12[68].f64[1] = v142.f64[0];
  *(float64x2_t *)((char *)v12 + 1080) = v148;
  v6[72].f64[0] = result;
  v6[80].f64[0] = result;
  v6[88].f64[0] = result;
  v149 = v265;
  v150 = v267;
  v144.f64[0] = v268;
  v151 = v269;
  v142.f64[0] = v270;
  v6[7].f64[0] = v266;
  v6[6] = v149;
  v6[14].f64[1] = v144.f64[0];
  *(float64x2_t *)((char *)v6 + 216) = v150;
  v12[4].f64[0] = v142.f64[0];
  v12[3] = v151;
  v152 = v271;
  v153 = v273;
  v144.f64[0] = v274;
  v154 = v275;
  v142.f64[0] = v276;
  v12[11].f64[1] = v272;
  *(float64x2_t *)((char *)v12 + 168) = v152;
  v12[19].f64[0] = v144.f64[0];
  v12[18] = v153;
  v12[26].f64[1] = v142.f64[0];
  *(float64x2_t *)((char *)v12 + 408) = v154;
  v152.f64[0] = v282;
  v6[51].f64[0] = v282;
  v6[59].f64[0] = v152.f64[0];
  v6[67].f64[0] = v152.f64[0];
  v155 = v277;
  v156 = *(float64x2_t *)((char *)v278 + 8);
  v144.f64[0] = v278[1].f64[1];
  v157 = v279;
  v142.f64[0] = v280;
  v12[56].f64[1] = v278[0].f64[0];
  *(float64x2_t *)((char *)v12 + 888) = v155;
  v12[64].f64[0] = v144.f64[0];
  v12[63] = v156;
  v12[71].f64[1] = v142.f64[0];
  *(float64x2_t *)((char *)v12 + 1128) = v157;
  v6[96].f64[0] = result;
  v6[104].f64[0] = result;
  v6[112].f64[0] = result;
  return result;
}

void sub_20F4BB8D4(uint64_t a1, float64x2_t *a2, uint64_t a3, uint64_t a4, float64x2_t *a5, uint64_t a6, uint64_t a7, float64x2_t a8, double a9, float64x2_t a10)
{
  int8x16_t v14;
  int8x16_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  double v19;
  float64x2_t v20;
  float64x2_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v27;
  int64x2_t v28;
  uint64_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  int8x16_t v36;
  float64x2_t v37;
  double v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  int8x16_t v42;
  int8x16_t v43;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  int8x16_t v54;
  float64x2_t v55;
  float64x2_t v57;
  float64x2_t v58;
  double v59;
  float64x2_t v61;
  int64x2_t v63;
  int8x16_t v64;
  int64x2_t v66;
  float64x2_t v68;
  double v69;
  double v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  uint64_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v91;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  int8x16_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  uint64_t i;
  float64x2_t *v103;
  float64x2_t v104;
  char v105;
  float64x2_t v106;
  float64x2_t v107;
  int v108;
  float64x2_t v109;
  float64x2_t v110;
  int8x16_t v111;
  float64x2_t v112;
  float64x2_t v113;
  int8x16_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v122;
  double v124;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  int8x16_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v151;
  double v152;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  int8x16_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  double v162;
  float64x2_t v163;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  uint64_t v168;
  float64x2_t v169;
  int8x16_t v170;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  double v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  uint64_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  int64x2_t v187;
  float64x2_t v188;
  double v189;
  int64x2_t v190;
  float64x2_t v196;
  float64x2_t v197;
  uint64_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  int8x16_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  uint64_t j;
  float64x2_t *v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  uint64_t v236;
  uint64_t v237;
  double v238;
  float64x2_t *v240;
  double v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64_t v264;
  uint64_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  uint64_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  uint64_t v280;
  float64x2_t v281;
  uint64_t v282;
  uint64_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  int64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  int64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  double v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  uint64_t v299;
  float64x2_t v300;
  uint64_t v301;
  int64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  char v309;
  float64x2_t v310;
  int64x2_t v311;
  float64x2_t v312;
  double v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  double v319;
  float64x2_t v320;
  unint64_t v321;
  float64x2_t v322;
  float64_t v323;
  float64x2_t v324;
  float64_t v325;
  float64x2_t v326;
  uint64_t v327;
  double v328;
  float64x2_t v329;
  uint64_t v330;
  float64x2_t v331;
  float64x2_t v332;
  double v333;
  float64x2_t v334;
  int64x2_t v335[4];
  _BYTE v336[144];
  _BYTE v337[32];
  float64x2_t v338;
  _BYTE v339[32];
  float64x2_t v340;
  uint64_t v341;
  float64x2_t v342;
  uint64_t v343;
  float64x2_t v344;
  _BYTE v345[32];
  float64x2_t v346;
  _BYTE v347[32];
  float64x2_t v348;
  _BYTE v349[32];
  float64x2_t v350;
  _BYTE v351[80];
  float64x2_t v352;
  _BYTE v353[32];
  float64x2_t v354;
  _BYTE v355[32];
  float64x2_t v356;
  _BYTE v357[32];
  float64x2_t v358;
  _BYTE v359[32];
  float64x2_t v360;
  _BYTE v361[80];
  float64x2_t v362;
  _BYTE v363[32];
  float64x2_t v364;
  double v365;
  float64x2_t v366;
  _BYTE v367[32];
  float64x2_t v368;
  double v369;
  _BYTE v370[64];
  double v371;
  float64x2_t v372;
  _BYTE v373[32];
  float64x2_t v374;
  double v375;
  float64x2_t v376;
  _OWORD v377[2];
  float64x2_t v378;
  double v379;
  float64x2_t v380;
  _BYTE v381[32];
  float64x2_t v382;
  uint64_t v383;
  float64x2_t v384;
  __int128 v385;
  __int128 v386;
  float64x2_t v387;
  double v388;
  float64x2_t v389;
  __int128 v390;
  __int128 v391;
  float64x2_t v392;
  _OWORD v393[5];
  __int128 v394;

  a8.f64[0] = *(float64_t *)(a1 + 16);
  v245 = a8;
  v255 = *(float64x2_t *)a1;
  v14 = vextq_s8((int8x16_t)v255, (int8x16_t)v255, 8uLL);
  v330 = v14.i64[0];
  v14.i64[0] = *(_QWORD *)(a1 + 40);
  v244 = (float64x2_t)v14;
  v253 = *(float64x2_t *)(a1 + 24);
  v15 = vextq_s8((int8x16_t)v253, (int8x16_t)v253, 8uLL);
  v327 = v15.i64[0];
  v15.i64[0] = *(_QWORD *)(a1 + 64);
  v246 = (float64x2_t)v15;
  v251 = *(float64x2_t *)(a1 + 48);
  v16 = (float64x2_t)vextq_s8((int8x16_t)v251, (int8x16_t)v251, 8uLL);
  v325 = v16.f64[0];
  v16.f64[0] = *(float64_t *)(a7 + 24);
  a10.f64[0] = *(float64_t *)(a6 + 24);
  v17 = vsubq_f64(v16, a10);
  v249 = vsubq_f64(*(float64x2_t *)(a7 + 8), *(float64x2_t *)(a6 + 8));
  v18 = (float64x2_t)vextq_s8((int8x16_t)v249, (int8x16_t)v249, 8uLL);
  v323 = v18.f64[0];
  v18.f64[0] = *(float64_t *)(a7 + 48);
  a10.f64[0] = *(float64_t *)(a6 + 48);
  v242 = vsubq_f64(v18, a10);
  v243 = v17;
  v247 = vsubq_f64(*(float64x2_t *)(a7 + 32), *(float64x2_t *)(a6 + 32));
  v321 = vextq_s8((int8x16_t)v247, (int8x16_t)v247, 8uLL).u64[0];
  sub_20F4BA308(a1, a4, a6, a7);
  v19 = *(double *)a7;
  v20.f64[0] = *(float64_t *)(a6 + 48);
  v21 = vaddq_f64(vmulq_f64(v247, (float64x2_t)0), *(float64x2_t *)(a6 + 32));
  *(_QWORD *)&v375 = *(_OWORD *)&vsubq_f64(vmulq_f64(v244, v21), vmulq_laneq_f64(v245, v21, 1));
  v22 = (int8x16_t)vaddq_f64(vmulq_f64(v242, (float64x2_t)0), v20);
  v23 = (int8x16_t)vnegq_f64(v245);
  v24 = (int8x16_t)vnegq_f64(v255);
  v25 = (int8x16_t)vnegq_f64(v246);
  v26 = (int8x16_t)vnegq_f64(v251);
  v27 = v23.i64[0];
  v334 = (float64x2_t)v23;
  v374 = vsubq_f64(vmulq_n_f64(v253, v21.f64[0]), vmulq_laneq_f64(v255, v21, 1));
  *(float64x2_t *)&v373[16] = vsubq_f64(vmulq_n_f64((float64x2_t)vextq_s8(v26, v25, 8uLL), v21.f64[0]), vmulq_n_f64((float64x2_t)vextq_s8(v24, v23, 8uLL), *(double *)v22.i64));
  v28 = (int64x2_t)vnegq_f64(v244);
  v29 = v28.i64[0];
  v315 = (float64x2_t)v28;
  v30 = vmulq_f64((float64x2_t)vzip1q_s64(v28, (int64x2_t)v26), (float64x2_t)vzip1q_s64((int64x2_t)v22, (int64x2_t)v21));
  v317 = (float64x2_t)v25;
  v31 = vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v25, (int64x2_t)v24), (float64x2_t)vextq_s8((int8x16_t)v21, v22, 8uLL));
  v28.i64[0] = *(_QWORD *)a6;
  v32 = vsubq_f64(v30, v31);
  v31.f64[0] = *(float64_t *)(a6 + 24);
  v33 = vsubq_f64(vmulq_laneq_f64(v251, v21, 1), vmulq_n_f64(v253, *(double *)v22.i64));
  v34 = *(float64x2_t *)(a6 + 8);
  v372 = v33;
  *(float64x2_t *)v373 = v32;
  *(_QWORD *)&v33.f64[0] = *(_OWORD *)&vnegq_f64(vaddq_f64(vmulq_f64(v243, (float64x2_t)0), v31));
  v35 = vaddq_f64(vmulq_f64(v249, (float64x2_t)0), v34);
  v36 = (int8x16_t)vnegq_f64(v35);
  v368 = (float64x2_t)vextq_s8(v36, (int8x16_t)v35, 8uLL);
  *(int8x16_t *)&v367[16] = vextq_s8((int8x16_t)*(unint64_t *)&v33.f64[0], v36, 8uLL);
  *(int8x16_t *)v367 = vextq_s8((int8x16_t)v35, (int8x16_t)vnegq_f64((float64x2_t)*(unint64_t *)&v33.f64[0]), 8uLL);
  v366 = (float64x2_t)vextq_s8((int8x16_t)*(unint64_t *)&v33.f64[0], (int8x16_t)*(unint64_t *)&v33.f64[0], 8uLL);
  v394 = xmmword_2102DD520;
  v37 = a5[1];
  v38 = v19 - *(double *)v28.i64;
  *(double *)v36.i64 = (v19 - *(double *)v28.i64) * 0.5;
  v39 = vmulq_n_f64(vmulq_f64(*a5, *a5), *(double *)v36.i64);
  v241 = *(double *)v36.i64;
  v335[0].i64[0] = *(_QWORD *)&v39.f64[0];
  v335[2].i64[0] = *(_QWORD *)&v39.f64[0];
  memset(&v336[48], 0, 24);
  *(float64_t *)&v336[40] = v39.f64[1];
  memset(&v336[16], 0, 24);
  *(float64x2_t *)v336 = v39;
  *(float64_t *)&v336[72] = v39.f64[1];
  memset(&v336[120], 0, 24);
  v40 = vmulq_n_f64(vmulq_f64(v37, v37), *(double *)v36.i64);
  *(float64_t *)&v336[80] = v40.f64[0];
  *(float64_t *)&v336[112] = v40.f64[0];
  v318 = (float64x2_t)v24;
  v314 = vnegq_f64(v253);
  v237 = vextq_s8((int8x16_t)v314, (int8x16_t)v314, 8uLL).u64[0];
  *(_QWORD *)&v238 = vextq_s8(v24, v24, 8uLL).u64[0];
  v338.f64[0] = 0.0;
  memset(v339, 0, 24);
  *(_OWORD *)&v337[16] = 0u;
  *(float64x2_t *)v337 = v40;
  v338.f64[1] = v40.f64[1];
  *(float64_t *)&v339[24] = v40.f64[1];
  v316 = (float64x2_t)v26;
  v236 = vextq_s8(v26, v26, 8uLL).u64[0];
  v384 = 0u;
  v385 = 0u;
  v386 = 0u;
  v387 = 0u;
  v388 = 0.0;
  v378 = 0u;
  v376 = 0u;
  memset(v377, 0, sizeof(v377));
  v379 = 0.0;
  v389 = 0u;
  v390 = 0u;
  v391 = 0u;
  v392 = 0u;
  memset(v393, 0, sizeof(v393));
  memset(&v370[8], 0, 24);
  memset(&v370[40], 0, 24);
  v369 = 0.0;
  *(_QWORD *)v370 = 0xBFF0000000000000;
  *(_QWORD *)&v370[32] = 0xBFF0000000000000;
  v371 = -1.0;
  v380 = (float64x2_t)v24;
  *(float64x2_t *)&v381[8] = v314;
  *(_QWORD *)v381 = v27;
  *(_QWORD *)&v381[24] = v29;
  v382 = (float64x2_t)v26;
  v383 = v25.i64[0];
  memset(&v335[0].u64[1], 0, 24);
  memset(&v335[2].u64[1], 0, 24);
  memset(&v336[88], 0, 24);
  bzero(&v340, 0x288uLL);
  sub_20F4C010C(a2, &v366, v38 * 0.166666667);
  v240 = a5;
  v41 = vmulq_f64(*a5, *a5);
  v42 = (int8x16_t)vmulq_n_f64(vmulq_f64(a5[1], a5[1]), v38 * 0.166666667);
  *(_OWORD *)(a3 + 24) = 0u;
  v43 = (int8x16_t)vmulq_n_f64(v41, v38 * 0.166666667);
  *(_QWORD *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_QWORD *)a3 = v43.i64[0];
  *(_QWORD *)(a3 + 32) = v43.i64[0];
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_QWORD *)(a3 + 128) = 0;
  *(int8x16_t *)(a3 + 64) = v43;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_QWORD *)(a3 + 104) = v43.i64[1];
  *(int8x16_t *)(a3 + 136) = vextq_s8(v43, v42, 8uLL);
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_QWORD *)(a3 + 200) = 0;
  *(_QWORD *)(a3 + 176) = v42.i64[0];
  *(_QWORD *)(a3 + 272) = 0;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(int8x16_t *)(a3 + 208) = v42;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_QWORD *)(a3 + 248) = v42.i64[1];
  *(_QWORD *)(a3 + 280) = v42.i64[1];
  bzero((void *)(a3 + 288), 0x288uLL);
  sub_20F4C010C(&v366, &v366, v241);
  __asm { FMOV            V1.2D, #0.5 }
  v49.f64[0] = *(float64_t *)(a6 + 24);
  v50 = vaddq_f64(vmulq_f64(v249, _Q1), *(float64x2_t *)(a6 + 8));
  v51.f64[1] = v247.f64[1];
  v51.f64[0] = *(float64_t *)(a6 + 48);
  v52 = vaddq_f64(vmulq_f64(v242, _Q1), v51);
  v53 = vaddq_f64(vmulq_f64(v247, _Q1), *(float64x2_t *)(a6 + 32));
  v54 = (int8x16_t)vnegq_f64(vaddq_f64(vmulq_f64(v243, _Q1), v49));
  v55 = vnegq_f64(v50);
  _D15 = v244.f64[0];
  v57 = vmlsq_f64(vmulq_laneq_f64(v246, v53, 1), v244, v52);
  v58 = vmlsq_lane_f64(vmulq_laneq_f64(v251, v53, 1), v253, v52.f64[0], 0);
  *(_QWORD *)&v59 = *(_OWORD *)&vmlsq_f64(vmulq_f64(v245, v52), v246, v53);
  _Q6 = vmlsq_lane_f64(vmulq_n_f64(v255, v52.f64[0]), v251, v53.f64[0], 0);
  v61.f64[0] = v366.f64[0];
  *(_QWORD *)&v52.f64[0] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_f64(v244, v53), v245, v53, 1);
  _Q16 = vmlsq_laneq_f64(vmulq_n_f64(v253, v53.f64[0]), v255, v53, 1);
  v63.i64[0] = *(_QWORD *)v367;
  v64.i64[0] = *(_QWORD *)&v367[24];
  v386 = *(_OWORD *)&v373[16];
  v387 = v374;
  _Q25.i64[1] = *(_QWORD *)&v367[16];
  *(double *)v66.i64 = v369;
  _Q27.i64[0] = *(_QWORD *)&v370[16];
  v384 = v372;
  v385 = *(_OWORD *)v373;
  v372 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v58, v366.f64[0]), _Q6, v366, 1), _Q16, *(double *)v367);
  v68.f64[0] = *(float64_t *)v370;
  v69 = v375;
  v70 = v379;
  *(float64x2_t *)&v373[8] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v58, *(double *)&v367[8]), _Q6, *(float64x2_t *)&v367[8], 1), _Q16, *(double *)&v367[24]);
  *(_QWORD *)v373 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v57.f64[0], v366.f64[0]), v366.f64[1], v59), *(double *)v367, v52.f64[0]);
  *(_QWORD *)&v373[24] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v57.f64[0], *(double *)&v367[8]), *(double *)&v367[16], v59), *(double *)&v367[24], v52.f64[0]);
  v374 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v58, v368.f64[0]), _Q6, v368, 1), _Q16, v369);
  v391 = v377[1];
  v392 = v378;
  v71 = (float64x2_t)vzip1q_s64((int64x2_t)v54, (int64x2_t)v55);
  v72 = (float64x2_t)vextq_s8((int8x16_t)v55, v54, 8uLL);
  v390 = v377[0];
  v389 = v376;
  *(_OWORD *)((char *)&v393[2] + 8) = *(_OWORD *)&v381[16];
  *(float64x2_t *)((char *)&v393[3] + 8) = v382;
  *(float64x2_t *)((char *)v393 + 8) = v380;
  *(_OWORD *)((char *)&v393[1] + 8) = *(_OWORD *)v381;
  v376 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v58, *(double *)v370), _Q6, *(float64x2_t *)v370, 1), _Q16, *(double *)&v370[16]);
  v73 = (float64x2_t)vextq_s8((int8x16_t)v366, v64, 8uLL);
  v375 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v57.f64[0], v368.f64[0]), v368.f64[1], v59), v369, v52.f64[0]);
  v74 = (float64x2_t)vzip1q_s64(v63, (int64x2_t)v366);
  v75 = (float64x2_t)vextq_s8((int8x16_t)v366, (int8x16_t)v63, 8uLL);
  v61.f64[1] = *(float64_t *)&v367[16];
  v76 = vmulq_f64(v71, *(float64x2_t *)&v367[8]);
  *(_QWORD *)&v377[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v57.f64[0], *(double *)v370), *(double *)&v370[8], v59), *(double *)&v370[16], v52.f64[0]);
  v77 = vaddq_f64(v76, vmulq_f64(v50, (float64x2_t)vzip1q_s64((int64x2_t)v64, *(int64x2_t *)&v367[8])));
  v76.f64[0] = *(float64_t *)&v370[40];
  *(double *)_Q25.i64 = v371;
  *(float64x2_t *)((char *)v377 + 8) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v58, *(double *)&v370[24]), _Q6, *(float64x2_t *)&v370[24], 1), _Q16, *(double *)&v370[40]);
  v378 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v58, *(double *)&v370[48]), _Q6, *(float64x2_t *)&v370[48], 1), _Q16, v371);
  *((_QWORD *)&v377[1] + 1) = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v57.f64[0], *(double *)&v370[24]), *(double *)&v370[32], v59), *(double *)&v370[40], v52.f64[0]);
  v379 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v57.f64[0], *(double *)&v370[48]), *(double *)&v370[56], v59), v371, v52.f64[0]);
  v78 = vsubq_f64(vmulq_f64(v55, v73), vmulq_f64(v72, v61));
  *(_QWORD *)&v61.f64[0] = *(_OWORD *)&vsubq_f64(vmulq_laneq_f64(v55, v368, 1), vmulq_laneq_f64(v368, v55, 1));
  v366 = vsubq_f64(vmulq_f64(v72, v74), vmulq_f64(v71, v75));
  *(float64x2_t *)v367 = v78;
  *(float64x2_t *)&v367[16] = v77;
  v368 = vsubq_f64(vmulq_f64(v72, (float64x2_t)vzip1q_s64(v66, (int64x2_t)v368)), vmulq_f64(v71, (float64x2_t)vextq_s8((int8x16_t)v368, (int8x16_t)v66, 8uLL)));
  v68.f64[1] = *(float64_t *)&v370[32];
  v79 = vsubq_f64(vmulq_f64(v55, (float64x2_t)vextq_s8(*(int8x16_t *)v370, (int8x16_t)v76, 8uLL)), vmulq_f64(v72, v68));
  *(float64x2_t *)&v361[8] = vnegq_f64(*(float64x2_t *)&v336[8]);
  *(float64x2_t *)&v361[56] = vnegq_f64(*(float64x2_t *)&v336[56]);
  v80 = v383;
  v81 = vaddq_f64(vmulq_f64(v71, *(float64x2_t *)&v370[24]), vmulq_f64(v50, (float64x2_t)vzip1q_s64((int64x2_t)v76, *(int64x2_t *)&v370[24])));
  v82 = vmulq_laneq_f64(v55, *(float64x2_t *)&v370[48], 1);
  v83 = vsubq_f64(v82, vmulq_laneq_f64(*(float64x2_t *)&v370[48], v55, 1));
  *(_QWORD *)&v82.f64[0] = v394;
  *(float64x2_t *)&v370[48] = vsubq_f64(vmulq_f64(v72, (float64x2_t)vzip1q_s64(_Q25, *(int64x2_t *)&v370[48])), vmulq_f64(v71, (float64x2_t)vextq_s8(*(int8x16_t *)&v370[48], (int8x16_t)_Q25, 8uLL)));
  *(float64x2_t *)&v370[16] = v79;
  v369 = v61.f64[0];
  *(_QWORD *)&v371 = *(_OWORD *)&vsubq_f64(v83, v82);
  *(float64x2_t *)v370 = vsubq_f64(vsubq_f64(vmulq_f64(v72, (float64x2_t)vzip1q_s64(_Q27, *(int64x2_t *)v370)), vmulq_f64(v71, (float64x2_t)vextq_s8(*(int8x16_t *)v370, (int8x16_t)_Q27, 8uLL))), (float64x2_t)(unint64_t)v394);
  *(float64x2_t *)&v370[32] = vsubq_f64(v81, (float64x2_t)(unint64_t)v394);
  *((_QWORD *)&v394 + 1) = v394;
  v84 = vmulq_f64(v82, v334);
  _Q20 = vmulq_n_f64(v318, *(double *)&v394);
  _Q23 = (int8x16_t)vmulq_n_f64(v314, *(double *)&v394);
  v380 = _Q20;
  *(int8x16_t *)&v381[8] = _Q23;
  *(float64_t *)v381 = v84.f64[0];
  *(_QWORD *)&v381[24] = *(_OWORD *)&vmulq_f64(v82, v315);
  v383 = *(_OWORD *)&vmulq_f64(v82, v317);
  v382 = vmulq_n_f64(v316, *(double *)&v394);
  *(_QWORD *)&v84.f64[0] = v335[1].i64[0];
  *(_QWORD *)&v82.f64[0] = v335[0].i64[0];
  *(_QWORD *)&_Q20.f64[0] = v335[2].i64[1];
  v87 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v335[0], v58.f64[0]), *(float64x2_t *)((char *)&v335[1] + 8), _Q6.f64[0]);
  *(double *)_Q25.i64 = vmlad_n_f64(*(double *)v335[1].i64 * v58.f64[0], *(double *)&v335[2].i64[1], _Q6.f64[0]);
  _Q23.i64[0] = *(_QWORD *)v336;
  v88 = vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)v335[0], v58, 1), *(float64x2_t *)((char *)&v335[1] + 8), _Q6, 1);
  __asm { FMLA            D27, D20, V6.D[1] }
  v89 = (float64x2_t)v335[3];
  __asm { FMLA            D27, D23, V16.D[1] }
  *(_QWORD *)v363 = vmlad_n_f64(*(double *)_Q25.i64, *(double *)v336, _Q16.f64[0]);
  v362 = vmlaq_n_f64(v87, (float64x2_t)v335[3], _Q16.f64[0]);
  *(float64x2_t *)&v363[8] = vmlaq_laneq_f64(v88, (float64x2_t)v335[3], _Q16, 1);
  *(_QWORD *)&v363[24] = _Q27.i64[0];
  v364 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v335[0], v57.f64[0]), *(float64x2_t *)((char *)&v335[1] + 8), v59), (float64x2_t)v335[3], v52.f64[0]);
  v365 = vmlad_n_f64(vmlad_n_f64(vmulq_f64(v84, v57).f64[0], *(double *)&v335[2].i64[1], v59), *(double *)v336, v52.f64[0]);
  _Q5 = (float64x2_t)vextq_s8((int8x16_t)v335[3], _Q23, 8uLL);
  v91 = (float64x2_t)vextq_s8((int8x16_t)v335[0], (int8x16_t)v84, 8uLL);
  v308 = vsubq_f64(vaddq_f64(vmulq_f64(v71, *(float64x2_t *)((char *)&v335[1] + 8)), vmulq_f64(v50, (float64x2_t)vzip1q_s64((int64x2_t)_Q20, *(int64x2_t *)((char *)&v335[1] + 8)))), vsubq_f64(vmulq_n_f64(_Q5, v55.f64[0]), vmulq_n_f64(v91, *(double *)v54.i64)));
  _Q3 = vsubq_f64(vsubq_f64(vmulq_f64(v72, (float64x2_t)vzip1q_s64((int64x2_t)_Q23, v335[3])), vmulq_f64(v71, _Q5)), vsubq_f64(vmulq_laneq_f64((float64x2_t)v335[0], v55, 1), vmulq_n_f64(*(float64x2_t *)((char *)&v335[1] + 8), v55.f64[0])));
  v335[3] = (int64x2_t)_Q3;
  _Q3.f64[0] = *(float64_t *)&v336[72];
  *(float64x2_t *)&v361[40] = vnegq_f64(*(float64x2_t *)&v336[40]);
  *(float64x2_t *)&v361[24] = vnegq_f64(*(float64x2_t *)&v336[24]);
  *(_QWORD *)&v361[72] = *(_OWORD *)&vnegq_f64(_Q3);
  _Q3.f64[0] = *(float64_t *)&v337[24];
  *(float64x2_t *)&v355[8] = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v318, *(double *)&v337[8]), v253, *(float64x2_t *)&v337[8], 1), v251, *(double *)&v337[24], 0);
  _Q5.f64[0] = *(float64_t *)&v337[16];
  __asm { FMLS            D16, D5, V15.D[0] }
  _Q25.i64[0] = *(_QWORD *)&v246.f64[0];
  __asm { FMLS            D16, D3, V25.D[0] }
  *(float64_t *)&v355[24] = _Q16.f64[0];
  _Q5.f64[0] = v338.f64[1];
  __asm { FMLS            D3, D5, V15.D[0] }
  _Q5.f64[0] = *(float64_t *)v339;
  _Q16.f64[0] = *(float64_t *)&v339[24];
  __asm { FMLS            D3, D5, V25.D[0] }
  *(float64_t *)v357 = _Q3.f64[0];
  v356 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v318, v338.f64[0]), v253, v338, 1), v251, *(double *)v339, 0);
  *(float64x2_t *)&v357[8] = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v318, *(double *)&v339[8]), v253, *(float64x2_t *)&v339[8], 1), v251, *(double *)&v339[24], 0);
  _Q5.f64[0] = *(float64_t *)&v339[16];
  __asm
  {
    FMLS            D3, D5, V15.D[0]
    FMLS            D3, D16, V25.D[0]
  }
  *(float64_t *)&v357[24] = _Q3.f64[0];
  v360 = *(float64x2_t *)&v336[128];
  *(_OWORD *)&v359[16] = *(_OWORD *)&v336[112];
  v358 = *(float64x2_t *)&v336[80];
  *(_OWORD *)v359 = *(_OWORD *)&v336[96];
  *(_QWORD *)&v82.f64[1] = v335[2].i64[0];
  v93 = vmulq_f64(v71, (float64x2_t)vzip1q_s64((int64x2_t)_Q20, (int64x2_t)v89));
  v94 = vmulq_laneq_f64(v55, v89, 1);
  v95 = vmulq_laneq_f64(v89, v55, 1);
  v306 = vsubq_f64(vsubq_f64(vmulq_f64(v72, (float64x2_t)vzip1q_s64((int64x2_t)v84, v335[0])), vmulq_f64(v71, v91)), vsubq_f64(vmulq_n_f64(*(float64x2_t *)((char *)&v335[1] + 8), *(double *)v54.i64), v95));
  *(_QWORD *)v336 = *(_OWORD *)&vsubq_f64(vsubq_f64(v94, v95), vaddq_f64(vmulq_laneq_f64(v84, v55, 1), vmulq_f64(v50, _Q20)));
  v388 = v69;
  *(double *)v393 = v70;
  *((_QWORD *)&v393[4] + 1) = v80;
  *(_QWORD *)&v394 = 0;
  v335[2] = (int64x2_t)v308;
  v335[1] = (int64x2_t)vsubq_f64(vsubq_f64(vmulq_f64(v55, (float64x2_t)vextq_s8((int8x16_t)v335[0], (int8x16_t)_Q20, 8uLL)), vmulq_f64(v72, v82)), vsubq_f64(v93, vmulq_f64(v72, (float64x2_t)vzip1q_s64((int64x2_t)_Q23, v335[0]))));
  v335[0] = (int64x2_t)v306;
  *(_QWORD *)v361 = *(_QWORD *)v337;
  bzero(&v336[16], 0x238uLL);
  v96 = (int8x16_t)vmulq_f64(v240[1], v240[1]);
  v97.f64[0] = v306.f64[0];
  v97.f64[1] = v308.f64[0];
  *(_QWORD *)&v98.f64[1] = v335[1].i64[1];
  v98.f64[0] = *(float64_t *)v336;
  v99 = vmulq_f64(*v240, *v240);
  *(_QWORD *)&v98.f64[0] = *(_OWORD *)&vaddq_f64(v98, v99);
  v100 = vaddq_f64(v97, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v99.f64[0], 0));
  v335[2].i64[0] = *(_QWORD *)&v100.f64[1];
  v335[0].i64[0] = *(_QWORD *)&v100.f64[0];
  v98.f64[1] = v99.f64[1];
  *(float64_t *)&v336[40] = v99.f64[1];
  *(float64x2_t *)v336 = v98;
  *(int8x16_t *)&v336[72] = vextq_s8((int8x16_t)v99, v96, 8uLL);
  *(_QWORD *)&v338.f64[1] = v96.i64[1];
  *(_QWORD *)&v336[112] = v96.i64[0];
  *(int8x16_t *)v337 = v96;
  *(_QWORD *)&v339[24] = v96.i64[1];
  v319 = v38 * 0.333333333;
  sub_20F4C0164(a2, &v366, v38 * 0.333333333);
  for (i = 0; i != 58; i += 2)
  {
    v103 = (float64x2_t *)(a3 + i * 16);
    v104 = vaddq_f64(*(float64x2_t *)(a3 + i * 16 + 16), vmulq_n_f64((float64x2_t)v335[i + 1], v319));
    *v103 = vaddq_f64(*(float64x2_t *)(a3 + i * 16), vmulq_n_f64((float64x2_t)v335[i], v319));
    v103[1] = v104;
  }
  v105 = 0;
  *(double *)(a3 + 928) = *(double *)(a3 + 928) + v319 * v365;
  v106.f64[0] = v314.f64[0];
  v107.f64[0] = v316.f64[0];
  v234 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v316.f64[0], 0);
  v235 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v314.f64[0], 0);
  v232 = (float64x2_t)vdupq_lane_s64(v236, 0);
  v233 = (float64x2_t)vdupq_lane_s64(v237, 0);
  v230 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v317.f64[0], 0);
  v231 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v315.f64[0], 0);
  v108 = 1;
  v101.f64[0] = 0.5;
  v109.f64[0] = v249.f64[0];
  v109.f64[1] = v323;
  v250 = v109;
  v109.f64[0] = v247.f64[0];
  *(_QWORD *)&v109.f64[1] = v321;
  v248 = v109;
  v109.f64[0] = v251.f64[0];
  v109.f64[1] = v325;
  v252 = v109;
  v109.f64[0] = v253.f64[0];
  *(_QWORD *)&v109.f64[1] = v327;
  v254 = v109;
  v109.f64[0] = v255.f64[0];
  *(_QWORD *)&v109.f64[1] = v330;
  v256 = v109;
  v110.f64[0] = v318.f64[0];
  v110.f64[1] = v238;
  *(_QWORD *)&v106.f64[1] = v237;
  v228 = v106;
  v229 = v110;
  *(_QWORD *)&v107.f64[1] = v236;
  v227 = v107;
  do
  {
    v331 = v101;
    v309 = v105;
    v328 = v241 * (double)v108;
    sub_20F4C010C(&v366, &v366, v328);
    v335[2] = (int64x2_t)vmulq_n_f64((float64x2_t)v335[2], v328);
    v335[3] = (int64x2_t)vmulq_n_f64((float64x2_t)v335[3], v328);
    *(float64x2_t *)&v336[112] = vmulq_n_f64(*(float64x2_t *)&v336[112], v328);
    *(float64x2_t *)&v336[128] = vmulq_n_f64(*(float64x2_t *)&v336[128], v328);
    *(float64x2_t *)&v337[16] = vmulq_n_f64(*(float64x2_t *)&v337[16], v328);
    v338 = vmulq_n_f64(v338, v328);
    v259 = vmulq_n_f64(*(float64x2_t *)&v339[16], v328);
    v260 = vmulq_n_f64(v346, v328);
    v111 = (int8x16_t)vmulq_n_f64(*(float64x2_t *)v355, v328);
    v261 = vmulq_n_f64(v358, v328);
    v268 = vmulq_n_f64(*(float64x2_t *)&v359[16], v328);
    v262 = vmulq_n_f64(*(float64x2_t *)&v361[64], v328);
    v112 = vmulq_n_f64(v362, v328);
    v113.f64[1] = *(float64_t *)&v363[24];
    v114 = (int8x16_t)vmulq_n_f64(*(float64x2_t *)v363, v328);
    v115 = vmulq_n_f64(*(float64x2_t *)&v363[16], v328);
    v113.f64[0] = *(float64_t *)(a6 + 24);
    v304 = vaddq_f64(vmulq_f64(v243, v331), v113);
    v116 = *(float64x2_t *)(a6 + 8);
    v320 = vaddq_f64(vmulq_n_f64(v250, v331.f64[0]), v116);
    v116.f64[0] = *(float64_t *)(a6 + 48);
    v117 = vaddq_f64(vmulq_f64(v242, v331), v116);
    v118 = vaddq_f64(vmulq_n_f64(v248, v331.f64[0]), *(float64x2_t *)(a6 + 32));
    v119 = vmlsq_lane_f64(vmulq_laneq_f64(v252, v118, 1), v254, v117.f64[0], 0);
    v120 = vmlsq_f64(vmulq_laneq_f64(v246, v118, 1), v244, v117);
    _Q28 = vmlsq_lane_f64(vmulq_n_f64(v256, v117.f64[0]), v252, v118.f64[0], 0);
    v122 = vmlsq_f64(vmulq_f64(v245, v117), v246, v118);
    _Q27 = vmlsq_laneq_f64(vmulq_n_f64(v254, v118.f64[0]), v256, v118, 1);
    *(_QWORD *)&v124 = *(_OWORD *)&vmlsq_laneq_f64(vmulq_f64(v244, v118), v245, v118, 1);
    _Q17.f64[0] = v366.f64[0];
    v126.f64[0] = *(float64_t *)v370;
    *(int8x16_t *)v355 = v111;
    *(float64x2_t *)&v355[16] = vmulq_n_f64(*(float64x2_t *)&v355[16], v328);
    *(int8x16_t *)v363 = v114;
    v111.i64[0] = *(_QWORD *)v367;
    v114.i64[0] = *(_QWORD *)&v367[24];
    v127 = (float64x2_t)vzip1q_s64((int64x2_t)v111, (int64x2_t)v366);
    v128 = vnegq_f64(v320);
    v303 = vnegq_f64(v304);
    v129 = (float64x2_t)vextq_s8((int8x16_t)v128, (int8x16_t)v303, 8uLL);
    v130 = (float64x2_t)vzip1q_s64((int64x2_t)v303, (int64x2_t)v128);
    _Q2 = vmulq_f64(v130, (float64x2_t)vextq_s8((int8x16_t)v366, v111, 8uLL));
    v294 = vsubq_f64(vmulq_f64(v129, v127), _Q2);
    *(float64_t *)&v363[16] = v115.f64[0];
    v284 = v112;
    _Q2.f64[0] = vmlad_n_f64(vmuld_n_f64(v120.f64[0], v112.f64[0]), v112.f64[1], v122.f64[0]);
    v356 = vmulq_n_f64(v356, v328);
    *(float64x2_t *)v357 = vmulq_n_f64(*(float64x2_t *)v357, v328);
    *(float64x2_t *)&v357[16] = vmulq_n_f64(*(float64x2_t *)&v357[16], v328);
    v118.f64[0] = *(float64_t *)v363;
    v132 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, v112.f64[0]), _Q28, v112, 1), _Q27, *(double *)v363);
    v286 = v118;
    v112.f64[0] = v115.f64[1];
    v287 = v112;
    v133 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, *(double *)&v363[8]), _Q28, *(float64x2_t *)&v363[8], 1), _Q27, v115.f64[1]);
    v291 = v133;
    v134.f64[1] = v356.f64[1];
    v288 = (int64x2_t)v132;
    v135 = vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(*(float64x2_t *)&v355[8], v318.f64[0]), v235, v356), v234, *(float64x2_t *)&v357[8]), (float64x2_t)vzip1q_s64((int64x2_t)v132, (int64x2_t)v133));
    v335[0] = (int64x2_t)vmulq_n_f64((float64x2_t)v335[0], v328);
    v335[1] = (int64x2_t)vmulq_n_f64((float64x2_t)v335[1], v328);
    v364 = vmulq_n_f64(v364, v328);
    v365 = v328 * v365;
    _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)v363, v124);
    v115.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v120.f64[0], *(double *)&v363[8]), v115.f64[0], v122.f64[0]), v115.f64[1], v124);
    v293 = v115;
    v117.f64[1] = v364.f64[1];
    v289 = v364;
    v117.f64[0] = v365;
    v290 = v117;
    v136 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, v364.f64[0]), _Q28, v364, 1), _Q27, v365);
    v117.f64[0] = *(float64_t *)&v355[24];
    v310 = v117;
    v117.f64[0] = *(float64_t *)v357;
    v311 = (int64x2_t)v117;
    v133.f64[0] = *(double *)&v355[24] * v318.f64[0]
                + *(double *)v357 * v314.f64[0]
                + *(double *)&v357[24] * v316.f64[0];
    v313 = *(double *)&v357[24];
    v292 = (int64x2_t)v136;
    v305 = vaddq_f64(_Q2, vaddq_f64(v133, v136));
    _Q2.f64[1] = v115.f64[0];
    v324 = *(float64x2_t *)&v355[8];
    v115.f64[1] = v334.f64[1];
    v326 = v356;
    v312 = *(float64x2_t *)&v357[8];
    *(float64x2_t *)v336 = vmulq_n_f64(*(float64x2_t *)v336, v328);
    *(float64x2_t *)&v336[16] = vmulq_n_f64(*(float64x2_t *)&v336[16], v328);
    *(float64x2_t *)&v336[32] = vmulq_n_f64(*(float64x2_t *)&v336[32], v328);
    *(float64x2_t *)&v336[48] = vmulq_n_f64(*(float64x2_t *)&v336[48], v328);
    v307 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v318, *(double *)&v355[8]), v314, v356.f64[0]), v316, *(double *)&v357[8]), vaddq_f64(v132, v135));
    *(float64x2_t *)&v336[64] = vmulq_n_f64(*(float64x2_t *)&v336[64], v328);
    *(float64x2_t *)&v336[80] = vmulq_n_f64(*(float64x2_t *)&v336[80], v328);
    v137 = vaddq_f64(v136, vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(*(float64x2_t *)&v355[8], v334.f64[0]), v231, v356), v230, *(float64x2_t *)&v357[8]), _Q2));
    v300 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v318, *(double *)&v355[24]), v314, *(double *)v357), v316, *(double *)&v357[24]), v137);
    *(float64x2_t *)&v336[96] = vmulq_n_f64(*(float64x2_t *)&v336[96], v328);
    *(float64x2_t *)v337 = vmulq_n_f64(*(float64x2_t *)v337, v328);
    *(float64x2_t *)v339 = vmulq_n_f64(*(float64x2_t *)v339, v328);
    v117.f64[1] = v259.f64[1];
    *(float64x2_t *)&v339[16] = v259;
    v137.f64[0] = v369;
    v117.f64[0] = *(float64_t *)&v370[16];
    v298 = vsubq_f64(vmulq_f64(v129, (float64x2_t)vzip1q_s64((int64x2_t)v137, (int64x2_t)v368)), vmulq_f64(v130, (float64x2_t)vextq_s8((int8x16_t)v368, (int8x16_t)v137, 8uLL)));
    _Q17.f64[1] = *(float64_t *)&v367[16];
    v138 = v129;
    v297 = vsubq_f64(vmulq_f64(v128, (float64x2_t)vextq_s8((int8x16_t)v366, v114, 8uLL)), vmulq_f64(v129, _Q17));
    *(float64_t *)&v345[8] = vmulq_n_f64(*(float64x2_t *)v345, v328).f64[1];
    *(float64x2_t *)&v345[16] = vmulq_n_f64(*(float64x2_t *)&v345[16], v328);
    *(float64x2_t *)v347 = vmulq_n_f64(*(float64x2_t *)v347, v328);
    v278 = vaddq_f64(vmulq_f64(v130, *(float64x2_t *)&v367[8]), vmulq_f64(v320, (float64x2_t)vzip1q_s64((int64x2_t)v114, *(int64x2_t *)&v367[8])));
    *(float64x2_t *)&v347[16] = vmulq_n_f64(*(float64x2_t *)&v347[16], v328);
    v348 = vmulq_n_f64(v348, v328);
    v139 = (int8x16_t)vsubq_f64(vmulq_laneq_f64(v128, v368, 1), vmulq_laneq_f64(v368, v128, 1));
    v295 = *(double *)v139.i64;
    *(double *)v139.i64 = v371;
    v140 = vmulq_f64(v130, (float64x2_t)vextq_s8(*(int8x16_t *)&v370[48], v139, 8uLL));
    v267 = vsubq_f64(vmulq_f64(v129, (float64x2_t)vzip1q_s64((int64x2_t)v139, *(int64x2_t *)&v370[48])), v140);
    *(float64x2_t *)v349 = vmulq_n_f64(*(float64x2_t *)v349, v328);
    *(float64x2_t *)&v349[16] = vmulq_n_f64(*(float64x2_t *)&v349[16], v328);
    v350 = vmulq_n_f64(v350, v328);
    *(float64x2_t *)v351 = vmulq_n_f64(*(float64x2_t *)v351, v328);
    *(float64x2_t *)&v351[16] = vmulq_n_f64(*(float64x2_t *)&v351[16], v328);
    *(float64x2_t *)&v351[32] = vmulq_n_f64(*(float64x2_t *)&v351[32], v328);
    v141 = vmulq_f64(v129, (float64x2_t)vzip1q_s64((int64x2_t)v117, *(int64x2_t *)v370));
    v142 = v130;
    _Q23 = vsubq_f64(v141, vmulq_f64(v130, (float64x2_t)vextq_s8(*(int8x16_t *)v370, (int8x16_t)v117, 8uLL)));
    *(float64x2_t *)&v351[48] = vmulq_n_f64(*(float64x2_t *)&v351[48], v328);
    *(float64x2_t *)&v351[64] = vmulq_n_f64(*(float64x2_t *)&v351[64], v328);
    v352 = vmulq_n_f64(v352, v328);
    *(float64x2_t *)v353 = vmulq_n_f64(*(float64x2_t *)v353, v328);
    *(float64x2_t *)&v353[16] = vmulq_n_f64(*(float64x2_t *)&v353[16], v328);
    v354 = vmulq_n_f64(v354, v328);
    v117.f64[1] = v261.f64[1];
    v117.f64[0] = *(float64_t *)&v370[40];
    v126.f64[1] = *(float64_t *)&v370[32];
    v279 = vsubq_f64(vmulq_f64(v128, (float64x2_t)vextq_s8(*(int8x16_t *)v370, (int8x16_t)v117, 8uLL)), vmulq_f64(v129, v126));
    *(float64x2_t *)v359 = vmulq_n_f64(*(float64x2_t *)v359, v328);
    *(float64_t *)&v359[16] = v268.f64[0];
    v277 = vsubq_f64(vmulq_laneq_f64(v128, *(float64x2_t *)&v370[48], 1), vmulq_laneq_f64(*(float64x2_t *)&v370[48], v128, 1));
    v360 = vmulq_n_f64(v360, v328);
    *(float64x2_t *)v361 = vmulq_n_f64(*(float64x2_t *)v361, v328);
    *(float64x2_t *)&v361[16] = vmulq_n_f64(*(float64x2_t *)&v361[16], v328);
    *(float64x2_t *)&v361[32] = vmulq_n_f64(*(float64x2_t *)&v361[32], v328);
    *(float64x2_t *)&v361[48] = vmulq_n_f64(*(float64x2_t *)&v361[48], v328);
    *(float64_t *)&v361[64] = v262.f64[0];
    *(_QWORD *)&v136.f64[0] = v394;
    v275 = vsubq_f64(vaddq_f64(vmulq_f64(v130, *(float64x2_t *)&v370[24]), vmulq_f64(v320, (float64x2_t)vzip1q_s64((int64x2_t)v117, *(int64x2_t *)&v370[24]))), (float64x2_t)(unint64_t)v394);
    v276 = vsubq_f64(_Q23, (float64x2_t)(unint64_t)v394);
    _Q18 = (float64x2_t)vzip1q_s64((int64x2_t)v261, *(int64x2_t *)&v359[8]);
    v281 = vaddq_f64(v261, _Q18);
    _Q4 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v360, 1);
    _Q18.f64[0] = v268.f64[1];
    v282 = *(_OWORD *)&vaddq_f64(_Q18, _Q4);
    _Q4.f64[0] = *(float64_t *)v359;
    v280 = *(_OWORD *)&vaddq_f64(_Q4, v360);
    v146 = vaddq_f64(v360, (float64x2_t)vzip1q_s64((int64x2_t)_Q4, (int64x2_t)_Q18));
    v296 = v146;
    v147 = *(float64x2_t *)&v345[8];
    v148 = *(float64x2_t *)&v347[8];
    v130.f64[1] = *(float64_t *)&v373[24];
    v386 = *(_OWORD *)&v373[16];
    v387 = v374;
    v130.f64[0] = *(float64_t *)&v345[24];
    _Q4.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v120.f64[0], *(double *)&v345[8]), *(double *)&v345[16], v122.f64[0]), *(double *)&v345[24], v124);
    v134.f64[0] = *(float64_t *)&v336[96];
    v273 = vaddq_f64(v134, _Q4);
    v141.f64[0] = *(float64_t *)v347;
    v149.f64[1] = *(float64_t *)&v336[112];
    _Q23.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v120.f64[0], v260.f64[0]), v260.f64[1], v122.f64[0]), *(double *)v347, v124);
    v149.f64[0] = *(float64_t *)&v336[120];
    v269 = vaddq_f64(v149, _Q23);
    v149.f64[1] = v372.f64[1];
    v384 = v372;
    v385 = *(_OWORD *)v373;
    v149.f64[0] = *(float64_t *)&v347[24];
    _Q1 = vaddq_f64(*(float64x2_t *)&v336[128], vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, v148.f64[0]), _Q28, v148, 1), _Q27, *(double *)&v347[24]));
    v272 = _Q1;
    v146.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v120.f64[0], *(double *)&v347[8]), *(double *)&v347[16], v122.f64[0]), *(double *)&v347[24], v124);
    _Q4.f64[0] = *(float64_t *)v337;
    v151 = vaddq_f64(_Q4, v146);
    v152 = v375;
    v372 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, v366.f64[0]), _Q28, v366, 1), _Q27, *(double *)v367);
    _Q4.f64[1] = v352.f64[1];
    _Q23.f64[0] = v315.f64[0];
    __asm { FMLA            D1, D23, V4.D[1] }
    _Q21 = v317;
    v115.f64[0] = _Q1.f64[0] + v317.f64[0] * *(double *)v353;
    *(float64x2_t *)&v373[8] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, *(double *)&v367[8]), _Q28, *(float64x2_t *)&v367[8], 1), _Q27, *(double *)&v367[24]);
    _Q4.f64[1] = *(float64_t *)&v353[16];
    __asm { FMLA            D1, D23, V4.D[1] }
    v140.f64[0] = _Q1.f64[0] + v317.f64[0] * *(double *)&v353[24];
    *(_QWORD *)v373 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v120.f64[0], v366.f64[0]), v366.f64[1], v122.f64[0]), *(double *)v367, v124);
    *(_QWORD *)&v373[24] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v120.f64[0], *(double *)&v367[8]), *(double *)&v367[16], v122.f64[0]), *(double *)&v367[24], v124);
    v374 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, v368.f64[0]), _Q28, v368, 1), _Q27, v369);
    _Q4.f64[1] = v354.f64[1];
    __asm { FMLA            D1, D23, V4.D[1] }
    _Q1.f64[0] = _Q1.f64[0] + v317.f64[0] * *(double *)v355;
    v285 = vaddq_f64(vaddq_f64(*(float64x2_t *)&v336[80], vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, v147.f64[0]), _Q28, v147, 1), _Q27, *(double *)&v345[24])), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v318, v352.f64[0]), v314, v352, 1), v316, *(double *)v353));
    v283 = *(_OWORD *)&vaddq_f64(v273, v115);
    v301 = *(_OWORD *)&vaddq_f64(v269, v140);
    v391 = v377[1];
    v392 = v378;
    v274 = vaddq_f64(v272, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v318, v354.f64[0]), v314, v354, 1), v316, *(double *)v355));
    *(_QWORD *)&v272.f64[0] = *(_OWORD *)&vaddq_f64(v151, _Q1);
    v154 = v138;
    v155 = vmlsq_f64(vmulq_f64(v138, (float64x2_t)vzip1q_s64((int64x2_t)v149, (int64x2_t)v148)), v142, (float64x2_t)vextq_s8((int8x16_t)v148, (int8x16_t)v149, 8uLL));
    v389 = v376;
    v390 = v377[0];
    v156 = vmlsq_f64(vmulq_f64(v138, (float64x2_t)vzip1q_s64((int64x2_t)v130, (int64x2_t)v147)), v142, (float64x2_t)vextq_s8((int8x16_t)v147, (int8x16_t)v130, 8uLL));
    *(_OWORD *)((char *)&v393[2] + 8) = *(_OWORD *)&v381[16];
    *(float64x2_t *)((char *)&v393[3] + 8) = v382;
    v147.f64[1] = v260.f64[1];
    v157 = (int8x16_t)vmlaq_f64(vmulq_f64(v320, (float64x2_t)vzip1q_s64((int64x2_t)v141, (int64x2_t)v260)), v142, v260);
    v158 = vmlsq_f64(vmulq_f64(v128, (float64x2_t)vextq_s8(*(int8x16_t *)&v345[8], (int8x16_t)v141, 8uLL)), v138, v147);
    v270 = vaddq_f64(v156, vsubq_f64(v284, *(float64x2_t *)&v351[8]));
    v156.f64[1] = v380.f64[1];
    *(float64x2_t *)((char *)v393 + 8) = v380;
    *(_OWORD *)((char *)&v393[1] + 8) = *(_OWORD *)v381;
    v156.f64[0] = *(float64_t *)&v351[24];
    *(_QWORD *)&v141.f64[0] = *(_OWORD *)&vaddq_f64(v158, vsubq_f64(v286, v156));
    v159 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v158, v157, 8uLL), vsubq_f64(*(float64x2_t *)&v363[8], *(float64x2_t *)&v351[32]));
    v263 = v159;
    v264 = v141.f64[0];
    v159.f64[0] = *(float64_t *)&v351[48];
    v147.f64[1] = v287.f64[1];
    v271 = *(_OWORD *)&vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v157, 1), vsubq_f64(v287, v159));
    v160 = vsubq_f64(v364, *(float64x2_t *)&v351[56]);
    _Q5 = vaddq_f64(v155, v160);
    v155.f64[0] = *(float64_t *)&v351[72];
    v265 = *(_OWORD *)&vaddq_f64(vmlsq_laneq_f64(vmulq_laneq_f64(v128, v148, 1), v148, v128, 1), vsubq_f64(v290, v155));
    v266 = _Q5;
    v162 = v379;
    v375 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v120.f64[0], v368.f64[0]), v368.f64[1], v122.f64[0]), v369, v124);
    *(_QWORD *)&v377[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v120.f64[0], *(double *)v370), *(double *)&v370[8], v122.f64[0]), *(double *)&v370[16], v124);
    v160.f64[0] = vmlad_n_f64(vmuld_n_f64(v120.f64[0], v364.f64[0]), v364.f64[1], v122.f64[0]);
    v163 = v160;
    v376 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, *(double *)v370), _Q28, *(float64x2_t *)v370, 1), _Q27, *(double *)&v370[16]);
    *((_QWORD *)&v377[1] + 1) = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v120.f64[0], *(double *)&v370[24]), *(double *)&v370[32], v122.f64[0]), *(double *)&v370[40], v124);
    *(float64x2_t *)((char *)v377 + 8) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, *(double *)&v370[24]), _Q28, *(float64x2_t *)&v370[24], 1), _Q27, *(double *)&v370[40]);
    _Q17.f64[1] = v356.f64[1];
    _Q5.f64[1] = *(float64_t *)&v357[16];
    _Q1 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*(float64x2_t *)&v355[8], v238), v233, v356), v232, *(float64x2_t *)&v357[8]);
    v165 = vaddq_f64(_Q1, (float64x2_t)vzip2q_s64(v288, (int64x2_t)v291));
    v379 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v120.f64[0], *(double *)&v370[48]), *(double *)&v370[56], v122.f64[0]), v371, v124);
    v378 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, *(double *)&v370[48]), _Q28, *(float64x2_t *)&v370[48], 1), _Q27, v371);
    _Q1.f64[0] = v310.f64[0] * v238 + *(double *)v311.i64 * *(double *)&v237 + *(double *)&v357[24] * *(double *)&v236;
    v329 = vaddq_f64(v291, v165);
    v368 = v298;
    *(float64x2_t *)&v367[16] = v278;
    v166 = vaddq_f64(v293, vaddq_f64(_Q1, (float64x2_t)vdupq_laneq_s64(v292, 1)));
    *(float64x2_t *)v367 = v297;
    _Q1.f64[1] = v294.f64[1];
    v366 = v294;
    __asm
    {
      FMLA            D1, D23, V17.D[1]
      FMLA            D1, D21, V5.D[1]
    }
    v299 = *(_OWORD *)&vaddq_f64(_Q1, v166);
    *(float64x2_t *)&v370[48] = v267;
    *(float64x2_t *)&v370[16] = v279;
    v369 = v295;
    *(_QWORD *)&v371 = *(_OWORD *)&vsubq_f64(v277, v136);
    v163.f64[0] = vmlad_n_f64(v163.f64[0], v290.f64[0], v124);
    v332 = v163;
    v167 = vmlsq_f64(vmulq_f64(v154, (float64x2_t)vzip1q_s64((int64x2_t)v290, (int64x2_t)v289)), v142, (float64x2_t)vextq_s8((int8x16_t)v289, (int8x16_t)v290, 8uLL));
    *(float64x2_t *)&v370[32] = v275;
    *(float64x2_t *)v370 = v276;
    v168 = v383;
    v380 = vmulq_n_f64(v229, *(double *)&v394);
    *(_QWORD *)v381 = *(_OWORD *)&vmulq_f64(v136, v334);
    v141.f64[0] = v284.f64[0];
    v257 = v154;
    v258 = v142;
    v169 = vmlsq_f64(vmulq_f64(v154, (float64x2_t)vzip1q_s64((int64x2_t)v286, (int64x2_t)v284)), v142, (float64x2_t)vextq_s8((int8x16_t)v284, (int8x16_t)v286, 8uLL));
    *(_QWORD *)&v381[24] = *(_OWORD *)&vmulq_f64(v136, v315);
    *(float64x2_t *)&v381[8] = vmulq_n_f64(v228, *(double *)&v394);
    v383 = *(_OWORD *)&vmulq_f64(v136, v317);
    *((_QWORD *)&v394 + 1) = v394;
    v382 = vmulq_n_f64(v227, *(double *)&v394);
    v141.f64[1] = *(float64_t *)&v363[16];
    v170 = (int8x16_t)vmlaq_f64(vmulq_f64(v320, (float64x2_t)vzip1q_s64((int64x2_t)v287, *(int64x2_t *)&v363[8])), v142, *(float64x2_t *)&v363[8]);
    _Q4 = vmlsq_f64(vmulq_f64(v128, (float64x2_t)vextq_s8((int8x16_t)v284, (int8x16_t)v287, 8uLL)), v154, v141);
    _Q17 = vsubq_f64(v169, v348);
    v169.f64[0] = *(float64_t *)v349;
    v173 = vsubq_f64(_Q4, v169);
    v174 = (float64x2_t)vextq_s8((int8x16_t)_Q4, v170, 8uLL);
    _Q4.f64[0] = *(float64_t *)&v349[24];
    _Q4.f64[1] = *(float64_t *)&v349[16];
    v175 = vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v170, 1), _Q4);
    v176 = vsubq_f64(v167, v350);
    v167.f64[0] = *(float64_t *)v351;
    v340 = v281;
    v141.f64[0] = *(float64_t *)&v361[8];
    _Q23.f64[0] = vmlad_n_f64(vmuld_n_f64(v120.f64[0], *(double *)&v361[8]), *(double *)&v361[16], v122.f64[0]);
    v341 = v280;
    v142.f64[0] = vmlad_n_f64(vmuld_n_f64(v120.f64[0], *(double *)&v361[32]), *(double *)&v361[40], v122.f64[0]);
    v177 = *(float64x2_t *)&v361[56];
    v178 = vmlad_n_f64(vmuld_n_f64(v120.f64[0], *(double *)&v361[56]), v262.f64[0], v122.f64[0]);
    v179 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v335[0], v120.f64[0]), *(float64x2_t *)((char *)&v335[1] + 8), v122.f64[0]);
    *(_QWORD *)&v147.f64[0] = v335[1].i64[0];
    v180 = vmulq_f64(v147, v120);
    *(_QWORD *)&_Q21.f64[0] = v335[2].i64[1];
    v180.f64[0] = vmlad_n_f64(v180.f64[0], *(double *)&v335[2].i64[1], v122.f64[0]);
    v342 = vaddq_f64(*(float64x2_t *)&v359[8], (float64x2_t)vzip2q_s64((int64x2_t)v261, *(int64x2_t *)&v359[8]));
    v343 = v282;
    _Q4.f64[0] = *(float64_t *)v336;
    v122.f64[0] = vmlad_n_f64(vmlad_n_f64(*(double *)v335[1].i64 * v119.f64[0], *(double *)&v335[2].i64[1], _Q28.f64[0]), *(double *)v336, _Q27.f64[0]);
    *(_QWORD *)&v298.f64[0] = *(_OWORD *)&vaddq_f64(v173, v122);
    v173.f64[0] = *(float64_t *)v361;
    *(_QWORD *)v345 = *(_OWORD *)&vaddq_f64(v173, v173);
    v344 = v296;
    v181 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v335[0], v119.f64[0]), *(float64x2_t *)((char *)&v335[1] + 8), _Q28.f64[0]), (float64x2_t)v335[3], _Q27.f64[0]);
    v182 = vaddq_f64(_Q17, v181);
    v358 = v285;
    *(_QWORD *)v359 = v283;
    *(float64x2_t *)&v359[8] = vaddq_f64(vaddq_f64(*(float64x2_t *)&v336[104], vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, v260.f64[0]), _Q28, v260, 1), _Q27, *(double *)v347)), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v318, *(double *)&v353[8]), v314, *(float64x2_t *)&v353[8], 1), v316, *(double *)&v353[24]));
    __asm
    {
      FMLA            D17, D21, V28.D[1]
      FMLA            D17, D4, V27.D[1]
    }
    v183 = *(_OWORD *)&vaddq_f64(v175, _Q17);
    *(_QWORD *)&v359[24] = v301;
    v360 = v274;
    *(float64_t *)v361 = v272.f64[0];
    v184 = vaddq_f64(vsubq_f64(v174, *(float64x2_t *)&v349[8]), vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)v335[0], v119, 1), *(float64x2_t *)((char *)&v335[1] + 8), _Q28, 1), (float64x2_t)v335[3], _Q27, 1));
    v352 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v355[8], (int64x2_t)v356);
    *(int64x2_t *)&v353[8] = vzip2q_s64(*(int64x2_t *)&v355[8], (int64x2_t)v356);
    v354 = (float64x2_t)vzip1q_s64((int64x2_t)v310, v311);
    v185 = vaddq_f64(v176, vmlaq_n_f64(v179, (float64x2_t)v335[3], v124));
    *(float64x2_t *)&v345[8] = v270;
    v180.f64[0] = vmlad_n_f64(v180.f64[0], *(double *)v336, v124);
    *(float64_t *)&v345[24] = v264;
    v346 = v263;
    *(_QWORD *)v347 = v271;
    v322 = *(float64x2_t *)&v361[32];
    v154.f64[0] = *(float64_t *)&v361[24];
    v186 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, *(double *)&v361[8]), _Q28, *(float64x2_t *)&v361[8], 1), _Q27, *(double *)&v361[24]);
    v181.f64[0] = *(float64_t *)&v361[48];
    v187 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, *(double *)&v361[32]), _Q28, *(float64x2_t *)&v361[32], 1), _Q27, *(double *)&v361[48]);
    _Q17.f64[0] = v262.f64[1];
    v188 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, v177.f64[0]), _Q28, v177, 1), _Q27, v262.f64[1]);
    *(float64x2_t *)&v347[8] = v266;
    *(_QWORD *)&v347[24] = v265;
    _Q23.f64[0] = vmlad_n_f64(_Q23.f64[0], *(double *)&v361[24], v124);
    v142.f64[0] = vmlad_n_f64(v142.f64[0], *(double *)&v361[48], v124);
    v189 = vmlad_n_f64(v178, v262.f64[1], v124);
    *(_QWORD *)&v336[120] = v299;
    v302 = vzip1q_s64((int64x2_t)v186, v187);
    v190 = vzip2q_s64((int64x2_t)v186, v187);
    *(float64x2_t *)&v336[128] = v300;
    v362 = v182;
    _Q18.f64[1] = *(float64_t *)&v337[16];
    _Q2.f64[0] = v315.f64[0];
    __asm { FMLA            D25, D2, V18.D[1] }
    v119.f64[0] = _D25 + v317.f64[0] * *(double *)&v337[24];
    *(float64_t *)v363 = v298.f64[0];
    *(float64x2_t *)&v363[8] = v184;
    *(_QWORD *)&v363[24] = v183;
    _V9.D[1] = v338.f64[1];
    __asm { FMLA            D25, D2, V9.D[1] }
    _Q18.f64[0] = _D25 + v317.f64[0] * *(double *)v339;
    v364 = v185;
    *(_QWORD *)&v365 = *(_OWORD *)&vaddq_f64(vsubq_f64(vmlsq_laneq_f64(vmulq_laneq_f64(v128, v289, 1), v289, v128, 1), v167), v180);
    _V25.D[1] = v259.f64[0];
    __asm { FMLA            D10, D2, V25.D[1] }
    *(_OWORD *)&v351[40] = *(_OWORD *)&v349[16];
    *(float64x2_t *)&v351[56] = v350;
    *(float64x2_t *)&v351[8] = v348;
    *(_OWORD *)&v351[24] = *(_OWORD *)v349;
    *(_QWORD *)&v186.f64[0] = v335[0].i64[0];
    *(_QWORD *)&v186.f64[1] = v335[2].i64[0];
    v196 = vmlsq_f64(vmulq_f64(v128, (float64x2_t)vextq_s8((int8x16_t)v335[0], (int8x16_t)_Q21, 8uLL)), v257, v186);
    _Q23.f64[1] = v142.f64[0];
    v197 = vmlaq_laneq_f64(vmulq_f64(v320, _Q21), v147, v128, 1);
    v198 = *(_QWORD *)v351;
    v348 = (float64x2_t)v302;
    *(int64x2_t *)&v349[8] = v190;
    *(double *)v351 = v189;
    v350 = _Q23;
    *(float64x2_t *)&v355[8] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v318, *(double *)&v337[8]), v314, *(float64x2_t *)&v337[8], 1), v316, *(double *)&v337[24]);
    *(float64_t *)&v355[24] = v119.f64[0];
    v356 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v318, v338.f64[0]), v314, v338, 1), v316, *(double *)v339);
    *(float64_t *)v357 = _Q18.f64[0];
    *(float64x2_t *)&v357[8] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v318, *(double *)&v339[8]), v314, *(float64x2_t *)&v339[8], 1), v316, v259.f64[1]);
    v199 = vmulq_laneq_f64((float64x2_t)v335[3], v128, 1);
    v200 = vsubq_f64(vmulq_n_f64(*(float64x2_t *)((char *)&v335[1] + 8), v303.f64[0]), v199);
    v201 = vmlaq_laneq_f64(vnegq_f64(v199), v128, (float64x2_t)v335[3], 1);
    v202 = vmlsq_lane_f64(vmulq_n_f64((float64x2_t)v335[3], v128.f64[0]), (float64x2_t)v335[0], v303.f64[0], 0);
    v203 = vmulq_f64(v303, _Q21);
    v204 = (int8x16_t)vmlaq_f64(vmulq_f64(v320, (float64x2_t)vzip1q_s64((int64x2_t)_Q21, *(int64x2_t *)((char *)&v335[1] + 8))), v258, *(float64x2_t *)((char *)&v335[1] + 8));
    *(double *)&v357[24] = _D10 + v317.f64[0] * v259.f64[1];
    v205 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v361[8], *(int64x2_t *)&v361[32]);
    v206 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v361[8], *(int64x2_t *)&v361[32]);
    v207 = vsubq_f64(vsubq_f64(vmlsq_f64(vmulq_f64(v257, (float64x2_t)vzip1q_s64((int64x2_t)v147, v335[0])), v258, (float64x2_t)vextq_s8((int8x16_t)v335[0], (int8x16_t)v147, 8uLL)), v200), *(float64x2_t *)&v361[8]);
    v335[2].i64[1] = *(_OWORD *)&vsubq_f64(vsubq_f64(vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v204, 1), vmlsq_f64(vmulq_f64(v304, v147), v320, _Q4)), v181), (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&v361[56], 1));
    v335[3] = (int64x2_t)vsubq_f64(vsubq_f64(vsubq_f64(vmlsq_f64(vmulq_f64(v257, (float64x2_t)vzip1q_s64((int64x2_t)_Q4, v335[3])), v258, (float64x2_t)vextq_s8((int8x16_t)v335[3], (int8x16_t)_Q4, 8uLL)), vmlsq_lane_f64(vmulq_laneq_f64((float64x2_t)v335[0], v128, 1), *(float64x2_t *)((char *)&v335[1] + 8), v128.f64[0], 0)), *(float64x2_t *)&v361[56]), (float64x2_t)vzip1q_s64((int64x2_t)v154, (int64x2_t)v181));
    v208 = (float64x2_t)vextq_s8(*(int8x16_t *)&v361[8], (int8x16_t)v181, 8uLL);
    v141.f64[1] = *(float64_t *)&v361[40];
    *(float64x2_t *)&v361[40] = vsubq_f64(vaddq_f64(vmulq_f64(v258, v322), vmulq_f64(v320, (float64x2_t)vzip1q_s64((int64x2_t)v181, (int64x2_t)v322))), *(float64x2_t *)&v336[40]);
    *(float64x2_t *)&v361[56] = vsubq_f64(vsubq_f64(vmulq_f64(v257, (float64x2_t)vzip1q_s64((int64x2_t)_Q17, (int64x2_t)v177)), vmulq_f64(v258, (float64x2_t)vextq_s8((int8x16_t)v177, (int8x16_t)_Q17, 8uLL))), *(float64x2_t *)&v336[56]);
    *(float64x2_t *)&v361[8] = vsubq_f64(vsubq_f64(vmulq_f64(v257, (float64x2_t)vzip1q_s64((int64x2_t)v154, *(int64x2_t *)&v361[8])), vmulq_f64(v258, (float64x2_t)vextq_s8(*(int8x16_t *)&v361[8], (int8x16_t)v154, 8uLL))), *(float64x2_t *)&v336[8]);
    *(float64x2_t *)&v361[24] = vsubq_f64(vsubq_f64(vmulq_f64(v128, v208), vmulq_f64(v257, v141)), *(float64x2_t *)&v336[24]);
    v209 = vmulq_laneq_f64(v177, v128, 1);
    v210 = vsubq_f64(vmulq_laneq_f64(v128, v177, 1), v209);
    v209.f64[0] = *(float64_t *)&v336[72];
    *(_QWORD *)&v361[72] = *(_OWORD *)&vsubq_f64(v210, v209);
    v211 = vsubq_f64(vsubq_f64(vsubq_f64(v201, v197), _Q17), _Q17);
    *(float64_t *)v336 = v211.f64[0];
    v212 = vmulq_f64(v310, v334);
    v213 = vmlsq_laneq_f64(v203, _Q4, v128, 1);
    v214 = a5[1];
    v215 = vmulq_f64(*a5, *a5);
    v216 = vaddq_f64(v211, v215);
    *(float64_t *)v336 = v216.f64[0];
    v216.f64[0] = v212.f64[0] + *(double *)v311.i64 * v315.f64[0] + v313 * v317.f64[0];
    v201.f64[1] = v332.f64[1];
    *(float64_t *)&v353[24] = v312.f64[1];
    *(float64_t *)v353 = v312.f64[0];
    v201.f64[0] = vmlad_n_f64(vmlad_n_f64(v334.f64[0] * v324.f64[0], v315.f64[0], v326.f64[0]), v317.f64[0], v312.f64[0]);
    *(double *)v355 = v313;
    v212.f64[0] = v212.f64[0] + v315.f64[0] * *(double *)v311.i64 + v317.f64[0] * v313;
    v217 = vaddq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v318, v324, 1), v314, v326, 1), v316, v312, 1), v329);
    *(float64_t *)&v349[24] = v188.f64[1];
    *(float64_t *)v349 = v188.f64[0];
    v218 = vsubq_f64(vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v196, v204, 8uLL), v202), v322);
    v219 = vsubq_f64(v207, v205);
    v335[0].i64[1] = *(_QWORD *)&v219.f64[1];
    v220 = vsubq_f64(v218, v206);
    v219.f64[1] = v220.f64[1];
    v335[1].i64[1] = *(_QWORD *)&v220.f64[0];
    v335[1].i64[0] = *(_OWORD *)&vsubq_f64(vsubq_f64(vsubq_f64(v196, v213), v154), v177);
    v221 = vaddq_f64(v219, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v215.f64[0], 0));
    v335[2].i64[0] = *(_QWORD *)&v221.f64[1];
    v335[0].i64[0] = *(_QWORD *)&v221.f64[0];
    memset(&v336[48], 0, 24);
    *(float64_t *)&v336[8] = v215.f64[1];
    *(float64_t *)&v336[40] = v215.f64[1];
    *(float64_t *)&v336[72] = v215.f64[1];
    *(float64_t *)&v336[88] = v307.f64[1];
    v147.f64[0] = v307.f64[0];
    *(float64_t *)&v336[104] = v217.f64[0];
    v222 = vmulq_f64(v214, v214);
    v147.f64[1] = v217.f64[1];
    *(_QWORD *)&v336[96] = *(_OWORD *)&vaddq_f64(v201, v305);
    v223 = vaddq_f64(v147, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v222.f64[0], 0));
    *(float64_t *)&v336[112] = v223.f64[1];
    *(float64_t *)&v336[80] = v223.f64[0];
    v338.f64[0] = 0.0;
    memset(v339, 0, 24);
    *(float64_t *)&v337[8] = v222.f64[1];
    v338.f64[1] = v222.f64[1];
    *(float64_t *)&v339[24] = v222.f64[1];
    v388 = v152;
    *(double *)v393 = v162;
    *((_QWORD *)&v393[4] + 1) = v168;
    *(_QWORD *)&v394 = 0;
    *(_QWORD *)&v351[72] = v198;
    memset(&v336[16], 0, 24);
    *(_QWORD *)v337 = *(_OWORD *)&vaddq_f64(vaddq_f64(v212, vaddq_f64(v332, vaddq_f64(v216, v332))), v222);
    v333 = v241 * 0.333333333 * (double)(v108 ^ 3);
    *(_OWORD *)&v337[16] = 0u;
    sub_20F4C0164(a2, &v366, v333);
    for (j = 0; j != 58; j += 2)
    {
      v225 = (float64x2_t *)(a3 + j * 16);
      v226 = vaddq_f64(*(float64x2_t *)(a3 + j * 16 + 16), vmulq_n_f64((float64x2_t)v335[j + 1], v333));
      *v225 = vaddq_f64(*(float64x2_t *)(a3 + j * 16), vmulq_n_f64((float64x2_t)v335[j], v333));
      v225[1] = v226;
    }
    *(double *)(a3 + 928) = *(double *)(a3 + 928) + v333 * v365;
    v108 = 2;
    v105 = 1;
    v101.f64[0] = 1.0;
  }
  while ((v309 & 1) == 0);
}

float64x2_t sub_20F4BD84C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7)
{
  float64x2_t v8;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  __int128 v22;
  float64x2_t v27;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v50;
  float64x2_t v52;
  float64x2_t v58;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v71;
  float64x2_t v74;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  int64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v108;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v117;
  float64x2_t v119;
  float64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v137;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v143;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  int64x2_t v156;
  int64x2_t v157;
  float64x2_t v159;
  int64x2_t v160;
  float64x2_t v162;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v172;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v177;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v182;
  float64x2_t v184;
  float64x2_t v187;
  int64x2_t v188;
  float64x2_t v189;
  float64x2_t v192;
  float64x2_t v193;
  int64x2_t v195;
  float64x2_t v196;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v206;
  float64x2_t v213;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v236;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v244;
  float64x2_t v247;
  int64x2_t v249;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v256;
  double v258;
  float64x2_t v260;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v273;
  float64x2_t v276;
  float64x2_t v280;
  float64x2_t v282;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v296;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v304;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v310;
  float64x2_t v312;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t result;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  int64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  double v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  double v445;
  double v446;
  double v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  double v451;
  float64x2_t v452;
  double v453;
  float64x2_t v454;
  double v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  double v461;
  double v462;
  float64x2_t v463;
  float64x2_t v464;
  float64_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64_t v468;
  double v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  double v474;
  double v475;
  double v476;
  float64x2_t v477;
  float64_t v478;
  float64_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  double v489;
  double v490;
  double v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  double v500;
  float64x2_t v501;
  double v502;
  float64x2_t v503;
  double v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  __int128 v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  double v541;
  float64x2_t v542;
  double v543;
  uint64_t v544;
  double v545;
  uint64_t v546;
  __int128 v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  double v552;
  float64x2_t v553;
  float64x2_t v554;
  double v555;
  double v556;
  double v557;
  float64x2_t v558;
  double v559;
  float64x2_t v560;
  double v561;
  double v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  double v576;
  double v577;
  float64x2_t v578;
  float64x2_t v579;
  double v580;
  float64_t v581;
  double v582;
  float64x2_t v583;
  double v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  double v591;
  double v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  double v596;
  float64x2_t v597;
  float64x2_t v598;
  double v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  double v603;
  float64x2_t v604;
  float64x2_t v605;
  double v606;
  double v607;
  float64x2_t v608;
  float64_t v609;
  float64x2_t v610;
  double v611;
  double v612;
  double v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  int64x2_t v617;
  double v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v621;
  int64x2_t v622;
  float64x2_t v623;
  double v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  double v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  double v633;
  double v634;
  double v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  double v650;
  float64x2_t v651;
  double v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;

  v13 = *(float64x2_t *)(a3 + 360);
  v14 = *(float64x2_t *)(a2 + 120);
  _Q1 = *(float64x2_t *)(a3 + 384);
  _Q3 = *(float64x2_t *)(a2 + 240);
  v18 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a2, v13.f64[0]), v14, _Q1.f64[0]), _Q3, a7);
  v533 = *(float64x2_t *)(a3 + 408);
  v17.f64[1] = *(float64_t *)(a3 + 416);
  v19 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(*(float64x2_t *)a2, v13, 1), v14, _Q1, 1), _Q3, v533, 1);
  v658 = _Q3;
  v17.f64[0] = *(float64_t *)(a3 + 376);
  _Q3.f64[0] = *(float64_t *)(a3 + 400);
  v541 = *(double *)(a3 + 424);
  _Q31 = *(float64x2_t *)(a2 + 360);
  v654 = *(float64x2_t *)(a3 + 432);
  _Q9 = *(float64x2_t *)(a2 + 480);
  v529 = *(float64x2_t *)(a3 + 456);
  *((_QWORD *)&v22 + 1) = *(_QWORD *)(a3 + 464);
  _Q10 = *(float64x2_t *)(a2 + 600);
  v499 = *(float64x2_t *)(a3 + 480);
  *(_QWORD *)&v22 = *(_QWORD *)(a3 + 448);
  v547 = v22;
  v545 = *(double *)(a3 + 472);
  v543 = *(double *)(a3 + 496);
  _Q27 = *(float64x2_t *)(a2 + 720);
  v8.f64[0] = *(float64_t *)(a3 + 584);
  _Q28 = *(float64x2_t *)(a2 + 840);
  _Q8 = *(float64x2_t *)(a2 + 960);
  v27 = vmlaq_n_f64(vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a2, v17.f64[0]), v14, _Q3.f64[0]), *(float64x2_t *)(a2 + 240), v541), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q31, *(double *)&v22), _Q9, v545), _Q10, v543)), _Q8, v8.f64[0]);
  _Q22 = *(float64x2_t *)(a2 + 1080);
  v660 = *(float64x2_t *)(a3 + 504);
  _Q23 = *(float64x2_t *)(a2 + 1200);
  v642 = *(float64x2_t *)(a3 + 528);
  _Q24 = *(float64x2_t *)(a2 + 1320);
  v31 = *(float64x2_t *)(a3 + 552);
  v639 = v31;
  v32 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q22, *(double *)(a3 + 504)), _Q23, *(double *)(a3 + 504)), _Q24, v31.f64[0]), vmlaq_n_f64(vaddq_f64(v18, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q31, *(double *)(a3 + 432)), _Q9, *(double *)(a3 + 456)), _Q10, *(double *)(a3 + 480))), _Q27, v8.f64[0]));
  v584 = *(double *)(a3 + 520);
  v582 = *(double *)(a3 + 544);
  v580 = *(double *)(a3 + 568);
  v33 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q22, v584), _Q23, v582), _Q24, v580), v27);
  _Q7 = *(float64x2_t *)(a2 + 1440);
  v644 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q7.f64[0]), _Q1, _Q7, 1);
  _Q6 = vaddq_f64(_Q7, v32);
  __asm { FMLA            D16, D3, V7.D[1] }
  v596 = _D16;
  _Q7 = *(float64x2_t *)(a2 + 1560);
  _Q5 = vaddq_f64(_Q7, vaddq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(_Q22, v660, 1), _Q23, v642, 1), _Q24, v31, 1), vmlaq_n_f64(vaddq_f64(v19, vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(_Q31, v654, 1), _Q9, v529, 1), _Q10, v499, 1)), _Q28, v8.f64[0])));
  v594 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q7.f64[0]), _Q1, _Q7, 1);
  __asm { FMLA            D16, D3, V7.D[1] }
  v591 = _D16;
  _Q7 = *(float64x2_t *)(a2 + 1680);
  _Q4 = vaddq_f64(_Q7, v33);
  v554 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q7.f64[0]), _Q1, _Q7, 1);
  __asm { FMLA            D16, D3, V7.D[1] }
  v552 = _D16;
  _Q20 = *(float64x2_t *)(a3 + 24);
  _Q16 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a3, _Q6.f64[0]), _Q20, _Q6, 1);
  v540 = _Q16;
  _Q26.f64[0] = *(float64_t *)(a3 + 16);
  _D30 = *(double *)(a3 + 40);
  __asm { FMLA            D16, D30, V6.D[1] }
  v538 = _Q16;
  v50 = *(float64x2_t *)(a3 + 144);
  _Q17 = *(float64x2_t *)(a3 + 168);
  v52 = vmlaq_laneq_f64(vmulq_n_f64(v50, _Q6.f64[0]), _Q17, _Q6, 1);
  v536 = v52;
  v52.f64[0] = *(float64_t *)(a3 + 160);
  _D25 = *(double *)(a3 + 184);
  __asm { FMLA            D13, D25, V6.D[1] }
  v530 = _Q13;
  _Q13 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q6.f64[0]), _Q1, _Q6, 1);
  v528 = _Q13;
  __asm { FMLA            D13, D3, V6.D[1] }
  v527 = _Q13;
  _Q6 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a3, _Q5.f64[0]), _Q20, _Q5, 1);
  v520 = _Q6;
  __asm { FMLA            D6, D30, V5.D[1] }
  v516 = _Q6;
  _Q6 = vmlaq_laneq_f64(vmulq_n_f64(v50, _Q5.f64[0]), _Q17, _Q5, 1);
  v524 = _Q6;
  __asm { FMLA            D6, D25, V5.D[1] }
  v521 = _Q6;
  _Q6 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q5.f64[0]), _Q1, _Q5, 1);
  v525 = _Q6;
  __asm { FMLA            D6, D3, V5.D[1] }
  v523 = _Q6;
  v10.f64[0] = *(float64_t *)(a2 + 16);
  _Q6.f64[0] = *(float64_t *)(a2 + 136);
  _Q5.f64[0] = vmlad_n_f64(v10.f64[0] * v13.f64[0], _Q6.f64[0], _Q1.f64[0]);
  v619 = _Q5;
  __asm { FMLA            D11, D6, V1.D[1] }
  v58 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q31.f64[0]), _Q1, _Q31, 1);
  v614 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q9.f64[0]), _Q1, _Q9, 1);
  v615 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q10.f64[0]), _Q1, _Q10, 1);
  v506 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q27.f64[0]), _Q1, _Q27, 1);
  v549 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q28.f64[0]), _Q1, _Q28, 1);
  v565 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q8.f64[0]), _Q1, _Q8, 1);
  v563 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q22.f64[0]), _Q1, _Q22, 1);
  v586 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q23.f64[0]), _Q1, _Q23, 1);
  v589 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q24.f64[0]), _Q1, _Q24, 1);
  v518 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q4.f64[0]), _Q1, _Q4, 1);
  _Q0 = vmulq_f64(v10, v17);
  v609 = _Q0.f64[0] + _Q6.f64[0] * _Q3.f64[0];
  __asm { FMLA            D0, D3, V31.D[1] }
  v612 = _Q0.f64[0];
  __asm { FMLA            D0, D3, V9.D[1] }
  v603 = _Q0.f64[0];
  __asm { FMLA            D0, D3, V10.D[1] }
  v606 = _Q0.f64[0];
  __asm { FMLA            D0, D3, V27.D[1] }
  v500 = _Q0.f64[0];
  __asm { FMLA            D0, D3, V28.D[1] }
  v502 = _Q0.f64[0];
  __asm { FMLA            D0, D3, V8.D[1] }
  v504 = _Q0.f64[0];
  __asm { FMLA            D0, D3, V22.D[1] }
  v557 = _Q0.f64[0];
  __asm { FMLA            D0, D3, V23.D[1] }
  v559 = _Q0.f64[0];
  __asm { FMLA            D0, D3, V24.D[1] }
  v561 = _Q0.f64[0];
  __asm { FMLA            D0, D3, V4.D[1] }
  v514 = _Q0;
  _Q0 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a3, _Q4.f64[0]), _Q20, _Q4, 1);
  v510 = _Q0;
  __asm { FMLA            D0, D30, V4.D[1] }
  v508 = _Q0;
  _Q0 = vmlaq_laneq_f64(vmulq_n_f64(v50, _Q4.f64[0]), _Q17, _Q4, 1);
  v513 = _Q0;
  __asm { FMLA            D0, D25, V4.D[1] }
  v512 = _Q0;
  v62 = *(float64x2_t *)(a3 + 192);
  v653 = v62;
  v638 = *(float64x2_t *)(a3 + 216);
  v637 = *(float64x2_t *)(a3 + 240);
  v636 = *(float64x2_t *)(a3 + 264);
  v652 = *(double *)(a3 + 208);
  v635 = *(double *)(a3 + 232);
  v634 = *(double *)(a3 + 256);
  v633 = *(double *)(a3 + 280);
  v63 = *(float64x2_t *)(a3 + 312);
  v579 = *(float64x2_t *)(a3 + 288);
  v578 = v63;
  v631 = *(float64x2_t *)(a3 + 336);
  _Q0 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q22, *(double *)(a3 + 288)), _Q23, v63.f64[0]), _Q24, *(double *)(a3 + 288)), vaddq_f64(_Q27, vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a2, v50.f64[0]), v14, _Q17.f64[0]), v658, v62.f64[0]), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q31, _Q4.f64[0]), _Q9, *(double *)(a3 + 240)), _Q10, _Q3.f64[0]))));
  _Q1 = vaddq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(_Q22, v579, 1), _Q23, v63, 1), _Q24, v631, 1), vaddq_f64(_Q28, vaddq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(*(float64x2_t *)a2, v50, 1), v14, _Q17, 1), v658, v62, 1), vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(_Q31, v638, 1), _Q9, v637, 1), _Q10, v636, 1))));
  v577 = *(double *)(a3 + 304);
  v576 = *(double *)(a3 + 328);
  v629 = *(double *)(a3 + 352);
  _Q2 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q22, v577), _Q23, v576), _Q24, v629), vaddq_f64(_Q8, vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a2, v52.f64[0]), v14, _D25), v658, v652), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q31, v635), _Q9, v634), _Q10, v633))));
  v651 = *(float64x2_t *)(a3 + 48);
  v67 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a2, *(double *)a3), v14, _Q20.f64[0]), v658, v651.f64[0]);
  v68 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(*(float64x2_t *)a2, *(float64x2_t *)a3, 1), v14, _Q20, 1), v658, v651, 1);
  v650 = *(double *)(a3 + 64);
  v69 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a2, _Q26.f64[0]), v14, _D30), v658, v650);
  _Q16 = *(float64x2_t *)(a3 + 72);
  v71 = *(float64x2_t *)(a3 + 96);
  v647 = _Q16;
  v648 = v71;
  _Q21 = *(float64x2_t *)(a3 + 120);
  v649 = _Q21;
  _Q3 = vaddq_f64(v67, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q31, _Q16.f64[0]), _Q9, v71.f64[0]), _Q10, _Q21.f64[0]));
  v74 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(_Q31, _Q16, 1), _Q9, v71, 1), _Q10, _Q21, 1);
  _Q4 = vaddq_f64(v68, v74);
  v74.f64[0] = *(float64_t *)(a3 + 88);
  v659 = v74;
  v71.f64[0] = *(float64_t *)(a3 + 112);
  v646 = v71;
  _Q6 = vmlaq_n_f64(vmulq_n_f64(_Q31, v74.f64[0]), _Q9, v71.f64[0]);
  v71.f64[0] = *(float64_t *)(a3 + 136);
  v657 = v71;
  _Q5 = vaddq_f64(v69, vmlaq_n_f64(_Q6, _Q10, v71.f64[0]));
  v448 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a3, _Q22.f64[0]), _Q20, _Q22, 1);
  __asm { FMLA            D6, D30, V22.D[1] }
  v445 = _Q6.f64[0];
  v452 = vmlaq_laneq_f64(vmulq_n_f64(v50, _Q22.f64[0]), _Q17, _Q22, 1);
  __asm { FMLA            D6, D25, V22.D[1] }
  v451 = _Q6.f64[0];
  v449 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a3, _Q23.f64[0]), _Q20, _Q23, 1);
  __asm { FMLA            D6, D30, V23.D[1] }
  v446 = _Q6.f64[0];
  v454 = vmlaq_laneq_f64(vmulq_n_f64(v50, _Q23.f64[0]), _Q17, _Q23, 1);
  __asm { FMLA            D6, D25, V23.D[1] }
  v453 = _Q6.f64[0];
  v450 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a3, _Q24.f64[0]), _Q20, _Q24, 1);
  __asm { FMLA            D6, D30, V24.D[1] }
  v447 = _Q6.f64[0];
  v456 = vmlaq_laneq_f64(vmulq_n_f64(v50, _Q24.f64[0]), _Q17, _Q24, 1);
  __asm { FMLA            D6, D25, V24.D[1] }
  v455 = _Q6.f64[0];
  v486 = vmlaq_laneq_f64(vmulq_n_f64(v50, _Q27.f64[0]), _Q17, _Q27, 1);
  __asm { FMLA            D6, D25, V27.D[1] }
  v476 = _Q6.f64[0];
  v484 = vmlaq_laneq_f64(vmulq_n_f64(v50, _Q28.f64[0]), _Q17, _Q28, 1);
  __asm { FMLA            D6, D25, V28.D[1] }
  v475 = _Q6.f64[0];
  v488 = vmlaq_laneq_f64(vmulq_n_f64(v50, _Q8.f64[0]), _Q17, _Q8, 1);
  __asm { FMLA            D6, D25, V8.D[1] }
  v474 = _Q6.f64[0];
  _Q6 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a3, _Q0.f64[0]), _Q20, _Q0, 1);
  v466 = _Q6;
  __asm { FMLA            D6, D30, V0.D[1] }
  v467 = _Q6;
  _Q6 = vmlaq_laneq_f64(vmulq_n_f64(v50, _Q0.f64[0]), _Q17, _Q0, 1);
  v480 = _Q6;
  __asm { FMLA            D6, D25, V0.D[1] }
  v481 = _Q6;
  _Q0 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a3, _Q1.f64[0]), _Q20, _Q1, 1);
  v470 = _Q0;
  __asm { FMLA            D0, D30, V1.D[1] }
  v472 = _Q0;
  _Q0 = vmlaq_laneq_f64(vmulq_n_f64(v50, _Q1.f64[0]), _Q17, _Q1, 1);
  v483 = _Q0;
  __asm { FMLA            D0, D25, V1.D[1] }
  v487 = _Q0;
  _Q27.f64[0] = *(float64_t *)(a2 + 136);
  _Q0.f64[0] = vmlad_n_f64(v10.f64[0] * v50.f64[0], _Q27.f64[0], _Q17.f64[0]);
  v463 = _Q0;
  __asm { FMLA            D0, D27, V17.D[1] }
  v465 = _Q0.f64[1];
  v621 = vmlaq_laneq_f64(vmulq_n_f64(v50, _Q31.f64[0]), _Q17, _Q31, 1);
  v616 = vmlaq_laneq_f64(vmulq_n_f64(v50, _Q9.f64[0]), _Q17, _Q9, 1);
  v464 = vmlaq_laneq_f64(vmulq_n_f64(v50, _Q10.f64[0]), _Q17, _Q10, 1);
  v485 = vmlaq_laneq_f64(vmulq_n_f64(v50, _Q2.f64[0]), _Q17, _Q2, 1);
  _Q0 = vmulq_f64(v10, v52);
  v468 = _Q0.f64[0] + _Q27.f64[0] * _D25;
  __asm { FMLA            D0, D25, V31.D[1] }
  v462 = _Q0.f64[0];
  __asm { FMLA            D0, D25, V9.D[1] }
  v461 = _Q0.f64[0];
  __asm { FMLA            D0, D25, V10.D[1] }
  v469 = _Q0.f64[0];
  __asm { FMLA            D0, D25, V2.D[1] }
  v482 = _Q0;
  _Q0 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a3, _Q2.f64[0]), _Q20, _Q2, 1);
  v471 = _Q0;
  __asm { FMLA            D0, D30, V2.D[1] }
  v473 = _Q0;
  v627 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a3, _Q31.f64[0]), _Q20, _Q31, 1);
  __asm { FMLA            D0, D30, V31.D[1] }
  v490 = _Q0.f64[0];
  v625 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a3, _Q9.f64[0]), _Q20, _Q9, 1);
  __asm { FMLA            D0, D30, V9.D[1] }
  v489 = _Q0.f64[0];
  _Q0 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a3, _Q10.f64[0]), _Q20, _Q10, 1);
  v498 = _Q0;
  __asm { FMLA            D0, D30, V10.D[1] }
  v491 = _Q0.f64[0];
  _Q0.f64[0] = vmlad_n_f64(v10.f64[0] * *(double *)a3, _Q27.f64[0], _Q20.f64[0]);
  v477 = _Q0;
  __asm { FMLA            D0, D27, V20.D[1] }
  v479 = _Q0.f64[1];
  v478 = vmulq_f64(v10, _Q26).f64[0] + _Q27.f64[0] * _D30;
  _Q0 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a3, _Q3.f64[0]), _Q20, _Q3, 1);
  v492 = _Q0;
  __asm { FMLA            D0, D30, V3.D[1] }
  v497 = _Q0;
  _Q0 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a3, _Q4.f64[0]), _Q20, _Q4, 1);
  v496 = _Q0;
  __asm { FMLA            D0, D30, V4.D[1] }
  v495 = _Q0;
  _Q0 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a3, _Q5.f64[0]), _Q20, _Q5, 1);
  v494 = _Q0;
  __asm { FMLA            D0, D30, V5.D[1] }
  v493 = _Q0;
  v624 = *(double *)(a2 + 256);
  _Q21.f64[1] = *(float64_t *)(a3 + 416);
  _Q1.f64[1] = v619.f64[1];
  _Q1.f64[0] = vmlad_n_f64(v619.f64[0], v624, v533.f64[0]);
  _Q5.f64[0] = *(float64_t *)(a2 + 376);
  _Q6.f64[0] = *(float64_t *)(a2 + 496);
  _Q10.f64[1] = *(float64_t *)(a3 + 464);
  _Q4.f64[0] = *(float64_t *)(a2 + 616);
  _Q24.f64[1] = *(float64_t *)(a3 + 488);
  _Q0.f64[0] = vmlad_n_f64(vmlad_n_f64(_Q5.f64[0] * v654.f64[0], _Q6.f64[0], v529.f64[0]), _Q4.f64[0], v499.f64[0]);
  v88 = vaddq_f64(_Q1, _Q0);
  __asm
  {
    FMLA            D11, D3, V21.D[1]
    FMLA            D1, D6, V10.D[1]
    FMLA            D1, D4, V24.D[1]
  }
  _Q2.f64[0] = v609 + v624 * v541;
  _Q3.f64[0] = _Q5.f64[0] * *(double *)&v547 + _Q6.f64[0] * v545 + _Q4.f64[0] * v543;
  v89 = vaddq_f64(_Q2, _Q3);
  v11.f64[0] = *(float64_t *)(a2 + 736);
  _Q0 = vmlaq_f64(v88, v11, v8);
  v555 = *(double *)(a2 + 1096);
  v556 = *(double *)(a2 + 1216);
  _Q9.f64[1] = *(float64_t *)(a3 + 536);
  _Q26.f64[0] = *(float64_t *)(a2 + 1336);
  v601 = _Q26;
  _Q28.f64[1] = *(float64_t *)(a3 + 560);
  _Q2.f64[0] = vmlad_n_f64(vmlad_n_f64(v555 * v660.f64[0], v556, v642.f64[0]), _Q26.f64[0], v639.f64[0]);
  v91 = vaddq_f64(_Q2, _Q0);
  _Q0.f64[0] = *(float64_t *)(a2 + 856);
  v610 = _Q0;
  v92 = vmlaq_f64(vaddq_f64(_Q11, _Q1), _Q0, v8);
  __asm
  {
    FMLA            D0, D27, V9.D[1]
    FMLA            D0, D26, V28.D[1]
  }
  v93 = vaddq_f64(_Q0, v92);
  v431 = v91;
  v433 = v93;
  v93.f64[0] = *(float64_t *)(a2 + 976);
  v571 = v93;
  v94 = vmlaq_f64(v89, v93, v8);
  v93.f64[0] = v555 * v584 + v556 * v582 + _Q26.f64[0] * v580;
  v437 = vaddq_f64(v93, v94);
  v620 = _Q5;
  _Q13 = vmlaq_n_f64(v58, v533, _Q5.f64[0]);
  v618 = _Q6.f64[0];
  v96 = (int64x2_t)vmlaq_n_f64(v614, v533, _Q6.f64[0]);
  v97 = (float64x2_t)vzip2q_s64((int64x2_t)_Q13, v96);
  v94.f64[0] = v612 + v541 * _Q5.f64[0];
  v94.f64[1] = v603 + v541 * _Q6.f64[0];
  v575 = *(float64x2_t *)(a2 + 384);
  v574 = *(float64x2_t *)(a2 + 504);
  v98 = *(float64x2_t *)(a2 + 624);
  v573 = v98;
  v99 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v575, v654.f64[0]), v574, v529.f64[0]), v98, v499.f64[0]);
  v100 = vaddq_f64((float64x2_t)vzip1q_s64((int64x2_t)_Q13, v96), v99);
  _Q11 = vmlaq_n_f64(v615, v533, *(double *)(a2 + 616));
  v611 = *(double *)(a2 + 616);
  _D26 = *(double *)(a2 + 520);
  v613 = *(double *)(a2 + 640);
  v99.f64[0] = vmlad_n_f64(vmlad_n_f64(*(double *)(a2 + 400) * v654.f64[0], _D26, v529.f64[0]), v613, v499.f64[0]);
  _Q7 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v575, v654, 1), v574, v529, 1), v98, v499, 1);
  v104 = vaddq_f64(v97, _Q7);
  v615.f64[0] = *(float64_t *)(a2 + 400);
  __asm { FMLA            D7, D26, V10.D[1] }
  v614.f64[0] = _D26;
  __asm { FMLA            D7, D25, V24.D[1] }
  v105 = vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)_Q11, 1), _Q7);
  _Q26.f64[1] = *((float64_t *)&v547 + 1);
  _Q6 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v575, *(double *)&v547), v574, v545), v98, v543);
  v108 = vaddq_f64(v94, _Q6);
  _Q6.f64[0] = v606 + v541 * v611;
  _D29 = v545;
  _Q7.f64[0] = v615.f64[0] * *(double *)&v547 + _D26 * v545 + v613 * v543;
  v110 = vaddq_f64(_Q6, _Q7);
  v98.f64[0] = *(float64_t *)(a2 + 760);
  v111 = v8;
  _Q22.f64[1] = *(float64_t *)(a3 + 512);
  v599 = *(double *)(a2 + 1120);
  _Q27.f64[0] = *(float64_t *)(a2 + 1240);
  _Q7.f64[1] = _Q9.f64[1];
  _Q26.f64[0] = *(float64_t *)(a2 + 1360);
  _Q16.f64[1] = _Q28.f64[1];
  _Q6.f64[0] = vmlad_n_f64(vmlad_n_f64(v599 * v660.f64[0], _Q27.f64[0], v642.f64[0]), _Q26.f64[0], v639.f64[0]);
  v427 = vaddq_f64(_Q6, vmlaq_f64(vaddq_f64(_Q11, v99), v98, v8));
  _Q23 = *(float64x2_t *)(a2 + 744);
  _Q28 = *(float64x2_t *)(a2 + 1104);
  _Q31 = *(float64x2_t *)(a2 + 1224);
  _Q9 = *(float64x2_t *)(a2 + 1344);
  _Q0 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q28, v660.f64[0]), _Q31, v642.f64[0]), _Q9, v639.f64[0]), vmlaq_n_f64(v100, _Q23, v8.f64[0]));
  v435 = _Q0;
  _Q24.f64[0] = *(float64_t *)(a2 + 880);
  v117 = vmlaq_f64(v105, _Q24, v8);
  __asm { FMLA            D0, D27, V7.D[1] }
  v607 = _Q27.f64[0];
  __asm { FMLA            D0, D26, V16.D[1] }
  v604 = _Q26;
  v425 = vaddq_f64(_Q0, v117);
  _Q3 = *(float64x2_t *)(a2 + 864);
  v119 = vmlaq_n_f64(v104, _Q3, v8.f64[0]);
  _Q6.f64[1] = *(float64_t *)(a3 + 536);
  _Q5 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(_Q28, v660, 1), _Q31, v642, 1), _Q9, v639, 1);
  _Q7.f64[1] = *(float64_t *)(a3 + 560);
  v421 = vaddq_f64(_Q5, v119);
  _Q22.f64[0] = *(float64_t *)(a2 + 1000);
  _Q18 = vmlaq_f64(v110, _Q22, v8);
  v119.f64[0] = v599 * v584 + _Q27.f64[0] * v582 + _Q26.f64[0] * v580;
  v429 = vaddq_f64(v119, _Q18);
  _Q2 = *(float64x2_t *)(a2 + 984);
  v123 = vmlaq_n_f64(v108, _Q2, v8.f64[0]);
  v423 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q28, v584), _Q31, v582), _Q9, v580), v123);
  v572 = v11;
  v123.f64[0] = v500 + v541 * v11.f64[0];
  v569 = _Q23;
  __asm { FMLA            D5, D29, V23.D[1] }
  v570 = v98;
  _Q5.f64[0] = _Q5.f64[0] + v543 * v98.f64[0];
  v124 = (int64x2_t)vaddq_f64(v123, _Q5);
  v125 = (int64x2_t)vaddq_f64(vmlaq_n_f64(v506, v533, v11.f64[0]), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v654, _Q23.f64[0]), v529, _Q23, 1), v499, v98.f64[0]));
  v117.f64[0] = v502 + v541 * v610.f64[0];
  v567 = _Q3;
  __asm { FMLA            D18, D29, V3.D[1] }
  v568 = _Q24;
  _Q18.f64[0] = _Q18.f64[0] + v543 * _Q24.f64[0];
  v126 = (int64x2_t)vaddq_f64(v117, _Q18);
  v127 = vaddq_f64(vmlaq_n_f64(v549, v533, v610.f64[0]), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v654, _Q3.f64[0]), v529, _Q3, 1), v499, _Q24.f64[0]));
  v98.f64[0] = v504 + v541 * v571.f64[0];
  v459 = _Q2;
  v460 = _Q22;
  __asm { FMLA            D23, D29, V2.D[1] }
  _Q23.f64[0] = _Q23.f64[0] + v543 * _Q22.f64[0];
  v128 = vaddq_f64(v98, _Q23);
  v129 = vmlaq_n_f64(v565, v533, v571.f64[0]);
  v130 = vaddq_f64(v129, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v654, _Q2.f64[0]), v529, _Q2, 1), v499, _Q22.f64[0]));
  v131 = (float64x2_t)vzip1q_s64(v125, (int64x2_t)v127);
  v132 = (float64x2_t)vzip2q_s64(v125, (int64x2_t)v127);
  v133 = (float64x2_t)vzip1q_s64(v124, v126);
  v134 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v130, 1);
  v129.f64[0] = *(float64_t *)(a2 + 784);
  v507 = v129;
  v135 = vmlaq_f64(v130, v129, v8);
  v129.f64[0] = *(float64_t *)(a2 + 1144);
  v127.f64[0] = v129.f64[0] * v660.f64[0];
  _Q26 = v129;
  v129.f64[0] = *(float64_t *)(a2 + 1264);
  v127.f64[0] = vmlad_n_f64(v127.f64[0], v129.f64[0], v642.f64[0]);
  v137 = v129;
  v129.f64[0] = *(float64_t *)(a2 + 1384);
  v127.f64[0] = vmlad_n_f64(v127.f64[0], v129.f64[0], v639.f64[0]);
  _Q1 = v129;
  v412 = vaddq_f64(v127, v135);
  v458 = *(float64x2_t *)(a2 + 768);
  _Q24 = vmlaq_n_f64(v131, v458, v8.f64[0]);
  v140 = *(float64x2_t *)(a2 + 1128);
  v141 = *(float64x2_t *)(a2 + 1368);
  _Q23 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v140, v660.f64[0]), *(float64x2_t *)(a2 + 1248), v642.f64[0]), v141, v639.f64[0]);
  v143 = vaddq_f64(_Q23, _Q24);
  v415 = v143;
  v143.f64[0] = *(float64_t *)(a2 + 904);
  v503 = v143;
  _Q18 = v137;
  __asm
  {
    FMLA            D23, D18, V6.D[1]
    FMLA            D23, D1, V7.D[1]
  }
  v413 = vaddq_f64(_Q23, vmlaq_f64(v134, v143, v111));
  v457 = *(float64x2_t *)(a2 + 888);
  v145 = vmlaq_n_f64(v132, v457, v111.f64[0]);
  v146 = *(float64x2_t *)(a2 + 1248);
  v147 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v140, v660, 1), v146, v642, 1), v141, v639, 1);
  v148 = vaddq_f64(v147, v145);
  v550 = v148;
  v148.f64[0] = *(float64_t *)(a2 + 1024);
  v505 = v148;
  _Q21 = vmlaq_f64(v128, v148, v111);
  v150 = _Q26;
  v442 = _Q18;
  v443 = _Q26;
  v145.f64[0] = _Q26.f64[0] * v584 + _Q18.f64[0] * v582 + _Q1.f64[0] * v580;
  v444 = _Q1;
  v417 = vaddq_f64(v145, _Q21);
  v501 = *(float64x2_t *)(a2 + 1008);
  v151 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v140, v584), v146, v582), v141, v580);
  v566 = v141;
  v419 = vaddq_f64(v151, vmlaq_n_f64(v133, v501, v111.f64[0]));
  _Q26.f64[1] = *(float64_t *)(a3 + 440);
  v151.f64[0] = v557 + v541 * v555;
  __asm { FMLA            D21, D29, V28.D[1] }
  _Q21.f64[0] = _Q21.f64[0] + v543 * v599;
  v152 = vaddq_f64(v151, _Q21);
  v147.f64[0] = v559 + v541 * v556;
  __asm { FMLA            D24, D29, V31.D[1] }
  _Q24.f64[0] = _Q24.f64[0] + v543 * v607;
  v153 = vaddq_f64(v147, _Q24);
  v154 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v654, _Q9.f64[0]), v529, _Q9, 1), v499, v604.f64[0]);
  v155 = vaddq_f64(vmlaq_n_f64(v589, v533, v601.f64[0]), v154);
  v154.f64[0] = v561 + v541 * v601.f64[0];
  __asm { FMLA            D26, D29, V9.D[1] }
  _Q26.f64[0] = _Q26.f64[0] + v543 * v604.f64[0];
  v156 = (int64x2_t)vmlaq_n_f64(vaddq_f64(vmlaq_n_f64(v563, v533, v555), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v654, _Q28.f64[0]), v529, _Q28, 1), v499, v599)), v140, v111.f64[0]);
  v157 = (int64x2_t)vmlaq_n_f64(vaddq_f64(vmlaq_n_f64(v586, v533, v556), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v654, _Q31.f64[0]), v529, _Q31, 1), v499, v607)), v146, v111.f64[0]);
  _Q12 = (float64x2_t)vzip1q_s64(v156, v157);
  v159 = (float64x2_t)vzip2q_s64(v156, v157);
  v160 = (int64x2_t)vmlaq_f64(v152, v150, v111);
  _Q27 = v111;
  v162 = *(float64x2_t *)(a2 + 1152);
  _Q3 = *(float64x2_t *)(a2 + 1272);
  _Q2 = *(float64x2_t *)(a2 + 1392);
  v407 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v162, v660.f64[0]), _Q3, v642.f64[0]), _Q2, v639.f64[0]), _Q12);
  v560 = v162;
  v564 = _Q3;
  v165 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v162, v660, 1), _Q3, v642, 1), _Q2, v639, 1);
  v440 = _Q2;
  v409 = vaddq_f64(v165, v159);
  v162.f64[0] = *(float64_t *)(a2 + 1168);
  _Q3.f64[0] = *(float64_t *)(a2 + 1288);
  _Q2.f64[0] = *(float64_t *)(a2 + 1408);
  v159.f64[0] = vmlad_n_f64(vmlad_n_f64(v162.f64[0] * v660.f64[0], _Q3.f64[0], v642.f64[0]), _Q2.f64[0], v639.f64[0]);
  v166 = vmlaq_n_f64(v155, v141, v111.f64[0]);
  _Q4 = vaddq_f64(v159, v166);
  v406 = _Q4;
  v558 = v162;
  __asm { FMLA            D4, D3, V6.D[1] }
  v562 = _Q3.f64[0];
  __asm { FMLA            D4, D2, V7.D[1] }
  v441 = _Q2.f64[0];
  v408 = vaddq_f64(_Q4, (float64x2_t)vdupq_laneq_s64((int64x2_t)v166, 1));
  _Q12.f64[0] = v582;
  v168 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a2 + 1152), v584), *(float64x2_t *)(a2 + 1272), v582), *(float64x2_t *)(a2 + 1392), v580);
  v169 = vaddq_f64(v168, (float64x2_t)vzip1q_s64(v160, (int64x2_t)vmlaq_f64(v153, _Q18, v111)));
  v168.f64[0] = v162.f64[0] * v584 + _Q3.f64[0] * v582 + _Q2.f64[0] * v580;
  _Q0 = vaddq_f64(v168, vmlaq_f64(vaddq_f64(v154, _Q26), _Q1, v111));
  v410 = _Q0;
  v411 = v169;
  _Q0.f64[0] = *(float64_t *)(a2 + 1456);
  _Q1 = *(float64x2_t *)(a2 + 1464);
  _Q7.f64[1] = _Q26.f64[1];
  v165.f64[0] = *(float64_t *)(a2 + 1480);
  v172 = vaddq_f64(vmlaq_n_f64(v644, v533, _Q0.f64[0]), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v654, _Q1.f64[0]), v529, _Q1, 1), v499, v165.f64[0]));
  *(_QWORD *)&v153.f64[0] = *(_OWORD *)&vaddq_f64(_Q0, v431);
  _Q0.f64[0] = v596 + v541 * _Q0.f64[0];
  _Q25 = vaddq_f64(_Q1, v435);
  __asm { FMLA            D3, D29, V1.D[1] }
  v174 = vaddq_f64(v165, v427);
  v589.f64[0] = v174.f64[0];
  v174.f64[0] = _Q3.f64[0] + v543 * v165.f64[0];
  v175 = vaddq_f64(_Q0, v174);
  v174.f64[0] = *(float64_t *)(a2 + 1576);
  _Q3 = *(float64x2_t *)(a2 + 1584);
  v165.f64[0] = *(float64_t *)(a2 + 1600);
  v177 = vaddq_f64(vmlaq_n_f64(v594, v533, v174.f64[0]), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v654, _Q3.f64[0]), v529, _Q3, 1), v499, v165.f64[0]));
  *(_QWORD *)&_Q20.f64[0] = *(_OWORD *)&vaddq_f64(v174, v433);
  v174.f64[0] = v591 + v541 * v174.f64[0];
  _Q0.f64[1] = v421.f64[1];
  _Q22 = vaddq_f64(_Q3, v421);
  __asm { FMLA            D0, D29, V3.D[1] }
  v179 = vaddq_f64(v165, v425);
  v587 = v179;
  _Q0.f64[0] = _Q0.f64[0] + v543 * v165.f64[0];
  v180 = vaddq_f64(v174, _Q0);
  _Q3.f64[0] = *(float64_t *)(a2 + 1696);
  _Q21 = *(float64x2_t *)(a2 + 1704);
  v179.f64[0] = *(float64_t *)(a2 + 1720);
  v182 = vaddq_f64(vmlaq_n_f64(v554, v533, _Q3.f64[0]), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v654, _Q21.f64[0]), v529, _Q21, 1), v499, v179.f64[0]));
  *(_QWORD *)&_Q16.f64[0] = *(_OWORD *)&vaddq_f64(_Q3, v437);
  _Q7.f64[0] = v552 + v541 * _Q3.f64[0];
  _Q0.f64[1] = v423.f64[1];
  _Q19 = vaddq_f64(_Q21, v423);
  __asm { FMLA            D0, D29, V21.D[1] }
  *(_QWORD *)&v644.f64[0] = *(_OWORD *)&vaddq_f64(v179, v429);
  _Q0.f64[0] = _Q0.f64[0] + v543 * v179.f64[0];
  v184 = vaddq_f64(_Q7, _Q0);
  _Q0.f64[0] = *(float64_t *)(a2 + 1504);
  v436 = vaddq_f64(_Q0, v412);
  _Q1 = *(float64x2_t *)(a2 + 1512);
  __asm { FMLA            D7, D12, V1.D[1] }
  _Q21.f64[0] = *(float64_t *)(a2 + 1528);
  _Q7.f64[0] = _Q7.f64[0] + v580 * _Q21.f64[0];
  v438 = (int64x2_t)vaddq_f64(_Q7, vmlaq_f64(v175, _Q0, _Q27));
  v597 = vaddq_f64(_Q1, v407);
  *(_QWORD *)&v594.f64[0] = *(_OWORD *)&vaddq_f64(_Q21, v406);
  _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v660, _Q1.f64[0]), v642, _Q1, 1), v639, _Q21.f64[0]);
  v187 = *(float64x2_t *)(a2 + 1488);
  v432 = vaddq_f64(v187, v415);
  v188 = (int64x2_t)vaddq_f64(_Q0, vmlaq_n_f64(v172, v187, _Q27.f64[0]));
  _Q0.f64[0] = *(float64_t *)(a2 + 1624);
  v434 = vaddq_f64(_Q0, v413);
  v189 = vmlaq_f64(v180, _Q0, _Q27);
  _Q6 = *(float64x2_t *)(a2 + 1632);
  __asm { FMLA            D0, D12, V6.D[1] }
  _Q21.f64[0] = *(float64_t *)(a2 + 1648);
  _Q0.f64[0] = _Q0.f64[0] + v580 * _Q21.f64[0];
  _Q4 = (int64x2_t)vaddq_f64(_Q0, v189);
  v553 = vaddq_f64(_Q6, v409);
  *(_QWORD *)&v592 = *(_OWORD *)&vaddq_f64(_Q21, v408);
  v192 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v660, _Q6.f64[0]), v642, _Q6, 1), v639, _Q21.f64[0]);
  v193 = *(float64x2_t *)(a2 + 1608);
  v424 = vaddq_f64(v193, v550);
  _Q17 = vmlaq_n_f64(v177, v193, _Q27.f64[0]);
  v195 = (int64x2_t)vaddq_f64(v192, _Q17);
  v193.f64[0] = *(float64_t *)(a2 + 1744);
  v422 = vaddq_f64(v193, v417);
  v196 = vmlaq_f64(v184, v193, _Q27);
  _Q6 = *(float64x2_t *)(a2 + 1752);
  __asm { FMLA            D17, D12, V6.D[1] }
  _Q21.f64[0] = *(float64_t *)(a2 + 1768);
  _Q17.f64[0] = _Q17.f64[0] + v580 * _Q21.f64[0];
  _Q17 = vaddq_f64(_Q17, v196);
  v551 = vaddq_f64(_Q6, v411);
  *(_QWORD *)&v554.f64[0] = *(_OWORD *)&vaddq_f64(_Q21, v410);
  v199 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v660, _Q6.f64[0]), v642, _Q6, 1), v639, _Q21.f64[0]);
  v200 = *(float64x2_t *)(a2 + 1728);
  v414 = vaddq_f64(v200, v419);
  v201 = vaddq_f64(v199, vmlaq_n_f64(v182, v200, _Q27.f64[0]));
  v202 = (float64x2_t)vzip1q_s64(v188, v195);
  v203 = vaddq_f64(*(float64x2_t *)(a2 + 1656), (float64x2_t)vzip2q_s64(v188, v195));
  v428 = v203;
  v430 = vaddq_f64(*(float64x2_t *)(a2 + 1536), v202);
  v203.f64[0] = *(float64_t *)(a2 + 1552);
  v204 = vaddq_f64(v203, v201);
  v426 = v204;
  v204.f64[0] = *(float64_t *)(a2 + 1672);
  _Q2 = vaddq_f64(v204, (float64x2_t)vdupq_laneq_s64((int64x2_t)v201, 1));
  v206 = vaddq_f64(*(float64x2_t *)(a2 + 1776), (float64x2_t)vzip1q_s64(v438, _Q4));
  v418 = v206;
  v420 = _Q2;
  v206.f64[0] = *(float64_t *)(a2 + 1792);
  _Q0 = vaddq_f64(v206, _Q17);
  v416 = _Q0;
  v204.f64[1] = v538.f64[1];
  v204.f64[0] = vmlad_n_f64(v538.f64[0], v650, v153.f64[0]);
  _Q17.f64[0] = v646.f64[0];
  __asm { FMLA            D0, D17, V25.D[1] }
  _Q0.f64[0] = vmlad_n_f64(_Q0.f64[0], v657.f64[0], v589.f64[0]);
  *(_QWORD *)&v538.f64[0] = *(_OWORD *)&vaddq_f64(v204, _Q0);
  _Q0 = vaddq_f64(vmlaq_n_f64(v540, v651, v153.f64[0]), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v647, _Q25.f64[0]), v648, _Q25, 1), v649, v589.f64[0]));
  v439 = _Q0;
  v204.f64[1] = v516.f64[1];
  v204.f64[0] = vmlad_n_f64(v516.f64[0], v650, _Q20.f64[0]);
  __asm { FMLA            D0, D17, V22.D[1] }
  _Q0.f64[0] = vmlad_n_f64(_Q0.f64[0], v657.f64[0], v587.f64[0]);
  *(_QWORD *)&v540.f64[0] = *(_OWORD *)&vaddq_f64(v204, _Q0);
  _Q0 = vaddq_f64(vmlaq_n_f64(v520, v651, _Q20.f64[0]), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v647, _Q22.f64[0]), v648, _Q22, 1), v649, v587.f64[0]));
  v517 = _Q0;
  v204.f64[1] = v508.f64[1];
  v204.f64[0] = vmlad_n_f64(v508.f64[0], v650, _Q16.f64[0]);
  __asm { FMLA            D0, D17, V19.D[1] }
  _Q0.f64[0] = vmlad_n_f64(_Q0.f64[0], v657.f64[0], v644.f64[0]);
  *(_QWORD *)&v520.f64[0] = *(_OWORD *)&vaddq_f64(v204, _Q0);
  _Q0 = vaddq_f64(vmlaq_n_f64(v510, v651, _Q16.f64[0]), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v647, _Q19.f64[0]), v648, _Q19, 1), v649, v644.f64[0]));
  v511 = _Q0;
  v204.f64[1] = *((float64_t *)&v530 + 1);
  v204.f64[0] = vmlad_n_f64(*(double *)&v530, v652, v153.f64[0]);
  *(double *)_Q4.i64 = v634;
  __asm { FMLA            D0, D4, V25.D[1] }
  _Q0.f64[0] = vmlad_n_f64(_Q0.f64[0], v633, v589.f64[0]);
  v509 = vaddq_f64(v204, _Q0);
  _Q5 = vmlaq_n_f64(v536, v653, v153.f64[0]);
  v531 = vaddq_f64(_Q5, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v638, _Q25.f64[0]), v637, _Q25, 1), v636, v589.f64[0]));
  _Q0.f64[1] = v521.f64[1];
  _Q0.f64[0] = vmlad_n_f64(v521.f64[0], v652, _Q20.f64[0]);
  __asm { FMLA            D5, D4, V22.D[1] }
  _Q17.f64[1] = v587.f64[1];
  _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], v633, v587.f64[0]);
  v537 = vaddq_f64(_Q0, _Q5);
  _Q0.f64[1] = v512.f64[1];
  _Q0.f64[0] = vmlad_n_f64(v512.f64[0], v652, _Q16.f64[0]);
  __asm { FMLA            D17, D4, V19.D[1] }
  _Q17.f64[0] = vmlad_n_f64(_Q17.f64[0], v633, v644.f64[0]);
  _Q24 = vmlaq_n_f64(v528, v533, v153.f64[0]);
  _Q13.f64[1] = v527.f64[1];
  _Q13.f64[0] = vmlad_n_f64(v527.f64[0], v541, v153.f64[0]);
  v213 = vmlaq_n_f64(v525, v533, _Q20.f64[0]);
  v153.f64[1] = v523.f64[1];
  v153.f64[0] = vmlad_n_f64(v523.f64[0], v541, _Q20.f64[0]);
  _Q6 = vmlaq_n_f64(v518, v533, _Q16.f64[0]);
  _Q5.f64[1] = v514.f64[1];
  _Q5.f64[0] = vmlad_n_f64(v514.f64[0], v541, _Q16.f64[0]);
  _Q3.f64[1] = v597.f64[1];
  _Q21.f64[1] = *(float64_t *)(a3 + 320);
  _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v579, v597.f64[0]), v578, v597, 1), v631, v594.f64[0]);
  _Q1 = vaddq_f64(v531, _Q18);
  _Q2.f64[0] = v576;
  __asm { FMLA            D18, D2, V3.D[1] }
  _Q18.f64[0] = vmlad_n_f64(_Q18.f64[0], v629, v594.f64[0]);
  v534 = vaddq_f64(v509, _Q18);
  _Q12.f64[1] = v553.f64[1];
  _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v579, v553.f64[0]), v578, v553, 1), v631, v592);
  _Q7 = vaddq_f64(vaddq_f64(vmlaq_n_f64(v524, v653, _Q20.f64[0]), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v638, _Q22.f64[0]), v637, _Q22, 1), v636, v587.f64[0])), _Q18);
  __asm { FMLA            D18, D2, V12.D[1] }
  _Q18.f64[0] = vmlad_n_f64(_Q18.f64[0], v629, v592);
  _Q4 = vaddq_f64(v537, _Q18);
  _Q26.f64[1] = v551.f64[1];
  _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v579, v551.f64[0]), v578, v551, 1), v631, v554.f64[0]);
  _Q16 = vaddq_f64(vaddq_f64(vmlaq_n_f64(v513, v653, _Q16.f64[0]), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v638, _Q19.f64[0]), v637, _Q19, 1), v636, v644.f64[0])), _Q18);
  __asm { FMLA            D18, D2, V26.D[1] }
  _Q18.f64[0] = vmlad_n_f64(_Q18.f64[0], v629, v554.f64[0]);
  v222 = vaddq_f64(vaddq_f64(_Q0, _Q17), _Q18);
  __asm { FMLA            D18, D29, V25.D[1] }
  _Q18.f64[0] = vmlad_n_f64(_Q18.f64[0], v543, v589.f64[0]);
  v223 = vaddq_f64(_Q24, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v654, _Q25.f64[0]), v529, _Q25, 1), v499, v589.f64[0]));
  __asm { FMLA            D21, D29, V22.D[1] }
  _Q21.f64[0] = vmlad_n_f64(_Q21.f64[0], v543, v587.f64[0]);
  v224 = vaddq_f64(v153, _Q21);
  __asm { FMLA            D24, D29, V19.D[1] }
  _Q24.f64[0] = vmlad_n_f64(_Q24.f64[0], v543, v644.f64[0]);
  v542 = vaddq_f64(v432, _Q1);
  _Q20 = vmlaq_n_f64(v223, v432, _Q27.f64[0]);
  *(_QWORD *)&v537.f64[0] = *(_OWORD *)&vaddq_f64(v436, v534);
  _Q18 = vmlaq_f64(vaddq_f64(_Q13, _Q18), _Q27, v436);
  v548 = vaddq_f64(v424, _Q7);
  v227 = vmlaq_n_f64(vaddq_f64(v213, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v654, _Q22.f64[0]), v529, _Q22, 1), v499, v587.f64[0])), v424, _Q27.f64[0]);
  v546 = *(_OWORD *)&vaddq_f64(v434, _Q4);
  v228 = vmlaq_f64(v224, _Q27, v434);
  v544 = *(_OWORD *)&vaddq_f64(v422, v222);
  v229 = vmlaq_f64(vaddq_f64(_Q5, _Q24), _Q27, v422);
  _Q29 = vmlaq_n_f64(vaddq_f64(_Q6, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v654, _Q19.f64[0]), v529, _Q19, 1), v499, v644.f64[0])), v414, _Q27.f64[0]);
  _Q0 = vaddq_f64(v414, _Q16);
  v535 = _Q0;
  _Q2.f64[1] = v597.f64[1];
  _Q27.f64[0] = v582;
  __asm { FMLA            D0, D27, V2.D[1] }
  _Q0.f64[0] = vmlad_n_f64(_Q0.f64[0], v580, v594.f64[0]);
  _Q16.f64[1] = *(float64_t *)(a3 + 536);
  __asm { FMLA            D5, D27, V12.D[1] }
  _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], v580, v592);
  __asm { FMLA            D16, D27, V26.D[1] }
  _Q16.f64[0] = vmlad_n_f64(_Q16.f64[0], v580, v554.f64[0]);
  v232 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v660, v551.f64[0]), v642, v551, 1), v639, v554.f64[0]), _Q29);
  v585 = vaddq_f64(v430, vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v660, v597.f64[0]), v642, v597, 1), v639, v594.f64[0]), _Q20));
  _Q1.f64[1] = v426.f64[1];
  *(_QWORD *)&v529.f64[0] = *(_OWORD *)&vaddq_f64(v426, vaddq_f64(_Q0, _Q18));
  v640 = vaddq_f64(v428, vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v660, v553.f64[0]), v642, v553, 1), v639, v592), v227));
  *(_QWORD *)&v528.f64[0] = *(_OWORD *)&vaddq_f64(v420, vaddq_f64(_Q5, v228));
  v655 = vaddq_f64(v418, v232);
  v233 = vaddq_f64(v416, vaddq_f64(_Q16, v229));
  v581 = v233.f64[0];
  v233.f64[0] = v445 + v650 * v555;
  _Q17 = v646;
  __asm { FMLA            D1, D17, V28.D[1] }
  _Q16.f64[1] = v657.f64[1];
  _Q1.f64[0] = _Q1.f64[0] + v657.f64[0] * v599;
  *(_QWORD *)&v642.f64[0] = *(_OWORD *)&vaddq_f64(v233, _Q1);
  _Q1 = vmlaq_n_f64(v448, v651, v555);
  _Q5.f64[1] = *(float64_t *)(a3 + 128);
  v236 = vaddq_f64(_Q1, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v647, _Q28.f64[0]), v648, _Q28, 1), v649, v599));
  v583 = v236;
  v236.f64[0] = v446 + v650 * v556;
  __asm { FMLA            D1, D17, V31.D[1] }
  _Q1.f64[0] = _Q1.f64[0] + v657.f64[0] * v607;
  *(_QWORD *)&v527.f64[0] = *(_OWORD *)&vaddq_f64(v236, _Q1);
  _Q1 = vmlaq_n_f64(v449, v651, v556);
  v238 = vaddq_f64(_Q1, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v647, _Q31.f64[0]), v648, _Q31, 1), v649, v607));
  v526 = v238;
  v238.f64[0] = v447 + v650 * v601.f64[0];
  __asm { FMLA            D1, D17, V9.D[1] }
  _Q1.f64[0] = _Q1.f64[0] + v657.f64[0] * v604.f64[0];
  *(_QWORD *)&v524.f64[0] = *(_OWORD *)&vaddq_f64(v238, _Q1);
  v239 = vmlaq_n_f64(v452, v653, v555);
  _Q20.f64[1] = *(float64_t *)(a3 + 224);
  _Q18.f64[1] = *(float64_t *)(a3 + 272);
  v240 = vaddq_f64(v239, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v638, _Q28.f64[0]), v637, _Q28, 1), v636, v599));
  v239.f64[0] = v451 + v652 * v555;
  _Q6.f64[0] = v634;
  __asm { FMLA            D5, D6, V28.D[1] }
  _Q5.f64[0] = _Q5.f64[0] + v633 * v599;
  v241 = vaddq_f64(v239, _Q5);
  v242 = vaddq_f64(vmlaq_n_f64(v454, v653, v556), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v638, _Q31.f64[0]), v637, _Q31, 1), v636, v607));
  _Q16.f64[0] = v453 + v652 * v556;
  __asm { FMLA            D17, D6, V31.D[1] }
  _Q17.f64[0] = _Q17.f64[0] + v633 * v607;
  _Q16 = vaddq_f64(_Q16, _Q17);
  v244 = vaddq_f64(vmlaq_n_f64(v456, v653, v601.f64[0]), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v638, _Q9.f64[0]), v637, _Q9, 1), v636, v604.f64[0]));
  _Q18.f64[0] = v455 + v652 * v601.f64[0];
  __asm { FMLA            D20, D6, V9.D[1] }
  _Q20.f64[0] = _Q20.f64[0] + v633 * v604.f64[0];
  v532 = vaddq_f64(_Q18, _Q20);
  _Q8.f64[1] = *(float64_t *)(a2 + 1160);
  _Q21 = *(float64x2_t *)(a3 + 312);
  _Q10.f64[1] = v631.f64[1];
  v522 = vaddq_f64(v240, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v579, v560.f64[0]), v578, v560, 1), v631, v558.f64[0]));
  _V15.D[1] = *(_QWORD *)(a2 + 1280);
  _Q4.f64[0] = v562;
  v661 = vaddq_f64(v242, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v579, v564.f64[0]), v578, v564, 1), v631, v562));
  _Q27 = *(float64x2_t *)(a2 + 1248);
  v247 = *(float64x2_t *)(a2 + 1128);
  v249 = (int64x2_t)vaddq_f64(v247, v240);
  _Q5 = vaddq_f64(_Q27, v242);
  v251 = (float64x2_t)vzip1q_s64(v249, (int64x2_t)_Q5);
  v252 = (float64x2_t)vzip2q_s64(v249, (int64x2_t)_Q5);
  _Q7.f64[0] = v576;
  __asm { FMLA            D5, D7, V8.D[1] }
  _Q5.f64[0] = _Q5.f64[0] + v629 * v558.f64[0];
  v519 = vaddq_f64(v241, _Q5);
  __asm { FMLA            D5, D7, V15.D[1] }
  _Q5.f64[0] = _Q5.f64[0] + v629 * v562;
  v515 = vaddq_f64(_Q16, _Q5);
  _Q18.f64[0] = v442.f64[0];
  v253 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(v443, v241), (int64x2_t)vaddq_f64(v442, _Q16));
  *(float64x2_t *)(a1 + 1440) = v439;
  _Q3.f64[1] = v440.f64[1];
  _Q23 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v560, v579.f64[0]), v564, _Q21.f64[0]), v440, v631.f64[0]), v251);
  *(float64_t *)(a1 + 1456) = v538.f64[0];
  *(float64x2_t *)(a1 + 1560) = v517;
  _Q16.f64[1] = v560.f64[1];
  _Q29.f64[1] = v564.f64[1];
  _Q20 = vaddq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v560, v579, 1), v564, _Q21, 1), v440, v631, 1), v252);
  *(float64_t *)(a1 + 1576) = v540.f64[0];
  *(float64x2_t *)(a1 + 1680) = v511;
  *(float64_t *)(a1 + 1696) = v520.f64[0];
  *(float64x2_t *)(a1 + 1464) = _Q25;
  *(float64_t *)(a1 + 1480) = v589.f64[0];
  *(float64x2_t *)(a1 + 1584) = _Q22;
  *(float64_t *)(a1 + 1600) = v587.f64[0];
  *(float64_t *)(a1 + 1720) = v644.f64[0];
  *(float64x2_t *)(a1 + 1704) = _Q19;
  _Q8.f64[1] = v440.f64[1];
  _Q13.f64[0] = v441;
  v539 = vaddq_f64(v244, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v579, v440.f64[0]), _Q21, v440, 1), v631, v441));
  v256 = vaddq_f64(v566, v244);
  _Q5.f64[1] = v558.f64[1];
  _Q3.f64[0] = vmlad_n_f64(vmlad_n_f64(v558.f64[0] * v579.f64[0], v562, _Q21.f64[0]), v441, v631.f64[0]);
  _Q3 = vaddq_f64(_Q3, v256);
  v540.f64[0] = _Q3.f64[0];
  __asm
  {
    FMLA            D3, D4, V21.D[1]
    FMLA            D3, D13, V10.D[1]
  }
  *(_QWORD *)&v258 = *(_OWORD *)&vaddq_f64(_Q3, (float64x2_t)vdupq_laneq_s64((int64x2_t)v256, 1));
  *(float64x2_t *)(a1 + 1488) = v542;
  *(float64_t *)(a1 + 1504) = v537.f64[0];
  _Q1 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v560, v577), v564, v576), v440, v629), v253);
  *(float64x2_t *)(a1 + 1608) = v548;
  *(_QWORD *)(a1 + 1624) = v546;
  *(float64x2_t *)(a1 + 1728) = v535;
  *(_QWORD *)(a1 + 1744) = v544;
  _Q3.f64[0] = v556;
  _Q5.f64[0] = vmlad_n_f64(v555 * v579.f64[0], v556, _Q21.f64[0]);
  __asm { FMLA            D29, D3, V21.D[1] }
  *(float64_t *)(a1 + 1528) = v594.f64[0];
  *(float64x2_t *)(a1 + 1512) = v597;
  *(float64x2_t *)(a1 + 1632) = v553;
  *(double *)(a1 + 1648) = v592;
  *(float64_t *)(a1 + 1768) = v554.f64[0];
  *(float64x2_t *)(a1 + 1752) = v551;
  v260 = v247;
  _Q10 = vaddq_f64(v247, v522);
  v262 = vaddq_f64(_Q27, v661);
  v662 = vmlaq_n_f64(vmulq_n_f64(v247, v579.f64[0]), _Q27, _Q21.f64[0]);
  v263 = vmlaq_laneq_f64(vmulq_laneq_f64(v247, v579, 1), _Q27, _Q21, 1);
  _Q22 = vmlaq_n_f64(vmulq_n_f64(v260, v577), _Q27, v576);
  *(float64_t *)(a1 + 1552) = v529.f64[0];
  *(float64x2_t *)(a1 + 1536) = v585;
  *(float64_t *)(a1 + 1672) = v528.f64[0];
  *(float64x2_t *)(a1 + 1656) = v640;
  *(float64_t *)(a1 + 1792) = v581;
  _Q3 = vaddq_f64(v443, v519);
  _Q4.f64[1] = v515.f64[1];
  _Q16.f64[0] = vmlad_n_f64(v443.f64[0] * v579.f64[0], v442.f64[0], _Q21.f64[0]);
  __asm { FMLA            D19, D18, V21.D[1] }
  *(float64x2_t *)(a1 + 1776) = v655;
  *(float64x2_t *)(a1 + 1080) = v583;
  *(float64_t *)(a1 + 1096) = v642.f64[0];
  *(float64x2_t *)(a1 + 1200) = v526;
  *(float64_t *)(a1 + 1216) = v527.f64[0];
  *(float64x2_t *)(a1 + 1320) = vaddq_f64(vmlaq_n_f64(v450, v651, v601.f64[0]), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v647, _Q9.f64[0]), v648, _Q9, 1), v649, v604.f64[0]));
  *(float64_t *)(a1 + 1336) = v524.f64[0];
  v266 = vmlaq_n_f64(vmulq_n_f64(_Q28, v579.f64[0]), _Q31, _Q21.f64[0]);
  v267 = vmlaq_laneq_f64(vmulq_laneq_f64(_Q28, v579, 1), _Q31, _Q21, 1);
  *(float64x2_t *)(a1 + 1104) = _Q28;
  _Q12 = vmlaq_n_f64(vmulq_n_f64(_Q28, v577), _Q31, v576);
  *(float64x2_t *)(a1 + 1224) = _Q31;
  _Q18.f64[0] = v607;
  _Q25.f64[0] = vmlad_n_f64(v599 * v579.f64[0], v607, _Q21.f64[0]);
  __asm { FMLA            D27, D18, V21.D[1] }
  *(double *)(a1 + 1120) = v599;
  *(double *)(a1 + 1240) = v607;
  _Q18 = vmlaq_laneq_f64(vmulq_n_f64(v579, _Q23.f64[0]), _Q21, _Q23, 1);
  _Q2.f64[1] = _Q21.f64[1];
  __asm { FMLA            D4, D7, V23.D[1] }
  _Q23 = _Q4;
  *(float64_t *)(a1 + 1144) = _Q3.f64[0];
  *(float64x2_t *)(a1 + 1128) = _Q10;
  *(_QWORD *)(a1 + 1264) = *(_OWORD *)&vaddq_f64(v442, v515);
  *(float64x2_t *)(a1 + 1248) = v262;
  __asm { FMLA            D3, D7, V8.D[1] }
  _Q3.f64[0] = _Q3.f64[0] + v629 * v441;
  *(_QWORD *)(a1 + 1384) = *(_OWORD *)&vaddq_f64(v444, vaddq_f64(v532, _Q3));
  _Q17 = vmlaq_laneq_f64(vmulq_n_f64(v579, _Q20.f64[0]), _Q21, _Q20, 1);
  __asm { FMLA            D4, D7, V20.D[1] }
  _Q31 = _Q4;
  v273 = vmlaq_laneq_f64(vmulq_n_f64(v579, _Q1.f64[0]), _Q21, _Q1, 1);
  __asm { FMLA            D2, D7, V1.D[1] }
  _Q20 = _Q2;
  _Q1.f64[0] = v558.f64[0] * v577 + v562 * v576 + v441 * v629;
  *(_QWORD *)&_Q1.f64[0] = *(_OWORD *)&vaddq_f64(_Q1, vaddq_f64(v444, v532));
  _Q2.f64[1] = v631.f64[1];
  _Q4 = v601;
  _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], v601.f64[0], v631.f64[0]);
  __asm { FMLA            D29, D4, V2.D[1] }
  _Q4.f64[0] = v555 * v577 + v556 * v576 + v601.f64[0] * v629;
  v588 = _Q4;
  *(float64x2_t *)(a1 + 1344) = _Q9;
  v276 = vmlaq_n_f64(v266, _Q9, v631.f64[0]);
  _Q30 = vmlaq_laneq_f64(v267, _Q9, v631, 1);
  v593 = vmlaq_n_f64(_Q12, _Q9, v629);
  _Q4 = v604;
  *(float64_t *)(a1 + 1360) = v604.f64[0];
  _Q25.f64[0] = vmlad_n_f64(_Q25.f64[0], v604.f64[0], v631.f64[0]);
  __asm { FMLA            D27, D4, V2.D[1] }
  _Q4.f64[0] = v599 * v577 + v607 * v576 + v604.f64[0] * v629;
  v590 = _Q4;
  _Q4 = v444;
  _Q16.f64[0] = vmlad_n_f64(_Q16.f64[0], v444.f64[0], v631.f64[0]);
  v645 = _Q16;
  __asm { FMLA            D19, D4, V2.D[1] }
  v605 = _Q19;
  _Q4.f64[0] = v443.f64[0] * v577 + v442.f64[0] * v576 + v444.f64[0] * v629;
  v595 = _Q4;
  v641 = vmlaq_n_f64(_Q18, v631, v540.f64[0]);
  _Q23.f64[0] = vmlad_n_f64(_Q23.f64[0], v629, v540.f64[0]);
  v600 = _Q23;
  v656 = vmlaq_n_f64(_Q17, v631, v258);
  _Q31.f64[0] = vmlad_n_f64(_Q31.f64[0], v629, v258);
  v598 = _Q31;
  v663 = vmlaq_n_f64(v662, v566, v631.f64[0]);
  v280 = vmlaq_laneq_f64(v263, v566, v631, 1);
  v608 = v280;
  v602 = vmlaq_n_f64(v273, v631, _Q1.f64[0]);
  _Q20.f64[0] = vmlad_n_f64(_Q20.f64[0], v629, _Q1.f64[0]);
  v632 = _Q20;
  v643 = vmlaq_n_f64(_Q22, v566, v629);
  *(float64x2_t *)(a1 + 1368) = vaddq_f64(v566, v539);
  *(float64x2_t *)(a1 + 1152) = v560;
  *(float64_t *)(a1 + 1168) = v558.f64[0];
  *(float64x2_t *)(a1 + 1272) = v564;
  *(double *)(a1 + 1288) = v562;
  *(float64x2_t *)(a1 + 1392) = v440;
  _Q12.f64[0] = v462 + v652 * v620.f64[0];
  _Q11.f64[0] = v618;
  _Q12.f64[1] = v461 + v652 * v618;
  *(double *)(a1 + 1408) = v441;
  _Q7.f64[0] = v624;
  _Q6.f64[1] = v463.f64[1];
  _Q6.f64[0] = vmlad_n_f64(v463.f64[0], v624, v653.f64[0]);
  _Q31.f64[1] = v637.f64[1];
  _Q10.f64[1] = v636.f64[1];
  _Q20.f64[0] = v611;
  v280.f64[0] = vmlad_n_f64(vmlad_n_f64(v620.f64[0] * v638.f64[0], v618, v637.f64[0]), v611, v636.f64[0]);
  *(_QWORD *)&v273.f64[0] = *(_OWORD *)&vaddq_f64(_Q5, vaddq_f64(v572, vaddq_f64(_Q6, v280)));
  v622 = (int64x2_t)vmlaq_n_f64(v621, v653, v620.f64[0]);
  v617 = (int64x2_t)vmlaq_n_f64(v616, v653, v618);
  _Q28 = (float64x2_t)vzip1q_s64(v622, v617);
  v282 = vaddq_f64(_Q28, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v575, v638.f64[0]), v574, v637.f64[0]), v573, v636.f64[0]));
  _Q13 = vmlaq_n_f64(v464, v653, v611);
  _Q18.f64[1] = v653.f64[1];
  _Q6.f64[0] = v614.f64[0];
  _Q2.f64[0] = v613;
  _Q28.f64[0] = vmlad_n_f64(vmlad_n_f64(v615.f64[0] * v638.f64[0], v614.f64[0], v637.f64[0]), v613, v636.f64[0]);
  _Q25 = vaddq_f64(_Q25, vaddq_f64(v570, vaddq_f64(_Q13, _Q28)));
  _Q0 = vaddq_f64(v276, vaddq_f64(v569, v282));
  _Q26 = vaddq_f64(vmlaq_n_f64(v466, v651, v273.f64[0]), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v647, _Q0.f64[0]), v648, _Q0, 1), v649, _Q25.f64[0]));
  *(float64x2_t *)(a1 + 720) = _Q26;
  _Q28.f64[1] = v467.f64[1];
  _Q28.f64[0] = vmlad_n_f64(v467.f64[0], v650, v273.f64[0]);
  _Q1.f64[0] = v646.f64[0];
  __asm { FMLA            D26, D1, V0.D[1] }
  _Q26.f64[0] = vmlad_n_f64(_Q26.f64[0], v657.f64[0], _Q25.f64[0]);
  _Q26 = vaddq_f64(_Q28, _Q26);
  *(float64_t *)(a1 + 736) = _Q26.f64[0];
  _Q28.f64[1] = v465;
  __asm
  {
    FMLA            D28, D7, V18.D[1]
    FMLA            D26, D11, V31.D[1]
    FMLA            D26, D20, V10.D[1]
  }
  *(_QWORD *)&_Q20.f64[0] = *(_OWORD *)&vaddq_f64(_Q29, vaddq_f64(v610, vaddq_f64(_Q28, _Q26)));
  __asm
  {
    FMLA            D29, D6, V31.D[1]
    FMLA            D29, D2, V10.D[1]
  }
  v288 = vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)_Q13, 1), _Q29);
  v289 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v575, v638, 1), v574, v637, 1), v573, v636, 1);
  _Q27 = vaddq_f64(_Q27, vaddq_f64(v568, v288));
  _Q26 = vaddq_f64(_Q30, vaddq_f64(v567, vaddq_f64((float64x2_t)vzip2q_s64(v622, v617), v289)));
  _Q10.f64[1] = v647.f64[1];
  _Q5.f64[1] = v649.f64[1];
  _Q28 = vaddq_f64(vmlaq_n_f64(v470, v651, _Q20.f64[0]), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v647, _Q26.f64[0]), v648, _Q26, 1), v649, _Q27.f64[0]));
  *(float64x2_t *)(a1 + 840) = _Q28;
  _Q2.f64[1] = v472.f64[1];
  _Q2.f64[0] = vmlad_n_f64(v472.f64[0], v650, _Q20.f64[0]);
  __asm { FMLA            D28, D1, V26.D[1] }
  _Q28.f64[0] = vmlad_n_f64(_Q28.f64[0], v657.f64[0], _Q27.f64[0]);
  v293 = vaddq_f64(_Q2, _Q28);
  *(float64_t *)(a1 + 856) = v293.f64[0];
  v293.f64[0] = v468 + v624 * v652;
  v289.f64[0] = v620.f64[0] * v635 + v618 * v634 + v611 * v633;
  v294 = vaddq_f64(v571, vaddq_f64(v293, v289));
  *(_QWORD *)&_Q16.f64[0] = *(_OWORD *)&vaddq_f64(v588, v294);
  v294.f64[0] = v469 + v652 * v611;
  v289.f64[0] = v615.f64[0] * v635 + v614.f64[0] * v634 + v613 * v633;
  _Q2.f64[0] = v634;
  _Q8.f64[1] = v459.f64[1];
  *(_QWORD *)&_Q23.f64[0] = *(_OWORD *)&vaddq_f64(v590, vaddq_f64(v460, vaddq_f64(v294, v289)));
  _Q4.f64[1] = v593.f64[1];
  _Q1 = vaddq_f64(v593, vaddq_f64(v459, vaddq_f64(_Q12, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v575, v635), v574, v634), v573, v633))));
  *(float64x2_t *)(a1 + 960) = vaddq_f64(vmlaq_n_f64(v471, v651, _Q16.f64[0]), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v647, _Q1.f64[0]), v648, _Q1, 1), v649, _Q23.f64[0]));
  _Q30.f64[1] = v653.f64[1];
  _Q4.f64[0] = v476 + v652 * v572.f64[0];
  _Q5.f64[0] = v475 + v652 * v610.f64[0];
  v630 = _Q5;
  _Q5.f64[0] = v474 + v652 * v571.f64[0];
  v623 = _Q5;
  _Q19.f64[1] = v481.f64[1];
  v296 = vmlaq_n_f64(v480, v653, v273.f64[0]);
  _Q19.f64[0] = vmlad_n_f64(v481.f64[0], v652, v273.f64[0]);
  v294.f64[1] = v482.f64[1];
  _Q21 = vmlaq_n_f64(v483, v653, _Q20.f64[0]);
  _Q22.f64[1] = v487.f64[1];
  _Q22.f64[0] = vmlad_n_f64(v487.f64[0], v652, _Q20.f64[0]);
  _Q24 = vmlaq_n_f64(v485, v653, _Q16.f64[0]);
  v294.f64[0] = vmlad_n_f64(v482.f64[0], v652, _Q16.f64[0]);
  _Q20.f64[1] = v473.f64[1];
  _Q20.f64[0] = vmlad_n_f64(v473.f64[0], v650, _Q16.f64[0]);
  _Q5.f64[1] = v659.f64[1];
  _Q12.f64[0] = v646.f64[0];
  __asm { FMLA            D5, D12, V1.D[1] }
  _Q16.f64[1] = v657.f64[1];
  _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], v657.f64[0], _Q23.f64[0]);
  *(_QWORD *)(a1 + 976) = *(_OWORD *)&vaddq_f64(_Q20, _Q5);
  _Q20.f64[1] = v569.f64[1];
  __asm { FMLA            D16, D2, V20.D[1] }
  _Q16.f64[0] = _Q16.f64[0] + v633 * v570.f64[0];
  _Q18.f64[1] = v567.f64[1];
  __asm { FMLA            D30, D2, V18.D[1] }
  _Q30.f64[0] = _Q30.f64[0] + v633 * v568.f64[0];
  _Q18.f64[1] = v459.f64[1];
  __asm { FMLA            D8, D2, V18.D[1] }
  _Q8.f64[0] = _Q8.f64[0] + v633 * v460.f64[0];
  *(float64x2_t *)(a1 + 744) = _Q0;
  __asm { FMLA            D10, D2, V0.D[1] }
  *(float64_t *)(a1 + 760) = _Q25.f64[0];
  v299 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v638, _Q0.f64[0]), v637, _Q0, 1), v636, _Q25.f64[0]);
  _Q10.f64[0] = vmlad_n_f64(_Q10.f64[0], v633, _Q25.f64[0]);
  *(float64x2_t *)(a1 + 864) = _Q26;
  __asm { FMLA            D25, D2, V26.D[1] }
  *(float64_t *)(a1 + 880) = _Q27.f64[0];
  v300 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v638, _Q26.f64[0]), v637, _Q26, 1), v636, _Q27.f64[0]);
  _Q25.f64[0] = vmlad_n_f64(_Q25.f64[0], v633, _Q27.f64[0]);
  v301 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v638, _Q1.f64[0]), v637, _Q1, 1), v636, _Q23.f64[0]);
  __asm { FMLA            D27, D2, V1.D[1] }
  _Q27.f64[0] = vmlad_n_f64(_Q27.f64[0], v633, _Q23.f64[0]);
  *(float64_t *)(a1 + 1000) = _Q23.f64[0];
  *(float64x2_t *)(a1 + 984) = _Q1;
  _Q1 = vaddq_f64(vmlaq_n_f64(v486, v653, v572.f64[0]), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v638, v569.f64[0]), v637, v569, 1), v636, v570.f64[0]));
  _Q5 = (int64x2_t)vaddq_f64(vmlaq_n_f64(v484, v653, v610.f64[0]), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v638, v567.f64[0]), v637, v567, 1), v636, v568.f64[0]));
  *(float64x2_t *)(a1 + 768) = vaddq_f64(vaddq_f64(v663, vaddq_f64(v458, (float64x2_t)vzip1q_s64((int64x2_t)_Q1, _Q5))), vaddq_f64(v641, vaddq_f64(v296, v299)));
  v304 = vaddq_f64(vmlaq_n_f64(v488, v653, v571.f64[0]), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v638, v459.f64[0]), v637, v459, 1), v636, v460.f64[0]));
  *(_QWORD *)(a1 + 784) = *(_OWORD *)&vaddq_f64(vaddq_f64(v645, vaddq_f64(v507, v304)), vaddq_f64(v600, vaddq_f64(_Q19, _Q10)));
  *(float64x2_t *)(a1 + 888) = vaddq_f64(vaddq_f64(v608, vaddq_f64(v457, (float64x2_t)vzip2q_s64((int64x2_t)_Q1, _Q5))), vaddq_f64(v656, vaddq_f64(_Q21, v300)));
  *(_QWORD *)(a1 + 904) = *(_OWORD *)&vaddq_f64(vaddq_f64(v605, vaddq_f64(v503, (float64x2_t)vdupq_laneq_s64((int64x2_t)v304, 1))), vaddq_f64(v598, vaddq_f64(_Q22, _Q25)));
  *(float64x2_t *)(a1 + 1008) = vaddq_f64(vaddq_f64(v643, vaddq_f64(v501, (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(_Q4, _Q16), (int64x2_t)vaddq_f64(v630, _Q30)))), vaddq_f64(v602, vaddq_f64(_Q24, v301)));
  _Q0 = vaddq_f64(vaddq_f64(v595, vaddq_f64(v505, vaddq_f64(v623, _Q8))), vaddq_f64(v632, vaddq_f64(v294, _Q27)));
  *(float64_t *)(a1 + 1024) = _Q0.f64[0];
  _Q5.i64[1] = *(_QWORD *)&v651.f64[1];
  _Q1.f64[1] = v477.f64[1];
  _Q3.f64[0] = v624;
  _Q1.f64[0] = vmlad_n_f64(v477.f64[0], v624, v651.f64[0]);
  _Q23.f64[1] = v648.f64[1];
  _Q17.f64[0] = v618;
  _Q25.f64[1] = v649.f64[1];
  _Q4.f64[0] = v611;
  _Q0.f64[0] = vmlad_n_f64(vmlad_n_f64(v620.f64[0] * v647.f64[0], v618, v648.f64[0]), v611, v649.f64[0]);
  v306 = vaddq_f64(_Q1, _Q0);
  _Q1.f64[1] = v479;
  __asm
  {
    FMLA            D1, D3, V5.D[1]
    FMLA            D0, D17, V23.D[1]
    FMLA            D0, D4, V25.D[1]
  }
  v307 = vaddq_f64(_Q1, _Q0);
  _Q0.f64[0] = v478 + v624 * v650;
  _Q20.f64[0] = v646.f64[0];
  _Q1.f64[0] = v620.f64[0] * v659.f64[0] + v618 * v646.f64[0] + v611 * v657.f64[0];
  *(_QWORD *)&_Q4.f64[0] = *(_OWORD *)&vaddq_f64(_Q0, _Q1);
  _Q16.f64[1] = v620.f64[1];
  _Q21.f64[1] = v651.f64[1];
  _Q19.f64[1] = v575.f64[1];
  _Q30.f64[1] = v574.f64[1];
  _Q12.f64[1] = v573.f64[1];
  _Q0 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v575, v647.f64[0]), v574, v648.f64[0]), v573, v649.f64[0]);
  v626 = vmlaq_n_f64(v625, v651, v618);
  v628 = vmlaq_n_f64(v627, v651, v620.f64[0]);
  _Q5 = vaddq_f64((float64x2_t)vzip1q_s64((int64x2_t)v628, (int64x2_t)v626), _Q0);
  v310 = vmlaq_n_f64(v498, v651, v611);
  _Q13.f64[0] = v614.f64[0];
  __asm { FMLA            D0, D13, V23.D[1] }
  _Q27.f64[0] = v613;
  __asm { FMLA            D0, D27, V25.D[1] }
  *(_QWORD *)&_Q6.f64[0] = *(_OWORD *)&vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v310, 1), _Q0);
  _Q0 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v575, v647, 1), v574, v648, 1), v573, v649, 1);
  v312 = (float64x2_t)vzip2q_s64((int64x2_t)v628, (int64x2_t)v626);
  _Q7 = vaddq_f64(v312, _Q0);
  _Q16.f64[0] = v490 + v650 * v620.f64[0];
  v312.f64[0] = v489 + v650 * v618;
  __asm { FMLA            D0, D20, V19.D[1] }
  _Q0.f64[0] = _Q0.f64[0] + v657.f64[0] * v615.f64[0];
  v314 = vaddq_f64(_Q16, _Q0);
  _Q16.f64[1] = v312.f64[0];
  _Q0.f64[0] = v646.f64[0];
  v315 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v575, v659.f64[0]), v574, v646.f64[0]), v573, v657.f64[0]);
  _Q16 = vaddq_f64(_Q16, v315);
  v315.f64[0] = v491 + v650 * v611;
  *(float64x2_t *)(a1 + 384) = v575;
  *(float64x2_t *)(a1 + 504) = v574;
  __asm { FMLA            D20, D0, V30.D[1] }
  v317 = vmlaq_n_f64(v492, v651, v306.f64[0]);
  _Q30.f64[1] = v497.f64[1];
  _Q30.f64[0] = vmlad_n_f64(v497.f64[0], v650, v306.f64[0]);
  v318 = vmlaq_n_f64(v496, v651, v307.f64[0]);
  _Q8.f64[1] = v495.f64[1];
  _Q8.f64[0] = vmlad_n_f64(v495.f64[0], v650, v307.f64[0]);
  *(float64_t *)(a1 + 400) = v615.f64[0];
  *(float64_t *)(a1 + 520) = v614.f64[0];
  v306.f64[0] = _Q20.f64[0] + v657.f64[0] * v614.f64[0];
  v319 = vmlaq_n_f64(v494, v651, _Q4.f64[0]);
  _Q10.f64[1] = v493.f64[1];
  _Q10.f64[0] = vmlad_n_f64(v493.f64[0], v650, _Q4.f64[0]);
  _Q22.f64[1] = v659.f64[1];
  __asm
  {
    FMLA            D21, D0, V5.D[1]
    FMLA            D22, D0, V7.D[1]
  }
  _Q24.f64[1] = v648.f64[1];
  v320 = vmlaq_laneq_f64(vmulq_n_f64(v647, _Q16.f64[0]), v648, _Q16, 1);
  __asm
  {
    FMLA            D24, D0, V16.D[1]
    FMLA            D16, D0, V12.D[1]
  }
  v307.f64[0] = vmlad_n_f64(vmlad_n_f64(v615.f64[0] * v647.f64[0], v614.f64[0], v648.f64[0]), v613, v649.f64[0]);
  v321 = vaddq_f64(v310, v307);
  v322 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v647, _Q5.f64[0]), v648, _Q5, 1), v649, v321.f64[0]);
  _Q21.f64[0] = vmlad_n_f64(_Q21.f64[0], v657.f64[0], v321.f64[0]);
  v323 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v647, _Q7.f64[0]), v648, _Q7, 1), v649, _Q6.f64[0]);
  _Q22.f64[0] = vmlad_n_f64(_Q22.f64[0], v657.f64[0], _Q6.f64[0]);
  v321.f64[0] = v615.f64[0] * v659.f64[0] + v614.f64[0] * v646.f64[0] + v613 * v657.f64[0];
  v324 = vaddq_f64(v315, v321);
  v325 = vmlaq_n_f64(v320, v649, v324.f64[0]);
  _Q24.f64[0] = vmlad_n_f64(_Q24.f64[0], v657.f64[0], v324.f64[0]);
  v324.f64[0] = _Q16.f64[0] + v657.f64[0] * v613;
  *(double *)(a1 + 640) = v613;
  *(float64x2_t *)(a1 + 624) = v573;
  v326 = *(float64x2_t *)a4;
  *(float64x2_t *)a1 = vaddq_f64(vaddq_f64(v322, v317), *(float64x2_t *)a4);
  v326.f64[0] = *(float64_t *)(a4 + 16);
  *(_QWORD *)(a1 + 16) = *(_OWORD *)&vaddq_f64(vaddq_f64(_Q21, _Q30), v326);
  v327 = vaddq_f64(v323, v318);
  v328 = *(float64x2_t *)(a4 + 24);
  *(float64x2_t *)(a1 + 120) = vaddq_f64(v327, v328);
  v328.f64[0] = *(float64_t *)(a4 + 40);
  *(_QWORD *)(a1 + 136) = *(_OWORD *)&vaddq_f64(vaddq_f64(_Q22, _Q8), v328);
  v329 = *(float64x2_t *)(a4 + 48);
  *(float64x2_t *)(a1 + 240) = vaddq_f64(vaddq_f64(v325, v319), v329);
  v329.f64[0] = *(float64_t *)(a4 + 64);
  *(_QWORD *)(a1 + 256) = *(_OWORD *)&vaddq_f64(vaddq_f64(_Q24, _Q10), v329);
  v330 = vaddq_f64(v628, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v647, v575.f64[0]), v648, v575, 1), v649, v615.f64[0]));
  v331 = vaddq_f64(v312, v306);
  v332 = vaddq_f64(v626, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v647, v574.f64[0]), v648, v574, 1), v649, v614.f64[0]));
  v333 = vaddq_f64(v315, v324);
  *(float64x2_t *)(a1 + 360) = v330;
  v334 = vaddq_f64(v310, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v647, v573.f64[0]), v648, v573, 1), v649, v613));
  v335 = vaddq_f64(v330, *(float64x2_t *)(a4 + 792));
  *(float64_t *)(a1 + 376) = v314.f64[0];
  *(float64x2_t *)(a1 + 480) = v332;
  *(float64_t *)(a1 + 496) = v331.f64[0];
  *(float64x2_t *)(a1 + 600) = v334;
  *(float64_t *)(a1 + 616) = v333.f64[0];
  *(float64x2_t *)(a1 + 360) = v335;
  v335.f64[0] = *(float64_t *)(a4 + 808);
  *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vaddq_f64(v314, v335);
  v335.f64[0] = *(float64_t *)(a4 + 832);
  *(float64_t *)(a1 + 376) = _Q0.f64[0];
  v336 = vaddq_f64(v332, *(float64x2_t *)(a4 + 816));
  v332.f64[0] = *(float64_t *)(a4 + 856);
  *(float64x2_t *)(a1 + 480) = v336;
  v337 = *(float64x2_t *)(a4 + 840);
  *(_QWORD *)(a1 + 496) = *(_OWORD *)&vaddq_f64(v331, v335);
  *(float64x2_t *)(a1 + 600) = vaddq_f64(v334, v337);
  v338 = vaddq_f64(v333, v332);
  *(float64_t *)(a1 + 616) = v338.f64[0];
  v338.f64[0] = *(float64_t *)(a1 + 400);
  v339 = *(float64x2_t *)(a1 + 384);
  v332.f64[0] = *(float64_t *)(a1 + 520);
  v340 = *(float64x2_t *)(a1 + 504);
  v335.f64[0] = *(float64_t *)(a1 + 640);
  v334.f64[0] = *(float64_t *)(a4 + 88);
  *(_QWORD *)&v338.f64[0] = *(_OWORD *)&vaddq_f64(v338, v334);
  v341 = *(float64x2_t *)(a1 + 624);
  *(float64_t *)(a1 + 400) = v338.f64[0];
  v342 = vaddq_f64(v339, *(float64x2_t *)(a4 + 72));
  v339.f64[0] = *(float64_t *)(a4 + 112);
  *(float64x2_t *)(a1 + 384) = v342;
  v343 = *(float64x2_t *)(a4 + 96);
  *(_QWORD *)&v339.f64[0] = *(_OWORD *)&vaddq_f64(v332, v339);
  v332.f64[0] = *(float64_t *)(a4 + 136);
  *(float64_t *)(a1 + 520) = v339.f64[0];
  v344 = *(float64x2_t *)(a4 + 120);
  *(float64x2_t *)(a1 + 504) = vaddq_f64(v340, v343);
  *(_QWORD *)(a1 + 640) = *(_OWORD *)&vaddq_f64(v335, v332);
  v345 = vaddq_f64(v341, v344);
  *(float64x2_t *)(a1 + 624) = v345;
  v345.f64[0] = *(float64_t *)(a1 + 736);
  v332.f64[0] = *(float64_t *)(a1 + 856);
  v346 = *(float64x2_t *)(a1 + 840);
  v335.f64[0] = *(float64_t *)(a1 + 976);
  v347 = vaddq_f64(*(float64x2_t *)(a1 + 720), *(float64x2_t *)(a4 + 864));
  v348 = *(float64x2_t *)(a1 + 960);
  *(float64x2_t *)(a1 + 720) = v347;
  v347.f64[0] = *(float64_t *)(a4 + 880);
  *(_QWORD *)&v345.f64[0] = *(_OWORD *)&vaddq_f64(v345, v347);
  v347.f64[0] = *(float64_t *)(a4 + 904);
  *(float64_t *)(a1 + 736) = v345.f64[0];
  v349 = vaddq_f64(v346, *(float64x2_t *)(a4 + 888));
  v346.f64[0] = *(float64_t *)(a4 + 928);
  *(float64x2_t *)(a1 + 840) = v349;
  v350 = *(float64x2_t *)(a4 + 912);
  *(_QWORD *)(a1 + 856) = *(_OWORD *)&vaddq_f64(v332, v347);
  *(float64x2_t *)(a1 + 960) = vaddq_f64(v348, v350);
  v351 = vaddq_f64(v335, v346);
  *(float64_t *)(a1 + 976) = v351.f64[0];
  v351.f64[0] = *(float64_t *)(a1 + 760);
  v332.f64[0] = *(float64_t *)(a1 + 880);
  v352 = *(float64x2_t *)(a1 + 864);
  v335.f64[0] = *(float64_t *)(a1 + 1000);
  v353 = vaddq_f64(*(float64x2_t *)(a1 + 744), *(float64x2_t *)(a4 + 432));
  v354 = *(float64x2_t *)(a1 + 984);
  *(float64x2_t *)(a1 + 744) = v353;
  v353.f64[0] = *(float64_t *)(a4 + 448);
  *(_QWORD *)&v351.f64[0] = *(_OWORD *)&vaddq_f64(v351, v353);
  v353.f64[0] = *(float64_t *)(a4 + 472);
  *(float64_t *)(a1 + 760) = v351.f64[0];
  v355 = vaddq_f64(v352, *(float64x2_t *)(a4 + 456));
  v352.f64[0] = *(float64_t *)(a4 + 496);
  *(float64x2_t *)(a1 + 864) = v355;
  v356 = *(float64x2_t *)(a4 + 480);
  *(_QWORD *)(a1 + 880) = *(_OWORD *)&vaddq_f64(v332, v353);
  *(float64x2_t *)(a1 + 984) = vaddq_f64(v354, v356);
  v357 = vaddq_f64(v335, v352);
  *(float64_t *)(a1 + 1000) = v357.f64[0];
  v357.f64[0] = *(float64_t *)(a1 + 784);
  v332.f64[0] = *(float64_t *)(a1 + 904);
  v358 = *(float64x2_t *)(a1 + 888);
  v335.f64[0] = *(float64_t *)(a1 + 1024);
  v359 = vaddq_f64(*(float64x2_t *)(a1 + 768), *(float64x2_t *)(a4 + 144));
  v360 = *(float64x2_t *)(a1 + 1008);
  *(float64x2_t *)(a1 + 768) = v359;
  v359.f64[0] = *(float64_t *)(a4 + 160);
  *(_QWORD *)&v357.f64[0] = *(_OWORD *)&vaddq_f64(v357, v359);
  v359.f64[0] = *(float64_t *)(a4 + 184);
  *(float64_t *)(a1 + 784) = v357.f64[0];
  v361 = vaddq_f64(v358, *(float64x2_t *)(a4 + 168));
  v358.f64[0] = *(float64_t *)(a4 + 208);
  *(float64x2_t *)(a1 + 888) = v361;
  v362 = *(float64x2_t *)(a4 + 192);
  *(_QWORD *)(a1 + 904) = *(_OWORD *)&vaddq_f64(v332, v359);
  *(float64x2_t *)(a1 + 1008) = vaddq_f64(v360, v362);
  v363 = vaddq_f64(v335, v358);
  *(float64_t *)(a1 + 1024) = v363.f64[0];
  v363.f64[0] = *(float64_t *)(a1 + 1144);
  v332.f64[0] = *(float64_t *)(a1 + 1264);
  v364 = *(float64x2_t *)(a1 + 1248);
  v335.f64[0] = *(float64_t *)(a1 + 1384);
  v365 = vaddq_f64(*(float64x2_t *)(a1 + 1128), *(float64x2_t *)(a4 + 648));
  v366 = *(float64x2_t *)(a1 + 1368);
  *(float64x2_t *)(a1 + 1128) = v365;
  v365.f64[0] = *(float64_t *)(a4 + 664);
  *(_QWORD *)&v363.f64[0] = *(_OWORD *)&vaddq_f64(v363, v365);
  v365.f64[0] = *(float64_t *)(a4 + 688);
  *(float64_t *)(a1 + 1144) = v363.f64[0];
  v367 = vaddq_f64(v364, *(float64x2_t *)(a4 + 672));
  v364.f64[0] = *(float64_t *)(a4 + 712);
  *(float64x2_t *)(a1 + 1248) = v367;
  v368 = *(float64x2_t *)(a4 + 696);
  *(_QWORD *)(a1 + 1264) = *(_OWORD *)&vaddq_f64(v332, v365);
  *(float64x2_t *)(a1 + 1368) = vaddq_f64(v366, v368);
  v369 = vaddq_f64(v335, v364);
  *(float64_t *)(a1 + 1384) = v369.f64[0];
  v369.f64[0] = *(float64_t *)(a1 + 1168);
  v332.f64[0] = *(float64_t *)(a1 + 1288);
  v370 = *(float64x2_t *)(a1 + 1272);
  v335.f64[0] = *(float64_t *)(a1 + 1408);
  v371 = vaddq_f64(*(float64x2_t *)(a1 + 1152), *(float64x2_t *)(a4 + 216));
  v372 = *(float64x2_t *)(a1 + 1392);
  *(float64x2_t *)(a1 + 1152) = v371;
  v371.f64[0] = *(float64_t *)(a4 + 232);
  *(_QWORD *)&v369.f64[0] = *(_OWORD *)&vaddq_f64(v369, v371);
  v371.f64[0] = *(float64_t *)(a4 + 256);
  *(float64_t *)(a1 + 1168) = v369.f64[0];
  v373 = vaddq_f64(v370, *(float64x2_t *)(a4 + 240));
  v370.f64[0] = *(float64_t *)(a4 + 280);
  *(float64x2_t *)(a1 + 1272) = v373;
  v374 = *(float64x2_t *)(a4 + 264);
  *(_QWORD *)(a1 + 1288) = *(_OWORD *)&vaddq_f64(v332, v371);
  *(float64x2_t *)(a1 + 1392) = vaddq_f64(v372, v374);
  v375 = vaddq_f64(v335, v370);
  *(float64_t *)(a1 + 1408) = v375.f64[0];
  v375.f64[0] = *(float64_t *)(a1 + 1456);
  v332.f64[0] = *(float64_t *)(a1 + 1576);
  v376 = *(float64x2_t *)(a1 + 1560);
  v335.f64[0] = *(float64_t *)(a1 + 1696);
  v377 = vaddq_f64(*(float64x2_t *)(a1 + 1440), *(float64x2_t *)(a4 + 360));
  v378 = *(float64x2_t *)(a1 + 1680);
  *(float64x2_t *)(a1 + 1440) = v377;
  v377.f64[0] = *(float64_t *)(a4 + 376);
  *(_QWORD *)&v375.f64[0] = *(_OWORD *)&vaddq_f64(v375, v377);
  v377.f64[0] = *(float64_t *)(a4 + 400);
  *(float64_t *)(a1 + 1456) = v375.f64[0];
  v379 = vaddq_f64(v376, *(float64x2_t *)(a4 + 384));
  v376.f64[0] = *(float64_t *)(a4 + 424);
  *(float64x2_t *)(a1 + 1560) = v379;
  v380 = *(float64x2_t *)(a4 + 408);
  *(_QWORD *)(a1 + 1576) = *(_OWORD *)&vaddq_f64(v332, v377);
  *(float64x2_t *)(a1 + 1680) = vaddq_f64(v378, v380);
  v381 = vaddq_f64(v335, v376);
  *(float64_t *)(a1 + 1696) = v381.f64[0];
  v381.f64[0] = *(float64_t *)(a1 + 1480);
  v332.f64[0] = *(float64_t *)(a1 + 1600);
  v382 = *(float64x2_t *)(a1 + 1584);
  v335.f64[0] = *(float64_t *)(a1 + 1720);
  v383 = vaddq_f64(*(float64x2_t *)(a1 + 1464), *(float64x2_t *)(a4 + 504));
  v384 = *(float64x2_t *)(a1 + 1704);
  *(float64x2_t *)(a1 + 1464) = v383;
  v383.f64[0] = *(float64_t *)(a4 + 520);
  *(_QWORD *)&v381.f64[0] = *(_OWORD *)&vaddq_f64(v381, v383);
  v383.f64[0] = *(float64_t *)(a4 + 544);
  *(float64_t *)(a1 + 1480) = v381.f64[0];
  v385 = vaddq_f64(v382, *(float64x2_t *)(a4 + 528));
  v382.f64[0] = *(float64_t *)(a4 + 568);
  *(float64x2_t *)(a1 + 1584) = v385;
  v386 = *(float64x2_t *)(a4 + 552);
  *(_QWORD *)(a1 + 1600) = *(_OWORD *)&vaddq_f64(v332, v383);
  *(float64x2_t *)(a1 + 1704) = vaddq_f64(v384, v386);
  v387 = vaddq_f64(v335, v382);
  *(float64_t *)(a1 + 1720) = v387.f64[0];
  v387.f64[0] = *(float64_t *)(a1 + 1504);
  v332.f64[0] = *(float64_t *)(a1 + 1624);
  v388 = *(float64x2_t *)(a1 + 1608);
  v335.f64[0] = *(float64_t *)(a1 + 1744);
  v389 = vaddq_f64(*(float64x2_t *)(a1 + 1488), *(float64x2_t *)(a4 + 720));
  v390 = *(float64x2_t *)(a1 + 1728);
  *(float64x2_t *)(a1 + 1488) = v389;
  v389.f64[0] = *(float64_t *)(a4 + 736);
  *(_QWORD *)&v387.f64[0] = *(_OWORD *)&vaddq_f64(v387, v389);
  v389.f64[0] = *(float64_t *)(a4 + 760);
  *(float64_t *)(a1 + 1504) = v387.f64[0];
  v391 = vaddq_f64(v388, *(float64x2_t *)(a4 + 744));
  v388.f64[0] = *(float64_t *)(a4 + 784);
  *(float64x2_t *)(a1 + 1608) = v391;
  v392 = *(float64x2_t *)(a4 + 768);
  *(_QWORD *)(a1 + 1624) = *(_OWORD *)&vaddq_f64(v332, v389);
  *(float64x2_t *)(a1 + 1728) = vaddq_f64(v390, v392);
  v393 = vaddq_f64(v335, v388);
  *(float64_t *)(a1 + 1744) = v393.f64[0];
  v393.f64[0] = *(float64_t *)(a1 + 1528);
  v332.f64[0] = *(float64_t *)(a1 + 1648);
  v394 = *(float64x2_t *)(a1 + 1632);
  v335.f64[0] = *(float64_t *)(a1 + 1768);
  v395 = vaddq_f64(*(float64x2_t *)(a1 + 1512), *(float64x2_t *)(a4 + 576));
  v396 = *(float64x2_t *)(a1 + 1752);
  *(float64x2_t *)(a1 + 1512) = v395;
  v395.f64[0] = *(float64_t *)(a4 + 592);
  *(_QWORD *)&v393.f64[0] = *(_OWORD *)&vaddq_f64(v393, v395);
  v395.f64[0] = *(float64_t *)(a4 + 616);
  *(float64_t *)(a1 + 1528) = v393.f64[0];
  v397 = vaddq_f64(v394, *(float64x2_t *)(a4 + 600));
  v394.f64[0] = *(float64_t *)(a4 + 640);
  *(float64x2_t *)(a1 + 1632) = v397;
  v398 = *(float64x2_t *)(a4 + 624);
  *(_QWORD *)(a1 + 1648) = *(_OWORD *)&vaddq_f64(v332, v395);
  v399 = vaddq_f64(v396, v398);
  *(float64x2_t *)(a1 + 1752) = v399;
  *(_QWORD *)(a1 + 1768) = *(_OWORD *)&vaddq_f64(v335, v394);
  v399.f64[0] = *(float64_t *)(a1 + 1552);
  v332.f64[0] = *(float64_t *)(a1 + 1672);
  v335.f64[0] = *(float64_t *)(a1 + 1792);
  v396.f64[0] = *(float64_t *)(a4 + 304);
  *(_QWORD *)&v399.f64[0] = *(_OWORD *)&vaddq_f64(v399, v396);
  v400 = *(float64x2_t *)(a4 + 288);
  v401 = vaddq_f64(*(float64x2_t *)(a1 + 1536), v400);
  v400.f64[0] = *(float64_t *)(a4 + 328);
  *(_QWORD *)&v332.f64[0] = *(_OWORD *)&vaddq_f64(v332, v400);
  v402 = *(float64x2_t *)(a4 + 312);
  v403 = vaddq_f64(*(float64x2_t *)(a1 + 1656), v402);
  v402.f64[0] = *(float64_t *)(a4 + 352);
  *(float64x2_t *)(a1 + 1536) = v401;
  *(float64_t *)(a1 + 1552) = v399.f64[0];
  *(float64x2_t *)(a1 + 1656) = v403;
  v404 = *(float64x2_t *)(a1 + 1776);
  *(float64_t *)(a1 + 1672) = v332.f64[0];
  result = vaddq_f64(v404, *(float64x2_t *)(a4 + 336));
  *(float64x2_t *)(a1 + 1776) = result;
  *(_QWORD *)(a1 + 1792) = *(_OWORD *)&vaddq_f64(v335, v402);
  return result;
}

float64_t sub_20F4C010C(float64x2_t *a1, float64x2_t *a2, double a3)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v11;
  float64_t result;

  sub_20F4C0388(a1, a2, a3);
  v4.f64[0] = a1->f64[0];
  v4.f64[1] = a1[2].f64[0];
  v5.f64[0] = a1[4].f64[0];
  __asm { FMOV            V2.2D, #1.0 }
  v11 = vaddq_f64(v4, _Q2);
  a1[2].f64[0] = v11.f64[1];
  a1->f64[0] = v11.f64[0];
  *(_QWORD *)&a1[4].f64[0] = *(_OWORD *)&vaddq_f64(v5, _Q2);
  result = a1[36].f64[0] + 1.0;
  a1[36].f64[0] = result;
  return result;
}

float64_t sub_20F4C0164(float64x2_t *a1, float64x2_t *a2, double a3)
{
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64_t result;

  v3 = vaddq_f64(a1[1], vmulq_n_f64(a2[1], a3));
  *a1 = vaddq_f64(*a1, vmulq_n_f64(*a2, a3));
  a1[1] = v3;
  v4 = vaddq_f64(a1[3], vmulq_n_f64(a2[3], a3));
  a1[2] = vaddq_f64(a1[2], vmulq_n_f64(a2[2], a3));
  a1[3] = v4;
  v5 = vaddq_f64(a1[5], vmulq_n_f64(a2[5], a3));
  a1[4] = vaddq_f64(a1[4], vmulq_n_f64(a2[4], a3));
  a1[5] = v5;
  v6 = vaddq_f64(a1[7], vmulq_n_f64(a2[7], a3));
  a1[6] = vaddq_f64(a1[6], vmulq_n_f64(a2[6], a3));
  a1[7] = v6;
  v7 = vaddq_f64(a1[9], vmulq_n_f64(a2[9], a3));
  a1[8] = vaddq_f64(a1[8], vmulq_n_f64(a2[8], a3));
  a1[9] = v7;
  v8 = vaddq_f64(a1[11], vmulq_n_f64(a2[11], a3));
  a1[10] = vaddq_f64(a1[10], vmulq_n_f64(a2[10], a3));
  a1[11] = v8;
  v9 = vaddq_f64(a1[13], vmulq_n_f64(a2[13], a3));
  a1[12] = vaddq_f64(a1[12], vmulq_n_f64(a2[12], a3));
  a1[13] = v9;
  v10 = vaddq_f64(a1[15], vmulq_n_f64(a2[15], a3));
  a1[14] = vaddq_f64(a1[14], vmulq_n_f64(a2[14], a3));
  a1[15] = v10;
  v11 = vaddq_f64(a1[17], vmulq_n_f64(a2[17], a3));
  a1[16] = vaddq_f64(a1[16], vmulq_n_f64(a2[16], a3));
  a1[17] = v11;
  v12 = vaddq_f64(a1[19], vmulq_n_f64(a2[19], a3));
  a1[18] = vaddq_f64(a1[18], vmulq_n_f64(a2[18], a3));
  a1[19] = v12;
  v13 = vaddq_f64(a1[21], vmulq_n_f64(a2[21], a3));
  a1[20] = vaddq_f64(a1[20], vmulq_n_f64(a2[20], a3));
  a1[21] = v13;
  v14 = vaddq_f64(a1[23], vmulq_n_f64(a2[23], a3));
  a1[22] = vaddq_f64(a1[22], vmulq_n_f64(a2[22], a3));
  a1[23] = v14;
  v15 = vaddq_f64(a1[25], vmulq_n_f64(a2[25], a3));
  a1[24] = vaddq_f64(a1[24], vmulq_n_f64(a2[24], a3));
  a1[25] = v15;
  v16 = vaddq_f64(a1[27], vmulq_n_f64(a2[27], a3));
  a1[26] = vaddq_f64(a1[26], vmulq_n_f64(a2[26], a3));
  a1[27] = v16;
  v17 = vaddq_f64(a1[29], vmulq_n_f64(a2[29], a3));
  a1[28] = vaddq_f64(a1[28], vmulq_n_f64(a2[28], a3));
  a1[29] = v17;
  v18 = vaddq_f64(a1[31], vmulq_n_f64(a2[31], a3));
  a1[30] = vaddq_f64(a1[30], vmulq_n_f64(a2[30], a3));
  a1[31] = v18;
  v19 = vaddq_f64(a1[33], vmulq_n_f64(a2[33], a3));
  a1[32] = vaddq_f64(a1[32], vmulq_n_f64(a2[32], a3));
  a1[33] = v19;
  v20 = vaddq_f64(a1[35], vmulq_n_f64(a2[35], a3));
  a1[34] = vaddq_f64(a1[34], vmulq_n_f64(a2[34], a3));
  a1[35] = v20;
  a1[36].f64[0] = a1[36].f64[0] + a2[36].f64[0] * a3;
  result = a1[36].f64[1] + a2[36].f64[1] * a3;
  a1[36].f64[1] = result;
  return result;
}

float64x2_t sub_20F4C0388(float64x2_t *a1, float64x2_t *a2, double a3)
{
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t result;

  v3 = vmulq_n_f64(a2[1], a3);
  *a1 = vmulq_n_f64(*a2, a3);
  a1[1] = v3;
  v4 = vmulq_n_f64(a2[3], a3);
  a1[2] = vmulq_n_f64(a2[2], a3);
  a1[3] = v4;
  v5 = vmulq_n_f64(a2[5], a3);
  a1[4] = vmulq_n_f64(a2[4], a3);
  a1[5] = v5;
  v6 = vmulq_n_f64(a2[7], a3);
  a1[6] = vmulq_n_f64(a2[6], a3);
  a1[7] = v6;
  v7 = vmulq_n_f64(a2[9], a3);
  a1[8] = vmulq_n_f64(a2[8], a3);
  a1[9] = v7;
  v8 = vmulq_n_f64(a2[11], a3);
  a1[10] = vmulq_n_f64(a2[10], a3);
  a1[11] = v8;
  v9 = vmulq_n_f64(a2[13], a3);
  a1[12] = vmulq_n_f64(a2[12], a3);
  a1[13] = v9;
  v10 = vmulq_n_f64(a2[15], a3);
  a1[14] = vmulq_n_f64(a2[14], a3);
  a1[15] = v10;
  v11 = vmulq_n_f64(a2[17], a3);
  a1[16] = vmulq_n_f64(a2[16], a3);
  a1[17] = v11;
  v12 = vmulq_n_f64(a2[19], a3);
  a1[18] = vmulq_n_f64(a2[18], a3);
  a1[19] = v12;
  v13 = vmulq_n_f64(a2[21], a3);
  a1[20] = vmulq_n_f64(a2[20], a3);
  a1[21] = v13;
  v14 = vmulq_n_f64(a2[23], a3);
  a1[22] = vmulq_n_f64(a2[22], a3);
  a1[23] = v14;
  v15 = vmulq_n_f64(a2[25], a3);
  a1[24] = vmulq_n_f64(a2[24], a3);
  a1[25] = v15;
  v16 = vmulq_n_f64(a2[27], a3);
  a1[26] = vmulq_n_f64(a2[26], a3);
  a1[27] = v16;
  v17 = vmulq_n_f64(a2[29], a3);
  a1[28] = vmulq_n_f64(a2[28], a3);
  a1[29] = v17;
  v18 = vmulq_n_f64(a2[31], a3);
  a1[30] = vmulq_n_f64(a2[30], a3);
  a1[31] = v18;
  v19 = vmulq_n_f64(a2[33], a3);
  a1[32] = vmulq_n_f64(a2[32], a3);
  a1[33] = v19;
  v20 = vmulq_n_f64(a2[35], a3);
  a1[34] = vmulq_n_f64(a2[34], a3);
  a1[35] = v20;
  result = vmulq_n_f64(a2[36], a3);
  a1[36] = result;
  return result;
}

uint64_t sub_20F4C04B8(float64x2_t *a1, float64x2_t *a2, char a3, char a4, double a5, double a6, double a7, float64x2_t a8, float64x2_t a9, double a10, double a11, float64x2_t a12)
{
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  uint64_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t *v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  uint64_t v56;
  float64x2_t *v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t *v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  double v64;
  double v65;
  double v66;
  double v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double *v72;
  double v73;
  uint64_t v74;
  double v75;
  double v76;
  double v77;
  unsigned int v78;
  unsigned int v79;
  double v80;
  unsigned int v81;
  int v82;
  double *v83;
  double v84;
  uint64_t i;
  double v86;
  double v87;
  unsigned int v88;
  unint64_t v89;
  unsigned int v90;
  unint64_t v91;
  uint64_t v92;
  float64x2_t *v93;
  unint64_t v94;
  double v95;
  unsigned int v96;
  double v97;
  double v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  unsigned int v103;
  float64x2_t *v104;
  float64x2_t *v105;
  float64x2_t v106;
  double v107;
  uint64_t v108;
  uint64_t v109;
  float64x2_t v110;
  uint64_t v111;
  double *v112;
  unsigned int v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  float64_t v129;
  uint64_t v130;
  uint64_t v131;
  float64_t v132;
  uint64_t v133;
  uint64_t v134;
  float64_t v135;
  unsigned int v136;
  uint64_t v137;
  double v138;
  int v139;
  double v140;
  double v141;
  double v142;
  uint64_t v143;
  int v144;
  int v145;
  int v146;
  int v147;
  double v148;
  int v149;
  int v150;
  unsigned int v151;
  uint64_t v152;
  double v153;
  uint64_t v154;
  double v155;
  double v156;
  double v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  float64_t *v167;
  uint64_t v168;
  char *v169;
  unint64_t v170;
  uint64_t v171;
  char *v172;
  BOOL v174;
  BOOL v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  char *v179;
  float64x2_t v180;
  float64x2_t v181;
  char *v182;
  int8x16_t v183;
  int8x16_t v184;
  char *v185;
  __n128 *v186;
  __n128 *v187;
  uint64_t v188;
  __n128 v189;
  int v190;
  float64x2_t *v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  __n128 *v199;
  __n128 v200;
  __n128 v201;
  __n128 *v202;
  __n128 v203;
  __n128 v204;
  __n128 v205;
  uint64_t v206;
  uint64_t v207;
  __n128 v208;
  __n128 v209;
  __n128 v210;
  __n128 v211;
  uint64_t v212;
  float64x2_t *v213;
  int v214;
  float64x2_t *v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  char *v230;
  __n128 v231;
  __n128 v232;
  __n128 v233;
  __n128 v234;
  __n128 *v235;
  __n128 v236;
  unint64_t v237;
  uint64_t v238;
  __n128 v239;
  __n128 v240;
  __n128 v241;
  __n128 v242;
  __n128 v243;
  __n128 v244;
  char *v245;
  float64x2_t v246;
  float64x2_t v247;
  double v248;
  uint64_t v249;
  float64x2_t *v250;
  unsigned int v251;
  float64x2_t *v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t *v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  double v277;
  double v278;
  double v279;
  double v280;
  double v281;
  char *v282;
  double v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  double v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  char v304;
  uint64_t v305;
  float64_t *v306;
  _OWORD v307[7];
  float64_t v308;

  if ((a3 & 1) == 0)
  {
    v17 = 0;
    v18 = *a2;
    v18.f64[1] = a2[8].f64[0];
    v19 = vsqrtq_f64(v18);
    v20 = a2[16];
    v20.f64[1] = a2[24].f64[0];
    v21 = vsqrtq_f64(v20);
    v22 = a2[32];
    v22.f64[1] = a2[40].f64[0];
    v23 = vsqrtq_f64(v22);
    v24 = a2[48];
    v24.f64[1] = a2[56].f64[0];
    v25 = a2[64];
    v25.f64[1] = a2[72].f64[0];
    v26 = vsqrtq_f64(v24);
    v27 = vsqrtq_f64(v25);
    v28 = a2[80];
    v28.f64[1] = a2[88].f64[0];
    v29 = vsqrtq_f64(v28);
    v30 = a2[96];
    v30.f64[1] = a2[104].f64[0];
    v31 = vsqrtq_f64(v30);
    v30.f64[0] = sqrt(a2[112].f64[0]);
    __asm { FMOV            V16.2D, #1.0 }
    v36 = vdivq_f64(_Q16, v30);
    v45 = vdivq_f64(_Q16, v31);
    v44 = vdivq_f64(_Q16, v29);
    v43 = vdivq_f64(_Q16, v27);
    v42 = vdivq_f64(_Q16, v26);
    v41 = vdivq_f64(_Q16, v23);
    v40 = vdivq_f64(_Q16, v21);
    v39 = vdivq_f64(_Q16, v19);
    v37 = (float64x2_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL);
    v38 = (float64x2_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL);
    v307[5] = v44;
    v307[6] = v45;
    v307[3] = v42;
    v307[4] = v43;
    v307[1] = v40;
    v307[2] = v41;
    v307[0] = v39;
    v308 = v36.f64[0];
    *(_QWORD *)&v39.f64[1] = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
    *(_QWORD *)&v40.f64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
    *(_QWORD *)&v41.f64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
    *(_QWORD *)&v42.f64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
    *(_QWORD *)&v43.f64[1] = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u64[0];
    v44.f64[1] = v38.f64[0];
    v45.f64[1] = v37.f64[0];
    v46 = a2;
    do
    {
      v37.f64[0] = *(float64_t *)((char *)v307 + v17);
      v38.f64[0] = v46[7].f64[0];
      v47 = v46[4];
      v48 = vmulq_n_f64(v39, v37.f64[0]);
      v49 = vmulq_n_f64(v40, v37.f64[0]);
      v50 = vmulq_n_f64(v41, v37.f64[0]);
      v51 = vmulq_n_f64(v42, v37.f64[0]);
      v52 = vmulq_n_f64(v43, v37.f64[0]);
      v53 = vmulq_n_f64(v44, v37.f64[0]);
      v54 = vmulq_n_f64(v45, v37.f64[0]);
      v37 = vmulq_f64(v38, vmulq_f64(v36, v37));
      v38 = vmulq_f64(v46[6], v54);
      v55 = vmulq_f64(v46[5], v53);
      v16 = vmulq_f64(v46[3], v51);
      v15 = vmulq_f64(v46[2], v50);
      v14 = vmulq_f64(v46[1], v49);
      *v46 = vmulq_f64(*v46, v48);
      v46[1] = v14;
      v46[2] = v15;
      v46[3] = v16;
      v46[4] = vmulq_f64(v47, v52);
      v46[5] = v55;
      v46[6] = v38;
      v46[7].f64[0] = v37.f64[0];
      v17 += 8;
      v46 = (float64x2_t *)((char *)v46 + 120);
    }
    while (v17 != 120);
    v56 = 0;
    v57 = a1;
    do
    {
      v36.f64[0] = *(float64_t *)((char *)v307 + v56);
      v45.f64[0] = v57[7].f64[0];
      v45 = vmulq_f64(v45, v36);
      v13 = vmulq_n_f64(v57[6], v36.f64[0]);
      a12 = vmulq_n_f64(v57[5], v36.f64[0]);
      v58 = vmulq_n_f64(v57[4], v36.f64[0]);
      v59 = vmulq_n_f64(v57[3], v36.f64[0]);
      a9 = vmulq_n_f64(v57[2], v36.f64[0]);
      a8 = vmulq_n_f64(v57[1], v36.f64[0]);
      v36 = vmulq_n_f64(*v57, v36.f64[0]);
      *v57 = v36;
      v57[1] = a8;
      v57[2] = a9;
      v57[3] = v59;
      v57[4] = v58;
      v57[5] = a12;
      v57[6] = v13;
      v57[7].f64[0] = v45.f64[0];
      v56 += 8;
      v57 = (float64x2_t *)((char *)v57 + 120);
    }
    while (v56 != 120);
  }
  v306 = &a2->f64[1];
  v60 = a2 + 1;
  v61 = 1;
  v62 = 15;
  v304 = a4;
  do
  {
    while (1)
    {
      v69 = (v62 - 1);
      v70 = (16 * v69);
      v71 = (15 * v69);
      if (v62 == 1)
      {
        v63 = 0;
        v64 = 0.0;
        v65 = a2->f64[v70];
        v66 = fabs(v65);
        if (v66 >= 0.0)
          v67 = v66;
        else
          v67 = 0.0;
        if (v67 == 0.0)
          goto LABEL_11;
      }
      else
      {
        if (v62 == 2)
        {
          v63 = 0;
        }
        else
        {
          v63 = 0;
          v72 = &a2->f64[v71];
          v73 = fabs(*v72);
          v74 = 1;
          do
          {
            v75 = fabs(v72[v74]);
            if (v75 > v73)
            {
              v73 = v75;
              v63 = v74;
            }
            ++v74;
          }
          while (v69 != v74);
        }
        v64 = fabs(a2->f64[v63 + v71]);
        v65 = a2->f64[v70];
        v66 = fabs(v65);
        if (v66 >= v64)
          v76 = v66;
        else
          v76 = v64;
        if (v76 == 0.0)
        {
LABEL_11:
          v61 = 0;
          v68 = v62 - 1;
          goto LABEL_12;
        }
      }
      if (v66 >= v64 * 0.640388203)
        goto LABEL_44;
      v77 = 0.0;
      if (v63 + 1 <= v69)
      {
        v78 = (16 * v63) | 0xF;
        v79 = v63 + 1;
        do
        {
          v80 = fabs(a2->f64[v78]);
          if (v80 > v77)
            v77 = v80;
          ++v79;
          v78 += 15;
        }
        while (v79 <= v69);
      }
      if (v63)
      {
        v81 = 15 * v63;
        if (v63 == 1)
        {
          v82 = 0;
        }
        else
        {
          v82 = 0;
          v83 = &a2->f64[v81];
          v84 = fabs(*v83);
          for (i = 1; i != v63; ++i)
          {
            v86 = fabs(v83[i]);
            if (v86 > v84)
            {
              v84 = v86;
              v82 = i;
            }
          }
        }
        v87 = fabs(a2->f64[v82 + v81]);
        if (v77 < v87)
          v77 = v87;
      }
      if (v66 >= v64 * 0.640388203 * (v64 / v77))
      {
LABEL_44:
        v68 = v62 - 1;
        goto LABEL_45;
      }
      if ((a4 & 1) != 0 || fabs(a2[8 * v63].f64[0]) < v77 * 0.640388203)
      {
        v88 = v62 - 2;
        if (v63 == v62 - 2)
          goto LABEL_87;
        v113 = 15 * v88;
        v114 = 2;
        v115 = 16 * v63;
        v116 = 15 * v88;
        if (!v63)
          goto LABEL_81;
        goto LABEL_75;
      }
      v68 = v62 - 1;
      if (v63 != (_DWORD)v69)
        break;
LABEL_45:
      if (v62 == 1)
        goto LABEL_12;
      v89 = 0;
      v90 = 0;
      v91 = (unint64_t)&a2->f64[v71];
      v92 = 8 * v71;
      v93 = (float64x2_t *)((char *)v60 + v92);
      v94 = 1;
      v95 = -1.0 / v65;
      do
      {
        v97 = *(double *)(v91 + 8 * v89);
        if (v97 != 0.0)
        {
          v98 = v95 * v97;
          if (v94 < 8)
          {
LABEL_52:
            v99 = 0;
            goto LABEL_53;
          }
          v99 = 0;
          if (!__CFADD__(v90, (_DWORD)v89) && !HIDWORD(v89))
          {
            v100 = (char *)&a2->f64[v89];
            v101 = 8 * v90;
            if ((char *)a2 + v101 < &v100[v92 + 8] && v91 < (unint64_t)&v100[v101 + 8])
              goto LABEL_52;
            v102 = v94 & 0xFFFFFFFFFFFFFFFCLL;
            v99 = v94 & 0x7FFFFFFFFFFFFFFCLL;
            v103 = v90;
            v104 = (float64x2_t *)((char *)v60 + v92);
            do
            {
              v105 = (float64x2_t *)((char *)a2 + 8 * v103);
              a12 = *v105;
              v13 = v105[1];
              v106 = vaddq_f64(v13, vmulq_n_f64(*v104, v98));
              *v105 = vaddq_f64(*v105, vmulq_n_f64(v104[-1], v98));
              v105[1] = v106;
              v104 += 2;
              v103 += 4;
              v102 -= 4;
            }
            while (v102);
            if (v94 == v99)
            {
              v96 = v99 + v90 - 1;
LABEL_48:
              v90 = v96 - v89;
              goto LABEL_49;
            }
            v90 += v94 & 0xFFFFFFFC;
          }
          do
          {
LABEL_53:
            a2->f64[v90] = a2->f64[v90] + v98 * *(double *)(v91 + 8 * v99++);
            ++v90;
          }
          while (v94 != v99);
          v96 = v90 - 1;
          goto LABEL_48;
        }
LABEL_49:
        v90 += 15;
        ++v89;
        ++v94;
      }
      while (v89 != v69);
      v107 = -v95;
      if (v69 < 4)
      {
        v108 = 0;
        goto LABEL_68;
      }
      v108 = v69 & 0xFFFFFFFC;
      v109 = v108;
      do
      {
        a9 = vmulq_n_f64(v93[-1], v107);
        v110 = vmulq_n_f64(*v93, v107);
        v93[-1] = a9;
        *v93 = v110;
        v93 += 2;
        v109 -= 4;
      }
      while (v109);
      if (v108 != v69)
      {
LABEL_68:
        v111 = v69 - v108;
        v112 = &a2->f64[v108 + (unint64_t)v92 / 8];
        do
        {
          *v112 = *v112 * v107;
          ++v112;
          --v111;
        }
        while (v111);
      }
LABEL_12:
      *((_DWORD *)v307 + v69 + 2) = v68 + 1;
      if (!--v62)
        goto LABEL_123;
    }
    v114 = 1;
    v113 = 15 * v69;
    v88 = v62 - 1;
    v115 = 16 * v63;
    v116 = v71;
    if (!v63)
      goto LABEL_81;
LABEL_75:
    v117 = v115 - v63;
    if (v63 < 8 || &a2->f64[v113] < &a2->f64[v63 + v117] && &a2->f64[v117] < &a2->f64[v63 + v116])
    {
      v118 = 0;
LABEL_79:
      v119 = v63 - v118;
      v120 = v118;
      v121 = (uint64_t *)&a2->f64[v118 + v117];
      v122 = (uint64_t *)&a2->f64[v116 + v120];
      do
      {
        v123 = *v122;
        *v122++ = *v121;
        *v121++ = v123;
        --v119;
      }
      while (v119);
      goto LABEL_81;
    }
    v118 = v63 & 0xFFFFFFFC;
    v186 = (__n128 *)&v60->f64[v116];
    v187 = (__n128 *)&v60->f64[v117];
    v188 = v118;
    do
    {
      a8 = (float64x2_t)v186[-1];
      a9 = *(float64x2_t *)v186;
      v189 = *v187;
      v186[-1] = v187[-1];
      *v186 = v189;
      v187[-1] = (__n128)a8;
      *v187 = (__n128)a9;
      v186 += 2;
      v187 += 2;
      v188 -= 4;
    }
    while (v188);
    if (v118 != v63)
      goto LABEL_79;
LABEL_81:
    if (v63 + 1 < v88)
    {
      v124 = ~v63 + v88;
      v125 = (16 * v63) | 0xF;
      v126 = v63 + v116 + 1;
      do
      {
        v127 = v126;
        v128 = v125;
        v129 = a2->f64[v127];
        a2->f64[v127] = a2->f64[v128];
        a2->f64[v128] = v129;
        v125 += 15;
        ++v126;
        --v124;
      }
      while (v124);
    }
    v130 = 8 * v88;
    v131 = v115;
    v132 = a2[v130].f64[0];
    a2[v130].f64[0] = a2->f64[v131];
    a2->f64[v131] = v132;
    if (v114 != 2)
    {
      v65 = a2->f64[v70];
      v68 = v63;
      goto LABEL_45;
    }
    v133 = (v62 + v71 - 2);
    v134 = v63 + v71;
    v135 = a2->f64[v133];
    a2->f64[v133] = a2->f64[v134];
    a2->f64[v134] = v135;
LABEL_87:
    v136 = v62 - 2;
    if (v69 < 2)
      goto LABEL_117;
    v305 = v61;
    v137 = 0;
    v138 = a2->f64[v71 + v136];
    v139 = 15 * v136;
    v140 = a2[8 * v136].f64[0] / v138;
    v141 = a2->f64[v70];
    v142 = 1.0 / (v141 * v140 - v138);
    v143 = (v62 - 3);
    v145 = 16 * v62 - 33;
    v146 = 16 * v62 - 18;
    v147 = 15 * v62;
    v148 = v141 / v138;
    v149 = 16 * v62 - 48;
    v150 = v145;
    do
    {
      v151 = v136 - 1;
      v152 = v139 + v136 - 1;
      v153 = a2->f64[v152];
      v154 = v71 + v136 - 1;
      v155 = a2->f64[v154];
      v156 = v142 * (v148 * v153 - v155);
      v157 = v142 * (v140 * v155 - v153);
      if (v136 < 0x18)
        goto LABEL_90;
      v144 = 16 * v62 - 48;
      v161 = v144 - 16 * v137;
      v162 = v143 - v137;
      if ((int)v143 - (int)v137 > v161)
        goto LABEL_90;
      if (v162 > v145 - (int)v137)
        goto LABEL_90;
      if (v162 > v146 - (int)v137)
        goto LABEL_90;
      v163 = 8 * (v143 - v137);
      if (&a2->f64[v161 + v163 / 0xFFFFFFFFFFFFFFF8] > &a2->f64[v161]
        || &a2->f64[(v145 - v137) + v163 / 0xFFFFFFFFFFFFFFF8] > &a2->f64[(v145 - v137)]
        || &a2->f64[(v146 - v137) + v163 / 0xFFFFFFFFFFFFFFF8] > &a2->f64[(v146 - v137)])
      {
        goto LABEL_90;
      }
      v164 = (char *)&a2->f64[v137 - v143];
      v165 = (v144 - 16 * v137);
      v166 = (unint64_t)&v164[v165 * 8];
      v167 = &v306[v165];
      v168 = (v145 - v137);
      v169 = &v164[v168 * 8];
      v170 = (unint64_t)&v306[v168];
      v171 = (v146 - v137);
      v172 = &v164[v171 * 8];
      _CF = v166 >= (unint64_t)&v306[v171] || v172 >= (char *)v167;
      v174 = !_CF;
      v175 = v169 >= (char *)v167 || v166 >= v170;
      if (!v175 || v174)
      {
LABEL_90:
        v158 = v136;
LABEL_91:
        v159 = v158 - 46;
        v160 = 15 * v62 - 16 + v158;
        do
        {
          a2->f64[v147 + v159] = a2->f64[v147 + v159] - (v156 * *((double *)&a2[-7] + v160 - 1) + v157 * a2->f64[v160]);
          --v159;
          --v160;
        }
        while (v159 != -46);
        goto LABEL_93;
      }
      v176 = v136 & 0xFFFFFFFC;
      v158 = v136 - (v136 & 0xFFFFFFFC);
      v177 = v149;
      v178 = v150;
      do
      {
        v179 = (char *)&a2->f64[v178];
        v180 = vmulq_n_f64((float64x2_t)vextq_s8(*(int8x16_t *)(v179 - 8), *(int8x16_t *)(v179 - 8), 8uLL), v156);
        v181 = vmulq_n_f64((float64x2_t)vextq_s8(*(int8x16_t *)(v179 - 24), *(int8x16_t *)(v179 - 24), 8uLL), v156);
        v182 = (char *)&a2[7].f64[v178 + 1];
        v183 = (int8x16_t)vaddq_f64(v180, vmulq_n_f64((float64x2_t)vextq_s8(*(int8x16_t *)(v182 - 8), *(int8x16_t *)(v182 - 8), 8uLL), v157));
        v184 = (int8x16_t)vaddq_f64(v181, vmulq_n_f64((float64x2_t)vextq_s8(*(int8x16_t *)(v182 - 24), *(int8x16_t *)(v182 - 24), 8uLL), v157));
        v185 = (char *)&a2->f64[v177];
        v14 = *(float64x2_t *)(v185 - 24);
        *(float64x2_t *)(v185 - 8) = vsubq_f64(*(float64x2_t *)(v185 - 8), (float64x2_t)vextq_s8(v183, v183, 8uLL));
        v13 = vsubq_f64(v14, (float64x2_t)vextq_s8(v184, v184, 8uLL));
        *(float64x2_t *)(v185 - 24) = v13;
        v178 -= 4;
        v177 -= 4;
        v176 -= 4;
      }
      while (v176);
      if ((v136 & 0xFFFFFFFC) != v136)
        goto LABEL_91;
LABEL_93:
      a2->f64[v152] = v156;
      a2->f64[v154] = v157;
      ++v137;
      --v150;
      v149 -= 16;
      v147 -= 15;
      --v136;
    }
    while (v151);
    a4 = v304;
    v60 = a2 + 1;
    v136 = v62 - 2;
    v61 = v305;
LABEL_117:
    *((_DWORD *)v307 + v69 + 2) = ~v63;
    *((_DWORD *)v307 + v136 + 2) = ~v63;
    v62 -= 2;
  }
  while (v62);
LABEL_123:
  if ((v61 & 1) != 0)
  {
    v190 = 15;
    do
    {
      while (1)
      {
        v196 = (v190 - 1);
        v197 = *((_DWORD *)v307 + v196 + 2);
        if (v197 < 1)
          break;
        v198 = (15 * v196);
        if (v197 != v190)
        {
          v199 = (__n128 *)&a1->f64[v198];
          a8 = *(float64x2_t *)v199;
          a9 = (float64x2_t)v199[1];
          v200 = v199[2];
          v201 = v199[3];
          v202 = (__n128 *)&a1->f64[15 * v197 - 15];
          v203 = v199[4];
          v204 = v199[5];
          v205 = v199[6];
          v206 = v199[7].n128_i64[0];
          v207 = v202[7].n128_i64[0];
          v16 = (float64x2_t)v202[5];
          v15 = (float64x2_t)v202[6];
          v209 = v202[3];
          v208 = v202[4];
          v211 = v202[1];
          v210 = v202[2];
          *v199 = *v202;
          v199[1] = v211;
          v199[2] = v210;
          v199[3] = v209;
          v199[4] = v208;
          v199[5] = (__n128)v16;
          v199[6] = (__n128)v15;
          v199[7].n128_u64[0] = v207;
          v202[7].n128_u64[0] = v206;
          v202[5] = v204;
          v202[6] = v205;
          v202[3] = v201;
          v202[4] = v203;
          v202[1] = (__n128)a9;
          v202[2] = v200;
          *v202 = (__n128)a8;
        }
        a8.f64[0] = a2->f64[(16 * v196)];
        if (a8.f64[0] < 0.0)
          goto LABEL_143;
        if ((_DWORD)v196)
        {
          v212 = 0;
          v213 = (float64x2_t *)((char *)a1 + 8 * v198);
          v214 = 15 * v196;
          do
          {
            a9.f64[0] = a2->f64[v214];
            v215 = (float64x2_t *)((char *)a1 + 8 * v212);
            v14 = v215[6];
            v15.f64[0] = v215[7].f64[0];
            v16.f64[0] = v213[7].f64[0];
            v16 = vmulq_f64(v16, a9);
            v216 = vmulq_n_f64(*v213, a9.f64[0]);
            v217 = vmulq_n_f64(v213[1], a9.f64[0]);
            v218 = vmulq_n_f64(v213[2], a9.f64[0]);
            v219 = vmulq_n_f64(v213[3], a9.f64[0]);
            v220 = vmulq_n_f64(v213[4], a9.f64[0]);
            v221 = vmulq_n_f64(v213[5], a9.f64[0]);
            v15 = vsubq_f64(v15, v16);
            a9 = vsubq_f64(v14, vmulq_n_f64(v213[6], a9.f64[0]));
            v222 = vsubq_f64(v215[5], v221);
            v223 = vsubq_f64(v215[4], v220);
            v224 = vsubq_f64(v215[3], v219);
            v225 = vsubq_f64(v215[2], v218);
            v226 = vsubq_f64(v215[1], v217);
            *v215 = vsubq_f64(*v215, v216);
            v215[1] = v226;
            v215[2] = v225;
            v215[3] = v224;
            v215[4] = v223;
            v215[5] = v222;
            v215[6] = a9;
            v215[7].f64[0] = v15.f64[0];
            v212 += 15;
            ++v214;
          }
          while (15 * v196 != v212);
        }
        a8.f64[0] = 1.0 / sqrt(a8.f64[0]);
        v191 = (float64x2_t *)((char *)a1 + 8 * v198);
        v192 = v191[6];
        v14.f64[0] = v191[7].f64[0];
        v14 = vmulq_f64(a8, v14);
        v193 = vmulq_n_f64(v191[5], a8.f64[0]);
        v13 = vmulq_n_f64(v191[4], a8.f64[0]);
        a12 = vmulq_n_f64(v191[3], a8.f64[0]);
        v194 = vmulq_n_f64(v191[2], a8.f64[0]);
        v195 = vmulq_n_f64(v191[1], a8.f64[0]);
        a9 = vmulq_n_f64(*v191, a8.f64[0]);
        *v191 = a9;
        v191[1] = v195;
        v191[2] = v194;
        v191[3] = a12;
        v191[4] = v13;
        v191[5] = v193;
        a8 = vmulq_n_f64(v192, a8.f64[0]);
        v191[6] = a8;
        v191[7].f64[0] = v14.f64[0];
        v190 = v196;
        if (!(_DWORD)v196)
          return 1;
      }
      v227 = (v190 - 2);
      v228 = ~*((_DWORD *)v307 + v227 + 2);
      v229 = (15 * v227);
      if ((_DWORD)v227 != v228)
      {
        v230 = (char *)&a1->f64[v229];
        v231 = *(__n128 *)v230;
        v232 = *((__n128 *)v230 + 1);
        v233 = *((__n128 *)v230 + 2);
        v234 = *((__n128 *)v230 + 3);
        v235 = (__n128 *)&a1->f64[15 * v228];
        a12 = *((float64x2_t *)v230 + 4);
        v13 = *((float64x2_t *)v230 + 5);
        v236 = *((__n128 *)v230 + 6);
        v237 = *((_QWORD *)v230 + 14);
        v238 = v235[7].n128_i64[0];
        v240 = v235[5];
        v239 = v235[6];
        v242 = v235[3];
        v241 = v235[4];
        v244 = v235[1];
        v243 = v235[2];
        *(__n128 *)v230 = *v235;
        *((__n128 *)v230 + 1) = v244;
        *((__n128 *)v230 + 2) = v243;
        *((__n128 *)v230 + 3) = v242;
        *((__n128 *)v230 + 4) = v241;
        *((__n128 *)v230 + 5) = v240;
        *((__n128 *)v230 + 6) = v239;
        *((_QWORD *)v230 + 14) = v238;
        v235[7].n128_u64[0] = v237;
        v235[5] = (__n128)v13;
        v235[6] = v236;
        v235[3] = v234;
        v235[4] = (__n128)a12;
        v235[1] = v232;
        v235[2] = v233;
        *v235 = v231;
      }
      v245 = (char *)&a2->f64[(16 * v227)];
      a8 = *(float64x2_t *)v245;
      if (*(double *)v245 < 0.0)
        goto LABEL_143;
      a9 = *(float64x2_t *)(v245 + 120);
      v246 = vmulq_f64(a9, (float64x2_t)vzip1q_s64((int64x2_t)a9, (int64x2_t)a8));
      v247 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v246, 1);
      v248 = vsubq_f64(v247, v246).f64[0];
      if (v248 < 0.0)
        goto LABEL_143;
      if ((_DWORD)v227)
      {
        v249 = 0;
        v250 = (float64x2_t *)((char *)a1 + 8 * v229);
        v251 = 15 * v196;
        v252 = (float64x2_t *)((char *)a1 + 8 * v251);
        do
        {
          v247.f64[0] = *((float64_t *)&a2[-7] + v251 - 1);
          a12.f64[0] = a2->f64[v251];
          v13.f64[0] = v250[7].f64[0];
          v253 = *v250;
          v254 = vmulq_n_f64(v250[6], v247.f64[0]);
          v255 = vmulq_n_f64(v250[5], v247.f64[0]);
          v256 = vmulq_n_f64(v250[4], v247.f64[0]);
          v257 = vmulq_n_f64(v250[3], v247.f64[0]);
          v258 = vmulq_n_f64(v250[2], v247.f64[0]);
          v259 = vmulq_n_f64(v250[1], v247.f64[0]);
          v253.f64[0] = v252[7].f64[0];
          v260 = vmulq_n_f64(v252[6], a12.f64[0]);
          v261 = vmulq_n_f64(v252[5], a12.f64[0]);
          v262 = vmulq_n_f64(v252[4], a12.f64[0]);
          v263 = vmulq_n_f64(v252[3], a12.f64[0]);
          v264 = vmulq_n_f64(v252[2], a12.f64[0]);
          v265 = (float64x2_t *)((char *)a1 + 8 * v249);
          v12.f64[0] = v265[7].f64[0];
          v266 = vaddq_f64(vmulq_f64(v13, v247), vmulq_f64(v253, a12));
          v267 = vaddq_f64(vmulq_n_f64(*v250, v247.f64[0]), vmulq_n_f64(*v252, a12.f64[0]));
          v268 = vaddq_f64(v259, vmulq_n_f64(v252[1], a12.f64[0]));
          v269 = vaddq_f64(v258, v264);
          v270 = vaddq_f64(v257, v263);
          v271 = vaddq_f64(v256, v262);
          v13 = vsubq_f64(v12, v266);
          v272 = vsubq_f64(v265[6], vaddq_f64(v254, v260));
          v273 = vsubq_f64(v265[5], vaddq_f64(v255, v261));
          v274 = vsubq_f64(v265[4], v271);
          v275 = vsubq_f64(v265[3], v270);
          v276 = vsubq_f64(v265[2], v269);
          a12 = vsubq_f64(v265[1], v268);
          v247 = vsubq_f64(*v265, v267);
          *v265 = v247;
          v265[1] = a12;
          v265[2] = v276;
          v265[3] = v275;
          v265[4] = v274;
          v265[5] = v273;
          v265[6] = v272;
          v265[7].f64[0] = v13.f64[0];
          v249 += 15;
          ++v251;
        }
        while (15 * v227 != v249);
      }
      v277 = sqrt(a8.f64[0]);
      v278 = sqrt(v248);
      v279 = 1.0 / v277;
      v280 = -a9.f64[0] / (v277 * v278);
      v281 = v277 / v278;
      v282 = (char *)&a1->f64[v229];
      v283 = *((double *)v282 + 14);
      v285 = *((float64x2_t *)v282 + 5);
      v284 = *((float64x2_t *)v282 + 6);
      v287 = *((float64x2_t *)v282 + 3);
      v286 = *((float64x2_t *)v282 + 4);
      v289 = *((float64x2_t *)v282 + 1);
      v288 = *((float64x2_t *)v282 + 2);
      v290 = *((double *)v282 + 29);
      v291 = *(float64x2_t *)(v282 + 216);
      v292 = *(float64x2_t *)(v282 + 200);
      v293 = *(float64x2_t *)(v282 + 184);
      v294 = *(float64x2_t *)(v282 + 168);
      v295 = *(float64x2_t *)(v282 + 152);
      v296 = *(float64x2_t *)(v282 + 136);
      v297 = *(float64x2_t *)(v282 + 120);
      v298 = vmlaq_f64(vmulq_n_f64(v289, v279), (float64x2_t)0, v296);
      v299 = vmlaq_f64(vmulq_n_f64(v288, v279), (float64x2_t)0, v295);
      v300 = vmlaq_f64(vmulq_n_f64(v287, v279), (float64x2_t)0, v294);
      v301 = vmlaq_f64(vmulq_n_f64(v284, v279), (float64x2_t)0, v291);
      v302 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v282, v280), v297, v281);
      v16 = vmlaq_n_f64(vmulq_n_f64(v289, v280), v296, v281);
      v15 = vmlaq_n_f64(vmulq_n_f64(v288, v280), v295, v281);
      v14 = vmlaq_n_f64(vmulq_n_f64(v287, v280), v294, v281);
      v13 = vmlaq_n_f64(vmulq_n_f64(v284, v280), v291, v281);
      *(float64x2_t *)v282 = vmlaq_f64(vmulq_n_f64(*(float64x2_t *)v282, v279), (float64x2_t)0, v297);
      *((float64x2_t *)v282 + 1) = v298;
      *((float64x2_t *)v282 + 2) = v299;
      *((float64x2_t *)v282 + 3) = v300;
      *((float64x2_t *)v282 + 4) = vmlaq_f64(vmulq_n_f64(v286, v279), (float64x2_t)0, v293);
      *((float64x2_t *)v282 + 5) = vmlaq_f64(vmulq_n_f64(v285, v279), (float64x2_t)0, v292);
      *((float64x2_t *)v282 + 6) = v301;
      *((double *)v282 + 14) = v283 * v279 + v290 * 0.0;
      *(float64x2_t *)(v282 + 120) = v302;
      *(float64x2_t *)(v282 + 136) = v16;
      *(float64x2_t *)(v282 + 152) = v15;
      *(float64x2_t *)(v282 + 168) = v14;
      *(float64x2_t *)(v282 + 184) = vmlaq_n_f64(vmulq_n_f64(v286, v280), v293, v281);
      *(float64x2_t *)(v282 + 200) = vmlaq_n_f64(vmulq_n_f64(v285, v280), v292, v281);
      *(float64x2_t *)(v282 + 216) = v13;
      *((double *)v282 + 29) = v283 * v280 + v290 * v281;
      v190 = v227;
    }
    while ((_DWORD)v227);
    return 1;
  }
  else
  {
LABEL_143:
    memset_pattern16(a1, &unk_210315390, 0x708uLL);
    return 0;
  }
}

void sub_20F4C1318()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F4C132C()
{
  return 0;
}

float64x2_t sub_20F4C1334(char *a1, _BYTE *a2, unint64_t a3)
{
  _BYTE *v5;
  unint64_t v6;
  const void *v7;
  _BYTE *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v44;
  float64x2_t v52;
  float64x2_t result;
  _BYTE v59[1816];
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v5 = a1 + 16;
  v6 = a3 + 120;
  if (a3 + 120 > (unint64_t)(a1 + 16) && (unint64_t)(a1 + 1816) > a3)
  {
    MEMORY[0x24BDAC7A8](a1);
    a1 = (char *)memcpy(v59, v7, 0x708uLL);
    v5 = v59;
  }
  v8 = v5 + 272;
  if (v6 > (unint64_t)a2 && (unint64_t)(a2 + 120) > a3)
  {
    MEMORY[0x24BDAC7A8](a1);
    v9 = *((_OWORD *)a2 + 5);
    *(_OWORD *)&v59[-64] = *((_OWORD *)a2 + 4);
    *(_OWORD *)&v59[-48] = v9;
    *(_OWORD *)&v59[-32] = *((_OWORD *)a2 + 6);
    *(_QWORD *)&v59[-16] = *((_QWORD *)a2 + 14);
    v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)&v59[-128] = *(_OWORD *)a2;
    *(_OWORD *)&v59[-112] = v10;
    v11 = *((_OWORD *)a2 + 2);
    v12 = *((_OWORD *)a2 + 3);
    a2 = &v59[-128];
    *(_OWORD *)&v59[-96] = v11;
    *(_OWORD *)&v59[-80] = v12;
  }
  v13 = *((float64x2_t *)a2 + 1);
  v15 = *((float64x2_t *)a2 + 2);
  v14 = *((float64x2_t *)a2 + 3);
  v16 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v5, *(double *)a2), *(float64x2_t *)(v5 + 120), *(float64x2_t *)a2, 1), *((float64x2_t *)v5 + 15), v13.f64[0]), *(float64x2_t *)(v8 + 88), v13, 1), *((float64x2_t *)v5 + 30), v15.f64[0]), *(float64x2_t *)(v8 + 328), v15,
              1),
            *((float64x2_t *)v8 + 28),
            v14.f64[0]),
          *(float64x2_t *)(v8 + 568),
          v14,
          1);
  v17 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*((float64x2_t *)v5 + 1), *(double *)a2), *(float64x2_t *)(v5 + 136), *(float64x2_t *)a2, 1), *((float64x2_t *)v5 + 16), v13.f64[0]), *(float64x2_t *)(v8 + 104), v13, 1), *((float64x2_t *)v5 + 31), v15.f64[0]), *(float64x2_t *)(v8 + 344), v15,
              1),
            *((float64x2_t *)v8 + 29),
            v14.f64[0]),
          *(float64x2_t *)(v8 + 584),
          v14,
          1);
  v19 = *((float64x2_t *)a2 + 4);
  v18 = *((float64x2_t *)a2 + 5);
  v13.f64[0] = *((float64_t *)a2 + 14);
  v20 = *((float64x2_t *)a2 + 6);
  v21 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v17, *((float64x2_t *)v5 + 61), v19.f64[0]), *(float64x2_t *)(v8 + 824), v19, 1), *((float64x2_t *)v8 + 59), v18.f64[0]), *(float64x2_t *)(v8 + 1064), v18, 1), *((float64x2_t *)v5 + 91), v20.f64[0]), *(float64x2_t *)(v8 + 1304), v20, 1),
          *((float64x2_t *)v8 + 89),
          v13.f64[0]);
  *(float64x2_t *)a3 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v16, *((float64x2_t *)v5 + 60), v19.f64[0]), *(float64x2_t *)(v8 + 808), v19, 1), *((float64x2_t *)v8 + 58), v18.f64[0]), *(float64x2_t *)(v8 + 1048), v18, 1), *((float64x2_t *)v5 + 90), v20.f64[0]), *(float64x2_t *)(v8 + 1288), v20, 1),
                         *((float64x2_t *)v8 + 88),
                         v13.f64[0]);
  *(float64x2_t *)(a3 + 16) = v21;
  v22 = *((float64x2_t *)a2 + 1);
  v24 = *((float64x2_t *)a2 + 2);
  v23 = *((float64x2_t *)a2 + 3);
  v25 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*((float64x2_t *)v5 + 2), *(double *)a2), *(float64x2_t *)(v5 + 152), *(float64x2_t *)a2, 1), *(float64x2_t *)v8, v22.f64[0]), *(float64x2_t *)(v8 + 120), v22, 1), *((float64x2_t *)v5 + 32), v24.f64[0]), *(float64x2_t *)(v8 + 360), v24,
              1),
            *((float64x2_t *)v8 + 30),
            v23.f64[0]),
          *(float64x2_t *)(v8 + 600),
          v23,
          1);
  v26 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*((float64x2_t *)v5 + 3), *(double *)a2), *(float64x2_t *)(v5 + 168), *(float64x2_t *)a2, 1), *((float64x2_t *)v8 + 1), v22.f64[0]), *(float64x2_t *)(v8 + 136), v22, 1), *((float64x2_t *)v5 + 33), v24.f64[0]), *(float64x2_t *)(v8 + 376), v24,
              1),
            *((float64x2_t *)v8 + 31),
            v23.f64[0]),
          *(float64x2_t *)(v8 + 616),
          v23,
          1);
  v28 = *((float64x2_t *)a2 + 4);
  v27 = *((float64x2_t *)a2 + 5);
  v22.f64[0] = *((float64_t *)a2 + 14);
  v29 = *((float64x2_t *)a2 + 6);
  v30 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v26, *((float64x2_t *)v5 + 63), v28.f64[0]), *(float64x2_t *)(v8 + 856), v28, 1), *((float64x2_t *)v8 + 61), v27.f64[0]), *(float64x2_t *)(v8 + 1096), v27, 1), *((float64x2_t *)v5 + 93), v29.f64[0]), *(float64x2_t *)(v8 + 1336), v29, 1),
          *((float64x2_t *)v8 + 91),
          v22.f64[0]);
  *(float64x2_t *)(a3 + 32) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v25, *((float64x2_t *)v5 + 62), v28.f64[0]), *(float64x2_t *)(v8 + 840), v28, 1), *((float64x2_t *)v8 + 60), v27.f64[0]), *(float64x2_t *)(v8 + 1080), v27, 1), *((float64x2_t *)v5 + 92), v29.f64[0]), *(float64x2_t *)(v8 + 1320), v29, 1),
                                *((float64x2_t *)v8 + 90),
                                v22.f64[0]);
  *(float64x2_t *)(a3 + 48) = v30;
  v31 = *((float64x2_t *)a2 + 1);
  v33 = *((float64x2_t *)a2 + 2);
  v32 = *((float64x2_t *)a2 + 3);
  v34 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*((float64x2_t *)v5 + 4), *(double *)a2), *(float64x2_t *)(v5 + 184), *(float64x2_t *)a2, 1), *((float64x2_t *)v8 + 2), v31.f64[0]), *(float64x2_t *)(v8 + 152), v31, 1), *((float64x2_t *)v5 + 34), v33.f64[0]), *(float64x2_t *)(v8 + 392), v33,
              1),
            *((float64x2_t *)v8 + 32),
            v32.f64[0]),
          *(float64x2_t *)(v8 + 632),
          v32,
          1);
  v35 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*((float64x2_t *)v5 + 5), *(double *)a2), *(float64x2_t *)(v5 + 200), *(float64x2_t *)a2, 1), *((float64x2_t *)v8 + 3), v31.f64[0]), *(float64x2_t *)(v8 + 168), v31, 1), *((float64x2_t *)v5 + 35), v33.f64[0]), *(float64x2_t *)(v8 + 408), v33,
              1),
            *((float64x2_t *)v8 + 33),
            v32.f64[0]),
          *(float64x2_t *)(v8 + 648),
          v32,
          1);
  v37 = *((float64x2_t *)a2 + 4);
  v36 = *((float64x2_t *)a2 + 5);
  v31.f64[0] = *((float64_t *)a2 + 14);
  v38 = *((float64x2_t *)a2 + 6);
  _Q1 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v35, *((float64x2_t *)v5 + 65), v37.f64[0]), *(float64x2_t *)(v8 + 888), v37, 1), *((float64x2_t *)v8 + 63), v36.f64[0]), *(float64x2_t *)(v8 + 1128), v36, 1), *((float64x2_t *)v5 + 95), v38.f64[0]), *(float64x2_t *)(v8 + 1368), v38, 1),
          *((float64x2_t *)v8 + 93),
          v31.f64[0]);
  *(float64x2_t *)(a3 + 64) = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v34, *((float64x2_t *)v5 + 64), v37.f64[0]), *(float64x2_t *)(v8 + 872), v37, 1), *((float64x2_t *)v8 + 62), v36.f64[0]), *(float64x2_t *)(v8 + 1112), v36, 1), *((float64x2_t *)v5 + 94), v38.f64[0]), *(float64x2_t *)(v8 + 1352), v38, 1),
                                *((float64x2_t *)v8 + 92),
                                v31.f64[0]);
  *(float64x2_t *)(a3 + 80) = _Q1;
  _D2 = *((_QWORD *)v5 + 29);
  _D6 = *((_QWORD *)v8 + 25);
  _Q17 = *(float64x2_t *)a2;
  _Q16 = *((float64x2_t *)a2 + 1);
  v44 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*((float64x2_t *)v5 + 6), *(double *)a2), *(float64x2_t *)(v5 + 216), *(float64x2_t *)a2, 1), *((float64x2_t *)v8 + 4), _Q16.f64[0]), *(float64x2_t *)(v8 + 184), _Q16, 1);
  __asm
  {
    FMLA            D1, D2, V17.D[1]
    FMLA            D1, D6, V16.D[1]
  }
  _D4 = *((_QWORD *)v8 + 55);
  _Q16.f64[0] = *((float64_t *)v8 + 85);
  _Q19 = *((float64x2_t *)a2 + 2);
  _Q18 = *((float64x2_t *)a2 + 3);
  v52 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v44, *((float64x2_t *)v8 + 19), _Q19.f64[0]), *(float64x2_t *)(v8 + 424), _Q19, 1), *((float64x2_t *)v8 + 34), _Q18.f64[0]), *(float64x2_t *)(v8 + 664), _Q18, 1);
  __asm
  {
    FMLA            D1, D4, V19.D[1]
    FMLA            D1, D16, V18.D[1]
  }
  _D4 = *((_QWORD *)v8 + 115);
  _Q16.f64[0] = *((float64_t *)v8 + 145);
  _Q19 = *((float64x2_t *)a2 + 4);
  _Q18 = *((float64x2_t *)a2 + 5);
  __asm
  {
    FMLA            D1, D4, V19.D[1]
    FMLA            D1, D16, V18.D[1]
  }
  _D4 = *((_QWORD *)v8 + 175);
  _Q16.f64[0] = *((float64_t *)a2 + 14);
  _Q17 = *((float64x2_t *)a2 + 6);
  result = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v52, *((float64x2_t *)v8 + 49), _Q19.f64[0]), *(float64x2_t *)(v8 + 904), _Q19, 1), *((float64x2_t *)v8 + 64), _Q18.f64[0]), *(float64x2_t *)(v8 + 1144), _Q18, 1), *((float64x2_t *)v8 + 79), _Q17.f64[0]), *(float64x2_t *)(v8 + 1384), _Q17, 1),
             *((float64x2_t *)v8 + 94),
             _Q16.f64[0]);
  __asm { FMLA            D1, D4, V17.D[1] }
  _Q1.f64[0] = _Q1.f64[0] + *((double *)v8 + 190) * _Q16.f64[0];
  *(float64x2_t *)(a3 + 96) = result;
  *(float64_t *)(a3 + 112) = _Q1.f64[0];
  return result;
}

void sub_20F4C1828(uint64_t a1, double *__X)
{
  _BYTE v2[1800];
  uint64_t v3;

  if (*(_BYTE *)(a1 + 1816))
  {
    sub_20E8BE864(1, 0, 1, 15, (const double *)(a1 + 16), 15, __X, 1);
  }
  else
  {
    v3 = 0x200000000;
    memcpy(v2, (const void *)(a1 + 16), sizeof(v2));
    HIDWORD(v3) = sub_20E8BEB48() != 0;
    sub_20E8BEAE8();
  }
}

void sub_20F4C1900(uint64_t a1, double *a2, double *__X)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[1800];
  uint64_t v18;

  if (*(_BYTE *)(a1 + 1816))
  {
    v5 = *(_OWORD *)a2;
    v6 = *((_OWORD *)a2 + 1);
    v7 = *((_OWORD *)a2 + 3);
    *((_OWORD *)__X + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)__X + 3) = v7;
    *(_OWORD *)__X = v5;
    *((_OWORD *)__X + 1) = v6;
    v8 = *((_OWORD *)a2 + 4);
    v9 = *((_OWORD *)a2 + 5);
    v10 = *((_OWORD *)a2 + 6);
    __X[14] = a2[14];
    *((_OWORD *)__X + 5) = v9;
    *((_OWORD *)__X + 6) = v10;
    *((_OWORD *)__X + 4) = v8;
    sub_20E8BE864(1, 0, 1, 15, (const double *)(a1 + 16), 15, __X, 1);
  }
  else
  {
    v18 = 0x200000000;
    memcpy(v17, (const void *)(a1 + 16), sizeof(v17));
    HIDWORD(v18) = sub_20E8BEB48() != 0;
    v11 = *((_OWORD *)a2 + 3);
    v13 = *(_OWORD *)a2;
    v12 = *((_OWORD *)a2 + 1);
    *((_OWORD *)__X + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)__X + 3) = v11;
    *(_OWORD *)__X = v13;
    *((_OWORD *)__X + 1) = v12;
    v15 = *((_OWORD *)a2 + 5);
    v14 = *((_OWORD *)a2 + 6);
    v16 = *((_OWORD *)a2 + 4);
    __X[14] = a2[14];
    *((_OWORD *)__X + 5) = v15;
    *((_OWORD *)__X + 6) = v14;
    *((_OWORD *)__X + 4) = v16;
    sub_20E8BEAE8();
  }
}

__n128 sub_20F4C1A2C@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X8>, float64x2_t a3@<Q0>, float64x2_t a4@<Q1>)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  __n128 result;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;

  a4.f64[0] = a1[113].f64[0];
  v116 = vmulq_f64(a3, a4);
  v115 = vmulq_n_f64(a1[1], a3.f64[0]);
  v114 = vmulq_n_f64(a1[2], a3.f64[0]);
  v113 = vmulq_n_f64(a1[3], a3.f64[0]);
  v112 = vmulq_n_f64(a1[4], a3.f64[0]);
  v111 = vmulq_n_f64(a1[5], a3.f64[0]);
  v110 = vmulq_n_f64(a1[6], a3.f64[0]);
  v109 = vmulq_n_f64(a1[7], a3.f64[0]);
  v108 = vmulq_n_f64(a1[8], a3.f64[0]);
  v107 = vmulq_n_f64(a1[9], a3.f64[0]);
  v106 = vmulq_n_f64(a1[10], a3.f64[0]);
  v105 = vmulq_n_f64(a1[11], a3.f64[0]);
  v104 = vmulq_n_f64(a1[12], a3.f64[0]);
  v103 = vmulq_n_f64(a1[13], a3.f64[0]);
  v102 = vmulq_n_f64(a1[14], a3.f64[0]);
  v101 = vmulq_n_f64(a1[15], a3.f64[0]);
  v100 = vmulq_n_f64(a1[16], a3.f64[0]);
  v99 = vmulq_n_f64(a1[17], a3.f64[0]);
  v98 = vmulq_n_f64(a1[18], a3.f64[0]);
  v97 = vmulq_n_f64(a1[19], a3.f64[0]);
  v96 = vmulq_n_f64(a1[20], a3.f64[0]);
  v95 = vmulq_n_f64(a1[21], a3.f64[0]);
  v94 = vmulq_n_f64(a1[22], a3.f64[0]);
  v93 = vmulq_n_f64(a1[23], a3.f64[0]);
  v92 = vmulq_n_f64(a1[24], a3.f64[0]);
  v91 = vmulq_n_f64(a1[25], a3.f64[0]);
  v89 = vmulq_n_f64(a1[27], a3.f64[0]);
  v90 = vmulq_n_f64(a1[26], a3.f64[0]);
  v87 = vmulq_n_f64(a1[29], a3.f64[0]);
  v88 = vmulq_n_f64(a1[28], a3.f64[0]);
  v85 = vmulq_n_f64(a1[31], a3.f64[0]);
  v86 = vmulq_n_f64(a1[30], a3.f64[0]);
  v83 = vmulq_n_f64(a1[33], a3.f64[0]);
  v84 = vmulq_n_f64(a1[32], a3.f64[0]);
  v81 = vmulq_n_f64(a1[35], a3.f64[0]);
  v82 = vmulq_n_f64(a1[34], a3.f64[0]);
  v79 = vmulq_n_f64(a1[37], a3.f64[0]);
  v80 = vmulq_n_f64(a1[36], a3.f64[0]);
  v77 = vmulq_n_f64(a1[39], a3.f64[0]);
  v78 = vmulq_n_f64(a1[38], a3.f64[0]);
  v75 = vmulq_n_f64(a1[41], a3.f64[0]);
  v76 = vmulq_n_f64(a1[40], a3.f64[0]);
  v73 = vmulq_n_f64(a1[43], a3.f64[0]);
  v74 = vmulq_n_f64(a1[42], a3.f64[0]);
  v71 = vmulq_n_f64(a1[45], a3.f64[0]);
  v72 = vmulq_n_f64(a1[44], a3.f64[0]);
  v69 = vmulq_n_f64(a1[47], a3.f64[0]);
  v70 = vmulq_n_f64(a1[46], a3.f64[0]);
  v67 = vmulq_n_f64(a1[49], a3.f64[0]);
  v68 = vmulq_n_f64(a1[48], a3.f64[0]);
  v65 = vmulq_n_f64(a1[51], a3.f64[0]);
  v66 = vmulq_n_f64(a1[50], a3.f64[0]);
  v63 = vmulq_n_f64(a1[53], a3.f64[0]);
  v64 = vmulq_n_f64(a1[52], a3.f64[0]);
  v61 = vmulq_n_f64(a1[55], a3.f64[0]);
  v62 = vmulq_n_f64(a1[54], a3.f64[0]);
  v59 = vmulq_n_f64(a1[57], a3.f64[0]);
  v60 = vmulq_n_f64(a1[56], a3.f64[0]);
  v57 = vmulq_n_f64(a1[59], a3.f64[0]);
  v58 = vmulq_n_f64(a1[58], a3.f64[0]);
  v55 = vmulq_n_f64(a1[61], a3.f64[0]);
  v56 = vmulq_n_f64(a1[60], a3.f64[0]);
  v53 = vmulq_n_f64(a1[63], a3.f64[0]);
  v54 = vmulq_n_f64(a1[62], a3.f64[0]);
  v51 = vmulq_n_f64(a1[65], a3.f64[0]);
  v52 = vmulq_n_f64(a1[64], a3.f64[0]);
  v49 = vmulq_n_f64(a1[67], a3.f64[0]);
  v50 = vmulq_n_f64(a1[66], a3.f64[0]);
  v47 = vmulq_n_f64(a1[69], a3.f64[0]);
  v48 = vmulq_n_f64(a1[68], a3.f64[0]);
  v45 = vmulq_n_f64(a1[71], a3.f64[0]);
  v46 = vmulq_n_f64(a1[70], a3.f64[0]);
  v43 = vmulq_n_f64(a1[73], a3.f64[0]);
  v44 = vmulq_n_f64(a1[72], a3.f64[0]);
  v41 = vmulq_n_f64(a1[75], a3.f64[0]);
  v42 = vmulq_n_f64(a1[74], a3.f64[0]);
  v39 = vmulq_n_f64(a1[77], a3.f64[0]);
  v40 = vmulq_n_f64(a1[76], a3.f64[0]);
  v37 = vmulq_n_f64(a1[79], a3.f64[0]);
  v38 = vmulq_n_f64(a1[78], a3.f64[0]);
  v35 = vmulq_n_f64(a1[81], a3.f64[0]);
  v36 = vmulq_n_f64(a1[80], a3.f64[0]);
  v4 = vmulq_n_f64(a1[82], a3.f64[0]);
  v5 = vmulq_n_f64(a1[83], a3.f64[0]);
  v6 = vmulq_n_f64(a1[84], a3.f64[0]);
  v7 = vmulq_n_f64(a1[85], a3.f64[0]);
  v8 = vmulq_n_f64(a1[86], a3.f64[0]);
  v9 = vmulq_n_f64(a1[87], a3.f64[0]);
  v10 = vmulq_n_f64(a1[88], a3.f64[0]);
  v11 = vmulq_n_f64(a1[89], a3.f64[0]);
  v12 = vmulq_n_f64(a1[90], a3.f64[0]);
  v13 = vmulq_n_f64(a1[91], a3.f64[0]);
  v14 = vmulq_n_f64(a1[92], a3.f64[0]);
  v15 = vmulq_n_f64(a1[93], a3.f64[0]);
  v16 = vmulq_n_f64(a1[94], a3.f64[0]);
  v17 = vmulq_n_f64(a1[95], a3.f64[0]);
  v18 = vmulq_n_f64(a1[96], a3.f64[0]);
  v19 = vmulq_n_f64(a1[97], a3.f64[0]);
  v20 = vmulq_n_f64(a1[98], a3.f64[0]);
  v21 = vmulq_n_f64(a1[99], a3.f64[0]);
  v22 = vmulq_n_f64(a1[100], a3.f64[0]);
  v23 = vmulq_n_f64(a1[101], a3.f64[0]);
  v24 = vmulq_n_f64(a1[102], a3.f64[0]);
  v25 = vmulq_n_f64(a1[103], a3.f64[0]);
  v26 = vmulq_n_f64(a1[104], a3.f64[0]);
  v27 = vmulq_n_f64(a1[105], a3.f64[0]);
  v28 = vmulq_n_f64(a1[106], a3.f64[0]);
  v29 = vmulq_n_f64(a1[107], a3.f64[0]);
  v30 = vmulq_n_f64(a1[108], a3.f64[0]);
  v31 = vmulq_n_f64(a1[109], a3.f64[0]);
  v32 = vmulq_n_f64(a1[110], a3.f64[0]);
  v33 = vmulq_n_f64(a1[111], a3.f64[0]);
  a2[111] = vmulq_n_f64(a1[112], a3.f64[0]);
  a2[110] = v33;
  a2[109] = v32;
  a2[108] = v31;
  a2[107] = v30;
  a2[106] = v29;
  a2[105] = v28;
  a2[104] = v27;
  a2[103] = v26;
  a2[102] = v25;
  a2[101] = v24;
  a2[100] = v23;
  a2[99] = v22;
  a2[98] = v21;
  a2[97] = v20;
  a2[96] = v19;
  a2[95] = v18;
  a2[94] = v17;
  a2[93] = v16;
  a2[92] = v15;
  a2[91] = v14;
  a2[90] = v13;
  a2[89] = v12;
  a2[88] = v11;
  a2[87] = v10;
  a2[86] = v9;
  a2[85] = v8;
  a2[84] = v7;
  a2[83] = v6;
  a2[82] = v5;
  a2[81] = v4;
  a2[80] = v35;
  a2[79] = v36;
  a2[78] = v37;
  a2[77] = v38;
  a2[76] = v39;
  a2[75] = v40;
  a2[74] = v41;
  a2[73] = v42;
  a2[72] = v43;
  a2[71] = v44;
  a2[70] = v45;
  a2[69] = v46;
  a2[68] = v47;
  a2[67] = v48;
  a2[66] = v49;
  a2[65] = v50;
  a2[63] = v52;
  a2[64] = v51;
  a2[61] = v54;
  a2[62] = v53;
  a2[59] = v56;
  a2[60] = v55;
  a2[57] = v58;
  a2[58] = v57;
  a2[55] = v60;
  a2[56] = v59;
  a2[53] = v62;
  a2[54] = v61;
  a2[51] = v64;
  a2[52] = v63;
  a2[49] = v66;
  a2[50] = v65;
  a2[47] = v68;
  a2[48] = v67;
  a2[45] = v70;
  a2[46] = v69;
  a2[43] = v72;
  a2[44] = v71;
  a2[41] = v74;
  a2[42] = v73;
  a2[39] = v76;
  a2[40] = v75;
  a2[37] = v78;
  a2[38] = v77;
  a2[35] = v80;
  a2[36] = v79;
  a2[33] = v82;
  a2[34] = v81;
  a2[31] = v84;
  a2[32] = v83;
  a2[29] = v86;
  a2[30] = v85;
  a2[27] = v88;
  a2[28] = v87;
  a2[25] = v90;
  a2[26] = v89;
  a2[23] = v92;
  a2[24] = v91;
  a2[21] = v94;
  a2[22] = v93;
  a2[19] = v96;
  a2[20] = v95;
  a2[17] = v98;
  a2[18] = v97;
  a2[15] = v100;
  a2[16] = v99;
  a2[13] = v102;
  a2[14] = v101;
  a2[11] = v104;
  a2[12] = v103;
  a2[9] = v106;
  a2[10] = v105;
  a2[7] = v108;
  a2[8] = v107;
  a2[5] = v110;
  a2[6] = v109;
  a2[3] = v112;
  a2[4] = v111;
  a2[1] = v114;
  a2[2] = v113;
  *a2 = v115;
  result = (__n128)v116;
  a2[112].f64[0] = v116.f64[0];
  return result;
}

float64_t sub_20F4C20B0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v63;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v87;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v101;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v111;
  float64x2_t v114;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v159;
  float64x2_t v163;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64_t result;
  float64x2_t v192;
  double v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  double v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  double v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  double v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  double v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  double v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  double v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  double v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  double v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  double v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v690;
  float64x2_t v691;
  float64x2_t v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v695;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v713;
  float64x2_t v714;
  float64x2_t v715;
  float64x2_t v716;
  float64x2_t v717;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  double v724;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64x2_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t v748;
  float64x2_t v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  double v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v810;
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814;
  float64x2_t v815;
  float64x2_t v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  double v824;
  float64x2_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t v835;
  float64x2_t v836;
  float64x2_t v837;
  float64x2_t v838;
  float64x2_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  float64x2_t v851;
  float64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  float64x2_t v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  float64x2_t v867;
  float64x2_t v868;
  float64x2_t v869;
  float64x2_t v870;
  float64x2_t v871;
  float64x2_t v872;
  float64x2_t v873;
  float64x2_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  float64x2_t v878;
  float64x2_t v879;
  float64x2_t v880;
  float64x2_t v881;
  float64x2_t v882;
  float64x2_t v883;
  float64x2_t v884;
  float64x2_t v885;
  float64x2_t v886;
  float64x2_t v887;
  float64x2_t v888;
  float64x2_t v889;
  float64x2_t v890;
  float64x2_t v891;
  float64x2_t v892;
  float64x2_t v893;
  float64x2_t v894;
  float64x2_t v895;
  float64x2_t v896;
  float64x2_t v897;
  float64x2_t v898;
  float64x2_t v899;
  float64x2_t v900;
  float64x2_t v901;
  double v902;
  float64x2_t v903;
  float64x2_t v904;
  float64x2_t v905;
  float64x2_t v906;
  float64x2_t v907;
  float64x2_t v908;
  float64x2_t v909;
  float64x2_t v910;
  float64x2_t v911;
  float64x2_t v912;
  float64x2_t v913;
  float64x2_t v914;
  float64x2_t v915;
  float64x2_t v916;
  float64x2_t v917;
  float64x2_t v918;
  float64x2_t v919;
  float64x2_t v920;
  float64x2_t v921;
  float64x2_t v922;
  float64x2_t v923;

  _Q16 = *(float64x2_t *)(a1 + 16);
  _Q6 = *(float64x2_t *)(a1 + 136);
  v4 = (float64x2_t)vzip1q_s64((int64x2_t)_Q16, (int64x2_t)_Q6);
  v5 = (float64x2_t)vzip2q_s64((int64x2_t)_Q16, (int64x2_t)_Q6);
  v675 = vmlaq_laneq_f64(vmulq_n_f64(v4, _Q16.f64[0]), v5, _Q16, 1);
  v6 = *(float64x2_t *)(a1 + 256);
  _Q5 = *(float64x2_t *)(a1 + 376);
  v8 = (float64x2_t)vzip1q_s64((int64x2_t)v6, (int64x2_t)_Q5);
  *(_QWORD *)&v9.f64[0] = vdupq_laneq_s64((int64x2_t)v6, 1).u64[0];
  v9.f64[1] = *(float64_t *)(a1 + 384);
  v10 = vmlaq_laneq_f64(vmulq_n_f64(v8, _Q16.f64[0]), v9, _Q16, 1);
  _Q4 = *(float64x2_t *)(a1 + 496);
  _Q3 = *(float64x2_t *)(a1 + 616);
  v13 = (float64x2_t)vzip1q_s64((int64x2_t)_Q4, (int64x2_t)_Q3);
  *(_QWORD *)&v14.f64[0] = vdupq_laneq_s64((int64x2_t)_Q4, 1).u64[0];
  v14.f64[1] = *(float64_t *)(a1 + 624);
  v15 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q16.f64[0]), v14, _Q16, 1);
  _Q2 = *(float64x2_t *)(a1 + 736);
  _Q1 = *(float64x2_t *)(a1 + 856);
  v18 = (float64x2_t)vzip1q_s64((int64x2_t)_Q2, (int64x2_t)_Q1);
  *(_QWORD *)&v19.f64[0] = vdupq_laneq_s64((int64x2_t)_Q2, 1).u64[0];
  v19.f64[1] = *(float64_t *)(a1 + 864);
  v247 = vmlaq_laneq_f64(vmulq_n_f64(v18, _Q16.f64[0]), v19, _Q16, 1);
  _Q0 = *(float64x2_t *)(a1 + 976);
  v21 = *(float64x2_t *)(a1 + 1096);
  v22 = (float64x2_t)vzip1q_s64((int64x2_t)_Q0, (int64x2_t)v21);
  *(_QWORD *)&v23.f64[0] = vdupq_laneq_s64((int64x2_t)_Q0, 1).u64[0];
  v23.f64[1] = *(float64_t *)(a1 + 1104);
  v917 = vmlaq_laneq_f64(vmulq_n_f64(v22, _Q16.f64[0]), v23, _Q16, 1);
  v24 = *(float64x2_t *)(a1 + 1216);
  v25 = *(float64x2_t *)(a1 + 1336);
  v26 = (float64x2_t)vzip1q_s64((int64x2_t)v24, (int64x2_t)v25);
  *(_QWORD *)&v27.f64[0] = vdupq_laneq_s64((int64x2_t)v24, 1).u64[0];
  v27.f64[1] = *(float64_t *)(a1 + 1344);
  v910 = vmlaq_laneq_f64(vmulq_n_f64(v26, _Q16.f64[0]), v27, _Q16, 1);
  v28 = *(float64x2_t *)(a1 + 1456);
  v29 = *(float64x2_t *)(a1 + 1576);
  *(_QWORD *)&v30.f64[0] = vdupq_laneq_s64((int64x2_t)v28, 1).u64[0];
  v30.f64[1] = *(float64_t *)(a1 + 1584);
  v31 = (float64x2_t)vzip1q_s64((int64x2_t)v28, (int64x2_t)v29);
  v903 = vmlaq_laneq_f64(vmulq_n_f64(v31, _Q16.f64[0]), v30, _Q16, 1);
  _Q27 = *(float64x2_t *)(a1 + 1696);
  _Q16.f64[0] = *(float64_t *)(a1 + 24);
  __asm { FMLA            D17, D16, V27.D[1] }
  v895 = vmlaq_laneq_f64(vmulq_n_f64(v4, _Q6.f64[0]), v5, _Q6, 1);
  v888 = vmlaq_laneq_f64(vmulq_n_f64(v8, _Q6.f64[0]), v9, _Q6, 1);
  v881 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q6.f64[0]), v14, _Q6, 1);
  v874 = vmlaq_laneq_f64(vmulq_n_f64(v18, _Q6.f64[0]), v19, _Q6, 1);
  v867 = vmlaq_laneq_f64(vmulq_n_f64(v22, _Q6.f64[0]), v23, _Q6, 1);
  v860 = vmlaq_laneq_f64(vmulq_n_f64(v26, _Q6.f64[0]), v27, _Q6, 1);
  v241 = vmlaq_laneq_f64(vmulq_n_f64(v31, _Q6.f64[0]), v30, _Q6, 1);
  _Q6.f64[0] = *(float64_t *)(a1 + 144);
  __asm { FMLA            D16, D6, V27.D[1] }
  v235 = vmlaq_laneq_f64(vmulq_n_f64(v4, v6.f64[0]), v5, v6, 1);
  v229 = vmlaq_laneq_f64(vmulq_n_f64(v8, v6.f64[0]), v9, v6, 1);
  v853 = vmlaq_laneq_f64(vmulq_n_f64(v13, v6.f64[0]), v14, v6, 1);
  v846 = vmlaq_laneq_f64(vmulq_n_f64(v18, v6.f64[0]), v19, v6, 1);
  v839 = vmlaq_laneq_f64(vmulq_n_f64(v22, v6.f64[0]), v23, v6, 1);
  v832 = vmlaq_laneq_f64(vmulq_n_f64(v26, v6.f64[0]), v27, v6, 1);
  v825 = vmlaq_laneq_f64(vmulq_n_f64(v31, v6.f64[0]), v30, v6, 1);
  _Q6.f64[0] = *(float64_t *)(a1 + 264);
  __asm { FMLA            D16, D6, V27.D[1] }
  v817 = vmlaq_laneq_f64(vmulq_n_f64(v4, _Q5.f64[0]), v5, _Q5, 1);
  v810 = vmlaq_laneq_f64(vmulq_n_f64(v8, _Q5.f64[0]), v9, _Q5, 1);
  v803 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q5.f64[0]), v14, _Q5, 1);
  v796 = vmlaq_laneq_f64(vmulq_n_f64(v18, _Q5.f64[0]), v19, _Q5, 1);
  v789 = vmlaq_laneq_f64(vmulq_n_f64(v22, _Q5.f64[0]), v23, _Q5, 1);
  v782 = vmlaq_laneq_f64(vmulq_n_f64(v26, _Q5.f64[0]), v27, _Q5, 1);
  v775 = vmlaq_laneq_f64(vmulq_n_f64(v31, _Q5.f64[0]), v30, _Q5, 1);
  _Q5.f64[0] = v9.f64[1];
  __asm { FMLA            D6, D5, V27.D[1] }
  v767 = vmlaq_laneq_f64(vmulq_n_f64(v4, _Q4.f64[0]), v5, _Q4, 1);
  v760 = vmlaq_laneq_f64(vmulq_n_f64(v8, _Q4.f64[0]), v9, _Q4, 1);
  v753 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q4.f64[0]), v14, _Q4, 1);
  v746 = vmlaq_laneq_f64(vmulq_n_f64(v18, _Q4.f64[0]), v19, _Q4, 1);
  v739 = vmlaq_laneq_f64(vmulq_n_f64(v22, _Q4.f64[0]), v23, _Q4, 1);
  v732 = vmlaq_laneq_f64(vmulq_n_f64(v26, _Q4.f64[0]), v27, _Q4, 1);
  v725 = vmlaq_laneq_f64(vmulq_n_f64(v31, _Q4.f64[0]), v30, _Q4, 1);
  _Q4.f64[0] = *(float64_t *)(a1 + 504);
  __asm { FMLA            D5, D4, V27.D[1] }
  v717 = vmlaq_laneq_f64(vmulq_n_f64(v4, _Q3.f64[0]), v5, _Q3, 1);
  v710 = vmlaq_laneq_f64(vmulq_n_f64(v8, _Q3.f64[0]), v9, _Q3, 1);
  v703 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q3.f64[0]), v14, _Q3, 1);
  v696 = vmlaq_laneq_f64(vmulq_n_f64(v18, _Q3.f64[0]), v19, _Q3, 1);
  v689 = vmlaq_laneq_f64(vmulq_n_f64(v22, _Q3.f64[0]), v23, _Q3, 1);
  v682 = vmlaq_laneq_f64(vmulq_n_f64(v26, _Q3.f64[0]), v27, _Q3, 1);
  v668 = vmlaq_laneq_f64(vmulq_n_f64(v31, _Q3.f64[0]), v30, _Q3, 1);
  _Q3.f64[0] = v14.f64[1];
  __asm { FMLA            D4, D3, V27.D[1] }
  v660 = vmlaq_laneq_f64(vmulq_n_f64(v4, _Q2.f64[0]), v5, _Q2, 1);
  v653 = vmlaq_laneq_f64(vmulq_n_f64(v8, _Q2.f64[0]), v9, _Q2, 1);
  v646 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q2.f64[0]), v14, _Q2, 1);
  v639 = vmlaq_laneq_f64(vmulq_n_f64(v18, _Q2.f64[0]), v19, _Q2, 1);
  v632 = vmlaq_laneq_f64(vmulq_n_f64(v22, _Q2.f64[0]), v23, _Q2, 1);
  v625 = vmlaq_laneq_f64(vmulq_n_f64(v26, _Q2.f64[0]), v27, _Q2, 1);
  v618 = vmlaq_laneq_f64(vmulq_n_f64(v31, _Q2.f64[0]), v30, _Q2, 1);
  _Q2.f64[0] = *(float64_t *)(a1 + 744);
  __asm { FMLA            D3, D2, V27.D[1] }
  v610 = vmlaq_laneq_f64(vmulq_n_f64(v4, _Q1.f64[0]), v5, _Q1, 1);
  v603 = vmlaq_laneq_f64(vmulq_n_f64(v8, _Q1.f64[0]), v9, _Q1, 1);
  v596 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q1.f64[0]), v14, _Q1, 1);
  v589 = vmlaq_laneq_f64(vmulq_n_f64(v18, _Q1.f64[0]), v19, _Q1, 1);
  v582 = vmlaq_laneq_f64(vmulq_n_f64(v22, _Q1.f64[0]), v23, _Q1, 1);
  v575 = vmlaq_laneq_f64(vmulq_n_f64(v26, _Q1.f64[0]), v27, _Q1, 1);
  v568 = vmlaq_laneq_f64(vmulq_n_f64(v31, _Q1.f64[0]), v30, _Q1, 1);
  _Q1.f64[0] = v19.f64[1];
  __asm { FMLA            D2, D1, V27.D[1] }
  v560 = vmlaq_laneq_f64(vmulq_n_f64(v4, _Q0.f64[0]), v5, _Q0, 1);
  v553 = vmlaq_laneq_f64(vmulq_n_f64(v8, _Q0.f64[0]), v9, _Q0, 1);
  v546 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q0.f64[0]), v14, _Q0, 1);
  v539 = vmlaq_laneq_f64(vmulq_n_f64(v18, _Q0.f64[0]), v19, _Q0, 1);
  v532 = vmlaq_laneq_f64(vmulq_n_f64(v22, _Q0.f64[0]), v23, _Q0, 1);
  v525 = vmlaq_laneq_f64(vmulq_n_f64(v26, _Q0.f64[0]), v27, _Q0, 1);
  v518 = vmlaq_laneq_f64(vmulq_n_f64(v31, _Q0.f64[0]), v30, _Q0, 1);
  _Q0.f64[0] = *(float64_t *)(a1 + 984);
  __asm { FMLA            D1, D0, V27.D[1] }
  v510 = vmlaq_laneq_f64(vmulq_n_f64(v4, v21.f64[0]), v5, v21, 1);
  v503 = vmlaq_laneq_f64(vmulq_n_f64(v8, v21.f64[0]), v9, v21, 1);
  v496 = vmlaq_laneq_f64(vmulq_n_f64(v13, v21.f64[0]), v14, v21, 1);
  v489 = vmlaq_laneq_f64(vmulq_n_f64(v18, v21.f64[0]), v19, v21, 1);
  v482 = vmlaq_laneq_f64(vmulq_n_f64(v22, v21.f64[0]), v23, v21, 1);
  v475 = vmlaq_laneq_f64(vmulq_n_f64(v26, v21.f64[0]), v27, v21, 1);
  v468 = vmlaq_laneq_f64(vmulq_n_f64(v31, v21.f64[0]), v30, v21, 1);
  _Q0.f64[0] = v23.f64[1];
  __asm { FMLA            D1, D0, V27.D[1] }
  v460 = vmlaq_laneq_f64(vmulq_n_f64(v4, v24.f64[0]), v5, v24, 1);
  v453 = vmlaq_laneq_f64(vmulq_n_f64(v8, v24.f64[0]), v9, v24, 1);
  v446 = vmlaq_laneq_f64(vmulq_n_f64(v13, v24.f64[0]), v14, v24, 1);
  v439 = vmlaq_laneq_f64(vmulq_n_f64(v18, v24.f64[0]), v19, v24, 1);
  v432 = vmlaq_laneq_f64(vmulq_n_f64(v22, v24.f64[0]), v23, v24, 1);
  v425 = vmlaq_laneq_f64(vmulq_n_f64(v26, v24.f64[0]), v27, v24, 1);
  v418 = vmlaq_laneq_f64(vmulq_n_f64(v31, v24.f64[0]), v30, v24, 1);
  _Q0.f64[0] = *(float64_t *)(a1 + 1224);
  __asm { FMLA            D1, D0, V27.D[1] }
  v410 = vmlaq_laneq_f64(vmulq_n_f64(v4, v25.f64[0]), v5, v25, 1);
  v403 = vmlaq_laneq_f64(vmulq_n_f64(v8, v25.f64[0]), v9, v25, 1);
  v396 = vmlaq_laneq_f64(vmulq_n_f64(v13, v25.f64[0]), v14, v25, 1);
  v389 = vmlaq_laneq_f64(vmulq_n_f64(v18, v25.f64[0]), v19, v25, 1);
  v382 = vmlaq_laneq_f64(vmulq_n_f64(v22, v25.f64[0]), v23, v25, 1);
  v375 = vmlaq_laneq_f64(vmulq_n_f64(v26, v25.f64[0]), v27, v25, 1);
  v368 = vmlaq_laneq_f64(vmulq_n_f64(v31, v25.f64[0]), v30, v25, 1);
  _Q0.f64[0] = v27.f64[1];
  __asm { FMLA            D1, D0, V27.D[1] }
  v360 = vmlaq_laneq_f64(vmulq_n_f64(v4, v28.f64[0]), v5, v28, 1);
  v353 = vmlaq_laneq_f64(vmulq_n_f64(v8, v28.f64[0]), v9, v28, 1);
  v346 = vmlaq_laneq_f64(vmulq_n_f64(v13, v28.f64[0]), v14, v28, 1);
  v339 = vmlaq_laneq_f64(vmulq_n_f64(v18, v28.f64[0]), v19, v28, 1);
  v332 = vmlaq_laneq_f64(vmulq_n_f64(v22, v28.f64[0]), v23, v28, 1);
  v325 = vmlaq_laneq_f64(vmulq_n_f64(v26, v28.f64[0]), v27, v28, 1);
  v318 = vmlaq_laneq_f64(vmulq_n_f64(v31, v28.f64[0]), v30, v28, 1);
  _Q0.f64[0] = *(float64_t *)(a1 + 1464);
  __asm { FMLA            D1, D0, V27.D[1] }
  v310 = vmlaq_laneq_f64(vmulq_n_f64(v4, v29.f64[0]), v5, v29, 1);
  v303 = vmlaq_laneq_f64(vmulq_n_f64(v8, v29.f64[0]), v9, v29, 1);
  v296 = vmlaq_laneq_f64(vmulq_n_f64(v13, v29.f64[0]), v14, v29, 1);
  v289 = vmlaq_laneq_f64(vmulq_n_f64(v18, v29.f64[0]), v19, v29, 1);
  v282 = vmlaq_laneq_f64(vmulq_n_f64(v22, v29.f64[0]), v23, v29, 1);
  v275 = vmlaq_laneq_f64(vmulq_n_f64(v26, v29.f64[0]), v27, v29, 1);
  v223 = vmlaq_laneq_f64(vmulq_n_f64(v31, v29.f64[0]), v30, v29, 1);
  _Q0.f64[0] = v30.f64[1];
  __asm { FMLA            D1, D0, V27.D[1] }
  v267 = vmlaq_laneq_f64(vmulq_n_f64(v4, _Q27.f64[0]), v5, _Q27, 1);
  v260 = vmlaq_laneq_f64(vmulq_n_f64(v8, _Q27.f64[0]), v9, _Q27, 1);
  v253 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q27.f64[0]), v14, _Q27, 1);
  v217 = vmlaq_laneq_f64(vmulq_n_f64(v18, _Q27.f64[0]), v19, _Q27, 1);
  v211 = vmlaq_laneq_f64(vmulq_n_f64(v22, _Q27.f64[0]), v23, _Q27, 1);
  _Q14 = vmlaq_laneq_f64(vmulq_n_f64(v26, _Q27.f64[0]), v27, _Q27, 1);
  v39 = vmlaq_laneq_f64(vmulq_n_f64(v31, _Q27.f64[0]), v30, _Q27, 1);
  v40 = *(float64x2_t *)(a1 + 272);
  v41 = *(float64x2_t *)(a1 + 392);
  *(_QWORD *)&v28.f64[0] = vdupq_laneq_s64((int64x2_t)v40, 1).u64[0];
  v28.f64[1] = *(float64_t *)(a1 + 400);
  v42 = *(float64x2_t *)(a1 + 512);
  v43 = *(float64x2_t *)(a1 + 632);
  *(_QWORD *)&v29.f64[0] = vdupq_laneq_s64((int64x2_t)v42, 1).u64[0];
  v29.f64[1] = *(float64_t *)(a1 + 640);
  v44 = *(float64x2_t *)(a1 + 752);
  v45 = *(float64x2_t *)(a1 + 872);
  *(_QWORD *)&v27.f64[0] = vdupq_laneq_s64((int64x2_t)v44, 1).u64[0];
  v27.f64[1] = *(float64_t *)(a1 + 880);
  v46 = *(float64x2_t *)(a1 + 992);
  v47 = *(float64x2_t *)(a1 + 1112);
  *(_QWORD *)&v23.f64[0] = vdupq_laneq_s64((int64x2_t)v46, 1).u64[0];
  v23.f64[1] = *(float64_t *)(a1 + 1120);
  v48 = *(float64x2_t *)(a1 + 1352);
  v49 = *(float64x2_t *)(a1 + 1232);
  *(_QWORD *)&v19.f64[0] = vdupq_laneq_s64((int64x2_t)v49, 1).u64[0];
  v19.f64[1] = *(float64_t *)(a1 + 1360);
  v50 = *(float64x2_t *)(a1 + 1592);
  v51 = *(float64x2_t *)(a1 + 1472);
  *(_QWORD *)&v14.f64[0] = vdupq_laneq_s64((int64x2_t)v51, 1).u64[0];
  v14.f64[1] = *(float64_t *)(a1 + 1600);
  _Q0.f64[0] = *(float64_t *)(a1 + 1704);
  __asm { FMLA            D1, D0, V27.D[1] }
  _Q0 = *(float64x2_t *)(a1 + 32);
  _Q1 = *(float64x2_t *)(a1 + 152);
  v54 = (float64x2_t)vzip1q_s64((int64x2_t)_Q0, (int64x2_t)_Q1);
  v55 = (float64x2_t)vzip2q_s64((int64x2_t)_Q0, (int64x2_t)_Q1);
  v676 = vmlaq_laneq_f64(vmlaq_n_f64(v675, v54, _Q0.f64[0]), v55, _Q0, 1);
  v56 = (float64x2_t)vzip1q_s64((int64x2_t)v40, (int64x2_t)v41);
  v57 = (float64x2_t)vzip1q_s64((int64x2_t)v42, (int64x2_t)v43);
  v199 = vmlaq_laneq_f64(vmlaq_n_f64(v10, v56, _Q0.f64[0]), v28, _Q0, 1);
  v205 = vmlaq_laneq_f64(vmlaq_n_f64(v15, v57, _Q0.f64[0]), v29, _Q0, 1);
  v58 = (float64x2_t)vzip1q_s64((int64x2_t)v44, (int64x2_t)v45);
  v248 = vmlaq_laneq_f64(vmlaq_n_f64(v247, v58, _Q0.f64[0]), v27, _Q0, 1);
  v59 = (float64x2_t)vzip1q_s64((int64x2_t)v46, (int64x2_t)v47);
  v918 = vmlaq_laneq_f64(vmlaq_n_f64(v917, v59, _Q0.f64[0]), v23, _Q0, 1);
  v60 = (float64x2_t)vzip1q_s64((int64x2_t)v49, (int64x2_t)v48);
  v911 = vmlaq_laneq_f64(vmlaq_n_f64(v910, v60, _Q0.f64[0]), v19, _Q0, 1);
  v61 = (float64x2_t)vzip1q_s64((int64x2_t)v51, (int64x2_t)v50);
  v904 = vmlaq_laneq_f64(vmlaq_n_f64(v903, v61, _Q0.f64[0]), v14, _Q0, 1);
  _Q2 = *(float64x2_t *)(a1 + 1712);
  _Q0.f64[0] = *(float64_t *)(a1 + 40);
  __asm { FMLA            D3, D0, V2.D[1] }
  v896 = vmlaq_laneq_f64(vmlaq_n_f64(v895, v54, _Q1.f64[0]), v55, _Q1, 1);
  v889 = vmlaq_laneq_f64(vmlaq_n_f64(v888, v56, _Q1.f64[0]), v28, _Q1, 1);
  v882 = vmlaq_laneq_f64(vmlaq_n_f64(v881, v57, _Q1.f64[0]), v29, _Q1, 1);
  v875 = vmlaq_laneq_f64(vmlaq_n_f64(v874, v58, _Q1.f64[0]), v27, _Q1, 1);
  v868 = vmlaq_laneq_f64(vmlaq_n_f64(v867, v59, _Q1.f64[0]), v23, _Q1, 1);
  v861 = vmlaq_laneq_f64(vmlaq_n_f64(v860, v60, _Q1.f64[0]), v19, _Q1, 1);
  v242 = vmlaq_laneq_f64(vmlaq_n_f64(v241, v61, _Q1.f64[0]), v14, _Q1, 1);
  _Q0.f64[0] = *(float64_t *)(a1 + 160);
  __asm { FMLA            D3, D0, V2.D[1] }
  v236 = vmlaq_laneq_f64(vmlaq_n_f64(v235, v54, v40.f64[0]), v55, v40, 1);
  v230 = vmlaq_laneq_f64(vmlaq_n_f64(v229, v56, v40.f64[0]), v28, v40, 1);
  v854 = vmlaq_laneq_f64(vmlaq_n_f64(v853, v57, v40.f64[0]), v29, v40, 1);
  v847 = vmlaq_laneq_f64(vmlaq_n_f64(v846, v58, v40.f64[0]), v27, v40, 1);
  v840 = vmlaq_laneq_f64(vmlaq_n_f64(v839, v59, v40.f64[0]), v23, v40, 1);
  v833 = vmlaq_laneq_f64(vmlaq_n_f64(v832, v60, v40.f64[0]), v19, v40, 1);
  v826 = vmlaq_laneq_f64(vmlaq_n_f64(v825, v61, v40.f64[0]), v14, v40, 1);
  _Q0.f64[0] = *(float64_t *)(a1 + 280);
  __asm { FMLA            D1, D0, V2.D[1] }
  v818 = vmlaq_laneq_f64(vmlaq_n_f64(v817, v54, v41.f64[0]), v55, v41, 1);
  v811 = vmlaq_laneq_f64(vmlaq_n_f64(v810, v56, v41.f64[0]), v28, v41, 1);
  v804 = vmlaq_laneq_f64(vmlaq_n_f64(v803, v57, v41.f64[0]), v29, v41, 1);
  v797 = vmlaq_laneq_f64(vmlaq_n_f64(v796, v58, v41.f64[0]), v27, v41, 1);
  v790 = vmlaq_laneq_f64(vmlaq_n_f64(v789, v59, v41.f64[0]), v23, v41, 1);
  v783 = vmlaq_laneq_f64(vmlaq_n_f64(v782, v60, v41.f64[0]), v19, v41, 1);
  v776 = vmlaq_laneq_f64(vmlaq_n_f64(v775, v61, v41.f64[0]), v14, v41, 1);
  _Q0.f64[0] = v28.f64[1];
  __asm { FMLA            D1, D0, V2.D[1] }
  v768 = vmlaq_laneq_f64(vmlaq_n_f64(v767, v54, v42.f64[0]), v55, v42, 1);
  v761 = vmlaq_laneq_f64(vmlaq_n_f64(v760, v56, v42.f64[0]), v28, v42, 1);
  v754 = vmlaq_laneq_f64(vmlaq_n_f64(v753, v57, v42.f64[0]), v29, v42, 1);
  v747 = vmlaq_laneq_f64(vmlaq_n_f64(v746, v58, v42.f64[0]), v27, v42, 1);
  v740 = vmlaq_laneq_f64(vmlaq_n_f64(v739, v59, v42.f64[0]), v23, v42, 1);
  v733 = vmlaq_laneq_f64(vmlaq_n_f64(v732, v60, v42.f64[0]), v19, v42, 1);
  v726 = vmlaq_laneq_f64(vmlaq_n_f64(v725, v61, v42.f64[0]), v14, v42, 1);
  _Q0.f64[0] = *(float64_t *)(a1 + 520);
  __asm { FMLA            D1, D0, V2.D[1] }
  v718 = vmlaq_laneq_f64(vmlaq_n_f64(v717, v54, v43.f64[0]), v55, v43, 1);
  v711 = vmlaq_laneq_f64(vmlaq_n_f64(v710, v56, v43.f64[0]), v28, v43, 1);
  v704 = vmlaq_laneq_f64(vmlaq_n_f64(v703, v57, v43.f64[0]), v29, v43, 1);
  v697 = vmlaq_laneq_f64(vmlaq_n_f64(v696, v58, v43.f64[0]), v27, v43, 1);
  v690 = vmlaq_laneq_f64(vmlaq_n_f64(v689, v59, v43.f64[0]), v23, v43, 1);
  v683 = vmlaq_laneq_f64(vmlaq_n_f64(v682, v60, v43.f64[0]), v19, v43, 1);
  v669 = vmlaq_laneq_f64(vmlaq_n_f64(v668, v61, v43.f64[0]), v14, v43, 1);
  _Q0.f64[0] = v29.f64[1];
  __asm { FMLA            D1, D0, V2.D[1] }
  v661 = vmlaq_laneq_f64(vmlaq_n_f64(v660, v54, v44.f64[0]), v55, v44, 1);
  v654 = vmlaq_laneq_f64(vmlaq_n_f64(v653, v56, v44.f64[0]), v28, v44, 1);
  v647 = vmlaq_laneq_f64(vmlaq_n_f64(v646, v57, v44.f64[0]), v29, v44, 1);
  v640 = vmlaq_laneq_f64(vmlaq_n_f64(v639, v58, v44.f64[0]), v27, v44, 1);
  v633 = vmlaq_laneq_f64(vmlaq_n_f64(v632, v59, v44.f64[0]), v23, v44, 1);
  v626 = vmlaq_laneq_f64(vmlaq_n_f64(v625, v60, v44.f64[0]), v19, v44, 1);
  v619 = vmlaq_laneq_f64(vmlaq_n_f64(v618, v61, v44.f64[0]), v14, v44, 1);
  _Q0.f64[0] = *(float64_t *)(a1 + 760);
  __asm { FMLA            D1, D0, V2.D[1] }
  v611 = vmlaq_laneq_f64(vmlaq_n_f64(v610, v54, v45.f64[0]), v55, v45, 1);
  v604 = vmlaq_laneq_f64(vmlaq_n_f64(v603, v56, v45.f64[0]), v28, v45, 1);
  v597 = vmlaq_laneq_f64(vmlaq_n_f64(v596, v57, v45.f64[0]), v29, v45, 1);
  v590 = vmlaq_laneq_f64(vmlaq_n_f64(v589, v58, v45.f64[0]), v27, v45, 1);
  v583 = vmlaq_laneq_f64(vmlaq_n_f64(v582, v59, v45.f64[0]), v23, v45, 1);
  v576 = vmlaq_laneq_f64(vmlaq_n_f64(v575, v60, v45.f64[0]), v19, v45, 1);
  v569 = vmlaq_laneq_f64(vmlaq_n_f64(v568, v61, v45.f64[0]), v14, v45, 1);
  _Q0.f64[0] = v27.f64[1];
  __asm { FMLA            D1, D0, V2.D[1] }
  v561 = vmlaq_laneq_f64(vmlaq_n_f64(v560, v54, v46.f64[0]), v55, v46, 1);
  v554 = vmlaq_laneq_f64(vmlaq_n_f64(v553, v56, v46.f64[0]), v28, v46, 1);
  v547 = vmlaq_laneq_f64(vmlaq_n_f64(v546, v57, v46.f64[0]), v29, v46, 1);
  v540 = vmlaq_laneq_f64(vmlaq_n_f64(v539, v58, v46.f64[0]), v27, v46, 1);
  v533 = vmlaq_laneq_f64(vmlaq_n_f64(v532, v59, v46.f64[0]), v23, v46, 1);
  v526 = vmlaq_laneq_f64(vmlaq_n_f64(v525, v60, v46.f64[0]), v19, v46, 1);
  v519 = vmlaq_laneq_f64(vmlaq_n_f64(v518, v61, v46.f64[0]), v14, v46, 1);
  _Q0.f64[0] = *(float64_t *)(a1 + 1000);
  __asm { FMLA            D1, D0, V2.D[1] }
  v511 = vmlaq_laneq_f64(vmlaq_n_f64(v510, v54, v47.f64[0]), v55, v47, 1);
  v504 = vmlaq_laneq_f64(vmlaq_n_f64(v503, v56, v47.f64[0]), v28, v47, 1);
  v497 = vmlaq_laneq_f64(vmlaq_n_f64(v496, v57, v47.f64[0]), v29, v47, 1);
  v490 = vmlaq_laneq_f64(vmlaq_n_f64(v489, v58, v47.f64[0]), v27, v47, 1);
  v483 = vmlaq_laneq_f64(vmlaq_n_f64(v482, v59, v47.f64[0]), v23, v47, 1);
  v476 = vmlaq_laneq_f64(vmlaq_n_f64(v475, v60, v47.f64[0]), v19, v47, 1);
  v469 = vmlaq_laneq_f64(vmlaq_n_f64(v468, v61, v47.f64[0]), v14, v47, 1);
  _Q0.f64[0] = v23.f64[1];
  __asm { FMLA            D1, D0, V2.D[1] }
  v461 = vmlaq_laneq_f64(vmlaq_n_f64(v460, v54, v49.f64[0]), v55, v49, 1);
  v454 = vmlaq_laneq_f64(vmlaq_n_f64(v453, v56, v49.f64[0]), v28, v49, 1);
  v447 = vmlaq_laneq_f64(vmlaq_n_f64(v446, v57, v49.f64[0]), v29, v49, 1);
  v440 = vmlaq_laneq_f64(vmlaq_n_f64(v439, v58, v49.f64[0]), v27, v49, 1);
  v433 = vmlaq_laneq_f64(vmlaq_n_f64(v432, v59, v49.f64[0]), v23, v49, 1);
  v426 = vmlaq_laneq_f64(vmlaq_n_f64(v425, v60, v49.f64[0]), v19, v49, 1);
  v419 = vmlaq_laneq_f64(vmlaq_n_f64(v418, v61, v49.f64[0]), v14, v49, 1);
  _Q0.f64[0] = *(float64_t *)(a1 + 1240);
  __asm { FMLA            D1, D0, V2.D[1] }
  v411 = vmlaq_laneq_f64(vmlaq_n_f64(v410, v54, v48.f64[0]), v55, v48, 1);
  v404 = vmlaq_laneq_f64(vmlaq_n_f64(v403, v56, v48.f64[0]), v28, v48, 1);
  v397 = vmlaq_laneq_f64(vmlaq_n_f64(v396, v57, v48.f64[0]), v29, v48, 1);
  v390 = vmlaq_laneq_f64(vmlaq_n_f64(v389, v58, v48.f64[0]), v27, v48, 1);
  v383 = vmlaq_laneq_f64(vmlaq_n_f64(v382, v59, v48.f64[0]), v23, v48, 1);
  v376 = vmlaq_laneq_f64(vmlaq_n_f64(v375, v60, v48.f64[0]), v19, v48, 1);
  v369 = vmlaq_laneq_f64(vmlaq_n_f64(v368, v61, v48.f64[0]), v14, v48, 1);
  _Q0.f64[0] = v19.f64[1];
  __asm { FMLA            D1, D0, V2.D[1] }
  v361 = vmlaq_laneq_f64(vmlaq_n_f64(v360, v54, v51.f64[0]), v55, v51, 1);
  v354 = vmlaq_laneq_f64(vmlaq_n_f64(v353, v56, v51.f64[0]), v28, v51, 1);
  v347 = vmlaq_laneq_f64(vmlaq_n_f64(v346, v57, v51.f64[0]), v29, v51, 1);
  v340 = vmlaq_laneq_f64(vmlaq_n_f64(v339, v58, v51.f64[0]), v27, v51, 1);
  v333 = vmlaq_laneq_f64(vmlaq_n_f64(v332, v59, v51.f64[0]), v23, v51, 1);
  v326 = vmlaq_laneq_f64(vmlaq_n_f64(v325, v60, v51.f64[0]), v19, v51, 1);
  v319 = vmlaq_laneq_f64(vmlaq_n_f64(v318, v61, v51.f64[0]), v14, v51, 1);
  _Q0.f64[0] = *(float64_t *)(a1 + 1480);
  __asm { FMLA            D1, D0, V2.D[1] }
  v311 = vmlaq_laneq_f64(vmlaq_n_f64(v310, v54, v50.f64[0]), v55, v50, 1);
  v304 = vmlaq_laneq_f64(vmlaq_n_f64(v303, v56, v50.f64[0]), v28, v50, 1);
  v297 = vmlaq_laneq_f64(vmlaq_n_f64(v296, v57, v50.f64[0]), v29, v50, 1);
  v290 = vmlaq_laneq_f64(vmlaq_n_f64(v289, v58, v50.f64[0]), v27, v50, 1);
  v283 = vmlaq_laneq_f64(vmlaq_n_f64(v282, v59, v50.f64[0]), v23, v50, 1);
  v276 = vmlaq_laneq_f64(vmlaq_n_f64(v275, v60, v50.f64[0]), v19, v50, 1);
  v224 = vmlaq_laneq_f64(vmlaq_n_f64(v223, v61, v50.f64[0]), v14, v50, 1);
  _Q0.f64[0] = v14.f64[1];
  __asm { FMLA            D1, D0, V2.D[1] }
  v268 = vmlaq_laneq_f64(vmlaq_n_f64(v267, v54, _Q2.f64[0]), v55, _Q2, 1);
  v261 = vmlaq_laneq_f64(vmlaq_n_f64(v260, v56, _Q2.f64[0]), v28, _Q2, 1);
  v254 = vmlaq_laneq_f64(vmlaq_n_f64(v253, v57, _Q2.f64[0]), v29, _Q2, 1);
  v218 = vmlaq_laneq_f64(vmlaq_n_f64(v217, v58, _Q2.f64[0]), v27, _Q2, 1);
  v212 = vmlaq_laneq_f64(vmlaq_n_f64(v211, v59, _Q2.f64[0]), v23, _Q2, 1);
  v194 = vmlaq_laneq_f64(vmlaq_n_f64(_Q14, v60, _Q2.f64[0]), v19, _Q2, 1);
  v63 = vmlaq_laneq_f64(vmlaq_n_f64(v39, v61, _Q2.f64[0]), v14, _Q2, 1);
  _Q0.f64[0] = *(float64_t *)(a1 + 1720);
  __asm { FMLA            D1, D0, V2.D[1] }
  _Q31 = *(float64x2_t *)(a1 + 288);
  *(_QWORD *)&_Q0.f64[0] = vdupq_laneq_s64((int64x2_t)_Q31, 1).u64[0];
  _Q8 = *(float64x2_t *)(a1 + 408);
  _Q0.f64[1] = *(float64_t *)(a1 + 416);
  v66 = *(float64x2_t *)(a1 + 528);
  *(_QWORD *)&_Q1.f64[0] = vdupq_laneq_s64((int64x2_t)v66, 1).u64[0];
  v67 = *(float64x2_t *)(a1 + 648);
  _Q1.f64[1] = *(float64_t *)(a1 + 656);
  _Q30 = *(float64x2_t *)(a1 + 768);
  *(_QWORD *)&_Q2.f64[0] = vdupq_laneq_s64((int64x2_t)_Q30, 1).u64[0];
  _Q29 = *(float64x2_t *)(a1 + 888);
  _Q2.f64[1] = *(float64_t *)(a1 + 896);
  _Q28 = *(float64x2_t *)(a1 + 1008);
  *(_QWORD *)&_Q3.f64[0] = vdupq_laneq_s64((int64x2_t)_Q28, 1).u64[0];
  _Q27 = *(float64x2_t *)(a1 + 1128);
  _Q3.f64[1] = *(float64_t *)(a1 + 1136);
  _Q26 = *(float64x2_t *)(a1 + 1248);
  *(_QWORD *)&v40.f64[0] = vdupq_laneq_s64((int64x2_t)_Q26, 1).u64[0];
  _Q25 = *(float64x2_t *)(a1 + 1368);
  v40.f64[1] = *(float64_t *)(a1 + 1376);
  _Q24 = *(float64x2_t *)(a1 + 1488);
  *(_QWORD *)&v41.f64[0] = vdupq_laneq_s64((int64x2_t)_Q24, 1).u64[0];
  _Q6 = *(float64x2_t *)(a1 + 1608);
  v41.f64[1] = *(float64_t *)(a1 + 1616);
  _Q11 = *(float64x2_t *)(a1 + 48);
  v77 = *(float64x2_t *)(a1 + 168);
  v78 = (float64x2_t)vzip1q_s64((int64x2_t)_Q11, (int64x2_t)v77);
  _Q16 = (float64x2_t)vzip2q_s64((int64x2_t)_Q11, (int64x2_t)v77);
  v677 = vmlaq_laneq_f64(vmlaq_n_f64(v676, v78, _Q11.f64[0]), _Q16, _Q11, 1);
  v80 = (float64x2_t)vzip1q_s64((int64x2_t)_Q31, (int64x2_t)_Q8);
  v200 = vmlaq_laneq_f64(vmlaq_n_f64(v199, v80, _Q11.f64[0]), _Q0, _Q11, 1);
  v81 = (float64x2_t)vzip1q_s64((int64x2_t)v66, (int64x2_t)v67);
  v206 = vmlaq_laneq_f64(vmlaq_n_f64(v205, v81, _Q11.f64[0]), _Q1, _Q11, 1);
  v82 = (float64x2_t)vzip1q_s64((int64x2_t)_Q30, (int64x2_t)_Q29);
  v249 = vmlaq_laneq_f64(vmlaq_n_f64(v248, v82, _Q11.f64[0]), _Q2, _Q11, 1);
  v83 = (float64x2_t)vzip1q_s64((int64x2_t)_Q28, (int64x2_t)_Q27);
  v919 = vmlaq_laneq_f64(vmlaq_n_f64(v918, v83, _Q11.f64[0]), _Q3, _Q11, 1);
  v84 = (float64x2_t)vzip1q_s64((int64x2_t)_Q26, (int64x2_t)_Q25);
  v912 = vmlaq_laneq_f64(vmlaq_n_f64(v911, v84, _Q11.f64[0]), v40, _Q11, 1);
  v85 = (float64x2_t)vzip1q_s64((int64x2_t)_Q24, (int64x2_t)_Q6);
  v905 = vmlaq_laneq_f64(vmlaq_n_f64(v904, v85, _Q11.f64[0]), v41, _Q11, 1);
  _Q19 = *(float64x2_t *)(a1 + 1728);
  _Q11.f64[0] = *(float64_t *)(a1 + 56);
  __asm { FMLA            D14, D11, V19.D[1] }
  v897 = vmlaq_laneq_f64(vmlaq_n_f64(v896, v78, v77.f64[0]), _Q16, v77, 1);
  v890 = vmlaq_laneq_f64(vmlaq_n_f64(v889, v80, v77.f64[0]), _Q0, v77, 1);
  v883 = vmlaq_laneq_f64(vmlaq_n_f64(v882, v81, v77.f64[0]), _Q1, v77, 1);
  v876 = vmlaq_laneq_f64(vmlaq_n_f64(v875, v82, v77.f64[0]), _Q2, v77, 1);
  v869 = vmlaq_laneq_f64(vmlaq_n_f64(v868, v83, v77.f64[0]), _Q3, v77, 1);
  v862 = vmlaq_laneq_f64(vmlaq_n_f64(v861, v84, v77.f64[0]), v40, v77, 1);
  v243 = vmlaq_laneq_f64(vmlaq_n_f64(v242, v85, v77.f64[0]), v41, v77, 1);
  _Q11.f64[0] = *(float64_t *)(a1 + 176);
  __asm { FMLA            D14, D11, V19.D[1] }
  v237 = vmlaq_laneq_f64(vmlaq_n_f64(v236, v78, _Q31.f64[0]), _Q16, _Q31, 1);
  v231 = vmlaq_laneq_f64(vmlaq_n_f64(v230, v80, _Q31.f64[0]), _Q0, _Q31, 1);
  v855 = vmlaq_laneq_f64(vmlaq_n_f64(v854, v81, _Q31.f64[0]), _Q1, _Q31, 1);
  v848 = vmlaq_laneq_f64(vmlaq_n_f64(v847, v82, _Q31.f64[0]), _Q2, _Q31, 1);
  v841 = vmlaq_laneq_f64(vmlaq_n_f64(v840, v83, _Q31.f64[0]), _Q3, _Q31, 1);
  v834 = vmlaq_laneq_f64(vmlaq_n_f64(v833, v84, _Q31.f64[0]), v40, _Q31, 1);
  v827 = vmlaq_laneq_f64(vmlaq_n_f64(v826, v85, _Q31.f64[0]), v41, _Q31, 1);
  _Q31.f64[0] = *(float64_t *)(a1 + 296);
  __asm { FMLA            D11, D31, V19.D[1] }
  v819 = vmlaq_laneq_f64(vmlaq_n_f64(v818, v78, _Q8.f64[0]), _Q16, _Q8, 1);
  v812 = vmlaq_laneq_f64(vmlaq_n_f64(v811, v80, _Q8.f64[0]), _Q0, _Q8, 1);
  v805 = vmlaq_laneq_f64(vmlaq_n_f64(v804, v81, _Q8.f64[0]), _Q1, _Q8, 1);
  v798 = vmlaq_laneq_f64(vmlaq_n_f64(v797, v82, _Q8.f64[0]), _Q2, _Q8, 1);
  v791 = vmlaq_laneq_f64(vmlaq_n_f64(v790, v83, _Q8.f64[0]), _Q3, _Q8, 1);
  v784 = vmlaq_laneq_f64(vmlaq_n_f64(v783, v84, _Q8.f64[0]), v40, _Q8, 1);
  v777 = vmlaq_laneq_f64(vmlaq_n_f64(v776, v85, _Q8.f64[0]), v41, _Q8, 1);
  _Q31.f64[0] = _Q0.f64[1];
  __asm { FMLA            D11, D31, V19.D[1] }
  v769 = vmlaq_laneq_f64(vmlaq_n_f64(v768, v78, v66.f64[0]), _Q16, v66, 1);
  v762 = vmlaq_laneq_f64(vmlaq_n_f64(v761, v80, v66.f64[0]), _Q0, v66, 1);
  v755 = vmlaq_laneq_f64(vmlaq_n_f64(v754, v81, v66.f64[0]), _Q1, v66, 1);
  v748 = vmlaq_laneq_f64(vmlaq_n_f64(v747, v82, v66.f64[0]), _Q2, v66, 1);
  v741 = vmlaq_laneq_f64(vmlaq_n_f64(v740, v83, v66.f64[0]), _Q3, v66, 1);
  v734 = vmlaq_laneq_f64(vmlaq_n_f64(v733, v84, v66.f64[0]), v40, v66, 1);
  v727 = vmlaq_laneq_f64(vmlaq_n_f64(v726, v85, v66.f64[0]), v41, v66, 1);
  _Q31.f64[0] = *(float64_t *)(a1 + 536);
  __asm { FMLA            D8, D31, V19.D[1] }
  v719 = vmlaq_laneq_f64(vmlaq_n_f64(v718, v78, v67.f64[0]), _Q16, v67, 1);
  v712 = vmlaq_laneq_f64(vmlaq_n_f64(v711, v80, v67.f64[0]), _Q0, v67, 1);
  v705 = vmlaq_laneq_f64(vmlaq_n_f64(v704, v81, v67.f64[0]), _Q1, v67, 1);
  v698 = vmlaq_laneq_f64(vmlaq_n_f64(v697, v82, v67.f64[0]), _Q2, v67, 1);
  v691 = vmlaq_laneq_f64(vmlaq_n_f64(v690, v83, v67.f64[0]), _Q3, v67, 1);
  v684 = vmlaq_laneq_f64(vmlaq_n_f64(v683, v84, v67.f64[0]), v40, v67, 1);
  v670 = vmlaq_laneq_f64(vmlaq_n_f64(v669, v85, v67.f64[0]), v41, v67, 1);
  _Q31.f64[0] = _Q1.f64[1];
  __asm { FMLA            D8, D31, V19.D[1] }
  v662 = vmlaq_laneq_f64(vmlaq_n_f64(v661, v78, _Q30.f64[0]), _Q16, _Q30, 1);
  v655 = vmlaq_laneq_f64(vmlaq_n_f64(v654, v80, _Q30.f64[0]), _Q0, _Q30, 1);
  v648 = vmlaq_laneq_f64(vmlaq_n_f64(v647, v81, _Q30.f64[0]), _Q1, _Q30, 1);
  v641 = vmlaq_laneq_f64(vmlaq_n_f64(v640, v82, _Q30.f64[0]), _Q2, _Q30, 1);
  v634 = vmlaq_laneq_f64(vmlaq_n_f64(v633, v83, _Q30.f64[0]), _Q3, _Q30, 1);
  v627 = vmlaq_laneq_f64(vmlaq_n_f64(v626, v84, _Q30.f64[0]), v40, _Q30, 1);
  v620 = vmlaq_laneq_f64(vmlaq_n_f64(v619, v85, _Q30.f64[0]), v41, _Q30, 1);
  _Q30.f64[0] = *(float64_t *)(a1 + 776);
  __asm { FMLA            D31, D30, V19.D[1] }
  v612 = vmlaq_laneq_f64(vmlaq_n_f64(v611, v78, _Q29.f64[0]), _Q16, _Q29, 1);
  v605 = vmlaq_laneq_f64(vmlaq_n_f64(v604, v80, _Q29.f64[0]), _Q0, _Q29, 1);
  v598 = vmlaq_laneq_f64(vmlaq_n_f64(v597, v81, _Q29.f64[0]), _Q1, _Q29, 1);
  v591 = vmlaq_laneq_f64(vmlaq_n_f64(v590, v82, _Q29.f64[0]), _Q2, _Q29, 1);
  v584 = vmlaq_laneq_f64(vmlaq_n_f64(v583, v83, _Q29.f64[0]), _Q3, _Q29, 1);
  v577 = vmlaq_laneq_f64(vmlaq_n_f64(v576, v84, _Q29.f64[0]), v40, _Q29, 1);
  v570 = vmlaq_laneq_f64(vmlaq_n_f64(v569, v85, _Q29.f64[0]), v41, _Q29, 1);
  _Q29.f64[0] = _Q2.f64[1];
  __asm { FMLA            D30, D29, V19.D[1] }
  v562 = vmlaq_laneq_f64(vmlaq_n_f64(v561, v78, _Q28.f64[0]), _Q16, _Q28, 1);
  v555 = vmlaq_laneq_f64(vmlaq_n_f64(v554, v80, _Q28.f64[0]), _Q0, _Q28, 1);
  v548 = vmlaq_laneq_f64(vmlaq_n_f64(v547, v81, _Q28.f64[0]), _Q1, _Q28, 1);
  v541 = vmlaq_laneq_f64(vmlaq_n_f64(v540, v82, _Q28.f64[0]), _Q2, _Q28, 1);
  v534 = vmlaq_laneq_f64(vmlaq_n_f64(v533, v83, _Q28.f64[0]), _Q3, _Q28, 1);
  v527 = vmlaq_laneq_f64(vmlaq_n_f64(v526, v84, _Q28.f64[0]), v40, _Q28, 1);
  v520 = vmlaq_laneq_f64(vmlaq_n_f64(v519, v85, _Q28.f64[0]), v41, _Q28, 1);
  _Q28.f64[0] = *(float64_t *)(a1 + 1016);
  __asm { FMLA            D29, D28, V19.D[1] }
  v512 = vmlaq_laneq_f64(vmlaq_n_f64(v511, v78, _Q27.f64[0]), _Q16, _Q27, 1);
  v505 = vmlaq_laneq_f64(vmlaq_n_f64(v504, v80, _Q27.f64[0]), _Q0, _Q27, 1);
  v498 = vmlaq_laneq_f64(vmlaq_n_f64(v497, v81, _Q27.f64[0]), _Q1, _Q27, 1);
  v491 = vmlaq_laneq_f64(vmlaq_n_f64(v490, v82, _Q27.f64[0]), _Q2, _Q27, 1);
  v484 = vmlaq_laneq_f64(vmlaq_n_f64(v483, v83, _Q27.f64[0]), _Q3, _Q27, 1);
  v477 = vmlaq_laneq_f64(vmlaq_n_f64(v476, v84, _Q27.f64[0]), v40, _Q27, 1);
  v470 = vmlaq_laneq_f64(vmlaq_n_f64(v469, v85, _Q27.f64[0]), v41, _Q27, 1);
  _Q27.f64[0] = _Q3.f64[1];
  __asm { FMLA            D28, D27, V19.D[1] }
  v462 = vmlaq_laneq_f64(vmlaq_n_f64(v461, v78, _Q26.f64[0]), _Q16, _Q26, 1);
  v455 = vmlaq_laneq_f64(vmlaq_n_f64(v454, v80, _Q26.f64[0]), _Q0, _Q26, 1);
  v448 = vmlaq_laneq_f64(vmlaq_n_f64(v447, v81, _Q26.f64[0]), _Q1, _Q26, 1);
  v441 = vmlaq_laneq_f64(vmlaq_n_f64(v440, v82, _Q26.f64[0]), _Q2, _Q26, 1);
  v434 = vmlaq_laneq_f64(vmlaq_n_f64(v433, v83, _Q26.f64[0]), _Q3, _Q26, 1);
  v427 = vmlaq_laneq_f64(vmlaq_n_f64(v426, v84, _Q26.f64[0]), v40, _Q26, 1);
  v420 = vmlaq_laneq_f64(vmlaq_n_f64(v419, v85, _Q26.f64[0]), v41, _Q26, 1);
  _Q26.f64[0] = *(float64_t *)(a1 + 1256);
  __asm { FMLA            D27, D26, V19.D[1] }
  v412 = vmlaq_laneq_f64(vmlaq_n_f64(v411, v78, _Q25.f64[0]), _Q16, _Q25, 1);
  v405 = vmlaq_laneq_f64(vmlaq_n_f64(v404, v80, _Q25.f64[0]), _Q0, _Q25, 1);
  v398 = vmlaq_laneq_f64(vmlaq_n_f64(v397, v81, _Q25.f64[0]), _Q1, _Q25, 1);
  v391 = vmlaq_laneq_f64(vmlaq_n_f64(v390, v82, _Q25.f64[0]), _Q2, _Q25, 1);
  v384 = vmlaq_laneq_f64(vmlaq_n_f64(v383, v83, _Q25.f64[0]), _Q3, _Q25, 1);
  v377 = vmlaq_laneq_f64(vmlaq_n_f64(v376, v84, _Q25.f64[0]), v40, _Q25, 1);
  v370 = vmlaq_laneq_f64(vmlaq_n_f64(v369, v85, _Q25.f64[0]), v41, _Q25, 1);
  _Q25.f64[0] = v40.f64[1];
  __asm { FMLA            D26, D25, V19.D[1] }
  v362 = vmlaq_laneq_f64(vmlaq_n_f64(v361, v78, _Q24.f64[0]), _Q16, _Q24, 1);
  v355 = vmlaq_laneq_f64(vmlaq_n_f64(v354, v80, _Q24.f64[0]), _Q0, _Q24, 1);
  v348 = vmlaq_laneq_f64(vmlaq_n_f64(v347, v81, _Q24.f64[0]), _Q1, _Q24, 1);
  v341 = vmlaq_laneq_f64(vmlaq_n_f64(v340, v82, _Q24.f64[0]), _Q2, _Q24, 1);
  v334 = vmlaq_laneq_f64(vmlaq_n_f64(v333, v83, _Q24.f64[0]), _Q3, _Q24, 1);
  v327 = vmlaq_laneq_f64(vmlaq_n_f64(v326, v84, _Q24.f64[0]), v40, _Q24, 1);
  v320 = vmlaq_laneq_f64(vmlaq_n_f64(v319, v85, _Q24.f64[0]), v41, _Q24, 1);
  _Q24.f64[0] = *(float64_t *)(a1 + 1496);
  __asm { FMLA            D25, D24, V19.D[1] }
  v312 = vmlaq_laneq_f64(vmlaq_n_f64(v311, v78, _Q6.f64[0]), _Q16, _Q6, 1);
  v305 = vmlaq_laneq_f64(vmlaq_n_f64(v304, v80, _Q6.f64[0]), _Q0, _Q6, 1);
  v298 = vmlaq_laneq_f64(vmlaq_n_f64(v297, v81, _Q6.f64[0]), _Q1, _Q6, 1);
  v291 = vmlaq_laneq_f64(vmlaq_n_f64(v290, v82, _Q6.f64[0]), _Q2, _Q6, 1);
  v284 = vmlaq_laneq_f64(vmlaq_n_f64(v283, v83, _Q6.f64[0]), _Q3, _Q6, 1);
  v277 = vmlaq_laneq_f64(vmlaq_n_f64(v276, v84, _Q6.f64[0]), v40, _Q6, 1);
  v225 = vmlaq_laneq_f64(vmlaq_n_f64(v224, v85, _Q6.f64[0]), v41, _Q6, 1);
  _Q6.f64[0] = v41.f64[1];
  __asm { FMLA            D24, D6, V19.D[1] }
  v269 = vmlaq_laneq_f64(vmlaq_n_f64(v268, v78, _Q19.f64[0]), _Q16, _Q19, 1);
  v255 = vmlaq_laneq_f64(vmlaq_n_f64(v254, v81, _Q19.f64[0]), _Q1, _Q19, 1);
  v262 = vmlaq_laneq_f64(vmlaq_n_f64(v261, v80, _Q19.f64[0]), _Q0, _Q19, 1);
  v219 = vmlaq_laneq_f64(vmlaq_n_f64(v218, v82, _Q19.f64[0]), _Q2, _Q19, 1);
  v213 = vmlaq_laneq_f64(vmlaq_n_f64(v212, v83, _Q19.f64[0]), _Q3, _Q19, 1);
  v195 = vmlaq_laneq_f64(vmlaq_n_f64(v194, v84, _Q19.f64[0]), v40, _Q19, 1);
  v87 = vmlaq_laneq_f64(vmlaq_n_f64(v63, v85, _Q19.f64[0]), v41, _Q19, 1);
  _Q0.f64[0] = *(float64_t *)(a1 + 1736);
  __asm { FMLA            D1, D0, V19.D[1] }
  _Q8 = *(float64x2_t *)(a1 + 304);
  v89 = *(float64x2_t *)(a1 + 424);
  *(_QWORD *)&_Q16.f64[0] = vdupq_laneq_s64((int64x2_t)_Q8, 1).u64[0];
  _Q16.f64[1] = *(float64_t *)(a1 + 432);
  v90 = *(float64x2_t *)(a1 + 544);
  _Q31 = *(float64x2_t *)(a1 + 664);
  *(_QWORD *)&_Q1.f64[0] = vdupq_laneq_s64((int64x2_t)v90, 1).u64[0];
  _Q1.f64[1] = *(float64_t *)(a1 + 672);
  _Q30 = *(float64x2_t *)(a1 + 784);
  _Q29 = *(float64x2_t *)(a1 + 904);
  *(_QWORD *)&_Q2.f64[0] = vdupq_laneq_s64((int64x2_t)_Q30, 1).u64[0];
  _Q2.f64[1] = *(float64_t *)(a1 + 912);
  _Q28 = *(float64x2_t *)(a1 + 1024);
  _Q27 = *(float64x2_t *)(a1 + 1144);
  *(_QWORD *)&_Q3.f64[0] = vdupq_laneq_s64((int64x2_t)_Q28, 1).u64[0];
  _Q3.f64[1] = *(float64_t *)(a1 + 1152);
  _Q25 = *(float64x2_t *)(a1 + 1384);
  _Q26 = *(float64x2_t *)(a1 + 1264);
  *(_QWORD *)&v40.f64[0] = vdupq_laneq_s64((int64x2_t)_Q26, 1).u64[0];
  v40.f64[1] = *(float64_t *)(a1 + 1392);
  _Q7 = *(float64x2_t *)(a1 + 1624);
  _Q24 = *(float64x2_t *)(a1 + 1504);
  *(_QWORD *)&v41.f64[0] = vdupq_laneq_s64((int64x2_t)_Q24, 1).u64[0];
  v41.f64[1] = *(float64_t *)(a1 + 1632);
  _Q11 = *(float64x2_t *)(a1 + 64);
  v101 = *(float64x2_t *)(a1 + 184);
  _Q13 = (float64x2_t)vzip1q_s64((int64x2_t)_Q11, (int64x2_t)v101);
  _Q17 = (float64x2_t)vzip2q_s64((int64x2_t)_Q11, (int64x2_t)v101);
  v678 = vmlaq_laneq_f64(vmlaq_n_f64(v677, _Q13, _Q11.f64[0]), _Q17, _Q11, 1);
  v104 = (float64x2_t)vzip1q_s64((int64x2_t)_Q8, (int64x2_t)v89);
  v201 = vmlaq_laneq_f64(vmlaq_n_f64(v200, v104, _Q11.f64[0]), _Q16, _Q11, 1);
  v105 = (float64x2_t)vzip1q_s64((int64x2_t)v90, (int64x2_t)_Q31);
  v207 = vmlaq_laneq_f64(vmlaq_n_f64(v206, v105, _Q11.f64[0]), _Q1, _Q11, 1);
  v106 = (float64x2_t)vzip1q_s64((int64x2_t)_Q30, (int64x2_t)_Q29);
  v250 = vmlaq_laneq_f64(vmlaq_n_f64(v249, v106, _Q11.f64[0]), _Q2, _Q11, 1);
  v107 = (float64x2_t)vzip1q_s64((int64x2_t)_Q28, (int64x2_t)_Q27);
  v920 = vmlaq_laneq_f64(vmlaq_n_f64(v919, v107, _Q11.f64[0]), _Q3, _Q11, 1);
  v108 = (float64x2_t)vzip1q_s64((int64x2_t)_Q26, (int64x2_t)_Q25);
  v913 = vmlaq_laneq_f64(vmlaq_n_f64(v912, v108, _Q11.f64[0]), v40, _Q11, 1);
  v109 = (float64x2_t)vzip1q_s64((int64x2_t)_Q24, (int64x2_t)_Q7);
  v906 = vmlaq_laneq_f64(vmlaq_n_f64(v905, v109, _Q11.f64[0]), v41, _Q11, 1);
  _Q6 = *(float64x2_t *)(a1 + 1744);
  _Q11.f64[0] = *(float64_t *)(a1 + 72);
  __asm { FMLA            D0, D11, V6.D[1] }
  v898 = vmlaq_laneq_f64(vmlaq_n_f64(v897, _Q13, v101.f64[0]), _Q17, v101, 1);
  v891 = vmlaq_laneq_f64(vmlaq_n_f64(v890, v104, v101.f64[0]), _Q16, v101, 1);
  v884 = vmlaq_laneq_f64(vmlaq_n_f64(v883, v105, v101.f64[0]), _Q1, v101, 1);
  v877 = vmlaq_laneq_f64(vmlaq_n_f64(v876, v106, v101.f64[0]), _Q2, v101, 1);
  v870 = vmlaq_laneq_f64(vmlaq_n_f64(v869, v107, v101.f64[0]), _Q3, v101, 1);
  v863 = vmlaq_laneq_f64(vmlaq_n_f64(v862, v108, v101.f64[0]), v40, v101, 1);
  v244 = vmlaq_laneq_f64(vmlaq_n_f64(v243, v109, v101.f64[0]), v41, v101, 1);
  _Q11.f64[0] = *(float64_t *)(a1 + 192);
  __asm { FMLA            D14, D11, V6.D[1] }
  v238 = vmlaq_laneq_f64(vmlaq_n_f64(v237, _Q13, _Q8.f64[0]), _Q17, _Q8, 1);
  v232 = vmlaq_laneq_f64(vmlaq_n_f64(v231, v104, _Q8.f64[0]), _Q16, _Q8, 1);
  v856 = vmlaq_laneq_f64(vmlaq_n_f64(v855, v105, _Q8.f64[0]), _Q1, _Q8, 1);
  v849 = vmlaq_laneq_f64(vmlaq_n_f64(v848, v106, _Q8.f64[0]), _Q2, _Q8, 1);
  v842 = vmlaq_laneq_f64(vmlaq_n_f64(v841, v107, _Q8.f64[0]), _Q3, _Q8, 1);
  v835 = vmlaq_laneq_f64(vmlaq_n_f64(v834, v108, _Q8.f64[0]), v40, _Q8, 1);
  v828 = vmlaq_laneq_f64(vmlaq_n_f64(v827, v109, _Q8.f64[0]), v41, _Q8, 1);
  _Q8.f64[0] = *(float64_t *)(a1 + 312);
  __asm { FMLA            D0, D8, V6.D[1] }
  v820 = vmlaq_laneq_f64(vmlaq_n_f64(v819, _Q13, v89.f64[0]), _Q17, v89, 1);
  v813 = vmlaq_laneq_f64(vmlaq_n_f64(v812, v104, v89.f64[0]), _Q16, v89, 1);
  v806 = vmlaq_laneq_f64(vmlaq_n_f64(v805, v105, v89.f64[0]), _Q1, v89, 1);
  v799 = vmlaq_laneq_f64(vmlaq_n_f64(v798, v106, v89.f64[0]), _Q2, v89, 1);
  v792 = vmlaq_laneq_f64(vmlaq_n_f64(v791, v107, v89.f64[0]), _Q3, v89, 1);
  v785 = vmlaq_laneq_f64(vmlaq_n_f64(v784, v108, v89.f64[0]), v40, v89, 1);
  v778 = vmlaq_laneq_f64(vmlaq_n_f64(v777, v109, v89.f64[0]), v41, v89, 1);
  _Q8.f64[0] = _Q16.f64[1];
  __asm { FMLA            D0, D8, V6.D[1] }
  v770 = vmlaq_laneq_f64(vmlaq_n_f64(v769, _Q13, v90.f64[0]), _Q17, v90, 1);
  v763 = vmlaq_laneq_f64(vmlaq_n_f64(v762, v104, v90.f64[0]), _Q16, v90, 1);
  v756 = vmlaq_laneq_f64(vmlaq_n_f64(v755, v105, v90.f64[0]), _Q1, v90, 1);
  v749 = vmlaq_laneq_f64(vmlaq_n_f64(v748, v106, v90.f64[0]), _Q2, v90, 1);
  v742 = vmlaq_laneq_f64(vmlaq_n_f64(v741, v107, v90.f64[0]), _Q3, v90, 1);
  v735 = vmlaq_laneq_f64(vmlaq_n_f64(v734, v108, v90.f64[0]), v40, v90, 1);
  v728 = vmlaq_laneq_f64(vmlaq_n_f64(v727, v109, v90.f64[0]), v41, v90, 1);
  _Q8.f64[0] = *(float64_t *)(a1 + 552);
  __asm { FMLA            D0, D8, V6.D[1] }
  v720 = vmlaq_laneq_f64(vmlaq_n_f64(v719, _Q13, _Q31.f64[0]), _Q17, _Q31, 1);
  v713 = vmlaq_laneq_f64(vmlaq_n_f64(v712, v104, _Q31.f64[0]), _Q16, _Q31, 1);
  v706 = vmlaq_laneq_f64(vmlaq_n_f64(v705, v105, _Q31.f64[0]), _Q1, _Q31, 1);
  v699 = vmlaq_laneq_f64(vmlaq_n_f64(v698, v106, _Q31.f64[0]), _Q2, _Q31, 1);
  v692 = vmlaq_laneq_f64(vmlaq_n_f64(v691, v107, _Q31.f64[0]), _Q3, _Q31, 1);
  v685 = vmlaq_laneq_f64(vmlaq_n_f64(v684, v108, _Q31.f64[0]), v40, _Q31, 1);
  v671 = vmlaq_laneq_f64(vmlaq_n_f64(v670, v109, _Q31.f64[0]), v41, _Q31, 1);
  _Q31.f64[0] = _Q1.f64[1];
  __asm { FMLA            D0, D31, V6.D[1] }
  v663 = vmlaq_laneq_f64(vmlaq_n_f64(v662, _Q13, _Q30.f64[0]), _Q17, _Q30, 1);
  v656 = vmlaq_laneq_f64(vmlaq_n_f64(v655, v104, _Q30.f64[0]), _Q16, _Q30, 1);
  v649 = vmlaq_laneq_f64(vmlaq_n_f64(v648, v105, _Q30.f64[0]), _Q1, _Q30, 1);
  v642 = vmlaq_laneq_f64(vmlaq_n_f64(v641, v106, _Q30.f64[0]), _Q2, _Q30, 1);
  v635 = vmlaq_laneq_f64(vmlaq_n_f64(v634, v107, _Q30.f64[0]), _Q3, _Q30, 1);
  v628 = vmlaq_laneq_f64(vmlaq_n_f64(v627, v108, _Q30.f64[0]), v40, _Q30, 1);
  v621 = vmlaq_laneq_f64(vmlaq_n_f64(v620, v109, _Q30.f64[0]), v41, _Q30, 1);
  _Q30.f64[0] = *(float64_t *)(a1 + 792);
  __asm { FMLA            D0, D30, V6.D[1] }
  v613 = vmlaq_laneq_f64(vmlaq_n_f64(v612, _Q13, _Q29.f64[0]), _Q17, _Q29, 1);
  v606 = vmlaq_laneq_f64(vmlaq_n_f64(v605, v104, _Q29.f64[0]), _Q16, _Q29, 1);
  v599 = vmlaq_laneq_f64(vmlaq_n_f64(v598, v105, _Q29.f64[0]), _Q1, _Q29, 1);
  v592 = vmlaq_laneq_f64(vmlaq_n_f64(v591, v106, _Q29.f64[0]), _Q2, _Q29, 1);
  v585 = vmlaq_laneq_f64(vmlaq_n_f64(v584, v107, _Q29.f64[0]), _Q3, _Q29, 1);
  v578 = vmlaq_laneq_f64(vmlaq_n_f64(v577, v108, _Q29.f64[0]), v40, _Q29, 1);
  v571 = vmlaq_laneq_f64(vmlaq_n_f64(v570, v109, _Q29.f64[0]), v41, _Q29, 1);
  _Q29.f64[0] = _Q2.f64[1];
  __asm { FMLA            D0, D29, V6.D[1] }
  v563 = vmlaq_laneq_f64(vmlaq_n_f64(v562, _Q13, _Q28.f64[0]), _Q17, _Q28, 1);
  v556 = vmlaq_laneq_f64(vmlaq_n_f64(v555, v104, _Q28.f64[0]), _Q16, _Q28, 1);
  v549 = vmlaq_laneq_f64(vmlaq_n_f64(v548, v105, _Q28.f64[0]), _Q1, _Q28, 1);
  v542 = vmlaq_laneq_f64(vmlaq_n_f64(v541, v106, _Q28.f64[0]), _Q2, _Q28, 1);
  v535 = vmlaq_laneq_f64(vmlaq_n_f64(v534, v107, _Q28.f64[0]), _Q3, _Q28, 1);
  v528 = vmlaq_laneq_f64(vmlaq_n_f64(v527, v108, _Q28.f64[0]), v40, _Q28, 1);
  v521 = vmlaq_laneq_f64(vmlaq_n_f64(v520, v109, _Q28.f64[0]), v41, _Q28, 1);
  _Q28.f64[0] = *(float64_t *)(a1 + 1032);
  __asm { FMLA            D0, D28, V6.D[1] }
  v513 = vmlaq_laneq_f64(vmlaq_n_f64(v512, _Q13, _Q27.f64[0]), _Q17, _Q27, 1);
  v506 = vmlaq_laneq_f64(vmlaq_n_f64(v505, v104, _Q27.f64[0]), _Q16, _Q27, 1);
  v499 = vmlaq_laneq_f64(vmlaq_n_f64(v498, v105, _Q27.f64[0]), _Q1, _Q27, 1);
  v492 = vmlaq_laneq_f64(vmlaq_n_f64(v491, v106, _Q27.f64[0]), _Q2, _Q27, 1);
  v485 = vmlaq_laneq_f64(vmlaq_n_f64(v484, v107, _Q27.f64[0]), _Q3, _Q27, 1);
  v478 = vmlaq_laneq_f64(vmlaq_n_f64(v477, v108, _Q27.f64[0]), v40, _Q27, 1);
  v471 = vmlaq_laneq_f64(vmlaq_n_f64(v470, v109, _Q27.f64[0]), v41, _Q27, 1);
  _Q27.f64[0] = _Q3.f64[1];
  __asm { FMLA            D0, D27, V6.D[1] }
  v463 = vmlaq_laneq_f64(vmlaq_n_f64(v462, _Q13, _Q26.f64[0]), _Q17, _Q26, 1);
  v456 = vmlaq_laneq_f64(vmlaq_n_f64(v455, v104, _Q26.f64[0]), _Q16, _Q26, 1);
  v449 = vmlaq_laneq_f64(vmlaq_n_f64(v448, v105, _Q26.f64[0]), _Q1, _Q26, 1);
  v442 = vmlaq_laneq_f64(vmlaq_n_f64(v441, v106, _Q26.f64[0]), _Q2, _Q26, 1);
  v435 = vmlaq_laneq_f64(vmlaq_n_f64(v434, v107, _Q26.f64[0]), _Q3, _Q26, 1);
  v428 = vmlaq_laneq_f64(vmlaq_n_f64(v427, v108, _Q26.f64[0]), v40, _Q26, 1);
  v421 = vmlaq_laneq_f64(vmlaq_n_f64(v420, v109, _Q26.f64[0]), v41, _Q26, 1);
  _Q26.f64[0] = *(float64_t *)(a1 + 1272);
  __asm { FMLA            D0, D26, V6.D[1] }
  v413 = vmlaq_laneq_f64(vmlaq_n_f64(v412, _Q13, _Q25.f64[0]), _Q17, _Q25, 1);
  v406 = vmlaq_laneq_f64(vmlaq_n_f64(v405, v104, _Q25.f64[0]), _Q16, _Q25, 1);
  v399 = vmlaq_laneq_f64(vmlaq_n_f64(v398, v105, _Q25.f64[0]), _Q1, _Q25, 1);
  v392 = vmlaq_laneq_f64(vmlaq_n_f64(v391, v106, _Q25.f64[0]), _Q2, _Q25, 1);
  v385 = vmlaq_laneq_f64(vmlaq_n_f64(v384, v107, _Q25.f64[0]), _Q3, _Q25, 1);
  v378 = vmlaq_laneq_f64(vmlaq_n_f64(v377, v108, _Q25.f64[0]), v40, _Q25, 1);
  v371 = vmlaq_laneq_f64(vmlaq_n_f64(v370, v109, _Q25.f64[0]), v41, _Q25, 1);
  _Q25.f64[0] = v40.f64[1];
  __asm { FMLA            D0, D25, V6.D[1] }
  v363 = vmlaq_laneq_f64(vmlaq_n_f64(v362, _Q13, _Q24.f64[0]), _Q17, _Q24, 1);
  v356 = vmlaq_laneq_f64(vmlaq_n_f64(v355, v104, _Q24.f64[0]), _Q16, _Q24, 1);
  v349 = vmlaq_laneq_f64(vmlaq_n_f64(v348, v105, _Q24.f64[0]), _Q1, _Q24, 1);
  v342 = vmlaq_laneq_f64(vmlaq_n_f64(v341, v106, _Q24.f64[0]), _Q2, _Q24, 1);
  v335 = vmlaq_laneq_f64(vmlaq_n_f64(v334, v107, _Q24.f64[0]), _Q3, _Q24, 1);
  v328 = vmlaq_laneq_f64(vmlaq_n_f64(v327, v108, _Q24.f64[0]), v40, _Q24, 1);
  v321 = vmlaq_laneq_f64(vmlaq_n_f64(v320, v109, _Q24.f64[0]), v41, _Q24, 1);
  _Q24.f64[0] = *(float64_t *)(a1 + 1512);
  __asm { FMLA            D0, D24, V6.D[1] }
  v313 = vmlaq_laneq_f64(vmlaq_n_f64(v312, _Q13, _Q7.f64[0]), _Q17, _Q7, 1);
  v306 = vmlaq_laneq_f64(vmlaq_n_f64(v305, v104, _Q7.f64[0]), _Q16, _Q7, 1);
  v299 = vmlaq_laneq_f64(vmlaq_n_f64(v298, v105, _Q7.f64[0]), _Q1, _Q7, 1);
  v292 = vmlaq_laneq_f64(vmlaq_n_f64(v291, v106, _Q7.f64[0]), _Q2, _Q7, 1);
  v285 = vmlaq_laneq_f64(vmlaq_n_f64(v284, v107, _Q7.f64[0]), _Q3, _Q7, 1);
  v278 = vmlaq_laneq_f64(vmlaq_n_f64(v277, v108, _Q7.f64[0]), v40, _Q7, 1);
  v226 = vmlaq_laneq_f64(vmlaq_n_f64(v225, v109, _Q7.f64[0]), v41, _Q7, 1);
  _Q7.f64[0] = v41.f64[1];
  __asm { FMLA            D0, D7, V6.D[1] }
  v270 = vmlaq_laneq_f64(vmlaq_n_f64(v269, _Q13, _Q6.f64[0]), _Q17, _Q6, 1);
  v263 = vmlaq_laneq_f64(vmlaq_n_f64(v262, v104, _Q6.f64[0]), _Q16, _Q6, 1);
  v256 = vmlaq_laneq_f64(vmlaq_n_f64(v255, v105, _Q6.f64[0]), _Q1, _Q6, 1);
  v220 = vmlaq_laneq_f64(vmlaq_n_f64(v219, v106, _Q6.f64[0]), _Q2, _Q6, 1);
  v214 = vmlaq_laneq_f64(vmlaq_n_f64(v213, v107, _Q6.f64[0]), _Q3, _Q6, 1);
  v196 = vmlaq_laneq_f64(vmlaq_n_f64(v195, v108, _Q6.f64[0]), v40, _Q6, 1);
  v111 = vmlaq_laneq_f64(vmlaq_n_f64(v87, v109, _Q6.f64[0]), v41, _Q6, 1);
  _Q8 = *(float64x2_t *)(a1 + 320);
  _Q9 = *(float64x2_t *)(a1 + 440);
  *(_QWORD *)&_Q0.f64[0] = vdupq_laneq_s64((int64x2_t)_Q8, 1).u64[0];
  _Q0.f64[1] = *(float64_t *)(a1 + 448);
  v114 = *(float64x2_t *)(a1 + 560);
  _Q31 = *(float64x2_t *)(a1 + 680);
  *(_QWORD *)&_Q1.f64[0] = vdupq_laneq_s64((int64x2_t)v114, 1).u64[0];
  _Q1.f64[1] = *(float64_t *)(a1 + 688);
  _Q30 = *(float64x2_t *)(a1 + 800);
  _Q29 = *(float64x2_t *)(a1 + 920);
  *(_QWORD *)&_Q2.f64[0] = vdupq_laneq_s64((int64x2_t)_Q30, 1).u64[0];
  _Q2.f64[1] = *(float64_t *)(a1 + 928);
  _Q28 = *(float64x2_t *)(a1 + 1040);
  _Q27 = *(float64x2_t *)(a1 + 1160);
  *(_QWORD *)&_Q3.f64[0] = vdupq_laneq_s64((int64x2_t)_Q28, 1).u64[0];
  _Q3.f64[1] = *(float64_t *)(a1 + 1168);
  _Q26 = *(float64x2_t *)(a1 + 1280);
  _Q25 = *(float64x2_t *)(a1 + 1400);
  *(_QWORD *)&v40.f64[0] = vdupq_laneq_s64((int64x2_t)_Q26, 1).u64[0];
  v40.f64[1] = *(float64_t *)(a1 + 1408);
  _Q24 = *(float64x2_t *)(a1 + 1520);
  _Q7 = *(float64x2_t *)(a1 + 1640);
  *(_QWORD *)&v41.f64[0] = vdupq_laneq_s64((int64x2_t)_Q24, 1).u64[0];
  v41.f64[1] = *(float64_t *)(a1 + 1648);
  _Q16.f64[0] = *(float64_t *)(a1 + 1752);
  __asm { FMLA            D17, D16, V6.D[1] }
  _Q11 = *(float64x2_t *)(a1 + 80);
  v125 = *(float64x2_t *)(a1 + 200);
  v126 = (float64x2_t)vzip1q_s64((int64x2_t)_Q11, (int64x2_t)v125);
  v127 = (float64x2_t)vzip2q_s64((int64x2_t)_Q11, (int64x2_t)v125);
  v679 = vmlaq_laneq_f64(vmlaq_n_f64(v678, v126, _Q11.f64[0]), v127, _Q11, 1);
  v128 = (float64x2_t)vzip1q_s64((int64x2_t)_Q8, (int64x2_t)_Q9);
  v202 = vmlaq_laneq_f64(vmlaq_n_f64(v201, v128, _Q11.f64[0]), _Q0, _Q11, 1);
  v129 = (float64x2_t)vzip1q_s64((int64x2_t)v114, (int64x2_t)_Q31);
  v208 = vmlaq_laneq_f64(vmlaq_n_f64(v207, v129, _Q11.f64[0]), _Q1, _Q11, 1);
  v130 = (float64x2_t)vzip1q_s64((int64x2_t)_Q30, (int64x2_t)_Q29);
  v251 = vmlaq_laneq_f64(vmlaq_n_f64(v250, v130, _Q11.f64[0]), _Q2, _Q11, 1);
  v131 = (float64x2_t)vzip1q_s64((int64x2_t)_Q28, (int64x2_t)_Q27);
  v921 = vmlaq_laneq_f64(vmlaq_n_f64(v920, v131, _Q11.f64[0]), _Q3, _Q11, 1);
  v132 = (float64x2_t)vzip1q_s64((int64x2_t)_Q26, (int64x2_t)_Q25);
  v914 = vmlaq_laneq_f64(vmlaq_n_f64(v913, v132, _Q11.f64[0]), v40, _Q11, 1);
  v133 = (float64x2_t)vzip1q_s64((int64x2_t)_Q24, (int64x2_t)_Q7);
  v907 = vmlaq_laneq_f64(vmlaq_n_f64(v906, v133, _Q11.f64[0]), v41, _Q11, 1);
  _Q19 = *(float64x2_t *)(a1 + 1760);
  _Q11.f64[0] = *(float64_t *)(a1 + 88);
  __asm { FMLA            D13, D11, V19.D[1] }
  v899 = vmlaq_laneq_f64(vmlaq_n_f64(v898, v126, v125.f64[0]), v127, v125, 1);
  v892 = vmlaq_laneq_f64(vmlaq_n_f64(v891, v128, v125.f64[0]), _Q0, v125, 1);
  v885 = vmlaq_laneq_f64(vmlaq_n_f64(v884, v129, v125.f64[0]), _Q1, v125, 1);
  v878 = vmlaq_laneq_f64(vmlaq_n_f64(v877, v130, v125.f64[0]), _Q2, v125, 1);
  v871 = vmlaq_laneq_f64(vmlaq_n_f64(v870, v131, v125.f64[0]), _Q3, v125, 1);
  v864 = vmlaq_laneq_f64(vmlaq_n_f64(v863, v132, v125.f64[0]), v40, v125, 1);
  v245 = vmlaq_laneq_f64(vmlaq_n_f64(v244, v133, v125.f64[0]), v41, v125, 1);
  _Q11.f64[0] = *(float64_t *)(a1 + 208);
  __asm { FMLA            D14, D11, V19.D[1] }
  v239 = vmlaq_laneq_f64(vmlaq_n_f64(v238, v126, _Q8.f64[0]), v127, _Q8, 1);
  v233 = vmlaq_laneq_f64(vmlaq_n_f64(v232, v128, _Q8.f64[0]), _Q0, _Q8, 1);
  v857 = vmlaq_laneq_f64(vmlaq_n_f64(v856, v129, _Q8.f64[0]), _Q1, _Q8, 1);
  v850 = vmlaq_laneq_f64(vmlaq_n_f64(v849, v130, _Q8.f64[0]), _Q2, _Q8, 1);
  v843 = vmlaq_laneq_f64(vmlaq_n_f64(v842, v131, _Q8.f64[0]), _Q3, _Q8, 1);
  v836 = vmlaq_laneq_f64(vmlaq_n_f64(v835, v132, _Q8.f64[0]), v40, _Q8, 1);
  v829 = vmlaq_laneq_f64(vmlaq_n_f64(v828, v133, _Q8.f64[0]), v41, _Q8, 1);
  _Q8.f64[0] = *(float64_t *)(a1 + 328);
  __asm { FMLA            D11, D8, V19.D[1] }
  v821 = vmlaq_laneq_f64(vmlaq_n_f64(v820, v126, _Q9.f64[0]), v127, _Q9, 1);
  v814 = vmlaq_laneq_f64(vmlaq_n_f64(v813, v128, _Q9.f64[0]), _Q0, _Q9, 1);
  v807 = vmlaq_laneq_f64(vmlaq_n_f64(v806, v129, _Q9.f64[0]), _Q1, _Q9, 1);
  v800 = vmlaq_laneq_f64(vmlaq_n_f64(v799, v130, _Q9.f64[0]), _Q2, _Q9, 1);
  v793 = vmlaq_laneq_f64(vmlaq_n_f64(v792, v131, _Q9.f64[0]), _Q3, _Q9, 1);
  v786 = vmlaq_laneq_f64(vmlaq_n_f64(v785, v132, _Q9.f64[0]), v40, _Q9, 1);
  v779 = vmlaq_laneq_f64(vmlaq_n_f64(v778, v133, _Q9.f64[0]), v41, _Q9, 1);
  _Q8.f64[0] = _Q0.f64[1];
  __asm { FMLA            D11, D8, V19.D[1] }
  v771 = vmlaq_laneq_f64(vmlaq_n_f64(v770, v126, v114.f64[0]), v127, v114, 1);
  v764 = vmlaq_laneq_f64(vmlaq_n_f64(v763, v128, v114.f64[0]), _Q0, v114, 1);
  v757 = vmlaq_laneq_f64(vmlaq_n_f64(v756, v129, v114.f64[0]), _Q1, v114, 1);
  v750 = vmlaq_laneq_f64(vmlaq_n_f64(v749, v130, v114.f64[0]), _Q2, v114, 1);
  v743 = vmlaq_laneq_f64(vmlaq_n_f64(v742, v131, v114.f64[0]), _Q3, v114, 1);
  v736 = vmlaq_laneq_f64(vmlaq_n_f64(v735, v132, v114.f64[0]), v40, v114, 1);
  v729 = vmlaq_laneq_f64(vmlaq_n_f64(v728, v133, v114.f64[0]), v41, v114, 1);
  _Q8.f64[0] = *(float64_t *)(a1 + 568);
  __asm { FMLA            D9, D8, V19.D[1] }
  v721 = vmlaq_laneq_f64(vmlaq_n_f64(v720, v126, _Q31.f64[0]), v127, _Q31, 1);
  v714 = vmlaq_laneq_f64(vmlaq_n_f64(v713, v128, _Q31.f64[0]), _Q0, _Q31, 1);
  v707 = vmlaq_laneq_f64(vmlaq_n_f64(v706, v129, _Q31.f64[0]), _Q1, _Q31, 1);
  v700 = vmlaq_laneq_f64(vmlaq_n_f64(v699, v130, _Q31.f64[0]), _Q2, _Q31, 1);
  v693 = vmlaq_laneq_f64(vmlaq_n_f64(v692, v131, _Q31.f64[0]), _Q3, _Q31, 1);
  v686 = vmlaq_laneq_f64(vmlaq_n_f64(v685, v132, _Q31.f64[0]), v40, _Q31, 1);
  v672 = vmlaq_laneq_f64(vmlaq_n_f64(v671, v133, _Q31.f64[0]), v41, _Q31, 1);
  _Q31.f64[0] = _Q1.f64[1];
  __asm { FMLA            D8, D31, V19.D[1] }
  v664 = vmlaq_laneq_f64(vmlaq_n_f64(v663, v126, _Q30.f64[0]), v127, _Q30, 1);
  v657 = vmlaq_laneq_f64(vmlaq_n_f64(v656, v128, _Q30.f64[0]), _Q0, _Q30, 1);
  v650 = vmlaq_laneq_f64(vmlaq_n_f64(v649, v129, _Q30.f64[0]), _Q1, _Q30, 1);
  v643 = vmlaq_laneq_f64(vmlaq_n_f64(v642, v130, _Q30.f64[0]), _Q2, _Q30, 1);
  v636 = vmlaq_laneq_f64(vmlaq_n_f64(v635, v131, _Q30.f64[0]), _Q3, _Q30, 1);
  v629 = vmlaq_laneq_f64(vmlaq_n_f64(v628, v132, _Q30.f64[0]), v40, _Q30, 1);
  v622 = vmlaq_laneq_f64(vmlaq_n_f64(v621, v133, _Q30.f64[0]), v41, _Q30, 1);
  _Q30.f64[0] = *(float64_t *)(a1 + 808);
  __asm { FMLA            D31, D30, V19.D[1] }
  v614 = vmlaq_laneq_f64(vmlaq_n_f64(v613, v126, _Q29.f64[0]), v127, _Q29, 1);
  v607 = vmlaq_laneq_f64(vmlaq_n_f64(v606, v128, _Q29.f64[0]), _Q0, _Q29, 1);
  v600 = vmlaq_laneq_f64(vmlaq_n_f64(v599, v129, _Q29.f64[0]), _Q1, _Q29, 1);
  v593 = vmlaq_laneq_f64(vmlaq_n_f64(v592, v130, _Q29.f64[0]), _Q2, _Q29, 1);
  v586 = vmlaq_laneq_f64(vmlaq_n_f64(v585, v131, _Q29.f64[0]), _Q3, _Q29, 1);
  v579 = vmlaq_laneq_f64(vmlaq_n_f64(v578, v132, _Q29.f64[0]), v40, _Q29, 1);
  v572 = vmlaq_laneq_f64(vmlaq_n_f64(v571, v133, _Q29.f64[0]), v41, _Q29, 1);
  _Q29.f64[0] = _Q2.f64[1];
  __asm { FMLA            D30, D29, V19.D[1] }
  v564 = vmlaq_laneq_f64(vmlaq_n_f64(v563, v126, _Q28.f64[0]), v127, _Q28, 1);
  v557 = vmlaq_laneq_f64(vmlaq_n_f64(v556, v128, _Q28.f64[0]), _Q0, _Q28, 1);
  v550 = vmlaq_laneq_f64(vmlaq_n_f64(v549, v129, _Q28.f64[0]), _Q1, _Q28, 1);
  v543 = vmlaq_laneq_f64(vmlaq_n_f64(v542, v130, _Q28.f64[0]), _Q2, _Q28, 1);
  v536 = vmlaq_laneq_f64(vmlaq_n_f64(v535, v131, _Q28.f64[0]), _Q3, _Q28, 1);
  v529 = vmlaq_laneq_f64(vmlaq_n_f64(v528, v132, _Q28.f64[0]), v40, _Q28, 1);
  v522 = vmlaq_laneq_f64(vmlaq_n_f64(v521, v133, _Q28.f64[0]), v41, _Q28, 1);
  _Q28.f64[0] = *(float64_t *)(a1 + 1048);
  __asm { FMLA            D29, D28, V19.D[1] }
  v514 = vmlaq_laneq_f64(vmlaq_n_f64(v513, v126, _Q27.f64[0]), v127, _Q27, 1);
  v507 = vmlaq_laneq_f64(vmlaq_n_f64(v506, v128, _Q27.f64[0]), _Q0, _Q27, 1);
  v500 = vmlaq_laneq_f64(vmlaq_n_f64(v499, v129, _Q27.f64[0]), _Q1, _Q27, 1);
  v493 = vmlaq_laneq_f64(vmlaq_n_f64(v492, v130, _Q27.f64[0]), _Q2, _Q27, 1);
  v486 = vmlaq_laneq_f64(vmlaq_n_f64(v485, v131, _Q27.f64[0]), _Q3, _Q27, 1);
  v479 = vmlaq_laneq_f64(vmlaq_n_f64(v478, v132, _Q27.f64[0]), v40, _Q27, 1);
  v472 = vmlaq_laneq_f64(vmlaq_n_f64(v471, v133, _Q27.f64[0]), v41, _Q27, 1);
  _Q27.f64[0] = _Q3.f64[1];
  __asm { FMLA            D28, D27, V19.D[1] }
  v464 = vmlaq_laneq_f64(vmlaq_n_f64(v463, v126, _Q26.f64[0]), v127, _Q26, 1);
  v457 = vmlaq_laneq_f64(vmlaq_n_f64(v456, v128, _Q26.f64[0]), _Q0, _Q26, 1);
  v450 = vmlaq_laneq_f64(vmlaq_n_f64(v449, v129, _Q26.f64[0]), _Q1, _Q26, 1);
  v443 = vmlaq_laneq_f64(vmlaq_n_f64(v442, v130, _Q26.f64[0]), _Q2, _Q26, 1);
  v436 = vmlaq_laneq_f64(vmlaq_n_f64(v435, v131, _Q26.f64[0]), _Q3, _Q26, 1);
  v429 = vmlaq_laneq_f64(vmlaq_n_f64(v428, v132, _Q26.f64[0]), v40, _Q26, 1);
  v422 = vmlaq_laneq_f64(vmlaq_n_f64(v421, v133, _Q26.f64[0]), v41, _Q26, 1);
  _Q26.f64[0] = *(float64_t *)(a1 + 1288);
  __asm { FMLA            D27, D26, V19.D[1] }
  v414 = vmlaq_laneq_f64(vmlaq_n_f64(v413, v126, _Q25.f64[0]), v127, _Q25, 1);
  v407 = vmlaq_laneq_f64(vmlaq_n_f64(v406, v128, _Q25.f64[0]), _Q0, _Q25, 1);
  v400 = vmlaq_laneq_f64(vmlaq_n_f64(v399, v129, _Q25.f64[0]), _Q1, _Q25, 1);
  v393 = vmlaq_laneq_f64(vmlaq_n_f64(v392, v130, _Q25.f64[0]), _Q2, _Q25, 1);
  v386 = vmlaq_laneq_f64(vmlaq_n_f64(v385, v131, _Q25.f64[0]), _Q3, _Q25, 1);
  v379 = vmlaq_laneq_f64(vmlaq_n_f64(v378, v132, _Q25.f64[0]), v40, _Q25, 1);
  v372 = vmlaq_laneq_f64(vmlaq_n_f64(v371, v133, _Q25.f64[0]), v41, _Q25, 1);
  _Q25.f64[0] = v40.f64[1];
  __asm { FMLA            D26, D25, V19.D[1] }
  v364 = vmlaq_laneq_f64(vmlaq_n_f64(v363, v126, _Q24.f64[0]), v127, _Q24, 1);
  v357 = vmlaq_laneq_f64(vmlaq_n_f64(v356, v128, _Q24.f64[0]), _Q0, _Q24, 1);
  v350 = vmlaq_laneq_f64(vmlaq_n_f64(v349, v129, _Q24.f64[0]), _Q1, _Q24, 1);
  v343 = vmlaq_laneq_f64(vmlaq_n_f64(v342, v130, _Q24.f64[0]), _Q2, _Q24, 1);
  v336 = vmlaq_laneq_f64(vmlaq_n_f64(v335, v131, _Q24.f64[0]), _Q3, _Q24, 1);
  v329 = vmlaq_laneq_f64(vmlaq_n_f64(v328, v132, _Q24.f64[0]), v40, _Q24, 1);
  v322 = vmlaq_laneq_f64(vmlaq_n_f64(v321, v133, _Q24.f64[0]), v41, _Q24, 1);
  _Q24.f64[0] = *(float64_t *)(a1 + 1528);
  __asm { FMLA            D25, D24, V19.D[1] }
  v314 = vmlaq_laneq_f64(vmlaq_n_f64(v313, v126, _Q7.f64[0]), v127, _Q7, 1);
  v307 = vmlaq_laneq_f64(vmlaq_n_f64(v306, v128, _Q7.f64[0]), _Q0, _Q7, 1);
  v300 = vmlaq_laneq_f64(vmlaq_n_f64(v299, v129, _Q7.f64[0]), _Q1, _Q7, 1);
  v293 = vmlaq_laneq_f64(vmlaq_n_f64(v292, v130, _Q7.f64[0]), _Q2, _Q7, 1);
  v286 = vmlaq_laneq_f64(vmlaq_n_f64(v285, v131, _Q7.f64[0]), _Q3, _Q7, 1);
  v279 = vmlaq_laneq_f64(vmlaq_n_f64(v278, v132, _Q7.f64[0]), v40, _Q7, 1);
  v227 = vmlaq_laneq_f64(vmlaq_n_f64(v226, v133, _Q7.f64[0]), v41, _Q7, 1);
  _Q7.f64[0] = v41.f64[1];
  __asm { FMLA            D24, D7, V19.D[1] }
  v271 = vmlaq_laneq_f64(vmlaq_n_f64(v270, v126, _Q19.f64[0]), v127, _Q19, 1);
  v257 = vmlaq_laneq_f64(vmlaq_n_f64(v256, v129, _Q19.f64[0]), _Q1, _Q19, 1);
  v264 = vmlaq_laneq_f64(vmlaq_n_f64(v263, v128, _Q19.f64[0]), _Q0, _Q19, 1);
  v221 = vmlaq_laneq_f64(vmlaq_n_f64(v220, v130, _Q19.f64[0]), _Q2, _Q19, 1);
  v215 = vmlaq_laneq_f64(vmlaq_n_f64(v214, v131, _Q19.f64[0]), _Q3, _Q19, 1);
  v197 = vmlaq_laneq_f64(vmlaq_n_f64(v196, v132, _Q19.f64[0]), v40, _Q19, 1);
  v192 = vmlaq_laneq_f64(vmlaq_n_f64(v111, v133, _Q19.f64[0]), v41, _Q19, 1);
  _Q0.f64[0] = *(float64_t *)(a1 + 1768);
  __asm { FMLA            D1, D0, V19.D[1] }
  _Q31 = *(float64x2_t *)(a1 + 336);
  *(_QWORD *)&_Q7.f64[0] = vdupq_laneq_s64((int64x2_t)_Q31, 1).u64[0];
  v136 = *(float64x2_t *)(a1 + 456);
  _Q7.f64[1] = *(float64_t *)(a1 + 464);
  v137 = *(float64x2_t *)(a1 + 576);
  *(_QWORD *)&_Q1.f64[0] = vdupq_laneq_s64((int64x2_t)v137, 1).u64[0];
  v138 = *(float64x2_t *)(a1 + 696);
  _Q1.f64[1] = *(float64_t *)(a1 + 704);
  _Q30 = *(float64x2_t *)(a1 + 816);
  *(_QWORD *)&_Q2.f64[0] = vdupq_laneq_s64((int64x2_t)_Q30, 1).u64[0];
  _Q29 = *(float64x2_t *)(a1 + 936);
  _Q2.f64[1] = *(float64_t *)(a1 + 944);
  _Q28 = *(float64x2_t *)(a1 + 1056);
  *(_QWORD *)&_Q3.f64[0] = vdupq_laneq_s64((int64x2_t)_Q28, 1).u64[0];
  _Q27 = *(float64x2_t *)(a1 + 1176);
  _Q3.f64[1] = *(float64_t *)(a1 + 1184);
  _Q26 = *(float64x2_t *)(a1 + 1296);
  *(_QWORD *)&v40.f64[0] = vdupq_laneq_s64((int64x2_t)_Q26, 1).u64[0];
  _Q25 = *(float64x2_t *)(a1 + 1416);
  v40.f64[1] = *(float64_t *)(a1 + 1424);
  _Q24 = *(float64x2_t *)(a1 + 1536);
  *(_QWORD *)&v41.f64[0] = vdupq_laneq_s64((int64x2_t)_Q24, 1).u64[0];
  _Q6 = *(float64x2_t *)(a1 + 1656);
  v41.f64[1] = *(float64_t *)(a1 + 1664);
  _Q11 = *(float64x2_t *)(a1 + 96);
  v148 = *(float64x2_t *)(a1 + 216);
  v149 = (float64x2_t)vzip1q_s64((int64x2_t)_Q11, (int64x2_t)v148);
  v150 = (float64x2_t)vzip2q_s64((int64x2_t)_Q11, (int64x2_t)v148);
  v680 = vmlaq_laneq_f64(vmlaq_n_f64(v679, v149, _Q11.f64[0]), v150, _Q11, 1);
  v151 = (float64x2_t)vzip1q_s64((int64x2_t)_Q31, (int64x2_t)v136);
  v203 = vmlaq_laneq_f64(vmlaq_n_f64(v202, v151, _Q11.f64[0]), _Q7, _Q11, 1);
  v152 = (float64x2_t)vzip1q_s64((int64x2_t)v137, (int64x2_t)v138);
  v209 = vmlaq_laneq_f64(vmlaq_n_f64(v208, v152, _Q11.f64[0]), _Q1, _Q11, 1);
  v153 = (float64x2_t)vzip1q_s64((int64x2_t)_Q30, (int64x2_t)_Q29);
  v154 = vmlaq_laneq_f64(vmlaq_n_f64(v251, v153, _Q11.f64[0]), _Q2, _Q11, 1);
  v155 = (float64x2_t)vzip1q_s64((int64x2_t)_Q28, (int64x2_t)_Q27);
  v922 = vmlaq_laneq_f64(vmlaq_n_f64(v921, v155, _Q11.f64[0]), _Q3, _Q11, 1);
  v156 = (float64x2_t)vzip1q_s64((int64x2_t)_Q26, (int64x2_t)_Q25);
  v915 = vmlaq_laneq_f64(vmlaq_n_f64(v914, v156, _Q11.f64[0]), v40, _Q11, 1);
  v157 = (float64x2_t)vzip1q_s64((int64x2_t)_Q24, (int64x2_t)_Q6);
  v908 = vmlaq_laneq_f64(vmlaq_n_f64(v907, v157, _Q11.f64[0]), v41, _Q11, 1);
  _Q19 = *(float64x2_t *)(a1 + 1776);
  _Q11.f64[0] = *(float64_t *)(a1 + 104);
  __asm { FMLA            D0, D11, V19.D[1] }
  v900 = vmlaq_laneq_f64(vmlaq_n_f64(v899, v149, v148.f64[0]), v150, v148, 1);
  v893 = vmlaq_laneq_f64(vmlaq_n_f64(v892, v151, v148.f64[0]), _Q7, v148, 1);
  v886 = vmlaq_laneq_f64(vmlaq_n_f64(v885, v152, v148.f64[0]), _Q1, v148, 1);
  v879 = vmlaq_laneq_f64(vmlaq_n_f64(v878, v153, v148.f64[0]), _Q2, v148, 1);
  v872 = vmlaq_laneq_f64(vmlaq_n_f64(v871, v155, v148.f64[0]), _Q3, v148, 1);
  v865 = vmlaq_laneq_f64(vmlaq_n_f64(v864, v156, v148.f64[0]), v40, v148, 1);
  v246 = vmlaq_laneq_f64(vmlaq_n_f64(v245, v157, v148.f64[0]), v41, v148, 1);
  _Q11.f64[0] = *(float64_t *)(a1 + 224);
  __asm { FMLA            D14, D11, V19.D[1] }
  v240 = vmlaq_laneq_f64(vmlaq_n_f64(v239, v149, _Q31.f64[0]), v150, _Q31, 1);
  v234 = vmlaq_laneq_f64(vmlaq_n_f64(v233, v151, _Q31.f64[0]), _Q7, _Q31, 1);
  v858 = vmlaq_laneq_f64(vmlaq_n_f64(v857, v152, _Q31.f64[0]), _Q1, _Q31, 1);
  v851 = vmlaq_laneq_f64(vmlaq_n_f64(v850, v153, _Q31.f64[0]), _Q2, _Q31, 1);
  v844 = vmlaq_laneq_f64(vmlaq_n_f64(v843, v155, _Q31.f64[0]), _Q3, _Q31, 1);
  v837 = vmlaq_laneq_f64(vmlaq_n_f64(v836, v156, _Q31.f64[0]), v40, _Q31, 1);
  v830 = vmlaq_laneq_f64(vmlaq_n_f64(v829, v157, _Q31.f64[0]), v41, _Q31, 1);
  _Q31.f64[0] = *(float64_t *)(a1 + 344);
  __asm { FMLA            D0, D31, V19.D[1] }
  v822 = vmlaq_laneq_f64(vmlaq_n_f64(v821, v149, v136.f64[0]), v150, v136, 1);
  v815 = vmlaq_laneq_f64(vmlaq_n_f64(v814, v151, v136.f64[0]), _Q7, v136, 1);
  v808 = vmlaq_laneq_f64(vmlaq_n_f64(v807, v152, v136.f64[0]), _Q1, v136, 1);
  v801 = vmlaq_laneq_f64(vmlaq_n_f64(v800, v153, v136.f64[0]), _Q2, v136, 1);
  v794 = vmlaq_laneq_f64(vmlaq_n_f64(v793, v155, v136.f64[0]), _Q3, v136, 1);
  v787 = vmlaq_laneq_f64(vmlaq_n_f64(v786, v156, v136.f64[0]), v40, v136, 1);
  v780 = vmlaq_laneq_f64(vmlaq_n_f64(v779, v157, v136.f64[0]), v41, v136, 1);
  _Q31.f64[0] = _Q7.f64[1];
  __asm { FMLA            D0, D31, V19.D[1] }
  v772 = vmlaq_laneq_f64(vmlaq_n_f64(v771, v149, v137.f64[0]), v150, v137, 1);
  v765 = vmlaq_laneq_f64(vmlaq_n_f64(v764, v151, v137.f64[0]), _Q7, v137, 1);
  v758 = vmlaq_laneq_f64(vmlaq_n_f64(v757, v152, v137.f64[0]), _Q1, v137, 1);
  v751 = vmlaq_laneq_f64(vmlaq_n_f64(v750, v153, v137.f64[0]), _Q2, v137, 1);
  v744 = vmlaq_laneq_f64(vmlaq_n_f64(v743, v155, v137.f64[0]), _Q3, v137, 1);
  v737 = vmlaq_laneq_f64(vmlaq_n_f64(v736, v156, v137.f64[0]), v40, v137, 1);
  v730 = vmlaq_laneq_f64(vmlaq_n_f64(v729, v157, v137.f64[0]), v41, v137, 1);
  _Q31.f64[0] = *(float64_t *)(a1 + 584);
  __asm { FMLA            D0, D31, V19.D[1] }
  v722 = vmlaq_laneq_f64(vmlaq_n_f64(v721, v149, v138.f64[0]), v150, v138, 1);
  v715 = vmlaq_laneq_f64(vmlaq_n_f64(v714, v151, v138.f64[0]), _Q7, v138, 1);
  v708 = vmlaq_laneq_f64(vmlaq_n_f64(v707, v152, v138.f64[0]), _Q1, v138, 1);
  v701 = vmlaq_laneq_f64(vmlaq_n_f64(v700, v153, v138.f64[0]), _Q2, v138, 1);
  v694 = vmlaq_laneq_f64(vmlaq_n_f64(v693, v155, v138.f64[0]), _Q3, v138, 1);
  v687 = vmlaq_laneq_f64(vmlaq_n_f64(v686, v156, v138.f64[0]), v40, v138, 1);
  v673 = vmlaq_laneq_f64(vmlaq_n_f64(v672, v157, v138.f64[0]), v41, v138, 1);
  _Q31.f64[0] = _Q1.f64[1];
  __asm { FMLA            D0, D31, V19.D[1] }
  v665 = vmlaq_laneq_f64(vmlaq_n_f64(v664, v149, _Q30.f64[0]), v150, _Q30, 1);
  v658 = vmlaq_laneq_f64(vmlaq_n_f64(v657, v151, _Q30.f64[0]), _Q7, _Q30, 1);
  v651 = vmlaq_laneq_f64(vmlaq_n_f64(v650, v152, _Q30.f64[0]), _Q1, _Q30, 1);
  v644 = vmlaq_laneq_f64(vmlaq_n_f64(v643, v153, _Q30.f64[0]), _Q2, _Q30, 1);
  v637 = vmlaq_laneq_f64(vmlaq_n_f64(v636, v155, _Q30.f64[0]), _Q3, _Q30, 1);
  v630 = vmlaq_laneq_f64(vmlaq_n_f64(v629, v156, _Q30.f64[0]), v40, _Q30, 1);
  v623 = vmlaq_laneq_f64(vmlaq_n_f64(v622, v157, _Q30.f64[0]), v41, _Q30, 1);
  _Q30.f64[0] = *(float64_t *)(a1 + 824);
  __asm { FMLA            D0, D30, V19.D[1] }
  v615 = vmlaq_laneq_f64(vmlaq_n_f64(v614, v149, _Q29.f64[0]), v150, _Q29, 1);
  v608 = vmlaq_laneq_f64(vmlaq_n_f64(v607, v151, _Q29.f64[0]), _Q7, _Q29, 1);
  v601 = vmlaq_laneq_f64(vmlaq_n_f64(v600, v152, _Q29.f64[0]), _Q1, _Q29, 1);
  v594 = vmlaq_laneq_f64(vmlaq_n_f64(v593, v153, _Q29.f64[0]), _Q2, _Q29, 1);
  v587 = vmlaq_laneq_f64(vmlaq_n_f64(v586, v155, _Q29.f64[0]), _Q3, _Q29, 1);
  v580 = vmlaq_laneq_f64(vmlaq_n_f64(v579, v156, _Q29.f64[0]), v40, _Q29, 1);
  v573 = vmlaq_laneq_f64(vmlaq_n_f64(v572, v157, _Q29.f64[0]), v41, _Q29, 1);
  _Q29.f64[0] = _Q2.f64[1];
  __asm { FMLA            D0, D29, V19.D[1] }
  v565 = vmlaq_laneq_f64(vmlaq_n_f64(v564, v149, _Q28.f64[0]), v150, _Q28, 1);
  v558 = vmlaq_laneq_f64(vmlaq_n_f64(v557, v151, _Q28.f64[0]), _Q7, _Q28, 1);
  v551 = vmlaq_laneq_f64(vmlaq_n_f64(v550, v152, _Q28.f64[0]), _Q1, _Q28, 1);
  v544 = vmlaq_laneq_f64(vmlaq_n_f64(v543, v153, _Q28.f64[0]), _Q2, _Q28, 1);
  v537 = vmlaq_laneq_f64(vmlaq_n_f64(v536, v155, _Q28.f64[0]), _Q3, _Q28, 1);
  v530 = vmlaq_laneq_f64(vmlaq_n_f64(v529, v156, _Q28.f64[0]), v40, _Q28, 1);
  v523 = vmlaq_laneq_f64(vmlaq_n_f64(v522, v157, _Q28.f64[0]), v41, _Q28, 1);
  _Q28.f64[0] = *(float64_t *)(a1 + 1064);
  __asm { FMLA            D0, D28, V19.D[1] }
  v515 = vmlaq_laneq_f64(vmlaq_n_f64(v514, v149, _Q27.f64[0]), v150, _Q27, 1);
  v508 = vmlaq_laneq_f64(vmlaq_n_f64(v507, v151, _Q27.f64[0]), _Q7, _Q27, 1);
  v501 = vmlaq_laneq_f64(vmlaq_n_f64(v500, v152, _Q27.f64[0]), _Q1, _Q27, 1);
  v494 = vmlaq_laneq_f64(vmlaq_n_f64(v493, v153, _Q27.f64[0]), _Q2, _Q27, 1);
  v487 = vmlaq_laneq_f64(vmlaq_n_f64(v486, v155, _Q27.f64[0]), _Q3, _Q27, 1);
  v480 = vmlaq_laneq_f64(vmlaq_n_f64(v479, v156, _Q27.f64[0]), v40, _Q27, 1);
  v473 = vmlaq_laneq_f64(vmlaq_n_f64(v472, v157, _Q27.f64[0]), v41, _Q27, 1);
  _Q27.f64[0] = _Q3.f64[1];
  __asm { FMLA            D0, D27, V19.D[1] }
  v465 = vmlaq_laneq_f64(vmlaq_n_f64(v464, v149, _Q26.f64[0]), v150, _Q26, 1);
  v458 = vmlaq_laneq_f64(vmlaq_n_f64(v457, v151, _Q26.f64[0]), _Q7, _Q26, 1);
  v451 = vmlaq_laneq_f64(vmlaq_n_f64(v450, v152, _Q26.f64[0]), _Q1, _Q26, 1);
  v444 = vmlaq_laneq_f64(vmlaq_n_f64(v443, v153, _Q26.f64[0]), _Q2, _Q26, 1);
  v437 = vmlaq_laneq_f64(vmlaq_n_f64(v436, v155, _Q26.f64[0]), _Q3, _Q26, 1);
  v430 = vmlaq_laneq_f64(vmlaq_n_f64(v429, v156, _Q26.f64[0]), v40, _Q26, 1);
  v423 = vmlaq_laneq_f64(vmlaq_n_f64(v422, v157, _Q26.f64[0]), v41, _Q26, 1);
  _Q26.f64[0] = *(float64_t *)(a1 + 1304);
  __asm { FMLA            D0, D26, V19.D[1] }
  v415 = vmlaq_laneq_f64(vmlaq_n_f64(v414, v149, _Q25.f64[0]), v150, _Q25, 1);
  v408 = vmlaq_laneq_f64(vmlaq_n_f64(v407, v151, _Q25.f64[0]), _Q7, _Q25, 1);
  v401 = vmlaq_laneq_f64(vmlaq_n_f64(v400, v152, _Q25.f64[0]), _Q1, _Q25, 1);
  v394 = vmlaq_laneq_f64(vmlaq_n_f64(v393, v153, _Q25.f64[0]), _Q2, _Q25, 1);
  v387 = vmlaq_laneq_f64(vmlaq_n_f64(v386, v155, _Q25.f64[0]), _Q3, _Q25, 1);
  v380 = vmlaq_laneq_f64(vmlaq_n_f64(v379, v156, _Q25.f64[0]), v40, _Q25, 1);
  v373 = vmlaq_laneq_f64(vmlaq_n_f64(v372, v157, _Q25.f64[0]), v41, _Q25, 1);
  _Q25.f64[0] = v40.f64[1];
  __asm { FMLA            D0, D25, V19.D[1] }
  v365 = vmlaq_laneq_f64(vmlaq_n_f64(v364, v149, _Q24.f64[0]), v150, _Q24, 1);
  v358 = vmlaq_laneq_f64(vmlaq_n_f64(v357, v151, _Q24.f64[0]), _Q7, _Q24, 1);
  v351 = vmlaq_laneq_f64(vmlaq_n_f64(v350, v152, _Q24.f64[0]), _Q1, _Q24, 1);
  v344 = vmlaq_laneq_f64(vmlaq_n_f64(v343, v153, _Q24.f64[0]), _Q2, _Q24, 1);
  v337 = vmlaq_laneq_f64(vmlaq_n_f64(v336, v155, _Q24.f64[0]), _Q3, _Q24, 1);
  v330 = vmlaq_laneq_f64(vmlaq_n_f64(v329, v156, _Q24.f64[0]), v40, _Q24, 1);
  v323 = vmlaq_laneq_f64(vmlaq_n_f64(v322, v157, _Q24.f64[0]), v41, _Q24, 1);
  _Q24.f64[0] = *(float64_t *)(a1 + 1544);
  __asm { FMLA            D0, D24, V19.D[1] }
  v315 = vmlaq_laneq_f64(vmlaq_n_f64(v314, v149, _Q6.f64[0]), v150, _Q6, 1);
  v308 = vmlaq_laneq_f64(vmlaq_n_f64(v307, v151, _Q6.f64[0]), _Q7, _Q6, 1);
  v301 = vmlaq_laneq_f64(vmlaq_n_f64(v300, v152, _Q6.f64[0]), _Q1, _Q6, 1);
  v294 = vmlaq_laneq_f64(vmlaq_n_f64(v293, v153, _Q6.f64[0]), _Q2, _Q6, 1);
  v287 = vmlaq_laneq_f64(vmlaq_n_f64(v286, v155, _Q6.f64[0]), _Q3, _Q6, 1);
  v280 = vmlaq_laneq_f64(vmlaq_n_f64(v279, v156, _Q6.f64[0]), v40, _Q6, 1);
  v228 = vmlaq_laneq_f64(vmlaq_n_f64(v227, v157, _Q6.f64[0]), v41, _Q6, 1);
  _Q6.f64[0] = v41.f64[1];
  __asm { FMLA            D0, D6, V19.D[1] }
  v272 = vmlaq_laneq_f64(vmlaq_n_f64(v271, v149, _Q19.f64[0]), v150, _Q19, 1);
  v265 = vmlaq_laneq_f64(vmlaq_n_f64(v264, v151, _Q19.f64[0]), _Q7, _Q19, 1);
  v258 = vmlaq_laneq_f64(vmlaq_n_f64(v257, v152, _Q19.f64[0]), _Q1, _Q19, 1);
  v222 = vmlaq_laneq_f64(vmlaq_n_f64(v221, v153, _Q19.f64[0]), _Q2, _Q19, 1);
  v216 = vmlaq_laneq_f64(vmlaq_n_f64(v215, v155, _Q19.f64[0]), _Q3, _Q19, 1);
  v198 = vmlaq_laneq_f64(vmlaq_n_f64(v197, v156, _Q19.f64[0]), v40, _Q19, 1);
  v159 = vmlaq_laneq_f64(vmlaq_n_f64(v192, v157, _Q19.f64[0]), v41, _Q19, 1);
  _Q0.f64[0] = *(float64_t *)(a1 + 1784);
  __asm { FMLA            D1, D0, V19.D[1] }
  _Q8 = *(float64x2_t *)(a1 + 472);
  _Q9 = *(float64x2_t *)(a1 + 352);
  *(_QWORD *)&_Q7.f64[0] = vdupq_laneq_s64((int64x2_t)_Q9, 1).u64[0];
  _Q7.f64[1] = *(float64_t *)(a1 + 480);
  _Q31 = *(float64x2_t *)(a1 + 712);
  v163 = *(float64x2_t *)(a1 + 592);
  *(_QWORD *)&_Q1.f64[0] = vdupq_laneq_s64((int64x2_t)v163, 1).u64[0];
  _Q1.f64[1] = *(float64_t *)(a1 + 720);
  _Q29 = *(float64x2_t *)(a1 + 952);
  _Q30 = *(float64x2_t *)(a1 + 832);
  *(_QWORD *)&_Q2.f64[0] = vdupq_laneq_s64((int64x2_t)_Q30, 1).u64[0];
  _Q2.f64[1] = *(float64_t *)(a1 + 960);
  _Q27 = *(float64x2_t *)(a1 + 1192);
  _Q28 = *(float64x2_t *)(a1 + 1072);
  *(_QWORD *)&_Q3.f64[0] = vdupq_laneq_s64((int64x2_t)_Q28, 1).u64[0];
  _Q3.f64[1] = *(float64_t *)(a1 + 1200);
  _Q26 = *(float64x2_t *)(a1 + 1312);
  _Q25 = *(float64x2_t *)(a1 + 1432);
  *(_QWORD *)&v40.f64[0] = vdupq_laneq_s64((int64x2_t)_Q26, 1).u64[0];
  v40.f64[1] = *(float64_t *)(a1 + 1440);
  _Q24 = *(float64x2_t *)(a1 + 1552);
  _Q6 = *(float64x2_t *)(a1 + 1672);
  *(_QWORD *)&v41.f64[0] = vdupq_laneq_s64((int64x2_t)_Q24, 1).u64[0];
  v41.f64[1] = *(float64_t *)(a1 + 1680);
  _Q11 = *(float64x2_t *)(a1 + 112);
  v173 = *(float64x2_t *)(a1 + 232);
  v174 = (float64x2_t)vzip1q_s64((int64x2_t)_Q11, (int64x2_t)v173);
  v175 = (float64x2_t)vzip2q_s64((int64x2_t)_Q11, (int64x2_t)v173);
  v681 = vmlaq_laneq_f64(vmlaq_n_f64(v680, v174, _Q11.f64[0]), v175, _Q11, 1);
  v176 = (float64x2_t)vzip1q_s64((int64x2_t)_Q9, (int64x2_t)_Q8);
  v204 = vmlaq_laneq_f64(vmlaq_n_f64(v203, v176, _Q11.f64[0]), _Q7, _Q11, 1);
  v177 = (float64x2_t)vzip1q_s64((int64x2_t)v163, (int64x2_t)_Q31);
  v210 = vmlaq_laneq_f64(vmlaq_n_f64(v209, v177, _Q11.f64[0]), _Q1, _Q11, 1);
  v178 = (float64x2_t)vzip1q_s64((int64x2_t)_Q30, (int64x2_t)_Q29);
  v252 = vmlaq_laneq_f64(vmlaq_n_f64(v154, v178, _Q11.f64[0]), _Q2, _Q11, 1);
  v179 = (float64x2_t)vzip1q_s64((int64x2_t)_Q28, (int64x2_t)_Q27);
  v923 = vmlaq_laneq_f64(vmlaq_n_f64(v922, v179, _Q11.f64[0]), _Q3, _Q11, 1);
  v180 = (float64x2_t)vzip1q_s64((int64x2_t)_Q26, (int64x2_t)_Q25);
  v916 = vmlaq_laneq_f64(vmlaq_n_f64(v915, v180, _Q11.f64[0]), v40, _Q11, 1);
  v181 = (float64x2_t)vzip1q_s64((int64x2_t)_Q24, (int64x2_t)_Q6);
  v909 = vmlaq_laneq_f64(vmlaq_n_f64(v908, v181, _Q11.f64[0]), v41, _Q11, 1);
  _Q19 = *(float64x2_t *)(a1 + 1792);
  _Q11.f64[0] = *(float64_t *)(a1 + 120);
  __asm { FMLA            D0, D11, V19.D[1] }
  v902 = _Q0.f64[0];
  v901 = vmlaq_laneq_f64(vmlaq_n_f64(v900, v174, v173.f64[0]), v175, v173, 1);
  v894 = vmlaq_laneq_f64(vmlaq_n_f64(v893, v176, v173.f64[0]), _Q7, v173, 1);
  v887 = vmlaq_laneq_f64(vmlaq_n_f64(v886, v177, v173.f64[0]), _Q1, v173, 1);
  v880 = vmlaq_laneq_f64(vmlaq_n_f64(v879, v178, v173.f64[0]), _Q2, v173, 1);
  v873 = vmlaq_laneq_f64(vmlaq_n_f64(v872, v179, v173.f64[0]), _Q3, v173, 1);
  v866 = vmlaq_laneq_f64(vmlaq_n_f64(v865, v180, v173.f64[0]), v40, v173, 1);
  v183 = vmlaq_laneq_f64(vmlaq_n_f64(v246, v181, v173.f64[0]), v41, v173, 1);
  _Q11.f64[0] = *(float64_t *)(a1 + 240);
  __asm { FMLA            D0, D11, V19.D[1] }
  v193 = _Q0.f64[0];
  v184 = vmlaq_laneq_f64(vmlaq_n_f64(v240, v174, _Q9.f64[0]), v175, _Q9, 1);
  v185 = vmlaq_laneq_f64(vmlaq_n_f64(v234, v176, _Q9.f64[0]), _Q7, _Q9, 1);
  v859 = vmlaq_laneq_f64(vmlaq_n_f64(v858, v177, _Q9.f64[0]), _Q1, _Q9, 1);
  v852 = vmlaq_laneq_f64(vmlaq_n_f64(v851, v178, _Q9.f64[0]), _Q2, _Q9, 1);
  v845 = vmlaq_laneq_f64(vmlaq_n_f64(v844, v179, _Q9.f64[0]), _Q3, _Q9, 1);
  v838 = vmlaq_laneq_f64(vmlaq_n_f64(v837, v180, _Q9.f64[0]), v40, _Q9, 1);
  v831 = vmlaq_laneq_f64(vmlaq_n_f64(v830, v181, _Q9.f64[0]), v41, _Q9, 1);
  _Q9.f64[0] = *(float64_t *)(a1 + 360);
  __asm { FMLA            D0, D9, V19.D[1] }
  v824 = _Q0.f64[0];
  v823 = vmlaq_laneq_f64(vmlaq_n_f64(v822, v174, _Q8.f64[0]), v175, _Q8, 1);
  v816 = vmlaq_laneq_f64(vmlaq_n_f64(v815, v176, _Q8.f64[0]), _Q7, _Q8, 1);
  v809 = vmlaq_laneq_f64(vmlaq_n_f64(v808, v177, _Q8.f64[0]), _Q1, _Q8, 1);
  v802 = vmlaq_laneq_f64(vmlaq_n_f64(v801, v178, _Q8.f64[0]), _Q2, _Q8, 1);
  v795 = vmlaq_laneq_f64(vmlaq_n_f64(v794, v179, _Q8.f64[0]), _Q3, _Q8, 1);
  v788 = vmlaq_laneq_f64(vmlaq_n_f64(v787, v180, _Q8.f64[0]), v40, _Q8, 1);
  v781 = vmlaq_laneq_f64(vmlaq_n_f64(v780, v181, _Q8.f64[0]), v41, _Q8, 1);
  _Q8.f64[0] = _Q7.f64[1];
  __asm { FMLA            D0, D8, V19.D[1] }
  v774 = _Q0.f64[0];
  v773 = vmlaq_laneq_f64(vmlaq_n_f64(v772, v174, v163.f64[0]), v175, v163, 1);
  v766 = vmlaq_laneq_f64(vmlaq_n_f64(v765, v176, v163.f64[0]), _Q7, v163, 1);
  v759 = vmlaq_laneq_f64(vmlaq_n_f64(v758, v177, v163.f64[0]), _Q1, v163, 1);
  v752 = vmlaq_laneq_f64(vmlaq_n_f64(v751, v178, v163.f64[0]), _Q2, v163, 1);
  v745 = vmlaq_laneq_f64(vmlaq_n_f64(v744, v179, v163.f64[0]), _Q3, v163, 1);
  v738 = vmlaq_laneq_f64(vmlaq_n_f64(v737, v180, v163.f64[0]), v40, v163, 1);
  v731 = vmlaq_laneq_f64(vmlaq_n_f64(v730, v181, v163.f64[0]), v41, v163, 1);
  _Q8.f64[0] = *(float64_t *)(a1 + 600);
  __asm { FMLA            D0, D8, V19.D[1] }
  v724 = _Q0.f64[0];
  v723 = vmlaq_laneq_f64(vmlaq_n_f64(v722, v174, _Q31.f64[0]), v175, _Q31, 1);
  v716 = vmlaq_laneq_f64(vmlaq_n_f64(v715, v176, _Q31.f64[0]), _Q7, _Q31, 1);
  v709 = vmlaq_laneq_f64(vmlaq_n_f64(v708, v177, _Q31.f64[0]), _Q1, _Q31, 1);
  v702 = vmlaq_laneq_f64(vmlaq_n_f64(v701, v178, _Q31.f64[0]), _Q2, _Q31, 1);
  v695 = vmlaq_laneq_f64(vmlaq_n_f64(v694, v179, _Q31.f64[0]), _Q3, _Q31, 1);
  v688 = vmlaq_laneq_f64(vmlaq_n_f64(v687, v180, _Q31.f64[0]), v40, _Q31, 1);
  v674 = vmlaq_laneq_f64(vmlaq_n_f64(v673, v181, _Q31.f64[0]), v41, _Q31, 1);
  _Q31.f64[0] = _Q1.f64[1];
  __asm { FMLA            D0, D31, V19.D[1] }
  v667 = _Q0.f64[0];
  v666 = vmlaq_laneq_f64(vmlaq_n_f64(v665, v174, _Q30.f64[0]), v175, _Q30, 1);
  v659 = vmlaq_laneq_f64(vmlaq_n_f64(v658, v176, _Q30.f64[0]), _Q7, _Q30, 1);
  v652 = vmlaq_laneq_f64(vmlaq_n_f64(v651, v177, _Q30.f64[0]), _Q1, _Q30, 1);
  v645 = vmlaq_laneq_f64(vmlaq_n_f64(v644, v178, _Q30.f64[0]), _Q2, _Q30, 1);
  v638 = vmlaq_laneq_f64(vmlaq_n_f64(v637, v179, _Q30.f64[0]), _Q3, _Q30, 1);
  v631 = vmlaq_laneq_f64(vmlaq_n_f64(v630, v180, _Q30.f64[0]), v40, _Q30, 1);
  v624 = vmlaq_laneq_f64(vmlaq_n_f64(v623, v181, _Q30.f64[0]), v41, _Q30, 1);
  _Q30.f64[0] = *(float64_t *)(a1 + 840);
  __asm { FMLA            D0, D30, V19.D[1] }
  v617 = _Q0.f64[0];
  v616 = vmlaq_laneq_f64(vmlaq_n_f64(v615, v174, _Q29.f64[0]), v175, _Q29, 1);
  v609 = vmlaq_laneq_f64(vmlaq_n_f64(v608, v176, _Q29.f64[0]), _Q7, _Q29, 1);
  v602 = vmlaq_laneq_f64(vmlaq_n_f64(v601, v177, _Q29.f64[0]), _Q1, _Q29, 1);
  v595 = vmlaq_laneq_f64(vmlaq_n_f64(v594, v178, _Q29.f64[0]), _Q2, _Q29, 1);
  v588 = vmlaq_laneq_f64(vmlaq_n_f64(v587, v179, _Q29.f64[0]), _Q3, _Q29, 1);
  v581 = vmlaq_laneq_f64(vmlaq_n_f64(v580, v180, _Q29.f64[0]), v40, _Q29, 1);
  v574 = vmlaq_laneq_f64(vmlaq_n_f64(v573, v181, _Q29.f64[0]), v41, _Q29, 1);
  _Q29.f64[0] = _Q2.f64[1];
  __asm { FMLA            D0, D29, V19.D[1] }
  v567 = _Q0.f64[0];
  v566 = vmlaq_laneq_f64(vmlaq_n_f64(v565, v174, _Q28.f64[0]), v175, _Q28, 1);
  v559 = vmlaq_laneq_f64(vmlaq_n_f64(v558, v176, _Q28.f64[0]), _Q7, _Q28, 1);
  v552 = vmlaq_laneq_f64(vmlaq_n_f64(v551, v177, _Q28.f64[0]), _Q1, _Q28, 1);
  v545 = vmlaq_laneq_f64(vmlaq_n_f64(v544, v178, _Q28.f64[0]), _Q2, _Q28, 1);
  v538 = vmlaq_laneq_f64(vmlaq_n_f64(v537, v179, _Q28.f64[0]), _Q3, _Q28, 1);
  v531 = vmlaq_laneq_f64(vmlaq_n_f64(v530, v180, _Q28.f64[0]), v40, _Q28, 1);
  v524 = vmlaq_laneq_f64(vmlaq_n_f64(v523, v181, _Q28.f64[0]), v41, _Q28, 1);
  _Q28.f64[0] = *(float64_t *)(a1 + 1080);
  __asm { FMLA            D0, D28, V19.D[1] }
  v517 = _Q0.f64[0];
  v516 = vmlaq_laneq_f64(vmlaq_n_f64(v515, v174, _Q27.f64[0]), v175, _Q27, 1);
  v509 = vmlaq_laneq_f64(vmlaq_n_f64(v508, v176, _Q27.f64[0]), _Q7, _Q27, 1);
  v502 = vmlaq_laneq_f64(vmlaq_n_f64(v501, v177, _Q27.f64[0]), _Q1, _Q27, 1);
  v495 = vmlaq_laneq_f64(vmlaq_n_f64(v494, v178, _Q27.f64[0]), _Q2, _Q27, 1);
  v488 = vmlaq_laneq_f64(vmlaq_n_f64(v487, v179, _Q27.f64[0]), _Q3, _Q27, 1);
  v481 = vmlaq_laneq_f64(vmlaq_n_f64(v480, v180, _Q27.f64[0]), v40, _Q27, 1);
  v474 = vmlaq_laneq_f64(vmlaq_n_f64(v473, v181, _Q27.f64[0]), v41, _Q27, 1);
  _Q27.f64[0] = _Q3.f64[1];
  __asm { FMLA            D0, D27, V19.D[1] }
  v467 = _Q0.f64[0];
  v466 = vmlaq_laneq_f64(vmlaq_n_f64(v465, v174, _Q26.f64[0]), v175, _Q26, 1);
  v459 = vmlaq_laneq_f64(vmlaq_n_f64(v458, v176, _Q26.f64[0]), _Q7, _Q26, 1);
  v452 = vmlaq_laneq_f64(vmlaq_n_f64(v451, v177, _Q26.f64[0]), _Q1, _Q26, 1);
  v445 = vmlaq_laneq_f64(vmlaq_n_f64(v444, v178, _Q26.f64[0]), _Q2, _Q26, 1);
  v438 = vmlaq_laneq_f64(vmlaq_n_f64(v437, v179, _Q26.f64[0]), _Q3, _Q26, 1);
  v431 = vmlaq_laneq_f64(vmlaq_n_f64(v430, v180, _Q26.f64[0]), v40, _Q26, 1);
  v424 = vmlaq_laneq_f64(vmlaq_n_f64(v423, v181, _Q26.f64[0]), v41, _Q26, 1);
  _Q26.f64[0] = *(float64_t *)(a1 + 1320);
  __asm { FMLA            D0, D26, V19.D[1] }
  v417 = _Q0.f64[0];
  v416 = vmlaq_laneq_f64(vmlaq_n_f64(v415, v174, _Q25.f64[0]), v175, _Q25, 1);
  v409 = vmlaq_laneq_f64(vmlaq_n_f64(v408, v176, _Q25.f64[0]), _Q7, _Q25, 1);
  v402 = vmlaq_laneq_f64(vmlaq_n_f64(v401, v177, _Q25.f64[0]), _Q1, _Q25, 1);
  v395 = vmlaq_laneq_f64(vmlaq_n_f64(v394, v178, _Q25.f64[0]), _Q2, _Q25, 1);
  v388 = vmlaq_laneq_f64(vmlaq_n_f64(v387, v179, _Q25.f64[0]), _Q3, _Q25, 1);
  v381 = vmlaq_laneq_f64(vmlaq_n_f64(v380, v180, _Q25.f64[0]), v40, _Q25, 1);
  v374 = vmlaq_laneq_f64(vmlaq_n_f64(v373, v181, _Q25.f64[0]), v41, _Q25, 1);
  _Q25.f64[0] = v40.f64[1];
  __asm { FMLA            D0, D25, V19.D[1] }
  v367 = _Q0.f64[0];
  v366 = vmlaq_laneq_f64(vmlaq_n_f64(v365, v174, _Q24.f64[0]), v175, _Q24, 1);
  v359 = vmlaq_laneq_f64(vmlaq_n_f64(v358, v176, _Q24.f64[0]), _Q7, _Q24, 1);
  v352 = vmlaq_laneq_f64(vmlaq_n_f64(v351, v177, _Q24.f64[0]), _Q1, _Q24, 1);
  v345 = vmlaq_laneq_f64(vmlaq_n_f64(v344, v178, _Q24.f64[0]), _Q2, _Q24, 1);
  v338 = vmlaq_laneq_f64(vmlaq_n_f64(v337, v179, _Q24.f64[0]), _Q3, _Q24, 1);
  v331 = vmlaq_laneq_f64(vmlaq_n_f64(v330, v180, _Q24.f64[0]), v40, _Q24, 1);
  v324 = vmlaq_laneq_f64(vmlaq_n_f64(v323, v181, _Q24.f64[0]), v41, _Q24, 1);
  _Q24.f64[0] = *(float64_t *)(a1 + 1560);
  __asm { FMLA            D0, D24, V19.D[1] }
  v317 = _Q0.f64[0];
  v316 = vmlaq_laneq_f64(vmlaq_n_f64(v315, v174, _Q6.f64[0]), v175, _Q6, 1);
  v309 = vmlaq_laneq_f64(vmlaq_n_f64(v308, v176, _Q6.f64[0]), _Q7, _Q6, 1);
  v302 = vmlaq_laneq_f64(vmlaq_n_f64(v301, v177, _Q6.f64[0]), _Q1, _Q6, 1);
  v295 = vmlaq_laneq_f64(vmlaq_n_f64(v294, v178, _Q6.f64[0]), _Q2, _Q6, 1);
  v288 = vmlaq_laneq_f64(vmlaq_n_f64(v287, v179, _Q6.f64[0]), _Q3, _Q6, 1);
  v281 = vmlaq_laneq_f64(vmlaq_n_f64(v280, v180, _Q6.f64[0]), v40, _Q6, 1);
  v186 = vmlaq_laneq_f64(vmlaq_n_f64(v228, v181, _Q6.f64[0]), v41, _Q6, 1);
  _Q6.f64[0] = v41.f64[1];
  __asm { FMLA            D0, D6, V19.D[1] }
  v274 = _Q0.f64[0];
  v273 = vmlaq_laneq_f64(vmlaq_n_f64(v272, v174, _Q19.f64[0]), v175, _Q19, 1);
  v266 = vmlaq_laneq_f64(vmlaq_n_f64(v265, v176, _Q19.f64[0]), _Q7, _Q19, 1);
  v259 = vmlaq_laneq_f64(vmlaq_n_f64(v258, v177, _Q19.f64[0]), _Q1, _Q19, 1);
  v187 = vmlaq_laneq_f64(vmlaq_n_f64(v222, v178, _Q19.f64[0]), _Q2, _Q19, 1);
  v188 = vmlaq_laneq_f64(vmlaq_n_f64(v216, v179, _Q19.f64[0]), _Q3, _Q19, 1);
  v189 = vmlaq_laneq_f64(vmlaq_n_f64(v198, v180, _Q19.f64[0]), v40, _Q19, 1);
  v190 = vmlaq_laneq_f64(vmlaq_n_f64(v159, v181, _Q19.f64[0]), v41, _Q19, 1);
  _Q0.f64[0] = *(float64_t *)(a1 + 1800);
  __asm { FMLA            D1, D0, V19.D[1] }
  v181.f64[0] = *(float64_t *)(a1 + 128);
  _Q2.f64[0] = *(float64_t *)(a1 + 1808);
  *(double *)(a2 + 112) = v902 + _Q2.f64[0] * v181.f64[0];
  _Q30.f64[0] = *(float64_t *)(a1 + 1568);
  _Q30.f64[1] = *(float64_t *)(a1 + 1688);
  *(float64x2_t *)(a2 + 96) = vmlaq_n_f64(v909, _Q30, v181.f64[0]);
  _Q3.f64[0] = *(float64_t *)(a1 + 1088);
  _Q3.f64[1] = *(float64_t *)(a1 + 1208);
  v40.f64[0] = *(float64_t *)(a1 + 1328);
  v40.f64[1] = *(float64_t *)(a1 + 1448);
  *(float64x2_t *)(a2 + 64) = vmlaq_n_f64(v923, _Q3, v181.f64[0]);
  *(float64x2_t *)(a2 + 80) = vmlaq_n_f64(v916, v40, v181.f64[0]);
  v41.f64[0] = *(float64_t *)(a1 + 608);
  v41.f64[1] = *(float64_t *)(a1 + 728);
  _Q7.f64[0] = *(float64_t *)(a1 + 848);
  _Q7.f64[1] = *(float64_t *)(a1 + 968);
  *(float64x2_t *)(a2 + 32) = vmlaq_n_f64(v210, v41, v181.f64[0]);
  *(float64x2_t *)(a2 + 48) = vmlaq_n_f64(v252, _Q7, v181.f64[0]);
  v175.f64[0] = *(float64_t *)(a1 + 368);
  v175.f64[1] = *(float64_t *)(a1 + 488);
  v176.f64[0] = v181.f64[0];
  v176.f64[1] = *(float64_t *)(a1 + 248);
  *(float64x2_t *)a2 = vmlaq_n_f64(v681, v176, v181.f64[0]);
  *(float64x2_t *)(a2 + 16) = vmlaq_n_f64(v204, v175, v181.f64[0]);
  *(double *)(a2 + 232) = v193 + _Q2.f64[0] * v176.f64[1];
  *(float64x2_t *)(a2 + 120) = vmlaq_n_f64(v901, v176, v176.f64[1]);
  *(float64x2_t *)(a2 + 216) = vmlaq_n_f64(v183, _Q30, v176.f64[1]);
  *(float64x2_t *)(a2 + 200) = vmlaq_n_f64(v866, v40, v176.f64[1]);
  *(float64x2_t *)(a2 + 184) = vmlaq_n_f64(v873, _Q3, v176.f64[1]);
  *(float64x2_t *)(a2 + 168) = vmlaq_n_f64(v880, _Q7, v176.f64[1]);
  *(float64x2_t *)(a2 + 152) = vmlaq_n_f64(v887, v41, v176.f64[1]);
  *(float64x2_t *)(a2 + 136) = vmlaq_n_f64(v894, v175, v176.f64[1]);
  *(double *)(a2 + 352) = v824 + _Q2.f64[0] * v175.f64[0];
  *(float64x2_t *)(a2 + 336) = vmlaq_n_f64(v831, _Q30, v175.f64[0]);
  *(float64x2_t *)(a2 + 304) = vmlaq_n_f64(v845, _Q3, v175.f64[0]);
  *(float64x2_t *)(a2 + 320) = vmlaq_n_f64(v838, v40, v175.f64[0]);
  *(float64x2_t *)(a2 + 272) = vmlaq_n_f64(v859, v41, v175.f64[0]);
  *(float64x2_t *)(a2 + 288) = vmlaq_n_f64(v852, _Q7, v175.f64[0]);
  *(float64x2_t *)(a2 + 240) = vmlaq_n_f64(v184, v176, v175.f64[0]);
  *(float64x2_t *)(a2 + 256) = vmlaq_n_f64(v185, v175, v175.f64[0]);
  *(double *)(a2 + 472) = v774 + _Q2.f64[0] * v175.f64[1];
  *(float64x2_t *)(a2 + 456) = vmlaq_n_f64(v781, _Q30, v175.f64[1]);
  *(float64x2_t *)(a2 + 424) = vmlaq_n_f64(v795, _Q3, v175.f64[1]);
  *(float64x2_t *)(a2 + 440) = vmlaq_n_f64(v788, v40, v175.f64[1]);
  *(float64x2_t *)(a2 + 392) = vmlaq_n_f64(v809, v41, v175.f64[1]);
  *(float64x2_t *)(a2 + 408) = vmlaq_n_f64(v802, _Q7, v175.f64[1]);
  *(float64x2_t *)(a2 + 360) = vmlaq_n_f64(v823, v176, v175.f64[1]);
  *(float64x2_t *)(a2 + 376) = vmlaq_n_f64(v816, v175, v175.f64[1]);
  *(double *)(a2 + 592) = v724 + _Q2.f64[0] * v41.f64[0];
  *(float64x2_t *)(a2 + 576) = vmlaq_n_f64(v731, _Q30, v41.f64[0]);
  *(float64x2_t *)(a2 + 544) = vmlaq_n_f64(v745, _Q3, v41.f64[0]);
  *(float64x2_t *)(a2 + 560) = vmlaq_n_f64(v738, v40, v41.f64[0]);
  *(float64x2_t *)(a2 + 512) = vmlaq_n_f64(v759, v41, v41.f64[0]);
  *(float64x2_t *)(a2 + 528) = vmlaq_n_f64(v752, _Q7, v41.f64[0]);
  *(float64x2_t *)(a2 + 480) = vmlaq_n_f64(v773, v176, v41.f64[0]);
  *(float64x2_t *)(a2 + 496) = vmlaq_n_f64(v766, v175, v41.f64[0]);
  *(double *)(a2 + 712) = v667 + _Q2.f64[0] * v41.f64[1];
  *(float64x2_t *)(a2 + 696) = vmlaq_n_f64(v674, _Q30, v41.f64[1]);
  *(float64x2_t *)(a2 + 664) = vmlaq_n_f64(v695, _Q3, v41.f64[1]);
  *(float64x2_t *)(a2 + 680) = vmlaq_n_f64(v688, v40, v41.f64[1]);
  *(float64x2_t *)(a2 + 632) = vmlaq_n_f64(v709, v41, v41.f64[1]);
  *(float64x2_t *)(a2 + 648) = vmlaq_n_f64(v702, _Q7, v41.f64[1]);
  *(float64x2_t *)(a2 + 600) = vmlaq_n_f64(v723, v176, v41.f64[1]);
  *(float64x2_t *)(a2 + 616) = vmlaq_n_f64(v716, v175, v41.f64[1]);
  *(double *)(a2 + 832) = v617 + _Q2.f64[0] * _Q7.f64[0];
  *(float64x2_t *)(a2 + 816) = vmlaq_n_f64(v624, _Q30, _Q7.f64[0]);
  *(float64x2_t *)(a2 + 784) = vmlaq_n_f64(v638, _Q3, _Q7.f64[0]);
  *(float64x2_t *)(a2 + 800) = vmlaq_n_f64(v631, v40, _Q7.f64[0]);
  *(float64x2_t *)(a2 + 752) = vmlaq_n_f64(v652, v41, _Q7.f64[0]);
  *(float64x2_t *)(a2 + 768) = vmlaq_n_f64(v645, _Q7, _Q7.f64[0]);
  *(float64x2_t *)(a2 + 720) = vmlaq_n_f64(v666, v176, _Q7.f64[0]);
  *(float64x2_t *)(a2 + 736) = vmlaq_n_f64(v659, v175, _Q7.f64[0]);
  *(double *)(a2 + 952) = v567 + _Q2.f64[0] * _Q7.f64[1];
  *(float64x2_t *)(a2 + 936) = vmlaq_n_f64(v574, _Q30, _Q7.f64[1]);
  *(float64x2_t *)(a2 + 904) = vmlaq_n_f64(v588, _Q3, _Q7.f64[1]);
  *(float64x2_t *)(a2 + 920) = vmlaq_n_f64(v581, v40, _Q7.f64[1]);
  *(float64x2_t *)(a2 + 872) = vmlaq_n_f64(v602, v41, _Q7.f64[1]);
  *(float64x2_t *)(a2 + 888) = vmlaq_n_f64(v595, _Q7, _Q7.f64[1]);
  *(float64x2_t *)(a2 + 840) = vmlaq_n_f64(v616, v176, _Q7.f64[1]);
  *(float64x2_t *)(a2 + 856) = vmlaq_n_f64(v609, v175, _Q7.f64[1]);
  *(double *)(a2 + 1072) = v517 + _Q2.f64[0] * _Q3.f64[0];
  *(float64x2_t *)(a2 + 1056) = vmlaq_n_f64(v524, _Q30, _Q3.f64[0]);
  *(float64x2_t *)(a2 + 1040) = vmlaq_n_f64(v531, v40, _Q3.f64[0]);
  *(float64x2_t *)(a2 + 1024) = vmlaq_n_f64(v538, _Q3, _Q3.f64[0]);
  *(float64x2_t *)(a2 + 992) = vmlaq_n_f64(v552, v41, _Q3.f64[0]);
  *(float64x2_t *)(a2 + 1008) = vmlaq_n_f64(v545, _Q7, _Q3.f64[0]);
  *(float64x2_t *)(a2 + 960) = vmlaq_n_f64(v566, v176, _Q3.f64[0]);
  *(float64x2_t *)(a2 + 976) = vmlaq_n_f64(v559, v175, _Q3.f64[0]);
  *(double *)(a2 + 1192) = v467 + _Q2.f64[0] * _Q3.f64[1];
  *(float64x2_t *)(a2 + 1176) = vmlaq_n_f64(v474, _Q30, _Q3.f64[1]);
  *(float64x2_t *)(a2 + 1144) = vmlaq_n_f64(v488, _Q3, _Q3.f64[1]);
  *(float64x2_t *)(a2 + 1160) = vmlaq_n_f64(v481, v40, _Q3.f64[1]);
  *(float64x2_t *)(a2 + 1112) = vmlaq_n_f64(v502, v41, _Q3.f64[1]);
  *(float64x2_t *)(a2 + 1128) = vmlaq_n_f64(v495, _Q7, _Q3.f64[1]);
  *(float64x2_t *)(a2 + 1080) = vmlaq_n_f64(v516, v176, _Q3.f64[1]);
  *(float64x2_t *)(a2 + 1096) = vmlaq_n_f64(v509, v175, _Q3.f64[1]);
  *(double *)(a2 + 1312) = v417 + _Q2.f64[0] * v40.f64[0];
  *(float64x2_t *)(a2 + 1200) = vmlaq_n_f64(v466, v176, v40.f64[0]);
  *(float64x2_t *)(a2 + 1296) = vmlaq_n_f64(v424, _Q30, v40.f64[0]);
  *(float64x2_t *)(a2 + 1280) = vmlaq_n_f64(v431, v40, v40.f64[0]);
  *(float64x2_t *)(a2 + 1264) = vmlaq_n_f64(v438, _Q3, v40.f64[0]);
  *(float64x2_t *)(a2 + 1248) = vmlaq_n_f64(v445, _Q7, v40.f64[0]);
  *(float64x2_t *)(a2 + 1232) = vmlaq_n_f64(v452, v41, v40.f64[0]);
  *(float64x2_t *)(a2 + 1216) = vmlaq_n_f64(v459, v175, v40.f64[0]);
  *(double *)(a2 + 1432) = v367 + _Q2.f64[0] * v40.f64[1];
  *(float64x2_t *)(a2 + 1416) = vmlaq_n_f64(v374, _Q30, v40.f64[1]);
  *(float64x2_t *)(a2 + 1384) = vmlaq_n_f64(v388, _Q3, v40.f64[1]);
  *(float64x2_t *)(a2 + 1400) = vmlaq_n_f64(v381, v40, v40.f64[1]);
  *(float64x2_t *)(a2 + 1352) = vmlaq_n_f64(v402, v41, v40.f64[1]);
  *(float64x2_t *)(a2 + 1368) = vmlaq_n_f64(v395, _Q7, v40.f64[1]);
  *(float64x2_t *)(a2 + 1320) = vmlaq_n_f64(v416, v176, v40.f64[1]);
  *(float64x2_t *)(a2 + 1336) = vmlaq_n_f64(v409, v175, v40.f64[1]);
  *(double *)(a2 + 1552) = v317 + _Q2.f64[0] * _Q30.f64[0];
  *(float64x2_t *)(a2 + 1440) = vmlaq_n_f64(v366, v176, _Q30.f64[0]);
  *(float64x2_t *)(a2 + 1536) = vmlaq_n_f64(v324, _Q30, _Q30.f64[0]);
  *(float64x2_t *)(a2 + 1520) = vmlaq_n_f64(v331, v40, _Q30.f64[0]);
  *(float64x2_t *)(a2 + 1504) = vmlaq_n_f64(v338, _Q3, _Q30.f64[0]);
  *(float64x2_t *)(a2 + 1488) = vmlaq_n_f64(v345, _Q7, _Q30.f64[0]);
  *(float64x2_t *)(a2 + 1472) = vmlaq_n_f64(v352, v41, _Q30.f64[0]);
  *(float64x2_t *)(a2 + 1456) = vmlaq_n_f64(v359, v175, _Q30.f64[0]);
  *(double *)(a2 + 1672) = v274 + _Q2.f64[0] * _Q30.f64[1];
  *(float64x2_t *)(a2 + 1640) = vmlaq_n_f64(v281, v40, _Q30.f64[1]);
  *(float64x2_t *)(a2 + 1656) = vmlaq_n_f64(v186, _Q30, _Q30.f64[1]);
  *(float64x2_t *)(a2 + 1624) = vmlaq_n_f64(v288, _Q3, _Q30.f64[1]);
  *(float64x2_t *)(a2 + 1592) = vmlaq_n_f64(v302, v41, _Q30.f64[1]);
  *(float64x2_t *)(a2 + 1608) = vmlaq_n_f64(v295, _Q7, _Q30.f64[1]);
  *(float64x2_t *)(a2 + 1560) = vmlaq_n_f64(v316, v176, _Q30.f64[1]);
  *(float64x2_t *)(a2 + 1576) = vmlaq_n_f64(v309, v175, _Q30.f64[1]);
  result = _Q1.f64[0] + _Q2.f64[0] * _Q2.f64[0];
  *(float64_t *)(a2 + 1792) = result;
  *(float64x2_t *)(a2 + 1680) = vmlaq_n_f64(v273, v176, _Q2.f64[0]);
  *(float64x2_t *)(a2 + 1776) = vmlaq_n_f64(v190, _Q30, _Q2.f64[0]);
  *(float64x2_t *)(a2 + 1760) = vmlaq_n_f64(v189, v40, _Q2.f64[0]);
  *(float64x2_t *)(a2 + 1744) = vmlaq_n_f64(v188, _Q3, _Q2.f64[0]);
  *(float64x2_t *)(a2 + 1728) = vmlaq_n_f64(v187, _Q7, _Q2.f64[0]);
  *(float64x2_t *)(a2 + 1712) = vmlaq_n_f64(v259, v41, _Q2.f64[0]);
  *(float64x2_t *)(a2 + 1696) = vmlaq_n_f64(v266, v175, _Q2.f64[0]);
  return result;
}

