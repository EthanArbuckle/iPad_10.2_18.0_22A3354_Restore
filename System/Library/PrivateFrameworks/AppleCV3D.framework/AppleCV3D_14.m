void sub_20EDB36DC(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  BOOL v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v35 = (v5 - v9) >> 2;
      if (v5 == v9)
        v35 = 1;
      if (!(v35 >> 61))
      {
        v36 = v35 >> 2;
        v37 = 8 * v35;
        v38 = (char *)operator new(8 * v35);
        v39 = &v38[8 * v36];
        v40 = &v38[v37];
        v42 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v42 & 0xFFFFFFFFFFFFFFF8];
          v43 = v42 - 8;
          if ((unint64_t)(v42 - 8) >= 0x38)
          {
            v73 = &v38[8 * v36];
            v44 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v43 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v44 = &v39[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v44 = &v38[8 * v36];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v44 = v80;
            v44 += 8;
          }
          while (v44 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      sub_20E877A38();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0x1000uLL);
      sub_20E8D0C84((char **)a1, &v89);
      return;
    }
    v89 = operator new(0x1000uLL);
    sub_20E8D0E10((void **)a1, &v89);
    v45 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v45 + 1);
    v8 = *v45;
    *(_QWORD *)(a1 + 8) = v45 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v46 = (v5 - v9) >> 2;
      if (v5 == v9)
        v46 = 1;
      if (!(v46 >> 61))
      {
        v47 = v46 >> 2;
        v48 = 8 * v46;
        v38 = (char *)operator new(8 * v46);
        v39 = &v38[8 * v47];
        v40 = &v38[v48];
        v49 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v49 & 0xFFFFFFFFFFFFFFF8];
          v50 = v49 - 8;
          if ((unint64_t)(v49 - 8) >= 0x38)
          {
            v81 = &v38[8 * v47];
            v51 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v50 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v51 = &v39[v83];
              v7 += v83;
              v84 = (__int128 *)(v45 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v51 = &v38[8 * v47];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v51 = v88;
            v51 += 8;
          }
          while (v51 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v38;
        *(_QWORD *)(a1 + 8) = v39;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v40;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = v26;
  v28 = &v25[8 * v21];
  v29 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19)
        v52 = 1;
      else
        v52 = v20 >> 2;
      if (v52 >> 61)
        sub_20E877A38();
      v28 = (char *)operator new(8 * v52);
      v29 = &v28[8 * v52];
      operator delete(v25);
      v53 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v28;
      *(_QWORD *)v28 = v27;
      v31 = v28 + 8;
      if (v18 == v53)
        goto LABEL_24;
      do
      {
LABEL_49:
        if (v28 == v25)
        {
          if (v31 >= v29)
          {
            if (v29 == v28)
              v58 = 1;
            else
              v58 = (v29 - v28) >> 2;
            if (v58 >> 61)
              sub_20E877A38();
            v59 = (char *)operator new(8 * v58);
            v25 = v59;
            v60 = (v58 + 3) >> 2;
            v54 = &v59[8 * v60];
            v33 = v54;
            v61 = v31 - v28;
            if (v31 != v28)
            {
              v33 = &v54[v61 & 0xFFFFFFFFFFFFFFF8];
              v62 = v61 - 8;
              v63 = &v59[8 * v60];
              v64 = v28;
              if (v62 < 0x38)
                goto LABEL_89;
              v65 = 8 * v60;
              v63 = &v59[8 * v60];
              v64 = v28;
              if ((unint64_t)(v63 - v28) < 0x20)
                goto LABEL_89;
              v66 = (v62 >> 3) + 1;
              v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              v63 = &v54[v67];
              v64 = &v28[v67];
              v68 = (__int128 *)(v28 + 16);
              v69 = &v59[v65 + 16];
              v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v71 = *v68;
                *((_OWORD *)v69 - 1) = *(v68 - 1);
                *(_OWORD *)v69 = v71;
                v68 += 2;
                v69 += 32;
                v70 -= 4;
              }
              while (v70);
              if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_89:
                do
                {
                  v72 = *(_QWORD *)v64;
                  v64 += 8;
                  *(_QWORD *)v63 = v72;
                  v63 += 8;
                }
                while (v63 != v33);
              }
            }
            v29 = &v59[8 * v58];
            operator delete(v28);
          }
          else
          {
            v56 = (v29 - v31) >> 3;
            if (v56 >= -1)
              v57 = v56 + 1;
            else
              v57 = v56 + 2;
            v33 = &v31[8 * (v57 >> 1)];
            v54 = &v28[8 * (v57 >> 1)];
            if (v31 == v28)
            {
              v25 = v31;
            }
            else
            {
              memmove(&v28[8 * (v57 >> 1)], v28, v31 - v28);
              v25 = v28;
            }
          }
        }
        else
        {
          v54 = v28;
          v33 = v31;
        }
        v55 = *(_QWORD *)(v18 - 8);
        v18 -= 8;
        *((_QWORD *)v54 - 1) = v55;
        v32 = v54 - 8;
        v31 = v33;
        v28 = v32;
      }
      while (v18 != *(_QWORD *)(a1 + 8));
      goto LABEL_25;
    }
    v30 = v21 + 2;
    if (v21 >= -1)
      v30 = v21 + 1;
    v28 -= 8 * (v30 >> 1);
  }
  *(_QWORD *)v28 = v26;
  v31 = v28 + 8;
  if (v18 != v19)
    goto LABEL_49;
LABEL_24:
  v32 = v28;
  v33 = v31;
LABEL_25:
  v34 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v33;
  *(_QWORD *)(a1 + 24) = v29;
  if (v34)
    operator delete(v34);
}

void sub_20EDB3C1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EDB3C38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EDB3C4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EDB3C64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_20EDB3C7C(void **a1, _BYTE *a2, char *a3)
{
  char *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  char *v39;
  int64_t v40;
  char *v41;
  size_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  int v51;

  v3 = a3;
  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 2;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_DWORD *)v9 = *(_DWORD *)a3;
      a1[1] = v9 + 4;
      return v9;
    }
    v11 = v5 - (_QWORD)(v9 + 4);
    v12 = v11 >> 2;
    v13 = (int *)(v5 - 4);
    if (v5 < 4)
    {
      v17 = a1[1];
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      v15 = v14 + v6 + 4;
      if (v5 > v15)
        v15 = (unint64_t)a1[1];
      v16 = v15 + ~v6 - v14;
      if (v16 >= 0x2C)
      {
        v17 = a1[1];
        if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFFCLL) + 4 - v6] >= 0x20)
        {
          v45 = (v16 >> 2) + 1;
          v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
          v13 = (int *)((char *)v13 + v46);
          v17 = (_DWORD *)(v5 + v46);
          v47 = (_OWORD *)(v5 + 16);
          v48 = (__int128 *)(4 * v12 + 4 * v8 + v6 + 16);
          v49 = v45 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v50 = *v48;
            *(v47 - 1) = *(v48 - 1);
            *v47 = v50;
            v47 += 2;
            v48 += 2;
            v49 -= 8;
          }
          while (v49);
          if (v45 == (v45 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_49;
        }
      }
      else
      {
        v17 = a1[1];
      }
      do
      {
        v51 = *v13++;
        *v17++ = v51;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_49:
    a1[1] = v17;
    if ((char *)v5 != v9 + 4)
      memmove((void *)(v5 - 4 * v12), v9, v11);
    if (v9 <= v3)
      v3 += 4 * (a1[1] > v3);
    *(_DWORD *)v9 = *(_DWORD *)v3;
    return v9;
  }
  v18 = ((uint64_t)(v5 - v6) >> 2) + 1;
  if (v18 >> 62)
    sub_20E867F44();
  v20 = v10 - v6;
  if (v20 >> 1 > v18)
    v18 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 62)
      sub_20E877A38();
    v22 = (char *)operator new(4 * v21);
    v23 = &v22[4 * v8];
    v24 = &v22[4 * v21];
    if (v8 != v21)
      goto LABEL_24;
  }
  else
  {
    v22 = 0;
    v23 = (char *)(4 * v8);
    v24 = 0;
    if (v8)
      goto LABEL_24;
  }
  if (v7 < 1)
  {
    if ((_BYTE *)v6 == a2)
      v44 = 1;
    else
      v44 = v7 >> 1;
    if (v44 >> 62)
      sub_20E877A38();
    v23 = (char *)operator new(4 * v44);
    v24 = &v23[4 * v44];
    if (v22)
    {
      operator delete(v22);
      v24 = &v23[4 * v44];
      v26 = (char *)*a1;
      *(_DWORD *)v23 = *(_DWORD *)v3;
      v27 = v23 + 4;
      v28 = v23;
      if (v26 != v9)
        goto LABEL_25;
      goto LABEL_31;
    }
  }
  else
  {
    v25 = v8 + 2;
    if (v8 >= -1)
      v25 = v8 + 1;
    v23 -= 4 * (v25 >> 1);
  }
LABEL_24:
  v26 = (char *)v6;
  *(_DWORD *)v23 = *(_DWORD *)v3;
  v27 = v23 + 4;
  v28 = v23;
  if ((char *)v6 != v9)
  {
LABEL_25:
    v29 = (char *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6);
    v30 = v29 - v26 - 4;
    v31 = v9;
    v28 = v23;
    if (v30 < 0x2C)
      goto LABEL_60;
    v31 = v9;
    v28 = v23;
    if ((unint64_t)(v29 - v23) < 0x20)
      goto LABEL_60;
    v32 = (v30 >> 2) + 1;
    v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
    v31 = &v9[-v33];
    v28 = &v23[-v33];
    v34 = v23 - 16;
    v35 = (__int128 *)(v6 + 4 * v8 - 16);
    v36 = v32 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v37 = *v35;
      *((_OWORD *)v34 - 1) = *(v35 - 1);
      *(_OWORD *)v34 = v37;
      v34 -= 32;
      v35 -= 2;
      v36 -= 8;
    }
    while (v36);
    if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_60:
      do
      {
        v38 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v28 - 1) = v38;
        v28 -= 4;
      }
      while (v31 != v26);
    }
  }
LABEL_31:
  v39 = (char *)a1[1];
  v40 = v39 - v9;
  if (v39 != v9)
  {
    v41 = v9;
    v42 = v39 - v9;
    v43 = v24;
    memmove(v27, v41, v42);
    v24 = v43;
    v26 = (char *)*a1;
  }
  *a1 = v28;
  a1[1] = &v27[v40];
  a1[2] = v24;
  if (v26)
    operator delete(v26);
  return v23;
}

void sub_20EDB3FEC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EDB4004(uint64_t a1)
{
  kdebug_trace();
  return a1;
}

uint64_t sub_20EDB4044(uint64_t a1)
{
  kdebug_trace();
  return a1;
}

uint64_t sub_20EDB4084(uint64_t a1)
{
  kdebug_trace();
  return a1;
}

void sub_20EDB40C4()
{
  sub_20E89FD20("vector");
}

_QWORD *sub_20EDB40D8(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20EDB426C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20E860DA4(a1);
}

uint64_t sub_20EDB4278(uint64_t a1)
{
  kdebug_trace();
  return a1;
}

uint64_t sub_20EDB42B8(uint64_t a1)
{
  kdebug_trace();
  return a1;
}

_QWORD *sub_20EDB42F8(_QWORD *result, char *a2, char *a3)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  __int128 *v20;
  _OWORD *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = a2;
  v5 = result;
  result[66] = 0;
  v6 = a3 - a2;
  v7 = (unint64_t)(a3 - a2) >> 3;
  v8 = result[65];
  if (v7 <= v8)
  {
    v10 = (_QWORD *)result[64];
  }
  else
  {
    v9 = 2 * v8;
    if (v9 > v7)
      v7 = v9;
    result[65] = v7;
    v10 = (_QWORD *)operator new[]();
    result = (_QWORD *)v5[64];
    if (result != v5 && result != 0)
      result = (_QWORD *)MEMORY[0x212BC6368]();
    v5[64] = v10;
    v12 = v5[66];
    if (v12)
    {
      v13 = v5[66];
      v14 = a3 - v4;
      if (a3 != v4)
      {
        v15 = v6 >> 3;
        if ((unint64_t)(v6 >> 3) <= 1)
          v15 = 1;
        v13 = v12 + v15;
        v5[66] = v13;
      }
      result = memmove(&v10[v13 - v12], v10, 8 * v12);
      if (v4 != a3)
      {
        if ((unint64_t)(v14 - 8) < 0x18)
          goto LABEL_28;
        if ((unint64_t)((char *)v10 - v4) < 0x20)
          goto LABEL_28;
        v16 = ((unint64_t)(v14 - 8) >> 3) + 1;
        v17 = v16 & 0x3FFFFFFFFFFFFFFCLL;
        v18 = &v10[v17];
        v19 = &v4[v17 * 8];
        v20 = (__int128 *)(v4 + 16);
        v21 = v10 + 2;
        v22 = v16 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v23 = *v20;
          *(v21 - 1) = *(v20 - 1);
          *v21 = v23;
          v20 += 2;
          v21 += 2;
          v22 -= 4;
        }
        while (v22);
        v10 = v18;
        v4 = v19;
        if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_28:
          do
          {
            v24 = *(_QWORD *)v4;
            v4 += 8;
            *v10++ = v24;
          }
          while (v4 != a3);
        }
      }
      return result;
    }
  }
  if (v4 != a3)
  {
    v25 = 0;
    do
    {
      v26 = *(_QWORD *)v4;
      v4 += 8;
      v10[v25] = v26;
      v25 = v5[66] + 1;
      v5[66] = v25;
    }
    while (v4 != a3);
  }
  return result;
}

void sub_20EDB448C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  float *v8;
  float v9;
  float v10;
  _BYTE *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  BOOL v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  char v31;
  unint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  float *v37;
  uint64_t v38;
  int32x4_t v39;
  int32x4_t v40;
  const float *v41;
  uint64_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  const float *v49;
  float v50;
  float v51;
  signed int v52;
  signed int v53;
  signed int v54;
  signed int v55;
  void *v56;
  _BYTE *v57;
  void *__p;
  void *v59;
  char *v60;
  float32x4x2_t v61;
  float32x4x2_t v62;

  v8 = (float *)operator new(0x20uLL);
  v9 = (float)(unint64_t)(a3 - 1);
  v10 = (float)(unint64_t)(a2 - 1);
  v59 = v8 + 8;
  v60 = (char *)(v8 + 8);
  *(_QWORD *)v8 = 0;
  v8[2] = v10;
  v8[3] = 0.0;
  v8[4] = v10;
  v8[5] = v9;
  v8[6] = 0.0;
  v8[7] = v9;
  __p = v8;
  sub_2100E7640(a1, (uint64_t)&__p, (char **)&v56);
  if (__p)
  {
    v59 = __p;
    operator delete(__p);
  }
  v11 = v56;
  v12 = *((float *)v56 + 2);
  v13 = *((float *)v56 + 3);
  v14 = *((float *)v56 + 1);
  v15 = v12 - *(float *)v56;
  v17 = *((float *)v56 + 4);
  v16 = *((float *)v56 + 5);
  v18 = v15 * (float)(v16 - v14);
  v20 = *((float *)v56 + 6);
  v19 = *((float *)v56 + 7);
  v21 = v15 * (float)(v19 - v14);
  v22 = v18 <= (float)((float)(v13 - v14) * (float)(v17 - *(float *)v56))
     || v21 <= (float)((float)(v13 - v14) * (float)(v20 - *(float *)v56));
  v23 = v17 - v12;
  v24 = v16 - v13;
  v25 = (float)(v17 - v12) * (float)(v19 - v13);
  v26 = v24 * (float)(v20 - v12);
  v27 = (float)(v14 - v13) * v23;
  v28 = (float)(*(float *)v56 - v12) * v24;
  if (!v22 && v27 > v28 && v25 > v26)
  {
    if (v56 == v57)
    {
      v35 = 0x7FFFFFFF;
      v36 = 0x80000000;
      v33 = 0x80000000;
      v34 = 0x7FFFFFFF;
    }
    else
    {
      v32 = v57 - (_BYTE *)v56 - 8;
      if (v32 < 0x38)
      {
        v33 = 0x80000000;
        v34 = 0x7FFFFFFF;
        v35 = 0x7FFFFFFF;
        v36 = 0x80000000;
        v37 = (float *)v56;
        goto LABEL_22;
      }
      v38 = (v32 >> 3) + 1;
      v39.i64[0] = 0x8000000080000000;
      v39.i64[1] = 0x8000000080000000;
      v40.i64[0] = 0x8000000080000000;
      v40.i64[1] = 0x8000000080000000;
      v37 = (float *)((char *)v56 + 8 * (v38 & 0x3FFFFFFFFFFFFFF8));
      v41 = (const float *)((char *)v56 + 32);
      v42 = v38 & 0x3FFFFFFFFFFFFFF8;
      v43.i64[0] = 0x8000000080000000;
      v43.i64[1] = 0x8000000080000000;
      v44.i64[0] = 0x8000000080000000;
      v44.i64[1] = 0x8000000080000000;
      v45.i64[0] = 0x8000000080000000;
      v45.i64[1] = 0x8000000080000000;
      v46.i64[0] = 0x8000000080000000;
      v46.i64[1] = 0x8000000080000000;
      v47.i64[0] = 0x8000000080000000;
      v47.i64[1] = 0x8000000080000000;
      v48.i64[0] = 0x8000000080000000;
      v48.i64[1] = 0x8000000080000000;
      do
      {
        v49 = v41 - 8;
        v61 = vld2q_f32(v49);
        v62 = vld2q_f32(v41);
        v40 = vminq_s32(v40, vcvtq_s32_f32(vrndmq_f32(v61.val[0])));
        v43 = vminq_s32(v43, vcvtq_s32_f32(vrndmq_f32(v62.val[0])));
        v39 = vmaxq_s32(v39, vcvtq_s32_f32(vrndpq_f32(v61.val[0])));
        v44 = vmaxq_s32(v44, vcvtq_s32_f32(vrndpq_f32(v62.val[0])));
        v45 = vminq_s32(v45, vcvtq_s32_f32(vrndmq_f32(v61.val[1])));
        v46 = vminq_s32(v46, vcvtq_s32_f32(vrndmq_f32(v62.val[1])));
        v47 = vmaxq_s32(v47, vcvtq_s32_f32(vrndpq_f32(v61.val[1])));
        v48 = vmaxq_s32(v48, vcvtq_s32_f32(vrndpq_f32(v62.val[1])));
        v41 += 16;
        v42 -= 8;
      }
      while (v42);
      v36 = vmaxvq_s32(vmaxq_s32(v47, v48));
      v35 = vminvq_s32(vminq_s32(v45, v46));
      v33 = vmaxvq_s32(vmaxq_s32(v39, v44));
      v34 = vminvq_s32(vminq_s32(v40, v43));
      if (v38 != (v38 & 0x3FFFFFFFFFFFFFF8))
      {
        do
        {
LABEL_22:
          v50 = *v37;
          v51 = v37[1];
          v37 += 2;
          v52 = vcvtms_s32_f32(v50);
          v53 = vcvtps_s32_f32(v50);
          if (v34 >= v52)
            v34 = v52;
          if (v33 <= v53)
            v33 = v53;
          v54 = vcvtms_s32_f32(v51);
          if (v35 >= v54)
            v35 = v54;
          v55 = vcvtps_s32_f32(v51);
          if (v36 <= v55)
            v36 = v55;
        }
        while (v37 != (float *)v57);
      }
    }
    *(_DWORD *)a4 = v34;
    *(_DWORD *)(a4 + 4) = v33;
    v31 = 1;
    *(_DWORD *)(a4 + 8) = v35;
    *(_DWORD *)(a4 + 12) = v36;
    goto LABEL_32;
  }
  v31 = 0;
  *(_BYTE *)a4 = 0;
LABEL_32:
  *(_BYTE *)(a4 + 16) = v31;
  v57 = v11;
  operator delete(v11);
}

void sub_20EDB4728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EDB4744(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double *v8;
  double v9;
  double v10;
  _BYTE *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  BOOL v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  char v31;
  unint64_t v32;
  signed __int32 v33;
  signed __int32 v34;
  signed __int32 v35;
  signed __int32 v36;
  double *v37;
  uint64_t v38;
  int32x2_t v39;
  int32x2_t v40;
  const double *v41;
  uint64_t v42;
  int32x2_t v43;
  int32x2_t v44;
  int32x2_t v45;
  int32x2_t v46;
  int32x2_t v47;
  int32x2_t v48;
  const double *v49;
  int32x2_t v50;
  int32x2_t v51;
  int32x2_t v52;
  int32x2_t v53;
  double v54;
  double v55;
  signed int v56;
  signed int v57;
  signed int v58;
  signed int v59;
  void *v60;
  _BYTE *v61;
  void *__p;
  void *v63;
  char *v64;
  float64x2x2_t v65;
  float64x2x2_t v66;

  v8 = (double *)operator new(0x40uLL);
  v9 = (double)(unint64_t)(a3 - 1);
  v10 = (double)(unint64_t)(a2 - 1);
  v63 = v8 + 8;
  v64 = (char *)(v8 + 8);
  *v8 = 0.0;
  v8[1] = 0.0;
  v8[2] = v10;
  v8[3] = 0.0;
  v8[4] = v10;
  v8[5] = v9;
  v8[6] = 0.0;
  v8[7] = v9;
  __p = v8;
  sub_2100E7804(a1, (uint64_t)&__p, (char **)&v60);
  if (__p)
  {
    v63 = __p;
    operator delete(__p);
  }
  v11 = v60;
  v12 = *((double *)v60 + 2);
  v13 = *((double *)v60 + 3);
  v14 = *((double *)v60 + 1);
  v15 = v12 - *(double *)v60;
  v17 = *((double *)v60 + 4);
  v16 = *((double *)v60 + 5);
  v18 = v15 * (v16 - v14);
  v20 = *((double *)v60 + 6);
  v19 = *((double *)v60 + 7);
  v21 = v15 * (v19 - v14);
  v22 = v18 <= (v13 - v14) * (v17 - *(double *)v60) || v21 <= (v13 - v14) * (v20 - *(double *)v60);
  v23 = v17 - v12;
  v24 = v16 - v13;
  v25 = (v17 - v12) * (v19 - v13);
  v26 = v24 * (v20 - v12);
  v27 = (v14 - v13) * v23;
  v28 = (*(double *)v60 - v12) * v24;
  if (!v22 && v27 > v28 && v25 > v26)
  {
    if (v60 == v61)
    {
      v35 = 0x7FFFFFFF;
      v36 = 0x80000000;
      v33 = 0x80000000;
      v34 = 0x7FFFFFFF;
    }
    else
    {
      v32 = v61 - (_BYTE *)v60 - 16;
      if (v32 < 0x30)
      {
        v33 = 0x80000000;
        v34 = 0x7FFFFFFF;
        v35 = 0x7FFFFFFF;
        v36 = 0x80000000;
        v37 = (double *)v60;
        goto LABEL_22;
      }
      v38 = (v32 >> 4) + 1;
      v39 = (int32x2_t)0x8000000080000000;
      v40 = (int32x2_t)0x8000000080000000;
      v37 = (double *)((char *)v60 + 16 * (v38 & 0x1FFFFFFFFFFFFFFCLL));
      v41 = (const double *)((char *)v60 + 32);
      v42 = v38 & 0x1FFFFFFFFFFFFFFCLL;
      v43 = (int32x2_t)0x8000000080000000;
      v44 = (int32x2_t)0x8000000080000000;
      v45 = (int32x2_t)0x8000000080000000;
      v46 = (int32x2_t)0x8000000080000000;
      v47 = (int32x2_t)0x8000000080000000;
      v48 = (int32x2_t)0x8000000080000000;
      do
      {
        v49 = v41 - 4;
        v65 = vld2q_f64(v49);
        v66 = vld2q_f64(v41);
        v40 = vmin_s32(v40, vmovn_s64(vcvtq_s64_f64(vrndmq_f64(v65.val[0]))));
        v43 = vmin_s32(v43, vmovn_s64(vcvtq_s64_f64(vrndmq_f64(v66.val[0]))));
        v39 = vmax_s32(v39, vmovn_s64(vcvtq_s64_f64(vrndpq_f64(v65.val[0]))));
        v44 = vmax_s32(v44, vmovn_s64(vcvtq_s64_f64(vrndpq_f64(v66.val[0]))));
        v45 = vmin_s32(v45, vmovn_s64(vcvtq_s64_f64(vrndmq_f64(v65.val[1]))));
        v46 = vmin_s32(v46, vmovn_s64(vcvtq_s64_f64(vrndmq_f64(v66.val[1]))));
        v47 = vmax_s32(v47, vmovn_s64(vcvtq_s64_f64(vrndpq_f64(v65.val[1]))));
        v48 = vmax_s32(v48, vmovn_s64(vcvtq_s64_f64(vrndpq_f64(v66.val[1]))));
        v41 += 8;
        v42 -= 4;
      }
      while (v42);
      v50 = vmax_s32(v47, v48);
      v36 = vpmax_s32(v50, v50).u32[0];
      v51 = vmin_s32(v45, v46);
      v35 = vpmin_s32(v51, v51).u32[0];
      v52 = vmax_s32(v39, v44);
      v33 = vpmax_s32(v52, v52).u32[0];
      v53 = vmin_s32(v40, v43);
      v34 = vpmin_s32(v53, v53).u32[0];
      if (v38 != (v38 & 0x1FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_22:
          v54 = *v37;
          v55 = v37[1];
          v37 += 2;
          v56 = vcvtmd_s64_f64(v54);
          v57 = vcvtpd_s64_f64(v54);
          if (v34 >= v56)
            v34 = v56;
          if (v33 <= v57)
            v33 = v57;
          v58 = vcvtmd_s64_f64(v55);
          if (v35 >= v58)
            v35 = v58;
          v59 = vcvtpd_s64_f64(v55);
          if (v36 <= v59)
            v36 = v59;
        }
        while (v37 != (double *)v61);
      }
    }
    *(_DWORD *)a4 = v34;
    *(_DWORD *)(a4 + 4) = v33;
    v31 = 1;
    *(_DWORD *)(a4 + 8) = v35;
    *(_DWORD *)(a4 + 12) = v36;
    goto LABEL_32;
  }
  v31 = 0;
  *(_BYTE *)a4 = 0;
LABEL_32:
  *(_BYTE *)(a4 + 16) = v31;
  v61 = v11;
  operator delete(v11);
}

void sub_20EDB4A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EDB4A1C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(_QWORD *)a1 = &off_24C9AFD78;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  sub_20EDA8E0C((_QWORD *)a1, a2, a2, a3, 1, 0, 0);
  return a1;
}

void sub_20EDB4A90(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v3 = (void *)v1[15];
  if (v3)
  {
    v1[16] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)v1[14];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)v1[12];
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_20EDB4B1C(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20EDB688C(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C409B7882D9);
  }
  return a1;
}

uint64_t sub_20EDB4B60(uint64_t *a1, unint64_t a2, std::mutex *this)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  _QWORD v17[2];

  std::mutex::lock(this);
  v17[0] = 0;
  v17[1] = 0;
  v16 = v17;
  sub_20EDEF020(&v16, (_QWORD *)this[1].__m_.__sig, this[1].__m_.__opaque);
  std::mutex::unlock(this);
  v6 = (_QWORD *)v17[0];
  if (!v17[0])
    goto LABEL_11;
  v7 = v17;
  v8 = (_QWORD *)v17[0];
  do
  {
    v9 = v8;
    v10 = v7;
    v11 = v8[4];
    if (v11 >= a2)
      v7 = v8;
    else
      ++v8;
    v8 = (_QWORD *)*v8;
  }
  while (v8);
  if (v7 == v17)
    goto LABEL_11;
  if (v11 < a2)
    v9 = v10;
  if (v9[4] <= a2)
  {
    v14 = 1;
  }
  else
  {
LABEL_11:
    atomic_store(0, (unsigned int *)(*a1 + 1136));
    v12 = *a1;
    *(_OWORD *)(v12 + 128) = 0u;
    *(_OWORD *)(v12 + 144) = 0u;
    *(_OWORD *)(v12 + 96) = 0u;
    *(_OWORD *)(v12 + 112) = 0u;
    *(_OWORD *)(v12 + 80) = 0u;
    *(_QWORD *)(v12 + 72) = 0x3FF0000000000000;
    *(_QWORD *)(v12 + 112) = 0x3FF0000000000000;
    *(_QWORD *)(v12 + 152) = 0x3FF0000000000000;
    *(_QWORD *)(v12 + 160) = 0;
    *(_OWORD *)(v12 + 224) = 0u;
    *(_OWORD *)(v12 + 240) = 0u;
    *(_OWORD *)(v12 + 176) = 0u;
    *(_OWORD *)(v12 + 192) = 0u;
    *(_OWORD *)(v12 + 208) = 0u;
    *(_QWORD *)(v12 + 168) = 0x3FF0000000000000;
    *(_QWORD *)(v12 + 208) = 0x3FF0000000000000;
    *(_QWORD *)(v12 + 248) = 0x3FF0000000000000;
    *(_QWORD *)(v12 + 256) = 0;
    *(_QWORD *)(v12 + 264) = 0x3FF0000000000000;
    *(_QWORD *)(v12 + 272) = 0;
    *(_QWORD *)(v12 + 280) = 0;
    *(_QWORD *)(v12 + 288) = 0;
    *(_QWORD *)(v12 + 296) = 0x3FF0000000000000;
    *(_QWORD *)(v12 + 304) = 0;
    *(_QWORD *)(v12 + 312) = 0;
    *(_QWORD *)(v12 + 320) = 0;
    *(_QWORD *)(v12 + 328) = 0x3FF0000000000000;
    v13 = *a1;
    *(_QWORD *)v13 = a2;
    *(_DWORD *)(v13 + 8) = -1;
    *(_QWORD *)(v13 + 1696) = 0;
    sub_20EDEEECC((uint64_t)this, a2, a1);
    v14 = 0;
    v6 = (_QWORD *)v17[0];
  }
  sub_20E8D03C0((uint64_t)&v16, v6);
  return v14;
}

void sub_20EDB4CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_20E8D03C0((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20EDB4CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::mutex *v11;

  sub_20E8D03C0((uint64_t)&a10, a11);
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_20EDB4CE8(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  if ((__int128 *)a1 != a2)
  {
    sub_20EDB6088((_QWORD *)(a1 + 56), *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 5);
    sub_20EDB61CC((_QWORD *)(a1 + 80), *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 6);
    sub_20EAFA238((_QWORD *)(a1 + 104), *((char **)a2 + 13), *((char **)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3);
    v7 = a2[9];
    *(_OWORD *)(a1 + 128) = a2[8];
    *(_OWORD *)(a1 + 144) = v7;
    sub_20EDB61CC((_QWORD *)(a1 + 160), *((char **)a2 + 20), *((char **)a2 + 21), (uint64_t)(*((_QWORD *)a2 + 21) - *((_QWORD *)a2 + 20)) >> 6);
  }
  *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
  return a1;
}

_QWORD *sub_20EDB4D8C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[10];
  if (v4)
  {
    a1[11] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[7];
  if (v5)
  {
    a1[8] = v5;
    operator delete(v5);
  }
  return a1;
}

_QWORD **sub_20EDB4DEC(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20EDB6628(v2);
    MEMORY[0x212BC6398](v3, 0x10B0C404CA194E4);
  }
  return a1;
}

void **sub_20EDB4E30(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  void (**v7)(char *);
  BOOL v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = v3 - 144;
      v6 = v3 - 144;
      do
      {
        v7 = *(void (***)(char *))v6;
        v6 -= 144;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

double *sub_20EDB4EA0@<X0>(double *result@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  double v42;
  double v43;

  v2 = result[91];
  v3 = result[95];
  v4 = result[99];
  v5 = result[92];
  v6 = result[96];
  v7 = result[100];
  v8 = result[94];
  v9 = result[98];
  v10 = result[102];
  v42 = v5 * v8 + v6 * v9 + v7 * v10;
  v43 = v2 * v8 + v3 * v9 + v4 * v10;
  v11 = result[93];
  v12 = v11 * v8;
  v13 = result[97];
  v14 = v12 + v13 * v9;
  v15 = result[101];
  v16 = v14 + v15 * v10;
  v17 = result[9];
  v18 = result[10];
  v19 = result[13];
  v20 = result[14];
  v21 = result[17];
  v22 = result[18];
  v23 = result[11];
  v24 = result[12];
  v26 = result[19];
  v25 = result[20];
  v27 = result[15];
  v28 = result[16];
  *(double *)(a2 + 32) = v2 * v17 + v3 * v19 + v4 * v21;
  *(double *)(a2 + 40) = v2 * v18 + v3 * v20 + v4 * v22;
  *(double *)(a2 + 48) = v2 * v23 + v4 * v26 + v3 * v27;
  *(double *)(a2 + 56) = v2 * v24 - v43 + v4 * v25 + v3 * v28;
  *(double *)(a2 + 64) = v5 * v17 + v6 * v19 + v7 * v21;
  *(double *)(a2 + 72) = v5 * v18 + v6 * v20 + v7 * v22;
  *(double *)(a2 + 80) = v6 * v27 + v5 * v23 + v7 * v26;
  *(double *)(a2 + 88) = v6 * v28 + v7 * v25 + v5 * v24 - v42;
  *(double *)(a2 + 96) = v13 * v19 + v11 * v17 + v15 * v21;
  *(double *)(a2 + 104) = v13 * v20 + v11 * v18 + v15 * v22;
  *(double *)(a2 + 112) = v11 * v23 + v15 * v26 + v13 * v27;
  *(double *)(a2 + 120) = v13 * v28 + v11 * v24 + v15 * v25 - v16;
  v29 = result[21];
  v30 = result[22];
  v31 = result[25];
  v32 = result[26];
  v33 = result[29];
  v34 = result[30];
  v35 = result[23];
  v36 = result[24];
  v37 = result[31];
  v38 = result[32];
  v39 = result[27];
  v40 = result[28];
  *(double *)(a2 + 128) = v2 * v29 + v3 * v31 + v4 * v33;
  *(double *)(a2 + 136) = v2 * v30 + v3 * v32 + v4 * v34;
  *(double *)(a2 + 144) = v2 * v35 + v4 * v37 + v3 * v39;
  *(double *)(a2 + 152) = v2 * v36 - v43 + v4 * v38 + v3 * v40;
  *(double *)(a2 + 160) = v5 * v29 + v6 * v31 + v7 * v33;
  *(double *)(a2 + 168) = v5 * v30 + v6 * v32 + v7 * v34;
  *(double *)(a2 + 176) = v6 * v39 + v5 * v35 + v7 * v37;
  *(double *)(a2 + 184) = v6 * v40 + v7 * v38 + v5 * v36 - v42;
  *(double *)(a2 + 192) = v13 * v31 + v11 * v29 + v15 * v33;
  *(double *)(a2 + 200) = v13 * v32 + v11 * v30 + v15 * v34;
  *(double *)(a2 + 208) = v11 * v35 + v15 * v37 + v13 * v39;
  *(double *)(a2 + 216) = v13 * v40 + v11 * v36 + v15 * v38 - v16;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(double *)a2 = *result;
  v41 = *((int *)result + 2);
  *(double *)(a2 + 224) = result[121];
  *(_QWORD *)(a2 + 232) = v41;
  *(_QWORD *)(a2 + 240) = 0x3FF0000000000000;
  if ((double *)(a2 + 8) != result + 2)
    return (double *)sub_20E9BF954((_QWORD *)(a2 + 8), *((char **)result + 2), *((char **)result + 3), (uint64_t)(*((_QWORD *)result + 3) - *((_QWORD *)result + 2)) >> 4);
  return result;
}

void sub_20EDB5220(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EDB523C(_QWORD *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char **v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = a2;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 2) >= __sz)
  {
    v16 = (char **)(result + 1);
    v17 = (char *)result[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v17 - v9) >> 2) >= __sz)
    {
      v24 = *result;
      if (a2 != a3)
      {
        v25 = *result;
        do
        {
          v26 = *(_QWORD *)v6;
          *(_DWORD *)(v25 + 8) = *((_DWORD *)v6 + 2);
          *(_QWORD *)v25 = v26;
          v25 += 12;
          v6 += 12;
          v24 += 12;
        }
        while (v6 != a3);
      }
      v15 = v24 - (_QWORD)v9;
    }
    else
    {
      v18 = &a2[4 * ((v17 - v9) >> 2)];
      if (v17 != v9)
      {
        v19 = 4 * ((v17 - v9) >> 2);
        do
        {
          v20 = *(_QWORD *)v6;
          *((_DWORD *)v9 + 2) = *((_DWORD *)v6 + 2);
          *(_QWORD *)v9 = v20;
          v9 += 12;
          v6 += 12;
          v19 -= 12;
        }
        while (v19);
        v9 = *v16;
      }
      v21 = v9;
      if (v18 != a3)
      {
        v21 = v9;
        v22 = v9;
        do
        {
          v23 = *(_QWORD *)v18;
          *((_DWORD *)v22 + 2) = *((_DWORD *)v18 + 2);
          *v22 = v23;
          v22 = (_QWORD *)((char *)v22 + 12);
          v18 += 12;
          v21 = (_QWORD *)((char *)v21 + 12);
        }
        while (v18 != a3);
      }
      v15 = (char *)v21 - v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x1555555555555555)
      goto LABEL_28;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v11;
    if (v12 > 0x1555555555555555)
LABEL_28:
      sub_20E867F44();
    v13 = 12 * v12;
    result = operator new(12 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = (char *)result;
    if (v6 != a3)
    {
      result = memcpy(result, v6, 12 * ((a3 - v6 - 12) / 0xCuLL) + 12);
      v14 = &v9[12 * ((a3 - v6 - 12) / 0xCuLL) + 12];
    }
    v15 = v14 - v9;
    v16 = (char **)(v7 + 1);
  }
  *v16 = &v9[v15];
  return result;
}

_QWORD *sub_20EDB5440(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v10 = *(const void **)v6;
      v9 = *(_QWORD *)(v6 + 8);
      v11 = v9 - *(_QWORD *)v6;
      if (v9 != *(_QWORD *)v6)
      {
        if (v11 < 0)
          sub_20E867F44();
        v7 = (char *)operator new(v9 - *(_QWORD *)v6);
        *a4 = v7;
        a4[1] = v7;
        a4[2] = &v7[16 * (v11 >> 4)];
        v8 = v11 & 0xFFFFFFFFFFFFFFF0;
        memcpy(v7, v10, v8);
        a4[1] = &v7[v8];
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_20EDB5514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EDB5528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EDB554C(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v5 = a1[1];
  v4 = a1[2];
  if (0x8E38E38E38E38E39 * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 72 * ((72 * a2 - 72) / 0x48) + 72;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0x8E38E38E38E38E39 * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x38E38E38E38E38ELL)
      sub_20EB849AC();
    v9 = 0x8E38E38E38E38E39 * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x1C71C71C71C71C7)
      v10 = 0x38E38E38E38E38ELL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x38E38E38E38E38ELL)
        sub_20E877A38();
      v11 = (char *)operator new(72 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[72 * v7];
    v14 = &v11[72 * v10];
    v15 = 72 * ((72 * a2 - 72) / 0x48) + 72;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        *(_OWORD *)(v13 - 72) = *(_OWORD *)(v5 - 72);
        v17 = *(_OWORD *)(v5 - 56);
        v18 = *(_OWORD *)(v5 - 40);
        v19 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v13 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v13 - 24) = v19;
        *(_OWORD *)(v13 - 40) = v18;
        *(_OWORD *)(v13 - 56) = v17;
        v13 -= 72;
        v5 -= 72;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_20EDB5734(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v10;

  *(_QWORD *)a1 = &off_24C9E9690;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  v3 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)&v10 = *(_QWORD *)(a2 + 88);
  *((_QWORD *)&v10 + 1) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_20EDB585C(a1, &v10, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(unsigned __int8 *)(a2 + 8), (uint64_t *)(a2 + 72));
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (!*((_QWORD *)&v10 + 1))
    return a1;
  v7 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EDB5830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  void *v6;
  va_list va;

  va_start(va, a3);
  sub_20E86665C((uint64_t)va);
  v6 = *(void **)(v3 + 120);
  if (v6)
  {
    *(_QWORD *)(v3 + 128) = v6;
    operator delete(v6);
  }
  sub_20E8E5AE4(v4);
  _Unwind_Resume(a1);
}

void sub_20EDB585C(uint64_t a1, __int128 *a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t *a9)
{
  uint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a8)
    v17 = a3;
  else
    v17 = 0;
  if (a7 + a6 * a3 + v17 > a4
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 306, (uint64_t)"widthStep >= minimum_width_step", 31, (uint64_t)"widthStep must be at least as big as minimum_width_step.", 56, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v18 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v19 = *(std::__shared_weak_count **)(a1 + 96);
  *(_OWORD *)(a1 + 88) = v18;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(_QWORD *)(a1 + 120);
  *(_BYTE *)(a1 + 8) = a8;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = a5;
  *(_QWORD *)(a1 + 16) = a6;
  *(_QWORD *)(a1 + 24) = a7;
  v23 = *a9;
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a9 + 8);
  v24 = a8 | (unint64_t)(4 * a6);
  *(_QWORD *)(a1 + 64) = v24;
  *(_QWORD *)(a1 + 72) = v23;
  *(_QWORD *)(a1 + 56) = v24 + a7;
  v25 = (*(_QWORD *)(a1 + 128) - v22) >> 3;
  if (a5 > v25)
  {
    sub_20EA6462C((void **)(a1 + 120), a5 - v25);
LABEL_16:
    v26 = 0;
    v27 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v27++) = *(_QWORD *)(a1 + 88) + v26;
      v26 += 4 * a4;
    }
    while (a5 != v27);
    return;
  }
  if (a5 < v25)
    *(_QWORD *)(a1 + 128) = v22 + 8 * a5;
  if (a5)
    goto LABEL_16;
}

_QWORD *sub_20EDB59DC(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_24C9E9690;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[14];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = (std::__shared_weak_count *)a1[12];
      if (v6)
        goto LABEL_8;
      return a1;
    }
  }
  v6 = (std::__shared_weak_count *)a1[12];
  if (!v6)
    return a1;
LABEL_8:
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EDB5AA4(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_24C9E9690;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[14];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)a1[12];
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)a1[12];
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EDB5B6C(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;

  a1[18] = &off_24C9AFD78;
  v2 = (void *)a1[33];
  if (v2)
  {
    a1[34] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[32];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)a1[30];
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)a1[30];
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  *a1 = &off_24C9AFD78;
  v9 = (void *)a1[15];
  if (v9)
  {
    a1[16] = v9;
    operator delete(v9);
  }
  v10 = (std::__shared_weak_count *)a1[14];
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      v13 = (std::__shared_weak_count *)a1[12];
      if (v13)
        goto LABEL_20;
      return a1;
    }
  }
  v13 = (std::__shared_weak_count *)a1[12];
  if (!v13)
    return a1;
LABEL_20:
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return a1;
}

_QWORD *sub_20EDB5CD0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void *v10;
  void (***v11)(_QWORD);
  void (***v12)(_QWORD);
  void (**v13)(_QWORD);
  BOOL v14;
  void (***v15)(_QWORD);
  void (***v16)(_QWORD);
  void *v17;
  void (***v18)(_QWORD);
  void (***v19)(_QWORD);
  void (**v20)(_QWORD);
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  void (**v29)(char *);
  void (***v30)(_QWORD);
  void (***v31)(_QWORD);
  void *v32;
  void (***v33)(_QWORD);
  void (***v34)(_QWORD);
  void (**v35)(_QWORD);
  void (***v36)(_QWORD);
  void (***v37)(_QWORD);
  void *v38;
  void (***v39)(_QWORD);
  void (***v40)(_QWORD);
  void (**v41)(_QWORD);
  void (***v42)(_QWORD);
  void (***v43)(_QWORD);
  void *v44;
  void (***v45)(_QWORD);
  void (***v46)(_QWORD);
  void (**v47)(_QWORD);
  void (***v48)(_QWORD);
  void (***v49)(_QWORD);
  void *v50;
  void (***v51)(_QWORD);
  void (***v52)(_QWORD);
  void (**v53)(_QWORD);
  void (***v54)(_QWORD);
  void (***v55)(_QWORD);
  void *v56;
  void (***v57)(_QWORD);
  void (***v58)(_QWORD);
  void (**v59)(_QWORD);
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;

  v2 = (std::__shared_weak_count *)a1[202];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[134];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[134];
  if (v5)
  {
LABEL_6:
    a1[135] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (void *)a1[131];
  if (v6)
  {
    a1[132] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[128];
  if (v7)
  {
    a1[129] = v7;
    operator delete(v7);
  }
  sub_20EDB5B6C(a1 + 91);
  v8 = (void (***)(_QWORD))a1[33];
  if (v8)
  {
    v9 = (void (***)(_QWORD))a1[34];
    v10 = (void *)a1[33];
    if (v9 != v8)
    {
      v11 = v9 - 18;
      v12 = v9 - 18;
      do
      {
        v13 = *v12;
        v12 -= 18;
        (*v13)(v11);
        v14 = v11 == v8;
        v11 = v12;
      }
      while (!v14);
      v10 = (void *)a1[33];
    }
    a1[34] = v8;
    operator delete(v10);
  }
  v15 = (void (***)(_QWORD))a1[30];
  if (v15)
  {
    v16 = (void (***)(_QWORD))a1[31];
    v17 = (void *)a1[30];
    if (v16 != v15)
    {
      v18 = v16 - 18;
      v19 = v16 - 18;
      do
      {
        v20 = *v19;
        v19 -= 18;
        (*v20)(v18);
        v14 = v18 == v15;
        v18 = v19;
      }
      while (!v14);
      v17 = (void *)a1[30];
    }
    a1[31] = v15;
    operator delete(v17);
  }
  v21 = (std::__shared_weak_count *)a1[29];
  if (!v21)
    goto LABEL_29;
  v22 = (unint64_t *)&v21->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    v24 = (char *)a1[25];
    if (!v24)
      goto LABEL_36;
  }
  else
  {
LABEL_29:
    v24 = (char *)a1[25];
    if (!v24)
      goto LABEL_36;
  }
  v25 = (char *)a1[26];
  v26 = v24;
  if (v25 != v24)
  {
    v27 = v25 - 144;
    v28 = v25 - 144;
    do
    {
      v29 = *(void (***)(char *))v28;
      v28 -= 144;
      (*v29)(v27);
      v14 = v27 == v24;
      v27 = v28;
    }
    while (!v14);
    v26 = (char *)a1[25];
  }
  a1[26] = v24;
  operator delete(v26);
LABEL_36:
  v30 = (void (***)(_QWORD))a1[22];
  if (v30)
  {
    v31 = (void (***)(_QWORD))a1[23];
    v32 = (void *)a1[22];
    if (v31 != v30)
    {
      v33 = v31 - 18;
      v34 = v31 - 18;
      do
      {
        v35 = *v34;
        v34 -= 18;
        (*v35)(v33);
        v14 = v33 == v30;
        v33 = v34;
      }
      while (!v14);
      v32 = (void *)a1[22];
    }
    a1[23] = v30;
    operator delete(v32);
  }
  v36 = (void (***)(_QWORD))a1[19];
  if (v36)
  {
    v37 = (void (***)(_QWORD))a1[20];
    v38 = (void *)a1[19];
    if (v37 != v36)
    {
      v39 = v37 - 18;
      v40 = v37 - 18;
      do
      {
        v41 = *v40;
        v40 -= 18;
        (*v41)(v39);
        v14 = v39 == v36;
        v39 = v40;
      }
      while (!v14);
      v38 = (void *)a1[19];
    }
    a1[20] = v36;
    operator delete(v38);
  }
  v42 = (void (***)(_QWORD))a1[16];
  if (v42)
  {
    v43 = (void (***)(_QWORD))a1[17];
    v44 = (void *)a1[16];
    if (v43 != v42)
    {
      v45 = v43 - 18;
      v46 = v43 - 18;
      do
      {
        v47 = *v46;
        v46 -= 18;
        (*v47)(v45);
        v14 = v45 == v42;
        v45 = v46;
      }
      while (!v14);
      v44 = (void *)a1[16];
    }
    a1[17] = v42;
    operator delete(v44);
  }
  v48 = (void (***)(_QWORD))a1[13];
  if (v48)
  {
    v49 = (void (***)(_QWORD))a1[14];
    v50 = (void *)a1[13];
    if (v49 != v48)
    {
      v51 = v49 - 18;
      v52 = v49 - 18;
      do
      {
        v53 = *v52;
        v52 -= 18;
        (*v53)(v51);
        v14 = v51 == v48;
        v51 = v52;
      }
      while (!v14);
      v50 = (void *)a1[13];
    }
    a1[14] = v48;
    operator delete(v50);
  }
  v54 = (void (***)(_QWORD))a1[10];
  if (v54)
  {
    v55 = (void (***)(_QWORD))a1[11];
    v56 = (void *)a1[10];
    if (v55 != v54)
    {
      v57 = v55 - 18;
      v58 = v55 - 18;
      do
      {
        v59 = *v58;
        v58 -= 18;
        (*v59)(v57);
        v14 = v57 == v54;
        v57 = v58;
      }
      while (!v14);
      v56 = (void *)a1[10];
    }
    a1[11] = v54;
    operator delete(v56);
  }
  v60 = (std::__shared_weak_count *)a1[9];
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
      v63 = (std::__shared_weak_count *)a1[7];
      if (v63)
        goto LABEL_76;
      return a1;
    }
  }
  v63 = (std::__shared_weak_count *)a1[7];
  if (!v63)
    return a1;
LABEL_76:
  v64 = (unint64_t *)&v63->__shared_owners_;
  do
    v65 = __ldaxr(v64);
  while (__stlxr(v65 - 1, v64));
  if (v65)
    return a1;
  ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
  std::__shared_weak_count::__release_weak(v63);
  return a1;
}

_QWORD *sub_20EDB6088(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 5)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 59)
      goto LABEL_22;
    v10 = v8 >> 4;
    if (v8 >> 4 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    v12 = 0x7FFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 59)
LABEL_22:
      sub_20E867F44();
    v13 = 4 * v12;
    result = operator new(32 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 5;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[32 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

_QWORD *sub_20EDB61CC(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 6)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 58)
      goto LABEL_22;
    v10 = v8 >> 5;
    if (v8 >> 5 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0;
    v12 = 0x3FFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 58)
LABEL_22:
      sub_20ED343A8();
    v13 = v12 << 6;
    result = operator new(v12 << 6);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 6;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[64 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

uint64_t sub_20EDB6310(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  size_t v21;
  __int128 v22;
  __int128 v23;
  _BYTE *v24;
  _BYTE *v25;
  int64_t v26;
  char *v27;
  char *v28;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v8 = (_BYTE *)*((_QWORD *)a2 + 7);
  v7 = (_BYTE *)*((_QWORD *)a2 + 8);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      sub_20E867F44();
    v10 = (char *)operator new(v7 - v8);
    *(_QWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 64) = v10;
    v11 = &v10[32 * (v9 >> 5)];
    *(_QWORD *)(a1 + 72) = v11;
    memcpy(v10, v8, v9);
    *(_QWORD *)(a1 + 64) = v11;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v13 = (_BYTE *)*((_QWORD *)a2 + 10);
  v12 = (_BYTE *)*((_QWORD *)a2 + 11);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      sub_20ED343A8();
    v15 = (char *)operator new(v12 - v13);
    *(_QWORD *)(a1 + 80) = v15;
    *(_QWORD *)(a1 + 88) = v15;
    v16 = &v15[64 * (v14 >> 6)];
    *(_QWORD *)(a1 + 96) = v16;
    memcpy(v15, v13, v14);
    *(_QWORD *)(a1 + 88) = v16;
  }
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v18 = (_BYTE *)*((_QWORD *)a2 + 13);
  v17 = (_BYTE *)*((_QWORD *)a2 + 14);
  v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0)
      sub_20E969238();
    v20 = (char *)operator new(v17 - v18);
    *(_QWORD *)(a1 + 104) = v20;
    *(_QWORD *)(a1 + 112) = v20;
    *(_QWORD *)(a1 + 120) = &v20[8 * (v19 >> 3)];
    v21 = v19 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v20, v18, v21);
    *(_QWORD *)(a1 + 112) = &v20[v21];
  }
  v22 = a2[8];
  v23 = a2[9];
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = v22;
  *(_OWORD *)(a1 + 144) = v23;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  v25 = (_BYTE *)*((_QWORD *)a2 + 20);
  v24 = (_BYTE *)*((_QWORD *)a2 + 21);
  v26 = v24 - v25;
  if (v24 != v25)
  {
    if (v26 < 0)
      sub_20ED343A8();
    v27 = (char *)operator new(v24 - v25);
    *(_QWORD *)(a1 + 160) = v27;
    *(_QWORD *)(a1 + 168) = v27;
    v28 = &v27[64 * (v26 >> 6)];
    *(_QWORD *)(a1 + 176) = v28;
    memcpy(v27, v25, v26);
    *(_QWORD *)(a1 + 168) = v28;
  }
  *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
  return a1;
}

void sub_20EDB64C0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v7 = *v5;
  if (*v5)
  {
    v1[21] = v7;
    operator delete(v7);
    v8 = *v4;
    if (!*v4)
    {
LABEL_3:
      v9 = *v3;
      if (!*v3)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v8 = *v4;
    if (!*v4)
      goto LABEL_3;
  }
  v1[14] = v8;
  operator delete(v8);
  v9 = *v3;
  if (!*v3)
  {
LABEL_4:
    v10 = *v2;
    if (!*v2)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  v1[11] = v9;
  operator delete(v9);
  v10 = *v2;
  if (!*v2)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_5:
  v1[8] = v10;
  operator delete(v10);
  goto LABEL_6;
}

void sub_20EDB6548()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20EDB64ECLL);
  JUMPOUT(0x20EDB64E4);
}

uint64_t sub_20EDB6558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      sub_20EDB6310(a4 + v7, (__int128 *)(a2 + v7));
      v7 += 192;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_20EDB65B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  if (v2)
  {
    v4 = v1 - 32;
    do
    {
      v5 = *(void **)(v4 + v2);
      if (v5)
      {
        *(_QWORD *)(v4 + v2 + 8) = v5;
        operator delete(v5);
      }
      v6 = v4 + v2;
      v7 = *(void **)(v4 + v2 - 56);
      if (v7)
      {
        *(_QWORD *)(v6 - 48) = v7;
        operator delete(v7);
      }
      v8 = *(void **)(v6 - 80);
      if (v8)
      {
        *(_QWORD *)(v4 + v2 - 72) = v8;
        operator delete(v8);
      }
      v9 = *(void **)(v4 + v2 - 104);
      if (v9)
      {
        *(_QWORD *)(v4 + v2 - 96) = v9;
        operator delete(v9);
      }
      v2 -= 192;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EDB6628(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  sub_20E990EA4(a1 + 25);
  v2 = (void *)a1[22];
  if (v2)
  {
    a1[23] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[12];
  if (v3)
  {
    a1[13] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  v6 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v6)
  {
    v7 = (void *)v6[20];
    if (v7)
    {
      v6[21] = v7;
      operator delete(v7);
    }
    v8 = (void *)v6[13];
    if (v8)
    {
      v6[14] = v8;
      operator delete(v8);
    }
    v9 = (void *)v6[10];
    if (v9)
    {
      v6[11] = v9;
      operator delete(v9);
    }
    v10 = (void *)v6[7];
    if (v10)
    {
      v6[8] = v10;
      operator delete(v10);
    }
    MEMORY[0x212BC6398](v6, 0x1020C4069399AA6);
  }
  return a1;
}

_QWORD *sub_20EDB66F4(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0x8E38E38E38E38E39 * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x38E38E38E38E38ELL)
      goto LABEL_23;
    v10 = 0x8E38E38E38E38E39 * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x1C71C71C71C71C7 ? 0x38E38E38E38E38ELL : v11;
    if (v12 > 0x38E38E38E38E38ELL)
LABEL_23:
      sub_20EB849AC();
    v13 = 9 * v12;
    result = operator new(72 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0x8E38E38E38E38E39 * ((v16 - v9) >> 3) >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

uint64_t *sub_20EDB688C(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;

  v2 = (_QWORD *)a1[29];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20EDB196C(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[27];
  a1[27] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[24];
  if (v5)
  {
    do
    {
      v14 = (_QWORD *)*v5;
      v15 = (_QWORD *)v5[5];
      if (v15)
      {
        do
        {
          v16 = (_QWORD *)*v15;
          operator delete(v15);
          v15 = v16;
        }
        while (v16);
      }
      v17 = (void *)v5[3];
      v5[3] = 0;
      if (v17)
        operator delete(v17);
      operator delete(v5);
      v5 = v14;
    }
    while (v14);
  }
  v6 = (void *)a1[22];
  a1[22] = 0;
  if (v6)
    operator delete(v6);
  v7 = (_QWORD *)a1[19];
  if (v7)
  {
    do
    {
      v18 = (_QWORD *)*v7;
      v19 = (_QWORD *)v7[5];
      if (v19)
      {
        do
        {
          v20 = (_QWORD *)*v19;
          operator delete(v19);
          v19 = v20;
        }
        while (v20);
      }
      v21 = (void *)v7[3];
      v7[3] = 0;
      if (v21)
        operator delete(v21);
      operator delete(v7);
      v7 = v18;
    }
    while (v18);
  }
  v8 = (void *)a1[17];
  a1[17] = 0;
  if (v8)
    operator delete(v8);
  v9 = (_QWORD *)a1[14];
  if (v9)
  {
    do
    {
      v22 = (_QWORD *)*v9;
      v23 = (void *)v9[3];
      if (v23)
      {
        v9[4] = v23;
        operator delete(v23);
      }
      operator delete(v9);
      v9 = v22;
    }
    while (v22);
  }
  v10 = (void *)a1[12];
  a1[12] = 0;
  if (v10)
    operator delete(v10);
  if (*((char *)a1 + 71) < 0)
  {
    operator delete((void *)a1[6]);
    if ((*((char *)a1 + 47) & 0x80000000) == 0)
    {
LABEL_16:
      v11 = a1[1];
      a1[1] = 0;
      if (!v11)
        goto LABEL_17;
LABEL_34:
      v24 = *(_QWORD **)(v11 + 16);
      if (v24)
      {
        do
        {
          v32 = (_QWORD *)*v24;
          v33 = v24[3];
          if (v33)
          {
            v34 = v24[4];
            v31 = (void *)v24[3];
            if (v34 != v33)
            {
              v35 = v24[4];
              do
              {
                v37 = *(void **)(v35 - 24);
                v35 -= 24;
                v36 = v37;
                if (v37)
                {
                  *(_QWORD *)(v34 - 16) = v36;
                  operator delete(v36);
                }
                v34 = v35;
              }
              while (v35 != v33);
              v31 = (void *)v24[3];
            }
            v24[4] = v33;
            operator delete(v31);
          }
          operator delete(v24);
          v24 = v32;
        }
        while (v32);
      }
      v25 = *(void **)v11;
      *(_QWORD *)v11 = 0;
      if (v25)
        operator delete(v25);
      MEMORY[0x212BC6398](v11, 0x10A0C408EF24B1CLL);
      v12 = *a1;
      *a1 = 0;
      if (!v12)
        return a1;
      goto LABEL_38;
    }
  }
  else if ((*((char *)a1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete((void *)a1[3]);
  v11 = a1[1];
  a1[1] = 0;
  if (v11)
    goto LABEL_34;
LABEL_17:
  v12 = *a1;
  *a1 = 0;
  if (!v12)
    return a1;
LABEL_38:
  *(_QWORD *)(v12 + 400) = &off_24C9E9620;
  v26 = *(_QWORD *)(v12 + 408);
  if (v26)
  {
    v27 = *(_QWORD *)(v12 + 416);
    v28 = *(void **)(v12 + 408);
    if (v27 != v26)
    {
      do
      {
        v30 = *(_QWORD *)(v27 - 48);
        v27 -= 48;
        v29 = v30;
        if (v30)
          MEMORY[0x212BC6368](v29, 0x1000C8052888210);
      }
      while (v27 != v26);
      v28 = *(void **)(v12 + 408);
    }
    *(_QWORD *)(v12 + 416) = v26;
    operator delete(v28);
  }
  if (*(_BYTE *)(v12 + 392))
    sub_20EDB165C((void **)(v12 + 16));
  MEMORY[0x212BC6398](v12, 0x10F2C40CE21C6C7);
  return a1;
}

uint64_t sub_20EDB6B64(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 144);
    *(_QWORD *)(a1 + 16) = i - 144;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20EDB6BB8(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  void (**v15)(char *);
  BOOL v16;
  uint64_t v18;
  __int128 v19;

  v3 = 0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7)
    sub_20E867F44();
  if (0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4) > v4)
    v4 = 0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4);
  if (0x8E38E38E38E38E39 * ((uint64_t)(a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3)
    v6 = 0x1C71C71C71C71C7;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x1C71C71C71C71C7)
      sub_20E877A38();
    v7 = (char *)operator new(144 * v6);
  }
  else
  {
    v7 = 0;
  }
  v18 = (uint64_t)&v7[144 * v3];
  *((_QWORD *)&v19 + 1) = &v7[144 * v6];
  sub_20EDB79B8(v18, a2);
  v8 = 0;
  v10 = (char *)*a1;
  for (i = a1[1]; (char *)(i + v8) != v10; sub_20EDB79B8(v8 + v18, v8 + i))
    v8 -= 144;
  v12 = (char *)*a1;
  v11 = (char *)a1[1];
  *a1 = v18 + v8;
  *(_QWORD *)&v19 = v18 + 144;
  *(_OWORD *)(a1 + 1) = v19;
  if (v11 != v12)
  {
    v13 = v11 - 144;
    v14 = v11 - 144;
    do
    {
      v15 = *(void (***)(char *))v14;
      v14 -= 144;
      (*v15)(v13);
      v16 = v13 == v12;
      v13 = v14;
    }
    while (!v16);
  }
  if (v12)
    operator delete(v12);
  return v18 + 144;
}

void sub_20EDB6D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20EDB6B64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EDB6D8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 248;
        *(_QWORD *)(a1 + 16) = v2 - 248;
        v5 = *(void **)(v2 - 240);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 232) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 248;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL sub_20EDB6DF8(_QWORD *a1, _QWORD *a2, double *a3, _QWORD *a4)
{
  int v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  float v40;
  float v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t i;
  double v47;
  double v48;
  double v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  float v62;
  unsigned int v63;
  unsigned int v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  unsigned int v70;
  float v71;
  float v72;
  float v73;
  float v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  float v78;
  float v79;
  uint64_t v80;
  unsigned int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  unsigned __int8 v87;

  if (!a1[11]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImgProc/include/ODT/ImgProc/Warping.hpp", 143, (uint64_t)"result.data() != nullptr", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| a1[4] != a4[4]&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImgProc/include/ODT/ImgProc/Warping.hpp", 144, (uint64_t)"result.width() == mask.width()", 30, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| a1[6] != a4[6]&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImgProc/include/ODT/ImgProc/Warping.hpp",
         145,
         (uint64_t)"result.height() == mask.height()",
         32,
         (uint64_t)"",
         0,
         (void (*)(void **))sub_21023DDB0)
    || a2[2] != 1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImgProc/include/ODT/ImgProc/Warping.hpp", 146, (uint64_t)"ref_image.num_channels() == 1", 29, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *((_DWORD *)a1 + 8);
  v9 = *((_DWORD *)a1 + 12);
  sub_20EDB4744(a3, a2[4], a2[6], (uint64_t)&v83);
  v16 = v8 - 1;
  v17 = v9 - 1;
  v18 = v87;
  if (v87)
  {
    if (v16 >= v84)
      v19 = v84;
    else
      v19 = v8 - 1;
    v20 = v85 & ~(v85 >> 31);
    if (v17 >= v86)
      v21 = v86;
    else
      v21 = v9 - 1;
    if (v83 > 0 || v16 > v84 || v85 > 0 || v17 > v86)
    {
      v18 = v83 & ~(v83 >> 31);
      v22 = 1;
    }
    else
    {
      v22 = 0;
      v18 = 0;
    }
  }
  else
  {
    v22 = 0;
    v20 = 0;
    v21 = v9 - 1;
    v19 = v8 - 1;
  }
  v23 = a3[4];
  v24 = a3[5];
  v25 = a3[7];
  v26 = a3[8];
  v27 = a3[6];
  v28 = v23 * v26 - v24 * v25;
  v30 = a3[2];
  v29 = a3[3];
  v31 = v24 * v27;
  v32 = v23 * v27;
  v33 = v25 * v29 - v23 * v27;
  v35 = *a3;
  v34 = a3[1];
  v36 = v28 * *a3 - v34 * (v26 * v29 - v24 * v27) + v33 * v30;
  v37 = fabs(v36);
  v38 = 0.00000001;
  if (v37 > 0.00000001)
  {
    v37 = v28 * (1.0 / v36);
    v38 = (v25 * v30 - v26 * v34) * (1.0 / v36);
    v13 = (v24 * v34 - v23 * v30) * (1.0 / v36);
    v32 = (v31 - v26 * v29) * (1.0 / v36);
    v10 = (v26 * v35 - v27 * v30) * (1.0 / v36);
    v14 = (v29 * v30 - v24 * v35) * (1.0 / v36);
    v11 = v33 * (1.0 / v36);
    v12 = (v27 * v34 - v25 * v35) * (1.0 / v36);
    v15 = (v23 * v35 - v29 * v34) * (1.0 / v36);
  }
  if (v20 <= v21 && v18 <= v19)
  {
    v40 = (float)(unint64_t)(a2[4] - 1);
    v41 = (float)(unint64_t)(a2[6] - 1);
    v42 = v15 + v12 * (double)v20;
    v43 = v13 + v38 * (double)v20;
    v44 = v14 + v10 * (double)v20;
    v45 = (v19 + 1);
    for (i = v20; i != v21 + 1; ++i)
    {
      v47 = v11 * (double)v18 + v42;
      v48 = v37 * (double)v18 + v43;
      v49 = v32 * (double)v18 + v44;
      v50 = (_BYTE *)(*(_QWORD *)(a4[15] + 8 * i) + v18);
      v51 = (_BYTE *)(*(_QWORD *)(a1[15] + 8 * i) + v18);
      v52 = v45 - v18;
      do
      {
        if (fabs(v47) <= 2.22044605e-16)
        {
          v22 = 1;
          goto LABEL_32;
        }
        v53 = v22;
        v54 = v48 * (1.0 / v47);
        v22 = 1;
        if (v54 >= 0.0)
        {
          v55 = v49 * (1.0 / v47);
          if (v55 >= 0.0)
          {
            if (v54 < v40)
            {
              if (v55 >= v41)
              {
                if (vabds_f32(v55, v41) >= 0.000000001)
                  goto LABEL_32;
                v80 = *(_QWORD *)(a2[15] + 8 * a2[6] - 8);
                v81 = v54 + 1;
                LOBYTE(v31) = *(_BYTE *)(v80 + v81);
                v74 = (float)(v54 - (float)v54) * (float)LODWORD(v31);
                LOBYTE(v36) = *(_BYTE *)(v80 + v54);
                *(float *)&v31 = (float)LODWORD(v36);
                v73 = (float)((float)v81 - v54) * (float)LODWORD(v36);
              }
              else
              {
                v56 = v54;
                v57 = v55;
                v58 = a2[5];
                v59 = (v56 + 1);
                v60 = a2[11] + v58 * v57;
                v61 = (float)v59 - v54;
                v62 = (float)(v57 + 1) - v55;
                *(float *)&v63 = v61 * v62;
                *(float *)&v64 = v54 - (float)v54;
                v65 = *(float *)&v64 * v62;
                v66 = v55 - (float)v55;
                v67 = v66 * v61;
                v68 = *(float *)&v64 * v66;
                LOBYTE(v64) = *(_BYTE *)(v60 + v56);
                v69 = *(float *)&v63 * (float)v64;
                LOBYTE(v63) = *(_BYTE *)(v60 + v59);
                *(float *)&v70 = v65 * (float)v63;
                v71 = v69 + *(float *)&v70;
                LOBYTE(v70) = *(_BYTE *)(v60 + v58 + v56);
                *(float *)&v36 = (float)v70;
                v72 = v67 * *(float *)&v36;
                LOBYTE(v36) = *(_BYTE *)(v60 + v58 + v59);
                v73 = v71 + v72;
                *(float *)&v31 = (float)LODWORD(v36);
                v74 = v68 * (float)LODWORD(v36);
              }
              v79 = v73 + v74;
LABEL_45:
              v82 = (int)v79;
LABEL_46:
              *v51 = v82;
              *v50 = 1;
              v22 = v53;
              goto LABEL_32;
            }
            if (vabds_f32(v54, v40) >= 0.000000001)
              goto LABEL_32;
            if (v55 < v41)
            {
              v75 = a2[15];
              v76 = v55 + 1;
              v77 = a2[4] - 1;
              LOBYTE(v31) = *(_BYTE *)(*(_QWORD *)(v75 + 8 * v76) + v77);
              v78 = (float)(v55 - (float)v55) * (float)LODWORD(v31);
              LOBYTE(v36) = *(_BYTE *)(*(_QWORD *)(v75 + 8 * v55) + v77);
              *(float *)&v31 = (float)LODWORD(v36);
              v79 = (float)((float)((float)v76 - v55) * (float)LODWORD(v36)) + v78;
              goto LABEL_45;
            }
            if (vabds_f32(v55, v41) < 0.000000001)
            {
              LOBYTE(v82) = *(_BYTE *)(a2[4] + *(_QWORD *)(a2[15] + 8 * a2[6] - 8) - 1);
              goto LABEL_46;
            }
          }
        }
LABEL_32:
        v47 = v11 + v47;
        v48 = v37 + v48;
        v49 = v32 + v49;
        ++v50;
        ++v51;
        --v52;
      }
      while (v52);
      v42 = v12 + v42;
      v43 = v38 + v43;
      v44 = v10 + v44;
    }
  }
  return (_DWORD)v22 != 0;
}

void sub_20EDB7384(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E96C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EDB7394(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E96C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EDB73C4(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  sub_20EDB5CD0((_QWORD *)(a1 + 1848));
  return sub_20EDB7620(v1);
}

_QWORD *sub_20EDB73F0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;

  v2 = (std::__shared_weak_count *)a1[79];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      a1[59] = &off_24C9AFD78;
      v5 = (void *)a1[74];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  a1[59] = &off_24C9AFD78;
  v5 = (void *)a1[74];
  if (v5)
  {
LABEL_6:
    a1[75] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[73];
  if (!v6)
    goto LABEL_11;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v9 = (std::__shared_weak_count *)a1[71];
    if (!v9)
      goto LABEL_19;
  }
  else
  {
LABEL_11:
    v9 = (std::__shared_weak_count *)a1[71];
    if (!v9)
      goto LABEL_19;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_19:
  v12 = (std::__shared_weak_count *)a1[41];
  if (!v12)
    goto LABEL_23;
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v15 = (std::__shared_weak_count *)a1[29];
    if (!v15)
      goto LABEL_29;
  }
  else
  {
LABEL_23:
    v15 = (std::__shared_weak_count *)a1[29];
    if (!v15)
      goto LABEL_29;
  }
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_29:
  a1[1] = &off_24C9AFD78;
  v18 = (void *)a1[16];
  if (v18)
  {
    a1[17] = v18;
    operator delete(v18);
  }
  v19 = (std::__shared_weak_count *)a1[15];
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      v22 = (std::__shared_weak_count *)a1[13];
      if (v22)
        goto LABEL_36;
      return a1;
    }
  }
  v22 = (std::__shared_weak_count *)a1[13];
  if (!v22)
    return a1;
LABEL_36:
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (v24)
    return a1;
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  return a1;
}

uint64_t sub_20EDB7620(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  void *v31;

  std::mutex::~mutex((std::mutex *)(a1 + 1760));
  v2 = (void **)(a1 + 1712);
  sub_20EDB787C((_QWORD *)(a1 + 1712));
  v3 = *(void ***)(a1 + 1720);
  v4 = *(void ***)(a1 + 1728);
  if (v3 != v4)
  {
    do
    {
      v5 = *v3++;
      operator delete(v5);
    }
    while (v3 != v4);
    v6 = *(_QWORD *)(a1 + 1720);
    v7 = *(_QWORD *)(a1 + 1728);
    if (v7 != v6)
      *(_QWORD *)(a1 + 1728) = v7 + ((v6 - v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v2)
    operator delete(*v2);
  *(_QWORD *)(a1 + 1528) = &off_24C9AFD78;
  v8 = *(void **)(a1 + 1648);
  if (v8)
  {
    *(_QWORD *)(a1 + 1656) = v8;
    operator delete(v8);
  }
  v9 = *(std::__shared_weak_count **)(a1 + 1640);
  if (!v9)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = *(std::__shared_weak_count **)(a1 + 1624);
    if (!v12)
      goto LABEL_19;
  }
  else
  {
LABEL_13:
    v12 = *(std::__shared_weak_count **)(a1 + 1624);
    if (!v12)
      goto LABEL_19;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_19:
  v15 = *(void **)(a1 + 1496);
  if (v15)
  {
    *(_QWORD *)(a1 + 1504) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 1440);
  if (v16)
  {
    *(_QWORD *)(a1 + 1448) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 1416);
  if (v17)
  {
    *(_QWORD *)(a1 + 1424) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(a1 + 1392);
  if (v18)
  {
    *(_QWORD *)(a1 + 1400) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(a1 + 1304);
  if (v19)
  {
    *(_QWORD *)(a1 + 1312) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 1248);
  if (v20)
  {
    *(_QWORD *)(a1 + 1256) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(a1 + 1224);
  if (v21)
  {
    *(_QWORD *)(a1 + 1232) = v21;
    operator delete(v21);
  }
  v22 = *(void **)(a1 + 1200);
  if (v22)
  {
    *(_QWORD *)(a1 + 1208) = v22;
    operator delete(v22);
  }
  *(_QWORD *)(a1 + 992) = &off_24C9AFD78;
  v23 = *(void **)(a1 + 1112);
  if (v23)
  {
    *(_QWORD *)(a1 + 1120) = v23;
    operator delete(v23);
  }
  v24 = *(std::__shared_weak_count **)(a1 + 1104);
  if (!v24)
    goto LABEL_41;
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    v27 = *(std::__shared_weak_count **)(a1 + 1088);
    if (!v27)
      goto LABEL_47;
  }
  else
  {
LABEL_41:
    v27 = *(std::__shared_weak_count **)(a1 + 1088);
    if (!v27)
      goto LABEL_47;
  }
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
LABEL_47:
  sub_20EDB73F0((_QWORD *)(a1 + 352));
  v30 = *(void **)(a1 + 40);
  if (v30)
  {
    *(_QWORD *)(a1 + 48) = v30;
    operator delete(v30);
  }
  v31 = *(void **)(a1 + 16);
  if (v31)
  {
    *(_QWORD *)(a1 + 24) = v31;
    operator delete(v31);
  }
  return a1;
}

void sub_20EDB787C(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    v11 = 0;
  }
  else
  {
    v4 = a1[4];
    v5 = &v2[v4 >> 4];
    v6 = (uint64_t)*v5 + 336 * (v4 & 0xF);
    v7 = *(uint64_t *)((char *)v2 + (((a1[5] + v4) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 336 * ((*((_DWORD *)a1 + 10) + (int)v4) & 0xF);
    if (v6 != v7)
    {
      do
      {
        v8 = *(void **)(v6 + 24);
        if (v8)
        {
          *(_QWORD *)(v6 + 32) = v8;
          operator delete(v8);
        }
        v9 = *(void **)v6;
        if (*(_QWORD *)v6)
        {
          *(_QWORD *)(v6 + 8) = v9;
          operator delete(v9);
        }
        v6 += 336;
        if (v6 - (_QWORD)*v5 == 5376)
        {
          v10 = (uint64_t)v5[1];
          ++v5;
          v6 = v10;
        }
      }
      while (v6 != v7);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
    a1[5] = 0;
    v11 = (char *)v3 - (char *)v2;
    if (v11 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v12 = a1[2];
        v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        v11 = v12 - (_QWORD)v2;
      }
      while (v11 > 0x10);
    }
  }
  if (v11 >> 3 == 1)
  {
    v13 = 8;
  }
  else
  {
    if (v11 >> 3 != 2)
      return;
    v13 = 16;
  }
  a1[4] = v13;
}

uint64_t sub_20EDB79B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v10;

  *(_QWORD *)a1 = &off_24C9AFD78;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  v3 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)&v10 = *(_QWORD *)(a2 + 88);
  *((_QWORD *)&v10 + 1) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_20E8E9964(a1, &v10, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(unsigned __int8 *)(a2 + 8), (uint64_t *)(a2 + 72));
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (!*((_QWORD *)&v10 + 1))
    return a1;
  v7 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EDB7AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  void *v6;
  va_list va;

  va_start(va, a3);
  sub_20E86665C((uint64_t)va);
  v6 = *(void **)(v3 + 120);
  if (v6)
  {
    *(_QWORD *)(v3 + 128) = v6;
    operator delete(v6);
  }
  sub_20E8E5AE4(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_20EDB7AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  uint64_t result;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  _QWORD v12[2];

  v6 = (std::__shared_weak_count *)operator new();
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E9710;
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)a1;
  v11 = v6;
  v12[0] = a2;
  v12[1] = a3;
  result = sub_20EDB7C84((uint64_t)v12, a1, v12);
  v8 = result;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      return v8;
    }
  }
  return result;
}

void sub_20EDB7BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EDB7BC8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_20EDB7BD4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EDB7BEC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EDB7C14(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3esn6random17DistributedRandomINS1_6RandomINSt3__123mersenne_twister_engineIjLm32ELm624ELm39"
                     "7ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEENS4_"
                     "24uniform_int_distributionIlEEEC1IJllEEERS7_DpT_EUlOT_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3esn6random17DistributedRandomINS1_6RandomINSt3__123mersenne_twister_engineIjLm32"
                                "ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18"
                                "ELj1812433253EEEEENS4_24uniform_int_distributionIlEEEC1IJllEEERS7_DpT_EUlOT_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3esn6random17DistributedRandomINS1_6RandomINSt3__123mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEENS4_24uniform_int_distributionIlEEEC1IJllEEERS7_DpT_EUlOT_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3esn6random17DistributedRandomINS1_6RandomINSt3__123mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEENS4_24uniform_int_distributionIlEEEC1IJllEEERS7_DpT_EUlOT_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EDB7C84(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64x2_t v20;
  __int128 v21;
  uint64_t v22;

  result = a3[1];
  v4 = result - *a3;
  if (result != *a3)
  {
    v5 = v4 + 1;
    if (v4 == -1)
    {
      v18 = a2;
      v19 = xmmword_210378080;
      v20 = vdupq_n_s64(2uLL);
      v21 = xmmword_210313020;
      v22 = -1;
      return sub_20EDB7E28(&v18);
    }
    v7 = __clz(v5);
    v8 = 63;
    if (((v5 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v8 = 64;
    v9 = v8 - v7;
    v18 = a2;
    *(_QWORD *)&v19 = v9;
    v10 = (v8 - v7) >> 5;
    if ((v9 & 0x1F) != 0)
      v11 = v10 + 1;
    else
      v11 = v10;
    v12 = v9 / v11;
    *((_QWORD *)&v19 + 1) = v12;
    v20.i64[0] = v11;
    v13 = (-1 << (v9 / v11)) & 0x100000000;
    if (v12 >= 0x40)
      v13 = 0;
    *(_QWORD *)&v21 = v13;
    if ((v13 ^ 0x100000000) > v13 / v11)
    {
      v12 = v9 / ++v11;
      *((_QWORD *)&v19 + 1) = v12;
      v20.i64[0] = v11;
      if (v12 > 0x3F)
      {
        v20.i64[1] = v11 - (v9 % v11);
        *(_QWORD *)&v21 = 0;
        LODWORD(v12) = 64;
        goto LABEL_22;
      }
      *(_QWORD *)&v21 = (-1 << (v9 / v11)) & 0x100000000;
    }
    v20.i64[1] = v11 - v9 % v11;
    if (v12 < 0x3F)
    {
      *((_QWORD *)&v21 + 1) = 0x80000000uLL >> v12 << (v12 + 1);
      v14 = 0xFFFFFFFF >> -(char)v12;
      if (!v12)
        v14 = 0;
      LODWORD(v22) = v14;
      if (v12 >= 0x1F)
        v15 = -1;
      else
        v15 = 0xFFFFFFFF >> ~(_BYTE)v12;
      goto LABEL_23;
    }
LABEL_22:
    *((_QWORD *)&v21 + 1) = 0;
    v16 = -(int)v12;
    v15 = -1;
    LODWORD(v22) = 0xFFFFFFFF >> v16;
LABEL_23:
    HIDWORD(v22) = v15;
    do
      v17 = sub_20EDB7E28(&v18);
    while (v17 >= v5);
    return *a3 + v17;
  }
  return result;
}

uint64_t sub_20EDB7E28(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t j;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t i;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;

  v1 = a1[4];
  if (v1)
  {
    v2 = *a1;
    v3 = a1[5];
    v4 = a1[2];
    v5 = *(_QWORD *)(*a1 + 2496);
    if (v4 >= 0x40)
    {
      for (i = 0; i != v1; ++i)
      {
        do
        {
          v16 = 4 * v5;
          v17 = v5 + 397;
          v5 = (v5 + 1) % 0x270;
          v18 = *(_DWORD *)(v2 + 4 * (v17 % 0x270)) ^ ((*(_DWORD *)(v2 + 4 * v5) & 0x7FFFFFFE | *(_DWORD *)(v2 + v16) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v5) << 31) >> 31) & 0x9908B0DF;
          *(_DWORD *)(v2 + v16) = v18;
          v19 = ((v18 ^ (v18 >> 11)) << 7) & 0x9D2C5680 ^ v18 ^ (v18 >> 11);
          v20 = (v19 << 15) & 0xEFC60000 ^ v19 ^ (((v19 << 15) & 0xEFC60000 ^ v19) >> 18);
        }
        while (v3 <= v20);
      }
      v6 = (_DWORD)a1[7] & v20;
    }
    else
    {
      v6 = 0;
      for (j = 0; j != v1; ++j)
      {
        do
        {
          v8 = 4 * v5;
          v9 = v5 + 397;
          v5 = (v5 + 1) % 0x270;
          v10 = *(_DWORD *)(v2 + 4 * (v9 % 0x270)) ^ ((*(_DWORD *)(v2 + 4 * v5) & 0x7FFFFFFE | *(_DWORD *)(v2 + v8) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v5) << 31) >> 31) & 0x9908B0DF;
          *(_DWORD *)(v2 + v8) = v10;
          v11 = ((v10 ^ (v10 >> 11)) << 7) & 0x9D2C5680 ^ v10 ^ (v10 >> 11);
          v12 = (v11 << 15) & 0xEFC60000 ^ v11 ^ (((v11 << 15) & 0xEFC60000 ^ v11) >> 18);
        }
        while (v3 <= v12);
        v6 = (v6 << v4) + ((_DWORD)a1[7] & v12);
      }
    }
    *(_QWORD *)(v2 + 2496) = v5;
    v13 = a1[3];
    if (v1 < v13)
      goto LABEL_14;
    return v6;
  }
  v6 = 0;
  v13 = a1[3];
  if (!v13)
    return v6;
LABEL_14:
  v21 = *a1;
  v22 = a1[6];
  v23 = a1[2];
  v24 = *(_QWORD *)(*a1 + 2496);
  if (v23 >= 0x3F)
  {
    do
    {
      do
      {
        v31 = 4 * v24;
        v32 = v24 + 397;
        v24 = (v24 + 1) % 0x270;
        v33 = *(_DWORD *)(v21 + 4 * (v32 % 0x270)) ^ ((*(_DWORD *)(v21 + 4 * v24) & 0x7FFFFFFE | *(_DWORD *)(v21 + v31) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v21 + 4 * v24) << 31) >> 31) & 0x9908B0DF;
        *(_DWORD *)(v21 + v31) = v33;
        v34 = ((v33 ^ (v33 >> 11)) << 7) & 0x9D2C5680 ^ v33 ^ (v33 >> 11);
        v35 = (v34 << 15) & 0xEFC60000 ^ v34 ^ (((v34 << 15) & 0xEFC60000 ^ v34) >> 18);
      }
      while (v22 <= v35);
      ++v1;
    }
    while (v1 != v13);
    v36 = *((_DWORD *)a1 + 15) & v35;
    *(_QWORD *)(v21 + 2496) = v24;
    return v36;
  }
  else
  {
    v25 = v23 + 1;
    do
    {
      do
      {
        v26 = 4 * v24;
        v27 = v24 + 397;
        v24 = (v24 + 1) % 0x270;
        v28 = *(_DWORD *)(v21 + 4 * (v27 % 0x270)) ^ ((*(_DWORD *)(v21 + 4 * v24) & 0x7FFFFFFE | *(_DWORD *)(v21 + v26) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v21 + 4 * v24) << 31) >> 31) & 0x9908B0DF;
        *(_DWORD *)(v21 + v26) = v28;
        v29 = ((v28 ^ (v28 >> 11)) << 7) & 0x9D2C5680 ^ v28 ^ (v28 >> 11);
        v30 = (v29 << 15) & 0xEFC60000 ^ v29 ^ (((v29 << 15) & 0xEFC60000 ^ v29) >> 18);
      }
      while (v22 <= v30);
      v6 = (v6 << v25) + (*((_DWORD *)a1 + 15) & v30);
      ++v1;
    }
    while (v1 != v13);
    *(_QWORD *)(v21 + 2496) = v24;
    return v6;
  }
}

void sub_20EDB8158(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E9760;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EDB8168(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E9760;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EDB8198(uint64_t a1)
{
  unsigned int v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t *v7;

  v1 = *(_DWORD *)(a1 + 1016);
  if (v1 != -1)
  {
    if (v1 > 7)
    {
      if (v1 > 0xB)
      {
        if (v1 >= 0xF)
        {
          v2 = *(std::__shared_weak_count **)(a1 + 920);
          if (v2)
          {
            p_shared_owners = (unint64_t *)&v2->__shared_owners_;
            do
              v4 = __ldaxr(p_shared_owners);
            while (__stlxr(v4 - 1, p_shared_owners));
            goto LABEL_24;
          }
        }
      }
      else if (v1 > 9)
      {
        if (v1 != 10)
        {
          v2 = *(std::__shared_weak_count **)(a1 + 696);
          if (v2)
          {
            v7 = (unint64_t *)&v2->__shared_owners_;
            do
              v4 = __ldaxr(v7);
            while (__stlxr(v4 - 1, v7));
            goto LABEL_24;
          }
        }
      }
      else if (v1 == 9)
      {
        v2 = *(std::__shared_weak_count **)(a1 + 528);
        if (v2)
        {
          v5 = (unint64_t *)&v2->__shared_owners_;
          do
            v4 = __ldaxr(v5);
          while (__stlxr(v4 - 1, v5));
          goto LABEL_24;
        }
      }
    }
    else if (v1 == 7)
    {
      v2 = *(std::__shared_weak_count **)(a1 + 504);
      if (v2)
      {
        v3 = (unint64_t *)&v2->__shared_owners_;
        do
          v4 = __ldaxr(v3);
        while (__stlxr(v4 - 1, v3));
LABEL_24:
        if (!v4)
        {
          ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
          std::__shared_weak_count::__release_weak(v2);
        }
      }
    }
  }
}

_QWORD *sub_20EDB8290(_QWORD *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  char *v36;
  void *v37;
  void *__src;
  __int128 v41;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)&v2[-*a1] >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x108421084210842)
    sub_20E8E8A64();
  if (0xDEF7BDEF7BDEF7BELL * ((uint64_t)(a1[2] - (_QWORD)v3) >> 3) > v5)
    v5 = 0xDEF7BDEF7BDEF7BELL * ((uint64_t)(a1[2] - (_QWORD)v3) >> 3);
  if (0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(a1[2] - (_QWORD)v3) >> 3) >= 0x84210842108421)
    v7 = 0x108421084210842;
  else
    v7 = v5;
  if (v7)
  {
    if (v7 > 0x108421084210842)
      sub_20E877A38();
    v8 = (char *)operator new(248 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[248 * v4];
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)&v41 + 1) = &v8[248 * v7];
  *((_QWORD *)v9 + 2) = 0;
  v10 = v9 + 16;
  v11 = *(_BYTE **)(a2 + 8);
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *((_QWORD *)v9 + 3) = 0;
  v12 = *(_BYTE **)(a2 + 16);
  __src = v11;
  v13 = v12 - v11;
  if (v12 != v11)
  {
    if (v13 < 0)
      sub_20E867F44();
    v14 = (char *)operator new(v12 - v11);
    *((_QWORD *)v9 + 1) = v14;
    *v10 = v14;
    *((_QWORD *)v9 + 3) = &v14[16 * (v13 >> 4)];
    memcpy(v14, __src, v13 & 0xFFFFFFFFFFFFFFF0);
    *v10 = &v14[v13 & 0xFFFFFFFFFFFFFFF0];
  }
  v15 = *(_OWORD *)(a2 + 208);
  v16 = &v8[248 * v4];
  *((_OWORD *)v16 + 12) = *(_OWORD *)(a2 + 192);
  *((_OWORD *)v16 + 13) = v15;
  *((_OWORD *)v16 + 14) = *(_OWORD *)(a2 + 224);
  *((_QWORD *)v16 + 30) = *(_QWORD *)(a2 + 240);
  v17 = *(_OWORD *)(a2 + 144);
  *((_OWORD *)v16 + 8) = *(_OWORD *)(a2 + 128);
  *((_OWORD *)v16 + 9) = v17;
  v18 = *(_OWORD *)(a2 + 176);
  *((_OWORD *)v16 + 10) = *(_OWORD *)(a2 + 160);
  *((_OWORD *)v16 + 11) = v18;
  v19 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v16 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v16 + 5) = v19;
  v20 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v16 + 6) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v16 + 7) = v20;
  v21 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v16 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v16 + 3) = v21;
  v22 = v9 + 248;
  if (v2 == v3)
  {
    *a1 = v9;
    a1[1] = v22;
    a1[2] = *((_QWORD *)&v41 + 1);
  }
  else
  {
    v23 = 0;
    do
    {
      v24 = &v2[v23];
      v25 = &v9[v23];
      *((_QWORD *)v25 - 31) = *(_QWORD *)&v2[v23 - 248];
      *((_QWORD *)v25 - 29) = 0;
      *((_QWORD *)v25 - 28) = 0;
      *((_OWORD *)v25 - 15) = *(_OWORD *)&v2[v23 - 240];
      *((_QWORD *)v25 - 28) = *(_QWORD *)&v2[v23 - 224];
      *((_QWORD *)v24 - 29) = 0;
      *((_QWORD *)v24 - 28) = 0;
      *((_QWORD *)v24 - 30) = 0;
      v26 = *(_OWORD *)&v2[v23 - 168];
      v27 = *(_OWORD *)&v2[v23 - 152];
      v28 = *(_OWORD *)&v2[v23 - 136];
      *(_OWORD *)(v25 - 184) = *(_OWORD *)&v2[v23 - 184];
      *(_OWORD *)(v25 - 136) = v28;
      *(_OWORD *)(v25 - 152) = v27;
      *(_OWORD *)(v25 - 168) = v26;
      v29 = *(_OWORD *)&v2[v23 - 104];
      v30 = *(_OWORD *)&v2[v23 - 88];
      v31 = *(_OWORD *)&v2[v23 - 72];
      *(_OWORD *)(v25 - 120) = *(_OWORD *)&v2[v23 - 120];
      *(_OWORD *)(v25 - 72) = v31;
      *(_OWORD *)(v25 - 88) = v30;
      *(_OWORD *)(v25 - 104) = v29;
      v32 = *(_OWORD *)&v2[v23 - 40];
      v33 = *(_OWORD *)&v2[v23 - 24];
      v34 = *(_QWORD *)&v2[v23 - 8];
      *(_OWORD *)(v25 - 56) = *(_OWORD *)&v2[v23 - 56];
      *((_QWORD *)v25 - 1) = v34;
      *(_OWORD *)(v25 - 24) = v33;
      *(_OWORD *)(v25 - 40) = v32;
      v35 = *(_OWORD *)&v2[v23 - 216];
      *(_OWORD *)(v25 - 200) = *(_OWORD *)&v2[v23 - 200];
      *(_OWORD *)(v25 - 216) = v35;
      v23 -= 248;
    }
    while (&v2[v23] != v3);
    v2 = (char *)*a1;
    v36 = (char *)a1[1];
    *a1 = &v9[v23];
    *(_QWORD *)&v41 = v9 + 248;
    *(_OWORD *)(a1 + 1) = v41;
    v22 = v9 + 248;
    while (v36 != v2)
    {
      v37 = (void *)*((_QWORD *)v36 - 30);
      if (v37)
      {
        *((_QWORD *)v36 - 29) = v37;
        operator delete(v37);
      }
      v36 -= 248;
    }
  }
  if (v2)
    operator delete(v2);
  return v22;
}

void sub_20EDB857C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  void **v7;
  void *v9;
  va_list va;

  va_start(va, a6);
  v9 = *v7;
  if (*v7)
  {
    *v6 = v9;
    operator delete(v9);
  }
  sub_20EDB6D8C((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20EDB85A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 **a5, __int128 **a6)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double **v14;
  unint64_t v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  double *v19;
  unint64_t v20;
  BOOL v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  float64x2_t *v25;
  float32x2_t *v26;
  float32x2_t v27;
  char *result;
  __int32 *v29;
  unint64_t v30;
  double *v31;
  float32x2_t v32;
  float32x2_t v33;
  float64x2x2_t v34;

  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  v11 = *(_QWORD *)(a4 + 56);
  v10 = *(_QWORD *)(a4 + 64);
  v12 = (v10 - v11) >> 5;
  v14 = (double **)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 24);
  v15 = (*(_QWORD *)(a1 + 32) - v13) >> 4;
  if (v12 <= v15)
  {
    if (v12 < v15)
      *(_QWORD *)(a1 + 32) = v13 + 16 * v12;
  }
  else
  {
    sub_20EDB8744((char **)(a1 + 24), v12 - v15);
  }
  if (v10 != v11)
  {
    v16 = *(_QWORD *)(a4 + 56);
    v17 = *v14;
    if ((unint64_t)(v10 - v11) < 0x180
      || ((v18 = 2 * (v12 - 1), v19 = &v17[v18], v20 = (unint64_t)&v17[v18 + 1], v19 >= v17)
        ? (v21 = v20 >= (unint64_t)(v17 + 1))
        : (v21 = 0),
          v21 ? (v22 = (v12 - 1) >> 60 == 0) : (v22 = 0),
          !v22))
    {
      v23 = 0;
LABEL_15:
      v24 = v12 - v23;
      v25 = (float64x2_t *)&v17[2 * v23];
      v26 = (float32x2_t *)(v16 + 32 * v23);
      do
      {
        v27 = *v26;
        v26 += 4;
        *v25++ = vcvtq_f64_f32(v27);
        --v24;
      }
      while (v24);
      goto LABEL_17;
    }
    v23 = v12 & 0xFFFFFFFFFFFFFFFELL;
    v29 = (__int32 *)(v16 + 32);
    v30 = v12 & 0xFFFFFFFFFFFFFFFELL;
    v31 = *v14;
    do
    {
      v32.i32[0] = *(v29 - 8);
      v33.i32[0] = *(v29 - 7);
      v32.i32[1] = *v29;
      v34.val[0] = vcvtq_f64_f32(v32);
      v33.i32[1] = v29[1];
      v34.val[1] = vcvtq_f64_f32(v33);
      vst2q_f64(v31, v34);
      v31 += 4;
      v29 += 16;
      v30 -= 2;
    }
    while (v30);
    if (v12 != v23)
      goto LABEL_15;
  }
LABEL_17:
  if ((__int128 **)(a1 + 48) != a5)
    sub_20EDB886C((char **)(a1 + 48), *a5, a5[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)a5[1] - (char *)*a5) >> 3));
  result = (char *)(a1 + 72);
  if ((__int128 **)(a1 + 72) != a6)
    return sub_20EDB886C((char **)result, *a6, a6[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)a6[1] - (char *)*a6) >> 3));
  return result;
}

void sub_20EDB8744(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      sub_20E8E275C();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_20E877A38();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

char *sub_20EDB886C(char **a1, __int128 *a2, __int128 *a3, size_t __sz)
{
  __int128 *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char **v16;
  char *v17;
  unint64_t v18;
  __int128 *v19;
  __int128 v20;
  char *v21;
  _QWORD *v22;
  __int128 v23;
  char *v24;
  _QWORD *v25;
  __int128 v26;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    v17 = a1[1];
    v16 = a1 + 1;
    v15 = v17;
    v18 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - result) >> 3);
    if (v18 >= __sz)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          v26 = *v6;
          v25[2] = *((_QWORD *)v6 + 2);
          *(_OWORD *)v25 = v26;
          v25[3] = *((_QWORD *)v6 + 3);
          v25[4] = *((_QWORD *)v6 + 4);
          v24 += 40;
          v6 = (__int128 *)((char *)v6 + 40);
          v25 += 5;
        }
        while (v6 != a3);
      }
      *v16 = v24;
    }
    else
    {
      v19 = (__int128 *)((char *)a2 + 40 * v18);
      if (v15 != result)
      {
        do
        {
          v20 = *v6;
          *((_QWORD *)result + 2) = *((_QWORD *)v6 + 2);
          *(_OWORD *)result = v20;
          *((_QWORD *)result + 3) = *((_QWORD *)v6 + 3);
          *((_QWORD *)result + 4) = *((_QWORD *)v6 + 4);
          v6 = (__int128 *)((char *)v6 + 40);
          result += 40;
        }
        while (v6 != v19);
        result = *v16;
      }
      v21 = result;
      if (v19 != a3)
      {
        v21 = result;
        v22 = result;
        do
        {
          v23 = *v19;
          v22[2] = *((_QWORD *)v19 + 2);
          *(_OWORD *)v22 = v23;
          v22[3] = *((_QWORD *)v19 + 3);
          v22[4] = *((_QWORD *)v19 + 4);
          v21 += 40;
          v19 = (__int128 *)((char *)v19 + 40);
          v22 += 5;
        }
        while (v19 != a3);
      }
      *v16 = v21;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x666666666666666)
      goto LABEL_27;
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x333333333333333 ? 0x666666666666666 : v11;
    if (v12 > 0x666666666666666)
LABEL_27:
      sub_20E8E275C();
    v13 = 40 * v12;
    result = (char *)operator new(40 * v12);
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v14 = result;
    if (v6 != a3)
    {
      v14 = result;
      do
      {
        *(_OWORD *)v14 = *v6;
        *((_QWORD *)v14 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)(v14 + 24) = *(__int128 *)((char *)v6 + 24);
        v14 += 40;
        v6 = (__int128 *)((char *)v6 + 40);
      }
      while (v6 != a3);
    }
    a1[1] = v14;
  }
  return result;
}

BOOL sub_20EDB8AB0(__CVBuffer *a1)
{
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t BytesPerRowOfPlane;
  OSType PixelFormatType;

  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  if (!WidthOfPlane
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ODTUtils.cpp", 42, (uint64_t)"img_width", 9, (uint64_t)&unk_210260C83, 0, (void (*)(void **))sub_21023DDB0)|| !HeightOfPlane&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ODTUtils.cpp", 43, (uint64_t)"img_height", 10, (uint64_t)&unk_210260C83, 0, (void (*)(void **))sub_21023DDB0)|| !BytesPerRowOfPlane&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ODTUtils.cpp",
         44,
         (uint64_t)"stride",
         6,
         (uint64_t)&unk_210260C83,
         0,
         (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  return PixelFormatType == 1278226488 || (PixelFormatType & 0xFFFFFFEF) == 875704422;
}

BOOL sub_20EDB8BD4(__CVBuffer *a1, std::__shared_weak_count_vtbl *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  size_t Width;
  size_t Height;
  unint64_t v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 result;
  uint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  _BYTE *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (**v111)();
  unsigned __int8 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  __int128 v119;
  std::__shared_weak_count *v120;
  void *v121;
  void *v122;
  _OWORD v123[3];
  _OWORD v124[2];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  unint64_t v130[4];
  __int128 v131;
  __int128 v132;
  std::__shared_weak_count *v133;
  void *__p;
  void *v135;
  char v136;
  char v137;
  char v138;
  char v139;
  char v140;
  char v141;
  char v142;
  char v143;
  char v144;
  char v145;
  char v146;
  char v147;
  char v148;
  char v149;
  char v150;
  uint64_t v151;
  _OWORD v152[3];
  _OWORD v153[2];
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  unint64_t v159[4];
  __int128 v160;
  __int128 v161;
  std::__shared_weak_count *v162;
  void *v163;
  void *v164;
  char v165;
  char v166;
  char v167;
  char v168;
  char v169;
  char v170;
  char v171;
  char v172;
  char v173;
  char v174;
  char v175;
  char v176;
  char v177;
  char v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  void (*v182)(void);

  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  if (Width <= Height)
    v12 = Height;
  else
    v12 = Width;
  if ((double)v12 <= (double)a5)
  {
    sub_21015D058(&v127, (std::__shared_weak_count_vtbl *)a1, 1, 0);
    v44 = operator new(0x30uLL);
    v44[1] = 0;
    v44[2] = 0;
    *v44 = &off_24CA18420;
    v44[3] = &off_24CA1A9A0;
    v45 = v128;
    v44[4] = *((_QWORD *)&v127 + 1);
    v44[5] = v45;
    if (v45)
    {
      v46 = (unint64_t *)(v45 + 8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
      v48 = (std::__shared_weak_count *)v128;
      *(_QWORD *)&v123[0] = v44 + 3;
      *((_QWORD *)&v123[0] + 1) = v44;
      *(_QWORD *)&v127 = &off_24CA1A9A0;
      if ((_QWORD)v128)
      {
        v49 = (unint64_t *)(v128 + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
    }
    else
    {
      *(_QWORD *)&v123[0] = v44 + 3;
      *((_QWORD *)&v123[0] + 1) = v44;
    }
    sub_210107D4C((uint64_t *)v123, 1, (uint64_t)v152);
    sub_20E8E59D0((uint64_t)&v156, (unsigned __int8 *)v152);
    sub_20E8E9964(a3, (__int128 *)((char *)&v160 + 8), v158, *((unint64_t *)&v158 + 1), v159[0], v157, *((uint64_t *)&v157 + 1), BYTE8(v156), (uint64_t *)&v159[3]);
    v158 = 0uLL;
    v159[0] = 0;
    *(_QWORD *)&v156 = &off_24C9AFD78;
    if (v163)
    {
      v164 = v163;
      operator delete(v163);
    }
    v51 = v162;
    if (v162)
    {
      p_shared_owners = (unint64_t *)&v162->__shared_owners_;
      do
        v53 = __ldaxr(p_shared_owners);
      while (__stlxr(v53 - 1, p_shared_owners));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = (std::__shared_weak_count *)v161;
    if ((_QWORD)v161)
    {
      v55 = (unint64_t *)(v161 + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v57 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
    if (*((_QWORD *)&v155 + 1))
    {
      v58 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v60 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
    if (!*((_QWORD *)&v154 + 1))
      goto LABEL_81;
    v61 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
      v63 = (std::__shared_weak_count *)*((_QWORD *)&v123[0] + 1);
      if (!*((_QWORD *)&v123[0] + 1))
        goto LABEL_85;
    }
    else
    {
LABEL_81:
      v63 = (std::__shared_weak_count *)*((_QWORD *)&v123[0] + 1);
      if (!*((_QWORD *)&v123[0] + 1))
        goto LABEL_85;
    }
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
      if (!a2)
        goto LABEL_149;
LABEL_86:
      sub_21015D058(&v127, a2, 1, 0);
      v66 = operator new(0x30uLL);
      v66[1] = 0;
      v66[2] = 0;
      *v66 = &off_24CA18420;
      v66[3] = &off_24CA1A9A0;
      v67 = v128;
      v66[4] = *((_QWORD *)&v127 + 1);
      v66[5] = v67;
      if (v67)
      {
        v68 = (unint64_t *)(v67 + 8);
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
        v70 = (std::__shared_weak_count *)v128;
        *(_QWORD *)&v123[0] = v66 + 3;
        *((_QWORD *)&v123[0] + 1) = v66;
        *(_QWORD *)&v127 = &off_24CA1A9A0;
        if ((_QWORD)v128)
        {
          v71 = (unint64_t *)(v128 + 8);
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
      }
      else
      {
        *(_QWORD *)&v123[0] = v66 + 3;
        *((_QWORD *)&v123[0] + 1) = v66;
      }
      sub_210107D4C((uint64_t *)v123, 1, (uint64_t)v152);
      sub_20E8E59D0((uint64_t)&v156, (unsigned __int8 *)v152);
      sub_20E8E9964(a4, (__int128 *)((char *)&v160 + 8), v158, *((unint64_t *)&v158 + 1), v159[0], v157, *((uint64_t *)&v157 + 1), BYTE8(v156), (uint64_t *)&v159[3]);
      v158 = 0uLL;
      v159[0] = 0;
      *(_QWORD *)&v156 = &off_24C9AFD78;
      if (v163)
      {
        v164 = v163;
        operator delete(v163);
      }
      v73 = v162;
      if (v162)
      {
        v74 = (unint64_t *)&v162->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v76 = (std::__shared_weak_count *)v161;
      if ((_QWORD)v161)
      {
        v77 = (unint64_t *)(v161 + 8);
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      v79 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
      if (*((_QWORD *)&v155 + 1))
      {
        v80 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v82 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
      if (*((_QWORD *)&v154 + 1))
      {
        v83 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v85 = (std::__shared_weak_count *)*((_QWORD *)&v123[0] + 1);
      if (*((_QWORD *)&v123[0] + 1))
      {
        v86 = (unint64_t *)(*((_QWORD *)&v123[0] + 1) + 8);
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      goto LABEL_149;
    }
LABEL_85:
    if (!a2)
      goto LABEL_149;
    goto LABEL_86;
  }
  v13 = (double)a5 / (double)v12;
  v14 = (unint64_t)(v13 * (double)Width + 0.5);
  v15 = (unint64_t)(v13 * (double)Height + 0.5);
  result = sub_20F41E234(Width, Height, v14, v15);
  if (!result)
    return result;
  v17 = operator new();
  sub_20F41F7D4(v17, v14 | 0x100000000, v15 | 0x100000000, 0, 0, 0);
  v181 = v17;
  v182 = (void (*)(void))sub_20F41EF34;
  sub_210107000((std::__shared_weak_count_vtbl *)a1, 1, (uint64_t)v152);
  v158 = v152[2];
  *(_OWORD *)v159 = v153[0];
  *(_OWORD *)((char *)&v159[1] + 1) = *(_OWORD *)((char *)v153 + 9);
  v157 = v152[1];
  v156 = v152[0];
  v18 = v154;
  v154 = 0uLL;
  v160 = v18;
  v161 = v155;
  v165 = 0;
  v166 = 0;
  v167 = 0;
  v168 = 0;
  v169 = 0;
  v170 = 0;
  v171 = 0;
  v172 = 0;
  v173 = 0;
  v174 = 0;
  v175 = 0;
  v176 = 0;
  v177 = 0;
  v178 = 0;
  v179 = 0;
  v180 = 0;
  v163 = 0;
  v162 = 0;
  LOBYTE(v164) = 0;
  sub_20F41C808(&v181, (uint64_t)&v156, (uint64_t)v152);
  sub_20EDB9988((uint64_t)&v127, v152);
  sub_20E8E9964(a3, (__int128 *)((char *)&v131 + 8), v129, *((unint64_t *)&v129 + 1), v130[0], v128, *((uint64_t *)&v128 + 1), BYTE8(v127), (uint64_t *)&v130[3]);
  v129 = 0uLL;
  v130[0] = 0;
  *(_QWORD *)&v127 = &off_24C9AFD78;
  if (__p)
  {
    v135 = __p;
    operator delete(__p);
  }
  v19 = v133;
  if (!v133)
    goto LABEL_12;
  v20 = (unint64_t *)&v133->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    v22 = (std::__shared_weak_count *)v132;
    if (!(_QWORD)v132)
      goto LABEL_16;
  }
  else
  {
LABEL_12:
    v22 = (std::__shared_weak_count *)v132;
    if (!(_QWORD)v132)
      goto LABEL_16;
  }
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (v24)
  {
LABEL_16:
    if (a2)
      goto LABEL_17;
    goto LABEL_129;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  if (a2)
  {
LABEL_17:
    sub_210107000(a2, 1, (uint64_t)v123);
    v129 = v123[2];
    *(_OWORD *)v130 = v124[0];
    *(_OWORD *)((char *)&v130[1] + 1) = *(_OWORD *)((char *)v124 + 9);
    v127 = v123[0];
    v128 = v123[1];
    v25 = v125;
    v125 = 0uLL;
    v131 = v25;
    v132 = v126;
    v136 = 0;
    v137 = 0;
    v138 = 0;
    v139 = 0;
    v140 = 0;
    v141 = 0;
    v142 = 0;
    v143 = 0;
    v144 = 0;
    v145 = 0;
    v146 = 0;
    v147 = 0;
    v148 = 0;
    v149 = 0;
    v150 = 0;
    v151 = 0;
    __p = 0;
    v133 = 0;
    LOBYTE(v135) = 0;
    if (!v181
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FrameDownsampleNodeGroup/src/FrameDownsampler.cpp", 336, (uint64_t)"pimpl_", 6, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_20F41C808(&v181, (uint64_t)&v127, (uint64_t)v123);
    sub_20EDB9988((uint64_t)&v111, v123);
    sub_20E8E9964(a4, &v119, v115, v116, v117, v113, v114, v112, &v118);
    v115 = 0;
    v116 = 0;
    v117 = 0;
    v111 = &off_24C9AFD78;
    if (v121)
    {
      v122 = v121;
      operator delete(v121);
    }
    v26 = v120;
    if (v120)
    {
      v27 = (unint64_t *)&v120->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
    if (*((_QWORD *)&v119 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
    if (*((_QWORD *)&v126 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v125 + 1);
    if (*((_QWORD *)&v125 + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
    if (*((_QWORD *)&v132 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v132 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v131 + 1);
    if (*((_QWORD *)&v131 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
LABEL_129:
  v88 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
  if (*((_QWORD *)&v155 + 1))
  {
    v89 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
  if (*((_QWORD *)&v154 + 1))
  {
    v92 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
  if (!*((_QWORD *)&v161 + 1))
    goto LABEL_143;
  v95 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
  do
    v96 = __ldaxr(v95);
  while (__stlxr(v96 - 1, v95));
  if (!v96)
  {
    ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
    std::__shared_weak_count::__release_weak(v94);
    v97 = (std::__shared_weak_count *)*((_QWORD *)&v160 + 1);
    if (!*((_QWORD *)&v160 + 1))
      goto LABEL_147;
  }
  else
  {
LABEL_143:
    v97 = (std::__shared_weak_count *)*((_QWORD *)&v160 + 1);
    if (!*((_QWORD *)&v160 + 1))
      goto LABEL_147;
  }
  v98 = (unint64_t *)&v97->__shared_owners_;
  do
    v99 = __ldaxr(v98);
  while (__stlxr(v99 - 1, v98));
  if (v99)
  {
LABEL_147:
    v100 = v181;
    v181 = 0;
    if (!v100)
      goto LABEL_149;
    goto LABEL_148;
  }
  ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
  std::__shared_weak_count::__release_weak(v97);
  v110 = v181;
  v181 = 0;
  if (v110)
LABEL_148:
    v182();
LABEL_149:
  v101 = *(_QWORD *)(a4 + 48);
  if (v101 && *(_QWORD *)(a4 + 32))
  {
    v102 = 0;
    v103 = 0;
LABEL_152:
    v104 = *(_BYTE **)(*(_QWORD *)(a4 + 120) + 8 * v102);
    v105 = *(_QWORD *)(a4 + 32);
    while (*v104)
    {
      ++v104;
      if (!--v105)
      {
        v102 = (unsigned __int16)++v103;
        if (v101 > (unsigned __int16)v103)
          goto LABEL_152;
        goto LABEL_156;
      }
    }
  }
  else
  {
LABEL_156:
    v106 = *(std::__shared_weak_count **)(a4 + 96);
    *(_QWORD *)(a4 + 88) = 0;
    *(_QWORD *)(a4 + 96) = 0;
    if (v106)
    {
      v107 = (unint64_t *)&v106->__shared_owners_;
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
    *(_BYTE *)(a4 + 8) = 0;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_BYTE *)(a4 + 80) = 0;
    v109 = *(_QWORD *)(a4 + 120);
    if (*(_QWORD *)(a4 + 128) != v109)
      *(_QWORD *)(a4 + 128) = v109;
  }
  return 1;
}

void sub_20EDB970C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  sub_20E8E481C(&a11);
  sub_20E8E5AE4((uint64_t)&a29);
  sub_20E8E5AE4((uint64_t)&STACK[0x230]);
  sub_20E8E5AE4((uint64_t)&STACK[0x3C0]);
  sub_20E8E5AE4((uint64_t)&STACK[0x550]);
  *(_QWORD *)(v30 - 80) = 0;
  if (v29)
    (*(void (**)(uint64_t))(v30 - 72))(v29);
  _Unwind_Resume(a1);
}

void sub_20EDB97D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20E8E481C(&STACK[0x550]);
  sub_20E8E5AE4((uint64_t)&STACK[0x3C0]);
  sub_20E86665C((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20EDB9840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20E86665C((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20EDB9854(_Unwind_Exception *a1)
{
  sub_21015D41C(&STACK[0x230]);
  _Unwind_Resume(a1);
}

uint64_t sub_20EDB986C()
{
  unint64_t v0;
  void **v1;
  unsigned int v2;
  int32x4_t v3;
  int32x4_t v4;
  uint8x16_t v5;
  uint64_t (**v7)();
  void *__p[2];
  unsigned __int8 v9;
  _QWORD v10[2];

  v7 = &off_24C9B6C08;
  sub_20E9E60C8((uint64_t)&v7, (char *)__p);
  v0 = v9;
  if ((v9 & 0x80u) == 0)
    v1 = __p;
  else
    v1 = (void **)__p[0];
  if ((v9 & 0x80u) != 0)
    v0 = (unint64_t)__p[1];
  v10[0] = v1;
  v10[1] = v0;
  v2 = sub_20EA8E754((uint64_t)v10);
  if ((char)v9 < 0)
    operator delete(__p[0]);
  v3 = vdupq_n_s32(v2);
  *(int32x2_t *)v4.i8 = vdup_n_s32(v2 & 0xFFFFFFFE);
  v4.i64[1] = v3.i64[0];
  v5 = (uint8x16_t)vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v4, (int32x4_t)xmmword_2103783D0), (int16x8_t)vceqq_s32(v3, (int32x4_t)xmmword_2103783C0)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v3, (int32x4_t)xmmword_2103783E0), (int16x8_t)vceqq_s32(v3, (int32x4_t)xmmword_2103783F0)));
  v5.i8[0] = vmaxvq_u8(v5);
  *(int16x4_t *)v3.i8 = vmovn_s32(vceqq_s32(v3, (int32x4_t)xmmword_210378400));
  v3.i16[0] = vmaxv_u16(*(uint16x4_t *)v3.i8);
  return (v5.i32[0] | v3.i32[0]) & 1 | (v2 == 34) | (v2 == 36);
}

void sub_20EDB996C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EDB9988(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v10;

  *(_QWORD *)a1 = &off_24C9AFD78;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  v3 = a2[11];
  *(_QWORD *)&v10 = a2[10];
  *((_QWORD *)&v10 + 1) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_20E8E9964(a1, &v10, a2[3], a2[4], a2[5], a2[1], a2[2], *(unsigned __int8 *)a2, a2 + 8);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (!*((_QWORD *)&v10 + 1))
    return a1;
  v7 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EDB9A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  void *v6;
  va_list va;

  va_start(va, a3);
  sub_20E86665C((uint64_t)va);
  v6 = *(void **)(v3 + 120);
  if (v6)
  {
    *(_QWORD *)(v3 + 128) = v6;
    operator delete(v6);
  }
  sub_20E8E5AE4(v4);
  _Unwind_Resume(a1);
}

void sub_20EDB9AB0(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  float32x4_t v26;
  float32x4_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  int v36;

  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (_DWORD *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 2)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 4 * a2 > (unint64_t)a3)
        goto LABEL_43;
      v17 = v16 + 1;
      v8 = (_DWORD *)(v7 + 4 * (v17 & 0x7FFFFFFFFFFFFFF8));
      v18 = vld1q_dup_f32(a3);
      v19 = (float32x4_t *)(v7 + 16);
      v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_43:
        do
          *v8++ = *(_DWORD *)a3;
        while (v8 != (_DWORD *)(v7 + 4 * a2));
      }
      v8 = (_DWORD *)(v7 + 4 * a2);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  else
  {
    v9 = *(_DWORD **)a1;
    v10 = v7 - *(_QWORD *)a1;
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + a2;
    if (v12 >> 62)
      sub_20E867F44();
    v13 = v6 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_20E877A38();
      v15 = (char *)operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[4 * v11];
    v22 = (char *)(v21 + 4 * a2);
    v23 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v24 = (char *)v21;
    if (v23 < 0x13)
      goto LABEL_44;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = &v15[4 * v11];
      if (&v15[4 * a2 + v10] > (char *)a3)
        goto LABEL_44;
    }
    v25 = v23 + 1;
    v24 = (char *)(v21 + 4 * (v25 & 0x7FFFFFFFFFFFFFF8));
    v26 = vld1q_dup_f32(a3);
    v27 = (float32x4_t *)&v15[4 * v11 + 16];
    v28 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_44:
      do
      {
        *(float *)v24 = *a3;
        v24 += 4;
      }
      while (v24 != v22);
    }
    if ((_DWORD *)v7 != v9)
    {
      v29 = v7 - (_QWORD)v9 - 4;
      if (v29 < 0x2C)
        goto LABEL_45;
      if (v7 - (unint64_t)&v15[v10] < 0x20)
        goto LABEL_45;
      v30 = (v29 >> 2) + 1;
      v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
      v8 = (_DWORD *)(v7 - v31);
      v21 -= v31;
      v32 = &v15[4 * v11 - 16];
      v33 = (__int128 *)(v7 - 16);
      v34 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 8;
      }
      while (v34);
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_45:
        do
        {
          v36 = *--v8;
          *(_DWORD *)(v21 - 4) = v36;
          v21 -= 4;
        }
        while (v8 != v9);
      }
    }
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = &v15[4 * v14];
    if (v9)
      operator delete(v9);
  }
}

void sub_20EDB9D10(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  float32x4_t v26;
  float32x4_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  int v36;

  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (_DWORD *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 2)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 4 * a2 > (unint64_t)a3)
        goto LABEL_43;
      v17 = v16 + 1;
      v8 = (_DWORD *)(v7 + 4 * (v17 & 0x7FFFFFFFFFFFFFF8));
      v18 = vld1q_dup_f32(a3);
      v19 = (float32x4_t *)(v7 + 16);
      v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_43:
        do
          *v8++ = *(_DWORD *)a3;
        while (v8 != (_DWORD *)(v7 + 4 * a2));
      }
      v8 = (_DWORD *)(v7 + 4 * a2);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  else
  {
    v9 = *(_DWORD **)a1;
    v10 = v7 - *(_QWORD *)a1;
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + a2;
    if (v12 >> 62)
      sub_20E867F44();
    v13 = v6 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_20E877A38();
      v15 = (char *)operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[4 * v11];
    v22 = (char *)(v21 + 4 * a2);
    v23 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v24 = (char *)v21;
    if (v23 < 0x13)
      goto LABEL_44;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = &v15[4 * v11];
      if (&v15[4 * a2 + v10] > (char *)a3)
        goto LABEL_44;
    }
    v25 = v23 + 1;
    v24 = (char *)(v21 + 4 * (v25 & 0x7FFFFFFFFFFFFFF8));
    v26 = vld1q_dup_f32(a3);
    v27 = (float32x4_t *)&v15[4 * v11 + 16];
    v28 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_44:
      do
      {
        *(float *)v24 = *a3;
        v24 += 4;
      }
      while (v24 != v22);
    }
    if ((_DWORD *)v7 != v9)
    {
      v29 = v7 - (_QWORD)v9 - 4;
      if (v29 < 0x2C)
        goto LABEL_45;
      if (v7 - (unint64_t)&v15[v10] < 0x20)
        goto LABEL_45;
      v30 = (v29 >> 2) + 1;
      v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
      v8 = (_DWORD *)(v7 - v31);
      v21 -= v31;
      v32 = &v15[4 * v11 - 16];
      v33 = (__int128 *)(v7 - 16);
      v34 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 8;
      }
      while (v34);
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_45:
        do
        {
          v36 = *--v8;
          *(_DWORD *)(v21 - 4) = v36;
          v21 -= 4;
        }
        while (v8 != v9);
      }
    }
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = &v15[4 * v14];
    if (v9)
      operator delete(v9);
  }
}

void sub_20EDB9F70(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  _QWORD *v3;
  double *v4;
  float64x2_t v6;
  float64x2_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t i;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  float32x2_t *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t **v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  float v31;
  float v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  _BOOL8 v38;
  unint64_t v39;
  unint64_t v40;
  size_t prime;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  size_t v46;
  size_t v47;
  size_t v48;
  _QWORD *j;
  size_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint8x8_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  size_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v64;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  uint64_t **v68;
  char *v69;
  double *v70;
  uint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t **v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t k;
  unsigned __int8 v84;
  uint64_t *v85;
  float64x2_t **v88;
  float64x2_t v89;
  double v90;
  float64x2_t v91;
  float64x2_t *v92;
  double v93;
  double v95;
  double v97;
  int64x2_t v99;
  float64x2_t v104;
  double v106;
  double v109;
  float64x2_t *v110;
  float64x2_t v112;
  float64x2_t *v113;
  double v114;
  float64x2_t v116;
  uint64_t *v117;
  unint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  int v129;
  int v130;
  int8x8_t v131;
  int v132;
  unsigned int v133;
  unint64_t v134;
  uint8x8_t v135;
  unint64_t v136;
  int8x8_t **v137;
  int8x8_t *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int8x8_t v142;
  int8x8_t v143;
  int8x8_t v144;
  uint8x8_t v145;
  unint64_t v146;
  uint64_t **v147;
  uint64_t *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  uint64_t v153;
  unint64_t v154;
  _DWORD *v155;
  _DWORD *v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  std::__shared_weak_count *v161;
  char *v162;
  char *v163;
  uint64_t **v164;
  uint64_t v165;
  int v166;
  char *v167;
  _DWORD *v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  int8x8_t v174;
  unint64_t v175;
  uint8x8_t v176;
  unint64_t v177;
  uint64_t **v178;
  uint64_t *v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  double v183;
  _QWORD *v184;
  unint64_t v185;
  char *v186;
  _DWORD *v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  double **v197;
  double *v198;
  double v199;
  double **v200;
  double v201;
  double *v202;
  _QWORD *v203;
  unint64_t *v204;
  unint64_t v205;
  _QWORD *m;
  float32x2_t v207;
  float v208;
  uint64_t v209;
  float32x2_t v210;
  float v211;
  double *v212;
  double *v213;
  double *v214;
  unint64_t v215;
  double *v216;
  double v217;
  double *v218;
  uint64_t **v219;
  uint64_t **v220;
  double *v221;
  double v222;
  double v223;
  double v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v228;
  uint64_t v231;
  uint64_t **v232;
  double *v233;
  _QWORD **v235;
  _QWORD *v236;
  unsigned int v237;
  _QWORD *v238;
  uint64_t **v239;
  double *v240;
  std::__shared_weak_count *v241;

  v3 = (_QWORD *)a1;
  v4 = (double *)(a1 + 8);
  sub_20E8D03C0(a1, *(_QWORD **)(a1 + 8));
  *v3 = v4;
  v3[2] = 0;
  *v4 = 0.0;
  v235 = (_QWORD **)v3;
  if (v3[6])
  {
    v8 = (_QWORD *)v3[5];
    while (v8)
    {
      v64 = v8;
      v8 = (_QWORD *)*v8;
      v65 = (std::__shared_weak_count *)v64[4];
      if (v65)
      {
        p_shared_owners = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldaxr(p_shared_owners);
        while (__stlxr(v67 - 1, p_shared_owners));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      operator delete(v64);
    }
    v3 = v235;
    v235[5] = 0;
    v9 = v235[4];
    if (v9)
    {
      for (i = 0; (_QWORD *)i != v9; ++i)
        v235[3][i] = 0;
    }
    v235[6] = 0;
  }
  v233 = v4;
  v11 = (_QWORD *)a2[1];
  v12 = (_QWORD *)*v11;
  v238 = v11 + 1;
  v236 = v11;
  if ((_QWORD *)*v11 != v11 + 1)
  {
    v13 = v3 + 5;
    do
    {
      v14 = (char *)operator new(0x50uLL);
      v15 = (std::__shared_weak_count *)v14;
      *((_QWORD *)v14 + 1) = 0;
      v16 = (unint64_t *)(v14 + 8);
      *((_QWORD *)v14 + 2) = 0;
      *(_QWORD *)v14 = &off_24C9E97B0;
      *(_OWORD *)(v14 + 24) = 0u;
      v17 = (float32x2_t *)(v14 + 24);
      *(_OWORD *)(v14 + 40) = 0u;
      *(_OWORD *)(v14 + 56) = 0u;
      *((_QWORD *)v14 + 9) = 0;
      v18 = v12[6];
      v19 = v18 + 40;
      if (!*(_BYTE *)(v18 + 192))
        v19 = 0;
      *v17 = vcvt_f32_f64(*(float64x2_t *)(v19 + 8));
      v20 = *(double *)(v19 + 24);
      *((float *)v14 + 8) = v20;
      v14[76] = 1;
      *((_DWORD *)v14 + 18) = -1;
      v21 = v3;
      v22 = *(_QWORD *)(v18 + 32);
      v23 = v22;
      v24 = v21[4];
      if (!v24)
        goto LABEL_32;
      v25 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
      v25.i16[0] = vaddlv_u8(v25);
      if (v25.u32[0] > 1uLL)
      {
        v2 = *(_QWORD *)(v18 + 32);
        if (v24 <= v22)
          v2 = v22 % v24;
      }
      else
      {
        v2 = ((_DWORD)v24 - 1) & v22;
      }
      v26 = (uint64_t **)v235[3][v2];
      if (!v26 || (v27 = *v26) == 0)
      {
LABEL_32:
        v30 = operator new(0x28uLL);
        *v30 = 0;
        v30[1] = v22;
        *((_DWORD *)v30 + 4) = v22;
        v30[3] = v17;
        v30[4] = v15;
        v3 = v235;
        v31 = (float)((unint64_t)v235[6] + 1);
        v32 = *((float *)v235 + 14);
        if (v24 && (float)(v32 * (float)v24) >= v31)
        {
          v33 = v235[3];
          v34 = (_QWORD *)v33[v2];
          if (v34)
            goto LABEL_35;
LABEL_88:
          *v30 = *v13;
          *v13 = v30;
          v33[v2] = v13;
          v35 = v236;
          if (*v30)
          {
            v58 = *(_QWORD *)(*v30 + 8);
            if ((v24 & (v24 - 1)) != 0)
            {
              if (v58 >= v24)
                v58 %= v24;
            }
            else
            {
              v58 &= v24 - 1;
            }
            v34 = &v235[3][v58];
LABEL_107:
            *v34 = v30;
          }
          v235[6] = (_QWORD *)((char *)v235[6] + 1);
          v11 = v35;
          v37 = (_QWORD *)v12[1];
          if (v37)
            goto LABEL_109;
          goto LABEL_112;
        }
        v38 = (v24 & (v24 - 1)) != 0;
        if (v24 < 3)
          v38 = 1;
        v39 = v38 | (2 * v24);
        v40 = vcvtps_u32_f32(v31 / v32);
        if (v39 <= v40)
          prime = v40;
        else
          prime = v39;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v24 = (unint64_t)v235[4];
        }
        if (prime <= v24)
        {
          if (prime >= v24)
            goto LABEL_86;
          v53 = vcvtps_u32_f32((float)(unint64_t)v235[6] / *((float *)v235 + 14));
          if (v24 < 3 || (v54 = (uint8x8_t)vcnt_s8((int8x8_t)v24), v54.i16[0] = vaddlv_u8(v54), v54.u32[0] > 1uLL))
          {
            v53 = std::__next_prime(v53);
          }
          else
          {
            v55 = 1 << -(char)__clz(v53 - 1);
            if (v53 >= 2)
              v53 = v55;
          }
          if (prime <= v53)
            prime = v53;
          if (prime < v24)
          {
            if (prime)
              goto LABEL_50;
            v57 = v235[3];
            v235[3] = 0;
            if (v57)
              operator delete(v57);
            v24 = 0;
            v235[4] = 0;
            goto LABEL_87;
          }
          v24 = (unint64_t)v235[4];
          if ((v24 & (v24 - 1)) == 0)
            goto LABEL_87;
          goto LABEL_99;
        }
LABEL_50:
        if (prime >> 61)
          sub_20E877A38();
        v42 = operator new(8 * prime);
        v43 = v235[3];
        v235[3] = v42;
        if (v43)
          operator delete(v43);
        v44 = 0;
        v235[4] = (_QWORD *)prime;
        do
          v235[3][v44++] = 0;
        while (prime != v44);
        v45 = (_QWORD *)*v13;
        if (!*v13)
        {
LABEL_98:
          v24 = prime;
          if ((prime & (prime - 1)) == 0)
            goto LABEL_87;
          goto LABEL_99;
        }
        v46 = v45[1];
        v47 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v48 = v46 & v47;
          v235[3][v48] = v13;
          for (j = (_QWORD *)*v45; *v45; j = (_QWORD *)*v45)
          {
            v50 = j[1] & v47;
            if (v50 == v48)
            {
              v45 = j;
            }
            else
            {
              v51 = v235[3];
              if (v51[v50])
              {
                *v45 = *j;
                v52 = v50;
                *j = *(_QWORD *)v235[3][v52];
                *(_QWORD *)v235[3][v52] = j;
              }
              else
              {
                v51[v50] = v45;
                v45 = j;
                v48 = v50;
              }
            }
          }
          goto LABEL_98;
        }
        if (v46 < prime)
        {
          v235[3][v46] = v13;
          v56 = (_QWORD *)*v45;
          if (*v45)
            goto LABEL_93;
LABEL_85:
          v24 = prime;
LABEL_86:
          if ((v24 & (v24 - 1)) == 0)
          {
LABEL_87:
            v2 = ((_DWORD)v24 - 1) & v23;
            v33 = v235[3];
            v34 = (_QWORD *)v33[v2];
            if (!v34)
              goto LABEL_88;
LABEL_35:
            *v30 = *v34;
            v35 = v236;
            goto LABEL_107;
          }
LABEL_99:
          if (v24 <= v23)
          {
            v2 = v23 % v24;
            v33 = v235[3];
            v34 = (_QWORD *)v33[v23 % v24];
            if (!v34)
              goto LABEL_88;
          }
          else
          {
            v2 = v23;
            v33 = v235[3];
            v34 = (_QWORD *)v33[v23];
            if (!v34)
              goto LABEL_88;
          }
          goto LABEL_35;
        }
        v46 %= prime;
        v235[3][v46] = v13;
        v56 = (_QWORD *)*v45;
        if (!*v45)
          goto LABEL_85;
        while (1)
        {
LABEL_93:
          v60 = v56[1];
          if (v60 >= prime)
            v60 %= prime;
          if (v60 == v46)
            goto LABEL_92;
          v61 = v235[3];
          if (v61[v60])
            break;
          v61[v60] = v45;
          v45 = v56;
          v56 = (_QWORD *)*v56;
          v46 = v60;
          if (!v56)
            goto LABEL_98;
        }
        *v45 = *v56;
        v59 = v60;
        *v56 = *(_QWORD *)v235[3][v59];
        *(_QWORD *)v235[3][v59] = v56;
        v56 = v45;
LABEL_92:
        v45 = v56;
        v56 = (_QWORD *)*v56;
        if (!v56)
          goto LABEL_98;
        goto LABEL_93;
      }
      if (v25.u32[0] < 2uLL)
      {
        while (1)
        {
          v29 = v27[1];
          if (v29 == v22)
          {
            if (*((_DWORD *)v27 + 4) == (_DWORD)v22)
              goto LABEL_36;
          }
          else if ((v29 & (v24 - 1)) != v2)
          {
            goto LABEL_32;
          }
          v27 = (uint64_t *)*v27;
          if (!v27)
            goto LABEL_32;
        }
      }
      while (1)
      {
        v28 = v27[1];
        if (v28 == v22)
          break;
        if (v28 >= v24)
          v28 %= v24;
        if (v28 != v2)
          goto LABEL_32;
LABEL_22:
        v27 = (uint64_t *)*v27;
        if (!v27)
          goto LABEL_32;
      }
      if (*((_DWORD *)v27 + 4) != (_DWORD)v22)
        goto LABEL_22;
      do
LABEL_36:
        v36 = __ldaxr(v16);
      while (__stlxr(v36 - 1, v16));
      v3 = v235;
      v11 = v236;
      if (!v36)
      {
        (*(void (**)(char *))(*(_QWORD *)v14 + 16))(v14);
        std::__shared_weak_count::__release_weak(v15);
        v37 = (_QWORD *)v12[1];
        if (v37)
          goto LABEL_109;
        do
        {
LABEL_112:
          v62 = (_QWORD *)v12[2];
          _ZF = *v62 == (_QWORD)v12;
          v12 = v62;
        }
        while (!_ZF);
        goto LABEL_9;
      }
      v37 = (_QWORD *)v12[1];
      if (!v37)
        goto LABEL_112;
      do
      {
LABEL_109:
        v62 = v37;
        v37 = (_QWORD *)*v37;
      }
      while (v37);
LABEL_9:
      v12 = v62;
    }
    while (v62 != v238);
  }
  v68 = (uint64_t **)a2[5];
  v232 = (uint64_t **)a2[6];
  if (v68 == v232)
    goto LABEL_302;
  while (2)
  {
    v69 = (char *)operator new(0x230uLL);
    *((_QWORD *)v69 + 1) = 0;
    *((_QWORD *)v69 + 2) = 0;
    *(_QWORD *)v69 = &off_24C9E9800;
    v70 = (double *)(v69 + 24);
    bzero(v69 + 24, 0x218uLL);
    *((_QWORD *)v69 + 28) = &off_24C9AFD78;
    *((_OWORD *)v69 + 16) = 0u;
    *((_OWORD *)v69 + 17) = 0u;
    *((_OWORD *)v69 + 15) = 0u;
    *(_OWORD *)(v69 + 281) = 0u;
    *(_OWORD *)(v69 + 312) = 0u;
    *(_OWORD *)(v69 + 328) = 0u;
    *(_OWORD *)(v69 + 344) = 0u;
    *(_OWORD *)(v69 + 360) = 0u;
    *(_OWORD *)(v69 + 376) = 0u;
    *(_OWORD *)(v69 + 392) = 0u;
    *((_QWORD *)v69 + 51) = 0;
    v69[416] = 1;
    *(_OWORD *)(v69 + 424) = 0u;
    *(_OWORD *)(v69 + 440) = 0u;
    *(_OWORD *)(v69 + 456) = 0u;
    *(_OWORD *)(v69 + 472) = 0u;
    *(_OWORD *)(v69 + 482) = 0u;
    v69[552] = 0;
    *(_OWORD *)(v69 + 520) = 0u;
    *(_OWORD *)(v69 + 536) = 0u;
    *(_OWORD *)(v69 + 504) = 0u;
    v240 = (double *)(v69 + 24);
    v241 = (std::__shared_weak_count *)v69;
    v71 = *a2;
    v72 = *v68;
    v73 = **v68;
    v74 = (uint64_t **)(*a2 + 56);
    v75 = *v74;
    do
    {
      v76 = v75[4];
      if (v76 < v73)
      {
        ++v75;
      }
      else if (v76 == v73)
      {
        if (*((_DWORD *)v75 + 10) < *((_DWORD *)*v68 + 2))
          ++v75;
        else
          v74 = (uint64_t **)v75;
      }
      else
      {
        v74 = (uint64_t **)v75;
      }
      v75 = (uint64_t *)*v75;
    }
    while (v75);
    *(_QWORD *)v70 = v74[6][102];
    v77 = sub_20E9DF85C((_QWORD *)(v71 + 1784), v72);
    if (!v77 || (v78 = v77[13]) == 0)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/Object3dDatabase.cpp", 64, (uint64_t)"lens", 4, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v78 = 0;
    }
    v79 = 0;
    v80 = *(_DWORD *)(v78 + 992);
    do
    {
      if (v80 == -1)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v81 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v81 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v82 = qword_254A6DE40;
          for (k = qword_254A6DE48; v82 != k; v82 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v82)(*(_QWORD *)(v82 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
        }
        v84 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v84 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_323;
        qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
        v80 = *(_DWORD *)(v78 + 992);
      }
      if (!v80)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_323:
        abort();
      }
      *(_QWORD *)&v69[8 * v79 + 128] = *(_QWORD *)(v78 + 8 * v79);
      ++v79;
    }
    while (v79 != 9);
    v85 = sub_20E9DF85C((_QWORD *)(*a2 + 1784), *v68);
    if (v85)
      v88 = (float64x2_t **)(v85 + 5);
    else
      v88 = 0;
    if (!v85
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/Object3dDatabase.cpp", 73, (uint64_t)"pose", 4, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v89 = **v88;
    _Q2.f64[0] = (*v88)[2].f64[1];
    _Q3 = *(float64x2_t *)((char *)*v88 + 24);
    v90 = (*v88)[4].f64[0];
    v91 = (*v88)[3];
    v92 = v88[4];
    v93 = v92[1].f64[0];
    _Q7 = *v92;
    v95 = v92[2].f64[1];
    _Q17 = *(float64x2_t *)((char *)v92 + 24);
    v97 = v92[4].f64[0];
    _Q19 = v92[3];
    v99 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v89, v92->f64[0]), _Q3, *v92, 1), v91, v93);
    __asm { FMLA            D21, D2, V7.D[1] }
    v104.f64[0] = _D21 + v90 * v93;
    v7 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v89, _Q17.f64[0]), _Q3, _Q17, 1), v91, v95);
    __asm { FMLA            D21, D2, V17.D[1] }
    v106 = _D21 + v90 * v95;
    _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v89, _Q19.f64[0]), _Q3, _Q19, 1), v91, v97);
    __asm { FMLA            D21, D2, V19.D[1] }
    v109 = _D21 + v90 * v97;
    v110 = v88[6];
    _Q19.f64[0] = v110[1].f64[0];
    _Q21 = *v110;
    v112 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v89, v110->f64[0]), _Q3, *v110, 1), v91, _Q19.f64[0]);
    __asm { FMLA            D0, D2, V21.D[1] }
    _Q0.f64[0] = _Q0.f64[0] + v90 * _Q19.f64[0];
    v113 = v88[2];
    _Q2.f64[0] = v113[1].f64[0];
    v114 = vaddq_f64(_Q0, _Q2).f64[0];
    _Q1 = vaddq_f64(v112, *v113);
    *((int64x2_t *)v69 + 2) = v99;
    *((_QWORD *)v69 + 6) = *(_QWORD *)&v104.f64[0];
    *((float64x2_t *)v69 + 4) = v7;
    *((float64x2_t *)v69 + 6) = _Q17;
    v104.f64[1] = v106;
    v116 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v99, (int64x2_t)v7), _Q1.f64[0]), (float64x2_t)vzip2q_s64(v99, (int64x2_t)v7), _Q1, 1), v104, v114);
    _Q1.f64[0] = _Q1.f64[1];
    __asm { FMLA            D3, D1, V17.D[1] }
    *((double *)v69 + 7) = -v116.f64[0];
    *((double *)v69 + 10) = v106;
    *((double *)v69 + 11) = -v116.f64[1];
    *((double *)v69 + 14) = v109;
    *((double *)v69 + 15) = -(_Q3.f64[0] + v109 * v114);
    v117 = *v68;
    v118 = 0xCCCCCCCCCCCCCCCDLL * (((*v68)[10] - (*v68)[9]) >> 3);
    v119 = (char *)*((_QWORD *)v69 + 25);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v69 + 27) - (_QWORD)v119) >> 2) < v118)
    {
      if (v118 > 0x1555555555555555)
        sub_20E867F44();
      v120 = (char *)*((_QWORD *)v69 + 26);
      v121 = (char *)operator new(0x999999999999999CLL * (((*v68)[10] - (*v68)[9]) >> 3));
      v122 = &v121[12 * ((v120 - v119) / 12)];
      v123 = v122;
      if (v120 != v119)
      {
        v123 = &v121[12 * ((v120 - v119) / 12)];
        do
        {
          v124 = *(_QWORD *)(v120 - 12);
          v120 -= 12;
          v125 = *((_DWORD *)v120 + 2);
          *(_QWORD *)(v123 - 12) = v124;
          v123 -= 12;
          *((_DWORD *)v123 + 2) = v125;
        }
        while (v120 != v119);
      }
      *((_QWORD *)v69 + 25) = v123;
      *((_QWORD *)v69 + 26) = v122;
      *((_QWORD *)v69 + 27) = &v121[12 * v118];
      if (v119)
        operator delete(v119);
    }
    v126 = v117[9];
    v127 = v117[10];
    if (v126 == v127)
      goto LABEL_287;
    v128 = 0;
    v239 = v68;
    while (2)
    {
      sub_20EDBB530((uint64_t)(v240 + 43), 1, (_OWORD *)((*v68)[72] + ((unint64_t)v128 << 6)), *(float *)(v126 + 8), *(float *)(v126 + 12), 0.0, 0.0, 0.0);
      v130 = *(_DWORD *)(v126 + 8);
      v129 = *(_DWORD *)(v126 + 12);
      v131 = (int8x8_t)v11[4];
      if (!*(_QWORD *)&v131)
        goto LABEL_213;
      v132 = *((_DWORD *)*v68 + 4);
      v133 = *((_DWORD *)*v68 + 2);
      v134 = v133 ^ __ROR4__(v132, 13);
      v135 = (uint8x8_t)vcnt_s8(v131);
      v135.i16[0] = vaddlv_u8(v135);
      if (v135.u32[0] > 1uLL)
      {
        v136 = v134;
        if (*(_QWORD *)&v131 <= v134)
          v136 = v134 % *(_QWORD *)&v131;
      }
      else
      {
        v136 = (v131.i32[0] - 1) & v134;
      }
      v137 = *(int8x8_t ***)(v11[3] + 8 * v136);
      if (!v137 || (v138 = *v137) == 0)
      {
LABEL_213:
        v152 = 0;
LABEL_214:
        LODWORD(v153) = -1;
        goto LABEL_215;
      }
      v139 = *(unsigned int *)(v126 + 4);
      v140 = **v68;
      if (v135.u32[0] < 2uLL)
      {
        v141 = *(_QWORD *)&v131 - 1;
        while (1)
        {
          v143 = v138[1];
          if (*(_QWORD *)&v143 == v134)
          {
            if (v138[4].i32[0] == v132 && *(_QWORD *)&v138[2] == v140 && v138[3].i32[0] == v133)
              goto LABEL_193;
          }
          else if ((*(_QWORD *)&v143 & v141) != v136)
          {
            goto LABEL_213;
          }
          v138 = (int8x8_t *)*v138;
          if (!v138)
            goto LABEL_213;
        }
      }
      while (1)
      {
        v142 = v138[1];
        if (*(_QWORD *)&v142 == v134)
          break;
        if (*(_QWORD *)&v142 >= *(_QWORD *)&v131)
          *(_QWORD *)&v142 %= *(_QWORD *)&v131;
        if (*(_QWORD *)&v142 != v136)
          goto LABEL_213;
LABEL_179:
        v138 = (int8x8_t *)*v138;
        if (!v138)
          goto LABEL_213;
      }
      if (v138[4].i32[0] != v132 || *(_QWORD *)&v138[2] != v140 || v138[3].i32[0] != v133)
        goto LABEL_179;
LABEL_193:
      v144 = v138[6];
      if (!*(_QWORD *)&v144)
        goto LABEL_213;
      v145 = (uint8x8_t)vcnt_s8(v144);
      v145.i16[0] = vaddlv_u8(v145);
      if (v145.u32[0] > 1uLL)
      {
        v146 = *(unsigned int *)(v126 + 4);
        if (*(_QWORD *)&v144 <= v139)
          v146 = v139 % *(_QWORD *)&v144;
      }
      else
      {
        v146 = (v144.i32[0] - 1) & v139;
      }
      v147 = *(uint64_t ***)(*(_QWORD *)&v138[5] + 8 * v146);
      if (!v147)
        goto LABEL_213;
      v148 = *v147;
      if (!v148)
        goto LABEL_213;
      if (v145.u32[0] < 2uLL)
      {
        v149 = *(_QWORD *)&v144 - 1;
        while (1)
        {
          v151 = v148[1];
          if (v151 == v139)
          {
            if (*((_DWORD *)v148 + 4) == (_DWORD)v139)
              goto LABEL_240;
          }
          else if ((v151 & v149) != v146)
          {
            goto LABEL_213;
          }
          v148 = (uint64_t *)*v148;
          if (!v148)
            goto LABEL_213;
        }
      }
      while (2)
      {
        v150 = v148[1];
        if (v150 != v139)
        {
          if (v150 >= *(_QWORD *)&v144)
            v150 %= *(_QWORD *)&v144;
          if (v150 != v146)
            goto LABEL_213;
          goto LABEL_203;
        }
        if (*((_DWORD *)v148 + 4) != (_DWORD)v139)
        {
LABEL_203:
          v148 = (uint64_t *)*v148;
          if (!v148)
            goto LABEL_213;
          continue;
        }
        break;
      }
LABEL_240:
      v171 = v148[3];
      v152 = (std::__shared_weak_count *)v148[4];
      if (v152)
      {
        v172 = (unint64_t *)&v152->__shared_owners_;
        do
          v173 = __ldxr(v172);
        while (__stxr(v173 + 1, v172));
      }
      if (!v171)
        goto LABEL_214;
      v153 = *(_QWORD *)(v171 + 32);
      v174 = (int8x8_t)v235[4];
      if (v174)
      {
        v175 = *(_QWORD *)(v171 + 32);
        v176 = (uint8x8_t)vcnt_s8(v174);
        v176.i16[0] = vaddlv_u8(v176);
        if (v176.u32[0] > 1uLL)
        {
          v177 = v153;
          if (*(_QWORD *)&v174 <= v175)
            v177 = v175 % *(_QWORD *)&v174;
        }
        else
        {
          v177 = (v174.i32[0] - 1) & v175;
        }
        v178 = (uint64_t **)v235[3][v177];
        if (v178)
        {
          v179 = *v178;
          if (v179)
          {
            if (v176.u32[0] < 2uLL)
            {
              v180 = *(_QWORD *)&v174 - 1;
              while (1)
              {
                v182 = v179[1];
                if (v182 == v175)
                {
                  if (*((_DWORD *)v179 + 4) == (_DWORD)v153)
                    goto LABEL_265;
                }
                else if ((v182 & v180) != v177)
                {
                  goto LABEL_215;
                }
                v179 = (uint64_t *)*v179;
                if (!v179)
                  goto LABEL_215;
              }
            }
            do
            {
              v181 = v179[1];
              if (v181 == v175)
              {
                if (*((_DWORD *)v179 + 4) == (_DWORD)v153)
                {
LABEL_265:
                  v183 = *v240;
                  v184 = (_QWORD *)v179[3];
                  v186 = (char *)v184[4];
                  v185 = v184[5];
                  if ((unint64_t)v186 >= v185)
                  {
                    v231 = v127;
                    v188 = (char *)v184[3];
                    v189 = (v186 - v188) >> 4;
                    v190 = v189 + 1;
                    if ((unint64_t)(v189 + 1) >> 60)
                      sub_20E867F44();
                    v191 = v185 - (_QWORD)v188;
                    if (v191 >> 3 > v190)
                      v190 = v191 >> 3;
                    if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFF0)
                      v192 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v192 = v190;
                    if (v192)
                    {
                      if (v192 >> 60)
                        sub_20E877A38();
                      v193 = v192;
                      v194 = (char *)operator new(16 * v192);
                      v192 = v193;
                    }
                    else
                    {
                      v194 = 0;
                    }
                    v195 = &v194[16 * v189];
                    *(double *)v195 = v183;
                    *((_DWORD *)v195 + 2) = v128;
                    v196 = v195;
                    if (v186 == v188)
                    {
                      v127 = v231;
                    }
                    else
                    {
                      v127 = v231;
                      do
                      {
                        *((_OWORD *)v196 - 1) = *((_OWORD *)v186 - 1);
                        v196 -= 16;
                        v186 -= 16;
                      }
                      while (v186 != v188);
                      v186 = (char *)v184[3];
                    }
                    v187 = v195 + 16;
                    v184[3] = v196;
                    v184[4] = v195 + 16;
                    v184[5] = &v194[16 * v192];
                    if (v186)
                      operator delete(v186);
                    v11 = v236;
                  }
                  else
                  {
                    *(double *)v186 = v183;
                    *((_DWORD *)v186 + 2) = v128;
                    v187 = v186 + 16;
                  }
                  v184[4] = v187;
                  break;
                }
              }
              else
              {
                if (v181 >= *(_QWORD *)&v174)
                  v181 %= *(_QWORD *)&v174;
                if (v181 != v177)
                  break;
              }
              v179 = (uint64_t *)*v179;
            }
            while (v179);
          }
        }
      }
LABEL_215:
      v155 = (_DWORD *)*((_QWORD *)v240 + 23);
      v154 = *((_QWORD *)v240 + 24);
      if ((unint64_t)v155 >= v154)
      {
        v156 = (_DWORD *)*((_QWORD *)v240 + 22);
        v157 = 0xAAAAAAAAAAAAAAABLL * (v155 - v156) + 1;
        if (v157 > 0x1555555555555555)
          sub_20E867F44();
        v158 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v154 - (_QWORD)v156) >> 2);
        if (2 * v158 > v157)
          v157 = 2 * v158;
        if (v158 >= 0xAAAAAAAAAAAAAAALL)
          v159 = 0x1555555555555555;
        else
          v159 = v157;
        v237 = v128;
        if (v159)
        {
          if (v159 > 0x1555555555555555)
            sub_20E877A38();
          v160 = (char *)operator new(12 * v159);
        }
        else
        {
          v160 = 0;
        }
        v161 = v152;
        v162 = &v160[4 * (v155 - v156)];
        *(_DWORD *)v162 = v130;
        *((_DWORD *)v162 + 1) = v129;
        *((_DWORD *)v162 + 2) = v153;
        v163 = v162;
        if (v155 == v156)
        {
          v164 = v239;
        }
        else
        {
          v164 = v239;
          do
          {
            v165 = *(_QWORD *)(v155 - 3);
            v155 -= 3;
            v166 = v155[2];
            *(_QWORD *)(v163 - 12) = v165;
            v163 -= 12;
            *((_DWORD *)v163 + 2) = v166;
          }
          while (v155 != v156);
          v155 = (_DWORD *)*((_QWORD *)v240 + 22);
        }
        v167 = &v160[12 * v159];
        v168 = v162 + 12;
        *((_QWORD *)v240 + 22) = v163;
        *((_QWORD *)v240 + 23) = v162 + 12;
        *((_QWORD *)v240 + 24) = v167;
        v11 = v236;
        if (v155)
          operator delete(v155);
        v68 = v164;
        v152 = v161;
        v128 = v237;
        *((_QWORD *)v240 + 23) = v168;
        if (v152)
          goto LABEL_236;
      }
      else
      {
        *v155 = v130;
        v155[1] = v129;
        v155[2] = v153;
        v68 = v239;
        *((_QWORD *)v240 + 23) = v155 + 3;
        if (!v152)
          goto LABEL_168;
LABEL_236:
        v169 = (unint64_t *)&v152->__shared_owners_;
        do
          v170 = __ldaxr(v169);
        while (__stlxr(v170 - 1, v169));
        if (!v170)
        {
          ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
          std::__shared_weak_count::__release_weak(v152);
        }
      }
LABEL_168:
      ++v128;
      v126 += 40;
      if (v126 != v127)
        continue;
      break;
    }
    v70 = v240;
LABEL_287:
    v197 = (double **)v233;
    v198 = *(double **)v233;
    v199 = *v70;
LABEL_289:
    v200 = v197;
    if (v198)
    {
      do
      {
        v197 = (double **)v198;
        v201 = v198[4];
        if (v199 < v201)
        {
          v198 = *(double **)v198;
          goto LABEL_289;
        }
        if (v201 >= v199)
          goto LABEL_297;
        v198 = (double *)*((_QWORD *)v198 + 1);
      }
      while (v198);
      v200 = v197 + 1;
    }
    v202 = (double *)operator new(0x38uLL);
    v202[4] = v199;
    *((_QWORD *)v202 + 5) = v70;
    *((_QWORD *)v202 + 6) = v241;
    v241 = 0;
    *v202 = 0.0;
    v202[1] = 0.0;
    *((_QWORD *)v202 + 2) = v197;
    *v200 = v202;
    v203 = (_QWORD *)**v235;
    if (v203)
    {
      *v235 = v203;
      v202 = *v200;
    }
    sub_20E868578(v235[1], (uint64_t *)v202);
    v235[2] = (_QWORD *)((char *)v235[2] + 1);
LABEL_297:
    if (v241)
    {
      v204 = (unint64_t *)&v241->__shared_owners_;
      do
        v205 = __ldaxr(v204);
      while (__stlxr(v205 - 1, v204));
      if (!v205)
      {
        ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
        std::__shared_weak_count::__release_weak(v241);
      }
    }
    v68 += 2;
    v3 = v235;
    if (v68 != v232)
      continue;
    break;
  }
LABEL_302:
  for (m = (_QWORD *)v3[5]; m; m = (_QWORD *)*m)
  {
    v209 = m[3];
    v210 = *(float32x2_t *)v209;
    v211 = *(float *)(v209 + 8);
    *(_QWORD *)(v209 + 16) = 0;
    *(_DWORD *)(v209 + 12) = 0;
    v212 = *(double **)(v209 + 24);
    v213 = *(double **)(v209 + 32);
    if (v212 != v213)
    {
      v214 = *(double **)v233;
      if (*(_QWORD *)v233)
      {
        _Q3 = vcvtq_f64_f32(v210);
        v6.f64[0] = v211;
        v215 = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
        v207 = 0;
        v208 = 0.0;
        v216 = *(double **)(v209 + 24);
        do
        {
          v217 = *v216;
          v218 = v233;
          v219 = (uint64_t **)v214;
          do
          {
            v220 = v219 + 1;
            if (*((double *)v219 + 4) >= v217)
            {
              v220 = v219;
              v218 = (double *)v219;
            }
            v219 = (uint64_t **)*v220;
          }
          while (*v220);
          if (v218 != v233 && v217 >= v218[4])
          {
            v221 = (double *)*((_QWORD *)v218 + 5);
            v222 = v221[4];
            v223 = v221[8];
            v224 = v221[12];
            v225.f64[0] = -(v221[1] * v222 + v221[5] * v223 + v221[9] * v224);
            v225.f64[1] = -(v222 * v221[2] + v223 * v221[6] + v224 * v221[10]);
            v7.f64[0] = -(v222 * v221[3] + v223 * v221[7] + v224 * v221[11]);
            v226.f64[0] = _Q3.f64[0];
            *(_QWORD *)&v226.f64[1] = v215;
            _Q6 = vsubq_f64(v225, v226);
            v228 = vsubq_f64(v7, v6);
            _Q16 = vmulq_f64(_Q6, _Q6);
            _D17 = _Q6.f64[1];
            __asm { FMLA            D16, D17, V6.D[1] }
            _Q16.f64[0] = sqrt(vmlad_n_f64(_Q16.f64[0], v228.f64[0], v228.f64[0]));
            if (_Q16.f64[0] == 0.0)
              _Q16.f64[0] = 1.0;
            else
              _Q16.f64[0] = 1.0 / _Q16.f64[0];
            v7 = vmulq_f64(v228, _Q16);
            v207 = vcvt_f32_f64(vaddq_f64(vmulq_n_f64(_Q6, _Q16.f64[0]), vcvtq_f64_f32(v207)));
            *(float32x2_t *)(v209 + 12) = v207;
            v208 = v7.f64[0] + v208;
            *(float *)(v209 + 20) = v208;
          }
          v216 += 2;
        }
        while (v216 != v213);
      }
      else
      {
        v207 = 0;
        v208 = 0.0;
      }
      *(float *)_Q3.f64 = (float)(unint64_t)(((char *)v213 - (char *)v212) >> 4);
      *(float32x2_t *)(v209 + 12) = vdiv_f32(v207, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&_Q3.f64[0], 0));
      *(float *)(v209 + 20) = v208 / *(float *)_Q3.f64;
    }
  }
}

void sub_20EDBB3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EDBB4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EDBB4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EDBB508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EDBB51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EDBB530(uint64_t a1, __int8 a2, _OWORD *a3, float a4, float a5, float a6, float a7, float a8)
{
  unint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  float v28;
  __int8 v29;
  float v30;
  float v31;
  float v32;
  float v33;

  v32 = a5;
  v33 = a4;
  v30 = a7;
  v31 = a6;
  v29 = a2;
  v28 = a8;
  if (*(_QWORD *)(a1 + 16)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 232, (uint64_t)"!HasKeypointForRelocalization()", 31, (uint64_t)"makes sure when adding features, no featues are considered as relocalization only", 81, (void (*)(void **))sub_21023DDB0)|| *(_BYTE *)(a1 + 184)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 235, (uint64_t)"!reordered_descriptors_valid_", 29, (uint64_t)"makes sure reordered descriptors are not valid when adding feature without reordered descriptors", 96, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20EDBB704(a1 + 56, (__int32 *)&v33, (__int32 *)&v32, (__int32 *)&v31, (__int32 *)&v30, &v29, (__int32 *)&v28);
  v11 = *(char **)(a1 + 88);
  v10 = *(_QWORD *)(a1 + 96);
  if ((unint64_t)v11 >= v10)
  {
    v16 = *(char **)(a1 + 80);
    v17 = (v11 - v16) >> 6;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 58)
      sub_20ED343A8();
    v19 = v10 - (_QWORD)v16;
    if (v19 >> 5 > v18)
      v18 = v19 >> 5;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFC0)
      v20 = 0x3FFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 58)
        sub_20E877A38();
      v21 = (char *)operator new(v20 << 6);
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[64 * v17];
    v23 = a3[1];
    *(_OWORD *)v22 = *a3;
    *((_OWORD *)v22 + 1) = v23;
    v24 = a3[3];
    *((_OWORD *)v22 + 2) = a3[2];
    *((_OWORD *)v22 + 3) = v24;
    v15 = v22 + 64;
    if (v11 != v16)
    {
      do
      {
        v25 = *((_OWORD *)v11 - 4);
        v26 = *((_OWORD *)v11 - 3);
        v27 = *((_OWORD *)v11 - 1);
        *((_OWORD *)v22 - 2) = *((_OWORD *)v11 - 2);
        *((_OWORD *)v22 - 1) = v27;
        *((_OWORD *)v22 - 4) = v25;
        *((_OWORD *)v22 - 3) = v26;
        v22 -= 64;
        v11 -= 64;
      }
      while (v11 != v16);
      v11 = *(char **)(a1 + 80);
    }
    *(_QWORD *)(a1 + 80) = v22;
    *(_QWORD *)(a1 + 88) = v15;
    *(_QWORD *)(a1 + 96) = &v21[64 * v20];
    if (v11)
      operator delete(v11);
  }
  else
  {
    v12 = *a3;
    v13 = a3[1];
    v14 = a3[3];
    *((_OWORD *)v11 + 2) = a3[2];
    *((_OWORD *)v11 + 3) = v14;
    *(_OWORD *)v11 = v12;
    *((_OWORD *)v11 + 1) = v13;
    v15 = v11 + 64;
  }
  *(_QWORD *)(a1 + 88) = v15;
}

int64x2_t *sub_20EDBB704(uint64_t a1, __int32 *a2, __int32 *a3, __int32 *a4, __int32 *a5, __int8 *a6, __int32 *a7)
{
  unint64_t v13;
  int64x2_t *v14;
  __int32 v15;
  __int32 v16;
  __int32 v17;
  __int32 v18;
  __int8 v19;
  __int32 v20;
  int64x2_t *v21;
  int64x2_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  int64x2_t *v30;
  char *v31;
  uint64_t v32;
  __int32 v33;
  __int32 v34;
  __int8 v35;
  __int32 v36;
  int64x2_t v37;
  int64x2_t *v38;

  v14 = *(int64x2_t **)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v14 < v13)
  {
    v15 = *a2;
    v16 = *a3;
    v17 = *a4;
    v18 = *a5;
    v19 = *a6;
    v20 = *a7;
    v14->i32[0] = *a2;
    v14->i32[1] = v16;
    v14->i32[2] = v15;
    v14->i32[3] = v16;
    v14[1].i32[0] = v17;
    v14[1].i32[1] = v18;
    v14[1].i8[8] = v19;
    v21 = v14 + 2;
    v14[1].i32[3] = v20;
    goto LABEL_13;
  }
  v22 = *(int64x2_t **)a1;
  v23 = ((uint64_t)v14->i64 - *(_QWORD *)a1) >> 5;
  v24 = v23 + 1;
  if ((unint64_t)(v23 + 1) >> 59)
    sub_20E867F44();
  v25 = v13 - (_QWORD)v22;
  if (v25 >> 4 > v24)
    v24 = v25 >> 4;
  v26 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0;
  v27 = 0x7FFFFFFFFFFFFFFLL;
  if (!v26)
    v27 = v24;
  if (v27 >> 59)
    sub_20E877A38();
  v28 = 32 * v27;
  v29 = (char *)operator new(32 * v27);
  v30 = (int64x2_t *)&v29[32 * v23];
  v31 = &v29[v28];
  LODWORD(v32) = *a2;
  v33 = *a4;
  v34 = *a5;
  v35 = *a6;
  v36 = *a7;
  HIDWORD(v32) = *a3;
  *v30 = vdupq_lane_s64(v32, 0);
  v30[1].i32[0] = v33;
  v30[1].i32[1] = v34;
  v30[1].i8[8] = v35;
  v30[1].i32[3] = v36;
  v21 = v30 + 2;
  if (v14 == v22)
  {
    *(_QWORD *)a1 = v30;
    *(_QWORD *)(a1 + 8) = v21;
    *(_QWORD *)(a1 + 16) = v31;
    if (!v22)
      goto LABEL_13;
    goto LABEL_12;
  }
  do
  {
    v37 = v14[-1];
    v38 = v30 - 2;
    v30[-2] = v14[-2];
    v30[-1] = v37;
    v14 -= 2;
    v30 -= 2;
  }
  while (v14 != v22);
  *(_QWORD *)a1 = v38;
  *(_QWORD *)(a1 + 8) = v21;
  *(_QWORD *)(a1 + 16) = v31;
  if (v22)
LABEL_12:
    operator delete(v22);
LABEL_13:
  *(_QWORD *)(a1 + 8) = v21;
  return v21 - 2;
}

void sub_20EDBB88C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E97B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EDBB89C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E97B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EDBB8CC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_20EDBB8E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E9800;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EDBB8F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E9800;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EDBB928(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;

  v2 = (void *)a1[66];
  if (v2)
  {
    a1[67] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[59];
  if (v3)
  {
    a1[60] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[56];
  if (v4)
  {
    a1[57] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[53];
  if (v5)
  {
    a1[54] = v5;
    operator delete(v5);
  }
  a1[28] = &off_24C9AFD78;
  v6 = (void *)a1[43];
  if (v6)
  {
    a1[44] = v6;
    operator delete(v6);
  }
  v7 = (std::__shared_weak_count *)a1[42];
  if (!v7)
    goto LABEL_15;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v10 = (std::__shared_weak_count *)a1[40];
    if (!v10)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v10 = (std::__shared_weak_count *)a1[40];
    if (!v10)
      goto LABEL_21;
  }
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_21:
  v13 = (void *)a1[25];
  if (v13)
  {
    a1[26] = v13;
    operator delete(v13);
  }
}

void sub_20EDBBA38(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  int8x16_t v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  __int16 v25;
  __int128 v26;
  int v27;
  __int128 v28;
  int64x2_t v29;
  uint64_t (**v30)();
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  char v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64x2_t v45;
  __int128 v46;
  __int16 v47;
  int v48;
  __int16 v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  __int128 v57;
  uint64_t v58;
  int v59;
  int64x2_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  unint64_t v65;
  uint64_t v66;
  __int128 v67;
  char v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64x2_t v73;
  __int128 v74;
  char v75;
  char v76;
  int v77;
  __int16 v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  char v85;
  char v86;
  __int128 v87;
  uint64_t v88;
  int v89;
  int64x2_t v90;
  void *__p;
  void *v92;
  uint64_t v93;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = 0;
  if (v6 >= a2 && v7 >= a3)
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 48);
    do
    {
      v10 >>= 1;
      ++v8;
      if (v10 < a2)
        break;
      v11 >>= 1;
    }
    while (v11 >= a3);
  }
  LODWORD(v64) = 1;
  BYTE4(v64) = 1;
  v67 = xmmword_210378500;
  v68 = 1;
  v69 = xmmword_2102DB6D0;
  v70 = 0x410000004141999ALL;
  v71 = 5;
  v72 = 0x41F0000041200000;
  v76 = 0;
  v78 = 1;
  v79 = 36;
  v81 = 0x404000003F4CCCCDLL;
  v80 = 5;
  v82 = 1069547520;
  v83 = 20000;
  v84 = 0;
  v85 = 0;
  v87 = xmmword_2102DB6F0;
  v88 = 0x3F96E9DD3F5425F2;
  v89 = 0;
  v90 = vdupq_n_s64(0xAuLL);
  v93 = 0;
  __p = 0;
  v92 = 0;
  v65 = v7;
  v66 = v8;
  *((_QWORD *)&v64 + 1) = v6;
  v73 = vdupq_n_s64(1uLL);
  v74 = xmmword_210378510;
  v30 = &off_24CA06CB8;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0;
  v35 = 1;
  v36 = 1;
  v37 = xmmword_2102DB6B0;
  v38 = xmmword_2102DB6C0;
  v39 = 1000;
  v40 = 1;
  v41 = xmmword_2102DB6D0;
  v42 = 0x410000004141999ALL;
  v43 = 5;
  v44 = 0x41F0000041200000;
  v45 = v73;
  v46 = xmmword_2102DB6E0;
  v47 = 0;
  v48 = 1;
  v49 = 1;
  v50 = 36;
  v52 = 0x404000003F4CCCCDLL;
  v51 = 5;
  v53 = 1069547520;
  v54 = 20000;
  v56 = 256;
  v55 = 0;
  v57 = xmmword_2102DB6F0;
  v58 = 0x3F96E9DD3F5425F2;
  v59 = 0;
  v60 = v90;
  v62 = 0;
  v63 = 0;
  v61 = 0;
  v75 = 1;
  v86 = 0;
  v77 = 0;
  v19 = 0;
  v20 = 1;
  v21 = 0x4120000041A00000;
  v22 = 5;
  v23 = 0x3F96E9DD3F5425F2;
  v24 = 0;
  v25 = 1;
  v26 = xmmword_210378520;
  v27 = 100;
  v28 = xmmword_210378530;
  v29 = v73;
  sub_20FD40C08((uint64_t)&v30, &v64, (uint64_t)&v19);
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_BYTE *)(a4 + 48) = 1;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 114) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_BYTE *)(a4 + 184) = 0;
  sub_20FD4158C((uint64_t)&v30, a1, 0, a4, 0.0, v12, v13, v14, v15, v16, v17, v18);
  sub_20FD40A18(&v30);
  if (__p)
  {
    v92 = __p;
    operator delete(__p);
  }
}

void sub_20EDBBCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  _QWORD *v12;
  void *v14;
  va_list va;

  va_start(va, a12);
  sub_20EDB4D8C(v12);
  sub_20FD40A18(va);
  v14 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v14;
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EDBBD18@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, void **a5@<X8>)
{
  char *v9;
  char *v10;
  _QWORD *v11;
  float v12;
  float v13;
  int v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  int v42;

  v40 = 0u;
  v41 = 0u;
  v42 = 733222020;
  kdebug_trace();
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  sub_20ED9EAF0(*a1, a2, &v38);
  v9 = v38;
  v10 = v39;
  if (v38 != v39)
  {
    v11 = 0;
    v12 = (float)a3;
    v13 = (float)a4;
    while (1)
    {
      while (1)
      {
        v14 = *(_DWORD *)v9;
        v15 = *((float *)v9 + 1) * v12;
        v16 = *((float *)v9 + 2) * v13;
        v17 = *((float *)v9 + 3) * v12;
        v18 = *((float *)v9 + 4) * v13;
        v19 = v15 <= v17 ? LODWORD(v17) : LODWORD(v15);
        v20 = v15 <= v17 ? LODWORD(v15) : LODWORD(v17);
        v21 = v16 <= v18 ? LODWORD(v18) : LODWORD(v16);
        v22 = v16 <= v18 ? LODWORD(v16) : LODWORD(v18);
        v23 = v19 | (v21 << 32);
        v24 = v20 | (v22 << 32);
        v25 = a5[2];
        if (v11 >= (_QWORD *)v25)
          break;
        *(_DWORD *)v11 = v14;
        v11[1] = a3;
        v11[2] = a4;
        v11[3] = v24;
        v11[4] = v23;
        v11 += 5;
        a5[1] = v11;
        v9 += 20;
        if (v9 == v10)
          goto LABEL_33;
      }
      v26 = *a5;
      v27 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v11 - (_BYTE *)*a5) >> 3);
      v28 = v27 + 1;
      if (v27 + 1 > 0x666666666666666)
        sub_20E8E275C();
      v29 = 0xCCCCCCCCCCCCCCCDLL * ((v25 - v26) >> 3);
      if (2 * v29 > v28)
        v28 = 2 * v29;
      if (v29 >= 0x333333333333333)
        v30 = 0x666666666666666;
      else
        v30 = v28;
      if (v30 > 0x666666666666666)
        sub_20E877A38();
      v31 = (char *)operator new(40 * v30);
      v32 = &v31[40 * v27];
      *(_DWORD *)v32 = v14;
      *((_QWORD *)v32 + 1) = a3;
      *((_QWORD *)v32 + 2) = a4;
      *((_QWORD *)v32 + 3) = v24;
      *((_QWORD *)v32 + 4) = v23;
      if (v11 == (_QWORD *)v26)
      {
        v11 = v32 + 40;
        *a5 = v32;
        a5[1] = v32 + 40;
        a5[2] = &v31[40 * v30];
        if (!v26)
          goto LABEL_29;
      }
      else
      {
        v33 = &v31[40 * v27];
        do
        {
          v34 = v33 - 40;
          v35 = *(_OWORD *)(v11 - 5);
          *((_QWORD *)v33 - 3) = *(v11 - 3);
          *(_OWORD *)(v33 - 40) = v35;
          *((_QWORD *)v33 - 2) = *(v11 - 2);
          *((_QWORD *)v33 - 1) = *(v11 - 1);
          v11 -= 5;
          v33 -= 40;
        }
        while (v11 != (_QWORD *)v26);
        v11 = v32 + 40;
        *a5 = v34;
        a5[1] = v32 + 40;
        a5[2] = &v31[40 * v30];
        if (!v26)
          goto LABEL_29;
      }
      operator delete(v26);
LABEL_29:
      a5[1] = v11;
      v9 += 20;
      if (v9 == v10)
      {
LABEL_33:
        v9 = v38;
        break;
      }
    }
  }
  if (v9)
  {
    v39 = v9;
    operator delete(v9);
  }
  return kdebug_trace();
}

void sub_20EDBBFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (!*(_QWORD *)v13)
  {
    sub_20E8E69C4((uint64_t)&a13);
    _Unwind_Resume(a1);
  }
  *(_QWORD *)(v13 + 8) = v15;
  operator delete(v15);
  sub_20E8E69C4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20EDBC028(float **a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  char **v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  float *v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  char *v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  int64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  char *v52;
  char *v53;
  void *v54;
  void *v55;
  float *v56;
  char *v59;
  __int128 v60;

  v3 = a3;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a1;
  v56 = a1[1];
  if (*a1 != v56)
  {
    while (1)
    {
      v59 = 0;
      v6 = *(_QWORD *)(a2 + 56);
      v5 = *(_QWORD *)(a2 + 64);
      if (v5 != v6)
        break;
      v9 = 0;
      v7 = 0;
      v34 = v3[1];
      v33 = (unint64_t)v3[2];
      if ((unint64_t)v34 >= v33)
        goto LABEL_45;
LABEL_39:
      *(_QWORD *)v34 = 0;
      *((_QWORD *)v34 + 1) = 0;
      *((_QWORD *)v34 + 2) = 0;
      v35 = v9 - v7;
      if (v9 != v7)
      {
        if (v35 < 0)
          sub_20E867F44();
        v36 = (char *)operator new(v9 - v7);
        *(_QWORD *)v34 = v36;
        *((_QWORD *)v34 + 1) = v36;
        v37 = &v36[8 * (v35 >> 3)];
        *((_QWORD *)v34 + 2) = v37;
        memcpy(v36, v7, v9 - v7);
        *((_QWORD *)v34 + 1) = v37;
      }
      v3[1] = v34 + 24;
      v3[1] = v34 + 24;
      if (v7)
LABEL_70:
        operator delete(v7);
LABEL_3:
      v4 += 10;
      if (v4 == v56)
        return;
    }
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = (float *)(v6 + 32 * v10);
      if (*v11 < v4[6])
        goto LABEL_7;
      if (*v11 > v4[8])
        goto LABEL_7;
      v12 = v11[1];
      if (v12 < v4[7] || v12 > v4[9])
        goto LABEL_7;
      if (v9 >= v8)
        break;
      *(_QWORD *)v9 = v10;
      v9 += 8;
LABEL_7:
      if (++v10 >= (unint64_t)((v5 - v6) >> 5))
      {
        v59 = v7;
        v34 = v3[1];
        v33 = (unint64_t)v3[2];
        if ((unint64_t)v34 < v33)
          goto LABEL_39;
LABEL_45:
        v38 = *v3;
        v39 = 0xAAAAAAAAAAAAAAABLL * ((v34 - *v3) >> 3);
        v40 = v39 + 1;
        if (v39 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (_QWORD)v38) >> 3);
        if (2 * v41 > v40)
          v40 = 2 * v41;
        if (v41 >= 0x555555555555555)
          v42 = 0xAAAAAAAAAAAAAAALL;
        else
          v42 = v40;
        if (v42)
        {
          if (v42 > 0xAAAAAAAAAAAAAAALL)
            sub_20E877A38();
          v43 = (char *)operator new(24 * v42);
        }
        else
        {
          v43 = 0;
        }
        v45 = &v43[24 * v42];
        v44 = &v43[24 * v39];
        *((_QWORD *)v44 + 1) = 0;
        *((_QWORD *)&v60 + 1) = v45;
        *((_QWORD *)v44 + 2) = 0;
        *(_QWORD *)v44 = 0;
        v46 = v9 - v7;
        if (v9 != v7)
        {
          if (v46 < 0)
            sub_20E867F44();
          v47 = (char *)operator new(v9 - v7);
          *(_QWORD *)v44 = v47;
          v48 = &v47[8 * (v46 >> 3)];
          *((_QWORD *)v44 + 2) = v48;
          memcpy(v47, v7, v46);
          *((_QWORD *)v44 + 1) = v48;
        }
        v49 = v44 + 24;
        *(_QWORD *)&v60 = v44 + 24;
        if (v34 == v38)
        {
          v3 = a3;
          *a3 = v44;
          a3[1] = v49;
          a3[2] = v45;
        }
        else
        {
          v3 = a3;
          do
          {
            v50 = v44;
            *((_QWORD *)v44 - 2) = 0;
            *((_QWORD *)v44 - 1) = 0;
            v51 = *(_OWORD *)(v34 - 24);
            v34 -= 24;
            *(_OWORD *)(v44 - 24) = v51;
            v44 -= 24;
            *((_QWORD *)v50 - 1) = *((_QWORD *)v34 + 2);
            *(_QWORD *)v34 = 0;
            *((_QWORD *)v34 + 1) = 0;
            *((_QWORD *)v34 + 2) = 0;
          }
          while (v34 != v38);
          v34 = *a3;
          v52 = a3[1];
          *a3 = v44;
          *(_OWORD *)(a3 + 1) = v60;
          v49 = (char *)v60;
          if (v52 != v34)
          {
            v53 = v52;
            do
            {
              v55 = (void *)*((_QWORD *)v53 - 3);
              v53 -= 24;
              v54 = v55;
              if (v55)
              {
                *((_QWORD *)v52 - 2) = v54;
                operator delete(v54);
              }
              v52 = v53;
            }
            while (v53 != v34);
          }
        }
        if (v34)
          operator delete(v34);
        v7 = v59;
        v3[1] = v49;
        if (v59)
          goto LABEL_70;
        goto LABEL_3;
      }
    }
    v13 = (v9 - v7) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      sub_20E867F44();
    if ((v8 - v7) >> 2 > v14)
      v14 = (v8 - v7) >> 2;
    if ((unint64_t)(v8 - v7) >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
    {
      if (v15 >> 61)
        sub_20E877A38();
      v16 = v15;
      v17 = operator new(8 * v15);
      v15 = v16;
      v18 = &v17[8 * v13];
      *(_QWORD *)v18 = v10;
      v19 = (uint64_t)(v18 + 8);
      v20 = v9 - v7;
      if (v9 != v7)
      {
LABEL_22:
        v21 = v20 - 8;
        if (v21 < 0x168
          || (v26 = (v9 - 8 - v7) & 0xFFFFFFFFFFFFFFF8, &v17[v9 - v7 - 8 - v26] > &v17[v9 - v7 - 8])
          || &v9[-v26 - 8] > v9 - 8
          || (unint64_t)(v7 - v17) < 0x20)
        {
          v22 = v9;
          v3 = a3;
        }
        else
        {
          v27 = (v21 >> 3) + 1;
          v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
          v22 = &v9[-v28];
          v18 -= v28;
          v29 = &v17[8 * v13 - 16];
          v30 = v9 - 16;
          v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v32 = *(_OWORD *)v30;
            *(v29 - 1) = *((_OWORD *)v30 - 1);
            *v29 = v32;
            v29 -= 2;
            v30 -= 32;
            v31 -= 4;
          }
          while (v31);
          v3 = a3;
          if (v27 == (v27 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_25:
            v8 = &v17[8 * v15];
            if (!v7)
            {
LABEL_27:
              v7 = v18;
              v9 = (char *)v19;
              goto LABEL_7;
            }
LABEL_26:
            v24 = v7;
            v25 = v19;
            operator delete(v24);
            v19 = v25;
            v6 = *(_QWORD *)(a2 + 56);
            v5 = *(_QWORD *)(a2 + 64);
            goto LABEL_27;
          }
        }
        do
        {
          v23 = *((_QWORD *)v22 - 1);
          v22 -= 8;
          *((_QWORD *)v18 - 1) = v23;
          v18 -= 8;
        }
        while (v22 != v7);
        goto LABEL_25;
      }
    }
    else
    {
      v17 = 0;
      v18 = (char *)(8 * v13);
      *(_QWORD *)(8 * v13) = v10;
      v19 = 8 * v13 + 8;
      v20 = v9 - v7;
      if (v9 != v7)
        goto LABEL_22;
    }
    v3 = a3;
    v8 = &v17[8 * v15];
    if (!v7)
      goto LABEL_27;
    goto LABEL_26;
  }
}

void sub_20EDBC500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  _QWORD *v18;
  void **v19;
  void *v21;

  v21 = *v19;
  if (*v19)
  {
    *v18 = v21;
    operator delete(v21);
  }
  sub_20EB143E8((uint64_t)&a18);
  if (__p)
    operator delete(__p);
  sub_20E9DD680(a13);
  _Unwind_Resume(a1);
}

void sub_20EDBC58C(uint64_t a1, double *a2, uint64_t *a3, char **a4, double *a5, uint64_t a6)
{
  size_t v6;
  double v11;
  double v12;
  int8x8_t *v13;
  int v14;
  uint64_t v15;
  double v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  size_t v21;
  int64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  int64_t v26;
  char *v27;
  __int128 **v28;
  __int128 **v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  char *v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 *v42;
  __int128 v43;
  _OWORD *v44;
  __int128 v45;
  char *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  char *v63;
  __int128 **v64;
  __int128 **v65;
  unint64_t v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  __int128 **v70;
  __int128 *v71;
  unsigned int v72;
  BOOL v73;
  __int128 *v74;
  _QWORD *v75;
  _QWORD *v76;
  char *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;
  __n128 v83;
  char *v84;
  void *v85;
  char *v86;
  void (***v87)(char *, __n128);
  void (**v88)(char *, __n128);
  unint64_t v89;
  double v90;
  uint64_t v91;
  _QWORD *v92;
  float32x2_t *v93;
  float32x2_t *v94;
  unint64_t v95;
  char *v96;
  char *v97;
  float64x2_t v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  float64x2_t *v105;
  char *v106;
  float64x2_t *v107;
  _QWORD *v108;
  _QWORD *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint8x8_t v116;
  void **v117;
  _QWORD *v118;
  unint64_t v119;
  BOOL v120;
  uint64_t v122;
  float v123;
  uint64_t v124;
  _QWORD *v125;
  int v126;
  _BOOL8 v127;
  unint64_t v128;
  unint64_t v129;
  size_t prime;
  void *v131;
  void *v132;
  uint64_t v133;
  _QWORD **v134;
  size_t v135;
  size_t v136;
  size_t v137;
  _QWORD *i;
  size_t v139;
  uint64_t v140;
  unint64_t v141;
  uint8x8_t v142;
  uint64_t v143;
  _QWORD *v144;
  void *v145;
  unint64_t v146;
  uint64_t v147;
  size_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  __int128 v159;
  char *v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t *v163;
  char *v164;
  uint64_t *v165;
  size_t v166;
  size_t v167;
  int v168;
  unsigned int v169;
  unint64_t v170;
  unint64_t v171;
  uint8x8_t v172;
  _QWORD **v173;
  _QWORD *v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  float v180;
  _BOOL8 v181;
  unint64_t v182;
  unint64_t v183;
  void *v184;
  void *v185;
  uint64_t v186;
  _QWORD **v187;
  size_t v188;
  size_t v189;
  size_t v190;
  _QWORD *j;
  size_t v192;
  uint64_t v193;
  unint64_t v194;
  uint8x8_t v195;
  uint64_t v196;
  _QWORD *v197;
  void *v198;
  uint64_t v199;
  size_t v200;
  _QWORD *v201;
  _QWORD *v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unsigned int v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  char *v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  _BYTE *v218;
  _QWORD *v219;
  int64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  _OWORD *v225;
  char *v226;
  uint64_t v227;
  __int128 v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  size_t v232;
  uint64_t v233;
  int v234;
  unsigned int v235;
  unint64_t v236;
  unint64_t v237;
  uint8x8_t v238;
  size_t *v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  float v246;
  _BOOL8 v247;
  unint64_t v248;
  unint64_t v249;
  size_t v250;
  void *v251;
  void *v252;
  uint64_t v253;
  _QWORD **v254;
  size_t v255;
  size_t v256;
  size_t v257;
  _QWORD *k;
  size_t v259;
  uint64_t v260;
  unint64_t v261;
  uint8x8_t v262;
  uint64_t v263;
  _QWORD *v264;
  void *v265;
  uint64_t v266;
  size_t v267;
  _QWORD *v268;
  size_t *v269;
  unint64_t v270;
  uint8x8_t v271;
  unint64_t *v272;
  unint64_t v273;
  uint64_t v274;
  float64x2_t *v275;
  float v276;
  float v277;
  _BOOL8 v278;
  unint64_t v279;
  unint64_t v280;
  size_t v281;
  void *v282;
  void *v283;
  uint64_t v284;
  _QWORD *v285;
  size_t v286;
  size_t v287;
  size_t v288;
  size_t v289;
  _QWORD *v290;
  size_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint8x8_t v295;
  uint64_t v296;
  _QWORD *v297;
  uint64_t v298;
  size_t v299;
  uint64_t v300;
  void *v301;
  uint64_t v302;
  unint64_t *v303;
  unint64_t v304;
  float64x2_t v305;
  unint64_t v306;
  float64x2_t *v307;
  float64x2_t *v308;
  unint64_t v309;
  uint64_t v310;
  char *v311;
  float64x2_t *v312;
  uint64_t v313;
  uint64_t v314;
  size_t v315;
  _QWORD *v316;
  unint64_t v317;
  char *v318;
  unint64_t v319;
  unint64_t v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  char *v324;
  char *v325;
  const char *v326;
  const char *v327;
  const char *v328;
  void (*v329)(void **);
  unint64_t v330;
  unsigned int v331;
  uint64_t **v332;
  uint64_t *v333;
  unint64_t v334;
  char *v335;
  char *v336;
  unint64_t v337;
  unsigned int v338;
  unint64_t v339;
  char *v340;
  uint64_t v341;
  unsigned int v342;
  BOOL v343;
  uint64_t v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  int8x8_t *v349;
  int8x8_t v350;
  int v351;
  unsigned int v352;
  unint64_t v353;
  uint8x8_t v354;
  unint64_t v355;
  int8x8_t **v356;
  int8x8_t *v357;
  uint64_t v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t v361;
  int8x8_t v362;
  int8x8_t v363;
  int8x8_t v364;
  uint8x8_t v365;
  unint64_t v366;
  uint64_t **v367;
  uint64_t *v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  std::__shared_weak_count *v372;
  uint64_t v373;
  unint64_t *v374;
  unint64_t v375;
  uint64_t v376;
  uint8x8_t v377;
  unint64_t v378;
  uint64_t **v379;
  uint64_t *v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v384;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  unsigned int v389;
  unsigned int v390;
  unint64_t v391;
  unint64_t v392;
  uint64_t v393;
  unsigned int v394;
  BOOL v395;
  const char *v396;
  void (*v397)(void **);
  unint64_t v398;
  uint8x8_t v399;
  unint64_t v400;
  uint64_t **v401;
  uint64_t *v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t v408;
  unint64_t v409;
  uint64_t v410;
  unsigned int v411;
  BOOL v412;
  uint64_t v413;
  uint8x8_t v414;
  unint64_t v415;
  int8x8_t **v416;
  int8x8_t *v417;
  uint64_t v418;
  unint64_t v419;
  unint64_t v420;
  int8x8_t v421;
  unint64_t v422;
  uint8x8_t v423;
  unint64_t v424;
  uint64_t **v425;
  uint64_t *v426;
  uint64_t v427;
  unint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  _QWORD *v433;
  unint64_t v434;
  _QWORD *v435;
  char *v436;
  _QWORD *v437;
  uint64_t v438;
  char **v439;
  char *v440;
  unint64_t v441;
  unint64_t v442;
  unint64_t v443;
  char *v444;
  char *v445;
  char *v446;
  __int128 v447;
  char *v448;
  const char *v449;
  void (*v450)(void **);
  uint64_t v451;
  uint64_t v452;
  char *v453;
  void *v454;
  char *v455;
  unint64_t v456;
  unint64_t v457;
  unint64_t v458;
  unint64_t v459;
  char *v460;
  char *v461;
  char *v462;
  __int128 v463;
  void *v464;
  const char *v465;
  void (*v466)(void **);
  unint64_t *v467;
  unint64_t v468;
  void (*v469)(void **);
  std::__shared_weak_count *v470;
  const char *v471;
  const char *v472;
  _QWORD *v473;
  void *v474;
  _QWORD *v475;
  _QWORD *v476;
  void *v477;
  _QWORD *v478;
  _QWORD *v479;
  void *v480;
  _QWORD *v481;
  _QWORD *v482;
  _QWORD *v483;
  void *v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  void *v488;
  uint64_t v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  char *v493;
  char *v494;
  void *v495;
  void *v496;
  void *v497;
  void *v498;
  unint64_t v499;
  uint64_t v500;
  void *v502;
  char *v503;
  _QWORD *v504;
  double *v505;
  uint64_t *v506;
  char *v507;
  void *v508;
  int v509;
  unint64_t v510;
  float64x2_t **v511;
  uint64_t v512;
  float64x2_t v514;
  int v515;
  float64x2_t *v516;
  float64x2_t v517;
  std::__shared_weak_count *v518;
  void *v519[2];
  _OWORD v520[2];
  void *v521[6];
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  uint64_t v526;
  __int128 v527;
  char *v528;
  void *v529;
  _BYTE *v530;
  uint64_t v531;
  __int128 v532;
  _BYTE v533[32];
  __int128 v534;
  __int128 v535;
  __int128 v536;
  void *v537;
  char *v538;
  char *v539;
  void *v540;
  void *v541;
  __int128 v542;
  __int128 v543;
  int v544;
  void *v545;
  size_t v546;
  unint64_t v547;
  void *v548;
  char *v549;
  char *v550;
  void *v551;
  _BYTE *v552;
  uint64_t v553;
  void *v554;
  _BYTE *v555;
  uint64_t v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  char v564;
  __int128 v565;
  uint64_t v566;
  __int128 v567;
  uint64_t v568;
  __int128 v569;
  void *v570;
  __int128 v571;
  void *v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  _BYTE v576[24];
  __int128 v577;
  char *v578;
  char v579;
  char v580;
  uint64_t v581;
  std::__shared_weak_count *v582;
  void *v583[2];
  char *v584;
  __int128 v585;
  char *v586;
  size_t __sz[2];
  _QWORD *v588;
  void *v589[2];
  void *v590[2];
  float v591;
  void *v592[2];
  void *v593[2];
  float v594;
  void *v595[2];
  char *v596;
  __int128 v597;
  __int128 v598;
  float v599;
  __int128 v600;
  char *v601;
  __int128 v602;
  uint64_t v603;

  kdebug_trace();
  v561 = 0u;
  v562 = 0u;
  v559 = 0u;
  v560 = 0u;
  v557 = 0u;
  v558 = 0u;
  v563 = xmmword_210378540;
  v564 = 0;
  LOBYTE(v565) = 0;
  v579 = 0;
  v580 = 1;
  v11 = *a2;
  v555 = 0;
  v554 = 0;
  v556 = 0;
  v552 = 0;
  v551 = 0;
  v553 = 0;
  v12 = *a5;
  v13 = *(int8x8_t **)a6;
  v14 = *(unsigned __int8 *)(a6 + 8);
  v550 = 0;
  v548 = 0;
  v549 = 0;
  v15 = *((_QWORD *)a2 + 6);
  *((_QWORD *)&v532 + 1) = 1;
  *(_QWORD *)v533 = v15;
  *(_OWORD *)&v533[8] = xmmword_210378550;
  v533[24] = 0;
  *(_QWORD *)&v534 = 0x3FEB333333333333;
  v16 = a2[8] / v12;
  *(double *)&v532 = v16;
  v505 = a2;
  v506 = *(uint64_t **)&v11;
  if (!*((_BYTE *)a2 + 17) && v14 && v13)
  {
    v510 = *((_QWORD *)a2 + 26);
    v17 = a2[27];
    v18 = *((_QWORD *)a2 + 30);
    sub_20EDABE64(v13, a4);
    v19 = sub_20EDAA1F4(v13, v18);
    sub_20EDA9FDC(v13, v19, v18, (uint64_t)v519);
    v6 = (size_t)v519[0];
    v20 = v519[1];
    v21 = (char *)v519[1] - (char *)v519[0];
    v22 = ((char *)v519[1] - (char *)v519[0]) >> 3;
    v502 = v519[0];
    if (v22 != (uint64_t)(*(_QWORD *)(*(_QWORD *)&v11 + 48) - *(_QWORD *)(*(_QWORD *)&v11 + 40)) >> 4
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/Object3dDetector.cpp", 494, (uint64_t)"ranked_keyframes.size() == object_map.frame_set().size()", 56, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| v17 > 1.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/Object3dDetector.cpp", 495, (uint64_t)"keyframe_matching_config.ratio <= 1.0", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v597 = 0uLL;
    *(_QWORD *)&v598 = 0;
    if (v20 == (void *)v6)
    {
      v24 = 0;
      v23 = 0;
      v16 = v17 * (double)(unint64_t)v22;
      v25 = (unint64_t)v16;
      v537 = 0;
      v538 = 0;
      v539 = 0;
      if ((unint64_t)v16)
        goto LABEL_11;
    }
    else
    {
      if ((v21 & 0x8000000000000000) != 0)
        sub_20E92CED8();
      v23 = (char *)operator new(v21);
      v24 = &v23[8 * v22];
      *(_QWORD *)&v597 = v23;
      *(_QWORD *)&v598 = v24;
      memcpy(v23, (const void *)v6, v21);
      *((_QWORD *)&v597 + 1) = v24;
      v16 = v17 * (double)(unint64_t)v22;
      v25 = (unint64_t)v16;
      v537 = 0;
      v538 = 0;
      v539 = 0;
      if ((unint64_t)v16)
      {
LABEL_11:
        if (v25 >> 61)
          sub_20E92CED8();
        v537 = operator new(8 * v25);
        v538 = (char *)v537;
        v539 = (char *)v537 + 8 * v25;
        v519[0] = 0;
        v519[1] = 0;
        *(_QWORD *)&v520[0] = 0;
        v26 = v24 - v23;
        if (v24 == v23)
        {
          v27 = 0;
          v592[0] = &v537;
          goto LABEL_32;
        }
LABEL_30:
        if (v26 < 0)
          sub_20E92CED8();
        v27 = (char *)operator new(v26);
        v519[0] = v27;
        *(_QWORD *)&v520[0] = &v27[8 * (v26 >> 3)];
        memcpy(v27, v23, v26);
        v592[0] = &v537;
        if (!v25)
        {
LABEL_34:
          v519[1] = v27;
          operator delete(v27);
          v34 = (char *)v537;
          v35 = v538;
          v24 = (char *)v597;
          if (!(_QWORD)v597)
          {
LABEL_36:
            v507 = v34;
            if (v34 != v35)
            {
              v36 = 0;
              v37 = v34;
              do
              {
                v38 = *(_OWORD *)(v506[5] + 16 * *(_QWORD *)v37);
                *(_OWORD *)v592 = v38;
                v39 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
                if (*((_QWORD *)&v38 + 1))
                {
                  v40 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
                  do
                    v41 = __ldxr(v40);
                  while (__stxr(v41 + 1, v40));
                }
                v519[0] = 0;
                v519[1] = 0;
                LODWORD(v520[0]) = -1;
                v520[1] = 0u;
                memset(v521, 0, sizeof(v521));
                *(_QWORD *)&v522 = 0;
                v42 = (__int128 *)v38;
                sub_20EDC141C((uint64_t)&v537, (__int128 *)v38, v506[1], a4, a3, (uint64_t)&v520[1], (char **)&v521[1], &v521[4], (uint64_t)&v532);
                v6 = (size_t)v537;
                *((_QWORD *)&v520[0] + 1) = v537;
                if ((unint64_t)v537 >= *((_QWORD *)v505 + 6))
                {
                  v43 = *v42;
                  LODWORD(v520[0]) = *((_DWORD *)v42 + 4);
                  *(_OWORD *)v519 = v43;
                  v44 = v549;
                  if (v549 >= v550)
                  {
                    v46 = sub_20EDC86E4(&v548, (uint64_t)v519);
                  }
                  else
                  {
                    v45 = v520[0];
                    *(_OWORD *)v549 = *(_OWORD *)v519;
                    v44[1] = v45;
                    *((_QWORD *)v44 + 4) = 0;
                    *((_QWORD *)v44 + 5) = 0;
                    *((_QWORD *)v44 + 6) = 0;
                    *((_QWORD *)v44 + 7) = 0;
                    v44[2] = v520[1];
                    *((void **)v44 + 6) = v521[0];
                    v520[1] = 0uLL;
                    v521[0] = 0;
                    *((_QWORD *)v44 + 8) = 0;
                    *((_QWORD *)v44 + 9) = 0;
                    v16 = *(double *)&v521[1];
                    *(_OWORD *)((char *)v44 + 56) = *(_OWORD *)&v521[1];
                    *((void **)v44 + 9) = v521[3];
                    memset(&v521[1], 0, 24);
                    *((void **)v44 + 10) = v521[4];
                    *((void **)v44 + 11) = v521[5];
                    *((_QWORD *)v44 + 12) = v522;
                    v521[4] = 0;
                    v521[5] = 0;
                    *(_QWORD *)&v522 = 0;
                    v46 = (char *)v44 + 104;
                  }
                  v36 += v6;
                  v549 = v46;
                }
                if (v521[4])
                  operator delete(v521[4]);
                if (v521[1])
                {
                  v521[2] = v521[1];
                  operator delete(v521[1]);
                }
                if (*(_QWORD *)&v520[1])
                {
                  *((_QWORD *)&v520[1] + 1) = *(_QWORD *)&v520[1];
                  operator delete(*(void **)&v520[1]);
                }
                if (v39)
                {
                  p_shared_owners = (unint64_t *)&v39->__shared_owners_;
                  do
                    v48 = __ldaxr(p_shared_owners);
                  while (__stlxr(v48 - 1, p_shared_owners));
                  if (!v48)
                  {
                    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                    std::__shared_weak_count::__release_weak(v39);
                  }
                }
                if (v36 > v510)
                  break;
                v37 += 8;
              }
              while (v37 != v35);
            }
            if (v507)
              operator delete(v507);
            if (v502)
              operator delete(v502);
            goto LABEL_63;
          }
LABEL_35:
          *((_QWORD *)&v597 + 1) = v24;
          operator delete(v24);
          goto LABEL_36;
        }
LABEL_32:
        v33 = 0;
        do
        {
          v589[0] = *(void **)&v27[8 * v33];
          sub_20E9B2D04((uint64_t *)v592, v589);
          ++v33;
        }
        while (v25 != v33);
        goto LABEL_34;
      }
    }
    v519[0] = 0;
    v519[1] = 0;
    *(_QWORD *)&v520[0] = 0;
    v26 = v24 - v23;
    if (v24 == v23)
    {
      v35 = 0;
      v34 = 0;
      if (!v24)
        goto LABEL_36;
      goto LABEL_35;
    }
    goto LABEL_30;
  }
  v28 = *(__int128 ***)(*(_QWORD *)&v11 + 40);
  v29 = *(__int128 ***)(*(_QWORD *)&v11 + 48);
  if (v28 != v29)
  {
    v30 = 0;
    do
    {
      v519[0] = 0;
      v519[1] = 0;
      LODWORD(v520[0]) = -1;
      v520[1] = 0u;
      memset(v521, 0, sizeof(v521));
      *(_QWORD *)&v522 = 0;
      sub_20EDC141C((uint64_t)&v537, *v28, v506[1], a4, a3, (uint64_t)&v520[1], (char **)&v521[1], &v521[4], (uint64_t)&v532);
      *((_QWORD *)&v520[0] + 1) = v537;
      if ((unint64_t)v537 >= *((_QWORD *)v505 + 6))
      {
        v31 = **v28;
        LODWORD(v520[0]) = *((_DWORD *)*v28 + 4);
        *(_OWORD *)v519 = v31;
        if (v30 >= v550)
        {
          v30 = sub_20EDC86E4(&v548, (uint64_t)v519);
        }
        else
        {
          v32 = v520[0];
          *(_OWORD *)v30 = *(_OWORD *)v519;
          *((_OWORD *)v30 + 1) = v32;
          *((_QWORD *)v30 + 4) = 0;
          *((_QWORD *)v30 + 5) = 0;
          *((_QWORD *)v30 + 6) = 0;
          *((_QWORD *)v30 + 7) = 0;
          *((_OWORD *)v30 + 2) = v520[1];
          *((void **)v30 + 6) = v521[0];
          v520[1] = 0uLL;
          v521[0] = 0;
          *((_QWORD *)v30 + 8) = 0;
          *((_QWORD *)v30 + 9) = 0;
          v16 = *(double *)&v521[1];
          *(_OWORD *)(v30 + 56) = *(_OWORD *)&v521[1];
          *((void **)v30 + 9) = v521[3];
          memset(&v521[1], 0, 24);
          *((void **)v30 + 10) = v521[4];
          *((void **)v30 + 11) = v521[5];
          *((_QWORD *)v30 + 12) = v522;
          v521[4] = 0;
          v521[5] = 0;
          *(_QWORD *)&v522 = 0;
          v30 += 104;
        }
        v549 = v30;
      }
      if (v521[4])
        operator delete(v521[4]);
      if (v521[1])
      {
        v521[2] = v521[1];
        operator delete(v521[1]);
      }
      if (*(_QWORD *)&v520[1])
      {
        *((_QWORD *)&v520[1] + 1) = *(_QWORD *)&v520[1];
        operator delete(*(void **)&v520[1]);
      }
      v28 += 2;
    }
    while (v28 != v29);
  }
LABEL_63:
  v49 = 126 - 2 * __clz(0x4EC4EC4EC4EC4EC5 * ((v549 - (_BYTE *)v548) >> 3));
  if (v549 == v548)
    v50 = 0;
  else
    v50 = v49;
  sub_20EDC55B0((uint64_t)v548, (unint64_t)v549, v50, 1, v16);
  v52 = *a3;
  v51 = a3[1];
  v547 = 0;
  v545 = 0;
  v546 = 0;
  v53 = v51 - v52;
  v54 = v506;
  if (v53)
  {
    if (v53 < 0)
      sub_20E867F44();
    v6 = 0xCCCCCCCCCCCCCCCDLL * (v53 >> 3);
    v55 = (v6 - 1) >> 6;
    v56 = operator new(8 * (v55 + 1));
    v57 = v56;
    v547 = v55 + 1;
    v545 = v56;
    v546 = v6;
    if (v6 >= 0x41)
      v58 = (v6 - 1) >> 6;
    else
      v58 = 0;
    v56[v58] = 0;
    if (v6 >= 0x40)
      bzero(v56, 8 * (v6 >> 6));
    if ((v6 & 0x3F) != 0)
      v57[v6 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v6 & 0x3F));
  }
  v59 = (char *)v548;
  v60 = 0x4EC4EC4EC4EC4EC5 * ((v549 - (_BYTE *)v548) >> 3);
  v61 = *((_QWORD *)v505 + 5);
  if (v60 < v61)
    v61 = 0x4EC4EC4EC4EC4EC5 * ((v549 - (_BYTE *)v548) >> 3);
  v62 = v61;
  if (v60 < v61)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 379, (uint64_t)"count <= size()", 15, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
LABEL_81:
    v63 = &v59[104 * v62];
    v6 = 0x999999999999999ALL;
    while (1)
    {
      v65 = (__int128 **)v54[5];
      v64 = (__int128 **)v54[6];
      if (v64 != v65)
        break;
LABEL_95:
      if (v65 != v64)
      {
        v74 = *v65;
        if (*((_DWORD *)*v65 + 4) == *((_DWORD *)v59 + 4)
          && *(_QWORD *)v74 == *(_QWORD *)v59
          && *((_DWORD *)v74 + 2) == *((_DWORD *)v59 + 2))
        {
          v64 = v65;
        }
      }
      sub_20EDC0118((uint64_t *)&v545, v54[1], *v64, a3, (_QWORD *)v59 + 4, (_QWORD *)v59 + 7, (_QWORD *)v59 + 10, 0, (uint64_t)v519, 0);
      v537 = 0;
      v538 = 0;
      v539 = 0;
      v532 = 0uLL;
      *(_QWORD *)v533 = 0;
      if (v519[1] == v519[0])
      {
        v77 = 0;
      }
      else
      {
        sub_20E93D8FC((uint64_t)&v537, 0x999999999999999ALL * (((char *)v519[1] - (char *)v519[0]) >> 3));
        *((_QWORD *)&v532 + 1) = v532;
        if (v519[1] == v519[0])
        {
          v77 = (char *)v537;
        }
        else
        {
          sub_20E93D8FC((uint64_t)&v532, 0x6666666666666667 * (((char *)v519[1] - (char *)v519[0]) >> 3));
          v75 = v519[0];
          v76 = v519[1];
          v77 = (char *)v537;
          if (v519[0] != v519[1])
          {
            v78 = (_QWORD *)(v532 + 8);
            v79 = 8;
            do
            {
              v80 = v75[3];
              v81 = &v77[v79];
              *((_QWORD *)v81 - 1) = *(_QWORD *)(v80 + 16);
              *(_QWORD *)v81 = *(_QWORD *)(v80 + 24);
              v82 = (_QWORD *)v75[4];
              *(v78 - 1) = v82[1];
              *v78 = v82[2];
              v78[1] = v82[3];
              v75 += 5;
              v79 += 16;
              v78 += 3;
            }
            while (v75 != v76);
          }
        }
      }
      sub_20EDC70AC((char **)&v554, v555, v77, v538, (v538 - v77) >> 3);
      v83.n128_f64[0] = sub_20EDC70AC((char **)&v551, v552, (char *)v532, *((char **)&v532 + 1), (uint64_t)(*((_QWORD *)&v532 + 1) - v532) >> 3);
      if ((_QWORD)v532)
      {
        *((_QWORD *)&v532 + 1) = v532;
        operator delete((void *)v532);
      }
      if (v537)
      {
        v538 = (char *)v537;
        operator delete(v537);
      }
      v84 = (char *)v519[0];
      if (v519[0])
      {
        v85 = v519[0];
        if (v519[1] != v519[0])
        {
          v86 = (char *)v519[1] - 40;
          v87 = (void (***)(char *, __n128))((char *)v519[1] - 40);
          do
          {
            v88 = *v87;
            v87 -= 5;
            (*v88)(v86, v83);
            v120 = v86 == v84;
            v86 = (char *)v87;
          }
          while (!v120);
          v85 = v519[0];
          v54 = v506;
        }
        v519[1] = v84;
        operator delete(v85);
      }
      v59 += 104;
      if (v59 == v63)
        goto LABEL_118;
    }
    v66 = ((char *)v64 - (char *)v65) >> 4;
    v67 = *((_DWORD *)v59 + 4);
    v68 = *(_QWORD *)v59;
    while (1)
    {
      v69 = v66 >> 1;
      v70 = &v65[2 * (v66 >> 1)];
      v71 = *v70;
      v72 = *((_DWORD *)*v70 + 4);
      v73 = v72 >= v67;
      if (v72 != v67)
        goto LABEL_92;
      if (*(_QWORD *)v71 >= v68)
        break;
LABEL_86:
      v65 = v70 + 2;
      v69 = v66 + ~v69;
LABEL_87:
      v66 = v69;
      if (!v69)
        goto LABEL_95;
    }
    if (*(_QWORD *)v71 != v68)
      goto LABEL_87;
    v73 = *((_DWORD *)v71 + 2) >= *((_DWORD *)v59 + 2);
LABEL_92:
    if (v73)
      goto LABEL_87;
    goto LABEL_86;
  }
  if ((_DWORD)v61)
    goto LABEL_81;
LABEL_118:
  kdebug_trace();
  v89 = (v555 - (_BYTE *)v554) >> 3;
  if (*((_QWORD *)v505 + 7) > v89 >> 1)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 320) = 0;
    goto LABEL_925;
  }
  v542 = 0u;
  v543 = 0u;
  v544 = 733221244;
  kdebug_trace();
  v90 = v505[8];
  v91 = *((_QWORD *)v505 + 7);
  v92 = operator new(8uLL);
  v519[0] = v92;
  *v92 = v91;
  v519[1] = v92 + 1;
  *(_QWORD *)&v520[0] = v92 + 1;
  sub_20EDC7538((uint64_t)&v537, 150, 400, v89 >> 2, (uint64_t)v519, 1, v90, v12);
  if (v519[0])
  {
    v519[1] = v519[0];
    operator delete(v519[0]);
  }
  v529 = 0;
  v530 = 0;
  v531 = 0;
  if ((sub_20EB63308((uint64_t)&v537, &v554, (uint64_t *)&v551, (uint64_t)&v532, (char **)&v529, 0, 0) & 1) == 0)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 320) = 0;
    goto LABEL_920;
  }
  v559 = *(_OWORD *)&v533[16];
  v560 = v534;
  v561 = v535;
  v562 = v536;
  v557 = v532;
  v558 = *(_OWORD *)v533;
  *((_QWORD *)&v563 + 1) = (v530 - (_BYTE *)v529) >> 2;
  if (!*((_BYTE *)v505 + 16))
    goto LABEL_916;
  v600 = 0uLL;
  v601 = 0;
  v94 = (float32x2_t *)*a3;
  v93 = (float32x2_t *)a3[1];
  if (v93 != (float32x2_t *)*a3)
  {
    v95 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v93 - *a3) >> 3);
    if (v95 >> 60)
      sub_20E8E275C();
    v96 = (char *)operator new(16 * v95);
    *(_QWORD *)&v600 = v96;
    *((_QWORD *)&v600 + 1) = v96;
    v601 = &v96[16 * v95];
    v6 = 0x7FFFFFFFFFFFFFF0;
    while (1)
    {
      v98 = vcvtq_f64_f32(v94[1]);
      if (v96 >= v601)
        break;
      *(float64x2_t *)v96 = v98;
      v97 = v96 + 16;
LABEL_128:
      *((_QWORD *)&v600 + 1) = v97;
      v94 += 5;
      v96 = v97;
      if (v94 == v93)
        goto LABEL_147;
    }
    v99 = (char *)v600;
    v100 = (uint64_t)&v96[-v600] >> 4;
    v101 = v100 + 1;
    if ((unint64_t)(v100 + 1) >> 60)
      sub_20E8E275C();
    v102 = (uint64_t)&v601[-v600];
    if ((uint64_t)&v601[-v600] >> 3 > v101)
      v101 = v102 >> 3;
    if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0)
      v103 = 0xFFFFFFFFFFFFFFFLL;
    else
      v103 = v101;
    if (v103)
    {
      v514 = v98;
      if (v103 >> 60)
        sub_20E877A38();
      v104 = (char *)operator new(16 * v103);
      v105 = (float64x2_t *)&v104[16 * v100];
      v106 = &v104[16 * v103];
      *v105 = v514;
      v97 = (char *)&v105[1];
      if (v96 != v99)
      {
LABEL_139:
        v54 = v506;
        do
        {
          v105[-1] = *((float64x2_t *)v96 - 1);
          --v105;
          v96 -= 16;
        }
        while (v96 != v99);
        *(_QWORD *)&v600 = v105;
        v601 = v106;
        if (!v99)
          goto LABEL_128;
        goto LABEL_145;
      }
    }
    else
    {
      v105 = (float64x2_t *)(16 * v100);
      v106 = 0;
      v107 = (float64x2_t *)(16 * v100);
      *v107 = v98;
      v97 = (char *)&v107[1];
      if (v96 != v99)
        goto LABEL_139;
    }
    *(_QWORD *)&v600 = v105;
    v601 = v106;
    v99 = v96;
    v54 = v506;
LABEL_145:
    operator delete(v99);
    goto LABEL_128;
  }
LABEL_147:
  v597 = 0u;
  v598 = 0u;
  v599 = 1.0;
  v596 = 0;
  v595[1] = 0;
  v595[0] = 0;
  v108 = (_QWORD *)v54[1];
  v109 = (_QWORD *)*v108;
  if ((_QWORD *)*v108 != v108 + 1)
  {
    v110 = 0;
    v111 = 0;
    while (1)
    {
      v112 = v109[6];
      v515 = *(unsigned __int8 *)(v112 + 192);
      v113 = *(_QWORD *)(v112 + 24);
      v114 = *(_QWORD *)(v112 + 32);
      v115 = *((_QWORD *)&v597 + 1);
      if (*((_QWORD *)&v597 + 1))
      {
        v116 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v597 + 8));
        v116.i16[0] = vaddlv_u8(v116);
        if (v116.u32[0] > 1uLL)
        {
          v6 = *(_QWORD *)(v112 + 32);
          if (*((_QWORD *)&v597 + 1) <= (unint64_t)v114)
            v6 = (unint64_t)v114 % *((_QWORD *)&v597 + 1);
        }
        else
        {
          v6 = (DWORD2(v597) - 1) & v114;
        }
        v117 = *(void ***)(v597 + 8 * v6);
        if (v117)
        {
          v118 = *v117;
          if (*v117)
          {
            if (v116.u32[0] < 2uLL)
            {
              while (1)
              {
                v122 = v118[1];
                if (v122 == v114)
                {
                  if (v118[2] == v113 && *((_DWORD *)v118 + 6) == (_DWORD)v114)
                    goto LABEL_215;
                }
                else if ((v122 & (*((_QWORD *)&v597 + 1) - 1)) != v6)
                {
                  goto LABEL_177;
                }
                v118 = (_QWORD *)*v118;
                if (!v118)
                  goto LABEL_177;
              }
            }
            do
            {
              v119 = v118[1];
              if (v119 == v114)
              {
                v120 = v118[2] == v113 && *((_DWORD *)v118 + 6) == (_DWORD)v114;
                if (v120)
                {
LABEL_215:
                  v126 = *(unsigned __int8 *)(v112 + 192);
                  goto LABEL_251;
                }
              }
              else
              {
                if (v119 >= *((_QWORD *)&v597 + 1))
                  v119 %= *((_QWORD *)&v597 + 1);
                if (v119 != v6)
                  break;
              }
              v118 = (_QWORD *)*v118;
            }
            while (v118);
          }
        }
      }
LABEL_177:
      v118 = operator new(0x28uLL);
      *v118 = 0;
      v118[1] = v114;
      v118[2] = v113;
      v118[3] = v114;
      v118[4] = 0;
      v123 = (float)(unint64_t)(*((_QWORD *)&v598 + 1) + 1);
      if (!v115 || (float)(v599 * (float)v115) < v123)
        break;
      v124 = v597;
      v125 = *(_QWORD **)(v597 + 8 * v6);
      if (v125)
        goto LABEL_180;
LABEL_230:
      *v118 = v598;
      *(_QWORD *)&v598 = v118;
      *(_QWORD *)(v124 + 8 * v6) = &v598;
      v126 = v515;
      if (*v118)
      {
        v146 = *(_QWORD *)(*v118 + 8);
        if ((v115 & (v115 - 1)) != 0)
        {
          if (v146 >= v115)
            v146 %= v115;
        }
        else
        {
          v146 &= v115 - 1;
        }
        v125 = (_QWORD *)(v597 + 8 * v146);
        goto LABEL_249;
      }
LABEL_250:
      ++*((_QWORD *)&v598 + 1);
LABEL_251:
      v149 = (_QWORD *)(v112 + 40);
      if (!v126)
        v149 = 0;
      v118[4] = 0xAAAAAAAAAAAAAAABLL * ((v111 - v110) >> 3);
      v151 = v149[1];
      v150 = v149[2];
      v152 = v149[3];
      if (v111 >= v596)
      {
        v153 = (char *)v595[0];
        v154 = 0xAAAAAAAAAAAAAAABLL * ((v111 - (char *)v595[0]) >> 3);
        v155 = v154 + 1;
        if (v154 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20E9DEF2C();
        if (0x5555555555555556 * ((v596 - (char *)v595[0]) >> 3) > v155)
          v155 = 0x5555555555555556 * ((v596 - (char *)v595[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v596 - (char *)v595[0]) >> 3) >= 0x555555555555555)
          v156 = 0xAAAAAAAAAAAAAAALL;
        else
          v156 = v155;
        if (v156)
        {
          if (v156 > 0xAAAAAAAAAAAAAAALL)
            sub_20E877A38();
          v157 = (char *)operator new(24 * v156);
          v158 = &v157[24 * v154];
          *(_QWORD *)v158 = v151;
          *((_QWORD *)v158 + 1) = v150;
          *((_QWORD *)v158 + 2) = v152;
          if (v111 != v153)
            goto LABEL_264;
        }
        else
        {
          v157 = 0;
          v158 = (char *)(8 * ((v111 - (char *)v595[0]) >> 3));
          *(_QWORD *)v158 = v151;
          *((_QWORD *)v158 + 1) = v150;
          *((_QWORD *)v158 + 2) = v152;
          if (v111 != v153)
          {
LABEL_264:
            v110 = v158;
            do
            {
              v159 = *(_OWORD *)(v111 - 24);
              *((_QWORD *)v110 - 1) = *((_QWORD *)v111 - 1);
              *(_OWORD *)(v110 - 24) = v159;
              v110 -= 24;
              v111 -= 24;
            }
            while (v111 != v153);
            v160 = (char *)v595[0];
LABEL_269:
            v111 = v158 + 24;
            v595[0] = v110;
            v595[1] = v158 + 24;
            v596 = &v157[24 * v156];
            if (v160)
              operator delete(v160);
            goto LABEL_271;
          }
        }
        v160 = v111;
        v110 = v158;
        goto LABEL_269;
      }
      *(_QWORD *)v111 = v151;
      *((_QWORD *)v111 + 1) = v150;
      *((_QWORD *)v111 + 2) = v152;
      v111 += 24;
LABEL_271:
      v595[1] = v111;
      v161 = (_QWORD *)v109[1];
      if (v161)
      {
        do
        {
          v162 = v161;
          v161 = (_QWORD *)*v161;
        }
        while (v161);
      }
      else
      {
        do
        {
          v162 = (_QWORD *)v109[2];
          v120 = *v162 == (_QWORD)v109;
          v109 = v162;
        }
        while (!v120);
      }
      v109 = v162;
      if (v162 == (_QWORD *)(v506[1] + 8))
        goto LABEL_277;
    }
    v127 = (v115 & (v115 - 1)) != 0;
    if (v115 < 3)
      v127 = 1;
    v128 = v127 | (2 * v115);
    v129 = vcvtps_u32_f32(v123 / v599);
    if (v128 <= v129)
      prime = v129;
    else
      prime = v128;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v115 = *((_QWORD *)&v597 + 1);
    }
    if (prime <= v115)
    {
      if (prime >= v115)
        goto LABEL_228;
      v141 = vcvtps_u32_f32((float)*((unint64_t *)&v598 + 1) / v599);
      if (v115 < 3 || (v142 = (uint8x8_t)vcnt_s8((int8x8_t)v115), v142.i16[0] = vaddlv_u8(v142), v142.u32[0] > 1uLL))
      {
        v141 = std::__next_prime(v141);
      }
      else
      {
        v143 = 1 << -(char)__clz(v141 - 1);
        if (v141 >= 2)
          v141 = v143;
      }
      if (prime <= v141)
        prime = v141;
      if (prime >= v115)
      {
        v115 = *((_QWORD *)&v597 + 1);
        if ((v115 & (v115 - 1)) == 0)
          goto LABEL_229;
LABEL_241:
        if (v115 <= v114)
        {
          v6 = v114 % v115;
          v124 = v597;
          v125 = *(_QWORD **)(v597 + 8 * v6);
          if (!v125)
            goto LABEL_230;
        }
        else
        {
          v6 = v114;
          v124 = v597;
          v125 = *(_QWORD **)(v597 + 8 * v114);
          if (!v125)
            goto LABEL_230;
        }
LABEL_180:
        *v118 = *v125;
        v126 = v515;
LABEL_249:
        *v125 = v118;
        goto LABEL_250;
      }
      if (!prime)
      {
        v145 = (void *)v597;
        *(_QWORD *)&v597 = 0;
        if (v145)
          operator delete(v145);
        v115 = 0;
        *((_QWORD *)&v597 + 1) = 0;
        goto LABEL_229;
      }
    }
    if (prime >> 61)
      sub_20E877A38();
    v131 = operator new(8 * prime);
    v132 = (void *)v597;
    *(_QWORD *)&v597 = v131;
    if (v132)
      operator delete(v132);
    v133 = 0;
    *((_QWORD *)&v597 + 1) = prime;
    do
      *(_QWORD *)(v597 + 8 * v133++) = 0;
    while (prime != v133);
    v134 = (_QWORD **)v598;
    if (!(_QWORD)v598)
    {
LABEL_240:
      v115 = prime;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_241;
LABEL_229:
      v6 = ((_DWORD)v115 - 1) & v114;
      v124 = v597;
      v125 = *(_QWORD **)(v597 + 8 * v6);
      if (!v125)
        goto LABEL_230;
      goto LABEL_180;
    }
    v135 = *(_QWORD *)(v598 + 8);
    v136 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v137 = v135 & v136;
      *(_QWORD *)(v597 + 8 * v137) = &v598;
      for (i = *v134; *v134; i = *v134)
      {
        v139 = i[1] & v136;
        if (v139 == v137)
        {
          v134 = (_QWORD **)i;
        }
        else if (*(_QWORD *)(v597 + 8 * v139))
        {
          *v134 = (_QWORD *)*i;
          v140 = 8 * v139;
          *i = **(_QWORD **)(v597 + v140);
          **(_QWORD **)(v597 + v140) = i;
        }
        else
        {
          *(_QWORD *)(v597 + 8 * v139) = v134;
          v134 = (_QWORD **)i;
          v137 = v139;
        }
      }
      goto LABEL_240;
    }
    if (v135 < prime)
    {
      *(_QWORD *)(v597 + 8 * v135) = &v598;
      v144 = *v134;
      if (*v134)
        goto LABEL_235;
      goto LABEL_227;
    }
    v135 %= prime;
    *(_QWORD *)(v597 + 8 * v135) = &v598;
    v144 = *v134;
    if (!*v134)
    {
LABEL_227:
      v115 = prime;
LABEL_228:
      if ((v115 & (v115 - 1)) != 0)
        goto LABEL_241;
      goto LABEL_229;
    }
    while (1)
    {
LABEL_235:
      v148 = v144[1];
      if (v148 >= prime)
        v148 %= prime;
      if (v148 == v135)
        goto LABEL_234;
      if (*(_QWORD *)(v597 + 8 * v148))
      {
        *v134 = (_QWORD *)*v144;
        v147 = 8 * v148;
        *v144 = **(_QWORD **)(v597 + v147);
        **(_QWORD **)(v597 + v147) = v144;
        v144 = v134;
LABEL_234:
        v134 = (_QWORD **)v144;
        v144 = (_QWORD *)*v144;
        if (!v144)
          goto LABEL_240;
      }
      else
      {
        *(_QWORD *)(v597 + 8 * v148) = v134;
        v134 = (_QWORD **)v144;
        v144 = (_QWORD *)*v144;
        v135 = v148;
        if (!v144)
          goto LABEL_240;
      }
    }
  }
LABEL_277:
  *(_OWORD *)v593 = 0u;
  *(_OWORD *)v592 = 0u;
  v594 = 1.0;
  *(_OWORD *)v590 = 0u;
  *(_OWORD *)v589 = 0u;
  v591 = 1.0;
  __sz[1] = 0;
  __sz[0] = 0;
  v588 = 0;
  v585 = 0uLL;
  v586 = 0;
  v583[1] = 0;
  v583[0] = 0;
  v584 = 0;
  v163 = v506;
  v164 = (char *)v506[5];
  if (v164 == (char *)v506[6])
  {
    v316 = 0;
    v318 = 0;
    v314 = 0;
    v602 = 0uLL;
    v603 = 0;
    goto LABEL_637;
  }
  do
  {
    v165 = *(uint64_t **)v164;
    v166 = __sz[1];
    v167 = __sz[0];
    v168 = *(_DWORD *)(*(_QWORD *)v164 + 16);
    v169 = *(_DWORD *)(*(_QWORD *)v164 + 8);
    v170 = v169 ^ __ROR4__(v168, 13);
    v171 = (unint64_t)v592[1];
    if (v592[1])
    {
      v172 = (uint8x8_t)vcnt_s8((int8x8_t)v592[1]);
      v172.i16[0] = vaddlv_u8(v172);
      if (v172.u32[0] > 1uLL)
      {
        v6 = v170;
        if (v592[1] <= (void *)v170)
          v6 = v170 % (unint64_t)v592[1];
      }
      else
      {
        v6 = (LODWORD(v592[1]) - 1) & v170;
      }
      v173 = (_QWORD **)*((_QWORD *)v592[0] + v6);
      if (v173)
      {
        v174 = *v173;
        if (*v173)
        {
          v175 = *v165;
          if (v172.u32[0] < 2uLL)
          {
            while (1)
            {
              v177 = v174[1];
              if (v177 == v170)
              {
                if (*((_DWORD *)v174 + 8) == v168 && v174[2] == v175 && *((_DWORD *)v174 + 6) == v169)
                  goto LABEL_304;
              }
              else if ((v177 & ((unint64_t)v592[1] - 1)) != v6)
              {
                goto LABEL_305;
              }
              v174 = (_QWORD *)*v174;
              if (!v174)
                goto LABEL_305;
            }
          }
          do
          {
            v176 = v174[1];
            if (v176 == v170)
            {
              if (*((_DWORD *)v174 + 8) == v168 && v174[2] == v175 && *((_DWORD *)v174 + 6) == v169)
              {
LABEL_304:
                v178 = (_QWORD *)__sz[1];
                goto LABEL_376;
              }
            }
            else
            {
              if ((void *)v176 >= v592[1])
                v176 %= (unint64_t)v592[1];
              if (v176 != v6)
                break;
            }
            v174 = (_QWORD *)*v174;
          }
          while (v174);
        }
      }
    }
LABEL_305:
    v174 = operator new(0x30uLL);
    *v174 = 0;
    v174[1] = v170;
    v179 = v165[2];
    *((_OWORD *)v174 + 1) = *(_OWORD *)v165;
    v174[4] = v179;
    v174[5] = 0;
    v180 = (float)((unint64_t)v593[1] + 1);
    if (v171 && (float)(v594 * (float)v171) >= v180)
    {
      v170 = v6;
      goto LABEL_366;
    }
    v181 = (v171 & (v171 - 1)) != 0;
    if (v171 < 3)
      v181 = 1;
    v182 = v181 | (2 * v171);
    v183 = vcvtps_u32_f32(v180 / v594);
    if (v182 <= v183)
      v6 = v183;
    else
      v6 = v182;
    if (v6 == 1)
    {
      v6 = 2;
    }
    else if ((v6 & (v6 - 1)) != 0)
    {
      v6 = std::__next_prime(v6);
      v171 = (unint64_t)v592[1];
    }
    if (v6 <= v171)
    {
      if (v6 >= v171)
        goto LABEL_354;
      v194 = vcvtps_u32_f32((float)(unint64_t)v593[1] / v594);
      if (v171 < 3 || (v195 = (uint8x8_t)vcnt_s8((int8x8_t)v171), v195.i16[0] = vaddlv_u8(v195), v195.u32[0] > 1uLL))
      {
        v194 = std::__next_prime(v194);
      }
      else
      {
        v196 = 1 << -(char)__clz(v194 - 1);
        if (v194 >= 2)
          v194 = v196;
      }
      if (v6 <= v194)
        v6 = v194;
      if (v6 >= v171)
      {
        v171 = (unint64_t)v592[1];
        if (((unint64_t)v592[1] & ((unint64_t)v592[1] - 1)) == 0)
          goto LABEL_355;
        goto LABEL_364;
      }
      if (!v6)
      {
        v198 = v592[0];
        v592[0] = 0;
        if (v198)
          operator delete(v198);
        v171 = 0;
        v592[1] = 0;
        goto LABEL_355;
      }
    }
    if (v6 >> 61)
      sub_20E877A38();
    v184 = operator new(8 * v6);
    v185 = v592[0];
    v592[0] = v184;
    if (v185)
      operator delete(v185);
    v186 = 0;
    v592[1] = (void *)v6;
    do
      *((_QWORD *)v592[0] + v186++) = 0;
    while (v6 != v186);
    v187 = (_QWORD **)v593[0];
    if (v593[0])
    {
      v188 = *((_QWORD *)v593[0] + 1);
      v189 = v6 - 1;
      if ((v6 & (v6 - 1)) == 0)
      {
        v190 = v188 & v189;
        *((_QWORD *)v592[0] + v190) = v593;
        for (j = *v187; *v187; j = *v187)
        {
          v192 = j[1] & v189;
          if (v192 == v190)
          {
            v187 = (_QWORD **)j;
          }
          else if (*((_QWORD *)v592[0] + v192))
          {
            *v187 = (_QWORD *)*j;
            v193 = 8 * v192;
            *j = **(_QWORD **)((char *)v592[0] + v193);
            **(_QWORD **)((char *)v592[0] + v193) = j;
          }
          else
          {
            *((_QWORD *)v592[0] + v192) = v187;
            v187 = (_QWORD **)j;
            v190 = v192;
          }
        }
        goto LABEL_363;
      }
      if (v188 < v6)
      {
        *((_QWORD *)v592[0] + v188) = v593;
        v197 = *v187;
        if (*v187)
          goto LABEL_358;
LABEL_353:
        v171 = v6;
LABEL_354:
        if ((v171 & (v171 - 1)) != 0)
          goto LABEL_364;
LABEL_355:
        v170 = ((_DWORD)v171 - 1) & v170;
        goto LABEL_366;
      }
      v188 %= v6;
      *((_QWORD *)v592[0] + v188) = v593;
      v197 = *v187;
      if (!*v187)
        goto LABEL_353;
      while (1)
      {
LABEL_358:
        v200 = v197[1];
        if (v200 >= v6)
          v200 %= v6;
        if (v200 == v188)
          goto LABEL_357;
        if (*((_QWORD *)v592[0] + v200))
        {
          *v187 = (_QWORD *)*v197;
          v199 = 8 * v200;
          *v197 = **(_QWORD **)((char *)v592[0] + v199);
          **(_QWORD **)((char *)v592[0] + v199) = v197;
          v197 = v187;
LABEL_357:
          v187 = (_QWORD **)v197;
          v197 = (_QWORD *)*v197;
          if (!v197)
            break;
        }
        else
        {
          *((_QWORD *)v592[0] + v200) = v187;
          v187 = (_QWORD **)v197;
          v197 = (_QWORD *)*v197;
          v188 = v200;
          if (!v197)
            break;
        }
      }
    }
LABEL_363:
    v171 = v6;
    if ((v6 & (v6 - 1)) == 0)
      goto LABEL_355;
LABEL_364:
    if (v171 <= v170)
      v170 %= v171;
LABEL_366:
    v201 = v592[0];
    v202 = (_QWORD *)*((_QWORD *)v592[0] + v170);
    if (v202)
    {
      *v174 = *v202;
LABEL_374:
      *v202 = v174;
      goto LABEL_375;
    }
    *v174 = v593[0];
    v593[0] = v174;
    v201[v170] = v593;
    if (*v174)
    {
      v203 = *(_QWORD *)(*v174 + 8);
      if ((v171 & (v171 - 1)) != 0)
      {
        if (v203 >= v171)
          v203 %= v171;
      }
      else
      {
        v203 &= v171 - 1;
      }
      v202 = (char *)v592[0] + 8 * v203;
      goto LABEL_374;
    }
LABEL_375:
    ++v593[1];
    v178 = (_QWORD *)__sz[1];
LABEL_376:
    v174[5] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v166 - v167) >> 3);
    v602 = 0uLL;
    v603 = 0;
    if (v178 >= v588)
    {
      __sz[1] = (size_t)sub_20ED9C854((char **)__sz, (uint64_t)&v602);
      if ((_QWORD)v602)
      {
        *((_QWORD *)&v602 + 1) = v602;
        operator delete((void *)v602);
      }
    }
    else
    {
      *v178 = 0;
      v178[1] = 0;
      v178[2] = 0;
      *(_OWORD *)v178 = v602;
      v178[2] = v603;
      __sz[1] = (size_t)(v178 + 3);
    }
    v204 = *(_QWORD *)(*v506 + 56);
    if (!v204)
      goto LABEL_392;
    v205 = *v165;
    v206 = *((_DWORD *)v165 + 2);
    v207 = *v506 + 56;
    do
    {
      v208 = *(_QWORD *)(v204 + 32);
      if (v208 < v205)
      {
        v204 += 8;
      }
      else if (v208 == v205)
      {
        if (*(_DWORD *)(v204 + 40) < v206)
          v204 += 8;
        else
          v207 = v204;
      }
      else
      {
        v207 = v204;
      }
      v204 = *(_QWORD *)v204;
    }
    while (v204);
    if (v207 == *v506 + 56
      || (v209 = *(_QWORD *)(v207 + 32), v205 < v209)
      || v205 == v209 && *(_DWORD *)(v207 + 40) > v206)
    {
LABEL_392:
      v210 = 0;
      v211 = (char *)*((_QWORD *)&v585 + 1);
      v212 = v586;
      v503 = v164;
      if (*((_QWORD *)&v585 + 1) >= (unint64_t)v586)
        goto LABEL_397;
    }
    else
    {
      v210 = *(_QWORD *)(v207 + 48);
      v211 = (char *)*((_QWORD *)&v585 + 1);
      v212 = v586;
      v503 = v164;
      if (*((_QWORD *)&v585 + 1) >= (unint64_t)v586)
      {
LABEL_397:
        v214 = (char *)v585;
        v171 = (unint64_t)&v211[-v585];
        v6 = (uint64_t)&v211[-v585] >> 3;
        v215 = v6 + 1;
        if ((v6 + 1) >> 61)
          sub_20E867F44();
        v216 = (uint64_t)&v212[-v585];
        if (v216 >> 2 > v215)
          v215 = v216 >> 2;
        if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFF8)
          v217 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v217 = v215;
        if (v217)
        {
          if (v217 >> 61)
            sub_20E877A38();
          v218 = operator new(8 * v217);
          v219 = &v218[8 * v6];
          *v219 = *(_QWORD *)(v210 + 816);
          v213 = (uint64_t)(v219 + 1);
          v220 = v211 - v214;
          if (v211 == v214)
            goto LABEL_414;
        }
        else
        {
          v218 = 0;
          v219 = (_QWORD *)(8 * v6);
          *(_QWORD *)(8 * v6) = *(_QWORD *)(v210 + 816);
          v213 = 8 * v6 + 8;
          v220 = v211 - v214;
          if (v211 == v214)
          {
LABEL_414:
            *(_QWORD *)&v585 = v219;
            v586 = &v218[8 * v217];
            if (v214)
              operator delete(v214);
            goto LABEL_416;
          }
        }
        v221 = v220 - 8;
        if (v221 < 0x58)
          goto LABEL_977;
        if ((unint64_t)(v211 - &v218[v171]) < 0x20)
          goto LABEL_977;
        v222 = (v221 >> 3) + 1;
        v223 = 8 * (v222 & 0x3FFFFFFFFFFFFFFCLL);
        v224 = &v211[-v223];
        v219 = (_QWORD *)((char *)v219 - v223);
        v225 = &v218[8 * v6 - 16];
        v226 = v211 - 16;
        v227 = v222 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v228 = *(_OWORD *)v226;
          *(v225 - 1) = *((_OWORD *)v226 - 1);
          *v225 = v228;
          v225 -= 2;
          v226 -= 32;
          v227 -= 4;
        }
        while (v227);
        v211 = v224;
        if (v222 != (v222 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_977:
          do
          {
            v229 = *((_QWORD *)v211 - 1);
            v211 -= 8;
            *--v219 = v229;
          }
          while (v211 != v214);
        }
        goto LABEL_414;
      }
    }
    *(_QWORD *)v211 = *(_QWORD *)(v210 + 816);
    v213 = (uint64_t)(v211 + 8);
LABEL_416:
    *((_QWORD *)&v585 + 1) = v213;
    v230 = v165[9];
    if (v165[10] == v230)
      goto LABEL_279;
    v231 = 0;
    v232 = __sz[1];
    v511 = (float64x2_t **)(__sz[1] - 24);
    v233 = *(_QWORD *)(__sz[1] - 16);
    while (2)
    {
      v516 = *v511;
      v234 = *((_DWORD *)v165 + 4);
      v235 = *((_DWORD *)v165 + 2);
      v236 = v235 ^ __ROR4__(v234, 13);
      v237 = (unint64_t)v589[1];
      if (!v589[1])
        goto LABEL_446;
      v238 = (uint8x8_t)vcnt_s8((int8x8_t)v589[1]);
      v238.i16[0] = vaddlv_u8(v238);
      if (v238.u32[0] > 1uLL)
      {
        v171 = v236;
        if (v589[1] <= (void *)v236)
          v171 = v236 % (unint64_t)v589[1];
      }
      else
      {
        v171 = (LODWORD(v589[1]) - 1) & v236;
      }
      v239 = (size_t *)*((_QWORD *)v589[0] + v171);
      if (!v239 || (v6 = *v239) == 0)
      {
LABEL_446:
        v6 = (size_t)operator new(0x50uLL);
        *(_QWORD *)&v602 = v6;
        *((_QWORD *)&v602 + 1) = v590;
        *(_QWORD *)v6 = 0;
        *(_QWORD *)(v6 + 8) = v236;
        v245 = v165[2];
        *(_OWORD *)(v6 + 16) = *(_OWORD *)v165;
        *(_QWORD *)(v6 + 32) = v245;
        *(_OWORD *)(v6 + 40) = 0u;
        *(_OWORD *)(v6 + 56) = 0u;
        *(_DWORD *)(v6 + 72) = 1065353216;
        LOBYTE(v603) = 1;
        v246 = (float)((unint64_t)v590[1] + 1);
        if (v237 && (float)(v591 * (float)v237) >= v246)
        {
          v236 = v171;
          goto LABEL_507;
        }
        v247 = (v237 & (v237 - 1)) != 0;
        if (v237 < 3)
          v247 = 1;
        v248 = v247 | (2 * v237);
        v249 = vcvtps_u32_f32(v246 / v591);
        if (v248 <= v249)
          v250 = v249;
        else
          v250 = v248;
        if (v250 == 1)
        {
          v250 = 2;
        }
        else if ((v250 & (v250 - 1)) != 0)
        {
          v250 = std::__next_prime(v250);
          v237 = (unint64_t)v589[1];
        }
        if (v250 <= v237)
        {
          if (v250 >= v237)
            goto LABEL_495;
          v261 = vcvtps_u32_f32((float)(unint64_t)v590[1] / v591);
          if (v237 < 3
            || (v262 = (uint8x8_t)vcnt_s8((int8x8_t)v237), v262.i16[0] = vaddlv_u8(v262), v262.u32[0] > 1uLL))
          {
            v261 = std::__next_prime(v261);
          }
          else
          {
            v263 = 1 << -(char)__clz(v261 - 1);
            if (v261 >= 2)
              v261 = v263;
          }
          if (v250 <= v261)
            v250 = v261;
          if (v250 >= v237)
          {
            v237 = (unint64_t)v589[1];
            if (((unint64_t)v589[1] & ((unint64_t)v589[1] - 1)) != 0)
            {
LABEL_505:
              if (v237 <= v236)
                v236 %= v237;
LABEL_507:
              v268 = v589[0];
              v269 = (size_t *)*((_QWORD *)v589[0] + v236);
              if (v269)
              {
                *(_QWORD *)v6 = *v269;
              }
              else
              {
                *(void **)v6 = v590[0];
                v590[0] = (void *)v6;
                v268[v236] = v590;
                if (!*(_QWORD *)v6)
                  goto LABEL_516;
                v270 = *(_QWORD *)(*(_QWORD *)v6 + 8);
                if ((v237 & (v237 - 1)) != 0)
                {
                  if (v270 >= v237)
                    v270 %= v237;
                }
                else
                {
                  v270 &= v237 - 1;
                }
                v269 = (size_t *)((char *)v589[0] + 8 * v270);
              }
              *v269 = v6;
LABEL_516:
              ++v590[1];
              v243 = *(unsigned int *)(v230 + 40 * v231 + 4);
              v244 = *(_QWORD *)(v6 + 48);
              if (v244)
                goto LABEL_517;
              goto LABEL_537;
            }
LABEL_496:
            v236 = ((_DWORD)v237 - 1) & v236;
            goto LABEL_507;
          }
          if (!v250)
          {
            v265 = v589[0];
            v589[0] = 0;
            if (v265)
              operator delete(v265);
            v237 = 0;
            v589[1] = 0;
            goto LABEL_496;
          }
        }
        if (v250 >> 61)
          sub_20E877A38();
        v251 = operator new(8 * v250);
        v252 = v589[0];
        v589[0] = v251;
        if (v252)
          operator delete(v252);
        v253 = 0;
        v589[1] = (void *)v250;
        do
          *((_QWORD *)v589[0] + v253++) = 0;
        while (v250 != v253);
        v254 = (_QWORD **)v590[0];
        if (!v590[0])
        {
LABEL_504:
          v237 = v250;
          if ((v250 & (v250 - 1)) != 0)
            goto LABEL_505;
          goto LABEL_496;
        }
        v255 = *((_QWORD *)v590[0] + 1);
        v256 = v250 - 1;
        if ((v250 & (v250 - 1)) == 0)
        {
          v257 = v255 & v256;
          *((_QWORD *)v589[0] + v257) = v590;
          for (k = *v254; *v254; k = *v254)
          {
            v259 = k[1] & v256;
            if (v259 == v257)
            {
              v254 = (_QWORD **)k;
            }
            else if (*((_QWORD *)v589[0] + v259))
            {
              *v254 = (_QWORD *)*k;
              v260 = 8 * v259;
              *k = **(_QWORD **)((char *)v589[0] + v260);
              **(_QWORD **)((char *)v589[0] + v260) = k;
            }
            else
            {
              *((_QWORD *)v589[0] + v259) = v254;
              v254 = (_QWORD **)k;
              v257 = v259;
            }
          }
          goto LABEL_504;
        }
        if (v255 < v250)
        {
          *((_QWORD *)v589[0] + v255) = v590;
          v264 = *v254;
          if (*v254)
            goto LABEL_499;
          goto LABEL_494;
        }
        v255 %= v250;
        *((_QWORD *)v589[0] + v255) = v590;
        v264 = *v254;
        if (!*v254)
        {
LABEL_494:
          v237 = v250;
LABEL_495:
          if ((v237 & (v237 - 1)) != 0)
            goto LABEL_505;
          goto LABEL_496;
        }
        while (1)
        {
LABEL_499:
          v267 = v264[1];
          if (v267 >= v250)
            v267 %= v250;
          if (v267 == v255)
            goto LABEL_498;
          if (*((_QWORD *)v589[0] + v267))
          {
            *v254 = (_QWORD *)*v264;
            v266 = 8 * v267;
            *v264 = **(_QWORD **)((char *)v589[0] + v266);
            **(_QWORD **)((char *)v589[0] + v266) = v264;
            v264 = v254;
LABEL_498:
            v254 = (_QWORD **)v264;
            v264 = (_QWORD *)*v264;
            if (!v264)
              goto LABEL_504;
          }
          else
          {
            *((_QWORD *)v589[0] + v267) = v254;
            v254 = (_QWORD **)v264;
            v264 = (_QWORD *)*v264;
            v255 = v267;
            if (!v264)
              goto LABEL_504;
          }
        }
      }
      v240 = *v165;
      if (v238.u32[0] < 2uLL)
      {
        while (1)
        {
          v242 = *(_QWORD *)(v6 + 8);
          if (v242 == v236)
          {
            if (*(_DWORD *)(v6 + 32) == v234 && *(_QWORD *)(v6 + 16) == v240 && *(_DWORD *)(v6 + 24) == v235)
              goto LABEL_444;
          }
          else if ((v242 & ((unint64_t)v589[1] - 1)) != v171)
          {
            goto LABEL_446;
          }
          v6 = *(_QWORD *)v6;
          if (!v6)
            goto LABEL_446;
        }
      }
      while (1)
      {
        v241 = *(_QWORD *)(v6 + 8);
        if (v241 == v236)
          break;
        if ((void *)v241 >= v589[1])
          v241 %= (unint64_t)v589[1];
        if (v241 != v171)
          goto LABEL_446;
LABEL_430:
        v6 = *(_QWORD *)v6;
        if (!v6)
          goto LABEL_446;
      }
      if (*(_DWORD *)(v6 + 32) != v234 || *(_QWORD *)(v6 + 16) != v240 || *(_DWORD *)(v6 + 24) != v235)
        goto LABEL_430;
LABEL_444:
      v243 = *(unsigned int *)(v230 + 40 * v231 + 4);
      v244 = *(_QWORD *)(v6 + 48);
      if (!v244)
        goto LABEL_537;
LABEL_517:
      v271 = (uint8x8_t)vcnt_s8((int8x8_t)v244);
      v271.i16[0] = vaddlv_u8(v271);
      if (v271.u32[0] > 1uLL)
      {
        v236 = v243;
        if (v244 <= v243)
          v236 = v243 % v244;
      }
      else
      {
        v236 = ((_DWORD)v244 - 1) & v243;
      }
      v272 = *(unint64_t **)(*(_QWORD *)(v6 + 40) + 8 * v236);
      if (v272)
      {
        v171 = *v272;
        if (*v272)
        {
          if (v271.u32[0] < 2uLL)
          {
            while (1)
            {
              v274 = *(_QWORD *)(v171 + 8);
              if (v274 == v243)
              {
                if (*(_DWORD *)(v171 + 16) == (_DWORD)v243)
                  goto LABEL_536;
              }
              else if ((v274 & (v244 - 1)) != v236)
              {
                goto LABEL_537;
              }
              v171 = *(_QWORD *)v171;
              if (!v171)
                goto LABEL_537;
            }
          }
          do
          {
            v273 = *(_QWORD *)(v171 + 8);
            if (v273 == v243)
            {
              if (*(_DWORD *)(v171 + 16) == (_DWORD)v243)
              {
LABEL_536:
                v275 = v516;
                goto LABEL_605;
              }
            }
            else
            {
              if (v273 >= v244)
                v273 %= v244;
              if (v273 != v236)
                break;
            }
            v171 = *(_QWORD *)v171;
          }
          while (v171);
        }
      }
LABEL_537:
      v171 = (unint64_t)operator new(0x20uLL);
      *(_QWORD *)v171 = 0;
      *(_QWORD *)(v171 + 8) = v243;
      *(_DWORD *)(v171 + 16) = v243;
      *(_QWORD *)(v171 + 24) = 0;
      v276 = (float)(unint64_t)(*(_QWORD *)(v6 + 64) + 1);
      v277 = *(float *)(v6 + 72);
      if (v244 && (float)(v277 * (float)v244) >= v276)
      {
        v243 = v236;
        v275 = v516;
        goto LABEL_595;
      }
      v278 = (v244 & (v244 - 1)) != 0;
      if (v244 < 3)
        v278 = 1;
      v279 = v278 | (2 * v244);
      v280 = vcvtps_u32_f32(v276 / v277);
      if (v279 <= v280)
        v281 = v280;
      else
        v281 = v279;
      if (v281 == 1)
      {
        v281 = 2;
      }
      else if ((v281 & (v281 - 1)) != 0)
      {
        v281 = std::__next_prime(v281);
        v244 = *(_QWORD *)(v6 + 48);
      }
      if (v281 <= v244)
      {
        if (v281 >= v244)
          goto LABEL_582;
        v294 = vcvtps_u32_f32((float)*(unint64_t *)(v6 + 64) / *(float *)(v6 + 72));
        if (v244 < 3 || (v295 = (uint8x8_t)vcnt_s8((int8x8_t)v244), v295.i16[0] = vaddlv_u8(v295), v295.u32[0] > 1uLL))
        {
          v294 = std::__next_prime(v294);
        }
        else
        {
          v296 = 1 << -(char)__clz(v294 - 1);
          if (v294 >= 2)
            v294 = v296;
        }
        if (v281 <= v294)
          v281 = v294;
        if (v281 < v244)
        {
          if (v281)
            goto LABEL_550;
          v301 = *(void **)(v6 + 40);
          *(_QWORD *)(v6 + 40) = 0;
          v275 = v516;
          if (v301)
            operator delete(v301);
          v244 = 0;
          *(_QWORD *)(v6 + 48) = 0;
          goto LABEL_583;
        }
        v244 = *(_QWORD *)(v6 + 48);
        v275 = v516;
        if ((v244 & (v244 - 1)) == 0)
          goto LABEL_583;
        goto LABEL_593;
      }
LABEL_550:
      if (v281 >> 61)
        sub_20E877A38();
      v282 = operator new(8 * v281);
      v283 = *(void **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v282;
      if (v283)
        operator delete(v283);
      v284 = 0;
      *(_QWORD *)(v6 + 48) = v281;
      do
        *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8 * v284++) = 0;
      while (v281 != v284);
      v286 = v6 + 56;
      v285 = *(_QWORD **)(v6 + 56);
      if (v285)
      {
        v287 = v285[1];
        v288 = v281 - 1;
        if ((v281 & (v281 - 1)) == 0)
        {
          v289 = v287 & v288;
          *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8 * v289) = v286;
          while (1)
          {
            v290 = (_QWORD *)*v285;
            if (!*v285)
              break;
            v291 = v290[1] & v288;
            if (v291 == v289)
            {
              v285 = (_QWORD *)*v285;
            }
            else
            {
              v292 = *(_QWORD *)(v6 + 40);
              if (*(_QWORD *)(v292 + 8 * v291))
              {
                *v285 = *v290;
                v293 = 8 * v291;
                *v290 = **(_QWORD **)(*(_QWORD *)(v6 + 40) + v293);
                **(_QWORD **)(*(_QWORD *)(v6 + 40) + v293) = v290;
              }
              else
              {
                *(_QWORD *)(v292 + 8 * v291) = v285;
                v285 = v290;
                v289 = v291;
              }
            }
          }
          goto LABEL_581;
        }
        if (v287 >= v281)
          v287 %= v281;
        *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8 * v287) = v286;
        v297 = (_QWORD *)*v285;
        if (*v285)
        {
          while (1)
          {
            v299 = v297[1];
            if (v299 >= v281)
              v299 %= v281;
            if (v299 == v287)
              goto LABEL_575;
            v300 = *(_QWORD *)(v6 + 40);
            if (*(_QWORD *)(v300 + 8 * v299))
            {
              *v285 = *v297;
              v298 = 8 * v299;
              *v297 = **(_QWORD **)(*(_QWORD *)(v6 + 40) + v298);
              **(_QWORD **)(*(_QWORD *)(v6 + 40) + v298) = v297;
              v297 = v285;
LABEL_575:
              v285 = v297;
              v297 = (_QWORD *)*v297;
              if (!v297)
                break;
            }
            else
            {
              *(_QWORD *)(v300 + 8 * v299) = v285;
              v285 = v297;
              v297 = (_QWORD *)*v297;
              v287 = v299;
              if (!v297)
                break;
            }
          }
        }
      }
LABEL_581:
      v244 = v281;
LABEL_582:
      v275 = v516;
      if ((v244 & (v244 - 1)) == 0)
      {
LABEL_583:
        v243 = ((_DWORD)v244 - 1) & v243;
        goto LABEL_595;
      }
LABEL_593:
      if (v244 <= v243)
        v243 %= v244;
LABEL_595:
      v302 = *(_QWORD *)(v6 + 40);
      v303 = *(unint64_t **)(v302 + 8 * v243);
      if (v303)
      {
        *(_QWORD *)v171 = *v303;
        goto LABEL_603;
      }
      *(_QWORD *)v171 = *(_QWORD *)(v6 + 56);
      *(_QWORD *)(v6 + 56) = v171;
      *(_QWORD *)(v302 + 8 * v243) = v6 + 56;
      if (*(_QWORD *)v171)
      {
        v304 = *(_QWORD *)(*(_QWORD *)v171 + 8);
        if ((v244 & (v244 - 1)) != 0)
        {
          if (v304 >= v244)
            v304 %= v244;
        }
        else
        {
          v304 &= v244 - 1;
        }
        v303 = (unint64_t *)(*(_QWORD *)(v6 + 40) + 8 * v304);
LABEL_603:
        *v303 = v171;
      }
      ++*(_QWORD *)(v6 + 64);
LABEL_605:
      *(_QWORD *)(v171 + 24) = (v233 - (uint64_t)v275) >> 4;
      v305 = vcvtq_f64_f32(*(float32x2_t *)(v230 + 40 * v231 + 8));
      v307 = *(float64x2_t **)(v232 - 16);
      v306 = *(_QWORD *)(v232 - 8);
      if ((unint64_t)v307 < v306)
      {
        *v307 = v305;
        v233 = (uint64_t)&v307[1];
        goto LABEL_419;
      }
      v308 = *v511;
      v171 = v307 - *v511;
      v309 = v171 + 1;
      if ((v171 + 1) >> 60)
        sub_20E8E275C();
      v310 = v306 - (_QWORD)v308;
      if (v310 >> 3 > v309)
        v309 = v310 >> 3;
      if ((unint64_t)v310 >= 0x7FFFFFFFFFFFFFF0)
        v6 = 0xFFFFFFFFFFFFFFFLL;
      else
        v6 = v309;
      if (!v6)
      {
        v311 = 0;
        v312 = (float64x2_t *)(16 * v171);
        *(float64x2_t *)(16 * v171) = v305;
        v233 = 16 * v171 + 16;
        if (v307 == v308)
          goto LABEL_619;
        do
        {
LABEL_617:
          v312[-1] = v307[-1];
          --v312;
          --v307;
        }
        while (v307 != v308);
        v307 = *v511;
        goto LABEL_619;
      }
      v517 = v305;
      if (v6 >> 60)
        sub_20E877A38();
      v311 = (char *)operator new(16 * v6);
      v312 = (float64x2_t *)&v311[16 * v171];
      *v312 = v517;
      v233 = (uint64_t)&v312[1];
      if (v307 != v308)
        goto LABEL_617;
LABEL_619:
      *(_QWORD *)(v232 - 24) = v312;
      *(_QWORD *)(v232 - 16) = v233;
      *(_QWORD *)(v232 - 8) = &v311[16 * v6];
      if (v307)
        operator delete(v307);
LABEL_419:
      *(_QWORD *)(v232 - 16) = v233;
      ++v231;
      v230 = v165[9];
      if (v231 < 0xCCCCCCCCCCCCCCCDLL * ((v165[10] - v230) >> 3))
        continue;
      break;
    }
LABEL_279:
    v164 = v503 + 16;
    v163 = v506;
  }
  while (v503 + 16 != (char *)v506[6]);
  v313 = v506[5];
  v602 = 0uLL;
  v603 = 0;
  v314 = (uint64_t)&v164[-v313];
  if (v164 == (char *)v313)
  {
    v316 = 0;
    v318 = 0;
    goto LABEL_637;
  }
  if ((unint64_t)v314 >= 0x7FFFFFFFFFFFFFF1)
    sub_20E867F44();
  v315 = 2 * v314;
  v316 = operator new(2 * v314);
  v317 = v314 >> 4;
  v314 = (uint64_t)&v316[4 * (v314 >> 4)];
  *(_QWORD *)&v602 = v316;
  v603 = v314;
  bzero(v316, v315);
  v318 = (char *)v316 + v315;
  *((_QWORD *)&v602 + 1) = (char *)v316 + v315;
  if (v317 <= 1)
    v319 = 1;
  else
    v319 = v317;
  if (v319 < 2)
  {
    v320 = 0;
LABEL_635:
    v323 = 4 * v320;
    do
    {
      v316[v323] = v320++;
      v323 += 4;
    }
    while (v319 != v320);
    goto LABEL_637;
  }
  v321 = 0;
  v320 = v319 & 0xFFFFFFFFFFFFFFFELL;
  v322 = v316 + 4;
  do
  {
    *(v322 - 4) = v321;
    *v322 = v321 + 1;
    v322 += 8;
    v321 += 2;
  }
  while (v321 != v320);
  if (v319 != v320)
    goto LABEL_635;
LABEL_637:
  v324 = (char *)v548;
  v325 = v549;
  if (v548 == v549)
    goto LABEL_894;
  v326 = "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/Object3dDetector.cpp";
  v327 = "track->hasNode(match_info.image_id)";
  v328 = "";
  v329 = (void (*)(void **))sub_21023DDB0;
  while (2)
  {
    v330 = *(_QWORD *)v324;
    v331 = *((_DWORD *)v324 + 2);
    v332 = (uint64_t **)(*v163 + 56);
    v333 = *v332;
    do
    {
      v334 = v333[4];
      if (v334 < v330)
      {
        ++v333;
      }
      else if (v334 == v330)
      {
        if (*((_DWORD *)v333 + 10) < v331)
          ++v333;
        else
          v332 = (uint64_t **)v333;
      }
      else
      {
        v332 = (uint64_t **)v333;
      }
      v333 = (uint64_t *)*v333;
    }
    while (v333);
    v336 = (char *)v163[5];
    v335 = (char *)v163[6];
    if (v335 != v336)
    {
      v337 = (v335 - v336) >> 4;
      v338 = *((_DWORD *)v324 + 4);
      while (1)
      {
        v339 = v337 >> 1;
        v340 = &v336[16 * (v337 >> 1)];
        v341 = *(_QWORD *)v340;
        v342 = *(_DWORD *)(*(_QWORD *)v340 + 16);
        v343 = v342 >= v338;
        if (v342 != v338)
          goto LABEL_657;
        if (*(_QWORD *)v341 >= v330)
          break;
LABEL_651:
        v336 = v340 + 16;
        v339 = v337 + ~v339;
LABEL_652:
        v337 = v339;
        if (!v339)
          goto LABEL_660;
      }
      if (*(_QWORD *)v341 != v330)
        goto LABEL_652;
      v343 = *(_DWORD *)(v341 + 8) >= v331;
LABEL_657:
      if (v343)
        goto LABEL_652;
      goto LABEL_651;
    }
LABEL_660:
    if (v336 != v335)
    {
      v344 = *(_QWORD *)v336;
      if (*(_DWORD *)(*(_QWORD *)v336 + 16) == *((_DWORD *)v324 + 4)
        && *(_QWORD *)v344 == v330
        && *(_DWORD *)(v344 + 8) == v331)
      {
        v335 = v336;
      }
    }
    v345 = *((_QWORD *)v324 + 11);
    if (!v345)
      goto LABEL_639;
    v346 = 0;
    v347 = v332[6][102];
    v348 = *(_QWORD *)v335;
    while (2)
    {
      if (((*(_QWORD *)(*((_QWORD *)v324 + 10) + ((v346 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v346) & 1) == 0)
        goto LABEL_668;
      v349 = (int8x8_t *)v163[1];
      v350 = v349[4];
      if (!*(_QWORD *)&v350)
        goto LABEL_667;
      v351 = *((_DWORD *)v324 + 4);
      v352 = *((_DWORD *)v324 + 2);
      v353 = v352 ^ __ROR4__(v351, 13);
      v354 = (uint8x8_t)vcnt_s8(v350);
      v354.i16[0] = vaddlv_u8(v354);
      if (v354.u32[0] > 1uLL)
      {
        v355 = v353;
        if (*(_QWORD *)&v350 <= v353)
          v355 = v353 % *(_QWORD *)&v350;
      }
      else
      {
        v355 = (v350.i32[0] - 1) & v353;
      }
      v356 = *(int8x8_t ***)(*(_QWORD *)&v349[3] + 8 * v355);
      if (!v356)
        goto LABEL_667;
      v357 = *v356;
      if (!*v356)
        goto LABEL_667;
      v358 = *((_QWORD *)v324 + 7);
      v359 = *(unsigned int *)(*(_QWORD *)(v348 + 72) + 40 * *(unsigned int *)(*((_QWORD *)v324 + 4) + 4 * v346) + 4);
      v360 = *(_QWORD *)v324;
      if (v354.u32[0] < 2uLL)
      {
        v361 = *(_QWORD *)&v350 - 1;
        while (1)
        {
          v363 = v357[1];
          if (*(_QWORD *)&v363 == v353)
          {
            if (v357[4].i32[0] == v351 && *(_QWORD *)&v357[2] == v360 && v357[3].i32[0] == v352)
              goto LABEL_694;
          }
          else if ((*(_QWORD *)&v363 & v361) != v355)
          {
            goto LABEL_667;
          }
          v357 = (int8x8_t *)*v357;
          if (!v357)
            goto LABEL_667;
        }
      }
      while (1)
      {
        v362 = v357[1];
        if (*(_QWORD *)&v362 == v353)
          break;
        if (*(_QWORD *)&v362 >= *(_QWORD *)&v350)
          *(_QWORD *)&v362 %= *(_QWORD *)&v350;
        if (*(_QWORD *)&v362 != v355)
          goto LABEL_667;
LABEL_680:
        v357 = (int8x8_t *)*v357;
        if (!v357)
          goto LABEL_667;
      }
      if (v357[4].i32[0] != v351 || *(_QWORD *)&v357[2] != v360 || v357[3].i32[0] != v352)
        goto LABEL_680;
LABEL_694:
      v364 = v357[6];
      if (!*(_QWORD *)&v364)
        goto LABEL_667;
      v365 = (uint8x8_t)vcnt_s8(v364);
      v365.i16[0] = vaddlv_u8(v365);
      if (v365.u32[0] > 1uLL)
      {
        v366 = *(unsigned int *)(*(_QWORD *)(v348 + 72) + 40 * *(unsigned int *)(*((_QWORD *)v324 + 4) + 4 * v346) + 4);
        if (*(_QWORD *)&v364 <= v359)
          v366 = v359 % *(_QWORD *)&v364;
      }
      else
      {
        v366 = (v364.i32[0] - 1) & v359;
      }
      v367 = *(uint64_t ***)(*(_QWORD *)&v357[5] + 8 * v366);
      if (!v367)
        goto LABEL_667;
      v368 = *v367;
      if (!v368)
        goto LABEL_667;
      if (v365.u32[0] < 2uLL)
      {
        v369 = *(_QWORD *)&v364 - 1;
        while (1)
        {
          v371 = v368[1];
          if (v371 == v359)
          {
            if (*((_DWORD *)v368 + 4) == (_DWORD)v359)
              goto LABEL_715;
          }
          else if ((v371 & v369) != v366)
          {
            goto LABEL_667;
          }
          v368 = (uint64_t *)*v368;
          if (!v368)
            goto LABEL_667;
        }
      }
      while (2)
      {
        v370 = v368[1];
        if (v370 != v359)
        {
          if (v370 >= *(_QWORD *)&v364)
            v370 %= *(_QWORD *)&v364;
          if (v370 != v366)
            goto LABEL_667;
          goto LABEL_704;
        }
        if (*((_DWORD *)v368 + 4) != (_DWORD)v359)
        {
LABEL_704:
          v368 = (uint64_t *)*v368;
          if (!v368)
            goto LABEL_667;
          continue;
        }
        break;
      }
LABEL_715:
      v373 = v368[3];
      v372 = (std::__shared_weak_count *)v368[4];
      v581 = v373;
      v582 = v372;
      if (v372)
      {
        v374 = (unint64_t *)&v372->__shared_owners_;
        do
          v375 = __ldxr(v374);
        while (__stxr(v375 + 1, v374));
      }
      if (v373 && *(_BYTE *)(v373 + 192))
      {
        v518 = v372;
        if (!*((_QWORD *)&v597 + 1))
          goto LABEL_953;
        v376 = *(_QWORD *)(v373 + 32);
        v377 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v597 + 8));
        v377.i16[0] = vaddlv_u8(v377);
        if (v377.u32[0] > 1uLL)
        {
          v378 = *(_QWORD *)(v373 + 32);
          if (*((_QWORD *)&v597 + 1) <= (unint64_t)v376)
            v378 = (unint64_t)v376 % *((_QWORD *)&v597 + 1);
        }
        else
        {
          v378 = (DWORD2(v597) - 1) & v376;
        }
        v379 = *(uint64_t ***)(v597 + 8 * v378);
        if (!v379 || (v380 = *v379) == 0)
LABEL_953:
          sub_20E89FD20("unordered_map::at: key not found");
        v381 = *(_QWORD *)(v373 + 24);
        if (v377.u32[0] < 2uLL)
        {
          while (1)
          {
            v384 = v380[1];
            if (v384 == v376)
            {
              if (v380[2] == v381 && *((_DWORD *)v380 + 6) == (_DWORD)v376)
                goto LABEL_748;
            }
            else if ((v384 & (*((_QWORD *)&v597 + 1) - 1)) != v378)
            {
              goto LABEL_953;
            }
            v380 = (uint64_t *)*v380;
            if (!v380)
              goto LABEL_953;
          }
        }
        while (1)
        {
          v382 = v380[1];
          if (v382 == v376)
          {
            if (v380[2] == v381 && *((_DWORD *)v380 + 6) == (_DWORD)v376)
            {
LABEL_748:
              v386 = *(_QWORD *)(v373 + 200);
              v387 = *(_QWORD *)(v373 + 208);
              v388 = *(_QWORD *)v324;
              v389 = *((_DWORD *)v324 + 2);
              v390 = *((_DWORD *)v324 + 4);
              if (v387 == v386)
              {
LABEL_759:
                v512 = v380[4];
                if (v386 == v387
                  || *(_DWORD *)(v386 + 16) != v390
                  || *(_QWORD *)v386 != v388
                  || *(_DWORD *)(v386 + 8) != v389)
                {
                  v396 = v328;
                  v397 = v329;
                  if (sub_21023D5B4(v326, 294, (uint64_t)v327, 35, (uint64_t)v328, 0, v329))
                    abort();
                  v390 = *((_DWORD *)v324 + 4);
                  v389 = *((_DWORD *)v324 + 2);
                  v328 = v396;
                  v329 = v397;
                }
                if (!v592[1])
                  goto LABEL_951;
                v398 = v389 ^ __ROR4__(v390, 13);
                v399 = (uint8x8_t)vcnt_s8((int8x8_t)v592[1]);
                v399.i16[0] = vaddlv_u8(v399);
                if (v399.u32[0] > 1uLL)
                {
                  v400 = v398;
                  if (v592[1] <= (void *)v398)
                    v400 = v398 % (unint64_t)v592[1];
                }
                else
                {
                  v400 = (LODWORD(v592[1]) - 1) & v398;
                }
                v401 = (uint64_t **)*((_QWORD *)v592[0] + v400);
                if (!v401 || (v402 = *v401) == 0)
LABEL_951:
                  sub_20E89FD20("unordered_map::at: key not found");
                v403 = *(_QWORD *)v324;
                if (v399.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v405 = v402[1];
                    if (v405 == v398)
                    {
                      if (*((_DWORD *)v402 + 8) == v390 && v402[2] == v403 && *((_DWORD *)v402 + 6) == v389)
                        goto LABEL_789;
                    }
                    else if ((v405 & ((unint64_t)v592[1] - 1)) != v400)
                    {
                      goto LABEL_951;
                    }
                    v402 = (uint64_t *)*v402;
                    if (!v402)
                      goto LABEL_951;
                  }
                }
                while (1)
                {
                  v404 = v402[1];
                  if (v404 == v398)
                  {
                    if (*((_DWORD *)v402 + 8) == v390 && v402[2] == v403 && *((_DWORD *)v402 + 6) == v389)
                    {
LABEL_789:
                      v406 = *(_QWORD *)(v373 + 200);
                      v407 = *(_QWORD *)(v373 + 208);
                      if (v407 == v406)
                      {
LABEL_800:
                        if (v406 != v407
                          && *(_DWORD *)(v406 + 16) == v390
                          && *(_QWORD *)v406 == v403
                          && *(_DWORD *)(v406 + 8) == v389)
                        {
                          v413 = *(_QWORD *)(v406 + 24);
                        }
                        else
                        {
                          v413 = 0;
                        }
                        if (v589[1])
                        {
                          v414 = (uint8x8_t)vcnt_s8((int8x8_t)v589[1]);
                          v414.i16[0] = vaddlv_u8(v414);
                          if (v414.u32[0] > 1uLL)
                          {
                            v415 = v398;
                            if (v589[1] <= (void *)v398)
                              v415 = v398 % (unint64_t)v589[1];
                          }
                          else
                          {
                            v415 = (LODWORD(v589[1]) - 1) & v398;
                          }
                          v416 = (int8x8_t **)*((_QWORD *)v589[0] + v415);
                          if (v416)
                          {
                            v417 = *v416;
                            if (v417)
                            {
                              v418 = v402[5];
                              if (v414.u32[0] < 2uLL)
                              {
                                while (1)
                                {
                                  v420 = (unint64_t)v417[1];
                                  if (v420 == v398)
                                  {
                                    if (v417[4].i32[0] == v390 && *(_QWORD *)&v417[2] == v403 && v417[3].i32[0] == v389)
                                      goto LABEL_830;
                                  }
                                  else if ((v420 & ((unint64_t)v589[1] - 1)) != v415)
                                  {
                                    goto LABEL_952;
                                  }
                                  v417 = (int8x8_t *)*v417;
                                  if (!v417)
                                    goto LABEL_952;
                                }
                              }
                              do
                              {
                                v419 = (unint64_t)v417[1];
                                if (v419 == v398)
                                {
                                  if (v417[4].i32[0] == v390 && *(_QWORD *)&v417[2] == v403 && v417[3].i32[0] == v389)
                                  {
LABEL_830:
                                    v421 = v417[6];
                                    if (!*(_QWORD *)&v421)
                                      goto LABEL_954;
                                    v422 = *(unsigned int *)(v413 + 4);
                                    v423 = (uint8x8_t)vcnt_s8(v421);
                                    v423.i16[0] = vaddlv_u8(v423);
                                    if (v423.u32[0] > 1uLL)
                                    {
                                      v424 = *(unsigned int *)(v413 + 4);
                                      if (*(_QWORD *)&v421 <= v422)
                                        v424 = v422 % *(_QWORD *)&v421;
                                    }
                                    else
                                    {
                                      v424 = (v421.i32[0] - 1) & v422;
                                    }
                                    v425 = *(uint64_t ***)(*(_QWORD *)&v417[5] + 8 * v424);
                                    if (!v425 || (v426 = *v425) == 0)
LABEL_954:
                                      sub_20E89FD20("unordered_map::at: key not found");
                                    if (v423.u32[0] < 2uLL)
                                    {
                                      v427 = *(_QWORD *)&v421 - 1;
                                      while (1)
                                      {
                                        v429 = v426[1];
                                        if (v429 == v422)
                                        {
                                          if (*((_DWORD *)v426 + 4) == (_DWORD)v422)
                                            goto LABEL_850;
                                        }
                                        else if ((v429 & v427) != v424)
                                        {
                                          goto LABEL_954;
                                        }
                                        v426 = (uint64_t *)*v426;
                                        if (!v426)
                                          goto LABEL_954;
                                      }
                                    }
                                    while (1)
                                    {
                                      v428 = v426[1];
                                      if (v428 == v422)
                                      {
                                        if (*((_DWORD *)v426 + 4) == (_DWORD)v422)
                                        {
LABEL_850:
                                          v430 = v426[3];
                                          v431 = v602 + 32 * v418;
                                          v434 = *(_QWORD *)(v431 + 24);
                                          v433 = (_QWORD *)(v431 + 24);
                                          v432 = v434;
                                          v435 = v433 - 1;
                                          v436 = (char *)*(v433 - 1);
                                          v372 = v518;
                                          if ((unint64_t)v436 >= v434)
                                          {
                                            v439 = (char **)(v433 - 2);
                                            v440 = (char *)*(v433 - 2);
                                            v441 = 0xAAAAAAAAAAAAAAABLL * ((v436 - v440) >> 3) + 1;
                                            if (v441 > 0xAAAAAAAAAAAAAAALL)
                                              sub_20E867F44();
                                            v442 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v432 - (_QWORD)v440) >> 3);
                                            if (2 * v442 > v441)
                                              v441 = 2 * v442;
                                            if (v442 >= 0x555555555555555)
                                              v443 = 0xAAAAAAAAAAAAAAALL;
                                            else
                                              v443 = v441;
                                            v500 = v418;
                                            v508 = (void *)v426[3];
                                            v504 = v433 - 1;
                                            if (v443)
                                            {
                                              if (v443 > 0xAAAAAAAAAAAAAAALL)
                                                sub_20E877A38();
                                              v499 = v443;
                                              v444 = (char *)operator new(24 * v443);
                                              v328 = "";
                                              v329 = (void (*)(void **))sub_21023DDB0;
                                              v372 = v518;
                                              v430 = (uint64_t)v508;
                                              v435 = v433 - 1;
                                              v443 = v499;
                                              v439 = (char **)(v433 - 2);
                                            }
                                            else
                                            {
                                              v444 = 0;
                                            }
                                            v445 = &v444[8 * ((v436 - v440) >> 3)];
                                            *(_QWORD *)v445 = 0;
                                            *((_QWORD *)v445 + 1) = 0;
                                            *((_QWORD *)v445 + 2) = 0;
                                            v446 = v445;
                                            if (v436 != v440)
                                            {
                                              do
                                              {
                                                v447 = *(_OWORD *)(v436 - 24);
                                                *((_QWORD *)v446 - 1) = *((_QWORD *)v436 - 1);
                                                *(_OWORD *)(v446 - 24) = v447;
                                                v446 -= 24;
                                                v436 -= 24;
                                              }
                                              while (v436 != v440);
                                              v436 = *v439;
                                            }
                                            *v439 = v446;
                                            v437 = v445 + 24;
                                            *v435 = v445 + 24;
                                            *v433 = &v444[24 * v443];
                                            v163 = v506;
                                            if (v436)
                                            {
                                              v448 = v436;
                                              v449 = v328;
                                              v450 = v329;
                                              operator delete(v448);
                                              v435 = v504;
                                              v430 = (uint64_t)v508;
                                              v372 = v518;
                                              v329 = v450;
                                              v328 = v449;
                                            }
                                            v438 = v512;
                                            v418 = v500;
                                          }
                                          else
                                          {
                                            v437 = v436 + 24;
                                            *(_QWORD *)v436 = 0;
                                            *((_QWORD *)v436 + 1) = 0;
                                            *((_QWORD *)v436 + 2) = 0;
                                            v438 = v512;
                                          }
                                          *v435 = v437;
                                          v451 = *(_QWORD *)(v602 + 32 * v418 + 16);
                                          v452 = *(unsigned int *)(v358 + 4 * v346);
                                          *(_QWORD *)(v451 - 24) = v452;
                                          *(_QWORD *)(v451 - 16) = v430;
                                          *(_QWORD *)(v451 - 8) = v438;
                                          v453 = (char *)v583[1];
                                          if (v583[1] >= v584)
                                          {
                                            v455 = (char *)v583[0];
                                            v456 = 0xAAAAAAAAAAAAAAABLL * (((char *)v583[1] - (char *)v583[0]) >> 3);
                                            v457 = v456 + 1;
                                            if (v456 + 1 > 0xAAAAAAAAAAAAAAALL)
                                              sub_20E867F44();
                                            if (0x5555555555555556 * ((v584 - (char *)v583[0]) >> 3) > v457)
                                              v457 = 0x5555555555555556 * ((v584 - (char *)v583[0]) >> 3);
                                            if (0xAAAAAAAAAAAAAAABLL * ((v584 - (char *)v583[0]) >> 3) >= 0x555555555555555)
                                              v458 = 0xAAAAAAAAAAAAAAALL;
                                            else
                                              v458 = v457;
                                            if (v458)
                                            {
                                              v509 = v430;
                                              if (v458 > 0xAAAAAAAAAAAAAAALL)
                                                sub_20E877A38();
                                              v459 = v458;
                                              v460 = (char *)operator new(24 * v458);
                                              v328 = "";
                                              v329 = (void (*)(void **))sub_21023DDB0;
                                              v372 = v518;
                                              LODWORD(v430) = v509;
                                              v458 = v459;
                                            }
                                            else
                                            {
                                              v460 = 0;
                                            }
                                            v461 = &v460[24 * v456];
                                            *(_QWORD *)v461 = v347;
                                            *((_DWORD *)v461 + 2) = v430;
                                            *((_DWORD *)v461 + 4) = v452;
                                            v462 = v461;
                                            if (v453 == v455)
                                            {
                                              v163 = v506;
                                            }
                                            else
                                            {
                                              v163 = v506;
                                              do
                                              {
                                                v463 = *(_OWORD *)(v453 - 24);
                                                *((_QWORD *)v462 - 1) = *((_QWORD *)v453 - 1);
                                                *(_OWORD *)(v462 - 24) = v463;
                                                v462 -= 24;
                                                v453 -= 24;
                                              }
                                              while (v453 != v455);
                                              v453 = (char *)v583[0];
                                            }
                                            v454 = v461 + 24;
                                            v583[0] = v462;
                                            v584 = &v460[24 * v458];
                                            if (v453)
                                            {
                                              v464 = v453;
                                              v465 = v328;
                                              v466 = v329;
                                              operator delete(v464);
                                              v372 = v518;
                                              v329 = v466;
                                              v328 = v465;
                                            }
                                          }
                                          else
                                          {
                                            *(_QWORD *)v583[1] = v347;
                                            *((_DWORD *)v453 + 2) = v430;
                                            v454 = v453 + 24;
                                            *((_DWORD *)v453 + 4) = v452;
                                          }
                                          v327 = "track->hasNode(match_info.image_id)";
                                          v583[1] = v454;
                                          v326 = "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetect"
                                                 "ionAndTracking/src/Object3dDetector.cpp";
                                          goto LABEL_888;
                                        }
                                      }
                                      else
                                      {
                                        if (v428 >= *(_QWORD *)&v421)
                                          v428 %= *(_QWORD *)&v421;
                                        if (v428 != v424)
                                          goto LABEL_954;
                                      }
                                      v426 = (uint64_t *)*v426;
                                      if (!v426)
                                        goto LABEL_954;
                                    }
                                  }
                                }
                                else
                                {
                                  if ((void *)v419 >= v589[1])
                                    v419 %= (unint64_t)v589[1];
                                  if (v419 != v415)
                                    break;
                                }
                                v417 = (int8x8_t *)*v417;
                              }
                              while (v417);
                            }
                          }
                        }
LABEL_952:
                        sub_20E89FD20("unordered_map::at: key not found");
                      }
                      v408 = (v407 - v406) >> 5;
                      while (2)
                      {
                        v409 = v408 >> 1;
                        v410 = v406 + 32 * (v408 >> 1);
                        v411 = *(_DWORD *)(v410 + 16);
                        v412 = v411 >= v390;
                        if (v411 == v390)
                        {
                          if (*(_QWORD *)v410 >= v403)
                          {
                            if (*(_QWORD *)v410 == v403)
                            {
                              v412 = *(_DWORD *)(v410 + 8) >= v389;
                              goto LABEL_797;
                            }
LABEL_792:
                            v408 = v409;
                            if (!v409)
                              goto LABEL_800;
                            continue;
                          }
                        }
                        else
                        {
LABEL_797:
                          if (v412)
                            goto LABEL_792;
                        }
                        break;
                      }
                      v406 = v410 + 32;
                      v409 = v408 + ~v409;
                      goto LABEL_792;
                    }
                  }
                  else
                  {
                    if ((void *)v404 >= v592[1])
                      v404 %= (unint64_t)v592[1];
                    if (v404 != v400)
                      goto LABEL_951;
                  }
                  v402 = (uint64_t *)*v402;
                  if (!v402)
                    goto LABEL_951;
                }
              }
              v391 = (v387 - v386) >> 5;
              while (2)
              {
                v392 = v391 >> 1;
                v393 = v386 + 32 * (v391 >> 1);
                v394 = *(_DWORD *)(v393 + 16);
                v395 = v394 >= v390;
                if (v394 == v390)
                {
                  if (*(_QWORD *)v393 >= v388)
                  {
                    if (*(_QWORD *)v393 == v388)
                    {
                      v395 = *(_DWORD *)(v393 + 8) >= v389;
                      goto LABEL_756;
                    }
LABEL_751:
                    v391 = v392;
                    if (!v392)
                      goto LABEL_759;
                    continue;
                  }
                }
                else
                {
LABEL_756:
                  if (v395)
                    goto LABEL_751;
                }
                break;
              }
              v386 = v393 + 32;
              v392 = v391 + ~v392;
              goto LABEL_751;
            }
          }
          else
          {
            if (v382 >= *((_QWORD *)&v597 + 1))
              v382 %= *((_QWORD *)&v597 + 1);
            if (v382 != v378)
              goto LABEL_953;
          }
          v380 = (uint64_t *)*v380;
          if (!v380)
            goto LABEL_953;
        }
      }
LABEL_888:
      if (v372)
      {
        v467 = (unint64_t *)&v372->__shared_owners_;
        do
          v468 = __ldaxr(v467);
        while (__stlxr(v468 - 1, v467));
        if (!v468)
        {
          v469 = v329;
          v470 = v372;
          v471 = v327;
          v472 = v326;
          ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
          std::__shared_weak_count::__release_weak(v470);
          v326 = v472;
          v327 = v471;
          v329 = v469;
          v328 = "";
        }
      }
LABEL_667:
      v345 = *((_QWORD *)v324 + 11);
LABEL_668:
      if (++v346 < v345)
        continue;
      break;
    }
LABEL_639:
    v324 += 104;
    if (v324 != v325)
      continue;
    break;
  }
  v318 = (char *)*((_QWORD *)&v602 + 1);
  v314 = v603;
  v316 = (_QWORD *)v602;
LABEL_894:
  v523 = 0u;
  v524 = 0u;
  v522 = 0u;
  *(_OWORD *)v519 = v600;
  *(_QWORD *)&v520[0] = v601;
  v600 = 0uLL;
  v601 = 0;
  *(_OWORD *)((char *)v520 + 8) = v585;
  *((_QWORD *)&v520[1] + 1) = v586;
  *(_OWORD *)v521 = *(_OWORD *)__sz;
  v521[2] = v588;
  *(_OWORD *)&v521[3] = *(_OWORD *)v595;
  v521[5] = v596;
  v595[1] = 0;
  v595[0] = 0;
  v596 = 0;
  *(_QWORD *)&v525 = v316;
  *((_QWORD *)&v525 + 1) = v318;
  v527 = *(_OWORD *)v583;
  v526 = v314;
  v528 = v584;
  v473 = v590[0];
  if (v590[0])
  {
    do
    {
      v481 = (_QWORD *)*v473;
      v482 = (_QWORD *)v473[7];
      if (v482)
      {
        do
        {
          v483 = (_QWORD *)*v482;
          operator delete(v482);
          v482 = v483;
        }
        while (v483);
      }
      v484 = (void *)v473[5];
      v473[5] = 0;
      if (v484)
        operator delete(v484);
      operator delete(v473);
      v473 = v481;
    }
    while (v481);
  }
  v474 = v589[0];
  v589[0] = 0;
  if (v474)
    operator delete(v474);
  v475 = v593[0];
  if (v593[0])
  {
    do
    {
      v476 = (_QWORD *)*v475;
      operator delete(v475);
      v475 = v476;
    }
    while (v476);
  }
  v477 = v592[0];
  v592[0] = 0;
  if (v477)
    operator delete(v477);
  v478 = (_QWORD *)v598;
  if ((_QWORD)v598)
  {
    do
    {
      v479 = (_QWORD *)*v478;
      operator delete(v478);
      v478 = v479;
    }
    while (v479);
  }
  v480 = (void *)v597;
  *(_QWORD *)&v597 = 0;
  if (v480)
    operator delete(v480);
  if ((_QWORD)v600)
  {
    *((_QWORD *)&v600 + 1) = v600;
    operator delete((void *)v600);
  }
  if (v579)
  {
    sub_20EDC7800((uint64_t)&v565, (uint64_t)v519);
  }
  else
  {
    v565 = *(_OWORD *)v519;
    v566 = *(_QWORD *)&v520[0];
    v519[1] = 0;
    memset(v520, 0, sizeof(v520));
    v519[0] = 0;
    v567 = *(_OWORD *)((char *)v520 + 8);
    v569 = *(_OWORD *)v521;
    v568 = *((_QWORD *)&v520[1] + 1);
    v570 = v521[2];
    memset(v521, 0, sizeof(v521));
    v571 = *(_OWORD *)&v521[3];
    v575 = v524;
    v574 = v523;
    v573 = v522;
    *(_OWORD *)v576 = v525;
    v572 = v521[5];
    *(_QWORD *)&v576[16] = v526;
    v525 = 0uLL;
    v526 = 0;
    v577 = v527;
    v578 = v528;
    v527 = 0uLL;
    v528 = 0;
    v579 = 1;
  }
  sub_20E9DF08C((uint64_t)v519);
LABEL_916:
  kdebug_trace();
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 320) = 0;
  if (v580)
  {
    v485 = v562;
    *(_OWORD *)(a1 + 64) = v561;
    *(_OWORD *)(a1 + 80) = v485;
    *(_OWORD *)(a1 + 96) = v563;
    *(_BYTE *)(a1 + 112) = v564;
    v486 = v558;
    *(_OWORD *)a1 = v557;
    *(_OWORD *)(a1 + 16) = v486;
    v487 = v560;
    *(_OWORD *)(a1 + 32) = v559;
    *(_OWORD *)(a1 + 48) = v487;
    *(_BYTE *)(a1 + 120) = 0;
    *(_BYTE *)(a1 + 312) = 0;
    if (v579)
    {
      *(_QWORD *)(a1 + 136) = v566;
      v488 = v570;
      *(_QWORD *)(a1 + 160) = v568;
      *(_QWORD *)(a1 + 184) = v488;
      v489 = *(_QWORD *)v576;
      *(_QWORD *)(a1 + 208) = v572;
      *(_OWORD *)(a1 + 120) = v565;
      v566 = 0;
      v565 = 0uLL;
      *(_OWORD *)(a1 + 144) = v567;
      v567 = 0uLL;
      *(_OWORD *)(a1 + 168) = v569;
      v568 = 0;
      v569 = 0uLL;
      v570 = 0;
      *(_OWORD *)(a1 + 192) = v571;
      v571 = 0uLL;
      v490 = v573;
      v491 = v574;
      *(_OWORD *)(a1 + 248) = v575;
      *(_OWORD *)(a1 + 232) = v491;
      *(_OWORD *)(a1 + 216) = v490;
      *(_QWORD *)(a1 + 264) = v489;
      v572 = 0;
      memset(v576, 0, sizeof(v576));
      v492 = v577;
      *(_OWORD *)(a1 + 272) = *(_OWORD *)&v576[8];
      *(_OWORD *)(a1 + 288) = v492;
      *(_QWORD *)(a1 + 304) = v578;
      v577 = 0uLL;
      v578 = 0;
      *(_BYTE *)(a1 + 312) = 1;
    }
    *(_BYTE *)(a1 + 320) = 1;
  }
LABEL_920:
  if (v529)
  {
    v530 = v529;
    operator delete(v529);
  }
  if (v540)
  {
    v541 = v540;
    operator delete(v540);
  }
  kdebug_trace();
LABEL_925:
  if (v545)
    operator delete(v545);
  v493 = (char *)v548;
  if (v548)
  {
    v494 = v549;
    v495 = v548;
    if (v549 != v548)
    {
      do
      {
        v496 = (void *)*((_QWORD *)v494 - 3);
        if (v496)
          operator delete(v496);
        v497 = (void *)*((_QWORD *)v494 - 6);
        if (v497)
        {
          *((_QWORD *)v494 - 5) = v497;
          operator delete(v497);
        }
        v498 = (void *)*((_QWORD *)v494 - 9);
        if (v498)
        {
          *((_QWORD *)v494 - 8) = v498;
          operator delete(v498);
        }
        v494 -= 104;
      }
      while (v494 != v493);
      v495 = v548;
    }
    v549 = v493;
    operator delete(v495);
  }
  if (v551)
  {
    v552 = v551;
    operator delete(v551);
  }
  if (v554)
  {
    v555 = v554;
    operator delete(v554);
  }
  if (v580)
  {
    if (v579)
      sub_20E9DF08C((uint64_t)&v565);
  }
}

void sub_20EDBFD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *a66;
  uint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v74;

  sub_20E86665C((uint64_t)&STACK[0x400]);
  sub_20EDC76A4((void **)(v66 - 160));
  v74 = (void *)STACK[0x410];
  if (STACK[0x410])
  {
    STACK[0x418] = (unint64_t)v74;
    operator delete(v74);
    v67 = (void *)STACK[0x430];
    if (!STACK[0x430])
    {
LABEL_4:
      sub_20E9DD680((void **)&STACK[0x450]);
      sub_20EDC7714((uint64_t)&STACK[0x470]);
      sub_20E8C25A8((uint64_t)&STACK[0x4A0]);
      v68 = (void *)STACK[0x4D0];
      if (STACK[0x4D0])
      {
        STACK[0x4D8] = (unint64_t)v68;
        operator delete(v68);
      }
      sub_20E8C25A8(v66 - 240);
      v69 = *(void **)(v66 - 192);
      if (v69)
      {
        *(_QWORD *)(v66 - 184) = v69;
        operator delete(v69);
      }
      if (a47)
      {
        operator delete(a47);
        v70 = a66;
        if (!a66)
          goto LABEL_13;
      }
      else
      {
        v70 = a66;
        if (!a66)
        {
LABEL_13:
          sub_20E8E69C4((uint64_t)&STACK[0x220]);
          if (STACK[0x250])
            operator delete((void *)STACK[0x250]);
          sub_20EDC07A0((void **)&STACK[0x268]);
          v71 = (void *)STACK[0x280];
          if (STACK[0x280])
          {
            STACK[0x288] = (unint64_t)v71;
            operator delete(v71);
            v72 = (void *)STACK[0x298];
            if (!STACK[0x298])
            {
LABEL_17:
              if (!LOBYTE(STACK[0x3F0]))
                goto LABEL_23;
              goto LABEL_21;
            }
          }
          else
          {
            v72 = (void *)STACK[0x298];
            if (!STACK[0x298])
              goto LABEL_17;
          }
          STACK[0x2A0] = (unint64_t)v72;
          operator delete(v72);
          if (!LOBYTE(STACK[0x3F0]))
            goto LABEL_23;
LABEL_21:
          if (LOBYTE(STACK[0x3E8]))
            sub_20E9DF08C(a13);
LABEL_23:
          _Unwind_Resume(a1);
        }
      }
      operator delete(v70);
      goto LABEL_13;
    }
  }
  else
  {
    v67 = (void *)STACK[0x430];
    if (!STACK[0x430])
      goto LABEL_4;
  }
  STACK[0x438] = (unint64_t)v67;
  operator delete(v67);
  goto LABEL_4;
}

void sub_20EDC0118(uint64_t *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, _QWORD *a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, char **a10)
{
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  int8x8_t *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  char *v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (**v69)();
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  if (a1[1] != 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[1] - *a4) >> 3)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseTrackingUtil.hpp", 37, (uint64_t)"feature_taken_LUT.size() == query_feature_vec.size()", 52, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_75;
  }
  v15 = (uint64_t)(a6[1] - *a6) >> 2;
  if (v15 != a7[1])
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseTrackingUtil.hpp", 38, (uint64_t)"query_corr_indices.size() == inlier_correspondence_masks.size()", 63, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_75;
    }
    v15 = a7[1];
  }
  if (v15 != (uint64_t)(a5[1] - *a5) >> 2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseTrackingUtil.hpp", 39, (uint64_t)"ref_corr_indices.size() == inlier_correspondence_masks.size()", 61, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| a10&& *a10 != a10[1]&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseTrackingUtil.hpp", 40, (uint64_t)"!correspondence_indices || correspondence_indices->empty()", 58, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_75:
    abort();
  }
  v72 = *a3;
  v73 = *((_QWORD *)a3 + 2);
  v16 = sub_20E9DF85C((_QWORD *)(a2 + 24), (uint64_t *)&v72);
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  *(_QWORD *)a9 = 0;
  if (v16)
  {
    v17 = a7[1];
    if (v17)
    {
      if (v17 >= 0x666666666666667)
        sub_20E867F44();
      v18 = (int8x8_t *)v16;
      v19 = (char *)operator new(40 * v17);
      v20 = 0;
      *(_QWORD *)a9 = v19;
      *(_QWORD *)(a9 + 8) = v19;
      *(_QWORD *)(a9 + 16) = &v19[40 * v17];
      do
      {
        if (((*(_QWORD *)(*a7 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
        {
          v21 = *(unsigned int *)(*a6 + 4 * v20);
          v22 = *a1;
          if (((1 << v21) & *(_QWORD *)(*a1 + 8 * (v21 >> 6))) == 0)
          {
            v23 = v18[6];
            if (v23)
            {
              v24 = *(unsigned int *)(*((_QWORD *)a3 + 9) + 40 * *(unsigned int *)(*a5 + 4 * v20) + 4);
              v25 = (uint8x8_t)vcnt_s8(v23);
              v25.i16[0] = vaddlv_u8(v25);
              if (v25.u32[0] > 1uLL)
              {
                v26 = *(unsigned int *)(*((_QWORD *)a3 + 9) + 40 * *(unsigned int *)(*a5 + 4 * v20) + 4);
                if (*(_QWORD *)&v23 <= v24)
                  v26 = v24 % *(_QWORD *)&v23;
              }
              else
              {
                v26 = (v23.i32[0] - 1) & v24;
              }
              v27 = *(uint64_t ***)(*(_QWORD *)&v18[5] + 8 * v26);
              if (v27)
              {
                v28 = *v27;
                if (v28)
                {
                  if (v25.u32[0] < 2uLL)
                  {
                    v29 = *(_QWORD *)&v23 - 1;
                    while (1)
                    {
                      v31 = v28[1];
                      if (v31 == v24)
                      {
                        if (*((_DWORD *)v28 + 4) == (_DWORD)v24)
                          goto LABEL_41;
                      }
                      else if ((v31 & v29) != v26)
                      {
                        goto LABEL_17;
                      }
                      v28 = (uint64_t *)*v28;
                      if (!v28)
                        goto LABEL_17;
                    }
                  }
                  do
                  {
                    v30 = v28[1];
                    if (v30 == v24)
                    {
                      if (*((_DWORD *)v28 + 4) == (_DWORD)v24)
                      {
LABEL_41:
                        v32 = v28[3];
                        if (*(_BYTE *)(v32 + 192) && (!a8 || *(_BYTE *)(v32 + 188)))
                        {
                          v33 = v32 + 40;
                          if (a10)
                          {
                            v64 = a9;
                            v35 = a10[1];
                            v34 = (unint64_t)a10[2];
                            if ((unint64_t)v35 >= v34)
                            {
                              v37 = *a10;
                              v38 = v35 - *a10;
                              v39 = v38 >> 2;
                              v40 = (v38 >> 2) + 1;
                              if (v40 >> 62)
                                sub_20E867F44();
                              v41 = v34 - (_QWORD)v37;
                              if (v41 >> 1 > v40)
                                v40 = v41 >> 1;
                              if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
                                v42 = 0x3FFFFFFFFFFFFFFFLL;
                              else
                                v42 = v40;
                              v62 = v32 + 40;
                              v63 = v32;
                              if (v42)
                              {
                                v58 = (char *)(v35 - *a10);
                                v59 = v38 >> 2;
                                v60 = *a10;
                                v61 = v19;
                                if (v42 >> 62)
                                  sub_20E877A38();
                                v57 = v42;
                                v43 = operator new(4 * v42);
                                v37 = v60;
                                v19 = v61;
                                v42 = v57;
                                v38 = (uint64_t)v58;
                                v39 = v59;
                              }
                              else
                              {
                                v43 = 0;
                              }
                              v44 = &v43[4 * v39];
                              *(_DWORD *)v44 = v20;
                              v36 = v44 + 4;
                              if (v35 != v37)
                              {
                                v45 = v35 - v37 - 4;
                                if (v45 < 0x2C)
                                  goto LABEL_81;
                                if ((unint64_t)(v35 - v43 - v38) < 0x20)
                                  goto LABEL_81;
                                v46 = (v45 >> 2) + 1;
                                v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
                                v48 = &v35[-v47];
                                v44 -= v47;
                                v49 = &v43[4 * v39 - 16];
                                v50 = v35 - 16;
                                v51 = v46 & 0x7FFFFFFFFFFFFFF8;
                                do
                                {
                                  v52 = *(_OWORD *)v50;
                                  *(v49 - 1) = *((_OWORD *)v50 - 1);
                                  *v49 = v52;
                                  v49 -= 2;
                                  v50 -= 32;
                                  v51 -= 8;
                                }
                                while (v51);
                                v35 = v48;
                                if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
                                {
LABEL_81:
                                  do
                                  {
                                    v53 = *((_DWORD *)v35 - 1);
                                    v35 -= 4;
                                    *((_DWORD *)v44 - 1) = v53;
                                    v44 -= 4;
                                  }
                                  while (v35 != v37);
                                }
                              }
                              *a10 = v44;
                              a10[1] = v36;
                              a10[2] = &v43[4 * v42];
                              if (v37)
                              {
                                v54 = v36;
                                operator delete(v37);
                                v36 = v54;
                                a9 = v64;
                                v19 = *(char **)(v64 + 8);
                              }
                              else
                              {
                                a9 = v64;
                              }
                              v33 = v62;
                              v32 = v63;
                            }
                            else
                            {
                              *(_DWORD *)v35 = v20;
                              v36 = v35 + 4;
                              a9 = v64;
                            }
                            a10[1] = v36;
                            v55 = *(_BYTE *)(v32 + 192);
                            *((_QWORD *)&v70 + 1) = -1;
                            v69 = &off_24C9E9850;
                            if (!v55)
                              v33 = 0;
                            v22 = *a1;
                          }
                          else
                          {
                            *((_QWORD *)&v70 + 1) = -1;
                            v69 = &off_24C9E9850;
                          }
                          *(_QWORD *)&v71 = *a4 + 40 * v21;
                          *((_QWORD *)&v71 + 1) = v33;
                          v56 = *(_QWORD *)(v32 + 32);
                          *(_QWORD *)&v70 = *(_QWORD *)(v32 + 24);
                          DWORD2(v70) = v56;
                          *(_QWORD *)(v22 + 8 * (v21 >> 6)) ^= 1 << v21;
                          if ((unint64_t)v19 < *(_QWORD *)(a9 + 16))
                          {
                            *(_QWORD *)v19 = &off_24CA18630;
                            *(_OWORD *)(v19 + 8) = v70;
                            *(_QWORD *)v19 = &off_24C9E9850;
                            *(_OWORD *)(v19 + 24) = v71;
                            v19 += 40;
                          }
                          else
                          {
                            v19 = sub_20EDCA1E0((void **)a9, (uint64_t)&v69);
                          }
                          *(_QWORD *)(a9 + 8) = v19;
                        }
                        break;
                      }
                    }
                    else
                    {
                      if (v30 >= *(_QWORD *)&v23)
                        v30 %= *(_QWORD *)&v23;
                      if (v30 != v26)
                        break;
                    }
                    v28 = (uint64_t *)*v28;
                  }
                  while (v28);
                }
              }
            }
          }
        }
LABEL_17:
        ++v20;
      }
      while (v20 != v17);
    }
  }
}

void sub_20EDC06D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  sub_20EDC0730(a16);
  _Unwind_Resume(a1);
}

void sub_20EDC06EC(_Unwind_Exception *a1)
{
  void **v1;

  sub_20EDC0730(v1);
  _Unwind_Resume(a1);
}

void sub_20EDC0704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  sub_20EDC0730(a16);
  _Unwind_Resume(a1);
}

void sub_20EDC0718(_Unwind_Exception *a1)
{
  void **v1;

  sub_20EDC0730(v1);
  _Unwind_Resume(a1);
}

void **sub_20EDC0730(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  void (**v7)(char *);
  BOOL v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = v3 - 40;
      v6 = v3 - 40;
      do
      {
        v7 = *(void (***)(char *))v6;
        v6 -= 40;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_20EDC07A0(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
          operator delete(v5);
        v6 = (void *)*((_QWORD *)v3 - 6);
        if (v6)
        {
          *((_QWORD *)v3 - 5) = v6;
          operator delete(v6);
        }
        v7 = (void *)*((_QWORD *)v3 - 9);
        if (v7)
        {
          *((_QWORD *)v3 - 8) = v7;
          operator delete(v7);
        }
        v3 -= 104;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20EDC082C(uint64_t a1, double *a2, uint64_t *a3, uint64_t a4, double *a5, uint64_t **a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char **v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char **v34;
  char **v35;
  void *v36;
  char **v37;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  char **v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  _BYTE *v52;
  char *v53;
  size_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  char *v63;
  void *v64;
  __int128 v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  void *v73;
  void *v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  void *v83;
  void *v84;
  void *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  char *v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  __int128 *v97;
  uint64_t v98;
  uint64_t *v99;
  void *__p;
  void *v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  char v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  __int128 __dst;
  char *v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  char v128;
  char v129;
  char *v130;
  char *v131;
  uint64_t v132;
  unint64_t *v133;
  unint64_t *v134;
  unint64_t v135;
  __int128 v136;
  uint64_t v137;

  if (*((_BYTE *)a7 + 24))
  {
    v13 = *a3;
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3);
    v15 = *a7;
    v16 = a7[1];
    v17 = *(char **)a4;
    v18 = (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 6;
    v134 = 0;
    v135 = 0;
    v133 = 0;
    *(_QWORD *)&v105 = v15;
    *((_QWORD *)&v105 + 1) = v13;
    *(_QWORD *)&v106 = v14;
    *(_QWORD *)&v136 = v16;
    *((_QWORD *)&v136 + 1) = v13;
    v137 = v14;
    sub_20EDC79FC((unint64_t *)&v133, &v105, (unint64_t **)&v136, -((v15 - v16) >> 3));
    v131 = 0;
    v132 = 0;
    v130 = 0;
    *(_QWORD *)&v105 = v15;
    *((_QWORD *)&v105 + 1) = v17;
    *(_QWORD *)&v106 = v18;
    *(_QWORD *)&v136 = v16;
    *((_QWORD *)&v136 + 1) = v17;
    v137 = v18;
    sub_20EDC7B30(&v130, &v105, (unint64_t **)&v136, -((v15 - v16) >> 3));
    sub_20EDBC58C(a1, a2, (uint64_t *)&v133, &v130, a5, a8);
    if (v130)
    {
      v131 = v130;
      operator delete(v130);
    }
    if (v133)
    {
      v134 = v133;
      operator delete(v133);
    }
    if (*(_BYTE *)(a1 + 320))
      return;
  }
  LOBYTE(v105) = 0;
  v129 = 0;
  v19 = *a6;
  v99 = a6[1];
  if (*a6 == v99)
  {
LABEL_135:
    kdebug_trace();
    sub_20EDBC58C(a1, a2, a3, (char **)a4, a5, a8);
    goto LABEL_136;
  }
  v98 = a1 + 120;
  v97 = (__int128 *)(a1 + 216);
  do
  {
    v20 = *a3;
    v21 = 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3);
    v23 = *v19;
    v22 = (unint64_t *)v19[1];
    v24 = *(char **)a4;
    v25 = *(_QWORD *)(a4 + 8);
    v131 = 0;
    v132 = 0;
    v130 = 0;
    *(_QWORD *)&v136 = v23;
    *((_QWORD *)&v136 + 1) = v20;
    v137 = v21;
    v133 = v22;
    v134 = (unint64_t *)v20;
    v135 = v21;
    sub_20EDC79FC((unint64_t *)&v130, &v136, &v133, -((v23 - (uint64_t)v22) >> 3));
    v103 = 0;
    v104 = 0;
    __p = 0;
    *(_QWORD *)&v136 = v23;
    *((_QWORD *)&v136 + 1) = v24;
    v137 = (v25 - (uint64_t)v24) >> 6;
    v133 = v22;
    v134 = (unint64_t *)v24;
    v135 = v137;
    sub_20EDC7B30(&__p, &v136, &v133, -((v23 - (uint64_t)v22) >> 3));
    sub_20EDBC58C(a1, a2, (uint64_t *)&v130, (char **)&__p, a5, a8);
    if (__p)
    {
      v103 = __p;
      operator delete(__p);
    }
    if (v130)
    {
      v131 = v130;
      operator delete(v130);
    }
    if (*(_BYTE *)(a1 + 320))
    {
      v26 = *(_QWORD *)(a1 + 104);
      if (v26 > *((_QWORD *)a2 + 10))
        goto LABEL_136;
      if (v129 && v26 <= *((_QWORD *)&v111 + 1))
      {
LABEL_118:
        if (*(_BYTE *)(a1 + 312))
          sub_20E9DF08C(v98);
        goto LABEL_9;
      }
      if (v129 != *(_BYTE *)(a1 + 320))
      {
        if (v129)
        {
          if (v128)
            sub_20E9DF08C((uint64_t)&v113);
          v129 = 0;
        }
        else
        {
          v40 = *(_OWORD *)(a1 + 80);
          v109 = *(_OWORD *)(a1 + 64);
          v110 = v40;
          v111 = *(_OWORD *)(a1 + 96);
          v112 = *(_BYTE *)(a1 + 112);
          v41 = *(_OWORD *)(a1 + 16);
          v105 = *(_OWORD *)a1;
          v106 = v41;
          v42 = *(_OWORD *)(a1 + 48);
          v107 = *(_OWORD *)(a1 + 32);
          v108 = v42;
          LOBYTE(v113) = 0;
          v128 = 0;
          if (*(_BYTE *)(a1 + 312))
          {
            sub_20EDC8300((uint64_t)&v113, v98);
            v128 = 1;
          }
          v129 = 1;
        }
LABEL_117:
        if (!*(_BYTE *)(a1 + 320))
          goto LABEL_9;
        goto LABEL_118;
      }
      v27 = *(_OWORD *)(a1 + 80);
      v109 = *(_OWORD *)(a1 + 64);
      v110 = v27;
      v111 = *(_OWORD *)(a1 + 96);
      v112 = *(_BYTE *)(a1 + 112);
      v28 = *(_OWORD *)(a1 + 16);
      v105 = *(_OWORD *)a1;
      v106 = v28;
      v29 = *(_OWORD *)(a1 + 48);
      v107 = *(_OWORD *)(a1 + 32);
      v108 = v29;
      if (v128 != *(_BYTE *)(a1 + 312))
      {
        if (v128)
        {
          sub_20E9DF08C((uint64_t)&v113);
          v128 = 0;
        }
        else
        {
          sub_20EDC8300((uint64_t)&v113, v98);
          v128 = 1;
        }
        goto LABEL_117;
      }
      if (&v105 == (__int128 *)a1 || !v128)
        goto LABEL_117;
      sub_20EDC7C50(&v113, *(char **)(a1 + 120), *(char **)(a1 + 128), (uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 4);
      sub_20E86811C(&v115, *(char **)(a1 + 144), *(char **)(a1 + 152), (uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3);
      v30 = *(char ***)(a1 + 168);
      v31 = *(_QWORD *)(a1 + 176);
      v32 = 0xAAAAAAAAAAAAAAABLL * ((v31 - (uint64_t)v30) >> 3);
      v33 = v118;
      v34 = (char **)v117;
      if (0xAAAAAAAAAAAAAAABLL * ((v118 - (uint64_t)v117) >> 3) < v32)
      {
        if ((_QWORD)v117)
        {
          v35 = (char **)*((_QWORD *)&v117 + 1);
          v36 = (void *)v117;
          if (*((_QWORD *)&v117 + 1) != (_QWORD)v117)
          {
            v37 = (char **)*((_QWORD *)&v117 + 1);
            do
            {
              v39 = *(v37 - 3);
              v37 -= 3;
              v38 = v39;
              if (v39)
              {
                *(v35 - 2) = v38;
                operator delete(v38);
              }
              v35 = v37;
            }
            while (v37 != v34);
            v36 = (void *)v117;
          }
          *((_QWORD *)&v117 + 1) = v34;
          operator delete(v36);
          v33 = 0;
          v117 = 0uLL;
          v118 = 0;
        }
        if (v32 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_142;
        v48 = 0xAAAAAAAAAAAAAAABLL * (v33 >> 3);
        v49 = 2 * v48;
        if (2 * v48 <= v32)
          v49 = 0xAAAAAAAAAAAAAAABLL * ((v31 - (uint64_t)v30) >> 3);
        v50 = v48 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v49;
        if (v50 > 0xAAAAAAAAAAAAAAALL)
LABEL_142:
          sub_20E867F44();
        *(_QWORD *)&v117 = operator new(24 * v50);
        *((_QWORD *)&v117 + 1) = v117;
        v118 = v117 + 24 * v50;
        v51 = sub_20EDC7D94((uint64_t)&v118, (uint64_t)v30, v31, (_QWORD *)v117);
LABEL_62:
        v47 = v51;
        goto LABEL_63;
      }
      v43 = (_QWORD *)*((_QWORD *)&v117 + 1);
      v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v117 + 1) - v117) >> 3);
      if (v44 < v32)
      {
        if (*((_QWORD *)&v117 + 1) != (_QWORD)v117)
        {
          v94 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v117 + 1) - v117) >> 3);
          v45 = 8 * ((uint64_t)(*((_QWORD *)&v117 + 1) - v117) >> 3);
          v46 = *(char ***)(a1 + 168);
          do
          {
            if (v46 != v34)
              sub_20EDC7C50(v34, *v46, v46[1], (v46[1] - *v46) >> 4);
            v46 += 3;
            v34 += 3;
            v45 -= 24;
          }
          while (v45);
          v34 = (char **)*((_QWORD *)&v117 + 1);
          v44 = v94;
        }
        v51 = sub_20EDC7D94((uint64_t)&v118, (uint64_t)&v30[3 * v44], v31, v34);
        goto LABEL_62;
      }
      if (v30 == (char **)v31)
      {
        v47 = (_QWORD *)v117;
        if (*((_QWORD *)&v117 + 1) == (_QWORD)v117)
          goto LABEL_63;
      }
      else
      {
        v47 = (_QWORD *)v117;
        do
        {
          if (v30 != v34)
            sub_20EDC7C50(v34, *v30, v30[1], (v30[1] - *v30) >> 4);
          v30 += 3;
          v34 += 3;
          v47 += 3;
        }
        while (v30 != (char **)v31);
        v43 = (_QWORD *)*((_QWORD *)&v117 + 1);
        if (*((_QWORD **)&v117 + 1) == v47)
        {
LABEL_63:
          *((_QWORD *)&v117 + 1) = v47;
          v53 = *(char **)(a1 + 192);
          v52 = *(_BYTE **)(a1 + 200);
          v54 = v52 - v53;
          v55 = 0xAAAAAAAAAAAAAAABLL * ((v52 - v53) >> 3);
          v56 = (uint64_t)v120;
          v57 = (char *)__dst;
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v120[-__dst] >> 3) < v55)
          {
            if ((_QWORD)__dst)
            {
              *((_QWORD *)&__dst + 1) = __dst;
              operator delete((void *)__dst);
              v56 = 0;
              __dst = 0uLL;
              v120 = 0;
            }
            if (v55 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_141;
            v58 = 0xAAAAAAAAAAAAAAABLL * (v56 >> 3);
            v59 = 2 * v58;
            if (2 * v58 <= v55)
              v59 = 0xAAAAAAAAAAAAAAABLL * ((v52 - v53) >> 3);
            v60 = v58 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v59;
            if (v60 > 0xAAAAAAAAAAAAAAALL)
LABEL_141:
              sub_20E9DEF2C();
            v61 = (char *)operator new(24 * v60);
            v57 = v61;
            *(_QWORD *)&__dst = v61;
            *((_QWORD *)&__dst + 1) = v61;
            v120 = &v61[24 * v60];
            if (v52 != v53)
              memcpy(v61, v53, v52 - v53);
            goto LABEL_83;
          }
          v95 = *(char **)(a1 + 200);
          v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&__dst + 1) - __dst) >> 3);
          if (v62 >= v55)
          {
            if (v95 == v53)
            {
LABEL_83:
              *((_QWORD *)&__dst + 1) = &v57[v54];
              v65 = *(_OWORD *)(a1 + 232);
              v121 = *v97;
              v122 = v65;
              v123 = *(_OWORD *)(a1 + 248);
              v67 = *(_QWORD *)(a1 + 264);
              v66 = *(_QWORD **)(a1 + 272);
              v68 = (unint64_t)v66 - v67;
              v69 = ((uint64_t)v66 - v67) >> 5;
              v70 = v125;
              v71 = (_QWORD *)v124;
              if (v69 <= (v125 - (uint64_t)v124) >> 5)
              {
                v75 = (_QWORD *)*((_QWORD *)&v124 + 1);
                v76 = (uint64_t)(*((_QWORD *)&v124 + 1) - v124) >> 5;
                if (v76 >= v69)
                {
                  if ((_QWORD *)v67 == v66)
                  {
                    v79 = (_QWORD *)v124;
                  }
                  else
                  {
                    v79 = (_QWORD *)v124;
                    do
                    {
                      *v71 = *(_QWORD *)v67;
                      if ((_QWORD *)v67 != v71)
                        sub_20EDC8014(v71 + 1, *(char **)(v67 + 8), *(char **)(v67 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v67 + 16) - *(_QWORD *)(v67 + 8)) >> 3));
                      v67 += 32;
                      v71 += 4;
                      v79 += 4;
                    }
                    while ((_QWORD *)v67 != v66);
                    v75 = (_QWORD *)*((_QWORD *)&v124 + 1);
                  }
                  while (v75 != v79)
                  {
                    v85 = (void *)*(v75 - 3);
                    if (v85)
                    {
                      *(v75 - 2) = v85;
                      operator delete(v85);
                    }
                    v75 -= 4;
                  }
                }
                else
                {
                  if (*((_QWORD *)&v124 + 1) != (_QWORD)v124)
                  {
                    v96 = (uint64_t)(*((_QWORD *)&v124 + 1) - v124) >> 5;
                    v77 = 32 * v76;
                    v78 = *(_QWORD *)(a1 + 264);
                    do
                    {
                      *v71 = *(_QWORD *)v78;
                      if ((_QWORD *)v78 != v71)
                        sub_20EDC8014(v71 + 1, *(char **)(v78 + 8), *(char **)(v78 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v78 + 16) - *(_QWORD *)(v78 + 8)) >> 3));
                      v78 += 32;
                      v71 += 4;
                      v77 -= 32;
                    }
                    while (v77);
                    v71 = (_QWORD *)*((_QWORD *)&v124 + 1);
                    v76 = v96;
                  }
                  v79 = sub_20EDC7E94((uint64_t)&v125, (_QWORD *)(v67 + 32 * v76), v66, v71);
                }
              }
              else
              {
                if ((_QWORD)v124)
                {
                  v72 = (_QWORD *)*((_QWORD *)&v124 + 1);
                  v73 = (void *)v124;
                  if (*((_QWORD *)&v124 + 1) != (_QWORD)v124)
                  {
                    do
                    {
                      v74 = (void *)*(v72 - 3);
                      if (v74)
                      {
                        *(v72 - 2) = v74;
                        operator delete(v74);
                      }
                      v72 -= 4;
                    }
                    while (v72 != v71);
                    v73 = (void *)v124;
                  }
                  *((_QWORD *)&v124 + 1) = v71;
                  operator delete(v73);
                  v70 = 0;
                  v124 = 0uLL;
                  v125 = 0;
                  v68 = (unint64_t)v66 - v67;
                }
                if ((v68 & 0x8000000000000000) != 0)
                  goto LABEL_140;
                v80 = v70 >> 4;
                if (v70 >> 4 <= v69)
                  v80 = ((uint64_t)v66 - v67) >> 5;
                v81 = (unint64_t)v70 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v80;
                if (v81 >> 59)
LABEL_140:
                  sub_20E867F44();
                *(_QWORD *)&v124 = operator new(32 * v81);
                *((_QWORD *)&v124 + 1) = v124;
                v125 = v124 + 32 * v81;
                v79 = sub_20EDC7E94((uint64_t)&v125, (_QWORD *)v67, v66, (_QWORD *)v124);
              }
              *((_QWORD *)&v124 + 1) = v79;
              sub_20EDC8188(&v126, *(char **)(a1 + 288), *(char **)(a1 + 296), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 3));
              goto LABEL_117;
            }
            v64 = (void *)__dst;
            v63 = *(char **)(a1 + 192);
          }
          else
          {
            if (*((_QWORD *)&__dst + 1) != (_QWORD)__dst)
            {
              memmove((void *)__dst, v53, *((_QWORD *)&__dst + 1) - __dst);
              v57 = (char *)*((_QWORD *)&__dst + 1);
            }
            v63 = &v53[24 * v62];
            v54 = v95 - v63;
            if (v95 == v63)
              goto LABEL_83;
            v64 = v57;
          }
          memmove(v64, v63, v54);
          goto LABEL_83;
        }
      }
      v82 = v43;
      do
      {
        v84 = (void *)*(v82 - 3);
        v82 -= 3;
        v83 = v84;
        if (v84)
        {
          *(v43 - 2) = v83;
          operator delete(v83);
        }
        v43 = v82;
      }
      while (v82 != v47);
      goto LABEL_63;
    }
LABEL_9:
    v19 += 3;
  }
  while (v19 != v99);
  if (!v129)
    goto LABEL_135;
  *(_BYTE *)(a1 + 320) = 0;
  v86 = v110;
  *(_OWORD *)(a1 + 64) = v109;
  *(_OWORD *)(a1 + 80) = v86;
  *(_OWORD *)(a1 + 96) = v111;
  *(_BYTE *)(a1 + 112) = v112;
  v87 = v106;
  *(_OWORD *)a1 = v105;
  *(_OWORD *)(a1 + 16) = v87;
  v88 = v108;
  *(_OWORD *)(a1 + 32) = v107;
  *(_OWORD *)(a1 + 48) = v88;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  if (v128)
  {
    v89 = v116;
    *(_QWORD *)(a1 + 136) = v114;
    *(_OWORD *)(a1 + 120) = v113;
    v114 = 0;
    v113 = 0uLL;
    *(_OWORD *)(a1 + 144) = v115;
    *(_QWORD *)(a1 + 160) = v89;
    v116 = 0;
    v115 = 0uLL;
    *(_OWORD *)(a1 + 168) = v117;
    v90 = v120;
    *(_QWORD *)(a1 + 184) = v118;
    v117 = 0uLL;
    v118 = 0;
    *(_OWORD *)(a1 + 192) = __dst;
    *(_QWORD *)(a1 + 208) = v90;
    __dst = 0uLL;
    v120 = 0;
    v91 = v121;
    v92 = v123;
    *(_OWORD *)(a1 + 232) = v122;
    *(_OWORD *)(a1 + 248) = v92;
    *v97 = v91;
    *(_OWORD *)(a1 + 264) = v124;
    v93 = v127;
    *(_QWORD *)(a1 + 280) = v125;
    v124 = 0uLL;
    v125 = 0;
    *(_OWORD *)(a1 + 288) = v126;
    *(_QWORD *)(a1 + 304) = v93;
    v126 = 0uLL;
    v127 = 0;
    *(_BYTE *)(a1 + 312) = 1;
  }
  *(_BYTE *)(a1 + 320) = 1;
LABEL_136:
  if (v129)
  {
    if (v128)
      sub_20E9DF08C((uint64_t)&v113);
  }
}

void sub_20EDC131C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  __int16 a70;
  uint64_t v70;

  if (*(_BYTE *)(v70 + 320) && *(_BYTE *)(v70 + 312))
    sub_20E9DF08C(a22);
  if ((_BYTE)a70)
  {
    if (a68)
      sub_20E9DF08C((uint64_t)&a44);
  }
  _Unwind_Resume(a1);
}

void sub_20EDC141C(uint64_t a1, __int128 *a2, uint64_t a3, _QWORD *a4, uint64_t *a5, uint64_t a6, char **a7, _QWORD *a8, uint64_t a9)
{
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  char v28;
  void (***v29)(_QWORD);
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  double v37;
  uint64_t v38;
  char v39;
  _QWORD *v40;
  unint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  int v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  void *v53;
  void (***v54)(_QWORD);
  void (***v55)(_QWORD);
  void (**v56)(_QWORD);
  _QWORD *v57;
  uint64_t v58;
  char v59;
  void *v60;
  _BYTE *v61;
  uint64_t v62;
  _OWORD v63[6];
  void *__p[2];
  unint64_t v65;
  double v66;
  void *v67;
  void *v68;
  _QWORD *v69;
  char v70;
  __int128 v71;
  __int128 v72;
  int64x2_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  _BYTE *v81;
  _BYTE *v82;
  char *v83;
  char *v84;
  uint64_t v85;

  if (*(_QWORD *)(a9 + 16) <= 3uLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseTrackingUtil.hpp", 215, (uint64_t)"config.min_num_inliers >= 4", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if ((unint64_t)sub_20EDCA350((uint64_t)a2, a4, *(_QWORD *)(a9 + 8), 0, (char **)a6, a7, *(double *)(a9 + 48)) < *(_QWORD *)(a9 + 16))
  {
    *(_QWORD *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return;
  }
  v58 = a3;
  v17 = (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2;
  LOBYTE(__p[0]) = 1;
  sub_20EDCA4D0((uint64_t)a8, v17, __p);
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v19 = *a5;
  v18 = a5[1];
  __p[0] = 0;
  __p[1] = 0;
  v65 = 0;
  v20 = v18 - v19;
  if (v20)
  {
    v57 = a8;
    if (v20 < 0)
      sub_20E867F44();
    v21 = 0xCCCCCCCCCCCCCCCDLL * (v20 >> 3);
    v22 = (v21 - 1) >> 6;
    v23 = (char *)operator new(8 * (v22 + 1));
    v24 = v23;
    __p[0] = v23;
    v65 = v22 + 1;
    __p[1] = (void *)v21;
    if (v21 >= 0x41)
      v25 = (v21 - 1) >> 6;
    else
      v25 = 0;
    *(_QWORD *)&v23[8 * v25] = 0;
    v26 = 8 * (v21 >> 6);
    if (v21 >= 0x40)
      bzero(v23, 8 * (v21 >> 6));
    v28 = v21 & 0x3F;
    v27 = (v21 & 0x3F) == 0;
    a8 = v57;
    if (!v27)
      *(_QWORD *)&v24[v26] &= ~(0xFFFFFFFFFFFFFFFFLL >> -v28);
  }
  sub_20EDC0118((uint64_t *)__p, v58, a2, a5, (_QWORD *)a6, a7, a8, 0, (uint64_t)&v81, &v83);
  if (__p[0])
    operator delete(__p[0]);
  v29 = (void (***)(_QWORD))v81;
  if (0xCCCCCCCCCCCCCCCDLL * ((v82 - v81) >> 3) >= *(_QWORD *)(a9 + 16))
  {
    v79 = 0;
    v80 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    if (v82 != v81)
    {
      sub_20E93D8FC((uint64_t)&v78, 0x999999999999999ALL * ((v82 - v81) >> 3));
      v76 = v75;
      if (v82 != v81)
      {
        sub_20E93D8FC((uint64_t)&v75, 0x6666666666666667 * ((v82 - v81) >> 3));
        v30 = v81;
        v31 = v82;
        if (v81 != v82)
        {
          v32 = v78 + 8;
          v33 = v75 + 8;
          do
          {
            v34 = v30[3];
            *(v32 - 1) = *(_QWORD *)(v34 + 16);
            *v32 = *(_QWORD *)(v34 + 24);
            v32 += 2;
            v35 = (_QWORD *)v30[4];
            *(v33 - 1) = v35[1];
            *v33 = v35[2];
            v33[1] = v35[3];
            v30 += 5;
            v33 += 3;
          }
          while (v30 != v31);
        }
      }
    }
    v36 = (unint64_t)((uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2) >> 1;
    v37 = *(double *)a9;
    v38 = *(_QWORD *)(a9 + 16);
    v39 = *(_BYTE *)(a9 + 40);
    *(_OWORD *)__p = *(_OWORD *)(a9 + 24);
    v65 = v36;
    v66 = v37 * 0.5;
    v40 = operator new(8uLL);
    v67 = v40;
    *v40 = v38;
    v68 = v40 + 1;
    v69 = v40 + 1;
    v70 = v39;
    v71 = xmmword_210378560;
    v72 = xmmword_210378570;
    v73 = vdupq_n_s64(0x3EE4F8B588E368F1uLL);
    v74 = 0x3F1A36E2EB1C432DLL;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    if ((sub_20EB63308((uint64_t)__p, &v78, (uint64_t *)&v75, (uint64_t)v63, (char **)&v60, 0, 0) & 1) != 0)
    {
      v41 = (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2;
      v59 = 0;
      sub_20EDCA4D0((uint64_t)a8, v41, &v59);
      v42 = v60;
      v43 = v61 - (_BYTE *)v60;
      if (v61 != v60)
      {
        v43 >>= 2;
        v44 = v83;
        v45 = *a8;
        if ((unint64_t)v43 <= 1)
          v43 = 1;
        v46 = v43;
        v47 = (int *)v60;
        do
        {
          v48 = *v47++;
          v49 = *(unsigned int *)&v44[4 * v48];
          *(_QWORD *)(v45 + ((v49 >> 3) & 0x1FFFFFF8)) |= 1 << v49;
          --v46;
        }
        while (v46);
      }
      *(_QWORD *)a1 = v43;
      v50 = v63[3];
      *(_OWORD *)(a1 + 40) = v63[2];
      *(_OWORD *)(a1 + 56) = v50;
      v51 = v63[5];
      *(_OWORD *)(a1 + 72) = v63[4];
      *(_OWORD *)(a1 + 88) = v51;
      v52 = v63[1];
      *(_OWORD *)(a1 + 8) = v63[0];
      *(_OWORD *)(a1 + 24) = v52;
      if (!v42)
      {
LABEL_34:
        if (v67)
        {
          v68 = v67;
          operator delete(v67);
        }
        if (v75)
        {
          v76 = v75;
          operator delete(v75);
        }
        if (v78)
        {
          v79 = v78;
          operator delete(v78);
        }
        v29 = (void (***)(_QWORD))v81;
        if (!v81)
          goto LABEL_47;
        goto LABEL_41;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 96) = 0;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      v42 = v60;
      if (!v60)
        goto LABEL_34;
    }
    v61 = v42;
    operator delete(v42);
    goto LABEL_34;
  }
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (v29)
  {
LABEL_41:
    v53 = v29;
    if (v82 != (_BYTE *)v29)
    {
      v54 = (void (***)(_QWORD))(v82 - 40);
      v55 = (void (***)(_QWORD))(v82 - 40);
      do
      {
        v56 = *v55;
        v55 -= 5;
        (*v56)(v54);
        v27 = v54 == v29;
        v54 = v55;
      }
      while (!v27);
      v53 = v81;
    }
    v82 = v29;
    operator delete(v53);
  }
LABEL_47:
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
}

void sub_20EDC1910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  uint64_t v54;
  void *v56;
  void *v57;
  void *v58;

  if (__p)
  {
    operator delete(__p);
    v56 = a33;
    if (!a33)
    {
LABEL_3:
      v57 = a45;
      if (!a45)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v56 = a33;
    if (!a33)
      goto LABEL_3;
  }
  operator delete(v56);
  v57 = a45;
  if (!a45)
  {
LABEL_4:
    v58 = a48;
    if (!a48)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_10:
  operator delete(v57);
  v58 = a48;
  if (!a48)
  {
LABEL_6:
    sub_20EDC0730((void **)(v54 - 144));
    if (a54)
    {
      operator delete(a54);
      _Unwind_Resume(a1);
    }
    _Unwind_Resume(a1);
  }
LABEL_5:
  operator delete(v58);
  goto LABEL_6;
}

_QWORD *sub_20EDC1A30(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[10];
  if (v2)
    operator delete(v2);
  v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20EDC1A7C(__int128 *a1, _QWORD *a2, unint64_t a3)
{
  _QWORD *v6;
  char **v7;
  char **v8;
  unint64_t v9;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v31;
  char **v32;
  char *v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  double v46;
  uint64_t **v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t **v50;
  unint64_t v51;
  BOOL v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t **v68;
  uint64_t *v69;
  unint64_t v70;
  char *v71;
  uint64_t *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  float64x2_t *v94;
  float64x2_t *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  float64x2_t *v99;
  uint64_t v100;
  double *v101;
  float64_t v102;
  float64_t v103;
  float64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  float64x2_t *v111;
  float64x2_t v112;
  float64x2_t *v113;
  _QWORD *v114;
  _OWORD *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  char v121;
  _QWORD *v122;
  char *v123;
  float64x2_t v124;
  char *v125;
  char *v126;
  float64x2_t v127;
  float64x2_t v128;
  unint64_t v129;
  float64x2_t *v130;
  uint64_t v131;
  float64x2_t *v132;
  uint64_t v133;
  double v134;
  double v135;
  float64x2_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  __int128 v140;
  _OWORD *f64;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  __int128 v146;
  char *v147;
  char *v148;
  __int128 v149;
  unint64_t v150;
  uint8x8_t v151;
  unint64_t v152;
  uint64_t v153;
  double v154;
  unint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  unint64_t v159;
  float64x2_t *v160;
  int8x16_t v161;
  unint64_t v162;
  double v163;
  float64x2_t *v164;
  float64x2_t v165;
  __int128 v170;
  _QWORD *v171;
  _QWORD *v172;
  void *v173;
  _QWORD *v174;
  void *v175;
  char *v176;
  char *v177;
  void *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  void *v195;
  char *v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  double v210;
  __int16 v211;
  char v212;
  __int128 v213;
  _BYTE v214[24];
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  unint64_t v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  _OWORD v243[2];
  unint64_t v244;
  unint64_t v245;
  unint64_t v246[3];

  v245 = a3;
  v7 = (char **)a1 + 29;
  v6 = (_QWORD *)*((_QWORD *)a1 + 29);
  if (v6)
  {
    v8 = (char **)a1 + 29;
    do
    {
      v9 = v6[4];
      _CF = v9 >= a3;
      if (v9 >= a3)
        v11 = v6;
      else
        v11 = v6 + 1;
      if (_CF)
        v8 = (char **)v6;
      v6 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v8 != v7 && (unint64_t)v8[4] <= a3)
      return 2;
  }
  v12 = a1[11];
  v241 = a1[10];
  v242 = v12;
  v243[0] = a1[12];
  *(_OWORD *)((char *)v243 + 9) = *(__int128 *)((char *)a1 + 201);
  v13 = a1[7];
  v237 = a1[6];
  v238 = v13;
  v14 = a1[9];
  v239 = a1[8];
  v240 = v14;
  v15 = a1[3];
  v233 = a1[2];
  v234 = v15;
  v16 = a1[5];
  v235 = a1[4];
  v236 = v16;
  v17 = a1[1];
  v231 = *a1;
  v232 = v17;
  v19 = *a2;
  v18 = (std::__shared_weak_count *)a2[1];
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  v229 = v19;
  v230 = v18;
  v244 = a3;
  v22 = *(_QWORD **)(v19 + 8);
  v25 = (_QWORD *)*v22;
  v23 = v22 + 1;
  v24 = v25;
  if (v25 == v23)
  {
    v26 = 0;
  }
  else
  {
    v26 = 0;
    do
    {
      v27 = (_QWORD *)v24[1];
      v28 = v24;
      if (v27)
      {
        do
        {
          v29 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v28[2];
          _ZF = *v29 == (_QWORD)v28;
          v28 = v29;
        }
        while (!_ZF);
      }
      v26 += *(unsigned __int8 *)(v24[6] + 192);
      v24 = v29;
    }
    while (v29 != v23);
  }
  if (v26 < *((_QWORD *)a1 + 4))
  {
    v31 = 3;
    if (v18)
      goto LABEL_225;
    return v31;
  }
  v225 = v242;
  v226 = v243[0];
  v227 = v243[1];
  v221 = v238;
  v222 = v239;
  v223 = v240;
  v224 = v241;
  v217 = v234;
  v218 = v235;
  v219 = v236;
  v220 = v237;
  *(_OWORD *)&v214[8] = v231;
  v215 = v232;
  *(_QWORD *)&v213 = a3;
  *((_QWORD *)&v213 + 1) = v19;
  v230 = 0;
  v229 = 0;
  *(_QWORD *)v214 = v18;
  v228 = v244;
  v216 = v233;
  v32 = (char **)a1 + 29;
  v33 = *v7;
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        v32 = (char **)v33;
        v34 = *((_QWORD *)v33 + 4);
        if (v34 <= a3)
          break;
        v33 = *v32;
        v7 = v32;
        if (!*v32)
          goto LABEL_35;
      }
      if (v34 >= a3)
        break;
      v33 = v32[1];
      if (!v33)
      {
        v7 = v32 + 1;
        goto LABEL_35;
      }
    }
  }
  else
  {
LABEL_35:
    v35 = (char *)operator new(0x120uLL);
    *((_QWORD *)v35 + 4) = a3;
    v36 = v241;
    *(_OWORD *)(v35 + 232) = v242;
    v37 = v243[1];
    *(_OWORD *)(v35 + 248) = v243[0];
    *(_OWORD *)(v35 + 264) = v37;
    v38 = v237;
    *(_OWORD *)(v35 + 168) = v238;
    v39 = v240;
    *(_OWORD *)(v35 + 184) = v239;
    *(_OWORD *)(v35 + 200) = v39;
    *(_OWORD *)(v35 + 216) = v36;
    v40 = v233;
    *(_OWORD *)(v35 + 104) = v234;
    v41 = v236;
    *(_OWORD *)(v35 + 120) = v235;
    *(_OWORD *)(v35 + 136) = v41;
    *(_OWORD *)(v35 + 152) = v38;
    v42 = v232;
    *(_OWORD *)(v35 + 56) = v231;
    *(_OWORD *)(v35 + 72) = v42;
    *((_QWORD *)v35 + 5) = v19;
    *((_QWORD *)v35 + 6) = v18;
    *((_QWORD *)&v213 + 1) = 0;
    *(_QWORD *)v214 = 0;
    *((_QWORD *)v35 + 35) = v244;
    *(_OWORD *)(v35 + 88) = v40;
    *(_QWORD *)v35 = 0;
    *((_QWORD *)v35 + 1) = 0;
    *((_QWORD *)v35 + 2) = v32;
    *v7 = v35;
    v43 = **((_QWORD **)a1 + 28);
    if (v43)
    {
      *((_QWORD *)a1 + 28) = v43;
      v35 = *v7;
    }
    sub_20E868578(*((uint64_t **)a1 + 29), (uint64_t *)v35);
    ++*((_QWORD *)a1 + 30);
    v18 = *(std::__shared_weak_count **)v214;
  }
  if (v18)
  {
    v44 = (unint64_t *)&v18->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v204 = *((_QWORD *)a1 + 10);
  v46 = (double)*((unint64_t *)a1 + 21);
  v205 = *(__int128 *)((char *)a1 + 88);
  v206 = *(__int128 *)((char *)a1 + 104);
  v207 = *(__int128 *)((char *)a1 + 120);
  v208 = *(__int128 *)((char *)a1 + 136);
  v209 = *(__int128 *)((char *)a1 + 152);
  v210 = v46;
  v211 = 1;
  v212 = 0;
  sub_20EDDE818((uint64_t)&v192, (__int128 *)&v204);
  v47 = (uint64_t **)(a1 + 16);
  v48 = (_QWORD *)*((_QWORD *)a1 + 32);
  v49 = v245;
  if (v48)
  {
    v50 = (uint64_t **)(a1 + 16);
    do
    {
      v51 = v48[4];
      v52 = v51 >= v245;
      if (v51 >= v245)
        v53 = v48;
      else
        v53 = v48 + 1;
      if (v52)
        v50 = (uint64_t **)v48;
      v48 = (_QWORD *)*v53;
    }
    while (*v53);
    if (v50 != v47
      && v245 >= (unint64_t)v50[4]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/Object3dDetector.cpp", 711, (uint64_t)"pose_filters_.find(object_id) == pose_filters_.end()", 52, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
  *(_QWORD *)&v213 = v49;
  *((_QWORD *)&v213 + 1) = (char *)&v213 + 8;
  *(_QWORD *)v214 = (char *)&v213 + 8;
  *(_QWORD *)&v214[8] = 0;
  v54 = v193;
  if (v193 != &v192)
  {
    v55 = 0;
    v56 = (char *)&v213 + 8;
    do
    {
      v57 = (char *)operator new(0x20uLL);
      *((_QWORD *)v57 + 2) = v54[2];
      v58 = v54[3];
      *((_QWORD *)v57 + 3) = v58;
      if (v58)
      {
        v59 = (unint64_t *)(v58 + 8);
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
        v56 = (char *)*((_QWORD *)&v213 + 1);
        v55 = *(_QWORD *)&v214[8];
      }
      *(_QWORD *)v57 = v56;
      *((_QWORD *)v57 + 1) = (char *)&v213 + 8;
      *((_QWORD *)v56 + 1) = v57;
      ++v55;
      *((_QWORD *)&v213 + 1) = v57;
      *(_QWORD *)&v214[8] = v55;
      v54 = (uint64_t *)v54[1];
      v56 = v57;
    }
    while (v54 != &v192);
  }
  *(_QWORD *)&v214[16] = 0;
  v215 = 0uLL;
  v62 = (char *)v195;
  v61 = v196;
  v63 = v196 - (_BYTE *)v195;
  if (v196 == v195)
  {
    v64 = 0;
  }
  else
  {
    if (v63 < 0)
      sub_20E867F44();
    v64 = operator new(v196 - (_BYTE *)v195);
    *(_QWORD *)&v214[16] = v64;
    *(_QWORD *)&v215 = v64;
    *((_QWORD *)&v215 + 1) = &v64[2 * (v63 >> 4)];
    do
    {
      *v64 = *(_QWORD *)v62;
      v65 = *((_QWORD *)v62 + 1);
      v64[1] = v65;
      if (v65)
      {
        v66 = (unint64_t *)(v65 + 8);
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
      v62 += 16;
      v64 += 2;
    }
    while (v62 != v61);
    *(_QWORD *)&v215 = v64;
  }
  v219 = v200;
  v220 = v201;
  v221 = v202;
  v222 = v203;
  v216 = v197;
  v217 = v198;
  v218 = v199;
  v68 = (uint64_t **)(a1 + 16);
  v69 = *v47;
  if (*v47)
  {
    while (1)
    {
      while (1)
      {
        v68 = (uint64_t **)v69;
        v70 = v69[4];
        if (v70 <= v49)
          break;
        v69 = *v68;
        v47 = v68;
        if (!*v68)
          goto LABEL_80;
      }
      if (v70 >= v49)
        break;
      v69 = v68[1];
      if (!v69)
      {
        v47 = v68 + 1;
        goto LABEL_80;
      }
    }
  }
  else
  {
LABEL_80:
    v71 = (char *)operator new(0xC8uLL);
    v72 = (uint64_t *)v71;
    *((_QWORD *)v71 + 4) = v49;
    *((_QWORD *)v71 + 5) = v71 + 40;
    *((_QWORD *)v71 + 6) = v71 + 40;
    *((_QWORD *)v71 + 7) = 0;
    v73 = *(_QWORD *)&v214[8];
    if (*(_QWORD *)&v214[8])
    {
      v75 = *((_QWORD *)&v213 + 1);
      v74 = *(_QWORD **)v214;
      v76 = **(_QWORD **)v214;
      *(_QWORD *)(v76 + 8) = *(_QWORD *)(*((_QWORD *)&v213 + 1) + 8);
      **(_QWORD **)(v75 + 8) = v76;
      v77 = *((_QWORD *)v71 + 5);
      *(_QWORD *)(v77 + 8) = v74;
      *v74 = v77;
      *((_QWORD *)v71 + 5) = v75;
      *(_QWORD *)(v75 + 8) = v71 + 40;
      *((_QWORD *)v71 + 7) = v73;
      *(_QWORD *)&v214[8] = 0;
    }
    v78 = v218;
    *(_OWORD *)(v71 + 136) = v219;
    v79 = v221;
    *(_OWORD *)(v71 + 152) = v220;
    *(_OWORD *)(v71 + 168) = v79;
    *(_OWORD *)(v71 + 184) = v222;
    v80 = v217;
    *(_OWORD *)(v71 + 88) = v216;
    *(_OWORD *)(v71 + 104) = v80;
    v81 = *((_QWORD *)&v215 + 1);
    *((_QWORD *)v71 + 8) = *(_QWORD *)&v214[16];
    *((_QWORD *)v71 + 9) = v64;
    *((_QWORD *)v71 + 10) = v81;
    v215 = 0uLL;
    *(_QWORD *)&v214[16] = 0;
    *(_OWORD *)(v71 + 120) = v78;
    *(_QWORD *)v71 = 0;
    *((_QWORD *)v71 + 1) = 0;
    *((_QWORD *)v71 + 2) = v68;
    *v47 = (uint64_t *)v71;
    v82 = **((_QWORD **)a1 + 31);
    if (v82)
    {
      *((_QWORD *)a1 + 31) = v82;
      v72 = *v47;
    }
    sub_20E868578(*((uint64_t **)a1 + 32), v72);
    ++*((_QWORD *)a1 + 33);
  }
  v83 = *(_QWORD *)&v214[16];
  if (*(_QWORD *)&v214[16])
  {
    v84 = v215;
    v85 = *(void **)&v214[16];
    if ((_QWORD)v215 != *(_QWORD *)&v214[16])
    {
      do
      {
        v86 = *(std::__shared_weak_count **)(v84 - 8);
        if (v86)
        {
          v87 = (unint64_t *)&v86->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        v84 -= 16;
      }
      while (v84 != v83);
      v85 = *(void **)&v214[16];
    }
    *(_QWORD *)&v215 = v83;
    operator delete(v85);
  }
  if (*(_QWORD *)&v214[8])
  {
    v89 = *((_QWORD *)&v213 + 1);
    v90 = *(_QWORD **)v214;
    v91 = **(_QWORD **)v214;
    *(_QWORD *)(v91 + 8) = *(_QWORD *)(*((_QWORD *)&v213 + 1) + 8);
    **(_QWORD **)(v89 + 8) = v91;
    *(_QWORD *)&v214[8] = 0;
    if (v90 != (_QWORD *)((char *)&v213 + 8))
    {
      do
      {
        v115 = (_OWORD *)v90[1];
        v116 = (std::__shared_weak_count *)v90[3];
        if (v116)
        {
          v117 = (unint64_t *)&v116->__shared_owners_;
          do
            v118 = __ldaxr(v117);
          while (__stlxr(v118 - 1, v117));
          if (!v118)
          {
            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
            std::__shared_weak_count::__release_weak(v116);
          }
        }
        operator delete(v90);
        v90 = v115;
      }
      while (v115 != (__int128 *)((char *)&v213 + 8));
    }
  }
  v92 = *(_QWORD **)(*a2 + 8);
  v93 = v92[2];
  if (v93)
  {
    if (v93 >> 59)
      sub_20E867F44();
    v94 = (float64x2_t *)operator new(32 * v93);
    v95 = &v94[2 * v93];
    v98 = (_QWORD *)*v92;
    v96 = v92 + 1;
    v97 = v98;
    if (v98 != v96)
      goto LABEL_101;
LABEL_141:
    v120 = 0;
    v119 = 0;
    v99 = v94;
LABEL_142:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/Object3dDetector.cpp", 127, (uint64_t)"num_map_points > 0", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v121 = 1;
    if (v119 <= 0x1FF)
      goto LABEL_144;
    goto LABEL_145;
  }
  v94 = 0;
  v95 = 0;
  v122 = (_QWORD *)*v92;
  v96 = v92 + 1;
  v97 = v122;
  if (v122 == v96)
    goto LABEL_141;
LABEL_101:
  v99 = v94;
  do
  {
    v100 = v97[6];
    if (*(_BYTE *)(v100 + 192))
      v101 = (double *)(v100 + 40);
    else
      v101 = 0;
    v103 = v101[1];
    v102 = v101[2];
    v104 = v101[3];
    if (v94 < v95)
    {
      v94->f64[0] = v103;
      v94->f64[1] = v102;
      v94[1].f64[0] = v104;
      v94[1].f64[1] = 1.0;
      v94 += 2;
      v105 = (_QWORD *)v97[1];
      if (!v105)
        goto LABEL_125;
      goto LABEL_123;
    }
    v106 = ((char *)v94 - (char *)v99) >> 5;
    v107 = v106 + 1;
    if ((unint64_t)(v106 + 1) >> 59)
      sub_20E867F44();
    if (v95 - v99 > v107)
      v107 = v95 - v99;
    if ((unint64_t)((char *)v95 - (char *)v99) >= 0x7FFFFFFFFFFFFFE0)
      v108 = 0x7FFFFFFFFFFFFFFLL;
    else
      v108 = v107;
    if (v108)
    {
      if (v108 >> 59)
        sub_20E877A38();
      v109 = (char *)operator new(32 * v108);
      v110 = &v109[32 * v106];
      *(float64_t *)v110 = v103;
      *((float64_t *)v110 + 1) = v102;
      *((float64_t *)v110 + 2) = v104;
      *((_QWORD *)v110 + 3) = 0x3FF0000000000000;
      if (v94 == v99)
      {
LABEL_129:
        v113 = (float64x2_t *)v110;
        v95 = (float64x2_t *)&v109[32 * v108];
        v94 = (float64x2_t *)(v110 + 32);
        if (v99)
          goto LABEL_121;
        goto LABEL_122;
      }
    }
    else
    {
      v109 = 0;
      v110 = (char *)(32 * v106);
      *(float64_t *)v110 = v103;
      *((float64_t *)v110 + 1) = v102;
      *((float64_t *)v110 + 2) = v104;
      *((_QWORD *)v110 + 3) = 0x3FF0000000000000;
      if (v94 == v99)
        goto LABEL_129;
    }
    v111 = (float64x2_t *)v110;
    do
    {
      v112 = v94[-1];
      v113 = v111 - 2;
      v111[-2] = v94[-2];
      v111[-1] = v112;
      v94 -= 2;
      v111 -= 2;
    }
    while (v94 != v99);
    v95 = (float64x2_t *)&v109[32 * v108];
    v94 = (float64x2_t *)(v110 + 32);
    if (v99)
LABEL_121:
      operator delete(v99);
LABEL_122:
    v99 = v113;
    v105 = (_QWORD *)v97[1];
    if (!v105)
    {
      do
      {
LABEL_125:
        v114 = (_QWORD *)v97[2];
        _ZF = *v114 == (_QWORD)v97;
        v97 = v114;
      }
      while (!_ZF);
      goto LABEL_102;
    }
    do
    {
LABEL_123:
      v114 = v105;
      v105 = (_QWORD *)*v105;
    }
    while (v105);
LABEL_102:
    v97 = v114;
  }
  while (v114 != v96);
  v119 = (char *)v94 - (char *)v99;
  v120 = ((char *)v94 - (char *)v99) >> 5;
  if (v94 == v99)
    goto LABEL_142;
  v121 = 0;
  if (v119 > 0x1FF)
    goto LABEL_145;
LABEL_144:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/Object3dDetector.cpp", 128, (uint64_t)"num_map_points >= num_key_points", 32, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_145:
  v123 = (char *)operator new(0x200uLL);
  v125 = v123;
  v126 = v123 + 512;
  v127.f64[0] = 0.0;
  v128 = 0uLL;
  if ((v121 & 1) == 0)
  {
    v129 = (char *)v94 - (char *)v99 - 32;
    if (v129 < 0x20)
    {
      v130 = v99;
      goto LABEL_151;
    }
    v131 = (v129 >> 5) + 1;
    v130 = &v99[2 * (v131 & 0xFFFFFFFFFFFFFFELL)];
    v132 = v99 + 2;
    v133 = v131 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      v134 = v132[-1].f64[0];
      v135 = v132[1].f64[0];
      v124 = v132[-2];
      v136 = *v132;
      v132 += 4;
      v128 = vaddq_f64(vaddq_f64(v128, v124), v136);
      v127.f64[0] = v127.f64[0] + v134 + v135;
      v133 -= 2;
    }
    while (v133);
    if (v131 != (v131 & 0xFFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_151:
        v128 = vaddq_f64(v128, *v130);
        v127.f64[0] = v127.f64[0] + v130[1].f64[0];
        v130 += 2;
      }
      while (v130 != v94);
    }
  }
  *(float64x2_t *)v123 = vdivq_f64(v128, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(unint64_t)v120), 0));
  *((double *)v123 + 2) = v127.f64[0] / (double)(unint64_t)v120;
  *((_QWORD *)v123 + 3) = 0x3FF0000000000000;
  v137 = v123 + 32;
  v213 = 0uLL;
  *(_OWORD *)v214 = 0uLL;
  *(_DWORD *)&v214[16] = 1065353216;
  v138 = 1;
  v139 = v123;
  while (2)
  {
    while (2)
    {
      v246[0] = 0;
      if ((v121 & 1) == 0)
      {
        v150 = 0;
        v151 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v213 + 8));
        v151.i16[0] = vaddlv_u8(v151);
        v152 = v151.u32[0];
        v153 = *((_QWORD *)&v213 + 1) - 1;
        v154 = 0.0;
        while (1)
        {
          if (*((_QWORD *)&v213 + 1))
          {
            if (v152 > 1)
            {
              v155 = v150;
              if (v150 >= *((_QWORD *)&v213 + 1))
                v155 = v150 % *((_QWORD *)&v213 + 1);
            }
            else
            {
              v155 = v150 & v153;
            }
            v156 = *(_QWORD **)(v213 + 8 * v155);
            if (v156)
            {
              v157 = (_QWORD *)*v156;
              if (v157)
              {
                if (v152 < 2)
                {
                  while (1)
                  {
                    v158 = v157[1];
                    if (v158 == v150)
                    {
                      if (v157[2] == v150)
                        goto LABEL_172;
                    }
                    else if ((v158 & v153) != v155)
                    {
                      goto LABEL_193;
                    }
                    v157 = (_QWORD *)*v157;
                    if (!v157)
                      goto LABEL_193;
                  }
                }
                do
                {
                  v159 = v157[1];
                  if (v159 == v150)
                  {
                    if (v157[2] == v150)
                      goto LABEL_172;
                  }
                  else
                  {
                    if (v159 >= *((_QWORD *)&v213 + 1))
                      v159 %= *((_QWORD *)&v213 + 1);
                    if (v159 != v155)
                      break;
                  }
                  v157 = (_QWORD *)*v157;
                }
                while (v157);
              }
            }
          }
LABEL_193:
          if (v139 != v137)
            break;
          v163 = 0.0;
          if (v154 < 0.0)
            goto LABEL_199;
LABEL_172:
          if (++v150 == v120)
            goto LABEL_155;
        }
        v160 = &v99[2 * v150];
        v127.f64[0] = v160[1].f64[0];
        v161 = *(int8x16_t *)v160;
        v162 = vextq_s8(v161, v161, 8uLL).u64[0];
        v163 = 0.0;
        v164 = (float64x2_t *)v139;
        do
        {
          v124.f64[0] = v164[1].f64[0];
          v165 = *v164;
          v164 += 2;
          v124 = vsubq_f64(v127, v124);
          *(_QWORD *)&_Q7.f64[0] = v161.i64[0];
          *(_QWORD *)&_Q7.f64[1] = v162;
          _D16 = vsubq_f64(_Q7, v165).f64[1];
          __asm { FMLA            D7, D16, V6.D[1] }
          v163 = v163 + sqrt(vmlad_n_f64(_Q7.f64[0], v124.f64[0], v124.f64[0]));
        }
        while (v164 != (float64x2_t *)v137);
        if (v154 >= v163)
          goto LABEL_172;
LABEL_199:
        v246[0] = v150;
        v154 = v163;
        goto LABEL_172;
      }
LABEL_155:
      sub_20EDC9EA8((uint64_t)&v213, v246, v246);
      f64 = (_OWORD *)v99[2 * v246[0]].f64;
      if (v137 < v126)
      {
        v140 = f64[1];
        *(_OWORD *)v137 = *f64;
        *((_OWORD *)v137 + 1) = v140;
        v137 += 32;
        if (++v138 == 16)
          goto LABEL_203;
        continue;
      }
      break;
    }
    v142 = (v137 - v139) >> 5;
    v143 = v142 + 1;
    if ((unint64_t)(v142 + 1) >> 59)
      sub_20E867F44();
    if ((v126 - v139) >> 4 > v143)
      v143 = (v126 - v139) >> 4;
    if ((unint64_t)(v126 - v139) >= 0x7FFFFFFFFFFFFFE0)
      v144 = 0x7FFFFFFFFFFFFFFLL;
    else
      v144 = v143;
    if (!v144)
    {
      v145 = 0;
      v170 = f64[1];
      v147 = (char *)(32 * v142);
      *(_OWORD *)v147 = *f64;
      *((_OWORD *)v147 + 1) = v170;
      if (v137 != v139)
        goto LABEL_165;
LABEL_201:
      v125 = v147;
      v126 = &v145[32 * v144];
      v137 = v147 + 32;
      if (v139)
        goto LABEL_168;
      goto LABEL_169;
    }
    if (v144 >> 59)
      sub_20E877A38();
    v145 = (char *)operator new(32 * v144);
    v146 = f64[1];
    v147 = &v145[32 * v142];
    *(_OWORD *)v147 = *f64;
    *((_OWORD *)v147 + 1) = v146;
    if (v137 == v139)
      goto LABEL_201;
LABEL_165:
    v148 = v147;
    do
    {
      v149 = *((_OWORD *)v137 - 1);
      v125 = v148 - 32;
      *((_OWORD *)v148 - 2) = *((_OWORD *)v137 - 2);
      *((_OWORD *)v148 - 1) = v149;
      v137 -= 32;
      v148 -= 32;
    }
    while (v137 != v139);
    v126 = &v145[32 * v144];
    v137 = v147 + 32;
    if (v139)
LABEL_168:
      operator delete(v139);
LABEL_169:
    v139 = v125;
    if (++v138 != 16)
      continue;
    break;
  }
LABEL_203:
  v171 = *(_QWORD **)v214;
  if (*(_QWORD *)v214)
  {
    do
    {
      v172 = (_QWORD *)*v171;
      operator delete(v171);
      v171 = v172;
    }
    while (v172);
  }
  v173 = (void *)v213;
  *(_QWORD *)&v213 = 0;
  if (v173)
    operator delete(v173);
  v174 = sub_20EDD4354((uint64_t *)a1 + 39, v245, &v245);
  v175 = (void *)v174[3];
  if (v175)
  {
    v174[4] = v175;
    operator delete(v175);
    v174[3] = 0;
    v174[4] = 0;
    v174[5] = 0;
  }
  v174[3] = v125;
  v174[4] = v137;
  v174[5] = v126;
  if (v99)
    operator delete(v99);
  v176 = (char *)v195;
  if (v195)
  {
    v177 = v196;
    v178 = v195;
    if (v196 != v195)
    {
      do
      {
        v179 = (std::__shared_weak_count *)*((_QWORD *)v177 - 1);
        if (v179)
        {
          v180 = (unint64_t *)&v179->__shared_owners_;
          do
            v181 = __ldaxr(v180);
          while (__stlxr(v181 - 1, v180));
          if (!v181)
          {
            ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
            std::__shared_weak_count::__release_weak(v179);
          }
        }
        v177 -= 16;
      }
      while (v177 != v176);
      v178 = v195;
    }
    v196 = v176;
    operator delete(v178);
  }
  if (v194)
  {
    v182 = v192;
    v183 = v193;
    v184 = *v193;
    *(_QWORD *)(v184 + 8) = *(_QWORD *)(v192 + 8);
    **(_QWORD **)(v182 + 8) = v184;
    v194 = 0;
    if (v183 != &v192)
    {
      do
      {
        v188 = (uint64_t *)v183[1];
        v189 = (std::__shared_weak_count *)v183[3];
        if (v189)
        {
          v190 = (unint64_t *)&v189->__shared_owners_;
          do
            v191 = __ldaxr(v190);
          while (__stlxr(v191 - 1, v190));
          if (!v191)
          {
            ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
            std::__shared_weak_count::__release_weak(v189);
          }
        }
        operator delete(v183);
        v183 = v188;
      }
      while (v188 != &v192);
    }
  }
  v31 = 0;
  v18 = v230;
  if (v230)
  {
LABEL_225:
    v185 = (unint64_t *)&v18->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v31;
}

void sub_20EDC297C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E9DF278((uint64_t *)va);
  sub_20E86665C((uint64_t)&STACK[0x218]);
  _Unwind_Resume(a1);
}

void sub_20EDC2A00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,_QWORD *a45,uint64_t a46,char *__p,char *a48)
{
  _QWORD *v48;
  char *v49;
  char *v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;

  if (__p)
  {
    v49 = a48;
    v50 = __p;
    if (a48 != __p)
    {
      do
      {
        v51 = (std::__shared_weak_count *)*((_QWORD *)v49 - 1);
        if (v51)
        {
          p_shared_owners = (unint64_t *)&v51->__shared_owners_;
          do
            v53 = __ldaxr(p_shared_owners);
          while (__stlxr(v53 - 1, p_shared_owners));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        v49 -= 16;
      }
      while (v49 != __p);
      v50 = __p;
    }
    operator delete(v50);
  }
  if (a46)
  {
    v54 = a45;
    v55 = *a45;
    *(_QWORD *)(v55 + 8) = *(_QWORD *)(a44 + 8);
    **(_QWORD **)(a44 + 8) = v55;
    if (a45 != v48)
    {
      do
      {
        v56 = (_QWORD *)v54[1];
        v57 = (std::__shared_weak_count *)v54[3];
        if (v57)
        {
          v58 = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        operator delete(v54);
        v54 = v56;
      }
      while (v56 != v48);
    }
  }
  JUMPOUT(0x20EDC2BBCLL);
}

void sub_20EDC2AF8()
{
  JUMPOUT(0x20EDC2BB0);
}

void sub_20EDC2B00()
{
  JUMPOUT(0x20EDC2BB0);
}

void sub_20EDC2B08()
{
  JUMPOUT(0x20EDC2BB0);
}

void sub_20EDC2B10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,_QWORD *__p,uint64_t a46)
{
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;

  if (v46)
  {
    v49 = __p;
    v50 = *__p;
    *(_QWORD *)(v50 + 8) = *(_QWORD *)(v48 + 8);
    **(_QWORD **)(v48 + 8) = v50;
    if (__p != v47)
    {
      do
      {
        v51 = (_QWORD *)v49[1];
        v52 = (std::__shared_weak_count *)v49[3];
        if (v52)
        {
          p_shared_owners = (unint64_t *)&v52->__shared_owners_;
          do
            v54 = __ldaxr(p_shared_owners);
          while (__stlxr(v54 - 1, p_shared_owners));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        operator delete(v49);
        v49 = v51;
      }
      while (v51 != v47);
    }
  }
  JUMPOUT(0x20EDC2BBCLL);
}

void sub_20EDC2B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  sub_20E8C25A8((uint64_t)&a43);
  if (v43)
    JUMPOUT(0x20EDC2BACLL);
  JUMPOUT(0x20EDC2BB0);
}

void sub_20EDC2BD4(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char *v10;
  __int128 v11;
  __int128 v12;
  float64x2_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  float *v21;
  float *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  float v29;
  float v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  float v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t *v49;
  char *v50;
  char *v51;
  int64_t v52;
  char *v53;
  char *v54;
  char **v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  unint64_t v60;
  size_t v61;
  void *v62;
  char *v63;
  char *v64;
  char *v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _BOOL4 v69;
  size_t v70;
  float v71;
  uint64_t *v72;
  unint64_t v73;
  char *v74;
  char *v75;
  unint64_t v76;
  char *v77;
  uint64_t *v78;
  char *v79;
  int64_t v80;
  char *v81;
  char *v82;
  uint64_t *v83;
  uint64_t *v84;
  __int128 v85;
  uint64_t *v86;
  uint64_t *v87;
  void *v88;
  void *v89;
  uint64_t *v90;
  uint64_t *v91;
  char *v92;
  uint64_t *v93;
  void *v94;
  void *v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  int8x8_t v99;
  uint8x8_t v100;
  unint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char v107;
  double *v108;
  BOOL v109;
  unint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  _QWORD *v119;
  _QWORD *v120;
  _BYTE *v121;
  _BYTE *v122;
  int64_t v123;
  char *v124;
  char *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t *v129;
  void *v130;
  void *v131;
  std::__shared_weak_count *v132;
  unint64_t *p_shared_owners;
  unint64_t v134;
  uint64_t v135;
  char *v136;
  unint64_t v137;
  unint64_t v138;
  double *v139;
  unint64_t v144;
  char *v145;
  char **v146;
  uint64_t v147;
  _BYTE v148[16];
  __int128 v149;
  uint64_t v150;
  _BYTE v151[208];
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  char v159;
  __int128 v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  __int128 v174;
  uint64_t v175;
  char v176;
  char v177;
  char *v178;
  unint64_t v179;
  unint64_t v180;
  char v181;
  char *v182;
  uint64_t *v183;
  char *v184;
  uint64_t *v185;
  __int128 v186;
  char *v187;
  char *v188;
  uint64_t v189;
  char *v190;
  std::__shared_weak_count *v191;

  v10 = (char *)operator new(0x278uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_24C9E98B8;
  v11 = *(_OWORD *)a3;
  v12 = *((_OWORD *)a3 + 1);
  v13 = *(float64x2_t *)(a3 + 4);
  v139 = a3;
  v14 = *((_QWORD *)a3 + 8);
  *(_OWORD *)(v10 + 72) = *((_OWORD *)a3 + 3);
  *(float64x2_t *)(v10 + 56) = v13;
  *(_OWORD *)(v10 + 40) = v12;
  v15 = vmuld_n_f64(v13.f64[0], *(double *)&v11);
  v16 = 1.0 / *(double *)&v11;
  *((_QWORD *)v10 + 11) = v14;
  *((double *)v10 + 12) = 1.0 / *(double *)&v11;
  v17 = -*((double *)&v11 + 1) / v15;
  v18 = -(vmuld_n_f64(v13.f64[0], *(double *)&v12) - vmuld_lane_f64(*((double *)&v11 + 1), v13, 1)) / v15;
  *((double *)v10 + 13) = v17;
  *((double *)v10 + 14) = v18;
  *((_QWORD *)v10 + 15) = 0;
  v19 = 1.0 / v13.f64[0];
  v20 = -v13.f64[1] / v13.f64[0];
  *((double *)v10 + 16) = 1.0 / v13.f64[0];
  *((double *)v10 + 17) = v20;
  *((_QWORD *)v10 + 18) = 0;
  *((_QWORD *)v10 + 19) = 0;
  *((_OWORD *)v10 + 10) = xmmword_2102E3C70;
  *((_QWORD *)v10 + 22) = 0x7FF8000000000000;
  v10[184] = 0;
  *((_OWORD *)v10 + 12) = xmmword_2102E3C50;
  *((_QWORD *)v10 + 77) = 0xBFF0000000000000;
  *((_QWORD *)v10 + 78) = 0xFFEFFFFFFFFFFFFFLL;
  v191 = (std::__shared_weak_count *)v10;
  *(_OWORD *)(v10 + 24) = v11;
  v189 = 0;
  v190 = v10 + 24;
  v22 = *(float **)(a2 + 56);
  v21 = *(float **)(a2 + 64);
  v187 = 0;
  v188 = 0;
  v23 = (char *)v21 - (char *)v22;
  if (v21 == v22)
  {
    v25 = 0;
  }
  else
  {
    if (v23 < 0)
      sub_20E867F44();
    v24 = v23 >> 5;
    v25 = (char *)operator new(40 * (v23 >> 5));
    v23 = (uint64_t)&v25[40 * v24];
    v187 = v25;
    v189 = v23;
    v26 = v25;
    do
    {
      *(_QWORD *)v26 = -1082130432;
      *((_QWORD *)v26 + 1) = 0;
      *((_QWORD *)v26 + 2) = 0;
      *((_QWORD *)v26 + 3) = 0;
      *((_DWORD *)v26 + 8) = 2143289344;
      v26 += 40;
    }
    while (v26 != (char *)v23);
    v27 = 0;
    v188 = &v25[40 * v24];
    v28 = v25;
    do
    {
      v29 = *v22;
      v30 = v22[1];
      v22 += 8;
      *(_DWORD *)v28 = 0;
      *((_DWORD *)v28 + 1) = v27++;
      *((float *)v28 + 2) = v29;
      *((float *)v28 + 3) = v30;
      *((double *)v28 + 2) = v18 + v16 * v29 + v17 * v30;
      *((double *)v28 + 3) = v20 + v19 * v30;
      *((_DWORD *)v28 + 8) = 1065353216;
      v28 += 40;
    }
    while (v22 != v21);
  }
  v31 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  *(_QWORD *)a7 = 0;
  if (0xCCCCCCCCCCCCCCCDLL * ((v23 - (uint64_t)v25) >> 3) < v31)
    goto LABEL_171;
  v183 = 0;
  v184 = 0;
  v182 = 0;
  v32 = *a4;
  v33 = a4[1];
  v34 = v33 - *a4;
  v135 = a2;
  if (v33 == *a4)
  {
    v36 = 0;
  }
  else
  {
    v35 = 0xAAAAAAAAAAAAAAABLL * (v34 >> 3);
    if (v35 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v182 = (char *)operator new(v34);
    v184 = &v182[24 * v35];
    v36 = sub_20EDC9788((uint64_t)&v184, v32, v33, v182);
    v183 = v36;
    v34 = (int64_t)v182;
  }
  v37 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v36 - v34) >> 3));
  v38 = *(float *)(a1 + 56);
  if (v36 == (uint64_t *)v34)
    v39 = 0;
  else
    v39 = v37;
  sub_20EDC88DC((uint64_t *)v34, v36, v39, 1);
  v40 = 0xAAAAAAAAAAAAAAABLL * (((char *)v183 - v182) >> 3);
  v186 = 0uLL;
  v185 = 0;
  sub_20ED9C3C4((uint64_t)&v185, v40);
  v178 = 0;
  v179 = 0;
  v180 = 0;
  if (v183 != (uint64_t *)v182)
  {
    if ((char *)v183 - v182 < 0)
      sub_20E867F44();
    v41 = (v40 - 1) >> 6;
    v42 = operator new(8 * (v41 + 1));
    v43 = v42;
    v179 = 0xAAAAAAAAAAAAAAABLL * (((char *)v183 - v182) >> 3);
    v180 = v41 + 1;
    v178 = (char *)v42;
    if (v40 >= 0x41)
      v44 = (v40 - 1) >> 6;
    else
      v44 = 0;
    v42[v44] = 0;
    if (v40 >= 0x40)
      bzero(v42, 8 * (v40 >> 6));
    if ((v40 & 0x3F) != 0)
      v43[v40 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v40 & 0x3F));
    v45 = 0;
    v144 = v40;
    while (1)
    {
      v47 = v178;
      if (((*(_QWORD *)&v178[(v45 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v45) & 1) == 0)
        break;
      v46 = v45 + 1;
LABEL_28:
      v45 = v46;
      if (v46 == v40)
      {
        if (v178)
          operator delete(v178);
        goto LABEL_98;
      }
    }
    v136 = v182;
    v137 = v45;
    v145 = v178;
    v146 = (char **)&v182[24 * v45];
    v48 = v45 + 1;
    v138 = v45 + 1;
    if (v45 + 1 == v40)
    {
LABEL_31:
      v49 = (uint64_t *)v186;
      if ((unint64_t)v186 >= *((_QWORD *)&v186 + 1))
      {
        v72 = v185;
        v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v186 - (_QWORD)v185) >> 3) + 1;
        if (v73 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        v74 = *v146;
        v75 = v146[1];
        if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v186 + 1) - (_QWORD)v185) >> 3) > v73)
          v73 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v186 + 1) - (_QWORD)v185) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v186 + 1) - (_QWORD)v185) >> 3) >= 0x555555555555555)
          v76 = 0xAAAAAAAAAAAAAAALL;
        else
          v76 = v73;
        *(_QWORD *)&v154 = (char *)&v186 + 8;
        if (v76)
        {
          if (v76 > 0xAAAAAAAAAAAAAAALL)
            sub_20E877A38();
          v77 = (char *)operator new(24 * v76);
        }
        else
        {
          v77 = 0;
        }
        v78 = (uint64_t *)&v77[8 * (v49 - v72)];
        *(_QWORD *)&v152 = v77;
        *((_QWORD *)&v152 + 1) = v78;
        v79 = &v77[24 * v76];
        v78[1] = 0;
        *(_QWORD *)&v153 = v78;
        *((_QWORD *)&v153 + 1) = v79;
        v78[2] = 0;
        *v78 = 0;
        v80 = v75 - v74;
        if (v75 != v74)
        {
          if (v80 < 0)
            sub_20E867F44();
          v81 = (char *)operator new(v75 - v74);
          *v78 = (uint64_t)v81;
          v82 = &v81[8 * (v80 >> 3)];
          v78[2] = (uint64_t)v82;
          memcpy(v81, v74, v80);
          v78[1] = (uint64_t)v82;
        }
        v83 = v78 + 3;
        *(_QWORD *)&v153 = v78 + 3;
        if (v49 == v72)
        {
          v185 = v78;
          *(_QWORD *)&v186 = v78 + 3;
          *((_QWORD *)&v186 + 1) = v79;
          v46 = v138;
        }
        else
        {
          do
          {
            v84 = v78;
            *(v78 - 2) = 0;
            *(v78 - 1) = 0;
            v85 = *(_OWORD *)(v49 - 3);
            v49 -= 3;
            *(_OWORD *)(v78 - 3) = v85;
            v78 -= 3;
            *(v84 - 1) = v49[2];
            *v49 = 0;
            v49[1] = 0;
            v49[2] = 0;
          }
          while (v49 != v72);
          v49 = v185;
          v86 = (uint64_t *)v186;
          v185 = v78;
          v186 = v153;
          v83 = (uint64_t *)v153;
          v46 = v138;
          if (v86 != v49)
          {
            v87 = v86;
            do
            {
              v89 = (void *)*(v87 - 3);
              v87 -= 3;
              v88 = v89;
              if (v89)
              {
                *(v86 - 2) = (uint64_t)v88;
                operator delete(v88);
              }
              v86 = v87;
            }
            while (v87 != v49);
          }
        }
        if (v49)
          operator delete(v49);
        *(_QWORD *)&v186 = v83;
      }
      else
      {
        *(_OWORD *)v186 = 0uLL;
        v49[2] = 0;
        v50 = *v146;
        v51 = *(char **)&v136[24 * v137 + 8];
        v52 = v51 - *v146;
        v46 = v138;
        if (v51 != *v146)
        {
          if (v52 < 0)
            sub_20E867F44();
          v53 = (char *)operator new(v51 - *v146);
          *v49 = (uint64_t)v53;
          v49[1] = (uint64_t)v53;
          v54 = &v53[8 * (v52 >> 3)];
          v49[2] = (uint64_t)v54;
          memcpy(v53, v50, v52);
          v49[1] = (uint64_t)v54;
        }
        *(_QWORD *)&v186 = v49 + 3;
      }
      goto LABEL_28;
    }
    while (((1 << v48) & *(_QWORD *)&v47[8 * (v48 >> 6)]) != 0)
    {
LABEL_36:
      if (++v48 == v40)
        goto LABEL_31;
    }
    v55 = (char **)&v182[24 * v48];
    v57 = *v146;
    v56 = v146[1];
    v59 = *v55;
    v58 = v55[1];
    v147 = v58 - *v55;
    v60 = (v147 >> 3) + ((v56 - *v146) >> 3);
    v152 = 0uLL;
    *(_QWORD *)&v153 = 0;
    v61 = 8 * v60;
    if (v60)
    {
      if (v60 >> 61)
        sub_20E867F44();
      v62 = operator new(8 * v60);
      bzero(v62, 8 * v60);
      v63 = (char *)v62;
      if (v57 == v56)
        goto LABEL_51;
    }
    else
    {
      v62 = 0;
      v63 = 0;
      if (v57 == v56)
      {
LABEL_51:
        v149 = 0uLL;
        v150 = 0;
        if (v60)
        {
          v60 = (unint64_t)operator new(8 * v60);
          bzero((void *)v60, v61);
        }
        v67 = (_QWORD *)v60;
        if (v57 == v56)
        {
          v70 = v147;
          if (v59 != v58)
LABEL_61:
            memcpy(v67, v59, v70);
LABEL_62:
          v40 = v144;
          if (v60)
LABEL_63:
            operator delete((void *)v60);
        }
        else
        {
          while (v59 != v58)
          {
            v68 = *(_QWORD *)v59;
            v69 = *(_QWORD *)v59 >= *(_QWORD *)v57;
            if (*(_QWORD *)v59 >= *(_QWORD *)v57)
              v68 = *(_QWORD *)v57;
            v59 += 8 * (*(_QWORD *)v57 >= *(_QWORD *)v59);
            v57 += 8 * v69;
            *v67++ = v68;
            if (v57 == v56)
            {
              v70 = v58 - v59;
              if (v59 != v58)
                goto LABEL_61;
              goto LABEL_62;
            }
          }
          v70 = v56 - v57;
          memcpy(v67, v57, v70);
          v40 = v144;
          if (v60)
            goto LABEL_63;
        }
        if (v62)
          operator delete(v62);
        v71 = (float)(unint64_t)((uint64_t)((uint64_t)v67 + v70 - v60) >> 3);
        if ((_QWORD *)((char *)v67 + v70) == (_QWORD *)v60)
          v71 = 1.0;
        v47 = v145;
        if ((float)((float)(unint64_t)((v63 - (_BYTE *)v62) >> 3) / v71) >= v38)
          *(_QWORD *)&v145[8 * (v48 >> 6)] |= 1 << v48;
        goto LABEL_36;
      }
    }
    v63 = (char *)v62;
    if (v59 != v58)
    {
      v64 = v57;
      v65 = v59;
      v63 = (char *)v62;
      while (1)
      {
        v66 = *(_QWORD *)v64;
        if (*(_QWORD *)v64 < *(_QWORD *)v65)
        {
          v64 += 8;
          if (v64 == v56)
            goto LABEL_51;
        }
        else
        {
          if (*(_QWORD *)v65 >= v66)
          {
            *(_QWORD *)v63 = v66;
            v63 += 8;
            v64 += 8;
          }
          v65 += 8;
          if (v64 == v56)
            goto LABEL_51;
        }
        if (v65 == v58)
          goto LABEL_51;
      }
    }
    goto LABEL_51;
  }
LABEL_98:
  v90 = (uint64_t *)v182;
  if (v182)
  {
    v91 = v183;
    v92 = v182;
    if (v183 != (uint64_t *)v182)
    {
      v93 = v183;
      do
      {
        v95 = (void *)*(v93 - 3);
        v93 -= 3;
        v94 = v95;
        if (v95)
        {
          *(v91 - 2) = (uint64_t)v94;
          operator delete(v94);
        }
        v91 = v93;
      }
      while (v93 != v90);
      v92 = v182;
    }
    v183 = v90;
    operator delete(v92);
  }
  v96 = *(_QWORD **)(a1 + 224);
  if (v96 != (_QWORD *)(a1 + 232))
  {
    v97 = v135 + 80;
    do
    {
      v98 = v96[4];
      LOBYTE(v178) = 0;
      v181 = 0;
      if (!*((_BYTE *)v96 + 272))
        goto LABEL_130;
      v99 = (int8x8_t)a5[1];
      if (!*(_QWORD *)&v99)
        goto LABEL_130;
      v100 = (uint8x8_t)vcnt_s8(v99);
      v100.i16[0] = vaddlv_u8(v100);
      if (v100.u32[0] > 1uLL)
      {
        v101 = v98;
        if (v98 >= *(_QWORD *)&v99)
          v101 = v98 % *(_QWORD *)&v99;
      }
      else
      {
        v101 = (*(_QWORD *)&v99 - 1) & v98;
      }
      v102 = *(_QWORD **)(*a5 + 8 * v101);
      if (!v102 || (v103 = (_QWORD *)*v102) == 0)
      {
LABEL_130:
        v107 = 1;
        goto LABEL_131;
      }
      if (v100.u32[0] < 2uLL)
      {
        v104 = *(_QWORD *)&v99 - 1;
        while (1)
        {
          v106 = v103[1];
          if (v98 == v106)
          {
            if (v103[2] == v98)
              goto LABEL_158;
          }
          else if ((v106 & v104) != v101)
          {
            goto LABEL_130;
          }
          v103 = (_QWORD *)*v103;
          if (!v103)
            goto LABEL_130;
        }
      }
      while (1)
      {
        v105 = v103[1];
        if (v98 == v105)
          break;
        if (v105 >= *(_QWORD *)&v99)
          v105 %= *(_QWORD *)&v99;
        if (v105 != v101)
          goto LABEL_130;
LABEL_120:
        v103 = (_QWORD *)*v103;
        if (!v103)
          goto LABEL_130;
      }
      if (v103[2] != v98)
        goto LABEL_120;
LABEL_158:
      v178 = 0;
      v179 = 0;
      v180 = 0;
      v122 = (_BYTE *)v103[3];
      v121 = (_BYTE *)v103[4];
      v123 = v121 - v122;
      if (v121 != v122)
      {
        if (v123 < 0)
          sub_20E867F44();
        v124 = (char *)operator new(v121 - v122);
        v125 = &v124[8 * (v123 >> 3)];
        v178 = v124;
        v180 = (unint64_t)v125;
        memcpy(v124, v122, v123);
        v179 = (unint64_t)v125;
      }
      v107 = 0;
      v181 = 1;
      v97 = v135 + 80;
LABEL_131:
      v108 = (double *)(v96 + 5);
      LOBYTE(v152) = 0;
      v177 = 0;
      if (*(_QWORD *)(a1 + 352) % *(_QWORD *)(a1 + 208))
        v109 = *(_BYTE *)(a6 + 8) == 0;
      else
        v109 = 1;
      if (v109)
      {
        v148[0] = 0;
        v148[8] = 0;
        sub_20EDC082C((uint64_t)&v149, v108, (uint64_t *)&v187, v97, v139, &v185, (uint64_t *)&v178, (uint64_t)v148);
      }
      else
      {
        sub_20EDC082C((uint64_t)&v149, v108, (uint64_t *)&v187, v97, v139, &v185, (uint64_t *)&v178, a6);
      }
      sub_20EDC9888((uint64_t)&v152, &v149);
      if (v151[200] && v151[192])
        sub_20E9DF08C((uint64_t)v151);
      if (v177)
      {
        *(_QWORD *)&v158 = v96[4];
        v110 = *(_QWORD *)(a7 + 8);
        if (v110 >= *(_QWORD *)(a7 + 16))
        {
          *(_QWORD *)(a7 + 8) = sub_20EDC9B4C((char **)a7, (uint64_t)&v152);
          if (!v177)
            goto LABEL_149;
        }
        else
        {
          v111 = v152;
          v112 = v153;
          v113 = v155;
          *(_OWORD *)(v110 + 32) = v154;
          *(_OWORD *)(v110 + 48) = v113;
          *(_OWORD *)v110 = v111;
          *(_OWORD *)(v110 + 16) = v112;
          v114 = v156;
          v115 = v157;
          v116 = v158;
          *(_BYTE *)(v110 + 112) = v159;
          *(_OWORD *)(v110 + 80) = v115;
          *(_OWORD *)(v110 + 96) = v116;
          *(_OWORD *)(v110 + 64) = v114;
          *(_BYTE *)(v110 + 120) = 0;
          *(_BYTE *)(v110 + 312) = 0;
          if (v176)
          {
            *(_QWORD *)(v110 + 120) = 0;
            *(_QWORD *)(v110 + 128) = 0;
            *(_QWORD *)(v110 + 136) = 0;
            *(_OWORD *)(v110 + 120) = v160;
            v160 = 0uLL;
            *(_QWORD *)(v110 + 136) = v161;
            *(_QWORD *)(v110 + 144) = 0;
            v161 = 0;
            *(_QWORD *)(v110 + 152) = 0;
            *(_QWORD *)(v110 + 160) = 0;
            *(_OWORD *)(v110 + 144) = v162;
            v162 = 0uLL;
            *(_QWORD *)(v110 + 160) = v163;
            *(_QWORD *)(v110 + 168) = 0;
            v163 = 0;
            *(_QWORD *)(v110 + 176) = 0;
            *(_QWORD *)(v110 + 184) = 0;
            *(_OWORD *)(v110 + 168) = v164;
            v164 = 0uLL;
            *(_QWORD *)(v110 + 184) = v165;
            *(_QWORD *)(v110 + 192) = 0;
            v165 = 0;
            *(_QWORD *)(v110 + 200) = 0;
            *(_QWORD *)(v110 + 208) = 0;
            *(_OWORD *)(v110 + 192) = v166;
            *(_QWORD *)(v110 + 208) = v167;
            v166 = 0uLL;
            v167 = 0;
            v117 = v168;
            v118 = v169;
            *(_OWORD *)(v110 + 248) = v170;
            *(_OWORD *)(v110 + 232) = v118;
            *(_OWORD *)(v110 + 216) = v117;
            *(_QWORD *)(v110 + 264) = 0;
            *(_QWORD *)(v110 + 272) = 0;
            *(_QWORD *)(v110 + 280) = 0;
            *(_QWORD *)(v110 + 288) = 0;
            *(_QWORD *)(v110 + 264) = v171;
            *(_QWORD *)(v110 + 272) = v172;
            *(_QWORD *)(v110 + 280) = v173;
            v171 = 0;
            v172 = 0;
            v173 = 0;
            *(_QWORD *)(v110 + 296) = 0;
            *(_QWORD *)(v110 + 304) = 0;
            *(_OWORD *)(v110 + 288) = v174;
            *(_QWORD *)(v110 + 304) = v175;
            v174 = 0uLL;
            v175 = 0;
            *(_BYTE *)(v110 + 312) = 1;
          }
          *(_QWORD *)(a7 + 8) = v110 + 320;
          *(_QWORD *)(a7 + 8) = v110 + 320;
          if (!v177)
            goto LABEL_149;
        }
        if (v176)
          sub_20E9DF08C((uint64_t)&v160);
      }
LABEL_149:
      if ((v107 & 1) == 0 && v178)
        operator delete(v178);
      v119 = (_QWORD *)v96[1];
      if (v119)
      {
        do
        {
          v120 = v119;
          v119 = (_QWORD *)*v119;
        }
        while (v119);
      }
      else
      {
        do
        {
          v120 = (_QWORD *)v96[2];
          v109 = *v120 == (_QWORD)v96;
          v96 = v120;
        }
        while (!v109);
      }
      v96 = v120;
    }
    while (v120 != (_QWORD *)(a1 + 232));
  }
  ++*(_QWORD *)(a1 + 352);
  v126 = v185;
  if (v185)
  {
    v127 = (uint64_t *)v186;
    v128 = v185;
    if ((uint64_t *)v186 != v185)
    {
      v129 = (uint64_t *)v186;
      do
      {
        v131 = (void *)*(v129 - 3);
        v129 -= 3;
        v130 = v131;
        if (v131)
        {
          *(v127 - 2) = (uint64_t)v130;
          operator delete(v130);
        }
        v127 = v129;
      }
      while (v129 != v126);
      v128 = v185;
    }
    *(_QWORD *)&v186 = v126;
    operator delete(v128);
  }
  v25 = v187;
LABEL_171:
  if (v25)
  {
    v188 = v25;
    operator delete(v25);
  }
  v132 = v191;
  if (v191)
  {
    p_shared_owners = (unint64_t *)&v191->__shared_owners_;
    do
      v134 = __ldaxr(p_shared_owners);
    while (__stlxr(v134 - 1, p_shared_owners));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
}

void sub_20EDC3934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  uint64_t v18;
  void *v20;
  void *v21;
  void *v22;

  v20 = *(void **)(v18 - 256);
  if (v20)
  {
    *(_QWORD *)(v18 - 248) = v20;
    operator delete(v20);
  }
  if (*(_BYTE *)(v18 - 232))
  {
    v21 = *(void **)(v18 - 256);
    if (v21)
    {
      *(_QWORD *)(v18 - 248) = v21;
      operator delete(v21);
    }
  }
  sub_20E9DD680((void **)(v18 - 200));
  sub_20E9DEE54(a18);
  v22 = *(void **)(v18 - 176);
  if (v22)
  {
    *(_QWORD *)(v18 - 168) = v22;
    operator delete(v22);
  }
  sub_20E86665C(v18 - 152);
  _Unwind_Resume(a1);
}

void sub_20EDC3AE4(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, double **a7@<X8>)
{
  float64_t v7;
  uint64_t *v10;
  _QWORD *v11;
  int32x2_t v12;
  __int128 v13;
  __int128 v14;
  float64x2_t v15;
  double *v16;
  char *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  float64x2_t v60;
  __int128 v61;
  float64x2_t v62;
  float64x2_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  int64x2_t v67;
  uint64_t v68;
  int64x2_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  void **v79;
  double *v80;
  char *v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double *v113;
  double *v114;
  char *v115;
  float64_t v116;
  double *v117;
  _QWORD *v118;
  double v119;
  unint64_t v120;
  uint8x8_t v121;
  void **v122;
  char *v123;
  unint64_t v124;
  uint64_t v125;
  float v126;
  float v127;
  uint64_t v128;
  _QWORD *v129;
  _BOOL8 v130;
  unint64_t v131;
  unint64_t v132;
  size_t v133;
  void *v134;
  void *v135;
  uint64_t v136;
  _QWORD *v137;
  size_t v138;
  size_t v139;
  size_t v140;
  _QWORD *k;
  size_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint8x8_t v146;
  uint64_t v147;
  _QWORD *v148;
  void *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  size_t v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  _QWORD *v159;
  void *v160;
  _QWORD *v161;
  _QWORD *v162;
  void *v163;
  _QWORD *v164;
  void *v165;
  uint64_t v166;
  _QWORD *v167;
  int v168;
  unint64_t v169;
  int8x8_t v170;
  uint8x8_t v171;
  unint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  float64x2_t *v179;
  uint64_t v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  float64x2_t v197;
  double v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  unint64_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  int64x2_t v210;
  int64x2_t v211;
  int64x2_t v212;
  int64x2_t v213;
  int8x16_t v214;
  int8x16_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float32x2_t v222;
  float32x2_t v223;
  float64x2_t v228;
  double v229;
  float32x2_t v230;
  float v231;
  int v232;
  __int32 v233;
  float v234;
  __int32 v235;
  float v236;
  unint64_t v237;
  uint8x8_t v238;
  void **v239;
  char *v240;
  unint64_t v241;
  uint64_t v242;
  float v243;
  unint64_t v244;
  _BOOL8 v245;
  unint64_t v246;
  unint64_t v247;
  size_t prime;
  void *v249;
  void *v250;
  uint64_t v251;
  _QWORD **v252;
  size_t v253;
  size_t v254;
  size_t v255;
  _QWORD *i;
  size_t v257;
  uint64_t v258;
  unint64_t v259;
  uint8x8_t v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  size_t v264;
  uint64_t v265;
  void *v266;
  uint64_t *v267;
  unint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  char **v271;
  unint64_t v272;
  unint64_t v273;
  uint8x8_t v274;
  _QWORD **v275;
  _QWORD *v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  float v280;
  uint64_t v281;
  _QWORD *v282;
  _BOOL8 v283;
  unint64_t v284;
  unint64_t v285;
  size_t v286;
  void *v287;
  void *v288;
  uint64_t v289;
  _QWORD **v290;
  size_t v291;
  size_t v292;
  size_t v293;
  _QWORD *j;
  size_t v295;
  uint64_t v296;
  unint64_t v297;
  uint8x8_t v298;
  uint64_t v299;
  _QWORD *v300;
  void *v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  size_t v305;
  float64_t v306;
  float64_t v307;
  float64_t v308;
  void *v309;
  void *v310;
  __int128 v311;
  int v317;
  uint64_t v318;
  int64x2_t v319;
  uint64_t v320;
  int64x2_t v321;
  uint64_t v322;
  int64x2_t v323;
  uint64_t v324;
  int64x2_t v325;
  uint64_t v326;
  uint64_t v327;
  char v328;
  char v329;
  __int128 __p;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  float64x2_t v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  uint64_t v339;
  void *v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  float v344;
  __int128 v345;
  __int128 v346;
  float v347;

  v345 = 0u;
  v346 = 0u;
  v347 = 1.0;
  v10 = *(uint64_t **)(a1 + 288);
  if (!v10)
    goto LABEL_5;
  if (!*(_QWORD *)(a1 + 320))
  {
    do
      v10 = (uint64_t *)*v10;
    while (v10);
LABEL_5:
    v342 = 0uLL;
    v343 = 0uLL;
    v344 = 1.0;
    goto LABEL_6;
  }
  v11 = (_QWORD *)(a1 + 312);
  v12 = vdup_n_s32(0x7F7FFFFFu);
  while (2)
  {
    v169 = *((unint64_t *)v10 + 2);
    v319.i64[0] = v169;
    v170 = *(int8x8_t *)(a1 + 320);
    if (!*(_QWORD *)&v170)
      goto LABEL_150;
    v171 = (uint8x8_t)vcnt_s8(v170);
    v171.i16[0] = vaddlv_u8(v171);
    if (v171.u32[0] > 1uLL)
    {
      v172 = v169;
      if (v169 >= *(_QWORD *)&v170)
        v172 = v169 % *(_QWORD *)&v170;
    }
    else
    {
      v172 = (*(_QWORD *)&v170 - 1) & v169;
    }
    v173 = *(_QWORD **)(*v11 + 8 * v172);
    if (!v173)
      goto LABEL_150;
    v174 = (_QWORD *)*v173;
    if (!v174)
      goto LABEL_150;
    if (v171.u32[0] < 2uLL)
    {
      v175 = *(_QWORD *)&v170 - 1;
      while (1)
      {
        v177 = v174[1];
        if (v177 == v169)
        {
          if (v174[2] == v169)
            goto LABEL_172;
        }
        else if ((v177 & v175) != v172)
        {
          goto LABEL_150;
        }
        v174 = (_QWORD *)*v174;
        if (!v174)
          goto LABEL_150;
      }
    }
    while (1)
    {
      v176 = v174[1];
      if (v176 == v169)
        break;
      if (v176 >= *(_QWORD *)&v170)
        v176 %= *(_QWORD *)&v170;
      if (v176 != v172)
        goto LABEL_150;
LABEL_161:
      v174 = (_QWORD *)*v174;
      if (!v174)
        goto LABEL_150;
    }
    if (v174[2] != v169)
      goto LABEL_161;
LABEL_172:
    v178 = sub_20EDD4354((uint64_t *)(a1 + 312), v169, &v319);
    v179 = (float64x2_t *)v178[3];
    v180 = v178[4] - (_QWORD)v179;
    if (v180)
    {
      v181 = a4[10];
      v182 = a4[8];
      v183 = a4[9];
      v184 = a4[6];
      v186 = a4[4];
      v185 = a4[5];
      v188 = *((double *)v10 + 9);
      v187 = *((double *)v10 + 10);
      v190 = *((double *)v10 + 13);
      v189 = *((double *)v10 + 14);
      v192 = *((double *)v10 + 5);
      v191 = *((double *)v10 + 6);
      v193 = a4[2];
      v194 = a4[1];
      v195 = *(double *)(a3 + 16);
      v196 = *(double *)(a3 + 40);
      v197 = *(float64x2_t *)(a3 + 24);
      v198 = *(double *)(a3 + 64);
      v199 = *(float64x2_t *)(a3 + 48);
      v200.f64[0] = *a4 * v192 + v193 * v190 + v194 * v188;
      v200.f64[1] = a4[3] + *a4 * v191 + v193 * v189 + v194 * v187;
      v201.f64[0] = v188 * v185 + v192 * v186 + v190 * v184;
      v201.f64[1] = v187 * v185 + v189 * v184 + v191 * v186 + a4[7];
      v202 = v180 >> 5;
      v203 = *(float64x2_t *)(v10 + 11);
      v204 = *(float64x2_t *)(v10 + 7);
      v205 = *(float64x2_t *)(v10 + 3);
      v206 = vaddq_f64(vaddq_f64(vmulq_n_f64(v205, *a4), vmulq_n_f64(v204, v194)), vmulq_n_f64(v203, v193));
      v207 = vaddq_f64(vaddq_f64(vmulq_n_f64(v205, v186), vmulq_n_f64(v204, v185)), vmulq_n_f64(v203, v184));
      v208 = vaddq_f64(vaddq_f64(vmulq_n_f64(v205, v182), vmulq_n_f64(v203, v181)), vmulq_n_f64(v204, v183));
      v209.f64[0] = v192 * v182 + v190 * v181 + v188 * v183;
      v209.f64[1] = v187 * v183 + v191 * v182 + v189 * v181 + a4[11];
      v210 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v206, *(double *)a3), v207, *(float64x2_t *)a3, 1), v208, v195);
      v211 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v200, *(double *)a3), v201, *(float64x2_t *)a3, 1), v209, v195);
      v212 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v206, v197.f64[0]), v207, v197, 1), v208, v196);
      v213 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v200, v197.f64[0]), v201, v197, 1), v209, v196);
      v214 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v206, v199.f64[0]), v207, v199, 1), v208, v198);
      v215 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v200, v199.f64[0]), v201, v199, 1), v209, v198);
      if (v202 <= 1)
        v202 = 1;
      v216 = (float64x2_t)vzip1q_s64(v210, v212);
      v217 = (float64x2_t)vzip2q_s64(v210, v212);
      v218 = (float64x2_t)vzip1q_s64(v211, v213);
      v219 = (float64x2_t)vzip2q_s64(v211, v213);
      _D16 = vextq_s8(v214, v214, 8uLL).u64[0];
      _D17 = vextq_s8(v215, v215, 8uLL).u64[0];
      v222 = (float32x2_t)0x80000000800000;
      v223 = (float32x2_t)v12;
      do
      {
        _Q19 = *v179;
        _Q18 = v179[1];
        v179 += 2;
        __asm
        {
          FMLA            D21, D16, V19.D[1]
          FMLA            D21, D17, V18.D[1]
        }
        v228 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v216, _Q19.f64[0]), v217, _Q19, 1), v218, _Q18.f64[0]), v219, _Q18, 1);
        if (_D21 == 0.0)
          v229 = 1.0;
        else
          v229 = _D21;
        v230 = vcvt_f32_f64(vdivq_f64(v228, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v229, 0)));
        v223 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v230, v223), (int8x8_t)v223, (int8x8_t)v230);
        v222 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v222, v230), (int8x8_t)v222, (int8x8_t)v230);
        --v202;
      }
      while (v202);
      v231 = v223.f32[1];
      v232 = v223.i32[1];
      if (v223.f32[0] <= 0.0)
      {
        v233 = v223.i32[0];
        goto LABEL_184;
      }
    }
    else
    {
      v222 = (float32x2_t)0x80000000800000;
      v232 = 2139095039;
      v231 = 3.4028e38;
    }
    v233 = 0;
    v223.i32[0] = 0;
LABEL_184:
    v311 = *a2;
    if (v231 > 0.0)
    {
      v232 = 0;
      v231 = 0.0;
    }
    if (v223.f32[0] <= v222.f32[0])
      v234 = v222.f32[0];
    else
      v234 = v223.f32[0];
    if (v223.f32[0] <= v222.f32[0])
      v235 = v233;
    else
      v235 = v222.i32[0];
    if (v231 <= v222.f32[1])
      v236 = v222.f32[1];
    else
      v236 = v231;
    if (v231 > v222.f32[1])
      v232 = v222.i32[1];
    v317 = v232;
    v237 = *((_QWORD *)&v345 + 1);
    if (!*((_QWORD *)&v345 + 1))
      goto LABEL_218;
    v238 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v345 + 8));
    v238.i16[0] = vaddlv_u8(v238);
    if (v238.u32[0] > 1uLL)
    {
      v7 = *(double *)&v169;
      if (*((_QWORD *)&v345 + 1) <= v169)
        *(_QWORD *)&v7 = v169 % *((_QWORD *)&v345 + 1);
    }
    else
    {
      *(_QWORD *)&v7 = (*((_QWORD *)&v345 + 1) - 1) & v169;
    }
    v239 = *(void ***)(v345 + 8 * *(_QWORD *)&v7);
    if (!v239 || (v240 = (char *)*v239) == 0)
    {
LABEL_218:
      v240 = (char *)operator new(0x40uLL);
      *(_QWORD *)v240 = 0;
      *((double *)v240 + 1) = *(double *)&v169;
      *((double *)v240 + 2) = *(double *)&v169;
      *(_OWORD *)(v240 + 24) = 0u;
      *(_OWORD *)(v240 + 40) = 0u;
      *((_QWORD *)v240 + 7) = 0;
      v243 = (float)(unint64_t)(*((_QWORD *)&v346 + 1) + 1);
      if (v237 && (float)(v347 * (float)v237) >= v243)
      {
        v166 = v345;
        v167 = *(_QWORD **)(v345 + 8 * *(_QWORD *)&v7);
        if (!v167)
          goto LABEL_221;
        goto LABEL_146;
      }
      v245 = (v237 & (v237 - 1)) != 0;
      if (v237 < 3)
        v245 = 1;
      v246 = v245 | (2 * v237);
      v247 = vcvtps_u32_f32(v243 / v347);
      if (v246 <= v247)
        prime = v247;
      else
        prime = v246;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v237 = *((_QWORD *)&v345 + 1);
      }
      if (prime > v237)
      {
LABEL_234:
        if (prime >> 61)
          sub_20E877A38();
        v249 = operator new(8 * prime);
        v250 = (void *)v345;
        *(_QWORD *)&v345 = v249;
        if (v250)
          operator delete(v250);
        v251 = 0;
        *((_QWORD *)&v345 + 1) = prime;
        do
          *(_QWORD *)(v345 + 8 * v251++) = 0;
        while (prime != v251);
        v252 = (_QWORD **)v346;
        if (!(_QWORD)v346)
          goto LABEL_269;
        v253 = *(_QWORD *)(v346 + 8);
        v254 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v255 = v253 & v254;
          *(_QWORD *)(v345 + 8 * v255) = &v346;
          for (i = *v252; *v252; i = *v252)
          {
            v257 = i[1] & v254;
            if (v257 == v255)
            {
              v252 = (_QWORD **)i;
            }
            else if (*(_QWORD *)(v345 + 8 * v257))
            {
              *v252 = (_QWORD *)*i;
              v258 = 8 * v257;
              *i = **(_QWORD **)(v345 + v258);
              **(_QWORD **)(v345 + v258) = i;
            }
            else
            {
              *(_QWORD *)(v345 + 8 * v257) = v252;
              v252 = (_QWORD **)i;
              v255 = v257;
            }
          }
          goto LABEL_269;
        }
        if (v253 >= prime)
          v253 %= prime;
        *(_QWORD *)(v345 + 8 * v253) = &v346;
        v262 = *v252;
        if (!*v252)
        {
LABEL_269:
          v237 = prime;
          v265 = prime - 1;
          if ((prime & (prime - 1)) == 0)
            goto LABEL_145;
LABEL_281:
          if (v237 <= v169)
          {
            *(_QWORD *)&v7 = v169 % v237;
            v166 = v345;
            v167 = *(_QWORD **)(v345 + 8 * (v169 % v237));
            if (!v167)
              goto LABEL_221;
          }
          else
          {
            v7 = *(double *)&v169;
            v166 = v345;
            v167 = *(_QWORD **)(v345 + 8 * v169);
            if (!v167)
              goto LABEL_221;
          }
          goto LABEL_146;
        }
        while (1)
        {
          v264 = v262[1];
          if (v264 >= prime)
            v264 %= prime;
          if (v264 == v253)
            goto LABEL_263;
          if (*(_QWORD *)(v345 + 8 * v264))
          {
            *v252 = (_QWORD *)*v262;
            v263 = 8 * v264;
            *v262 = **(_QWORD **)(v345 + v263);
            **(_QWORD **)(v345 + v263) = v262;
            v262 = v252;
LABEL_263:
            v252 = (_QWORD **)v262;
            v262 = (_QWORD *)*v262;
            if (!v262)
              goto LABEL_269;
          }
          else
          {
            *(_QWORD *)(v345 + 8 * v264) = v252;
            v252 = (_QWORD **)v262;
            v262 = (_QWORD *)*v262;
            v253 = v264;
            if (!v262)
              goto LABEL_269;
          }
        }
      }
      if (prime < v237)
      {
        v259 = vcvtps_u32_f32((float)*((unint64_t *)&v346 + 1) / v347);
        if (v237 < 3 || (v260 = (uint8x8_t)vcnt_s8((int8x8_t)v237), v260.i16[0] = vaddlv_u8(v260), v260.u32[0] > 1uLL))
        {
          v259 = std::__next_prime(v259);
        }
        else
        {
          v261 = 1 << -(char)__clz(v259 - 1);
          if (v259 >= 2)
            v259 = v261;
        }
        if (prime <= v259)
          prime = v259;
        if (prime < v237)
        {
          if (!prime)
          {
            v266 = (void *)v345;
            *(_QWORD *)&v345 = 0;
            if (v266)
              operator delete(v266);
            v237 = 0;
            *((_QWORD *)&v345 + 1) = 0;
            v265 = -1;
LABEL_145:
            *(_QWORD *)&v7 = v265 & v169;
            v166 = v345;
            v167 = *(_QWORD **)(v345 + 8 * (v265 & v169));
            if (!v167)
            {
LABEL_221:
              *(_QWORD *)v240 = v346;
              *(_QWORD *)&v346 = v240;
              *(_QWORD *)(v166 + 8 * *(_QWORD *)&v7) = &v346;
              v168 = v317;
              if (!*(_QWORD *)v240)
                goto LABEL_148;
              v244 = *(_QWORD *)(*(_QWORD *)v240 + 8);
              if ((v237 & (v237 - 1)) != 0)
              {
                if (v244 >= v237)
                  v244 %= v237;
              }
              else
              {
                v244 &= v237 - 1;
              }
              v167 = (_QWORD *)(v345 + 8 * v244);
LABEL_147:
              *v167 = v240;
LABEL_148:
              ++*((_QWORD *)&v346 + 1);
              goto LABEL_149;
            }
LABEL_146:
            *(_QWORD *)v240 = *v167;
            v168 = v317;
            goto LABEL_147;
          }
          goto LABEL_234;
        }
        v237 = *((_QWORD *)&v345 + 1);
      }
      v265 = v237 - 1;
      if ((v237 & (v237 - 1)) == 0)
        goto LABEL_145;
      goto LABEL_281;
    }
    if (v238.u32[0] < 2uLL)
    {
      while (1)
      {
        v242 = *((_QWORD *)v240 + 1);
        if (v242 == v169)
        {
          if (*((_QWORD *)v240 + 2) == v169)
            goto LABEL_217;
        }
        else if ((v242 & (*((_QWORD *)&v345 + 1) - 1)) != *(_QWORD *)&v7)
        {
          goto LABEL_218;
        }
        v240 = *(char **)v240;
        if (!v240)
          goto LABEL_218;
      }
    }
    while (1)
    {
      v241 = *((_QWORD *)v240 + 1);
      if (v241 == v169)
        break;
      if (v241 >= *((_QWORD *)&v345 + 1))
        v241 %= *((_QWORD *)&v345 + 1);
      if (v241 != *(_QWORD *)&v7)
        goto LABEL_218;
LABEL_207:
      v240 = *(char **)v240;
      if (!v240)
        goto LABEL_218;
    }
    if (*((_QWORD *)v240 + 2) != v169)
      goto LABEL_207;
LABEL_217:
    v168 = v317;
LABEL_149:
    *((_DWORD *)v240 + 6) = 1065353216;
    *((_OWORD *)v240 + 2) = v311;
    *((_DWORD *)v240 + 12) = v235;
    *((_DWORD *)v240 + 13) = v168;
    *((float *)v240 + 14) = v234;
    *((float *)v240 + 15) = v236;
LABEL_150:
    v10 = (uint64_t *)*v10;
    if (v10)
      continue;
    break;
  }
  v267 = (uint64_t *)v346;
  v342 = 0u;
  v343 = 0u;
  v344 = 1.0;
  if (!(_QWORD)v346)
    goto LABEL_6;
  while (2)
  {
    v338 = *(_OWORD *)(v267 + 3);
    v268 = v267[6];
    v339 = v267[5];
    v269 = v267[7];
    v270 = operator new(0x28uLL);
    *(_QWORD *)&v341 = v270 + 5;
    *((_QWORD *)&v341 + 1) = v270 + 5;
    *(_OWORD *)v270 = v338;
    v270[2] = v339;
    v270[3] = v268;
    v270[4] = v269;
    v340 = v270;
    sub_20EDBC028((float **)&v340, (uint64_t)a2, (char **)&__p);
    v271 = (char **)__p;
    v272 = v267[2];
    v273 = *((_QWORD *)&v342 + 1);
    if (*((_QWORD *)&v342 + 1))
    {
      v274 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v342 + 8));
      v274.i16[0] = vaddlv_u8(v274);
      if (v274.u32[0] > 1uLL)
      {
        v268 = v267[2];
        if (*((_QWORD *)&v342 + 1) <= v272)
          v268 = v272 % *((_QWORD *)&v342 + 1);
      }
      else
      {
        v268 = (*((_QWORD *)&v342 + 1) - 1) & v272;
      }
      v275 = *(_QWORD ***)(v342 + 8 * v268);
      if (v275)
      {
        v276 = *v275;
        if (*v275)
        {
          if (v274.u32[0] < 2uLL)
          {
            while (1)
            {
              v278 = v276[1];
              if (v278 == v272)
              {
                if (v276[2] == v272)
                  goto LABEL_382;
              }
              else if ((v278 & (*((_QWORD *)&v342 + 1) - 1)) != v268)
              {
                goto LABEL_309;
              }
              v276 = (_QWORD *)*v276;
              if (!v276)
                goto LABEL_309;
            }
          }
          do
          {
            v277 = v276[1];
            if (v277 == v272)
            {
              if (v276[2] == v272)
                goto LABEL_382;
            }
            else
            {
              if (v277 >= *((_QWORD *)&v342 + 1))
                v277 %= *((_QWORD *)&v342 + 1);
              if (v277 != v268)
                break;
            }
            v276 = (_QWORD *)*v276;
          }
          while (v276);
        }
      }
    }
LABEL_309:
    v276 = operator new(0x30uLL);
    v319.i64[0] = (uint64_t)v276;
    v319.i64[1] = (uint64_t)&v343;
    *v276 = 0;
    v276[1] = v272;
    v279 = v267[2];
    v276[4] = 0;
    v276[5] = 0;
    v276[2] = v279;
    v276[3] = 0;
    LOBYTE(v320) = 1;
    v280 = (float)(unint64_t)(*((_QWORD *)&v343 + 1) + 1);
    if (!v273 || (float)(v344 * (float)v273) < v280)
    {
      v283 = (v273 & (v273 - 1)) != 0;
      if (v273 < 3)
        v283 = 1;
      v284 = v283 | (2 * v273);
      v285 = vcvtps_u32_f32(v280 / v344);
      if (v284 <= v285)
        v286 = v285;
      else
        v286 = v284;
      if (v286 == 1)
      {
        v286 = 2;
      }
      else if ((v286 & (v286 - 1)) != 0)
      {
        v286 = std::__next_prime(v286);
        v273 = *((_QWORD *)&v342 + 1);
      }
      if (v286 <= v273)
      {
        if (v286 >= v273)
          goto LABEL_359;
        v297 = vcvtps_u32_f32((float)*((unint64_t *)&v343 + 1) / v344);
        if (v273 < 3 || (v298 = (uint8x8_t)vcnt_s8((int8x8_t)v273), v298.i16[0] = vaddlv_u8(v298), v298.u32[0] > 1uLL))
        {
          v297 = std::__next_prime(v297);
        }
        else
        {
          v299 = 1 << -(char)__clz(v297 - 1);
          if (v297 >= 2)
            v297 = v299;
        }
        if (v286 <= v297)
          v286 = v297;
        if (v286 >= v273)
        {
          v273 = *((_QWORD *)&v342 + 1);
          v302 = *((_QWORD *)&v342 + 1) - 1;
          if ((v273 & (v273 - 1)) != 0)
          {
LABEL_372:
            if (v273 <= v272)
            {
              v268 = v272 % v273;
              v281 = v342;
              v282 = *(_QWORD **)(v342 + 8 * (v272 % v273));
              if (!v282)
                goto LABEL_361;
            }
            else
            {
              v268 = v272;
              v281 = v342;
              v282 = *(_QWORD **)(v342 + 8 * v272);
              if (!v282)
                goto LABEL_361;
            }
            goto LABEL_312;
          }
LABEL_360:
          v268 = v302 & v272;
          v281 = v342;
          v282 = *(_QWORD **)(v342 + 8 * (v302 & v272));
          if (!v282)
            goto LABEL_361;
LABEL_312:
          *v276 = *v282;
          goto LABEL_380;
        }
        if (!v286)
        {
          v301 = (void *)v342;
          *(_QWORD *)&v342 = 0;
          if (v301)
            operator delete(v301);
          v273 = 0;
          *((_QWORD *)&v342 + 1) = 0;
          v302 = -1;
          goto LABEL_360;
        }
      }
      if (v286 >> 61)
        sub_20E877A38();
      v287 = operator new(8 * v286);
      v288 = (void *)v342;
      *(_QWORD *)&v342 = v287;
      if (v288)
        operator delete(v288);
      v289 = 0;
      *((_QWORD *)&v342 + 1) = v286;
      do
        *(_QWORD *)(v342 + 8 * v289++) = 0;
      while (v286 != v289);
      v290 = (_QWORD **)v343;
      if (!(_QWORD)v343)
      {
LABEL_371:
        v273 = v286;
        v302 = v286 - 1;
        if ((v286 & (v286 - 1)) != 0)
          goto LABEL_372;
        goto LABEL_360;
      }
      v291 = *(_QWORD *)(v343 + 8);
      v292 = v286 - 1;
      if ((v286 & (v286 - 1)) == 0)
      {
        v293 = v291 & v292;
        *(_QWORD *)(v342 + 8 * v293) = &v343;
        for (j = *v290; *v290; j = *v290)
        {
          v295 = j[1] & v292;
          if (v295 == v293)
          {
            v290 = (_QWORD **)j;
          }
          else if (*(_QWORD *)(v342 + 8 * v295))
          {
            *v290 = (_QWORD *)*j;
            v296 = 8 * v295;
            *j = **(_QWORD **)(v342 + v296);
            **(_QWORD **)(v342 + v296) = j;
          }
          else
          {
            *(_QWORD *)(v342 + 8 * v295) = v290;
            v290 = (_QWORD **)j;
            v293 = v295;
          }
        }
        goto LABEL_371;
      }
      if (v291 < v286)
      {
        *(_QWORD *)(v342 + 8 * v291) = &v343;
        v300 = *v290;
        if (*v290)
          goto LABEL_366;
        goto LABEL_358;
      }
      v291 %= v286;
      *(_QWORD *)(v342 + 8 * v291) = &v343;
      v300 = *v290;
      if (!*v290)
      {
LABEL_358:
        v273 = v286;
LABEL_359:
        v302 = v273 - 1;
        if ((v273 & (v273 - 1)) != 0)
          goto LABEL_372;
        goto LABEL_360;
      }
      while (1)
      {
LABEL_366:
        v305 = v300[1];
        if (v305 >= v286)
          v305 %= v286;
        if (v305 == v291)
          goto LABEL_365;
        if (*(_QWORD *)(v342 + 8 * v305))
        {
          *v290 = (_QWORD *)*v300;
          v304 = 8 * v305;
          *v300 = **(_QWORD **)(v342 + v304);
          **(_QWORD **)(v342 + v304) = v300;
          v300 = v290;
LABEL_365:
          v290 = (_QWORD **)v300;
          v300 = (_QWORD *)*v300;
          if (!v300)
            goto LABEL_371;
        }
        else
        {
          *(_QWORD *)(v342 + 8 * v305) = v290;
          v290 = (_QWORD **)v300;
          v300 = (_QWORD *)*v300;
          v291 = v305;
          if (!v300)
            goto LABEL_371;
        }
      }
    }
    v281 = v342;
    v282 = *(_QWORD **)(v342 + 8 * v268);
    if (v282)
      goto LABEL_312;
LABEL_361:
    *v276 = v343;
    *(_QWORD *)&v343 = v276;
    *(_QWORD *)(v281 + 8 * v268) = &v343;
    if (*v276)
    {
      v303 = *(_QWORD *)(*v276 + 8);
      if ((v273 & (v273 - 1)) != 0)
      {
        if (v303 >= v273)
          v303 %= v273;
      }
      else
      {
        v303 &= v273 - 1;
      }
      v282 = (_QWORD *)(v342 + 8 * v303);
LABEL_380:
      *v282 = v276;
    }
    ++*((_QWORD *)&v343 + 1);
LABEL_382:
    if (v276 + 3 != v271)
      sub_20E86811C(v276 + 3, *v271, v271[1], (v271[1] - *v271) >> 3);
    v7 = *(double *)&__p;
    if ((_QWORD)__p)
    {
      v306 = *((double *)&__p + 1);
      v307 = *(double *)&__p;
      if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
      {
        v308 = *((double *)&__p + 1);
        do
        {
          v310 = *(void **)(*(_QWORD *)&v308 - 24);
          *(_QWORD *)&v308 -= 24;
          v309 = v310;
          if (v310)
          {
            *(_QWORD *)(*(_QWORD *)&v306 - 16) = v309;
            operator delete(v309);
          }
          v306 = v308;
        }
        while (*(_QWORD *)&v308 != *(_QWORD *)&v7);
        v307 = *(double *)&__p;
      }
      *((float64_t *)&__p + 1) = v7;
      operator delete(*(void **)&v307);
    }
    if (v340)
      operator delete(v340);
    v267 = (uint64_t *)*v267;
    if (v267)
      continue;
    break;
  }
LABEL_6:
  sub_20EDC2BD4(a1, (uint64_t)a2, (double *)a3, a5, &v342, a6, (uint64_t)a7);
  if (!*(_BYTE *)(a1 + 72))
  {
    v80 = *a7;
    v81 = (char *)a7[1];
    if (*a7 == (double *)v81)
      goto LABEL_134;
    do
    {
      v82 = a4[1];
      v84 = a4[4];
      v83 = a4[5];
      v86 = a4[8];
      v85 = a4[9];
      v87 = a4[2];
      v88 = a4[3];
      v89 = a4[6];
      v90 = a4[7];
      v91 = a4[10];
      v92 = a4[11];
      v93 = *a4 * v88 + v84 * v90 + v86 * v92;
      v94 = v82 * v88 + v83 * v90 + v85 * v92;
      v95 = v87 * v88 + v89 * v90 + v91 * v92;
      v96 = v80[1];
      v97 = v80[4];
      v98 = v80[5];
      v99 = v80[8];
      v100 = v80[9];
      v101 = v80[2];
      v102 = v80[3];
      v103 = *a4 * *v80 + v84 * v97 + v86 * v99;
      v105 = v80[10];
      v104 = v80[11];
      v106 = *a4 * v96 + v84 * v98 + v86 * v100;
      v107 = v80[6];
      v108 = v80[7];
      v109 = *a4 * v101 + v86 * v105 + v84 * v107;
      v110 = v82 * *v80 + v83 * v97 + v85 * v99;
      v111 = *a4 * v102 - v93 + v86 * v104;
      v112 = v89 * v97 + v87 * *v80 + v91 * v99;
      *v80 = v103;
      v80[1] = v106;
      v80[2] = v109;
      v80[3] = v111 + v84 * v108;
      v80[4] = v110;
      v80[5] = v82 * v96 + v83 * v98 + v85 * v100;
      v80[7] = v83 * v108 + v85 * v104 + v82 * v102 - v94;
      v80[8] = v112;
      v80[6] = v83 * v107 + v82 * v101 + v85 * v105;
      v80[9] = v89 * v98 + v87 * v96 + v91 * v100;
      v80[10] = v87 * v101 + v91 * v105 + v89 * v107;
      v80[11] = v89 * v108 + v87 * v102 + v91 * v104 - v95;
      *((_BYTE *)v80 + 112) = 0;
      v80 += 40;
    }
    while (v80 != (double *)v81);
    v113 = *a7;
    v114 = a7[1];
    if (*a7 == v114)
      goto LABEL_134;
LABEL_39:
    v118 = (_QWORD *)(a1 + 288);
    while (1)
    {
      v119 = v113[12];
      v120 = *(_QWORD *)(a1 + 280);
      if (v120)
      {
        v121 = (uint8x8_t)vcnt_s8((int8x8_t)v120);
        v121.i16[0] = vaddlv_u8(v121);
        if (v121.u32[0] > 1uLL)
        {
          v7 = v113[12];
          if (v120 <= *(_QWORD *)&v119)
            *(_QWORD *)&v7 = *(_QWORD *)&v119 % v120;
        }
        else
        {
          *(_QWORD *)&v7 = (v120 - 1) & *(_QWORD *)&v119;
        }
        v122 = *(void ***)(*(_QWORD *)(a1 + 272) + 8 * *(_QWORD *)&v7);
        if (v122)
        {
          v123 = (char *)*v122;
          if (*v122)
          {
            if (v121.u32[0] < 2uLL)
            {
              while (1)
              {
                v125 = *((_QWORD *)v123 + 1);
                if (v125 == *(_QWORD *)&v119)
                {
                  if (*((_QWORD *)v123 + 2) == *(_QWORD *)&v119)
                    goto LABEL_133;
                }
                else if ((v125 & (v120 - 1)) != *(_QWORD *)&v7)
                {
                  goto LABEL_60;
                }
                v123 = *(char **)v123;
                if (!v123)
                  goto LABEL_60;
              }
            }
            do
            {
              v124 = *((_QWORD *)v123 + 1);
              if (v124 == *(_QWORD *)&v119)
              {
                if (*((_QWORD *)v123 + 2) == *(_QWORD *)&v119)
                  goto LABEL_133;
              }
              else
              {
                if (v124 >= v120)
                  v124 %= v120;
                if (v124 != *(_QWORD *)&v7)
                  break;
              }
              v123 = *(char **)v123;
            }
            while (v123);
          }
        }
      }
LABEL_60:
      v123 = (char *)operator new(0x78uLL);
      *(_QWORD *)v123 = 0;
      *((double *)v123 + 1) = v119;
      *((double *)v123 + 2) = v113[12];
      *(_OWORD *)(v123 + 104) = 0u;
      *(_OWORD *)(v123 + 88) = 0u;
      *(_OWORD *)(v123 + 72) = 0u;
      *(_OWORD *)(v123 + 56) = 0u;
      *(_OWORD *)(v123 + 40) = 0u;
      *(_OWORD *)(v123 + 24) = 0u;
      v126 = (float)(unint64_t)(*(_QWORD *)(a1 + 296) + 1);
      v127 = *(float *)(a1 + 304);
      if (!v120 || (float)(v127 * (float)v120) < v126)
        break;
      v128 = *(_QWORD *)(a1 + 272);
      v129 = *(_QWORD **)(v128 + 8 * *(_QWORD *)&v7);
      if (v129)
        goto LABEL_63;
LABEL_112:
      *(_QWORD *)v123 = *v118;
      *v118 = v123;
      *(_QWORD *)(v128 + 8 * *(_QWORD *)&v7) = v118;
      if (!*(_QWORD *)v123)
        goto LABEL_132;
      v151 = *(_QWORD *)(*(_QWORD *)v123 + 8);
      if ((v120 & (v120 - 1)) != 0)
      {
        if (v151 >= v120)
          v151 %= v120;
      }
      else
      {
        v151 &= v120 - 1;
      }
      v129 = (_QWORD *)(*(_QWORD *)(a1 + 272) + 8 * v151);
LABEL_131:
      *v129 = v123;
LABEL_132:
      ++*(_QWORD *)(a1 + 296);
LABEL_133:
      v155 = *(_OWORD *)v113;
      *(_OWORD *)(v123 + 40) = *((_OWORD *)v113 + 1);
      *(_OWORD *)(v123 + 24) = v155;
      v156 = *((_OWORD *)v113 + 2);
      v157 = *((_OWORD *)v113 + 3);
      v158 = *((_OWORD *)v113 + 4);
      *(_OWORD *)(v123 + 104) = *((_OWORD *)v113 + 5);
      *(_OWORD *)(v123 + 88) = v158;
      *(_OWORD *)(v123 + 72) = v157;
      *(_OWORD *)(v123 + 56) = v156;
      v113 += 40;
      if (v113 == v114)
        goto LABEL_134;
    }
    v130 = (v120 & (v120 - 1)) != 0;
    if (v120 < 3)
      v130 = 1;
    v131 = v130 | (2 * v120);
    v132 = vcvtps_u32_f32(v126 / v127);
    if (v131 <= v132)
      v133 = v132;
    else
      v133 = v131;
    if (v133 == 1)
    {
      v133 = 2;
    }
    else if ((v133 & (v133 - 1)) != 0)
    {
      v133 = std::__next_prime(v133);
      v120 = *(_QWORD *)(a1 + 280);
    }
    if (v133 <= v120)
    {
      if (v133 >= v120)
        goto LABEL_110;
      v145 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 296) / *(float *)(a1 + 304));
      if (v120 < 3 || (v146 = (uint8x8_t)vcnt_s8((int8x8_t)v120), v146.i16[0] = vaddlv_u8(v146), v146.u32[0] > 1uLL))
      {
        v145 = std::__next_prime(v145);
      }
      else
      {
        v147 = 1 << -(char)__clz(v145 - 1);
        if (v145 >= 2)
          v145 = v147;
      }
      if (v133 <= v145)
        v133 = v145;
      if (v133 >= v120)
      {
        v120 = *(_QWORD *)(a1 + 280);
        v150 = v120 - 1;
        if ((v120 & (v120 - 1)) != 0)
          goto LABEL_123;
        goto LABEL_111;
      }
      if (!v133)
      {
        v149 = *(void **)(a1 + 272);
        *(_QWORD *)(a1 + 272) = 0;
        if (v149)
          operator delete(v149);
        v120 = 0;
        *(_QWORD *)(a1 + 280) = 0;
        v150 = -1;
        goto LABEL_111;
      }
    }
    if (v133 >> 61)
      sub_20E877A38();
    v134 = operator new(8 * v133);
    v135 = *(void **)(a1 + 272);
    *(_QWORD *)(a1 + 272) = v134;
    if (v135)
      operator delete(v135);
    v136 = 0;
    *(_QWORD *)(a1 + 280) = v133;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8 * v136++) = 0;
    while (v133 != v136);
    v137 = (_QWORD *)*v118;
    if (!*v118)
    {
LABEL_122:
      v120 = v133;
      v150 = v133 - 1;
      if ((v133 & (v133 - 1)) != 0)
      {
LABEL_123:
        if (v120 <= *(_QWORD *)&v119)
        {
          *(_QWORD *)&v7 = *(_QWORD *)&v119 % v120;
          v128 = *(_QWORD *)(a1 + 272);
          v129 = *(_QWORD **)(v128 + 8 * (*(_QWORD *)&v119 % v120));
          if (!v129)
            goto LABEL_112;
        }
        else
        {
          v7 = v119;
          v128 = *(_QWORD *)(a1 + 272);
          v129 = *(_QWORD **)(v128 + 8 * *(_QWORD *)&v119);
          if (!v129)
            goto LABEL_112;
        }
        goto LABEL_63;
      }
LABEL_111:
      *(_QWORD *)&v7 = v150 & *(_QWORD *)&v119;
      v128 = *(_QWORD *)(a1 + 272);
      v129 = *(_QWORD **)(v128 + 8 * (v150 & *(_QWORD *)&v119));
      if (!v129)
        goto LABEL_112;
LABEL_63:
      *(_QWORD *)v123 = *v129;
      goto LABEL_131;
    }
    v138 = v137[1];
    v139 = v133 - 1;
    if ((v133 & (v133 - 1)) == 0)
    {
      v140 = v138 & v139;
      *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8 * v140) = v118;
      for (k = (_QWORD *)*v137; *v137; k = (_QWORD *)*v137)
      {
        v142 = k[1] & v139;
        if (v142 == v140)
        {
          v137 = k;
        }
        else
        {
          v143 = *(_QWORD *)(a1 + 272);
          if (*(_QWORD *)(v143 + 8 * v142))
          {
            *v137 = *k;
            v144 = 8 * v142;
            *k = **(_QWORD **)(*(_QWORD *)(a1 + 272) + v144);
            **(_QWORD **)(*(_QWORD *)(a1 + 272) + v144) = k;
          }
          else
          {
            *(_QWORD *)(v143 + 8 * v142) = v137;
            v137 = k;
            v140 = v142;
          }
        }
      }
      goto LABEL_122;
    }
    if (v138 < v133)
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8 * v138) = v118;
      v148 = (_QWORD *)*v137;
      if (*v137)
        goto LABEL_117;
      goto LABEL_109;
    }
    v138 %= v133;
    *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8 * v138) = v118;
    v148 = (_QWORD *)*v137;
    if (!*v137)
    {
LABEL_109:
      v120 = v133;
LABEL_110:
      v150 = v120 - 1;
      if ((v120 & (v120 - 1)) != 0)
        goto LABEL_123;
      goto LABEL_111;
    }
    while (1)
    {
LABEL_117:
      v153 = v148[1];
      if (v153 >= v133)
        v153 %= v133;
      if (v153 == v138)
        goto LABEL_116;
      v154 = *(_QWORD *)(a1 + 272);
      if (*(_QWORD *)(v154 + 8 * v153))
      {
        *v137 = *v148;
        v152 = 8 * v153;
        *v148 = **(_QWORD **)(*(_QWORD *)(a1 + 272) + v152);
        **(_QWORD **)(*(_QWORD *)(a1 + 272) + v152) = v148;
        v148 = v137;
LABEL_116:
        v137 = v148;
        v148 = (_QWORD *)*v148;
        if (!v148)
          goto LABEL_122;
      }
      else
      {
        *(_QWORD *)(v154 + 8 * v153) = v137;
        v137 = v148;
        v148 = (_QWORD *)*v148;
        v138 = v153;
        if (!v148)
          goto LABEL_122;
      }
    }
  }
  v340 = 0;
  v341 = 0uLL;
  v7 = *(double *)a7;
  v16 = a7[1];
  if (*a7 == v16)
  {
    v79 = (void **)a7;
    if (v7 == 0.0)
      goto LABEL_38;
    goto LABEL_31;
  }
  __asm { FMOV            V0.2D, #1.0 }
  v318 = *((_QWORD *)&_Q0 + 1);
  do
  {
    v23 = a4[1];
    v25 = a4[4];
    v24 = a4[5];
    v27 = a4[8];
    v26 = a4[9];
    v28 = a4[2];
    v29 = a4[3];
    v30 = a4[6];
    v31 = a4[7];
    v32 = a4[10];
    v33 = a4[11];
    v34 = *a4 * v29 + v25 * v31 + v27 * v33;
    v35 = v23 * v29 + v24 * v31 + v26 * v33;
    v36 = v28 * v29 + v30 * v31 + v32 * v33;
    v37 = *(double *)(*(_QWORD *)&v7 + 8);
    v38 = *(double *)(*(_QWORD *)&v7 + 32);
    v39 = *(double *)(*(_QWORD *)&v7 + 40);
    v40 = *(double *)(*(_QWORD *)&v7 + 64);
    v41 = *(double *)(*(_QWORD *)&v7 + 72);
    v42 = *a4 * **(double **)&v7 + v25 * v38 + v27 * v40;
    v43 = *a4 * v37 + v25 * v39 + v27 * v41;
    v44 = *(double *)(*(_QWORD *)&v7 + 16);
    v45 = *(double *)(*(_QWORD *)&v7 + 24);
    v47 = *(double *)(*(_QWORD *)&v7 + 80);
    v46 = *(double *)(*(_QWORD *)&v7 + 88);
    v48 = *(double *)(*(_QWORD *)&v7 + 48);
    v49 = *(double *)(*(_QWORD *)&v7 + 56);
    v50 = *a4 * v44 + v27 * v47 + v25 * v48;
    v51 = *a4 * v45 - v34 + v27 * v46 + v25 * v49;
    v52 = v23 * **(double **)&v7 + v24 * v38 + v26 * v40;
    v53 = v23 * v37 + v24 * v39 + v26 * v41;
    v54 = v24 * v48 + v23 * v44 + v26 * v47;
    v55 = v24 * v49 + v26 * v46 + v23 * v45 - v35;
    v56 = v30 * v38 + v28 * **(double **)&v7 + v32 * v40;
    **(double **)&v7 = v42;
    *(double *)(*(_QWORD *)&v7 + 8) = v43;
    *(double *)(*(_QWORD *)&v7 + 16) = v50;
    *(double *)(*(_QWORD *)&v7 + 24) = v51;
    *(double *)(*(_QWORD *)&v7 + 32) = v52;
    *(double *)(*(_QWORD *)&v7 + 40) = v53;
    *(double *)(*(_QWORD *)&v7 + 48) = v54;
    *(double *)(*(_QWORD *)&v7 + 56) = v55;
    *(double *)(*(_QWORD *)&v7 + 64) = v56;
    *(double *)(*(_QWORD *)&v7 + 72) = v30 * v39 + v28 * v37 + v32 * v41;
    *(double *)(*(_QWORD *)&v7 + 80) = v28 * v44 + v32 * v47 + v30 * v48;
    *(double *)(*(_QWORD *)&v7 + 88) = v30 * v49 + v28 * v45 + v32 * v46 - v36;
    v57 = *(_QWORD **)(a1 + 256);
    if (!v57)
LABEL_394:
      sub_20E89FD20("map::at:  key not found");
    v58 = *(_QWORD *)(*(_QWORD *)&v7 + 96);
    while (1)
    {
      while (1)
      {
        v59 = v57[4];
        if (v58 >= v59)
          break;
        v57 = (_QWORD *)*v57;
        if (!v57)
          goto LABEL_394;
      }
      if (v59 >= v58)
        break;
      v57 = (_QWORD *)v57[1];
      if (!v57)
        goto LABEL_394;
    }
    v332 = xmmword_210378748;
    v333 = unk_210378758;
    __p = xmmword_210378728;
    v331 = unk_210378738;
    v336 = xmmword_210378788;
    v337 = unk_210378798;
    v334 = xmmword_210378768;
    v335 = (float64x2_t)unk_210378778;
    *(_QWORD *)&v61 = **(_QWORD **)&v7;
    v60.f64[0] = *(float64_t *)(*(_QWORD *)&v7 + 8);
    v62.f64[0] = *(float64_t *)(*(_QWORD *)&v7 + 16);
    v63.f64[0] = *(float64_t *)(*(_QWORD *)&v7 + 24);
    *((_QWORD *)&v61 + 1) = *(_QWORD *)(*(_QWORD *)&v7 + 32);
    v60.f64[1] = *(float64_t *)(*(_QWORD *)&v7 + 40);
    v62.f64[1] = *(float64_t *)(*(_QWORD *)&v7 + 48);
    v63.f64[1] = *(float64_t *)(*(_QWORD *)&v7 + 56);
    *((_QWORD *)&v64 + 1) = v318;
    *(_QWORD *)&v64 = *(_QWORD *)(*(_QWORD *)&v7 + 88);
    *(_QWORD *)&v13 = *(_QWORD *)(*(_QWORD *)&v7 + 64);
    *(_QWORD *)&v14 = *(_QWORD *)(*(_QWORD *)&v7 + 72);
    v15.f64[0] = *(float64_t *)(*(_QWORD *)&v7 + 80);
    v336 = (__int128)v63;
    v337 = v64;
    v334 = (__int128)v62;
    v335 = v15;
    v332 = (__int128)v60;
    v333 = v14;
    v60.f64[0] = (double)*(unint64_t *)(*(_QWORD *)&v7 + 104);
    __p = v61;
    v331 = v13;
    sub_20EDDEE30(v57 + 5, (float64x2_t *)&__p, 0, (uint64_t)&v319, v60, v62, v63, v15);
    if (v329)
    {
      *(_QWORD *)&v65 = v322;
      v66 = v319.i64[1];
      v67 = v321;
      v68 = v326;
      v69 = v323;
      *(_QWORD *)&v13 = v325.i64[0];
      *(_QWORD *)&v14 = vdupq_laneq_s64(v325, 1).u64[0];
      *((_QWORD *)&v14 + 1) = v320;
      *((_QWORD *)&v65 + 1) = v324;
      v15 = (float64x2_t)vzip1q_s64(v319, v321);
      **(_OWORD **)&v7 = v15;
      *(_QWORD *)(*(_QWORD *)&v7 + 16) = v69.i64[0];
      *((_QWORD *)&v13 + 1) = v66;
      *(_OWORD *)(*(_QWORD *)&v7 + 24) = v13;
      *(int64x2_t *)(*(_QWORD *)&v7 + 40) = vzip2q_s64(v67, v69);
      *(_OWORD *)(*(_QWORD *)&v7 + 56) = v14;
      *(_OWORD *)(*(_QWORD *)&v7 + 72) = v65;
      *(_QWORD *)(*(_QWORD *)&v7 + 88) = v68;
      *(_QWORD *)(*(_QWORD *)&v7 + 104) = v327;
      *(_BYTE *)(*(_QWORD *)&v7 + 112) = v328;
      v70 = v341;
      if ((unint64_t)v341 >= *((_QWORD *)&v341 + 1))
      {
        v22 = sub_20EDC9B4C((char **)&v340, *(uint64_t *)&v7);
      }
      else
      {
        v71 = **(_OWORD **)&v7;
        v72 = *(_OWORD *)(*(_QWORD *)&v7 + 16);
        v73 = *(_OWORD *)(*(_QWORD *)&v7 + 48);
        *(_OWORD *)(v341 + 32) = *(_OWORD *)(*(_QWORD *)&v7 + 32);
        *(_OWORD *)(v70 + 48) = v73;
        *(_OWORD *)v70 = v71;
        *(_OWORD *)(v70 + 16) = v72;
        v74 = *(_OWORD *)(*(_QWORD *)&v7 + 64);
        v75 = *(_OWORD *)(*(_QWORD *)&v7 + 80);
        v76 = *(_OWORD *)(*(_QWORD *)&v7 + 96);
        *(_BYTE *)(v70 + 112) = *(_BYTE *)(*(_QWORD *)&v7 + 112);
        *(_OWORD *)(v70 + 80) = v75;
        *(_OWORD *)(v70 + 96) = v76;
        *(_OWORD *)(v70 + 64) = v74;
        *(_BYTE *)(v70 + 120) = 0;
        *(_BYTE *)(v70 + 312) = 0;
        if (*(_BYTE *)(*(_QWORD *)&v7 + 312))
        {
          *(_QWORD *)(v70 + 120) = 0;
          *(_QWORD *)(v70 + 128) = 0;
          *(_QWORD *)(v70 + 136) = 0;
          *(_OWORD *)(v70 + 120) = *(_OWORD *)(*(_QWORD *)&v7 + 120);
          *(_QWORD *)(v70 + 136) = *(_QWORD *)(*(_QWORD *)&v7 + 136);
          *(_QWORD *)(*(_QWORD *)&v7 + 120) = 0;
          *(_QWORD *)(*(_QWORD *)&v7 + 128) = 0;
          *(_QWORD *)(*(_QWORD *)&v7 + 136) = 0;
          *(_QWORD *)(v70 + 144) = 0;
          *(_QWORD *)(v70 + 152) = 0;
          *(_QWORD *)(v70 + 160) = 0;
          *(_OWORD *)(v70 + 144) = *(_OWORD *)(*(_QWORD *)&v7 + 144);
          *(_QWORD *)(v70 + 160) = *(_QWORD *)(*(_QWORD *)&v7 + 160);
          *(_QWORD *)(*(_QWORD *)&v7 + 144) = 0;
          *(_QWORD *)(*(_QWORD *)&v7 + 152) = 0;
          *(_QWORD *)(*(_QWORD *)&v7 + 160) = 0;
          *(_QWORD *)(v70 + 168) = 0;
          *(_QWORD *)(v70 + 176) = 0;
          *(_QWORD *)(v70 + 184) = 0;
          *(_OWORD *)(v70 + 168) = *(_OWORD *)(*(_QWORD *)&v7 + 168);
          *(_QWORD *)(v70 + 184) = *(_QWORD *)(*(_QWORD *)&v7 + 184);
          *(_QWORD *)(*(_QWORD *)&v7 + 168) = 0;
          *(_QWORD *)(*(_QWORD *)&v7 + 176) = 0;
          *(_QWORD *)(*(_QWORD *)&v7 + 184) = 0;
          *(_QWORD *)(v70 + 192) = 0;
          *(_QWORD *)(v70 + 200) = 0;
          *(_QWORD *)(v70 + 208) = 0;
          *(_OWORD *)(v70 + 192) = *(_OWORD *)(*(_QWORD *)&v7 + 192);
          *(_QWORD *)(v70 + 208) = *(_QWORD *)(*(_QWORD *)&v7 + 208);
          *(_QWORD *)(*(_QWORD *)&v7 + 192) = 0;
          *(_QWORD *)(*(_QWORD *)&v7 + 200) = 0;
          *(_QWORD *)(*(_QWORD *)&v7 + 208) = 0;
          v77 = *(_OWORD *)(*(_QWORD *)&v7 + 216);
          v78 = *(_OWORD *)(*(_QWORD *)&v7 + 232);
          *(_OWORD *)(v70 + 248) = *(_OWORD *)(*(_QWORD *)&v7 + 248);
          *(_OWORD *)(v70 + 232) = v78;
          *(_OWORD *)(v70 + 216) = v77;
          *(_QWORD *)(v70 + 272) = 0;
          *(_QWORD *)(v70 + 280) = 0;
          *(_QWORD *)(v70 + 264) = 0;
          *(_QWORD *)(v70 + 264) = *(_QWORD *)(*(_QWORD *)&v7 + 264);
          *(_QWORD *)(v70 + 272) = *(_QWORD *)(*(_QWORD *)&v7 + 272);
          *(_QWORD *)(v70 + 280) = *(_QWORD *)(*(_QWORD *)&v7 + 280);
          *(_QWORD *)(*(_QWORD *)&v7 + 264) = 0;
          *(_QWORD *)(*(_QWORD *)&v7 + 272) = 0;
          *(_QWORD *)(*(_QWORD *)&v7 + 280) = 0;
          *(_QWORD *)(v70 + 288) = 0;
          *(_QWORD *)(v70 + 296) = 0;
          *(_QWORD *)(v70 + 304) = 0;
          *(_OWORD *)(v70 + 288) = *(_OWORD *)(*(_QWORD *)&v7 + 288);
          *(_QWORD *)(v70 + 304) = *(_QWORD *)(*(_QWORD *)&v7 + 304);
          *(_QWORD *)(*(_QWORD *)&v7 + 288) = 0;
          *(_QWORD *)(*(_QWORD *)&v7 + 296) = 0;
          *(_QWORD *)(*(_QWORD *)&v7 + 304) = 0;
          *(_BYTE *)(v70 + 312) = 1;
        }
        v22 = (char *)(v70 + 320);
      }
      *(_QWORD *)&v341 = v22;
    }
    *(_QWORD *)&v7 += 320;
  }
  while (*(double **)&v7 != v16);
  v79 = (void **)a7;
  v7 = *(double *)a7;
  if (*a7)
  {
LABEL_31:
    v115 = (char *)v79[1];
    v116 = v7;
    if (v115 != *(char **)&v7)
    {
      do
      {
        if (*(v115 - 8))
          sub_20E9DF08C((uint64_t)(v115 - 200));
        v115 -= 320;
      }
      while (v115 != *(char **)&v7);
      v116 = *(double *)v79;
    }
    *((float64_t *)v79 + 1) = v7;
    operator delete(*(void **)&v116);
    *v79 = 0;
    v79[1] = 0;
    v79[2] = 0;
  }
LABEL_38:
  v113 = (double *)v340;
  *v79 = v340;
  v117 = (double *)v341;
  *(_OWORD *)(v79 + 1) = v341;
  v114 = v117;
  if (v113 != v117)
    goto LABEL_39;
LABEL_134:
  v159 = (_QWORD *)v343;
  if ((_QWORD)v343)
  {
    do
    {
      v164 = (_QWORD *)*v159;
      v165 = (void *)v159[3];
      if (v165)
      {
        v159[4] = v165;
        operator delete(v165);
      }
      operator delete(v159);
      v159 = v164;
    }
    while (v164);
  }
  v160 = (void *)v342;
  *(_QWORD *)&v342 = 0;
  if (v160)
    operator delete(v160);
  v161 = (_QWORD *)v346;
  if ((_QWORD)v346)
  {
    do
    {
      v162 = (_QWORD *)*v161;
      operator delete(v161);
      v161 = v162;
    }
    while (v162);
  }
  v163 = (void *)v345;
  *(_QWORD *)&v345 = 0;
  if (v163)
    operator delete(v163);
}

void sub_20EDC54A8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  operator delete(v1);
  sub_20E8C25A8(v2 - 208);
  _Unwind_Resume(a1);
}

void sub_20EDC54C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_20EDC54DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_20EDC54F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E9DEEC4(v1 - 256);
  sub_20E8C25A8(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_20EDC553C()
{
  JUMPOUT(0x20EDC5550);
}

void sub_20EDC5580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60)
{
  uint64_t v60;

  sub_20E9DEE54(&a60);
  sub_20E9DEE54(a17);
  sub_20E9DEEC4(v60 - 256);
  sub_20E8C25A8(v60 - 208);
  _Unwind_Resume(a1);
}

double sub_20EDC55B0(uint64_t a1, unint64_t a2, uint64_t a3, char a4, double result)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 *v16;
  unint64_t v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __int128 *v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  __int128 *v31;
  unint64_t v32;
  unint64_t v33;
  __int128 *v34;
  __int128 *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  __int128 *v50;
  unint64_t v51;
  unint64_t v52;
  __int128 *v53;
  __int128 v54;
  void *v55;
  _QWORD *v56;
  void *v57;
  _QWORD *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  BOOL v63;
  BOOL v64;
  unint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  __int128 *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  __int128 *v78;
  __int128 v79;
  void *v80;
  _QWORD *v81;
  void *v82;
  _QWORD *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  __int128 *v88;
  unint64_t v89;
  unint64_t v90;
  __int128 *v91;
  __int128 *v92;
  __int128 *v93;
  __int128 *v94;
  uint64_t v95;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  void *v110;
  void *v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  void *v119;
  void *v120;
  void *v121;
  int64_t v122;
  int64_t v123;
  int64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  __int128 v134;
  void *v135;
  void *v136;
  void *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  void *v141;
  void *v142;
  void *v143;
  int64_t v144;
  __int128 *v145;
  uint64_t v146;
  int64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  __int128 v155;
  void *v156;
  _QWORD *v157;
  __int128 v158;
  _QWORD *v159;
  void *v160;
  _QWORD *v161;
  void *v162;
  __int128 v163;
  __int128 *v164;
  void *v165;
  _QWORD *v166;
  void *v167;
  __int128 *v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  __int128 v181;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  __int128 v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  __int128 *v207;
  __int128 *v208;
  unint64_t *v209;
  __int128 *v210;
  uint64_t v211;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  __int128 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  __int128 v220;
  uint64_t v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  uint64_t v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  __int128 v239;
  __int128 v240;
  uint64_t v241;
  __int128 v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  __int128 v246;
  unint64_t v247;
  uint64_t v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  __int128 v259;
  uint64_t v260;
  __int128 v261;
  uint64_t v262;

BOOL sub_20EDC6A24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 v27;
  void *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  void *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;

  v4 = 0x4EC4EC4EC4EC4EC5 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_QWORD *)(a2 - 80) > *(_QWORD *)(a1 + 24))
      {
        v6 = (__int128 *)(a2 - 104);
        v7 = (__int128 *)a1;
        goto LABEL_49;
      }
      return result;
    case 3:
      v8 = (__int128 *)(a1 + 104);
      v9 = (__int128 *)(a2 - 104);
      v10 = *(_QWORD *)(a1 + 128);
      v11 = *(_QWORD *)(a2 - 80);
      if (v10 > *(_QWORD *)(a1 + 24))
      {
        if (v11 <= v10)
        {
          sub_20EDC6E40((__int128 *)a1, (__int128 *)(a1 + 104));
          if (*(_QWORD *)(a2 - 80) <= *(_QWORD *)(a1 + 128))
            return 1;
          v7 = (__int128 *)(a1 + 104);
        }
        else
        {
          v7 = (__int128 *)a1;
        }
        v6 = (__int128 *)(a2 - 104);
        goto LABEL_49;
      }
      if (v11 > v10)
        goto LABEL_18;
      return result;
    case 4:
      sub_20EDC6FA8(a1, a1 + 104, a1 + 208, a2 - 104);
      return 1;
    case 5:
      v8 = (__int128 *)(a1 + 104);
      v9 = (__int128 *)(a1 + 208);
      sub_20EDC6FA8(a1, a1 + 104, a1 + 208, a1 + 312);
      if (*(_QWORD *)(a2 - 80) > *(_QWORD *)(a1 + 336))
      {
        sub_20EDC6E40((__int128 *)(a1 + 312), (__int128 *)(a2 - 104));
        if (*(_QWORD *)(a1 + 336) > *(_QWORD *)(a1 + 232))
        {
          sub_20EDC6E40((__int128 *)(a1 + 208), (__int128 *)(a1 + 312));
          if (*(_QWORD *)(a1 + 232) > *(_QWORD *)(a1 + 128))
          {
LABEL_18:
            sub_20EDC6E40(v8, v9);
            if (*(_QWORD *)(a1 + 128) > *(_QWORD *)(a1 + 24))
            {
              v7 = (__int128 *)a1;
              v6 = v8;
LABEL_49:
              sub_20EDC6E40(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      v12 = a1 + 208;
      v13 = *(_QWORD *)(a1 + 128);
      v14 = *(_QWORD *)(a1 + 232);
      if (v13 > *(_QWORD *)(a1 + 24))
      {
        v15 = (__int128 *)a1;
        if (v14 <= v13)
        {
          sub_20EDC6E40((__int128 *)a1, (__int128 *)(a1 + 104));
          if (*(_QWORD *)(a1 + 232) <= *(_QWORD *)(a1 + 128))
            goto LABEL_24;
          v15 = (__int128 *)(a1 + 104);
        }
        v16 = (__int128 *)(a1 + 208);
        goto LABEL_23;
      }
      if (v14 > v13)
      {
        sub_20EDC6E40((__int128 *)(a1 + 104), (__int128 *)(a1 + 208));
        if (*(_QWORD *)(a1 + 128) > *(_QWORD *)(a1 + 24))
        {
          v15 = (__int128 *)a1;
          v16 = (__int128 *)(a1 + 104);
LABEL_23:
          sub_20EDC6E40(v15, v16);
        }
      }
LABEL_24:
      v17 = a1 + 312;
      if (a1 + 312 == a2)
        return 1;
      v18 = 0;
      v19 = 0;
      while (1)
      {
        v20 = *(_QWORD *)(v17 + 24);
        if (v20 > *(_QWORD *)(v12 + 24))
        {
          v45 = *(_OWORD *)v17;
          v46 = *(_QWORD *)(v17 + 16);
          v21 = *(_QWORD *)(v17 + 32);
          v22 = *(_OWORD *)(v17 + 40);
          *(_QWORD *)(v17 + 32) = 0;
          *(_QWORD *)(v17 + 40) = 0;
          v42 = *(_QWORD *)(v17 + 56);
          v40 = v22;
          v41 = *(_OWORD *)(v17 + 64);
          *(_QWORD *)(v17 + 48) = 0;
          *(_QWORD *)(v17 + 56) = 0;
          *(_QWORD *)(v17 + 64) = 0;
          *(_QWORD *)(v17 + 72) = 0;
          v44 = *(_QWORD *)(v17 + 80);
          v43 = *(_OWORD *)(v17 + 88);
          *(_QWORD *)(v17 + 88) = 0;
          *(_QWORD *)(v17 + 96) = 0;
          v23 = v18;
          *(_QWORD *)(v17 + 80) = 0;
          while (1)
          {
            v24 = v23;
            v25 = a1 + v23;
            v26 = (_OWORD *)(a1 + v23 + 312);
            v27 = *(_OWORD *)(v25 + 224);
            *v26 = *(_OWORD *)(v25 + 208);
            v26[1] = v27;
            v28 = *(void **)(v25 + 344);
            if (v28)
            {
              *(_QWORD *)(v25 + 352) = v28;
              operator delete(v28);
              *(_QWORD *)(v25 + 352) = 0;
              *(_QWORD *)(v25 + 360) = 0;
            }
            *(_OWORD *)(v25 + 344) = *(_OWORD *)(v25 + 240);
            *(_QWORD *)(v25 + 360) = *(_QWORD *)(v25 + 256);
            *(_QWORD *)(v25 + 240) = 0;
            *(_QWORD *)(v25 + 248) = 0;
            *(_QWORD *)(v25 + 256) = 0;
            v29 = *(void **)(v25 + 368);
            if (v29)
            {
              v30 = a1 + v24;
              *(_QWORD *)(a1 + v24 + 376) = v29;
              operator delete(v29);
              *(_QWORD *)(v30 + 376) = 0;
              *(_QWORD *)(v30 + 384) = 0;
            }
            v31 = (_QWORD *)(v25 + 264);
            *(_OWORD *)(v25 + 368) = *(_OWORD *)(v25 + 264);
            v32 = (_QWORD *)(a1 + v24);
            *(_QWORD *)(a1 + v24 + 384) = *(_QWORD *)(a1 + v24 + 280);
            *v31 = 0;
            v31[1] = 0;
            v31[2] = 0;
            v33 = *(void **)(a1 + v24 + 392);
            if (v33)
            {
              operator delete(v33);
              v32[50] = 0;
              v32[51] = 0;
            }
            v34 = v32[37];
            v32[49] = v32[36];
            v32[50] = v34;
            v32[51] = v32[38];
            v32[36] = 0;
            v32[37] = 0;
            v32[38] = 0;
            if (v24 == -208)
              break;
            v23 = v24 - 104;
            if (v20 <= *(_QWORD *)(a1 + v24 + 128))
            {
              v35 = a1 + v23 + 312;
              goto LABEL_40;
            }
          }
          v35 = a1;
LABEL_40:
          *(_OWORD *)v35 = v45;
          *(_QWORD *)(v35 + 16) = v46;
          *(_QWORD *)(v35 + 24) = v20;
          v36 = (_QWORD *)(a1 + v24);
          v37 = *(void **)(a1 + v24 + 240);
          if (v37)
          {
            *(_QWORD *)(v35 + 40) = v37;
            operator delete(v37);
          }
          v36[30] = v21;
          *(_OWORD *)(v35 + 40) = v40;
          v38 = (void *)v36[33];
          if (v38)
          {
            *(_QWORD *)(v35 + 64) = v38;
            operator delete(v38);
          }
          v36[33] = v42;
          *(_OWORD *)(v35 + 64) = v41;
          v39 = (void *)v36[36];
          if (v39)
            operator delete(v39);
          v36[36] = v44;
          *(_OWORD *)(v35 + 88) = v43;
          if (++v19 == 8)
            return v17 + 104 == a2;
        }
        v12 = v17;
        v18 += 104;
        v17 += 104;
        if (v17 == a2)
          return 1;
      }
  }
}

__n128 sub_20EDC6E40(__int128 *a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  __n128 result;
  __int128 v18;
  __int128 v19;
  __n128 v20;
  __int128 v21;
  __int128 v22;

  v21 = *a1;
  v22 = a1[1];
  v4 = a1[2];
  v5 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 4) = 0;
  *((_QWORD *)a1 + 5) = 0;
  *((_QWORD *)a1 + 6) = 0;
  v6 = (_QWORD *)a1 + 7;
  v18 = v4;
  v19 = *(__int128 *)((char *)a1 + 56);
  v7 = *((_QWORD *)a1 + 9);
  *((_QWORD *)a1 + 7) = 0;
  v9 = a1 + 5;
  v8 = *((_QWORD *)a1 + 10);
  *((_QWORD *)a1 + 8) = 0;
  *((_QWORD *)a1 + 9) = 0;
  v20 = *(__n128 *)((char *)a1 + 88);
  *((_QWORD *)a1 + 10) = 0;
  *((_QWORD *)a1 + 11) = 0;
  *((_QWORD *)a1 + 12) = 0;
  v10 = a2[1];
  *a1 = *a2;
  a1[1] = v10;
  a1[2] = a2[2];
  *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  v11 = (_QWORD *)a2 + 7;
  v12 = (void *)*((_QWORD *)a1 + 7);
  if (v12)
  {
    *((_QWORD *)a1 + 8) = v12;
    operator delete(v12);
    *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  *(__int128 *)((char *)a1 + 56) = *(__int128 *)((char *)a2 + 56);
  *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
  *v11 = 0;
  v11[1] = 0;
  v11[2] = 0;
  v13 = (void *)*((_QWORD *)a1 + 10);
  if (v13)
  {
    operator delete(v13);
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
  }
  *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a1 + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  *a2 = v21;
  a2[1] = v22;
  v14 = (void *)*((_QWORD *)a2 + 4);
  if (v14)
  {
    *((_QWORD *)a2 + 5) = v14;
    operator delete(v14);
  }
  a2[2] = v18;
  *((_QWORD *)a2 + 6) = v5;
  v15 = (void *)*((_QWORD *)a2 + 7);
  if (v15)
  {
    *((_QWORD *)a2 + 8) = v15;
    operator delete(v15);
  }
  *(__int128 *)((char *)a2 + 56) = v19;
  *((_QWORD *)a2 + 9) = v7;
  v16 = (void *)*((_QWORD *)a2 + 10);
  if (v16)
    operator delete(v16);
  *((_QWORD *)a2 + 10) = v8;
  result = v20;
  *(__int128 *)((char *)a2 + 88) = (__int128)v20;
  return result;
}

double sub_20EDC6FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  double result;
  __int128 *v11;

  v7 = a1;
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a3 + 24);
  if (v8 <= *(_QWORD *)(a1 + 24))
  {
    if (v9 > v8)
    {
      *(_QWORD *)&result = sub_20EDC6E40((__int128 *)a2, (__int128 *)a3).n128_u64[0];
      if (*(_QWORD *)(a2 + 24) > *(_QWORD *)(v7 + 24))
      {
        a1 = v7;
        v11 = (__int128 *)a2;
        goto LABEL_9;
      }
    }
  }
  else
  {
    if (v9 > v8)
    {
LABEL_5:
      v11 = (__int128 *)a3;
LABEL_9:
      *(_QWORD *)&result = sub_20EDC6E40((__int128 *)a1, v11).n128_u64[0];
      goto LABEL_10;
    }
    *(_QWORD *)&result = sub_20EDC6E40((__int128 *)a1, (__int128 *)a2).n128_u64[0];
    if (*(_QWORD *)(a3 + 24) > *(_QWORD *)(a2 + 24))
    {
      a1 = a2;
      goto LABEL_5;
    }
  }
LABEL_10:
  if (*(_QWORD *)(a4 + 24) > *(_QWORD *)(a3 + 24))
  {
    *(_QWORD *)&result = sub_20EDC6E40((__int128 *)a3, (__int128 *)a4).n128_u64[0];
    if (*(_QWORD *)(a3 + 24) > *(_QWORD *)(a2 + 24))
    {
      *(_QWORD *)&result = sub_20EDC6E40((__int128 *)a2, (__int128 *)a3).n128_u64[0];
      if (*(_QWORD *)(a2 + 24) > *(_QWORD *)(v7 + 24))
        *(_QWORD *)&result = sub_20EDC6E40((__int128 *)v7, (__int128 *)a2).n128_u64[0];
    }
  }
  return result;
}

double sub_20EDC70AC(char **a1, _BYTE *a2, char *a3, char *a4, uint64_t a5)
{
  uint64_t v5;
  char *v7;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  _OWORD *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  size_t v57;
  uint64_t v58;
  uint64_t *v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  __int128 *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  __int128 *v75;
  _OWORD *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;

  v5 = a5 - 1;
  if (a5 < 1)
    return *(double *)&v37;
  v7 = a3;
  v9 = a1;
  v10 = (unint64_t)*a1;
  v11 = (unint64_t)a1[1];
  v12 = a2 - *a1;
  v13 = v12 >> 3;
  v14 = &(*a1)[v12 & 0xFFFFFFFFFFFFFFF8];
  v15 = a1[2];
  if (a5 > (uint64_t)&v15[-v11] >> 3)
  {
    v16 = a5 + ((uint64_t)(v11 - v10) >> 3);
    if (v16 >> 61)
      sub_20E867F44();
    v17 = (uint64_t)&v15[-v10];
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        sub_20E877A38();
      v19 = a2 - *a1;
      v20 = v18;
      v21 = operator new(8 * v18);
      v18 = v20;
      v12 = v19;
      v9 = a1;
    }
    else
    {
      v21 = 0;
    }
    v28 = &v21[8 * v13];
    v29 = &v28[8 * a5];
    v30 = v28;
    v31 = v7;
    if ((v5 & 0x1FFFFFFFFFFFFFFFuLL) < 7)
      goto LABEL_68;
    v30 = &v21[8 * v13];
    v31 = v7;
    if ((unint64_t)(&v21[v12 & 0xFFFFFFFFFFFFFFF8] - v7) < 0x20)
      goto LABEL_68;
    v32 = (v5 & 0x1FFFFFFFFFFFFFFFLL) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v30 = &v28[v33];
    v31 = &v7[v33];
    v34 = (__int128 *)(v7 + 16);
    v35 = &v21[8 * v13 + 16];
    v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *(v34 - 1);
      v38 = *v34;
      *(v35 - 1) = v37;
      *v35 = v38;
      v34 += 2;
      v35 += 2;
      v36 -= 4;
    }
    while (v36);
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_68:
      do
      {
        v39 = *(_QWORD *)v31;
        v31 += 8;
        *(_QWORD *)&v37 = v39;
        *(_QWORD *)v30 = v39;
        v30 += 8;
      }
      while (v30 != v29);
    }
    if ((_BYTE *)v10 == a2)
      goto LABEL_32;
    if ((unint64_t)(v12 - 8) >= 0x68)
    {
      v40 = v14;
      if ((v12 & 0xFFFFFFFFFFFFFFF8) + v10 - (unint64_t)&v21[v12 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
      {
        v41 = ((unint64_t)(v12 - 8) >> 3) + 1;
        v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
        v40 = &v14[-v42];
        v28 -= v42;
        v43 = 8 * v13 - 16;
        v44 = &v21[v43];
        v45 = (__int128 *)(v10 + v43);
        v46 = v41 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v37 = *v45;
          *(v44 - 1) = *(v45 - 1);
          *v44 = v37;
          v44 -= 2;
          v45 -= 2;
          v46 -= 4;
        }
        while (v46);
        if (v41 == (v41 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_32;
      }
    }
    else
    {
      v40 = v14;
    }
    do
    {
      v47 = *((_QWORD *)v40 - 1);
      v40 -= 8;
      *(_QWORD *)&v37 = v47;
      *((_QWORD *)v28 - 1) = v47;
      v28 -= 8;
    }
    while (v40 != (char *)v10);
LABEL_32:
    v48 = &v21[8 * v18];
    if ((char *)v11 != v14)
      memmove(v29, v14, v11 - (_QWORD)v14);
    *v9 = v28;
    v9[1] = &v29[v11 - (_QWORD)v14];
    v9[2] = v48;
    if (v10)
      operator delete((void *)v10);
    return *(double *)&v37;
  }
  v22 = v11 - (_QWORD)v14;
  v23 = (uint64_t)(v11 - (_QWORD)v14) >> 3;
  if (v23 >= a5)
  {
    v24 = &a3[8 * a5];
    v27 = a1[1];
    goto LABEL_43;
  }
  v24 = &a3[8 * v23];
  if (v24 == a4)
  {
    v27 = a1[1];
    goto LABEL_42;
  }
  v25 = a4 - a3 - v22 - 8;
  if (v25 < 0x38)
  {
    v26 = &a3[8 * v23];
    v27 = a1[1];
    do
    {
LABEL_41:
      v55 = *(_QWORD *)v26;
      v26 += 8;
      *(_QWORD *)&v37 = v55;
      *(_QWORD *)v27 = v55;
      v27 += 8;
    }
    while (v26 != a4);
    goto LABEL_42;
  }
  v26 = &a3[8 * v23];
  v27 = a1[1];
  if ((unint64_t)(v14 - a3) < 0x20)
    goto LABEL_41;
  v49 = (v25 >> 3) + 1;
  v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
  v26 = &v24[v50];
  v27 = (char *)(v11 + v50);
  v51 = (_OWORD *)(v11 + 16);
  v52 = (__int128 *)&a3[8 * v23 + 16];
  v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v37 = *(v52 - 1);
    v54 = *v52;
    *(v51 - 1) = v37;
    *v51 = v54;
    v51 += 2;
    v52 += 2;
    v53 -= 4;
  }
  while (v53);
  if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_41;
LABEL_42:
  a1[1] = v27;
  if (v22 < 1)
    return *(double *)&v37;
LABEL_43:
  v56 = &v14[8 * a5];
  v57 = v27 - v56;
  v58 = (v27 - v56) >> 3;
  v59 = (uint64_t *)&v27[-8 * a5];
  v60 = v27;
  if ((unint64_t)v59 < v11)
  {
    v61 = (v12 & 0xFFFFFFFFFFFFFFF8) + v57;
    v62 = v61 + v10 + 8;
    if (v11 > v62)
      v62 = v11;
    v63 = v62 + ~v10 - v61;
    if (v63 >= 0x58)
    {
      v60 = v27;
      if ((unint64_t)&v56[-(v12 & 0xFFFFFFFFFFFFFFF8) - v10] >= 0x20)
      {
        v64 = (v63 >> 3) + 1;
        v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
        v59 = (uint64_t *)((char *)v59 + v65);
        v60 = &v27[v65];
        v66 = v27 + 16;
        v67 = (__int128 *)(8 * v58 + 8 * v13 + v10 + 16);
        v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v37 = *(v67 - 1);
          v69 = *v67;
          *(v66 - 1) = v37;
          *v66 = v69;
          v66 += 2;
          v67 += 2;
          v68 -= 4;
        }
        while (v68);
        if (v64 == (v64 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_53;
      }
    }
    else
    {
      v60 = v27;
    }
    do
    {
      v70 = *v59++;
      *(_QWORD *)&v37 = v70;
      *(_QWORD *)v60 = v70;
      v60 += 8;
    }
    while ((unint64_t)v59 < v11);
  }
LABEL_53:
  a1[1] = v60;
  if (v27 != v56)
    memmove(&v27[-8 * v58], v14, v57);
  if (v24 != v7)
  {
    v71 = v24 - v7 - 8;
    if (v71 < 0x18)
      goto LABEL_69;
    if ((unint64_t)(v14 - v7) < 0x20)
      goto LABEL_69;
    v72 = (v71 >> 3) + 1;
    v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
    v14 += v73;
    v74 = &v7[v73];
    v75 = (__int128 *)(v7 + 16);
    v76 = (_OWORD *)(v10 + 8 * v13 + 16);
    v77 = v72 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *(v75 - 1);
      v78 = *v75;
      *(v76 - 1) = v37;
      *v76 = v78;
      v75 += 2;
      v76 += 2;
      v77 -= 4;
    }
    while (v77);
    v7 = v74;
    if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_69:
      do
      {
        v79 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)&v37 = v79;
        *(_QWORD *)v14 = v79;
        v14 += 8;
      }
      while (v7 != v24);
    }
  }
  return *(double *)&v37;
}

uint64_t sub_20EDC7538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, double a7, double a8)
{
  uint64_t v12;
  const void *v13;
  int64_t v14;
  char *v15;
  char *v16;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = 0x3F747AE147AE147BLL;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v13 = *(const void **)a5;
  v12 = *(_QWORD *)(a5 + 8);
  v14 = v12 - *(_QWORD *)a5;
  if (v12 != *(_QWORD *)a5)
  {
    if (v14 < 0)
      sub_20E867F44();
    v15 = (char *)operator new(v12 - *(_QWORD *)a5);
    *(_QWORD *)(a1 + 32) = v15;
    *(_QWORD *)(a1 + 40) = v15;
    v16 = &v15[8 * (v14 >> 3)];
    *(_QWORD *)(a1 + 48) = v16;
    memcpy(v15, v13, v14);
    *(_QWORD *)(a1 + 40) = v16;
  }
  *(_BYTE *)(a1 + 56) = a6;
  *(_OWORD *)(a1 + 64) = xmmword_210378560;
  *(_OWORD *)(a1 + 80) = xmmword_210378570;
  *(int64x2_t *)(a1 + 96) = vdupq_n_s64(0x3EE4F8B588E368F1uLL);
  *(_QWORD *)(a1 + 112) = 0x3F1A36E2EB1C432DLL;
  if (a8 <= 0.00000001
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/P3PPreemptiveRansac.h", 75, (uint64_t)"average_focal_length_in_pixels > 1e-8", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(double *)(a1 + 24) = a7 / a8 * 0.5;
  return a1;
}

void sub_20EDC7684(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void **sub_20EDC76A4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20EDC7714(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (_QWORD *)v2[7];
      if (v6)
      {
        do
        {
          v7 = (_QWORD *)*v6;
          operator delete(v6);
          v6 = v7;
        }
        while (v7);
      }
      v8 = (void *)v2[5];
      v2[5] = 0;
      if (v8)
        operator delete(v8);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_20EDC7794(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[7];
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = (void *)v2[5];
      v2[5] = 0;
      if (v5)
        operator delete(v5);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20EDC7800(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  void **v16;
  char *v17;
  char *v18;
  void *v19;
  void *v20;
  void *v21;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v5);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v6 = (void **)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(void **)(a1 + 48);
    if (v8 != v7)
    {
      v10 = *(_QWORD *)(a1 + 56);
      do
      {
        v12 = *(void **)(v10 - 24);
        v10 -= 24;
        v11 = v12;
        if (v12)
        {
          *(_QWORD *)(v8 - 16) = v11;
          operator delete(v11);
        }
        v8 = v10;
      }
      while (v10 != v7);
      v9 = *v6;
    }
    *(_QWORD *)(a1 + 56) = v7;
    operator delete(v9);
    *v6 = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v13 = *(void **)(a1 + 72);
  if (v13)
  {
    *(_QWORD *)(a1 + 80) = v13;
    operator delete(v13);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v14 = *(_OWORD *)(a2 + 96);
  v15 = *(_OWORD *)(a2 + 128);
  v16 = (void **)(a1 + 144);
  v17 = *(char **)(a1 + 144);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v15;
  *(_OWORD *)(a1 + 96) = v14;
  if (v17)
  {
    v18 = *(char **)(a1 + 152);
    v19 = v17;
    if (v18 != v17)
    {
      do
      {
        v20 = (void *)*((_QWORD *)v18 - 3);
        if (v20)
        {
          *((_QWORD *)v18 - 2) = v20;
          operator delete(v20);
        }
        v18 -= 32;
      }
      while (v18 != v17);
      v19 = *v16;
    }
    *(_QWORD *)(a1 + 152) = v17;
    operator delete(v19);
    *v16 = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  v21 = *(void **)(a1 + 168);
  if (v21)
  {
    *(_QWORD *)(a1 + 176) = v21;
    operator delete(v21);
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
  }
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  return a1;
}

unint64_t *sub_20EDC79FC(unint64_t *result, __int128 *a2, unint64_t **a3, unint64_t a4)
{
  _QWORD *v5;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16[2];

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x666666666666667)
      sub_20E867F44();
    result = (unint64_t *)operator new(40 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[5 * a4];
    v15 = *a2;
    v16[0] = *((_QWORD *)a2 + 2);
    v9 = *a3;
    v10 = (unint64_t *)v15;
    if ((unint64_t *)v15 != *a3)
    {
      result = v16;
      v11 = v16[0];
      v12 = v8;
      do
      {
        v13 = *v10;
        if (v11 <= *v10)
          sub_21023D290(v16, v13);
        v14 = *((_QWORD *)&v15 + 1) + 40 * v13;
        *v12 = *(_QWORD *)v14;
        v12[1] = *(_QWORD *)(v14 + 8);
        *((_OWORD *)v12 + 1) = *(_OWORD *)(v14 + 16);
        *((_DWORD *)v12 + 8) = *(_DWORD *)(v14 + 32);
        ++v10;
        v12 += 5;
      }
      while (v10 != v9);
      v8 = v12;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20EDC7B08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EDC7B30(_QWORD *result, __int128 *a2, unint64_t **a3, unint64_t a4)
{
  _QWORD *v5;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;

  if (a4)
  {
    v5 = result;
    if (a4 >> 58)
      sub_20ED343A8();
    result = operator new(a4 << 6);
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[8 * a4];
    v18 = *a2;
    v19 = *((_QWORD *)a2 + 2);
    v8 = *a3;
    if ((unint64_t *)v18 != *a3)
    {
      v9 = v19;
      v10 = *(_QWORD *)v18;
      if (v19 <= *(_QWORD *)v18)
LABEL_8:
        sub_21023D290(&v19, v10);
      v11 = (char *)(result + 8);
      v12 = (unint64_t *)(v18 + 8);
      while (1)
      {
        v13 = (__int128 *)(*((_QWORD *)&v18 + 1) + (v10 << 6));
        v14 = *v13;
        v15 = v13[1];
        v16 = v13[3];
        *((_OWORD *)v11 - 2) = v13[2];
        *((_OWORD *)v11 - 1) = v16;
        *((_OWORD *)v11 - 4) = v14;
        *((_OWORD *)v11 - 3) = v15;
        if (v12 == v8)
          break;
        v17 = *v12++;
        v10 = v17;
        v11 += 64;
        if (v9 <= v17)
          goto LABEL_8;
      }
      result = v11;
    }
    v5[1] = result;
  }
  return result;
}

void sub_20EDC7C28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EDC7C50(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60)
      goto LABEL_22;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 60)
LABEL_22:
      sub_20E8E275C();
    v13 = 2 * v12;
    result = operator new(16 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 4;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[16 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

_QWORD *sub_20EDC7D94(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (v10 < 0)
          sub_20E8E275C();
        v11 = (char *)operator new(v8 - *(_QWORD *)v6);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[16 * (v10 >> 4)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_20EDC7E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EDC7E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EDC7E94(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v6;
  char *v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = *v6;
      a4[1] = 0;
      a4[2] = 0;
      a4[3] = 0;
      v9 = (_BYTE *)v6[1];
      v8 = (_BYTE *)v6[2];
      v10 = v8 - v9;
      if (v8 != v9)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v10 >> 3) >= 0xAAAAAAAAAAAAAABLL)
          sub_20E867F44();
        v11 = (char *)operator new(v10);
        a4[1] = v11;
        a4[2] = v11;
        v7 = &v11[8 * (v10 >> 3)];
        a4[3] = v7;
        memcpy(v11, v9, v10);
        a4[2] = v7;
      }
      a4 += 4;
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_20EDC7F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)(v9 + 8);
  if (v11)
  {
    *(_QWORD *)(v9 + 16) = v11;
    operator delete(v11);
  }
  sub_20EDC7FB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EDC7FB4(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(_QWORD *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 32;
    }
  }
  return a1;
}

_QWORD *sub_20EDC8014(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_23;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_23:
      sub_20E867F44();
    v13 = 3 * v12;
    result = operator new(24 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 3) >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

_QWORD *sub_20EDC8188(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_23;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_23:
      sub_20E867F44();
    v13 = 3 * v12;
    result = operator new(24 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 3) >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

uint64_t sub_20EDC8300(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _BYTE *v19;
  _BYTE *v20;
  int64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  _BYTE *v31;
  _BYTE *v32;
  int64_t v33;
  char *v34;
  char *v35;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_20E8E275C();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = &v7[16 * (v6 >> 4)];
    *(_QWORD *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 8) = v8;
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      sub_20E867F44();
    v12 = (char *)operator new(v9 - v10);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v12;
    v13 = &v12[8 * (v11 >> 3)];
    *(_QWORD *)(a1 + 40) = v13;
    memcpy(v12, v10, v11);
    *(_QWORD *)(a1 + 32) = v13;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v14 = *(_QWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a2 + 56);
  v16 = v15 - v14;
  if (v15 != v14)
  {
    v17 = 0xAAAAAAAAAAAAAAABLL * (v16 >> 3);
    if (v17 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v18 = operator new(v16);
    *(_QWORD *)(a1 + 48) = v18;
    *(_QWORD *)(a1 + 56) = v18;
    *(_QWORD *)(a1 + 64) = &v18[3 * v17];
    *(_QWORD *)(a1 + 56) = sub_20EDC7D94(a1 + 64, v14, v15, v18);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v20 = *(_BYTE **)(a2 + 72);
  v19 = *(_BYTE **)(a2 + 80);
  v21 = v19 - v20;
  if (v19 != v20)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v21 >> 3) > 0xAAAAAAAAAAAAAAALL)
      sub_20E9DEF2C();
    v22 = (char *)operator new(v21);
    *(_QWORD *)(a1 + 72) = v22;
    *(_QWORD *)(a1 + 80) = v22;
    v23 = &v22[8 * (v21 >> 3)];
    *(_QWORD *)(a1 + 88) = v23;
    memcpy(v22, v20, v21);
    *(_QWORD *)(a1 + 80) = v23;
  }
  v24 = *(_OWORD *)(a2 + 96);
  v25 = *(_OWORD *)(a2 + 112);
  v26 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 112) = v25;
  *(_OWORD *)(a1 + 128) = v26;
  *(_OWORD *)(a1 + 96) = v24;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v27 = *(char **)(a2 + 144);
  v28 = *(char **)(a2 + 152);
  v29 = v28 - v27;
  if (v28 != v27)
  {
    if (v29 < 0)
      sub_20E867F44();
    v30 = operator new(v28 - v27);
    *(_QWORD *)(a1 + 144) = v30;
    *(_QWORD *)(a1 + 152) = v30;
    *(_QWORD *)(a1 + 160) = &v30[4 * (v29 >> 5)];
    *(_QWORD *)(a1 + 152) = sub_20EDC7E94(a1 + 160, v27, v28, v30);
  }
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v32 = *(_BYTE **)(a2 + 168);
  v31 = *(_BYTE **)(a2 + 176);
  v33 = v31 - v32;
  if (v31 != v32)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v33 >> 3) > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v34 = (char *)operator new(v33);
    *(_QWORD *)(a1 + 168) = v34;
    *(_QWORD *)(a1 + 176) = v34;
    v35 = &v34[8 * (v33 >> 3)];
    *(_QWORD *)(a1 + 184) = v35;
    memcpy(v34, v32, v33);
    *(_QWORD *)(a1 + 176) = v35;
  }
  return a1;
}

void sub_20EDC85A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  uint64_t v14;
  char *v16;
  char *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  *(_QWORD *)(v10 + 152) = v14;
  v16 = (char *)*v13;
  if (*v13)
  {
    v17 = *(char **)(v10 + 152);
    v18 = *v13;
    if (v17 != v16)
    {
      do
      {
        v19 = (void *)*((_QWORD *)v17 - 3);
        if (v19)
        {
          *((_QWORD *)v17 - 2) = v19;
          operator delete(v19);
        }
        v17 -= 32;
      }
      while (v17 != v16);
      v18 = *v13;
    }
    *(_QWORD *)(v10 + 152) = v16;
    operator delete(v18);
  }
  v20 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 80) = v20;
    operator delete(v20);
  }
  sub_20E9DD680(v11);
  v21 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v10 + 32) = v21;
    operator delete(v21);
  }
  v22 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(a1);
}

char *sub_20EDC86E4(void **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  __int128 v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  void *v24;
  void *v25;
  void *v26;

  v2 = 0x4EC4EC4EC4EC4EC5 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x276276276276276)
    sub_20E867F44();
  if (0x9D89D89D89D89D8ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x9D89D89D89D89D8ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x13B13B13B13B13BLL)
    v5 = 0x276276276276276;
  else
    v5 = v3;
  if (v5 > 0x276276276276276)
    sub_20E877A38();
  v7 = 104 * v5;
  v8 = (char *)operator new(104 * v5);
  v9 = *(_OWORD *)(a2 + 16);
  v10 = &v8[104 * v2];
  v11 = &v8[v7];
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v9;
  *((_OWORD *)v10 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v10 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(v10 + 56) = *(_OWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *((_QWORD *)v10 + 9) = v12;
  *((_QWORD *)v10 + 10) = v13;
  *(_OWORD *)(v10 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v14 = v10 + 104;
  v15 = (char *)*a1;
  v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v10;
    a1[1] = v14;
    a1[2] = v11;
  }
  else
  {
    v17 = 0;
    do
    {
      v18 = &v16[v17];
      v19 = &v10[v17];
      v20 = *(_OWORD *)&v16[v17 - 104];
      *(_OWORD *)(v19 - 88) = *(_OWORD *)&v16[v17 - 88];
      *(_OWORD *)(v19 - 104) = v20;
      *(_OWORD *)(v19 - 72) = *(_OWORD *)&v16[v17 - 72];
      *((_QWORD *)v19 - 7) = *(_QWORD *)&v16[v17 - 56];
      *((_QWORD *)v18 - 9) = 0;
      *((_QWORD *)v18 - 8) = 0;
      v21 = *(_OWORD *)&v16[v17 - 48];
      *((_QWORD *)v18 - 7) = 0;
      *((_OWORD *)v19 - 3) = v21;
      *((_QWORD *)v19 - 4) = *(_QWORD *)&v16[v17 - 32];
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      v22 = *(_QWORD *)&v16[v17 - 16];
      *((_QWORD *)v19 - 3) = *(_QWORD *)&v16[v17 - 24];
      *((_QWORD *)v19 - 2) = v22;
      *((_QWORD *)v19 - 1) = *(_QWORD *)&v16[v17 - 8];
      *((_QWORD *)v18 - 3) = 0;
      *((_QWORD *)v18 - 2) = 0;
      *((_QWORD *)v18 - 1) = 0;
      v17 -= 104;
    }
    while (&v16[v17] != v15);
    v16 = (char *)*a1;
    v23 = (char *)a1[1];
    *a1 = &v10[v17];
    a1[1] = v14;
    a1[2] = v11;
    while (v23 != v16)
    {
      v24 = (void *)*((_QWORD *)v23 - 3);
      if (v24)
        operator delete(v24);
      v25 = (void *)*((_QWORD *)v23 - 6);
      if (v25)
      {
        *((_QWORD *)v23 - 5) = v25;
        operator delete(v25);
      }
      v26 = (void *)*((_QWORD *)v23 - 9);
      if (v26)
      {
        *((_QWORD *)v23 - 8) = v26;
        operator delete(v26);
      }
      v23 -= 104;
    }
  }
  if (v16)
    operator delete(v16);
  return v14;
}

void sub_20EDC88DC(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  BOOL v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  BOOL v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t *v120;

uint64_t *sub_20EDC9208(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = sub_20EDC9694(a1, a2, a3, a4);
  v11 = *a4;
  if (a5[1] - *a5 > (unint64_t)(a4[1] - *a4))
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = a4[1];
    a4[1] = a5[1];
    a5[1] = v12;
    v13 = a4[2];
    a4[2] = a5[2];
    a5[2] = v13;
    v14 = *a3;
    if (a4[1] - *a4 > (unint64_t)(a3[1] - *a3))
    {
      *a3 = *a4;
      *a4 = v14;
      v15 = a3[1];
      a3[1] = a4[1];
      a4[1] = v15;
      v16 = a3[2];
      a3[2] = a4[2];
      a4[2] = v16;
      v17 = *a2;
      if (a3[1] - *a3 > (unint64_t)(a2[1] - *a2))
      {
        *a2 = *a3;
        *a3 = v17;
        v18 = a2[1];
        a2[1] = a3[1];
        a3[1] = v18;
        v19 = a2[2];
        a2[2] = a3[2];
        a3[2] = v19;
        v20 = *a1;
        if (a2[1] - *a2 > (unint64_t)(a1[1] - *a1))
        {
          *a1 = *a2;
          *a2 = v20;
          v21 = a1[1];
          a1[1] = a2[1];
          a2[1] = v21;
          v22 = a1[2];
          a1[2] = a2[2];
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_20EDC9348(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *a2;
  v4 = *result;
  v5 = a2[1] - *a2;
  v6 = *a3;
  v7 = a3[1] - *a3;
  if (v5 > result[1] - *result)
  {
    if (v7 <= v5)
    {
      *result = v3;
      *a2 = v4;
      v15 = result[1];
      result[1] = a2[1];
      a2[1] = v15;
      v8 = a2 + 2;
      v16 = result[2];
      result[2] = a2[2];
      a2[2] = v16;
      v17 = *a2;
      if (a3[1] - *a3 <= (unint64_t)(a2[1] - *a2))
        return result;
      *a2 = *a3;
      *a3 = v17;
      v9 = a2[1];
      a2[1] = a3[1];
    }
    else
    {
      v8 = result + 2;
      *result = v6;
      *a3 = v4;
      v9 = result[1];
      result[1] = a3[1];
    }
    a3[1] = v9;
    v12 = a3 + 2;
    goto LABEL_10;
  }
  if (v7 > v5)
  {
    *a2 = v6;
    *a3 = v3;
    v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    v12 = a2 + 2;
    v11 = a2[2];
    a2[2] = a3[2];
    a3[2] = v11;
    v13 = *result;
    if (a2[1] - *a2 > (unint64_t)(result[1] - *result))
    {
      *result = *a2;
      *a2 = v13;
      v14 = result[1];
      result[1] = a2[1];
      a2[1] = v14;
      v8 = result + 2;
LABEL_10:
      v18 = *v8;
      *v8 = *v12;
      *v12 = v18;
    }
  }
  return result;
}

BOOL sub_20EDC946C(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v19 = *(a2 - 3);
      v20 = *a1;
      if (*(a2 - 2) - v19 > (unint64_t)(a1[1] - *a1))
      {
        *a1 = v19;
        *(a2 - 3) = v20;
        v21 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v21;
        v22 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v22;
      }
      break;
    case 3uLL:
      sub_20EDC9348(a1, a1 + 3, a2 - 3);
      result = 1;
      break;
    case 4uLL:
      sub_20EDC9694(a1, a1 + 3, a1 + 6, a2 - 3);
      result = 1;
      break;
    case 5uLL:
      sub_20EDC9208(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      result = 1;
      break;
    default:
      v6 = a1 + 6;
      sub_20EDC9348(a1, a1 + 3, a1 + 6);
      v7 = a1 + 9;
      if (a1 + 9 == a2)
      {
LABEL_13:
        result = 1;
      }
      else
      {
        v8 = 0;
        v9 = 0;
        while (1)
        {
          v10 = *v7;
          v11 = v7[1];
          v12 = *v6;
          v13 = v11 - *v7;
          if (v13 > v6[1] - *v6)
            break;
LABEL_12:
          v6 = v7;
          v8 += 24;
          v7 += 3;
          if (v7 == a2)
            goto LABEL_13;
        }
        v14 = v7[2];
        *v7 = 0;
        v7[1] = 0;
        v15 = v8;
        v7[2] = 0;
        do
        {
          v16 = (uint64_t *)((char *)a1 + v15);
          v17 = *(uint64_t *)((char *)a1 + v15 + 64);
          v16[10] = *(uint64_t *)((char *)a1 + v15 + 56);
          v16[11] = v17;
          v16[8] = 0;
          v16[9] = v12;
          v16[6] = 0;
          v16[7] = 0;
          if (v15 == -48)
          {
            *a1 = v10;
            a1[1] = v11;
            a1[2] = v14;
            if (++v9 != 8)
              goto LABEL_12;
            goto LABEL_19;
          }
          v12 = v16[3];
          v15 -= 24;
        }
        while (v13 > v16[4] - v12);
        v18 = (char *)a1 + v15;
        *((_QWORD *)v18 + 9) = v10;
        *((_QWORD *)v18 + 10) = v11;
        *(uint64_t *)((char *)a1 + v15 + 88) = v14;
        if (++v9 != 8)
          goto LABEL_12;
LABEL_19:
        result = v7 + 3 == a2;
      }
      break;
  }
  return result;
}

uint64_t *sub_20EDC9694(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = sub_20EDC9348(a1, a2, a3);
  v9 = *a3;
  if (a4[1] - *a4 > (unint64_t)(a3[1] - *a3))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    v11 = a3[2];
    a3[2] = a4[2];
    a4[2] = v11;
    v12 = *a2;
    if (a3[1] - *a3 > (unint64_t)(a2[1] - *a2))
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = a2[1];
      a2[1] = a3[1];
      a3[1] = v13;
      v14 = a2[2];
      a2[2] = a3[2];
      a3[2] = v14;
      v15 = *a1;
      if (a2[1] - *a2 > (unint64_t)(a1[1] - *a1))
      {
        *a1 = *a2;
        *a2 = v15;
        v16 = a1[1];
        a1[1] = a2[1];
        a2[1] = v16;
        v17 = a1[2];
        a1[2] = a2[2];
        a2[2] = v17;
      }
    }
  }
  return result;
}

_QWORD *sub_20EDC9788(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (v10 < 0)
          sub_20E867F44();
        v11 = (char *)operator new(v8 - *(_QWORD *)v6);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[8 * (v10 >> 3)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_20EDC9850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EDC9864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 sub_20EDC9888(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  if (*(unsigned __int8 *)(a1 + 320) == *((unsigned __int8 *)a2 + 320))
  {
    if (*(_BYTE *)(a1 + 320))
    {
      v3 = *a2;
      v4 = a2[1];
      v5 = a2[3];
      *(_OWORD *)(a1 + 32) = a2[2];
      *(_OWORD *)(a1 + 48) = v5;
      *(_OWORD *)a1 = v3;
      *(_OWORD *)(a1 + 16) = v4;
      result = (__n128)a2[4];
      v7 = a2[5];
      v8 = a2[6];
      *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
      *(_OWORD *)(a1 + 80) = v7;
      *(_OWORD *)(a1 + 96) = v8;
      *(__n128 *)(a1 + 64) = result;
      v9 = (_QWORD *)(a1 + 120);
      if (*(unsigned __int8 *)(a1 + 312) == *((unsigned __int8 *)a2 + 312))
      {
        if (*(_BYTE *)(a1 + 312))
          sub_20EDC7800((uint64_t)v9, (uint64_t)a2 + 120);
      }
      else if (*(_BYTE *)(a1 + 312))
      {
        sub_20E9DF08C((uint64_t)v9);
        *(_BYTE *)(a1 + 312) = 0;
      }
      else
      {
        *v9 = 0;
        *(_QWORD *)(a1 + 128) = 0;
        *(_QWORD *)(a1 + 136) = 0;
        *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
        *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
        *((_QWORD *)a2 + 15) = 0;
        *((_QWORD *)a2 + 16) = 0;
        *((_QWORD *)a2 + 17) = 0;
        *(_QWORD *)(a1 + 144) = 0;
        *(_QWORD *)(a1 + 152) = 0;
        *(_QWORD *)(a1 + 160) = 0;
        *(_OWORD *)(a1 + 144) = a2[9];
        *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
        *((_QWORD *)a2 + 18) = 0;
        *((_QWORD *)a2 + 19) = 0;
        *((_QWORD *)a2 + 20) = 0;
        *(_QWORD *)(a1 + 168) = 0;
        *(_QWORD *)(a1 + 176) = 0;
        *(_QWORD *)(a1 + 184) = 0;
        *(_OWORD *)(a1 + 168) = *(__int128 *)((char *)a2 + 168);
        *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
        *((_QWORD *)a2 + 21) = 0;
        *((_QWORD *)a2 + 22) = 0;
        *((_QWORD *)a2 + 23) = 0;
        *(_QWORD *)(a1 + 192) = 0;
        *(_QWORD *)(a1 + 200) = 0;
        *(_QWORD *)(a1 + 208) = 0;
        *(_OWORD *)(a1 + 192) = a2[12];
        *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
        *((_QWORD *)a2 + 24) = 0;
        *((_QWORD *)a2 + 25) = 0;
        *((_QWORD *)a2 + 26) = 0;
        v19 = *(__int128 *)((char *)a2 + 216);
        v20 = *(__int128 *)((char *)a2 + 232);
        *(_OWORD *)(a1 + 248) = *(__int128 *)((char *)a2 + 248);
        *(_OWORD *)(a1 + 232) = v20;
        *(_OWORD *)(a1 + 216) = v19;
        *(_QWORD *)(a1 + 272) = 0;
        *(_QWORD *)(a1 + 280) = 0;
        *(_QWORD *)(a1 + 264) = 0;
        v21 = *((_QWORD *)a2 + 34);
        *(_QWORD *)(a1 + 264) = *((_QWORD *)a2 + 33);
        *(_QWORD *)(a1 + 272) = v21;
        *(_QWORD *)(a1 + 280) = *((_QWORD *)a2 + 35);
        *((_QWORD *)a2 + 33) = 0;
        *((_QWORD *)a2 + 34) = 0;
        *((_QWORD *)a2 + 35) = 0;
        *(_QWORD *)(a1 + 288) = 0;
        *(_QWORD *)(a1 + 296) = 0;
        *(_QWORD *)(a1 + 304) = 0;
        result = (__n128)a2[18];
        *(__n128 *)(a1 + 288) = result;
        *(_QWORD *)(a1 + 304) = *((_QWORD *)a2 + 38);
        *((_QWORD *)a2 + 36) = 0;
        *((_QWORD *)a2 + 37) = 0;
        *((_QWORD *)a2 + 38) = 0;
        *(_BYTE *)(a1 + 312) = 1;
      }
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 320))
    {
      v10 = *(_BYTE *)(a1 + 312);
      if (v10)
      {
        sub_20E9DF08C(a1 + 120);
        v10 = 0;
      }
    }
    else
    {
      v11 = *a2;
      v12 = a2[1];
      v13 = a2[3];
      *(_OWORD *)(a1 + 32) = a2[2];
      *(_OWORD *)(a1 + 48) = v13;
      *(_OWORD *)a1 = v11;
      *(_OWORD *)(a1 + 16) = v12;
      result = (__n128)a2[4];
      v14 = a2[5];
      v15 = a2[6];
      *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
      *(_OWORD *)(a1 + 80) = v14;
      *(_OWORD *)(a1 + 96) = v15;
      *(__n128 *)(a1 + 64) = result;
      *(_BYTE *)(a1 + 120) = 0;
      *(_BYTE *)(a1 + 312) = 0;
      v10 = 1;
      if (*((_BYTE *)a2 + 312))
      {
        *(_QWORD *)(a1 + 120) = 0;
        *(_QWORD *)(a1 + 128) = 0;
        *(_QWORD *)(a1 + 136) = 0;
        *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
        *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
        *((_QWORD *)a2 + 15) = 0;
        *((_QWORD *)a2 + 16) = 0;
        *((_QWORD *)a2 + 17) = 0;
        *(_QWORD *)(a1 + 144) = 0;
        *(_QWORD *)(a1 + 152) = 0;
        *(_QWORD *)(a1 + 160) = 0;
        *(_OWORD *)(a1 + 144) = a2[9];
        *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
        *((_QWORD *)a2 + 18) = 0;
        *((_QWORD *)a2 + 19) = 0;
        *((_QWORD *)a2 + 20) = 0;
        *(_QWORD *)(a1 + 168) = 0;
        *(_QWORD *)(a1 + 176) = 0;
        *(_QWORD *)(a1 + 184) = 0;
        *(_OWORD *)(a1 + 168) = *(__int128 *)((char *)a2 + 168);
        *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
        *((_QWORD *)a2 + 21) = 0;
        *((_QWORD *)a2 + 22) = 0;
        *((_QWORD *)a2 + 23) = 0;
        *(_QWORD *)(a1 + 192) = 0;
        *(_QWORD *)(a1 + 200) = 0;
        *(_QWORD *)(a1 + 208) = 0;
        *(_OWORD *)(a1 + 192) = a2[12];
        *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
        *((_QWORD *)a2 + 24) = 0;
        *((_QWORD *)a2 + 25) = 0;
        *((_QWORD *)a2 + 26) = 0;
        v16 = *(__int128 *)((char *)a2 + 216);
        v17 = *(__int128 *)((char *)a2 + 232);
        *(_OWORD *)(a1 + 248) = *(__int128 *)((char *)a2 + 248);
        *(_OWORD *)(a1 + 232) = v17;
        *(_OWORD *)(a1 + 216) = v16;
        *(_QWORD *)(a1 + 272) = 0;
        *(_QWORD *)(a1 + 280) = 0;
        *(_QWORD *)(a1 + 264) = 0;
        v18 = *((_QWORD *)a2 + 34);
        *(_QWORD *)(a1 + 264) = *((_QWORD *)a2 + 33);
        *(_QWORD *)(a1 + 272) = v18;
        *(_QWORD *)(a1 + 280) = *((_QWORD *)a2 + 35);
        *((_QWORD *)a2 + 33) = 0;
        *((_QWORD *)a2 + 34) = 0;
        *((_QWORD *)a2 + 35) = 0;
        *(_QWORD *)(a1 + 288) = 0;
        *(_QWORD *)(a1 + 296) = 0;
        *(_QWORD *)(a1 + 304) = 0;
        result = (__n128)a2[18];
        *(__n128 *)(a1 + 288) = result;
        *(_QWORD *)(a1 + 304) = *((_QWORD *)a2 + 38);
        *((_QWORD *)a2 + 36) = 0;
        *((_QWORD *)a2 + 37) = 0;
        *((_QWORD *)a2 + 38) = 0;
        *(_BYTE *)(a1 + 312) = 1;
      }
    }
    *(_BYTE *)(a1 + 320) = v10;
  }
  return result;
}

char *sub_20EDC9B4C(char **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  __int128 v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  char *v34;

  v2 = *a1;
  v3 = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 6);
  v5 = v4 + 1;
  if (v4 + 1 > 0xCCCCCCCCCCCCCCLL)
    sub_20E867F44();
  if (0x999999999999999ALL * ((a1[2] - v2) >> 6) > v5)
    v5 = 0x999999999999999ALL * ((a1[2] - v2) >> 6);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v2) >> 6) >= 0x66666666666666)
    v8 = 0xCCCCCCCCCCCCCCLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0xCCCCCCCCCCCCCCLL)
      sub_20E877A38();
    v9 = (char *)operator new(320 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *(_OWORD *)(a2 + 80);
  v11 = &v9[320 * v4];
  *((_OWORD *)v11 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v11 + 5) = v10;
  *((_OWORD *)v11 + 6) = *(_OWORD *)(a2 + 96);
  v11[112] = *(_BYTE *)(a2 + 112);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  v13 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v11 + 3) = v13;
  v11[120] = 0;
  v11[312] = 0;
  if (*(_BYTE *)(a2 + 312))
  {
    *((_QWORD *)v11 + 17) = 0;
    v15 = *(_OWORD *)(a2 + 120);
    v14 = a2 + 120;
    v16 = &v9[320 * v4];
    *(_OWORD *)(v11 + 120) = v15;
    *((_QWORD *)v16 + 17) = *(_QWORD *)(v14 + 16);
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0;
    *((_OWORD *)v16 + 9) = *(_OWORD *)(v14 + 24);
    *((_QWORD *)v16 + 20) = *(_QWORD *)(v14 + 40);
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 24) = 0;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 40) = 0;
    *((_QWORD *)v16 + 23) = 0;
    *(_OWORD *)(v16 + 168) = *(_OWORD *)(v14 + 48);
    *((_QWORD *)v16 + 23) = *(_QWORD *)(v14 + 64);
    *(_QWORD *)(v14 + 48) = 0;
    *(_QWORD *)(v14 + 56) = 0;
    *((_QWORD *)v16 + 25) = 0;
    *((_QWORD *)v16 + 26) = 0;
    *((_OWORD *)v16 + 12) = *(_OWORD *)(v14 + 72);
    *((_QWORD *)v16 + 26) = *(_QWORD *)(v14 + 88);
    *(_QWORD *)(v14 + 64) = 0;
    *(_QWORD *)(v14 + 72) = 0;
    *(_QWORD *)(v14 + 80) = 0;
    *(_QWORD *)(v14 + 88) = 0;
    v17 = *(_OWORD *)(v14 + 144);
    *(_OWORD *)(v16 + 248) = *(_OWORD *)(v14 + 128);
    v18 = *(_OWORD *)(v14 + 96);
    *(_OWORD *)(v16 + 232) = *(_OWORD *)(v14 + 112);
    *(_OWORD *)(v16 + 216) = v18;
    *((_QWORD *)v16 + 34) = 0;
    *((_QWORD *)v16 + 35) = 0;
    *(_OWORD *)(v16 + 264) = v17;
    *((_QWORD *)v16 + 35) = *(_QWORD *)(v14 + 160);
    *(_QWORD *)(v14 + 144) = 0;
    *(_QWORD *)(v14 + 152) = 0;
    *((_QWORD *)v16 + 37) = 0;
    *((_QWORD *)v16 + 38) = 0;
    *((_OWORD *)v16 + 18) = *(_OWORD *)(v14 + 168);
    *((_QWORD *)v16 + 38) = *(_QWORD *)(v14 + 184);
    *(_QWORD *)(v14 + 160) = 0;
    *(_QWORD *)(v14 + 168) = 0;
    *(_QWORD *)(v14 + 176) = 0;
    *(_QWORD *)(v14 + 184) = 0;
    v11[312] = 1;
    v2 = *a1;
    v3 = a1[1];
  }
  v19 = &v9[320 * v8];
  v20 = v11 + 320;
  if (v3 == v2)
  {
    *a1 = v11;
    a1[1] = v20;
    a1[2] = v19;
  }
  else
  {
    v21 = 0;
    do
    {
      v22 = &v11[v21];
      v23 = &v11[v21 - 320];
      v24 = &v3[v21];
      v25 = *(_OWORD *)&v3[v21 - 256];
      v26 = *(_OWORD *)&v3[v21 - 240];
      v27 = *(_OWORD *)&v3[v21 - 224];
      *(v22 - 208) = v3[v21 - 208];
      *((_OWORD *)v22 - 15) = v26;
      *((_OWORD *)v22 - 14) = v27;
      *((_OWORD *)v22 - 16) = v25;
      v28 = *(_OWORD *)&v3[v21 - 320];
      v29 = *(_OWORD *)&v3[v21 - 304];
      v30 = *(_OWORD *)&v3[v21 - 272];
      *((_OWORD *)v23 + 2) = *(_OWORD *)&v3[v21 - 288];
      *((_OWORD *)v23 + 3) = v30;
      *(_OWORD *)v23 = v28;
      *((_OWORD *)v23 + 1) = v29;
      v11[v21 - 200] = 0;
      v31 = &v11[v21 - 200];
      *(v22 - 8) = 0;
      if (v3[v21 - 8])
      {
        *(_QWORD *)v31 = 0;
        *(_QWORD *)&v11[v21 - 192] = 0;
        *(_QWORD *)&v11[v21 - 184] = 0;
        *(_OWORD *)v31 = *(_OWORD *)(v24 - 200);
        *((_QWORD *)v22 - 23) = *((_QWORD *)v24 - 23);
        *((_QWORD *)v24 - 25) = 0;
        *((_QWORD *)v24 - 24) = 0;
        *((_QWORD *)v24 - 23) = 0;
        *((_QWORD *)v22 - 22) = 0;
        *((_QWORD *)v22 - 21) = 0;
        *((_QWORD *)v22 - 20) = 0;
        *((_OWORD *)v22 - 11) = *((_OWORD *)v24 - 11);
        *((_QWORD *)v22 - 20) = *((_QWORD *)v24 - 20);
        *((_QWORD *)v24 - 22) = 0;
        *((_QWORD *)v24 - 21) = 0;
        *((_QWORD *)v24 - 20) = 0;
        *((_QWORD *)v22 - 19) = 0;
        *((_QWORD *)v22 - 18) = 0;
        *((_QWORD *)v22 - 17) = 0;
        *(_OWORD *)(v22 - 152) = *(_OWORD *)(v24 - 152);
        *((_QWORD *)v22 - 17) = *((_QWORD *)v24 - 17);
        *((_QWORD *)v24 - 19) = 0;
        *((_QWORD *)v24 - 18) = 0;
        *((_QWORD *)v24 - 17) = 0;
        *((_QWORD *)v22 - 16) = 0;
        *((_QWORD *)v22 - 15) = 0;
        *((_QWORD *)v22 - 14) = 0;
        *((_OWORD *)v22 - 8) = *((_OWORD *)v24 - 8);
        *((_QWORD *)v22 - 14) = *((_QWORD *)v24 - 14);
        *((_QWORD *)v24 - 16) = 0;
        *((_QWORD *)v24 - 15) = 0;
        *((_QWORD *)v24 - 14) = 0;
        v32 = *(_OWORD *)(v24 - 104);
        v33 = *(_OWORD *)(v24 - 88);
        *(_OWORD *)(v22 - 72) = *(_OWORD *)(v24 - 72);
        *(_OWORD *)(v22 - 88) = v33;
        *(_OWORD *)(v22 - 104) = v32;
        *((_QWORD *)v22 - 6) = 0;
        *((_QWORD *)v22 - 5) = 0;
        *((_QWORD *)v22 - 7) = 0;
        *(_OWORD *)(v22 - 56) = *(_OWORD *)(v24 - 56);
        *((_QWORD *)v22 - 5) = *((_QWORD *)v24 - 5);
        *((_QWORD *)v24 - 7) = 0;
        *((_QWORD *)v24 - 6) = 0;
        *((_QWORD *)v24 - 5) = 0;
        *((_QWORD *)v22 - 4) = 0;
        *((_QWORD *)v22 - 3) = 0;
        *((_QWORD *)v22 - 2) = 0;
        *((_OWORD *)v22 - 2) = *((_OWORD *)v24 - 2);
        *((_QWORD *)v22 - 2) = *((_QWORD *)v24 - 2);
        *((_QWORD *)v24 - 4) = 0;
        *((_QWORD *)v24 - 3) = 0;
        *((_QWORD *)v24 - 2) = 0;
        *(v22 - 8) = 1;
      }
      v21 -= 320;
    }
    while (&v3[v21] != v2);
    v2 = *a1;
    v34 = a1[1];
    *a1 = &v11[v21];
    a1[1] = v20;
    a1[2] = v19;
    while (v34 != v2)
    {
      if (*(v34 - 8))
        sub_20E9DF08C((uint64_t)(v34 - 200));
      v34 -= 320;
    }
  }
  if (v2)
    operator delete(v2);
  return v20;
}

_QWORD *sub_20EDC9EA8(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  v14[2] = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        sub_20E8D2B3C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20EDCA1B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EDCA1CC()
{
  JUMPOUT(0x212BC6398);
}

char *sub_20EDCA1E0(void **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  void (***v15)(char *);
  void (**v16)(char *);
  BOOL v17;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - (_BYTE *)*a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666)
    sub_20E867F44();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - v4) >> 3) > v6)
    v6 = 0x999999999999999ALL * (((_BYTE *)a1[2] - v4) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - v4) >> 3) >= 0x333333333333333)
    v8 = 0x666666666666666;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x666666666666666)
      sub_20E877A38();
    v9 = (char *)operator new(40 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[40 * v5];
  v11 = &v9[40 * v8];
  *(_OWORD *)(v10 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)v10 = &off_24C9E9850;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a2 + 24);
  v12 = v10 + 40;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    if (!v3)
      return v12;
    goto LABEL_18;
  }
  do
  {
    *((_QWORD *)v10 - 5) = &off_24CA18630;
    v10 -= 40;
    *(_OWORD *)(v10 + 8) = *((_OWORD *)v3 - 2);
    *(_QWORD *)v10 = &off_24C9E9850;
    *(_OWORD *)(v10 + 24) = *((_OWORD *)v3 - 1);
    v3 -= 40;
  }
  while (v3 != v4);
  v3 = (char *)*a1;
  v13 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v12;
  a1[2] = v11;
  if (v13 != v3)
  {
    v14 = v13 - 40;
    v15 = (void (***)(char *))(v13 - 40);
    do
    {
      v16 = *v15;
      v15 -= 5;
      (*v16)(v14);
      v17 = v14 == v3;
      v14 = (char *)v15;
    }
    while (!v17);
  }
  if (v3)
LABEL_18:
    operator delete(v3);
  return v12;
}

uint64_t sub_20EDCA350(uint64_t a1, _QWORD *a2, unint64_t a3, int a4, char **a5, char **a6, double a7)
{
  unsigned int **v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  float v19;
  float v21;
  unint64_t v22;
  float v23;

  if (a4 && *(_QWORD *)(a1 + 552) != *(_QWORD *)(a1 + 560))
  {
    v13 = (unsigned int **)(a1 + 552);
    v14 = 1;
LABEL_10:
    v21 = a7;
    return sub_20EDCB89C((_QWORD *)(a1 + 576), a2, a5, a6, a3, (uint64_t)v13, v14, v21);
  }
  v15 = *(_QWORD *)(a1 + 528);
  v16 = *(_QWORD *)(a1 + 536);
  v14 = v15 != v16;
  if (v15 == v16)
    v13 = 0;
  else
    v13 = (unsigned int **)(a1 + 528);
  sub_20EDCA64C(a1);
  if (!*(_BYTE *)(a1 + 280))
    goto LABEL_10;
  v17 = (uint64_t *)(a1 + 112);
  v18 = (uint64_t *)(a1 + 576);
  if (a3 == 1)
  {
    v19 = a7;
    return sub_20EDCA8D0(v17, v18, a2, a5, a6, v19, 1, v13, v14);
  }
  else
  {
    v22 = (uint64_t)(*(_QWORD *)(a1 + 584) - *(_QWORD *)(a1 + 576)) >> 6;
    if (v22 <= (uint64_t)(a2[1] - *a2) >> 6)
      v22 = (uint64_t)(a2[1] - *a2) >> 6;
    v23 = a7;
    if (v22 <= a3)
      return sub_20EDCAE04(v17, v18, a2, a5, a6, v23, a3, v13, v14);
    else
      return sub_20EDCB348(v17, v18, a2, a5, a6, a3, v13, v14, v23);
  }
}

void sub_20EDCA4D0(uint64_t a1, unint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  char *v14;
  int v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  __int128 v19;

  *(_QWORD *)(a1 + 8) = 0;
  if (!a2)
    return;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = v6 << 6;
  if (v6 << 6 >= a2)
  {
    *(_QWORD *)(a1 + 8) = a2;
    v14 = *(char **)a1;
    v16 = a2 >> 6;
    if (*a3)
    {
LABEL_12:
      v17 = 8 * v16;
      if (a2 >= 0x40)
        memset(v14, 255, v17);
      if ((a2 & 0x3F) != 0)
        *(_QWORD *)&v14[v17] |= 0xFFFFFFFFFFFFFFFFLL >> -(a2 & 0x3F);
      return;
    }
  }
  else
  {
    v18 = 0;
    v19 = 0uLL;
    if ((a2 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v8 = v6 << 7;
    if (v8 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
      v8 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
    if (v7 <= 0x3FFFFFFFFFFFFFFELL)
      v9 = v8;
    else
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    sub_20E8B3B5C(&v18, v9);
    v11 = v18;
    v12 = *((_QWORD *)&v19 + 1);
    v18 = *(char **)a1;
    v10 = v18;
    v13 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v12;
    v19 = v13;
    if (v10)
      operator delete(v10);
    v14 = *(char **)a1;
    v15 = *a3;
    v16 = a2 >> 6;
    if (v15)
      goto LABEL_12;
  }
  if (a2 >= 0x40)
    bzero(v14, 8 * v16);
  if ((a2 & 0x3F) != 0)
    *(_QWORD *)&v14[8 * v16] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(a2 & 0x3F));
}

void sub_20EDCA634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EDCA64C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__dst;
  _BYTE *v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 528);
  v3 = *(_QWORD *)(a1 + 536);
  if (v2 == v3)
  {
    if ((unint64_t)((uint64_t)(*(_QWORD *)(a1 + 584) - *(_QWORD *)(a1 + 576)) >> 6) < 0x9A)
      goto LABEL_6;
  }
  else if ((unint64_t)((v3 - v2) >> 2) < 0x9A)
  {
LABEL_6:
    v4 = *(_QWORD *)(a1 + 616);
    v5 = *(_QWORD *)(a1 + 624);
    if (v4 == v5)
      return;
    goto LABEL_7;
  }
  if (*(_BYTE *)(a1 + 280))
    goto LABEL_6;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 152) = &off_24C9E9888;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 160) = 1234;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 1;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 232) = a1 + 232;
  *(_QWORD *)(a1 + 240) = a1 + 232;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 68;
  *(_QWORD *)(a1 + 256) = a1 + 232;
  *(_BYTE *)(a1 + 280) = 1;
  sub_20EDCBBE8(a1);
  v4 = *(_QWORD *)(a1 + 616);
  v5 = *(_QWORD *)(a1 + 624);
  if (v4 == v5)
    return;
LABEL_7:
  if (*(_QWORD *)(a1 + 528) == *(_QWORD *)(a1 + 536))
  {
    __dst = 0;
    v15 = 0;
    v16 = 0;
    sub_20E93DC84((uint64_t)&__dst, (v5 - v4) >> 6);
    v8 = *(char **)(a1 + 624);
    v9 = *(char **)(a1 + 616);
    v10 = (char *)__dst;
    v11 = v8 - v9;
    if (v8 != v9)
    {
      v12 = 0;
      v13 = v11 >> 6;
      do
      {
        if (*(_QWORD *)v9 | *((_QWORD *)v9 + 1) | *((_QWORD *)v9 + 2) | *((_QWORD *)v9 + 3) | *((_QWORD *)v9 + 4) | *((_QWORD *)v9 + 5) | *((_QWORD *)v9 + 6) | *((_QWORD *)v9 + 7))
        {
          *(_DWORD *)v10 = v12;
          v10 += 4;
        }
        ++v12;
        v9 += 64;
      }
      while (v13 != v12);
    }
    v6 = __dst;
    v7 = v10 - (_BYTE *)__dst;
    if (!__dst)
      goto LABEL_10;
  }
  else
  {
    sub_20EDCBDD4((_QWORD *)(a1 + 616), (unsigned int **)(a1 + 528), 1, &__dst);
    v6 = __dst;
    v7 = v15 - (_BYTE *)__dst;
    if (!__dst)
      goto LABEL_10;
  }
  v15 = v6;
  operator delete(v6);
LABEL_10:
  if (v7 >= 0x265 && !*(_BYTE *)(a1 + 456))
  {
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 320) = 0u;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_QWORD *)(a1 + 328) = &off_24C9E9888;
    *(_QWORD *)(a1 + 336) = 0;
    *(_DWORD *)(a1 + 336) = 1234;
    *(_QWORD *)(a1 + 344) = 0;
    *(_QWORD *)(a1 + 352) = 0;
    *(_QWORD *)(a1 + 360) = 0;
    *(_QWORD *)(a1 + 368) = 1;
    *(_OWORD *)(a1 + 376) = 0u;
    *(_OWORD *)(a1 + 392) = 0u;
    *(_QWORD *)(a1 + 408) = a1 + 408;
    *(_QWORD *)(a1 + 416) = a1 + 408;
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 432) = 0;
    *(_QWORD *)(a1 + 440) = 0;
    *(_QWORD *)(a1 + 448) = 68;
    *(_QWORD *)(a1 + 432) = a1 + 408;
    *(_BYTE *)(a1 + 456) = 1;
    sub_20EDCBF70(a1);
  }
}

void sub_20EDCA8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EDCA8D0(uint64_t *a1, uint64_t *a2, _QWORD *a3, char **a4, char **a5, float a6, uint64_t a7, unsigned int **a8, char a9)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int8x16_t *v58;
  uint64_t *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  int8x16_t *v63;
  unsigned __int16 v64;
  char *v65;
  uint64_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  uint64_t *v71;
  unsigned int *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v77;
  char *v78;
  char *v79;
  char *v80;
  char **v81;
  unsigned int **v83;
  char v84;
  uint64_t v85;
  unint64_t v86;
  unsigned int v87;
  unsigned int v88;
  char v89;
  void *__p;
  _BYTE *v91;
  uint64_t v92;

  a4[1] = *a4;
  a5[1] = *a5;
  v17 = a2[1] - *a2;
  v18 = v17 >> 6;
  v19 = *a4;
  if (v17 >> 6 <= (unint64_t)((a4[2] - *a4) >> 2))
    goto LABEL_13;
  if (v17 < 0)
    sub_20E867F44();
  v20 = a4[1];
  v21 = (char *)operator new((unint64_t)v17 >> 4);
  v22 = v20 - v19;
  v23 = &v21[(v20 - v19) & 0xFFFFFFFFFFFFFFFCLL];
  v24 = v23;
  if (v20 != v19)
  {
    if ((unint64_t)(v22 - 4) < 0x2C)
    {
      v24 = &v21[(v20 - v19) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_10:
        v33 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *((_DWORD *)v24 - 1) = v33;
        v24 -= 4;
      }
      while (v20 != v19);
      goto LABEL_11;
    }
    v24 = &v21[(v20 - v19) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v20[-(v22 & 0xFFFFFFFFFFFFFFFCLL)] - v21) < 0x20)
      goto LABEL_10;
    v25 = v22 >> 2;
    v26 = ((unint64_t)(v22 - 4) >> 2) + 1;
    v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    v28 = &v20[-v27];
    v24 = &v23[-v27];
    v29 = &v21[4 * v25 - 16];
    v30 = (__int128 *)(v20 - 16);
    v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v32 = *v30;
      *((_OWORD *)v29 - 1) = *(v30 - 1);
      *(_OWORD *)v29 = v32;
      v29 -= 32;
      v30 -= 2;
      v31 -= 8;
    }
    while (v31);
    v20 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_10;
  }
LABEL_11:
  *a4 = v24;
  a4[1] = v23;
  a4[2] = &v21[4 * v18];
  if (v19)
    operator delete(v19);
LABEL_13:
  v34 = a3[1] - *a3;
  v35 = v34 >> 6;
  v36 = *a5;
  if (v34 >> 6 <= (unint64_t)((a5[2] - *a5) >> 2))
    goto LABEL_25;
  if (v34 < 0)
    sub_20E867F44();
  v37 = a5[1];
  v38 = (char *)operator new((unint64_t)v34 >> 4);
  v39 = v37 - v36;
  v40 = &v38[(v37 - v36) & 0xFFFFFFFFFFFFFFFCLL];
  v41 = v40;
  if (v37 != v36)
  {
    if ((unint64_t)(v39 - 4) < 0x2C)
    {
      v41 = &v38[(v37 - v36) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_22:
        v50 = *((_DWORD *)v37 - 1);
        v37 -= 4;
        *((_DWORD *)v41 - 1) = v50;
        v41 -= 4;
      }
      while (v37 != v36);
      goto LABEL_23;
    }
    v41 = &v38[(v37 - v36) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v37[-(v39 & 0xFFFFFFFFFFFFFFFCLL)] - v38) < 0x20)
      goto LABEL_22;
    v42 = v39 >> 2;
    v43 = ((unint64_t)(v39 - 4) >> 2) + 1;
    v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
    v45 = &v37[-v44];
    v41 = &v40[-v44];
    v46 = &v38[4 * v42 - 16];
    v47 = (__int128 *)(v37 - 16);
    v48 = v43 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v49 = *v47;
      *((_OWORD *)v46 - 1) = *(v47 - 1);
      *(_OWORD *)v46 = v49;
      v46 -= 32;
      v47 -= 2;
      v48 -= 8;
    }
    while (v48);
    v37 = v45;
    if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_22;
  }
LABEL_23:
  *a5 = v41;
  a5[1] = v40;
  a5[2] = &v38[4 * v35];
  if (v36)
    operator delete(v36);
LABEL_25:
  v83 = a8;
  v84 = a9;
  __p = 0;
  v91 = 0;
  v92 = 0;
  v52 = *a2;
  v51 = a2[1];
  v85 = 0xFFFFFFFF00000000;
  LOBYTE(v86) = 0;
  v53 = v51 - v52;
  if (v53)
    sub_20EDCFBAC(&__p, v53 >> 6, &v85);
  v54 = a3[1] - *a3;
  if (v54)
  {
    v55 = 0;
    v56 = v54 >> 6;
    if (v56 <= 1)
      v57 = 1;
    else
      v57 = v56;
    do
    {
      v58 = (int8x16_t *)(*a3 + (v55 << 6));
      sub_20EDCF384(a1, v58);
      v59 = (uint64_t *)a1[2];
      v60 = (_QWORD *)a1[3];
      v61 = v60 - v59;
      if (!v61)
        goto LABEL_32;
      if (v61 == 1)
      {
        v62 = *v59;
        v63 = (int8x16_t *)(*a2 + (*v59 << 6));
        v64 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v63[1], v58[1])), vcntq_s8(veorq_s8(*v63, *v58))), vaddq_s8(vcntq_s8(veorq_s8(v63[2], v58[2])), vcntq_s8(veorq_s8(v63[3], v58[3])))));
        v65 = (char *)__p + 12 * v62;
        if (!v65[8] || *((_DWORD *)v65 + 1) > v64)
        {
          v65[8] = 1;
          *(_QWORD *)v65 = v55 | ((unint64_t)v64 << 32);
        }
        goto LABEL_32;
      }
      LODWORD(v85) = -1;
      v87 = -1;
      v88 = -1;
      if (v60 == v59)
      {
        v77 = -1;
        if ((float)((float)0xFFFFFFFF * a6) > (float)0xFFFFFFFF)
          goto LABEL_52;
        goto LABEL_32;
      }
      v66 = *a2;
      v67 = *v58;
      v68 = v58[1];
      v69 = v58[2];
      v70 = v58[3];
      do
      {
        v74 = *v59++;
        v73 = v74;
        v75 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(v66 + (v74 << 6) + 16), v68)), vcntq_s8(veorq_s8(*(int8x16_t *)(v66 + (v74 << 6)), v67))), vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(v66 + (v74 << 6) + 32), v69)), vcntq_s8(veorq_s8(*(int8x16_t *)(v66 + (v74 << 6) + 48), v70)))));
        if (v75 < v88)
        {
          v87 = v88;
          v71 = &v85;
          v72 = &v88;
LABEL_41:
          *v72 = v75;
          *(_DWORD *)v71 = v73;
          goto LABEL_42;
        }
        if (v75 < v87 && v73 != v85)
        {
          v71 = (uint64_t *)&v89;
          v72 = &v87;
          goto LABEL_41;
        }
LABEL_42:
        --v61;
      }
      while (v61);
      v77 = v88;
      if ((float)((float)v87 * a6) > (float)v88)
      {
LABEL_52:
        v78 = (char *)__p + 12 * v85;
        if (!v78[8] || *((_DWORD *)v78 + 1) > v77)
        {
          v78[8] = 1;
          *(_QWORD *)v78 = v55 | ((unint64_t)v77 << 32);
        }
      }
LABEL_32:
      ++v55;
    }
    while (v55 != v57);
  }
  if (v84)
  {
    sub_20EDCF560(v83, &__p, (uint64_t)a4, (uint64_t)a5);
  }
  else
  {
    v85 = 0;
    v86 = 0xAAAAAAAAAAAAAAABLL * ((v91 - (_BYTE *)__p) >> 2);
    sub_20EDCF87C(&v85, &__p, (uint64_t)a4, (uint64_t)a5);
  }
  v81 = a4;
  v79 = *a4;
  v80 = v81[1];
  if (__p)
  {
    v91 = __p;
    operator delete(__p);
  }
  return (v80 - v79) >> 2;
}

void sub_20EDCADDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EDCAE04(uint64_t *a1, uint64_t *a2, _QWORD *a3, char **a4, char **a5, float a6, uint64_t a7, unsigned int **a8, char a9)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int8x16_t *v59;
  unsigned __int16 v60;
  int8x16_t *v61;
  uint64_t *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  unsigned int *v70;
  unsigned int *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  int v76;
  char *v77;
  char *v78;
  char **v79;
  char *v80;
  char *v81;
  void *v82;
  char *v83;
  void *v84;
  void *v85;
  unsigned int v87;
  unsigned int v88;
  char v89;
  unsigned int v90;
  void *__p;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  char *v95;
  uint64_t v96;

  a4[1] = *a4;
  a5[1] = *a5;
  v17 = a2[1] - *a2;
  v18 = v17 >> 6;
  v19 = *a4;
  if (v17 >> 6 <= (unint64_t)((a4[2] - *a4) >> 2))
    goto LABEL_13;
  if (v17 < 0)
    sub_20E867F44();
  v20 = a4[1];
  v21 = (char *)operator new((unint64_t)v17 >> 4);
  v22 = v20 - v19;
  v23 = &v21[(v20 - v19) & 0xFFFFFFFFFFFFFFFCLL];
  v24 = v23;
  if (v20 != v19)
  {
    if ((unint64_t)(v22 - 4) < 0x2C)
    {
      v24 = &v21[(v20 - v19) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_10:
        v33 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *((_DWORD *)v24 - 1) = v33;
        v24 -= 4;
      }
      while (v20 != v19);
      goto LABEL_11;
    }
    v24 = &v21[(v20 - v19) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v20[-(v22 & 0xFFFFFFFFFFFFFFFCLL)] - v21) < 0x20)
      goto LABEL_10;
    v25 = v22 >> 2;
    v26 = ((unint64_t)(v22 - 4) >> 2) + 1;
    v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    v28 = &v20[-v27];
    v24 = &v23[-v27];
    v29 = &v21[4 * v25 - 16];
    v30 = (__int128 *)(v20 - 16);
    v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v32 = *v30;
      *((_OWORD *)v29 - 1) = *(v30 - 1);
      *(_OWORD *)v29 = v32;
      v29 -= 32;
      v30 -= 2;
      v31 -= 8;
    }
    while (v31);
    v20 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_10;
  }
LABEL_11:
  *a4 = v24;
  a4[1] = v23;
  a4[2] = &v21[4 * v18];
  if (v19)
    operator delete(v19);
LABEL_13:
  v34 = a3[1] - *a3;
  v35 = v34 >> 6;
  v36 = *a5;
  if (v34 >> 6 <= (unint64_t)((a5[2] - *a5) >> 2))
    goto LABEL_25;
  if (v34 < 0)
    sub_20E867F44();
  v37 = a5[1];
  v38 = (char *)operator new((unint64_t)v34 >> 4);
  v39 = v37 - v36;
  v40 = &v38[(v37 - v36) & 0xFFFFFFFFFFFFFFFCLL];
  v41 = v40;
  if (v37 != v36)
  {
    if ((unint64_t)(v39 - 4) < 0x2C)
    {
      v41 = &v38[(v37 - v36) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_22:
        v50 = *((_DWORD *)v37 - 1);
        v37 -= 4;
        *((_DWORD *)v41 - 1) = v50;
        v41 -= 4;
      }
      while (v37 != v36);
      goto LABEL_23;
    }
    v41 = &v38[(v37 - v36) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v37[-(v39 & 0xFFFFFFFFFFFFFFFCLL)] - v38) < 0x20)
      goto LABEL_22;
    v42 = v39 >> 2;
    v43 = ((unint64_t)(v39 - 4) >> 2) + 1;
    v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
    v45 = &v37[-v44];
    v41 = &v40[-v44];
    v46 = &v38[4 * v42 - 16];
    v47 = (__int128 *)(v37 - 16);
    v48 = v43 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v49 = *v47;
      *((_OWORD *)v46 - 1) = *(v47 - 1);
      *(_OWORD *)v46 = v49;
      v46 -= 32;
      v47 -= 2;
      v48 -= 8;
    }
    while (v48);
    v37 = v45;
    if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_22;
  }
LABEL_23:
  *a5 = v41;
  a5[1] = v40;
  a5[2] = &v38[4 * v35];
  if (v36)
    operator delete(v36);
LABEL_25:
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v52 = *a2;
  v51 = a2[1];
  __p = 0;
  v92 = 0;
  v93 = 0;
  v53 = v51 - v52;
  if (v53)
  {
    sub_20EDD0E84((char **)&v94, v53 >> 6, (uint64_t)&__p);
    if (__p)
    {
      v92 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  v54 = a3[1] - *a3;
  if (v54)
  {
    v55 = 0;
    v56 = v54 >> 6;
    if (v56 <= 1)
      v57 = 1;
    else
      v57 = v56;
    do
    {
      v61 = (int8x16_t *)(*a3 + (v55 << 6));
      sub_20EDCF384(a1, v61);
      v62 = (uint64_t *)a1[2];
      v63 = (_QWORD *)a1[3];
      v64 = v63 - v62;
      if (!v64)
        goto LABEL_33;
      if (v64 == 1)
      {
        v58 = *v62;
        v59 = (int8x16_t *)(*a2 + (v58 << 6));
        v60 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v59[1], v61[1])), vcntq_s8(veorq_s8(*v59, *v61))), vaddq_s8(vcntq_s8(veorq_s8(v59[2], v61[2])), vcntq_s8(veorq_s8(v59[3], v61[3])))));
        LODWORD(__p) = v55;
        HIDWORD(__p) = v60;
        sub_20EDD11A4((void **)v94 + 4 * v58, &__p);
        goto LABEL_33;
      }
      v90 = -1;
      v87 = -1;
      v88 = -1;
      if (v63 == v62)
      {
        v76 = -1;
        if ((float)((float)0xFFFFFFFF * a6) > (float)0xFFFFFFFF)
          goto LABEL_50;
        goto LABEL_33;
      }
      v65 = *a2;
      v66 = *v61;
      v67 = v61[1];
      v68 = v61[2];
      v69 = v61[3];
      do
      {
        v73 = *v62++;
        v72 = v73;
        v74 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(v65 + (v73 << 6) + 16), v67)), vcntq_s8(veorq_s8(*(int8x16_t *)(v65 + (v73 << 6)), v66))), vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(v65 + (v73 << 6) + 32), v68)), vcntq_s8(veorq_s8(*(int8x16_t *)(v65 + (v73 << 6) + 48), v69)))));
        if (v74 < v88)
        {
          v87 = v88;
          v70 = &v90;
          v71 = &v88;
LABEL_39:
          *v71 = v74;
          *v70 = v72;
          goto LABEL_40;
        }
        if (v74 < v87 && v72 != v90)
        {
          v70 = (unsigned int *)&v89;
          v71 = &v87;
          goto LABEL_39;
        }
LABEL_40:
        --v64;
      }
      while (v64);
      v76 = v88;
      if ((float)((float)v87 * a6) > (float)v88)
      {
LABEL_50:
        __p = (void *)__PAIR64__(v76, v55);
        sub_20EDD11A4((void **)v94 + 4 * v90, &__p);
      }
LABEL_33:
      ++v55;
    }
    while (v55 != v57);
  }
  if (a9)
  {
    sub_20EDD0594(a8, &v94, (uint64_t)a4, a5);
  }
  else
  {
    __p = 0;
    v92 = (v95 - (_BYTE *)v94) >> 5;
    sub_20EDD09E0((uint64_t *)&__p, &v94, (uint64_t)a4, (uint64_t)a5);
  }
  v79 = a4;
  v77 = *a4;
  v78 = v79[1];
  v80 = (char *)v94;
  if (v94)
  {
    v81 = v95;
    v82 = v94;
    if (v95 != v94)
    {
      v83 = v95;
      do
      {
        v85 = (void *)*((_QWORD *)v83 - 4);
        v83 -= 32;
        v84 = v85;
        if (v85)
        {
          *((_QWORD *)v81 - 3) = v84;
          operator delete(v84);
        }
        v81 = v83;
      }
      while (v83 != v80);
      v82 = v94;
    }
    v95 = v80;
    operator delete(v82);
  }
  return (v78 - v77) >> 2;
}

void sub_20EDCB300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  sub_20EDD0E10(&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_20EDCB348(uint64_t *a1, uint64_t *a2, _QWORD *a3, char **a4, char **a5, uint64_t a6, unsigned int **a7, char a8, float a9)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int8x16_t *v59;
  int8x16_t *v60;
  uint64_t *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  void **p_p;
  unsigned int *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v75;
  char *v76;
  char *v77;
  char **v78;
  char *v79;
  char *v80;
  void *v81;
  char *v82;
  void *v83;
  void *v84;
  unsigned int v87;
  unsigned int v88;
  char v89;
  void *__p;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  char *v95;
  uint64_t v96;

  a4[1] = *a4;
  a5[1] = *a5;
  v17 = a2[1] - *a2;
  v18 = v17 >> 6;
  v19 = *a4;
  if (v17 >> 6 <= (unint64_t)((a4[2] - *a4) >> 2))
    goto LABEL_13;
  if (v17 < 0)
    sub_20E867F44();
  v20 = a4[1];
  v21 = (char *)operator new((unint64_t)v17 >> 4);
  v22 = v20 - v19;
  v23 = &v21[(v20 - v19) & 0xFFFFFFFFFFFFFFFCLL];
  v24 = v23;
  if (v20 != v19)
  {
    if ((unint64_t)(v22 - 4) < 0x2C)
    {
      v24 = &v21[(v20 - v19) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_10:
        v33 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *((_DWORD *)v24 - 1) = v33;
        v24 -= 4;
      }
      while (v20 != v19);
      goto LABEL_11;
    }
    v24 = &v21[(v20 - v19) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v20[-(v22 & 0xFFFFFFFFFFFFFFFCLL)] - v21) < 0x20)
      goto LABEL_10;
    v25 = v22 >> 2;
    v26 = ((unint64_t)(v22 - 4) >> 2) + 1;
    v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    v28 = &v20[-v27];
    v24 = &v23[-v27];
    v29 = &v21[4 * v25 - 16];
    v30 = (__int128 *)(v20 - 16);
    v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v32 = *v30;
      *((_OWORD *)v29 - 1) = *(v30 - 1);
      *(_OWORD *)v29 = v32;
      v29 -= 32;
      v30 -= 2;
      v31 -= 8;
    }
    while (v31);
    v20 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_10;
  }
LABEL_11:
  *a4 = v24;
  a4[1] = v23;
  a4[2] = &v21[4 * v18];
  if (v19)
    operator delete(v19);
LABEL_13:
  v34 = a3[1] - *a3;
  v35 = v34 >> 6;
  v36 = *a5;
  if (v34 >> 6 <= (unint64_t)((a5[2] - *a5) >> 2))
    goto LABEL_25;
  if (v34 < 0)
    sub_20E867F44();
  v37 = a5[1];
  v38 = (char *)operator new((unint64_t)v34 >> 4);
  v39 = v37 - v36;
  v40 = &v38[(v37 - v36) & 0xFFFFFFFFFFFFFFFCLL];
  v41 = v40;
  if (v37 != v36)
  {
    if ((unint64_t)(v39 - 4) < 0x2C)
    {
      v41 = &v38[(v37 - v36) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_22:
        v50 = *((_DWORD *)v37 - 1);
        v37 -= 4;
        *((_DWORD *)v41 - 1) = v50;
        v41 -= 4;
      }
      while (v37 != v36);
      goto LABEL_23;
    }
    v41 = &v38[(v37 - v36) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v37[-(v39 & 0xFFFFFFFFFFFFFFFCLL)] - v38) < 0x20)
      goto LABEL_22;
    v42 = v39 >> 2;
    v43 = ((unint64_t)(v39 - 4) >> 2) + 1;
    v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
    v45 = &v37[-v44];
    v41 = &v40[-v44];
    v46 = &v38[4 * v42 - 16];
    v47 = (__int128 *)(v37 - 16);
    v48 = v43 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v49 = *v47;
      *((_OWORD *)v46 - 1) = *(v47 - 1);
      *(_OWORD *)v46 = v49;
      v46 -= 32;
      v47 -= 2;
      v48 -= 8;
    }
    while (v48);
    v37 = v45;
    if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_22;
  }
LABEL_23:
  *a5 = v41;
  a5[1] = v40;
  a5[2] = &v38[4 * v35];
  if (v36)
    operator delete(v36);
LABEL_25:
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v52 = *a2;
  v51 = a2[1];
  __p = 0;
  v91 = 0;
  v92 = 0;
  v93 = a6;
  v53 = v51 - v52;
  if (v53)
  {
    sub_20EDD1DC0((char **)&v94, v53 >> 6, (uint64_t)&__p);
    if (__p)
    {
      v91 = (unint64_t)__p;
      operator delete(__p);
    }
  }
  v54 = a3[1] - *a3;
  if (v54)
  {
    v55 = 0;
    v56 = v54 >> 6;
    if (v56 <= 1)
      v57 = 1;
    else
      v57 = v56;
    do
    {
      v60 = (int8x16_t *)(*a3 + (v55 << 6));
      sub_20EDCF384(a1, v60);
      v61 = (uint64_t *)a1[2];
      v62 = (_QWORD *)a1[3];
      v63 = v62 - v61;
      if (!v63)
        goto LABEL_33;
      if (v63 == 1)
      {
        v58 = *v61;
        v59 = (int8x16_t *)(*a2 + (v58 << 6));
        sub_20EDD1370((uint64_t)v94 + 40 * v58, vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v59[1], v60[1])), vcntq_s8(veorq_s8(*v59, *v60))), vaddq_s8(vcntq_s8(veorq_s8(v59[2], v60[2])), vcntq_s8(veorq_s8(v59[3], v60[3]))))), v55);
        goto LABEL_33;
      }
      LODWORD(__p) = -1;
      v87 = -1;
      v88 = -1;
      if (v62 == v61)
      {
        v75 = -1;
        if ((float)((float)0xFFFFFFFF * a9) > (float)0xFFFFFFFF)
          goto LABEL_50;
        goto LABEL_33;
      }
      v64 = *a2;
      v65 = *v60;
      v66 = v60[1];
      v67 = v60[2];
      v68 = v60[3];
      do
      {
        v72 = *v61++;
        v71 = v72;
        v73 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(v64 + (v72 << 6) + 16), v66)), vcntq_s8(veorq_s8(*(int8x16_t *)(v64 + (v72 << 6)), v65))), vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(v64 + (v72 << 6) + 32), v67)), vcntq_s8(veorq_s8(*(int8x16_t *)(v64 + (v72 << 6) + 48), v68)))));
        if (v73 < v88)
        {
          v87 = v88;
          p_p = &__p;
          v70 = &v88;
LABEL_39:
          *v70 = v73;
          *(_DWORD *)p_p = v71;
          goto LABEL_40;
        }
        if (v73 < v87 && v71 != __p)
        {
          p_p = (void **)&v89;
          v70 = &v87;
          goto LABEL_39;
        }
LABEL_40:
        --v63;
      }
      while (v63);
      v75 = v88;
      if ((float)((float)v87 * a9) > (float)v88)
LABEL_50:
        sub_20EDD1370((uint64_t)v94 + 40 * __p, v75, v55);
LABEL_33:
      ++v55;
    }
    while (v55 != v57);
  }
  if (a8)
  {
    sub_20EDD14C0(a7, &v94, (uint64_t)a4, a5);
  }
  else
  {
    __p = 0;
    v91 = 0xCCCCCCCCCCCCCCCDLL * ((v95 - (_BYTE *)v94) >> 3);
    sub_20EDD1910((uint64_t *)&__p, &v94, (uint64_t)a4, a5);
  }
  v78 = a4;
  v76 = *a4;
  v77 = v78[1];
  v79 = (char *)v94;
  if (v94)
  {
    v80 = v95;
    v81 = v94;
    if (v95 != v94)
    {
      v82 = v95;
      do
      {
        v84 = (void *)*((_QWORD *)v82 - 5);
        v82 -= 40;
        v83 = v84;
        if (v84)
        {
          *((_QWORD *)v80 - 4) = v83;
          operator delete(v83);
        }
        v80 = v82;
      }
      while (v82 != v79);
      v81 = v94;
    }
    v95 = v79;
    operator delete(v81);
  }
  return (v77 - v76) >> 2;
}

void sub_20EDCB854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  sub_20EDD1D4C(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_20EDCB89C(_QWORD *a1, _QWORD *a2, char **a3, char **a4, uint64_t a5, uint64_t a6, uint64_t a7, float a8)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  void *v48;
  char *v49;
  char *v50;
  char *v51;
  void *v52;
  void *v53;
  void *__p;
  char *v55;
  uint64_t v56;
  _QWORD v57[7];
  uint64_t v58;
  float v59;
  _QWORD v60[2];

  v60[0] = a6;
  v60[1] = a7;
  v59 = a8;
  v58 = a5;
  a3[1] = *a3;
  a4[1] = *a4;
  v13 = a1[1] - *a1;
  v14 = v13 >> 6;
  v15 = *a3;
  if (v13 >> 6 <= (unint64_t)((a3[2] - *a3) >> 2))
    goto LABEL_13;
  if (v13 < 0)
    sub_20E867F44();
  v16 = a3[1];
  v17 = (char *)operator new((unint64_t)v13 >> 4);
  v18 = v16 - v15;
  v19 = &v17[(v16 - v15) & 0xFFFFFFFFFFFFFFFCLL];
  v20 = v19;
  if (v16 != v15)
  {
    if ((unint64_t)(v18 - 4) < 0x2C)
    {
      v20 = &v17[(v16 - v15) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_10:
        v29 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v20 - 1) = v29;
        v20 -= 4;
      }
      while (v16 != v15);
      goto LABEL_11;
    }
    v20 = &v17[(v16 - v15) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v16[-(v18 & 0xFFFFFFFFFFFFFFFCLL)] - v17) < 0x20)
      goto LABEL_10;
    v21 = v18 >> 2;
    v22 = ((unint64_t)(v18 - 4) >> 2) + 1;
    v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
    v24 = &v16[-v23];
    v20 = &v19[-v23];
    v25 = &v17[4 * v21 - 16];
    v26 = (__int128 *)(v16 - 16);
    v27 = v22 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v28 = *v26;
      *((_OWORD *)v25 - 1) = *(v26 - 1);
      *(_OWORD *)v25 = v28;
      v25 -= 32;
      v26 -= 2;
      v27 -= 8;
    }
    while (v27);
    v16 = v24;
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_10;
  }
LABEL_11:
  *a3 = v20;
  a3[1] = v19;
  a3[2] = &v17[4 * v14];
  if (v15)
    operator delete(v15);
LABEL_13:
  v30 = a2[1] - *a2;
  v31 = v30 >> 6;
  v32 = *a4;
  if (v30 >> 6 <= (unint64_t)((a4[2] - *a4) >> 2))
    goto LABEL_25;
  if (v30 < 0)
    sub_20E867F44();
  v33 = a4[1];
  v34 = (char *)operator new((unint64_t)v30 >> 4);
  v35 = v33 - v32;
  v36 = &v34[(v33 - v32) & 0xFFFFFFFFFFFFFFFCLL];
  v37 = v36;
  if (v33 != v32)
  {
    if ((unint64_t)(v35 - 4) < 0x2C)
    {
      v37 = &v34[(v33 - v32) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_22:
        v46 = *((_DWORD *)v33 - 1);
        v33 -= 4;
        *((_DWORD *)v37 - 1) = v46;
        v37 -= 4;
      }
      while (v33 != v32);
      goto LABEL_23;
    }
    v37 = &v34[(v33 - v32) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v33[-(v35 & 0xFFFFFFFFFFFFFFFCLL)] - v34) < 0x20)
      goto LABEL_22;
    v38 = v35 >> 2;
    v39 = ((unint64_t)(v35 - 4) >> 2) + 1;
    v40 = 4 * (v39 & 0x7FFFFFFFFFFFFFF8);
    v41 = &v33[-v40];
    v37 = &v36[-v40];
    v42 = &v34[4 * v38 - 16];
    v43 = (__int128 *)(v33 - 16);
    v44 = v39 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 8;
    }
    while (v44);
    v33 = v41;
    if (v39 != (v39 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_22;
  }
LABEL_23:
  *a4 = v37;
  a4[1] = v36;
  a4[2] = &v34[4 * v31];
  if (v32)
    operator delete(v32);
LABEL_25:
  if (a1[1] - *a1 < 0x80uLL)
    return 0;
  v57[0] = &v59;
  v57[1] = v60;
  v57[2] = a1;
  v57[3] = &v58;
  v57[4] = a2;
  v57[5] = a4;
  v57[6] = a3;
  if (a5 == 1)
  {
    __p = 0;
    v55 = 0;
    v56 = 0;
    sub_20EDD2150(v57, (uint64_t)&__p);
    v48 = __p;
    if (__p)
    {
      v55 = (char *)__p;
LABEL_38:
      operator delete(v48);
    }
  }
  else
  {
    __p = 0;
    v55 = 0;
    v56 = 0;
    sub_20EDD3050((uint64_t)v57, (uint64_t)&__p);
    v49 = (char *)__p;
    if (__p)
    {
      v50 = v55;
      v48 = __p;
      if (v55 != __p)
      {
        v51 = v55;
        do
        {
          v53 = (void *)*((_QWORD *)v51 - 5);
          v51 -= 40;
          v52 = v53;
          if (v53)
          {
            *((_QWORD *)v50 - 4) = v52;
            operator delete(v52);
          }
          v50 = v51;
        }
        while (v51 != v49);
        v48 = __p;
      }
      v55 = v49;
      goto LABEL_38;
    }
  }
  return (a3[1] - *a3) >> 2;
}

void sub_20EDCBBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20EDD1D4C(&a9);
  _Unwind_Resume(a1);
}

void sub_20EDCBBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EDCBBE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t k;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 576);
  v2 = *(_QWORD *)(a1 + 584);
  if (v1 != v2)
  {
    v4 = a1 + 112;
    *(_OWORD *)(a1 + 168) = xmmword_210378590;
    *(_OWORD *)(a1 + 184) = xmmword_2103785A0;
    *(_QWORD *)(a1 + 120) = 8;
    v5 = (uint64_t *)(a1 + 232);
    v6 = *(uint64_t **)(a1 + 240);
    v7 = 68;
    if (*(_QWORD *)(a1 + 248))
      v7 = 0;
    *(_QWORD *)(a1 + 256) = v6;
    if (v6 != v5)
    {
      v8 = v6;
      v9 = v6[2];
      i = v6[3];
      if (v9 != i)
        goto LABEL_8;
      while (1)
      {
        v8 = (uint64_t *)v8[1];
        if (v8 == v5)
          break;
        v9 = v8[2];
        for (i = v8[3]; v9 != i; v9 += 120)
        {
LABEL_8:
          *(_QWORD *)(v9 + 8) = *(_QWORD *)v9;
          *(_QWORD *)(v9 + 32) = *(_QWORD *)(v9 + 24);
          *(_BYTE *)(v9 + 52) = 0;
        }
      }
    }
    if (*(_QWORD *)(a1 + 528) == *(_QWORD *)(a1 + 536))
    {
      v14 = v2 - v1;
      *(_QWORD *)(a1 + 264) = 0;
      *(_QWORD *)(a1 + 272) = v7;
      *(_QWORD *)(a1 + 256) = v6;
      while (v6 != v5)
      {
        v15 = v6[2];
        for (j = v6[3]; v15 != j; v15 += 120)
        {
          *(_QWORD *)(v15 + 8) = *(_QWORD *)v15;
          *(_QWORD *)(v15 + 32) = *(_QWORD *)(v15 + 24);
          *(_BYTE *)(v15 + 52) = 0;
        }
        v6 = (uint64_t *)v6[1];
      }
      *(_QWORD *)(a1 + 112) = 0;
      *(_QWORD *)(a1 + 200) = 1;
      v17 = sub_20EDCC2FC(v5, 0);
      *(_QWORD *)(a1 + 112) = v17;
      v18 = v14 << 26;
      sub_20EDCC3EC(v4, v17, v1, (unsigned int *)&v18, 0);
    }
    else
    {
      *(_QWORD *)(a1 + 264) = 0;
      *(_QWORD *)(a1 + 272) = v7;
      *(_QWORD *)(a1 + 256) = v6;
      while (v6 != v5)
      {
        v11 = v6[2];
        for (k = v6[3]; v11 != k; v11 += 120)
        {
          *(_QWORD *)(v11 + 8) = *(_QWORD *)v11;
          *(_QWORD *)(v11 + 32) = *(_QWORD *)(v11 + 24);
          *(_BYTE *)(v11 + 52) = 0;
        }
        v6 = (uint64_t *)v6[1];
      }
      *(_QWORD *)(a1 + 112) = 0;
      *(_QWORD *)(a1 + 200) = 1;
      v13 = sub_20EDCC2FC(v5, 0);
      *(_QWORD *)(a1 + 112) = v13;
      sub_20EDCD240(v4, v13, v1, a1 + 528, 0);
    }
  }
}

void sub_20EDCBDD4(_QWORD *a1@<X0>, unsigned int **a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a3)
  {
    v7 = (char *)a2[1] - (char *)*a2;
    if (v7)
    {
      sub_20E93DC84((uint64_t)a4, v7 >> 2);
      v8 = *a2;
      v9 = a2[1];
      v10 = (_DWORD *)*a4;
      if (v8 != v9)
      {
        v11 = (_QWORD *)*a1;
        do
        {
          v12 = *v8;
          v13 = &v11[8 * v12];
          if (*v13 | v13[1] | v13[2] | v13[3] | v13[4] | v13[5] | v13[6] | v13[7])
            *v10++ = v12;
          ++v8;
        }
        while (v8 != v9);
      }
    }
    else
    {
      v10 = 0;
    }
    goto LABEL_15;
  }
  v14 = a1[1] - *a1;
  if (v14)
  {
    sub_20E93DC84((uint64_t)a4, v14 >> 6);
    v15 = (_QWORD *)*a1;
    v16 = a1[1];
    v10 = (_DWORD *)*a4;
    v17 = v16 - *a1;
    if (v16 != *a1)
    {
      v18 = 0;
      v19 = v17 >> 6;
      do
      {
        if (*v15 | v15[1] | v15[2] | v15[3] | v15[4] | v15[5] | v15[6] | v15[7])
          *v10++ = v18;
        ++v18;
        v15 += 8;
      }
      while (v19 != v18);
    }
LABEL_15:
    if (v10 == (_DWORD *)a4[1])
      return;
    goto LABEL_16;
  }
  v10 = 0;
  if (!a4[1])
    return;
LABEL_16:
  a4[1] = v10;
}

void sub_20EDCBF50(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EDCBF70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t k;
  char *v14;
  char *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  uint64_t v24;
  void *__dst;
  _DWORD *v26;
  uint64_t v27;

  v1 = *(_QWORD *)(a1 + 616);
  v2 = *(_QWORD *)(a1 + 624);
  if (v1 != v2)
  {
    *(_QWORD *)(a1 + 344) = 16;
    *(_OWORD *)(a1 + 352) = xmmword_2103785B0;
    *(_QWORD *)(a1 + 368) = 128;
    *(_QWORD *)(a1 + 296) = 8;
    v4 = *(uint64_t **)(a1 + 416);
    v5 = 68;
    if (*(_QWORD *)(a1 + 424))
      v5 = 0;
    *(_QWORD *)(a1 + 440) = 0;
    *(_QWORD *)(a1 + 448) = v5;
    v6 = (uint64_t *)(a1 + 408);
    *(_QWORD *)(a1 + 432) = v4;
    while (v4 != v6)
    {
      v7 = v4[2];
      for (i = v4[3]; v7 != i; v7 += 120)
      {
        *(_QWORD *)(v7 + 8) = *(_QWORD *)v7;
        *(_QWORD *)(v7 + 32) = *(_QWORD *)(v7 + 24);
        *(_BYTE *)(v7 + 52) = 0;
      }
      v4 = (uint64_t *)v4[1];
    }
    v9 = (uint64_t *)(a1 + 288);
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 376) = 0;
    if (*(_QWORD *)(a1 + 528) == *(_QWORD *)(a1 + 536))
    {
      __dst = 0;
      v26 = 0;
      v27 = 0;
      sub_20E93DC84((uint64_t)&__dst, (v2 - v1) >> 6);
      v14 = *(char **)(a1 + 624);
      v15 = *(char **)(a1 + 616);
      v16 = __dst;
      v17 = v14 - v15;
      if (v14 != v15)
      {
        v18 = 0;
        v19 = v17 >> 6;
        do
        {
          if (*(_QWORD *)v15 | *((_QWORD *)v15 + 1) | *((_QWORD *)v15 + 2) | *((_QWORD *)v15 + 3) | *((_QWORD *)v15 + 4) | *((_QWORD *)v15 + 5) | *((_QWORD *)v15 + 6) | *((_QWORD *)v15 + 7))
            *v16++ = v18;
          ++v18;
          v15 += 64;
        }
        while (v19 != v18);
      }
      if (v16 != v26)
        v26 = v16;
      v20 = *(uint64_t **)(a1 + 416);
      v21 = 68;
      if (*(_QWORD *)(a1 + 424))
        v21 = 0;
      *(_QWORD *)(a1 + 440) = 0;
      *(_QWORD *)(a1 + 448) = v21;
      *(_QWORD *)(a1 + 432) = v20;
      while (v20 != v6)
      {
        v22 = v20[2];
        for (j = v20[3]; v22 != j; v22 += 120)
        {
          *(_QWORD *)(v22 + 8) = *(_QWORD *)v22;
          *(_QWORD *)(v22 + 32) = *(_QWORD *)(v22 + 24);
          *(_BYTE *)(v22 + 52) = 0;
        }
        v20 = (uint64_t *)v20[1];
      }
    }
    else
    {
      sub_20EDCBDD4((_QWORD *)(a1 + 616), (unsigned int **)(a1 + 528), 1, &__dst);
      v10 = *(uint64_t **)(a1 + 416);
      v11 = 68;
      if (*(_QWORD *)(a1 + 424))
        v11 = 0;
      *(_QWORD *)(a1 + 440) = 0;
      *(_QWORD *)(a1 + 448) = v11;
      *(_QWORD *)(a1 + 432) = v10;
      while (v10 != v6)
      {
        v12 = v10[2];
        for (k = v10[3]; v12 != k; v12 += 120)
        {
          *(_QWORD *)(v12 + 8) = *(_QWORD *)v12;
          *(_QWORD *)(v12 + 32) = *(_QWORD *)(v12 + 24);
          *(_BYTE *)(v12 + 52) = 0;
        }
        v10 = (uint64_t *)v10[1];
      }
    }
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 376) = 1;
    v24 = sub_20EDCC2FC(v6, 0);
    *v9 = v24;
    sub_20EDCD240(a1 + 288, v24, v1, (uint64_t)&__dst, 0);
    if (__dst)
    {
      v26 = __dst;
      operator delete(__dst);
    }
  }
}

void sub_20EDCC240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void **sub_20EDCC268(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 12);
        if (v5)
        {
          *((_QWORD *)v3 - 11) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 15);
        if (v6)
        {
          *((_QWORD *)v3 - 14) = v6;
          operator delete(v6);
        }
        v3 -= 120;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20EDCC2E8()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EDCC2FC(uint64_t *a1, int a2)
{
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v4 = a1[5];
  if (v4 > 0x43)
  {
    v6 = a1[4] + 1;
    v7 = a1[2];
    if (v6 >= v7)
    {
      a1[4] = v7;
      v9 = operator new(0x28uLL);
      *((_QWORD *)v9 + 3) = 0;
      *((_QWORD *)v9 + 4) = 0;
      *((_QWORD *)v9 + 2) = 0;
      v10 = *a1;
      *(_QWORD *)(v10 + 8) = v9;
      *a1 = (uint64_t)v9;
      *(_QWORD *)v9 = v10;
      *((_QWORD *)v9 + 1) = a1;
      a1[2] = v7 + 1;
      a1[3] = (uint64_t)v9;
      sub_20EDCCF18((void **)v9 + 2, 0x44uLL);
      v8 = a1[3];
    }
    else
    {
      a1[4] = v6;
      v8 = *(_QWORD *)(a1[3] + 8);
      a1[3] = v8;
    }
    a1[5] = 1;
    result = *(_QWORD *)(v8 + 16);
  }
  else
  {
    result = *(_QWORD *)(a1[3] + 16) + 120 * v4;
    a1[5] = v4 + 1;
  }
  *(_DWORD *)(result + 48) = a2;
  return result;
}

void sub_20EDCC3D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EDCC268((void **)va);
  _Unwind_Resume(a1);
}

void sub_20EDCC3EC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unsigned int v8;
  unsigned int v9;
  size_t v10;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unsigned __int16 *v17;
  unint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t **v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  unsigned int *v29;
  unsigned int *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  unsigned int *v37;
  int64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  _OWORD *v43;
  unsigned int *v44;
  uint64_t v45;
  __int128 v46;
  unsigned int v47;
  uint64_t *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t **v54;
  int8x16_t *v55;
  __int16 *v56;
  unsigned int v57;
  __int16 v58;
  uint64_t v59;
  int8x16_t *v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  unsigned int v65;
  int8x16_t *v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  unsigned int v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t *v76;
  size_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  _QWORD *v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _BYTE *v95;
  uint64_t *v96;
  char *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  _OWORD *v103;
  char *v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  char *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t *v112;
  uint64_t **v113;
  unsigned __int8 v114;
  const char *v115;
  size_t v116;
  void **v117;
  uint64_t v118;
  uint64_t v119;
  void **v120;
  uint64_t v121;
  uint64_t v122;
  NSObject *v123;
  std::__shared_weak_count *v124;
  unint64_t *p_shared_owners;
  unint64_t v126;
  unsigned int v127;
  unsigned int v128;
  size_t v129;
  char **v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int *v135;
  uint64_t v136;
  _QWORD *v138;
  _QWORD v139[3];
  int v140;
  const char *v141;
  int v142;
  const char *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  uint64_t v146;
  uint64_t **v147;
  uint64_t *v148;
  uint64_t v149;
  int v150;
  unsigned __int16 v151;
  void *v152[2];
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  os_log_t v156;
  void **v157;
  size_t v158;
  unint64_t v159;
  char v160;
  void *v161[2];
  unint64_t v162;
  char v163;

  v8 = *a4;
  v9 = a4[1];
  if (*a4 > v9)
    v10 = -(uint64_t)(v8 - v9);
  else
    v10 = v9 - v8;
  if (*(_QWORD *)(a1 + 72) > v10 || *(_QWORD *)(a1 + 56) == a5)
  {
    *(_BYTE *)(a2 + 52) = 1;
    sub_20EDCDD84(a2, v8, v9, v10);
    return;
  }
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 80);
  v150 = *(_DWORD *)(a1 + 48);
  v151 = v12;
  *(_OWORD *)v152 = 0u;
  v153 = 0u;
  v154 = 0u;
  v155 = v13;
  sub_20EDCE08C((uint64_t)&v150, a3, a4);
  v15 = *a4;
  v14 = a4[1];
  if (v14 < *a4)
    v16 = -(uint64_t)(v15 - v14);
  else
    v16 = v14 - v15;
  v17 = (unsigned __int16 *)*((_QWORD *)&v153 + 1);
  v18 = (uint64_t)(v154 - *((_QWORD *)&v153 + 1)) >> 1;
  v138 = (_QWORD *)a2;
  if (v16 <= v18)
  {
    if (v16 < v18)
      *(_QWORD *)&v154 = *((_QWORD *)&v153 + 1) + 2 * v16;
  }
  else
  {
    sub_20EDCE4F0((uint64_t)&v153 + 8, v16 - v18);
    v15 = *a4;
    v14 = a4[1];
    v17 = (unsigned __int16 *)*((_QWORD *)&v153 + 1);
  }
  if (v15 != v14)
  {
    v55 = (int8x16_t *)((char *)v152[0] + 32);
    v56 = (__int16 *)v17;
    v57 = v15;
    do
    {
      if (v151)
      {
        v59 = 0;
        v60 = (int8x16_t *)(a3 + ((unint64_t)v57 << 6));
        v61 = *v60;
        v62 = v60[1];
        v63 = v60[2];
        v64 = v60[3];
        v58 = -1;
        v65 = -1;
        v66 = v55;
        do
        {
          v67 = v66[-2];
          v68 = v66[-1];
          v69 = *v66;
          v70 = v66[1];
          v66 += 4;
          v71 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v68, v62)), vcntq_s8(veorq_s8(v67, v61))), vaddq_s8(vcntq_s8(veorq_s8(v69, v63)), vcntq_s8(veorq_s8(v70, v64)))));
          if (v71 < v65)
          {
            v58 = v59;
            v65 = v71;
          }
          ++v59;
        }
        while (v151 != v59);
      }
      else
      {
        v58 = -1;
      }
      *v56++ = v58;
      ++v57;
    }
    while (v57 != v14);
  }
  v133 = a5;
  v136 = a3;
  v148 = 0;
  v149 = 0;
  v147 = &v148;
  v19 = (unsigned __int16 *)v154;
  if (v17 == (unsigned __int16 *)v154)
    goto LABEL_158;
  v135 = a4;
  do
  {
    v21 = *v17;
    v22 = v148;
    v23 = &v148;
    v24 = &v148;
    if (v148)
    {
      while (1)
      {
        while (1)
        {
          v24 = (uint64_t **)v22;
          v25 = v22[4];
          if (v25 <= v21)
            break;
          v22 = *v24;
          v23 = v24;
          if (!*v24)
            goto LABEL_26;
        }
        if (v25 >= v21)
          break;
        v22 = v24[1];
        if (!v22)
        {
          v23 = v24 + 1;
          goto LABEL_26;
        }
      }
      v26 = (uint64_t *)v24;
      v29 = (unsigned int *)v24[6];
      v28 = v24[7];
      if (v29 < (unsigned int *)v28)
      {
LABEL_17:
        *v29 = v15;
        v20 = (uint64_t)(v29 + 1);
        goto LABEL_18;
      }
    }
    else
    {
LABEL_26:
      v26 = (uint64_t *)operator new(0x40uLL);
      v26[4] = v21;
      v26[5] = 0;
      v26[6] = 0;
      v26[7] = 0;
      *v26 = 0;
      v26[1] = 0;
      v26[2] = (uint64_t)v24;
      *v23 = v26;
      v27 = v26;
      if (*v147)
      {
        v147 = (uint64_t **)*v147;
        v27 = *v23;
      }
      sub_20E868578(v148, v27);
      ++v149;
      v29 = (unsigned int *)v26[6];
      v28 = (uint64_t *)v26[7];
      if (v29 < (unsigned int *)v28)
        goto LABEL_17;
    }
    v30 = (unsigned int *)v26[5];
    v31 = v29 - v30;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 62)
      sub_20E867F44();
    v33 = (char *)v28 - (char *)v30;
    if (v33 >> 1 > v32)
      v32 = v33 >> 1;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
      v34 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      if (v34 >> 62)
        sub_20E877A38();
      v35 = v34;
      v36 = operator new(4 * v34);
      v34 = v35;
      v37 = (unsigned int *)&v36[4 * v31];
      *v37 = v15;
      v20 = (uint64_t)(v37 + 1);
      v38 = (char *)v29 - (char *)v30;
      if (v29 == v30)
        goto LABEL_49;
LABEL_40:
      v39 = v38 - 4;
      if (v39 < 0x2C)
        goto LABEL_176;
      if ((unint64_t)((char *)v30 - v36) < 0x20)
        goto LABEL_176;
      v40 = (v39 >> 2) + 1;
      v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
      v42 = &v29[v41 / 0xFFFFFFFFFFFFFFFCLL];
      v37 = (unsigned int *)((char *)v37 - v41);
      v43 = &v36[4 * v31 - 16];
      v44 = v29 - 4;
      v45 = v40 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v46 = *(_OWORD *)v44;
        *(v43 - 1) = *((_OWORD *)v44 - 1);
        *v43 = v46;
        v43 -= 2;
        v44 -= 8;
        v45 -= 8;
      }
      while (v45);
      v29 = v42;
      if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_176:
        do
        {
          v47 = *--v29;
          *--v37 = v47;
        }
        while (v29 != v30);
      }
      goto LABEL_49;
    }
    v36 = 0;
    v37 = (unsigned int *)(4 * v31);
    *(_DWORD *)(4 * v31) = v15;
    v20 = 4 * v31 + 4;
    v38 = (char *)v29 - (char *)v30;
    if (v29 != v30)
      goto LABEL_40;
LABEL_49:
    v26[5] = (uint64_t)v37;
    v26[6] = v20;
    v26[7] = (uint64_t)&v36[4 * v34];
    if (v30)
      operator delete(v30);
LABEL_18:
    v26[6] = v20;
    ++v15;
    ++v17;
  }
  while (v17 != v19);
  v48 = (uint64_t *)v147;
  if (v147 != &v148)
  {
    v49 = v135[1];
    v50 = v49 - *v135;
    if (v49 < *v135)
      v50 = -(uint64_t)(*v135 - v49);
    v51 = (uint64_t *)v147;
    v52 = (uint64_t)v138;
    while (2)
    {
      if (v50 != (v51[6] - v51[5]) >> 2)
      {
        v53 = (uint64_t *)v51[1];
        if (v53)
        {
          do
          {
            v54 = (uint64_t **)v53;
            v53 = (uint64_t *)*v53;
          }
          while (v53);
        }
        else
        {
          do
          {
            v54 = (uint64_t **)v51[2];
            v75 = *v54 == v51;
            v51 = (uint64_t *)v54;
          }
          while (!v75);
        }
        v51 = (uint64_t *)v54;
        if (v54 != &v148)
          continue;
        v130 = (char **)(v138 + 3);
        v134 = v133 + 1;
        while (2)
        {
          if (v48[5] == v48[6])
            goto LABEL_110;
          v79 = a1;
          v80 = *(_QWORD *)(a1 + 88);
          *(_QWORD *)(a1 + 88) = v80 + 1;
          v81 = sub_20EDCC2FC((uint64_t *)(a1 + 120), v80);
          v82 = v81;
          v83 = v48[4];
          v84 = (char *)v152[0];
          v85 = v138;
          v87 = (char *)v138[4];
          v86 = v138[5];
          if ((unint64_t)v87 < v86)
          {
            *(_QWORD *)v87 = v81;
            v88 = (uint64_t)(v87 + 8);
            goto LABEL_109;
          }
          v89 = *v130;
          v90 = v87 - *v130;
          v91 = v90 >> 3;
          v92 = (v90 >> 3) + 1;
          if (v92 >> 61)
            sub_20E867F44();
          v93 = v86 - (_QWORD)v89;
          if (v93 >> 2 > v92)
            v92 = v93 >> 2;
          if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
            v94 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v94 = v92;
          v131 = (char *)v152[0];
          v132 = v48[4];
          if (v94)
          {
            if (v94 >> 61)
              sub_20E877A38();
            v95 = operator new(8 * v94);
            v96 = (uint64_t *)&v95[8 * v91];
            *v96 = v82;
            v88 = (uint64_t)(v96 + 1);
            v97 = (char *)(v87 - v89);
            if (v87 != v89)
            {
LABEL_96:
              v98 = (unint64_t)(v97 - 8);
              if (v98 < 0x58)
              {
                v85 = v138;
                goto LABEL_105;
              }
              v99 = v87 - v95 - v90;
              v85 = v138;
              if (v99 < 0x20)
                goto LABEL_177;
              v100 = (v98 >> 3) + 1;
              v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
              v102 = &v87[-v101];
              v96 = (uint64_t *)((char *)v96 - v101);
              v103 = &v95[8 * v91 - 16];
              v104 = v87 - 16;
              v105 = v100 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v106 = *(_OWORD *)v104;
                *(v103 - 1) = *((_OWORD *)v104 - 1);
                *v103 = v106;
                v103 -= 2;
                v104 -= 32;
                v105 -= 4;
              }
              while (v105);
              v87 = v102;
              if (v100 != (v100 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_177:
                do
                {
LABEL_105:
                  v107 = *((_QWORD *)v87 - 1);
                  v87 -= 8;
                  *--v96 = v107;
                }
                while (v87 != v89);
              }
              v87 = *v130;
              v85[3] = v96;
              v85[4] = v88;
              v85[5] = &v95[8 * v94];
              if (v87)
LABEL_107:
                operator delete(v87);
LABEL_108:
              v79 = a1;
              v84 = v131;
              v83 = v132;
LABEL_109:
              v108 = &v84[64 * v83];
              v85[4] = v88;
              v109 = *(_OWORD *)v108;
              v110 = *((_OWORD *)v108 + 1);
              v111 = *((_OWORD *)v108 + 2);
              *(_OWORD *)(v82 + 101) = *((_OWORD *)v108 + 3);
              *(_OWORD *)(v82 + 85) = v111;
              *(_OWORD *)(v82 + 69) = v110;
              *(_OWORD *)(v82 + 53) = v109;
              sub_20EDCD240(v79, v82, v136, (uint64_t)(v48 + 5), v134);
LABEL_110:
              v112 = (uint64_t *)v48[1];
              if (v112)
              {
                do
                {
                  v113 = (uint64_t **)v112;
                  v112 = (uint64_t *)*v112;
                }
                while (v112);
              }
              else
              {
                do
                {
                  v113 = (uint64_t **)v48[2];
                  v75 = *v113 == v48;
                  v48 = (uint64_t *)v113;
                }
                while (!v75);
              }
              v48 = (uint64_t *)v113;
              if (v113 == &v148)
                goto LABEL_158;
              continue;
            }
          }
          else
          {
            v95 = 0;
            v96 = (uint64_t *)(8 * v91);
            *(_QWORD *)(8 * v91) = v82;
            v88 = 8 * v91 + 8;
            v97 = (char *)(v87 - v89);
            if (v87 != v89)
              goto LABEL_96;
          }
          break;
        }
        v85 = v138;
        v138[3] = v96;
        v138[4] = v88;
        v138[5] = &v95[8 * v94];
        if (v87)
          goto LABEL_107;
        goto LABEL_108;
      }
      break;
    }
    sub_20EDCD14C(&v146);
    if (**(int **)(v146 + 56) <= 2)
    {
      v72 = *(unsigned __int8 *)(v146 + 72);
      v73 = sub_20E8C31DC(v146, "OSLogSurrogateAppender", 1, 0);
      v74 = v73 ? v73 + 16 : 0;
      v75 = !v72 && v73 == 0;
      if (!v75)
      {
        v139[0] = &v146;
        v139[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v139[2] = std::chrono::system_clock::now().__d_.__rep_;
        v140 = 2;
        v141 = "unknown file";
        v142 = 977;
        v144 = 0;
        v145 = 0;
        v143 = "unknown function";
        v76 = (uint64_t *)(v146 + 16);
        if (*(char *)(v146 + 39) < 0)
        {
          v78 = *(const char **)(v146 + 16);
          v77 = *(_QWORD *)(v146 + 24);
        }
        else
        {
          v77 = *(unsigned __int8 *)(v146 + 39);
          v78 = (const char *)(*(_QWORD *)v139[0] + 16);
        }
        v114 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v114 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&v156);
          sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&v156);
          if ((_BYTE)v159 && SHIBYTE(v158) < 0)
            operator delete(v156);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A50F >= 0)
          v115 = (const char *)&xmmword_254A4A4F8;
        else
          v115 = (const char *)xmmword_254A4A4F8;
        if (byte_254A4A50F >= 0)
          v116 = byte_254A4A50F;
        else
          v116 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
        v156 = os_log_create(v115, v78);
        v117 = (void **)&v157;
        if (v116 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v116 >= 0x17)
        {
          v118 = (v116 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v116 | 7) != 0x17)
            v118 = v116 | 7;
          v119 = v118 + 1;
          v117 = (void **)operator new(v118 + 1);
          v158 = v116;
          v159 = v119 | 0x8000000000000000;
          v157 = v117;
        }
        else
        {
          HIBYTE(v159) = v116;
          if (!v116)
          {
LABEL_132:
            *((_BYTE *)v117 + v116) = 0;
            v160 = 1;
            v120 = v161;
            if (v77 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v77 >= 0x17)
            {
              v121 = (v77 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v77 | 7) != 0x17)
                v121 = v77 | 7;
              v122 = v121 + 1;
              v120 = (void **)operator new(v121 + 1);
              v161[1] = (void *)v77;
              v162 = v122 | 0x8000000000000000;
              v161[0] = v120;
            }
            else
            {
              HIBYTE(v162) = v77;
              if (!v77)
              {
LABEL_140:
                *((_BYTE *)v120 + v77) = 0;
                v163 = 1;
                v123 = v156;
                if (SHIBYTE(v162) < 0)
                  operator delete(v161[0]);
                if (v160 && SHIBYTE(v159) < 0)
                  operator delete(v157);
                if (v156)
                  os_release(v156);
                sub_20EDCE680((int)&v156, v74, v76, v123, OS_LOG_TYPE_DEBUG);
                v52 = (uint64_t)v138;
                if (v72)
                {
                  sub_20E8C003C((uint64_t)v139, "All features assigned to one cluster. This is OK, but could be a sign of a problem with the data");
                  sub_20E863570((uint64_t)v139);
                }
                sub_20E863570((uint64_t)v139);
                v124 = v145;
                if (v145)
                {
                  p_shared_owners = (unint64_t *)&v145->__shared_owners_;
                  do
                    v126 = __ldaxr(p_shared_owners);
                  while (__stlxr(v126 - 1, p_shared_owners));
                  if (!v126)
                  {
                    ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                    std::__shared_weak_count::__release_weak(v124);
                  }
                }
                goto LABEL_154;
              }
            }
            memmove(v120, v78, v77);
            goto LABEL_140;
          }
        }
        memmove(v117, v115, v116);
        goto LABEL_132;
      }
    }
LABEL_154:
    *(_BYTE *)(v52 + 52) = 1;
    v127 = *v135;
    v128 = v135[1];
    if (*v135 > v128)
      v129 = -(uint64_t)(v127 - v128);
    else
      v129 = v128 - v127;
    sub_20EDCDD84(v52, v127, v128, v129);
  }
LABEL_158:
  sub_20E991800((uint64_t)&v147, v148);
  if (*((_QWORD *)&v153 + 1))
  {
    *(_QWORD *)&v154 = *((_QWORD *)&v153 + 1);
    operator delete(*((void **)&v153 + 1));
  }
  if (v152[0])
  {
    v152[1] = v152[0];
    operator delete(v152[0]);
  }
}

void sub_20EDCCE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,_QWORD *a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  if (*(_BYTE *)(v31 - 136))
  {
    if (*(char *)(v31 - 137) < 0)
      operator delete(*(void **)(v31 - 160));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a18);
  sub_20E991800((uint64_t)&a28, a29);
  sub_20EDCDD44(&a31);
  _Unwind_Resume(a1);
}

void sub_20EDCCF18(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  void *v26;
  void *v27;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (0xEEEEEEEEEEEEEEEFLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v5[120 * a2];
      v12 = 120 * a2;
      do
      {
        *(_QWORD *)(v5 + 45) = 0;
        *((_OWORD *)v5 + 1) = 0uLL;
        *((_OWORD *)v5 + 2) = 0uLL;
        *(_OWORD *)v5 = 0uLL;
        v5 += 120;
        v12 -= 120;
      }
      while (v12);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0xEEEEEEEEEEEEEEEFLL * ((v5 - (_BYTE *)*a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0x222222222222222)
      sub_20E867F44();
    v8 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - (_BYTE *)*a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x111111111111111)
      v9 = 0x222222222222222;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x222222222222222)
        sub_20E877A38();
      v10 = (char *)operator new(120 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = &v10[120 * v6];
    v14 = 120 * a2;
    v15 = &v13[120 * a2];
    v16 = v13;
    do
    {
      *(_QWORD *)(v16 + 45) = 0;
      *((_OWORD *)v16 + 1) = 0uLL;
      *((_OWORD *)v16 + 2) = 0uLL;
      *(_OWORD *)v16 = 0uLL;
      v16 += 120;
      v14 -= 120;
    }
    while (v14);
    v17 = &v10[120 * v9];
    v18 = (char *)*a1;
    if (v5 == *a1)
    {
      *a1 = v13;
      a1[1] = v15;
      a1[2] = v17;
    }
    else
    {
      v19 = 0;
      do
      {
        v20 = &v13[v19];
        v21 = &v5[v19];
        *((_QWORD *)v20 - 14) = 0;
        *((_QWORD *)v20 - 13) = 0;
        *(_OWORD *)(v20 - 120) = *(_OWORD *)&v5[v19 - 120];
        *((_QWORD *)v20 - 13) = *(_QWORD *)&v5[v19 - 104];
        *((_QWORD *)v21 - 15) = 0;
        *((_QWORD *)v21 - 14) = 0;
        *((_QWORD *)v21 - 13) = 0;
        *((_QWORD *)v20 - 11) = 0;
        *((_QWORD *)v20 - 10) = 0;
        *((_OWORD *)v20 - 6) = *(_OWORD *)&v5[v19 - 96];
        *((_QWORD *)v20 - 10) = *(_QWORD *)&v5[v19 - 80];
        *((_QWORD *)v21 - 11) = 0;
        *((_QWORD *)v21 - 10) = 0;
        *((_QWORD *)v21 - 12) = 0;
        v22 = *(_OWORD *)&v5[v19 - 40];
        v23 = *(_OWORD *)&v5[v19 - 24];
        v24 = *(_QWORD *)&v5[v19 - 8];
        *(_OWORD *)(v20 - 56) = *(_OWORD *)&v5[v19 - 56];
        *((_QWORD *)v20 - 1) = v24;
        *(_OWORD *)(v20 - 24) = v23;
        *(_OWORD *)(v20 - 40) = v22;
        *(_OWORD *)(v20 - 72) = *(_OWORD *)&v5[v19 - 72];
        v19 -= 120;
      }
      while (&v5[v19] != v18);
      v5 = (char *)*a1;
      v25 = (char *)a1[1];
      *a1 = &v13[v19];
      a1[1] = v15;
      a1[2] = v17;
      while (v25 != v5)
      {
        v26 = (void *)*((_QWORD *)v25 - 12);
        if (v26)
        {
          *((_QWORD *)v25 - 11) = v26;
          operator delete(v26);
        }
        v27 = (void *)*((_QWORD *)v25 - 15);
        if (v27)
        {
          *((_QWORD *)v25 - 14) = v27;
          operator delete(v27);
        }
        v25 -= 120;
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_20EDCD14C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5F980);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F980))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.place_recognition");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5F978);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5F980);
  }
  *a1 = qword_254A5F978;
}

void sub_20EDCD1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5F980);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5F980);
  _Unwind_Resume(a1);
}

void sub_20EDCD240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v8;
  char *v9;
  size_t v10;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unint64_t v17;
  unsigned __int16 *v18;
  unint64_t v19;
  int8x16_t *v20;
  __int16 *v21;
  unsigned int *v22;
  __int16 v23;
  uint64_t v24;
  int8x16_t *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  unsigned int v30;
  int8x16_t *v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t **v40;
  uint64_t **v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  unsigned int *v46;
  unsigned int *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  unsigned int *v53;
  int64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  _OWORD *v59;
  unsigned int *v60;
  uint64_t v61;
  __int128 v62;
  unsigned int v63;
  uint64_t *v64;
  uint64_t *v65;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t **v68;
  int v69;
  unint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t *v73;
  size_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  uint64_t *v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  _OWORD *v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t *v110;
  uint64_t **v111;
  unsigned __int8 v112;
  const char *v113;
  size_t v114;
  void **v115;
  uint64_t v116;
  uint64_t v117;
  void **v118;
  uint64_t v119;
  uint64_t v120;
  NSObject *v121;
  std::__shared_weak_count *v122;
  unint64_t *p_shared_owners;
  unint64_t v124;
  char **v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char **v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  unsigned __int16 *v134;
  uint64_t *v135;
  _QWORD v136[3];
  int v137;
  const char *v138;
  int v139;
  const char *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  uint64_t **v144;
  uint64_t *v145;
  uint64_t v146;
  int v147;
  unsigned __int16 v148;
  void *v149[2];
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  os_log_t v153;
  void **v154;
  size_t v155;
  unint64_t v156;
  char v157;
  void *v158[2];
  unint64_t v159;
  char v160;

  v8 = *(unsigned int **)a4;
  v9 = *(char **)(a4 + 8);
  v10 = (uint64_t)&v9[-*(_QWORD *)a4] >> 2;
  if (v10 < *(_QWORD *)(a1 + 72) || *(_QWORD *)(a1 + 56) == a5)
  {
    *(_BYTE *)(a2 + 52) = 1;
    sub_20EDCEA70((_QWORD *)a2, (char *)v8, v9, v10);
    return;
  }
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 80);
  v147 = *(_DWORD *)(a1 + 48);
  v148 = v13;
  *(_OWORD *)v149 = 0u;
  v150 = 0u;
  v151 = 0u;
  v152 = v14;
  sub_20EDCEBB8((uint64_t)&v147, a3, (unsigned int **)a4);
  v16 = *(unsigned int **)a4;
  v15 = *(unsigned int **)(a4 + 8);
  v17 = ((uint64_t)v15 - *(_QWORD *)a4) >> 2;
  v18 = (unsigned __int16 *)*((_QWORD *)&v150 + 1);
  v19 = (uint64_t)(v151 - *((_QWORD *)&v150 + 1)) >> 1;
  v132 = a1;
  v133 = (_QWORD *)a2;
  if (v17 <= v19)
  {
    if (v17 < v19)
      *(_QWORD *)&v151 = *((_QWORD *)&v150 + 1) + 2 * v17;
  }
  else
  {
    sub_20EDCE4F0((uint64_t)&v150 + 8, v17 - v19);
    v16 = *(unsigned int **)a4;
    v15 = *(unsigned int **)(a4 + 8);
    v18 = (unsigned __int16 *)*((_QWORD *)&v150 + 1);
  }
  if (v16 != v15)
  {
    v20 = (int8x16_t *)((char *)v149[0] + 32);
    v21 = (__int16 *)v18;
    v22 = v16;
    do
    {
      if (v148)
      {
        v24 = 0;
        v25 = (int8x16_t *)(a3 + ((unint64_t)*v22 << 6));
        v26 = *v25;
        v27 = v25[1];
        v28 = v25[2];
        v29 = v25[3];
        v23 = -1;
        v30 = -1;
        v31 = v20;
        do
        {
          v32 = v31[-2];
          v33 = v31[-1];
          v34 = *v31;
          v35 = v31[1];
          v31 += 4;
          v36 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v33, v27)), vcntq_s8(veorq_s8(v32, v26))), vaddq_s8(vcntq_s8(veorq_s8(v34, v28)), vcntq_s8(veorq_s8(v35, v29)))));
          if (v36 < v30)
          {
            v23 = v24;
            v30 = v36;
          }
          ++v24;
        }
        while (v148 != v24);
      }
      else
      {
        v23 = -1;
      }
      *v21++ = v23;
      ++v22;
    }
    while (v22 != v15);
  }
  v127 = a5;
  v131 = a3;
  v145 = 0;
  v146 = 0;
  v144 = &v145;
  v134 = (unsigned __int16 *)v151;
  if (v18 == (unsigned __int16 *)v151)
    goto LABEL_146;
  v129 = (char **)a4;
  do
  {
    v38 = *v18;
    v39 = v145;
    v40 = &v145;
    v41 = &v145;
    if (v145)
    {
      while (1)
      {
        while (1)
        {
          v41 = (uint64_t **)v39;
          v42 = v39[4];
          if (v42 <= v38)
            break;
          v39 = *v41;
          v40 = v41;
          if (!*v41)
            goto LABEL_29;
        }
        if (v42 >= v38)
          break;
        v39 = v41[1];
        if (!v39)
        {
          v40 = v41 + 1;
          goto LABEL_29;
        }
      }
      v43 = (uint64_t *)v41;
      v46 = (unsigned int *)v41[6];
      v45 = v41[7];
      if (v46 < (unsigned int *)v45)
      {
LABEL_20:
        *v46 = *v16;
        v37 = (uint64_t)(v46 + 1);
        goto LABEL_21;
      }
    }
    else
    {
LABEL_29:
      v43 = (uint64_t *)operator new(0x40uLL);
      v43[4] = v38;
      v43[5] = 0;
      v43[6] = 0;
      v43[7] = 0;
      *v43 = 0;
      v43[1] = 0;
      v43[2] = (uint64_t)v41;
      *v40 = v43;
      v44 = v43;
      if (*v144)
      {
        v144 = (uint64_t **)*v144;
        v44 = *v40;
      }
      sub_20E868578(v145, v44);
      ++v146;
      v46 = (unsigned int *)v43[6];
      v45 = (uint64_t *)v43[7];
      if (v46 < (unsigned int *)v45)
        goto LABEL_20;
    }
    v47 = (unsigned int *)v43[5];
    v48 = v46 - v47;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 62)
      sub_20E867F44();
    v50 = (char *)v45 - (char *)v47;
    if (v50 >> 1 > v49)
      v49 = v50 >> 1;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
      v51 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    if (v51)
    {
      if (v51 >> 62)
        sub_20E877A38();
      v52 = operator new(4 * v51);
      v53 = (unsigned int *)&v52[4 * v48];
      *v53 = *v16;
      v37 = (uint64_t)(v53 + 1);
      v54 = (char *)v46 - (char *)v47;
      if (v46 == v47)
        goto LABEL_51;
LABEL_45:
      v55 = v54 - 4;
      if (v55 < 0x2C)
        goto LABEL_164;
      if ((unint64_t)((char *)v47 - v52) < 0x20)
        goto LABEL_164;
      v56 = (v55 >> 2) + 1;
      v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
      v58 = &v46[v57 / 0xFFFFFFFFFFFFFFFCLL];
      v53 = (unsigned int *)((char *)v53 - v57);
      v59 = &v52[4 * v48 - 16];
      v60 = v46 - 4;
      v61 = v56 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v62 = *(_OWORD *)v60;
        *(v59 - 1) = *((_OWORD *)v60 - 1);
        *v59 = v62;
        v59 -= 2;
        v60 -= 8;
        v61 -= 8;
      }
      while (v61);
      v46 = v58;
      if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_164:
        do
        {
          v63 = *--v46;
          *--v53 = v63;
        }
        while (v46 != v47);
      }
      goto LABEL_51;
    }
    v52 = 0;
    v53 = (unsigned int *)(4 * v48);
    *(_DWORD *)(4 * v48) = *v16;
    v37 = 4 * v48 + 4;
    v54 = (char *)v46 - (char *)v47;
    if (v46 != v47)
      goto LABEL_45;
LABEL_51:
    v43[5] = (uint64_t)v53;
    v43[6] = v37;
    v43[7] = (uint64_t)&v52[4 * v51];
    if (v47)
      operator delete(v47);
LABEL_21:
    v43[6] = v37;
    ++v16;
    ++v18;
  }
  while (v18 != v134);
  v64 = (uint64_t *)v144;
  if (v144 != &v145)
  {
    v65 = (uint64_t *)v144;
    v66 = v133;
    while (v65[6] - v65[5] != v129[1] - *v129)
    {
      v67 = (uint64_t *)v65[1];
      if (v67)
      {
        do
        {
          v68 = (uint64_t **)v67;
          v67 = (uint64_t *)*v67;
        }
        while (v67);
      }
      else
      {
        do
        {
          v68 = (uint64_t **)v65[2];
          v72 = *v68 == v65;
          v65 = (uint64_t *)v68;
        }
        while (!v72);
      }
      v65 = (uint64_t *)v68;
      if (v68 == &v145)
      {
        v135 = (uint64_t *)(a1 + 120);
        v125 = (char **)(v133 + 3);
        v130 = v127 + 1;
        while (v64[5] == v64[6])
        {
LABEL_101:
          v110 = (uint64_t *)v64[1];
          if (v110)
          {
            do
            {
              v111 = (uint64_t **)v110;
              v110 = (uint64_t *)*v110;
            }
            while (v110);
          }
          else
          {
            do
            {
              v111 = (uint64_t **)v64[2];
              v72 = *v111 == v64;
              v64 = (uint64_t *)v111;
            }
            while (!v72);
          }
          v64 = (uint64_t *)v111;
          if (v111 == &v145)
            goto LABEL_146;
        }
        v76 = v132;
        v77 = *(_QWORD *)(v132 + 88);
        *(_QWORD *)(v132 + 88) = v77 + 1;
        v78 = sub_20EDCC2FC(v135, v77);
        v79 = v78;
        v80 = v64[4];
        v81 = (char *)v149[0];
        v82 = v133;
        v84 = (char *)v133[4];
        v83 = v133[5];
        if ((unint64_t)v84 < v83)
        {
          *(_QWORD *)v84 = v78;
          v85 = (uint64_t)(v84 + 8);
          v86 = v131;
LABEL_100:
          v106 = &v81[64 * v80];
          v82[4] = v85;
          v107 = *(_OWORD *)v106;
          v108 = *((_OWORD *)v106 + 1);
          v109 = *((_OWORD *)v106 + 2);
          *(_OWORD *)(v79 + 101) = *((_OWORD *)v106 + 3);
          *(_OWORD *)(v79 + 85) = v109;
          *(_OWORD *)(v79 + 69) = v108;
          *(_OWORD *)(v79 + 53) = v107;
          sub_20EDCD240(v76, v79, v86, v64 + 5, v130);
          goto LABEL_101;
        }
        v87 = *v125;
        v88 = v84 - *v125;
        v89 = v88 >> 3;
        v90 = (v88 >> 3) + 1;
        if (v90 >> 61)
          sub_20E867F44();
        v91 = v83 - (_QWORD)v87;
        if (v91 >> 2 > v90)
          v90 = v91 >> 2;
        if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
          v92 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v92 = v90;
        v126 = (char *)v149[0];
        v128 = v64[4];
        if (v92)
        {
          if (v92 >> 61)
            sub_20E877A38();
          v93 = operator new(8 * v92);
          v94 = (uint64_t *)&v93[8 * v89];
          *v94 = v79;
          v85 = (uint64_t)(v94 + 1);
          v95 = (char *)(v84 - v87);
          if (v84 != v87)
          {
LABEL_87:
            v96 = (unint64_t)(v95 - 8);
            if (v96 < 0x58)
            {
              v82 = v133;
              goto LABEL_96;
            }
            v97 = v84 - v93 - v88;
            v82 = v133;
            if (v97 < 0x20)
              goto LABEL_165;
            v98 = (v96 >> 3) + 1;
            v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
            v100 = &v84[-v99];
            v94 = (uint64_t *)((char *)v94 - v99);
            v101 = &v93[8 * v89 - 16];
            v102 = v84 - 16;
            v103 = v98 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v104 = *(_OWORD *)v102;
              *(v101 - 1) = *((_OWORD *)v102 - 1);
              *v101 = v104;
              v101 -= 2;
              v102 -= 32;
              v103 -= 4;
            }
            while (v103);
            v84 = v100;
            if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_165:
              do
              {
LABEL_96:
                v105 = *((_QWORD *)v84 - 1);
                v84 -= 8;
                *--v94 = v105;
              }
              while (v84 != v87);
            }
            v84 = *v125;
            v82[3] = v94;
            v82[4] = v85;
            v82[5] = &v93[8 * v92];
            v86 = v131;
            v76 = v132;
            if (v84)
LABEL_98:
              operator delete(v84);
LABEL_99:
            v81 = v126;
            v80 = v128;
            goto LABEL_100;
          }
        }
        else
        {
          v93 = 0;
          v94 = (uint64_t *)(8 * v89);
          *(_QWORD *)(8 * v89) = v79;
          v85 = 8 * v89 + 8;
          v95 = (char *)(v84 - v87);
          if (v84 != v87)
            goto LABEL_87;
        }
        v82 = v133;
        v133[3] = v94;
        v133[4] = v85;
        v133[5] = &v93[8 * v92];
        v86 = v131;
        v76 = v132;
        if (v84)
          goto LABEL_98;
        goto LABEL_99;
      }
    }
    sub_20EDCD14C(&v143);
    if (**(int **)(v143 + 56) <= 2)
    {
      v69 = *(unsigned __int8 *)(v143 + 72);
      v70 = sub_20E8C31DC(v143, "OSLogSurrogateAppender", 1, 0);
      v71 = v70 ? v70 + 16 : 0;
      v72 = !v69 && v70 == 0;
      if (!v72)
      {
        v136[0] = &v143;
        v136[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v136[2] = std::chrono::system_clock::now().__d_.__rep_;
        v137 = 2;
        v138 = "unknown file";
        v139 = 977;
        v141 = 0;
        v142 = 0;
        v140 = "unknown function";
        v73 = (uint64_t *)(v143 + 16);
        if (*(char *)(v143 + 39) < 0)
        {
          v75 = *(const char **)(v143 + 16);
          v74 = *(_QWORD *)(v143 + 24);
        }
        else
        {
          v74 = *(unsigned __int8 *)(v143 + 39);
          v75 = (const char *)(*(_QWORD *)v136[0] + 16);
        }
        v112 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v112 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&v153);
          sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&v153);
          if ((_BYTE)v156 && SHIBYTE(v155) < 0)
            operator delete(v153);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A50F >= 0)
          v113 = (const char *)&xmmword_254A4A4F8;
        else
          v113 = (const char *)xmmword_254A4A4F8;
        if (byte_254A4A50F >= 0)
          v114 = byte_254A4A50F;
        else
          v114 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
        v153 = os_log_create(v113, v75);
        v115 = (void **)&v154;
        if (v114 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v114 >= 0x17)
        {
          v116 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v114 | 7) != 0x17)
            v116 = v114 | 7;
          v117 = v116 + 1;
          v115 = (void **)operator new(v116 + 1);
          v155 = v114;
          v156 = v117 | 0x8000000000000000;
          v154 = v115;
        }
        else
        {
          HIBYTE(v156) = v114;
          if (!v114)
          {
LABEL_123:
            *((_BYTE *)v115 + v114) = 0;
            v157 = 1;
            v118 = v158;
            if (v74 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v74 >= 0x17)
            {
              v119 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v74 | 7) != 0x17)
                v119 = v74 | 7;
              v120 = v119 + 1;
              v118 = (void **)operator new(v119 + 1);
              v158[1] = (void *)v74;
              v159 = v120 | 0x8000000000000000;
              v158[0] = v118;
            }
            else
            {
              HIBYTE(v159) = v74;
              if (!v74)
              {
LABEL_131:
                *((_BYTE *)v118 + v74) = 0;
                v160 = 1;
                v121 = v153;
                if (SHIBYTE(v159) < 0)
                  operator delete(v158[0]);
                if (v157 && SHIBYTE(v156) < 0)
                  operator delete(v154);
                if (v153)
                  os_release(v153);
                sub_20EDCEF94((int)&v153, v71, v73, v121, OS_LOG_TYPE_DEBUG);
                v66 = v133;
                if (v69)
                {
                  sub_20E8C003C((uint64_t)v136, "All features assigned to one cluster. This is OK, but could be a sign of a problem with the data");
                  sub_20E863570((uint64_t)v136);
                }
                sub_20E863570((uint64_t)v136);
                v122 = v142;
                if (v142)
                {
                  p_shared_owners = (unint64_t *)&v142->__shared_owners_;
                  do
                    v124 = __ldaxr(p_shared_owners);
                  while (__stlxr(v124 - 1, p_shared_owners));
                  if (!v124)
                  {
                    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                    std::__shared_weak_count::__release_weak(v122);
                  }
                }
                goto LABEL_145;
              }
            }
            memmove(v118, v75, v74);
            goto LABEL_131;
          }
        }
        memmove(v115, v113, v114);
        goto LABEL_123;
      }
    }
LABEL_145:
    *((_BYTE *)v66 + 52) = 1;
    sub_20EDCEA70(v66, *v129, v129[1], (v129[1] - *v129) >> 2);
  }
LABEL_146:
  sub_20E991800((uint64_t)&v144, v145);
  if (*((_QWORD *)&v150 + 1))
  {
    *(_QWORD *)&v151 = *((_QWORD *)&v150 + 1);
    operator delete(*((void **)&v150 + 1));
  }
  if (v149[0])
  {
    v149[1] = v149[0];
    operator delete(v149[0]);
  }
}

void sub_20EDCDC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,_QWORD *a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  if (*(_BYTE *)(v31 - 136))
  {
    if (*(char *)(v31 - 137) < 0)
      operator delete(*(void **)(v31 - 160));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a18);
  sub_20E991800((uint64_t)&a28, a29);
  sub_20EDCDD44(&a31);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EDCDD44(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

int32x4_t *sub_20EDCDD84(uint64_t a1, unsigned int a2, int a3, size_t __sz)
{
  uint64_t v8;
  int32x4_t *v9;
  unint64_t v10;
  uint64_t v11;
  int32x4_t *result;
  int32x4_t **v13;
  int32x4_t *v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  int32x4_t *v21;
  unsigned int v22;
  int32x4_t *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int32x4_t v28;
  int32x4_t *v29;
  int32x4_t v30;
  int32x4_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int32x4_t v35;
  int32x4_t *v36;
  int32x4_t v37;
  int32x4_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int32x4_t v42;
  int32x4_t *v43;
  int32x4_t v44;
  int32x4_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int32x4_t v49;
  int32x4_t *v50;
  int32x4_t v51;
  int32x4_t v52;
  uint64_t v53;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(int32x4_t **)a1;
  if (__sz > (v8 - *(_QWORD *)a1) >> 2)
  {
    if (v9)
    {
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v9);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 62)
      goto LABEL_41;
    v10 = v8 >> 1;
    if (v8 >> 1 <= __sz)
      v10 = __sz;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v10 = 0x3FFFFFFFFFFFFFFFLL;
    if (v10 >> 62)
LABEL_41:
      sub_20E867F44();
    v11 = 4 * v10;
    result = (int32x4_t *)operator new(4 * v10);
    *(_QWORD *)a1 = result;
    v13 = (int32x4_t **)(a1 + 8);
    *(_QWORD *)(a1 + 16) = (char *)result + v11;
    v14 = result;
    if (a2 == a3)
      goto LABEL_35;
    v15 = ~a2 + a3;
    if (v15 >= 7)
    {
      v26 = v15 + 1;
      v27 = (v15 + 1) & 0x1FFFFFFF8;
      v16 = a2 + v27;
      v14 = (int32x4_t *)((char *)result + 4 * v27);
      v28 = vaddq_s32(vdupq_n_s32(a2), (int32x4_t)xmmword_210365350);
      v29 = result + 1;
      v30.i64[0] = 0x400000004;
      v30.i64[1] = 0x400000004;
      v31.i64[0] = 0x800000008;
      v31.i64[1] = 0x800000008;
      v32 = v27;
      do
      {
        v29[-1] = v28;
        *v29 = vaddq_s32(v28, v30);
        v28 = vaddq_s32(v28, v31);
        v29 += 2;
        v32 -= 8;
      }
      while (v32);
      if (v26 == v27)
        goto LABEL_35;
    }
    else
    {
      v16 = a2;
      v14 = result;
    }
    do
    {
      v14->i32[0] = v16;
      v14 = (int32x4_t *)((char *)v14 + 4);
      ++v16;
    }
    while (a3 != v16);
LABEL_35:
    *v13 = v14;
    return result;
  }
  result = *(int32x4_t **)(a1 + 8);
  v13 = (int32x4_t **)(a1 + 8);
  v17 = (char *)result - (char *)v9;
  v18 = ((char *)result - (char *)v9) >> 2;
  if (v18 < __sz)
  {
    v19 = (v17 >> 2) + a2;
    if (!(v17 >> 2))
      goto LABEL_29;
    v20 = (v17 >> 2);
    if (v20 >= 8)
    {
      v33 = (v17 >> 2) & 7;
      v34 = v20 - v33;
      v21 = (int32x4_t *)((char *)v9 + 4 * (v20 - v33));
      v22 = a2 + v20 - v33;
      v35 = vaddq_s32(vdupq_n_s32(a2), (int32x4_t)xmmword_210365350);
      v36 = v9 + 1;
      v37.i64[0] = 0x400000004;
      v37.i64[1] = 0x400000004;
      v38.i64[0] = 0x800000008;
      v38.i64[1] = 0x800000008;
      do
      {
        v36[-1] = v35;
        *v36 = vaddq_s32(v35, v37);
        v35 = vaddq_s32(v35, v38);
        v36 += 2;
        v34 -= 8;
      }
      while (v34);
      if (!v33)
      {
LABEL_29:
        v14 = result;
        if (v19 != a3)
        {
          v39 = ~(_DWORD)v18 + a3 - a2;
          v40 = v19;
          v14 = result;
          if (v39 < 7)
            goto LABEL_44;
          v41 = v39 + 1;
          v40 = v19 + (v41 & 0xFFFFFFF8);
          v14 = (int32x4_t *)((char *)result + 4 * (v41 & 0x1FFFFFFF8));
          v42 = vaddq_s32(vdupq_n_s32(v19), (int32x4_t)xmmword_210365350);
          v43 = result + 1;
          v44.i64[0] = 0x400000004;
          v44.i64[1] = 0x400000004;
          v45.i64[0] = 0x800000008;
          v45.i64[1] = 0x800000008;
          v46 = v41 & 0x1FFFFFFF8;
          do
          {
            v43[-1] = v42;
            *v43 = vaddq_s32(v42, v44);
            v42 = vaddq_s32(v42, v45);
            v43 += 2;
            v46 -= 8;
          }
          while (v46);
          if (v41 != (v41 & 0x1FFFFFFF8))
          {
LABEL_44:
            do
            {
              v14->i32[0] = v40;
              v14 = (int32x4_t *)((char *)v14 + 4);
              ++v40;
            }
            while (a3 != v40);
          }
        }
        goto LABEL_35;
      }
    }
    else
    {
      v21 = v9;
      v22 = a2;
    }
    do
    {
      v21->i32[0] = v22;
      v21 = (int32x4_t *)((char *)v21 + 4);
      ++v22;
    }
    while (v19 != v22);
    goto LABEL_29;
  }
  v23 = v9;
  if (a2 != a3)
  {
    v24 = ~a2 + a3;
    if (v24 >= 7)
    {
      v47 = v24 + 1;
      v48 = (v24 + 1) & 0x1FFFFFFF8;
      v23 = (int32x4_t *)((char *)v9 + 4 * v48);
      v25 = a2 + v48;
      v49 = vaddq_s32(vdupq_n_s32(a2), (int32x4_t)xmmword_210365350);
      v50 = v9 + 1;
      v51.i64[0] = 0x400000004;
      v51.i64[1] = 0x400000004;
      v52.i64[0] = 0x800000008;
      v52.i64[1] = 0x800000008;
      v53 = v48;
      do
      {
        v50[-1] = v49;
        *v50 = vaddq_s32(v49, v51);
        v49 = vaddq_s32(v49, v52);
        v50 += 2;
        v53 -= 8;
      }
      while (v53);
      if (v47 == v48)
        goto LABEL_40;
    }
    else
    {
      v23 = v9;
      v25 = a2;
    }
    do
    {
      v23->i32[0] = v25;
      v23 = (int32x4_t *)((char *)v23 + 4);
      ++v25;
    }
    while (a3 != v25);
  }
LABEL_40:
  *v13 = v23;
  return result;
}

void sub_20EDCE08C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  int8x16_t **v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int32x4_t *v13;
  int32x4_t *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int32x4_t v18;
  int32x4_t *v19;
  int32x4_t v20;
  int32x4_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  __int32 v31;
  uint64_t v32;
  unint64_t v33;
  __int128 *v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  unint64_t v48;
  int8x16_t *v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  unsigned int v54;
  int8x16_t *v55;
  unint64_t v56;
  unsigned int v57;
  unint64_t v58;
  int8x16_t *v59;
  void *__p[2];
  uint64_t v61;

  v7 = (int8x16_t **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 8);
  v8 = 8 * *(unsigned __int16 *)(a1 + 4);
  v9 = (*(_QWORD *)(a1 + 16) - v6) >> 3;
  if (v8 <= v9)
  {
    if (v8 < v9)
      *(_QWORD *)(a1 + 16) = v6 + ((unint64_t)*(unsigned __int16 *)(a1 + 4) << 6);
  }
  else
  {
    sub_20E93DAE8(a1 + 8, v8 - v9);
  }
  __p[0] = 0;
  __p[1] = 0;
  v61 = 0;
  v11 = *a3;
  v10 = a3[1];
  v12 = *a3 - v10;
  if (v10 >= *a3)
    v12 = -(uint64_t)(v10 - v11);
  if (!v12)
  {
    v14 = 0;
    if (!*(_QWORD *)(a1 + 56))
      goto LABEL_44;
    goto LABEL_18;
  }
  if ((unint64_t)-v12 >> 62)
    sub_20E867F44();
  v13 = (int32x4_t *)operator new(-4 * v12);
  v14 = v13;
  v12 = (uint64_t)v13;
  if (v11 != v10)
  {
    v15 = v10 + ~v11;
    v16 = v11;
    v12 = (uint64_t)v13;
    if (v15 < 7)
      goto LABEL_53;
    v17 = v15 + 1;
    v16 = v11 + (v17 & 0xFFFFFFF8);
    v12 = (uint64_t)v13->i64 + 4 * (v17 & 0x1FFFFFFF8);
    v18 = vaddq_s32(vdupq_n_s32(v11), (int32x4_t)xmmword_210365350);
    v19 = v13 + 1;
    v20.i64[0] = 0x400000004;
    v20.i64[1] = 0x400000004;
    v21.i64[0] = 0x800000008;
    v21.i64[1] = 0x800000008;
    v22 = v17 & 0x1FFFFFFF8;
    do
    {
      v19[-1] = v18;
      *v19 = vaddq_s32(v18, v20);
      v18 = vaddq_s32(v18, v21);
      v19 += 2;
      v22 -= 8;
    }
    while (v22);
    if (v17 != (v17 & 0x1FFFFFFF8))
    {
LABEL_53:
      do
      {
        *(_DWORD *)v12 = v16;
        v12 += 4;
        ++v16;
      }
      while (v10 != v16);
    }
  }
  if (*(_QWORD *)(a1 + 56))
  {
LABEL_18:
    v23 = 0;
    v24 = (v12 - (uint64_t)v14) >> 2;
    v25 = -1;
    do
    {
      v26 = *(unsigned __int16 *)(a1 + 4);
      if (*(_WORD *)(a1 + 4))
      {
        v27 = 0;
        v28 = *(_DWORD *)a1;
        v29 = v24;
        do
        {
          v28 = 214013 * v28 + 2531011;
          v30 = (HIWORD(v28) & 0x7FFF) % v29 + v27;
          v31 = v14->i32[v30];
          v14->i32[v30] = v14->i32[v27];
          v14->i32[v27++] = v31;
          --v29;
        }
        while (v26 != v27);
        v32 = 0;
        v33 = 0;
        *(_DWORD *)a1 = v28;
        do
        {
          v34 = (__int128 *)(a2 + ((unint64_t)v14->u32[v33] << 6));
          v35 = (_OWORD *)(*(_QWORD *)(a1 + 8) + v32);
          v36 = *v34;
          v37 = v34[1];
          v38 = v34[3];
          v35[2] = v34[2];
          v35[3] = v38;
          *v35 = v36;
          v35[1] = v37;
          ++v33;
          v39 = *(unsigned __int16 *)(a1 + 4);
          v32 += 64;
        }
        while (v33 < v39);
        v40 = *(unsigned __int16 *)(a1 + 4);
        v41 = *a3;
        v42 = a3[1];
        if (*a3 != v42)
        {
LABEL_28:
          v44 = **v7;
          v45 = (*v7)[1];
          v46 = (*v7)[2];
          v47 = (*v7)[3];
          if (v40 <= 1)
          {
            v43 = 0;
            do
            {
              v43 += vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(a2 + ((unint64_t)v41 << 6) + 16), v45)), vcntq_s8(veorq_s8(*(int8x16_t *)(a2 + ((unint64_t)v41 << 6)), v44))), vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(a2 + ((unint64_t)v41 << 6) + 32), v46)), vcntq_s8(veorq_s8(*(int8x16_t *)(a2 + ((unint64_t)v41 << 6) + 48), v47)))));
              ++v41;
            }
            while (v42 != v41);
          }
          else
          {
            v43 = 0;
            v48 = v39 - 1;
            do
            {
              v49 = (int8x16_t *)(a2 + ((unint64_t)v41 << 6));
              v50 = *v49;
              v51 = v49[1];
              v52 = v49[2];
              v53 = v49[3];
              v54 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v51, v45)), vcntq_s8(veorq_s8(*v49, v44))), vaddq_s8(vcntq_s8(veorq_s8(v52, v46)), vcntq_s8(veorq_s8(v53, v47)))));
              v55 = *v7 + 7;
              v56 = v48;
              do
              {
                v57 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v55[-2], v51)), vcntq_s8(veorq_s8(v55[-3], v50))), vaddq_s8(vcntq_s8(veorq_s8(v55[-1], v52)), vcntq_s8(veorq_s8(*v55, v53)))));
                if (v57 < v54)
                  v54 = v57;
                v55 += 4;
                --v56;
              }
              while (v56);
              v43 += v54;
              ++v41;
            }
            while (v41 != v42);
          }
          goto LABEL_38;
        }
      }
      else
      {
        v40 = 0;
        v39 = 0;
        v41 = *a3;
        v42 = a3[1];
        if (*a3 != v42)
          goto LABEL_28;
      }
      v43 = 0;
LABEL_38:
      if (v43 >= v25)
        v58 = v25;
      else
        v58 = v43;
      if (__p != (void **)v7 && v43 < v25)
      {
        sub_20E92CD94(__p, *(char **)(a1 + 8), *(char **)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
        v58 = v43;
      }
      ++v23;
      v25 = v58;
    }
    while (v23 < *(_QWORD *)(a1 + 56));
  }
LABEL_44:
  v59 = *v7;
  if (*v7)
  {
    *(_QWORD *)(a1 + 16) = v59;
    operator delete(v59);
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 24) = v61;
  __p[1] = 0;
  v61 = 0;
  __p[0] = 0;
  if (v14)
  {
    operator delete(v14);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_20EDCE4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void sub_20EDCE4F0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _OWORD *v21;
  char *v22;
  unint64_t v23;
  __int128 v24;
  __int16 v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 1)
  {
    if (a2)
    {
      bzero(v5, 2 * a2);
      v6 = &v5[2 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 1;
    v10 = (v8 >> 1) + a2;
    if (v10 < 0)
      sub_20E867F44();
    v11 = v4 - (_QWORD)v7;
    if (v11 > v10)
      v10 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 < 0)
        sub_20E877A38();
      v13 = operator new(2 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[2 * v9];
    v15 = 2 * a2;
    v16 = &v13[2 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 2;
      if (v18 < 0x1E)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 1) + 1;
      v20 = 2 * (v19 & 0xFFFFFFFFFFFFFFF0);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[2 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 16;
      }
      while (v23);
      if (v19 != (v19 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_29:
        do
        {
          v25 = *((_WORD *)v6 - 1);
          v6 -= 2;
          *((_WORD *)v14 - 1) = v25;
          v14 -= 2;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

uint64_t sub_20EDCE680(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20EDCEA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EDCEA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EDCEA4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EDCEA70(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62)
      goto LABEL_22;
    v10 = v8 >> 1;
    if (v8 >> 1 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 62)
LABEL_22:
      sub_20E867F44();
    v13 = 4 * v12;
    result = operator new(4 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memmove(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, 4 * v17);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_20EDCEBB8(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v6;
  int8x16_t **v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  int64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int *v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  unint64_t v39;
  unint64_t v40;
  int8x16_t *v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  unsigned int v46;
  int8x16_t *v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  int8x16_t *v52;
  void *__p[2];
  uint64_t v54;

  v7 = (int8x16_t **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 8);
  v8 = 8 * *(unsigned __int16 *)(a1 + 4);
  v9 = (*(_QWORD *)(a1 + 16) - v6) >> 3;
  if (v8 <= v9)
  {
    if (v8 < v9)
      *(_QWORD *)(a1 + 16) = v6 + ((unint64_t)*(unsigned __int16 *)(a1 + 4) << 6);
  }
  else
  {
    sub_20E93DAE8(a1 + 8, v8 - v9);
  }
  __p[0] = 0;
  __p[1] = 0;
  v54 = 0;
  v11 = *a3;
  v10 = a3[1];
  v12 = (char *)v10 - (char *)*a3;
  if (v10 == *a3)
  {
    v14 = 0;
    v13 = 0;
    if (!*(_QWORD *)(a1 + 56))
      goto LABEL_36;
    goto LABEL_10;
  }
  if (v12 < 0)
    sub_20E867F44();
  v13 = (char *)operator new((char *)v10 - (char *)v11);
  v14 = &v13[4 * (v12 >> 2)];
  memmove(v13, v11, v12);
  if (*(_QWORD *)(a1 + 56))
  {
LABEL_10:
    v15 = 0;
    v16 = (v14 - v13) >> 2;
    v17 = -1;
    do
    {
      v18 = *(unsigned __int16 *)(a1 + 4);
      if (*(_WORD *)(a1 + 4))
      {
        v19 = 0;
        v20 = *(_DWORD *)a1;
        v21 = v16;
        do
        {
          v20 = 214013 * v20 + 2531011;
          v22 = 4 * ((HIWORD(v20) & 0x7FFF) % v21 + v19);
          v23 = *(_DWORD *)&v13[v22];
          *(_DWORD *)&v13[v22] = *(_DWORD *)&v13[4 * v19];
          *(_DWORD *)&v13[4 * v19++] = v23;
          --v21;
        }
        while (v18 != v19);
        v24 = 0;
        v25 = 0;
        *(_DWORD *)a1 = v20;
        do
        {
          v26 = (__int128 *)(a2 + ((unint64_t)*(unsigned int *)&v13[4 * v25] << 6));
          v27 = (_OWORD *)(*(_QWORD *)(a1 + 8) + v24);
          v28 = *v26;
          v29 = v26[1];
          v30 = v26[3];
          v27[2] = v26[2];
          v27[3] = v30;
          *v27 = v28;
          v27[1] = v29;
          ++v25;
          v31 = *(unsigned __int16 *)(a1 + 4);
          v24 += 64;
        }
        while (v25 < v31);
        v32 = *(unsigned __int16 *)(a1 + 4);
        v33 = *a3;
        v34 = a3[1];
        if (*a3 != v34)
        {
LABEL_18:
          v35 = **v7;
          v36 = (*v7)[1];
          v37 = (*v7)[2];
          v38 = (*v7)[3];
          if (v32 <= 1)
          {
            v39 = 0;
            do
            {
              v50 = *v33++;
              v39 += vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(a2 + ((unint64_t)v50 << 6) + 16), v36)), vcntq_s8(veorq_s8(*(int8x16_t *)(a2 + ((unint64_t)v50 << 6)), v35))), vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(a2 + ((unint64_t)v50 << 6) + 32), v37)), vcntq_s8(veorq_s8(*(int8x16_t *)(a2 + ((unint64_t)v50 << 6) + 48), v38)))));
            }
            while (v33 != v34);
          }
          else
          {
            v39 = 0;
            v40 = v31 - 1;
            do
            {
              v41 = (int8x16_t *)(a2 + ((unint64_t)*v33 << 6));
              v42 = *v41;
              v43 = v41[1];
              v44 = v41[2];
              v45 = v41[3];
              v46 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v43, v36)), vcntq_s8(veorq_s8(*v41, v35))), vaddq_s8(vcntq_s8(veorq_s8(v44, v37)), vcntq_s8(veorq_s8(v45, v38)))));
              v47 = *v7 + 7;
              v48 = v40;
              do
              {
                v49 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v47[-2], v43)), vcntq_s8(veorq_s8(v47[-3], v42))), vaddq_s8(vcntq_s8(veorq_s8(v47[-1], v44)), vcntq_s8(veorq_s8(*v47, v45)))));
                if (v49 < v46)
                  v46 = v49;
                v47 += 4;
                --v48;
              }
              while (v48);
              v39 += v46;
              ++v33;
            }
            while (v33 != v34);
          }
          goto LABEL_30;
        }
      }
      else
      {
        v32 = 0;
        v31 = 0;
        v33 = *a3;
        v34 = a3[1];
        if (*a3 != v34)
          goto LABEL_18;
      }
      v39 = 0;
LABEL_30:
      if (v39 >= v17)
        v51 = v17;
      else
        v51 = v39;
      if (__p != (void **)v7 && v39 < v17)
      {
        sub_20E92CD94(__p, *(char **)(a1 + 8), *(char **)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
        v51 = v39;
      }
      ++v15;
      v17 = v51;
    }
    while (v15 < *(_QWORD *)(a1 + 56));
  }
LABEL_36:
  v52 = *v7;
  if (*v7)
  {
    *(_QWORD *)(a1 + 16) = v52;
    operator delete(v52);
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 24) = v54;
  __p[1] = 0;
  v54 = 0;
  __p[0] = 0;
  if (v13)
  {
    operator delete(v13);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_20EDCEF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EDCEF94(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20EDCF328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EDCF34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EDCF360(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EDCF384(uint64_t *result, int8x16_t *a2)
{
  void *v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  const double *v25;
  const double *v26;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  float64x2x2_t v30;
  float64x2x2_t v31;

  v4 = (unint64_t *)(result + 2);
  v3 = (void *)result[2];
  result[3] = (uint64_t)v3;
  v5 = *result;
  if (*result)
  {
    v6 = result;
    v7 = (uint64_t)(result + 12);
    result[13] = result[12];
    if (!*(_BYTE *)(v5 + 52))
    {
      do
        v5 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * sub_20EDD019C(v5, v7, a2));
      while (!*(_BYTE *)(v5 + 52));
      v3 = (void *)v6[3];
    }
    result = (uint64_t *)sub_20EDCFD40(v4, v3, *(_QWORD *)v5, *(unsigned int **)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
    if (v6[1])
    {
      v8 = 0;
      do
      {
        v10 = (char *)v6[12];
        v9 = (char *)v6[13];
        if (v10 == v9)
          break;
        v11 = v10 + 16;
        if (v10 + 16 == v9)
        {
          v13 = (char *)v6[12];
          v17 = *((_QWORD *)v10 + 1);
        }
        else
        {
          v12 = *(_QWORD *)v10;
          v13 = (char *)v6[12];
          v14 = v10 + 16;
          do
          {
            v16 = *(_QWORD *)v14;
            v14 += 16;
            v15 = v16;
            if (v16 < v12)
            {
              v12 = v15;
              v13 = v11;
            }
            v11 = v14;
          }
          while (v14 != v9);
          v17 = *((_QWORD *)v13 + 1);
          v18 = v13 + 16;
          if (v13 + 16 != v9)
          {
            v19 = v9 - v13 - 32;
            if (v19 < 0x30)
              goto LABEL_27;
            v20 = (v13 - v10) >> 4;
            v21 = (v19 >> 4) + 1;
            v22 = 16 * (v21 & 0x1FFFFFFFFFFFFFFCLL);
            v13 += v22;
            v18 += v22;
            v23 = (double *)&v10[16 * v20 + 32];
            v24 = v21 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              v25 = v23 - 2;
              v30 = vld2q_f64(v25);
              v26 = v23 + 2;
              v31 = vld2q_f64(v26);
              v27 = v23 - 4;
              vst2q_f64(v27, v30);
              vst2q_f64(v23, v31);
              v23 += 8;
              v24 -= 4;
            }
            while (v24);
            if (v21 != (v21 & 0x1FFFFFFFFFFFFFFCLL))
            {
LABEL_27:
              do
              {
                v28 = *(_QWORD *)v18;
                v29 = *((_QWORD *)v18 + 1);
                v18 += 16;
                *(_QWORD *)v13 = v28;
                *((_QWORD *)v13 + 1) = v29;
                v13 += 16;
              }
              while (v18 != v9);
            }
          }
        }
        for (v6[13] = (uint64_t)v13;
              !*(_BYTE *)(v17 + 52);
        result = (uint64_t *)sub_20EDCFD40(v4, (void *)v6[3], *(_QWORD *)v17, *(unsigned int **)(v17 + 8), (uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 2);
        ++v8;
      }
      while (v8 < v6[1]);
    }
  }
  return result;
}

void sub_20EDCF560(unsigned int **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v4;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _DWORD *v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  unsigned int *v40;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _OWORD *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int *v53;
  unsigned int v54;
  uint64_t v55;

  v4 = *a1;
  v51 = a1[1];
  if (*a1 != v51)
  {
    while (1)
    {
      v53 = v4;
      v54 = *v4;
      v55 = *a2 + 12 * *v4;
      v7 = (_BYTE *)(v55 + 8);
      if (*(_BYTE *)(v55 + 8))
        break;
LABEL_3:
      v4 = v53 + 1;
      if (v53 + 1 == v51)
        return;
    }
    while (1)
    {
      *v7 = 0;
      v9 = *(_DWORD *)v55;
      v11 = *(char **)(a4 + 8);
      v10 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v11 < v10)
      {
        *(_DWORD *)v11 = v9;
        v12 = (uint64_t)(v11 + 4);
        goto LABEL_29;
      }
      v13 = *(char **)a4;
      v14 = (uint64_t)&v11[-*(_QWORD *)a4];
      v15 = v14 >> 2;
      v16 = (v14 >> 2) + 1;
      if (v16 >> 62)
        sub_20E867F44();
      v17 = v10 - (_QWORD)v13;
      if (v17 >> 1 > v16)
        v16 = v17 >> 1;
      v18 = (unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v16;
      if (v18)
        break;
      v19 = 0;
      v20 = (_DWORD *)(4 * v15);
      *(_DWORD *)(4 * v15) = v9;
      v12 = 4 * v15 + 4;
      v21 = v11 - v13;
      if (v11 != v13)
        goto LABEL_21;
LABEL_27:
      *(_QWORD *)a4 = v20;
      *(_QWORD *)(a4 + 8) = v12;
      *(_QWORD *)(a4 + 16) = &v19[4 * v18];
      if (v13)
        operator delete(v13);
LABEL_29:
      *(_QWORD *)(a4 + 8) = v12;
      v32 = *(char **)(a3 + 8);
      v31 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v32 >= v31)
      {
        v33 = *(char **)a3;
        v34 = (uint64_t)&v32[-*(_QWORD *)a3];
        v35 = v34 >> 2;
        v36 = (v34 >> 2) + 1;
        if (v36 >> 62)
          sub_20E867F44();
        v37 = v31 - (_QWORD)v33;
        if (v37 >> 1 > v36)
          v36 = v37 >> 1;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
          v38 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          if (v38 >> 62)
LABEL_50:
            sub_20E877A38();
          v39 = operator new(4 * v38);
          v40 = (unsigned int *)&v39[4 * v35];
          *v40 = v54;
          v8 = (uint64_t)(v40 + 1);
          v41 = v32 - v33;
          if (v32 == v33)
            goto LABEL_47;
LABEL_41:
          v42 = v41 - 4;
          if (v42 < 0x2C)
            goto LABEL_55;
          if ((unint64_t)(v32 - &v39[v34]) < 0x20)
            goto LABEL_55;
          v43 = (v42 >> 2) + 1;
          v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
          v45 = &v32[-v44];
          v40 = (unsigned int *)((char *)v40 - v44);
          v46 = &v39[4 * v35 - 16];
          v47 = v32 - 16;
          v48 = v43 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v49 = *(_OWORD *)v47;
            *(v46 - 1) = *((_OWORD *)v47 - 1);
            *v46 = v49;
            v46 -= 2;
            v47 -= 32;
            v48 -= 8;
          }
          while (v48);
          v32 = v45;
          if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_55:
            do
            {
              v50 = *((_DWORD *)v32 - 1);
              v32 -= 4;
              *--v40 = v50;
            }
            while (v32 != v33);
          }
        }
        else
        {
          v39 = 0;
          v40 = (unsigned int *)(4 * v35);
          *(_DWORD *)(4 * v35) = v54;
          v8 = 4 * v35 + 4;
          v41 = v32 - v33;
          if (v32 != v33)
            goto LABEL_41;
        }
LABEL_47:
        *(_QWORD *)a3 = v40;
        *(_QWORD *)(a3 + 8) = v8;
        *(_QWORD *)(a3 + 16) = &v39[4 * v38];
        if (v33)
          operator delete(v33);
        goto LABEL_7;
      }
      *(_DWORD *)v32 = v54;
      v8 = (uint64_t)(v32 + 4);
LABEL_7:
      *(_QWORD *)(a3 + 8) = v8;
      if (!*v7)
        goto LABEL_3;
    }
    if (v18 >> 62)
      goto LABEL_50;
    v19 = operator new(4 * v18);
    v20 = &v19[4 * v15];
    *v20 = v9;
    v12 = (uint64_t)(v20 + 1);
    v21 = v11 - v13;
    if (v11 == v13)
      goto LABEL_27;
LABEL_21:
    v22 = v21 - 4;
    if (v22 < 0x2C)
      goto LABEL_56;
    if ((unint64_t)(v11 - v19 - v14) < 0x20)
      goto LABEL_56;
    v23 = (v22 >> 2) + 1;
    v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
    v25 = &v11[-v24];
    v20 = (_DWORD *)((char *)v20 - v24);
    v26 = &v19[4 * v15 - 16];
    v27 = v11 - 16;
    v28 = v23 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v29 = *(_OWORD *)v27;
      *(v26 - 1) = *((_OWORD *)v27 - 1);
      *v26 = v29;
      v26 -= 2;
      v27 -= 32;
      v28 -= 8;
    }
    while (v28);
    v11 = v25;
    if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_56:
      do
      {
        v30 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *--v20 = v30;
      }
      while (v11 != v13);
    }
    goto LABEL_27;
  }
}

void sub_20EDCF87C(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _BYTE *v7;
  int v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _DWORD *v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  _DWORD *v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _OWORD *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  uint64_t v51;
  uint64_t v53;

  v4 = *a1;
  v51 = a1[1];
  if (*a1 != v51)
  {
    while (1)
    {
      v53 = *a2 + 12 * v4;
      v7 = (_BYTE *)(v53 + 8);
      if (*(_BYTE *)(v53 + 8))
        break;
LABEL_4:
      if (++v4 == v51)
        return;
    }
    while (1)
    {
      while (1)
      {
        *v7 = 0;
        v8 = *(_DWORD *)v53;
        v10 = *(char **)(a4 + 8);
        v9 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v10 >= v9)
          break;
        *(_DWORD *)v10 = v8;
        *(_QWORD *)(a4 + 8) = v10 + 4;
        v12 = *(char **)(a3 + 8);
        v11 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v12 >= v11)
          goto LABEL_31;
LABEL_7:
        *(_DWORD *)v12 = v4;
        *(_QWORD *)(a3 + 8) = v12 + 4;
        if (!*v7)
          goto LABEL_4;
      }
      v13 = *(char **)a4;
      v14 = (uint64_t)&v10[-*(_QWORD *)a4];
      v15 = v14 >> 2;
      v16 = (v14 >> 2) + 1;
      if (v16 >> 62)
        sub_20E867F44();
      v17 = v9 - (_QWORD)v13;
      if (v17 >> 1 > v16)
        v16 = v17 >> 1;
      v18 = (unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v16;
      if (!v18)
        break;
      if (v18 >> 62)
        goto LABEL_52;
      v19 = operator new(4 * v18);
      v20 = &v19[4 * v15];
      *v20 = v8;
      v21 = (uint64_t)(v20 + 1);
      v22 = v10 - v13;
      if (v10 != v13)
        goto LABEL_22;
LABEL_28:
      *(_QWORD *)a4 = v20;
      *(_QWORD *)(a4 + 8) = v21;
      *(_QWORD *)(a4 + 16) = &v19[4 * v18];
      if (v13)
        operator delete(v13);
      v7 = (_BYTE *)(v53 + 8);
      *(_QWORD *)(a4 + 8) = v21;
      v12 = *(char **)(a3 + 8);
      v11 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v12 < v11)
        goto LABEL_7;
LABEL_31:
      v32 = *(char **)a3;
      v33 = (uint64_t)&v12[-*(_QWORD *)a3];
      v34 = v33 >> 2;
      v35 = (v33 >> 2) + 1;
      if (v35 >> 62)
        sub_20E867F44();
      v36 = v11 - (_QWORD)v32;
      if (v36 >> 1 > v35)
        v35 = v36 >> 1;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
        v37 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
      {
        if (v37 >> 62)
LABEL_52:
          sub_20E877A38();
        v38 = operator new(4 * v37);
        v39 = &v38[4 * v34];
        *v39 = v4;
        v40 = (uint64_t)(v39 + 1);
        v41 = v12 - v32;
        if (v12 == v32)
          goto LABEL_48;
LABEL_42:
        v42 = v41 - 4;
        if (v42 < 0x2C)
          goto LABEL_57;
        if ((unint64_t)(v12 - &v38[v33]) < 0x20)
          goto LABEL_57;
        v43 = (v42 >> 2) + 1;
        v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
        v45 = &v12[-v44];
        v39 = (_DWORD *)((char *)v39 - v44);
        v46 = &v38[4 * v34 - 16];
        v47 = v12 - 16;
        v48 = v43 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v49 = *(_OWORD *)v47;
          *(v46 - 1) = *((_OWORD *)v47 - 1);
          *v46 = v49;
          v46 -= 2;
          v47 -= 32;
          v48 -= 8;
        }
        while (v48);
        v12 = v45;
        if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_57:
          do
          {
            v50 = *((_DWORD *)v12 - 1);
            v12 -= 4;
            *--v39 = v50;
          }
          while (v12 != v32);
        }
        goto LABEL_48;
      }
      v38 = 0;
      v39 = (_DWORD *)(4 * v34);
      *(_DWORD *)(4 * v34) = v4;
      v40 = 4 * v34 + 4;
      v41 = v12 - v32;
      if (v12 != v32)
        goto LABEL_42;
LABEL_48:
      *(_QWORD *)a3 = v39;
      *(_QWORD *)(a3 + 8) = v40;
      *(_QWORD *)(a3 + 16) = &v38[4 * v37];
      if (v32)
        operator delete(v32);
      v7 = (_BYTE *)(v53 + 8);
      *(_QWORD *)(a3 + 8) = v40;
      if (!*(_BYTE *)(v53 + 8))
        goto LABEL_4;
    }
    v19 = 0;
    v20 = (_DWORD *)(4 * v15);
    *(_DWORD *)(4 * v15) = v8;
    v21 = 4 * v15 + 4;
    v22 = v10 - v13;
    if (v10 == v13)
      goto LABEL_28;
LABEL_22:
    v23 = v22 - 4;
    if (v23 < 0x2C)
      goto LABEL_58;
    if ((unint64_t)(v10 - v19 - v14) < 0x20)
      goto LABEL_58;
    v24 = (v23 >> 2) + 1;
    v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
    v26 = &v10[-v25];
    v20 = (_DWORD *)((char *)v20 - v25);
    v27 = &v19[4 * v15 - 16];
    v28 = v10 - 16;
    v29 = v24 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v30 = *(_OWORD *)v28;
      *(v27 - 1) = *((_OWORD *)v28 - 1);
      *v27 = v30;
      v27 -= 2;
      v28 -= 32;
      v29 -= 8;
    }
    while (v29);
    v10 = v26;
    if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_58:
      do
      {
        v31 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *--v20 = v31;
      }
      while (v10 != v13);
    }
    goto LABEL_28;
  }
}

void sub_20EDCFBAC(void **a1, unint64_t a2, uint64_t *a3)
{
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;

  v7 = (char *)a1[1];
  v6 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = &v7[12 * a2];
      v14 = 12 * a2;
      do
      {
        v15 = *a3;
        *((_DWORD *)v7 + 2) = *((_DWORD *)a3 + 2);
        *(_QWORD *)v7 = v15;
        v7 += 12;
        v14 -= 12;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0x1555555555555555)
      sub_20E867F44();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)*a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v11 = 0x1555555555555555;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0x1555555555555555)
        sub_20E877A38();
      v12 = (char *)operator new(12 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = &v12[12 * v8];
    v17 = 12 * a2;
    v18 = &v16[12 * a2];
    v19 = v16;
    do
    {
      v20 = *a3;
      *((_DWORD *)v19 + 2) = *((_DWORD *)a3 + 2);
      *(_QWORD *)v19 = v20;
      v19 += 12;
      v17 -= 12;
    }
    while (v17);
    v21 = (char *)*a1;
    if (v7 != *a1)
    {
      do
      {
        v22 = *(_QWORD *)(v7 - 12);
        v7 -= 12;
        v23 = v7[8];
        *(_QWORD *)(v16 - 12) = v22;
        v16 -= 12;
        v16[8] = v23;
      }
      while (v7 != v21);
      v7 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v18;
    a1[2] = &v12[12 * v11];
    if (v7)
      operator delete(v7);
  }
}

char *sub_20EDCFD40(unint64_t *a1, void *a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unint64_t v26;
  unsigned int *v27;
  char *v28;
  uint64_t v29;
  _OWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  unsigned int v36;
  char *v37;
  size_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  unsigned int *v48;
  uint64_t v49;
  _QWORD *v50;
  _OWORD *v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  unsigned int v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  __int128 *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  char *v78;
  unsigned int *v79;
  uint64_t v80;
  _QWORD *v81;
  _OWORD *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  unsigned int v87;

  v6 = *a1;
  v7 = (uint64_t)a2 - *a1;
  v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  v9 = a5 - 1;
  if (a5 < 1)
    return v8;
  v11 = a3;
  v12 = a1;
  v13 = v7 >> 3;
  v15 = (char *)a1[1];
  v14 = a1[2];
  if (a5 <= (uint64_t)(v14 - (_QWORD)v15) >> 3)
  {
    v23 = v15 - v8;
    v24 = (v15 - v8) >> 3;
    if (v24 >= a5)
    {
      v25 = (unsigned int *)(a3 + 4 * a5);
      v28 = (char *)a1[1];
      goto LABEL_22;
    }
    v25 = (unsigned int *)(a3 + 4 * v24);
    if (v25 != a4)
    {
      v26 = (unint64_t)a4 + -(v23 >> 1) - a3 - 4;
      v27 = (unsigned int *)(a3 + 4 * v24);
      v28 = (char *)a1[1];
      if (v26 < 0xC)
        goto LABEL_65;
      v29 = (v26 >> 2) + 1;
      v27 = &v25[v29 & 0x7FFFFFFFFFFFFFFCLL];
      v28 = &v15[8 * (v29 & 0x7FFFFFFFFFFFFFFCLL)];
      v30 = v15 + 16;
      v31 = (_QWORD *)(a3 + 4 * v24 + 8);
      v32 = v29 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *(v31 - 1);
        *(_QWORD *)&v34 = v33;
        *((_QWORD *)&v34 + 1) = HIDWORD(v33);
        v35 = v34;
        *(_QWORD *)&v34 = *v31;
        *((_QWORD *)&v34 + 1) = HIDWORD(*v31);
        *(v30 - 1) = v35;
        *v30 = v34;
        v30 += 2;
        v31 += 2;
        v32 -= 4;
      }
      while (v32);
      if (v29 != (v29 & 0x7FFFFFFFFFFFFFFCLL))
      {
LABEL_65:
        do
        {
          v36 = *v27++;
          *(_QWORD *)v28 = v36;
          v28 += 8;
        }
        while (v27 != a4);
      }
      a1[1] = (unint64_t)v28;
      if (v23 < 1)
        return v8;
LABEL_22:
      v37 = &v8[8 * a5];
      v38 = v28 - v37;
      v39 = (v28 - v37) >> 3;
      v40 = &v28[-8 * a5];
      v41 = v28;
      if (v40 < v15)
      {
        v42 = (v7 & 0xFFFFFFFFFFFFFFF8) + v38;
        v43 = v42 + v6 + 8;
        if ((unint64_t)v15 > v43)
          v43 = (unint64_t)v15;
        v44 = v43 + ~v6 - v42;
        if (v44 >= 0x58)
        {
          v41 = v28;
          if ((unint64_t)&v37[-(v7 & 0xFFFFFFFFFFFFFFF8) - v6] >= 0x20)
          {
            v69 = (v44 >> 3) + 1;
            v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
            v40 += v70;
            v41 = &v28[v70];
            v71 = v28 + 16;
            v72 = (__int128 *)(8 * v39 + 8 * v13 + v6 + 16);
            v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v74 = *v72;
              *(v71 - 1) = *(v72 - 1);
              *v71 = v74;
              v71 += 2;
              v72 += 2;
              v73 -= 4;
            }
            while (v73);
            if (v69 == (v69 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_49;
          }
        }
        else
        {
          v41 = v28;
        }
        do
        {
          v75 = *(_QWORD *)v40;
          v40 += 8;
          *(_QWORD *)v41 = v75;
          v41 += 8;
        }
        while (v40 < v15);
      }
LABEL_49:
      a1[1] = (unint64_t)v41;
      if (v28 != v37)
      {
        v76 = v8;
        memmove(&v28[-8 * v39], v8, v38);
        v8 = v76;
      }
      if (v25 != (unsigned int *)v11)
      {
        v77 = (unint64_t)v25 - v11 - 4;
        v78 = v8;
        v79 = (unsigned int *)v11;
        if (v77 < 0xC)
          goto LABEL_66;
        v80 = (v77 >> 2) + 1;
        v78 = &v8[8 * (v80 & 0x7FFFFFFFFFFFFFFCLL)];
        v79 = (unsigned int *)(v11 + 4 * (v80 & 0x7FFFFFFFFFFFFFFCLL));
        v81 = (_QWORD *)(v11 + 8);
        v82 = (_OWORD *)(v6 + 8 * v13 + 16);
        v83 = v80 & 0x7FFFFFFFFFFFFFFCLL;
        do
        {
          v84 = *(v81 - 1);
          *(_QWORD *)&v85 = v84;
          *((_QWORD *)&v85 + 1) = HIDWORD(v84);
          v86 = v85;
          *(_QWORD *)&v85 = *v81;
          *((_QWORD *)&v85 + 1) = HIDWORD(*v81);
          *(v82 - 1) = v86;
          *v82 = v85;
          v81 += 2;
          v82 += 2;
          v83 -= 4;
        }
        while (v83);
        if (v80 != (v80 & 0x7FFFFFFFFFFFFFFCLL))
        {
LABEL_66:
          do
          {
            v87 = *v79++;
            *(_QWORD *)v78 = v87;
            v78 += 8;
          }
          while (v79 != v25);
        }
      }
      return v8;
    }
    v28 = (char *)a1[1];
    a1[1] = (unint64_t)v15;
    if (v23 >= 1)
      goto LABEL_22;
    return v8;
  }
  v16 = a5 + ((uint64_t)&v15[-v6] >> 3);
  if (v16 >> 61)
    sub_20E867F44();
  v17 = v14 - v6;
  if (v17 >> 2 > v16)
    v16 = v17 >> 2;
  if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
    v18 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
  {
    if (v18 >> 61)
      sub_20E877A38();
    v20 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
    v21 = v18;
    v22 = operator new(8 * v18);
    v18 = v21;
    v8 = (char *)v20;
    v11 = a3;
    v12 = a1;
  }
  else
  {
    v22 = 0;
  }
  v45 = &v22[8 * v13];
  v46 = &v45[8 * a5];
  v47 = v45;
  v48 = (unsigned int *)v11;
  if ((v9 & 0x1FFFFFFFFFFFFFFFuLL) < 3)
    goto LABEL_67;
  v49 = (v9 & 0x1FFFFFFFFFFFFFFFLL) + 1;
  v47 = &v45[8 * (v49 & 0x3FFFFFFFFFFFFFFCLL)];
  v48 = (unsigned int *)(v11 + 4 * (v49 & 0x3FFFFFFFFFFFFFFCLL));
  v50 = (_QWORD *)(v11 + 8);
  v51 = v45 + 16;
  v52 = v49 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v53 = *(v50 - 1);
    *(_QWORD *)&v54 = v53;
    *((_QWORD *)&v54 + 1) = HIDWORD(v53);
    v55 = v54;
    *(_QWORD *)&v54 = *v50;
    *((_QWORD *)&v54 + 1) = HIDWORD(*v50);
    *(v51 - 1) = v55;
    *v51 = v54;
    v50 += 2;
    v51 += 2;
    v52 -= 4;
  }
  while (v52);
  if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_67:
    do
    {
      v56 = *v48++;
      *(_QWORD *)v47 = v56;
      v47 += 8;
    }
    while (v47 != v46);
  }
  v57 = &v22[8 * v13];
  if ((void *)v6 != a2)
  {
    v58 = v8;
    v57 = &v22[8 * v13];
    if ((unint64_t)(v7 - 8) < 0x68)
      goto LABEL_68;
    v58 = v8;
    v57 = &v22[8 * v13];
    if ((v7 & 0xFFFFFFFFFFFFFFF8) + v6 - (unint64_t)&v22[v7 & 0xFFFFFFFFFFFFFFF8] < 0x20)
      goto LABEL_68;
    v59 = ((unint64_t)(v7 - 8) >> 3) + 1;
    v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
    v58 = &v8[-v60];
    v57 = &v45[-v60];
    v61 = 8 * v13 - 16;
    v62 = &v22[v61];
    v63 = (__int128 *)(v6 + v61);
    v64 = v59 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v65 = *v63;
      *(v62 - 1) = *(v63 - 1);
      *v62 = v65;
      v62 -= 2;
      v63 -= 2;
      v64 -= 4;
    }
    while (v64);
    if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_68:
      do
      {
        v66 = *((_QWORD *)v58 - 1);
        v58 -= 8;
        *((_QWORD *)v57 - 1) = v66;
        v57 -= 8;
      }
      while (v58 != (char *)v6);
    }
  }
  v67 = &v22[8 * v18];
  v68 = v15 - v8;
  if (v15 != v8)
    memmove(v46, v8, v15 - v8);
  *v12 = v57;
  v12[1] = &v46[v68];
  v12[2] = v67;
  if (v6)
    operator delete((void *)v6);
  return v45;
}

uint64_t sub_20EDD019C(uint64_t a1, uint64_t a2, int8x16_t *a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int8x16_t *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;

  v5 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24);
  v6 = *(char **)a2;
  v7 = *(char **)(a2 + 8);
  v8 = (uint64_t)&v7[-*(_QWORD *)a2] >> 4;
  v9 = v8 + (v5 >> 3);
  if (v9 > (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)a2) >> 4)
  {
    if (v9 >> 60)
LABEL_55:
      sub_20E867F44();
    v10 = 16 * v9;
    v11 = (char *)operator new(16 * v9);
    v12 = &v11[16 * v8];
    if (v7 != v6)
    {
      v13 = &v11[16 * v8];
      do
      {
        v12 = v13 - 16;
        *((_OWORD *)v13 - 1) = *((_OWORD *)v7 - 1);
        v7 -= 16;
        v13 -= 16;
      }
      while (v7 != v6);
    }
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = &v11[16 * v8];
    *(_QWORD *)(a2 + 16) = &v11[v10];
    if (v6)
      operator delete(v6);
  }
  if ((unint64_t)v5 >= 9)
  {
    v14 = 0;
    v15 = a1;
    v16 = **(_QWORD **)(a1 + 24);
    v17 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(v16 + 53), *a3)), vcntq_s8(veorq_s8(*(int8x16_t *)(v16 + 69), a3[1]))), vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(v16 + 85), a3[2])), vcntq_s8(veorq_s8(*(int8x16_t *)(v16 + 101), a3[3])))));
    if ((unint64_t)(v5 >> 3) <= 2)
      v18 = 2;
    else
      v18 = v5 >> 3;
    v19 = 1;
    v51 = v18;
    while (1)
    {
      v22 = *(_QWORD *)(v15 + 24);
      v23 = *(_QWORD *)(v22 + 8 * v19);
      v21 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(a3[1], *(int8x16_t *)(v23 + 69))), vcntq_s8(veorq_s8(*a3, *(int8x16_t *)(v23 + 53)))), vaddq_s8(vcntq_s8(veorq_s8(a3[2], *(int8x16_t *)(v23 + 85))), vcntq_s8(veorq_s8(a3[3], *(int8x16_t *)(v23 + 101))))));
      if (v21 >= v17)
      {
        v28 = *(char **)(a2 + 8);
        v27 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v28 >= v27)
        {
          v49 = v14;
          v29 = *(char **)a2;
          v30 = (uint64_t)&v28[-*(_QWORD *)a2] >> 4;
          v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 60)
            goto LABEL_55;
          v32 = v27 - (_QWORD)v29;
          if (v32 >> 3 > v31)
            v31 = v32 >> 3;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
            v33 = 0xFFFFFFFFFFFFFFFLL;
          else
            v33 = v31;
          if (v33)
          {
            if (v33 >> 60)
              goto LABEL_56;
            v34 = (char *)operator new(16 * v33);
            v35 = *(_QWORD *)(v22 + 8 * v19);
            v36 = &v34[16 * v30];
            *(_QWORD *)v36 = v21;
            *((_QWORD *)v36 + 1) = v35;
            v37 = (uint64_t)v36;
            if (v28 != v29)
            {
LABEL_28:
              v15 = a1;
              do
              {
                *(_OWORD *)(v37 - 16) = *((_OWORD *)v28 - 1);
                v37 -= 16;
                v28 -= 16;
              }
              while (v28 != v29);
              v28 = *(char **)a2;
              v20 = v36 + 16;
              *(_QWORD *)a2 = v37;
              *(_QWORD *)(a2 + 8) = v36 + 16;
              *(_QWORD *)(a2 + 16) = &v34[16 * v33];
              if (v28)
LABEL_31:
                operator delete(v28);
LABEL_32:
              v21 = v17;
              v14 = v49;
              v18 = v51;
              goto LABEL_14;
            }
          }
          else
          {
            v34 = 0;
            v36 = (char *)(16 * v30);
            *(_QWORD *)v36 = v21;
            *((_QWORD *)v36 + 1) = v23;
            v37 = 16 * v30;
            if (v28 != v29)
              goto LABEL_28;
          }
          v15 = a1;
          v20 = v36 + 16;
          *(_QWORD *)a2 = v37;
          *(_QWORD *)(a2 + 8) = v36 + 16;
          *(_QWORD *)(a2 + 16) = &v34[16 * v33];
          if (v28)
            goto LABEL_31;
          goto LABEL_32;
        }
        *(_QWORD *)v28 = v21;
        *((_QWORD *)v28 + 1) = v23;
        v20 = v28 + 16;
        v21 = v17;
      }
      else
      {
        v25 = *(char **)(a2 + 8);
        v24 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v25 >= v24)
        {
          v38 = *(char **)a2;
          v39 = (uint64_t)&v25[-*(_QWORD *)a2] >> 4;
          v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 60)
            goto LABEL_55;
          v41 = v24 - (_QWORD)v38;
          if (v41 >> 3 > v40)
            v40 = v41 >> 3;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
            v40 = 0xFFFFFFFFFFFFFFFLL;
          v50 = v40;
          if (v40)
          {
            if (v40 >> 60)
LABEL_56:
              sub_20E877A38();
            v42 = a3;
            v43 = v14;
            v44 = (char *)operator new(16 * v40);
            v14 = v43;
            a3 = v42;
          }
          else
          {
            v44 = 0;
          }
          v45 = &v44[16 * v39];
          v46 = *(_QWORD *)(v22 + 8 * v14);
          *(_QWORD *)v45 = v17;
          *((_QWORD *)v45 + 1) = v46;
          v47 = v45;
          if (v25 == v38)
          {
            v15 = a1;
            v20 = v45 + 16;
            *(_QWORD *)a2 = v45;
            *(_QWORD *)(a2 + 8) = v45 + 16;
            *(_QWORD *)(a2 + 16) = &v44[16 * v50];
            if (v25)
              goto LABEL_49;
          }
          else
          {
            v15 = a1;
            do
            {
              *((_OWORD *)v47 - 1) = *((_OWORD *)v25 - 1);
              v47 -= 16;
              v25 -= 16;
            }
            while (v25 != v38);
            v25 = *(char **)a2;
            v20 = v45 + 16;
            *(_QWORD *)a2 = v47;
            *(_QWORD *)(a2 + 8) = v45 + 16;
            *(_QWORD *)(a2 + 16) = &v44[16 * v50];
            if (v25)
LABEL_49:
              operator delete(v25);
          }
          v14 = v19;
          v18 = v51;
          goto LABEL_14;
        }
        v26 = *(_QWORD *)(v22 + 8 * v14);
        *(_QWORD *)v25 = v17;
        *((_QWORD *)v25 + 1) = v26;
        v20 = v25 + 16;
        v14 = v19;
      }
LABEL_14:
      *(_QWORD *)(a2 + 8) = v20;
      ++v19;
      v17 = v21;
      if (v19 == v18)
        return v14;
    }
  }
  return 0;
}

void sub_20EDD0594(unsigned int **a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  unsigned int *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  _DWORD *v39;
  int64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _OWORD *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  _DWORD *v60;
  uint64_t v61;
  int64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  _OWORD *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  int v72;
  unsigned int *v73;
  unsigned int *v75;

  v4 = *a1;
  v73 = a1[1];
  if (*a1 != v73)
  {
    v5 = a4;
    while (1)
    {
      v75 = v4;
      v7 = *v4;
      v8 = (_QWORD *)(*a2 + 32 * v7);
      v9 = (_DWORD *)*v8;
      v10 = v8[1];
      if (*v8 != v10)
        break;
LABEL_3:
      v4 = v75 + 1;
      if (v75 + 1 == v73)
        return;
    }
    while (1)
    {
      v11 = *v9;
      v12 = v10 - (_QWORD)v9;
      if (v10 - (uint64_t)v9 < 9)
        goto LABEL_21;
      v13 = 0;
      v14 = v12 >> 3;
      v15 = *(_QWORD *)v9;
      v16 = (unint64_t)((v12 >> 3) - 2) >> 1;
      v17 = v9;
      do
      {
        v18 = &v17[v13 + 1];
        v19 = (2 * v13) | 1;
        v20 = 2 * v13 + 2;
        if (v20 < v14)
        {
          v21 = *((_DWORD *)v18 + 1);
          v22 = *((_DWORD *)v18 + 3);
          v18 += v21 < v22;
          if (v21 < v22)
            v19 = v20;
        }
        *v17 = *v18;
        v17 = v18;
        v13 = v19;
      }
      while (v19 <= v16);
      v23 = (_QWORD *)(v10 - 8);
      if (v18 == v23)
        goto LABEL_20;
      *v18 = *v23;
      *v23 = v15;
      v24 = (char *)v18 - (char *)v9 + 8;
      if (v24 >= 9)
      {
        v25 = (((unint64_t)v24 >> 3) - 2) >> 1;
        if (v9[2 * v25 + 1] < *((_DWORD *)v18 + 1))
          break;
      }
LABEL_21:
      v8[1] -= 8;
      v29 = (char *)v5[1];
      v28 = v5[2];
      if ((unint64_t)v29 >= v28)
      {
        v31 = v7;
        v32 = (char *)*v5;
        v33 = (uint64_t)&v29[-*v5];
        v34 = v33 >> 2;
        v35 = (v33 >> 2) + 1;
        if (v35 >> 62)
          sub_20E867F44();
        v36 = v28 - (_QWORD)v32;
        if (v36 >> 1 > v35)
          v35 = v36 >> 1;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
          v37 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37)
        {
          if (v37 >> 62)
            goto LABEL_67;
          v38 = operator new(4 * v37);
          v39 = &v38[4 * v34];
          *v39 = v11;
          v30 = (uint64_t)(v39 + 1);
          v40 = v29 - v32;
          if (v29 != v32)
          {
LABEL_32:
            v41 = v40 - 4;
            if (v41 < 0x2C)
            {
              v7 = v31;
              goto LABEL_40;
            }
            v42 = v29 - v38 - v33;
            v7 = v31;
            if (v42 < 0x20)
              goto LABEL_72;
            v43 = (v41 >> 2) + 1;
            v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
            v45 = &v29[-v44];
            v39 = (_DWORD *)((char *)v39 - v44);
            v46 = &v38[4 * v34 - 16];
            v47 = v29 - 16;
            v48 = v43 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v49 = *(_OWORD *)v47;
              *(v46 - 1) = *((_OWORD *)v47 - 1);
              *v46 = v49;
              v46 -= 2;
              v47 -= 32;
              v48 -= 8;
            }
            while (v48);
            v29 = v45;
            if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_72:
              do
              {
LABEL_40:
                v50 = *((_DWORD *)v29 - 1);
                v29 -= 4;
                *--v39 = v50;
              }
              while (v29 != v32);
            }
LABEL_41:
            v5 = a4;
            *a4 = v39;
            a4[1] = v30;
            a4[2] = &v38[4 * v37];
            if (v32)
              operator delete(v32);
            goto LABEL_43;
          }
        }
        else
        {
          v38 = 0;
          v39 = (_DWORD *)(4 * v34);
          *(_DWORD *)(4 * v34) = v11;
          v30 = 4 * v34 + 4;
          v40 = v29 - v32;
          if (v29 != v32)
            goto LABEL_32;
        }
        v7 = v31;
        goto LABEL_41;
      }
      *(_DWORD *)v29 = v11;
      v30 = (uint64_t)(v29 + 4);
LABEL_43:
      v5[1] = v30;
      v52 = *(char **)(a3 + 8);
      v51 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v52 < v51)
      {
        *(_DWORD *)v52 = v7;
        *(_QWORD *)(a3 + 8) = v52 + 4;
        v9 = (_DWORD *)*v8;
        v10 = v8[1];
        if (*v8 == v10)
          goto LABEL_3;
      }
      else
      {
        v53 = *(char **)a3;
        v54 = (uint64_t)&v52[-*(_QWORD *)a3];
        v55 = v54 >> 2;
        v56 = (v54 >> 2) + 1;
        if (v56 >> 62)
          sub_20E867F44();
        v57 = v51 - (_QWORD)v53;
        if (v57 >> 1 > v56)
          v56 = v57 >> 1;
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
          v58 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v58 = v56;
        if (v58)
        {
          if (v58 >> 62)
LABEL_67:
            sub_20E877A38();
          v59 = operator new(4 * v58);
          v60 = &v59[4 * v55];
          *v60 = v7;
          v61 = (uint64_t)(v60 + 1);
          v62 = v52 - v53;
          if (v52 == v53)
          {
LABEL_56:
            v5 = a4;
            goto LABEL_62;
          }
        }
        else
        {
          v59 = 0;
          v60 = (_DWORD *)(4 * v55);
          *(_DWORD *)(4 * v55) = v7;
          v61 = 4 * v55 + 4;
          v62 = v52 - v53;
          if (v52 == v53)
            goto LABEL_56;
        }
        v63 = v62 - 4;
        if (v63 < 0x2C)
        {
          v5 = a4;
          do
          {
LABEL_61:
            v72 = *((_DWORD *)v52 - 1);
            v52 -= 4;
            *--v60 = v72;
          }
          while (v52 != v53);
          goto LABEL_62;
        }
        v64 = v52 - &v59[v54];
        v5 = a4;
        if (v64 < 0x20)
          goto LABEL_61;
        v65 = (v63 >> 2) + 1;
        v66 = 4 * (v65 & 0x7FFFFFFFFFFFFFF8);
        v67 = &v52[-v66];
        v60 = (_DWORD *)((char *)v60 - v66);
        v68 = &v59[4 * v55 - 16];
        v69 = v52 - 16;
        v70 = v65 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v71 = *(_OWORD *)v69;
          *(v68 - 1) = *((_OWORD *)v69 - 1);
          *v68 = v71;
          v68 -= 2;
          v69 -= 32;
          v70 -= 8;
        }
        while (v70);
        v52 = v67;
        if (v65 != (v65 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_61;
LABEL_62:
        *(_QWORD *)a3 = v60;
        *(_QWORD *)(a3 + 8) = v61;
        *(_QWORD *)(a3 + 16) = &v59[4 * v58];
        if (v53)
          operator delete(v53);
        *(_QWORD *)(a3 + 8) = v61;
        v9 = (_DWORD *)*v8;
        v10 = v8[1];
        if (*v8 == v10)
          goto LABEL_3;
      }
    }
    v15 = *v18;
    v26 = HIDWORD(*v18);
    do
    {
      v27 = v18;
      v18 = &v9[2 * v25];
      *v27 = *v18;
      if (!v25)
        break;
      v25 = (v25 - 1) >> 1;
    }
    while (v9[2 * v25 + 1] < v26);
LABEL_20:
    *v18 = v15;
    goto LABEL_21;
  }
}

void sub_20EDD09E0(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  _DWORD *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  int v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  _DWORD *v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _OWORD *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  int v68;
  uint64_t v69;
  _QWORD *v71;

  v4 = *a1;
  v69 = a1[1];
  if (*a1 != v69)
  {
    while (1)
    {
      v7 = (_QWORD *)(*a2 + 32 * v4);
      v8 = (_DWORD *)*v7;
      v9 = v7[1];
      if (*v7 != v9)
        break;
LABEL_4:
      if (++v4 == v69)
        return;
    }
    v71 = (_QWORD *)(*a2 + 32 * v4);
    while (1)
    {
      v10 = *v8;
      v11 = v9 - (_QWORD)v8;
      if (v9 - (uint64_t)v8 >= 9)
      {
        v12 = 0;
        v13 = v11 >> 3;
        v14 = *(_QWORD *)v8;
        v15 = (unint64_t)((v11 >> 3) - 2) >> 1;
        v16 = v8;
        do
        {
          v17 = &v16[v12 + 1];
          v18 = (2 * v12) | 1;
          v19 = 2 * v12 + 2;
          if (v19 < v13)
          {
            v20 = *((_DWORD *)v17 + 1);
            v21 = *((_DWORD *)v17 + 3);
            v17 += v20 < v21;
            if (v20 < v21)
              v18 = v19;
          }
          *v16 = *v17;
          v16 = v17;
          v12 = v18;
        }
        while (v18 <= v15);
        v22 = (_QWORD *)(v9 - 8);
        if (v17 != v22)
        {
          *v17 = *v22;
          *v22 = v14;
          v23 = (char *)v17 - (char *)v8 + 8;
          if (v23 < 9)
            goto LABEL_22;
          v24 = (((unint64_t)v23 >> 3) - 2) >> 1;
          if (v8[2 * v24 + 1] >= *((_DWORD *)v17 + 1))
            goto LABEL_22;
          v14 = *v17;
          v25 = HIDWORD(*v17);
          do
          {
            v26 = v17;
            v17 = &v8[2 * v24];
            *v26 = *v17;
            if (!v24)
              break;
            v24 = (v24 - 1) >> 1;
          }
          while (v8[2 * v24 + 1] < v25);
        }
        *v17 = v14;
      }
LABEL_22:
      v7[1] -= 8;
      v28 = *(char **)(a4 + 8);
      v27 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v28 >= v27)
      {
        v31 = *(char **)a4;
        v32 = (uint64_t)&v28[-*(_QWORD *)a4];
        v33 = v32 >> 2;
        v34 = (v32 >> 2) + 1;
        if (v34 >> 62)
          sub_20E867F44();
        v35 = v27 - (_QWORD)v31;
        if (v35 >> 1 > v34)
          v34 = v35 >> 1;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
          v36 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        if (!v36)
        {
          v37 = 0;
          v38 = (_DWORD *)(4 * v33);
          *(_DWORD *)(4 * v33) = v10;
          v39 = 4 * v33 + 4;
          v40 = v28 - v31;
          if (v28 == v31)
            goto LABEL_42;
LABEL_36:
          v41 = v40 - 4;
          if (v41 < 0x2C)
            goto LABEL_71;
          if ((unint64_t)(v28 - v37 - v32) < 0x20)
            goto LABEL_71;
          v42 = (v41 >> 2) + 1;
          v43 = 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
          v44 = &v28[-v43];
          v38 = (_DWORD *)((char *)v38 - v43);
          v45 = &v37[4 * v33 - 16];
          v46 = v28 - 16;
          v47 = v42 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v48 = *(_OWORD *)v46;
            *(v45 - 1) = *((_OWORD *)v46 - 1);
            *v45 = v48;
            v45 -= 2;
            v46 -= 32;
            v47 -= 8;
          }
          while (v47);
          v28 = v44;
          if (v42 != (v42 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_71:
            do
            {
              v49 = *((_DWORD *)v28 - 1);
              v28 -= 4;
              *--v38 = v49;
            }
            while (v28 != v31);
          }
          goto LABEL_42;
        }
        if (v36 >> 62)
          goto LABEL_66;
        v37 = operator new(4 * v36);
        v38 = &v37[4 * v33];
        *v38 = v10;
        v39 = (uint64_t)(v38 + 1);
        v40 = v28 - v31;
        if (v28 != v31)
          goto LABEL_36;
LABEL_42:
        *(_QWORD *)a4 = v38;
        *(_QWORD *)(a4 + 8) = v39;
        *(_QWORD *)(a4 + 16) = &v37[4 * v36];
        if (v31)
          operator delete(v31);
        v7 = v71;
        *(_QWORD *)(a4 + 8) = v39;
        v30 = *(char **)(a3 + 8);
        v29 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v30 < v29)
          goto LABEL_7;
LABEL_45:
        v50 = *(char **)a3;
        v51 = (uint64_t)&v30[-*(_QWORD *)a3];
        v52 = v51 >> 2;
        v53 = (v51 >> 2) + 1;
        if (v53 >> 62)
          sub_20E867F44();
        v54 = v29 - (_QWORD)v50;
        if (v54 >> 1 > v53)
          v53 = v54 >> 1;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
          v55 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v55 = v53;
        if (v55)
        {
          if (v55 >> 62)
LABEL_66:
            sub_20E877A38();
          v56 = operator new(4 * v55);
          v57 = &v56[4 * v52];
          *v57 = v4;
          v58 = (uint64_t)(v57 + 1);
          v59 = v30 - v50;
          if (v30 == v50)
            goto LABEL_62;
LABEL_56:
          v60 = v59 - 4;
          if (v60 < 0x2C)
            goto LABEL_72;
          if ((unint64_t)(v30 - &v56[v51]) < 0x20)
            goto LABEL_72;
          v61 = (v60 >> 2) + 1;
          v62 = 4 * (v61 & 0x7FFFFFFFFFFFFFF8);
          v63 = &v30[-v62];
          v57 = (_DWORD *)((char *)v57 - v62);
          v64 = &v56[4 * v52 - 16];
          v65 = v30 - 16;
          v66 = v61 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v67 = *(_OWORD *)v65;
            *(v64 - 1) = *((_OWORD *)v65 - 1);
            *v64 = v67;
            v64 -= 2;
            v65 -= 32;
            v66 -= 8;
          }
          while (v66);
          v30 = v63;
          if (v61 != (v61 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_72:
            do
            {
              v68 = *((_DWORD *)v30 - 1);
              v30 -= 4;
              *--v57 = v68;
            }
            while (v30 != v50);
          }
          goto LABEL_62;
        }
        v56 = 0;
        v57 = (_DWORD *)(4 * v52);
        *(_DWORD *)(4 * v52) = v4;
        v58 = 4 * v52 + 4;
        v59 = v30 - v50;
        if (v30 != v50)
          goto LABEL_56;
LABEL_62:
        *(_QWORD *)a3 = v57;
        *(_QWORD *)(a3 + 8) = v58;
        *(_QWORD *)(a3 + 16) = &v56[4 * v55];
        if (v50)
          operator delete(v50);
        v7 = v71;
        *(_QWORD *)(a3 + 8) = v58;
        v8 = (_DWORD *)*v71;
        v9 = v71[1];
        if (*v71 == v9)
          goto LABEL_4;
      }
      else
      {
        *(_DWORD *)v28 = v10;
        *(_QWORD *)(a4 + 8) = v28 + 4;
        v30 = *(char **)(a3 + 8);
        v29 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v30 >= v29)
          goto LABEL_45;
LABEL_7:
        *(_DWORD *)v30 = v4;
        *(_QWORD *)(a3 + 8) = v30 + 4;
        v8 = (_DWORD *)*v7;
        v9 = v7[1];
        if (*v7 == v9)
          goto LABEL_4;
      }
    }
  }
}

void **sub_20EDD0E10(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 4);
        v5 -= 32;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 3) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20EDD0E84(char **a1, unint64_t a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  const void *v17;
  int64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  const void *v26;
  int64_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  char *v32;
  char *v33;
  void *v34;
  void *v35;
  __int128 v36;

  v6 = a1[2];
  v7 = a1[1];
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      v13 = 32 * a2;
      v14 = &v7[32 * a2];
      do
      {
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v7 + 1) = 0;
        *((_QWORD *)v7 + 2) = 0;
        v17 = *(const void **)a3;
        v16 = *(_QWORD *)(a3 + 8);
        v18 = v16 - *(_QWORD *)a3;
        if (v16 != *(_QWORD *)a3)
        {
          if (v18 < 0)
            sub_20E867F44();
          v19 = (char *)operator new(v16 - *(_QWORD *)a3);
          *(_QWORD *)v7 = v19;
          *((_QWORD *)v7 + 1) = v19;
          v15 = &v19[8 * (v18 >> 3)];
          *((_QWORD *)v7 + 2) = v15;
          memcpy(v19, v17, v18);
          *((_QWORD *)v7 + 1) = v15;
        }
        v7 += 32;
        v13 -= 32;
      }
      while (v13);
      v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = (v7 - *a1) >> 5;
    if ((v8 + a2) >> 59)
      sub_20E867F44();
    v9 = v6 - *a1;
    v10 = v9 >> 4;
    if (v9 >> 4 <= v8 + a2)
      v10 = v8 + a2;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      if (v11 >> 59)
        sub_20E877A38();
      v12 = (char *)operator new(32 * v11);
    }
    else
    {
      v12 = 0;
    }
    v20 = &v12[32 * v8];
    *((_QWORD *)&v36 + 1) = &v12[32 * v11];
    v21 = 32 * a2;
    v22 = &v20[32 * a2];
    v23 = v20;
    do
    {
      *(_QWORD *)v23 = 0;
      *((_QWORD *)v23 + 1) = 0;
      *((_QWORD *)v23 + 2) = 0;
      v26 = *(const void **)a3;
      v25 = *(_QWORD *)(a3 + 8);
      v27 = v25 - *(_QWORD *)a3;
      if (v25 != *(_QWORD *)a3)
      {
        if (v27 < 0)
          sub_20E867F44();
        v28 = (char *)operator new(v25 - *(_QWORD *)a3);
        *(_QWORD *)v23 = v28;
        *((_QWORD *)v23 + 1) = v28;
        v24 = &v28[8 * (v27 >> 3)];
        *((_QWORD *)v23 + 2) = v24;
        memcpy(v28, v26, v27);
        *((_QWORD *)v23 + 1) = v24;
      }
      v23 += 32;
      v21 -= 32;
    }
    while (v21);
    *(_QWORD *)&v36 = v22;
    v29 = *a1;
    v30 = a1[1];
    if (v30 == *a1)
    {
      *a1 = v20;
      a1[1] = v22;
      a1[2] = (char *)*((_QWORD *)&v36 + 1);
    }
    else
    {
      do
      {
        *((_QWORD *)v20 - 4) = 0;
        *((_QWORD *)v20 - 3) = 0;
        v20 -= 32;
        *((_QWORD *)v20 + 2) = 0;
        v31 = *((_OWORD *)v30 - 2);
        v30 -= 32;
        *(_OWORD *)v20 = v31;
        *((_QWORD *)v20 + 2) = *((_QWORD *)v30 + 2);
        *(_QWORD *)v30 = 0;
        *((_QWORD *)v30 + 1) = 0;
        *((_QWORD *)v30 + 2) = 0;
      }
      while (v30 != v29);
      v30 = *a1;
      v32 = a1[1];
      *a1 = v20;
      *(_OWORD *)(a1 + 1) = v36;
      if (v32 != v30)
      {
        v33 = v32;
        do
        {
          v35 = (void *)*((_QWORD *)v33 - 4);
          v33 -= 32;
          v34 = v35;
          if (v35)
          {
            *((_QWORD *)v32 - 3) = v34;
            operator delete(v34);
          }
          v32 = v33;
        }
        while (v33 != v30);
      }
    }
    if (v30)
      operator delete(v30);
  }
}

void sub_20EDD10D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20EDD10D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_20EDD10F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EDD1138((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EDD1110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  void *v14;

  v14 = *(void **)v12;
  if (*(_QWORD *)v12)
  {
    *(_QWORD *)(v12 + 8) = v14;
    operator delete(v14);
  }
  a12 = v12;
  sub_20EDD1138((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EDD1138(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v5 = v2 - 32;
        v4 = *(void **)(v2 - 32);
        *(_QWORD *)(a1 + 16) = v2 - 32;
        if (!v4)
          break;
        *(_QWORD *)(v2 - 24) = v4;
        operator delete(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 32;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20EDD11A4(void **a1, _QWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;

  v5 = (char *)a1[1];
  v4 = (unint64_t)a1[2];
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = (char *)*a1;
    v9 = v5 - (_BYTE *)*a1;
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + 1;
    if (v11 >> 61)
      sub_20E867F44();
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        sub_20E877A38();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    *v15 = *a2;
    v7 = v15 + 1;
    if (v5 != v8)
    {
      v16 = v5 - v8 - 8;
      if (v16 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_34;
      v17 = (v16 >> 3) + 1;
      v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v18];
      v15 = (_QWORD *)((char *)v15 - v18);
      v19 = &v14[8 * v10 - 16];
      v20 = (__int128 *)(v5 - 16);
      v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v23 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *--v15 = v23;
        }
        while (v6 != v8);
      }
      v6 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v7;
    a1[2] = &v14[8 * v13];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v5 = *a2;
    v7 = v5 + 8;
  }
  a1[1] = v7;
  v24 = *a1;
  v25 = (char *)v7 - (_BYTE *)*a1;
  if (v25 >= 9)
  {
    v26 = (((unint64_t)v25 >> 3) - 2) >> 1;
    if (v24[2 * v26 + 1] < *((_DWORD *)v7 - 1))
    {
      v29 = *(v7 - 1);
      v28 = v7 - 1;
      v27 = v29;
      v30 = HIDWORD(v29);
      do
      {
        v31 = v28;
        v28 = (unint64_t *)&v24[2 * v26];
        *v31 = *v28;
        if (!v26)
          break;
        v26 = (v26 - 1) >> 1;
      }
      while (v24[2 * v26 + 1] < v30);
      *v28 = v27;
    }
  }
}

void sub_20EDD1370(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = v4 - *(_QWORD *)a1;
  v6 = v5 >> 3;
  if (v5 >> 3 == *(_QWORD *)(a1 + 32))
  {
    if (*((_DWORD *)v3 + 1) <= a2)
      return;
    if (v5 >= 9)
    {
      v7 = 0;
      v8 = *v3;
      v9 = *(_QWORD **)a1;
      do
      {
        v10 = (char *)&v9[v7 + 1];
        v11 = (2 * v7) | 1;
        v12 = 2 * v7 + 2;
        if (v12 < v6)
        {
          v13 = *((_DWORD *)v10 + 1);
          v14 = *((_DWORD *)v10 + 3);
          v10 += 8 * (v13 < v14);
          if (v13 < v14)
            v11 = v12;
        }
        *v9 = *(_QWORD *)v10;
        v9 = v10;
        v7 = v11;
      }
      while (v11 <= (uint64_t)((unint64_t)(v6 - 2) >> 1));
      v15 = (char *)(v4 - 8);
      if (v10 == v15)
      {
        *(_QWORD *)v10 = v8;
      }
      else
      {
        *(_QWORD *)v10 = *(_QWORD *)v15;
        *(_QWORD *)v15 = v8;
        v16 = v10 - (char *)v3 + 8;
        if (v16 >= 9)
        {
          v17 = (((unint64_t)v16 >> 3) - 2) >> 1;
          if (HIDWORD(v3[v17]) < *((_DWORD *)v10 + 1))
          {
            v18 = *(_QWORD *)v10;
            v19 = HIDWORD(*(_QWORD *)v10);
            do
            {
              v20 = v10;
              v10 = (char *)&v3[v17];
              *v20 = *(_QWORD *)v10;
              if (!v17)
                break;
              v17 = (v17 - 1) >> 1;
            }
            while (HIDWORD(v3[v17]) < v19);
            *(_QWORD *)v10 = v18;
          }
        }
      }
    }
    *(_QWORD *)(a1 + 8) -= 8;
  }
  v21 = __PAIR64__(a2, a3);
  sub_20EDD11A4((void **)a1, &v21);
}

void sub_20EDD14C0(unsigned int **a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  unsigned int *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  _DWORD *v39;
  int64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _OWORD *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  _DWORD *v60;
  uint64_t v61;
  int64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  _OWORD *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  int v72;
  unsigned int *v73;
  unsigned int *v75;

  v4 = *a1;
  v73 = a1[1];
  if (*a1 != v73)
  {
    v5 = a4;
    while (1)
    {
      v75 = v4;
      v7 = *v4;
      v8 = (_QWORD *)(*a2 + 40 * v7);
      v9 = (_DWORD *)*v8;
      v10 = v8[1];
      if (*v8 != v10)
        break;
LABEL_3:
      v4 = v75 + 1;
      if (v75 + 1 == v73)
        return;
    }
    while (1)
    {
      v11 = *v9;
      v12 = v10 - (_QWORD)v9;
      if (v10 - (uint64_t)v9 < 9)
        goto LABEL_21;
      v13 = 0;
      v14 = v12 >> 3;
      v15 = *(_QWORD *)v9;
      v16 = (unint64_t)((v12 >> 3) - 2) >> 1;
      v17 = v9;
      do
      {
        v18 = &v17[v13 + 1];
        v19 = (2 * v13) | 1;
        v20 = 2 * v13 + 2;
        if (v20 < v14)
        {
          v21 = *((_DWORD *)v18 + 1);
          v22 = *((_DWORD *)v18 + 3);
          v18 += v21 < v22;
          if (v21 < v22)
            v19 = v20;
        }
        *v17 = *v18;
        v17 = v18;
        v13 = v19;
      }
      while (v19 <= v16);
      v23 = (_QWORD *)(v10 - 8);
      if (v18 == v23)
        goto LABEL_20;
      *v18 = *v23;
      *v23 = v15;
      v24 = (char *)v18 - (char *)v9 + 8;
      if (v24 >= 9)
      {
        v25 = (((unint64_t)v24 >> 3) - 2) >> 1;
        if (v9[2 * v25 + 1] < *((_DWORD *)v18 + 1))
          break;
      }
LABEL_21:
      v8[1] -= 8;
      v29 = (char *)v5[1];
      v28 = v5[2];
      if ((unint64_t)v29 >= v28)
      {
        v31 = v7;
        v32 = (char *)*v5;
        v33 = (uint64_t)&v29[-*v5];
        v34 = v33 >> 2;
        v35 = (v33 >> 2) + 1;
        if (v35 >> 62)
          sub_20E867F44();
        v36 = v28 - (_QWORD)v32;
        if (v36 >> 1 > v35)
          v35 = v36 >> 1;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
          v37 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37)
        {
          if (v37 >> 62)
            goto LABEL_67;
          v38 = operator new(4 * v37);
          v39 = &v38[4 * v34];
          *v39 = v11;
          v30 = (uint64_t)(v39 + 1);
          v40 = v29 - v32;
          if (v29 != v32)
          {
LABEL_32:
            v41 = v40 - 4;
            if (v41 < 0x2C)
            {
              v7 = v31;
              goto LABEL_40;
            }
            v42 = v29 - v38 - v33;
            v7 = v31;
            if (v42 < 0x20)
              goto LABEL_72;
            v43 = (v41 >> 2) + 1;
            v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
            v45 = &v29[-v44];
            v39 = (_DWORD *)((char *)v39 - v44);
            v46 = &v38[4 * v34 - 16];
            v47 = v29 - 16;
            v48 = v43 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v49 = *(_OWORD *)v47;
              *(v46 - 1) = *((_OWORD *)v47 - 1);
              *v46 = v49;
              v46 -= 2;
              v47 -= 32;
              v48 -= 8;
            }
            while (v48);
            v29 = v45;
            if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_72:
              do
              {
LABEL_40:
                v50 = *((_DWORD *)v29 - 1);
                v29 -= 4;
                *--v39 = v50;
              }
              while (v29 != v32);
            }
LABEL_41:
            v5 = a4;
            *a4 = v39;
            a4[1] = v30;
            a4[2] = &v38[4 * v37];
            if (v32)
              operator delete(v32);
            goto LABEL_43;
          }
        }
        else
        {
          v38 = 0;
          v39 = (_DWORD *)(4 * v34);
          *(_DWORD *)(4 * v34) = v11;
          v30 = 4 * v34 + 4;
          v40 = v29 - v32;
          if (v29 != v32)
            goto LABEL_32;
        }
        v7 = v31;
        goto LABEL_41;
      }
      *(_DWORD *)v29 = v11;
      v30 = (uint64_t)(v29 + 4);
LABEL_43:
      v5[1] = v30;
      v52 = *(char **)(a3 + 8);
      v51 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v52 < v51)
      {
        *(_DWORD *)v52 = v7;
        *(_QWORD *)(a3 + 8) = v52 + 4;
        v9 = (_DWORD *)*v8;
        v10 = v8[1];
        if (*v8 == v10)
          goto LABEL_3;
      }
      else
      {
        v53 = *(char **)a3;
        v54 = (uint64_t)&v52[-*(_QWORD *)a3];
        v55 = v54 >> 2;
        v56 = (v54 >> 2) + 1;
        if (v56 >> 62)
          sub_20E867F44();
        v57 = v51 - (_QWORD)v53;
        if (v57 >> 1 > v56)
          v56 = v57 >> 1;
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
          v58 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v58 = v56;
        if (v58)
        {
          if (v58 >> 62)
LABEL_67:
            sub_20E877A38();
          v59 = operator new(4 * v58);
          v60 = &v59[4 * v55];
          *v60 = v7;
          v61 = (uint64_t)(v60 + 1);
          v62 = v52 - v53;
          if (v52 == v53)
          {
LABEL_56:
            v5 = a4;
            goto LABEL_62;
          }
        }
        else
        {
          v59 = 0;
          v60 = (_DWORD *)(4 * v55);
          *(_DWORD *)(4 * v55) = v7;
          v61 = 4 * v55 + 4;
          v62 = v52 - v53;
          if (v52 == v53)
            goto LABEL_56;
        }
        v63 = v62 - 4;
        if (v63 < 0x2C)
        {
          v5 = a4;
          do
          {
LABEL_61:
            v72 = *((_DWORD *)v52 - 1);
            v52 -= 4;
            *--v60 = v72;
          }
          while (v52 != v53);
          goto LABEL_62;
        }
        v64 = v52 - &v59[v54];
        v5 = a4;
        if (v64 < 0x20)
          goto LABEL_61;
        v65 = (v63 >> 2) + 1;
        v66 = 4 * (v65 & 0x7FFFFFFFFFFFFFF8);
        v67 = &v52[-v66];
        v60 = (_DWORD *)((char *)v60 - v66);
        v68 = &v59[4 * v55 - 16];
        v69 = v52 - 16;
        v70 = v65 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v71 = *(_OWORD *)v69;
          *(v68 - 1) = *((_OWORD *)v69 - 1);
          *v68 = v71;
          v68 -= 2;
          v69 -= 32;
          v70 -= 8;
        }
        while (v70);
        v52 = v67;
        if (v65 != (v65 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_61;
LABEL_62:
        *(_QWORD *)a3 = v60;
        *(_QWORD *)(a3 + 8) = v61;
        *(_QWORD *)(a3 + 16) = &v59[4 * v58];
        if (v53)
          operator delete(v53);
        *(_QWORD *)(a3 + 8) = v61;
        v9 = (_DWORD *)*v8;
        v10 = v8[1];
        if (*v8 == v10)
          goto LABEL_3;
      }
    }
    v15 = *v18;
    v26 = HIDWORD(*v18);
    do
    {
      v27 = v18;
      v18 = &v9[2 * v25];
      *v27 = *v18;
      if (!v25)
        break;
      v25 = (v25 - 1) >> 1;
    }
    while (v9[2 * v25 + 1] < v26);
LABEL_20:
    *v18 = v15;
    goto LABEL_21;
  }
}

void sub_20EDD1910(uint64_t *a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  _DWORD *v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _OWORD *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  _DWORD *v59;
  uint64_t v60;
  int64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _OWORD *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  int v70;
  uint64_t v71;

  v4 = *a1;
  v71 = a1[1];
  if (*a1 != v71)
  {
    v5 = a4;
    while (1)
    {
      v7 = (_QWORD *)(*a2 + 40 * v4);
      v8 = (_DWORD *)*v7;
      v9 = v7[1];
      if (*v7 != v9)
        break;
LABEL_4:
      if (++v4 == v71)
        return;
    }
    while (1)
    {
      v10 = *v8;
      v11 = v9 - (_QWORD)v8;
      if (v9 - (uint64_t)v8 >= 9)
      {
        v12 = 0;
        v13 = v11 >> 3;
        v14 = *(_QWORD *)v8;
        v15 = (unint64_t)((v11 >> 3) - 2) >> 1;
        v16 = v8;
        do
        {
          v17 = &v16[v12 + 1];
          v18 = (2 * v12) | 1;
          v19 = 2 * v12 + 2;
          if (v19 < v13)
          {
            v20 = *((_DWORD *)v17 + 1);
            v21 = *((_DWORD *)v17 + 3);
            v17 += v20 < v21;
            if (v20 < v21)
              v18 = v19;
          }
          *v16 = *v17;
          v16 = v17;
          v12 = v18;
        }
        while (v18 <= v15);
        v22 = (_QWORD *)(v9 - 8);
        if (v17 != v22)
        {
          *v17 = *v22;
          *v22 = v14;
          v23 = (char *)v17 - (char *)v8 + 8;
          if (v23 < 9)
            goto LABEL_22;
          v24 = (((unint64_t)v23 >> 3) - 2) >> 1;
          if (v8[2 * v24 + 1] >= *((_DWORD *)v17 + 1))
            goto LABEL_22;
          v14 = *v17;
          v25 = HIDWORD(*v17);
          do
          {
            v26 = v17;
            v17 = &v8[2 * v24];
            *v26 = *v17;
            if (!v24)
              break;
            v24 = (v24 - 1) >> 1;
          }
          while (v8[2 * v24 + 1] < v25);
        }
        *v17 = v14;
      }
LABEL_22:
      v7[1] -= 8;
      v28 = (char *)v5[1];
      v27 = v5[2];
      if ((unint64_t)v28 >= v27)
      {
        v31 = v4;
        v32 = (char *)*v5;
        v33 = (uint64_t)&v28[-*v5];
        v34 = v33 >> 2;
        v35 = (v33 >> 2) + 1;
        if (v35 >> 62)
          sub_20E867F44();
        v36 = v27 - (_QWORD)v32;
        if (v36 >> 1 > v35)
          v35 = v36 >> 1;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
          v37 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (!v37)
        {
          v38 = 0;
          v39 = (_DWORD *)(4 * v34);
          *(_DWORD *)(4 * v34) = v10;
          v40 = 4 * v34 + 4;
          v41 = v28 - v32;
          if (v28 == v32)
            goto LABEL_42;
LABEL_36:
          v42 = v41 - 4;
          if (v42 < 0x2C)
            goto LABEL_71;
          if ((unint64_t)(v28 - v38 - v33) < 0x20)
            goto LABEL_71;
          v43 = (v42 >> 2) + 1;
          v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
          v45 = &v28[-v44];
          v39 = (_DWORD *)((char *)v39 - v44);
          v46 = &v38[4 * v34 - 16];
          v47 = v28 - 16;
          v48 = v43 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v49 = *(_OWORD *)v47;
            *(v46 - 1) = *((_OWORD *)v47 - 1);
            *v46 = v49;
            v46 -= 2;
            v47 -= 32;
            v48 -= 8;
          }
          while (v48);
          v28 = v45;
          if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_71:
            do
            {
              v50 = *((_DWORD *)v28 - 1);
              v28 -= 4;
              *--v39 = v50;
            }
            while (v28 != v32);
          }
          goto LABEL_42;
        }
        if (v37 >> 62)
          goto LABEL_66;
        v38 = operator new(4 * v37);
        v39 = &v38[4 * v34];
        *v39 = v10;
        v40 = (uint64_t)(v39 + 1);
        v41 = v28 - v32;
        if (v28 != v32)
          goto LABEL_36;
LABEL_42:
        v51 = &v38[4 * v37];
        v5 = a4;
        *a4 = v39;
        a4[1] = v40;
        a4[2] = v51;
        if (v32)
          operator delete(v32);
        v4 = v31;
        a4[1] = v40;
        v30 = *(char **)(a3 + 8);
        v29 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v30 < v29)
          goto LABEL_7;
LABEL_45:
        v52 = *(char **)a3;
        v53 = (uint64_t)&v30[-*(_QWORD *)a3];
        v54 = v53 >> 2;
        v55 = (v53 >> 2) + 1;
        if (v55 >> 62)
          sub_20E867F44();
        v56 = v29 - (_QWORD)v52;
        if (v56 >> 1 > v55)
          v55 = v56 >> 1;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
          v57 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v57 = v55;
        if (v57)
        {
          if (v57 >> 62)
LABEL_66:
            sub_20E877A38();
          v58 = operator new(4 * v57);
          v59 = &v58[4 * v54];
          *v59 = v4;
          v60 = (uint64_t)(v59 + 1);
          v61 = v30 - v52;
          if (v30 == v52)
            goto LABEL_62;
LABEL_56:
          v62 = v61 - 4;
          if (v62 < 0x2C)
            goto LABEL_72;
          if ((unint64_t)(v30 - &v58[v53]) < 0x20)
            goto LABEL_72;
          v63 = (v62 >> 2) + 1;
          v64 = 4 * (v63 & 0x7FFFFFFFFFFFFFF8);
          v65 = &v30[-v64];
          v59 = (_DWORD *)((char *)v59 - v64);
          v66 = &v58[4 * v54 - 16];
          v67 = v30 - 16;
          v68 = v63 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v69 = *(_OWORD *)v67;
            *(v66 - 1) = *((_OWORD *)v67 - 1);
            *v66 = v69;
            v66 -= 2;
            v67 -= 32;
            v68 -= 8;
          }
          while (v68);
          v30 = v65;
          if (v63 != (v63 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_72:
            do
            {
              v70 = *((_DWORD *)v30 - 1);
              v30 -= 4;
              *--v59 = v70;
            }
            while (v30 != v52);
          }
          goto LABEL_62;
        }
        v58 = 0;
        v59 = (_DWORD *)(4 * v54);
        *(_DWORD *)(4 * v54) = v4;
        v60 = 4 * v54 + 4;
        v61 = v30 - v52;
        if (v30 != v52)
          goto LABEL_56;
LABEL_62:
        *(_QWORD *)a3 = v59;
        *(_QWORD *)(a3 + 8) = v60;
        *(_QWORD *)(a3 + 16) = &v58[4 * v57];
        if (v52)
          operator delete(v52);
        v5 = a4;
        *(_QWORD *)(a3 + 8) = v60;
        v8 = (_DWORD *)*v7;
        v9 = v7[1];
        if (*v7 == v9)
          goto LABEL_4;
      }
      else
      {
        *(_DWORD *)v28 = v10;
        v5[1] = v28 + 4;
        v30 = *(char **)(a3 + 8);
        v29 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v30 >= v29)
          goto LABEL_45;
LABEL_7:
        *(_DWORD *)v30 = v4;
        *(_QWORD *)(a3 + 8) = v30 + 4;
        v8 = (_DWORD *)*v7;
        v9 = v7[1];
        if (*v7 == v9)
          goto LABEL_4;
      }
    }
  }
}

void **sub_20EDD1D4C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 5);
        v5 -= 40;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 4) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20EDD1DC0(char **a1, unint64_t a2, uint64_t a3)
{
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  const void *v17;
  int64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  const void *v26;
  int64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  void *v36;
  void *v37;
  __int128 v38;

  v6 = a1[2];
  v7 = a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[40 * a2];
      v14 = 40 * a2;
      do
      {
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v7 + 1) = 0;
        *((_QWORD *)v7 + 2) = 0;
        v17 = *(const void **)a3;
        v16 = *(_QWORD *)(a3 + 8);
        v18 = v16 - *(_QWORD *)a3;
        if (v16 != *(_QWORD *)a3)
        {
          if (v18 < 0)
            sub_20E867F44();
          v19 = (char *)operator new(v16 - *(_QWORD *)a3);
          *(_QWORD *)v7 = v19;
          *((_QWORD *)v7 + 1) = v19;
          v15 = &v19[8 * (v18 >> 3)];
          *((_QWORD *)v7 + 2) = v15;
          memcpy(v19, v17, v18);
          *((_QWORD *)v7 + 1) = v15;
        }
        *((_QWORD *)v7 + 4) = *(_QWORD *)(a3 + 32);
        v7 += 40;
        v14 -= 40;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666)
      sub_20E867F44();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0x666666666666666)
        sub_20E877A38();
      v12 = (char *)operator new(40 * v11);
    }
    else
    {
      v12 = 0;
    }
    v20 = &v12[40 * v8];
    *((_QWORD *)&v38 + 1) = &v12[40 * v11];
    v21 = 40 * a2;
    v22 = &v20[40 * a2];
    v23 = v20;
    do
    {
      *(_QWORD *)v23 = 0;
      *((_QWORD *)v23 + 1) = 0;
      *((_QWORD *)v23 + 2) = 0;
      v26 = *(const void **)a3;
      v25 = *(_QWORD *)(a3 + 8);
      v27 = v25 - *(_QWORD *)a3;
      if (v25 != *(_QWORD *)a3)
      {
        if (v27 < 0)
          sub_20E867F44();
        v28 = (char *)operator new(v25 - *(_QWORD *)a3);
        *(_QWORD *)v23 = v28;
        *((_QWORD *)v23 + 1) = v28;
        v24 = &v28[8 * (v27 >> 3)];
        *((_QWORD *)v23 + 2) = v24;
        memcpy(v28, v26, v27);
        *((_QWORD *)v23 + 1) = v24;
      }
      *((_QWORD *)v23 + 4) = *(_QWORD *)(a3 + 32);
      v23 += 40;
      v21 -= 40;
    }
    while (v21);
    *(_QWORD *)&v38 = v22;
    v29 = *a1;
    v30 = a1[1];
    if (v30 == *a1)
    {
      *a1 = v20;
      a1[1] = v22;
      a1[2] = (char *)*((_QWORD *)&v38 + 1);
    }
    else
    {
      v31 = 0;
      do
      {
        v32 = &v20[v31];
        v33 = &v30[v31];
        *((_QWORD *)v32 - 5) = 0;
        *((_QWORD *)v32 - 4) = 0;
        *((_QWORD *)v32 - 3) = 0;
        *(_OWORD *)(v32 - 40) = *(_OWORD *)&v30[v31 - 40];
        *((_QWORD *)v32 - 3) = *(_QWORD *)&v30[v31 - 24];
        *((_QWORD *)v33 - 5) = 0;
        *((_QWORD *)v33 - 4) = 0;
        *((_QWORD *)v33 - 3) = 0;
        *((_QWORD *)v32 - 1) = *(_QWORD *)&v30[v31 - 8];
        v31 -= 40;
      }
      while (&v30[v31] != v29);
      v30 = *a1;
      v34 = a1[1];
      *a1 = &v20[v31];
      *(_OWORD *)(a1 + 1) = v38;
      if (v34 != v30)
      {
        v35 = v34;
        do
        {
          v37 = (void *)*((_QWORD *)v35 - 5);
          v35 -= 40;
          v36 = v37;
          if (v37)
          {
            *((_QWORD *)v34 - 4) = v36;
            operator delete(v36);
          }
          v34 = v35;
        }
        while (v35 != v30);
      }
    }
    if (v30)
      operator delete(v30);
  }
}

void sub_20EDD207C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20EDD2084(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_20EDD20A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EDD20E4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EDD20BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  void *v14;

  v14 = *(void **)v12;
  if (*(_QWORD *)v12)
  {
    *(_QWORD *)(v12 + 8) = v14;
    operator delete(v14);
  }
  a12 = v12;
  sub_20EDD20E4((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EDD20E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v5 = v2 - 40;
        v4 = *(void **)(v2 - 40);
        *(_QWORD *)(a1 + 16) = v2 - 40;
        if (!v4)
          break;
        *(_QWORD *)(v2 - 32) = v4;
        operator delete(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 40;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20EDD2150(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  float v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  _QWORD *v10;
  unint64_t v11;
  size_t v12;
  int8x16_t *v13;
  int8x16_t *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  int8x16_t *v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int8x16_t *v38;
  unsigned int v39;
  BOOL v40;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  _DWORD *v61;
  int64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  _OWORD *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _BYTE *v82;
  _DWORD *v83;
  int64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  _OWORD *v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int8x16_t *v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t *v101;
  int8x16_t v102;
  int8x16_t v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  int v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  unsigned int v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  _BYTE *v129;
  _DWORD *v130;
  int64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  _OWORD *v137;
  char *v138;
  uint64_t v139;
  __int128 v140;
  int v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  _BYTE *v151;
  unsigned int *v152;
  int64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  _OWORD *v158;
  char *v159;
  uint64_t v160;
  __int128 v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  int8x16_t *v165;
  int8x16_t *v166;
  int8x16_t v167;
  int8x16_t v168;
  int8x16_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int8x16_t *v177;
  int8x16_t v178;
  int8x16_t v179;
  unsigned int v180;
  int8x16_t v181;
  int8x16_t v182;
  int8x16_t *v183;
  unsigned int v184;
  uint64_t v185;
  int v186;
  int8x16_t v187;
  int8x16_t v188;
  int8x16_t v189;
  int8x16_t v190;
  unsigned int v191;
  BOOL v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _BYTE *v197;
  int v198;
  uint64_t v199;
  unint64_t v200;
  char *v201;
  uint64_t v202;
  unint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  _BYTE *v211;
  _DWORD *v212;
  uint64_t v213;
  int64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  _OWORD *v219;
  char *v220;
  uint64_t v221;
  __int128 v222;
  int v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  _BYTE *v230;
  _DWORD *v231;
  uint64_t v232;
  int64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  _OWORD *v238;
  char *v239;
  uint64_t v240;
  __int128 v241;
  int v242;
  int8x16_t *__p;
  _QWORD *v244;
  unsigned int *v245;
  uint64_t v246;
  uint64_t v247;
  unsigned int *v248;
  uint64_t v249;
  uint64_t v251;
  unsigned int v252;
  int v253;
  uint64_t v255;
  char v256;

  v2 = a2;
  v3 = a1;
  v4 = (_BYTE *)a1[1];
  v5 = *(float *)*a1;
  if (!v4[8])
  {
    v16 = (_QWORD *)a1[2];
    v17 = (uint64_t)(v16[1] - *v16) >> 6;
    v255 = 0xFFFFFFFF00000000;
    v256 = 0;
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    if (v17 <= v18)
    {
      if (v17 < v18)
        *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 12 * v17;
    }
    else
    {
      sub_20EDCFBAC((void **)a2, v17 - v18, &v255);
      v16 = (_QWORD *)v3[2];
    }
    v43 = v16[1] - *v16;
    v44 = *(_QWORD *)(v3[4] + 8) - *(_QWORD *)v3[4];
    if ((v44 & 0x3FFFFFFFC0) != 0 && (v43 & 0x3FFFFFFFC0) != 0)
    {
      v94 = 0;
      v95 = (v43 >> 6);
      v96 = (v44 >> 6);
      do
      {
        v97 = 0;
        v98 = (int8x16_t *)(*(_QWORD *)v3[4] + (v94 << 6));
        v99 = *v98;
        v100 = v98[1];
        v101 = (int8x16_t *)(*(_QWORD *)v3[2] + 32);
        v102 = v98[2];
        v103 = v98[3];
        v104 = -1;
        v105 = -1;
        LODWORD(v106) = -1;
        v107 = -1;
        do
        {
          v108 = v101[-2];
          v109 = v101[-1];
          v110 = *v101;
          v111 = v101[1];
          v101 += 4;
          v112 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v109, v100)), vcntq_s8(veorq_s8(v108, v99))), vaddq_s8(vcntq_s8(veorq_s8(v110, v102)), vcntq_s8(veorq_s8(v111, v103)))));
          if (v112 < v105)
          {
            v107 = v97;
            v105 = v112;
          }
          v113 = v112 >= v106;
          if (v112 >= v106)
          {
            v106 = v106;
          }
          else
          {
            v107 = v104;
            v105 = v106;
            v106 = v112;
          }
          if (!v113)
            v104 = v97;
          ++v97;
        }
        while (v95 != v97);
        if (v104 != -1 && v107 != -1 && (float)(v5 * (float)v105) > (float)v106)
        {
          v114 = *(_QWORD *)v2 + 12 * v104;
          if (!*(_BYTE *)(v114 + 8) || *(_DWORD *)(v114 + 4) > v106)
          {
            *(_BYTE *)(v114 + 8) = 1;
            *(_QWORD *)v114 = v94 | (v106 << 32);
          }
        }
        ++v94;
      }
      while (v94 != v96);
    }
    v247 = -1431655765 * ((*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 2);
    if (!(_DWORD)v247)
      return;
    v46 = 0;
    while (1)
    {
      v251 = *(_QWORD *)v2 + 12 * v46;
      v47 = (_BYTE *)(v251 + 8);
      if (*(_BYTE *)(v251 + 8))
        break;
LABEL_46:
      ++v46;
      v2 = a2;
      if (v46 == v247)
        return;
    }
    while (1)
    {
      *v47 = 0;
      v49 = *(_DWORD *)v251;
      v50 = v3[5];
      v52 = *(char **)(v50 + 8);
      v51 = *(_QWORD *)(v50 + 16);
      if ((unint64_t)v52 < v51)
      {
        *(_DWORD *)v52 = v49;
        v53 = (uint64_t)(v52 + 4);
        goto LABEL_73;
      }
      v54 = *(char **)v50;
      v55 = (uint64_t)&v52[-*(_QWORD *)v50];
      v56 = v55 >> 2;
      v57 = (v55 >> 2) + 1;
      if (v57 >> 62)
        goto LABEL_240;
      v58 = v51 - (_QWORD)v54;
      if (v58 >> 1 > v57)
        v57 = v58 >> 1;
      v59 = (unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v57;
      if (v59)
      {
        if (v59 >> 62)
          goto LABEL_241;
        v60 = operator new(4 * v59);
        v61 = &v60[4 * v56];
        *v61 = v49;
        v53 = (uint64_t)(v61 + 1);
        v62 = v52 - v54;
        if (v52 == v54)
        {
LABEL_65:
          v3 = a1;
          goto LABEL_71;
        }
      }
      else
      {
        v60 = 0;
        v61 = (_DWORD *)(4 * v56);
        *(_DWORD *)(4 * v56) = v49;
        v53 = 4 * v56 + 4;
        v62 = v52 - v54;
        if (v52 == v54)
          goto LABEL_65;
      }
      v63 = v62 - 4;
      if (v63 < 0x2C)
        break;
      v64 = v52 - v60 - v55;
      v3 = a1;
      if (v64 < 0x20)
        goto LABEL_70;
      v65 = (v63 >> 2) + 1;
      v66 = 4 * (v65 & 0x7FFFFFFFFFFFFFF8);
      v67 = &v52[-v66];
      v61 = (_DWORD *)((char *)v61 - v66);
      v68 = &v60[4 * v56 - 16];
      v69 = v52 - 16;
      v70 = v65 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v71 = *(_OWORD *)v69;
        *(v68 - 1) = *((_OWORD *)v69 - 1);
        *v68 = v71;
        v68 -= 2;
        v69 -= 32;
        v70 -= 8;
      }
      while (v70);
      v52 = v67;
      if (v65 != (v65 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_70;
LABEL_71:
      *(_QWORD *)v50 = v61;
      *(_QWORD *)(v50 + 8) = v53;
      *(_QWORD *)(v50 + 16) = &v60[4 * v59];
      if (v54)
        operator delete(v54);
LABEL_73:
      *(_QWORD *)(v50 + 8) = v53;
      v73 = v3[6];
      v75 = *(char **)(v73 + 8);
      v74 = *(_QWORD *)(v73 + 16);
      if ((unint64_t)v75 >= v74)
      {
        v76 = *(char **)v73;
        v77 = (uint64_t)&v75[-*(_QWORD *)v73];
        v78 = v77 >> 2;
        v79 = (v77 >> 2) + 1;
        if (v79 >> 62)
LABEL_240:
          sub_20E867F44();
        v80 = v74 - (_QWORD)v76;
        if (v80 >> 1 > v79)
          v79 = v80 >> 1;
        if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL)
          v81 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v81 = v79;
        if (v81)
        {
          if (v81 >> 62)
LABEL_241:
            sub_20E877A38();
          v82 = operator new(4 * v81);
          v83 = &v82[4 * v78];
          *v83 = v46;
          v48 = (uint64_t)(v83 + 1);
          v84 = v75 - v76;
          if (v75 == v76)
            goto LABEL_91;
LABEL_85:
          v85 = v84 - 4;
          if (v85 < 0x2C)
            goto LABEL_248;
          if ((unint64_t)(v75 - &v82[v77]) < 0x20)
            goto LABEL_248;
          v86 = (v85 >> 2) + 1;
          v87 = 4 * (v86 & 0x7FFFFFFFFFFFFFF8);
          v88 = &v75[-v87];
          v83 = (_DWORD *)((char *)v83 - v87);
          v89 = &v82[4 * v78 - 16];
          v90 = v75 - 16;
          v91 = v86 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v92 = *(_OWORD *)v90;
            *(v89 - 1) = *((_OWORD *)v90 - 1);
            *v89 = v92;
            v89 -= 2;
            v90 -= 32;
            v91 -= 8;
          }
          while (v91);
          v75 = v88;
          if (v86 != (v86 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_248:
            do
            {
              v93 = *((_DWORD *)v75 - 1);
              v75 -= 4;
              *--v83 = v93;
            }
            while (v75 != v76);
          }
        }
        else
        {
          v82 = 0;
          v83 = (_DWORD *)(4 * v78);
          *(_DWORD *)(4 * v78) = v46;
          v48 = 4 * v78 + 4;
          v84 = v75 - v76;
          if (v75 != v76)
            goto LABEL_85;
        }
LABEL_91:
        *(_QWORD *)v73 = v83;
        *(_QWORD *)(v73 + 8) = v48;
        *(_QWORD *)(v73 + 16) = &v82[4 * v81];
        if (v76)
          operator delete(v76);
        goto LABEL_50;
      }
      *(_DWORD *)v75 = v46;
      v48 = (uint64_t)(v75 + 4);
LABEL_50:
      *(_QWORD *)(v73 + 8) = v48;
      if (!*v47)
        goto LABEL_46;
    }
    v3 = a1;
    do
    {
LABEL_70:
      v72 = *((_DWORD *)v52 - 1);
      v52 -= 4;
      *--v61 = v72;
    }
    while (v52 != v54);
    goto LABEL_71;
  }
  v6 = *(_QWORD **)v4;
  v8 = **(_QWORD **)v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 8);
  v9 = v7 - v8;
  if ((unint64_t)(v7 - v8) >= 0xFA0)
  {
    v11 = (uint64_t)(*(_QWORD *)(a1[2] + 8) - *(_QWORD *)a1[2]) >> 6;
  }
  else
  {
    v10 = (_QWORD *)a1[2];
    v11 = (uint64_t)(v10[1] - *v10) >> 6;
    if (v9 >> 2 < v11 >> 2)
    {
      if (v7 == v8)
      {
        v14 = 0;
        v13 = 0;
      }
      else
      {
        v12 = v9;
        v13 = (int8x16_t *)operator new(16 * v9);
        bzero(v13, v12 * 16);
        v14 = &v13[v12];
        v15 = v6[1] - *v6;
        if ((v15 & 0x3FFFFFFFCLL) != 0)
        {
          v163 = 0;
          v164 = (v15 >> 2);
          v165 = v13;
          do
          {
            v166 = (int8x16_t *)(*v10 + ((unint64_t)*(unsigned int *)(*v6 + 4 * v163) << 6));
            v167 = *v166;
            v168 = v166[1];
            v169 = v166[3];
            v165[2] = v166[2];
            v165[3] = v169;
            *v165 = v167;
            v165[1] = v168;
            v165 += 4;
            ++v163;
          }
          while (v164 != v163);
        }
      }
      v170 = (char *)v14 - (char *)v13;
      v171 = ((char *)v14 - (char *)v13) >> 6;
      v255 = 0xFFFFFFFF00000000;
      v256 = 0;
      v172 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 2);
      if (v171 <= v172)
      {
        if (v171 < v172)
          *(_QWORD *)(v2 + 8) = *(_QWORD *)v2 + 12 * v171;
      }
      else
      {
        sub_20EDCFBAC((void **)v2, v171 - v172, &v255);
      }
      if ((v170 & 0x3FFFFFFFC0) != 0)
      {
        v173 = *(_QWORD *)(v3[4] + 8) - *(_QWORD *)v3[4];
        if ((v173 & 0x3FFFFFFFC0) != 0)
        {
          v174 = 0;
          v175 = (v173 >> 6);
          do
          {
            v176 = 0;
            v177 = (int8x16_t *)(*(_QWORD *)v3[4] + (v174 << 6));
            v178 = *v177;
            v179 = v177[1];
            v180 = -1;
            v181 = v177[2];
            v182 = v177[3];
            v183 = v13 + 2;
            v184 = -1;
            LODWORD(v185) = -1;
            v186 = -1;
            do
            {
              v187 = v183[-2];
              v188 = v183[-1];
              v189 = *v183;
              v190 = v183[1];
              v183 += 4;
              v191 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v188, v179)), vcntq_s8(veorq_s8(v187, v178))), vaddq_s8(vcntq_s8(veorq_s8(v189, v181)), vcntq_s8(veorq_s8(v190, v182)))));
              if (v191 < v184)
              {
                v186 = v176;
                v184 = v191;
              }
              v192 = v191 >= v185;
              if (v191 >= v185)
              {
                v185 = v185;
              }
              else
              {
                v186 = v180;
                v184 = v185;
                v185 = v191;
              }
              if (!v192)
                v180 = v176;
              ++v176;
            }
            while ((v170 >> 6) != v176);
            if (v180 != -1 && v186 != -1 && (float)(v5 * (float)v184) > (float)v185)
            {
              v193 = *(_QWORD *)v2 + 12 * v180;
              if (!*(_BYTE *)(v193 + 8) || *(_DWORD *)(v193 + 4) > v185)
              {
                *(_BYTE *)(v193 + 8) = 1;
                *(_QWORD *)v193 = v174 | (v185 << 32);
              }
            }
            ++v174;
          }
          while (v174 != v175);
        }
      }
      __p = v13;
      v244 = v6;
      v194 = v6[1] - *v6;
      if ((v194 & 0x3FFFFFFFCLL) != 0)
      {
        v195 = 0;
        v246 = (v194 >> 2);
        while (1)
        {
          v249 = v195;
          v196 = *(_QWORD *)v2 + 12 * v195;
          v197 = (_BYTE *)(v196 + 8);
          if (*(_BYTE *)(v196 + 8))
            break;
LABEL_189:
          v195 = v249 + 1;
          if (v249 + 1 == v246)
            goto LABEL_237;
        }
        v253 = *(_DWORD *)(*v244 + 4 * v195);
        while (1)
        {
          while (1)
          {
            *v197 = 0;
            v198 = *(_DWORD *)v196;
            v199 = v3[5];
            v201 = *(char **)(v199 + 8);
            v200 = *(_QWORD *)(v199 + 16);
            if ((unint64_t)v201 >= v200)
              break;
            *(_DWORD *)v201 = v198;
            *(_QWORD *)(v199 + 8) = v201 + 4;
            v202 = a1[6];
            v204 = *(char **)(v202 + 8);
            v203 = *(_QWORD *)(v202 + 16);
            if ((unint64_t)v204 >= v203)
              goto LABEL_216;
LABEL_192:
            *(_DWORD *)v204 = v253;
            *(_QWORD *)(v202 + 8) = v204 + 4;
            v3 = a1;
            if (!*v197)
              goto LABEL_189;
          }
          v205 = *(char **)v199;
          v206 = (uint64_t)&v201[-*(_QWORD *)v199];
          v207 = v206 >> 2;
          v208 = (v206 >> 2) + 1;
          if (v208 >> 62)
            sub_20E867F44();
          v209 = v200 - (_QWORD)v205;
          if (v209 >> 1 > v208)
            v208 = v209 >> 1;
          v210 = (unint64_t)v209 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v208;
          if (!v210)
            break;
          if (v210 >> 62)
            sub_20E877A38();
          v211 = operator new(4 * v210);
          v212 = &v211[4 * v207];
          *v212 = v198;
          v213 = (uint64_t)(v212 + 1);
          v214 = v201 - v205;
          if (v201 != v205)
            goto LABEL_207;
LABEL_213:
          *(_QWORD *)v199 = v212;
          *(_QWORD *)(v199 + 8) = v213;
          *(_QWORD *)(v199 + 16) = &v211[4 * v210];
          if (v205)
            operator delete(v205);
          v2 = a2;
          *(_QWORD *)(v199 + 8) = v213;
          v202 = a1[6];
          v204 = *(char **)(v202 + 8);
          v203 = *(_QWORD *)(v202 + 16);
          if ((unint64_t)v204 < v203)
            goto LABEL_192;
LABEL_216:
          v224 = *(char **)v202;
          v225 = (uint64_t)&v204[-*(_QWORD *)v202];
          v226 = v225 >> 2;
          v227 = (v225 >> 2) + 1;
          if (v227 >> 62)
            sub_20E867F44();
          v228 = v203 - (_QWORD)v224;
          if (v228 >> 1 > v227)
            v227 = v228 >> 1;
          if ((unint64_t)v228 >= 0x7FFFFFFFFFFFFFFCLL)
            v229 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v229 = v227;
          if (v229)
          {
            if (v229 >> 62)
              sub_20E877A38();
            v230 = operator new(4 * v229);
            v231 = &v230[4 * v226];
            *v231 = v253;
            v232 = (uint64_t)(v231 + 1);
            v233 = v204 - v224;
            if (v204 == v224)
              goto LABEL_233;
LABEL_227:
            v234 = v233 - 4;
            if (v234 < 0x2C)
              goto LABEL_249;
            if ((unint64_t)(v204 - &v230[v225]) < 0x20)
              goto LABEL_249;
            v235 = (v234 >> 2) + 1;
            v236 = 4 * (v235 & 0x7FFFFFFFFFFFFFF8);
            v237 = &v204[-v236];
            v231 = (_DWORD *)((char *)v231 - v236);
            v238 = &v230[4 * v226 - 16];
            v239 = v204 - 16;
            v240 = v235 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v241 = *(_OWORD *)v239;
              *(v238 - 1) = *((_OWORD *)v239 - 1);
              *v238 = v241;
              v238 -= 2;
              v239 -= 32;
              v240 -= 8;
            }
            while (v240);
            v204 = v237;
            if (v235 != (v235 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_249:
              do
              {
                v242 = *((_DWORD *)v204 - 1);
                v204 -= 4;
                *--v231 = v242;
              }
              while (v204 != v224);
            }
            goto LABEL_233;
          }
          v230 = 0;
          v231 = (_DWORD *)(4 * v226);
          *(_DWORD *)(4 * v226) = v253;
          v232 = 4 * v226 + 4;
          v233 = v204 - v224;
          if (v204 != v224)
            goto LABEL_227;
LABEL_233:
          *(_QWORD *)v202 = v231;
          *(_QWORD *)(v202 + 8) = v232;
          *(_QWORD *)(v202 + 16) = &v230[4 * v229];
          if (v224)
            operator delete(v224);
          v2 = a2;
          *(_QWORD *)(v202 + 8) = v232;
          v3 = a1;
          if (!*v197)
            goto LABEL_189;
        }
        v211 = 0;
        v212 = (_DWORD *)(4 * v207);
        *(_DWORD *)(4 * v207) = v198;
        v213 = 4 * v207 + 4;
        v214 = v201 - v205;
        if (v201 == v205)
          goto LABEL_213;
LABEL_207:
        v215 = v214 - 4;
        if (v215 < 0x2C)
          goto LABEL_250;
        if ((unint64_t)(v201 - v211 - v206) < 0x20)
          goto LABEL_250;
        v216 = (v215 >> 2) + 1;
        v217 = 4 * (v216 & 0x7FFFFFFFFFFFFFF8);
        v218 = &v201[-v217];
        v212 = (_DWORD *)((char *)v212 - v217);
        v219 = &v211[4 * v207 - 16];
        v220 = v201 - 16;
        v221 = v216 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v222 = *(_OWORD *)v220;
          *(v219 - 1) = *((_OWORD *)v220 - 1);
          *v219 = v222;
          v219 -= 2;
          v220 -= 32;
          v221 -= 8;
        }
        while (v221);
        v201 = v218;
        if (v216 != (v216 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_250:
          do
          {
            v223 = *((_DWORD *)v201 - 1);
            v201 -= 4;
            *--v212 = v223;
          }
          while (v201 != v205);
        }
        goto LABEL_213;
      }
LABEL_237:
      if (__p)
        operator delete(__p);
      return;
    }
  }
  v255 = 0xFFFFFFFF00000000;
  v256 = 0;
  v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  if (v11 <= v19)
  {
    if (v11 < v19)
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 12 * v11;
  }
  else
  {
    sub_20EDCFBAC((void **)a2, v11 - v19, &v255);
  }
  v20 = *(_QWORD *)(v3[4] + 8) - *(_QWORD *)v3[4];
  v21 = (unsigned int *)*v6;
  v22 = (unsigned int *)v6[1];
  if ((v20 & 0x3FFFFFFFC0) != 0)
  {
    if (v21 == v22)
      return;
    v23 = 0;
    v24 = (v20 >> 6);
    do
    {
      v25 = (unsigned int *)*v6;
      v26 = (unsigned int *)v6[1];
      if ((unsigned int *)*v6 != v26)
      {
        v27 = (int8x16_t *)(*(_QWORD *)v3[4] + (v23 << 6));
        v28 = *v27;
        v29 = v27[1];
        v30 = v27[2];
        v31 = v27[3];
        v32 = -1;
        v33 = -1;
        LODWORD(v34) = -1;
        v35 = -1;
        do
        {
          v37 = *v25++;
          v36 = v37;
          v38 = (int8x16_t *)(*(_QWORD *)v3[2] + ((unint64_t)v37 << 6));
          v39 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v38[1], v29)), vcntq_s8(veorq_s8(*v38, v28))), vaddq_s8(vcntq_s8(veorq_s8(v38[2], v30)), vcntq_s8(veorq_s8(v38[3], v31)))));
          if (v39 < v33)
          {
            v35 = v36;
            v33 = v39;
          }
          v40 = v39 >= v34;
          if (v39 >= v34)
          {
            v34 = v34;
          }
          else
          {
            v35 = v32;
            v33 = v34;
            v34 = v39;
          }
          if (!v40)
            v32 = v36;
        }
        while (v25 != v26);
        if (v32 != -1 && v35 != -1 && (float)(v5 * (float)v33) > (float)v34)
        {
          v42 = *(_QWORD *)v2 + 12 * v32;
          if (!*(_BYTE *)(v42 + 8) || *(_DWORD *)(v42 + 4) > v34)
          {
            *(_BYTE *)(v42 + 8) = 1;
            *(_QWORD *)v42 = v23 | (v34 << 32);
          }
        }
      }
      ++v23;
    }
    while (v23 != v24);
    v21 = (unsigned int *)*v6;
    v22 = (unsigned int *)v6[1];
  }
  if (v21 != v22)
  {
    v245 = v22;
    while (1)
    {
      v248 = v21;
      v252 = *v21;
      v115 = *(_QWORD *)v2 + 12 * *v21;
      v116 = (_BYTE *)(v115 + 8);
      if (*(_BYTE *)(v115 + 8))
        break;
LABEL_113:
      v21 = v248 + 1;
      v2 = a2;
      if (v248 + 1 == v245)
        return;
    }
    while (1)
    {
      *v116 = 0;
      v118 = *(_DWORD *)v115;
      v119 = v3[5];
      v121 = *(char **)(v119 + 8);
      v120 = *(_QWORD *)(v119 + 16);
      if ((unint64_t)v121 < v120)
      {
        *(_DWORD *)v121 = v118;
        v122 = (uint64_t)(v121 + 4);
        goto LABEL_140;
      }
      v123 = *(char **)v119;
      v124 = (uint64_t)&v121[-*(_QWORD *)v119];
      v125 = v124 >> 2;
      v126 = (v124 >> 2) + 1;
      if (v126 >> 62)
        goto LABEL_240;
      v127 = v120 - (_QWORD)v123;
      if (v127 >> 1 > v126)
        v126 = v127 >> 1;
      v128 = (unint64_t)v127 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v126;
      if (v128)
      {
        if (v128 >> 62)
          goto LABEL_241;
        v129 = operator new(4 * v128);
        v130 = &v129[4 * v125];
        *v130 = v118;
        v122 = (uint64_t)(v130 + 1);
        v131 = v121 - v123;
        if (v121 == v123)
        {
LABEL_132:
          v3 = a1;
          goto LABEL_138;
        }
      }
      else
      {
        v129 = 0;
        v130 = (_DWORD *)(4 * v125);
        *(_DWORD *)(4 * v125) = v118;
        v122 = 4 * v125 + 4;
        v131 = v121 - v123;
        if (v121 == v123)
          goto LABEL_132;
      }
      v132 = v131 - 4;
      if (v132 < 0x2C)
        break;
      v133 = v121 - v129 - v124;
      v3 = a1;
      if (v133 < 0x20)
        goto LABEL_137;
      v134 = (v132 >> 2) + 1;
      v135 = 4 * (v134 & 0x7FFFFFFFFFFFFFF8);
      v136 = &v121[-v135];
      v130 = (_DWORD *)((char *)v130 - v135);
      v137 = &v129[4 * v125 - 16];
      v138 = v121 - 16;
      v139 = v134 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v140 = *(_OWORD *)v138;
        *(v137 - 1) = *((_OWORD *)v138 - 1);
        *v137 = v140;
        v137 -= 2;
        v138 -= 32;
        v139 -= 8;
      }
      while (v139);
      v121 = v136;
      if (v134 != (v134 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_137;
LABEL_138:
      *(_QWORD *)v119 = v130;
      *(_QWORD *)(v119 + 8) = v122;
      *(_QWORD *)(v119 + 16) = &v129[4 * v128];
      if (v123)
        operator delete(v123);
LABEL_140:
      *(_QWORD *)(v119 + 8) = v122;
      v142 = v3[6];
      v144 = *(char **)(v142 + 8);
      v143 = *(_QWORD *)(v142 + 16);
      if ((unint64_t)v144 >= v143)
      {
        v145 = *(char **)v142;
        v146 = (uint64_t)&v144[-*(_QWORD *)v142];
        v147 = v146 >> 2;
        v148 = (v146 >> 2) + 1;
        if (v148 >> 62)
          goto LABEL_240;
        v149 = v143 - (_QWORD)v145;
        if (v149 >> 1 > v148)
          v148 = v149 >> 1;
        if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFFCLL)
          v150 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v150 = v148;
        if (v150)
        {
          if (v150 >> 62)
            goto LABEL_241;
          v151 = operator new(4 * v150);
          v152 = (unsigned int *)&v151[4 * v147];
          *v152 = v252;
          v117 = (uint64_t)(v152 + 1);
          v153 = v144 - v145;
          if (v144 == v145)
            goto LABEL_158;
LABEL_152:
          v154 = v153 - 4;
          if (v154 < 0x2C)
            goto LABEL_251;
          if ((unint64_t)(v144 - &v151[v146]) < 0x20)
            goto LABEL_251;
          v155 = (v154 >> 2) + 1;
          v156 = 4 * (v155 & 0x7FFFFFFFFFFFFFF8);
          v157 = &v144[-v156];
          v152 = (unsigned int *)((char *)v152 - v156);
          v158 = &v151[4 * v147 - 16];
          v159 = v144 - 16;
          v160 = v155 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v161 = *(_OWORD *)v159;
            *(v158 - 1) = *((_OWORD *)v159 - 1);
            *v158 = v161;
            v158 -= 2;
            v159 -= 32;
            v160 -= 8;
          }
          while (v160);
          v144 = v157;
          if (v155 != (v155 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_251:
            do
            {
              v162 = *((_DWORD *)v144 - 1);
              v144 -= 4;
              *--v152 = v162;
            }
            while (v144 != v145);
          }
        }
        else
        {
          v151 = 0;
          v152 = (unsigned int *)(4 * v147);
          *(_DWORD *)(4 * v147) = v252;
          v117 = 4 * v147 + 4;
          v153 = v144 - v145;
          if (v144 != v145)
            goto LABEL_152;
        }
LABEL_158:
        *(_QWORD *)v142 = v152;
        *(_QWORD *)(v142 + 8) = v117;
        *(_QWORD *)(v142 + 16) = &v151[4 * v150];
        if (v145)
          operator delete(v145);
        goto LABEL_117;
      }
      *(_DWORD *)v144 = v252;
      v117 = (uint64_t)(v144 + 4);
LABEL_117:
      *(_QWORD *)(v142 + 8) = v117;
      if (!*v116)
        goto LABEL_113;
    }
    v3 = a1;
    do
    {
LABEL_137:
      v141 = *((_DWORD *)v121 - 1);
      v121 -= 4;
      *--v130 = v141;
    }
    while (v121 != v123);
    goto LABEL_138;
  }
}

void sub_20EDD3020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (v10)
    operator delete(v10);
  _Unwind_Resume(exception_object);
}

void sub_20EDD3050(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  float v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  unint64_t v10;
  size_t v11;
  int8x16_t *v12;
  int8x16_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  int8x16_t *v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int8x16_t *v49;
  unsigned int v50;
  BOOL v51;
  uint64_t v52;
  _QWORD *v53;
  _DWORD *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  _BYTE *v89;
  _DWORD *v90;
  uint64_t v91;
  int64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  _OWORD *v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  int v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  _DWORD *v109;
  uint64_t v110;
  int64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  _OWORD *v117;
  char *v118;
  uint64_t v119;
  __int128 v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v125;
  _QWORD *v126;
  _DWORD *v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  _BYTE *v156;
  _DWORD *v157;
  int64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  _OWORD *v164;
  char *v165;
  uint64_t v166;
  __int128 v167;
  int v168;
  uint64_t v169;
  unint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  _BYTE *v178;
  _DWORD *v179;
  uint64_t v180;
  int64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  _OWORD *v187;
  char *v188;
  uint64_t v189;
  __int128 v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int8x16_t *v196;
  int8x16_t v197;
  int8x16_t v198;
  int8x16_t *v199;
  int8x16_t v200;
  int8x16_t v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  int v205;
  int8x16_t v206;
  int8x16_t v207;
  int8x16_t v208;
  int8x16_t v209;
  unsigned int v210;
  uint64_t v211;
  uint64_t v212;
  int8x16_t *v213;
  int8x16_t *v214;
  int8x16_t v215;
  int8x16_t v216;
  int8x16_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  void *v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int8x16_t *v232;
  int8x16_t v233;
  int8x16_t v234;
  unsigned int v235;
  int8x16_t v236;
  int8x16_t v237;
  int8x16_t *v238;
  unsigned int v239;
  unsigned int v240;
  int v241;
  int8x16_t v242;
  int8x16_t v243;
  int8x16_t v244;
  int8x16_t v245;
  unsigned int v246;
  unint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  _DWORD *v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int64_t v258;
  _QWORD *v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int v263;
  unsigned int v264;
  _QWORD *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  unint64_t v271;
  char *v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  _BYTE *v280;
  _DWORD *v281;
  int64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  _OWORD *v287;
  char *v288;
  uint64_t v289;
  __int128 v290;
  int v291;
  uint64_t v292;
  unint64_t v293;
  char *v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  unint64_t v300;
  _BYTE *v301;
  _DWORD *v302;
  int64_t v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  char *v307;
  _OWORD *v308;
  char *v309;
  uint64_t v310;
  __int128 v311;
  int v312;
  int8x16_t *v313;
  _QWORD *v314;
  unsigned int *v315;
  uint64_t v316;
  unsigned int *v317;
  uint64_t v318;
  uint64_t v319;
  int v322;
  void *__p;
  void *v324;
  uint64_t v325;
  uint64_t v326;

  v2 = a1;
  v3 = *(_BYTE **)(a1 + 8);
  v4 = **(float **)a1;
  if (!v3[8])
  {
    v15 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - **(_QWORD **)(a1 + 16)) >> 6;
    v16 = **(_QWORD **)(a1 + 24);
    __p = 0;
    v324 = 0;
    v325 = 0;
    v326 = v16;
    v17 = *(_QWORD *)(a2 + 8);
    v18 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - *(_QWORD *)a2) >> 3);
    if (v15 <= v18)
    {
      if (v15 < v18)
      {
        v27 = *(_QWORD *)a2 + 40 * v15;
        if (v17 != v27)
        {
          v28 = *(_QWORD *)(a2 + 8);
          do
          {
            v30 = *(void **)(v28 - 40);
            v28 -= 40;
            v29 = v30;
            if (v30)
            {
              *(_QWORD *)(v17 - 32) = v29;
              operator delete(v29);
            }
            v17 = v28;
          }
          while (v28 != v27);
        }
        v2 = a1;
        *(_QWORD *)(a2 + 8) = v27;
      }
    }
    else
    {
      sub_20EDD1DC0((char **)a2, v15 - v18, (uint64_t)&__p);
      if (__p)
      {
        v324 = __p;
        operator delete(__p);
      }
    }
    v122 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8) - **(_QWORD **)(v2 + 16);
    v123 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) - **(_QWORD **)(v2 + 32);
    if ((v123 & 0x3FFFFFFFC0) != 0 && (v122 & 0x3FFFFFFFC0) != 0)
    {
      v192 = 0;
      v193 = (v122 >> 6);
      v194 = (v123 >> 6);
      do
      {
        v195 = 0;
        v196 = (int8x16_t *)(**(_QWORD **)(v2 + 32) + (v192 << 6));
        v197 = *v196;
        v198 = v196[1];
        v199 = (int8x16_t *)(**(_QWORD **)(v2 + 16) + 32);
        v200 = v196[2];
        v201 = v196[3];
        v202 = -1;
        v203 = -1;
        v204 = -1;
        v205 = -1;
        do
        {
          v206 = v199[-2];
          v207 = v199[-1];
          v208 = *v199;
          v209 = v199[1];
          v199 += 4;
          v210 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v207, v198)), vcntq_s8(veorq_s8(v206, v197))), vaddq_s8(vcntq_s8(veorq_s8(v208, v200)), vcntq_s8(veorq_s8(v209, v201)))));
          if (v210 < v203)
          {
            v205 = v195;
            v203 = v210;
          }
          if (v210 < v204)
          {
            v205 = v202;
            v203 = v204;
            v204 = v210;
            v202 = v195;
          }
          ++v195;
        }
        while (v193 != v195);
        if (v202 != -1 && v205 != -1 && (float)(v4 * (float)v203) > (float)v204)
          sub_20EDD1370(*(_QWORD *)a2 + 40 * v202, v204, v192);
        ++v192;
      }
      while (v192 != v194);
    }
    v318 = -858993459 * ((*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    if (!(_DWORD)v318)
      return;
    v125 = 0;
    while (1)
    {
      v126 = (_QWORD *)(*(_QWORD *)a2 + 40 * v125);
      v127 = (_DWORD *)*v126;
      v128 = v126[1];
      if (*v126 != v128)
        break;
LABEL_118:
      if (++v125 == v318)
        return;
    }
    while (1)
    {
      v129 = *v127;
      v130 = v128 - (_QWORD)v127;
      if (v128 - (uint64_t)v127 < 9)
        goto LABEL_136;
      v131 = 0;
      v132 = v130 >> 3;
      v133 = *(_QWORD *)v127;
      v134 = (unint64_t)((v130 >> 3) - 2) >> 1;
      v135 = v127;
      do
      {
        v136 = &v135[v131 + 1];
        v137 = (2 * v131) | 1;
        v138 = 2 * v131 + 2;
        if (v138 < v132)
        {
          v139 = *((_DWORD *)v136 + 1);
          v140 = *((_DWORD *)v136 + 3);
          v136 += v139 < v140;
          if (v139 < v140)
            v137 = v138;
        }
        *v135 = *v136;
        v135 = v136;
        v131 = v137;
      }
      while (v137 <= v134);
      v141 = (_QWORD *)(v128 - 8);
      if (v136 == v141)
        goto LABEL_135;
      *v136 = *v141;
      *v141 = v133;
      v142 = (char *)v136 - (char *)v127 + 8;
      if (v142 >= 9)
      {
        v143 = (((unint64_t)v142 >> 3) - 2) >> 1;
        if (v127[2 * v143 + 1] < *((_DWORD *)v136 + 1))
          break;
      }
LABEL_136:
      v126[1] -= 8;
      v146 = *(_QWORD *)(v2 + 40);
      v148 = *(char **)(v146 + 8);
      v147 = *(_QWORD *)(v146 + 16);
      if ((unint64_t)v148 >= v147)
      {
        v150 = *(char **)v146;
        v151 = (uint64_t)&v148[-*(_QWORD *)v146];
        v152 = v151 >> 2;
        v153 = (v151 >> 2) + 1;
        if (v153 >> 62)
          goto LABEL_284;
        v154 = v147 - (_QWORD)v150;
        if (v154 >> 1 > v153)
          v153 = v154 >> 1;
        if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL)
          v155 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v155 = v153;
        if (v155)
        {
          if (v155 >> 62)
            goto LABEL_285;
          v156 = operator new(4 * v155);
          v157 = &v156[4 * v152];
          *v157 = v129;
          v149 = (uint64_t)(v157 + 1);
          v158 = v148 - v150;
          if (v148 != v150)
          {
LABEL_147:
            v159 = v158 - 4;
            if (v159 < 0x2C)
            {
              v2 = a1;
              goto LABEL_155;
            }
            v160 = v148 - v156 - v151;
            v2 = a1;
            if (v160 < 0x20)
              goto LABEL_292;
            v161 = (v159 >> 2) + 1;
            v162 = 4 * (v161 & 0x7FFFFFFFFFFFFFF8);
            v163 = &v148[-v162];
            v157 = (_DWORD *)((char *)v157 - v162);
            v164 = &v156[4 * v152 - 16];
            v165 = v148 - 16;
            v166 = v161 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v167 = *(_OWORD *)v165;
              *(v164 - 1) = *((_OWORD *)v165 - 1);
              *v164 = v167;
              v164 -= 2;
              v165 -= 32;
              v166 -= 8;
            }
            while (v166);
            v148 = v163;
            if (v161 != (v161 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_292:
              do
              {
LABEL_155:
                v168 = *((_DWORD *)v148 - 1);
                v148 -= 4;
                *--v157 = v168;
              }
              while (v148 != v150);
            }
LABEL_156:
            *(_QWORD *)v146 = v157;
            *(_QWORD *)(v146 + 8) = v149;
            *(_QWORD *)(v146 + 16) = &v156[4 * v155];
            if (v150)
              operator delete(v150);
            goto LABEL_158;
          }
        }
        else
        {
          v156 = 0;
          v157 = (_DWORD *)(4 * v152);
          *(_DWORD *)(4 * v152) = v129;
          v149 = 4 * v152 + 4;
          v158 = v148 - v150;
          if (v148 != v150)
            goto LABEL_147;
        }
        v2 = a1;
        goto LABEL_156;
      }
      *(_DWORD *)v148 = v129;
      v149 = (uint64_t)(v148 + 4);
LABEL_158:
      *(_QWORD *)(v146 + 8) = v149;
      v169 = *(_QWORD *)(v2 + 48);
      v171 = *(char **)(v169 + 8);
      v170 = *(_QWORD *)(v169 + 16);
      if ((unint64_t)v171 < v170)
      {
        *(_DWORD *)v171 = v125;
        *(_QWORD *)(v169 + 8) = v171 + 4;
        v127 = (_DWORD *)*v126;
        v128 = v126[1];
        if (*v126 == v128)
          goto LABEL_118;
      }
      else
      {
        v172 = *(char **)v169;
        v173 = (uint64_t)&v171[-*(_QWORD *)v169];
        v174 = v173 >> 2;
        v175 = (v173 >> 2) + 1;
        if (v175 >> 62)
LABEL_284:
          sub_20E867F44();
        v176 = v170 - (_QWORD)v172;
        if (v176 >> 1 > v175)
          v175 = v176 >> 1;
        if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFFCLL)
          v177 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v177 = v175;
        if (v177)
        {
          if (v177 >> 62)
LABEL_285:
            sub_20E877A38();
          v178 = operator new(4 * v177);
          v179 = &v178[4 * v174];
          *v179 = v125;
          v180 = (uint64_t)(v179 + 1);
          v181 = v171 - v172;
          if (v171 == v172)
          {
LABEL_171:
            v2 = a1;
            goto LABEL_177;
          }
        }
        else
        {
          v178 = 0;
          v179 = (_DWORD *)(4 * v174);
          *(_DWORD *)(4 * v174) = v125;
          v180 = 4 * v174 + 4;
          v181 = v171 - v172;
          if (v171 == v172)
            goto LABEL_171;
        }
        v182 = v181 - 4;
        if (v182 >= 0x2C)
        {
          v183 = v171 - &v178[v173];
          v2 = a1;
          if (v183 >= 0x20)
          {
            v184 = (v182 >> 2) + 1;
            v185 = 4 * (v184 & 0x7FFFFFFFFFFFFFF8);
            v186 = &v171[-v185];
            v179 = (_DWORD *)((char *)v179 - v185);
            v187 = &v178[4 * v174 - 16];
            v188 = v171 - 16;
            v189 = v184 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v190 = *(_OWORD *)v188;
              *(v187 - 1) = *((_OWORD *)v188 - 1);
              *v187 = v190;
              v187 -= 2;
              v188 -= 32;
              v189 -= 8;
            }
            while (v189);
            v171 = v186;
            if (v184 == (v184 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_177;
          }
        }
        else
        {
          v2 = a1;
        }
        do
        {
          v191 = *((_DWORD *)v171 - 1);
          v171 -= 4;
          *--v179 = v191;
        }
        while (v171 != v172);
LABEL_177:
        *(_QWORD *)v169 = v179;
        *(_QWORD *)(v169 + 8) = v180;
        *(_QWORD *)(v169 + 16) = &v178[4 * v177];
        if (v172)
          operator delete(v172);
        *(_QWORD *)(v169 + 8) = v180;
        v127 = (_DWORD *)*v126;
        v128 = v126[1];
        if (*v126 == v128)
          goto LABEL_118;
      }
    }
    v133 = *v136;
    v144 = HIDWORD(*v136);
    do
    {
      v145 = v136;
      v136 = &v127[2 * v143];
      *v145 = *v136;
      if (!v143)
        break;
      v143 = (v143 - 1) >> 1;
    }
    while (v127[2 * v143 + 1] < v144);
LABEL_135:
    *v136 = v133;
    goto LABEL_136;
  }
  v5 = *(_QWORD **)v3;
  v7 = **(_QWORD **)v3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 8);
  v8 = v6 - v7;
  if ((unint64_t)(v6 - v7) >= 0xFA0)
  {
    v10 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - **(_QWORD **)(a1 + 16)) >> 6;
  }
  else
  {
    v9 = *(_QWORD **)(a1 + 16);
    v10 = (uint64_t)(v9[1] - *v9) >> 6;
    if (v8 >> 2 < v10 >> 2)
    {
      if (v6 == v7)
      {
        v12 = 0;
        v13 = 0;
      }
      else
      {
        v11 = v8;
        v12 = (int8x16_t *)operator new(16 * v8);
        bzero(v12, v11 * 16);
        v13 = &v12[v11];
        v14 = v5[1] - *v5;
        if ((v14 & 0x3FFFFFFFCLL) != 0)
        {
          v211 = 0;
          v212 = (v14 >> 2);
          v213 = v12;
          do
          {
            v214 = (int8x16_t *)(*v9 + ((unint64_t)*(unsigned int *)(*v5 + 4 * v211) << 6));
            v215 = *v214;
            v216 = v214[1];
            v217 = v214[3];
            v213[2] = v214[2];
            v213[3] = v217;
            *v213 = v215;
            v213[1] = v216;
            v213 += 4;
            ++v211;
          }
          while (v212 != v211);
        }
      }
      v218 = (char *)v13 - (char *)v12;
      v219 = ((char *)v13 - (char *)v12) >> 6;
      v220 = **(_QWORD **)(v2 + 24);
      __p = 0;
      v324 = 0;
      v325 = 0;
      v326 = v220;
      v221 = *(_QWORD *)(a2 + 8);
      v222 = 0xCCCCCCCCCCCCCCCDLL * ((v221 - *(_QWORD *)a2) >> 3);
      if (v219 <= v222)
      {
        if (v219 < v222)
        {
          v223 = *(_QWORD *)a2 + 40 * v219;
          if (v221 != v223)
          {
            v224 = *(_QWORD *)(a2 + 8);
            do
            {
              v226 = *(void **)(v224 - 40);
              v224 -= 40;
              v225 = v226;
              if (v226)
              {
                *(_QWORD *)(v221 - 32) = v225;
                operator delete(v225);
              }
              v221 = v224;
            }
            while (v224 != v223);
          }
          *(_QWORD *)(a2 + 8) = v223;
          v2 = a1;
        }
      }
      else
      {
        sub_20EDD1DC0((char **)a2, v219 - v222, (uint64_t)&__p);
        if (__p)
        {
          v324 = __p;
          operator delete(__p);
        }
      }
      if ((v218 & 0x3FFFFFFFC0) != 0)
      {
        v227 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) - **(_QWORD **)(v2 + 32);
        if ((v227 & 0x3FFFFFFFC0) != 0)
        {
          v228 = 0;
          v229 = (v218 >> 6);
          v230 = (v227 >> 6);
          do
          {
            v231 = 0;
            v232 = (int8x16_t *)(**(_QWORD **)(v2 + 32) + (v228 << 6));
            v233 = *v232;
            v234 = v232[1];
            v235 = -1;
            v236 = v232[2];
            v237 = v232[3];
            v238 = v12 + 2;
            v239 = -1;
            v240 = -1;
            v241 = -1;
            do
            {
              v242 = v238[-2];
              v243 = v238[-1];
              v244 = *v238;
              v245 = v238[1];
              v238 += 4;
              v246 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v243, v234)), vcntq_s8(veorq_s8(v242, v233))), vaddq_s8(vcntq_s8(veorq_s8(v244, v236)), vcntq_s8(veorq_s8(v245, v237)))));
              if (v246 < v239)
              {
                v241 = v231;
                v239 = v246;
              }
              if (v246 < v240)
              {
                v241 = v235;
                v239 = v240;
                v240 = v246;
                v235 = v231;
              }
              ++v231;
            }
            while (v229 != v231);
            if (v235 != -1 && v241 != -1 && (float)(v4 * (float)v239) > (float)v240)
              sub_20EDD1370(*(_QWORD *)a2 + 40 * v235, v240, v228);
            ++v228;
          }
          while (v228 != v230);
        }
      }
      v313 = v12;
      v314 = v5;
      v247 = v5[1] - *v5;
      if ((v247 & 0x3FFFFFFFCLL) != 0)
      {
        v248 = 0;
        v316 = (v247 >> 2);
        while (1)
        {
          v319 = v248;
          v249 = (_QWORD *)(*(_QWORD *)a2 + 40 * v248);
          v250 = (_DWORD *)*v249;
          v251 = v249[1];
          if (*v249 != v251)
            break;
LABEL_221:
          v248 = v319 + 1;
          if (v319 + 1 == v316)
            goto LABEL_281;
        }
        v322 = *(_DWORD *)(*v314 + 4 * v248);
        while (1)
        {
          v253 = *v250;
          v254 = v251 - (_QWORD)v250;
          if (v251 - (uint64_t)v250 < 9)
            goto LABEL_240;
          v255 = 0;
          v256 = v254 >> 3;
          v257 = *(_QWORD *)v250;
          v258 = (unint64_t)((v254 >> 3) - 2) >> 1;
          v259 = v250;
          do
          {
            v260 = &v259[v255 + 1];
            v261 = (2 * v255) | 1;
            v262 = 2 * v255 + 2;
            if (v262 < v256)
            {
              v263 = *((_DWORD *)v260 + 1);
              v264 = *((_DWORD *)v260 + 3);
              v260 += v263 < v264;
              if (v263 < v264)
                v261 = v262;
            }
            *v259 = *v260;
            v259 = v260;
            v255 = v261;
          }
          while (v261 <= v258);
          v265 = (_QWORD *)(v251 - 8);
          if (v260 == v265)
            goto LABEL_239;
          *v260 = *v265;
          *v265 = v257;
          v266 = (char *)v260 - (char *)v250 + 8;
          if (v266 >= 9)
          {
            v267 = (((unint64_t)v266 >> 3) - 2) >> 1;
            if (v250[2 * v267 + 1] < *((_DWORD *)v260 + 1))
              break;
          }
LABEL_240:
          v249[1] -= 8;
          v270 = *(_QWORD *)(v2 + 40);
          v272 = *(char **)(v270 + 8);
          v271 = *(_QWORD *)(v270 + 16);
          if ((unint64_t)v272 < v271)
          {
            *(_DWORD *)v272 = v253;
            v273 = (uint64_t)(v272 + 4);
            goto LABEL_261;
          }
          v274 = *(char **)v270;
          v275 = (uint64_t)&v272[-*(_QWORD *)v270];
          v276 = v275 >> 2;
          v277 = (v275 >> 2) + 1;
          if (v277 >> 62)
            sub_20E867F44();
          v278 = v271 - (_QWORD)v274;
          if (v278 >> 1 > v277)
            v277 = v278 >> 1;
          if ((unint64_t)v278 >= 0x7FFFFFFFFFFFFFFCLL)
            v279 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v279 = v277;
          if (v279)
          {
            if (v279 >> 62)
              sub_20E877A38();
            v280 = operator new(4 * v279);
            v281 = &v280[4 * v276];
            *v281 = v253;
            v273 = (uint64_t)(v281 + 1);
            v282 = v272 - v274;
            if (v272 == v274)
              goto LABEL_259;
LABEL_253:
            v283 = v282 - 4;
            if (v283 < 0x2C)
              goto LABEL_293;
            if ((unint64_t)(v272 - v280 - v275) < 0x20)
              goto LABEL_293;
            v284 = (v283 >> 2) + 1;
            v285 = 4 * (v284 & 0x7FFFFFFFFFFFFFF8);
            v286 = &v272[-v285];
            v281 = (_DWORD *)((char *)v281 - v285);
            v287 = &v280[4 * v276 - 16];
            v288 = v272 - 16;
            v289 = v284 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v290 = *(_OWORD *)v288;
              *(v287 - 1) = *((_OWORD *)v288 - 1);
              *v287 = v290;
              v287 -= 2;
              v288 -= 32;
              v289 -= 8;
            }
            while (v289);
            v272 = v286;
            if (v284 != (v284 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_293:
              do
              {
                v291 = *((_DWORD *)v272 - 1);
                v272 -= 4;
                *--v281 = v291;
              }
              while (v272 != v274);
            }
            goto LABEL_259;
          }
          v280 = 0;
          v281 = (_DWORD *)(4 * v276);
          *(_DWORD *)(4 * v276) = v253;
          v273 = 4 * v276 + 4;
          v282 = v272 - v274;
          if (v272 != v274)
            goto LABEL_253;
LABEL_259:
          *(_QWORD *)v270 = v281;
          *(_QWORD *)(v270 + 8) = v273;
          *(_QWORD *)(v270 + 16) = &v280[4 * v279];
          if (v274)
            operator delete(v274);
LABEL_261:
          *(_QWORD *)(v270 + 8) = v273;
          v292 = *(_QWORD *)(v2 + 48);
          v294 = *(char **)(v292 + 8);
          v293 = *(_QWORD *)(v292 + 16);
          if ((unint64_t)v294 >= v293)
          {
            v295 = *(char **)v292;
            v296 = (uint64_t)&v294[-*(_QWORD *)v292];
            v297 = v296 >> 2;
            v298 = (v296 >> 2) + 1;
            if (v298 >> 62)
              sub_20E867F44();
            v299 = v293 - (_QWORD)v295;
            if (v299 >> 1 > v298)
              v298 = v299 >> 1;
            if ((unint64_t)v299 >= 0x7FFFFFFFFFFFFFFCLL)
              v300 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v300 = v298;
            if (v300)
            {
              if (v300 >> 62)
                sub_20E877A38();
              v301 = operator new(4 * v300);
              v302 = &v301[4 * v297];
              *v302 = v322;
              v252 = (uint64_t)(v302 + 1);
              v303 = v294 - v295;
              if (v294 == v295)
                goto LABEL_279;
LABEL_273:
              v304 = v303 - 4;
              if (v304 < 0x2C)
                goto LABEL_294;
              if ((unint64_t)(v294 - &v301[v296]) < 0x20)
                goto LABEL_294;
              v305 = (v304 >> 2) + 1;
              v306 = 4 * (v305 & 0x7FFFFFFFFFFFFFF8);
              v307 = &v294[-v306];
              v302 = (_DWORD *)((char *)v302 - v306);
              v308 = &v301[4 * v297 - 16];
              v309 = v294 - 16;
              v310 = v305 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v311 = *(_OWORD *)v309;
                *(v308 - 1) = *((_OWORD *)v309 - 1);
                *v308 = v311;
                v308 -= 2;
                v309 -= 32;
                v310 -= 8;
              }
              while (v310);
              v294 = v307;
              if (v305 != (v305 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_294:
                do
                {
                  v312 = *((_DWORD *)v294 - 1);
                  v294 -= 4;
                  *--v302 = v312;
                }
                while (v294 != v295);
              }
            }
            else
            {
              v301 = 0;
              v302 = (_DWORD *)(4 * v297);
              *(_DWORD *)(4 * v297) = v322;
              v252 = 4 * v297 + 4;
              v303 = v294 - v295;
              if (v294 != v295)
                goto LABEL_273;
            }
LABEL_279:
            *(_QWORD *)v292 = v302;
            *(_QWORD *)(v292 + 8) = v252;
            *(_QWORD *)(v292 + 16) = &v301[4 * v300];
            if (v295)
              operator delete(v295);
            goto LABEL_225;
          }
          *(_DWORD *)v294 = v322;
          v252 = (uint64_t)(v294 + 4);
LABEL_225:
          *(_QWORD *)(v292 + 8) = v252;
          v250 = (_DWORD *)*v249;
          v251 = v249[1];
          if (*v249 == v251)
            goto LABEL_221;
        }
        v257 = *v260;
        v268 = HIDWORD(*v260);
        do
        {
          v269 = v260;
          v260 = &v250[2 * v267];
          *v269 = *v260;
          if (!v267)
            break;
          v267 = (v267 - 1) >> 1;
        }
        while (v250[2 * v267 + 1] < v268);
LABEL_239:
        *v260 = v257;
        goto LABEL_240;
      }
LABEL_281:
      if (v313)
        operator delete(v313);
      return;
    }
  }
  v19 = **(_QWORD **)(a1 + 24);
  __p = 0;
  v324 = 0;
  v325 = 0;
  v326 = v19;
  v20 = *(_QWORD *)(a2 + 8);
  v21 = 0xCCCCCCCCCCCCCCCDLL * ((v20 - *(_QWORD *)a2) >> 3);
  if (v10 <= v21)
  {
    if (v10 < v21)
    {
      v22 = *(_QWORD *)a2 + 40 * v10;
      v23 = a2;
      if (v20 != v22)
      {
        v24 = *(_QWORD *)(a2 + 8);
        do
        {
          v26 = *(void **)(v24 - 40);
          v24 -= 40;
          v25 = v26;
          if (v26)
          {
            *(_QWORD *)(v20 - 32) = v25;
            operator delete(v25);
            v23 = a2;
          }
          v20 = v24;
        }
        while (v24 != v22);
      }
      *(_QWORD *)(v23 + 8) = v22;
      v2 = a1;
    }
  }
  else
  {
    sub_20EDD1DC0((char **)a2, v10 - v21, (uint64_t)&__p);
    if (__p)
    {
      v324 = __p;
      operator delete(__p);
    }
  }
  v31 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) - **(_QWORD **)(v2 + 32);
  v32 = (unsigned int *)*v5;
  v33 = (unsigned int *)v5[1];
  if ((v31 & 0x3FFFFFFFC0) != 0)
  {
    if (v32 == v33)
      return;
    v34 = 0;
    v35 = (v31 >> 6);
    do
    {
      v36 = (unsigned int *)*v5;
      v37 = (unsigned int *)v5[1];
      if ((unsigned int *)*v5 != v37)
      {
        v38 = (int8x16_t *)(**(_QWORD **)(v2 + 32) + (v34 << 6));
        v39 = *v38;
        v40 = v38[1];
        v41 = v38[2];
        v42 = v38[3];
        v43 = -1;
        v44 = -1;
        v45 = -1;
        v46 = -1;
        do
        {
          v48 = *v36++;
          v47 = v48;
          v49 = (int8x16_t *)(**(_QWORD **)(v2 + 16) + ((unint64_t)v48 << 6));
          v50 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v49[1], v40)), vcntq_s8(veorq_s8(*v49, v39))), vaddq_s8(vcntq_s8(veorq_s8(v49[2], v41)), vcntq_s8(veorq_s8(v49[3], v42)))));
          if (v50 < v44)
          {
            v46 = v47;
            v44 = v50;
          }
          if (v50 < v45)
          {
            v46 = v43;
            v44 = v45;
            v45 = v50;
            v43 = v47;
          }
        }
        while (v36 != v37);
        v51 = v43 == -1 || v46 == -1;
        if (!v51 && (float)(v4 * (float)v44) > (float)v45)
          sub_20EDD1370(*(_QWORD *)a2 + 40 * v43, v45, v34);
      }
      ++v34;
    }
    while (v34 != v35);
    v32 = (unsigned int *)*v5;
    v33 = (unsigned int *)v5[1];
  }
  if (v32 != v33)
  {
    v315 = v33;
    while (1)
    {
      v317 = v32;
      v52 = *v32;
      v53 = (_QWORD *)(*(_QWORD *)a2 + 40 * v52);
      v54 = (_DWORD *)*v53;
      v55 = v53[1];
      if (*v53 != v55)
        break;
LABEL_47:
      v32 = v317 + 1;
      if (v317 + 1 == v315)
        return;
    }
    while (1)
    {
      v56 = *v54;
      v57 = v55 - (_QWORD)v54;
      if (v55 - (uint64_t)v54 >= 9)
      {
        v58 = 0;
        v59 = v57 >> 3;
        v60 = *(_QWORD *)v54;
        v61 = (unint64_t)((v57 >> 3) - 2) >> 1;
        v62 = v54;
        do
        {
          v63 = &v62[v58 + 1];
          v64 = (2 * v58) | 1;
          v65 = 2 * v58 + 2;
          if (v65 < v59)
          {
            v66 = *((_DWORD *)v63 + 1);
            v67 = *((_DWORD *)v63 + 3);
            v63 += v66 < v67;
            if (v66 < v67)
              v64 = v65;
          }
          *v62 = *v63;
          v62 = v63;
          v58 = v64;
        }
        while (v64 <= v61);
        v68 = (_QWORD *)(v55 - 8);
        if (v63 != v68)
        {
          *v63 = *v68;
          *v68 = v60;
          v69 = (char *)v63 - (char *)v54 + 8;
          if (v69 < 9)
            goto LABEL_65;
          v70 = (((unint64_t)v69 >> 3) - 2) >> 1;
          if (v54[2 * v70 + 1] >= *((_DWORD *)v63 + 1))
            goto LABEL_65;
          v60 = *v63;
          v71 = HIDWORD(*v63);
          do
          {
            v72 = v63;
            v63 = &v54[2 * v70];
            *v72 = *v63;
            if (!v70)
              break;
            v70 = (v70 - 1) >> 1;
          }
          while (v54[2 * v70 + 1] < v71);
        }
        *v63 = v60;
      }
LABEL_65:
      v53[1] -= 8;
      v73 = *(_QWORD *)(v2 + 40);
      v75 = *(char **)(v73 + 8);
      v74 = *(_QWORD *)(v73 + 16);
      if ((unint64_t)v75 >= v74)
      {
        v79 = v53;
        v80 = v2;
        v81 = v52;
        v82 = *(char **)v73;
        v83 = (uint64_t)&v75[-*(_QWORD *)v73];
        v84 = v83 >> 2;
        v85 = (v83 >> 2) + 1;
        if (v85 >> 62)
          goto LABEL_284;
        v86 = v74 - (_QWORD)v82;
        if (v86 >> 1 > v85)
          v85 = v86 >> 1;
        if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
          v87 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v87 = v85;
        if (!v87)
        {
          v89 = 0;
          v90 = (_DWORD *)(4 * v84);
          *(_DWORD *)(4 * v84) = v56;
          v91 = 4 * v84 + 4;
          v92 = v75 - v82;
          if (v75 == v82)
            goto LABEL_85;
LABEL_79:
          v93 = v92 - 4;
          if (v93 < 0x2C)
            goto LABEL_295;
          if ((unint64_t)(v75 - v89 - v83) < 0x20)
            goto LABEL_295;
          v94 = (v93 >> 2) + 1;
          v95 = 4 * (v94 & 0x7FFFFFFFFFFFFFF8);
          v96 = &v75[-v95];
          v90 = (_DWORD *)((char *)v90 - v95);
          v97 = &v89[4 * v84 - 16];
          v98 = v75 - 16;
          v99 = v94 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v100 = *(_OWORD *)v98;
            *(v97 - 1) = *((_OWORD *)v98 - 1);
            *v97 = v100;
            v97 -= 2;
            v98 -= 32;
            v99 -= 8;
          }
          while (v99);
          v75 = v96;
          if (v94 != (v94 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_295:
            do
            {
              v101 = *((_DWORD *)v75 - 1);
              v75 -= 4;
              *--v90 = v101;
            }
            while (v75 != v82);
          }
          goto LABEL_85;
        }
        if (v87 >> 62)
          goto LABEL_285;
        v88 = v56;
        v89 = operator new(4 * v87);
        v90 = &v89[4 * v84];
        *v90 = v88;
        v91 = (uint64_t)(v90 + 1);
        v92 = v75 - v82;
        if (v75 != v82)
          goto LABEL_79;
LABEL_85:
        *(_QWORD *)v73 = v90;
        *(_QWORD *)(v73 + 8) = v91;
        *(_QWORD *)(v73 + 16) = &v89[4 * v87];
        if (v82)
          operator delete(v82);
        v52 = v81;
        v2 = v80;
        v53 = v79;
        *(_QWORD *)(v73 + 8) = v91;
        v76 = *(_QWORD *)(v2 + 48);
        v78 = *(char **)(v76 + 8);
        v77 = *(_QWORD *)(v76 + 16);
        if ((unint64_t)v78 < v77)
          goto LABEL_50;
LABEL_88:
        v102 = *(char **)v76;
        v103 = (uint64_t)&v78[-*(_QWORD *)v76];
        v104 = v103 >> 2;
        v105 = (v103 >> 2) + 1;
        if (v105 >> 62)
          goto LABEL_284;
        v106 = v77 - (_QWORD)v102;
        if (v106 >> 1 > v105)
          v105 = v106 >> 1;
        if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL)
          v107 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v107 = v105;
        if (v107)
        {
          if (v107 >> 62)
            goto LABEL_285;
          v108 = operator new(4 * v107);
          v109 = &v108[4 * v104];
          *v109 = v52;
          v110 = (uint64_t)(v109 + 1);
          v111 = v78 - v102;
          if (v78 == v102)
          {
LABEL_100:
            v2 = a1;
            goto LABEL_106;
          }
        }
        else
        {
          v108 = 0;
          v109 = (_DWORD *)(4 * v104);
          *(_DWORD *)(4 * v104) = v52;
          v110 = 4 * v104 + 4;
          v111 = v78 - v102;
          if (v78 == v102)
            goto LABEL_100;
        }
        v112 = v111 - 4;
        if (v112 >= 0x2C)
        {
          v113 = v78 - &v108[v103];
          v2 = a1;
          if (v113 >= 0x20)
          {
            v114 = (v112 >> 2) + 1;
            v115 = 4 * (v114 & 0x7FFFFFFFFFFFFFF8);
            v116 = &v78[-v115];
            v109 = (_DWORD *)((char *)v109 - v115);
            v117 = &v108[4 * v104 - 16];
            v118 = v78 - 16;
            v119 = v114 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v120 = *(_OWORD *)v118;
              *(v117 - 1) = *((_OWORD *)v118 - 1);
              *v117 = v120;
              v117 -= 2;
              v118 -= 32;
              v119 -= 8;
            }
            while (v119);
            v78 = v116;
            if (v114 == (v114 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_106;
          }
        }
        else
        {
          v2 = a1;
        }
        do
        {
          v121 = *((_DWORD *)v78 - 1);
          v78 -= 4;
          *--v109 = v121;
        }
        while (v78 != v102);
LABEL_106:
        *(_QWORD *)v76 = v109;
        *(_QWORD *)(v76 + 8) = v110;
        *(_QWORD *)(v76 + 16) = &v108[4 * v107];
        if (v102)
          operator delete(v102);
        *(_QWORD *)(v76 + 8) = v110;
        v54 = (_DWORD *)*v53;
        v55 = v53[1];
        if (*v53 == v55)
          goto LABEL_47;
      }
      else
      {
        *(_DWORD *)v75 = v56;
        *(_QWORD *)(v73 + 8) = v75 + 4;
        v76 = *(_QWORD *)(v2 + 48);
        v78 = *(char **)(v76 + 8);
        v77 = *(_QWORD *)(v76 + 16);
        if ((unint64_t)v78 >= v77)
          goto LABEL_88;
LABEL_50:
        *(_DWORD *)v78 = v52;
        *(_QWORD *)(v76 + 8) = v78 + 4;
        v54 = (_DWORD *)*v53;
        v55 = v53[1];
        if (*v53 == v55)
          goto LABEL_47;
      }
    }
  }
}

void sub_20EDD42F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;

  if (__p)
  {
    operator delete(__p);
    if (!v17)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  operator delete(v17);
  goto LABEL_6;
}

_QWORD *sub_20EDD4354(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  uint64_t v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    v16 = *a1;
    v17 = *(_QWORD **)(*a1 + 8 * v3);
    if (!v17)
      goto LABEL_84;
LABEL_72:
    *v10 = *v17;
LABEL_90:
    *v17 = v10;
    goto LABEL_91;
  }
  v18 = 1;
  if (v7 >= 3)
    v18 = (v7 & (v7 - 1)) != 0;
  v19 = v18 | (2 * v7);
  v20 = vcvtps_u32_f32(v14 / v15);
  if (v19 <= v20)
    prime = v20;
  else
    prime = v19;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_36:
    if (prime >> 61)
      sub_20E877A38();
    v22 = operator new(8 * prime);
    v23 = (void *)*a1;
    *a1 = (uint64_t)v22;
    if (v23)
      operator delete(v23);
    v24 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v24++) = 0;
    while (prime != v24);
    v25 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_68;
    v26 = v25[1];
    v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v28 = v26 & v27;
      *(_QWORD *)(*a1 + 8 * v28) = v13;
      for (i = (_QWORD *)*v25; *v25; i = (_QWORD *)*v25)
      {
        v30 = i[1] & v27;
        if (v30 == v28)
        {
          v25 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v30))
        {
          *v25 = *i;
          v31 = 8 * v30;
          *i = **(_QWORD **)(*a1 + v31);
          **(_QWORD **)(*a1 + v31) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v30) = v25;
          v25 = i;
          v28 = v30;
        }
      }
      goto LABEL_68;
    }
    if (v26 >= prime)
      v26 %= prime;
    *(_QWORD *)(*a1 + 8 * v26) = v13;
    v35 = (_QWORD *)*v25;
    if (!*v25)
    {
LABEL_68:
      v7 = prime;
      v38 = prime - 1;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_69;
LABEL_83:
      v5 &= v38;
      v16 = *a1;
      v17 = *(_QWORD **)(*a1 + 8 * v5);
      if (!v17)
        goto LABEL_84;
      goto LABEL_72;
    }
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 == v26)
        goto LABEL_62;
      if (*(_QWORD *)(*a1 + 8 * v37))
      {
        *v25 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*a1 + v36);
        **(_QWORD **)(*a1 + v36) = v35;
        v35 = v25;
LABEL_62:
        v25 = v35;
        v35 = (_QWORD *)*v35;
        if (!v35)
          goto LABEL_68;
      }
      else
      {
        *(_QWORD *)(*a1 + 8 * v37) = v25;
        v25 = v35;
        v35 = (_QWORD *)*v35;
        v26 = v37;
        if (!v35)
          goto LABEL_68;
      }
    }
  }
  if (prime < v7)
  {
    v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
    {
      v32 = std::__next_prime(v32);
    }
    else
    {
      v34 = 1 << -(char)__clz(v32 - 1);
      if (v32 >= 2)
        v32 = v34;
    }
    if (prime <= v32)
      prime = v32;
    if (prime < v7)
    {
      if (!prime)
      {
        v39 = (void *)*a1;
        *a1 = 0;
        if (v39)
          operator delete(v39);
        v7 = 0;
        a1[1] = 0;
        v38 = -1;
        goto LABEL_83;
      }
      goto LABEL_36;
    }
    v7 = a1[1];
  }
  v38 = v7 - 1;
  if ((v7 & (v7 - 1)) == 0)
    goto LABEL_83;
LABEL_69:
  if (v7 <= v5)
    v5 %= v7;
  v16 = *a1;
  v17 = *(_QWORD **)(*a1 + 8 * v5);
  if (v17)
    goto LABEL_72;
LABEL_84:
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v16 + 8 * v5) = v13;
  if (*v10)
  {
    v40 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7)
        v40 %= v7;
    }
    else
    {
      v40 &= v7 - 1;
    }
    v17 = (_QWORD *)(*a1 + 8 * v40);
    goto LABEL_90;
  }
LABEL_91:
  ++a1[3];
  return v10;
}

void sub_20EDD47F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EAFA1EC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EDD4804(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E98B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EDD4814(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E98B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EDD484C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>, double a5@<D1>)
{
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  int32x2_t v12;
  int v13;
  float32x4_t *v14;
  unsigned int v15;
  float v16;
  unint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t *v22;
  unint64_t v23;
  int8x16_t *v24;
  unint64_t v25;
  int8x16_t *v26;
  float *v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  int8x16_t v31;
  int32x4_t v32;
  unint64_t v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t v36;
  float v37;
  float32x4_t v38;
  float v39;
  float32x4_t v40;
  int32x4_t v41;
  unint64_t v42;
  float *v43;
  int v44;
  unint64_t v45;
  float *v46;
  unint64_t v47;
  unint64_t v48;
  float *v49;
  float v50;
  unint64_t v51;
  float32x4_t v52;
  float32x4_t *v53;
  unint64_t v54;
  float32x4_t v55;
  unint64_t v56;
  float *v57;
  float32x4_t v58;
  int v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  float32x4_t *v67;
  unint64_t v68;
  unint64_t v69;
  float *v70;
  _BYTE *v71;
  unint64_t v72;
  float v73;
  int8x16_t *v74;
  float32x4_t *v75;
  unint64_t v76;
  int8x16_t v77;
  uint32x4_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int32x4_t v99;
  int32x4_t v101;
  float v102;
  float v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  uint64_t (**v107)();
  float32x4_t *v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count *v110;
  void *__p;
  void *v112;
  uint64_t (**v113)();
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  float32x4_t *v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count *v119;
  void *v120;
  void *v121;
  void *v122;
  _BYTE *v123;
  uint64_t v124;
  _QWORD v125[11];
  float *v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count *v128;
  float32x4_t **v129;
  float32x4_t **v130;
  int8x16x4_t v131;

  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 48);
  sub_20EDD4F9C((uint64_t)v125, v9, v10);
  if (v9)
    v11 = v10 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    v19 = 0;
    v20 = v125[5] - v125[4];
    v21 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
    v22 = *v129;
    v23 = v9 & 0xFFFFFFFFFFFFFFF0;
    v24 = **(int8x16_t ***)(a1 + 120);
    do
    {
      if (v9 >= 0x10 && (v22 >= (float32x4_t *)&v24->i8[v9] || v24 >= (int8x16_t *)&v22->f32[v9]))
      {
        v26 = (int8x16_t *)((char *)v24 + v23);
        v27 = &v22->f32[v9 & 0xFFFFFFFFFFFFFFF0];
        v30 = v9 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v31 = *v24++;
          v22[2] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v31, (int8x16_t)xmmword_2102DB030));
          v22[3] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v31, (int8x16_t)xmmword_2102DB040));
          *v22 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v31, (int8x16_t)xmmword_2102DB010));
          v22[1] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v31, (int8x16_t)xmmword_2102DB020));
          v22 += 4;
          v30 -= 16;
        }
        while (v30);
        v25 = v9 & 0xFFFFFFFFFFFFFFF0;
        if (v9 == v23)
          goto LABEL_13;
      }
      else
      {
        v25 = 0;
        v26 = v24;
        v27 = (float *)v22;
      }
      v28 = v9 - v25;
      do
      {
        v29 = v26->u8[0];
        v26 = (int8x16_t *)((char *)v26 + 1);
        *v27++ = (float)v29;
        --v28;
      }
      while (v28);
LABEL_13:
      v22 = (float32x4_t *)&v27[v20];
      v24 = (int8x16_t *)((char *)v26 + v21);
      ++v19;
    }
    while (v19 != v10);
  }
  v122 = 0;
  v123 = 0;
  v124 = 0;
  if (!a2)
    goto LABEL_44;
  sub_20E9F5694((uint64_t)&v122, a2);
  v13 = (a2 & 0x80000000) == 0 ? a2 : (int)a2 + 1;
  if ((int)a2 < 1)
    goto LABEL_44;
  v14 = (float32x4_t *)v122;
  v15 = -(v13 >> 1);
  *(float *)v12.i32 = (float)(a4 * a4) + (float)(a4 * a4);
  v16 = 1.0 / sqrt(*(float *)v12.i32 * 3.14159265);
  v102 = v16;
  if (a2 < 4uLL)
  {
    v17 = 0;
    v18 = *(float *)&a5;
LABEL_28:
    v42 = a2 - v17;
    v43 = &v14->f32[v17];
    v44 = v15 + v17;
    do
    {
      *(float *)v41.i32 = expf((float)-(float)((float)((float)v44 - v18) * (float)((float)v44 - v18)) / *(float *)v12.i32);
      *(float *)v12.i32 = (float)(a4 * a4) + (float)(a4 * a4);
      v18 = *(float *)&a5;
      *v43++ = *(float *)v41.i32 * v102;
      ++v44;
      --v42;
    }
    while (v42);
    goto LABEL_30;
  }
  v98 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
  v99 = vdupq_n_s32(v15);
  v97 = (float32x4_t)vdupq_lane_s32(v12, 0);
  v17 = a2 - (a2 & 3);
  v32 = (int32x4_t)xmmword_210365350;
  v33 = v17;
  v34 = (float32x4_t *)v122;
  do
  {
    v101 = v32;
    v35 = vsubq_f32(vcvtq_f32_s32(vaddq_s32(v99, v32)), v98);
    v106 = vdivq_f32(vmulq_f32(v35, vnegq_f32(v35)), v97);
    v103 = expf(v106.f32[1]);
    v36.f32[0] = expf(v106.f32[0]);
    v36.f32[1] = v103;
    v104 = v36;
    v37 = expf(v106.f32[2]);
    v38 = v104;
    v38.f32[2] = v37;
    v105 = v38;
    v39 = expf(v106.f32[3]);
    v40 = v105;
    v40.f32[3] = v39;
    *v34++ = vmulq_n_f32(v40, v102);
    v41.i64[0] = 0x400000004;
    v41.i64[1] = 0x400000004;
    v32 = vaddq_s32(v101, v41);
    v33 -= 4;
  }
  while (v33);
  *(float *)v12.i32 = (float)(a4 * a4) + (float)(a4 * a4);
  v18 = *(float *)&a5;
  if ((a2 & 3) != 0)
    goto LABEL_28;
LABEL_30:
  if (a2 >= 2uLL)
  {
    v45 = a2 - (a2 & 1);
    v46 = &v14->f32[1];
    v41.i32[0] = 0;
    v47 = v45;
    do
    {
      *(float *)v41.i32 = (float)(*(float *)v41.i32 + *(v46 - 1)) + *v46;
      v46 += 2;
      v47 -= 2;
    }
    while (v47);
    if ((a2 & 1) == 0)
      goto LABEL_37;
  }
  else
  {
    v45 = 0;
    v41.i32[0] = 0;
  }
  v48 = a2 - v45;
  v49 = &v14->f32[v45];
  do
  {
    v50 = *v49++;
    *(float *)v41.i32 = *(float *)v41.i32 + v50;
    --v48;
  }
  while (v48);
LABEL_37:
  if (a2 < 8uLL)
  {
    v51 = 0;
LABEL_42:
    v56 = a2 - v51;
    v57 = &v14->f32[v51];
    do
    {
      *v57 = *v57 / *(float *)v41.i32;
      ++v57;
      --v56;
    }
    while (v56);
    goto LABEL_44;
  }
  v51 = a2 - (a2 & 7);
  v52 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.i8, 0);
  v53 = v14 + 1;
  v54 = v51;
  do
  {
    v55 = vdivq_f32(*v53, v52);
    v53[-1] = vdivq_f32(v53[-1], v52);
    *v53 = v55;
    v53 += 2;
    v54 -= 8;
  }
  while (v54);
  if ((a2 & 7) != 0)
    goto LABEL_42;
LABEL_44:
  sub_20EDD4F9C((uint64_t)&v113, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
  sub_20EDD4F9C((uint64_t)&v107, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
  v59 = *(_DWORD *)(a1 + 32);
  v60 = *(_DWORD *)(a1 + 48);
  switch(((unint64_t)(v123 - (_BYTE *)v122) >> 2))
  {
    case 5u:
      sub_21010B690(v117, v108, v126, v59, v60, (unint64_t)v122, v58);
      break;
    case 7u:
      sub_21010C1B4(v117, v108, v126, v59, v60, (unint64_t)v122, v58);
      break;
    case 9u:
      sub_21010D570(v117, v108, v126, v59, v60, (unint64_t)v122, v58);
      break;
    case 0xBu:
      sub_21010F650(v117, v108, v126, v59, v60, (unint64_t)v122, v58);
      break;
    default:
      break;
  }
  v61 = v114;
  v62 = v116;
  sub_20EDB4A1C(a3, v114, v116);
  if (v61 && v62)
  {
    v63 = 0;
    v64 = *(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32);
    v65 = v115 - v114;
    v66 = **(_QWORD **)(a3 + 120);
    v67 = *(float32x4_t **)v120;
    v68 = v61 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      if (v61 >= 0x20 && (v66 >= (unint64_t)v67->u64 + 4 * v61 || (unint64_t)v67 >= v66 + v61))
      {
        v70 = &v67->f32[v61 & 0xFFFFFFFFFFFFFFE0];
        v71 = (_BYTE *)(v66 + v68);
        v74 = (int8x16_t *)(v66 + 16);
        v75 = v67 + 4;
        v76 = v61 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v131.val[3] = (int8x16_t)vcvtq_u32_f32(v75[-1]);
          v131.val[2] = (int8x16_t)vcvtq_u32_f32(v75[-2]);
          v131.val[1] = (int8x16_t)vcvtq_u32_f32(v75[-3]);
          v131.val[0] = (int8x16_t)vcvtq_u32_f32(v75[-4]);
          v77 = vqtbl4q_s8(v131, (int8x16_t)xmmword_210378410);
          v131.val[2] = (int8x16_t)vcvtq_u32_f32(v75[3]);
          v131.val[1] = (int8x16_t)vcvtq_u32_f32(v75[2]);
          v131.val[0] = (int8x16_t)vcvtq_u32_f32(v75[1]);
          v78 = vcvtq_u32_f32(*v75);
          v74[-1] = v77;
          *v74 = vqtbl4q_s8(v131, (int8x16_t)xmmword_210378410);
          v74 += 2;
          v75 += 8;
          v76 -= 32;
        }
        while (v76);
        v69 = v61 & 0xFFFFFFFFFFFFFFE0;
        if (v61 == v68)
          goto LABEL_52;
      }
      else
      {
        v69 = 0;
        v70 = (float *)v67;
        v71 = (_BYTE *)v66;
      }
      v72 = v61 - v69;
      do
      {
        v73 = *v70++;
        *v71++ = (int)v73;
        --v72;
      }
      while (v72);
LABEL_52:
      v66 = (unint64_t)&v71[v64];
      v67 = (float32x4_t *)&v70[v65];
      ++v63;
    }
    while (v63 != v62);
  }
  v107 = &off_24C9E9690;
  if (__p)
  {
    v112 = __p;
    operator delete(__p);
  }
  v79 = v110;
  if (v110)
  {
    p_shared_owners = (unint64_t *)&v110->__shared_owners_;
    do
      v81 = __ldaxr(p_shared_owners);
    while (__stlxr(v81 - 1, p_shared_owners));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = v109;
  if (v109)
  {
    v83 = (unint64_t *)&v109->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v113 = &off_24C9E9690;
  if (v120)
  {
    v121 = v120;
    operator delete(v120);
  }
  v85 = v119;
  if (v119)
  {
    v86 = (unint64_t *)&v119->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v118;
  if (v118)
  {
    v89 = (unint64_t *)&v118->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  if (v122)
  {
    v123 = v122;
    operator delete(v122);
  }
  v125[0] = &off_24C9E9690;
  if (v129)
  {
    v130 = v129;
    operator delete(v129);
  }
  v91 = v128;
  if (v128)
  {
    v92 = (unint64_t *)&v128->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = v127;
  if (v127)
  {
    v95 = (unint64_t *)&v127->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
}

void sub_20EDD4F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  uint64_t v63;

  if (__p)
    operator delete(__p);
  sub_20EDB59DC((_QWORD *)(v63 - 248));
  _Unwind_Resume(a1);
}

uint64_t sub_20EDD4F9C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(_QWORD *)a1 = &off_24C9E9690;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  sub_20EDDCF24((_QWORD *)a1, a2, a2, a3, 1, 0, 0);
  return a1;
}

void sub_20EDD5010(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v3 = (void *)v1[15];
  if (v3)
  {
    v1[16] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)v1[14];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)v1[12];
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20EDD509C(uint64_t **a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  int v17;
  float v18;
  int v19;
  int v20;
  uint64_t v21;
  float v22;
  int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  void *__p;
  void *v30;
  uint64_t v31;
  __int128 v32[3];
  char v33;
  void *v34[2];
  void *v35[2];
  __int128 v36;
  void *v37[4];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;

  if (!*(_QWORD *)(a2 + 88))
    return;
  v4 = *(_DWORD *)(a2 + 32);
  v5 = *(_DWORD *)(a2 + 48);
  v6 = (*a1)[3];
  v32[0] = *(_OWORD *)v6;
  memset(&v32[1], 0, 32);
  v33 = 1;
  *(_OWORD *)v34 = 0u;
  *(_OWORD *)v35 = 0u;
  v36 = 0u;
  memset(v37, 0, 26);
  v41 = 0;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  if (*(_BYTE *)(v6 + 184))
  {
    v7 = *(_QWORD *)(v6 + 88) - *(_QWORD *)(v6 + 80);
    if (v7)
      v8 = v7 == *(_QWORD *)(v6 + 168) - *(_QWORD *)(v6 + 160);
    else
      v8 = 0;
    if (!v8)
      goto LABEL_13;
    v9 = (uint64_t)(*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56)) >> 5;
    if (v9 != v7 >> 6)
      goto LABEL_13;
  }
  else
  {
    if (*(_QWORD *)(v6 + 160) != *(_QWORD *)(v6 + 168))
      goto LABEL_13;
    v9 = (uint64_t)(*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56)) >> 5;
    if (v9 != (uint64_t)(*(_QWORD *)(v6 + 88) - *(_QWORD *)(v6 + 80)) >> 6)
      goto LABEL_13;
  }
  if (*(_QWORD *)(v6 + 16) > v9)
  {
LABEL_13:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (uint64_t)(*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56)) >> 5;
  }
  sub_20EDD53A4(v32, v9);
  v10 = *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56);
  if (v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = v10 >> 5;
    if (v13 <= 1)
      v14 = 1;
    else
      v14 = v13;
    do
    {
      v15 = *(_QWORD *)(v6 + 56);
      v16 = *(float *)(v15 + v11);
      v17 = (int)v16;
      v18 = *(float *)(v15 + v11 + 20);
      v19 = (int)(float)(v18 + 0.5);
      v20 = (int)v16 - v19;
      if (v20 >= 0)
      {
        v21 = v17 + (uint64_t)v19;
        if ((int)v21 < v4)
        {
          v22 = *(float *)(v15 + v11 + 4);
          v23 = (int)v22;
          v24 = (int)v22 - v19;
          if ((v24 & 0x80000000) == 0)
          {
            v25 = v19 + v23;
            if (v25 < v5)
            {
              v26 = *(_QWORD *)(a2 + 120);
              if (*(_BYTE *)(*(_QWORD *)(v26 + 8 * v24) + v17))
              {
                v27 = *(_QWORD *)(v26 + 8 * v23);
                if (*(_BYTE *)(v27 + v20))
                {
                  if (*(_BYTE *)(v27 + v17) && *(_BYTE *)(v27 + v21) && *(_BYTE *)(*(_QWORD *)(v26 + 8 * v25) + v17))
                    sub_20EDBB530((uint64_t)v32, *(_BYTE *)(v15 + v11 + 24), (_OWORD *)(*(_QWORD *)(v6 + 80) + v12), v16, v22, *(float *)(v15 + v11 + 16), v18, *(float *)(v15 + v11 + 28));
                }
              }
            }
          }
        }
      }
      v12 += 64;
      v11 += 32;
      --v14;
    }
    while (v14);
  }
  v28 = *a1;
  __p = 0;
  v30 = 0;
  v31 = 0;
  sub_20F4263C4((uint64_t)v28, v32, (char **)&__p, *v28, v28[1], 1, 0.0);
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
  if (*((_QWORD *)&v39 + 1))
  {
    *(_QWORD *)&v40 = *((_QWORD *)&v39 + 1);
    operator delete(*((void **)&v39 + 1));
  }
  if (v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
  if (v35[1])
  {
    *(void **)&v36 = v35[1];
    operator delete(v35[1]);
  }
  if (v34[0])
  {
    v34[1] = v34[0];
    operator delete(v34[0]);
  }
}

void sub_20EDD5358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EDB4D8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EDD536C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    sub_20EDB4D8C(&a13);
    _Unwind_Resume(a1);
  }
  sub_20EDB4D8C(&a13);
  _Unwind_Resume(a1);
}

void sub_20EDD53A4(_QWORD *a1, size_t __sz)
{
  _BYTE *v4;
  _BYTE *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  _BYTE *v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE *v20;
  _BYTE *v21;
  size_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v4 = (_BYTE *)a1[7];
  if (__sz > (uint64_t)(a1[9] - (_QWORD)v4) >> 5)
  {
    if (__sz >> 59)
      sub_20E867F44();
    v5 = (_BYTE *)a1[8];
    v6 = (char *)operator new(32 * __sz);
    v7 = &v6[(v5 - v4) & 0xFFFFFFFFFFFFFFE0];
    v8 = v7;
    if (v5 != v4)
    {
      v9 = &v6[(v5 - v4) & 0xFFFFFFFFFFFFFFE0];
      do
      {
        v10 = *((_OWORD *)v5 - 1);
        v8 = v9 - 32;
        *((_OWORD *)v9 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v9 - 1) = v10;
        v5 -= 32;
        v9 -= 32;
      }
      while (v5 != v4);
    }
    a1[7] = v8;
    a1[8] = v7;
    a1[9] = &v6[32 * __sz];
    if (v4)
      operator delete(v4);
  }
  v11 = (_BYTE *)a1[10];
  if (__sz > (uint64_t)(a1[12] - (_QWORD)v11) >> 6)
  {
    if (__sz >> 58)
      goto LABEL_23;
    v12 = (_BYTE *)a1[11];
    v13 = (char *)operator new(__sz << 6);
    v14 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFC0];
    v15 = v14;
    if (v12 != v11)
    {
      v16 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFC0];
      do
      {
        v17 = *((_OWORD *)v12 - 4);
        v18 = *((_OWORD *)v12 - 3);
        v19 = *((_OWORD *)v12 - 1);
        v15 = v16 - 64;
        *((_OWORD *)v16 - 2) = *((_OWORD *)v12 - 2);
        *((_OWORD *)v16 - 1) = v19;
        *((_OWORD *)v16 - 4) = v17;
        *((_OWORD *)v16 - 3) = v18;
        v12 -= 64;
        v16 -= 64;
      }
      while (v12 != v11);
    }
    a1[10] = v15;
    a1[11] = v14;
    a1[12] = &v13[64 * __sz];
    if (v11)
      operator delete(v11);
  }
  v20 = (_BYTE *)a1[20];
  if (__sz <= (uint64_t)(a1[22] - (_QWORD)v20) >> 6)
    return;
  if (__sz >> 58)
LABEL_23:
    sub_20ED343A8();
  v21 = (_BYTE *)a1[21];
  v22 = __sz << 6;
  v23 = (char *)operator new(v22);
  v24 = &v23[(v21 - v20) & 0xFFFFFFFFFFFFFFC0];
  v25 = v24;
  if (v21 != v20)
  {
    v26 = &v23[(v21 - v20) & 0xFFFFFFFFFFFFFFC0];
    do
    {
      v27 = *((_OWORD *)v21 - 4);
      v28 = *((_OWORD *)v21 - 3);
      v29 = *((_OWORD *)v21 - 1);
      v25 = v26 - 64;
      *((_OWORD *)v26 - 2) = *((_OWORD *)v21 - 2);
      *((_OWORD *)v26 - 1) = v29;
      *((_OWORD *)v26 - 4) = v27;
      *((_OWORD *)v26 - 3) = v28;
      v21 -= 64;
      v26 -= 64;
    }
    while (v21 != v20);
  }
  a1[20] = v25;
  a1[21] = v24;
  a1[22] = &v23[v22];
  if (v20)
    operator delete(v20);
}

void sub_20EDD5578(const void **a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  int v5;
  int v6;
  int *v7;
  const void *v8;
  char *v9;
  _BYTE *v10;
  const void *v11;
  int64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  __int128 v38;
  __int128 v39;

  if (*(_QWORD *)(a2 + 88))
  {
    v5 = *(_DWORD *)(a2 + 32);
    v6 = *(_DWORD *)(a2 + 48);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v7 = (int *)*a1;
    v8 = a1[1];
    if (*a1 != v8)
    {
      v9 = 0;
      do
      {
        v18 = (int)*(float *)v7;
        v19 = (int)(float)((float)v7[9] + 0.5);
        v20 = v18 - v19;
        if (v18 - v19 >= 0)
        {
          v21 = v18 + (uint64_t)v19;
          if ((int)v21 < v5)
          {
            v22 = (int)*((float *)v7 + 1);
            v23 = v22 - v19;
            if (((v22 - v19) & 0x80000000) == 0)
            {
              v24 = v19 + v22;
              if (v24 < v6)
              {
                v25 = *(_QWORD *)(a2 + 120);
                if (*(_BYTE *)(*(_QWORD *)(v25 + 8 * v23) + v18))
                {
                  v26 = *(_QWORD *)(v25 + 8 * v22);
                  if (*(_BYTE *)(v26 + v20))
                  {
                    if (*(_BYTE *)(v26 + v18)
                      && *(_BYTE *)(v26 + v21)
                      && *(_BYTE *)(*(_QWORD *)(v25 + 8 * v24) + v18))
                    {
                      v27 = (unint64_t)a3[2];
                      if ((unint64_t)v9 < v27)
                      {
                        v15 = *(_OWORD *)v7;
                        v16 = *((_OWORD *)v7 + 2);
                        *((_OWORD *)v9 + 1) = *((_OWORD *)v7 + 1);
                        *((_OWORD *)v9 + 2) = v16;
                        *(_OWORD *)v9 = v15;
                        v17 = v9 + 48;
                      }
                      else
                      {
                        v28 = *a3;
                        v29 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *a3) >> 4);
                        v30 = v29 + 1;
                        if (v29 + 1 > 0x555555555555555)
                          sub_20E867F44();
                        v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - (_QWORD)v28) >> 4);
                        if (2 * v31 > v30)
                          v30 = 2 * v31;
                        if (v31 >= 0x2AAAAAAAAAAAAAALL)
                          v32 = 0x555555555555555;
                        else
                          v32 = v30;
                        if (v32)
                        {
                          if (v32 > 0x555555555555555)
                            sub_20E877A38();
                          v33 = (char *)operator new(48 * v32);
                        }
                        else
                        {
                          v33 = 0;
                        }
                        v34 = &v33[48 * v29];
                        v35 = *(_OWORD *)v7;
                        v36 = *((_OWORD *)v7 + 2);
                        *((_OWORD *)v34 + 1) = *((_OWORD *)v7 + 1);
                        *((_OWORD *)v34 + 2) = v36;
                        *(_OWORD *)v34 = v35;
                        v37 = v34;
                        if (v9 != v28)
                        {
                          do
                          {
                            v38 = *((_OWORD *)v9 - 3);
                            v39 = *((_OWORD *)v9 - 1);
                            *((_OWORD *)v37 - 2) = *((_OWORD *)v9 - 2);
                            *((_OWORD *)v37 - 1) = v39;
                            *((_OWORD *)v37 - 3) = v38;
                            v37 -= 48;
                            v9 -= 48;
                          }
                          while (v9 != v28);
                          v9 = v28;
                        }
                        v17 = v34 + 48;
                        *a3 = v37;
                        a3[1] = v34 + 48;
                        a3[2] = &v33[48 * v32];
                        if (v9)
                          operator delete(v9);
                      }
                      a3[1] = v17;
                      v9 = v17;
                    }
                  }
                }
              }
            }
          }
        }
        v7 += 12;
      }
      while (v7 != v8);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v11 = *a1;
    v10 = a1[1];
    v12 = v10 - (_BYTE *)*a1;
    if (v10 != *a1)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v12 >> 4) > 0x555555555555555)
        sub_20E867F44();
      v13 = (char *)operator new(v12);
      *a3 = v13;
      a3[1] = v13;
      v14 = &v13[16 * (v12 >> 4)];
      a3[2] = v14;
      memcpy(v13, v11, v12);
      a3[1] = v14;
    }
  }
}

void sub_20EDD5820(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

double sub_20EDD585C(double *a1, int64x2_t *a2, double *a3, double *a4)
{
  double v4;
  float64x2_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  int v13;
  int v14;
  float64x2_t v15;
  double v16;
  double v17;
  float64x2_t v18;
  float64x2_t v19;
  double result;

  v4 = a3[2];
  v5.f64[0] = (*a1 - v4) / *a3;
  v6 = (a1[1] - a3[5]) / a3[4];
  v7 = v5.f64[0] * v5.f64[0] + v6 * v6;
  v8 = sqrt(v7);
  v9 = fabs(v8);
  v10 = 1.0;
  if (v9 <= 1.0)
    v11 = v9;
  else
    v11 = 1.0 / v9;
  if (v11 <= 0.414213562)
  {
    v13 = 1;
    v14 = 2;
    v12 = v11;
    if (v7 < 0.00000001)
      goto LABEL_18;
    goto LABEL_10;
  }
  v12 = (v9 + -1.0) / (v9 + 1.0);
  if (v9 <= 1.0)
    v12 = -v12;
  v13 = -1;
  v14 = 1;
  if (v7 >= 0.00000001)
  {
LABEL_10:
    if (v9 > 1.0)
      v13 = -v13;
    else
      v14 = v11 > 0.414213562;
    if (v8 < 0.0)
      v14 = -v14;
    v15 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v12 * v12), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v12 * v12), (float64x2_t)xmmword_210315370), v12 * v12 * (v12 * v12))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v12 * v12), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v12 * v12), (float64x2_t)xmmword_210315380), v12 * v12 * (v12 * v12))), v12 * v12 * (v12 * v12) * (v12 * v12 * (v12 * v12))));
    v16 = v12 + v12 * vdivq_f64(v15, (float64x2_t)vdupq_laneq_s64((int64x2_t)v15, 1)).f64[0];
    if (v8 < 0.0)
      v13 = -v13;
    v17 = (double)v14 * 3.061617e-17 + (double)v14 * 0.785398163 + v16 * (double)v13;
    v18 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*a2, a2[1]), vmulq_n_f64((float64x2_t)vzip2q_s64(*a2, a2[1]), v17 * v17)), v17 * v17);
    v10 = 1.0 / v8 * (v17 + v17 * (v18.f64[0] + vmuld_lane_f64(v17 * v17 * (v17 * v17), v18, 1)));
  }
LABEL_18:
  v5.f64[1] = (a1[1] - a3[5]) / a3[4];
  v19 = vmulq_n_f64(v5, v10);
  *a4 = v4 + *a3 * v19.f64[0];
  result = a3[5] + vmuld_lane_f64(a3[4], v19, 1);
  a4[1] = result;
  return result;
}

uint64_t sub_20EDD5A4C(int64x2_t **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  int64x2_t v12;
  int64x2_t *v13;
  int64x2_t v14;
  int64x2_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  float *v23;
  float *v24;
  _BOOL4 v25;
  uint64_t *v26;
  uint64_t v27;
  float *v28;
  float *v29;
  BOOL v30;
  char v32;
  _QWORD v33[2];

  v5 = *a2;
  v4 = a2[1];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v6 = v4 - v5;
  if (v4 == v5)
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    if (v6 < 0)
      sub_20E867F44();
    v7 = (int64x2_t *)operator new(v4 - v5);
    *a1 = v7;
    a1[2] = (int64x2_t *)((char *)v7 + 8 * (v6 >> 3));
    bzero(v7, v4 - v5);
    v8 = (uint64_t *)((char *)v7->i64 + v6);
    a1[1] = (int64x2_t *)((char *)v7 + v6);
    if ((unint64_t)(v6 - 8) >= 0x18)
    {
      v11 = ((unint64_t)(v6 - 8) >> 3) + 1;
      v9 = v11 & 0x3FFFFFFFFFFFFFFCLL;
      v10 = &v7->i64[v11 & 0x3FFFFFFFFFFFFFFCLL];
      v12 = (int64x2_t)xmmword_2102E3FA0;
      v13 = v7 + 1;
      v14 = vdupq_n_s64(2uLL);
      v15 = vdupq_n_s64(4uLL);
      v16 = v11 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v13[-1] = v12;
        *v13 = vaddq_s64(v12, v14);
        v12 = vaddq_s64(v12, v15);
        v13 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v11 == v9)
        goto LABEL_10;
    }
    else
    {
      v9 = 0;
      v10 = (uint64_t *)v7;
    }
    do
      *v10++ = v9++;
    while (v10 != v8);
  }
LABEL_10:
  v33[0] = &v32;
  v33[1] = a2;
  v17 = 126 - 2 * __clz(((char *)v8 - (char *)v7) >> 3);
  if (v4 == v5)
    v18 = 0;
  else
    v18 = v17;
  sub_20EDDD150((uint64_t)v7, v8, (uint64_t)v33, v18, 1);
  if (v4 != v5)
  {
    v19 = *a2;
    v20 = &v7->i64[1];
    v21 = &v7[-1].i64[1];
    while (v20 != v8)
    {
      v22 = *(v20 - 1);
      v23 = (float *)(v19 + 8 * v22);
      v24 = (float *)(v19 + 8 * *v20);
      v25 = *v23 == *v24;
      if (*v23 == *v24)
        v25 = v23[1] == v24[1];
      ++v20;
      ++v21;
      if (v25)
      {
        v26 = v20 - 2;
        if (v20 - 2 != v8)
        {
          while (v20 != v8)
          {
            v27 = *v20;
            v28 = (float *)(v19 + 8 * v22);
            v29 = (float *)(v19 + 8 * *v20);
            v30 = *v28 == *v29;
            if (*v28 == *v29)
              v30 = v28[1] == v29[1];
            if (!v30)
            {
              v26[1] = v27;
              ++v26;
              v22 = v27;
            }
            ++v20;
          }
          v21 = v26 + 1;
        }
        goto LABEL_29;
      }
    }
  }
  v21 = v8;
LABEL_29:
  if (v8 != v21)
    a1[1] = (int64x2_t *)v21;
  return std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
}

void sub_20EDD5C98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EDD5CB8(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  int v14;
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  __int128 v21;
  int v22;
  __int128 v23;
  int64x2_t v24;
  int v25;
  char v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64x2_t v35;
  __int128 v36;
  __int16 v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  __int16 v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  int64x2_t v50;
  void *__p;
  void *v52;
  uint64_t v53;

  v8 = 0;
  v25 = 1;
  v26 = 1;
  v27 = xmmword_2102DB6B0;
  v28 = xmmword_2102DB6C0;
  v29 = 1000;
  v30 = 1;
  v31 = xmmword_2102DB6D0;
  v32 = 0x410000004141999ALL;
  v34 = 0x41F0000041200000;
  v33 = 5;
  v35 = vdupq_n_s64(1uLL);
  v36 = xmmword_2102DB6E0;
  v37 = 0;
  v38 = 1;
  v39 = 1;
  v40 = 36;
  v42 = 0x404000003F4CCCCDLL;
  v41 = 5;
  v43 = 1069547520;
  v44 = 20000;
  v46 = 256;
  v45 = 0;
  v47 = xmmword_2102DB6F0;
  v48 = 0x3F96E9DD3F5425F2;
  v49 = 0;
  v50 = vdupq_n_s64(0xAuLL);
  v52 = 0;
  v53 = 0;
  __p = 0;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 48);
  if (v9 >= 5 && v10 >= 5)
  {
    v8 = 0;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 48);
    do
    {
      ++v8;
      if (v11 < 0xA)
        break;
      v11 >>= 1;
      v13 = v12 > 9;
      v12 >>= 1;
    }
    while (v13);
  }
  if (a3)
  {
    v35 = vdupq_n_s64(0xAuLL);
    HIBYTE(v46) = 0;
  }
  DWORD2(v31) = 1077936128;
  LODWORD(v32) = 1086849024;
  v33 = 2;
  *((_QWORD *)&v36 + 1) = a4;
  *((_QWORD *)&v27 + 1) = v10;
  *(_QWORD *)&v28 = v8;
  LOBYTE(v37) = 1;
  v26 = 0;
  v38 = 0;
  *(_QWORD *)&v27 = v9;
  v14 = 0;
  v15 = 1;
  v16 = 0x4120000041A00000;
  v17 = 5;
  v18 = 0x3F96E9DD3F5425F2;
  v19 = 0;
  v20 = 1;
  v21 = xmmword_210378520;
  v22 = 100;
  v23 = xmmword_210378530;
  v24 = vdupq_n_s64(1uLL);
  sub_20FD40C08(a2, (__int128 *)&v25, (uint64_t)&v14);
  sub_20FD41BA8(a2, a1, 0, a5);
  if (__p)
  {
    v52 = __p;
    operator delete(__p);
  }
}

void sub_20EDD5EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EDD5EFC(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  __int128 v22;
  int v23;
  __int128 v24;
  int64x2_t v25;
  uint64_t (**v26)();
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  char v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64x2_t v41;
  __int128 v42;
  __int16 v43;
  int v44;
  __int16 v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  int64x2_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  char v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64x2_t v70;
  __int128 v71;
  __int16 v72;
  int v73;
  __int16 v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  __int16 v81;
  __int128 v82;
  uint64_t v83;
  int v84;
  int64x2_t v85;
  void *__p;
  void *v87;
  uint64_t v88;

  v8 = 0;
  v60 = 1;
  v61 = 1;
  v62 = xmmword_2102DB6B0;
  v63 = xmmword_2102DB6C0;
  v64 = 1000;
  v65 = 1;
  v66 = xmmword_2102DB6D0;
  v67 = 0x410000004141999ALL;
  v68 = 5;
  v69 = 0x41F0000041200000;
  v70 = vdupq_n_s64(1uLL);
  v71 = xmmword_2102DB6E0;
  v72 = 0;
  v73 = 1;
  v74 = 1;
  v75 = 36;
  v77 = 0x404000003F4CCCCDLL;
  v76 = 5;
  v78 = 1069547520;
  v79 = 20000;
  v81 = 256;
  v80 = 0;
  v82 = xmmword_2102DB6F0;
  v83 = 0x3F96E9DD3F5425F2;
  v84 = 0;
  v85 = vdupq_n_s64(0xAuLL);
  v88 = 0;
  __p = 0;
  v87 = 0;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 48);
  if (v9 >= 5 && v10 >= 5)
  {
    v8 = 0;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 48);
    do
    {
      ++v8;
      if (v11 < 0xA)
        break;
      v11 >>= 1;
      v13 = v12 > 9;
      v12 >>= 1;
    }
    while (v13);
  }
  if (a2)
  {
    v70 = vdupq_n_s64(0xAuLL);
    HIBYTE(v81) = 0;
  }
  DWORD2(v66) = 1077936128;
  LODWORD(v67) = 1086849024;
  v68 = 2;
  *((_QWORD *)&v71 + 1) = a4;
  *((_QWORD *)&v62 + 1) = v10;
  *(_QWORD *)&v63 = v8;
  LOBYTE(v72) = 1;
  v61 = 0;
  v73 = 0;
  *(_QWORD *)&v62 = v9;
  v26 = &off_24CA06CB8;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0;
  v31 = 1;
  v32 = 1;
  v33 = xmmword_2102DB6B0;
  v34 = xmmword_2102DB6C0;
  v35 = 1000;
  v36 = 1;
  v37 = xmmword_2102DB6D0;
  v38 = 0x410000004141999ALL;
  v39 = 5;
  v40 = 0x41F0000041200000;
  v41 = vdupq_n_s64(1uLL);
  v42 = xmmword_2102DB6E0;
  v43 = 0;
  v44 = 1;
  v45 = 1;
  v46 = 36;
  v48 = 0x404000003F4CCCCDLL;
  v47 = 5;
  v49 = 1069547520;
  v50 = 20000;
  v52 = 256;
  v51 = 0;
  v53 = xmmword_2102DB6F0;
  v54 = 0x3F96E9DD3F5425F2;
  v55 = 0;
  v56 = vdupq_n_s64(0xAuLL);
  v58 = 0;
  v59 = 0;
  v57 = 0;
  v15 = 0;
  v16 = 1;
  v17 = 0x4120000041A00000;
  v18 = 5;
  v19 = 0x3F96E9DD3F5425F2;
  v20 = 0;
  v21 = 1;
  v22 = xmmword_210378520;
  v23 = 100;
  v24 = xmmword_210378530;
  v25 = v41;
  sub_20FD40C08((uint64_t)&v26, (__int128 *)&v60, (uint64_t)&v15);
  v14 = operator new();
  *(_QWORD *)(v14 + 96) = 0;
  *(_QWORD *)(v14 + 104) = 0;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_QWORD *)(v14 + 112) = 0;
  *(_QWORD *)(v14 + 120) = &off_24C9E9888;
  *(_DWORD *)(v14 + 128) = 1234;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_OWORD *)(v14 + 184) = 0u;
  *(_QWORD *)(v14 + 200) = v14 + 200;
  *(_QWORD *)(v14 + 208) = v14 + 200;
  *(_QWORD *)(v14 + 216) = 0;
  *(_QWORD *)(v14 + 224) = 0;
  *(_QWORD *)(v14 + 232) = 0;
  *(_QWORD *)(v14 + 240) = 68;
  *(_QWORD *)(v14 + 224) = v14 + 200;
  *(_OWORD *)(v14 + 136) = xmmword_210378590;
  *(_OWORD *)(v14 + 152) = xmmword_2103785A0;
  *(_QWORD *)(v14 + 80) = 0;
  *(_QWORD *)(v14 + 88) = 8;
  *a5 = v14;
  sub_20F425D28(v14, a1, (uint64_t)&v26, a3, 0.0);
  sub_20FD40A18(&v26);
  if (__p)
  {
    v87 = __p;
    operator delete(__p);
  }
}

void sub_20EDD6258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  _QWORD **v12;
  void *v14;
  va_list va;

  va_start(va, a12);
  sub_20EDB4DEC(v12);
  sub_20FD40A18(va);
  v14 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v14;
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

void sub_20EDD6290(_QWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD v24[12];
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  void *__p;
  void *v28;
  _QWORD v29[5];
  uint64_t v30;
  uint64_t v31;
  void *__b;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  void *v35;
  void *v36;
  __int128 v37;
  double v38;
  __int128 v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v10 = a1[4];
  v11 = a1[6];
  v37 = xmmword_2103787B0;
  v38 = ((double)v10 + (double)v10) * 0.125;
  v39 = xmmword_2103787C0;
  v40 = ((double)v11 + (double)v11) * 0.125;
  v41 = 0;
  v42 = 0;
  v43 = 0x3FF0000000000000;
  sub_20EDB4A1C((uint64_t)v29, v10, v11);
  sub_20EDB4A1C((uint64_t)v24, a1[4], a1[6]);
  if (v30 * v31)
    memset(__b, 255, v30 * v31);
  sub_20EDB6DF8(v29, a1, (double *)&v37, v24);
  sub_20EDD5EFC((uint64_t)v29, a2, a3, a4, a5);
  v24[0] = &off_24C9AFD78;
  if (__p)
  {
    v28 = __p;
    operator delete(__p);
  }
  v12 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v25;
  if (v25)
  {
    v16 = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v29[0] = &off_24C9AFD78;
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  v18 = v34;
  if (v34)
  {
    v19 = (unint64_t *)&v34->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v33;
  if (v33)
  {
    v22 = (unint64_t *)&v33->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_20EDD64A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_20E8E481C(&a27);
  _Unwind_Resume(a1);
}

void sub_20EDD64BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_20E8E481C(&a9);
  sub_20E8E481C(&a27);
  _Unwind_Resume(a1);
}

void sub_20EDD64D8(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>, double a6@<D1>)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[12];
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  void *__p;
  void *v20;

  LODWORD(a6) = 0;
  sub_20EDD484C(a1, 0xBuLL, (uint64_t)v16, 2.3, a6);
  sub_20EDD6290(v16, a2, a3, a4, a5);
  v16[0] = &off_24C9AFD78;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  v10 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20EDD65E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8E481C(&a9);
  _Unwind_Resume(a1);
}

void sub_20EDD65F8(double *a1@<X0>, double *a2@<X1>, _QWORD *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t *a9@<X8>)
{
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  size_t v48;
  void **p_dst;
  uint64_t v50;
  const void *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void **v55;
  uint64_t v56;
  size_t v57;
  const char *v58;
  unsigned __int8 v59;
  unsigned __int8 v60;
  const char *v61;
  size_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  size_t v70;
  void *v71;
  _QWORD *v72;
  size_t v73;
  size_t v74;
  void *v75;
  void *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  char v81;
  _QWORD *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  const char *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _BYTE *v126;
  _BYTE *v127;
  int64_t v128;
  char *v129;
  const void *v130;
  int64_t v131;
  float *v132;
  float *v133;
  const void *v134;
  int64_t v135;
  char *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  float v140;
  _OWORD *v141;
  BOOL v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  float v187;
  float v188;
  float v189;
  float *v190;
  _OWORD *v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  float v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  _QWORD *v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  const char *__src;
  int v252;
  unint64_t v253;
  const char *__s;
  unint64_t v255;
  uint64_t *v256;
  unint64_t v259;
  double v260;
  uint64_t v261;
  double v262;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  char v267;
  void *v268[2];
  void *v269[2];
  __int128 v270;
  void *v271[4];
  __int128 v272;
  __int128 v273;
  __int128 v274;
  char v275;
  uint64_t *v276;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  _BYTE v278[12];
  int v279;
  _BYTE v280[24];
  __int128 v281;
  int64x2_t v282;
  uint64_t v283;
  void *v284;
  void *v285;
  void *v286;
  void *v287;
  _QWORD v288[10];
  _BYTE v289[68];
  uint64_t v290;
  uint64_t v291;
  int64x2_t v292;
  __int128 v293;
  __int16 v294;
  int v295;
  __int16 v296;
  uint64_t v297;
  int v298;
  uint64_t v299;
  int v300;
  uint64_t v301;
  int v302;
  __int16 v303;
  __int128 v304;
  uint64_t v305;
  int v306;
  int64x2_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  void **__dst;
  size_t v312;
  int64_t v313;
  __int128 v314;
  _QWORD v315[4];
  unint64_t v316;
  unint64_t v317;
  std::__shared_weak_count *v318;
  std::__shared_weak_count *v319;
  void *v320;
  void *v321;
  void *v322;
  __int128 v323;
  float64x2_t v324;
  uint64_t v325[2];
  __int128 v326;
  char *v327;
  _BYTE object[24];
  _BYTE v329[24];
  _BYTE v330[20];
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  int64x2_t v334;
  uint64_t v335;
  uint64_t v336;
  char v337;
  char v338;
  int v339;
  __int16 v340;
  uint64_t v341;
  int v342;
  uint64_t v343;
  int v344;
  uint64_t v345;
  int v346;
  char v347;
  char v348;
  __int128 v349;
  uint64_t v350;
  int v351;
  int64x2_t v352;
  void *v353;
  void *v354;
  uint64_t v355;
  uint64_t v356;

  v356 = *MEMORY[0x24BDAC8D0];
  sub_20EDB79B8((uint64_t)v315, (uint64_t)a3);
  v261 = a5;
  if (*(_BYTE *)(a7 + 48))
  {
    v15 = *(_QWORD *)(a7 + 24);
    v16 = *(_QWORD *)(a7 + 40);
    v17 = a3[6];
    v18 = v15 >= v17 || v16 + v15 > v17;
    if (v18)
    {
      *a9 = 0;
      goto LABEL_288;
    }
    v20 = *(_QWORD *)(a7 + 32);
    v21 = *(_QWORD *)(a7 + 24);
    v259 = *(_QWORD *)(a7 + 16);
    v276 = (uint64_t *)(*(_QWORD *)(a3[15] + 8 * v15) + v259);
    v22 = v276;
    v23 = (std::__shared_weak_count *)operator new();
    v23->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    v23->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E9958;
    v23->__shared_weak_owners_ = 0;
    v23[1].__vftable = (std::__shared_weak_count_vtbl *)v22;
    rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v23;
    *(_QWORD *)&v314 = v22;
    *((_QWORD *)&v314 + 1) = v23;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    v26 = a3[5];
    v27 = a3[2];
    v288[0] = &off_24C9AFD78;
    LOBYTE(v288[1]) = 0;
    v289[0] = 0;
    memset(&v288[2], 0, 57);
    memset(&v289[8], 0, 56);
    object[0] = 0;
    object[8] = 0;
    sub_20E8E9964((uint64_t)v288, &v314, v20, v26, v16, v27, 0, 0, (uint64_t *)object);
    sub_20E8E9964((uint64_t)v315, (__int128 *)&v289[8], v288[4], v288[5], v288[6], v288[2], v288[3], LOBYTE(v288[1]), &v288[9]);
    v19 = v21;
    memset(&v288[4], 0, 24);
    v288[0] = &off_24C9AFD78;
    if (*(_QWORD *)&v289[40])
    {
      *(_QWORD *)&v289[48] = *(_QWORD *)&v289[40];
      operator delete(*(void **)&v289[40]);
    }
    v28 = *(std::__shared_weak_count **)&v289[32];
    if (*(_QWORD *)&v289[32])
    {
      v29 = (unint64_t *)(*(_QWORD *)&v289[32] + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = *(std::__shared_weak_count **)&v289[16];
    if (*(_QWORD *)&v289[16])
    {
      v32 = (unint64_t *)(*(_QWORD *)&v289[16] + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = (std::__shared_weak_count *)*((_QWORD *)&v314 + 1);
    if (*((_QWORD *)&v314 + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&v314 + 1) + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (rep)
    {
      v37 = (uint64_t *)(rep + 8);
      do
        v38 = __ldaxr((unint64_t *)v37);
      while (__stlxr(v38 - 1, (unint64_t *)v37));
      if (!v38)
      {
        (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep))(*(_QWORD *)rep + 16))(rep);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)rep);
      }
    }
  }
  else
  {
    v19 = 0;
    v259 = 0;
  }
  v253 = v19;
  v39 = v316;
  v40 = v317;
  v41 = 0;
  if (v316 >= 5 && v317 >= 5)
  {
    v43 = v316;
    v44 = v317;
    do
    {
      ++v41;
      if (v43 < 0xA)
        break;
      v43 >>= 1;
      v18 = v44 > 9;
      v44 >>= 1;
    }
    while (v18);
  }
  v256 = a9;
  if (a8)
  {
    v41 = (unint64_t)(float)(log2f((float)v316 * 0.0625) + 1.0);
    if ((double)v40 / exp2((double)(v41 - 1)) < 16.0)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/PlanarObjectsDetector.cpp", 499, (uint64_t)"image.height() / std::pow(2.0, max_octaves - 1) >= 16", 53, (uint64_t)"An octave for fixed-point implementation must be at least 16x16", 63, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_304;
      }
      v39 = v316;
    }
    if (!(v39 % (unint64_t)exp2((double)v41))
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/PlanarObjectsDetector.cpp", 501, (uint64_t)"image.width() % static_cast<size_t>(std::pow(2.0, max_octaves)) == 0", 68, (uint64_t)"Resolution must be even for all octaves", 39, (void (*)(void **))sub_21023DDB0))
    {
      sub_20EDD85B0(v325);
      if (**(int **)(v325[0] + 56) > 3
        || (v45 = *(unsigned __int8 *)(v325[0] + 72),
            v46 = sub_20E8C31DC(v325[0], "OSLogSurrogateAppender", 1, 0),
            v47 = v46,
            !v45)
        && !v46)
      {
LABEL_185:
        v40 = v317;
        v39 = v316;
        goto LABEL_186;
      }
      sub_20E863438((uint64_t)v288);
      sub_20E86A980(&v288[2], (uint64_t)"Num of octaves for fixed point ", 31);
      std::ostream::operator<<();
      v252 = v45;
      if ((v289[40] & 0x10) != 0)
      {
        v50 = *(_QWORD *)&v289[32];
        if (*(_QWORD *)&v289[32] < v288[9])
        {
          *(_QWORD *)&v289[32] = v288[9];
          v50 = v288[9];
        }
        v51 = (const void *)v288[8];
        v48 = v50 - v288[8];
        if ((unint64_t)(v50 - v288[8]) > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_107;
      }
      else
      {
        if ((v289[40] & 8) == 0)
        {
          v48 = 0;
          HIBYTE(v313) = 0;
          p_dst = (void **)&__dst;
          goto LABEL_63;
        }
        v51 = (const void *)v288[5];
        v48 = v288[7] - v288[5];
        if (v288[7] - v288[5] > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_107:
          sub_20E860B7C();
      }
      if (v48 >= 0x17)
      {
        v52 = v47;
        v53 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v48 | 7) != 0x17)
          v53 = v48 | 7;
        v54 = v53 + 1;
        p_dst = (void **)operator new(v53 + 1);
        v313 = v54 | 0x8000000000000000;
        __dst = p_dst;
        v312 = v48;
        v47 = v52;
      }
      else
      {
        HIBYTE(v313) = v48;
        p_dst = (void **)&__dst;
        if (!v48)
        {
LABEL_63:
          v255 = v47;
          *((_BYTE *)p_dst + v48) = 0;
          v276 = v325;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          *(std::chrono::system_clock::time_point *)v278 = std::chrono::system_clock::now();
          *(_DWORD *)&v278[8] = 3;
          *(_QWORD *)v280 = "unknown file";
          *(_DWORD *)&v280[8] = 502;
          v281 = 0uLL;
          *(_QWORD *)&v280[16] = "unknown function";
          v55 = (void **)&__dst;
          if (v313 < 0)
            v55 = __dst;
          __s = (const char *)v55;
          v56 = *v276;
          v250 = *v276;
          if (*(char *)(*v276 + 39) < 0)
          {
            v58 = *(const char **)(v56 + 16);
            v57 = *(_QWORD *)(v56 + 24);
            v249 = *v276 + 16;
            v60 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v60 & 1) != 0)
              goto LABEL_69;
          }
          else
          {
            v57 = *(unsigned __int8 *)(*v276 + 39);
            v58 = (const char *)(*v276 + 16);
            v249 = (uint64_t)v58;
            v59 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v59 & 1) != 0)
              goto LABEL_69;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)object);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
            if (v329[0] && (object[23] & 0x80000000) != 0)
              operator delete(*(void **)object);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_69:
          if (byte_254A4A4F8[23] >= 0)
            v61 = byte_254A4A4F8;
          else
            v61 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v62 = byte_254A4A4F8[23];
          else
            v62 = *(_QWORD *)&byte_254A4A4F8[8];
          __src = v58;
          *(_QWORD *)object = os_log_create(v61, v58);
          v63 = &object[8];
          if (v62 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v62 >= 0x17)
          {
            v64 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v62 | 7) != 0x17)
              v64 = v62 | 7;
            v65 = v64 + 1;
            v63 = operator new(v64 + 1);
            *(_QWORD *)v329 = v65 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v63;
            *(_QWORD *)&object[16] = v62;
          }
          else
          {
            v329[7] = v62;
            if (!v62)
            {
LABEL_83:
              v63[v62] = 0;
              v329[8] = 1;
              v66 = &v329[16];
              if (v57 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v57 >= 0x17)
              {
                v67 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v57 | 7) != 0x17)
                  v67 = v57 | 7;
                v68 = v67 + 1;
                v66 = operator new(v67 + 1);
                *(_QWORD *)&v330[8] = v68 | 0x8000000000000000;
                *(_QWORD *)&v329[16] = v66;
                *(_QWORD *)v330 = v57;
              }
              else
              {
                v330[15] = v57;
                if (!v57)
                {
LABEL_91:
                  v66[v57] = 0;
                  v330[16] = 1;
                  v69 = *(NSObject **)object;
                  if ((v330[15] & 0x80000000) != 0)
                    operator delete(*(void **)&v329[16]);
                  if (v329[8] && (v329[7] & 0x80000000) != 0)
                    operator delete(*(void **)&object[8]);
                  if (*(_QWORD *)object)
                    os_release(*(void **)object);
                  if (!v255 || !*(_QWORD *)(v255 + 24))
                  {
                    os_log_type_enabled(v69, OS_LOG_TYPE_INFO);
                    *(_DWORD *)object = 136315138;
                    *(_QWORD *)&object[4] = __s;
                    v76 = (void *)_os_log_send_and_compose_impl();
                    v77 = v252;
                    if (v76)
                      free(v76);
                    goto LABEL_171;
                  }
                  v70 = _os_log_pack_size();
                  v71 = operator new(v70, (std::align_val_t)8uLL);
                  v72 = (_QWORD *)operator new();
                  *v72 = &off_24C9ABB80;
                  v72[1] = 0;
                  v72[2] = 0;
                  v72[3] = v71;
                  *(_QWORD *)&v264 = v71;
                  *((_QWORD *)&v264 + 1) = v71;
                  *(_QWORD *)&v266 = 0;
                  v265 = (unint64_t)v72;
                  v73 = strlen(__s);
                  if (v73 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v74 = v73;
                  if (v73 >= 0x17)
                  {
                    v78 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v73 | 7) != 0x17)
                      v78 = v73 | 7;
                    v79 = v78 + 1;
                    v75 = operator new(v78 + 1);
                    *((_QWORD *)&v323 + 1) = v79 | 0x8000000000000000;
                    v322 = v75;
                    *(_QWORD *)&v323 = v74;
                  }
                  else
                  {
                    HIBYTE(v323) = v73;
                    v75 = &v322;
                    if (!v73)
                    {
LABEL_112:
                      *((_BYTE *)v75 + v74) = 0;
                      v80 = v322;
                      *(_QWORD *)&v326 = v323;
                      *(_QWORD *)((char *)&v326 + 7) = *(_QWORD *)((char *)&v323 + 7);
                      v81 = HIBYTE(v323);
                      v82 = operator new(0x38uLL);
                      v82[1] = 0;
                      v82[2] = 0;
                      v82[3] = off_24C9ABC20;
                      *v82 = &off_24C9ABBD0;
                      v83 = v326;
                      v82[4] = v80;
                      v82[5] = v83;
                      *(_QWORD *)((char *)v82 + 47) = *(_QWORD *)((char *)&v326 + 7);
                      *((_BYTE *)v82 + 55) = v81;
                      *(_QWORD *)&v326 = 0;
                      *(_QWORD *)((char *)&v326 + 7) = 0;
                      v84 = (std::__shared_weak_count *)v266;
                      *((_QWORD *)&v265 + 1) = v82 + 3;
                      *(_QWORD *)&v266 = v82;
                      if (v84)
                      {
                        v85 = (unint64_t *)&v84->__shared_owners_;
                        do
                          v86 = __ldaxr(v85);
                        while (__stlxr(v86 - 1, v85));
                        if (!v86)
                        {
                          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                          std::__shared_weak_count::__release_weak(v84);
                        }
                      }
                      *(_OWORD *)object = v264;
                      *(_QWORD *)&object[16] = v265;
                      if ((_QWORD)v265)
                      {
                        v87 = (unint64_t *)(v265 + 8);
                        do
                          v88 = __ldxr(v87);
                        while (__stxr(v88 + 1, v87));
                      }
                      *(_QWORD *)v329 = *((_QWORD *)&v265 + 1);
                      *(_QWORD *)&v329[8] = v266;
                      if ((_QWORD)v266)
                      {
                        v89 = (unint64_t *)(v266 + 8);
                        do
                          v90 = __ldxr(v89);
                        while (__stxr(v90 + 1, v89));
                        *(_QWORD *)&v329[16] = *((_QWORD *)&v265 + 1);
                        do
                          v91 = __ldaxr(v89);
                        while (__stlxr(v91 - 1, v89));
                        if (!v91)
                        {
                          (*(void (**)(_QWORD))(*(_QWORD *)v266 + 16))(v266);
                          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v266);
                        }
                      }
                      else
                      {
                        *(_QWORD *)&v329[16] = *((_QWORD *)&v265 + 1);
                      }
                      if ((_QWORD)v265)
                      {
                        v92 = (unint64_t *)(v265 + 8);
                        do
                          v93 = __ldaxr(v92);
                        while (__stlxr(v93 - 1, v92));
                        if (!v93)
                        {
                          (*(void (**)(_QWORD))(*(_QWORD *)v265 + 16))(v265);
                          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v265);
                        }
                      }
                      v94 = *(_QWORD *)object;
                      if (*(char *)(*(_QWORD *)&v329[16] + 31) >= 0)
                        v95 = *(_QWORD *)&v329[16] + 8;
                      else
                        v95 = *(_QWORD *)(*(_QWORD *)&v329[16] + 8);
                      v96 = _os_log_pack_fill();
                      *(_DWORD *)v96 = 136315138;
                      *(_QWORD *)(v96 + 4) = v95;
                      v97 = operator new();
                      v98 = *(unsigned __int8 *)(v250 + 39);
                      v99 = v249;
                      if ((v98 & 0x80u) != 0)
                      {
                        v99 = *(_QWORD *)(v250 + 16);
                        v98 = *(_QWORD *)(v250 + 24);
                      }
                      *(_QWORD *)v97 = v94;
                      *(_OWORD *)(v97 + 8) = *(_OWORD *)&object[8];
                      *(_QWORD *)&object[8] = 0;
                      *(_QWORD *)&object[16] = 0;
                      *(_OWORD *)(v97 + 24) = *(_OWORD *)v329;
                      *(_QWORD *)v329 = 0;
                      *(_QWORD *)&v329[8] = 0;
                      *(_QWORD *)(v97 + 40) = v99;
                      *(_QWORD *)(v97 + 48) = v98;
                      *(_BYTE *)(v97 + 56) = 1;
                      v322 = 0;
                      *(_QWORD *)&v264 = v97;
                      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v255 + 24) + 40))(*(_QWORD *)(v255 + 24), &v264);
                      v100 = v264;
                      *(_QWORD *)&v264 = 0;
                      if (v100)
                      {
                        v101 = *(std::__shared_weak_count **)(v100 + 32);
                        if (v101)
                        {
                          v102 = (unint64_t *)&v101->__shared_owners_;
                          do
                            v103 = __ldaxr(v102);
                          while (__stlxr(v103 - 1, v102));
                          if (!v103)
                          {
                            ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                            std::__shared_weak_count::__release_weak(v101);
                          }
                        }
                        v104 = *(std::__shared_weak_count **)(v100 + 16);
                        if (v104)
                        {
                          v105 = (unint64_t *)&v104->__shared_owners_;
                          do
                            v106 = __ldaxr(v105);
                          while (__stlxr(v106 - 1, v105));
                          if (!v106)
                          {
                            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                            std::__shared_weak_count::__release_weak(v104);
                          }
                        }
                        MEMORY[0x212BC6398](v100, 0x10F0C40B62ED6C6);
                        v107 = v322;
                        v322 = 0;
                        if (v107)
                        {
                          v108 = (std::__shared_weak_count *)*((_QWORD *)v107 + 4);
                          if (v108)
                          {
                            v109 = (unint64_t *)&v108->__shared_owners_;
                            do
                              v110 = __ldaxr(v109);
                            while (__stlxr(v110 - 1, v109));
                            if (!v110)
                            {
                              ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                              std::__shared_weak_count::__release_weak(v108);
                            }
                          }
                          v111 = (std::__shared_weak_count *)*((_QWORD *)v107 + 2);
                          if (v111)
                          {
                            v112 = (unint64_t *)&v111->__shared_owners_;
                            do
                              v113 = __ldaxr(v112);
                            while (__stlxr(v113 - 1, v112));
                            if (!v113)
                            {
                              ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                              std::__shared_weak_count::__release_weak(v111);
                            }
                          }
                          MEMORY[0x212BC6398](v107, 0x10F0C40B62ED6C6);
                        }
                      }
                      v114 = *(std::__shared_weak_count **)&v329[8];
                      v77 = v252;
                      if (*(_QWORD *)&v329[8])
                      {
                        v115 = (unint64_t *)(*(_QWORD *)&v329[8] + 8);
                        do
                          v116 = __ldaxr(v115);
                        while (__stlxr(v116 - 1, v115));
                        if (!v116)
                        {
                          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                          std::__shared_weak_count::__release_weak(v114);
                        }
                      }
                      v117 = *(std::__shared_weak_count **)&object[16];
                      if (*(_QWORD *)&object[16])
                      {
                        v118 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                        do
                          v119 = __ldaxr(v118);
                        while (__stlxr(v119 - 1, v118));
                        if (!v119)
                        {
                          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                          std::__shared_weak_count::__release_weak(v117);
                        }
                      }
LABEL_171:
                      if (v77)
                      {
                        v120 = (const char *)&__dst;
                        if (v313 < 0)
                          v120 = (const char *)__dst;
                        sub_20E8C003C((uint64_t)&v276, "%s", v120);
                        sub_20E863570((uint64_t)&v276);
                      }
                      sub_20E863570((uint64_t)&v276);
                      v121 = (std::__shared_weak_count *)*((_QWORD *)&v281 + 1);
                      if (*((_QWORD *)&v281 + 1))
                      {
                        v122 = (unint64_t *)(*((_QWORD *)&v281 + 1) + 8);
                        do
                          v123 = __ldaxr(v122);
                        while (__stlxr(v123 - 1, v122));
                        if (!v123)
                        {
                          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                          std::__shared_weak_count::__release_weak(v121);
                        }
                      }
                      if (SHIBYTE(v313) < 0)
                        operator delete(__dst);
                      v288[0] = *MEMORY[0x24BEDB7F0];
                      v124 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                      *(_QWORD *)((char *)v288 + *(_QWORD *)(v288[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                      v288[2] = v124;
                      v288[3] = MEMORY[0x24BEDB848] + 16;
                      if ((v289[31] & 0x80000000) != 0)
                        operator delete(*(void **)&v289[8]);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x212BC6290](&v289[48]);
                      goto LABEL_185;
                    }
                  }
                  memcpy(v75, __s, v74);
                  goto LABEL_112;
                }
              }
              memmove(v66, __src, v57);
              goto LABEL_91;
            }
          }
          memmove(v63, v61, v62);
          goto LABEL_83;
        }
      }
      memmove(p_dst, v51, v48);
      goto LABEL_63;
    }
LABEL_304:
    abort();
  }
LABEL_186:
  *(_DWORD *)object = 1;
  *(_OWORD *)&v329[8] = xmmword_210378500;
  v330[0] = 1;
  v333 = 0x41F0000041200000;
  v338 = 0;
  v340 = 1;
  v341 = 36;
  v343 = 0x404000003F4CCCCDLL;
  v342 = 5;
  v344 = 1069547520;
  v345 = 20000;
  v346 = 0;
  v347 = 0;
  v349 = xmmword_2102DB6F0;
  v350 = 0x3F96E9DD3F5425F2;
  v351 = 0;
  v352 = vdupq_n_s64(0xAuLL);
  v354 = 0;
  v353 = 0;
  v355 = 0;
  *(_OWORD *)&v330[4] = xmmword_2103787D0;
  v331 = 0x4100000040C80000;
  v332 = 2;
  v334 = v352;
  v348 = 0;
  v335 = 5;
  v336 = v261;
  *(_QWORD *)v329 = v41;
  v337 = 1;
  object[4] = a8;
  *(_QWORD *)&object[16] = v40;
  *(_QWORD *)&object[8] = v39;
  v339 = 0;
  memset(&v288[1], 0, 56);
  v288[0] = &off_24CA06CB8;
  LODWORD(v288[9]) = 1;
  BYTE4(v288[9]) = 1;
  *(_OWORD *)v289 = xmmword_2102DB6B0;
  *(_OWORD *)&v289[16] = xmmword_2102DB6C0;
  *(_QWORD *)&v289[32] = 1000;
  v289[40] = 1;
  *(_OWORD *)&v289[44] = xmmword_2102DB6D0;
  *(_QWORD *)&v289[60] = 0x410000004141999ALL;
  v290 = 5;
  v291 = 0x41F0000041200000;
  v292 = vdupq_n_s64(1uLL);
  v293 = xmmword_2102DB6E0;
  v294 = 0;
  v295 = 1;
  v296 = 1;
  v297 = 36;
  v299 = 0x404000003F4CCCCDLL;
  v298 = 5;
  v300 = 1069547520;
  v301 = 20000;
  v303 = 256;
  v302 = 0;
  v304 = xmmword_2102DB6F0;
  v305 = 0x3F96E9DD3F5425F2;
  v306 = 0;
  v307 = v352;
  v310 = 0;
  v308 = 0;
  v309 = 0;
  LODWORD(v276) = 0;
  BYTE4(v276) = 1;
  rep = 0x4120000041A00000;
  *(_QWORD *)&v278[4] = 0x3F96E9DD3F5425F2;
  *(_DWORD *)v278 = 5;
  v279 = 0;
  *(_WORD *)v280 = 1;
  *(_OWORD *)&v280[4] = xmmword_210378520;
  *(_DWORD *)&v280[20] = 100;
  v281 = xmmword_210378530;
  v282 = v292;
  sub_20FD40C08((uint64_t)v288, (__int128 *)object, (uint64_t)&v276);
  v125 = operator new();
  *(_QWORD *)(v125 + 96) = 0;
  *(_QWORD *)(v125 + 104) = 0;
  *(_OWORD *)(v125 + 16) = 0u;
  *(_OWORD *)(v125 + 32) = 0u;
  *(_OWORD *)(v125 + 48) = 0u;
  *(_OWORD *)(v125 + 64) = 0u;
  *(_QWORD *)(v125 + 112) = 0;
  *(_QWORD *)(v125 + 120) = &off_24C9E9888;
  *(_DWORD *)(v125 + 128) = 1234;
  *(_OWORD *)(v125 + 168) = 0u;
  *(_OWORD *)(v125 + 184) = 0u;
  *(_QWORD *)(v125 + 200) = v125 + 200;
  *(_QWORD *)(v125 + 208) = v125 + 200;
  *(_QWORD *)(v125 + 216) = 0;
  *(_QWORD *)(v125 + 224) = 0;
  *(_QWORD *)(v125 + 232) = 0;
  *(_QWORD *)(v125 + 240) = 68;
  *(_QWORD *)(v125 + 224) = v125 + 200;
  *(_OWORD *)(v125 + 136) = xmmword_210378590;
  *(_OWORD *)(v125 + 152) = xmmword_2103785A0;
  *(_QWORD *)(v125 + 80) = 0;
  *(_QWORD *)(v125 + 88) = 8;
  *a9 = v125;
  sub_20F425D28(v125, (uint64_t)v315, (uint64_t)v288, a4, 0.0);
  sub_20EDB6310((uint64_t)&v276, *(__int128 **)(v125 + 24));
  v323 = 0uLL;
  v322 = 0;
  v127 = *(_BYTE **)(v125 + 32);
  v126 = *(_BYTE **)(v125 + 40);
  v128 = v126 - v127;
  if (v126 != v127)
  {
    if (v128 < 0)
      sub_20EABADD4();
    v322 = operator new(v126 - v127);
    *(_QWORD *)&v323 = v322;
    v129 = (char *)v322 + 4 * (v128 >> 2);
    *((_QWORD *)&v323 + 1) = v129;
    memcpy(v322, v127, v128);
    *(_QWORD *)&v323 = v129;
  }
  v312 = 0;
  __dst = 0;
  v313 = 0;
  v130 = (const void *)v281;
  v131 = *((_QWORD *)&v281 + 1) - v281;
  if (*((_QWORD *)&v281 + 1) == (_QWORD)v281)
  {
    v132 = 0;
    v133 = 0;
    v326 = 0uLL;
    v327 = 0;
    v134 = (const void *)v282.i64[1];
    v135 = v283 - v282.i64[1];
    if (v283 != v282.i64[1])
      goto LABEL_192;
  }
  else
  {
    if (v131 < 0)
      sub_20E867F44();
    v132 = (float *)operator new(*((_QWORD *)&v281 + 1) - v281);
    v133 = &v132[8 * (v131 >> 5)];
    __dst = (void **)v132;
    v313 = (int64_t)v133;
    memcpy(v132, v130, v131);
    v312 = (size_t)v133;
    v326 = 0uLL;
    v327 = 0;
    v134 = (const void *)v282.i64[1];
    v135 = v283 - v282.i64[1];
    if (v283 != v282.i64[1])
    {
LABEL_192:
      if (v135 < 0)
        sub_20ED343A8();
      v136 = (char *)operator new(v135);
      *(_QWORD *)&v326 = v136;
      v327 = &v136[64 * (v135 >> 6)];
      memcpy(v136, v134, v135);
      *((_QWORD *)&v326 + 1) = &v136[64 * (v135 >> 6)];
      v137 = ((char *)v133 - (char *)v132) >> 5;
      v138 = a3;
      if (v137 == v135 >> 6 << 6 >> 6)
        goto LABEL_198;
      goto LABEL_197;
    }
  }
  v136 = 0;
  v137 = ((char *)v133 - (char *)v132) >> 5;
  v138 = a3;
  if (v137)
  {
LABEL_197:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/PlanarObjectsDetector.cpp", 533, (uint64_t)"keypoints.size() == descriptors.size()", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
LABEL_198:
  *(_QWORD *)&v264 = v316;
  *((_QWORD *)&v264 + 1) = v317;
  v265 = 0u;
  v266 = 0u;
  v267 = 1;
  *(_OWORD *)v268 = 0u;
  *(_OWORD *)v269 = 0u;
  v270 = 0u;
  memset(v271, 0, 26);
  v272 = 0u;
  v273 = 0u;
  v274 = 0u;
  v275 = 0;
  if (*a6)
  {
    if (v133 != v132)
    {
      v139 = 0;
      v140 = (float)v259;
      v141 = v136;
      do
      {
        *(double *)v325 = (float)(v132[v139] + v140);
        *(double *)&v325[1] = (float)(v132[v139 + 1] + (float)v253);
        if ((sub_2100E602C(*a6, (double *)v325, &v324, 0) & 1) != 0 && v324.f64[0] >= 0.0)
        {
          v142 = v324.f64[1] < 0.0 || v324.f64[0] > (double)(unint64_t)(v138[4] - 1);
          if (!v142 && v324.f64[1] <= (double)(unint64_t)(v138[6] - 1))
          {
            v143 = a1[2];
            v144 = *a1;
            v145 = (v324.f64[0] - v143) / *a1;
            v146 = a1[5];
            v147 = sqrt(v145 * v145 + (v324.f64[1] - v146) / a1[4] * ((v324.f64[1] - v146) / a1[4]));
            v149 = *a2;
            v148 = a2[1];
            v151 = a2[2];
            v150 = a2[3];
            v152 = v147 * v147;
            v153 = *a2 * (v147 * v147)
                 + 1.0
                 + v148 * (v152 * v152)
                 + v151 * (v152 * (v152 * v152))
                 + v150 * (v147 * v147 * (v152 * (v152 * v152)));
            if (v153 == 0.0)
              v153 = 1.0;
            v154 = fmax(v147 / v153, 0.0);
            v155 = v154 * v154;
            v156 = v149 * v155
                 + 1.0
                 + v148 * (v155 * v155)
                 + v151 * (v155 * (v155 * v155))
                 + v150 * (v155 * (v155 * (v155 * v155)));
            if (v156 == 0.0)
              v156 = 1.0;
            v157 = fmax(v147 / v156, 0.0);
            v158 = v157 * v157;
            v159 = v149 * v158
                 + 1.0
                 + v148 * (v158 * v158)
                 + v151 * (v158 * (v158 * v158))
                 + v150 * (v158 * (v158 * (v158 * v158)));
            if (v159 == 0.0)
              v159 = 1.0;
            v160 = fmax(v147 / v159, 0.0);
            v161 = v160 * v160;
            v162 = v149 * v161
                 + 1.0
                 + v148 * (v161 * v161)
                 + v151 * (v161 * (v161 * v161))
                 + v150 * (v161 * (v161 * (v161 * v161)));
            if (v162 == 0.0)
              v162 = 1.0;
            v163 = fmax(v147 / v162, 0.0);
            v164 = v163 * v163;
            v165 = v149 * v164
                 + 1.0
                 + v148 * (v164 * v164)
                 + v151 * (v164 * (v164 * v164))
                 + v150 * (v164 * (v164 * (v164 * v164)));
            if (v165 == 0.0)
              v165 = 1.0;
            v166 = fmax(v147 / v165, 0.0);
            v167 = v166 * v166;
            v168 = v149 * v167
                 + 1.0
                 + v148 * (v167 * v167)
                 + v151 * (v167 * (v167 * v167))
                 + v150 * (v167 * (v167 * (v167 * v167)));
            if (v168 == 0.0)
              v168 = 1.0;
            v169 = fmax(v147 / v168, 0.0);
            v170 = v169 * v169;
            v171 = v149 * v170
                 + 1.0
                 + v148 * (v170 * v170)
                 + v151 * (v170 * (v170 * v170))
                 + v150 * (v170 * (v170 * (v170 * v170)));
            if (v171 == 0.0)
              v171 = 1.0;
            v172 = fmax(v147 / v171, 0.0);
            v173 = v172 * v172;
            v174 = v149 * v173
                 + 1.0
                 + v148 * (v173 * v173)
                 + v151 * (v173 * (v173 * v173))
                 + v150 * (v173 * (v173 * (v173 * v173)));
            if (v174 == 0.0)
              v174 = 1.0;
            v175 = fmax(v147 / v174, 0.0);
            v176 = v175 * v175;
            v177 = v149 * v176
                 + 1.0
                 + v148 * (v176 * v176)
                 + v151 * (v176 * (v176 * v176))
                 + v150 * (v176 * (v176 * (v176 * v176)));
            if (v177 == 0.0)
              v177 = 1.0;
            v178 = fmax(v147 / v177, 0.0);
            v179 = v178 * v178;
            v180 = v149 * v179
                 + 1.0
                 + v148 * (v179 * v179)
                 + v151 * (v179 * (v179 * v179))
                 + v150 * (v179 * (v179 * (v179 * v179)));
            if (v180 == 0.0)
              v180 = 1.0;
            v181 = fmax(v147 / v180, 0.0);
            if (v181 <= 1.57079633)
            {
              v260 = a1[4];
              v262 = a1[5];
              v182 = (v324.f64[1] - v146) / v260;
              v183 = tan(v181);
              if (v147 == 0.0)
                v184 = 1.0;
              else
                v184 = v147;
              v185 = v183 / v184;
              v186 = v262 + v260 * (v182 * v185);
              *(float *)&v185 = v143 + v144 * (v145 * v185);
              v187 = v186;
              sub_20EDBB530((uint64_t)&v264, LOBYTE(v132[v139 + 6]), v141, *(float *)&v185, v187, v132[v139 + 4], v132[v139 + 5], v132[v139 + 7]);
            }
          }
        }
        v139 += 8;
        v141 += 4;
        --v137;
      }
      while (v137);
    }
  }
  else if (v133 != v132)
  {
    v188 = (float)v259;
    v189 = (float)v253;
    v190 = v132 + 7;
    v191 = v136;
    do
    {
      v192 = a1[2];
      v193 = *a1;
      v194 = ((float)(*(v190 - 7) + v188) - v192) / *a1;
      v195 = a1[4];
      v196 = a1[5];
      v197 = ((float)(*(v190 - 6) + v189) - v196) / v195;
      v198 = sqrt(v194 * v194 + v197 * v197);
      v200 = *a2;
      v199 = a2[1];
      v202 = a2[2];
      v201 = a2[3];
      v203 = v198 * v198;
      v204 = *a2 * (v198 * v198)
           + 1.0
           + v199 * (v203 * v203)
           + v202 * (v203 * (v203 * v203))
           + v201 * (v198 * v198 * (v203 * (v203 * v203)));
      if (v204 == 0.0)
        v204 = 1.0;
      v205 = fmax(v198 / v204, 0.0);
      v206 = v205 * v205;
      v207 = v200 * v206
           + 1.0
           + v199 * (v206 * v206)
           + v202 * (v206 * (v206 * v206))
           + v201 * (v206 * (v206 * (v206 * v206)));
      if (v207 == 0.0)
        v207 = 1.0;
      v208 = fmax(v198 / v207, 0.0);
      v209 = v208 * v208;
      v210 = v200 * v209
           + 1.0
           + v199 * (v209 * v209)
           + v202 * (v209 * (v209 * v209))
           + v201 * (v209 * (v209 * (v209 * v209)));
      if (v210 == 0.0)
        v210 = 1.0;
      v211 = fmax(v198 / v210, 0.0);
      v212 = v211 * v211;
      v213 = v200 * v212
           + 1.0
           + v199 * (v212 * v212)
           + v202 * (v212 * (v212 * v212))
           + v201 * (v212 * (v212 * (v212 * v212)));
      if (v213 == 0.0)
        v213 = 1.0;
      v214 = fmax(v198 / v213, 0.0);
      v215 = v214 * v214;
      v216 = v200 * v215
           + 1.0
           + v199 * (v215 * v215)
           + v202 * (v215 * (v215 * v215))
           + v201 * (v215 * (v215 * (v215 * v215)));
      if (v216 == 0.0)
        v216 = 1.0;
      v217 = fmax(v198 / v216, 0.0);
      v218 = v217 * v217;
      v219 = v200 * v218
           + 1.0
           + v199 * (v218 * v218)
           + v202 * (v218 * (v218 * v218))
           + v201 * (v218 * (v218 * (v218 * v218)));
      if (v219 == 0.0)
        v219 = 1.0;
      v220 = fmax(v198 / v219, 0.0);
      v221 = v220 * v220;
      v222 = v200 * v221
           + 1.0
           + v199 * (v221 * v221)
           + v202 * (v221 * (v221 * v221))
           + v201 * (v221 * (v221 * (v221 * v221)));
      if (v222 == 0.0)
        v222 = 1.0;
      v223 = fmax(v198 / v222, 0.0);
      v224 = v223 * v223;
      v225 = v200 * v224
           + 1.0
           + v199 * (v224 * v224)
           + v202 * (v224 * (v224 * v224))
           + v201 * (v224 * (v224 * (v224 * v224)));
      if (v225 == 0.0)
        v225 = 1.0;
      v226 = fmax(v198 / v225, 0.0);
      v227 = v226 * v226;
      v228 = v200 * v227
           + 1.0
           + v199 * (v227 * v227)
           + v202 * (v227 * (v227 * v227))
           + v201 * (v227 * (v227 * (v227 * v227)));
      if (v228 == 0.0)
        v228 = 1.0;
      v229 = fmax(v198 / v228, 0.0);
      v230 = v229 * v229;
      v231 = v200 * v230
           + 1.0
           + v199 * (v230 * v230)
           + v202 * (v230 * (v230 * v230))
           + v201 * (v230 * (v230 * (v230 * v230)));
      if (v231 == 0.0)
        v231 = 1.0;
      v232 = fmax(v198 / v231, 0.0);
      if (v232 <= 1.57079633)
      {
        v233 = tan(v232);
        if (v198 == 0.0)
          v234 = 1.0;
        else
          v234 = v198;
        v235 = v233 / v234;
        v236 = v196 + v195 * (v197 * v235);
        *(float *)&v235 = v192 + v193 * (v194 * v235);
        v237 = v236;
        sub_20EDBB530((uint64_t)&v264, *((_BYTE *)v190 - 4), v191, *(float *)&v235, v237, *(v190 - 3), *(v190 - 2), *v190);
        v189 = (float)v253;
        v188 = (float)v259;
      }
      v190 += 8;
      v191 += 4;
      --v137;
    }
    while (v137);
  }
  v238 = v138[4];
  v239 = v138[6];
  v240 = operator new();
  *(_QWORD *)(v240 + 96) = 0;
  *(_QWORD *)(v240 + 104) = 0;
  *(_OWORD *)(v240 + 16) = 0u;
  *(_OWORD *)(v240 + 32) = 0u;
  *(_OWORD *)(v240 + 48) = 0u;
  *(_OWORD *)(v240 + 64) = 0u;
  *(_QWORD *)(v240 + 112) = 0;
  *(_QWORD *)(v240 + 120) = &off_24C9E9888;
  *(_DWORD *)(v240 + 128) = 1234;
  *(_OWORD *)(v240 + 168) = 0u;
  *(_OWORD *)(v240 + 184) = 0u;
  *(_QWORD *)(v240 + 200) = v240 + 200;
  *(_QWORD *)(v240 + 208) = v240 + 200;
  *(_QWORD *)(v240 + 216) = 0;
  *(_QWORD *)(v240 + 224) = 0;
  *(_QWORD *)(v240 + 232) = 0;
  *(_QWORD *)(v240 + 240) = 68;
  *(_QWORD *)(v240 + 224) = v240 + 200;
  *(_OWORD *)(v240 + 136) = xmmword_210378590;
  *(_OWORD *)(v240 + 152) = xmmword_2103785A0;
  *(_QWORD *)(v240 + 80) = 0;
  *(_QWORD *)(v240 + 88) = 8;
  v325[0] = v240;
  sub_20F4263C4(v240, &v264, (char **)&v322, v238, v239, a4, 0.0);
  v241 = (_QWORD *)*v256;
  *v256 = v240;
  if (v241)
  {
    v242 = sub_20EDB6628(v241);
    MEMORY[0x212BC6398](v242, 0x10B0C404CA194E4);
  }
  if (*((_QWORD *)&v273 + 1))
  {
    *(_QWORD *)&v274 = *((_QWORD *)&v273 + 1);
    operator delete(*((void **)&v273 + 1));
  }
  if (v271[0])
  {
    v271[1] = v271[0];
    operator delete(v271[0]);
  }
  if (v269[1])
  {
    *(void **)&v270 = v269[1];
    operator delete(v269[1]);
  }
  if (v268[0])
  {
    v268[1] = v268[0];
    operator delete(v268[0]);
  }
  if (v136)
    operator delete(v136);
  if (v132)
    operator delete(v132);
  if (v322)
  {
    *(_QWORD *)&v323 = v322;
    operator delete(v322);
  }
  if (v286)
  {
    v287 = v286;
    operator delete(v286);
  }
  if (v284)
  {
    v285 = v284;
    operator delete(v284);
  }
  if (v282.i64[1])
  {
    v283 = v282.i64[1];
    operator delete((void *)v282.i64[1]);
  }
  if ((_QWORD)v281)
  {
    *((_QWORD *)&v281 + 1) = v281;
    operator delete((void *)v281);
  }
  sub_20FD40A18(v288);
  if (v353)
  {
    v354 = v353;
    operator delete(v353);
  }
LABEL_288:
  v315[0] = &off_24C9AFD78;
  if (v320)
  {
    v321 = v320;
    operator delete(v320);
  }
  v243 = v319;
  if (v319)
  {
    v244 = (unint64_t *)&v319->__shared_owners_;
    do
      v245 = __ldaxr(v244);
    while (__stlxr(v245 - 1, v244));
    if (!v245)
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v243);
    }
  }
  v246 = v318;
  if (v318)
  {
    v247 = (unint64_t *)&v318->__shared_owners_;
    do
      v248 = __ldaxr(v247);
    while (__stlxr(v248 - 1, v247));
    if (!v248)
    {
      ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
      std::__shared_weak_count::__release_weak(v246);
    }
  }
}

void sub_20EDD8254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (LOBYTE(STACK[0x478]) && SLOBYTE(STACK[0x477]) < 0)
    operator delete((void *)STACK[0x460]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a51);
  if (SLOBYTE(STACK[0x36F]) < 0)
  {
    operator delete((void *)STACK[0x358]);
    sub_20E863784((uint64_t)&STACK[0x210]);
    sub_20E8E481C(&STACK[0x380]);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&STACK[0x210]);
  sub_20E8E481C(&STACK[0x380]);
  _Unwind_Resume(a1);
}

void sub_20EDD83A4(_Unwind_Exception *a1)
{
  sub_20E8E481C(&STACK[0x380]);
  _Unwind_Resume(a1);
}

void sub_20EDD83B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  sub_20E8E481C(&STACK[0x210]);
  sub_20E86665C((uint64_t)&STACK[0x370]);
  sub_20E86665C((uint64_t)&a51);
  sub_20E8E481C(&STACK[0x380]);
  _Unwind_Resume(a1);
}

void sub_20EDD846C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_20EDD8484(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  sub_20E8E481C(&STACK[0x380]);
  _Unwind_Resume(a1);
}

void sub_20EDD84A0(_Unwind_Exception *a1)
{
  sub_20E8E481C(&STACK[0x380]);
  _Unwind_Resume(a1);
}

void sub_20EDD84B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  void *v51;
  void *v52;
  void *v54;
  void *v55;

  sub_20EDB4DEC((_QWORD **)&STACK[0x438]);
  sub_20EDB4D8C(&a27);
  if (v52)
    operator delete(v52);
  if (v51)
    operator delete(v51);
  v54 = (void *)STACK[0x410];
  if (STACK[0x410])
  {
    STACK[0x418] = (unint64_t)v54;
    operator delete(v54);
  }
  sub_20EDB4D8C(&a51);
  sub_20EDB4DEC(a21);
  sub_20FD40A18(&STACK[0x210]);
  v55 = (void *)STACK[0x548];
  if (STACK[0x548])
  {
    STACK[0x550] = (unint64_t)v55;
    operator delete(v55);
  }
  sub_20E8E481C(&STACK[0x380]);
  _Unwind_Resume(a1);
}

void sub_20EDD84C8()
{
  JUMPOUT(0x20EDD8550);
}

void sub_20EDD84D0()
{
  JUMPOUT(0x20EDD8580);
}

void sub_20EDD84D8()
{
  JUMPOUT(0x20EDD8580);
}

void sub_20EDD84E0()
{
  JUMPOUT(0x20EDD8588);
}

void sub_20EDD84E8()
{
  JUMPOUT(0x20EDD8588);
}

void sub_20EDD84F0(_Unwind_Exception *a1)
{
  sub_20E8E481C(&STACK[0x380]);
  _Unwind_Resume(a1);
}

void sub_20EDD8504()
{
  if (STACK[0x448])
  {
    STACK[0x450] = STACK[0x448];
    JUMPOUT(0x20EDD8554);
  }
  JUMPOUT(0x20EDD855CLL);
}

void sub_20EDD8518()
{
  if (STACK[0x358])
  {
    STACK[0x360] = STACK[0x358];
    JUMPOUT(0x20EDD8560);
  }
  JUMPOUT(0x20EDD8568);
}

void sub_20EDD852C()
{
  JUMPOUT(0x20EDD8568);
}

void sub_20EDD85B0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5F990);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F990))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.odt.image_detection_and_tracking");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5F988);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5F990);
  }
  *a1 = qword_254A5F988;
}

void sub_20EDD864C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5F990);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5F990);
  _Unwind_Resume(a1);
}

uint64_t sub_20EDD86A4(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  const char *v23;
  unsigned __int8 v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  const char *v32;
  char *v33;
  char **v34;
  char **v35;
  unint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int64x2_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  char **v55;
  char **v56;
  unint64_t v57;
  char *v58;
  void *v59;
  int64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unsigned __int8 v64;
  const char *v65;
  size_t v66;
  void *v67;
  unint64_t v68;
  const char *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  size_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  void *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  void *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unsigned __int8 v114;
  const char *v115;
  size_t v116;
  void *v117;
  unint64_t v118;
  const char *v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  NSObject *v128;
  size_t v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count *v132;
  unint64_t *p_shared_owners;
  unint64_t v134;
  unint64_t v135;
  void *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  void *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  void *__p;
  __int128 v166;
  void *object;
  void *v168[2];
  __int128 v169;
  void *v170[2];
  unint64_t v171;
  char v172;
  _BYTE v173[48];
  _OWORD v174[2];
  __int128 v175;
  int64x2_t v176;
  __int128 v177;
  __int128 v178;
  _BYTE v179[32];
  _BYTE v180[32];
  _BYTE v181[24];
  __int128 v182;
  uint64_t v183;
  char *v184;
  __int128 v185;
  int v186;
  const char *v187;
  int v188;
  const char *v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  uint64_t v192;
  uint64_t v193;

  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v8 = (_QWORD *)(a1 + 16);
    do
    {
      v9 = v7[4];
      v10 = v9 >= a3;
      if (v9 >= a3)
        v11 = v7;
      else
        v11 = v7 + 1;
      if (v10)
        v8 = v7;
      v7 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v8 != (_QWORD *)(a1 + 16) && v8[4] <= a3)
    {
      sub_20EDD85B0(&v192);
      if (**(int **)(v192 + 56) > 2)
        return 1;
      v25 = *(unsigned __int8 *)(v192 + 72);
      v26 = sub_20E8C31DC(v192, "OSLogSurrogateAppender", 1, 0);
      v27 = v26;
      if (!v25 && v26 == 0)
        return 1;
      v184 = (char *)&v192;
      *(std::chrono::steady_clock::time_point *)&v185 = std::chrono::steady_clock::now();
      *((std::chrono::system_clock::time_point *)&v185 + 1) = std::chrono::system_clock::now();
      v186 = 2;
      v187 = "unknown file";
      v188 = 605;
      v190 = 0;
      v191 = 0;
      v189 = "unknown function";
      v29 = v192;
      v30 = v192 + 16;
      if (*(char *)(v192 + 39) < 0)
      {
        v32 = *(const char **)(v192 + 16);
        v31 = *(_QWORD *)(v192 + 24);
      }
      else
      {
        v31 = *(unsigned __int8 *)(v192 + 39);
        v32 = (const char *)(v192 + 16);
      }
      v114 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v114 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&object);
        sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
        if ((_BYTE)v169 && SHIBYTE(v168[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A50F >= 0)
        v115 = (const char *)&xmmword_254A4A4F8;
      else
        v115 = (const char *)xmmword_254A4A4F8;
      if (byte_254A4A50F >= 0)
        v116 = byte_254A4A50F;
      else
        v116 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
      object = os_log_create(v115, v32);
      v117 = v168;
      if (v116 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v116 >= 0x17)
      {
        v118 = v27;
        v119 = v32;
        v120 = v29;
        v121 = v25;
        v122 = v30;
        v123 = (v116 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v116 | 7) != 0x17)
          v123 = v116 | 7;
        v124 = v123 + 1;
        v117 = operator new(v123 + 1);
        v168[1] = (void *)v116;
        *(_QWORD *)&v169 = v124 | 0x8000000000000000;
        v168[0] = v117;
        v30 = v122;
        v25 = v121;
        v29 = v120;
        v32 = v119;
        v27 = v118;
      }
      else
      {
        BYTE7(v169) = v116;
        if (!v116)
        {
LABEL_165:
          *((_BYTE *)v117 + v116) = 0;
          BYTE8(v169) = 1;
          v125 = v170;
          if (v31 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v31 >= 0x17)
          {
            v126 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v31 | 7) != 0x17)
              v126 = v31 | 7;
            v127 = v126 + 1;
            v125 = operator new(v126 + 1);
            v170[1] = (void *)v31;
            v171 = v127 | 0x8000000000000000;
            v170[0] = v125;
          }
          else
          {
            HIBYTE(v171) = v31;
            if (!v31)
              goto LABEL_173;
          }
          memmove(v125, v32, v31);
LABEL_173:
          *((_BYTE *)v125 + v31) = 0;
          v172 = 1;
          v128 = object;
          if (SHIBYTE(v171) < 0)
            operator delete(v170[0]);
          if (BYTE8(v169) && SBYTE7(v169) < 0)
            operator delete(v168[0]);
          if (object)
            os_release(object);
          if (v27 && *(_QWORD *)(v27 + 24))
          {
            v129 = _os_log_pack_size();
            v130 = (std::__shared_weak_count_vtbl *)operator new(v129, (std::align_val_t)8uLL);
            v131 = (std::__shared_weak_count *)operator new();
            v132 = v131;
            v131->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v131->__shared_owners_;
            v131->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v131->__shared_weak_owners_ = 0;
            v131[1].__vftable = v130;
            object = v130;
            v168[0] = v130;
            v168[1] = v131;
            do
              v134 = __ldxr(p_shared_owners);
            while (__stxr(v134 + 1, p_shared_owners));
            v169 = 0uLL;
            v170[0] = 0;
            do
              v135 = __ldaxr(p_shared_owners);
            while (__stlxr(v135 - 1, p_shared_owners));
            if (!v135)
            {
              ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
              std::__shared_weak_count::__release_weak(v132);
            }
            v136 = object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v137 = (char *)operator new();
            v138 = *(unsigned __int8 *)(v29 + 39);
            if ((v138 & 0x80u) == 0)
              v139 = v30;
            else
              v139 = *(_QWORD *)(v29 + 16);
            if ((v138 & 0x80u) != 0)
              v138 = *(_QWORD *)(v29 + 24);
            *(_QWORD *)v137 = v136;
            *(_OWORD *)(v137 + 8) = *(_OWORD *)v168;
            v168[0] = 0;
            v168[1] = 0;
            *(_OWORD *)(v137 + 24) = v169;
            v169 = 0uLL;
            *((_QWORD *)v137 + 5) = v139;
            *((_QWORD *)v137 + 6) = v138;
            v137[56] = 2;
            v193 = 0;
            __p = v137;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v27 + 24) + 40))(*(_QWORD *)(v27 + 24), &__p);
            v140 = __p;
            __p = 0;
            if (v140)
            {
              v141 = (std::__shared_weak_count *)*((_QWORD *)v140 + 4);
              if (v141)
              {
                v142 = (unint64_t *)&v141->__shared_owners_;
                do
                  v143 = __ldaxr(v142);
                while (__stlxr(v143 - 1, v142));
                if (!v143)
                {
                  ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                  std::__shared_weak_count::__release_weak(v141);
                }
              }
              v144 = (std::__shared_weak_count *)*((_QWORD *)v140 + 2);
              if (v144)
              {
                v145 = (unint64_t *)&v144->__shared_owners_;
                do
                  v146 = __ldaxr(v145);
                while (__stlxr(v146 - 1, v145));
                if (!v146)
                {
                  ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                  std::__shared_weak_count::__release_weak(v144);
                }
              }
              MEMORY[0x212BC6398](v140, 0x10F0C40B62ED6C6);
              v147 = v193;
              v193 = 0;
              if (v147)
              {
                v148 = *(std::__shared_weak_count **)(v147 + 32);
                if (v148)
                {
                  v149 = (unint64_t *)&v148->__shared_owners_;
                  do
                    v150 = __ldaxr(v149);
                  while (__stlxr(v150 - 1, v149));
                  if (!v150)
                  {
                    ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                    std::__shared_weak_count::__release_weak(v148);
                  }
                }
                v151 = *(std::__shared_weak_count **)(v147 + 16);
                if (v151)
                {
                  v152 = (unint64_t *)&v151->__shared_owners_;
                  do
                    v153 = __ldaxr(v152);
                  while (__stlxr(v153 - 1, v152));
                  if (!v153)
                  {
                    ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                    std::__shared_weak_count::__release_weak(v151);
                  }
                }
                MEMORY[0x212BC6398](v147, 0x10F0C40B62ED6C6);
              }
            }
            v154 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
            if (*((_QWORD *)&v169 + 1))
            {
              v155 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
              do
                v156 = __ldaxr(v155);
              while (__stlxr(v156 - 1, v155));
              if (!v156)
              {
                ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                std::__shared_weak_count::__release_weak(v154);
              }
            }
            v157 = (std::__shared_weak_count *)v168[1];
            if (v168[1])
            {
              v158 = (unint64_t *)((char *)v168[1] + 8);
              do
                v159 = __ldaxr(v158);
              while (__stlxr(v159 - 1, v158));
              if (!v159)
              {
                ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                std::__shared_weak_count::__release_weak(v157);
              }
            }
          }
          else
          {
            os_log_type_enabled(v128, OS_LOG_TYPE_DEBUG);
            LOWORD(object) = 0;
            v160 = (void *)_os_log_send_and_compose_impl();
            if (v160)
              free(v160);
          }
          if (v25)
          {
            sub_20E8C003C((uint64_t)&v184, "Duplicate reference image ID, not added to vdb");
            sub_20E863570((uint64_t)&v184);
          }
          sub_20E863570((uint64_t)&v184);
          v161 = v191;
          if (v191)
          {
            v162 = (unint64_t *)&v191->__shared_owners_;
            do
              v163 = __ldaxr(v162);
            while (__stlxr(v163 - 1, v162));
            if (!v163)
            {
              ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
              std::__shared_weak_count::__release_weak(v161);
            }
          }
          return 1;
        }
      }
      memmove(v117, v115, v116);
      goto LABEL_165;
    }
  }
  v12 = *(_QWORD *)(a2 + 32);
  if (v12 < 5 || (v13 = *(_QWORD *)(a2 + 48), v13 <= 4))
  {
    sub_20EDD85B0(&v192);
    if (**(int **)(v192 + 56) > 2)
      return 2;
    v16 = *(unsigned __int8 *)(v192 + 72);
    v17 = sub_20E8C31DC(v192, "OSLogSurrogateAppender", 1, 0);
    v18 = v17;
    if (!v16 && v17 == 0)
      return 2;
    v184 = (char *)&v192;
    *(std::chrono::steady_clock::time_point *)&v185 = std::chrono::steady_clock::now();
    *((std::chrono::system_clock::time_point *)&v185 + 1) = std::chrono::system_clock::now();
    v186 = 2;
    v187 = "unknown file";
    v188 = 612;
    v190 = 0;
    v191 = 0;
    v189 = "unknown function";
    v20 = v192;
    v21 = v192 + 16;
    if (*(char *)(v192 + 39) < 0)
    {
      v23 = *(const char **)(v192 + 16);
      v22 = *(_QWORD *)(v192 + 24);
      v64 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v64 & 1) != 0)
        goto LABEL_64;
    }
    else
    {
      v22 = *(unsigned __int8 *)(v192 + 39);
      v23 = (const char *)(v192 + 16);
      v24 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v24 & 1) != 0)
        goto LABEL_64;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v169 && SHIBYTE(v168[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_64:
    if (byte_254A4A50F >= 0)
      v65 = (const char *)&xmmword_254A4A4F8;
    else
      v65 = (const char *)xmmword_254A4A4F8;
    if (byte_254A4A50F >= 0)
      v66 = byte_254A4A50F;
    else
      v66 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
    object = os_log_create(v65, v23);
    v67 = v168;
    if (v66 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v66 >= 0x17)
    {
      v68 = v18;
      v69 = v23;
      v70 = v20;
      v71 = v16;
      v72 = v21;
      v73 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v66 | 7) != 0x17)
        v73 = v66 | 7;
      v74 = v73 + 1;
      v67 = operator new(v73 + 1);
      v168[1] = (void *)v66;
      *(_QWORD *)&v169 = v74 | 0x8000000000000000;
      v168[0] = v67;
      v21 = v72;
      v16 = v71;
      v20 = v70;
      v23 = v69;
      v18 = v68;
    }
    else
    {
      BYTE7(v169) = v66;
      if (!v66)
      {
LABEL_78:
        *((_BYTE *)v67 + v66) = 0;
        BYTE8(v169) = 1;
        v75 = v170;
        if (v22 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v22 >= 0x17)
        {
          v76 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v22 | 7) != 0x17)
            v76 = v22 | 7;
          v77 = v76 + 1;
          v75 = operator new(v76 + 1);
          v170[1] = (void *)v22;
          v171 = v77 | 0x8000000000000000;
          v170[0] = v75;
        }
        else
        {
          HIBYTE(v171) = v22;
          if (!v22)
            goto LABEL_86;
        }
        memmove(v75, v23, v22);
LABEL_86:
        *((_BYTE *)v75 + v22) = 0;
        v172 = 1;
        v78 = object;
        if (SHIBYTE(v171) < 0)
          operator delete(v170[0]);
        if (BYTE8(v169) && SBYTE7(v169) < 0)
          operator delete(v168[0]);
        if (object)
          os_release(object);
        if (v18 && *(_QWORD *)(v18 + 24))
        {
          v79 = _os_log_pack_size();
          v80 = (std::__shared_weak_count_vtbl *)operator new(v79, (std::align_val_t)8uLL);
          v81 = (std::__shared_weak_count *)operator new();
          v82 = v81;
          v81->__shared_owners_ = 0;
          v83 = (unint64_t *)&v81->__shared_owners_;
          v81->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v81->__shared_weak_owners_ = 0;
          v81[1].__vftable = v80;
          object = v80;
          v168[0] = v80;
          v168[1] = v81;
          do
            v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
          v169 = 0uLL;
          v170[0] = 0;
          do
            v85 = __ldaxr(v83);
          while (__stlxr(v85 - 1, v83));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v82);
          }
          v86 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v87 = (char *)operator new();
          v88 = *(unsigned __int8 *)(v20 + 39);
          if ((v88 & 0x80u) == 0)
            v89 = v21;
          else
            v89 = *(_QWORD *)(v20 + 16);
          if ((v88 & 0x80u) != 0)
            v88 = *(_QWORD *)(v20 + 24);
          *(_QWORD *)v87 = v86;
          *(_OWORD *)(v87 + 8) = *(_OWORD *)v168;
          v168[0] = 0;
          v168[1] = 0;
          *(_OWORD *)(v87 + 24) = v169;
          v169 = 0uLL;
          *((_QWORD *)v87 + 5) = v89;
          *((_QWORD *)v87 + 6) = v88;
          v87[56] = 2;
          v193 = 0;
          __p = v87;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v18 + 24) + 40))(*(_QWORD *)(v18 + 24), &__p);
          v90 = __p;
          __p = 0;
          if (v90)
          {
            v91 = (std::__shared_weak_count *)*((_QWORD *)v90 + 4);
            if (v91)
            {
              v92 = (unint64_t *)&v91->__shared_owners_;
              do
                v93 = __ldaxr(v92);
              while (__stlxr(v93 - 1, v92));
              if (!v93)
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v91);
              }
            }
            v94 = (std::__shared_weak_count *)*((_QWORD *)v90 + 2);
            if (v94)
            {
              v95 = (unint64_t *)&v94->__shared_owners_;
              do
                v96 = __ldaxr(v95);
              while (__stlxr(v96 - 1, v95));
              if (!v96)
              {
                ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                std::__shared_weak_count::__release_weak(v94);
              }
            }
            MEMORY[0x212BC6398](v90, 0x10F0C40B62ED6C6);
            v97 = v193;
            v193 = 0;
            if (v97)
            {
              v98 = *(std::__shared_weak_count **)(v97 + 32);
              if (v98)
              {
                v99 = (unint64_t *)&v98->__shared_owners_;
                do
                  v100 = __ldaxr(v99);
                while (__stlxr(v100 - 1, v99));
                if (!v100)
                {
                  ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                  std::__shared_weak_count::__release_weak(v98);
                }
              }
              v101 = *(std::__shared_weak_count **)(v97 + 16);
              if (v101)
              {
                v102 = (unint64_t *)&v101->__shared_owners_;
                do
                  v103 = __ldaxr(v102);
                while (__stlxr(v103 - 1, v102));
                if (!v103)
                {
                  ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                  std::__shared_weak_count::__release_weak(v101);
                }
              }
              MEMORY[0x212BC6398](v97, 0x10F0C40B62ED6C6);
            }
          }
          v104 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
          if (*((_QWORD *)&v169 + 1))
          {
            v105 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
            do
              v106 = __ldaxr(v105);
            while (__stlxr(v106 - 1, v105));
            if (!v106)
            {
              ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
              std::__shared_weak_count::__release_weak(v104);
            }
          }
          v107 = (std::__shared_weak_count *)v168[1];
          if (v168[1])
          {
            v108 = (unint64_t *)((char *)v168[1] + 8);
            do
              v109 = __ldaxr(v108);
            while (__stlxr(v109 - 1, v108));
            if (!v109)
            {
              ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
              std::__shared_weak_count::__release_weak(v107);
            }
          }
        }
        else
        {
          os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG);
          LOWORD(object) = 0;
          v110 = (void *)_os_log_send_and_compose_impl();
          if (v110)
            free(v110);
        }
        if (v16)
        {
          sub_20E8C003C((uint64_t)&v184, "Invalid image, not added to vdb");
          sub_20E863570((uint64_t)&v184);
        }
        sub_20E863570((uint64_t)&v184);
        v111 = v191;
        if (v191)
        {
          v112 = (unint64_t *)&v191->__shared_owners_;
          do
            v113 = __ldaxr(v112);
          while (__stlxr(v113 - 1, v112));
          if (!v113)
          {
            ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
            std::__shared_weak_count::__release_weak(v111);
          }
        }
        return 2;
      }
    }
    memmove(v67, v65, v66);
    goto LABEL_78;
  }
  if (!a4[11] || (v14 = 2, a4[4] == v12) && a4[6] == v13 && a4[2] == 1)
  {
    object = &off_24CA06CB8;
    *(_OWORD *)v168 = 0u;
    v169 = 0u;
    *(_OWORD *)v170 = 0u;
    v171 = 0;
    *(_DWORD *)v173 = 1;
    v173[4] = 1;
    *(_OWORD *)&v173[8] = xmmword_2102DB6B0;
    *(_OWORD *)&v173[24] = xmmword_2102DB6C0;
    *(_QWORD *)&v173[40] = 1000;
    LOBYTE(v174[0]) = 1;
    *(_OWORD *)((char *)v174 + 4) = xmmword_2102DB6D0;
    *(_QWORD *)((char *)&v174[1] + 4) = 0x410000004141999ALL;
    *((_QWORD *)&v175 + 1) = 0x41F0000041200000;
    *(_QWORD *)&v175 = 5;
    v176 = vdupq_n_s64(1uLL);
    v177 = xmmword_2102DB6E0;
    LOWORD(v178) = 0;
    DWORD1(v178) = 1;
    WORD4(v178) = 1;
    *(_QWORD *)v179 = 36;
    *(_QWORD *)&v179[12] = 0x404000003F4CCCCDLL;
    *(_DWORD *)&v179[8] = 5;
    *(_DWORD *)&v179[20] = 1069547520;
    *(_QWORD *)&v179[24] = 20000;
    *(_WORD *)&v180[4] = 256;
    *(_DWORD *)v180 = 0;
    *(_OWORD *)&v180[8] = xmmword_2102DB6F0;
    *(_QWORD *)&v180[24] = 0x3F96E9DD3F5425F2;
    *(_DWORD *)v181 = 0;
    *(int64x2_t *)&v181[8] = vdupq_n_s64(0xAuLL);
    v183 = 0;
    v182 = 0uLL;
    sub_20EDD5CB8(a2, (uint64_t)&object, 1, *(_QWORD *)(a1 + 152), &__p);
    sub_20EDD5578((const void **)&__p, (uint64_t)a4, &v184);
    if (__p)
    {
      *(_QWORD *)&v166 = __p;
      operator delete(__p);
    }
    __p = v184;
    v166 = v185;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v185 - (_QWORD)v184) >> 4) >= 4)
    {
      v34 = (char **)(a1 + 112);
      v33 = *(char **)(a1 + 112);
      if (v33)
      {
        while (1)
        {
          while (1)
          {
            v35 = (char **)v33;
            v36 = *((_QWORD *)v33 + 4);
            if (v36 <= a3)
              break;
            v33 = *v35;
            v34 = v35;
            if (!*v35)
              goto LABEL_46;
          }
          if (v36 >= a3)
            break;
          v33 = v35[1];
          if (!v33)
          {
            v34 = v35 + 1;
            goto LABEL_46;
          }
        }
      }
      else
      {
        v35 = (char **)(a1 + 112);
LABEL_46:
        v37 = (char *)operator new(0x170uLL);
        *((_QWORD *)v37 + 4) = a3;
        *((_QWORD *)v37 + 5) = &off_24CA06CB8;
        v38 = *(_OWORD *)v168;
        *(_OWORD *)v168 = 0u;
        v39 = v169;
        v169 = 0u;
        *((_OWORD *)v37 + 3) = v38;
        *((_OWORD *)v37 + 4) = v39;
        v40 = *(_OWORD *)v170;
        *(_OWORD *)v170 = 0u;
        *((_OWORD *)v37 + 5) = v40;
        v41 = v171;
        v171 = 0;
        *((_QWORD *)v37 + 12) = v41;
        v37[104] = v172;
        v42 = *(_OWORD *)&v173[16];
        *((_OWORD *)v37 + 7) = *(_OWORD *)v173;
        *((_OWORD *)v37 + 8) = v42;
        v43 = *(_OWORD *)&v173[32];
        v44 = v174[0];
        v45 = v175;
        *((_OWORD *)v37 + 11) = v174[1];
        *((_OWORD *)v37 + 12) = v45;
        *((_OWORD *)v37 + 9) = v43;
        *((_OWORD *)v37 + 10) = v44;
        v46 = v176;
        v47 = v177;
        v48 = *(_OWORD *)v179;
        *((_OWORD *)v37 + 15) = v178;
        *((_OWORD *)v37 + 16) = v48;
        *((int64x2_t *)v37 + 13) = v46;
        *((_OWORD *)v37 + 14) = v47;
        v49 = *(_OWORD *)&v179[16];
        v50 = *(_OWORD *)v180;
        v51 = *(_OWORD *)&v180[16];
        v52 = *(_OWORD *)v181;
        *((_QWORD *)v37 + 42) = *(_QWORD *)&v181[16];
        *((_OWORD *)v37 + 19) = v51;
        *((_OWORD *)v37 + 20) = v52;
        *((_OWORD *)v37 + 17) = v49;
        *((_OWORD *)v37 + 18) = v50;
        *(_OWORD *)(v37 + 344) = v182;
        *((_QWORD *)v37 + 45) = v183;
        v183 = 0;
        v182 = 0u;
        *(_OWORD *)v37 = 0u;
        *((_QWORD *)v37 + 2) = v35;
        *v34 = v37;
        v53 = **(_QWORD **)(a1 + 104);
        if (v53)
        {
          *(_QWORD *)(a1 + 104) = v53;
          v37 = *v34;
        }
        sub_20E868578(*(uint64_t **)(a1 + 112), (uint64_t *)v37);
        ++*(_QWORD *)(a1 + 120);
      }
      v54 = *(char **)(a1 + 136);
      v55 = (char **)(a1 + 136);
      v56 = (char **)(a1 + 136);
      if (v54)
      {
        while (1)
        {
          while (1)
          {
            v56 = (char **)v54;
            v57 = *((_QWORD *)v54 + 4);
            if (v57 <= a3)
              break;
            v54 = *v56;
            v55 = v56;
            if (!*v56)
              goto LABEL_56;
          }
          if (v57 >= a3)
            break;
          v54 = v56[1];
          if (!v54)
          {
            v55 = v56 + 1;
            goto LABEL_56;
          }
        }
        v14 = 0;
        v15 = __p;
        if (!__p)
          goto LABEL_23;
      }
      else
      {
LABEL_56:
        v58 = (char *)operator new(0x40uLL);
        v184 = v58;
        *(_QWORD *)&v185 = a1 + 136;
        BYTE8(v185) = 0;
        *((_QWORD *)v58 + 5) = 0;
        *((_QWORD *)v58 + 4) = a3;
        *((_QWORD *)v58 + 6) = 0;
        *((_QWORD *)v58 + 7) = 0;
        v59 = __p;
        v60 = v166 - (_QWORD)__p;
        if ((void *)v166 != __p)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v60 >> 4) >= 0x555555555555556)
            sub_20E867F44();
          v61 = (char *)operator new(v166 - (_QWORD)__p);
          *((_QWORD *)v58 + 5) = v61;
          *((_QWORD *)v58 + 6) = v61;
          v62 = &v61[16 * (v60 >> 4)];
          *((_QWORD *)v58 + 7) = v62;
          memcpy(v61, v59, v60);
          *((_QWORD *)v58 + 6) = v62;
        }
        *(_QWORD *)v58 = 0;
        *((_QWORD *)v58 + 1) = 0;
        *((_QWORD *)v58 + 2) = v56;
        *v55 = v58;
        v63 = **(_QWORD **)(a1 + 128);
        if (v63)
        {
          *(_QWORD *)(a1 + 128) = v63;
          v58 = *v55;
        }
        sub_20E868578(*(uint64_t **)(a1 + 136), (uint64_t *)v58);
        v14 = 0;
        ++*(_QWORD *)(a1 + 144);
        v15 = __p;
        if (!__p)
          goto LABEL_23;
      }
    }
    else
    {
      v14 = 4;
      v15 = __p;
      if (!__p)
      {
LABEL_23:
        sub_20FD40A18(&object);
        return v14;
      }
    }
    *(_QWORD *)&v166 = v15;
    operator delete(v15);
    goto LABEL_23;
  }
  return v14;
}

void sub_20EDD9858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;

  if (a21)
  {
    if (a20 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v21 - 184);
  _Unwind_Resume(a1);
}

void sub_20EDD98A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)(v4 - 104));
  sub_20E86E658((uint64_t)va1);
  sub_20E863714(v4 - 184);
  _Unwind_Resume(a1);
}

void sub_20EDD993C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_20EDD9950(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_20EDD9964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *object, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;
  void **v23;
  uint64_t v24;
  void *v26;

  v26 = *v23;
  if (*v23)
  {
    *(_QWORD *)(v22 + 48) = v26;
    operator delete(v26);
  }
  sub_20EDDE7CC(v24 - 184);
  if (__p)
  {
    operator delete(__p);
    sub_20FD40A18(&object);
    _Unwind_Resume(a1);
  }
  sub_20FD40A18(&object);
  _Unwind_Resume(a1);
}

void sub_20EDD9A04(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_20EDD9A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *object, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;

  if (a22 && a21 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714(v22 - 184);
  _Unwind_Resume(a1);
}

void sub_20EDD9A60(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, double a5)
{
  uint64_t **v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  unint64_t v19;
  BOOL v20;
  uint64_t **v21;
  _QWORD *v22;
  unint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  int64_t v26;
  char *v27;
  char *v28;
  uint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t **v47;
  uint64_t **v48;
  uint64_t **v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t **v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  size_t v68;
  void *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char v74;
  unint64_t v75;
  _OWORD *v76;
  __int128 *v77;
  unint64_t v78;
  __int128 v79;
  char *v80;
  uint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  size_t v92;
  const char *v93;
  _QWORD *v94;
  uint64_t *v95;
  uint64_t **v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  unsigned __int8 v102;
  const char *v103;
  size_t v104;
  const char *v105;
  void **v106;
  uint64_t v107;
  uint64_t v108;
  void **v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  size_t v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count *v116;
  unint64_t *p_shared_owners;
  unint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  void *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  _QWORD *v150;
  uint64_t **v151;
  unint64_t v152;
  BOOL v153;
  _QWORD *v154;
  float *v155;
  uint64_t **v156;
  float v157;
  float **v158;
  float *v159;
  float **v160;
  float **v161;
  float v162;
  float *v163;
  float **v164;
  uint64_t *v165;
  uint64_t **v166;
  unint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t *v170;
  int v171;
  unint64_t v172;
  unint64_t v173;
  BOOL v174;
  uint64_t v175;
  size_t v176;
  const char *v177;
  uint64_t v178;
  uint64_t v179;
  int8x16_t *v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  int8x16_t v184;
  int8x16_t v185;
  int8x16_t v186;
  unsigned int v187;
  unint64_t v188;
  uint64_t i;
  unsigned int v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  unint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  _BYTE *v198;
  uint64_t v199;
  _BYTE *v200;
  uint64_t v201;
  _BYTE *v202;
  int v203;
  uint64_t v204;
  int v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  unint64_t v210;
  float *v211;
  float **v212;
  float *v213;
  float *v214;
  float *v215;
  unint64_t v216;
  float *v217;
  float **v218;
  float v219;
  float *v220;
  float *v221;
  float **v222;
  float *v223;
  float **v224;
  float *v225;
  uint64_t v226;
  float *v227;
  uint64_t v228;
  _BYTE *v229;
  int v230;
  uint64_t v231;
  int v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  float *v236;
  uint64_t v237;
  float *v238;
  float *v239;
  unint64_t v240;
  uint64_t v241;
  float **v242;
  _QWORD *v243;
  float *v244;
  float *v245;
  unsigned __int8 v246;
  const char *v247;
  size_t v248;
  const char *v249;
  void **v250;
  uint64_t v251;
  uint64_t v252;
  void **v253;
  uint64_t v254;
  uint64_t v255;
  NSObject *v256;
  size_t v257;
  std::__shared_weak_count_vtbl *v258;
  std::__shared_weak_count *v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  unint64_t v263;
  void *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  uint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  void *v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t **v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t **v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  uint64_t *v307;
  int v308;
  _QWORD *v309;
  uint64_t (**v310)();
  __int128 v311;
  __int128 v312;
  __int128 v313;
  uint64_t v314;
  char v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  uint64_t v330;
  __int128 v331;
  uint64_t v332;
  void *v333;
  void *v334;
  char *v335;
  void *v336;
  char *v337;
  char *v338;
  void *__p;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v341;
  int v342;
  const char *v343;
  int v344;
  const char *v345;
  uint64_t v346;
  std::__shared_weak_count *v347;
  uint64_t v348;
  float **v349;
  float *v350;
  float *v351;
  uint64_t v352;
  uint64_t v353;
  void *object[6];
  size_t v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  void *v359[4];
  __int128 v360;
  __int128 v361;
  __int128 v362;
  char v363;
  uint64_t v364;

  v9 = (uint64_t **)a1;
  v364 = *MEMORY[0x24BDAC8D0];
  v11 = a1 + 17;
  v10 = (_QWORD *)a1[17];
  if (!v10)
    goto LABEL_514;
  v12 = a1 + 17;
  do
  {
    v13 = v10[4];
    v14 = v13 >= (unint64_t)a4;
    if (v13 >= (unint64_t)a4)
      v15 = v10;
    else
      v15 = v10 + 1;
    if (v14)
      v12 = v10;
    v10 = (_QWORD *)*v15;
  }
  while (*v15);
  if (v12 == v11 || v12[4] > (unint64_t)a4)
  {
LABEL_514:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/PlanarObjectsDetector.cpp", 644, (uint64_t)"keypoints_.find(object_id) != keypoints_.end()", 46, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_494;
    }
  }
  v17 = v9 + 14;
  v16 = v9[14];
  if (!v16)
    goto LABEL_513;
  v18 = v9 + 14;
  do
  {
    v19 = v16[4];
    v20 = v19 >= (unint64_t)a4;
    if (v19 >= (unint64_t)a4)
      v21 = (uint64_t **)v16;
    else
      v21 = (uint64_t **)(v16 + 1);
    if (v20)
      v18 = (uint64_t **)v16;
    v16 = *v21;
  }
  while (*v21);
  if (v18 == v17 || v18[4] > a4)
  {
LABEL_513:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/PlanarObjectsDetector.cpp", 645, (uint64_t)"feature_generators_.find(object_id) != feature_generators_.end()", 64, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
LABEL_494:
      abort();
    }
  }
  v22 = (_QWORD *)*v11;
  if (!*v11)
LABEL_31:
    sub_20E89FD20("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v23 = v22[4];
      if (v23 <= (unint64_t)a4)
        break;
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_31;
    }
    if (v23 >= (unint64_t)a4)
      break;
    v22 = (_QWORD *)v22[1];
    if (!v22)
      goto LABEL_31;
  }
  v333 = 0;
  v334 = 0;
  v335 = 0;
  v25 = (_BYTE *)v22[5];
  v24 = (_BYTE *)v22[6];
  v26 = v24 - v25;
  if (v24 != v25)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v26 >> 4) >= 0x555555555555556)
      sub_20E867F44();
    v27 = (char *)operator new(v26);
    v28 = &v27[16 * (v26 >> 4)];
    v333 = v27;
    v335 = v28;
    memcpy(v27, v25, v26);
    v334 = v28;
  }
  v29 = *v17;
  if (!*v17)
LABEL_41:
    sub_20E89FD20("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v30 = v29[4];
      if (v30 <= (unint64_t)a4)
        break;
      v29 = (uint64_t *)*v29;
      if (!v29)
        goto LABEL_41;
    }
    if (v30 >= (unint64_t)a4)
      break;
    v29 = (uint64_t *)v29[1];
    if (!v29)
      goto LABEL_41;
  }
  v31 = *((_OWORD *)v29 + 4);
  v311 = *((_OWORD *)v29 + 3);
  *((_OWORD *)v29 + 3) = 0u;
  *((_OWORD *)v29 + 4) = 0u;
  v312 = v31;
  v32 = *((_OWORD *)v29 + 5);
  *((_OWORD *)v29 + 5) = 0u;
  v313 = v32;
  v33 = v29[12];
  v29[12] = 0;
  v34 = *((_BYTE *)v29 + 104);
  v35 = *((_OWORD *)v29 + 18);
  v36 = *((_OWORD *)v29 + 20);
  v328 = *((_OWORD *)v29 + 19);
  v329 = v36;
  v37 = *((_OWORD *)v29 + 10);
  v320 = *((_OWORD *)v29 + 11);
  v319 = v37;
  v38 = *((_OWORD *)v29 + 14);
  v324 = *((_OWORD *)v29 + 15);
  v323 = v38;
  v39 = *((_OWORD *)v29 + 7);
  v318 = *((_OWORD *)v29 + 9);
  v40 = *((_OWORD *)v29 + 12);
  v322 = *((_OWORD *)v29 + 13);
  v321 = v40;
  v41 = *((_OWORD *)v29 + 16);
  v326 = *((_OWORD *)v29 + 17);
  v310 = &off_24CA06CB8;
  v314 = v33;
  v315 = v34;
  v325 = v41;
  v330 = v29[42];
  v327 = v35;
  v317 = *((_OWORD *)v29 + 8);
  v316 = v39;
  v331 = *(_OWORD *)(v29 + 43);
  v332 = v29[45];
  v29[45] = 0;
  *(_OWORD *)(v29 + 43) = 0u;
  memset(object, 0, sizeof(object));
  LOBYTE(v355) = 1;
  v356 = 0u;
  v357 = 0u;
  v358 = 0u;
  memset(v359, 0, 26);
  v360 = 0u;
  v361 = 0u;
  v362 = 0u;
  v363 = 0;
  sub_20FD427A0((uint64_t)&v310, &v333, (uint64_t)object);
  v42 = operator new();
  *(_QWORD *)(v42 + 96) = 0;
  *(_QWORD *)(v42 + 104) = 0;
  *(_OWORD *)(v42 + 16) = 0u;
  *(_OWORD *)(v42 + 32) = 0u;
  *(_OWORD *)(v42 + 48) = 0u;
  *(_OWORD *)(v42 + 64) = 0u;
  *(_QWORD *)(v42 + 112) = 0;
  *(_QWORD *)(v42 + 120) = &off_24C9E9888;
  *(_DWORD *)(v42 + 128) = 1234;
  *(_OWORD *)(v42 + 168) = 0u;
  *(_OWORD *)(v42 + 184) = 0u;
  *(_QWORD *)(v42 + 200) = v42 + 200;
  *(_QWORD *)(v42 + 208) = v42 + 200;
  *(_QWORD *)(v42 + 216) = 0;
  *(_QWORD *)(v42 + 224) = 0;
  *(_QWORD *)(v42 + 232) = 0;
  *(_QWORD *)(v42 + 240) = 68;
  *(_QWORD *)(v42 + 224) = v42 + 200;
  *(_OWORD *)(v42 + 136) = xmmword_210378590;
  *(_OWORD *)(v42 + 152) = xmmword_2103785A0;
  *(_QWORD *)(v42 + 80) = 0;
  *(_QWORD *)(v42 + 88) = 8;
  __p = 0;
  rep = 0;
  v341 = 0;
  if (v363)
  {
    v43 = v358 - *((_QWORD *)&v357 + 1);
    if ((_QWORD)v358 == *((_QWORD *)&v357 + 1))
      goto LABEL_52;
    if (v43 != (_QWORD)v362 - *((_QWORD *)&v361 + 1))
      goto LABEL_52;
    v44 = (uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 5;
    if (v44 != v43 >> 6)
      goto LABEL_52;
  }
  else if (*((_QWORD *)&v361 + 1) != (_QWORD)v362
         || (v44 = (uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 5, v44 != (uint64_t)(v358 - *((_QWORD *)&v357 + 1)) >> 6))
  {
LABEL_52:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v44 = (uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 5;
    LODWORD(v349) = 0;
    if (v44)
      goto LABEL_54;
    goto LABEL_55;
  }
  if (object[2] > (void *)v44)
    goto LABEL_52;
  LODWORD(v349) = 0;
  if (v44)
LABEL_54:
    sub_20EDDCBD0((uint64_t)&__p, v44, (const float *)&v349);
LABEL_55:
  sub_20F4263C4(v42, (__int128 *)object, (char **)&__p, a2, a3, 1, 0.0);
  if (__p)
  {
    rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)__p;
    operator delete(__p);
  }
  if (*((_QWORD *)&v361 + 1))
  {
    *(_QWORD *)&v362 = *((_QWORD *)&v361 + 1);
    operator delete(*((void **)&v361 + 1));
  }
  if (v359[0])
  {
    v359[1] = v359[0];
    operator delete(v359[0]);
  }
  if (*((_QWORD *)&v357 + 1))
  {
    *(_QWORD *)&v358 = *((_QWORD *)&v357 + 1);
    operator delete(*((void **)&v357 + 1));
  }
  if ((_QWORD)v356)
  {
    *((_QWORD *)&v356 + 1) = v356;
    operator delete((void *)v356);
  }
  v45 = v42;
  v309 = (_QWORD *)v42;
  v47 = v9 + 2;
  v46 = v9[2];
  v48 = v9 + 2;
  v49 = v9 + 2;
  if (v46)
  {
    while (1)
    {
      while (1)
      {
        v49 = (uint64_t **)v46;
        v50 = v46[4];
        if (v50 <= (unint64_t)a4)
          break;
        v46 = *v49;
        v48 = v49;
        if (!*v49)
          goto LABEL_72;
      }
      if (v50 >= (unint64_t)a4)
        break;
      v46 = v49[1];
      if (!v46)
      {
        v48 = v49 + 1;
        goto LABEL_72;
      }
    }
  }
  else
  {
LABEL_72:
    v51 = (uint64_t *)operator new(0x30uLL);
    v309 = 0;
    v51[4] = (uint64_t)a4;
    v51[5] = v45;
    *v51 = 0;
    v51[1] = 0;
    v51[2] = (uint64_t)v49;
    *v48 = v51;
    v52 = (uint64_t *)*v9[1];
    if (v52)
    {
      v9[1] = v52;
      v51 = *v48;
    }
    sub_20E868578(v9[2], v51);
    v9[3] = (uint64_t *)((char *)v9[3] + 1);
  }
  if (!*v9 || !(*v9)[12])
    goto LABEL_133;
  v336 = 0;
  v337 = 0;
  v338 = 0;
  v53 = v9 + 2;
  v54 = *v47;
  if (*v47)
  {
    while (1)
    {
      while (1)
      {
        v53 = (uint64_t **)v54;
        v55 = v54[4];
        if (v55 <= (unint64_t)a4)
          break;
        v54 = *v53;
        v47 = v53;
        if (!*v53)
          goto LABEL_84;
      }
      if (v55 >= (unint64_t)a4)
        break;
      v54 = v53[1];
      if (!v54)
      {
        v47 = v53 + 1;
        goto LABEL_84;
      }
    }
    v59 = v53[5][3];
    v60 = *(char **)(v59 + 80);
    v306 = *(char **)(v59 + 88);
    if (v306 != v60)
      goto LABEL_87;
LABEL_131:
    v85 = (char *)v336;
    if (!v336)
      goto LABEL_133;
    goto LABEL_132;
  }
LABEL_84:
  v56 = (uint64_t *)operator new(0x30uLL);
  v56[4] = (uint64_t)a4;
  v56[5] = 0;
  *v56 = 0;
  v56[1] = 0;
  v56[2] = (uint64_t)v53;
  *v47 = v56;
  v57 = (uint64_t *)*v9[1];
  v58 = v56;
  if (v57)
  {
    v9[1] = v57;
    v58 = *v47;
  }
  sub_20E868578(v9[2], v58);
  v9[3] = (uint64_t *)((char *)v9[3] + 1);
  v59 = *(_QWORD *)(v56[5] + 24);
  v60 = *(char **)(v59 + 80);
  v306 = *(char **)(v59 + 88);
  if (v306 == v60)
    goto LABEL_131;
LABEL_87:
  v302 = v9;
  v303 = v59;
  v301 = a2;
  v61 = v337;
  do
  {
    v62 = 0;
    v63 = v60;
    do
    {
      while (v61 < v338)
      {
        *v61++ = *v63;
        v337 = v61;
        v63 = &v60[++v62];
        if (v62 == 64)
          goto LABEL_88;
      }
      v64 = (unint64_t)v336;
      v65 = v61 - (_BYTE *)v336;
      v66 = v61 - (_BYTE *)v336 + 1;
      if (v66 < 0)
        sub_20E867F44();
      v67 = v338 - (_BYTE *)v336;
      if (2 * (v338 - (_BYTE *)v336) > (unint64_t)v66)
        v66 = 2 * v67;
      if (v67 >= 0x3FFFFFFFFFFFFFFFLL)
        v68 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v68 = v66;
      if (v68)
      {
        v69 = operator new(v68);
        v70 = (char *)v69 + v65;
        *((_BYTE *)v69 + v65) = *v63;
        v71 = (uint64_t)v69 + v65 + 1;
        if (v61 == (char *)v64)
          goto LABEL_107;
      }
      else
      {
        v69 = 0;
        v70 = (char *)(v61 - (_BYTE *)v336);
        *(_BYTE *)v65 = *v63;
        v71 = v65 + 1;
        if (v61 == (char *)v64)
        {
LABEL_107:
          v336 = v70;
          v338 = (char *)v69 + v68;
          if (!v61)
            goto LABEL_109;
LABEL_108:
          operator delete(v61);
          goto LABEL_109;
        }
      }
      if (v65 < 8
        || (char *)v69 + v65 - 1 - &v61[~v64] > (unint64_t)v69 + v65 - 1
        || v64 > (unint64_t)(v61 - 1)
        || v64 - (unint64_t)v69 < 0x20)
      {
        v72 = v61;
        goto LABEL_102;
      }
      if (v65 >= 0x20)
      {
        v75 = v65 & 0xFFFFFFFFFFFFFFE0;
        v76 = (char *)v69 + v65 - 16;
        v77 = (__int128 *)(v61 - 16);
        v78 = v65 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v79 = *v77;
          *(v76 - 1) = *(v77 - 1);
          *v76 = v79;
          v76 -= 2;
          v77 -= 2;
          v78 -= 32;
        }
        while (v78);
        if (v65 == v75)
          goto LABEL_104;
        if ((v65 & 0x18) == 0)
        {
          v70 -= v75;
          v72 = &v61[-v75];
LABEL_102:
          v73 = v70 - 1;
          do
          {
            v74 = *--v72;
            *v73-- = v74;
          }
          while (v72 != (char *)v64);
          goto LABEL_104;
        }
      }
      else
      {
        v75 = 0;
      }
      v72 = &v61[-(v65 & 0xFFFFFFFFFFFFFFF8)];
      v70 -= v65 & 0xFFFFFFFFFFFFFFF8;
      v80 = &v61[-v75 - v64 - 8 + (_QWORD)v69];
      v81 = (uint64_t *)&v61[-v75 - 8];
      v82 = v75 - (v65 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v83 = *v81--;
        *(_QWORD *)v80 = v83;
        v80 -= 8;
        v82 += 8;
      }
      while (v82);
      if (v65 != (v65 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_102;
LABEL_104:
      v61 = (char *)v336;
      v336 = v69;
      v338 = (char *)v69 + v68;
      if (v61)
        goto LABEL_108;
LABEL_109:
      v61 = (char *)v71;
      v337 = (char *)v71;
      v63 = &v60[++v62];
    }
    while (v62 != 64);
LABEL_88:
    v60 += 64;
  }
  while (v60 != v306);
  v84 = *v9;
  v85 = (char *)v336;
  v87 = *(_QWORD *)(v303 + 80);
  v86 = *(_QWORD *)(v303 + 88);
  v351 = 0;
  v350 = 0;
  v349 = &v350;
  sub_20EDDCE30(&v348);
  v304 = (v86 - v87) >> 6;
  v307 = v84;
  if (**(int **)(v348 + 56) > 2)
    goto LABEL_232;
  v88 = *(unsigned __int8 *)(v348 + 72);
  v89 = sub_20E8C31DC(v348, "OSLogSurrogateAppender", 1, 0);
  v90 = v89;
  if (!v88 && !v89)
    goto LABEL_232;
  v297 = v87;
  __p = &v348;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v341 = std::chrono::system_clock::now().__d_.__rep_;
  v342 = 2;
  v343 = "unknown file";
  v344 = 612;
  v347 = 0;
  v345 = "unknown function";
  v346 = 0;
  v91 = *(_QWORD *)__p;
  v295 = *(_QWORD *)__p;
  if (*(char *)(*(_QWORD *)__p + 39) < 0)
  {
    v93 = *(const char **)(v91 + 16);
    v92 = *(_QWORD *)(v91 + 24);
  }
  else
  {
    v92 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
    v93 = (const char *)(*(_QWORD *)__p + 16);
  }
  v298 = v90;
  v294 = *(_QWORD *)__p + 16;
  v102 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  v296 = v88;
  if ((v102 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A50F >= 0)
    v103 = (const char *)&xmmword_254A4A4F8;
  else
    v103 = (const char *)xmmword_254A4A4F8;
  if (byte_254A4A50F >= 0)
    v104 = byte_254A4A50F;
  else
    v104 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
  v105 = v93;
  object[0] = os_log_create(v103, v93);
  v106 = &object[1];
  if (v104 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v104 >= 0x17)
  {
    v107 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v104 | 7) != 0x17)
      v107 = v104 | 7;
    v108 = v107 + 1;
    v106 = (void **)operator new(v107 + 1);
    object[3] = (void *)(v108 | 0x8000000000000000);
    object[1] = v106;
    object[2] = (void *)v104;
    goto LABEL_164;
  }
  HIBYTE(object[3]) = v104;
  if (v104)
LABEL_164:
    memmove(v106, v103, v104);
  *((_BYTE *)v106 + v104) = 0;
  LOBYTE(object[4]) = 1;
  v109 = &object[5];
  if (v92 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  a2 = v301;
  v9 = v302;
  if (v92 >= 0x17)
  {
    v110 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v92 | 7) != 0x17)
      v110 = v92 | 7;
    v111 = v110 + 1;
    v109 = (void **)operator new(v110 + 1);
    *(_QWORD *)&v356 = v111 | 0x8000000000000000;
    object[5] = v109;
    v355 = v92;
    goto LABEL_172;
  }
  BYTE7(v356) = v92;
  if (v92)
LABEL_172:
    memmove(v109, v105, v92);
  *((_BYTE *)v109 + v92) = 0;
  BYTE8(v356) = 1;
  v112 = object[0];
  if (SBYTE7(v356) < 0)
    operator delete(object[5]);
  v84 = v307;
  if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
    operator delete(object[1]);
  if (object[0])
    os_release(object[0]);
  if (v298 && *(_QWORD *)(v298 + 24))
  {
    v113 = _os_log_pack_size();
    v114 = (std::__shared_weak_count_vtbl *)operator new(v113, (std::align_val_t)8uLL);
    v115 = (std::__shared_weak_count *)operator new();
    v116 = v115;
    v115->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v115->__shared_owners_;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v114;
    object[0] = v114;
    object[1] = v114;
    object[2] = v115;
    do
      v118 = __ldxr(p_shared_owners);
    while (__stxr(v118 + 1, p_shared_owners));
    memset(&object[3], 0, 24);
    do
      v119 = __ldaxr(p_shared_owners);
    while (__stlxr(v119 - 1, p_shared_owners));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v116);
    }
    v120 = object[0];
    v121 = _os_log_pack_fill();
    *(_DWORD *)v121 = 134218240;
    *(_QWORD *)(v121 + 4) = a4;
    *(_WORD *)(v121 + 12) = 2048;
    *(_QWORD *)(v121 + 14) = v304;
    v122 = operator new();
    v123 = *(unsigned __int8 *)(v295 + 39);
    v124 = v294;
    if ((v123 & 0x80u) != 0)
    {
      v124 = *(_QWORD *)(v295 + 16);
      v123 = *(_QWORD *)(v295 + 24);
    }
    *(_QWORD *)v122 = v120;
    *(_OWORD *)(v122 + 8) = *(_OWORD *)&object[1];
    object[1] = 0;
    object[2] = 0;
    *(_OWORD *)(v122 + 24) = *(_OWORD *)&object[3];
    object[3] = 0;
    object[4] = 0;
    *(_QWORD *)(v122 + 40) = v124;
    *(_QWORD *)(v122 + 48) = v123;
    *(_BYTE *)(v122 + 56) = 2;
    v352 = 0;
    v353 = v122;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v298 + 24) + 40))(*(_QWORD *)(v298 + 24), &v353);
    v125 = v353;
    v353 = 0;
    v84 = v307;
    v126 = v296;
    if (v125)
    {
      v127 = *(std::__shared_weak_count **)(v125 + 32);
      if (v127)
      {
        v128 = (unint64_t *)&v127->__shared_owners_;
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
      }
      v130 = *(std::__shared_weak_count **)(v125 + 16);
      if (v130)
      {
        v131 = (unint64_t *)&v130->__shared_owners_;
        do
          v132 = __ldaxr(v131);
        while (__stlxr(v132 - 1, v131));
        if (!v132)
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
        }
      }
      MEMORY[0x212BC6398](v125, 0x10F0C40B62ED6C6);
      v133 = v352;
      v352 = 0;
      if (v133)
      {
        v134 = *(std::__shared_weak_count **)(v133 + 32);
        if (v134)
        {
          v135 = (unint64_t *)&v134->__shared_owners_;
          do
            v136 = __ldaxr(v135);
          while (__stlxr(v136 - 1, v135));
          if (!v136)
          {
            ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
            std::__shared_weak_count::__release_weak(v134);
          }
        }
        v137 = *(std::__shared_weak_count **)(v133 + 16);
        if (v137)
        {
          v138 = (unint64_t *)&v137->__shared_owners_;
          do
            v139 = __ldaxr(v138);
          while (__stlxr(v139 - 1, v138));
          if (!v139)
          {
            ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
            std::__shared_weak_count::__release_weak(v137);
          }
        }
        MEMORY[0x212BC6398](v133, 0x10F0C40B62ED6C6);
      }
    }
    v140 = (std::__shared_weak_count *)object[4];
    v87 = v297;
    if (object[4])
    {
      v141 = (unint64_t *)((char *)object[4] + 8);
      do
        v142 = __ldaxr(v141);
      while (__stlxr(v142 - 1, v141));
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
        std::__shared_weak_count::__release_weak(v140);
      }
    }
    v143 = (std::__shared_weak_count *)object[2];
    if (object[2])
    {
      v144 = (unint64_t *)((char *)object[2] + 8);
      do
        v145 = __ldaxr(v144);
      while (__stlxr(v145 - 1, v144));
      if (!v145)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
    }
  }
  else
  {
    os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG);
    LODWORD(object[0]) = 134218240;
    *(void **)((char *)object + 4) = a4;
    WORD2(object[1]) = 2048;
    *(void **)((char *)&object[1] + 6) = (void *)v304;
    v146 = (void *)_os_log_send_and_compose_impl();
    v87 = v297;
    v126 = v296;
    if (v146)
      free(v146);
  }
  if (v126)
  {
    sub_20E8C003C((uint64_t)&__p, "Insert image id %zu with %zu features", (size_t)a4, v304);
    sub_20E863570((uint64_t)&__p);
  }
  sub_20E863570((uint64_t)&__p);
  v147 = v347;
  if (v347)
  {
    v148 = (unint64_t *)&v347->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
LABEL_232:
  v150 = (_QWORD *)v84[10];
  v299 = (uint64_t **)(v84 + 10);
  if (v150)
  {
    v151 = (uint64_t **)(v84 + 10);
    do
    {
      v152 = v150[4];
      v153 = v152 >= (unint64_t)a4;
      if (v152 >= (unint64_t)a4)
        v154 = v150;
      else
        v154 = v150 + 1;
      if (v153)
        v151 = (uint64_t **)v150;
      v150 = (_QWORD *)*v154;
    }
    while (*v154);
    if (v151 != v299 && v151[4] <= a4)
    {
      sub_20EDDCE30(&v348);
      if (**(int **)(v348 + 56) > 2)
        goto LABEL_491;
      v171 = *(unsigned __int8 *)(v348 + 72);
      v172 = sub_20E8C31DC(v348, "OSLogSurrogateAppender", 1, 0);
      v173 = v172;
      v174 = !v171 && v172 == 0;
      if (v174)
        goto LABEL_491;
      v308 = v171;
      __p = &v348;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v341 = std::chrono::system_clock::now().__d_.__rep_;
      v342 = 2;
      v343 = "unknown file";
      v344 = 621;
      v347 = 0;
      v345 = "unknown function";
      v346 = 0;
      v175 = *(_QWORD *)__p;
      v300 = *(_QWORD *)__p;
      if (*(char *)(*(_QWORD *)__p + 39) < 0)
      {
        v177 = *(const char **)(v175 + 16);
        v176 = *(_QWORD *)(v175 + 24);
      }
      else
      {
        v176 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
        v177 = (const char *)(*(_QWORD *)__p + 16);
      }
      v305 = *(_QWORD *)__p + 16;
      v246 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v246 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
          operator delete(object[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A50F >= 0)
        v247 = (const char *)&xmmword_254A4A4F8;
      else
        v247 = (const char *)xmmword_254A4A4F8;
      if (byte_254A4A50F >= 0)
        v248 = byte_254A4A50F;
      else
        v248 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
      v249 = v177;
      object[0] = os_log_create(v247, v177);
      v250 = &object[1];
      if (v248 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v248 >= 0x17)
      {
        v251 = (v248 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v248 | 7) != 0x17)
          v251 = v248 | 7;
        v252 = v251 + 1;
        v250 = (void **)operator new(v251 + 1);
        object[3] = (void *)(v252 | 0x8000000000000000);
        object[1] = v250;
        object[2] = (void *)v248;
      }
      else
      {
        HIBYTE(object[3]) = v248;
        if (!v248)
        {
LABEL_424:
          *((_BYTE *)v250 + v248) = 0;
          LOBYTE(object[4]) = 1;
          v253 = &object[5];
          if (v176 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          a2 = v301;
          v9 = v302;
          if (v176 >= 0x17)
          {
            v254 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v176 | 7) != 0x17)
              v254 = v176 | 7;
            v255 = v254 + 1;
            v253 = (void **)operator new(v254 + 1);
            *(_QWORD *)&v356 = v255 | 0x8000000000000000;
            object[5] = v253;
            v355 = v176;
          }
          else
          {
            BYTE7(v356) = v176;
            if (!v176)
              goto LABEL_432;
          }
          memmove(v253, v249, v176);
LABEL_432:
          *((_BYTE *)v253 + v176) = 0;
          BYTE8(v356) = 1;
          v256 = object[0];
          if (SBYTE7(v356) < 0)
            operator delete(object[5]);
          if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
            operator delete(object[1]);
          if (object[0])
            os_release(object[0]);
          if (v173 && *(_QWORD *)(v173 + 24))
          {
            v257 = _os_log_pack_size();
            v258 = (std::__shared_weak_count_vtbl *)operator new(v257, (std::align_val_t)8uLL);
            v259 = (std::__shared_weak_count *)operator new();
            v260 = v259;
            v259->__shared_owners_ = 0;
            v261 = (unint64_t *)&v259->__shared_owners_;
            v259->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v259->__shared_weak_owners_ = 0;
            v259[1].__vftable = v258;
            object[0] = v258;
            object[1] = v258;
            object[2] = v259;
            do
              v262 = __ldxr(v261);
            while (__stxr(v262 + 1, v261));
            memset(&object[3], 0, 24);
            do
              v263 = __ldaxr(v261);
            while (__stlxr(v263 - 1, v261));
            if (!v263)
            {
              ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
              std::__shared_weak_count::__release_weak(v260);
            }
            v264 = object[0];
            v265 = _os_log_pack_fill();
            *(_DWORD *)v265 = 134217984;
            *(_QWORD *)(v265 + 4) = a4;
            v266 = operator new();
            v267 = *(unsigned __int8 *)(v300 + 39);
            v268 = v305;
            if ((v267 & 0x80u) != 0)
            {
              v268 = *(_QWORD *)(v300 + 16);
              v267 = *(_QWORD *)(v300 + 24);
            }
            *(_QWORD *)v266 = v264;
            *(_OWORD *)(v266 + 8) = *(_OWORD *)&object[1];
            object[1] = 0;
            object[2] = 0;
            *(_OWORD *)(v266 + 24) = *(_OWORD *)&object[3];
            object[3] = 0;
            object[4] = 0;
            *(_QWORD *)(v266 + 40) = v268;
            *(_QWORD *)(v266 + 48) = v267;
            *(_BYTE *)(v266 + 56) = 2;
            v352 = 0;
            v353 = v266;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v173 + 24) + 40))(*(_QWORD *)(v173 + 24), &v353);
            v269 = v353;
            v353 = 0;
            v270 = v308;
            if (v269)
            {
              v271 = *(std::__shared_weak_count **)(v269 + 32);
              if (v271)
              {
                v272 = (unint64_t *)&v271->__shared_owners_;
                do
                  v273 = __ldaxr(v272);
                while (__stlxr(v273 - 1, v272));
                if (!v273)
                {
                  ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
                  std::__shared_weak_count::__release_weak(v271);
                }
              }
              v274 = *(std::__shared_weak_count **)(v269 + 16);
              if (v274)
              {
                v275 = (unint64_t *)&v274->__shared_owners_;
                do
                  v276 = __ldaxr(v275);
                while (__stlxr(v276 - 1, v275));
                if (!v276)
                {
                  ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
                  std::__shared_weak_count::__release_weak(v274);
                }
              }
              MEMORY[0x212BC6398](v269, 0x10F0C40B62ED6C6);
              v277 = v352;
              v352 = 0;
              if (v277)
              {
                v278 = *(std::__shared_weak_count **)(v277 + 32);
                if (v278)
                {
                  v279 = (unint64_t *)&v278->__shared_owners_;
                  do
                    v280 = __ldaxr(v279);
                  while (__stlxr(v280 - 1, v279));
                  if (!v280)
                  {
                    ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
                    std::__shared_weak_count::__release_weak(v278);
                  }
                }
                v281 = *(std::__shared_weak_count **)(v277 + 16);
                if (v281)
                {
                  v282 = (unint64_t *)&v281->__shared_owners_;
                  do
                    v283 = __ldaxr(v282);
                  while (__stlxr(v283 - 1, v282));
                  if (!v283)
                  {
                    ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
                    std::__shared_weak_count::__release_weak(v281);
                  }
                }
                MEMORY[0x212BC6398](v277, 0x10F0C40B62ED6C6);
              }
            }
            v284 = (std::__shared_weak_count *)object[4];
            if (object[4])
            {
              v285 = (unint64_t *)((char *)object[4] + 8);
              do
                v286 = __ldaxr(v285);
              while (__stlxr(v286 - 1, v285));
              if (!v286)
              {
                ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
                std::__shared_weak_count::__release_weak(v284);
              }
            }
            v287 = (std::__shared_weak_count *)object[2];
            if (object[2])
            {
              v288 = (unint64_t *)((char *)object[2] + 8);
              do
                v289 = __ldaxr(v288);
              while (__stlxr(v289 - 1, v288));
              if (!v289)
              {
                ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
                std::__shared_weak_count::__release_weak(v287);
              }
            }
          }
          else
          {
            os_log_type_enabled(v256, OS_LOG_TYPE_DEBUG);
            LODWORD(object[0]) = 134217984;
            *(void **)((char *)object + 4) = a4;
            v290 = (void *)_os_log_send_and_compose_impl();
            v270 = v308;
            if (v290)
              free(v290);
          }
          if (v270)
          {
            sub_20E8C003C((uint64_t)&__p, "Unable to insert image id %zu because it already exists", (size_t)a4);
            sub_20E863570((uint64_t)&__p);
          }
          sub_20E863570((uint64_t)&__p);
          v291 = v347;
          if (v347)
          {
            v292 = (unint64_t *)&v347->__shared_owners_;
            do
              v293 = __ldaxr(v292);
            while (__stlxr(v293 - 1, v292));
            if (!v293)
            {
              ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
              std::__shared_weak_count::__release_weak(v291);
            }
          }
LABEL_491:
          sub_20E86872C((uint64_t)&v349, v350);
          if (v85)
            goto LABEL_132;
          goto LABEL_133;
        }
      }
      memmove(v250, v247, v248);
      goto LABEL_424;
    }
  }
  if (v86 != v87 && !*(_BYTE *)(v307[12] + 60))
  {
    v178 = 0;
    while (1)
    {
      v179 = v307[12];
      if (!*(_BYTE *)(v179 + 60))
        break;
LABEL_281:
      if (++v178 == v304)
        goto LABEL_245;
    }
    v180 = (int8x16_t *)&v85[64 * v178];
    while (1)
    {
      v181 = *(uint64_t **)(v179 + 32);
      v182 = *(_QWORD *)(v179 + 40) - (_QWORD)v181;
      if ((unint64_t)v182 < 9)
        break;
      v183 = 0;
      v184 = v180[1];
      v185 = v180[2];
      v186 = v180[3];
      v187 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(*v181 + 61), *v180)), vcntq_s8(veorq_s8(*(int8x16_t *)(*v181 + 77), v184))), vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(*v181 + 93), v185)), vcntq_s8(veorq_s8(*(int8x16_t *)(*v181 + 109), v186)))));
      v188 = v182 >> 3;
      if (v188 <= 2)
        v188 = 2;
      for (i = 1; i != v188; ++i)
      {
        v190 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(v181[i] + 77), v184)), vcntq_s8(veorq_s8(*(int8x16_t *)(v181[i] + 61), *v180))), vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(v181[i] + 93), v185)), vcntq_s8(veorq_s8(*(int8x16_t *)(v181[i] + 109), v186)))));
        if (v190 < v187)
        {
          v183 = i;
          v187 = v190;
        }
      }
      v179 = v181[v183];
      v192 = (_QWORD *)(v179 + 16);
      v191 = *(_QWORD **)(v179 + 16);
      v193 = (_QWORD *)(v179 + 16);
      v194 = (_QWORD *)(v179 + 16);
      if (!v191)
        goto LABEL_302;
      while (1)
      {
LABEL_298:
        while (1)
        {
          v194 = v191;
          v195 = v191[4];
          if (v195 <= (unint64_t)a4)
            break;
          v191 = (_QWORD *)*v194;
          v193 = v194;
          if (!*v194)
            goto LABEL_302;
        }
        if (v195 >= (unint64_t)a4)
          break;
        v191 = (_QWORD *)v194[1];
        if (!v191)
        {
          v193 = v194 + 1;
          goto LABEL_302;
        }
      }
LABEL_327:
      v210 = *(unsigned int *)(v179 + 56);
      v211 = v350;
      if (v350)
      {
        v212 = &v350;
        v213 = v350;
        do
        {
          v214 = v213;
          v215 = (float *)v212;
          v216 = *((_QWORD *)v213 + 4);
          if (v216 >= v210)
            v212 = (float **)v213;
          else
            v213 += 2;
          v213 = *(float **)v213;
        }
        while (v213);
        if (v212 != &v350)
        {
          v217 = v216 >= v210 ? v214 : v215;
          if (*((_QWORD *)v217 + 4) <= v210)
          {
            if (v216 < v210)
              v214 = v215;
            v214[10] = *(float *)v179 + v214[10];
            goto LABEL_285;
          }
        }
      }
      v218 = v349;
      v219 = *(float *)v179;
      v220 = (float *)operator new(0x30uLL);
      *((_QWORD *)v220 + 4) = v210;
      v220[10] = v219;
      if (&v350 == v218 || (v221 = v218[4], (unint64_t)v221 > v210))
      {
        if (!*v218)
        {
          v222 = v218;
LABEL_349:
          *(_QWORD *)v220 = 0;
          *((_QWORD *)v220 + 1) = 0;
          *((_QWORD *)v220 + 2) = v218;
          *v222 = v220;
          if (*v349)
          {
            v349 = (float **)*v349;
            v220 = *v222;
          }
          v225 = v350;
          v174 = v220 == v350;
          *((_BYTE *)v220 + 24) = v220 == v350;
          if (!v174)
          {
            do
            {
              v226 = *((_QWORD *)v220 + 2);
              if (*(_BYTE *)(v226 + 24))
                break;
              v227 = *(float **)(v226 + 16);
              v228 = *(_QWORD *)v227;
              if (*(_QWORD *)v227 == v226)
              {
                v231 = *((_QWORD *)v227 + 1);
                if (!v231 || (v232 = *(unsigned __int8 *)(v231 + 24), v229 = (_BYTE *)(v231 + 24), v232))
                {
                  if (*(float **)v226 == v220)
                  {
                    *(_BYTE *)(v226 + 24) = 1;
                    *((_BYTE *)v227 + 24) = 0;
                    v235 = *(_QWORD *)(v226 + 8);
                    *(_QWORD *)v227 = v235;
                    if (v235)
                      goto LABEL_366;
                  }
                  else
                  {
                    v233 = *(uint64_t **)(v226 + 8);
                    v234 = *v233;
                    *(_QWORD *)(v226 + 8) = *v233;
                    if (v234)
                    {
                      *(_QWORD *)(v234 + 16) = v226;
                      v227 = *(float **)(v226 + 16);
                    }
                    v233[2] = (uint64_t)v227;
                    *(_QWORD *)(*(_QWORD *)(v226 + 16) + 8 * (**(_QWORD **)(v226 + 16) != v226)) = v233;
                    *v233 = v226;
                    *(_QWORD *)(v226 + 16) = v233;
                    v227 = (float *)v233[2];
                    v226 = *(_QWORD *)v227;
                    *((_BYTE *)v233 + 24) = 1;
                    *((_BYTE *)v227 + 24) = 0;
                    v235 = *(_QWORD *)(v226 + 8);
                    *(_QWORD *)v227 = v235;
                    if (v235)
LABEL_366:
                      *(_QWORD *)(v235 + 16) = v227;
                  }
                  *(_QWORD *)(v226 + 16) = *((_QWORD *)v227 + 2);
                  *(_QWORD *)(*((_QWORD *)v227 + 2) + 8 * (**((_QWORD **)v227 + 2) != (_QWORD)v227)) = v226;
                  *(_QWORD *)(v226 + 8) = v227;
LABEL_375:
                  *((_QWORD *)v227 + 2) = v226;
                  break;
                }
              }
              else if (!v228 || (v230 = *(unsigned __int8 *)(v228 + 24), v229 = (_BYTE *)(v228 + 24), v230))
              {
                if (*(float **)v226 == v220)
                {
                  v241 = *((_QWORD *)v220 + 1);
                  *(_QWORD *)v226 = v241;
                  if (v241)
                  {
                    *(_QWORD *)(v241 + 16) = v226;
                    v227 = *(float **)(v226 + 16);
                  }
                  *((_QWORD *)v220 + 2) = v227;
                  *(_QWORD *)(*(_QWORD *)(v226 + 16) + 8 * (**(_QWORD **)(v226 + 16) != v226)) = v220;
                  *((_QWORD *)v220 + 1) = v226;
                  *(_QWORD *)(v226 + 16) = v220;
                  v227 = (float *)*((_QWORD *)v220 + 2);
                  *((_BYTE *)v220 + 24) = 1;
                  *((_BYTE *)v227 + 24) = 0;
                  v226 = *((_QWORD *)v227 + 1);
                  v236 = *(float **)v226;
                  *((_QWORD *)v227 + 1) = *(_QWORD *)v226;
                  if (v236)
LABEL_373:
                    *((_QWORD *)v236 + 2) = v227;
                }
                else
                {
                  *(_BYTE *)(v226 + 24) = 1;
                  *((_BYTE *)v227 + 24) = 0;
                  v226 = *((_QWORD *)v227 + 1);
                  v236 = *(float **)v226;
                  *((_QWORD *)v227 + 1) = *(_QWORD *)v226;
                  if (v236)
                    goto LABEL_373;
                }
                *(_QWORD *)(v226 + 16) = *((_QWORD *)v227 + 2);
                *(_QWORD *)(*((_QWORD *)v227 + 2) + 8 * (**((_QWORD **)v227 + 2) != (_QWORD)v227)) = v226;
                *(_QWORD *)v226 = v227;
                goto LABEL_375;
              }
              *(_BYTE *)(v226 + 24) = 1;
              v220 = v227;
              *((_BYTE *)v227 + 24) = v227 == v225;
              *v229 = 1;
            }
            while (v227 != v225);
          }
          v351 = (float *)((char *)v351 + 1);
          goto LABEL_285;
        }
        v222 = v218 + 1;
        goto LABEL_342;
      }
      if ((unint64_t)v221 < v210)
      {
        v222 = v218 + 1;
        v223 = v218[1];
        if (v223)
        {
          do
          {
            v222 = (float **)v223;
            v223 = *(float **)v223;
            v218 = v222;
            v224 = v222;
          }
          while (v223);
        }
        else
        {
          v224 = v218;
          do
          {
            v238 = (float *)v224;
            v224 = (float **)v224[2];
          }
          while (*v224 != v238);
        }
        if (v224 != &v350)
        {
          v239 = v224[4];
          if ((unint64_t)v239 <= v210)
          {
            v218 = &v350;
            v222 = &v350;
          }
          if (v211 && (unint64_t)v239 <= v210)
          {
            v222 = &v350;
            while (1)
            {
              while (1)
              {
                v218 = (float **)v211;
                v240 = *((_QWORD *)v211 + 4);
                if (v240 <= v210)
                  break;
                v211 = *(float **)v211;
                v222 = v218;
                if (!*v218)
                  goto LABEL_349;
              }
              if (v240 >= v210)
                break;
              v222 = (float **)(v211 + 2);
              v211 = (float *)*((_QWORD *)v211 + 1);
              if (!v211)
                goto LABEL_349;
            }
          }
        }
LABEL_342:
        if (!*v222)
          goto LABEL_349;
      }
      operator delete(v220);
LABEL_285:
      if (*(_BYTE *)(v179 + 60))
        goto LABEL_281;
    }
    v179 = *v181;
    v192 = (_QWORD *)(*v181 + 16);
    v191 = (_QWORD *)*v192;
    v193 = v192;
    v194 = v192;
    if (*v192)
      goto LABEL_298;
LABEL_302:
    v196 = operator new(0x28uLL);
    v196[4] = a4;
    *v196 = 0;
    v196[1] = 0;
    v196[2] = v194;
    *v193 = v196;
    v197 = **(_QWORD **)(v179 + 8);
    if (v197)
    {
      *(_QWORD *)(v179 + 8) = v197;
      v196 = (_QWORD *)*v193;
    }
    v198 = (_BYTE *)*v192;
    v174 = v196 == (_QWORD *)*v192;
    *((_BYTE *)v196 + 24) = v174;
    if (!v174)
    {
      do
      {
        v199 = v196[2];
        if (*(_BYTE *)(v199 + 24))
          break;
        v200 = *(_BYTE **)(v199 + 16);
        v201 = *(_QWORD *)v200;
        if (*(_QWORD *)v200 == v199)
        {
          v204 = *((_QWORD *)v200 + 1);
          if (!v204 || (v205 = *(unsigned __int8 *)(v204 + 24), v202 = (_BYTE *)(v204 + 24), v205))
          {
            if (*(_QWORD **)v199 == v196)
            {
              *(_BYTE *)(v199 + 24) = 1;
              v200[24] = 0;
              v208 = *(_QWORD *)(v199 + 8);
              *(_QWORD *)v200 = v208;
              if (v208)
                goto LABEL_319;
            }
            else
            {
              v206 = *(uint64_t **)(v199 + 8);
              v207 = *v206;
              *(_QWORD *)(v199 + 8) = *v206;
              if (v207)
              {
                *(_QWORD *)(v207 + 16) = v199;
                v200 = *(_BYTE **)(v199 + 16);
              }
              v206[2] = (uint64_t)v200;
              *(_QWORD *)(*(_QWORD *)(v199 + 16) + 8 * (**(_QWORD **)(v199 + 16) != v199)) = v206;
              *v206 = v199;
              *(_QWORD *)(v199 + 16) = v206;
              v200 = (_BYTE *)v206[2];
              v199 = *(_QWORD *)v200;
              *((_BYTE *)v206 + 24) = 1;
              v200[24] = 0;
              v208 = *(_QWORD *)(v199 + 8);
              *(_QWORD *)v200 = v208;
              if (v208)
LABEL_319:
                *(_QWORD *)(v208 + 16) = v200;
            }
            *(_QWORD *)(v199 + 16) = *((_QWORD *)v200 + 2);
            *(_QWORD *)(*((_QWORD *)v200 + 2) + 8 * (**((_QWORD **)v200 + 2) != (_QWORD)v200)) = v199;
            *(_QWORD *)(v199 + 8) = v200;
LABEL_325:
            *((_QWORD *)v200 + 2) = v199;
            break;
          }
        }
        else if (!v201 || (v203 = *(unsigned __int8 *)(v201 + 24), v202 = (_BYTE *)(v201 + 24), v203))
        {
          if (*(_QWORD **)v199 == v196)
          {
            v237 = v196[1];
            *(_QWORD *)v199 = v237;
            if (v237)
            {
              *(_QWORD *)(v237 + 16) = v199;
              v200 = *(_BYTE **)(v199 + 16);
            }
            v196[2] = v200;
            *(_QWORD *)(*(_QWORD *)(v199 + 16) + 8 * (**(_QWORD **)(v199 + 16) != v199)) = v196;
            v196[1] = v199;
            *(_QWORD *)(v199 + 16) = v196;
            v200 = (_BYTE *)v196[2];
            *((_BYTE *)v196 + 24) = 1;
            v200[24] = 0;
            v199 = *((_QWORD *)v200 + 1);
            v209 = *(_QWORD **)v199;
            *((_QWORD *)v200 + 1) = *(_QWORD *)v199;
            if (v209)
LABEL_323:
              v209[2] = v200;
          }
          else
          {
            *(_BYTE *)(v199 + 24) = 1;
            v200[24] = 0;
            v199 = *((_QWORD *)v200 + 1);
            v209 = *(_QWORD **)v199;
            *((_QWORD *)v200 + 1) = *(_QWORD *)v199;
            if (v209)
              goto LABEL_323;
          }
          *(_QWORD *)(v199 + 16) = *((_QWORD *)v200 + 2);
          *(_QWORD *)(*((_QWORD *)v200 + 2) + 8 * (**((_QWORD **)v200 + 2) != (_QWORD)v200)) = v199;
          *(_QWORD *)v199 = v200;
          goto LABEL_325;
        }
        *(_BYTE *)(v199 + 24) = 1;
        v196 = v200;
        v200[24] = v200 == v198;
        *v202 = 1;
      }
      while (v200 != v198);
    }
    ++*(_QWORD *)(v179 + 24);
    goto LABEL_327;
  }
LABEL_245:
  v155 = (float *)v349;
  v156 = (uint64_t **)(v84 + 10);
  a2 = v301;
  if (v349 != &v350)
  {
    v157 = 0.0;
    v158 = v349;
    do
    {
      v159 = v158[1];
      v160 = v158;
      if (v159)
      {
        do
        {
          v161 = (float **)v159;
          v159 = *(float **)v159;
        }
        while (v159);
      }
      else
      {
        do
        {
          v161 = (float **)v160[2];
          v174 = *v161 == (float *)v160;
          v160 = v161;
        }
        while (!v174);
      }
      v157 = v157 + *((float *)v158 + 10);
      v158 = v161;
    }
    while (v161 != &v350);
    if (v157 > 0.0)
    {
      v162 = 1.0 / v157;
      do
      {
        v155[10] = v162 * v155[10];
        v163 = (float *)*((_QWORD *)v155 + 1);
        if (v163)
        {
          do
          {
            v164 = (float **)v163;
            v163 = *(float **)v163;
          }
          while (v163);
        }
        else
        {
          do
          {
            v164 = (float **)*((_QWORD *)v155 + 2);
            v174 = *v164 == v155;
            v155 = (float *)v164;
          }
          while (!v174);
        }
        v155 = (float *)v164;
      }
      while (v164 != &v350);
    }
  }
  v165 = *v299;
  v166 = (uint64_t **)(v84 + 10);
  v9 = v302;
  if (*v299)
  {
    while (1)
    {
      while (1)
      {
        v166 = (uint64_t **)v165;
        v167 = v165[4];
        if (v167 <= (unint64_t)a4)
          break;
        v165 = *v166;
        v156 = v166;
        if (!*v166)
          goto LABEL_270;
      }
      if (v167 >= (unint64_t)a4)
        break;
      v165 = v166[1];
      if (!v165)
      {
        v156 = v166 + 1;
        goto LABEL_270;
      }
    }
    v168 = (uint64_t *)v166;
  }
  else
  {
LABEL_270:
    v168 = (uint64_t *)operator new(0x40uLL);
    v168[7] = 0;
    v168[6] = 0;
    v168[4] = (uint64_t)a4;
    v168[5] = (uint64_t)(v168 + 6);
    *v168 = 0;
    v168[1] = 0;
    v168[2] = (uint64_t)v166;
    *v156 = v168;
    v169 = *(_QWORD *)v307[9];
    v170 = v168;
    if (v169)
    {
      v307[9] = v169;
      v170 = *v156;
    }
    sub_20E868578((uint64_t *)v307[10], v170);
    ++v307[11];
  }
  v243 = (_QWORD *)v168[6];
  v242 = (float **)(v168 + 6);
  sub_20E86872C((uint64_t)(v242 - 1), v243);
  v244 = v350;
  *(v242 - 1) = (float *)v349;
  *v242 = v244;
  v245 = v351;
  v242[1] = v351;
  if (v245)
  {
    *((_QWORD *)v244 + 2) = v242;
    v349 = &v350;
    v350 = 0;
    v351 = 0;
    sub_20E86872C((uint64_t)&v349, 0);
    if (!v85)
      goto LABEL_133;
LABEL_132:
    operator delete(v85);
    goto LABEL_133;
  }
  *(v242 - 1) = (float *)v242;
  sub_20E86872C((uint64_t)&v349, v244);
  if (v85)
    goto LABEL_132;
LABEL_133:
  if (v309)
  {
    v94 = sub_20EDB6628(v309);
    MEMORY[0x212BC6398](v94, 0x10B0C404CA194E4);
  }
  v96 = v9 + 11;
  v95 = v9[11];
  if (v95)
  {
    while (1)
    {
      while (1)
      {
        v97 = (uint64_t)v95;
        v98 = v95[4];
        if (v98 <= (unint64_t)a4)
          break;
        v95 = *(uint64_t **)v97;
        v96 = (uint64_t **)v97;
        if (!*(_QWORD *)v97)
          goto LABEL_142;
      }
      if (v98 >= (unint64_t)a4)
        break;
      v95 = *(uint64_t **)(v97 + 8);
      if (!v95)
      {
        v96 = (uint64_t **)(v97 + 8);
        goto LABEL_142;
      }
    }
    *(double *)(v97 + 40) = a5 / (double)(unint64_t)a2;
  }
  else
  {
    v97 = (uint64_t)(v9 + 11);
LABEL_142:
    v99 = (uint64_t *)operator new(0x30uLL);
    v99[4] = (uint64_t)a4;
    v99[5] = 0;
    *v99 = 0;
    v99[1] = 0;
    v99[2] = v97;
    *v96 = v99;
    v100 = (uint64_t *)*v9[10];
    v101 = v99;
    if (v100)
    {
      v9[10] = v100;
      v101 = *v96;
    }
    sub_20E868578(v9[11], v101);
    v9[12] = (uint64_t *)((char *)v9[12] + 1);
    *((double *)v99 + 5) = a5 / (double)(unint64_t)a2;
  }
  sub_20FD40A18(&v310);
  if (v333)
  {
    v334 = v333;
    operator delete(v333);
  }
}

void sub_20EDDBAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21,_QWORD *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a65;
  uint64_t a68;
  void *a70;
  void *v70;

  if (LOBYTE(STACK[0x278]) && SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a70);
  sub_20E86872C((uint64_t)&STACK[0x238], (_QWORD *)STACK[0x240]);
  if (v70)
  {
    a68 = (uint64_t)v70;
    operator delete(v70);
  }
  sub_20EDB4DEC(&a21);
  sub_20EDB4DEC(&a22);
  sub_20FD40A18(&a23);
  if (a64)
  {
    a65 = (uint64_t)a64;
    operator delete(a64);
  }
  _Unwind_Resume(a1);
}

void sub_20EDDBCF8(uint64_t a1@<X0>, double *a2@<X1>, double *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  double *v19;
  int64x2_t *v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t *v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  unint64_t *v52;
  int64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  char *v61;
  uint64_t v62;
  __int128 v63;
  int64x2_t v64;
  uint64_t v65;
  double *v66;
  uint64_t v67;
  float64x2_t *v68;
  int64x2_t v69;
  char *v70;
  char *v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  uint64_t v77;
  float *v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  int v83;
  char v84;
  void *v85;
  _QWORD *v86;
  __int128 v87;
  __int128 v88;
  unint64_t *v89;
  unint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  unint64_t *v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  char *v102;
  __int128 *v103;
  uint64_t v104;
  __int128 v105;
  unint64_t v106;
  unint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  _OWORD *v113;
  char *v114;
  char *v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  char *v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  void *v127;
  char *v128;
  void *v129;
  char *v130;
  char *v131;
  void *v132;
  float64x2_t v134;
  double v138;
  _QWORD *v139;
  int64x2_t *v140;
  int64x2_t v141;
  float64x2_t v142;
  uint64_t *v143;
  uint64_t *v144;
  unint64_t v145;
  __int128 v146;
  unint64_t *v147;
  char *v148;
  char *v149;
  void *v150;
  char *v151;
  __int128 v152;
  __int128 v153;
  void *v154[2];
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  void *v168;
  void *v169;
  uint64_t v170;
  _BYTE __p[33];
  __int128 v172;
  __int128 v173;
  _BYTE v174[31];
  void *v175;
  char *v176;
  char *v177;
  void *v178;
  char *v179;
  double *v180;
  void *v181;
  uint64_t v182;
  char *v183;
  void *v184;
  unint64_t *v185;
  void *v186;
  unint64_t *v187;
  void *v188;
  _QWORD *v189;
  _QWORD *v190;
  char *v191;
  char *v192;
  char *v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  _OWORD v198[2];
  uint64_t v199;

  v199 = *MEMORY[0x24BDAC8D0];
  sub_20F426E8C(a1, a2, (uint64_t **)&v150);
  v4 = v150;
  if (v151 == v150)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v128 = (char *)v150;
    if (!v150)
      return;
    goto LABEL_142;
  }
  v5 = 0x14C1BACF914C1BADLL * ((v151 - (_BYTE *)v150) >> 3);
  if (v5 >> 61)
    sub_20E867F44();
  v6 = (unint64_t *)operator new(0xA60DD67C8A60DD68 * ((v151 - (_BYTE *)v150) >> 3));
  v7 = 0;
  v147 = v6;
  v148 = (char *)v6;
  v149 = (char *)&v6[v5];
  __asm { FMOV            V0.2D, #0.5 }
  v134 = _Q0;
  v13 = a1;
  v14 = v4;
  while (2)
  {
    v16 = *(_QWORD **)(v13 + 16);
    if (!v16)
LABEL_150:
      sub_20E89FD20("map::at:  key not found");
    v17 = v14[37 * v7];
    while (1)
    {
      while (1)
      {
        v18 = v16[4];
        if (v17 >= v18)
          break;
        v16 = (_QWORD *)*v16;
        if (!v16)
          goto LABEL_150;
      }
      if (v18 >= v17)
        break;
      v16 = (_QWORD *)v16[1];
      if (!v16)
        goto LABEL_150;
    }
    v19 = *(double **)(v13 + 88);
    if (!v19)
LABEL_151:
      sub_20E89FD20("map::at:  key not found");
    v20 = (int64x2_t *)v16[5];
    while (1)
    {
      while (1)
      {
        v21 = *((_QWORD *)v19 + 4);
        if (v17 >= v21)
          break;
        v19 = *(double **)v19;
        if (!v19)
          goto LABEL_151;
      }
      if (v21 >= v17)
        break;
      v19 = (double *)*((_QWORD *)v19 + 1);
      if (!v19)
        goto LABEL_151;
    }
    v22 = (char *)&v14[37 * v7];
    v25 = (_QWORD *)*((_QWORD *)v22 + 3);
    v23 = (uint64_t *)(v22 + 24);
    v24 = v25;
    v26 = (_QWORD *)v23[1];
    v27 = 0xAAAAAAAAAAAAAAABLL * (v26 - v25);
    if (v27 < 3)
      goto LABEL_6;
    v143 = v23 + 1;
    v144 = v23;
    v139 = v14;
    v145 = v7;
    v138 = v19[5];
    v28 = *((_QWORD *)a2 + 3);
    v191 = 0;
    v192 = 0;
    v193 = 0;
    if (v27 >> 61)
      sub_20E867F44();
    v29 = (char *)operator new(8 * v27);
    v191 = v29;
    v193 = &v29[8 * v27];
    bzero(v29, 8 * v27);
    v192 = &v29[8 * v27];
    if (v24 == v26)
    {
      v189 = 0;
      v188 = 0;
      v190 = 0;
    }
    else
    {
      v30 = v20[1].i64[1];
      v31 = v24;
      do
      {
        *(_QWORD *)v29 = *(_QWORD *)(*(_QWORD *)(v30 + 56) + 32 * v31[1]);
        v29 += 8;
        v31 += 3;
      }
      while (v31 != v26);
      v32 = operator new(8 * v27);
      v188 = v32;
      v190 = &v32[v27];
      bzero(v32, 8 * v27);
      v189 = &v32[v27];
      v33 = *(_QWORD *)(v28 + 56);
      do
      {
        v34 = *v24;
        v24 += 3;
        *v32++ = *(_QWORD *)(v33 + 32 * v34);
      }
      while (v24 != v26);
    }
    sub_20EDD5A4C((int64x2_t **)&v186, (uint64_t *)&v191);
    v140 = v20;
    sub_20EDD5A4C((int64x2_t **)&v184, (uint64_t *)&v188);
    v182 = 0;
    v181 = 0;
    v183 = 0;
    v35 = v187;
    v36 = (unint64_t *)v186;
    v37 = v185;
    v38 = (unint64_t *)v184;
    if (((char *)v185 - (_BYTE *)v184) >> 3 >= (unint64_t)(((char *)v187 - (_BYTE *)v186) >> 3))
      v39 = ((char *)v187 - (_BYTE *)v186) >> 3;
    else
      v39 = ((char *)v185 - (_BYTE *)v184) >> 3;
    if (v39)
    {
      if (v39 >> 61)
        sub_20E867F44();
      v40 = (char *)operator new(8 * v39);
      v181 = v40;
      v182 = (uint64_t)v40;
      v183 = &v40[8 * v39];
      if (v36 == v35)
      {
LABEL_39:
        v41 = v40;
        goto LABEL_76;
      }
    }
    else
    {
      v40 = 0;
      if (v186 == v187)
        goto LABEL_39;
    }
    if (v38 == v37)
      goto LABEL_39;
    do
    {
      v42 = *v36;
      if (*v36 < *v38)
      {
        if (++v36 == v35)
          break;
        continue;
      }
      if (*v38 >= v42)
      {
        if (v40 < v183)
        {
          *(_QWORD *)v40 = v42;
          v43 = (uint64_t)(v40 + 8);
LABEL_62:
          v182 = v43;
          ++v36;
          v40 = (char *)v43;
          goto LABEL_63;
        }
        v44 = (char *)v181;
        v45 = v40 - (_BYTE *)v181;
        v46 = (v40 - (_BYTE *)v181) >> 3;
        v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 61)
          sub_20E867F44();
        v48 = v183 - (_BYTE *)v181;
        if ((v183 - (_BYTE *)v181) >> 2 > v47)
          v47 = v48 >> 2;
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
          v49 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v49 = v47;
        if (v49)
        {
          if (v49 >> 61)
            sub_20E877A38();
          v50 = v49;
          v51 = operator new(8 * v49);
          v49 = v50;
          v52 = (unint64_t *)&v51[8 * v46];
          *v52 = v42;
          v43 = (uint64_t)(v52 + 1);
          v53 = v40 - v44;
          if (v40 == v44)
            goto LABEL_60;
        }
        else
        {
          v51 = 0;
          v52 = (unint64_t *)(8 * v46);
          *(_QWORD *)(8 * v46) = v42;
          v43 = 8 * v46 + 8;
          v53 = v40 - v44;
          if (v40 == v44)
            goto LABEL_60;
        }
        v54 = v53 - 8;
        if (v54 >= 0x168)
        {
          v57 = (v40 - 8 - v44) & 0xFFFFFFFFFFFFFFF8;
          if (&v51[v45 - 8 - v57] > &v51[v45 - 8])
          {
            v55 = v40;
          }
          else if (&v40[-v57 - 8] > v40 - 8)
          {
            v55 = v40;
          }
          else if ((unint64_t)(v40 - &v51[v45]) >= 0x20)
          {
            v58 = (v54 >> 3) + 1;
            v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
            v55 = &v40[-v59];
            v52 = (unint64_t *)((char *)v52 - v59);
            v60 = &v51[8 * v46 - 16];
            v61 = v40 - 16;
            v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v63 = *(_OWORD *)v61;
              *(v60 - 1) = *((_OWORD *)v61 - 1);
              *v60 = v63;
              v60 -= 2;
              v61 -= 32;
              v62 -= 4;
            }
            while (v62);
            if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_60:
              v181 = v52;
              v182 = v43;
              v183 = &v51[8 * v49];
              if (v44)
                operator delete(v44);
              goto LABEL_62;
            }
          }
          else
          {
            v55 = v40;
          }
        }
        else
        {
          v55 = v40;
        }
        do
        {
          v56 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *--v52 = v56;
        }
        while (v55 != v44);
        goto LABEL_60;
      }
LABEL_63:
      ++v38;
      if (v36 == v35)
        break;
    }
    while (v38 != v37);
    v41 = (char *)v181;
LABEL_76:
    v64 = *v140;
    v179 = 0;
    v178 = 0;
    v180 = 0;
    v65 = v40 - v41;
    if (v40 == v41)
    {
      v176 = 0;
      v175 = 0;
      v177 = 0;
      v76 = *a3;
    }
    else
    {
      v141 = v64;
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFDLL)
        sub_20E867F44();
      v66 = (double *)operator new(2 * v65);
      v67 = v65 >> 3;
      v178 = v66;
      v180 = &v66[v65 >> 2];
      bzero(v66, 2 * v65);
      v179 = (char *)v66 + 2 * v65;
      v176 = 0;
      v175 = 0;
      v177 = 0;
      if ((unint64_t)(3 * (v65 >> 3)) >> 61)
        sub_20E867F44();
      v68 = (float64x2_t *)operator new(24 * v67);
      v69.i64[0] = -1;
      v69.i64[1] = -1;
      v142 = vmulq_f64(vcvtq_f64_u64((uint64x2_t)vaddq_s64(v141, v69)), v134);
      v175 = v68;
      v177 = (char *)v68 + 24 * v67;
      bzero(v68, 24 * v67);
      v176 = (char *)v68 + 24 * v67;
      v70 = v191;
      v71 = (char *)v188;
      v73 = a3[4];
      v72 = a3[5];
      v75 = a3[1];
      v74 = a3[2];
      v76 = *a3;
      do
      {
        v77 = *(_QWORD *)v41;
        v41 += 8;
        *v68 = vmulq_n_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)&v70[8 * v77]), v142), v138);
        v68[1].f64[0] = 0.0;
        v78 = (float *)&v71[8 * v77];
        v79 = (v78[1] - v72) / v73;
        *v66 = (*v78 - v74 - v75 * v79) / v76;
        v66[1] = v79;
        v66 += 2;
        v68 = (float64x2_t *)((char *)v68 + 24);
      }
      while (v41 != v40);
    }
    v80 = *v143;
    v81 = *v144;
    v82 = operator new(8uLL);
    *(_QWORD *)__p = v82;
    *v82 = 4;
    *(_QWORD *)&__p[8] = v82 + 1;
    *(_QWORD *)&__p[16] = v82 + 1;
    sub_20EDC7538((uint64_t)&v152, 200, 5000, (0xAAAAAAAAAAAAAAABLL * ((v80 - v81) >> 3)) >> 1, (uint64_t)__p, 0, 30.0, v76);
    if (*(_QWORD *)__p)
    {
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      operator delete(*(void **)__p);
    }
    v168 = 0;
    v169 = 0;
    v170 = 0;
    v83 = sub_20EB63308((uint64_t)&v152, &v178, (uint64_t *)&v175, (uint64_t)__p, (char **)&v168, 0, 0);
    if (!v83)
    {
      v84 = 0;
      v85 = v168;
      if (!v168)
        goto LABEL_90;
LABEL_89:
      v169 = v85;
      operator delete(v85);
      goto LABEL_90;
    }
    v84 = __p[0];
    v196 = v172;
    v197 = v173;
    v198[0] = *(_OWORD *)v174;
    *(_OWORD *)((char *)v198 + 15) = *(_OWORD *)&v174[15];
    v194 = *(_OWORD *)&__p[1];
    v195 = *(_OWORD *)&__p[17];
    v85 = v168;
    if (v168)
      goto LABEL_89;
LABEL_90:
    if (v154[0])
    {
      v154[1] = v154[0];
      operator delete(v154[0]);
    }
    if (v175)
    {
      v176 = (char *)v175;
      operator delete(v175);
    }
    if (v178)
    {
      v179 = (char *)v178;
      operator delete(v178);
    }
    if (v181)
    {
      v182 = (uint64_t)v181;
      operator delete(v181);
    }
    if (v184)
    {
      v185 = (unint64_t *)v184;
      operator delete(v184);
    }
    if (v186)
    {
      v187 = (unint64_t *)v186;
      operator delete(v186);
    }
    if (v188)
    {
      v189 = v188;
      operator delete(v188);
    }
    if (v191)
    {
      v192 = v191;
      operator delete(v191);
    }
    v13 = a1;
    v7 = v145;
    if (!v83)
      goto LABEL_6;
    v86 = &v139[37 * v145];
    *((_BYTE *)v86 + 200) = v84;
    v86 += 25;
    v87 = v195;
    *(_OWORD *)((char *)v86 + 1) = v194;
    v88 = v197;
    *(_OWORD *)((char *)v86 + 33) = v196;
    *(_OWORD *)((char *)v86 + 49) = v88;
    *(_OWORD *)((char *)v86 + 65) = v198[0];
    *((_OWORD *)v86 + 5) = *(_OWORD *)((char *)v198 + 15);
    *(_OWORD *)((char *)v86 + 17) = v87;
    v89 = (unint64_t *)v148;
    if (v148 < v149)
    {
      *(_QWORD *)v148 = v145;
      v15 = (uint64_t)(v148 + 8);
      goto LABEL_5;
    }
    v90 = v147;
    v91 = (v148 - (char *)v147) >> 3;
    v92 = v91 + 1;
    if ((unint64_t)(v91 + 1) >> 61)
      sub_20E867F44();
    v93 = v149 - (char *)v147;
    if ((v149 - (char *)v147) >> 2 > v92)
      v92 = v93 >> 2;
    if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
      v94 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v94 = v92;
    if (!v94)
    {
      v95 = 0;
      v96 = (unint64_t *)(8 * v91);
      *(_QWORD *)(8 * v91) = v145;
      v15 = 8 * v91 + 8;
      v97 = (char *)(v148 - (char *)v147);
      if (v148 == (char *)v147)
        goto LABEL_125;
LABEL_119:
      v98 = (unint64_t)(v97 - 8);
      if (v98 < 0x58)
        goto LABEL_164;
      if ((unint64_t)((char *)v147 - v95) < 0x20)
        goto LABEL_164;
      v99 = (v98 >> 3) + 1;
      v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
      v101 = (unint64_t *)&v148[-v100];
      v96 = (unint64_t *)((char *)v96 - v100);
      v102 = &v95[8 * v91 - 16];
      v103 = (__int128 *)(v148 - 16);
      v104 = v99 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v105 = *v103;
        *((_OWORD *)v102 - 1) = *(v103 - 1);
        *(_OWORD *)v102 = v105;
        v102 -= 32;
        v103 -= 2;
        v104 -= 4;
      }
      while (v104);
      v89 = v101;
      if (v99 != (v99 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_164:
        do
        {
          v106 = *--v89;
          *--v96 = v106;
        }
        while (v89 != v147);
      }
      goto LABEL_125;
    }
    if (v94 >> 61)
      sub_20E877A38();
    v95 = (char *)operator new(8 * v94);
    v96 = (unint64_t *)&v95[8 * v91];
    *v96 = v145;
    v15 = (uint64_t)(v96 + 1);
    v97 = (char *)(v148 - (char *)v147);
    if (v148 != (char *)v147)
      goto LABEL_119;
LABEL_125:
    v147 = v96;
    v149 = &v95[8 * v94];
    if (v90)
      operator delete(v90);
    v13 = a1;
    v7 = v145;
LABEL_5:
    v148 = (char *)v15;
LABEL_6:
    ++v7;
    v14 = v150;
    if (v7 < 0x14C1BACF914C1BADLL * ((v151 - (_BYTE *)v150) >> 3))
      continue;
    break;
  }
  v107 = v147;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v108 = v148 - (char *)v147;
  if (v148 != (char *)v147)
  {
    if ((unint64_t)v108 >= 0x6EB3E45306EB3E1)
      sub_20E867F44();
    v109 = v108 >> 3;
    v110 = (char *)operator new(296 * (v108 >> 3));
    *a4 = v110;
    a4[1] = v110;
    v111 = 296 * v109;
    v112 = &v110[296 * v109];
    a4[2] = v112;
    v113 = v110 + 56;
    do
    {
      *((_QWORD *)v113 - 7) = -1;
      *((_QWORD *)v113 - 2) = 0;
      *((_QWORD *)v113 - 1) = 0;
      *(v113 - 3) = 0uLL;
      *(v113 - 2) = 0uLL;
      *v113 = 0uLL;
      v113[1] = 0uLL;
      v113[2] = 0uLL;
      v113[3] = 0uLL;
      v113[4] = 0uLL;
      v113[5] = 0uLL;
      v113[6] = 0uLL;
      v113[7] = 0uLL;
      v113[8] = 0uLL;
      v113[9] = 0uLL;
      v113[10] = 0uLL;
      v113[11] = 0uLL;
      v113[12] = 0uLL;
      v113[13] = 0uLL;
      v113[14] = 0uLL;
      v113 = (_OWORD *)((char *)v113 + 296);
      v111 -= 296;
    }
    while (v111);
    a4[1] = v112;
    v114 = v110 + 32;
    do
    {
      v123 = (char *)v150 + 296 * *v107;
      v124 = *(_OWORD *)(v123 + 24);
      v125 = *((_QWORD *)v123 + 5);
      *((_QWORD *)v123 + 3) = 0;
      *((_QWORD *)v123 + 4) = 0;
      *((_QWORD *)v123 + 5) = 0;
      v164 = *((_OWORD *)v123 + 15);
      v165 = *((_OWORD *)v123 + 16);
      v166 = *((_OWORD *)v123 + 17);
      v167 = *((_QWORD *)v123 + 36);
      v160 = *((_OWORD *)v123 + 11);
      v161 = *((_OWORD *)v123 + 12);
      v162 = *((_OWORD *)v123 + 13);
      v163 = *((_OWORD *)v123 + 14);
      v156 = *((_OWORD *)v123 + 7);
      v157 = *((_OWORD *)v123 + 8);
      v158 = *((_OWORD *)v123 + 9);
      v159 = *((_OWORD *)v123 + 10);
      v152 = *((_OWORD *)v123 + 3);
      v153 = *((_OWORD *)v123 + 4);
      *(_OWORD *)v154 = *((_OWORD *)v123 + 5);
      v155 = *((_OWORD *)v123 + 6);
      v126 = *(_OWORD *)v123;
      *((_QWORD *)v114 - 2) = *((_QWORD *)v123 + 2);
      *((_OWORD *)v114 - 2) = v126;
      v127 = (void *)*((_QWORD *)v114 - 1);
      if (v127)
      {
        *(_QWORD *)v114 = v127;
        v146 = v124;
        operator delete(v127);
        v124 = v146;
      }
      v115 = v114 - 32;
      *(_OWORD *)(v114 - 8) = v124;
      *((_QWORD *)v114 + 1) = v125;
      v116 = v165;
      *((_OWORD *)v114 + 13) = v164;
      *((_OWORD *)v114 + 14) = v116;
      *((_OWORD *)v114 + 15) = v166;
      *((_QWORD *)v114 + 32) = v167;
      v117 = v161;
      *((_OWORD *)v114 + 9) = v160;
      *((_OWORD *)v114 + 10) = v117;
      v118 = v163;
      *((_OWORD *)v114 + 11) = v162;
      *((_OWORD *)v114 + 12) = v118;
      v119 = v157;
      *((_OWORD *)v114 + 5) = v156;
      *((_OWORD *)v114 + 6) = v119;
      v120 = v159;
      *((_OWORD *)v114 + 7) = v158;
      *((_OWORD *)v114 + 8) = v120;
      v121 = v153;
      *((_OWORD *)v114 + 1) = v152;
      *((_OWORD *)v114 + 2) = v121;
      v122 = v155;
      ++v107;
      v114 += 296;
      *((_OWORD *)v115 + 5) = *(_OWORD *)v154;
      *((_OWORD *)v115 + 6) = v122;
    }
    while (v107 != (unint64_t *)v148);
    v107 = v147;
  }
  if (v107)
    operator delete(v107);
  v128 = (char *)v150;
  if (v150)
  {
LABEL_142:
    v129 = v128;
    if (v151 != v128)
    {
      v130 = v151 - 272;
      do
      {
        v132 = *(void **)v130;
        if (*(_QWORD *)v130)
        {
          *((_QWORD *)v130 + 1) = v132;
          operator delete(v132);
        }
        v131 = v130 - 24;
        v130 -= 296;
      }
      while (v131 != v128);
      v129 = v150;
    }
    v151 = v128;
    operator delete(v129);
  }
}

void sub_20EDDC928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30)
{
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;

  v31 = *a9;
  if (*a9)
  {
    v32 = a9[1];
    v33 = *a9;
    if (v32 != v31)
    {
      v34 = (uint64_t)v32 - 272;
      do
      {
        v36 = *(void **)v34;
        if (*(_QWORD *)v34)
        {
          *(_QWORD *)(v34 + 8) = v36;
          operator delete(v36);
        }
        v35 = (void *)(v34 - 24);
        v34 -= 296;
      }
      while (v35 != v31);
      v33 = *a9;
    }
    a9[1] = v31;
    operator delete(v33);
  }
  if (__p)
    operator delete(__p);
  sub_20EDDCB58(&a30);
  _Unwind_Resume(a1);
}

void **sub_20EDDCB58(void **a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (uint64_t)v3 - 272;
      do
      {
        v7 = *(void **)v5;
        if (*(_QWORD *)v5)
        {
          *(_QWORD *)(v5 + 8) = v7;
          operator delete(v7);
        }
        v6 = (void *)(v5 - 24);
        v5 -= 296;
      }
      while (v6 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20EDDCBD0(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  float32x4_t v26;
  float32x4_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  int v36;

  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (_DWORD *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 2)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 4 * a2 > (unint64_t)a3)
        goto LABEL_43;
      v17 = v16 + 1;
      v8 = (_DWORD *)(v7 + 4 * (v17 & 0x7FFFFFFFFFFFFFF8));
      v18 = vld1q_dup_f32(a3);
      v19 = (float32x4_t *)(v7 + 16);
      v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_43:
        do
          *v8++ = *(_DWORD *)a3;
        while (v8 != (_DWORD *)(v7 + 4 * a2));
      }
      v8 = (_DWORD *)(v7 + 4 * a2);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  else
  {
    v9 = *(_DWORD **)a1;
    v10 = v7 - *(_QWORD *)a1;
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + a2;
    if (v12 >> 62)
      sub_20EABADD4();
    v13 = v6 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_20E877A38();
      v15 = (char *)operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[4 * v11];
    v22 = (char *)(v21 + 4 * a2);
    v23 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v24 = (char *)v21;
    if (v23 < 0x13)
      goto LABEL_44;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = &v15[4 * v11];
      if (&v15[4 * a2 + v10] > (char *)a3)
        goto LABEL_44;
    }
    v25 = v23 + 1;
    v24 = (char *)(v21 + 4 * (v25 & 0x7FFFFFFFFFFFFFF8));
    v26 = vld1q_dup_f32(a3);
    v27 = (float32x4_t *)&v15[4 * v11 + 16];
    v28 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_44:
      do
      {
        *(float *)v24 = *a3;
        v24 += 4;
      }
      while (v24 != v22);
    }
    if ((_DWORD *)v7 != v9)
    {
      v29 = v7 - (_QWORD)v9 - 4;
      if (v29 < 0x2C)
        goto LABEL_45;
      if (v7 - (unint64_t)&v15[v10] < 0x20)
        goto LABEL_45;
      v30 = (v29 >> 2) + 1;
      v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
      v8 = (_DWORD *)(v7 - v31);
      v21 -= v31;
      v32 = &v15[4 * v11 - 16];
      v33 = (__int128 *)(v7 - 16);
      v34 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 8;
      }
      while (v34);
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_45:
        do
        {
          v36 = *--v8;
          *(_DWORD *)(v21 - 4) = v36;
          v21 -= 4;
        }
        while (v8 != v9);
      }
    }
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = &v15[4 * v14];
    if (v9)
      operator delete(v9);
  }
}

void sub_20EDDCE30(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5F9A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F9A0))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.place_recognition");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5F998);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5F9A0);
  }
  *a1 = qword_254A5F998;
}

void sub_20EDDCECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5F9A0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5F9A0);
  _Unwind_Resume(a1);
}

void sub_20EDDCF24(_QWORD *a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;

  a1[4] = a2;
  a1[5] = a3;
  a1[6] = a4;
  a1[2] = a5;
  v14 = operator new[]();
  *(_QWORD *)&v21 = v14;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24C9E9908;
  v15[1] = 0;
  v15[2] = 0;
  v15[3] = v14;
  *((_QWORD *)&v21 + 1) = v15;
  LOBYTE(v19) = 0;
  v20 = 0;
  sub_20EDB585C((uint64_t)a1, &v21, a2, a3, a4, a5, a6, a7, &v19);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20EDDD04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EDDD060(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  MEMORY[0x212BC6368](v1, 0x1000C8052888210);
  __cxa_rethrow();
}

void sub_20EDDD084(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EDDD09C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EDDD0C0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x212BC6368);
  return result;
}

uint64_t sub_20EDDD0E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3vio8cv_types12ArrayDeleterIfEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"N4cv3d3vio8cv_types12ArrayDeleterIfEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3vio8cv_types12ArrayDeleterIfEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3vio8cv_types12ArrayDeleterIfEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EDDD150(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  float *v21;
  int v22;
  float v23;
  float v24;
  uint64_t v25;
  float *v26;
  float v27;
  uint64_t v28;
  float *v29;
  int v30;
  float v31;
  float v32;
  uint64_t *v33;
  float v34;
  uint64_t *v35;
  uint64_t v36;
  float *v37;
  int v38;
  float v39;
  float v40;
  uint64_t v41;
  float *v42;
  int v43;
  float v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  float *v51;
  int v52;
  float v53;
  float v54;
  float v55;
  float v56;
  int v57;
  uint64_t v58;
  float *v59;
  uint64_t *v60;
  BOOL v61;
  float *v62;
  int v63;
  float v64;
  float v65;
  char v66;
  float v67;
  uint64_t v68;
  float *v69;
  int v70;
  float v71;
  float v72;
  uint64_t *v73;
  float *v74;
  int v75;
  float v76;
  float v77;
  uint64_t *v78;
  float v79;
  uint64_t v80;
  float *v81;
  int v82;
  float v83;
  float v84;
  uint64_t v85;
  uint64_t v86;
  float v87;
  uint64_t v88;
  float *v89;
  int v90;
  float v91;
  float v92;
  uint64_t v93;
  float *v94;
  int v95;
  float v96;
  float v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  float *v102;
  float *v103;
  int v104;
  float v105;
  float v106;
  char v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  float *v115;
  float *v116;
  int v117;
  float v118;
  float v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  float *v123;
  int v124;
  float v125;
  float v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  float *v134;
  float *v135;
  int v136;
  float v137;
  float v138;
  char v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  float *v143;
  float *v144;
  float v145;
  float v146;
  uint64_t v147;
  float *v148;
  float *v149;
  int v150;
  float v151;
  float v152;
  char v153;
  float *v154;
  int v155;
  float v156;
  float v157;
  char v158;
  uint64_t v159;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  float *v168;
  float *v169;
  int v170;
  float v171;
  float v172;
  char v173;
  uint64_t *v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  float *v181;
  float *v182;
  int v183;
  float v184;
  float v185;
  uint64_t *v186;
  float *v187;
  float v188;
  float v189;
  unsigned int v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  float *v195;
  float *v196;
  int v197;
  float v198;
  float v199;
  char v200;
  float v201;
  uint64_t *v202;
  float *v203;
  int v204;
  float v205;
  float v206;
  int v207;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v207 = a5;
LABEL_4:
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v99 = *(a2 - 1);
        v100 = *v10;
        v101 = **(_QWORD **)(a3 + 8);
        v102 = (float *)(v101 + 8 * *v10);
        v103 = (float *)(v101 + 8 * v99);
        if (*v103 == *v102)
          v104 = 0;
        else
          v104 = -127;
        if (*v103 > *v102)
          v104 = 1;
        if (*v103 < *v102)
          v104 = -1;
        if (!v104)
        {
          v105 = v103[1];
          v106 = v102[1];
          if (v105 == v106)
            v107 = 0;
          else
            v107 = -127;
          if (v105 > v106)
            v107 = 1;
          if (v105 < v106)
            LOBYTE(v104) = -1;
          else
            LOBYTE(v104) = v107;
        }
        if (v104 != 129 && (v104 & 0x80) != 0)
        {
          *v10 = v99;
          *(a2 - 1) = v100;
        }
        return result;
      case 3uLL:
        return (uint64_t)sub_20EDDDF4C(v10, v10 + 1, a2 - 1, **(_QWORD **)(a3 + 8));
      case 4uLL:
        return (uint64_t)sub_20EDDE3FC(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5uLL:
        return (uint64_t)sub_20EDDE568(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, a3);
      default:
        if (v11 <= 191)
        {
          if ((a5 & 1) == 0)
          {
            if (v10 != a2)
            {
              v191 = v10 + 1;
              if (v10 + 1 != a2)
              {
                v192 = **(_QWORD **)(a3 + 8);
                do
                {
                  v194 = *v9;
                  v193 = v9[1];
                  v9 = v191;
                  v195 = (float *)(v192 + 8 * v193);
                  v196 = (float *)(v192 + 8 * v194);
                  if (*v195 == *v196)
                    v197 = 0;
                  else
                    v197 = -127;
                  if (*v195 > *v196)
                    v197 = 1;
                  if (*v195 < *v196)
                    v197 = -1;
                  if (!v197)
                  {
                    v198 = v195[1];
                    v199 = v196[1];
                    if (v198 == v199)
                      v200 = 0;
                    else
                      v200 = -127;
                    if (v198 > v199)
                      v200 = 1;
                    if (v198 < v199)
                      LOBYTE(v197) = -1;
                    else
                      LOBYTE(v197) = v200;
                  }
                  if (v197 != 129 && (v197 & 0x80) != 0)
                  {
                    v201 = *v195;
                    v202 = v9;
                    do
                    {
                      *v202 = v194;
                      v194 = *(v202 - 2);
                      v203 = (float *)(v192 + 8 * v194);
                      if (v201 == *v203)
                        v204 = 0;
                      else
                        v204 = -127;
                      if (v201 > *v203)
                        v204 = 1;
                      if (v201 < *v203)
                        v204 = -1;
                      if (!v204)
                      {
                        v205 = v195[1];
                        v206 = v203[1];
                        if (v205 == v206)
                          LOBYTE(v204) = 0;
                        else
                          LOBYTE(v204) = -127;
                        if (v205 > v206)
                          LOBYTE(v204) = 1;
                        if (v205 < v206)
                          LOBYTE(v204) = -1;
                      }
                      --v202;
                    }
                    while (v204 != 129 && (v204 & 0x80) != 0);
                    *v202 = v193;
                  }
                  v191 = v9 + 1;
                }
                while (v9 + 1 != a2);
              }
            }
            return result;
          }
          if (v10 == a2)
            return result;
          v108 = v10 + 1;
          if (v10 + 1 == a2)
            return result;
          v109 = **(_QWORD **)(a3 + 8);
          v110 = 8;
          v111 = v10;
          while (1)
          {
            v114 = *v111;
            v113 = v111[1];
            v111 = v108;
            v115 = (float *)(v109 + 8 * v113);
            v116 = (float *)(v109 + 8 * v114);
            if (*v115 == *v116)
              v117 = 0;
            else
              v117 = -127;
            if (*v115 > *v116)
              v117 = 1;
            if (*v115 < *v116)
              v117 = -1;
            if (!v117)
            {
              v118 = v115[1];
              v119 = v116[1];
              if (v118 == v119)
                v120 = 0;
              else
                v120 = -127;
              if (v118 > v119)
                v120 = 1;
              if (v118 < v119)
                LOBYTE(v117) = -1;
              else
                LOBYTE(v117) = v120;
            }
            if (v117 != 129 && (v117 & 0x80) != 0)
            {
              v121 = v110;
              do
              {
                *(uint64_t *)((char *)v10 + v121) = v114;
                v122 = v121 - 8;
                if (v121 == 8)
                {
                  v112 = v10;
                  goto LABEL_291;
                }
                v114 = *(uint64_t *)((char *)v10 + v121 - 16);
                v123 = (float *)(v109 + 8 * v114);
                if (*v115 == *v123)
                  v124 = 0;
                else
                  v124 = -127;
                if (*v115 > *v123)
                  v124 = 1;
                if (*v115 < *v123)
                  v124 = -1;
                if (!v124)
                {
                  v125 = v115[1];
                  v126 = v123[1];
                  if (v125 == v126)
                    LOBYTE(v124) = 0;
                  else
                    LOBYTE(v124) = -127;
                  if (v125 > v126)
                    LOBYTE(v124) = 1;
                  if (v125 < v126)
                    LOBYTE(v124) = -1;
                }
                if (v124 == 129)
                  break;
                v121 = v122;
              }
              while ((v124 & 0x80) != 0);
              v112 = (uint64_t *)((char *)v10 + v122);
LABEL_291:
              *v112 = v113;
            }
            v108 = v111 + 1;
            v110 += 8;
            if (v111 + 1 == a2)
              return result;
          }
        }
        if (!a4)
        {
          if (v10 == a2)
            return result;
          v127 = (v12 - 2) >> 1;
          v128 = v127;
          while (1)
          {
            v129 = v128;
            if (v127 < v128)
              goto LABEL_334;
            v130 = *(uint64_t **)(a3 + 8);
            v131 = (2 * v129) | 1;
            v132 = &v10[v131];
            if (2 * v129 + 2 >= (uint64_t)v12)
            {
              v133 = *v130;
            }
            else
            {
              v133 = *v130;
              v134 = (float *)(v133 + 8 * v132[1]);
              v135 = (float *)(v133 + 8 * *v132);
              if (*v135 == *v134)
                v136 = 0;
              else
                v136 = -127;
              if (*v135 > *v134)
                v136 = 1;
              if (*v135 < *v134)
                v136 = -1;
              if (!v136)
              {
                v137 = v135[1];
                v138 = v134[1];
                if (v137 == v138)
                  v139 = 0;
                else
                  v139 = -127;
                if (v137 > v138)
                  v139 = 1;
                if (v137 < v138)
                  LOBYTE(v136) = -1;
                else
                  LOBYTE(v136) = v139;
              }
              if (v136 != 129 && (v136 & 0x80u) != 0)
              {
                ++v132;
                v131 = 2 * v129 + 2;
              }
            }
            v140 = &v10[v129];
            v141 = *v132;
            v142 = *v140;
            v143 = (float *)(v133 + 8 * *v140);
            v144 = (float *)(v133 + 8 * *v132);
            if (*v144 == *v143)
              LODWORD(result) = 0;
            else
              LODWORD(result) = -127;
            if (*v144 > *v143)
              LODWORD(result) = 1;
            if (*v144 < *v143)
              result = 0xFFFFFFFFLL;
            else
              result = result;
            if ((_DWORD)result)
            {
              if (result == 129)
                goto LABEL_378;
              goto LABEL_377;
            }
            v145 = v144[1];
            v146 = v143[1];
            if (v145 == v146)
              LODWORD(result) = 0;
            else
              LODWORD(result) = -127;
            if (v145 > v146)
              LODWORD(result) = 1;
            result = v145 < v146 ? 0xFFFFFFFFLL : result;
            if (result == 129)
              break;
LABEL_377:
            if ((result & 0x80) == 0)
              goto LABEL_378;
LABEL_334:
            v128 = v129 - 1;
            if (!v129)
            {
              v159 = (unint64_t)v11 >> 3;
              do
              {
                if (v159 >= 2)
                {
                  v161 = 0;
                  v162 = *(uint64_t **)(a3 + 8);
                  v163 = *v10;
                  v164 = v10;
                  do
                  {
                    v165 = &v164[v161 + 1];
                    v166 = (2 * v161) | 1;
                    v167 = 2 * v161 + 2;
                    if (v167 < v159)
                    {
                      v168 = (float *)(*v162 + 8 * v165[1]);
                      v169 = (float *)(*v162 + 8 * *v165);
                      if (*v169 == *v168)
                        v170 = 0;
                      else
                        v170 = -127;
                      if (*v169 > *v168)
                        v170 = 1;
                      if (*v169 < *v168)
                        v170 = -1;
                      if (!v170)
                      {
                        v171 = v169[1];
                        v172 = v168[1];
                        if (v171 == v172)
                          v173 = 0;
                        else
                          v173 = -127;
                        if (v171 > v172)
                          v173 = 1;
                        if (v171 < v172)
                          LOBYTE(v170) = -1;
                        else
                          LOBYTE(v170) = v173;
                      }
                      result = v170 != 129;
                      if ((result & ((v170 & 0x80u) != 0)) != 0)
                      {
                        ++v165;
                        v166 = v167;
                      }
                    }
                    *v164 = *v165;
                    v164 = v165;
                    v161 = v166;
                  }
                  while (v166 <= (uint64_t)((unint64_t)(v159 - 2) >> 1));
                  v174 = a2 - 1;
                  if (v165 == a2 - 1)
                  {
                    *v165 = v163;
                  }
                  else
                  {
                    *v165 = *v174;
                    *v174 = v163;
                    v175 = (char *)v165 - (char *)v10 + 8;
                    if (v175 >= 9)
                    {
                      v176 = (((unint64_t)v175 >> 3) - 2) >> 1;
                      v177 = &v10[v176];
                      v178 = *v177;
                      v179 = *v165;
                      v180 = *v162;
                      v181 = (float *)(v180 + 8 * *v165);
                      v182 = (float *)(v180 + 8 * *v177);
                      if (*v182 == *v181)
                        v183 = 0;
                      else
                        v183 = -127;
                      if (*v182 > *v181)
                        v183 = 1;
                      if (*v182 < *v181)
                        v183 = -1;
                      if (!v183)
                      {
                        v184 = v182[1];
                        v185 = v181[1];
                        if (v184 == v185)
                          LOBYTE(v183) = 0;
                        else
                          LOBYTE(v183) = -127;
                        if (v184 > v185)
                          LOBYTE(v183) = 1;
                        if (v184 < v185)
                          LOBYTE(v183) = -1;
                      }
                      result = v183;
                      if (v183 != 129 && (v183 & 0x80) != 0)
                      {
                        do
                        {
                          v186 = v177;
                          *v165 = v178;
                          if (!v176)
                            break;
                          v176 = (v176 - 1) >> 1;
                          v177 = &v10[v176];
                          v178 = *v177;
                          v187 = (float *)(v180 + 8 * *v177);
                          if (*v187 == *v181)
                            LODWORD(result) = 0;
                          else
                            LODWORD(result) = -127;
                          if (*v187 > *v181)
                            LODWORD(result) = 1;
                          if (*v187 < *v181)
                            result = 0xFFFFFFFFLL;
                          else
                            result = result;
                          if (!(_DWORD)result)
                          {
                            v188 = v187[1];
                            v189 = v181[1];
                            if (v188 == v189)
                              v190 = 0;
                            else
                              v190 = -127;
                            if (v188 > v189)
                              v190 = 1;
                            if (v188 < v189)
                              result = 0xFFFFFFFFLL;
                            else
                              result = v190;
                          }
                          if (result == 129)
                            break;
                          v165 = v186;
                        }
                        while ((result & 0x80) != 0);
                        *v186 = v179;
                      }
                    }
                  }
                }
                --a2;
              }
              while ((unint64_t)v159-- > 2);
              return result;
            }
          }
          while (1)
          {
            while (1)
            {
LABEL_378:
              result = (uint64_t)v132;
              *v140 = v141;
              if (v127 < v131)
              {
LABEL_333:
                *(_QWORD *)result = v142;
                goto LABEL_334;
              }
              v147 = (2 * v131) | 1;
              v132 = &v10[v147];
              v131 = 2 * v131 + 2;
              if (v131 >= (uint64_t)v12)
              {
                v131 = v147;
              }
              else
              {
                v148 = (float *)(v133 + 8 * v132[1]);
                v149 = (float *)(v133 + 8 * *v132);
                if (*v149 == *v148)
                  v150 = 0;
                else
                  v150 = -127;
                if (*v149 > *v148)
                  v150 = 1;
                if (*v149 < *v148)
                  v150 = -1;
                if (!v150)
                {
                  v151 = v149[1];
                  v152 = v148[1];
                  if (v151 == v152)
                    v153 = 0;
                  else
                    v153 = -127;
                  if (v151 > v152)
                    v153 = 1;
                  if (v151 < v152)
                    LOBYTE(v150) = -1;
                  else
                    LOBYTE(v150) = v153;
                }
                if (v150 != 129 && (v150 & 0x80u) != 0)
                  ++v132;
                else
                  v131 = v147;
              }
              v141 = *v132;
              v154 = (float *)(v133 + 8 * *v132);
              if (*v154 == *v143)
                v155 = 0;
              else
                v155 = -127;
              if (*v154 > *v143)
                v155 = 1;
              if (*v154 < *v143)
                v155 = -1;
              if (v155)
                break;
              v156 = v154[1];
              v157 = v143[1];
              if (v156 == v157)
                v158 = 0;
              else
                v158 = -127;
              if (v156 > v157)
                v158 = 1;
              if (v156 < v157)
                LOBYTE(v155) = -1;
              else
                LOBYTE(v155) = v158;
              v140 = (uint64_t *)result;
              if (v155 != 129)
                goto LABEL_419;
            }
            v140 = (uint64_t *)result;
            if (v155 != 129)
            {
LABEL_419:
              v140 = (uint64_t *)result;
              if ((v155 & 0x80) != 0)
                goto LABEL_333;
            }
          }
        }
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        v15 = **(_QWORD **)(a3 + 8);
        if ((unint64_t)v11 < 0x401)
        {
          result = (uint64_t)sub_20EDDDF4C(&v9[v12 >> 1], v9, a2 - 1, v15);
          --a4;
          v18 = **(_QWORD **)(a3 + 8);
          v19 = *v9;
          if ((a5 & 1) != 0)
            goto LABEL_28;
        }
        else
        {
          sub_20EDDDF4C(v9, &v9[v12 >> 1], a2 - 1, v15);
          v16 = &v9[v13];
          sub_20EDDDF4C(v9 + 1, v16 - 1, a2 - 2, **(_QWORD **)(a3 + 8));
          sub_20EDDDF4C(v9 + 2, &v9[v13 + 1], a2 - 3, **(_QWORD **)(a3 + 8));
          result = (uint64_t)sub_20EDDDF4C(v16 - 1, v14, &v9[v13 + 1], **(_QWORD **)(a3 + 8));
          v17 = *v9;
          *v9 = *v16;
          *v16 = v17;
          a5 = v207;
          --a4;
          v18 = **(_QWORD **)(a3 + 8);
          v19 = *v9;
          if ((v207 & 1) != 0)
            goto LABEL_28;
        }
        v20 = (float *)(v18 + 8 * v19);
        v21 = (float *)(v18 + 8 * *(v9 - 1));
        if (*v21 == *v20)
          v22 = 0;
        else
          v22 = -127;
        if (*v21 > *v20)
          v22 = 1;
        if (*v21 < *v20)
          v22 = -1;
        if (!v22)
        {
          v23 = v21[1];
          v24 = v20[1];
          if (v23 == v24)
            LOBYTE(v22) = 0;
          else
            LOBYTE(v22) = -127;
          if (v23 > v24)
            LOBYTE(v22) = 1;
          if (v23 < v24)
            LOBYTE(v22) = -1;
        }
        if (v22 == 129 || (v22 & 0x80) == 0)
        {
          v62 = (float *)(v18 + 8 * *(a2 - 1));
          if (*v20 == *v62)
            v63 = 0;
          else
            v63 = -127;
          if (*v20 > *v62)
            v63 = 1;
          if (*v20 < *v62)
            v63 = -1;
          if (!v63)
          {
            v64 = v20[1];
            v65 = v62[1];
            if (v64 == v65)
              v66 = 0;
            else
              v66 = -127;
            if (v64 > v65)
              v66 = 1;
            if (v64 < v65)
              LOBYTE(v63) = -1;
            else
              LOBYTE(v63) = v66;
          }
          if (v63 != 129 && (v63 & 0x80) != 0)
          {
            v67 = *v20;
            v10 = v9;
            while (1)
            {
              while (1)
              {
                v68 = v10[1];
                ++v10;
                v69 = (float *)(v18 + 8 * v68);
                if (v67 == *v69)
                  v70 = 0;
                else
                  v70 = -127;
                if (v67 > *v69)
                  v70 = 1;
                if (v67 < *v69)
                  v70 = -1;
                if (v70)
                  break;
                v71 = v20[1];
                v72 = v69[1];
                if (v71 == v72)
                  LOBYTE(v70) = 0;
                else
                  LOBYTE(v70) = -127;
                if (v71 > v72)
                  LOBYTE(v70) = 1;
                if (v71 < v72)
                  LOBYTE(v70) = -1;
                if (v70 != 129)
                  goto LABEL_165;
              }
              if (v70 != 129)
              {
LABEL_165:
                if ((v70 & 0x80) != 0)
                  goto LABEL_197;
              }
            }
          }
          v73 = v9 + 1;
          while (1)
          {
            v10 = v73;
            if (v73 >= a2)
              break;
            v74 = (float *)(v18 + 8 * *v73);
            if (*v20 == *v74)
              v75 = 0;
            else
              v75 = -127;
            if (*v20 > *v74)
              v75 = 1;
            if (*v20 < *v74)
              v75 = -1;
            if (v75)
            {
              v73 = v10 + 1;
              if (v75 != 129)
              {
LABEL_196:
                if ((v75 & 0x80) != 0)
                  break;
              }
            }
            else
            {
              v76 = v20[1];
              v77 = v74[1];
              if (v76 == v77)
                LOBYTE(v75) = 0;
              else
                LOBYTE(v75) = -127;
              if (v76 > v77)
                LOBYTE(v75) = 1;
              if (v76 < v77)
                LOBYTE(v75) = -1;
              v73 = v10 + 1;
              if (v75 != 129)
                goto LABEL_196;
            }
          }
LABEL_197:
          v78 = a2;
          if (v10 < a2)
          {
            v79 = *v20;
            v78 = a2;
            do
            {
              v80 = *--v78;
              v81 = (float *)(v18 + 8 * v80);
              if (v79 == *v81)
                v82 = 0;
              else
                v82 = -127;
              if (v79 > *v81)
                v82 = 1;
              if (v79 < *v81)
                v82 = -1;
              if (!v82)
              {
                v83 = v20[1];
                v84 = v81[1];
                if (v83 == v84)
                  LOBYTE(v82) = 0;
                else
                  LOBYTE(v82) = -127;
                if (v83 > v84)
                  LOBYTE(v82) = 1;
                if (v83 < v84)
                  LOBYTE(v82) = -1;
              }
            }
            while (v82 != 129 && (v82 & 0x80) != 0);
          }
          if (v10 < v78)
          {
            v85 = *v10;
            v86 = *v78;
            v87 = *v20;
            do
            {
              *v10 = v86;
              *v78 = v85;
              do
              {
                do
                {
                  while (1)
                  {
                    v88 = v10[1];
                    ++v10;
                    v85 = v88;
                    v89 = (float *)(v18 + 8 * v88);
                    if (v87 == *v89)
                      v90 = 0;
                    else
                      v90 = -127;
                    if (v87 > *v89)
                      v90 = 1;
                    if (v87 < *v89)
                      v90 = -1;
                    if (!v90)
                      break;
                    if (v90 != 129)
                      goto LABEL_229;
                  }
                  v91 = v20[1];
                  v92 = v89[1];
                  if (v91 == v92)
                    LOBYTE(v90) = 0;
                  else
                    LOBYTE(v90) = -127;
                  if (v91 > v92)
                    LOBYTE(v90) = 1;
                  if (v91 < v92)
                    LOBYTE(v90) = -1;
                }
                while (v90 == 129);
LABEL_229:
                ;
              }
              while ((v90 & 0x80) == 0);
              do
              {
                v93 = *--v78;
                v86 = v93;
                v94 = (float *)(v18 + 8 * v93);
                if (v87 == *v94)
                  v95 = 0;
                else
                  v95 = -127;
                if (v87 > *v94)
                  v95 = 1;
                if (v87 < *v94)
                  v95 = -1;
                if (!v95)
                {
                  v96 = v20[1];
                  v97 = v94[1];
                  if (v96 == v97)
                    LOBYTE(v95) = 0;
                  else
                    LOBYTE(v95) = -127;
                  if (v96 > v97)
                    LOBYTE(v95) = 1;
                  if (v96 < v97)
                    LOBYTE(v95) = -1;
                }
              }
              while (v95 != 129 && (v95 & 0x80) != 0);
            }
            while (v10 < v78);
          }
          v98 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v98;
          a5 = 0;
          *v98 = v19;
          continue;
        }
LABEL_28:
        v25 = 0;
        v26 = (float *)(v18 + 8 * v19);
        v27 = *v26;
        do
        {
          v28 = v9[v25 + 1];
          v29 = (float *)(v18 + 8 * v28);
          if (*v29 == v27)
            v30 = 0;
          else
            v30 = -127;
          if (*v29 > v27)
            v30 = 1;
          if (*v29 < v27)
            v30 = -1;
          if (!v30)
          {
            v31 = v29[1];
            v32 = v26[1];
            if (v31 == v32)
              LOBYTE(v30) = 0;
            else
              LOBYTE(v30) = -127;
            if (v31 > v32)
              LOBYTE(v30) = 1;
            if (v31 < v32)
              LOBYTE(v30) = -1;
          }
          ++v25;
        }
        while (v30 != 129 && (v30 & 0x80) != 0);
        v33 = &v9[v25];
        if (v25 != 1)
        {
          v34 = *v26;
          v35 = a2;
          while (1)
          {
            while (1)
            {
              v36 = *--v35;
              v37 = (float *)(v18 + 8 * v36);
              if (*v37 == v34)
                v38 = 0;
              else
                v38 = -127;
              if (*v37 > v34)
                v38 = 1;
              if (*v37 < v34)
                v38 = -1;
              if (v38)
                break;
              v39 = v37[1];
              v40 = v26[1];
              if (v39 == v40)
                LOBYTE(v38) = 0;
              else
                LOBYTE(v38) = -127;
              if (v39 > v40)
                LOBYTE(v38) = 1;
              if (v39 < v40)
                LOBYTE(v38) = -1;
              if (v38 != 129)
                goto LABEL_57;
            }
            if (v38 != 129)
            {
LABEL_57:
              if ((v38 & 0x80) != 0)
                goto LABEL_89;
            }
          }
        }
        v35 = a2;
        while (v33 < v35)
        {
          v41 = *--v35;
          v42 = (float *)(v18 + 8 * v41);
          if (*v42 == *v26)
            v43 = 0;
          else
            v43 = -127;
          if (*v42 > *v26)
            v43 = 1;
          if (*v42 < *v26)
            v43 = -1;
          if (v43)
          {
            if (v43 == 129)
              continue;
          }
          else
          {
            v44 = v42[1];
            v45 = v26[1];
            if (v44 == v45)
              LOBYTE(v43) = 0;
            else
              LOBYTE(v43) = -127;
            if (v44 > v45)
              LOBYTE(v43) = 1;
            if (v44 < v45)
              LOBYTE(v43) = -1;
            if (v43 == 129)
              continue;
          }
          if ((v43 & 0x80) != 0)
            break;
        }
LABEL_89:
        if (v33 >= v35)
        {
          v60 = v33 - 1;
          if (v33 - 1 == v9)
            goto LABEL_133;
LABEL_132:
          *v9 = *v60;
          goto LABEL_133;
        }
        v46 = *v35;
        v47 = *v26;
        v48 = v33;
        v49 = v35;
        while (2)
        {
          *v48 = v46;
          *v49 = v28;
          do
          {
            v50 = v48[1];
            ++v48;
            v28 = v50;
            v51 = (float *)(v18 + 8 * v50);
            if (*v51 == v47)
              v52 = 0;
            else
              v52 = -127;
            if (*v51 > v47)
              v52 = 1;
            if (*v51 < v47)
              v52 = -1;
            if (!v52)
            {
              v53 = v51[1];
              v54 = v26[1];
              if (v53 == v54)
                LOBYTE(v52) = 0;
              else
                LOBYTE(v52) = -127;
              if (v53 > v54)
                LOBYTE(v52) = 1;
              if (v53 < v54)
                LOBYTE(v52) = -1;
            }
          }
          while (v52 != 129 && (v52 & 0x80) != 0);
          while (1)
          {
LABEL_118:
            v58 = *--v49;
            v46 = v58;
            v59 = (float *)(v18 + 8 * v58);
            if (*v59 == v47)
              v57 = 0;
            else
              v57 = -127;
            if (*v59 > v47)
              v57 = 1;
            if (*v59 < v47)
              v57 = -1;
            if (v57)
              break;
            v55 = v59[1];
            v56 = v26[1];
            if (v55 == v56)
              LOBYTE(v57) = 0;
            else
              LOBYTE(v57) = -127;
            if (v55 > v56)
              LOBYTE(v57) = 1;
            if (v55 < v56)
              LOBYTE(v57) = -1;
            if (v57 != 129)
              goto LABEL_127;
          }
          if (v57 == 129)
            goto LABEL_118;
LABEL_127:
          if ((v57 & 0x80) == 0)
            goto LABEL_118;
          if (v48 < v49)
            continue;
          break;
        }
        v60 = v48 - 1;
        if (v48 - 1 != v9)
          goto LABEL_132;
LABEL_133:
        *v60 = v19;
        if (v33 < v35)
        {
LABEL_136:
          result = sub_20EDDD150(v9, v60, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v60 + 1;
          continue;
        }
        v61 = sub_20EDDE128(v9, v60, a3);
        v10 = v60 + 1;
        result = sub_20EDDE128(v60 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v61)
            goto LABEL_4;
          goto LABEL_136;
        }
        a2 = v60;
        if (!v61)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_20EDDDF4C(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  float *v6;
  float *v7;
  int v8;
  int v9;
  float v10;
  float v11;
  char v12;
  uint64_t v13;
  float *v14;
  unsigned __int8 v15;
  float v16;
  float v17;
  char v18;
  uint64_t v19;
  float *v20;
  float *v21;
  int v22;
  float v23;
  float v24;
  char v25;
  float v26;
  float v27;
  char v28;
  float *v29;
  int v30;
  float v31;
  float v32;
  char v33;

  v4 = *a2;
  v5 = *result;
  v6 = (float *)(a4 + 8 * *a2);
  v7 = (float *)(a4 + 8 * *result);
  if (*v6 == *v7)
    v8 = 0;
  else
    v8 = -127;
  if (*v6 > *v7)
    v8 = 1;
  if (*v6 < *v7)
    v9 = -1;
  else
    v9 = v8;
  if (!v9)
  {
    v10 = v6[1];
    v11 = v7[1];
    if (v10 == v11)
      v12 = 0;
    else
      v12 = -127;
    if (v10 > v11)
      v12 = 1;
    if (v10 < v11)
      LOBYTE(v9) = -1;
    else
      LOBYTE(v9) = v12;
  }
  v13 = *a3;
  v14 = (float *)(a4 + 8 * *a3);
  if (*v14 == *v6)
    v15 = 0;
  else
    v15 = -127;
  if (*v14 > *v6)
    v15 = 1;
  if (*v14 < *v6)
    v15 = -1;
  if (v9 != 129 && (v9 & 0x80) != 0)
  {
    if (v15)
    {
      if (v15 == 129)
      {
LABEL_73:
        *result = v4;
        *a2 = v5;
        v29 = (float *)(a4 + 8 * *a3);
        if (*v29 == *v7)
          v30 = 0;
        else
          v30 = -127;
        if (*v29 > *v7)
          v30 = 1;
        if (*v29 < *v7)
          v30 = -1;
        if (!v30)
        {
          v31 = v29[1];
          v32 = v7[1];
          if (v31 == v32)
            v33 = 0;
          else
            v33 = -127;
          if (v31 > v32)
            v33 = 1;
          if (v31 < v32)
            LOBYTE(v30) = -1;
          else
            LOBYTE(v30) = v33;
        }
        if (v30 != 129 && (v30 & 0x80) != 0)
        {
          *a2 = *a3;
          *a3 = v5;
        }
        return result;
      }
    }
    else
    {
      v26 = v14[1];
      v27 = v6[1];
      if (v26 == v27)
        v28 = 0;
      else
        v28 = -127;
      if (v26 > v27)
        v28 = 1;
      if (v26 < v27)
        v15 = -1;
      else
        v15 = v28;
      if (v15 == 129)
        goto LABEL_73;
    }
    if ((v15 & 0x80) != 0)
    {
      *result = v13;
      *a3 = v5;
      return result;
    }
    goto LABEL_73;
  }
  if (v15)
  {
    if (v15 == 129)
      return result;
    goto LABEL_42;
  }
  v16 = v14[1];
  v17 = v6[1];
  if (v16 == v17)
    v18 = 0;
  else
    v18 = -127;
  if (v16 > v17)
    v18 = 1;
  if (v16 < v17)
    v15 = -1;
  else
    v15 = v18;
  if (v15 != 129)
  {
LABEL_42:
    if ((v15 & 0x80) != 0)
    {
      *a2 = v13;
      *a3 = v4;
      v19 = *result;
      v20 = (float *)(a4 + 8 * *result);
      v21 = (float *)(a4 + 8 * *a2);
      if (*v21 == *v20)
        v22 = 0;
      else
        v22 = -127;
      if (*v21 > *v20)
        v22 = 1;
      if (*v21 < *v20)
        v22 = -1;
      if (!v22)
      {
        v23 = v21[1];
        v24 = v20[1];
        if (v23 == v24)
          v25 = 0;
        else
          v25 = -127;
        if (v23 > v24)
          v25 = 1;
        if (v23 < v24)
          LOBYTE(v22) = -1;
        else
          LOBYTE(v22) = v25;
      }
      if (v22 != 129 && (v22 & 0x80) != 0)
      {
        *result = *a2;
        *a2 = v19;
      }
    }
  }
  return result;
}

BOOL sub_20EDDE128(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  int v17;
  float v18;
  float v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  int v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float *v30;
  float *v31;
  int v32;
  float v33;
  float v34;
  char v35;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v27 = *(a2 - 1);
      v28 = *a1;
      v29 = **(_QWORD **)(a3 + 8);
      v30 = (float *)(v29 + 8 * *a1);
      v31 = (float *)(v29 + 8 * v27);
      if (*v31 == *v30)
        v32 = 0;
      else
        v32 = -127;
      if (*v31 > *v30)
        v32 = 1;
      if (*v31 < *v30)
        v32 = -1;
      if (!v32)
      {
        v33 = v31[1];
        v34 = v30[1];
        if (v33 == v34)
          v35 = 0;
        else
          v35 = -127;
        if (v33 > v34)
          v35 = 1;
        if (v33 < v34)
          LOBYTE(v32) = -1;
        else
          LOBYTE(v32) = v35;
      }
      if (v32 != 129 && (v32 & 0x80) != 0)
      {
        *a1 = v27;
        *(a2 - 1) = v28;
      }
      return result;
    case 3:
      sub_20EDDDF4C(a1, a1 + 1, a2 - 1, **(_QWORD **)(a3 + 8));
      return 1;
    case 4:
      sub_20EDDE3FC(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_20EDDE568(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v8 = a1 + 2;
      sub_20EDDDF4C(a1, a1 + 1, a1 + 2, **(_QWORD **)(a3 + 8));
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = **(_QWORD **)(a3 + 8);
      v12 = 24;
      break;
  }
  while (1)
  {
    v13 = *v9;
    v14 = *v8;
    v15 = (float *)(v11 + 8 * *v9);
    v16 = (float *)(v11 + 8 * *v8);
    if (*v15 == *v16)
      v17 = 0;
    else
      v17 = -127;
    if (*v15 > *v16)
      v17 = 1;
    if (*v15 < *v16)
      v17 = -1;
    if (v17)
    {
      if (v17 == 129)
        goto LABEL_47;
    }
    else
    {
      v18 = v15[1];
      v19 = v16[1];
      if (v18 == v19)
        v20 = 0;
      else
        v20 = -127;
      if (v18 > v19)
        v20 = 1;
      if (v18 < v19)
        LOBYTE(v17) = -1;
      else
        LOBYTE(v17) = v20;
      if (v17 == 129)
        goto LABEL_47;
    }
    if ((v17 & 0x80) != 0)
      break;
LABEL_47:
    v8 = v9;
    v12 += 8;
    if (++v9 == a2)
      return 1;
  }
  v21 = v12;
  do
  {
    *(uint64_t *)((char *)a1 + v21) = v14;
    v22 = v21 - 8;
    if (v21 == 8)
    {
      *a1 = v13;
      if (++v10 != 8)
        goto LABEL_47;
      return v9 + 1 == a2;
    }
    v14 = *(uint64_t *)((char *)a1 + v21 - 16);
    v23 = (float *)(v11 + 8 * v14);
    if (*v15 == *v23)
      v24 = 0;
    else
      v24 = -127;
    if (*v15 > *v23)
      v24 = 1;
    if (*v15 < *v23)
      v24 = -1;
    if (!v24)
    {
      v25 = v15[1];
      v26 = v23[1];
      if (v25 == v26)
        LOBYTE(v24) = 0;
      else
        LOBYTE(v24) = -127;
      if (v25 > v26)
        LOBYTE(v24) = 1;
      if (v25 < v26)
        LOBYTE(v24) = -1;
    }
    if (v24 == 129)
      break;
    v21 = v22;
  }
  while ((v24 & 0x80) != 0);
  *(uint64_t *)((char *)a1 + v22) = v13;
  if (++v10 != 8)
    goto LABEL_47;
  return v9 + 1 == a2;
}

uint64_t *sub_20EDDE3FC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  float *v14;
  int v15;
  float v16;
  float v17;
  char v18;
  uint64_t v19;
  float *v20;
  float *v21;
  int v22;
  float v23;
  float v24;
  char v25;
  uint64_t v26;
  float *v27;
  float *v28;
  int v29;
  float v30;
  float v31;
  char v32;

  result = sub_20EDDDF4C(a1, a2, a3, **(_QWORD **)(a5 + 8));
  v11 = *a3;
  v12 = **(_QWORD **)(a5 + 8);
  v13 = (float *)(v12 + 8 * *a3);
  v14 = (float *)(v12 + 8 * *a4);
  if (*v14 == *v13)
    v15 = 0;
  else
    v15 = -127;
  if (*v14 > *v13)
    v15 = 1;
  if (*v14 < *v13)
    v15 = -1;
  if (!v15)
  {
    v16 = v14[1];
    v17 = v13[1];
    if (v16 == v17)
      v18 = 0;
    else
      v18 = -127;
    if (v16 > v17)
      v18 = 1;
    if (v16 < v17)
      LOBYTE(v15) = -1;
    else
      LOBYTE(v15) = v18;
  }
  if (v15 != 129 && (v15 & 0x80) != 0)
  {
    *a3 = *a4;
    *a4 = v11;
    v19 = *a2;
    v20 = (float *)(v12 + 8 * *a2);
    v21 = (float *)(v12 + 8 * *a3);
    if (*v21 == *v20)
      v22 = 0;
    else
      v22 = -127;
    if (*v21 > *v20)
      v22 = 1;
    if (*v21 < *v20)
      v22 = -1;
    if (!v22)
    {
      v23 = v21[1];
      v24 = v20[1];
      if (v23 == v24)
        v25 = 0;
      else
        v25 = -127;
      if (v23 > v24)
        v25 = 1;
      if (v23 < v24)
        LOBYTE(v22) = -1;
      else
        LOBYTE(v22) = v25;
    }
    if (v22 != 129 && (v22 & 0x80) != 0)
    {
      *a2 = *a3;
      *a3 = v19;
      v26 = *a1;
      v27 = (float *)(v12 + 8 * *a1);
      v28 = (float *)(v12 + 8 * *a2);
      if (*v28 == *v27)
        v29 = 0;
      else
        v29 = -127;
      if (*v28 > *v27)
        v29 = 1;
      if (*v28 < *v27)
        v29 = -1;
      if (!v29)
      {
        v30 = v28[1];
        v31 = v27[1];
        if (v30 == v31)
          v32 = 0;
        else
          v32 = -127;
        if (v30 > v31)
          v32 = 1;
        if (v30 < v31)
          LOBYTE(v29) = -1;
        else
          LOBYTE(v29) = v32;
      }
      if (v29 != 129 && (v29 & 0x80) != 0)
      {
        *a1 = *a2;
        *a2 = v26;
      }
    }
  }
  return result;
}

uint64_t *sub_20EDDE568(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  int v17;
  float v18;
  float v19;
  char v20;
  uint64_t v21;
  float *v22;
  float *v23;
  int v24;
  float v25;
  float v26;
  char v27;
  uint64_t v28;
  float *v29;
  float *v30;
  int v31;
  float v32;
  float v33;
  char v34;
  uint64_t v35;
  float *v36;
  float *v37;
  int v38;
  float v39;
  float v40;
  char v41;

  result = sub_20EDDE3FC(a1, a2, a3, a4, a6);
  v13 = *a4;
  v14 = **(_QWORD **)(a6 + 8);
  v15 = (float *)(v14 + 8 * *a4);
  v16 = (float *)(v14 + 8 * *a5);
  if (*v16 == *v15)
    v17 = 0;
  else
    v17 = -127;
  if (*v16 > *v15)
    v17 = 1;
  if (*v16 < *v15)
    v17 = -1;
  if (!v17)
  {
    v18 = v16[1];
    v19 = v15[1];
    if (v18 == v19)
      v20 = 0;
    else
      v20 = -127;
    if (v18 > v19)
      v20 = 1;
    if (v18 < v19)
      LOBYTE(v17) = -1;
    else
      LOBYTE(v17) = v20;
  }
  if (v17 != 129 && (v17 & 0x80) != 0)
  {
    *a4 = *a5;
    *a5 = v13;
    v21 = *a3;
    v22 = (float *)(v14 + 8 * *a3);
    v23 = (float *)(v14 + 8 * *a4);
    if (*v23 == *v22)
      v24 = 0;
    else
      v24 = -127;
    if (*v23 > *v22)
      v24 = 1;
    if (*v23 < *v22)
      v24 = -1;
    if (!v24)
    {
      v25 = v23[1];
      v26 = v22[1];
      if (v25 == v26)
        v27 = 0;
      else
        v27 = -127;
      if (v25 > v26)
        v27 = 1;
      if (v25 < v26)
        LOBYTE(v24) = -1;
      else
        LOBYTE(v24) = v27;
    }
    if (v24 != 129 && (v24 & 0x80) != 0)
    {
      *a3 = *a4;
      *a4 = v21;
      v28 = *a2;
      v29 = (float *)(v14 + 8 * *a2);
      v30 = (float *)(v14 + 8 * *a3);
      if (*v30 == *v29)
        v31 = 0;
      else
        v31 = -127;
      if (*v30 > *v29)
        v31 = 1;
      if (*v30 < *v29)
        v31 = -1;
      if (!v31)
      {
        v32 = v30[1];
        v33 = v29[1];
        if (v32 == v33)
          v34 = 0;
        else
          v34 = -127;
        if (v32 > v33)
          v34 = 1;
        if (v32 < v33)
          LOBYTE(v31) = -1;
        else
          LOBYTE(v31) = v34;
      }
      if (v31 != 129 && (v31 & 0x80) != 0)
      {
        *a2 = *a3;
        *a3 = v28;
        v35 = *a1;
        v36 = (float *)(v14 + 8 * *a1);
        v37 = (float *)(v14 + 8 * *a2);
        if (*v37 == *v36)
          v38 = 0;
        else
          v38 = -127;
        if (*v37 > *v36)
          v38 = 1;
        if (*v37 < *v36)
          v38 = -1;
        if (!v38)
        {
          v39 = v37[1];
          v40 = v36[1];
          if (v39 == v40)
            v41 = 0;
          else
            v41 = -127;
          if (v39 > v40)
            v41 = 1;
          if (v39 < v40)
            LOBYTE(v38) = -1;
          else
            LOBYTE(v38) = v41;
        }
        if (v38 != 129 && (v38 & 0x80) != 0)
        {
          *a1 = *a2;
          *a2 = v35;
        }
      }
    }
  }
  return result;
}

void sub_20EDDE734(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EDDE75C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3odt28image_detection_and_tracking28CreateKeyFrameWithDistortionERKNSt3__15arrayIdLm9EEERKNS"
                     "3_IdLm4EEERKNS_3vio8cv_types5ImageIhEEbmRKNS2_10shared_ptrINS0_7imgproc18ExternalDistortionEEERKNS2"
                     "_8optionalINSH_13VisibleRegionEEEbE3$_0")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3odt28image_detection_and_tracking28CreateKeyFrameWithDistortionERKNSt3__15arrayI"
                                "dLm9EEERKNS3_IdLm4EEERKNS_3vio8cv_types5ImageIhEEbmRKNS2_10shared_ptrINS0_7imgproc18Exte"
                                "rnalDistortionEEERKNS2_8optionalINSH_13VisibleRegionEEEbE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3odt28image_detection_and_tracking28CreateKeyFrameWithDistortionERKNSt3__15arrayIdLm9EEERKNS3_IdLm4EEERKNS_3vio8cv_types5ImageIhEEbmRKNS2_10shared_ptrINS0_7imgproc18ExternalDistortionEEERKNS2_8optionalINSH_13VisibleRegionEEEbE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3odt28image_detection_and_tracking28CreateKeyFrameWithDistortionERKNSt3__15arrayIdLm9EEERKNS3_IdLm4EEERKNS_3vio8cv_types5ImageIhEEbmRKNS2_10shared_ptrINS0_7imgproc18ExternalDistortionEEERKNS2_8optionalINSH_13VisibleRegionEEEbE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EDDE7CC(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[5];
      if (v3)
      {
        v2[6] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20EDDE818(uint64_t a1, __int128 *a2)
{
  char *v4;
  uint64_t v5;
  unint64_t *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  double v25;
  double v26;
  double v27;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char **v36;
  char *v37;
  std::__shared_weak_count *v38;

  *(_QWORD *)a1 = a1;
  *(_QWORD *)(a1 + 8) = a1;
  v36 = (char **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 152) = 1;
  *(_BYTE *)(a1 + 154) = 0;
  if (*(_QWORD *)a2)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 128, (uint64_t)"config.num_buckets > 0", 22, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v5 = *(_QWORD *)(a1 + 40);
    v4 = *(char **)(a1 + 24);
  }
  v6 = (unint64_t *)(a1 + 56);
  v7 = *a2;
  v8 = a2[2];
  *(_OWORD *)(a1 + 72) = a2[1];
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 56) = v7;
  v9 = a2[3];
  v10 = a2[4];
  v11 = a2[5];
  *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 120) = v10;
  *(_OWORD *)(a1 + 136) = v11;
  *(_OWORD *)(a1 + 104) = v9;
  v12 = *(_QWORD *)(a1 + 56);
  if (v12 > (v5 - (uint64_t)v4) >> 4)
  {
    if (v12 >> 60)
      sub_20E867F44();
    v13 = *(char **)(a1 + 32);
    v14 = (char *)operator new(16 * v12);
    v15 = &v14[16 * v12];
    v16 = &v14[v13 - v4];
    if (v13 == v4)
    {
      *(_QWORD *)(a1 + 24) = v16;
      *(_QWORD *)(a1 + 32) = v16;
      *(_QWORD *)(a1 + 40) = v15;
    }
    else
    {
      v17 = &v14[v13 - v4];
      do
      {
        v18 = *((_OWORD *)v13 - 1);
        v13 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(_QWORD *)v13 = 0;
        *((_QWORD *)v13 + 1) = 0;
      }
      while (v13 != v4);
      v4 = *(char **)(a1 + 24);
      v19 = *(char **)(a1 + 32);
      *(_QWORD *)(a1 + 24) = v17;
      *(_QWORD *)(a1 + 32) = v16;
      *(_QWORD *)(a1 + 40) = v15;
      while (v19 != v4)
      {
        v20 = (std::__shared_weak_count *)*((_QWORD *)v19 - 1);
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v19 -= 16;
      }
    }
    if (v4)
      operator delete(v4);
  }
  if (*v6)
  {
    v23 = 0;
    do
    {
      v24 = (char *)operator new(0x118uLL);
      *(_OWORD *)(v24 + 88) = xmmword_210378B40;
      *(_OWORD *)(v24 + 104) = unk_210378B50;
      *(_OWORD *)(v24 + 120) = xmmword_210378B60;
      *(_OWORD *)(v24 + 136) = unk_210378B70;
      *(_OWORD *)(v24 + 24) = xmmword_210378B00;
      *(_OWORD *)(v24 + 40) = *(_OWORD *)algn_210378B10;
      *(_OWORD *)(v24 + 56) = xmmword_210378B20;
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = &off_24C9E99A8;
      *(_OWORD *)(v24 + 72) = unk_210378B30;
      *((_QWORD *)v24 + 33) = 0;
      *(_OWORD *)(v24 + 248) = 0u;
      *(_OWORD *)(v24 + 232) = 0u;
      *(_OWORD *)(v24 + 216) = 0u;
      *(_OWORD *)(v24 + 200) = 0u;
      *(_OWORD *)(v24 + 184) = 0u;
      *(_OWORD *)(v24 + 168) = 0u;
      *(_OWORD *)(v24 + 152) = 0u;
      *((_WORD *)v24 + 136) = 1;
      v25 = *((double *)a2 + 4);
      v24[274] = 0;
      if (v25 < 0.0)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 115, (uint64_t)"config.base_pose_smoothing_factor >= 0", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_53;
        }
        v25 = *((double *)a2 + 4);
      }
      if (v25 > 1.0
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 116, (uint64_t)"config.base_pose_smoothing_factor <= 1", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_53;
      }
      v26 = *((double *)a2 + 3);
      if (v26 < 0.0)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 117, (uint64_t)"config.base_weight_smoothing_factor >= 0", 40, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_53;
        }
        v26 = *((double *)a2 + 3);
      }
      if (v26 > 1.0
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 118, (uint64_t)"config.base_weight_smoothing_factor <= 1", 40, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| !*((_QWORD *)a2 + 9)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 119, (uint64_t)"config.max_frame_interval > 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| !*((_QWORD *)a2 + 10)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp",
             120,
             (uint64_t)"config.min_bucket_activation_hit_count > 0",
             42,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0)
        || *((double *)a2 + 11) <= 0.0
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 121, (uint64_t)"config.min_bucket_activation_weight > 0", 39, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_53;
      }
      v27 = *((double *)a2 + 6);
      if (v27 < 0.0)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 122, (uint64_t)"config.min_pose_smoothing_factor >= 0", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_53;
        }
        v27 = *((double *)a2 + 6);
      }
      if (v27 > 1.0
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 123, (uint64_t)"config.min_pose_smoothing_factor <= 1", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_53:
        abort();
      }
      v28 = *(__int128 *)((char *)a2 + 56);
      *(_OWORD *)(v24 + 216) = *(__int128 *)((char *)a2 + 40);
      *(_OWORD *)(v24 + 232) = v28;
      *(_OWORD *)(v24 + 248) = *(__int128 *)((char *)a2 + 72);
      *(_OWORD *)(v24 + 259) = *(__int128 *)((char *)a2 + 83);
      v29 = *(__int128 *)((char *)a2 + 24);
      *(_OWORD *)(v24 + 184) = *(__int128 *)((char *)a2 + 8);
      *(_OWORD *)(v24 + 200) = v29;
      v37 = v24 + 24;
      v38 = (std::__shared_weak_count *)v24;
      v30 = *(_QWORD **)(a1 + 32);
      if ((unint64_t)v30 < *(_QWORD *)(a1 + 40))
      {
        *v30 = v24 + 24;
        v30[1] = v24;
        *(_QWORD *)(a1 + 32) = v30 + 2;
      }
      else
      {
        v31 = sub_20EAFDCA4(v36, (uint64_t)&v37);
        v32 = v38;
        *(_QWORD *)(a1 + 32) = v31;
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
      }
      ++v23;
    }
    while (v23 < *v6);
  }
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_20EDDED18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t *v10;

  sub_20E8C3144(a10);
  sub_20EDDED88(v10);
  _Unwind_Resume(a1);
}

void sub_20EDDED5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  void *v13;

  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v13);
  sub_20E8C3144(a10);
  sub_20EDDED88(v10);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EDDED88(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (std::__shared_weak_count *)v3[3];
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void sub_20EDDEE30(uint64_t *a1@<X0>, float64x2_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>, float64x2_t _Q0@<Q0>, float64x2_t a6@<Q2>, float64x2_t _Q3@<Q3>, float64x2_t a8@<Q7>)
{
  unint64_t v8;
  double v9;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _OWORD *v17;
  std::__shared_weak_count *v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t *v24;
  double v25;
  double v26;
  uint64_t *v27;
  float64x2_t *v28;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  BOOL v58;
  uint64_t v59;
  double v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  unint64_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v71;
  double v72;
  double v74;
  double v76;
  float64x2_t v77;
  float64x2_t v81;
  float64x2_t v83;
  float64x2_t v84;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v96;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  __double2 v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  double v120;
  double v121;
  double cosval;
  double v123;
  __double2 v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64_t v129;
  float64_t v130;
  float64_t v131;
  double v132;
  float64_t v133;
  float64_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  uint64_t v157;
  double v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  double v165;
  float64x2_t v166;
  uint64_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64_t v172;
  float64_t v173;
  double v174;
  float64x2_t v175;
  float64x2_t v176[3];
  double *v177[2];
  float64x2_t *v178[2];
  float64x2_t v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  float64x2_t v185;
  __int128 v186;
  uint64_t v187;

  v8 = a3;
  v9 = _Q0.f64[0];
  v187 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    a1[6] = a3;
    v13 = (uint64_t *)a1[1];
    if (v13 != a1)
    {
      do
      {
        while (1)
        {
LABEL_7:
          v15 = v13 + 2;
          v14 = v13[2];
          if (*(_QWORD *)(v14 + 152) >= v8
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 32, (uint64_t)"current_frame_idx > last_frame_idx_", 35, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_94;
          }
          if (*(double *)(v14 + 128) <= 0.0 || v8 - *(_QWORD *)(v14 + 152) > *(_QWORD *)(v14 + 224))
            break;
          v13 = (uint64_t *)v13[1];
          if (v13 == a1)
            goto LABEL_20;
        }
        v16 = *v15;
        *(_OWORD *)(v16 + 128) = 0u;
        *(_OWORD *)(v16 + 144) = 0u;
        v17 = (_OWORD *)a1[4];
        if ((unint64_t)v17 >= a1[5])
        {
          v19 = sub_20EAFDCA4((char **)a1 + 3, (uint64_t)(v13 + 2));
          v18 = (std::__shared_weak_count *)v13[3];
        }
        else
        {
          v18 = 0;
          *v17 = *(_OWORD *)v15;
          v19 = (char *)(v17 + 1);
          *v15 = 0;
          v13[3] = 0;
        }
        a1[4] = (uint64_t)v19;
        v20 = *v13;
        v21 = (uint64_t *)v13[1];
        *(_QWORD *)(v20 + 8) = v21;
        *(_QWORD *)v13[1] = v20;
        --a1[2];
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        operator delete(v13);
        v13 = v21;
      }
      while (v21 != a1);
LABEL_20:
      v24 = (uint64_t *)a1[1];
      if (v24 != a1)
      {
        v25 = 1.79769313e308;
        v26 = -1.79769313e308;
        v27 = a1;
        do
        {
          v28 = (float64x2_t *)v24[2];
          if (v28[8].f64[0] < 0.0
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 49, (uint64_t)"accumulated_weight_ >= 0", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_94;
          }
          _Q0.f64[0] = a2[7].f64[0];
          a6.f64[0] = v28[7].f64[0];
          _Q3 = v28[6];
          a6 = vsubq_f64(_Q0, a6);
          _Q1 = vsubq_f64(a2[6], _Q3);
          _Q0 = vmulq_f64(_Q1, _Q1);
          _Q3.f64[0] = _Q1.f64[1];
          __asm { FMLA            D0, D3, V1.D[1] }
          _Q0.f64[0] = vmlad_n_f64(_Q0.f64[0], a6.f64[0], a6.f64[0]);
          if (_Q0.f64[0] < v28[10].f64[1])
          {
            _Q1.f64[0] = a2[1].f64[0];
            a8.f64[0] = v28[1].f64[0];
            a6 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*a2, v28->f64[0]), a2[2], v28[2].f64[0]), a2[4], v28[4].f64[0]), (float64x2_t)vdupq_laneq_s64((int64x2_t)vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(*a2, *v28, 1), a2[2], v28[2], 1), a2[4], v28[4], 1), 1));
            _Q1.f64[0] = (vmulq_f64(_Q1, a8).f64[0]
                        + a2[3].f64[0] * v28[3].f64[0]
                        + a2[5].f64[0] * v28[5].f64[0]
                        + a6.f64[0]
                        + -1.0)
                       * 0.5;
            _NF = _Q1.f64[0] > v28[10].f64[0] && v26 < _Q1.f64[0];
            if (_NF && v25 > _Q0.f64[0])
            {
              v25 = _Q0.f64[0];
              v26 = _Q1.f64[0];
              v27 = v24;
            }
          }
          v24 = (uint64_t *)v24[1];
        }
        while (v24 != a1);
        if (v27 != a1)
        {
          v35 = (uint64_t *)a1[1];
          if (v27 == v35)
          {
            v38 = 1;
            v39 = a1[1];
            if (*((_BYTE *)a1 + 154))
              goto LABEL_54;
          }
          else
          {
            v36 = v27[2];
            v27[2] = v35[2];
            v35[2] = v36;
            v37 = v27[3];
            v27[3] = v35[3];
            v35[3] = v37;
            v38 = 1;
            v39 = a1[1];
            if (*((_BYTE *)a1 + 154))
              goto LABEL_54;
          }
          goto LABEL_57;
        }
      }
    }
  }
  else
  {
    v8 = a1[6] + 1;
    a1[6] = v8;
    v13 = (uint64_t *)a1[1];
    if (v13 != a1)
      goto LABEL_7;
  }
  v40 = a1[4];
  if (a1[3] == v40)
  {
    v46 = (char *)*a1;
    v47 = a1[1];
    if (*a1 != v47)
    {
      v48 = *((_QWORD *)v46 + 2);
      *((_QWORD *)v46 + 2) = *(_QWORD *)(v47 + 16);
      *(_QWORD *)(v47 + 16) = v48;
      v49 = *((_QWORD *)v46 + 3);
      *((_QWORD *)v46 + 3) = *(_QWORD *)(v47 + 24);
      *(_QWORD *)(v47 + 24) = v49;
      v46 = (char *)a1[1];
    }
    v38 = 0;
    v50 = *((_QWORD *)v46 + 2);
    *(_OWORD *)(v50 + 128) = 0u;
    *(_OWORD *)(v50 + 144) = 0u;
    v39 = a1[1];
    if (*((_BYTE *)a1 + 154))
    {
LABEL_54:
      v55 = a1[4] - a1[3];
      v57 = a1 + 6;
      v56 = a1[6];
      v58 = v57[1] - 1 == v55 >> 4;
      v59 = *(_QWORD *)(v39 + 16);
      if (*(_QWORD *)(v59 + 152) < v56)
        goto LABEL_59;
      goto LABEL_58;
    }
  }
  else
  {
    v41 = operator new(0x20uLL);
    v41[2] = *(_QWORD *)(v40 - 16);
    v42 = *(_QWORD *)(v40 - 8);
    v41[3] = v42;
    if (v42)
    {
      v43 = (unint64_t *)(v42 + 8);
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
      v40 = a1[4];
      v45 = *(std::__shared_weak_count **)(v40 - 8);
    }
    else
    {
      v45 = 0;
    }
    v51 = (_QWORD *)a1[1];
    *v41 = a1;
    v41[1] = v51;
    *v51 = v41;
    v52 = a1[2] + 1;
    a1[1] = (uint64_t)v41;
    a1[2] = v52;
    if (v45)
    {
      v53 = (unint64_t *)&v45->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v38 = 0;
    a1[4] = v40 - 16;
    v39 = a1[1];
    if (*((_BYTE *)a1 + 154))
      goto LABEL_54;
  }
LABEL_57:
  v58 = 0;
  v59 = *(_QWORD *)(v39 + 16);
  v56 = a1[6];
  if (*(_QWORD *)(v59 + 152) < v56)
    goto LABEL_59;
LABEL_58:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 63, (uint64_t)"frame_idx > last_frame_idx_", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_94;
  }
LABEL_59:
  v60 = *(double *)(v59 + 128);
  if (v60 != 0.0)
  {
    v183 = xmmword_210378B40;
    v184 = unk_210378B50;
    v185 = (float64x2_t)xmmword_210378B60;
    v186 = unk_210378B70;
    v179 = (float64x2_t)xmmword_210378B00;
    v180 = *(_OWORD *)algn_210378B10;
    v68.f64[1] = 1.0;
    v181 = xmmword_210378B20;
    v182 = unk_210378B30;
    v68.f64[0] = a2[1].f64[0];
    _Q3.f64[0] = a2[3].f64[0];
    v69 = a2[2];
    _D5 = a2[5].f64[0];
    v71 = a2[4];
    a8.f64[0] = *(float64_t *)(v59 + 16);
    v72 = *(double *)(v59 + 48);
    _Q18 = *(float64x2_t *)(v59 + 32);
    v74 = *(double *)(v59 + 80);
    _Q20 = *(float64x2_t *)(v59 + 64);
    v76 = vmlad_n_f64(vmlad_n_f64(v68.f64[0] * *(double *)v59, _Q3.f64[0], _Q18.f64[0]), _D5, _Q20.f64[0]);
    v77 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(*a2, *(float64x2_t *)v59, 1), v69, _Q18, 1), v71, _Q20, 1);
    __asm
    {
      FMLA            D16, D3, V18.D[1]
      FMLA            D16, D5, V20.D[1]
    }
    _Q2 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*a2, a8.f64[0]), v69, v72), v71, v74);
    v81 = vmulq_f64(v68, a8);
    v179 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*a2, *(double *)v59), v69, _Q18.f64[0]), v71, _Q20.f64[0]);
    *(double *)&v180 = v76;
    v181 = (__int128)v77;
    *(_QWORD *)&v182 = _D16;
    v183 = (__int128)_Q2;
    *(double *)&v184 = v81.f64[0] + _Q3.f64[0] * v72 + _D5 * v74;
    _Q3.f64[0] = *(float64_t *)(v59 + 112);
    _Q4 = *(float64x2_t *)(v59 + 96);
    v83 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v179, _Q4.f64[0]), v77, _Q4, 1), _Q2, _Q3.f64[0]);
    __asm { FMLA            D2, D16, V4.D[1] }
    v81.f64[0] = _Q2.f64[0] + *(double *)&v184 * _Q3.f64[0];
    _Q2.f64[0] = a2[7].f64[0];
    v84 = a2[6];
    v185 = vsubq_f64(v84, v83);
    *(_QWORD *)&v186 = *(_OWORD *)&vsubq_f64(_Q2, v81);
    *(_QWORD *)&v81.f64[0] = *(_OWORD *)&vsubq_f64(_Q2, _Q3);
    _Q4.f64[0] = vsubq_f64(v84, _Q4).f64[1];
    __asm { FMLA            D3, D4, V2.D[1] }
    if (vmlad_n_f64(_D3, v81.f64[0], v81.f64[0]) >= *(double *)(v59 + 168)
      || (v179.f64[0] + *((double *)&v181 + 1) + *(double *)&v184 + -1.0) * 0.5 <= *(double *)(v59 + 160))
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 75, (uint64_t)"dist_T < config_.max_translation_square && cos_angle > config_.min_cosine_angle", 79, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v60 = *(double *)(v59 + 128);
    }
    v86 = v9 / v60;
    v87 = *(double *)(v59 + 184);
    v88 = v86 * *(double *)(v59 + 176);
    v89 = *(double *)(v59 + 216);
    if (*(double *)(v59 + 208) < v88)
      v88 = *(double *)(v59 + 208);
    v90 = *(double *)(v59 + 200);
    if (v88 < *(double *)(v59 + 192))
      v88 = *(double *)(v59 + 192);
    *(_QWORD *)(v59 + 136) = (unint64_t)((v9 - (double)*(unint64_t *)(v59 + 136)) * v88
                                              + (double)*(unint64_t *)(v59 + 136));
    v91 = v86 * v87;
    if (v89 < v91)
      v91 = v89;
    memset(v176, 0, sizeof(v176));
    if (v91 < v90)
      v91 = v90;
    v174 = v91;
    v178[0] = &v179;
    v178[1] = 0;
    v177[0] = (double *)v176;
    v177[1] = 0;
    sub_20E95B988(v178, v177);
    v94.f64[0] = v176[1].f64[0];
    _Q18 = v176[0];
    v96 = (float64x2_t)vextq_s8((int8x16_t)_Q18, (int8x16_t)_Q18, 8uLL);
    _Q0 = vmulq_f64(_Q18, _Q18);
    _Q1.f64[0] = v176[0].f64[1];
    __asm { FMLA            D0, D1, V18.D[1] }
    v99 = _Q0.f64[0] + v94.f64[0] * v94.f64[0];
    if (v99 >= 0.0000002635)
    {
      v103 = sqrt(v99);
      v170 = v176[0];
      v172 = v176[1].f64[0];
      v168 = v96;
      v104 = __sincos_stret(v103);
      v96 = v168;
      _Q18 = v170;
      v94.f64[0] = v172;
      v101 = v174;
      v100 = v104.__sinval / v103;
      _Q0.f64[0] = 1.0 / v99 * (1.0 - v104.__cosval);
      _Q1.f64[0] = 1.0 / v99 * (1.0 - v104.__sinval / v103);
      if (v99 >= 2.775e-15)
      {
LABEL_76:
        v102 = (_Q0.f64[0] * 0.5 - _Q1.f64[0]) / v100;
        _Q0.f64[0] = (_Q0.f64[0] + v100 * -0.5) / (v99 * _Q0.f64[0]);
        if (v99 <= 9.0)
          _Q0.f64[0] = v102;
LABEL_81:
        *(_QWORD *)&_Q1.f64[0] = v186;
        v105.f64[0] = v96.f64[0];
        v105.f64[1] = v94.f64[0];
        v106 = (float64x2_t)vextq_s8((int8x16_t)v185, (int8x16_t)_Q1, 8uLL);
        v107 = vsubq_f64(vmulq_laneq_f64(_Q18, v185, 1), vmulq_f64(v96, v185));
        __asm { FMOV            V6.2D, #-0.5 }
        v109 = vaddq_f64(_Q1, vmulq_f64(v107, _Q6));
        _Q1.f64[1] = v185.f64[0];
        v94.f64[1] = _Q18.f64[0];
        v110 = vsubq_f64(vmulq_f64(v105, _Q1), vmulq_f64(v94, v106));
        v111 = (float64x2_t)vextq_s8((int8x16_t)v110, (int8x16_t)v107, 8uLL);
        v107.f64[1] = v110.f64[0];
        _Q3 = vmulq_f64(v105, v107);
        v113 = vmulq_laneq_f64(_Q18, v110, 1);
        v114 = vmulq_f64(v94, v111);
        *(float64x2_t *)((char *)&v176[1] + 8) = vaddq_f64(vaddq_f64(v185, vmulq_f64(v110, _Q6)), vmulq_n_f64(vsubq_f64(_Q3, v114), _Q0.f64[0]));
        *(_QWORD *)&v176[2].f64[1] = *(_OWORD *)&vaddq_f64(v109, vmulq_f64(_Q0, vsubq_f64(v113, vmulq_f64(v96, v110))));
        _Q30 = (int8x16_t)vmulq_n_f64(v176[0], v101);
        v116 = (float64x2_t)vextq_s8(_Q30, _Q30, 8uLL);
        v117 = vmulq_n_f64(v176[2], v101);
        v118 = vmulq_n_f64(v176[1], v101);
        v92.f64[0] = v117.f64[1];
        v93.f64[0] = v118.f64[1];
        _D0 = _Q30.i64[1];
        __asm { FMLA            D3, D0, V30.D[1] }
        v120 = vmlad_n_f64(_Q3.f64[0], v118.f64[0], v118.f64[0]);
        if (v120 >= 0.0000002635)
        {
          v123 = sqrt(v120);
          v173 = v118.f64[0];
          v175 = v116;
          v169 = v117;
          v171 = v92;
          v166 = v93;
          v167 = _Q30.i64[0];
          v165 = v120;
          v124 = __sincos_stret(v123);
          cosval = v124.__cosval;
          v93 = v166;
          _Q30.i64[0] = v167;
          v117 = v169;
          v92 = v171;
          v118.f64[0] = v173;
          v116 = v175;
          v121 = v124.__sinval / v123;
          v113.f64[0] = 1.0 / v165 * (1.0 - v124.__cosval);
          v114.f64[0] = 1.0 / v165 * (1.0 - v124.__sinval / v123);
        }
        else
        {
          v113.f64[0] = 0.5 - v120 * (v120 / -720.0 + 0.0416666667);
          v114.f64[0] = 0.166666667 - v120 * (v120 / -5040.0 + 0.00833333333);
          v121 = 1.0 - v120 * v114.f64[0];
          cosval = 1.0 - v120 * v113.f64[0];
        }
        *(_QWORD *)&v126.f64[1] = unk_210378B58;
        *(_QWORD *)&v125.f64[1] = unk_210378B78;
        *(_QWORD *)&v127.f64[0] = _Q30.i64[0];
        v127.f64[1] = v116.f64[0];
        v128.f64[0] = *(double *)_Q30.i64 * (*(double *)_Q30.i64 * v113.f64[0]) + cosval;
        v129 = v116.f64[0] * (*(double *)_Q30.i64 * v113.f64[0]);
        v130 = v118.f64[0] * (*(double *)_Q30.i64 * v113.f64[0]);
        v131 = v118.f64[0] * (v116.f64[0] * v113.f64[0]);
        v132 = *(double *)_Q30.i64 * v121;
        v133 = v116.f64[0] * v121;
        v134 = v118.f64[0] * v121;
        v135.f64[0] = v129 - v118.f64[0] * v121;
        v128.f64[1] = v129 + v134;
        v136.f64[0] = v130 + v133;
        *(_QWORD *)&v138.f64[1] = unk_210378B38;
        v137.f64[1] = 0.0;
        v137.f64[0] = v130 - v133;
        v135.f64[1] = v116.f64[0] * (v116.f64[0] * v113.f64[0]) + cosval;
        v138.f64[0] = v131 + v132;
        v136.f64[1] = v131 - v132;
        v126.f64[0] = v118.f64[0] * (v118.f64[0] * v113.f64[0]) + cosval;
        v139.f64[0] = v116.f64[0];
        v139.f64[1] = v118.f64[0];
        v140.f64[0] = v92.f64[0];
        v140.f64[1] = v93.f64[0];
        v141.f64[0] = v93.f64[0];
        v141.f64[1] = v117.f64[0];
        *(_QWORD *)&v118.f64[1] = _Q30.i64[0];
        v142.f64[0] = v117.f64[0];
        v142.f64[1] = v92.f64[0];
        v143 = vsubq_f64(vmulq_f64(v139, v140), vmulq_f64(v118, v142));
        v144 = vsubq_f64(vmulq_f64(v127, v117), vmulq_f64(v116, v93));
        v145 = vaddq_f64(v141, vmulq_n_f64(v143, v113.f64[0]));
        v146 = vaddq_f64(v92, vmulq_f64(v144, v113));
        v147 = (float64x2_t)vextq_s8((int8x16_t)v143, (int8x16_t)v144, 8uLL);
        v144.f64[1] = v143.f64[0];
        v148 = vaddq_f64(v145, vmulq_n_f64(vsubq_f64(vmulq_f64(v139, v144), vmulq_f64(v118, v147)), v114.f64[0]));
        *(_QWORD *)&v125.f64[0] = *(_OWORD *)&vaddq_f64(v146, vmulq_f64(vsubq_f64(vmulq_laneq_f64(v127, v143, 1), vmulq_f64(v116, v143)), v114));
        v149 = *(float64x2_t *)(v59 + 16);
        v151 = *(float64x2_t *)(v59 + 32);
        v150 = *(float64x2_t *)(v59 + 48);
        v153 = *(float64x2_t *)(v59 + 64);
        v152 = *(float64x2_t *)(v59 + 80);
        v155 = *(float64x2_t *)(v59 + 96);
        v154 = *(float64x2_t *)(v59 + 112);
        v156 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v137, *(double *)v59), v138, *(float64x2_t *)v59, 1), v126, v149.f64[0]), v125, v149, 1);
        *(float64x2_t *)v59 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v128, *(double *)v59), v135, *(float64x2_t *)v59, 1), v136, v149.f64[0]), v148, v149, 1);
        *(float64x2_t *)(v59 + 16) = v156;
        *(float64x2_t *)(v59 + 32) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v128, v151.f64[0]), v135, v151, 1), v136, v150.f64[0]), v148, v150, 1);
        *(float64x2_t *)(v59 + 48) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v137, v151.f64[0]), v138, v151, 1), v126, v150.f64[0]), v125, v150, 1);
        *(float64x2_t *)(v59 + 64) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v128, v153.f64[0]), v135, v153, 1), v136, v152.f64[0]), v148, v152, 1);
        *(float64x2_t *)(v59 + 80) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v137, v153.f64[0]), v138, v153, 1), v126, v152.f64[0]), v125, v152, 1);
        *(float64x2_t *)(v59 + 96) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v128, v155.f64[0]), v135, v155, 1), v136, v154.f64[0]), v148, v154, 1);
        *(float64x2_t *)(v59 + 112) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v137, v155.f64[0]), v138, v155, 1), v126, v154.f64[0]), v125, v154, 1);
        sub_20EB70E00(v59);
        v9 = *(double *)(v59 + 128) + v9;
        *(double *)(v59 + 128) = v9;
        v67 = *(_QWORD *)(v59 + 144) + 1;
        *(_QWORD *)(v59 + 144) = v67;
        *(_QWORD *)(v59 + 152) = v56;
        if (v58)
          goto LABEL_88;
        goto LABEL_85;
      }
    }
    else
    {
      _Q0.f64[0] = 0.5 - v99 * (v99 / -720.0 + 0.0416666667);
      _Q1.f64[0] = 0.166666667 - v99 * (v99 / -5040.0 + 0.00833333333);
      v100 = 1.0 - v99 * _Q1.f64[0];
      v101 = v174;
      if (v99 >= 2.775e-15)
        goto LABEL_76;
    }
    _Q0.f64[0] = v99 * 0.0000330687831 + v99 * 0.00138888889 + 0.0833333333;
    goto LABEL_81;
  }
  v61 = *a2;
  v62 = a2[1];
  v63 = a2[3];
  *(float64x2_t *)(v59 + 32) = a2[2];
  *(float64x2_t *)(v59 + 48) = v63;
  *(float64x2_t *)v59 = v61;
  *(float64x2_t *)(v59 + 16) = v62;
  v64 = a2[4];
  v65 = a2[5];
  v66 = a2[7];
  *(float64x2_t *)(v59 + 96) = a2[6];
  *(float64x2_t *)(v59 + 112) = v66;
  *(float64x2_t *)(v59 + 64) = v64;
  *(float64x2_t *)(v59 + 80) = v65;
  v67 = 1;
  *(_QWORD *)(v59 + 136) = (unint64_t)v9;
  *(_QWORD *)(v59 + 144) = 1;
  *(double *)(v59 + 128) = v9;
  *(_QWORD *)(v59 + 152) = v56;
  if (v58)
    goto LABEL_88;
LABEL_85:
  if (v67 < *(_QWORD *)(v59 + 232) || v9 < *(double *)(v59 + 240))
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 144) = 0;
    return;
  }
LABEL_88:
  v157 = *(_QWORD *)(v39 + 16);
  v158 = *(double *)(v157 + 128);
  v159 = v157;
  if (v158 < 0.0)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 105, (uint64_t)"accumulated_weight_ >= 0", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_94;
    }
    v159 = *(_QWORD *)(v39 + 16);
    v158 = *(double *)(v159 + 128);
  }
  v183 = *(_OWORD *)(v157 + 64);
  v184 = *(_OWORD *)(v157 + 80);
  v185 = *(float64x2_t *)(v157 + 96);
  v186 = *(_OWORD *)(v157 + 112);
  v179 = *(float64x2_t *)v157;
  v180 = *(_OWORD *)(v157 + 16);
  v181 = *(_OWORD *)(v157 + 32);
  v182 = *(_OWORD *)(v157 + 48);
  if (v158 < 0.0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 110, (uint64_t)"accumulated_weight_ >= 0", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_94:
    abort();
  }
  v160 = *(_QWORD *)(v159 + 136);
  v161 = v184;
  *(_OWORD *)(a4 + 64) = v183;
  *(_OWORD *)(a4 + 80) = v161;
  v162 = v186;
  *(float64x2_t *)(a4 + 96) = v185;
  *(_OWORD *)(a4 + 112) = v162;
  v163 = v180;
  *(float64x2_t *)a4 = v179;
  *(_OWORD *)(a4 + 16) = v163;
  v164 = v182;
  *(_OWORD *)(a4 + 32) = v181;
  *(_OWORD *)(a4 + 48) = v164;
  *(_QWORD *)(a4 + 128) = v160;
  *(_BYTE *)(a4 + 136) = v38;
  *(_BYTE *)(a4 + 144) = 1;
}

void sub_20EDDFB64(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E99A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EDDFB74(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E99A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EDDFBAC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, float64x2_t a5@<Q1>)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  double v33;
  float64x2_t *v34;
  float64x2_t v44;
  double v45;
  int8x16_t v46;
  unint64_t v47;
  double v48;
  double v49;
  float64x2_t v50;
  double v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  unint64_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  unint64_t v66;
  float64x2_t v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  float64x2_t v73;
  float64x2_t v74;
  double v75;
  double v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  double v84;
  float64x2_t v85;
  float64x2_t v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  __n128 result;
  double v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  uint64_t v105;
  float64_t v106;
  double v107;
  float64_t v108;
  float64x2_t v109;
  _QWORD v110[3];
  float64x2_t v111;
  float64x2_t v112;

  v8 = *(double *)(a2 + 8);
  v9 = *(double *)(a2 + 16);
  v10 = *(double *)(a2 + 32);
  v11 = *(double *)(a2 + 40);
  v12 = *(double *)(a2 + 48);
  v13 = *(double *)(a2 + 64);
  v14 = *(double *)(a2 + 72);
  v15 = *(double *)(a2 + 80);
  v16 = *(double *)a2 + 1.0;
  v17 = v16 + v11 + v15;
  v18 = v16 - v11 - v15;
  v19 = 1.0 - *(double *)a2;
  v20 = v19 + v11 - v15;
  v21 = v19 - v11 + v15;
  v22 = v12 + v14;
  v23 = v17 < v18;
  if (v17 >= v18)
    v24 = v17;
  else
    v24 = v18;
  if (v24 >= v20)
    v25 = v24;
  else
    v25 = v20;
  if (v24 < v20)
    v23 = 2;
  v26 = v9 - v13;
  v27 = v8 + v10;
  if (v25 < v21)
    v23 = 3;
  if (v23 == 2)
  {
    v112.f64[0] = sqrt(v20) * 0.5;
    v111.f64[0] = v26 / (v112.f64[0] * 4.0);
    v111.f64[1] = v27 / (v112.f64[0] * 4.0);
    v31 = v22 / (v112.f64[0] * 4.0);
    v32 = 3;
  }
  else
  {
    v28 = v14 - v12;
    v29 = v9 + v13;
    if (v23 == 1)
    {
      v33 = sqrt(v18) * 0.5;
      v111.f64[0] = v28 / (v33 * 4.0);
      v111.f64[1] = v33;
      v112.f64[0] = v27 / (v33 * 4.0);
      v31 = v29 / (v33 * 4.0);
      v32 = 3;
    }
    else
    {
      v30 = v10 - v8;
      if (v23)
      {
        v112.f64[1] = sqrt(v21) * 0.5;
        v111.f64[0] = v30 / (v112.f64[1] * 4.0);
        v111.f64[1] = v29 / (v112.f64[1] * 4.0);
        v31 = v22 / (v112.f64[1] * 4.0);
        v32 = 2;
      }
      else
      {
        v111.f64[0] = sqrt(v17) * 0.5;
        v111.f64[1] = v28 / (v111.f64[0] * 4.0);
        v112.f64[0] = v26 / (v111.f64[0] * 4.0);
        v31 = v30 / (v111.f64[0] * 4.0);
        v32 = 3;
      }
    }
  }
  v107 = *(double *)(a2 + 24);
  v105 = *(_QWORD *)(a2 + 56);
  a5.f64[0] = *(float64_t *)(a2 + 88);
  v109 = a5;
  v111.f64[v32] = v31;
  v34 = (float64x2_t *)(a1 + 272);
  if (*(double *)(a1 + 264) > 0.0)
  {
    _Q3 = *v34;
    _Q2 = *(_OWORD *)(a1 + 288);
    _D5 = v111.f64[1];
    __asm { FMLA            D4, D5, V3.D[1] }
    _Q3.f64[0] = v112.f64[1];
    __asm { FMLA            D4, D3, V2.D[1] }
    if (_D4 >= 0.0)
      goto LABEL_22;
    v111 = vnegq_f64(v111);
    v112 = vnegq_f64(v112);
  }
  v44 = v112;
  *v34 = v111;
  *(float64x2_t *)(a1 + 288) = v44;
LABEL_22:
  if (a4 < 0.0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 46, (uint64_t)"timestamp >= 0", 14, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0)|| (v45 = a4 - *(double *)(a1 + 112), v45 <= 0.0)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 48, (uint64_t)"delta_time > 0", 14, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_49:
    abort();
  }
  *(double *)v46.i64 = v107;
  v46.i64[1] = v105;
  v47 = vextq_s8(v46, v46, 8uLL).u64[0];
  *(double *)(a1 + 112) = a4;
  if (*(_BYTE *)(a1 + 104))
  {
    v48 = *(double *)(a1 + 48);
    v49 = -v45 / v48;
    v106 = v107;
    v108 = *(double *)&v47;
    v50.f64[0] = 1.0 - exp(v49 * *(double *)(a1 + 24));
    v103 = v50;
    *(float64_t *)(a1 + 8) = v50.f64[0];
    v51 = *(double *)(a1 + 32);
    v53.f64[0] = 1.0 - exp(v49 * v51);
    *(double *)(a1 + 16) = v53.f64[0];
    v56.f64[0] = *(float64_t *)(a1 + 72);
    v57 = *(float64x2_t *)(a1 + 56);
    if (v48 == 0.0)
      v52.f64[0] = 1.0;
    else
      v52.f64[0] = v48;
    v54.f64[0] = v45 / v52.f64[0];
    v52.f64[0] = *(float64_t *)(a1 + 96);
    v58 = *(float64x2_t *)(a1 + 80);
    v59 = vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).u64[0];
    v60 = vmulq_n_f64(v58, v54.f64[0]);
    v61.f64[0] = v106;
    v55.f64[0] = 1.0 - v103.f64[0];
    v61.f64[1] = v108;
    v62 = vaddq_f64(vmulq_f64(v109, v103), vmulq_f64(v55, vaddq_f64(v56, vmulq_f64(v54, v52))));
    v63 = vaddq_f64(vmulq_n_f64(v61, v103.f64[0]), vmulq_n_f64(vaddq_f64(v57, v60), 1.0 - v103.f64[0]));
    *(float64x2_t *)(a1 + 56) = v63;
    *(float64_t *)(a1 + 72) = v62.f64[0];
    v64 = vsubq_f64(v62, v56);
    v65 = vsubq_f64(v63, v57);
    v66 = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u64[0];
    if (v45 >= 0.0001)
      v63.f64[0] = v48 / v45 * v53.f64[0];
    else
      v63.f64[0] = v48 * v51;
    v53.f64[0] = 1.0 - v53.f64[0];
    *(_QWORD *)&v65.f64[1] = v66;
    *(_QWORD *)&v58.f64[1] = v59;
    *(float64x2_t *)(a1 + 80) = vaddq_f64(vmulq_n_f64(v58, v53.f64[0]), vmulq_n_f64(v65, v63.f64[0]));
    *(_QWORD *)(a1 + 96) = *(_OWORD *)&vaddq_f64(vmulq_f64(v52, v53), vmulq_f64(v64, v63));
    (*(void (**)(_QWORD *__return_ptr, uint64_t, double))(*(_QWORD *)a1 + 32))(v110, a1, a4);
    v107 = *(double *)v110;
    v105 = v110[1];
    *(_QWORD *)&v67.f64[0] = v110[2];
    v109 = v67;
    v102 = v111;
    v104 = v112;
    if (a4 >= 0.0)
      goto LABEL_37;
  }
  else
  {
    *(float64_t *)(a1 + 72) = v109.f64[0];
    v46.i64[1] = v47;
    *(int8x16_t *)(a1 + 56) = v46;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_BYTE *)(a1 + 104) = 1;
    v102 = v111;
    v104 = v112;
    if (a4 >= 0.0)
      goto LABEL_37;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 46, (uint64_t)"timestamp >= 0", 14, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_49;
  }
LABEL_37:
  v68 = a4 - *(double *)(a1 + 248);
  if (v68 <= 0.0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 48, (uint64_t)"delta_time > 0", 14, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_49;
  }
  *(double *)(a1 + 248) = a4;
  if (*(_BYTE *)(a1 + 240))
  {
    v69 = *(double *)(a1 + 168);
    v70 = -v68 / v69;
    v101 = 1.0 - exp(v70 * *(double *)(a1 + 144));
    *(double *)(a1 + 128) = v101;
    v71 = *(double *)(a1 + 152);
    v72 = 1.0 - exp(v70 * v71);
    *(double *)(a1 + 136) = v72;
    v73 = *(float64x2_t *)(a1 + 176);
    v74 = *(float64x2_t *)(a1 + 192);
    if (v69 == 0.0)
      v75 = 1.0;
    else
      v75 = v69;
    v76 = v68 / v75;
    v77 = *(float64x2_t *)(a1 + 208);
    v78 = *(float64x2_t *)(a1 + 224);
    v79 = vmulq_n_f64(v77, v76);
    v80 = vaddq_f64(vmulq_n_f64(v104, v101), vmulq_n_f64(vaddq_f64(v74, vmulq_n_f64(v78, v76)), 1.0 - v101));
    v81 = vaddq_f64(vmulq_n_f64(v102, v101), vmulq_n_f64(vaddq_f64(v73, v79), 1.0 - v101));
    *(float64x2_t *)(a1 + 176) = v81;
    *(float64x2_t *)(a1 + 192) = v80;
    v82 = vsubq_f64(v80, v74);
    v83 = vsubq_f64(v81, v73);
    if (v68 >= 0.0001)
      v84 = v69 / v68 * v72;
    else
      v84 = v69 * v71;
    v87 = 1.0 - v72;
    *(float64x2_t *)(a1 + 208) = vaddq_f64(vmulq_n_f64(v77, v87), vmulq_n_f64(v83, v84));
    *(float64x2_t *)(a1 + 224) = vaddq_f64(vmulq_n_f64(v78, v87), vmulq_n_f64(v82, v84));
    (*(void (**)(float64x2_t *__return_ptr, uint64_t, double))(*(_QWORD *)(a1 + 120) + 32))(&v111, a1 + 120, a4);
    v85 = v111;
    v86 = v112;
  }
  else
  {
    v85 = v102;
    v86 = v104;
    *(float64x2_t *)(a1 + 176) = v102;
    *(float64x2_t *)(a1 + 192) = v104;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_BYTE *)(a1 + 240) = 1;
  }
  v88 = vmuld_n_f64(v85.f64[0], v85.f64[0]);
  v89 = vmuld_lane_f64(v85.f64[0], v85, 1);
  v90 = vmuld_n_f64(v85.f64[0], v86.f64[0]);
  v91 = vmuld_lane_f64(v85.f64[0], v86, 1);
  v92 = vmuld_lane_f64(v85.f64[1], v85, 1);
  v85.f64[0] = vmuld_lane_f64(v86.f64[0], v85, 1);
  v93 = vmuld_lane_f64(v85.f64[1], v86, 1);
  v94 = vmuld_n_f64(v86.f64[0], v86.f64[0]);
  v95 = vmuld_lane_f64(v86.f64[0], v86, 1);
  v96 = vmuld_lane_f64(v86.f64[1], v86, 1);
  v97 = v88 + v92 - v94 - v96;
  v98 = v88 - v92;
  *(double *)a3 = v97;
  *(double *)(a3 + 8) = v85.f64[0] - v91 + v85.f64[0] - v91;
  *(double *)(a3 + 32) = v85.f64[0] + v91 + v85.f64[0] + v91;
  *(double *)(a3 + 40) = v98 + v94 - v96;
  *(double *)(a3 + 64) = v93 - v90 + v93 - v90;
  *(double *)(a3 + 72) = v89 + v95 + v89 + v95;
  *(double *)(a3 + 16) = v90 + v93 + v90 + v93;
  *(double *)(a3 + 24) = v107;
  *(double *)(a3 + 48) = v95 - v89 + v95 - v89;
  *(_QWORD *)(a3 + 56) = v105;
  v99 = v98 - v94 + v96;
  result = (__n128)v109;
  *(double *)(a3 + 80) = v99;
  *(float64_t *)(a3 + 88) = v109.f64[0];
  *(double *)(a1 + 264) = a4;
  return result;
}

double sub_20EDE0208@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float64x2_t a3@<Q0>)
{
  double v3;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  _BOOL4 v12;
  float64x2_t v13;
  float64x2_t v14;
  unint64_t v15;
  unint64_t v16;
  double v29;
  double v30;
  float64x2_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double result;
  double v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;

  v3 = a3.f64[0];
  if (!*(_BYTE *)(a1 + 104)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 86, (uint64_t)"first_value_observed_", 21, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_25;
  }
  v6 = *(double *)(a1 + 112);
  if (v6 > v3)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 87, (uint64_t)"timestamp >= latest_timestamp_observed_", 39, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_25;
    }
    v6 = *(double *)(a1 + 112);
  }
  a3.f64[0] = v3 - v6;
  v7 = *(double *)(a1 + 48);
  if (v7 == 0.0)
    v7 = 1.0;
  a3.f64[0] = a3.f64[0] / v7;
  v49 = a3;
  if (a3.f64[0] < 0.0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 90, (uint64_t)"num_steps >= 0", 14, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_25;
  }
  a3.f64[0] = *(float64_t *)(a1 + 96);
  v45 = a3;
  a3.f64[0] = *(float64_t *)(a1 + 72);
  v48 = a3;
  v46 = *(float64x2_t *)(a1 + 80);
  v47 = *(float64x2_t *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 240)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 86, (uint64_t)"first_value_observed_", 21, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_25;
  }
  v8 = *(double *)(a1 + 248);
  if (v8 > v3)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 87, (uint64_t)"timestamp >= latest_timestamp_observed_", 39, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_25;
    }
    v8 = *(double *)(a1 + 248);
  }
  v9 = v3 - v8;
  v10 = *(double *)(a1 + 168);
  if (v10 == 0.0)
    v10 = 1.0;
  _D18 = v9 / v10;
  if (v9 / v10 < 0.0)
  {
    v44 = v9 / v10;
    v12 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 90, (uint64_t)"num_steps >= 0", 14, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0);
    _D18 = v44;
    if (v12)
LABEL_25:
      abort();
  }
  v14 = v46;
  v13 = v47;
  v15 = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
  v16 = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
  _Q5 = *(float64x2_t *)(a1 + 208);
  _Q4 = *(float64x2_t *)(a1 + 224);
  _Q0 = vmlaq_n_f64(*(float64x2_t *)(a1 + 192), _Q4, _D18);
  _Q1 = vaddq_f64(*(float64x2_t *)(a1 + 176), vmulq_n_f64(_Q5, _D18));
  if (*(_BYTE *)(a1 + 160))
  {
    __asm
    {
      FMLA            D7, D18, V5.D[1]
      FMLA            D6, D18, V4.D[1]
      FMLA            D4, D7, V1.D[1]
      FMLA            D4, D6, V0.D[1]
    }
    v29 = sqrt(_D4);
    if (v29 == 0.0)
      v30 = 1.0;
    else
      v30 = 1.0 / v29;
    _Q0 = vmulq_n_f64(_Q0, v30);
    _Q1 = vmulq_n_f64(_Q1, v30);
  }
  *(_QWORD *)&v14.f64[1] = v15;
  *(_QWORD *)&v13.f64[1] = v16;
  v31 = vaddq_f64(v13, vmulq_n_f64(v14, v49.f64[0]));
  v32 = vmuld_n_f64(_Q1.f64[0], _Q1.f64[0]);
  v33 = vmuld_lane_f64(_Q1.f64[0], _Q1, 1);
  v34 = vmuld_n_f64(_Q1.f64[0], _Q0.f64[0]);
  v35 = vmuld_lane_f64(_Q1.f64[0], _Q0, 1);
  v36 = vmuld_lane_f64(_Q1.f64[1], _Q1, 1);
  _Q1.f64[0] = vmuld_lane_f64(_Q0.f64[0], _Q1, 1);
  v37 = vmuld_lane_f64(_Q1.f64[1], _Q0, 1);
  v38 = vmuld_n_f64(_Q0.f64[0], _Q0.f64[0]);
  v39 = vmuld_lane_f64(_Q0.f64[0], _Q0, 1);
  v40 = vmuld_lane_f64(_Q0.f64[1], _Q0, 1);
  v41 = v32 + v36 - v38 - v40;
  v42 = v32 - v36;
  *(double *)a2 = v41;
  *(double *)(a2 + 8) = _Q1.f64[0] - v35 + _Q1.f64[0] - v35;
  *(double *)(a2 + 16) = v34 + v37 + v34 + v37;
  *(double *)(a2 + 32) = _Q1.f64[0] + v35 + _Q1.f64[0] + v35;
  *(double *)(a2 + 40) = v38 + v42 - v40;
  *(double *)(a2 + 48) = v39 - v33 + v39 - v33;
  *(double *)(a2 + 64) = v37 - v34 + v37 - v34;
  *(double *)(a2 + 72) = v33 + v39 + v33 + v39;
  result = v40 + v42 - v38;
  *(double *)(a2 + 80) = result;
  *(float64_t *)(a2 + 24) = v31.f64[0];
  *(float64_t *)(a2 + 56) = v31.f64[1];
  *(_QWORD *)(a2 + 88) = *(_OWORD *)&vaddq_f64(v48, vmulq_f64(v49, v45));
  return result;
}

double sub_20EDE0558@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float64x2_t a3@<Q0>)
{
  double v3;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  _BOOL4 v13;
  float64x2_t v14;
  float64x2_t v15;
  unint64_t v16;
  unint64_t v17;
  double v30;
  double v31;
  float64x2_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double result;
  double v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;

  v3 = a3.f64[0];
  if (a3.f64[0] < 0.0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/PoseFilter.cpp", 116, (uint64_t)"num_steps >= 0", 14, (uint64_t)&unk_210261875, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_31;
  }
  if (*(_BYTE *)(a1 + 104) && *(_BYTE *)(a1 + 240))
  {
    v6 = *(double *)(a1 + 264) + *(double *)(a1 + 256) * v3;
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/PoseFilter.cpp", 117, (uint64_t)"IsReadyToPredict()", 18, (uint64_t)&unk_210261875, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_31;
    }
    v6 = *(double *)(a1 + 264) + *(double *)(a1 + 256) * v3;
    if (!*(_BYTE *)(a1 + 104)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 86, (uint64_t)"first_value_observed_", 21, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_31;
    }
  }
  v7 = *(double *)(a1 + 112);
  if (v7 > v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 87, (uint64_t)"timestamp >= latest_timestamp_observed_", 39, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_31;
    }
    v7 = *(double *)(a1 + 112);
  }
  a3.f64[0] = v6 - v7;
  v8 = *(double *)(a1 + 48);
  if (v8 == 0.0)
    v8 = 1.0;
  a3.f64[0] = a3.f64[0] / v8;
  v50 = a3;
  if (a3.f64[0] < 0.0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 90, (uint64_t)"num_steps >= 0", 14, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_31;
  }
  a3.f64[0] = *(float64_t *)(a1 + 96);
  v46 = a3;
  a3.f64[0] = *(float64_t *)(a1 + 72);
  v49 = a3;
  v47 = *(float64x2_t *)(a1 + 80);
  v48 = *(float64x2_t *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 240)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 86, (uint64_t)"first_value_observed_", 21, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_31;
  }
  v9 = *(double *)(a1 + 248);
  if (v9 > v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 87, (uint64_t)"timestamp >= latest_timestamp_observed_", 39, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_31;
    }
    v9 = *(double *)(a1 + 248);
  }
  v10 = v6 - v9;
  v11 = *(double *)(a1 + 168);
  if (v11 == 0.0)
    v11 = 1.0;
  _D18 = v10 / v11;
  if (v10 / v11 < 0.0)
  {
    v45 = v10 / v11;
    v13 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 90, (uint64_t)"num_steps >= 0", 14, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0);
    _D18 = v45;
    if (v13)
LABEL_31:
      abort();
  }
  v15 = v47;
  v14 = v48;
  v16 = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
  v17 = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
  _Q5 = *(float64x2_t *)(a1 + 208);
  _Q4 = *(float64x2_t *)(a1 + 224);
  _Q0 = vmlaq_n_f64(*(float64x2_t *)(a1 + 192), _Q4, _D18);
  _Q1 = vaddq_f64(*(float64x2_t *)(a1 + 176), vmulq_n_f64(_Q5, _D18));
  if (*(_BYTE *)(a1 + 160))
  {
    __asm
    {
      FMLA            D7, D18, V5.D[1]
      FMLA            D6, D18, V4.D[1]
      FMLA            D4, D7, V1.D[1]
      FMLA            D4, D6, V0.D[1]
    }
    v30 = sqrt(_D4);
    if (v30 == 0.0)
      v31 = 1.0;
    else
      v31 = 1.0 / v30;
    _Q0 = vmulq_n_f64(_Q0, v31);
    _Q1 = vmulq_n_f64(_Q1, v31);
  }
  *(_QWORD *)&v15.f64[1] = v16;
  *(_QWORD *)&v14.f64[1] = v17;
  v32 = vaddq_f64(v14, vmulq_n_f64(v15, v50.f64[0]));
  v33 = vmuld_n_f64(_Q1.f64[0], _Q1.f64[0]);
  v34 = vmuld_lane_f64(_Q1.f64[0], _Q1, 1);
  v35 = vmuld_n_f64(_Q1.f64[0], _Q0.f64[0]);
  v36 = vmuld_lane_f64(_Q1.f64[0], _Q0, 1);
  v37 = vmuld_lane_f64(_Q1.f64[1], _Q1, 1);
  _Q1.f64[0] = vmuld_lane_f64(_Q0.f64[0], _Q1, 1);
  v38 = vmuld_lane_f64(_Q1.f64[1], _Q0, 1);
  v39 = vmuld_n_f64(_Q0.f64[0], _Q0.f64[0]);
  v40 = vmuld_lane_f64(_Q0.f64[0], _Q0, 1);
  v41 = vmuld_lane_f64(_Q0.f64[1], _Q0, 1);
  v42 = v33 + v37 - v39 - v41;
  v43 = v33 - v37;
  *(double *)a2 = v42;
  *(double *)(a2 + 8) = _Q1.f64[0] - v36 + _Q1.f64[0] - v36;
  *(double *)(a2 + 16) = v35 + v38 + v35 + v38;
  *(double *)(a2 + 32) = _Q1.f64[0] + v36 + _Q1.f64[0] + v36;
  *(double *)(a2 + 40) = v39 + v43 - v41;
  *(double *)(a2 + 48) = v40 - v34 + v40 - v34;
  *(double *)(a2 + 64) = v38 - v35 + v38 - v35;
  *(double *)(a2 + 72) = v34 + v40 + v34 + v40;
  result = v41 + v43 - v39;
  *(double *)(a2 + 80) = result;
  *(float64_t *)(a2 + 24) = v32.f64[0];
  *(float64_t *)(a2 + 56) = v32.f64[1];
  *(_QWORD *)(a2 + 88) = *(_OWORD *)&vaddq_f64(v49, vmulq_f64(v50, v46));
  return result;
}

void sub_20EDE0944(uint64_t *a1, uint64_t *a2, uint64_t a3, double **a4, double **a5, double **a6, double a7, double a8)
{
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  double *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  double *v28;
  double *v29;
  unint64_t v30;
  double v31;
  double v32;
  double *v33;
  double *v34;
  double v35;
  double v36;
  uint64_t v37;
  double *v38;
  double *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  double v55;
  unint64_t v56;
  double v57;
  double v58;
  BOOL v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  size_t v65;
  const char *v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  size_t v72;
  const char *v73;
  unsigned __int8 v74;
  const char *v75;
  size_t v76;
  void *v77;
  unint64_t v78;
  const char *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *p_p;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  size_t v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  unint64_t *p_shared_owners;
  unint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  void *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unsigned __int8 v124;
  const char *v125;
  size_t v126;
  void *v127;
  unint64_t v128;
  const char *v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  NSObject *v138;
  size_t v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  void *v170;
  unint64_t *v171;
  uint64_t *v172;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v174;
  int v175;
  const char *v176;
  int v177;
  const char *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  uint64_t v181;
  void *object;
  void *v183[2];
  __int128 v184;
  void *__p;
  size_t v186;
  unint64_t v187;
  char v188;
  uint64_t v189;
  _QWORD v190[2];

  v16 = a1[5];
  v17 = a4[1] - *a4;
  if (v16 <= v17)
  {
    if (v16 < v17)
      a4[1] = &(*a4)[v16];
  }
  else
  {
    sub_20E93D8FC((uint64_t)a4, v16 - v17);
  }
  v18 = a5[1] - *a5;
  if (v16 <= v18)
  {
    if (v16 < v18)
      a5[1] = &(*a5)[v16];
  }
  else
  {
    sub_20E93D8FC((uint64_t)a5, v16 - v18);
  }
  v19 = a6[1] - *a6;
  if (v16 <= v19)
  {
    if (v16 < v19)
      a6[1] = &(*a6)[v16];
  }
  else
  {
    sub_20E93D8FC((uint64_t)a6, v16 - v19);
  }
  if (!a3)
    return;
  v20 = 0;
  while (1)
  {
    v21 = *a5;
    if (v16)
    {
      v22 = a2[3];
      v23 = *a2;
      v24 = (a2[1] - *a2) >> 3;
      v25 = a1[3];
      v26 = *a1;
      v27 = (a1[1] - *a1) >> 3;
      v28 = *a4;
      v29 = *a5;
      v30 = v16;
      do
      {
        v31 = a7 * *(double *)(v23 + 8 * (v22 % v24));
        v32 = *(double *)(v26 + 8 * (v25 % v27));
        *v28++ = v31 - v32;
        *v29++ = vabdd_f64(v31, v32);
        ++v25;
        ++v22;
        --v30;
      }
      while (v30);
    }
    v33 = &v21[v16 >> 1];
    v34 = a5[1];
    if (v33 != v34)
      sub_20EDE2884(v21, &v21[v16 >> 1], v34);
    v35 = *v33 * 2.9652 >= 0.000001 ? *v33 * 2.9652 : 0.000001;
    v36 = a7;
    if (v16)
    {
      v37 = 0;
      v38 = *a4;
      v39 = *a6;
      v40 = a2[3];
      v41 = *a2;
      v42 = (a2[1] - *a2) >> 3;
      v43 = 0.0;
      v44 = 0.0;
      v45 = 0.0;
      do
      {
        v49 = fabs(v38[v37]);
        v50 = 0.0;
        if (v49 < v35)
          v50 = (1.0 - v49 / v35 * (v49 / v35)) * (1.0 - v49 / v35 * (v49 / v35));
        v39[v37] = v50;
        v46 = v38[v37];
        v43 = v43 + v46 * (v50 * v46);
        v47 = *(double *)(v41 + 8 * ((v40 + v37) % v42));
        v48 = v50 * v47;
        v45 = v45 + v47 * v48;
        v44 = v44 + v46 * v48;
        ++v37;
      }
      while (v16 != v37);
      v51 = 1.0 / v45;
      if (v45 == 0.0)
        v51 = 1.0;
      v36 = a7 - v44 * v51;
      v52 = a1[3];
      v53 = *a1;
      v54 = (a1[1] - *a1) >> 3;
      v55 = 0.0;
      v56 = v16;
      do
      {
        v57 = v36 * *(double *)(v41 + 8 * (v40 % v42)) - *(double *)(v53 + 8 * (v52 % v54));
        *v38++ = v57;
        v58 = *v39++;
        v55 = v55 + v57 * (v57 * v58);
        ++v52;
        ++v40;
        --v56;
      }
      while (v56);
      if (v55 > v43)
        break;
    }
    if (v36 <= 0.0)
    {
      sub_20EDE1AB4(&v181);
      if (**(int **)(v181 + 56) > 5)
        return;
      v60 = *(unsigned __int8 *)(v181 + 72);
      v61 = sub_20E8C31DC(v181, "OSLogSurrogateAppender", 1, 0);
      v62 = v61;
      if (!v60 && !v61)
        return;
      v172 = &v181;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v174 = std::chrono::system_clock::now().__d_.__rep_;
      v175 = 5;
      v176 = "unknown file";
      v177 = 108;
      v179 = 0;
      v180 = 0;
      v178 = "unknown function";
      v63 = v181;
      v64 = v181 + 16;
      if (*(char *)(v181 + 39) < 0)
      {
        v66 = *(const char **)(v181 + 16);
        v65 = *(_QWORD *)(v181 + 24);
      }
      else
      {
        v65 = *(unsigned __int8 *)(v181 + 39);
        v66 = (const char *)(*v172 + 16);
      }
      v74 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v74 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&object);
        sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
        if ((_BYTE)v184 && SHIBYTE(v183[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A50F >= 0)
        v75 = (const char *)&xmmword_254A4A4F8;
      else
        v75 = (const char *)xmmword_254A4A4F8;
      if (byte_254A4A50F >= 0)
        v76 = byte_254A4A50F;
      else
        v76 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
      object = os_log_create(v75, v66);
      v77 = v183;
      if (v76 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v76 >= 0x17)
      {
        v78 = v62;
        v79 = v66;
        v80 = v63;
        v81 = v60;
        v82 = v64;
        v83 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v76 | 7) != 0x17)
          v83 = v76 | 7;
        v84 = v83 + 1;
        v77 = operator new(v83 + 1);
        v183[1] = (void *)v76;
        *(_QWORD *)&v184 = v84 | 0x8000000000000000;
        v183[0] = v77;
        v64 = v82;
        v60 = v81;
        v63 = v80;
        v66 = v79;
        v62 = v78;
      }
      else
      {
        BYTE7(v184) = v76;
        if (!v76)
        {
LABEL_66:
          *((_BYTE *)v77 + v76) = 0;
          BYTE8(v184) = 1;
          p_p = &__p;
          if (v65 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v65 >= 0x17)
          {
            v86 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v65 | 7) != 0x17)
              v86 = v65 | 7;
            v87 = v86 + 1;
            p_p = operator new(v86 + 1);
            v186 = v65;
            v187 = v87 | 0x8000000000000000;
            __p = p_p;
          }
          else
          {
            HIBYTE(v187) = v65;
            if (!v65)
            {
LABEL_74:
              *((_BYTE *)p_p + v65) = 0;
              v188 = 1;
              v88 = object;
              if (SHIBYTE(v187) < 0)
                operator delete(__p);
              if (BYTE8(v184) && SBYTE7(v184) < 0)
                operator delete(v183[0]);
              if (object)
                os_release(object);
              if (v62 && *(_QWORD *)(v62 + 24))
              {
                v89 = _os_log_pack_size();
                v90 = (std::__shared_weak_count_vtbl *)operator new(v89, (std::align_val_t)8uLL);
                v91 = (std::__shared_weak_count *)operator new();
                v92 = v91;
                v91->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v91->__shared_owners_;
                v91->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v91->__shared_weak_owners_ = 0;
                v91[1].__vftable = v90;
                object = v90;
                v183[0] = v90;
                v183[1] = v91;
                do
                  v94 = __ldxr(p_shared_owners);
                while (__stxr(v94 + 1, p_shared_owners));
                v184 = 0uLL;
                __p = 0;
                do
                  v95 = __ldaxr(p_shared_owners);
                while (__stlxr(v95 - 1, p_shared_owners));
                if (!v95)
                {
                  ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                  std::__shared_weak_count::__release_weak(v92);
                }
                v96 = object;
                *(_WORD *)_os_log_pack_fill() = 0;
                v97 = operator new();
                v98 = *(unsigned __int8 *)(v63 + 39);
                if ((v98 & 0x80u) == 0)
                  v99 = v64;
                else
                  v99 = *(_QWORD *)(v63 + 16);
                if ((v98 & 0x80u) != 0)
                  v98 = *(_QWORD *)(v63 + 24);
                *(_QWORD *)v97 = v96;
                *(_OWORD *)(v97 + 8) = *(_OWORD *)v183;
                v183[0] = 0;
                v183[1] = 0;
                *(_OWORD *)(v97 + 24) = v184;
                v184 = 0uLL;
                *(_QWORD *)(v97 + 40) = v99;
                *(_QWORD *)(v97 + 48) = v98;
                *(_BYTE *)(v97 + 56) = 16;
                v189 = 0;
                v190[0] = v97;
                (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v62 + 24) + 40))(*(_QWORD *)(v62 + 24), v190);
                v100 = v190[0];
                v190[0] = 0;
                if (v100)
                {
                  v101 = *(std::__shared_weak_count **)(v100 + 32);
                  if (v101)
                  {
                    v102 = (unint64_t *)&v101->__shared_owners_;
                    do
                      v103 = __ldaxr(v102);
                    while (__stlxr(v103 - 1, v102));
                    if (!v103)
                    {
                      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                      std::__shared_weak_count::__release_weak(v101);
                    }
                  }
                  v104 = *(std::__shared_weak_count **)(v100 + 16);
                  if (v104)
                  {
                    v105 = (unint64_t *)&v104->__shared_owners_;
                    do
                      v106 = __ldaxr(v105);
                    while (__stlxr(v106 - 1, v105));
                    if (!v106)
                    {
                      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                      std::__shared_weak_count::__release_weak(v104);
                    }
                  }
                  MEMORY[0x212BC6398](v100, 0x10F0C40B62ED6C6);
                  v107 = v189;
                  v189 = 0;
                  if (v107)
                  {
                    v108 = *(std::__shared_weak_count **)(v107 + 32);
                    if (v108)
                    {
                      v109 = (unint64_t *)&v108->__shared_owners_;
                      do
                        v110 = __ldaxr(v109);
                      while (__stlxr(v110 - 1, v109));
                      if (!v110)
                      {
                        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                        std::__shared_weak_count::__release_weak(v108);
                      }
                    }
                    v111 = *(std::__shared_weak_count **)(v107 + 16);
                    if (v111)
                    {
                      v112 = (unint64_t *)&v111->__shared_owners_;
                      do
                        v113 = __ldaxr(v112);
                      while (__stlxr(v113 - 1, v112));
                      if (!v113)
                      {
                        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                        std::__shared_weak_count::__release_weak(v111);
                      }
                    }
                    MEMORY[0x212BC6398](v107, 0x10F0C40B62ED6C6);
                  }
                }
                v114 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
                if (*((_QWORD *)&v184 + 1))
                {
                  v115 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
                  do
                    v116 = __ldaxr(v115);
                  while (__stlxr(v116 - 1, v115));
                  if (!v116)
                  {
                    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                    std::__shared_weak_count::__release_weak(v114);
                  }
                }
                v117 = (std::__shared_weak_count *)v183[1];
                if (v183[1])
                {
                  v118 = (unint64_t *)((char *)v183[1] + 8);
                  do
                    v119 = __ldaxr(v118);
                  while (__stlxr(v119 - 1, v118));
                  if (!v119)
                  {
                    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                    std::__shared_weak_count::__release_weak(v117);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v88, OS_LOG_TYPE_ERROR);
                LOWORD(object) = 0;
                v120 = (void *)_os_log_send_and_compose_impl();
                if (v120)
                  free(v120);
              }
              if (v60)
              {
                sub_20E8C003C((uint64_t)&v172, "Negative scale calculated!");
                sub_20E863570((uint64_t)&v172);
              }
              sub_20E863570((uint64_t)&v172);
              v121 = v180;
              if (v180)
              {
                v122 = (unint64_t *)&v180->__shared_owners_;
                do
                  v123 = __ldaxr(v122);
                while (__stlxr(v123 - 1, v122));
                goto LABEL_219;
              }
              return;
            }
          }
          memmove(p_p, v66, v65);
          goto LABEL_74;
        }
      }
      memmove(v77, v75, v76);
      goto LABEL_66;
    }
    v59 = vabdd_f64(a7, v36) < v36 * a8 || ++v20 == a3;
    a7 = v36;
    if (v59)
      return;
  }
  sub_20EDE1AB4(&v181);
  if (**(int **)(v181 + 56) > 3)
    return;
  v67 = *(unsigned __int8 *)(v181 + 72);
  v68 = sub_20E8C31DC(v181, "OSLogSurrogateAppender", 1, 0);
  v69 = v68;
  if (!v67 && !v68)
    return;
  v172 = &v181;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v174 = std::chrono::system_clock::now().__d_.__rep_;
  v175 = 3;
  v176 = "unknown file";
  v177 = 103;
  v179 = 0;
  v180 = 0;
  v178 = "unknown function";
  v70 = v181;
  v71 = v181 + 16;
  if (*(char *)(v181 + 39) < 0)
  {
    v73 = *(const char **)(v181 + 16);
    v72 = *(_QWORD *)(v181 + 24);
  }
  else
  {
    v72 = *(unsigned __int8 *)(v181 + 39);
    v73 = (const char *)(*v172 + 16);
  }
  v124 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v124 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)&object);
    sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
    if ((_BYTE)v184 && SHIBYTE(v183[1]) < 0)
      operator delete(object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A50F >= 0)
    v125 = (const char *)&xmmword_254A4A4F8;
  else
    v125 = (const char *)xmmword_254A4A4F8;
  if (byte_254A4A50F >= 0)
    v126 = byte_254A4A50F;
  else
    v126 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
  object = os_log_create(v125, v73);
  v127 = v183;
  if (v126 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v126 >= 0x17)
  {
    v128 = v69;
    v129 = v73;
    v130 = v70;
    v131 = v67;
    v132 = v71;
    v133 = (v126 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v126 | 7) != 0x17)
      v133 = v126 | 7;
    v134 = v133 + 1;
    v127 = operator new(v133 + 1);
    v183[1] = (void *)v126;
    *(_QWORD *)&v184 = v134 | 0x8000000000000000;
    v183[0] = v127;
    v71 = v132;
    v67 = v131;
    v70 = v130;
    v73 = v129;
    v69 = v128;
    goto LABEL_150;
  }
  BYTE7(v184) = v126;
  if (v126)
LABEL_150:
    memmove(v127, v125, v126);
  *((_BYTE *)v127 + v126) = 0;
  BYTE8(v184) = 1;
  v135 = &__p;
  if (v72 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v72 >= 0x17)
  {
    v136 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v72 | 7) != 0x17)
      v136 = v72 | 7;
    v137 = v136 + 1;
    v135 = operator new(v136 + 1);
    v186 = v72;
    v187 = v137 | 0x8000000000000000;
    __p = v135;
    goto LABEL_158;
  }
  HIBYTE(v187) = v72;
  if (v72)
LABEL_158:
    memmove(v135, v73, v72);
  *((_BYTE *)v135 + v72) = 0;
  v188 = 1;
  v138 = object;
  if (SHIBYTE(v187) < 0)
    operator delete(__p);
  if (BYTE8(v184) && SBYTE7(v184) < 0)
    operator delete(v183[0]);
  if (object)
    os_release(object);
  if (v69 && *(_QWORD *)(v69 + 24))
  {
    v139 = _os_log_pack_size();
    v140 = (std::__shared_weak_count_vtbl *)operator new(v139, (std::align_val_t)8uLL);
    v141 = (std::__shared_weak_count *)operator new();
    v142 = v141;
    v141->__shared_owners_ = 0;
    v143 = (unint64_t *)&v141->__shared_owners_;
    v141->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v141->__shared_weak_owners_ = 0;
    v141[1].__vftable = v140;
    object = v140;
    v183[0] = v140;
    v183[1] = v141;
    do
      v144 = __ldxr(v143);
    while (__stxr(v144 + 1, v143));
    v184 = 0uLL;
    __p = 0;
    do
      v145 = __ldaxr(v143);
    while (__stlxr(v145 - 1, v143));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v142);
    }
    v146 = object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v147 = operator new();
    v148 = *(unsigned __int8 *)(v70 + 39);
    if ((v148 & 0x80u) == 0)
      v149 = v71;
    else
      v149 = *(_QWORD *)(v70 + 16);
    if ((v148 & 0x80u) != 0)
      v148 = *(_QWORD *)(v70 + 24);
    *(_QWORD *)v147 = v146;
    *(_OWORD *)(v147 + 8) = *(_OWORD *)v183;
    v183[0] = 0;
    v183[1] = 0;
    *(_OWORD *)(v147 + 24) = v184;
    v184 = 0uLL;
    *(_QWORD *)(v147 + 40) = v149;
    *(_QWORD *)(v147 + 48) = v148;
    *(_BYTE *)(v147 + 56) = 1;
    v189 = 0;
    v190[0] = v147;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v69 + 24) + 40))(*(_QWORD *)(v69 + 24), v190);
    v150 = v190[0];
    v190[0] = 0;
    if (v150)
    {
      v151 = *(std::__shared_weak_count **)(v150 + 32);
      if (v151)
      {
        v152 = (unint64_t *)&v151->__shared_owners_;
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
          std::__shared_weak_count::__release_weak(v151);
        }
      }
      v154 = *(std::__shared_weak_count **)(v150 + 16);
      if (v154)
      {
        v155 = (unint64_t *)&v154->__shared_owners_;
        do
          v156 = __ldaxr(v155);
        while (__stlxr(v156 - 1, v155));
        if (!v156)
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
      }
      MEMORY[0x212BC6398](v150, 0x10F0C40B62ED6C6);
      v157 = v189;
      v189 = 0;
      if (v157)
      {
        v158 = *(std::__shared_weak_count **)(v157 + 32);
        if (v158)
        {
          v159 = (unint64_t *)&v158->__shared_owners_;
          do
            v160 = __ldaxr(v159);
          while (__stlxr(v160 - 1, v159));
          if (!v160)
          {
            ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
            std::__shared_weak_count::__release_weak(v158);
          }
        }
        v161 = *(std::__shared_weak_count **)(v157 + 16);
        if (v161)
        {
          v162 = (unint64_t *)&v161->__shared_owners_;
          do
            v163 = __ldaxr(v162);
          while (__stlxr(v163 - 1, v162));
          if (!v163)
          {
            ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
            std::__shared_weak_count::__release_weak(v161);
          }
        }
        MEMORY[0x212BC6398](v157, 0x10F0C40B62ED6C6);
      }
    }
    v164 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
    if (*((_QWORD *)&v184 + 1))
    {
      v165 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
      do
        v166 = __ldaxr(v165);
      while (__stlxr(v166 - 1, v165));
      if (!v166)
      {
        ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
        std::__shared_weak_count::__release_weak(v164);
      }
    }
    v167 = (std::__shared_weak_count *)v183[1];
    if (v183[1])
    {
      v168 = (unint64_t *)((char *)v183[1] + 8);
      do
        v169 = __ldaxr(v168);
      while (__stlxr(v169 - 1, v168));
      if (!v169)
      {
        ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
        std::__shared_weak_count::__release_weak(v167);
      }
    }
  }
  else
  {
    os_log_type_enabled(v138, OS_LOG_TYPE_INFO);
    LOWORD(object) = 0;
    v170 = (void *)_os_log_send_and_compose_impl();
    if (v170)
      free(v170);
  }
  if (v67)
  {
    sub_20E8C003C((uint64_t)&v172, "Tukey cost increase. Use previous scale.");
    sub_20E863570((uint64_t)&v172);
  }
  sub_20E863570((uint64_t)&v172);
  v121 = v180;
  if (v180)
  {
    v171 = (unint64_t *)&v180->__shared_owners_;
    do
      v123 = __ldaxr(v171);
    while (__stlxr(v123 - 1, v171));
LABEL_219:
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
}

void sub_20EDE1908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a27)
  {
    if (a26 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EDE1950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_20E86E8C4((uint64_t *)(v3 - 144));
  sub_20E86E8C4((uint64_t *)(v3 - 152));
  sub_20E86E658((uint64_t)va1);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EDE19E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EDE1A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EDE1A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28 && a27 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EDE1AB4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5F9B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F9B0))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.odt.image_detection_and_tracking");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5F9A8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5F9B0);
  }
  *a1 = qword_254A5F9A8;
}

void sub_20EDE1B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5F9B0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5F9B0);
  _Unwind_Resume(a1);
}

uint64_t sub_20EDE1BA8(uint64_t a1, size_t __sz)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  unint64_t v12;
  char *v13;
  __int128 v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;

  *(_OWORD *)a1 = *(_OWORD *)__sz;
  v4 = *(_OWORD *)(__sz + 16);
  v5 = *(_OWORD *)(__sz + 32);
  v6 = *(_OWORD *)(__sz + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(__sz + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 264) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 464) = _Q0;
  *(_DWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  v12 = *(_QWORD *)(__sz + 8);
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  if (v12)
  {
    if (v12 >> 61)
      sub_20E867F44();
    v13 = (char *)operator new(8 * v12);
    *(_QWORD *)(a1 + 504) = v13;
    *(_QWORD *)(a1 + 520) = &v13[8 * v12];
    bzero(v13, 8 * v12);
    *(_QWORD *)(a1 + 512) = &v13[8 * v12];
  }
  *(_QWORD *)(a1 + 544) = 0;
  v14 = 0uLL;
  *(_OWORD *)(a1 + 528) = 0u;
  v15 = *(_QWORD *)(__sz + 8);
  *(_QWORD *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  if (v15)
  {
    if (v15 >> 61)
      sub_20E867F44();
    v16 = (char *)operator new(8 * v15);
    *(_QWORD *)(a1 + 552) = v16;
    *(_QWORD *)(a1 + 568) = &v16[8 * v15];
    bzero(v16, 8 * v15);
    *(_QWORD *)(a1 + 560) = &v16[8 * v15];
    v14 = 0uLL;
  }
  *(_OWORD *)(a1 + 640) = v14;
  *(_OWORD *)(a1 + 656) = v14;
  *(_OWORD *)(a1 + 608) = v14;
  *(_OWORD *)(a1 + 624) = v14;
  *(_OWORD *)(a1 + 576) = v14;
  *(_OWORD *)(a1 + 592) = v14;
  *(_OWORD *)(a1 + 665) = v14;
  v17 = *(_QWORD *)(a1 + 8);
  if (v17)
  {
    if (v17 >> 61)
      sub_20E867F44();
    v18 = (char *)operator new(8 * v17);
    *(_QWORD *)(a1 + 600) = v18;
    *(_QWORD *)(a1 + 608) = v18;
    *(_QWORD *)(a1 + 616) = &v18[8 * v17];
    v19 = (char *)operator new(8 * v17);
    *(_QWORD *)(a1 + 624) = v19;
    *(_QWORD *)(a1 + 632) = v19;
    *(_QWORD *)(a1 + 640) = &v19[8 * v17];
  }
  return a1;
}

void sub_20EDE1D30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 560) = v5;
    operator delete(v5);
    v6 = *v2;
    if (!*v2)
LABEL_4:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v6 = *v2;
    if (!*v2)
      goto LABEL_4;
  }
  *(_QWORD *)(v1 + 512) = v6;
  operator delete(v6);
  goto LABEL_4;
}

double sub_20EDE1DD0(uint64_t a1, uint64_t a2, double *a3, _BYTE *a4)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v43;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  float64x2_t v71;
  float64x2_t v72;
  double v73;
  double v74;
  float64x2_t v75;
  double v76;
  double v77;
  double v78;
  double v80;
  double v87;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  double v100;
  double v101;
  double v102;
  double v104;
  double v111;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  double v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;

  *a4 = 0;
  if (!*(_BYTE *)(a1 + 264))
  {
    *(_QWORD *)(a1 + 72) = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    v100 = *(double *)(a2 + 64);
    *(double *)(a1 + 88) = v100;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 40);
    v101 = *(double *)(a2 + 72);
    *(double *)(a1 + 120) = v101;
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 48);
    v102 = *(double *)(a2 + 80);
    *(double *)(a1 + 152) = v102;
    _D4 = *(_QWORD *)(a2 + 56);
    v104 = *(double *)(a2 + 88);
    _Q6 = *(_OWORD *)(a1 + 72);
    __asm { FMLA            D7, D4, V6.D[1] }
    *(double *)(a1 + 96) = -(_D7 + v100 * v104);
    _Q0 = *(_OWORD *)(a1 + 104);
    __asm { FMLA            D6, D4, V0.D[1] }
    *(double *)(a1 + 128) = -(*(double *)&_Q6 + v101 * v104);
    _Q0 = *(_OWORD *)(a1 + 136);
    __asm { FMLA            D1, D4, V0.D[1] }
    *(double *)(a1 + 160) = -(_D1 + v102 * v104);
    *(double *)(a1 + 168) = *a3;
    *(double *)(a1 + 176) = a3[4];
    *(double *)(a1 + 184) = a3[8];
    *(double *)(a1 + 200) = a3[1];
    *(double *)(a1 + 208) = a3[5];
    *(double *)(a1 + 216) = a3[9];
    *(double *)(a1 + 232) = a3[2];
    *(double *)(a1 + 240) = a3[6];
    *(double *)(a1 + 248) = a3[10];
    _D1 = *((_QWORD *)a3 + 7);
    v111 = a3[11];
    _Q4 = *(_OWORD *)(a1 + 168);
    __asm { FMLA            D5, D1, V4.D[1] }
    *(double *)(a1 + 192) = -(_D5 + *(double *)(a1 + 184) * v111);
    _Q4 = *(_OWORD *)(a1 + 200);
    __asm { FMLA            D5, D1, V4.D[1] }
    *(double *)(a1 + 224) = -(_D5 + *(double *)(a1 + 216) * v111);
    _Q4 = *(_OWORD *)(a1 + 232);
    __asm { FMLA            D0, D1, V4.D[1] }
    *(double *)(a1 + 256) = -(*(double *)&_Q0 + *(double *)(a1 + 248) * v111);
    v117 = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(a1 + 320) = v117;
    v118 = *(_OWORD *)(a1 + 152);
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(a1 + 136);
    *(_OWORD *)(a1 + 352) = v118;
    v119 = *(_OWORD *)(a1 + 88);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 288) = v119;
    v120 = *(_OWORD *)(a1 + 184);
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(a1 + 384) = v120;
    v121 = *(_OWORD *)(a1 + 200);
    v122 = *(_OWORD *)(a1 + 216);
    v123 = *(_OWORD *)(a1 + 248);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a1 + 232);
    *(_OWORD *)(a1 + 448) = v123;
    *(_OWORD *)(a1 + 400) = v121;
    *(_OWORD *)(a1 + 416) = v122;
    *(_BYTE *)(a1 + 264) = 1;
    goto LABEL_8;
  }
  v5 = *(double *)(a1 + 168);
  v7 = *a3;
  v6 = a3[1];
  v8 = a3[2];
  v9 = a3[3];
  v10 = *(double *)(a1 + 192);
  v11 = *(double *)(a1 + 256);
  v12 = *(double *)(a1 + 224);
  v13 = v9 + *a3 * v10 + v8 * v11 + v6 * v12;
  v15 = a3[4];
  v14 = a3[5];
  v16 = a3[6];
  v17 = a3[7];
  v18 = v12 * v14 + v11 * v16 + v10 * v15 + v17;
  v19 = a3[8];
  v20 = a3[9];
  v21 = a3[10];
  v22 = a3[11];
  v23 = v12 * v20 + v10 * v19 + v11 * v21 + v22;
  v24 = sqrt(v13 * v13 + v18 * v18 + v23 * v23);
  if (v24 < *(double *)(a1 + 56))
    goto LABEL_8;
  v25 = *(double *)(a1 + 392);
  v26 = *(double *)(a1 + 456);
  v27 = *(double *)(a1 + 424);
  v28 = v9 + v7 * v25 + v8 * v26 + v6 * v27;
  v29 = v14 * v27 + v16 * v26 + v17 + v15 * v25;
  if (sqrt(v28 * v28 + v29 * v29 + (v20 * v27 + v19 * v25 + v22 + v21 * v26)
                                  * (v20 * v27 + v19 * v25 + v22 + v21 * v26)) < *(double *)(a1 + 64))
    goto LABEL_8;
  v164 = *(double *)(a1 + 200);
  v165 = *(double *)(a1 + 208);
  v30 = *(double *)(a1 + 232);
  v166 = *(double *)(a1 + 240);
  v32 = *(double *)a2;
  v31 = *(double *)(a2 + 8);
  v33 = *(double *)(a2 + 16);
  v34 = *(double *)(a1 + 96);
  v35 = *(double *)(a1 + 160);
  v162 = *(double *)(a1 + 136);
  v163 = *(double *)(a1 + 104);
  v36 = *(double *)(a1 + 128);
  v37 = *(double *)(a2 + 24) + *(double *)a2 * v34 + v33 * v35 + v31 * v36;
  v38 = *(double *)(a2 + 32);
  v158 = *(double *)(a2 + 48);
  v159 = *(double *)(a2 + 40);
  v39 = v36 * v159 + v35 * v158 + v34 * v38 + *(double *)(a2 + 56);
  v40 = *(double *)(a2 + 72);
  v160 = *(double *)(a2 + 80);
  v157 = *(double *)(a2 + 64);
  v41 = v34 * v157 + v35 * v160 + *(double *)(a2 + 88);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 80);
  _D25 = *(_QWORD *)(a2 + 56);
  v43 = *(double *)(a2 + 88);
  _Q13 = *(_OWORD *)(a1 + 272);
  __asm { FMLA            D14, D25, V13.D[1] }
  *(double *)(a1 + 296) = -(_D14 + *(double *)(a1 + 288) * v43);
  _Q13 = *(_OWORD *)(a1 + 304);
  __asm { FMLA            D14, D25, V13.D[1] }
  *(double *)(a1 + 328) = -(_D14 + *(double *)(a1 + 320) * v43);
  _Q14 = *(_OWORD *)(a1 + 336);
  __asm { FMLA            D19, D25, V14.D[1] }
  *(double *)(a1 + 360) = -(_D19 + *(double *)(a1 + 352) * v43);
  *(double *)(a1 + 368) = *a3;
  *(double *)(a1 + 376) = a3[4];
  *(double *)(a1 + 384) = a3[8];
  *(double *)(a1 + 400) = a3[1];
  *(double *)(a1 + 408) = a3[5];
  *(double *)(a1 + 416) = a3[9];
  *(double *)(a1 + 432) = a3[2];
  *(double *)(a1 + 440) = a3[6];
  *(double *)(a1 + 448) = a3[10];
  _D25 = *((_QWORD *)a3 + 7);
  _Q27 = *(_OWORD *)(a1 + 368);
  __asm { FMLA            D13, D25, V27.D[1] }
  _Q27 = *(_OWORD *)(a1 + 400);
  __asm { FMLA            D14, D25, V27.D[1] }
  _Q27 = *(_OWORD *)(a1 + 432);
  __asm { FMLA            D19, D25, V27.D[1] }
  v59 = a3[11];
  *(double *)&_Q27 = -(*(double *)&_Q13 + *(double *)(a1 + 384) * v59);
  v60 = -(*(double *)&_Q14 + *(double *)(a1 + 416) * v59);
  v61 = -(_D19 + *(double *)(a1 + 448) * v59);
  v62 = *(double *)(a1 + 176);
  v63 = *(double *)(a1 + 184);
  v161 = v40;
  v64 = v36 * v40 + v41;
  v65 = *(double *)(a1 + 248);
  *(_QWORD *)(a1 + 392) = _Q27;
  v66 = *(double *)(a1 + 216);
  *(double *)(a1 + 424) = v60;
  v67 = *(double *)(a1 + 72);
  *(double *)(a1 + 456) = v61;
  v69 = sqrt(v37 * v37 + v39 * v39 + v64 * v64);
  if ((v13 * v37 + v18 * v39 + v23 * v64) / (v24 * v69) < *(double *)(a1 + 48))
    goto LABEL_6;
  v156 = *(double *)(a1 + 120);
  v155 = *(double *)(a1 + 88);
  v71.f64[0] = v5 * v7 + v164 * v6 + v30 * v8;
  v72.f64[0] = v7 * v62 + v6 * v165 + v8 * v166;
  v73 = *(double *)(a1 + 80);
  v74 = *(double *)(a1 + 152);
  v71.f64[1] = v5 * v15 + v164 * v14 + v30 * v16;
  v72.f64[1] = v62 * v15 + v165 * v14 + v166 * v16;
  v75.f64[0] = v7 * v63 + v8 * v65 + v6 * v66;
  v75.f64[1] = v66 * v14 + v63 * v15 + v65 * v16;
  v70 = *(double *)(a1 + 112);
  v68 = *(double *)(a1 + 144);
  if (((v5 * v19 + v30 * v21 + v164 * v20) * (v67 * v157 + v162 * v160 + v163 * v161)
      + (v62 * v19 + v166 * v21 + v165 * v20) * (v73 * v157 + v68 * v160 + v70 * v161)
      + (v63 * v19 + v65 * v21 + v66 * v20) * (v155 * v157 + v74 * v160 + v156 * v161)
      + vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v71, v67 * v32 + v163 * v31 + v162 * v33), v72, v32 * v73 + v31 * v70 + v33 * v68), v75, v32 * v155 + v33 * v74 + v31 * v156), (float64x2_t)vdupq_laneq_s64((int64x2_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v71, v67 * v38 + v163 * v159 + v162 * v158), v72, v73 * v38 + v70 * v159 + v68 * v158), v75, v156 * v159 + v155 * v38 + v74 * v158), 1)).f64[0]+ -1.0)* 0.5 < *(double *)(a1 + 40))
  {
LABEL_6:
    *(_QWORD *)(a1 + 72) = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    v76 = *(double *)(a2 + 64);
    *(double *)(a1 + 88) = v76;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 40);
    v77 = *(double *)(a2 + 72);
    *(double *)(a1 + 120) = v77;
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 48);
    v78 = *(double *)(a2 + 80);
    *(double *)(a1 + 152) = v78;
    _D4 = *(_QWORD *)(a2 + 56);
    v80 = *(double *)(a2 + 88);
    _Q6 = *(_OWORD *)(a1 + 72);
    __asm { FMLA            D7, D4, V6.D[1] }
    *(double *)(a1 + 96) = -(_D7 + v76 * v80);
    _Q0 = *(_OWORD *)(a1 + 104);
    __asm { FMLA            D6, D4, V0.D[1] }
    *(double *)(a1 + 128) = -(*(double *)&_Q6 + v77 * v80);
    _Q0 = *(_OWORD *)(a1 + 136);
    __asm { FMLA            D1, D4, V0.D[1] }
    *(double *)(a1 + 160) = -(_D1 + v78 * v80);
    *(double *)(a1 + 168) = *a3;
    *(double *)(a1 + 176) = a3[4];
    *(double *)(a1 + 184) = a3[8];
    *(double *)(a1 + 200) = a3[1];
    *(double *)(a1 + 208) = a3[5];
    *(double *)(a1 + 216) = a3[9];
    *(double *)(a1 + 232) = a3[2];
    *(double *)(a1 + 240) = a3[6];
    *(double *)(a1 + 248) = a3[10];
    _D1 = *((_QWORD *)a3 + 7);
    v87 = a3[11];
    _Q4 = *(_OWORD *)(a1 + 168);
    __asm { FMLA            D5, D1, V4.D[1] }
    *(double *)(a1 + 192) = -(_D5 + *(double *)(a1 + 184) * v87);
    _Q4 = *(_OWORD *)(a1 + 200);
    __asm { FMLA            D5, D1, V4.D[1] }
    *(double *)(a1 + 224) = -(_D5 + *(double *)(a1 + 216) * v87);
    _Q4 = *(_OWORD *)(a1 + 232);
    __asm { FMLA            D0, D1, V4.D[1] }
    *(double *)(a1 + 256) = -(*(double *)&_Q0 + *(double *)(a1 + 248) * v87);
    v93 = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(a1 + 320) = v93;
    v94 = *(_OWORD *)(a1 + 152);
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(a1 + 136);
    *(_OWORD *)(a1 + 352) = v94;
    v95 = *(_OWORD *)(a1 + 88);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 288) = v95;
    v96 = *(_OWORD *)(a1 + 200);
    v97 = *(_OWORD *)(a1 + 216);
    v98 = *(_OWORD *)(a1 + 248);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a1 + 232);
    *(_OWORD *)(a1 + 448) = v98;
    *(_OWORD *)(a1 + 400) = v96;
    *(_OWORD *)(a1 + 416) = v97;
    v99 = *(_OWORD *)(a1 + 184);
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(a1 + 384) = v99;
LABEL_8:
    v124 = a1 + 472;
    return *(double *)v124;
  }
  v126 = *(_QWORD *)(a1 + 544);
  v127 = *(_QWORD *)(a1 + 504);
  if (v126 == *(_QWORD *)(a1 + 8))
  {
    v128 = *(_QWORD *)(a1 + 576);
    v129 = *(_QWORD *)(a1 + 552);
    v130 = *(double *)(a1 + 488);
    *(double *)(a1 + 496) = *(double *)(a1 + 496) - *(double *)(v129 + 8 * v128);
    v131 = *(_QWORD *)(a1 + 528);
    *(double *)(a1 + 488) = v130 - *(double *)(v127 + 8 * v131);
    *(_QWORD *)(v127 + 8 * v131) = 0;
    v132 = (*(_QWORD *)(a1 + 512) - v127) >> 3;
    v133 = v131 + 1;
    if (v133 >= v132)
      v134 = (*(_QWORD *)(a1 + 512) - v127) >> 3;
    else
      v134 = 0;
    *(_QWORD *)(a1 + 528) = v133 - v134;
    --v126;
    *(_QWORD *)(v129 + 8 * v128) = 0;
    *(_QWORD *)(a1 + 544) = v126;
    v135 = (*(_QWORD *)(a1 + 560) - v129) >> 3;
    v136 = v128 + 1;
    if (v136 < v135)
      v135 = 0;
    *(_QWORD *)(a1 + 576) = v136 - v135;
    --*(_QWORD *)(a1 + 592);
  }
  else
  {
    v132 = (*(_QWORD *)(a1 + 512) - v127) >> 3;
  }
  v137 = v24 + *(double *)(a1 + 496);
  *(double *)(a1 + 488) = v69 + *(double *)(a1 + 488);
  *(double *)(a1 + 496) = v137;
  v138 = *(_QWORD *)(a1 + 536);
  *(double *)(v127 + 8 * v138) = v69;
  v139 = v138 + 1;
  if (v138 + 1 >= v132)
    v140 = v132;
  else
    v140 = 0;
  *(_QWORD *)(a1 + 536) = v139 - v140;
  if (v126 == v132)
  {
    v141 = *(_QWORD *)(a1 + 528) + 1;
    if (v141 >= v132)
      v142 = v132;
    else
      v142 = 0;
    *(_QWORD *)(a1 + 528) = v141 - v142;
  }
  else
  {
    *(_QWORD *)(a1 + 544) = v126 + 1;
  }
  v143 = *(_QWORD *)(a1 + 584);
  v144 = *(_QWORD *)(a1 + 552);
  *(double *)(v144 + 8 * v143) = v24;
  v145 = (*(_QWORD *)(a1 + 560) - v144) >> 3;
  v146 = v143 + 1;
  if (v146 >= v145)
    v147 = v145;
  else
    v147 = 0;
  *(_QWORD *)(a1 + 584) = v146 - v147;
  v148 = *(_QWORD *)(a1 + 592);
  if (v148 == v145)
  {
    v149 = *(_QWORD *)(a1 + 576) + 1;
    if (v149 < v145)
      v145 = 0;
    *(_QWORD *)(a1 + 576) = v149 - v145;
    v150 = (*(_DWORD *)(a1 + 480) + 1);
    *(_DWORD *)(a1 + 480) = v150;
    if (*(_QWORD *)(a1 + 32) > v150)
      goto LABEL_8;
  }
  else
  {
    *(_QWORD *)(a1 + 592) = v148 + 1;
    v151 = (*(_DWORD *)(a1 + 480) + 1);
    *(_DWORD *)(a1 + 480) = v151;
    if (*(_QWORD *)(a1 + 32) > v151)
      goto LABEL_8;
  }
  *a4 = 1;
  *(_BYTE *)(a1 + 680) = 1;
  v152 = *(double *)(a1 + 488);
  if (v152 == 0.0)
    v153 = 1.0;
  else
    v153 = 1.0 / v152;
  v154 = *(double *)(a1 + 496) * v153;
  *(double *)(a1 + 464) = v154;
  if (*(_BYTE *)a1)
  {
    sub_20EDE0944((uint64_t *)(a1 + 552), (uint64_t *)(a1 + 504), *(_QWORD *)(a1 + 16), (double **)(a1 + 600), (double **)(a1 + 624), (double **)(a1 + 648), v154, *(double *)(a1 + 24));
    v124 = a1 + 472;
    *(double *)(a1 + 472) = v154;
  }
  else
  {
    v124 = a1 + 464;
  }
  *(double *)(a1 + 672) = v154;
  return *(double *)v124;
}

double *sub_20EDE2884(double *result, double *a2, double *a3)
{
  unint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  int v9;
  double v10;
  double v11;
  double *v12;
  double *v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double *v25;
  double v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double *v41;
  double v42;
  double v43;
  double *v44;
  double *v45;
  double *v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;

  while (a3 != a2)
  {
    v3 = a3 - result;
    if (v3 < 2)
      break;
    if (v3 == 3)
    {
      v38 = *result;
      v39 = result[1];
      v40 = *(a3 - 1);
      if (v39 >= *result)
      {
        if (v40 < v39)
        {
          result[1] = v40;
          *(a3 - 1) = v39;
          v50 = *result;
          v49 = result[1];
          if (v49 < *result)
          {
            *result = v49;
            result[1] = v50;
          }
        }
      }
      else if (v40 >= v39)
      {
        *result = v39;
        result[1] = v38;
        v51 = *(a3 - 1);
        if (v51 < v38)
        {
          result[1] = v51;
          *(a3 - 1) = v38;
        }
      }
      else
      {
        *result = v40;
        *(a3 - 1) = v38;
      }
      return result;
    }
    if (v3 == 2)
    {
      v36 = *(a3 - 1);
      v37 = *result;
      if (v36 < *result)
      {
        *result = v36;
        *(a3 - 1) = v37;
      }
      return result;
    }
    if ((char *)a3 - (char *)result <= 63)
    {
      while (result != a3 - 1)
      {
        v41 = result++;
        if (v41 != a3 && result != a3)
        {
          v42 = *v41;
          v43 = *v41;
          v44 = result;
          v45 = v41;
          v46 = result;
          do
          {
            v47 = *v46++;
            v48 = v47;
            if (v47 < v43)
            {
              v43 = v48;
              v45 = v44;
            }
            v44 = v46;
          }
          while (v46 != a3);
          if (v45 != v41)
          {
            *v41 = *v45;
            *v45 = v42;
          }
        }
      }
      return result;
    }
    v4 = &result[v3 >> 1];
    v5 = a3 - 1;
    v6 = *(a3 - 1);
    v7 = *v4;
    v8 = *result;
    if (*v4 >= *result)
    {
      if (v6 >= v7)
      {
        v9 = 0;
        v10 = *result;
        v11 = *v4;
        if (*result >= *v4)
          goto LABEL_27;
        goto LABEL_9;
      }
      *v4 = v6;
      *v5 = v7;
      v21 = *result;
      if (*v4 < *result)
      {
        *result = *v4;
        *v4 = v21;
        v9 = 2;
        v10 = *result;
        v11 = *v4;
        if (*result >= *v4)
          goto LABEL_27;
        goto LABEL_9;
      }
LABEL_49:
      v9 = 1;
      v10 = *result;
      v11 = *v4;
      if (*result >= *v4)
        goto LABEL_27;
LABEL_9:
      v12 = a3 - 1;
      v13 = result + 1;
      if (result + 1 >= a3 - 1)
      {
LABEL_31:
        v18 = v13;
      }
      else
      {
LABEL_10:
        v14 = v13;
        while (1)
        {
          v15 = *v4;
          do
          {
            v16 = *v14++;
            v17 = v16;
          }
          while (v16 < v15);
          v18 = v14 - 1;
          do
          {
            v19 = *--v12;
            v20 = v19;
          }
          while (v19 >= v15);
          if (v18 >= v12)
            break;
          *v18 = v20;
          *v12 = v17;
          ++v9;
          if (v18 == v4)
            v4 = v12;
        }
      }
      if (v18 != v4)
      {
        v22 = *v18;
        if (*v4 < *v18)
        {
          *v18 = *v4;
          *v4 = v22;
          ++v9;
        }
      }
      if (v18 == a2)
        return result;
      if (!v9)
      {
        if (v18 <= a2)
        {
          v27 = v18 + 1;
          while (v27 != a3)
          {
            v29 = *(v27 - 1);
            v28 = *v27++;
            if (v28 < v29)
              goto LABEL_37;
          }
        }
        else
        {
          while (v13 != v18)
          {
            v24 = *(v13 - 1);
            v23 = *v13++;
            if (v23 < v24)
              goto LABEL_37;
          }
        }
        return result;
      }
LABEL_37:
      if (v18 <= a2)
        result = v18 + 1;
      else
        a3 = v18;
    }
    else
    {
      if (v6 >= v7)
      {
        *result = v7;
        *v4 = v8;
        if (*v5 < v8)
        {
          *v4 = *v5;
          *v5 = v8;
          v9 = 2;
          v10 = *result;
          v11 = *v4;
          if (*result >= *v4)
            goto LABEL_27;
          goto LABEL_9;
        }
        goto LABEL_49;
      }
      *result = v6;
      *v5 = v8;
      v9 = 1;
      v10 = *result;
      v11 = *v4;
      if (*result < *v4)
        goto LABEL_9;
LABEL_27:
      v12 = a3 - 1;
      while (--v12 != result)
      {
        if (*v12 < v11)
        {
          *result = *v12;
          *v12 = v10;
          ++v9;
          v13 = result + 1;
          if (result + 1 < v12)
            goto LABEL_10;
          goto LABEL_31;
        }
      }
      v25 = result + 1;
      if (v10 >= *v5)
      {
        if (v25 == v5)
          return result;
        while (1)
        {
          v26 = *v25;
          if (v10 < *v25)
            break;
          if (++v25 == v5)
            return result;
        }
        *v25++ = *v5;
        *v5 = v26;
      }
      if (v25 == v5)
        return result;
      while (1)
      {
        v30 = *result;
        do
        {
          v31 = *v25++;
          v32 = v31;
        }
        while (v30 >= v31);
        v33 = v25 - 1;
        do
        {
          v34 = *--v5;
          v35 = v34;
        }
        while (v30 < v34);
        if (v33 >= v5)
          break;
        *v33 = v35;
        *v5 = v32;
      }
      result = v25 - 1;
      if (v33 > a2)
        return result;
    }
  }
  return result;
}

uint64_t sub_20EDE2C2C(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5, double a6)
{
  uint64_t v7;
  uint64_t v11;
  char *v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;

  if (*(_BYTE *)(a5 + 1648))
    goto LABEL_2;
  if (*(_QWORD *)(a2 + 32) < 5uLL || *(_QWORD *)(a2 + 48) < 5uLL)
    return 2;
  v11 = *a3;
  *(_OWORD *)(v11 + 2928) = xmmword_21030D320;
  *(_OWORD *)(v11 + 2944) = xmmword_21030D320;
  *(_OWORD *)(v11 + 2960) = xmmword_21030D320;
  *(_OWORD *)(v11 + 2976) = xmmword_21030D320;
  *(_OWORD *)(v11 + 2992) = xmmword_21030D320;
  *(_OWORD *)(v11 + 3008) = xmmword_21030D320;
  *(_OWORD *)(v11 + 3024) = xmmword_21030D320;
  *(_OWORD *)(v11 + 3040) = xmmword_21030D320;
  *(_OWORD *)(v11 + 3056) = xmmword_21030D320;
  *(_OWORD *)(v11 + 3072) = xmmword_21030D320;
  *(_OWORD *)(v11 + 3088) = xmmword_21030D320;
  *(_OWORD *)(v11 + 3104) = xmmword_21030D320;
  *(_OWORD *)(v11 + 3120) = xmmword_21030D320;
  *(_OWORD *)(v11 + 3136) = xmmword_21030D320;
  *(_OWORD *)(v11 + 3152) = xmmword_21030D320;
  *(_OWORD *)(v11 + 3168) = xmmword_21030D320;
  *(_QWORD *)(v11 + 3400) = 0;
  *(_QWORD *)(v11 + 3416) = 0;
  *(_QWORD *)(v11 + 3408) = 0;
  v12 = (char *)operator new(0x148uLL);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_24C9E99F8;
  sub_20EDA24B4((uint64_t)(v12 + 24), 0, *(double *)(a1 + 408), *(double *)(a1 + 416), *(double *)(a1 + 400));
  sub_20EDA2A08((uint64_t)(v12 + 144), 1, *(double *)(a1 + 424), *(double *)(a1 + 432), *(double *)(a1 + 400));
  *((_QWORD *)v12 + 35) = *(_QWORD *)(a1 + 400);
  v13 = 0uLL;
  *((_OWORD *)v12 + 5) = 0u;
  *((_OWORD *)v12 + 6) = 0u;
  *((_OWORD *)v12 + 7) = 0u;
  v12[128] = 0;
  *((_QWORD *)v12 + 17) = 0xBFF0000000000000;
  *(_OWORD *)(v12 + 200) = 0u;
  *(_OWORD *)(v12 + 216) = 0u;
  *(_OWORD *)(v12 + 232) = 0u;
  *(_OWORD *)(v12 + 248) = 0u;
  v12[264] = 0;
  *((_QWORD *)v12 + 34) = 0xBFF0000000000000;
  *((_QWORD *)v12 + 36) = 0;
  *(_QWORD *)(v11 + 3432) = v12 + 24;
  v14 = *(std::__shared_weak_count **)(v11 + 3440);
  *(_QWORD *)(v11 + 3440) = v12;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = 0uLL;
    }
  }
  v17 = *(_QWORD *)(v11 + 3432);
  *(_BYTE *)(v17 + 104) = 0;
  *(_OWORD *)(v17 + 88) = v13;
  *(_OWORD *)(v17 + 72) = v13;
  *(_OWORD *)(v17 + 56) = v13;
  *(_QWORD *)(v17 + 112) = 0xBFF0000000000000;
  *(_OWORD *)(v17 + 176) = v13;
  *(_OWORD *)(v17 + 192) = v13;
  *(_OWORD *)(v17 + 208) = v13;
  *(_OWORD *)(v17 + 224) = v13;
  *(_BYTE *)(v17 + 240) = 0;
  *(_QWORD *)(v17 + 248) = 0xBFF0000000000000;
  *(_QWORD *)(v17 + 264) = 0;
  *(_QWORD *)(v11 + 3448) = 0;
  v18 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = &off_24C9E9A48;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 24) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  *(_OWORD *)(v18 + 40) = 0u;
  *((_QWORD *)v18 + 4) = v18 + 40;
  *((_DWORD *)v18 + 14) = 1;
  *((_QWORD *)v18 + 8) = 0;
  *((_QWORD *)v18 + 9) = 0;
  *((_QWORD *)v18 + 14) = 0;
  v18[80] = 1;
  *((_QWORD *)v18 + 13) = v18 + 112;
  *((_QWORD *)v18 + 17) = 0;
  *((_QWORD *)v18 + 15) = 0;
  *((_QWORD *)v18 + 16) = v18 + 136;
  *((_QWORD *)v18 + 20) = 0;
  *((_QWORD *)v18 + 18) = 0;
  *((_QWORD *)v18 + 19) = v18 + 160;
  v19 = *(_QWORD *)(a1 + 72);
  v18[96] = *(_BYTE *)(a1 + 80);
  *((_QWORD *)v18 + 11) = v19;
  v20 = *(_QWORD *)(a1 + 112);
  *((_QWORD *)v18 + 21) = 0;
  *((_QWORD *)v18 + 22) = v20;
  *(_QWORD *)(v11 + 1888) = v18 + 24;
  v21 = *(std::__shared_weak_count **)(v11 + 1896);
  *(_QWORD *)(v11 + 1896) = v18;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  *(double *)(v11 + 1824) = a6;
  *(_QWORD *)(v11 + 1832) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(v11 + 1840) = *(_QWORD *)(a2 + 48);
  v7 = sub_20EDD86A4(*(_QWORD *)(v11 + 1888), a2, 0, a4);
  if (!(_DWORD)v7)
  {
LABEL_2:
    v7 = 0;
    ++*(_QWORD *)(a1 + 120);
  }
  return v7;
}

void sub_20EDE2F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EDE2F54(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

float sub_20EDE2F6C(double a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  float result;
  __int128 v20;

  if (*(_BYTE *)(a5 + 1648)
    || (v9 = *a3,
        sub_20EDD9A60(*(uint64_t **)(*a3 + 1888), *(_QWORD *)(a4 + 32), *(_QWORD *)(a4 + 48), 0, a1),
        *(_BYTE *)(a5 + 1648)))
  {
    v10 = *(_QWORD **)(*(_QWORD *)(a5 + 64) + 16);
    if (v10)
    {
      while (v10[4])
      {
        v10 = (_QWORD *)*v10;
        if (!v10)
          goto LABEL_6;
      }
      goto LABEL_11;
    }
LABEL_6:
    sub_20E89FD20("map::at:  key not found");
  }
  v10 = *(_QWORD **)(*(_QWORD *)(v9 + 1888) + 16);
  if (!v10)
    goto LABEL_6;
  while (v10[4])
  {
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_6;
  }
LABEL_11:
  if (!v10[5]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/SingleImageTracker.cpp", 157, (uint64_t)"ref_keyframe", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a3 + 1528;
  v12 = *(_QWORD *)(a4 + 96);
  *(_QWORD *)&v20 = *(_QWORD *)(a4 + 88);
  *((_QWORD *)&v20 + 1) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  sub_20E8E9964(v11, &v20, *(_QWORD *)(a4 + 32), *(_QWORD *)(a4 + 40), *(_QWORD *)(a4 + 48), *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), *(unsigned __int8 *)(a4 + 8), (uint64_t *)(a4 + 72));
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  sub_20EDB4CE8(*a3 + 1336, *(__int128 **)(v10[5] + 24));
  v18 = *a3;
  *(_OWORD *)(*a3 + 1672) = *(_OWORD *)v10[5];
  result = a1;
  *(float *)(v18 + 1688) = result;
  return result;
}

void sub_20EDE3110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EDE3124(_QWORD *a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  _QWORD *v8;
  unint64_t v9;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  _BOOL4 v18;
  double v19;
  double v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v32;
  size_t v33;
  void **v34;
  unint64_t v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  size_t v41;
  const char *v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  const char *v45;
  size_t v46;
  _BYTE *v47;
  unint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void **v52;
  unint64_t v53;
  unint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  size_t v59;
  std::__shared_weak_count_vtbl *v60;
  std::__shared_weak_count *v61;
  size_t v62;
  size_t v63;
  _QWORD *v64;
  void *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  char v70;
  _QWORD *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  void *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  _QWORD *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  const char *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  size_t v128;
  char *v129;
  __int128 v130;
  char *v131;
  char *v132;
  void *v133;
  void *v134;
  char *v135;
  char *v136;
  void *v137;
  void *v138;
  size_t v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  double v148;
  double v149;
  unint64_t v150;
  unint64_t v151;
  int v152;
  uint64_t v153;
  double v154;
  BOOL v155;
  BOOL v156;
  BOOL v157;
  uint64_t v159;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  double v169;
  int v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  int v174;
  int v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  unint64_t v180;
  char *__s;
  uint64_t *v183;
  void *__dst[2];
  int64_t v185;
  double v186[2];
  _QWORD v187[3];
  const void *v188;
  uint64_t v189;
  const void *v190;
  unint64_t v191;
  void *__p;
  char v193;
  unint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  int64x2_t v198;
  __int128 v199;
  __int128 v200;
  std::__shared_weak_count *v201;
  char *v202;
  std::__shared_weak_count *v203;
  _QWORD *v204;
  __int128 v205;
  uint64_t *v206;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v208;
  int v209;
  const char *v210;
  int v211;
  const char *v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  _BYTE v215[24];
  __int128 v216;
  void *v217[2];
  unint64_t v218;
  char v219;
  _QWORD v220[5];

  v8 = a1;
  v220[2] = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    v9 = a3;
    if (a3)
    {
      if (*(_BYTE *)(a6 + 32))
      {
        v12 = a4;
        v13 = *(_OWORD *)(a6 + 16);
        v198 = *(int64x2_t *)a6;
        v199 = v13;
        v183 = (uint64_t *)(a2 + 128);
        if (*(_QWORD *)(a2 + 152) == a3 && *(_QWORD *)(a2 + 160) == a4)
        {
          v14 = 0;
          do
          {
            v15 = *(double *)(a2 + 208 + v14);
            v16 = *(double *)(a5 + v14);
            if (v15 != v16)
              break;
            _ZF = v14 == 64;
            v14 += 8;
          }
          while (!_ZF);
          if (v15 == v16)
          {
            v17 = *(double *)(a2 + 280);
            v18 = v17 == *(double *)v198.i64;
            if (v17 == *(double *)v198.i64)
            {
              v19 = *(double *)(a2 + 288);
              v18 = v19 == *(double *)&v198.i64[1];
              if (v19 == *(double *)&v198.i64[1])
              {
                v20 = *(double *)(a2 + 296);
                v18 = v20 == *(double *)&v199;
                if (v20 == *(double *)&v199)
                  v18 = *(double *)(a2 + 304) == *((double *)&v199 + 1);
              }
            }
            if (v18)
            {
              v21 = operator new(0x30uLL);
              v21[1] = 0;
              v21[2] = 0;
              *v21 = &off_24C9E9A98;
              v22 = sub_20EDEE9FC(v21 + 3, v183);
LABEL_235:
              *v8 = v22;
              v8[1] = v21;
              return;
            }
          }
        }
        sub_20EDE9E68(&v197);
        if (**(int **)(v197 + 56) > 3)
          goto LABEL_163;
        v28 = *(unsigned __int8 *)(v197 + 72);
        v29 = sub_20E8C31DC(v197, "OSLogSurrogateAppender", 1, 0);
        v30 = v29;
        _ZF = !v28 && v29 == 0;
        if (_ZF)
          goto LABEL_163;
        sub_20E863438((uint64_t)v186);
        sub_20E86A980(v187, (uint64_t)"Creating LUT for ", 17);
        v32 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v32, (uint64_t)" ", 1);
        std::ostream::operator<<();
        v179 = v28;
        v180 = v30;
        if ((v195 & 0x10) != 0)
        {
          v35 = v194;
          if (v194 < v191)
          {
            v194 = v191;
            v35 = v191;
          }
          v36 = v190;
          v33 = v35 - (_QWORD)v190;
          if (v35 - (unint64_t)v190 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_85;
        }
        else
        {
          if ((v195 & 8) == 0)
          {
            v33 = 0;
            HIBYTE(v185) = 0;
            v34 = __dst;
            goto LABEL_41;
          }
          v36 = v188;
          v33 = v189 - (_QWORD)v188;
          if ((unint64_t)(v189 - (_QWORD)v188) > 0x7FFFFFFFFFFFFFF7)
LABEL_85:
            sub_20E860B7C();
        }
        if (v33 >= 0x17)
        {
          v37 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v33 | 7) != 0x17)
            v37 = v33 | 7;
          v38 = v37 + 1;
          v34 = (void **)operator new(v37 + 1);
          __dst[1] = (void *)v33;
          v185 = v38 | 0x8000000000000000;
          __dst[0] = v34;
        }
        else
        {
          HIBYTE(v185) = v33;
          v34 = __dst;
          if (!v33)
          {
LABEL_41:
            *((_BYTE *)v34 + v33) = 0;
            v206 = &v197;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v208 = std::chrono::system_clock::now().__d_.__rep_;
            v209 = 3;
            v210 = "unknown file";
            v211 = 1791;
            v214 = 0;
            v212 = "unknown function";
            v213 = 0;
            v39 = __dst;
            if (v185 < 0)
              v39 = (void **)__dst[0];
            __s = (char *)v39;
            v40 = *v206;
            if (*(char *)(*v206 + 39) < 0)
            {
              v42 = *(const char **)(v40 + 16);
              v41 = *(_QWORD *)(v40 + 24);
              v177 = *v206 + 16;
              v178 = *v206;
              v44 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v44 & 1) != 0)
                goto LABEL_47;
            }
            else
            {
              v41 = *(unsigned __int8 *)(*v206 + 39);
              v42 = (const char *)(*v206 + 16);
              v177 = (uint64_t)v42;
              v178 = *v206;
              v43 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v43 & 1) != 0)
                goto LABEL_47;
            }
            if (__cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v215);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v215);
              if ((_BYTE)v216 && (v215[23] & 0x80000000) != 0)
                operator delete(*(void **)v215);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
LABEL_47:
            if (byte_254A4A4F8[23] >= 0)
              v45 = byte_254A4A4F8;
            else
              v45 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v46 = byte_254A4A4F8[23];
            else
              v46 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)v215 = os_log_create(v45, v42);
            v47 = &v215[8];
            if (v46 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v46 >= 0x17)
            {
              v176 = v9;
              v48 = v12;
              v49 = v42;
              v50 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v46 | 7) != 0x17)
                v50 = v46 | 7;
              v51 = v50 + 1;
              v47 = operator new(v50 + 1);
              *(_QWORD *)&v215[16] = v46;
              *(_QWORD *)&v216 = v51 | 0x8000000000000000;
              *(_QWORD *)&v215[8] = v47;
              v42 = v49;
              v12 = v48;
              v9 = v176;
            }
            else
            {
              BYTE7(v216) = v46;
              if (!v46)
              {
LABEL_61:
                v47[v46] = 0;
                BYTE8(v216) = 1;
                v52 = v217;
                if (v41 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v41 >= 0x17)
                {
                  v53 = v9;
                  v54 = v12;
                  v55 = v42;
                  v56 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v41 | 7) != 0x17)
                    v56 = v41 | 7;
                  v57 = v56 + 1;
                  v52 = (void **)operator new(v56 + 1);
                  v217[1] = (void *)v41;
                  v218 = v57 | 0x8000000000000000;
                  v217[0] = v52;
                  v42 = v55;
                  v12 = v54;
                  v9 = v53;
                }
                else
                {
                  HIBYTE(v218) = v41;
                  if (!v41)
                  {
LABEL_69:
                    *((_BYTE *)v52 + v41) = 0;
                    v219 = 1;
                    v58 = *(NSObject **)v215;
                    if (SHIBYTE(v218) < 0)
                      operator delete(v217[0]);
                    if (BYTE8(v216) && SBYTE7(v216) < 0)
                      operator delete(*(void **)&v215[8]);
                    if (*(_QWORD *)v215)
                      os_release(*(void **)v215);
                    if (!v180 || !*(_QWORD *)(v180 + 24))
                    {
                      os_log_type_enabled(v58, OS_LOG_TYPE_INFO);
                      *(_DWORD *)v215 = 136315138;
                      *(_QWORD *)&v215[4] = __s;
                      v65 = (void *)_os_log_send_and_compose_impl();
                      v66 = v179;
                      if (v65)
                        free(v65);
                      goto LABEL_149;
                    }
                    v59 = _os_log_pack_size();
                    v60 = (std::__shared_weak_count_vtbl *)operator new(v59, (std::align_val_t)8uLL);
                    v61 = (std::__shared_weak_count *)operator new();
                    v61->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                    v61->__shared_owners_ = 0;
                    v61->__shared_weak_owners_ = 0;
                    v61[1].__vftable = v60;
                    *(_QWORD *)&v200 = v60;
                    *((_QWORD *)&v200 + 1) = v60;
                    v202 = 0;
                    v203 = 0;
                    v201 = v61;
                    v62 = strlen(__s);
                    if (v62 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    v63 = v62;
                    if (v62 >= 0x17)
                    {
                      v67 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v62 | 7) != 0x17)
                        v67 = v62 | 7;
                      v68 = v67 + 1;
                      v64 = operator new(v67 + 1);
                      *(_QWORD *)&v205 = v63;
                      *((_QWORD *)&v205 + 1) = v68 | 0x8000000000000000;
                      v204 = v64;
                    }
                    else
                    {
                      HIBYTE(v205) = v62;
                      v64 = &v204;
                      if (!v62)
                      {
LABEL_90:
                        *((_BYTE *)v64 + v63) = 0;
                        v69 = v204;
                        v220[0] = v205;
                        *(_QWORD *)((char *)v220 + 7) = *(_QWORD *)((char *)&v205 + 7);
                        v70 = HIBYTE(v205);
                        v71 = operator new(0x38uLL);
                        v71[1] = 0;
                        v71[2] = 0;
                        v71[3] = off_24C9ABC20;
                        *v71 = &off_24C9ABBD0;
                        v72 = v220[0];
                        v71[4] = v69;
                        v71[5] = v72;
                        *(_QWORD *)((char *)v71 + 47) = *(_QWORD *)((char *)v220 + 7);
                        *((_BYTE *)v71 + 55) = v70;
                        v220[0] = 0;
                        *(_QWORD *)((char *)v220 + 7) = 0;
                        v73 = v203;
                        v202 = (char *)(v71 + 3);
                        v203 = (std::__shared_weak_count *)v71;
                        if (v73)
                        {
                          p_shared_owners = (unint64_t *)&v73->__shared_owners_;
                          do
                            v75 = __ldaxr(p_shared_owners);
                          while (__stlxr(v75 - 1, p_shared_owners));
                          if (!v75)
                          {
                            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                            std::__shared_weak_count::__release_weak(v73);
                          }
                        }
                        *(_OWORD *)v215 = v200;
                        v76 = v202;
                        *(_QWORD *)&v215[16] = v201;
                        if (v201)
                        {
                          v77 = (unint64_t *)&v201->__shared_owners_;
                          do
                            v78 = __ldxr(v77);
                          while (__stxr(v78 + 1, v77));
                        }
                        v79 = v203;
                        *(_QWORD *)&v216 = v76;
                        *((_QWORD *)&v216 + 1) = v203;
                        if (v203)
                        {
                          v80 = (unint64_t *)&v203->__shared_owners_;
                          do
                            v81 = __ldxr(v80);
                          while (__stxr(v81 + 1, v80));
                          v217[0] = v76;
                          do
                            v82 = __ldaxr(v80);
                          while (__stlxr(v82 - 1, v80));
                          if (!v82)
                          {
                            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                            std::__shared_weak_count::__release_weak(v79);
                          }
                        }
                        else
                        {
                          v217[0] = v76;
                        }
                        v83 = v201;
                        if (v201)
                        {
                          v84 = (unint64_t *)&v201->__shared_owners_;
                          do
                            v85 = __ldaxr(v84);
                          while (__stlxr(v85 - 1, v84));
                          if (!v85)
                          {
                            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                            std::__shared_weak_count::__release_weak(v83);
                          }
                        }
                        v86 = *(_QWORD *)v215;
                        if (*((char *)v217[0] + 31) >= 0)
                          v87 = (char *)v217[0] + 8;
                        else
                          v87 = (char *)*((_QWORD *)v217[0] + 1);
                        v88 = _os_log_pack_fill();
                        *(_DWORD *)v88 = 136315138;
                        *(_QWORD *)(v88 + 4) = v87;
                        v89 = operator new();
                        v90 = *(unsigned __int8 *)(v178 + 39);
                        v91 = v177;
                        if ((v90 & 0x80u) != 0)
                        {
                          v91 = *(_QWORD *)(v178 + 16);
                          v90 = *(_QWORD *)(v178 + 24);
                        }
                        *(_QWORD *)v89 = v86;
                        *(_OWORD *)(v89 + 8) = *(_OWORD *)&v215[8];
                        *(_QWORD *)&v215[8] = 0;
                        *(_QWORD *)&v215[16] = 0;
                        *(_OWORD *)(v89 + 24) = v216;
                        v216 = 0uLL;
                        *(_QWORD *)(v89 + 40) = v91;
                        *(_QWORD *)(v89 + 48) = v90;
                        *(_BYTE *)(v89 + 56) = 1;
                        v204 = 0;
                        *(_QWORD *)&v200 = v89;
                        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v180 + 24) + 40))(*(_QWORD *)(v180 + 24), &v200);
                        v66 = v179;
                        v92 = v200;
                        *(_QWORD *)&v200 = 0;
                        if (v92)
                        {
                          v93 = *(std::__shared_weak_count **)(v92 + 32);
                          if (v93)
                          {
                            v94 = (unint64_t *)&v93->__shared_owners_;
                            do
                              v95 = __ldaxr(v94);
                            while (__stlxr(v95 - 1, v94));
                            if (!v95)
                            {
                              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                              std::__shared_weak_count::__release_weak(v93);
                            }
                          }
                          v96 = *(std::__shared_weak_count **)(v92 + 16);
                          if (v96)
                          {
                            v97 = (unint64_t *)&v96->__shared_owners_;
                            do
                              v98 = __ldaxr(v97);
                            while (__stlxr(v98 - 1, v97));
                            if (!v98)
                            {
                              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                              std::__shared_weak_count::__release_weak(v96);
                            }
                          }
                          MEMORY[0x212BC6398](v92, 0x10F0C40B62ED6C6);
                          v99 = v204;
                          v204 = 0;
                          if (v99)
                          {
                            v100 = (std::__shared_weak_count *)v99[4];
                            if (v100)
                            {
                              v101 = (unint64_t *)&v100->__shared_owners_;
                              do
                                v102 = __ldaxr(v101);
                              while (__stlxr(v102 - 1, v101));
                              if (!v102)
                              {
                                ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                                std::__shared_weak_count::__release_weak(v100);
                              }
                            }
                            v103 = (std::__shared_weak_count *)v99[2];
                            if (v103)
                            {
                              v104 = (unint64_t *)&v103->__shared_owners_;
                              do
                                v105 = __ldaxr(v104);
                              while (__stlxr(v105 - 1, v104));
                              if (!v105)
                              {
                                ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                                std::__shared_weak_count::__release_weak(v103);
                              }
                            }
                            MEMORY[0x212BC6398](v99, 0x10F0C40B62ED6C6);
                          }
                        }
                        v106 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
                        if (*((_QWORD *)&v216 + 1))
                        {
                          v107 = (unint64_t *)(*((_QWORD *)&v216 + 1) + 8);
                          do
                            v108 = __ldaxr(v107);
                          while (__stlxr(v108 - 1, v107));
                          if (!v108)
                          {
                            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                            std::__shared_weak_count::__release_weak(v106);
                          }
                        }
                        v109 = *(std::__shared_weak_count **)&v215[16];
                        if (*(_QWORD *)&v215[16])
                        {
                          v110 = (unint64_t *)(*(_QWORD *)&v215[16] + 8);
                          do
                            v111 = __ldaxr(v110);
                          while (__stlxr(v111 - 1, v110));
                          if (!v111)
                          {
                            ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                            std::__shared_weak_count::__release_weak(v109);
                          }
                        }
LABEL_149:
                        if (v66)
                        {
                          v112 = (const char *)__dst;
                          if (v185 < 0)
                            v112 = (const char *)__dst[0];
                          sub_20E8C003C((uint64_t)&v206, "%s", v112);
                          sub_20E863570((uint64_t)&v206);
                        }
                        sub_20E863570((uint64_t)&v206);
                        v113 = v214;
                        if (v214)
                        {
                          v114 = (unint64_t *)&v214->__shared_owners_;
                          do
                            v115 = __ldaxr(v114);
                          while (__stlxr(v115 - 1, v114));
                          if (!v115)
                          {
                            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                            std::__shared_weak_count::__release_weak(v113);
                          }
                        }
                        if (SHIBYTE(v185) < 0)
                          operator delete(__dst[0]);
                        v186[0] = *(double *)MEMORY[0x24BEDB7F0];
                        v116 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                        *(double *)((char *)v186 + *(_QWORD *)(*(_QWORD *)&v186[0] - 24)) = *(double *)(MEMORY[0x24BEDB7F0] + 64);
                        v187[0] = v116;
                        v187[1] = MEMORY[0x24BEDB848] + 16;
                        if (v193 < 0)
                          operator delete(__p);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x212BC6290](&v196);
LABEL_163:
                        *(_QWORD *)(a2 + 168) = (unint64_t)((double)v9 * 1.5);
                        *(_QWORD *)(a2 + 176) = (unint64_t)((double)v12 * 1.5);
                        *(_DWORD *)(a2 + 184) = (int)((double)v9 * 0.5 * 0.5);
                        *(_DWORD *)(a2 + 188) = (int)((double)v12 * 0.5 * 0.5);
                        v118 = *(char **)(a2 + 128);
                        v117 = *(char **)(a2 + 136);
                        v119 = (char *)(v117 - v118);
                        v120 = 0xAAAAAAAAAAAAAAABLL * ((v117 - v118) >> 3);
                        if (v120 > 1)
                        {
                          if (v119 != (char *)48)
                          {
                            v135 = v118 + 48;
                            if (v117 != v118 + 48)
                            {
                              v136 = *(char **)(a2 + 136);
                              do
                              {
                                v138 = (void *)*((_QWORD *)v136 - 3);
                                v136 -= 24;
                                v137 = v138;
                                if (v138)
                                {
                                  *((_QWORD *)v117 - 2) = v137;
                                  operator delete(v137);
                                }
                                v117 = v136;
                              }
                              while (v136 != v135);
                            }
                            *(_QWORD *)(a2 + 136) = v135;
                          }
                        }
                        else
                        {
                          v121 = *(_QWORD *)(a2 + 144);
                          if (0xAAAAAAAAAAAAAAABLL * ((v121 - (uint64_t)v117) >> 3) >= 2 - v120)
                          {
                            if ((unint64_t)(v119 - 1) >= 0x18)
                              v139 = 48;
                            else
                              v139 = 24;
                            bzero(*(void **)(a2 + 136), v139);
                            *(_QWORD *)(a2 + 136) = &v117[v139];
                          }
                          else
                          {
                            v122 = 0xAAAAAAAAAAAAAAABLL * ((v121 - (uint64_t)v118) >> 3);
                            v123 = 0x5555555555555556 * ((v121 - (uint64_t)v118) >> 3);
                            if (v123 <= 2)
                              v123 = 2;
                            if (v122 >= 0x555555555555555)
                              v124 = 0xAAAAAAAAAAAAAAALL;
                            else
                              v124 = v123;
                            if (v124 > 0xAAAAAAAAAAAAAAALL)
                              sub_20E877A38();
                            v125 = (char *)operator new(24 * v124);
                            v126 = &v125[8 * ((v117 - v118) >> 3)];
                            v127 = &v125[24 * v124];
                            if ((unint64_t)(v119 - 1) >= 0x18)
                              v128 = 48;
                            else
                              v128 = 24;
                            bzero(&v125[8 * ((v117 - v118) >> 3)], v128);
                            v129 = &v126[v128];
                            if (v117 == v118)
                            {
                              *(_QWORD *)(a2 + 128) = v126;
                              *(_QWORD *)(a2 + 136) = v129;
                              *(_QWORD *)(a2 + 144) = v127;
                            }
                            else
                            {
                              do
                              {
                                v130 = *(_OWORD *)(v117 - 24);
                                v117 -= 24;
                                *(_OWORD *)(v126 - 24) = v130;
                                v126 -= 24;
                                *((_QWORD *)v126 + 2) = *((_QWORD *)v117 + 2);
                                *(_QWORD *)v117 = 0;
                                *((_QWORD *)v117 + 1) = 0;
                                *((_QWORD *)v117 + 2) = 0;
                              }
                              while (v117 != v118);
                              v117 = *(char **)(a2 + 128);
                              v131 = *(char **)(a2 + 136);
                              *(_QWORD *)(a2 + 128) = v126;
                              *(_QWORD *)(a2 + 136) = v129;
                              *(_QWORD *)(a2 + 144) = v127;
                              if (v131 != v117)
                              {
                                v132 = v131;
                                do
                                {
                                  v134 = (void *)*((_QWORD *)v132 - 3);
                                  v132 -= 24;
                                  v133 = v134;
                                  if (v134)
                                  {
                                    *((_QWORD *)v131 - 2) = v133;
                                    operator delete(v133);
                                  }
                                  v131 = v132;
                                }
                                while (v132 != v117);
                              }
                            }
                            if (v117)
                              operator delete(v117);
                          }
                        }
                        v140 = *(unint64_t **)(a2 + 128);
                        v141 = *(_DWORD *)(a2 + 168) * *(_DWORD *)(a2 + 176);
                        LOWORD(v186[0]) = -17408;
                        v142 = (uint64_t)(v140[1] - *v140) >> 1;
                        if (v141 <= v142)
                        {
                          if (v141 < v142)
                            v140[1] = *v140 + 2 * v141;
                        }
                        else
                        {
                          sub_20EDEEBCC(v140, v141 - v142, (const __int16 *)v186);
                          v140 = (unint64_t *)*v183;
                        }
                        v143 = v140[3];
                        v144 = v140[4];
                        LOWORD(v186[0]) = -17408;
                        v145 = (uint64_t)(v144 - v143) >> 1;
                        if (v141 <= v145)
                        {
                          if (v141 < v145)
                            v140[4] = v143 + 2 * v141;
                        }
                        else
                        {
                          sub_20EDEEBCC(v140 + 3, v141 - v145, (const __int16 *)v186);
                          v140 = (unint64_t *)*v183;
                        }
                        v146 = *(_QWORD *)(a2 + 176);
                        if (!v146 || !*(_QWORD *)(a2 + 168))
                        {
LABEL_230:
                          *(_QWORD *)(a2 + 152) = v9;
                          *(_QWORD *)(a2 + 160) = v12;
                          *(_OWORD *)(a2 + 208) = *(_OWORD *)a5;
                          v164 = *(_OWORD *)(a5 + 16);
                          v165 = *(_OWORD *)(a5 + 32);
                          v166 = *(_OWORD *)(a5 + 48);
                          *(_QWORD *)(a2 + 272) = *(_QWORD *)(a5 + 64);
                          *(_OWORD *)(a2 + 240) = v165;
                          *(_OWORD *)(a2 + 256) = v166;
                          *(_OWORD *)(a2 + 224) = v164;
                          v167 = v199;
                          *(int64x2_t *)(a2 + 280) = v198;
                          *(_OWORD *)(a2 + 296) = v167;
                          v168 = *a7;
                          if (*a7)
                          {
                            v169 = *(double *)(v168 + 376);
                            v170 = *(unsigned __int8 *)(v168 + 384);
                            *(double *)(a2 + 368) = v169;
                            *(_BYTE *)(a2 + 376) = v170;
                            if (v170)
                              *(double *)(a2 + 368) = 1.0 / v169;
                            v171 = *(_OWORD *)(*a7 + 320);
                            v172 = *(_OWORD *)(*a7 + 336);
                            v173 = *(_OWORD *)(*a7 + 352);
                            *(_BYTE *)(a2 + 360) = *(_BYTE *)(*a7 + 368);
                            *(_OWORD *)(a2 + 344) = v173;
                            *(_OWORD *)(a2 + 328) = v172;
                            *(_OWORD *)(a2 + 312) = v171;
                          }
                          v174 = *(_DWORD *)(a2 + 184);
                          v175 = *(_DWORD *)(a2 + 188);
                          *(_DWORD *)(a2 + 192) = 1 - v174;
                          *(_DWORD *)(a2 + 196) = 1 - v175;
                          *(_DWORD *)(a2 + 200) = v9 + v174 - 1;
                          *(_DWORD *)(a2 + 204) = v12 + v175 - 1;
                          v21 = operator new(0x30uLL);
                          v21[1] = 0;
                          v21[2] = 0;
                          *v21 = &off_24C9E9A98;
                          v22 = sub_20EDEE9FC(v21 + 3, v183);
                          v8 = a1;
                          goto LABEL_235;
                        }
                        v147 = 0;
                        v148 = (double)(v9 - 1);
                        v149 = (double)(v12 - 1);
                        v150 = 1;
                        while (!v150)
                        {
LABEL_207:
                          if (++v147 >= v146)
                            goto LABEL_230;
                        }
                        v151 = 0;
                        while (1)
                        {
                          v152 = *(_DWORD *)(a2 + 188);
                          v186[0] = (double)v151 - (double)*(int *)(a2 + 184);
                          v186[1] = (double)v147 - (double)v152;
                          *(_QWORD *)v215 = 0;
                          *(_QWORD *)&v215[8] = 0;
                          sub_20EDD585C(v186, &v198, (double *)a5, (double *)v215);
                          v153 = *a7;
                          v154 = *(double *)v215;
                          if (!*a7)
                            goto LABEL_220;
                          v155 = *(double *)v215 < 0.0 || *(double *)&v215[8] > v149;
                          v156 = v155 || *(double *)v215 > v148;
                          if (v156 || *(double *)&v215[8] < 0.0)
                            goto LABEL_220;
                          v206 = *(uint64_t **)v215;
                          rep = *(_QWORD *)&v215[8];
                          if (sub_2100E602C(v153, (double *)&v206, (float64x2_t *)v215, 1))
                            break;
LABEL_210:
                          ++v151;
                          v150 = *(_QWORD *)(a2 + 168);
                          if (v151 >= v150)
                          {
                            v146 = *(_QWORD *)(a2 + 176);
                            goto LABEL_207;
                          }
                        }
                        v154 = *(double *)v215;
LABEL_220:
                        if (v154 >= 0.0)
                        {
                          v157 = *(double *)&v215[8] > v149 || v154 > v148;
                          if (!v157 && *(double *)&v215[8] >= 0.0)
                          {
                            _S0 = v154;
                            v159 = 2 * (v151 + v147 * *(_QWORD *)(a2 + 168));
                            __asm { FCVT            H0, S0 }
                            *(_WORD *)(*v140 + v159) = LOWORD(_S0);
                            _S0 = *(double *)&v215[8];
                            __asm { FCVT            H0, S0 }
                            *(_WORD *)(v140[3] + v159) = LOWORD(_S0);
                          }
                        }
                        goto LABEL_210;
                      }
                    }
                    memcpy(v64, __s, v63);
                    goto LABEL_90;
                  }
                }
                memmove(v52, v42, v41);
                goto LABEL_69;
              }
            }
            memmove(v47, v45, v46);
            goto LABEL_61;
          }
        }
        memmove(v34, v36, v33);
        goto LABEL_41;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 128);
  v23 = *(_QWORD *)(a2 + 136);
  if (v23 != v24)
  {
    v25 = *(_QWORD *)(a2 + 136);
    do
    {
      v27 = *(void **)(v25 - 24);
      v25 -= 24;
      v26 = v27;
      if (v27)
      {
        *(_QWORD *)(v23 - 16) = v26;
        operator delete(v26);
      }
      v23 = v25;
    }
    while (v25 != v24);
  }
  *(_QWORD *)(a2 + 136) = v24;
  *v8 = 0;
  v8[1] = 0;
}

void sub_20EDE41AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  uint64_t v72;

  if (*(_BYTE *)(v72 - 200) && *(char *)(v72 - 201) < 0)
    operator delete(*(void **)(v72 - 224));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a72);
  if (a25 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a26);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_20EDE4338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  float v8;
  double v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t i;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  long double v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t *v168;
  _QWORD v169[12];
  std::__shared_weak_count *v170;
  std::__shared_weak_count *v171;
  void *v172;
  void *v173;
  _QWORD v174[12];
  std::__shared_weak_count *v175;
  std::__shared_weak_count *v176;
  void *v177;
  void *v178;
  _QWORD v179[12];
  std::__shared_weak_count *v180;
  std::__shared_weak_count *v181;
  void *v182;
  void *v183;
  uint64_t (**v184)();
  unsigned __int8 v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  __int128 v192;
  std::__shared_weak_count *v193;
  void *__p;
  void *v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  __int128 v203;
  std::__shared_weak_count *v204;
  void *v205;
  void *v206;
  uint64_t (**v207)();
  char v208;
  __int128 v209;
  __int128 v210;
  _BYTE v211[40];
  __int128 v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  uint64_t (**v216)();
  char v217;
  __int128 v218;
  __int128 v219;
  uint64_t v220[4];
  char v221;
  __int128 __dst;
  __int128 v223;
  __int128 v224;
  uint64_t v225;
  uint64_t (**v226)();
  char v227;
  __int128 v228;
  __int128 v229;
  unint64_t v230[4];
  char v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;

  v7 = *(_QWORD *)(a2 + 1840);
  if (v7 >= *(_QWORD *)(a2 + 1832))
    v7 = *(_QWORD *)(a2 + 1832);
  *(_QWORD *)(a2 + 3192) = 0;
  *(_QWORD *)(a2 + 3208) = 0;
  *(_QWORD *)(a2 + 3200) = 0;
  *(_QWORD *)(a2 + 3224) = 0;
  *(_QWORD *)(a2 + 3240) = 0;
  *(_QWORD *)(a2 + 3232) = 0;
  *(_QWORD *)(a2 + 3248) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 3264) = 0;
  *(_QWORD *)(a2 + 3280) = 0;
  *(_QWORD *)(a2 + 3272) = 0;
  *(_QWORD *)(a2 + 3296) = 0;
  if ((float)((float)v7 / 150.0) >= 1.0)
    v8 = (float)v7 / 150.0;
  else
    v8 = 1.0;
  *(_QWORD *)(a2 + 3312) = 0;
  *(_QWORD *)(a2 + 3304) = 0;
  *(_QWORD *)(a2 + 3320) = 0x3FF0000000000000;
  *(double *)(a2 + 3216) = v8;
  *(double *)(a2 + 3184) = v8;
  v9 = 1.0 / v8;
  *(double *)(a2 + 3288) = v9;
  *(double *)(a2 + 3256) = v9;
  v226 = &off_24C9AFD78;
  v227 = 0;
  v231 = 0;
  v228 = 0u;
  v229 = 0u;
  memset(v230, 0, 25);
  v232 = 0u;
  v233 = 0u;
  v234 = 0u;
  v235 = 0;
  v216 = &off_24C9AFD78;
  v217 = 0;
  v221 = 0;
  v218 = 0u;
  v219 = 0u;
  memset(v220, 0, 25);
  __dst = 0u;
  v223 = 0u;
  v224 = 0u;
  v225 = 0;
  v207 = &off_24C9AFD78;
  v208 = 0;
  v211[32] = 0;
  v209 = 0u;
  v210 = 0u;
  memset(v211, 0, 25);
  v212 = 0u;
  v213 = 0u;
  v214 = 0u;
  v215 = 0;
  if (v8 == 1.0)
  {
    sub_20EDA8E0C(&v226, *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 48), *(_QWORD *)(a3 + 16), 0, 0);
    memcpy((void *)v232, *(const void **)(a3 + 88), *(_QWORD *)(a3 + 48) * *(_QWORD *)(a3 + 40));
    if (*(_QWORD *)(a4 + 88))
    {
      sub_20EDA8E0C(&v216, *(_QWORD *)(a4 + 32), *(_QWORD *)(a4 + 40), *(_QWORD *)(a4 + 48), *(_QWORD *)(a4 + 16), 0, 0);
      memcpy((void *)__dst, *(const void **)(a4 + 88), *(_QWORD *)(a4 + 48) * *(_QWORD *)(a4 + 40));
      if (!(_QWORD)__dst)
        goto LABEL_64;
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  v10 = *(_QWORD *)(a3 + 96);
  *(_QWORD *)&v196 = *(_QWORD *)(a3 + 88);
  *((_QWORD *)&v196 + 1) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  sub_20E8E9964((uint64_t)&v226, &v196, *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 48), *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(unsigned __int8 *)(a3 + 8), (uint64_t *)(a3 + 72));
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
  if (*((_QWORD *)&v196 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(_QWORD *)(a4 + 96);
  *(_QWORD *)&v196 = *(_QWORD *)(a4 + 88);
  *((_QWORD *)&v196 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  sub_20E8E9964((uint64_t)&v216, &v196, *(_QWORD *)(a4 + 32), *(_QWORD *)(a4 + 40), *(_QWORD *)(a4 + 48), *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), *(unsigned __int8 *)(a4 + 8), (uint64_t *)(a4 + 72));
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
  if (*((_QWORD *)&v196 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (unint64_t)((float)((float)(unint64_t)v229 / v8) + 0.5);
  v23 = (unint64_t)((float)((float)v230[0] / v8) + 0.5);
  sub_20EDB4A1C((uint64_t)&v196, v22, v23);
  sub_210120684(v232, (_OWORD *)v203, v229, *((uint64_t *)&v229 + 1), v230[0], v199, v200, v201, v24, v25, v26, 1uLL);
  sub_20E8E9964((uint64_t)&v226, &v203, v199, v200, v201, v197, v198, BYTE8(v196), &v202);
  v199 = 0;
  v200 = 0;
  v201 = 0;
  if ((_QWORD)__dst)
  {
    sub_20EDB4A1C((uint64_t)&v184, v22, v23);
    sub_210120684(__dst, (_OWORD *)v192, v219, *((uint64_t *)&v219 + 1), v220[0], v188, v189, v190, v27, v28, v29, v218);
    sub_20E8E9964((uint64_t)&v216, &v192, v188, v189, v190, v186, v187, v185, &v191);
    v188 = 0;
    v189 = 0;
    v190 = 0;
    v184 = &off_24C9AFD78;
    if (__p)
    {
      v195 = __p;
      operator delete(__p);
    }
    v30 = v193;
    if (v193)
    {
      p_shared_owners = (unint64_t *)&v193->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
    if (*((_QWORD *)&v192 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
  *(_QWORD *)&v196 = &off_24C9AFD78;
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  v36 = v204;
  if (!v204)
    goto LABEL_45;
  v37 = (unint64_t *)&v204->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    v39 = (std::__shared_weak_count *)*((_QWORD *)&v203 + 1);
    if (!*((_QWORD *)&v203 + 1))
      goto LABEL_49;
  }
  else
  {
LABEL_45:
    v39 = (std::__shared_weak_count *)*((_QWORD *)&v203 + 1);
    if (!*((_QWORD *)&v203 + 1))
      goto LABEL_49;
  }
  v40 = (unint64_t *)&v39->__shared_owners_;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (v41)
  {
LABEL_49:
    if (!(_QWORD)__dst)
      goto LABEL_64;
    goto LABEL_50;
  }
  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  if (!(_QWORD)__dst)
    goto LABEL_64;
LABEL_50:
  v42 = v220[0];
  if (!v220[0])
  {
    v43 = v219;
LABEL_63:
    sub_20EDA8E0C(&v207, v43, *((unint64_t *)&v219 + 1), v42, v218, 0, 0);
    memcpy((void *)v212, (const void *)__dst, v220[0] * *((_QWORD *)&v219 + 1));
    goto LABEL_64;
  }
  v43 = v219;
  if (!(_QWORD)v219)
    goto LABEL_63;
  v44 = 0;
  v45 = 1;
  do
  {
    if (v45)
    {
      v46 = 0;
      v47 = *(_QWORD *)(v224 + 8 * v44);
      do
      {
        if (*(_BYTE *)(v47 + v46))
        {
          *(_BYTE *)(v47 + v46) = 1;
          v43 = v219;
        }
        ++v46;
      }
      while (v46 < v43);
      v42 = v220[0];
      v45 = v43;
    }
    ++v44;
  }
  while (v44 < v42);
  if ((_QWORD)__dst)
    goto LABEL_63;
LABEL_64:
  if ((_QWORD)v228 != 1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/SingleImageTracker.cpp", 294, (uint64_t)"reference_image.num_channels() == 1", 35, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| !(_QWORD)v229&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/SingleImageTracker.cpp", 295, (uint64_t)"reference_image.width() > 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| !v230[0]&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/SingleImageTracker.cpp",
         296,
         (uint64_t)"reference_image.height() > 0",
         28,
         (uint64_t)"",
         0,
         (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(_DWORD *)(a2 + 2544) = 25;
  v48 = (uint64_t *)(a2 + 1904);
  v49 = *(_QWORD *)(a2 + 1912);
  if (v49 >= *(_QWORD *)(a2 + 1920))
  {
    v50 = sub_20EDB6BB8((_QWORD *)(a2 + 1904), (uint64_t)&v226);
  }
  else
  {
    sub_20EDB79B8(*(_QWORD *)(a2 + 1912), (uint64_t)&v226);
    v50 = v49 + 144;
    *(_QWORD *)(a2 + 1912) = v49 + 144;
  }
  *(_QWORD *)(a2 + 1912) = v50;
  v51 = *(_QWORD *)(a2 + 1960);
  if (v51 >= *(_QWORD *)(a2 + 1968))
  {
    v52 = sub_20EDB6BB8((_QWORD *)(a2 + 1952), (uint64_t)&v216);
  }
  else
  {
    sub_20EDB79B8(*(_QWORD *)(a2 + 1960), (uint64_t)&v216);
    v52 = v51 + 144;
    *(_QWORD *)(a2 + 1960) = v51 + 144;
  }
  *(_QWORD *)(a2 + 1960) = v52;
  v53 = *(_QWORD *)(a2 + 1984);
  if (v53 >= *(_QWORD *)(a2 + 1992))
  {
    v54 = sub_20EDB6BB8((_QWORD *)(a2 + 1976), (uint64_t)&v207);
  }
  else
  {
    sub_20EDB79B8(*(_QWORD *)(a2 + 1984), (uint64_t)&v207);
    v54 = v53 + 144;
    *(_QWORD *)(a2 + 1984) = v53 + 144;
  }
  *(_QWORD *)(a2 + 1984) = v54;
  sub_20EDE5988((uint64_t)&v196, v229, *((unint64_t *)&v229 + 1), v230[0], v228);
  v55 = *(_QWORD *)(a2 + 1936);
  if (v55 >= *(_QWORD *)(a2 + 1944))
  {
    v56 = sub_20EDEE19C((_QWORD *)(a2 + 1928), (uint64_t)&v196);
  }
  else
  {
    sub_20EDEE370(*(_QWORD *)(a2 + 1936), (uint64_t)&v196);
    v56 = v55 + 144;
    *(_QWORD *)(a2 + 1936) = v55 + 144;
  }
  *(_QWORD *)(a2 + 1936) = v56;
  v57 = *(_DWORD *)(a2 + 2544);
  if (!v57
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/SingleImageTracker.cpp", 1286, (uint64_t)"minimum_pyramid_image_size > 0", 30, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (*(_QWORD *)(*v48 + 48) >= *(_QWORD *)(*v48 + 32)? (v58 = *(_QWORD *)(*v48 + 32)): (v58 = *(_QWORD *)(*v48 + 48)), !(_DWORD)v58&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/SingleImageTracker.cpp", 1289, (uint64_t)"min_width_height > 0", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
  {
    abort();
  }
  if (v57 <= v58)
  {
    LODWORD(v61) = vcvtmd_u64_f64(log2((double)(v58 / v57))) + 1;
    v59 = (unsigned int *)(a2 + 2548);
    *(_DWORD *)(a2 + 2548) = v61;
    if (v61 < 2)
      goto LABEL_179;
    v62 = 1;
    while (1)
    {
      sub_20EDB79B8((uint64_t)&v184, *v48 + 144 * v62 - 144);
      sub_20EDB4A1C((uint64_t)v179, v188 >> 1, v190 >> 1);
      sub_21012115C((uint8x8_t *)v179[11], (uint8x16_t *)v192, v188, v189, v190);
      sub_20EDE5988((uint64_t)v174, v179[4], v179[5], v179[6], v179[2]);
      v63 = *(_QWORD *)(a2 + 1936);
      if (v63 >= *(_QWORD *)(a2 + 1944))
      {
        v64 = sub_20EDEE19C((_QWORD *)(a2 + 1928), (uint64_t)v174);
      }
      else
      {
        sub_20EDEE370(*(_QWORD *)(a2 + 1936), (uint64_t)v174);
        v64 = v63 + 144;
        *(_QWORD *)(a2 + 1936) = v63 + 144;
      }
      *(_QWORD *)(a2 + 1936) = v64;
      v65 = *(_QWORD *)(a2 + 1912);
      if (v65 >= *(_QWORD *)(a2 + 1920))
      {
        v66 = sub_20EDEE19C((_QWORD *)(a2 + 1904), (uint64_t)v179);
      }
      else
      {
        sub_20EDEE370(*(_QWORD *)(a2 + 1912), (uint64_t)v179);
        v66 = v65 + 144;
        *(_QWORD *)(a2 + 1912) = v65 + 144;
      }
      *(_QWORD *)(a2 + 1912) = v66;
      v174[0] = &off_24C9AFD78;
      if (v177)
      {
        v178 = v177;
        operator delete(v177);
      }
      v67 = v176;
      if (!v176)
        goto LABEL_106;
      v68 = (unint64_t *)&v176->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
        v70 = v175;
        if (!v175)
          goto LABEL_112;
      }
      else
      {
LABEL_106:
        v70 = v175;
        if (!v175)
          goto LABEL_112;
      }
      v71 = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
LABEL_112:
      v179[0] = &off_24C9AFD78;
      if (v182)
      {
        v183 = v182;
        operator delete(v182);
      }
      v73 = v181;
      if (!v181)
        goto LABEL_118;
      v74 = (unint64_t *)&v181->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
        v76 = v180;
        if (!v180)
          goto LABEL_124;
      }
      else
      {
LABEL_118:
        v76 = v180;
        if (!v180)
          goto LABEL_124;
      }
      v77 = (unint64_t *)&v76->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
LABEL_124:
      v184 = &off_24C9AFD78;
      if (__p)
      {
        v195 = __p;
        operator delete(__p);
      }
      v79 = v193;
      if (!v193)
        goto LABEL_130;
      v80 = (unint64_t *)&v193->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
        v82 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
        if (*((_QWORD *)&v192 + 1))
        {
LABEL_131:
          v83 = (unint64_t *)&v82->__shared_owners_;
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 - 1, v83));
          if (!v84)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
      }
      else
      {
LABEL_130:
        v82 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
        if (*((_QWORD *)&v192 + 1))
          goto LABEL_131;
      }
      ++v62;
      v61 = *v59;
      if (v62 >= v61)
      {
        if (v61 >= 2)
        {
          for (i = 1; i < v61; ++i)
          {
            if (!(_QWORD)__dst)
            {
              v89 = *(_QWORD *)(a2 + 1960);
              if (v89 >= *(_QWORD *)(a2 + 1968))
              {
                v90 = sub_20EDB6BB8((_QWORD *)(a2 + 1952), (uint64_t)&v216);
              }
              else
              {
                sub_20EDB79B8(*(_QWORD *)(a2 + 1960), (uint64_t)&v216);
                v90 = v89 + 144;
                *(_QWORD *)(a2 + 1960) = v89 + 144;
              }
              *(_QWORD *)(a2 + 1960) = v90;
              v99 = *(_QWORD *)(a2 + 1984);
              if (v99 >= *(_QWORD *)(a2 + 1992))
              {
                v86 = sub_20EDB6BB8((_QWORD *)(a2 + 1976), (uint64_t)&v207);
              }
              else
              {
                sub_20EDB79B8(*(_QWORD *)(a2 + 1984), (uint64_t)&v207);
                v86 = v99 + 144;
                *(_QWORD *)(a2 + 1984) = v99 + 144;
              }
              *(_QWORD *)(a2 + 1984) = v86;
              goto LABEL_141;
            }
            sub_20EDB79B8((uint64_t)&v184, *(_QWORD *)(a2 + 1952) + 144 * i - 144);
            sub_20EDB4A1C((uint64_t)v179, v188 >> 1, v190 >> 1);
            sub_210120448(v179, &v184);
            v87 = *(_QWORD *)(a2 + 1960);
            if (v87 >= *(_QWORD *)(a2 + 1968))
            {
              v88 = sub_20EDEE19C((_QWORD *)(a2 + 1952), (uint64_t)v179);
            }
            else
            {
              sub_20EDEE370(*(_QWORD *)(a2 + 1960), (uint64_t)v179);
              v88 = v87 + 144;
              *(_QWORD *)(a2 + 1960) = v88;
            }
            *(_QWORD *)(a2 + 1960) = v88;
            sub_20EDA8E0C(&v207, *(_QWORD *)(v88 - 112), *(_QWORD *)(v88 - 104), *(_QWORD *)(v88 - 96), *(_QWORD *)(v88 - 128), 0, 0);
            memcpy((void *)v212, *(const void **)(v88 - 56), *(_QWORD *)(v88 - 104) * *(_QWORD *)(v88 - 96));
            v91 = *(_QWORD *)(a2 + 1984);
            if (v91 >= *(_QWORD *)(a2 + 1992))
            {
              v92 = sub_20EDB6BB8((_QWORD *)(a2 + 1976), (uint64_t)&v207);
            }
            else
            {
              sub_20EDB79B8(*(_QWORD *)(a2 + 1984), (uint64_t)&v207);
              v92 = v91 + 144;
              *(_QWORD *)(a2 + 1984) = v91 + 144;
            }
            *(_QWORD *)(a2 + 1984) = v92;
            v179[0] = &off_24C9AFD78;
            if (v182)
            {
              v183 = v182;
              operator delete(v182);
            }
            v93 = v181;
            if (!v181)
              goto LABEL_157;
            v94 = (unint64_t *)&v181->__shared_owners_;
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
              v96 = v180;
              if (!v180)
                goto LABEL_166;
            }
            else
            {
LABEL_157:
              v96 = v180;
              if (!v180)
                goto LABEL_166;
            }
            v97 = (unint64_t *)&v96->__shared_owners_;
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
            }
LABEL_166:
            v184 = &off_24C9AFD78;
            if (__p)
            {
              v195 = __p;
              operator delete(__p);
            }
            v100 = v193;
            if (!v193)
              goto LABEL_172;
            v101 = (unint64_t *)&v193->__shared_owners_;
            do
              v102 = __ldaxr(v101);
            while (__stlxr(v102 - 1, v101));
            if (!v102)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
              v103 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
              if (*((_QWORD *)&v192 + 1))
              {
LABEL_173:
                v104 = (unint64_t *)&v103->__shared_owners_;
                do
                  v105 = __ldaxr(v104);
                while (__stlxr(v105 - 1, v104));
                if (!v105)
                {
                  ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                  std::__shared_weak_count::__release_weak(v103);
                }
              }
            }
            else
            {
LABEL_172:
              v103 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
              if (*((_QWORD *)&v192 + 1))
                goto LABEL_173;
            }
LABEL_141:
            v61 = *v59;
          }
        }
LABEL_179:
        v60 = *v48;
        if (!(_DWORD)v61)
          goto LABEL_245;
        v168 = (uint64_t *)(a2 + 1904);
        goto LABEL_181;
      }
    }
  }
  v168 = (uint64_t *)(a2 + 1904);
  v59 = (unsigned int *)(a2 + 2548);
  *(_DWORD *)(a2 + 2548) = 1;
  v60 = *(_QWORD *)(a2 + 1904);
LABEL_181:
  v106 = 0;
  v107 = *(_QWORD *)(v60 + 48);
  v108 = *(_QWORD *)(v60 + 32);
  do
  {
    sub_20EDD4F9C((uint64_t)&v184, v108, v107);
    v109 = *(_QWORD *)(a2 + 2032);
    if (v109 >= *(_QWORD *)(a2 + 2040))
    {
      v110 = sub_20EDEE48C((_QWORD *)(a2 + 2024), (uint64_t)&v184);
    }
    else
    {
      sub_20EDB5734(*(_QWORD *)(a2 + 2032), (uint64_t)&v184);
      v110 = v109 + 144;
      *(_QWORD *)(a2 + 2032) = v109 + 144;
    }
    *(_QWORD *)(a2 + 2032) = v110;
    sub_20EDD4F9C((uint64_t)v179, v108, v107);
    v111 = *(_QWORD *)(a2 + 2072);
    if (v111 >= *(_QWORD *)(a2 + 2080))
    {
      v112 = sub_20EDEE48C((_QWORD *)(a2 + 2064), (uint64_t)v179);
    }
    else
    {
      sub_20EDB5734(*(_QWORD *)(a2 + 2072), (uint64_t)v179);
      v112 = v111 + 144;
      *(_QWORD *)(a2 + 2072) = v111 + 144;
    }
    *(_QWORD *)(a2 + 2072) = v112;
    sub_20EDD4F9C((uint64_t)v174, 2 * v108, v107);
    v113 = *(_QWORD *)(a2 + 2096);
    if (v113 >= *(_QWORD *)(a2 + 2104))
    {
      v114 = sub_20EDEE48C((_QWORD *)(a2 + 2088), (uint64_t)v174);
    }
    else
    {
      sub_20EDB5734(*(_QWORD *)(a2 + 2096), (uint64_t)v174);
      v114 = v113 + 144;
      *(_QWORD *)(a2 + 2096) = v113 + 144;
    }
    *(_QWORD *)(a2 + 2096) = v114;
    sub_20EDB4A1C((uint64_t)v169, v108, v107);
    v115 = *(_QWORD *)(a2 + 2008);
    if (v115 >= *(_QWORD *)(a2 + 2016))
    {
      v116 = sub_20EDB6BB8((_QWORD *)(a2 + 2000), (uint64_t)v169);
    }
    else
    {
      sub_20EDB79B8(*(_QWORD *)(a2 + 2008), (uint64_t)v169);
      v116 = v115 + 144;
      *(_QWORD *)(a2 + 2008) = v115 + 144;
    }
    *(_QWORD *)(a2 + 2008) = v116;
    v169[0] = &off_24C9AFD78;
    if (v172)
    {
      v173 = v172;
      operator delete(v172);
    }
    v117 = v171;
    if (!v171)
      goto LABEL_201;
    v118 = (unint64_t *)&v171->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
      v120 = v170;
      if (!v170)
        goto LABEL_207;
    }
    else
    {
LABEL_201:
      v120 = v170;
      if (!v170)
        goto LABEL_207;
    }
    v121 = (unint64_t *)&v120->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
LABEL_207:
    v174[0] = &off_24C9E9690;
    if (v177)
    {
      v178 = v177;
      operator delete(v177);
    }
    v123 = v176;
    if (!v176)
      goto LABEL_213;
    v124 = (unint64_t *)&v176->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
      v126 = v175;
      if (!v175)
        goto LABEL_219;
    }
    else
    {
LABEL_213:
      v126 = v175;
      if (!v175)
        goto LABEL_219;
    }
    v127 = (unint64_t *)&v126->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
LABEL_219:
    v179[0] = &off_24C9E9690;
    if (v182)
    {
      v183 = v182;
      operator delete(v182);
    }
    v129 = v181;
    if (!v181)
      goto LABEL_225;
    v130 = (unint64_t *)&v181->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
      v132 = v180;
      if (!v180)
        goto LABEL_231;
    }
    else
    {
LABEL_225:
      v132 = v180;
      if (!v180)
        goto LABEL_231;
    }
    v133 = (unint64_t *)&v132->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
LABEL_231:
    v184 = &off_24C9E9690;
    if (__p)
    {
      v195 = __p;
      operator delete(__p);
    }
    v135 = v193;
    if (!v193)
      goto LABEL_237;
    v136 = (unint64_t *)&v193->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
      v138 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
      if (!*((_QWORD *)&v192 + 1))
        goto LABEL_182;
    }
    else
    {
LABEL_237:
      v138 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
      if (!*((_QWORD *)&v192 + 1))
        goto LABEL_182;
    }
    v139 = (unint64_t *)&v138->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
LABEL_182:
    v108 >>= 1;
    v107 >>= 1;
    ++v106;
    v61 = *v59;
  }
  while (v106 < v61);
  v60 = *v168;
LABEL_245:
  *(_QWORD *)(a2 + 2128) = 0;
  *(_QWORD *)(a2 + 2120) = 0;
  *(_QWORD *)(a2 + 2136) = 0;
  *(_QWORD *)(a2 + 2152) = 0;
  *(_QWORD *)(a2 + 2168) = 0;
  *(_QWORD *)(a2 + 2160) = 0;
  v141 = exp2((double)v61);
  *(long double *)(a2 + 2144) = v141;
  *(long double *)(a2 + 2112) = v141;
  *(_QWORD *)(a2 + 2192) = 0;
  *(_QWORD *)(a2 + 2208) = 0;
  *(_QWORD *)(a2 + 2200) = 0;
  *(_QWORD *)(a2 + 2224) = 0;
  *(_QWORD *)(a2 + 2240) = 0;
  *(_QWORD *)(a2 + 2232) = 0;
  *(_QWORD *)(a2 + 2248) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 2216) = 0x3FE0000000000000;
  *(_OWORD *)(a2 + 2176) = xmmword_210378C40;
  v142 = sub_20EDA7D70(a2 + 2552, v60, 4u, *(_QWORD *)(a2 + 1952));
  *(_QWORD *)&v196 = &off_24C9AFD78;
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  v143 = v204;
  if (v204)
  {
    v144 = (unint64_t *)&v204->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = (std::__shared_weak_count *)*((_QWORD *)&v203 + 1);
  if (*((_QWORD *)&v203 + 1))
  {
    v147 = (unint64_t *)(*((_QWORD *)&v203 + 1) + 8);
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v207 = &off_24C9AFD78;
  if ((_QWORD)v214)
  {
    *((_QWORD *)&v214 + 1) = v214;
    operator delete((void *)v214);
  }
  v149 = (std::__shared_weak_count *)*((_QWORD *)&v213 + 1);
  if (*((_QWORD *)&v213 + 1))
  {
    v150 = (unint64_t *)(*((_QWORD *)&v213 + 1) + 8);
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = (std::__shared_weak_count *)*((_QWORD *)&v212 + 1);
  if (*((_QWORD *)&v212 + 1))
  {
    v153 = (unint64_t *)(*((_QWORD *)&v212 + 1) + 8);
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v216 = &off_24C9AFD78;
  if ((_QWORD)v224)
  {
    *((_QWORD *)&v224 + 1) = v224;
    operator delete((void *)v224);
  }
  v155 = (std::__shared_weak_count *)*((_QWORD *)&v223 + 1);
  if (*((_QWORD *)&v223 + 1))
  {
    v156 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1))
  {
    v159 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v226 = &off_24C9AFD78;
  if ((_QWORD)v234)
  {
    *((_QWORD *)&v234 + 1) = v234;
    operator delete((void *)v234);
  }
  v161 = (std::__shared_weak_count *)*((_QWORD *)&v233 + 1);
  if (*((_QWORD *)&v233 + 1))
  {
    v162 = (unint64_t *)(*((_QWORD *)&v233 + 1) + 8);
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
  if (*((_QWORD *)&v232 + 1))
  {
    v165 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  return v142;
}

void sub_20EDE57A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8E481C(&STACK[0x258]);
  sub_20E8E481C(&STACK[0x2E8]);
  sub_20E8E481C(&STACK[0x378]);
  sub_20E8E481C((_QWORD *)(v1 - 248));
  _Unwind_Resume(a1);
}

uint64_t sub_20EDE5988(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_24C9AFD78;
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  sub_20EDA8E0C((_QWORD *)a1, a2, a3, a4, a5, 0, 0);
  return a1;
}

void sub_20EDE59F0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v3 = (void *)v1[15];
  if (v3)
  {
    v1[16] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)v1[14];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)v1[12];
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20EDE5A7C(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9)
{
  void **v11;
  double *v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  void *v20;
  double *v21;
  __int128 v22;
  double v23[9];
  void *v24;
  __int128 v25;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v24 = 0;
  v25 = 0uLL;
  if (!*(_BYTE *)(a4 + 24))
  {
    v23[0] = 1.0;
    memset(&v23[1], 0, 24);
    v23[4] = 1.0;
    memset(&v23[5], 0, 24);
    v23[8] = 1.0;
    sub_20EDED5D4(&v21, a2, a3, v23, a5, a6, a7, a8, a9);
    if (v24)
      operator delete(v24);
    v12 = v21;
    v24 = v21;
    v25 = v22;
    v13 = v22 - (_QWORD)v21;
    if ((double *)v22 != v21)
    {
LABEL_4:
      v14 = 0;
      v15 = 0;
      v16 = v13 >> 3;
      if (v16 <= 1)
        v16 = 1;
      do
      {
        while (*v12 == -2.0)
        {
          ++v14;
          ++v12;
          if (!--v16)
            goto LABEL_17;
        }
        if (*v12 > a5)
          ++v15;
        ++v12;
        --v16;
      }
      while (v16);
      goto LABEL_17;
    }
LABEL_16:
    v15 = 0;
    v14 = 0;
LABEL_17:
    v11 = &v24;
    goto LABEL_19;
  }
  v11 = (void **)a4;
  if (&v24 != (void **)a4)
  {
    sub_20E86811C(&v24, *(char **)a4, *(char **)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
    v12 = (double *)v24;
    v13 = v25 - (_QWORD)v24;
    if ((_QWORD)v25 != (_QWORD)v24)
      goto LABEL_4;
    goto LABEL_16;
  }
  v15 = 0;
  v14 = 0;
LABEL_19:
  v17 = operator new(4uLL);
  *v17 = v15;
  a1[1] = v17 + 1;
  a1[2] = v17 + 1;
  *a1 = v17;
  v18 = operator new(8uLL);
  v19 = v18 + 2;
  *v18 = *v17;
  v18[1] = v14;
  *a1 = v18;
  a1[2] = v18 + 2;
  operator delete(v17);
  v20 = v24;
  a1[1] = v19;
  if (v20)
  {
    v11[1] = v20;
    operator delete(v20);
  }
}

void sub_20EDE5C0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;

  v4 = *(void **)(v2 - 88);
  if (v4)
  {
    *(_QWORD *)(v2 - 80) = v4;
    operator delete(v4);
    v5 = *(void **)v1;
    if (!*(_QWORD *)v1)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v5 = *(void **)v1;
    if (!*(_QWORD *)v1)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 8) = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

BOOL sub_20EDE5C50(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4, float64x2_t *a5, __n128 _Q0)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  double v15;
  double v17;
  float64x2_t v21;
  double v22;
  double v31;
  double v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  int8x16_t v38;
  unint64_t v39;
  double v40;
  float64x2_t v41;
  double v42;
  float64x2_t v43;
  double v44;
  float64x2_t v45;
  __n128 v46;
  int8x16_t v47;
  __n128 v48;
  float64x2_t v49;
  float64x2_t v50;
  int8x16_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  double v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  double v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  double v80;
  int8x16_t *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  float64x2_t v86;
  double v87;
  uint64_t v88;
  float64x2_t v89;
  uint64_t i;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  int8x8_t *v97;
  uint64_t v98;
  int8x8_t v99;
  int8x8_t v100;
  int8x8_t v101;
  int8x8_t v102;
  int8x8_t v103;
  uint64x2_t v104;
  uint64x2_t v105;
  uint64x2_t v106;
  int8x8_t v107;
  int8x8_t v108;
  float64x2_t v109;
  float64x2_t v110;
  int8x8_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  int8x16_t *v120;
  int8x16_t *v121;
  unint64_t v122;
  int8x16_t v123;
  unint64_t v124;
  int8x8_t v125;
  int8x8_t v126;
  int8x8_t v127;
  int8x8_t v128;
  int8x8_t v129;
  int8x8_t v130;
  int8x8_t v131;
  uint64x2_t v132;
  uint64x2_t v133;
  uint64x2_t v134;
  int8x8_t v135;
  int8x8_t v136;
  uint64x2_t v137;
  uint64x2_t v138;
  int8x8_t v139;
  uint64x2_t v140;
  int8x8_t v141;
  float64x2_t v142;
  int8x8_t v143;
  int8x8_t v144;
  float64x2_t v145;
  int8x8_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  uint64_t v164;
  _BYTE *v165;
  unsigned __int8 *v166;
  unsigned int v167;
  double v168;
  double v169;
  uint64_t v170;
  float64x2_t v171;
  uint64_t j;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t *v178;
  int8x8_t *v179;
  uint64_t v180;
  int8x8_t v181;
  int8x8_t v182;
  int8x8_t v183;
  int8x8_t v184;
  int8x8_t v185;
  uint64x2_t v186;
  uint64x2_t v187;
  uint64x2_t v188;
  int8x8_t v189;
  int8x8_t v190;
  float64x2_t v191;
  float64x2_t v192;
  int8x8_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  int8x16_t *v202;
  int8x16_t *v203;
  unint64_t v204;
  int8x16_t v205;
  unint64_t v206;
  int8x8_t v207;
  int8x8_t v208;
  int8x8_t v209;
  int8x8_t v210;
  int8x8_t v211;
  int8x8_t v212;
  int8x8_t v213;
  uint64x2_t v214;
  uint64x2_t v215;
  uint64x2_t v216;
  int8x8_t v217;
  int8x8_t v218;
  uint64x2_t v219;
  uint64x2_t v220;
  int8x8_t v221;
  uint64x2_t v222;
  int8x8_t v223;
  float64x2_t v224;
  int8x8_t v225;
  int8x8_t v226;
  float64x2_t v227;
  int8x8_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  uint64_t v246;
  _BYTE *v247;
  unsigned __int8 *v248;
  unsigned int v249;
  double v250;
  double v251;
  uint64_t v252;
  float64x2_t v253;
  uint64_t k;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t *v260;
  int8x8_t *v261;
  uint64_t v262;
  int8x8_t v263;
  int8x8_t v264;
  int8x8_t v265;
  int8x8_t v266;
  int8x8_t v267;
  uint64x2_t v268;
  uint64x2_t v269;
  uint64x2_t v270;
  int8x8_t v271;
  int8x8_t v272;
  float64x2_t v273;
  float64x2_t v274;
  int8x8_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  int8x16_t *v284;
  int8x16_t *v285;
  unint64_t v286;
  int8x16_t v287;
  unint64_t v288;
  int8x8_t v289;
  int8x8_t v290;
  int8x8_t v291;
  int8x8_t v292;
  int8x8_t v293;
  int8x8_t v294;
  int8x8_t v295;
  uint64x2_t v296;
  uint64x2_t v297;
  uint64x2_t v298;
  int8x8_t v299;
  int8x8_t v300;
  uint64x2_t v301;
  uint64x2_t v302;
  int8x8_t v303;
  uint64x2_t v304;
  int8x8_t v305;
  float64x2_t v306;
  int8x8_t v307;
  int8x8_t v308;
  float64x2_t v309;
  int8x8_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  uint64_t v328;
  char *v329;
  char *v330;
  unsigned int v331;
  double v332;
  double v333;
  uint64_t v334;
  float64x2_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  unint64_t v340;
  uint64_t *v341;
  int8x8_t *v342;
  uint64_t v343;
  int8x8_t v344;
  int8x8_t v345;
  int8x8_t v346;
  int8x8_t v347;
  int8x8_t v348;
  uint64x2_t v349;
  uint64x2_t v350;
  uint64x2_t v351;
  int8x8_t v352;
  int8x8_t v353;
  float64x2_t v354;
  float64x2_t v355;
  int8x8_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  int8x16_t *v365;
  int8x16_t *v366;
  unint64_t v367;
  int8x16_t v368;
  unint64_t v369;
  int8x8_t v370;
  int8x8_t v371;
  int8x8_t v372;
  int8x8_t v373;
  int8x8_t v374;
  int8x8_t v375;
  int8x8_t v376;
  uint64x2_t v377;
  uint64x2_t v378;
  uint64x2_t v379;
  int8x8_t v380;
  int8x8_t v381;
  uint64x2_t v382;
  uint64x2_t v383;
  int8x8_t v384;
  uint64x2_t v385;
  int8x8_t v386;
  float64x2_t v387;
  int8x8_t v388;
  int8x8_t v389;
  float64x2_t v390;
  int8x8_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  uint64_t v409;
  _BYTE *v410;
  unsigned __int8 *v411;
  unsigned int v412;
  double v413;
  uint64_t v414;
  int v415;
  double v416;
  double v417;
  double v418;
  float64_t v419;
  double v420;
  unint64_t v421;
  uint64_t v422;
  double v423;
  double v424;
  double v425;
  double v426;
  unint64_t v427;
  float64_t v428;
  double v429;
  double v430;
  uint64_t v431;
  double v432;
  double v433;
  unsigned int v434;
  int v435;
  double v436;
  double v437;
  double v438;
  double v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  _BOOL4 v451;
  uint64_t v452;
  int8x16_t v453;
  float64x2_t v454;
  uint64_t v455;
  uint64_t v456;
  unint64_t v457;
  uint64_t v458;
  double v459;
  double v460;
  uint64_t v461;
  unsigned int v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  __int8 *v467;
  float *v468;
  _DWORD *v469;
  unint64_t v470;
  _BYTE *v471;
  float v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t v478;
  unint64_t v479;
  unint64_t v480;
  unint64_t v481;
  unint64_t v482;
  unint64_t v483;
  _DWORD *v484;
  float *v485;
  unsigned __int8 *v486;
  unint64_t v487;
  unsigned int v488;
  double v489;
  float v490;
  unint64_t v491;
  BOOL v493;
  BOOL v494;
  unint64_t v495;
  uint64_t *v496;
  float32x4_t *v497;
  float32x4_t *v498;
  unint64_t v499;
  uint64_t v500;
  int8x8_t v501;
  int8x8_t v502;
  uint64x2_t v503;
  float64x2_t v504;
  int8x8_t v505;
  int8x8_t v506;
  float64x2_t v507;
  int8x8_t v508;
  int8x8_t v509;
  float64x2_t v510;
  int8x8_t v511;
  int8x8_t v512;
  float32x4_t v513;
  float32x4_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float32x4_t v519;
  float32x2_t v520;
  float64x2_t v521;
  float32x4_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  unint64_t v527;
  float32x4_t *v528;
  float32x4_t *v529;
  int8x16_t *v530;
  int8x16_t v531;
  int8x8_t v532;
  __int32 v533;
  __int32 v534;
  int8x8_t v535;
  int8x8_t v536;
  __int32 v537;
  int8x8_t v538;
  int8x8_t v539;
  int8x8_t v540;
  int8x8_t v541;
  uint64x2_t v542;
  uint64x2_t v543;
  int8x8_t v544;
  float32x4_t v545;
  float32x4_t v546;
  float32x4_t v547;
  float64x2_t v548;
  float64x2_t v549;
  int8x8_t v550;
  float64x2_t v551;
  int8x8_t v552;
  int8x8_t v553;
  uint64x2_t v554;
  float64x2_t v555;
  int8x8_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  int8x8_t v560;
  float64x2_t v561;
  float32x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  uint64_t v577;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  unint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  unint64_t v586;
  unint64_t v587;
  BOOL v588;
  uint64_t v589;
  uint64_t *v590;
  float32x4_t *v591;
  uint64_t v592;
  uint64_t v593;
  float32x4_t v594;
  unint64_t v595;
  unint64_t v596;
  float *v597;
  unsigned __int8 *v598;
  unsigned int v599;
  unint64_t v600;
  float32x4_t *v601;
  int8x16_t *v602;
  int8x16_t v603;
  float32x4_t v604;
  float32x4_t v605;
  float32x4_t v606;
  float *v607;
  uint64_t v608;
  float *v609;
  int v610;
  int v611;
  int v612;
  uint64_t v613;
  uint64_t v614;
  _QWORD **v615;
  uint64_t *v616;
  uint64_t *v617;
  uint64_t v618;
  uint64_t v619;
  unint64_t v620;
  unint64_t v621;
  _BYTE **v622;
  _BYTE *v623;
  _BYTE *v624;
  uint64_t v625;
  _BYTE **v626;
  _BYTE *v627;
  _BYTE *v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  _BYTE **v636;
  uint64_t v637;
  _BYTE *v638;
  float v639;
  double v640;
  double v641;
  double v642;
  double v643;
  double v644;
  float32x4_t v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  unint64_t v655;
  uint64_t v656;
  size_t v657;
  const char *v658;
  unsigned __int8 v659;
  unsigned int v660;
  float64x2_t v661;
  double v662;
  double v663;
  float64x2_t v665;
  int8x16_t v666;
  double v667;
  float64x2_t v668;
  double v669;
  float64x2_t v670;
  int8x16_t v671;
  double v672;
  double v673;
  unint64_t v674;
  unint64_t v675;
  float32x2_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  _BYTE **v687;
  _BYTE *v688;
  _BYTE *v689;
  _BYTE *v690;
  _BYTE *v691;
  _BYTE *v692;
  _BYTE *v693;
  std::chrono::steady_clock::time_point v694;
  uint64_t v695;
  unint64_t v696;
  unint64_t v697;
  BOOL v698;
  unint64_t v699;
  unsigned __int8 v700;
  const char *v701;
  size_t v702;
  __int128 *v703;
  uint64_t v704;
  uint64_t v705;
  void *v706;
  NSObject *v707;
  uint64_t v708;
  uint64_t v709;
  size_t v710;
  std::__shared_weak_count_vtbl *v711;
  std::__shared_weak_count *v712;
  std::__shared_weak_count *v713;
  unint64_t *p_shared_owners;
  unint64_t v715;
  unint64_t v716;
  void *v717;
  uint64_t v718;
  char *v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  __int128 v723;
  void *v724;
  std::__shared_weak_count *v725;
  unint64_t *v726;
  unint64_t v727;
  std::__shared_weak_count *v728;
  unint64_t *v729;
  unint64_t v730;
  uint64_t v731;
  std::__shared_weak_count *v732;
  unint64_t *v733;
  unint64_t v734;
  std::__shared_weak_count *v735;
  unint64_t *v736;
  unint64_t v737;
  std::__shared_weak_count *v738;
  unint64_t *v739;
  unint64_t v740;
  std::__shared_weak_count *v741;
  unint64_t *v742;
  unint64_t v743;
  void *v744;
  std::__shared_weak_count *v745;
  unint64_t *v746;
  unint64_t v747;
  unint64_t v748;
  double v749;
  double v750;
  double v751;
  double v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  uint64_t v764;
  double v765;
  double v766;
  double v767;
  double v768;
  double v769;
  double v770;
  double v771;
  double v772;
  double v773;
  double v774;
  double v775;
  double v776;
  double v777;
  double v778;
  double v779;
  double v780;
  double v781;
  double v782;
  double v783;
  double v784;
  double v785;
  double v786;
  double v787;
  double v788;
  float64x2_t v789;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v797;
  float64x2_t v799;
  float64x2_t v801;
  float64x2_t v802;
  double v804;
  float64x2_t v805;
  _BOOL8 v806;
  uint64_t v808;
  unint64_t *v809;
  unint64_t v810;
  std::__shared_weak_count *v811;
  unint64_t *v812;
  unint64_t v813;
  double v814;
  double v815;
  double v816;
  double v817;
  float v818;
  double v819;
  double v820;
  double v821;
  double v822;
  _QWORD *v823;
  const void *v824;
  int64_t v825;
  uint64_t v826;
  void *v828;
  std::__shared_weak_count *v829;
  unint64_t *v830;
  unint64_t v831;
  std::__shared_weak_count *v832;
  unint64_t *v833;
  unint64_t v834;
  std::__shared_weak_count *v835;
  unint64_t *v836;
  unint64_t v837;
  std::__shared_weak_count *v838;
  unint64_t *v839;
  unint64_t v840;
  uint64_t v841;
  uint64_t v843;
  unint64_t v844;
  unint64_t v845;
  uint64_t v847;
  _OWORD *v848;
  __int128 *v849;
  uint64_t v850;
  uint64_t v852;
  uint64_t v853;
  unint64_t v854;
  uint64_t v855;
  int v856;
  uint64_t v857;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v859;
  uint64_t v860;
  unint64_t v861;
  uint64_t v862;
  char *__src;
  const char *__srca;
  double v865;
  int v866;
  uint64_t v867;
  double v868;
  uint64_t v869;
  unint64_t v870;
  double v871;
  unint64_t v872;
  double v873;
  uint64_t v874;
  double v875;
  double v876;
  double v877;
  double v878;
  __n128 v879;
  float64x2_t v880;
  __n128 v881;
  int8x16_t v882;
  __n128 v883;
  unint64_t v884;
  double v885;
  float64_t v886;
  unint64_t v887;
  unsigned int v888;
  uint64_t v889;
  __int128 v890;
  uint64_t v891;
  char v892;
  __int128 v893;
  uint64_t v894;
  void *v895[3];
  float64x2_t v896;
  double v897;
  double v898;
  double v899;
  double v900;
  double v901;
  double v902;
  double v903;
  double v904;
  float64x2_t v905;
  double v906;
  float64x2_t v907;
  double v908;
  float64x2_t v909;
  void *v910;
  int v911[2];
  char v912;
  double v913;
  void *object;
  __int128 v915;
  __int128 v916;
  void *__p[2];
  unint64_t v918;
  char v919;
  std::__shared_weak_count *v920;
  std::__shared_weak_count *v921;
  void *v922;
  void *v923;
  void *v924[2];
  __int128 v925;
  __int128 v926;
  __int128 v927;
  __int128 v928;
  __int128 v929;
  __int128 v930;
  _BYTE v931[32];
  void *v932[2];
  __int128 v933;
  __int128 v934;
  __int128 v935;
  __int128 v936;
  __int128 v937;
  __int128 v938;
  __int128 v939;
  __int128 v940;
  uint64_t v941;

  v941 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD **)(a2 + 8);
  v6 = (_QWORD *)(a2 + 8);
  v7 = v8;
  if (!v8)
    return 0;
  v9 = v6;
  do
  {
    v10 = v7[4];
    _CF = v10 >= a3;
    if (v10 >= a3)
      v12 = v7;
    else
      v12 = v7 + 1;
    if (_CF)
      v9 = v7;
    v7 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 == v6 || v9[4] > a3)
    return 0;
  v13 = v9[5];
  *(_BYTE *)(v13 + 3424) = 0;
  _Q0.n128_u64[0] = *(_QWORD *)&a5[1].f64[0];
  _Q1 = *a5;
  v15 = a5[2].f64[1];
  _Q3 = *(float64x2_t *)((char *)a5 + 24);
  v17 = a5[4].f64[0];
  _Q5 = a5[3];
  _Q7 = *(float64x2_t *)(v13 + 3184);
  _D16 = *(_QWORD *)(v13 + 3224);
  v21 = *(float64x2_t *)(v13 + 3208);
  v22 = *(double *)(v13 + 3248);
  _Q19 = *(float64x2_t *)(v13 + 3232);
  _Q20 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q7, a5->f64[0]), v21, *a5, 1), _Q19, _Q0.n128_f64[0]);
  __asm { FMLA            D21, D16, V1.D[1] }
  _Q0.n128_f64[0] = _D21 + v22 * _Q0.n128_f64[0];
  _Q1 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q7, _Q3.f64[0]), v21, _Q3, 1), _Q19, v15);
  __asm { FMLA            D21, D16, V3.D[1] }
  v31 = _D21 + v22 * v15;
  _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q7, _Q5.f64[0]), v21, _Q5, 1), _Q19, v17);
  __asm { FMLA            D6, D16, V5.D[1] }
  v34 = _D6 + v22 * v17;
  *(float64x2_t *)(v13 + 3328) = _Q20;
  *(_QWORD *)(v13 + 3344) = _Q0.n128_u64[0];
  v841 = v13 + 3184;
  *(float64x2_t *)(v13 + 3352) = _Q1;
  *(double *)(v13 + 3368) = v31;
  *(float64x2_t *)(v13 + 3376) = _Q3;
  *(double *)(v13 + 3392) = v34;
  v35 = *(float64x2_t *)(v13 + 2112);
  _Q7.f64[0] = *(float64_t *)(v13 + 2152);
  v843 = v13 + 2112;
  v36 = *(float64x2_t *)(v13 + 2136);
  v21.f64[0] = *(float64_t *)(v13 + 2176);
  v37 = *(float64x2_t *)(v13 + 2160);
  v38 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v35, _Q20.f64[0]), v36, _Q20, 1), v37, _Q0.n128_f64[0]);
  __asm { FMLA            D19, D7, V20.D[1] }
  _Q0.n128_f64[0] = _Q19.f64[0] + v21.f64[0] * _Q0.n128_f64[0];
  v883 = _Q0;
  __asm { FMLA            D0, D7, V1.D[1] }
  _Q0.n128_f64[0] = _Q0.n128_f64[0] + v21.f64[0] * v31;
  v880 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v35, _Q1.f64[0]), v36, _Q1, 1), v37, v31);
  v881 = _Q0;
  __asm { FMLA            D0, D7, V3.D[1] }
  _Q0.n128_f64[0] = _Q0.n128_f64[0] + v21.f64[0] * v34;
  v878 = *(double *)v38.i64;
  v879 = _Q0;
  v877 = v880.f64[1];
  v882 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v35, _Q3.f64[0]), v36, _Q3, 1), v37, v34);
  *(_QWORD *)&v875 = vextq_s8(v38, v38, 8uLL).u64[0];
  *(_QWORD *)&v876 = vextq_s8(v882, v882, 8uLL).u64[0];
  v845 = *(unsigned int *)(v13 + 2548);
  v847 = v13;
  if ((int)v845 >= 1)
  {
    v852 = v13 + 2928;
    v849 = (__int128 *)(v13 + 2256);
    v850 = a1 + 128;
    v848 = (_OWORD *)(v13 + 2512);
    while (1)
    {
      v39 = v845--;
      v40 = *(double *)(v843 + 88);
      v41 = *(float64x2_t *)(v843 + 72);
      v42 = *(double *)(v843 + 112);
      v43 = *(float64x2_t *)(v843 + 96);
      v44 = *(double *)(v843 + 136);
      v45 = *(float64x2_t *)(v843 + 120);
      v46.n128_u64[1] = v883.n128_u64[1];
      v47 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v41, v878), v43, v875), v45, v883.n128_f64[0]);
      v46.n128_f64[0] = v40 * v878 + v42 * v875 + v44 * v883.n128_f64[0];
      v883 = v46;
      v48.n128_u64[1] = v881.n128_u64[1];
      v49 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v41, v880.f64[0]), v43, v877), v45, v881.n128_f64[0]);
      v48.n128_f64[0] = v40 * v880.f64[0] + v42 * v877 + v44 * v881.n128_f64[0];
      v50 = vmlaq_n_f64(vmulq_n_f64(v41, *(double *)v882.i64), v43, v876);
      *(_QWORD *)&v43.f64[1] = v879.n128_u64[1];
      v51 = (int8x16_t)vmlaq_n_f64(v50, v45, v879.n128_f64[0]);
      v43.f64[0] = v40 * *(double *)v882.i64 + v42 * v876 + v44 * v879.n128_f64[0];
      v877 = v49.f64[1];
      v880.f64[0] = v49.f64[0];
      v881 = v48;
      v878 = *(double *)v47.i64;
      v879 = (__n128)v43;
      *(_QWORD *)&v875 = vextq_s8(v47, v47, 8uLL).u64[0];
      *(_QWORD *)&v876 = vextq_s8(v51, v51, 8uLL).u64[0];
      v882.i64[0] = v51.i64[0];
      v844 = v39;
      if (!*(_QWORD *)(v13 + 1696)
        || (v52 = *(_QWORD *)(v13 + 3416) + *(_QWORD *)(v13 + 3408),
            (unint64_t)(v52 + std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)(v13 + 1696)) <= *(_QWORD *)(a1 + 88)))
      {
        kdebug_trace();
        v54 = *(_QWORD *)(v13 + 1928);
        v55 = *(_QWORD *)(v13 + 1904);
        v56 = 144 * v845;
        v57 = (unint64_t *)(v55 + v56 + 32);
        if (*(_QWORD *)(v54 + v56 + 32) != *v57
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/SingleImageTracker.cpp", 1470, (uint64_t)"dest_image.width() == src_image.width()", 39, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_456:
          abort();
        }
        v58 = v54 + 144 * v845;
        v59 = *(_QWORD *)(v58 + 48);
        v60 = v55 + 144 * v845;
        if (v59 != *(_QWORD *)(v60 + 48))
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/SingleImageTracker.cpp", 1471, (uint64_t)"dest_image.height() == src_image.height()", 41, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_456;
          }
          v59 = *(_QWORD *)(v60 + 48);
        }
        v61 = 0;
        v62 = (double)*v57 * 0.25;
        v63 = (_QWORD *)(v60 + 120);
        v64 = (v62 * 0.0);
        v65 = v62;
        v66 = (v62 + v62);
        v67 = (v62 * 3.0);
        v68 = (_QWORD *)(v58 + 120);
        LODWORD(v53) = vcvtd_n_u64_f64(v62, 2uLL);
        v69 = v53 - v67;
        v70 = v67 - v66;
        v71 = v66 - v65;
        v72 = v65 - v64;
        v73 = (double)v59;
        v887 = (v65 - v64) & 0xFFFFFFFFFFFFFFF0;
        v74 = (v65 - v64) & 0xFFFFFFFFFFFFFFF8;
        v884 = (v66 - v65) & 0xFFFFFFFFFFFFFFF0;
        v75 = (v66 - v65) & 0xFFFFFFFFFFFFFFF8;
        v867 = v75 + v65;
        v76 = (v67 - v66) & 0xFFFFFFFFFFFFFFF0;
        v77 = (v67 - v66) & 0xFFFFFFFFFFFFFFF8;
        __src = (char *)(v77 + v66);
        v78 = (v53 - v67) & 0xFFFFFFFFFFFFFFF0;
        v79 = (v53 - v67) & 0xFFFFFFFFFFFFFFF8;
        v80 = v73 * 0.25;
        v860 = v79 + v67;
        v857 = -(uint64_t)v75;
        v855 = -(uint64_t)v77;
        v853 = -(uint64_t)v79;
        v81 = (int8x16_t *)&xmmword_2102DB000;
        do
        {
          v82 = (v80 * (double)v61);
          v83 = v61 + 1;
          v84 = (v80 * (double)(v61 + 1));
          if (v82 < v84)
          {
            v85 = v61 << 6;
            v86 = (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL);
            if (v64 < v65)
            {
              v87 = *(double *)(v852 + (v61 << 6));
              v88 = *(uint64_t *)(v852 + (v85 | 8));
              v89 = (float64x2_t)vdupq_lane_s64(v88, 0);
              for (i = (v80 * (double)v61); i != v84; ++i)
              {
                v91 = *(_QWORD *)(*v63 + 8 * i);
                v92 = *(_QWORD *)(*v68 + 8 * i);
                v93 = v64;
                if (v72 < 8 || (v93 = v64, (unint64_t)(v92 - v91) < 0x10))
                {
LABEL_41:
                  v164 = v65 - v93;
                  v165 = (_BYTE *)(v92 + v93);
                  v166 = (unsigned __int8 *)(v91 + v93);
                  do
                  {
                    v167 = *v166++;
                    v168 = *(double *)&v88 + v87 * (double)v167;
                    if (v168 < 0.0)
                      v168 = 0.0;
                    if (v168 > 255.0)
                      v168 = 255.0;
                    *v165++ = llround(v168);
                    --v164;
                  }
                  while (v164);
                  continue;
                }
                if (v72 >= 0x10)
                {
                  v120 = (int8x16_t *)(v91 + v64);
                  v121 = (int8x16_t *)(v92 + v64);
                  v122 = (v65 - v64) & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    v123 = *v120++;
                    v124 = vextq_s8(v123, v123, 8uLL).u64[0];
                    v125.i32[0] = BYTE6(v124);
                    v125.i32[1] = HIBYTE(v124);
                    v126.i32[0] = BYTE4(v124);
                    v126.i32[1] = BYTE5(v124);
                    v127.i32[0] = BYTE2(v124);
                    v128 = vand_s8(v125, (int8x8_t)0xFF000000FFLL);
                    v129 = vand_s8(v126, (int8x8_t)0xFF000000FFLL);
                    v127.i32[1] = BYTE3(v124);
                    v130 = vand_s8(v127, (int8x8_t)0xFF000000FFLL);
                    v131.i32[0] = v124;
                    v131.i32[1] = BYTE1(v124);
                    v132.i64[0] = v128.u32[0];
                    v132.i64[1] = v128.u32[1];
                    v133 = v132;
                    v128.i32[0] = v123.u8[6];
                    v132.i64[0] = v129.u32[0];
                    v132.i64[1] = v129.u32[1];
                    v134 = v132;
                    v135 = vand_s8(v131, (int8x8_t)0xFF000000FFLL);
                    v128.i32[1] = v123.u8[7];
                    v136 = vand_s8(v128, (int8x8_t)0xFF000000FFLL);
                    v132.i64[0] = v136.u32[0];
                    v132.i64[1] = v136.u32[1];
                    v137 = v132;
                    v132.i64[0] = v130.u32[0];
                    v132.i64[1] = v130.u32[1];
                    v138 = v132;
                    v139.i32[0] = v123.u8[4];
                    v132.i64[0] = v135.u32[0];
                    v132.i64[1] = v135.u32[1];
                    v140 = v132;
                    v139.i32[1] = v123.u8[5];
                    v141 = vand_s8(v139, (int8x8_t)0xFF000000FFLL);
                    v132.i64[0] = v141.u32[0];
                    v132.i64[1] = v141.u32[1];
                    v142 = vcvtq_f64_u64(v132);
                    v143.i32[0] = v123.u8[2];
                    v143.i32[1] = v123.u8[3];
                    v144 = vand_s8(v143, (int8x8_t)0xFF000000FFLL);
                    v132.i64[0] = v144.u32[0];
                    v132.i64[1] = v144.u32[1];
                    v145 = vcvtq_f64_u64(v132);
                    v146.i32[0] = v123.u8[0];
                    v147 = vcvtq_f64_u64(v138);
                    v146.i32[1] = v123.u8[1];
                    *(int8x8_t *)v138.i8 = vand_s8(v146, (int8x8_t)0xFF000000FFLL);
                    v132.i64[0] = v138.u32[0];
                    v132.i64[1] = v138.u32[1];
                    v148 = vaddq_f64(v89, vmulq_n_f64(vcvtq_f64_u64(v133), v87));
                    v149 = vaddq_f64(v89, vmulq_n_f64(vcvtq_f64_u64(v134), v87));
                    v150 = vaddq_f64(v89, vmulq_n_f64(v147, v87));
                    v151 = vaddq_f64(v89, vmulq_n_f64(vcvtq_f64_u64(v140), v87));
                    v152 = vaddq_f64(v89, vmulq_n_f64(vcvtq_f64_u64(v137), v87));
                    v153 = vaddq_f64(v89, vmulq_n_f64(v142, v87));
                    v154 = vaddq_f64(v89, vmulq_n_f64(v145, v87));
                    v155 = vaddq_f64(v89, vmulq_n_f64(vcvtq_f64_u64(v132), v87));
                    v156 = (float64x2_t)vbicq_s8((int8x16_t)v148, (int8x16_t)vcltzq_f64(v148));
                    v157 = (float64x2_t)vbicq_s8((int8x16_t)v149, (int8x16_t)vcltzq_f64(v149));
                    v158 = (float64x2_t)vbicq_s8((int8x16_t)v150, (int8x16_t)vcltzq_f64(v150));
                    v159 = (float64x2_t)vbicq_s8((int8x16_t)v152, (int8x16_t)vcltzq_f64(v152));
                    v160 = (float64x2_t)vbicq_s8((int8x16_t)v153, (int8x16_t)vcltzq_f64(v153));
                    v161 = (float64x2_t)vbicq_s8((int8x16_t)v151, (int8x16_t)vcltzq_f64(v151));
                    v162 = (float64x2_t)vbicq_s8((int8x16_t)v154, (int8x16_t)vcltzq_f64(v154));
                    v163 = (float64x2_t)vbicq_s8((int8x16_t)v155, (int8x16_t)vcltzq_f64(v155));
                    *(int16x4_t *)&v156.f64[0] = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v157, v86), (int8x16_t)v86, (int8x16_t)v157)))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v156, v86), (int8x16_t)v86, (int8x16_t)v156)))));
                    *(int16x4_t *)&v158.f64[0] = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v161, v86), (int8x16_t)v86, (int8x16_t)v161)))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v158, v86), (int8x16_t)v86, (int8x16_t)v158)))));
                    *(int16x4_t *)&v157.f64[0] = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v163, v86), (int8x16_t)v86, (int8x16_t)v163)))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v162, v86), (int8x16_t)v86, (int8x16_t)v162)))));
                    v158.f64[1] = v156.f64[0];
                    *(int16x4_t *)&v157.f64[1] = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v160, v86), (int8x16_t)v86, (int8x16_t)v160)))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v159, v86), (int8x16_t)v86, (int8x16_t)v159)))));
                    *v121++ = vuzp1q_s8((int8x16_t)v157, (int8x16_t)v158);
                    v122 -= 16;
                  }
                  while (v122);
                  if (v72 == v887)
                    continue;
                  v94 = (v65 - v64) & 0xFFFFFFFFFFFFFFF0;
                  v93 = v887 + v64;
                  if ((v72 & 8) == 0)
                    goto LABEL_41;
                }
                else
                {
                  v94 = 0;
                }
                v95 = v94 - v74;
                v96 = (uint64_t *)(v91 + v64 + v94);
                v97 = (int8x8_t *)(v92 + v64 + v94);
                do
                {
                  v98 = *v96++;
                  v99.i32[0] = BYTE6(v98);
                  v99.i32[1] = HIBYTE(v98);
                  v100 = vand_s8(v99, (int8x8_t)0xFF000000FFLL);
                  v101.i32[0] = BYTE4(v98);
                  v101.i32[1] = BYTE5(v98);
                  v102 = vand_s8(v101, (int8x8_t)0xFF000000FFLL);
                  v103.i32[0] = BYTE2(v98);
                  v104.i64[0] = v100.u32[0];
                  v104.i64[1] = v100.u32[1];
                  v105 = v104;
                  v104.i64[0] = v102.u32[0];
                  v104.i64[1] = v102.u32[1];
                  v106 = v104;
                  v103.i32[1] = BYTE3(v98);
                  v107 = vand_s8(v103, (int8x8_t)0xFF000000FFLL);
                  v104.i64[0] = v107.u32[0];
                  v104.i64[1] = v107.u32[1];
                  v108.i32[0] = v98;
                  v109 = vcvtq_f64_u64(v106);
                  v110 = vcvtq_f64_u64(v104);
                  v108.i32[1] = BYTE1(v98);
                  v111 = vand_s8(v108, (int8x8_t)0xFF000000FFLL);
                  v104.i64[0] = v111.u32[0];
                  v104.i64[1] = v111.u32[1];
                  v112 = vaddq_f64(v89, vmulq_n_f64(vcvtq_f64_u64(v105), v87));
                  v113 = vaddq_f64(v89, vmulq_n_f64(v109, v87));
                  v114 = vaddq_f64(v89, vmulq_n_f64(v110, v87));
                  v115 = vaddq_f64(v89, vmulq_n_f64(vcvtq_f64_u64(v104), v87));
                  v116 = (float64x2_t)vbicq_s8((int8x16_t)v112, (int8x16_t)vcltzq_f64(v112));
                  v117 = (float64x2_t)vbicq_s8((int8x16_t)v113, (int8x16_t)vcltzq_f64(v113));
                  v118 = (float64x2_t)vbicq_s8((int8x16_t)v114, (int8x16_t)vcltzq_f64(v114));
                  v119 = (float64x2_t)vbicq_s8((int8x16_t)v115, (int8x16_t)vcltzq_f64(v115));
                  *v97++ = vuzp1_s8((int8x8_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v119, v86), (int8x16_t)v86, (int8x16_t)v119)))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v118, v86), (int8x16_t)v86, (int8x16_t)v118))))), (int8x8_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v117, v86), (int8x16_t)v86, (int8x16_t)v117)))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v116, v86), (int8x16_t)v86, (int8x16_t)v116))))));
                  v95 += 8;
                }
                while (v95);
                v93 = v74 + v64;
                if (v72 != ((v65 - v64) & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_41;
              }
            }
            if (v65 < v66)
            {
              v169 = *(double *)(v852 + (v85 | 0x10));
              v170 = *(uint64_t *)(v852 + (v85 | 0x18));
              v171 = (float64x2_t)vdupq_lane_s64(v170, 0);
              for (j = v82; j != v84; ++j)
              {
                v173 = *(_QWORD *)(*v63 + 8 * j);
                v174 = *(_QWORD *)(*v68 + 8 * j);
                v175 = v65;
                if (v71 < 8 || (v175 = v65, (unint64_t)(v174 - v173) < 0x10))
                {
LABEL_63:
                  v246 = v66 - v175;
                  v247 = (_BYTE *)(v174 + v175);
                  v248 = (unsigned __int8 *)(v173 + v175);
                  do
                  {
                    v249 = *v248++;
                    v250 = *(double *)&v170 + v169 * (double)v249;
                    if (v250 < 0.0)
                      v250 = 0.0;
                    if (v250 > 255.0)
                      v250 = 255.0;
                    *v247++ = llround(v250);
                    --v246;
                  }
                  while (v246);
                  continue;
                }
                if (v71 >= 0x10)
                {
                  v202 = (int8x16_t *)(v173 + v65);
                  v203 = (int8x16_t *)(v174 + v65);
                  v204 = (v66 - v65) & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    v205 = *v202++;
                    v206 = vextq_s8(v205, v205, 8uLL).u64[0];
                    v207.i32[0] = BYTE6(v206);
                    v207.i32[1] = HIBYTE(v206);
                    v208.i32[0] = BYTE4(v206);
                    v208.i32[1] = BYTE5(v206);
                    v209.i32[0] = BYTE2(v206);
                    v210 = vand_s8(v207, (int8x8_t)0xFF000000FFLL);
                    v211 = vand_s8(v208, (int8x8_t)0xFF000000FFLL);
                    v209.i32[1] = BYTE3(v206);
                    v212 = vand_s8(v209, (int8x8_t)0xFF000000FFLL);
                    v213.i32[0] = v206;
                    v213.i32[1] = BYTE1(v206);
                    v214.i64[0] = v210.u32[0];
                    v214.i64[1] = v210.u32[1];
                    v215 = v214;
                    v210.i32[0] = v205.u8[6];
                    v214.i64[0] = v211.u32[0];
                    v214.i64[1] = v211.u32[1];
                    v216 = v214;
                    v217 = vand_s8(v213, (int8x8_t)0xFF000000FFLL);
                    v210.i32[1] = v205.u8[7];
                    v218 = vand_s8(v210, (int8x8_t)0xFF000000FFLL);
                    v214.i64[0] = v218.u32[0];
                    v214.i64[1] = v218.u32[1];
                    v219 = v214;
                    v214.i64[0] = v212.u32[0];
                    v214.i64[1] = v212.u32[1];
                    v220 = v214;
                    v221.i32[0] = v205.u8[4];
                    v214.i64[0] = v217.u32[0];
                    v214.i64[1] = v217.u32[1];
                    v222 = v214;
                    v221.i32[1] = v205.u8[5];
                    v223 = vand_s8(v221, (int8x8_t)0xFF000000FFLL);
                    v214.i64[0] = v223.u32[0];
                    v214.i64[1] = v223.u32[1];
                    v224 = vcvtq_f64_u64(v214);
                    v225.i32[0] = v205.u8[2];
                    v225.i32[1] = v205.u8[3];
                    v226 = vand_s8(v225, (int8x8_t)0xFF000000FFLL);
                    v214.i64[0] = v226.u32[0];
                    v214.i64[1] = v226.u32[1];
                    v227 = vcvtq_f64_u64(v214);
                    v228.i32[0] = v205.u8[0];
                    v229 = vcvtq_f64_u64(v220);
                    v228.i32[1] = v205.u8[1];
                    *(int8x8_t *)v220.i8 = vand_s8(v228, (int8x8_t)0xFF000000FFLL);
                    v214.i64[0] = v220.u32[0];
                    v214.i64[1] = v220.u32[1];
                    v230 = vaddq_f64(v171, vmulq_n_f64(vcvtq_f64_u64(v215), v169));
                    v231 = vaddq_f64(v171, vmulq_n_f64(vcvtq_f64_u64(v216), v169));
                    v232 = vaddq_f64(v171, vmulq_n_f64(v229, v169));
                    v233 = vaddq_f64(v171, vmulq_n_f64(vcvtq_f64_u64(v222), v169));
                    v234 = vaddq_f64(v171, vmulq_n_f64(vcvtq_f64_u64(v219), v169));
                    v235 = vaddq_f64(v171, vmulq_n_f64(v224, v169));
                    v236 = vaddq_f64(v171, vmulq_n_f64(v227, v169));
                    v237 = vaddq_f64(v171, vmulq_n_f64(vcvtq_f64_u64(v214), v169));
                    v238 = (float64x2_t)vbicq_s8((int8x16_t)v230, (int8x16_t)vcltzq_f64(v230));
                    v239 = (float64x2_t)vbicq_s8((int8x16_t)v231, (int8x16_t)vcltzq_f64(v231));
                    v240 = (float64x2_t)vbicq_s8((int8x16_t)v232, (int8x16_t)vcltzq_f64(v232));
                    v241 = (float64x2_t)vbicq_s8((int8x16_t)v234, (int8x16_t)vcltzq_f64(v234));
                    v242 = (float64x2_t)vbicq_s8((int8x16_t)v235, (int8x16_t)vcltzq_f64(v235));
                    v243 = (float64x2_t)vbicq_s8((int8x16_t)v233, (int8x16_t)vcltzq_f64(v233));
                    v244 = (float64x2_t)vbicq_s8((int8x16_t)v236, (int8x16_t)vcltzq_f64(v236));
                    v245 = (float64x2_t)vbicq_s8((int8x16_t)v237, (int8x16_t)vcltzq_f64(v237));
                    *(int16x4_t *)&v238.f64[0] = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v239, v86), (int8x16_t)v86, (int8x16_t)v239)))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v238, v86), (int8x16_t)v86, (int8x16_t)v238)))));
                    *(int16x4_t *)&v240.f64[0] = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v243, v86), (int8x16_t)v86, (int8x16_t)v243)))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v240, v86), (int8x16_t)v86, (int8x16_t)v240)))));
                    *(int16x4_t *)&v239.f64[0] = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v245, v86), (int8x16_t)v86, (int8x16_t)v245)))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v244, v86), (int8x16_t)v86, (int8x16_t)v244)))));
                    v240.f64[1] = v238.f64[0];
                    *(int16x4_t *)&v239.f64[1] = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v242, v86), (int8x16_t)v86, (int8x16_t)v242)))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v241, v86), (int8x16_t)v86, (int8x16_t)v241)))));
                    *v203++ = vuzp1q_s8((int8x16_t)v239, (int8x16_t)v240);
                    v204 -= 16;
                  }
                  while (v204);
                  if (v71 == v884)
                    continue;
                  v176 = (v66 - v65) & 0xFFFFFFFFFFFFFFF0;
                  v175 = v884 + v65;
                  if ((v71 & 8) == 0)
                    goto LABEL_63;
                }
                else
                {
                  v176 = 0;
                }
                v177 = v857 + v176;
                v178 = (uint64_t *)(v173 + v65 + v176);
                v179 = (int8x8_t *)(v174 + v65 + v176);
                do
                {
                  v180 = *v178++;
                  v181.i32[0] = BYTE6(v180);
                  v181.i32[1] = HIBYTE(v180);
                  v182 = vand_s8(v181, (int8x8_t)0xFF000000FFLL);
                  v183.i32[0] = BYTE4(v180);
                  v183.i32[1] = BYTE5(v180);
                  v184 = vand_s8(v183, (int8x8_t)0xFF000000FFLL);
                  v185.i32[0] = BYTE2(v180);
                  v186.i64[0] = v182.u32[0];
                  v186.i64[1] = v182.u32[1];
                  v187 = v186;
                  v186.i64[0] = v184.u32[0];
                  v186.i64[1] = v184.u32[1];
                  v188 = v186;
                  v185.i32[1] = BYTE3(v180);
                  v189 = vand_s8(v185, (int8x8_t)0xFF000000FFLL);
                  v186.i64[0] = v189.u32[0];
                  v186.i64[1] = v189.u32[1];
                  v190.i32[0] = v180;
                  v191 = vcvtq_f64_u64(v188);
                  v192 = vcvtq_f64_u64(v186);
                  v190.i32[1] = BYTE1(v180);
                  v193 = vand_s8(v190, (int8x8_t)0xFF000000FFLL);
                  v186.i64[0] = v193.u32[0];
                  v186.i64[1] = v193.u32[1];
                  v194 = vaddq_f64(v171, vmulq_n_f64(vcvtq_f64_u64(v187), v169));
                  v195 = vaddq_f64(v171, vmulq_n_f64(v191, v169));
                  v196 = vaddq_f64(v171, vmulq_n_f64(v192, v169));
                  v197 = vaddq_f64(v171, vmulq_n_f64(vcvtq_f64_u64(v186), v169));
                  v198 = (float64x2_t)vbicq_s8((int8x16_t)v194, (int8x16_t)vcltzq_f64(v194));
                  v199 = (float64x2_t)vbicq_s8((int8x16_t)v195, (int8x16_t)vcltzq_f64(v195));
                  v200 = (float64x2_t)vbicq_s8((int8x16_t)v196, (int8x16_t)vcltzq_f64(v196));
                  v201 = (float64x2_t)vbicq_s8((int8x16_t)v197, (int8x16_t)vcltzq_f64(v197));
                  *v179++ = vuzp1_s8((int8x8_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v201, v86), (int8x16_t)v86, (int8x16_t)v201)))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v200, v86), (int8x16_t)v86, (int8x16_t)v200))))), (int8x8_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v199, v86), (int8x16_t)v86, (int8x16_t)v199)))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v198, v86), (int8x16_t)v86, (int8x16_t)v198))))));
                  v177 += 8;
                }
                while (v177);
                v175 = v867;
                if (v71 != ((v66 - v65) & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_63;
              }
            }
            if (v66 < v67)
            {
              v251 = *(double *)(v852 + (v85 | 0x20));
              v252 = *(uint64_t *)(v852 + (v85 | 0x28));
              v253 = (float64x2_t)vdupq_lane_s64(v252, 0);
              for (k = v82; k != v84; ++k)
              {
                v255 = *(_QWORD *)(*v63 + 8 * k);
                v256 = *(_QWORD *)(*v68 + 8 * k);
                v257 = (char *)v66;
                if (v70 < 8 || (v257 = (char *)v66, (unint64_t)(v256 - v255) < 0x10))
                {
LABEL_85:
                  v328 = v67 - (_QWORD)v257;
                  v329 = &v257[v256];
                  v330 = &v257[v255];
                  do
                  {
                    v331 = *v330++;
                    v332 = *(double *)&v252 + v251 * (double)v331;
                    if (v332 < 0.0)
                      v332 = 0.0;
                    if (v332 > 255.0)
                      v332 = 255.0;
                    *v329++ = llround(v332);
                    --v328;
                  }
                  while (v328);
                  continue;
                }
                if (v70 >= 0x10)
                {
                  v284 = (int8x16_t *)(v255 + v66);
                  v285 = (int8x16_t *)(v256 + v66);
                  v286 = (v67 - v66) & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    v287 = *v284++;
                    v288 = vextq_s8(v287, v287, 8uLL).u64[0];
                    v289.i32[0] = BYTE6(v288);
                    v289.i32[1] = HIBYTE(v288);
                    v290.i32[0] = BYTE4(v288);
                    v290.i32[1] = BYTE5(v288);
                    v291.i32[0] = BYTE2(v288);
                    v292 = vand_s8(v289, (int8x8_t)0xFF000000FFLL);
                    v293 = vand_s8(v290, (int8x8_t)0xFF000000FFLL);
                    v291.i32[1] = BYTE3(v288);
                    v294 = vand_s8(v291, (int8x8_t)0xFF000000FFLL);
                    v295.i32[0] = v288;
                    v295.i32[1] = BYTE1(v288);
                    v296.i64[0] = v292.u32[0];
                    v296.i64[1] = v292.u32[1];
                    v297 = v296;
                    v292.i32[0] = v287.u8[6];
                    v296.i64[0] = v293.u32[0];
                    v296.i64[1] = v293.u32[1];
                    v298 = v296;
                    v299 = vand_s8(v295, (int8x8_t)0xFF000000FFLL);
                    v292.i32[1] = v287.u8[7];
                    v300 = vand_s8(v292, (int8x8_t)0xFF000000FFLL);
                    v296.i64[0] = v300.u32[0];
                    v296.i64[1] = v300.u32[1];
                    v301 = v296;
                    v296.i64[0] = v294.u32[0];
                    v296.i64[1] = v294.u32[1];
                    v302 = v296;
                    v303.i32[0] = v287.u8[4];
                    v296.i64[0] = v299.u32[0];
                    v296.i64[1] = v299.u32[1];
                    v304 = v296;
                    v303.i32[1] = v287.u8[5];
                    v305 = vand_s8(v303, (int8x8_t)0xFF000000FFLL);
                    v296.i64[0] = v305.u32[0];
                    v296.i64[1] = v305.u32[1];
                    v306 = vcvtq_f64_u64(v296);
                    v307.i32[0] = v287.u8[2];
                    v307.i32[1] = v287.u8[3];
                    v308 = vand_s8(v307, (int8x8_t)0xFF000000FFLL);
                    v296.i64[0] = v308.u32[0];
                    v296.i64[1] = v308.u32[1];
                    v309 = vcvtq_f64_u64(v296);
                    v310.i32[0] = v287.u8[0];
                    v311 = vcvtq_f64_u64(v302);
                    v310.i32[1] = v287.u8[1];
                    *(int8x8_t *)v302.i8 = vand_s8(v310, (int8x8_t)0xFF000000FFLL);
                    v296.i64[0] = v302.u32[0];
                    v296.i64[1] = v302.u32[1];
                    v312 = vaddq_f64(v253, vmulq_n_f64(vcvtq_f64_u64(v297), v251));
                    v313 = vaddq_f64(v253, vmulq_n_f64(vcvtq_f64_u64(v298), v251));
                    v314 = vaddq_f64(v253, vmulq_n_f64(v311, v251));
                    v315 = vaddq_f64(v253, vmulq_n_f64(vcvtq_f64_u64(v304), v251));
                    v316 = vaddq_f64(v253, vmulq_n_f64(vcvtq_f64_u64(v301), v251));
                    v317 = vaddq_f64(v253, vmulq_n_f64(v306, v251));
                    v318 = vaddq_f64(v253, vmulq_n_f64(v309, v251));
                    v319 = vaddq_f64(v253, vmulq_n_f64(vcvtq_f64_u64(v296), v251));
                    v320 = (float64x2_t)vbicq_s8((int8x16_t)v312, (int8x16_t)vcltzq_f64(v312));
                    v321 = (float64x2_t)vbicq_s8((int8x16_t)v313, (int8x16_t)vcltzq_f64(v313));
                    v322 = (float64x2_t)vbicq_s8((int8x16_t)v314, (int8x16_t)vcltzq_f64(v314));
                    v323 = (float64x2_t)vbicq_s8((int8x16_t)v316, (int8x16_t)vcltzq_f64(v316));
                    v324 = (float64x2_t)vbicq_s8((int8x16_t)v317, (int8x16_t)vcltzq_f64(v317));
                    v325 = (float64x2_t)vbicq_s8((int8x16_t)v315, (int8x16_t)vcltzq_f64(v315));
                    v326 = (float64x2_t)vbicq_s8((int8x16_t)v318, (int8x16_t)vcltzq_f64(v318));
                    v327 = (float64x2_t)vbicq_s8((int8x16_t)v319, (int8x16_t)vcltzq_f64(v319));
                    *(int16x4_t *)&v320.f64[0] = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v321, v86), (int8x16_t)v86, (int8x16_t)v321)))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v320, v86), (int8x16_t)v86, (int8x16_t)v320)))));
                    *(int16x4_t *)&v322.f64[0] = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v325, v86), (int8x16_t)v86, (int8x16_t)v325)))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v322, v86), (int8x16_t)v86, (int8x16_t)v322)))));
                    *(int16x4_t *)&v321.f64[0] = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v327, v86), (int8x16_t)v86, (int8x16_t)v327)))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v326, v86), (int8x16_t)v86, (int8x16_t)v326)))));
                    v322.f64[1] = v320.f64[0];
                    *(int16x4_t *)&v321.f64[1] = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v324, v86), (int8x16_t)v86, (int8x16_t)v324)))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v323, v86), (int8x16_t)v86, (int8x16_t)v323)))));
                    *v285++ = vuzp1q_s8((int8x16_t)v321, (int8x16_t)v322);
                    v286 -= 16;
                  }
                  while (v286);
                  if (v70 == v76)
                    continue;
                  v258 = (v67 - v66) & 0xFFFFFFFFFFFFFFF0;
                  v257 = (char *)(v76 + v66);
                  if ((v70 & 8) == 0)
                    goto LABEL_85;
                }
                else
                {
                  v258 = 0;
                }
                v259 = v855 + v258;
                v260 = (uint64_t *)(v255 + v66 + v258);
                v261 = (int8x8_t *)(v256 + v66 + v258);
                do
                {
                  v262 = *v260++;
                  v263.i32[0] = BYTE6(v262);
                  v263.i32[1] = HIBYTE(v262);
                  v264 = vand_s8(v263, (int8x8_t)0xFF000000FFLL);
                  v265.i32[0] = BYTE4(v262);
                  v265.i32[1] = BYTE5(v262);
                  v266 = vand_s8(v265, (int8x8_t)0xFF000000FFLL);
                  v267.i32[0] = BYTE2(v262);
                  v268.i64[0] = v264.u32[0];
                  v268.i64[1] = v264.u32[1];
                  v269 = v268;
                  v268.i64[0] = v266.u32[0];
                  v268.i64[1] = v266.u32[1];
                  v270 = v268;
                  v267.i32[1] = BYTE3(v262);
                  v271 = vand_s8(v267, (int8x8_t)0xFF000000FFLL);
                  v268.i64[0] = v271.u32[0];
                  v268.i64[1] = v271.u32[1];
                  v272.i32[0] = v262;
                  v273 = vcvtq_f64_u64(v270);
                  v274 = vcvtq_f64_u64(v268);
                  v272.i32[1] = BYTE1(v262);
                  v275 = vand_s8(v272, (int8x8_t)0xFF000000FFLL);
                  v268.i64[0] = v275.u32[0];
                  v268.i64[1] = v275.u32[1];
                  v276 = vaddq_f64(v253, vmulq_n_f64(vcvtq_f64_u64(v269), v251));
                  v277 = vaddq_f64(v253, vmulq_n_f64(v273, v251));
                  v278 = vaddq_f64(v253, vmulq_n_f64(v274, v251));
                  v279 = vaddq_f64(v253, vmulq_n_f64(vcvtq_f64_u64(v268), v251));
                  v280 = (float64x2_t)vbicq_s8((int8x16_t)v276, (int8x16_t)vcltzq_f64(v276));
                  v281 = (float64x2_t)vbicq_s8((int8x16_t)v277, (int8x16_t)vcltzq_f64(v277));
                  v282 = (float64x2_t)vbicq_s8((int8x16_t)v278, (int8x16_t)vcltzq_f64(v278));
                  v283 = (float64x2_t)vbicq_s8((int8x16_t)v279, (int8x16_t)vcltzq_f64(v279));
                  *v261++ = vuzp1_s8((int8x8_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v283, v86), (int8x16_t)v86, (int8x16_t)v283)))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v282, v86), (int8x16_t)v86, (int8x16_t)v282))))), (int8x8_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v281, v86), (int8x16_t)v86, (int8x16_t)v281)))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v280, v86), (int8x16_t)v86, (int8x16_t)v280))))));
                  v259 += 8;
                }
                while (v259);
                v257 = __src;
                if (v70 != ((v67 - v66) & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_85;
              }
            }
            v81 = (int8x16_t *)&xmmword_2102DB000;
            if (v67 < v53)
            {
              v333 = *(double *)(v852 + (v85 | 0x30));
              v334 = *(uint64_t *)(v852 + (v85 | 0x38));
              v335 = (float64x2_t)vdupq_lane_s64(v334, 0);
              do
              {
                v336 = *(_QWORD *)(*v63 + 8 * v82);
                v337 = *(_QWORD *)(*v68 + 8 * v82);
                v338 = v67;
                if (v69 < 8 || (v338 = v67, (unint64_t)(v337 - v336) < 0x10))
                {
LABEL_107:
                  v409 = v53 - v338;
                  v410 = (_BYTE *)(v337 + v338);
                  v411 = (unsigned __int8 *)(v336 + v338);
                  do
                  {
                    v412 = *v411++;
                    v413 = *(double *)&v334 + v333 * (double)v412;
                    if (v413 < 0.0)
                      v413 = 0.0;
                    if (v413 > 255.0)
                      v413 = 255.0;
                    *v410++ = llround(v413);
                    --v409;
                  }
                  while (v409);
                  goto LABEL_94;
                }
                if (v69 >= 0x10)
                {
                  v365 = (int8x16_t *)(v336 + v67);
                  v366 = (int8x16_t *)(v337 + v67);
                  v367 = (v53 - v67) & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    v368 = *v365++;
                    v369 = vextq_s8(v368, v368, 8uLL).u64[0];
                    v370.i32[0] = BYTE6(v369);
                    v370.i32[1] = HIBYTE(v369);
                    v371.i32[0] = BYTE4(v369);
                    v371.i32[1] = BYTE5(v369);
                    v372.i32[0] = BYTE2(v369);
                    v373 = vand_s8(v370, (int8x8_t)0xFF000000FFLL);
                    v374 = vand_s8(v371, (int8x8_t)0xFF000000FFLL);
                    v372.i32[1] = BYTE3(v369);
                    v375 = vand_s8(v372, (int8x8_t)0xFF000000FFLL);
                    v376.i32[0] = v369;
                    v376.i32[1] = BYTE1(v369);
                    v377.i64[0] = v373.u32[0];
                    v377.i64[1] = v373.u32[1];
                    v378 = v377;
                    v373.i32[0] = v368.u8[6];
                    v377.i64[0] = v374.u32[0];
                    v377.i64[1] = v374.u32[1];
                    v379 = v377;
                    v380 = vand_s8(v376, (int8x8_t)0xFF000000FFLL);
                    v373.i32[1] = v368.u8[7];
                    v381 = vand_s8(v373, (int8x8_t)0xFF000000FFLL);
                    v377.i64[0] = v381.u32[0];
                    v377.i64[1] = v381.u32[1];
                    v382 = v377;
                    v377.i64[0] = v375.u32[0];
                    v377.i64[1] = v375.u32[1];
                    v383 = v377;
                    v384.i32[0] = v368.u8[4];
                    v377.i64[0] = v380.u32[0];
                    v377.i64[1] = v380.u32[1];
                    v385 = v377;
                    v384.i32[1] = v368.u8[5];
                    v386 = vand_s8(v384, (int8x8_t)0xFF000000FFLL);
                    v377.i64[0] = v386.u32[0];
                    v377.i64[1] = v386.u32[1];
                    v387 = vcvtq_f64_u64(v377);
                    v388.i32[0] = v368.u8[2];
                    v388.i32[1] = v368.u8[3];
                    v389 = vand_s8(v388, (int8x8_t)0xFF000000FFLL);
                    v377.i64[0] = v389.u32[0];
                    v377.i64[1] = v389.u32[1];
                    v390 = vcvtq_f64_u64(v377);
                    v391.i32[0] = v368.u8[0];
                    v392 = vcvtq_f64_u64(v383);
                    v391.i32[1] = v368.u8[1];
                    *(int8x8_t *)v383.i8 = vand_s8(v391, (int8x8_t)0xFF000000FFLL);
                    v377.i64[0] = v383.u32[0];
                    v377.i64[1] = v383.u32[1];
                    v393 = vaddq_f64(v335, vmulq_n_f64(vcvtq_f64_u64(v378), v333));
                    v394 = vaddq_f64(v335, vmulq_n_f64(vcvtq_f64_u64(v379), v333));
                    v395 = vaddq_f64(v335, vmulq_n_f64(v392, v333));
                    v396 = vaddq_f64(v335, vmulq_n_f64(vcvtq_f64_u64(v385), v333));
                    v397 = vaddq_f64(v335, vmulq_n_f64(vcvtq_f64_u64(v382), v333));
                    v398 = vaddq_f64(v335, vmulq_n_f64(v387, v333));
                    v399 = vaddq_f64(v335, vmulq_n_f64(v390, v333));
                    v400 = vaddq_f64(v335, vmulq_n_f64(vcvtq_f64_u64(v377), v333));
                    v401 = (float64x2_t)vbicq_s8((int8x16_t)v393, (int8x16_t)vcltzq_f64(v393));
                    v402 = (float64x2_t)vbicq_s8((int8x16_t)v394, (int8x16_t)vcltzq_f64(v394));
                    v403 = (float64x2_t)vbicq_s8((int8x16_t)v395, (int8x16_t)vcltzq_f64(v395));
                    v404 = (float64x2_t)vbicq_s8((int8x16_t)v397, (int8x16_t)vcltzq_f64(v397));
                    v405 = (float64x2_t)vbicq_s8((int8x16_t)v398, (int8x16_t)vcltzq_f64(v398));
                    v406 = (float64x2_t)vbicq_s8((int8x16_t)v396, (int8x16_t)vcltzq_f64(v396));
                    v407 = (float64x2_t)vbicq_s8((int8x16_t)v399, (int8x16_t)vcltzq_f64(v399));
                    v408 = (float64x2_t)vbicq_s8((int8x16_t)v400, (int8x16_t)vcltzq_f64(v400));
                    *(int16x4_t *)&v401.f64[0] = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v402, v86), (int8x16_t)v86, (int8x16_t)v402)))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v401, v86), (int8x16_t)v86, (int8x16_t)v401)))));
                    *(int16x4_t *)&v403.f64[0] = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v406, v86), (int8x16_t)v86, (int8x16_t)v406)))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v403, v86), (int8x16_t)v86, (int8x16_t)v403)))));
                    *(int16x4_t *)&v402.f64[0] = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v408, v86), (int8x16_t)v86, (int8x16_t)v408)))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v407, v86), (int8x16_t)v86, (int8x16_t)v407)))));
                    v403.f64[1] = v401.f64[0];
                    *(int16x4_t *)&v402.f64[1] = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v405, v86), (int8x16_t)v86, (int8x16_t)v405)))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v404, v86), (int8x16_t)v86, (int8x16_t)v404)))));
                    *v366++ = vuzp1q_s8((int8x16_t)v402, (int8x16_t)v403);
                    v367 -= 16;
                  }
                  while (v367);
                  if (v69 == v78)
                    goto LABEL_94;
                  v339 = (v53 - v67) & 0xFFFFFFFFFFFFFFF0;
                  v338 = v78 + v67;
                  if ((v69 & 8) == 0)
                    goto LABEL_107;
                }
                else
                {
                  v339 = 0;
                }
                v340 = v853 + v339;
                v341 = (uint64_t *)(v336 + v67 + v339);
                v342 = (int8x8_t *)(v337 + v67 + v339);
                do
                {
                  v343 = *v341++;
                  v344.i32[0] = BYTE6(v343);
                  v344.i32[1] = HIBYTE(v343);
                  v345 = vand_s8(v344, (int8x8_t)0xFF000000FFLL);
                  v346.i32[0] = BYTE4(v343);
                  v346.i32[1] = BYTE5(v343);
                  v347 = vand_s8(v346, (int8x8_t)0xFF000000FFLL);
                  v348.i32[0] = BYTE2(v343);
                  v349.i64[0] = v345.u32[0];
                  v349.i64[1] = v345.u32[1];
                  v350 = v349;
                  v349.i64[0] = v347.u32[0];
                  v349.i64[1] = v347.u32[1];
                  v351 = v349;
                  v348.i32[1] = BYTE3(v343);
                  v352 = vand_s8(v348, (int8x8_t)0xFF000000FFLL);
                  v349.i64[0] = v352.u32[0];
                  v349.i64[1] = v352.u32[1];
                  v353.i32[0] = v343;
                  v354 = vcvtq_f64_u64(v351);
                  v355 = vcvtq_f64_u64(v349);
                  v353.i32[1] = BYTE1(v343);
                  v356 = vand_s8(v353, (int8x8_t)0xFF000000FFLL);
                  v349.i64[0] = v356.u32[0];
                  v349.i64[1] = v356.u32[1];
                  v357 = vaddq_f64(v335, vmulq_n_f64(vcvtq_f64_u64(v350), v333));
                  v358 = vaddq_f64(v335, vmulq_n_f64(v354, v333));
                  v359 = vaddq_f64(v335, vmulq_n_f64(v355, v333));
                  v360 = vaddq_f64(v335, vmulq_n_f64(vcvtq_f64_u64(v349), v333));
                  v361 = (float64x2_t)vbicq_s8((int8x16_t)v357, (int8x16_t)vcltzq_f64(v357));
                  v362 = (float64x2_t)vbicq_s8((int8x16_t)v358, (int8x16_t)vcltzq_f64(v358));
                  v363 = (float64x2_t)vbicq_s8((int8x16_t)v359, (int8x16_t)vcltzq_f64(v359));
                  v364 = (float64x2_t)vbicq_s8((int8x16_t)v360, (int8x16_t)vcltzq_f64(v360));
                  *v342++ = vuzp1_s8((int8x8_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v364, v86), (int8x16_t)v86, (int8x16_t)v364)))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v363, v86), (int8x16_t)v86, (int8x16_t)v363))))), (int8x8_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v362, v86), (int8x16_t)v86, (int8x16_t)v362)))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v361, v86), (int8x16_t)v86, (int8x16_t)v361))))));
                  v340 += 8;
                }
                while (v340);
                v338 = v860;
                if (v69 != ((v53 - v67) & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_107;
LABEL_94:
                ++v82;
              }
              while (v82 != v84);
            }
          }
          v61 = v83;
        }
        while (v83 != 4);
        kdebug_trace();
        v13 = v847;
        v414 = v845;
        if ((_DWORD)v845)
        {
          v415 = 10 << v845;
          if (!(10 << v845))
            goto LABEL_15;
        }
        else if (*(_BYTE *)(a1 + 104))
        {
          v415 = *(_DWORD *)(a1 + 96);
          if (!v415)
            goto LABEL_15;
        }
        else
        {
          v415 = 10;
        }
        v888 = 0;
        v416 = v878;
        v865 = 0.0;
        v417 = v875;
        v418 = v883.n128_f64[0];
        v419 = v880.f64[0];
        v420 = v877;
        v421 = v881.n128_u64[0];
        v422 = v882.i64[0];
        v423 = v876;
        v424 = v879.n128_f64[0];
        v856 = v415;
        while (2)
        {
          v868 = v423;
          v869 = v422;
          v871 = *(double *)&v421;
          v873 = v420;
          v885 = v419;
          if ((_DWORD)v845)
            rep = 0;
          else
            rep = std::chrono::steady_clock::now().__d_.__rep_;
          v436 = v877 * v879.n128_f64[0] - v881.n128_f64[0] * v876;
          v437 = v876 * v880.f64[0] - v877 * *(double *)v882.i64;
          v438 = v883.n128_f64[0] * v437
               + v878 * v436
               - v875 * (v879.n128_f64[0] * v880.f64[0] - v881.n128_f64[0] * *(double *)v882.i64);
          if (fabs(v438) > 0.00000001)
          {
            v439 = 1.0 / v438;
            v440.f64[0] = v876;
            *(_QWORD *)&v440.f64[1] = v881.n128_u64[0];
            *(_QWORD *)&v441.f64[0] = v883.n128_u64[0];
            v441.f64[1] = v875;
            *(_QWORD *)&v442.f64[0] = v879.n128_u64[0];
            v442.f64[1] = v877;
            v443 = vmulq_f64(v440, v441);
            v441.f64[0] = v875;
            *(_QWORD *)&v441.f64[1] = v883.n128_u64[0];
            v444 = vmulq_f64(v442, v441);
            v442.f64[0] = v878;
            v442.f64[1] = v875;
            v905 = vmulq_n_f64(vsubq_f64(v443, v444), v439);
            v904 = v436 * v439;
            v906 = (v881.n128_f64[0] * *(double *)v882.i64 - v879.n128_f64[0] * v880.f64[0]) * v439;
            *(_QWORD *)&v445.f64[0] = v879.n128_u64[0];
            v445.f64[1] = v880.f64[0];
            v446.f64[0] = v878;
            *(_QWORD *)&v446.f64[1] = v883.n128_u64[0];
            *(_QWORD *)&v447.f64[0] = v882.i64[0];
            *(_QWORD *)&v447.f64[1] = v881.n128_u64[0];
            v448 = vmulq_f64(v445, v446);
            *(_QWORD *)&v446.f64[0] = v883.n128_u64[0];
            v446.f64[1] = v878;
            v907 = vmulq_n_f64(vsubq_f64(v448, vmulq_f64(v447, v446)), v439);
            *(_QWORD *)&v448.f64[0] = v882.i64[0];
            v448.f64[1] = v877;
            v908 = v437 * v439;
            v449.f64[0] = v875;
            v449.f64[1] = v878;
            v450 = vmulq_f64(v448, v449);
            v448.f64[0] = v876;
            v448.f64[1] = v880.f64[0];
            v909 = vmulq_n_f64(vsubq_f64(v450, vmulq_f64(v448, v442)), v439);
          }
          kdebug_trace();
          v451 = sub_20EDE9858(*(_QWORD *)(v13 + 2024) + 144 * v414, *(_QWORD *)(v13 + 2000) + 144 * v414, a4, (float64x2_t *)&v904, v850, (size_t *)(*(_QWORD *)(v13 + 1952) + 144 * v414));
          v452 = v845;
          kdebug_trace();
          v455 = *(_QWORD *)(v13 + 1928);
          v456 = v455 + 144 * v845;
          v457 = *(_QWORD *)(v456 + 32);
          v458 = *(_QWORD *)(v456 + 48);
          v459 = 0.0;
          v460 = 0.0;
          if (v451)
          {
            if (v458 && v457)
            {
              v461 = 0;
              v462 = 0;
              v463 = *(_QWORD *)(v455 + 144 * v845 + 120);
              v464 = *(_QWORD *)(*(_QWORD *)(v13 + 2024) + 144 * v845 + 120);
              v465 = *(_QWORD *)(*(_QWORD *)(v13 + 2064) + 144 * v845 + 120);
              v466 = *(_QWORD *)(*(_QWORD *)(v13 + 2000) + 144 * v845 + 120);
              do
              {
                v467 = *(__int8 **)(v463 + 8 * v461);
                v468 = *(float **)(v464 + 8 * v461);
                v469 = *(_DWORD **)(v465 + 8 * v461);
                v470 = v457;
                v471 = *(_BYTE **)(v466 + 8 * v461);
                do
                {
                  while (!*v471)
                  {
                    v453.i32[0] = 0;
                    *v469++ = 0;
                    ++v468;
                    ++v467;
                    ++v471;
                    if (!--v470)
                      goto LABEL_133;
                  }
                  v453.i8[0] = *v467;
                  v472 = *v468++;
                  *(double *)v453.i64 = (double)v453.u64[0] - v472;
                  *(float *)v453.i32 = *(double *)v453.i64;
                  v459 = v459 + (float)(*(float *)v453.i32 * *(float *)v453.i32);
                  v460 = v460 + *(float *)v453.i32;
                  ++v462;
                  *v469++ = v453.i32[0];
                  ++v467;
                  ++v471;
                  --v470;
                }
                while (v470);
LABEL_133:
                ++v461;
              }
              while (v461 != v458);
              if (v462)
              {
                v459 = v459 / (double)v462;
                v460 = v460 / (double)v462;
              }
            }
            goto LABEL_176;
          }
          if (!v458 || !v457)
          {
LABEL_176:
            if (!v888)
              goto LABEL_178;
LABEL_177:
            if (v865 >= v459)
              goto LABEL_178;
            v425 = v416;
            v426 = v417;
            *(double *)&v427 = v418;
            v428 = v885;
            v419 = v885;
            v429 = v873;
            v420 = v873;
            v430 = v871;
            v421 = *(_QWORD *)&v871;
            v432 = v868;
            v431 = v869;
            v422 = v869;
            v423 = v868;
            v433 = v424;
            v434 = v856;
            v435 = v856;
LABEL_123:
            v454.f64[0] = v424;
            v879 = (__n128)v454;
            v876 = v432;
            v882.i64[0] = v431;
            v454.f64[0] = v430;
            v881 = (__n128)v454;
            v877 = v429;
            v880.f64[0] = v428;
            v454.f64[0] = v418;
            v883 = (__n128)v454;
            v875 = v417;
            v878 = v416;
            v416 = v425;
            v417 = v426;
            v418 = *(double *)&v427;
            v424 = v433;
            v888 = v435 + 1;
            v414 = v845;
            if (v888 >= v434)
              goto LABEL_15;
            continue;
          }
          break;
        }
        v473 = 0;
        v474 = *(_QWORD *)(v455 + 144 * v845 + 120);
        v475 = *(_QWORD *)(*(_QWORD *)(v13 + 2024) + 144 * v845 + 120);
        v476 = *(_QWORD *)(*(_QWORD *)(v13 + 2064) + 144 * v845 + 120);
        v477 = 4 * v457;
        v478 = v457 & 0xFFFFFFFFFFFFFFF0;
        v854 = 4 * (v457 & 0xFFFFFFFFFFFFFFF0);
        v479 = v457 & 0xFFFFFFFFFFFFFFF8;
        v861 = 4 * (v457 & 0xFFFFFFFFFFFFFFF8);
        while (2)
        {
          v480 = *(_QWORD *)(v474 + 8 * v473);
          v481 = *(_QWORD *)(v475 + 8 * v473);
          v482 = *(_QWORD *)(v476 + 8 * v473);
          if (v457 < 8)
          {
            v483 = 0;
            goto LABEL_146;
          }
          v483 = 0;
          v491 = v482 + v477;
          v493 = v482 < v481 + v477 && v481 < v491;
          v494 = v480 >= v491 || v482 >= v480 + v457;
          if (!v494 || v493)
          {
LABEL_146:
            v484 = *(_DWORD **)(v476 + 8 * v473);
            v485 = *(float **)(v475 + 8 * v473);
            v486 = *(unsigned __int8 **)(v474 + 8 * v473);
            goto LABEL_147;
          }
          if (v457 >= 0x10)
          {
            v527 = v457 & 0xFFFFFFFFFFFFFFF0;
            v528 = *(float32x4_t **)(v476 + 8 * v473);
            v529 = *(float32x4_t **)(v475 + 8 * v473);
            v530 = *(int8x16_t **)(v474 + 8 * v473);
            do
            {
              v531 = *v530++;
              v532 = (int8x8_t)vextq_s8(v531, v531, 8uLL).u64[0];
              v533 = v532.u8[1];
              v534 = v532.u8[3];
              v535.i32[0] = v532.u8[0];
              v536.i32[0] = v532.u8[2];
              v537 = v532.u8[7];
              v532.i32[0] = v532.u8[4];
              v535.i32[1] = v533;
              v538.i32[0] = v532.u8[6];
              v539.i32[0] = v531.u8[2];
              v536.i32[1] = v534;
              v539.i32[1] = v531.u8[3];
              v532.i32[1] = v532.u8[5];
              v538.i32[1] = v537;
              v540.i32[0] = v531.u8[6];
              v540.i32[1] = v531.u8[7];
              v541 = vand_s8(v538, (int8x8_t)0xFF000000FFLL);
              v542.i64[0] = v541.u32[0];
              v542.i64[1] = v541.u32[1];
              v543 = v542;
              v544 = vand_s8(v540, (int8x8_t)0xFF000000FFLL);
              v542.i64[0] = v544.u32[0];
              v542.i64[1] = v544.u32[1];
              v546 = v529[2];
              v545 = v529[3];
              v547 = v529[1];
              v548 = vsubq_f64(vcvtq_f64_u64(v543), vcvt_hight_f64_f32(v545));
              v549 = vsubq_f64(vcvtq_f64_u64(v542), vcvt_hight_f64_f32(v547));
              v550 = vand_s8(v532, (int8x8_t)0xFF000000FFLL);
              v542.i64[0] = v550.u32[0];
              v542.i64[1] = v550.u32[1];
              v551 = vsubq_f64(vcvtq_f64_u64(v542), vcvtq_f64_f32(*(float32x2_t *)v545.f32));
              v550.i32[0] = v531.u8[4];
              v550.i32[1] = v531.u8[5];
              v552 = vand_s8(v536, (int8x8_t)0xFF000000FFLL);
              v553 = vand_s8(v539, (int8x8_t)0xFF000000FFLL);
              v542.i64[0] = v552.u32[0];
              v542.i64[1] = v552.u32[1];
              v554 = v542;
              v542.i64[0] = v553.u32[0];
              v542.i64[1] = v553.u32[1];
              v555 = vcvtq_f64_u64(v542);
              v556 = vand_s8(v550, (int8x8_t)0xFF000000FFLL);
              v542.i64[0] = v556.u32[0];
              v542.i64[1] = v556.u32[1];
              v557 = vsubq_f64(vcvtq_f64_u64(v542), vcvtq_f64_f32(*(float32x2_t *)v547.f32));
              v558 = vsubq_f64(v555, vcvt_hight_f64_f32(*v529));
              v559 = vsubq_f64(vcvtq_f64_u64(v554), vcvt_hight_f64_f32(v546));
              v554.i32[0] = v531.u8[0];
              v560 = vand_s8(v535, (int8x8_t)0xFF000000FFLL);
              v542.i64[0] = v560.u32[0];
              v542.i64[1] = v560.u32[1];
              v554.i32[1] = v531.u8[1];
              v561 = vcvtq_f64_u64(v542);
              *(int8x8_t *)v554.i8 = vand_s8(*(int8x8_t *)v554.i8, (int8x8_t)0xFF000000FFLL);
              v542.i64[0] = v554.u32[0];
              v542.i64[1] = v554.u32[1];
              *(float32x2_t *)&v561.f64[0] = vcvt_f32_f64(vsubq_f64(v561, vcvtq_f64_f32(*(float32x2_t *)v546.f32)));
              v562 = vcvt_f32_f64(vsubq_f64(vcvtq_f64_u64(v542), vcvtq_f64_f32(*(float32x2_t *)v529->f32)));
              *(float32x2_t *)&v557.f64[0] = vcvt_f32_f64(v557);
              *v528 = vcvt_hight_f32_f64((int32x2_t)v562, v558);
              v528[1] = vcvt_hight_f32_f64(*(int32x2_t *)&v557.f64[0], v549);
              *(float32x2_t *)v554.i8 = vcvt_f32_f64(v551);
              v528[2] = vcvt_hight_f32_f64(*(int32x2_t *)&v561.f64[0], v559);
              v528[3] = vcvt_hight_f32_f64(*(int32x2_t *)v554.i8, v548);
              *(float32x2_t *)v546.f32 = vcvt_f32_f64(v558);
              *(float32x2_t *)&v558.f64[0] = vcvt_f32_f64(v549);
              v563 = vcvtq_f64_f32(vmul_f32(v562, v562));
              v564 = vcvtq_f64_f32(vmul_f32(*(float32x2_t *)v546.f32, *(float32x2_t *)v546.f32));
              v563.f64[0] = v459 + v563.f64[0] + v563.f64[1] + v564.f64[0] + v564.f64[1];
              v565 = vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v557.f64[0], *(float32x2_t *)&v557.f64[0]));
              v563.f64[0] = v563.f64[0] + v565.f64[0] + v565.f64[1];
              v566 = vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v558.f64[0], *(float32x2_t *)&v558.f64[0]));
              v563.f64[0] = v563.f64[0] + v566.f64[0] + v566.f64[1];
              *(float32x2_t *)&v559.f64[0] = vcvt_f32_f64(v559);
              v567 = vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v561.f64[0], *(float32x2_t *)&v561.f64[0]));
              v563.f64[0] = v563.f64[0] + v567.f64[0] + v567.f64[1];
              v568 = vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v559.f64[0], *(float32x2_t *)&v559.f64[0]));
              v563.f64[0] = v563.f64[0] + v568.f64[0] + v568.f64[1];
              *(float32x2_t *)&v548.f64[0] = vcvt_f32_f64(v548);
              v569 = vcvtq_f64_f32(vmul_f32(*(float32x2_t *)v554.i8, *(float32x2_t *)v554.i8));
              v563.f64[0] = v563.f64[0] + v569.f64[0] + v569.f64[1];
              v454 = vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v548.f64[0], *(float32x2_t *)&v548.f64[0]));
              v459 = v563.f64[0] + v454.f64[0] + v454.f64[1];
              v570 = vcvtq_f64_f32(v562);
              v571 = vcvtq_f64_f32(*(float32x2_t *)v546.f32);
              v572 = vcvtq_f64_f32(*(float32x2_t *)&v557.f64[0]);
              v572.f64[0] = v460 + v570.f64[0] + v570.f64[1] + v571.f64[0] + v571.f64[1] + v572.f64[0] + v572.f64[1];
              v573 = vcvtq_f64_f32(*(float32x2_t *)&v558.f64[0]);
              v574 = vcvtq_f64_f32(*(float32x2_t *)&v561.f64[0]);
              v574.f64[0] = v572.f64[0] + v573.f64[0] + v573.f64[1] + v574.f64[0] + v574.f64[1];
              v575 = vcvtq_f64_f32(*(float32x2_t *)&v559.f64[0]);
              v576 = vcvtq_f64_f32(*(float32x2_t *)v554.i8);
              v453 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)&v548.f64[0]);
              v460 = v574.f64[0]
                   + v575.f64[0]
                   + v575.f64[1]
                   + v576.f64[0]
                   + v576.f64[1]
                   + *(double *)v453.i64
                   + *(double *)&v453.i64[1];
              v529 += 4;
              v528 += 4;
              v527 -= 16;
            }
            while (v527);
            if (v457 == v478)
            {
              v13 = v847;
              v81 = (int8x16_t *)&xmmword_2102DB000;
            }
            else
            {
              v13 = v847;
              v81 = (int8x16_t *)&xmmword_2102DB000;
              if ((v457 & 8) != 0)
              {
                v495 = v457 & 0xFFFFFFFFFFFFFFF0;
                goto LABEL_164;
              }
              v486 = (unsigned __int8 *)(v480 + v478);
              v485 = (float *)(v481 + v854);
              v484 = (_DWORD *)(v482 + v854);
              v483 = v457 & 0xFFFFFFFFFFFFFFF0;
LABEL_147:
              v487 = v457 - v483;
              do
              {
                v488 = *v486++;
                v489 = (double)v488;
                v490 = *v485++;
                *(float *)&v489 = v489 - v490;
                *v484++ = LODWORD(v489);
                v459 = v459 + (float)(*(float *)&v489 * *(float *)&v489);
                v460 = v460 + *(float *)&v489;
                --v487;
              }
              while (v487);
            }
          }
          else
          {
            v495 = 0;
LABEL_164:
            v484 = (_DWORD *)(v482 + v861);
            v485 = (float *)(v481 + v861);
            v486 = (unsigned __int8 *)(v480 + v479);
            v496 = (uint64_t *)(v480 + v495);
            v497 = (float32x4_t *)(v481 + 4 * v495);
            v498 = (float32x4_t *)(v482 + 4 * v495);
            v499 = v495 - (v457 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v500 = *v496++;
              v501.i32[0] = v500;
              v501.i32[1] = BYTE1(v500);
              v502 = vand_s8(v501, (int8x8_t)0xFF000000FFLL);
              v503.i64[0] = v502.u32[0];
              v503.i64[1] = v502.u32[1];
              v504 = vcvtq_f64_u64(v503);
              v505.i32[0] = BYTE2(v500);
              v505.i32[1] = BYTE3(v500);
              v506 = vand_s8(v505, (int8x8_t)0xFF000000FFLL);
              v503.i64[0] = v506.u32[0];
              v503.i64[1] = v506.u32[1];
              v507 = vcvtq_f64_u64(v503);
              v508.i32[0] = BYTE4(v500);
              v508.i32[1] = BYTE5(v500);
              v509 = vand_s8(v508, (int8x8_t)0xFF000000FFLL);
              v503.i64[0] = v509.u32[0];
              v503.i64[1] = v509.u32[1];
              v510 = vcvtq_f64_u64(v503);
              v511.i32[0] = BYTE6(v500);
              v511.i32[1] = HIBYTE(v500);
              v512 = vand_s8(v511, (int8x8_t)0xFF000000FFLL);
              v503.i64[0] = v512.u32[0];
              v503.i64[1] = v512.u32[1];
              v514 = *v497;
              v513 = v497[1];
              v497 += 2;
              v515 = vsubq_f64(vcvtq_f64_u64(v503), vcvt_hight_f64_f32(v513));
              v516 = vsubq_f64(v510, vcvtq_f64_f32(*(float32x2_t *)v513.f32));
              v517 = vsubq_f64(v507, vcvt_hight_f64_f32(v514));
              *(float32x2_t *)&v504.f64[0] = vcvt_f32_f64(vsubq_f64(v504, vcvtq_f64_f32(*(float32x2_t *)v514.f32)));
              *(float32x2_t *)v513.f32 = vmul_f32(*(float32x2_t *)&v504.f64[0], *(float32x2_t *)&v504.f64[0]);
              v518 = vcvtq_f64_f32(*(float32x2_t *)&v504.f64[0]);
              v519 = vcvt_hight_f32_f64(*(int32x2_t *)&v504.f64[0], v517);
              *(float32x2_t *)&v516.f64[0] = vcvt_f32_f64(v516);
              v520 = vmul_f32(*(float32x2_t *)&v516.f64[0], *(float32x2_t *)&v516.f64[0]);
              v521 = vcvtq_f64_f32(*(float32x2_t *)&v516.f64[0]);
              v522 = vcvt_hight_f32_f64(*(int32x2_t *)&v516.f64[0], v515);
              *(float32x2_t *)&v517.f64[0] = vcvt_f32_f64(v517);
              *(float32x2_t *)&v515.f64[0] = vcvt_f32_f64(v515);
              *v498 = v519;
              v498[1] = v522;
              v498 += 2;
              v523 = vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v515.f64[0], *(float32x2_t *)&v515.f64[0]));
              v524 = vcvtq_f64_f32(v520);
              v454 = vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v517.f64[0], *(float32x2_t *)&v517.f64[0]));
              v525 = vcvtq_f64_f32(*(float32x2_t *)v513.f32);
              v453 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)&v515.f64[0]);
              v526 = vcvtq_f64_f32(*(float32x2_t *)&v517.f64[0]);
              v459 = v459
                   + v525.f64[0]
                   + v525.f64[1]
                   + v454.f64[0]
                   + v454.f64[1]
                   + v524.f64[0]
                   + v524.f64[1]
                   + v523.f64[0]
                   + v523.f64[1];
              v460 = v460
                   + v518.f64[0]
                   + v518.f64[1]
                   + v526.f64[0]
                   + v526.f64[1]
                   + v521.f64[0]
                   + v521.f64[1]
                   + *(double *)v453.i64
                   + *(double *)&v453.i64[1];
              v499 += 8;
            }
            while (v499);
            v483 = v457 & 0xFFFFFFFFFFFFFFF8;
            if (v457 != v479)
              goto LABEL_147;
          }
          if (++v473 != v458)
            continue;
          break;
        }
        v660 = v458 * v457;
        if (v660)
        {
          v459 = v459 / (double)v660;
          v460 = v460 / (double)v660;
        }
        v452 = v845;
        if (v888)
          goto LABEL_177;
LABEL_178:
        if (!*(_QWORD *)(v13 + 1696))
          break;
        v577 = *(_QWORD *)(v13 + 3416) + *(_QWORD *)(v13 + 3408);
        v578 = v577 + std::chrono::steady_clock::now().__d_.__rep_;
        v452 = v845;
        if ((unint64_t)(v578 - *(_QWORD *)(v13 + 1696)) <= *(_QWORD *)(a1 + 88))
          break;
      }
      *(_BYTE *)(v13 + 3424) = 1;
LABEL_15:
      if (v844 <= 1)
        goto LABEL_393;
    }
    v579 = *(_QWORD *)(v13 + 2024);
    v580 = v579 + 144 * v452;
    v581 = *(_QWORD *)(v580 + 48);
    if (v581)
    {
      v582 = *(_QWORD *)(v580 + 32);
      if (v582)
      {
        v583 = 0;
        v584 = *(_QWORD *)(v579 + 144 * v452 + 120);
        v585 = *(_QWORD *)(*(_QWORD *)(v13 + 1928) + 144 * v452 + 120);
        do
        {
          v586 = *(_QWORD *)(v584 + 8 * v583);
          v587 = *(_QWORD *)(v585 + 8 * v583);
          if (v582 >= 8 && (v586 < v587 + v582 ? (v588 = v587 >= v586 + 4 * v582) : (v588 = 1), v588))
          {
            if (v582 < 0x10)
            {
              v589 = 0;
LABEL_192:
              v590 = (uint64_t *)(v587 + v589);
              v591 = (float32x4_t *)(v586 + 4 * v589);
              v592 = v589 - (v582 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v593 = *v590++;
                v453.i64[0] = v593;
                v594 = vaddq_f32(v591[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v453, (int8x16_t)xmmword_2102DB020)));
                v453 = (int8x16_t)vaddq_f32(*v591, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v453, (int8x16_t)xmmword_2102DB010)));
                *v591 = (float32x4_t)v453;
                v591[1] = v594;
                v591 += 2;
                v592 += 8;
              }
              while (v592);
              v595 = v582 & 0xFFFFFFFFFFFFFFF8;
              if (v582 == (v582 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_183;
              goto LABEL_197;
            }
            v600 = v582 & 0xFFFFFFFFFFFFFFF0;
            v601 = *(float32x4_t **)(v584 + 8 * v583);
            v602 = *(int8x16_t **)(v585 + 8 * v583);
            do
            {
              v603 = *v602++;
              v604 = vaddq_f32(v601[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v603, (int8x16_t)xmmword_2102DB020)));
              v605 = vaddq_f32(*v601, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v603, (int8x16_t)xmmword_2102DB010)));
              v606 = vaddq_f32(v601[3], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v603, v81[4])));
              v453 = (int8x16_t)vaddq_f32(v601[2], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v603, (int8x16_t)xmmword_2102DB030)));
              v601[2] = (float32x4_t)v453;
              v601[3] = v606;
              *v601 = v605;
              v601[1] = v604;
              v601 += 4;
              v600 -= 16;
            }
            while (v600);
            if (v582 == (v582 & 0xFFFFFFFFFFFFFFF0))
              goto LABEL_183;
            v589 = v582 & 0xFFFFFFFFFFFFFFF0;
            v595 = v582 & 0xFFFFFFFFFFFFFFF0;
            if ((v582 & 8) != 0)
              goto LABEL_192;
          }
          else
          {
            v595 = 0;
          }
LABEL_197:
          v596 = v582 - v595;
          v597 = (float *)(v586 + 4 * v595);
          v598 = (unsigned __int8 *)(v587 + v595);
          do
          {
            v599 = *v598++;
            *v597 = *v597 + (float)v599;
            ++v597;
            --v596;
          }
          while (v596);
LABEL_183:
          ++v583;
        }
        while (v583 != v581);
      }
    }
    kdebug_trace();
    v607 = *(float **)(*(_QWORD *)(v13 + 2088) + 144 * v452 + 88);
    v608 = *(_QWORD *)(v13 + 2024) + 144 * v452;
    v609 = *(float **)(v608 + 88);
    v610 = *(_DWORD *)(v608 + 40);
    v611 = *(_DWORD *)(v608 + 32);
    v612 = *(_DWORD *)(v608 + 48);
    if (v611 < 10)
    {
      sub_2101166EC(v607, v609, v610, v611, v612);
      if (!v451)
        goto LABEL_248;
    }
    else
    {
      sub_210116130(v607, v609, v610, v611, v612);
      v452 = v845;
      if (!v451)
        goto LABEL_248;
    }
    v613 = *(_QWORD *)(v13 + 2000);
    if (*(_QWORD *)(v613 + 144 * v452 + 88))
    {
      v614 = v613 + 144 * v452;
      v617 = *(uint64_t **)(v614 + 120);
      v615 = (_QWORD **)(v614 + 120);
      v616 = v617;
      v618 = (uint64_t)*(v615 - 11);
      v619 = (uint64_t)*(v615 - 9);
      v620 = v619 - 1;
      v621 = v618 - 1;
      if ((unint64_t)(v618 - 1) >= 2)
      {
        v677 = 0;
        v678 = *v616;
        v679 = v616[v620];
        do
        {
          v680 = v678 + v677;
          if (!*(_BYTE *)(v678 + v677 + 1))
          {
            if (*(_BYTE *)(v680 + 2))
              *(_BYTE *)(v680 + 2) = 2;
            if (*(_BYTE *)(v678 + v677))
              *(_BYTE *)(v678 + v677) = 2;
            v681 = (*v615)[1] + v677;
            if (*(_BYTE *)(v681 + 1))
              *(_BYTE *)(v681 + 1) = 2;
          }
          v682 = v679 + v677;
          if (!*(_BYTE *)(v679 + v677 + 1))
          {
            if (*(_BYTE *)(v682 + 2))
              *(_BYTE *)(v682 + 2) = 2;
            if (*(_BYTE *)(v679 + v677))
              *(_BYTE *)(v679 + v677) = 2;
            v683 = (*v615)[v619 - 2] + v677;
            if (*(_BYTE *)(v683 + 1))
              *(_BYTE *)(v683 + 1) = 2;
          }
          ++v677;
        }
        while (v618 - 2 != v677);
      }
      if (v620 >= 2)
      {
        v684 = v618 - 2;
        v685 = 1;
        do
        {
          v687 = (_BYTE **)*v615;
          v688 = (_BYTE *)(*v615)[v685];
          if (!*v688)
          {
            v689 = v687[v685 - 1];
            if (*v689)
            {
              *v689 = 2;
              v687 = (_BYTE **)*v615;
            }
            v690 = v687[v685 + 1];
            if (*v690)
            {
              *v690 = 2;
              v687 = (_BYTE **)*v615;
            }
            v688 = v687[v685];
            if (v688[1])
            {
              v688[1] = 2;
              v687 = (_BYTE **)*v615;
              v688 = (_BYTE *)(*v615)[v685];
            }
          }
          if (v688[v621])
          {
            v686 = v685 + 1;
          }
          else
          {
            v691 = v687[v685 - 1];
            if (v691[v621])
            {
              v691[v621] = 2;
              v687 = (_BYTE **)*v615;
            }
            v686 = v685 + 1;
            v692 = v687[v685 + 1];
            if (v692[v621])
            {
              v692[v621] = 2;
              v687 = (_BYTE **)*v615;
            }
            v693 = v687[v685];
            if (v693[v684])
              v693[v684] = 2;
          }
          v685 = v686;
        }
        while (v686 != v620);
      }
      v622 = (_BYTE **)*v615;
      v623 = (_BYTE *)(*v615)[v620];
      if (!*v623)
      {
        if (v623[1])
        {
          v623[1] = 2;
          v622 = (_BYTE **)*v615;
        }
        v624 = v622[v619 - 2];
        if (*v624)
          *v624 = 2;
      }
      if (!v623[v621])
      {
        if (v623[v618 - 2])
          v623[v618 - 2] = 2;
        v625 = (*v615)[v619 - 2];
        if (*(_BYTE *)(v625 + v621))
          *(_BYTE *)(v625 + v621) = 2;
      }
      v626 = (_BYTE **)*v615;
      v627 = (_BYTE *)**v615;
      if (!*v627)
      {
        if (v627[1])
        {
          v627[1] = 2;
          v626 = (_BYTE **)*v615;
        }
        v628 = v626[1];
        if (*v628)
          *v628 = 2;
      }
      if (!v627[v621])
      {
        v629 = v618 - 2;
        if (v627[v629])
          v627[v629] = 2;
        v630 = (*v615)[1];
        if (*(_BYTE *)(v630 + v621))
          *(_BYTE *)(v630 + v621) = 2;
      }
      if (v621 >= 2 && v620 >= 2)
      {
        v631 = 1;
        do
        {
          v632 = (*v615)[v631];
          v633 = v631++ - 1;
          v634 = 1;
          do
          {
            if (*(_BYTE *)(v632 + v634))
            {
              v635 = v634 + 1;
            }
            else
            {
              if (*(_BYTE *)(v632 + v634 - 1))
                *(_BYTE *)(v632 + v634 - 1) = 2;
              v635 = v634 + 1;
              if (*(_BYTE *)(v632 + v634 + 1))
                *(_BYTE *)(v632 + v635) = 2;
              v636 = (_BYTE **)*v615;
              v637 = (*v615)[v633];
              if (*(_BYTE *)(v637 + v634))
              {
                *(_BYTE *)(v637 + v634) = 2;
                v636 = (_BYTE **)*v615;
              }
              v638 = v636[v631];
              if (v638[v634])
                v638[v634] = 2;
            }
            v634 = v635;
          }
          while (v635 != v621);
        }
        while (v631 != v620);
      }
    }
LABEL_248:
    kdebug_trace();
    kdebug_trace();
    v639 = v460;
    *(float *)&v640 = v459;
    sub_20EDA1AB4(*(_QWORD *)(v13 + 2088) + 144 * v452, *(_QWORD *)(v13 + 2064) + 144 * v452, *(_QWORD *)(v13 + 2000) + 144 * v452, (uint64_t)v849, (uint64_t)v848, v639, v640, v641, v642, v643, v644, v645);
    kdebug_trace();
    v646 = v848[1];
    *(_OWORD *)v924 = *v848;
    v925 = v646;
    v647 = v849[13];
    v937 = v849[12];
    v938 = v647;
    v648 = v849[15];
    v939 = v849[14];
    v940 = v648;
    v649 = v849[9];
    v933 = v849[8];
    v934 = v649;
    v650 = v849[11];
    v935 = v849[10];
    v936 = v650;
    v651 = v849[5];
    v930 = v849[4];
    *(_OWORD *)v931 = v651;
    v652 = v849[7];
    *(_OWORD *)&v931[16] = v849[6];
    *(_OWORD *)v932 = v652;
    v653 = v849[1];
    v926 = *v849;
    v927 = v653;
    v654 = v849[3];
    v928 = v849[2];
    v929 = v654;
    LOBYTE(v895[0]) = 108;
    LODWORD(v896.f64[0]) = 8;
    LODWORD(v910) = 1;
    LODWORD(v890) = -1;
    object = (void *)0x100000001;
    sub_20E8344CC(&object, (uint64_t)v895, (int *)&v896, (unsigned int *)&v910, (float *)&v926, (int *)&v896, (char *)v924, (int *)&v896, (int *)&v890);
    if (!(_DWORD)v890)
    {
      v661.f64[0] = (float)(*(float *)v924 * 4.0) + 1.0;
      v662 = (float)(*(float *)&v924[1] * 4.0);
      v454.f64[0] = (float)(*((float *)&v924[1] + 1) * 4.0);
      v663 = (float)(*((float *)&v925 + 1) * 4.0);
      __asm { FMOV            V21.2S, #4.0 }
      v661.f64[1] = (float)(*((float *)v924 + 1) * 4.0);
      v665 = vcvtq_f64_f32(vmul_f32(*(float32x2_t *)((char *)&v925 + 8), _D21));
      v454.f64[1] = (float)(*(float *)&v925 * 4.0) + 1.0;
      v666 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v661, v878), v454, v875), v665, v883.n128_f64[0]);
      v667 = v883.n128_f64[0] + v662 * v878 + v663 * v875;
      v668 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v661, v880.f64[0]), v454, v877), v665, v881.n128_f64[0]);
      v669 = v881.n128_f64[0] + v662 * v880.f64[0] + v663 * v877;
      v670 = vmlaq_n_f64(vmulq_n_f64(v661, *(double *)v882.i64), v454, v876);
      *(_QWORD *)&v454.f64[1] = v879.n128_u64[1];
      v671 = (int8x16_t)vmlaq_n_f64(v670, v665, v879.n128_f64[0]);
      v672 = v879.n128_f64[0] + v662 * *(double *)v882.i64 + v663 * v876;
      v673 = v668.f64[1];
      v674 = vextq_s8(v666, v666, 8uLL).u64[0];
      v675 = vextq_s8(v671, v671, 8uLL).u64[0];
      v676 = vmul_f32(*(float32x2_t *)((char *)&v925 + 8), *(float32x2_t *)((char *)&v925 + 8));
      v434 = v856;
      if ((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v924 * *(float *)v924)
                                                                 + (float)(*((float *)v924 + 1) * *((float *)v924 + 1)))
                                                         + (float)(*(float *)&v924[1] * *(float *)&v924[1]))
                                                 + (float)(*((float *)&v924[1] + 1) * *((float *)&v924[1] + 1)))
                                         + (float)(*(float *)&v925 * *(float *)&v925))
                                 + (float)(*((float *)&v925 + 1) * *((float *)&v925 + 1)))
                         + v676.f32[0])
                 + v676.f32[1]) >= 0.00000001)
        v435 = v888;
      else
        v435 = v856;
      if ((_DWORD)v845)
      {
        v425 = v878;
        v426 = v875;
        v427 = v883.n128_u64[0];
        v419 = v880.f64[0];
        v420 = v877;
        v421 = v881.n128_u64[0];
        v422 = v882.i64[0];
        v423 = v876;
        v424 = v879.n128_f64[0];
      }
      else
      {
        v870 = v675;
        v872 = v674;
        v874 = v671.i64[0];
        v886 = v668.f64[0];
        v889 = v666.i64[0];
        v694.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ - rep;
        v695 = *(_QWORD *)(v13 + 3400);
        if (v695)
        {
          v696 = (5 * v694.__d_.__rep_ + 95 * *(_QWORD *)(v13 + 3408)) / 0x64uLL;
          *(_QWORD *)(v13 + 3408) = v696;
          v697 = v694.__d_.__rep_ - v696;
          v698 = v696 > v694.__d_.__rep_;
          v699 = v696 - v694.__d_.__rep_;
          if (!v698)
            v699 = v697;
          if (v695 != 1)
            v699 = (5 * v699 + 95 * *(_QWORD *)(v13 + 3416)) / 0x64;
        }
        else
        {
          v699 = 0;
          *(std::chrono::steady_clock::time_point *)(v13 + 3408) = v694;
        }
        v425 = v878;
        *(_QWORD *)(v13 + 3416) = v699;
        *(_QWORD *)(v13 + 3400) = v695 + 1;
        v671.i64[0] = v874;
        v426 = v875;
        v427 = v883.n128_u64[0];
        v419 = v880.f64[0];
        v420 = v877;
        v421 = v881.n128_u64[0];
        v422 = v882.i64[0];
        v423 = v876;
        v424 = v879.n128_f64[0];
        v668.f64[0] = v886;
        v666.i64[0] = v889;
        v675 = v870;
        v674 = v872;
      }
      goto LABEL_385;
    }
    sub_20EDE9E68(v895);
    if (**((int **)v895[0] + 7) > 3
      || (v866 = *((unsigned __int8 *)v895[0] + 72),
          v655 = sub_20E8C31DC((uint64_t)v895[0], "OSLogSurrogateAppender", 1, 0),
          ((v655 == 0) & ~(v866 != 0)) != 0))
    {
LABEL_384:
      *(double *)v666.i64 = v878;
      *(double *)&v674 = v875;
      v667 = v883.n128_f64[0];
      v668.f64[0] = v880.f64[0];
      *(double *)&v427 = v418;
      v673 = v877;
      v426 = v417;
      v669 = v881.n128_f64[0];
      v671.i64[0] = v882.i64[0];
      *(double *)&v675 = v876;
      v425 = v416;
      v672 = v879.n128_f64[0];
      v434 = v856;
      v435 = v856;
      v419 = v885;
      v420 = v873;
      v421 = *(_QWORD *)&v871;
      v423 = v868;
      v422 = v869;
LABEL_385:
      v433 = v424;
      v748 = v674;
      v428 = v668.f64[0];
      v429 = v673;
      v418 = v667;
      v430 = v669;
      v417 = *(double *)&v748;
      v431 = v671.i64[0];
      v432 = *(double *)&v675;
      v424 = v672;
      v416 = *(double *)v666.i64;
      v865 = v459;
      goto LABEL_123;
    }
    *(_QWORD *)&v896.f64[0] = v895;
    *(std::chrono::steady_clock::time_point *)&v896.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
    v897 = *(double *)&std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v898) = 3;
    v899 = COERCE_DOUBLE("unknown file");
    LODWORD(v900) = 645;
    v901 = COERCE_DOUBLE("unknown function");
    v902 = 0.0;
    v903 = 0.0;
    v656 = **(_QWORD **)&v896.f64[0];
    v859 = **(_QWORD **)&v896.f64[0];
    if (*(char *)(**(_QWORD **)&v896.f64[0] + 39) < 0)
    {
      v658 = *(const char **)(v656 + 16);
      v657 = *(_QWORD *)(v656 + 24);
      v862 = **(_QWORD **)&v896.f64[0] + 16;
      v700 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v700 & 1) != 0)
        goto LABEL_302;
    }
    else
    {
      v657 = *(unsigned __int8 *)(**(_QWORD **)&v896.f64[0] + 39);
      v658 = (const char *)(**(_QWORD **)&v896.f64[0] + 16);
      v862 = (uint64_t)v658;
      v659 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v659 & 1) != 0)
        goto LABEL_302;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&v910);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v910);
      if (LOBYTE(v913) && v912 < 0)
        operator delete(v910);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
      v81 = (int8x16_t *)&xmmword_2102DB000;
    }
LABEL_302:
    if (byte_254A4A4F8[23] >= 0)
      v701 = byte_254A4A4F8;
    else
      v701 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v702 = byte_254A4A4F8[23];
    else
      v702 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v701, v658);
    if (v702 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    __srca = v658;
    if (v702 >= 0x17)
    {
      v704 = (v702 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v702 | 7) != 0x17)
        v704 = v702 | 7;
      v705 = v704 + 1;
      v703 = (__int128 *)operator new(v704 + 1);
      *(_QWORD *)&v916 = v705 | 0x8000000000000000;
      *(_QWORD *)&v915 = v703;
      *((_QWORD *)&v915 + 1) = v702;
      v81 = (int8x16_t *)&xmmword_2102DB000;
    }
    else
    {
      BYTE7(v916) = v702;
      v703 = &v915;
      if (!v702)
      {
LABEL_316:
        *((_BYTE *)v703 + v702) = 0;
        BYTE8(v916) = 1;
        if (v657 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        v13 = v847;
        if (v657 >= 0x17)
        {
          v708 = (v657 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v657 | 7) != 0x17)
            v708 = v657 | 7;
          v709 = v708 + 1;
          v706 = operator new(v708 + 1);
          v918 = v709 | 0x8000000000000000;
          __p[0] = v706;
          __p[1] = (void *)v657;
        }
        else
        {
          HIBYTE(v918) = v657;
          v706 = __p;
          if (!v657)
          {
            LOBYTE(__p[0]) = 0;
            v919 = 1;
            v707 = object;
            if ((SHIBYTE(v918) & 0x80000000) == 0)
              goto LABEL_320;
            goto LABEL_326;
          }
        }
        memmove(v706, __srca, v657);
        *((_BYTE *)v706 + v657) = 0;
        v919 = 1;
        v707 = object;
        if ((SHIBYTE(v918) & 0x80000000) == 0)
        {
LABEL_320:
          if (!BYTE8(v916))
            goto LABEL_329;
          goto LABEL_327;
        }
LABEL_326:
        operator delete(__p[0]);
        if (!BYTE8(v916))
        {
LABEL_329:
          if (object)
            os_release(object);
          if (v655 && *(_QWORD *)(v655 + 24))
          {
            v710 = _os_log_pack_size();
            v711 = (std::__shared_weak_count_vtbl *)operator new(v710, (std::align_val_t)8uLL);
            v712 = (std::__shared_weak_count *)operator new();
            v713 = v712;
            v712->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v712->__shared_owners_;
            v712->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v712->__shared_weak_owners_ = 0;
            v712[1].__vftable = v711;
            object = v711;
            *(_QWORD *)&v915 = v711;
            *((_QWORD *)&v915 + 1) = v712;
            do
              v715 = __ldxr(p_shared_owners);
            while (__stxr(v715 + 1, p_shared_owners));
            v916 = 0uLL;
            __p[0] = 0;
            do
              v716 = __ldaxr(p_shared_owners);
            while (__stlxr(v716 - 1, p_shared_owners));
            if (!v716)
            {
              ((void (*)(std::__shared_weak_count *))v712->__on_zero_shared)(v712);
              std::__shared_weak_count::__release_weak(v713);
            }
            v717 = object;
            v718 = _os_log_pack_fill();
            *(_DWORD *)v718 = 67109376;
            *(_DWORD *)(v718 + 4) = v845;
            *(_WORD *)(v718 + 8) = 1024;
            *(_DWORD *)(v718 + 10) = v888;
            v719 = (char *)operator new();
            v720 = *(unsigned __int8 *)(v859 + 39);
            v721 = *(_QWORD *)(v859 + 16);
            v722 = *(_QWORD *)(v859 + 24);
            v723 = v916;
            *(_OWORD *)(v719 + 8) = v915;
            if ((v720 & 0x80u) != 0)
              v720 = v722;
            else
              v721 = v862;
            *(_QWORD *)v719 = v717;
            v915 = 0uLL;
            *(_OWORD *)(v719 + 24) = v723;
            v916 = 0uLL;
            *((_QWORD *)v719 + 5) = v721;
            *((_QWORD *)v719 + 6) = v720;
            v719[56] = 1;
            *(_QWORD *)&v890 = 0;
            v910 = v719;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v655 + 24) + 40))(*(_QWORD *)(v655 + 24), &v910);
            v13 = v847;
            v724 = v910;
            v910 = 0;
            if (v724)
            {
              v725 = (std::__shared_weak_count *)*((_QWORD *)v724 + 4);
              if (v725)
              {
                v726 = (unint64_t *)&v725->__shared_owners_;
                do
                  v727 = __ldaxr(v726);
                while (__stlxr(v727 - 1, v726));
                if (!v727)
                {
                  ((void (*)(std::__shared_weak_count *))v725->__on_zero_shared)(v725);
                  std::__shared_weak_count::__release_weak(v725);
                }
              }
              v728 = (std::__shared_weak_count *)*((_QWORD *)v724 + 2);
              if (v728)
              {
                v729 = (unint64_t *)&v728->__shared_owners_;
                do
                  v730 = __ldaxr(v729);
                while (__stlxr(v730 - 1, v729));
                if (!v730)
                {
                  ((void (*)(std::__shared_weak_count *))v728->__on_zero_shared)(v728);
                  std::__shared_weak_count::__release_weak(v728);
                }
              }
              MEMORY[0x212BC6398](v724, 0x10F0C40B62ED6C6);
              v731 = v890;
              *(_QWORD *)&v890 = 0;
              if (v731)
              {
                v732 = *(std::__shared_weak_count **)(v731 + 32);
                if (v732)
                {
                  v733 = (unint64_t *)&v732->__shared_owners_;
                  do
                    v734 = __ldaxr(v733);
                  while (__stlxr(v734 - 1, v733));
                  if (!v734)
                  {
                    ((void (*)(std::__shared_weak_count *))v732->__on_zero_shared)(v732);
                    std::__shared_weak_count::__release_weak(v732);
                  }
                }
                v735 = *(std::__shared_weak_count **)(v731 + 16);
                if (v735)
                {
                  v736 = (unint64_t *)&v735->__shared_owners_;
                  do
                    v737 = __ldaxr(v736);
                  while (__stlxr(v737 - 1, v736));
                  if (!v737)
                  {
                    ((void (*)(std::__shared_weak_count *))v735->__on_zero_shared)(v735);
                    std::__shared_weak_count::__release_weak(v735);
                  }
                }
                MEMORY[0x212BC6398](v731, 0x10F0C40B62ED6C6);
              }
            }
            v738 = (std::__shared_weak_count *)*((_QWORD *)&v916 + 1);
            if (*((_QWORD *)&v916 + 1))
            {
              v739 = (unint64_t *)(*((_QWORD *)&v916 + 1) + 8);
              do
                v740 = __ldaxr(v739);
              while (__stlxr(v740 - 1, v739));
              if (!v740)
              {
                ((void (*)(std::__shared_weak_count *))v738->__on_zero_shared)(v738);
                std::__shared_weak_count::__release_weak(v738);
              }
            }
            v741 = (std::__shared_weak_count *)*((_QWORD *)&v915 + 1);
            if (*((_QWORD *)&v915 + 1))
            {
              v742 = (unint64_t *)(*((_QWORD *)&v915 + 1) + 8);
              do
                v743 = __ldaxr(v742);
              while (__stlxr(v743 - 1, v742));
              if (!v743)
              {
                ((void (*)(std::__shared_weak_count *))v741->__on_zero_shared)(v741);
                std::__shared_weak_count::__release_weak(v741);
              }
            }
          }
          else
          {
            os_log_type_enabled(v707, OS_LOG_TYPE_INFO);
            LODWORD(object) = 67109376;
            HIDWORD(object) = v845;
            LOWORD(v915) = 1024;
            *(_DWORD *)((char *)&v915 + 2) = v888;
            v744 = (void *)_os_log_send_and_compose_impl();
            if (v744)
              free(v744);
          }
          if (v866)
          {
            sub_20E8C003C((uint64_t)&v896, "Problem solving the system at scale level %u at iteration %u", v845, v888);
            sub_20E863570((uint64_t)&v896);
          }
          sub_20E863570((uint64_t)&v896);
          v745 = *(std::__shared_weak_count **)&v903;
          if (v903 != 0.0)
          {
            v746 = (unint64_t *)(*(_QWORD *)&v903 + 8);
            do
              v747 = __ldaxr(v746);
            while (__stlxr(v747 - 1, v746));
            if (!v747)
            {
              ((void (*)(std::__shared_weak_count *))v745->__on_zero_shared)(v745);
              std::__shared_weak_count::__release_weak(v745);
            }
          }
          goto LABEL_384;
        }
LABEL_327:
        if (SBYTE7(v916) < 0)
          operator delete((void *)v915);
        goto LABEL_329;
      }
    }
    memmove(v703, v701, v702);
    goto LABEL_316;
  }
LABEL_393:
  std::chrono::steady_clock::now();
  kdebug_trace();
  v749 = v877 * v879.n128_f64[0] - v881.n128_f64[0] * v876;
  v750 = v876 * v880.f64[0] - v877 * *(double *)v882.i64;
  v751 = v883.n128_f64[0] * v750
       + v878 * v749
       - v875 * (v879.n128_f64[0] * v880.f64[0] - v881.n128_f64[0] * *(double *)v882.i64);
  if (fabs(v751) > 0.00000001)
  {
    v752 = 1.0 / v751;
    v753.f64[0] = v876;
    *(_QWORD *)&v753.f64[1] = v881.n128_u64[0];
    *(_QWORD *)&v754.f64[0] = v883.n128_u64[0];
    v754.f64[1] = v875;
    *(_QWORD *)&v755.f64[0] = v879.n128_u64[0];
    v755.f64[1] = v877;
    v756 = vmulq_f64(v753, v754);
    v754.f64[0] = v875;
    *(_QWORD *)&v754.f64[1] = v883.n128_u64[0];
    v757 = vmulq_f64(v755, v754);
    v755.f64[0] = v878;
    v755.f64[1] = v875;
    v905 = vmulq_n_f64(vsubq_f64(v756, v757), v752);
    v904 = v749 * v752;
    v906 = (v881.n128_f64[0] * *(double *)v882.i64 - v879.n128_f64[0] * v880.f64[0]) * v752;
    *(_QWORD *)&v758.f64[0] = v879.n128_u64[0];
    v758.f64[1] = v880.f64[0];
    v759.f64[0] = v878;
    *(_QWORD *)&v759.f64[1] = v883.n128_u64[0];
    *(_QWORD *)&v760.f64[0] = v882.i64[0];
    *(_QWORD *)&v760.f64[1] = v881.n128_u64[0];
    v761 = vmulq_f64(v758, v759);
    *(_QWORD *)&v759.f64[0] = v883.n128_u64[0];
    v759.f64[1] = v878;
    v907 = vmulq_n_f64(vsubq_f64(v761, vmulq_f64(v760, v759)), v752);
    *(_QWORD *)&v761.f64[0] = v882.i64[0];
    v761.f64[1] = v877;
    v908 = v750 * v752;
    v762.f64[0] = v875;
    v762.f64[1] = v878;
    v763 = vmulq_f64(v761, v762);
    v761.f64[0] = v876;
    v761.f64[1] = v880.f64[0];
    v909 = vmulq_n_f64(vsubq_f64(v763, vmulq_f64(v761, v755)), v752);
  }
  kdebug_trace();
  sub_20EDE9858(*(_QWORD *)(v13 + 2024), *(_QWORD *)(v13 + 2000), a4, (float64x2_t *)&v904, a1 + 128, *(size_t **)(v13 + 1952));
  kdebug_trace();
  v764 = v13 + 2552;
  if ((sub_20EDA7D70(v13 + 2552, *(_QWORD *)(v13 + 1904), 4u, *(_QWORD *)(v13 + 2000)) & 1) == 0)
    return 0;
  v765 = *(double *)(v13 + 3360);
  v766 = *(double *)(v13 + 3368);
  v767 = *(double *)(v13 + 3384);
  v768 = *(double *)(v13 + 3392);
  v769 = v765 * v768 - v766 * v767;
  v770 = *(double *)(v13 + 3352);
  v771 = *(double *)(v13 + 3376);
  v772 = v767 * v770 - v765 * v771;
  v773 = *(double *)(v13 + 3328);
  v774 = *(double *)(v13 + 3336);
  v775 = *(double *)(v13 + 3344);
  v776 = v769 * v773 - v774 * (v768 * v770 - v766 * v771) + v772 * v775;
  if (fabs(v776) > 0.00000001)
  {
    v777 = 1.0 / v776;
    v896.f64[0] = v769 * v777;
    v896.f64[1] = (v767 * v775 - v768 * v774) * v777;
    v897 = (v766 * v774 - v765 * v775) * v777;
    v898 = (v766 * v771 - v768 * v770) * v777;
    v899 = (v768 * v773 - v771 * v775) * v777;
    v900 = (v770 * v775 - v766 * v773) * v777;
    v901 = v772 * v777;
    v902 = (v771 * v774 - v767 * v773) * v777;
    v903 = (v765 * v773 - v770 * v774) * v777;
  }
  sub_20EDD4F9C((uint64_t)&v926, *(_QWORD *)(*(_QWORD *)(v13 + 2024) + 32), *(_QWORD *)(*(_QWORD *)(v13 + 2024) + 48));
  bzero(*(void **)&v931[8], 4 * v929 * *((_QWORD *)&v928 + 1));
  sub_20EDB4A1C((uint64_t)&object, *(_QWORD *)(*(_QWORD *)(v13 + 2000) + 32), *(_QWORD *)(*(_QWORD *)(v13 + 2000) + 48));
  sub_20EDE9858((uint64_t)&v926, (uint64_t)&object, a4, &v896, a1 + 128, *(size_t **)(v13 + 1952));
  sub_20EDE9A8C((double *)&v910, v13 + 2552, &v926, v778, v779, v780, v781, v782);
  sub_20EDE9A8C((double *)v924, v13 + 2552, *(_QWORD **)(v13 + 2024), v783, v784, v785, v786, v787);
  v893 = 0uLL;
  v894 = 0;
  if (*((double *)&v925 + 1) <= v913)
  {
    sub_20E86811C(&v893, (char *)v910, *(char **)v911, (uint64_t)(*(_QWORD *)v911 - (_QWORD)v910) >> 3);
    v808 = *(_QWORD *)(v13 + 2024);
    v890 = *(_OWORD *)&v931[8];
    if (*(_QWORD *)&v931[16])
    {
      v809 = (unint64_t *)(*(_QWORD *)&v931[16] + 8);
      do
        v810 = __ldxr(v809);
      while (__stxr(v810 + 1, v809));
    }
    sub_20EDB585C(v808, &v890, v928, *((unint64_t *)&v928 + 1), v929, v927, *((uint64_t *)&v927 + 1), BYTE8(v926), (uint64_t *)&v930 + 1);
    v811 = (std::__shared_weak_count *)*((_QWORD *)&v890 + 1);
    if (*((_QWORD *)&v890 + 1))
    {
      v812 = (unint64_t *)(*((_QWORD *)&v890 + 1) + 8);
      do
        v813 = __ldaxr(v812);
      while (__stlxr(v813 - 1, v812));
      if (!v813)
      {
        ((void (*)(std::__shared_weak_count *))v811->__on_zero_shared)(v811);
        std::__shared_weak_count::__release_weak(v811);
      }
    }
  }
  else
  {
    sub_20E86811C(&v893, (char *)v924[0], (char *)v924[1], ((char *)v924[1] - (char *)v924[0]) >> 3);
    v788 = 1.0;
    if (v879.n128_f64[0] != 0.0)
      v788 = 1.0 / v879.n128_f64[0];
    *(_QWORD *)&_Q4.f64[0] = v882.i64[0];
    *(_QWORD *)&v789.f64[0] = v883.n128_u64[0];
    v791.f64[0] = v877;
    _Q4.f64[1] = v876;
    *(_QWORD *)&v791.f64[1] = v881.n128_u64[0];
    v789.f64[1] = v880.f64[0];
    v792.f64[0] = v878;
    v792.f64[1] = v875;
    _Q1 = vmulq_n_f64(v792, v788);
    _Q2 = vmulq_n_f64(v789, v788);
    _Q3 = vmulq_n_f64(v791, v788);
    _Q0 = vmulq_n_f64(_Q4, v788);
    *(_QWORD *)(v841 + 208) = 0x3FF0000000000000;
    *(float64x2_t *)(v841 + 144) = _Q1;
    *(float64x2_t *)(v841 + 160) = _Q2;
    *(float64x2_t *)(v841 + 176) = _Q3;
    *(float64x2_t *)(v841 + 192) = _Q0;
    v797 = *(float64x2_t *)(v841 + 72);
    _D6 = *(_QWORD *)(v841 + 112);
    v799 = *(float64x2_t *)(v841 + 96);
    _D16 = *(double *)(v841 + 136);
    v801 = *(float64x2_t *)(v841 + 120);
    v802 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v797, _Q1.f64[0]), v799, _Q1, 1), v801, _Q2.f64[0]);
    __asm { FMLA            D19, D6, V1.D[1] }
    v804 = vmlad_n_f64(_D19, _D16, _Q2.f64[0]);
    v805 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v797, _Q2, 1), v799, _Q3.f64[0]), v801, _Q3, 1);
    __asm
    {
      FMLA            D2, D16, V3.D[1]
      FMLA            D4, D6, V0.D[1]
    }
    *a5 = v802;
    a5[1].f64[0] = v804;
    *(float64x2_t *)((char *)a5 + 24) = v805;
    a5[2].f64[1] = _Q2.f64[0];
    a5[3] = vaddq_f64(v801, vmlaq_laneq_f64(vmulq_n_f64(v797, _Q0.f64[0]), v799, _Q0, 1));
    a5[4].f64[0] = _D16 + _Q4.f64[0];
  }
  kdebug_trace();
  sub_20EDE9BFC(*(unint64_t **)(v13 + 1904), *(_QWORD *)(v13 + 2024), *(_QWORD *)(v13 + 2000), v13 + 2928, v814, v815, v816, v817, v818);
  kdebug_trace();
  kdebug_trace();
  v823 = *(_QWORD **)(v13 + 2024);
  v890 = 0uLL;
  v891 = 0;
  v824 = (const void *)v893;
  v825 = *((_QWORD *)&v893 + 1) - v893;
  if (*((_QWORD *)&v893 + 1) != (_QWORD)v893)
  {
    if (v825 < 0)
      sub_20E867F44();
    *(_QWORD *)&v890 = operator new(*((_QWORD *)&v893 + 1) - v893);
    *((_QWORD *)&v890 + 1) = v890;
    v826 = v890 + 8 * (v825 >> 3);
    v891 = v826;
    memcpy((void *)v890, v824, v825);
    *((_QWORD *)&v890 + 1) = v826;
  }
  v892 = 1;
  sub_20EDE5A7C(v895, v764, v823, (uint64_t)&v890, *(double *)(a1 + 8), v819, v820, v821, v822);
  v806 = *(_DWORD *)v895[0] >= vcvtad_u64_f64(*(double *)(a1 + 24)* (double)(*(_DWORD *)(a1 + 32) * *(_DWORD *)(a1 + 32)- *((_DWORD *)v895[0] + 1)))&& *(_DWORD *)v895[0] >= *(_DWORD *)(a1 + 16);
  operator delete(v895[0]);
  if (v892 && (_QWORD)v890)
  {
    *((_QWORD *)&v890 + 1) = v890;
    operator delete((void *)v890);
  }
  kdebug_trace();
  v828 = *(void **)(v847 + 2848);
  if (v828)
  {
    *(_QWORD *)(v847 + 2856) = v828;
    operator delete(v828);
    *(_QWORD *)(v847 + 2848) = 0;
    *(_QWORD *)(v847 + 2856) = 0;
    *(_QWORD *)(v847 + 2864) = 0;
  }
  *(_OWORD *)(v847 + 2848) = v893;
  *(_QWORD *)(v847 + 2864) = v894;
  *(_BYTE *)(v847 + 3465) = v806;
  if (v924[0])
  {
    v924[1] = v924[0];
    operator delete(v924[0]);
  }
  if (v910)
  {
    *(_QWORD *)v911 = v910;
    operator delete(v910);
  }
  object = &off_24C9AFD78;
  if (v922)
  {
    v923 = v922;
    operator delete(v922);
  }
  v829 = v921;
  if (v921)
  {
    v830 = (unint64_t *)&v921->__shared_owners_;
    do
      v831 = __ldaxr(v830);
    while (__stlxr(v831 - 1, v830));
    if (!v831)
    {
      ((void (*)(std::__shared_weak_count *))v829->__on_zero_shared)(v829);
      std::__shared_weak_count::__release_weak(v829);
    }
  }
  v832 = v920;
  if (v920)
  {
    v833 = (unint64_t *)&v920->__shared_owners_;
    do
      v834 = __ldaxr(v833);
    while (__stlxr(v834 - 1, v833));
    if (!v834)
    {
      ((void (*)(std::__shared_weak_count *))v832->__on_zero_shared)(v832);
      std::__shared_weak_count::__release_weak(v832);
    }
  }
  *(_QWORD *)&v926 = &off_24C9E9690;
  if (v932[1])
  {
    *(void **)&v933 = v932[1];
    operator delete(v932[1]);
  }
  v835 = (std::__shared_weak_count *)v932[0];
  if (v932[0])
  {
    v836 = (unint64_t *)((char *)v932[0] + 8);
    do
      v837 = __ldaxr(v836);
    while (__stlxr(v837 - 1, v836));
    if (!v837)
    {
      ((void (*)(std::__shared_weak_count *))v835->__on_zero_shared)(v835);
      std::__shared_weak_count::__release_weak(v835);
    }
  }
  v838 = *(std::__shared_weak_count **)&v931[16];
  if (*(_QWORD *)&v931[16])
  {
    v839 = (unint64_t *)(*(_QWORD *)&v931[16] + 8);
    do
      v840 = __ldaxr(v839);
    while (__stlxr(v840 - 1, v839));
    if (!v840)
    {
      ((void (*)(std::__shared_weak_count *))v838->__on_zero_shared)(v838);
      std::__shared_weak_count::__release_weak(v838);
    }
  }
  return v806;
}

void sub_20EDE95F0(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x2F8]))
  {
    if (SLOBYTE(STACK[0x2F7]) < 0)
      operator delete((void *)STACK[0x2E0]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_20EDE9630(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;
  void *v4;

  sub_20E86665C((uint64_t)&STACK[0x200]);
  v2 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v2;
    operator delete(v2);
    v3 = (void *)STACK[0x390];
    if (!STACK[0x390])
    {
LABEL_3:
      v4 = (void *)STACK[0x2E0];
      if (!STACK[0x2E0])
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v3 = (void *)STACK[0x390];
    if (!STACK[0x390])
      goto LABEL_3;
  }
  STACK[0x398] = (unint64_t)v3;
  operator delete(v3);
  v4 = (void *)STACK[0x2E0];
  if (!STACK[0x2E0])
  {
LABEL_5:
    sub_20E8E481C(&STACK[0x300]);
    sub_20EDB59DC(&STACK[0x3B0]);
    _Unwind_Resume(a1);
  }
LABEL_4:
  STACK[0x2E8] = (unint64_t)v4;
  operator delete(v4);
  goto LABEL_5;
}

void sub_20EDE9728(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_20EDE973C(_Unwind_Exception *a1)
{
  sub_20E86E8C4((uint64_t *)&STACK[0x2E0]);
  sub_20E86E8C4((uint64_t *)&STACK[0x200]);
  sub_20E86E658((uint64_t)&STACK[0x300]);
  sub_20E863714((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_20EDE9768(_Unwind_Exception *a1)
{
  sub_20E86E658((uint64_t)&STACK[0x300]);
  sub_20E863714((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_20EDE9784(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_20EDE97B0(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x31F]) < 0)
    operator delete((void *)STACK[0x308]);
  if (STACK[0x300])
    os_release((void *)STACK[0x300]);
  sub_20E863714((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_20EDE983C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL sub_20EDE9858(uint64_t a1, uint64_t a2, _QWORD *a3, float64x2_t *a4, uint64_t a5, size_t *a6)
{
  float32x4_t v12;
  float v13;
  BOOL v14;
  char v15;
  BOOL v16;
  int v17;
  _BOOL8 result;
  size_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  _OWORD v27[2];
  float v28;

  bzero(*(void **)(a2 + 88), *(_QWORD *)(a2 + 40) * *(_QWORD *)(a2 + 48));
  bzero(*(void **)(a1 + 88), 4 * *(_QWORD *)(a1 + 48) * *(_QWORD *)(a1 + 40));
  v12 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a4[2]), a4[3]);
  v27[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a4), a4[1]);
  v27[1] = v12;
  v13 = a4[4].f64[0];
  v28 = v13;
  if (*(_QWORD *)a5 == *(_QWORD *)(a5 + 8) || **(_QWORD **)a5 == *(_QWORD *)(*(_QWORD *)a5 + 8))
  {
    result = sub_2100E89FC((_QWORD *)a1, a3, (float *)v27, a2);
    if (!a6[11])
      return result;
  }
  else
  {
    if (*(_BYTE *)(a5 + 256))
      v14 = *(_BYTE *)(a5 + 232) == 0;
    else
      v14 = 1;
    v15 = !v14;
    if (*(_BYTE *)(a5 + 257))
      v16 = *(_BYTE *)(a5 + 248) == 0;
    else
      v16 = 1;
    v17 = !v16;
    if ((v15 & 1) != 0 || v17)
    {
      result = sub_2100E79C8((uint64_t)a3);
      if (!a6[11])
        return result;
    }
    else
    {
      result = sub_2100E8238((uint64_t)a3);
      if (!a6[11])
        return result;
    }
  }
  v19 = a6[6];
  if (result)
  {
    if (v19)
    {
      v20 = a6[4];
      if (v20)
      {
        v21 = 0;
        v22 = 1;
        do
        {
          if (v22)
          {
            v23 = 0;
            v24 = *(_QWORD *)(a6[15] + 8 * v21);
            v25 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v21);
            do
            {
              if (!*(_BYTE *)(v24 + v23))
              {
                *(_BYTE *)(v25 + v23) = 0;
                v20 = a6[4];
              }
              ++v23;
            }
            while (v23 < v20);
            v19 = a6[6];
            v22 = v20;
          }
          ++v21;
        }
        while (v21 < v19);
      }
    }
  }
  else if (v19)
  {
    v26 = 0;
    do
    {
      memcpy(*(void **)(*(_QWORD *)(a2 + 120) + 8 * v26), *(const void **)(a6[15] + 8 * v26), a6[4]);
      ++v26;
    }
    while (v26 < a6[6]);
  }
  return 1;
}

void sub_20EDE9A8C(double *a1, uint64_t a2, _QWORD *a3, double a4, double a5, double a6, double a7, double a8)
{
  double *v9;
  double *v10;
  unint64_t v11;
  double v12;
  double *v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  double v17;
  int64_t v18;
  char *v19;
  char *v20;
  double *v21;
  double *v22;
  double v23[9];

  v23[0] = 1.0;
  memset(&v23[1], 0, 24);
  v23[4] = 1.0;
  memset(&v23[5], 0, 24);
  v23[8] = 1.0;
  sub_20EDED5D4(&v21, a2, a3, v23, a4, a5, a6, a7, a8);
  v10 = v21;
  v9 = v22;
  if (v21 == v22)
  {
    *a1 = 0.0;
    a1[1] = 0.0;
    a1[2] = 0.0;
    a1[3] = 0.0;
    if (v10)
    {
LABEL_9:
      v22 = v10;
      operator delete(v10);
    }
  }
  else
  {
    v11 = (char *)v22 - (char *)v21 - 8;
    v12 = 0.0;
    v13 = v21;
    if (v11 < 8)
      goto LABEL_16;
    v14 = (v11 >> 3) + 1;
    v13 = &v21[v14 & 0x3FFFFFFFFFFFFFFELL];
    v15 = v21 + 1;
    v16 = v14 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      v12 = v12 + *(v15 - 1) + *v15;
      v15 += 2;
      v16 -= 2;
    }
    while (v16);
    if (v14 != (v14 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_16:
      do
      {
        v17 = *v13++;
        v12 = v12 + v17;
      }
      while (v13 != v22);
    }
    *a1 = 0.0;
    a1[1] = 0.0;
    a1[2] = 0.0;
    v18 = (char *)v9 - (char *)v10;
    if ((char *)v9 - (char *)v10 < 0)
      sub_20E867F44();
    v19 = (char *)operator new((char *)v9 - (char *)v10);
    *(_QWORD *)a1 = v19;
    v20 = &v19[8 * (v18 >> 3)];
    *((_QWORD *)a1 + 2) = v20;
    memcpy(v19, v10, v18);
    *((_QWORD *)a1 + 1) = v20;
    a1[3] = v12;
    if (v10)
      goto LABEL_9;
  }
}

void sub_20EDE9BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void *v12;
  void *v13;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
    v13 = __p;
    if (!__p)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v13 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EDE9BFC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8, float a9)
{
  int v10;
  unint64_t v11;
  double v17;
  uint64_t v18;
  uint64_t v19;
  float32x2_t v20;
  float v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  float *v28;
  _BYTE *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned int v33;
  float v34;
  uint64_t result;
  double v36;
  double *v37;
  int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  int v45;
  char v46;
  float v47;
  float v48;
  float v49[2];
  float32x2_t v50;
  uint64_t v51;

  v10 = 0;
  v11 = 0;
  v51 = *MEMORY[0x24BDAC8D0];
  __asm { FMOV            V7.2S, #1.0 }
  v41 = HIDWORD(_D7);
  do
  {
    v17 = (double)a1[6] * 0.25;
    v18 = (v17 * (double)(int)(v11 >> 2));
    v19 = (v17 * (double)(int)((v11 >> 2) + 1));
    v20 = 0;
    v21 = 0.0;
    if (v18 >= v19)
    {
      v25 = 0.0;
      v26 = 0.0;
    }
    else
    {
      v22 = (double)a1[4] * 0.25;
      v23 = (v22 * (double)(v11 & 3));
      v24 = (v22 * (double)(int)((v11 & 3) + 1));
      v25 = 0.0;
      v26 = 0.0;
      if (v23 < v24)
      {
        v27 = v24 - v23;
        v20 = 0;
        do
        {
          v28 = (float *)(*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v18) + 4 * v23);
          v29 = (_BYTE *)(*(_QWORD *)(a1[15] + 8 * v18) + v23);
          v30 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 120) + 8 * v18) + v23);
          v31 = v27;
          do
          {
            if (*v30++)
            {
              LOBYTE(a9) = *v29;
              *(float *)&v33 = (float)LODWORD(a9) * 0.0039216;
              v34 = *v28 * 0.0039216;
              v26 = v26 + (float)(*(float *)&v33 * *(float *)&v33);
              v20 = vadd_f32(v20, (float32x2_t)__PAIR64__(HIDWORD(_D7), v33));
              a9 = *(float *)&v33 * v34;
              v21 = v21 + a9;
              v25 = v25 + v34;
            }
            ++v28;
            ++v29;
            --v31;
          }
          while (v31);
          ++v18;
        }
        while (v18 != v19);
      }
    }
    v47 = v21;
    v48 = v25;
    v49[0] = v26;
    v49[1] = v20.f32[0];
    v50 = v20;
    v46 = 108;
    v44 = 1;
    v45 = 2;
    v43 = -1;
    v42 = 0x100000001;
    result = sub_20E8344CC(&v42, (uint64_t)&v46, &v45, &v44, v49, &v45, (char *)&v47, &v45, &v43);
    HIDWORD(_D7) = v41;
    if (!v43)
    {
      v36 = v48 * 255.0;
      ++v10;
      v37 = (double *)(a4 + 16 * v11);
      *v37 = v47;
      v37[1] = v36;
    }
    ++v11;
  }
  while (v11 != 16);
  return result;
}

void sub_20EDE9E68(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5F9C0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F9C0))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.odt.image_detection_and_tracking");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5F9B8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5F9C0);
  }
  *a1 = qword_254A5F9B8;
}

void sub_20EDE9F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5F9C0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5F9C0);
  _Unwind_Resume(a1);
}

uint64_t sub_20EDE9F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  float64x2_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  float64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  unint64_t v17;
  unint64_t v18;
  double v19;
  double v21;
  double v23;
  double v25;
  double v33;
  double v36;
  double v39;
  double v40;
  float64x2_t v43;
  _OWORD *v44;
  float64x2_t v45;
  __int128 v46;
  __int128 v47;
  float64x2_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  unint64_t v54;
  double v55;
  float64x2_t v57;
  float64x2_t v59;
  double v60;
  double v62;
  double v64;
  double v69;
  double v72;
  float64x2_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  unint64_t v83;
  unint64_t v84;
  double v85;
  float64x2_t v87;
  float64x2_t v89;
  double v90;
  double v92;
  double v94;
  double v99;
  double v102;
  float64x2_t v104;
  float64x2_t v107;
  float64x2_t v108;
  double v109;
  float64x2_t v110;
  float64x2_t v111;
  double v113;
  float64x2_t v114;
  double v115;
  float64x2_t v116;
  double v118;
  float64x2_t v119;
  double v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  double v126;
  double v127;
  float64x2_t v128;
  double v129;
  double v130;
  double v131;
  double v132;
  _BOOL4 v134;
  int v135;
  float64x2_t v136;
  __int128 v137;
  void *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  void *__p[3];
  char v147;
  float64x2_t v148;
  __int128 v149;
  float64x2_t v150;
  __int128 v151;
  float64x2_t v152;
  __int128 v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count *v155;
  void *v156;
  void *v157;
  float64x2_t v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  float64x2_t v164;
  float64x2_t v165;
  _BYTE v166[32];
  float64x2_t v167;
  double v168;
  _DWORD *v169;

  if (*(_BYTE *)(a1 + 392))
    v6 = *(_QWORD **)(a3 + 576);
  else
    v6 = (_QWORD *)(a3 + 360);
  if (*(_BYTE *)(a1 + 392))
    v7 = a3 + 592;
  else
    v7 = a3 + 504;
  sub_20EDE3124(&v148, a1, v6[4], v6[6], v7, a3 + 688, (uint64_t *)(a3 + 672));
  v8 = v148;
  v148 = 0uLL;
  v9 = *(std::__shared_weak_count **)(a3 + 2056);
  *(float64x2_t *)(a3 + 2048) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v148.f64[1];
  if (!*(_QWORD *)&v148.f64[1])
    goto LABEL_16;
  v13 = (unint64_t *)(*(_QWORD *)&v148.f64[1] + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    (*(void (**)(float64_t))(**(_QWORD **)&v12 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v12));
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v12);
    v15 = *(_QWORD *)(a3 + 3432);
    if (!*(_BYTE *)(v15 + 104))
      goto LABEL_26;
  }
  else
  {
LABEL_16:
    v15 = *(_QWORD *)(a3 + 3432);
    if (!*(_BYTE *)(v15 + 104))
    {
LABEL_26:
      v168 = *(double *)(a3 + 328);
      v43 = *(float64x2_t *)(a3 + 312);
      *(_OWORD *)&v166[16] = *(_OWORD *)(a3 + 296);
      v167 = v43;
      v16 = *(__n128 *)(a3 + 280);
      v165 = *(float64x2_t *)(a3 + 264);
      *(__n128 *)v166 = v16;
      goto LABEL_27;
    }
  }
  if (!*(_BYTE *)(v15 + 240))
    goto LABEL_26;
  v152 = 0u;
  v153 = 0u;
  v150 = 0u;
  v151 = 0u;
  v148 = 0u;
  v149 = 0u;
  sub_20EDE0558(v15, (uint64_t)&v148, (float64x2_t)COERCE_UNSIGNED_INT64(0.75));
  v17 = *(_QWORD *)(a3 + 1832);
  v18 = *(_QWORD *)(a3 + 1840);
  v19 = *(double *)(a3 + 1824);
  if (v17 <= 1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageMatchingScore.cpp", 87, (uint64_t)"width > 1", 9, (uint64_t)&unk_210260559, 0, (void (*)(void **))sub_21023DDB0)|| v18 <= 1&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageMatchingScore.cpp", 88, (uint64_t)"height > 1", 10, (uint64_t)&unk_210260559, 0, (void (*)(void **))sub_21023DDB0)|| v19 <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageMatchingScore.cpp",
         89,
         (uint64_t)"image_width_meters > 0.0",
         24,
         (uint64_t)&unk_210260559,
         0,
         (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_77;
  }
  _D1 = -(v19 / (double)v17 * ((double)v18 + -1.0)) * 0.5;
  v21 = *(double *)(v7 + 16);
  _Q16 = *(float64x2_t *)v7;
  v23 = *(double *)(v7 + 40);
  _Q18 = *(float64x2_t *)(v7 + 24);
  v25 = *(double *)(v7 + 64);
  _Q20 = *(float64x2_t *)(v7 + 48);
  _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, *(double *)v7), v150, *(float64x2_t *)v7, 1), v152, v21);
  _D23 = *((_QWORD *)&v151 + 1);
  __asm { FMLA            D22, D23, V16.D[1] }
  v33 = _D22 + *((double *)&v153 + 1) * v21;
  _Q22 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, _Q18.f64[0]), v150, _Q18, 1), v152, v23);
  __asm { FMLA            D24, D23, V18.D[1] }
  v36 = _D24 + *((double *)&v153 + 1) * v23;
  _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, _Q20.f64[0]), v150, _Q20, 1), v152, v25);
  __asm { FMLA            D4, D23, V20.D[1] }
  v39 = _D4 + *((double *)&v153 + 1) * v25;
  v40 = v19 / (double)v17;
  _Q16.f64[0] = 0.0;
  _Q16.f64[1] = v40;
  __asm
  {
    FMLA            D18, D1, V21.D[1]
    FMLA            D19, D1, V22.D[1]
    FMLA            D0, D1, V3.D[1]
  }
  v165 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v40, _Q21.f64[0]), _Q16, _Q21, 1), (float64x2_t)0, v33);
  *(float64x2_t *)&v166[8] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v40, _Q22.f64[0]), _Q16, _Q22, 1), (float64x2_t)0, v36);
  *(double *)v166 = v33 + _Q18.f64[0];
  *(double *)&v166[24] = v36 + _D19;
  v16.n128_f64[0] = v39 + _D0;
  v167 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v40, _Q3.f64[0]), _Q16, _Q3, 1), (float64x2_t)0, v39);
  v168 = v16.n128_f64[0];
LABEL_27:
  v44 = (_OWORD *)(a3 + 72);
  if (sub_20EDE5C50(a1, a2, *(_QWORD *)a3, v6, &v165, v16))
  {
    sub_20EDEAB5C(a3, (__int128 *)&v165, v7, (float64x2_t *)(a3 + 72), a3 + 16);
    v46 = *(_OWORD *)(a3 + 120);
    *(_OWORD *)(a3 + 200) = *(_OWORD *)(a3 + 104);
    *(_OWORD *)(a3 + 216) = v46;
    v47 = *(_OWORD *)(a3 + 152);
    *(_OWORD *)(a3 + 232) = *(_OWORD *)(a3 + 136);
    *(_OWORD *)(a3 + 248) = v47;
    v48 = *(float64x2_t *)(a3 + 88);
    *(_OWORD *)(a3 + 168) = *v44;
    *(float64x2_t *)(a3 + 184) = v48;
    v49 = *(_QWORD *)(a3 + 3432);
    v48.f64[0] = *(float64_t *)(v49 + 256);
    sub_20EDDFBAC(v49, a3 + 72, (uint64_t)&v148, *(double *)(v49 + 264) + v48.f64[0], v48);
    v50 = v151;
    *(float64x2_t *)(a3 + 104) = v150;
    *(_OWORD *)(a3 + 120) = v50;
    v51 = v153;
    *(float64x2_t *)(a3 + 136) = v152;
    *(_OWORD *)(a3 + 152) = v51;
    v52 = v149;
    *v44 = v148;
    *(_OWORD *)(a3 + 88) = v52;
    v53 = *(_QWORD *)(a3 + 1832);
    v54 = *(_QWORD *)(a3 + 1840);
    v55 = *(double *)(a3 + 1824);
    if ((v53 > 1
       || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageMatchingScore.cpp", 87, (uint64_t)"width > 1", 9, (uint64_t)&unk_210260559, 0, (void (*)(void **))sub_21023DDB0))&& (v54 > 1|| !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageMatchingScore.cpp", 88, (uint64_t)"height > 1", 10, (uint64_t)&unk_210260559, 0, (void (*)(void **))sub_21023DDB0))&& (v55 > 0.0|| !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageMatchingScore.cpp",
             89,
             (uint64_t)"image_width_meters > 0.0",
             24,
             (uint64_t)&unk_210260559,
             0,
             (void (*)(void **))sub_21023DDB0)))
    {
      _D1 = -(v55 / (double)v53 * ((double)v54 + -1.0)) * 0.5;
      v57 = *(float64x2_t *)(a3 + 72);
      _Q4 = *(float64x2_t *)(a3 + 104);
      v59 = *(float64x2_t *)(a3 + 136);
      v60 = *(double *)(v7 + 16);
      _Q7 = *(float64x2_t *)v7;
      v62 = *(double *)(v7 + 40);
      _Q17 = *(float64x2_t *)(v7 + 24);
      v64 = *(double *)(v7 + 64);
      _Q19 = *(float64x2_t *)(v7 + 48);
      _Q20 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v57, *(double *)v7), _Q4, *(float64x2_t *)v7, 1), v59, v60);
      _D23 = *(_QWORD *)(a3 + 128);
      __asm { FMLA            D22, D23, V7.D[1] }
      _Q7.f64[0] = *(float64_t *)(a3 + 160);
      v69 = _D22 + _Q7.f64[0] * v60;
      _Q22 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v57, _Q17.f64[0]), _Q4, _Q17, 1), v59, v62);
      __asm { FMLA            D24, D23, V17.D[1] }
      v72 = _D24 + _Q7.f64[0] * v62;
      _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v57, _Q19.f64[0]), _Q4, _Q19, 1), v59, v64);
      __asm { FMLA            D4, D23, V19.D[1] }
      _Q4.f64[0] = _Q4.f64[0] + _Q7.f64[0] * v64;
      _Q7.f64[0] = v55 / (double)v53;
      _Q17.f64[0] = 0.0;
      _Q17.f64[1] = _Q7.f64[0];
      __asm
      {
        FMLA            D18, D1, V20.D[1]
        FMLA            D19, D1, V22.D[1]
        FMLA            D0, D1, V3.D[1]
      }
      v165 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q7.f64[0], _Q20.f64[0]), _Q17, _Q20, 1), (float64x2_t)0, v69);
      *(float64x2_t *)&v166[8] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q7.f64[0], _Q22.f64[0]), _Q17, _Q22, 1), (float64x2_t)0, v72);
      *(double *)v166 = v69 + _D18;
      *(double *)&v166[24] = v72 + _Q19.f64[0];
      v167 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q7.f64[0], _Q3.f64[0]), _Q17, _Q3, 1), (float64x2_t)0, _Q4.f64[0]);
      v168 = _Q4.f64[0] + _D0;
      *(double *)(a3 + 328) = _Q4.f64[0] + _D0;
      v76 = v167;
      *(_OWORD *)(a3 + 296) = *(_OWORD *)&v166[16];
      *(float64x2_t *)(a3 + 312) = v76;
      v77 = *(_OWORD *)v166;
      *(float64x2_t *)(a3 + 264) = v165;
      *(_OWORD *)(a3 + 280) = v77;
      return 1;
    }
LABEL_77:
    abort();
  }
  v79 = *(_QWORD *)(a3 + 3432);
  if (!*(_BYTE *)(v79 + 104) || !*(_BYTE *)(v79 + 240) || *(_QWORD *)(a3 + 3448) > 1uLL)
  {
LABEL_73:
    v78 = 0;
    *(_QWORD *)(v79 + 112) = 0xBFF0000000000000;
    *(_QWORD *)(v79 + 248) = 0xBFF0000000000000;
    *(_BYTE *)(v79 + 104) = 0;
    *(_OWORD *)(v79 + 88) = 0u;
    *(_OWORD *)(v79 + 72) = 0u;
    *(_OWORD *)(v79 + 56) = 0u;
    *(_OWORD *)(v79 + 176) = 0u;
    *(_OWORD *)(v79 + 192) = 0u;
    *(_OWORD *)(v79 + 208) = 0u;
    *(_OWORD *)(v79 + 224) = 0u;
    *(_BYTE *)(v79 + 240) = 0;
    *(_QWORD *)(v79 + 264) = 0;
    *(_QWORD *)(a3 + 3448) = 0;
    return v78;
  }
  v45.f64[0] = 1.0;
  sub_20EDE0558(v79, (uint64_t)&v148, v45);
  v80 = v151;
  *(float64x2_t *)(a3 + 104) = v150;
  *(_OWORD *)(a3 + 120) = v80;
  v81 = v153;
  *(float64x2_t *)(a3 + 136) = v152;
  *(_OWORD *)(a3 + 152) = v81;
  v82 = v149;
  *v44 = v148;
  *(_OWORD *)(a3 + 88) = v82;
  v83 = *(_QWORD *)(a3 + 1832);
  v84 = *(_QWORD *)(a3 + 1840);
  v85 = *(double *)(a3 + 1824);
  if (v83 <= 1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageMatchingScore.cpp", 87, (uint64_t)"width > 1", 9, (uint64_t)&unk_210260559, 0, (void (*)(void **))sub_21023DDB0)|| v84 <= 1&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageMatchingScore.cpp", 88, (uint64_t)"height > 1", 10, (uint64_t)&unk_210260559, 0, (void (*)(void **))sub_21023DDB0)|| v85 <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageMatchingScore.cpp",
         89,
         (uint64_t)"image_width_meters > 0.0",
         24,
         (uint64_t)&unk_210260559,
         0,
         (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_77;
  }
  _D1 = -(v85 / (double)v83 * ((double)v84 + -1.0)) * 0.5;
  v87 = *(float64x2_t *)(a3 + 72);
  _Q4 = *(float64x2_t *)(a3 + 104);
  v89 = *(float64x2_t *)(a3 + 136);
  v90 = *(double *)(v7 + 16);
  _Q7 = *(float64x2_t *)v7;
  v92 = *(double *)(v7 + 40);
  _Q17 = *(float64x2_t *)(v7 + 24);
  v94 = *(double *)(v7 + 64);
  _Q19 = *(float64x2_t *)(v7 + 48);
  _Q20 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v87, *(double *)v7), _Q4, *(float64x2_t *)v7, 1), v89, v90);
  _D23 = *(_QWORD *)(a3 + 128);
  __asm { FMLA            D22, D23, V7.D[1] }
  _Q7.f64[0] = *(float64_t *)(a3 + 160);
  v99 = _D22 + _Q7.f64[0] * v90;
  _Q22 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v87, _Q17.f64[0]), _Q4, _Q17, 1), v89, v92);
  __asm { FMLA            D24, D23, V17.D[1] }
  v102 = _D24 + _Q7.f64[0] * v92;
  _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v87, _Q19.f64[0]), _Q4, _Q19, 1), v89, v94);
  __asm { FMLA            D4, D23, V19.D[1] }
  _Q4.f64[0] = _Q4.f64[0] + _Q7.f64[0] * v94;
  _Q7.f64[0] = v85 / (double)v83;
  v104.f64[0] = 0.0;
  v104.f64[1] = _Q7.f64[0];
  __asm
  {
    FMLA            D2, D1, V20.D[1]
    FMLA            D19, D1, V22.D[1]
    FMLA            D0, D1, V3.D[1]
  }
  v89.f64[0] = _Q4.f64[0] + _D0;
  v165 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q7.f64[0], _Q20.f64[0]), v104, _Q20, 1), (float64x2_t)0, v99);
  *(float64x2_t *)&v166[8] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q7.f64[0], _Q22.f64[0]), v104, _Q22, 1), (float64x2_t)0, v102);
  *(double *)v166 = v99 + _D2;
  *(double *)&v166[24] = v102 + _Q19.f64[0];
  v167 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q7.f64[0], _Q3.f64[0]), v104, _Q3, 1), (float64x2_t)0, _Q4.f64[0]);
  v168 = _Q4.f64[0] + _D0;
  v107 = *(float64x2_t *)(a3 + 3184);
  _Q19.f64[0] = *(float64_t *)(a3 + 3224);
  v108 = *(float64x2_t *)(a3 + 3208);
  v109 = *(double *)(a3 + 3248);
  v110 = *(float64x2_t *)(a3 + 3232);
  v111 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v107, v165.f64[0]), v108, v165, 1), v110, v99 + _D2);
  __asm { FMLA            D1, D19, V17.D[1] }
  v113 = _D1 + v109 * (v99 + _D2);
  v114 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v107, *(double *)&v166[8]), v108, *(float64x2_t *)&v166[8], 1), v110, *(double *)&v166[24]);
  __asm { FMLA            D4, D19, V6.D[1] }
  v115 = _Q4.f64[0] + v109 * *(double *)&v166[24];
  v116 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v107, v167.f64[0]), v108, v167, 1), v110, v89.f64[0]);
  __asm { FMLA            D6, D19, V7.D[1] }
  v118 = _D6 + v109 * v89.f64[0];
  v119 = vmulq_f64(v114, (float64x2_t)vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL));
  v120 = vsubq_f64(v119, (float64x2_t)vdupq_laneq_s64((int64x2_t)v119, 1)).f64[0];
  v121 = (float64x2_t)vextq_s8((int8x16_t)v111, (int8x16_t)v111, 8uLL);
  v122 = vmulq_n_f64(v114, v118);
  v123 = vmulq_n_f64(v116, v115);
  v124 = vsubq_f64(v122, v123);
  v125 = vmulq_f64(v121, v124);
  v126 = v113 * v120 + vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v125, 1), v125).f64[0];
  if (fabs(v126) > 0.00000001)
  {
    v127 = 1.0 / v126;
    v158.f64[0] = vmuld_lane_f64(v127, v124, 1);
    v158.f64[1] = (vmuld_lane_f64(v113, v116, 1) - vmuld_lane_f64(v118, v111, 1)) * v127;
    v159 = (vmuld_lane_f64(v115, v111, 1) - vmuld_lane_f64(v113, v114, 1)) * v127;
    v160 = v127 * vsubq_f64(v123, v122).f64[0];
    v161 = (v118 * v111.f64[0] - v113 * v116.f64[0]) * v127;
    v162 = (v113 * v114.f64[0] - v115 * v111.f64[0]) * v127;
    v163 = v120 * v127;
    v128.f64[0] = v116.f64[0];
    v128.f64[1] = v114.f64[1];
    v164 = vmulq_n_f64(vsubq_f64(vmulq_f64(v121, v128), vmulq_f64(v111, (float64x2_t)vextq_s8((int8x16_t)v116, (int8x16_t)v114, 8uLL))), v127);
  }
  sub_20EDD4F9C((uint64_t)&v148, *(_QWORD *)(*(_QWORD *)(a3 + 1904) + 32), *(_QWORD *)(*(_QWORD *)(a3 + 1904) + 48));
  kdebug_trace();
  sub_20EDE9858((uint64_t)&v148, *(_QWORD *)(a3 + 2000), v6, &v158, a1 + 128, *(size_t **)(a3 + 1952));
  kdebug_trace();
  v78 = sub_20EDA7D70(a3 + 2552, *(_QWORD *)(a3 + 1904), 4u, *(_QWORD *)(a3 + 2000));
  if ((v78 & 1) != 0)
  {
    kdebug_trace();
    LOBYTE(__p[0]) = 0;
    v147 = 0;
    sub_20EDE5A7C(&v169, a3 + 2552, &v148, (uint64_t)__p, *(double *)(a1 + 40), v129, v130, v131, v132);
    v134 = *v169 >= vcvtad_u64_f64(*(double *)(a1 + 56)* (double)(*(_DWORD *)(a1 + 64) * *(_DWORD *)(a1 + 64) - v169[1]))&& *v169 >= *(_DWORD *)(a1 + 48);
    operator delete(v169);
    if (v147 && __p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    kdebug_trace();
    if (v134)
    {
      v135 = 0;
      *(double *)(a3 + 328) = v168;
      v136 = v167;
      *(_OWORD *)(a3 + 296) = *(_OWORD *)&v166[16];
      *(float64x2_t *)(a3 + 312) = v136;
      v137 = *(_OWORD *)v166;
      *(float64x2_t *)(a3 + 264) = v165;
      *(_OWORD *)(a3 + 280) = v137;
      ++*(_QWORD *)(a3 + 3448);
      *(_QWORD *)&v148.f64[0] = &off_24C9E9690;
      v138 = v156;
      if (!v156)
        goto LABEL_61;
    }
    else
    {
      v135 = 1;
      *(_QWORD *)&v148.f64[0] = &off_24C9E9690;
      v138 = v156;
      if (!v156)
        goto LABEL_61;
    }
    goto LABEL_60;
  }
  v135 = 0;
  *(_QWORD *)&v148.f64[0] = &off_24C9E9690;
  v138 = v156;
  if (v156)
  {
LABEL_60:
    v157 = v138;
    operator delete(v138);
  }
LABEL_61:
  v139 = v155;
  if (v155)
  {
    v140 = (unint64_t *)&v155->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = v154;
  if (v154)
  {
    v143 = (unint64_t *)&v154->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  if (v135)
  {
    v79 = *(_QWORD *)(a3 + 3432);
    goto LABEL_73;
  }
  return v78;
}

void sub_20EDEAB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, int a13, uint64_t a14)
{
  if (a12)
  {
    if (__p)
    {
      operator delete(__p);
      sub_20EDB59DC(&a14);
      _Unwind_Resume(a1);
    }
  }
  sub_20EDB59DC(&a14);
  _Unwind_Resume(a1);
}

void sub_20EDEAB5C(uint64_t a1, __int128 *a2, uint64_t a3, float64x2_t *a4, uint64_t a5)
{
  float64x2_t v10;
  __int128 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v18;
  double v20;
  double v22;
  unint64_t v24;
  float64x2_t v25;
  float64x2_t v26;
  double v32;
  float64x2_t v33;
  float64x2_t v34;
  double v36;
  float64x2_t v38;
  double v39;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  double v47;
  int64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  int64x2_t v51;
  __int128 v52;
  __int128 v53;
  double v54;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v73;
  float64x2_t v75;
  float64x2_t v77;
  float64x2_t v78;
  float64_t v79;
  int8x16_t v80;
  double v81;
  unint64_t v82;
  unint64_t v83;
  double *v84;
  double v85;
  double v86;
  float64x2_t *v87;
  double v88;
  double v89;
  _OWORD *v90;
  _OWORD *v91;
  _OWORD *v92;
  uint64_t i;
  _OWORD *f64;
  float64_t v95;
  double *v96;
  float64x2_t v99;
  double v101;
  float64x2_t v102;
  unint64_t v103;
  _OWORD *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  float64x2_t *v110;
  float64x2_t *v111;
  _OWORD *v112;
  _QWORD *v113;
  __int128 v114;
  float64x2_t *v115;
  float64x2_t v116;
  double v117;
  float64x2_t v118;
  void *v119;
  void *v120;
  _OWORD *v121;
  void *v122;
  void *v123;
  _OWORD *v124;
  float64x2_t v125;
  uint64_t v126;
  void *__p[2];
  void *v128;
  float64x2_t v129;
  _BYTE v130[32];
  float64x2_t v131;
  double v132;
  float64x2_t v133;
  double v134;
  uint64_t v135;
  char v136;
  int64x2_t v137;
  __int128 v138;
  __int128 v139;
  int64x2_t v140;
  double v141;

  kdebug_trace();
  *(_QWORD *)&v11 = *(_QWORD *)a3;
  v12 = *(double *)(a3 + 32);
  v13 = 1.0 / *(double *)a3;
  if (*(double *)a3 == 0.0)
  {
    v13 = 1.0;
    *(double *)&v11 = 1.0;
  }
  v14 = -*(double *)(a3 + 16) / *(double *)&v11;
  *(double *)&v11 = 1.0 / v12;
  if (v12 == 0.0)
  {
    *(double *)&v11 = 1.0;
    v12 = 1.0;
  }
  v10.f64[0] = -*(double *)(a3 + 40) / v12;
  v15 = (double)*(unint64_t *)(a1 + 1832);
  v16 = *(double *)(a1 + 1824);
  if (v16 == 0.0)
    v16 = 1.0;
  _D6 = ((double)*(unint64_t *)(a1 + 1840) + -1.0) * 0.5;
  v18 = *((double *)a2 + 2);
  _Q16 = *a2;
  v20 = *((double *)a2 + 5);
  _Q18 = *(float64x2_t *)((char *)a2 + 24);
  v22 = *((double *)a2 + 8);
  _Q20 = (float64x2_t)a2[3];
  *(double *)&v24 = v15 / v16;
  v25.f64[0] = 0.0;
  v25.f64[1] = v15 / v16;
  v26 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(v15 / v16), *(double *)a2), v25, *(float64x2_t *)a2, 1), (float64x2_t)0, v18);
  __asm { FMLA            D5, D6, V16.D[1] }
  v32 = v18 + _D5;
  v33 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v24, _Q18.f64[0]), v25, _Q18, 1), (float64x2_t)0, v20);
  __asm { FMLA            D16, D6, V18.D[1] }
  *(double *)&_Q16 = v20 + *(double *)&_Q16;
  v34 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v24, _Q20.f64[0]), v25, _Q20, 1), (float64x2_t)0, v22);
  __asm { FMLA            D4, D6, V20.D[1] }
  v36 = v22 + _D4;
  _Q6 = vmlaq_n_f64(vmlaq_f64(vmulq_n_f64(v26, v13), (float64x2_t)0, v33), v34, v14);
  v117 = v32 * v13 + *(double *)&_Q16 * 0.0 + v36 * v14;
  v38 = vmulq_f64(v26, (float64x2_t)0);
  _Q3 = vmlaq_n_f64(vmlaq_n_f64(v38, v33, *(double *)&v11), v34, v10.f64[0]);
  v39 = v32 * 0.0;
  *(double *)&v11 = v39 + *(double *)&_Q16 * *(double *)&v11 + v36 * v10.f64[0];
  v114 = v11;
  _Q0 = vaddq_f64(v34, vmlaq_f64(v38, (float64x2_t)0, v33));
  v10.f64[0] = v36 + v39 + *(double *)&_Q16 * 0.0;
  v116 = v10;
  v41 = (float64x2_t)vzip1q_s64((int64x2_t)_Q6, (int64x2_t)_Q3);
  v42 = (float64x2_t)vzip2q_s64((int64x2_t)_Q6, (int64x2_t)_Q3);
  v43 = vmulq_f64(_Q6, _Q6);
  v43.f64[0] = sqrt(vmlad_n_f64(vmlad_n_f64(v43.f64[0], _Q3.f64[0], _Q3.f64[0]), _Q0.f64[0], _Q0.f64[0]));
  _Q6.f64[0] = _Q3.f64[1];
  __asm { FMLA            D5, D6, V3.D[1] }
  _Q3.f64[0] = _Q0.f64[1];
  __asm { FMLA            D5, D3, V0.D[1] }
  _Q3.f64[0] = sqrt(_D5);
  v47 = v43.f64[0] + _Q3.f64[0];
  if (v43.f64[0] == 0.0)
    v43.f64[0] = 1.0;
  else
    v43.f64[0] = 1.0 / v43.f64[0];
  v48 = (int64x2_t)vmulq_f64(_Q0, v43);
  v49 = vmulq_n_f64(v41, v43.f64[0]);
  if (_Q3.f64[0] == 0.0)
    _Q3.f64[0] = 1.0;
  else
    _Q3.f64[0] = 1.0 / _Q3.f64[0];
  v50 = vmulq_n_f64(v42, _Q3.f64[0]);
  v51 = (int64x2_t)vmulq_laneq_f64(_Q3, _Q0, 1);
  *(double *)&v52 = vmuld_lane_f64(*(double *)v51.i64, v49, 1) - vmuld_lane_f64(*(double *)v48.i64, v50, 1);
  *((_QWORD *)&v52 + 1) = *(_QWORD *)&v49.f64[1];
  *(_QWORD *)&v53 = vdupq_laneq_s64((int64x2_t)v50, 1).u64[0];
  *((double *)&v53 + 1) = vmuld_n_f64(*(double *)v48.i64, v50.f64[0]) - vmuld_n_f64(v49.f64[0], *(double *)v51.i64);
  v136 = 0;
  v135 = 0x300000003;
  v140 = vzip1q_s64(v48, v51);
  v137 = vzip1q_s64((int64x2_t)v49, (int64x2_t)v50);
  v141 = vmuld_lane_f64(v49.f64[0], v50, 1) - vmuld_lane_f64(v50.f64[0], v49, 1);
  v54 = v47 * 0.5;
  v139 = v53;
  v138 = v52;
  sub_20EB48638((uint64_t)&v125);
  _D23 = v128;
  v56.f64[0] = *(float64_t *)v130;
  v57 = v129;
  _V20.D[1] = *(_QWORD *)&v130[16];
  _V18.D[1] = v131.f64[1];
  _V7.D[1] = v133.f64[1];
  v61 = vmulq_n_f64(v125, *(double *)&v130[8]);
  v62 = vmlaq_n_f64(vmlaq_laneq_f64(v61, *(float64x2_t *)__p, *(float64x2_t *)&v130[8], 1), v129, *(double *)&v130[24]);
  __asm { FMLA            D2, D23, V20.D[1] }
  v63 = vmulq_n_f64(v125, v131.f64[0]);
  v64 = vmlaq_n_f64(vmlaq_laneq_f64(v63, *(float64x2_t *)__p, v131, 1), v129, v132);
  __asm { FMLA            D3, D23, V18.D[1] }
  v65 = vmulq_n_f64(v125, v133.f64[0]);
  v66 = vmlaq_n_f64(vmlaq_laneq_f64(v65, *(float64x2_t *)__p, v133, 1), v129, v134);
  __asm { FMLA            D6, D23, V7.D[1] }
  v67 = vmulq_f64(v64, (float64x2_t)vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL));
  v68 = vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL), vsubq_f64(vmulq_n_f64(v64, _Q6.f64[0] + *(double *)v130 * v134), vmulq_n_f64(v66, _Q3.f64[0] + *(double *)v130 * v132)));
  v69 = vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v68, 1), v68);
  v69.f64[0] = (_Q2.f64[0] + *(double *)v130 * *(double *)&v130[24])
             * vsubq_f64(v67, (float64x2_t)vdupq_laneq_s64((int64x2_t)v67, 1)).f64[0]
             + v69.f64[0];
  *(_QWORD *)&v62.f64[0] = vdupq_lane_s64((uint64_t)__p[0], 0).u64[0];
  *(_QWORD *)&v57.f64[1] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u64[0];
  *(_QWORD *)&v56.f64[0] = *(_OWORD *)&vmulq_f64(v56, v69);
  v70 = vmulq_n_f64(v57, v69.f64[0]);
  *(void **)&v62.f64[1] = __p[1];
  v71 = vmlaq_n_f64(vmlaq_laneq_f64(v61, v62, *(float64x2_t *)&v130[8], 1), v70, *(double *)&v130[24]);
  _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)&v130[24], v56.f64[0]);
  v73 = vmlaq_n_f64(vmlaq_laneq_f64(v63, v62, v131, 1), v70, v132);
  _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v132, v56.f64[0]);
  v75 = vmlaq_n_f64(vmlaq_laneq_f64(v65, v62, v133, 1), v70, v134);
  _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], v134, v56.f64[0]);
  v77.f64[0] = v117;
  v78.f64[1] = *((float64_t *)&v114 + 1);
  *(_QWORD *)&v77.f64[1] = v114;
  v78.f64[0] = 1.0 / v54;
  if (v54 == 0.0)
    v78.f64[0] = 1.0;
  *(_QWORD *)&v79 = *(_OWORD *)&vmulq_f64(v116, v78);
  v80 = (int8x16_t)vmulq_n_f64(v77, v78.f64[0]);
  *(_QWORD *)&_Q2.f64[1] = v80.i64[0];
  *a4 = v71;
  a4[1] = _Q2;
  *(_QWORD *)&_Q3.f64[1] = vextq_s8(v80, v80, 8uLL).u64[0];
  _Q6.f64[1] = v79;
  a4[2] = v73;
  a4[3] = _Q3;
  a4[4] = v75;
  a4[5] = _Q6;
  v81 = *(double *)(a1 + 1824);
  v82 = *(_QWORD *)(a1 + 1840);
  v83 = *(_QWORD *)(a1 + 1832);
  v84 = (double *)operator new(0x60uLL);
  v137.i64[1] = (uint64_t)(v84 + 12);
  *(_QWORD *)&v138 = v84 + 12;
  v85 = v81 * 0.5 * ((double)v82 / (double)v83);
  v86 = -(v81 * 0.5);
  *v84 = v86;
  v84[1] = v85;
  v84[2] = 0.0;
  v84[3] = v81 * 0.5;
  v84[4] = v85;
  v84[5] = 0.0;
  v84[6] = v81 * 0.5;
  v84[7] = -v85;
  v84[8] = 0.0;
  v84[9] = v86;
  v84[10] = -v85;
  v84[11] = 0.0;
  v137.i64[0] = (uint64_t)v84;
  v87 = (float64x2_t *)operator new(0x40uLL);
  v115 = a4;
  v88 = (double)(v83 - 1);
  v89 = (double)(v82 - 1);
  v87->f64[0] = 0.0;
  v87->f64[1] = v89;
  v87[1].f64[0] = v88;
  v87[1].f64[1] = v89;
  v87[2].f64[0] = v88;
  v87[3].f64[0] = 0.0;
  v87[3].f64[1] = 0.0;
  v87[2].f64[1] = 0.0;
  v90 = operator new(0x40uLL);
  v123 = v90 + 4;
  v124 = v90 + 4;
  *v90 = 0u;
  v90[1] = 0u;
  v90[2] = 0u;
  v90[3] = 0u;
  v122 = v90;
  v91 = *(_OWORD **)a5;
  *(_QWORD *)(a5 + 8) = *(_QWORD *)a5;
  if (*(_QWORD *)(a5 + 16) - (_QWORD)v91 > 0x3FuLL)
  {
    v92 = v91;
  }
  else
  {
    v92 = operator new(0x40uLL);
    *(_QWORD *)a5 = v92;
    *(_QWORD *)(a5 + 8) = v92;
    *(_QWORD *)(a5 + 16) = v92 + 4;
    if (v91)
    {
      operator delete(v91);
      v92 = *(_OWORD **)(a5 + 8);
    }
  }
  for (i = 0; i != 4; ++i)
  {
    _Q1.f64[0] = *((float64_t *)a2 + 2);
    _Q5 = a2[3];
    _Q1.f64[1] = *((float64_t *)a2 + 5);
    v99 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)a2, *(int64x2_t *)((char *)a2 + 24)), v87[i].f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)a2, *(int64x2_t *)((char *)a2 + 24)), v87[i], 1), _Q1, 1.0);
    _D0 = v87[i].f64[1];
    __asm { FMLA            D1, D0, V5.D[1] }
    v101 = _Q1.f64[0] + *((double *)a2 + 8) * 1.0;
    if (v101 == 0.0)
      v101 = 1.0;
    v102 = vdivq_f64(v99, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v101, 0));
    v103 = *(_QWORD *)(a5 + 16);
    if ((unint64_t)v92 < v103)
    {
      *v92 = v102;
      f64 = v92 + 1;
      goto LABEL_21;
    }
    v104 = *(_OWORD **)a5;
    v105 = ((uint64_t)v92 - *(_QWORD *)a5) >> 4;
    v106 = v105 + 1;
    if ((unint64_t)(v105 + 1) >> 60)
      sub_20E867F44();
    v107 = v103 - (_QWORD)v104;
    if (v107 >> 3 > v106)
      v106 = v107 >> 3;
    if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF0)
      v108 = 0xFFFFFFFFFFFFFFFLL;
    else
      v108 = v106;
    v118 = v102;
    if (v108)
    {
      if (v108 >> 60)
        sub_20E877A38();
      v109 = (char *)operator new(16 * v108);
      v102 = v118;
      v110 = (float64x2_t *)&v109[16 * v105];
      *v110 = v118;
      f64 = (_OWORD *)v110[1].f64;
      if (v92 == v104)
        goto LABEL_38;
    }
    else
    {
      v109 = 0;
      v110 = (float64x2_t *)(16 * v105);
      v111 = (float64x2_t *)(16 * v105);
      *v111 = v102;
      f64 = (_OWORD *)v111[1].f64;
      if (v92 == v104)
        goto LABEL_38;
    }
    do
    {
      v110[-1] = *((float64x2_t *)v92 - 1);
      --v110;
      --v92;
    }
    while (v92 != v104);
    v92 = *(_OWORD **)a5;
LABEL_38:
    *(_QWORD *)a5 = v110;
    *(_QWORD *)(a5 + 8) = f64;
    *(_QWORD *)(a5 + 16) = &v109[16 * v108];
    if (v92)
    {
      operator delete(v92);
      v102 = v118;
    }
LABEL_21:
    *(_QWORD *)(a5 + 8) = f64;
    v95 = (v102.f64[1] - *(double *)(a3 + 40)) / *(double *)(a3 + 32);
    v96 = (double *)v122;
    *((double *)v122 + 2 * i) = (v102.f64[0] - *(double *)(a3 + 16) - v95 * *(double *)(a3 + 8)) / *(double *)a3;
    v96[(2 * i) | 1] = v95;
    v92 = f64;
  }
  v112 = operator new(0x10uLL);
  v119 = v112;
  *v112 = xmmword_210365350;
  v120 = v112 + 1;
  v121 = v112 + 1;
  v125 = (float64x2_t)xmmword_210378C50;
  v126 = 50;
  __p[0] = (void *)0x3F747AE147AE147BLL;
  v113 = operator new(8uLL);
  __p[1] = v113;
  *v113 = 20;
  v128 = v113 + 1;
  *(_QWORD *)&v129.f64[0] = v113 + 1;
  LOBYTE(v129.f64[1]) = 0;
  *(_OWORD *)v130 = xmmword_210378560;
  *(_OWORD *)&v130[16] = xmmword_210378570;
  v131 = (float64x2_t)vdupq_n_s64(0x3EE4F8B588E368F1uLL);
  v132 = 0.0001;
  sub_20EB6A180((uint64_t)&v125, &v122, v137.i64, &v119, v115, (uint64_t)v115);
  kdebug_trace();
  if (__p[1])
  {
    v128 = __p[1];
    operator delete(__p[1]);
  }
  if (v119)
  {
    v120 = v119;
    operator delete(v119);
  }
  if (v122)
  {
    v123 = v122;
    operator delete(v122);
  }
  operator delete(v87);
  if (v137.i64[0])
  {
    v137.i64[1] = v137.i64[0];
    operator delete((void *)v137.i64[0]);
  }
}

void sub_20EDEB2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  void *v26;
  void *v27;
  uint64_t v28;
  void *v30;

  operator delete(v27);
  operator delete(v26);
  v30 = *(void **)(v28 - 200);
  if (v30)
  {
    *(_QWORD *)(v28 - 192) = v30;
    operator delete(v30);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_20EDEB3C8(uint64_t a1, uint64_t a2, _OWORD *a3, double *a4, uint64_t a5, _BYTE *a6, char a7, char a8)
{
  uint64_t v11;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  double v36;
  float64x2_t v39;
  double v40;
  double v42;
  double v44;
  double v52;
  double v55;
  double v57;
  float64x2_t v58;
  float64x2_t v59;
  double v61;
  float64x2_t v62;
  double v63;
  float64x2_t v64;
  double v66;
  double v67;
  _QWORD *v68;
  int v69;
  int v70;
  char v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  void *v77;
  char *v78;
  char *v79;
  char *v80;
  unint64_t v81;
  double *v82;
  uint64_t v83;
  int8x16_t *v84;
  uint64_t v85;
  int8x16_t v86;
  double v87;
  uint64_t *v88;
  float64x2_t *v89;
  double *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double *v97;
  double *v98;
  float64x2_t v99;
  float64x2_t v100;
  uint64_t v101;
  float64x2_t *v102;
  float64x2_t v103;
  void *v104;
  float v105;
  double v106;
  unint64_t v107;
  unint64_t v108;
  double *v109;
  uint64_t v110;
  float64x2_t *v111;
  int64x2_t v112;
  uint64_t v114;
  int64x2_t v115;
  double v116;
  uint64_t v117;
  float v118;
  uint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  double v123;
  double v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  size_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _BOOL4 v133;
  uint64_t v134;
  _BOOL4 v135;
  uint64_t v136;
  _BOOL4 v137;
  uint64_t v138;
  _BOOL4 v139;
  uint64_t v140;
  _BOOL4 v141;
  uint64_t v142;
  _BOOL4 v143;
  uint64_t v144;
  _BOOL4 v145;
  uint64_t v146;
  _BOOL4 v147;
  int8x16_t *v148;
  unint64_t v149;
  int8x16_t *v150;
  int8x16_t *v151;
  unint64_t v153;
  uint64_t v154;
  _BOOL8 v155;
  int8x16_t *v156;
  int8x16_t *v157;
  unint64_t v158;
  int8x16_t v159;
  int8x16_t *v160;
  int8x16_t *v161;
  int8x8_t *v162;
  int8x8_t *v163;
  unint64_t v164;
  int8x8_t v165;
  __int8 v166;
  unint64_t i;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  double v180;
  double v182;
  double v184;
  float64x2_t v186;
  float64x2_t v188;
  double v189;
  float64x2_t v190;
  float64x2_t v191;
  double v193;
  float64x2_t v194;
  double v196;
  float64x2_t v197;
  double v199;
  float64x2_t v200;
  double v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  double v207;
  double v208;
  float64x2_t v209;
  double v210;
  double v211;
  double v212;
  double v213;
  float v214;
  __n128 v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t *v236;
  int v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  size_t v241;
  const char *v242;
  unsigned __int8 v243;
  size_t v244;
  uint64_t v245;
  double v246;
  double v247;
  double *v248;
  double v249;
  uint64_t v250;
  double v251;
  double v252;
  double v253;
  double v254;
  void *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  double v267;
  float v268;
  uint64_t v269;
  double *v270;
  double *v271;
  int v272;
  int v273;
  int v274;
  int32x2_t v275;
  int v277;
  int v278;
  double v279;
  float32x2_t v280;
  uint64_t v281;
  const double *v282;
  float64x2_t v286;
  unint64_t v287;
  unint64_t v288;
  double v289;
  float64x2_t v292;
  double v293;
  double v295;
  double v297;
  double v302;
  double v305;
  unsigned __int8 v309;
  const char *v310;
  size_t v311;
  _BYTE *v312;
  unint64_t v313;
  const char *v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t *v319;
  uint64_t v320;
  uint64_t v321;
  NSObject *v322;
  size_t v323;
  std::__shared_weak_count_vtbl *v324;
  std::__shared_weak_count *v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  uint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  void *v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  _QWORD *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t __len;
  unsigned int v377;
  size_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t *v387;
  uint64_t v388;
  uint64_t v389;
  __int128 v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t v394;
  unint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  void *v399;
  std::__shared_weak_count *v400;
  std::__shared_weak_count *v401;
  void *v402;
  void *v403;
  float64x2_t v404;
  double v405;
  double v406;
  double v407;
  double v408;
  double v409;
  float64x2_t v410;
  __int128 v411;
  uint64_t *v412;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v414;
  uint64_t v415;
  const char *v416;
  unint64_t v417;
  const char *v418;
  uint64_t v419;
  std::__shared_weak_count *v420;
  uint64_t v421;
  __int128 v422;
  std::__shared_weak_count *v423;
  void *__p;
  void *v425;
  _BYTE v426[24];
  __int128 v427;
  unint64_t v428;
  size_t v429;
  unint64_t v430;
  char v431;
  uint64_t v432;
  __int128 v433;
  std::__shared_weak_count *v434;
  void *v435;
  void *v436;

  v11 = (uint64_t)a3;
  a3[183] = xmmword_21030D320;
  a3[184] = xmmword_21030D320;
  a3[185] = xmmword_21030D320;
  a3[186] = xmmword_21030D320;
  a3[187] = xmmword_21030D320;
  a3[188] = xmmword_21030D320;
  a3[189] = xmmword_21030D320;
  a3[190] = xmmword_21030D320;
  a3[191] = xmmword_21030D320;
  a3[192] = xmmword_21030D320;
  a3[193] = xmmword_21030D320;
  a3[194] = xmmword_21030D320;
  a3[195] = xmmword_21030D320;
  a3[196] = xmmword_21030D320;
  a3[197] = xmmword_21030D320;
  a3[198] = xmmword_21030D320;
  if ((a7 & 1) == 0)
  {
    kdebug_trace();
    sub_20EDDBCF8(*(_QWORD *)(v11 + 1888), a4, (double *)(v11 + 504), v426);
    kdebug_trace();
    v15 = *(_OWORD *)v426;
    if (*(_QWORD *)v426 == *(_QWORD *)&v426[8])
    {
      v154 = *(_QWORD *)(v11 + 3432);
      *(_BYTE *)(v154 + 104) = 0;
      *(_OWORD *)(v154 + 88) = 0u;
      *(_OWORD *)(v154 + 72) = 0u;
      *(_OWORD *)(v154 + 56) = 0u;
      *(_QWORD *)(v154 + 112) = 0xBFF0000000000000;
      *(_OWORD *)(v154 + 176) = 0u;
      *(_OWORD *)(v154 + 192) = 0u;
      *(_OWORD *)(v154 + 208) = 0u;
      *(_OWORD *)(v154 + 224) = 0u;
      *(_BYTE *)(v154 + 240) = 0;
      *(_QWORD *)(v154 + 248) = 0xBFF0000000000000;
      *(_QWORD *)(v154 + 264) = 0;
      *(_QWORD *)(v11 + 3448) = 0;
      if ((_QWORD)v15)
      {
        *(_QWORD *)&v426[8] = v15;
        operator delete((void *)v15);
      }
      return 0;
    }
    v16 = *(_OWORD *)(*(_QWORD *)v426 + 216);
    *(_OWORD *)a5 = *(_OWORD *)(*(_QWORD *)v426 + 200);
    *(_OWORD *)(a5 + 16) = v16;
    v17 = *(_OWORD *)(v15 + 232);
    v18 = *(_OWORD *)(v15 + 248);
    v19 = *(_OWORD *)(v15 + 280);
    *(_OWORD *)(a5 + 64) = *(_OWORD *)(v15 + 264);
    *(_OWORD *)(a5 + 80) = v19;
    *(_OWORD *)(a5 + 32) = v17;
    *(_OWORD *)(a5 + 48) = v18;
    v20 = *((_QWORD *)&v15 + 1) - 272;
    do
    {
      v22 = *(void **)v20;
      if (*(_QWORD *)v20)
      {
        *(_QWORD *)(v20 + 8) = v22;
        operator delete(v22);
      }
      v21 = v20 - 24;
      v20 -= 296;
    }
    while (v21 != (_QWORD)v15);
    *(_QWORD *)&v426[8] = v15;
    operator delete(*(void **)v426);
  }
  v366 = a2;
  v23 = v11 + 264;
  *a6 = 0;
  if ((a8 & 1) == 0)
  {
    sub_20EDE3124(v426, a1, *(_QWORD *)(v11 + 392), *(_QWORD *)(v11 + 408), v11 + 504, v11 + 688, (uint64_t *)(v11 + 672));
    v24 = *(_OWORD *)v426;
    *(_OWORD *)v426 = 0uLL;
    v25 = *(std::__shared_weak_count **)(v11 + 2056);
    *(_OWORD *)(v11 + 2048) = v24;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = *(std::__shared_weak_count **)&v426[8];
    if (*(_QWORD *)&v426[8])
    {
      v29 = (unint64_t *)(*(_QWORD *)&v426[8] + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  v31 = *(_QWORD *)(v11 + 576);
  if (v31)
    v32 = *(_QWORD **)(v11 + 576);
  else
    v32 = (_QWORD *)(v11 + 360);
  if (v31)
    v33 = v11 + 592;
  else
    v33 = v11 + 504;
  v34 = *(_QWORD *)(v11 + 1832);
  v35 = *(_QWORD *)(v11 + 1840);
  v36 = *(double *)(v11 + 1824);
  if (v34 <= 1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageMatchingScore.cpp", 87, (uint64_t)"width > 1", 9, (uint64_t)&unk_210260559, 0, (void (*)(void **))sub_21023DDB0)|| v35 <= 1&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageMatchingScore.cpp", 88, (uint64_t)"height > 1", 10, (uint64_t)&unk_210260559, 0, (void (*)(void **))sub_21023DDB0)|| v36 <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageMatchingScore.cpp",
         89,
         (uint64_t)"image_width_meters > 0.0",
         24,
         (uint64_t)&unk_210260559,
         0,
         (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_354;
  }
  _D1 = -(v36 / (double)v34 * ((double)v35 + -1.0)) * 0.5;
  _Q4 = *(float64x2_t *)(a5 + 32);
  v39 = *(float64x2_t *)(a5 + 64);
  v40 = *(double *)(v33 + 16);
  _Q7 = *(_OWORD *)v33;
  v42 = *(double *)(v33 + 40);
  _Q17 = *(float64x2_t *)(v33 + 24);
  v44 = *(double *)(v33 + 64);
  v365 = v33;
  _Q19 = *(float64x2_t *)(v33 + 48);
  _Q20 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a5, *(double *)v33), _Q4, *(float64x2_t *)v33, 1), v39, v40);
  _D23 = *(_QWORD *)(a5 + 56);
  __asm { FMLA            D22, D23, V7.D[1] }
  *(_QWORD *)&_Q7 = *(_QWORD *)(a5 + 88);
  v52 = _D22 + *(double *)&_Q7 * v40;
  _Q22 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a5, _Q17.f64[0]), _Q4, _Q17, 1), v39, v42);
  __asm { FMLA            D24, D23, V17.D[1] }
  v55 = _D24 + *(double *)&_Q7 * v42;
  _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a5, _Q19.f64[0]), _Q4, _Q19, 1), v39, v44);
  __asm { FMLA            D4, D23, V19.D[1] }
  v57 = _Q4.f64[0] + *(double *)&_Q7 * v44;
  *(double *)&_Q7 = v36 / (double)v34;
  v58.f64[0] = 0.0;
  v58.f64[1] = *(double *)&_Q7;
  v59 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)_Q7, _Q20.f64[0]), v58, _Q20, 1), (float64x2_t)0, v52);
  __asm { FMLA            D2, D1, V20.D[1] }
  v61 = v52 + _D2;
  v62 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)_Q7, _Q22.f64[0]), v58, _Q22, 1), (float64x2_t)0, v55);
  __asm { FMLA            D19, D1, V22.D[1] }
  v63 = v55 + _Q19.f64[0];
  v64 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)_Q7, _Q3.f64[0]), v58, _Q3, 1);
  __asm { FMLA            D0, D1, V3.D[1] }
  v66 = v57 + _D0;
  if (v66 == 0.0)
    v67 = 1.0;
  else
    v67 = 1.0 / v66;
  *(float64x2_t *)v23 = vmulq_n_f64(v59, v67);
  *(double *)(v11 + 280) = v67 * v61;
  *(float64x2_t *)(v11 + 288) = vmulq_n_f64(v62, v67);
  *(double *)(v11 + 304) = v67 * v63;
  *(float64x2_t *)(v11 + 312) = vmulq_n_f64(vmlaq_n_f64(v64, (float64x2_t)0, v57), v67);
  *(_QWORD *)(v11 + 328) = 0x3FF0000000000000;
  v68 = *(_QWORD **)(v11 + 2024);
  v69 = *(unsigned __int8 *)(v11 + 3465);
  v70 = *(_DWORD *)(v11 + 2840);
  *(_DWORD *)(v11 + 2840) = 8;
  v390 = 0x3FF0000000000000uLL;
  v391 = 0;
  v392 = 0;
  v393 = 0x3FF0000000000000;
  v394 = 0;
  v395 = 0;
  v396 = 0;
  v397 = 0x3FF0000000000000;
  v71 = sub_20EDA8F70(v11 + 2552, *(_QWORD *)(v11 + 1976));
  if (v69 && (v71 & 1) != 0)
  {
    sub_20EDED5D4((double **)v426, v11 + 2552, v68, (double *)&v390, v72, v73, v74, v75, v76);
    v77 = *(void **)(v11 + 2872);
    if (v77)
    {
      *(_QWORD *)(v11 + 2880) = v77;
      operator delete(v77);
    }
    v78 = *(char **)v426;
    *(_QWORD *)(v11 + 2872) = *(_QWORD *)v426;
    v79 = *(char **)&v426[8];
    *(_OWORD *)(v11 + 2880) = *(_OWORD *)&v426[8];
    v80 = v79;
    if (v78 == v79)
    {
      v80 = v78;
      *(_DWORD *)(v11 + 2840) = v70;
      v88 = (uint64_t *)(v11 + 2896);
      v89 = *(float64x2_t **)(v11 + 2896);
      v90 = *(double **)(v11 + 2904);
      if (v89 != (float64x2_t *)v90)
        goto LABEL_47;
    }
    else
    {
      v81 = v79 - v78 - 8;
      v82 = (double *)v78;
      if (v81 < 0x18)
        goto LABEL_364;
      v83 = (v81 >> 3) + 1;
      v82 = (double *)&v78[8 * (v83 & 0x3FFFFFFFFFFFFFFCLL)];
      v84 = (int8x16_t *)(v78 + 16);
      v85 = v83 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v86 = vbicq_s8(*v84, (int8x16_t)vcltzq_f64(*(float64x2_t *)v84));
        v84[-1] = vbicq_s8(v84[-1], (int8x16_t)vcltzq_f64((float64x2_t)v84[-1]));
        *v84 = v86;
        v84 += 2;
        v85 -= 4;
      }
      while (v85);
      if (v83 != (v83 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_364:
        do
        {
          v87 = *v82;
          if (*v82 < 0.0)
            v87 = 0.0;
          *v82++ = v87;
        }
        while (v82 != (double *)v79);
      }
      *(_DWORD *)(v11 + 2840) = v70;
      v88 = (uint64_t *)(v11 + 2896);
      v89 = *(float64x2_t **)(v11 + 2896);
      v90 = *(double **)(v11 + 2904);
      if (v89 != (float64x2_t *)v90)
        goto LABEL_47;
    }
LABEL_60:
    sub_20E86811C(v88, v78, v80, (v80 - v78) >> 3);
    v89 = *(float64x2_t **)(v11 + 2896);
    v90 = *(double **)(v11 + 2904);
    v367 = v32;
    v368 = a1;
    v364 = v11 + 592;
    if (v89 != (float64x2_t *)v90)
      goto LABEL_65;
LABEL_61:
    v105 = 0.0;
    goto LABEL_74;
  }
  v78 = (char *)operator new(0x200uLL);
  memset_pattern16(v78, &unk_210315A20, 0x200uLL);
  v80 = v78 + 512;
  v104 = *(void **)(v11 + 2872);
  if (v104)
  {
    *(_QWORD *)(v11 + 2880) = v104;
    operator delete(v104);
  }
  *(_QWORD *)(v11 + 2872) = v78;
  *(_QWORD *)(v11 + 2880) = v80;
  *(_QWORD *)(v11 + 2888) = v80;
  *(_DWORD *)(v11 + 2840) = v70;
  v88 = (uint64_t *)(v11 + 2896);
  v89 = *(float64x2_t **)(v11 + 2896);
  v90 = *(double **)(v11 + 2904);
  if (v89 == (float64x2_t *)v90)
    goto LABEL_60;
LABEL_47:
  v91 = (char *)v90 - (char *)v89 - 8;
  if (v91 < 0x38
    || ((v92 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8, v89 < (float64x2_t *)&v78[v92])
      ? (_CF = v78 >= (char *)v89 + v92)
      : (_CF = 1),
        !_CF))
  {
    v97 = (double *)v89;
    v98 = (double *)v78;
    do
    {
LABEL_63:
      v106 = *v98++;
      *v97 = *v97 * 0.7 + v106 * 0.3;
      ++v97;
    }
    while (v97 != v90);
    goto LABEL_64;
  }
  v94 = 0;
  v95 = (v91 >> 3) + 1;
  v96 = v95 & 0x3FFFFFFFFFFFFFFCLL;
  v97 = &v89->f64[v96];
  v98 = (double *)&v78[v96 * 8];
  v99 = (float64x2_t)vdupq_n_s64(0x3FE6666666666666uLL);
  v100 = (float64x2_t)vdupq_n_s64(0x3FD3333333333333uLL);
  v101 = v95 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v102 = &v89[v94];
    v103 = vaddq_f64(vmulq_f64(v89[v94 + 1], v99), vmulq_f64(*(float64x2_t *)&v78[v94 * 16 + 16], v100));
    *v102 = vaddq_f64(vmulq_f64(v89[v94], v99), vmulq_f64(*(float64x2_t *)&v78[v94 * 16], v100));
    v102[1] = v103;
    v94 += 2;
    v101 -= 4;
  }
  while (v101);
  if (v95 != (v95 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_63;
LABEL_64:
  v367 = v32;
  v368 = a1;
  v364 = v11 + 592;
  if (v89 == (float64x2_t *)v90)
    goto LABEL_61;
LABEL_65:
  v107 = (char *)v90 - (char *)v89 - 8;
  if (v107 < 0x18)
  {
    v108 = 0;
    v109 = (double *)v89;
    goto LABEL_70;
  }
  v110 = (v107 >> 3) + 1;
  v109 = &v89->f64[v110 & 0x3FFFFFFFFFFFFFFCLL];
  v111 = v89 + 1;
  v112 = 0uLL;
  __asm { FMOV            V1.2D, #0.5 }
  v114 = v110 & 0x3FFFFFFFFFFFFFFCLL;
  v115 = 0uLL;
  do
  {
    v112 = vsubq_s64(v112, vcgtq_f64(_Q1, v111[-1]));
    v115 = vsubq_s64(v115, vcgtq_f64(_Q1, *v111));
    v111 += 2;
    v114 -= 4;
  }
  while (v114);
  v108 = vaddvq_s64(vaddq_s64(v115, v112));
  if (v110 != (v110 & 0x3FFFFFFFFFFFFFFCLL))
  {
    do
    {
LABEL_70:
      v116 = *v109++;
      if (v116 < 0.5)
        ++v108;
    }
    while (v109 != v90);
  }
  v105 = (float)v108;
LABEL_74:
  v117 = (char *)v90 - (char *)v89;
  v118 = (float)(unint64_t)(v117 >> 3);
  if (!v117)
    v118 = 1.0;
  *(float *)(v11 + 2920) = v105 / v118;
  if (!v117)
    goto LABEL_166;
  v361 = v11 + 264;
  v362 = a5;
  v119 = *(_QWORD *)(v11 + 2024);
  v120 = *(_QWORD **)(v11 + 1952);
  v363 = v11;
  v360 = *(_QWORD *)(v11 + 1976);
  if (!v120[11])
    sub_20EDA8E0C(v120, *(_QWORD *)(v119 + 32), *(_QWORD *)(v119 + 40), *(_QWORD *)(v119 + 48), 1, 0, 0);
  v121 = 0;
  v122 = 0;
  v123 = (double)*(unint64_t *)(v119 + 32) * 0.125;
  v124 = (double)*(unint64_t *)(v119 + 48) * 0.125;
  v125 = v123;
  v380 = (v123 * 0.0);
  v126 = (v123 + v123);
  v375 = (v126 + ~(_DWORD)v125) + 1;
  __len = (~(_DWORD)v380 + v125) + 1;
  v383 = (v123 * 3.0);
  v384 = v126;
  v374 = (v383 + ~(_DWORD)v126) + 1;
  LODWORD(v126) = vcvtd_n_u64_f64(v123, 2uLL);
  v373 = (v126 + ~(_DWORD)v383) + 1;
  v127 = (v123 * 5.0);
  v382 = v126;
  v128 = (v123 * 6.0);
  v371 = v127 + ~(_DWORD)v126 + 1;
  v370 = v128 + ~v127 + 1;
  LODWORD(v126) = (v123 * 7.0);
  v369 = (v126 + ~(_DWORD)v128) + 1;
  v381 = v126;
  v377 = vcvtd_n_u64_f64(v123, 3uLL);
  v129 = v377 + ~(_DWORD)v126 + 1;
  v387 = v88;
  v378 = v129;
  v379 = v125;
  v372 = v128;
  do
  {
    v130 = (v124 * (double)v121);
    v385 = v121 + 1;
    v131 = (v124 * (double)(v121 + 1));
    if (v130 < v131)
    {
      v132 = *v387;
      v133 = *(double *)(*v387 + 8 * v122) > 0.5;
      if (v380 < v125)
      {
        v134 = (v124 * (double)v121);
        do
          memset((void *)(*(_QWORD *)(v120[15] + 8 * v134++) + v380), v133, __len);
        while (v131 != v134);
        v132 = *v387;
        v125 = v379;
      }
      v135 = *(double *)(v132 + 8 * (v122 | 1)) > 0.5;
      if (v125 < v384)
      {
        v136 = v130;
        do
          memset((void *)(*(_QWORD *)(v120[15] + 8 * v136++) + v125), v135, v375);
        while (v131 != v136);
        v132 = *v387;
        v128 = v372;
      }
      v137 = *(double *)(v132 + 8 * (v122 | 2)) > 0.5;
      if (v384 < v383)
      {
        v138 = v130;
        do
          memset((void *)(*(_QWORD *)(v120[15] + 8 * v138++) + v384), v137, v374);
        while (v131 != v138);
        v132 = *v387;
        v129 = v378;
      }
      v139 = *(double *)(v132 + 8 * (v122 | 3)) > 0.5;
      if (v383 < v382)
      {
        v140 = v130;
        do
          memset((void *)(*(_QWORD *)(v120[15] + 8 * v140++) + v383), v139, v373);
        while (v131 != v140);
        v132 = *v387;
        v125 = v379;
      }
      v141 = *(double *)(v132 + 8 * (v122 | 4)) > 0.5;
      if (v382 < v127)
      {
        v142 = v130;
        do
          memset((void *)(*(_QWORD *)(v120[15] + 8 * v142++) + v382), v141, v371);
        while (v131 != v142);
        v132 = *v387;
        v129 = v378;
      }
      v143 = *(double *)(v132 + 8 * (v122 | 5)) > 0.5;
      if (v127 < v128)
      {
        v144 = v130;
        do
          memset((void *)(*(_QWORD *)(v120[15] + 8 * v144++) + v127), v143, v370);
        while (v131 != v144);
        v132 = *v387;
        v125 = v379;
      }
      v145 = *(double *)(v132 + 8 * (v122 | 6)) > 0.5;
      if (v128 < v381)
      {
        v146 = v130;
        do
          memset((void *)(*(_QWORD *)(v120[15] + 8 * v146++) + v128), v145, v369);
        while (v131 != v146);
        v132 = *v387;
        v129 = v378;
      }
      v147 = *(double *)(v132 + 8 * (v122 | 7)) > 0.5;
      if (v381 < v377)
      {
        do
          memset((void *)(*(_QWORD *)(v120[15] + 8 * v130++) + v381), v147, v129);
        while (v131 != v130);
      }
    }
    v122 += 8;
    v121 = v385;
  }
  while (v385 != 8);
  v23 = v361;
  v148 = *(int8x16_t **)(v360 + 88);
  v11 = v363;
  if (v148)
  {
    v149 = v120[5] * v120[6];
    if (v149)
    {
      v150 = (int8x16_t *)v120[11];
      v151 = (int8x16_t *)((char *)v150 + v149);
      if (v149 < 8)
        goto LABEL_137;
      if (v150 < (int8x16_t *)&v148->i8[v149] && v148 < v151)
        goto LABEL_137;
      if (v149 < 0x20)
      {
        v153 = 0;
        goto LABEL_132;
      }
      v153 = v149 & 0xFFFFFFFFFFFFFFE0;
      v156 = v148 + 1;
      v157 = v150 + 1;
      v158 = v149 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v159 = vandq_s8(*v156, *v157);
        v157[-1] = vandq_s8(v156[-1], v157[-1]);
        *v157 = v159;
        v156 += 2;
        v157 += 2;
        v158 -= 32;
      }
      while (v158);
      if (v149 != v153)
      {
        if ((v149 & 0x18) == 0)
        {
          v148 = (int8x16_t *)((char *)v148 + v153);
          v150 = (int8x16_t *)((char *)v150 + v153);
          goto LABEL_137;
        }
LABEL_132:
        v160 = (int8x16_t *)((char *)v150 + (v149 & 0xFFFFFFFFFFFFFFF8));
        v161 = (int8x16_t *)((char *)v148 + (v149 & 0xFFFFFFFFFFFFFFF8));
        v162 = (int8x8_t *)&v148->i8[v153];
        v163 = (int8x8_t *)&v150->i8[v153];
        v164 = v153 - (v149 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v165 = *v162++;
          *v163 = vand_s8(v165, *v163);
          ++v163;
          v164 += 8;
        }
        while (v164);
        v150 = v160;
        v148 = v161;
        if (v149 == (v149 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_138;
        do
        {
LABEL_137:
          v166 = v148->i8[0];
          v148 = (int8x16_t *)((char *)v148 + 1);
          v150->i8[0] &= v166;
          v150 = (int8x16_t *)((char *)v150 + 1);
        }
        while (v150 != v151);
      }
    }
  }
LABEL_138:
  a5 = v362;
  if (*(_DWORD *)(v363 + 2548) >= 2u)
  {
    for (i = 1; i < *(unsigned int *)(v363 + 2548); ++i)
    {
      sub_20EDB79B8((uint64_t)v426, *(_QWORD *)(v363 + 1952) + 144 * i - 144);
      sub_20EDB4A1C((uint64_t)&v412, *((_QWORD *)&v427 + 1) >> 1, v429 >> 1);
      sub_210120448(&v412, v426);
      sub_20E8E9964(*(_QWORD *)(v363 + 1952) + 144 * i, &v422, (uint64_t)v416, v417, (unint64_t)v418, v414, v415, rep, &v421);
      v416 = 0;
      v417 = 0;
      v418 = 0;
      v412 = (uint64_t *)&off_24C9AFD78;
      if (__p)
      {
        v425 = __p;
        operator delete(__p);
      }
      v168 = v423;
      if (!v423)
        goto LABEL_147;
      v169 = (unint64_t *)&v423->__shared_owners_;
      do
        v170 = __ldaxr(v169);
      while (__stlxr(v170 - 1, v169));
      if (!v170)
      {
        ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
        std::__shared_weak_count::__release_weak(v168);
        v171 = (std::__shared_weak_count *)*((_QWORD *)&v422 + 1);
        if (!*((_QWORD *)&v422 + 1))
          goto LABEL_153;
      }
      else
      {
LABEL_147:
        v171 = (std::__shared_weak_count *)*((_QWORD *)&v422 + 1);
        if (!*((_QWORD *)&v422 + 1))
          goto LABEL_153;
      }
      v172 = (unint64_t *)&v171->__shared_owners_;
      do
        v173 = __ldaxr(v172);
      while (__stlxr(v173 - 1, v172));
      if (!v173)
      {
        ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
        std::__shared_weak_count::__release_weak(v171);
      }
LABEL_153:
      *(_QWORD *)v426 = &off_24C9AFD78;
      if (v435)
      {
        v436 = v435;
        operator delete(v435);
      }
      v174 = v434;
      if (!v434)
        goto LABEL_159;
      v175 = (unint64_t *)&v434->__shared_owners_;
      do
        v176 = __ldaxr(v175);
      while (__stlxr(v176 - 1, v175));
      if (!v176)
      {
        ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
        std::__shared_weak_count::__release_weak(v174);
        v177 = (std::__shared_weak_count *)*((_QWORD *)&v433 + 1);
        if (*((_QWORD *)&v433 + 1))
        {
LABEL_160:
          v178 = (unint64_t *)&v177->__shared_owners_;
          do
            v179 = __ldaxr(v178);
          while (__stlxr(v179 - 1, v178));
          if (!v179)
          {
            ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
            std::__shared_weak_count::__release_weak(v177);
          }
        }
      }
      else
      {
LABEL_159:
        v177 = (std::__shared_weak_count *)*((_QWORD *)&v433 + 1);
        if (*((_QWORD *)&v433 + 1))
          goto LABEL_160;
      }
    }
  }
LABEL_166:
  v180 = *(double *)(v23 + 16);
  _Q2 = *(float64x2_t *)v23;
  v182 = *(double *)(v23 + 40);
  _Q4 = *(float64x2_t *)(v23 + 24);
  v184 = *(double *)(v23 + 64);
  _Q6 = *(float64x2_t *)(v23 + 48);
  v186 = *(float64x2_t *)(v11 + 3184);
  _D17 = *(_QWORD *)(v11 + 3224);
  v188 = *(float64x2_t *)(v11 + 3208);
  v189 = *(double *)(v11 + 3248);
  v190 = *(float64x2_t *)(v11 + 3232);
  v191 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v186, *(double *)v23), v188, *(float64x2_t *)v23, 1), v190, v180);
  __asm { FMLA            D21, D17, V2.D[1] }
  v193 = _D21 + v189 * v180;
  v194 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v186, _Q4.f64[0]), v188, _Q4, 1), v190, v182);
  __asm { FMLA            D21, D17, V4.D[1] }
  v196 = _D21 + v189 * v182;
  v197 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v186, _Q6.f64[0]), v188, _Q6, 1), v190, v184);
  __asm { FMLA            D7, D17, V6.D[1] }
  v199 = _D7 + v189 * v184;
  v200 = vmulq_f64(v194, (float64x2_t)vextq_s8((int8x16_t)v197, (int8x16_t)v197, 8uLL));
  v201 = vsubq_f64(v200, (float64x2_t)vdupq_laneq_s64((int64x2_t)v200, 1)).f64[0];
  v202 = (float64x2_t)vextq_s8((int8x16_t)v191, (int8x16_t)v191, 8uLL);
  v203 = vmulq_n_f64(v194, v199);
  v204 = vmulq_n_f64(v197, v196);
  v205 = vsubq_f64(v203, v204);
  v206 = vmulq_f64(v202, v205);
  v207 = v193 * v201 + vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v206, 1), v206).f64[0];
  if (fabs(v207) > 0.00000001)
  {
    v208 = 1.0 / v207;
    v404.f64[0] = vmuld_lane_f64(v208, v205, 1);
    v404.f64[1] = (vmuld_lane_f64(v193, v197, 1) - vmuld_lane_f64(v199, v191, 1)) * v208;
    v405 = (vmuld_lane_f64(v196, v191, 1) - vmuld_lane_f64(v193, v194, 1)) * v208;
    v406 = v208 * vsubq_f64(v204, v203).f64[0];
    v407 = (v199 * v191.f64[0] - v193 * v197.f64[0]) * v208;
    v408 = (v193 * v194.f64[0] - v196 * v191.f64[0]) * v208;
    v409 = v201 * v208;
    v209.f64[0] = v197.f64[0];
    v209.f64[1] = v194.f64[1];
    v410 = vmulq_n_f64(vsubq_f64(vmulq_f64(v202, v209), vmulq_f64(v191, (float64x2_t)vextq_s8((int8x16_t)v197, (int8x16_t)v194, 8uLL))), v208);
  }
  kdebug_trace();
  sub_20EDE9858(*(_QWORD *)(v11 + 2024), *(_QWORD *)(v11 + 2000), v367, &v404, v368 + 128, *(size_t **)(v11 + 1952));
  kdebug_trace();
  kdebug_trace();
  sub_20EDE9BFC(*(unint64_t **)(v11 + 1904), *(_QWORD *)(v11 + 2024), *(_QWORD *)(v11 + 2000), v11 + 2928, v210, v211, v212, v213, v214);
  kdebug_trace();
  v155 = sub_20EDE5C50(v368, v366, *(_QWORD *)v11, v367, (float64x2_t *)v23, v215);
  if (!v155)
  {
    sub_20EDE9E68(&v389);
    if (**(int **)(v389 + 56) > 3
      || (v237 = *(unsigned __int8 *)(v389 + 72),
          v238 = sub_20E8C31DC(v389, "OSLogSurrogateAppender", 1, 0),
          v239 = v238,
          !v237)
      && !v238)
    {
LABEL_352:
      v358 = *(_QWORD *)(v11 + 3432);
      *(_BYTE *)(v358 + 104) = 0;
      *(_OWORD *)(v358 + 88) = 0u;
      *(_OWORD *)(v358 + 72) = 0u;
      *(_OWORD *)(v358 + 56) = 0u;
      *(_QWORD *)(v358 + 112) = 0xBFF0000000000000;
      *(_OWORD *)(v358 + 176) = 0u;
      *(_OWORD *)(v358 + 192) = 0u;
      *(_OWORD *)(v358 + 208) = 0u;
      *(_OWORD *)(v358 + 224) = 0u;
      *(_BYTE *)(v358 + 240) = 0;
      *(_QWORD *)(v358 + 248) = 0xBFF0000000000000;
      *(_QWORD *)(v358 + 264) = 0;
      *(_QWORD *)(v11 + 3448) = 0;
      return v155;
    }
    v412 = &v389;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v414 = std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v415) = 3;
    v416 = "unknown file";
    LODWORD(v417) = 908;
    v420 = 0;
    v418 = "unknown function";
    v419 = 0;
    v240 = *v412;
    v388 = *v412;
    if (*(char *)(*v412 + 39) < 0)
    {
      v242 = *(const char **)(v240 + 16);
      v241 = *(_QWORD *)(v240 + 24);
      v386 = *v412 + 16;
      v309 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v309 & 1) != 0)
        goto LABEL_271;
    }
    else
    {
      v241 = *(unsigned __int8 *)(*v412 + 39);
      v242 = (const char *)(*v412 + 16);
      v386 = (uint64_t)v242;
      v243 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v243 & 1) != 0)
        goto LABEL_271;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v426);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v426);
      if ((_BYTE)v427 && (v426[23] & 0x80000000) != 0)
        operator delete(*(void **)v426);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_271:
    if (byte_254A4A4F8[23] >= 0)
      v310 = byte_254A4A4F8;
    else
      v310 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v311 = byte_254A4A4F8[23];
    else
      v311 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v426 = os_log_create(v310, v242);
    v312 = &v426[8];
    if (v311 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v311 >= 0x17)
    {
      v313 = v239;
      v314 = v242;
      v315 = v237;
      v316 = v11;
      v317 = (v311 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v311 | 7) != 0x17)
        v317 = v311 | 7;
      v318 = v317 + 1;
      v312 = operator new(v317 + 1);
      *(_QWORD *)&v426[16] = v311;
      *(_QWORD *)&v427 = v318 | 0x8000000000000000;
      *(_QWORD *)&v426[8] = v312;
      v11 = v316;
      v237 = v315;
      v242 = v314;
      v239 = v313;
    }
    else
    {
      BYTE7(v427) = v311;
      if (!v311)
      {
LABEL_285:
        v312[v311] = 0;
        BYTE8(v427) = 1;
        v319 = &v428;
        if (v241 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v241 >= 0x17)
        {
          v320 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v241 | 7) != 0x17)
            v320 = v241 | 7;
          v321 = v320 + 1;
          v319 = (unint64_t *)operator new(v320 + 1);
          v429 = v241;
          v430 = v321 | 0x8000000000000000;
          v428 = (unint64_t)v319;
        }
        else
        {
          HIBYTE(v430) = v241;
          if (!v241)
            goto LABEL_293;
        }
        memmove(v319, v242, v241);
LABEL_293:
        *((_BYTE *)v319 + v241) = 0;
        v431 = 1;
        v322 = *(NSObject **)v426;
        if (SHIBYTE(v430) < 0)
          operator delete((void *)v428);
        if (BYTE8(v427) && SBYTE7(v427) < 0)
          operator delete(*(void **)&v426[8]);
        if (*(_QWORD *)v426)
          os_release(*(void **)v426);
        if (v239 && *(_QWORD *)(v239 + 24))
        {
          v323 = _os_log_pack_size();
          v324 = (std::__shared_weak_count_vtbl *)operator new(v323, (std::align_val_t)8uLL);
          v325 = (std::__shared_weak_count *)operator new();
          v326 = v325;
          v325->__shared_owners_ = 0;
          v327 = (unint64_t *)&v325->__shared_owners_;
          v325->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v325->__shared_weak_owners_ = 0;
          v325[1].__vftable = v324;
          *(_QWORD *)v426 = v324;
          *(_QWORD *)&v426[8] = v324;
          *(_QWORD *)&v426[16] = v325;
          do
            v328 = __ldxr(v327);
          while (__stxr(v328 + 1, v327));
          v427 = 0uLL;
          v428 = 0;
          do
            v329 = __ldaxr(v327);
          while (__stlxr(v329 - 1, v327));
          if (!v329)
          {
            ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
            std::__shared_weak_count::__release_weak(v326);
          }
          v330 = *(_QWORD *)v426;
          *(_WORD *)_os_log_pack_fill() = 0;
          v331 = operator new();
          v332 = *(unsigned __int8 *)(v388 + 39);
          v333 = v386;
          if ((v332 & 0x80u) != 0)
          {
            v333 = *(_QWORD *)(v388 + 16);
            v332 = *(_QWORD *)(v388 + 24);
          }
          *(_QWORD *)v331 = v330;
          *(_OWORD *)(v331 + 8) = *(_OWORD *)&v426[8];
          *(_QWORD *)&v426[8] = 0;
          *(_QWORD *)&v426[16] = 0;
          *(_OWORD *)(v331 + 24) = v427;
          v427 = 0uLL;
          *(_QWORD *)(v331 + 40) = v333;
          *(_QWORD *)(v331 + 48) = v332;
          *(_BYTE *)(v331 + 56) = 1;
          *(_QWORD *)&v411 = 0;
          *(_QWORD *)&v390 = v331;
          (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v239 + 24) + 40))(*(_QWORD *)(v239 + 24), &v390);
          v334 = v390;
          *(_QWORD *)&v390 = 0;
          if (v334)
          {
            v335 = *(std::__shared_weak_count **)(v334 + 32);
            if (v335)
            {
              v336 = (unint64_t *)&v335->__shared_owners_;
              do
                v337 = __ldaxr(v336);
              while (__stlxr(v337 - 1, v336));
              if (!v337)
              {
                ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
                std::__shared_weak_count::__release_weak(v335);
              }
            }
            v338 = *(std::__shared_weak_count **)(v334 + 16);
            if (v338)
            {
              v339 = (unint64_t *)&v338->__shared_owners_;
              do
                v340 = __ldaxr(v339);
              while (__stlxr(v340 - 1, v339));
              if (!v340)
              {
                ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
                std::__shared_weak_count::__release_weak(v338);
              }
            }
            MEMORY[0x212BC6398](v334, 0x10F0C40B62ED6C6);
            v341 = v411;
            *(_QWORD *)&v411 = 0;
            if (v341)
            {
              v342 = *(std::__shared_weak_count **)(v341 + 32);
              if (v342)
              {
                v343 = (unint64_t *)&v342->__shared_owners_;
                do
                  v344 = __ldaxr(v343);
                while (__stlxr(v344 - 1, v343));
                if (!v344)
                {
                  ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
                  std::__shared_weak_count::__release_weak(v342);
                }
              }
              v345 = *(std::__shared_weak_count **)(v341 + 16);
              if (v345)
              {
                v346 = (unint64_t *)&v345->__shared_owners_;
                do
                  v347 = __ldaxr(v346);
                while (__stlxr(v347 - 1, v346));
                if (!v347)
                {
                  ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
                  std::__shared_weak_count::__release_weak(v345);
                }
              }
              MEMORY[0x212BC6398](v341, 0x10F0C40B62ED6C6);
            }
          }
          v348 = (std::__shared_weak_count *)*((_QWORD *)&v427 + 1);
          if (*((_QWORD *)&v427 + 1))
          {
            v349 = (unint64_t *)(*((_QWORD *)&v427 + 1) + 8);
            do
              v350 = __ldaxr(v349);
            while (__stlxr(v350 - 1, v349));
            if (!v350)
            {
              ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
              std::__shared_weak_count::__release_weak(v348);
            }
          }
          v351 = *(std::__shared_weak_count **)&v426[16];
          if (*(_QWORD *)&v426[16])
          {
            v352 = (unint64_t *)(*(_QWORD *)&v426[16] + 8);
            do
              v353 = __ldaxr(v352);
            while (__stlxr(v353 - 1, v352));
            if (!v353)
            {
              ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
              std::__shared_weak_count::__release_weak(v351);
            }
          }
        }
        else
        {
          os_log_type_enabled(v322, OS_LOG_TYPE_INFO);
          *(_WORD *)v426 = 0;
          v354 = (void *)_os_log_send_and_compose_impl();
          if (v354)
            free(v354);
        }
        if (v237)
        {
          sub_20E8C003C((uint64_t)&v412, "OptimizeHomography failed!");
          sub_20E863570((uint64_t)&v412);
        }
        sub_20E863570((uint64_t)&v412);
        v355 = v420;
        if (v420)
        {
          v356 = (unint64_t *)&v420->__shared_owners_;
          do
            v357 = __ldaxr(v356);
          while (__stlxr(v357 - 1, v356));
          if (!v357)
          {
            ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
            std::__shared_weak_count::__release_weak(v355);
          }
        }
        goto LABEL_352;
      }
    }
    memmove(v312, v310, v311);
    goto LABEL_285;
  }
  if (*(_BYTE *)v368)
  {
    sub_20EDB4A1C((uint64_t)v426, *(_QWORD *)(v11 + 392), *(_QWORD *)(v11 + 408));
    memset((void *)v433, 1, v428 * v429);
    sub_20EDB4A1C((uint64_t)&v412, *((unint64_t *)&v427 + 1), v429);
    if (!*(_QWORD *)(v11 + 1024))
    {
      sub_20EDB4A1C((uint64_t)&v390, *(_QWORD *)(v11 + 1672), *(_QWORD *)(v11 + 1680));
      v255 = v399;
      if (v394 * v395)
      {
        bzero(v399, v394 * v395);
        v255 = v399;
      }
      *(_QWORD *)&v411 = v255;
      *((_QWORD *)&v411 + 1) = v400;
      if (v400)
      {
        v256 = (unint64_t *)&v400->__shared_owners_;
        do
          v257 = __ldxr(v256);
        while (__stxr(v257 + 1, v256));
      }
      sub_20E8E9964(v11 + 992, &v411, v393, v394, v395, v391, v392, BYTE8(v390), &v398);
      v258 = (std::__shared_weak_count *)*((_QWORD *)&v411 + 1);
      if (*((_QWORD *)&v411 + 1))
      {
        v259 = (unint64_t *)(*((_QWORD *)&v411 + 1) + 8);
        do
          v260 = __ldaxr(v259);
        while (__stlxr(v260 - 1, v259));
        if (!v260)
        {
          ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
          std::__shared_weak_count::__release_weak(v258);
        }
      }
      *(_QWORD *)&v390 = &off_24C9AFD78;
      if (v402)
      {
        v403 = v402;
        operator delete(v402);
      }
      v261 = v401;
      if (v401)
      {
        v262 = (unint64_t *)&v401->__shared_owners_;
        do
          v263 = __ldaxr(v262);
        while (__stlxr(v263 - 1, v262));
        if (!v263)
        {
          ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
          std::__shared_weak_count::__release_weak(v261);
        }
      }
      v264 = v400;
      if (v400)
      {
        v265 = (unint64_t *)&v400->__shared_owners_;
        do
          v266 = __ldaxr(v265);
        while (__stlxr(v266 - 1, v265));
        if (!v266)
        {
          ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
          std::__shared_weak_count::__release_weak(v264);
        }
      }
    }
    sub_20EDB6DF8(v426, (_QWORD *)(v11 + 992), (double *)v23, &v412);
    v390 = v433;
    if (*((_QWORD *)&v433 + 1))
    {
      v216 = (unint64_t *)(*((_QWORD *)&v433 + 1) + 8);
      do
        v217 = __ldxr(v216);
      while (__stxr(v217 + 1, v216));
    }
    sub_20E8E9964(v11 + 824, &v390, *((uint64_t *)&v427 + 1), v428, v429, *(uint64_t *)&v426[16], v427, v426[8], &v432);
    v218 = (std::__shared_weak_count *)*((_QWORD *)&v390 + 1);
    if (*((_QWORD *)&v390 + 1))
    {
      v219 = (unint64_t *)(*((_QWORD *)&v390 + 1) + 8);
      do
        v220 = __ldaxr(v219);
      while (__stlxr(v220 - 1, v219));
      if (!v220)
      {
        ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
        std::__shared_weak_count::__release_weak(v218);
      }
    }
    v412 = (uint64_t *)&off_24C9AFD78;
    if (__p)
    {
      v425 = __p;
      operator delete(__p);
    }
    v221 = v423;
    if (v423)
    {
      v222 = (unint64_t *)&v423->__shared_owners_;
      do
        v223 = __ldaxr(v222);
      while (__stlxr(v223 - 1, v222));
      if (!v223)
      {
        ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
        std::__shared_weak_count::__release_weak(v221);
      }
    }
    v224 = (std::__shared_weak_count *)*((_QWORD *)&v422 + 1);
    if (*((_QWORD *)&v422 + 1))
    {
      v225 = (unint64_t *)(*((_QWORD *)&v422 + 1) + 8);
      do
        v226 = __ldaxr(v225);
      while (__stlxr(v226 - 1, v225));
      if (!v226)
      {
        ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
        std::__shared_weak_count::__release_weak(v224);
      }
    }
    *(_QWORD *)v426 = &off_24C9AFD78;
    if (v435)
    {
      v436 = v435;
      operator delete(v435);
    }
    v227 = v434;
    if (v434)
    {
      v228 = (unint64_t *)&v434->__shared_owners_;
      do
        v229 = __ldaxr(v228);
      while (__stlxr(v229 - 1, v228));
      if (!v229)
      {
        ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
        std::__shared_weak_count::__release_weak(v227);
      }
    }
    v230 = (std::__shared_weak_count *)*((_QWORD *)&v433 + 1);
    if (*((_QWORD *)&v433 + 1))
    {
      v231 = (unint64_t *)(*((_QWORD *)&v433 + 1) + 8);
      do
        v232 = __ldaxr(v231);
      while (__stlxr(v232 - 1, v231));
      if (!v232)
      {
        ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
        std::__shared_weak_count::__release_weak(v230);
      }
    }
  }
  sub_20EDEAB5C(v11, (__int128 *)v23, v365, (float64x2_t *)a5, v11 + 16);
  v233 = *(_QWORD *)(v11 + 16);
  v234 = *(char **)(v11 + 24);
  v235 = (uint64_t)&v234[-v233];
  if ((unint64_t)&v234[-v233] <= 0x2F)
  {
    *(_DWORD *)(v11 + 64) = 0;
    sub_20E9BF954((_QWORD *)(v11 + 40), (char *)v233, v234, (unint64_t)v235 >> 4);
    v236 = *(uint64_t **)(v368 + 128);
    if (v236 == *(uint64_t **)(v368 + 136))
      goto LABEL_262;
    goto LABEL_242;
  }
  v244 = v235 >> 4;
  v245 = (v235 >> 4) - 1;
  if (v245)
  {
    v246 = *(double *)v233;
    v247 = *(double *)(v233 + 8);
    v248 = (double *)(v233 + 24);
    v249 = 0.0;
    v250 = v245;
    v251 = v247;
    v252 = *(double *)v233;
    do
    {
      v253 = *v248;
      v254 = v249 - v252 * *v248;
      v252 = *(v248 - 1);
      v249 = v254 + v251 * v252;
      v248 += 2;
      v251 = v253;
      --v250;
    }
    while (v250);
  }
  else
  {
    v246 = *(double *)v233;
    v247 = *(double *)(v233 + 8);
    v249 = 0.0;
  }
  v267 = v249 - v247 * *(double *)(v233 + 16 * v245) + v246 * *(double *)(v233 + 16 * v245 + 8);
  if (v267 < 0.0)
    v267 = -v267;
  v268 = v267 * 0.5;
  *(float *)(v11 + 64) = v268;
  sub_20E9BF954((_QWORD *)(v11 + 40), (char *)v233, v234, v244);
  v236 = *(uint64_t **)(v368 + 128);
  if (v236 != *(uint64_t **)(v368 + 136))
  {
LABEL_242:
    v269 = *v236;
    if (*v236 != v236[1])
    {
      v270 = *(double **)(v11 + 40);
      v271 = *(double **)(v11 + 48);
      if (v270 != v271)
      {
        v272 = *(unsigned __int8 *)(v368 + 384);
        v273 = *(unsigned __int8 *)(v368 + 385);
        v274 = *(_DWORD *)(v368 + 192);
        v275 = vdup_n_s32(0xC47A0000);
        do
        {
          _D2 = v270[1];
          v277 = (int)*v270;
          v278 = (int)_D2;
          if (v272 && *(_BYTE *)(v368 + 360))
          {
            v277 += *(_DWORD *)(v368 + 328);
            v278 += *(_DWORD *)(v368 + 336);
          }
          if (v273 && *(_BYTE *)(v368 + 376))
          {
            v279 = *(double *)(v368 + 368);
            v277 = (int)(v279 * (double)v277);
            _D2 = (double)v278;
            v278 = (int)(v279 * (double)v278);
          }
          v280 = (float32x2_t)v275;
          if (v277 >= v274)
          {
            v280 = (float32x2_t)v275;
            if (v277 <= *(_DWORD *)(v368 + 200))
            {
              v280 = (float32x2_t)v275;
              if (v278 >= *(_DWORD *)(v368 + 196))
              {
                v280 = (float32x2_t)v275;
                if (v278 <= *(_DWORD *)(v368 + 204))
                {
                  v281 = 2
                       * (*(int *)(v368 + 184)
                        + (uint64_t)v277
                        + *(_QWORD *)(v368 + 168) * (*(int *)(v368 + 188) + (uint64_t)v278));
                  LOWORD(_D2) = *(_WORD *)(v269 + v281);
                  WORD1(_D2) = *(_WORD *)(v236[3] + v281);
                  v280 = (float32x2_t)vcvtq_f32_f16(*(float16x4_t *)&_D2).u64[0];
                  if (v273 && *(_BYTE *)(v368 + 376))
                  {
                    v282 = (const double *)(v368 + 368);
                    _H1 = WORD1(_D2);
                    __asm
                    {
                      FCVT            D1, H1
                      FCVT            D2, H2
                    }
                    _Q2.f64[1] = _D1;
                    v286 = vld1q_dup_f64(v282);
                    v280 = vcvt_f32_f64(vdivq_f64(_Q2, v286));
                  }
                  if (v272 && *(_BYTE *)(v368 + 360))
                    v280 = vsub_f32(v280, vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(v368 + 328))));
                }
              }
            }
          }
          *(float64x2_t *)v270 = vcvtq_f64_f32(v280);
          v270 += 2;
        }
        while (v270 != v271);
      }
    }
  }
LABEL_262:
  if (*(_BYTE *)(v368 + 392))
  {
    v287 = *(_QWORD *)(v11 + 1832);
    v288 = *(_QWORD *)(v11 + 1840);
    v289 = *(double *)(v11 + 1824);
    if ((v287 > 1
       || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageMatchingScore.cpp", 87, (uint64_t)"width > 1", 9, (uint64_t)&unk_210260559, 0, (void (*)(void **))sub_21023DDB0))&& (v288 > 1|| !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageMatchingScore.cpp", 88, (uint64_t)"height > 1", 10, (uint64_t)&unk_210260559, 0, (void (*)(void **))sub_21023DDB0))&& (v289 > 0.0|| !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageMatchingScore.cpp",
             89,
             (uint64_t)"image_width_meters > 0.0",
             24,
             (uint64_t)&unk_210260559,
             0,
             (void (*)(void **))sub_21023DDB0)))
    {
      _D1 = -(v289 / (double)v287 * ((double)v288 + -1.0)) * 0.5;
      _Q4 = *(float64x2_t *)(a5 + 32);
      v292 = *(float64x2_t *)(a5 + 64);
      v293 = *(double *)(v364 + 16);
      _Q7 = *(_OWORD *)v364;
      v295 = *(double *)(v364 + 40);
      _Q17 = *(float64x2_t *)(v364 + 24);
      v297 = *(double *)(v364 + 64);
      _Q19 = *(float64x2_t *)(v364 + 48);
      _Q20 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a5, *(double *)v364), _Q4, *(float64x2_t *)v364, 1), v292, v293);
      _D23 = *(_QWORD *)(a5 + 56);
      __asm { FMLA            D22, D23, V7.D[1] }
      *(_QWORD *)&_Q7 = *(_QWORD *)(a5 + 88);
      v302 = _D22 + *(double *)&_Q7 * v293;
      _Q22 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a5, _Q17.f64[0]), _Q4, _Q17, 1), v292, v295);
      __asm { FMLA            D24, D23, V17.D[1] }
      v305 = _D24 + *(double *)&_Q7 * v295;
      _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a5, _Q19.f64[0]), _Q4, _Q19, 1), v292, v297);
      __asm { FMLA            D4, D23, V19.D[1] }
      _Q4.f64[0] = _Q4.f64[0] + *(double *)&_Q7 * v297;
      *(double *)&_Q7 = v289 / (double)v287;
      _Q17.f64[0] = 0.0;
      _Q17.f64[1] = *(double *)&_Q7;
      __asm
      {
        FMLA            D18, D1, V20.D[1]
        FMLA            D19, D1, V22.D[1]
        FMLA            D0, D1, V3.D[1]
      }
      *(float64x2_t *)v23 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)_Q7, _Q20.f64[0]), _Q17, _Q20, 1), (float64x2_t)0, v302);
      *(double *)(v23 + 16) = v302 + _D18;
      *(float64x2_t *)(v23 + 24) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)_Q7, _Q22.f64[0]), _Q17, _Q22, 1), (float64x2_t)0, v305);
      *(double *)(v23 + 40) = v305 + _Q19.f64[0];
      *(float64x2_t *)(v23 + 48) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)_Q7, _Q3.f64[0]), _Q17, _Q3, 1), (float64x2_t)0, _Q4.f64[0]);
      *(double *)(v23 + 64) = _Q4.f64[0] + _D0;
      return v155;
    }
LABEL_354:
    abort();
  }
  return v155;
}

void sub_20EDED2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  uint64_t v71;

  if (*(_BYTE *)(v71 - 232))
  {
    if (*(char *)(v71 - 233) < 0)
      operator delete(*(void **)(v71 - 256));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a71);
  _Unwind_Resume(a1);
}

void sub_20EDED330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;
  char a71;
  uint64_t v71;

  sub_20E86E8C4(&a42);
  sub_20E86E8C4(&a69);
  sub_20E86E658(v71 - 256);
  sub_20E863714((uint64_t)&a71);
  _Unwind_Resume(a1);
}

void sub_20EDED35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  uint64_t v71;

  sub_20E86E658(v71 - 256);
  sub_20E863714((uint64_t)&a71);
  _Unwind_Resume(a1);
}

void sub_20EDED378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  uint64_t v71;

  MEMORY[0x212BC6398](v71, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a71);
  _Unwind_Resume(a1);
}

void sub_20EDED3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;

  sub_20E863714((uint64_t)&a71);
  _Unwind_Resume(a1);
}

void sub_20EDED3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  uint64_t a71;
  uint64_t v71;

  sub_20E86665C((uint64_t)&a69);
  sub_20E8E481C(&a42);
  sub_20E8E481C(&a71);
  sub_20E8E481C((_QWORD *)(v71 - 256));
  _Unwind_Resume(a1);
}

void sub_20EDED3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;
  uint64_t v71;

  sub_20E8E481C(&a71);
  sub_20E8E481C((_QWORD *)(v71 - 256));
  _Unwind_Resume(a1);
}

void sub_20EDED48C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8E481C((_QWORD *)(v1 - 256));
  _Unwind_Resume(a1);
}

void sub_20EDED4B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)(v2 - 256) = v1;
  v4 = *(void **)(v2 - 136);
  if (v4)
  {
    *(_QWORD *)(v2 - 128) = v4;
    operator delete(v4);
  }
  v5 = *(std::__shared_weak_count **)(v2 - 144);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *(std::__shared_weak_count **)(v2 - 160);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EDED5D4(double **a1, uint64_t a2, _QWORD *a3, double *a4, double a5, double a6, double a7, double a8, double a9)
{
  unsigned int v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  BOOL v19;
  BOOL v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  double v34;
  float v35;
  float v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  float v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  float v57;
  float v58;
  float v59;
  _BYTE *v60;
  _BYTE *v61;
  unint64_t v62;
  float v63;
  float v65;
  BOOL v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  uint64_t v80;
  float v81;
  float v82;
  float v83;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  unint64_t v91;
  double *v92;
  double *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _BYTE *v99;
  double *v100;
  int64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double *v105;
  _OWORD *v106;
  double *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  unsigned int v113;
  double v114;
  float v115;
  float v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  float32x2_t v121;
  float v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  float32x2_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE *v132;
  float *v133;
  unsigned __int8 *v134;
  unint64_t v135;
  int v136;
  _BYTE *v137;
  float *v138;
  unint64_t v139;
  float v141;
  float32x2_t v142;
  float v143;
  float v144;
  float v145;
  unint64_t v146;
  double *v147;
  double *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  _BYTE *v154;
  double *v155;
  int64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  double *v160;
  _OWORD *v161;
  double *v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  _BYTE *v166;
  float *v167;
  unint64_t v168;
  float v169;
  float v170;
  float v171;
  float v172;
  unsigned int v173;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v13 = *(_DWORD *)(a2 + 288) * *(_DWORD *)(a2 + 288);
  if (v13)
  {
    v14 = (double *)operator new(8 * (*(_DWORD *)(a2 + 288) * *(_DWORD *)(a2 + 288)));
    *a1 = v14;
    a1[1] = v14;
    a1[2] = &v14[v13];
  }
  v173 = v13;
  if (!a4
    || ((v15 = a4[1], v16 = fabs(v15), v17 = a4[2], v18 = fabs(v17), fabs(*a4 + -1.0) <= 2.22044605e-16)
      ? (v19 = v16 <= 2.22044605e-16)
      : (v19 = 0),
        v19 ? (v20 = v18 <= 2.22044605e-16) : (v20 = 0),
        v20
     && fabs(a4[3]) <= 2.22044605e-16
     && fabs(a4[4] + -1.0) <= 2.22044605e-16
     && fabs(a4[5]) <= 2.22044605e-16
     && fabs(a4[6]) <= 2.22044605e-16
     && fabs(a4[7]) <= 2.22044605e-16
     && (LODWORD(a9) = 0, fabs(a4[8] + -1.0) <= 2.22044605e-16)))
  {
    if (!v13)
      return;
    v111 = 0;
    while (1)
    {
      v113 = *(_DWORD *)(a2 + 288);
      if (!v113
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/include/ODT/ImageDetectionAndTracking/ImageMatchingScore.hpp", 85, (uint64_t)"tiles_per_side > 0", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| v113 * v113 <= v111&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/include/ODT/ImageDetectionAndTracking/ImageMatchingScore.hpp", 86, (uint64_t)"tile_id < tiles_per_side * tiles_per_side", 41, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (*(_QWORD *)(a2 + 32) != a3[4] || *(_QWORD *)(a2 + 48) != a3[6])
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/include/ODT/ImageDetectionAndTracking/ImageMatchingScore.hpp", 88, (uint64_t)"template_image.width() == image.width() && template_image.height() == image.height()", 84, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v114 = -1.0;
      if (a3[11] && *(_QWORD *)(a2 + 88))
      {
        v115 = (float)*(unint64_t *)(a2 + 32) / (float)v113;
        v116 = (float)*(unint64_t *)(a2 + 48) / (float)v113;
        v117 = (unint64_t)(float)(v115 * (float)(v111 % v113));
        v118 = (unint64_t)(float)(v116 * (float)(v111 / v113));
        v119 = (unint64_t)(float)(v115 * (float)(v111 % v113 + 1));
        v120 = (unint64_t)(float)(v116 * (float)(v111 / v113 + 1));
        v121 = 0;
        v122 = 0.0;
        v123 = v120 - v118;
        if (v120 <= v118 || v119 <= v117)
        {
          LODWORD(v124) = 0;
          v128 = 0;
        }
        else
        {
          v124 = *(_QWORD *)(a2 + 232);
          v125 = *(_QWORD *)(a2 + 120);
          v126 = a3[15];
          if (v124)
          {
            LODWORD(v124) = 0;
            v127 = 4 * v117;
            v128 = 0;
            do
            {
              v129 = *(_QWORD *)(v125 + 8 * v118);
              v130 = *(_QWORD *)(v126 + 8 * v118);
              v131 = *(_QWORD *)(*(_QWORD *)(a2 + 264) + 8 * v118);
              if (v131)
              {
                v132 = (_BYTE *)(v129 + v117);
                v133 = (float *)(v130 + v127);
                v134 = (unsigned __int8 *)(v131 + v117);
                v135 = v119 - v117;
                do
                {
                  v136 = *v134++;
                  if (v136 && *v133 >= 0.0)
                  {
                    LOBYTE(a9) = *v132;
                    *(float *)&a9 = (float)LODWORD(a9);
                    v122 = v122 + (float)(*v133 * *(float *)&a9);
                    *((float *)&a9 + 1) = *v133;
                    v128 = vadd_f32(v128, *(float32x2_t *)&a9);
                    v121 = vadd_f32(v121, vmul_f32(*(float32x2_t *)&a9, *(float32x2_t *)&a9));
                    LODWORD(v124) = v124 + 1;
                  }
                  ++v132;
                  ++v133;
                  --v135;
                }
                while (v135);
              }
              else
              {
                v137 = (_BYTE *)(v129 + v117);
                v138 = (float *)(v130 + v127);
                v139 = v119 - v117;
                do
                {
                  if (*v138 >= 0.0)
                  {
                    LOBYTE(a9) = *v137;
                    *(float *)&a9 = (float)LODWORD(a9);
                    v122 = v122 + (float)(*v138 * *(float *)&a9);
                    *((float *)&a9 + 1) = *v138;
                    v128 = vadd_f32(v128, *(float32x2_t *)&a9);
                    v121 = vadd_f32(v121, vmul_f32(*(float32x2_t *)&a9, *(float32x2_t *)&a9));
                    LODWORD(v124) = v124 + 1;
                  }
                  ++v137;
                  ++v138;
                  --v139;
                }
                while (v139);
              }
              ++v118;
            }
            while (v118 != v120);
          }
          else
          {
            v128 = 0;
            do
            {
              v166 = (_BYTE *)(*(_QWORD *)(v125 + 8 * v118) + v117);
              v167 = (float *)(*(_QWORD *)(v126 + 8 * v118) + 4 * v117);
              v168 = v119 - v117;
              do
              {
                if (*v167 >= 0.0)
                {
                  LOBYTE(a9) = *v166;
                  *(float *)&a9 = (float)LODWORD(a9);
                  v122 = v122 + (float)(*v167 * *(float *)&a9);
                  *((float *)&a9 + 1) = *v167;
                  v128 = vadd_f32(v128, *(float32x2_t *)&a9);
                  v121 = vadd_f32(v121, vmul_f32(*(float32x2_t *)&a9, *(float32x2_t *)&a9));
                  LODWORD(v124) = v124 + 1;
                }
                ++v166;
                ++v167;
                --v168;
              }
              while (v168);
              ++v118;
            }
            while (v118 != v120);
          }
        }
        v114 = -2.0;
        if ((int)v124 >= (int)((double)(v123 * (v119 - v117)) * 0.5) && (_DWORD)v124 != 0)
        {
          v141 = (float)(int)v124;
          v142 = vsub_f32(vmul_n_f32(v121, (float)(int)v124), vmul_f32(v128, v128));
          *(float *)&a9 = vmuls_lane_f32(v142.f32[0], v142, 1);
          if (*(float *)&a9 <= 0.00000011921)
          {
            if (v142.f32[1] <= 0.00000011921)
            {
              v145 = sqrtf(v142.f32[0]);
              v143 = (float)((float)(v145 / (float)(v141 * -127.5)) + (float)(v145 / (float)(v141 * -127.5))) + 1.0;
              if (v142.f32[0] <= 0.00000011921)
                v143 = 1.0;
            }
            else
            {
              v144 = sqrtf(v142.f32[1]);
              v143 = (float)((float)(v144 / (float)(v141 * -127.5)) + (float)(v144 / (float)(v141 * -127.5))) + 1.0;
            }
          }
          else
          {
            v143 = (float)((float)(v122 * v141) - vmul_lane_f32(v128, v128, 1).f32[0]) / sqrtf(*(float *)&a9);
          }
          v114 = v143;
        }
      }
      v147 = a1[1];
      v146 = (unint64_t)a1[2];
      if ((unint64_t)v147 >= v146)
        break;
      *v147 = v114;
      v112 = (uint64_t)(v147 + 1);
LABEL_87:
      a1[1] = (double *)v112;
      if (++v111 == v173)
        return;
    }
    v148 = *a1;
    v149 = (char *)v147 - (char *)*a1;
    v150 = v149 >> 3;
    v151 = (v149 >> 3) + 1;
    if (v151 >> 61)
      sub_20E867F44();
    v152 = v146 - (_QWORD)v148;
    if (v152 >> 2 > v151)
      v151 = v152 >> 2;
    if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8)
      v153 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v153 = v151;
    if (v153)
    {
      if (v153 >> 61)
        sub_20E877A38();
      v154 = operator new(8 * v153);
      v155 = (double *)&v154[8 * v150];
      *v155 = v114;
      v112 = (uint64_t)(v155 + 1);
      v156 = (char *)v147 - (char *)v148;
      if (v147 == v148)
        goto LABEL_142;
    }
    else
    {
      v154 = 0;
      v155 = (double *)(8 * v150);
      *(double *)(8 * v150) = v114;
      v112 = 8 * v150 + 8;
      v156 = (char *)v147 - (char *)v148;
      if (v147 == v148)
      {
LABEL_142:
        *a1 = v155;
        a1[1] = (double *)v112;
        a1[2] = (double *)&v154[8 * v153];
        if (v148)
          operator delete(v148);
        goto LABEL_87;
      }
    }
    v157 = v156 - 8;
    if (v157 < 0x58)
      goto LABEL_159;
    if ((unint64_t)((char *)v147 - &v154[v149]) < 0x20)
      goto LABEL_159;
    v158 = (v157 >> 3) + 1;
    v159 = 8 * (v158 & 0x3FFFFFFFFFFFFFFCLL);
    v160 = &v147[v159 / 0xFFFFFFFFFFFFFFF8];
    v155 = (double *)((char *)v155 - v159);
    v161 = &v154[8 * v150 - 16];
    v162 = v147 - 2;
    v163 = v158 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v164 = *(_OWORD *)v162;
      *(v161 - 1) = *((_OWORD *)v162 - 1);
      *v161 = v164;
      v161 -= 2;
      v162 -= 4;
      v163 -= 4;
    }
    while (v163);
    v147 = v160;
    if (v158 != (v158 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_159:
      do
      {
        v165 = *((_QWORD *)v147-- - 1);
        *((_QWORD *)v155-- - 1) = v165;
      }
      while (v147 != v148);
    }
    goto LABEL_142;
  }
  if (v13)
  {
    v21 = 0;
    v22 = *a4;
    v23 = v15;
    v24 = v17;
    v25 = a4[3];
    v26 = a4[4];
    v27 = a4[5];
    v170 = v27;
    v171 = v24;
    v28 = a4[6];
    v29 = a4[7];
    v30 = a4[8];
    v169 = v30;
    v172 = v23;
    while (1)
    {
      v32 = *(_DWORD *)(a2 + 288);
      if (!v32
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/include/ODT/ImageDetectionAndTracking/ImageMatchingScore.hpp", 152, (uint64_t)"tiles_per_side > 0", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| v32 * v32 <= v21&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/include/ODT/ImageDetectionAndTracking/ImageMatchingScore.hpp", 153, (uint64_t)"tile_id < tiles_per_side * tiles_per_side", 41, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v33 = a3[11];
      v34 = -1.0;
      if (v33 && *(_QWORD *)(a2 + 88))
      {
        v35 = (float)*(unint64_t *)(a2 + 32) / (float)v32;
        v36 = (float)*(unint64_t *)(a2 + 48) / (float)v32;
        v37 = (unint64_t)(float)(v35 * (float)(v21 % v32));
        v38 = (unint64_t)(float)(v36 * (float)(v21 / v32));
        v39 = (unint64_t)(float)(v35 * (float)(v21 % v32 + 1));
        v40 = (unint64_t)(float)(v36 * (float)(v21 / v32 + 1));
        v41 = 0.0;
        v42 = v40 - v38;
        if (v40 <= v38 || v39 <= v37)
        {
          v43 = 0;
          v55 = 0.0;
          v54 = 0.0;
          v53 = 0.0;
          v52 = 0.0;
        }
        else
        {
          v43 = 0;
          v44 = a3[5];
          v45 = (float)((int)v37 - 1);
          v46 = v28 * v45;
          v47 = v22 * v45;
          v48 = v25 * v45;
          v49 = (float)(v26 * (float)v38) + v170;
          v50 = (float)(v172 * (float)v38) + v171;
          v51 = (float)(v29 * (float)v38) + v169;
          v52 = 0.0;
          v53 = 0.0;
          v54 = 0.0;
          v55 = 0.0;
          v41 = 0.0;
          do
          {
            if (*(_QWORD *)(a2 + 232))
              v56 = *(_QWORD *)(*(_QWORD *)(a2 + 264) + 8 * v38);
            else
              v56 = 0;
            v57 = v46 + v51;
            v58 = v47 + v50;
            v59 = v48 + v49;
            v60 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v38) + v37);
            v61 = (_BYTE *)(v56 + v37);
            v62 = v39 - v37;
            do
            {
              v57 = v57 + v28;
              v58 = v58 + v22;
              v59 = v59 + v25;
              if (fabsf(v57) >= 0.00000011921)
              {
                v63 = v58 * (float)(1.0 / v57);
                if (v63 >= 0.0 && v63 < (float)(unint64_t)(a3[4] - 1))
                {
                  v65 = v59 * (float)(1.0 / v57);
                  v66 = v65 >= 0.0 && v65 < (float)(unint64_t)(a3[6] - 1);
                  if (v66 && (!v56 || *v61))
                  {
                    v67 = v63;
                    v68 = v65;
                    v69 = v63 + 1;
                    v70 = v68 + 1;
                    v71 = v33 + 4 * v44 * v68;
                    v72 = v71 + 4 * v44;
                    v73 = (float)v69 - v63;
                    v74 = (float)v70 - v65;
                    v75 = v73 * v74;
                    v76 = v63 - (float)v63;
                    v77 = v76 * v74;
                    v78 = v65 - (float)v65;
                    v79 = v76 * v78;
                    v80 = 4 * v69;
                    v81 = (float)((float)(v75 * *(float *)(v71 + 4 * v67)) + (float)(v77 * *(float *)(v71 + v80)))
                        + (float)((float)(v78 * v73) * *(float *)(v72 + 4 * v67));
                    v82 = v81 + (float)(v79 * *(float *)(v72 + v80));
                    if (v82 >= 0.0)
                    {
                      LOBYTE(v81) = *v60;
                      v83 = (float)LODWORD(v81);
                      v52 = v52 + (float)(v82 * v83);
                      v54 = v54 + v83;
                      v53 = v53 + v82;
                      v41 = v41 + (float)(v83 * v83);
                      v55 = v55 + (float)(v82 * v82);
                      ++v43;
                    }
                  }
                }
              }
              ++v60;
              ++v61;
              --v62;
            }
            while (v62);
            v51 = v51 + v29;
            v50 = v50 + v172;
            v49 = v49 + v26;
            ++v38;
          }
          while (v38 != v40);
        }
        v34 = -2.0;
        if (v43 >= (int)((double)(v42 * (v39 - v37)) * 0.5) && v43 != 0)
        {
          v85 = (float)v43;
          v86 = (float)(v41 * (float)v43) - (float)(v54 * v54);
          v87 = (float)(v55 * (float)v43) - (float)(v53 * v53);
          if ((float)(v86 * v87) <= 0.00000011921)
          {
            v89 = sqrtf(v86);
            v88 = (float)((float)(v89 / (float)(v85 * -127.5)) + (float)(v89 / (float)(v85 * -127.5))) + 1.0;
            if (v86 <= 0.00000011921)
              v88 = 1.0;
            v90 = sqrtf(v87);
            if (v87 > 0.00000011921)
              v88 = (float)((float)(v90 / (float)(v85 * -127.5)) + (float)(v90 / (float)(v85 * -127.5))) + 1.0;
          }
          else
          {
            v88 = (float)((float)(v52 * v85) - (float)(v54 * v53)) / sqrtf(v86 * v87);
          }
          v34 = v88;
        }
      }
      v92 = a1[1];
      v91 = (unint64_t)a1[2];
      if ((unint64_t)v92 >= v91)
        break;
      *v92 = v34;
      v31 = (uint64_t)(v92 + 1);
LABEL_21:
      a1[1] = (double *)v31;
      if (++v21 == v173)
        return;
    }
    v93 = *a1;
    v94 = (char *)v92 - (char *)*a1;
    v95 = v94 >> 3;
    v96 = (v94 >> 3) + 1;
    if (v96 >> 61)
      sub_20E867F44();
    v97 = v91 - (_QWORD)v93;
    if (v97 >> 2 > v96)
      v96 = v97 >> 2;
    if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
      v98 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v98 = v96;
    if (v98)
    {
      if (v98 >> 61)
        sub_20E877A38();
      v99 = operator new(8 * v98);
      v100 = (double *)&v99[8 * v95];
      *v100 = v34;
      v31 = (uint64_t)(v100 + 1);
      v101 = (char *)v92 - (char *)v93;
      if (v92 == v93)
        goto LABEL_82;
    }
    else
    {
      v99 = 0;
      v100 = (double *)(8 * v95);
      *(double *)(8 * v95) = v34;
      v31 = 8 * v95 + 8;
      v101 = (char *)v92 - (char *)v93;
      if (v92 == v93)
      {
LABEL_82:
        *a1 = v100;
        a1[1] = (double *)v31;
        a1[2] = (double *)&v99[8 * v98];
        if (v93)
          operator delete(v93);
        goto LABEL_21;
      }
    }
    v102 = v101 - 8;
    if (v102 < 0x58)
      goto LABEL_160;
    if ((unint64_t)((char *)v92 - v99 - v94) < 0x20)
      goto LABEL_160;
    v103 = (v102 >> 3) + 1;
    v104 = 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
    v105 = &v92[v104 / 0xFFFFFFFFFFFFFFF8];
    v100 = (double *)((char *)v100 - v104);
    v106 = &v99[8 * v95 - 16];
    v107 = v92 - 2;
    v108 = v103 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v109 = *(_OWORD *)v107;
      *(v106 - 1) = *((_OWORD *)v107 - 1);
      *v106 = v109;
      v106 -= 2;
      v107 -= 4;
      v108 -= 4;
    }
    while (v108);
    v92 = v105;
    if (v103 != (v103 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_160:
      do
      {
        v110 = *((_QWORD *)v92-- - 1);
        *((_QWORD *)v100-- - 1) = v110;
      }
      while (v92 != v93);
    }
    goto LABEL_82;
  }
}

void sub_20EDEE16C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EDEE19C(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  void (**v15)(char *);
  BOOL v16;
  uint64_t v18;
  __int128 v19;

  v3 = 0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7)
    sub_20E867F44();
  if (0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4) > v4)
    v4 = 0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4);
  if (0x8E38E38E38E38E39 * ((uint64_t)(a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3)
    v6 = 0x1C71C71C71C71C7;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x1C71C71C71C71C7)
      sub_20E877A38();
    v7 = (char *)operator new(144 * v6);
  }
  else
  {
    v7 = 0;
  }
  v18 = (uint64_t)&v7[144 * v3];
  *((_QWORD *)&v19 + 1) = &v7[144 * v6];
  sub_20EDEE370(v18, a2);
  v8 = 0;
  v10 = (char *)*a1;
  for (i = a1[1]; (char *)(i + v8) != v10; sub_20EDB79B8(v8 + v18, v8 + i))
    v8 -= 144;
  v12 = (char *)*a1;
  v11 = (char *)a1[1];
  *a1 = v18 + v8;
  *(_QWORD *)&v19 = v18 + 144;
  *(_OWORD *)(a1 + 1) = v19;
  if (v11 != v12)
  {
    v13 = v11 - 144;
    v14 = v11 - 144;
    do
    {
      v15 = *(void (***)(char *))v14;
      v14 -= 144;
      (*v15)(v13);
      v16 = v13 == v12;
      v13 = v14;
    }
    while (!v16);
  }
  if (v12)
    operator delete(v12);
  return v18 + 144;
}

void sub_20EDEE324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20EDB6B64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EDEE370(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  *(_QWORD *)a1 = &off_24C9AFD78;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  v3 = (_QWORD *)(a2 + 32);
  sub_20E8E9964(a1, (__int128 *)(a2 + 88), *(_QWORD *)(a2 + 32), v3[1], v3[2], *(v3 - 2), *(v3 - 1), *((unsigned __int8 *)v3 - 24), v3 + 5);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  return a1;
}

void sub_20EDEE400(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v3 = (void *)v1[15];
  if (v3)
  {
    v1[16] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)v1[14];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)v1[12];
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EDEE48C(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  void (**v15)(char *);
  BOOL v16;
  uint64_t v18;
  __int128 v19;

  v3 = 0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7)
    sub_20E867F44();
  if (0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4) > v4)
    v4 = 0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4);
  if (0x8E38E38E38E38E39 * ((uint64_t)(a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3)
    v6 = 0x1C71C71C71C71C7;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x1C71C71C71C71C7)
      sub_20E877A38();
    v7 = (char *)operator new(144 * v6);
  }
  else
  {
    v7 = 0;
  }
  v18 = (uint64_t)&v7[144 * v3];
  *((_QWORD *)&v19 + 1) = &v7[144 * v6];
  sub_20EDB5734(v18, a2);
  v8 = 0;
  v10 = (char *)*a1;
  for (i = a1[1]; (char *)(i + v8) != v10; sub_20EDB5734(v8 + v18, v8 + i))
    v8 -= 144;
  v12 = (char *)*a1;
  v11 = (char *)a1[1];
  *a1 = v18 + v8;
  *(_QWORD *)&v19 = v18 + 144;
  *(_OWORD *)(a1 + 1) = v19;
  if (v11 != v12)
  {
    v13 = v11 - 144;
    v14 = v11 - 144;
    do
    {
      v15 = *(void (***)(char *))v14;
      v14 -= 144;
      (*v15)(v13);
      v16 = v13 == v12;
      v13 = v14;
    }
    while (!v16);
  }
  if (v12)
    operator delete(v12);
  return v18 + 144;
}

void sub_20EDEE614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20EDB6B64((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EDEE660(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E99F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EDEE670(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E99F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EDEE6A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E9A48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EDEE6B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E9A48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EDEE6E8(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  sub_20EDEE790(*(_QWORD **)(a1 + 160));
  sub_20EDEE7D8(*(_QWORD **)(a1 + 136));
  sub_20E9BCAA8(*(_QWORD **)(a1 + 112));
  sub_20EDEE818(*(_QWORD **)(a1 + 40));
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    sub_20EDEE874((uint64_t *)(v2 + 160));
    sub_20ED98B8C(v2 + 72, *(_QWORD **)(v2 + 80));
    v3 = *(void **)(v2 + 48);
    if (v3)
    {
      *(_QWORD *)(v2 + 56) = v3;
      operator delete(v3);
    }
    sub_20E86872C(v2 + 24, *(_QWORD **)(v2 + 32));
    sub_20E86872C(v2, *(_QWORD **)(v2 + 8));
    JUMPOUT(0x212BC6398);
  }
}

void sub_20EDEE790(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    sub_20EDEE790(*a1);
    sub_20EDEE790(a1[1]);
    v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

void sub_20EDEE7D8(_QWORD *a1)
{
  if (a1)
  {
    sub_20EDEE7D8(*a1);
    sub_20EDEE7D8(a1[1]);
    sub_20FD40A18(a1 + 5);
    operator delete(a1);
  }
}

void sub_20EDEE818(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a1)
  {
    sub_20EDEE818(*a1);
    sub_20EDEE818(a1[1]);
    v2 = (_QWORD *)a1[5];
    a1[5] = 0;
    if (v2)
    {
      v3 = sub_20EDB6628(v2);
      MEMORY[0x212BC6398](v3, 0x10B0C404CA194E4);
    }
    operator delete(a1);
  }
}

void sub_20EDEE874(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = v3[2];
        if (v7)
        {
          v8 = v3[3];
          v5 = (void *)v3[2];
          if (v8 != v7)
          {
            v9 = v8 - 120;
            do
            {
              v11 = *(void **)(v9 + 24);
              if (v11)
              {
                *(_QWORD *)(v9 + 32) = v11;
                operator delete(v11);
              }
              sub_20E86872C(v9, *(_QWORD **)(v9 + 8));
              v10 = v9 - 8;
              v9 -= 128;
            }
            while (v10 != v7);
            v5 = (void *)v3[2];
          }
          v3[3] = v7;
          operator delete(v5);
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
}

void sub_20EDEE93C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E9A98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EDEE94C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E9A98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EDEE97C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      v5 = v3;
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

_QWORD *sub_20EDEE9FC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;

  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v7 = (char *)operator new(v5);
    v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[24 * v6];
    do
    {
      v11 = &v7[v8];
      v12 = v3 + v8;
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = 0;
      v14 = *(_BYTE **)(v3 + v8);
      v13 = *(_BYTE **)(v3 + v8 + 8);
      v15 = v13 - v14;
      if (v13 != v14)
      {
        if (v15 < 0)
          sub_20E867F44();
        v9 = (char *)operator new(v13 - v14);
        *(_QWORD *)v11 = v9;
        *((_QWORD *)v11 + 1) = v9;
        *((_QWORD *)v11 + 2) = &v9[2 * (v15 >> 1)];
        v10 = v15 & 0xFFFFFFFFFFFFFFFELL;
        memcpy(v9, v14, v10);
        *((_QWORD *)v11 + 1) = &v9[v10];
      }
      v8 += 24;
    }
    while (v12 + 24 != v4);
    a1[1] = &v7[v8];
  }
  return a1;
}

void sub_20EDEEB48(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EDEEBCC(unint64_t *a1, unint64_t a2, const __int16 *a3)
{
  unint64_t v6;
  unint64_t v7;
  __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  int16x8_t v17;
  int16x8_t *v18;
  unint64_t v19;
  unint64_t v20;
  __int16 *v21;
  unint64_t v22;
  __int16 *v23;
  unint64_t v24;
  int16x8_t v25;
  int16x8_t *v26;
  unint64_t v27;
  __int16 *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  __int128 *v33;
  unint64_t v34;
  __int128 v35;
  __int16 v36;

  v7 = a1[1];
  v6 = a1[2];
  v8 = (__int16 *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 1)
  {
    if (a2)
    {
      v15 = (a2 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      if (v15 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 2 * a2 > (unint64_t)a3)
        goto LABEL_45;
      v16 = v15 + 1;
      v8 = (__int16 *)(v7 + 2 * (v16 & 0xFFFFFFFFFFFFFFF0));
      v17 = vld1q_dup_s16(a3);
      v18 = (int16x8_t *)(v7 + 16);
      v19 = v16 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v18[-1] = v17;
        *v18 = v17;
        v18 += 2;
        v19 -= 16;
      }
      while (v19);
      if (v16 != (v16 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_45:
        do
          *v8++ = *a3;
        while (v8 != (__int16 *)(v7 + 2 * a2));
      }
      v8 = (__int16 *)(v7 + 2 * a2);
    }
    a1[1] = (unint64_t)v8;
  }
  else
  {
    v9 = v7 - *a1;
    v10 = v9 >> 1;
    if ((uint64_t)((v9 >> 1) + a2) < 0)
      sub_20E867F44();
    v11 = v6 - *a1;
    if (v11 <= (v9 >> 1) + a2)
      v12 = (v9 >> 1) + a2;
    else
      v12 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      if (v13 < 0)
        sub_20E877A38();
      v14 = (char *)operator new(2 * v13);
    }
    else
    {
      v14 = 0;
    }
    v20 = (unint64_t)&v14[2 * v10];
    v21 = (__int16 *)(v20 + 2 * a2);
    v22 = (a2 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    v23 = (__int16 *)v20;
    if (v22 < 0x17)
      goto LABEL_46;
    if (v20 < (unint64_t)(a3 + 1))
    {
      v23 = (__int16 *)&v14[2 * v10];
      if (&v14[2 * a2 + v9] > (char *)a3)
        goto LABEL_46;
    }
    v24 = v22 + 1;
    v23 = (__int16 *)(v20 + 2 * (v24 & 0xFFFFFFFFFFFFFFF0));
    v25 = vld1q_dup_s16(a3);
    v26 = (int16x8_t *)&v14[2 * v10 + 16];
    v27 = v24 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v26[-1] = v25;
      *v26 = v25;
      v26 += 2;
      v27 -= 16;
    }
    while (v27);
    if (v24 != (v24 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_46:
      do
        *v23++ = *a3;
      while (v23 != v21);
    }
    v28 = (__int16 *)*a1;
    if (v7 != *a1)
    {
      v29 = v7 - *a1 - 2;
      if (v29 < 0x1E)
        goto LABEL_47;
      if (v7 - (unint64_t)&v14[v9] < 0x20)
        goto LABEL_47;
      v30 = (v29 >> 1) + 1;
      v31 = 2 * (v30 & 0xFFFFFFFFFFFFFFF0);
      v8 = (__int16 *)(v7 - v31);
      v20 -= v31;
      v32 = &v14[2 * v10 - 16];
      v33 = (__int128 *)(v7 - 16);
      v34 = v30 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 16;
      }
      while (v34);
      if (v30 != (v30 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_47:
        do
        {
          v36 = *--v8;
          *(_WORD *)(v20 - 2) = v36;
          v20 -= 2;
        }
        while (v8 != v28);
      }
      v8 = (__int16 *)*a1;
    }
    *a1 = v20;
    a1[1] = (unint64_t)v21;
    a1[2] = (unint64_t)&v14[2 * v13];
    if (v8)
      operator delete(v8);
  }
}

uint64_t sub_20EDEEE1C(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD **)(result + 96);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = *(void **)(v1 + 80);
    *(_QWORD *)(v1 + 80) = 0;
    if (v4)
      operator delete(v4);
    v5 = *(_QWORD **)(v1 + 56);
    if (v5)
    {
      do
      {
        v6 = (_QWORD *)*v5;
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
    v7 = *(void **)(v1 + 40);
    *(_QWORD *)(v1 + 40) = 0;
    if (v7)
      operator delete(v7);
    v8 = *(_QWORD **)(v1 + 16);
    if (v8)
    {
      do
      {
        v9 = (_QWORD *)*v8;
        operator delete(v8);
        v8 = v9;
      }
      while (v9);
    }
    v10 = *(void **)v1;
    *(_QWORD *)v1 = 0;
    if (v10)
      operator delete(v10);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20EDEEECC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t **v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  std::mutex::lock((std::mutex *)a1);
  v7 = (uint64_t **)(a1 + 72);
  v6 = *(_QWORD **)(a1 + 72);
  if (!v6)
    goto LABEL_12;
  v8 = (uint64_t **)(a1 + 72);
  do
  {
    v9 = v6[4];
    v10 = v9 >= a2;
    if (v9 >= a2)
      v11 = v6;
    else
      v11 = v6 + 1;
    if (v10)
      v8 = (uint64_t **)v6;
    v6 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v8 != v7 && (unint64_t)v8[4] <= a2)
  {
    v22 = 0;
  }
  else
  {
LABEL_12:
    std::mutex::unlock((std::mutex *)a1);
    std::mutex::lock((std::mutex *)a1);
    v12 = *(uint64_t **)(a1 + 72);
    v13 = (uint64_t **)(a1 + 72);
    if (v12)
    {
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t **)v12;
          v14 = v12[4];
          if (v14 <= a2)
            break;
          v12 = *v13;
          v7 = v13;
          if (!*v13)
            goto LABEL_19;
        }
        if (v14 >= a2)
          break;
        v12 = v13[1];
        if (!v12)
        {
          v7 = v13 + 1;
          goto LABEL_19;
        }
      }
    }
    else
    {
LABEL_19:
      v15 = (uint64_t *)operator new(0x38uLL);
      v16 = v15;
      v18 = *a3;
      v17 = a3[1];
      v15[4] = a2;
      v15[5] = v18;
      v15[6] = v17;
      if (v17)
      {
        v19 = (unint64_t *)(v17 + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      *v15 = 0;
      v15[1] = 0;
      v15[2] = (uint64_t)v13;
      *v7 = v15;
      v21 = **(_QWORD **)(a1 + 64);
      if (v21)
      {
        *(_QWORD *)(a1 + 64) = v21;
        v16 = *v7;
      }
      sub_20E868578(*(uint64_t **)(a1 + 72), v16);
      ++*(_QWORD *)(a1 + 80);
    }
    v22 = 1;
  }
  std::mutex::unlock((std::mutex *)a1);
  return v22;
}

void sub_20EDEF00C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EDEF020(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];

  if (a2 != a3)
  {
    v21[7] = v3;
    v21[8] = v4;
    v6 = a2;
    v7 = (_QWORD **)result;
    v8 = result + 1;
    do
    {
      result = sub_20EDEF14C(v7, v8, v21, &v20, v6 + 4);
      if (*result)
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
          goto LABEL_13;
      }
      else
      {
        v10 = (uint64_t **)result;
        v11 = (uint64_t *)operator new(0x38uLL);
        v12 = v11;
        v11[4] = v6[4];
        v11[5] = v6[5];
        v13 = v6[6];
        v11[6] = v13;
        if (v13)
        {
          v14 = (unint64_t *)(v13 + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        v16 = v21[0];
        *v11 = 0;
        v11[1] = 0;
        v11[2] = v16;
        *v10 = v11;
        v17 = (_QWORD *)**v7;
        if (v17)
        {
          *v7 = v17;
          v12 = *v10;
        }
        result = sub_20E868578(v7[1], v12);
        v7[2] = (_QWORD *)((char *)v7[2] + 1);
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
LABEL_13:
            v18 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v18 = (_QWORD *)v6[2];
        v19 = *v18 == (_QWORD)v6;
        v6 = v18;
      }
      while (!v19);
LABEL_3:
      v6 = v18;
    }
    while (v18 != a3);
  }
  return result;
}

_QWORD *sub_20EDEF14C(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  unint64_t v16;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (_QWORD *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v18 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = v18;
          v20 = v18[4];
          if (v16 >= v20)
            break;
          v18 = (_QWORD *)*v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = (_QWORD *)v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (_QWORD *)a2[1];
      do
      {
        v13 = v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (_QWORD *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < v13[4])
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = (_QWORD *)*v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = v22;
            v24 = v22[4];
            if (v6 >= v24)
              break;
            v22 = (_QWORD *)*v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = (_QWORD *)v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

uint64_t sub_20EDEF2FC(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void **v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (**v16)();
  uint64_t (**v17)();
  uint64_t v18;
  std::ios_base *v19;
  unint64_t v20;
  size_t v21;
  void **v22;
  unint64_t v23;
  const void **v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (**v36)();
  uint64_t (**v37)();
  uint64_t *v38;
  uint64_t v39;
  std::ios_base *v40;
  size_t v41;
  void **p_dst;
  unint64_t v43;
  const void **v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void **__dst;
  size_t v65;
  int64_t v66;
  uint64_t (**v67)();
  uint64_t v68;
  uint64_t (**v69)();
  _QWORD v70[2];
  _BYTE v71[16];
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  __int128 __p;
  __int128 v76;
  int v77;
  _QWORD v78[19];
  uint64_t v79[2];

  v3 = a1;
  *(_QWORD *)a1 = &off_24C9E9AE8;
  *(_QWORD *)(a1 + 8) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 80;
  *(_BYTE *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 370) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_WORD *)(a1 + 372) = 2;
  *(_BYTE *)(a1 + 376) = 1;
  *(_OWORD *)(a1 + 384) = xmmword_2102DB520;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 416) = xmmword_2102DB520;
  *(_BYTE *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 440) = 0;
  v4 = (uint64_t *)(a1 + 536);
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 641) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_BYTE *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 736) = xmmword_210377ED0;
  *(_QWORD *)(a1 + 752) = 5000;
  *(_BYTE *)(a1 + 760) = 0;
  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_DWORD *)(v5 + 32) = 1065353216;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 1065353216;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_DWORD *)(v5 + 112) = 1065353216;
  *(_OWORD *)(v5 + 120) = xmmword_2102DB720;
  *(_DWORD *)(v5 + 136) = 50;
  *(_QWORD *)(v3 + 768) = v5;
  *(_QWORD *)(v3 + 776) = sub_20EDEEE1C;
  if (*((_BYTE *)a2 + 64))
  {
    v6 = *a2;
    v7 = a2[1];
    v8 = a2[2];
    *(_OWORD *)(v3 + 417) = *(__int128 *)((char *)a2 + 41);
    *(_OWORD *)(v3 + 392) = v7;
    *(_OWORD *)(v3 + 408) = v8;
    *(_OWORD *)(v3 + 376) = v6;
  }
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0x40C3880000000000;
  *(_WORD *)(v3 + 368) = 2;
  *(_QWORD *)(v3 + 496) = 0xBFF0000000000000;
  *(_QWORD *)(v3 + 504) = 25;
  *(_OWORD *)(v3 + 448) = xmmword_210378DF0;
  *(_QWORD *)(v3 + 464) = 640;
  *(_QWORD *)(v3 + 472) = 0;
  *(_BYTE *)(v3 + 728) = 1;
  *(_QWORD *)(v3 + 208) = 0x3FE3333333333333;
  *(_DWORD *)(v3 + 216) = 5;
  *(_QWORD *)(v3 + 224) = 0x3FE2000000000000;
  *(_DWORD *)(v3 + 232) = 4;
  *(_QWORD *)(v3 + 240) = 0x3FE3333333333333;
  *(_DWORD *)(v3 + 248) = 2;
  *(_QWORD *)(v3 + 256) = 0x3FC8000000000000;
  *(_DWORD *)(v3 + 264) = 4;
  *(_WORD *)(v3 + 512) = 0;
  *(_QWORD *)(v3 + 520) = 360000000000;
  sub_210218568("ObjDetQueue", 0, 1u, 0, 1, 0, (uint64_t *)&__dst);
  v9 = __dst;
  v69 = &off_24CA1E2F8;
  v70[0] = __dst;
  v55 = v3;
  v10 = (_QWORD *)operator new();
  *v10 = &off_24C9B1898;
  v11 = (_QWORD *)operator new();
  *v11 = &off_24CA1E2F8;
  v11[1] = v9;
  v10[1] = v11;
  v12 = *v4;
  *v4 = (uint64_t)v10;
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(v12 + 8) = 0;
    if (v13)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v14 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
    MEMORY[0x212BC6398](v12, 0xA1C40BD48D6D6);
  }
  if (!*(_BYTE *)(v3 + 432))
  {
    v37 = (uint64_t (**)())*MEMORY[0x24BEDB800];
    v36 = *(uint64_t (***)())(MEMORY[0x24BEDB800] + 8);
    v63 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
    v57 = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v38 = (uint64_t *)(v3 + 544);
    v39 = 1;
    v61 = MEMORY[0x24BEDB870] + 64;
    v59 = MEMORY[0x24BEDB848] + 16;
    do
    {
      v78[0] = v61;
      v69 = v36;
      *(_QWORD *)((char *)&v70[-1] + (_QWORD)*(v36 - 3)) = v63;
      v40 = (std::ios_base *)((char *)&v70[-1] + (_QWORD)*(v69 - 3));
      std::ios_base::init(v40, v70);
      v40[1].__vftable = 0;
      v40[1].__fmtflags_ = -1;
      v69 = (uint64_t (**)())(MEMORY[0x24BEDB870] + 24);
      v78[0] = MEMORY[0x24BEDB870] + 64;
      std::streambuf::basic_streambuf();
      v70[0] = v59;
      __p = 0u;
      v76 = 0u;
      v77 = 16;
      sub_20E86A980(&v69, (uint64_t)"ObjTrkQueue", 11);
      std::ostream::operator<<();
      if ((v77 & 0x10) != 0)
      {
        v43 = *((_QWORD *)&v76 + 1);
        v44 = (const void **)&v73;
        if (*((_QWORD *)&v76 + 1) < v74)
        {
          *((_QWORD *)&v76 + 1) = v74;
          v43 = v74;
          v44 = (const void **)&v73;
        }
      }
      else
      {
        if ((v77 & 8) == 0)
        {
          v41 = 0;
          HIBYTE(v66) = 0;
          p_dst = (void **)&__dst;
          goto LABEL_57;
        }
        v43 = v72;
        v44 = (const void **)v71;
      }
      v45 = *v44;
      v41 = v43 - (_QWORD)*v44;
      if (v41 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v41 >= 0x17)
      {
        v46 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v41 | 7) != 0x17)
          v46 = v41 | 7;
        v47 = v46 + 1;
        p_dst = (void **)operator new(v46 + 1);
        v65 = v41;
        v66 = v47 | 0x8000000000000000;
        __dst = p_dst;
        v3 = v55;
      }
      else
      {
        HIBYTE(v66) = v43 - *(_BYTE *)v44;
        p_dst = (void **)&__dst;
        if (!v41)
          goto LABEL_57;
      }
      memmove(p_dst, v45, v41);
LABEL_57:
      *((_BYTE *)p_dst + v41) = 0;
      if (v66 >= 0)
        v48 = (char *)&__dst;
      else
        v48 = (char *)__dst;
      sub_210218568(v48, 0, 0, -11, 1, 0, v79);
      v49 = v79[0];
      v67 = &off_24CA1E2F8;
      v68 = v79[0];
      v50 = (_QWORD *)operator new();
      *v50 = &off_24C9B1898;
      v51 = (_QWORD *)operator new();
      *v51 = &off_24CA1E2F8;
      v51[1] = v49;
      v50[1] = v51;
      v52 = *v38;
      *v38 = (uint64_t)v50;
      if (v52)
      {
        v53 = *(_QWORD *)(v52 + 8);
        *(_QWORD *)(v52 + 8) = 0;
        if (v53)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
          v54 = *(_QWORD *)(v52 + 8);
          *(_QWORD *)(v52 + 8) = 0;
          if (v54)
            (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
        }
        MEMORY[0x212BC6398](v52, 0xA1C40BD48D6D6);
      }
      if (SHIBYTE(v66) < 0)
        operator delete(__dst);
      v69 = v37;
      *(_QWORD *)((char *)&v70[-1] + (_QWORD)*(v37 - 3)) = v57;
      v70[0] = MEMORY[0x24BEDB848] + 16;
      if (SBYTE7(v76) < 0)
        operator delete((void *)__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x212BC6290](v78);
      v38 += 3;
      ++v39;
    }
    while (v39 != 5);
  }
  if (*(_WORD *)(v3 + 372))
  {
    v15 = 0;
    v16 = (uint64_t (**)())*MEMORY[0x24BEDB800];
    v17 = *(uint64_t (***)())(MEMORY[0x24BEDB800] + 8);
    v62 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
    v56 = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v18 = v3 + 640;
    v60 = MEMORY[0x24BEDB870] + 64;
    v58 = MEMORY[0x24BEDB848] + 16;
    do
    {
      v78[0] = v60;
      v69 = v17;
      *(_QWORD *)((char *)&v70[-1] + (_QWORD)*(v17 - 3)) = v62;
      v19 = (std::ios_base *)((char *)&v70[-1] + (_QWORD)*(v69 - 3));
      std::ios_base::init(v19, v70);
      v19[1].__vftable = 0;
      v19[1].__fmtflags_ = -1;
      v69 = (uint64_t (**)())(MEMORY[0x24BEDB870] + 24);
      v78[0] = MEMORY[0x24BEDB870] + 64;
      std::streambuf::basic_streambuf();
      v70[0] = v58;
      __p = 0u;
      v76 = 0u;
      v77 = 16;
      sub_20E86A980(&v69, (uint64_t)"ObjTrkRefImgAdditionQueue", 25);
      v20 = v15 + 1;
      std::ostream::operator<<();
      if ((v77 & 0x10) != 0)
      {
        v23 = *((_QWORD *)&v76 + 1);
        v24 = (const void **)&v73;
        if (*((_QWORD *)&v76 + 1) < v74)
        {
          *((_QWORD *)&v76 + 1) = v74;
          v23 = v74;
          v24 = (const void **)&v73;
        }
      }
      else
      {
        if ((v77 & 8) == 0)
        {
          v21 = 0;
          HIBYTE(v66) = 0;
          v22 = (void **)&__dst;
          goto LABEL_26;
        }
        v23 = v72;
        v24 = (const void **)v71;
      }
      v25 = *v24;
      v21 = v23 - (_QWORD)*v24;
      if (v21 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v21 >= 0x17)
      {
        v26 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17)
          v26 = v21 | 7;
        v27 = v26 + 1;
        v22 = (void **)operator new(v26 + 1);
        v65 = v21;
        v66 = v27 | 0x8000000000000000;
        __dst = v22;
        v3 = v55;
      }
      else
      {
        HIBYTE(v66) = v23 - *(_BYTE *)v24;
        v22 = (void **)&__dst;
        if (!v21)
          goto LABEL_26;
      }
      memmove(v22, v25, v21);
LABEL_26:
      *((_BYTE *)v22 + v21) = 0;
      if (v66 >= 0)
        v28 = (char *)&__dst;
      else
        v28 = (char *)__dst;
      sub_210218568(v28, 0, 0, -11, 1, 0, v79);
      v29 = v79[0];
      v67 = &off_24CA1E2F8;
      v68 = v79[0];
      v30 = (_QWORD *)operator new();
      *v30 = &off_24C9B1898;
      v31 = (_QWORD *)operator new();
      *v31 = &off_24CA1E2F8;
      v31[1] = v29;
      v30[1] = v31;
      v32 = *(_QWORD *)(v18 + 8 * v15);
      *(_QWORD *)(v18 + 8 * v15) = v30;
      if (v32)
      {
        v33 = *(_QWORD *)(v32 + 8);
        *(_QWORD *)(v32 + 8) = 0;
        if (v33)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
          v34 = *(_QWORD *)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          if (v34)
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        }
        MEMORY[0x212BC6398](v32, 0xA1C40BD48D6D6);
      }
      if (SHIBYTE(v66) < 0)
        operator delete(__dst);
      v69 = v16;
      *(_QWORD *)((char *)&v70[-1] + (_QWORD)*(v16 - 3)) = v56;
      v70[0] = MEMORY[0x24BEDB848] + 16;
      if (SBYTE7(v76) < 0)
        operator delete((void *)__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x212BC6290](v78);
      ++v15;
    }
    while (v20 < *(unsigned __int16 *)(v3 + 372));
  }
  if (*(double *)(v3 + 448) < *(double *)(v3 + 456)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/TrackerBase.cpp", 138, (uint64_t)"detection_time_interval_ >= detection_synthesis_time_interval_", 62, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return v3;
}

void sub_20EDEFC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t **a9, void **a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t v33;
  void *v34;

  v33 = *(_QWORD *)(v31 + 768);
  *(_QWORD *)(v31 + 768) = 0;
  if (v33)
    (*(void (**)(void))(v31 + 776))();
  sub_20EDA923C(v31 + 672);
  sub_20EDB4B1C(a9);
  sub_20EDEFEBC((uint64_t *)(v31 + 648));
  sub_20EDEFEBC((uint64_t *)(v31 + 640));
  sub_20EDEFF30((uint64_t *)(v31 + 616));
  sub_20EDEFF30((uint64_t *)(v31 + 592));
  sub_20EDEFF30((uint64_t *)(v31 + 568));
  sub_20EDEFF30((uint64_t *)(v31 + 544));
  sub_20EDEFEBC(a13);
  sub_20E86665C(v31 + 280);
  sub_20EDB4DEC((_QWORD **)(v31 + 200));
  v34 = *(void **)(v31 + 176);
  if (v34)
    operator delete(v34);
  sub_20E8E5B90((void **)(v31 + 152));
  sub_20E8E5B90(a10);
  sub_20EDEFFEC(a11);
  sub_20EDF00A4(a12);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EDEFEBC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v4 = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(v2 + 8) = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
    MEMORY[0x212BC6398](v2, 0xA1C40BD48D6D6);
  }
  return a1;
}

uint64_t *sub_20EDEFF30(uint64_t *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *a1;
    *a1 = 0;
    if (!v5)
      return a1;
  }
  else
  {
LABEL_5:
    v5 = *a1;
    *a1 = 0;
    if (!v5)
      return a1;
  }
  v6 = *(_QWORD *)(v5 + 8);
  *(_QWORD *)(v5 + 8) = 0;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *(_QWORD *)(v5 + 8);
    *(_QWORD *)(v5 + 8) = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  MEMORY[0x212BC6398](v5, 0xA1C40BD48D6D6);
  return a1;
}

uint64_t sub_20EDEFFEC(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v6;
  char *v7;
  char *v8;
  char *v9;
  void *v10;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(void ***)a1;
    if (*(_QWORD *)a1)
    {
      v3 = *(void ***)(a1 + 8);
      v4 = *(void ***)a1;
      if (v3 != v2)
      {
        v5 = *(void ***)(a1 + 8);
        do
        {
          v8 = (char *)*(v5 - 3);
          v5 -= 3;
          v7 = v8;
          if (v8)
          {
            v9 = (char *)*(v3 - 2);
            v6 = v7;
            if (v9 != v7)
            {
              do
              {
                v10 = (void *)*((_QWORD *)v9 - 30);
                if (v10)
                {
                  *((_QWORD *)v9 - 29) = v10;
                  operator delete(v10);
                }
                v9 -= 248;
              }
              while (v9 != v7);
              v6 = *v5;
            }
            *(v3 - 2) = v7;
            operator delete(v6);
          }
          v3 = v5;
        }
        while (v5 != v2);
        v4 = *(void ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

void sub_20EDF00A4(uint64_t a1)
{
  sub_20E8D03C0(a1 + 64, *(_QWORD **)(a1 + 72));
  std::mutex::~mutex((std::mutex *)a1);
}

uint64_t sub_20EDF00D0(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void **v54;
  void **v55;
  void *v56;
  void **v57;
  void *v58;
  char *v59;
  char *v60;
  char *v61;
  void *v62;

  *(_QWORD *)a1 = &off_24C9E9AE8;
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 536) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 536)
                                                                                                 + 8));
  if (*(_WORD *)(a1 + 372))
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 640 + 8 * v2) + 8);
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
      ++v2;
    }
    while (v2 < *(unsigned __int16 *)(a1 + 372));
  }
  v4 = *(_QWORD *)(a1 + 768);
  *(_QWORD *)(a1 + 768) = 0;
  if (v4)
    (*(void (**)(void))(a1 + 776))();
  if (*(char *)(a1 + 727) < 0)
  {
    operator delete(*(void **)(a1 + 704));
    if ((*(char *)(a1 + 703) & 0x80000000) == 0)
    {
LABEL_8:
      v5 = *(uint64_t **)(a1 + 664);
      *(_QWORD *)(a1 + 664) = 0;
      if (!v5)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 703) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 680));
  v5 = *(uint64_t **)(a1 + 664);
  *(_QWORD *)(a1 + 664) = 0;
  if (v5)
  {
LABEL_9:
    v6 = sub_20EDB688C(v5);
    MEMORY[0x212BC6398](v6, 0x10B2C409B7882D9);
  }
LABEL_10:
  v7 = *(_QWORD *)(a1 + 648);
  *(_QWORD *)(a1 + 648) = 0;
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    *(_QWORD *)(v7 + 8) = 0;
    if (v8)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v9 = *(_QWORD *)(v7 + 8);
      *(_QWORD *)(v7 + 8) = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    MEMORY[0x212BC6398](v7, 0xA1C40BD48D6D6);
  }
  v10 = *(_QWORD *)(a1 + 640);
  *(_QWORD *)(a1 + 640) = 0;
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    *(_QWORD *)(v10 + 8) = 0;
    if (v11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v12 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)(v10 + 8) = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
    MEMORY[0x212BC6398](v10, 0xA1C40BD48D6D6);
  }
  v13 = *(std::__shared_weak_count **)(a1 + 632);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(_QWORD *)(a1 + 616);
  *(_QWORD *)(a1 + 616) = 0;
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 8);
    *(_QWORD *)(v16 + 8) = 0;
    if (v17)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      v18 = *(_QWORD *)(v16 + 8);
      *(_QWORD *)(v16 + 8) = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
    MEMORY[0x212BC6398](v16, 0xA1C40BD48D6D6);
  }
  v19 = *(std::__shared_weak_count **)(a1 + 608);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(_QWORD *)(a1 + 592);
  *(_QWORD *)(a1 + 592) = 0;
  if (v22)
  {
    v23 = *(_QWORD *)(v22 + 8);
    *(_QWORD *)(v22 + 8) = 0;
    if (v23)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      v24 = *(_QWORD *)(v22 + 8);
      *(_QWORD *)(v22 + 8) = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    }
    MEMORY[0x212BC6398](v22, 0xA1C40BD48D6D6);
  }
  v25 = *(std::__shared_weak_count **)(a1 + 584);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = *(_QWORD *)(a1 + 568);
  *(_QWORD *)(a1 + 568) = 0;
  if (v28)
  {
    v29 = *(_QWORD *)(v28 + 8);
    *(_QWORD *)(v28 + 8) = 0;
    if (v29)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      v30 = *(_QWORD *)(v28 + 8);
      *(_QWORD *)(v28 + 8) = 0;
      if (v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    }
    MEMORY[0x212BC6398](v28, 0xA1C40BD48D6D6);
  }
  v31 = *(std::__shared_weak_count **)(a1 + 560);
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = *(_QWORD *)(a1 + 544);
  *(_QWORD *)(a1 + 544) = 0;
  if (v34)
  {
    v35 = *(_QWORD *)(v34 + 8);
    *(_QWORD *)(v34 + 8) = 0;
    if (v35)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      v36 = *(_QWORD *)(v34 + 8);
      *(_QWORD *)(v34 + 8) = 0;
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    }
    MEMORY[0x212BC6398](v34, 0xA1C40BD48D6D6);
  }
  v37 = *(_QWORD *)(a1 + 536);
  *(_QWORD *)(a1 + 536) = 0;
  if (v37)
  {
    v38 = *(_QWORD *)(v37 + 8);
    *(_QWORD *)(v37 + 8) = 0;
    if (v38)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      v39 = *(_QWORD *)(v37 + 8);
      *(_QWORD *)(v37 + 8) = 0;
      if (v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    }
    MEMORY[0x212BC6398](v37, 0xA1C40BD48D6D6);
  }
  v40 = *(std::__shared_weak_count **)(a1 + 288);
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = *(_QWORD **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v43)
  {
    v44 = sub_20EDB6628(v43);
    MEMORY[0x212BC6398](v44, 0x10B0C404CA194E4);
  }
  v45 = *(void **)(a1 + 176);
  if (v45)
    operator delete(v45);
  v46 = *(_QWORD *)(a1 + 152);
  if (v46)
  {
    v47 = *(_QWORD *)(a1 + 160);
    v48 = *(void **)(a1 + 152);
    if (v47 != v46)
    {
      do
      {
        v49 = *(void **)(v47 - 240);
        if (v49)
        {
          *(_QWORD *)(v47 - 232) = v49;
          operator delete(v49);
        }
        v47 -= 248;
      }
      while (v47 != v46);
      v48 = *(void **)(a1 + 152);
    }
    *(_QWORD *)(a1 + 160) = v46;
    operator delete(v48);
  }
  v50 = *(_QWORD *)(a1 + 128);
  if (v50)
  {
    v51 = *(_QWORD *)(a1 + 136);
    v52 = *(void **)(a1 + 128);
    if (v51 != v50)
    {
      do
      {
        v53 = *(void **)(v51 - 240);
        if (v53)
        {
          *(_QWORD *)(v51 - 232) = v53;
          operator delete(v53);
        }
        v51 -= 248;
      }
      while (v51 != v50);
      v52 = *(void **)(a1 + 128);
    }
    *(_QWORD *)(a1 + 136) = v50;
    operator delete(v52);
  }
  if (*(_BYTE *)(a1 + 120))
  {
    v54 = *(void ***)(a1 + 96);
    if (v54)
    {
      v55 = *(void ***)(a1 + 104);
      v56 = *(void **)(a1 + 96);
      if (v55 != v54)
      {
        v57 = *(void ***)(a1 + 104);
        do
        {
          v60 = (char *)*(v57 - 3);
          v57 -= 3;
          v59 = v60;
          if (v60)
          {
            v61 = (char *)*(v55 - 2);
            v58 = v59;
            if (v61 != v59)
            {
              do
              {
                v62 = (void *)*((_QWORD *)v61 - 30);
                if (v62)
                {
                  *((_QWORD *)v61 - 29) = v62;
                  operator delete(v62);
                }
                v61 -= 248;
              }
              while (v61 != v59);
              v58 = *v57;
            }
            *(v55 - 2) = v59;
            operator delete(v58);
          }
          v55 = v57;
        }
        while (v57 != v54);
        v56 = *(void **)(a1 + 96);
      }
      *(_QWORD *)(a1 + 104) = v54;
      operator delete(v56);
    }
  }
  sub_20E8D03C0(a1 + 72, *(_QWORD **)(a1 + 80));
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return a1;
}

void sub_20EDF0698(uint64_t a1)
{
  sub_20EDF00D0(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EDF06C4()
{
  return 0;
}

uint64_t sub_20EDF06CC()
{
  return 0;
}

uint64_t sub_20EDF06D4()
{
  return 0;
}

BOOL sub_20EDF06DC(uint64_t a1, double a2)
{
  double v3;
  void **v5;
  void **v6;
  void *v7;
  void **v8;
  void *v9;
  char *v10;
  char *v11;
  char *v12;
  void *v13;

  v3 = *(double *)(a1 + 448);
  if (v3 >= a2)
  {
    *(double *)(a1 + 456) = a2;
    if (*(_BYTE *)(a1 + 120))
    {
      v5 = *(void ***)(a1 + 96);
      if (v5)
      {
        v6 = *(void ***)(a1 + 104);
        v7 = *(void **)(a1 + 96);
        if (v6 != v5)
        {
          v8 = *(void ***)(a1 + 104);
          do
          {
            v11 = (char *)*(v8 - 3);
            v8 -= 3;
            v10 = v11;
            if (v11)
            {
              v12 = (char *)*(v6 - 2);
              v9 = v10;
              if (v12 != v10)
              {
                do
                {
                  v13 = (void *)*((_QWORD *)v12 - 30);
                  if (v13)
                  {
                    *((_QWORD *)v12 - 29) = v13;
                    operator delete(v13);
                  }
                  v12 -= 248;
                }
                while (v12 != v10);
                v9 = *v8;
              }
              *(v6 - 2) = v10;
              operator delete(v9);
            }
            v6 = v8;
          }
          while (v8 != v5);
          v7 = *(void **)(a1 + 96);
        }
        *(_QWORD *)(a1 + 104) = v5;
        operator delete(v7);
      }
      *(_BYTE *)(a1 + 120) = 0;
    }
  }
  return v3 >= a2;
}

void sub_20EDF07B8(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  _QWORD *v5[2];

  if (*(_WORD *)(a1 + 372))
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 640 + 8 * v2) + 8);
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
      ++v2;
    }
    while (v2 < *(unsigned __int16 *)(a1 + 372));
  }
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5[0] = 0;
  v5[1] = 0;
  v4 = v5;
  sub_20EDEF020(&v4, *(_QWORD **)(a1 + 72), (_QWORD *)(a1 + 80));
  std::mutex::unlock((std::mutex *)(a1 + 8));
  sub_20EDF089C(a1, &v4);
  sub_20E8D03C0((uint64_t)&v4, v5[0]);
}

void sub_20EDF0864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_20E8D03C0((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20EDF087C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::mutex *v11;

  sub_20E8D03C0((uint64_t)&a10, a11);
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void sub_20EDF089C(uint64_t a1, _QWORD *a2)
{
  unint64_t **v4;
  unint64_t **v5;
  unint64_t *v6;
  unint64_t **v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t **v12;
  unint64_t **v13;
  unint64_t **v14;
  unint64_t *v15;
  unint64_t **v16;

  if (*(_BYTE *)(a1 + 656))
  {
    v4 = (unint64_t **)(a2 + 1);
    v5 = (unint64_t **)*a2;
    if ((_QWORD *)*a2 == a2 + 1)
      return;
    while (1)
    {
      if (*((_BYTE *)v5[5] + 1704))
      {
        v6 = v5[1];
        if (v6)
          goto LABEL_9;
      }
      else
      {
        sub_20EDF5D64(a1, v5 + 5);
        v6 = v5[1];
        if (v6)
        {
          do
          {
LABEL_9:
            v7 = (unint64_t **)v6;
            v6 = (unint64_t *)*v6;
          }
          while (v6);
          goto LABEL_4;
        }
      }
      do
      {
        v7 = (unint64_t **)v5[2];
        v8 = *v7 == (unint64_t *)v5;
        v5 = v7;
      }
      while (!v8);
LABEL_4:
      v5 = v7;
      if (v7 == v4)
        return;
    }
  }
  if (a2[2] >= *(_QWORD *)(a1 + 504))
  {
    *(_QWORD *)(a1 + 672) = 1;
    v9 = (uint64_t *)operator new();
    sub_20EDA9418(v9, a1 + 672);
    v10 = *(uint64_t **)(a1 + 664);
    *(_QWORD *)(a1 + 664) = v9;
    if (v10)
    {
      v11 = sub_20EDB688C(v10);
      MEMORY[0x212BC6398](v11, 0x10B2C409B7882D9);
    }
    v14 = (unint64_t **)*a2;
    v12 = (unint64_t **)(a2 + 1);
    v13 = v14;
    if (v14 != v12)
    {
      do
      {
        sub_20EDF5D64(a1, v13 + 5);
        v15 = v13[1];
        if (v15)
        {
          do
          {
            v16 = (unint64_t **)v15;
            v15 = (unint64_t *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (unint64_t **)v13[2];
            v8 = *v16 == (unint64_t *)v13;
            v13 = v16;
          }
          while (!v8);
        }
        v13 = v16;
      }
      while (v16 != v12);
    }
    *(_BYTE *)(a1 + 656) = 1;
  }
}

void sub_20EDF0A08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C409B7882D9);
  _Unwind_Resume(a1);
}

void sub_20EDF0A2C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, uint64_t *a6@<X5>, __int128 *a7@<X6>, uint64_t a8@<X7>, char **a9@<X8>, double a10@<D0>)
{
  std::mutex *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  _BYTE *v26;
  __int128 v28;
  float64x2_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  float64_t v33;
  unint64_t *v34;
  unint64_t v35;
  double v36;
  uint64_t v37;
  int v38;
  float64_t v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  float64x2_t v46;
  __int128 v47;
  __int128 v48;
  float64x2_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char *v53;
  void *v54;
  _QWORD *v55;
  _OWORD *v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  char **v64;
  void **v65;
  void **v66;
  void *v67;
  void **v68;
  void *v69;
  char *v70;
  char *v71;
  char *v72;
  void *v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  unint64_t v79;
  uint64_t v80;
  void **v81;
  char *v82;
  _QWORD *v83;
  char v84;
  unsigned int v85;
  unsigned int *v86;
  uint64_t v87;
  unint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  float64x2_t v92;
  __int128 v93;
  __int128 v94;
  float64x2_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  char *v99;
  unsigned int v100;
  _QWORD *v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  void *v110;
  _QWORD *v111;
  _QWORD **v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  void **v122;
  void **v123;
  void **v124;
  void **v125;
  void *v126;
  char *v127;
  char *v128;
  char *v129;
  void *v130;
  uint64_t v131;
  unint64_t v132;
  double v137;
  _QWORD *v138;
  unint64_t *v139;
  _QWORD *v140;
  _QWORD *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t *v145;
  _QWORD *v146;
  unint64_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  int8x16_t v151;
  double *v152;
  float64x2_t v153;
  double *v154;
  double *v155;
  unint64_t i;
  double v157;
  void **v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _BYTE *v162;
  _BYTE *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  char *v178;
  int64x2_t v179;
  float64x2_t *v180;
  unint64_t v181;
  float64x2_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  double v195;
  double v196;
  double v197;
  __double2 v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v204;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  double v215;
  double v216;
  double cosval;
  double v218;
  __double2 v219;
  float64x2_t v220;
  float64_t v221;
  unint64_t v222;
  float64_t v223;
  float64_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64_t v229;
  double v230;
  float64_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  double v251;
  double v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  double v256;
  __double2 v257;
  double v258;
  double v259;
  double v260;
  __double2 v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  double v274;
  double v275;
  double v276;
  double v277;
  double v278;
  double v279;
  double v280;
  double v281;
  double v282;
  float64_t v283;
  double v284;
  double v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64_t v292;
  double v293;
  double v294;
  double v295;
  float64_t v296;
  double v297;
  float64_t v298;
  float64_t v299;
  char *v300;
  char *v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  char *v305;
  char *v306;
  char *v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  char *v312;
  uint64_t v313;
  uint64_t v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  float64x2_t v319;
  __int128 v320;
  __int128 v321;
  float64x2_t v322;
  __int128 v323;
  __int128 v324;
  void **v325;
  uint64_t v326;
  const void *v327;
  uint64_t v328;
  char *v329;
  char *v330;
  size_t v331;
  char *v332;
  char *v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  float64x2_t v337;
  float64x2_t v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  void **v342;
  unint64_t v343;
  char **v344;
  unint64_t v345;
  unint64_t v346;
  char **v347;
  void **v348;
  unint64_t v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  char *v353;
  char *v354;
  char *v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  char *v363;
  char *v364;
  char *v365;
  uint64_t v366;
  char *v367;
  char *v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  uint64_t v377;
  __int128 v378;
  char *v379;
  void *v380;
  void *v381;
  char *v382;
  char *j;
  void *v384;
  uint64_t *v385;
  uint64_t v386;
  double v387;
  unint64_t v388;
  float64_t v389;
  uint64_t __sz;
  uint64_t v391;
  double v392;
  unint64_t v393;
  double v394;
  double v395;
  float64x2_t v396;
  float64x2_t v397;
  uint64_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64_t v410;
  unint64_t v411;
  uint64_t v412;
  float64x2_t v413;
  int8x16_t v414;
  float64x2_t v415;
  uint64_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64_t v426;
  float64x2_t v427;
  double v428;
  double v429;
  double v430;
  _QWORD *v431;
  double v432;
  _QWORD *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v437;
  float64x2_t v438;
  float64_t v439;
  double v440;
  float64_t v441;
  const void **v442;
  float64x2_t v443;
  float64_t v444;
  float64x2_t v445;
  float64_t v446;
  const void **v447;
  float64x2_t v448;
  double v449;
  float64x2_t v450;
  float64x2_t v451;
  double v452;
  uint64_t *v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  __int128 v457;
  uint64_t v458;
  _QWORD v459[4];
  unint64_t v460;
  uint64_t v461;
  std::__shared_weak_count *v462;
  std::__shared_weak_count *v463;
  void *v464;
  void *v465;
  _QWORD **v466;
  _QWORD *v467[2];
  _BYTE v468[32];
  float64x2_t v469;
  __int128 v470;
  float64x2_t v471;
  __int128 v472;
  float64x2_t v473;
  void *__p[2];
  float64x2_t v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  uint64_t v482;
  void *v483;
  char *v484;
  char *v485;
  void *v486;
  double *v487;
  double *v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498[2];
  float64x2_t *v499;
  uint64_t v500;
  float64x2_t *v501;
  uint64_t v502;

  v19 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  *(_QWORD *)&v468[16] = 0;
  *(_QWORD *)&v468[8] = 0;
  *(_QWORD *)v468 = &v468[8];
  v20 = *(_QWORD **)(a1 + 72);
  v434 = a1;
  v21 = (_QWORD *)(a1 + 80);
  sub_20EDEF020(v468, v20, v21);
  std::mutex::unlock(v19);
  v22 = *(_QWORD **)v468;
  if (*(_BYTE **)v468 == &v468[8])
  {
LABEL_2:
    sub_20E8D03C0((uint64_t)v468, *(_QWORD **)&v468[8]);
    v23 = v434;
    *(double *)(v434 + 488) = a10 - *(double *)(v434 + 496);
  }
  else
  {
    while (1)
    {
      v24 = atomic_load((unsigned int *)(v22[5] + 1136));
      if (v24 == 1)
        break;
      v25 = (_QWORD *)v22[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (_BYTE *)v22[2];
          _ZF = *(_QWORD *)v26 == (_QWORD)v22;
          v22 = v26;
        }
        while (!_ZF);
      }
      v22 = v26;
      if (v26 == &v468[8])
        goto LABEL_2;
    }
    sub_20E8D03C0((uint64_t)v468, *(_QWORD **)&v468[8]);
    v23 = v434;
    *(double *)(v434 + 496) = a10;
  }
  ++*(_QWORD *)(v23 + 472);
  sub_20EDB79B8((uint64_t)v459, a2);
  v28 = *(_OWORD *)(a4 + 48);
  v456 = *(float64x2_t *)(a4 + 32);
  v457 = v28;
  v458 = *(_QWORD *)(a4 + 64);
  v29 = *(float64x2_t *)(a4 + 16);
  v454 = *(float64x2_t *)a4;
  v455 = v29;
  kdebug_trace();
  sub_21012188C(a2, *(_QWORD *)(v23 + 464), (uint64_t)v468);
  sub_20E8E9964((uint64_t)v459, (__int128 *)((char *)&v472 + 8), *(uint64_t *)&v469.f64[0], *(unint64_t *)&v469.f64[1], v470, *(uint64_t *)&v468[16], *(uint64_t *)&v468[24], v468[8], (uint64_t *)&v471.f64[1]);
  v469 = 0uLL;
  *(_QWORD *)&v470 = 0;
  *(_QWORD *)v468 = &off_24C9AFD78;
  if (__p[1])
  {
    *(void **)&v475.f64[0] = __p[1];
    operator delete(__p[1]);
  }
  v30 = (std::__shared_weak_count *)__p[0];
  if (__p[0])
  {
    v31 = (unint64_t *)((char *)__p[0] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v473.f64[0];
  if (*(_QWORD *)&v473.f64[0])
  {
    v34 = (unint64_t *)(*(_QWORD *)&v473.f64[0] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      (*(void (**)(float64_t))(**(_QWORD **)&v33 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v33));
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v33);
    }
  }
  v36 = (double)v460 / (double)*(unint64_t *)(a2 + 32);
  v454 = vmulq_n_f64(v454, v36);
  v455 = vmulq_n_f64(v455, v36);
  v456 = vmulq_n_f64(v456, v36);
  kdebug_trace();
  v385 = a6;
  v37 = v434;
  v38 = sub_20EDF2CC4(v434, (uint64_t)v459, a3, (__int128 *)&v454, a5, a8, 1, 1, a10, v385, a7);
  if ((v38 & 1) == 0 && *(double *)(v434 + 488) != 0.0)
    (*(void (**)(uint64_t, uint64_t *, unint64_t, uint64_t))(*(_QWORD *)v434 + 48))(v434, a3, v460, v461);
  if (*(double *)(v434 + 456) != 0.0)
  {
    std::mutex::lock(v19);
    v467[1] = 0;
    v467[0] = 0;
    v466 = v467;
    sub_20EDEF020(&v466, *(_QWORD **)(v434 + 72), v21);
    std::mutex::unlock(v19);
    v64 = a9;
    if (v38)
    {
      if (*(_BYTE *)(v434 + 120))
      {
        v65 = *(void ***)(v434 + 96);
        if (v65)
        {
          v66 = *(void ***)(v434 + 104);
          v67 = *(void **)(v434 + 96);
          if (v66 != v65)
          {
            v68 = *(void ***)(v434 + 104);
            do
            {
              v71 = (char *)*(v68 - 3);
              v68 -= 3;
              v70 = v71;
              if (v71)
              {
                v72 = (char *)*(v66 - 2);
                v69 = v70;
                if (v72 != v70)
                {
                  do
                  {
                    v73 = (void *)*((_QWORD *)v72 - 30);
                    if (v73)
                    {
                      *((_QWORD *)v72 - 29) = v73;
                      operator delete(v73);
                    }
                    v72 -= 248;
                  }
                  while (v72 != v70);
                  v69 = *v68;
                }
                *(v66 - 2) = v70;
                operator delete(v69);
              }
              v66 = v68;
            }
            while (v68 != v65);
            v67 = *(void **)(v434 + 96);
            v64 = a9;
          }
          *(_QWORD *)(v434 + 104) = v65;
          operator delete(v67);
        }
        *(_BYTE *)(v434 + 120) = 0;
      }
      v74 = (void **)(v434 + 128);
      v75 = *(_QWORD *)(v434 + 128);
      if (v75)
      {
        v76 = *(_QWORD *)(v434 + 136);
        v77 = *(void **)(v434 + 128);
        if (v76 != v75)
        {
          do
          {
            v78 = *(void **)(v76 - 240);
            if (v78)
            {
              *(_QWORD *)(v76 - 232) = v78;
              operator delete(v78);
            }
            v76 -= 248;
          }
          while (v76 != v75);
          v77 = *v74;
        }
        *(_QWORD *)(v434 + 136) = v75;
        operator delete(v77);
        *v74 = 0;
        *(_QWORD *)(v434 + 136) = 0;
        *(_QWORD *)(v434 + 144) = 0;
        v64 = a9;
      }
      *(_OWORD *)(v434 + 128) = *(_OWORD *)(v434 + 152);
      *(_QWORD *)(v434 + 144) = *(_QWORD *)(v434 + 168);
      *(_QWORD *)(v434 + 160) = 0;
      *(_QWORD *)(v434 + 168) = 0;
      *(_QWORD *)(v434 + 152) = 0;
      *(_QWORD *)(v434 + 184) = 0;
    }
    *v64 = 0;
    v64[1] = 0;
    v64[2] = 0;
    if (*(_BYTE *)(v434 + 120))
    {
      v79 = vcvtad_u64_f64(*(double *)(v434 + 488) / *(double *)(v434 + 456));
      v80 = *(_QWORD *)(v434 + 96);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v434 + 104) - v80) >> 3) <= v79)
        goto LABEL_271;
      v81 = (void **)(v80 + 24 * v79);
      v82 = (char *)v81[2];
      *(_OWORD *)v64 = *(_OWORD *)v81;
      goto LABEL_270;
    }
    v83 = v466;
    if (v466 == v467)
      goto LABEL_114;
    v84 = 1;
    while (1)
    {
      v85 = atomic_load((unsigned int *)(v83[5] + 1136));
      v86 = (unsigned int *)(v83[5] + 1136);
      if (v85 == 2)
      {
        atomic_store(0, v86);
        v87 = v83[5];
        if ((*(_DWORD *)(v87 + 8) & 0x80000000) == 0)
        {
          sub_20EDB4EA0((double *)v87, (uint64_t)v468);
          v88 = *(_QWORD *)(v37 + 160);
          if (v88 >= *(_QWORD *)(v37 + 168))
          {
            v99 = sub_20EDF659C((void **)(v434 + 152), (uint64_t)v468);
            v37 = v434;
          }
          else
          {
            *(_QWORD *)v88 = *(_QWORD *)v468;
            *(_QWORD *)(v88 + 8) = 0;
            *(_QWORD *)(v88 + 16) = 0;
            *(_QWORD *)(v88 + 24) = 0;
            *(_OWORD *)(v88 + 8) = *(_OWORD *)&v468[8];
            *(_QWORD *)(v88 + 24) = *(_QWORD *)&v468[24];
            memset(&v468[8], 0, 24);
            v89 = v470;
            *(float64x2_t *)(v88 + 32) = v469;
            *(_OWORD *)(v88 + 48) = v89;
            v90 = *(_OWORD *)__p;
            v92 = v471;
            v91 = v472;
            *(float64x2_t *)(v88 + 96) = v473;
            *(_OWORD *)(v88 + 112) = v90;
            *(float64x2_t *)(v88 + 64) = v92;
            *(_OWORD *)(v88 + 80) = v91;
            v93 = v478;
            v95 = v475;
            v94 = v476;
            *(_OWORD *)(v88 + 160) = v477;
            *(_OWORD *)(v88 + 176) = v93;
            *(float64x2_t *)(v88 + 128) = v95;
            *(_OWORD *)(v88 + 144) = v94;
            v97 = v480;
            v96 = v481;
            v98 = v479;
            *(_QWORD *)(v88 + 240) = v482;
            *(_OWORD *)(v88 + 208) = v97;
            *(_OWORD *)(v88 + 224) = v96;
            *(_OWORD *)(v88 + 192) = v98;
            v99 = (char *)(v88 + 248);
          }
          *(_QWORD *)(v37 + 160) = v99;
          v101 = (_QWORD *)v37;
          v102 = *(unsigned __int8 *)(v83[5] + 336);
          v103 = v101[23];
          v104 = v101[24];
          if (v103 == v104 << 6)
          {
            if ((uint64_t)(v103 + 1) < 0)
              sub_20E867F44();
            v105 = v104 << 7;
            if (v105 <= (v103 & 0xFFFFFFFFFFFFFFC0) + 64)
              v105 = (v103 & 0xFFFFFFFFFFFFFFC0) + 64;
            if (v103 <= 0x3FFFFFFFFFFFFFFELL)
              v106 = v105;
            else
              v106 = 0x7FFFFFFFFFFFFFFFLL;
            sub_20E8B3B5C((char **)(v434 + 176), v106);
            v101 = (_QWORD *)v434;
            v103 = *(_QWORD *)(v434 + 184);
          }
          v101[23] = v103 + 1;
          v107 = v101[22];
          v108 = v103 >> 6;
          v109 = 1 << v103;
          if (!v102)
          {
            *(_QWORD *)(v107 + 8 * v108) &= ~v109;
            v110 = *(void **)&v468[8];
            v37 = v434;
            if (!*(_QWORD *)&v468[8])
              goto LABEL_105;
LABEL_104:
            *(_QWORD *)&v468[16] = v110;
            operator delete(v110);
            goto LABEL_105;
          }
          *(_QWORD *)(v107 + 8 * v108) |= v109;
          v110 = *(void **)&v468[8];
          v37 = v434;
          if (*(_QWORD *)&v468[8])
            goto LABEL_104;
        }
      }
      else
      {
        v100 = atomic_load(v86);
        v84 &= v100 != 1;
      }
LABEL_105:
      v111 = (_QWORD *)v83[1];
      if (v111)
      {
        do
        {
          v112 = (_QWORD **)v111;
          v111 = (_QWORD *)*v111;
        }
        while (v111);
      }
      else
      {
        do
        {
          v112 = (_QWORD **)v83[2];
          _ZF = *v112 == v83;
          v83 = v112;
        }
        while (!_ZF);
      }
      v83 = v112;
      if (v112 == v467)
      {
        v64 = a9;
        if ((v84 & 1) == 0)
          goto LABEL_271;
LABEL_114:
        v113 = *(_QWORD *)(v37 + 152);
        v114 = *(_QWORD *)(v37 + 160);
        v115 = 126 - 2 * __clz(0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v114 - v113) >> 3));
        if (v114 == v113)
          v116 = 0;
        else
          v116 = v115;
        sub_20EDF67D8(v113, v114, v116, 1);
        if (*(double *)(v37 + 456) == 0.0
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/TrackerBase.cpp", 255, (uint64_t)"detection_synthesis_time_interval_", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(v37 + 160) - *(_QWORD *)(v37 + 152)) >> 3) != *(_QWORD *)(v37 + 184)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/TrackerBase.cpp", 257, (uint64_t)"current_done_tracks_for_synthesis_.size() == current_done_tracks_track_is_smoothed_.size()", 90, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_BYTE *)(v37 + 120)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/TrackerBase.cpp",
               258,
               (uint64_t)"!synthesized_detections_",
               24,
               (uint64_t)"",
               0,
               (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v117 = vcvtad_u64_f64(*(double *)(v37 + 448) / *(double *)(v37 + 456));
        if (v117)
        {
          if (v117 >= 0xAAAAAAAAAAAAAABLL)
            sub_20E867F44();
          v118 = (char *)operator new(24 * v117);
          v119 = &v118[24 * v117];
          bzero(v118, 24 * ((24 * v117 - 24) / 0x18) + 24);
          v120 = &v118[24 * ((24 * v117 - 24) / 0x18) + 24];
          v121 = v37 + 96;
          v435 = v37 + 96;
          if (*(_BYTE *)(v37 + 120))
          {
LABEL_126:
            v122 = *(void ***)v121;
            if (*(_QWORD *)v121)
            {
              v123 = *(void ***)(v37 + 104);
              v124 = v122;
              if (v123 != v122)
              {
                v125 = *(void ***)(v37 + 104);
                do
                {
                  v128 = (char *)*(v125 - 3);
                  v125 -= 3;
                  v127 = v128;
                  if (v128)
                  {
                    v129 = (char *)*(v123 - 2);
                    v126 = v127;
                    if (v129 != v127)
                    {
                      do
                      {
                        v130 = (void *)*((_QWORD *)v129 - 30);
                        if (v130)
                        {
                          *((_QWORD *)v129 - 29) = v130;
                          operator delete(v130);
                        }
                        v129 -= 248;
                      }
                      while (v129 != v127);
                      v126 = *v125;
                    }
                    *(v123 - 2) = v127;
                    operator delete(v126);
                    v37 = v434;
                  }
                  v123 = v125;
                }
                while (v125 != v122);
                v124 = *(void ***)v435;
              }
              *(_QWORD *)(v37 + 104) = v122;
              operator delete(v124);
              v121 = v435;
              *(_QWORD *)v435 = 0;
              *(_QWORD *)(v435 + 8) = 0;
              *(_QWORD *)(v435 + 16) = 0;
            }
            *(_QWORD *)(v37 + 96) = v118;
            *(_QWORD *)(v37 + 104) = v120;
            *(_QWORD *)(v37 + 112) = v119;
            v64 = a9;
            v131 = *(_QWORD *)(v37 + 152);
            if (*(_QWORD *)(v37 + 160) != v131)
            {
LABEL_144:
              v132 = 0;
              __sz = v117;
              v386 = (uint64_t)(8 * v117) >> 3;
              v388 = v117 & 0xFFFFFFFFFFFFFFFCLL;
              v387 = 1.0 / (double)v117;
              __asm { FMOV            V0.2D, #1.0 }
              v389 = *((double *)&_Q0 + 1);
              v137 = 0.5;
              v411 = v117;
              while (1)
              {
                v139 = (unint64_t *)(v131 + 248 * v132);
                v393 = v132;
                if (((*(_QWORD *)(*(_QWORD *)(v37 + 176) + ((v132 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v132) & 1) == 0)
                {
                  if (*(_BYTE *)(v37 + 120))
                  {
                    v158 = *(void ***)v121;
                    v159 = *(_QWORD *)(*(_QWORD *)v121 + 8);
                    if (v159 >= (unint64_t)v158[2])
                    {
                      v138 = sub_20EDF628C(v158, v131 + 248 * v132);
                      v121 = v435;
                    }
                    else
                    {
                      *(_QWORD *)v159 = *v139;
                      *(_QWORD *)(v159 + 8) = 0;
                      v160 = v131;
                      v165 = v131 + 248 * v132;
                      *(_QWORD *)(v159 + 16) = 0;
                      *(_QWORD *)(v159 + 24) = 0;
                      v163 = *(_BYTE **)(v165 + 8);
                      v162 = *(_BYTE **)(v165 + 16);
                      v164 = v162 - v163;
                      if (v162 != v163)
                      {
                        if (v164 < 0)
                          sub_20E867F44();
LABEL_170:
                        v166 = (char *)operator new(v162 - v163);
                        *(_QWORD *)(v159 + 8) = v166;
                        *(_QWORD *)(v159 + 16) = v166;
                        *(_QWORD *)(v159 + 24) = &v166[16 * (v164 >> 4)];
                        memcpy(v166, v163, v164 & 0xFFFFFFFFFFFFFFF0);
                        *(_QWORD *)(v159 + 16) = &v166[v164 & 0xFFFFFFFFFFFFFFF0];
                      }
LABEL_171:
                      v167 = v160 + 248 * v393;
                      v168 = *(_OWORD *)(v167 + 48);
                      *(_OWORD *)(v159 + 32) = *(_OWORD *)(v167 + 32);
                      *(_OWORD *)(v159 + 48) = v168;
                      v169 = *(_OWORD *)(v167 + 64);
                      v170 = *(_OWORD *)(v167 + 80);
                      v171 = *(_OWORD *)(v167 + 112);
                      *(_OWORD *)(v159 + 96) = *(_OWORD *)(v167 + 96);
                      *(_OWORD *)(v159 + 112) = v171;
                      *(_OWORD *)(v159 + 64) = v169;
                      *(_OWORD *)(v159 + 80) = v170;
                      v172 = *(_OWORD *)(v167 + 128);
                      v173 = *(_OWORD *)(v167 + 144);
                      v174 = *(_OWORD *)(v167 + 176);
                      *(_OWORD *)(v159 + 160) = *(_OWORD *)(v167 + 160);
                      *(_OWORD *)(v159 + 176) = v174;
                      *(_OWORD *)(v159 + 128) = v172;
                      *(_OWORD *)(v159 + 144) = v173;
                      v175 = *(_OWORD *)(v167 + 192);
                      v176 = *(_OWORD *)(v167 + 208);
                      v177 = *(_OWORD *)(v167 + 224);
                      *(_QWORD *)(v159 + 240) = *(_QWORD *)(v167 + 240);
                      *(_OWORD *)(v159 + 208) = v176;
                      *(_OWORD *)(v159 + 224) = v177;
                      *(_OWORD *)(v159 + 192) = v175;
                      v138 = (_QWORD *)(v159 + 248);
                      v158[1] = (void *)(v159 + 248);
                      v121 = v435;
                      v64 = a9;
                    }
                    goto LABEL_146;
                  }
LABEL_280:
                  sub_20E866B34();
                }
                v140 = *(_QWORD **)(v37 + 128);
                v141 = *(_QWORD **)(v37 + 136);
                v142 = *v139;
                if (v141 != v140)
                {
                  v143 = 0xEF7BDEF7BDEF7BDFLL * (v141 - v140);
                  do
                  {
                    v144 = v143 >> 1;
                    v145 = &v140[31 * (v143 >> 1)];
                    v147 = *v145;
                    v146 = v145 + 31;
                    v143 += ~(v143 >> 1);
                    if (v147 < v142)
                      v140 = v146;
                    else
                      v143 = v144;
                  }
                  while (v143);
                }
                if (v140 == v141 || *v140 != v142)
                {
                  if (*(_BYTE *)(v37 + 120))
                  {
                    v158 = *(void ***)v121;
                    v159 = *(_QWORD *)(*(_QWORD *)v121 + 8);
                    if (v159 < (unint64_t)v158[2])
                    {
                      *(_QWORD *)v159 = v142;
                      *(_QWORD *)(v159 + 8) = 0;
                      v160 = v131;
                      v161 = v131 + 248 * v393;
                      *(_QWORD *)(v159 + 16) = 0;
                      *(_QWORD *)(v159 + 24) = 0;
                      v163 = *(_BYTE **)(v161 + 8);
                      v162 = *(_BYTE **)(v161 + 16);
                      v164 = v162 - v163;
                      if (v162 != v163)
                      {
                        if (v164 < 0)
                          sub_20E867F44();
                        goto LABEL_170;
                      }
                      goto LABEL_171;
                    }
                    v138 = sub_20EDF628C(v158, (uint64_t)v139);
                    v121 = v435;
LABEL_146:
                    v158[1] = v138;
                    goto LABEL_147;
                  }
                  goto LABEL_280;
                }
                v148.f64[0] = (float64_t)v140[4];
                v149.f64[0] = (float64_t)v140[5];
                v150.f64[0] = (float64_t)v140[6];
                v151.i64[0] = v140[7];
                v430 = v149.f64[0];
                v432 = v148.f64[0];
                v148.f64[1] = (float64_t)v140[8];
                v448 = v148;
                v149.f64[1] = (float64_t)v140[9];
                v148.f64[0] = (float64_t)v140[12];
                v424 = v148;
                v437 = v140[13];
                v443 = v149;
                v428 = *(double *)v151.i64;
                v429 = v150.f64[0];
                v150.f64[1] = (float64_t)v140[10];
                v416 = v140[14];
                v418 = v150;
                v151.i64[1] = v140[11];
                v148.f64[1] = v389;
                v149.f64[1] = v389;
                v412 = v140[15];
                v414 = v151;
                v152 = (double *)(v131 + 248 * v393);
                v153.f64[0] = v152[4];
                v150.f64[0] = v152[5];
                v151.i64[0] = (uint64_t)v152[6];
                v426 = v152[7];
                v153.f64[1] = v152[8];
                v422 = v152[11];
                v149.f64[0] = v152[12];
                v397 = v149;
                v400 = v153;
                v150.f64[1] = v152[9];
                v151.i64[1] = (uint64_t)v152[10];
                v403 = (float64x2_t)v151;
                v407 = v150;
                v392 = v152[13];
                v394 = v152[14];
                v148.f64[0] = v152[15];
                v420 = v148;
                v487 = 0;
                v486 = 0;
                v488 = 0;
                v391 = v131;
                if (v117)
                  break;
                v178 = 0;
                v154 = 0;
                v155 = 0;
                v484 = 0;
                v483 = 0;
                v485 = 0;
LABEL_180:
                v182 = (float64x2_t)vextq_s8(v414, v414, 8uLL);
                *(double *)&v183 = vmlad_n_f64(vmlad_n_f64(vmuld_lane_f64(v397.f64[0], v448, 1), v443.f64[1], v392), v418.f64[1], v394);
                *(double *)&v184 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v397.f64[0], v432), v430, v392), v429, v394);
                *(double *)&v185 = vmlad_n_f64(vmlad_n_f64(vmulq_f64(v397, v424).f64[0], *(double *)&v437, v392), *(double *)&v416, v394);
                *(float64x2_t *)v468 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v400, v432), v407, v430), v403, v429);
                *(_OWORD *)&v468[16] = v184;
                v469 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v400, v448, 1), v407, v443, 1), v403, v418, 1);
                v470 = v183;
                v471 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v400, v424.f64[0]), v407, *(double *)&v437), v403, *(double *)&v416);
                v472 = v185;
                v186 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v468, *(double *)v414.i64), v469, v182.f64[0]), v471, *(double *)&v412);
                v187.f64[0] = v426;
                v187.f64[1] = v422;
                v182.f64[0] = *(double *)&v184 * *(double *)v414.i64
                            + *(double *)&v183 * v182.f64[0]
                            + *(double *)&v185 * *(double *)&v412;
                v473 = vsubq_f64(v187, v186);
                __p[1] = (void *)0x3FF0000000000000;
                __p[0] = (void *)*(_OWORD *)&vsubq_f64(v420, v182);
                if (!v117)
                  goto LABEL_257;
                v425 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v424.f64[0], 0);
                v427 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v448, 1);
                v421 = (float64x2_t)vdupq_lane_s64(v437, 0);
                v423 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v443, 1);
                v417 = (float64x2_t)vdupq_lane_s64(v416, 0);
                v419 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v418, 1);
                v413 = (float64x2_t)vdupq_lane_s64(v412, 0);
                v415 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v414, 1);
                do
                {
                  while (1)
                  {
                    v449 = *v154;
                    if (*v154 < 0.0
                      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/TrackerBase.cpp", 59, (uint64_t)"interpolation_factor >= 0.", 26, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| v449 > 1.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/TrackerBase.cpp", 60, (uint64_t)"interpolation_factor <= 1.", 26, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                    {
                      abort();
                    }
                    memset(v498, 0, sizeof(v498));
                    v497 = 0u;
                    v501 = (float64x2_t *)v468;
                    v502 = 0;
                    v499 = &v497;
                    v500 = 0;
                    sub_20E95B988(&v501, (double **)&v499);
                    v191.f64[0] = v498[0].f64[0];
                    _Q18 = v497;
                    _Q0 = vmulq_f64(_Q18, _Q18);
                    _D1 = v497.f64[1];
                    __asm { FMLA            D0, D1, V18.D[1] }
                    v195 = _Q0.f64[0] + v191.f64[0] * v191.f64[0];
                    if (v195 >= 0.0000002635)
                    {
                      v197 = sqrt(v195);
                      v438 = v497;
                      v444 = v498[0].f64[0];
                      v198 = __sincos_stret(v197);
                      _Q18 = v438;
                      v191.f64[0] = v444;
                      v188.f64[0] = v198.__sinval / v197;
                      _Q0.f64[0] = 1.0 / v195 * (1.0 - v198.__cosval);
                      v196 = 1.0 / v195 * (1.0 - v198.__sinval / v197);
                      if (v195 >= 2.775e-15)
                      {
LABEL_189:
                        if (v195 <= 9.0)
                          _Q0.f64[0] = (_Q0.f64[0] * v137 - v196) / v188.f64[0];
                        else
                          _Q0.f64[0] = (_Q0.f64[0] + v188.f64[0] * -0.5) / (v195 * _Q0.f64[0]);
                        goto LABEL_194;
                      }
                    }
                    else
                    {
                      _Q0.f64[0] = v137 - v195 * (v195 / -720.0 + 0.0416666667);
                      v196 = 0.166666667 - v195 * (v195 / -5040.0 + 0.00833333333);
                      v188.f64[0] = 1.0 - v195 * v196;
                      if (v195 >= 2.775e-15)
                        goto LABEL_189;
                    }
                    _Q0.f64[0] = v195 * 0.0000330687831 + v195 * 0.00138888889 + 0.0833333333;
LABEL_194:
                    v199 = (float64x2_t)vextq_s8((int8x16_t)_Q18, (int8x16_t)_Q18, 8uLL);
                    *(void **)&v188.f64[0] = __p[0];
                    v200.f64[0] = v199.f64[0];
                    v200.f64[1] = v191.f64[0];
                    v201 = (float64x2_t)vextq_s8((int8x16_t)v473, (int8x16_t)v188, 8uLL);
                    v202 = vsubq_f64(vmulq_laneq_f64(_Q18, v473, 1), vmulq_f64(v199, v473));
                    __asm { FMOV            V16.2D, #-0.5 }
                    v204 = vaddq_f64(v188, vmulq_f64(v202, _Q16));
                    v188.f64[1] = v473.f64[0];
                    v191.f64[1] = _Q18.f64[0];
                    _Q2 = vsubq_f64(vmulq_f64(v200, v188), vmulq_f64(v191, v201));
                    v206 = (float64x2_t)vextq_s8((int8x16_t)_Q2, (int8x16_t)v202, 8uLL);
                    v202.f64[1] = _Q2.f64[0];
                    v207 = vmulq_f64(v200, v202);
                    v208 = vmulq_laneq_f64(_Q18, _Q2, 1);
                    v209 = vmulq_f64(v191, v206);
                    *(float64x2_t *)((char *)v498 + 8) = vaddq_f64(vaddq_f64(v473, vmulq_f64(_Q2, _Q16)), vmulq_n_f64(vsubq_f64(v207, v209), _Q0.f64[0]));
                    *(_QWORD *)&v498[1].f64[1] = *(_OWORD *)&vaddq_f64(v204, vmulq_f64(_Q0, vsubq_f64(v208, vmulq_f64(v199, _Q2))));
                    _Q26 = (int8x16_t)vmulq_n_f64(v497, v449);
                    v211 = (float64x2_t)vextq_s8(_Q26, _Q26, 8uLL);
                    v212 = vmulq_n_f64(v498[1], v449);
                    v213 = vmulq_n_f64(v498[0], v449);
                    v189.f64[0] = v212.f64[1];
                    v190.f64[0] = v213.f64[1];
                    _D0 = _Q26.i64[1];
                    __asm { FMLA            D2, D0, V26.D[1] }
                    v215 = vmlad_n_f64(_Q2.f64[0], v213.f64[0], v213.f64[0]);
                    v445 = _Q16;
                    if (v215 >= 0.0000002635)
                    {
                      v218 = sqrt(v215);
                      v450 = v211;
                      v439 = v213.f64[0];
                      v404 = v212;
                      v408 = v189;
                      v398 = _Q26.i64[0];
                      v401 = v190;
                      v395 = v215;
                      v219 = __sincos_stret(v218);
                      cosval = v219.__cosval;
                      _Q26.i64[0] = v398;
                      v190 = v401;
                      v212 = v404;
                      v189 = v408;
                      v213.f64[0] = v439;
                      v211 = v450;
                      v216 = v219.__sinval / v218;
                      v208.f64[0] = 1.0 / v395 * (1.0 - v219.__cosval);
                      v209.f64[0] = 1.0 / v395 * (1.0 - v219.__sinval / v218);
                    }
                    else
                    {
                      v208.f64[0] = v137 - v215 * (v215 / -720.0 + 0.0416666667);
                      v209.f64[0] = 0.166666667 - v215 * (v215 / -5040.0 + 0.00833333333);
                      v216 = 1.0 - v215 * v209.f64[0];
                      cosval = 1.0 - v215 * v208.f64[0];
                    }
                    v220.f64[0] = *(double *)_Q26.i64 * (*(double *)_Q26.i64 * v208.f64[0]) + cosval;
                    v221 = v211.f64[0] * (v211.f64[0] * v208.f64[0]) + cosval;
                    *(double *)&v222 = v213.f64[0] * (v213.f64[0] * v208.f64[0]) + cosval;
                    v223 = v211.f64[0] * (*(double *)_Q26.i64 * v208.f64[0]);
                    v224 = v213.f64[0] * (*(double *)_Q26.i64 * v208.f64[0]);
                    v225.f64[0] = v223 - v213.f64[0] * v216;
                    v220.f64[1] = v223 + v213.f64[0] * v216;
                    v226.f64[1] = 0.0;
                    v226.f64[0] = v224 - v211.f64[0] * v216;
                    *(_QWORD *)&v227.f64[0] = _Q26.i64[0];
                    v227.f64[1] = v211.f64[0];
                    v228.f64[0] = v224 + v211.f64[0] * v216;
                    v229 = v213.f64[0] * (v211.f64[0] * v208.f64[0]);
                    v230 = *(double *)_Q26.i64 * v216;
                    v225.f64[1] = v221;
                    v231 = v229 - v230;
                    v232.f64[1] = 0.0;
                    v232.f64[0] = v229 + v230;
                    v228.f64[1] = v231;
                    v233 = (float64x2_t)v222;
                    v234.f64[0] = v211.f64[0];
                    v234.f64[1] = v213.f64[0];
                    v235.f64[0] = v189.f64[0];
                    v235.f64[1] = v190.f64[0];
                    *(_QWORD *)&v213.f64[1] = _Q26.i64[0];
                    v236.f64[0] = v212.f64[0];
                    v236.f64[1] = v189.f64[0];
                    v237 = vsubq_f64(vmulq_f64(v234, v235), vmulq_f64(v213, v236));
                    v236.f64[0] = v190.f64[0];
                    v236.f64[1] = v212.f64[0];
                    v238 = vsubq_f64(vmulq_f64(v227, v212), vmulq_f64(v211, v190));
                    v239 = vaddq_f64(v236, vmulq_n_f64(v237, v208.f64[0]));
                    v240 = vaddq_f64(v189, vmulq_f64(v238, v208));
                    v241 = (float64x2_t)vextq_s8((int8x16_t)v237, (int8x16_t)v238, 8uLL);
                    v238.f64[1] = v237.f64[0];
                    v242 = vmulq_f64(vsubq_f64(vmulq_laneq_f64(v227, v237, 1), vmulq_f64(v211, v237)), v209);
                    v243 = vmulq_n_f64(vsubq_f64(vmulq_f64(v234, v238), vmulq_f64(v213, v241)), v209.f64[0]);
                    v234.f64[1] = 1.0;
                    *(_QWORD *)&v234.f64[0] = *(_OWORD *)&vaddq_f64(v240, v242);
                    v244 = vaddq_f64(v239, v243);
                    v490 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v226, v432), v427, v232), v425, v233), (float64x2_t)0, v234);
                    v489 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v220, v432), v427, v225), v425, v228), (float64x2_t)0, v244);
                    v492 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v226, v430), v423, v232), v421, v233), (float64x2_t)0, v234);
                    v491 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v220, v430), v423, v225), v421, v228), (float64x2_t)0, v244);
                    v494 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v226, v429), v419, v232), v417, v233), (float64x2_t)0, v234);
                    v493 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v220, v429), v419, v225), v417, v228), (float64x2_t)0, v244);
                    v496 = vaddq_f64(v234, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v226, v428), v415, v232), v413, v233));
                    v495 = vaddq_f64(v244, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v220, v428), v415, v225), v413, v228));
                    memset(v498, 0, sizeof(v498));
                    v497 = 0u;
                    v501 = &v489;
                    v502 = 0;
                    v499 = &v497;
                    v500 = 0;
                    sub_20E95B988(&v501, (double **)&v499);
                    _Q24 = v497;
                    _D15 = v497.f64[1];
                    _Q0 = vmulq_f64(_Q24, _Q24);
                    __asm { FMLA            D0, D15, V24.D[1] }
                    v251 = _Q0.f64[0] + v498[0].f64[0] * v498[0].f64[0];
                    v451 = v497;
                    v440 = v498[0].f64[0];
                    if (v251 >= 0.0000002635)
                    {
                      v256 = sqrt(v251);
                      v257 = __sincos_stret(v256);
                      _Q24 = v451;
                      v245.f64[0] = v257.__sinval / v256;
                      _Q0.f64[0] = 1.0 / v251 * (1.0 - v257.__cosval);
                      v252 = 1.0 / v251 * (1.0 - v257.__sinval / v256);
                      if (v251 < 2.775e-15)
                      {
LABEL_203:
                        v246.f64[0] = v251 * 0.0000330687831 + v251 * 0.00138888889 + 0.0833333333;
                        v253 = (float64x2_t)vextq_s8((int8x16_t)_Q24, (int8x16_t)_Q24, 8uLL);
                        v247.f64[0] = v496.f64[0];
                        v254 = v495;
                        v255 = (float64x2_t)vextq_s8((int8x16_t)v254, (int8x16_t)v254, 8uLL);
                        if (v251 < 0.0000002635)
                          goto LABEL_204;
                        goto LABEL_206;
                      }
                    }
                    else
                    {
                      _Q0.f64[0] = v137 - v251 * (v251 / -720.0 + 0.0416666667);
                      v252 = 0.166666667 - v251 * (v251 / -5040.0 + 0.00833333333);
                      v245.f64[0] = 1.0 - v251 * v252;
                      if (v251 < 2.775e-15)
                        goto LABEL_203;
                    }
                    if (v251 <= 9.0)
                    {
                      v246.f64[0] = (_Q0.f64[0] * v137 - v252) / v245.f64[0];
                      v253 = (float64x2_t)vextq_s8((int8x16_t)_Q24, (int8x16_t)_Q24, 8uLL);
                      v247.f64[0] = v496.f64[0];
                      v254 = v495;
                      v255 = (float64x2_t)vextq_s8((int8x16_t)v254, (int8x16_t)v254, 8uLL);
                      if (v251 < 0.0000002635)
                      {
LABEL_204:
                        v245.f64[0] = v137 - v251 * (v251 / -720.0 + 0.0416666667);
                        _Q0.f64[0] = 0.166666667 - v251 * (v251 / -5040.0 + 0.00833333333);
                        v258 = 1.0 - v251 * _Q0.f64[0];
                        v259 = 1.0 - v251 * v245.f64[0];
                        goto LABEL_207;
                      }
                    }
                    else
                    {
                      v246.f64[0] = (_Q0.f64[0] + v245.f64[0] * -0.5) / (v251 * _Q0.f64[0]);
                      v253 = (float64x2_t)vextq_s8((int8x16_t)_Q24, (int8x16_t)_Q24, 8uLL);
                      v247.f64[0] = v496.f64[0];
                      v254 = v495;
                      v255 = (float64x2_t)vextq_s8((int8x16_t)v254, (int8x16_t)v254, 8uLL);
                      if (v251 < 0.0000002635)
                        goto LABEL_204;
                    }
LABEL_206:
                    v260 = sqrt(v251);
                    v405 = v246;
                    v409 = v253;
                    v399 = v254;
                    v402 = v247;
                    v396 = v255;
                    v261 = __sincos_stret(v260);
                    v259 = v261.__cosval;
                    v255 = v396;
                    v254 = v399;
                    v247 = v402;
                    v246 = v405;
                    v253 = v409;
                    _Q24 = v451;
                    v258 = v261.__sinval / v260;
                    v245.f64[0] = 1.0 / v251 * (1.0 - v261.__cosval);
                    _Q0.f64[0] = 1.0 / v251 * (1.0 - v261.__sinval / v260);
LABEL_207:
                    v262.f64[0] = v253.f64[0];
                    v262.f64[1] = v440;
                    v263.f64[0] = v247.f64[0];
                    v263.f64[1] = v254.f64[0];
                    v264.f64[0] = v254.f64[0];
                    v264.f64[1] = v255.f64[0];
                    v265 = vmulq_f64(v262, v263);
                    v266 = vmulq_f64(_Q24, v255);
                    v263.f64[0] = v440;
                    v263.f64[1] = _Q24.f64[0];
                    v255.f64[1] = v247.f64[0];
                    v267 = vsubq_f64(v265, vmulq_f64(v263, v255));
                    v268 = vsubq_f64(v266, vmulq_f64(v253, v254));
                    v269 = vmulq_f64(v268, v445);
                    v270 = vaddq_f64(v264, vmulq_f64(v267, v445));
                    v271 = (float64x2_t)vextq_s8((int8x16_t)v267, (int8x16_t)v268, 8uLL);
                    v268.f64[1] = v267.f64[0];
                    v272 = vaddq_f64(vaddq_f64(v247, v269), vmulq_f64(v246, vsubq_f64(vmulq_laneq_f64(_Q24, v267, 1), vmulq_f64(v253, v267))));
                    v273 = vaddq_f64(v270, vmulq_n_f64(vsubq_f64(vmulq_f64(v262, v268), vmulq_f64(v263, v271)), v246.f64[0]));
                    v274 = _Q24.f64[0] * (_Q24.f64[0] * v245.f64[0]) + v259;
                    v275 = _D15 * (_D15 * v245.f64[0]) + v259;
                    v276 = v440 * (v440 * v245.f64[0]) + v259;
                    v277 = _D15 * (_Q24.f64[0] * v245.f64[0]);
                    v268.f64[0] = v440 * (_Q24.f64[0] * v245.f64[0]);
                    v271.f64[0] = v440 * (_D15 * v245.f64[0]);
                    v269.f64[0] = _Q24.f64[0] * v258;
                    v278 = _D15 * v258;
                    v279 = v440 * v258;
                    v280 = v277 - v279;
                    v281 = v268.f64[0] + v278;
                    v282 = v277 + v279;
                    v283 = v271.f64[0] - v269.f64[0];
                    v284 = v268.f64[0] - v278;
                    v285 = v271.f64[0] + v269.f64[0];
                    v286 = (float64x2_t)vextq_s8((int8x16_t)v273, (int8x16_t)v272, 8uLL);
                    v287 = vsubq_f64(vmulq_laneq_f64(_Q24, v273, 1), vmulq_f64(v253, v273));
                    v288 = vaddq_f64(v272, vmulq_f64(v287, v245));
                    v272.f64[1] = v273.f64[0];
                    v289 = vsubq_f64(vmulq_f64(v262, v272), vmulq_f64(v263, v286));
                    v290 = (float64x2_t)vextq_s8((int8x16_t)v289, (int8x16_t)v287, 8uLL);
                    v287.f64[1] = v289.f64[0];
                    v489.f64[0] = v274;
                    v489.f64[1] = v282;
                    v490 = (float64x2_t)*(unint64_t *)&v284;
                    v491.f64[0] = v280;
                    v491.f64[1] = v275;
                    v291 = vaddq_f64(vaddq_f64(v273, vmulq_n_f64(v289, v245.f64[0])), vmulq_n_f64(vsubq_f64(vmulq_f64(v262, v287), vmulq_f64(v263, v290)), _Q0.f64[0]));
                    *(_QWORD *)&v292 = *(_OWORD *)&vaddq_f64(v288, vmulq_f64(vsubq_f64(vmulq_laneq_f64(_Q24, v289, 1), vmulq_f64(v253, v289)), _Q0));
                    v492 = (float64x2_t)*(unint64_t *)&v285;
                    v493.f64[0] = v281;
                    v493.f64[1] = v283;
                    v494 = (float64x2_t)*(unint64_t *)&v276;
                    v496.f64[0] = v292;
                    v495 = v291;
                    v496.f64[1] = 1.0;
                    v293 = v274;
                    v294 = v280;
                    v295 = v281;
                    v296 = v489.f64[1];
                    v297 = v275;
                    v298 = v493.f64[1];
                    v299 = v291.f64[1];
                    v300 = v484;
                    if (v484 >= v485)
                      break;
                    *(float64_t *)v484 = v489.f64[0];
                    *((double *)v300 + 1) = v280;
                    *((double *)v300 + 2) = v281;
                    *((_QWORD *)v300 + 3) = *(_QWORD *)&v291.f64[0];
                    *((float64_t *)v300 + 4) = v296;
                    *((double *)v300 + 5) = v275;
                    *((float64_t *)v300 + 6) = v298;
                    *((_QWORD *)v300 + 7) = *(_QWORD *)&v291.f64[1];
                    *((double *)v300 + 8) = v284;
                    *((double *)v300 + 9) = v285;
                    *((double *)v300 + 10) = v276;
                    *((float64_t *)v300 + 11) = v292;
                    v137 = 0.5;
                    v484 = v300 + 96;
                    if (++v154 == v155)
                      goto LABEL_224;
                  }
                  v301 = (char *)v483;
                  v302 = 0xAAAAAAAAAAAAAAABLL * ((v484 - (_BYTE *)v483) >> 5);
                  v303 = v302 + 1;
                  if (v302 + 1 > 0x2AAAAAAAAAAAAAALL)
                    sub_20E867F44();
                  if (0x5555555555555556 * ((v485 - (_BYTE *)v483) >> 5) > v303)
                    v303 = 0x5555555555555556 * ((v485 - (_BYTE *)v483) >> 5);
                  if (0xAAAAAAAAAAAAAAABLL * ((v485 - (_BYTE *)v483) >> 5) >= 0x155555555555555)
                    v304 = 0x2AAAAAAAAAAAAAALL;
                  else
                    v304 = v303;
                  if (v304)
                  {
                    v406 = v489.f64[0];
                    v410 = v491.f64[0];
                    v441 = v493.f64[0];
                    v446 = v291.f64[0];
                    v452 = v292;
                    if (v304 > 0x2AAAAAAAAAAAAAALL)
                      sub_20E877A38();
                    v305 = (char *)operator new(96 * v304);
                    v292 = v452;
                    v295 = v441;
                    v291.f64[0] = v446;
                    v293 = v406;
                    v294 = v410;
                  }
                  else
                  {
                    v305 = 0;
                  }
                  v306 = &v305[96 * v302];
                  *(double *)v306 = v293;
                  *((double *)v306 + 1) = v294;
                  *((double *)v306 + 2) = v295;
                  *((_QWORD *)v306 + 3) = *(_QWORD *)&v291.f64[0];
                  *((float64_t *)v306 + 4) = v296;
                  *((double *)v306 + 5) = v297;
                  *((float64_t *)v306 + 6) = v298;
                  *((float64_t *)v306 + 7) = v299;
                  *((double *)v306 + 8) = v284;
                  *((double *)v306 + 9) = v285;
                  *((double *)v306 + 10) = v276;
                  *((float64_t *)v306 + 11) = v292;
                  v307 = v306;
                  v137 = 0.5;
                  if (v300 != v301)
                  {
                    do
                    {
                      v308 = *((_OWORD *)v300 - 5);
                      *((_OWORD *)v307 - 6) = *((_OWORD *)v300 - 6);
                      *((_OWORD *)v307 - 5) = v308;
                      v309 = *((_OWORD *)v300 - 4);
                      v310 = *((_OWORD *)v300 - 3);
                      v311 = *((_OWORD *)v300 - 1);
                      *((_OWORD *)v307 - 2) = *((_OWORD *)v300 - 2);
                      *((_OWORD *)v307 - 1) = v311;
                      *((_OWORD *)v307 - 4) = v309;
                      *((_OWORD *)v307 - 3) = v310;
                      v307 -= 96;
                      v300 -= 96;
                    }
                    while (v300 != v301);
                    v300 = v301;
                  }
                  v312 = v306 + 96;
                  v483 = v307;
                  v484 = v306 + 96;
                  v485 = &v305[96 * v304];
                  if (v300)
                    operator delete(v300);
                  v484 = v312;
                  ++v154;
                }
                while (v154 != v155);
LABEL_224:
                v453 = (uint64_t *)v139;
                v313 = 0;
                v314 = v391 + 248 * v393;
                v447 = (const void **)(v314 + 8);
                v442 = (const void **)(v314 + 16);
                v433 = (_QWORD *)(v314 + 224);
                v431 = (_QWORD *)(v314 + 232);
                do
                {
                  if (!*(_BYTE *)(v37 + 120))
                    sub_20E866B34();
                  v325 = *(void ***)v121;
                  v326 = *v453;
                  *(_QWORD *)v468 = *v453;
                  memset(&v468[8], 0, 24);
                  v327 = *v447;
                  v328 = (_BYTE *)*v442 - (_BYTE *)*v447;
                  if (*v442 == *v447)
                  {
                    v330 = 0;
                    v332 = 0;
                    v329 = 0;
                  }
                  else
                  {
                    if (v328 < 0)
                      sub_20E867F44();
                    v329 = (char *)operator new((_BYTE *)*v442 - (_BYTE *)*v447);
                    v330 = &v329[16 * (v328 >> 4)];
                    v331 = v328 & 0xFFFFFFFFFFFFFFF0;
                    memcpy(v329, v327, v331);
                    v332 = &v329[v331];
                  }
                  v333 = (char *)v483 + 96 * v313;
                  v334 = *((_OWORD *)v333 + 1);
                  v469 = *(float64x2_t *)v333;
                  v470 = v334;
                  v335 = *((_OWORD *)v333 + 5);
                  v337 = *((float64x2_t *)v333 + 2);
                  v336 = *((_OWORD *)v333 + 3);
                  v473 = *((float64x2_t *)v333 + 4);
                  *(_OWORD *)__p = v335;
                  v471 = v337;
                  v472 = v336;
                  v338 = *(float64x2_t *)v333;
                  v476 = *((_OWORD *)v333 + 1);
                  v340 = *((_OWORD *)v333 + 4);
                  v339 = *((_OWORD *)v333 + 5);
                  v341 = *((_OWORD *)v333 + 3);
                  v477 = *((_OWORD *)v333 + 2);
                  v478 = v341;
                  v479 = v340;
                  v480 = v339;
                  v475 = v338;
                  *(_QWORD *)&v481 = *v433;
                  *((_QWORD *)&v481 + 1) = *v431;
                  v482 = 0x3FF0000000000000;
                  v342 = &v325[3 * v313];
                  v345 = (unint64_t)v342[1];
                  v344 = (char **)(v342 + 1);
                  v343 = v345;
                  v347 = v344 + 1;
                  v346 = (unint64_t)v344[1];
                  if (v345 < v346)
                  {
                    *(_QWORD *)v343 = v326;
                    *(_QWORD *)(v343 + 8) = v329;
                    *(_QWORD *)(v343 + 16) = v332;
                    *(_QWORD *)(v343 + 24) = v330;
                    memset(&v468[8], 0, 24);
                    v316 = v480;
                    v315 = v481;
                    v317 = v479;
                    *(_QWORD *)(v343 + 240) = v482;
                    *(_OWORD *)(v343 + 208) = v316;
                    *(_OWORD *)(v343 + 224) = v315;
                    *(_OWORD *)(v343 + 192) = v317;
                    v319 = v475;
                    v318 = v476;
                    v320 = v478;
                    *(_OWORD *)(v343 + 160) = v477;
                    *(_OWORD *)(v343 + 176) = v320;
                    *(float64x2_t *)(v343 + 128) = v319;
                    *(_OWORD *)(v343 + 144) = v318;
                    v322 = v471;
                    v321 = v472;
                    v323 = *(_OWORD *)__p;
                    *(float64x2_t *)(v343 + 96) = v473;
                    *(_OWORD *)(v343 + 112) = v323;
                    *(float64x2_t *)(v343 + 64) = v322;
                    *(_OWORD *)(v343 + 80) = v321;
                    v324 = v470;
                    *(float64x2_t *)(v343 + 32) = v469;
                    *(_OWORD *)(v343 + 48) = v324;
                    *v344 = (char *)(v343 + 248);
                    v64 = a9;
                    v121 = v435;
                  }
                  else
                  {
                    v348 = &v325[3 * v313];
                    v349 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v343 - (_QWORD)*v348) >> 3);
                    v350 = v349 + 1;
                    if (v349 + 1 > 0x108421084210842)
                      sub_20E8E8A64();
                    v351 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v346 - (_QWORD)*v348) >> 3);
                    if (2 * v351 > v350)
                      v350 = 2 * v351;
                    if (v351 >= 0x84210842108421)
                      v352 = 0x108421084210842;
                    else
                      v352 = v350;
                    if (v352)
                    {
                      if (v352 > 0x108421084210842)
                        sub_20E877A38();
                      v353 = (char *)operator new(248 * v352);
                    }
                    else
                    {
                      v353 = 0;
                    }
                    v354 = &v353[248 * v349];
                    *(_QWORD *)v354 = v326;
                    *((_QWORD *)v354 + 1) = v329;
                    *((_QWORD *)v354 + 2) = v332;
                    *((_QWORD *)v354 + 3) = v330;
                    v355 = &v353[248 * v352];
                    memset(&v468[8], 0, 24);
                    v356 = *(_OWORD *)__p;
                    *((float64x2_t *)v354 + 6) = v473;
                    *((_OWORD *)v354 + 7) = v356;
                    v357 = v472;
                    *((float64x2_t *)v354 + 4) = v471;
                    *((_OWORD *)v354 + 5) = v357;
                    v358 = v478;
                    *((_OWORD *)v354 + 10) = v477;
                    *((_OWORD *)v354 + 11) = v358;
                    v359 = v476;
                    *((float64x2_t *)v354 + 8) = v475;
                    *((_OWORD *)v354 + 9) = v359;
                    *((_QWORD *)v354 + 30) = v482;
                    v360 = v481;
                    v361 = v479;
                    *((_OWORD *)v354 + 13) = v480;
                    *((_OWORD *)v354 + 14) = v360;
                    *((_OWORD *)v354 + 12) = v361;
                    v362 = v470;
                    *((float64x2_t *)v354 + 2) = v469;
                    *((_OWORD *)v354 + 3) = v362;
                    v363 = v354 + 248;
                    v364 = *v344;
                    v365 = (char *)*v348;
                    if (*v344 == *v348)
                    {
                      *v348 = v354;
                      *v344 = v363;
                      *v347 = v355;
                      v37 = v434;
                      v121 = v435;
                    }
                    else
                    {
                      v366 = 0;
                      v37 = v434;
                      v121 = v435;
                      do
                      {
                        v367 = &v364[v366];
                        v368 = &v354[v366];
                        *((_QWORD *)v368 - 31) = *(_QWORD *)&v364[v366 - 248];
                        *((_QWORD *)v368 - 29) = 0;
                        *((_QWORD *)v368 - 28) = 0;
                        *((_OWORD *)v368 - 15) = *(_OWORD *)&v364[v366 - 240];
                        *((_QWORD *)v368 - 28) = *(_QWORD *)&v364[v366 - 224];
                        *((_QWORD *)v367 - 29) = 0;
                        *((_QWORD *)v367 - 28) = 0;
                        *((_QWORD *)v367 - 30) = 0;
                        v369 = *(_OWORD *)&v364[v366 - 168];
                        v370 = *(_OWORD *)&v364[v366 - 152];
                        v371 = *(_OWORD *)&v364[v366 - 136];
                        *(_OWORD *)(v368 - 184) = *(_OWORD *)&v364[v366 - 184];
                        *(_OWORD *)(v368 - 136) = v371;
                        *(_OWORD *)(v368 - 152) = v370;
                        *(_OWORD *)(v368 - 168) = v369;
                        v372 = *(_OWORD *)&v364[v366 - 104];
                        v373 = *(_OWORD *)&v364[v366 - 88];
                        v374 = *(_OWORD *)&v364[v366 - 72];
                        *(_OWORD *)(v368 - 120) = *(_OWORD *)&v364[v366 - 120];
                        *(_OWORD *)(v368 - 72) = v374;
                        *(_OWORD *)(v368 - 88) = v373;
                        *(_OWORD *)(v368 - 104) = v372;
                        v375 = *(_OWORD *)&v364[v366 - 40];
                        v376 = *(_OWORD *)&v364[v366 - 24];
                        v377 = *(_QWORD *)&v364[v366 - 8];
                        *(_OWORD *)(v368 - 56) = *(_OWORD *)&v364[v366 - 56];
                        *((_QWORD *)v368 - 1) = v377;
                        *(_OWORD *)(v368 - 24) = v376;
                        *(_OWORD *)(v368 - 40) = v375;
                        v378 = *(_OWORD *)&v364[v366 - 216];
                        *(_OWORD *)(v368 - 200) = *(_OWORD *)&v364[v366 - 200];
                        *(_OWORD *)(v368 - 216) = v378;
                        v366 -= 248;
                      }
                      while (&v364[v366] != v365);
                      v364 = (char *)*v348;
                      v379 = *v344;
                      *v348 = &v354[v366];
                      *v344 = v363;
                      *v347 = v355;
                      while (v379 != v364)
                      {
                        v380 = (void *)*((_QWORD *)v379 - 30);
                        if (v380)
                        {
                          *((_QWORD *)v379 - 29) = v380;
                          operator delete(v380);
                        }
                        v379 -= 248;
                      }
                    }
                    v64 = a9;
                    if (v364)
                      operator delete(v364);
                    v381 = *(void **)&v468[8];
                    *v344 = v363;
                    if (v381)
                      operator delete(v381);
                  }
                  ++v313;
                  v117 = v411;
                }
                while (v313 != v411);
                v178 = (char *)v483;
LABEL_257:
                if (v178)
                {
                  v484 = v178;
                  operator delete(v178);
                }
                if (v486)
                  operator delete(v486);
LABEL_147:
                v132 = v393 + 1;
                v131 = *(_QWORD *)(v37 + 152);
                if (v393 + 1 >= 0xEF7BDEF7BDEF7BDFLL * ((*(_QWORD *)(v37 + 160) - v131) >> 3))
                  goto LABEL_261;
              }
              if (v117 >> 61)
                sub_20E867F44();
              v154 = (double *)operator new(__sz * 8);
              v486 = v154;
              v488 = &v154[v117];
              bzero(v154, __sz * 8);
              v155 = &v154[__sz];
              v487 = &v154[__sz];
              if (v117 < 4)
              {
                i = 0;
                v157 = v387;
                goto LABEL_177;
              }
              v179 = (int64x2_t)xmmword_2102E3FA0;
              v180 = (float64x2_t *)(v154 + 2);
              v181 = v388;
              v157 = v387;
              do
              {
                v180[-1] = vmulq_n_f64(vcvtq_f64_u64((uint64x2_t)vaddq_s64(v179, vdupq_n_s64(1uLL))), v387);
                *v180 = vmulq_n_f64(vcvtq_f64_u64((uint64x2_t)vaddq_s64(v179, vdupq_n_s64(3uLL))), v387);
                v179 = vaddq_s64(v179, vdupq_n_s64(4uLL));
                v180 += 2;
                v181 -= 4;
              }
              while (v181);
              for (i = v388; v117 != i; ++i)
LABEL_177:
                v154[i] = v157 * (double)(i + 1);
              v484 = 0;
              v483 = 0;
              v485 = 0;
              if (v117 > 0x2AAAAAAAAAAAAAALL)
                sub_20E867F44();
              v178 = (char *)operator new(96 * v386);
              v483 = v178;
              v484 = v178;
              v485 = &v178[96 * v386];
              goto LABEL_180;
            }
LABEL_261:
            if (!*(_BYTE *)(v37 + 120))
              goto LABEL_280;
            v81 = *(void ***)v121;
            v382 = *v64;
            if (*v64)
            {
              for (j = v64[1]; j != v382; j -= 248)
              {
                v384 = (void *)*((_QWORD *)j - 30);
                if (v384)
                {
                  *((_QWORD *)j - 29) = v384;
                  operator delete(v384);
                }
              }
              operator delete(v382);
              *v64 = 0;
              v64[1] = 0;
              v64[2] = 0;
            }
            *(_OWORD *)v64 = *(_OWORD *)v81;
            v82 = (char *)v81[2];
LABEL_270:
            v64[2] = v82;
            v81[1] = 0;
            v81[2] = 0;
            *v81 = 0;
LABEL_271:
            sub_20E8D03C0((uint64_t)&v466, v467[0]);
            v459[0] = &off_24C9AFD78;
            v57 = v464;
            if (!v464)
              goto LABEL_45;
            goto LABEL_44;
          }
        }
        else
        {
          v118 = 0;
          v120 = 0;
          v119 = 0;
          v121 = v37 + 96;
          v435 = v37 + 96;
          if (*(_BYTE *)(v37 + 120))
            goto LABEL_126;
        }
        *(_QWORD *)(v37 + 96) = v118;
        *(_QWORD *)(v37 + 104) = v120;
        *(_QWORD *)(v37 + 112) = v119;
        *(_BYTE *)(v37 + 120) = 1;
        v131 = *(_QWORD *)(v37 + 152);
        if (*(_QWORD *)(v37 + 160) != v131)
          goto LABEL_144;
        goto LABEL_261;
      }
    }
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::mutex::lock(v19);
  v490.f64[0] = 0.0;
  v489.f64[1] = 0.0;
  *(_QWORD *)&v489.f64[0] = &v489.f64[1];
  sub_20EDEF020(&v489, *(_QWORD **)(v434 + 72), v21);
  std::mutex::unlock(v19);
  v39 = v489.f64[0];
  if (*(float64x2_t **)&v489.f64[0] != (float64x2_t *)&v489.f64[1])
  {
    do
    {
      v40 = atomic_load((unsigned int *)(*(_QWORD *)(*(_QWORD *)&v39 + 40) + 1136));
      if (v40 == 2)
      {
        atomic_store(0, (unsigned int *)(*(_QWORD *)(*(_QWORD *)&v39 + 40) + 1136));
        v41 = *(_QWORD *)(*(_QWORD *)&v39 + 40);
        if ((*(_DWORD *)(v41 + 8) & 0x80000000) == 0)
        {
          sub_20EDB4EA0((double *)v41, (uint64_t)v468);
          v42 = (unint64_t)a9[1];
          if (v42 >= (unint64_t)a9[2])
          {
            v53 = sub_20EDF659C((void **)a9, (uint64_t)v468);
            v54 = *(void **)&v468[8];
            a9[1] = v53;
            if (v54)
            {
              *(_QWORD *)&v468[16] = v54;
              operator delete(v54);
            }
          }
          else
          {
            *(_QWORD *)v42 = *(_QWORD *)v468;
            *(_QWORD *)(v42 + 8) = 0;
            *(_QWORD *)(v42 + 16) = 0;
            *(_QWORD *)(v42 + 24) = 0;
            *(_OWORD *)(v42 + 8) = *(_OWORD *)&v468[8];
            *(_QWORD *)(v42 + 24) = *(_QWORD *)&v468[24];
            memset(&v468[8], 0, 24);
            v43 = v470;
            *(float64x2_t *)(v42 + 32) = v469;
            *(_OWORD *)(v42 + 48) = v43;
            v44 = *(_OWORD *)__p;
            v46 = v471;
            v45 = v472;
            *(float64x2_t *)(v42 + 96) = v473;
            *(_OWORD *)(v42 + 112) = v44;
            *(float64x2_t *)(v42 + 64) = v46;
            *(_OWORD *)(v42 + 80) = v45;
            v47 = v478;
            v49 = v475;
            v48 = v476;
            *(_OWORD *)(v42 + 160) = v477;
            *(_OWORD *)(v42 + 176) = v47;
            *(float64x2_t *)(v42 + 128) = v49;
            *(_OWORD *)(v42 + 144) = v48;
            v51 = v480;
            v50 = v481;
            v52 = v479;
            *(_QWORD *)(v42 + 240) = v482;
            *(_OWORD *)(v42 + 208) = v51;
            *(_OWORD *)(v42 + 224) = v50;
            *(_OWORD *)(v42 + 192) = v52;
            a9[1] = (char *)(v42 + 248);
          }
        }
      }
      v55 = *(_QWORD **)(*(_QWORD *)&v39 + 8);
      if (v55)
      {
        do
        {
          v56 = v55;
          v55 = (_QWORD *)*v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          v56 = *(_OWORD **)(*(_QWORD *)&v39 + 16);
          _ZF = *(_QWORD *)v56 == *(_QWORD *)&v39;
          v39 = *(double *)&v56;
        }
        while (!_ZF);
      }
      v39 = *(double *)&v56;
    }
    while (v56 != (_OWORD *)&v489.f64[1]);
  }
  sub_20E8D03C0((uint64_t)&v489, *(_QWORD **)&v489.f64[1]);
  v459[0] = &off_24C9AFD78;
  v57 = v464;
  if (v464)
  {
LABEL_44:
    v465 = v57;
    operator delete(v57);
  }
LABEL_45:
  v58 = v463;
  if (v463)
  {
    p_shared_owners = (unint64_t *)&v463->__shared_owners_;
    do
      v60 = __ldaxr(p_shared_owners);
    while (__stlxr(v60 - 1, p_shared_owners));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = v462;
  if (v462)
  {
    v62 = (unint64_t *)&v462->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
}

void sub_20EDF2AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a72;
  void **v72;
  uint64_t v73;
  uint64_t v74;
  void *v76;

  v76 = *v72;
  if (*v72)
  {
    *(_QWORD *)(v74 + 16) = v76;
    operator delete(v76);
  }
  *(_QWORD *)(v73 + 8) = v74;
  sub_20E8E5B90(a72);
  sub_20E8D03C0((uint64_t)&STACK[0x318], (_QWORD *)STACK[0x320]);
  sub_20E8E481C(&STACK[0x288]);
  _Unwind_Resume(a1);
}

uint64_t sub_20EDF2CC4(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, __int128 *a5, uint64_t a6, char a7, char a8, double a9, uint64_t *a10, __int128 *a11)
{
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD **v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[144];
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[80];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _BYTE v62[26];
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  _QWORD **v68;
  _QWORD *v69[2];
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[144];
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _OWORD v86[2];
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  _BYTE v92[24];
  _BYTE *v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v20 = a9 == 0.0 || *(_QWORD *)(a1 + 472) == 1;
  if (!v20 && *(double *)(a1 + 488) <= *(double *)(a1 + 448))
    return 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(double *)(a1 + 496) = a9;
  std::mutex::lock((std::mutex *)(a1 + 8));
  v69[0] = 0;
  v69[1] = 0;
  v68 = v69;
  sub_20EDEF020(&v68, *(_QWORD **)(a1 + 72), (_QWORD *)(a1 + 80));
  std::mutex::unlock((std::mutex *)(a1 + 8));
  v21 = v68;
  if (v68 != v69)
  {
    v22 = v68;
    do
    {
      atomic_store(1u, (unsigned int *)(v22[5] + 1136));
      v23 = (_QWORD *)v22[1];
      if (v23)
      {
        do
        {
          v24 = (_QWORD **)v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (_QWORD **)v22[2];
          v20 = *v24 == v22;
          v22 = v24;
        }
        while (!v20);
      }
      v22 = v24;
    }
    while (v24 != v69);
  }
  v51 = 0;
  v52 = 0;
  *(_QWORD *)&v50 = a1;
  *((_QWORD *)&v50 + 1) = &v51;
  sub_20EDEF020((_QWORD *)&v50 + 1, v21, v69);
  sub_20EDB79B8((uint64_t)v53, a2);
  v25 = a3[1];
  v54 = *a3;
  v55 = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  *(double *)v56 = a9;
  v28 = *a4;
  *(_OWORD *)&v56[24] = a4[1];
  v29 = a4[3];
  *(_OWORD *)&v56[40] = a4[2];
  *(_OWORD *)&v56[56] = v29;
  *(_QWORD *)&v56[72] = *((_QWORD *)a4 + 8);
  *(_OWORD *)&v56[8] = v28;
  v30 = a5[3];
  v59 = a5[2];
  v60 = v30;
  v31 = a5[5];
  v61 = a5[4];
  *(_OWORD *)v62 = v31;
  v32 = a5[1];
  v57 = *a5;
  v58 = v32;
  *(_QWORD *)&v62[16] = a6;
  v62[24] = a7;
  v62[25] = a8;
  v33 = a10[1];
  v63 = *a10;
  v64 = v33;
  if (v33)
  {
    v34 = (unint64_t *)(v33 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v36 = a11[1];
  v65 = *a11;
  v66 = v36;
  LOBYTE(v67) = *((_BYTE *)a11 + 32);
  v37 = *(unsigned __int8 *)(a1 + 512);
  v38 = *(_QWORD *)(a1 + 536);
  if (v37)
  {
    v70 = v50;
    v71 = v51;
    v72 = v52;
    if (v52)
    {
      *(_QWORD *)(v51 + 16) = &v71;
      *((_QWORD *)&v50 + 1) = &v51;
      v51 = 0;
      v52 = 0;
    }
    else
    {
      *((_QWORD *)&v70 + 1) = &v71;
    }
    sub_20EDB79B8((uint64_t)v73, (uint64_t)v53);
    v74 = v54;
    v75 = v55;
    if (v55)
    {
      v40 = (unint64_t *)(v55 + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    *(_OWORD *)((char *)v86 + 10) = *(_OWORD *)&v62[10];
    v84 = v60;
    v85 = v61;
    v86[0] = *(_OWORD *)v62;
    v80 = *(_OWORD *)&v56[64];
    v81 = v57;
    v82 = v58;
    v83 = v59;
    v76 = *(_OWORD *)v56;
    v77 = *(_OWORD *)&v56[16];
    v78 = *(_OWORD *)&v56[32];
    v79 = *(_OWORD *)&v56[48];
    v87 = v63;
    v88 = v64;
    if (v64)
    {
      v42 = (unint64_t *)(v64 + 8);
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v89 = v65;
    v90 = v66;
    v91 = v67;
    sub_20EDF91DC((uint64_t)v92, (uint64_t)&v70);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v38 + 40))(v38, v92);
    v44 = v93;
    if (v93 != v92)
      goto LABEL_35;
LABEL_45:
    v45 = 4;
    v44 = v92;
    goto LABEL_46;
  }
  v70 = v50;
  v71 = v51;
  v72 = v52;
  if (v52)
  {
    *(_QWORD *)(v51 + 16) = &v71;
    *((_QWORD *)&v50 + 1) = &v51;
    v51 = 0;
    v52 = 0;
  }
  else
  {
    *((_QWORD *)&v70 + 1) = &v71;
  }
  sub_20EDB79B8((uint64_t)v73, (uint64_t)v53);
  v74 = v54;
  v75 = v55;
  if (v55)
  {
    v46 = (unint64_t *)(v55 + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  *(_OWORD *)((char *)v86 + 10) = *(_OWORD *)&v62[10];
  v84 = v60;
  v85 = v61;
  v86[0] = *(_OWORD *)v62;
  v80 = *(_OWORD *)&v56[64];
  v81 = v57;
  v82 = v58;
  v83 = v59;
  v76 = *(_OWORD *)v56;
  v77 = *(_OWORD *)&v56[16];
  v78 = *(_OWORD *)&v56[32];
  v79 = *(_OWORD *)&v56[48];
  v87 = v63;
  v88 = v64;
  if (v64)
  {
    v48 = (unint64_t *)(v64 + 8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v89 = v65;
  v90 = v66;
  v91 = v67;
  sub_20EDF91DC((uint64_t)v92, (uint64_t)&v70);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v38 + 32))(v38, v92);
  v44 = v93;
  if (v93 == v92)
    goto LABEL_45;
LABEL_35:
  if (v44)
  {
    v45 = 5;
LABEL_46:
    (*(void (**)(void))(*v44 + 8 * v45))();
  }
  sub_20EDF5A9C((uint64_t)&v70);
  sub_20EDF5A9C((uint64_t)&v50);
  sub_20E8D03C0((uint64_t)&v68, v69[0]);
  return 1;
}

void sub_20EDF3174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  _QWORD *a67;
  char a69;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v72;
  uint64_t v73;

  v72 = *(_QWORD **)(v70 - 128);
  if (v72 == v69)
  {
    v73 = 4;
    v72 = (_QWORD *)(v70 - 152);
  }
  else
  {
    if (!v72)
      goto LABEL_6;
    v73 = 5;
  }
  (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_6:
  sub_20EDF5A9C((uint64_t)&a69);
  sub_20EDF5A9C((uint64_t)&a11);
  sub_20E8D03C0((uint64_t)&a66, a67);
  _Unwind_Resume(a1);
}

void sub_20EDF31FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  _QWORD *a67;
  uint64_t v67;

  sub_20E8D03C0(v67, a13);
  sub_20E8D03C0((uint64_t)&a66, a67);
  _Unwind_Resume(a1);
}

void sub_20EDF3224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  _QWORD *a67;
  std::mutex *v67;

  sub_20E8D03C0((uint64_t)&a66, a67);
  std::mutex::unlock(v67);
  _Unwind_Resume(a1);
}

void sub_20EDF3244(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>)
{
  std::mutex *v17;
  _QWORD *v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  _QWORD *v22;
  unsigned int v23;
  _QWORD *v24;
  _BYTE *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  double v38;
  float64x2_t v39;
  __int128 v40;
  _QWORD *v41;
  unsigned int v42;
  _QWORD *v43;
  _BYTE *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  _QWORD **v51;
  _QWORD *v52;
  int v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  __int128 v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t i;
  unsigned __int8 v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  size_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  size_t v86;
  char *v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  _QWORD *v113;
  float64x2_t v114;
  float64x2_t v115;
  _QWORD *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  __int128 *v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  _QWORD *v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  char v137;
  _QWORD *v138;
  _QWORD *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  _BYTE *v146;
  uint64_t v147;
  void **v148;
  void **v149;
  unint64_t v150;
  void **v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  void *v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD **v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  char *v177;
  void *v178;
  _QWORD *v179;
  _QWORD **v180;
  double **v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  unint64_t v192;
  char *v193;
  void *v194;
  int v195;
  char *v196;
  char *v197;
  uint64_t v198;
  _QWORD *v199;
  char *v200;
  unint64_t v201;
  _QWORD **v202;
  _QWORD *v203;
  _QWORD **v204;
  unint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  unint64_t v208;
  char *v209;
  _BYTE *v210;
  _BYTE *v211;
  uint64_t v212;
  char *v213;
  char *v214;
  size_t v215;
  char *v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  _QWORD *v227;
  _QWORD *v228;
  uint64_t v229;
  unint64_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  char *v241;
  void *v242;
  _QWORD *v243;
  _QWORD **v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  _QWORD *v248;
  char *v249;
  char *v250;
  void *v251;
  uint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  _QWORD *v256;
  _QWORD **v257;
  void *v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  char *v265;
  uint64_t v266;
  size_t v267;
  uint64_t v271;
  char v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  void *v277;
  char *v278;
  unint64_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  __int128 v283;
  uint64_t v284;
  uint64_t (**v285)();
  unsigned __int8 v286;
  __int128 v287;
  __int128 v288;
  _QWORD v289[4];
  char v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  uint64_t v294;
  _QWORD **v295;
  _QWORD *v296;
  uint64_t v297;
  _BYTE v298[24];
  _BYTE *v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  uint64_t v313;
  uint64_t v314;

  v314 = *MEMORY[0x24BDAC8D0];
  v17 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v296 = 0;
  v297 = 0;
  v295 = &v296;
  v18 = (_QWORD *)(a1 + 80);
  sub_20EDEF020(&v295, *(_QWORD **)(a1 + 72), (_QWORD *)(a1 + 80));
  std::mutex::unlock(v17);
  *(std::chrono::steady_clock::time_point *)(a1 + 528) = std::chrono::steady_clock::now();
  std::mutex::lock(v17);
  *(_OWORD *)&v298[8] = 0uLL;
  *(_QWORD *)v298 = &v298[8];
  v273 = a1;
  sub_20EDEF020(v298, *(_QWORD **)(a1 + 72), (_QWORD *)(a1 + 80));
  std::mutex::unlock(v17);
  if (*(_QWORD *)&v298[16])
  {
    if (*(_WORD *)(a1 + 368) && (v19 = *(_QWORD *)(a1 + 480), v19 >= *(unsigned __int16 *)(a1 + 368)))
    {
      v21 = v19 >= *(_QWORD *)&v298[16] || *(_BYTE *)(a1 + 513) == 0;
      v20 = !v21;
    }
    else
    {
      v20 = 1;
    }
  }
  else
  {
    v20 = 0;
  }
  sub_20E8D03C0((uint64_t)v298, *(_QWORD **)&v298[8]);
  v285 = &off_24C9AFD78;
  v286 = 0;
  v290 = 0;
  v287 = 0u;
  v288 = 0u;
  memset(v289, 0, 25);
  v291 = 0u;
  v292 = 0u;
  v293 = 0u;
  v294 = 0;
  if (!v20)
    goto LABEL_24;
  std::mutex::lock(v17);
  *(_OWORD *)&v298[8] = 0uLL;
  *(_QWORD *)v298 = &v298[8];
  sub_20EDEF020(v298, *(_QWORD **)(v273 + 72), v18);
  std::mutex::unlock(v17);
  v22 = *(_QWORD **)v298;
  if (*(_BYTE **)v298 != &v298[8])
  {
    while (1)
    {
      v23 = atomic_load((unsigned int *)(v22[5] + 1136));
      if (v23 == 1)
        break;
      v24 = (_QWORD *)v22[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_BYTE *)v22[2];
          v21 = *(_QWORD *)v25 == (_QWORD)v22;
          v22 = v25;
        }
        while (!v21);
      }
      v22 = v25;
      if (v25 == &v298[8])
        goto LABEL_14;
    }
    sub_20E8D03C0((uint64_t)v298, *(_QWORD **)&v298[8]);
LABEL_24:
    if (!v297 || !*(_WORD *)(v273 + 368))
      goto LABEL_46;
    goto LABEL_26;
  }
LABEL_14:
  sub_20E8D03C0((uint64_t)v298, *(_QWORD **)&v298[8]);
LABEL_26:
  kdebug_trace();
  v26 = v273;
  if (*(_BYTE *)(v273 + 272))
  {
    v27 = operator new(0xA8uLL);
    v27[1] = 0;
    v27[2] = 0;
    *v27 = &off_24C9E9B40;
    v28 = sub_20EDB79B8((uint64_t)(v27 + 3), a2);
    v29 = *(std::__shared_weak_count **)(v273 + 288);
    *(_QWORD *)(v273 + 280) = v28;
    *(_QWORD *)(v273 + 288) = v27;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v26 = v273;
    memmove((void *)(v273 + 296), (const void *)a4, 0x48uLL);
  }
  sub_21012188C(a2, *(_QWORD *)(v26 + 464), (uint64_t)v298);
  sub_20E8E9964((uint64_t)&v285, (__int128 *)((char *)&v303 + 8), v300, *((unint64_t *)&v300 + 1), v301, *(uint64_t *)&v298[16], (uint64_t)v299, v298[8], (uint64_t *)&v302 + 1);
  v300 = 0uLL;
  *(_QWORD *)&v301 = 0;
  *(_QWORD *)v298 = &off_24C9AFD78;
  if (*((_QWORD *)&v305 + 1))
  {
    *(_QWORD *)&v306 = *((_QWORD *)&v305 + 1);
    operator delete(*((void **)&v305 + 1));
  }
  v32 = (std::__shared_weak_count *)v305;
  if ((_QWORD)v305)
  {
    v33 = (unint64_t *)(v305 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (std::__shared_weak_count *)v304;
  if ((_QWORD)v304)
  {
    v36 = (unint64_t *)(v304 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (double)(unint64_t)v288 / (double)*(unint64_t *)(a2 + 32);
  v39 = vmulq_n_f64(*(float64x2_t *)(a4 + 16), v38);
  v280 = vmulq_n_f64(*(float64x2_t *)a4, v38);
  v281 = v39;
  v40 = *(_OWORD *)(a4 + 48);
  v282 = vmulq_n_f64(*(float64x2_t *)(a4 + 32), v38);
  v283 = v40;
  v284 = *(_QWORD *)(a4 + 64);
  kdebug_trace();
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v273 + 16))(v273, &v285);
LABEL_46:
  std::mutex::lock(v17);
  *(_OWORD *)&v298[8] = 0uLL;
  *(_QWORD *)v298 = &v298[8];
  sub_20EDEF020(v298, *(_QWORD **)(v273 + 72), v18);
  std::mutex::unlock(v17);
  v41 = *(_QWORD **)v298;
  if (*(_BYTE **)v298 == &v298[8])
  {
LABEL_47:
    sub_20E8D03C0((uint64_t)v298, *(_QWORD **)&v298[8]);
    *(double *)(v273 + 488) = a10 - *(double *)(v273 + 496);
  }
  else
  {
    while (1)
    {
      v42 = atomic_load((unsigned int *)(v41[5] + 1136));
      if (v42 == 1)
        break;
      v43 = (_QWORD *)v41[1];
      if (v43)
      {
        do
        {
          v44 = v43;
          v43 = (_QWORD *)*v43;
        }
        while (v43);
      }
      else
      {
        do
        {
          v44 = (_BYTE *)v41[2];
          v21 = *(_QWORD *)v44 == (_QWORD)v41;
          v41 = v44;
        }
        while (!v21);
      }
      v41 = v44;
      if (v44 == &v298[8])
        goto LABEL_47;
    }
    sub_20E8D03C0((uint64_t)v298, *(_QWORD **)&v298[8]);
    *(double *)(v273 + 496) = a10;
  }
  ++*(_QWORD *)(v273 + 472);
  std::mutex::lock(v17);
  *(_OWORD *)&v298[8] = 0uLL;
  *(_QWORD *)v298 = &v298[8];
  sub_20EDEF020(v298, *(_QWORD **)(v273 + 72), v18);
  std::mutex::unlock(v17);
  v45 = *(_QWORD *)&v298[16];
  if (*(_QWORD *)&v298[16])
  {
    if (*(_WORD *)(v273 + 368) && (v46 = *(_QWORD *)(v273 + 480), v46 >= *(unsigned __int16 *)(v273 + 368)))
    {
      v195 = *(unsigned __int8 *)(v273 + 513);
      sub_20E8D03C0((uint64_t)v298, *(_QWORD **)&v298[8]);
      if (v46 >= v45 || !v195)
        goto LABEL_63;
    }
    else
    {
      sub_20E8D03C0((uint64_t)v298, *(_QWORD **)&v298[8]);
    }
    sub_20EDF2CC4(v273, (uint64_t)&v285, a3, (__int128 *)&v280, a5, a8, 0, 0, a10, a6, (__int128 *)a7);
  }
  else
  {
    sub_20E8D03C0((uint64_t)v298, *(_QWORD **)&v298[8]);
  }
LABEL_63:
  v277 = 0;
  v278 = 0;
  v279 = 0;
  v271 = a9;
  if (v295 == &v296)
  {
    v274 = 0;
    v164 = 0;
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    goto LABEL_220;
  }
  v274 = 0;
  v47 = 0;
  v48 = v273;
  v49 = 1;
  do
  {
    v50 = v49;
    v51 = v295;
    v272 = v49;
    if (v295 != &v296)
    {
      do
      {
        v52 = v51[5];
        v53 = *((_DWORD *)v52 + 2);
        if ((v50 & 1) != 0)
        {
          if (v53 > 0)
          {
            ++v274;
            goto LABEL_72;
          }
        }
        else if (!v53 && v47 < *(unsigned __int16 *)(v48 + 368))
        {
          if (*(_BYTE *)(v48 + 513))
          {
            sub_20EDB4EA0((double *)v51[5], (uint64_t)v298);
            v87 = v278;
            if ((unint64_t)v278 >= v279)
            {
              v278 = sub_20EDF659C(&v277, (uint64_t)v298);
              if (*(_QWORD *)&v298[8])
              {
                *(_QWORD *)&v298[16] = *(_QWORD *)&v298[8];
                operator delete(*(void **)&v298[8]);
              }
            }
            else
            {
              *(_QWORD *)v278 = *(_QWORD *)v298;
              *((_QWORD *)v87 + 1) = 0;
              *((_QWORD *)v87 + 2) = 0;
              *((_QWORD *)v87 + 3) = 0;
              *(_OWORD *)(v87 + 8) = *(_OWORD *)&v298[8];
              *((_QWORD *)v87 + 3) = v299;
              *(_OWORD *)&v298[8] = 0uLL;
              v299 = 0;
              v88 = v301;
              *((_OWORD *)v87 + 2) = v300;
              *((_OWORD *)v87 + 3) = v88;
              v89 = v305;
              v91 = v302;
              v90 = v303;
              *((_OWORD *)v87 + 6) = v304;
              *((_OWORD *)v87 + 7) = v89;
              *((_OWORD *)v87 + 4) = v91;
              *((_OWORD *)v87 + 5) = v90;
              v92 = v309;
              v94 = v306;
              v93 = v307;
              *((_OWORD *)v87 + 10) = v308;
              *((_OWORD *)v87 + 11) = v92;
              *((_OWORD *)v87 + 8) = v94;
              *((_OWORD *)v87 + 9) = v93;
              v96 = v311;
              v95 = v312;
              v97 = v310;
              *((_QWORD *)v87 + 30) = v313;
              *((_OWORD *)v87 + 13) = v96;
              *((_OWORD *)v87 + 14) = v95;
              *((_OWORD *)v87 + 12) = v97;
              v278 = v87 + 248;
            }
            v52 = v51[5];
          }
LABEL_72:
          v52[44] = *(_QWORD *)(v48 + 472);
          v54 = *((_QWORD *)&v291 + 1);
          v275 = v291;
          *(_OWORD *)v298 = v291;
          if (*((_QWORD *)&v291 + 1))
          {
            v55 = (unint64_t *)(*((_QWORD *)&v291 + 1) + 8);
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
          }
          v57 = v288;
          v58 = v289[0];
          v59 = *((_QWORD *)&v287 + 1);
          v60 = v287;
          v61 = v286;
          if (v286)
            v62 = v288;
          else
            v62 = 0;
          if ((unint64_t)(*((_QWORD *)&v287 + 1) + v287 * v288 + v62) > *((_QWORD *)&v288 + 1))
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 306, (uint64_t)"widthStep >= minimum_width_step", 31, (uint64_t)"widthStep must be at least as big as minimum_width_step.", 56, (void (*)(void **))sub_21023DDB0);
            v266 = v59;
            v63 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v63 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v64 = qword_254A6DE40;
              for (i = qword_254A6DE48; v64 != i; v64 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v64)(*(_QWORD *)(v64 + 8), "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
            }
            v66 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v66 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            v59 = v266;
            if (!byte_254A6DE68)
              abort();
            qword_254A6DE58(unk_254A6DE60, "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
          }
          *(_QWORD *)v298 = 0;
          *(_QWORD *)&v298[8] = 0;
          v67 = (std::__shared_weak_count *)v52[57];
          v52[56] = v275;
          v52[57] = v54;
          if (v67)
          {
            v68 = (unint64_t *)&v67->__shared_owners_;
            do
              v69 = __ldaxr(v68);
            while (__stlxr(v69 - 1, v68));
            if (!v69)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
          }
          *((_BYTE *)v52 + 368) = v61;
          *(_OWORD *)(v52 + 49) = v57;
          v52[47] = v60;
          v52[48] = v59;
          v70 = v289[3];
          *((_BYTE *)v52 + 440) = v290;
          v52[53] = v60 + v61;
          v52[54] = v70;
          v52[51] = v58;
          v52[52] = v60 + v61 + v59;
          v71 = (_BYTE *)v52[60];
          v72 = (char *)v52[61];
          v73 = (v72 - v71) >> 3;
          v74 = v58 - v73;
          if (v58 <= v73)
          {
            if (v58 < v73)
              v52[61] = &v71[8 * v58];
            a9 = v271;
            v48 = v273;
            if (v58)
              goto LABEL_122;
          }
          else
          {
            v75 = v52[62];
            if (v74 <= (v75 - (uint64_t)v72) >> 3)
            {
              bzero((void *)v52[61], 8 * v74);
              v52[61] = &v72[8 * v74];
              a9 = v271;
              v48 = v273;
            }
            else
            {
              if (v58 >> 61)
                sub_20E8E8A64();
              v76 = v75 - (_QWORD)v71;
              v77 = v76 >> 2;
              if (v76 >> 2 <= v58)
                v77 = v58;
              if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
                v77 = 0x1FFFFFFFFFFFFFFFLL;
              if (v77 >> 61)
                sub_20E877A38();
              v276 = v77;
              v78 = (char *)operator new(8 * v77);
              v79 = 8 * v74;
              v265 = v78;
              v80 = &v78[8 * v73];
              v267 = v79;
              bzero(v80, v79);
              v81 = (char *)(v72 - v71);
              if (v72 == v71)
              {
                v98 = v80;
                v99 = v80;
                v48 = v273;
                v52[60] = v98;
                v52[61] = &v99[v267];
                v52[62] = &v265[8 * v276];
                a9 = v271;
                if (v72)
                  goto LABEL_121;
              }
              else
              {
                v82 = v81 - 8;
                if ((unint64_t)(v81 - 8) < 0x58)
                {
                  v83 = v80;
                  v84 = v80;
                  v85 = v265;
                  v48 = v273;
                  v86 = v267;
                  goto LABEL_119;
                }
                v85 = v265;
                v83 = v80;
                v84 = v80;
                v48 = v273;
                v86 = v267;
                if ((unint64_t)(v71 - v265) < 0x20)
                  goto LABEL_310;
                v100 = ((unint64_t)v82 >> 3) + 1;
                v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
                v102 = &v72[-v101];
                v84 = &v83[-v101];
                v103 = &v265[8 * v73 - 16];
                v104 = v72 - 16;
                v105 = v100 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v106 = *(_OWORD *)v104;
                  *((_OWORD *)v103 - 1) = *((_OWORD *)v104 - 1);
                  *(_OWORD *)v103 = v106;
                  v103 -= 32;
                  v104 -= 32;
                  v105 -= 4;
                }
                while (v105);
                v72 = v102;
                if (v100 != (v100 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_310:
                  do
                  {
LABEL_119:
                    v107 = *((_QWORD *)v72 - 1);
                    v72 -= 8;
                    *((_QWORD *)v84 - 1) = v107;
                    v84 -= 8;
                  }
                  while (v72 != v71);
                }
                v72 = (char *)v52[60];
                v52[60] = v84;
                v52[61] = &v83[v86];
                v52[62] = &v85[8 * v276];
                a9 = v271;
                if (v72)
LABEL_121:
                  operator delete(v72);
              }
            }
LABEL_122:
            v108 = 0;
            v109 = 0;
            do
            {
              *(_QWORD *)(v52[60] + 8 * v109++) = v52[56] + v108;
              v108 += *((_QWORD *)&v57 + 1);
            }
            while (v58 != v109);
          }
          v110 = *(std::__shared_weak_count **)&v298[8];
          if (*(_QWORD *)&v298[8])
          {
            v111 = (unint64_t *)(*(_QWORD *)&v298[8] + 8);
            do
              v112 = __ldaxr(v111);
            while (__stlxr(v112 - 1, v111));
            if (!v112)
            {
              ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
              std::__shared_weak_count::__release_weak(v110);
            }
          }
          v113 = v51[5];
          *((double *)v113 + 83) = a10;
          v113[71] = v284;
          v114 = v281;
          *(float64x2_t *)(v113 + 63) = v280;
          v115 = v282;
          *(_OWORD *)(v113 + 69) = v283;
          *(float64x2_t *)(v113 + 67) = v115;
          *(float64x2_t *)(v113 + 65) = v114;
          if (*(_BYTE *)(v48 + 272))
          {
            v116 = v51[5];
            *((_OWORD *)v116 + 37) = *(_OWORD *)(v273 + 296);
            v117 = *(_OWORD *)(v273 + 312);
            v118 = *(_OWORD *)(v273 + 328);
            v119 = *(_OWORD *)(v273 + 344);
            v116[82] = *(_QWORD *)(v273 + 360);
            *((_OWORD *)v116 + 39) = v118;
            *((_OWORD *)v116 + 40) = v119;
            *((_OWORD *)v116 + 38) = v117;
            v120 = v51[5];
            v122 = *(_QWORD *)(v48 + 280);
            v121 = *(_QWORD *)(v48 + 288);
            if (v121)
            {
              v123 = (unint64_t *)(v121 + 8);
              do
                v124 = __ldxr(v123);
              while (__stxr(v124 + 1, v123));
            }
            v120[72] = v122;
            v125 = (std::__shared_weak_count *)v120[73];
            v120[73] = v121;
            if (v125)
            {
              v126 = (unint64_t *)&v125->__shared_owners_;
              do
                v127 = __ldaxr(v126);
              while (__stlxr(v127 - 1, v126));
              if (!v127)
              {
                ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                std::__shared_weak_count::__release_weak(v125);
              }
            }
          }
          v128 = (__int128 *)(v51[5] + 91);
          v129 = a5[1];
          *v128 = *a5;
          v128[1] = v129;
          v130 = a5[2];
          v131 = a5[3];
          v132 = a5[5];
          v128[4] = a5[4];
          v128[5] = v132;
          v128[2] = v130;
          v128[3] = v131;
          v133 = v51[5];
          v133[121] = a8;
          v134 = *(_OWORD *)a7;
          v135 = *(_OWORD *)(a7 + 16);
          *((_BYTE *)v133 + 720) = *(_BYTE *)(a7 + 32);
          *((_OWORD *)v133 + 43) = v134;
          *((_OWORD *)v133 + 44) = v135;
          if (!*(_BYTE *)(v48 + 432))
          {
            v139 = v51[5];
            v138 = v51[6];
            if (v138)
            {
              v140 = v138 + 1;
              do
                v141 = __ldxr(v140);
              while (__stxr(v141 + 1, v140));
            }
            v142 = v48 + 24 * v47;
            *(_QWORD *)(v142 + 552) = v139;
            v143 = *(std::__shared_weak_count **)(v142 + 560);
            *(_QWORD *)(v142 + 560) = v138;
            if (v143)
            {
              v144 = (unint64_t *)&v143->__shared_owners_;
              do
                v145 = __ldaxr(v144);
              while (__stlxr(v145 - 1, v144));
              if (!v145)
              {
                ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                std::__shared_weak_count::__release_weak(v143);
              }
            }
            *(_QWORD *)v298 = &off_24C9E9B90;
            *(_QWORD *)&v298[8] = v48;
            *(_QWORD *)&v298[16] = v142 + 544;
            v299 = v298;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v142 + 544) + 40))(*(_QWORD *)(v142 + 544), v298);
            v146 = v299;
            if (v299 == v298)
            {
              v146 = v298;
              v147 = 4;
            }
            else
            {
              if (!v299)
                goto LABEL_176;
              v147 = 5;
            }
            (*(void (**)(void))(*(_QWORD *)v146 + 8 * v147))();
            goto LABEL_176;
          }
          v136 = (uint64_t)v51[5];
          *(_QWORD *)(v136 + 1696) = *(_QWORD *)(v48 + 528);
          if ((*(_DWORD *)(v136 + 8) & 0x80000000) == 0)
          {
            v137 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 40))(v48, v136);
            v136 = (uint64_t)v51[5];
            if ((v137 & 1) != 0)
            {
              ++*(_DWORD *)(v136 + 8);
              *(_QWORD *)(v136 + 344) = *(_QWORD *)(v136 + 664);
              sub_20EDF4AA4(v136);
LABEL_176:
              ++v47;
              v50 = v272;
              goto LABEL_177;
            }
            *(_DWORD *)(v136 + 8) = -1;
          }
          std::mutex::lock((std::mutex *)(v136 + 1760));
          v148 = *(void ***)(v136 + 1720);
          v149 = *(void ***)(v136 + 1728);
          if (v149 == v148)
          {
            *(_QWORD *)(v136 + 1752) = 0;
            v155 = 0;
          }
          else
          {
            v150 = *(_QWORD *)(v136 + 1744);
            v151 = &v148[v150 >> 4];
            v152 = (uint64_t)*v151 + 336 * (v150 & 0xF);
            v153 = (_QWORD *)(v136 + 1752);
            v154 = *(uint64_t *)((char *)v148 + (((*(_QWORD *)(v136 + 1752) + v150) >> 1) & 0x7FFFFFFFFFFFFFF8))
                 + 336 * ((*(_DWORD *)(v136 + 1752) + (int)v150) & 0xF);
            if (v152 == v154)
            {
              *v153 = 0;
              v155 = (char *)v149 - (char *)v148;
              if (v155 >= 0x11)
                goto LABEL_157;
            }
            else
            {
              do
              {
                v157 = *(void **)(v152 + 24);
                if (v157)
                {
                  *(_QWORD *)(v152 + 32) = v157;
                  operator delete(v157);
                }
                v158 = *(void **)v152;
                if (*(_QWORD *)v152)
                {
                  *(_QWORD *)(v152 + 8) = v158;
                  operator delete(v158);
                }
                v152 += 336;
                if (v152 - (_QWORD)*v151 == 5376)
                {
                  v159 = (uint64_t)v151[1];
                  ++v151;
                  v152 = v159;
                }
              }
              while (v152 != v154);
              v160 = *(_QWORD *)(v136 + 1728);
              v148 = *(void ***)(v136 + 1720);
              *v153 = 0;
              v155 = v160 - (_QWORD)v148;
              if (v155 >= 0x11)
              {
                do
                {
LABEL_157:
                  operator delete(*v148);
                  v148 = (void **)(*(_QWORD *)(v136 + 1720) + 8);
                  *(_QWORD *)(v136 + 1720) = v148;
                  v155 = *(_QWORD *)(v136 + 1728) - (_QWORD)v148;
                }
                while (v155 > 0x10);
              }
            }
          }
          if (v155 >> 3 == 1)
          {
            v156 = 8;
LABEL_172:
            *(_QWORD *)(v136 + 1744) = v156;
          }
          else if (v155 >> 3 == 2)
          {
            v156 = 16;
            goto LABEL_172;
          }
          std::mutex::unlock((std::mutex *)(v136 + 1760));
          goto LABEL_176;
        }
LABEL_177:
        v161 = v51[1];
        if (v161)
        {
          do
          {
            v162 = (_QWORD **)v161;
            v161 = (_QWORD *)*v161;
          }
          while (v161);
        }
        else
        {
          do
          {
            v162 = (_QWORD **)v51[2];
            v21 = *v162 == v51;
            v51 = v162;
          }
          while (!v21);
        }
        v51 = v162;
      }
      while (v162 != &v296);
    }
    v49 = 0;
  }
  while ((v50 & 1) != 0);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  if (*(_BYTE *)(v48 + 432))
  {
    v163 = v295;
    if (v295 == &v296)
    {
      v164 = 0;
    }
    else
    {
      v164 = 0;
      do
      {
        v165 = v163[5];
        if (*(int *)(v165 + 8) >= 1)
        {
          sub_20EDB4EA0((double *)v165, (uint64_t)v298);
          v166 = *(_QWORD *)(a9 + 8);
          if (v166 >= *(_QWORD *)(a9 + 16))
          {
            v177 = sub_20EDF659C((void **)a9, (uint64_t)v298);
            v178 = *(void **)&v298[8];
            *(_QWORD *)(a9 + 8) = v177;
            if (v178)
            {
              *(_QWORD *)&v298[16] = v178;
              operator delete(v178);
            }
          }
          else
          {
            *(_QWORD *)v166 = *(_QWORD *)v298;
            *(_QWORD *)(v166 + 8) = 0;
            *(_QWORD *)(v166 + 16) = 0;
            *(_QWORD *)(v166 + 24) = 0;
            *(_OWORD *)(v166 + 8) = *(_OWORD *)&v298[8];
            *(_QWORD *)(v166 + 24) = v299;
            *(_OWORD *)&v298[8] = 0uLL;
            v299 = 0;
            v167 = v301;
            *(_OWORD *)(v166 + 32) = v300;
            *(_OWORD *)(v166 + 48) = v167;
            v168 = v305;
            v170 = v302;
            v169 = v303;
            *(_OWORD *)(v166 + 96) = v304;
            *(_OWORD *)(v166 + 112) = v168;
            *(_OWORD *)(v166 + 64) = v170;
            *(_OWORD *)(v166 + 80) = v169;
            v171 = v309;
            v173 = v306;
            v172 = v307;
            *(_OWORD *)(v166 + 160) = v308;
            *(_OWORD *)(v166 + 176) = v171;
            *(_OWORD *)(v166 + 128) = v173;
            *(_OWORD *)(v166 + 144) = v172;
            v175 = v311;
            v174 = v312;
            v176 = v310;
            *(_QWORD *)(v166 + 240) = v313;
            *(_OWORD *)(v166 + 208) = v175;
            *(_OWORD *)(v166 + 224) = v174;
            *(_OWORD *)(v166 + 192) = v176;
            *(_QWORD *)(a9 + 8) = v166 + 248;
          }
          ++v164;
        }
        v179 = (_QWORD *)v163[1];
        if (v179)
        {
          do
          {
            v180 = (_QWORD **)v179;
            v179 = (_QWORD *)*v179;
          }
          while (v179);
        }
        else
        {
          do
          {
            v180 = (_QWORD **)v163[2];
            v21 = *v180 == v163;
            v163 = v180;
          }
          while (!v21);
        }
        v163 = v180;
      }
      while (v180 != &v296);
    }
  }
  else
  {
    v164 = 0;
    if (v47)
    {
      v181 = (double **)(v48 + 552);
      do
      {
        (*(void (**)(_QWORD))(**((_QWORD **)*(v181 - 1) + 1) + 24))(*((_QWORD *)*(v181 - 1) + 1));
        if (*((int *)*v181 + 2) >= 1)
        {
          sub_20EDB4EA0(*v181, (uint64_t)v298);
          v192 = *(_QWORD *)(a9 + 8);
          if (v192 < *(_QWORD *)(a9 + 16))
          {
            *(_QWORD *)v192 = *(_QWORD *)v298;
            *(_QWORD *)(v192 + 8) = 0;
            *(_QWORD *)(v192 + 16) = 0;
            *(_QWORD *)(v192 + 24) = 0;
            *(_OWORD *)(v192 + 8) = *(_OWORD *)&v298[8];
            *(_QWORD *)(v192 + 24) = v299;
            *(_OWORD *)&v298[8] = 0uLL;
            v299 = 0;
            v182 = v301;
            *(_OWORD *)(v192 + 32) = v300;
            *(_OWORD *)(v192 + 48) = v182;
            v183 = v305;
            v185 = v302;
            v184 = v303;
            *(_OWORD *)(v192 + 96) = v304;
            *(_OWORD *)(v192 + 112) = v183;
            *(_OWORD *)(v192 + 64) = v185;
            *(_OWORD *)(v192 + 80) = v184;
            v186 = v309;
            v188 = v306;
            v187 = v307;
            *(_OWORD *)(v192 + 160) = v308;
            *(_OWORD *)(v192 + 176) = v186;
            *(_OWORD *)(v192 + 128) = v188;
            *(_OWORD *)(v192 + 144) = v187;
            v190 = v311;
            v189 = v312;
            v191 = v310;
            *(_QWORD *)(v192 + 240) = v313;
            *(_OWORD *)(v192 + 208) = v190;
            *(_OWORD *)(v192 + 224) = v189;
            *(_OWORD *)(v192 + 192) = v191;
            *(_QWORD *)(a9 + 8) = v192 + 248;
          }
          else
          {
            v193 = sub_20EDF659C((void **)a9, (uint64_t)v298);
            v194 = *(void **)&v298[8];
            *(_QWORD *)(a9 + 8) = v193;
            if (v194)
            {
              *(_QWORD *)&v298[16] = v194;
              operator delete(v194);
            }
          }
          ++v164;
        }
        v181 += 3;
        --v47;
      }
      while (v47);
    }
  }
LABEL_220:
  v197 = (char *)v277;
  v196 = v278;
  if (v278 != v277)
  {
    v198 = 0;
    while (!*(_BYTE *)(v273 + 432))
    {
      if ((*(_DWORD *)(*(_QWORD *)(v273 + 24 * (v198 + v274) + 552) + 8) & 0x80000000) != 0)
      {
        v200 = &v197[248 * v198];
        v208 = *(_QWORD *)(a9 + 8);
        if (v208 < *(_QWORD *)(a9 + 16))
        {
          *(_QWORD *)v208 = *(_QWORD *)v200;
          *(_QWORD *)(v208 + 8) = 0;
          v213 = &v197[248 * v198];
          *(_QWORD *)(v208 + 16) = 0;
          *(_QWORD *)(v208 + 24) = 0;
          v211 = (_BYTE *)*((_QWORD *)v213 + 1);
          v210 = (_BYTE *)*((_QWORD *)v213 + 2);
          v212 = v210 - v211;
          if (v210 != v211)
          {
            if (v212 < 0)
              sub_20E867F44();
LABEL_245:
            v214 = (char *)operator new(v210 - v211);
            *(_QWORD *)(v208 + 8) = v214;
            *(_QWORD *)(v208 + 16) = v214;
            *(_QWORD *)(v208 + 24) = &v214[16 * (v212 >> 4)];
            v215 = v212 & 0xFFFFFFFFFFFFFFF0;
            memcpy(v214, v211, v215);
            *(_QWORD *)(v208 + 16) = &v214[v215];
          }
LABEL_246:
          v216 = &v197[248 * v198];
          v217 = *((_OWORD *)v216 + 3);
          *(_OWORD *)(v208 + 32) = *((_OWORD *)v216 + 2);
          *(_OWORD *)(v208 + 48) = v217;
          v218 = *((_OWORD *)v216 + 4);
          v219 = *((_OWORD *)v216 + 5);
          v220 = *((_OWORD *)v216 + 7);
          *(_OWORD *)(v208 + 96) = *((_OWORD *)v216 + 6);
          *(_OWORD *)(v208 + 112) = v220;
          *(_OWORD *)(v208 + 64) = v218;
          *(_OWORD *)(v208 + 80) = v219;
          v221 = *((_OWORD *)v216 + 8);
          v222 = *((_OWORD *)v216 + 9);
          v223 = *((_OWORD *)v216 + 11);
          *(_OWORD *)(v208 + 160) = *((_OWORD *)v216 + 10);
          *(_OWORD *)(v208 + 176) = v223;
          *(_OWORD *)(v208 + 128) = v221;
          *(_OWORD *)(v208 + 144) = v222;
          v224 = *((_OWORD *)v216 + 12);
          v225 = *((_OWORD *)v216 + 13);
          v226 = *((_OWORD *)v216 + 14);
          *(_QWORD *)(v208 + 240) = *((_QWORD *)v216 + 30);
          *(_OWORD *)(v208 + 208) = v225;
          *(_OWORD *)(v208 + 224) = v226;
          *(_OWORD *)(v208 + 192) = v224;
          v227 = (_QWORD *)(v208 + 248);
          a9 = v271;
          *(_QWORD *)(v271 + 8) = v208 + 248;
LABEL_248:
          *(_QWORD *)(a9 + 8) = v227;
          v197 = (char *)v277;
          v196 = v278;
          goto LABEL_223;
        }
LABEL_247:
        v227 = sub_20EDB8290((_QWORD *)a9, (uint64_t)v200);
        goto LABEL_248;
      }
LABEL_223:
      if (++v198 >= 0xEF7BDEF7BDEF7BDFLL * ((v196 - v197) >> 3))
        goto LABEL_249;
    }
    v199 = v296;
    if (!v296)
      goto LABEL_223;
    v200 = &v197[248 * v198];
    v201 = *(_QWORD *)v200;
    v202 = &v296;
    do
    {
      v203 = v199;
      v204 = v202;
      v205 = v199[4];
      v206 = v199 + 1;
      if (v205 >= v201)
      {
        v206 = v203;
        v202 = (_QWORD **)v203;
      }
      v199 = (_QWORD *)*v206;
    }
    while (v199);
    if (v202 == &v296)
      goto LABEL_223;
    v207 = v205 >= v201 ? v203 : v204;
    if (v201 < v207[4])
      goto LABEL_223;
    if (v205 < v201)
      v203 = v204;
    if ((*(_DWORD *)(v203[5] + 8) & 0x80000000) == 0)
      goto LABEL_223;
    v208 = *(_QWORD *)(a9 + 8);
    if (v208 < *(_QWORD *)(a9 + 16))
    {
      *(_QWORD *)v208 = v201;
      *(_QWORD *)(v208 + 8) = 0;
      v209 = &v197[248 * v198];
      *(_QWORD *)(v208 + 16) = 0;
      *(_QWORD *)(v208 + 24) = 0;
      v211 = (_BYTE *)*((_QWORD *)v209 + 1);
      v210 = (_BYTE *)*((_QWORD *)v209 + 2);
      v212 = v210 - v211;
      if (v210 != v211)
      {
        if (v212 < 0)
          sub_20E867F44();
        goto LABEL_245;
      }
      goto LABEL_246;
    }
    goto LABEL_247;
  }
LABEL_249:
  v228 = v295;
  if (v295 != &v296)
  {
    do
    {
      v229 = v228[5];
      if (!*(_DWORD *)(v229 + 8))
      {
        sub_20EDB4EA0((double *)v229, (uint64_t)v298);
        v230 = *(_QWORD *)(a9 + 8);
        if (v230 >= *(_QWORD *)(a9 + 16))
        {
          v241 = sub_20EDF659C((void **)a9, (uint64_t)v298);
          v242 = *(void **)&v298[8];
          *(_QWORD *)(a9 + 8) = v241;
          *(_DWORD *)(v228[5] + 8) = -1;
          if (v242)
          {
            *(_QWORD *)&v298[16] = v242;
            operator delete(v242);
          }
        }
        else
        {
          *(_QWORD *)v230 = *(_QWORD *)v298;
          *(_QWORD *)(v230 + 8) = 0;
          *(_QWORD *)(v230 + 16) = 0;
          *(_QWORD *)(v230 + 24) = 0;
          *(_OWORD *)(v230 + 8) = *(_OWORD *)&v298[8];
          *(_QWORD *)(v230 + 24) = v299;
          *(_OWORD *)&v298[8] = 0uLL;
          v299 = 0;
          v231 = v301;
          *(_OWORD *)(v230 + 32) = v300;
          *(_OWORD *)(v230 + 48) = v231;
          v232 = v305;
          v234 = v302;
          v233 = v303;
          *(_OWORD *)(v230 + 96) = v304;
          *(_OWORD *)(v230 + 112) = v232;
          *(_OWORD *)(v230 + 64) = v234;
          *(_OWORD *)(v230 + 80) = v233;
          v235 = v309;
          v237 = v306;
          v236 = v307;
          *(_OWORD *)(v230 + 160) = v308;
          *(_OWORD *)(v230 + 176) = v235;
          *(_OWORD *)(v230 + 128) = v237;
          *(_OWORD *)(v230 + 144) = v236;
          v239 = v311;
          v238 = v312;
          v240 = v310;
          *(_QWORD *)(v230 + 240) = v313;
          *(_OWORD *)(v230 + 208) = v239;
          *(_OWORD *)(v230 + 224) = v238;
          *(_OWORD *)(v230 + 192) = v240;
          *(_QWORD *)(a9 + 8) = v230 + 248;
          *(_DWORD *)(v228[5] + 8) = -1;
        }
      }
      v243 = (_QWORD *)v228[1];
      if (v243)
      {
        do
        {
          v244 = (_QWORD **)v243;
          v243 = (_QWORD *)*v243;
        }
        while (v243);
      }
      else
      {
        do
        {
          v244 = (_QWORD **)v228[2];
          v21 = *v244 == v228;
          v228 = v244;
        }
        while (!v21);
      }
      v228 = v244;
    }
    while (v244 != &v296);
  }
  *(_QWORD *)(v273 + 480) = v164;
  if (*(_BYTE *)(v273 + 272))
  {
    v245 = *(std::__shared_weak_count **)(v273 + 288);
    *(_QWORD *)(v273 + 280) = 0;
    *(_QWORD *)(v273 + 288) = 0;
    if (v245)
    {
      v246 = (unint64_t *)&v245->__shared_owners_;
      do
        v247 = __ldaxr(v246);
      while (__stlxr(v247 - 1, v246));
      if (!v247)
      {
        ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
        std::__shared_weak_count::__release_weak(v245);
      }
    }
    v248 = v295;
    if (v295 != &v296)
    {
      do
      {
        v252 = v248[5];
        v253 = *(std::__shared_weak_count **)(v252 + 584);
        *(_QWORD *)(v252 + 576) = 0;
        *(_QWORD *)(v252 + 584) = 0;
        if (!v253)
          goto LABEL_278;
        v254 = (unint64_t *)&v253->__shared_owners_;
        do
          v255 = __ldaxr(v254);
        while (__stlxr(v255 - 1, v254));
        if (!v255)
        {
          ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
          std::__shared_weak_count::__release_weak(v253);
          v256 = (_QWORD *)v248[1];
          if (!v256)
          {
            do
            {
LABEL_282:
              v257 = (_QWORD **)v248[2];
              v21 = *v257 == v248;
              v248 = v257;
            }
            while (!v21);
            goto LABEL_273;
          }
        }
        else
        {
LABEL_278:
          v256 = (_QWORD *)v248[1];
          if (!v256)
            goto LABEL_282;
        }
        do
        {
          v257 = (_QWORD **)v256;
          v256 = (_QWORD *)*v256;
        }
        while (v256);
LABEL_273:
        v248 = v257;
      }
      while (v257 != &v296);
    }
  }
  v249 = (char *)v277;
  if (v277)
  {
    v250 = v278;
    v251 = v277;
    if (v278 != v277)
    {
      do
      {
        v258 = (void *)*((_QWORD *)v250 - 30);
        if (v258)
        {
          *((_QWORD *)v250 - 29) = v258;
          operator delete(v258);
        }
        v250 -= 248;
      }
      while (v250 != v249);
      v251 = v277;
    }
    v278 = v249;
    operator delete(v251);
  }
  v285 = &off_24C9AFD78;
  if ((_QWORD)v293)
  {
    *((_QWORD *)&v293 + 1) = v293;
    operator delete((void *)v293);
  }
  v259 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
  if (*((_QWORD *)&v292 + 1))
  {
    v260 = (unint64_t *)(*((_QWORD *)&v292 + 1) + 8);
    do
      v261 = __ldaxr(v260);
    while (__stlxr(v261 - 1, v260));
    if (!v261)
    {
      ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
      std::__shared_weak_count::__release_weak(v259);
    }
  }
  v262 = (std::__shared_weak_count *)*((_QWORD *)&v291 + 1);
  if (*((_QWORD *)&v291 + 1))
  {
    v263 = (unint64_t *)(*((_QWORD *)&v291 + 1) + 8);
    do
      v264 = __ldaxr(v263);
    while (__stlxr(v264 - 1, v263));
    if (!v264)
    {
      ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
      std::__shared_weak_count::__release_weak(v262);
    }
  }
  sub_20E8D03C0((uint64_t)&v295, v296);
}

void sub_20EDF48E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59)
{
  uint64_t v59;
  void **v60;
  void *v62;

  v62 = *v60;
  if (*v60)
  {
    *(_QWORD *)(v59 + 16) = v62;
    operator delete(v62);
  }
  *(_QWORD *)(a21 + 8) = v59;
  sub_20E8E5B90((void **)a21);
  sub_20E8E5B90(&a28);
  sub_20E8E481C(&a40);
  sub_20E8D03C0((uint64_t)&a58, (_QWORD *)a59);
  _Unwind_Resume(a1);
}

void sub_20EDF4AA4(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  unsigned int v8;
  double v9;
  double v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  void *v32;
  char *v33;
  char *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  BOOL v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  void *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  __int128 *v78;
  _OWORD *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  size_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  __int128 *v97;
  _OWORD *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  _BYTE *v104;
  _BYTE *v105;
  int64_t v106;
  _BYTE *v107;
  _BYTE *v108;
  int64_t v109;
  _BYTE *v110;
  char *v111;
  size_t v112;
  _BYTE *v113;
  char *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  void *v120;
  void *v121;
  int64x2_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  int64_t v126;
  unint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  __int128 *v133;
  _OWORD *v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;

  v2 = (std::mutex *)(a1 + 1760);
  std::mutex::lock((std::mutex *)(a1 + 1760));
  v3 = *(_QWORD *)(a1 + 1752);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 1744);
    v5 = v3 + v4 - 1;
    v6 = *(char **)(a1 + 1720);
    v7 = *(_QWORD *)&v6[(v5 >> 1) & 0x7FFFFFFFFFFFFFF8];
    v8 = v5 & 0xF;
    v9 = *(double *)(v7 + 336 * (v5 & 0xF) + 328);
    v10 = *(double *)(a1 + 344);
    if (v9 > v10)
      goto LABEL_121;
    if (v10 == v9)
    {
      v11 = (_QWORD *)(v7 + 336 * (v5 & 0xF));
      if (v11 != (_QWORD *)(a1 + 16))
      {
        sub_20E9BF954(v11, *(char **)(a1 + 16), *(char **)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4);
        sub_20E9BF954((_QWORD *)(v7 + 336 * v8 + 24), *(char **)(a1 + 40), *(char **)(a1 + 48), (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 4);
      }
      memcpy((void *)(v7 + 336 * v8 + 48), (const void *)(a1 + 64), 0x120uLL);
      goto LABEL_121;
    }
  }
  else
  {
    v6 = *(char **)(a1 + 1720);
    v4 = *(_QWORD *)(a1 + 1744);
  }
  v12 = *(char **)(a1 + 1728);
  v13 = 2 * (v12 - v6) - 1;
  v14 = v12 - v6;
  if (v12 == v6)
    v13 = 0;
  if (v13 == v4 + v3)
  {
    if (v4 >= 0x10)
    {
      *(_QWORD *)(a1 + 1744) = v4 - 16;
      v15 = v6 + 8;
      v16 = *(_QWORD *)v6;
      *(_QWORD *)(a1 + 1720) = v6 + 8;
      if (v12 != *(char **)(a1 + 1736))
      {
LABEL_102:
        *(_QWORD *)v12 = v16;
        goto LABEL_103;
      }
      v17 = *(char **)(a1 + 1712);
      if (v15 > v17)
      {
        v18 = (v15 - v17) >> 3;
        if (v18 >= -1)
          v19 = v18 + 1;
        else
          v19 = v18 + 2;
        v20 = v19 >> 1;
        v21 = -v20;
        v22 = &v15[-8 * v20];
        v23 = v12 - v15;
        if (v12 != v15)
        {
          memmove(&v15[-8 * v20], v15, v12 - v15);
          v12 = *(char **)(a1 + 1720);
        }
        v24 = &v12[8 * v21];
        v12 = &v22[v23];
        *(_QWORD *)(a1 + 1728) = &v22[v23];
        *(_QWORD *)(a1 + 1720) = v24;
        goto LABEL_102;
      }
      if (v12 == v17)
        v37 = 1;
      else
        v37 = (v12 - v17) >> 2;
      if (!(v37 >> 61))
      {
        v38 = (char *)operator new(8 * v37);
        v39 = &v38[8 * (v37 >> 2)];
        v41 = v12 - v15;
        v40 = v12 == v15;
        v12 = v39;
        if (v40)
          goto LABEL_100;
        v12 = &v39[v41 & 0xFFFFFFFFFFFFFFF8];
        v42 = v41 - 8;
        if (v42 >= 0x38)
        {
          v94 = &v38[8 * (v37 >> 2)];
          v43 = v94;
          if ((unint64_t)(v94 - v15) >= 0x20)
          {
            v95 = (v42 >> 3) + 1;
            v96 = 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
            v43 = &v39[v96];
            v15 += v96;
            v97 = (__int128 *)(v6 + 24);
            v98 = v94 + 16;
            v99 = v95 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v100 = *v97;
              *(v98 - 1) = *(v97 - 1);
              *v98 = v100;
              v97 += 2;
              v98 += 2;
              v99 -= 4;
            }
            while (v99);
            if (v95 == (v95 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_100:
              *(_QWORD *)(a1 + 1712) = v38;
              *(_QWORD *)(a1 + 1720) = v39;
              *(_QWORD *)(a1 + 1728) = v12;
              *(_QWORD *)(a1 + 1736) = &v38[8 * v37];
              if (v17)
              {
                operator delete(v17);
                v12 = *(char **)(a1 + 1728);
              }
              goto LABEL_102;
            }
          }
        }
        else
        {
          v43 = &v38[8 * (v37 >> 2)];
        }
        do
        {
          v101 = *(_QWORD *)v15;
          v15 += 8;
          *(_QWORD *)v43 = v101;
          v43 += 8;
        }
        while (v43 != v12);
        goto LABEL_100;
      }
LABEL_139:
      sub_20E877A38();
    }
    v25 = v14 >> 3;
    v26 = *(char **)(a1 + 1736);
    v27 = *(char **)(a1 + 1712);
    if (v14 >> 3 >= (unint64_t)((v26 - v27) >> 3))
    {
      if (v26 == v27)
        v30 = 1;
      else
        v30 = (v26 - v27) >> 2;
      if (!(v30 >> 61))
      {
        v31 = (char *)operator new(8 * v30);
        v32 = operator new(0x1500uLL);
        v33 = &v31[8 * v25];
        v34 = &v31[8 * v30];
        if (v25 == v30)
        {
          v35 = v32;
          if (v14 < 1)
          {
            if (v12 == v6)
              v45 = 1;
            else
              v45 = v14 >> 2;
            if (v45 >> 61)
              sub_20E877A38();
            v33 = (char *)operator new(8 * v45);
            v34 = &v33[8 * v45];
            operator delete(v31);
            v12 = *(char **)(a1 + 1728);
            v6 = *(char **)(a1 + 1720);
            v31 = v33;
          }
          else
          {
            v36 = v25 + 2;
            if (v25 >= -1)
              v36 = v25 + 1;
            v33 -= 8 * (v36 >> 1);
          }
          v32 = v35;
        }
        *(_QWORD *)v33 = v32;
        v46 = v33 + 8;
        if (v12 == v6)
        {
          v47 = v33;
          v48 = v33 + 8;
        }
        else
        {
          do
          {
            if (v33 == v31)
            {
              if (v46 >= v34)
              {
                if (v34 == v33)
                  v54 = 1;
                else
                  v54 = (v34 - v33) >> 2;
                if (v54 >> 61)
                  sub_20E877A38();
                v55 = (char *)operator new(8 * v54);
                v31 = v55;
                v56 = (v54 + 3) >> 2;
                v50 = &v55[8 * v56];
                v48 = v50;
                v57 = v46 - v33;
                if (v46 != v33)
                {
                  v48 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
                  v58 = v57 - 8;
                  v59 = &v55[8 * v56];
                  v60 = v33;
                  if (v58 < 0x38)
                    goto LABEL_143;
                  v61 = 8 * v56;
                  v59 = &v55[8 * v56];
                  v60 = v33;
                  if ((unint64_t)(v59 - v33) < 0x20)
                    goto LABEL_143;
                  v62 = (v58 >> 3) + 1;
                  v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
                  v59 = &v50[v63];
                  v60 = &v33[v63];
                  v64 = (__int128 *)(v33 + 16);
                  v65 = &v55[v61 + 16];
                  v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v67 = *v64;
                    *((_OWORD *)v65 - 1) = *(v64 - 1);
                    *(_OWORD *)v65 = v67;
                    v64 += 2;
                    v65 += 32;
                    v66 -= 4;
                  }
                  while (v66);
                  if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_143:
                    do
                    {
                      v68 = *(_QWORD *)v60;
                      v60 += 8;
                      *(_QWORD *)v59 = v68;
                      v59 += 8;
                    }
                    while (v59 != v48);
                  }
                }
                v34 = &v55[8 * v54];
                operator delete(v33);
              }
              else
              {
                v52 = (v34 - v46) >> 3;
                if (v52 >= -1)
                  v53 = v52 + 1;
                else
                  v53 = v52 + 2;
                v48 = &v46[8 * (v53 >> 1)];
                v50 = &v33[8 * (v53 >> 1)];
                if (v46 == v33)
                {
                  v31 = v46;
                }
                else
                {
                  memmove(&v33[8 * (v53 >> 1)], v33, v46 - v33);
                  v31 = v33;
                }
              }
            }
            else
            {
              v50 = v33;
              v48 = v46;
            }
            v51 = *((_QWORD *)v12 - 1);
            v12 -= 8;
            *((_QWORD *)v50 - 1) = v51;
            v47 = v50 - 8;
            v46 = v48;
            v33 = v47;
          }
          while (v12 != *(char **)(a1 + 1720));
        }
        v49 = *(void **)(a1 + 1712);
        *(_QWORD *)(a1 + 1712) = v31;
        *(_QWORD *)(a1 + 1720) = v47;
        *(_QWORD *)(a1 + 1728) = v48;
        v12 = v48;
        *(_QWORD *)(a1 + 1736) = v34;
        if (v49)
        {
          operator delete(v49);
          v12 = *(char **)(a1 + 1728);
        }
        goto LABEL_104;
      }
      goto LABEL_139;
    }
    v28 = operator new(0x1500uLL);
    v29 = v28;
    if (v26 != v12)
    {
      *(_QWORD *)v12 = v28;
LABEL_103:
      v12 = (char *)(*(_QWORD *)(a1 + 1728) + 8);
      *(_QWORD *)(a1 + 1728) = v12;
LABEL_104:
      v6 = *(char **)(a1 + 1720);
      goto LABEL_105;
    }
    if (v6 == v27)
    {
      if (v12 == v6)
        v69 = 1;
      else
        v69 = (v26 - v6) >> 2;
      if (v69 >> 61)
        goto LABEL_139;
      v70 = (char *)operator new(8 * v69);
      v71 = (v69 + 3) >> 2;
      v44 = &v70[8 * v71];
      v72 = v44;
      if (v12 != v6)
      {
        v72 = &v44[8 * v25];
        v73 = &v70[8 * v71];
        v74 = v6;
        if ((unint64_t)(v14 - 8) < 0x38)
          goto LABEL_144;
        v75 = &v70[8 * v71];
        v73 = v75;
        v74 = v6;
        if ((unint64_t)(v75 - v6) < 0x20)
          goto LABEL_144;
        v76 = ((unint64_t)(v14 - 8) >> 3) + 1;
        v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
        v73 = &v44[v77];
        v74 = &v6[v77];
        v78 = (__int128 *)(v6 + 16);
        v79 = v75 + 16;
        v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v81 = *v78;
          *(v79 - 1) = *(v78 - 1);
          *v79 = v81;
          v78 += 2;
          v79 += 2;
          v80 -= 4;
        }
        while (v80);
        if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_144:
          do
          {
            v82 = *(_QWORD *)v74;
            v74 += 8;
            *(_QWORD *)v73 = v82;
            v73 += 8;
          }
          while (v73 != v72);
        }
      }
      *(_QWORD *)(a1 + 1712) = v70;
      *(_QWORD *)(a1 + 1720) = v44;
      *(_QWORD *)(a1 + 1728) = v72;
      *(_QWORD *)(a1 + 1736) = &v70[8 * v69];
      if (v6)
      {
        operator delete(v6);
        v44 = *(char **)(a1 + 1720);
      }
    }
    else
    {
      v44 = v6;
    }
    *((_QWORD *)v44 - 1) = v29;
    v83 = *(char **)(a1 + 1720);
    *(_QWORD *)(a1 + 1720) = v83 - 8;
    v84 = *((_QWORD *)v83 - 1);
    *(_QWORD *)(a1 + 1720) = v83;
    v85 = *(char **)(a1 + 1728);
    if (v85 != *(char **)(a1 + 1736))
    {
LABEL_87:
      *(_QWORD *)v85 = v84;
      goto LABEL_103;
    }
    v86 = *(char **)(a1 + 1712);
    if (v83 > v86)
    {
      v87 = (v83 - v86) >> 3;
      if (v87 >= -1)
        v88 = v87 + 1;
      else
        v88 = v87 + 2;
      v89 = v88 >> 1;
      v90 = -v89;
      v91 = &v83[-8 * v89];
      v92 = v85 - v83;
      if (v92)
      {
        memmove(&v83[-8 * v89], v83, v92);
        v83 = *(char **)(a1 + 1720);
      }
      v93 = &v91[v92];
      *(_QWORD *)(a1 + 1728) = v93;
      *(_QWORD *)(a1 + 1720) = &v83[8 * v90];
      *(_QWORD *)v93 = v84;
      goto LABEL_103;
    }
    if (v85 == v86)
      v123 = 1;
    else
      v123 = (v85 - v86) >> 2;
    if (v123 >> 61)
      goto LABEL_139;
    v124 = (char *)operator new(8 * v123);
    v125 = &v124[8 * (v123 >> 2)];
    v126 = v85 - v83;
    v40 = v85 == v83;
    v85 = v125;
    if (!v40)
    {
      v85 = &v125[v126 & 0xFFFFFFFFFFFFFFF8];
      v127 = v126 - 8;
      if (v127 < 0x38)
      {
        v128 = &v124[8 * (v123 >> 2)];
        do
        {
LABEL_133:
          v137 = *(_QWORD *)v83;
          v83 += 8;
          *(_QWORD *)v128 = v137;
          v128 += 8;
        }
        while (v128 != v85);
        goto LABEL_134;
      }
      v129 = &v124[8 * (v123 >> 2)];
      v128 = v129;
      if ((unint64_t)(v129 - v83) < 0x20)
        goto LABEL_133;
      v130 = (v127 >> 3) + 1;
      v131 = 8 * (v130 & 0x3FFFFFFFFFFFFFFCLL);
      v128 = &v125[v131];
      v132 = &v83[v131];
      v133 = (__int128 *)(v83 + 16);
      v134 = v129 + 16;
      v135 = v130 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v136 = *v133;
        *(v134 - 1) = *(v133 - 1);
        *v134 = v136;
        v133 += 2;
        v134 += 2;
        v135 -= 4;
      }
      while (v135);
      v83 = v132;
      if (v130 != (v130 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_133;
    }
LABEL_134:
    *(_QWORD *)(a1 + 1712) = v124;
    *(_QWORD *)(a1 + 1720) = v125;
    *(_QWORD *)(a1 + 1728) = v85;
    *(_QWORD *)(a1 + 1736) = &v124[8 * v123];
    if (v86)
    {
      operator delete(v86);
      v85 = *(char **)(a1 + 1728);
    }
    goto LABEL_87;
  }
LABEL_105:
  if (v12 != v6)
  {
    v102 = *(_QWORD *)(a1 + 1752) + *(_QWORD *)(a1 + 1744);
    v103 = (_QWORD *)(*(_QWORD *)&v6[(v102 >> 1) & 0x7FFFFFFFFFFFFFF8] + 336 * (v102 & 0xF));
    *v103 = 0;
    v103[1] = 0;
    v103[2] = 0;
    v105 = *(_BYTE **)(a1 + 16);
    v104 = *(_BYTE **)(a1 + 24);
    v106 = v104 - v105;
    if (v104 == v105)
      goto LABEL_107;
LABEL_110:
    if (v106 < 0)
      sub_20E867F44();
    v111 = (char *)operator new(v106);
    *v103 = v111;
    v103[1] = v111;
    v103[2] = &v111[16 * (v106 >> 4)];
    v112 = v106 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v111, v105, v112);
    v103[1] = &v111[v112];
    v103[3] = 0;
    v103[4] = 0;
    v103[5] = 0;
    v108 = *(_BYTE **)(a1 + 40);
    v113 = *(_BYTE **)(a1 + 48);
    v109 = v113 - v108;
    if (v113 == v108)
      goto LABEL_114;
    goto LABEL_112;
  }
  v103 = 0;
  MEMORY[0] = 0;
  MEMORY[8] = 0;
  MEMORY[0x10] = 0;
  v105 = *(_BYTE **)(a1 + 16);
  v110 = *(_BYTE **)(a1 + 24);
  v106 = v110 - v105;
  if (v110 != v105)
    goto LABEL_110;
LABEL_107:
  v103[3] = 0;
  v103[4] = 0;
  v103[5] = 0;
  v108 = *(_BYTE **)(a1 + 40);
  v107 = *(_BYTE **)(a1 + 48);
  v109 = v107 - v108;
  if (v107 != v108)
  {
LABEL_112:
    if (v109 < 0)
      sub_20E867F44();
    v114 = (char *)operator new(v109);
    v103[3] = v114;
    v103[4] = v114;
    v103[5] = &v114[16 * (v109 >> 4)];
    memcpy(v114, v108, v109 & 0xFFFFFFFFFFFFFFF0);
    v103[4] = &v114[v109 & 0xFFFFFFFFFFFFFFF0];
  }
LABEL_114:
  memcpy(v103 + 6, (const void *)(a1 + 64), 0x120uLL);
  v115 = *(_QWORD *)(a1 + 1752) + 1;
  *(_QWORD *)(a1 + 1752) = v115;
  if (v115 >= 3)
  {
    v116 = *(_QWORD *)(a1 + 1744);
    v117 = *(_QWORD *)(*(_QWORD *)(a1 + 1720) + ((v116 >> 1) & 0x7FFFFFFFFFFFFFF8));
    v118 = v116 & 0xF;
    v119 = v117 + 336 * v118;
    v120 = *(void **)(v119 + 24);
    if (v120)
    {
      *(_QWORD *)(v117 + 336 * v118 + 32) = v120;
      operator delete(v120);
    }
    v121 = *(void **)v119;
    if (*(_QWORD *)v119)
    {
      *(_QWORD *)(v119 + 8) = v121;
      operator delete(v121);
    }
    v122 = vaddq_s64(*(int64x2_t *)(a1 + 1744), (int64x2_t)xmmword_2102E3FB0);
    *(int64x2_t *)(a1 + 1744) = v122;
    if (v122.i64[0] >= 0x20uLL)
    {
      operator delete(**(void ***)(a1 + 1720));
      *(_QWORD *)(a1 + 1720) += 8;
      *(_QWORD *)(a1 + 1744) -= 16;
    }
  }
LABEL_121:
  std::mutex::unlock(v2);
}

void sub_20EDF53CC(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void *v2;
  void *v3;

  operator delete(v3);
  operator delete(v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EDF5408(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EDF541C(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 32) = v5;
    operator delete(v5);
    v6 = *(void **)v2;
    if (!*(_QWORD *)v2)
    {
LABEL_3:
      std::mutex::unlock(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v6 = *(void **)v2;
    if (!*(_QWORD *)v2)
      goto LABEL_3;
  }
  *(_QWORD *)(v2 + 8) = v6;
  operator delete(v6);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EDF5478(uint64_t a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>, unint64_t a4@<D0>)
{
  std::mutex *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::mutex *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float64x2_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  _QWORD *v39;
  unint64_t v40;
  const void *v41;
  uint64_t v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD **v56;
  BOOL v57;
  uint64_t v60;
  __int128 __p;
  _BYTE v62[216];
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _BYTE v70[56];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  char v74;
  unint64_t v75;
  _BYTE v76[72];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  char v80;
  __int128 v81;
  uint64_t v82;
  _QWORD **v83;
  _QWORD *v84[4];

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v84[0] = 0;
  v84[1] = 0;
  v83 = v84;
  sub_20EDEF020(&v83, *(_QWORD **)(a1 + 72), (_QWORD *)(a1 + 80));
  std::mutex::unlock(v6);
  v7 = v83;
  if (v83 != v84)
  {
    do
    {
      v9 = v7[4];
      v8 = v7[5];
      v10 = (std::mutex *)(v8 + 1760);
      std::mutex::lock((std::mutex *)(v8 + 1760));
      v11 = *(_QWORD *)(v8 + 1752);
      if (v11)
      {
        v12 = *(_QWORD *)(v8 + 1744);
        v13 = *(_QWORD *)(v8 + 1720);
        if (*(double *)(*(_QWORD *)(v13 + (((v11 + v12 - 1) >> 1) & 0x7FFFFFFFFFFFFFF8))
                       + 336 * (((_DWORD)v11 + (_DWORD)v12 - 1) & 0xF)
                       + 328) < *(double *)&a4)
        {
          if (v11 < 2)
          {
LABEL_10:
            sub_20EDA24B4((uint64_t)v70, 0, 1.79769313e308, 1.79769313e308, 16.6666667);
            sub_20EDA2A08((uint64_t)v76, 1, 1.79769313e308, 1.79769313e308, 16.6666667);
            v74 = 0;
            v72 = 0u;
            v73 = 0u;
            v71 = 0u;
            v75 = 0xBFF0000000000000;
            *(_OWORD *)&v76[56] = 0u;
            v77 = 0u;
            v78 = 0u;
            v79 = 0u;
            v80 = 0;
            v81 = xmmword_210378E00;
            v82 = 0;
            v16 = *(_QWORD *)(v8 + 1720);
            if (*(_QWORD *)(v8 + 1728) != v16)
            {
              v17 = *(_QWORD *)(v8 + 1744);
              v18 = (_QWORD *)(v16 + 8 * (v17 >> 4));
              v19 = *v18 + 336 * (v17 & 0xF);
              v20 = *(_QWORD *)(v16 + (((*(_QWORD *)(v8 + 1752) + v17) >> 1) & 0x7FFFFFFFFFFFFFF8))
                  + 336 * ((*(_DWORD *)(v8 + 1752) + (_DWORD)v17) & 0xF);
              while (v19 != v20)
              {
                sub_20EDDFBAC((uint64_t)v70, v19 + 56, (uint64_t)&v60, *(double *)(v19 + 328), v15);
                v19 += 336;
                if (v19 - *v18 == 5376)
                {
                  v21 = v18[1];
                  ++v18;
                  v19 = v21;
                }
              }
            }
            v68 = 0u;
            v69 = 0u;
            v66 = 0u;
            v67 = 0u;
            v64 = 0u;
            v65 = 0u;
            sub_20EDE0208((uint64_t)v70, (uint64_t)&v64, (float64x2_t)a4);
            v22 = a2[1];
            v23 = a2[2];
            v24 = *(double *)&v64 * *a2 + *(double *)&v66 * v22 + *(double *)&v68 * v23;
            v25 = *a2 * *((double *)&v64 + 1) + v22 * *((double *)&v66 + 1) + v23 * *((double *)&v68 + 1);
            v26 = *a2 * *(double *)&v65 + v23 * *(double *)&v69 + v22 * *(double *)&v67;
            v27 = a2[3] + *a2 * *((double *)&v65 + 1) + v23 * *((double *)&v69 + 1) + v22 * *((double *)&v67 + 1);
            v28 = a2[4];
            v29 = a2[5];
            v30 = a2[6];
            v31 = *(double *)&v64 * v28 + *(double *)&v66 * v29 + *(double *)&v68 * v30;
            v32 = *((double *)&v64 + 1) * v28 + *((double *)&v66 + 1) * v29 + *((double *)&v68 + 1) * v30;
            v33 = *(double *)&v67 * v29 + *(double *)&v65 * v28 + *(double *)&v69 * v30;
            v34 = *((double *)&v67 + 1) * v29 + *((double *)&v69 + 1) * v30 + *((double *)&v65 + 1) * v28 + a2[7];
            v35 = a2[8];
            v36 = a2[9];
            v37 = a2[10];
            v38 = a2[11];
            memset(&v62[48], 0, 168);
            memset(&v62[16], 0, 32);
            __p = 0u;
            *(_OWORD *)v62 = 0u;
            v63 = 0x3FF0000000000000;
            v60 = v9;
            *(_QWORD *)&v62[208] = *(int *)(v8 + 8) + 1;
            *(double *)&v62[8] = v24;
            *(double *)&v62[16] = v25;
            *(double *)&v62[24] = v26;
            *(double *)&v62[32] = v27;
            *(double *)&v62[40] = v31;
            *(double *)&v62[48] = v32;
            *(double *)&v62[56] = v33;
            *(double *)&v62[64] = v34;
            *(double *)&v62[72] = *(double *)&v64 * v35 + *(double *)&v68 * v37 + *(double *)&v66 * v36;
            *(double *)&v62[80] = *((double *)&v64 + 1) * v35
                                + *((double *)&v68 + 1) * v37
                                + *((double *)&v66 + 1) * v36;
            *(double *)&v62[88] = *(double *)&v65 * v35 + *(double *)&v69 * v37 + *(double *)&v67 * v36;
            *(double *)&v62[96] = *((double *)&v67 + 1) * v36
                                + *((double *)&v65 + 1) * v35
                                + *((double *)&v69 + 1) * v37
                                + v38;
            *(_OWORD *)&v62[136] = *(_OWORD *)&v62[40];
            *(_OWORD *)&v62[152] = *(_OWORD *)&v62[56];
            *(_OWORD *)&v62[168] = *(_OWORD *)&v62[72];
            *(_OWORD *)&v62[184] = *(_OWORD *)&v62[88];
            *(_OWORD *)&v62[104] = *(_OWORD *)&v62[8];
            *(_OWORD *)&v62[120] = *(_OWORD *)&v62[24];
            v39 = a3;
            v40 = a3[1];
            if (v40 >= a3[2])
            {
              v54 = sub_20EDB8290(a3, (uint64_t)&v60);
            }
            else
            {
              *(_QWORD *)(v40 + 8) = 0;
              *(_QWORD *)v40 = v9;
              *(_QWORD *)(v40 + 16) = 0;
              *(_QWORD *)(v40 + 24) = 0;
              v41 = (const void *)__p;
              v42 = *((_QWORD *)&__p + 1) - __p;
              if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
              {
                if (v42 < 0)
                  sub_20E867F44();
                v43 = (char *)operator new(*((_QWORD *)&__p + 1) - __p);
                *(_QWORD *)(v40 + 8) = v43;
                *(_QWORD *)(v40 + 16) = v43;
                *(_QWORD *)(v40 + 24) = &v43[16 * (v42 >> 4)];
                memcpy(v43, v41, v42 & 0xFFFFFFFFFFFFFFF0);
                *(_QWORD *)(v40 + 16) = &v43[v42 & 0xFFFFFFFFFFFFFFF0];
              }
              v44 = *(_OWORD *)&v62[24];
              *(_OWORD *)(v40 + 32) = *(_OWORD *)&v62[8];
              *(_OWORD *)(v40 + 48) = v44;
              v45 = *(_OWORD *)&v62[40];
              v46 = *(_OWORD *)&v62[56];
              v47 = *(_OWORD *)&v62[88];
              *(_OWORD *)(v40 + 96) = *(_OWORD *)&v62[72];
              *(_OWORD *)(v40 + 112) = v47;
              *(_OWORD *)(v40 + 64) = v45;
              *(_OWORD *)(v40 + 80) = v46;
              v48 = *(_OWORD *)&v62[104];
              v49 = *(_OWORD *)&v62[120];
              v50 = *(_OWORD *)&v62[152];
              *(_OWORD *)(v40 + 160) = *(_OWORD *)&v62[136];
              *(_OWORD *)(v40 + 176) = v50;
              *(_OWORD *)(v40 + 128) = v48;
              *(_OWORD *)(v40 + 144) = v49;
              v51 = *(_OWORD *)&v62[168];
              v52 = *(_OWORD *)&v62[184];
              v53 = *(_OWORD *)&v62[200];
              *(_QWORD *)(v40 + 240) = v63;
              *(_OWORD *)(v40 + 208) = v52;
              *(_OWORD *)(v40 + 224) = v53;
              *(_OWORD *)(v40 + 192) = v51;
              v54 = (_QWORD *)(v40 + 248);
              v39 = a3;
              a3[1] = v40 + 248;
            }
            v39[1] = v54;
            if ((_QWORD)__p)
            {
              *((_QWORD *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
          }
          else
          {
            v14 = v11 - 1;
            while (*(double *)(*(_QWORD *)(v13 + (((v12 + 1) >> 1) & 0x7FFFFFFFFFFFFFF8))
                              + 336 * (((_DWORD)v12 + 1) & 0xF)
                              + 328)
                  - *(double *)(*(_QWORD *)(v13 + ((v12 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 336 * (v12 & 0xF) + 328) > 0.0)
            {
              ++v12;
              if (!--v14)
                goto LABEL_10;
            }
          }
        }
      }
      std::mutex::unlock(v10);
      v55 = (_QWORD *)v7[1];
      if (v55)
      {
        do
        {
          v56 = (_QWORD **)v55;
          v55 = (_QWORD *)*v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          v56 = (_QWORD **)v7[2];
          v57 = *v56 == v7;
          v7 = v56;
        }
        while (!v57);
      }
      v7 = v56;
    }
    while (v56 != v84);
  }
  sub_20E8D03C0((uint64_t)&v83, v84[0]);
}

void sub_20EDF59EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  std::mutex *v17;
  uint64_t v18;

  sub_20E8D03C0(v18 - 136, *(_QWORD **)(v18 - 128));
  std::mutex::unlock(v17);
  sub_20E8E5B90(a17);
  _Unwind_Resume(a1);
}

void sub_20EDF5A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  sub_20E8E5B90(a17);
  _Unwind_Resume(a1);
}

void sub_20EDF5A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  void **v20;
  std::mutex *v21;
  uint64_t v22;
  uint64_t v23;
  void *v25;

  v25 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v22 + 16) = v25;
    operator delete(v25);
  }
  *(_QWORD *)(a17 + 8) = v22;
  if (__p)
    operator delete(__p);
  std::mutex::unlock(v21);
  sub_20E8D03C0(v23 - 136, *(_QWORD **)(v23 - 128));
  sub_20E8E5B90((void **)a17);
  _Unwind_Resume(a1);
}

uint64_t sub_20EDF5A9C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v2 = *(std::__shared_weak_count **)(a1 + 392);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 184);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 184);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  *(_QWORD *)(a1 + 32) = &off_24C9AFD78;
  v8 = *(void **)(a1 + 152);
  if (v8)
  {
    *(_QWORD *)(a1 + 160) = v8;
    operator delete(v8);
  }
  v9 = *(std::__shared_weak_count **)(a1 + 144);
  if (!v9)
    goto LABEL_17;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = *(std::__shared_weak_count **)(a1 + 128);
    if (!v12)
      goto LABEL_23;
  }
  else
  {
LABEL_17:
    v12 = *(std::__shared_weak_count **)(a1 + 128);
    if (!v12)
      goto LABEL_23;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_23:
  sub_20E8D03C0(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

BOOL sub_20EDF5BDC(uint64_t a1, unint64_t a2)
{
  std::mutex *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  _BOOL8 v12;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v7 = *(_QWORD **)(a1 + 80);
  v6 = (_QWORD *)(a1 + 80);
  v5 = v7;
  if (!v7)
    goto LABEL_12;
  v8 = v6;
  do
  {
    v9 = v5[4];
    v10 = v9 >= a2;
    if (v9 >= a2)
      v11 = v5;
    else
      v11 = v5 + 1;
    if (v10)
      v8 = v5;
    v5 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v8 == v6 || v8[4] > a2)
LABEL_12:
    v8 = v6;
  v12 = v8 != v6;
  std::mutex::unlock(v4);
  return v12;
}

void **sub_20EDF5C64(char *a1, void **a2, char *a3)
{
  void **v5;
  __int128 v6;
  void **result;
  size_t v8;
  size_t v9;
  char v10;
  __int128 v11;
  char *v12;
  size_t v13;

  v5 = (void **)(a1 + 680);
  if (v5 != a2)
  {
    if ((a1[703] & 0x80000000) == 0)
    {
      if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
      {
        sub_20E867BF8(v5, *a2, (size_t)a2[1]);
        result = (void **)(a1 + 704);
        if (a1 + 704 == a3)
          goto LABEL_14;
      }
      else
      {
        v6 = *(_OWORD *)a2;
        v5[2] = a2[2];
        *(_OWORD *)v5 = v6;
        result = (void **)(a1 + 704);
        if (a1 + 704 == a3)
          goto LABEL_14;
      }
      goto LABEL_11;
    }
    v8 = (size_t)a2[1];
    if (*((char *)a2 + 23) >= 0)
    {
      v9 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = (void **)*a2;
      v9 = v8;
    }
    sub_20E867CBC(v5, a2, v9);
  }
  result = (void **)(a1 + 704);
  if (a1 + 704 == a3)
  {
LABEL_14:
    a1[728] = 0;
    return result;
  }
LABEL_11:
  v10 = a3[23];
  if (a1[727] < 0)
  {
    if (v10 >= 0)
      v12 = a3;
    else
      v12 = *(char **)a3;
    if (v10 >= 0)
      v13 = a3[23];
    else
      v13 = *((_QWORD *)a3 + 1);
    result = sub_20E867CBC(result, v12, v13);
    a1[728] = 0;
  }
  else
  {
    if ((a3[23] & 0x80) == 0)
    {
      v11 = *(_OWORD *)a3;
      result[2] = (void *)*((_QWORD *)a3 + 2);
      *(_OWORD *)result = v11;
      goto LABEL_14;
    }
    result = (void **)sub_20E867BF8(result, *(void **)a3, *((_QWORD *)a3 + 1));
    a1[728] = 0;
  }
  return result;
}

void sub_20EDF5D64(uint64_t a1, unint64_t **a2)
{
  double v4;
  _QWORD *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  void *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD v37[12];
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  void *v40;
  void *v41;
  __int128 v42;
  uint64_t (**v43)();
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  std::__shared_weak_count *v55;
  void *v56;
  std::__shared_weak_count *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *__p;
  void *v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)*a2 + 1704))
    return;
  sub_20EDB79B8((uint64_t)v37, (uint64_t)(*a2 + 191));
  sub_20EDD64D8((uint64_t)v37, 0, 0, 5000, &v36, v4);
  sub_20EDB4CE8((uint64_t)(*a2 + 143), *(__int128 **)(v36 + 24));
  sub_20EDB6310((uint64_t)&v43, (__int128 *)(*a2 + 143));
  sub_20EDB6310((uint64_t)&v62, (__int128 *)(*a2 + 167));
  v33 = 0;
  v34 = 0;
  v35 = 0;
  *(_QWORD *)&v42 = &v33;
  BYTE8(v42) = 0;
  v33 = (char *)operator new(0x180uLL);
  v34 = (uint64_t)v33;
  v35 = v33 + 384;
  v34 = sub_20EDB6558((uint64_t)&v35, (uint64_t)&v43, (uint64_t)&v71, (uint64_t)v33);
  if (__p)
  {
    v70 = __p;
    operator delete(__p);
  }
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (v56)
  {
    v57 = (std::__shared_weak_count *)v56;
    operator delete(v56);
  }
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  if (sub_20EDAAA78(*(_QWORD **)(a1 + 664), (uint64_t *)&v33, **a2, 0))
  {
    v43 = (uint64_t (**)())&v33;
    sub_20E8E7AD8((void ***)&v43);
    v5 = (_QWORD *)v36;
    v36 = 0;
    if (v5)
    {
      v6 = sub_20EDB6628(v5);
      MEMORY[0x212BC6398](v6, 0x10B0C404CA194E4);
    }
    v37[0] = &off_24C9AFD78;
    if (v40)
    {
      v41 = v40;
      operator delete(v40);
    }
    v7 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = v38;
    if (v38)
    {
      v11 = (unint64_t *)&v38->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
LABEL_67:
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    v13 = *a2;
    *((_BYTE *)v13 + 1704) = 1;
    sub_20EDB4A1C((uint64_t)&v43, v13[209], v13[210]);
    v14 = v54;
    if (v48 * v49)
    {
      bzero(v54, v48 * v49);
      v14 = v54;
    }
    v15 = (uint64_t)(*a2 + 124);
    *(_QWORD *)&v42 = v14;
    *((_QWORD *)&v42 + 1) = v55;
    if (v55)
    {
      v16 = (unint64_t *)&v55->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    sub_20E8E9964(v15, &v42, v47, v48, v49, v45, v46, v44, &v52);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v43 = &off_24C9AFD78;
    if (v58)
    {
      v59 = v58;
      operator delete(v58);
    }
    v21 = v57;
    if (v57)
    {
      v22 = (unint64_t *)&v57->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v55;
    if (v55)
    {
      v25 = (unint64_t *)&v55->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v43 = (uint64_t (**)())&v33;
    sub_20E8E7AD8((void ***)&v43);
    v27 = (_QWORD *)v36;
    v36 = 0;
    if (v27)
    {
      v28 = sub_20EDB6628(v27);
      MEMORY[0x212BC6398](v28, 0x10B0C404CA194E4);
    }
    v37[0] = &off_24C9AFD78;
    if (v40)
    {
      v41 = v40;
      operator delete(v40);
    }
    v29 = v39;
    if (v39)
    {
      v30 = (unint64_t *)&v39->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v10 = v38;
    if (v38)
    {
      v32 = (unint64_t *)&v38->__shared_owners_;
      do
        v12 = __ldaxr(v32);
      while (__stlxr(v12 - 1, v32));
      goto LABEL_67;
    }
  }
}

void sub_20EDF61C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, _QWORD *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,void **a34)
{
  sub_20E86665C((uint64_t)&a32);
  sub_20E8E481C(&a34);
  a34 = (void **)&a10;
  sub_20E8E7AD8(&a34);
  sub_20EDB4DEC(&a13);
  sub_20E8E481C(&a14);
  _Unwind_Resume(a1);
}

void sub_20EDF620C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void **a32,uint64_t a33,uint64_t a34)
{
  _QWORD *v34;

  sub_20E8E7AD8(&a32);
  sub_20EDB4D8C(v34);
  sub_20EDB4D8C(&a34);
  sub_20EDB4DEC(&a13);
  sub_20E8E481C(&a14);
  _Unwind_Resume(a1);
}

void sub_20EDF6254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _QWORD *v6;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD *);
  sub_20EDB4DEC((_QWORD **)va);
  sub_20E8E481C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20EDF6274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E8E481C((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EDF628C(_QWORD *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  char *v36;
  void *v37;
  void *__src;
  __int128 v41;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)&v2[-*a1] >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x108421084210842)
    sub_20E8E8A64();
  if (0xDEF7BDEF7BDEF7BELL * ((uint64_t)(a1[2] - (_QWORD)v3) >> 3) > v5)
    v5 = 0xDEF7BDEF7BDEF7BELL * ((uint64_t)(a1[2] - (_QWORD)v3) >> 3);
  if (0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(a1[2] - (_QWORD)v3) >> 3) >= 0x84210842108421)
    v7 = 0x108421084210842;
  else
    v7 = v5;
  if (v7)
  {
    if (v7 > 0x108421084210842)
      sub_20E877A38();
    v8 = (char *)operator new(248 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[248 * v4];
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)&v41 + 1) = &v8[248 * v7];
  *((_QWORD *)v9 + 2) = 0;
  v10 = v9 + 16;
  v11 = *(_BYTE **)(a2 + 8);
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *((_QWORD *)v9 + 3) = 0;
  v12 = *(_BYTE **)(a2 + 16);
  __src = v11;
  v13 = v12 - v11;
  if (v12 != v11)
  {
    if (v13 < 0)
      sub_20E867F44();
    v14 = (char *)operator new(v12 - v11);
    *((_QWORD *)v9 + 1) = v14;
    *v10 = v14;
    *((_QWORD *)v9 + 3) = &v14[16 * (v13 >> 4)];
    memcpy(v14, __src, v13 & 0xFFFFFFFFFFFFFFF0);
    *v10 = &v14[v13 & 0xFFFFFFFFFFFFFFF0];
  }
  v15 = *(_OWORD *)(a2 + 208);
  v16 = &v8[248 * v4];
  *((_OWORD *)v16 + 12) = *(_OWORD *)(a2 + 192);
  *((_OWORD *)v16 + 13) = v15;
  *((_OWORD *)v16 + 14) = *(_OWORD *)(a2 + 224);
  *((_QWORD *)v16 + 30) = *(_QWORD *)(a2 + 240);
  v17 = *(_OWORD *)(a2 + 144);
  *((_OWORD *)v16 + 8) = *(_OWORD *)(a2 + 128);
  *((_OWORD *)v16 + 9) = v17;
  v18 = *(_OWORD *)(a2 + 176);
  *((_OWORD *)v16 + 10) = *(_OWORD *)(a2 + 160);
  *((_OWORD *)v16 + 11) = v18;
  v19 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v16 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v16 + 5) = v19;
  v20 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v16 + 6) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v16 + 7) = v20;
  v21 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v16 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v16 + 3) = v21;
  v22 = v9 + 248;
  if (v2 == v3)
  {
    *a1 = v9;
    a1[1] = v22;
    a1[2] = *((_QWORD *)&v41 + 1);
  }
  else
  {
    v23 = 0;
    do
    {
      v24 = &v2[v23];
      v25 = &v9[v23];
      *((_QWORD *)v25 - 31) = *(_QWORD *)&v2[v23 - 248];
      *((_QWORD *)v25 - 29) = 0;
      *((_QWORD *)v25 - 28) = 0;
      *((_OWORD *)v25 - 15) = *(_OWORD *)&v2[v23 - 240];
      *((_QWORD *)v25 - 28) = *(_QWORD *)&v2[v23 - 224];
      *((_QWORD *)v24 - 29) = 0;
      *((_QWORD *)v24 - 28) = 0;
      *((_QWORD *)v24 - 30) = 0;
      v26 = *(_OWORD *)&v2[v23 - 168];
      v27 = *(_OWORD *)&v2[v23 - 152];
      v28 = *(_OWORD *)&v2[v23 - 136];
      *(_OWORD *)(v25 - 184) = *(_OWORD *)&v2[v23 - 184];
      *(_OWORD *)(v25 - 136) = v28;
      *(_OWORD *)(v25 - 152) = v27;
      *(_OWORD *)(v25 - 168) = v26;
      v29 = *(_OWORD *)&v2[v23 - 104];
      v30 = *(_OWORD *)&v2[v23 - 88];
      v31 = *(_OWORD *)&v2[v23 - 72];
      *(_OWORD *)(v25 - 120) = *(_OWORD *)&v2[v23 - 120];
      *(_OWORD *)(v25 - 72) = v31;
      *(_OWORD *)(v25 - 88) = v30;
      *(_OWORD *)(v25 - 104) = v29;
      v32 = *(_OWORD *)&v2[v23 - 40];
      v33 = *(_OWORD *)&v2[v23 - 24];
      v34 = *(_QWORD *)&v2[v23 - 8];
      *(_OWORD *)(v25 - 56) = *(_OWORD *)&v2[v23 - 56];
      *((_QWORD *)v25 - 1) = v34;
      *(_OWORD *)(v25 - 24) = v33;
      *(_OWORD *)(v25 - 40) = v32;
      v35 = *(_OWORD *)&v2[v23 - 216];
      *(_OWORD *)(v25 - 200) = *(_OWORD *)&v2[v23 - 200];
      *(_OWORD *)(v25 - 216) = v35;
      v23 -= 248;
    }
    while (&v2[v23] != v3);
    v2 = (char *)*a1;
    v36 = (char *)a1[1];
    *a1 = &v9[v23];
    *(_QWORD *)&v41 = v9 + 248;
    *(_OWORD *)(a1 + 1) = v41;
    v22 = v9 + 248;
    while (v36 != v2)
    {
      v37 = (void *)*((_QWORD *)v36 - 30);
      if (v37)
      {
        *((_QWORD *)v36 - 29) = v37;
        operator delete(v37);
      }
      v36 -= 248;
    }
  }
  if (v2)
    operator delete(v2);
  return v22;
}

void sub_20EDF6578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  void **v7;
  void *v9;
  va_list va;

  va_start(va, a6);
  v9 = *v7;
  if (*v7)
  {
    *v6 = v9;
    operator delete(v9);
  }
  sub_20EDB6D8C((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20EDF659C(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  char *v32;
  void *v33;

  v3 = 0xEF7BDEF7BDEF7BDFLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x108421084210842)
    sub_20E8E8A64();
  if (0xDEF7BDEF7BDEF7BELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0xDEF7BDEF7BDEF7BELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xEF7BDEF7BDEF7BDFLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x84210842108421)
    v6 = 0x108421084210842;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x108421084210842)
      sub_20E877A38();
    v7 = (char *)operator new(248 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[248 * v3];
  *(_QWORD *)v8 = *(_QWORD *)a2;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
  v9 = &v7[248 * v6];
  *((_QWORD *)v8 + 3) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v10 = *(_OWORD *)(a2 + 208);
  *((_OWORD *)v8 + 12) = *(_OWORD *)(a2 + 192);
  *((_OWORD *)v8 + 13) = v10;
  *((_OWORD *)v8 + 14) = *(_OWORD *)(a2 + 224);
  *((_QWORD *)v8 + 30) = *(_QWORD *)(a2 + 240);
  v11 = *(_OWORD *)(a2 + 144);
  *((_OWORD *)v8 + 8) = *(_OWORD *)(a2 + 128);
  *((_OWORD *)v8 + 9) = v11;
  v12 = *(_OWORD *)(a2 + 176);
  *((_OWORD *)v8 + 10) = *(_OWORD *)(a2 + 160);
  *((_OWORD *)v8 + 11) = v12;
  v13 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v8 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v8 + 5) = v13;
  v14 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v8 + 6) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v8 + 7) = v14;
  v15 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v8 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v8 + 3) = v15;
  v16 = v8 + 248;
  v17 = (char *)*a1;
  v18 = (char *)a1[1];
  if (v18 == *a1)
  {
    *a1 = v8;
    a1[1] = v16;
    a1[2] = v9;
  }
  else
  {
    v19 = 0;
    do
    {
      v20 = &v8[v19];
      v21 = &v18[v19];
      *((_QWORD *)v20 - 31) = *(_QWORD *)&v18[v19 - 248];
      *((_QWORD *)v20 - 29) = 0;
      *((_QWORD *)v20 - 28) = 0;
      *((_OWORD *)v20 - 15) = *(_OWORD *)&v18[v19 - 240];
      *((_QWORD *)v20 - 28) = *(_QWORD *)&v18[v19 - 224];
      *((_QWORD *)v21 - 29) = 0;
      *((_QWORD *)v21 - 28) = 0;
      *((_QWORD *)v21 - 30) = 0;
      v22 = *(_OWORD *)&v18[v19 - 168];
      v23 = *(_OWORD *)&v18[v19 - 152];
      v24 = *(_OWORD *)&v18[v19 - 136];
      *(_OWORD *)(v20 - 184) = *(_OWORD *)&v18[v19 - 184];
      *(_OWORD *)(v20 - 136) = v24;
      *(_OWORD *)(v20 - 152) = v23;
      *(_OWORD *)(v20 - 168) = v22;
      v25 = *(_OWORD *)&v18[v19 - 104];
      v26 = *(_OWORD *)&v18[v19 - 88];
      v27 = *(_OWORD *)&v18[v19 - 72];
      *(_OWORD *)(v20 - 120) = *(_OWORD *)&v18[v19 - 120];
      *(_OWORD *)(v20 - 72) = v27;
      *(_OWORD *)(v20 - 88) = v26;
      *(_OWORD *)(v20 - 104) = v25;
      v28 = *(_OWORD *)&v18[v19 - 40];
      v29 = *(_OWORD *)&v18[v19 - 24];
      v30 = *(_QWORD *)&v18[v19 - 8];
      *(_OWORD *)(v20 - 56) = *(_OWORD *)&v18[v19 - 56];
      *((_QWORD *)v20 - 1) = v30;
      *(_OWORD *)(v20 - 24) = v29;
      *(_OWORD *)(v20 - 40) = v28;
      v31 = *(_OWORD *)&v18[v19 - 216];
      *(_OWORD *)(v20 - 200) = *(_OWORD *)&v18[v19 - 200];
      *(_OWORD *)(v20 - 216) = v31;
      v19 -= 248;
    }
    while (&v18[v19] != v17);
    v18 = (char *)*a1;
    v32 = (char *)a1[1];
    *a1 = &v8[v19];
    a1[1] = v16;
    a1[2] = v9;
    while (v32 != v18)
    {
      v33 = (void *)*((_QWORD *)v32 - 30);
      if (v33)
      {
        *((_QWORD *)v32 - 29) = v33;
        operator delete(v33);
      }
      v32 -= 248;
    }
  }
  if (v18)
    operator delete(v18);
  return v16;
}

double sub_20EDF67D8(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  void *v61;
  BOOL v62;
  BOOL v63;
  double result;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  void *v83;
  unint64_t v84;
  unint64_t v85;
  void *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  void *v97;
  unint64_t v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  void *v111;
  unint64_t v112;
  BOOL v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  unint64_t v134;
  unint64_t v135;
  void *v136;
  int64_t v137;
  int64_t v138;
  int64_t v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t *v149;
  void *v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  void *v161;
  int64_t v162;
  _QWORD *v163;
  uint64_t v165;
  _QWORD *v166;
  unint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  void *v183;
  _QWORD *v184;
  __int128 *v185;
  void *v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  void *v197;
  _QWORD *v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t *v205;
  void *v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  void *v217;
  void *v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  unint64_t v229;
  void *v230;
  void *v231;
  unint64_t *v232;
  unint64_t *v233;
  unint64_t *v234;
  __int128 v236;
  uint64_t v237;
  __int128 v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  uint64_t v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  unint64_t v403;
  uint64_t v404;

__n128 sub_20EDF7D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  void *v52;
  unint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  void *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __n128 v71;
  __n128 v72;
  __n128 v73;
  __n128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  result.n128_u64[0] = sub_20EDF8C44((unint64_t *)a1, (unint64_t *)a2, (unint64_t *)a3, (unint64_t *)a4).n128_u64[0];
  v11 = *(_QWORD *)a4;
  if (*(_QWORD *)a5 < *(_QWORD *)a4)
  {
    v12 = *(_OWORD *)(a4 + 8);
    v13 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    v111 = *(_OWORD *)(a4 + 192);
    v115 = *(_OWORD *)(a4 + 208);
    v119 = *(_OWORD *)(a4 + 224);
    v123 = *(_QWORD *)(a4 + 240);
    v95 = *(_OWORD *)(a4 + 128);
    v99 = *(_OWORD *)(a4 + 144);
    v103 = *(_OWORD *)(a4 + 160);
    v107 = *(_OWORD *)(a4 + 176);
    v79 = *(_OWORD *)(a4 + 64);
    v83 = *(_OWORD *)(a4 + 80);
    v87 = *(_OWORD *)(a4 + 96);
    v91 = *(_OWORD *)(a4 + 112);
    v71 = *(__n128 *)(a4 + 32);
    v75 = *(_OWORD *)(a4 + 48);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_OWORD *)(a4 + 8) = *(_OWORD *)(a5 + 8);
    *(_QWORD *)(a4 + 24) = *(_QWORD *)(a5 + 24);
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 8) = 0;
    v14 = *(_OWORD *)(a5 + 112);
    v16 = *(_OWORD *)(a5 + 64);
    v15 = *(_OWORD *)(a5 + 80);
    *(_OWORD *)(a4 + 96) = *(_OWORD *)(a5 + 96);
    *(_OWORD *)(a4 + 112) = v14;
    *(_OWORD *)(a4 + 64) = v16;
    *(_OWORD *)(a4 + 80) = v15;
    v17 = *(_OWORD *)(a5 + 176);
    v19 = *(_OWORD *)(a5 + 128);
    v18 = *(_OWORD *)(a5 + 144);
    *(_OWORD *)(a4 + 160) = *(_OWORD *)(a5 + 160);
    *(_OWORD *)(a4 + 176) = v17;
    *(_OWORD *)(a4 + 128) = v19;
    *(_OWORD *)(a4 + 144) = v18;
    v21 = *(_OWORD *)(a5 + 208);
    v20 = *(_OWORD *)(a5 + 224);
    v22 = *(_OWORD *)(a5 + 192);
    *(_QWORD *)(a4 + 240) = *(_QWORD *)(a5 + 240);
    *(_OWORD *)(a4 + 208) = v21;
    *(_OWORD *)(a4 + 224) = v20;
    *(_OWORD *)(a4 + 192) = v22;
    v23 = *(_OWORD *)(a5 + 48);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a5 + 32);
    *(_OWORD *)(a4 + 48) = v23;
    *(_QWORD *)a5 = v11;
    v24 = *(void **)(a5 + 8);
    if (v24)
    {
      *(_QWORD *)(a5 + 16) = v24;
      v67 = v12;
      operator delete(v24);
      v12 = v67;
    }
    *(_OWORD *)(a5 + 8) = v12;
    *(_QWORD *)(a5 + 24) = v13;
    *(_OWORD *)(a5 + 192) = v111;
    *(_OWORD *)(a5 + 208) = v115;
    *(_OWORD *)(a5 + 224) = v119;
    *(_QWORD *)(a5 + 240) = v123;
    *(_OWORD *)(a5 + 128) = v95;
    *(_OWORD *)(a5 + 144) = v99;
    *(_OWORD *)(a5 + 160) = v103;
    *(_OWORD *)(a5 + 176) = v107;
    *(_OWORD *)(a5 + 64) = v79;
    *(_OWORD *)(a5 + 80) = v83;
    *(_OWORD *)(a5 + 96) = v87;
    *(_OWORD *)(a5 + 112) = v91;
    result = v71;
    *(__n128 *)(a5 + 32) = v71;
    *(_OWORD *)(a5 + 48) = v75;
    v25 = *(_QWORD *)a3;
    if (*(_QWORD *)a4 < *(_QWORD *)a3)
    {
      v26 = *(_OWORD *)(a3 + 8);
      v27 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v112 = *(_OWORD *)(a3 + 192);
      v116 = *(_OWORD *)(a3 + 208);
      v120 = *(_OWORD *)(a3 + 224);
      v124 = *(_QWORD *)(a3 + 240);
      v96 = *(_OWORD *)(a3 + 128);
      v100 = *(_OWORD *)(a3 + 144);
      v104 = *(_OWORD *)(a3 + 160);
      v108 = *(_OWORD *)(a3 + 176);
      v80 = *(_OWORD *)(a3 + 64);
      v84 = *(_OWORD *)(a3 + 80);
      v88 = *(_OWORD *)(a3 + 96);
      v92 = *(_OWORD *)(a3 + 112);
      v72 = *(__n128 *)(a3 + 32);
      v76 = *(_OWORD *)(a3 + 48);
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(a4 + 24);
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0;
      *(_QWORD *)(a4 + 8) = 0;
      v28 = *(_OWORD *)(a4 + 112);
      v30 = *(_OWORD *)(a4 + 64);
      v29 = *(_OWORD *)(a4 + 80);
      *(_OWORD *)(a3 + 96) = *(_OWORD *)(a4 + 96);
      *(_OWORD *)(a3 + 112) = v28;
      *(_OWORD *)(a3 + 64) = v30;
      *(_OWORD *)(a3 + 80) = v29;
      v31 = *(_OWORD *)(a4 + 176);
      v33 = *(_OWORD *)(a4 + 128);
      v32 = *(_OWORD *)(a4 + 144);
      *(_OWORD *)(a3 + 160) = *(_OWORD *)(a4 + 160);
      *(_OWORD *)(a3 + 176) = v31;
      *(_OWORD *)(a3 + 128) = v33;
      *(_OWORD *)(a3 + 144) = v32;
      v35 = *(_OWORD *)(a4 + 208);
      v34 = *(_OWORD *)(a4 + 224);
      v36 = *(_OWORD *)(a4 + 192);
      *(_QWORD *)(a3 + 240) = *(_QWORD *)(a4 + 240);
      *(_OWORD *)(a3 + 208) = v35;
      *(_OWORD *)(a3 + 224) = v34;
      *(_OWORD *)(a3 + 192) = v36;
      v37 = *(_OWORD *)(a4 + 48);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(a4 + 32);
      *(_OWORD *)(a3 + 48) = v37;
      *(_QWORD *)a4 = v25;
      v38 = *(void **)(a4 + 8);
      if (v38)
      {
        *(_QWORD *)(a4 + 16) = v38;
        v68 = v26;
        operator delete(v38);
        v26 = v68;
      }
      *(_OWORD *)(a4 + 8) = v26;
      *(_QWORD *)(a4 + 24) = v27;
      *(_OWORD *)(a4 + 192) = v112;
      *(_OWORD *)(a4 + 208) = v116;
      *(_OWORD *)(a4 + 224) = v120;
      *(_QWORD *)(a4 + 240) = v124;
      *(_OWORD *)(a4 + 128) = v96;
      *(_OWORD *)(a4 + 144) = v100;
      *(_OWORD *)(a4 + 160) = v104;
      *(_OWORD *)(a4 + 176) = v108;
      *(_OWORD *)(a4 + 64) = v80;
      *(_OWORD *)(a4 + 80) = v84;
      *(_OWORD *)(a4 + 96) = v88;
      *(_OWORD *)(a4 + 112) = v92;
      result = v72;
      *(__n128 *)(a4 + 32) = v72;
      *(_OWORD *)(a4 + 48) = v76;
      v39 = *(_QWORD *)a2;
      if (*(_QWORD *)a3 < *(_QWORD *)a2)
      {
        v40 = *(_OWORD *)(a2 + 8);
        v41 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        v113 = *(_OWORD *)(a2 + 192);
        v117 = *(_OWORD *)(a2 + 208);
        v121 = *(_OWORD *)(a2 + 224);
        v125 = *(_QWORD *)(a2 + 240);
        v97 = *(_OWORD *)(a2 + 128);
        v101 = *(_OWORD *)(a2 + 144);
        v105 = *(_OWORD *)(a2 + 160);
        v109 = *(_OWORD *)(a2 + 176);
        v81 = *(_OWORD *)(a2 + 64);
        v85 = *(_OWORD *)(a2 + 80);
        v89 = *(_OWORD *)(a2 + 96);
        v93 = *(_OWORD *)(a2 + 112);
        v73 = *(__n128 *)(a2 + 32);
        v77 = *(_OWORD *)(a2 + 48);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
        *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 8) = 0;
        v42 = *(_OWORD *)(a3 + 112);
        v44 = *(_OWORD *)(a3 + 64);
        v43 = *(_OWORD *)(a3 + 80);
        *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
        *(_OWORD *)(a2 + 112) = v42;
        *(_OWORD *)(a2 + 64) = v44;
        *(_OWORD *)(a2 + 80) = v43;
        v45 = *(_OWORD *)(a3 + 176);
        v47 = *(_OWORD *)(a3 + 128);
        v46 = *(_OWORD *)(a3 + 144);
        *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
        *(_OWORD *)(a2 + 176) = v45;
        *(_OWORD *)(a2 + 128) = v47;
        *(_OWORD *)(a2 + 144) = v46;
        v49 = *(_OWORD *)(a3 + 208);
        v48 = *(_OWORD *)(a3 + 224);
        v50 = *(_OWORD *)(a3 + 192);
        *(_QWORD *)(a2 + 240) = *(_QWORD *)(a3 + 240);
        *(_OWORD *)(a2 + 208) = v49;
        *(_OWORD *)(a2 + 224) = v48;
        *(_OWORD *)(a2 + 192) = v50;
        v51 = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(a2 + 48) = v51;
        *(_QWORD *)a3 = v39;
        v52 = *(void **)(a3 + 8);
        if (v52)
        {
          *(_QWORD *)(a3 + 16) = v52;
          v69 = v40;
          operator delete(v52);
          v40 = v69;
        }
        *(_OWORD *)(a3 + 8) = v40;
        *(_QWORD *)(a3 + 24) = v41;
        *(_OWORD *)(a3 + 192) = v113;
        *(_OWORD *)(a3 + 208) = v117;
        *(_OWORD *)(a3 + 224) = v121;
        *(_QWORD *)(a3 + 240) = v125;
        *(_OWORD *)(a3 + 128) = v97;
        *(_OWORD *)(a3 + 144) = v101;
        *(_OWORD *)(a3 + 160) = v105;
        *(_OWORD *)(a3 + 176) = v109;
        *(_OWORD *)(a3 + 64) = v81;
        *(_OWORD *)(a3 + 80) = v85;
        *(_OWORD *)(a3 + 96) = v89;
        *(_OWORD *)(a3 + 112) = v93;
        result = v73;
        *(__n128 *)(a3 + 32) = v73;
        *(_OWORD *)(a3 + 48) = v77;
        v53 = *(_QWORD *)a1;
        if (*(_QWORD *)a2 < *(_QWORD *)a1)
        {
          v54 = *(_OWORD *)(a1 + 8);
          v55 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 8) = 0;
          v114 = *(_OWORD *)(a1 + 192);
          v118 = *(_OWORD *)(a1 + 208);
          v122 = *(_OWORD *)(a1 + 224);
          v126 = *(_QWORD *)(a1 + 240);
          v98 = *(_OWORD *)(a1 + 128);
          v102 = *(_OWORD *)(a1 + 144);
          v106 = *(_OWORD *)(a1 + 160);
          v110 = *(_OWORD *)(a1 + 176);
          v82 = *(_OWORD *)(a1 + 64);
          v86 = *(_OWORD *)(a1 + 80);
          v90 = *(_OWORD *)(a1 + 96);
          v94 = *(_OWORD *)(a1 + 112);
          v74 = *(__n128 *)(a1 + 32);
          v78 = *(_OWORD *)(a1 + 48);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a2 + 16) = 0;
          *(_QWORD *)(a2 + 24) = 0;
          *(_QWORD *)(a2 + 8) = 0;
          v56 = *(_OWORD *)(a2 + 112);
          v58 = *(_OWORD *)(a2 + 64);
          v57 = *(_OWORD *)(a2 + 80);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
          *(_OWORD *)(a1 + 112) = v56;
          *(_OWORD *)(a1 + 64) = v58;
          *(_OWORD *)(a1 + 80) = v57;
          v59 = *(_OWORD *)(a2 + 176);
          v61 = *(_OWORD *)(a2 + 128);
          v60 = *(_OWORD *)(a2 + 144);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
          *(_OWORD *)(a1 + 176) = v59;
          *(_OWORD *)(a1 + 128) = v61;
          *(_OWORD *)(a1 + 144) = v60;
          v63 = *(_OWORD *)(a2 + 208);
          v62 = *(_OWORD *)(a2 + 224);
          v64 = *(_OWORD *)(a2 + 192);
          *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
          *(_OWORD *)(a1 + 208) = v63;
          *(_OWORD *)(a1 + 224) = v62;
          *(_OWORD *)(a1 + 192) = v64;
          v65 = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 48) = v65;
          *(_QWORD *)a2 = v53;
          v66 = *(void **)(a2 + 8);
          if (v66)
          {
            *(_QWORD *)(a2 + 16) = v66;
            v70 = v54;
            operator delete(v66);
            v54 = v70;
          }
          *(_OWORD *)(a2 + 8) = v54;
          *(_QWORD *)(a2 + 24) = v55;
          *(_OWORD *)(a2 + 192) = v114;
          *(_OWORD *)(a2 + 208) = v118;
          *(_OWORD *)(a2 + 224) = v122;
          *(_QWORD *)(a2 + 240) = v126;
          *(_OWORD *)(a2 + 128) = v98;
          *(_OWORD *)(a2 + 144) = v102;
          *(_OWORD *)(a2 + 160) = v106;
          *(_OWORD *)(a2 + 176) = v110;
          *(_OWORD *)(a2 + 64) = v82;
          *(_OWORD *)(a2 + 80) = v86;
          *(_OWORD *)(a2 + 96) = v90;
          *(_OWORD *)(a2 + 112) = v94;
          result = v74;
          *(__n128 *)(a2 + 32) = v74;
          *(_OWORD *)(a2 + 48) = v78;
        }
      }
    }
  }
  return result;
}

__n128 sub_20EDF8244(__n128 *a1, __n128 *a2, unint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  __n128 *v10;
  __int128 v11;
  uint64_t v12;
  __n128 *v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  void *v24;
  __n128 result;
  __int128 v26;
  uint64_t v27;
  __n128 *v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  void *v39;
  unint64_t v40;
  __n128 v41;
  uint64_t v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t *v58;
  __n128 v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  __n128 v66;
  __n128 v67;
  __n128 v68;
  void *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  void *v80;
  __int128 v81;
  __int128 v82;
  __n128 v83;
  __n128 v84;
  __n128 v85;
  __n128 v86;
  __n128 v87;
  __n128 v88;
  __n128 v89;
  __n128 v90;
  __n128 v91;
  __n128 v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  __n128 v97;
  __n128 v98;
  __n128 v99;
  __n128 v100;
  __n128 v101;
  __n128 v102;
  __n128 v103;
  __n128 v104;
  __n128 v105;
  __n128 v106;
  __n128 v107;
  __n128 v108;
  __n128 v109;
  __n128 v110;
  __n128 v111;
  __n128 v112;
  __n128 v113;
  __n128 v114;
  __n128 v115;
  __n128 v116;
  __n128 v117;
  __n128 v118;
  __n128 v119;
  __n128 v120;
  __n128 v121;
  __n128 v122;
  __n128 v123;
  __n128 v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  __n128 v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;
  __n128 v143;
  __n128 v144;
  __n128 v145;
  __n128 v146;
  __n128 v147;
  __n128 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;

  v6 = a2->n128_u64[0];
  v7 = a1->n128_u64[0];
  v8 = *a3;
  if (a2->n128_u64[0] >= a1->n128_u64[0])
  {
    if (v8 < v6)
    {
      v26 = *(__int128 *)((char *)a2 + 8);
      v27 = a2[1].n128_i64[1];
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
      a2[1].n128_u64[1] = 0;
      v135 = a2[12];
      v140 = a2[13];
      v145 = a2[14];
      v150 = a2[15].n128_i64[0];
      v115 = a2[8];
      v120 = a2[9];
      v125 = a2[10];
      v130 = a2[11];
      v95 = a2[4];
      v100 = a2[5];
      v105 = a2[6];
      v110 = a2[7];
      v85 = a2[2];
      v90 = a2[3];
      a2->n128_u64[0] = *a3;
      *(__n128 *)((char *)a2 + 8) = *(__n128 *)(a3 + 1);
      a2[1].n128_u64[1] = a3[3];
      a3[2] = 0;
      a3[3] = 0;
      a3[1] = 0;
      v28 = (__n128 *)(a3 + 4);
      v29 = *((__n128 *)a3 + 7);
      v31 = *((__n128 *)a3 + 4);
      v30 = *((__n128 *)a3 + 5);
      a2[6] = *((__n128 *)a3 + 6);
      a2[7] = v29;
      a2[4] = v31;
      a2[5] = v30;
      v32 = *((__n128 *)a3 + 11);
      v34 = *((__n128 *)a3 + 8);
      v33 = *((__n128 *)a3 + 9);
      a2[10] = *((__n128 *)a3 + 10);
      a2[11] = v32;
      a2[8] = v34;
      a2[9] = v33;
      v36 = *((__n128 *)a3 + 13);
      v35 = *((__n128 *)a3 + 14);
      v37 = *((__n128 *)a3 + 12);
      a2[15].n128_u64[0] = a3[30];
      a2[13] = v36;
      a2[14] = v35;
      a2[12] = v37;
      v38 = *((__n128 *)a3 + 3);
      a2[2] = *((__n128 *)a3 + 2);
      a2[3] = v38;
      *a3 = v6;
      v39 = (void *)a3[1];
      if (v39)
      {
        a3[2] = (unint64_t)v39;
        v82 = v26;
        operator delete(v39);
        v26 = v82;
      }
      *(_OWORD *)(a3 + 1) = v26;
      a3[3] = v27;
      *((__n128 *)a3 + 12) = v135;
      *((__n128 *)a3 + 13) = v140;
      *((__n128 *)a3 + 14) = v145;
      a3[30] = v150;
      *((__n128 *)a3 + 8) = v115;
      *((__n128 *)a3 + 9) = v120;
      *((__n128 *)a3 + 10) = v125;
      *((__n128 *)a3 + 11) = v130;
      *((__n128 *)a3 + 4) = v95;
      *((__n128 *)a3 + 5) = v100;
      *((__n128 *)a3 + 6) = v105;
      *((__n128 *)a3 + 7) = v110;
      result = v85;
      *v28 = v85;
      *((__n128 *)a3 + 3) = v90;
      v40 = a1->n128_u64[0];
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        v41 = *(__n128 *)((char *)a1 + 8);
        v42 = a1[1].n128_i64[1];
        a1[1].n128_u64[0] = 0;
        a1[1].n128_u64[1] = 0;
        a1->n128_u64[1] = 0;
        v136 = a1[12];
        v141 = a1[13];
        v146 = a1[14];
        v151 = a1[15].n128_i64[0];
        v116 = a1[8];
        v121 = a1[9];
        v126 = a1[10];
        v131 = a1[11];
        v96 = a1[4];
        v101 = a1[5];
        v106 = a1[6];
        v111 = a1[7];
        v86 = a1[2];
        v91 = a1[3];
        a1->n128_u64[0] = a2->n128_u64[0];
        *(__n128 *)((char *)a1 + 8) = *(__n128 *)((char *)a2 + 8);
        a1[1].n128_u64[1] = a2[1].n128_u64[1];
        a2[1].n128_u64[0] = 0;
        a2[1].n128_u64[1] = 0;
        a2->n128_u64[1] = 0;
        v43 = a2[7];
        v45 = a2[4];
        v44 = a2[5];
        a1[6] = a2[6];
        a1[7] = v43;
        a1[4] = v45;
        a1[5] = v44;
        v46 = a2[11];
        v48 = a2[8];
        v47 = a2[9];
        a1[10] = a2[10];
        a1[11] = v46;
        a1[8] = v48;
        a1[9] = v47;
        v50 = a2[13];
        v49 = a2[14];
        v51 = a2[12];
        a1[15].n128_u64[0] = a2[15].n128_u64[0];
        a1[13] = v50;
        a1[14] = v49;
        a1[12] = v51;
        v52 = a2[3];
        a1[2] = a2[2];
        a1[3] = v52;
        a2->n128_u64[0] = v40;
        v53 = (void *)a2->n128_u64[1];
        if (v53)
        {
          a2[1].n128_u64[0] = (unint64_t)v53;
          v83 = v41;
          operator delete(v53);
          v41 = v83;
        }
        *(__n128 *)((char *)a2 + 8) = v41;
        a2[1].n128_u64[1] = v42;
        a2[12] = v136;
        a2[13] = v141;
        a2[14] = v146;
        a2[15].n128_u64[0] = v151;
        a2[8] = v116;
        a2[9] = v121;
        a2[10] = v126;
        a2[11] = v131;
        a2[4] = v96;
        a2[5] = v101;
        a2[6] = v106;
        a2[7] = v111;
        result = v86;
        a2[2] = v86;
        a2[3] = v91;
      }
    }
  }
  else
  {
    v9 = &a1->n128_u64[1];
    v10 = a1 + 2;
    if (v8 >= v6)
    {
      v54 = a1->n128_i64[1];
      v55 = a1[1].n128_i64[0];
      v56 = a1[1].n128_i64[1];
      *v9 = 0;
      a1[1].n128_u64[0] = 0;
      a1[1].n128_u64[1] = 0;
      v137 = a1[12];
      v142 = a1[13];
      v147 = a1[14];
      v152 = a1[15].n128_i64[0];
      v117 = a1[8];
      v122 = a1[9];
      v127 = a1[10];
      v132 = a1[11];
      v97 = a1[4];
      v102 = a1[5];
      v107 = a1[6];
      v112 = a1[7];
      v87 = *v10;
      v92 = a1[3];
      a1->n128_u64[0] = a2->n128_u64[0];
      v57 = &a2->n128_u64[1];
      *(__n128 *)((char *)a1 + 8) = *(__n128 *)((char *)a2 + 8);
      a1[1].n128_u64[1] = a2[1].n128_u64[1];
      a2[1].n128_u64[0] = 0;
      a2[1].n128_u64[1] = 0;
      a2->n128_u64[1] = 0;
      v58 = (uint64_t *)&a2[2];
      v59 = a2[7];
      v61 = a2[4];
      v60 = a2[5];
      a1[6] = a2[6];
      a1[7] = v59;
      a1[4] = v61;
      a1[5] = v60;
      v62 = a2[11];
      v64 = a2[8];
      v63 = a2[9];
      a1[10] = a2[10];
      a1[11] = v62;
      a1[8] = v64;
      a1[9] = v63;
      v66 = a2[13];
      v65 = a2[14];
      v67 = a2[12];
      a1[15].n128_u64[0] = a2[15].n128_u64[0];
      a1[13] = v66;
      a1[14] = v65;
      a1[12] = v67;
      v68 = a2[3];
      *v10 = a2[2];
      a1[3] = v68;
      a2->n128_u64[0] = v7;
      v69 = (void *)a2->n128_u64[1];
      if (v69)
      {
        a2[1].n128_u64[0] = (unint64_t)v69;
        operator delete(v69);
        v7 = a2->n128_u64[0];
      }
      a2->n128_u64[1] = v54;
      a2[1].n128_u64[0] = v55;
      a2[1].n128_u64[1] = v56;
      a2[12] = v137;
      a2[13] = v142;
      a2[14] = v147;
      a2[15].n128_u64[0] = v152;
      a2[8] = v117;
      a2[9] = v122;
      a2[10] = v127;
      a2[11] = v132;
      a2[4] = v97;
      a2[5] = v102;
      a2[6] = v107;
      a2[7] = v112;
      result = v87;
      *(__n128 *)v58 = v87;
      a2[3] = v92;
      if (*a3 < v7)
      {
        *v57 = 0;
        a2[1].n128_u64[0] = 0;
        a2[1].n128_u64[1] = 0;
        v138 = a2[12];
        v143 = a2[13];
        v148 = a2[14];
        v153 = a2[15].n128_i64[0];
        v118 = a2[8];
        v123 = a2[9];
        v128 = a2[10];
        v133 = a2[11];
        v98 = a2[4];
        v103 = a2[5];
        v108 = a2[6];
        v113 = a2[7];
        v88 = *(__n128 *)v58;
        v93 = a2[3];
        a2->n128_u64[0] = *a3;
        *(__n128 *)((char *)a2 + 8) = *(__n128 *)(a3 + 1);
        a2[1].n128_u64[1] = a3[3];
        a3[2] = 0;
        a3[3] = 0;
        a3[1] = 0;
        v70 = *((_OWORD *)a3 + 7);
        v72 = *((_OWORD *)a3 + 4);
        v71 = *((_OWORD *)a3 + 5);
        *((_OWORD *)v58 + 4) = *((_OWORD *)a3 + 6);
        *((_OWORD *)v58 + 5) = v70;
        *((_OWORD *)v58 + 2) = v72;
        *((_OWORD *)v58 + 3) = v71;
        v73 = *((_OWORD *)a3 + 11);
        v75 = *((_OWORD *)a3 + 8);
        v74 = *((_OWORD *)a3 + 9);
        *((_OWORD *)v58 + 8) = *((_OWORD *)a3 + 10);
        *((_OWORD *)v58 + 9) = v73;
        *((_OWORD *)v58 + 6) = v75;
        *((_OWORD *)v58 + 7) = v74;
        v77 = *((_OWORD *)a3 + 13);
        v76 = *((_OWORD *)a3 + 14);
        v78 = *((_OWORD *)a3 + 12);
        v58[26] = a3[30];
        *((_OWORD *)v58 + 11) = v77;
        *((_OWORD *)v58 + 12) = v76;
        *((_OWORD *)v58 + 10) = v78;
        v79 = *((_OWORD *)a3 + 3);
        *(_OWORD *)v58 = *((_OWORD *)a3 + 2);
        *((_OWORD *)v58 + 1) = v79;
        *a3 = v7;
        v80 = (void *)a3[1];
        if (v80)
        {
          a3[2] = (unint64_t)v80;
          operator delete(v80);
        }
        a3[1] = v54;
        a3[2] = v55;
        a3[3] = v56;
        *((__n128 *)a3 + 12) = v138;
        *((__n128 *)a3 + 13) = v143;
        *((__n128 *)a3 + 14) = v148;
        a3[30] = v153;
        *((__n128 *)a3 + 8) = v118;
        *((__n128 *)a3 + 9) = v123;
        *((__n128 *)a3 + 10) = v128;
        *((__n128 *)a3 + 11) = v133;
        *((__n128 *)a3 + 4) = v98;
        *((__n128 *)a3 + 5) = v103;
        *((__n128 *)a3 + 6) = v108;
        *((__n128 *)a3 + 7) = v113;
        result = v88;
        *((__n128 *)a3 + 2) = v88;
        *((__n128 *)a3 + 3) = v93;
      }
    }
    else
    {
      v11 = *(__int128 *)((char *)a1 + 8);
      v12 = a1[1].n128_i64[1];
      *v9 = 0;
      a1[1].n128_u64[0] = 0;
      a1[1].n128_u64[1] = 0;
      v134 = a1[12];
      v139 = a1[13];
      v144 = a1[14];
      v149 = a1[15].n128_i64[0];
      v114 = a1[8];
      v119 = a1[9];
      v124 = a1[10];
      v129 = a1[11];
      v94 = a1[4];
      v99 = a1[5];
      v104 = a1[6];
      v109 = a1[7];
      v84 = *v10;
      v89 = a1[3];
      a1->n128_u64[0] = *a3;
      *(__n128 *)((char *)a1 + 8) = *(__n128 *)(a3 + 1);
      a1[1].n128_u64[1] = a3[3];
      a3[2] = 0;
      a3[3] = 0;
      a3[1] = 0;
      v13 = (__n128 *)(a3 + 4);
      v14 = *((__n128 *)a3 + 7);
      v16 = *((__n128 *)a3 + 4);
      v15 = *((__n128 *)a3 + 5);
      a1[6] = *((__n128 *)a3 + 6);
      a1[7] = v14;
      a1[4] = v16;
      a1[5] = v15;
      v17 = *((__n128 *)a3 + 11);
      v19 = *((__n128 *)a3 + 8);
      v18 = *((__n128 *)a3 + 9);
      a1[10] = *((__n128 *)a3 + 10);
      a1[11] = v17;
      a1[8] = v19;
      a1[9] = v18;
      v21 = *((__n128 *)a3 + 13);
      v20 = *((__n128 *)a3 + 14);
      v22 = *((__n128 *)a3 + 12);
      a1[15].n128_u64[0] = a3[30];
      a1[13] = v21;
      a1[14] = v20;
      a1[12] = v22;
      v23 = *((__n128 *)a3 + 3);
      *v10 = *((__n128 *)a3 + 2);
      a1[3] = v23;
      *a3 = v7;
      v24 = (void *)a3[1];
      if (v24)
      {
        a3[2] = (unint64_t)v24;
        v81 = v11;
        operator delete(v24);
        v11 = v81;
      }
      *(_OWORD *)(a3 + 1) = v11;
      a3[3] = v12;
      *((__n128 *)a3 + 12) = v134;
      *((__n128 *)a3 + 13) = v139;
      *((__n128 *)a3 + 14) = v144;
      a3[30] = v149;
      *((__n128 *)a3 + 8) = v114;
      *((__n128 *)a3 + 9) = v119;
      *((__n128 *)a3 + 10) = v124;
      *((__n128 *)a3 + 11) = v129;
      *((__n128 *)a3 + 4) = v94;
      *((__n128 *)a3 + 5) = v99;
      *((__n128 *)a3 + 6) = v104;
      *((__n128 *)a3 + 7) = v109;
      result = v84;
      *v13 = v84;
      *((__n128 *)a3 + 3) = v89;
    }
  }
  return result;
}

BOOL sub_20EDF8844(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void *v20;
  unint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;

  v4 = 0xEF7BDEF7BDEF7BDFLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(_QWORD *)a1;
      if (*(_QWORD *)(a2 - 248) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)(a1 + 8);
        v8 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 8) = 0;
        v66 = *(_OWORD *)(a1 + 192);
        v68 = *(_OWORD *)(a1 + 208);
        v70 = *(_OWORD *)(a1 + 224);
        v72 = *(_QWORD *)(a1 + 240);
        v58 = *(_OWORD *)(a1 + 128);
        v60 = *(_OWORD *)(a1 + 144);
        v62 = *(_OWORD *)(a1 + 160);
        v64 = *(_OWORD *)(a1 + 176);
        v50 = *(_OWORD *)(a1 + 64);
        v52 = *(_OWORD *)(a1 + 80);
        v54 = *(_OWORD *)(a1 + 96);
        v56 = *(_OWORD *)(a1 + 112);
        v46 = *(_OWORD *)(a1 + 32);
        v48 = *(_OWORD *)(a1 + 48);
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 248);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 - 240);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 224);
        *(_QWORD *)(a2 - 232) = 0;
        *(_QWORD *)(a2 - 224) = 0;
        *(_QWORD *)(a2 - 240) = 0;
        v9 = (_OWORD *)(a2 - 216);
        v10 = *(_OWORD *)(a2 - 168);
        v11 = *(_OWORD *)(a2 - 136);
        v12 = *(_OWORD *)(a2 - 184);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 - 152);
        *(_OWORD *)(a1 + 112) = v11;
        *(_OWORD *)(a1 + 64) = v12;
        *(_OWORD *)(a1 + 80) = v10;
        v13 = *(_OWORD *)(a2 - 104);
        v14 = *(_OWORD *)(a2 - 72);
        v15 = *(_OWORD *)(a2 - 120);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 - 88);
        *(_OWORD *)(a1 + 176) = v14;
        *(_OWORD *)(a1 + 128) = v15;
        *(_OWORD *)(a1 + 144) = v13;
        v16 = *(_OWORD *)(a2 - 40);
        v17 = *(_OWORD *)(a2 - 24);
        v18 = *(_OWORD *)(a2 - 56);
        *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 208) = v16;
        *(_OWORD *)(a1 + 224) = v17;
        *(_OWORD *)(a1 + 192) = v18;
        v19 = *(_OWORD *)(a2 - 200);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 - 216);
        *(_OWORD *)(a1 + 48) = v19;
        *(_QWORD *)(a2 - 248) = v6;
        v20 = *(void **)(a2 - 240);
        if (v20)
        {
          *(_QWORD *)(a2 - 232) = v20;
          v44 = v7;
          operator delete(v20);
          v7 = v44;
        }
        *(_OWORD *)(a2 - 240) = v7;
        *(_QWORD *)(a2 - 224) = v8;
        *(_OWORD *)(a2 - 56) = v66;
        *(_OWORD *)(a2 - 40) = v68;
        *(_OWORD *)(a2 - 24) = v70;
        *(_QWORD *)(a2 - 8) = v72;
        *(_OWORD *)(a2 - 120) = v58;
        *(_OWORD *)(a2 - 104) = v60;
        *(_OWORD *)(a2 - 88) = v62;
        *(_OWORD *)(a2 - 72) = v64;
        *(_OWORD *)(a2 - 184) = v50;
        *(_OWORD *)(a2 - 168) = v52;
        *(_OWORD *)(a2 - 152) = v54;
        *(_OWORD *)(a2 - 136) = v56;
        result = 1;
        *v9 = v46;
        *(_OWORD *)(a2 - 200) = v48;
      }
      return result;
    case 3uLL:
      sub_20EDF8244((__n128 *)a1, (__n128 *)(a1 + 248), (unint64_t *)(a2 - 248));
      return 1;
    case 4uLL:
      sub_20EDF8C44((unint64_t *)a1, (unint64_t *)(a1 + 248), (unint64_t *)(a1 + 496), (unint64_t *)(a2 - 248));
      return 1;
    case 5uLL:
      sub_20EDF7D40(a1, a1 + 248, a1 + 496, a1 + 744, a2 - 248);
      return 1;
    default:
      v21 = (unint64_t *)(a1 + 496);
      sub_20EDF8244((__n128 *)a1, (__n128 *)(a1 + 248), (unint64_t *)(a1 + 496));
      v22 = a1 + 744;
      if (a1 + 744 == a2)
        return 1;
      v23 = 0;
      v24 = 496;
      break;
  }
  while (1)
  {
    v25 = *(_QWORD *)v22;
    if (*(_QWORD *)v22 < *v21)
    {
      v55 = *(_OWORD *)(v22 + 96);
      v57 = *(_OWORD *)(v22 + 112);
      v26 = *(_OWORD *)(v22 + 48);
      v51 = *(_OWORD *)(v22 + 64);
      v53 = *(_OWORD *)(v22 + 80);
      v63 = *(_OWORD *)(v22 + 160);
      v65 = *(_OWORD *)(v22 + 176);
      v59 = *(_OWORD *)(v22 + 128);
      v61 = *(_OWORD *)(v22 + 144);
      v69 = *(_OWORD *)(v22 + 208);
      v71 = *(_OWORD *)(v22 + 224);
      v27 = *(_QWORD *)(v22 + 8);
      v67 = *(_OWORD *)(v22 + 192);
      v29 = *(_OWORD *)(v22 + 16);
      v28 = *(_OWORD *)(v22 + 32);
      *(_QWORD *)(v22 + 16) = 0;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 8) = 0;
      v73 = *(_QWORD *)(v22 + 240);
      v45 = v29;
      v47 = v28;
      v49 = v26;
      v30 = v24;
      v31 = *v21;
      while (1)
      {
        v32 = v30;
        v33 = a1 + v30;
        *(_QWORD *)(a1 + v30 + 248) = v31;
        v34 = *(void **)(a1 + v30 + 256);
        if (v34)
        {
          *(_QWORD *)(v33 + 264) = v34;
          operator delete(v34);
          *(_QWORD *)(v33 + 264) = 0;
          *(_QWORD *)(v33 + 272) = 0;
        }
        *(_OWORD *)(v33 + 256) = *(_OWORD *)(v33 + 8);
        *(_QWORD *)(v33 + 272) = *(_QWORD *)(v33 + 24);
        *(_QWORD *)(v33 + 16) = 0;
        *(_QWORD *)(v33 + 24) = 0;
        *(_QWORD *)(v33 + 8) = 0;
        v35 = *(_OWORD *)(v33 + 208);
        *(_OWORD *)(v33 + 440) = *(_OWORD *)(v33 + 192);
        *(_OWORD *)(v33 + 456) = v35;
        *(_OWORD *)(v33 + 472) = *(_OWORD *)(v33 + 224);
        *(_QWORD *)(v33 + 488) = *(_QWORD *)(v33 + 240);
        v36 = *(_OWORD *)(v33 + 144);
        *(_OWORD *)(v33 + 376) = *(_OWORD *)(v33 + 128);
        *(_OWORD *)(v33 + 392) = v36;
        v37 = *(_OWORD *)(v33 + 176);
        *(_OWORD *)(v33 + 408) = *(_OWORD *)(v33 + 160);
        *(_OWORD *)(v33 + 424) = v37;
        v38 = *(_OWORD *)(v33 + 80);
        *(_OWORD *)(v33 + 312) = *(_OWORD *)(v33 + 64);
        *(_OWORD *)(v33 + 328) = v38;
        v39 = *(_OWORD *)(v33 + 112);
        *(_OWORD *)(v33 + 344) = *(_OWORD *)(v33 + 96);
        *(_OWORD *)(v33 + 360) = v39;
        v40 = *(_OWORD *)(v33 + 48);
        *(_OWORD *)(v33 + 280) = *(_OWORD *)(v33 + 32);
        *(_OWORD *)(v33 + 296) = v40;
        if (!v32)
          break;
        v31 = *(_QWORD *)(a1 + v32 - 248);
        v30 = v32 - 248;
        if (v25 >= v31)
        {
          v41 = a1 + v32;
          *(_QWORD *)(a1 + v32) = v25;
          v42 = a1 + v32;
          v43 = *(void **)(v42 + 8);
          if (!v43)
            goto LABEL_8;
          goto LABEL_19;
        }
      }
      v41 = a1;
      *(_QWORD *)a1 = v25;
      v42 = a1;
      v43 = *(void **)(a1 + 8);
      if (!v43)
        goto LABEL_8;
LABEL_19:
      *(_QWORD *)(v41 + 16) = v43;
      operator delete(v43);
LABEL_8:
      *(_QWORD *)(v42 + 8) = v27;
      *(_OWORD *)(v41 + 16) = v45;
      *(_OWORD *)(v42 + 192) = v67;
      *(_OWORD *)(v42 + 208) = v69;
      *(_OWORD *)(v42 + 224) = v71;
      *(_QWORD *)(v42 + 240) = v73;
      *(_OWORD *)(v42 + 128) = v59;
      *(_OWORD *)(v42 + 144) = v61;
      *(_OWORD *)(v42 + 160) = v63;
      *(_OWORD *)(v42 + 176) = v65;
      *(_OWORD *)(v42 + 64) = v51;
      *(_OWORD *)(v42 + 80) = v53;
      *(_OWORD *)(v42 + 96) = v55;
      *(_OWORD *)(v42 + 112) = v57;
      ++v23;
      *(_OWORD *)(v42 + 32) = v47;
      *(_OWORD *)(v42 + 48) = v49;
      if (v23 == 8)
        return v22 + 248 == a2;
    }
    v21 = (unint64_t *)v22;
    v24 += 248;
    v22 += 248;
    if (v22 == a2)
      return 1;
  }
}

__n128 sub_20EDF8C44(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  __n128 result;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void *v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void *v36;
  unint64_t v37;
  __int128 v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;

  result.n128_u64[0] = sub_20EDF8244((__n128 *)a1, (__n128 *)a2, a3).n128_u64[0];
  v9 = *a3;
  if (*a4 < *a3)
  {
    v10 = *(_OWORD *)(a3 + 1);
    v11 = a3[3];
    a3[1] = 0;
    a3[2] = 0;
    a3[3] = 0;
    v84 = *((_OWORD *)a3 + 12);
    v87 = *((_OWORD *)a3 + 13);
    v90 = *((_OWORD *)a3 + 14);
    v93 = a3[30];
    v72 = *((_OWORD *)a3 + 8);
    v75 = *((_OWORD *)a3 + 9);
    v78 = *((_OWORD *)a3 + 10);
    v81 = *((_OWORD *)a3 + 11);
    v60 = *((_OWORD *)a3 + 4);
    v63 = *((_OWORD *)a3 + 5);
    v66 = *((_OWORD *)a3 + 6);
    v69 = *((_OWORD *)a3 + 7);
    v54 = *((__n128 *)a3 + 2);
    v57 = *((_OWORD *)a3 + 3);
    *a3 = *a4;
    *(_OWORD *)(a3 + 1) = *(_OWORD *)(a4 + 1);
    a3[3] = a4[3];
    a4[2] = 0;
    a4[3] = 0;
    a4[1] = 0;
    v12 = *((_OWORD *)a4 + 7);
    v14 = *((_OWORD *)a4 + 4);
    v13 = *((_OWORD *)a4 + 5);
    *((_OWORD *)a3 + 6) = *((_OWORD *)a4 + 6);
    *((_OWORD *)a3 + 7) = v12;
    *((_OWORD *)a3 + 4) = v14;
    *((_OWORD *)a3 + 5) = v13;
    v15 = *((_OWORD *)a4 + 11);
    v17 = *((_OWORD *)a4 + 8);
    v16 = *((_OWORD *)a4 + 9);
    *((_OWORD *)a3 + 10) = *((_OWORD *)a4 + 10);
    *((_OWORD *)a3 + 11) = v15;
    *((_OWORD *)a3 + 8) = v17;
    *((_OWORD *)a3 + 9) = v16;
    v19 = *((_OWORD *)a4 + 13);
    v18 = *((_OWORD *)a4 + 14);
    v20 = *((_OWORD *)a4 + 12);
    a3[30] = a4[30];
    *((_OWORD *)a3 + 13) = v19;
    *((_OWORD *)a3 + 14) = v18;
    *((_OWORD *)a3 + 12) = v20;
    v21 = *((_OWORD *)a4 + 3);
    *((_OWORD *)a3 + 2) = *((_OWORD *)a4 + 2);
    *((_OWORD *)a3 + 3) = v21;
    *a4 = v9;
    v22 = (void *)a4[1];
    if (v22)
    {
      a4[2] = (unint64_t)v22;
      v51 = v10;
      operator delete(v22);
      v10 = v51;
    }
    *(_OWORD *)(a4 + 1) = v10;
    a4[3] = v11;
    *((_OWORD *)a4 + 12) = v84;
    *((_OWORD *)a4 + 13) = v87;
    *((_OWORD *)a4 + 14) = v90;
    a4[30] = v93;
    *((_OWORD *)a4 + 8) = v72;
    *((_OWORD *)a4 + 9) = v75;
    *((_OWORD *)a4 + 10) = v78;
    *((_OWORD *)a4 + 11) = v81;
    *((_OWORD *)a4 + 4) = v60;
    *((_OWORD *)a4 + 5) = v63;
    *((_OWORD *)a4 + 6) = v66;
    *((_OWORD *)a4 + 7) = v69;
    result = v54;
    *((__n128 *)a4 + 2) = v54;
    *((_OWORD *)a4 + 3) = v57;
    v23 = *a2;
    if (*a3 < *a2)
    {
      v24 = *(_OWORD *)(a2 + 1);
      v25 = a2[3];
      a2[1] = 0;
      a2[2] = 0;
      a2[3] = 0;
      v85 = *((_OWORD *)a2 + 12);
      v88 = *((_OWORD *)a2 + 13);
      v91 = *((_OWORD *)a2 + 14);
      v94 = a2[30];
      v73 = *((_OWORD *)a2 + 8);
      v76 = *((_OWORD *)a2 + 9);
      v79 = *((_OWORD *)a2 + 10);
      v82 = *((_OWORD *)a2 + 11);
      v61 = *((_OWORD *)a2 + 4);
      v64 = *((_OWORD *)a2 + 5);
      v67 = *((_OWORD *)a2 + 6);
      v70 = *((_OWORD *)a2 + 7);
      v55 = *((__n128 *)a2 + 2);
      v58 = *((_OWORD *)a2 + 3);
      *a2 = *a3;
      *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
      a2[3] = a3[3];
      a3[2] = 0;
      a3[3] = 0;
      a3[1] = 0;
      v26 = *((_OWORD *)a3 + 7);
      v28 = *((_OWORD *)a3 + 4);
      v27 = *((_OWORD *)a3 + 5);
      *((_OWORD *)a2 + 6) = *((_OWORD *)a3 + 6);
      *((_OWORD *)a2 + 7) = v26;
      *((_OWORD *)a2 + 4) = v28;
      *((_OWORD *)a2 + 5) = v27;
      v29 = *((_OWORD *)a3 + 11);
      v31 = *((_OWORD *)a3 + 8);
      v30 = *((_OWORD *)a3 + 9);
      *((_OWORD *)a2 + 10) = *((_OWORD *)a3 + 10);
      *((_OWORD *)a2 + 11) = v29;
      *((_OWORD *)a2 + 8) = v31;
      *((_OWORD *)a2 + 9) = v30;
      v33 = *((_OWORD *)a3 + 13);
      v32 = *((_OWORD *)a3 + 14);
      v34 = *((_OWORD *)a3 + 12);
      a2[30] = a3[30];
      *((_OWORD *)a2 + 13) = v33;
      *((_OWORD *)a2 + 14) = v32;
      *((_OWORD *)a2 + 12) = v34;
      v35 = *((_OWORD *)a3 + 3);
      *((_OWORD *)a2 + 2) = *((_OWORD *)a3 + 2);
      *((_OWORD *)a2 + 3) = v35;
      *a3 = v23;
      v36 = (void *)a3[1];
      if (v36)
      {
        a3[2] = (unint64_t)v36;
        v52 = v24;
        operator delete(v36);
        v24 = v52;
      }
      *(_OWORD *)(a3 + 1) = v24;
      a3[3] = v25;
      *((_OWORD *)a3 + 12) = v85;
      *((_OWORD *)a3 + 13) = v88;
      *((_OWORD *)a3 + 14) = v91;
      a3[30] = v94;
      *((_OWORD *)a3 + 8) = v73;
      *((_OWORD *)a3 + 9) = v76;
      *((_OWORD *)a3 + 10) = v79;
      *((_OWORD *)a3 + 11) = v82;
      *((_OWORD *)a3 + 4) = v61;
      *((_OWORD *)a3 + 5) = v64;
      *((_OWORD *)a3 + 6) = v67;
      *((_OWORD *)a3 + 7) = v70;
      result = v55;
      *((__n128 *)a3 + 2) = v55;
      *((_OWORD *)a3 + 3) = v58;
      v37 = *a1;
      if (*a2 < *a1)
      {
        v38 = *(_OWORD *)(a1 + 1);
        v39 = a1[3];
        a1[2] = 0;
        a1[3] = 0;
        a1[1] = 0;
        v86 = *((_OWORD *)a1 + 12);
        v89 = *((_OWORD *)a1 + 13);
        v92 = *((_OWORD *)a1 + 14);
        v95 = a1[30];
        v74 = *((_OWORD *)a1 + 8);
        v77 = *((_OWORD *)a1 + 9);
        v80 = *((_OWORD *)a1 + 10);
        v83 = *((_OWORD *)a1 + 11);
        v62 = *((_OWORD *)a1 + 4);
        v65 = *((_OWORD *)a1 + 5);
        v68 = *((_OWORD *)a1 + 6);
        v71 = *((_OWORD *)a1 + 7);
        v56 = *((__n128 *)a1 + 2);
        v59 = *((_OWORD *)a1 + 3);
        *a1 = *a2;
        *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
        a1[3] = a2[3];
        a2[2] = 0;
        a2[3] = 0;
        a2[1] = 0;
        v40 = *((_OWORD *)a2 + 7);
        v42 = *((_OWORD *)a2 + 4);
        v41 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
        *((_OWORD *)a1 + 7) = v40;
        *((_OWORD *)a1 + 4) = v42;
        *((_OWORD *)a1 + 5) = v41;
        v43 = *((_OWORD *)a2 + 11);
        v45 = *((_OWORD *)a2 + 8);
        v44 = *((_OWORD *)a2 + 9);
        *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
        *((_OWORD *)a1 + 11) = v43;
        *((_OWORD *)a1 + 8) = v45;
        *((_OWORD *)a1 + 9) = v44;
        v47 = *((_OWORD *)a2 + 13);
        v46 = *((_OWORD *)a2 + 14);
        v48 = *((_OWORD *)a2 + 12);
        a1[30] = a2[30];
        *((_OWORD *)a1 + 13) = v47;
        *((_OWORD *)a1 + 14) = v46;
        *((_OWORD *)a1 + 12) = v48;
        v49 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v49;
        *a2 = v37;
        v50 = (void *)a2[1];
        if (v50)
        {
          a2[2] = (unint64_t)v50;
          v53 = v38;
          operator delete(v50);
          v38 = v53;
        }
        *(_OWORD *)(a2 + 1) = v38;
        a2[3] = v39;
        *((_OWORD *)a2 + 12) = v86;
        *((_OWORD *)a2 + 13) = v89;
        *((_OWORD *)a2 + 14) = v92;
        a2[30] = v95;
        *((_OWORD *)a2 + 8) = v74;
        *((_OWORD *)a2 + 9) = v77;
        *((_OWORD *)a2 + 10) = v80;
        *((_OWORD *)a2 + 11) = v83;
        *((_OWORD *)a2 + 4) = v62;
        *((_OWORD *)a2 + 5) = v65;
        *((_OWORD *)a2 + 6) = v68;
        *((_OWORD *)a2 + 7) = v71;
        result = v56;
        *((__n128 *)a2 + 2) = v56;
        *((_OWORD *)a2 + 3) = v59;
      }
    }
  }
  return result;
}

void sub_20EDF9010(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E9B40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EDF9020(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E9B40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EDF9050(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20EDF9064()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EDF9078(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9E9B90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20EDF90B0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9E9B90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20EDF90D0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(v4 + 1696) = v2[66];
  if ((*(_DWORD *)(v4 + 8) & 0x80000000) == 0)
  {
    v5 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v2 + 40))(v2, v4);
    v4 = *(_QWORD *)(v3 + 8);
    if ((v5 & 1) != 0)
    {
      ++*(_DWORD *)(v4 + 8);
      *(_QWORD *)(v4 + 344) = *(_QWORD *)(v4 + 664);
      sub_20EDF4AA4(v4);
      return;
    }
    *(_DWORD *)(v4 + 8) = -1;
  }
  std::mutex::lock((std::mutex *)(v4 + 1760));
  sub_20EDB787C((_QWORD *)(v4 + 1712));
  std::mutex::unlock((std::mutex *)(v4 + 1760));
}

uint64_t sub_20EDF9164(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3odt28image_detection_and_tracking11TrackerBase5TrackERKNS_3vio8cv_types5ImageIhEERKNSt3__11"
                     "0shared_ptrIvEEdRKNS9_5arrayIdLm9EEERKNSE_IdLm12EEERKNSA_INS1_20ODTDetectionMetadataEEERKNS9_8optio"
                     "nalINSE_IdLm4EEEEEPKvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3odt28image_detection_and_tracking11TrackerBase5TrackERKNS_3vio8cv_types5ImageIhE"
                                "ERKNSt3__110shared_ptrIvEEdRKNS9_5arrayIdLm9EEERKNSE_IdLm12EEERKNSA_INS1_20ODTDetectionM"
                                "etadataEEERKNS9_8optionalINSE_IdLm4EEEEEPKvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3odt28image_detection_and_tracking11TrackerBase5TrackERKNS_3vio8cv_types5ImageIhEERKNSt3__110shared_ptrIvEEdRKNS9_5arrayIdLm9EEERKNSE_IdLm12EEERKNSA_INS1_20ODTDetectionMetadataEEERKNS9_8optionalINSE_IdLm4EEEEEPKvE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3odt28image_detection_and_tracking11TrackerBase5TrackERKNS_3vio8cv_types5ImageIhEERKNSt3__110shared_ptrIvEEdRKNS9_5arrayIdLm9EEERKNSE_IdLm12EEERKNSA_INS1_20ODTDetectionMetadataEEERKNS9_8optionalINSE_IdLm4EEEEEPKvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EDF91D0()
{
  return &unk_24C9E9BF0;
}

uint64_t sub_20EDF91DC(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = (char *)operator new(0x1C0uLL);
  v5 = v4;
  *(_QWORD *)v4 = &off_24C9E9C10;
  v6 = (_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *((_QWORD *)v4 + 3) = v7;
  v8 = v4 + 24;
  v9 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)v4 + 4) = v9;
  if (v9)
  {
    *(_QWORD *)(v7 + 16) = v8;
    *(_QWORD *)(a2 + 8) = v6;
    *v6 = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  else
  {
    *((_QWORD *)v4 + 2) = v8;
  }
  sub_20EDB79B8((uint64_t)(v4 + 40), a2 + 32);
  v10 = *(_QWORD *)(a2 + 184);
  *((_QWORD *)v5 + 23) = *(_QWORD *)(a2 + 176);
  *((_QWORD *)v5 + 24) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(v5 + 328) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(v5 + 344) = v13;
  *(_OWORD *)(v5 + 360) = *(_OWORD *)(a2 + 352);
  v14 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(v5 + 264) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(v5 + 280) = v14;
  v15 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(v5 + 296) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(v5 + 312) = v15;
  v16 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(v5 + 200) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(v5 + 216) = v16;
  v17 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(v5 + 232) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(v5 + 248) = v17;
  *(_OWORD *)(v5 + 370) = *(_OWORD *)(a2 + 362);
  v18 = *(_QWORD *)(a2 + 392);
  *((_QWORD *)v5 + 49) = *(_QWORD *)(a2 + 384);
  *((_QWORD *)v5 + 50) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(v5 + 408) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(v5 + 424) = v21;
  *((_QWORD *)v5 + 55) = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 24) = v5;
  return a1;
}

void sub_20EDF930C(_Unwind_Exception *a1)
{
  _QWORD **v1;
  uint64_t v2;

  sub_20E8D03C0(v2, v1[3]);
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EDF932C(_QWORD *a1)
{
  *a1 = &off_24C9E9C10;
  sub_20EDF5A9C((uint64_t)(a1 + 1));
  return a1;
}

void sub_20EDF935C(_QWORD *a1)
{
  *a1 = &off_24C9E9C10;
  sub_20EDF5A9C((uint64_t)(a1 + 1));
  JUMPOUT(0x212BC6398);
}

char *sub_20EDF939C(uint64_t a1)
{
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;

  v2 = (char *)operator new(0x1C0uLL);
  *((_QWORD *)v2 + 3) = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 16);
  *(_QWORD *)v2 = &off_24C9E9C10;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v2 + 24;
  *((_QWORD *)v2 + 4) = 0;
  sub_20EDEF020((_QWORD *)v2 + 2, v3, (_QWORD *)(a1 + 24));
  sub_20EDB79B8((uint64_t)(v2 + 40), a1 + 40);
  v5 = *(_QWORD *)(a1 + 192);
  *((_QWORD *)v2 + 23) = *(_QWORD *)(a1 + 184);
  *((_QWORD *)v2 + 24) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_OWORD *)(v2 + 200) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(v2 + 216) = *(_OWORD *)(a1 + 216);
  *(_OWORD *)(v2 + 232) = *(_OWORD *)(a1 + 232);
  *(_OWORD *)(v2 + 248) = *(_OWORD *)(a1 + 248);
  v8 = *(_OWORD *)(a1 + 344);
  *(_OWORD *)(v2 + 328) = *(_OWORD *)(a1 + 328);
  *(_OWORD *)(v2 + 344) = v8;
  *(_OWORD *)(v2 + 360) = *(_OWORD *)(a1 + 360);
  *(_OWORD *)(v2 + 370) = *(_OWORD *)(a1 + 370);
  v9 = *(_OWORD *)(a1 + 280);
  *(_OWORD *)(v2 + 264) = *(_OWORD *)(a1 + 264);
  *(_OWORD *)(v2 + 280) = v9;
  v10 = *(_OWORD *)(a1 + 312);
  *(_OWORD *)(v2 + 296) = *(_OWORD *)(a1 + 296);
  *(_OWORD *)(v2 + 312) = v10;
  v11 = *(_QWORD *)(a1 + 400);
  *((_QWORD *)v2 + 49) = *(_QWORD *)(a1 + 392);
  *((_QWORD *)v2 + 50) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *((_QWORD *)v2 + 55) = *(_QWORD *)(a1 + 440);
  v14 = *(_OWORD *)(a1 + 424);
  *(_OWORD *)(v2 + 408) = *(_OWORD *)(a1 + 408);
  *(_OWORD *)(v2 + 424) = v14;
  return v2;
}

void sub_20EDF94B4(_Unwind_Exception *a1)
{
  _QWORD **v1;
  uint64_t v2;

  sub_20E8D03C0(v2, v1[3]);
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20EDF94D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __n128 result;
  __int128 v21;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24C9E9C10;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = a2 + 24;
  *(_QWORD *)(a2 + 32) = 0;
  sub_20EDEF020((_QWORD *)(a2 + 16), *(_QWORD **)(a1 + 16), (_QWORD *)(a1 + 24));
  sub_20EDB79B8(a2 + 40, a1 + 40);
  v5 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a2 + 184) = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a2 + 192) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(_OWORD *)(a1 + 200);
  v9 = *(_OWORD *)(a1 + 216);
  v10 = *(_OWORD *)(a1 + 232);
  *(_OWORD *)(a2 + 248) = *(_OWORD *)(a1 + 248);
  *(_OWORD *)(a2 + 232) = v10;
  *(_OWORD *)(a2 + 216) = v9;
  *(_OWORD *)(a2 + 200) = v8;
  v11 = *(_OWORD *)(a1 + 264);
  v12 = *(_OWORD *)(a1 + 280);
  v13 = *(_OWORD *)(a1 + 312);
  *(_OWORD *)(a2 + 296) = *(_OWORD *)(a1 + 296);
  *(_OWORD *)(a2 + 312) = v13;
  *(_OWORD *)(a2 + 264) = v11;
  *(_OWORD *)(a2 + 280) = v12;
  v14 = *(_OWORD *)(a1 + 328);
  v15 = *(_OWORD *)(a1 + 344);
  v16 = *(_OWORD *)(a1 + 360);
  *(_OWORD *)(a2 + 370) = *(_OWORD *)(a1 + 370);
  *(_OWORD *)(a2 + 344) = v15;
  *(_OWORD *)(a2 + 360) = v16;
  *(_OWORD *)(a2 + 328) = v14;
  v17 = *(_QWORD *)(a1 + 400);
  *(_QWORD *)(a2 + 392) = *(_QWORD *)(a1 + 392);
  *(_QWORD *)(a2 + 400) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  result = *(__n128 *)(a1 + 408);
  v21 = *(_OWORD *)(a1 + 424);
  *(_QWORD *)(a2 + 440) = *(_QWORD *)(a1 + 440);
  *(__n128 *)(a2 + 408) = result;
  *(_OWORD *)(a2 + 424) = v21;
  return result;
}

void sub_20EDF95E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  sub_20E8D03C0(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_20EDF9600(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  sub_20E8D03C0(v1, *v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20EDF9618(uint64_t a1)
{
  return sub_20EDF5A9C(a1 + 8);
}

void sub_20EDF9620(void *a1)
{
  sub_20EDF5A9C((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_20EDF9648(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t (**v5)();
  uint64_t (**v6)();
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t (**v13)();
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _OWORD *v39;
  char v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  BOOL v56;
  char v57;
  std::__shared_weak_count *v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  std::mutex *v75;
  int v76;
  char v77;
  _OWORD v78[6];
  char v79;
  uint64_t (**v80)();
  uint64_t (**v81)();
  __int128 v82;
  __int128 v83;
  _BYTE v84[40];
  __int128 v85;
  __int128 v86;
  __int128 __p;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  int v91;
  __int128 v92;
  unint64_t v93;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 200);
  v74 = *(_QWORD *)(a1 + 376);
  v76 = *(unsigned __int8 *)(a1 + 384);
  v4 = *(unsigned __int8 *)(a1 + 385);
  v89 = 0u;
  v90 = 0u;
  v91 = 733221220;
  kdebug_trace();
  kdebug_trace();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 24))(v2, a1 + 40, a1 + 184, a1 + 392);
  kdebug_trace();
  sub_20EDF089C(v2, (_QWORD *)(a1 + 16));
  if (*(_BYTE *)(v2 + 656))
  {
    sub_20EDAE924(*(int8x8_t **)(v2 + 664), *(_QWORD *)(*(_QWORD *)(v2 + 200) + 24), 1, 0, &v80);
  }
  else
  {
    v59 = *(_QWORD **)(a1 + 16);
    v60 = (_QWORD *)(a1 + 24);
    if (v59 == (_QWORD *)(a1 + 24))
    {
      v6 = 0;
      v5 = 0;
      goto LABEL_4;
    }
    v61 = 0;
    v62 = *(_QWORD **)(a1 + 16);
    do
    {
      v63 = v61;
      v64 = (_QWORD *)v62[1];
      if (v64)
      {
        do
        {
          v65 = v64;
          v64 = (_QWORD *)*v64;
        }
        while (v64);
      }
      else
      {
        do
        {
          v65 = (_QWORD *)v62[2];
          v56 = *v65 == (_QWORD)v62;
          v62 = v65;
        }
        while (!v56);
      }
      ++v61;
      v62 = v65;
    }
    while (v65 != v60);
    v80 = 0;
    v81 = 0;
    *(_QWORD *)&v82 = 0;
    if (v63 >= 0x1FFFFFFFFFFFFFFFLL)
      sub_20E92CED8();
    v80 = (uint64_t (**)())operator new(8 * v61);
    v81 = v80;
    *(_QWORD *)&v82 = &v80[v61];
    *(_QWORD *)&v78[0] = &v80;
    do
    {
      *(_QWORD *)&v92 = *(_QWORD *)v59[5];
      sub_20E9B2D04((uint64_t *)v78, &v92);
      v72 = (_QWORD *)v59[1];
      if (v72)
      {
        do
        {
          v73 = v72;
          v72 = (_QWORD *)*v72;
        }
        while (v72);
      }
      else
      {
        do
        {
          v73 = (_QWORD *)v59[2];
          v56 = *v73 == (_QWORD)v59;
          v59 = v73;
        }
        while (!v56);
      }
      v59 = v73;
    }
    while (v73 != v60);
  }
  v5 = v80;
  v6 = v81;
LABEL_4:
  v80 = &off_24C9AFD78;
  LOBYTE(v81) = 0;
  v7 = (_OWORD *)(a1 + 280);
  v84[32] = 0;
  v82 = 0u;
  v83 = 0u;
  memset(v84, 0, 25);
  v85 = 0u;
  v86 = 0u;
  __p = 0u;
  v88 = 0;
  LOBYTE(v78[0]) = 0;
  v79 = 0;
  if (v4)
  {
    v8 = *(_OWORD *)(a1 + 328);
    v78[2] = *(_OWORD *)(a1 + 312);
    v78[3] = v8;
    v9 = *(_OWORD *)(a1 + 360);
    v78[4] = *(_OWORD *)(a1 + 344);
    v78[5] = v9;
    v10 = *(_OWORD *)(a1 + 296);
    v78[0] = *v7;
    v78[1] = v10;
    v79 = 1;
  }
  v11 = *(_QWORD **)(a1 + 16);
  if (v11 == (_QWORD *)(a1 + 24))
  {
    v80 = &off_24C9AFD78;
    v58 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
    if (!*((_QWORD *)&v86 + 1))
      goto LABEL_87;
    goto LABEL_83;
  }
  v77 = 0;
  v75 = (std::mutex *)(v2 + 8);
  do
  {
    v12 = v11[5];
    if (v5 != v6)
    {
      v13 = v5;
      while (*v13 != *(uint64_t (**)())v12)
      {
        if (++v13 == v6)
        {
          v13 = v6;
          break;
        }
      }
      if (v13 != v6)
      {
        if ((*(_DWORD *)(v12 + 8) & 0x80000000) != 0)
        {
          std::mutex::lock(v75);
          *((_QWORD *)&v92 + 1) = 0;
          v93 = 0;
          *(_QWORD *)&v92 = (char *)&v92 + 8;
          sub_20EDEF020(&v92, *(_QWORD **)(v2 + 72), (_QWORD *)(v2 + 80));
          std::mutex::unlock(v75);
          if (v93)
          {
            if (*(_WORD *)(v2 + 368) && (v14 = *(_QWORD *)(v2 + 480), v14 >= *(unsigned __int16 *)(v2 + 368)))
            {
              v56 = v14 >= v93 || *(_BYTE *)(v2 + 513) == 0;
              v57 = !v56;
              sub_20E8D03C0((uint64_t)&v92, *((_QWORD **)&v92 + 1));
              if (!v76 && (v57 & 1) == 0)
                goto LABEL_54;
            }
            else
            {
              sub_20E8D03C0((uint64_t)&v92, *((_QWORD **)&v92 + 1));
            }
          }
          else
          {
            sub_20E8D03C0((uint64_t)&v92, *((_QWORD **)&v92 + 1));
            if (!v76)
              goto LABEL_54;
          }
        }
        else if (!v76)
        {
          goto LABEL_54;
        }
        if (((*(_BYTE *)(v2 + 656) != 0) & v77) == 1)
          sub_20EDD509C((uint64_t **)(v2 + 200), (uint64_t)&v80);
        v15 = v11[5];
        *(_QWORD *)(v15 + 352) = *(_QWORD *)(v2 + 472);
        v16 = *(_QWORD *)(a1 + 136);
        *(_QWORD *)&v92 = *(_QWORD *)(a1 + 128);
        *((_QWORD *)&v92 + 1) = v16;
        if (v16)
        {
          v17 = (unint64_t *)(v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        sub_20E8E9964(v15 + 360, &v92, *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 48), (uint64_t *)(a1 + 112));
        v19 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
        if (*((_QWORD *)&v92 + 1))
        {
          v20 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v22 = v11[5];
        *(_QWORD *)(v22 + 664) = v3;
        v24 = *(_OWORD *)(a1 + 240);
        v23 = *(_OWORD *)(a1 + 256);
        v25 = *(_QWORD *)(a1 + 272);
        *(_OWORD *)(v22 + 520) = *(_OWORD *)(a1 + 224);
        *(_QWORD *)(v22 + 568) = v25;
        *(_OWORD *)(v22 + 552) = v23;
        *(_OWORD *)(v22 + 536) = v24;
        *(_OWORD *)(v22 + 504) = *(_OWORD *)(a1 + 208);
        if (*(_BYTE *)(v2 + 272))
        {
          v26 = v11[5];
          *(_OWORD *)(v26 + 592) = *(_OWORD *)(v2 + 296);
          v27 = *(_OWORD *)(v2 + 312);
          v28 = *(_OWORD *)(v2 + 328);
          v29 = *(_OWORD *)(v2 + 344);
          *(_QWORD *)(v26 + 656) = *(_QWORD *)(v2 + 360);
          *(_OWORD *)(v26 + 624) = v28;
          *(_OWORD *)(v26 + 640) = v29;
          *(_OWORD *)(v26 + 608) = v27;
        }
        v30 = (_OWORD *)(v11[5] + 728);
        v31 = *(_OWORD *)(a1 + 296);
        *v30 = *v7;
        v30[1] = v31;
        v32 = *(_OWORD *)(a1 + 312);
        v33 = *(_OWORD *)(a1 + 328);
        v34 = *(_OWORD *)(a1 + 360);
        v30[4] = *(_OWORD *)(a1 + 344);
        v30[5] = v34;
        v30[2] = v32;
        v30[3] = v33;
        v35 = v11[5];
        v36 = *(_OWORD *)(a1 + 408);
        v37 = *(_OWORD *)(a1 + 424);
        *(_BYTE *)(v35 + 720) = *(_BYTE *)(a1 + 440);
        *(_OWORD *)(v35 + 688) = v36;
        *(_OWORD *)(v35 + 704) = v37;
        v38 = v11[5];
        *(_QWORD *)(v38 + 968) = v74;
        v39 = (_OWORD *)(v38 + 72);
        *(_QWORD *)(v38 + 1696) = 0;
        *(_DWORD *)(v38 + 8) = -1;
        v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
        v41 = v11[5];
        if ((v40 & 1) != 0)
        {
          v42 = *(_OWORD *)(v41 + 88);
          *v39 = *(_OWORD *)(v41 + 72);
          v39[1] = v42;
          v43 = *(_OWORD *)(v41 + 104);
          v44 = *(_OWORD *)(v41 + 120);
          v45 = *(_OWORD *)(v41 + 152);
          v39[4] = *(_OWORD *)(v41 + 136);
          v39[5] = v45;
          v39[2] = v43;
          v39[3] = v44;
          v41 = v11[5];
          *(_QWORD *)(v41 + 344) = *(_QWORD *)(v41 + 664);
          v46 = *(_DWORD *)(v41 + 8) + 1;
          *(_DWORD *)(v41 + 8) = v46;
          if (v46 < 0)
          {
LABEL_39:
            std::mutex::lock((std::mutex *)(v41 + 1760));
            sub_20EDB787C((_QWORD *)(v41 + 1712));
            std::mutex::unlock((std::mutex *)(v41 + 1760));
            goto LABEL_42;
          }
        }
        else if ((*(_DWORD *)(v41 + 8) & 0x80000000) != 0)
        {
          goto LABEL_39;
        }
        sub_20EDF4AA4(v41);
LABEL_42:
        if (*(_BYTE *)(v2 + 656))
        {
          sub_20EDABC78(*(int8x8_t **)(v2 + 664), *(_QWORD *)v11[5], 0);
          v47 = v11[5];
          if ((*(_DWORD *)(v47 + 8) & 0x80000000) != 0)
          {
            v77 = 0;
          }
          else
          {
            v48 = *(_QWORD *)(v47 + 920);
            *(_QWORD *)&v92 = *(_QWORD *)(v47 + 912);
            *((_QWORD *)&v92 + 1) = v48;
            if (v48)
            {
              v49 = (unint64_t *)(v48 + 8);
              do
                v50 = __ldxr(v49);
              while (__stxr(v50 + 1, v49));
            }
            sub_20E8E9964((uint64_t)&v80, &v92, *(_QWORD *)(v47 + 856), *(_QWORD *)(v47 + 864), *(_QWORD *)(v47 + 872), *(_QWORD *)(v47 + 840), *(_QWORD *)(v47 + 848), *(unsigned __int8 *)(v47 + 832), (uint64_t *)(v47 + 896));
            v51 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
            if (*((_QWORD *)&v92 + 1))
            {
              v52 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            v77 = 1;
          }
        }
      }
    }
LABEL_54:
    atomic_store(2u, (unsigned int *)(v11[5] + 1136));
    v54 = (_QWORD *)v11[1];
    if (v54)
    {
      do
      {
        v55 = v54;
        v54 = (_QWORD *)*v54;
      }
      while (v54);
    }
    else
    {
      do
      {
        v55 = (_QWORD *)v11[2];
        v56 = *v55 == (_QWORD)v11;
        v11 = v55;
      }
      while (!v56);
    }
    v11 = v55;
  }
  while (v55 != (_QWORD *)(a1 + 24));
  v80 = &off_24C9AFD78;
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
  if (*((_QWORD *)&v86 + 1))
  {
LABEL_83:
    p_shared_owners = (unint64_t *)&v58->__shared_owners_;
    do
      v67 = __ldaxr(p_shared_owners);
    while (__stlxr(v67 - 1, p_shared_owners));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
LABEL_87:
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
  if (*((_QWORD *)&v85 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (v5)
    operator delete(v5);
  return kdebug_trace();
}

void sub_20EDF9DD0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::mutex *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  uint64_t v34;

  if (__p)
    operator delete(__p);
  sub_20E8E69C4(v34 - 176);
  sub_20E860DA4(a1);
}

uint64_t sub_20EDF9E8C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3odt28image_detection_and_tracking11TrackerBase27TryToScheduleDetectionTasksERKNS_3vio8cv_ty"
                     "pes5ImageIhEERKNSt3__110shared_ptrIvEEdRKNS9_5arrayIdLm9EEERKNSE_IdLm12EEEPKvbbRKNSA_INS1_20ODTDete"
                     "ctionMetadataEEERKNS9_8optionalINSE_IdLm4EEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3odt28image_detection_and_tracking11TrackerBase27TryToScheduleDetectionTasksERKNS"
                                "_3vio8cv_types5ImageIhEERKNSt3__110shared_ptrIvEEdRKNS9_5arrayIdLm9EEERKNSE_IdLm12EEEPKv"
                                "bbRKNSA_INS1_20ODTDetectionMetadataEEERKNS9_8optionalINSE_IdLm4EEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3odt28image_detection_and_tracking11TrackerBase27TryToScheduleDetectionTasksERKNS_3vio8cv_types5ImageIhEERKNSt3__110shared_ptrIvEEdRKNS9_5arrayIdLm9EEERKNSE_IdLm12EEEPKvbbRKNSA_INS1_20ODTDetectionMetadataEEERKNS9_8optionalINSE_IdLm4EEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3odt28image_detection_and_tracking11TrackerBase27TryToScheduleDetectionTasksERKNS_3vio8cv_types5ImageIhEERKNSt3__110shared_ptrIvEEdRKNS9_5arrayIdLm9EEERKNSE_IdLm12EEEPKvbbRKNSA_INS1_20ODTDetectionMetadataEEERKNS9_8optionalINSE_IdLm4EEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EDF9EF8()
{
  return &unk_24C9E9C70;
}

uint64_t sub_20EDF9F04(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  result = sub_20EDEF2FC(a1, (__int128 *)a2);
  *(_QWORD *)result = &off_24C9E9D48;
  *(_DWORD *)(result + 784) = 1065353216;
  *(_BYTE *)(result + 788) = 0;
  *(_DWORD *)(result + 792) = 0;
  *(_QWORD *)(result + 800) = 500;
  *(_DWORD *)(result + 808) = 1;
  *(_QWORD *)(result + 816) = 0x3FD3333333333333;
  *(_QWORD *)(result + 824) = 0;
  *(_QWORD *)(result + 832) = 0x3FC3333333333333;
  *(_QWORD *)(result + 840) = 6;
  *(_WORD *)(result + 848) = 0;
  *(_BYTE *)(result + 850) = 1;
  *(_DWORD *)(result + 851) = 0;
  *(_WORD *)(result + 855) = 256;
  *(int64x2_t *)(result + 864) = vdupq_n_s64(0xAuLL);
  *(_QWORD *)(result + 880) = 0x100000001;
  *(_DWORD *)(result + 888) = 5;
  *(_BYTE *)(result + 892) = 0;
  *(_QWORD *)(result + 896) = 0x3F96E9DD3F5425F2;
  *(_DWORD *)(result + 904) = 0;
  *(_WORD *)(result + 908) = 257;
  *(_BYTE *)(result + 910) = 0;
  *(_QWORD *)(result + 912) = 0xDC00000200;
  *(_QWORD *)(result + 928) = 0;
  *(_QWORD *)(result + 920) = 0;
  *(_WORD *)(result + 944) = 0;
  *(_QWORD *)(result + 936) = 0;
  *(_OWORD *)(result + 960) = 0u;
  *(_OWORD *)(result + 976) = 0u;
  *(_OWORD *)(result + 992) = 0u;
  *(_OWORD *)(result + 1008) = 0u;
  *(_OWORD *)(result + 1024) = 0u;
  *(_OWORD *)(result + 1040) = 0u;
  *(_QWORD *)(result + 1056) = 0x3FF0000000000000;
  *(_QWORD *)(result + 952) = &off_24C9AFC90;
  *(_BYTE *)(result + 1064) = 0;
  *(_DWORD *)(result + 1072) = 0;
  *(_QWORD *)(result + 1080) = 500;
  *(_DWORD *)(result + 1088) = 1;
  *(_QWORD *)(result + 1096) = 0x3FD3333333333333;
  *(_QWORD *)(result + 1104) = 0;
  *(_QWORD *)(result + 1112) = 0x3FC3333333333333;
  *(_QWORD *)(result + 1120) = 6;
  *(_WORD *)(result + 1128) = 0;
  *(_BYTE *)(result + 1130) = 1;
  *(_WORD *)(result + 1135) = 256;
  *(_DWORD *)(result + 1131) = 0;
  *(_QWORD *)(result + 1144) = 10;
  *(_QWORD *)(result + 1152) = 10;
  *(_QWORD *)(result + 1160) = 0x100000001;
  *(_DWORD *)(result + 1168) = 5;
  *(_BYTE *)(result + 1172) = 0;
  *(_QWORD *)(result + 1176) = 0x3F96E9DD3F5425F2;
  *(_DWORD *)(result + 1184) = 0;
  *(_WORD *)(result + 1188) = 257;
  *(_BYTE *)(result + 1190) = 0;
  *(_QWORD *)(result + 1192) = 0xDC00000200;
  *(_WORD *)(result + 1224) = 0;
  *(_QWORD *)(result + 1208) = 0;
  *(_QWORD *)(result + 1200) = 0;
  *(_QWORD *)(result + 1216) = 0;
  *(_BYTE *)(result + 1232) = 0;
  *(_BYTE *)(result + 1560) = 0;
  *(_BYTE *)(result + 1568) = 0;
  *(_BYTE *)(result + 1728) = 0;
  *(_QWORD *)(result + 1960) = 0;
  *(_OWORD *)(result + 1928) = 0u;
  *(_OWORD *)(result + 1944) = 0u;
  *(_OWORD *)(result + 1896) = 0u;
  *(_OWORD *)(result + 1912) = 0u;
  *(_OWORD *)(result + 1864) = 0u;
  *(_OWORD *)(result + 1880) = 0u;
  *(_OWORD *)(result + 1832) = 0u;
  *(_OWORD *)(result + 1848) = 0u;
  *(_OWORD *)(result + 1800) = 0u;
  *(_OWORD *)(result + 1816) = 0u;
  *(_OWORD *)(result + 1768) = 0u;
  *(_OWORD *)(result + 1784) = 0u;
  *(_OWORD *)(result + 1736) = 0u;
  *(_OWORD *)(result + 1752) = 0u;
  *(_QWORD *)(result + 1968) = result + 1968;
  *(_QWORD *)(result + 1976) = result + 1968;
  *(_BYTE *)(result + 2032) = 0;
  *(_BYTE *)(result + 2040) = 0;
  *(_BYTE *)(result + 2056) = 0;
  *(_BYTE *)(result + 2016) = 0;
  *(_OWORD *)(result + 2000) = 0u;
  *(_OWORD *)(result + 1984) = 0u;
  if (*(_BYTE *)(a2 + 64))
  {
    v4 = *(_OWORD *)a2;
    v5 = *(_OWORD *)(a2 + 16);
    v6 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(result + 417) = *(_OWORD *)(a2 + 41);
    *(_OWORD *)(result + 392) = v5;
    *(_OWORD *)(result + 408) = v6;
    *(_OWORD *)(result + 376) = v4;
  }
  *(_WORD *)(result + 368) = 1;
  *(_QWORD *)(result + 448) = 0x3FE08057619F0FB4;
  return result;
}

uint64_t sub_20EDFA10C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v6;
  int v7;
  char *v8;
  double v9;
  uint64_t v10;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  __int128 *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unsigned __int8 v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  size_t v34;
  const char *v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unsigned __int8 v49;
  const char *v50;
  size_t v51;
  __int128 *v52;
  unint64_t v53;
  const char *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  size_t v63;
  std::__shared_weak_count_vtbl *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  void *v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  void *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v105;
  uint64_t *v106[3];
  int v107;
  const char *v108;
  int v109;
  const char *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  _QWORD v113[2];
  std::__shared_weak_count *v114;
  char *v115;
  std::__shared_weak_count *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  void *object;
  __int128 v125;
  __int128 v126;
  void *__p[2];
  unint64_t v128;
  char v129;
  uint64_t v130;

  v3 = a3;
  v130 = *MEMORY[0x24BDAC8D0];
  v117 = a3;
  v118 = 0;
  v119 = 0;
  v120 = 0;
  v121 = 733221212;
  kdebug_trace();
  if (!*(_QWORD *)a2)
  {
    v37 = 2;
    goto LABEL_139;
  }
  v6 = (char *)operator new(0x9B0uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_24C9E9CA8;
  bzero(v6 + 24, 0x998uLL);
  *((_DWORD *)v6 + 8) = -1;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *((_DWORD *)v6 + 22) = 0;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((_OWORD *)v6 + 9) = 0u;
  *((_OWORD *)v6 + 10) = 0u;
  *((_OWORD *)v6 + 11) = 0u;
  *((_OWORD *)v6 + 12) = 0u;
  *((_OWORD *)v6 + 13) = 0u;
  *((_OWORD *)v6 + 14) = 0u;
  *((_OWORD *)v6 + 15) = 0u;
  *((_OWORD *)v6 + 16) = 0u;
  *((_OWORD *)v6 + 17) = 0u;
  *((_OWORD *)v6 + 18) = 0u;
  *((_OWORD *)v6 + 19) = 0u;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *(_OWORD *)(v6 + 345) = 0u;
  *((_QWORD *)v6 + 46) = 0xBFF0000000000000;
  *((_QWORD *)v6 + 48) = &off_24C9AFD78;
  v6[464] = 0;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  *((_OWORD *)v6 + 27) = 0u;
  *(_OWORD *)(v6 + 441) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_OWORD *)(v6 + 552) = 0u;
  *(_OWORD *)(v6 + 568) = 0u;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 600) = 0u;
  *(_OWORD *)(v6 + 616) = 0u;
  *(_OWORD *)(v6 + 632) = 0u;
  *(_OWORD *)(v6 + 648) = 0u;
  *(_OWORD *)(v6 + 664) = 0u;
  *((_QWORD *)v6 + 85) = 0;
  *((_QWORD *)v6 + 86) = 0xBFF0000000000000;
  *((_OWORD *)v6 + 51) = 0u;
  *((_OWORD *)v6 + 52) = 0u;
  *((_OWORD *)v6 + 49) = 0u;
  *((_OWORD *)v6 + 50) = 0u;
  *((_OWORD *)v6 + 47) = 0u;
  *((_OWORD *)v6 + 48) = 0u;
  v6[712] = 0;
  *(_OWORD *)(v6 + 696) = 0u;
  *((_QWORD *)v6 + 106) = &off_24C9AFD78;
  v6[928] = 0;
  *(_OWORD *)(v6 + 905) = 0u;
  *((_OWORD *)v6 + 55) = 0u;
  *((_OWORD *)v6 + 56) = 0u;
  *((_OWORD *)v6 + 54) = 0u;
  *(_OWORD *)(v6 + 936) = 0u;
  *(_OWORD *)(v6 + 952) = 0u;
  *(_OWORD *)(v6 + 968) = 0u;
  *(_OWORD *)(v6 + 984) = 0u;
  *(_OWORD *)(v6 + 1000) = 0u;
  *((_QWORD *)v6 + 127) = &off_24C9AFD78;
  v6[1096] = 0;
  *(_OWORD *)(v6 + 1032) = 0u;
  *(_OWORD *)(v6 + 1048) = 0u;
  *(_OWORD *)(v6 + 1064) = 0u;
  *(_OWORD *)(v6 + 1073) = 0u;
  *((_OWORD *)v6 + 73) = 0u;
  *((_OWORD *)v6 + 74) = 0u;
  *((_OWORD *)v6 + 75) = 0u;
  *((_OWORD *)v6 + 69) = 0u;
  *((_OWORD *)v6 + 70) = 0u;
  *((_OWORD *)v6 + 71) = 0u;
  *(_OWORD *)(v6 + 1148) = 0u;
  v6[1216] = 1;
  *(_OWORD *)(v6 + 1224) = 0u;
  *(_OWORD *)(v6 + 1240) = 0u;
  *(_OWORD *)(v6 + 1256) = 0u;
  *(_OWORD *)(v6 + 1272) = 0u;
  *(_OWORD *)(v6 + 1282) = 0u;
  v6[1352] = 0;
  *(_OWORD *)(v6 + 1336) = 0u;
  *(_OWORD *)(v6 + 1320) = 0u;
  *(_OWORD *)(v6 + 1304) = 0u;
  *((_OWORD *)v6 + 87) = 0u;
  *((_OWORD *)v6 + 86) = 0u;
  *((_OWORD *)v6 + 85) = 0u;
  v6[1408] = 1;
  *(_OWORD *)(v6 + 1416) = 0u;
  *(_OWORD *)(v6 + 1432) = 0u;
  *(_OWORD *)(v6 + 1448) = 0u;
  *(_OWORD *)(v6 + 1464) = 0u;
  *(_OWORD *)(v6 + 1474) = 0u;
  v6[1544] = 0;
  *(_OWORD *)(v6 + 1528) = 0u;
  *(_OWORD *)(v6 + 1512) = 0u;
  *(_OWORD *)(v6 + 1496) = 0u;
  *((_QWORD *)v6 + 194) = &off_24C9AFD78;
  v6[1632] = 0;
  *(_OWORD *)(v6 + 1609) = 0u;
  *((_OWORD *)v6 + 100) = 0u;
  *((_OWORD *)v6 + 99) = 0u;
  *((_OWORD *)v6 + 98) = 0u;
  *((_QWORD *)v6 + 213) = 0;
  *(_OWORD *)(v6 + 1688) = 0u;
  *(_OWORD *)(v6 + 1672) = 0u;
  *(_OWORD *)(v6 + 1656) = 0u;
  *(_OWORD *)(v6 + 1640) = 0u;
  *((_DWORD *)v6 + 428) = 1065353216;
  v6[1728] = 0;
  *(_OWORD *)(v6 + 1768) = 0u;
  *(_OWORD *)(v6 + 1752) = 0u;
  *(_OWORD *)(v6 + 1736) = 0u;
  *((_QWORD *)v6 + 223) = 850045863;
  *((_QWORD *)v6 + 232) = 0;
  *((_OWORD *)v6 + 115) = 0u;
  *((_OWORD *)v6 + 114) = 0u;
  *((_OWORD *)v6 + 113) = 0u;
  *((_OWORD *)v6 + 112) = 0u;
  *((_OWORD *)v6 + 117) = 0u;
  *((_QWORD *)v6 + 233) = v6 + 1872;
  *((_OWORD *)v6 + 119) = 0u;
  *((_OWORD *)v6 + 118) = 0u;
  *((_DWORD *)v6 + 480) = 1065353216;
  v6[2168] = 0;
  *(_OWORD *)(v6 + 1985) = 0u;
  *(_OWORD *)(v6 + 1976) = 0u;
  *(_OWORD *)(v6 + 1960) = 0u;
  *(_OWORD *)(v6 + 1944) = 0u;
  *(_OWORD *)(v6 + 1928) = 0u;
  v115 = v6 + 24;
  v116 = (std::__shared_weak_count *)v6;
  v7 = sub_20EDB986C();
  v8 = (char *)operator new(0x180uLL);
  v9 = 0.8;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  if (!v7)
    v9 = 0.6;
  *(_QWORD *)v8 = &off_24C9E9CF8;
  v10 = 30;
  if (!v7)
    v10 = 20;
  *((_QWORD *)v8 + 31) = v8 + 256;
  *((_QWORD *)v8 + 32) = 0;
  *((_QWORD *)v8 + 35) = 0;
  *((_QWORD *)v8 + 36) = 0;
  *((_QWORD *)v8 + 33) = 0;
  *((_QWORD *)v8 + 34) = v8 + 280;
  *((_WORD *)v8 + 12) = 0;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  *((_DWORD *)v8 + 82) = 1065353216;
  *((_OWORD *)v8 + 21) = 0u;
  *((_OWORD *)v8 + 22) = 0u;
  *((_DWORD *)v8 + 92) = 1065353216;
  *((_QWORD *)v8 + 47) = 0;
  *((int64x2_t *)v8 + 2) = vdupq_n_s64(0x10uLL);
  *((_OWORD *)v8 + 3) = xmmword_210378580;
  *((_QWORD *)v8 + 8) = 8;
  *((_QWORD *)v8 + 9) = 0x402E000000000000;
  *((_DWORD *)v8 + 20) = 1061997773;
  *((_QWORD *)v8 + 11) = 12;
  v8[96] = 1;
  *((_QWORD *)v8 + 13) = 20;
  __asm { FMOV            V2.2D, #0.5 }
  *((_OWORD *)v8 + 7) = xmmword_2102EF0B0;
  *((_OWORD *)v8 + 8) = _Q2;
  __asm { FMOV            V2.2D, #1.0 }
  *((int64x2_t *)v8 + 9) = vdupq_n_s64(0x3FD3333333333333uLL);
  *((_OWORD *)v8 + 10) = _Q2;
  *((_OWORD *)v8 + 11) = xmmword_2102EF0C0;
  *((_OWORD *)v8 + 12) = xmmword_2102EF0D0;
  *((_QWORD *)v8 + 26) = 0x3F0000003F333333;
  *((_QWORD *)v8 + 27) = v10;
  *((double *)v8 + 28) = v9;
  *((_QWORD *)v8 + 29) = 4;
  v8[240] = 1;
  v113[1] = 0;
  v114 = 0;
  *((_QWORD *)v6 + 231) = v8 + 24;
  v16 = (std::__shared_weak_count *)*((_QWORD *)v6 + 232);
  *((_QWORD *)v6 + 232) = v8;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (__int128 *)*((_QWORD *)v6 + 231);
  v20 = *(_QWORD *)(a2 + 8);
  object = *(void **)a2;
  *(_QWORD *)&v125 = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = sub_20EDC1A7C(v19, &object, v3);
  v24 = v23;
  v25 = (std::__shared_weak_count *)v125;
  if ((_QWORD)v125)
  {
    v26 = (unint64_t *)(v125 + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      if (v24)
        goto LABEL_19;
LABEL_30:
      if (!*(_QWORD *)(a1 + 664))
      {
        v38 = (uint64_t *)operator new();
        sub_20EDA9418(v38, a1 + 672);
        v39 = *(uint64_t **)(a1 + 664);
        *(_QWORD *)(a1 + 664) = v38;
        if (v39)
        {
          v40 = sub_20EDB688C(v39);
          MEMORY[0x212BC6398](v40, 0x10B2C409B7882D9);
        }
      }
      v41 = *(_QWORD **)a2;
      v42 = *(_QWORD *)(*(_QWORD *)a2 + 48) - *(_QWORD *)(*(_QWORD *)a2 + 40);
      if (v42)
      {
        v43 = v3;
        v44 = a1;
        v45 = 0;
        v46 = 0;
        v47 = v42 >> 4;
        do
        {
          if (sub_20EDAA48C(*(_QWORD *)(v44 + 664), (char **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + v45) + 576), v46, v43)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/TrackerObject3d.cpp", 674, (uint64_t)"ranker_->AddDescriptors(ref_keyframe_descriptors, i, object_id) == ObjectRankingReturn::kObjectRankingReturnOk", 110, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          ++v46;
          v45 += 16;
        }
        while (v47 != v46);
        v41 = *(_QWORD **)a2;
        a1 = v44;
        v3 = v43;
      }
      sub_20EDB9F70((uint64_t)(v6 + 1864), v41);
      if (v6[2472])
        v6[2472] = 0;
      sub_20EDA24B4((uint64_t)(v6 + 2168), 0, 1.0, 1.0, 16.6666667);
      sub_20EDA2A08((uint64_t)(v6 + 2288), 1, 1.0, 1.0, 16.6666667);
      v6[2472] = 1;
      *((_OWORD *)v6 + 139) = 0u;
      *((_OWORD *)v6 + 140) = 0u;
      *((_OWORD *)v6 + 141) = 0u;
      v6[2272] = 0;
      *((_QWORD *)v6 + 285) = 0xBFF0000000000000;
      v6[2408] = 0;
      *(_OWORD *)(v6 + 2344) = 0u;
      *(_OWORD *)(v6 + 2360) = 0u;
      *(_OWORD *)(v6 + 2376) = 0u;
      *(_OWORD *)(v6 + 2392) = 0u;
      *((_OWORD *)v6 + 151) = xmmword_210378E00;
      *((_QWORD *)v6 + 304) = 0;
      v37 = sub_20EDB4B60((uint64_t *)&v115, v3, (std::mutex *)(a1 + 8));
      v48 = v114;
      if (!v114)
        goto LABEL_134;
      goto LABEL_130;
    }
  }
  if (!v23)
    goto LABEL_30;
LABEL_19:
  v28 = atomic_load((unsigned __int8 *)&qword_254A5F9D0);
  if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F9D0))
  {
    sub_21021D3D8(v106);
    sub_20E8610C0(&object, "cv3d.odt.image_detection_and_tracking");
    sub_20E8C4068(v106, (uint64_t)&object, &qword_254A5F9C8);
    if (SHIBYTE(v125) < 0)
      operator delete(object);
    __cxa_guard_release(&qword_254A5F9D0);
  }
  v113[0] = qword_254A5F9C8;
  if (**(int **)(qword_254A5F9C8 + 56) <= 2)
  {
    v29 = *(unsigned __int8 *)(qword_254A5F9C8 + 72);
    v30 = sub_20E8C31DC(qword_254A5F9C8, "OSLogSurrogateAppender", 1, 0);
    v31 = v30;
    if (v29 || v30 != 0)
    {
      v106[0] = v113;
      v106[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
      v106[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
      v107 = 2;
      v108 = "unknown file";
      v109 = 78;
      v111 = 0;
      v112 = 0;
      v110 = "unknown function";
      v33 = *v106[0];
      if (*(char *)(*v106[0] + 39) < 0)
      {
        v35 = *(const char **)(v33 + 16);
        v34 = *(_QWORD *)(v33 + 24);
        v105 = *v106[0] + 16;
        v49 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v49 & 1) != 0)
          goto LABEL_45;
      }
      else
      {
        v34 = *(unsigned __int8 *)(*v106[0] + 39);
        v35 = (const char *)(*v106[0] + 16);
        v105 = (uint64_t)v35;
        v36 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v36 & 1) != 0)
          goto LABEL_45;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&object);
        sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
        if ((_BYTE)v126 && SHIBYTE(v125) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_45:
      if (byte_254A4A50F >= 0)
        v50 = (const char *)&xmmword_254A4A4F8;
      else
        v50 = (const char *)xmmword_254A4A4F8;
      if (byte_254A4A50F >= 0)
        v51 = byte_254A4A50F;
      else
        v51 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
      object = os_log_create(v50, v35);
      v52 = &v125;
      if (v51 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v51 >= 0x17)
      {
        v53 = v31;
        v54 = v35;
        v55 = v33;
        v56 = v29;
        v57 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v51 | 7) != 0x17)
          v57 = v51 | 7;
        v58 = v57 + 1;
        v52 = (__int128 *)operator new(v57 + 1);
        *((_QWORD *)&v125 + 1) = v51;
        *(_QWORD *)&v126 = v58 | 0x8000000000000000;
        *(_QWORD *)&v125 = v52;
        v29 = v56;
        v33 = v55;
        v35 = v54;
        v31 = v53;
      }
      else
      {
        BYTE7(v126) = v51;
        if (!v51)
        {
LABEL_59:
          *((_BYTE *)v52 + v51) = 0;
          BYTE8(v126) = 1;
          v59 = __p;
          if (v34 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v34 >= 0x17)
          {
            v60 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v34 | 7) != 0x17)
              v60 = v34 | 7;
            v61 = v60 + 1;
            v59 = operator new(v60 + 1);
            __p[1] = (void *)v34;
            v128 = v61 | 0x8000000000000000;
            __p[0] = v59;
          }
          else
          {
            HIBYTE(v128) = v34;
            if (!v34)
              goto LABEL_67;
          }
          memmove(v59, v35, v34);
LABEL_67:
          *((_BYTE *)v59 + v34) = 0;
          v129 = 1;
          v62 = object;
          if (SHIBYTE(v128) < 0)
            operator delete(__p[0]);
          if (BYTE8(v126) && SBYTE7(v126) < 0)
            operator delete((void *)v125);
          if (object)
            os_release(object);
          if (v31 && *(_QWORD *)(v31 + 24))
          {
            v63 = _os_log_pack_size();
            v64 = (std::__shared_weak_count_vtbl *)operator new(v63, (std::align_val_t)8uLL);
            v65 = (std::__shared_weak_count *)operator new();
            v66 = v65;
            v65->__shared_owners_ = 0;
            v67 = (unint64_t *)&v65->__shared_owners_;
            v65->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v65->__shared_weak_owners_ = 0;
            v65[1].__vftable = v64;
            object = v64;
            *(_QWORD *)&v125 = v64;
            *((_QWORD *)&v125 + 1) = v65;
            do
              v68 = __ldxr(v67);
            while (__stxr(v68 + 1, v67));
            v126 = 0uLL;
            __p[0] = 0;
            do
              v69 = __ldaxr(v67);
            while (__stlxr(v69 - 1, v67));
            if (!v69)
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v66);
            }
            v70 = object;
            v71 = (_DWORD *)_os_log_pack_fill();
            *v71 = 67109120;
            v71[1] = v24;
            v72 = operator new();
            v73 = *(unsigned __int8 *)(v33 + 39);
            v74 = v105;
            if ((v73 & 0x80u) != 0)
            {
              v74 = *(_QWORD *)(v33 + 16);
              v73 = *(_QWORD *)(v33 + 24);
            }
            *(_QWORD *)v72 = v70;
            *(_OWORD *)(v72 + 8) = v125;
            v125 = 0uLL;
            *(_OWORD *)(v72 + 24) = v126;
            v126 = 0uLL;
            *(_QWORD *)(v72 + 40) = v74;
            *(_QWORD *)(v72 + 48) = v73;
            *(_BYTE *)(v72 + 56) = 2;
            v122 = 0;
            v123 = v72;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v31 + 24) + 40))(*(_QWORD *)(v31 + 24), &v123);
            v75 = v123;
            v123 = 0;
            if (v75)
            {
              v76 = *(std::__shared_weak_count **)(v75 + 32);
              if (v76)
              {
                v77 = (unint64_t *)&v76->__shared_owners_;
                do
                  v78 = __ldaxr(v77);
                while (__stlxr(v78 - 1, v77));
                if (!v78)
                {
                  ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                  std::__shared_weak_count::__release_weak(v76);
                }
              }
              v79 = *(std::__shared_weak_count **)(v75 + 16);
              if (v79)
              {
                v80 = (unint64_t *)&v79->__shared_owners_;
                do
                  v81 = __ldaxr(v80);
                while (__stlxr(v81 - 1, v80));
                if (!v81)
                {
                  ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                  std::__shared_weak_count::__release_weak(v79);
                }
              }
              MEMORY[0x212BC6398](v75, 0x10F0C40B62ED6C6);
              v82 = v122;
              v122 = 0;
              if (v82)
              {
                v83 = *(std::__shared_weak_count **)(v82 + 32);
                if (v83)
                {
                  v84 = (unint64_t *)&v83->__shared_owners_;
                  do
                    v85 = __ldaxr(v84);
                  while (__stlxr(v85 - 1, v84));
                  if (!v85)
                  {
                    ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                    std::__shared_weak_count::__release_weak(v83);
                  }
                }
                v86 = *(std::__shared_weak_count **)(v82 + 16);
                if (v86)
                {
                  v87 = (unint64_t *)&v86->__shared_owners_;
                  do
                    v88 = __ldaxr(v87);
                  while (__stlxr(v88 - 1, v87));
                  if (!v88)
                  {
                    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                    std::__shared_weak_count::__release_weak(v86);
                  }
                }
                MEMORY[0x212BC6398](v82, 0x10F0C40B62ED6C6);
              }
            }
            v89 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
            if (*((_QWORD *)&v126 + 1))
            {
              v90 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
              do
                v91 = __ldaxr(v90);
              while (__stlxr(v91 - 1, v90));
              if (!v91)
              {
                ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                std::__shared_weak_count::__release_weak(v89);
              }
            }
            v92 = (std::__shared_weak_count *)*((_QWORD *)&v125 + 1);
            if (*((_QWORD *)&v125 + 1))
            {
              v93 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 - 1, v93));
              if (!v94)
              {
                ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                std::__shared_weak_count::__release_weak(v92);
              }
            }
          }
          else
          {
            os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG);
            LODWORD(object) = 67109120;
            HIDWORD(object) = v24;
            v95 = (void *)_os_log_send_and_compose_impl();
            if (v95)
              free(v95);
          }
          if (v29)
          {
            sub_20E8C003C((uint64_t)v106, "Unable to add reference object, err %d", v24);
            sub_20E863570((uint64_t)v106);
          }
          sub_20E863570((uint64_t)v106);
          v96 = v112;
          if (v112)
          {
            v97 = (unint64_t *)&v112->__shared_owners_;
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
            }
          }
          goto LABEL_126;
        }
      }
      memmove(v52, v50, v51);
      goto LABEL_59;
    }
  }
LABEL_126:
  if (v24 < 4)
  {
    v37 = dword_210379570[v24 - 1];
    v48 = v114;
    if (!v114)
      goto LABEL_134;
LABEL_130:
    v99 = (unint64_t *)&v48->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
    goto LABEL_134;
  }
  v37 = 7;
  v48 = v114;
  if (v114)
    goto LABEL_130;
LABEL_134:
  v101 = v116;
  if (v116)
  {
    v102 = (unint64_t *)&v116->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
LABEL_139:
  kdebug_trace();
  return v37;
}

void sub_20EDFAF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,int a32,__int16 a33,char a34,char a35,void *__p,void *a37,int a38,__int16 a39,char a40,char a41,char a42,int a43,__int16 a44,char a45,char a46)
{
  if (a42)
  {
    if (a41 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a12);
  sub_20E86665C((uint64_t)&a22);
  sub_20E86665C((uint64_t)&a24);
  sub_20E8E69C4((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20EDFB0F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  VTPixelTransferSessionRef *v24;
  VTPixelTransferSessionRef v25;
  void *__p[2];
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  uint64_t v34[4];
  unsigned int v35;
  char v36;
  unsigned int v37[2];

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 1952) = v4;
  v7 = *(std::__shared_weak_count **)(a1 + 1960);
  *(_QWORD *)(a1 + 1960) = v3;
  if (!v7)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v10 = *(__int128 **)(a1 + 1952);
    if ((*((char *)v10 + 23) & 0x80000000) == 0)
      goto LABEL_9;
  }
  else
  {
LABEL_8:
    v10 = *(__int128 **)(a1 + 1952);
    if ((*((char *)v10 + 23) & 0x80000000) == 0)
    {
LABEL_9:
      v11 = *v10;
      v27 = *((_QWORD *)v10 + 2);
      *(_OWORD *)__p = v11;
      goto LABEL_12;
    }
  }
  sub_20E860C04(__p, *(void **)v10, *((_QWORD *)v10 + 1));
LABEL_12:
  v12 = *(__int128 *)((char *)v10 + 24);
  v29 = *(__int128 *)((char *)v10 + 40);
  v28 = v12;
  v13 = *(__int128 *)((char *)v10 + 56);
  v14 = *(__int128 *)((char *)v10 + 72);
  v15 = *(__int128 *)((char *)v10 + 88);
  v33 = *((_DWORD *)v10 + 26);
  v32 = v15;
  v31 = v14;
  v30 = v13;
  if (*(_BYTE *)(a1 + 2032))
  {
    v16 = *(std::__shared_weak_count **)(a1 + 2024);
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    *(_BYTE *)(a1 + 2032) = 0;
  }
  HIBYTE(v34[2]) = 16;
  strcpy((char *)v34, "ODT_DETECTOR_RPN");
  v37[0] = v30;
  v37[1] = DWORD2(v29);
  v35 = 16;
  v36 = 1;
  sub_21015B690((std::__shared_weak_count_vtbl **)(a1 + 2016), v37, 0x42475241u, v34, 1u, &v35);
  if (SHIBYTE(v34[2]) < 0)
  {
    operator delete((void *)v34[0]);
    *(_BYTE *)(a1 + 2032) = 1;
    v24 = (VTPixelTransferSessionRef *)(a1 + 2040);
    if (!*(_BYTE *)(a1 + 2056))
      goto LABEL_26;
  }
  else
  {
    *(_BYTE *)(a1 + 2032) = 1;
    v24 = (VTPixelTransferSessionRef *)(a1 + 2040);
    if (!*(_BYTE *)(a1 + 2056))
      goto LABEL_26;
  }
  v25 = *v24;
  *v24 = 0;
  if (v25)
    (*(void (**)(VTPixelTransferSessionRef, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 2048))(v25, v19, v20, v21, v22, v23);
  *(_BYTE *)(a1 + 2056) = 0;
LABEL_26:
  sub_210106388(v24);
  *(_BYTE *)(a1 + 2056) = 1;
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
}

void sub_20EDFB308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EDFB354(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  __int128 *v13;
  __int128 *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  char **v39;
  char **v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  size_t v54;
  char *v55;
  char *v56;
  __int128 v57;
  char *v58;
  char *v59;
  void *v60;
  void *v61;
  char *v62;
  char *v63;
  void *v64;
  void *v65;
  char *v66;
  char *v67;
  void *v68;
  char *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  void *v83;
  void *v84;
  void *__p[2];
  uint64_t v86;
  void *v87;
  void *v88;
  char *v89;
  __int128 v90;
  unint64_t v91;
  void *v92;
  _BYTE *v93;
  void *v94;
  _BYTE *v95;
  void *v96;
  void *v97;
  void *v98;
  _BYTE *v99;
  char v100;
  _OWORD v101[5];
  std::__shared_weak_count *v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  char v106;

  sub_20EDBBA38(a2, 0x10uLL, 0x10uLL, (uint64_t)&v90);
  v8 = operator new();
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 104) = 0;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 120) = &off_24C9E9888;
  *(_DWORD *)(v8 + 128) = 1234;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_QWORD *)(v8 + 200) = v8 + 200;
  *(_QWORD *)(v8 + 208) = v8 + 200;
  *(_QWORD *)(v8 + 216) = 0;
  *(_QWORD *)(v8 + 224) = 0;
  *(_QWORD *)(v8 + 232) = 0;
  *(_QWORD *)(v8 + 240) = 68;
  *(_QWORD *)(v8 + 224) = v8 + 200;
  *(_OWORD *)(v8 + 136) = xmmword_210378590;
  *(_OWORD *)(v8 + 152) = xmmword_2103785A0;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 8;
  v9 = *(_QWORD **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v8;
  if (v9)
  {
    v10 = sub_20EDB6628(v9);
    MEMORY[0x212BC6398](v10, 0x10B0C404CA194E4);
  }
  if (v100)
  {
    v11 = v95 - (_BYTE *)v94;
    if (v95 == v94)
      goto LABEL_13;
    if (v11 != v99 - (_BYTE *)v98)
      goto LABEL_13;
    v12 = (v93 - (_BYTE *)v92) >> 5;
    if (v12 != v11 >> 6)
      goto LABEL_13;
  }
  else
  {
    if (v98 != v99)
      goto LABEL_13;
    v12 = (v93 - (_BYTE *)v92) >> 5;
    if (v12 != (v95 - (_BYTE *)v94) >> 6)
      goto LABEL_13;
  }
  if (v91 <= v12)
  {
    v87 = 0;
    v88 = 0;
    v89 = 0;
    if (!v12)
      goto LABEL_17;
    goto LABEL_15;
  }
LABEL_13:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v12 = (v93 - (_BYTE *)v92) >> 5;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  if (v12)
  {
LABEL_15:
    if (v12 >> 62)
      sub_20EABADD4();
    v87 = operator new(4 * v12);
    v89 = (char *)v87 + 4 * v12;
    bzero(v87, 4 * v12);
    v88 = v89;
  }
LABEL_17:
  sub_20F4263C4(*(_QWORD *)(a1 + 200), &v90, (char **)&v87, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 48), 0, 0.0);
  v13 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v86 = 0;
  if (*(_QWORD *)(a1 + 1952))
  {
    v14 = 0;
    if (*a3)
    {
      kdebug_trace();
      sub_210106B00((CVPixelBufferPoolRef *)(a1 + 2016), (OpaqueVTPixelTransferSession **)(a1 + 2040), a3, (uint64_t)&v104);
      kdebug_trace();
      if (!v106
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/TrackerObject3d.cpp", 685, (uint64_t)"cv_image_data_owner_bgra", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      sub_210107D4C(&v104, 1, (uint64_t)v101);
      sub_20E8E59D0((uint64_t)&v78, (unsigned __int8 *)v101);
      v15 = v103;
      if (v103)
      {
        p_shared_owners = (unint64_t *)&v103->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = v102;
      if (v102)
      {
        v19 = (unint64_t *)&v102->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (v106)
      {
        v21 = v105;
        if (v105)
        {
          v22 = (unint64_t *)&v105->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      sub_20EDBBD18((uint64_t *)(a1 + 1952), (uint64_t)&v78, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 48), (void **)v101);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      *(_OWORD *)__p = v101[0];
      v86 = *(_QWORD *)&v101[1];
      v78 = &off_24C9AFD78;
      if (v83)
      {
        v84 = v83;
        operator delete(v83);
      }
      v24 = v82;
      if (v82)
      {
        v25 = (unint64_t *)&v82->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = v81;
      if (v81)
      {
        v28 = (unint64_t *)&v81->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v14 = (__int128 *)__p[0];
      v13 = (__int128 *)__p[1];
    }
  }
  else
  {
    v14 = 0;
  }
  v78 = 0;
  v79 = 0;
  v80 = 0;
  sub_20EDB886C((char **)&v78, v14, v13, 0xCCCCCCCCCCCCCCCDLL * (((char *)v13 - (char *)v14) >> 3));
  sub_20EDBC028((float **)&v78, (uint64_t)&v90, (char **)v101);
  v30 = (void **)(a1 + 1992);
  v31 = *(_QWORD *)(a1 + 1992);
  if (v31)
  {
    v32 = *(_QWORD *)(a1 + 2000);
    v33 = *(void **)(a1 + 1992);
    if (v32 != v31)
    {
      v34 = *(_QWORD *)(a1 + 2000);
      do
      {
        v36 = *(void **)(v34 - 24);
        v34 -= 24;
        v35 = v36;
        if (v36)
        {
          *(_QWORD *)(v32 - 16) = v35;
          operator delete(v35);
        }
        v32 = v34;
      }
      while (v34 != v31);
      v33 = *v30;
    }
    *(_QWORD *)(a1 + 2000) = v31;
    operator delete(v33);
    *v30 = 0;
    *(_QWORD *)(a1 + 2000) = 0;
    *(_QWORD *)(a1 + 2008) = 0;
  }
  v37 = *(_QWORD *)&v101[0];
  *(_QWORD *)(a1 + 1992) = *(_QWORD *)&v101[0];
  v38 = *((_QWORD *)&v101[0] + 1);
  *(_OWORD *)(a1 + 2000) = *(_OWORD *)((char *)v101 + 8);
  sub_20EDFBD4C(v101, 0xAAAAAAAAAAAAAAABLL * ((v38 - v37) >> 3));
  v39 = *(char ***)(a1 + 1992);
  v40 = *(char ***)(a1 + 2000);
  v41 = *(char **)&v101[0];
  if (v39 == v40)
  {
    v42 = *(char **)&v101[0];
  }
  else
  {
    do
    {
      v43 = v39[1];
      v44 = v43 - *v39;
      if ((unint64_t)v44 >= 0xF9)
      {
        if (v39 != (char **)v41)
          sub_20E86811C(v41, *v39, v43, v44 >> 3);
        v41 += 24;
      }
      v39 += 3;
    }
    while (v39 != v40);
    v42 = *(char **)&v101[0];
  }
  v45 = v41 - v42;
  v46 = 0xAAAAAAAAAAAAAAABLL * ((v41 - v42) >> 3);
  v47 = (char *)*((_QWORD *)&v101[0] + 1);
  v48 = *((_QWORD *)&v101[0] + 1) - (_QWORD)v42;
  v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v101[0] + 1) - (_QWORD)v42) >> 3);
  if (v46 <= v49)
  {
    if (v46 < v49)
    {
      v62 = &v42[24 * v46];
      if (*((char **)&v101[0] + 1) != v62)
      {
        v63 = (char *)*((_QWORD *)&v101[0] + 1);
        do
        {
          v65 = (void *)*((_QWORD *)v63 - 3);
          v63 -= 24;
          v64 = v65;
          if (v65)
          {
            *((_QWORD *)v47 - 2) = v64;
            operator delete(v64);
          }
          v47 = v63;
        }
        while (v63 != v62);
      }
      *((_QWORD *)&v101[0] + 1) = v62;
    }
  }
  else if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v101[1] - *((_QWORD *)&v101[0] + 1)) >> 3) >= v46 - v49)
  {
    bzero(*((void **)&v101[0] + 1), 24 * ((v45 - v48 - 24) / 0x18uLL) + 24);
    *((_QWORD *)&v101[0] + 1) = &v47[24 * ((v45 - v48 - 24) / 0x18uLL) + 24];
  }
  else
  {
    if (v46 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v101[1] - (_QWORD)v42) >> 3) > v46)
      v46 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v101[1] - (_QWORD)v42) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v101[1] - (_QWORD)v42) >> 3) >= 0x555555555555555)
      v50 = 0xAAAAAAAAAAAAAAALL;
    else
      v50 = v46;
    if (v50 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v51 = (char *)operator new(24 * v50);
    v52 = &v51[8 * ((v47 - v42) >> 3)];
    v53 = &v51[24 * v50];
    v54 = 24 * ((v45 - v48 - 24) / 0x18uLL) + 24;
    bzero(v52, v54);
    v55 = &v52[v54];
    if (v47 == v42)
    {
      *(_QWORD *)&v101[0] = v52;
      *((_QWORD *)&v101[0] + 1) = &v52[v54];
      *(_QWORD *)&v101[1] = v53;
    }
    else
    {
      do
      {
        v56 = v52;
        *((_QWORD *)v52 - 2) = 0;
        *((_QWORD *)v52 - 1) = 0;
        v57 = *(_OWORD *)(v47 - 24);
        v47 -= 24;
        *(_OWORD *)(v52 - 24) = v57;
        v52 -= 24;
        *((_QWORD *)v56 - 1) = *((_QWORD *)v47 + 2);
        *(_QWORD *)v47 = 0;
        *((_QWORD *)v47 + 1) = 0;
        *((_QWORD *)v47 + 2) = 0;
      }
      while (v47 != v42);
      v58 = (char *)*((_QWORD *)&v101[0] + 1);
      v42 = *(char **)&v101[0];
      *(_QWORD *)&v101[0] = v52;
      *((_QWORD *)&v101[0] + 1) = v55;
      *(_QWORD *)&v101[1] = v53;
      if (v58 != v42)
      {
        v59 = v58;
        do
        {
          v61 = (void *)*((_QWORD *)v59 - 3);
          v59 -= 24;
          v60 = v61;
          if (v61)
          {
            *((_QWORD *)v58 - 2) = v60;
            operator delete(v60);
          }
          v58 = v59;
        }
        while (v59 != v42);
      }
    }
    if (v42)
      operator delete(v42);
  }
  v66 = (char *)*v30;
  if (*v30)
  {
    v67 = *(char **)(a1 + 2000);
    v68 = *v30;
    if (v67 != v66)
    {
      v69 = *(char **)(a1 + 2000);
      do
      {
        v71 = (void *)*((_QWORD *)v69 - 3);
        v69 -= 24;
        v70 = v71;
        if (v71)
        {
          *((_QWORD *)v67 - 2) = v70;
          operator delete(v70);
        }
        v67 = v69;
      }
      while (v69 != v66);
      v68 = *v30;
    }
    *(_QWORD *)(a1 + 2000) = v66;
    operator delete(v68);
    *v30 = 0;
    *(_QWORD *)(a1 + 2000) = 0;
    *(_QWORD *)(a1 + 2008) = 0;
  }
  *(_OWORD *)v30 = v101[0];
  *(_QWORD *)(a1 + 2008) = *(_QWORD *)&v101[1];
  memset(v101, 0, 24);
  if (*a4)
  {
    sub_20EDB85A0(*a4, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 48), (uint64_t)&v90, (__int128 **)__p, (__int128 **)&v78);
    v72 = *(_QWORD *)&v101[0];
    if (*(_QWORD *)&v101[0])
    {
      v73 = *((_QWORD *)&v101[0] + 1);
      v74 = *(void **)&v101[0];
      if (*((_QWORD *)&v101[0] + 1) != *(_QWORD *)&v101[0])
      {
        v75 = *((_QWORD *)&v101[0] + 1);
        do
        {
          v77 = *(void **)(v75 - 24);
          v75 -= 24;
          v76 = v77;
          if (v77)
          {
            *(_QWORD *)(v73 - 16) = v76;
            operator delete(v76);
          }
          v73 = v75;
        }
        while (v75 != v72);
        v74 = *(void **)&v101[0];
      }
      *((_QWORD *)&v101[0] + 1) = v72;
      operator delete(v74);
    }
  }
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v98)
  {
    v99 = v98;
    operator delete(v98);
  }
  if (v96)
  {
    v97 = v96;
    operator delete(v96);
  }
  if (v94)
  {
    v95 = v94;
    operator delete(v94);
  }
  if (v92)
  {
    v93 = v92;
    operator delete(v92);
  }
}

void sub_20EDFBC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  void *v35;

  sub_20E869AA8(v33 - 112);
  if (__p)
  {
    operator delete(__p);
    v35 = a30;
    if (!a30)
    {
LABEL_3:
      sub_20EDB4D8C(&a33);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v35 = a30;
    if (!a30)
      goto LABEL_3;
  }
  operator delete(v35);
  sub_20EDB4D8C(&a33);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EDFBD4C(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_20EDFBDF4(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EDFBE4C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _BYTE *a5)
{
  double *v10;
  char *v11;
  char *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void *v51;
  _QWORD *v52;
  void *v53;
  _QWORD *i;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float v69;
  unint64_t v70;
  __int128 *v71;
  int v72;
  float v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  uint64_t *v82;
  int8x8_t v83;
  unint64_t v84;
  uint8x8_t v85;
  unint64_t v86;
  uint64_t **v87;
  uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char *v93;
  void *__p[4];
  int v95;
  char *v96;
  __int128 v97;
  char *v98;
  __int128 v99;
  uint64_t v100;
  char v101;
  __int128 v102;
  __int128 v103;
  int v104;
  uint64_t v105;

  v105 = *MEMORY[0x24BDAC8D0];
  v102 = 0u;
  v103 = 0u;
  v104 = 733222068;
  kdebug_trace();
  v100 = *(_QWORD *)(a1 + 664);
  v101 = 1;
  v98 = 0;
  v99 = 0uLL;
  v10 = (double *)(a2 + 504);
  if (!*(_BYTE *)(a3 + 96))
  {
    v48 = *(_QWORD *)(a2 + 1824);
    v49 = *(_QWORD *)(*(_QWORD *)(a1 + 200) + 24);
    memset(__p, 0, sizeof(__p));
    v95 = 1065353216;
    sub_20EDC2BD4(v48, v49, v10, (uint64_t *)(a1 + 1992), __p, (uint64_t)&v100, (uint64_t)&v96);
    v50 = __p[2];
    v11 = v96;
    v93 = (char *)v97;
    v99 = v97;
    v98 = v96;
    v96 = 0;
    v97 = 0uLL;
    if (__p[2])
    {
      do
      {
        v52 = (_QWORD *)*v50;
        v53 = (void *)v50[3];
        if (v53)
        {
          v50[4] = v53;
          operator delete(v53);
        }
        operator delete(v50);
        v50 = v52;
      }
      while (v52);
    }
    v51 = __p[0];
    __p[0] = 0;
    if (v51)
      operator delete(v51);
    v42 = v93;
    if (v11 != v93)
      goto LABEL_6;
LABEL_12:
    v47 = 0;
    if (!v11)
      goto LABEL_74;
    goto LABEL_67;
  }
  sub_20EDC3AE4(*(_QWORD *)(a2 + 1824), *(__int128 **)(*(_QWORD *)(a1 + 200) + 24), (uint64_t)v10, (double *)a3, (uint64_t *)(a1 + 1992), (uint64_t)&v100, (double **)__p);
  v11 = (char *)__p[0];
  v98 = (char *)__p[0];
  v99 = *(_OWORD *)&__p[1];
  v12 = (char *)__p[1];
  if (__p[0] == __p[1])
  {
    v47 = 0;
    v42 = (char *)__p[0];
    if (!__p[0])
      goto LABEL_74;
    goto LABEL_67;
  }
  do
  {
    if (!*(_BYTE *)(a3 + 96))
      sub_20E866B34();
    v13 = *(double *)(a3 + 8);
    v14 = *((double *)v11 + 1);
    v16 = *((double *)v11 + 4);
    v15 = *((double *)v11 + 5);
    v18 = *((double *)v11 + 8);
    v17 = *((double *)v11 + 9);
    v19 = *(double *)(a3 + 16);
    v20 = *(double *)v11 * *(double *)a3 + v16 * v13 + v18 * v19;
    v21 = *(double *)a3 * v14 + v13 * v15 + v19 * v17;
    v22 = *((double *)v11 + 2);
    v23 = *((double *)v11 + 3);
    v24 = *((double *)v11 + 10);
    v25 = *((double *)v11 + 11);
    v26 = *((double *)v11 + 6);
    v27 = *((double *)v11 + 7);
    v28 = *(double *)a3 * v22 + v19 * v24 + v13 * v26;
    v29 = *(double *)(a3 + 24) + *(double *)a3 * v23 + v19 * v25 + v13 * v27;
    v30 = *(double *)(a3 + 32);
    v31 = *(double *)(a3 + 40);
    v32 = *(double *)(a3 + 48);
    v33 = *(double *)v11 * v30 + v16 * v31 + v18 * v32;
    v34 = v14 * v30 + v15 * v31 + v17 * v32;
    v35 = v26 * v31 + v22 * v30 + v24 * v32;
    v36 = v27 * v31 + v25 * v32 + v23 * v30 + *(double *)(a3 + 56);
    v37 = *(double *)(a3 + 64);
    v38 = *(double *)(a3 + 72);
    v39 = *(double *)(a3 + 80);
    v40 = *(double *)(a3 + 88);
    v41 = *(double *)v11 * v37 + v18 * v39 + v16 * v38;
    *(double *)v11 = v20;
    *((double *)v11 + 1) = v21;
    *((double *)v11 + 2) = v28;
    *((double *)v11 + 3) = v29;
    *((double *)v11 + 4) = v33;
    *((double *)v11 + 5) = v34;
    *((double *)v11 + 6) = v35;
    *((double *)v11 + 7) = v36;
    *((double *)v11 + 8) = v41;
    *((double *)v11 + 9) = v14 * v37 + v17 * v39 + v15 * v38;
    *((double *)v11 + 10) = v22 * v37 + v24 * v39 + v26 * v38;
    *((double *)v11 + 11) = v27 * v38 + v23 * v37 + v25 * v39 + v40;
    v11 += 320;
  }
  while (v11 != v12);
  v11 = v98;
  v42 = (char *)v99;
  if (v98 == (char *)v99)
    goto LABEL_12;
LABEL_6:
  v43 = *((_OWORD *)v11 + 1);
  *a4 = *(_OWORD *)v11;
  a4[1] = v43;
  v44 = *((_OWORD *)v11 + 2);
  v45 = *((_OWORD *)v11 + 3);
  v46 = *((_OWORD *)v11 + 5);
  a4[4] = *((_OWORD *)v11 + 4);
  a4[5] = v46;
  a4[2] = v44;
  a4[3] = v45;
  *a5 = v11[112];
  if (*(_BYTE *)(a3 + 96))
  {
    v47 = 1;
LABEL_67:
    if (v42 != v11)
    {
      do
      {
        if (*(v42 - 8))
          sub_20E9DF08C((uint64_t)(v42 - 200));
        v42 -= 320;
      }
      while (v42 != v11);
      v42 = v98;
    }
    operator delete(v42);
    goto LABEL_74;
  }
  if (v11[312])
  {
    for (i = *(_QWORD **)(a2 + 1880); i; i = (_QWORD *)*i)
      *(_DWORD *)(i[3] + 48) = -1;
    if ((char *)(a2 + 1904) != v11 + 288)
      sub_20EDC8188((_QWORD *)(a2 + 1904), *((char **)v11 + 36), *((char **)v11 + 37), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v11 + 37) - *((_QWORD *)v11 + 36)) >> 3));
    v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 1912) - *(_QWORD *)(a2 + 1904)) >> 3);
    v56 = *(_QWORD *)(a2 + 1928);
    v57 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a2 + 1936) - v56) >> 3);
    if (v55 <= v57)
    {
      if (v55 < v57)
        *(_QWORD *)(a2 + 1936) = v56
                               - 0x5555555555555538
                               * ((uint64_t)(*(_QWORD *)(a2 + 1912) - *(_QWORD *)(a2 + 1904)) >> 3);
    }
    else
    {
      sub_20EDFEB54((void **)(a2 + 1928), v55 - v57);
      v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 1912) - *(_QWORD *)(a2 + 1904)) >> 3);
    }
    v58 = *(char **)(a2 + 1960);
    v59 = *(char **)(a2 + 1952);
    v60 = (v58 - v59) >> 3;
    if (v55 <= v60)
    {
      if (v55 < v60)
      {
        v58 = &v59[8 * v55];
        *(_QWORD *)(a2 + 1960) = v58;
      }
    }
    else
    {
      sub_20EDFEE0C((void **)(a2 + 1952), v55 - v60);
      v59 = *(char **)(a2 + 1952);
      v58 = *(char **)(a2 + 1960);
    }
    if (v59 != v58)
      bzero(v59, (v58 - v59) & 0xFFFFFFFFFFFFFFF8);
    v61 = *(_QWORD *)(a2 + 1928);
    if (*(_QWORD *)(a2 + 1936) != v61)
    {
      v62 = 0;
      v63 = (uint64_t *)(a2 + 1848);
      v64 = *(_QWORD *)(a2 + 1904);
      do
      {
        v66 = *(unsigned int *)(v64 + 24 * v62 + 16);
        v67 = *(_QWORD *)(*(_QWORD *)(a1 + 200) + 24);
        v68 = *(_QWORD *)(v67 + 56) + 32 * v66;
        v69 = *(float *)(a1 + 784);
        v70 = (int)((float)(*(float *)v68 * v69) + 0.5) | ((unint64_t)(int)((float)(v69 * *(float *)(v68 + 4)) + 0.5) << 32);
        v71 = (__int128 *)(*(_QWORD *)(v67 + 80) + (v66 << 6));
        v72 = *(_DWORD *)(v68 + 16);
        v73 = v69 * *(float *)(v68 + 20);
        LOBYTE(v67) = *(_BYTE *)(v68 + 24);
        v75 = v71[2];
        v74 = v71[3];
        v77 = *v71;
        v76 = v71[1];
        v78 = v61 + 88 * v62;
        *(_QWORD *)v78 = v70;
        *(_OWORD *)(v78 + 8) = v77;
        *(_OWORD *)(v78 + 24) = v76;
        *(_OWORD *)(v78 + 40) = v75;
        *(_OWORD *)(v78 + 56) = v74;
        *(_BYTE *)(v78 + 72) = v67;
        *(_DWORD *)(v78 + 76) = v72;
        *(float *)(v78 + 80) = v73;
        *(_DWORD *)(v78 + 84) = 220;
        v64 = *(_QWORD *)(a2 + 1904);
        v79 = *v63;
        if (*v63)
        {
          v80 = *(double *)(v64 + 24 * v62);
          v81 = a2 + 1848;
          do
          {
            v82 = (uint64_t *)(v79 + 8);
            if (*(double *)(v79 + 32) >= v80)
            {
              v82 = (uint64_t *)v79;
              v81 = v79;
            }
            v79 = *v82;
          }
          while (*v82);
          if ((uint64_t *)v81 != v63 && v80 >= *(double *)(v81 + 32))
          {
            v83 = *(int8x8_t *)(a2 + 1872);
            if (v83)
            {
              v84 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v81 + 40) + 176)
                                    + 12 * *(unsigned int *)(v64 + 24 * v62 + 8)
                                    + 8);
              v85 = (uint8x8_t)vcnt_s8(v83);
              v85.i16[0] = vaddlv_u8(v85);
              if (v85.u32[0] > 1uLL)
              {
                v86 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v81 + 40) + 176)
                                      + 12 * *(unsigned int *)(v64 + 24 * v62 + 8)
                                      + 8);
                if (*(_QWORD *)&v83 <= v84)
                  v86 = v84 % *(_QWORD *)&v83;
              }
              else
              {
                v86 = (v83.i32[0] - 1) & v84;
              }
              v87 = *(uint64_t ***)(*(_QWORD *)(a2 + 1864) + 8 * v86);
              if (v87)
              {
                v88 = *v87;
                if (v88)
                {
                  if (v85.u32[0] < 2uLL)
                  {
                    v89 = *(_QWORD *)&v83 - 1;
                    while (1)
                    {
                      v91 = v88[1];
                      if (v91 == v84)
                      {
                        if (*((_DWORD *)v88 + 4) == (_DWORD)v84)
                          goto LABEL_36;
                      }
                      else if ((v91 & v89) != v86)
                      {
                        goto LABEL_37;
                      }
                      v88 = (uint64_t *)*v88;
                      if (!v88)
                        goto LABEL_37;
                    }
                  }
                  do
                  {
                    v90 = v88[1];
                    if (v90 == v84)
                    {
                      if (*((_DWORD *)v88 + 4) == (_DWORD)v84)
                      {
LABEL_36:
                        *(_DWORD *)(v88[3] + 48) = v62;
                        v65 = (_DWORD *)(*(_QWORD *)(a2 + 1952) + 8 * v62);
                        *v65 = v84;
                        v65[1] = 0;
                        break;
                      }
                    }
                    else
                    {
                      if (v90 >= *(_QWORD *)&v83)
                        v90 %= *(_QWORD *)&v83;
                      if (v90 != v86)
                        break;
                    }
                    v88 = (uint64_t *)*v88;
                  }
                  while (v88);
                }
              }
            }
          }
        }
LABEL_37:
        ++v62;
        v61 = *(_QWORD *)(a2 + 1928);
      }
      while (v62 < 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a2 + 1936) - v61) >> 3));
    }
  }
  *(_BYTE *)(a2 + 2248) = 0;
  *(_OWORD *)(a2 + 2232) = 0u;
  *(_OWORD *)(a2 + 2216) = 0u;
  *(_OWORD *)(a2 + 2200) = 0u;
  *(_QWORD *)(a2 + 2256) = 0xBFF0000000000000;
  *(_OWORD *)(a2 + 2320) = 0u;
  *(_OWORD *)(a2 + 2336) = 0u;
  *(_OWORD *)(a2 + 2352) = 0u;
  *(_OWORD *)(a2 + 2368) = 0u;
  *(_BYTE *)(a2 + 2384) = 0;
  *(_QWORD *)(a2 + 2392) = 0xBFF0000000000000;
  v47 = 1;
  *(_QWORD *)(a2 + 2408) = 0;
  if (v11)
    goto LABEL_67;
LABEL_74:
  kdebug_trace();
  return v47;
}

void sub_20EDFC58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v13 = va_arg(va1, void *);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_20E9DEE54((void **)va);
  sub_20E8E69C4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EDFC5D4()
{
  return 0;
}

void sub_20EDFC5DC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  float v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t *v31;
  void *v32;
  uint64_t *v33;
  BOOL v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  __int128 *v53;
  char v54;
  _DWORD *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char *v60;
  void *v61;
  char *v62;
  void (***v63)(char *);
  void (**v64)(char *);
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _BYTE v71[8];
  void *v72[2];
  uint64_t v73;
  void *v74;
  char *v75;
  uint64_t v76;
  _QWORD v77[4];
  unint64_t v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  void *v82;
  void *v83;
  uint64_t v84;
  void **p_p;
  __int128 __p;
  __int128 v87;
  _BYTE v88[40];
  int64x2_t v89;
  __int128 v90;
  _BYTE v91[80];
  char v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  sub_21012188C(a2, 320, (uint64_t)v77);
  v4 = v78;
  v5 = (double)v78 / (double)*(unint64_t *)(a2 + 32);
  *(float *)(a1 + 784) = v5;
  if (!*(_BYTE *)(a1 + 788))
  {
    v6 = 0;
    v7 = v79;
    if (v4 >= 0x10 && v79 >= 0x10)
    {
      v6 = 0;
      v8 = v4;
      v9 = v79;
      do
      {
        ++v6;
        if (v8 < 0x20)
          break;
        v8 >>= 1;
        v10 = v9 > 0x1F;
        v9 >>= 1;
      }
      while (v10);
    }
    *(_DWORD *)(a1 + 792) = 0;
    *(_QWORD *)(a1 + 840) = v6;
    *(_QWORD *)(a1 + 800) = 5000;
    *(_DWORD *)(a1 + 808) = 1;
    *(_QWORD *)(a1 + 816) = 0x3F947AE140000000;
    *(_DWORD *)(a1 + 824) = v4;
    *(_DWORD *)(a1 + 828) = v7;
    *(_WORD *)(a1 + 848) = 1;
    *(_QWORD *)(a1 + 832) = 0x3FC3333333333333;
    *(_BYTE *)(a1 + 850) = 1;
    LODWORD(__p) = 0;
    BYTE4(__p) = 1;
    *((_QWORD *)&__p + 1) = 0x4120000041A00000;
    *(_QWORD *)((char *)&v87 + 4) = 0x3F96E9DD3F5425F2;
    LODWORD(v87) = 5;
    HIDWORD(v87) = 0;
    *(_WORD *)v88 = 1;
    *(_OWORD *)&v88[4] = xmmword_210378520;
    *(_DWORD *)&v88[20] = 100;
    *(_OWORD *)&v88[24] = xmmword_210378530;
    v89 = vdupq_n_s64(1uLL);
    sub_20F40B114(a1 + 952, (__int128 *)(a1 + 792), (uint64_t)&__p);
    v11 = *(_OWORD **)(a1 + 1832);
    if (v11 == *(_OWORD **)(a1 + 1840))
    {
      *(_QWORD *)&__p = v4;
      *((_QWORD *)&__p + 1) = v7;
      v87 = 0u;
      *(_OWORD *)v88 = 0u;
      v88[16] = 1;
      *(_OWORD *)&v88[24] = 0u;
      v89 = 0u;
      v90 = 0u;
      memset(v91, 0, 26);
      memset(&v91[32], 0, 48);
      v92 = 0;
      v12 = *(_QWORD *)(a1 + 1848);
      if ((unint64_t)v11 >= v12)
      {
        v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v11) >> 6);
        v19 = 2 * v18;
        if (2 * v18 <= 1)
          v19 = 1;
        if (v18 >= 0xAAAAAAAAAAAAAALL)
          v20 = 0x155555555555555;
        else
          v20 = v19;
        if (v20 > 0x155555555555555)
          sub_20E877A38();
        v21 = operator new(192 * v20);
        v22 = v87;
        *v21 = __p;
        v21[1] = v22;
        v21[2] = *(_OWORD *)v88;
        *((_BYTE *)v21 + 48) = v88[16];
        *(_OWORD *)((char *)v21 + 56) = 0u;
        *(_OWORD *)((char *)v21 + 72) = 0u;
        *(_OWORD *)((char *)v21 + 88) = 0u;
        *(_OWORD *)((char *)v21 + 104) = 0u;
        *((_QWORD *)v21 + 15) = 0;
        v23 = *(_OWORD *)&v91[40];
        v21[8] = *(_OWORD *)&v91[24];
        v21[9] = v23;
        v24 = (char *)&v21[12 * v20];
        v17 = v21 + 12;
        *((_QWORD *)v21 + 20) = 0;
        *((_QWORD *)v21 + 21) = 0;
        *((_BYTE *)v21 + 184) = 0;
        *((_QWORD *)v21 + 22) = 0;
        *(_QWORD *)(a1 + 1832) = v21;
        *(_QWORD *)(a1 + 1840) = v21 + 12;
        *(_QWORD *)(a1 + 1848) = v24;
        if (v11)
          operator delete(v11);
      }
      else
      {
        v13 = __p;
        v14 = v87;
        v15 = *(_OWORD *)v88;
        *((_BYTE *)v11 + 48) = v88[16];
        v11[1] = v14;
        v11[2] = v15;
        *v11 = v13;
        *(_OWORD *)((char *)v11 + 56) = 0uLL;
        *(_OWORD *)((char *)v11 + 72) = 0uLL;
        *(_OWORD *)((char *)v11 + 88) = 0uLL;
        *(_OWORD *)((char *)v11 + 104) = 0uLL;
        *((_QWORD *)v11 + 15) = 0;
        v16 = *(_OWORD *)&v91[40];
        v11[8] = *(_OWORD *)&v91[24];
        v11[9] = v16;
        v17 = v11 + 12;
        *((_QWORD *)v11 + 20) = 0;
        *((_QWORD *)v11 + 21) = 0;
        *((_BYTE *)v11 + 184) = 0;
        *((_QWORD *)v11 + 22) = 0;
      }
      *(_QWORD *)(a1 + 1840) = v17;
    }
    *(_BYTE *)(a1 + 788) = 1;
  }
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v25 = sub_20EDB6BB8(&v74, (uint64_t)v77);
  v26 = *(_QWORD *)(a1 + 1832);
  v27 = *(_QWORD *)(a1 + 1840);
  v75 = (char *)v25;
  __p = 0uLL;
  *(_QWORD *)&v87 = 0;
  v28 = v27 - v26;
  if (v27 == v26)
  {
    v30 = 0uLL;
  }
  else
  {
    v29 = 0xAAAAAAAAAAAAAAABLL * (v28 >> 6);
    if (v29 >> 61)
      sub_20E867F44();
    *(_QWORD *)&__p = operator new(0x5555555555555558 * (v28 >> 6));
    *((_QWORD *)&__p + 1) = __p;
    *(_QWORD *)&v87 = __p + 8 * v29;
    p_p = (void **)&__p;
    do
    {
      v84 = v26;
      sub_20EA61104(&p_p, &v84);
      v26 += 192;
    }
    while (v26 != v27);
    v30 = __p;
    v28 = v87;
  }
  *(_OWORD *)v72 = v30;
  v73 = v28;
  __p = 0uLL;
  *(_QWORD *)&v87 = 0;
  (*(void (**)(uint64_t, void **, __int128 *, void **))(*(_QWORD *)(a1 + 952) + 24))(a1 + 952, &v74, &__p, v72);
  v31 = (uint64_t *)__p;
  if ((_QWORD)__p)
  {
    v32 = (void *)__p;
    if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
    {
      v33 = (uint64_t *)(*((_QWORD *)&__p + 1) - 8);
      do
      {
        v35 = *v33;
        *v33 = 0;
        if (v35)
          sub_20E8E931C((uint64_t)v33, v35);
        v34 = v33-- == v31;
      }
      while (!v34);
      v32 = (void *)__p;
    }
    *((_QWORD *)&__p + 1) = v31;
    operator delete(v32);
  }
  LOBYTE(p_p) = 0;
  BYTE4(p_p) = 0;
  LOBYTE(v84) = 0;
  BYTE4(v84) = 0;
  v71[0] = 0;
  v71[4] = 0;
  LOBYTE(__p) = 0;
  BYTE8(__p) = 0;
  sub_20F40C328(a1 + 952, (uint64_t)v72, 0, 0, 0, (uint64_t)&p_p, (uint64_t)&v84, (uint64_t)v71, (uint64_t)&__p);
  v36 = (_QWORD *)(a1 + 1880);
  v37 = *(void **)(a1 + 1880);
  if (v37)
  {
    *(_QWORD *)(a1 + 1888) = v37;
    operator delete(v37);
    *v36 = 0;
    *(_QWORD *)(a1 + 1888) = 0;
    *(_QWORD *)(a1 + 1896) = 0;
  }
  *(_OWORD *)v36 = *(_OWORD *)(a1 + 1856);
  v38 = (_QWORD *)(a1 + 1928);
  *(_QWORD *)(a1 + 1896) = *(_QWORD *)(a1 + 1872);
  *(_QWORD *)(a1 + 1864) = 0;
  *(_QWORD *)(a1 + 1872) = 0;
  *(_QWORD *)(a1 + 1856) = 0;
  v39 = *(void **)(a1 + 1928);
  if (v39)
  {
    *(_QWORD *)(a1 + 1936) = v39;
    operator delete(v39);
    *v38 = 0;
    *(_QWORD *)(a1 + 1936) = 0;
    *(_QWORD *)(a1 + 1944) = 0;
  }
  *(_OWORD *)v38 = *(_OWORD *)(a1 + 1904);
  *(_QWORD *)(a1 + 1944) = *(_QWORD *)(a1 + 1920);
  *(_QWORD *)(a1 + 1904) = 0;
  *(_QWORD *)(a1 + 1912) = 0;
  *(_QWORD *)(a1 + 1920) = 0;
  v40 = *(_QWORD *)(a1 + 1832);
  if (!*(_BYTE *)(v40 + 184))
  {
    if (*(_QWORD *)(v40 + 160) != *(_QWORD *)(v40 + 168))
      goto LABEL_46;
    v42 = (uint64_t)(*(_QWORD *)(v40 + 64) - *(_QWORD *)(v40 + 56)) >> 5;
    if (v42 != (uint64_t)(*(_QWORD *)(v40 + 88) - *(_QWORD *)(v40 + 80)) >> 6)
      goto LABEL_46;
LABEL_45:
    if (*(_QWORD *)(v40 + 16) <= v42)
      goto LABEL_48;
    goto LABEL_46;
  }
  v41 = *(_QWORD *)(v40 + 88) - *(_QWORD *)(v40 + 80);
  if (v41)
  {
    if (v41 == *(_QWORD *)(v40 + 168) - *(_QWORD *)(v40 + 160))
    {
      v42 = (uint64_t)(*(_QWORD *)(v40 + 64) - *(_QWORD *)(v40 + 56)) >> 5;
      if (v42 == v41 >> 6)
        goto LABEL_45;
    }
  }
LABEL_46:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v42 = (uint64_t)(*(_QWORD *)(v40 + 64) - *(_QWORD *)(v40 + 56)) >> 5;
LABEL_48:
  v43 = *(_QWORD *)(a1 + 1864);
  v44 = *(_QWORD *)(a1 + 1856);
  v45 = 0x2E8BA2E8BA2E8BA3 * ((v43 - v44) >> 3);
  if (v42 <= v45)
  {
    if (v42 < v45)
    {
      v43 = v44 + 88 * v42;
      *(_QWORD *)(a1 + 1864) = v43;
    }
  }
  else
  {
    sub_20EDFEB54((void **)(a1 + 1856), v42 - v45);
    v43 = *(_QWORD *)(a1 + 1864);
    v44 = *(_QWORD *)(a1 + 1856);
  }
  if (v43 != v44)
  {
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 84;
    do
    {
      v50 = *(_QWORD *)(a1 + 1832);
      v51 = *(_QWORD *)(v50 + 56) + v47;
      v52 = (int)(*(float *)v51 + 0.5) | ((unint64_t)(int)(*(float *)(v51 + 4) + 0.5) << 32);
      v53 = (__int128 *)(*(_QWORD *)(v50 + 80) + v46);
      v54 = *(_BYTE *)(v51 + 24);
      v55 = (_DWORD *)(v44 + v49);
      v56 = *(_QWORD *)(v51 + 16);
      __p = *v53;
      v87 = v53[1];
      *(_OWORD *)v88 = v53[2];
      *(_OWORD *)&v88[16] = v53[3];
      *(_QWORD *)(v55 - 21) = v52;
      v57 = __p;
      v58 = v87;
      v59 = *(_OWORD *)v88;
      *(_OWORD *)(v55 - 7) = *(_OWORD *)&v88[16];
      *(_OWORD *)(v55 - 11) = v59;
      *(_OWORD *)(v55 - 15) = v58;
      *(_OWORD *)(v55 - 19) = v57;
      *((_BYTE *)v55 - 12) = v54;
      LOWORD(v53) = (_WORD)p_p;
      *((_BYTE *)v55 - 9) = BYTE2(p_p);
      *(_WORD *)((char *)v55 - 11) = (_WORD)v53;
      *((_QWORD *)v55 - 1) = v56;
      *v55 = 220;
      v44 = *(_QWORD *)(a1 + 1856);
      *(_DWORD *)(v44 + v49) = 100;
      ++v48;
      v49 += 88;
      v47 += 32;
      v46 += 64;
    }
    while (v48 < 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 1864) - v44) >> 3));
  }
  if (v72[0])
  {
    v72[1] = v72[0];
    operator delete(v72[0]);
  }
  v60 = (char *)v74;
  if (v74)
  {
    v61 = v74;
    if (v75 != v74)
    {
      v62 = v75 - 144;
      v63 = (void (***)(char *))(v75 - 144);
      do
      {
        v64 = *v63;
        v63 -= 18;
        (*v64)(v62);
        v34 = v62 == v60;
        v62 = (char *)v63;
      }
      while (!v34);
      v61 = v74;
    }
    v75 = v60;
    operator delete(v61);
  }
  v77[0] = &off_24C9AFD78;
  if (v82)
  {
    v83 = v82;
    operator delete(v82);
  }
  v65 = v81;
  if (v81)
  {
    p_shared_owners = (unint64_t *)&v81->__shared_owners_;
    do
      v67 = __ldaxr(p_shared_owners);
    while (__stlxr(v67 - 1, p_shared_owners));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = v80;
  if (v80)
  {
    v69 = (unint64_t *)&v80->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
}

void sub_20EDFCD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  sub_20EDB4D8C(&a37);
  sub_20E8E481C(&a17);
  _Unwind_Resume(a1);
}

void sub_20EDFCDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E8E481C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EDFCDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (__p)
    operator delete(__p);
  sub_20EDB4E30(&a14);
  sub_20E8E481C(&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_20EDFCE44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  float64x2_t v6;
  float64x2_t v7;
  _DWORD *v8;
  float v9;
  _QWORD *v10;
  void *v11;
  float64x2_t v12;
  __int128 v13;
  int8x16_t v14;
  float v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t **v21;
  unint64_t v22;
  unint64_t v23;
  float64x2_t v24;
  const double *v25;
  uint64_t *v26;
  float64x2_t v27;
  float64x2_t v28;
  uint64_t v29;
  float64x2_t v31;
  double v35;
  double v36;
  float64x2_t v37;
  float64x2_t *v38;
  char *v39;
  float64x2_t v41;
  __int16 v42;
  char *v43;
  double v44;
  double v45;
  float32x2_t *v47;
  double v48;
  double v49;
  double v50;
  float64x2_t v51;
  double v52;
  double v53;
  double v54;
  float64x2_t v55;
  double v57;
  float32x2_t v61;
  float32x2_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  double *v72;
  double v73;
  double v74;
  float64_t v75;
  float64x2_t v76;
  float64x2_t v77;
  double v80;
  _BOOL4 v81;
  double v82;
  uint64_t v83;
  uint64_t *v84;
  double v85;
  uint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  uint64_t v96;
  float64x2_t v97;
  float64x2_t v98;
  __int128 v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  float64x2_t v106;
  float64x2_t v107;
  char *v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  char *v113;
  char *v114;
  float64x2_t v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  uint8x8_t v119;
  uint64_t v120;
  int *v121;
  uint64_t *v122;
  int v123;
  _DWORD *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  int *v130;
  int v131;
  _DWORD *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  uint64_t **v138;
  unint64_t v139;
  unint64_t v140;
  float v141;
  std::__shared_weak_count *v142;
  int8x16_t v143;
  float64x2_t v144;
  std::__shared_count v145;
  __int128 v146;
  float64x2_t v147;
  unint64_t *p_shared_owners;
  char *v149;
  char *v150;
  _QWORD *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v158;
  unint64_t v159;
  float32x2_t *v161;
  float *v162;
  float64x2_t *v163;
  double v164;
  double v165;
  double v166;
  double *v167;
  _QWORD *v168;
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  uint64_t *v173;
  unsigned int *v174;
  unint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v183;
  uint64_t v184;
  int8x16_t v185;
  float64x2_t v186;
  int8x16_t v187;
  int8x16_t v188;
  __int128 v189;
  int8x16_t v190;
  double v191;
  float64x2_t v192;
  int *v193;
  uint64_t v194;
  void *v195;
  _BYTE *v196;
  uint64_t v197;
  void *v198[2];
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  void *v204;
  char *v205;
  char *v206;
  void *v207;
  char *v208;
  char *v209;
  std::__shared_weak_count *v210;
  std::__shared_weak_count *v211;
  void *__p;
  char *v213;
  char *v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  __int128 v219;
  uint64_t v220;
  float64x2x4_t v221;

  v220 = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 1976;
  if (*(_BYTE *)(a2 + 2136))
  {
    if (*(_DWORD *)(a2 + 8))
    {
LABEL_3:
      v5 = sub_20EDFE990(a1, (_QWORD *)a2, *(int ***)(a1 + 984));
      goto LABEL_9;
    }
  }
  else
  {
    sub_20EDFEFA8(a2 + 1976);
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_DWORD *)(a2 + 1992) = 1028443341;
    *(_DWORD *)(a2 + 2000) = 1;
    *(_QWORD *)(a2 + 2016) = 0;
    *(_QWORD *)(a2 + 2008) = 0;
    *(_QWORD *)(a2 + 2024) = 0;
    v8 = operator new(4uLL);
    *(_QWORD *)(a2 + 2008) = v8;
    *v8++ = 0;
    *(_QWORD *)(a2 + 2024) = v8;
    *(_QWORD *)(a2 + 2016) = v8;
    *(_QWORD *)(a2 + 2112) = 0;
    *(_QWORD *)(a2 + 2128) = 0;
    *(_QWORD *)(a2 + 2120) = 0;
    *(_OWORD *)(a2 + 2032) = 0u;
    *(_OWORD *)(a2 + 2048) = 0u;
    *(_OWORD *)(a2 + 2064) = 0u;
    *(_OWORD *)(a2 + 2080) = 0u;
    *(_OWORD *)(a2 + 2092) = 0u;
    *(_BYTE *)(a2 + 2136) = 1;
    v9 = *(double *)(a1 + 816);
    sub_20EE00E4C(v4, *(_DWORD *)(a1 + 824), *(_DWORD *)(a1 + 828), *(_QWORD *)(a1 + 800), 0x12u, v9);
    if (*(_DWORD *)(a2 + 8))
      goto LABEL_3;
  }
  v215 = 0uLL;
  v216.f64[0] = 0.0;
  sub_20EDFE10C((int *)v4, (float **)(a1 + 1856), (_QWORD *)(a2 + 1928), (uint64_t)&v215, 0, 512, 0xDCu);
  v10 = (_QWORD *)(a1 + 1928);
  v11 = *(void **)(a1 + 1928);
  if (v11)
  {
    *(_QWORD *)(a1 + 1936) = v11;
    operator delete(v11);
    *v10 = 0;
    *(_QWORD *)(a1 + 1936) = 0;
    *(_QWORD *)(a1 + 1944) = 0;
  }
  *(_OWORD *)v10 = *(_OWORD *)(a2 + 1952);
  *(_QWORD *)(a1 + 1944) = *(_QWORD *)(a2 + 1968);
  *(_QWORD *)(a2 + 1952) = 0;
  *(_QWORD *)(a2 + 1960) = 0;
  *(_QWORD *)(a2 + 1968) = 0;
  v5 = sub_20EDFE990(a1, (_QWORD *)a2, (int **)&v215);
  if (*(_QWORD *)&v215.f64[0])
  {
    v215.f64[1] = v215.f64[0];
    operator delete(*(void **)&v215.f64[0]);
  }
LABEL_9:
  if (v5 > 0x63)
    goto LABEL_130;
  v12 = *(float64x2_t *)(a2 + 520);
  v13 = *(_OWORD *)(a2 + 536);
  v14 = *(int8x16_t *)(a2 + 504);
  v15 = *(float *)(a1 + 784);
  v16 = *(_QWORD *)(a2 + 1888);
  v198[1] = 0;
  *(_QWORD *)&v199 = 0;
  v198[0] = 0;
  if (!v16)
  {
    v19 = 0;
    v18 = 0;
    v193 = (int *)v4;
    v21 = *(uint64_t ***)(a2 + 1880);
    if (v21)
      goto LABEL_15;
LABEL_60:
    v22 = 0;
    v87 = 0x4EC4EC4EC4EC4EC5 * ((v19 - v18) >> 3);
LABEL_61:
    if (v87 > v22)
    {
      v19 = &v18[104 * v22];
      v198[1] = v19;
    }
    goto LABEL_63;
  }
  v187 = v14;
  v189 = v13;
  v192 = v12;
  if (v16 >= 0x276276276276277)
    sub_20E867F44();
  v17 = (char *)operator new(104 * v16);
  v18 = v17;
  v19 = &v17[104 * v16];
  v198[0] = v17;
  *(_QWORD *)&v199 = v19;
  v20 = v17;
  do
  {
    *((_OWORD *)v20 + 4) = 0uLL;
    *((_OWORD *)v20 + 5) = 0uLL;
    *((_QWORD *)v20 + 12) = 0;
    *((_OWORD *)v20 + 2) = 0uLL;
    *((_OWORD *)v20 + 3) = 0uLL;
    *(_OWORD *)v20 = 0uLL;
    *((_OWORD *)v20 + 1) = 0uLL;
    v20[72] = 1;
    *((_DWORD *)v20 + 21) = 220;
    v20 += 104;
  }
  while (v20 != v19);
  v198[1] = &v17[104 * v16];
  v13 = v189;
  v12 = v192;
  v14 = v187;
  v193 = (int *)v4;
  v21 = *(uint64_t ***)(a2 + 1880);
  if (!v21)
    goto LABEL_60;
LABEL_15:
  v22 = 0;
  v23 = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
  *(_QWORD *)&v28.f64[0] = vextq_s8(v14, v14, 8uLL).u64[0];
  v27.f64[0] = v15 * *(double *)v14.i64;
  v12.f64[1] = *((float64_t *)&v13 + 1);
  v24 = vmulq_n_f64(v12, v15);
  v26 = (uint64_t *)(a2 + 1848);
  *(_QWORD *)&v27.f64[1] = v23;
  v28.f64[1] = v15 * *(double *)&v13;
  do
  {
    v47 = (float32x2_t *)v21[3];
    v48 = *(double *)(a2 + 96);
    v49 = *(double *)(a2 + 128);
    v50 = *(double *)(a2 + 160);
    v51 = vcvtq_f64_f32(*v47);
    v6.f64[0] = v47[1].f32[0];
    v52 = -(*(double *)(a2 + 72) * v48 + *(double *)(a2 + 104) * v49 + *(double *)(a2 + 136) * v50);
    v53 = -(v48 * *(double *)(a2 + 80) + v49 * *(double *)(a2 + 112) + v50 * *(double *)(a2 + 144));
    v54 = v48 * *(double *)(a2 + 88) + v49 * *(double *)(a2 + 120) + v50 * *(double *)(a2 + 152);
    v55.f64[0] = v52;
    v55.f64[1] = v53;
    v7.f64[0] = -v54;
    _Q16 = vsubq_f64(v55, v51);
    *(_QWORD *)&v57 = *(_OWORD *)&vsubq_f64(v7, v6);
    _Q21 = vmulq_f64(_Q16, _Q16);
    _D23 = _Q16.f64[1];
    __asm { FMLA            D21, D23, V16.D[1] }
    _Q21.f64[0] = sqrt(vmlad_n_f64(_Q21.f64[0], v57, v57));
    if (_Q21.f64[0] == 0.0)
      _Q21.f64[0] = 1.0;
    else
      _Q21.f64[0] = 1.0 / _Q21.f64[0];
    _Q23 = vmulq_f64(_Q16, _Q21);
    if (v47[1].f32[1] * _Q23.f64[0]
       + vmuld_lane_f64(_Q21.f64[0], _Q16, 1) * v47[2].f32[0]
       + _Q21.f64[0] * v57 * v47[2].f32[1] >= 0.5)
    {
      v62 = v47 + 3;
      v61 = v47[3];
      v63 = *(_QWORD *)&v62[1] - *(_QWORD *)&v61;
      if (v63)
      {
        v64 = 0;
        v65 = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u64[0];
        v66 = v63 >> 4;
        v67 = *v26;
        if (v66 <= 1)
          v68 = 1;
        else
          v68 = v66;
        LODWORD(v69) = -1;
        v70 = -1.0;
        do
        {
          if (!v67)
            goto LABEL_31;
          v82 = *(double *)(*(_QWORD *)&v61 + 16 * v64);
          v71 = a2 + 1848;
          v83 = *v26;
          do
          {
            v84 = (uint64_t *)(v83 + 8);
            if (*(double *)(v83 + 32) >= v82)
            {
              v84 = (uint64_t *)v83;
              v71 = v83;
            }
            v83 = *v84;
          }
          while (*v84);
          if ((uint64_t *)v71 == v26 || v82 < *(double *)(v71 + 32))
LABEL_31:
            v71 = a2 + 1848;
          v72 = *(double **)(v71 + 40);
          _Q23.f64[0] = v72[4];
          v73 = v72[8];
          v74 = v72[12];
          v75 = _Q23.f64[0] * v72[2] + v73 * v72[6] + v74 * v72[10];
          v76.f64[0] = -(v72[1] * _Q23.f64[0] + v72[5] * v73 + v72[9] * v74);
          _Q23.f64[0] = -(_Q23.f64[0] * v72[3] + v73 * v72[7] + v74 * v72[11]);
          v76.f64[1] = -v75;
          v77.f64[0] = v52;
          v77.f64[1] = v53;
          _Q21 = vsubq_f64(v77, v76);
          *(_QWORD *)&v77.f64[0] = *(_OWORD *)&vsubq_f64(v7, _Q23);
          _Q23 = vmulq_f64(_Q21, _Q21);
          _D24 = _Q21.f64[1];
          __asm { FMLA            D23, D24, V21.D[1] }
          v80 = sqrt(vmlad_n_f64(_Q23.f64[0], v77.f64[0], v77.f64[0]));
          v81 = v70 < 0.0;
          if (v70 > v80)
            v81 = 1;
          if (v81)
            v69 = v64;
          else
            v69 = v69;
          if (v81)
            v70 = v80;
          ++v64;
        }
        while (v64 != v68);
        if ((v69 & 0x80000000) == 0)
        {
          if (!v67)
            goto LABEL_16;
          v85 = *(double *)(*(_QWORD *)&v61 + 16 * v69);
          v29 = a2 + 1848;
          do
          {
            v86 = (uint64_t *)(v67 + 8);
            if (*(double *)(v67 + 32) >= v85)
            {
              v86 = (uint64_t *)v67;
              v29 = v67;
            }
            v67 = *v86;
          }
          while (*v86);
          if ((uint64_t *)v29 == v26 || v85 < *(double *)(v29 + 32))
LABEL_16:
            v29 = a2 + 1848;
          v25 = (const double *)(a2 + 72);
          v221 = vld4q_f64(v25);
          _Q22 = *(_OWORD *)(a2 + 136);
          v31 = vaddq_f64(v221.val[3], vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v221.val[0], v51.f64[0]), v221.val[1], v51, 1), v221.val[2], v6.f64[0]));
          v221.val[2].f64[0] = v51.f64[1];
          __asm { FMLA            D18, D19, V22.D[1] }
          v35 = *(double *)(a2 + 160) + vmlad_n_f64(v221.val[1].f64[0], v6.f64[0], *(double *)(a2 + 152));
          if (v35 == 0.0)
            v36 = 1.0;
          else
            v36 = 1.0 / v35;
          v37 = vaddq_f64(v24, vmlaq_n_f64(vmulq_n_f64(v27, v36 * v31.f64[0]), v28, vmuld_lane_f64(v36, v31, 1)));
          v38 = (float64x2_t *)(*(_QWORD *)(*(_QWORD *)(v29 + 40) + 424)
                              + ((unint64_t)*(unsigned int *)(*(_QWORD *)&v61 + 16 * v69 + 8) << 6));
          v215 = *v38;
          v216 = v38[1];
          v217 = v38[2];
          v218 = v38[3];
          v39 = &v18[104 * v22];
          *(_QWORD *)v39 = (int)(v37.f64[0] + 0.5) | ((unint64_t)(int)(v37.f64[1] + 0.5) << 32);
          _Q17 = v215;
          v41 = v216;
          v7 = v217;
          *(float64x2_t *)(v39 + 56) = v218;
          *(float64x2_t *)(v39 + 40) = v7;
          *(float64x2_t *)(v39 + 24) = v41;
          *(float64x2_t *)(v39 + 8) = _Q17;
          v39[72] = 1;
          v42 = (__int16)__p;
          v39[75] = BYTE2(__p);
          *(_WORD *)(v39 + 73) = v42;
          *(_QWORD *)(v39 + 76) = 0x3F80000000000000;
          *((_DWORD *)v39 + 21) = 220;
          v18 = (char *)v198[0];
          v43 = (char *)v198[0] + 104 * v22;
          *((_QWORD *)v43 + 11) = *((unsigned int *)v21 + 4);
          v7.f64[0] = *(float64_t *)(a2 + 96);
          v44 = *(double *)(a2 + 128);
          v45 = *(double *)(a2 + 160);
          _Q17.f64[0] = -(*(double *)(a2 + 72) * v7.f64[0] + *(double *)(a2 + 104) * v44 + *(double *)(a2 + 136) * v45);
          _Q17.f64[1] = -(v7.f64[0] * *(double *)(a2 + 80) + v44 * *(double *)(a2 + 112) + v45 * *(double *)(a2 + 144));
          v41.f64[0] = -(v7.f64[0] * *(double *)(a2 + 88) + v44 * *(double *)(a2 + 120) + v45 * *(double *)(a2 + 152));
          *(_QWORD *)&v51.f64[1] = v65;
          v6 = vsubq_f64(v41, v6);
          _Q17.f64[0] = vsubq_f64(_Q17, v51).f64[1];
          __asm { FMLA            D16, D17, V6.D[1] }
          *((double *)v43 + 12) = sqrt(vmlad_n_f64(_D16, v6.f64[0], v6.f64[0]));
          ++v22;
        }
      }
    }
    v21 = (uint64_t **)*v21;
  }
  while (v21);
  v19 = (char *)v198[1];
  v87 = 0x4EC4EC4EC4EC4EC5 * (((char *)v198[1] - (char *)v18) >> 3);
  if (v22 <= v87)
    goto LABEL_61;
  sub_20EDFF020(v198, v22 - v87);
  v18 = (char *)v198[0];
  v19 = (char *)v198[1];
LABEL_63:
  v88 = 126 - 2 * __clz(0x4EC4EC4EC4EC4EC5 * ((v19 - v18) >> 3));
  if (v19 == v18)
    v89 = 0;
  else
    v89 = v88;
  sub_20EDFF214((uint64_t)v18, (unint64_t)v19, v89, 1);
  v90 = *(_QWORD *)(a1 + 800);
  if (v22 > v90)
  {
    v91 = 0x4EC4EC4EC4EC4EC5 * ((v19 - v18) >> 3);
    if (v90 <= v91)
    {
      if (v90 < v91)
      {
        v19 = &v18[104 * v90];
        v198[1] = v19;
      }
    }
    else
    {
      sub_20EDFF020(v198, v90 - v91);
      v18 = (char *)v198[0];
      v19 = (char *)v198[1];
    }
  }
  __p = 0;
  v213 = 0;
  v214 = 0;
  if (v18 != v19)
  {
    v92 = 0;
    do
    {
      while (1)
      {
        v96 = *(_QWORD *)v18;
        v215 = *(float64x2_t *)(v18 + 8);
        v97 = *(float64x2_t *)(v18 + 24);
        v98 = *(float64x2_t *)(v18 + 40);
        v99 = *(_OWORD *)(v18 + 72);
        v218 = *(float64x2_t *)(v18 + 56);
        v219 = v99;
        v216 = v97;
        v217 = v98;
        if (v92 >= v214)
          break;
        *(_QWORD *)v92 = v96;
        *(float64x2_t *)(v92 + 8) = v215;
        v93 = v216;
        v94 = v217;
        v95 = v218;
        *(_OWORD *)(v92 + 72) = v219;
        *(float64x2_t *)(v92 + 56) = v95;
        *(float64x2_t *)(v92 + 40) = v94;
        *(float64x2_t *)(v92 + 24) = v93;
        v213 = v92 + 88;
        v18 += 104;
        v92 += 88;
        if (v18 == v19)
          goto LABEL_91;
      }
      v100 = (char *)__p;
      v101 = 0x2E8BA2E8BA2E8BA3 * ((v92 - (_BYTE *)__p) >> 3);
      v102 = v101 + 1;
      if ((unint64_t)(v101 + 1) > 0x2E8BA2E8BA2E8BALL)
        sub_20E867F44();
      if (0x5D1745D1745D1746 * ((v214 - (_BYTE *)__p) >> 3) > v102)
        v102 = 0x5D1745D1745D1746 * ((v214 - (_BYTE *)__p) >> 3);
      if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v214 - (_BYTE *)__p) >> 3)) >= 0x1745D1745D1745DLL)
        v103 = 0x2E8BA2E8BA2E8BALL;
      else
        v103 = v102;
      if (v103)
      {
        if (v103 > 0x2E8BA2E8BA2E8BALL)
          sub_20E877A38();
        v104 = (char *)operator new(88 * v103);
      }
      else
      {
        v104 = 0;
      }
      v105 = &v104[88 * v101];
      *(_QWORD *)v105 = v96;
      v106 = v215;
      *(float64x2_t *)(v105 + 24) = v216;
      v107 = v218;
      *(float64x2_t *)(v105 + 40) = v217;
      *(float64x2_t *)(v105 + 56) = v107;
      *(_OWORD *)(v105 + 72) = v219;
      *(float64x2_t *)(v105 + 8) = v106;
      v108 = v105;
      if (v92 != v100)
      {
        do
        {
          v109 = *((_QWORD *)v92 - 11);
          v92 -= 88;
          *((_QWORD *)v108 - 11) = v109;
          v108 -= 88;
          *(_OWORD *)(v108 + 8) = *(_OWORD *)(v92 + 8);
          v110 = *(_OWORD *)(v92 + 24);
          v111 = *(_OWORD *)(v92 + 40);
          v112 = *(_OWORD *)(v92 + 56);
          *(_OWORD *)(v108 + 72) = *(_OWORD *)(v92 + 72);
          *(_OWORD *)(v108 + 56) = v112;
          *(_OWORD *)(v108 + 40) = v111;
          *(_OWORD *)(v108 + 24) = v110;
        }
        while (v92 != v100);
        v92 = (char *)__p;
      }
      v113 = &v104[88 * v103];
      v114 = v105 + 88;
      __p = v108;
      v214 = v113;
      if (v92)
        operator delete(v92);
      v213 = v114;
      v18 += 104;
      v92 = v114;
    }
    while (v18 != v19);
  }
LABEL_91:
  v215 = 0uLL;
  v216.f64[0] = 0.0;
  sub_20EDFE10C(v193, (float **)(a1 + 1856), &__p, (uint64_t)&v215, 1, 512, 0xDCu);
  v115 = v215;
  if (*(_QWORD *)&v215.f64[0] != *(_QWORD *)&v215.f64[1])
  {
    v116 = v198[0];
    v117 = *(_QWORD *)(a2 + 1872);
    v118 = *(_QWORD *)(a1 + 1904);
    if (v117)
    {
      v119 = (uint8x8_t)vcnt_s8((int8x8_t)v117);
      v119.i16[0] = vaddlv_u8(v119);
      v120 = *(_QWORD *)(a2 + 1864);
      v121 = *(int **)&v215.f64[0];
      do
      {
        v125 = v116[13 * v121[1] + 11];
        if (v119.u32[0] > 1uLL)
        {
          v126 = v116[13 * v121[1] + 11];
          if (v117 <= v125)
            v126 = v125 % v117;
        }
        else
        {
          v126 = v125 & (v117 + 0xFFFFFFFF);
        }
        v122 = *(uint64_t **)(v120 + 8 * v126);
        if (v122)
        {
          v122 = (uint64_t *)*v122;
          if (v122)
          {
            if (v119.u32[0] < 2uLL)
            {
              while (1)
              {
                v127 = v122[1];
                if (v127 == v125)
                {
                  if (*((_DWORD *)v122 + 4) == (_DWORD)v125)
                    goto LABEL_95;
                }
                else if ((v127 & (v117 - 1)) != v126)
                {
                  goto LABEL_94;
                }
                v122 = (uint64_t *)*v122;
                if (!v122)
                  goto LABEL_95;
              }
            }
            do
            {
              v128 = v122[1];
              if (v128 == v125)
              {
                if (*((_DWORD *)v122 + 4) == (_DWORD)v125)
                  break;
              }
              else
              {
                if (v128 >= v117)
                  v128 %= v117;
                if (v128 != v126)
                {
LABEL_94:
                  v122 = 0;
                  break;
                }
              }
              v122 = (uint64_t *)*v122;
            }
            while (v122);
          }
        }
LABEL_95:
        v123 = *v121;
        v124 = (_DWORD *)(v118 + 8 * *v121);
        if (!*v124)
        {
          v129 = v122[3];
          if (*(_DWORD *)(v129 + 48) == -1)
          {
            *v124 = v125;
            *(_DWORD *)(v118 + 8 * v123 + 4) = 1;
            *(_DWORD *)(v129 + 48) = v123;
          }
        }
        v121 += 2;
      }
      while (v121 != *(int **)&v115.f64[1]);
    }
    else
    {
      v130 = *(int **)&v215.f64[0];
      do
      {
        v131 = *v130;
        v132 = (_DWORD *)(v118 + 8 * *v130);
        if (!*v132)
        {
          v133 = MEMORY[0x18];
          if (*(_DWORD *)(MEMORY[0x18] + 48) == -1)
          {
            *v132 = v116[13 * v130[1] + 11];
            *(_DWORD *)(v118 + 8 * v131 + 4) = 1;
            *(_DWORD *)(v133 + 48) = v131;
          }
        }
        v130 += 2;
      }
      while (v130 != *(int **)&v115.f64[1]);
    }
  }
  if (*(_QWORD *)&v115.f64[0])
  {
    v215.f64[1] = v115.f64[0];
    operator delete(*(void **)&v115.f64[0]);
  }
  if (__p)
  {
    v213 = (char *)__p;
    operator delete(__p);
  }
  if (v198[0])
    operator delete(v198[0]);
LABEL_130:
  v134 = *(_QWORD *)(a1 + 1832);
  v135 = *(_QWORD *)(a2 + 1888);
  v213 = 0;
  v214 = 0;
  __p = 0;
  if (!v135)
  {
    v137 = 0;
    v136 = 0;
    v138 = *(uint64_t ***)(a2 + 1880);
    if (v138)
      goto LABEL_133;
LABEL_140:
    v139 = 0;
    v140 = (v137 - v136) >> 3;
    goto LABEL_141;
  }
  if (v135 >> 61)
    sub_20E867F44();
  v136 = (char *)operator new(8 * v135);
  __p = v136;
  v214 = &v136[8 * v135];
  bzero(v136, 8 * v135);
  v137 = &v136[8 * v135];
  v213 = v137;
  v138 = *(uint64_t ***)(a2 + 1880);
  if (!v138)
    goto LABEL_140;
LABEL_133:
  v139 = 0;
  do
  {
    if (*((_DWORD *)v138[3] + 12) != -1)
      *(_QWORD *)&v136[8 * v139++] = *((unsigned int *)v138 + 4);
    v138 = (uint64_t **)*v138;
  }
  while (v138);
  v140 = (v137 - v136) >> 3;
  if (v139 > v140)
  {
    sub_20EAC9ECC((uint64_t)&__p, v139 - v140);
    goto LABEL_143;
  }
LABEL_141:
  if (v140 > v139)
    v213 = &v136[8 * v139];
LABEL_143:
  v194 = *(_QWORD *)(a2 + 568);
  v185 = *(int8x16_t *)(a2 + 520);
  v186 = *(float64x2_t *)(a2 + 536);
  v188 = *(int8x16_t *)(a2 + 504);
  v190 = *(int8x16_t *)(a2 + 552);
  v141 = *(float *)(a1 + 784);
  v142 = (std::__shared_weak_count *)operator new(0x278uLL);
  v143 = v190;
  v144 = v186;
  v145.__shared_owners_ = vextq_s8(v188, v188, 8uLL).i64[0];
  *(double *)&v145.__vftable = v141 * *(double *)v188.i64;
  v143.i64[1] = vextq_s8(v143, v143, 8uLL).u64[0];
  *(_QWORD *)&v144.f64[1] = vextq_s8((int8x16_t)v144, (int8x16_t)v144, 8uLL).u64[0];
  *((_QWORD *)&v146 + 1) = vextq_s8(v185, v185, 8uLL).u64[0];
  *(double *)&v146 = *(double *)v185.i64 * v141;
  v147 = vmulq_n_f64(v144, v141);
  v142->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v142->__shared_owners_;
  v142->__shared_weak_owners_ = 0;
  v142->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E98B8;
  *(_OWORD *)&v142[1].__shared_weak_owners_ = v146;
  *(float64x2_t *)&v142[2].__shared_owners_ = v147;
  v142[3].std::__shared_count = (std::__shared_count)v143;
  v142[1].std::__shared_count = v145;
  v191 = *(double *)&v145.__vftable;
  v142[3].__shared_weak_owners_ = v194;
  *(double *)&v142[4].__vftable = 1.0 / *(double *)&v145.__vftable;
  *(double *)&v142[4].__shared_owners_ = -*(double *)&v145.__shared_owners_ / (*(double *)&v145.__vftable * v147.f64[0]);
  *(double *)&v142[4].__shared_weak_owners_ = -(*(double *)&v146 * v147.f64[0]
                                              - vmuld_lane_f64(*(double *)&v145.__shared_owners_, v147, 1))
                                            / (*(double *)&v145.__vftable
                                             * v147.f64[0]);
  v142[5].__vftable = 0;
  *(double *)&v142[5].__shared_owners_ = 1.0 / v147.f64[0];
  *(double *)&v142[5].__shared_weak_owners_ = -v147.f64[1] / v147.f64[0];
  v142[6].__vftable = 0;
  v142[6].__shared_owners_ = 0;
  *(_OWORD *)&v142[6].__shared_weak_owners_ = xmmword_2102E3C70;
  v142[7].__shared_owners_ = 0x7FF8000000000000;
  LOBYTE(v142[7].__shared_weak_owners_) = 0;
  v142[8].std::__shared_count = (std::__shared_count)xmmword_2102E3C50;
  v142[25].__shared_weak_owners_ = 0xBFF0000000000000;
  v142[26].__vftable = (std::__shared_weak_count_vtbl *)0xFFEFFFFFFFFFFFFFLL;
  v210 = v142 + 1;
  v211 = v142;
  v207 = 0;
  v208 = 0;
  v209 = 0;
  if (2 * v139)
  {
    if ((2 * v139) >> 61)
      sub_20E867F44();
    v149 = (char *)operator new(16 * v139);
    v207 = v149;
    v209 = &v149[16 * v139];
    bzero(v149, 16 * v139);
    v208 = &v149[16 * v139];
  }
  v204 = 0;
  v205 = 0;
  v206 = 0;
  if (v139)
  {
    if ((3 * v139) >> 61)
      sub_20E867F44();
    v150 = (char *)operator new(24 * v139);
    v204 = v150;
    v206 = &v150[24 * v139];
    bzero(v150, 24 * v139);
    v205 = &v150[24 * v139];
  }
  v151 = *(_QWORD **)(a2 + 1880);
  if (v151)
  {
    v152 = 0;
    while (1)
    {
      v153 = *(unsigned int *)(v151[3] + 48);
      if ((_DWORD)v153 != -1)
        break;
LABEL_151:
      v151 = (_QWORD *)*v151;
      if (!v151)
      {
        v141 = *(float *)(a1 + 784);
        goto LABEL_171;
      }
    }
    if (*(_BYTE *)(v134 + 184))
    {
      v155 = *(_QWORD *)(v134 + 80);
      v154 = *(_QWORD *)(v134 + 88);
      v156 = v154 - v155;
      if (v154 == v155 || v156 != *(_QWORD *)(v134 + 168) - *(_QWORD *)(v134 + 160))
        goto LABEL_166;
    }
    else
    {
      if (*(_QWORD *)(v134 + 160) != *(_QWORD *)(v134 + 168))
        goto LABEL_166;
      v156 = *(_QWORD *)(v134 + 88) - *(_QWORD *)(v134 + 80);
    }
    v158 = *(_QWORD *)(v134 + 56);
    v159 = (*(_QWORD *)(v134 + 64) - v158) >> 5;
    if (v159 == v156 >> 6 && *(_QWORD *)(v134 + 16) <= v159)
    {
LABEL_168:
      if (v159 > v153)
      {
        v161 = (float32x2_t *)v151[3];
        v162 = (float *)(v158 + 32 * v161[6].u32[0]);
        v163 = (float64x2_t *)((char *)v204 + 24 * v152);
        *v163 = vcvtq_f64_f32(*v161);
        v163[1].f64[0] = v161[1].f32[0];
        v164 = v162[1];
        v165 = *(double *)&v142[4].__shared_weak_owners_
             + *(double *)&v142[4].__vftable * *v162
             + *(double *)&v142[4].__shared_owners_ * v164;
        v166 = *(double *)&v142[5].__shared_owners_ * v164 + *(double *)&v142[5].__shared_weak_owners_;
        v167 = (double *)((char *)v207 + 16 * v152);
        *v167 = v165;
        v167[1] = v166;
        ++v152;
      }
      goto LABEL_151;
    }
LABEL_166:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v158 = *(_QWORD *)(v134 + 56);
    v159 = (*(_QWORD *)(v134 + 64) - v158) >> 5;
    goto LABEL_168;
  }
LABEL_171:
  v168 = operator new(8uLL);
  v198[0] = v168;
  *v168 = 8;
  v198[1] = v168 + 1;
  *(_QWORD *)&v199 = v168 + 1;
  sub_20EDC7538((uint64_t)&v215, 1000, 2000, v139 >> 1, (uint64_t)v198, 1, v141 * 15.0, v191);
  if (v198[0])
  {
    v198[1] = v198[0];
    operator delete(v198[0]);
  }
  v195 = 0;
  v196 = 0;
  v197 = 0;
  v169 = sub_20EB63308((uint64_t)&v215, &v207, (uint64_t *)&v204, (uint64_t)v198, (char **)&v195, 0, 0);
  if ((v169 & 1) != 0)
  {
    v170 = v201;
    *(_OWORD *)(a2 + 104) = v200;
    *(_OWORD *)(a2 + 120) = v170;
    v171 = v203;
    *(_OWORD *)(a2 + 136) = v202;
    *(_OWORD *)(a2 + 152) = v171;
    v172 = v199;
    *(_OWORD *)(a2 + 72) = *(_OWORD *)v198;
    *(_OWORD *)(a2 + 88) = v172;
    v173 = *(uint64_t **)(a2 + 1880);
    if (v173)
    {
      v174 = (unsigned int *)v195;
      if (v196 == v195)
      {
        do
        {
          v183 = v173[3];
          v184 = *(unsigned int *)(v183 + 48);
          if ((_DWORD)v184 != -1)
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 1904) + 8 * v184) = 0;
            *(_DWORD *)(v183 + 48) = -1;
          }
          v173 = (uint64_t *)*v173;
        }
        while (v173);
      }
      else
      {
        v175 = (v196 - (_BYTE *)v195) >> 2;
        v176 = __p;
        if (v175 <= 1)
          v177 = 1;
        else
          v177 = (v196 - (_BYTE *)v195) >> 2;
        do
        {
          v178 = v173[3];
          v179 = *(unsigned int *)(v178 + 48);
          if ((_DWORD)v179 != -1)
          {
            v180 = 0;
            while (v176[v174[v180]] != *((_DWORD *)v173 + 4))
            {
              if (v177 == ++v180)
              {
                v180 = v177;
                break;
              }
            }
            if (v180 == v175)
            {
              *(_QWORD *)(*(_QWORD *)(a1 + 1904) + 8 * v179) = 0;
              *(_DWORD *)(v178 + 48) = -1;
            }
          }
          v173 = (uint64_t *)*v173;
        }
        while (v173);
      }
    }
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (*(_QWORD *)&v217.f64[0])
  {
    v217.f64[1] = v217.f64[0];
    operator delete(*(void **)&v217.f64[0]);
  }
  if (v204)
  {
    v205 = (char *)v204;
    operator delete(v204);
  }
  if (v207)
  {
    v208 = (char *)v207;
    operator delete(v207);
  }
  do
    v181 = __ldaxr(p_shared_owners);
  while (__stlxr(v181 - 1, p_shared_owners));
  if (!v181)
  {
    ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
    std::__shared_weak_count::__release_weak(v142);
  }
  if (__p)
  {
    v213 = (char *)__p;
    operator delete(__p);
  }
  return v169;
}

void sub_20EDFDFC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,_Unwind_Exception *exception_objecta,uint64_t a45)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EDFE10C(int *a1, float **a2, _QWORD *a3, uint64_t a4, int a5, int a6, unsigned int a7)
{
  int v12;
  float *v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int32x4_t v38;
  int32x4_t *v39;
  int32x4_t v40;
  int32x4_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  int32x4_t v50;
  int32x4_t *v51;
  int32x4_t v52;
  int32x4_t v53;
  uint64_t v54;
  _DWORD *v55;
  float *v56;
  float *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  float **v62;
  int *v63;
  unsigned int v64;
  int v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  _DWORD *v69;
  int *v70;
  unsigned int v71;
  BOOL v72;
  uint64_t v73;
  float v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  float v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  float *v92;
  uint64_t v93;
  uint8x16_t v94;
  float v95;
  float v96;
  _QWORD *v97;
  unint64_t v98;
  uint64_t v99;
  _BOOL4 v100;
  unsigned int v101;
  _DWORD *v103;
  _DWORD *v104;
  unsigned int v105;
  uint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t i;
  uint64_t v110;
  unint64_t v111;
  unsigned int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  unsigned int v121;
  int *v122;
  unsigned int v123;
  uint64_t *v124;
  int v125;
  int v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  unsigned int v131;
  char v132;
  float **v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  char v139[56];
  _QWORD v140[7];
  uint64_t v141;
  int v142;
  float v143;
  int v144;
  int v145;

  kdebug_trace();
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  v12 = *a1;
  v144 = a1[1];
  v145 = v12;
  v131 = a1[3];
  v14 = *a2;
  v13 = a2[1];
  v16 = *a3;
  v15 = a3[1];
  v17 = 2.8648;
  if (a5)
    v17 = 0.0;
  v143 = v17;
  if (a5)
    v18 = 0;
  else
    v18 = 18;
  v19 = *((_QWORD *)a1 + 17);
  v21 = a1;
  v22 = 0x2E8BA2E8BA2E8BA3 * (((char *)v13 - (char *)v14) >> 3);
  v23 = v15 - v16;
  v142 = v18;
  v20 = a1 + 34;
  a1[32] = 37;
  v24 = a1 + 32;
  v25 = -1171354717 * (((char *)v13 - (char *)v14) >> 3) + 74;
  v26 = v20[1];
  v27 = (v26 - v19) >> 2;
  v135 = a2;
  v122 = v21;
  v132 = a5;
  if (v25 <= v27)
  {
    if (v25 < v27)
    {
      v26 = v19 + 4 * v25;
      *((_QWORD *)v21 + 18) = v26;
    }
    LODWORD(v28) = 37;
    v29 = 74;
  }
  else
  {
    sub_20E93DC84((uint64_t)v20, v25 - v27);
    v19 = *((_QWORD *)v21 + 17);
    v26 = *((_QWORD *)v21 + 18);
    v28 = v21[32];
    v29 = 2 * v28;
  }
  v30 = v20 - 10;
  v31 = ((v26 - v19) >> 2) - v29;
  v32 = v31;
  v33 = (v28 + v31);
  if (v31 != v33)
  {
    v34 = (_DWORD *)(v19 + 4 * v31);
    v35 = 4 * v33 - 4 * v31 - 4;
    if (v35 >= 0x1C)
    {
      v37 = (v35 >> 2) + 1;
      v36 = v33 + (v37 & 0xFFFFFFF8);
      v34 += v37 & 0x7FFFFFFFFFFFFFF8;
      v38 = vaddq_s32(vdupq_n_s32(v33), (int32x4_t)xmmword_210365350);
      v39 = (int32x4_t *)(4 * v31 + v19 + 16);
      v40.i64[0] = 0x400000004;
      v40.i64[1] = 0x400000004;
      v41.i64[0] = 0x800000008;
      v41.i64[1] = 0x800000008;
      v42 = v37 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v39[-1] = v38;
        *v39 = vaddq_s32(v38, v40);
        v38 = vaddq_s32(v38, v41);
        v39 += 2;
        v42 -= 8;
      }
      while (v42);
      if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_19;
    }
    else
    {
      v36 = v33;
    }
    v43 = (_DWORD *)(v19 + 4 * v33);
    do
      *v34++ = v36++;
    while (v34 != v43);
LABEL_19:
    LODWORD(v28) = *v24;
    v32 = (*v24 + v31);
  }
  if (!(_DWORD)v28)
    goto LABEL_28;
  v44 = (v31 + 2 * v28);
  v45 = 4 * v32;
  v46 = (_DWORD *)(v19 + 4 * v32);
  v47 = 4 * v44 - 4 * v32 - 4;
  if (v47 < 0x1C)
  {
    v48 = v31;
LABEL_26:
    v55 = (_DWORD *)(v19 + 4 * v44);
    do
      *v46++ = v48++;
    while (v46 != v55);
    goto LABEL_28;
  }
  v49 = (v47 >> 2) + 1;
  v48 = v31 + (v49 & 0xFFFFFFF8);
  v46 += v49 & 0x7FFFFFFFFFFFFFF8;
  v50 = vaddq_s32(vdupq_n_s32(v31), (int32x4_t)xmmword_210365350);
  v51 = (int32x4_t *)(v45 + v19 + 16);
  v52.i64[0] = 0x400000004;
  v52.i64[1] = 0x400000004;
  v53.i64[0] = 0x800000008;
  v53.i64[1] = 0x800000008;
  v54 = v49 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v51[-1] = v50;
    *v51 = vaddq_s32(v50, v52);
    v50 = vaddq_s32(v50, v53);
    v51 += 2;
    v54 -= 8;
  }
  while (v54);
  if (v49 != (v49 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_26;
LABEL_28:
  v56 = *a2;
  v57 = a2[1];
  v140[0] = &v145;
  v140[1] = &v144;
  v140[2] = &v143;
  v140[3] = &v142;
  v140[4] = (char *)&v141 + 4;
  v140[5] = v20 - 10;
  v140[6] = &v141;
  v141 = 0;
  sub_20EE0149C((uint64_t)v24, v56, v57, (uint64_t)v140, (uint64_t)v139);
  LODWORD(v58) = v22 - HIDWORD(v141);
  HIDWORD(v141) = v22 - HIDWORD(v141);
  v59 = -1171354717 * (v23 >> 3);
  if (-1171354717 * (v23 >> 3))
  {
    v60 = 0;
    v61 = 0;
    v62 = a2;
    v63 = v122;
    v65 = a6;
    v64 = a7;
    v67 = v131;
    v66 = a5;
    v119 = a4;
    v120 = a3;
    v118 = -1171354717 * (v23 >> 3);
    v124 = v20 - 10;
    do
    {
      v70 = (int *)(*a3 + 88 * v60);
      v71 = v70[1];
      v72 = *v70 >= 6 && v71 >= 6;
      if (v72 && *v70 < (v145 - 6) && v71 < v144 - 6)
      {
        v121 = v61;
        v73 = *a3 + 88 * v60;
        v74 = *(float *)(v73 + 76);
        v75 = vcvtms_u32_f32((float)(v74 + 5.9341) * v143);
        v123 = vcvtms_u32_f32((float)(v74 + 6.6323) * v143);
        v76 = *(unsigned __int8 *)(v73 + 72);
        if (*(_BYTE *)(v73 + 72))
          v77 = 1;
        else
          v77 = v142 + 1;
        if (v123 + 1 > v75)
        {
          v138 = 0;
          v78 = *(int8x16_t *)(v73 + 8);
          v79 = *(int8x16_t *)(v73 + 24);
          v80 = *(int8x16_t *)(v73 + 40);
          v81 = *(int8x16_t *)(v73 + 56);
          v82 = *(float *)(v73 + 80);
          v84 = *v70;
          v83 = v70[1];
          v68 = 0x80000000;
          v136 = -1;
          v85 = *v20;
          v129 = v79;
          v130 = v78;
          v127 = v81;
          v128 = v80;
          v125 = v83;
          v126 = *(unsigned __int8 *)(v73 + 72);
          while (1)
          {
            v137 = v75;
            v86 = v75 % 0x12 + v77;
            v87 = v63[32];
            v88 = (unint64_t)(*((_QWORD *)v63 + 18) - v85) >> 2;
            v89 = *(_DWORD *)(v85 + 4 * (v88 - 2 * v87 + v86));
            v90 = (v86 - v87 + v88);
            while ((_DWORD)v90 != v89)
            {
              v92 = *v62;
              if ((LODWORD((*v62)[22 * v89]) - v84) * (LODWORD((*v62)[22 * v89]) - v84)
                 + (LODWORD((*v62)[22 * v89 + 1]) - v83) * (LODWORD((*v62)[22 * v89 + 1]) - v83) >= v67)
                goto LABEL_49;
              v93 = *v30;
              if ((v66 & 1) == 0)
              {
                if (LOBYTE(v92[22 * v89 + 18]) != v76 || vabds_f32(v92[22 * v89 + 20], v82) > 0.5)
                  goto LABEL_49;
                v95 = vabds_f32(v74, v92[22 * v89 + 19]);
                v96 = fabs(v95 + -6.2832);
                if (LODWORD(v96) >= LODWORD(v95))
                  v96 = v95;
                if (v96 > 0.34907)
                  goto LABEL_49;
              }
              if (v65 != 512)
              {
                if (v65 == 256)
                {
                  v94 = (uint8x16_t)vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)&v92[22 * v89 + 6], v79)), vcntq_s8(veorq_s8(*(int8x16_t *)&v92[22 * v89 + 2], v78)));
                  goto LABEL_66;
                }
                if (v65 == 128)
                {
                  v94 = (uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)&v92[22 * v89 + 2], v78));
                  goto LABEL_66;
                }
                v97 = v20;
                v98 = v60;
                v99 = v90;
                v100 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/include/VIO/FeatureMatchingUnsanitized/DescriptorFreak.hpp", 62, (uint64_t)"num_matching_bits == 512", 24, (uint64_t)"Number of bits for matching can only be 128/256/512", 51, (void (*)(void **))sub_21023DDB0);
                v90 = v99;
                v81 = v127;
                v80 = v128;
                v79 = v129;
                v78 = v130;
                v83 = v125;
                v76 = v126;
                v60 = v98;
                v20 = v97;
                v30 = v124;
                v67 = v131;
                v66 = v132;
                v65 = a6;
                v64 = a7;
                v62 = v135;
                if (v100)
                  abort();
              }
              v94 = (uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)&v92[22 * v89 + 6], v79)), vcntq_s8(veorq_s8(*(int8x16_t *)&v92[22 * v89 + 2], v78))), vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)&v92[22 * v89 + 10], v80)), vcntq_s8(veorq_s8(*(int8x16_t *)&v92[22 * v89 + 14], v81))));
LABEL_66:
              v101 = vaddlvq_u8(v94);
              v91 = v65 - v101;
              if (v101 > v64 || (_DWORD)v91 == 0x7FFFFFFF)
                goto LABEL_49;
              v103 = (_DWORD *)(v93 + 16 * v89);
              if (*v103 < (int)v91)
              {
                *v103 = v91;
                v103[1] = v60;
                v104 = v103 + 2;
LABEL_76:
                *v104 = 0;
                goto LABEL_77;
              }
              if (*v103 == (_DWORD)v91)
              {
                v104 = v103 + 2;
                if (v103[2] || v60 < v103[1])
                {
                  v103[1] = v60;
                  goto LABEL_76;
                }
              }
LABEL_77:
              v105 = v103[3];
              if ((int)v68 < (int)v91)
                goto LABEL_48;
              if ((_DWORD)v68 == (_DWORD)v91)
              {
                if (v138 > v77)
                {
                  v91 = v68;
LABEL_48:
                  v68 = v91;
                  v136 = v105;
                  v138 = v77;
                  goto LABEL_49;
                }
                if (v138 == v77)
                {
                  v91 = v68;
                  if (v136 > v105)
                    goto LABEL_48;
                }
              }
LABEL_49:
              v85 = *v20;
              v89 = *(_DWORD *)(*v20 + 4 * v89);
            }
            v75 = v137 + 1;
            v63 = v122;
            if (v137 == v123)
              goto LABEL_31;
          }
        }
        v138 = 0;
        v136 = -1;
        LODWORD(v68) = 0x80000000;
LABEL_31:
        v69 = (_DWORD *)(*((_QWORD *)v63 + 13) + 12 * v60);
        *v69 = v68;
        v69[1] = v136;
        v69[2] = v138;
        v61 = v121 + 1;
        a4 = v119;
        a3 = v120;
        v59 = v118;
      }
      ++v60;
    }
    while (v60 != v59);
    LODWORD(v58) = HIDWORD(v141);
  }
  else
  {
    v61 = 0;
    v63 = v122;
  }
  if (v61 >= v58)
    v58 = v58;
  else
    v58 = v61;
  v106 = *(uint64_t **)a4;
  v107 = (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3;
  if (v58 <= v107)
  {
    if (v58 < v107)
      *(_QWORD *)(a4 + 8) = &v106[v58];
  }
  else
  {
    sub_20EE015F4((void **)a4, v58 - v107);
    v106 = *(uint64_t **)a4;
  }
  v108 = *v20;
  for (i = 1; i != 37; ++i)
  {
    v110 = v63[32];
    v111 = (unint64_t)(*((_QWORD *)v63 + 18) - v108) >> 2;
    v112 = *(_DWORD *)(v108 + 4 * (i - 2 * v110 + v111));
    v113 = i - v110 + v111;
    while (v113 != v112)
    {
      v114 = *v30 + 16 * v112;
      v115 = *(unsigned int *)(v114 + 4);
      if ((_DWORD)v115 != -1)
      {
        v116 = *(unsigned int *)(*((_QWORD *)v63 + 13) + 12 * v115 + 4);
        if ((_DWORD)v116 == *(_DWORD *)(v114 + 12))
        {
          *v106++ = v116 | (v115 << 32);
          v108 = *v20;
        }
      }
      v112 = *(_DWORD *)(v108 + 4 * v112);
    }
  }
  if (v106 != *(uint64_t **)(a4 + 8))
    *(_QWORD *)(a4 + 8) = v106;
  return kdebug_trace();
}

uint64_t sub_20EDFE990(uint64_t a1, _QWORD *a2, int **a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *i;
  int *v10;
  int *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;

  v6 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 1864) - *(_QWORD *)(a1 + 1856)) >> 3);
  v7 = *(_QWORD *)(a1 + 1904);
  v8 = (*(_QWORD *)(a1 + 1912) - v7) >> 3;
  if (v6 <= v8)
  {
    if (v6 < v8)
      *(_QWORD *)(a1 + 1912) = v7
                             + 0x745D1745D1745D18 * ((uint64_t)(*(_QWORD *)(a1 + 1864) - *(_QWORD *)(a1 + 1856)) >> 3);
  }
  else
  {
    sub_20EDFEE0C((void **)(a1 + 1904), v6 - v8);
  }
  for (i = (_QWORD *)a2[235]; i; i = (_QWORD *)*i)
    *(_DWORD *)(i[3] + 48) = -1;
  v10 = *a3;
  v11 = a3[1];
  if (*a3 == v11)
    return 0;
  result = 0;
  v13 = *(_QWORD *)(a1 + 1928);
  v14 = *(_QWORD *)(a1 + 1904);
  do
  {
    while (1)
    {
      v15 = *v10;
      v16 = *(unsigned int *)(v13 + 8 * v10[1]);
      v17 = (_QWORD *)(v14 + 8 * *v10);
      if ((_DWORD)v16)
        break;
      *v17 = 0;
      v10 += 2;
      if (v10 == v11)
        return result;
    }
    *(_DWORD *)v17 = v16;
    ++*(_DWORD *)(v14 + 8 * v15 + 4);
    v18 = a2[234];
    if ((v18 & (v18 - 1)) != 0)
    {
      v20 = v16;
      if (v18 <= v16)
        v20 = v16 % v18;
      v19 = *(uint64_t **)(a2[233] + 8 * v20);
      do
      {
        do
          v19 = (uint64_t *)*v19;
        while (v19[1] != v16);
      }
      while (*((_DWORD *)v19 + 4) != (_DWORD)v16);
    }
    else
    {
      v19 = *(uint64_t **)(a2[233] + 8 * (((_DWORD)v18 - 1) & v16));
      do
      {
        do
          v19 = (uint64_t *)*v19;
        while (v19[1] != v16);
      }
      while (*((_DWORD *)v19 + 4) != (_DWORD)v16);
    }
    *(_DWORD *)(v19[3] + 48) = v15;
    ++result;
    v10 += 2;
  }
  while (v10 != v11);
  return result;
}

void sub_20EDFEB30(uint64_t a1)
{
  sub_20E8E78EC(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EDFEB54(void **a1, unint64_t a2)
{
  _BYTE *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *v29;

  v5 = a1[1];
  v4 = a1[2];
  v6 = v5;
  if (0x2E8BA2E8BA2E8BA3 * ((v4 - (_BYTE *)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 88 * a2 - 88;
      if (v13 < 0x58)
        goto LABEL_34;
      v14 = v13 / 0x58 + 1;
      v6 = &v5[22 * (v14 & 0x7FFFFFFFFFFFFFELL)];
      v15 = v5 + 43;
      v16 = v14 & 0x7FFFFFFFFFFFFFELL;
      do
      {
        *((_BYTE *)v15 - 100) = 1;
        *((_BYTE *)v15 - 12) = 1;
        *((_QWORD *)v15 - 12) = 0;
        *((_QWORD *)v15 - 1) = 0;
        *(v15 - 22) = 220;
        *v15 = 220;
        v15 += 44;
        v16 -= 2;
      }
      while (v16);
      if (v14 != (v14 & 0x7FFFFFFFFFFFFFELL))
      {
LABEL_34:
        do
        {
          *((_BYTE *)v6 + 72) = 1;
          v6[19] = 0;
          v6[20] = 0;
          v6[21] = 220;
          v6 += 22;
        }
        while (v6 != &v5[22 * a2]);
      }
      v6 = &v5[22 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = *a1;
    v8 = 0x2E8BA2E8BA2E8BA3 * (((char *)v5 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x2E8BA2E8BA2E8BALL)
      sub_20E867F44();
    v10 = 0x2E8BA2E8BA2E8BA3 * ((v4 - (_BYTE *)v7) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x1745D1745D1745DLL)
      v11 = 0x2E8BA2E8BA2E8BALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0x2E8BA2E8BA2E8BALL)
        sub_20E877A38();
      v12 = (char *)operator new(88 * v11);
    }
    else
    {
      v12 = 0;
    }
    v17 = &v12[88 * v8];
    v18 = &v17[88 * a2];
    v19 = 88 * a2 - 88;
    v20 = v17;
    if (v19 < 0x58)
      goto LABEL_35;
    v21 = v19 / 0x58 + 1;
    v20 = &v17[88 * (v21 & 0x7FFFFFFFFFFFFFELL)];
    v22 = &v12[88 * v8 + 172];
    v23 = v21 & 0x7FFFFFFFFFFFFFELL;
    do
    {
      *(v22 - 100) = 1;
      *(v22 - 12) = 1;
      *((_QWORD *)v22 - 12) = 0;
      *((_QWORD *)v22 - 1) = 0;
      *((_DWORD *)v22 - 22) = 220;
      *(_DWORD *)v22 = 220;
      v22 += 176;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFELL))
    {
LABEL_35:
      do
      {
        v20[72] = 1;
        *((_DWORD *)v20 + 19) = 0;
        *((_DWORD *)v20 + 20) = 0;
        *((_DWORD *)v20 + 21) = 220;
        v20 += 88;
      }
      while (v20 != v18);
    }
    v24 = &v12[88 * v11];
    if (v5 != v7)
    {
      do
      {
        v25 = *((_QWORD *)v6 - 11);
        v6 -= 22;
        *((_QWORD *)v17 - 11) = v25;
        v17 -= 88;
        *(_OWORD *)(v17 + 8) = *(_OWORD *)(v6 + 2);
        v26 = *(_OWORD *)(v6 + 6);
        v27 = *(_OWORD *)(v6 + 10);
        v28 = *(_OWORD *)(v6 + 14);
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(v6 + 18);
        *(_OWORD *)(v17 + 56) = v28;
        *(_OWORD *)(v17 + 40) = v27;
        *(_OWORD *)(v17 + 24) = v26;
      }
      while (v6 != v7);
    }
    v29 = *a1;
    *a1 = v17;
    a1[1] = v18;
    a1[2] = v24;
    if (v29)
      operator delete(v29);
  }
}

void sub_20EDFEE0C(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = v5 - (_BYTE *)*a1;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_20E867F44();
    v11 = v4 - v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_20E877A38();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_30;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_30;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
      operator delete(v6);
  }
}

void sub_20EDFEFA8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (*(_BYTE *)(a1 + 160))
  {
    v2 = *(void **)(a1 + 136);
    if (v2)
    {
      *(_QWORD *)(a1 + 144) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 104);
    if (v3)
    {
      *(_QWORD *)(a1 + 112) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a1 + 80);
    if (v4)
    {
      *(_QWORD *)(a1 + 88) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(a1 + 56);
    if (v5)
    {
      *(_QWORD *)(a1 + 64) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(a1 + 32);
    if (v6)
    {
      *(_QWORD *)(a1 + 40) = v6;
      operator delete(v6);
    }
    *(_BYTE *)(a1 + 160) = 0;
  }
}

void sub_20EDFF020(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (0x4EC4EC4EC4EC4EC5 * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v5[104 * a2];
      do
      {
        *((_OWORD *)v5 + 4) = 0uLL;
        *((_OWORD *)v5 + 5) = 0uLL;
        *((_QWORD *)v5 + 12) = 0;
        *((_OWORD *)v5 + 2) = 0uLL;
        *((_OWORD *)v5 + 3) = 0uLL;
        *(_OWORD *)v5 = 0uLL;
        *((_OWORD *)v5 + 1) = 0uLL;
        v5[72] = 1;
        *((_DWORD *)v5 + 21) = 220;
        v5 += 104;
      }
      while (v5 != v11);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0x4EC4EC4EC4EC4EC5 * ((v5 - (_BYTE *)*a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0x276276276276276)
      sub_20E867F44();
    v8 = 0x4EC4EC4EC4EC4EC5 * ((v4 - (_BYTE *)*a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x13B13B13B13B13BLL)
      v9 = 0x276276276276276;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x276276276276276)
        sub_20E877A38();
      v10 = (char *)operator new(104 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[104 * v6];
    v13 = &v12[104 * a2];
    v14 = v12;
    do
    {
      *((_OWORD *)v14 + 4) = 0uLL;
      *((_OWORD *)v14 + 5) = 0uLL;
      *((_QWORD *)v14 + 12) = 0;
      *((_OWORD *)v14 + 2) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *(_OWORD *)v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      v14[72] = 1;
      *((_DWORD *)v14 + 21) = 220;
      v14 += 104;
    }
    while (v14 != v13);
    v15 = (char *)*a1;
    if (v5 != *a1)
    {
      do
      {
        v16 = *((_QWORD *)v5 - 13);
        v5 -= 104;
        *((_QWORD *)v12 - 13) = v16;
        v12 -= 104;
        *(_OWORD *)(v12 + 8) = *(_OWORD *)(v5 + 8);
        v17 = *(_OWORD *)(v5 + 24);
        v18 = *(_OWORD *)(v5 + 40);
        v19 = *(_OWORD *)(v5 + 56);
        *(_OWORD *)(v12 + 72) = *(_OWORD *)(v5 + 72);
        *(_OWORD *)(v12 + 56) = v19;
        *(_OWORD *)(v12 + 40) = v18;
        *(_OWORD *)(v12 + 24) = v17;
        *(_OWORD *)(v12 + 88) = *(_OWORD *)(v5 + 88);
      }
      while (v5 != v15);
      v5 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v10[104 * v9];
    if (v5)
      operator delete(v5);
  }
}

void sub_20EDFF214(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  double v32;
  unint64_t v33;
  double v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  double v40;
  double v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  BOOL v45;
  unint64_t v46;
  double v47;
  unint64_t v48;
  unint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  double v56;
  double v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  double v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  _QWORD *v80;
  BOOL v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  int64_t v96;
  int64_t v97;
  BOOL v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  double v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  int64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  unint64_t v118;
  uint64_t v119;
  int64_t v120;
  __int128 *v121;
  _OWORD *v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  double v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  double *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  double *v140;
  double v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  double v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;

__n128 sub_20EE0005C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  double v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __n128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;

  sub_20EE00508((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  if (*((double *)a4 + 12) < *(double *)(a3 + 96))
  {
    v11 = *(_QWORD *)a3;
    v57 = *(_OWORD *)(a3 + 40);
    v64 = *(_OWORD *)(a3 + 56);
    v71 = *(_OWORD *)(a3 + 72);
    v43 = *(_OWORD *)(a3 + 8);
    v50 = *(_OWORD *)(a3 + 24);
    v36 = *(_OWORD *)(a3 + 88);
    *(_QWORD *)a3 = *a4;
    result = *(__n128 *)(a4 + 3);
    v12 = *(_OWORD *)(a4 + 5);
    v13 = *(_OWORD *)(a4 + 7);
    *(_OWORD *)(a3 + 72) = *(_OWORD *)(a4 + 9);
    *(_OWORD *)(a3 + 56) = v13;
    *(_OWORD *)(a3 + 40) = v12;
    *(__n128 *)(a3 + 24) = result;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 1);
    *(_OWORD *)(a3 + 88) = *(_OWORD *)(a4 + 11);
    *a4 = v11;
    *(_OWORD *)(a4 + 3) = v50;
    *(_OWORD *)(a4 + 5) = v57;
    *(_OWORD *)(a4 + 7) = v64;
    *(_OWORD *)(a4 + 9) = v71;
    *(_OWORD *)(a4 + 1) = v43;
    result.n128_u64[1] = *((_QWORD *)&v36 + 1);
    *(_OWORD *)(a4 + 11) = v36;
    if (*(double *)(a3 + 96) < *(double *)(a2 + 96))
    {
      v14 = *(_QWORD *)a2;
      v58 = *(_OWORD *)(a2 + 40);
      v65 = *(_OWORD *)(a2 + 56);
      v72 = *(_OWORD *)(a2 + 72);
      v44 = *(_OWORD *)(a2 + 8);
      v51 = *(_OWORD *)(a2 + 24);
      v37 = *(_OWORD *)(a2 + 88);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      result = *(__n128 *)(a3 + 24);
      v15 = *(_OWORD *)(a3 + 40);
      v16 = *(_OWORD *)(a3 + 56);
      *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(a2 + 56) = v16;
      *(_OWORD *)(a2 + 40) = v15;
      *(__n128 *)(a2 + 24) = result;
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a2 + 88) = *(_OWORD *)(a3 + 88);
      *(_QWORD *)a3 = v14;
      *(_OWORD *)(a3 + 40) = v58;
      *(_OWORD *)(a3 + 56) = v65;
      *(_OWORD *)(a3 + 72) = v72;
      *(_OWORD *)(a3 + 8) = v44;
      *(_OWORD *)(a3 + 24) = v51;
      result.n128_u64[1] = *((_QWORD *)&v37 + 1);
      *(_OWORD *)(a3 + 88) = v37;
      if (*(double *)(a2 + 96) < *(double *)(a1 + 96))
      {
        v17 = *(_QWORD *)a1;
        v59 = *(_OWORD *)(a1 + 40);
        v66 = *(_OWORD *)(a1 + 56);
        v73 = *(_OWORD *)(a1 + 72);
        v45 = *(_OWORD *)(a1 + 8);
        v52 = *(_OWORD *)(a1 + 24);
        v38 = *(_OWORD *)(a1 + 88);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        result = *(__n128 *)(a2 + 24);
        v18 = *(_OWORD *)(a2 + 40);
        v19 = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 56) = v19;
        *(_OWORD *)(a1 + 40) = v18;
        *(__n128 *)(a1 + 24) = result;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        *(_QWORD *)a2 = v17;
        *(_OWORD *)(a2 + 40) = v59;
        *(_OWORD *)(a2 + 56) = v66;
        *(_OWORD *)(a2 + 72) = v73;
        *(_OWORD *)(a2 + 8) = v45;
        *(_OWORD *)(a2 + 24) = v52;
        result.n128_u64[1] = *((_QWORD *)&v38 + 1);
        *(_OWORD *)(a2 + 88) = v38;
      }
    }
  }
  result.n128_u64[0] = a5[12];
  if (result.n128_f64[0] < *((double *)a4 + 12))
  {
    v20 = *(double *)a4;
    v60 = *(_OWORD *)(a4 + 5);
    v67 = *(_OWORD *)(a4 + 7);
    v74 = *(_OWORD *)(a4 + 9);
    v46 = *(_OWORD *)(a4 + 1);
    v53 = *(_OWORD *)(a4 + 3);
    v39 = *(_OWORD *)(a4 + 11);
    *a4 = *a5;
    v21 = *(_OWORD *)(a5 + 3);
    v22 = *(_OWORD *)(a5 + 5);
    v23 = *(_OWORD *)(a5 + 7);
    *(_OWORD *)(a4 + 9) = *(_OWORD *)(a5 + 9);
    *(_OWORD *)(a4 + 7) = v23;
    *(_OWORD *)(a4 + 5) = v22;
    *(_OWORD *)(a4 + 3) = v21;
    *(_OWORD *)(a4 + 1) = *(_OWORD *)(a5 + 1);
    *(_OWORD *)(a4 + 11) = *(_OWORD *)(a5 + 11);
    *(double *)a5 = v20;
    *(_OWORD *)(a5 + 3) = v53;
    *(_OWORD *)(a5 + 5) = v60;
    *(_OWORD *)(a5 + 7) = v67;
    *(_OWORD *)(a5 + 9) = v74;
    *(_OWORD *)(a5 + 1) = v46;
    result.n128_u64[1] = *((_QWORD *)&v39 + 1);
    *(_OWORD *)(a5 + 11) = v39;
    result.n128_u64[0] = a4[12];
    if (result.n128_f64[0] < *(double *)(a3 + 96))
    {
      v24 = *(_QWORD *)a3;
      v61 = *(_OWORD *)(a3 + 40);
      v68 = *(_OWORD *)(a3 + 56);
      v75 = *(_OWORD *)(a3 + 72);
      v47 = *(_OWORD *)(a3 + 8);
      v54 = *(_OWORD *)(a3 + 24);
      v40 = *(_OWORD *)(a3 + 88);
      *(_QWORD *)a3 = *a4;
      v25 = *(_OWORD *)(a4 + 3);
      v26 = *(_OWORD *)(a4 + 5);
      v27 = *(_OWORD *)(a4 + 7);
      *(_OWORD *)(a3 + 72) = *(_OWORD *)(a4 + 9);
      *(_OWORD *)(a3 + 56) = v27;
      *(_OWORD *)(a3 + 40) = v26;
      *(_OWORD *)(a3 + 24) = v25;
      *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 1);
      *(_OWORD *)(a3 + 88) = *(_OWORD *)(a4 + 11);
      *a4 = v24;
      *(_OWORD *)(a4 + 5) = v61;
      *(_OWORD *)(a4 + 7) = v68;
      *(_OWORD *)(a4 + 9) = v75;
      *(_OWORD *)(a4 + 1) = v47;
      *(_OWORD *)(a4 + 3) = v54;
      result.n128_u64[1] = *((_QWORD *)&v40 + 1);
      *(_OWORD *)(a4 + 11) = v40;
      result.n128_u64[0] = *(_QWORD *)(a3 + 96);
      if (result.n128_f64[0] < *(double *)(a2 + 96))
      {
        v28 = *(_QWORD *)a2;
        v62 = *(_OWORD *)(a2 + 40);
        v69 = *(_OWORD *)(a2 + 56);
        v76 = *(_OWORD *)(a2 + 72);
        v48 = *(_OWORD *)(a2 + 8);
        v55 = *(_OWORD *)(a2 + 24);
        v41 = *(_OWORD *)(a2 + 88);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        v29 = *(_OWORD *)(a3 + 24);
        v30 = *(_OWORD *)(a3 + 40);
        v31 = *(_OWORD *)(a3 + 56);
        *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
        *(_OWORD *)(a2 + 56) = v31;
        *(_OWORD *)(a2 + 40) = v30;
        *(_OWORD *)(a2 + 24) = v29;
        *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
        *(_OWORD *)(a2 + 88) = *(_OWORD *)(a3 + 88);
        *(_QWORD *)a3 = v28;
        *(_OWORD *)(a3 + 40) = v62;
        *(_OWORD *)(a3 + 56) = v69;
        *(_OWORD *)(a3 + 72) = v76;
        *(_OWORD *)(a3 + 8) = v48;
        *(_OWORD *)(a3 + 24) = v55;
        result.n128_u64[1] = *((_QWORD *)&v41 + 1);
        *(_OWORD *)(a3 + 88) = v41;
        result.n128_u64[0] = *(_QWORD *)(a2 + 96);
        if (result.n128_f64[0] < *(double *)(a1 + 96))
        {
          v32 = *(_QWORD *)a1;
          v63 = *(_OWORD *)(a1 + 40);
          v70 = *(_OWORD *)(a1 + 56);
          v77 = *(_OWORD *)(a1 + 72);
          v49 = *(_OWORD *)(a1 + 8);
          v56 = *(_OWORD *)(a1 + 24);
          v42 = *(__n128 *)(a1 + 88);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v33 = *(_OWORD *)(a2 + 24);
          v34 = *(_OWORD *)(a2 + 40);
          v35 = *(_OWORD *)(a2 + 56);
          *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
          *(_OWORD *)(a1 + 56) = v35;
          *(_OWORD *)(a1 + 40) = v34;
          *(_OWORD *)(a1 + 24) = v33;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
          *(_QWORD *)a2 = v32;
          *(_OWORD *)(a2 + 40) = v63;
          *(_OWORD *)(a2 + 56) = v70;
          *(_OWORD *)(a2 + 72) = v77;
          *(_OWORD *)(a2 + 8) = v49;
          *(_OWORD *)(a2 + 24) = v56;
          result = v42;
          *(__n128 *)(a2 + 88) = v42;
        }
      }
    }
  }
  return result;
}

__n128 sub_20EE00508(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  __n128 result;
  double v4;
  __int128 *v5;
  __n128 *v6;
  double v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __n128 v25;
  __int128 v26;
  __n128 v27;
  __n128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  result.n128_u64[0] = a2[12];
  v4 = *((double *)a3 + 12);
  if (result.n128_f64[0] >= *((double *)a1 + 12))
  {
    if (v4 < result.n128_f64[0])
    {
      v11 = *(double *)a2;
      v38 = *(_OWORD *)(a2 + 5);
      v42 = *(_OWORD *)(a2 + 7);
      v46 = *(_OWORD *)(a2 + 9);
      v30 = *(_OWORD *)(a2 + 1);
      v34 = *(_OWORD *)(a2 + 3);
      v26 = *(_OWORD *)(a2 + 11);
      *a2 = *a3;
      v12 = *(_OWORD *)(a3 + 3);
      v13 = *(_OWORD *)(a3 + 5);
      v14 = *(_OWORD *)(a3 + 7);
      *(_OWORD *)(a2 + 9) = *(_OWORD *)(a3 + 9);
      *(_OWORD *)(a2 + 7) = v14;
      *(_OWORD *)(a2 + 5) = v13;
      *(_OWORD *)(a2 + 3) = v12;
      *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
      *(_OWORD *)(a2 + 11) = *(_OWORD *)(a3 + 11);
      *(double *)a3 = v11;
      *(_OWORD *)(a3 + 3) = v34;
      *(_OWORD *)(a3 + 5) = v38;
      *(_OWORD *)(a3 + 7) = v42;
      *(_OWORD *)(a3 + 9) = v46;
      *(_OWORD *)(a3 + 1) = v30;
      result.n128_u64[1] = *((_QWORD *)&v26 + 1);
      *(_OWORD *)(a3 + 11) = v26;
      result.n128_u64[0] = a2[12];
      if (result.n128_f64[0] < *((double *)a1 + 12))
      {
        v15 = *(double *)a1;
        v39 = *(_OWORD *)(a1 + 5);
        v43 = *(_OWORD *)(a1 + 7);
        v47 = *(_OWORD *)(a1 + 9);
        v31 = *(_OWORD *)(a1 + 1);
        v35 = *(_OWORD *)(a1 + 3);
        v27 = *(__n128 *)(a1 + 11);
        *a1 = *a2;
        v16 = *(_OWORD *)(a2 + 3);
        v17 = *(_OWORD *)(a2 + 5);
        v18 = *(_OWORD *)(a2 + 7);
        *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
        *(_OWORD *)(a1 + 7) = v18;
        *(_OWORD *)(a1 + 5) = v17;
        *(_OWORD *)(a1 + 3) = v16;
        *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
        *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
        *(double *)a2 = v15;
        *(_OWORD *)(a2 + 5) = v39;
        *(_OWORD *)(a2 + 7) = v43;
        *(_OWORD *)(a2 + 9) = v47;
        *(_OWORD *)(a2 + 1) = v31;
        *(_OWORD *)(a2 + 3) = v35;
        result = v27;
        *(__n128 *)(a2 + 11) = v27;
      }
    }
  }
  else
  {
    v5 = (__int128 *)(a1 + 1);
    v6 = (__n128 *)(a1 + 11);
    if (v4 >= result.n128_f64[0])
    {
      v7 = *(double *)a1;
      v40 = *(_OWORD *)(a1 + 5);
      v44 = *(_OWORD *)(a1 + 7);
      v48 = *(_OWORD *)(a1 + 9);
      v32 = *v5;
      v36 = *(_OWORD *)(a1 + 3);
      v28 = *v6;
      *a1 = *a2;
      v19 = *(_OWORD *)(a2 + 3);
      v20 = *(_OWORD *)(a2 + 5);
      v21 = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 9) = v21;
      *(_OWORD *)(a1 + 3) = v19;
      *(_OWORD *)(a1 + 5) = v20;
      *v5 = *(_OWORD *)(a2 + 1);
      *v6 = *(__n128 *)(a2 + 11);
      *(double *)a2 = v7;
      *(_OWORD *)(a2 + 3) = v36;
      *(_OWORD *)(a2 + 5) = v40;
      *(_OWORD *)(a2 + 7) = v44;
      *(_OWORD *)(a2 + 9) = v48;
      *(_OWORD *)(a2 + 1) = v32;
      result.n128_u64[1] = v28.n128_u64[1];
      *(__n128 *)(a2 + 11) = v28;
      result.n128_u64[0] = a3[12];
      if (result.n128_f64[0] >= *((double *)a2 + 12))
        return result;
      v37 = *(_OWORD *)(a2 + 5);
      v41 = *(_OWORD *)(a2 + 7);
      v45 = *(_OWORD *)(a2 + 9);
      v29 = *(_OWORD *)(a2 + 1);
      v33 = *(_OWORD *)(a2 + 3);
      v25 = *(__n128 *)(a2 + 11);
      *a2 = *a3;
      v22 = *(_OWORD *)(a3 + 3);
      v23 = *(_OWORD *)(a3 + 5);
      v24 = *(_OWORD *)(a3 + 9);
      *(_OWORD *)(a2 + 7) = *(_OWORD *)(a3 + 7);
      *(_OWORD *)(a2 + 9) = v24;
      *(_OWORD *)(a2 + 3) = v22;
      *(_OWORD *)(a2 + 5) = v23;
      *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
      *(_OWORD *)(a2 + 11) = *(_OWORD *)(a3 + 11);
    }
    else
    {
      v7 = *(double *)a1;
      v37 = *(_OWORD *)(a1 + 5);
      v41 = *(_OWORD *)(a1 + 7);
      v45 = *(_OWORD *)(a1 + 9);
      v29 = *v5;
      v33 = *(_OWORD *)(a1 + 3);
      v25 = *v6;
      *a1 = *a3;
      v8 = *(_OWORD *)(a3 + 3);
      v9 = *(_OWORD *)(a3 + 5);
      v10 = *(_OWORD *)(a3 + 9);
      *(_OWORD *)(a1 + 7) = *(_OWORD *)(a3 + 7);
      *(_OWORD *)(a1 + 9) = v10;
      *(_OWORD *)(a1 + 3) = v8;
      *(_OWORD *)(a1 + 5) = v9;
      *v5 = *(_OWORD *)(a3 + 1);
      *v6 = *(__n128 *)(a3 + 11);
    }
    *(double *)a3 = v7;
    *(_OWORD *)(a3 + 3) = v33;
    *(_OWORD *)(a3 + 5) = v37;
    *(_OWORD *)(a3 + 7) = v41;
    *(_OWORD *)(a3 + 9) = v45;
    *(_OWORD *)(a3 + 1) = v29;
    result = v25;
    *(__n128 *)(a3 + 11) = v25;
  }
  return result;
}

BOOL sub_20EE00810(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  double v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;

  v4 = 0x4EC4EC4EC4EC4EC5 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(double *)(a2 - 8) < *(double *)(a1 + 96))
      {
        v6 = *(_QWORD *)a1;
        v55 = *(_OWORD *)(a1 + 40);
        v60 = *(_OWORD *)(a1 + 56);
        v65 = *(_OWORD *)(a1 + 72);
        v45 = *(_OWORD *)(a1 + 8);
        v50 = *(_OWORD *)(a1 + 24);
        v41 = *(_OWORD *)(a1 + 88);
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 104);
        v7 = *(_OWORD *)(a2 - 80);
        v8 = *(_OWORD *)(a2 - 64);
        v9 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 56) = v9;
        *(_OWORD *)(a1 + 40) = v8;
        *(_OWORD *)(a1 + 24) = v7;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 104) = v6;
        *(_OWORD *)(a2 - 64) = v55;
        *(_OWORD *)(a2 - 48) = v60;
        *(_OWORD *)(a2 - 96) = v45;
        *(_OWORD *)(a2 - 80) = v50;
        *(_OWORD *)(a2 - 32) = v65;
        *(_OWORD *)(a2 - 16) = v41;
      }
      return result;
    case 3:
      sub_20EE00508((uint64_t *)a1, (uint64_t *)(a1 + 104), (uint64_t *)(a2 - 104));
      return 1;
    case 4:
      sub_20EE00508((uint64_t *)a1, (uint64_t *)(a1 + 104), (uint64_t *)(a1 + 208));
      if (*(double *)(a2 - 8) >= *(double *)(a1 + 304))
        return 1;
      v26 = *(_QWORD *)(a1 + 208);
      v57 = *(_OWORD *)(a1 + 248);
      v62 = *(_OWORD *)(a1 + 264);
      v67 = *(_OWORD *)(a1 + 280);
      v47 = *(_OWORD *)(a1 + 216);
      v52 = *(_OWORD *)(a1 + 232);
      v42 = *(_OWORD *)(a1 + 296);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 - 104);
      v27 = *(_OWORD *)(a2 - 80);
      v28 = *(_OWORD *)(a2 - 64);
      v29 = *(_OWORD *)(a2 - 48);
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 264) = v29;
      *(_OWORD *)(a1 + 248) = v28;
      *(_OWORD *)(a1 + 232) = v27;
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 - 16);
      *(_QWORD *)(a2 - 104) = v26;
      *(_OWORD *)(a2 - 64) = v57;
      *(_OWORD *)(a2 - 48) = v62;
      *(_OWORD *)(a2 - 96) = v47;
      *(_OWORD *)(a2 - 80) = v52;
      *(_OWORD *)(a2 - 32) = v67;
      *(_OWORD *)(a2 - 16) = v42;
      if (*(double *)(a1 + 304) >= *(double *)(a1 + 200))
        return 1;
      v30 = *(_QWORD *)(a1 + 104);
      v58 = *(_OWORD *)(a1 + 144);
      v63 = *(_OWORD *)(a1 + 160);
      v68 = *(_OWORD *)(a1 + 176);
      v48 = *(_OWORD *)(a1 + 112);
      v53 = *(_OWORD *)(a1 + 128);
      v43 = *(_OWORD *)(a1 + 192);
      v31 = *(_QWORD *)(a1 + 208);
      *(_QWORD *)(a1 + 104) = v31;
      v32 = *(_OWORD *)(a1 + 216);
      v33 = *(_OWORD *)(a1 + 232);
      v34 = *(_OWORD *)(a1 + 264);
      v35 = *(_OWORD *)(a1 + 280);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a1 + 248);
      *(_OWORD *)(a1 + 160) = v34;
      *(_OWORD *)(a1 + 112) = v32;
      *(_OWORD *)(a1 + 128) = v33;
      v36 = *(_OWORD *)(a1 + 296);
      *(_OWORD *)(a1 + 176) = v35;
      *(_OWORD *)(a1 + 192) = v36;
      *(_QWORD *)(a1 + 208) = v30;
      *(_OWORD *)(a1 + 264) = v63;
      *(_OWORD *)(a1 + 280) = v68;
      *(_OWORD *)(a1 + 232) = v53;
      *(_OWORD *)(a1 + 248) = v58;
      *(_OWORD *)(a1 + 216) = v48;
      *(_QWORD *)&v33 = *(_QWORD *)(a1 + 200);
      v37 = *(double *)(a1 + 96);
      *(_OWORD *)(a1 + 296) = v43;
      if (*(double *)&v33 >= v37)
        return 1;
      v38 = *(_QWORD *)a1;
      v59 = *(_OWORD *)(a1 + 40);
      v64 = *(_OWORD *)(a1 + 56);
      v69 = *(_OWORD *)(a1 + 72);
      v49 = *(_OWORD *)(a1 + 8);
      v54 = *(_OWORD *)(a1 + 24);
      v44 = *(_OWORD *)(a1 + 88);
      *(_QWORD *)a1 = v31;
      v39 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 24) = v39;
      v40 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(a1 + 56) = v40;
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 192);
      *(_QWORD *)(a1 + 104) = v38;
      *(_OWORD *)(a1 + 160) = v64;
      *(_OWORD *)(a1 + 176) = v69;
      *(_OWORD *)(a1 + 112) = v49;
      *(_OWORD *)(a1 + 128) = v54;
      *(_OWORD *)(a1 + 144) = v59;
      result = 1;
      *(_OWORD *)(a1 + 192) = v44;
      return result;
    case 5:
      sub_20EE0005C(a1, a1 + 104, a1 + 208, (uint64_t *)(a1 + 312), (uint64_t *)(a2 - 104));
      return 1;
    default:
      v10 = a1 + 208;
      sub_20EE00508((uint64_t *)a1, (uint64_t *)(a1 + 104), (uint64_t *)(a1 + 208));
      v11 = a1 + 312;
      if (a1 + 312 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v11 + 96);
    if (v15 < *(double *)(v10 + 96))
    {
      v16 = *(_QWORD *)v11;
      v56 = *(_OWORD *)(v11 + 40);
      v61 = *(_OWORD *)(v11 + 56);
      v66 = *(_OWORD *)(v11 + 72);
      v46 = *(_OWORD *)(v11 + 8);
      v51 = *(_OWORD *)(v11 + 24);
      v17 = v12;
      v18 = *(_QWORD *)(v11 + 88);
      do
      {
        v19 = a1 + v17;
        *(_QWORD *)(v19 + 312) = *(_QWORD *)(a1 + v17 + 208);
        v20 = (_OWORD *)(a1 + v17 + 216);
        v21 = *(_OWORD *)(a1 + v17 + 232);
        v22 = *(_OWORD *)(a1 + v17 + 248);
        *(_OWORD *)(v19 + 320) = *v20;
        *(_OWORD *)(v19 + 336) = v21;
        v23 = *(_OWORD *)(a1 + v17 + 264);
        v24 = *(_OWORD *)(a1 + v17 + 280);
        *(_OWORD *)(v19 + 352) = v22;
        *(_OWORD *)(v19 + 368) = v23;
        v25 = *(_OWORD *)(a1 + v17 + 296);
        *(_OWORD *)(v19 + 384) = v24;
        *(_OWORD *)(v19 + 400) = v25;
        if (v17 == -208)
        {
          v14 = a1;
          goto LABEL_7;
        }
        v17 -= 104;
      }
      while (v15 < *(double *)(v19 + 200));
      v14 = a1 + v17 + 312;
LABEL_7:
      *(_QWORD *)v14 = v16;
      *(_OWORD *)(v19 + 232) = v51;
      *(_OWORD *)(v19 + 248) = v56;
      *(_OWORD *)(v19 + 216) = v46;
      v20[3] = v61;
      v20[4] = v66;
      *(_QWORD *)(v19 + 296) = v18;
      ++v13;
      *(double *)(v14 + 96) = v15;
      if (v13 == 8)
        return v11 + 104 == a2;
    }
    v10 = v11;
    v12 += 104;
    v11 += 104;
    if (v11 == a2)
      return 1;
  }
}

void sub_20EE00C8C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E9CA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EE00C9C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E9CA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE00CCC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  sub_20E8E7EB0(a1 + 2000);
  v2 = *(void **)(a1 + 1976);
  if (v2)
  {
    *(_QWORD *)(a1 + 1984) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 1952);
  if (v3)
  {
    *(_QWORD *)(a1 + 1960) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 1928);
  if (v4)
  {
    *(_QWORD *)(a1 + 1936) = v4;
    operator delete(v4);
  }
  v5 = *(_QWORD **)(a1 + 1904);
  while (v5)
  {
    v10 = v5;
    v5 = (_QWORD *)*v5;
    v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    operator delete(v10);
  }
  v6 = *(void **)(a1 + 1888);
  *(_QWORD *)(a1 + 1888) = 0;
  if (v6)
    operator delete(v6);
  sub_20E8D03C0(a1 + 1864, *(_QWORD **)(a1 + 1872));
  v7 = *(std::__shared_weak_count **)(a1 + 1856);
  if (!v7)
    return sub_20EDB7620(a1 + 24);
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return sub_20EDB7620(a1 + 24);
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return sub_20EDB7620(a1 + 24);
}

void sub_20EE00E00(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E9CF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EE00E10(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E9CF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE00E40(uint64_t a1)
{
  return sub_20E9DF188(a1 + 24);
}

void sub_20EE00E4C(uint64_t a1, unsigned int a2, int a3, unint64_t a4, unsigned int a5, float a6)
{
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;

  *(float *)(a1 + 16) = a6;
  if (HIDWORD(a4))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatching/include/VIO/FeatureMatching/FeatureMatcher.h", 570, (uint64_t)"max_num_features <= std::numeric_limits<IntFeatureIndex>::max()", 63, (uint64_t)"IntFeatureIndex is too small.", 29, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_29;
    }
    a6 = *(float *)(a1 + 16);
  }
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 12) = (float)(a6 * (float)((float)(a6 * (float)a2) * (float)a2));
  v11 = (unint64_t)(float)(ceilf(1.0 / a6) + 2.0);
  v12 = v11 * v11;
  v13 = v11 > 0xFFFFFFFE || v12 > 0xFFFFFFFD;
  v14 = v12 * a5;
  v15 = v13 || v14 > 0xFFFFFFFD;
  v16 = (2 * v14) | 1;
  v17 = v15 || v16 >= 0xFFFFFFFF;
  if (v17
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatching/include/VIO/FeatureMatching/FeatureMatcher.h", 587, (uint64_t)"num_bins < std::numeric_limits<IntBinIndex>::max() && num_bins * num_bins + 1 < std::numeric_limits<IntBinIndex>::max() && num_bins * num_bins * num_bins_multiplier + 1 < std::numeric_limits<IntBinIndex>::max() && (!ENABLE_MINMAX_BINNING || num_bins * num_bins * num_bins_multiplier * 2 + 1 < std::numeric_limits<IntBinIndex>::max())", 333, (uint64_t)"IntBinIndex is too small.", 25, (void (*)(void **))sub_21023DDB0))
  {
LABEL_29:
    abort();
  }
  v18 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 20) = v11;
  *(_DWORD *)(a1 + 24) = a5;
  v19 = (2 * v12 * a5) | 1;
  v20 = (*(_QWORD *)(a1 + 40) - v18) >> 2;
  if (v19 <= v20)
  {
    if (v19 < v20)
      *(_QWORD *)(a1 + 40) = v18 + 4 * v19;
  }
  else
  {
    sub_20E93DC84(a1 + 32, v19 - v20);
  }
  v21 = *(_QWORD *)(a1 + 56);
  v22 = (*(_QWORD *)(a1 + 64) - v21) >> 4;
  if (a4 <= v22)
  {
    if (a4 < v22)
      *(_QWORD *)(a1 + 64) = v21 + 16 * a4;
  }
  else
  {
    sub_20EE0102C((char **)(a1 + 56), a4 - v22);
  }
  v23 = *(_QWORD *)(a1 + 104);
  v24 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 112) - v23) >> 2);
  if (a4 <= v24)
  {
    if (a4 < v24)
      *(_QWORD *)(a1 + 112) = v23 + 12 * a4;
  }
  else
  {
    sub_20EE01230((void **)(a1 + 104), a4 - v24);
  }
  **(_DWORD **)(a1 + 32) = 0;
}

void sub_20EE0102C(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;

  v5 = a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      v13 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v13 < 7)
        goto LABEL_35;
      v14 = v13 + 1;
      v6 = &v5[16 * (v14 & 0x1FFFFFFFFFFFFFF8)];
      v15 = v5 + 64;
      v16 = v14 & 0x1FFFFFFFFFFFFFF8;
      do
      {
        *(v15 - 2) = xmmword_210379400;
        *(v15 - 1) = xmmword_210379400;
        *(v15 - 4) = xmmword_210379400;
        *(v15 - 3) = xmmword_210379400;
        v15[2] = xmmword_210379400;
        v15[3] = xmmword_210379400;
        *v15 = xmmword_210379400;
        v15[1] = xmmword_210379400;
        v15 += 8;
        v16 -= 8;
      }
      while (v16);
      if (v14 != (v14 & 0x1FFFFFFFFFFFFFF8))
      {
LABEL_35:
        do
        {
          *(_OWORD *)v6 = xmmword_210379400;
          v6 += 16;
        }
        while (v6 != &v5[16 * a2]);
      }
      v6 = &v5[16 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = *a1;
    v8 = (v5 - *a1) >> 4;
    v9 = v8 + a2;
    if ((v8 + a2) >> 60)
      sub_20E867F44();
    v10 = v4 - v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 60)
        sub_20E877A38();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v17 = &v12[16 * v8];
    v18 = &v17[16 * a2];
    v19 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
    v20 = v17;
    if (v19 < 7)
      goto LABEL_36;
    v21 = v19 + 1;
    v20 = &v17[16 * (v21 & 0x1FFFFFFFFFFFFFF8)];
    v22 = v17 + 64;
    v23 = v21 & 0x1FFFFFFFFFFFFFF8;
    do
    {
      *(v22 - 2) = xmmword_210379400;
      *(v22 - 1) = xmmword_210379400;
      *(v22 - 4) = xmmword_210379400;
      *(v22 - 3) = xmmword_210379400;
      v22[2] = xmmword_210379400;
      v22[3] = xmmword_210379400;
      *v22 = xmmword_210379400;
      v22[1] = xmmword_210379400;
      v22 += 8;
      v23 -= 8;
    }
    while (v23);
    if (v21 != (v21 & 0x1FFFFFFFFFFFFFF8))
    {
LABEL_36:
      do
      {
        *(_OWORD *)v20 = xmmword_210379400;
        v20 += 16;
      }
      while (v20 != v18);
    }
    v24 = &v12[16 * v11];
    if (v5 == v7)
    {
      v26 = *a1;
      *a1 = v17;
      a1[1] = v18;
      a1[2] = v24;
      if (v26)
LABEL_28:
        operator delete(v26);
    }
    else
    {
      do
      {
        v25 = v17 - 16;
        *((_OWORD *)v17 - 1) = *((_OWORD *)v6 - 1);
        v6 -= 16;
        v17 -= 16;
      }
      while (v6 != v7);
      v26 = *a1;
      *a1 = v25;
      a1[1] = v18;
      a1[2] = v24;
      if (v26)
        goto LABEL_28;
    }
  }
}

void sub_20EE01230(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *i;
  uint64_t v23;
  int v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2) >= a2)
  {
    if (!a2)
    {
LABEL_29:
      a1[1] = v5;
      return;
    }
    v12 = &v5[12 * a2];
    v13 = 12 * a2 - 12;
    if (v13 >= 0x54)
    {
      v26 = v13 / 0xC + 1;
      v14 = &v5[12 * (v26 & 0x3FFFFFFFFFFFFFF8)];
      v27 = v26 & 0x3FFFFFFFFFFFFFF8;
      do
      {
        *(_OWORD *)v5 = xmmword_210379430;
        *((_OWORD *)v5 + 1) = xmmword_210379420;
        *((_OWORD *)v5 + 4) = xmmword_210379420;
        *((_OWORD *)v5 + 5) = xmmword_210379410;
        *((_OWORD *)v5 + 2) = xmmword_210379410;
        *((_OWORD *)v5 + 3) = xmmword_210379430;
        v5 += 96;
        v27 -= 8;
      }
      while (v27);
      if (v26 == (v26 & 0x3FFFFFFFFFFFFFF8))
        goto LABEL_28;
    }
    else
    {
      v14 = (char *)a1[1];
    }
    do
    {
      *(_QWORD *)v14 = 0xFFFFFFFF80000000;
      *((_DWORD *)v14 + 2) = 0;
      v14 += 12;
    }
    while (v14 != v12);
LABEL_28:
    v5 = v12;
    goto LABEL_29;
  }
  v6 = (char *)*a1;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 2);
  v8 = v7 + a2;
  if (v7 + a2 > 0x1555555555555555)
    sub_20E867F44();
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 2);
  if (2 * v9 > v8)
    v8 = 2 * v9;
  if (v9 >= 0xAAAAAAAAAAAAAAALL)
    v10 = 0x1555555555555555;
  else
    v10 = v8;
  if (v10)
  {
    if (v10 > 0x1555555555555555)
      sub_20E877A38();
    v11 = (char *)operator new(12 * v10);
  }
  else
  {
    v11 = 0;
  }
  v15 = &v11[12 * v7];
  v16 = &v15[12 * a2];
  v17 = 12 * a2 - 12;
  v18 = v15;
  if (v17 < 0x54)
    goto LABEL_35;
  v19 = v17 / 0xC + 1;
  v18 = &v15[12 * (v19 & 0x3FFFFFFFFFFFFFF8)];
  v20 = v19 & 0x3FFFFFFFFFFFFFF8;
  v21 = &v11[12 * v7];
  do
  {
    *(_OWORD *)v21 = xmmword_210379430;
    *((_OWORD *)v21 + 1) = xmmword_210379420;
    *((_OWORD *)v21 + 4) = xmmword_210379420;
    *((_OWORD *)v21 + 5) = xmmword_210379410;
    *((_OWORD *)v21 + 2) = xmmword_210379410;
    *((_OWORD *)v21 + 3) = xmmword_210379430;
    v21 += 96;
    v20 -= 8;
  }
  while (v20);
  if (v19 != (v19 & 0x3FFFFFFFFFFFFFF8))
  {
LABEL_35:
    do
    {
      *(_QWORD *)v18 = 0xFFFFFFFF80000000;
      *((_DWORD *)v18 + 2) = 0;
      v18 += 12;
    }
    while (v18 != v16);
  }
  for (i = &v11[12 * v10]; v5 != v6; *((_DWORD *)v15 + 2) = v24)
  {
    v23 = *(_QWORD *)(v5 - 12);
    v5 -= 12;
    v24 = *((_DWORD *)v5 + 2);
    *(_QWORD *)(v15 - 12) = v23;
    v15 -= 12;
  }
  v25 = *a1;
  *a1 = v15;
  a1[1] = v16;
  a1[2] = i;
  if (v25)
    operator delete(v25);
}

__n128 sub_20EE0149C@<Q0>(uint64_t a1@<X0>, float *a2@<X1>, float *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  _DWORD *v9;
  uint64_t v10;
  float *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  float *v18;
  BOOL v19;
  int v20;
  __int128 v21;
  __n128 result;

  v5 = *(_QWORD *)(a1 + 8);
  LODWORD(v6) = *(_DWORD *)a1;
  v7 = ((unint64_t)(*(_QWORD *)(a1 + 16) - v5) >> 2) - *(_DWORD *)a1;
  if (a2 != a3)
  {
    v8 = 0;
    v9 = *(_DWORD **)(a4 + 48);
    v10 = **(_QWORD **)(a4 + 40);
    v11 = a2 + 19;
    do
    {
      v17 = *((_DWORD *)v11 - 19);
      v16 = *((_DWORD *)v11 - 18);
      v18 = v11 - 19;
      v19 = v17 >= 6 && v16 >= 6;
      if (v19 && v17 < **(_DWORD **)a4 - 6 && v16 < **(_DWORD **)(a4 + 8) - 6)
      {
        if (*((_BYTE *)v11 - 4))
          v20 = 0;
        else
          v20 = **(_DWORD **)(a4 + 24);
        v12 = vcvtms_u32_f32(*v11 * **(float **)(a4 + 16)) % 0x12 + 1 + v20;
      }
      else
      {
        v12 = 0;
        ++**(_DWORD **)(a4 + 32);
      }
      v13 = *v9;
      v14 = v10 + 16 * v13;
      *(_DWORD *)(v14 + 12) = v13;
      *(_QWORD *)v14 = 0xFFFFFFFF80000000;
      ++*v9;
      v15 = 4 * (v12 + v7);
      *(_DWORD *)(v5 + 4 * *(unsigned int *)(v5 + v15)) = v8;
      *(_DWORD *)(v5 + v15) = v8++;
      v11 += 22;
    }
    while (v18 + 22 != a3);
    LODWORD(v6) = *(_DWORD *)a1;
  }
  if ((_DWORD)v6)
  {
    v6 = v6;
    do
    {
      *(_DWORD *)(v5 + 4 * *(unsigned int *)(v5 + 4 * v7)) = v7;
      ++v7;
      --v6;
    }
    while (v6);
  }
  v21 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)a5 = *(_OWORD *)a4;
  *(_OWORD *)(a5 + 16) = v21;
  result = *(__n128 *)(a4 + 32);
  *(__n128 *)(a5 + 32) = result;
  *(_QWORD *)(a5 + 48) = *(_QWORD *)(a4 + 48);
  return result;
}

void sub_20EE015F4(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      memset(v5, 255, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = v5 - (_BYTE *)*a1;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_20E867F44();
    v11 = v4 - v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_20E877A38();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    memset(v14, 255, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_30;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_30;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
      operator delete(v6);
  }
}

uint64_t sub_20EE0179C(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;

  v6 = sub_20EDEF2FC(a1, (__int128 *)a2);
  *(_QWORD *)v6 = &off_24C9E9D90;
  *(_OWORD *)(v6 + 784) = *a3;
  *(_QWORD *)(v6 + 800) = 0;
  if (*(_BYTE *)(a2 + 64))
  {
    v7 = *(_OWORD *)a2;
    v8 = *(_OWORD *)(a2 + 16);
    v9 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 417) = *(_OWORD *)(a2 + 41);
    *(_OWORD *)(a1 + 392) = v8;
    *(_OWORD *)(a1 + 408) = v9;
    *(_OWORD *)(a1 + 376) = v7;
  }
  *(_QWORD *)(a1 + 448) = 0x3FE08057619F0FB4;
  v10 = operator new();
  *(_BYTE *)v10 = 0;
  v11 = *(_OWORD *)(a1 + 224);
  *(_OWORD *)(v10 + 8) = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(v10 + 24) = v11;
  v12 = *(_OWORD *)(a1 + 256);
  *(_OWORD *)(v10 + 40) = *(_OWORD *)(a1 + 240);
  *(_OWORD *)(v10 + 56) = v12;
  *(_OWORD *)(v10 + 72) = *(_OWORD *)(a1 + 784);
  *(_BYTE *)(v10 + 96) = 0;
  *(_BYTE *)(v10 + 104) = 0;
  *(_QWORD *)(v10 + 112) = 5000;
  *(_QWORD *)(v10 + 272) = 0;
  *(_OWORD *)(v10 + 240) = 0u;
  *(_OWORD *)(v10 + 256) = 0u;
  *(_OWORD *)(v10 + 208) = 0u;
  *(_OWORD *)(v10 + 224) = 0u;
  *(_QWORD *)(v10 + 184) = 0;
  *(_OWORD *)(v10 + 168) = 0u;
  *(_OWORD *)(v10 + 152) = 0u;
  *(_OWORD *)(v10 + 136) = 0u;
  *(_OWORD *)(v10 + 120) = 0u;
  *(_OWORD *)(v10 + 280) = xmmword_210378C68;
  *(_OWORD *)(v10 + 296) = unk_210378C78;
  *(_BYTE *)(v10 + 312) = 0;
  *(_BYTE *)(v10 + 360) = 0;
  *(_BYTE *)(v10 + 368) = 0;
  *(_BYTE *)(v10 + 376) = 0;
  *(_WORD *)(v10 + 384) = 0;
  *(_BYTE *)(v10 + 392) = 0;
  *(_QWORD *)(v10 + 88) = 360000000000;
  *(_OWORD *)(v10 + 400) = xmmword_210378C20;
  *(_OWORD *)(v10 + 416) = xmmword_210378C30;
  *(_QWORD *)(v10 + 432) = 0x3FD3B3354C12274ALL;
  v13 = *(_QWORD *)(a1 + 800);
  *(_QWORD *)(a1 + 800) = v10;
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 128);
    if (v14)
    {
      v15 = *(_QWORD *)(v13 + 136);
      v16 = *(void **)(v13 + 128);
      if (v15 != v14)
      {
        v17 = *(_QWORD *)(v13 + 136);
        do
        {
          v19 = *(void **)(v17 - 24);
          v17 -= 24;
          v18 = v19;
          if (v19)
          {
            *(_QWORD *)(v15 - 16) = v18;
            operator delete(v18);
          }
          v15 = v17;
        }
        while (v17 != v14);
        v16 = *(void **)(v13 + 128);
      }
      *(_QWORD *)(v13 + 136) = v14;
      operator delete(v16);
    }
    MEMORY[0x212BC6398](v13, 0x1020C40917B7221);
  }
  return a1;
}

void sub_20EE01970(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  sub_20EE0198C(v2);
  sub_20EDF00D0(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EE0198C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 128);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 136);
      v5 = *(void **)(v2 + 128);
      if (v4 != v3)
      {
        v6 = *(_QWORD *)(v2 + 136);
        do
        {
          v8 = *(void **)(v6 - 24);
          v6 -= 24;
          v7 = v8;
          if (v8)
          {
            *(_QWORD *)(v4 - 16) = v7;
            operator delete(v7);
          }
          v4 = v6;
        }
        while (v6 != v3);
        v5 = *(void **)(v2 + 128);
      }
      *(_QWORD *)(v2 + 136) = v3;
      operator delete(v5);
    }
    MEMORY[0x212BC6398](v2, 0x1020C40917B7221);
  }
  return a1;
}

uint64_t sub_20EE01A24(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4, double a5)
{
  std::mutex *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v35;
  _BYTE v36[144];
  _BYTE v37[144];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _BYTE v42[144];
  _BYTE v43[144];
  __int128 v44;
  __int128 v45;
  char v46;
  _BYTE v47[24];
  _BYTE *v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v10 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v11 = *(_QWORD **)(a1 + 80);
  if (v11)
  {
    v12 = (_QWORD *)(a1 + 80);
    do
    {
      v13 = v11[4];
      v14 = v13 >= a3;
      if (v13 >= a3)
        v15 = v11;
      else
        v15 = v11 + 1;
      if (v14)
        v12 = v11;
      v11 = (_QWORD *)*v15;
    }
    while (*v15);
    if (v12 != (_QWORD *)(a1 + 80) && v12[4] <= a3)
    {
      std::mutex::unlock(v10);
      return 1;
    }
  }
  std::mutex::unlock(v10);
  v16 = (char *)operator new(0xDA8uLL);
  *(_OWORD *)(v16 + 8) = 0u;
  *(_QWORD *)v16 = &off_24C9E96C0;
  bzero(v16 + 24, 0xD90uLL);
  *((_DWORD *)v16 + 8) = -1;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *((_DWORD *)v16 + 22) = 0;
  *((_OWORD *)v16 + 7) = 0u;
  *((_OWORD *)v16 + 8) = 0u;
  *((_OWORD *)v16 + 9) = 0u;
  *((_OWORD *)v16 + 10) = 0u;
  *((_OWORD *)v16 + 11) = 0u;
  *((_OWORD *)v16 + 12) = 0u;
  *((_OWORD *)v16 + 13) = 0u;
  *((_OWORD *)v16 + 14) = 0u;
  *((_OWORD *)v16 + 15) = 0u;
  *((_OWORD *)v16 + 16) = 0u;
  *((_OWORD *)v16 + 17) = 0u;
  *((_OWORD *)v16 + 18) = 0u;
  *((_OWORD *)v16 + 19) = 0u;
  *((_OWORD *)v16 + 20) = 0u;
  *((_OWORD *)v16 + 21) = 0u;
  *((_OWORD *)v16 + 6) = 0u;
  *(_OWORD *)(v16 + 345) = 0u;
  *((_QWORD *)v16 + 46) = 0xBFF0000000000000;
  *((_QWORD *)v16 + 48) = &off_24C9AFD78;
  *((_OWORD *)v16 + 25) = 0u;
  *((_OWORD *)v16 + 26) = 0u;
  *((_OWORD *)v16 + 27) = 0u;
  *(_OWORD *)(v16 + 441) = 0u;
  *(_OWORD *)(v16 + 472) = 0u;
  *(_OWORD *)(v16 + 488) = 0u;
  *(_OWORD *)(v16 + 504) = 0u;
  *(_OWORD *)(v16 + 520) = 0u;
  *(_OWORD *)(v16 + 536) = 0u;
  *(_OWORD *)(v16 + 552) = 0u;
  *(_OWORD *)(v16 + 568) = 0u;
  *(_OWORD *)(v16 + 584) = 0u;
  *(_OWORD *)(v16 + 600) = 0u;
  *(_OWORD *)(v16 + 616) = 0u;
  *(_OWORD *)(v16 + 632) = 0u;
  *(_OWORD *)(v16 + 648) = 0u;
  *(_OWORD *)(v16 + 664) = 0u;
  *((_QWORD *)v16 + 85) = 0;
  *((_QWORD *)v16 + 86) = 0xBFF0000000000000;
  *((_OWORD *)v16 + 51) = 0u;
  *((_OWORD *)v16 + 52) = 0u;
  *((_OWORD *)v16 + 49) = 0u;
  *((_OWORD *)v16 + 50) = 0u;
  *((_OWORD *)v16 + 47) = 0u;
  *((_OWORD *)v16 + 48) = 0u;
  v16[712] = 0;
  *(_OWORD *)(v16 + 696) = 0u;
  *((_QWORD *)v16 + 106) = &off_24C9AFD78;
  *(_OWORD *)(v16 + 905) = 0u;
  *((_OWORD *)v16 + 55) = 0u;
  *((_OWORD *)v16 + 56) = 0u;
  *((_OWORD *)v16 + 54) = 0u;
  *(_OWORD *)(v16 + 936) = 0u;
  *(_OWORD *)(v16 + 952) = 0u;
  *(_OWORD *)(v16 + 968) = 0u;
  *(_OWORD *)(v16 + 984) = 0u;
  *(_OWORD *)(v16 + 1000) = 0u;
  *((_QWORD *)v16 + 127) = &off_24C9AFD78;
  *(_OWORD *)(v16 + 1032) = 0u;
  *(_OWORD *)(v16 + 1048) = 0u;
  *(_OWORD *)(v16 + 1064) = 0u;
  *(_OWORD *)(v16 + 1073) = 0u;
  *((_OWORD *)v16 + 73) = 0u;
  *((_OWORD *)v16 + 74) = 0u;
  *((_OWORD *)v16 + 75) = 0u;
  *((_OWORD *)v16 + 69) = 0u;
  *((_OWORD *)v16 + 70) = 0u;
  *((_OWORD *)v16 + 71) = 0u;
  *(_OWORD *)(v16 + 1148) = 0u;
  v16[1216] = 1;
  *(_OWORD *)(v16 + 1224) = 0u;
  *(_OWORD *)(v16 + 1240) = 0u;
  *(_OWORD *)(v16 + 1256) = 0u;
  *(_OWORD *)(v16 + 1272) = 0u;
  *(_OWORD *)(v16 + 1282) = 0u;
  v16[1352] = 0;
  *(_OWORD *)(v16 + 1336) = 0u;
  *(_OWORD *)(v16 + 1320) = 0u;
  *(_OWORD *)(v16 + 1304) = 0u;
  *((_OWORD *)v16 + 87) = 0u;
  *((_OWORD *)v16 + 86) = 0u;
  *((_OWORD *)v16 + 85) = 0u;
  v16[1408] = 1;
  *(_OWORD *)(v16 + 1416) = 0u;
  *(_OWORD *)(v16 + 1432) = 0u;
  *(_OWORD *)(v16 + 1448) = 0u;
  *(_OWORD *)(v16 + 1464) = 0u;
  *(_OWORD *)(v16 + 1474) = 0u;
  v16[1544] = 0;
  *(_OWORD *)(v16 + 1528) = 0u;
  *(_OWORD *)(v16 + 1512) = 0u;
  *(_OWORD *)(v16 + 1496) = 0u;
  *((_QWORD *)v16 + 194) = &off_24C9AFD78;
  *(_OWORD *)(v16 + 1609) = 0u;
  *((_OWORD *)v16 + 100) = 0u;
  *((_OWORD *)v16 + 99) = 0u;
  *((_OWORD *)v16 + 98) = 0u;
  *((_QWORD *)v16 + 213) = 0;
  *(_OWORD *)(v16 + 1688) = 0u;
  *(_OWORD *)(v16 + 1672) = 0u;
  *(_OWORD *)(v16 + 1656) = 0u;
  *(_OWORD *)(v16 + 1640) = 0u;
  *((_DWORD *)v16 + 428) = 1065353216;
  *(_OWORD *)(v16 + 1768) = 0u;
  *(_OWORD *)(v16 + 1752) = 0u;
  *(_OWORD *)(v16 + 1736) = 0u;
  *((_QWORD *)v16 + 223) = 850045863;
  *((_QWORD *)v16 + 230) = 0;
  *((_OWORD *)v16 + 114) = 0u;
  *((_OWORD *)v16 + 113) = 0u;
  *((_OWORD *)v16 + 112) = 0u;
  *((_QWORD *)v16 + 231) = 0x3FF0000000000000;
  v16[1872] = 0;
  *((_OWORD *)v16 + 116) = 0u;
  bzero(v16 + 1896, 0x2A8uLL);
  *((_QWORD *)v16 + 322) = &off_24C9AFD78;
  *((_OWORD *)v16 + 162) = 0u;
  *((_OWORD *)v16 + 163) = 0u;
  *((_OWORD *)v16 + 164) = 0u;
  *(_OWORD *)(v16 + 2633) = 0u;
  *(_OWORD *)(v16 + 2664) = 0u;
  *(_OWORD *)(v16 + 2680) = 0u;
  *(_OWORD *)(v16 + 2696) = 0u;
  *((_QWORD *)v16 + 339) = 0;
  *((_QWORD *)v16 + 340) = &off_24C9AFD78;
  *((_OWORD *)v16 + 171) = 0u;
  *((_OWORD *)v16 + 172) = 0u;
  *((_OWORD *)v16 + 173) = 0u;
  *(_OWORD *)(v16 + 2777) = 0u;
  *(_OWORD *)(v16 + 2808) = 0u;
  *(_OWORD *)(v16 + 2824) = 0u;
  *(_OWORD *)(v16 + 2840) = 0u;
  *((_QWORD *)v16 + 357) = 0;
  *((_DWORD *)v16 + 716) = 1;
  *(_OWORD *)(v16 + 2872) = 0u;
  *(_OWORD *)(v16 + 2888) = 0u;
  *(_OWORD *)(v16 + 2904) = 0u;
  *(_OWORD *)(v16 + 2920) = 0u;
  *(_OWORD *)(v16 + 2932) = 0u;
  *(_OWORD *)(v16 + 2952) = 0u;
  *(_OWORD *)(v16 + 2968) = 0u;
  *(_OWORD *)(v16 + 2984) = 0u;
  *(_OWORD *)(v16 + 3000) = 0u;
  *(_OWORD *)(v16 + 3016) = 0u;
  *(_OWORD *)(v16 + 3032) = 0u;
  *(_OWORD *)(v16 + 3048) = 0u;
  *(_OWORD *)(v16 + 3064) = 0u;
  *(_OWORD *)(v16 + 3080) = 0u;
  *(_OWORD *)(v16 + 3096) = 0u;
  *(_OWORD *)(v16 + 3112) = 0u;
  *(_OWORD *)(v16 + 3128) = 0u;
  *(_OWORD *)(v16 + 3144) = 0u;
  *(_OWORD *)(v16 + 3160) = 0u;
  *(_OWORD *)(v16 + 3176) = 0u;
  *(_OWORD *)(v16 + 3192) = 0u;
  *(_OWORD *)(v16 + 3208) = 0u;
  *(_OWORD *)(v16 + 3224) = 0u;
  *(_OWORD *)(v16 + 3240) = 0u;
  *(_OWORD *)(v16 + 3256) = 0u;
  *(_OWORD *)(v16 + 3272) = 0u;
  *(_OWORD *)(v16 + 3288) = 0u;
  *(_OWORD *)(v16 + 3304) = 0u;
  *(_OWORD *)(v16 + 3320) = 0u;
  *(_OWORD *)(v16 + 3336) = 0u;
  *(_OWORD *)(v16 + 3352) = 0u;
  *(_OWORD *)(v16 + 3368) = 0u;
  *(_OWORD *)(v16 + 3384) = 0u;
  *(_OWORD *)(v16 + 3400) = 0u;
  *(_OWORD *)(v16 + 3416) = 0u;
  *(_OWORD *)(v16 + 3432) = 0u;
  v16[3448] = 0;
  *((_WORD *)v16 + 1744) = 0;
  *((_OWORD *)v16 + 217) = 0u;
  *((_OWORD *)v16 + 216) = 0u;
  *(_QWORD *)&v40 = v16 + 24;
  *((_QWORD *)&v40 + 1) = v16;
  v17 = *(_QWORD *)(a1 + 800);
  LOBYTE(v41) = 0;
  v46 = 0;
  v18 = sub_20EDE2C2C(v17, a2, (uint64_t *)&v40, a4, (uint64_t)&v41, a5);
  if (v46)
    sub_20EDB5CD0(&v41);
  if (!(_DWORD)v18)
  {
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 120);
    v20 = *(unsigned __int16 *)(a1 + 372);
    v35 = a1;
    sub_20EDB79B8((uint64_t)v36, a2);
    sub_20EDB79B8((uint64_t)v37, (uint64_t)a4);
    v38 = v40;
    if (*((_QWORD *)&v40 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    *(_QWORD *)&v39 = a3;
    *((double *)&v39 + 1) = a5;
    if (!*(_BYTE *)(a1 + 370))
    {
      v30 = *(_QWORD *)(v35 + 800);
      LOBYTE(v41) = 0;
      v46 = 0;
      sub_20EDE2F6C(a5, v30, (uint64_t *)&v38, (uint64_t)v36, (uint64_t)&v41);
      if (v46)
        sub_20EDB5CD0(&v41);
      sub_20EDE4338(*(_QWORD *)(v35 + 800), v38, (uint64_t)v36, (uint64_t)v37);
      sub_20EDB4B60((uint64_t *)&v38, v39, (std::mutex *)(v35 + 8));
      goto LABEL_29;
    }
    v23 = *(_QWORD *)(a1 + 8 * (v19 % v20) + 640);
    v41 = v35;
    sub_20EDEE370((uint64_t)v42, (uint64_t)v36);
    sub_20EDEE370((uint64_t)v43, (uint64_t)v37);
    v44 = v38;
    v38 = 0uLL;
    v45 = v39;
    v48 = 0;
    v24 = operator new(0x150uLL);
    v25 = v41;
    *v24 = &off_24C9E9DF0;
    v24[1] = v25;
    sub_20EDEE370((uint64_t)(v24 + 2), (uint64_t)v42);
    sub_20EDEE370((uint64_t)(v24 + 20), (uint64_t)v43);
    v26 = v44;
    v44 = 0uLL;
    v27 = v45;
    *((_OWORD *)v24 + 19) = v26;
    *((_OWORD *)v24 + 20) = v27;
    v48 = v24;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v23 + 40))(v23, v47);
    v28 = v48;
    if (v48 == v47)
    {
      v29 = 4;
      v28 = v47;
    }
    else
    {
      if (!v48)
      {
LABEL_28:
        sub_20EE0221C(&v41);
LABEL_29:
        sub_20EE0221C(&v35);
        goto LABEL_30;
      }
      v29 = 5;
    }
    (*(void (**)(void))(*v28 + 8 * v29))();
    goto LABEL_28;
  }
LABEL_30:
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  return v18;
}

void sub_20EE02054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52)
{
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v55;
  uint64_t v56;

  v55 = *(_QWORD **)(v53 - 120);
  if (v55 == v52)
  {
    v56 = 4;
    v55 = (_QWORD *)(v53 - 144);
  }
  else
  {
    if (!v55)
      goto LABEL_6;
    v56 = 5;
  }
  (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_6:
  sub_20EE0221C(&a52);
  sub_20EE0221C(&a9);
  sub_20E86665C((uint64_t)&a50);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EE0221C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;

  v2 = (std::__shared_weak_count *)a1[38];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      a1[19] = &off_24C9AFD78;
      v5 = (void *)a1[34];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  a1[19] = &off_24C9AFD78;
  v5 = (void *)a1[34];
  if (v5)
  {
LABEL_6:
    a1[35] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[33];
  if (!v6)
    goto LABEL_11;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v9 = (std::__shared_weak_count *)a1[31];
    if (!v9)
      goto LABEL_19;
  }
  else
  {
LABEL_11:
    v9 = (std::__shared_weak_count *)a1[31];
    if (!v9)
      goto LABEL_19;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_19:
  a1[1] = &off_24C9AFD78;
  v12 = (void *)a1[16];
  if (v12)
  {
    a1[17] = v12;
    operator delete(v12);
  }
  v13 = (std::__shared_weak_count *)a1[15];
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v16 = (std::__shared_weak_count *)a1[13];
      if (v16)
        goto LABEL_26;
      return a1;
    }
  }
  v16 = (std::__shared_weak_count *)a1[13];
  if (!v16)
    return a1;
LABEL_26:
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
    return a1;
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  return a1;
}

void sub_20EE023D0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6)
{
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _BYTE v12[56];
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;

  v13 = 0;
  v14 = 0;
  v12[0] = 0;
  v12[48] = 0;
  v15 = 0;
  if (*(_BYTE *)(a5 + 32))
    sub_20EDD65F8(a6, (double *)a5, a2, 0, 5000, &v13, (uint64_t)v12, 0, &v16);
  else
    sub_20EDD5EFC((uint64_t)a2, 1, 0, 5000, &v16);
  v15 = 0;
  v7 = *(_QWORD **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v16;
  if (v7)
  {
    v8 = sub_20EDB6628(v7);
    MEMORY[0x212BC6398](v8, 0x10B0C404CA194E4);
    v15 = 0;
  }
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20EE024CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EDB4DEC((_QWORD **)(v1 - 32));
  sub_20E86665C(v1 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE024EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD **v10;
  _QWORD *v11[2];

  if (sub_20EDB986C())
  {
    v4 = *(unsigned __int8 *)(a1 + 512);
    v5 = 2 * v4;
  }
  else
  {
    v5 = 0;
    LOBYTE(v4) = 0;
  }
  v6 = *(_QWORD *)(a1 + 800);
  *(_QWORD *)(v6 + 96) = v5;
  *(_BYTE *)(v6 + 104) = v4;
  v7 = *(_QWORD *)(a1 + 800);
  *(_BYTE *)v7 = *(_BYTE *)(a1 + 656);
  *(_QWORD *)(v7 + 88) = *(_QWORD *)(a1 + 520);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v11[0] = 0;
  v11[1] = 0;
  v10 = v11;
  sub_20EDEF020(&v10, *(_QWORD **)(a1 + 72), (_QWORD *)(a1 + 80));
  std::mutex::unlock((std::mutex *)(a1 + 8));
  v8 = sub_20EDE9F5C(*(_QWORD *)(a1 + 800), (uint64_t)&v10, a2);
  sub_20E8D03C0((uint64_t)&v10, v11[0]);
  return v8;
}

void sub_20EE025B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_20E8D03C0((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20EE025C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::mutex *v11;

  sub_20E8D03C0((uint64_t)&a10, a11);
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

BOOL sub_20EE025E8(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  _QWORD **v15;
  _QWORD *v16[2];

  if (sub_20EDB986C())
  {
    v9 = *(unsigned __int8 *)(a1 + 512);
    v10 = 2 * v9;
  }
  else
  {
    v10 = 0;
    LOBYTE(v9) = 0;
  }
  v11 = *(_QWORD *)(a1 + 800);
  *(_QWORD *)(v11 + 96) = v10;
  *(_BYTE *)(v11 + 104) = v9;
  v12 = *(_QWORD *)(a1 + 800);
  *(_BYTE *)v12 = *(_BYTE *)(a1 + 656);
  *(_QWORD *)(v12 + 88) = *(_QWORD *)(a1 + 520);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v16[0] = 0;
  v16[1] = 0;
  v15 = v16;
  sub_20EDEF020(&v15, *(_QWORD **)(a1 + 72), (_QWORD *)(a1 + 80));
  std::mutex::unlock((std::mutex *)(a1 + 8));
  v13 = sub_20EDEB3C8(*(_QWORD *)(a1 + 800), (uint64_t)&v15, a2, *(double **)(a1 + 200), a4, a5, 0, 0);
  sub_20E8D03C0((uint64_t)&v15, v16[0]);
  return v13;
}

void sub_20EE026D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_20E8D03C0((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20EE026E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::mutex *v11;

  sub_20E8D03C0((uint64_t)&a10, a11);
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void sub_20EE02708(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  *a1 = &off_24C9E9D90;
  v2 = a1[100];
  a1[100] = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 128);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 136);
      v5 = *(void **)(v2 + 128);
      if (v4 != v3)
      {
        v6 = *(_QWORD *)(v2 + 136);
        do
        {
          v8 = *(void **)(v6 - 24);
          v6 -= 24;
          v7 = v8;
          if (v8)
          {
            *(_QWORD *)(v4 - 16) = v7;
            operator delete(v7);
          }
          v4 = v6;
        }
        while (v6 != v3);
        v5 = *(void **)(v2 + 128);
      }
      *(_QWORD *)(v2 + 136) = v3;
      operator delete(v5);
    }
    MEMORY[0x212BC6398](v2, 0x1020C40917B7221);
  }
  sub_20EDF00D0((uint64_t)a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE027C0(_QWORD *a1)
{
  *a1 = &off_24C9E9DF0;
  sub_20EE0221C(a1 + 1);
  return a1;
}

void sub_20EE027F0(_QWORD *a1)
{
  *a1 = &off_24C9E9DF0;
  sub_20EE0221C(a1 + 1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE02830(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x150uLL);
  *v2 = &off_24C9E9DF0;
  sub_20EE029E0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20EE02870(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE02884(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9E9DF0;
  return sub_20EE029E0((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *sub_20EE028A0(uint64_t a1)
{
  return sub_20EE0221C((_QWORD *)(a1 + 8));
}

void sub_20EE028A8(_QWORD *a1)
{
  sub_20EE0221C(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20EE028D0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  _QWORD v6[206];
  char v7;

  v2 = a1[1];
  v3 = *(_QWORD *)(v2 + 800);
  v4 = *((double *)a1 + 41);
  LOBYTE(v6[0]) = 0;
  v7 = 0;
  sub_20EDE2F6C(v4, v3, a1 + 38, (uint64_t)(a1 + 2), (uint64_t)v6);
  if (v7)
    sub_20EDB5CD0(v6);
  sub_20EDE4338(*(_QWORD *)(v2 + 800), a1[38], (uint64_t)(a1 + 2), (uint64_t)(a1 + 20));
  return sub_20EDB4B60(a1 + 38, a1[40], (std::mutex *)(v2 + 8));
}

uint64_t sub_20EE02968(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3odt28image_detection_and_tracking19TrackerPlanarObject17AddReferenceImageERKNS_3vio8cv_type"
                     "s5ImageIhEEydS8_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3odt28image_detection_and_tracking19TrackerPlanarObject17AddReferenceImageERKNS_3"
                                "vio8cv_types5ImageIhEEydS8_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3odt28image_detection_and_tracking19TrackerPlanarObject17AddReferenceImageERKNS_3vio8cv_types5ImageIhEEydS8_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3odt28image_detection_and_tracking19TrackerPlanarObject17AddReferenceImageERKNS_3vio8cv_types5ImageIhEEydS8_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE029D4()
{
  return &unk_24C9E9E50;
}

uint64_t sub_20EE029E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = a2 + 152;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = a1 + 152;
  sub_20EDB79B8(a1 + 8, a2 + 8);
  sub_20EDB79B8(v5, v4);
  v6 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  return a1;
}

void sub_20EE02A64(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v1[1] = &off_24C9AFD78;
  v3 = (void *)v1[16];
  if (v3)
  {
    v1[17] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)v1[15];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)v1[13];
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE02AFC(_OWORD *a1)
{
  uint64_t v2;
  void (*v3)(_QWORD *, _QWORD *, uint64_t);
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  void *__p;
  void *v9;
  _OWORD *v10;
  uint64_t v11;
  _QWORD v12[3];

  v2 = operator new();
  *(_QWORD *)(v2 + 120) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 109) = 0;
  *(_QWORD *)v2 = &off_24C9C2E20;
  *(_QWORD *)(v2 + 8) = &unk_24C9C2E98;
  *(_QWORD *)(v2 + 152) = &unk_24C9C2EC0;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  v11 = (uint64_t)off_24C9E9E60 + 1;
  v12[0] = a1;
  sub_20EAA459C((uint64_t *)(v2 + 120), &v11);
  if (v11)
  {
    if ((v11 & 1) == 0)
    {
      v3 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v11 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(v12, v12, 2);
    }
    v11 = 0;
  }
  v4 = operator new(0x20uLL);
  v9 = v4 + 2;
  v10 = v4 + 2;
  __p = v4;
  v5 = a1[1];
  *v4 = *a1;
  v4[1] = v5;
  v6 = sub_20EAA2D64(v2, (uint64_t)&__p);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_20EE02C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE02C34(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9E9E70;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z47CreateProgramOptionValueOrArrayWithSavedCurrentIdLm4EEPN5boost15program_options"
                                      "11typed_valueINSt3__16vectorIT_NS3_9allocatorIS5_EEEEcEERNS3_5arrayIS5_XT0_EEEEUlR"
                                      "KNS4_IdNS6_IdEEEEE_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z47CreateProgramOptionValueOrArrayWithSavedCurrentIdLm4EEPN5boost15program_options11typed_valueINSt3__16vectorIT_NS3_9allocatorIS5_EEEEcEERNS3_5arrayIS5_XT0_EEEEUlRKNS4_IdNS6_IdEEEEE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

__n128 sub_20EE02CE0(_OWORD **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __n128 result;
  _OWORD *v6;
  __int128 v7;

  v2 = *a2;
  v3 = (a2[1] - *a2) >> 3;
  if (v3 == 4)
  {
    v6 = *a1;
    result = *(__n128 *)v2;
    v7 = *(_OWORD *)(v2 + 16);
    *v6 = *(_OWORD *)v2;
    v6[1] = v7;
  }
  else
  {
    if (v3 != 1)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/ProgramOptions/include/Kit/ProgramOptions/ProgramOptionsParserUtil.h", 161, (uint64_t)"", 0, (uint64_t)"invalid size of array parameter", 31, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v4 = *a1;
    *v4 = *(_QWORD *)v2;
    v4[1] = *(_QWORD *)v2;
    v4[2] = *(_QWORD *)v2;
    result.n128_u64[0] = *(_QWORD *)v2;
    v4[3] = *(_QWORD *)v2;
  }
  return result;
}

void sub_20EE02D78(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  __int128 *v10;
  uint64_t v11;
  char v12;
  size_t v13;
  void **p_dst;
  unint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  const char *v21;
  size_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  const char *v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  std::__shared_weak_count_vtbl *v39;
  std::__shared_weak_count *v40;
  size_t v41;
  size_t v42;
  void ***v43;
  void *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  void *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  void *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  void **v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  const char *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t (***p_rep)();
  uint64_t (***v98)();
  unint64_t v99;
  uint64_t *i;
  __int128 v101;
  _OWORD *v102;
  uint64_t (***v103)();
  _QWORD *v104;
  void **v105;
  void ***v106;
  uint64_t (**v107)();
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  uint64_t v111;
  void **v112;
  void **v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  void **v126;
  uint64_t v127;
  uint64_t (***v128)();
  uint64_t *v129;
  uint64_t *v130;
  unint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  void **v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t *v152;
  _QWORD *v153;
  void **v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t *v157;
  __int128 *v158;
  void *v159;
  uint64_t (***v160)();
  uint64_t (***v161)();
  uint64_t (***v162)();
  uint64_t v163;
  uint64_t *v164;
  void **v165;
  _QWORD *v166;
  uint64_t *v167;
  uint64_t (***v168)();
  uint64_t (***v169)();
  uint64_t (***v170)();
  uint64_t v171;
  void **v172;
  void **v173;
  uint64_t *v174;
  size_t *v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t (***v186)();
  _QWORD *v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  void **v191;
  __int128 v192;
  char v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  void **v206;
  unint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t (***v215)();
  uint64_t (***v216)();
  uint64_t (***v217)();
  _QWORD *v218;
  void **v219;
  void ***v220;
  uint64_t (**v221)();
  uint64_t v222;
  std::__shared_weak_count *v223;
  uint64_t v224;
  uint64_t v225;
  void **v226;
  void **v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  void **v240;
  uint64_t v241;
  uint64_t (***v242)();
  uint64_t *v243;
  uint64_t *v244;
  unint64_t v245;
  char v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  void **v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t *v266;
  _QWORD *v267;
  void **v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t *v271;
  __int128 *v272;
  void *v273;
  uint64_t (***v274)();
  uint64_t (***v275)();
  uint64_t (***v276)();
  uint64_t v277;
  uint64_t *v278;
  void **v279;
  _QWORD *v280;
  uint64_t *v281;
  uint64_t (***v282)();
  uint64_t (***v283)();
  uint64_t (***v284)();
  uint64_t v285;
  void **v286;
  void **v287;
  uint64_t *v288;
  size_t *v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t (***v300)();
  _QWORD *v301;
  uint64_t v302;
  uint64_t *v303;
  uint64_t v304;
  void **v305;
  __int128 v306;
  char v307;
  _QWORD *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  _QWORD *v314;
  uint64_t v315;
  uint64_t v316;
  _QWORD *v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t *v320;
  uint64_t v321;
  uint64_t v322;
  void **v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  void **v328;
  void **v329;
  void **v330;
  void **v331;
  const char *v332;
  int v333;
  char *__s;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  void **v339;
  uint64_t v340;
  void **v341;
  uint64_t v342;
  void *object[3];
  __int128 v344;
  void *__p[2];
  unint64_t v346;
  char v347;
  unint64_t *v348;
  uint64_t *v349;
  uint64_t *v350;
  uint64_t (**rep)();
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v352;
  int v353;
  uint64_t (***v354)();
  uint64_t *v355;
  const char *v356;
  uint64_t v357;
  std::__shared_weak_count *v358;
  void *v359[2];
  _QWORD v360[2];
  void **v361;
  __int128 v362;
  uint64_t v363;
  const void *v364;
  unint64_t v365;
  uint64_t *v366;
  void *v367;
  char v368;
  unint64_t v369;
  int v370;
  uint64_t v371;
  uint64_t *v372;
  _QWORD v373[3];
  _QWORD *v374;
  uint64_t *v375;
  void *v376;
  _QWORD v377[3];
  _QWORD *v378;
  void *v379;
  uint64_t *v380;
  _QWORD v381[3];
  _QWORD *v382;
  uint64_t *v383;
  uint64_t v384;
  _QWORD v385[3];
  _QWORD *v386;
  void *v387;
  uint64_t *v388;
  _QWORD v389[3];
  _QWORD *v390;
  uint64_t *v391;
  void *v392;
  _QWORD v393[3];
  _QWORD *v394;
  void *v395;
  uint64_t *v396;
  _QWORD v397[3];
  _QWORD *v398;
  uint64_t *v399;
  uint64_t v400;
  _QWORD v401[3];
  _QWORD *v402;
  void *v403;
  uint64_t *v404;
  _QWORD v405[3];
  _QWORD *v406;
  uint64_t *v407;
  uint64_t v408;
  _QWORD v409[3];
  _QWORD *v410;
  void *v411;
  uint64_t *v412;
  _QWORD v413[3];
  _QWORD *v414;
  uint64_t *v415;
  uint64_t v416;
  _QWORD v417[3];
  _QWORD *v418;
  void *v419;
  uint64_t *v420;
  _QWORD v421[3];
  _QWORD *v422;
  uint64_t *v423;
  uint64_t v424;
  _QWORD v425[3];
  _QWORD *v426;
  void *v427;
  _OWORD v428[2];
  _OWORD *v429;
  uint64_t *v430;
  void **__dst;
  size_t v432;
  int64_t v433;
  size_t *v434;
  uint64_t *v435;
  void **v436;
  __int128 v437;
  __int128 *v438;
  void *v439;
  __int128 v440;
  std::__shared_weak_count *v441;
  char *v442;
  std::__shared_weak_count *v443;
  void *v444;
  uint64_t v445;

  v445 = *MEMORY[0x24BDAC8D0];
  sub_20EE06D3C(&v424);
  if (**(int **)(v424 + 56) > 3)
    goto LABEL_158;
  v6 = *(unsigned __int8 *)(v424 + 72);
  v7 = sub_20E8C31DC(v424, "OSLogSurrogateAppender", 1, 0);
  v8 = v7;
  if (!v6 && v7 == 0)
    goto LABEL_158;
  sub_20E863438((uint64_t)v359);
  v353 = 0;
  sub_20E878638((uint64_t)&__dst, (uint64_t)&v350, (uint64_t)&xmmword_24C9E9E80);
  object[0] = &v350;
  object[1] = "Active group changing from ";
  object[2] = &v350;
  *(_QWORD *)&v344 = "Active group changing from ";
  *((_QWORD *)&v344 + 1) = "Active group changing from ";
  if (v353 == -1)
    sub_20E877AB8();
  v436 = object;
  ((void (*)(void ***, uint64_t **))off_24C9EA020[v353])(&v436, &v350);
  if (*(_BYTE *)(a1 + 40))
  {
    sub_20EE0A004((uint64_t)&v350, a1);
  }
  else
  {
    object[0] = &v350;
    object[1] = "nullopt";
    object[2] = &v350;
    *(_QWORD *)&v344 = "nullopt";
    *((_QWORD *)&v344 + 1) = "nullopt";
    if (v353 == -1)
      sub_20E877AB8();
    v436 = object;
    ((void (*)(void ***, uint64_t **))off_24C9EA038[v353])(&v436, &v350);
  }
  object[0] = &v350;
  object[1] = " to ";
  object[2] = &v350;
  *(_QWORD *)&v344 = " to ";
  *((_QWORD *)&v344 + 1) = " to ";
  if (v353 == -1)
    sub_20E877AB8();
  v436 = object;
  ((void (*)(void ***, uint64_t **))off_24C9EA050[v353])(&v436, &v350);
  sub_20EE0A004((uint64_t)&v350, a2);
  if (v353 == -1)
    sub_20E877AB8();
  object[0] = &v436;
  ((void (*)(__int128 *__return_ptr, void **, uint64_t **))off_24C9EA068[v353])(&v440, object, &v350);
  if (v353 != -1)
    ((void (*)(void **, uint64_t **))off_24C9EA008[v353])(object, &v350);
  if (SHIBYTE(v441) >= 0)
    v10 = &v440;
  else
    v10 = (__int128 *)v440;
  if (SHIBYTE(v441) >= 0)
    v11 = HIBYTE(v441);
  else
    v11 = *((_QWORD *)&v440 + 1);
  sub_20E86A980(v360, (uint64_t)v10, v11);
  if ((SHIBYTE(v441) & 0x80000000) == 0)
  {
    v12 = v370;
    if ((v370 & 0x10) == 0)
      goto LABEL_23;
LABEL_26:
    v15 = v369;
    if (v369 < v365)
    {
      v369 = v365;
      v15 = v365;
    }
    v16 = v364;
    v13 = v15 - (_QWORD)v364;
    if (v15 - (unint64_t)v364 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_80;
    goto LABEL_29;
  }
  operator delete((void *)v440);
  v12 = v370;
  if ((v370 & 0x10) != 0)
    goto LABEL_26;
LABEL_23:
  if ((v12 & 8) == 0)
  {
    v13 = 0;
    HIBYTE(v433) = 0;
    p_dst = (void **)&__dst;
    goto LABEL_36;
  }
  v16 = (const void *)v362;
  v13 = v363 - v362;
  if ((unint64_t)(v363 - v362) > 0x7FFFFFFFFFFFFFF7)
LABEL_80:
    sub_20E860B7C();
LABEL_29:
  if (v13 >= 0x17)
  {
    v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v17 = v13 | 7;
    v18 = v17 + 1;
    p_dst = (void **)operator new(v17 + 1);
    v432 = v13;
    v433 = v18 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_35;
  }
  HIBYTE(v433) = v13;
  p_dst = (void **)&__dst;
  if (v13)
LABEL_35:
    memmove(p_dst, v16, v13);
LABEL_36:
  *((_BYTE *)p_dst + v13) = 0;
  v350 = &v424;
  rep = (uint64_t (**)())std::chrono::steady_clock::now().__d_.__rep_;
  v352 = std::chrono::system_clock::now().__d_.__rep_;
  v353 = 3;
  v354 = (uint64_t (***)())"unknown file";
  LODWORD(v355) = 33;
  v357 = 0;
  v358 = 0;
  v356 = "unknown function";
  v19 = (void **)&__dst;
  if (v433 < 0)
    v19 = __dst;
  __s = (char *)v19;
  v20 = *v350;
  v21 = (const char *)(*v350 + 16);
  v333 = v6;
  v332 = v21;
  if (*(char *)(*v350 + 39) < 0)
  {
    v21 = *(const char **)(v20 + 16);
    v22 = *(_QWORD *)(v20 + 24);
    v335 = v8;
    v23 = a1;
    v25 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v25 & 1) != 0)
      goto LABEL_42;
  }
  else
  {
    v22 = *(unsigned __int8 *)(*v350 + 39);
    v335 = v8;
    v23 = a1;
    v24 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v24 & 1) != 0)
      goto LABEL_42;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if ((_BYTE)v344 && SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_42:
  if (byte_254A4A4F8[23] >= 0)
    v26 = byte_254A4A4F8;
  else
    v26 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v27 = byte_254A4A4F8[23];
  else
    v27 = *(_QWORD *)&byte_254A4A4F8[8];
  object[0] = os_log_create(v26, v21);
  v28 = &object[1];
  if (v27 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v27 >= 0x17)
  {
    v29 = a2;
    v30 = a3;
    v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v31 = v27 | 7;
    v32 = v31 + 1;
    v28 = (void **)operator new(v31 + 1);
    object[2] = (void *)v27;
    *(_QWORD *)&v344 = v32 | 0x8000000000000000;
    object[1] = v28;
    a3 = v30;
    a2 = v29;
    goto LABEL_55;
  }
  BYTE7(v344) = v27;
  if (v27)
LABEL_55:
    memmove(v28, v26, v27);
  *((_BYTE *)v28 + v27) = 0;
  BYTE8(v344) = 1;
  v33 = __p;
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  a1 = v23;
  if (v22 >= 0x17)
  {
    v36 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v36 = v22 | 7;
    v37 = v36 + 1;
    v33 = operator new(v36 + 1);
    __p[1] = (void *)v22;
    v346 = v37 | 0x8000000000000000;
    __p[0] = v33;
    v34 = v335;
  }
  else
  {
    HIBYTE(v346) = v22;
    v34 = v335;
    if (!v22)
    {
      LOBYTE(__p[0]) = 0;
      v347 = 1;
      v35 = object[0];
      if ((SHIBYTE(v346) & 0x80000000) == 0)
        goto LABEL_60;
      goto LABEL_66;
    }
  }
  memmove(v33, v21, v22);
  *((_BYTE *)v33 + v22) = 0;
  v347 = 1;
  v35 = object[0];
  if ((SHIBYTE(v346) & 0x80000000) == 0)
  {
LABEL_60:
    if (!BYTE8(v344))
      goto LABEL_69;
    goto LABEL_67;
  }
LABEL_66:
  operator delete(__p[0]);
  if (!BYTE8(v344))
    goto LABEL_69;
LABEL_67:
  if (SBYTE7(v344) < 0)
    operator delete(object[1]);
LABEL_69:
  if (object[0])
    os_release(object[0]);
  if (!v34 || !*(_QWORD *)(v34 + 24))
  {
    os_log_type_enabled(v35, OS_LOG_TYPE_INFO);
    LODWORD(object[0]) = 136315138;
    *(void **)((char *)object + 4) = __s;
    v44 = (void *)_os_log_send_and_compose_impl();
    v45 = v333;
    if (v44)
      free(v44);
    goto LABEL_144;
  }
  v38 = _os_log_pack_size();
  v39 = (std::__shared_weak_count_vtbl *)operator new(v38, (std::align_val_t)8uLL);
  v40 = (std::__shared_weak_count *)operator new();
  v40->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v40->__shared_owners_ = 0;
  v40->__shared_weak_owners_ = 0;
  v40[1].__vftable = v39;
  *(_QWORD *)&v440 = v39;
  *((_QWORD *)&v440 + 1) = v39;
  v442 = 0;
  v443 = 0;
  v441 = v40;
  v41 = strlen(__s);
  if (v41 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v42 = v41;
  if (v41 >= 0x17)
  {
    v46 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41 | 7) != 0x17)
      v46 = v41 | 7;
    v47 = v46 + 1;
    v43 = (void ***)operator new(v46 + 1);
    *(_QWORD *)&v437 = v42;
    *((_QWORD *)&v437 + 1) = v47 | 0x8000000000000000;
    v436 = (void **)v43;
    goto LABEL_84;
  }
  HIBYTE(v437) = v41;
  v43 = &v436;
  if (v41)
LABEL_84:
    memcpy(v43, __s, v42);
  *((_BYTE *)v43 + v42) = 0;
  v48 = v436;
  *(_QWORD *)&v428[0] = v437;
  *(_QWORD *)((char *)v428 + 7) = *(_QWORD *)((char *)&v437 + 7);
  v49 = HIBYTE(v437);
  v50 = operator new(0x38uLL);
  v50[1] = 0;
  v50[2] = 0;
  v50[3] = off_24C9ABC20;
  *v50 = &off_24C9ABBD0;
  v51 = *(_QWORD *)&v428[0];
  v50[4] = v48;
  v50[5] = v51;
  *(_QWORD *)((char *)v50 + 47) = *(_QWORD *)((char *)v428 + 7);
  *((_BYTE *)v50 + 55) = v49;
  *(_QWORD *)&v428[0] = 0;
  *(_QWORD *)((char *)v428 + 7) = 0;
  v52 = v443;
  v442 = (char *)(v50 + 3);
  v443 = (std::__shared_weak_count *)v50;
  if (v52)
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  *(_OWORD *)object = v440;
  v55 = v442;
  object[2] = v441;
  if (v441)
  {
    v56 = (unint64_t *)&v441->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  v58 = v443;
  *(_QWORD *)&v344 = v55;
  *((_QWORD *)&v344 + 1) = v443;
  if (v443)
  {
    v59 = (unint64_t *)&v443->__shared_owners_;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
    __p[0] = v55;
    do
      v61 = __ldaxr(v59);
    while (__stlxr(v61 - 1, v59));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  else
  {
    __p[0] = v55;
  }
  v62 = v441;
  if (v441)
  {
    v63 = (unint64_t *)&v441->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = object[0];
  if (*((char *)__p[0] + 31) >= 0)
    v66 = (char *)__p[0] + 8;
  else
    v66 = (char *)*((_QWORD *)__p[0] + 1);
  v67 = _os_log_pack_fill();
  *(_DWORD *)v67 = 136315138;
  *(_QWORD *)(v67 + 4) = v66;
  v68 = operator new();
  v69 = *(unsigned __int8 *)(v20 + 39);
  v70 = v332;
  if ((v69 & 0x80u) != 0)
  {
    v70 = *(const char **)(v20 + 16);
    v69 = *(_QWORD *)(v20 + 24);
  }
  *(_QWORD *)v68 = v65;
  *(_OWORD *)(v68 + 8) = *(_OWORD *)&object[1];
  object[1] = 0;
  object[2] = 0;
  *(_OWORD *)(v68 + 24) = v344;
  v344 = 0uLL;
  *(_QWORD *)(v68 + 40) = v70;
  *(_QWORD *)(v68 + 48) = v69;
  *(_BYTE *)(v68 + 56) = 1;
  v436 = 0;
  *(_QWORD *)&v440 = v68;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v335 + 24) + 40))(*(_QWORD *)(v335 + 24), &v440);
  v71 = v440;
  *(_QWORD *)&v440 = 0;
  if (v71)
  {
    v72 = *(std::__shared_weak_count **)(v71 + 32);
    if (v72)
    {
      v73 = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    v75 = *(std::__shared_weak_count **)(v71 + 16);
    if (v75)
    {
      v76 = (unint64_t *)&v75->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    MEMORY[0x212BC6398](v71, 0x10F0C40B62ED6C6);
    v78 = v436;
    v436 = 0;
    if (v78)
    {
      v79 = (std::__shared_weak_count *)v78[4];
      if (v79)
      {
        v80 = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v82 = (std::__shared_weak_count *)v78[2];
      if (v82)
      {
        v83 = (unint64_t *)&v82->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      MEMORY[0x212BC6398](v78, 0x10F0C40B62ED6C6);
    }
  }
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v344 + 1);
  v45 = v333;
  if (*((_QWORD *)&v344 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v344 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = (std::__shared_weak_count *)object[2];
  if (object[2])
  {
    v89 = (unint64_t *)((char *)object[2] + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
LABEL_144:
  if (v45)
  {
    v91 = (const char *)&__dst;
    if (v433 < 0)
      v91 = (const char *)__dst;
    sub_20E8C003C((uint64_t)&v350, "%s", v91);
    sub_20E863570((uint64_t)&v350);
  }
  sub_20E863570((uint64_t)&v350);
  v92 = v358;
  if (v358)
  {
    v93 = (unint64_t *)&v358->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  if (SHIBYTE(v433) < 0)
    operator delete(__dst);
  v359[0] = *(void **)MEMORY[0x24BEDB7F0];
  v95 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(void **)((char *)v359 + *((_QWORD *)v359[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  v360[0] = v95;
  v360[1] = MEMORY[0x24BEDB848] + 16;
  if (v368 < 0)
    operator delete(v367);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v371);
LABEL_158:
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(_QWORD *)(a1 + 24))
    {
      v96 = *(uint64_t **)(a1 + 16);
      p_rep = &rep;
      v350 = v96;
      rep = &off_24C9E9EA0;
      v352 = a2;
      v354 = &rep;
      v355 = 0;
      if (v96)
      {
        v98 = &rep;
        while (!((unsigned int (*)(uint64_t (***)(), uint64_t *))(*v98)[6])(v98, v96 + 2))
        {
          v96 = (uint64_t *)*v350;
          v350 = v96;
          if (v96 == v355)
            goto LABEL_181;
          v98 = v354;
          if (!v354)
            sub_20E86D37C();
        }
        v96 = v350;
LABEL_181:
        v103 = v354;
      }
      else
      {
        v103 = &rep;
      }
      v104 = (_QWORD *)&v440 + 1;
      *(_QWORD *)&v440 = 0;
      *((_QWORD *)&v440 + 1) = &off_24C9E9EA0;
      v441 = (std::__shared_weak_count *)a2;
      v443 = (std::__shared_weak_count *)((char *)&v440 + 8);
      v444 = 0;
      v359[0] = v96;
      v105 = &v359[1];
      if (v103)
      {
        if (v103 == &rep)
        {
          v361 = &v359[1];
          ((void (*)(uint64_t (***)(), void **))rep[3])(&rep, &v359[1]);
          *(_QWORD *)&v362 = v355;
          *((_QWORD *)&v362 + 1) = v440;
          if (!v443)
          {
            v366 = 0;
            v109 = 0;
            v367 = v444;
            if (&v440 != (__int128 *)-8)
              goto LABEL_188;
            goto LABEL_193;
          }
          if (v443 != (std::__shared_weak_count *)((char *)&v440 + 8))
          {
            v366 = (uint64_t *)v443;
            v443 = 0;
            v109 = 0;
            v367 = v444;
            if (&v440 != (__int128 *)-8)
              goto LABEL_188;
            goto LABEL_193;
          }
          v107 = (uint64_t (**)())*((_QWORD *)&v440 + 1);
LABEL_187:
          v366 = &v363;
          ((void (*)(char *))v107[3])((char *)&v440 + 8);
          v109 = v443;
          v367 = v444;
          if (v443 != (std::__shared_weak_count *)((char *)&v440 + 8))
          {
LABEL_188:
            if (!v109)
              goto LABEL_195;
            v110 = 5;
            v104 = &v109->__vftable;
LABEL_194:
            (*(void (**)(_QWORD *))(*v104 + 8 * v110))(v104);
LABEL_195:
            if (v354 == &rep)
            {
              v111 = 4;
            }
            else
            {
              if (!v354)
                goto LABEL_200;
              v111 = 5;
              p_rep = v354;
            }
            ((void (*)(uint64_t (***)()))(*p_rep)[v111])(p_rep);
LABEL_200:
            object[0] = v359[0];
            v112 = object;
            if (v361)
            {
              if (v361 == &v359[1])
              {
                *((_QWORD *)&v344 + 1) = &object[1];
                (*((void (**)(void **, void **))v359[1] + 3))(&v359[1], &object[1]);
LABEL_205:
                *(_OWORD *)__p = v362;
                v113 = object;
                if (v366)
                {
                  v113 = v359;
                  if (v366 == &v363)
                  {
                    v348 = &v346;
                    (*(void (**)(uint64_t *, unint64_t *))(v363 + 24))(&v363, &v346);
LABEL_210:
                    v114 = v366;
                    v349 = (uint64_t *)v367;
                    if (v366 == &v363)
                    {
                      v115 = 4;
                      v114 = &v363;
                    }
                    else
                    {
                      if (!v366)
                        goto LABEL_215;
                      v115 = 5;
                    }
                    (*(void (**)(uint64_t *, uint64_t))(*v114 + 8 * v115))(v114, v108);
LABEL_215:
                    if (v361 == &v359[1])
                    {
                      v116 = 4;
                    }
                    else
                    {
                      if (!v361)
                        goto LABEL_220;
                      v116 = 5;
                      v105 = v361;
                    }
                    (*((void (**)(void **))*v105 + v116))(v105);
LABEL_220:
                    v117 = *((_QWORD *)&v344 + 1);
                    v376 = object[0];
                    v118 = v377;
                    if (*((_QWORD *)&v344 + 1))
                    {
                      if (*((void ***)&v344 + 1) == &object[1])
                      {
                        v378 = v377;
                        (*((void (**)(void **, _QWORD *))object[1] + 3))(&object[1], v377);
LABEL_225:
                        v379 = __p[0];
                        v372 = (uint64_t *)__p[1];
                        v119 = v373;
                        v120 = (uint64_t)v348;
                        if (v348)
                        {
                          if (v348 == &v346)
                          {
                            v374 = v373;
                            (*(void (**)(unint64_t *, _QWORD *))(v346 + 24))(&v346, v373);
LABEL_230:
                            v375 = v349;
                            v342 = 0;
                            v341 = 0;
                            v121 = (uint64_t)v378;
                            v392 = v376;
                            v122 = v393;
                            if (v378)
                            {
                              if (v378 == v377)
                              {
                                v394 = v393;
                                (*(void (**)(_QWORD *, _QWORD *))(v377[0] + 24))(v377, v393);
LABEL_235:
                                v395 = v379;
                                v123 = (uint64_t)v374;
                                v388 = v372;
                                v124 = v389;
                                if (v374)
                                {
                                  if (v374 == v373)
                                  {
                                    v390 = v389;
                                    (*(void (**)(_QWORD *, _QWORD *))(v373[0] + 24))(v373, v389);
LABEL_240:
                                    v391 = v375;
                                    v125 = (uint64_t)v394;
                                    v359[0] = v392;
                                    v126 = &v359[1];
                                    if (v394)
                                    {
                                      if (v394 == v393)
                                      {
                                        v361 = &v359[1];
                                        (*(void (**)(_QWORD *, void **))(v393[0] + 24))(v393, &v359[1]);
LABEL_245:
                                        *(_QWORD *)&v362 = v395;
                                        v127 = (uint64_t)v390;
                                        v350 = v388;
                                        v128 = &rep;
                                        if (v390)
                                        {
                                          if (v390 == v389)
                                          {
                                            v354 = &rep;
                                            (*(void (**)(_QWORD *, uint64_t (***)()))(v389[0] + 24))(v389, &rep);
LABEL_250:
                                            v355 = v391;
                                            v129 = (uint64_t *)v359[0];
                                            v130 = v350;
                                            if (v359[0] == v350)
                                            {
                                              v131 = 0;
                                            }
                                            else
                                            {
                                              v131 = 0;
                                              do
                                              {
                                                v129 = (uint64_t *)*v129;
                                                v359[0] = v129;
                                                if (v129 != (uint64_t *)v362)
                                                {
                                                  do
                                                  {
                                                    if (!v361)
                                                      sub_20E86D37C();
                                                    v132 = (*((uint64_t (**)(void **, uint64_t *))*v361 + 6))(v361, v129 + 2);
                                                    v129 = (uint64_t *)v359[0];
                                                    if ((v132 & 1) != 0)
                                                      break;
                                                    v129 = *(uint64_t **)v359[0];
                                                    v359[0] = v129;
                                                  }
                                                  while (v129 != (uint64_t *)v362);
                                                  v130 = v350;
                                                }
                                                ++v131;
                                              }
                                              while (v129 != v130);
                                            }
                                            if (v354 == &rep)
                                            {
                                              v133 = 4;
                                            }
                                            else
                                            {
                                              if (!v354)
                                                goto LABEL_265;
                                              v133 = 5;
                                              v128 = v354;
                                            }
                                            ((void (*)(uint64_t (***)()))(*v128)[v133])(v128);
LABEL_265:
                                            if (v361 == &v359[1])
                                            {
                                              v134 = 4;
                                            }
                                            else
                                            {
                                              if (!v361)
                                                goto LABEL_270;
                                              v134 = 5;
                                              v126 = v361;
                                            }
                                            (*((void (**)(void **))*v126 + v134))(v126);
LABEL_270:
                                            if (v390 == v389)
                                            {
                                              v135 = 4;
                                            }
                                            else
                                            {
                                              if (!v390)
                                                goto LABEL_275;
                                              v135 = 5;
                                              v124 = v390;
                                            }
                                            (*(void (**)(_QWORD *))(*v124 + 8 * v135))(v124);
LABEL_275:
                                            if (v394 == v393)
                                            {
                                              v136 = 4;
                                            }
                                            else
                                            {
                                              if (!v394)
                                                goto LABEL_280;
                                              v136 = 5;
                                              v122 = v394;
                                            }
                                            (*(void (**)(_QWORD *))(*v122 + 8 * v136))(v122);
LABEL_280:
                                            v137 = (uint64_t)v378;
                                            v384 = (uint64_t)v376;
                                            v138 = v385;
                                            if (v378)
                                            {
                                              if (v378 == v377)
                                              {
                                                v386 = v385;
                                                (*(void (**)(_QWORD *, _QWORD *))(v377[0] + 24))(v377, v385);
LABEL_285:
                                                v387 = v379;
                                                v139 = (uint64_t)v374;
                                                v380 = v372;
                                                v140 = v381;
                                                if (v374)
                                                {
                                                  if (v374 == v373)
                                                  {
                                                    v382 = v381;
                                                    (*(void (**)(_QWORD *, _QWORD *))(v373[0] + 24))(v373, v381);
LABEL_290:
                                                    v383 = v375;
                                                    v337 = a2;
                                                    v338 = a3;
                                                    v336 = a1;
                                                    if (!v131)
                                                      goto LABEL_480;
                                                    if (v131 > 0xAAAAAAAAAAAAAAALL)
                                                      sub_20E867F44();
                                                    v142 = (void **)operator new(24 * v131);
                                                    v341 = v142;
                                                    v143 = (uint64_t)v386;
                                                    v400 = v384;
                                                    if (v386)
                                                    {
                                                      if (v386 == v385)
                                                      {
                                                        v402 = v401;
                                                        (*(void (**)(_QWORD *, _QWORD *))(v385[0] + 24))(v385, v401);
LABEL_297:
                                                        v403 = v387;
                                                        v144 = (uint64_t)v382;
                                                        v396 = v380;
                                                        if (v382)
                                                        {
                                                          if (v382 == v381)
                                                          {
                                                            v398 = v397;
                                                            (*(void (**)(_QWORD *))(v381[0] + 24))(v381);
LABEL_302:
                                                            v399 = v383;
                                                            v145 = (uint64_t)v402;
                                                            v408 = v400;
                                                            if (v402)
                                                            {
                                                              if (v402 == v401)
                                                              {
                                                                v410 = v409;
                                                                (*(void (**)(_QWORD *))(v401[0] + 24))(v401);
LABEL_307:
                                                                v411 = v403;
                                                                v146 = (uint64_t)v398;
                                                                v404 = v396;
                                                                v147 = v405;
                                                                if (v398)
                                                                {
                                                                  if (v398 == v397)
                                                                  {
                                                                    v406 = v405;
                                                                    (*(void (**)(_QWORD *))(v397[0] + 24))(v397);
LABEL_312:
                                                                    v407 = v399;
                                                                    v148 = (uint64_t)v410;
                                                                    v416 = v408;
                                                                    v149 = v417;
                                                                    if (v410)
                                                                    {
                                                                      if (v410 == v409)
                                                                      {
                                                                        v418 = v417;
                                                                        (*(void (**)(_QWORD *, _QWORD *))(v409[0] + 24))(v409, v417);
LABEL_317:
                                                                        v419 = v411;
                                                                        v150 = (uint64_t)v406;
                                                                        v412 = v404;
                                                                        v151 = v413;
                                                                        if (v406)
                                                                        {
                                                                          if (v406 == v405)
                                                                          {
                                                                            v414 = v413;
                                                                            (*(void (**)(_QWORD *, _QWORD *))(v405[0] + 24))(v405, v413);
LABEL_322:
                                                                            v415 = v407;
                                                                            v424 = v416;
                                                                            v152 = &v424;
                                                                            v153 = v425;
                                                                            if (v418)
                                                                            {
                                                                              if (v418 == v417)
                                                                              {
                                                                                v426 = v425;
                                                                                (*(void (**)(_QWORD *, _QWORD *))(v417[0] + 24))(v417, v425);
LABEL_327:
                                                                                v427 = v419;
                                                                                v420 = v412;
                                                                                v154 = (void **)&v420;
                                                                                v155 = v421;
                                                                                if (v414)
                                                                                {
                                                                                  if (v414 == v413)
                                                                                  {
                                                                                    v422 = v421;
                                                                                    (*(void (**)(_QWORD *, _QWORD *))(v413[0] + 24))(v413, v421);
LABEL_332:
                                                                                    v423 = v415;
                                                                                    v156 = v424;
                                                                                    v436 = (void **)v424;
                                                                                    v157 = (uint64_t *)&v436;
                                                                                    v158 = &v437;
                                                                                    if (v426)
                                                                                    {
                                                                                      if (v426 == v425)
                                                                                      {
                                                                                        v438 = &v437;
                                                                                        (*(void (**)(_QWORD *, __int128 *))(v425[0] + 24))(v425, &v437);
                                                                                        v156 = (uint64_t)v436;
LABEL_337:
                                                                                        v159 = v427;
                                                                                        v439 = v427;
                                                                                        v350 = (uint64_t *)v156;
                                                                                        v160 = &rep;
                                                                                        if (!v438)
                                                                                        {
                                                                                          v354 = 0;
                                                                                          v355 = (uint64_t *)v427;
                                                                                          *(_QWORD *)&v440 = v156;
                                                                                          goto LABEL_342;
                                                                                        }
                                                                                        if (v438 == &v437)
                                                                                        {
                                                                                          v354 = &rep;
                                                                                          (*(void (**)(__int128 *, uint64_t (***)()))(v437 + 24))(&v437, &rep);
                                                                                          v161 = v354;
                                                                                          v159 = v439;
                                                                                          v355 = (uint64_t *)v439;
                                                                                          *(_QWORD *)&v440 = v350;
                                                                                          if (!v354)
                                                                                            goto LABEL_342;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          v161 = (uint64_t (***)())(*(uint64_t (**)(__int128 *, _QWORD *))(*(_QWORD *)v438 + 16))(v438, v147);
                                                                                          v159 = v439;
                                                                                          v354 = v161;
                                                                                          v355 = (uint64_t *)v439;
                                                                                          *(_QWORD *)&v440 = v350;
                                                                                          if (!v161)
                                                                                          {
LABEL_342:
                                                                                            v443 = 0;
                                                                                            v444 = v159;
                                                                                            v162 = v354;
                                                                                            if (v354 != &rep)
                                                                                            {
LABEL_343:
                                                                                              if (!v162)
                                                                                                goto LABEL_350;
                                                                                              v163 = 5;
                                                                                              v160 = v162;
LABEL_349:
                                                                                              ((void (*)(uint64_t (***)()))(*v160)[v163])(v160);
LABEL_350:
                                                                                              v164 = v420;
                                                                                              *(_QWORD *)&v428[0] = v420;
                                                                                              v165 = (void **)v428;
                                                                                              v166 = (_QWORD *)v428 + 1;
                                                                                              if (v422)
                                                                                              {
                                                                                                if (v422 == v421)
                                                                                                {
                                                                                                  v429 = (_OWORD *)((char *)v428 + 8);
                                                                                                  (*(void (**)(_QWORD *, char *))(v421[0] + 24))(v421, (char *)v428 + 8);
                                                                                                  v164 = *(uint64_t **)&v428[0];
LABEL_355:
                                                                                                  v167 = v423;
                                                                                                  v430 = v423;
                                                                                                  v350 = v164;
                                                                                                  v168 = &rep;
                                                                                                  if (!v429)
                                                                                                  {
                                                                                                    v354 = 0;
                                                                                                    v355 = v423;
                                                                                                    __dst = (void **)v164;
                                                                                                    goto LABEL_360;
                                                                                                  }
                                                                                                  if (v429 == (_OWORD *)((char *)v428 + 8))
                                                                                                  {
                                                                                                    v354 = &rep;
                                                                                                    (*(void (**)(char *, uint64_t (***)()))(*((_QWORD *)&v428[0] + 1) + 24))((char *)v428 + 8, &rep);
                                                                                                    v169 = v354;
                                                                                                    v167 = v430;
                                                                                                    v355 = v430;
                                                                                                    __dst = (void **)v350;
                                                                                                    if (!v354)
                                                                                                      goto LABEL_360;
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    v169 = (uint64_t (***)())(*(uint64_t (**)(_OWORD *, _QWORD *))(*(_QWORD *)v429 + 16))(v429, v147);
                                                                                                    v167 = v430;
                                                                                                    v354 = v169;
                                                                                                    v355 = v430;
                                                                                                    __dst = (void **)v350;
                                                                                                    if (!v169)
                                                                                                    {
LABEL_360:
                                                                                                      v434 = 0;
                                                                                                      v435 = v167;
                                                                                                      v170 = v354;
                                                                                                      if (v354 != &rep)
                                                                                                      {
LABEL_361:
                                                                                                        if (!v170)
                                                                                                          goto LABEL_368;
                                                                                                        v171 = 5;
                                                                                                        v168 = v170;
LABEL_367:
                                                                                                        ((void (*)(uint64_t (***)()))(*v168)[v171])(v168);
LABEL_368:
                                                                                                        v359[0] = (void *)v440;
                                                                                                        v172 = v359;
                                                                                                        v173 = &v359[1];
                                                                                                        if (v443)
                                                                                                        {
                                                                                                          v172 = (void **)&v440;
                                                                                                          if (v443 == (std::__shared_weak_count *)((char *)&v440 + 8))
                                                                                                          {
                                                                                                            v361 = &v359[1];
                                                                                                            (*(void (**)(char *, void **))(*((_QWORD *)&v440 + 1) + 24))((char *)&v440 + 8, &v359[1]);
LABEL_373:
                                                                                                            *(_QWORD *)&v362 = v444;
                                                                                                            *((_QWORD *)&v362 + 1) = __dst;
                                                                                                            v174 = &v363;
                                                                                                            if (v434)
                                                                                                            {
                                                                                                              if (v434 == &v432)
                                                                                                              {
                                                                                                                v366 = &v363;
                                                                                                                (*(void (**)(size_t *, uint64_t *))(v432 + 24))(&v432, &v363);
                                                                                                              }
                                                                                                              else
                                                                                                              {
                                                                                                                v366 = (uint64_t *)v434;
                                                                                                                v434 = 0;
                                                                                                              }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              v366 = 0;
                                                                                                            }
                                                                                                            v175 = v434;
                                                                                                            v367 = v435;
                                                                                                            if (v434 == &v432)
                                                                                                            {
                                                                                                              v176 = 4;
                                                                                                              v175 = &v432;
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              if (!v434)
                                                                                                                goto LABEL_383;
                                                                                                              v176 = 5;
                                                                                                            }
                                                                                                            (*(void (**)(size_t *, _QWORD *))(*v175 + 8 * v176))(v175, v147);
LABEL_383:
                                                                                                            if (v429 == (_OWORD *)((char *)v428 + 8))
                                                                                                            {
                                                                                                              v177 = 4;
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              if (!v429)
                                                                                                                goto LABEL_388;
                                                                                                              v177 = 5;
                                                                                                              v166 = v429;
                                                                                                            }
                                                                                                            (*(void (**)(_QWORD *))(*v166 + 8 * v177))(v166);
LABEL_388:
                                                                                                            v178 = &v443->__vftable;
                                                                                                            if (v443 == (std::__shared_weak_count *)((char *)&v440 + 8))
                                                                                                            {
                                                                                                              v179 = 4;
                                                                                                              v178 = (_QWORD *)&v440 + 1;
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              if (!v443)
                                                                                                                goto LABEL_393;
                                                                                                              v179 = 5;
                                                                                                            }
                                                                                                            (*(void (**)(_QWORD *, _QWORD *))(*v178 + 8 * v179))(v178, v147);
LABEL_393:
                                                                                                            if (v438 == &v437)
                                                                                                            {
                                                                                                              v180 = 4;
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              if (!v438)
                                                                                                                goto LABEL_398;
                                                                                                              v180 = 5;
                                                                                                              v158 = v438;
                                                                                                            }
                                                                                                            (*(void (**)(__int128 *))(*(_QWORD *)v158 + 8 * v180))(v158);
LABEL_398:
                                                                                                            if (v422 == v421)
                                                                                                            {
                                                                                                              v181 = 4;
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              if (!v422)
                                                                                                                goto LABEL_403;
                                                                                                              v181 = 5;
                                                                                                              v155 = v422;
                                                                                                            }
                                                                                                            (*(void (**)(_QWORD *))(*v155 + 8 * v181))(v155);
LABEL_403:
                                                                                                            if (v426 == v425)
                                                                                                            {
                                                                                                              v182 = 4;
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              if (!v426)
                                                                                                                goto LABEL_408;
                                                                                                              v182 = 5;
                                                                                                              v153 = v426;
                                                                                                            }
                                                                                                            (*(void (**)(_QWORD *))(*v153 + 8 * v182))(v153);
LABEL_408:
                                                                                                            if (v414 == v413)
                                                                                                            {
                                                                                                              v183 = 4;
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              if (!v414)
                                                                                                                goto LABEL_413;
                                                                                                              v183 = 5;
                                                                                                              v151 = v414;
                                                                                                            }
                                                                                                            (*(void (**)(_QWORD *))(*v151 + 8 * v183))(v151);
LABEL_413:
                                                                                                            if (v418 == v417)
                                                                                                            {
                                                                                                              v184 = 4;
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              if (!v418)
                                                                                                                goto LABEL_418;
                                                                                                              v184 = 5;
                                                                                                              v149 = v418;
                                                                                                            }
                                                                                                            (*(void (**)(_QWORD *))(*v149 + 8 * v184))(v149);
LABEL_418:
                                                                                                            v185 = (uint64_t)v361;
                                                                                                            v350 = (uint64_t *)v359[0];
                                                                                                            v186 = &rep;
                                                                                                            if (v361)
                                                                                                            {
                                                                                                              v119 = v373;
                                                                                                              if (v361 == &v359[1])
                                                                                                              {
                                                                                                                v354 = &rep;
                                                                                                                (*((void (**)(void **, uint64_t (***)()))v359[1] + 3))(&v359[1], &rep);
LABEL_424:
                                                                                                                *(_QWORD *)&v440 = *((_QWORD *)&v362 + 1);
                                                                                                                v355 = (uint64_t *)v362;
                                                                                                                v187 = (_QWORD *)&v440 + 1;
                                                                                                                v188 = (uint64_t)v366;
                                                                                                                if (v366)
                                                                                                                {
                                                                                                                  if (v366 == &v363)
                                                                                                                  {
                                                                                                                    v443 = (std::__shared_weak_count *)((char *)&v440 + 8);
                                                                                                                    (*(void (**)(uint64_t *, char *))(v363 + 24))(&v363, (char *)&v440 + 8);
LABEL_429:
                                                                                                                    v444 = v367;
                                                                                                                    v189 = v350;
                                                                                                                    if (v350 == (uint64_t *)v440)
                                                                                                                    {
                                                                                                                      v191 = v142;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      v190 = 0;
                                                                                                                      v191 = v142;
                                                                                                                      do
                                                                                                                      {
                                                                                                                        if (*((char *)v189 + 39) < 0)
                                                                                                                        {
                                                                                                                          sub_20E860C04(v191, (void *)v189[2], v189[3]);
                                                                                                                          v189 = v350;
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                          v192 = *((_OWORD *)v189 + 1);
                                                                                                                          v191[2] = (void *)v189[4];
                                                                                                                          *(_OWORD *)v191 = v192;
                                                                                                                        }
                                                                                                                        do
                                                                                                                        {
                                                                                                                          v189 = (uint64_t *)*v189;
                                                                                                                          v350 = v189;
                                                                                                                          if (v189 == v355)
                                                                                                                            break;
                                                                                                                          if (!v354)
                                                                                                                            sub_20E86D37C();
                                                                                                                          v193 = ((uint64_t (*)(uint64_t (***)(), uint64_t *))(*v354)[6])(v354, v189 + 2);
                                                                                                                          v189 = v350;
                                                                                                                        }
                                                                                                                        while ((v193 & 1) == 0);
                                                                                                                        v191 += 3;
                                                                                                                        v190 += 24;
                                                                                                                      }
                                                                                                                      while (v189 != (uint64_t *)v440);
                                                                                                                    }
                                                                                                                    if (v443 == (std::__shared_weak_count *)((char *)&v440 + 8))
                                                                                                                    {
                                                                                                                      v195 = 4;
                                                                                                                      a2 = v337;
                                                                                                                      v194 = v397;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      a2 = v337;
                                                                                                                      v194 = v397;
                                                                                                                      if (!v443)
                                                                                                                        goto LABEL_445;
                                                                                                                      v195 = 5;
                                                                                                                      v187 = &v443->__vftable;
                                                                                                                    }
                                                                                                                    (*(void (**)(_QWORD *))(*v187 + 8 * v195))(v187);
LABEL_445:
                                                                                                                    if (v354 == &rep)
                                                                                                                    {
                                                                                                                      v196 = 4;
                                                                                                                      a3 = v338;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      a3 = v338;
                                                                                                                      if (!v354)
                                                                                                                        goto LABEL_450;
                                                                                                                      v196 = 5;
                                                                                                                      v186 = v354;
                                                                                                                    }
                                                                                                                    ((void (*)(uint64_t (***)()))(*v186)[v196])(v186);
LABEL_450:
                                                                                                                    if (v366 == &v363)
                                                                                                                    {
                                                                                                                      v197 = 4;
                                                                                                                      v118 = v377;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      v118 = v377;
                                                                                                                      if (!v366)
                                                                                                                        goto LABEL_455;
                                                                                                                      v197 = 5;
                                                                                                                      v174 = v366;
                                                                                                                    }
                                                                                                                    (*(void (**)(uint64_t *))(*v174 + 8 * v197))(v174);
LABEL_455:
                                                                                                                    if (v361 == &v359[1])
                                                                                                                    {
                                                                                                                      v199 = 4;
                                                                                                                      v198 = v401;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      v198 = v401;
                                                                                                                      if (!v361)
                                                                                                                        goto LABEL_460;
                                                                                                                      v199 = 5;
                                                                                                                      v173 = v361;
                                                                                                                    }
                                                                                                                    (*((void (**)(void **))*v173 + v199))(v173);
LABEL_460:
                                                                                                                    v200 = v405;
                                                                                                                    if (v406 == v405)
                                                                                                                    {
                                                                                                                      v201 = 4;
                                                                                                                      v140 = v381;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      v140 = v381;
                                                                                                                      if (!v406)
                                                                                                                        goto LABEL_465;
                                                                                                                      v201 = 5;
                                                                                                                      v200 = v406;
                                                                                                                    }
                                                                                                                    (*(void (**)(_QWORD *, _QWORD *))(*v200 + 8 * v201))(v200, v147);
LABEL_465:
                                                                                                                    if (v410 == v409)
                                                                                                                    {
                                                                                                                      v202 = 4;
                                                                                                                      v203 = v409;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      if (!v410)
                                                                                                                        goto LABEL_470;
                                                                                                                      v202 = 5;
                                                                                                                      v203 = v410;
                                                                                                                    }
                                                                                                                    (*(void (**)(_QWORD *, _QWORD *))(*v203 + 8 * v202))(v203, v147);
LABEL_470:
                                                                                                                    v342 = (uint64_t)v191;
                                                                                                                    if (v398 == v397)
                                                                                                                    {
                                                                                                                      v204 = 4;
                                                                                                                      a1 = v336;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      a1 = v336;
                                                                                                                      if (!v398)
                                                                                                                        goto LABEL_475;
                                                                                                                      v204 = 5;
                                                                                                                      v194 = v398;
                                                                                                                    }
                                                                                                                    (*(void (**)(_QWORD *))(*v194 + 8 * v204))(v194);
LABEL_475:
                                                                                                                    if (v402 == v401)
                                                                                                                    {
                                                                                                                      v205 = 4;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      if (!v402)
                                                                                                                        goto LABEL_480;
                                                                                                                      v205 = 5;
                                                                                                                      v198 = v402;
                                                                                                                    }
                                                                                                                    (*(void (**)(_QWORD *))(*v198 + 8 * v205))(v198);
LABEL_480:
                                                                                                                    if (v382 == v381)
                                                                                                                    {
                                                                                                                      v208 = 4;
                                                                                                                      v207 = &v346;
                                                                                                                      v206 = &object[1];
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      v207 = &v346;
                                                                                                                      v206 = &object[1];
                                                                                                                      if (!v382)
                                                                                                                        goto LABEL_485;
                                                                                                                      v208 = 5;
                                                                                                                      v140 = v382;
                                                                                                                    }
                                                                                                                    (*(void (**)(_QWORD *))(*v140 + 8 * v208))(v140);
LABEL_485:
                                                                                                                    if (v386 == v385)
                                                                                                                    {
                                                                                                                      v209 = 4;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      if (!v386)
                                                                                                                        goto LABEL_490;
                                                                                                                      v209 = 5;
                                                                                                                      v138 = v386;
                                                                                                                    }
                                                                                                                    (*(void (**)(_QWORD *))(*v138 + 8 * v209))(v138);
LABEL_490:
                                                                                                                    if (v374 == v373)
                                                                                                                    {
                                                                                                                      v210 = 4;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      if (!v374)
                                                                                                                        goto LABEL_495;
                                                                                                                      v210 = 5;
                                                                                                                      v119 = v374;
                                                                                                                    }
                                                                                                                    (*(void (**)(_QWORD *))(*v119 + 8 * v210))(v119);
LABEL_495:
                                                                                                                    if (v378 == v377)
                                                                                                                    {
                                                                                                                      v211 = 4;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      if (!v378)
                                                                                                                        goto LABEL_500;
                                                                                                                      v211 = 5;
                                                                                                                      v118 = v378;
                                                                                                                    }
                                                                                                                    (*(void (**)(_QWORD *))(*v118 + 8 * v211))(v118);
LABEL_500:
                                                                                                                    if (v348 == &v346)
                                                                                                                    {
                                                                                                                      v212 = 4;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      if (!v348)
                                                                                                                        goto LABEL_505;
                                                                                                                      v212 = 5;
                                                                                                                      v207 = v348;
                                                                                                                    }
                                                                                                                    (*(void (**)(unint64_t *))(*v207 + 8 * v212))(v207);
LABEL_505:
                                                                                                                    if (*((void ***)&v344 + 1) == &object[1])
                                                                                                                    {
                                                                                                                      v213 = 4;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      if (!*((_QWORD *)&v344 + 1))
                                                                                                                        goto LABEL_510;
                                                                                                                      v213 = 5;
                                                                                                                      v206 = (void **)*((_QWORD *)&v344 + 1);
                                                                                                                    }
                                                                                                                    (*((void (**)(void **))*v206 + v213))(v206);
LABEL_510:
                                                                                                                    v214 = *(uint64_t **)(a2 + 16);
                                                                                                                    v215 = &rep;
                                                                                                                    v350 = v214;
                                                                                                                    rep = &off_24C9E9F30;
                                                                                                                    v352 = a1;
                                                                                                                    v354 = &rep;
                                                                                                                    v355 = 0;
                                                                                                                    if (v214)
                                                                                                                    {
                                                                                                                      v216 = &rep;
                                                                                                                      while (!((unsigned int (*)(uint64_t (***)(), uint64_t *))(*v216)[6])(v216, v214 + 2))
                                                                                                                      {
                                                                                                                        v214 = (uint64_t *)*v350;
                                                                                                                        v350 = v214;
                                                                                                                        if (v214 == v355)
                                                                                                                          goto LABEL_518;
                                                                                                                        v216 = v354;
                                                                                                                        if (!v354)
                                                                                                                          sub_20E86D37C();
                                                                                                                      }
                                                                                                                      v214 = v350;
LABEL_518:
                                                                                                                      v217 = v354;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      v217 = &rep;
                                                                                                                    }
                                                                                                                    v218 = (_QWORD *)&v440 + 1;
                                                                                                                    *(_QWORD *)&v440 = 0;
                                                                                                                    *((_QWORD *)&v440 + 1) = &off_24C9E9F30;
                                                                                                                    v441 = (std::__shared_weak_count *)a1;
                                                                                                                    v443 = (std::__shared_weak_count *)((char *)&v440 + 8);
                                                                                                                    v444 = 0;
                                                                                                                    v359[0] = v214;
                                                                                                                    v219 = &v359[1];
                                                                                                                    if (v217)
                                                                                                                    {
                                                                                                                      if (v217 == &rep)
                                                                                                                      {
                                                                                                                        v361 = &v359[1];
                                                                                                                        ((void (*)(uint64_t (***)(), void **))rep[3])(&rep, &v359[1]);
                                                                                                                        *(_QWORD *)&v362 = v355;
                                                                                                                        *((_QWORD *)&v362 + 1) = v440;
                                                                                                                        if (!v443)
                                                                                                                        {
                                                                                                                          v366 = 0;
                                                                                                                          v223 = 0;
                                                                                                                          v367 = v444;
                                                                                                                          if (&v440 != (__int128 *)-8)
                                                                                                                            goto LABEL_525;
                                                                                                                          goto LABEL_530;
                                                                                                                        }
                                                                                                                        if (v443 != (std::__shared_weak_count *)((char *)&v440 + 8))
                                                                                                                        {
                                                                                                                          v366 = (uint64_t *)v443;
                                                                                                                          v443 = 0;
                                                                                                                          v223 = 0;
                                                                                                                          v367 = v444;
                                                                                                                          if (&v440 != (__int128 *)-8)
                                                                                                                            goto LABEL_525;
                                                                                                                          goto LABEL_530;
                                                                                                                        }
                                                                                                                        v221 = (uint64_t (**)())*((_QWORD *)&v440 + 1);
LABEL_524:
                                                                                                                        v366 = &v363;
                                                                                                                        ((void (*)(char *))v221[3])((char *)&v440 + 8);
                                                                                                                        v223 = v443;
                                                                                                                        v367 = v444;
                                                                                                                        if (v443 != (std::__shared_weak_count *)((char *)&v440 + 8))
                                                                                                                        {
LABEL_525:
                                                                                                                          if (!v223)
                                                                                                                            goto LABEL_532;
                                                                                                                          v224 = 5;
                                                                                                                          v218 = &v223->__vftable;
LABEL_531:
                                                                                                                          (*(void (**)(_QWORD *))(*v218 + 8 * v224))(v218);
LABEL_532:
                                                                                                                          if (v354 == &rep)
                                                                                                                          {
                                                                                                                            v225 = 4;
                                                                                                                          }
                                                                                                                          else
                                                                                                                          {
                                                                                                                            if (!v354)
                                                                                                                              goto LABEL_537;
                                                                                                                            v225 = 5;
                                                                                                                            v215 = v354;
                                                                                                                          }
                                                                                                                          ((void (*)(uint64_t (***)()))(*v215)[v225])(v215);
LABEL_537:
                                                                                                                          object[0] = v359[0];
                                                                                                                          v226 = object;
                                                                                                                          if (v361)
                                                                                                                          {
                                                                                                                            if (v361 == &v359[1])
                                                                                                                            {
                                                                                                                              *((_QWORD *)&v344 + 1) = &object[1];
                                                                                                                              (*((void (**)(void **, void **))v359[1] + 3))(&v359[1], &object[1]);
LABEL_542:
                                                                                                                              *(_OWORD *)__p = v362;
                                                                                                                              v227 = object;
                                                                                                                              if (v366)
                                                                                                                              {
                                                                                                                                v227 = v359;
                                                                                                                                if (v366 == &v363)
                                                                                                                                {
                                                                                                                                  v348 = &v346;
                                                                                                                                  (*(void (**)(uint64_t *, unint64_t *))(v363 + 24))(&v363, &v346);
LABEL_547:
                                                                                                                                  v228 = v366;
                                                                                                                                  v349 = (uint64_t *)v367;
                                                                                                                                  if (v366 == &v363)
                                                                                                                                  {
                                                                                                                                    v229 = 4;
                                                                                                                                    v228 = &v363;
                                                                                                                                  }
                                                                                                                                  else
                                                                                                                                  {
                                                                                                                                    if (!v366)
                                                                                                                                      goto LABEL_552;
                                                                                                                                    v229 = 5;
                                                                                                                                  }
                                                                                                                                  (*(void (**)(uint64_t *, uint64_t))(*v228 + 8 * v229))(v228, v222);
LABEL_552:
                                                                                                                                  if (v361 == &v359[1])
                                                                                                                                  {
                                                                                                                                    v230 = 4;
                                                                                                                                  }
                                                                                                                                  else
                                                                                                                                  {
                                                                                                                                    if (!v361)
                                                                                                                                      goto LABEL_557;
                                                                                                                                    v230 = 5;
                                                                                                                                    v219 = v361;
                                                                                                                                  }
                                                                                                                                  (*((void (**)(void **))*v219 + v230))(v219);
LABEL_557:
                                                                                                                                  v231 = *((_QWORD *)&v344 + 1);
                                                                                                                                  v376 = object[0];
                                                                                                                                  v232 = v377;
                                                                                                                                  if (*((_QWORD *)&v344 + 1))
                                                                                                                                  {
                                                                                                                                    if (*((void ***)&v344 + 1) == &object[1])
                                                                                                                                    {
                                                                                                                                      v378 = v377;
                                                                                                                                      (*((void (**)(void **, _QWORD *))object[1] + 3))(&object[1], v377);
LABEL_562:
                                                                                                                                      v379 = __p[0];
                                                                                                                                      v372 = (uint64_t *)__p[1];
                                                                                                                                      v233 = v373;
                                                                                                                                      v234 = (uint64_t)v348;
                                                                                                                                      if (v348)
                                                                                                                                      {
                                                                                                                                        if (v348 == &v346)
                                                                                                                                        {
                                                                                                                                          v374 = v373;
                                                                                                                                          (*(void (**)(unint64_t *, _QWORD *))(v346 + 24))(&v346, v373);
LABEL_567:
                                                                                                                                          v375 = v349;
                                                                                                                                          v340 = 0;
                                                                                                                                          v339 = 0;
                                                                                                                                          v235 = (uint64_t)v378;
                                                                                                                                          v392 = v376;
                                                                                                                                          v236 = v393;
                                                                                                                                          if (v378)
                                                                                                                                          {
                                                                                                                                            if (v378 == v377)
                                                                                                                                            {
                                                                                                                                              v394 = v393;
                                                                                                                                              (*(void (**)(_QWORD *, _QWORD *))(v377[0] + 24))(v377, v393);
LABEL_572:
                                                                                                                                              v395 = v379;
                                                                                                                                              v237 = (uint64_t)v374;
                                                                                                                                              v388 = v372;
                                                                                                                                              v238 = v389;
                                                                                                                                              if (v374)
                                                                                                                                              {
                                                                                                                                                if (v374 == v373)
                                                                                                                                                {
                                                                                                                                                  v390 = v389;
                                                                                                                                                  (*(void (**)(_QWORD *, _QWORD *))(v373[0] + 24))(v373, v389);
LABEL_577:
                                                                                                                                                  v391 = v375;
                                                                                                                                                  v239 = (uint64_t)v394;
                                                                                                                                                  v359[0] = v392;
                                                                                                                                                  v240 = &v359[1];
                                                                                                                                                  if (v394)
                                                                                                                                                  {
                                                                                                                                                    if (v394 == v393)
                                                                                                                                                    {
                                                                                                                                                      v361 = &v359[1];
                                                                                                                                                      (*(void (**)(_QWORD *, void **))(v393[0] + 24))(v393, &v359[1]);
LABEL_582:
                                                                                                                                                      *(_QWORD *)&v362 = v395;
                                                                                                                                                      v241 = (uint64_t)v390;
                                                                                                                                                      v350 = v388;
                                                                                                                                                      v242 = &rep;
                                                                                                                                                      if (v390)
                                                                                                                                                      {
                                                                                                                                                        if (v390 == v389)
                                                                                                                                                        {
                                                                                                                                                          v354 = &rep;
                                                                                                                                                          (*(void (**)(_QWORD *, uint64_t (***)()))(v389[0] + 24))(v389, &rep);
LABEL_587:
                                                                                                                                                          v355 = v391;
                                                                                                                                                          v243 = (uint64_t *)v359[0];
                                                                                                                                                          v244 = v350;
                                                                                                                                                          if (v359[0] == v350)
                                                                                                                                                          {
                                                                                                                                                            v245 = 0;
                                                                                                                                                          }
                                                                                                                                                          else
                                                                                                                                                          {
                                                                                                                                                            v245 = 0;
                                                                                                                                                            do
                                                                                                                                                            {
                                                                                                                                                              v243 = (uint64_t *)*v243;
                                                                                                                                                              v359[0] = v243;
                                                                                                                                                              if (v243 != (uint64_t *)v362)
                                                                                                                                                              {
                                                                                                                                                                do
                                                                                                                                                                {
                                                                                                                                                                  if (!v361)
                                                                                                                                                                    sub_20E86D37C();
                                                                                                                                                                  v246 = (*((uint64_t (**)(void **, uint64_t *))*v361 + 6))(v361, v243 + 2);
                                                                                                                                                                  v243 = (uint64_t *)v359[0];
                                                                                                                                                                  if ((v246 & 1) != 0)
                                                                                                                                                                    break;
                                                                                                                                                                  v243 = *(uint64_t **)v359[0];
                                                                                                                                                                  v359[0] = v243;
                                                                                                                                                                }
                                                                                                                                                                while (v243 != (uint64_t *)v362);
                                                                                                                                                                v244 = v350;
                                                                                                                                                              }
                                                                                                                                                              ++v245;
                                                                                                                                                            }
                                                                                                                                                            while (v243 != v244);
                                                                                                                                                          }
                                                                                                                                                          if (v354 == &rep)
                                                                                                                                                          {
                                                                                                                                                            v247 = 4;
                                                                                                                                                          }
                                                                                                                                                          else
                                                                                                                                                          {
                                                                                                                                                            if (!v354)
                                                                                                                                                              goto LABEL_602;
                                                                                                                                                            v247 = 5;
                                                                                                                                                            v242 = v354;
                                                                                                                                                          }
                                                                                                                                                          ((void (*)(uint64_t (***)()))(*v242)[v247])(v242);
LABEL_602:
                                                                                                                                                          if (v361 == &v359[1])
                                                                                                                                                          {
                                                                                                                                                            v248 = 4;
                                                                                                                                                          }
                                                                                                                                                          else
                                                                                                                                                          {
                                                                                                                                                            if (!v361)
                                                                                                                                                              goto LABEL_607;
                                                                                                                                                            v248 = 5;
                                                                                                                                                            v240 = v361;
                                                                                                                                                          }
                                                                                                                                                          (*((void (**)(void **))*v240 + v248))(v240);
LABEL_607:
                                                                                                                                                          if (v390 == v389)
                                                                                                                                                          {
                                                                                                                                                            v249 = 4;
                                                                                                                                                          }
                                                                                                                                                          else
                                                                                                                                                          {
                                                                                                                                                            if (!v390)
                                                                                                                                                              goto LABEL_612;
                                                                                                                                                            v249 = 5;
                                                                                                                                                            v238 = v390;
                                                                                                                                                          }
                                                                                                                                                          (*(void (**)(_QWORD *))(*v238 + 8 * v249))(v238);
LABEL_612:
                                                                                                                                                          if (v394 == v393)
                                                                                                                                                          {
                                                                                                                                                            v250 = 4;
                                                                                                                                                          }
                                                                                                                                                          else
                                                                                                                                                          {
                                                                                                                                                            if (!v394)
                                                                                                                                                              goto LABEL_617;
                                                                                                                                                            v250 = 5;
                                                                                                                                                            v236 = v394;
                                                                                                                                                          }
                                                                                                                                                          (*(void (**)(_QWORD *))(*v236 + 8 * v250))(v236);
LABEL_617:
                                                                                                                                                          v251 = (uint64_t)v378;
                                                                                                                                                          v384 = (uint64_t)v376;
                                                                                                                                                          v252 = v385;
                                                                                                                                                          if (v378)
                                                                                                                                                          {
                                                                                                                                                            if (v378 == v377)
                                                                                                                                                            {
                                                                                                                                                              v386 = v385;
                                                                                                                                                              (*(void (**)(_QWORD *, _QWORD *))(v377[0] + 24))(v377, v385);
LABEL_622:
                                                                                                                                                              v387 = v379;
                                                                                                                                                              v253 = (uint64_t)v374;
                                                                                                                                                              v380 = v372;
                                                                                                                                                              v254 = v381;
                                                                                                                                                              if (v374)
                                                                                                                                                              {
                                                                                                                                                                if (v374 == v373)
                                                                                                                                                                {
                                                                                                                                                                  v382 = v381;
                                                                                                                                                                  (*(void (**)(_QWORD *, _QWORD *))(v373[0] + 24))(v373, v381);
LABEL_627:
                                                                                                                                                                  v383 = v375;
                                                                                                                                                                  if (!v245)
                                                                                                                                                                    goto LABEL_817;
                                                                                                                                                                  if (v245 > 0xAAAAAAAAAAAAAAALL)
                                                                                                                                                                    sub_20E867F44();
                                                                                                                                                                  v256 = (void **)operator new(24 * v245);
                                                                                                                                                                  v339 = v256;
                                                                                                                                                                  v257 = (uint64_t)v386;
                                                                                                                                                                  v400 = v384;
                                                                                                                                                                  if (v386)
                                                                                                                                                                  {
                                                                                                                                                                    if (v386 == v385)
                                                                                                                                                                    {
                                                                                                                                                                      v402 = v401;
                                                                                                                                                                      (*(void (**)(_QWORD *, _QWORD *))(v385[0] + 24))(v385, v401);
LABEL_634:
                                                                                                                                                                      v403 = v387;
                                                                                                                                                                      v258 = (uint64_t)v382;
                                                                                                                                                                      v396 = v380;
                                                                                                                                                                      if (v382)
                                                                                                                                                                      {
                                                                                                                                                                        if (v382 == v381)
                                                                                                                                                                        {
                                                                                                                                                                          v398 = v397;
                                                                                                                                                                          (*(void (**)(_QWORD *))(v381[0] + 24))(v381);
LABEL_639:
                                                                                                                                                                          v399 = v383;
                                                                                                                                                                          v259 = (uint64_t)v402;
                                                                                                                                                                          v408 = v400;
                                                                                                                                                                          if (v402)
                                                                                                                                                                          {
                                                                                                                                                                            if (v402 == v401)
                                                                                                                                                                            {
                                                                                                                                                                              v410 = v409;
                                                                                                                                                                              (*(void (**)(_QWORD *))(v401[0] + 24))(v401);
LABEL_644:
                                                                                                                                                                              v411 = v403;
                                                                                                                                                                              v260 = (uint64_t)v398;
                                                                                                                                                                              v404 = v396;
                                                                                                                                                                              v261 = v405;
                                                                                                                                                                              if (v398)
                                                                                                                                                                              {
                                                                                                                                                                                if (v398 == v397)
                                                                                                                                                                                {
                                                                                                                                                                                  v406 = v405;
                                                                                                                                                                                  (*(void (**)(_QWORD *))(v397[0] + 24))(v397);
LABEL_649:
                                                                                                                                                                                  v407 = v399;
                                                                                                                                                                                  v262 = (uint64_t)v410;
                                                                                                                                                                                  v416 = v408;
                                                                                                                                                                                  v263 = v417;
                                                                                                                                                                                  if (v410)
                                                                                                                                                                                  {
                                                                                                                                                                                    if (v410 == v409)
                                                                                                                                                                                    {
                                                                                                                                                                                      v418 = v417;
                                                                                                                                                                                      (*(void (**)(_QWORD *, _QWORD *))(v409[0] + 24))(v409, v417);
LABEL_654:
                                                                                                                                                                                      v419 = v411;
                                                                                                                                                                                      v264 = (uint64_t)v406;
                                                                                                                                                                                      v412 = v404;
                                                                                                                                                                                      v265 = v413;
                                                                                                                                                                                      if (v406)
                                                                                                                                                                                      {
                                                                                                                                                                                        if (v406 == v405)
                                                                                                                                                                                        {
                                                                                                                                                                                          v414 = v413;
                                                                                                                                                                                          (*(void (**)(_QWORD *, _QWORD *))(v405[0] + 24))(v405, v413);
LABEL_659:
                                                                                                                                                                                          v415 = v407;
                                                                                                                                                                                          v424 = v416;
                                                                                                                                                                                          v266 = &v424;
                                                                                                                                                                                          v267 = v425;
                                                                                                                                                                                          if (v418)
                                                                                                                                                                                          {
                                                                                                                                                                                            if (v418 == v417)
                                                                                                                                                                                            {
                                                                                                                                                                                              v426 = v425;
                                                                                                                                                                                              (*(void (**)(_QWORD *, _QWORD *))(v417[0] + 24))(v417, v425);
LABEL_664:
                                                                                                                                                                                              v427 = v419;
                                                                                                                                                                                              v420 = v412;
                                                                                                                                                                                              v268 = (void **)&v420;
                                                                                                                                                                                              v269 = v421;
                                                                                                                                                                                              if (v414)
                                                                                                                                                                                              {
                                                                                                                                                                                                if (v414 == v413)
                                                                                                                                                                                                {
                                                                                                                                                                                                  v422 = v421;
                                                                                                                                                                                                  (*(void (**)(_QWORD *, _QWORD *))(v413[0] + 24))(v413, v421);
LABEL_669:
                                                                                                                                                                                                  v423 = v415;
                                                                                                                                                                                                  v270 = v424;
                                                                                                                                                                                                  v436 = (void **)v424;
                                                                                                                                                                                                  v271 = (uint64_t *)&v436;
                                                                                                                                                                                                  v272 = &v437;
                                                                                                                                                                                                  if (v426)
                                                                                                                                                                                                  {
                                                                                                                                                                                                    if (v426 == v425)
                                                                                                                                                                                                    {
                                                                                                                                                                                                      v438 = &v437;
                                                                                                                                                                                                      (*(void (**)(_QWORD *, __int128 *))(v425[0] + 24))(v425, &v437);
                                                                                                                                                                                                      v270 = (uint64_t)v436;
LABEL_674:
                                                                                                                                                                                                      v273 = v427;
                                                                                                                                                                                                      v439 = v427;
                                                                                                                                                                                                      v350 = (uint64_t *)v270;
                                                                                                                                                                                                      v274 = &rep;
                                                                                                                                                                                                      if (!v438)
                                                                                                                                                                                                      {
                                                                                                                                                                                                        v354 = 0;
                                                                                                                                                                                                        v355 = (uint64_t *)v427;
                                                                                                                                                                                                        *(_QWORD *)&v440 = v270;
                                                                                                                                                                                                        goto LABEL_679;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      if (v438 == &v437)
                                                                                                                                                                                                      {
                                                                                                                                                                                                        v354 = &rep;
                                                                                                                                                                                                        (*(void (**)(__int128 *, uint64_t (***)()))(v437 + 24))(&v437, &rep);
                                                                                                                                                                                                        v275 = v354;
                                                                                                                                                                                                        v273 = v439;
                                                                                                                                                                                                        v355 = (uint64_t *)v439;
                                                                                                                                                                                                        *(_QWORD *)&v440 = v350;
                                                                                                                                                                                                        if (!v354)
                                                                                                                                                                                                          goto LABEL_679;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      else
                                                                                                                                                                                                      {
                                                                                                                                                                                                        v275 = (uint64_t (***)())(*(uint64_t (**)(__int128 *, _QWORD *))(*(_QWORD *)v438 + 16))(v438, v261);
                                                                                                                                                                                                        v273 = v439;
                                                                                                                                                                                                        v354 = v275;
                                                                                                                                                                                                        v355 = (uint64_t *)v439;
                                                                                                                                                                                                        *(_QWORD *)&v440 = v350;
                                                                                                                                                                                                        if (!v275)
                                                                                                                                                                                                        {
LABEL_679:
                                                                                                                                                                                                          v443 = 0;
                                                                                                                                                                                                          v444 = v273;
                                                                                                                                                                                                          v276 = v354;
                                                                                                                                                                                                          if (v354 != &rep)
                                                                                                                                                                                                          {
LABEL_680:
                                                                                                                                                                                                            if (!v276)
                                                                                                                                                                                                              goto LABEL_687;
                                                                                                                                                                                                            v277 = 5;
                                                                                                                                                                                                            v274 = v276;
LABEL_686:
                                                                                                                                                                                                            ((void (*)(uint64_t (***)()))(*v274)[v277])(v274);
LABEL_687:
                                                                                                                                                                                                            v278 = v420;
                                                                                                                                                                                                            *(_QWORD *)&v428[0] = v420;
                                                                                                                                                                                                            v279 = (void **)v428;
                                                                                                                                                                                                            v280 = (_QWORD *)v428 + 1;
                                                                                                                                                                                                            if (v422)
                                                                                                                                                                                                            {
                                                                                                                                                                                                              if (v422 == v421)
                                                                                                                                                                                                              {
                                                                                                                                                                                                                v429 = (_OWORD *)((char *)v428 + 8);
                                                                                                                                                                                                                (*(void (**)(_QWORD *, char *))(v421[0] + 24))(v421, (char *)v428 + 8);
                                                                                                                                                                                                                v278 = *(uint64_t **)&v428[0];
LABEL_692:
                                                                                                                                                                                                                v281 = v423;
                                                                                                                                                                                                                v430 = v423;
                                                                                                                                                                                                                v350 = v278;
                                                                                                                                                                                                                v282 = &rep;
                                                                                                                                                                                                                if (!v429)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  v354 = 0;
                                                                                                                                                                                                                  v355 = v423;
                                                                                                                                                                                                                  __dst = (void **)v278;
                                                                                                                                                                                                                  goto LABEL_697;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if (v429 == (_OWORD *)((char *)v428 + 8))
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  v354 = &rep;
                                                                                                                                                                                                                  (*(void (**)(char *, uint64_t (***)()))(*((_QWORD *)&v428[0] + 1) + 24))((char *)v428 + 8, &rep);
                                                                                                                                                                                                                  v283 = v354;
                                                                                                                                                                                                                  v281 = v430;
                                                                                                                                                                                                                  v355 = v430;
                                                                                                                                                                                                                  __dst = (void **)v350;
                                                                                                                                                                                                                  if (!v354)
                                                                                                                                                                                                                    goto LABEL_697;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                else
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  v283 = (uint64_t (***)())(*(uint64_t (**)(_OWORD *, _QWORD *))(*(_QWORD *)v429 + 16))(v429, v261);
                                                                                                                                                                                                                  v281 = v430;
                                                                                                                                                                                                                  v354 = v283;
                                                                                                                                                                                                                  v355 = v430;
                                                                                                                                                                                                                  __dst = (void **)v350;
                                                                                                                                                                                                                  if (!v283)
                                                                                                                                                                                                                  {
LABEL_697:
                                                                                                                                                                                                                    v434 = 0;
                                                                                                                                                                                                                    v435 = v281;
                                                                                                                                                                                                                    v284 = v354;
                                                                                                                                                                                                                    if (v354 != &rep)
                                                                                                                                                                                                                    {
LABEL_698:
                                                                                                                                                                                                                      if (!v284)
                                                                                                                                                                                                                        goto LABEL_705;
                                                                                                                                                                                                                      v285 = 5;
                                                                                                                                                                                                                      v282 = v284;
LABEL_704:
                                                                                                                                                                                                                      ((void (*)(uint64_t (***)()))(*v282)[v285])(v282);
LABEL_705:
                                                                                                                                                                                                                      v359[0] = (void *)v440;
                                                                                                                                                                                                                      v286 = v359;
                                                                                                                                                                                                                      v287 = &v359[1];
                                                                                                                                                                                                                      if (v443)
                                                                                                                                                                                                                      {
                                                                                                                                                                                                                        v286 = (void **)&v440;
                                                                                                                                                                                                                        if (v443 == (std::__shared_weak_count *)((char *)&v440 + 8))
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                          v361 = &v359[1];
                                                                                                                                                                                                                          (*(void (**)(char *, void **))(*((_QWORD *)&v440 + 1) + 24))((char *)&v440 + 8, &v359[1]);
LABEL_710:
                                                                                                                                                                                                                          *(_QWORD *)&v362 = v444;
                                                                                                                                                                                                                          *((_QWORD *)&v362 + 1) = __dst;
                                                                                                                                                                                                                          v288 = &v363;
                                                                                                                                                                                                                          if (v434)
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            if (v434 == &v432)
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                              v366 = &v363;
                                                                                                                                                                                                                              (*(void (**)(size_t *, uint64_t *))(v432 + 24))(&v432, &v363);
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            else
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                              v366 = (uint64_t *)v434;
                                                                                                                                                                                                                              v434 = 0;
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          else
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            v366 = 0;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          v289 = v434;
                                                                                                                                                                                                                          v367 = v435;
                                                                                                                                                                                                                          if (v434 == &v432)
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            v290 = 4;
                                                                                                                                                                                                                            v289 = &v432;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          else
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            if (!v434)
                                                                                                                                                                                                                              goto LABEL_720;
                                                                                                                                                                                                                            v290 = 5;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          (*(void (**)(size_t *, _QWORD *))(*v289 + 8 * v290))(v289, v261);
LABEL_720:
                                                                                                                                                                                                                          if (v429 == (_OWORD *)((char *)v428 + 8))
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            v291 = 4;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          else
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            if (!v429)
                                                                                                                                                                                                                              goto LABEL_725;
                                                                                                                                                                                                                            v291 = 5;
                                                                                                                                                                                                                            v280 = v429;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          (*(void (**)(_QWORD *))(*v280 + 8 * v291))(v280);
LABEL_725:
                                                                                                                                                                                                                          v292 = &v443->__vftable;
                                                                                                                                                                                                                          if (v443 == (std::__shared_weak_count *)((char *)&v440 + 8))
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            v293 = 4;
                                                                                                                                                                                                                            v292 = (_QWORD *)&v440 + 1;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          else
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            if (!v443)
                                                                                                                                                                                                                              goto LABEL_730;
                                                                                                                                                                                                                            v293 = 5;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          (*(void (**)(_QWORD *, _QWORD *))(*v292 + 8 * v293))(v292, v261);
LABEL_730:
                                                                                                                                                                                                                          if (v438 == &v437)
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            v294 = 4;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          else
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            if (!v438)
                                                                                                                                                                                                                              goto LABEL_735;
                                                                                                                                                                                                                            v294 = 5;
                                                                                                                                                                                                                            v272 = v438;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          (*(void (**)(__int128 *))(*(_QWORD *)v272 + 8 * v294))(v272);
LABEL_735:
                                                                                                                                                                                                                          if (v422 == v421)
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            v295 = 4;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          else
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            if (!v422)
                                                                                                                                                                                                                              goto LABEL_740;
                                                                                                                                                                                                                            v295 = 5;
                                                                                                                                                                                                                            v269 = v422;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          (*(void (**)(_QWORD *))(*v269 + 8 * v295))(v269);
LABEL_740:
                                                                                                                                                                                                                          if (v426 == v425)
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            v296 = 4;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          else
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            if (!v426)
                                                                                                                                                                                                                              goto LABEL_745;
                                                                                                                                                                                                                            v296 = 5;
                                                                                                                                                                                                                            v267 = v426;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          (*(void (**)(_QWORD *))(*v267 + 8 * v296))(v267);
LABEL_745:
                                                                                                                                                                                                                          if (v414 == v413)
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            v297 = 4;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          else
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            if (!v414)
                                                                                                                                                                                                                              goto LABEL_750;
                                                                                                                                                                                                                            v297 = 5;
                                                                                                                                                                                                                            v265 = v414;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          (*(void (**)(_QWORD *))(*v265 + 8 * v297))(v265);
LABEL_750:
                                                                                                                                                                                                                          if (v418 == v417)
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            v298 = 4;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          else
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            if (!v418)
                                                                                                                                                                                                                              goto LABEL_755;
                                                                                                                                                                                                                            v298 = 5;
                                                                                                                                                                                                                            v263 = v418;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          (*(void (**)(_QWORD *))(*v263 + 8 * v298))(v263);
LABEL_755:
                                                                                                                                                                                                                          v299 = (uint64_t)v361;
                                                                                                                                                                                                                          v350 = (uint64_t *)v359[0];
                                                                                                                                                                                                                          v300 = &rep;
                                                                                                                                                                                                                          if (v361)
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            v233 = v373;
                                                                                                                                                                                                                            if (v361 == &v359[1])
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                              v354 = &rep;
                                                                                                                                                                                                                              (*((void (**)(void **, uint64_t (***)()))v359[1] + 3))(&v359[1], &rep);
LABEL_761:
                                                                                                                                                                                                                              *(_QWORD *)&v440 = *((_QWORD *)&v362 + 1);
                                                                                                                                                                                                                              v355 = (uint64_t *)v362;
                                                                                                                                                                                                                              v301 = (_QWORD *)&v440 + 1;
                                                                                                                                                                                                                              v302 = (uint64_t)v366;
                                                                                                                                                                                                                              if (v366)
                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                if (v366 == &v363)
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                  v443 = (std::__shared_weak_count *)((char *)&v440 + 8);
                                                                                                                                                                                                                                  (*(void (**)(uint64_t *, char *))(v363 + 24))(&v363, (char *)&v440 + 8);
LABEL_766:
                                                                                                                                                                                                                                  v444 = v367;
                                                                                                                                                                                                                                  v303 = v350;
                                                                                                                                                                                                                                  if (v350 == (uint64_t *)v440)
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    v305 = v256;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    v304 = 0;
                                                                                                                                                                                                                                    v305 = v256;
                                                                                                                                                                                                                                    do
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                      if (*((char *)v303 + 39) < 0)
                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                        sub_20E860C04(v305, (void *)v303[2], v303[3]);
                                                                                                                                                                                                                                        v303 = v350;
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                        v306 = *((_OWORD *)v303 + 1);
                                                                                                                                                                                                                                        v305[2] = (void *)v303[4];
                                                                                                                                                                                                                                        *(_OWORD *)v305 = v306;
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                      do
                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                        v303 = (uint64_t *)*v303;
                                                                                                                                                                                                                                        v350 = v303;
                                                                                                                                                                                                                                        if (v303 == v355)
                                                                                                                                                                                                                                          break;
                                                                                                                                                                                                                                        if (!v354)
                                                                                                                                                                                                                                          sub_20E86D37C();
                                                                                                                                                                                                                                        v307 = ((uint64_t (*)(uint64_t (***)(), uint64_t *))(*v354)[6])(v354, v303 + 2);
                                                                                                                                                                                                                                        v303 = v350;
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                      while ((v307 & 1) == 0);
                                                                                                                                                                                                                                      v305 += 3;
                                                                                                                                                                                                                                      v304 += 24;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    while (v303 != (uint64_t *)v440);
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  if (v443 == (std::__shared_weak_count *)((char *)&v440 + 8))
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    v309 = 4;
                                                                                                                                                                                                                                    a2 = v337;
                                                                                                                                                                                                                                    v308 = v397;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    a2 = v337;
                                                                                                                                                                                                                                    v308 = v397;
                                                                                                                                                                                                                                    if (!v443)
                                                                                                                                                                                                                                      goto LABEL_782;
                                                                                                                                                                                                                                    v309 = 5;
                                                                                                                                                                                                                                    v301 = &v443->__vftable;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  (*(void (**)(_QWORD *))(*v301 + 8 * v309))(v301);
LABEL_782:
                                                                                                                                                                                                                                  if (v354 == &rep)
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    v310 = 4;
                                                                                                                                                                                                                                    a3 = v338;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    a3 = v338;
                                                                                                                                                                                                                                    if (!v354)
                                                                                                                                                                                                                                      goto LABEL_787;
                                                                                                                                                                                                                                    v310 = 5;
                                                                                                                                                                                                                                    v300 = v354;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  ((void (*)(uint64_t (***)()))(*v300)[v310])(v300);
LABEL_787:
                                                                                                                                                                                                                                  if (v366 == &v363)
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    v311 = 4;
                                                                                                                                                                                                                                    v232 = v377;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    v232 = v377;
                                                                                                                                                                                                                                    if (!v366)
                                                                                                                                                                                                                                      goto LABEL_792;
                                                                                                                                                                                                                                    v311 = 5;
                                                                                                                                                                                                                                    v288 = v366;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  (*(void (**)(uint64_t *))(*v288 + 8 * v311))(v288);
LABEL_792:
                                                                                                                                                                                                                                  if (v361 == &v359[1])
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    v313 = 4;
                                                                                                                                                                                                                                    v312 = v401;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    v312 = v401;
                                                                                                                                                                                                                                    if (!v361)
                                                                                                                                                                                                                                      goto LABEL_797;
                                                                                                                                                                                                                                    v313 = 5;
                                                                                                                                                                                                                                    v287 = v361;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  (*((void (**)(void **))*v287 + v313))(v287);
LABEL_797:
                                                                                                                                                                                                                                  v314 = v405;
                                                                                                                                                                                                                                  if (v406 == v405)
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    v315 = 4;
                                                                                                                                                                                                                                    v254 = v381;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    v254 = v381;
                                                                                                                                                                                                                                    if (!v406)
                                                                                                                                                                                                                                      goto LABEL_802;
                                                                                                                                                                                                                                    v315 = 5;
                                                                                                                                                                                                                                    v314 = v406;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  (*(void (**)(_QWORD *, _QWORD *))(*v314 + 8 * v315))(v314, v261);
LABEL_802:
                                                                                                                                                                                                                                  if (v410 == v409)
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    v316 = 4;
                                                                                                                                                                                                                                    v317 = v409;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    if (!v410)
                                                                                                                                                                                                                                      goto LABEL_807;
                                                                                                                                                                                                                                    v316 = 5;
                                                                                                                                                                                                                                    v317 = v410;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  (*(void (**)(_QWORD *, _QWORD *))(*v317 + 8 * v316))(v317, v261);
LABEL_807:
                                                                                                                                                                                                                                  v340 = (uint64_t)v305;
                                                                                                                                                                                                                                  if (v398 == v397)
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    v318 = 4;
                                                                                                                                                                                                                                    a1 = v336;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    a1 = v336;
                                                                                                                                                                                                                                    if (!v398)
                                                                                                                                                                                                                                      goto LABEL_812;
                                                                                                                                                                                                                                    v318 = 5;
                                                                                                                                                                                                                                    v308 = v398;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  (*(void (**)(_QWORD *))(*v308 + 8 * v318))(v308);
LABEL_812:
                                                                                                                                                                                                                                  if (v402 == v401)
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    v319 = 4;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    if (!v402)
                                                                                                                                                                                                                                      goto LABEL_817;
                                                                                                                                                                                                                                    v319 = 5;
                                                                                                                                                                                                                                    v312 = v402;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  (*(void (**)(_QWORD *))(*v312 + 8 * v319))(v312);
LABEL_817:
                                                                                                                                                                                                                                  if (v382 == v381)
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    v321 = 4;
                                                                                                                                                                                                                                    v320 = &v346;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    v320 = &v346;
                                                                                                                                                                                                                                    if (!v382)
                                                                                                                                                                                                                                      goto LABEL_822;
                                                                                                                                                                                                                                    v321 = 5;
                                                                                                                                                                                                                                    v254 = v382;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  (*(void (**)(_QWORD *))(*v254 + 8 * v321))(v254);
LABEL_822:
                                                                                                                                                                                                                                  if (v386 == v385)
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    v322 = 4;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    if (!v386)
                                                                                                                                                                                                                                      goto LABEL_827;
                                                                                                                                                                                                                                    v322 = 5;
                                                                                                                                                                                                                                    v252 = v386;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  (*(void (**)(_QWORD *))(*v252 + 8 * v322))(v252);
LABEL_827:
                                                                                                                                                                                                                                  if (v374 == v373)
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    v324 = 4;
                                                                                                                                                                                                                                    v323 = &object[1];
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    v323 = &object[1];
                                                                                                                                                                                                                                    if (!v374)
                                                                                                                                                                                                                                      goto LABEL_832;
                                                                                                                                                                                                                                    v324 = 5;
                                                                                                                                                                                                                                    v233 = v374;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  (*(void (**)(_QWORD *))(*v233 + 8 * v324))(v233);
LABEL_832:
                                                                                                                                                                                                                                  if (v378 == v377)
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    v325 = 4;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    if (!v378)
                                                                                                                                                                                                                                      goto LABEL_837;
                                                                                                                                                                                                                                    v325 = 5;
                                                                                                                                                                                                                                    v232 = v378;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  (*(void (**)(_QWORD *))(*v232 + 8 * v325))(v232);
LABEL_837:
                                                                                                                                                                                                                                  if (v348 == &v346)
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    v326 = 4;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    if (!v348)
                                                                                                                                                                                                                                      goto LABEL_842;
                                                                                                                                                                                                                                    v326 = 5;
                                                                                                                                                                                                                                    v320 = v348;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  (*(void (**)(unint64_t *))(*v320 + 8 * v326))(v320);
LABEL_842:
                                                                                                                                                                                                                                  if (*((void ***)&v344 + 1) == &object[1])
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    v327 = 4;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    if (!*((_QWORD *)&v344 + 1))
                                                                                                                                                                                                                                    {
LABEL_847:
                                                                                                                                                                                                                                      if (*(_BYTE *)(a1 + 40))
                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                        if (a1 != a2)
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
                                                                                                                                                                                                                                          sub_20EE090CC((_QWORD *)a1, *(char **)(a2 + 16));
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                        sub_20E9092A4(a1, a2);
                                                                                                                                                                                                                                        *(_BYTE *)(a1 + 40) = 1;
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                      *(_QWORD *)a3 = 0;
                                                                                                                                                                                                                                      *(_QWORD *)(a3 + 8) = 0;
                                                                                                                                                                                                                                      *(_QWORD *)(a3 + 16) = 0;
                                                                                                                                                                                                                                      sub_20E909ADC((char *)a3, (uint64_t)v341, v342, 0xAAAAAAAAAAAAAAABLL * ((v342 - (uint64_t)v341) >> 3));
                                                                                                                                                                                                                                      *(_QWORD *)(a3 + 24) = 0;
                                                                                                                                                                                                                                      *(_QWORD *)(a3 + 32) = 0;
                                                                                                                                                                                                                                      *(_QWORD *)(a3 + 40) = 0;
                                                                                                                                                                                                                                      sub_20E909ADC((char *)(a3 + 24), (uint64_t)v339, v340, 0xAAAAAAAAAAAAAAABLL * ((v340 - (uint64_t)v339) >> 3));
                                                                                                                                                                                                                                      if (v339)
                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                        v328 = (void **)v340;
                                                                                                                                                                                                                                        v329 = v339;
                                                                                                                                                                                                                                        if ((void **)v340 != v339)
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                          do
                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                            if (*((char *)v328 - 1) < 0)
                                                                                                                                                                                                                                              operator delete(*(v328 - 3));
                                                                                                                                                                                                                                            v328 -= 3;
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                          while (v328 != v339);
                                                                                                                                                                                                                                          v329 = v339;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        operator delete(v329);
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                      if (v341)
                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                        v330 = (void **)v342;
                                                                                                                                                                                                                                        v331 = v341;
                                                                                                                                                                                                                                        if ((void **)v342 != v341)
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                          do
                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                            if (*((char *)v330 - 1) < 0)
                                                                                                                                                                                                                                              operator delete(*(v330 - 3));
                                                                                                                                                                                                                                            v330 -= 3;
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                          while (v330 != v341);
                                                                                                                                                                                                                                          v331 = v341;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        operator delete(v331);
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    v327 = 5;
                                                                                                                                                                                                                                    v323 = (void **)*((_QWORD *)&v344 + 1);
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  (*((void (**)(void **))*v323 + v327))(v323);
                                                                                                                                                                                                                                  goto LABEL_847;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                v302 = (*(uint64_t (**)(uint64_t *, _QWORD *))(*v366 + 16))(v366, v261);
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                              v443 = (std::__shared_weak_count *)v302;
                                                                                                                                                                                                                              goto LABEL_766;
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            v299 = (*((uint64_t (**)(void **, _QWORD *))*v361 + 2))(v361, v261);
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          else
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            v233 = v373;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          v354 = (uint64_t (***)())v299;
                                                                                                                                                                                                                          goto LABEL_761;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        v361 = (void **)&v443->__vftable;
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      v286[4] = 0;
                                                                                                                                                                                                                      goto LABEL_710;
                                                                                                                                                                                                                    }
LABEL_703:
                                                                                                                                                                                                                    v285 = 4;
                                                                                                                                                                                                                    goto LABEL_704;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if (v283 == &rep)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  v434 = &v432;
                                                                                                                                                                                                                  ((void (*)(uint64_t (***)()))rep[3])(&rep);
                                                                                                                                                                                                                  v284 = v354;
                                                                                                                                                                                                                  v435 = v355;
                                                                                                                                                                                                                  if (v354 != &rep)
                                                                                                                                                                                                                    goto LABEL_698;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                else
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  v434 = (size_t *)v283;
                                                                                                                                                                                                                  v435 = v281;
                                                                                                                                                                                                                  v354 = 0;
                                                                                                                                                                                                                  v284 = 0;
                                                                                                                                                                                                                  if (&rep)
                                                                                                                                                                                                                    goto LABEL_698;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                goto LABEL_703;
                                                                                                                                                                                                              }
                                                                                                                                                                                                              v279 = (void **)&v420;
                                                                                                                                                                                                              v429 = v422;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            v279[4] = 0;
                                                                                                                                                                                                            goto LABEL_692;
                                                                                                                                                                                                          }
LABEL_685:
                                                                                                                                                                                                          v277 = 4;
                                                                                                                                                                                                          goto LABEL_686;
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                      if (v275 == &rep)
                                                                                                                                                                                                      {
                                                                                                                                                                                                        v443 = (std::__shared_weak_count *)((char *)&v440 + 8);
                                                                                                                                                                                                        ((void (*)(uint64_t (***)()))rep[3])(&rep);
                                                                                                                                                                                                        v276 = v354;
                                                                                                                                                                                                        v444 = v355;
                                                                                                                                                                                                        if (v354 != &rep)
                                                                                                                                                                                                          goto LABEL_680;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      else
                                                                                                                                                                                                      {
                                                                                                                                                                                                        v443 = (std::__shared_weak_count *)v275;
                                                                                                                                                                                                        v444 = v273;
                                                                                                                                                                                                        v354 = 0;
                                                                                                                                                                                                        v276 = 0;
                                                                                                                                                                                                        if (&rep)
                                                                                                                                                                                                          goto LABEL_680;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      goto LABEL_685;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    v271 = &v424;
                                                                                                                                                                                                    v438 = (__int128 *)v426;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  v271[4] = 0;
                                                                                                                                                                                                  goto LABEL_674;
                                                                                                                                                                                                }
                                                                                                                                                                                                v268 = (void **)&v412;
                                                                                                                                                                                                v422 = v414;
                                                                                                                                                                                              }
                                                                                                                                                                                              v268[4] = 0;
                                                                                                                                                                                              goto LABEL_669;
                                                                                                                                                                                            }
                                                                                                                                                                                            v266 = &v416;
                                                                                                                                                                                            v426 = v418;
                                                                                                                                                                                          }
                                                                                                                                                                                          v266[4] = 0;
                                                                                                                                                                                          goto LABEL_664;
                                                                                                                                                                                        }
                                                                                                                                                                                        v264 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v406 + 16))(v406, v261);
                                                                                                                                                                                      }
                                                                                                                                                                                      v414 = (_QWORD *)v264;
                                                                                                                                                                                      goto LABEL_659;
                                                                                                                                                                                    }
                                                                                                                                                                                    v262 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v410 + 16))(v410, v261);
                                                                                                                                                                                  }
                                                                                                                                                                                  v418 = (_QWORD *)v262;
                                                                                                                                                                                  goto LABEL_654;
                                                                                                                                                                                }
                                                                                                                                                                                v260 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v398 + 16))(v398, v405);
                                                                                                                                                                              }
                                                                                                                                                                              v406 = (_QWORD *)v260;
                                                                                                                                                                              goto LABEL_649;
                                                                                                                                                                            }
                                                                                                                                                                            v259 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v402 + 16))(v402, v409);
                                                                                                                                                                          }
                                                                                                                                                                          v410 = (_QWORD *)v259;
                                                                                                                                                                          goto LABEL_644;
                                                                                                                                                                        }
                                                                                                                                                                        v258 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v382 + 16))(v382, v255);
                                                                                                                                                                      }
                                                                                                                                                                      v398 = (_QWORD *)v258;
                                                                                                                                                                      goto LABEL_639;
                                                                                                                                                                    }
                                                                                                                                                                    v257 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v386 + 16))(v386, v255);
                                                                                                                                                                  }
                                                                                                                                                                  v402 = (_QWORD *)v257;
                                                                                                                                                                  goto LABEL_634;
                                                                                                                                                                }
                                                                                                                                                                v253 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v374 + 16))(v374, v222);
                                                                                                                                                              }
                                                                                                                                                              v382 = (_QWORD *)v253;
                                                                                                                                                              goto LABEL_627;
                                                                                                                                                            }
                                                                                                                                                            v251 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v378 + 16))(v378, v222);
                                                                                                                                                          }
                                                                                                                                                          v386 = (_QWORD *)v251;
                                                                                                                                                          goto LABEL_622;
                                                                                                                                                        }
                                                                                                                                                        v241 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v390 + 16))(v390, v222);
                                                                                                                                                      }
                                                                                                                                                      v354 = (uint64_t (***)())v241;
                                                                                                                                                      goto LABEL_587;
                                                                                                                                                    }
                                                                                                                                                    v239 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v394 + 16))(v394, v222);
                                                                                                                                                  }
                                                                                                                                                  v361 = (void **)v239;
                                                                                                                                                  goto LABEL_582;
                                                                                                                                                }
                                                                                                                                                v237 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v374 + 16))(v374, v222);
                                                                                                                                              }
                                                                                                                                              v390 = (_QWORD *)v237;
                                                                                                                                              goto LABEL_577;
                                                                                                                                            }
                                                                                                                                            v235 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v378 + 16))(v378, v222);
                                                                                                                                          }
                                                                                                                                          v394 = (_QWORD *)v235;
                                                                                                                                          goto LABEL_572;
                                                                                                                                        }
                                                                                                                                        v234 = (*(uint64_t (**)(unint64_t *, uint64_t))(*v348 + 16))(v348, v222);
                                                                                                                                      }
                                                                                                                                      v374 = (_QWORD *)v234;
                                                                                                                                      goto LABEL_567;
                                                                                                                                    }
                                                                                                                                    v231 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)&v344 + 1) + 16))(*((_QWORD *)&v344 + 1), v222);
                                                                                                                                  }
                                                                                                                                  v378 = (_QWORD *)v231;
                                                                                                                                  goto LABEL_562;
                                                                                                                                }
                                                                                                                                v348 = (unint64_t *)v366;
                                                                                                                              }
                                                                                                                              v227[10] = 0;
                                                                                                                              goto LABEL_547;
                                                                                                                            }
                                                                                                                            v226 = v359;
                                                                                                                            *((_QWORD *)&v344 + 1) = v361;
                                                                                                                          }
                                                                                                                          v226[4] = 0;
                                                                                                                          goto LABEL_542;
                                                                                                                        }
LABEL_530:
                                                                                                                        v224 = 4;
                                                                                                                        goto LABEL_531;
                                                                                                                      }
                                                                                                                      v220 = (void ***)&v354;
                                                                                                                      v361 = (void **)v217;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      v220 = &v361;
                                                                                                                    }
                                                                                                                    *v220 = 0;
                                                                                                                    v362 = (unint64_t)v355;
                                                                                                                    v221 = &off_24C9E9F30;
                                                                                                                    goto LABEL_524;
                                                                                                                  }
                                                                                                                  v188 = (*(uint64_t (**)(uint64_t *, _QWORD *))(*v366 + 16))(v366, v147);
                                                                                                                }
                                                                                                                v443 = (std::__shared_weak_count *)v188;
                                                                                                                goto LABEL_429;
                                                                                                              }
                                                                                                              v185 = (*((uint64_t (**)(void **, _QWORD *))*v361 + 2))(v361, v147);
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              v119 = v373;
                                                                                                            }
                                                                                                            v354 = (uint64_t (***)())v185;
                                                                                                            goto LABEL_424;
                                                                                                          }
                                                                                                          v361 = (void **)&v443->__vftable;
                                                                                                        }
                                                                                                        v172[4] = 0;
                                                                                                        goto LABEL_373;
                                                                                                      }
LABEL_366:
                                                                                                      v171 = 4;
                                                                                                      goto LABEL_367;
                                                                                                    }
                                                                                                  }
                                                                                                  if (v169 == &rep)
                                                                                                  {
                                                                                                    v434 = &v432;
                                                                                                    ((void (*)(uint64_t (***)()))rep[3])(&rep);
                                                                                                    v170 = v354;
                                                                                                    v435 = v355;
                                                                                                    if (v354 != &rep)
                                                                                                      goto LABEL_361;
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    v434 = (size_t *)v169;
                                                                                                    v435 = v167;
                                                                                                    v354 = 0;
                                                                                                    v170 = 0;
                                                                                                    if (&rep)
                                                                                                      goto LABEL_361;
                                                                                                  }
                                                                                                  goto LABEL_366;
                                                                                                }
                                                                                                v165 = (void **)&v420;
                                                                                                v429 = v422;
                                                                                              }
                                                                                              v165[4] = 0;
                                                                                              goto LABEL_355;
                                                                                            }
LABEL_348:
                                                                                            v163 = 4;
                                                                                            goto LABEL_349;
                                                                                          }
                                                                                        }
                                                                                        if (v161 == &rep)
                                                                                        {
                                                                                          v443 = (std::__shared_weak_count *)((char *)&v440 + 8);
                                                                                          ((void (*)(uint64_t (***)()))rep[3])(&rep);
                                                                                          v162 = v354;
                                                                                          v444 = v355;
                                                                                          if (v354 != &rep)
                                                                                            goto LABEL_343;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          v443 = (std::__shared_weak_count *)v161;
                                                                                          v444 = v159;
                                                                                          v354 = 0;
                                                                                          v162 = 0;
                                                                                          if (&rep)
                                                                                            goto LABEL_343;
                                                                                        }
                                                                                        goto LABEL_348;
                                                                                      }
                                                                                      v157 = &v424;
                                                                                      v438 = (__int128 *)v426;
                                                                                    }
                                                                                    v157[4] = 0;
                                                                                    goto LABEL_337;
                                                                                  }
                                                                                  v154 = (void **)&v412;
                                                                                  v422 = v414;
                                                                                }
                                                                                v154[4] = 0;
                                                                                goto LABEL_332;
                                                                              }
                                                                              v152 = &v416;
                                                                              v426 = v418;
                                                                            }
                                                                            v152[4] = 0;
                                                                            goto LABEL_327;
                                                                          }
                                                                          v150 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v406 + 16))(v406, v147);
                                                                        }
                                                                        v414 = (_QWORD *)v150;
                                                                        goto LABEL_322;
                                                                      }
                                                                      v148 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v410 + 16))(v410, v147);
                                                                    }
                                                                    v418 = (_QWORD *)v148;
                                                                    goto LABEL_317;
                                                                  }
                                                                  v146 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v398 + 16))(v398, v405);
                                                                }
                                                                v406 = (_QWORD *)v146;
                                                                goto LABEL_312;
                                                              }
                                                              v145 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v402 + 16))(v402, v409);
                                                            }
                                                            v410 = (_QWORD *)v145;
                                                            goto LABEL_307;
                                                          }
                                                          v144 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v382 + 16))(v382, v141);
                                                        }
                                                        v398 = (_QWORD *)v144;
                                                        goto LABEL_302;
                                                      }
                                                      v143 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v386 + 16))(v386, v141);
                                                    }
                                                    v402 = (_QWORD *)v143;
                                                    goto LABEL_297;
                                                  }
                                                  v139 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v374 + 16))(v374, v108);
                                                }
                                                v382 = (_QWORD *)v139;
                                                goto LABEL_290;
                                              }
                                              v137 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v378 + 16))(v378, v108);
                                            }
                                            v386 = (_QWORD *)v137;
                                            goto LABEL_285;
                                          }
                                          v127 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v390 + 16))(v390, v108);
                                        }
                                        v354 = (uint64_t (***)())v127;
                                        goto LABEL_250;
                                      }
                                      v125 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v394 + 16))(v394, v108);
                                    }
                                    v361 = (void **)v125;
                                    goto LABEL_245;
                                  }
                                  v123 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v374 + 16))(v374, v108);
                                }
                                v390 = (_QWORD *)v123;
                                goto LABEL_240;
                              }
                              v121 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v378 + 16))(v378, v108);
                            }
                            v394 = (_QWORD *)v121;
                            goto LABEL_235;
                          }
                          v120 = (*(uint64_t (**)(unint64_t *, uint64_t))(*v348 + 16))(v348, v108);
                        }
                        v374 = (_QWORD *)v120;
                        goto LABEL_230;
                      }
                      v117 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)&v344 + 1) + 16))(*((_QWORD *)&v344 + 1), v108);
                    }
                    v378 = (_QWORD *)v117;
                    goto LABEL_225;
                  }
                  v348 = (unint64_t *)v366;
                }
                v113[10] = 0;
                goto LABEL_210;
              }
              v112 = v359;
              *((_QWORD *)&v344 + 1) = v361;
            }
            v112[4] = 0;
            goto LABEL_205;
          }
LABEL_193:
          v110 = 4;
          goto LABEL_194;
        }
        v106 = (void ***)&v354;
        v361 = (void **)v103;
      }
      else
      {
        v106 = &v361;
      }
      *v106 = 0;
      v362 = (unint64_t)v355;
      v107 = &off_24C9E9EA0;
      goto LABEL_187;
    }
    if (a1 != a2)
    {
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      sub_20EE090CC((_QWORD *)a1, *(char **)(a2 + 16));
    }
  }
  else
  {
    sub_20E9092A4(a1, a2);
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v99 = *(_QWORD *)(a2 + 24);
  memset(object, 0, sizeof(object));
  sub_20E9099B8((uint64_t)object, v99);
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0)
    {
      sub_20E860C04(v359, (void *)i[2], i[3]);
    }
    else
    {
      *(_OWORD *)v359 = *((_OWORD *)i + 1);
      v360[0] = i[4];
    }
    v102 = object[1];
    if (object[1] < object[2])
    {
      v101 = *(_OWORD *)v359;
      *((_QWORD *)object[1] + 2) = v360[0];
      *v102 = v101;
      object[1] = (char *)v102 + 24;
    }
    else
    {
      object[1] = sub_20E8F7CF0(object, (uint64_t)v359);
      if (SHIBYTE(v360[0]) < 0)
        operator delete(v359[0]);
    }
  }
  *(_OWORD *)(a3 + 24) = *(_OWORD *)object;
  *(void **)(a3 + 40) = object[2];
}

void sub_20EE06108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,void *a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;

  if (a35 && a34 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a45);
  if (*(char *)(v54 - 233) < 0)
  {
    operator delete(*(void **)(v54 - 256));
    sub_20E863784((uint64_t)&a54);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a54);
  _Unwind_Resume(a1);
}

void sub_20EE06470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a23)
    JUMPOUT(0x20EE06790);
  JUMPOUT(0x20EE06758);
}

void sub_20EE06480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a26)
    JUMPOUT(0x20EE06A20);
  JUMPOUT(0x20EE069E8);
}

void sub_20EE06490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26)
{
  sub_20E8F74DC(&a23);
  sub_20E8F74DC(&a26);
  _Unwind_Resume(a1);
}

void sub_20EE064B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,_QWORD *a46)
{
  _QWORD *v46;
  uint64_t v48;

  if (a46 == v46)
  {
    v48 = 4;
  }
  else
  {
    if (!a46)
      JUMPOUT(0x20EE06BF4);
    v48 = 5;
    v46 = a46;
  }
  (*(void (**)(_QWORD *))(*v46 + 8 * v48))(v46);
  sub_20E8F74DC(&a26);
  _Unwind_Resume(a1);
}

void sub_20EE0655C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  void **v29;

  sub_20E8F74DC(&a29);
  sub_20E8F74DC(v29);
  _Unwind_Resume(a1);
}

void sub_20EE06578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  void **v56;

  if (a56 < 0)
    operator delete(__p);
  sub_20E8F74DC(&a29);
  sub_20E8F74DC(v56);
  _Unwind_Resume(a1);
}

void sub_20EE065A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,_QWORD *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,_QWORD *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,_QWORD *a61)
{
  _QWORD *v61;
  void **v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  void **v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void **v80;
  unint64_t v81;
  uint64_t v82;
  void **v83;

  if (v66 != v62)
  {
    do
    {
      if (*((char *)v62 + v68 - 1) < 0)
        operator delete(*(void **)((char *)v62 + v68 - 24));
      v68 -= 24;
    }
    while (v68);
  }
  v70 = *(_QWORD **)(v69 - 128);
  if (v70 == v67)
  {
    v71 = 4;
  }
  else
  {
    if (!v70)
      goto LABEL_10;
    v71 = 5;
    v67 = *(_QWORD **)(v69 - 128);
  }
  (*(void (**)(_QWORD *))(*v67 + 8 * v71))(v67);
LABEL_10:
  if (a46 == v64)
  {
    v72 = 4;
  }
  else
  {
    if (!a46)
      goto LABEL_15;
    v72 = 5;
    v64 = a46;
  }
  (*(void (**)(_QWORD *))(*v64 + 8 * v72))(v64);
LABEL_15:
  if (a61 == v61)
  {
    v73 = 4;
  }
  else
  {
    if (!a61)
      goto LABEL_20;
    v73 = 5;
    v61 = a61;
  }
  (*(void (**)(_QWORD *))(*v61 + 8 * v73))(v61);
LABEL_20:
  v74 = a55;
  if (a55 == v63)
  {
    v75 = 4;
    v74 = v63;
  }
  else
  {
    if (!a55)
      goto LABEL_25;
    v75 = 5;
  }
  (*(void (**)(_QWORD *))(*v74 + 8 * v75))(v74);
LABEL_25:
  if ((_QWORD *)STACK[0x410] == a15)
  {
    v76 = 4;
  }
  else
  {
    if (!STACK[0x410])
      goto LABEL_30;
    v76 = 5;
    a15 = (_QWORD *)STACK[0x410];
  }
  (*(void (**)(void))(*a15 + 8 * v76))();
LABEL_30:
  if ((_QWORD *)STACK[0x440] == a16)
  {
    v77 = 4;
  }
  else
  {
    if (!STACK[0x440])
      goto LABEL_35;
    v77 = 5;
    a16 = (_QWORD *)STACK[0x440];
  }
  (*(void (**)(void))(*a16 + 8 * v77))();
LABEL_35:
  if ((_QWORD *)STACK[0x3B0] == a17)
  {
    v78 = 4;
  }
  else
  {
    if (!STACK[0x3B0])
      goto LABEL_40;
    v78 = 5;
    a17 = (_QWORD *)STACK[0x3B0];
  }
  (*(void (**)(void))(*a17 + 8 * v78))();
LABEL_40:
  if ((_QWORD *)STACK[0x3E0] == a12)
  {
    v79 = 4;
  }
  else
  {
    if (!STACK[0x3E0])
    {
      v80 = a23;
      if (a23)
        goto LABEL_48;
      goto LABEL_44;
    }
    v79 = 5;
    a12 = (_QWORD *)STACK[0x3E0];
  }
  (*(void (**)(void))(*a12 + 8 * v79))();
  v80 = a23;
  if (a23)
  {
LABEL_48:
    v83 = v80;
    if (v62 != v80)
    {
      do
      {
        if (*((char *)v62 - 1) < 0)
          operator delete(*(v62 - 3));
        v62 -= 3;
      }
      while (v62 != v80);
      v83 = a23;
    }
    operator delete(v83);
    v81 = STACK[0x2F0];
    if ((_QWORD *)STACK[0x2F0] != a14)
      goto LABEL_55;
    goto LABEL_45;
  }
LABEL_44:
  v81 = STACK[0x2F0];
  if ((_QWORD *)STACK[0x2F0] != a14)
  {
LABEL_55:
    if (!v81)
      goto LABEL_58;
    v82 = 5;
    a14 = (_QWORD *)v81;
LABEL_57:
    (*(void (**)(void))(*a14 + 8 * v82))();
LABEL_58:
    if (STACK[0x320] != v65 && !STACK[0x320])
      JUMPOUT(0x20EE06B8CLL);
    JUMPOUT(0x20EE06B7CLL);
  }
LABEL_45:
  v82 = 4;
  goto LABEL_57;
}

void sub_20EE06838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,_QWORD *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,_QWORD *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,_QWORD *a61)
{
  _QWORD *v61;
  void **v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  void **v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void **v80;
  unint64_t v81;
  uint64_t v82;
  void **v83;

  if (v66 != v62)
  {
    do
    {
      if (*((char *)v62 + v68 - 1) < 0)
        operator delete(*(void **)((char *)v62 + v68 - 24));
      v68 -= 24;
    }
    while (v68);
  }
  v70 = *(_QWORD **)(v69 - 128);
  if (v70 == v67)
  {
    v71 = 4;
  }
  else
  {
    if (!v70)
      goto LABEL_10;
    v71 = 5;
    v67 = *(_QWORD **)(v69 - 128);
  }
  (*(void (**)(_QWORD *))(*v67 + 8 * v71))(v67);
LABEL_10:
  if (a46 == v64)
  {
    v72 = 4;
  }
  else
  {
    if (!a46)
      goto LABEL_15;
    v72 = 5;
    v64 = a46;
  }
  (*(void (**)(_QWORD *))(*v64 + 8 * v72))(v64);
LABEL_15:
  if (a61 == v61)
  {
    v73 = 4;
  }
  else
  {
    if (!a61)
      goto LABEL_20;
    v73 = 5;
    v61 = a61;
  }
  (*(void (**)(_QWORD *))(*v61 + 8 * v73))(v61);
LABEL_20:
  v74 = a55;
  if (a55 == v63)
  {
    v75 = 4;
    v74 = v63;
  }
  else
  {
    if (!a55)
      goto LABEL_25;
    v75 = 5;
  }
  (*(void (**)(_QWORD *))(*v74 + 8 * v75))(v74);
LABEL_25:
  if ((_QWORD *)STACK[0x410] == a15)
  {
    v76 = 4;
  }
  else
  {
    if (!STACK[0x410])
      goto LABEL_30;
    v76 = 5;
    a15 = (_QWORD *)STACK[0x410];
  }
  (*(void (**)(void))(*a15 + 8 * v76))();
LABEL_30:
  if ((_QWORD *)STACK[0x440] == a16)
  {
    v77 = 4;
  }
  else
  {
    if (!STACK[0x440])
      goto LABEL_35;
    v77 = 5;
    a16 = (_QWORD *)STACK[0x440];
  }
  (*(void (**)(void))(*a16 + 8 * v77))();
LABEL_35:
  if ((_QWORD *)STACK[0x3B0] == a17)
  {
    v78 = 4;
  }
  else
  {
    if (!STACK[0x3B0])
      goto LABEL_40;
    v78 = 5;
    a17 = (_QWORD *)STACK[0x3B0];
  }
  (*(void (**)(void))(*a17 + 8 * v78))();
LABEL_40:
  if ((_QWORD *)STACK[0x3E0] == a12)
  {
    v79 = 4;
  }
  else
  {
    if (!STACK[0x3E0])
    {
      v80 = a26;
      if (a26)
        goto LABEL_48;
      goto LABEL_44;
    }
    v79 = 5;
    a12 = (_QWORD *)STACK[0x3E0];
  }
  (*(void (**)(void))(*a12 + 8 * v79))();
  v80 = a26;
  if (a26)
  {
LABEL_48:
    v83 = v80;
    if (v62 != v80)
    {
      do
      {
        if (*((char *)v62 - 1) < 0)
          operator delete(*(v62 - 3));
        v62 -= 3;
      }
      while (v62 != v80);
      v83 = a26;
    }
    operator delete(v83);
    v81 = STACK[0x2F0];
    if ((_QWORD *)STACK[0x2F0] != a14)
      goto LABEL_55;
    goto LABEL_45;
  }
LABEL_44:
  v81 = STACK[0x2F0];
  if ((_QWORD *)STACK[0x2F0] != a14)
  {
LABEL_55:
    if (!v81)
      goto LABEL_58;
    v82 = 5;
    a14 = (_QWORD *)v81;
LABEL_57:
    (*(void (**)(void))(*a14 + 8 * v82))();
LABEL_58:
    if (STACK[0x320] != v65 && !STACK[0x320])
      JUMPOUT(0x20EE06CCCLL);
    JUMPOUT(0x20EE06CBCLL);
  }
LABEL_45:
  v82 = 4;
  goto LABEL_57;
}

void sub_20EE06AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,_QWORD *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,_QWORD *a55)
{
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  if (a46 == v57)
  {
    v62 = 4;
  }
  else
  {
    if (!a46)
      goto LABEL_6;
    v62 = 5;
    v57 = a46;
  }
  (*(void (**)(_QWORD *))(*v57 + 8 * v62))(v57);
LABEL_6:
  if (a55 == v56)
  {
    v63 = 4;
  }
  else
  {
    if (!a55)
      goto LABEL_11;
    v63 = 5;
    v56 = a55;
  }
  (*(void (**)(_QWORD *))(*v56 + 8 * v63))(v56);
LABEL_11:
  if ((_QWORD *)STACK[0x350] == v55)
  {
    v64 = 4;
  }
  else
  {
    if (!STACK[0x350])
      goto LABEL_16;
    v64 = 5;
    v55 = (_QWORD *)STACK[0x350];
  }
  (*(void (**)(_QWORD *))(*v55 + 8 * v64))(v55);
LABEL_16:
  if ((_QWORD *)STACK[0x380] == v59)
  {
    v65 = 4;
  }
  else
  {
    if (!STACK[0x380])
      goto LABEL_21;
    v65 = 5;
    v59 = (_QWORD *)STACK[0x380];
  }
  (*(void (**)(_QWORD *))(*v59 + 8 * v65))(v59);
LABEL_21:
  if ((_QWORD *)STACK[0x290] == v60)
  {
    v66 = 4;
  }
  else
  {
    if (!STACK[0x290])
      goto LABEL_26;
    v66 = 5;
    v60 = (_QWORD *)STACK[0x290];
  }
  (*(void (**)(_QWORD *))(*v60 + 8 * v66))(v60);
LABEL_26:
  if ((_QWORD *)STACK[0x2C0] == v58)
  {
    v67 = 4;
  }
  else
  {
    if (!STACK[0x2C0])
      goto LABEL_31;
    v67 = 5;
    v58 = (_QWORD *)STACK[0x2C0];
  }
  (*(void (**)(_QWORD *))(*v58 + 8 * v67))(v58);
LABEL_31:
  sub_20EA737F0(&a29);
  sub_20E8F74DC(&a26);
  _Unwind_Resume(a1);
}

void sub_20EE06C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,_QWORD *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,_QWORD *a55)
{
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  if (a46 == v57)
  {
    v62 = 4;
  }
  else
  {
    if (!a46)
      goto LABEL_6;
    v62 = 5;
    v57 = a46;
  }
  (*(void (**)(_QWORD *))(*v57 + 8 * v62))(v57);
LABEL_6:
  if (a55 == v56)
  {
    v63 = 4;
  }
  else
  {
    if (!a55)
      goto LABEL_11;
    v63 = 5;
    v56 = a55;
  }
  (*(void (**)(_QWORD *))(*v56 + 8 * v63))(v56);
LABEL_11:
  if ((_QWORD *)STACK[0x350] == v55)
  {
    v64 = 4;
  }
  else
  {
    if (!STACK[0x350])
      goto LABEL_16;
    v64 = 5;
    v55 = (_QWORD *)STACK[0x350];
  }
  (*(void (**)(_QWORD *))(*v55 + 8 * v64))(v55);
LABEL_16:
  if ((_QWORD *)STACK[0x380] == v59)
  {
    v65 = 4;
  }
  else
  {
    if (!STACK[0x380])
      goto LABEL_21;
    v65 = 5;
    v59 = (_QWORD *)STACK[0x380];
  }
  (*(void (**)(_QWORD *))(*v59 + 8 * v65))(v59);
LABEL_21:
  if ((_QWORD *)STACK[0x290] == v60)
  {
    v66 = 4;
  }
  else
  {
    if (!STACK[0x290])
      goto LABEL_26;
    v66 = 5;
    v60 = (_QWORD *)STACK[0x290];
  }
  (*(void (**)(_QWORD *))(*v60 + 8 * v66))(v60);
LABEL_26:
  if ((_QWORD *)STACK[0x2C0] == v58)
  {
    v67 = 4;
  }
  else
  {
    if (!STACK[0x2C0])
      goto LABEL_31;
    v67 = 5;
    v58 = (_QWORD *)STACK[0x2C0];
  }
  (*(void (**)(_QWORD *))(*v58 + 8 * v67))(v58);
LABEL_31:
  sub_20EA737F0(&a29);
  _Unwind_Resume(a1);
}

void sub_20EE06D3C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5F9E0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F9E0))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5F9D8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5F9E0);
  }
  *a1 = qword_254A5F9D8;
}

void sub_20EE06DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5F9E0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5F9E0);
  _Unwind_Resume(a1);
}

void sub_20EE06E30(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  int v5;
  unsigned __int8 v6;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  unint64_t v14;
  uint64_t *j;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;
  __int128 v20;
  unint64_t v21;
  __uint64_t __dst[2];
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  char v27;
  void *v28;
  char v29;
  char v30;
  void *v31;
  char v32;
  char v33;
  void *v34;
  char v35;
  void *__p;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = sub_210219C18();
  v5 = *(unsigned __int8 *)(a1 + 40);
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LODWORD(v24) = 67109120;
    HIDWORD(v24) = v5;
    v8 = (char *)_os_log_send_and_compose_impl();
    v9 = strlen(v8);
    __dst[0] = 0;
    pthread_threadid_np(0, __dst);
    v10 = __dst[0];
    timespec_get((timespec *)__dst, 1);
    sub_210219E20(&v24, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v4 + 1), (__int128 *)(v4 + 5), "ActiveAnchorGroups:AG:%d", 0x18uLL, v8, v9, v10, __dst);
    std::mutex::lock(&stru_254A5A410);
    v11 = qword_254A5A458;
    for (i = unk_254A5A460; v11 != i; v11 += 40)
    {
      v13 = *(_QWORD *)(v11 + 32);
      if (!v13)
        sub_20E86D37C();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v24);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v37 < 0)
    {
      operator delete(__p);
      if ((v35 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v33)
        {
LABEL_14:
          if (v30 && v29 < 0)
            operator delete(v28);
          if (v27 < 0)
            operator delete(v25);
          if (v8)
            free(v8);
          goto LABEL_21;
        }
LABEL_12:
        if (v32 < 0)
          operator delete(v31);
        goto LABEL_14;
      }
    }
    else if ((v35 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v34);
    if (!v33)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if (os_signpost_enabled((os_log_t)*v4))
  {
    LODWORD(v24) = 67109120;
    HIDWORD(v24) = v5;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  if (*(_BYTE *)(a1 + 40))
  {
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v14 = *(_QWORD *)(a1 + 24);
    v21 = 0;
    v20 = 0uLL;
    sub_20E9099B8((uint64_t)&v20, v14);
    for (j = *(uint64_t **)(a1 + 16); j; j = (uint64_t *)*j)
    {
      if (*((char *)j + 39) < 0)
      {
        sub_20E860C04(__dst, (void *)j[2], j[3]);
      }
      else
      {
        *(_OWORD *)__dst = *((_OWORD *)j + 1);
        v23 = j[4];
      }
      v19 = (_OWORD *)*((_QWORD *)&v20 + 1);
      if (*((_QWORD *)&v20 + 1) < v21)
      {
        v18 = *(_OWORD *)__dst;
        *(_QWORD *)(*((_QWORD *)&v20 + 1) + 16) = v23;
        *v19 = v18;
        *((_QWORD *)&v20 + 1) = (char *)v19 + 24;
      }
      else
      {
        *((_QWORD *)&v20 + 1) = sub_20E8F7CF0((void **)&v20, (uint64_t)__dst);
        if (SHIBYTE(v23) < 0)
          operator delete((void *)__dst[0]);
      }
    }
    v16 = v21;
    v17 = v20;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_OWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 40) = v16;
    *(_BYTE *)(a2 + 48) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
  }
}

void sub_20EE071E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, void *);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_20E8F74DC((void **)va);
  sub_20E8F74DC((void **)va1);
  _Unwind_Resume(a1);
}

void sub_20EE07210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24)
{
  if (a22 < 0)
    operator delete(__p);
  sub_20E8F74DC(&a13);
  sub_20E8F74DC(&a24);
  _Unwind_Resume(a1);
}

void sub_20EE0723C()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20EE07250);
}

void sub_20EE0726C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _OWORD *v6;
  uint64_t *v7;
  unsigned __int8 v8;
  char *v10;
  size_t v11;
  __darwin_time_t v12;
  uint64_t v13;
  uint64_t j;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  char *tv_sec;
  unsigned __int8 v37;
  uint64_t *v38;
  unsigned __int8 v39;
  unint64_t v40;
  char *v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  uint64_t v46;
  int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  void **v62;
  void **v63;
  uint64_t v64;
  const char *v65;
  size_t v66;
  unsigned __int8 v67;
  const char *v68;
  size_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  size_t v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  size_t v80;
  size_t v81;
  _BYTE **p_dst;
  void *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  size_t v87;
  size_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  char *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  void *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  const char *v134;
  void **v135;
  std::__shared_weak_count *v136;
  unint64_t *p_shared_owners;
  unint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  _QWORD *v157;
  size_t v158;
  const char *v159;
  uint64_t v160;
  int v161;
  unint64_t v162;
  char *v163;
  char *__s;
  char *__sa;
  void *v166[2];
  char v167;
  void *v168[2];
  char v169;
  timespec v170;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v172;
  const char *v173;
  int v174;
  const char *v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  uint64_t v178;
  _BYTE v179[24];
  __int128 v180;
  char *v181;
  void *v182[2];
  std::__shared_weak_count *v183;
  char *v184;
  std::__shared_weak_count *v185;
  _BYTE v186[24];
  _BYTE *__dst;
  __int128 v188;
  _BYTE object[64];
  void *v190[2];
  __int128 v191;
  void *v192[2];
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  char v203;
  uint64_t v204;
  uint64_t v205;
  char v206;
  __int128 v207;
  uint64_t v208;
  __int128 v209;
  __int16 v210;
  uint64_t v211;

  v211 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a2 + 40)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/UserAnchorNodeGroup/src/ActiveAnchorFilter.cpp", 68, (uint64_t)"anchor.anchor_.group_id_", 24, (uint64_t)"Anchor must have a group ID set", 31, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v6 = (_OWORD *)(a2 + 16);
  if (*(_BYTE *)(a1 + 40))
  {
    if (sub_20EAA8F0C((_QWORD *)a1, a2 + 16))
    {
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 40) = 0;
      if (*(_BYTE *)(a2 + 40))
      {
        if (*(char *)(a2 + 39) < 0)
        {
          sub_20E860C04((_BYTE *)(a3 + 16), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
        }
        else
        {
          *(_OWORD *)(a3 + 16) = *v6;
          *(_QWORD *)(a3 + 32) = *(_QWORD *)(a2 + 32);
        }
        *(_BYTE *)(a3 + 40) = 1;
      }
      v16 = *(_OWORD *)(a2 + 256);
      *(_OWORD *)(a3 + 240) = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a3 + 256) = v16;
      *(_BYTE *)(a3 + 272) = *(_BYTE *)(a2 + 272);
      v17 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a3 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a3 + 192) = v17;
      v18 = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a3 + 208) = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a3 + 224) = v18;
      v19 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a3 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a3 + 128) = v19;
      v20 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a3 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a3 + 160) = v20;
      v21 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a3 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a3 + 64) = v21;
      v22 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a3 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a3 + 96) = v22;
      *(_BYTE *)(a3 + 280) = 0;
      *(_BYTE *)(a3 + 296) = 0;
      if (*(_BYTE *)(a2 + 296))
      {
        v23 = *(_QWORD *)(a2 + 288);
        *(_QWORD *)(a3 + 280) = *(_QWORD *)(a2 + 280);
        *(_QWORD *)(a3 + 288) = v23;
        if (v23)
        {
          v24 = (unint64_t *)(v23 + 8);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        *(_BYTE *)(a3 + 296) = 1;
      }
      *(_OWORD *)(a3 + 304) = *(_OWORD *)(a2 + 304);
      v26 = *(_QWORD *)(a2 + 328);
      *(_QWORD *)(a3 + 320) = *(_QWORD *)(a2 + 320);
      *(_QWORD *)(a3 + 328) = v26;
      v27 = *(_QWORD *)(a2 + 336);
      *(_QWORD *)(a3 + 336) = v27;
      if (v27)
      {
        v28 = (unint64_t *)(v27 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      *(_DWORD *)(a3 + 352) = 0;
      return;
    }
    *(_DWORD *)&object[24] = 0;
    if (*(_BYTE *)(a2 + 40))
      sub_20EB9CFE0((uint64_t)v179, (uint64_t)object, a2 + 16);
    else
      sub_20E9737A0(object, "nullopt");
    if (*(_DWORD *)&object[24] == -1)
      sub_20E877AB8();
    *(_QWORD *)v179 = v182;
    ((void (*)(timespec *__return_ptr, _BYTE *, _BYTE *))off_24C9EA068[*(unsigned int *)&object[24]])(&v170, v179, object);
    if (*(_DWORD *)&object[24] != -1)
      ((void (*)(_BYTE *, _BYTE *))off_24C9EA008[*(unsigned int *)&object[24]])(v179, object);
    if (rep >= 0)
      tv_sec = (char *)&v170;
    else
      tv_sec = (char *)v170.tv_sec;
    v37 = atomic_load((unsigned __int8 *)&qword_254A5F9E8);
    if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F9E8))
    {
      qword_254A5F9F0 = 0;
      qword_254A5F9F8 = 0;
      v157 = operator new(0x38uLL);
      v157[1] = 0;
      v157[2] = 0;
      *((_BYTE *)v157 + 24) = 0;
      *v157 = &off_24C9E9FB0;
      *((_BYTE *)v157 + 48) = 0;
      qword_254A5F9F0 = (uint64_t)(v157 + 3);
      qword_254A5F9F8 = (uint64_t)v157;
      __cxa_atexit((void (*)(void *))sub_20EE09DC0, &qword_254A5F9F0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5F9E8);
    }
    if (!sub_20EE09E28(&qword_254A5F9F0, 0, v30, v31, v32, v33, v34, v35, tv_sec, v158))
    {
LABEL_87:
      if (SHIBYTE(rep) < 0)
        operator delete((void *)v170.tv_sec);
      sub_20EE06D3C(&v178);
      if (**(int **)(v178 + 56) > 2
        || (v59 = *(unsigned __int8 *)(v178 + 72),
            v60 = sub_20E8C31DC(v178, "OSLogSurrogateAppender", 1, 0),
            v61 = v60,
            !v59)
        && !v60)
      {
LABEL_261:
        *(_OWORD *)object = *(_OWORD *)a2;
        object[16] = 0;
        object[40] = 0;
        v47 = *(unsigned __int8 *)(a2 + 40);
        if (*(_BYTE *)(a2 + 40))
        {
          if (*(char *)(a2 + 39) < 0)
          {
            sub_20E860C04(&object[16], *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
          }
          else
          {
            *(_OWORD *)&object[16] = *v6;
            *(_QWORD *)&object[32] = *(_QWORD *)(a2 + 32);
          }
          v47 = 1;
          object[40] = 1;
        }
        v139 = *(_OWORD *)(a2 + 256);
        v201 = *(_OWORD *)(a2 + 240);
        v202 = v139;
        v203 = *(_BYTE *)(a2 + 272);
        v140 = *(_OWORD *)(a2 + 192);
        v197 = *(_OWORD *)(a2 + 176);
        v198 = v140;
        v141 = *(_OWORD *)(a2 + 224);
        v199 = *(_OWORD *)(a2 + 208);
        v200 = v141;
        v142 = *(_OWORD *)(a2 + 128);
        v193 = *(_OWORD *)(a2 + 112);
        v194 = v142;
        v143 = *(_OWORD *)(a2 + 160);
        v195 = *(_OWORD *)(a2 + 144);
        v196 = v143;
        v144 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)&object[48] = *(_OWORD *)(a2 + 48);
        *(_OWORD *)v190 = v144;
        v145 = *(_OWORD *)(a2 + 96);
        v191 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)v192 = v145;
        LOBYTE(v204) = 0;
        v206 = 0;
        v55 = *(unsigned __int8 *)(a2 + 296);
        if (*(_BYTE *)(a2 + 296))
        {
          v146 = *(_QWORD *)(a2 + 288);
          v204 = *(_QWORD *)(a2 + 280);
          v205 = v146;
          if (v146)
          {
            v147 = (unint64_t *)(v146 + 8);
            do
              v148 = __ldxr(v147);
            while (__stxr(v148 + 1, v147));
            v47 = object[40];
          }
          v206 = 1;
        }
        v207 = *(_OWORD *)(a2 + 304);
        v208 = *(_QWORD *)(a2 + 320);
        LOWORD(v209) = 2;
        HIBYTE(v210) = 0;
        *(_OWORD *)a3 = *(_OWORD *)object;
        *(_BYTE *)(a3 + 16) = 0;
        *(_BYTE *)(a3 + 40) = 0;
        if (!v47)
          goto LABEL_274;
        goto LABEL_273;
      }
      v170.tv_sec = (__darwin_time_t)&v178;
      v170.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v172 = 2;
      v173 = "unknown file";
      v174 = 81;
      v176 = 0;
      v177 = 0;
      v175 = "unknown function";
      *(_DWORD *)&object[24] = 0;
      if (*(_BYTE *)(a2 + 40))
        sub_20EB9CFE0((uint64_t)v179, (uint64_t)object, a2 + 16);
      else
        sub_20E9737A0(object, "nullopt");
      if (*(_DWORD *)&object[24] == -1)
        sub_20E877AB8();
      *(_QWORD *)v179 = v182;
      ((void (*)(void **__return_ptr, _BYTE *, _BYTE *))off_24C9EA068[*(unsigned int *)&object[24]])(v168, v179, object);
      if (*(_DWORD *)&object[24] != -1)
        ((void (*)(_BYTE *, _BYTE *))off_24C9EA008[*(unsigned int *)&object[24]])(v179, object);
      v62 = v168;
      if (v169 < 0)
        v62 = (void **)v168[0];
      __sa = (char *)v62;
      *(_DWORD *)&object[24] = 0;
      if (*(_BYTE *)(a1 + 40))
        sub_20EE0A004((uint64_t)object, a1);
      else
        sub_20E9737A0(object, "nullopt");
      if (*(_DWORD *)&object[24] == -1)
        sub_20E877AB8();
      *(_QWORD *)v179 = v182;
      ((void (*)(void **__return_ptr, _BYTE *, _BYTE *))off_24C9EA068[*(unsigned int *)&object[24]])(v166, v179, object);
      if (*(_DWORD *)&object[24] != -1)
        ((void (*)(_BYTE *, _BYTE *))off_24C9EA008[*(unsigned int *)&object[24]])(v179, object);
      v63 = v166;
      if (v167 < 0)
        v63 = (void **)v166[0];
      v162 = v61;
      v163 = (char *)v63;
      v64 = *(_QWORD *)v170.tv_sec;
      v65 = (const char *)(*(_QWORD *)v170.tv_sec + 16);
      v159 = v65;
      if (*(char *)(*(_QWORD *)v170.tv_sec + 39) < 0)
      {
        v65 = *(const char **)(v64 + 16);
        v66 = *(_QWORD *)(v64 + 24);
      }
      else
      {
        v66 = *(unsigned __int8 *)(*(_QWORD *)v170.tv_sec + 39);
      }
      v160 = *(_QWORD *)v170.tv_sec;
      v161 = v59;
      v67 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v67 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v68 = byte_254A4A4F8;
      else
        v68 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v69 = byte_254A4A4F8[23];
      else
        v69 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v68, v65);
      v70 = &object[8];
      if (v69 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v69 >= 0x17)
      {
        v71 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v69 | 7) != 0x17)
          v71 = v69 | 7;
        v72 = v71 + 1;
        v70 = operator new(v71 + 1);
        *(_QWORD *)&object[16] = v69;
        *(_QWORD *)&object[24] = v72 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v70;
      }
      else
      {
        object[31] = v69;
        if (!v69)
        {
LABEL_126:
          v70[v69] = 0;
          object[32] = 1;
          v73 = &object[40];
          if (v66 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v66 >= 0x17)
          {
            v74 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v66 | 7) != 0x17)
              v74 = v66 | 7;
            v75 = v74 + 1;
            v73 = operator new(v74 + 1);
            *(_QWORD *)&object[48] = v66;
            *(_QWORD *)&object[56] = v75 | 0x8000000000000000;
            *(_QWORD *)&object[40] = v73;
          }
          else
          {
            object[63] = v66;
            if (!v66)
            {
LABEL_134:
              v73[v66] = 0;
              LOBYTE(v190[0]) = 1;
              v76 = *(NSObject **)object;
              if ((object[63] & 0x80000000) != 0)
                operator delete(*(void **)&object[40]);
              if (object[32] && (object[31] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (!v162 || !*(_QWORD *)(v162 + 24))
              {
                os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG);
                *(_DWORD *)object = 136315394;
                *(_QWORD *)&object[4] = __sa;
                *(_WORD *)&object[12] = 2080;
                *(_QWORD *)&object[14] = v163;
                v83 = (void *)_os_log_send_and_compose_impl();
                v84 = v161;
                if (v83)
                  free(v83);
LABEL_228:
                if (v167 < 0)
                {
                  operator delete(v166[0]);
                  if ((v169 & 0x80000000) == 0)
                  {
LABEL_230:
                    if (!v84)
                      goto LABEL_256;
                    goto LABEL_234;
                  }
                }
                else if ((v169 & 0x80000000) == 0)
                {
                  goto LABEL_230;
                }
                operator delete(v168[0]);
                if (!v84)
                {
LABEL_256:
                  sub_20E863570((uint64_t)&v170);
                  v136 = v177;
                  if (v177)
                  {
                    p_shared_owners = (unint64_t *)&v177->__shared_owners_;
                    do
                      v138 = __ldaxr(p_shared_owners);
                    while (__stlxr(v138 - 1, p_shared_owners));
                    if (!v138)
                    {
                      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                      std::__shared_weak_count::__release_weak(v136);
                    }
                  }
                  goto LABEL_261;
                }
LABEL_234:
                *(_DWORD *)&object[24] = 0;
                if (*(_BYTE *)(a2 + 40))
                  sub_20EB9CFE0((uint64_t)v182, (uint64_t)object, a2 + 16);
                else
                  sub_20E9737A0(object, "nullopt");
                if (*(_DWORD *)&object[24] == -1)
                  sub_20E877AB8();
                v182[0] = &__dst;
                ((void (*)(_BYTE *__return_ptr, void **, _BYTE *))off_24C9EA068[*(unsigned int *)&object[24]])(v179, v182, object);
                if (*(_DWORD *)&object[24] != -1)
                  ((void (*)(void **, _BYTE *))off_24C9EA008[*(unsigned int *)&object[24]])(v182, object);
                if (v179[23] >= 0)
                  v134 = v179;
                else
                  v134 = *(const char **)v179;
                *(_DWORD *)&object[24] = 0;
                if (*(_BYTE *)(a1 + 40))
                  sub_20EE0A004((uint64_t)object, a1);
                else
                  sub_20E9737A0(object, "nullopt");
                if (*(_DWORD *)&object[24] == -1)
                  sub_20E877AB8();
                __dst = v186;
                ((void (*)(void **__return_ptr, _BYTE **, _BYTE *))off_24C9EA068[*(unsigned int *)&object[24]])(v182, &__dst, object);
                if (*(_DWORD *)&object[24] != -1)
                  ((void (*)(_BYTE **, _BYTE *))off_24C9EA008[*(unsigned int *)&object[24]])(&__dst, object);
                v135 = v182;
                if (SHIBYTE(v183) < 0)
                  v135 = (void **)v182[0];
                sub_20E8C003C((uint64_t)&v170, "Anchors:Error:Trying to add an anchor to inactive group %s, active groups are %s", v134, (const char *)v135);
                if (SHIBYTE(v183) < 0)
                  operator delete(v182[0]);
                if ((v179[23] & 0x80000000) != 0)
                  operator delete(*(void **)v179);
                sub_20E863570((uint64_t)&v170);
                goto LABEL_256;
              }
              v77 = _os_log_pack_size();
              v78 = (std::__shared_weak_count_vtbl *)operator new(v77, (std::align_val_t)8uLL);
              v79 = (std::__shared_weak_count *)operator new();
              v79->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v79->__shared_owners_ = 0;
              v79->__shared_weak_owners_ = 0;
              v79[1].__vftable = v78;
              v182[0] = v78;
              v182[1] = v78;
              v184 = 0;
              v185 = 0;
              v183 = v79;
              v80 = strlen(__sa);
              if (v80 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v81 = v80;
              if (v80 >= 0x17)
              {
                v85 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v80 | 7) != 0x17)
                  v85 = v80 | 7;
                v86 = v85 + 1;
                p_dst = (_BYTE **)operator new(v85 + 1);
                *(_QWORD *)&v188 = v81;
                *((_QWORD *)&v188 + 1) = v86 | 0x8000000000000000;
                __dst = p_dst;
              }
              else
              {
                HIBYTE(v188) = v80;
                p_dst = &__dst;
                if (!v80)
                {
LABEL_153:
                  *((_BYTE *)p_dst + v81) = 0;
                  v87 = strlen(v163);
                  if (v87 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v88 = v87;
                  if (v87 >= 0x17)
                  {
                    v90 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v87 | 7) != 0x17)
                      v90 = v87 | 7;
                    v91 = v90 + 1;
                    v89 = operator new(v90 + 1);
                    *(_QWORD *)&v186[8] = v88;
                    *(_QWORD *)&v186[16] = v91 | 0x8000000000000000;
                    *(_QWORD *)v186 = v89;
                  }
                  else
                  {
                    v186[23] = v87;
                    v89 = v186;
                    if (!v87)
                      goto LABEL_161;
                  }
                  memcpy(v89, v163, v88);
LABEL_161:
                  v89[v88] = 0;
                  *(_QWORD *)&object[8] = __dst;
                  *(_QWORD *)&object[16] = v188;
                  *(_QWORD *)&object[23] = *(_QWORD *)((char *)&v188 + 7);
                  *(_OWORD *)&object[32] = *(_OWORD *)v186;
                  *(_QWORD *)&object[47] = *(_QWORD *)&v186[15];
                  *(_QWORD *)object = off_24C9EA0E0;
                  object[31] = HIBYTE(v188);
                  object[55] = v186[23];
                  v92 = (char *)operator new(0x50uLL);
                  *((_QWORD *)v92 + 3) = off_24C9EA0E0;
                  *((_QWORD *)v92 + 1) = 0;
                  *((_QWORD *)v92 + 2) = 0;
                  *(_QWORD *)v92 = &off_24C9EA090;
                  *((_OWORD *)v92 + 2) = *(_OWORD *)&object[8];
                  *((_QWORD *)v92 + 6) = *(_QWORD *)&object[24];
                  memset(&object[8], 0, 24);
                  *(_OWORD *)(v92 + 56) = *(_OWORD *)&object[32];
                  *((_QWORD *)v92 + 9) = *(_QWORD *)&object[48];
                  memset(&object[32], 0, 24);
                  v93 = v185;
                  v184 = v92 + 24;
                  v185 = (std::__shared_weak_count *)v92;
                  if (v93)
                  {
                    v94 = (unint64_t *)&v93->__shared_owners_;
                    do
                      v95 = __ldaxr(v94);
                    while (__stlxr(v95 - 1, v94));
                    if (!v95)
                    {
                      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                      std::__shared_weak_count::__release_weak(v93);
                    }
                  }
                  if ((object[55] & 0x80000000) != 0)
                  {
                    operator delete(*(void **)&object[32]);
                    if ((object[31] & 0x80000000) == 0)
                    {
LABEL_168:
                      *(_OWORD *)v179 = *(_OWORD *)v182;
                      v97 = v183;
                      v96 = v184;
                      *(_QWORD *)&v179[16] = v183;
                      if (!v183)
                        goto LABEL_174;
                      goto LABEL_172;
                    }
                  }
                  else if ((object[31] & 0x80000000) == 0)
                  {
                    goto LABEL_168;
                  }
                  operator delete(*(void **)&object[8]);
                  *(_OWORD *)v179 = *(_OWORD *)v182;
                  v97 = v183;
                  v96 = v184;
                  *(_QWORD *)&v179[16] = v183;
                  if (!v183)
                  {
LABEL_174:
                    v100 = v185;
                    *(_QWORD *)&v180 = v96;
                    *((_QWORD *)&v180 + 1) = v185;
                    if (v185)
                    {
                      v101 = (unint64_t *)&v185->__shared_owners_;
                      do
                        v102 = __ldxr(v101);
                      while (__stxr(v102 + 1, v101));
                      v181 = v96;
                      do
                        v103 = __ldaxr(v101);
                      while (__stlxr(v103 - 1, v101));
                      if (!v103)
                      {
                        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                        std::__shared_weak_count::__release_weak(v100);
                      }
                    }
                    else
                    {
                      v181 = v96;
                    }
                    v104 = v183;
                    if (v183)
                    {
                      v105 = (unint64_t *)&v183->__shared_owners_;
                      do
                        v106 = __ldaxr(v105);
                      while (__stlxr(v106 - 1, v105));
                      if (!v106)
                      {
                        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                        std::__shared_weak_count::__release_weak(v104);
                      }
                    }
                    v107 = *(_QWORD *)v179;
                    if (v181[31] >= 0)
                      v108 = v181 + 8;
                    else
                      v108 = (char *)*((_QWORD *)v181 + 1);
                    if (v181[55] >= 0)
                      v109 = v181 + 32;
                    else
                      v109 = (char *)*((_QWORD *)v181 + 4);
                    v110 = _os_log_pack_fill();
                    *(_DWORD *)v110 = 136315394;
                    *(_QWORD *)(v110 + 4) = v108;
                    *(_WORD *)(v110 + 12) = 2080;
                    *(_QWORD *)(v110 + 14) = v109;
                    v111 = operator new();
                    v112 = *(unsigned __int8 *)(v160 + 39);
                    v113 = v159;
                    if ((v112 & 0x80u) != 0)
                    {
                      v113 = *(const char **)(v160 + 16);
                      v112 = *(_QWORD *)(v160 + 24);
                    }
                    *(_QWORD *)v111 = v107;
                    *(_OWORD *)(v111 + 8) = *(_OWORD *)&v179[8];
                    *(_QWORD *)&v179[8] = 0;
                    *(_QWORD *)&v179[16] = 0;
                    *(_OWORD *)(v111 + 24) = v180;
                    v180 = 0uLL;
                    *(_QWORD *)(v111 + 40) = v113;
                    *(_QWORD *)(v111 + 48) = v112;
                    *(_BYTE *)(v111 + 56) = 2;
                    v182[0] = 0;
                    *(_QWORD *)object = v111;
                    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v162 + 24) + 40))(*(_QWORD *)(v162 + 24), object);
                    v114 = *(_QWORD *)object;
                    *(_QWORD *)object = 0;
                    if (v114)
                    {
                      v115 = *(std::__shared_weak_count **)(v114 + 32);
                      if (v115)
                      {
                        v116 = (unint64_t *)&v115->__shared_owners_;
                        do
                          v117 = __ldaxr(v116);
                        while (__stlxr(v117 - 1, v116));
                        if (!v117)
                        {
                          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                          std::__shared_weak_count::__release_weak(v115);
                        }
                      }
                      v118 = *(std::__shared_weak_count **)(v114 + 16);
                      if (v118)
                      {
                        v119 = (unint64_t *)&v118->__shared_owners_;
                        do
                          v120 = __ldaxr(v119);
                        while (__stlxr(v120 - 1, v119));
                        if (!v120)
                        {
                          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                          std::__shared_weak_count::__release_weak(v118);
                        }
                      }
                      MEMORY[0x212BC6398](v114, 0x10F0C40B62ED6C6);
                      v121 = v182[0];
                      v182[0] = 0;
                      if (v121)
                      {
                        v122 = (std::__shared_weak_count *)*((_QWORD *)v121 + 4);
                        if (v122)
                        {
                          v123 = (unint64_t *)&v122->__shared_owners_;
                          do
                            v124 = __ldaxr(v123);
                          while (__stlxr(v124 - 1, v123));
                          if (!v124)
                          {
                            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                            std::__shared_weak_count::__release_weak(v122);
                          }
                        }
                        v125 = (std::__shared_weak_count *)*((_QWORD *)v121 + 2);
                        if (v125)
                        {
                          v126 = (unint64_t *)&v125->__shared_owners_;
                          do
                            v127 = __ldaxr(v126);
                          while (__stlxr(v127 - 1, v126));
                          if (!v127)
                          {
                            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                            std::__shared_weak_count::__release_weak(v125);
                          }
                        }
                        MEMORY[0x212BC6398](v121, 0x10F0C40B62ED6C6);
                      }
                    }
                    v128 = (std::__shared_weak_count *)*((_QWORD *)&v180 + 1);
                    v84 = v161;
                    if (*((_QWORD *)&v180 + 1))
                    {
                      v129 = (unint64_t *)(*((_QWORD *)&v180 + 1) + 8);
                      do
                        v130 = __ldaxr(v129);
                      while (__stlxr(v130 - 1, v129));
                      if (!v130)
                      {
                        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                        std::__shared_weak_count::__release_weak(v128);
                      }
                    }
                    v131 = *(std::__shared_weak_count **)&v179[16];
                    if (*(_QWORD *)&v179[16])
                    {
                      v132 = (unint64_t *)(*(_QWORD *)&v179[16] + 8);
                      do
                        v133 = __ldaxr(v132);
                      while (__stlxr(v133 - 1, v132));
                      if (!v133)
                      {
                        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                        std::__shared_weak_count::__release_weak(v131);
                      }
                    }
                    goto LABEL_228;
                  }
LABEL_172:
                  v98 = (unint64_t *)&v97->__shared_owners_;
                  do
                    v99 = __ldxr(v98);
                  while (__stxr(v99 + 1, v98));
                  goto LABEL_174;
                }
              }
              memcpy(p_dst, __sa, v81);
              goto LABEL_153;
            }
          }
          memmove(v73, v65, v66);
          goto LABEL_134;
        }
      }
      memmove(v70, v68, v69);
      goto LABEL_126;
    }
    v38 = sub_210219C18();
    v39 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    v40 = atomic_load(&qword_254A5A450);
    v41 = "s/AppleCV3D/library/Essentials/Log/src/APILogging.cpp";
    if (!v40)
    {
LABEL_85:
      if (os_signpost_enabled((os_log_t)*v38))
      {
        *(_DWORD *)object = *((_QWORD *)v41 + 427);
        *(_QWORD *)&object[4] = tv_sec;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      goto LABEL_87;
    }
    *(_DWORD *)object = 136315138;
    *(_QWORD *)&object[4] = tv_sec;
    __s = (char *)_os_log_send_and_compose_impl();
    v42 = strlen(__s);
    *(_QWORD *)v179 = 0;
    pthread_threadid_np(0, (__uint64_t *)v179);
    v43 = *(_QWORD *)v179;
    timespec_get((timespec *)v179, 1);
    sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v38 + 1), (__int128 *)(v38 + 5), "Anchors:Error:Trying to add an anchor to inactive group %s", 0x3AuLL, __s, v42, v43, v179);
    std::mutex::lock(&stru_254A5A410);
    v44 = qword_254A5A458;
    for (i = unk_254A5A460; v44 != i; v44 += 40)
    {
      v46 = *(_QWORD *)(v44 + 32);
      if (!v46)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v46 + 48))(v46, object);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (SHIBYTE(v194) < 0)
    {
      operator delete(*((void **)&v193 + 1));
      v41 = "s/AppleCV3D/library/Essentials/Log/src/APILogging.cpp";
      if ((SBYTE7(v193) & 0x80000000) == 0)
      {
LABEL_46:
        if (!BYTE8(v191))
        {
LABEL_78:
          if (object[56] && (object[55] & 0x80000000) != 0)
            operator delete(*(void **)&object[32]);
          if ((object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          if (__s)
            free(__s);
          goto LABEL_85;
        }
LABEL_76:
        if (SBYTE7(v191) < 0)
          operator delete(v190[0]);
        goto LABEL_78;
      }
    }
    else
    {
      v41 = "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Log/src/APILogging.cpp" + 36;
      if ((SBYTE7(v193) & 0x80000000) == 0)
        goto LABEL_46;
    }
    operator delete(v192[0]);
    if (!BYTE8(v191))
      goto LABEL_78;
    goto LABEL_76;
  }
  v7 = sub_210219C18();
  v8 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    *(_WORD *)object = 0;
    v10 = (char *)_os_log_send_and_compose_impl();
    v11 = strlen(v10);
    v170.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v170);
    v12 = v170.tv_sec;
    timespec_get(&v170, 1);
    sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v7 + 1), (__int128 *)(v7 + 5), "Anchors:Error:Trying to add an anchor with no active group set", 0x3EuLL, v10, v11, v12, &v170);
    std::mutex::lock(&stru_254A5A410);
    v13 = qword_254A5A458;
    for (j = unk_254A5A460; v13 != j; v13 += 40)
    {
      v15 = *(_QWORD *)(v13 + 32);
      if (!v15)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v15 + 48))(v15, object);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (SHIBYTE(v194) < 0)
    {
      operator delete(*((void **)&v193 + 1));
      if ((SBYTE7(v193) & 0x80000000) == 0)
      {
LABEL_15:
        if (!BYTE8(v191))
        {
LABEL_52:
          if (object[56] && (object[55] & 0x80000000) != 0)
            operator delete(*(void **)&object[32]);
          if ((object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          if (v10)
            free(v10);
          goto LABEL_59;
        }
LABEL_50:
        if (SBYTE7(v191) < 0)
          operator delete(v190[0]);
        goto LABEL_52;
      }
    }
    else if ((SBYTE7(v193) & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete(v192[0]);
    if (!BYTE8(v191))
      goto LABEL_52;
    goto LABEL_50;
  }
LABEL_59:
  if (os_signpost_enabled((os_log_t)*v7))
  {
    *(_WORD *)object = 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  *(_OWORD *)object = *(_OWORD *)a2;
  object[16] = 0;
  object[40] = 0;
  v47 = *(unsigned __int8 *)(a2 + 40);
  if (*(_BYTE *)(a2 + 40))
  {
    if (*(char *)(a2 + 39) < 0)
    {
      sub_20E860C04(&object[16], *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
    }
    else
    {
      *(_OWORD *)&object[16] = *v6;
      *(_QWORD *)&object[32] = *(_QWORD *)(a2 + 32);
    }
    v47 = 1;
    object[40] = 1;
  }
  v48 = *(_OWORD *)(a2 + 256);
  v201 = *(_OWORD *)(a2 + 240);
  v202 = v48;
  v203 = *(_BYTE *)(a2 + 272);
  v49 = *(_OWORD *)(a2 + 192);
  v197 = *(_OWORD *)(a2 + 176);
  v198 = v49;
  v50 = *(_OWORD *)(a2 + 224);
  v199 = *(_OWORD *)(a2 + 208);
  v200 = v50;
  v51 = *(_OWORD *)(a2 + 128);
  v193 = *(_OWORD *)(a2 + 112);
  v194 = v51;
  v52 = *(_OWORD *)(a2 + 160);
  v195 = *(_OWORD *)(a2 + 144);
  v196 = v52;
  v53 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)&object[48] = *(_OWORD *)(a2 + 48);
  *(_OWORD *)v190 = v53;
  v54 = *(_OWORD *)(a2 + 96);
  v191 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)v192 = v54;
  LOBYTE(v204) = 0;
  v206 = 0;
  v55 = *(unsigned __int8 *)(a2 + 296);
  if (*(_BYTE *)(a2 + 296))
  {
    v56 = *(_QWORD *)(a2 + 288);
    v204 = *(_QWORD *)(a2 + 280);
    v205 = v56;
    if (v56)
    {
      v57 = (unint64_t *)(v56 + 8);
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      v47 = object[40];
    }
    v206 = 1;
  }
  v207 = *(_OWORD *)(a2 + 304);
  v208 = *(_QWORD *)(a2 + 320);
  LOWORD(v209) = 1;
  HIBYTE(v210) = 0;
  *(_OWORD *)a3 = *(_OWORD *)object;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  if (!v47)
    goto LABEL_274;
LABEL_273:
  *(_OWORD *)(a3 + 16) = *(_OWORD *)&object[16];
  *(_QWORD *)(a3 + 32) = *(_QWORD *)&object[32];
  memset(&object[16], 0, 24);
  *(_BYTE *)(a3 + 40) = 1;
LABEL_274:
  v149 = v202;
  *(_OWORD *)(a3 + 240) = v201;
  *(_OWORD *)(a3 + 256) = v149;
  *(_BYTE *)(a3 + 272) = v203;
  v150 = v198;
  *(_OWORD *)(a3 + 176) = v197;
  *(_OWORD *)(a3 + 192) = v150;
  v151 = v200;
  *(_OWORD *)(a3 + 208) = v199;
  *(_OWORD *)(a3 + 224) = v151;
  v152 = v194;
  *(_OWORD *)(a3 + 112) = v193;
  *(_OWORD *)(a3 + 128) = v152;
  v153 = v196;
  *(_OWORD *)(a3 + 144) = v195;
  *(_OWORD *)(a3 + 160) = v153;
  v154 = *(_OWORD *)v190;
  *(_OWORD *)(a3 + 48) = *(_OWORD *)&object[48];
  *(_OWORD *)(a3 + 64) = v154;
  v155 = *(_OWORD *)v192;
  *(_OWORD *)(a3 + 80) = v191;
  *(_OWORD *)(a3 + 96) = v155;
  *(_BYTE *)(a3 + 280) = 0;
  *(_BYTE *)(a3 + 296) = 0;
  if (v55)
  {
    v156 = v205;
    *(_QWORD *)(a3 + 280) = v204;
    *(_QWORD *)(a3 + 288) = v156;
    v204 = 0;
    v205 = 0;
    *(_BYTE *)(a3 + 296) = 1;
  }
  *(_OWORD *)(a3 + 304) = *(_OWORD *)(a2 + 304);
  *(_QWORD *)(a3 + 320) = *(_QWORD *)(a2 + 320);
  *(_OWORD *)(a3 + 328) = v209;
  *(_WORD *)(a3 + 344) = v210;
  *(_DWORD *)(a3 + 352) = 1;
  if (v47 && (object[39] & 0x80000000) != 0)
    operator delete(*(void **)&object[16]);
}

void sub_20EE08940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *__p,void *a60,int a61,__int16 a62,char a63)
{
  char a64;
  char a65;

  if (a65 && a64 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  if (a24 < 0)
    operator delete(a19);
  if (a30 < 0)
  {
    operator delete(a25);
    sub_20E863714((uint64_t)&a31);
    _Unwind_Resume(a1);
  }
  sub_20E863714((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20EE08B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18)
    JUMPOUT(0x20EE08C94);
  JUMPOUT(0x20EE08C78);
}

void sub_20EE08BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  void *v53;

  sub_20E96E218((uint64_t)&a53);
  if (!v53)
    JUMPOUT(0x20EE08CD4);
  free(v53);
  _Unwind_Resume(a1);
}

void sub_20EE08BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  sub_20E877A60((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void sub_20EE08BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if ((a30 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  JUMPOUT(0x20EE08CA4);
}

void sub_20EE08BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  sub_20E877A60((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void sub_20EE08BE8()
{
  JUMPOUT(0x20EE08CD0);
}

void sub_20EE08BF0()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20EE08C04);
}

void sub_20EE08CB4()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20EE08CC8);
}

void sub_20EE08CEC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  std::string v10;
  std::string v11;
  std::runtime_error v12;
  int v13;
  char v14;
  char v15;
  std::runtime_error v16;
  int v17;
  int v18;
  __int128 *v19;
  __int128 v20;
  std::runtime_error *v21;
  const char *v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 40))
  {
    v20 = xmmword_24C9E9E80;
    v21 = (std::runtime_error *)"Unable to request the anchors groups because there is no active group";
    v22 = (const char *)69;
    sub_20E8778D4((uint64_t)&v20, (uint64_t)v23, 0, 0, &v11);
    std::runtime_error::runtime_error(&v12, &v11);
    v12.__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
    v13 = 5;
    std::runtime_error::runtime_error(&v16, &v12);
    v16.__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
    v17 = v13;
    std::runtime_error::runtime_error((std::runtime_error *)a3, &v16);
    *(_QWORD *)a3 = &off_24C9EDA58;
    *(_DWORD *)(a3 + 16) = v17;
    *(_BYTE *)(a3 + 48) = 0;
    std::runtime_error::~runtime_error(&v16);
    std::runtime_error::~runtime_error(&v12);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v9 = (void *)v11.__r_.__value_.__r.__words[0];
    goto LABEL_17;
  }
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 == v6)
  {
    v8 = *(_QWORD *)a2;
LABEL_9:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_20E909ADC((char *)a3, v8, v5, 0xAAAAAAAAAAAAAAABLL * ((v5 - v8) >> 3));
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a2 + 24);
    *(_BYTE *)(a3 + 40) = *(_BYTE *)(a2 + 40);
    *(_BYTE *)(a3 + 48) = 1;
  }
  else
  {
    while (sub_20EAA8F0C((_QWORD *)a1, v5))
    {
      v5 += 24;
      if (v5 == v6)
      {
        v8 = *(_QWORD *)a2;
        v5 = *(_QWORD *)(a2 + 8);
        goto LABEL_9;
      }
    }
    v18 = 0;
    sub_20E878638((uint64_t)&v15, (uint64_t)&v16, (uint64_t)&xmmword_24C9E9E80);
    *(_QWORD *)&v20 = &v16;
    *((_QWORD *)&v20 + 1) = "Unable to requests the anchor groups because ";
    v21 = &v16;
    v22 = "Unable to requests the anchor groups because ";
    v23[0] = "Unable to requests the anchor groups because ";
    if (v18 == -1)
      sub_20E877AB8();
    v19 = &v20;
    ((void (*)(__int128 **, std::runtime_error *))off_24C9EA108[v18])(&v19, &v16);
    sub_20EB9CFE0((uint64_t)&v14, (uint64_t)&v16, v5);
    *(_QWORD *)&v20 = &v16;
    *((_QWORD *)&v20 + 1) = " is not active.";
    v21 = &v16;
    v22 = " is not active.";
    v23[0] = " is not active.";
    if (v18 == -1)
      sub_20E877AB8();
    v19 = &v20;
    ((void (*)(__int128 **, std::runtime_error *))off_24C9EA120[v18])(&v19, &v16);
    if (v18 == -1)
      sub_20E877AB8();
    *(_QWORD *)&v20 = &v19;
    ((void (*)(std::string *__return_ptr, __int128 *, std::runtime_error *))off_24C9EA068[v18])(&v10, &v20, &v16);
    if (v18 != -1)
      ((void (*)(__int128 *, std::runtime_error *))off_24C9EA008[v18])(&v20, &v16);
    std::runtime_error::runtime_error((std::runtime_error *)&v11, &v10);
    v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9EDA58;
    LODWORD(v11.__r_.__value_.__r.__words[2]) = 5;
    std::runtime_error::runtime_error(&v12, (const std::runtime_error *)&v11);
    v12.__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
    v13 = v11.__r_.__value_.__r.__words[2];
    std::runtime_error::runtime_error((std::runtime_error *)a3, &v12);
    *(_QWORD *)a3 = &off_24C9EDA58;
    *(_DWORD *)(a3 + 16) = v13;
    *(_BYTE *)(a3 + 48) = 0;
    std::runtime_error::~runtime_error(&v12);
    std::runtime_error::~runtime_error((std::runtime_error *)&v11);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    {
      v9 = (void *)v10.__r_.__value_.__r.__words[0];
LABEL_17:
      operator delete(v9);
    }
  }
}

void sub_20EE09014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20EE09090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE090A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE090B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE090CC(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t i;
  char *v6;
  void **v7;
  char v8;
  __int128 v9;
  void *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  int v17;
  uint64_t *v18;
  unint64_t v19;
  char *v20;
  char v21;

  v4 = a1[1];
  if (!v4)
    goto LABEL_19;
  for (i = 0; i != v4; ++i)
    *(_QWORD *)(*a1 + 8 * i) = 0;
  v6 = (char *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      if (v6 != a2)
      {
        v7 = (void **)(v6 + 16);
        v8 = a2[39];
        if (v6[39] < 0)
        {
          if (v8 >= 0)
            v10 = a2 + 16;
          else
            v10 = (void *)*((_QWORD *)a2 + 2);
          if (v8 >= 0)
            v11 = a2[39];
          else
            v11 = *((_QWORD *)a2 + 3);
          sub_20E867CBC(v7, v10, v11);
        }
        else if (a2[39] < 0)
        {
          sub_20E867BF8(v7, *((void **)a2 + 2), *((_QWORD *)a2 + 3));
        }
        else
        {
          v9 = *((_OWORD *)a2 + 1);
          *((_QWORD *)v6 + 4) = *((_QWORD *)a2 + 4);
          *(_OWORD *)v7 = v9;
        }
      }
      v12 = *(char **)v6;
      sub_20EE092C8((uint64_t)a1, (uint64_t)v6);
      a2 = *(char **)a2;
      v6 = v12;
      if (!v12)
        goto LABEL_19;
    }
    do
    {
      v20 = *(char **)v6;
      if (v6[39] < 0)
        operator delete(*((void **)v6 + 2));
      operator delete(v6);
      v6 = v20;
    }
    while (v20);
  }
  else
  {
LABEL_19:
    while (a2)
    {
      v13 = (char *)operator new(0x28uLL);
      v14 = (uint64_t)v13;
      v15 = (uint64_t *)(v13 + 16);
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      if (a2[39] < 0)
      {
        sub_20E860C04(v13 + 16, *((void **)a2 + 2), *((_QWORD *)a2 + 3));
      }
      else
      {
        v16 = *((_OWORD *)a2 + 1);
        *((_QWORD *)v13 + 4) = *((_QWORD *)a2 + 4);
        *(_OWORD *)v15 = v16;
      }
      v17 = *(char *)(v14 + 39);
      if (v17 >= 0)
        v18 = v15;
      else
        v18 = *(uint64_t **)(v14 + 16);
      if (v17 >= 0)
        v19 = *(unsigned __int8 *)(v14 + 39);
      else
        v19 = *(_QWORD *)(v14 + 24);
      *(_QWORD *)(v14 + 8) = sub_20E8D177C((uint64_t)&v21, v18, v19);
      sub_20EE092C8((uint64_t)a1, v14);
      a2 = *(char **)a2;
    }
  }
}

void sub_20EE09260(void *a1)
{
  void **v1;

  __cxa_begin_catch(a1);
  sub_20EE09B78(v1);
  __cxa_rethrow();
}

void sub_20EE0928C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EE092A4(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[39] < 0)
    operator delete(*v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EE092C8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  float v10;
  float v11;
  _BOOL8 v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  size_t prime;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t **v20;
  size_t v21;
  uint8x8_t v22;
  unint64_t v23;
  size_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unsigned __int8 v32;
  size_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _BOOL4 v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned __int8 *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  BOOL v52;
  char v53;
  BOOL v54;
  uint64_t v55;
  BOOL v56;
  char v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  const void *v64;
  int v65;
  char v66;
  int v67;
  uint64_t v68;
  _BOOL4 v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  unsigned __int8 *v75;
  uint64_t v76;
  unsigned __int8 *v77;
  int v78;
  int v79;
  int v80;
  int v81;
  char v82;
  uint64_t v83;
  BOOL v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  size_t v89;
  uint64_t *v90;
  const void **v91;
  uint64_t v92;
  uint64_t *v93;
  size_t v94;
  int v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  size_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 *v105;
  uint64_t v106;
  uint8x8_t v107;
  unint64_t v108;
  unint64_t v109;
  size_t v110;
  void *v111;
  uint8x8_t v112;
  unint64_t v113;
  unsigned __int8 *v114;
  void *__s1;
  _QWORD *v116;
  unint64_t v117;
  char v118;

  v2 = (_QWORD *)a2;
  v4 = *(unsigned __int8 *)(a2 + 39);
  v5 = *(_QWORD *)(a2 + 24);
  v114 = (unsigned __int8 *)(a2 + 16);
  if ((v4 & 0x80u) == 0)
    v6 = (uint64_t *)(a2 + 16);
  else
    v6 = *(uint64_t **)(a2 + 16);
  if ((v4 & 0x80u) == 0)
    v7 = v4;
  else
    v7 = v5;
  v8 = sub_20E8D177C((uint64_t)&v118, v6, v7);
  v2[1] = v8;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v11 = *(float *)(a1 + 32);
  v116 = v2;
  v117 = v8;
  if (v9 && (float)(v11 * (float)v9) >= v10)
    goto LABEL_172;
  v12 = 1;
  if (v9 >= 3)
    v12 = (v9 & (v9 - 1)) != 0;
  v13 = v12 | (2 * v9);
  v14 = vcvtps_u32_f32(v10 / v11);
  if (v13 <= v14)
    v15 = v14;
  else
    v15 = v13;
  if (v15 == 1)
  {
    v15 = 2;
  }
  else if ((v15 & (v15 - 1)) != 0)
  {
    prime = std::__next_prime(v15);
    v8 = v117;
    v15 = prime;
    v9 = *(_QWORD *)(a1 + 8);
  }
  if (v15 > v9)
  {
LABEL_19:
    if (v15 >> 61)
      sub_20E877A38();
    v17 = operator new(8 * v15);
    v18 = *(void **)a1;
    *(_QWORD *)a1 = v17;
    if (v18)
      operator delete(v18);
    v19 = 0;
    *(_QWORD *)(a1 + 8) = v15;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19++) = 0;
    while (v15 != v19);
    v20 = *(uint64_t ***)(a1 + 16);
    v8 = v117;
    if (v20)
    {
      v21 = (size_t)v20[1];
      v22 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
      v22.i16[0] = vaddlv_u8(v22);
      v23 = v22.u32[0];
      if (v22.u32[0] > 1uLL)
      {
        if (v21 >= v15)
          v21 %= v15;
      }
      else
      {
        v21 &= v15 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = a1 + 16;
      v88 = *v20;
      if (*v20)
      {
        v113 = v22.u32[0];
        do
        {
          v89 = v88[1];
          if (v23 > 1)
          {
            if (v89 >= v15)
              v89 %= v15;
          }
          else
          {
            v89 &= v15 - 1;
          }
          if (v89 == v21)
          {
            v20 = (uint64_t **)v88;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v89))
          {
            v90 = (uint64_t *)*v88;
            if (*v88)
            {
              v91 = (const void **)(v88 + 2);
              if (*((char *)v88 + 39) >= 0)
                v92 = *((unsigned __int8 *)v88 + 39);
              else
                v92 = v88[3];
              if ((*((_BYTE *)v88 + 39) & 0x80) != 0)
              {
                v100 = v88;
                while (1)
                {
                  v96 = v100;
                  v100 = v90;
                  v103 = *((unsigned __int8 *)v90 + 39);
                  v104 = (v103 & 0x80u) == 0 ? v103 : v100[3];
                  if (v104 != v92)
                    break;
                  v105 = (unsigned __int8 *)*v91;
                  if ((v103 & 0x80) != 0)
                  {
                    v101 = v21;
                    v102 = memcmp((const void *)v100[2], v105, v100[3]);
                    v23 = v113;
                    v21 = v101;
                    v8 = v117;
                    if (v102)
                      break;
                  }
                  else if ((_DWORD)v103)
                  {
                    v106 = 0;
                    while (*((unsigned __int8 *)v100 + v106 + 16) == v105[v106])
                    {
                      if (v103 == ++v106)
                        goto LABEL_157;
                    }
                    break;
                  }
LABEL_157:
                  v93 = 0;
                  v90 = (uint64_t *)*v100;
                  v96 = v100;
                  if (!*v100)
                    goto LABEL_169;
                }
                v93 = v100;
              }
              else
              {
                v93 = v88;
                while (1)
                {
                  v96 = v93;
                  v93 = v90;
                  v97 = *((unsigned __int8 *)v90 + 39);
                  v98 = (v97 & 0x80u) == 0 ? v97 : v93[3];
                  if (v98 != v92)
                    break;
                  if ((v97 & 0x80) != 0)
                  {
                    v94 = v21;
                    v95 = memcmp((const void *)v93[2], v88 + 2, v93[3]);
                    v23 = v113;
                    v21 = v94;
                    v8 = v117;
                    if (v95)
                      break;
                  }
                  else if ((_DWORD)v97)
                  {
                    v99 = 0;
                    while (*((unsigned __int8 *)v93 + v99 + 16) == *((unsigned __int8 *)v91 + v99))
                    {
                      if (v97 == ++v99)
                        goto LABEL_143;
                    }
                    break;
                  }
LABEL_143:
                  v90 = (uint64_t *)*v93;
                  if (!*v93)
                  {
                    v96 = v93;
                    v93 = 0;
                    break;
                  }
                }
              }
            }
            else
            {
              v93 = 0;
              v96 = v88;
            }
LABEL_169:
            *v20 = v93;
            *v96 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v89);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v89) = v88;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v89) = v20;
            v20 = (uint64_t **)v88;
            v21 = v89;
          }
          v88 = *v20;
        }
        while (*v20);
      }
    }
    v9 = v15;
    v2 = v116;
LABEL_172:
    v107 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v107.i16[0] = vaddlv_u8(v107);
    v28 = v107.u32[0];
    if (v107.u32[0] <= 1uLL)
      goto LABEL_173;
LABEL_36:
    v29 = v8;
    if (v9 <= v8)
      v29 = v8 % v9;
    v30 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v29);
    if (!v30)
      goto LABEL_174;
    goto LABEL_39;
  }
  if (v15 >= v9)
    goto LABEL_172;
  v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
  if (v9 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
  {
    v110 = std::__next_prime(v24);
    v8 = v117;
    if (v15 <= v110)
      v15 = v110;
    if (v15 >= v9)
    {
LABEL_35:
      v9 = *(_QWORD *)(a1 + 8);
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
      v27.i16[0] = vaddlv_u8(v27);
      v28 = v27.u32[0];
      if (v27.u32[0] <= 1uLL)
        goto LABEL_173;
      goto LABEL_36;
    }
  }
  else
  {
    v26 = 1 << -(char)__clz(v24 - 1);
    if (v24 >= 2)
      v24 = v26;
    if (v15 <= v24)
      v15 = v24;
    if (v15 >= v9)
      goto LABEL_35;
  }
  if (v15)
    goto LABEL_19;
  v111 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v111)
  {
    operator delete(v111);
    v8 = v117;
  }
  v9 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v112 = (uint8x8_t)vcnt_s8(0);
  v112.i16[0] = vaddlv_u8(v112);
  v28 = v112.u32[0];
  if (v112.u32[0] > 1uLL)
    goto LABEL_36;
LABEL_173:
  v29 = (v9 - 1) & v8;
  v30 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v29);
  if (!v30)
  {
LABEL_174:
    v41 = 0;
    goto LABEL_175;
  }
LABEL_39:
  v31 = v9 - 1;
  v32 = *((_BYTE *)v2 + 39);
  v33 = v2[3];
  v34 = v32;
  v35 = v2;
  if ((v32 & 0x80u) == 0)
    v36 = *((unsigned __int8 *)v2 + 39);
  else
    v36 = v2[3];
  if ((v32 & 0x80) != 0)
  {
    v59 = 0;
    __s1 = (void *)v35[2];
    while (1)
    {
      v41 = v30;
      v30 = (uint64_t *)*v30;
      if (!v30)
        break;
      v60 = v30[1];
      if (v28 >= 2)
      {
        v61 = v30[1];
        if (v60 >= v9)
          v61 = v60 % v9;
      }
      else
      {
        v61 = v60 & v31;
      }
      if (v61 != v29)
        break;
      if (v60 != v8)
        goto LABEL_74;
      v62 = *((unsigned __int8 *)v30 + 39);
      v63 = (char)v62;
      if ((v62 & 0x80u) != 0)
        v62 = v30[3];
      if (v36 == v62)
      {
        if (v63 >= 0)
          v64 = v30 + 2;
        else
          v64 = (const void *)v30[2];
        v65 = memcmp(__s1, v64, v33);
        v8 = v117;
        v66 = v59 & (v65 != 0);
        v59 |= v65 == 0;
        if ((v66 & 1) != 0)
          break;
      }
      else
      {
LABEL_74:
        if ((v59 & 1) != 0)
          break;
      }
    }
  }
  else if (v28 > 1)
  {
    v67 = 0;
    if ((_DWORD)v34)
    {
      v68 = v34 - 1;
      do
      {
        v41 = v30;
        v30 = (uint64_t *)*v30;
        if (!v30)
          break;
        v71 = v30[1];
        v72 = v71;
        if (v71 >= v9)
          v72 = v71 % v9;
        if (v72 != v29)
          break;
        if (v71 != v8)
          goto LABEL_92;
        v73 = *((unsigned __int8 *)v30 + 39);
        v74 = (char)v73;
        if ((v73 & 0x80u) != 0)
          v73 = v30[3];
        if (v36 == v73)
        {
          v75 = v74 >= 0 ? (unsigned __int8 *)(v30 + 2) : (unsigned __int8 *)v30[2];
          v76 = v68;
          v77 = v114;
          do
          {
            v79 = *v77++;
            v78 = v79;
            v81 = *v75++;
            v80 = v81;
            v52 = v76-- != 0;
            v82 = v52;
            v54 = v78 == v80;
            v69 = v78 == v80;
          }
          while (v54 && (v82 & 1) != 0);
        }
        else
        {
LABEL_92:
          v69 = 0;
        }
        v70 = v67 & !v69;
        v67 |= v69;
      }
      while (v70 != 1);
    }
    else
    {
      while (1)
      {
        v41 = v30;
        v30 = (uint64_t *)*v30;
        if (!v30)
          break;
        v86 = v30[1];
        v87 = v86;
        if (v86 >= v9)
          v87 = v86 % v9;
        if (v87 != v29)
          break;
        if (v86 == v8)
        {
          v83 = *((unsigned __int8 *)v30 + 39);
          if ((v83 & 0x80u) != 0)
            v83 = v30[3];
          v84 = v36 == v83;
          v85 = v67 & !v84;
          LOBYTE(v67) = v67 | v84;
          if ((v85 & 1) != 0)
            break;
        }
        else if ((v67 & 1) != 0)
        {
          break;
        }
      }
    }
  }
  else
  {
    v37 = 0;
    if ((_DWORD)v34)
    {
      v38 = v34 - 1;
      do
      {
        v41 = v30;
        v30 = (uint64_t *)*v30;
        if (!v30)
          break;
        v42 = v30[1];
        if ((v42 & v31) != v29)
          break;
        if (v42 != v8)
          goto LABEL_46;
        v43 = *((unsigned __int8 *)v30 + 39);
        v44 = (char)v43;
        if ((v43 & 0x80u) != 0)
          v43 = v30[3];
        if (v36 == v43)
        {
          v45 = v44 >= 0 ? (unsigned __int8 *)(v30 + 2) : (unsigned __int8 *)v30[2];
          v46 = v38;
          v47 = v114;
          do
          {
            v49 = *v47++;
            v48 = v49;
            v51 = *v45++;
            v50 = v51;
            v52 = v46-- != 0;
            v53 = v52;
            v54 = v48 == v50;
            v39 = v48 == v50;
          }
          while (v54 && (v53 & 1) != 0);
        }
        else
        {
LABEL_46:
          v39 = 0;
        }
        v40 = v37 & !v39;
        v37 |= v39;
      }
      while ((v40 & 1) == 0);
    }
    else
    {
      while (1)
      {
        v41 = v30;
        v30 = (uint64_t *)*v30;
        if (!v30)
          break;
        v58 = v30[1];
        if ((v58 & v31) != v29)
          break;
        if (v58 == v8)
        {
          v55 = *((unsigned __int8 *)v30 + 39);
          if ((v55 & 0x80u) != 0)
            v55 = v30[3];
          v56 = v36 == v55;
          v57 = v37 & !v56;
          LOBYTE(v37) = v37 | v56;
          if ((v57 & 1) != 0)
            break;
        }
        else if ((v37 & 1) != 0)
        {
          break;
        }
      }
    }
  }
LABEL_175:
  v108 = v116[1];
  if (v28 > 1)
  {
    if (v108 >= v9)
      v108 %= v9;
  }
  else
  {
    v108 &= v9 - 1;
  }
  if (!v41)
  {
    *v116 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v116;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v108) = a1 + 16;
    if (!*v116)
      goto LABEL_193;
    v109 = *(_QWORD *)(*v116 + 8);
    if (v28 > 1)
    {
      if (v109 >= v9)
        v109 %= v9;
    }
    else
    {
      v109 &= v9 - 1;
    }
LABEL_192:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v109) = v116;
    goto LABEL_193;
  }
  *v116 = *v41;
  *v41 = v116;
  if (*v116)
  {
    v109 = *(_QWORD *)(*v116 + 8);
    if (v28 > 1)
    {
      if (v109 >= v9)
        v109 %= v9;
    }
    else
    {
      v109 &= v9 - 1;
    }
    if (v109 != v108)
      goto LABEL_192;
  }
LABEL_193:
  ++*(_QWORD *)(a1 + 24);
}

void sub_20EE09B78(void **__p)
{
  void **v2;

  do
  {
    v2 = (void **)*__p;
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
    operator delete(__p);
    __p = v2;
  }
  while (v2);
}

void sub_20EE09BC4()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE09BD8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9E9EA0;
  result[1] = v3;
  return result;
}

uint64_t sub_20EE09C0C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9E9EA0;
  a2[1] = v2;
  return result;
}

BOOL sub_20EE09C28(uint64_t a1, uint64_t a2)
{
  return sub_20EAA8B88(*(_QWORD **)(a1 + 8), a2) == 0;
}

uint64_t sub_20EE09C48(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22user_anchor_node_group18ActiveAnchorFilter20SetActiveAnchorGroupERKNS0_4capi11AnchorGroupEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22user_anchor_node_group18ActiveAnchorFilter20SetActiveAnchorGroupERKNS0_4cap"
                                "i11AnchorGroupEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22user_anchor_node_group18ActiveAnchorFilter20SetActiveAnchorGroupERKNS0_4capi11AnchorGroupEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22user_anchor_node_group18ActiveAnchorFilter20SetActiveAnchorGroupERKNS0_4capi11AnchorGroupEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE09CB4()
{
  return &unk_24C9E9F10;
}

void sub_20EE09CC4()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE09CD8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9E9F30;
  result[1] = v3;
  return result;
}

uint64_t sub_20EE09D0C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9E9F30;
  a2[1] = v2;
  return result;
}

BOOL sub_20EE09D28(uint64_t a1, uint64_t a2)
{
  return sub_20EAA8F0C(*(_QWORD **)(a1 + 8), a2) == 0;
}

uint64_t sub_20EE09D48(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22user_anchor_node_group18ActiveAnchorFilter20SetActiveAnchorGroupERKNS0_4capi11AnchorGroupEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22user_anchor_node_group18ActiveAnchorFilter20SetActiveAnchorGroupERKNS0_4cap"
                                "i11AnchorGroupEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22user_anchor_node_group18ActiveAnchorFilter20SetActiveAnchorGroupERKNS0_4capi11AnchorGroupEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22user_anchor_node_group18ActiveAnchorFilter20SetActiveAnchorGroupERKNS0_4capi11AnchorGroupEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE09DB4()
{
  return &unk_24C9E9F90;
}

uint64_t sub_20EE09DC0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20EE09E28(uint64_t *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__s, uint64_t a10)
{
  _QWORD v12[3];

  v12[2] = &a10;
  v12[0] = __s;
  v12[1] = strlen(__s);
  return sub_20EE09ED8(a1, (uint64_t)v12);
}

void sub_20EE09E78(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E9FB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EE09E88(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E9FB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE09EB8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
  }
}

uint64_t sub_20EE09ED8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  int v6;
  const void *v7;
  uint64_t result;
  const void *v9;
  __int128 *p_dst;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 __dst;
  unint64_t v15;

  v3 = *a1;
  v4 = *(_QWORD *)(a2 + 8);
  if (!*(_BYTE *)(*a1 + 24))
    goto LABEL_9;
  v5 = *(unsigned __int8 *)(v3 + 23);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(v3 + 8);
  if (v4 != v5
    || (v6 >= 0 ? (v7 = (const void *)*a1) : (v7 = *(const void **)v3),
        result = memcmp(*(const void **)a2, v7, v4),
        (_DWORD)result))
  {
LABEL_9:
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v9 = *(const void **)a2;
    if (v4 >= 0x17)
    {
      v11 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v11 = v4 | 7;
      v12 = v11 + 1;
      p_dst = (__int128 *)operator new(v11 + 1);
      *((_QWORD *)&__dst + 1) = v4;
      v15 = v12 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v15) = v4;
      p_dst = &__dst;
      if (!v4)
      {
        LOBYTE(__dst) = 0;
        if (!*(_BYTE *)(v3 + 24))
          goto LABEL_20;
        goto LABEL_18;
      }
    }
    memmove(p_dst, v9, v4);
    *((_BYTE *)p_dst + v4) = 0;
    if (!*(_BYTE *)(v3 + 24))
    {
LABEL_20:
      v13 = __dst;
      *(_QWORD *)(v3 + 16) = v15;
      *(_OWORD *)v3 = v13;
      result = 1;
      *(_BYTE *)(v3 + 24) = 1;
      return result;
    }
LABEL_18:
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    goto LABEL_20;
  }
  return result;
}

void sub_20EE0A004(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  size_t v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  unint64_t v19;
  _QWORD *v20[5];
  _QWORD *v21;
  char v22;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_20E863438(v4);
  v21 = (_QWORD *)v4;
  v20[0] = (_QWORD *)(v4 + 16);
  sub_20EAA9290((uint64_t)&v22, v20, a2);
  v5 = *(_DWORD *)(v4 + 120);
  if ((v5 & 0x10) != 0)
  {
    v8 = *(_QWORD *)(v4 + 112);
    v9 = *(_QWORD *)(v4 + 72);
    if (v8 < v9)
    {
      *(_QWORD *)(v4 + 112) = v9;
      v8 = v9;
    }
    v10 = *(const void **)(v4 + 64);
    v6 = v8 - (_QWORD)v10;
    if (v8 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v5 & 8) == 0)
    {
      v6 = 0;
      HIBYTE(v19) = 0;
      v7 = __p;
      goto LABEL_14;
    }
    v10 = *(const void **)(v4 + 40);
    v6 = *(_QWORD *)(v4 + 56) - (_QWORD)v10;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v6 >= 0x17)
  {
    v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v11 = v6 | 7;
    v12 = v11 + 1;
    v7 = operator new(v11 + 1);
    __p[1] = (void *)v6;
    v19 = v12 | 0x8000000000000000;
    __p[0] = v7;
    goto LABEL_13;
  }
  HIBYTE(v19) = v6;
  v7 = __p;
  if (v6)
LABEL_13:
    memmove(v7, v10, v6);
LABEL_14:
  *((_BYTE *)v7 + v6) = 0;
  v13 = v21;
  if (v21)
  {
    v14 = MEMORY[0x24BEDB7F0];
    v15 = *MEMORY[0x24BEDB7F0];
    *v21 = *MEMORY[0x24BEDB7F0];
    v16 = *(_QWORD *)(v14 + 72);
    *(_QWORD *)((char *)v13 + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(v14 + 64);
    v13[3] = MEMORY[0x24BEDB848] + 16;
    v13[2] = v16;
    if (*((char *)v13 + 111) < 0)
      operator delete((void *)v13[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v13 + 16);
    MEMORY[0x212BC6398](v13, 0x10B2C40EED050F3);
  }
  v20[0] = (_QWORD *)a1;
  v20[1] = __p;
  v20[2] = (_QWORD *)a1;
  v20[3] = __p;
  v20[4] = __p;
  v17 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v17 == -1)
    sub_20E877AB8();
  v21 = v20;
  ((void (*)(_QWORD **, uint64_t))off_24C9E9FF0[v17])(&v21, a1);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
}

void sub_20EE0A260(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20EE0A284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EE0A2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE0A2B4(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EE0A30C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EA090;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EE0A31C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EA090;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE0A34C(uint64_t a1)
{
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(*(void **)(a1 + 32));
    return;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_5;
}

void sub_20EE0A39C(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_6:
      JUMPOUT(0x212BC6398);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_6;
}

_DWORD *sub_20EE0A3F8(_DWORD ***a1)
{
  return sub_20EAA68C4(**a1, (char *)(*a1)[1]);
}

void sub_20EE0A404(uint64_t a1, uint64_t a2)
{
  sub_20EB8CEF0((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

char *sub_20EE0A414(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20EE0A50C((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20EE0A504(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20EE0A50C(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20EE0A708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20EE0A71C(_DWORD ***a1)
{
  return sub_20EE0A738(**a1, (char *)(*a1)[1]);
}

void sub_20EE0A728(uint64_t a1, uint64_t a2)
{
  sub_20EE0A828((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20EE0A738(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9EA008[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20EE0A828(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9EA008[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20EE0A9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20EE0AA20(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20EE0AB18((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20EE0AB10(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20EE0AB18(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20EE0AD14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE0AD28(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void **v6;
  void **v7;
  void **v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void **v12;
  char *v13;
  void **v14;
  char *v15;
  void **v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  void **v28;
  unsigned __int8 v29;
  unint64_t v30;
  char *v31;
  char *v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  void **v38;
  unsigned __int8 v39;
  char *v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t j;
  uint64_t v46;
  void *v48[2];
  uint64_t v49;
  __uint64_t v50[2];
  _QWORD v51[3];
  _QWORD *v52;
  _QWORD v53[3];
  _QWORD *v54;
  _QWORD v55[3];
  _QWORD *v56;
  void *__dst[2];
  uint64_t v58;
  char v59;
  void *v60;
  char v61;
  char v62;
  void *v63;
  char v64;
  char v65;
  void *v66;
  char v67;
  void *__p;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 8) = 0u;
  v6 = (void **)(a1 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v7 = (void **)(a1 + 64);
  *(_OWORD *)(a1 + 120) = 0u;
  v8 = (void **)(a1 + 120);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)a1 = off_24C9EA148;
  *(_QWORD *)(a1 + 56) = &unk_24C9EA180;
  *(_QWORD *)(a1 + 112) = &unk_24C9EA1A8;
  *(_QWORD *)(a1 + 216) = 0;
  v9 = a1 + 216;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 241) = a3;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = a4;
  qmemcpy(__dst, "O Node", 6);
  v10 = (char *)operator new(0x48uLL);
  strcpy(v10, "Handles all of the IO related to user anchors and their metadata");
  *(_QWORD *)(a1 + 168) = 0x4920726F68636E41;
  *(_DWORD *)(a1 + 176) = __dst[0];
  *(_WORD *)(a1 + 180) = WORD2(__dst[0]);
  *(_BYTE *)(a1 + 191) = 14;
  *(_BYTE *)(a1 + 182) = 0;
  sub_20E867BF8((_QWORD *)(a1 + 192), v10, 0x40uLL);
  operator delete(v10);
  v11 = (char *)operator new(0x20uLL);
  strcpy(v11, "Saves the user anchors to disk");
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v7);
  strcpy((char *)(a1 + 64), "Save anchor channel");
  *(_BYTE *)(a1 + 87) = 19;
  sub_20E860C04(__dst, v11, 0x1EuLL);
  v12 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v12);
  *(_OWORD *)v12 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 104) = v58;
  operator delete(v11);
  v13 = (char *)operator new(0x30uLL);
  strcpy(v13, "Loads the user anchors from disk if they exist");
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v6);
  strcpy((char *)(a1 + 8), "Load anchor channel");
  *(_BYTE *)(a1 + 31) = 19;
  sub_20E860C04(__dst, v13, 0x2EuLL);
  v14 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v14);
  *(_OWORD *)v14 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 48) = v58;
  operator delete(v13);
  v15 = (char *)operator new(0x28uLL);
  strcpy(v15, "Deletes the user anchors from disk");
  if (*(char *)(a1 + 143) < 0)
    operator delete(*v8);
  strcpy((char *)(a1 + 120), "Delete Anchor Channel");
  *(_BYTE *)(a1 + 143) = 21;
  sub_20E860C04(__dst, v15, 0x22uLL);
  v16 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0)
    operator delete(*v16);
  *(_OWORD *)v16 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 160) = v58;
  operator delete(v15);
  v17 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
    v17 = *(unsigned __int8 *)(a2 + 23);
  if (!v17)
    return a1;
  sub_20EE26BA0(a2, (uint64_t)__dst);
  if (*(char *)(a1 + 239) < 0)
    operator delete(*(void **)v9);
  *(_OWORD *)v9 = *(_OWORD *)__dst;
  *(_QWORD *)(v9 + 16) = v58;
  v55[0] = &off_24C9EA3A0;
  v55[1] = a2;
  v55[2] = a1;
  v56 = v55;
  v18 = sub_20EE0B854((uint64_t)v55);
  v19 = v56;
  if (v56 == v55)
  {
    v20 = 4;
    v19 = v55;
  }
  else
  {
    if (!v56)
      goto LABEL_23;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_23:
  if ((v18 & 1) == 0)
  {
    v24 = sub_210219C18();
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20E860C04(v48, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)v48 = *(_OWORD *)a2;
      v49 = *(_QWORD *)(a2 + 16);
    }
    if (v49 >= 0)
      v28 = v48;
    else
      v28 = (void **)v48[0];
    v29 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    v30 = atomic_load(&qword_254A5A450);
    v31 = "s/AppleCV3D/library/Essentials/Log/src/APILogging.cpp";
    if (!v30)
      goto LABEL_61;
    LODWORD(__dst[0]) = 136315138;
    *(void **)((char *)__dst + 4) = v28;
    v32 = (char *)_os_log_send_and_compose_impl();
    v33 = strlen(v32);
    v50[0] = 0;
    pthread_threadid_np(0, v50);
    v34 = v50[0];
    timespec_get((timespec *)v50, 1);
    sub_210219E20(__dst, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v24 + 1), (__int128 *)(v24 + 5), "Anchors:Error:The root directory %s must exist", 0x2EuLL, v32, v33, v34, v50);
    std::mutex::lock(&stru_254A5A410);
    v35 = qword_254A5A458;
    for (i = unk_254A5A460; v35 != i; v35 += 40)
    {
      v37 = *(_QWORD *)(v35 + 32);
      if (!v37)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v37 + 48))(v37, __dst);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v69 < 0)
    {
      operator delete(__p);
      v31 = "s/AppleCV3D/library/Essentials/Log/src/APILogging.cpp";
      if ((v67 & 0x80000000) == 0)
      {
LABEL_48:
        if (!v65)
        {
LABEL_54:
          if (v62 && v61 < 0)
            operator delete(v60);
          if (v59 < 0)
            operator delete(__dst[1]);
          if (v32)
            free(v32);
LABEL_61:
          if (!os_signpost_enabled((os_log_t)*v24))
            goto LABEL_92;
          LODWORD(__dst[0]) = *((_QWORD *)v31 + 427);
          *(void **)((char *)__dst + 4) = v28;
          goto LABEL_91;
        }
LABEL_52:
        if (v64 < 0)
          operator delete(v63);
        goto LABEL_54;
      }
    }
    else
    {
      v31 = "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Log/src/APILogging.cpp" + 36;
      if ((v67 & 0x80000000) == 0)
        goto LABEL_48;
    }
    operator delete(v66);
    if (!v65)
      goto LABEL_54;
    goto LABEL_52;
  }
  v53[0] = &off_24C9EA430;
  v53[1] = a2;
  v53[2] = a1;
  v54 = v53;
  v21 = sub_20EE0B854((uint64_t)v53);
  v22 = v54;
  if (v54 == v53)
  {
    v23 = 4;
    v22 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_31;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_31:
  if ((v21 & 1) == 0)
  {
    v27 = sub_210219C18();
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20E860C04(v48, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)v48 = *(_OWORD *)a2;
      v49 = *(_QWORD *)(a2 + 16);
    }
    if (v49 >= 0)
      v38 = v48;
    else
      v38 = (void **)v48[0];
    v39 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_89;
    LODWORD(__dst[0]) = 136315138;
    *(void **)((char *)__dst + 4) = v38;
    v41 = (char *)_os_log_send_and_compose_impl();
    v42 = strlen(v41);
    v50[0] = 0;
    pthread_threadid_np(0, v50);
    v43 = v50[0];
    timespec_get((timespec *)v50, 1);
    sub_210219E20(__dst, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v27 + 1), (__int128 *)(v27 + 5), "Anchors:Error:The root directory %s must be a directory", 0x37uLL, v41, v42, v43, v50);
    std::mutex::lock(&stru_254A5A410);
    v44 = qword_254A5A458;
    for (j = unk_254A5A460; v44 != j; v44 += 40)
    {
      v46 = *(_QWORD *)(v44 + 32);
      if (!v46)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v46 + 48))(v46, __dst);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v69 < 0)
    {
      operator delete(__p);
      if ((v67 & 0x80000000) == 0)
      {
LABEL_76:
        if (!v65)
        {
LABEL_82:
          if (v62 && v61 < 0)
            operator delete(v60);
          if (v59 < 0)
            operator delete(__dst[1]);
          if (v41)
            free(v41);
LABEL_89:
          if (!os_signpost_enabled((os_log_t)*v27))
            goto LABEL_92;
          LODWORD(__dst[0]) = 136315138;
          *(void **)((char *)__dst + 4) = v38;
LABEL_91:
          _os_signpost_emit_unreliably_with_name_impl();
LABEL_92:
          if (SHIBYTE(v49) < 0)
            operator delete(v48[0]);
          return a1;
        }
LABEL_80:
        if (v64 < 0)
          operator delete(v63);
        goto LABEL_82;
      }
    }
    else if ((v67 & 0x80000000) == 0)
    {
      goto LABEL_76;
    }
    operator delete(v66);
    if (!v65)
      goto LABEL_82;
    goto LABEL_80;
  }
  v51[0] = &off_24C9EA4B0;
  v51[1] = a1;
  v52 = v51;
  sub_20EE0B854((uint64_t)v51);
  v25 = v52;
  if (v52 == v51)
  {
    v26 = 4;
    v25 = v51;
    goto LABEL_64;
  }
  if (v52)
  {
    v26 = 5;
LABEL_64:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  return a1;
}

void sub_20EE0B700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  void **v35;
  void **v36;

  sub_20E8F74DC(v35);
  if (*(char *)(v34 + 239) < 0)
    operator delete(*v36);
  sub_20EE0BDC8(v34);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE0B854(uint64_t a1)
{
  if (!a1)
    sub_20E86D37C();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

#error "20EE0BB98: call analysis failed (funcsize=229)"

void sub_20EE0BCA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,void *a27,int a28,__int16 a29,char a30,char a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  if (a32)
  {
    if (a31 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a14);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20EE0BDC8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9EA270;
  *(_QWORD *)(a1 + 56) = &unk_24C9EA298;
  *(_QWORD *)(a1 + 112) = &unk_24C9EA2C0;
  if (*(char *)(a1 + 215) < 0)
  {
    operator delete(*(void **)(a1 + 192));
    if ((*(char *)(a1 + 191) & 0x80000000) == 0)
    {
LABEL_3:
      *(_QWORD *)(a1 + 112) = off_24C9EA338;
      if ((*(char *)(a1 + 167) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(char *)(a1 + 191) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 168));
  *(_QWORD *)(a1 + 112) = off_24C9EA338;
  if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 144));
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)(a1 + 56) = off_24C9EA310;
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 120));
  *(_QWORD *)(a1 + 56) = off_24C9EA310;
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)a1 = off_24C9EA2E8;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_16:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_17;
  }
LABEL_15:
  operator delete(*(void **)(a1 + 64));
  *(_QWORD *)a1 = off_24C9EA2E8;
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_16;
LABEL_8:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_17:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EE0BF14(uint64_t a1, uint64_t a2)
{
  char v3;
  _QWORD *v4;
  uint64_t v5;
  std::string __p;
  std::runtime_error v7;
  int v8;
  _QWORD v9[3];
  _QWORD *v10;
  __int128 v11;
  const char *v12;
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x24BDAC8D0];
  if ((*(char *)(a2 + 239) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a2 + 239))
      goto LABEL_3;
LABEL_7:
    v11 = xmmword_24C9EA1C0;
    v12 = "Root path for anchors is empty";
    v13 = 30;
    sub_20E8778D4((uint64_t)&v11, (uint64_t)v14, 0, 0, &__p);
    std::runtime_error::runtime_error(&v7, &__p);
    goto LABEL_13;
  }
  if (!*(_QWORD *)(a2 + 224))
    goto LABEL_7;
LABEL_3:
  v9[0] = &off_24C9EA530;
  v9[1] = a2;
  v10 = v9;
  v3 = sub_20EE0B854((uint64_t)v9);
  v4 = v10;
  if (v10 == v9)
  {
    v5 = 4;
    v4 = v9;
    goto LABEL_9;
  }
  if (v10)
  {
    v5 = 5;
LABEL_9:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  if ((v3 & 1) != 0)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    return;
  }
  v11 = xmmword_24C9EA1C0;
  v12 = "Cannot create root directory";
  v13 = 28;
  sub_20E8778D4((uint64_t)&v11, (uint64_t)v14, 0, 0, &__p);
  std::runtime_error::runtime_error(&v7, &__p);
LABEL_13:
  v7.__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
  v8 = 2;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v7);
  *(_QWORD *)a1 = &off_24C9EDA58;
  *(_DWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = 1;
  std::runtime_error::~runtime_error(&v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20EE0C0C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE0C134(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  __uint64_t v7;
  uint64_t *v8;
  void **v9;
  unsigned __int8 v10;
  char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  uint64_t v17;
  void **v18;
  size_t v19;
  void **v20;
  unsigned __int8 v21;
  unint64_t v22;
  char *v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  void *v30[2];
  uint64_t v31;
  __uint64_t v32[2];
  unsigned __int8 v33;
  void *__dst[2];
  uint64_t v35;
  void *v36[2];
  unsigned __int8 v37;
  __uint64_t v38[2];
  std::string __p;
  char v40;
  void *v41;
  char v42;
  char v43;
  void *v44;
  char v45;
  char v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 240))
  {
    v4 = a1 + 216;
    sub_210212AD8(a1 + 216, *(_QWORD *)(a1 + 272), (uint64_t)v36);
    v5 = v37;
    if ((v37 & 0x80u) != 0)
      v5 = (unint64_t)v36[1];
    if (v5)
    {
      if (!*(_BYTE *)(a1 + 241))
        goto LABEL_94;
      memset(&__p, 0, sizeof(__p));
      sub_20E8A9678(&__p, (std::string *)"visual_slam", (std::string *)"");
      if (*(char *)(a1 + 239) < 0)
      {
        sub_20E860C04(__dst, *(void **)(a1 + 216), *(_QWORD *)(a1 + 224));
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)v4;
        v35 = *(_QWORD *)(v4 + 16);
      }
      sub_20E8A944C((uint64_t)__dst, (std::__fs::filesystem::path *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((*(unsigned int (**)(_QWORD, void **))(**(_QWORD **)(a1 + 272) + 176))(*(_QWORD *)(a1 + 272), __dst))
      {
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 272) + 240))(*(_QWORD *)(a1 + 272), __dst);
      }
      sub_210212AD8((uint64_t)__dst, *(_QWORD *)(a1 + 272), (uint64_t)v32);
      if ((v33 & 0x80u) == 0)
        v7 = v33;
      else
        v7 = v32[1];
      if (v7)
      {
        if ((void **)v4 != __dst)
        {
          if (*(char *)(a1 + 239) < 0)
          {
            if (v35 >= 0)
              v18 = __dst;
            else
              v18 = (void **)__dst[0];
            if (v35 >= 0)
              v19 = HIBYTE(v35);
            else
              v19 = (size_t)__dst[1];
            sub_20E867CBC((void **)v4, v18, v19);
          }
          else if (v35 < 0)
          {
            sub_20E867BF8((_QWORD *)v4, __dst[0], (size_t)__dst[1]);
          }
          else
          {
            *(_OWORD *)v4 = *(_OWORD *)__dst;
            *(_QWORD *)(v4 + 16) = v35;
          }
        }
        goto LABEL_91;
      }
      v8 = sub_210219C18();
      if (*(char *)(a1 + 239) < 0)
      {
        sub_20E860C04(v30, *(void **)(a1 + 216), *(_QWORD *)(a1 + 224));
      }
      else
      {
        *(_OWORD *)v30 = *(_OWORD *)v4;
        v31 = *(_QWORD *)(v4 + 16);
      }
      if (v31 >= 0)
        v20 = v30;
      else
        v20 = (void **)v30[0];
      v21 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      v22 = atomic_load(&qword_254A5A450);
      v23 = "s/AppleCV3D/library/Essentials/Log/src/APILogging.cpp";
      if (!v22)
      {
LABEL_87:
        if (os_signpost_enabled((os_log_t)*v8))
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = *((_QWORD *)v23 + 427);
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
          _os_signpost_emit_unreliably_with_name_impl();
        }
        if (SHIBYTE(v31) < 0)
          operator delete(v30[0]);
LABEL_91:
        if ((char)v33 < 0)
        {
          operator delete((void *)v32[0]);
          if ((SHIBYTE(v35) & 0x80000000) == 0)
          {
LABEL_93:
            if (v7)
              goto LABEL_94;
            goto LABEL_98;
          }
        }
        else if ((SHIBYTE(v35) & 0x80000000) == 0)
        {
          goto LABEL_93;
        }
        operator delete(__dst[0]);
        if (v7)
        {
LABEL_94:
          v1 = 1;
          *(_BYTE *)(a1 + 240) = 1;
          if (((char)v37 & 0x80000000) == 0)
            return v1;
LABEL_99:
          operator delete(v36[0]);
          return v1;
        }
LABEL_98:
        v1 = 0;
        if (((char)v37 & 0x80000000) == 0)
          return v1;
        goto LABEL_99;
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
      v24 = (char *)_os_log_send_and_compose_impl();
      v25 = strlen(v24);
      v38[0] = 0;
      pthread_threadid_np(0, v38);
      v26 = v38[0];
      timespec_get((timespec *)v38, 1);
      sub_210219E20(&__p, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v8 + 1), (__int128 *)(v8 + 5), "Anchors:Error:Unable to create the %s directory for anchors", 0x3BuLL, v24, v25, v26, v38);
      std::mutex::lock(&stru_254A5A410);
      v27 = qword_254A5A458;
      for (i = unk_254A5A460; v27 != i; v27 += 40)
      {
        v29 = *(_QWORD *)(v27 + 32);
        if (!v29)
          sub_20E86D37C();
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v29 + 48))(v29, &__p);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v50 < 0)
      {
        operator delete(v49);
        v23 = "s/AppleCV3D/library/Essentials/Log/src/APILogging.cpp";
        if ((v48 & 0x80000000) == 0)
        {
LABEL_73:
          if (!v46)
          {
LABEL_80:
            if (v43 && v42 < 0)
              operator delete(v41);
            if (v40 < 0)
              operator delete((void *)__p.__r_.__value_.__l.__size_);
            if (v24)
              free(v24);
            goto LABEL_87;
          }
LABEL_78:
          if (v45 < 0)
            operator delete(v44);
          goto LABEL_80;
        }
      }
      else
      {
        v23 = "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Log/src/APILogging.cpp" + 36;
        if ((v48 & 0x80000000) == 0)
          goto LABEL_73;
      }
      operator delete(v47);
      if (!v46)
        goto LABEL_80;
      goto LABEL_78;
    }
    v6 = sub_210219C18();
    if (*(char *)(a1 + 239) < 0)
    {
      sub_20E860C04(__dst, *(void **)(a1 + 216), *(_QWORD *)(a1 + 224));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v4;
      v35 = *(_QWORD *)(v4 + 16);
    }
    if (v35 >= 0)
      v9 = __dst;
    else
      v9 = (void **)__dst[0];
    v10 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
    {
LABEL_51:
      if (os_signpost_enabled((os_log_t)*v6))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      if (SHIBYTE(v35) < 0)
        operator delete(__dst[0]);
      goto LABEL_98;
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
    v12 = (char *)_os_log_send_and_compose_impl();
    v13 = strlen(v12);
    v32[0] = 0;
    pthread_threadid_np(0, v32);
    v14 = v32[0];
    timespec_get((timespec *)v32, 1);
    sub_210219E20(&__p, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v6 + 1), (__int128 *)(v6 + 5), "Anchors:Error:Unable to create the %s directory for anchors", 0x3BuLL, v12, v13, v14, v32);
    std::mutex::lock(&stru_254A5A410);
    v15 = qword_254A5A458;
    for (j = unk_254A5A460; v15 != j; v15 += 40)
    {
      v17 = *(_QWORD *)(v15 + 32);
      if (!v17)
        sub_20E86D37C();
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v17 + 48))(v17, &__p);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v50 < 0)
    {
      operator delete(v49);
      if ((v48 & 0x80000000) == 0)
      {
LABEL_38:
        if (!v46)
        {
LABEL_44:
          if (v43 && v42 < 0)
            operator delete(v41);
          if (v40 < 0)
            operator delete((void *)__p.__r_.__value_.__l.__size_);
          if (v12)
            free(v12);
          goto LABEL_51;
        }
LABEL_42:
        if (v45 < 0)
          operator delete(v44);
        goto LABEL_44;
      }
    }
    else if ((v48 & 0x80000000) == 0)
    {
      goto LABEL_38;
    }
    operator delete(v47);
    if (!v46)
      goto LABEL_44;
    goto LABEL_42;
  }
  return 1;
}

void sub_20EE0C8B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,_Unwind_Exception *exception_objecta,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a25 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_20EE0C9E8(unsigned __int8 *a1, unsigned __int8 *a2, const void **a3)
{
  unsigned __int8 *v3;
  const void **v4;
  unsigned __int8 *v5;
  unint64_t v6;
  int v7;
  const void *v8;
  size_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  size_t v14;
  size_t v15;
  int v16;
  uint64_t v17;
  const void *v18;
  const void *v19;
  int v20;
  unsigned __int8 *v21;

  v3 = a2;
  if (a2 == a1)
    return v3;
  v4 = a3;
  v5 = a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  v7 = *((char *)a3 + 23);
  if (v7 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= 0)
    v9 = *((unsigned __int8 *)a3 + 23);
  else
    v9 = (size_t)a3[1];
  do
  {
    v10 = v6 >> 1;
    v11 = &v5[24 * (v6 >> 1)];
    v12 = (char)v11[23];
    if (v12 >= 0)
      v13 = &v5[24 * (v6 >> 1)];
    else
      v13 = *(unsigned __int8 **)v11;
    if (v12 >= 0)
      v14 = v11[23];
    else
      v14 = *((_QWORD *)v11 + 1);
    if (v9 >= v14)
      v15 = v14;
    else
      v15 = v9;
    v16 = memcmp(v13, v8, v15);
    if (v16)
    {
      if (v16 < 0)
        goto LABEL_8;
    }
    else if (v14 < v9)
    {
LABEL_8:
      v5 = v11 + 24;
      v10 = v6 + ~v10;
    }
    v6 = v10;
  }
  while (v10);
  if (v5 == v3)
    return v3;
  v17 = *((unsigned __int8 *)v4 + 23);
  if ((v17 & 0x80u) == 0)
    v18 = (const void *)*((unsigned __int8 *)v4 + 23);
  else
    v18 = v4[1];
  v19 = (const void *)v5[23];
  v20 = (char)v19;
  if ((char)v19 < 0)
    v19 = (const void *)*((_QWORD *)v5 + 1);
  if (v18 != v19)
    return v3;
  if (v20 >= 0)
    v21 = v5;
  else
    v21 = *(unsigned __int8 **)v5;
  if ((v17 & 0x80) != 0)
  {
    if (memcmp(*v4, v21, (size_t)v4[1]))
      return v3;
    return v5;
  }
  if (!*((_BYTE *)v4 + 23))
    return v5;
  while (*(unsigned __int8 *)v4 == *v21)
  {
    v4 = (const void **)((char *)v4 + 1);
    ++v21;
    if (!--v17)
      return v5;
  }
  return v3;
}

void sub_20EE0CB44(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  const void **v7;
  uint64_t *v8;
  void *v9;
  unsigned __int8 v10;
  char *v12;
  size_t v13;
  __darwin_time_t tv_sec;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  timespec *v20;
  const char *imp;
  std::runtime_error_vtbl *v22;
  unsigned __int8 v23;
  unint64_t v24;
  char *v26;
  size_t v27;
  __darwin_time_t v28;
  uint64_t v29;
  uint64_t j;
  uint64_t v31;
  uint64_t *v32;
  timespec *v33;
  unsigned __int8 v34;
  char *v36;
  size_t v37;
  __darwin_time_t v38;
  uint64_t v39;
  uint64_t k;
  uint64_t v41;
  char ***v42;
  char **v43;
  char **v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char **v52;
  char **v53;
  __int128 v54;
  __int128 v55;
  char **v56;
  std::runtime_error_vtbl *v57;
  const char *v58;
  std::runtime_error_vtbl *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::runtime_error *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  char *exception;
  char *v70;
  _QWORD *v71;
  uint64_t v73;
  unint64_t *v74;
  uint64_t v75;
  const void **v76;
  timespec v77;
  char v78;
  std::runtime_error v79;
  int v80;
  char v81;
  void *v82;
  char v83;
  unsigned __int8 v84;
  char ***v85;
  std::__shared_weak_count *v86;
  char v87;
  timespec v88;
  _BYTE v89[32];
  void *v90;
  char v91;
  char v92;
  void *v93;
  char v94;
  char v95;
  void *v96;
  char v97;
  void *__p;
  char v99;
  uint64_t v100;

  v3 = a1;
  v100 = *MEMORY[0x24BDAC8D0];
  sub_20EE0BF14((uint64_t)v89, a1);
  if (v89[24])
  {
    std::runtime_error::runtime_error(&v79, (const std::runtime_error *)v89);
    v79.__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
    v80 = *(_DWORD *)&v89[16];
    std::runtime_error::runtime_error((std::runtime_error *)a3, &v79);
    *(_QWORD *)a3 = &off_24C9EDA58;
    *(_DWORD *)(a3 + 16) = v80;
    *(_BYTE *)(a3 + 40) = 0;
    std::runtime_error::~runtime_error(&v79);
    if (v89[24])
      std::runtime_error::~runtime_error((std::runtime_error *)v89);
    return;
  }
  v5 = (std::__shared_weak_count *)operator new(0x30uLL);
  v6 = v5;
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EA5B0;
  v5[1].__vftable = 0;
  v5[1].__shared_owners_ = 0;
  v5[1].__shared_weak_owners_ = 0;
  v85 = (char ***)&v5[1];
  v86 = v5;
  v7 = (const void **)a2[3];
  v76 = (const void **)a2[4];
  if (v7 == v76)
  {
    *(_QWORD *)v89 = v5 + 1;
    *(_QWORD *)&v89[8] = v5;
LABEL_160:
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v65 = __ldxr(p_shared_owners);
    while (__stxr(v65 + 1, p_shared_owners));
LABEL_162:
    *(_OWORD *)&v89[16] = 0uLL;
    v90 = 0;
    sub_20E909ADC(&v89[16], *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
    v66 = *(_QWORD *)&v89[8];
    *(_QWORD *)a3 = *(_QWORD *)v89;
    *(_QWORD *)(a3 + 8) = v66;
    *(_OWORD *)(a3 + 16) = *(_OWORD *)&v89[16];
    *(_QWORD *)(a3 + 32) = v90;
    *(_BYTE *)(a3 + 40) = 1;
    if (!v6)
      return;
    goto LABEL_163;
  }
  v75 = v3 + 216;
  v74 = (unint64_t *)(v3 + 248);
  v73 = v3;
  while (1)
  {
    v8 = sub_210219C18();
    *(_DWORD *)&v89[24] = 0;
    sub_20EB9CFE0((uint64_t)&v77, (uint64_t)v89, (uint64_t)v7);
    if (*(_DWORD *)&v89[24] == -1)
      sub_20E877AB8();
    v77.tv_sec = (__darwin_time_t)&v88;
    ((void (*)(std::runtime_error *__return_ptr, timespec *, _BYTE *))off_24C9EA608[*(unsigned int *)&v89[24]])(&v79, &v77, v89);
    if (*(_DWORD *)&v89[24] != -1)
      ((void (*)(timespec *, _BYTE *))off_24C9EA5F0[*(unsigned int *)&v89[24]])(&v77, v89);
    if (v81 >= 0)
      v9 = &v79;
    else
      v9 = v79.__vftable;
    v10 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_31;
    *(_DWORD *)v89 = 136315138;
    *(_QWORD *)&v89[4] = v9;
    v12 = (char *)_os_log_send_and_compose_impl();
    v13 = strlen(v12);
    v77.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v77);
    tv_sec = v77.tv_sec;
    timespec_get(&v77, 1);
    sub_210219E20(v89, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v8 + 1), (__int128 *)(v8 + 5), "Anchors:Load: Started loading anchors from group %s", 0x33uLL, v12, v13, tv_sec, &v77);
    std::mutex::lock(&stru_254A5A410);
    v15 = qword_254A5A458;
    for (i = unk_254A5A460; v15 != i; v15 += 40)
    {
      v17 = *(_QWORD *)(v15 + 32);
      if (!v17)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v17 + 48))(v17, v89);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v99 < 0)
    {
      operator delete(__p);
      if ((v97 & 0x80000000) == 0)
      {
LABEL_19:
        if (v95)
          goto LABEL_23;
        goto LABEL_25;
      }
    }
    else if ((v97 & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(v96);
    if (v95)
    {
LABEL_23:
      if (v94 < 0)
        operator delete(v93);
    }
LABEL_25:
    if (v92 && v91 < 0)
      operator delete(v90);
    if ((v89[31] & 0x80000000) == 0)
    {
      if (!v12)
        goto LABEL_31;
LABEL_30:
      free(v12);
      goto LABEL_31;
    }
    operator delete(*(void **)&v89[8]);
    if (v12)
      goto LABEL_30;
LABEL_31:
    if (os_signpost_enabled((os_log_t)*v8))
    {
      *(_DWORD *)v89 = 136315138;
      *(_QWORD *)&v89[4] = v9;
      _os_signpost_emit_unreliably_with_name_impl();
    }
    if (v81 < 0)
      operator delete(v79.__vftable);
    sub_20EE279D4(v75, (uint64_t)v7, *(_QWORD *)(v3 + 272), (uint64_t)&v79);
    v18 = v84;
    if (v84)
    {
      v19 = sub_210219C18();
      *(_DWORD *)&v89[24] = 0;
      sub_20EB9CFE0((uint64_t)&v88, (uint64_t)v89, (uint64_t)v7);
      if (*(_DWORD *)&v89[24] == -1)
        sub_20E877AB8();
      v88.tv_sec = (__darwin_time_t)&v87;
      ((void (*)(timespec *__return_ptr, timespec *, _BYTE *))off_24C9EA608[*(unsigned int *)&v89[24]])(&v77, &v88, v89);
      if (*(_DWORD *)&v89[24] != -1)
        ((void (*)(timespec *, _BYTE *))off_24C9EA5F0[*(unsigned int *)&v89[24]])(&v88, v89);
      if (v78 >= 0)
        v20 = &v77;
      else
        v20 = (timespec *)v77.tv_sec;
      if (!v84)
      {
        exception = (char *)__cxa_allocate_exception(0x20uLL);
        std::runtime_error::runtime_error((std::runtime_error *)v89, &v79);
        *(_QWORD *)v89 = &off_24C9EDA58;
        *(_DWORD *)&v89[16] = v80;
        *(_QWORD *)exception = &off_24C9EA378;
        std::runtime_error::runtime_error((std::runtime_error *)(exception + 8), (const std::runtime_error *)v89);
        *((_QWORD *)exception + 1) = &off_24C9EDA58;
        *((_DWORD *)exception + 6) = *(_DWORD *)&v89[16];
        __cxa_throw(exception, (struct type_info *)&unk_24C9EA350, (void (*)(void *))sub_20EE13438);
      }
      v22 = v79.__vftable;
      imp = v79.__imp_.__imp_;
      v23 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      v24 = 0x82FA0BE82FA0BE83 * ((imp - (const char *)v22) >> 3);
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_79;
      *(_DWORD *)v89 = 136315394;
      *(_QWORD *)&v89[4] = v20;
      *(_WORD *)&v89[12] = 2048;
      *(_QWORD *)&v89[14] = v24;
      v26 = (char *)_os_log_send_and_compose_impl();
      v27 = strlen(v26);
      v88.tv_sec = 0;
      pthread_threadid_np(0, (__uint64_t *)&v88);
      v28 = v88.tv_sec;
      timespec_get(&v88, 1);
      sub_210219E20(v89, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v19 + 1), (__int128 *)(v19 + 5), "Anchors:Load: Finished loading anchors from group %s with %lu anchors", 0x45uLL, v26, v27, v28, &v88);
      std::mutex::lock(&stru_254A5A410);
      v29 = qword_254A5A458;
      for (j = unk_254A5A460; v29 != j; v29 += 40)
      {
        v31 = *(_QWORD *)(v29 + 32);
        if (!v31)
          sub_20E86D37C();
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v31 + 48))(v31, v89);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v99 < 0)
      {
        operator delete(__p);
        v3 = v73;
        if ((v97 & 0x80000000) == 0)
        {
LABEL_50:
          if (!v95)
          {
LABEL_73:
            if (v92 && v91 < 0)
              operator delete(v90);
            if ((v89[31] & 0x80000000) == 0)
            {
              if (!v26)
                goto LABEL_79;
              goto LABEL_78;
            }
            operator delete(*(void **)&v89[8]);
            if (v26)
LABEL_78:
              free(v26);
LABEL_79:
            if (os_signpost_enabled((os_log_t)*v19))
            {
              *(_DWORD *)v89 = 136315394;
              *(_QWORD *)&v89[4] = v20;
              *(_WORD *)&v89[12] = 2048;
              *(_QWORD *)&v89[14] = v24;
              _os_signpost_emit_unreliably_with_name_impl();
              if ((v78 & 0x80000000) == 0)
              {
LABEL_81:
                if (!v84)
                  goto LABEL_174;
                goto LABEL_85;
              }
            }
            else if ((v78 & 0x80000000) == 0)
            {
              goto LABEL_81;
            }
            operator delete((void *)v77.tv_sec);
            if (!v84)
            {
LABEL_174:
              v70 = (char *)__cxa_allocate_exception(0x20uLL);
              std::runtime_error::runtime_error((std::runtime_error *)v89, &v79);
              *(_QWORD *)v89 = &off_24C9EDA58;
              *(_DWORD *)&v89[16] = v80;
              *(_QWORD *)v70 = &off_24C9EA378;
              std::runtime_error::runtime_error((std::runtime_error *)(v70 + 8), (const std::runtime_error *)v89);
              *((_QWORD *)v70 + 1) = &off_24C9EDA58;
              *((_DWORD *)v70 + 6) = *(_DWORD *)&v89[16];
              __cxa_throw(v70, (struct type_info *)&unk_24C9EA350, (void (*)(void *))sub_20EE13438);
            }
LABEL_85:
            v42 = v85;
            v43 = v85[2];
            v44 = v85[1];
            if (v44 < v43)
            {
              sub_20EB9C8F0(v85[1], (uint64_t)&v79);
              v45 = (uint64_t)(v44 + 6);
              v42[1] = v44 + 6;
              goto LABEL_105;
            }
            v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v44 - (char *)*v85) >> 4);
            v47 = v46 + 1;
            if (v46 + 1 > 0x555555555555555)
              sub_20E867F44();
            v48 = 0xAAAAAAAAAAAAAAABLL * (((char *)v43 - (char *)*v85) >> 4);
            if (2 * v48 > v47)
              v47 = 2 * v48;
            if (v48 >= 0x2AAAAAAAAAAAAAALL)
              v49 = 0x555555555555555;
            else
              v49 = v47;
            v90 = v85 + 2;
            if (v49)
            {
              if (v49 > 0x555555555555555)
                sub_20E877A38();
              v50 = (char *)operator new(48 * v49);
            }
            else
            {
              v50 = 0;
            }
            *(_QWORD *)v89 = v50;
            *(_QWORD *)&v89[8] = &v50[48 * v46];
            *(_QWORD *)&v89[16] = *(_QWORD *)&v89[8];
            *(_QWORD *)&v89[24] = &v50[48 * v49];
            sub_20EB9C8F0(*(_QWORD **)&v89[8], (uint64_t)&v79);
            v51 = *(_QWORD *)&v89[8];
            v45 = *(_QWORD *)&v89[16] + 48;
            v52 = *v42;
            v53 = v42[1];
            if (v53 == *v42)
            {
              *v42 = *(char ***)&v89[8];
              v42[1] = (char **)v45;
              v42[2] = *(char ***)&v89[24];
              if (v53)
LABEL_104:
                operator delete(v53);
            }
            else
            {
              do
              {
                *(_QWORD *)(v51 - 48) = 0;
                *(_QWORD *)(v51 - 40) = 0;
                v51 -= 48;
                *(_QWORD *)(v51 + 16) = 0;
                v54 = *((_OWORD *)v53 - 3);
                v53 -= 6;
                *(_OWORD *)v51 = v54;
                *(_QWORD *)(v51 + 16) = v53[2];
                *v53 = 0;
                v53[1] = 0;
                v53[2] = 0;
                v55 = *(_OWORD *)(v53 + 3);
                *(_QWORD *)(v51 + 40) = v53[5];
                *(_OWORD *)(v51 + 24) = v55;
                v53[4] = 0;
                v53[5] = 0;
                v53[3] = 0;
              }
              while (v53 != v52);
              v53 = *v42;
              v56 = v42[1];
              *v42 = (char **)v51;
              v42[1] = (char **)v45;
              v42[2] = *(char ***)&v89[24];
              while (v56 != v53)
              {
                v56 -= 6;
                sub_20EB90FE0(v56);
              }
              if (v53)
                goto LABEL_104;
            }
LABEL_105:
            v42[1] = (char **)v45;
            sub_20EE0DE84(v74, v7);
            if (!v84)
              goto LABEL_147;
            goto LABEL_106;
          }
LABEL_71:
          if (v94 < 0)
            operator delete(v93);
          goto LABEL_73;
        }
      }
      else
      {
        v3 = v73;
        if ((v97 & 0x80000000) == 0)
          goto LABEL_50;
      }
      operator delete(v96);
      if (!v95)
        goto LABEL_73;
      goto LABEL_71;
    }
    v32 = sub_210219C18();
    *(_DWORD *)&v89[24] = 0;
    sub_20EB9CFE0((uint64_t)&v88, (uint64_t)v89, (uint64_t)v7);
    if (*(_DWORD *)&v89[24] == -1)
      sub_20E877AB8();
    v88.tv_sec = (__darwin_time_t)&v87;
    ((void (*)(timespec *__return_ptr, timespec *, _BYTE *))off_24C9EA608[*(unsigned int *)&v89[24]])(&v77, &v88, v89);
    if (*(_DWORD *)&v89[24] != -1)
      ((void (*)(timespec *, _BYTE *))off_24C9EA5F0[*(unsigned int *)&v89[24]])(&v88, v89);
    if (v78 >= 0)
      v33 = &v77;
    else
      v33 = (timespec *)v77.tv_sec;
    v34 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (atomic_load(&qword_254A5A450))
    {
      *(_DWORD *)v89 = 136315138;
      *(_QWORD *)&v89[4] = v33;
      v36 = (char *)_os_log_send_and_compose_impl();
      v37 = strlen(v36);
      v88.tv_sec = 0;
      pthread_threadid_np(0, (__uint64_t *)&v88);
      v38 = v88.tv_sec;
      timespec_get(&v88, 1);
      sub_210219E20(v89, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v32 + 1), (__int128 *)(v32 + 5), "Anchors:Load: Failed to load anchors from group %s", 0x32uLL, v36, v37, v38, &v88);
      std::mutex::lock(&stru_254A5A410);
      v39 = qword_254A5A458;
      for (k = unk_254A5A460; v39 != k; v39 += 40)
      {
        v41 = *(_QWORD *)(v39 + 32);
        if (!v41)
          sub_20E86D37C();
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v41 + 48))(v41, v89);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v99 < 0)
      {
        operator delete(__p);
        v3 = v73;
        if ((v97 & 0x80000000) == 0)
        {
LABEL_65:
          if (!v95)
          {
LABEL_133:
            if (v92 && v91 < 0)
              operator delete(v90);
            if ((v89[31] & 0x80000000) != 0)
              operator delete(*(void **)&v89[8]);
            if (v36)
              free(v36);
            goto LABEL_140;
          }
LABEL_131:
          if (v94 < 0)
            operator delete(v93);
          goto LABEL_133;
        }
      }
      else
      {
        v3 = v73;
        if ((v97 & 0x80000000) == 0)
          goto LABEL_65;
      }
      operator delete(v96);
      if (!v95)
        goto LABEL_133;
      goto LABEL_131;
    }
LABEL_140:
    if (os_signpost_enabled((os_log_t)*v32))
    {
      *(_DWORD *)v89 = 136315138;
      *(_QWORD *)&v89[4] = v33;
      _os_signpost_emit_unreliably_with_name_impl();
      if (v78 < 0)
      {
LABEL_145:
        operator delete((void *)v77.tv_sec);
        if (v84)
        {
LABEL_176:
          v71 = __cxa_allocate_exception(8uLL);
          *v71 = &off_24C9B4620;
          __cxa_throw(v71, (struct type_info *)&unk_24C9AD070, (void (*)(void *))std::exception::~exception);
        }
        goto LABEL_146;
      }
    }
    else if (v78 < 0)
    {
      goto LABEL_145;
    }
    if (v84)
      goto LABEL_176;
LABEL_146:
    std::runtime_error::runtime_error((std::runtime_error *)v89, &v79);
    *(_QWORD *)v89 = &off_24C9EDA58;
    *(_DWORD *)&v89[16] = v80;
    v63 = std::runtime_error::runtime_error((std::runtime_error *)a3, (const std::runtime_error *)v89);
    v63->__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
    LODWORD(v63[1].__vftable) = *(_DWORD *)&v89[16];
    LOBYTE(v63[2].__imp_.__imp_) = 0;
    std::runtime_error::~runtime_error((std::runtime_error *)v89);
    if (!v84)
    {
LABEL_147:
      ((void (*)(std::runtime_error *))v79.~runtime_error)(&v79);
      if (!v18)
        break;
      goto LABEL_148;
    }
LABEL_106:
    if (v83 < 0)
    {
      operator delete(v82);
      v57 = v79.__vftable;
      if (!v79.__vftable)
        goto LABEL_125;
LABEL_110:
      v58 = v79.__imp_.__imp_;
      v59 = v57;
      if ((std::runtime_error_vtbl *)v79.__imp_.__imp_ == v57)
      {
LABEL_124:
        v79.__imp_.__imp_ = (const char *)v57;
        operator delete(v59);
        goto LABEL_125;
      }
      while (1)
      {
        if (!*(v58 - 48))
          goto LABEL_181;
        v60 = (std::__shared_weak_count *)*((_QWORD *)v58 - 7);
        if (!v60)
          goto LABEL_181;
        v61 = (unint64_t *)&v60->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
          if (*(v58 - 304))
          {
LABEL_119:
            if (*(v58 - 305) < 0)
              operator delete(*((void **)v58 - 41));
          }
        }
        else
        {
LABEL_181:
          if (*(v58 - 304))
            goto LABEL_119;
        }
        v58 -= 344;
        if (v58 == (const char *)v57)
        {
          v59 = v79.__vftable;
          goto LABEL_124;
        }
      }
    }
    v57 = v79.__vftable;
    if (v79.__vftable)
      goto LABEL_110;
LABEL_125:
    if (!v18)
      break;
LABEL_148:
    v7 += 3;
    if (v7 == v76)
    {
      v6 = v86;
      *(_QWORD *)v89 = v85;
      *(_QWORD *)&v89[8] = v86;
      if (!v86)
        goto LABEL_162;
      goto LABEL_160;
    }
  }
  v6 = v86;
  if (!v86)
    return;
LABEL_163:
  v67 = (unint64_t *)&v6->__shared_owners_;
  do
    v68 = __ldaxr(v67);
  while (__stlxr(v68 - 1, v67));
  if (!v68)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

